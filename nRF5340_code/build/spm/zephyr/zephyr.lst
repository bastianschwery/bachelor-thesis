
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return pm_state;
}


enum power_states pm_system_suspend(int32_t ticks)
{
   0:	b0 18 00 20 55 1d 00 00 73 48 00 00 b5 1d 00 00     ... U...sH......
		   pm_policy_next_state(ticks) : forced_pm_state;
  10:	b5 1d 00 00 b5 1d 00 00 b5 1d 00 00 b5 1d 00 00     ................
	...
	pm_power_state_set(pm_state);
  2c:	3d 1b 00 00 b5 1d 00 00 00 00 00 00 e5 1a 00 00     =...............
		pm_state_notify(false);
  3c:	ed 47 00 00                                         .G..

00000040 <_irq_vector_table>:
		pm_power_state_exit_post_ops(pm_state);
  40:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
	return pm_policy_mgr(ticks);
}
  50:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
  60:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
  70:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
  80:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
  90:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
  a0:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
  b0:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
  c0:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
  d0:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
  e0:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
  f0:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
 100:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
 110:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
 120:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
 130:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
 140:	15 1d 00 00 15 1d 00 00 15 1d 00 00 15 1d 00 00     ................
 150:	15 1d 00 00                                         ....

00000154 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	de e6 1e 28 4c bb ce 8f 02 35 00 00 3c 00 00 00     ...(L....5..<...
 210:	00 80 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
 220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295
     24c:	f04f 30ff 	movne.w	r0, #4294967295
     250:	f000 b980 	b.w	554 <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f806 	bl	26c <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     270:	9e09      	ldr	r6, [sp, #36]	; 0x24
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	460f      	mov	r7, r1
     278:	2b00      	cmp	r3, #0
     27a:	d147      	bne.n	30c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8c>
     27c:	428a      	cmp	r2, r1
     27e:	4694      	mov	ip, r2
     280:	d95f      	bls.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
     282:	fab2 f382 	clz	r3, r2
     286:	b143      	cbz	r3, 29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     288:	f1c3 0120 	rsb	r1, r3, #32
     28c:	409f      	lsls	r7, r3
     28e:	fa02 fc03 	lsl.w	ip, r2, r3
     292:	409c      	lsls	r4, r3
     294:	fa20 f101 	lsr.w	r1, r0, r1
     298:	430f      	orrs	r7, r1
     29a:	ea4f 451c 	mov.w	r5, ip, lsr #16
     29e:	fa1f fe8c 	uxth.w	lr, ip
     2a2:	0c22      	lsrs	r2, r4, #16
     2a4:	fbb7 f1f5 	udiv	r1, r7, r5
     2a8:	fb05 7711 	mls	r7, r5, r1, r7
     2ac:	fb01 f00e 	mul.w	r0, r1, lr
     2b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
     2b4:	4290      	cmp	r0, r2
     2b6:	d908      	bls.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     2b8:	eb1c 0202 	adds.w	r2, ip, r2
     2bc:	f101 37ff 	add.w	r7, r1, #4294967295
     2c0:	d202      	bcs.n	2c8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x48>
     2c2:	4290      	cmp	r0, r2
     2c4:	f200 8134 	bhi.w	530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>
     2c8:	4639      	mov	r1, r7
     2ca:	1a12      	subs	r2, r2, r0
     2cc:	b2a4      	uxth	r4, r4
     2ce:	fbb2 f0f5 	udiv	r0, r2, r5
     2d2:	fb05 2210 	mls	r2, r5, r0, r2
     2d6:	fb00 fe0e 	mul.w	lr, r0, lr
     2da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
     2de:	45a6      	cmp	lr, r4
     2e0:	d908      	bls.n	2f4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x74>
     2e2:	eb1c 0404 	adds.w	r4, ip, r4
     2e6:	f100 32ff 	add.w	r2, r0, #4294967295
     2ea:	d202      	bcs.n	2f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x72>
     2ec:	45a6      	cmp	lr, r4
     2ee:	f200 8119 	bhi.w	524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>
     2f2:	4610      	mov	r0, r2
     2f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     2f8:	eba4 040e 	sub.w	r4, r4, lr
     2fc:	2100      	movs	r1, #0
     2fe:	b11e      	cbz	r6, 308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     300:	40dc      	lsrs	r4, r3
     302:	2300      	movs	r3, #0
     304:	e9c6 4300 	strd	r4, r3, [r6]
     308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     30c:	428b      	cmp	r3, r1
     30e:	d908      	bls.n	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     310:	2e00      	cmp	r6, #0
     312:	f000 80fb 	beq.w	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     316:	2100      	movs	r1, #0
     318:	e9c6 0500 	strd	r0, r5, [r6]
     31c:	4608      	mov	r0, r1
     31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     322:	fab3 f183 	clz	r1, r3
     326:	2900      	cmp	r1, #0
     328:	d14b      	bne.n	3c2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x142>
     32a:	42ab      	cmp	r3, r5
     32c:	f0c0 80f1 	bcc.w	512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
     330:	4282      	cmp	r2, r0
     332:	f240 80ee 	bls.w	512 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a>
     336:	4608      	mov	r0, r1
     338:	2e00      	cmp	r6, #0
     33a:	d0e5      	beq.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     33c:	e9c6 4700 	strd	r4, r7, [r6]
     340:	e7e2      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     342:	b902      	cbnz	r2, 346 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc6>
     344:	deff      	udf	#255	; 0xff
     346:	fab2 f382 	clz	r3, r2
     34a:	2b00      	cmp	r3, #0
     34c:	f040 809d 	bne.w	48a <CONFIG_FLASH_SIZE+0x8a>
     350:	1a8d      	subs	r5, r1, r2
     352:	ea4f 4e12 	mov.w	lr, r2, lsr #16
     356:	b297      	uxth	r7, r2
     358:	2101      	movs	r1, #1
     35a:	fbb5 f2fe 	udiv	r2, r5, lr
     35e:	fb0e 5012 	mls	r0, lr, r2, r5
     362:	0c25      	lsrs	r5, r4, #16
     364:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     368:	fb07 f002 	mul.w	r0, r7, r2
     36c:	42a8      	cmp	r0, r5
     36e:	d90f      	bls.n	390 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x110>
     370:	eb1c 0505 	adds.w	r5, ip, r5
     374:	f102 38ff 	add.w	r8, r2, #4294967295
     378:	bf2c      	ite	cs
     37a:	f04f 0901 	movcs.w	r9, #1
     37e:	f04f 0900 	movcc.w	r9, #0
     382:	42a8      	cmp	r0, r5
     384:	d903      	bls.n	38e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x10e>
     386:	f1b9 0f00 	cmp.w	r9, #0
     38a:	f000 80ce 	beq.w	52a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x42>
     38e:	4642      	mov	r2, r8
     390:	1a2d      	subs	r5, r5, r0
     392:	b2a4      	uxth	r4, r4
     394:	fbb5 f0fe 	udiv	r0, r5, lr
     398:	fb0e 5510 	mls	r5, lr, r0, r5
     39c:	fb00 f707 	mul.w	r7, r0, r7
     3a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     3a4:	42a7      	cmp	r7, r4
     3a6:	d908      	bls.n	3ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13a>
     3a8:	eb1c 0404 	adds.w	r4, ip, r4
     3ac:	f100 35ff 	add.w	r5, r0, #4294967295
     3b0:	d202      	bcs.n	3b8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x138>
     3b2:	42a7      	cmp	r7, r4
     3b4:	f200 80b3 	bhi.w	51e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x36>
     3b8:	4628      	mov	r0, r5
     3ba:	1be4      	subs	r4, r4, r7
     3bc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
     3c0:	e79d      	b.n	2fe <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7e>
     3c2:	f1c1 0720 	rsb	r7, r1, #32
     3c6:	408b      	lsls	r3, r1
     3c8:	fa05 f401 	lsl.w	r4, r5, r1
     3cc:	fa22 fc07 	lsr.w	ip, r2, r7
     3d0:	40fd      	lsrs	r5, r7
     3d2:	408a      	lsls	r2, r1
     3d4:	ea4c 0c03 	orr.w	ip, ip, r3
     3d8:	fa20 f307 	lsr.w	r3, r0, r7
     3dc:	ea4f 491c 	mov.w	r9, ip, lsr #16
     3e0:	431c      	orrs	r4, r3
     3e2:	fa1f fe8c 	uxth.w	lr, ip
     3e6:	fa00 f301 	lsl.w	r3, r0, r1
     3ea:	0c20      	lsrs	r0, r4, #16
     3ec:	fbb5 f8f9 	udiv	r8, r5, r9
     3f0:	fb09 5518 	mls	r5, r9, r8, r5
     3f4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     3f8:	fb08 f00e 	mul.w	r0, r8, lr
     3fc:	42a8      	cmp	r0, r5
     3fe:	d90f      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     400:	eb1c 0505 	adds.w	r5, ip, r5
     404:	f108 3aff 	add.w	sl, r8, #4294967295
     408:	bf2c      	ite	cs
     40a:	f04f 0b01 	movcs.w	fp, #1
     40e:	f04f 0b00 	movcc.w	fp, #0
     412:	42a8      	cmp	r0, r5
     414:	d903      	bls.n	41e <CONFIG_FLASH_SIZE+0x1e>
     416:	f1bb 0f00 	cmp.w	fp, #0
     41a:	f000 808c 	beq.w	536 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4e>
     41e:	46d0      	mov	r8, sl
     420:	1a2d      	subs	r5, r5, r0
     422:	b2a4      	uxth	r4, r4
     424:	fbb5 f0f9 	udiv	r0, r5, r9
     428:	fb09 5510 	mls	r5, r9, r0, r5
     42c:	fb00 fe0e 	mul.w	lr, r0, lr
     430:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     434:	45ae      	cmp	lr, r5
     436:	d907      	bls.n	448 <CONFIG_FLASH_SIZE+0x48>
     438:	eb1c 0505 	adds.w	r5, ip, r5
     43c:	f100 34ff 	add.w	r4, r0, #4294967295
     440:	d201      	bcs.n	446 <CONFIG_FLASH_SIZE+0x46>
     442:	45ae      	cmp	lr, r5
     444:	d87e      	bhi.n	544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
     446:	4620      	mov	r0, r4
     448:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     44c:	eba5 050e 	sub.w	r5, r5, lr
     450:	fba0 9802 	umull	r9, r8, r0, r2
     454:	4545      	cmp	r5, r8
     456:	464c      	mov	r4, r9
     458:	46c6      	mov	lr, r8
     45a:	d302      	bcc.n	462 <CONFIG_FLASH_SIZE+0x62>
     45c:	d106      	bne.n	46c <CONFIG_FLASH_SIZE+0x6c>
     45e:	454b      	cmp	r3, r9
     460:	d204      	bcs.n	46c <CONFIG_FLASH_SIZE+0x6c>
     462:	3801      	subs	r0, #1
     464:	ebb9 0402 	subs.w	r4, r9, r2
     468:	eb68 0e0c 	sbc.w	lr, r8, ip
     46c:	2e00      	cmp	r6, #0
     46e:	d06f      	beq.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     470:	1b1a      	subs	r2, r3, r4
     472:	eb65 050e 	sbc.w	r5, r5, lr
     476:	fa22 f301 	lsr.w	r3, r2, r1
     47a:	fa05 f707 	lsl.w	r7, r5, r7
     47e:	40cd      	lsrs	r5, r1
     480:	2100      	movs	r1, #0
     482:	431f      	orrs	r7, r3
     484:	e9c6 7500 	strd	r7, r5, [r6]
     488:	e73e      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     48a:	fa02 fc03 	lsl.w	ip, r2, r3
     48e:	f1c3 0020 	rsb	r0, r3, #32
     492:	fa01 f203 	lsl.w	r2, r1, r3
     496:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
     49a:	40c1      	lsrs	r1, r0
     49c:	fa24 f500 	lsr.w	r5, r4, r0
     4a0:	fa1f f78c 	uxth.w	r7, ip
     4a4:	409c      	lsls	r4, r3
     4a6:	4315      	orrs	r5, r2
     4a8:	fbb1 f0fe 	udiv	r0, r1, lr
     4ac:	0c2a      	lsrs	r2, r5, #16
     4ae:	fb0e 1110 	mls	r1, lr, r0, r1
     4b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
     4b6:	fb00 f107 	mul.w	r1, r0, r7
     4ba:	4291      	cmp	r1, r2
     4bc:	d90e      	bls.n	4dc <CONFIG_FLASH_SIZE+0xdc>
     4be:	eb1c 0202 	adds.w	r2, ip, r2
     4c2:	f100 38ff 	add.w	r8, r0, #4294967295
     4c6:	bf2c      	ite	cs
     4c8:	f04f 0901 	movcs.w	r9, #1
     4cc:	f04f 0900 	movcc.w	r9, #0
     4d0:	4291      	cmp	r1, r2
     4d2:	d902      	bls.n	4da <CONFIG_FLASH_SIZE+0xda>
     4d4:	f1b9 0f00 	cmp.w	r9, #0
     4d8:	d031      	beq.n	53e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x56>
     4da:	4640      	mov	r0, r8
     4dc:	1a52      	subs	r2, r2, r1
     4de:	b2ad      	uxth	r5, r5
     4e0:	fbb2 f1fe 	udiv	r1, r2, lr
     4e4:	fb0e 2211 	mls	r2, lr, r1, r2
     4e8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
     4ec:	fb01 f207 	mul.w	r2, r1, r7
     4f0:	42aa      	cmp	r2, r5
     4f2:	d907      	bls.n	504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
     4f4:	eb1c 0505 	adds.w	r5, ip, r5
     4f8:	f101 38ff 	add.w	r8, r1, #4294967295
     4fc:	d201      	bcs.n	502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
     4fe:	42aa      	cmp	r2, r5
     500:	d823      	bhi.n	54a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x62>
     502:	4641      	mov	r1, r8
     504:	1aad      	subs	r5, r5, r2
     506:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     50a:	e726      	b.n	35a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xda>
     50c:	4631      	mov	r1, r6
     50e:	4630      	mov	r0, r6
     510:	e6fa      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     512:	1a84      	subs	r4, r0, r2
     514:	eb65 0303 	sbc.w	r3, r5, r3
     518:	2001      	movs	r0, #1
     51a:	461f      	mov	r7, r3
     51c:	e70c      	b.n	338 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb8>
     51e:	4464      	add	r4, ip
     520:	3802      	subs	r0, #2
     522:	e74a      	b.n	3ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x13a>
     524:	4464      	add	r4, ip
     526:	3802      	subs	r0, #2
     528:	e6e4      	b.n	2f4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x74>
     52a:	3a02      	subs	r2, #2
     52c:	4465      	add	r5, ip
     52e:	e72f      	b.n	390 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x110>
     530:	3902      	subs	r1, #2
     532:	4462      	add	r2, ip
     534:	e6c9      	b.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     536:	f1a8 0802 	sub.w	r8, r8, #2
     53a:	4465      	add	r5, ip
     53c:	e770      	b.n	420 <CONFIG_FLASH_SIZE+0x20>
     53e:	3802      	subs	r0, #2
     540:	4462      	add	r2, ip
     542:	e7cb      	b.n	4dc <CONFIG_FLASH_SIZE+0xdc>
     544:	3802      	subs	r0, #2
     546:	4465      	add	r5, ip
     548:	e77e      	b.n	448 <CONFIG_FLASH_SIZE+0x48>
     54a:	3902      	subs	r1, #2
     54c:	4465      	add	r5, ip
     54e:	e7d9      	b.n	504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
     550:	4631      	mov	r1, r6
     552:	e6d9      	b.n	308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>

00000554 <__aeabi_idiv0>:
     554:	4770      	bx	lr
     556:	bf00      	nop

00000558 <__gnu_cmse_nonsecure_call>:
     558:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     55c:	4627      	mov	r7, r4
     55e:	46a0      	mov	r8, r4
     560:	46a1      	mov	r9, r4
     562:	46a2      	mov	sl, r4
     564:	46a3      	mov	fp, r4
     566:	46a4      	mov	ip, r4
     568:	b0a2      	sub	sp, #136	; 0x88
     56a:	ec2d 0a00 	vlstm	sp
     56e:	f384 8800 	msr	CPSR_f, r4
     572:	4625      	mov	r5, r4
     574:	4626      	mov	r6, r4
     576:	47a4      	blxns	r4
     578:	ec3d 0a00 	vlldm	sp
     57c:	b022      	add	sp, #136	; 0x88
     57e:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	...

00000584 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     584:	680b      	ldr	r3, [r1, #0]
     586:	3301      	adds	r3, #1
     588:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     58a:	4b01      	ldr	r3, [pc, #4]	; (590 <char_out+0xc>)
     58c:	681b      	ldr	r3, [r3, #0]
     58e:	4718      	bx	r3
     590:	20000000 	.word	0x20000000

00000594 <__printk_hook_install>:
	_char_out = fn;
     594:	4b01      	ldr	r3, [pc, #4]	; (59c <__printk_hook_install+0x8>)
     596:	6018      	str	r0, [r3, #0]
}
     598:	4770      	bx	lr
     59a:	bf00      	nop
     59c:	20000000 	.word	0x20000000

000005a0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     5a0:	b507      	push	{r0, r1, r2, lr}
     5a2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     5a4:	2100      	movs	r1, #0
{
     5a6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     5a8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     5aa:	4803      	ldr	r0, [pc, #12]	; (5b8 <vprintk+0x18>)
     5ac:	a901      	add	r1, sp, #4
     5ae:	f000 f8e5 	bl	77c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     5b2:	b003      	add	sp, #12
     5b4:	f85d fb04 	ldr.w	pc, [sp], #4
     5b8:	00000585 	.word	0x00000585

000005bc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     5bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5c0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
     5c4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     5c6:	f019 0808 	ands.w	r8, r9, #8
{
     5ca:	4693      	mov	fp, r2
	if (processing) {
     5cc:	d00d      	beq.n	5ea <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     5ce:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     5d0:	bf0c      	ite	eq
     5d2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     5d6:	f049 0920 	orrne.w	r9, r9, #32
     5da:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     5de:	f38b 8811 	msr	BASEPRI, fp
     5e2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     5e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5ea:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     5ee:	2902      	cmp	r1, #2
     5f0:	d107      	bne.n	602 <process_event+0x46>
			evt = process_recheck(mgr);
     5f2:	4620      	mov	r0, r4
     5f4:	f003 fe6e 	bl	42d4 <process_recheck>
		if (evt == EVT_NOP) {
     5f8:	2800      	cmp	r0, #0
     5fa:	d0f0      	beq.n	5de <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     5fc:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5fe:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     600:	d14e      	bne.n	6a0 <process_event+0xe4>
			res = mgr->last_res;
     602:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     604:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     606:	2f00      	cmp	r7, #0
     608:	da15      	bge.n	636 <process_event+0x7a>
		*clients = mgr->clients;
     60a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     60c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     610:	e9c4 8800 	strd	r8, r8, [r4]
     614:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     618:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     61a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     61c:	8b21      	ldrh	r1, [r4, #24]
     61e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     622:	45ca      	cmp	sl, r9
     624:	d002      	beq.n	62c <process_event+0x70>
		if (do_monitors
     626:	68a3      	ldr	r3, [r4, #8]
     628:	2b00      	cmp	r3, #0
     62a:	d15a      	bne.n	6e2 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     62c:	b90d      	cbnz	r5, 632 <process_event+0x76>
		    || (transit != NULL)) {
     62e:	2e00      	cmp	r6, #0
     630:	d071      	beq.n	716 <process_event+0x15a>
     632:	2300      	movs	r3, #0
     634:	e056      	b.n	6e4 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     636:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     63a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     63c:	2a01      	cmp	r2, #1
     63e:	d81e      	bhi.n	67e <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     640:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     644:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     646:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     648:	b289      	uxth	r1, r1
     64a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     64e:	d10a      	bne.n	666 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     650:	b13d      	cbz	r5, 662 <process_event+0xa6>
     652:	462a      	mov	r2, r5
     654:	8b63      	ldrh	r3, [r4, #26]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     656:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     658:	3301      	adds	r3, #1
     65a:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     65c:	2a00      	cmp	r2, #0
     65e:	d1fa      	bne.n	656 <process_event+0x9a>
     660:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     662:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
     666:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     668:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     66a:	f003 fe33 	bl	42d4 <process_recheck>
     66e:	4606      	mov	r6, r0
     670:	2800      	cmp	r0, #0
     672:	d0d3      	beq.n	61c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     674:	8b23      	ldrh	r3, [r4, #24]
     676:	f043 0320 	orr.w	r3, r3, #32
     67a:	8323      	strh	r3, [r4, #24]
     67c:	e7cd      	b.n	61a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     67e:	2b04      	cmp	r3, #4
     680:	d10c      	bne.n	69c <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     682:	f021 0107 	bic.w	r1, r1, #7
     686:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
     688:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     68a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     68c:	f003 fe22 	bl	42d4 <process_recheck>
     690:	4605      	mov	r5, r0
     692:	2800      	cmp	r0, #0
     694:	d0c1      	beq.n	61a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     696:	f041 0120 	orr.w	r1, r1, #32
     69a:	8321      	strh	r1, [r4, #24]
     69c:	2500      	movs	r5, #0
     69e:	e7bc      	b.n	61a <process_event+0x5e>
		} else if (evt == EVT_START) {
     6a0:	2803      	cmp	r0, #3
     6a2:	d109      	bne.n	6b8 <process_event+0xfc>
			transit = mgr->transitions->start;
     6a4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6a6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     6aa:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6ac:	f043 0306 	orr.w	r3, r3, #6
}
     6b0:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
     6b2:	8323      	strh	r3, [r4, #24]
		res = 0;
     6b4:	462f      	mov	r7, r5
     6b6:	e7b1      	b.n	61c <process_event+0x60>
		} else if (evt == EVT_STOP) {
     6b8:	2804      	cmp	r0, #4
     6ba:	d106      	bne.n	6ca <process_event+0x10e>
			transit = mgr->transitions->stop;
     6bc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6be:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     6c2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6c4:	f043 0304 	orr.w	r3, r3, #4
     6c8:	e7f2      	b.n	6b0 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     6ca:	2805      	cmp	r0, #5
     6cc:	d106      	bne.n	6dc <process_event+0x120>
			transit = mgr->transitions->reset;
     6ce:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6d0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     6d4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6d6:	f043 0305 	orr.w	r3, r3, #5
     6da:	e7e9      	b.n	6b0 <process_event+0xf4>
     6dc:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     6de:	462e      	mov	r6, r5
     6e0:	e7e8      	b.n	6b4 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     6e2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     6e4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     6e8:	8321      	strh	r1, [r4, #24]
     6ea:	f38b 8811 	msr	BASEPRI, fp
     6ee:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     6f2:	b9fb      	cbnz	r3, 734 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     6f4:	bb85      	cbnz	r5, 758 <process_event+0x19c>
			if (transit != NULL) {
     6f6:	b116      	cbz	r6, 6fe <process_event+0x142>
				transit(mgr, transition_complete);
     6f8:	4620      	mov	r0, r4
     6fa:	491f      	ldr	r1, [pc, #124]	; (778 <process_event+0x1bc>)
     6fc:	47b0      	blx	r6
	__asm__ volatile(
     6fe:	f04f 0320 	mov.w	r3, #32
     702:	f3ef 8b11 	mrs	fp, BASEPRI
     706:	f383 8811 	msr	BASEPRI, r3
     70a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     70e:	8b23      	ldrh	r3, [r4, #24]
     710:	f023 0308 	bic.w	r3, r3, #8
     714:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     716:	8b23      	ldrh	r3, [r4, #24]
     718:	06da      	lsls	r2, r3, #27
     71a:	d525      	bpl.n	768 <process_event+0x1ac>
			evt = EVT_COMPLETE;
     71c:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     71e:	f023 0310 	bic.w	r3, r3, #16
     722:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     724:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     728:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     72c:	2900      	cmp	r1, #0
     72e:	f47f af5e 	bne.w	5ee <process_event+0x32>
out:
     732:	e754      	b.n	5de <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     734:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     736:	2900      	cmp	r1, #0
     738:	d0dc      	beq.n	6f4 <process_event+0x138>
	return node->next;
     73a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     73e:	463b      	mov	r3, r7
     740:	4652      	mov	r2, sl
     742:	4620      	mov	r0, r4
     744:	f8d1 b004 	ldr.w	fp, [r1, #4]
     748:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     74a:	f1b9 0f00 	cmp.w	r9, #0
     74e:	d0d1      	beq.n	6f4 <process_event+0x138>
     750:	4649      	mov	r1, r9
     752:	f8d9 9000 	ldr.w	r9, [r9]
     756:	e7f2      	b.n	73e <process_event+0x182>
     758:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     75a:	463b      	mov	r3, r7
     75c:	4652      	mov	r2, sl
     75e:	4620      	mov	r0, r4
     760:	682d      	ldr	r5, [r5, #0]
     762:	f003 fdd3 	bl	430c <notify_one>
     766:	e7c5      	b.n	6f4 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     768:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     76c:	bf1e      	ittt	ne
     76e:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
     772:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     774:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     776:	e7d5      	b.n	724 <process_event+0x168>
     778:	00004339 	.word	0x00004339

0000077c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     780:	468b      	mov	fp, r1
     782:	4692      	mov	sl, r2
     784:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     786:	2500      	movs	r5, #0
{
     788:	b091      	sub	sp, #68	; 0x44
     78a:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     78c:	f89a 0000 	ldrb.w	r0, [sl]
     790:	b908      	cbnz	r0, 796 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     792:	4628      	mov	r0, r5
     794:	e35f      	b.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
		if (*fp != '%') {
     796:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     798:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     79c:	d007      	beq.n	7ae <cbvprintf+0x32>
			OUTC('%');
     79e:	4659      	mov	r1, fp
     7a0:	9b02      	ldr	r3, [sp, #8]
     7a2:	4798      	blx	r3
     7a4:	2800      	cmp	r0, #0
     7a6:	f2c0 8356 	blt.w	e56 <CONFIG_ISR_STACK_SIZE+0x656>
     7aa:	3501      	adds	r5, #1
			break;
     7ac:	e212      	b.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
		} state = {
     7ae:	2218      	movs	r2, #24
     7b0:	2100      	movs	r1, #0
     7b2:	a80a      	add	r0, sp, #40	; 0x28
     7b4:	f004 f8ca 	bl	494c <memset>
	if (*sp == '%') {
     7b8:	f89a 3001 	ldrb.w	r3, [sl, #1]
     7bc:	2b25      	cmp	r3, #37	; 0x25
     7be:	d078      	beq.n	8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
     7c0:	2200      	movs	r2, #0
     7c2:	4694      	mov	ip, r2
     7c4:	4696      	mov	lr, r2
     7c6:	4616      	mov	r6, r2
     7c8:	4610      	mov	r0, r2
     7ca:	4639      	mov	r1, r7
		switch (*sp) {
     7cc:	f817 3b01 	ldrb.w	r3, [r7], #1
     7d0:	2b2b      	cmp	r3, #43	; 0x2b
     7d2:	f000 809d 	beq.w	910 <CONFIG_ISR_STACK_SIZE+0x110>
     7d6:	f200 8094 	bhi.w	902 <CONFIG_ISR_STACK_SIZE+0x102>
     7da:	2b20      	cmp	r3, #32
     7dc:	f000 809a 	beq.w	914 <CONFIG_ISR_STACK_SIZE+0x114>
     7e0:	2b23      	cmp	r3, #35	; 0x23
     7e2:	f000 809a 	beq.w	91a <CONFIG_ISR_STACK_SIZE+0x11a>
     7e6:	b128      	cbz	r0, 7f4 <cbvprintf+0x78>
     7e8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     7ec:	f040 0004 	orr.w	r0, r0, #4
     7f0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     7f4:	b12e      	cbz	r6, 802 <CONFIG_ISR_STACK_SIZE+0x2>
     7f6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     7fa:	f040 0008 	orr.w	r0, r0, #8
     7fe:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     802:	f1be 0f00 	cmp.w	lr, #0
     806:	d005      	beq.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
     808:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     80c:	f040 0010 	orr.w	r0, r0, #16
     810:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     814:	f1bc 0f00 	cmp.w	ip, #0
     818:	d005      	beq.n	826 <CONFIG_ISR_STACK_SIZE+0x26>
     81a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     81e:	f040 0020 	orr.w	r0, r0, #32
     822:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     826:	b12a      	cbz	r2, 834 <CONFIG_ISR_STACK_SIZE+0x34>
     828:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     82c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     830:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     834:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     838:	f002 0044 	and.w	r0, r2, #68	; 0x44
     83c:	2844      	cmp	r0, #68	; 0x44
     83e:	d103      	bne.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
		conv->flag_zero = false;
     840:	f36f 1286 	bfc	r2, #6, #1
     844:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     848:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     84c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     84e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     852:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     856:	d17b      	bne.n	950 <CONFIG_ISR_STACK_SIZE+0x150>
		conv->width_star = true;
     858:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
     85c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     85e:	f042 0201 	orr.w	r2, r2, #1
     862:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     866:	781a      	ldrb	r2, [r3, #0]
     868:	2a2e      	cmp	r2, #46	; 0x2e
     86a:	bf0c      	ite	eq
     86c:	2101      	moveq	r1, #1
     86e:	2100      	movne	r1, #0
     870:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     874:	f361 0241 	bfi	r2, r1, #1, #1
     878:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     87c:	d174      	bne.n	968 <CONFIG_ISR_STACK_SIZE+0x168>
	if (*sp == '*') {
     87e:	785a      	ldrb	r2, [r3, #1]
     880:	2a2a      	cmp	r2, #42	; 0x2a
     882:	d06a      	beq.n	95a <CONFIG_ISR_STACK_SIZE+0x15a>
	size_t val = 0;
     884:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     886:	260a      	movs	r6, #10
	++sp;
     888:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     88a:	4618      	mov	r0, r3
     88c:	f810 2b01 	ldrb.w	r2, [r0], #1
     890:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     894:	2f09      	cmp	r7, #9
     896:	f240 808e 	bls.w	9b6 <CONFIG_ISR_STACK_SIZE+0x1b6>
	conv->unsupported |= ((conv->prec_value < 0)
     89a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     89e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     8a0:	f3c2 0040 	ubfx	r0, r2, #1, #1
     8a4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     8a8:	f361 0241 	bfi	r2, r1, #1, #1
     8ac:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     8b0:	e05a      	b.n	968 <CONFIG_ISR_STACK_SIZE+0x168>
		conv->specifier = *sp++;
     8b2:	f10a 0702 	add.w	r7, sl, #2
     8b6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     8ba:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8be:	07d9      	lsls	r1, r3, #31
     8c0:	f140 8149 	bpl.w	b56 <CONFIG_ISR_STACK_SIZE+0x356>
			width = va_arg(ap, int);
     8c4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     8c8:	f1b9 0f00 	cmp.w	r9, #0
     8cc:	da07      	bge.n	8de <CONFIG_ISR_STACK_SIZE+0xde>
				conv->flag_dash = true;
     8ce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
     8d2:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     8d6:	f042 0204 	orr.w	r2, r2, #4
     8da:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
     8de:	075a      	lsls	r2, r3, #29
     8e0:	f140 8142 	bpl.w	b68 <CONFIG_ISR_STACK_SIZE+0x368>
			int arg = va_arg(ap, int);
     8e4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     8e8:	f1b8 0f00 	cmp.w	r8, #0
     8ec:	f280 8141 	bge.w	b72 <CONFIG_ISR_STACK_SIZE+0x372>
				conv->prec_present = false;
     8f0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8f4:	f36f 0341 	bfc	r3, #1, #1
     8f8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     8fc:	f04f 38ff 	mov.w	r8, #4294967295
     900:	e137      	b.n	b72 <CONFIG_ISR_STACK_SIZE+0x372>
		switch (*sp) {
     902:	2b2d      	cmp	r3, #45	; 0x2d
     904:	d00c      	beq.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     906:	2b30      	cmp	r3, #48	; 0x30
     908:	f47f af6d 	bne.w	7e6 <cbvprintf+0x6a>
			conv->flag_zero = true;
     90c:	2201      	movs	r2, #1
	} while (loop);
     90e:	e75c      	b.n	7ca <cbvprintf+0x4e>
			conv->flag_plus = true;
     910:	2601      	movs	r6, #1
     912:	e75a      	b.n	7ca <cbvprintf+0x4e>
			conv->flag_space = true;
     914:	f04f 0e01 	mov.w	lr, #1
     918:	e757      	b.n	7ca <cbvprintf+0x4e>
			conv->flag_hash = true;
     91a:	f04f 0c01 	mov.w	ip, #1
     91e:	e754      	b.n	7ca <cbvprintf+0x4e>
		switch (*sp) {
     920:	2001      	movs	r0, #1
     922:	e752      	b.n	7ca <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     924:	4633      	mov	r3, r6
     926:	fb0c 0202 	mla	r2, ip, r2, r0
     92a:	3a30      	subs	r2, #48	; 0x30
     92c:	461e      	mov	r6, r3
     92e:	f816 0b01 	ldrb.w	r0, [r6], #1
     932:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     936:	2f09      	cmp	r7, #9
     938:	d9f4      	bls.n	924 <CONFIG_ISR_STACK_SIZE+0x124>
	if (sp != wp) {
     93a:	4299      	cmp	r1, r3
     93c:	d093      	beq.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
		conv->unsupported |= ((conv->width_value < 0)
     93e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     942:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     944:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     946:	f362 0141 	bfi	r1, r2, #1, #1
     94a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     94e:	e78a      	b.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
     950:	460b      	mov	r3, r1
	size_t val = 0;
     952:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     954:	f04f 0c0a 	mov.w	ip, #10
     958:	e7e8      	b.n	92c <CONFIG_ISR_STACK_SIZE+0x12c>
		conv->prec_star = true;
     95a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     95e:	3302      	adds	r3, #2
		conv->prec_star = true;
     960:	f042 0204 	orr.w	r2, r2, #4
     964:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
     968:	461f      	mov	r7, r3
     96a:	f817 2b01 	ldrb.w	r2, [r7], #1
     96e:	2a6c      	cmp	r2, #108	; 0x6c
     970:	d041      	beq.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
     972:	d825      	bhi.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
     974:	2a68      	cmp	r2, #104	; 0x68
     976:	d02b      	beq.n	9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>
     978:	2a6a      	cmp	r2, #106	; 0x6a
     97a:	d046      	beq.n	a0a <CONFIG_ISR_STACK_SIZE+0x20a>
     97c:	2a4c      	cmp	r2, #76	; 0x4c
     97e:	d04c      	beq.n	a1a <CONFIG_ISR_STACK_SIZE+0x21a>
     980:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     982:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     986:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
     98a:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     98c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     990:	f200 80d9 	bhi.w	b46 <CONFIG_ISR_STACK_SIZE+0x346>
     994:	2a57      	cmp	r2, #87	; 0x57
     996:	d84d      	bhi.n	a34 <CONFIG_ISR_STACK_SIZE+0x234>
     998:	2a41      	cmp	r2, #65	; 0x41
     99a:	d003      	beq.n	9a4 <CONFIG_ISR_STACK_SIZE+0x1a4>
     99c:	3a45      	subs	r2, #69	; 0x45
     99e:	2a02      	cmp	r2, #2
     9a0:	f200 80d1 	bhi.w	b46 <CONFIG_ISR_STACK_SIZE+0x346>
		conv->specifier_cat = SPECIFIER_FP;
     9a4:	2204      	movs	r2, #4
     9a6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     9aa:	f362 0302 	bfi	r3, r2, #0, #3
     9ae:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     9b2:	2301      	movs	r3, #1
			break;
     9b4:	e09e      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
		val = 10U * val + *sp++ - '0';
     9b6:	fb06 2101 	mla	r1, r6, r1, r2
     9ba:	4603      	mov	r3, r0
     9bc:	3930      	subs	r1, #48	; 0x30
     9be:	e764      	b.n	88a <CONFIG_ISR_STACK_SIZE+0x8a>
	switch (*sp) {
     9c0:	2a74      	cmp	r2, #116	; 0x74
     9c2:	d026      	beq.n	a12 <CONFIG_ISR_STACK_SIZE+0x212>
     9c4:	2a7a      	cmp	r2, #122	; 0x7a
     9c6:	d1db      	bne.n	980 <CONFIG_ISR_STACK_SIZE+0x180>
		conv->length_mod = LENGTH_Z;
     9c8:	2206      	movs	r2, #6
     9ca:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     9ce:	e00d      	b.n	9ec <CONFIG_ISR_STACK_SIZE+0x1ec>
		if (*++sp == 'h') {
     9d0:	785a      	ldrb	r2, [r3, #1]
     9d2:	2a68      	cmp	r2, #104	; 0x68
     9d4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     9d8:	d106      	bne.n	9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>
			conv->length_mod = LENGTH_HH;
     9da:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     9dc:	f361 02c6 	bfi	r2, r1, #3, #4
     9e0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     9e4:	1c9f      	adds	r7, r3, #2
     9e6:	e7cc      	b.n	982 <CONFIG_ISR_STACK_SIZE+0x182>
			conv->length_mod = LENGTH_H;
     9e8:	4613      	mov	r3, r2
     9ea:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     9ec:	f362 03c6 	bfi	r3, r2, #3, #4
     9f0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     9f4:	e7c5      	b.n	982 <CONFIG_ISR_STACK_SIZE+0x182>
		if (*++sp == 'l') {
     9f6:	785a      	ldrb	r2, [r3, #1]
     9f8:	2a6c      	cmp	r2, #108	; 0x6c
     9fa:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     9fe:	d101      	bne.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
			conv->length_mod = LENGTH_LL;
     a00:	2104      	movs	r1, #4
     a02:	e7eb      	b.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
			conv->length_mod = LENGTH_L;
     a04:	4613      	mov	r3, r2
     a06:	2203      	movs	r2, #3
     a08:	e7f0      	b.n	9ec <CONFIG_ISR_STACK_SIZE+0x1ec>
		conv->length_mod = LENGTH_J;
     a0a:	2205      	movs	r2, #5
     a0c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a10:	e7ec      	b.n	9ec <CONFIG_ISR_STACK_SIZE+0x1ec>
		conv->length_mod = LENGTH_T;
     a12:	2207      	movs	r2, #7
     a14:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a18:	e7e8      	b.n	9ec <CONFIG_ISR_STACK_SIZE+0x1ec>
		conv->unsupported = true;
     a1a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     a1e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     a22:	f023 0302 	bic.w	r3, r3, #2
     a26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     a2a:	f043 0302 	orr.w	r3, r3, #2
     a2e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     a32:	e7a6      	b.n	982 <CONFIG_ISR_STACK_SIZE+0x182>
     a34:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     a38:	2920      	cmp	r1, #32
     a3a:	f200 8084 	bhi.w	b46 <CONFIG_ISR_STACK_SIZE+0x346>
     a3e:	a001      	add	r0, pc, #4	; (adr r0, a44 <CONFIG_ISR_STACK_SIZE+0x244>)
     a40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     a44:	00000b09 	.word	0x00000b09
     a48:	00000b47 	.word	0x00000b47
     a4c:	00000b47 	.word	0x00000b47
     a50:	00000b47 	.word	0x00000b47
     a54:	00000b47 	.word	0x00000b47
     a58:	00000b47 	.word	0x00000b47
     a5c:	00000b47 	.word	0x00000b47
     a60:	00000b47 	.word	0x00000b47
     a64:	00000b47 	.word	0x00000b47
     a68:	000009a5 	.word	0x000009a5
     a6c:	00000b47 	.word	0x00000b47
     a70:	00000b09 	.word	0x00000b09
     a74:	00000ac9 	.word	0x00000ac9
     a78:	000009a5 	.word	0x000009a5
     a7c:	000009a5 	.word	0x000009a5
     a80:	000009a5 	.word	0x000009a5
     a84:	00000b47 	.word	0x00000b47
     a88:	00000ac9 	.word	0x00000ac9
     a8c:	00000b47 	.word	0x00000b47
     a90:	00000b47 	.word	0x00000b47
     a94:	00000b47 	.word	0x00000b47
     a98:	00000b47 	.word	0x00000b47
     a9c:	00000b11 	.word	0x00000b11
     aa0:	00000b09 	.word	0x00000b09
     aa4:	00000b2d 	.word	0x00000b2d
     aa8:	00000b47 	.word	0x00000b47
     aac:	00000b47 	.word	0x00000b47
     ab0:	00000b2d 	.word	0x00000b2d
     ab4:	00000b47 	.word	0x00000b47
     ab8:	00000b09 	.word	0x00000b09
     abc:	00000b47 	.word	0x00000b47
     ac0:	00000b47 	.word	0x00000b47
     ac4:	00000b09 	.word	0x00000b09
		conv->specifier_cat = SPECIFIER_SINT;
     ac8:	2001      	movs	r0, #1
     aca:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     ace:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     ad2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     ad6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     ad8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     adc:	bf02      	ittt	eq
     ade:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     ae2:	f041 0101 	orreq.w	r1, r1, #1
     ae6:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     aea:	2a63      	cmp	r2, #99	; 0x63
     aec:	d131      	bne.n	b52 <CONFIG_ISR_STACK_SIZE+0x352>
			unsupported = (conv->length_mod != LENGTH_NONE);
     aee:	3b00      	subs	r3, #0
     af0:	bf18      	it	ne
     af2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     af4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     af8:	f3c2 0140 	ubfx	r1, r2, #1, #1
     afc:	430b      	orrs	r3, r1
     afe:	f363 0241 	bfi	r2, r3, #1, #1
     b02:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     b06:	e6d8      	b.n	8ba <CONFIG_ISR_STACK_SIZE+0xba>
		conv->specifier_cat = SPECIFIER_UINT;
     b08:	2002      	movs	r0, #2
     b0a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     b0e:	e7de      	b.n	ace <CONFIG_ISR_STACK_SIZE+0x2ce>
		conv->specifier_cat = SPECIFIER_PTR;
     b10:	2103      	movs	r1, #3
     b12:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     b16:	f003 0378 	and.w	r3, r3, #120	; 0x78
     b1a:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     b1e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     b22:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     b24:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     b28:	4143      	adcs	r3, r0
     b2a:	e7e3      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
		conv->specifier_cat = SPECIFIER_PTR;
     b2c:	2103      	movs	r1, #3
     b2e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     b32:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     b36:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     b3a:	bf14      	ite	ne
     b3c:	2301      	movne	r3, #1
     b3e:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
     b40:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     b44:	e7d6      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
		conv->invalid = true;
     b46:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     b4a:	f043 0301 	orr.w	r3, r3, #1
     b4e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     b52:	2300      	movs	r3, #0
     b54:	e7ce      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
		} else if (conv->width_present) {
     b56:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     b5a:	2a00      	cmp	r2, #0
		int width = -1;
     b5c:	bfac      	ite	ge
     b5e:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
     b62:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
     b66:	e6ba      	b.n	8de <CONFIG_ISR_STACK_SIZE+0xde>
		} else if (conv->prec_present) {
     b68:	079b      	lsls	r3, r3, #30
     b6a:	f57f aec7 	bpl.w	8fc <CONFIG_ISR_STACK_SIZE+0xfc>
			precision = conv->prec_value;
     b6e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
     b72:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     b74:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     b78:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
     b7c:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
     b80:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     b84:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     b86:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     b8a:	d138      	bne.n	bfe <CONFIG_ISR_STACK_SIZE+0x3fe>
			switch (length_mod) {
     b8c:	1ecb      	subs	r3, r1, #3
     b8e:	2b04      	cmp	r3, #4
     b90:	d822      	bhi.n	bd8 <CONFIG_ISR_STACK_SIZE+0x3d8>
     b92:	e8df f003 	tbb	[pc, r3]
     b96:	0903      	.short	0x0903
     b98:	2109      	.short	0x2109
     b9a:	21          	.byte	0x21
     b9b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     b9c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     ba0:	17da      	asrs	r2, r3, #31
     ba2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     ba6:	e006      	b.n	bb6 <CONFIG_ISR_STACK_SIZE+0x3b6>
					(sint_value_type)va_arg(ap, intmax_t);
     ba8:	3407      	adds	r4, #7
     baa:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     bae:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     bb2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     bb6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     bba:	f013 0603 	ands.w	r6, r3, #3
     bbe:	d056      	beq.n	c6e <CONFIG_ISR_STACK_SIZE+0x46e>
			OUTS(sp, fp);
     bc0:	463b      	mov	r3, r7
     bc2:	4652      	mov	r2, sl
     bc4:	4659      	mov	r1, fp
     bc6:	9802      	ldr	r0, [sp, #8]
     bc8:	f003 fd59 	bl	467e <outs>
     bcc:	2800      	cmp	r0, #0
     bce:	f2c0 8142 	blt.w	e56 <CONFIG_ISR_STACK_SIZE+0x656>
     bd2:	4405      	add	r5, r0
			continue;
     bd4:	46ba      	mov	sl, r7
     bd6:	e5d9      	b.n	78c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     bd8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     bdc:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     bde:	ea4f 72e3 	mov.w	r2, r3, asr #31
     be2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     be6:	d105      	bne.n	bf4 <CONFIG_ISR_STACK_SIZE+0x3f4>
				value->uint = (unsigned char)value->uint;
     be8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     bec:	930a      	str	r3, [sp, #40]	; 0x28
     bee:	2300      	movs	r3, #0
     bf0:	930b      	str	r3, [sp, #44]	; 0x2c
     bf2:	e7e0      	b.n	bb6 <CONFIG_ISR_STACK_SIZE+0x3b6>
			} else if (length_mod == LENGTH_H) {
     bf4:	2902      	cmp	r1, #2
     bf6:	d1de      	bne.n	bb6 <CONFIG_ISR_STACK_SIZE+0x3b6>
				value->sint = (short)value->sint;
     bf8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     bfc:	e7d0      	b.n	ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>
		} else if (specifier_cat == SPECIFIER_UINT) {
     bfe:	2b02      	cmp	r3, #2
     c00:	d123      	bne.n	c4a <CONFIG_ISR_STACK_SIZE+0x44a>
			switch (length_mod) {
     c02:	1ecb      	subs	r3, r1, #3
     c04:	2b04      	cmp	r3, #4
     c06:	d813      	bhi.n	c30 <CONFIG_ISR_STACK_SIZE+0x430>
     c08:	e8df f003 	tbb	[pc, r3]
     c0c:	120a0a03 	.word	0x120a0a03
     c10:	12          	.byte	0x12
     c11:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
     c12:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
     c14:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
     c16:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     c18:	920a      	str	r2, [sp, #40]	; 0x28
     c1a:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     c1c:	4604      	mov	r4, r0
     c1e:	e7ca      	b.n	bb6 <CONFIG_ISR_STACK_SIZE+0x3b6>
					(uint_value_type)va_arg(ap,
     c20:	1de0      	adds	r0, r4, #7
     c22:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     c26:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     c2a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     c2e:	e7f5      	b.n	c1c <CONFIG_ISR_STACK_SIZE+0x41c>
					(uint_value_type)va_arg(ap, size_t);
     c30:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     c34:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     c36:	930a      	str	r3, [sp, #40]	; 0x28
     c38:	f04f 0300 	mov.w	r3, #0
     c3c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     c3e:	d0d3      	beq.n	be8 <CONFIG_ISR_STACK_SIZE+0x3e8>
			} else if (length_mod == LENGTH_H) {
     c40:	2902      	cmp	r1, #2
     c42:	d1b8      	bne.n	bb6 <CONFIG_ISR_STACK_SIZE+0x3b6>
				value->uint = (unsigned short)value->uint;
     c44:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     c48:	e7d0      	b.n	bec <CONFIG_ISR_STACK_SIZE+0x3ec>
		} else if (specifier_cat == SPECIFIER_FP) {
     c4a:	2b04      	cmp	r3, #4
     c4c:	d109      	bne.n	c62 <CONFIG_ISR_STACK_SIZE+0x462>
					(sint_value_type)va_arg(ap, long long);
     c4e:	1de3      	adds	r3, r4, #7
     c50:	f023 0307 	bic.w	r3, r3, #7
     c54:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     c58:	e9d3 2300 	ldrd	r2, r3, [r3]
     c5c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     c60:	e7a9      	b.n	bb6 <CONFIG_ISR_STACK_SIZE+0x3b6>
		} else if (specifier_cat == SPECIFIER_PTR) {
     c62:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     c64:	bf04      	itt	eq
     c66:	f854 3b04 	ldreq.w	r3, [r4], #4
     c6a:	930a      	streq	r3, [sp, #40]	; 0x28
     c6c:	e7a3      	b.n	bb6 <CONFIG_ISR_STACK_SIZE+0x3b6>
		switch (conv->specifier) {
     c6e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     c72:	2878      	cmp	r0, #120	; 0x78
     c74:	d8ae      	bhi.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
     c76:	2862      	cmp	r0, #98	; 0x62
     c78:	d822      	bhi.n	cc0 <CONFIG_ISR_STACK_SIZE+0x4c0>
     c7a:	2825      	cmp	r0, #37	; 0x25
     c7c:	f43f ad8f 	beq.w	79e <cbvprintf+0x22>
     c80:	2858      	cmp	r0, #88	; 0x58
     c82:	d1a7      	bne.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
			bps = encode_uint(value->uint, conv, buf, bpe);
     c84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     c88:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     c8c:	9300      	str	r3, [sp, #0]
     c8e:	aa0c      	add	r2, sp, #48	; 0x30
     c90:	ab04      	add	r3, sp, #16
     c92:	f003 fcae 	bl	45f2 <encode_uint>
     c96:	4682      	mov	sl, r0
			if (precision >= 0) {
     c98:	f1b8 0f00 	cmp.w	r8, #0
     c9c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     ca0:	db0c      	blt.n	cbc <CONFIG_ISR_STACK_SIZE+0x4bc>
				conv->flag_zero = false;
     ca2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     ca6:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     caa:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     cae:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     cb0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     cb4:	d902      	bls.n	cbc <CONFIG_ISR_STACK_SIZE+0x4bc>
					conv->pad0_value = precision - (int)len;
     cb6:	eba8 0303 	sub.w	r3, r8, r3
     cba:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     cbc:	4680      	mov	r8, r0
     cbe:	e03d      	b.n	d3c <CONFIG_ISR_STACK_SIZE+0x53c>
     cc0:	3863      	subs	r0, #99	; 0x63
     cc2:	2815      	cmp	r0, #21
     cc4:	d886      	bhi.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
     cc6:	a201      	add	r2, pc, #4	; (adr r2, ccc <CONFIG_ISR_STACK_SIZE+0x4cc>)
     cc8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     ccc:	00000d4d 	.word	0x00000d4d
     cd0:	00000db1 	.word	0x00000db1
     cd4:	00000bd5 	.word	0x00000bd5
     cd8:	00000bd5 	.word	0x00000bd5
     cdc:	00000bd5 	.word	0x00000bd5
     ce0:	00000bd5 	.word	0x00000bd5
     ce4:	00000db1 	.word	0x00000db1
     ce8:	00000bd5 	.word	0x00000bd5
     cec:	00000bd5 	.word	0x00000bd5
     cf0:	00000bd5 	.word	0x00000bd5
     cf4:	00000bd5 	.word	0x00000bd5
     cf8:	00000e0b 	.word	0x00000e0b
     cfc:	00000dd9 	.word	0x00000dd9
     d00:	00000ddd 	.word	0x00000ddd
     d04:	00000bd5 	.word	0x00000bd5
     d08:	00000bd5 	.word	0x00000bd5
     d0c:	00000d25 	.word	0x00000d25
     d10:	00000bd5 	.word	0x00000bd5
     d14:	00000dd9 	.word	0x00000dd9
     d18:	00000bd5 	.word	0x00000bd5
     d1c:	00000bd5 	.word	0x00000bd5
     d20:	00000dd9 	.word	0x00000dd9
			if (precision >= 0) {
     d24:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     d28:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     d2c:	db0a      	blt.n	d44 <CONFIG_ISR_STACK_SIZE+0x544>
				len = strnlen(bps, precision);
     d2e:	4641      	mov	r1, r8
     d30:	4650      	mov	r0, sl
     d32:	f003 fdba 	bl	48aa <strnlen>
		char sign = 0;
     d36:	2600      	movs	r6, #0
			bpe = bps + len;
     d38:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
     d3c:	f1ba 0f00 	cmp.w	sl, #0
     d40:	d10c      	bne.n	d5c <CONFIG_ISR_STACK_SIZE+0x55c>
     d42:	e747      	b.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
				len = strlen(bps);
     d44:	4650      	mov	r0, sl
     d46:	f003 fda9 	bl	489c <strlen>
     d4a:	e7f4      	b.n	d36 <CONFIG_ISR_STACK_SIZE+0x536>
			break;
     d4c:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
     d50:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     d54:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
     d58:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
     d5c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     d60:	b106      	cbz	r6, d64 <CONFIG_ISR_STACK_SIZE+0x564>
			nj_len += 1U;
     d62:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     d64:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     d68:	06d0      	lsls	r0, r2, #27
     d6a:	d568      	bpl.n	e3e <CONFIG_ISR_STACK_SIZE+0x63e>
			nj_len += 2U;
     d6c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     d6e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     d70:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     d72:	bf48      	it	mi
     d74:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     d76:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     d78:	bf48      	it	mi
     d7a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     d7c:	f1b9 0f00 	cmp.w	r9, #0
     d80:	dd76      	ble.n	e70 <CONFIG_ISR_STACK_SIZE+0x670>
			if (!conv->flag_dash) {
     d82:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     d86:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     d8a:	f3c2 0380 	ubfx	r3, r2, #2, #1
     d8e:	9303      	str	r3, [sp, #12]
     d90:	0753      	lsls	r3, r2, #29
     d92:	d46d      	bmi.n	e70 <CONFIG_ISR_STACK_SIZE+0x670>
				if (conv->flag_zero) {
     d94:	0650      	lsls	r0, r2, #25
     d96:	d561      	bpl.n	e5c <CONFIG_ISR_STACK_SIZE+0x65c>
					if (sign != 0) {
     d98:	b146      	cbz	r6, dac <CONFIG_ISR_STACK_SIZE+0x5ac>
						OUTC(sign);
     d9a:	4659      	mov	r1, fp
     d9c:	4630      	mov	r0, r6
     d9e:	9b02      	ldr	r3, [sp, #8]
     da0:	4798      	blx	r3
     da2:	2800      	cmp	r0, #0
     da4:	db57      	blt.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
						sign = 0;
     da6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     da8:	3501      	adds	r5, #1
						sign = 0;
     daa:	461e      	mov	r6, r3
					pad = '0';
     dac:	2330      	movs	r3, #48	; 0x30
     dae:	e056      	b.n	e5e <CONFIG_ISR_STACK_SIZE+0x65e>
			if (conv->flag_plus) {
     db0:	071e      	lsls	r6, r3, #28
     db2:	d40f      	bmi.n	dd4 <CONFIG_ISR_STACK_SIZE+0x5d4>
				sign = ' ';
     db4:	f013 0610 	ands.w	r6, r3, #16
     db8:	bf18      	it	ne
     dba:	2620      	movne	r6, #32
			if (value->sint < 0) {
     dbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     dc0:	2b00      	cmp	r3, #0
     dc2:	f6bf af5f 	bge.w	c84 <CONFIG_ISR_STACK_SIZE+0x484>
				value->uint = (uint_value_type)-value->sint;
     dc6:	4252      	negs	r2, r2
     dc8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
     dcc:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
     dce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     dd2:	e757      	b.n	c84 <CONFIG_ISR_STACK_SIZE+0x484>
				sign = '+';
     dd4:	262b      	movs	r6, #43	; 0x2b
     dd6:	e7f1      	b.n	dbc <CONFIG_ISR_STACK_SIZE+0x5bc>
		switch (conv->specifier) {
     dd8:	2600      	movs	r6, #0
     dda:	e753      	b.n	c84 <CONFIG_ISR_STACK_SIZE+0x484>
			if (value->ptr != NULL) {
     ddc:	980a      	ldr	r0, [sp, #40]	; 0x28
     dde:	b340      	cbz	r0, e32 <CONFIG_ISR_STACK_SIZE+0x632>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     de0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     de4:	9300      	str	r3, [sp, #0]
     de6:	2100      	movs	r1, #0
     de8:	ab04      	add	r3, sp, #16
     dea:	aa0c      	add	r2, sp, #48	; 0x30
     dec:	f003 fc01 	bl	45f2 <encode_uint>
				conv->altform_0c = true;
     df0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
     df4:	4682      	mov	sl, r0
				conv->altform_0c = true;
     df6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     dfa:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     dfe:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
     e02:	2600      	movs	r6, #0
				conv->altform_0c = true;
     e04:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
     e08:	e746      	b.n	c98 <CONFIG_ISR_STACK_SIZE+0x498>
				store_count(conv, value->ptr, count);
     e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     e0c:	2907      	cmp	r1, #7
     e0e:	f63f aee1 	bhi.w	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
     e12:	e8df f001 	tbb	[pc, r1]
     e16:	040c      	.short	0x040c
     e18:	08080c06 	.word	0x08080c06
     e1c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     e1e:	701d      	strb	r5, [r3, #0]
		break;
     e20:	e6d8      	b.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
		*(short *)dp = (short)count;
     e22:	801d      	strh	r5, [r3, #0]
		break;
     e24:	e6d6      	b.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
		*(intmax_t *)dp = (intmax_t)count;
     e26:	17ea      	asrs	r2, r5, #31
     e28:	e9c3 5200 	strd	r5, r2, [r3]
		break;
     e2c:	e6d2      	b.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     e2e:	601d      	str	r5, [r3, #0]
		break;
     e30:	e6d0      	b.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
			bps = "(nil)";
     e32:	f8df a0c8 	ldr.w	sl, [pc, #200]	; efc <CONFIG_ISR_STACK_SIZE+0x6fc>
     e36:	4606      	mov	r6, r0
			bpe = bps + 5;
     e38:	f10a 0805 	add.w	r8, sl, #5
     e3c:	e78e      	b.n	d5c <CONFIG_ISR_STACK_SIZE+0x55c>
		} else if (conv->altform_0) {
     e3e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     e40:	bf48      	it	mi
     e42:	3301      	addmi	r3, #1
     e44:	e793      	b.n	d6e <CONFIG_ISR_STACK_SIZE+0x56e>
					OUTC(pad);
     e46:	4618      	mov	r0, r3
     e48:	9303      	str	r3, [sp, #12]
     e4a:	4659      	mov	r1, fp
     e4c:	9b02      	ldr	r3, [sp, #8]
     e4e:	4798      	blx	r3
     e50:	2800      	cmp	r0, #0
     e52:	9b03      	ldr	r3, [sp, #12]
     e54:	da04      	bge.n	e60 <CONFIG_ISR_STACK_SIZE+0x660>
#undef OUTS
#undef OUTC
}
     e56:	b011      	add	sp, #68	; 0x44
     e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     e5c:	2320      	movs	r3, #32
     e5e:	444d      	add	r5, r9
     e60:	464a      	mov	r2, r9
				while (width-- > 0) {
     e62:	2a00      	cmp	r2, #0
     e64:	eba5 0109 	sub.w	r1, r5, r9
     e68:	f109 39ff 	add.w	r9, r9, #4294967295
     e6c:	dceb      	bgt.n	e46 <CONFIG_ISR_STACK_SIZE+0x646>
     e6e:	460d      	mov	r5, r1
		if (sign != 0) {
     e70:	b136      	cbz	r6, e80 <CONFIG_ISR_STACK_SIZE+0x680>
			OUTC(sign);
     e72:	4659      	mov	r1, fp
     e74:	4630      	mov	r0, r6
     e76:	9b02      	ldr	r3, [sp, #8]
     e78:	4798      	blx	r3
     e7a:	2800      	cmp	r0, #0
     e7c:	dbeb      	blt.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
     e7e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     e80:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     e84:	06d9      	lsls	r1, r3, #27
     e86:	d401      	bmi.n	e8c <CONFIG_ISR_STACK_SIZE+0x68c>
     e88:	071a      	lsls	r2, r3, #28
     e8a:	d506      	bpl.n	e9a <CONFIG_ISR_STACK_SIZE+0x69a>
				OUTC('0');
     e8c:	4659      	mov	r1, fp
     e8e:	2030      	movs	r0, #48	; 0x30
     e90:	9b02      	ldr	r3, [sp, #8]
     e92:	4798      	blx	r3
     e94:	2800      	cmp	r0, #0
     e96:	dbde      	blt.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
     e98:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     e9a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     e9e:	06db      	lsls	r3, r3, #27
     ea0:	d507      	bpl.n	eb2 <CONFIG_ISR_STACK_SIZE+0x6b2>
				OUTC(conv->specifier);
     ea2:	4659      	mov	r1, fp
     ea4:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     ea8:	9b02      	ldr	r3, [sp, #8]
     eaa:	4798      	blx	r3
     eac:	2800      	cmp	r0, #0
     eae:	dbd2      	blt.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
     eb0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     eb2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     eb4:	442e      	add	r6, r5
     eb6:	1b73      	subs	r3, r6, r5
     eb8:	2b00      	cmp	r3, #0
     eba:	dc16      	bgt.n	eea <CONFIG_ISR_STACK_SIZE+0x6ea>
			OUTS(bps, bpe);
     ebc:	4643      	mov	r3, r8
     ebe:	4652      	mov	r2, sl
     ec0:	4659      	mov	r1, fp
     ec2:	9802      	ldr	r0, [sp, #8]
     ec4:	f003 fbdb 	bl	467e <outs>
     ec8:	2800      	cmp	r0, #0
     eca:	dbc4      	blt.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
     ecc:	4405      	add	r5, r0
		while (width > 0) {
     ece:	44a9      	add	r9, r5
     ed0:	eba9 0305 	sub.w	r3, r9, r5
     ed4:	2b00      	cmp	r3, #0
     ed6:	f77f ae7d 	ble.w	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
			OUTC(' ');
     eda:	4659      	mov	r1, fp
     edc:	2020      	movs	r0, #32
     ede:	9b02      	ldr	r3, [sp, #8]
     ee0:	4798      	blx	r3
     ee2:	2800      	cmp	r0, #0
     ee4:	dbb7      	blt.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
     ee6:	3501      	adds	r5, #1
			--width;
     ee8:	e7f2      	b.n	ed0 <CONFIG_ISR_STACK_SIZE+0x6d0>
				OUTC('0');
     eea:	4659      	mov	r1, fp
     eec:	2030      	movs	r0, #48	; 0x30
     eee:	9b02      	ldr	r3, [sp, #8]
     ef0:	4798      	blx	r3
     ef2:	2800      	cmp	r0, #0
     ef4:	dbaf      	blt.n	e56 <CONFIG_ISR_STACK_SIZE+0x656>
     ef6:	3501      	adds	r5, #1
     ef8:	e7dd      	b.n	eb6 <CONFIG_ISR_STACK_SIZE+0x6b6>
     efa:	bf00      	nop
     efc:	00005428 	.word	0x00005428

00000f00 <check_erratum19>:
#if defined(CONFIG_SOC_NRF5340_CPUAPP) && \
	!defined(CONFIG_TRUSTED_EXECUTION_NONSECURE) && \
	!defined(CONFIG_NRF5340_CPUAPP_ERRATUM19)

static int check_erratum19(const struct device *arg)
{
     f00:	b508      	push	{r3, lr}
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
     f02:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
     f06:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
     f0a:	2a07      	cmp	r2, #7
     f0c:	d119      	bne.n	f42 <check_erratum19+0x42>
                {
                    switch(var2)
     f0e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
     f12:	3b02      	subs	r3, #2
     f14:	2b03      	cmp	r3, #3
     f16:	d814      	bhi.n	f42 <check_erratum19+0x42>
	ARG_UNUSED(arg);
	if (nrf53_errata_19()) {
     f18:	4a0b      	ldr	r2, [pc, #44]	; (f48 <check_erratum19+0x48>)
     f1a:	5cd3      	ldrb	r3, [r2, r3]
     f1c:	b18b      	cbz	r3, f42 <check_erratum19+0x42>
		LOG_ERR("This device is affected by nRF53 Erratum 19,");
     f1e:	2145      	movs	r1, #69	; 0x45
     f20:	480a      	ldr	r0, [pc, #40]	; (f4c <check_erratum19+0x4c>)
     f22:	f003 f9ca 	bl	42ba <printk>
		LOG_ERR("but workarounds have not been enabled.");
     f26:	2145      	movs	r1, #69	; 0x45
     f28:	4809      	ldr	r0, [pc, #36]	; (f50 <check_erratum19+0x50>)
     f2a:	f003 f9c6 	bl	42ba <printk>
		LOG_ERR("See CONFIG_NRF5340_CPUAPP_ERRATUM19.");
     f2e:	2145      	movs	r1, #69	; 0x45
     f30:	4808      	ldr	r0, [pc, #32]	; (f54 <check_erratum19+0x54>)
     f32:	f003 f9c2 	bl	42ba <printk>
		k_panic();
     f36:	4040      	eors	r0, r0
     f38:	f380 8811 	msr	BASEPRI, r0
     f3c:	f04f 0004 	mov.w	r0, #4
     f40:	df02      	svc	2
	}

	return 0;
}
     f42:	2000      	movs	r0, #0
     f44:	bd08      	pop	{r3, pc}
     f46:	bf00      	nop
     f48:	000054ba 	.word	0x000054ba
     f4c:	0000542e 	.word	0x0000542e
     f50:	00005460 	.word	0x00005460
     f54:	0000548c 	.word	0x0000548c

00000f58 <nrf_gpio_pin_mcu_select.constprop.0>:

#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
NRF_STATIC_INLINE void nrf_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_mcusel_t mcu)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     f58:	4b05      	ldr	r3, [pc, #20]	; (f70 <nrf_gpio_pin_mcu_select.constprop.0+0x18>)
     f5a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     f5e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
     f62:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
     f66:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     f6a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
     f6e:	4770      	bx	lr
     f70:	50842500 	.word	0x50842500

00000f74 <nordicsemi_nrf53_init>:
{
     f74:	b510      	push	{r4, lr}
     f76:	f04f 0320 	mov.w	r3, #32
     f7a:	f3ef 8411 	mrs	r4, BASEPRI
     f7e:	f383 8811 	msr	BASEPRI, r3
     f82:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     f86:	2201      	movs	r2, #1
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     f88:	490b      	ldr	r1, [pc, #44]	; (fb8 <nordicsemi_nrf53_init+0x44>)
     f8a:	4b0c      	ldr	r3, [pc, #48]	; (fbc <nordicsemi_nrf53_init+0x48>)
	nrf_gpio_pin_mcu_select(PIN_XL1, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
     f8c:	2000      	movs	r0, #0
     f8e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     f92:	f8c1 26d0 	str.w	r2, [r1, #1744]	; 0x6d0
     f96:	f7ff ffdf 	bl	f58 <nrf_gpio_pin_mcu_select.constprop.0>
	nrf_gpio_pin_mcu_select(PIN_XL2, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
     f9a:	4610      	mov	r0, r2
     f9c:	f7ff ffdc 	bl	f58 <nrf_gpio_pin_mcu_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
     fa0:	f8c1 2704 	str.w	r2, [r1, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
     fa4:	f8c1 2904 	str.w	r2, [r1, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
     fa8:	f8c1 2b00 	str.w	r2, [r1, #2816]	; 0xb00
	__asm__ volatile(
     fac:	f384 8811 	msr	BASEPRI, r4
     fb0:	f3bf 8f6f 	isb	sy
}
     fb4:	2000      	movs	r0, #0
     fb6:	bd10      	pop	{r4, pc}
     fb8:	50004000 	.word	0x50004000
     fbc:	50001000 	.word	0x50001000

00000fc0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     fc0:	b148      	cbz	r0, fd6 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     fc2:	4b05      	ldr	r3, [pc, #20]	; (fd8 <arch_busy_wait+0x18>)
     fc4:	681a      	ldr	r2, [r3, #0]
     fc6:	4b05      	ldr	r3, [pc, #20]	; (fdc <arch_busy_wait+0x1c>)
     fc8:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     fcc:	4b04      	ldr	r3, [pc, #16]	; (fe0 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
     fce:	4350      	muls	r0, r2
     fd0:	f043 0301 	orr.w	r3, r3, #1
     fd4:	4718      	bx	r3
}
     fd6:	4770      	bx	lr
     fd8:	2000003c 	.word	0x2000003c
     fdc:	000f4240 	.word	0x000f4240
     fe0:	00005120 	.word	0x00005120

00000fe4 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
     fe4:	4604      	mov	r4, r0
     fe6:	b508      	push	{r3, lr}
	__asm__ volatile(
     fe8:	f04f 0220 	mov.w	r2, #32
     fec:	f3ef 8311 	mrs	r3, BASEPRI
     ff0:	f382 8811 	msr	BASEPRI, r2
     ff4:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
     ff8:	f003 fbfa 	bl	47f0 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
     ffc:	4620      	mov	r0, r4
     ffe:	f001 f92f 	bl	2260 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1002:	4803      	ldr	r0, [pc, #12]	; (1010 <CONFIG_MAIN_STACK_SIZE+0x10>)
    1004:	f003 f959 	bl	42ba <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1008:	f000 fe18 	bl	1c3c <arch_cpu_idle>
    100c:	e7fc      	b.n	1008 <CONFIG_MAIN_STACK_SIZE+0x8>
    100e:	bf00      	nop
    1010:	000054c4 	.word	0x000054c4

00001014 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1014:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1016:	4807      	ldr	r0, [pc, #28]	; (1034 <uart_console_init+0x20>)
    1018:	f001 ff74 	bl	2f04 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    101c:	4c06      	ldr	r4, [pc, #24]	; (1038 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    101e:	4b07      	ldr	r3, [pc, #28]	; (103c <uart_console_init+0x28>)
    1020:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    1022:	4620      	mov	r0, r4
    1024:	f001 fbce 	bl	27c4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1028:	4620      	mov	r0, r4
    102a:	f7ff fab3 	bl	594 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    102e:	2000      	movs	r0, #0
    1030:	bd10      	pop	{r4, pc}
    1032:	bf00      	nop
    1034:	000054ed 	.word	0x000054ed
    1038:	00001041 	.word	0x00001041
    103c:	20000248 	.word	0x20000248

00001040 <console_out>:
	if ('\n' == c) {
    1040:	280a      	cmp	r0, #10
{
    1042:	b538      	push	{r3, r4, r5, lr}
    1044:	4604      	mov	r4, r0
    1046:	4d07      	ldr	r5, [pc, #28]	; (1064 <console_out+0x24>)
	if ('\n' == c) {
    1048:	d104      	bne.n	1054 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    104a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    104c:	6883      	ldr	r3, [r0, #8]
    104e:	210d      	movs	r1, #13
    1050:	685b      	ldr	r3, [r3, #4]
    1052:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    1054:	6828      	ldr	r0, [r5, #0]
    1056:	6883      	ldr	r3, [r0, #8]
    1058:	b2e1      	uxtb	r1, r4
    105a:	685b      	ldr	r3, [r3, #4]
    105c:	4798      	blx	r3
}
    105e:	4620      	mov	r0, r4
    1060:	bd38      	pop	{r3, r4, r5, pc}
    1062:	bf00      	nop
    1064:	20000248 	.word	0x20000248

00001068 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1068:	4b08      	ldr	r3, [pc, #32]	; (108c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    106a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    106c:	1ac3      	subs	r3, r0, r3
{
    106e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1070:	4907      	ldr	r1, [pc, #28]	; (1090 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1072:	109b      	asrs	r3, r3, #2
{
    1074:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1076:	4359      	muls	r1, r3
    1078:	2240      	movs	r2, #64	; 0x40
    107a:	4806      	ldr	r0, [pc, #24]	; (1094 <onoff_stop+0x2c>)
    107c:	f003 fb34 	bl	46e8 <stop>
	notify(mgr, res);
    1080:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1082:	4601      	mov	r1, r0
	notify(mgr, res);
    1084:	4620      	mov	r0, r4
}
    1086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    108a:	4718      	bx	r3
    108c:	2000025c 	.word	0x2000025c
    1090:	b6db6db7 	.word	0xb6db6db7
    1094:	200000a8 	.word	0x200000a8

00001098 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1098:	2340      	movs	r3, #64	; 0x40
{
    109a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    109c:	4c0b      	ldr	r4, [pc, #44]	; (10cc <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    109e:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    10a0:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    10a2:	460b      	mov	r3, r1
{
    10a4:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    10a6:	490a      	ldr	r1, [pc, #40]	; (10d0 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    10a8:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    10aa:	4361      	muls	r1, r4
{
    10ac:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    10ae:	4a09      	ldr	r2, [pc, #36]	; (10d4 <onoff_start+0x3c>)
    10b0:	4809      	ldr	r0, [pc, #36]	; (10d8 <onoff_start+0x40>)
    10b2:	f003 fb46 	bl	4742 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    10b6:	1e01      	subs	r1, r0, #0
    10b8:	da05      	bge.n	10c6 <onoff_start+0x2e>
		notify(mgr, err);
    10ba:	4630      	mov	r0, r6
    10bc:	462b      	mov	r3, r5
	}
}
    10be:	b002      	add	sp, #8
    10c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    10c4:	4718      	bx	r3
}
    10c6:	b002      	add	sp, #8
    10c8:	bd70      	pop	{r4, r5, r6, pc}
    10ca:	bf00      	nop
    10cc:	2000025c 	.word	0x2000025c
    10d0:	b6db6db7 	.word	0xb6db6db7
    10d4:	000047b1 	.word	0x000047b1
    10d8:	200000a8 	.word	0x200000a8

000010dc <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    10dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    10e0:	2200      	movs	r2, #0
    10e2:	2101      	movs	r1, #1
{
    10e4:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    10e6:	2005      	movs	r0, #5
    10e8:	f000 fd56 	bl	1b98 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    10ec:	2005      	movs	r0, #5
    10ee:	f000 fd35 	bl	1b5c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    10f2:	4811      	ldr	r0, [pc, #68]	; (1138 <clk_init+0x5c>)
    10f4:	f001 fe44 	bl	2d80 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    10f8:	4b10      	ldr	r3, [pc, #64]	; (113c <clk_init+0x60>)
    10fa:	4298      	cmp	r0, r3
    10fc:	d119      	bne.n	1132 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    10fe:	f003 fca8 	bl	4a52 <nrfx_clock_enable>
    1102:	2400      	movs	r4, #0
	return &data->mgr[type];
    1104:	f04f 081c 	mov.w	r8, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1108:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    110a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 1140 <clk_init+0x64>
	struct nrf_clock_control_data *data = dev->data;
    110e:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1110:	4649      	mov	r1, r9
    1112:	fb08 5004 	mla	r0, r8, r4, r5
    1116:	f003 f92c 	bl	4372 <onoff_manager_init>
		if (err < 0) {
    111a:	2800      	cmp	r0, #0
    111c:	db07      	blt.n	112e <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    111e:	2301      	movs	r3, #1
    1120:	fb07 5504 	mla	r5, r7, r4, r5
	for (enum clock_control_nrf_type i = 0;
    1124:	441c      	add	r4, r3
    1126:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1128:	67ab      	str	r3, [r5, #120]	; 0x78
	for (enum clock_control_nrf_type i = 0;
    112a:	d1f0      	bne.n	110e <clk_init+0x32>
	}

	return 0;
    112c:	2000      	movs	r0, #0
}
    112e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    1132:	f06f 0004 	mvn.w	r0, #4
    1136:	e7fa      	b.n	112e <clk_init+0x52>
    1138:	00001179 	.word	0x00001179
    113c:	0bad0000 	.word	0x0bad0000
    1140:	0000516c 	.word	0x0000516c

00001144 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1144:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1146:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    1148:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    114a:	434b      	muls	r3, r1
    114c:	4808      	ldr	r0, [pc, #32]	; (1170 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    114e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1150:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    1152:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
    1154:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    1158:	4418      	add	r0, r3
	sub_data->cb = NULL;
    115a:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    115c:	f003 fab1 	bl	46c2 <set_on_state>
	if (callback) {
    1160:	b12d      	cbz	r5, 116e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1162:	4632      	mov	r2, r6
    1164:	462b      	mov	r3, r5
}
    1166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    116a:	4802      	ldr	r0, [pc, #8]	; (1174 <clkstarted_handle.constprop.0+0x30>)
    116c:	4718      	bx	r3
}
    116e:	bd70      	pop	{r4, r5, r6, pc}
    1170:	2000025c 	.word	0x2000025c
    1174:	200000a8 	.word	0x200000a8

00001178 <clock_event_handler>:
	switch (event) {
    1178:	2805      	cmp	r0, #5
    117a:	d811      	bhi.n	11a0 <clock_event_handler+0x28>
    117c:	e8df f000 	tbb	[pc, r0]
    1180:	10100e03 	.word	0x10100e03
    1184:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1186:	4b07      	ldr	r3, [pc, #28]	; (11a4 <clock_event_handler+0x2c>)
    1188:	6f98      	ldr	r0, [r3, #120]	; 0x78
    118a:	f010 0007 	ands.w	r0, r0, #7
    118e:	d107      	bne.n	11a0 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1190:	f7ff bfd8 	b.w	1144 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1194:	2002      	movs	r0, #2
    1196:	e7fb      	b.n	1190 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1198:	2003      	movs	r0, #3
    119a:	e7f9      	b.n	1190 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    119c:	2001      	movs	r0, #1
    119e:	e7f7      	b.n	1190 <clock_event_handler+0x18>
}
    11a0:	4770      	bx	lr
    11a2:	bf00      	nop
    11a4:	2000025c 	.word	0x2000025c

000011a8 <generic_hfclk_start>:
{
    11a8:	b508      	push	{r3, lr}
    11aa:	f04f 0320 	mov.w	r3, #32
    11ae:	f3ef 8111 	mrs	r1, BASEPRI
    11b2:	f383 8811 	msr	BASEPRI, r3
    11b6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    11ba:	4a12      	ldr	r2, [pc, #72]	; (1204 <generic_hfclk_start+0x5c>)
    11bc:	6813      	ldr	r3, [r2, #0]
    11be:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    11c2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    11c6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    11c8:	d00c      	beq.n	11e4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    11ca:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    11ce:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    11d2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    11d6:	f013 0301 	ands.w	r3, r3, #1
    11da:	d003      	beq.n	11e4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    11dc:	480a      	ldr	r0, [pc, #40]	; (1208 <generic_hfclk_start+0x60>)
    11de:	f003 fa70 	bl	46c2 <set_on_state>
			already_started = true;
    11e2:	2301      	movs	r3, #1
	__asm__ volatile(
    11e4:	f381 8811 	msr	BASEPRI, r1
    11e8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    11ec:	b123      	cbz	r3, 11f8 <generic_hfclk_start+0x50>
}
    11ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    11f2:	2000      	movs	r0, #0
    11f4:	f7ff bfa6 	b.w	1144 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    11f8:	2001      	movs	r0, #1
}
    11fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    11fe:	f003 bc38 	b.w	4a72 <nrfx_clock_start>
    1202:	bf00      	nop
    1204:	200002fc 	.word	0x200002fc
    1208:	200002d4 	.word	0x200002d4

0000120c <api_blocking_start>:
{
    120c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    120e:	2200      	movs	r2, #0
    1210:	2301      	movs	r3, #1
    1212:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1216:	466b      	mov	r3, sp
    1218:	4a08      	ldr	r2, [pc, #32]	; (123c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    121a:	f8cd d000 	str.w	sp, [sp]
    121e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1222:	f003 fabe 	bl	47a2 <api_start>
	if (err < 0) {
    1226:	2800      	cmp	r0, #0
    1228:	db05      	blt.n	1236 <api_blocking_start+0x2a>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    122a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    122e:	2300      	movs	r3, #0
    1230:	4668      	mov	r0, sp
    1232:	f002 fc8d 	bl	3b50 <z_impl_k_sem_take>
}
    1236:	b005      	add	sp, #20
    1238:	f85d fb04 	ldr.w	pc, [sp], #4
    123c:	000047e7 	.word	0x000047e7

00001240 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1240:	4b07      	ldr	r3, [pc, #28]	; (1260 <generic_hfclk_stop+0x20>)
    1242:	e8d3 2fef 	ldaex	r2, [r3]
    1246:	f022 0102 	bic.w	r1, r2, #2
    124a:	e8c3 1fe0 	stlex	r0, r1, [r3]
    124e:	2800      	cmp	r0, #0
    1250:	d1f7      	bne.n	1242 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1252:	07d3      	lsls	r3, r2, #31
    1254:	d402      	bmi.n	125c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1256:	2001      	movs	r0, #1
    1258:	f003 bc5a 	b.w	4b10 <nrfx_clock_stop>
}
    125c:	4770      	bx	lr
    125e:	bf00      	nop
    1260:	200002fc 	.word	0x200002fc

00001264 <z_nrf_clock_control_lf_on>:
{
    1264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1268:	2201      	movs	r2, #1
    126a:	4607      	mov	r7, r0
    126c:	4937      	ldr	r1, [pc, #220]	; (134c <z_nrf_clock_control_lf_on+0xe8>)
    126e:	e8d1 3fef 	ldaex	r3, [r1]
    1272:	e8c1 2fe0 	stlex	r0, r2, [r1]
    1276:	2800      	cmp	r0, #0
    1278:	d1f9      	bne.n	126e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    127a:	b933      	cbnz	r3, 128a <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    127c:	4934      	ldr	r1, [pc, #208]	; (1350 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    127e:	4835      	ldr	r0, [pc, #212]	; (1354 <z_nrf_clock_control_lf_on+0xf0>)
    1280:	604b      	str	r3, [r1, #4]
    1282:	60cb      	str	r3, [r1, #12]
    1284:	608a      	str	r2, [r1, #8]
    1286:	f003 f887 	bl	4398 <onoff_request>
	switch (start_mode) {
    128a:	1e7b      	subs	r3, r7, #1
    128c:	2b01      	cmp	r3, #1
    128e:	d82f      	bhi.n	12f0 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1290:	2f01      	cmp	r7, #1
    1292:	d107      	bne.n	12a4 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1294:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1298:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    129c:	f003 0303 	and.w	r3, r3, #3
    12a0:	2b02      	cmp	r3, #2
    12a2:	d025      	beq.n	12f0 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    12a4:	f003 fd6a 	bl	4d7c <k_is_in_isr>
    12a8:	4604      	mov	r4, r0
    12aa:	b918      	cbnz	r0, 12b4 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    12ac:	4b2a      	ldr	r3, [pc, #168]	; (1358 <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
    12ae:	781b      	ldrb	r3, [r3, #0]
    12b0:	2b00      	cmp	r3, #0
    12b2:	d144      	bne.n	133e <z_nrf_clock_control_lf_on+0xda>
	__asm__ volatile(
    12b4:	f04f 0320 	mov.w	r3, #32
    12b8:	f3ef 8611 	mrs	r6, BASEPRI
    12bc:	f383 8811 	msr	BASEPRI, r3
    12c0:	f3bf 8f6f 	isb	sy
    12c4:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    12c6:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12ca:	f8df 8090 	ldr.w	r8, [pc, #144]	; 135c <z_nrf_clock_control_lf_on+0xf8>
    12ce:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    12d2:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    12d6:	03d2      	lsls	r2, r2, #15
    12d8:	d50c      	bpl.n	12f4 <z_nrf_clock_control_lf_on+0x90>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    12da:	f003 0303 	and.w	r3, r3, #3
    12de:	2b02      	cmp	r3, #2
    12e0:	d001      	beq.n	12e6 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    12e2:	2f01      	cmp	r7, #1
    12e4:	d106      	bne.n	12f4 <z_nrf_clock_control_lf_on+0x90>
	if (isr_mode) {
    12e6:	b324      	cbz	r4, 1332 <z_nrf_clock_control_lf_on+0xce>
	__asm__ volatile(
    12e8:	f386 8811 	msr	BASEPRI, r6
    12ec:	f3bf 8f6f 	isb	sy
}
    12f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    12f4:	b1c4      	cbz	r4, 1328 <z_nrf_clock_control_lf_on+0xc4>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    12f6:	4630      	mov	r0, r6
    12f8:	f000 fcae 	bl	1c58 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    12fc:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1300:	b2db      	uxtb	r3, r3
    1302:	2b01      	cmp	r3, #1
    1304:	d1e3      	bne.n	12ce <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1306:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    130a:	2a00      	cmp	r2, #0
    130c:	d0df      	beq.n	12ce <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    130e:	2200      	movs	r2, #0
    1310:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1314:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1318:	2202      	movs	r2, #2
    131a:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    131e:	2220      	movs	r2, #32
    1320:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1324:	60ab      	str	r3, [r5, #8]
}
    1326:	e7d2      	b.n	12ce <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    1328:	2100      	movs	r1, #0
    132a:	2021      	movs	r0, #33	; 0x21
    132c:	f002 fbd0 	bl	3ad0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1330:	e7e4      	b.n	12fc <z_nrf_clock_control_lf_on+0x98>
    p_reg->INTENSET = mask;
    1332:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1336:	2202      	movs	r2, #2
    1338:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    133c:	e7d8      	b.n	12f0 <z_nrf_clock_control_lf_on+0x8c>
    p_reg->INTENCLR = mask;
    133e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1342:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    1344:	4606      	mov	r6, r0
    1346:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    134a:	e7bc      	b.n	12c6 <z_nrf_clock_control_lf_on+0x62>
    134c:	20000300 	.word	0x20000300
    1350:	2000024c 	.word	0x2000024c
    1354:	20000278 	.word	0x20000278
    1358:	200008ad 	.word	0x200008ad
    135c:	e000e100 	.word	0xe000e100

00001360 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    1360:	4a04      	ldr	r2, [pc, #16]	; (1374 <sys_clock_timeout_handler+0x14>)
    1362:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    1364:	1ac8      	subs	r0, r1, r3
    1366:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    136a:	4403      	add	r3, r0
    136c:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    136e:	f002 bda9 	b.w	3ec4 <z_clock_announce>
    1372:	bf00      	nop
    1374:	20000310 	.word	0x20000310

00001378 <set_absolute_alarm>:
{
    1378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    137c:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1380:	f04f 0900 	mov.w	r9, #0
    1384:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    1386:	f100 0450 	add.w	r4, r0, #80	; 0x50
    138a:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
    138e:	00a4      	lsls	r4, r4, #2
    1390:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    1394:	b2a4      	uxth	r4, r4
    1396:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    139a:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    139e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 140c <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    13a2:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    13a6:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    13aa:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    13ac:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    13b0:	eba3 030a 	sub.w	r3, r3, sl
    13b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    13b8:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    13bc:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    13be:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    13c2:	d102      	bne.n	13ca <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    13c4:	2013      	movs	r0, #19
    13c6:	f003 fcdf 	bl	4d88 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    13ca:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    13ce:	1aab      	subs	r3, r5, r2
    13d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    13d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    13d8:	bf88      	it	hi
    13da:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    13dc:	f8c4 9000 	str.w	r9, [r4]
    13e0:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    13e2:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    13e6:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    13ea:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    13ee:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    13f2:	459a      	cmp	sl, r3
    13f4:	d006      	beq.n	1404 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    13f6:	1aeb      	subs	r3, r5, r3
    13f8:	3b02      	subs	r3, #2
    13fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    13fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1402:	d801      	bhi.n	1408 <set_absolute_alarm+0x90>
}
    1404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    1408:	462b      	mov	r3, r5
    140a:	e7cf      	b.n	13ac <set_absolute_alarm+0x34>
    140c:	50015000 	.word	0x50015000

00001410 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    1410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1412:	2500      	movs	r5, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1414:	462f      	mov	r7, r5
    1416:	4c10      	ldr	r4, [pc, #64]	; (1458 <rtc_nrf_isr+0x48>)
    1418:	6826      	ldr	r6, [r4, #0]
    return p_reg->INTENSET & mask;
    141a:	4b10      	ldr	r3, [pc, #64]	; (145c <rtc_nrf_isr+0x4c>)
    141c:	b105      	cbz	r5, 1420 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    141e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1420:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    1424:	03d2      	lsls	r2, r2, #15
    1426:	d5fa      	bpl.n	141e <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1428:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    142c:	2a00      	cmp	r2, #0
    142e:	d0f6      	beq.n	141e <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1430:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    1434:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1438:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    143c:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1440:	2501      	movs	r5, #1
    return p_reg->CC[ch];
    1442:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
			if (handler) {
    1446:	b126      	cbz	r6, 1452 <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    1448:	2000      	movs	r0, #0
    144a:	6862      	ldr	r2, [r4, #4]
    144c:	6027      	str	r7, [r4, #0]
    144e:	47b0      	blx	r6
    1450:	e7e2      	b.n	1418 <rtc_nrf_isr+0x8>
    1452:	6026      	str	r6, [r4, #0]
}
    1454:	e7e3      	b.n	141e <rtc_nrf_isr+0xe>
    1456:	bf00      	nop
    1458:	20000304 	.word	0x20000304
    145c:	50015000 	.word	0x50015000

00001460 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    1460:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    1462:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    1464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1468:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    146c:	4c0c      	ldr	r4, [pc, #48]	; (14a0 <z_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    146e:	2101      	movs	r1, #1
    1470:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    1474:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    1478:	4b0a      	ldr	r3, [pc, #40]	; (14a4 <z_clock_driver_init+0x44>)
    147a:	2015      	movs	r0, #21
    147c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1480:	462a      	mov	r2, r5
    1482:	f000 fb89 	bl	1b98 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    1486:	2015      	movs	r0, #21
    1488:	f000 fb68 	bl	1b5c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    148c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    148e:	4a06      	ldr	r2, [pc, #24]	; (14a8 <z_clock_driver_init+0x48>)
    1490:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    1492:	2002      	movs	r0, #2
    1494:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    1496:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    1498:	f7ff fee4 	bl	1264 <z_nrf_clock_control_lf_on>

	return 0;
}
    149c:	4628      	mov	r0, r5
    149e:	bd38      	pop	{r3, r4, r5, pc}
    14a0:	50015000 	.word	0x50015000
    14a4:	e000e100 	.word	0xe000e100
    14a8:	2000030c 	.word	0x2000030c

000014ac <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    14ac:	4a13      	ldr	r2, [pc, #76]	; (14fc <z_clock_set_timeout+0x50>)
    14ae:	f1b0 3fff 	cmp.w	r0, #4294967295
    14b2:	bf14      	ite	ne
    14b4:	4603      	movne	r3, r0
    14b6:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    14b8:	3b01      	subs	r3, #1
    14ba:	2b00      	cmp	r3, #0
    14bc:	dd1c      	ble.n	14f8 <z_clock_set_timeout+0x4c>
    14be:	4293      	cmp	r3, r2
    14c0:	bfa8      	it	ge
    14c2:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    14c4:	4a0e      	ldr	r2, [pc, #56]	; (1500 <z_clock_set_timeout+0x54>)
    14c6:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    14ca:	4a0e      	ldr	r2, [pc, #56]	; (1504 <z_clock_set_timeout+0x58>)
    14cc:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    14ce:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    14d0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    14d4:	bf18      	it	ne
    14d6:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
    14d8:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    14dc:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    14de:	480a      	ldr	r0, [pc, #40]	; (1508 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    14e0:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    14e2:	4a0a      	ldr	r2, [pc, #40]	; (150c <z_clock_set_timeout+0x60>)
    14e4:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    14e6:	2000      	movs	r0, #0
    14e8:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    14ea:	4a04      	ldr	r2, [pc, #16]	; (14fc <z_clock_set_timeout+0x50>)
    14ec:	4293      	cmp	r3, r2
    14ee:	bf94      	ite	ls
    14f0:	18c9      	addls	r1, r1, r3
    14f2:	1889      	addhi	r1, r1, r2
    14f4:	f7ff bf40 	b.w	1378 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    14f8:	2300      	movs	r3, #0
    14fa:	e7e3      	b.n	14c4 <z_clock_set_timeout+0x18>
    14fc:	007fffff 	.word	0x007fffff
    1500:	50015000 	.word	0x50015000
    1504:	20000310 	.word	0x20000310
    1508:	00001361 	.word	0x00001361
    150c:	20000304 	.word	0x20000304

00001510 <z_clock_elapsed>:
	__asm__ volatile(
    1510:	f04f 0220 	mov.w	r2, #32
    1514:	f3ef 8311 	mrs	r3, BASEPRI
    1518:	f382 8811 	msr	BASEPRI, r2
    151c:	f3bf 8f6f 	isb	sy
    1520:	4a06      	ldr	r2, [pc, #24]	; (153c <z_clock_elapsed+0x2c>)
    1522:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1526:	4a06      	ldr	r2, [pc, #24]	; (1540 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    1528:	6812      	ldr	r2, [r2, #0]
    152a:	1a80      	subs	r0, r0, r2
    152c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    1530:	f383 8811 	msr	BASEPRI, r3
    1534:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1538:	4770      	bx	lr
    153a:	bf00      	nop
    153c:	50015000 	.word	0x50015000
    1540:	20000310 	.word	0x20000310

00001544 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
    1544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    1546:	2800      	cmp	r0, #0
{
    1548:	461d      	mov	r5, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    154a:	bf14      	ite	ne
    154c:	f44f 5300 	movne.w	r3, #8192	; 0x2000
    1550:	f44f 4380 	moveq.w	r3, #16384	; 0x4000

	__ASSERT_NO_MSG(end >= start);
	if (end <= start) {
    1554:	428a      	cmp	r2, r1
{
    1556:	4614      	mov	r4, r2
	if (end <= start) {
    1558:	d933      	bls.n	15c2 <config_regions+0x7e>
    155a:	460a      	mov	r2, r1
    155c:	4f1a      	ldr	r7, [pc, #104]	; (15c8 <config_regions+0x84>)
		return;
	}

	for (size_t i = start; i < end; i++) {
		if (ram) {
    155e:	b368      	cbz	r0, 15bc <config_regions+0x78>
			NRF_SPU->RAMREGION[i].PERM = perm;
    1560:	f502 76e0 	add.w	r6, r2, #448	; 0x1c0
		} else {
			NRF_SPU->FLASHREGION[i].PERM = perm;
    1564:	f847 5026 	str.w	r5, [r7, r6, lsl #2]
	for (size_t i = start; i < end; i++) {
    1568:	1c56      	adds	r6, r2, #1
    156a:	42b4      	cmp	r4, r6
    156c:	d124      	bne.n	15b8 <config_regions+0x74>
		}
	}

	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
    156e:	435c      	muls	r4, r3
    1570:	4816      	ldr	r0, [pc, #88]	; (15cc <config_regions+0x88>)
    1572:	434b      	muls	r3, r1
    1574:	9400      	str	r4, [sp, #0]
    1576:	f002 fea0 	bl	42ba <printk>
				region_size * start, region_size * end);
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
    157a:	4b15      	ldr	r3, [pc, #84]	; (15d0 <config_regions+0x8c>)
    157c:	f015 0f10 	tst.w	r5, #16
    1580:	4914      	ldr	r1, [pc, #80]	; (15d4 <config_regions+0x90>)
    1582:	4815      	ldr	r0, [pc, #84]	; (15d8 <config_regions+0x94>)
    1584:	bf08      	it	eq
    1586:	4619      	moveq	r1, r3
    1588:	f002 fe97 	bl	42ba <printk>
								"Non-Secure\t");
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
    158c:	2172      	movs	r1, #114	; 0x72
    158e:	4813      	ldr	r0, [pc, #76]	; (15dc <config_regions+0x98>)
    1590:	f002 fe93 	bl	42ba <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
    1594:	2177      	movs	r1, #119	; 0x77
    1596:	4811      	ldr	r0, [pc, #68]	; (15dc <config_regions+0x98>)
    1598:	f002 fe8f 	bl	42ba <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
    159c:	2178      	movs	r1, #120	; 0x78
    159e:	480f      	ldr	r0, [pc, #60]	; (15dc <config_regions+0x98>)
    15a0:	f002 fe8b 	bl	42ba <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
    15a4:	216c      	movs	r1, #108	; 0x6c
    15a6:	480d      	ldr	r0, [pc, #52]	; (15dc <config_regions+0x98>)
    15a8:	f002 fe87 	bl	42ba <printk>
	PRINT("\n");
    15ac:	480c      	ldr	r0, [pc, #48]	; (15e0 <config_regions+0x9c>)
}
    15ae:	b003      	add	sp, #12
    15b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
    15b4:	f002 be81 	b.w	42ba <printk>
    15b8:	4632      	mov	r2, r6
    15ba:	e7d0      	b.n	155e <config_regions+0x1a>
			NRF_SPU->FLASHREGION[i].PERM = perm;
    15bc:	f502 76c0 	add.w	r6, r2, #384	; 0x180
    15c0:	e7d0      	b.n	1564 <config_regions+0x20>
}
    15c2:	b003      	add	sp, #12
    15c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15c6:	bf00      	nop
    15c8:	50003000 	.word	0x50003000
    15cc:	00005542 	.word	0x00005542
    15d0:	00005536 	.word	0x00005536
    15d4:	0000552d 	.word	0x0000552d
    15d8:	000056c1 	.word	0x000056c1
    15dc:	0000555c 	.word	0x0000555c
    15e0:	00006014 	.word	0x00006014

000015e4 <spm_config_peripheral.constprop.0>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(uint8_t id, bool dma_present)
    15e4:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
    15e6:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    15e8:	2b00      	cmp	r3, #0
    15ea:	db0c      	blt.n	1606 <spm_config_peripheral.constprop.0+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15ec:	2201      	movs	r2, #1
    15ee:	f000 011f 	and.w	r1, r0, #31
    15f2:	408a      	lsls	r2, r1
    15f4:	095b      	lsrs	r3, r3, #5
    15f6:	4910      	ldr	r1, [pc, #64]	; (1638 <spm_config_peripheral.constprop.0+0x54>)
    15f8:	3320      	adds	r3, #32
    15fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    15fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1602:	f3bf 8f6f 	isb	sy
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1606:	0083      	lsls	r3, r0, #2
    1608:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    160c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1610:	282f      	cmp	r0, #47	; 0x2f
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1612:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1616:	d006      	beq.n	1626 <spm_config_peripheral.constprop.0+0x42>
	return present && (usel || split);
    1618:	2a00      	cmp	r2, #0
    161a:	da07      	bge.n	162c <spm_config_peripheral.constprop.0+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    161c:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
    1620:	3a02      	subs	r2, #2
    1622:	2a01      	cmp	r2, #1
    1624:	d802      	bhi.n	162c <spm_config_peripheral.constprop.0+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    1626:	4a05      	ldr	r2, [pc, #20]	; (163c <spm_config_peripheral.constprop.0+0x58>)
    1628:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    162c:	2101      	movs	r1, #1
    162e:	f003 f8e9 	bl	4804 <irq_target_state_set>
	return 0;
}
    1632:	2000      	movs	r0, #0
    1634:	bd08      	pop	{r3, pc}
    1636:	bf00      	nop
    1638:	e000e100 	.word	0xe000e100
    163c:	80000100 	.word	0x80000100

00001640 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
    1640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    1642:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    1646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    164a:	481d      	ldr	r0, [pc, #116]	; (16c0 <spm_jump+0x80>)
    164c:	f002 fe35 	bl	42ba <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    1650:	6821      	ldr	r1, [r4, #0]
    1652:	481c      	ldr	r0, [pc, #112]	; (16c4 <spm_jump+0x84>)
    1654:	f002 fe31 	bl	42ba <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1658:	6861      	ldr	r1, [r4, #4]
    165a:	481b      	ldr	r0, [pc, #108]	; (16c8 <spm_jump+0x88>)
    165c:	f002 fe2d 	bl	42ba <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    1660:	2210      	movs	r2, #16
    1662:	2100      	movs	r1, #0
    1664:	4668      	mov	r0, sp
    1666:	f003 f971 	bl	494c <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
    166a:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
    166c:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    166e:	9300      	str	r3, [sp, #0]
    1670:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
    1672:	f001 f82d 	bl	26d0 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
    1676:	2001      	movs	r0, #1
    1678:	f001 f85a 	bl	2730 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
    167c:	2000      	movs	r0, #0
    167e:	f001 f843 	bl	2708 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
    1682:	2000      	movs	r0, #0
    1684:	f001 f868 	bl	2758 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
    1688:	2101      	movs	r1, #1
    168a:	2000      	movs	r0, #0
    168c:	f001 f882 	bl	2794 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
    1690:	f001 f876 	bl	2780 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    1694:	6864      	ldr	r4, [r4, #4]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    1696:	480d      	ldr	r0, [pc, #52]	; (16cc <spm_jump+0x8c>)
    1698:	f002 fe0f 	bl	42ba <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
    169c:	2008      	movs	r0, #8
    169e:	f7ff ffa1 	bl	15e4 <spm_config_peripheral.constprop.0>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    16a2:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
    16a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    16aa:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
    16ae:	0864      	lsrs	r4, r4, #1
    16b0:	0064      	lsls	r4, r4, #1
    16b2:	4620      	mov	r0, r4
    16b4:	4621      	mov	r1, r4
    16b6:	4622      	mov	r2, r4
    16b8:	4623      	mov	r3, r4
    16ba:	f7fe ff4d 	bl	558 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
    16be:	bf00      	nop
    16c0:	0000555f 	.word	0x0000555f
    16c4:	00005576 	.word	0x00005576
    16c8:	0000558b 	.word	0x0000558b
    16cc:	000055a9 	.word	0x000055a9

000016d0 <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
    16d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
    16d4:	483c      	ldr	r0, [pc, #240]	; (17c8 <spm_config+0xf8>)
    16d6:	f002 fdf0 	bl	42ba <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
    16da:	2100      	movs	r1, #0
    16dc:	f240 1317 	movw	r3, #279	; 0x117
    16e0:	4608      	mov	r0, r1
    16e2:	2202      	movs	r2, #2
    16e4:	f7ff ff2e 	bl	1544 <config_regions>
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
    16e8:	f240 1307 	movw	r3, #263	; 0x107
    16ec:	2240      	movs	r2, #64	; 0x40
    16ee:	2102      	movs	r1, #2
    16f0:	2000      	movs	r0, #0
    16f2:	f7ff ff27 	bl	1544 <config_regions>
	PRINT("\n");
    16f6:	4835      	ldr	r0, [pc, #212]	; (17cc <spm_config+0xfc>)
    16f8:	f002 fddf 	bl	42ba <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    16fc:	4b34      	ldr	r3, [pc, #208]	; (17d0 <spm_config+0x100>)
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    16fe:	4a35      	ldr	r2, [pc, #212]	; (17d4 <spm_config+0x104>)
    1700:	f3c3 3185 	ubfx	r1, r3, #14, #6
    1704:	f3c3 030d 	ubfx	r3, r3, #0, #14
    1708:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    170c:	f3c3 1343 	ubfx	r3, r3, #5, #4
    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    1710:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    1714:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
    1718:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
    171c:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    1720:	482d      	ldr	r0, [pc, #180]	; (17d8 <spm_config+0x108>)
    1722:	0152      	lsls	r2, r2, #5
    1724:	f002 fdc9 	bl	42ba <printk>
	PRINT("\n");
    1728:	4828      	ldr	r0, [pc, #160]	; (17cc <spm_config+0xfc>)
    172a:	f002 fdc6 	bl	42ba <printk>
	int err = spm_secure_services_init();
    172e:	f003 f860 	bl	47f2 <spm_secure_services_init>
	if (err != 0) {
    1732:	4601      	mov	r1, r0
    1734:	b110      	cbz	r0, 173c <spm_config+0x6c>
		PRINT("Could not initialize secure services (err %d).\n", err);
    1736:	4829      	ldr	r0, [pc, #164]	; (17dc <spm_config+0x10c>)
    1738:	f002 fdbf 	bl	42ba <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    173c:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
    173e:	4828      	ldr	r0, [pc, #160]	; (17e0 <spm_config+0x110>)
    1740:	f002 fdbb 	bl	42ba <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
    1744:	f240 1317 	movw	r3, #279	; 0x117
    1748:	2204      	movs	r2, #4
    174a:	2100      	movs	r1, #0
    174c:	2001      	movs	r0, #1
    174e:	f7ff fef9 	bl	1544 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
    1752:	4d20      	ldr	r5, [pc, #128]	; (17d4 <spm_config+0x104>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
    1754:	f240 1307 	movw	r3, #263	; 0x107
    1758:	2240      	movs	r2, #64	; 0x40
    175a:	2104      	movs	r1, #4
    175c:	2001      	movs	r0, #1
    175e:	f7ff fef1 	bl	1544 <config_regions>
	PRINT("\n");
    1762:	481a      	ldr	r0, [pc, #104]	; (17cc <spm_config+0xfc>)
    1764:	f002 fda9 	bl	42ba <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    1768:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    176c:	481d      	ldr	r0, [pc, #116]	; (17e4 <spm_config+0x114>)
    176e:	f002 fda4 	bl	42ba <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    1772:	4f1d      	ldr	r7, [pc, #116]	; (17e8 <spm_config+0x118>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
    1774:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    1778:	f8df 8070 	ldr.w	r8, [pc, #112]	; 17ec <spm_config+0x11c>
		NRF_SPU->GPIOPORT[1].PERM = 0;
    177c:	f8c5 44c8 	str.w	r4, [r5, #1224]	; 0x4c8
		PRINT("%02u %-21s%s", i, periph[i].name,
    1780:	f8df 906c 	ldr.w	r9, [pc, #108]	; 17f0 <spm_config+0x120>
    1784:	4d1b      	ldr	r5, [pc, #108]	; (17f4 <spm_config+0x124>)
    1786:	796e      	ldrb	r6, [r5, #5]
    1788:	4621      	mov	r1, r4
    178a:	2e00      	cmp	r6, #0
    178c:	bf14      	ite	ne
    178e:	463b      	movne	r3, r7
    1790:	4643      	moveq	r3, r8
    1792:	4648      	mov	r0, r9
    1794:	682a      	ldr	r2, [r5, #0]
    1796:	f002 fd90 	bl	42ba <printk>
		if (!periph[i].nonsecure) {
    179a:	b966      	cbnz	r6, 17b6 <spm_config+0xe6>
			PRINT("\tSKIP\n");
    179c:	4816      	ldr	r0, [pc, #88]	; (17f8 <spm_config+0x128>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    179e:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    17a0:	f002 fd8b 	bl	42ba <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    17a4:	2c2d      	cmp	r4, #45	; 0x2d
    17a6:	f105 0508 	add.w	r5, r5, #8
    17aa:	d1ec      	bne.n	1786 <spm_config+0xb6>
	PRINT("\n");
    17ac:	4807      	ldr	r0, [pc, #28]	; (17cc <spm_config+0xfc>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    17ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
    17b2:	f002 bd82 	b.w	42ba <printk>
		err = spm_config_peripheral(periph[i].id, false);
    17b6:	7928      	ldrb	r0, [r5, #4]
    17b8:	f7ff ff14 	bl	15e4 <spm_config_peripheral.constprop.0>
		if (err) {
    17bc:	b108      	cbz	r0, 17c2 <spm_config+0xf2>
			PRINT("\tERROR\n");
    17be:	480f      	ldr	r0, [pc, #60]	; (17fc <spm_config+0x12c>)
    17c0:	e7ed      	b.n	179e <spm_config+0xce>
			PRINT("\tOK\n");
    17c2:	480f      	ldr	r0, [pc, #60]	; (1800 <spm_config+0x130>)
    17c4:	e7eb      	b.n	179e <spm_config+0xce>
    17c6:	bf00      	nop
    17c8:	000055df 	.word	0x000055df
    17cc:	00006014 	.word	0x00006014
    17d0:	00007fe0 	.word	0x00007fe0
    17d4:	50003000 	.word	0x50003000
    17d8:	00005603 	.word	0x00005603
    17dc:	00005649 	.word	0x00005649
    17e0:	00005679 	.word	0x00005679
    17e4:	0000569b 	.word	0x0000569b
    17e8:	000055d4 	.word	0x000055d4
    17ec:	0000553a 	.word	0x0000553a
    17f0:	000056b7 	.word	0x000056b7
    17f4:	00005178 	.word	0x00005178
    17f8:	000056c4 	.word	0x000056c4
    17fc:	000056cb 	.word	0x000056cb
    1800:	000056d3 	.word	0x000056d3

00001804 <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
    1804:	b570      	push	{r4, r5, r6, lr}
    1806:	460c      	mov	r4, r1
    1808:	4615      	mov	r5, r2
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
    180a:	4606      	mov	r6, r0
    180c:	b950      	cbnz	r0, 1824 <__acle_se_spm_request_read_nse+0x20>
		return -EINVAL;
    180e:	f06f 0015 	mvn.w	r0, #21
			return 0;
		}
	}

	return -EPERM;
}
    1812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1816:	4671      	mov	r1, lr
    1818:	4672      	mov	r2, lr
    181a:	4673      	mov	r3, lr
    181c:	46f4      	mov	ip, lr
    181e:	f38e 8c00 	msr	CPSR_fs, lr
    1822:	4774      	bxns	lr
	if (destination == NULL || len <= 0) {
    1824:	2a00      	cmp	r2, #0
    1826:	d0f2      	beq.n	180e <__acle_se_spm_request_read_nse+0xa>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1828:	f003 f833 	bl	4892 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)destination)) {
    182c:	2801      	cmp	r0, #1
    182e:	d0ee      	beq.n	180e <__acle_se_spm_request_read_nse+0xa>
		if (addr >= start && addr + len <= start + size) {
    1830:	4b0c      	ldr	r3, [pc, #48]	; (1864 <__acle_se_spm_request_read_nse+0x60>)
    1832:	429c      	cmp	r4, r3
    1834:	d90b      	bls.n	184e <__acle_se_spm_request_read_nse+0x4a>
    1836:	192a      	adds	r2, r5, r4
    1838:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
    183c:	429a      	cmp	r2, r3
    183e:	d809      	bhi.n	1854 <__acle_se_spm_request_read_nse+0x50>
			memcpy(destination, (const void *)addr, len);
    1840:	462a      	mov	r2, r5
    1842:	4621      	mov	r1, r4
    1844:	4630      	mov	r0, r6
    1846:	f003 f856 	bl	48f6 <memcpy>
			return 0;
    184a:	2000      	movs	r0, #0
    184c:	e7e1      	b.n	1812 <__acle_se_spm_request_read_nse+0xe>
		if (addr >= start && addr + len <= start + size) {
    184e:	4b06      	ldr	r3, [pc, #24]	; (1868 <__acle_se_spm_request_read_nse+0x64>)
    1850:	429c      	cmp	r4, r3
    1852:	d903      	bls.n	185c <__acle_se_spm_request_read_nse+0x58>
    1854:	4b05      	ldr	r3, [pc, #20]	; (186c <__acle_se_spm_request_read_nse+0x68>)
    1856:	192a      	adds	r2, r5, r4
    1858:	429a      	cmp	r2, r3
    185a:	d9f1      	bls.n	1840 <__acle_se_spm_request_read_nse+0x3c>
	return -EPERM;
    185c:	f04f 30ff 	mov.w	r0, #4294967295
    1860:	e7d7      	b.n	1812 <__acle_se_spm_request_read_nse+0xe>
    1862:	bf00      	nop
    1864:	00ff0203 	.word	0x00ff0203
    1868:	00ff012f 	.word	0x00ff012f
    186c:	00ff0138 	.word	0x00ff0138

00001870 <__acle_se_spm_firmware_info_nse>:
#endif /* CONFIG_SPM_SERVICE_S0_ACTIVE */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
    1870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1874:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
    1876:	460d      	mov	r5, r1
{
    1878:	b085      	sub	sp, #20
	if (info == NULL) {
    187a:	b381      	cbz	r1, 18de <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    187c:	f003 f809 	bl	4892 <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that fw_address is within secure area */
	if (!ptr_in_secure_area(fw_address)) {
    1880:	2801      	cmp	r0, #1
    1882:	d12c      	bne.n	18de <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1884:	4628      	mov	r0, r5
    1886:	f003 f804 	bl	4892 <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that *info is in non-secure RAM */
	if (ptr_in_secure_area((intptr_t)info)) {
    188a:	2801      	cmp	r0, #1
    188c:	d027      	beq.n	18de <__acle_se_spm_firmware_info_nse+0x6e>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    188e:	f04f 0800 	mov.w	r8, #0
    1892:	f8df b05c 	ldr.w	fp, [pc, #92]	; 18f0 <__acle_se_spm_firmware_info_nse+0x80>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1896:	f8df a05c 	ldr.w	sl, [pc, #92]	; 18f4 <__acle_se_spm_firmware_info_nse+0x84>
    189a:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    189c:	f85b 6b04 	ldr.w	r6, [fp], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    18a0:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
    18a4:	444e      	add	r6, r9
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    18a6:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    18aa:	220c      	movs	r2, #12
    18ac:	4639      	mov	r1, r7
    18ae:	4630      	mov	r0, r6
    18b0:	f003 f810 	bl	48d4 <memcmp>
    18b4:	4604      	mov	r4, r0
    18b6:	b900      	cbnz	r0, 18ba <__acle_se_spm_firmware_info_nse+0x4a>
		if (finfo) {
    18b8:	b9a6      	cbnz	r6, 18e4 <__acle_se_spm_firmware_info_nse+0x74>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    18ba:	f108 0801 	add.w	r8, r8, #1
    18be:	f1b8 0f05 	cmp.w	r8, #5
    18c2:	d1eb      	bne.n	189c <__acle_se_spm_firmware_info_nse+0x2c>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
    18c4:	f06f 040d 	mvn.w	r4, #13
}
    18c8:	4620      	mov	r0, r4
    18ca:	b005      	add	sp, #20
    18cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18d0:	4671      	mov	r1, lr
    18d2:	4672      	mov	r2, lr
    18d4:	4673      	mov	r3, lr
    18d6:	46f4      	mov	ip, lr
    18d8:	f38e 8c00 	msr	CPSR_fs, lr
    18dc:	4774      	bxns	lr
		return -EINVAL;
    18de:	f06f 0415 	mvn.w	r4, #21
    18e2:	e7f1      	b.n	18c8 <__acle_se_spm_firmware_info_nse+0x58>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    18e4:	223c      	movs	r2, #60	; 0x3c
    18e6:	4631      	mov	r1, r6
    18e8:	4628      	mov	r0, r5
    18ea:	f003 f804 	bl	48f6 <memcpy>
		return 0;
    18ee:	e7eb      	b.n	18c8 <__acle_se_spm_firmware_info_nse+0x58>
    18f0:	000052e0 	.word	0x000052e0
    18f4:	000050f0 	.word	0x000050f0

000018f8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    18f8:	4801      	ldr	r0, [pc, #4]	; (1900 <nrf_cc3xx_platform_abort_init+0x8>)
    18fa:	f002 bbb7 	b.w	406c <nrf_cc3xx_platform_set_abort>
    18fe:	bf00      	nop
    1900:	000052f4 	.word	0x000052f4

00001904 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1904:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    1906:	4604      	mov	r4, r0
    1908:	b918      	cbnz	r0, 1912 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    190a:	4b0d      	ldr	r3, [pc, #52]	; (1940 <mutex_free_platform+0x3c>)
    190c:	480d      	ldr	r0, [pc, #52]	; (1944 <mutex_free_platform+0x40>)
    190e:	685b      	ldr	r3, [r3, #4]
    1910:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1912:	6861      	ldr	r1, [r4, #4]
    1914:	2908      	cmp	r1, #8
    1916:	d00d      	beq.n	1934 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1918:	f031 0304 	bics.w	r3, r1, #4
    191c:	d00a      	beq.n	1934 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    191e:	f011 0102 	ands.w	r1, r1, #2
    1922:	d008      	beq.n	1936 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1924:	4621      	mov	r1, r4
    1926:	4808      	ldr	r0, [pc, #32]	; (1948 <mutex_free_platform+0x44>)
    1928:	f001 fc8c 	bl	3244 <k_mem_slab_free>
        mutex->mutex = NULL;
    192c:	2300      	movs	r3, #0
    192e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1930:	2300      	movs	r3, #0
    1932:	6063      	str	r3, [r4, #4]
}
    1934:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1936:	2214      	movs	r2, #20
    1938:	6820      	ldr	r0, [r4, #0]
    193a:	f003 f807 	bl	494c <memset>
    193e:	e7f7      	b.n	1930 <mutex_free_platform+0x2c>
    1940:	20000048 	.word	0x20000048
    1944:	0000588d 	.word	0x0000588d
    1948:	20000314 	.word	0x20000314

0000194c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    194c:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    194e:	b340      	cbz	r0, 19a2 <mutex_lock_platform+0x56>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    1950:	6843      	ldr	r3, [r0, #4]
    1952:	2b04      	cmp	r3, #4
    1954:	d00b      	beq.n	196e <mutex_lock_platform+0x22>
    1956:	2b08      	cmp	r3, #8
    1958:	d016      	beq.n	1988 <mutex_lock_platform+0x3c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    195a:	b303      	cbz	r3, 199e <mutex_lock_platform+0x52>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    195c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    195e:	f04f 32ff 	mov.w	r2, #4294967295
    1962:	f04f 33ff 	mov.w	r3, #4294967295
    1966:	f001 fc97 	bl	3298 <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    196a:	b158      	cbz	r0, 1984 <mutex_lock_platform+0x38>
    196c:	e015      	b.n	199a <mutex_lock_platform+0x4e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    196e:	2201      	movs	r2, #1
    1970:	6803      	ldr	r3, [r0, #0]
    1972:	e8d3 1fef 	ldaex	r1, [r3]
    1976:	2900      	cmp	r1, #0
    1978:	d103      	bne.n	1982 <mutex_lock_platform+0x36>
    197a:	e8c3 2fe0 	stlex	r0, r2, [r3]
    197e:	2800      	cmp	r0, #0
    1980:	d1f7      	bne.n	1972 <mutex_lock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1982:	d10a      	bne.n	199a <mutex_lock_platform+0x4e>
    1984:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    1986:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    1988:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    198a:	4a07      	ldr	r2, [pc, #28]	; (19a8 <mutex_lock_platform+0x5c>)
    198c:	781b      	ldrb	r3, [r3, #0]
    198e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1996:	2b00      	cmp	r3, #0
    1998:	d0f4      	beq.n	1984 <mutex_lock_platform+0x38>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    199a:	4804      	ldr	r0, [pc, #16]	; (19ac <mutex_lock_platform+0x60>)
    199c:	e7f3      	b.n	1986 <mutex_lock_platform+0x3a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    199e:	4804      	ldr	r0, [pc, #16]	; (19b0 <mutex_lock_platform+0x64>)
    19a0:	e7f1      	b.n	1986 <mutex_lock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    19a2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    19a6:	e7ee      	b.n	1986 <mutex_lock_platform+0x3a>
    19a8:	50030000 	.word	0x50030000
    19ac:	ffff8fe9 	.word	0xffff8fe9
    19b0:	ffff8fea 	.word	0xffff8fea

000019b4 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    19b4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    19b6:	b308      	cbz	r0, 19fc <mutex_unlock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    19b8:	6843      	ldr	r3, [r0, #4]
    19ba:	2b04      	cmp	r3, #4
    19bc:	d007      	beq.n	19ce <mutex_unlock_platform+0x1a>
    19be:	2b08      	cmp	r3, #8
    19c0:	d013      	beq.n	19ea <mutex_unlock_platform+0x36>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    19c2:	b1f3      	cbz	r3, 1a02 <mutex_unlock_platform+0x4e>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    19c4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    19c6:	f001 fcd9 	bl	337c <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    19ca:	2000      	movs	r0, #0
    19cc:	e00c      	b.n	19e8 <mutex_unlock_platform+0x34>
    19ce:	2200      	movs	r2, #0
    19d0:	6803      	ldr	r3, [r0, #0]
    19d2:	e8d3 1fef 	ldaex	r1, [r3]
    19d6:	2901      	cmp	r1, #1
    19d8:	d103      	bne.n	19e2 <mutex_unlock_platform+0x2e>
    19da:	e8c3 2fe0 	stlex	r0, r2, [r3]
    19de:	2800      	cmp	r0, #0
    19e0:	d1f7      	bne.n	19d2 <mutex_unlock_platform+0x1e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    19e2:	4809      	ldr	r0, [pc, #36]	; (1a08 <mutex_unlock_platform+0x54>)
    19e4:	bf08      	it	eq
    19e6:	4610      	moveq	r0, r2
    }
}
    19e8:	bd08      	pop	{r3, pc}
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    19ea:	6803      	ldr	r3, [r0, #0]
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    19ec:	2000      	movs	r0, #0
    19ee:	781b      	ldrb	r3, [r3, #0]
    19f0:	4a06      	ldr	r2, [pc, #24]	; (1a0c <mutex_unlock_platform+0x58>)
    19f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
    19f6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    19fa:	e7f5      	b.n	19e8 <mutex_unlock_platform+0x34>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    19fc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1a00:	e7f2      	b.n	19e8 <mutex_unlock_platform+0x34>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1a02:	4803      	ldr	r0, [pc, #12]	; (1a10 <mutex_unlock_platform+0x5c>)
    1a04:	e7f0      	b.n	19e8 <mutex_unlock_platform+0x34>
    1a06:	bf00      	nop
    1a08:	ffff8fe9 	.word	0xffff8fe9
    1a0c:	50030000 	.word	0x50030000
    1a10:	ffff8fea 	.word	0xffff8fea

00001a14 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1a14:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1a16:	4604      	mov	r4, r0
    1a18:	b918      	cbnz	r0, 1a22 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1a1a:	4b16      	ldr	r3, [pc, #88]	; (1a74 <mutex_init_platform+0x60>)
    1a1c:	4816      	ldr	r0, [pc, #88]	; (1a78 <mutex_init_platform+0x64>)
    1a1e:	685b      	ldr	r3, [r3, #4]
    1a20:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1a22:	6863      	ldr	r3, [r4, #4]
    1a24:	2b04      	cmp	r3, #4
    1a26:	d023      	beq.n	1a70 <mutex_init_platform+0x5c>
    1a28:	2b08      	cmp	r3, #8
    1a2a:	d021      	beq.n	1a70 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1a2c:	b9cb      	cbnz	r3, 1a62 <mutex_init_platform+0x4e>
    1a2e:	6823      	ldr	r3, [r4, #0]
    1a30:	b9bb      	cbnz	r3, 1a62 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1a32:	f04f 32ff 	mov.w	r2, #4294967295
    1a36:	f04f 33ff 	mov.w	r3, #4294967295
    1a3a:	4621      	mov	r1, r4
    1a3c:	480f      	ldr	r0, [pc, #60]	; (1a7c <mutex_init_platform+0x68>)
    1a3e:	f001 fbd1 	bl	31e4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1a42:	b908      	cbnz	r0, 1a48 <mutex_init_platform+0x34>
    1a44:	6823      	ldr	r3, [r4, #0]
    1a46:	b91b      	cbnz	r3, 1a50 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1a48:	4b0a      	ldr	r3, [pc, #40]	; (1a74 <mutex_init_platform+0x60>)
    1a4a:	480d      	ldr	r0, [pc, #52]	; (1a80 <mutex_init_platform+0x6c>)
    1a4c:	685b      	ldr	r3, [r3, #4]
    1a4e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1a50:	2214      	movs	r2, #20
    1a52:	2100      	movs	r1, #0
    1a54:	6820      	ldr	r0, [r4, #0]
    1a56:	f002 ff79 	bl	494c <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1a5a:	6863      	ldr	r3, [r4, #4]
    1a5c:	f043 0302 	orr.w	r3, r3, #2
    1a60:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1a62:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1a64:	f003 f8de 	bl	4c24 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1a68:	6863      	ldr	r3, [r4, #4]
    1a6a:	f043 0301 	orr.w	r3, r3, #1
    1a6e:	6063      	str	r3, [r4, #4]
}
    1a70:	bd10      	pop	{r4, pc}
    1a72:	bf00      	nop
    1a74:	20000048 	.word	0x20000048
    1a78:	0000588d 	.word	0x0000588d
    1a7c:	20000314 	.word	0x20000314
    1a80:	000058b3 	.word	0x000058b3

00001a84 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1a84:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1a86:	4906      	ldr	r1, [pc, #24]	; (1aa0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1a88:	2340      	movs	r3, #64	; 0x40
    1a8a:	2214      	movs	r2, #20
    1a8c:	4805      	ldr	r0, [pc, #20]	; (1aa4 <nrf_cc3xx_platform_mutex_init+0x20>)
    1a8e:	f003 f8a6 	bl	4bde <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1a92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1a96:	4904      	ldr	r1, [pc, #16]	; (1aa8 <nrf_cc3xx_platform_mutex_init+0x24>)
    1a98:	4804      	ldr	r0, [pc, #16]	; (1aac <nrf_cc3xx_platform_mutex_init+0x28>)
    1a9a:	f002 bb39 	b.w	4110 <nrf_cc3xx_platform_set_mutexes>
    1a9e:	bf00      	nop
    1aa0:	20000330 	.word	0x20000330
    1aa4:	20000314 	.word	0x20000314
    1aa8:	0000530c 	.word	0x0000530c
    1aac:	000052fc 	.word	0x000052fc

00001ab0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1ab0:	4a09      	ldr	r2, [pc, #36]	; (1ad8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1ab2:	490a      	ldr	r1, [pc, #40]	; (1adc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1ab4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1ab6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1ab8:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    1aba:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1abc:	4908      	ldr	r1, [pc, #32]	; (1ae0 <arch_swap+0x30>)
    1abe:	684b      	ldr	r3, [r1, #4]
    1ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1ac4:	604b      	str	r3, [r1, #4]
    1ac6:	2300      	movs	r3, #0
    1ac8:	f383 8811 	msr	BASEPRI, r3
    1acc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1ad0:	6893      	ldr	r3, [r2, #8]
}
    1ad2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    1ad4:	4770      	bx	lr
    1ad6:	bf00      	nop
    1ad8:	20000850 	.word	0x20000850
    1adc:	00005384 	.word	0x00005384
    1ae0:	e000ed00 	.word	0xe000ed00

00001ae4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1ae4:	4913      	ldr	r1, [pc, #76]	; (1b34 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1ae6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1ae8:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    1aec:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1aee:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1af2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1af6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1af8:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1afc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1b00:	4f0d      	ldr	r7, [pc, #52]	; (1b38 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1b02:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1b06:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    1b08:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1b0a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1b0c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    1b0e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1b10:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1b12:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1b16:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    1b1a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1b1e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    1b22:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    1b26:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    1b28:	f002 fe9b 	bl	4862 <configure_builtin_stack_guard>
    pop {r2, lr}
    1b2c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    1b30:	4770      	bx	lr
    1b32:	0000      	.short	0x0000
    ldr r1, =_kernel
    1b34:	20000850 	.word	0x20000850
    ldr v4, =_SCS_ICSR
    1b38:	e000ed04 	.word	0xe000ed04

00001b3c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    1b3c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1b40:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1b42:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1b46:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1b4a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1b4c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1b50:	2902      	cmp	r1, #2
    beq _oops
    1b52:	d0ff      	beq.n	1b54 <_oops>

00001b54 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1b54:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1b56:	f002 fe88 	bl	486a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1b5a:	bd01      	pop	{r0, pc}

00001b5c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1b5c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1b5e:	2b00      	cmp	r3, #0
    1b60:	db08      	blt.n	1b74 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b62:	2201      	movs	r2, #1
    1b64:	f000 001f 	and.w	r0, r0, #31
    1b68:	fa02 f000 	lsl.w	r0, r2, r0
    1b6c:	4a02      	ldr	r2, [pc, #8]	; (1b78 <arch_irq_enable+0x1c>)
    1b6e:	095b      	lsrs	r3, r3, #5
    1b70:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1b74:	4770      	bx	lr
    1b76:	bf00      	nop
    1b78:	e000e100 	.word	0xe000e100

00001b7c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1b7c:	4b05      	ldr	r3, [pc, #20]	; (1b94 <arch_irq_is_enabled+0x18>)
    1b7e:	0942      	lsrs	r2, r0, #5
    1b80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1b84:	2301      	movs	r3, #1
    1b86:	f000 001f 	and.w	r0, r0, #31
    1b8a:	fa03 f000 	lsl.w	r0, r3, r0
}
    1b8e:	4010      	ands	r0, r2
    1b90:	4770      	bx	lr
    1b92:	bf00      	nop
    1b94:	e000e100 	.word	0xe000e100

00001b98 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1b98:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1b9a:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    1b9c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ba0:	bfac      	ite	ge
    1ba2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ba6:	4b06      	ldrlt	r3, [pc, #24]	; (1bc0 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ba8:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1bac:	b2c9      	uxtb	r1, r1
    1bae:	bfab      	itete	ge
    1bb0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1bb4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1bb8:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1bbc:	5419      	strblt	r1, [r3, r0]
}
    1bbe:	4770      	bx	lr
    1bc0:	e000ed14 	.word	0xe000ed14

00001bc4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1bc4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1bc8:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    1bca:	490b      	ldr	r1, [pc, #44]	; (1bf8 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    1bcc:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    1bd0:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    1bd2:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    1bd6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1bda:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    1bdc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    1be0:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1be4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1be8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1bec:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1bee:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1bf0:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    1bf2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1bf4:	4770      	bx	lr
    1bf6:	bf00      	nop
    1bf8:	0000442b 	.word	0x0000442b

00001bfc <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1bfc:	4604      	mov	r4, r0
    1bfe:	b508      	push	{r3, lr}
    1c00:	460e      	mov	r6, r1
    1c02:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    1c04:	f000 fba2 	bl	234c <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1c08:	4b08      	ldr	r3, [pc, #32]	; (1c2c <arch_switch_to_main_thread+0x30>)
    1c0a:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1c0c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    1c0e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1c12:	4628      	mov	r0, r5
    1c14:	f386 8809 	msr	PSP, r6
    1c18:	2100      	movs	r1, #0
    1c1a:	b663      	cpsie	if
    1c1c:	f381 8811 	msr	BASEPRI, r1
    1c20:	f3bf 8f6f 	isb	sy
    1c24:	2200      	movs	r2, #0
    1c26:	2300      	movs	r3, #0
    1c28:	f002 fbff 	bl	442a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1c2c:	20000850 	.word	0x20000850

00001c30 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1c30:	4901      	ldr	r1, [pc, #4]	; (1c38 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1c32:	2210      	movs	r2, #16
	str	r2, [r1]
    1c34:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1c36:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1c38:	e000ed10 	.word	0xe000ed10

00001c3c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1c3c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1c3e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1c40:	f380 8811 	msr	BASEPRI, r0
	isb
    1c44:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1c48:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1c4c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1c4e:	b662      	cpsie	i
	isb
    1c50:	f3bf 8f6f 	isb	sy

	bx	lr
    1c54:	4770      	bx	lr
    1c56:	bf00      	nop

00001c58 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1c58:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1c5a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1c5c:	f381 8811 	msr	BASEPRI, r1

	wfe
    1c60:	bf20      	wfe

	msr	BASEPRI, r0
    1c62:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1c66:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1c68:	4770      	bx	lr
    1c6a:	bf00      	nop

00001c6c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1c6e:	4605      	mov	r5, r0

	if (esf != NULL) {
    1c70:	460c      	mov	r4, r1
    1c72:	b1c9      	cbz	r1, 1ca8 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1c74:	688b      	ldr	r3, [r1, #8]
    1c76:	4810      	ldr	r0, [pc, #64]	; (1cb8 <z_arm_fatal_error+0x4c>)
    1c78:	9300      	str	r3, [sp, #0]
    1c7a:	e9d1 2300 	ldrd	r2, r3, [r1]
    1c7e:	2145      	movs	r1, #69	; 0x45
    1c80:	f002 fb1b 	bl	42ba <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1c84:	6963      	ldr	r3, [r4, #20]
    1c86:	2145      	movs	r1, #69	; 0x45
    1c88:	9300      	str	r3, [sp, #0]
    1c8a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    1c8e:	480b      	ldr	r0, [pc, #44]	; (1cbc <z_arm_fatal_error+0x50>)
    1c90:	f002 fb13 	bl	42ba <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1c94:	2145      	movs	r1, #69	; 0x45
    1c96:	69e2      	ldr	r2, [r4, #28]
    1c98:	4809      	ldr	r0, [pc, #36]	; (1cc0 <z_arm_fatal_error+0x54>)
    1c9a:	f002 fb0e 	bl	42ba <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    1c9e:	2145      	movs	r1, #69	; 0x45
    1ca0:	69a2      	ldr	r2, [r4, #24]
    1ca2:	4808      	ldr	r0, [pc, #32]	; (1cc4 <z_arm_fatal_error+0x58>)
    1ca4:	f002 fb09 	bl	42ba <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    1ca8:	4621      	mov	r1, r4
    1caa:	4628      	mov	r0, r5
}
    1cac:	b003      	add	sp, #12
    1cae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    1cb2:	f001 b94d 	b.w	2f50 <z_fatal_error>
    1cb6:	bf00      	nop
    1cb8:	000058e0 	.word	0x000058e0
    1cbc:	00005914 	.word	0x00005914
    1cc0:	00005948 	.word	0x00005948
    1cc4:	0000595c 	.word	0x0000595c

00001cc8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1cc8:	bf30      	wfi
    b z_SysNmiOnReset
    1cca:	f7ff bffd 	b.w	1cc8 <z_SysNmiOnReset>
    1cce:	bf00      	nop

00001cd0 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1cd0:	4a0e      	ldr	r2, [pc, #56]	; (1d0c <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1cd2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1cd4:	4b0e      	ldr	r3, [pc, #56]	; (1d10 <z_arm_prep_c+0x40>)
    1cd6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1cda:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1cdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ce0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1ce4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1ce8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    1cf0:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1cf4:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1cf8:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1cfc:	f001 f9a6 	bl	304c <z_bss_zero>
	z_data_copy();
    1d00:	f001 fffa 	bl	3cf8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1d04:	f000 faf4 	bl	22f0 <z_arm_interrupt_init>
	z_cstart();
    1d08:	f001 f9c4 	bl	3094 <z_cstart>
    1d0c:	00000000 	.word	0x00000000
    1d10:	e000ed00 	.word	0xe000ed00

00001d14 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1d14:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1d16:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1d18:	4a0b      	ldr	r2, [pc, #44]	; (1d48 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1d1a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    1d1c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1d1e:	bf1e      	ittt	ne
	movne	r1, #0
    1d20:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1d22:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    1d24:	f002 ff59 	blne	4bda <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1d28:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1d2a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1d2e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1d32:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1d36:	4905      	ldr	r1, [pc, #20]	; (1d4c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1d38:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1d3a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1d3c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1d3e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1d42:	4903      	ldr	r1, [pc, #12]	; (1d50 <_isr_wrapper+0x3c>)
	bx r1
    1d44:	4708      	bx	r1
    1d46:	0000      	.short	0x0000
	ldr r2, =_kernel
    1d48:	20000850 	.word	0x20000850
	ldr r1, =_sw_isr_table
    1d4c:	00004e90 	.word	0x00004e90
	ldr r1, =z_arm_int_exit
    1d50:	00002245 	.word	0x00002245

00001d54 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1d54:	2000      	movs	r0, #0
    msr CONTROL, r0
    1d56:	f380 8814 	msr	CONTROL, r0
    isb
    1d5a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1d5e:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1d60:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1d64:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1d68:	f002 fca0 	bl	46ac <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1d6c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1d6e:	490e      	ldr	r1, [pc, #56]	; (1da8 <__start+0x54>)
    str r0, [r1]
    1d70:	6008      	str	r0, [r1, #0]
    dsb
    1d72:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1d76:	480d      	ldr	r0, [pc, #52]	; (1dac <__start+0x58>)
    msr msp, r0
    1d78:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1d7c:	f000 fa94 	bl	22a8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1d80:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1d82:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1d86:	480a      	ldr	r0, [pc, #40]	; (1db0 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1d88:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1d8c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1d8e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1d92:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1d96:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1d98:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1d9a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1d9e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1da2:	f7ff ff95 	bl	1cd0 <z_arm_prep_c>
    1da6:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    1da8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1dac:	200018b0 	.word	0x200018b0
    ldr r0, =z_interrupt_stacks
    1db0:	200019f0 	.word	0x200019f0

00001db4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1db4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1db8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1dbc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1dbe:	4672      	mov	r2, lr
	bl z_arm_fault
    1dc0:	f000 f966 	bl	2090 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1dc4:	bd01      	pop	{r0, pc}
    1dc6:	bf00      	nop

00001dc8 <secure_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void secure_fault(const z_arch_esf_t *esf)
    1dc8:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    1dca:	4c24      	ldr	r4, [pc, #144]	; (1e5c <secure_fault.constprop.0+0x94>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
    1dcc:	4824      	ldr	r0, [pc, #144]	; (1e60 <secure_fault.constprop.0+0x98>)
    1dce:	2145      	movs	r1, #69	; 0x45
    1dd0:	f002 fa73 	bl	42ba <printk>
	STORE_xFAR(sfar, SAU->SFAR);
    1dd4:	f8d4 20e8 	ldr.w	r2, [r4, #232]	; 0xe8
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    1dd8:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    1ddc:	0658      	lsls	r0, r3, #25
    1dde:	d503      	bpl.n	1de8 <secure_fault.constprop.0+0x20>
		PR_EXC("  Address: 0x%x", sfar);
    1de0:	2145      	movs	r1, #69	; 0x45
    1de2:	4820      	ldr	r0, [pc, #128]	; (1e64 <secure_fault.constprop.0+0x9c>)
    1de4:	f002 fa69 	bl	42ba <printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    1de8:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    1dec:	07d9      	lsls	r1, r3, #31
    1dee:	d50b      	bpl.n	1e08 <secure_fault.constprop.0+0x40>
		PR_FAULT_INFO("  Invalid entry point");
    1df0:	2145      	movs	r1, #69	; 0x45
    1df2:	481d      	ldr	r0, [pc, #116]	; (1e68 <secure_fault.constprop.0+0xa0>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
    1df4:	f002 fa61 	bl	42ba <printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    1df8:	4a18      	ldr	r2, [pc, #96]	; (1e5c <secure_fault.constprop.0+0x94>)
    1dfa:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    1dfe:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1e02:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
}
    1e06:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    1e08:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    1e0c:	079a      	lsls	r2, r3, #30
    1e0e:	d502      	bpl.n	1e16 <secure_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Invalid integrity signature");
    1e10:	2145      	movs	r1, #69	; 0x45
    1e12:	4816      	ldr	r0, [pc, #88]	; (1e6c <secure_fault.constprop.0+0xa4>)
    1e14:	e7ee      	b.n	1df4 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    1e16:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    1e1a:	075b      	lsls	r3, r3, #29
    1e1c:	d502      	bpl.n	1e24 <secure_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Invalid exception return");
    1e1e:	2145      	movs	r1, #69	; 0x45
    1e20:	4813      	ldr	r0, [pc, #76]	; (1e70 <secure_fault.constprop.0+0xa8>)
    1e22:	e7e7      	b.n	1df4 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    1e24:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    1e28:	0718      	lsls	r0, r3, #28
    1e2a:	d502      	bpl.n	1e32 <secure_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  Attribution unit violation");
    1e2c:	2145      	movs	r1, #69	; 0x45
    1e2e:	4811      	ldr	r0, [pc, #68]	; (1e74 <secure_fault.constprop.0+0xac>)
    1e30:	e7e0      	b.n	1df4 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    1e32:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    1e36:	06d9      	lsls	r1, r3, #27
    1e38:	d502      	bpl.n	1e40 <secure_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Invalid transition");
    1e3a:	2145      	movs	r1, #69	; 0x45
    1e3c:	480e      	ldr	r0, [pc, #56]	; (1e78 <secure_fault.constprop.0+0xb0>)
    1e3e:	e7d9      	b.n	1df4 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    1e40:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    1e44:	069a      	lsls	r2, r3, #26
    1e46:	d502      	bpl.n	1e4e <secure_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Lazy state preservation");
    1e48:	2145      	movs	r1, #69	; 0x45
    1e4a:	480c      	ldr	r0, [pc, #48]	; (1e7c <secure_fault.constprop.0+0xb4>)
    1e4c:	e7d2      	b.n	1df4 <secure_fault.constprop.0+0x2c>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    1e4e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    1e52:	061b      	lsls	r3, r3, #24
    1e54:	d5d0      	bpl.n	1df8 <secure_fault.constprop.0+0x30>
		PR_FAULT_INFO("  Lazy state error");
    1e56:	2145      	movs	r1, #69	; 0x45
    1e58:	4809      	ldr	r0, [pc, #36]	; (1e80 <secure_fault.constprop.0+0xb8>)
    1e5a:	e7cb      	b.n	1df4 <secure_fault.constprop.0+0x2c>
    1e5c:	e000ed00 	.word	0xe000ed00
    1e60:	0000598f 	.word	0x0000598f
    1e64:	000059ad 	.word	0x000059ad
    1e68:	000059c2 	.word	0x000059c2
    1e6c:	000059dd 	.word	0x000059dd
    1e70:	00005a00 	.word	0x00005a00
    1e74:	00005a20 	.word	0x00005a20
    1e78:	00005a42 	.word	0x00005a42
    1e7c:	00005a5c 	.word	0x00005a5c
    1e80:	00005a7b 	.word	0x00005a7b

00001e84 <usage_fault.constprop.0>:
static uint32_t usage_fault(const z_arch_esf_t *esf)
    1e84:	b538      	push	{r3, r4, r5, lr}
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e86:	4c21      	ldr	r4, [pc, #132]	; (1f0c <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1e88:	2145      	movs	r1, #69	; 0x45
    1e8a:	4821      	ldr	r0, [pc, #132]	; (1f10 <usage_fault.constprop.0+0x8c>)
    1e8c:	f002 fa15 	bl	42ba <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1e90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e92:	019d      	lsls	r5, r3, #6
    1e94:	d503      	bpl.n	1e9e <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    1e96:	2145      	movs	r1, #69	; 0x45
    1e98:	481e      	ldr	r0, [pc, #120]	; (1f14 <usage_fault.constprop.0+0x90>)
    1e9a:	f002 fa0e 	bl	42ba <printk>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1e9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ea0:	01dc      	lsls	r4, r3, #7
    1ea2:	d503      	bpl.n	1eac <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    1ea4:	2145      	movs	r1, #69	; 0x45
    1ea6:	481c      	ldr	r0, [pc, #112]	; (1f18 <usage_fault.constprop.0+0x94>)
    1ea8:	f002 fa07 	bl	42ba <printk>
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1eac:	4d17      	ldr	r5, [pc, #92]	; (1f0c <usage_fault.constprop.0+0x88>)
    1eae:	6aac      	ldr	r4, [r5, #40]	; 0x28
    1eb0:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    1eb4:	d004      	beq.n	1ec0 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    1eb6:	2145      	movs	r1, #69	; 0x45
    1eb8:	4818      	ldr	r0, [pc, #96]	; (1f1c <usage_fault.constprop.0+0x98>)
    1eba:	f002 f9fe 	bl	42ba <printk>
		reason = K_ERR_STACK_CHK_FAIL;
    1ebe:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1ec0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1ec2:	0318      	lsls	r0, r3, #12
    1ec4:	d503      	bpl.n	1ece <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    1ec6:	2145      	movs	r1, #69	; 0x45
    1ec8:	4815      	ldr	r0, [pc, #84]	; (1f20 <usage_fault.constprop.0+0x9c>)
    1eca:	f002 f9f6 	bl	42ba <printk>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1ece:	4d0f      	ldr	r5, [pc, #60]	; (1f0c <usage_fault.constprop.0+0x88>)
    1ed0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1ed2:	0359      	lsls	r1, r3, #13
    1ed4:	d503      	bpl.n	1ede <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1ed6:	2145      	movs	r1, #69	; 0x45
    1ed8:	4812      	ldr	r0, [pc, #72]	; (1f24 <usage_fault.constprop.0+0xa0>)
    1eda:	f002 f9ee 	bl	42ba <printk>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1ede:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1ee0:	039a      	lsls	r2, r3, #14
    1ee2:	d503      	bpl.n	1eec <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1ee4:	2145      	movs	r1, #69	; 0x45
    1ee6:	4810      	ldr	r0, [pc, #64]	; (1f28 <usage_fault.constprop.0+0xa4>)
    1ee8:	f002 f9e7 	bl	42ba <printk>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1eec:	4d07      	ldr	r5, [pc, #28]	; (1f0c <usage_fault.constprop.0+0x88>)
    1eee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1ef0:	03db      	lsls	r3, r3, #15
    1ef2:	d503      	bpl.n	1efc <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1ef4:	2145      	movs	r1, #69	; 0x45
    1ef6:	480d      	ldr	r0, [pc, #52]	; (1f2c <usage_fault.constprop.0+0xa8>)
    1ef8:	f002 f9df 	bl	42ba <printk>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1efc:	6aab      	ldr	r3, [r5, #40]	; 0x28
}
    1efe:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1f00:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1f04:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1f08:	62ab      	str	r3, [r5, #40]	; 0x28
}
    1f0a:	bd38      	pop	{r3, r4, r5, pc}
    1f0c:	e000ed00 	.word	0xe000ed00
    1f10:	00005a93 	.word	0x00005a93
    1f14:	00005ab0 	.word	0x00005ab0
    1f18:	00005ac8 	.word	0x00005ac8
    1f1c:	00005ae7 	.word	0x00005ae7
    1f20:	00005b16 	.word	0x00005b16
    1f24:	00005b39 	.word	0x00005b39
    1f28:	00005b63 	.word	0x00005b63
    1f2c:	00005b82 	.word	0x00005b82

00001f30 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1f30:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1f32:	4c23      	ldr	r4, [pc, #140]	; (1fc0 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1f34:	4606      	mov	r6, r0
    1f36:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    1f38:	4822      	ldr	r0, [pc, #136]	; (1fc4 <bus_fault.constprop.0+0x94>)
    1f3a:	2145      	movs	r1, #69	; 0x45
    1f3c:	f002 f9bd 	bl	42ba <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1f40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f42:	04d9      	lsls	r1, r3, #19
    1f44:	d503      	bpl.n	1f4e <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    1f46:	2145      	movs	r1, #69	; 0x45
    1f48:	481f      	ldr	r0, [pc, #124]	; (1fc8 <bus_fault.constprop.0+0x98>)
    1f4a:	f002 f9b6 	bl	42ba <printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1f4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f50:	051a      	lsls	r2, r3, #20
    1f52:	d503      	bpl.n	1f5c <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1f54:	2145      	movs	r1, #69	; 0x45
    1f56:	481d      	ldr	r0, [pc, #116]	; (1fcc <bus_fault.constprop.0+0x9c>)
    1f58:	f002 f9af 	bl	42ba <printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1f5c:	4c18      	ldr	r4, [pc, #96]	; (1fc0 <bus_fault.constprop.0+0x90>)
    1f5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f60:	059b      	lsls	r3, r3, #22
    1f62:	d510      	bpl.n	1f86 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    1f64:	481a      	ldr	r0, [pc, #104]	; (1fd0 <bus_fault.constprop.0+0xa0>)
    1f66:	2145      	movs	r1, #69	; 0x45
    1f68:	f002 f9a7 	bl	42ba <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1f6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1f6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f70:	0418      	lsls	r0, r3, #16
    1f72:	d508      	bpl.n	1f86 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1f74:	2145      	movs	r1, #69	; 0x45
    1f76:	4817      	ldr	r0, [pc, #92]	; (1fd4 <bus_fault.constprop.0+0xa4>)
    1f78:	f002 f99f 	bl	42ba <printk>
			if (from_hard_fault) {
    1f7c:	b11e      	cbz	r6, 1f86 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1f7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1f84:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1f86:	4c0e      	ldr	r4, [pc, #56]	; (1fc0 <bus_fault.constprop.0+0x90>)
    1f88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f8a:	0559      	lsls	r1, r3, #21
    1f8c:	d503      	bpl.n	1f96 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    1f8e:	2145      	movs	r1, #69	; 0x45
    1f90:	4811      	ldr	r0, [pc, #68]	; (1fd8 <bus_fault.constprop.0+0xa8>)
    1f92:	f002 f992 	bl	42ba <printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1f96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f98:	05da      	lsls	r2, r3, #23
    1f9a:	d50b      	bpl.n	1fb4 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    1f9c:	2145      	movs	r1, #69	; 0x45
    1f9e:	480f      	ldr	r0, [pc, #60]	; (1fdc <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1fa0:	f002 f98b 	bl	42ba <printk>
	*recoverable = memory_fault_recoverable(esf);
    1fa4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1fa6:	4a06      	ldr	r2, [pc, #24]	; (1fc0 <bus_fault.constprop.0+0x90>)
    1fa8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1faa:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1fae:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1fb0:	7028      	strb	r0, [r5, #0]
}
    1fb2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1fb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1fb6:	049b      	lsls	r3, r3, #18
    1fb8:	d5f4      	bpl.n	1fa4 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1fba:	2145      	movs	r1, #69	; 0x45
    1fbc:	4808      	ldr	r0, [pc, #32]	; (1fe0 <bus_fault.constprop.0+0xb0>)
    1fbe:	e7ef      	b.n	1fa0 <bus_fault.constprop.0+0x70>
    1fc0:	e000ed00 	.word	0xe000ed00
    1fc4:	00005bb2 	.word	0x00005bb2
    1fc8:	00005bcd 	.word	0x00005bcd
    1fcc:	00005be3 	.word	0x00005be3
    1fd0:	00005bfb 	.word	0x00005bfb
    1fd4:	00005c19 	.word	0x00005c19
    1fd8:	00005c33 	.word	0x00005c33
    1fdc:	00005c53 	.word	0x00005c53
    1fe0:	00005c70 	.word	0x00005c70

00001fe4 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1fe4:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1fe6:	4c22      	ldr	r4, [pc, #136]	; (2070 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x70>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1fe8:	4606      	mov	r6, r0
    1fea:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1fec:	4821      	ldr	r0, [pc, #132]	; (2074 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x74>)
    1fee:	2145      	movs	r1, #69	; 0x45
    1ff0:	f002 f963 	bl	42ba <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1ff4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ff6:	06d8      	lsls	r0, r3, #27
    1ff8:	d503      	bpl.n	2002 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2>
		PR_FAULT_INFO("  Stacking error (context area might be"
    1ffa:	2145      	movs	r1, #69	; 0x45
    1ffc:	481e      	ldr	r0, [pc, #120]	; (2078 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x78>)
    1ffe:	f002 f95c 	bl	42ba <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2004:	0719      	lsls	r1, r3, #28
    2006:	d503      	bpl.n	2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>
		PR_FAULT_INFO("  Unstacking error");
    2008:	2145      	movs	r1, #69	; 0x45
    200a:	481c      	ldr	r0, [pc, #112]	; (207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>)
    200c:	f002 f955 	bl	42ba <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2010:	4c17      	ldr	r4, [pc, #92]	; (2070 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x70>)
    2012:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2014:	079a      	lsls	r2, r3, #30
    2016:	d510      	bpl.n	203a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a>
		PR_FAULT_INFO("  Data Access Violation");
    2018:	2145      	movs	r1, #69	; 0x45
    201a:	4819      	ldr	r0, [pc, #100]	; (2080 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x80>)
    201c:	f002 f94d 	bl	42ba <printk>
		uint32_t temp = SCB->MMFAR;
    2020:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2022:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2024:	061b      	lsls	r3, r3, #24
    2026:	d508      	bpl.n	203a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2028:	2145      	movs	r1, #69	; 0x45
    202a:	4816      	ldr	r0, [pc, #88]	; (2084 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x84>)
    202c:	f002 f945 	bl	42ba <printk>
			if (from_hard_fault) {
    2030:	b11e      	cbz	r6, 203a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2032:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2038:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    203a:	4c0d      	ldr	r4, [pc, #52]	; (2070 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x70>)
    203c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    203e:	07d8      	lsls	r0, r3, #31
    2040:	d503      	bpl.n	204a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a>
		PR_FAULT_INFO("  Instruction Access Violation");
    2042:	2145      	movs	r1, #69	; 0x45
    2044:	4810      	ldr	r0, [pc, #64]	; (2088 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x88>)
    2046:	f002 f938 	bl	42ba <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    204a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    204c:	0699      	lsls	r1, r3, #26
    204e:	d503      	bpl.n	2058 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58>
		PR_FAULT_INFO(
    2050:	2145      	movs	r1, #69	; 0x45
    2052:	480e      	ldr	r0, [pc, #56]	; (208c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8c>)
    2054:	f002 f931 	bl	42ba <printk>
	*recoverable = memory_fault_recoverable(esf);
    2058:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    205a:	4b05      	ldr	r3, [pc, #20]	; (2070 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x70>)
    205c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    205e:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2060:	bf58      	it	pl
    2062:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2066:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    206a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    206c:	7028      	strb	r0, [r5, #0]
}
    206e:	bd70      	pop	{r4, r5, r6, pc}
    2070:	e000ed00 	.word	0xe000ed00
    2074:	00005ca4 	.word	0x00005ca4
    2078:	00005cbf 	.word	0x00005cbf
    207c:	00005be3 	.word	0x00005be3
    2080:	00005cf7 	.word	0x00005cf7
    2084:	00005d14 	.word	0x00005d14
    2088:	00005d2f 	.word	0x00005d2f
    208c:	00005c70 	.word	0x00005c70

00002090 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2094:	4b5b      	ldr	r3, [pc, #364]	; (2204 <z_arm_fault+0x174>)
{
    2096:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2098:	685c      	ldr	r4, [r3, #4]
    209a:	2600      	movs	r6, #0
{
    209c:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    209e:	f3c4 0708 	ubfx	r7, r4, #0, #9
    20a2:	f386 8811 	msr	BASEPRI, r6
    20a6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    20aa:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    20ae:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    20b2:	d12f      	bne.n	2114 <z_arm_fault+0x84>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    20b4:	f012 0301 	ands.w	r3, r2, #1
    20b8:	d02b      	beq.n	2112 <z_arm_fault+0x82>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    20ba:	f012 0340 	ands.w	r3, r2, #64	; 0x40
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    20be:	f002 0808 	and.w	r8, r2, #8
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    20c2:	f040 8098 	bne.w	21f6 <z_arm_fault+0x166>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    20c6:	0752      	lsls	r2, r2, #29
			secure_esf = (z_arch_esf_t *)msp;
    20c8:	bf54      	ite	pl
    20ca:	4605      	movpl	r5, r0
	*nested_exc = false;
    20cc:	461e      	movmi	r6, r3
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    20ce:	682a      	ldr	r2, [r5, #0]
    20d0:	4b4d      	ldr	r3, [pc, #308]	; (2208 <z_arm_fault+0x178>)
			*nested_exc = true;
    20d2:	bf58      	it	pl
    20d4:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    20d6:	4413      	add	r3, r2
    20d8:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
    20da:	bf98      	it	ls
    20dc:	6c2a      	ldrls	r2, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
    20de:	2145      	movs	r1, #69	; 0x45
    20e0:	484a      	ldr	r0, [pc, #296]	; (220c <z_arm_fault+0x17c>)
    20e2:	f002 f8ea 	bl	42ba <printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    20e6:	f1b8 0f00 	cmp.w	r8, #0
    20ea:	d00f      	beq.n	210c <z_arm_fault+0x7c>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    20ec:	f3ef 8589 	mrs	r5, PSP_NS
	*recoverable = false;
    20f0:	f04f 0800 	mov.w	r8, #0
    20f4:	1efb      	subs	r3, r7, #3
    20f6:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    20fa:	2b09      	cmp	r3, #9
    20fc:	d869      	bhi.n	21d2 <z_arm_fault+0x142>
    20fe:	e8df f003 	tbb	[pc, r3]
    2102:	590b      	.short	0x590b
    2104:	6861385d 	.word	0x6861385d
    2108:	65686868 	.word	0x65686868
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    210c:	f3ef 8588 	mrs	r5, MSP_NS
  return(result);
    2110:	e7ee      	b.n	20f0 <z_arm_fault+0x60>
	*nested_exc = false;
    2112:	461e      	mov	r6, r3
		return NULL;
    2114:	4635      	mov	r5, r6
    2116:	e7eb      	b.n	20f0 <z_arm_fault+0x60>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2118:	4f3a      	ldr	r7, [pc, #232]	; (2204 <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    211a:	2145      	movs	r1, #69	; 0x45
    211c:	483c      	ldr	r0, [pc, #240]	; (2210 <z_arm_fault+0x180>)
    211e:	f002 f8cc 	bl	42ba <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2122:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	*recoverable = false;
    2124:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2128:	f014 0402 	ands.w	r4, r4, #2
    212c:	d004      	beq.n	2138 <z_arm_fault+0xa8>
		PR_EXC("  Bus fault on vector table read");
    212e:	2145      	movs	r1, #69	; 0x45
    2130:	4838      	ldr	r0, [pc, #224]	; (2214 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
    2132:	f002 f8c2 	bl	42ba <printk>
    2136:	e047      	b.n	21c8 <z_arm_fault+0x138>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    213a:	005b      	lsls	r3, r3, #1
    213c:	d521      	bpl.n	2182 <z_arm_fault+0xf2>
		PR_EXC("  Fault escalation (see below)");
    213e:	2145      	movs	r1, #69	; 0x45
    2140:	4835      	ldr	r0, [pc, #212]	; (2218 <z_arm_fault+0x188>)
    2142:	f002 f8ba 	bl	42ba <printk>
		if (SCB_MMFSR != 0) {
    2146:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    214a:	b133      	cbz	r3, 215a <z_arm_fault+0xca>
			reason = mem_manage_fault(esf, 1, recoverable);
    214c:	2001      	movs	r0, #1
    214e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2152:	f7ff ff47 	bl	1fe4 <mem_manage_fault.constprop.0>
    2156:	4604      	mov	r4, r0
		break;
    2158:	e013      	b.n	2182 <z_arm_fault+0xf2>
		} else if (SCB_BFSR != 0) {
    215a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    215e:	b12b      	cbz	r3, 216c <z_arm_fault+0xdc>
			reason = bus_fault(esf, 1, recoverable);
    2160:	2001      	movs	r0, #1
    2162:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    2166:	f7ff fee3 	bl	1f30 <bus_fault.constprop.0>
    216a:	e7f4      	b.n	2156 <z_arm_fault+0xc6>
		} else if (SCB_UFSR != 0) {
    216c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    216e:	b29b      	uxth	r3, r3
    2170:	b113      	cbz	r3, 2178 <z_arm_fault+0xe8>
		reason = usage_fault(esf);
    2172:	f7ff fe87 	bl	1e84 <usage_fault.constprop.0>
    2176:	e7ee      	b.n	2156 <z_arm_fault+0xc6>
		} else if (SAU->SFSR != 0) {
    2178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    217c:	b10b      	cbz	r3, 2182 <z_arm_fault+0xf2>
			secure_fault(esf);
    217e:	f7ff fe23 	bl	1dc8 <secure_fault.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2182:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2186:	b993      	cbnz	r3, 21ae <z_arm_fault+0x11e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2188:	2220      	movs	r2, #32
    218a:	4629      	mov	r1, r5
    218c:	a802      	add	r0, sp, #8
    218e:	f002 fbb2 	bl	48f6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2192:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2194:	b356      	cbz	r6, 21ec <z_arm_fault+0x15c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2196:	f3c3 0208 	ubfx	r2, r3, #0, #9
    219a:	b922      	cbnz	r2, 21a6 <z_arm_fault+0x116>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    219c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    21a0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    21a4:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    21a6:	4620      	mov	r0, r4
    21a8:	a902      	add	r1, sp, #8
    21aa:	f7ff fd5f 	bl	1c6c <z_arm_fatal_error>
}
    21ae:	b00a      	add	sp, #40	; 0x28
    21b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    21b4:	2000      	movs	r0, #0
    21b6:	f10d 0107 	add.w	r1, sp, #7
    21ba:	e7ca      	b.n	2152 <z_arm_fault+0xc2>
		reason = bus_fault(esf, 0, recoverable);
    21bc:	2000      	movs	r0, #0
    21be:	f10d 0107 	add.w	r1, sp, #7
    21c2:	e7d0      	b.n	2166 <z_arm_fault+0xd6>
		secure_fault(esf);
    21c4:	f7ff fe00 	bl	1dc8 <secure_fault.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    21c8:	2400      	movs	r4, #0
}
    21ca:	e7da      	b.n	2182 <z_arm_fault+0xf2>
	PR_FAULT_INFO(
    21cc:	2145      	movs	r1, #69	; 0x45
    21ce:	4813      	ldr	r0, [pc, #76]	; (221c <z_arm_fault+0x18c>)
    21d0:	e7af      	b.n	2132 <z_arm_fault+0xa2>
	PR_FAULT_INFO("***** %s %d) *****",
    21d2:	4913      	ldr	r1, [pc, #76]	; (2220 <z_arm_fault+0x190>)
    21d4:	f414 7ff8 	tst.w	r4, #496	; 0x1f0
    21d8:	4a12      	ldr	r2, [pc, #72]	; (2224 <z_arm_fault+0x194>)
    21da:	4813      	ldr	r0, [pc, #76]	; (2228 <z_arm_fault+0x198>)
    21dc:	bf08      	it	eq
    21de:	460a      	moveq	r2, r1
    21e0:	f1a7 0310 	sub.w	r3, r7, #16
    21e4:	2145      	movs	r1, #69	; 0x45
    21e6:	f002 f868 	bl	42ba <printk>
    21ea:	e7ed      	b.n	21c8 <z_arm_fault+0x138>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    21ec:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    21f0:	f023 0301 	bic.w	r3, r3, #1
    21f4:	e7d6      	b.n	21a4 <z_arm_fault+0x114>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    21f6:	f1b8 0f00 	cmp.w	r8, #0
    21fa:	f47f af79 	bne.w	20f0 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)msp;
    21fe:	4605      	mov	r5, r0
			*nested_exc = true;
    2200:	2601      	movs	r6, #1
    2202:	e775      	b.n	20f0 <z_arm_fault+0x60>
    2204:	e000ed00 	.word	0xe000ed00
    2208:	0105eda6 	.word	0x0105eda6
    220c:	00005d81 	.word	0x00005d81
    2210:	00005da5 	.word	0x00005da5
    2214:	00005dc1 	.word	0x00005dc1
    2218:	00005de7 	.word	0x00005de7
    221c:	00005e0b 	.word	0x00005e0b
    2220:	00005d53 	.word	0x00005d53
    2224:	00005d68 	.word	0x00005d68
    2228:	00005e46 	.word	0x00005e46

0000222c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    222c:	4b04      	ldr	r3, [pc, #16]	; (2240 <z_arm_fault_init+0x14>)
    222e:	695a      	ldr	r2, [r3, #20]
    2230:	f042 0210 	orr.w	r2, r2, #16
    2234:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    2236:	695a      	ldr	r2, [r3, #20]
    2238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    223c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    223e:	4770      	bx	lr
    2240:	e000ed00 	.word	0xe000ed00

00002244 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2244:	4b04      	ldr	r3, [pc, #16]	; (2258 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2246:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2248:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    224a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    224c:	d003      	beq.n	2256 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    224e:	4903      	ldr	r1, [pc, #12]	; (225c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2254:	600a      	str	r2, [r1, #0]

00002256 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2256:	4770      	bx	lr
	ldr r3, =_kernel
    2258:	20000850 	.word	0x20000850
	ldr r1, =_SCS_ICSR
    225c:	e000ed04 	.word	0xe000ed04

00002260 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2260:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2264:	4905      	ldr	r1, [pc, #20]	; (227c <sys_arch_reboot+0x1c>)
    2266:	4b06      	ldr	r3, [pc, #24]	; (2280 <sys_arch_reboot+0x20>)
    2268:	68ca      	ldr	r2, [r1, #12]
    226a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    226e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2270:	60cb      	str	r3, [r1, #12]
    2272:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2276:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2278:	e7fd      	b.n	2276 <sys_arch_reboot+0x16>
    227a:	bf00      	nop
    227c:	e000ed00 	.word	0xe000ed00
    2280:	05fa0004 	.word	0x05fa0004

00002284 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    2284:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    2286:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2288:	4906      	ldr	r1, [pc, #24]	; (22a4 <z_arm_clear_arm_mpu_config+0x20>)
    228a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    228e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    2292:	4293      	cmp	r3, r2
    2294:	d100      	bne.n	2298 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2296:	4770      	bx	lr
  mpu->RNR = rnr;
    2298:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    229c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    22a0:	3301      	adds	r3, #1
    22a2:	e7f6      	b.n	2292 <z_arm_clear_arm_mpu_config+0xe>
    22a4:	e000ed00 	.word	0xe000ed00

000022a8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    22a8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    22aa:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    22ac:	2400      	movs	r4, #0
    22ae:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    22b2:	f7ff ffe7 	bl	2284 <z_arm_clear_arm_mpu_config>
    22b6:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    22b8:	f04f 30ff 	mov.w	r0, #4294967295
    22bc:	4a0b      	ldr	r2, [pc, #44]	; (22ec <z_arm_init_arch_hw_at_boot+0x44>)
    22be:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    22c2:	3301      	adds	r3, #1
    22c4:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    22c6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    22ca:	d1f8      	bne.n	22be <z_arm_init_arch_hw_at_boot+0x16>
    22cc:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    22ce:	f04f 30ff 	mov.w	r0, #4294967295
    22d2:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    22d6:	3301      	adds	r3, #1
    22d8:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    22da:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    22de:	d1f8      	bne.n	22d2 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    22e0:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    22e2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22e6:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    22ea:	bd10      	pop	{r4, pc}
    22ec:	e000e100 	.word	0xe000e100

000022f0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    22f0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22f2:	2120      	movs	r1, #32
    22f4:	4803      	ldr	r0, [pc, #12]	; (2304 <z_arm_interrupt_init+0x14>)
    22f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    22f8:	3301      	adds	r3, #1
    22fa:	2b45      	cmp	r3, #69	; 0x45
    22fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2300:	d1f9      	bne.n	22f6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2302:	4770      	bx	lr
    2304:	e000e100 	.word	0xe000e100

00002308 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    2308:	b508      	push	{r3, lr}
	if (_current == thread) {
    230a:	4b0e      	ldr	r3, [pc, #56]	; (2344 <z_impl_k_thread_abort+0x3c>)
    230c:	689b      	ldr	r3, [r3, #8]
    230e:	4283      	cmp	r3, r0
    2310:	d107      	bne.n	2322 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2312:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2316:	b193      	cbz	r3, 233e <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2318:	4a0b      	ldr	r2, [pc, #44]	; (2348 <z_impl_k_thread_abort+0x40>)
    231a:	6853      	ldr	r3, [r2, #4]
    231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2320:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    2322:	f001 fa2b 	bl	377c <z_thread_single_abort>
	__asm__ volatile(
    2326:	f04f 0320 	mov.w	r3, #32
    232a:	f3ef 8011 	mrs	r0, BASEPRI
    232e:	f383 8811 	msr	BASEPRI, r3
    2332:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    2336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    233a:	f002 bc7a 	b.w	4c32 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    233e:	f001 fcbb 	bl	3cb8 <z_self_abort>
    2342:	bf00      	nop
    2344:	20000850 	.word	0x20000850
    2348:	e000ed00 	.word	0xe000ed00

0000234c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    234c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    234e:	4c09      	ldr	r4, [pc, #36]	; (2374 <z_arm_configure_static_mpu_regions+0x28>)
    2350:	4a09      	ldr	r2, [pc, #36]	; (2378 <z_arm_configure_static_mpu_regions+0x2c>)
    2352:	4623      	mov	r3, r4
    2354:	2101      	movs	r1, #1
    2356:	4809      	ldr	r0, [pc, #36]	; (237c <z_arm_configure_static_mpu_regions+0x30>)
    2358:	f000 f954 	bl	2604 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    235c:	2300      	movs	r3, #0
    235e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    2360:	4b07      	ldr	r3, [pc, #28]	; (2380 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2362:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    2364:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2366:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2368:	9301      	str	r3, [sp, #4]
    236a:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    236c:	f000 f954 	bl	2618 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2370:	b004      	add	sp, #16
    2372:	bd10      	pop	{r4, pc}
    2374:	20008000 	.word	0x20008000
    2378:	20000000 	.word	0x20000000
    237c:	00005320 	.word	0x00005320
    2380:	20000140 	.word	0x20000140

00002384 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2384:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2386:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    2388:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    238a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    238e:	f004 031f 	and.w	r3, r4, #31
    2392:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2394:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2396:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2398:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    239c:	4905      	ldr	r1, [pc, #20]	; (23b4 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    239e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    23a2:	f043 0301 	orr.w	r3, r3, #1
    23a6:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    23aa:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    23ae:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    23b2:	bd10      	pop	{r4, pc}
    23b4:	e000ed00 	.word	0xe000ed00

000023b8 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    23b8:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    23ba:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    23bc:	680c      	ldr	r4, [r1, #0]
{
    23be:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    23c0:	890a      	ldrh	r2, [r1, #8]
    23c2:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    23c4:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    23c6:	3b01      	subs	r3, #1
    23c8:	f024 041f 	bic.w	r4, r4, #31
    23cc:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    23ce:	f002 021f 	and.w	r2, r2, #31
    23d2:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    23d6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    23da:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    23dc:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    23de:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    23e2:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    23e4:	d909      	bls.n	23fa <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    23e6:	4602      	mov	r2, r0
    23e8:	2145      	movs	r1, #69	; 0x45
    23ea:	4806      	ldr	r0, [pc, #24]	; (2404 <mpu_configure_region+0x4c>)
    23ec:	f001 ff65 	bl	42ba <printk>
    23f0:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    23f4:	4620      	mov	r0, r4
    23f6:	b005      	add	sp, #20
    23f8:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    23fa:	4669      	mov	r1, sp
    23fc:	f7ff ffc2 	bl	2384 <region_init>
	return region_allocate_and_init(index,
    2400:	e7f8      	b.n	23f4 <mpu_configure_region+0x3c>
    2402:	bf00      	nop
    2404:	00005e62 	.word	0x00005e62

00002408 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    240c:	4689      	mov	r9, r1
    240e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2410:	4606      	mov	r6, r0
    2412:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    2416:	4d59      	ldr	r5, [pc, #356]	; (257c <mpu_configure_regions_and_partition.constprop.0+0x174>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2418:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    241a:	45c8      	cmp	r8, r9
    241c:	da27      	bge.n	246e <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    241e:	f8d6 a004 	ldr.w	sl, [r6, #4]
    2422:	f1ba 0f00 	cmp.w	sl, #0
    2426:	d045      	beq.n	24b4 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    2428:	f1ba 0f1f 	cmp.w	sl, #31
    242c:	d918      	bls.n	2460 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    242e:	f01a 0f1f 	tst.w	sl, #31
    2432:	d115      	bne.n	2460 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    2434:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    2438:	f01b 0f1f 	tst.w	fp, #31
    243c:	d110      	bne.n	2460 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    243e:	4658      	mov	r0, fp
    2440:	f002 fa1e 	bl	4880 <arm_cmse_mpu_region_get>
    2444:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2446:	eb0a 000b 	add.w	r0, sl, fp
    244a:	3801      	subs	r0, #1
    244c:	f002 fa18 	bl	4880 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2450:	4287      	cmp	r7, r0
    2452:	d010      	beq.n	2476 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    2454:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2458:	463a      	mov	r2, r7
    245a:	2145      	movs	r1, #69	; 0x45
    245c:	4848      	ldr	r0, [pc, #288]	; (2580 <mpu_configure_regions_and_partition.constprop.0+0x178>)
    245e:	e002      	b.n	2466 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    2460:	4642      	mov	r2, r8
    2462:	2145      	movs	r1, #69	; 0x45
    2464:	4847      	ldr	r0, [pc, #284]	; (2584 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2466:	f001 ff28 	bl	42ba <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    246a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    246e:	4620      	mov	r0, r4
    2470:	b005      	add	sp, #20
    2472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    2476:	f117 0f16 	cmn.w	r7, #22
    247a:	d0ed      	beq.n	2458 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    247c:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    247e:	42bb      	cmp	r3, r7
    2480:	dbea      	blt.n	2458 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    2482:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2486:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    248a:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    248e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2492:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2496:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    249a:	e9d6 3200 	ldrd	r3, r2, [r6]
    249e:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    24a0:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    24a2:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    24a6:	d11d      	bne.n	24e4 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    24a8:	45d3      	cmp	fp, sl
    24aa:	d107      	bne.n	24bc <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    24ac:	4631      	mov	r1, r6
    24ae:	b2f8      	uxtb	r0, r7
    24b0:	f7ff ff82 	bl	23b8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    24b4:	f108 0801 	add.w	r8, r8, #1
    24b8:	360c      	adds	r6, #12
    24ba:	e7ae      	b.n	241a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    24bc:	4631      	mov	r1, r6
	MPU->RNR = index;
    24be:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    24c2:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    24c6:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    24ca:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    24ce:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    24d0:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    24d4:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    24d6:	f7ff ff6f 	bl	23b8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    24da:	f110 0f16 	cmn.w	r0, #22
    24de:	d0c4      	beq.n	246a <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    24e0:	1c44      	adds	r4, r0, #1
    24e2:	e7e7      	b.n	24b4 <mpu_configure_regions_and_partition.constprop.0+0xac>
				regions[i].start - 1);
    24e4:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    24e6:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    24e8:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    24ea:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    24ee:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    24f2:	d108      	bne.n	2506 <mpu_configure_regions_and_partition.constprop.0+0xfe>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    24f4:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    24f8:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    24fa:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    24fe:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2500:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    2504:	e7e7      	b.n	24d6 <mpu_configure_regions_and_partition.constprop.0+0xce>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2506:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    250a:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    250e:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2510:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    2514:	4631      	mov	r1, r6
    2516:	f7ff ff4f 	bl	23b8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    251a:	f110 0f16 	cmn.w	r0, #22
    251e:	d0a4      	beq.n	246a <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    2520:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    2524:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    2528:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    252c:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    2530:	f362 0304 	bfi	r3, r2, #0, #5
    2534:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2538:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    253c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2540:	085b      	lsrs	r3, r3, #1
    2542:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    2546:	e9d6 3100 	ldrd	r3, r1, [r6]
    254a:	440b      	add	r3, r1
    254c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    254e:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    2552:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    2554:	445b      	add	r3, fp
    2556:	eba3 030a 	sub.w	r3, r3, sl
    255a:	b2c0      	uxtb	r0, r0
    255c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    2560:	2807      	cmp	r0, #7
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2562:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    2566:	9303      	str	r3, [sp, #12]
    2568:	d903      	bls.n	2572 <mpu_configure_regions_and_partition.constprop.0+0x16a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    256a:	4602      	mov	r2, r0
    256c:	2145      	movs	r1, #69	; 0x45
    256e:	4806      	ldr	r0, [pc, #24]	; (2588 <mpu_configure_regions_and_partition.constprop.0+0x180>)
    2570:	e779      	b.n	2466 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    2572:	4669      	mov	r1, sp
    2574:	f7ff ff06 	bl	2384 <region_init>
    2578:	e7b2      	b.n	24e0 <mpu_configure_regions_and_partition.constprop.0+0xd8>
    257a:	bf00      	nop
    257c:	e000ed00 	.word	0xe000ed00
    2580:	00005eb5 	.word	0x00005eb5
    2584:	00005e8d 	.word	0x00005e8d
    2588:	00005e62 	.word	0x00005e62

0000258c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    258c:	2205      	movs	r2, #5
    258e:	4b04      	ldr	r3, [pc, #16]	; (25a0 <arm_core_mpu_enable+0x14>)
    2590:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2594:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2598:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    259c:	4770      	bx	lr
    259e:	bf00      	nop
    25a0:	e000ed00 	.word	0xe000ed00

000025a4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    25a4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    25a8:	2200      	movs	r2, #0
    25aa:	4b02      	ldr	r3, [pc, #8]	; (25b4 <arm_core_mpu_disable+0x10>)
    25ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    25b0:	4770      	bx	lr
    25b2:	bf00      	nop
    25b4:	e000ed00 	.word	0xe000ed00

000025b8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    25b8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    25ba:	4d0e      	ldr	r5, [pc, #56]	; (25f4 <arm_mpu_init+0x3c>)
    25bc:	682c      	ldr	r4, [r5, #0]
    25be:	2c08      	cmp	r4, #8
    25c0:	d815      	bhi.n	25ee <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    25c2:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    25c4:	f7ff ffee 	bl	25a4 <arm_core_mpu_disable>
	MPU->MAIR0 =
    25c8:	4b0b      	ldr	r3, [pc, #44]	; (25f8 <arm_mpu_init+0x40>)
    25ca:	4a0c      	ldr	r2, [pc, #48]	; (25fc <arm_mpu_init+0x44>)
    25cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    25d0:	4284      	cmp	r4, r0
    25d2:	d105      	bne.n	25e0 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    25d4:	4b0a      	ldr	r3, [pc, #40]	; (2600 <arm_mpu_init+0x48>)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    25d6:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    25d8:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    25da:	f7ff ffd7 	bl	258c <arm_core_mpu_enable>
}
    25de:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    25e0:	6869      	ldr	r1, [r5, #4]
    25e2:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    25e6:	f7ff fecd 	bl	2384 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    25ea:	3001      	adds	r0, #1
    25ec:	e7f0      	b.n	25d0 <arm_mpu_init+0x18>
		return -1;
    25ee:	f04f 30ff 	mov.w	r0, #4294967295
    25f2:	e7f4      	b.n	25de <arm_mpu_init+0x26>
    25f4:	0000532c 	.word	0x0000532c
    25f8:	e000ed00 	.word	0xe000ed00
    25fc:	0044ffaa 	.word	0x0044ffaa
    2600:	200008ac 	.word	0x200008ac

00002604 <arm_core_mpu_configure_static_mpu_regions>:
{
    2604:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2606:	4c03      	ldr	r4, [pc, #12]	; (2614 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    2608:	7822      	ldrb	r2, [r4, #0]
    260a:	f7ff fefd 	bl	2408 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    260e:	7020      	strb	r0, [r4, #0]
}
    2610:	bd10      	pop	{r4, pc}
    2612:	bf00      	nop
    2614:	200008ac 	.word	0x200008ac

00002618 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    2618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    261c:	4d29      	ldr	r5, [pc, #164]	; (26c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    261e:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    2620:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2622:	f04f 0800 	mov.w	r8, #0
    2626:	46ab      	mov	fp, r5
	MPU->RNR = index;
    2628:	4f27      	ldr	r7, [pc, #156]	; (26c8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    262a:	45d0      	cmp	r8, sl
    262c:	da1b      	bge.n	2666 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    262e:	f8d6 9004 	ldr.w	r9, [r6, #4]
    2632:	f1b9 0f00 	cmp.w	r9, #0
    2636:	d03f      	beq.n	26b8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    2638:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    263a:	4608      	mov	r0, r1
    263c:	9101      	str	r1, [sp, #4]
    263e:	f002 f91f 	bl	4880 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2642:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2644:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2646:	eb09 0001 	add.w	r0, r9, r1
    264a:	3801      	subs	r0, #1
    264c:	f002 f918 	bl	4880 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2650:	4284      	cmp	r4, r0
    2652:	f04f 0214 	mov.w	r2, #20
    2656:	4b1d      	ldr	r3, [pc, #116]	; (26cc <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    2658:	d008      	beq.n	266c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    265a:	f06f 0315 	mvn.w	r3, #21
    265e:	fb02 f808 	mul.w	r8, r2, r8
    2662:	f84b 3008 	str.w	r3, [fp, r8]
}
    2666:	b003      	add	sp, #12
    2668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    266c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    2670:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    2672:	d0f8      	beq.n	2666 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    2674:	7819      	ldrb	r1, [r3, #0]
    2676:	42a1      	cmp	r1, r4
    2678:	ddf5      	ble.n	2666 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    267a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    267e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    2682:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    2686:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    268a:	f100 0108 	add.w	r1, r0, #8
    268e:	7b00      	ldrb	r0, [r0, #12]
    2690:	f364 0004 	bfi	r0, r4, #0, #5
    2694:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2696:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    269a:	790c      	ldrb	r4, [r1, #4]
    269c:	0840      	lsrs	r0, r0, #1
    269e:	f360 1447 	bfi	r4, r0, #5, #3
    26a2:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    26a4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    26a8:	f021 011f 	bic.w	r1, r1, #31
    26ac:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    26ae:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    26b2:	f021 011f 	bic.w	r1, r1, #31
    26b6:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    26b8:	f108 0801 	add.w	r8, r8, #1
    26bc:	3514      	adds	r5, #20
    26be:	360c      	adds	r6, #12
    26c0:	e7b3      	b.n	262a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    26c2:	bf00      	nop
    26c4:	20000830 	.word	0x20000830
    26c8:	e000ed00 	.word	0xe000ed00
    26cc:	200008ac 	.word	0x200008ac

000026d0 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    26d0:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    26d2:	4b0c      	ldr	r3, [pc, #48]	; (2704 <tz_nonsecure_state_setup+0x34>)
    26d4:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    26d6:	6803      	ldr	r3, [r0, #0]
    26d8:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    26dc:	6843      	ldr	r3, [r0, #4]
    26de:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    26e2:	7b02      	ldrb	r2, [r0, #12]
    26e4:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    26e8:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    26ec:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    26f0:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    26f2:	bf48      	it	mi
    26f4:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    26f8:	b109      	cbz	r1, 26fe <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    26fa:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    26fe:	f383 8894 	msr	CONTROL_NS, r3
}
    2702:	4770      	bx	lr
    2704:	e002ed00 	.word	0xe002ed00

00002708 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2708:	4a08      	ldr	r2, [pc, #32]	; (272c <tz_nbanked_exception_target_state_set+0x24>)
    270a:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    270c:	b148      	cbz	r0, 2722 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    270e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2712:	041b      	lsls	r3, r3, #16
    2714:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2716:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    271a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    271e:	60d3      	str	r3, [r2, #12]
}
    2720:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2722:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    2724:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2728:	e7f5      	b.n	2716 <tz_nbanked_exception_target_state_set+0xe>
    272a:	bf00      	nop
    272c:	e000ed00 	.word	0xe000ed00

00002730 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2730:	4a08      	ldr	r2, [pc, #32]	; (2754 <tz_nonsecure_exception_prio_config+0x24>)
    2732:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    2734:	b140      	cbz	r0, 2748 <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2736:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    2738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    273c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    2744:	60d3      	str	r3, [r2, #12]
}
    2746:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    2748:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    274c:	041b      	lsls	r3, r3, #16
    274e:	0c1b      	lsrs	r3, r3, #16
    2750:	e7f4      	b.n	273c <tz_nonsecure_exception_prio_config+0xc>
    2752:	bf00      	nop
    2754:	e000ed00 	.word	0xe000ed00

00002758 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2758:	4a08      	ldr	r2, [pc, #32]	; (277c <tz_nonsecure_system_reset_req_block+0x24>)
    275a:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    275c:	b140      	cbz	r0, 2770 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    275e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    2760:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    276c:	60d3      	str	r3, [r2, #12]
}
    276e:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    2770:	f023 0308 	bic.w	r3, r3, #8
    2774:	041b      	lsls	r3, r3, #16
    2776:	0c1b      	lsrs	r3, r3, #16
    2778:	e7f4      	b.n	2764 <tz_nonsecure_system_reset_req_block+0xc>
    277a:	bf00      	nop
    277c:	e000ed00 	.word	0xe000ed00

00002780 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    2780:	4a03      	ldr	r2, [pc, #12]	; (2790 <tz_nonsecure_fpu_access_enable+0x10>)
    2782:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2786:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    278a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    278e:	4770      	bx	lr
    2790:	e000ed00 	.word	0xe000ed00

00002794 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    2794:	4b0a      	ldr	r3, [pc, #40]	; (27c0 <tz_sau_configure+0x2c>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    2796:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
    279a:	b120      	cbz	r0, 27a6 <tz_sau_configure+0x12>
    279c:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    27a0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}
	}
}
    27a4:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    27a6:	f022 0201 	bic.w	r2, r2, #1
    27aa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    27ae:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		if (allns) {
    27b2:	b111      	cbz	r1, 27ba <tz_sau_configure+0x26>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    27b4:	f042 0202 	orr.w	r2, r2, #2
    27b8:	e7f2      	b.n	27a0 <tz_sau_configure+0xc>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    27ba:	f022 0202 	bic.w	r2, r2, #2
    27be:	e7ef      	b.n	27a0 <tz_sau_configure+0xc>
    27c0:	e000ed00 	.word	0xe000ed00

000027c4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    27c4:	4b01      	ldr	r3, [pc, #4]	; (27cc <__stdout_hook_install+0x8>)
    27c6:	6018      	str	r0, [r3, #0]
}
    27c8:	4770      	bx	lr
    27ca:	bf00      	nop
    27cc:	20000024 	.word	0x20000024

000027d0 <nrf_gpio_pin_port_decode>:
    return (mask & (1UL << pin_number)) ? true : false;
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    27d0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    27d2:	f003 021f 	and.w	r2, r3, #31
    27d6:	6002      	str	r2, [r0, #0]
}
    27d8:	4a03      	ldr	r2, [pc, #12]	; (27e8 <nrf_gpio_pin_port_decode+0x18>)
    27da:	4804      	ldr	r0, [pc, #16]	; (27ec <nrf_gpio_pin_port_decode+0x1c>)

    return pin_number >> 5;
    27dc:	095b      	lsrs	r3, r3, #5
}
    27de:	2b01      	cmp	r3, #1
    27e0:	bf08      	it	eq
    27e2:	4610      	moveq	r0, r2
    27e4:	4770      	bx	lr
    27e6:	bf00      	nop
    27e8:	50842800 	.word	0x50842800
    27ec:	50842500 	.word	0x50842500

000027f0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    27f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    27f2:	794b      	ldrb	r3, [r1, #5]
    27f4:	2b01      	cmp	r3, #1
    27f6:	d02b      	beq.n	2850 <uarte_nrfx_configure+0x60>
    27f8:	2b03      	cmp	r3, #3
    27fa:	d126      	bne.n	284a <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    27fc:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    27fe:	798b      	ldrb	r3, [r1, #6]
    2800:	2b03      	cmp	r3, #3
    2802:	d122      	bne.n	284a <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2804:	79cd      	ldrb	r5, [r1, #7]
    2806:	b125      	cbz	r5, 2812 <uarte_nrfx_configure+0x22>
    2808:	2d01      	cmp	r5, #1
    280a:	d11e      	bne.n	284a <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    280c:	6843      	ldr	r3, [r0, #4]
    280e:	791b      	ldrb	r3, [r3, #4]
    2810:	b1db      	cbz	r3, 284a <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2812:	790a      	ldrb	r2, [r1, #4]
    2814:	2a01      	cmp	r2, #1
    2816:	d01d      	beq.n	2854 <uarte_nrfx_configure+0x64>
    2818:	2a02      	cmp	r2, #2
    281a:	d01f      	beq.n	285c <uarte_nrfx_configure+0x6c>
    281c:	b9aa      	cbnz	r2, 284a <uarte_nrfx_configure+0x5a>
    281e:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2820:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2822:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    2824:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2828:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    282a:	d06e      	beq.n	290a <uarte_nrfx_configure+0x11a>
    282c:	d833      	bhi.n	2896 <uarte_nrfx_configure+0xa6>
    282e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2832:	d06d      	beq.n	2910 <uarte_nrfx_configure+0x120>
    2834:	d81c      	bhi.n	2870 <uarte_nrfx_configure+0x80>
    2836:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    283a:	d06b      	beq.n	2914 <uarte_nrfx_configure+0x124>
    283c:	d810      	bhi.n	2860 <uarte_nrfx_configure+0x70>
    283e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2842:	d06a      	beq.n	291a <uarte_nrfx_configure+0x12a>
    2844:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2848:	d06a      	beq.n	2920 <uarte_nrfx_configure+0x130>
    284a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    284e:	e05b      	b.n	2908 <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
    2850:	2700      	movs	r7, #0
    2852:	e7d4      	b.n	27fe <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    2854:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2858:	220e      	movs	r2, #14
    285a:	e7e1      	b.n	2820 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    285c:	2400      	movs	r4, #0
    285e:	e7fb      	b.n	2858 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
    2860:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2864:	d05f      	beq.n	2926 <uarte_nrfx_configure+0x136>
    2866:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    286a:	d1ee      	bne.n	284a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    286c:	4b38      	ldr	r3, [pc, #224]	; (2950 <uarte_nrfx_configure+0x160>)
    286e:	e03e      	b.n	28ee <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    2870:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2874:	d05a      	beq.n	292c <uarte_nrfx_configure+0x13c>
    2876:	d807      	bhi.n	2888 <uarte_nrfx_configure+0x98>
    2878:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    287c:	d058      	beq.n	2930 <uarte_nrfx_configure+0x140>
    287e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2882:	d1e2      	bne.n	284a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2884:	4b33      	ldr	r3, [pc, #204]	; (2954 <uarte_nrfx_configure+0x164>)
    2886:	e032      	b.n	28ee <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    2888:	f647 2c12 	movw	ip, #31250	; 0x7a12
    288c:	4563      	cmp	r3, ip
    288e:	d1dc      	bne.n	284a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2890:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2894:	e02b      	b.n	28ee <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    2896:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    289a:	d04b      	beq.n	2934 <uarte_nrfx_configure+0x144>
    289c:	d813      	bhi.n	28c6 <uarte_nrfx_configure+0xd6>
    289e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    28a2:	d04a      	beq.n	293a <uarte_nrfx_configure+0x14a>
    28a4:	d809      	bhi.n	28ba <uarte_nrfx_configure+0xca>
    28a6:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    28aa:	4563      	cmp	r3, ip
    28ac:	d047      	beq.n	293e <uarte_nrfx_configure+0x14e>
    28ae:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    28b2:	d1ca      	bne.n	284a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    28b4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    28b8:	e019      	b.n	28ee <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    28ba:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    28be:	d1c4      	bne.n	284a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    28c0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    28c4:	e013      	b.n	28ee <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    28c6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    28ca:	d03b      	beq.n	2944 <uarte_nrfx_configure+0x154>
    28cc:	d809      	bhi.n	28e2 <uarte_nrfx_configure+0xf2>
    28ce:	f8df c088 	ldr.w	ip, [pc, #136]	; 2958 <uarte_nrfx_configure+0x168>
    28d2:	4563      	cmp	r3, ip
    28d4:	d039      	beq.n	294a <uarte_nrfx_configure+0x15a>
    28d6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    28da:	d1b6      	bne.n	284a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    28dc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    28e0:	e005      	b.n	28ee <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    28e2:	f8df c078 	ldr.w	ip, [pc, #120]	; 295c <uarte_nrfx_configure+0x16c>
    28e6:	4563      	cmp	r3, ip
    28e8:	d1af      	bne.n	284a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    28ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    28ee:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    28f2:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    28f4:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    28f6:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    28f8:	4322      	orrs	r2, r4
    28fa:	3304      	adds	r3, #4
    28fc:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    28fe:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    2902:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2906:	2000      	movs	r0, #0
}
    2908:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    290a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    290e:	e7ee      	b.n	28ee <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2910:	4b13      	ldr	r3, [pc, #76]	; (2960 <uarte_nrfx_configure+0x170>)
    2912:	e7ec      	b.n	28ee <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2914:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2918:	e7e9      	b.n	28ee <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
    291a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    291e:	e7e6      	b.n	28ee <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    2920:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2924:	e7e3      	b.n	28ee <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2926:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    292a:	e7e0      	b.n	28ee <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    292c:	4b0d      	ldr	r3, [pc, #52]	; (2964 <uarte_nrfx_configure+0x174>)
    292e:	e7de      	b.n	28ee <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2930:	4b0d      	ldr	r3, [pc, #52]	; (2968 <uarte_nrfx_configure+0x178>)
    2932:	e7dc      	b.n	28ee <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2934:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2938:	e7d9      	b.n	28ee <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    293a:	4b0c      	ldr	r3, [pc, #48]	; (296c <uarte_nrfx_configure+0x17c>)
    293c:	e7d7      	b.n	28ee <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    293e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2942:	e7d4      	b.n	28ee <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2944:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2948:	e7d1      	b.n	28ee <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    294a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    294e:	e7ce      	b.n	28ee <uarte_nrfx_configure+0xfe>
    2950:	0013b000 	.word	0x0013b000
    2954:	004ea000 	.word	0x004ea000
    2958:	0003d090 	.word	0x0003d090
    295c:	000f4240 	.word	0x000f4240
    2960:	00275000 	.word	0x00275000
    2964:	0075c000 	.word	0x0075c000
    2968:	003af000 	.word	0x003af000
    296c:	013a9000 	.word	0x013a9000

00002970 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2974:	4606      	mov	r6, r0
    2976:	4688      	mov	r8, r1
	return dev->data;
    2978:	68c7      	ldr	r7, [r0, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    297a:	f002 f9ff 	bl	4d7c <k_is_in_isr>
    297e:	b9b8      	cbnz	r0, 29b0 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    2980:	4b28      	ldr	r3, [pc, #160]	; (2a24 <uarte_nrfx_poll_out+0xb4>)
    2982:	781b      	ldrb	r3, [r3, #0]
    2984:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    2988:	6872      	ldr	r2, [r6, #4]
    298a:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    298c:	b193      	cbz	r3, 29b4 <uarte_nrfx_poll_out+0x44>
    298e:	f04f 0320 	mov.w	r3, #32
    2992:	f3ef 8411 	mrs	r4, BASEPRI
    2996:	f383 8811 	msr	BASEPRI, r3
    299a:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    299e:	6870      	ldr	r0, [r6, #4]
    29a0:	f002 f81c 	bl	49dc <is_tx_ready.isra.0>
    29a4:	bb38      	cbnz	r0, 29f6 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    29a6:	f384 8811 	msr	BASEPRI, r4
    29aa:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    29ae:	e7ee      	b.n	298e <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    29b0:	2301      	movs	r3, #1
    29b2:	e7e9      	b.n	2988 <uarte_nrfx_poll_out+0x18>
    29b4:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    29b6:	6870      	ldr	r0, [r6, #4]
    29b8:	f002 f810 	bl	49dc <is_tx_ready.isra.0>
    29bc:	b970      	cbnz	r0, 29dc <uarte_nrfx_poll_out+0x6c>
    29be:	2001      	movs	r0, #1
    29c0:	f002 f845 	bl	4a4e <nrfx_busy_wait>
    29c4:	3c01      	subs	r4, #1
    29c6:	d1f6      	bne.n	29b6 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    29c8:	2100      	movs	r1, #0
    29ca:	2021      	movs	r0, #33	; 0x21
    29cc:	f001 f880 	bl	3ad0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    29d0:	e7f0      	b.n	29b4 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    29d2:	f384 8811 	msr	BASEPRI, r4
    29d6:	f3bf 8f6f 	isb	sy
}
    29da:	e7f5      	b.n	29c8 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    29dc:	f04f 0320 	mov.w	r3, #32
    29e0:	f3ef 8411 	mrs	r4, BASEPRI
    29e4:	f383 8811 	msr	BASEPRI, r3
    29e8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    29ec:	6870      	ldr	r0, [r6, #4]
    29ee:	f001 fff5 	bl	49dc <is_tx_ready.isra.0>
    29f2:	2800      	cmp	r0, #0
    29f4:	d0ed      	beq.n	29d2 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    29f6:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    29f8:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    29fa:	f807 8f10 	strb.w	r8, [r7, #16]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    29fe:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2a02:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2a06:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    2a0a:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    2a0e:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    2a12:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2a16:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    2a18:	f384 8811 	msr	BASEPRI, r4
    2a1c:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    2a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a24:	200008ad 	.word	0x200008ad

00002a28 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    2a28:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    2a2c:	4605      	mov	r5, r0
    2a2e:	2200      	movs	r2, #0
    2a30:	2101      	movs	r1, #1
    2a32:	2008      	movs	r0, #8
    2a34:	f7ff f8b0 	bl	1b98 <z_arm_irq_priority_set>
    2a38:	2008      	movs	r0, #8
    2a3a:	f7ff f88f 	bl	1b5c <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2a3e:	2100      	movs	r1, #0
    2a40:	2714      	movs	r7, #20
	return config->uarte_regs;
    2a42:	686b      	ldr	r3, [r5, #4]
	return dev->data;
    2a44:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
    2a46:	681c      	ldr	r4, [r3, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2a48:	f04f 0801 	mov.w	r8, #1
    2a4c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2a50:	a801      	add	r0, sp, #4
	data->dev = dev;
    2a52:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
    2a54:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2a56:	f7ff febb 	bl	27d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2a5a:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2a5c:	f04f 0903 	mov.w	r9, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2a60:	fa08 f303 	lsl.w	r3, r8, r3
    p_reg->OUTSET = set_mask;
    2a64:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2a66:	a801      	add	r0, sp, #4
    2a68:	9701      	str	r7, [sp, #4]
    2a6a:	f7ff feb1 	bl	27d0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2a6e:	f04f 0a16 	mov.w	sl, #22
    2a72:	9b01      	ldr	r3, [sp, #4]
    2a74:	3380      	adds	r3, #128	; 0x80
    2a76:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2a7a:	a801      	add	r0, sp, #4
    2a7c:	f8cd a004 	str.w	sl, [sp, #4]
    2a80:	f7ff fea6 	bl	27d0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2a84:	9b01      	ldr	r3, [sp, #4]
    2a86:	3380      	adds	r3, #128	; 0x80
    2a88:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
    2a8c:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    2a90:	2715      	movs	r7, #21
    2a92:	f8c4 a514 	str.w	sl, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2a96:	a801      	add	r0, sp, #4
    2a98:	9701      	str	r7, [sp, #4]
    2a9a:	f7ff fe99 	bl	27d0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2a9e:	9b01      	ldr	r3, [sp, #4]
    2aa0:	3380      	adds	r3, #128	; 0x80
    2aa2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
    2aa6:	2113      	movs	r1, #19
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2aa8:	a801      	add	r0, sp, #4
    2aaa:	9101      	str	r1, [sp, #4]
    2aac:	f7ff fe90 	bl	27d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2ab0:	9b01      	ldr	r3, [sp, #4]
    2ab2:	fa08 f303 	lsl.w	r3, r8, r3
    p_reg->OUTSET = set_mask;
    2ab6:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2ab8:	a801      	add	r0, sp, #4
    2aba:	9101      	str	r1, [sp, #4]
    2abc:	f7ff fe88 	bl	27d0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2ac0:	9b01      	ldr	r3, [sp, #4]
    2ac2:	3380      	adds	r3, #128	; 0x80
    2ac4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    2ac8:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2acc:	68e9      	ldr	r1, [r5, #12]
    p_reg->PSEL.CTS = pselcts;
    2ace:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
    2ad2:	4628      	mov	r0, r5
    2ad4:	3104      	adds	r1, #4
    2ad6:	f7ff fe8b 	bl	27f0 <uarte_nrfx_configure>
	if (err) {
    2ada:	4607      	mov	r7, r0
    2adc:	b978      	cbnz	r0, 2afe <uarte_0_init+0xd6>
	if (get_dev_config(dev)->ppi_endtx) {
    2ade:	686b      	ldr	r3, [r5, #4]
    2ae0:	799b      	ldrb	r3, [r3, #6]
    2ae2:	b1e3      	cbz	r3, 2b1e <uarte_0_init+0xf6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2ae4:	f106 0012 	add.w	r0, r6, #18
    2ae8:	f000 f9b2 	bl	2e50 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2aec:	4b1c      	ldr	r3, [pc, #112]	; (2b60 <uarte_0_init+0x138>)
    2aee:	4298      	cmp	r0, r3
    2af0:	d009      	beq.n	2b06 <uarte_0_init+0xde>
		LOG_ERR("Failed to allocate PPI Channel");
    2af2:	2145      	movs	r1, #69	; 0x45
    2af4:	481b      	ldr	r0, [pc, #108]	; (2b64 <uarte_0_init+0x13c>)
    2af6:	f001 fbe0 	bl	42ba <printk>
		return -EIO;
    2afa:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    2afe:	4638      	mov	r0, r7
    2b00:	b002      	add	sp, #8
    2b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2b06:	7cb3      	ldrb	r3, [r6, #18]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2b08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    2b0c:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2b10:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    2b14:	4a14      	ldr	r2, [pc, #80]	; (2b68 <uarte_0_init+0x140>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2b16:	fa08 f303 	lsl.w	r3, r8, r3
    2b1a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2b1e:	2308      	movs	r3, #8
    2b20:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b24:	2300      	movs	r3, #0
    2b26:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2b2a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2b2e:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2b32:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2b36:	2301      	movs	r3, #1
    2b38:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b3c:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
    2b3e:	686b      	ldr	r3, [r5, #4]
    2b40:	799b      	ldrb	r3, [r3, #6]
    2b42:	b91b      	cbnz	r3, 2b4c <uarte_0_init+0x124>
    p_reg->INTENSET = mask;
    2b44:	f44f 7380 	mov.w	r3, #256	; 0x100
    2b48:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    2b4c:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    2b4e:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2b50:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2b54:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2b58:	2301      	movs	r3, #1
    2b5a:	60a3      	str	r3, [r4, #8]
    2b5c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    2b5e:	e7ce      	b.n	2afe <uarte_0_init+0xd6>
    2b60:	0bad0000 	.word	0x0bad0000
    2b64:	00005eec 	.word	0x00005eec
    2b68:	50017000 	.word	0x50017000

00002b6c <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    2b6c:	4803      	ldr	r0, [pc, #12]	; (2b7c <k_sys_fatal_error_handler+0x10>)
    2b6e:	2145      	movs	r1, #69	; 0x45
{
    2b70:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
    2b72:	f001 fba2 	bl	42ba <printk>
	sys_arch_reboot(0);
    2b76:	2000      	movs	r0, #0
    2b78:	f7ff fb72 	bl	2260 <sys_arch_reboot>

	CODE_UNREACHABLE;
    2b7c:	00005f20 	.word	0x00005f20

00002b80 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    2b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2b84:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    2b86:	4c21      	ldr	r4, [pc, #132]	; (2c0c <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    2b88:	4e21      	ldr	r6, [pc, #132]	; (2c10 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2b8a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    2b8e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2c14 <check_ext_api_requests+0x94>
{
    2b92:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2b94:	45a8      	cmp	r8, r5
    2b96:	d803      	bhi.n	2ba0 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    2b98:	2000      	movs	r0, #0
    2b9a:	b005      	add	sp, #20
    2b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    2ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2ba2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2ba6:	681f      	ldr	r7, [r3, #0]
    2ba8:	ab01      	add	r3, sp, #4
    2baa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    2bae:	220c      	movs	r2, #12
    2bb0:	4619      	mov	r1, r3
    2bb2:	4638      	mov	r0, r7
    2bb4:	f001 fe8e 	bl	48d4 <memcmp>
    2bb8:	b990      	cbnz	r0, 2be0 <check_ext_api_requests+0x60>
    2bba:	b18f      	cbz	r7, 2be0 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    2bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    2bbe:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    2bc0:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    2bc2:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    2bc4:	4291      	cmp	r1, r2
    2bc6:	d10b      	bne.n	2be0 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    2bc8:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    2bca:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    2bcc:	4291      	cmp	r1, r2
    2bce:	d807      	bhi.n	2be0 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    2bd0:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    2bd2:	4291      	cmp	r1, r2
    2bd4:	d904      	bls.n	2be0 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    2bd6:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    2bd8:	695b      	ldr	r3, [r3, #20]
    2bda:	ea32 0303 	bics.w	r3, r2, r3
    2bde:	d00a      	beq.n	2bf6 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    2be0:	6a27      	ldr	r7, [r4, #32]
    2be2:	b167      	cbz	r7, 2bfe <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    2be4:	480c      	ldr	r0, [pc, #48]	; (2c18 <check_ext_api_requests+0x98>)
    2be6:	f001 fb68 	bl	42ba <printk>
			k_panic();
    2bea:	4040      	eors	r0, r0
    2bec:	f380 8811 	msr	BASEPRI, r0
    2bf0:	f04f 0004 	mov.w	r0, #4
    2bf4:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    2bf6:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2bf8:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    2bfa:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2bfc:	e7ca      	b.n	2b94 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    2bfe:	4648      	mov	r0, r9
    2c00:	f001 fb5b 	bl	42ba <printk>
			*ext_api_req->ext_api = NULL;
    2c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2c06:	601f      	str	r7, [r3, #0]
    2c08:	e7f5      	b.n	2bf6 <check_ext_api_requests+0x76>
    2c0a:	bf00      	nop
    2c0c:	0000023c 	.word	0x0000023c
    2c10:	000050fc 	.word	0x000050fc
    2c14:	00005f6b 	.word	0x00005f6b
    2c18:	00005f42 	.word	0x00005f42

00002c1c <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    2c1c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2c20:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2c24:	2a07      	cmp	r2, #7
    2c26:	d107      	bne.n	2c38 <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    2c28:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    2c2c:	3b02      	subs	r3, #2
    2c2e:	2b03      	cmp	r3, #3
    2c30:	d802      	bhi.n	2c38 <nrf53_errata_42+0x1c>
    2c32:	4a02      	ldr	r2, [pc, #8]	; (2c3c <nrf53_errata_42+0x20>)
    2c34:	5cd0      	ldrb	r0, [r2, r3]
    2c36:	4770      	bx	lr
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    2c38:	2000      	movs	r0, #0
    #endif
}
    2c3a:	4770      	bx	lr
    2c3c:	00005fa9 	.word	0x00005fa9

00002c40 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    2c40:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c44:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    2c48:	4b03      	ldr	r3, [pc, #12]	; (2c58 <SystemCoreClockUpdate+0x18>)
    2c4a:	f002 0203 	and.w	r2, r2, #3
    2c4e:	40d3      	lsrs	r3, r2
    2c50:	4a02      	ldr	r2, [pc, #8]	; (2c5c <SystemCoreClockUpdate+0x1c>)
    2c52:	6013      	str	r3, [r2, #0]
#endif
}
    2c54:	4770      	bx	lr
    2c56:	bf00      	nop
    2c58:	07a12000 	.word	0x07a12000
    2c5c:	2000003c 	.word	0x2000003c

00002c60 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    2c60:	4a40      	ldr	r2, [pc, #256]	; (2d64 <SystemInit+0x104>)
{
    2c62:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    2c64:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    2c68:	f043 0302 	orr.w	r3, r3, #2
    2c6c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    2c70:	f7ff ffd4 	bl	2c1c <nrf53_errata_42>
    2c74:	b158      	cbz	r0, 2c8e <SystemInit+0x2e>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    2c76:	4b3c      	ldr	r3, [pc, #240]	; (2d68 <SystemInit+0x108>)
    2c78:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    2c7c:	b93a      	cbnz	r2, 2c8e <SystemInit+0x2e>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    2c7e:	210d      	movs	r1, #13
    2c80:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    2c84:	2101      	movs	r1, #1
    2c86:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    2c8a:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    2c8e:	2200      	movs	r2, #0
    2c90:	00d3      	lsls	r3, r2, #3
    2c92:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2c96:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    2c9a:	3101      	adds	r1, #1
    2c9c:	d007      	beq.n	2cae <SystemInit+0x4e>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2c9e:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2ca2:	3201      	adds	r2, #1
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2ca4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2ca8:	2a20      	cmp	r2, #32
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2caa:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2cac:	d1f0      	bne.n	2c90 <SystemInit+0x30>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    2cae:	f7ff ffb5 	bl	2c1c <nrf53_errata_42>
    2cb2:	2800      	cmp	r0, #0
    2cb4:	d14d      	bne.n	2d52 <SystemInit+0xf2>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    2cb6:	f7ff ffb1 	bl	2c1c <nrf53_errata_42>
    2cba:	b140      	cbz	r0, 2cce <SystemInit+0x6e>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    2cbc:	4b2b      	ldr	r3, [pc, #172]	; (2d6c <SystemInit+0x10c>)
    2cbe:	4a2c      	ldr	r2, [pc, #176]	; (2d70 <SystemInit+0x110>)
    2cc0:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    2cc4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cc8:	2201      	movs	r2, #1
    2cca:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    2cce:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2cd2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    2cd6:	2b07      	cmp	r3, #7

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    2cd8:	bf02      	ittt	eq
    2cda:	2200      	moveq	r2, #0
    2cdc:	4b25      	ldreq	r3, [pc, #148]	; (2d74 <SystemInit+0x114>)
    2cde:	f8c3 254c 	streq.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    2ce2:	f7ff ff9b 	bl	2c1c <nrf53_errata_42>
    2ce6:	b150      	cbz	r0, 2cfe <SystemInit+0x9e>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    2ce8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cec:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2cf0:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    2cf2:	bf42      	ittt	mi
    2cf4:	2200      	movmi	r2, #0
    2cf6:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    2cfa:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    2cfe:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
                if (var1 == 0x07)
    2d02:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    2d06:	2b07      	cmp	r3, #7
    2d08:	d109      	bne.n	2d1e <SystemInit+0xbe>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    2d0a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d0e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2d12:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    2d14:	bf44      	itt	mi
    2d16:	f06f 0201 	mvnmi.w	r2, #1
    2d1a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    2d1e:	f7ff ff7d 	bl	2c1c <nrf53_errata_42>
    2d22:	b118      	cbz	r0, 2d2c <SystemInit+0xcc>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    2d24:	2265      	movs	r2, #101	; 0x65
    2d26:	4b10      	ldr	r3, [pc, #64]	; (2d68 <SystemInit+0x108>)
    2d28:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    2d2c:	4a0d      	ldr	r2, [pc, #52]	; (2d64 <SystemInit+0x104>)
    2d2e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2d32:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2d36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    2d3a:	4a0f      	ldr	r2, [pc, #60]	; (2d78 <SystemInit+0x118>)
    2d3c:	4b0f      	ldr	r3, [pc, #60]	; (2d7c <SystemInit+0x11c>)
    2d3e:	6811      	ldr	r1, [r2, #0]
    2d40:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    2d44:	69d2      	ldr	r2, [r2, #28]
    2d46:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    2d4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    2d4e:	f7ff bf77 	b.w	2c40 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    2d52:	2229      	movs	r2, #41	; 0x29
    2d54:	4b04      	ldr	r3, [pc, #16]	; (2d68 <SystemInit+0x108>)
    2d56:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    2d5a:	2203      	movs	r2, #3
    2d5c:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    2d60:	e7a9      	b.n	2cb6 <SystemInit+0x56>
    2d62:	bf00      	nop
    2d64:	e000ed00 	.word	0xe000ed00
    2d68:	50004000 	.word	0x50004000
    2d6c:	50039000 	.word	0x50039000
    2d70:	beef0044 	.word	0xbeef0044
    2d74:	50032000 	.word	0x50032000
    2d78:	00ff8000 	.word	0x00ff8000
    2d7c:	50006000 	.word	0x50006000

00002d80 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2d80:	4b04      	ldr	r3, [pc, #16]	; (2d94 <nrfx_clock_init+0x14>)
    2d82:	791a      	ldrb	r2, [r3, #4]
    2d84:	b922      	cbnz	r2, 2d90 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2d86:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2d88:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2d8a:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2d8c:	4802      	ldr	r0, [pc, #8]	; (2d98 <nrfx_clock_init+0x18>)
    2d8e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2d90:	4802      	ldr	r0, [pc, #8]	; (2d9c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2d92:	4770      	bx	lr
    2d94:	20000844 	.word	0x20000844
    2d98:	0bad0000 	.word	0x0bad0000
    2d9c:	0bad000c 	.word	0x0bad000c

00002da0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2da0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2da4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2da8:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2daa:	b152      	cbz	r2, 2dc2 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2dac:	2000      	movs	r0, #0
    2dae:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    2db2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2db6:	2201      	movs	r2, #1
    2db8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2dbc:	4b23      	ldr	r3, [pc, #140]	; (2e4c <nrfx_power_clock_irq_handler+0xac>)
    2dbe:	681b      	ldr	r3, [r3, #0]
    2dc0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2dc2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2dc6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2dca:	b18a      	cbz	r2, 2df0 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2dcc:	2200      	movs	r2, #0
    2dce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2dd2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2dd6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2dda:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2dde:	f002 0203 	and.w	r2, r2, #3
    2de2:	2a01      	cmp	r2, #1
    2de4:	f04f 0102 	mov.w	r1, #2
    2de8:	d128      	bne.n	2e3c <nrfx_power_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2dea:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dee:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2df0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2df4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    2df8:	b162      	cbz	r2, 2e14 <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2dfa:	2200      	movs	r2, #0
    2dfc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2e00:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    2e04:	f44f 7280 	mov.w	r2, #256	; 0x100
    2e08:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    2e0c:	4b0f      	ldr	r3, [pc, #60]	; (2e4c <nrfx_power_clock_irq_handler+0xac>)
    2e0e:	2004      	movs	r0, #4
    2e10:	681b      	ldr	r3, [r3, #0]
    2e12:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e14:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e18:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    2e1c:	b1aa      	cbz	r2, 2e4a <nrfx_power_clock_irq_handler+0xaa>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e22:	2200      	movs	r2, #0
    2e24:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    2e28:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    2e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
    2e30:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    2e34:	4b05      	ldr	r3, [pc, #20]	; (2e4c <nrfx_power_clock_irq_handler+0xac>)
    2e36:	2005      	movs	r0, #5
    2e38:	681b      	ldr	r3, [r3, #0]
    2e3a:	4718      	bx	r3
    2e3c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2e40:	4b02      	ldr	r3, [pc, #8]	; (2e4c <nrfx_power_clock_irq_handler+0xac>)
    2e42:	2001      	movs	r0, #1
    2e44:	681b      	ldr	r3, [r3, #0]
    2e46:	4798      	blx	r3
    2e48:	e7d2      	b.n	2df0 <nrfx_power_clock_irq_handler+0x50>
}
    2e4a:	bd10      	pop	{r4, pc}
    2e4c:	20000844 	.word	0x20000844

00002e50 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    2e50:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    2e52:	4c0a      	ldr	r4, [pc, #40]	; (2e7c <nrfx_dppi_channel_alloc+0x2c>)
    2e54:	6821      	ldr	r1, [r4, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
    2e56:	43ce      	mvns	r6, r1
    2e58:	d00e      	beq.n	2e78 <nrfx_dppi_channel_alloc+0x28>
    2e5a:	2300      	movs	r3, #0
    2e5c:	b2da      	uxtb	r2, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
    2e5e:	fa26 f502 	lsr.w	r5, r6, r2
    2e62:	07ed      	lsls	r5, r5, #31
    2e64:	f103 0301 	add.w	r3, r3, #1
    2e68:	d5f8      	bpl.n	2e5c <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
    2e6a:	2301      	movs	r3, #1
    2e6c:	4093      	lsls	r3, r2
    2e6e:	430b      	orrs	r3, r1
    *p_channel = channel;
    2e70:	7002      	strb	r2, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
    2e72:	4803      	ldr	r0, [pc, #12]	; (2e80 <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
    2e74:	6023      	str	r3, [r4, #0]
}
    2e76:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
    2e78:	4802      	ldr	r0, [pc, #8]	; (2e84 <nrfx_dppi_channel_alloc+0x34>)
    2e7a:	e7fc      	b.n	2e76 <nrfx_dppi_channel_alloc+0x26>
    2e7c:	2000084c 	.word	0x2000084c
    2e80:	0bad0000 	.word	0x0bad0000
    2e84:	0bad0002 	.word	0x0bad0002

00002e88 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    2e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2e8a:	4b10      	ldr	r3, [pc, #64]	; (2ecc <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    2e8c:	4f10      	ldr	r7, [pc, #64]	; (2ed0 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2e8e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    2e92:	3001      	adds	r0, #1
    2e94:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    2e98:	42ae      	cmp	r6, r5
    2e9a:	d800      	bhi.n	2e9e <z_sys_init_run_level+0x16>
		}
	}
}
    2e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    2e9e:	e9d5 3400 	ldrd	r3, r4, [r5]
    2ea2:	4620      	mov	r0, r4
    2ea4:	4798      	blx	r3
    2ea6:	b170      	cbz	r0, 2ec6 <z_sys_init_run_level+0x3e>
    2ea8:	b16c      	cbz	r4, 2ec6 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
    2eaa:	2301      	movs	r3, #1
				(dev - __device_start));
    2eac:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    2eae:	4a09      	ldr	r2, [pc, #36]	; (2ed4 <z_sys_init_run_level+0x4c>)
    2eb0:	1124      	asrs	r4, r4, #4
    2eb2:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    2eb4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    2eb8:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
    2ebc:	fa03 f404 	lsl.w	r4, r3, r4
    2ec0:	4304      	orrs	r4, r0
    2ec2:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2ec6:	3508      	adds	r5, #8
    2ec8:	e7e6      	b.n	2e98 <z_sys_init_run_level+0x10>
    2eca:	bf00      	nop
    2ecc:	00005370 	.word	0x00005370
    2ed0:	200000a8 	.word	0x200000a8
    2ed4:	200000e8 	.word	0x200000e8

00002ed8 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    2ed8:	4b08      	ldr	r3, [pc, #32]	; (2efc <z_device_ready+0x24>)
    2eda:	1ac0      	subs	r0, r0, r3
    2edc:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    2ede:	4b08      	ldr	r3, [pc, #32]	; (2f00 <z_device_ready+0x28>)
    2ee0:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    2ee2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    2ee6:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    2ee8:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
    2eec:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    2ef0:	4210      	tst	r0, r2
}
    2ef2:	bf0c      	ite	eq
    2ef4:	4618      	moveq	r0, r3
    2ef6:	2000      	movne	r0, #0
    2ef8:	4770      	bx	lr
    2efa:	bf00      	nop
    2efc:	200000a8 	.word	0x200000a8
    2f00:	200000e8 	.word	0x200000e8

00002f04 <z_impl_device_get_binding>:
{
    2f04:	b570      	push	{r4, r5, r6, lr}
    2f06:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
    2f08:	4c0f      	ldr	r4, [pc, #60]	; (2f48 <z_impl_device_get_binding+0x44>)
    2f0a:	4e10      	ldr	r6, [pc, #64]	; (2f4c <z_impl_device_get_binding+0x48>)
    2f0c:	42b4      	cmp	r4, r6
    2f0e:	d104      	bne.n	2f1a <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
    2f10:	4c0d      	ldr	r4, [pc, #52]	; (2f48 <z_impl_device_get_binding+0x44>)
    2f12:	42b4      	cmp	r4, r6
    2f14:	d10a      	bne.n	2f2c <z_impl_device_get_binding+0x28>
	return NULL;
    2f16:	2400      	movs	r4, #0
    2f18:	e014      	b.n	2f44 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
    2f1a:	4620      	mov	r0, r4
    2f1c:	f7ff ffdc 	bl	2ed8 <z_device_ready>
    2f20:	b110      	cbz	r0, 2f28 <z_impl_device_get_binding+0x24>
    2f22:	6823      	ldr	r3, [r4, #0]
    2f24:	42ab      	cmp	r3, r5
    2f26:	d00d      	beq.n	2f44 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    2f28:	3410      	adds	r4, #16
    2f2a:	e7ef      	b.n	2f0c <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2f2c:	4620      	mov	r0, r4
    2f2e:	f7ff ffd3 	bl	2ed8 <z_device_ready>
    2f32:	b908      	cbnz	r0, 2f38 <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
    2f34:	3410      	adds	r4, #16
    2f36:	e7ec      	b.n	2f12 <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2f38:	4628      	mov	r0, r5
    2f3a:	6821      	ldr	r1, [r4, #0]
    2f3c:	f001 fcbe 	bl	48bc <strcmp>
    2f40:	2800      	cmp	r0, #0
    2f42:	d1f7      	bne.n	2f34 <z_impl_device_get_binding+0x30>
}
    2f44:	4620      	mov	r0, r4
    2f46:	bd70      	pop	{r4, r5, r6, pc}
    2f48:	200000a8 	.word	0x200000a8
    2f4c:	200000e8 	.word	0x200000e8

00002f50 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2f52:	4605      	mov	r5, r0
    2f54:	460e      	mov	r6, r1
	__asm__ volatile(
    2f56:	f04f 0320 	mov.w	r3, #32
    2f5a:	f3ef 8711 	mrs	r7, BASEPRI
    2f5e:	f383 8811 	msr	BASEPRI, r3
    2f62:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    2f66:	f000 fdcd 	bl	3b04 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    2f6a:	2200      	movs	r2, #0
    2f6c:	2d04      	cmp	r5, #4
    2f6e:	bf98      	it	ls
    2f70:	4b18      	ldrls	r3, [pc, #96]	; (2fd4 <z_fatal_error+0x84>)
    2f72:	4604      	mov	r4, r0
	switch (reason) {
    2f74:	bf94      	ite	ls
    2f76:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    2f7a:	4b17      	ldrhi	r3, [pc, #92]	; (2fd8 <z_fatal_error+0x88>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    2f7c:	9200      	str	r2, [sp, #0]
    2f7e:	2145      	movs	r1, #69	; 0x45
    2f80:	462a      	mov	r2, r5
    2f82:	4816      	ldr	r0, [pc, #88]	; (2fdc <z_fatal_error+0x8c>)
    2f84:	f001 f999 	bl	42ba <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    2f88:	b13e      	cbz	r6, 2f9a <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    2f8a:	69f3      	ldr	r3, [r6, #28]
    2f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    2f90:	b11b      	cbz	r3, 2f9a <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    2f92:	2145      	movs	r1, #69	; 0x45
    2f94:	4812      	ldr	r0, [pc, #72]	; (2fe0 <z_fatal_error+0x90>)
    2f96:	f001 f990 	bl	42ba <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
    2f9a:	b134      	cbz	r4, 2faa <z_fatal_error+0x5a>
    2f9c:	4620      	mov	r0, r4
    2f9e:	f001 fef7 	bl	4d90 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    2fa2:	4603      	mov	r3, r0
    2fa4:	b108      	cbz	r0, 2faa <z_fatal_error+0x5a>
    2fa6:	7802      	ldrb	r2, [r0, #0]
    2fa8:	b902      	cbnz	r2, 2fac <z_fatal_error+0x5c>
		thread_name = "unknown";
    2faa:	4b0e      	ldr	r3, [pc, #56]	; (2fe4 <z_fatal_error+0x94>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    2fac:	4622      	mov	r2, r4
    2fae:	2145      	movs	r1, #69	; 0x45
    2fb0:	480d      	ldr	r0, [pc, #52]	; (2fe8 <z_fatal_error+0x98>)
    2fb2:	f001 f982 	bl	42ba <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    2fb6:	4631      	mov	r1, r6
    2fb8:	4628      	mov	r0, r5
    2fba:	f7ff fdd7 	bl	2b6c <k_sys_fatal_error_handler>
	__asm__ volatile(
    2fbe:	f387 8811 	msr	BASEPRI, r7
    2fc2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    2fc6:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    2fc8:	b003      	add	sp, #12
    2fca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2fce:	f7ff b99b 	b.w	2308 <z_impl_k_thread_abort>
    2fd2:	bf00      	nop
    2fd4:	00005388 	.word	0x00005388
    2fd8:	00005fad 	.word	0x00005fad
    2fdc:	00005fc3 	.word	0x00005fc3
    2fe0:	00005ff0 	.word	0x00005ff0
    2fe4:	00005fbb 	.word	0x00005fbb
    2fe8:	00006016 	.word	0x00006016

00002fec <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
    2fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fee:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
    2ff0:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
    2ff2:	4e15      	ldr	r6, [pc, #84]	; (3048 <idle+0x5c>)
	__asm__ volatile(
    2ff4:	f04f 0220 	mov.w	r2, #32
    2ff8:	f3ef 8311 	mrs	r3, BASEPRI
    2ffc:	f382 8811 	msr	BASEPRI, r2
    3000:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
    3004:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
    3006:	b188      	cbz	r0, 302c <idle+0x40>
			cpu->pending_abort = NULL;
    3008:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
    300a:	f383 8811 	msr	BASEPRI, r3
    300e:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
    3012:	f000 fbb3 	bl	377c <z_thread_single_abort>
	__asm__ volatile(
    3016:	f04f 0320 	mov.w	r3, #32
    301a:	f3ef 8011 	mrs	r0, BASEPRI
    301e:	f383 8811 	msr	BASEPRI, r3
    3022:	f3bf 8f6f 	isb	sy
    3026:	f001 fe04 	bl	4c32 <z_reschedule_irqlock>
			continue;
    302a:	e7e3      	b.n	2ff4 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
    302c:	f001 fec8 	bl	4dc0 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3030:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
    3032:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3034:	2802      	cmp	r0, #2
    3036:	bfd8      	it	le
    3038:	4608      	movle	r0, r1
    303a:	f001 fed1 	bl	4de0 <z_set_timeout_expiry>
		_kernel.idle = ticks;
    303e:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
    3040:	f7fe fdfc 	bl	1c3c <arch_cpu_idle>
}
    3044:	e7d6      	b.n	2ff4 <idle+0x8>
    3046:	bf00      	nop
    3048:	20000850 	.word	0x20000850

0000304c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    304c:	4802      	ldr	r0, [pc, #8]	; (3058 <z_bss_zero+0xc>)
    304e:	4a03      	ldr	r2, [pc, #12]	; (305c <z_bss_zero+0x10>)
    3050:	2100      	movs	r1, #0
    3052:	1a12      	subs	r2, r2, r0
    3054:	f001 bc7a 	b.w	494c <memset>
    3058:	20000140 	.word	0x20000140
    305c:	200008b0 	.word	0x200008b0

00003060 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
    3060:	2201      	movs	r2, #1
{
    3062:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3064:	4b09      	ldr	r3, [pc, #36]	; (308c <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3066:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3068:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    306a:	f7ff ff0d 	bl	2e88 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    306e:	f000 fe37 	bl	3ce0 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3072:	2003      	movs	r0, #3
    3074:	f7ff ff08 	bl	2e88 <z_sys_init_run_level>

	z_init_static_threads();
    3078:	f000 fdc2 	bl	3c00 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    307c:	f001 f8f6 	bl	426c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3080:	4a03      	ldr	r2, [pc, #12]	; (3090 <bg_thread_main+0x30>)
    3082:	7b13      	ldrb	r3, [r2, #12]
    3084:	f023 0301 	bic.w	r3, r3, #1
    3088:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    308a:	bd08      	pop	{r3, pc}
    308c:	200008ad 	.word	0x200008ad
    3090:	200001c0 	.word	0x200001c0

00003094 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    3094:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3098:	4b37      	ldr	r3, [pc, #220]	; (3178 <z_cstart+0xe4>)
    309a:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
    309c:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    30a0:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    30a4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    30a8:	2400      	movs	r4, #0
    30aa:	23e0      	movs	r3, #224	; 0xe0
    30ac:	4d33      	ldr	r5, [pc, #204]	; (317c <z_cstart+0xe8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    30ae:	f04f 0b01 	mov.w	fp, #1
    30b2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    30b6:	77ec      	strb	r4, [r5, #31]
    30b8:	762c      	strb	r4, [r5, #24]
    30ba:	766c      	strb	r4, [r5, #25]
    30bc:	76ac      	strb	r4, [r5, #26]
    30be:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    30c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    30c2:	4e2f      	ldr	r6, [pc, #188]	; (3180 <z_cstart+0xec>)
    30c4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    30c8:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    30ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    30cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 3184 <z_cstart+0xf0>
    30d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    30d4:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    30d6:	63ac      	str	r4, [r5, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    30d8:	f7ff f8a8 	bl	222c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    30dc:	f7fe fda8 	bl	1c30 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    30e0:	f04f 33ff 	mov.w	r3, #4294967295
    30e4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    30e6:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    30e8:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    30ec:	4d26      	ldr	r5, [pc, #152]	; (3188 <z_cstart+0xf4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    30ee:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    30f2:	ab06      	add	r3, sp, #24
    30f4:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    30f6:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    30f8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    30fc:	f7ff fec4 	bl	2e88 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3100:	2001      	movs	r0, #1
    3102:	f7ff fec1 	bl	2e88 <z_sys_init_run_level>
	z_sched_init();
    3106:	f000 fc4f 	bl	39a8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    310a:	4b20      	ldr	r3, [pc, #128]	; (318c <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
    310c:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    310e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3112:	491f      	ldr	r1, [pc, #124]	; (3190 <z_cstart+0xfc>)
    3114:	9305      	str	r3, [sp, #20]
    3116:	4630      	mov	r0, r6
    3118:	4653      	mov	r3, sl
    311a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    311e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3122:	9400      	str	r4, [sp, #0]
    3124:	f000 fd3c 	bl	3ba0 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3128:	7b73      	ldrb	r3, [r6, #13]
    312a:	4680      	mov	r8, r0
    312c:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    3130:	4630      	mov	r0, r6
    3132:	7373      	strb	r3, [r6, #13]
    3134:	f001 fda5 	bl	4c82 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    3138:	230f      	movs	r3, #15
    313a:	4f16      	ldr	r7, [pc, #88]	; (3194 <z_cstart+0x100>)
    313c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3140:	e9cd 4302 	strd	r4, r3, [sp, #8]
    3144:	4914      	ldr	r1, [pc, #80]	; (3198 <z_cstart+0x104>)
    3146:	4b15      	ldr	r3, [pc, #84]	; (319c <z_cstart+0x108>)
    3148:	4638      	mov	r0, r7
    314a:	e9cd b404 	strd	fp, r4, [sp, #16]
    314e:	e9cd 5400 	strd	r5, r4, [sp]
    3152:	f000 fd25 	bl	3ba0 <z_setup_new_thread>
    3156:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3158:	4652      	mov	r2, sl
    315a:	f023 0304 	bic.w	r3, r3, #4
    315e:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3160:	f105 031c 	add.w	r3, r5, #28
    3164:	4641      	mov	r1, r8
    3166:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
    3168:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    316c:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    316e:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
    3170:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3174:	f7fe fd42 	bl	1bfc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3178:	200019f0 	.word	0x200019f0
    317c:	e000ed00 	.word	0xe000ed00
    3180:	200001c0 	.word	0x200001c0
    3184:	00003061 	.word	0x00003061
    3188:	20000850 	.word	0x20000850
    318c:	0000607d 	.word	0x0000607d
    3190:	200008b0 	.word	0x200008b0
    3194:	20000140 	.word	0x20000140
    3198:	200018b0 	.word	0x200018b0
    319c:	00002fed 	.word	0x00002fed

000031a0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    31a0:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    31a2:	4b0e      	ldr	r3, [pc, #56]	; (31dc <init_mem_slab_module+0x3c>)
    31a4:	4c0e      	ldr	r4, [pc, #56]	; (31e0 <init_mem_slab_module+0x40>)
    31a6:	42a3      	cmp	r3, r4
    31a8:	d301      	bcc.n	31ae <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    31aa:	2000      	movs	r0, #0
	return rc;
}
    31ac:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    31ae:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    31b2:	ea41 0200 	orr.w	r2, r1, r0
    31b6:	f012 0203 	ands.w	r2, r2, #3
    31ba:	d10b      	bne.n	31d4 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    31bc:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    31be:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    31c0:	42aa      	cmp	r2, r5
    31c2:	d101      	bne.n	31c8 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    31c4:	331c      	adds	r3, #28
    31c6:	e7ee      	b.n	31a6 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    31c8:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    31ca:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    31cc:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    31ce:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    31d0:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    31d2:	e7f5      	b.n	31c0 <init_mem_slab_module+0x20>
	return rc;
    31d4:	f06f 0015 	mvn.w	r0, #21
    31d8:	e7e8      	b.n	31ac <init_mem_slab_module+0xc>
    31da:	bf00      	nop
    31dc:	200000ec 	.word	0x200000ec
    31e0:	200000ec 	.word	0x200000ec

000031e4 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    31e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    31e6:	460c      	mov	r4, r1
    31e8:	f04f 0520 	mov.w	r5, #32
    31ec:	f3ef 8111 	mrs	r1, BASEPRI
    31f0:	f385 8811 	msr	BASEPRI, r5
    31f4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    31f8:	6945      	ldr	r5, [r0, #20]
    31fa:	b15d      	cbz	r5, 3214 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    31fc:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    31fe:	682b      	ldr	r3, [r5, #0]
    3200:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3202:	6983      	ldr	r3, [r0, #24]
    3204:	3301      	adds	r3, #1
    3206:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3208:	2000      	movs	r0, #0
	__asm__ volatile(
    320a:	f381 8811 	msr	BASEPRI, r1
    320e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    3212:	e011      	b.n	3238 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3214:	ea52 0c03 	orrs.w	ip, r2, r3
    3218:	d103      	bne.n	3222 <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    321a:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    321e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    3220:	e7f3      	b.n	320a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    3222:	e9cd 2300 	strd	r2, r3, [sp]
    3226:	4602      	mov	r2, r0
    3228:	4804      	ldr	r0, [pc, #16]	; (323c <k_mem_slab_alloc+0x58>)
    322a:	f000 fb69 	bl	3900 <z_pend_curr>
		if (result == 0) {
    322e:	b918      	cbnz	r0, 3238 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    3230:	4b03      	ldr	r3, [pc, #12]	; (3240 <k_mem_slab_alloc+0x5c>)
    3232:	689b      	ldr	r3, [r3, #8]
    3234:	695b      	ldr	r3, [r3, #20]
    3236:	6023      	str	r3, [r4, #0]
}
    3238:	b003      	add	sp, #12
    323a:	bd30      	pop	{r4, r5, pc}
    323c:	200008ae 	.word	0x200008ae
    3240:	20000850 	.word	0x20000850

00003244 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    3244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3246:	4604      	mov	r4, r0
    3248:	460d      	mov	r5, r1
	__asm__ volatile(
    324a:	f04f 0320 	mov.w	r3, #32
    324e:	f3ef 8611 	mrs	r6, BASEPRI
    3252:	f383 8811 	msr	BASEPRI, r3
    3256:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
    325a:	6947      	ldr	r7, [r0, #20]
    325c:	b96f      	cbnz	r7, 327a <k_mem_slab_free+0x36>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    325e:	f001 fd68 	bl	4d32 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    3262:	b150      	cbz	r0, 327a <k_mem_slab_free+0x36>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    3264:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3266:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    3268:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    326a:	f001 fd0a 	bl	4c82 <z_ready_thread>
			z_reschedule(&lock, key);
    326e:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
    3270:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
    3274:	4807      	ldr	r0, [pc, #28]	; (3294 <k_mem_slab_free+0x50>)
    3276:	f000 b903 	b.w	3480 <z_reschedule>
	**(char ***) mem = slab->free_list;
    327a:	682b      	ldr	r3, [r5, #0]
    327c:	6962      	ldr	r2, [r4, #20]
    327e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    3280:	682b      	ldr	r3, [r5, #0]
    3282:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    3284:	69a3      	ldr	r3, [r4, #24]
    3286:	3b01      	subs	r3, #1
    3288:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    328a:	f386 8811 	msr	BASEPRI, r6
    328e:	f3bf 8f6f 	isb	sy
}
    3292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3294:	200008ae 	.word	0x200008ae

00003298 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3298:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    329c:	4604      	mov	r4, r0
    329e:	4617      	mov	r7, r2
    32a0:	461e      	mov	r6, r3
	__asm__ volatile(
    32a2:	f04f 0320 	mov.w	r3, #32
    32a6:	f3ef 8811 	mrs	r8, BASEPRI
    32aa:	f383 8811 	msr	BASEPRI, r3
    32ae:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    32b2:	68c3      	ldr	r3, [r0, #12]
    32b4:	4a2f      	ldr	r2, [pc, #188]	; (3374 <z_impl_k_mutex_lock+0xdc>)
    32b6:	b16b      	cbz	r3, 32d4 <z_impl_k_mutex_lock+0x3c>
    32b8:	6880      	ldr	r0, [r0, #8]
    32ba:	6891      	ldr	r1, [r2, #8]
    32bc:	4288      	cmp	r0, r1
    32be:	d019      	beq.n	32f4 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    32c0:	ea57 0306 	orrs.w	r3, r7, r6
    32c4:	d118      	bne.n	32f8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    32c6:	f388 8811 	msr	BASEPRI, r8
    32ca:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    32ce:	f06f 000f 	mvn.w	r0, #15
    32d2:	e00c      	b.n	32ee <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    32d4:	6891      	ldr	r1, [r2, #8]
    32d6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    32da:	3301      	adds	r3, #1
    32dc:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    32de:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    32e0:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    32e2:	60a3      	str	r3, [r4, #8]
    32e4:	f388 8811 	msr	BASEPRI, r8
    32e8:	f3bf 8f6f 	isb	sy
		return 0;
    32ec:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    32ee:	b002      	add	sp, #8
    32f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    32f4:	6921      	ldr	r1, [r4, #16]
    32f6:	e7f0      	b.n	32da <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    32f8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    32fc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3300:	4299      	cmp	r1, r3
    3302:	bfa8      	it	ge
    3304:	4619      	movge	r1, r3
    3306:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    330a:	428b      	cmp	r3, r1
    330c:	dd2b      	ble.n	3366 <z_impl_k_mutex_lock+0xce>
		resched = adjust_owner_prio(mutex, new_prio);
    330e:	f001 fc81 	bl	4c14 <adjust_owner_prio.isra.0>
    3312:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3314:	4622      	mov	r2, r4
    3316:	4641      	mov	r1, r8
    3318:	e9cd 7600 	strd	r7, r6, [sp]
    331c:	4816      	ldr	r0, [pc, #88]	; (3378 <z_impl_k_mutex_lock+0xe0>)
    331e:	f000 faef 	bl	3900 <z_pend_curr>
	if (got_mutex == 0) {
    3322:	2800      	cmp	r0, #0
    3324:	d0e3      	beq.n	32ee <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    3326:	f04f 0320 	mov.w	r3, #32
    332a:	f3ef 8611 	mrs	r6, BASEPRI
    332e:	f383 8811 	msr	BASEPRI, r3
    3332:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3336:	6823      	ldr	r3, [r4, #0]
    3338:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    333a:	42a3      	cmp	r3, r4
    333c:	d007      	beq.n	334e <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    333e:	b133      	cbz	r3, 334e <z_impl_k_mutex_lock+0xb6>
    3340:	f993 300e 	ldrsb.w	r3, [r3, #14]
    3344:	4299      	cmp	r1, r3
    3346:	bfa8      	it	ge
    3348:	4619      	movge	r1, r3
    334a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    334e:	68a0      	ldr	r0, [r4, #8]
    3350:	f001 fc60 	bl	4c14 <adjust_owner_prio.isra.0>
    3354:	b900      	cbnz	r0, 3358 <z_impl_k_mutex_lock+0xc0>
	if (resched) {
    3356:	b145      	cbz	r5, 336a <z_impl_k_mutex_lock+0xd2>
		z_reschedule(&lock, key);
    3358:	4631      	mov	r1, r6
    335a:	4807      	ldr	r0, [pc, #28]	; (3378 <z_impl_k_mutex_lock+0xe0>)
    335c:	f000 f890 	bl	3480 <z_reschedule>
	return -EAGAIN;
    3360:	f06f 000a 	mvn.w	r0, #10
    3364:	e7c3      	b.n	32ee <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    3366:	2500      	movs	r5, #0
    3368:	e7d4      	b.n	3314 <z_impl_k_mutex_lock+0x7c>
	__asm__ volatile(
    336a:	f386 8811 	msr	BASEPRI, r6
    336e:	f3bf 8f6f 	isb	sy
    3372:	e7f5      	b.n	3360 <z_impl_k_mutex_lock+0xc8>
    3374:	20000850 	.word	0x20000850
    3378:	200008ae 	.word	0x200008ae

0000337c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    337c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    337e:	6883      	ldr	r3, [r0, #8]
{
    3380:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    3382:	2b00      	cmp	r3, #0
    3384:	d032      	beq.n	33ec <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3386:	4a1c      	ldr	r2, [pc, #112]	; (33f8 <z_impl_k_mutex_unlock+0x7c>)
    3388:	6892      	ldr	r2, [r2, #8]
    338a:	4293      	cmp	r3, r2
    338c:	d131      	bne.n	33f2 <z_impl_k_mutex_unlock+0x76>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    338e:	7bda      	ldrb	r2, [r3, #15]
    3390:	3a01      	subs	r2, #1
    3392:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    3394:	68c3      	ldr	r3, [r0, #12]
    3396:	2b01      	cmp	r3, #1
    3398:	d005      	beq.n	33a6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    339a:	3b01      	subs	r3, #1
    339c:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    339e:	f000 f8d3 	bl	3548 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    33a2:	2000      	movs	r0, #0
}
    33a4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    33a6:	f04f 0320 	mov.w	r3, #32
    33aa:	f3ef 8511 	mrs	r5, BASEPRI
    33ae:	f383 8811 	msr	BASEPRI, r3
    33b2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    33b6:	6901      	ldr	r1, [r0, #16]
    33b8:	6880      	ldr	r0, [r0, #8]
    33ba:	f001 fc2b 	bl	4c14 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    33be:	4620      	mov	r0, r4
    33c0:	f001 fcb7 	bl	4d32 <z_unpend_first_thread>
	mutex->owner = new_owner;
    33c4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    33c6:	b158      	cbz	r0, 33e0 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    33c8:	f990 200e 	ldrsb.w	r2, [r0, #14]
    33cc:	6122      	str	r2, [r4, #16]
    33ce:	2200      	movs	r2, #0
    33d0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    33d2:	f001 fc56 	bl	4c82 <z_ready_thread>
		z_reschedule(&lock, key);
    33d6:	4629      	mov	r1, r5
    33d8:	4808      	ldr	r0, [pc, #32]	; (33fc <z_impl_k_mutex_unlock+0x80>)
    33da:	f000 f851 	bl	3480 <z_reschedule>
    33de:	e7de      	b.n	339e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    33e0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    33e2:	f385 8811 	msr	BASEPRI, r5
    33e6:	f3bf 8f6f 	isb	sy
    33ea:	e7d8      	b.n	339e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    33ec:	f06f 0015 	mvn.w	r0, #21
    33f0:	e7d8      	b.n	33a4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    33f2:	f04f 30ff 	mov.w	r0, #4294967295
    33f6:	e7d5      	b.n	33a4 <z_impl_k_mutex_unlock+0x28>
    33f8:	20000850 	.word	0x20000850
    33fc:	200008ae 	.word	0x200008ae

00003400 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    3400:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    3402:	4c08      	ldr	r4, [pc, #32]	; (3424 <z_reset_time_slice+0x24>)
    3404:	6823      	ldr	r3, [r4, #0]
    3406:	b15b      	cbz	r3, 3420 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    3408:	f7fe f882 	bl	1510 <z_clock_elapsed>
    340c:	4603      	mov	r3, r0
    340e:	6820      	ldr	r0, [r4, #0]
    3410:	4a05      	ldr	r2, [pc, #20]	; (3428 <z_reset_time_slice+0x28>)
    3412:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    3414:	2100      	movs	r1, #0
	}
}
    3416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    341a:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
    341c:	f001 bce0 	b.w	4de0 <z_set_timeout_expiry>
}
    3420:	bd10      	pop	{r4, pc}
    3422:	bf00      	nop
    3424:	2000088c 	.word	0x2000088c
    3428:	20000850 	.word	0x20000850

0000342c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    342c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    342e:	4604      	mov	r4, r0
    3430:	460d      	mov	r5, r1
	__asm__ volatile(
    3432:	f04f 0320 	mov.w	r3, #32
    3436:	f3ef 8711 	mrs	r7, BASEPRI
    343a:	f383 8811 	msr	BASEPRI, r3
    343e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    3442:	2100      	movs	r1, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3444:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3448:	f240 30e7 	movw	r0, #999	; 0x3e7
    344c:	4b09      	ldr	r3, [pc, #36]	; (3474 <k_sched_time_slice_set+0x48>)
    344e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3452:	6159      	str	r1, [r3, #20]
    3454:	2300      	movs	r3, #0
    3456:	fbe4 0106 	umlal	r0, r1, r4, r6
    345a:	f7fc feef 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    345e:	4b06      	ldr	r3, [pc, #24]	; (3478 <k_sched_time_slice_set+0x4c>)
    3460:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    3462:	4b06      	ldr	r3, [pc, #24]	; (347c <k_sched_time_slice_set+0x50>)
    3464:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    3466:	f7ff ffcb 	bl	3400 <z_reset_time_slice>
	__asm__ volatile(
    346a:	f387 8811 	msr	BASEPRI, r7
    346e:	f3bf 8f6f 	isb	sy
	}
}
    3472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3474:	20000850 	.word	0x20000850
    3478:	2000088c 	.word	0x2000088c
    347c:	20000888 	.word	0x20000888

00003480 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3480:	b949      	cbnz	r1, 3496 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3482:	f3ef 8005 	mrs	r0, IPSR
    3486:	b930      	cbnz	r0, 3496 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    3488:	4b05      	ldr	r3, [pc, #20]	; (34a0 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    348a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    348c:	689b      	ldr	r3, [r3, #8]
    348e:	429a      	cmp	r2, r3
    3490:	d001      	beq.n	3496 <z_reschedule+0x16>
	ret = arch_swap(key);
    3492:	f7fe bb0d 	b.w	1ab0 <arch_swap>
    3496:	f381 8811 	msr	BASEPRI, r1
    349a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    349e:	4770      	bx	lr
    34a0:	20000850 	.word	0x20000850

000034a4 <k_sched_lock>:
	__asm__ volatile(
    34a4:	f04f 0320 	mov.w	r3, #32
    34a8:	f3ef 8111 	mrs	r1, BASEPRI
    34ac:	f383 8811 	msr	BASEPRI, r3
    34b0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    34b4:	4b04      	ldr	r3, [pc, #16]	; (34c8 <k_sched_lock+0x24>)
    34b6:	689a      	ldr	r2, [r3, #8]
    34b8:	7bd3      	ldrb	r3, [r2, #15]
    34ba:	3b01      	subs	r3, #1
    34bc:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    34be:	f381 8811 	msr	BASEPRI, r1
    34c2:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    34c6:	4770      	bx	lr
    34c8:	20000850 	.word	0x20000850

000034cc <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    34cc:	4b09      	ldr	r3, [pc, #36]	; (34f4 <z_priq_dumb_remove+0x28>)
    34ce:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    34d2:	4282      	cmp	r2, r0
    34d4:	d105      	bne.n	34e2 <z_priq_dumb_remove+0x16>
    34d6:	689b      	ldr	r3, [r3, #8]
    34d8:	428b      	cmp	r3, r1
    34da:	d102      	bne.n	34e2 <z_priq_dumb_remove+0x16>
    34dc:	7b4b      	ldrb	r3, [r1, #13]
    34de:	06db      	lsls	r3, r3, #27
    34e0:	d106      	bne.n	34f0 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    34e2:	e9d1 3200 	ldrd	r3, r2, [r1]
    34e6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    34e8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    34ea:	2300      	movs	r3, #0
	node->prev = NULL;
    34ec:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    34f0:	4770      	bx	lr
    34f2:	bf00      	nop
    34f4:	20000850 	.word	0x20000850

000034f8 <update_cache>:
{
    34f8:	b538      	push	{r3, r4, r5, lr}
	if (_current->base.thread_state & _THREAD_ABORTING) {
    34fa:	4d12      	ldr	r5, [pc, #72]	; (3544 <update_cache+0x4c>)
{
    34fc:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
    34fe:	692b      	ldr	r3, [r5, #16]
	if (_current->base.thread_state & _THREAD_ABORTING) {
    3500:	68aa      	ldr	r2, [r5, #8]
	if (_current_cpu->pending_abort != NULL) {
    3502:	b10b      	cbz	r3, 3508 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
    3504:	68ec      	ldr	r4, [r5, #12]
    3506:	e00c      	b.n	3522 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
    3508:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    350c:	f001 fbb3 	bl	4c76 <z_priq_dumb_best>
    3510:	4604      	mov	r4, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    3512:	7b53      	ldrb	r3, [r2, #13]
    3514:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
    3516:	bf44      	itt	mi
    3518:	f043 0308 	orrmi.w	r3, r3, #8
    351c:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
    351e:	2c00      	cmp	r4, #0
    3520:	d0f0      	beq.n	3504 <update_cache+0xc>
	if (preempt_ok != 0) {
    3522:	b949      	cbnz	r1, 3538 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
    3524:	7b53      	ldrb	r3, [r2, #13]
    3526:	06db      	lsls	r3, r3, #27
    3528:	d106      	bne.n	3538 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    352a:	69a3      	ldr	r3, [r4, #24]
    352c:	b923      	cbnz	r3, 3538 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    352e:	89d3      	ldrh	r3, [r2, #14]
    3530:	2b7f      	cmp	r3, #127	; 0x7f
    3532:	d901      	bls.n	3538 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    3534:	62aa      	str	r2, [r5, #40]	; 0x28
}
    3536:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    3538:	4294      	cmp	r4, r2
    353a:	d001      	beq.n	3540 <update_cache+0x48>
			z_reset_time_slice();
    353c:	f7ff ff60 	bl	3400 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3540:	62ac      	str	r4, [r5, #40]	; 0x28
}
    3542:	e7f8      	b.n	3536 <update_cache+0x3e>
    3544:	20000850 	.word	0x20000850

00003548 <k_sched_unlock>:
{
    3548:	b510      	push	{r4, lr}
	__asm__ volatile(
    354a:	f04f 0320 	mov.w	r3, #32
    354e:	f3ef 8411 	mrs	r4, BASEPRI
    3552:	f383 8811 	msr	BASEPRI, r3
    3556:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    355a:	4b08      	ldr	r3, [pc, #32]	; (357c <k_sched_unlock+0x34>)
		update_cache(0);
    355c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    355e:	689a      	ldr	r2, [r3, #8]
    3560:	7bd3      	ldrb	r3, [r2, #15]
    3562:	3301      	adds	r3, #1
    3564:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3566:	f7ff ffc7 	bl	34f8 <update_cache>
	__asm__ volatile(
    356a:	f384 8811 	msr	BASEPRI, r4
    356e:	f3bf 8f6f 	isb	sy
}
    3572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3576:	f001 bb68 	b.w	4c4a <z_reschedule_unlocked>
    357a:	bf00      	nop
    357c:	20000850 	.word	0x20000850

00003580 <ready_thread>:
{
    3580:	b4f0      	push	{r4, r5, r6, r7}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3582:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3586:	7b41      	ldrb	r1, [r0, #13]
    3588:	2b00      	cmp	r3, #0
    358a:	db28      	blt.n	35de <ready_thread+0x5e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    358c:	06cb      	lsls	r3, r1, #27
    358e:	d126      	bne.n	35de <ready_thread+0x5e>
    3590:	6983      	ldr	r3, [r0, #24]
    3592:	bb23      	cbnz	r3, 35de <ready_thread+0x5e>
	return list->head == list;
    3594:	4a13      	ldr	r2, [pc, #76]	; (35e4 <ready_thread+0x64>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3596:	f102 052c 	add.w	r5, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
    359a:	e9d2 340b 	ldrd	r3, r4, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    359e:	42ab      	cmp	r3, r5
    35a0:	d017      	beq.n	35d2 <ready_thread+0x52>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    35a2:	b1b3      	cbz	r3, 35d2 <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
    35a4:	f990 600e 	ldrsb.w	r6, [r0, #14]
    35a8:	f993 700e 	ldrsb.w	r7, [r3, #14]
    35ac:	42b7      	cmp	r7, r6
    35ae:	dd0b      	ble.n	35c8 <ready_thread+0x48>
	node->prev = successor->prev;
    35b0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    35b2:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    35b6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    35b8:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    35ba:	f061 017f 	orn	r1, r1, #127	; 0x7f
    35be:	7341      	strb	r1, [r0, #13]
}
    35c0:	bcf0      	pop	{r4, r5, r6, r7}
		update_cache(0);
    35c2:	2000      	movs	r0, #0
    35c4:	f7ff bf98 	b.w	34f8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    35c8:	42a3      	cmp	r3, r4
    35ca:	d002      	beq.n	35d2 <ready_thread+0x52>
    35cc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    35ce:	2b00      	cmp	r3, #0
    35d0:	d1ea      	bne.n	35a8 <ready_thread+0x28>
	node->prev = list->tail;
    35d2:	e9c0 5400 	strd	r5, r4, [r0]
	list->tail->next = node;
    35d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    35d8:	6018      	str	r0, [r3, #0]
	list->tail = node;
    35da:	6310      	str	r0, [r2, #48]	; 0x30
}
    35dc:	e7ed      	b.n	35ba <ready_thread+0x3a>
}
    35de:	bcf0      	pop	{r4, r5, r6, r7}
    35e0:	4770      	bx	lr
    35e2:	bf00      	nop
    35e4:	20000850 	.word	0x20000850

000035e8 <z_sched_start>:
{
    35e8:	b510      	push	{r4, lr}
	__asm__ volatile(
    35ea:	f04f 0220 	mov.w	r2, #32
    35ee:	f3ef 8411 	mrs	r4, BASEPRI
    35f2:	f382 8811 	msr	BASEPRI, r2
    35f6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    35fa:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    35fc:	0751      	lsls	r1, r2, #29
    35fe:	d404      	bmi.n	360a <z_sched_start+0x22>
	__asm__ volatile(
    3600:	f384 8811 	msr	BASEPRI, r4
    3604:	f3bf 8f6f 	isb	sy
}
    3608:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    360a:	f022 0204 	bic.w	r2, r2, #4
    360e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3610:	f7ff ffb6 	bl	3580 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3614:	4621      	mov	r1, r4
}
    3616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    361a:	4801      	ldr	r0, [pc, #4]	; (3620 <z_sched_start+0x38>)
    361c:	f7ff bf30 	b.w	3480 <z_reschedule>
    3620:	200008ae 	.word	0x200008ae

00003624 <move_thread_to_end_of_prio_q>:
{
    3624:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3626:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    362a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    362c:	2b00      	cmp	r3, #0
    362e:	da02      	bge.n	3636 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    3630:	4816      	ldr	r0, [pc, #88]	; (368c <move_thread_to_end_of_prio_q+0x68>)
    3632:	f7ff ff4b 	bl	34cc <z_priq_dumb_remove>
	return list->head == list;
    3636:	4a16      	ldr	r2, [pc, #88]	; (3690 <move_thread_to_end_of_prio_q+0x6c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3638:	f102 042c 	add.w	r4, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
    363c:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3640:	42a3      	cmp	r3, r4
    3642:	d01c      	beq.n	367e <move_thread_to_end_of_prio_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3644:	b1db      	cbz	r3, 367e <move_thread_to_end_of_prio_q+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
    3646:	f991 500e 	ldrsb.w	r5, [r1, #14]
    364a:	f993 600e 	ldrsb.w	r6, [r3, #14]
    364e:	42ae      	cmp	r6, r5
    3650:	dd10      	ble.n	3674 <move_thread_to_end_of_prio_q+0x50>
	node->prev = successor->prev;
    3652:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    3654:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    3658:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    365a:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    365c:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
    365e:	6890      	ldr	r0, [r2, #8]
    3660:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3664:	734b      	strb	r3, [r1, #13]
    3666:	1a43      	subs	r3, r0, r1
    3668:	4258      	negs	r0, r3
    366a:	4158      	adcs	r0, r3
}
    366c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3670:	f7ff bf42 	b.w	34f8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3674:	4283      	cmp	r3, r0
    3676:	d002      	beq.n	367e <move_thread_to_end_of_prio_q+0x5a>
    3678:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    367a:	2b00      	cmp	r3, #0
    367c:	d1e5      	bne.n	364a <move_thread_to_end_of_prio_q+0x26>
	node->prev = list->tail;
    367e:	e9c1 4000 	strd	r4, r0, [r1]
	list->tail->next = node;
    3682:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3684:	6019      	str	r1, [r3, #0]
	list->tail = node;
    3686:	6311      	str	r1, [r2, #48]	; 0x30
}
    3688:	e7e8      	b.n	365c <move_thread_to_end_of_prio_q+0x38>
    368a:	bf00      	nop
    368c:	2000087c 	.word	0x2000087c
    3690:	20000850 	.word	0x20000850

00003694 <z_time_slice>:
{
    3694:	4601      	mov	r1, r0
    3696:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3698:	f04f 0320 	mov.w	r3, #32
    369c:	f3ef 8411 	mrs	r4, BASEPRI
    36a0:	f383 8811 	msr	BASEPRI, r3
    36a4:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    36a8:	4b15      	ldr	r3, [pc, #84]	; (3700 <z_time_slice+0x6c>)
    36aa:	4a16      	ldr	r2, [pc, #88]	; (3704 <z_time_slice+0x70>)
    36ac:	6898      	ldr	r0, [r3, #8]
    36ae:	6815      	ldr	r5, [r2, #0]
    36b0:	42a8      	cmp	r0, r5
    36b2:	d106      	bne.n	36c2 <z_time_slice+0x2e>
			z_reset_time_slice();
    36b4:	f7ff fea4 	bl	3400 <z_reset_time_slice>
	__asm__ volatile(
    36b8:	f384 8811 	msr	BASEPRI, r4
    36bc:	f3bf 8f6f 	isb	sy
}
    36c0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    36c2:	2500      	movs	r5, #0
    36c4:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    36c6:	4a10      	ldr	r2, [pc, #64]	; (3708 <z_time_slice+0x74>)
    36c8:	6812      	ldr	r2, [r2, #0]
    36ca:	b1ba      	cbz	r2, 36fc <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    36cc:	89c2      	ldrh	r2, [r0, #14]
    36ce:	2a7f      	cmp	r2, #127	; 0x7f
    36d0:	d814      	bhi.n	36fc <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    36d2:	7b42      	ldrb	r2, [r0, #13]
    36d4:	06d2      	lsls	r2, r2, #27
    36d6:	d111      	bne.n	36fc <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    36d8:	4a0c      	ldr	r2, [pc, #48]	; (370c <z_time_slice+0x78>)
    36da:	f990 500e 	ldrsb.w	r5, [r0, #14]
    36de:	6812      	ldr	r2, [r2, #0]
    36e0:	4295      	cmp	r5, r2
    36e2:	db0b      	blt.n	36fc <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    36e4:	4a0a      	ldr	r2, [pc, #40]	; (3710 <z_time_slice+0x7c>)
    36e6:	4290      	cmp	r0, r2
    36e8:	d008      	beq.n	36fc <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    36ea:	695a      	ldr	r2, [r3, #20]
    36ec:	428a      	cmp	r2, r1
    36ee:	dc02      	bgt.n	36f6 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    36f0:	f7ff ff98 	bl	3624 <move_thread_to_end_of_prio_q>
    36f4:	e7de      	b.n	36b4 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    36f6:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    36f8:	615a      	str	r2, [r3, #20]
    36fa:	e7dd      	b.n	36b8 <z_time_slice+0x24>
    36fc:	2200      	movs	r2, #0
    36fe:	e7fb      	b.n	36f8 <z_time_slice+0x64>
    3700:	20000850 	.word	0x20000850
    3704:	20000884 	.word	0x20000884
    3708:	2000088c 	.word	0x2000088c
    370c:	20000888 	.word	0x20000888
    3710:	20000140 	.word	0x20000140

00003714 <z_impl_k_thread_suspend>:
{
    3714:	b570      	push	{r4, r5, r6, lr}
    3716:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3718:	3018      	adds	r0, #24
    371a:	f001 fb3b 	bl	4d94 <z_abort_timeout>
	__asm__ volatile(
    371e:	f04f 0320 	mov.w	r3, #32
    3722:	f3ef 8611 	mrs	r6, BASEPRI
    3726:	f383 8811 	msr	BASEPRI, r3
    372a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    372e:	f994 300d 	ldrsb.w	r3, [r4, #13]
    3732:	2b00      	cmp	r3, #0
    3734:	da07      	bge.n	3746 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    3736:	4621      	mov	r1, r4
    3738:	480e      	ldr	r0, [pc, #56]	; (3774 <z_impl_k_thread_suspend+0x60>)
    373a:	f7ff fec7 	bl	34cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    373e:	7b63      	ldrb	r3, [r4, #13]
    3740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3744:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    3746:	4d0c      	ldr	r5, [pc, #48]	; (3778 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3748:	7b63      	ldrb	r3, [r4, #13]
    374a:	68a8      	ldr	r0, [r5, #8]
    374c:	f043 0310 	orr.w	r3, r3, #16
    3750:	7363      	strb	r3, [r4, #13]
    3752:	1b03      	subs	r3, r0, r4
    3754:	4258      	negs	r0, r3
    3756:	4158      	adcs	r0, r3
    3758:	f7ff fece 	bl	34f8 <update_cache>
	__asm__ volatile(
    375c:	f386 8811 	msr	BASEPRI, r6
    3760:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3764:	68ab      	ldr	r3, [r5, #8]
    3766:	42a3      	cmp	r3, r4
    3768:	d103      	bne.n	3772 <z_impl_k_thread_suspend+0x5e>
}
    376a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    376e:	f001 ba6c 	b.w	4c4a <z_reschedule_unlocked>
}
    3772:	bd70      	pop	{r4, r5, r6, pc}
    3774:	2000087c 	.word	0x2000087c
    3778:	20000850 	.word	0x20000850

0000377c <z_thread_single_abort>:
{
    377c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3780:	4604      	mov	r4, r0
	__asm__ volatile(
    3782:	f04f 0320 	mov.w	r3, #32
    3786:	f3ef 8211 	mrs	r2, BASEPRI
    378a:	f383 8811 	msr	BASEPRI, r3
    378e:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
    3792:	7b43      	ldrb	r3, [r0, #13]
    3794:	f013 0f28 	tst.w	r3, #40	; 0x28
    3798:	d005      	beq.n	37a6 <z_thread_single_abort+0x2a>
	__asm__ volatile(
    379a:	f382 8811 	msr	BASEPRI, r2
    379e:	f3bf 8f6f 	isb	sy
}
    37a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
    37a6:	f043 0320 	orr.w	r3, r3, #32
    37aa:	7343      	strb	r3, [r0, #13]
    37ac:	f382 8811 	msr	BASEPRI, r2
    37b0:	f3bf 8f6f 	isb	sy
    37b4:	3018      	adds	r0, #24
    37b6:	f001 faed 	bl	4d94 <z_abort_timeout>
	__asm__ volatile(
    37ba:	f04f 0320 	mov.w	r3, #32
    37be:	f3ef 8611 	mrs	r6, BASEPRI
    37c2:	f383 8811 	msr	BASEPRI, r3
    37c6:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    37ca:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    37cc:	06d8      	lsls	r0, r3, #27
    37ce:	d116      	bne.n	37fe <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
    37d0:	69a2      	ldr	r2, [r4, #24]
    37d2:	b9a2      	cbnz	r2, 37fe <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
    37d4:	0619      	lsls	r1, r3, #24
    37d6:	d507      	bpl.n	37e8 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
    37d8:	4621      	mov	r1, r4
    37da:	4826      	ldr	r0, [pc, #152]	; (3874 <z_thread_single_abort+0xf8>)
    37dc:	f7ff fe76 	bl	34cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    37e0:	7b63      	ldrb	r3, [r4, #13]
    37e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    37e6:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    37e8:	4b23      	ldr	r3, [pc, #140]	; (3878 <z_thread_single_abort+0xfc>)
    37ea:	6898      	ldr	r0, [r3, #8]
    37ec:	1b02      	subs	r2, r0, r4
    37ee:	4250      	negs	r0, r2
    37f0:	4150      	adcs	r0, r2
    37f2:	f7ff fe81 	bl	34f8 <update_cache>
			waiter->base.pended_on = NULL;
    37f6:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    37f8:	f104 0830 	add.w	r8, r4, #48	; 0x30
    37fc:	e01d      	b.n	383a <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
    37fe:	079b      	lsls	r3, r3, #30
    3800:	d5f9      	bpl.n	37f6 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
    3802:	4621      	mov	r1, r4
    3804:	68a0      	ldr	r0, [r4, #8]
    3806:	f7ff fe61 	bl	34cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    380a:	7b63      	ldrb	r3, [r4, #13]
    380c:	f023 0302 	bic.w	r3, r3, #2
    3810:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    3812:	2300      	movs	r3, #0
    3814:	60a3      	str	r3, [r4, #8]
    3816:	e7ee      	b.n	37f6 <z_thread_single_abort+0x7a>
    3818:	f105 0018 	add.w	r0, r5, #24
    381c:	f001 faba 	bl	4d94 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    3820:	68a8      	ldr	r0, [r5, #8]
    3822:	4629      	mov	r1, r5
    3824:	f7ff fe52 	bl	34cc <z_priq_dumb_remove>
    3828:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
    382a:	4628      	mov	r0, r5
    382c:	f023 0302 	bic.w	r3, r3, #2
    3830:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    3832:	60af      	str	r7, [r5, #8]
    3834:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    3836:	f7ff fea3 	bl	3580 <ready_thread>
	return list->head == list;
    383a:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    383c:	4545      	cmp	r5, r8
    383e:	d001      	beq.n	3844 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    3840:	2d00      	cmp	r5, #0
    3842:	d1e9      	bne.n	3818 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
    3844:	4b0c      	ldr	r3, [pc, #48]	; (3878 <z_thread_single_abort+0xfc>)
    3846:	689a      	ldr	r2, [r3, #8]
    3848:	4b0c      	ldr	r3, [pc, #48]	; (387c <z_thread_single_abort+0x100>)
    384a:	429a      	cmp	r2, r3
    384c:	d102      	bne.n	3854 <z_thread_single_abort+0xd8>
			update_cache(1);
    384e:	2001      	movs	r0, #1
    3850:	f7ff fe52 	bl	34f8 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    3854:	7b63      	ldrb	r3, [r4, #13]
    3856:	f043 0308 	orr.w	r3, r3, #8
    385a:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
    385c:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
    385e:	f386 8811 	msr	BASEPRI, r6
    3862:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
    3866:	2b00      	cmp	r3, #0
    3868:	d09b      	beq.n	37a2 <z_thread_single_abort+0x26>
		fn_abort(thread);
    386a:	4620      	mov	r0, r4
}
    386c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
    3870:	4718      	bx	r3
    3872:	bf00      	nop
    3874:	2000087c 	.word	0x2000087c
    3878:	20000850 	.word	0x20000850
    387c:	20000140 	.word	0x20000140

00003880 <unready_thread>:
{
    3880:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    3882:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    3886:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3888:	2b00      	cmp	r3, #0
    388a:	da06      	bge.n	389a <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    388c:	4807      	ldr	r0, [pc, #28]	; (38ac <unready_thread+0x2c>)
    388e:	f7ff fe1d 	bl	34cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    3892:	7b4b      	ldrb	r3, [r1, #13]
    3894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3898:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    389a:	4b05      	ldr	r3, [pc, #20]	; (38b0 <unready_thread+0x30>)
    389c:	6898      	ldr	r0, [r3, #8]
    389e:	1a43      	subs	r3, r0, r1
    38a0:	4258      	negs	r0, r3
    38a2:	4158      	adcs	r0, r3
}
    38a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    38a8:	f7ff be26 	b.w	34f8 <update_cache>
    38ac:	2000087c 	.word	0x2000087c
    38b0:	20000850 	.word	0x20000850

000038b4 <pend>:
{
    38b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38b8:	4606      	mov	r6, r0
    38ba:	4615      	mov	r5, r2
    38bc:	461c      	mov	r4, r3
	__asm__ volatile(
    38be:	f04f 0320 	mov.w	r3, #32
    38c2:	f3ef 8711 	mrs	r7, BASEPRI
    38c6:	f383 8811 	msr	BASEPRI, r3
    38ca:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    38ce:	f001 fa08 	bl	4ce2 <add_to_waitq_locked>
	__asm__ volatile(
    38d2:	f387 8811 	msr	BASEPRI, r7
    38d6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    38da:	f1b4 3fff 	cmp.w	r4, #4294967295
    38de:	bf08      	it	eq
    38e0:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    38e4:	d008      	beq.n	38f8 <pend+0x44>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    38e6:	462a      	mov	r2, r5
    38e8:	4623      	mov	r3, r4
    38ea:	f106 0018 	add.w	r0, r6, #24
    38ee:	4903      	ldr	r1, [pc, #12]	; (38fc <pend+0x48>)
}
    38f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    38f4:	f000 ba66 	b.w	3dc4 <z_add_timeout>
    38f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    38fc:	00004ca3 	.word	0x00004ca3

00003900 <z_pend_curr>:
{
    3900:	b510      	push	{r4, lr}
    3902:	460c      	mov	r4, r1
	pending_current = _current;
    3904:	4b06      	ldr	r3, [pc, #24]	; (3920 <z_pend_curr+0x20>)
{
    3906:	4611      	mov	r1, r2
	pending_current = _current;
    3908:	6898      	ldr	r0, [r3, #8]
    390a:	4b06      	ldr	r3, [pc, #24]	; (3924 <z_pend_curr+0x24>)
    390c:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    390e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3912:	f7ff ffcf 	bl	38b4 <pend>
    3916:	4620      	mov	r0, r4
}
    3918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    391c:	f7fe b8c8 	b.w	1ab0 <arch_swap>
    3920:	20000850 	.word	0x20000850
    3924:	20000884 	.word	0x20000884

00003928 <z_set_prio>:
{
    3928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    392a:	4604      	mov	r4, r0
	__asm__ volatile(
    392c:	f04f 0320 	mov.w	r3, #32
    3930:	f3ef 8711 	mrs	r7, BASEPRI
    3934:	f383 8811 	msr	BASEPRI, r3
    3938:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    393c:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    393e:	b24d      	sxtb	r5, r1
    3940:	06db      	lsls	r3, r3, #27
    3942:	d12b      	bne.n	399c <z_set_prio+0x74>
		if (need_sched) {
    3944:	6983      	ldr	r3, [r0, #24]
    3946:	bb4b      	cbnz	r3, 399c <z_set_prio+0x74>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    3948:	4e16      	ldr	r6, [pc, #88]	; (39a4 <z_set_prio+0x7c>)
    394a:	4621      	mov	r1, r4
    394c:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    3950:	f7ff fdbc 	bl	34cc <z_priq_dumb_remove>
	return list->head == list;
    3954:	6af3      	ldr	r3, [r6, #44]	; 0x2c
				thread->base.prio = prio;
    3956:	73a5      	strb	r5, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3958:	4283      	cmp	r3, r0
    395a:	d018      	beq.n	398e <z_set_prio+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    395c:	b1bb      	cbz	r3, 398e <z_set_prio+0x66>
	return (node == list->tail) ? NULL : node->next;
    395e:	6b32      	ldr	r2, [r6, #48]	; 0x30
	if (thread_1->base.prio < thread_2->base.prio) {
    3960:	f993 100e 	ldrsb.w	r1, [r3, #14]
    3964:	42a9      	cmp	r1, r5
    3966:	dd0d      	ble.n	3984 <z_set_prio+0x5c>
	node->prev = successor->prev;
    3968:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    396a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    396e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3970:	605c      	str	r4, [r3, #4]
			update_cache(1);
    3972:	2001      	movs	r0, #1
    3974:	f7ff fdc0 	bl	34f8 <update_cache>
    3978:	2001      	movs	r0, #1
	__asm__ volatile(
    397a:	f387 8811 	msr	BASEPRI, r7
    397e:	f3bf 8f6f 	isb	sy
}
    3982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    3984:	4293      	cmp	r3, r2
    3986:	d002      	beq.n	398e <z_set_prio+0x66>
    3988:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    398a:	2b00      	cmp	r3, #0
    398c:	d1e8      	bne.n	3960 <z_set_prio+0x38>
	node->prev = list->tail;
    398e:	6b33      	ldr	r3, [r6, #48]	; 0x30
	node->next = list;
    3990:	6020      	str	r0, [r4, #0]
	node->prev = list->tail;
    3992:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    3994:	6b33      	ldr	r3, [r6, #48]	; 0x30
    3996:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3998:	6334      	str	r4, [r6, #48]	; 0x30
}
    399a:	e7ea      	b.n	3972 <z_set_prio+0x4a>
			thread->base.prio = prio;
    399c:	2000      	movs	r0, #0
    399e:	73a5      	strb	r5, [r4, #14]
    39a0:	e7eb      	b.n	397a <z_set_prio+0x52>
    39a2:	bf00      	nop
    39a4:	20000850 	.word	0x20000850

000039a8 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    39a8:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    39aa:	4b04      	ldr	r3, [pc, #16]	; (39bc <z_sched_init+0x14>)
    39ac:	4608      	mov	r0, r1
    39ae:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
    39b2:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
    39b6:	f7ff bd39 	b.w	342c <k_sched_time_slice_set>
    39ba:	bf00      	nop
    39bc:	20000850 	.word	0x20000850

000039c0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    39c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!arch_is_in_isr(), "");

	if (!z_is_idle_thread_object(_current)) {
    39c2:	4c23      	ldr	r4, [pc, #140]	; (3a50 <z_impl_k_yield+0x90>)
    39c4:	4b23      	ldr	r3, [pc, #140]	; (3a54 <z_impl_k_yield+0x94>)
    39c6:	68a2      	ldr	r2, [r4, #8]
    39c8:	429a      	cmp	r2, r3
    39ca:	d028      	beq.n	3a1e <z_impl_k_yield+0x5e>
	__asm__ volatile(
    39cc:	f04f 0320 	mov.w	r3, #32
    39d0:	f3ef 8511 	mrs	r5, BASEPRI
    39d4:	f383 8811 	msr	BASEPRI, r3
    39d8:	f3bf 8f6f 	isb	sy
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
    39dc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    39e0:	68a1      	ldr	r1, [r4, #8]
    39e2:	f7ff fd73 	bl	34cc <z_priq_dumb_remove>
	return list->head == list;
    39e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
    39e8:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    39ea:	4282      	cmp	r2, r0
    39ec:	d028      	beq.n	3a40 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    39ee:	b33a      	cbz	r2, 3a40 <z_impl_k_yield+0x80>
	return (node == list->tail) ? NULL : node->next;
    39f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
	if (thread_1->base.prio < thread_2->base.prio) {
    39f2:	f993 600e 	ldrsb.w	r6, [r3, #14]
    39f6:	f992 700e 	ldrsb.w	r7, [r2, #14]
    39fa:	42b7      	cmp	r7, r6
    39fc:	dd1b      	ble.n	3a36 <z_impl_k_yield+0x76>
	node->prev = successor->prev;
    39fe:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3a00:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
    3a04:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3a06:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
    3a08:	7b5a      	ldrb	r2, [r3, #13]
			z_mark_thread_as_queued(_current);
			update_cache(1);
    3a0a:	2001      	movs	r0, #1
    3a0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3a10:	735a      	strb	r2, [r3, #13]
    3a12:	f7ff fd71 	bl	34f8 <update_cache>
	__asm__ volatile(
    3a16:	f385 8811 	msr	BASEPRI, r5
    3a1a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    3a1e:	f04f 0320 	mov.w	r3, #32
    3a22:	f3ef 8011 	mrs	r0, BASEPRI
    3a26:	f383 8811 	msr	BASEPRI, r3
    3a2a:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
    3a2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3a32:	f7fe b83d 	b.w	1ab0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    3a36:	428a      	cmp	r2, r1
    3a38:	d002      	beq.n	3a40 <z_impl_k_yield+0x80>
    3a3a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3a3c:	2a00      	cmp	r2, #0
    3a3e:	d1da      	bne.n	39f6 <z_impl_k_yield+0x36>
	node->prev = list->tail;
    3a40:	6b22      	ldr	r2, [r4, #48]	; 0x30
	node->next = list;
    3a42:	6018      	str	r0, [r3, #0]
	node->prev = list->tail;
    3a44:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    3a46:	6b22      	ldr	r2, [r4, #48]	; 0x30
    3a48:	6013      	str	r3, [r2, #0]
	list->tail = node;
    3a4a:	6323      	str	r3, [r4, #48]	; 0x30
}
    3a4c:	e7dc      	b.n	3a08 <z_impl_k_yield+0x48>
    3a4e:	bf00      	nop
    3a50:	20000850 	.word	0x20000850
    3a54:	20000140 	.word	0x20000140

00003a58 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    3a58:	ea50 0301 	orrs.w	r3, r0, r1
{
    3a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a60:	4605      	mov	r5, r0
    3a62:	460e      	mov	r6, r1
	if (ticks == 0) {
    3a64:	d104      	bne.n	3a70 <z_tick_sleep+0x18>
	z_impl_k_yield();
    3a66:	f7ff ffab 	bl	39c0 <z_impl_k_yield>
		k_yield();
		return 0;
    3a6a:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    3a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
    3a70:	f001 f9d0 	bl	4e14 <z_tick_get_32>
    3a74:	4604      	mov	r4, r0
    3a76:	f04f 0320 	mov.w	r3, #32
    3a7a:	f3ef 8811 	mrs	r8, BASEPRI
    3a7e:	f383 8811 	msr	BASEPRI, r3
    3a82:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    3a86:	4f0f      	ldr	r7, [pc, #60]	; (3ac4 <z_tick_sleep+0x6c>)
    3a88:	4b0f      	ldr	r3, [pc, #60]	; (3ac8 <z_tick_sleep+0x70>)
    3a8a:	68b8      	ldr	r0, [r7, #8]
    3a8c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    3a8e:	f7ff fef7 	bl	3880 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    3a92:	68b8      	ldr	r0, [r7, #8]
    3a94:	490d      	ldr	r1, [pc, #52]	; (3acc <z_tick_sleep+0x74>)
    3a96:	462a      	mov	r2, r5
    3a98:	4633      	mov	r3, r6
    3a9a:	3018      	adds	r0, #24
    3a9c:	f000 f992 	bl	3dc4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3aa0:	68ba      	ldr	r2, [r7, #8]
    3aa2:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3aa4:	7b53      	ldrb	r3, [r2, #13]
    3aa6:	f043 0310 	orr.w	r3, r3, #16
    3aaa:	7353      	strb	r3, [r2, #13]
    3aac:	f7fe f800 	bl	1ab0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
    3ab0:	f001 f9b0 	bl	4e14 <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
    3ab4:	1962      	adds	r2, r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
    3ab6:	1a10      	subs	r0, r2, r0
    3ab8:	eb63 0303 	sbc.w	r3, r3, r3
    3abc:	2b00      	cmp	r3, #0
    3abe:	bfb8      	it	lt
    3ac0:	2000      	movlt	r0, #0
    3ac2:	e7d3      	b.n	3a6c <z_tick_sleep+0x14>
    3ac4:	20000850 	.word	0x20000850
    3ac8:	20000884 	.word	0x20000884
    3acc:	00004ca3 	.word	0x00004ca3

00003ad0 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3ad0:	f1b1 3fff 	cmp.w	r1, #4294967295
    3ad4:	bf08      	it	eq
    3ad6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    3ada:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3adc:	d106      	bne.n	3aec <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    3ade:	4b08      	ldr	r3, [pc, #32]	; (3b00 <z_impl_k_sleep+0x30>)
    3ae0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3ae2:	f7ff fe17 	bl	3714 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    3ae6:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    3aea:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    3aec:	f7ff ffb4 	bl	3a58 <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
    3af0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3af4:	fb80 0303 	smull	r0, r3, r0, r3
    3af8:	0bc0      	lsrs	r0, r0, #15
    3afa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    3afe:	e7f4      	b.n	3aea <z_impl_k_sleep+0x1a>
    3b00:	20000850 	.word	0x20000850

00003b04 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    3b04:	4b01      	ldr	r3, [pc, #4]	; (3b0c <z_impl_k_current_get+0x8>)
    3b06:	6898      	ldr	r0, [r3, #8]
    3b08:	4770      	bx	lr
    3b0a:	bf00      	nop
    3b0c:	20000850 	.word	0x20000850

00003b10 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3b10:	b538      	push	{r3, r4, r5, lr}
    3b12:	4604      	mov	r4, r0
    3b14:	f04f 0320 	mov.w	r3, #32
    3b18:	f3ef 8511 	mrs	r5, BASEPRI
    3b1c:	f383 8811 	msr	BASEPRI, r3
    3b20:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    3b24:	f001 f905 	bl	4d32 <z_unpend_first_thread>

	if (thread != NULL) {
    3b28:	b148      	cbz	r0, 3b3e <z_impl_k_sem_give+0x2e>
    3b2a:	2200      	movs	r2, #0
    3b2c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3b2e:	f001 f8a8 	bl	4c82 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3b32:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    3b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3b38:	4804      	ldr	r0, [pc, #16]	; (3b4c <z_impl_k_sem_give+0x3c>)
    3b3a:	f7ff bca1 	b.w	3480 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3b3e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3b42:	429a      	cmp	r2, r3
    3b44:	bf18      	it	ne
    3b46:	3301      	addne	r3, #1
    3b48:	60a3      	str	r3, [r4, #8]
}
    3b4a:	e7f2      	b.n	3b32 <z_impl_k_sem_give+0x22>
    3b4c:	200008ae 	.word	0x200008ae

00003b50 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3b50:	b513      	push	{r0, r1, r4, lr}
    3b52:	f04f 0420 	mov.w	r4, #32
    3b56:	f3ef 8111 	mrs	r1, BASEPRI
    3b5a:	f384 8811 	msr	BASEPRI, r4
    3b5e:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    3b62:	6884      	ldr	r4, [r0, #8]
    3b64:	b144      	cbz	r4, 3b78 <z_impl_k_sem_take+0x28>
		sem->count--;
    3b66:	3c01      	subs	r4, #1
    3b68:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    3b6a:	f381 8811 	msr	BASEPRI, r1
    3b6e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3b72:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    3b74:	b002      	add	sp, #8
    3b76:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3b78:	ea52 0403 	orrs.w	r4, r2, r3
    3b7c:	d106      	bne.n	3b8c <z_impl_k_sem_take+0x3c>
    3b7e:	f381 8811 	msr	BASEPRI, r1
    3b82:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3b86:	f06f 000f 	mvn.w	r0, #15
    3b8a:	e7f3      	b.n	3b74 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3b8c:	e9cd 2300 	strd	r2, r3, [sp]
    3b90:	4602      	mov	r2, r0
    3b92:	4802      	ldr	r0, [pc, #8]	; (3b9c <z_impl_k_sem_take+0x4c>)
    3b94:	f7ff feb4 	bl	3900 <z_pend_curr>
	return ret;
    3b98:	e7ec      	b.n	3b74 <z_impl_k_sem_take+0x24>
    3b9a:	bf00      	nop
    3b9c:	200008ae 	.word	0x200008ae

00003ba0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3ba0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
    3ba4:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
    3ba8:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    3bac:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
    3bae:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
    3bb0:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3bb2:	2504      	movs	r5, #4
    3bb4:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
    3bb6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3bb8:	1dd6      	adds	r6, r2, #7
	thread_base->prio = priority;
    3bba:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
    3bbc:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3bc0:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
    3bc4:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    3bc8:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->sched_locked = 0U;
    3bcc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    3bce:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3bd0:	9202      	str	r2, [sp, #8]
    3bd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    3bd4:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3bd8:	9201      	str	r2, [sp, #4]
    3bda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3bdc:	9200      	str	r2, [sp, #0]
    3bde:	4642      	mov	r2, r8
    3be0:	f7fd fff0 	bl	1bc4 <arch_new_thread>
	if (!_current) {
    3be4:	4b05      	ldr	r3, [pc, #20]	; (3bfc <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
    3be6:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    3bea:	689b      	ldr	r3, [r3, #8]
    3bec:	b103      	cbz	r3, 3bf0 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    3bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
    3bf0:	4640      	mov	r0, r8
    3bf2:	6763      	str	r3, [r4, #116]	; 0x74
    3bf4:	b004      	add	sp, #16
    3bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bfa:	bf00      	nop
    3bfc:	20000850 	.word	0x20000850

00003c00 <z_init_static_threads>:
{
    3c00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3c04:	4c29      	ldr	r4, [pc, #164]	; (3cac <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    3c06:	4d2a      	ldr	r5, [pc, #168]	; (3cb0 <z_init_static_threads+0xb0>)
{
    3c08:	b087      	sub	sp, #28
    3c0a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    3c0c:	42ae      	cmp	r6, r5
    3c0e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    3c12:	d30f      	bcc.n	3c34 <z_init_static_threads+0x34>
	k_sched_lock();
    3c14:	f7ff fc46 	bl	34a4 <k_sched_lock>
    3c18:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3c1c:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    3c20:	4c22      	ldr	r4, [pc, #136]	; (3cac <z_init_static_threads+0xac>)
    3c22:	f8df 9090 	ldr.w	r9, [pc, #144]	; 3cb4 <z_init_static_threads+0xb4>
    3c26:	42ac      	cmp	r4, r5
    3c28:	d320      	bcc.n	3c6c <z_init_static_threads+0x6c>
}
    3c2a:	b007      	add	sp, #28
    3c2c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3c30:	f7ff bc8a 	b.w	3548 <k_sched_unlock>
		z_setup_new_thread(
    3c34:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3c38:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3c3c:	9305      	str	r3, [sp, #20]
    3c3e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3c42:	9304      	str	r3, [sp, #16]
    3c44:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3c48:	9303      	str	r3, [sp, #12]
    3c4a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3c4e:	9302      	str	r3, [sp, #8]
    3c50:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3c54:	9301      	str	r3, [sp, #4]
    3c56:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3c5a:	9300      	str	r3, [sp, #0]
    3c5c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3c60:	f7ff ff9e 	bl	3ba0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3c64:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3c68:	65de      	str	r6, [r3, #92]	; 0x5c
	_FOREACH_STATIC_THREAD(thread_data) {
    3c6a:	e7ce      	b.n	3c0a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3c6e:	1c5a      	adds	r2, r3, #1
    3c70:	d00d      	beq.n	3c8e <z_init_static_threads+0x8e>
    3c72:	2100      	movs	r1, #0
    3c74:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    3c76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3c7a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3c7e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    3c82:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3c86:	d104      	bne.n	3c92 <z_init_static_threads+0x92>
	z_sched_start(thread);
    3c88:	4640      	mov	r0, r8
    3c8a:	f7ff fcad 	bl	35e8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    3c8e:	3430      	adds	r4, #48	; 0x30
    3c90:	e7c9      	b.n	3c26 <z_init_static_threads+0x26>
    3c92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3c96:	2300      	movs	r3, #0
    3c98:	f7fc fad0 	bl	23c <__aeabi_uldivmod>
    3c9c:	4602      	mov	r2, r0
    3c9e:	460b      	mov	r3, r1
    3ca0:	f108 0018 	add.w	r0, r8, #24
    3ca4:	4649      	mov	r1, r9
    3ca6:	f000 f88d 	bl	3dc4 <z_add_timeout>
    3caa:	e7f0      	b.n	3c8e <z_init_static_threads+0x8e>
    3cac:	200000ec 	.word	0x200000ec
    3cb0:	200000ec 	.word	0x200000ec
    3cb4:	00004ca3 	.word	0x00004ca3

00003cb8 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
    3cb8:	b508      	push	{r3, lr}
	__asm__ volatile(
    3cba:	f04f 0320 	mov.w	r3, #32
    3cbe:	f3ef 8411 	mrs	r4, BASEPRI
    3cc2:	f383 8811 	msr	BASEPRI, r3
    3cc6:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
    3cca:	4b04      	ldr	r3, [pc, #16]	; (3cdc <z_self_abort+0x24>)
    3ccc:	6898      	ldr	r0, [r3, #8]
    3cce:	6118      	str	r0, [r3, #16]
    3cd0:	f7ff fd20 	bl	3714 <z_impl_k_thread_suspend>
    3cd4:	4620      	mov	r0, r4
    3cd6:	f7fd feeb 	bl	1ab0 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3cda:	bf00      	nop
    3cdc:	20000850 	.word	0x20000850

00003ce0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    3ce0:	4a02      	ldr	r2, [pc, #8]	; (3cec <boot_banner+0xc>)
    3ce2:	4903      	ldr	r1, [pc, #12]	; (3cf0 <boot_banner+0x10>)
    3ce4:	4803      	ldr	r0, [pc, #12]	; (3cf4 <boot_banner+0x14>)
    3ce6:	f000 bae8 	b.w	42ba <printk>
    3cea:	bf00      	nop
    3cec:	00005535 	.word	0x00005535
    3cf0:	00006085 	.word	0x00006085
    3cf4:	00006092 	.word	0x00006092

00003cf8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3cf8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    3cfa:	4806      	ldr	r0, [pc, #24]	; (3d14 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3cfc:	4a06      	ldr	r2, [pc, #24]	; (3d18 <z_data_copy+0x20>)
    3cfe:	4907      	ldr	r1, [pc, #28]	; (3d1c <z_data_copy+0x24>)
    3d00:	1a12      	subs	r2, r2, r0
    3d02:	f000 fdf8 	bl	48f6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3d0a:	4a05      	ldr	r2, [pc, #20]	; (3d20 <z_data_copy+0x28>)
    3d0c:	4905      	ldr	r1, [pc, #20]	; (3d24 <z_data_copy+0x2c>)
    3d0e:	4806      	ldr	r0, [pc, #24]	; (3d28 <z_data_copy+0x30>)
    3d10:	f000 bdf1 	b.w	48f6 <memcpy>
    3d14:	20000000 	.word	0x20000000
    3d18:	2000013c 	.word	0x2000013c
    3d1c:	000060c0 	.word	0x000060c0
    3d20:	00000000 	.word	0x00000000
    3d24:	000060c0 	.word	0x000060c0
    3d28:	20000000 	.word	0x20000000

00003d2c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    3d2c:	4b03      	ldr	r3, [pc, #12]	; (3d3c <elapsed+0x10>)
    3d2e:	681b      	ldr	r3, [r3, #0]
    3d30:	b90b      	cbnz	r3, 3d36 <elapsed+0xa>
    3d32:	f7fd bbed 	b.w	1510 <z_clock_elapsed>
}
    3d36:	2000      	movs	r0, #0
    3d38:	4770      	bx	lr
    3d3a:	bf00      	nop
    3d3c:	20000890 	.word	0x20000890

00003d40 <next_timeout>:
	return list->head == list;
    3d40:	4b11      	ldr	r3, [pc, #68]	; (3d88 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    3d42:	b510      	push	{r4, lr}
    3d44:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3d46:	429c      	cmp	r4, r3
    3d48:	bf08      	it	eq
    3d4a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3d4c:	f7ff ffee 	bl	3d2c <elapsed>
    3d50:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
    3d52:	b16c      	cbz	r4, 3d70 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3d54:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    3d58:	1ac0      	subs	r0, r0, r3
    3d5a:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    3d5e:	2801      	cmp	r0, #1
    3d60:	f173 0200 	sbcs.w	r2, r3, #0
    3d64:	db0d      	blt.n	3d82 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3d66:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    3d6a:	f173 0300 	sbcs.w	r3, r3, #0
    3d6e:	db01      	blt.n	3d74 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
    3d70:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3d74:	4b05      	ldr	r3, [pc, #20]	; (3d8c <next_timeout+0x4c>)
    3d76:	695b      	ldr	r3, [r3, #20]
    3d78:	b113      	cbz	r3, 3d80 <next_timeout+0x40>
    3d7a:	4298      	cmp	r0, r3
    3d7c:	bfa8      	it	ge
    3d7e:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    3d80:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    3d82:	2000      	movs	r0, #0
    3d84:	e7f6      	b.n	3d74 <next_timeout+0x34>
    3d86:	bf00      	nop
    3d88:	20000040 	.word	0x20000040
    3d8c:	20000850 	.word	0x20000850

00003d90 <remove_timeout>:
{
    3d90:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    3d92:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3d94:	b168      	cbz	r0, 3db2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    3d96:	4a0a      	ldr	r2, [pc, #40]	; (3dc0 <remove_timeout+0x30>)
    3d98:	6852      	ldr	r2, [r2, #4]
    3d9a:	4290      	cmp	r0, r2
    3d9c:	d009      	beq.n	3db2 <remove_timeout+0x22>
	if (next(t) != NULL) {
    3d9e:	b143      	cbz	r3, 3db2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    3da0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    3da4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3da8:	1912      	adds	r2, r2, r4
    3daa:	eb41 0105 	adc.w	r1, r1, r5
    3dae:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    3db2:	6842      	ldr	r2, [r0, #4]
    3db4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    3db6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3db8:	2300      	movs	r3, #0
	node->prev = NULL;
    3dba:	e9c0 3300 	strd	r3, r3, [r0]
}
    3dbe:	bd30      	pop	{r4, r5, pc}
    3dc0:	20000040 	.word	0x20000040

00003dc4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
    3dc8:	bf08      	it	eq
    3dca:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    3dce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3dd2:	4604      	mov	r4, r0
    3dd4:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3dd6:	d063      	beq.n	3ea0 <z_add_timeout+0xdc>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    3dd8:	f06f 0701 	mvn.w	r7, #1
    3ddc:	f04f 39ff 	mov.w	r9, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
    3de0:	1c55      	adds	r5, r2, #1
    3de2:	f143 0600 	adc.w	r6, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    3de6:	1b7b      	subs	r3, r7, r5
    3de8:	eb69 0306 	sbc.w	r3, r9, r6
    3dec:	2b00      	cmp	r3, #0
    3dee:	db0d      	blt.n	3e0c <z_add_timeout+0x48>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    3df0:	f7ff ff9c 	bl	3d2c <elapsed>
    3df4:	4b30      	ldr	r3, [pc, #192]	; (3eb8 <z_add_timeout+0xf4>)
    3df6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3dfa:	1abf      	subs	r7, r7, r2
    3dfc:	eb69 0303 	sbc.w	r3, r9, r3
    3e00:	1b7d      	subs	r5, r7, r5
    3e02:	eb63 0606 	sbc.w	r6, r3, r6
    3e06:	1a2d      	subs	r5, r5, r0
    3e08:	eb66 76e0 	sbc.w	r6, r6, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3e0c:	f8c4 8008 	str.w	r8, [r4, #8]
    3e10:	f04f 0320 	mov.w	r3, #32
    3e14:	f3ef 8711 	mrs	r7, BASEPRI
    3e18:	f383 8811 	msr	BASEPRI, r3
    3e1c:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    3e20:	f7ff ff84 	bl	3d2c <elapsed>
	ticks = MAX(1, ticks);
    3e24:	2d01      	cmp	r5, #1
    3e26:	f176 0300 	sbcs.w	r3, r6, #0
    3e2a:	bfbc      	itt	lt
    3e2c:	2501      	movlt	r5, #1
    3e2e:	2600      	movlt	r6, #0
	return list->head == list;
    3e30:	4a22      	ldr	r2, [pc, #136]	; (3ebc <z_add_timeout+0xf8>)
		to->dticks = ticks + elapsed();
    3e32:	182d      	adds	r5, r5, r0
    3e34:	6813      	ldr	r3, [r2, #0]
    3e36:	eb46 76e0 	adc.w	r6, r6, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3e3a:	4293      	cmp	r3, r2
    3e3c:	e9c4 5604 	strd	r5, r6, [r4, #16]
    3e40:	d002      	beq.n	3e48 <z_add_timeout+0x84>
	return (node == list->tail) ? NULL : node->next;
    3e42:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
    3e46:	b933      	cbnz	r3, 3e56 <z_add_timeout+0x92>
	node->prev = list->tail;
    3e48:	6853      	ldr	r3, [r2, #4]
	node->next = list;
    3e4a:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
    3e4c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    3e4e:	6853      	ldr	r3, [r2, #4]
    3e50:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3e52:	6054      	str	r4, [r2, #4]
}
    3e54:	e011      	b.n	3e7a <z_add_timeout+0xb6>
			if (t->dticks > to->dticks) {
    3e56:	e9d3 0604 	ldrd	r0, r6, [r3, #16]
    3e5a:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    3e5e:	4281      	cmp	r1, r0
    3e60:	eb75 0e06 	sbcs.w	lr, r5, r6
    3e64:	da1e      	bge.n	3ea4 <z_add_timeout+0xe0>
				t->dticks -= to->dticks;
    3e66:	1a41      	subs	r1, r0, r1
    3e68:	eb66 0505 	sbc.w	r5, r6, r5
    3e6c:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
    3e70:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    3e72:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    3e76:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    3e78:	605c      	str	r4, [r3, #4]
	return list->head == list;
    3e7a:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3e7c:	4293      	cmp	r3, r2
    3e7e:	d00b      	beq.n	3e98 <z_add_timeout+0xd4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3e80:	429c      	cmp	r4, r3
    3e82:	d109      	bne.n	3e98 <z_add_timeout+0xd4>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    3e84:	f7ff ff5c 	bl	3d40 <next_timeout>

			if (next_time == 0 ||
    3e88:	b118      	cbz	r0, 3e92 <z_add_timeout+0xce>
			    _current_cpu->slice_ticks != next_time) {
    3e8a:	4b0d      	ldr	r3, [pc, #52]	; (3ec0 <z_add_timeout+0xfc>)
			if (next_time == 0 ||
    3e8c:	695b      	ldr	r3, [r3, #20]
    3e8e:	4283      	cmp	r3, r0
    3e90:	d002      	beq.n	3e98 <z_add_timeout+0xd4>
				z_clock_set_timeout(next_time, false);
    3e92:	2100      	movs	r1, #0
    3e94:	f7fd fb0a 	bl	14ac <z_clock_set_timeout>
	__asm__ volatile(
    3e98:	f387 8811 	msr	BASEPRI, r7
    3e9c:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    3ea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
    3ea4:	1a09      	subs	r1, r1, r0
    3ea6:	eb65 0506 	sbc.w	r5, r5, r6
	return (node == list->tail) ? NULL : node->next;
    3eaa:	4563      	cmp	r3, ip
    3eac:	e9c4 1504 	strd	r1, r5, [r4, #16]
    3eb0:	d0ca      	beq.n	3e48 <z_add_timeout+0x84>
    3eb2:	681b      	ldr	r3, [r3, #0]
    3eb4:	e7c7      	b.n	3e46 <z_add_timeout+0x82>
    3eb6:	bf00      	nop
    3eb8:	20000240 	.word	0x20000240
    3ebc:	20000040 	.word	0x20000040
    3ec0:	20000850 	.word	0x20000850

00003ec4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    3ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3ec8:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3eca:	f7ff fbe3 	bl	3694 <z_time_slice>
	__asm__ volatile(
    3ece:	f04f 0320 	mov.w	r3, #32
    3ed2:	f3ef 8411 	mrs	r4, BASEPRI
    3ed6:	f383 8811 	msr	BASEPRI, r3
    3eda:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    3ede:	4e24      	ldr	r6, [pc, #144]	; (3f70 <z_clock_announce+0xac>)
	return list->head == list;
    3ee0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3f74 <z_clock_announce+0xb0>
    3ee4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    3ee6:	4d24      	ldr	r5, [pc, #144]	; (3f78 <z_clock_announce+0xb4>)
    3ee8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3eec:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3eee:	4540      	cmp	r0, r8
    3ef0:	ea4f 77e2 	mov.w	r7, r2, asr #31
		curr_tick += dt;
    3ef4:	e9d5 1e00 	ldrd	r1, lr, [r5]
    3ef8:	d00b      	beq.n	3f12 <z_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3efa:	b150      	cbz	r0, 3f12 <z_clock_announce+0x4e>
    3efc:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    3f00:	429a      	cmp	r2, r3
    3f02:	eb77 090c 	sbcs.w	r9, r7, ip
    3f06:	da16      	bge.n	3f36 <z_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    3f08:	1a9b      	subs	r3, r3, r2
    3f0a:	eb6c 0c07 	sbc.w	ip, ip, r7
    3f0e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    3f12:	1852      	adds	r2, r2, r1
    3f14:	eb4e 0707 	adc.w	r7, lr, r7
    3f18:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    3f1c:	2500      	movs	r5, #0
    3f1e:	6035      	str	r5, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    3f20:	f7ff ff0e 	bl	3d40 <next_timeout>
    3f24:	4629      	mov	r1, r5
    3f26:	f7fd fac1 	bl	14ac <z_clock_set_timeout>
	__asm__ volatile(
    3f2a:	f384 8811 	msr	BASEPRI, r4
    3f2e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    3f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    3f36:	1859      	adds	r1, r3, r1
    3f38:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    3f3c:	1ad3      	subs	r3, r2, r3
    3f3e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    3f40:	2200      	movs	r2, #0
    3f42:	2300      	movs	r3, #0
    3f44:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    3f48:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    3f4c:	f7ff ff20 	bl	3d90 <remove_timeout>
    3f50:	f384 8811 	msr	BASEPRI, r4
    3f54:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3f58:	6883      	ldr	r3, [r0, #8]
    3f5a:	4798      	blx	r3
	__asm__ volatile(
    3f5c:	f04f 0320 	mov.w	r3, #32
    3f60:	f3ef 8411 	mrs	r4, BASEPRI
    3f64:	f383 8811 	msr	BASEPRI, r3
    3f68:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    3f6c:	e7bc      	b.n	3ee8 <z_clock_announce+0x24>
    3f6e:	bf00      	nop
    3f70:	20000890 	.word	0x20000890
    3f74:	20000040 	.word	0x20000040
    3f78:	20000240 	.word	0x20000240

00003f7c <z_tick_get>:

int64_t z_tick_get(void)
{
    3f7c:	b510      	push	{r4, lr}
    3f7e:	f04f 0320 	mov.w	r3, #32
    3f82:	f3ef 8411 	mrs	r4, BASEPRI
    3f86:	f383 8811 	msr	BASEPRI, r3
    3f8a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    3f8e:	f7fd fabf 	bl	1510 <z_clock_elapsed>
    3f92:	4a05      	ldr	r2, [pc, #20]	; (3fa8 <z_tick_get+0x2c>)
    3f94:	e9d2 3100 	ldrd	r3, r1, [r2]
    3f98:	18c0      	adds	r0, r0, r3
    3f9a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    3f9e:	f384 8811 	msr	BASEPRI, r4
    3fa2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3fa6:	bd10      	pop	{r4, pc}
    3fa8:	20000240 	.word	0x20000240

00003fac <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    3fac:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    3fae:	4c06      	ldr	r4, [pc, #24]	; (3fc8 <statics_init+0x1c>)
    3fb0:	4d06      	ldr	r5, [pc, #24]	; (3fcc <statics_init+0x20>)
    3fb2:	42ac      	cmp	r4, r5
    3fb4:	d301      	bcc.n	3fba <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    3fb6:	2000      	movs	r0, #0
    3fb8:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    3fba:	4620      	mov	r0, r4
    3fbc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    3fc0:	f000 ff2c 	bl	4e1c <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    3fc4:	3414      	adds	r4, #20
    3fc6:	e7f4      	b.n	3fb2 <statics_init+0x6>
    3fc8:	200000ec 	.word	0x200000ec
    3fcc:	200000ec 	.word	0x200000ec

00003fd0 <nrf_cc3xx_platform_init_no_rng>:
    3fd0:	b510      	push	{r4, lr}
    3fd2:	4c0a      	ldr	r4, [pc, #40]	; (3ffc <nrf_cc3xx_platform_init_no_rng+0x2c>)
    3fd4:	6823      	ldr	r3, [r4, #0]
    3fd6:	b11b      	cbz	r3, 3fe0 <nrf_cc3xx_platform_init_no_rng+0x10>
    3fd8:	2301      	movs	r3, #1
    3fda:	2000      	movs	r0, #0
    3fdc:	6023      	str	r3, [r4, #0]
    3fde:	bd10      	pop	{r4, pc}
    3fe0:	f000 f8b2 	bl	4148 <CC_LibInitNoRng>
    3fe4:	2800      	cmp	r0, #0
    3fe6:	d0f7      	beq.n	3fd8 <nrf_cc3xx_platform_init_no_rng+0x8>
    3fe8:	3801      	subs	r0, #1
    3fea:	2807      	cmp	r0, #7
    3fec:	d803      	bhi.n	3ff6 <nrf_cc3xx_platform_init_no_rng+0x26>
    3fee:	4b04      	ldr	r3, [pc, #16]	; (4000 <CONFIG_FPROTECT_BLOCK_SIZE>)
    3ff0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3ff4:	bd10      	pop	{r4, pc}
    3ff6:	4803      	ldr	r0, [pc, #12]	; (4004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
    3ff8:	bd10      	pop	{r4, pc}
    3ffa:	bf00      	nop
    3ffc:	20000894 	.word	0x20000894
    4000:	0000539c 	.word	0x0000539c
    4004:	ffff8ffe 	.word	0xffff8ffe

00004008 <nrf_cc3xx_platform_abort>:
    4008:	f3bf 8f4f 	dsb	sy
    400c:	4905      	ldr	r1, [pc, #20]	; (4024 <nrf_cc3xx_platform_abort+0x1c>)
    400e:	4b06      	ldr	r3, [pc, #24]	; (4028 <nrf_cc3xx_platform_abort+0x20>)
    4010:	68ca      	ldr	r2, [r1, #12]
    4012:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4016:	4313      	orrs	r3, r2
    4018:	60cb      	str	r3, [r1, #12]
    401a:	f3bf 8f4f 	dsb	sy
    401e:	bf00      	nop
    4020:	e7fd      	b.n	401e <nrf_cc3xx_platform_abort+0x16>
    4022:	bf00      	nop
    4024:	e000ed00 	.word	0xe000ed00
    4028:	05fa0004 	.word	0x05fa0004

0000402c <CC_PalAbort>:
    402c:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    4030:	2100      	movs	r1, #0
    4032:	b430      	push	{r4, r5}
    4034:	4a08      	ldr	r2, [pc, #32]	; (4058 <CC_PalAbort+0x2c>)
    4036:	4c09      	ldr	r4, [pc, #36]	; (405c <CC_PalAbort+0x30>)
    4038:	4d09      	ldr	r5, [pc, #36]	; (4060 <CC_PalAbort+0x34>)
    403a:	6023      	str	r3, [r4, #0]
    403c:	602b      	str	r3, [r5, #0]
    403e:	6013      	str	r3, [r2, #0]
    4040:	60e3      	str	r3, [r4, #12]
    4042:	60eb      	str	r3, [r5, #12]
    4044:	60d3      	str	r3, [r2, #12]
    4046:	61a3      	str	r3, [r4, #24]
    4048:	4a06      	ldr	r2, [pc, #24]	; (4064 <CC_PalAbort+0x38>)
    404a:	4c07      	ldr	r4, [pc, #28]	; (4068 <CC_PalAbort+0x3c>)
    404c:	61ab      	str	r3, [r5, #24]
    404e:	6863      	ldr	r3, [r4, #4]
    4050:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    4054:	bc30      	pop	{r4, r5}
    4056:	4718      	bx	r3
    4058:	50845408 	.word	0x50845408
    405c:	50845400 	.word	0x50845400
    4060:	50845404 	.word	0x50845404
    4064:	50844000 	.word	0x50844000
    4068:	20000048 	.word	0x20000048

0000406c <nrf_cc3xx_platform_set_abort>:
    406c:	4b02      	ldr	r3, [pc, #8]	; (4078 <nrf_cc3xx_platform_set_abort+0xc>)
    406e:	e9d0 1200 	ldrd	r1, r2, [r0]
    4072:	e9c3 1200 	strd	r1, r2, [r3]
    4076:	4770      	bx	lr
    4078:	20000048 	.word	0x20000048

0000407c <mutex_unlock>:
    407c:	b148      	cbz	r0, 4092 <mutex_unlock+0x16>
    407e:	6843      	ldr	r3, [r0, #4]
    4080:	b12b      	cbz	r3, 408e <mutex_unlock+0x12>
    4082:	f3bf 8f5f 	dmb	sy
    4086:	2300      	movs	r3, #0
    4088:	6003      	str	r3, [r0, #0]
    408a:	4618      	mov	r0, r3
    408c:	4770      	bx	lr
    408e:	4802      	ldr	r0, [pc, #8]	; (4098 <mutex_unlock+0x1c>)
    4090:	4770      	bx	lr
    4092:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4096:	4770      	bx	lr
    4098:	ffff8fea 	.word	0xffff8fea

0000409c <mutex_free>:
    409c:	b510      	push	{r4, lr}
    409e:	4604      	mov	r4, r0
    40a0:	b128      	cbz	r0, 40ae <mutex_free+0x12>
    40a2:	6863      	ldr	r3, [r4, #4]
    40a4:	b113      	cbz	r3, 40ac <mutex_free+0x10>
    40a6:	2300      	movs	r3, #0
    40a8:	6023      	str	r3, [r4, #0]
    40aa:	6063      	str	r3, [r4, #4]
    40ac:	bd10      	pop	{r4, pc}
    40ae:	4b02      	ldr	r3, [pc, #8]	; (40b8 <mutex_free+0x1c>)
    40b0:	4802      	ldr	r0, [pc, #8]	; (40bc <mutex_free+0x20>)
    40b2:	685b      	ldr	r3, [r3, #4]
    40b4:	4798      	blx	r3
    40b6:	e7f4      	b.n	40a2 <mutex_free+0x6>
    40b8:	20000048 	.word	0x20000048
    40bc:	000053bc 	.word	0x000053bc

000040c0 <mutex_init>:
    40c0:	b510      	push	{r4, lr}
    40c2:	4604      	mov	r4, r0
    40c4:	b130      	cbz	r0, 40d4 <mutex_init+0x14>
    40c6:	2200      	movs	r2, #0
    40c8:	6863      	ldr	r3, [r4, #4]
    40ca:	6022      	str	r2, [r4, #0]
    40cc:	f043 0301 	orr.w	r3, r3, #1
    40d0:	6063      	str	r3, [r4, #4]
    40d2:	bd10      	pop	{r4, pc}
    40d4:	4801      	ldr	r0, [pc, #4]	; (40dc <mutex_init+0x1c>)
    40d6:	f7ff ffa9 	bl	402c <CC_PalAbort>
    40da:	e7f4      	b.n	40c6 <mutex_init+0x6>
    40dc:	000053e4 	.word	0x000053e4

000040e0 <mutex_lock>:
    40e0:	b180      	cbz	r0, 4104 <mutex_lock+0x24>
    40e2:	6843      	ldr	r3, [r0, #4]
    40e4:	b163      	cbz	r3, 4100 <mutex_lock+0x20>
    40e6:	2201      	movs	r2, #1
    40e8:	e8d0 3fef 	ldaex	r3, [r0]
    40ec:	e8c0 2fe1 	stlex	r1, r2, [r0]
    40f0:	2900      	cmp	r1, #0
    40f2:	d1f9      	bne.n	40e8 <mutex_lock+0x8>
    40f4:	2b01      	cmp	r3, #1
    40f6:	d0f7      	beq.n	40e8 <mutex_lock+0x8>
    40f8:	f3bf 8f5f 	dmb	sy
    40fc:	2000      	movs	r0, #0
    40fe:	4770      	bx	lr
    4100:	4802      	ldr	r0, [pc, #8]	; (410c <mutex_lock+0x2c>)
    4102:	4770      	bx	lr
    4104:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4108:	4770      	bx	lr
    410a:	bf00      	nop
    410c:	ffff8fea 	.word	0xffff8fea

00004110 <nrf_cc3xx_platform_set_mutexes>:
    4110:	b470      	push	{r4, r5, r6}
    4112:	4b0b      	ldr	r3, [pc, #44]	; (4140 <nrf_cc3xx_platform_set_mutexes+0x30>)
    4114:	6806      	ldr	r6, [r0, #0]
    4116:	68c2      	ldr	r2, [r0, #12]
    4118:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    411c:	e9c3 4202 	strd	r4, r2, [r3, #8]
    4120:	e9c3 6500 	strd	r6, r5, [r3]
    4124:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    4128:	680e      	ldr	r6, [r1, #0]
    412a:	4b06      	ldr	r3, [pc, #24]	; (4144 <nrf_cc3xx_platform_set_mutexes+0x34>)
    412c:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    4130:	e9c3 6500 	strd	r6, r5, [r3]
    4134:	e9c3 4002 	strd	r4, r0, [r3, #8]
    4138:	611a      	str	r2, [r3, #16]
    413a:	bc70      	pop	{r4, r5, r6}
    413c:	4770      	bx	lr
    413e:	bf00      	nop
    4140:	20000058 	.word	0x20000058
    4144:	20000068 	.word	0x20000068

00004148 <CC_LibInitNoRng>:
    4148:	b508      	push	{r3, lr}
    414a:	f000 f80f 	bl	416c <CC_HalInit>
    414e:	b928      	cbnz	r0, 415c <CC_LibInitNoRng+0x14>
    4150:	f000 f80e 	bl	4170 <CC_PalInit>
    4154:	b930      	cbnz	r0, 4164 <CC_LibInitNoRng+0x1c>
    4156:	4a04      	ldr	r2, [pc, #16]	; (4168 <CC_LibInitNoRng+0x20>)
    4158:	6010      	str	r0, [r2, #0]
    415a:	bd08      	pop	{r3, pc}
    415c:	f000 f836 	bl	41cc <CC_PalTerminate>
    4160:	2003      	movs	r0, #3
    4162:	bd08      	pop	{r3, pc}
    4164:	2004      	movs	r0, #4
    4166:	bd08      	pop	{r3, pc}
    4168:	50845a0c 	.word	0x50845a0c

0000416c <CC_HalInit>:
    416c:	2000      	movs	r0, #0
    416e:	4770      	bx	lr

00004170 <CC_PalInit>:
    4170:	b510      	push	{r4, lr}
    4172:	4811      	ldr	r0, [pc, #68]	; (41b8 <CC_PalInit+0x48>)
    4174:	f000 f848 	bl	4208 <CC_PalMutexCreate>
    4178:	b100      	cbz	r0, 417c <CC_PalInit+0xc>
    417a:	bd10      	pop	{r4, pc}
    417c:	480f      	ldr	r0, [pc, #60]	; (41bc <CC_PalInit+0x4c>)
    417e:	f000 f843 	bl	4208 <CC_PalMutexCreate>
    4182:	2800      	cmp	r0, #0
    4184:	d1f9      	bne.n	417a <CC_PalInit+0xa>
    4186:	4c0e      	ldr	r4, [pc, #56]	; (41c0 <CC_PalInit+0x50>)
    4188:	4620      	mov	r0, r4
    418a:	f000 f83d 	bl	4208 <CC_PalMutexCreate>
    418e:	2800      	cmp	r0, #0
    4190:	d1f3      	bne.n	417a <CC_PalInit+0xa>
    4192:	4b0c      	ldr	r3, [pc, #48]	; (41c4 <CC_PalInit+0x54>)
    4194:	480c      	ldr	r0, [pc, #48]	; (41c8 <CC_PalInit+0x58>)
    4196:	601c      	str	r4, [r3, #0]
    4198:	f000 f836 	bl	4208 <CC_PalMutexCreate>
    419c:	4601      	mov	r1, r0
    419e:	2800      	cmp	r0, #0
    41a0:	d1eb      	bne.n	417a <CC_PalInit+0xa>
    41a2:	f000 f82d 	bl	4200 <CC_PalDmaInit>
    41a6:	4604      	mov	r4, r0
    41a8:	b108      	cbz	r0, 41ae <CC_PalInit+0x3e>
    41aa:	4620      	mov	r0, r4
    41ac:	bd10      	pop	{r4, pc}
    41ae:	f000 f83f 	bl	4230 <CC_PalPowerSaveModeInit>
    41b2:	4620      	mov	r0, r4
    41b4:	e7fa      	b.n	41ac <CC_PalInit+0x3c>
    41b6:	bf00      	nop
    41b8:	200000a0 	.word	0x200000a0
    41bc:	20000094 	.word	0x20000094
    41c0:	2000009c 	.word	0x2000009c
    41c4:	200000a4 	.word	0x200000a4
    41c8:	20000098 	.word	0x20000098

000041cc <CC_PalTerminate>:
    41cc:	b508      	push	{r3, lr}
    41ce:	4808      	ldr	r0, [pc, #32]	; (41f0 <CC_PalTerminate+0x24>)
    41d0:	f000 f824 	bl	421c <CC_PalMutexDestroy>
    41d4:	4807      	ldr	r0, [pc, #28]	; (41f4 <CC_PalTerminate+0x28>)
    41d6:	f000 f821 	bl	421c <CC_PalMutexDestroy>
    41da:	4807      	ldr	r0, [pc, #28]	; (41f8 <CC_PalTerminate+0x2c>)
    41dc:	f000 f81e 	bl	421c <CC_PalMutexDestroy>
    41e0:	4806      	ldr	r0, [pc, #24]	; (41fc <CC_PalTerminate+0x30>)
    41e2:	f000 f81b 	bl	421c <CC_PalMutexDestroy>
    41e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    41ea:	f000 b80b 	b.w	4204 <CC_PalDmaTerminate>
    41ee:	bf00      	nop
    41f0:	200000a0 	.word	0x200000a0
    41f4:	20000094 	.word	0x20000094
    41f8:	2000009c 	.word	0x2000009c
    41fc:	20000098 	.word	0x20000098

00004200 <CC_PalDmaInit>:
    4200:	2000      	movs	r0, #0
    4202:	4770      	bx	lr

00004204 <CC_PalDmaTerminate>:
    4204:	4770      	bx	lr
    4206:	bf00      	nop

00004208 <CC_PalMutexCreate>:
    4208:	b508      	push	{r3, lr}
    420a:	4b03      	ldr	r3, [pc, #12]	; (4218 <CC_PalMutexCreate+0x10>)
    420c:	6802      	ldr	r2, [r0, #0]
    420e:	681b      	ldr	r3, [r3, #0]
    4210:	6810      	ldr	r0, [r2, #0]
    4212:	4798      	blx	r3
    4214:	2000      	movs	r0, #0
    4216:	bd08      	pop	{r3, pc}
    4218:	20000058 	.word	0x20000058

0000421c <CC_PalMutexDestroy>:
    421c:	b508      	push	{r3, lr}
    421e:	4b03      	ldr	r3, [pc, #12]	; (422c <CC_PalMutexDestroy+0x10>)
    4220:	6802      	ldr	r2, [r0, #0]
    4222:	685b      	ldr	r3, [r3, #4]
    4224:	6810      	ldr	r0, [r2, #0]
    4226:	4798      	blx	r3
    4228:	2000      	movs	r0, #0
    422a:	bd08      	pop	{r3, pc}
    422c:	20000058 	.word	0x20000058

00004230 <CC_PalPowerSaveModeInit>:
    4230:	b570      	push	{r4, r5, r6, lr}
    4232:	4c09      	ldr	r4, [pc, #36]	; (4258 <CC_PalPowerSaveModeInit+0x28>)
    4234:	4d09      	ldr	r5, [pc, #36]	; (425c <CC_PalPowerSaveModeInit+0x2c>)
    4236:	6920      	ldr	r0, [r4, #16]
    4238:	68ab      	ldr	r3, [r5, #8]
    423a:	4798      	blx	r3
    423c:	b118      	cbz	r0, 4246 <CC_PalPowerSaveModeInit+0x16>
    423e:	4b08      	ldr	r3, [pc, #32]	; (4260 <CC_PalPowerSaveModeInit+0x30>)
    4240:	4808      	ldr	r0, [pc, #32]	; (4264 <CC_PalPowerSaveModeInit+0x34>)
    4242:	685b      	ldr	r3, [r3, #4]
    4244:	4798      	blx	r3
    4246:	2100      	movs	r1, #0
    4248:	4a07      	ldr	r2, [pc, #28]	; (4268 <CC_PalPowerSaveModeInit+0x38>)
    424a:	68eb      	ldr	r3, [r5, #12]
    424c:	6011      	str	r1, [r2, #0]
    424e:	6920      	ldr	r0, [r4, #16]
    4250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4254:	4718      	bx	r3
    4256:	bf00      	nop
    4258:	20000068 	.word	0x20000068
    425c:	20000058 	.word	0x20000058
    4260:	20000048 	.word	0x20000048
    4264:	00005408 	.word	0x00005408
    4268:	200008a8 	.word	0x200008a8

0000426c <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    426c:	b508      	push	{r3, lr}
	spm_config();
    426e:	f7fd fa2f 	bl	16d0 <spm_config>
	spm_jump();
}
    4272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    4276:	f7fd b9e3 	b.w	1640 <spm_jump>

0000427a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    427a:	4603      	mov	r3, r0
    427c:	b158      	cbz	r0, 4296 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    427e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4280:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4284:	2a01      	cmp	r2, #1
    4286:	d003      	beq.n	4290 <sys_notify_validate+0x16>
    4288:	2a03      	cmp	r2, #3
    428a:	d104      	bne.n	4296 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    428c:	6802      	ldr	r2, [r0, #0]
    428e:	b112      	cbz	r2, 4296 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4290:	2000      	movs	r0, #0
    4292:	6098      	str	r0, [r3, #8]
    4294:	4770      	bx	lr
		return -EINVAL;
    4296:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    429a:	4770      	bx	lr

0000429c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    429c:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    429e:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    42a0:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    42a4:	2a03      	cmp	r2, #3
    42a6:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    42aa:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = 0;
    42ac:	bf14      	ite	ne
    42ae:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    42b0:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    42b2:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    42b4:	4770      	bx	lr

000042b6 <arch_printk_char_out>:
}
    42b6:	2000      	movs	r0, #0
    42b8:	4770      	bx	lr

000042ba <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    42ba:	b40f      	push	{r0, r1, r2, r3}
    42bc:	b507      	push	{r0, r1, r2, lr}
    42be:	a904      	add	r1, sp, #16
    42c0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    42c4:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    42c6:	f7fc f96b 	bl	5a0 <vprintk>
	}
	va_end(ap);
}
    42ca:	b003      	add	sp, #12
    42cc:	f85d eb04 	ldr.w	lr, [sp], #4
    42d0:	b004      	add	sp, #16
    42d2:	4770      	bx	lr

000042d4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    42d4:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    42d6:	f013 0307 	ands.w	r3, r3, #7
    42da:	d105      	bne.n	42e8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    42dc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    42de:	2b00      	cmp	r3, #0
    42e0:	bf0c      	ite	eq
    42e2:	2000      	moveq	r0, #0
    42e4:	2003      	movne	r0, #3
    42e6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    42e8:	2b02      	cmp	r3, #2
    42ea:	d105      	bne.n	42f8 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    42ec:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    42ee:	2b00      	cmp	r3, #0
    42f0:	bf14      	ite	ne
    42f2:	2000      	movne	r0, #0
    42f4:	2004      	moveq	r0, #4
    42f6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    42f8:	2b01      	cmp	r3, #1
    42fa:	d105      	bne.n	4308 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    42fc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    42fe:	2b00      	cmp	r3, #0
    4300:	bf0c      	ite	eq
    4302:	2000      	moveq	r0, #0
    4304:	2005      	movne	r0, #5
    4306:	4770      	bx	lr
	int evt = EVT_NOP;
    4308:	2000      	movs	r0, #0
}
    430a:	4770      	bx	lr

0000430c <notify_one>:
{
    430c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4310:	460d      	mov	r5, r1
    4312:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4314:	4619      	mov	r1, r3
    4316:	1d28      	adds	r0, r5, #4
{
    4318:	4690      	mov	r8, r2
    431a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    431c:	f7ff ffbe 	bl	429c <sys_notify_finalize>
	if (cb) {
    4320:	4604      	mov	r4, r0
    4322:	b138      	cbz	r0, 4334 <notify_one+0x28>
		cb(mgr, cli, state, res);
    4324:	4633      	mov	r3, r6
    4326:	4642      	mov	r2, r8
    4328:	4629      	mov	r1, r5
    432a:	4638      	mov	r0, r7
    432c:	46a4      	mov	ip, r4
}
    432e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4332:	4760      	bx	ip
}
    4334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004338 <transition_complete>:
{
    4338:	b410      	push	{r4}
	__asm__ volatile(
    433a:	f04f 0420 	mov.w	r4, #32
    433e:	f3ef 8211 	mrs	r2, BASEPRI
    4342:	f384 8811 	msr	BASEPRI, r4
    4346:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    434a:	6141      	str	r1, [r0, #20]
}
    434c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    434e:	2101      	movs	r1, #1
    4350:	f7fc b934 	b.w	5bc <process_event>

00004354 <validate_args>:
{
    4354:	b510      	push	{r4, lr}
    4356:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4358:	b140      	cbz	r0, 436c <validate_args+0x18>
    435a:	b139      	cbz	r1, 436c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    435c:	1d08      	adds	r0, r1, #4
    435e:	f7ff ff8c 	bl	427a <sys_notify_validate>
	if ((rv == 0)
    4362:	b928      	cbnz	r0, 4370 <validate_args+0x1c>
	    && ((cli->notify.flags
    4364:	68a3      	ldr	r3, [r4, #8]
    4366:	f033 0303 	bics.w	r3, r3, #3
    436a:	d001      	beq.n	4370 <validate_args+0x1c>
		rv = -EINVAL;
    436c:	f06f 0015 	mvn.w	r0, #21
}
    4370:	bd10      	pop	{r4, pc}

00004372 <onoff_manager_init>:
{
    4372:	b538      	push	{r3, r4, r5, lr}
    4374:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4376:	4605      	mov	r5, r0
    4378:	b158      	cbz	r0, 4392 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    437a:	b151      	cbz	r1, 4392 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    437c:	680b      	ldr	r3, [r1, #0]
    437e:	b143      	cbz	r3, 4392 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4380:	684b      	ldr	r3, [r1, #4]
    4382:	b133      	cbz	r3, 4392 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4384:	221c      	movs	r2, #28
    4386:	2100      	movs	r1, #0
    4388:	f000 fae0 	bl	494c <memset>
	return 0;
    438c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    438e:	612c      	str	r4, [r5, #16]
}
    4390:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    4392:	f06f 0015 	mvn.w	r0, #21
    4396:	e7fb      	b.n	4390 <onoff_manager_init+0x1e>

00004398 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4398:	b570      	push	{r4, r5, r6, lr}
    439a:	4604      	mov	r4, r0
    439c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    439e:	f7ff ffd9 	bl	4354 <validate_args>

	if (rv < 0) {
    43a2:	1e05      	subs	r5, r0, #0
    43a4:	db31      	blt.n	440a <onoff_request+0x72>
    43a6:	f04f 0320 	mov.w	r3, #32
    43aa:	f3ef 8111 	mrs	r1, BASEPRI
    43ae:	f383 8811 	msr	BASEPRI, r3
    43b2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    43b6:	f64f 75ff 	movw	r5, #65535	; 0xffff
    43ba:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    43bc:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    43be:	42ab      	cmp	r3, r5
    43c0:	f000 0207 	and.w	r2, r0, #7
    43c4:	d02e      	beq.n	4424 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    43c6:	2a02      	cmp	r2, #2
    43c8:	d10e      	bne.n	43e8 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    43ca:	3301      	adds	r3, #1
    43cc:	8363      	strh	r3, [r4, #26]
	rv = state;
    43ce:	4615      	mov	r5, r2
		notify = true;
    43d0:	2301      	movs	r3, #1
	__asm__ volatile(
    43d2:	f381 8811 	msr	BASEPRI, r1
    43d6:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    43da:	b1b3      	cbz	r3, 440a <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    43dc:	2300      	movs	r3, #0
    43de:	4631      	mov	r1, r6
    43e0:	4620      	mov	r0, r4
    43e2:	f7ff ff93 	bl	430c <notify_one>
    43e6:	e010      	b.n	440a <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    43e8:	0783      	lsls	r3, r0, #30
    43ea:	d001      	beq.n	43f0 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    43ec:	2a06      	cmp	r2, #6
    43ee:	d10e      	bne.n	440e <onoff_request+0x76>
	parent->next = child;
    43f0:	2300      	movs	r3, #0
    43f2:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    43f4:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    43f6:	b993      	cbnz	r3, 441e <onoff_request+0x86>
	list->head = node;
    43f8:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    43fc:	4615      	mov	r5, r2
    43fe:	b962      	cbnz	r2, 441a <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    4400:	460a      	mov	r2, r1
    4402:	4620      	mov	r0, r4
    4404:	2102      	movs	r1, #2
    4406:	f7fc f8d9 	bl	5bc <process_event>
		}
	}

	return rv;
}
    440a:	4628      	mov	r0, r5
    440c:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    440e:	2a05      	cmp	r2, #5
    4410:	bf0c      	ite	eq
    4412:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    4416:	f06f 0504 	mvnne.w	r5, #4
    441a:	2300      	movs	r3, #0
    441c:	e7d9      	b.n	43d2 <onoff_request+0x3a>
	parent->next = child;
    441e:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4420:	6066      	str	r6, [r4, #4]
}
    4422:	e7eb      	b.n	43fc <onoff_request+0x64>
		rv = -EAGAIN;
    4424:	f06f 050a 	mvn.w	r5, #10
    4428:	e7f7      	b.n	441a <onoff_request+0x82>

0000442a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    442a:	4604      	mov	r4, r0
    442c:	b508      	push	{r3, lr}
    442e:	4608      	mov	r0, r1
    4430:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    4432:	461a      	mov	r2, r3
    4434:	47a0      	blx	r4
	return z_impl_k_current_get();
    4436:	f7ff fb65 	bl	3b04 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    443a:	f7fd ff65 	bl	2308 <z_impl_k_thread_abort>

0000443e <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    443e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    4440:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    4444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    4448:	bf2c      	ite	cs
    444a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    444e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    4452:	4770      	bx	lr

00004454 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    4454:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    4458:	6880      	ldr	r0, [r0, #8]
    445a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    445e:	bf2c      	ite	cs
    4460:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    4464:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    4468:	4770      	bx	lr

0000446a <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    446a:	2201      	movs	r2, #1
{
    446c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    446e:	f7ff ffe6 	bl	443e <chunk_field>
}
    4472:	40d0      	lsrs	r0, r2
    4474:	bd08      	pop	{r3, pc}

00004476 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    4476:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    4478:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    447c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4480:	d308      	bcc.n	4494 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    4482:	684b      	ldr	r3, [r1, #4]
		if (used) {
    4484:	b11a      	cbz	r2, 448e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    4486:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    448a:	604b      	str	r3, [r1, #4]
    448c:	4770      	bx	lr
    448e:	f023 0301 	bic.w	r3, r3, #1
    4492:	e7fa      	b.n	448a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    4494:	884b      	ldrh	r3, [r1, #2]
		if (used) {
    4496:	b11a      	cbz	r2, 44a0 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    4498:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    449c:	804b      	strh	r3, [r1, #2]
		}
	}
}
    449e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    44a0:	f023 0301 	bic.w	r3, r3, #1
    44a4:	e7fa      	b.n	449c <set_chunk_used+0x26>

000044a6 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    44a6:	0053      	lsls	r3, r2, #1
    44a8:	2201      	movs	r2, #1
    44aa:	f7ff bfd3 	b.w	4454 <chunk_set>

000044ae <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    44ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    44b2:	bf2c      	ite	cs
    44b4:	2008      	movcs	r0, #8
    44b6:	2004      	movcc	r0, #4
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    44b8:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    44ba:	3008      	adds	r0, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    44bc:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
    44c0:	fab0 f080 	clz	r0, r0
}
    44c4:	f1c0 001f 	rsb	r0, r0, #31
    44c8:	4770      	bx	lr

000044ca <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    44ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44ce:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
    44d0:	6886      	ldr	r6, [r0, #8]
    44d2:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
    44d4:	f7ff ffc9 	bl	446a <chunk_size>
    44d8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    44dc:	4601      	mov	r1, r0
    44de:	d301      	bcc.n	44e4 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    44e0:	2801      	cmp	r0, #1
    44e2:	d033      	beq.n	454c <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
    44e4:	4630      	mov	r0, r6
    44e6:	f7ff ffe2 	bl	44ae <bucket_idx.isra.0>
	if (b->next == 0U) {
    44ea:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    44ee:	6916      	ldr	r6, [r2, #16]
    44f0:	b99e      	cbnz	r6, 451a <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    44f2:	2301      	movs	r3, #1
    44f4:	fa03 f000 	lsl.w	r0, r3, r0
    44f8:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    44fa:	4629      	mov	r1, r5
    44fc:	4303      	orrs	r3, r0
    44fe:	60e3      	str	r3, [r4, #12]
    4500:	4620      	mov	r0, r4
		b->next = c;
    4502:	6115      	str	r5, [r2, #16]
    4504:	462b      	mov	r3, r5
    4506:	2202      	movs	r2, #2
    4508:	f7ff ffa4 	bl	4454 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    450c:	2203      	movs	r2, #3
    450e:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    4510:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    4512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4516:	f7ff bf9d 	b.w	4454 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    451a:	2202      	movs	r2, #2
    451c:	4631      	mov	r1, r6
    451e:	4620      	mov	r0, r4
    4520:	f7ff ff8d 	bl	443e <chunk_field>
    4524:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    4526:	4603      	mov	r3, r0
    4528:	4629      	mov	r1, r5
    452a:	4620      	mov	r0, r4
    452c:	f7ff ff92 	bl	4454 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    4530:	2203      	movs	r2, #3
    4532:	4633      	mov	r3, r6
    4534:	4629      	mov	r1, r5
    4536:	4620      	mov	r0, r4
    4538:	f7ff ff8c 	bl	4454 <chunk_set>
    453c:	4639      	mov	r1, r7
    453e:	462b      	mov	r3, r5
    4540:	4620      	mov	r0, r4
    4542:	f7ff ff87 	bl	4454 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    4546:	2202      	movs	r2, #2
    4548:	4631      	mov	r1, r6
    454a:	e7e1      	b.n	4510 <free_list_add+0x46>
    454c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004550 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    4550:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    4554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4556:	bf2c      	ite	cs
    4558:	2408      	movcs	r4, #8
    455a:	2404      	movcc	r4, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    455c:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
    455e:	1b14      	subs	r4, r2, r4
	h->chunk0_hdr_area = 0;
    4560:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    4562:	1dce      	adds	r6, r1, #7
    4564:	f026 0607 	bic.w	r6, r6, #7
	heap->heap = h;
    4568:	6006      	str	r6, [r0, #0]
	h->chunk0_hdr_area = 0;
    456a:	e9c6 2300 	strd	r2, r3, [r6]
	h->len = buf_sz;
	h->avail_buckets = 0;
    456e:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    4570:	440c      	add	r4, r1
    4572:	f024 0407 	bic.w	r4, r4, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    4576:	1ba4      	subs	r4, r4, r6
    4578:	08e4      	lsrs	r4, r4, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    457a:	4621      	mov	r1, r4
    457c:	4620      	mov	r0, r4
	h->len = buf_sz;
    457e:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
    4580:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    4582:	f7ff ff94 	bl	44ae <bucket_idx.isra.0>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    4586:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    4588:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    458a:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    458c:	351b      	adds	r5, #27
    458e:	08ed      	lsrs	r5, r5, #3
	for (int i = 0; i < nb_buckets; i++) {
    4590:	f106 0210 	add.w	r2, r6, #16
    4594:	428b      	cmp	r3, r1
    4596:	db28      	blt.n	45ea <sys_heap_init+0x9a>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    4598:	462a      	mov	r2, r5
    459a:	4630      	mov	r0, r6
    459c:	2100      	movs	r1, #0
    459e:	f7ff ff82 	bl	44a6 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    45a2:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
    45a4:	4630      	mov	r0, r6
    45a6:	2201      	movs	r2, #1
    45a8:	2100      	movs	r1, #0
    45aa:	f7ff ff64 	bl	4476 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    45ae:	463a      	mov	r2, r7
    45b0:	4629      	mov	r1, r5
    45b2:	f7ff ff78 	bl	44a6 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    45b6:	462b      	mov	r3, r5
    45b8:	2200      	movs	r2, #0
    45ba:	4629      	mov	r1, r5
    45bc:	4630      	mov	r0, r6
    45be:	f7ff ff49 	bl	4454 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    45c2:	4621      	mov	r1, r4
    45c4:	4630      	mov	r0, r6
    45c6:	f7ff ff6e 	bl	44a6 <set_chunk_size>
    45ca:	463b      	mov	r3, r7
    45cc:	4621      	mov	r1, r4
    45ce:	4630      	mov	r0, r6
    45d0:	2200      	movs	r2, #0
    45d2:	f7ff ff3f 	bl	4454 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    45d6:	4621      	mov	r1, r4
    45d8:	4630      	mov	r0, r6
    45da:	2201      	movs	r2, #1
    45dc:	f7ff ff4b 	bl	4476 <set_chunk_used>

	free_list_add(h, chunk0_size);
    45e0:	4629      	mov	r1, r5
}
    45e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    45e6:	f7ff bf70 	b.w	44ca <free_list_add>
		h->buckets[i].next = 0;
    45ea:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    45ee:	3301      	adds	r3, #1
    45f0:	e7d0      	b.n	4594 <sys_heap_init+0x44>

000045f2 <encode_uint>:
{
    45f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45f6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    45f8:	78d3      	ldrb	r3, [r2, #3]
{
    45fa:	4680      	mov	r8, r0
	switch (specifier) {
    45fc:	2b6f      	cmp	r3, #111	; 0x6f
{
    45fe:	460f      	mov	r7, r1
    4600:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4602:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    4606:	d029      	beq.n	465c <encode_uint+0x6a>
    4608:	d824      	bhi.n	4654 <encode_uint+0x62>
		return 16;
    460a:	2b58      	cmp	r3, #88	; 0x58
    460c:	bf14      	ite	ne
    460e:	260a      	movne	r6, #10
    4610:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    4612:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    4616:	4632      	mov	r2, r6
    4618:	2300      	movs	r3, #0
    461a:	4640      	mov	r0, r8
    461c:	4639      	mov	r1, r7
    461e:	f7fb fe0d 	bl	23c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4622:	2a09      	cmp	r2, #9
    4624:	b2d4      	uxtb	r4, r2
    4626:	d81e      	bhi.n	4666 <encode_uint+0x74>
    4628:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    462a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    462c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    462e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4632:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    4636:	d301      	bcc.n	463c <encode_uint+0x4a>
    4638:	45d1      	cmp	r9, sl
    463a:	d811      	bhi.n	4660 <encode_uint+0x6e>
	if (conv->flag_hash) {
    463c:	782b      	ldrb	r3, [r5, #0]
    463e:	069b      	lsls	r3, r3, #26
    4640:	d505      	bpl.n	464e <encode_uint+0x5c>
		if (radix == 8) {
    4642:	2e08      	cmp	r6, #8
    4644:	d115      	bne.n	4672 <encode_uint+0x80>
			conv->altform_0 = true;
    4646:	78ab      	ldrb	r3, [r5, #2]
    4648:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    464c:	70ab      	strb	r3, [r5, #2]
}
    464e:	4648      	mov	r0, r9
    4650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    4654:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    4658:	2b70      	cmp	r3, #112	; 0x70
    465a:	e7d7      	b.n	460c <encode_uint+0x1a>
	switch (specifier) {
    465c:	2608      	movs	r6, #8
    465e:	e7d8      	b.n	4612 <encode_uint+0x20>
		value /= radix;
    4660:	4680      	mov	r8, r0
    4662:	460f      	mov	r7, r1
    4664:	e7d7      	b.n	4616 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4666:	f1bb 0f19 	cmp.w	fp, #25
    466a:	bf94      	ite	ls
    466c:	3437      	addls	r4, #55	; 0x37
    466e:	3457      	addhi	r4, #87	; 0x57
    4670:	e7db      	b.n	462a <encode_uint+0x38>
		} else if (radix == 16) {
    4672:	2e10      	cmp	r6, #16
    4674:	d1eb      	bne.n	464e <encode_uint+0x5c>
			conv->altform_0c = true;
    4676:	78ab      	ldrb	r3, [r5, #2]
    4678:	f043 0310 	orr.w	r3, r3, #16
    467c:	e7e6      	b.n	464c <encode_uint+0x5a>

0000467e <outs>:
{
    467e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4682:	4607      	mov	r7, r0
    4684:	4688      	mov	r8, r1
    4686:	4615      	mov	r5, r2
    4688:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    468a:	4614      	mov	r4, r2
    468c:	42b4      	cmp	r4, r6
    468e:	eba4 0005 	sub.w	r0, r4, r5
    4692:	d302      	bcc.n	469a <outs+0x1c>
    4694:	b93e      	cbnz	r6, 46a6 <outs+0x28>
    4696:	7823      	ldrb	r3, [r4, #0]
    4698:	b12b      	cbz	r3, 46a6 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    469a:	4641      	mov	r1, r8
    469c:	f814 0b01 	ldrb.w	r0, [r4], #1
    46a0:	47b8      	blx	r7
		if (rc < 0) {
    46a2:	2800      	cmp	r0, #0
    46a4:	daf2      	bge.n	468c <outs+0xe>
}
    46a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000046aa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    46aa:	4770      	bx	lr

000046ac <z_platform_init>:
	SystemInit();
    46ac:	f7fe bad8 	b.w	2c60 <SystemInit>

000046b0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    46b0:	220c      	movs	r2, #12
    46b2:	68c3      	ldr	r3, [r0, #12]
    46b4:	b2c9      	uxtb	r1, r1
    46b6:	fb01 3302 	mla	r3, r1, r2, r3
    46ba:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    46bc:	f000 0007 	and.w	r0, r0, #7
    46c0:	4770      	bx	lr

000046c2 <set_on_state>:
	__asm__ volatile(
    46c2:	f04f 0320 	mov.w	r3, #32
    46c6:	f3ef 8211 	mrs	r2, BASEPRI
    46ca:	f383 8811 	msr	BASEPRI, r3
    46ce:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    46d2:	6803      	ldr	r3, [r0, #0]
    46d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    46d8:	f043 0302 	orr.w	r3, r3, #2
    46dc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    46de:	f382 8811 	msr	BASEPRI, r2
    46e2:	f3bf 8f6f 	isb	sy
}
    46e6:	4770      	bx	lr

000046e8 <stop>:
{
    46e8:	4603      	mov	r3, r0
    46ea:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    46ec:	68c0      	ldr	r0, [r0, #12]
	return &data->subsys[type];
    46ee:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    46f0:	f04f 0420 	mov.w	r4, #32
    46f4:	f3ef 8611 	mrs	r6, BASEPRI
    46f8:	f384 8811 	msr	BASEPRI, r4
    46fc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4700:	250c      	movs	r5, #12
    4702:	fb05 0401 	mla	r4, r5, r1, r0
    4706:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4708:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    470c:	d001      	beq.n	4712 <stop+0x2a>
    470e:	42a2      	cmp	r2, r4
    4710:	d111      	bne.n	4736 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4712:	2201      	movs	r2, #1
    4714:	fb05 0001 	mla	r0, r5, r1, r0
    4718:	6782      	str	r2, [r0, #120]	; 0x78
	int err = 0;
    471a:	2000      	movs	r0, #0
	__asm__ volatile(
    471c:	f386 8811 	msr	BASEPRI, r6
    4720:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    4724:	b930      	cbnz	r0, 4734 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    4726:	220c      	movs	r2, #12
    4728:	685b      	ldr	r3, [r3, #4]
    472a:	fb02 3101 	mla	r1, r2, r1, r3
    472e:	684b      	ldr	r3, [r1, #4]
    4730:	4798      	blx	r3
	return 0;
    4732:	2000      	movs	r0, #0
}
    4734:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    4736:	f04f 30ff 	mov.w	r0, #4294967295
    473a:	e7ef      	b.n	471c <stop+0x34>

0000473c <api_stop>:
	return stop(dev, subsys, CTX_API);
    473c:	2280      	movs	r2, #128	; 0x80
    473e:	f7ff bfd3 	b.w	46e8 <stop>

00004742 <async_start>:
{
    4742:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4744:	9f06      	ldr	r7, [sp, #24]
    4746:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
    4748:	68c4      	ldr	r4, [r0, #12]
	return &data->subsys[type];
    474a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    474c:	f04f 0020 	mov.w	r0, #32
    4750:	f3ef 8c11 	mrs	ip, BASEPRI
    4754:	f380 8811 	msr	BASEPRI, r0
    4758:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    475c:	260c      	movs	r6, #12
    475e:	fb06 4601 	mla	r6, r6, r1, r4
    4762:	6fb0      	ldr	r0, [r6, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4764:	f000 0e07 	and.w	lr, r0, #7
    4768:	f1be 0f01 	cmp.w	lr, #1
    476c:	d110      	bne.n	4790 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    476e:	67b7      	str	r7, [r6, #120]	; 0x78
	int err = 0;
    4770:	2600      	movs	r6, #0
	__asm__ volatile(
    4772:	f38c 8811 	msr	BASEPRI, ip
    4776:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    477a:	b93e      	cbnz	r6, 478c <async_start+0x4a>
	subdata->cb = cb;
    477c:	200c      	movs	r0, #12
    477e:	4341      	muls	r1, r0
    4780:	440c      	add	r4, r1
	subdata->user_data = user_data;
    4782:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    4786:	686b      	ldr	r3, [r5, #4]
    4788:	585b      	ldr	r3, [r3, r1]
    478a:	4798      	blx	r3
}
    478c:	4630      	mov	r0, r6
    478e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4790:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    4794:	4287      	cmp	r7, r0
    4796:	bf14      	ite	ne
    4798:	f04f 36ff 	movne.w	r6, #4294967295
    479c:	f06f 0644 	mvneq.w	r6, #68	; 0x44
    47a0:	e7e7      	b.n	4772 <async_start+0x30>

000047a2 <api_start>:
{
    47a2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    47a4:	2480      	movs	r4, #128	; 0x80
    47a6:	9400      	str	r4, [sp, #0]
    47a8:	f7ff ffcb 	bl	4742 <async_start>
}
    47ac:	b002      	add	sp, #8
    47ae:	bd10      	pop	{r4, pc}

000047b0 <onoff_started_callback>:
{
    47b0:	b410      	push	{r4}
	notify(mgr, 0);
    47b2:	241c      	movs	r4, #28
	return &data->mgr[type];
    47b4:	68c0      	ldr	r0, [r0, #12]
    47b6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    47b8:	fb03 0004 	mla	r0, r3, r4, r0
    47bc:	2100      	movs	r1, #0
}
    47be:	bc10      	pop	{r4}
	notify(mgr, 0);
    47c0:	4710      	bx	r2

000047c2 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    47c2:	2003      	movs	r0, #3
    47c4:	f000 b955 	b.w	4a72 <nrfx_clock_start>

000047c8 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    47c8:	2002      	movs	r0, #2
    47ca:	f000 b952 	b.w	4a72 <nrfx_clock_start>

000047ce <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    47ce:	2000      	movs	r0, #0
    47d0:	f000 b94f 	b.w	4a72 <nrfx_clock_start>

000047d4 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    47d4:	2003      	movs	r0, #3
    47d6:	f000 b99b 	b.w	4b10 <nrfx_clock_stop>

000047da <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    47da:	2002      	movs	r0, #2
    47dc:	f000 b998 	b.w	4b10 <nrfx_clock_stop>

000047e0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    47e0:	2000      	movs	r0, #0
    47e2:	f000 b995 	b.w	4b10 <nrfx_clock_stop>

000047e6 <blocking_start_callback>:
{
    47e6:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    47e8:	f7ff b992 	b.w	3b10 <z_impl_k_sem_give>

000047ec <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    47ec:	4770      	bx	lr

000047ee <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    47ee:	4770      	bx	lr

000047f0 <sys_clock_disable>:
    47f0:	4770      	bx	lr

000047f2 <spm_secure_services_init>:
}
    47f2:	2000      	movs	r0, #0
    47f4:	4770      	bx	lr

000047f6 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    47f6:	2000      	movs	r0, #0
    47f8:	f7fc bbf4 	b.w	fe4 <sys_reboot>

000047fc <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    47fc:	2100      	movs	r1, #0
    47fe:	2001      	movs	r0, #1
    4800:	f7fd ba34 	b.w	1c6c <z_arm_fatal_error>

00004804 <irq_target_state_set>:
 *
 * @return The resulting target state of the given IRQ
 */
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
    4804:	4602      	mov	r2, r0
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
		/* Set target to Secure */
		result = NVIC_ClearTargetState(irq);
    4806:	b243      	sxtb	r3, r0
	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
    4808:	4608      	mov	r0, r1
    480a:	b9c1      	cbnz	r1, 483e <irq_target_state_set+0x3a>
  if ((int32_t)(IRQn) >= 0)
    480c:	2b00      	cmp	r3, #0
    480e:	db27      	blt.n	4860 <irq_target_state_set+0x5c>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    4810:	2001      	movs	r0, #1
    4812:	095b      	lsrs	r3, r3, #5
    4814:	009b      	lsls	r3, r3, #2
    4816:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    481a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    481e:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    4822:	f002 021f 	and.w	r2, r2, #31
    4826:	4090      	lsls	r0, r2
    4828:	ea21 0100 	bic.w	r1, r1, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    482c:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    4830:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    4834:	40d0      	lsrs	r0, r2
    4836:	f000 0001 	and.w	r0, r0, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
    483a:	b2c0      	uxtb	r0, r0
    483c:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    483e:	2b00      	cmp	r3, #0
    4840:	db0d      	blt.n	485e <irq_target_state_set+0x5a>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    4842:	2101      	movs	r1, #1
    4844:	095b      	lsrs	r3, r3, #5
    4846:	009b      	lsls	r3, r3, #2
    4848:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    484c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4850:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    4854:	f002 021f 	and.w	r2, r2, #31
    4858:	4091      	lsls	r1, r2
    485a:	4301      	orrs	r1, r0
    485c:	e7e6      	b.n	482c <irq_target_state_set+0x28>
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
    485e:	2000      	movs	r0, #0
	}
}
    4860:	4770      	bx	lr

00004862 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    4862:	6e83      	ldr	r3, [r0, #104]	; 0x68
    4864:	f383 880b 	msr	PSPLIM, r3
}
    4868:	4770      	bx	lr

0000486a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    486a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    486c:	6800      	ldr	r0, [r0, #0]
    486e:	f7fd b9fd 	b.w	1c6c <z_arm_fatal_error>

00004872 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    4872:	b508      	push	{r3, lr}
	handler();
    4874:	f7fd fa28 	bl	1cc8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4878:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    487c:	f7fd bce2 	b.w	2244 <z_arm_exc_exit>

00004880 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    4880:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    4884:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4888:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    488a:	bf08      	it	eq
    488c:	f06f 0015 	mvneq.w	r0, #21
    4890:	4770      	bx	lr

00004892 <arm_cmse_addr_is_secure>:
    4892:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
    4896:	f3c0 5080 	ubfx	r0, r0, #22, #1
    489a:	4770      	bx	lr

0000489c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    489c:	4603      	mov	r3, r0
	size_t n = 0;
    489e:	2000      	movs	r0, #0

	while (*s != '\0') {
    48a0:	5c1a      	ldrb	r2, [r3, r0]
    48a2:	b902      	cbnz	r2, 48a6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    48a4:	4770      	bx	lr
		n++;
    48a6:	3001      	adds	r0, #1
    48a8:	e7fa      	b.n	48a0 <strlen+0x4>

000048aa <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    48aa:	4603      	mov	r3, r0
	size_t n = 0;
    48ac:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    48ae:	5c1a      	ldrb	r2, [r3, r0]
    48b0:	b10a      	cbz	r2, 48b6 <strnlen+0xc>
    48b2:	4288      	cmp	r0, r1
    48b4:	d100      	bne.n	48b8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    48b6:	4770      	bx	lr
		n++;
    48b8:	3001      	adds	r0, #1
    48ba:	e7f8      	b.n	48ae <strnlen+0x4>

000048bc <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    48bc:	1e43      	subs	r3, r0, #1
    48be:	3901      	subs	r1, #1
    48c0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    48c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    48c8:	4282      	cmp	r2, r0
    48ca:	d101      	bne.n	48d0 <strcmp+0x14>
    48cc:	2a00      	cmp	r2, #0
    48ce:	d1f7      	bne.n	48c0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    48d0:	1a10      	subs	r0, r2, r0
    48d2:	4770      	bx	lr

000048d4 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    48d4:	4603      	mov	r3, r0
    48d6:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    48d8:	b15a      	cbz	r2, 48f2 <memcmp+0x1e>
    48da:	3901      	subs	r1, #1
    48dc:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    48de:	f813 0b01 	ldrb.w	r0, [r3], #1
    48e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    48e6:	42a3      	cmp	r3, r4
    48e8:	d001      	beq.n	48ee <memcmp+0x1a>
    48ea:	4290      	cmp	r0, r2
    48ec:	d0f7      	beq.n	48de <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    48ee:	1a80      	subs	r0, r0, r2
}
    48f0:	bd10      	pop	{r4, pc}
		return 0;
    48f2:	4610      	mov	r0, r2
    48f4:	e7fc      	b.n	48f0 <memcmp+0x1c>

000048f6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    48f6:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    48f8:	ea81 0400 	eor.w	r4, r1, r0
    48fc:	07a5      	lsls	r5, r4, #30
    48fe:	4603      	mov	r3, r0
    4900:	d00b      	beq.n	491a <memcpy+0x24>
    4902:	3b01      	subs	r3, #1
    4904:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    4906:	4291      	cmp	r1, r2
    4908:	d11b      	bne.n	4942 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    490a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    490c:	2a00      	cmp	r2, #0
    490e:	d0fc      	beq.n	490a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    4910:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    4914:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    4916:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    491a:	079c      	lsls	r4, r3, #30
    491c:	d1f6      	bne.n	490c <memcpy+0x16>
    491e:	f022 0403 	bic.w	r4, r2, #3
    4922:	1f1d      	subs	r5, r3, #4
    4924:	0896      	lsrs	r6, r2, #2
    4926:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    4928:	42b9      	cmp	r1, r7
    492a:	d105      	bne.n	4938 <memcpy+0x42>
    492c:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
    4930:	4423      	add	r3, r4
    4932:	fb05 2206 	mla	r2, r5, r6, r2
    4936:	e7e4      	b.n	4902 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    4938:	f851 cb04 	ldr.w	ip, [r1], #4
    493c:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    4940:	e7f2      	b.n	4928 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    4942:	f811 4b01 	ldrb.w	r4, [r1], #1
    4946:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    494a:	e7dc      	b.n	4906 <memcpy+0x10>

0000494c <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    494c:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    494e:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
    4950:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    4952:	07a3      	lsls	r3, r4, #30
    4954:	d111      	bne.n	497a <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    4956:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
    495a:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    495e:	f022 0303 	bic.w	r3, r2, #3
    4962:	0896      	lsrs	r6, r2, #2
    4964:	4423      	add	r3, r4
    4966:	429c      	cmp	r4, r3
    4968:	d10d      	bne.n	4986 <memset+0x3a>
    496a:	f06f 0403 	mvn.w	r4, #3
    496e:	fb04 2206 	mla	r2, r4, r6, r2
    4972:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    4974:	4293      	cmp	r3, r2
    4976:	d109      	bne.n	498c <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4978:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    497a:	2a00      	cmp	r2, #0
    497c:	d0fc      	beq.n	4978 <memset+0x2c>
		*(d_byte++) = c_byte;
    497e:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
    4982:	3a01      	subs	r2, #1
    4984:	e7e5      	b.n	4952 <memset+0x6>
		*(d_word++) = c_word;
    4986:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
    498a:	e7ec      	b.n	4966 <memset+0x1a>
		*(d_byte++) = c_byte;
    498c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4990:	e7f0      	b.n	4974 <memset+0x28>

00004992 <_stdout_hook_default>:
}
    4992:	f04f 30ff 	mov.w	r0, #4294967295
    4996:	4770      	bx	lr

00004998 <uarte_nrfx_config_get>:
{
    4998:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    499a:	68c2      	ldr	r2, [r0, #12]
    499c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    49a0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    49a4:	2000      	movs	r0, #0
    49a6:	4770      	bx	lr

000049a8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    49a8:	6843      	ldr	r3, [r0, #4]
    49aa:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    49ac:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    49b0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    49b4:	4770      	bx	lr

000049b6 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    49b6:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    49b8:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    49ba:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    49bc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    49c0:	b148      	cbz	r0, 49d6 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49c2:	2000      	movs	r0, #0
	*c = data->rx_data;
    49c4:	7c52      	ldrb	r2, [r2, #17]
    49c6:	700a      	strb	r2, [r1, #0]
    49c8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    49cc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    49d0:	2201      	movs	r2, #1
    49d2:	601a      	str	r2, [r3, #0]
	return 0;
    49d4:	4770      	bx	lr
		return -1;
    49d6:	f04f 30ff 	mov.w	r0, #4294967295
}
    49da:	4770      	bx	lr

000049dc <is_tx_ready.isra.0>:
	return config->uarte_regs;
    49dc:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    49de:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    49e0:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    49e4:	b938      	cbnz	r0, 49f6 <is_tx_ready.isra.0+0x1a>
    49e6:	799b      	ldrb	r3, [r3, #6]
    49e8:	b933      	cbnz	r3, 49f8 <is_tx_ready.isra.0+0x1c>
    49ea:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    49ee:	3800      	subs	r0, #0
    49f0:	bf18      	it	ne
    49f2:	2001      	movne	r0, #1
    49f4:	4770      	bx	lr
    49f6:	2001      	movs	r0, #1
}
    49f8:	4770      	bx	lr

000049fa <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    49fa:	6843      	ldr	r3, [r0, #4]
    49fc:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    49fe:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    4a02:	05d2      	lsls	r2, r2, #23
    4a04:	d518      	bpl.n	4a38 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a06:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    4a0a:	b1aa      	cbz	r2, 4a38 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    4a0c:	f04f 0120 	mov.w	r1, #32
    4a10:	f3ef 8211 	mrs	r2, BASEPRI
    4a14:	f381 8811 	msr	BASEPRI, r1
    4a18:	f3bf 8f6f 	isb	sy
    4a1c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4a20:	b131      	cbz	r1, 4a30 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a22:	2100      	movs	r1, #0
    4a24:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    4a28:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a2c:	2101      	movs	r1, #1
    4a2e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    4a30:	f382 8811 	msr	BASEPRI, r2
    4a34:	f3bf 8f6f 	isb	sy
}
    4a38:	4770      	bx	lr

00004a3a <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
    4a3a:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    4a3c:	f7fc ff5c 	bl	18f8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    4a40:	f7fd f820 	bl	1a84 <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
    4a44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    4a48:	f7ff bac2 	b.w	3fd0 <nrf_cc3xx_platform_init_no_rng>

00004a4c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4a4c:	4700      	bx	r0

00004a4e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4a4e:	f000 b99b 	b.w	4d88 <z_impl_k_busy_wait>

00004a52 <nrfx_clock_enable>:
{
    4a52:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4a54:	2005      	movs	r0, #5
    4a56:	f7fd f891 	bl	1b7c <arch_irq_is_enabled>
    4a5a:	b910      	cbnz	r0, 4a62 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4a5c:	2005      	movs	r0, #5
    4a5e:	f7fd f87d 	bl	1b5c <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    4a62:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4a66:	2201      	movs	r2, #1
    4a68:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    4a6c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    4a70:	bd08      	pop	{r3, pc}

00004a72 <nrfx_clock_start>:
    switch (domain)
    4a72:	2803      	cmp	r0, #3
    4a74:	d84b      	bhi.n	4b0e <nrfx_clock_start+0x9c>
    4a76:	e8df f000 	tbb	[pc, r0]
    4a7a:	2302      	.short	0x2302
    4a7c:	3d2f      	.short	0x3d2f
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4a7e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4a82:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4a86:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4a8a:	03c9      	lsls	r1, r1, #15
    4a8c:	d512      	bpl.n	4ab4 <nrfx_clock_start+0x42>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    4a8e:	f003 0303 	and.w	r3, r3, #3
    4a92:	2b02      	cmp	r3, #2
    4a94:	d10e      	bne.n	4ab4 <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4a96:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a9a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4a9e:	2200      	movs	r2, #0
    4aa0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4aa4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    4aa8:	2202      	movs	r2, #2
    4aaa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4aae:	2201      	movs	r2, #1
    4ab0:	609a      	str	r2, [r3, #8]
}
    4ab2:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    4ab4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4ab8:	2201      	movs	r2, #1
    4aba:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    4abe:	e7ec      	b.n	4a9a <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ac0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4ac4:	2200      	movs	r2, #0
    4ac6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4aca:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    4ace:	2201      	movs	r2, #1
    4ad0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ad4:	601a      	str	r2, [r3, #0]
}
    4ad6:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ad8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4adc:	2200      	movs	r2, #0
    4ade:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    4ae2:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    4ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
    4aea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4aee:	2201      	movs	r2, #1
    4af0:	621a      	str	r2, [r3, #32]
}
    4af2:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4af4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4af8:	2200      	movs	r2, #0
    4afa:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4afe:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    4b02:	f44f 7280 	mov.w	r2, #256	; 0x100
    4b06:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b0a:	2201      	movs	r2, #1
    4b0c:	619a      	str	r2, [r3, #24]
}
    4b0e:	4770      	bx	lr

00004b10 <nrfx_clock_stop>:
{
    4b10:	b570      	push	{r4, r5, r6, lr}
    4b12:	4604      	mov	r4, r0
    4b14:	2803      	cmp	r0, #3
    4b16:	d83d      	bhi.n	4b94 <nrfx_clock_stop+0x84>
    4b18:	e8df f000 	tbb	[pc, r0]
    4b1c:	4b3d2102 	.word	0x4b3d2102
    p_reg->INTENCLR = mask;
    4b20:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b24:	2202      	movs	r2, #2
    4b26:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b2a:	2200      	movs	r2, #0
    4b2c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4b30:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b34:	2201      	movs	r2, #1
    4b36:	60da      	str	r2, [r3, #12]
    4b38:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    4b3c:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    switch (domain)
    4b40:	2c02      	cmp	r4, #2
    4b42:	d044      	beq.n	4bce <nrfx_clock_stop+0xbe>
    4b44:	2c03      	cmp	r4, #3
    4b46:	d045      	beq.n	4bd4 <nrfx_clock_stop+0xc4>
    4b48:	bb24      	cbnz	r4, 4b94 <nrfx_clock_stop+0x84>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4b4a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    4b4e:	03db      	lsls	r3, r3, #15
    4b50:	d520      	bpl.n	4b94 <nrfx_clock_stop+0x84>
    4b52:	2001      	movs	r0, #1
    4b54:	f7ff ff7b 	bl	4a4e <nrfx_busy_wait>
    4b58:	3d01      	subs	r5, #1
    4b5a:	d1f1      	bne.n	4b40 <nrfx_clock_stop+0x30>
    4b5c:	e01a      	b.n	4b94 <nrfx_clock_stop+0x84>
    p_reg->INTENCLR = mask;
    4b5e:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    4b62:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b64:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b66:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
    4b6a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b6e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    4b72:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b76:	6063      	str	r3, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4b78:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4b7c:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4b80:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4b84:	03d2      	lsls	r2, r2, #15
    4b86:	d505      	bpl.n	4b94 <nrfx_clock_stop+0x84>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    4b88:	b123      	cbz	r3, 4b94 <nrfx_clock_stop+0x84>
    4b8a:	2001      	movs	r0, #1
    4b8c:	f7ff ff5f 	bl	4a4e <nrfx_busy_wait>
    4b90:	3d01      	subs	r5, #1
    4b92:	d1f1      	bne.n	4b78 <nrfx_clock_stop+0x68>
}
    4b94:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    4b96:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
    4b9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ba2:	2200      	movs	r2, #0
    4ba4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    4ba8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4bac:	2201      	movs	r2, #1
    4bae:	625a      	str	r2, [r3, #36]	; 0x24
}
    4bb0:	e7c2      	b.n	4b38 <nrfx_clock_stop+0x28>
    p_reg->INTENCLR = mask;
    4bb2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
    4bba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4bbe:	2200      	movs	r2, #0
    4bc0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4bc4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4bc8:	2201      	movs	r2, #1
    4bca:	61da      	str	r2, [r3, #28]
}
    4bcc:	e7b4      	b.n	4b38 <nrfx_clock_stop+0x28>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    4bce:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    4bd2:	e7bc      	b.n	4b4e <nrfx_clock_stop+0x3e>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    4bd4:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    4bd8:	e7b9      	b.n	4b4e <nrfx_clock_stop+0x3e>

00004bda <z_pm_save_idle_exit>:
	z_clock_idle_exit();
    4bda:	f7ff be08 	b.w	47ee <z_clock_idle_exit>

00004bde <k_mem_slab_init>:
{
    4bde:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    4be0:	2400      	movs	r4, #0
    4be2:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4be4:	ea41 0402 	orr.w	r4, r1, r2
    4be8:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    4bec:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    4bf0:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4bf2:	d10c      	bne.n	4c0e <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    4bf4:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4bf6:	42a3      	cmp	r3, r4
    4bf8:	d103      	bne.n	4c02 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    4bfa:	e9c0 0000 	strd	r0, r0, [r0]
}
    4bfe:	2000      	movs	r0, #0
}
    4c00:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    4c02:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4c04:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    4c06:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    4c08:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    4c0a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    4c0c:	e7f3      	b.n	4bf6 <k_mem_slab_init+0x18>
		return -EINVAL;
    4c0e:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4c12:	e7f5      	b.n	4c00 <k_mem_slab_init+0x22>

00004c14 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    4c14:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4c18:	428b      	cmp	r3, r1
    4c1a:	d001      	beq.n	4c20 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    4c1c:	f7fe be84 	b.w	3928 <z_set_prio>
}
    4c20:	2000      	movs	r0, #0
    4c22:	4770      	bx	lr

00004c24 <z_impl_k_mutex_init>:
{
    4c24:	4603      	mov	r3, r0
	mutex->owner = NULL;
    4c26:	2000      	movs	r0, #0
    4c28:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    4c2c:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    4c30:	4770      	bx	lr

00004c32 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4c32:	4603      	mov	r3, r0
    4c34:	b920      	cbnz	r0, 4c40 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4c36:	f3ef 8205 	mrs	r2, IPSR
    4c3a:	b90a      	cbnz	r2, 4c40 <z_reschedule_irqlock+0xe>
    4c3c:	f7fc bf38 	b.w	1ab0 <arch_swap>
    4c40:	f383 8811 	msr	BASEPRI, r3
    4c44:	f3bf 8f6f 	isb	sy
}
    4c48:	4770      	bx	lr

00004c4a <z_reschedule_unlocked>:
	__asm__ volatile(
    4c4a:	f04f 0320 	mov.w	r3, #32
    4c4e:	f3ef 8011 	mrs	r0, BASEPRI
    4c52:	f383 8811 	msr	BASEPRI, r3
    4c56:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4c5a:	f7ff bfea 	b.w	4c32 <z_reschedule_irqlock>

00004c5e <unpend_thread_no_timeout>:
{
    4c5e:	4601      	mov	r1, r0
    4c60:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    4c62:	6880      	ldr	r0, [r0, #8]
    4c64:	f7fe fc32 	bl	34cc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4c68:	7b4b      	ldrb	r3, [r1, #13]
    4c6a:	f023 0302 	bic.w	r3, r3, #2
    4c6e:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
    4c70:	2300      	movs	r3, #0
    4c72:	608b      	str	r3, [r1, #8]
}
    4c74:	bd08      	pop	{r3, pc}

00004c76 <z_priq_dumb_best>:
{
    4c76:	4603      	mov	r3, r0
	return list->head == list;
    4c78:	6800      	ldr	r0, [r0, #0]
}
    4c7a:	4283      	cmp	r3, r0
    4c7c:	bf08      	it	eq
    4c7e:	2000      	moveq	r0, #0
    4c80:	4770      	bx	lr

00004c82 <z_ready_thread>:
{
    4c82:	b510      	push	{r4, lr}
    4c84:	f04f 0320 	mov.w	r3, #32
    4c88:	f3ef 8411 	mrs	r4, BASEPRI
    4c8c:	f383 8811 	msr	BASEPRI, r3
    4c90:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    4c94:	f7fe fc74 	bl	3580 <ready_thread>
	__asm__ volatile(
    4c98:	f384 8811 	msr	BASEPRI, r4
    4c9c:	f3bf 8f6f 	isb	sy
}
    4ca0:	bd10      	pop	{r4, pc}

00004ca2 <z_thread_timeout>:
{
    4ca2:	b570      	push	{r4, r5, r6, lr}
    4ca4:	4604      	mov	r4, r0
	__asm__ volatile(
    4ca6:	f04f 0320 	mov.w	r3, #32
    4caa:	f3ef 8611 	mrs	r6, BASEPRI
    4cae:	f383 8811 	msr	BASEPRI, r3
    4cb2:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    4cb6:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    4cba:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
    4cbe:	b113      	cbz	r3, 4cc6 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
    4cc0:	4628      	mov	r0, r5
    4cc2:	f7ff ffcc 	bl	4c5e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4cc6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
    4cca:	4628      	mov	r0, r5
    4ccc:	f023 0314 	bic.w	r3, r3, #20
    4cd0:	f804 3c0b 	strb.w	r3, [r4, #-11]
    4cd4:	f7fe fc54 	bl	3580 <ready_thread>
	__asm__ volatile(
    4cd8:	f386 8811 	msr	BASEPRI, r6
    4cdc:	f3bf 8f6f 	isb	sy
}
    4ce0:	bd70      	pop	{r4, r5, r6, pc}

00004ce2 <add_to_waitq_locked>:
{
    4ce2:	b538      	push	{r3, r4, r5, lr}
    4ce4:	4604      	mov	r4, r0
    4ce6:	460d      	mov	r5, r1
	unready_thread(thread);
    4ce8:	f7fe fdca 	bl	3880 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4cec:	7b63      	ldrb	r3, [r4, #13]
    4cee:	f043 0302 	orr.w	r3, r3, #2
    4cf2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4cf4:	b17d      	cbz	r5, 4d16 <add_to_waitq_locked+0x34>
    4cf6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    4cf8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4cfa:	429d      	cmp	r5, r3
    4cfc:	d012      	beq.n	4d24 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4cfe:	b18b      	cbz	r3, 4d24 <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
    4d00:	f994 200e 	ldrsb.w	r2, [r4, #14]
    4d04:	f993 100e 	ldrsb.w	r1, [r3, #14]
    4d08:	4291      	cmp	r1, r2
    4d0a:	dd05      	ble.n	4d18 <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
    4d0c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4d0e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    4d12:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4d14:	605c      	str	r4, [r3, #4]
}
    4d16:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    4d18:	6869      	ldr	r1, [r5, #4]
    4d1a:	428b      	cmp	r3, r1
    4d1c:	d002      	beq.n	4d24 <add_to_waitq_locked+0x42>
    4d1e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d20:	2b00      	cmp	r3, #0
    4d22:	d1ef      	bne.n	4d04 <add_to_waitq_locked+0x22>
	node->prev = list->tail;
    4d24:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    4d26:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    4d28:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    4d2a:	686b      	ldr	r3, [r5, #4]
    4d2c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4d2e:	606c      	str	r4, [r5, #4]
}
    4d30:	e7f1      	b.n	4d16 <add_to_waitq_locked+0x34>

00004d32 <z_unpend_first_thread>:
{
    4d32:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4d34:	f04f 0320 	mov.w	r3, #32
    4d38:	f3ef 8211 	mrs	r2, BASEPRI
    4d3c:	f383 8811 	msr	BASEPRI, r3
    4d40:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    4d44:	f7ff ff97 	bl	4c76 <z_priq_dumb_best>
    4d48:	4604      	mov	r4, r0
	__asm__ volatile(
    4d4a:	f382 8811 	msr	BASEPRI, r2
    4d4e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    4d52:	b188      	cbz	r0, 4d78 <z_unpend_first_thread+0x46>
	__asm__ volatile(
    4d54:	f04f 0320 	mov.w	r3, #32
    4d58:	f3ef 8511 	mrs	r5, BASEPRI
    4d5c:	f383 8811 	msr	BASEPRI, r3
    4d60:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    4d64:	f7ff ff7b 	bl	4c5e <unpend_thread_no_timeout>
	__asm__ volatile(
    4d68:	f385 8811 	msr	BASEPRI, r5
    4d6c:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    4d70:	f104 0018 	add.w	r0, r4, #24
    4d74:	f000 f80e 	bl	4d94 <z_abort_timeout>
}
    4d78:	4620      	mov	r0, r4
    4d7a:	bd38      	pop	{r3, r4, r5, pc}

00004d7c <k_is_in_isr>:
    4d7c:	f3ef 8005 	mrs	r0, IPSR
}
    4d80:	3800      	subs	r0, #0
    4d82:	bf18      	it	ne
    4d84:	2001      	movne	r0, #1
    4d86:	4770      	bx	lr

00004d88 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
    4d88:	b108      	cbz	r0, 4d8e <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
    4d8a:	f7fc b919 	b.w	fc0 <arch_busy_wait>
}
    4d8e:	4770      	bx	lr

00004d90 <k_thread_name_get>:
}
    4d90:	2000      	movs	r0, #0
    4d92:	4770      	bx	lr

00004d94 <z_abort_timeout>:
{
    4d94:	b510      	push	{r4, lr}
	__asm__ volatile(
    4d96:	f04f 0220 	mov.w	r2, #32
    4d9a:	f3ef 8411 	mrs	r4, BASEPRI
    4d9e:	f382 8811 	msr	BASEPRI, r2
    4da2:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4da6:	6803      	ldr	r3, [r0, #0]
    4da8:	b13b      	cbz	r3, 4dba <z_abort_timeout+0x26>
			remove_timeout(to);
    4daa:	f7fe fff1 	bl	3d90 <remove_timeout>
			ret = 0;
    4dae:	2000      	movs	r0, #0
	__asm__ volatile(
    4db0:	f384 8811 	msr	BASEPRI, r4
    4db4:	f3bf 8f6f 	isb	sy
}
    4db8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4dba:	f06f 0015 	mvn.w	r0, #21
    4dbe:	e7f7      	b.n	4db0 <z_abort_timeout+0x1c>

00004dc0 <z_get_next_timeout_expiry>:
{
    4dc0:	b510      	push	{r4, lr}
	__asm__ volatile(
    4dc2:	f04f 0320 	mov.w	r3, #32
    4dc6:	f3ef 8411 	mrs	r4, BASEPRI
    4dca:	f383 8811 	msr	BASEPRI, r3
    4dce:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4dd2:	f7fe ffb5 	bl	3d40 <next_timeout>
	__asm__ volatile(
    4dd6:	f384 8811 	msr	BASEPRI, r4
    4dda:	f3bf 8f6f 	isb	sy
}
    4dde:	bd10      	pop	{r4, pc}

00004de0 <z_set_timeout_expiry>:
{
    4de0:	b570      	push	{r4, r5, r6, lr}
    4de2:	4604      	mov	r4, r0
    4de4:	460d      	mov	r5, r1
	__asm__ volatile(
    4de6:	f04f 0320 	mov.w	r3, #32
    4dea:	f3ef 8611 	mrs	r6, BASEPRI
    4dee:	f383 8811 	msr	BASEPRI, r3
    4df2:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    4df6:	f7fe ffa3 	bl	3d40 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4dfa:	2801      	cmp	r0, #1
    4dfc:	dd05      	ble.n	4e0a <z_set_timeout_expiry+0x2a>
    4dfe:	42a0      	cmp	r0, r4
    4e00:	dd03      	ble.n	4e0a <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
    4e02:	4629      	mov	r1, r5
    4e04:	4620      	mov	r0, r4
    4e06:	f7fc fb51 	bl	14ac <z_clock_set_timeout>
	__asm__ volatile(
    4e0a:	f386 8811 	msr	BASEPRI, r6
    4e0e:	f3bf 8f6f 	isb	sy
}
    4e12:	bd70      	pop	{r4, r5, r6, pc}

00004e14 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    4e14:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    4e16:	f7ff f8b1 	bl	3f7c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    4e1a:	bd08      	pop	{r3, pc}

00004e1c <k_heap_init>:
{
    4e1c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    4e1e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    4e22:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    4e26:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    4e28:	f7ff bb92 	b.w	4550 <sys_heap_init>

00004e2c <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    4e2c:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00006200 <spm_firmware_info_nse-0x1de0>:
	...

00007fe0 <spm_firmware_info_nse>:
    7fe0:	e97f e97f 	sg
    7fe4:	f7f9 bc44 	b.w	1870 <__acle_se_spm_firmware_info_nse>

00007fe8 <spm_request_read_nse>:
    7fe8:	e97f e97f 	sg
    7fec:	f7f9 bc0a 	b.w	1804 <__acle_se_spm_request_read_nse>
	...
