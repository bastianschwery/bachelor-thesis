
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	28 eb 00 20 19 cf 00 00 2f ac 01 00 49 cf 00 00     (.. ..../...I...
    8010:	49 cf 00 00 49 cf 00 00 49 cf 00 00 49 cf 00 00     I...I...I...I...
	...
    802c:	e1 cc 00 00 49 cf 00 00 00 00 00 00 85 cc 00 00     ....I...........
    803c:	45 ba 00 00                                         E...

00008040 <_irq_vector_table>:
    8040:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    8050:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    8060:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    8070:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    8080:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    8090:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    80a0:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    80b0:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    80c0:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    80d0:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    80e0:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    80f0:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    8100:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    8110:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    8120:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    8130:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    8140:	d9 ce 00 00 d9 ce 00 00 d9 ce 00 00 d9 ce 00 00     ................
    8150:	d9 ce 00 00                                         ....

00008154 <_vector_end>:
	...

00008200 <m_firmware_info>:
    8200:	de e6 1e 28 4c bb ce 8f 02 35 00 00 3c 00 00 00     ...(L....5..<...
    8210:	88 9f 01 00 01 00 00 00 00 80 00 00 00 80 00 00     ................
    8220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00008240 <__aeabi_drsub>:
    8240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    8244:	e002      	b.n	824c <__adddf3>
    8246:	bf00      	nop

00008248 <__aeabi_dsub>:
    8248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000824c <__adddf3>:
    824c:	b530      	push	{r4, r5, lr}
    824e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    8252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    8256:	ea94 0f05 	teq	r4, r5
    825a:	bf08      	it	eq
    825c:	ea90 0f02 	teqeq	r0, r2
    8260:	bf1f      	itttt	ne
    8262:	ea54 0c00 	orrsne.w	ip, r4, r0
    8266:	ea55 0c02 	orrsne.w	ip, r5, r2
    826a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    826e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8272:	f000 80e2 	beq.w	843a <__adddf3+0x1ee>
    8276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    827a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    827e:	bfb8      	it	lt
    8280:	426d      	neglt	r5, r5
    8282:	dd0c      	ble.n	829e <__adddf3+0x52>
    8284:	442c      	add	r4, r5
    8286:	ea80 0202 	eor.w	r2, r0, r2
    828a:	ea81 0303 	eor.w	r3, r1, r3
    828e:	ea82 0000 	eor.w	r0, r2, r0
    8292:	ea83 0101 	eor.w	r1, r3, r1
    8296:	ea80 0202 	eor.w	r2, r0, r2
    829a:	ea81 0303 	eor.w	r3, r1, r3
    829e:	2d36      	cmp	r5, #54	; 0x36
    82a0:	bf88      	it	hi
    82a2:	bd30      	pophi	{r4, r5, pc}
    82a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    82a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    82ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    82b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    82b4:	d002      	beq.n	82bc <__adddf3+0x70>
    82b6:	4240      	negs	r0, r0
    82b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    82bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    82c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    82c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    82c8:	d002      	beq.n	82d0 <__adddf3+0x84>
    82ca:	4252      	negs	r2, r2
    82cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    82d0:	ea94 0f05 	teq	r4, r5
    82d4:	f000 80a7 	beq.w	8426 <__adddf3+0x1da>
    82d8:	f1a4 0401 	sub.w	r4, r4, #1
    82dc:	f1d5 0e20 	rsbs	lr, r5, #32
    82e0:	db0d      	blt.n	82fe <__adddf3+0xb2>
    82e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    82e6:	fa22 f205 	lsr.w	r2, r2, r5
    82ea:	1880      	adds	r0, r0, r2
    82ec:	f141 0100 	adc.w	r1, r1, #0
    82f0:	fa03 f20e 	lsl.w	r2, r3, lr
    82f4:	1880      	adds	r0, r0, r2
    82f6:	fa43 f305 	asr.w	r3, r3, r5
    82fa:	4159      	adcs	r1, r3
    82fc:	e00e      	b.n	831c <__adddf3+0xd0>
    82fe:	f1a5 0520 	sub.w	r5, r5, #32
    8302:	f10e 0e20 	add.w	lr, lr, #32
    8306:	2a01      	cmp	r2, #1
    8308:	fa03 fc0e 	lsl.w	ip, r3, lr
    830c:	bf28      	it	cs
    830e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8312:	fa43 f305 	asr.w	r3, r3, r5
    8316:	18c0      	adds	r0, r0, r3
    8318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    831c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8320:	d507      	bpl.n	8332 <__adddf3+0xe6>
    8322:	f04f 0e00 	mov.w	lr, #0
    8326:	f1dc 0c00 	rsbs	ip, ip, #0
    832a:	eb7e 0000 	sbcs.w	r0, lr, r0
    832e:	eb6e 0101 	sbc.w	r1, lr, r1
    8332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    8336:	d31b      	bcc.n	8370 <__adddf3+0x124>
    8338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    833c:	d30c      	bcc.n	8358 <__adddf3+0x10c>
    833e:	0849      	lsrs	r1, r1, #1
    8340:	ea5f 0030 	movs.w	r0, r0, rrx
    8344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8348:	f104 0401 	add.w	r4, r4, #1
    834c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    8354:	f080 809a 	bcs.w	848c <__adddf3+0x240>
    8358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    835c:	bf08      	it	eq
    835e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8362:	f150 0000 	adcs.w	r0, r0, #0
    8366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    836a:	ea41 0105 	orr.w	r1, r1, r5
    836e:	bd30      	pop	{r4, r5, pc}
    8370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    8374:	4140      	adcs	r0, r0
    8376:	eb41 0101 	adc.w	r1, r1, r1
    837a:	3c01      	subs	r4, #1
    837c:	bf28      	it	cs
    837e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    8382:	d2e9      	bcs.n	8358 <__adddf3+0x10c>
    8384:	f091 0f00 	teq	r1, #0
    8388:	bf04      	itt	eq
    838a:	4601      	moveq	r1, r0
    838c:	2000      	moveq	r0, #0
    838e:	fab1 f381 	clz	r3, r1
    8392:	bf08      	it	eq
    8394:	3320      	addeq	r3, #32
    8396:	f1a3 030b 	sub.w	r3, r3, #11
    839a:	f1b3 0220 	subs.w	r2, r3, #32
    839e:	da0c      	bge.n	83ba <__adddf3+0x16e>
    83a0:	320c      	adds	r2, #12
    83a2:	dd08      	ble.n	83b6 <__adddf3+0x16a>
    83a4:	f102 0c14 	add.w	ip, r2, #20
    83a8:	f1c2 020c 	rsb	r2, r2, #12
    83ac:	fa01 f00c 	lsl.w	r0, r1, ip
    83b0:	fa21 f102 	lsr.w	r1, r1, r2
    83b4:	e00c      	b.n	83d0 <__adddf3+0x184>
    83b6:	f102 0214 	add.w	r2, r2, #20
    83ba:	bfd8      	it	le
    83bc:	f1c2 0c20 	rsble	ip, r2, #32
    83c0:	fa01 f102 	lsl.w	r1, r1, r2
    83c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    83c8:	bfdc      	itt	le
    83ca:	ea41 010c 	orrle.w	r1, r1, ip
    83ce:	4090      	lslle	r0, r2
    83d0:	1ae4      	subs	r4, r4, r3
    83d2:	bfa2      	ittt	ge
    83d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    83d8:	4329      	orrge	r1, r5
    83da:	bd30      	popge	{r4, r5, pc}
    83dc:	ea6f 0404 	mvn.w	r4, r4
    83e0:	3c1f      	subs	r4, #31
    83e2:	da1c      	bge.n	841e <__adddf3+0x1d2>
    83e4:	340c      	adds	r4, #12
    83e6:	dc0e      	bgt.n	8406 <__adddf3+0x1ba>
    83e8:	f104 0414 	add.w	r4, r4, #20
    83ec:	f1c4 0220 	rsb	r2, r4, #32
    83f0:	fa20 f004 	lsr.w	r0, r0, r4
    83f4:	fa01 f302 	lsl.w	r3, r1, r2
    83f8:	ea40 0003 	orr.w	r0, r0, r3
    83fc:	fa21 f304 	lsr.w	r3, r1, r4
    8400:	ea45 0103 	orr.w	r1, r5, r3
    8404:	bd30      	pop	{r4, r5, pc}
    8406:	f1c4 040c 	rsb	r4, r4, #12
    840a:	f1c4 0220 	rsb	r2, r4, #32
    840e:	fa20 f002 	lsr.w	r0, r0, r2
    8412:	fa01 f304 	lsl.w	r3, r1, r4
    8416:	ea40 0003 	orr.w	r0, r0, r3
    841a:	4629      	mov	r1, r5
    841c:	bd30      	pop	{r4, r5, pc}
    841e:	fa21 f004 	lsr.w	r0, r1, r4
    8422:	4629      	mov	r1, r5
    8424:	bd30      	pop	{r4, r5, pc}
    8426:	f094 0f00 	teq	r4, #0
    842a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    842e:	bf06      	itte	eq
    8430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    8434:	3401      	addeq	r4, #1
    8436:	3d01      	subne	r5, #1
    8438:	e74e      	b.n	82d8 <__adddf3+0x8c>
    843a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    843e:	bf18      	it	ne
    8440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8444:	d029      	beq.n	849a <__adddf3+0x24e>
    8446:	ea94 0f05 	teq	r4, r5
    844a:	bf08      	it	eq
    844c:	ea90 0f02 	teqeq	r0, r2
    8450:	d005      	beq.n	845e <__adddf3+0x212>
    8452:	ea54 0c00 	orrs.w	ip, r4, r0
    8456:	bf04      	itt	eq
    8458:	4619      	moveq	r1, r3
    845a:	4610      	moveq	r0, r2
    845c:	bd30      	pop	{r4, r5, pc}
    845e:	ea91 0f03 	teq	r1, r3
    8462:	bf1e      	ittt	ne
    8464:	2100      	movne	r1, #0
    8466:	2000      	movne	r0, #0
    8468:	bd30      	popne	{r4, r5, pc}
    846a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    846e:	d105      	bne.n	847c <__adddf3+0x230>
    8470:	0040      	lsls	r0, r0, #1
    8472:	4149      	adcs	r1, r1
    8474:	bf28      	it	cs
    8476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    847a:	bd30      	pop	{r4, r5, pc}
    847c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8480:	bf3c      	itt	cc
    8482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    8486:	bd30      	popcc	{r4, r5, pc}
    8488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    848c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8494:	f04f 0000 	mov.w	r0, #0
    8498:	bd30      	pop	{r4, r5, pc}
    849a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    849e:	bf1a      	itte	ne
    84a0:	4619      	movne	r1, r3
    84a2:	4610      	movne	r0, r2
    84a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    84a8:	bf1c      	itt	ne
    84aa:	460b      	movne	r3, r1
    84ac:	4602      	movne	r2, r0
    84ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    84b2:	bf06      	itte	eq
    84b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    84b8:	ea91 0f03 	teqeq	r1, r3
    84bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    84c0:	bd30      	pop	{r4, r5, pc}
    84c2:	bf00      	nop

000084c4 <__aeabi_ui2d>:
    84c4:	f090 0f00 	teq	r0, #0
    84c8:	bf04      	itt	eq
    84ca:	2100      	moveq	r1, #0
    84cc:	4770      	bxeq	lr
    84ce:	b530      	push	{r4, r5, lr}
    84d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84d8:	f04f 0500 	mov.w	r5, #0
    84dc:	f04f 0100 	mov.w	r1, #0
    84e0:	e750      	b.n	8384 <__adddf3+0x138>
    84e2:	bf00      	nop

000084e4 <__aeabi_i2d>:
    84e4:	f090 0f00 	teq	r0, #0
    84e8:	bf04      	itt	eq
    84ea:	2100      	moveq	r1, #0
    84ec:	4770      	bxeq	lr
    84ee:	b530      	push	{r4, r5, lr}
    84f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    84fc:	bf48      	it	mi
    84fe:	4240      	negmi	r0, r0
    8500:	f04f 0100 	mov.w	r1, #0
    8504:	e73e      	b.n	8384 <__adddf3+0x138>
    8506:	bf00      	nop

00008508 <__aeabi_f2d>:
    8508:	0042      	lsls	r2, r0, #1
    850a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    850e:	ea4f 0131 	mov.w	r1, r1, rrx
    8512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8516:	bf1f      	itttt	ne
    8518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    851c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8524:	4770      	bxne	lr
    8526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    852a:	bf08      	it	eq
    852c:	4770      	bxeq	lr
    852e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    8532:	bf04      	itt	eq
    8534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8538:	4770      	bxeq	lr
    853a:	b530      	push	{r4, r5, lr}
    853c:	f44f 7460 	mov.w	r4, #896	; 0x380
    8540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8548:	e71c      	b.n	8384 <__adddf3+0x138>
    854a:	bf00      	nop

0000854c <__aeabi_ul2d>:
    854c:	ea50 0201 	orrs.w	r2, r0, r1
    8550:	bf08      	it	eq
    8552:	4770      	bxeq	lr
    8554:	b530      	push	{r4, r5, lr}
    8556:	f04f 0500 	mov.w	r5, #0
    855a:	e00a      	b.n	8572 <__aeabi_l2d+0x16>

0000855c <__aeabi_l2d>:
    855c:	ea50 0201 	orrs.w	r2, r0, r1
    8560:	bf08      	it	eq
    8562:	4770      	bxeq	lr
    8564:	b530      	push	{r4, r5, lr}
    8566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    856a:	d502      	bpl.n	8572 <__aeabi_l2d+0x16>
    856c:	4240      	negs	r0, r0
    856e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    857a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    857e:	f43f aed8 	beq.w	8332 <__adddf3+0xe6>
    8582:	f04f 0203 	mov.w	r2, #3
    8586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    858a:	bf18      	it	ne
    858c:	3203      	addne	r2, #3
    858e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8592:	bf18      	it	ne
    8594:	3203      	addne	r2, #3
    8596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    859a:	f1c2 0320 	rsb	r3, r2, #32
    859e:	fa00 fc03 	lsl.w	ip, r0, r3
    85a2:	fa20 f002 	lsr.w	r0, r0, r2
    85a6:	fa01 fe03 	lsl.w	lr, r1, r3
    85aa:	ea40 000e 	orr.w	r0, r0, lr
    85ae:	fa21 f102 	lsr.w	r1, r1, r2
    85b2:	4414      	add	r4, r2
    85b4:	e6bd      	b.n	8332 <__adddf3+0xe6>
    85b6:	bf00      	nop

000085b8 <__aeabi_dmul>:
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    85be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    85c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    85c6:	bf1d      	ittte	ne
    85c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    85cc:	ea94 0f0c 	teqne	r4, ip
    85d0:	ea95 0f0c 	teqne	r5, ip
    85d4:	f000 f8de 	bleq	8794 <__aeabi_dmul+0x1dc>
    85d8:	442c      	add	r4, r5
    85da:	ea81 0603 	eor.w	r6, r1, r3
    85de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    85e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    85e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    85ea:	bf18      	it	ne
    85ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    85f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    85f8:	d038      	beq.n	866c <__aeabi_dmul+0xb4>
    85fa:	fba0 ce02 	umull	ip, lr, r0, r2
    85fe:	f04f 0500 	mov.w	r5, #0
    8602:	fbe1 e502 	umlal	lr, r5, r1, r2
    8606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    860a:	fbe0 e503 	umlal	lr, r5, r0, r3
    860e:	f04f 0600 	mov.w	r6, #0
    8612:	fbe1 5603 	umlal	r5, r6, r1, r3
    8616:	f09c 0f00 	teq	ip, #0
    861a:	bf18      	it	ne
    861c:	f04e 0e01 	orrne.w	lr, lr, #1
    8620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    862c:	d204      	bcs.n	8638 <__aeabi_dmul+0x80>
    862e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    8632:	416d      	adcs	r5, r5
    8634:	eb46 0606 	adc.w	r6, r6, r6
    8638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    863c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    8644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    864c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8650:	bf88      	it	hi
    8652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8656:	d81e      	bhi.n	8696 <__aeabi_dmul+0xde>
    8658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    865c:	bf08      	it	eq
    865e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    8662:	f150 0000 	adcs.w	r0, r0, #0
    8666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8670:	ea46 0101 	orr.w	r1, r6, r1
    8674:	ea40 0002 	orr.w	r0, r0, r2
    8678:	ea81 0103 	eor.w	r1, r1, r3
    867c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8680:	bfc2      	ittt	gt
    8682:	ebd4 050c 	rsbsgt	r5, r4, ip
    8686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    868a:	bd70      	popgt	{r4, r5, r6, pc}
    868c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8690:	f04f 0e00 	mov.w	lr, #0
    8694:	3c01      	subs	r4, #1
    8696:	f300 80ab 	bgt.w	87f0 <__aeabi_dmul+0x238>
    869a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    869e:	bfde      	ittt	le
    86a0:	2000      	movle	r0, #0
    86a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    86a6:	bd70      	pople	{r4, r5, r6, pc}
    86a8:	f1c4 0400 	rsb	r4, r4, #0
    86ac:	3c20      	subs	r4, #32
    86ae:	da35      	bge.n	871c <__aeabi_dmul+0x164>
    86b0:	340c      	adds	r4, #12
    86b2:	dc1b      	bgt.n	86ec <__aeabi_dmul+0x134>
    86b4:	f104 0414 	add.w	r4, r4, #20
    86b8:	f1c4 0520 	rsb	r5, r4, #32
    86bc:	fa00 f305 	lsl.w	r3, r0, r5
    86c0:	fa20 f004 	lsr.w	r0, r0, r4
    86c4:	fa01 f205 	lsl.w	r2, r1, r5
    86c8:	ea40 0002 	orr.w	r0, r0, r2
    86cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    86d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    86d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    86d8:	fa21 f604 	lsr.w	r6, r1, r4
    86dc:	eb42 0106 	adc.w	r1, r2, r6
    86e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    86e4:	bf08      	it	eq
    86e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    86ea:	bd70      	pop	{r4, r5, r6, pc}
    86ec:	f1c4 040c 	rsb	r4, r4, #12
    86f0:	f1c4 0520 	rsb	r5, r4, #32
    86f4:	fa00 f304 	lsl.w	r3, r0, r4
    86f8:	fa20 f005 	lsr.w	r0, r0, r5
    86fc:	fa01 f204 	lsl.w	r2, r1, r4
    8700:	ea40 0002 	orr.w	r0, r0, r2
    8704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    870c:	f141 0100 	adc.w	r1, r1, #0
    8710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8714:	bf08      	it	eq
    8716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    871a:	bd70      	pop	{r4, r5, r6, pc}
    871c:	f1c4 0520 	rsb	r5, r4, #32
    8720:	fa00 f205 	lsl.w	r2, r0, r5
    8724:	ea4e 0e02 	orr.w	lr, lr, r2
    8728:	fa20 f304 	lsr.w	r3, r0, r4
    872c:	fa01 f205 	lsl.w	r2, r1, r5
    8730:	ea43 0302 	orr.w	r3, r3, r2
    8734:	fa21 f004 	lsr.w	r0, r1, r4
    8738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    873c:	fa21 f204 	lsr.w	r2, r1, r4
    8740:	ea20 0002 	bic.w	r0, r0, r2
    8744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    874c:	bf08      	it	eq
    874e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8752:	bd70      	pop	{r4, r5, r6, pc}
    8754:	f094 0f00 	teq	r4, #0
    8758:	d10f      	bne.n	877a <__aeabi_dmul+0x1c2>
    875a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    875e:	0040      	lsls	r0, r0, #1
    8760:	eb41 0101 	adc.w	r1, r1, r1
    8764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8768:	bf08      	it	eq
    876a:	3c01      	subeq	r4, #1
    876c:	d0f7      	beq.n	875e <__aeabi_dmul+0x1a6>
    876e:	ea41 0106 	orr.w	r1, r1, r6
    8772:	f095 0f00 	teq	r5, #0
    8776:	bf18      	it	ne
    8778:	4770      	bxne	lr
    877a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    877e:	0052      	lsls	r2, r2, #1
    8780:	eb43 0303 	adc.w	r3, r3, r3
    8784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8788:	bf08      	it	eq
    878a:	3d01      	subeq	r5, #1
    878c:	d0f7      	beq.n	877e <__aeabi_dmul+0x1c6>
    878e:	ea43 0306 	orr.w	r3, r3, r6
    8792:	4770      	bx	lr
    8794:	ea94 0f0c 	teq	r4, ip
    8798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    879c:	bf18      	it	ne
    879e:	ea95 0f0c 	teqne	r5, ip
    87a2:	d00c      	beq.n	87be <__aeabi_dmul+0x206>
    87a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87a8:	bf18      	it	ne
    87aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87ae:	d1d1      	bne.n	8754 <__aeabi_dmul+0x19c>
    87b0:	ea81 0103 	eor.w	r1, r1, r3
    87b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87b8:	f04f 0000 	mov.w	r0, #0
    87bc:	bd70      	pop	{r4, r5, r6, pc}
    87be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87c2:	bf06      	itte	eq
    87c4:	4610      	moveq	r0, r2
    87c6:	4619      	moveq	r1, r3
    87c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87cc:	d019      	beq.n	8802 <__aeabi_dmul+0x24a>
    87ce:	ea94 0f0c 	teq	r4, ip
    87d2:	d102      	bne.n	87da <__aeabi_dmul+0x222>
    87d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    87d8:	d113      	bne.n	8802 <__aeabi_dmul+0x24a>
    87da:	ea95 0f0c 	teq	r5, ip
    87de:	d105      	bne.n	87ec <__aeabi_dmul+0x234>
    87e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    87e4:	bf1c      	itt	ne
    87e6:	4610      	movne	r0, r2
    87e8:	4619      	movne	r1, r3
    87ea:	d10a      	bne.n	8802 <__aeabi_dmul+0x24a>
    87ec:	ea81 0103 	eor.w	r1, r1, r3
    87f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    87f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    87fc:	f04f 0000 	mov.w	r0, #0
    8800:	bd70      	pop	{r4, r5, r6, pc}
    8802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    880a:	bd70      	pop	{r4, r5, r6, pc}

0000880c <__aeabi_ddiv>:
    880c:	b570      	push	{r4, r5, r6, lr}
    880e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    881a:	bf1d      	ittte	ne
    881c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8820:	ea94 0f0c 	teqne	r4, ip
    8824:	ea95 0f0c 	teqne	r5, ip
    8828:	f000 f8a7 	bleq	897a <__aeabi_ddiv+0x16e>
    882c:	eba4 0405 	sub.w	r4, r4, r5
    8830:	ea81 0e03 	eor.w	lr, r1, r3
    8834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8838:	ea4f 3101 	mov.w	r1, r1, lsl #12
    883c:	f000 8088 	beq.w	8950 <__aeabi_ddiv+0x144>
    8840:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    884c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8850:	ea4f 2202 	mov.w	r2, r2, lsl #8
    8854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    885c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    8864:	429d      	cmp	r5, r3
    8866:	bf08      	it	eq
    8868:	4296      	cmpeq	r6, r2
    886a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    886e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    8872:	d202      	bcs.n	887a <__aeabi_ddiv+0x6e>
    8874:	085b      	lsrs	r3, r3, #1
    8876:	ea4f 0232 	mov.w	r2, r2, rrx
    887a:	1ab6      	subs	r6, r6, r2
    887c:	eb65 0503 	sbc.w	r5, r5, r3
    8880:	085b      	lsrs	r3, r3, #1
    8882:	ea4f 0232 	mov.w	r2, r2, rrx
    8886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    888a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    888e:	ebb6 0e02 	subs.w	lr, r6, r2
    8892:	eb75 0e03 	sbcs.w	lr, r5, r3
    8896:	bf22      	ittt	cs
    8898:	1ab6      	subcs	r6, r6, r2
    889a:	4675      	movcs	r5, lr
    889c:	ea40 000c 	orrcs.w	r0, r0, ip
    88a0:	085b      	lsrs	r3, r3, #1
    88a2:	ea4f 0232 	mov.w	r2, r2, rrx
    88a6:	ebb6 0e02 	subs.w	lr, r6, r2
    88aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    88ae:	bf22      	ittt	cs
    88b0:	1ab6      	subcs	r6, r6, r2
    88b2:	4675      	movcs	r5, lr
    88b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    88b8:	085b      	lsrs	r3, r3, #1
    88ba:	ea4f 0232 	mov.w	r2, r2, rrx
    88be:	ebb6 0e02 	subs.w	lr, r6, r2
    88c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    88c6:	bf22      	ittt	cs
    88c8:	1ab6      	subcs	r6, r6, r2
    88ca:	4675      	movcs	r5, lr
    88cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    88d0:	085b      	lsrs	r3, r3, #1
    88d2:	ea4f 0232 	mov.w	r2, r2, rrx
    88d6:	ebb6 0e02 	subs.w	lr, r6, r2
    88da:	eb75 0e03 	sbcs.w	lr, r5, r3
    88de:	bf22      	ittt	cs
    88e0:	1ab6      	subcs	r6, r6, r2
    88e2:	4675      	movcs	r5, lr
    88e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    88e8:	ea55 0e06 	orrs.w	lr, r5, r6
    88ec:	d018      	beq.n	8920 <__aeabi_ddiv+0x114>
    88ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    88f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    88f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    88fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    88fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    890a:	d1c0      	bne.n	888e <__aeabi_ddiv+0x82>
    890c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8910:	d10b      	bne.n	892a <__aeabi_ddiv+0x11e>
    8912:	ea41 0100 	orr.w	r1, r1, r0
    8916:	f04f 0000 	mov.w	r0, #0
    891a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    891e:	e7b6      	b.n	888e <__aeabi_ddiv+0x82>
    8920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8924:	bf04      	itt	eq
    8926:	4301      	orreq	r1, r0
    8928:	2000      	moveq	r0, #0
    892a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    892e:	bf88      	it	hi
    8930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8934:	f63f aeaf 	bhi.w	8696 <__aeabi_dmul+0xde>
    8938:	ebb5 0c03 	subs.w	ip, r5, r3
    893c:	bf04      	itt	eq
    893e:	ebb6 0c02 	subseq.w	ip, r6, r2
    8942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8946:	f150 0000 	adcs.w	r0, r0, #0
    894a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    894e:	bd70      	pop	{r4, r5, r6, pc}
    8950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    8954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    895c:	bfc2      	ittt	gt
    895e:	ebd4 050c 	rsbsgt	r5, r4, ip
    8962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8966:	bd70      	popgt	{r4, r5, r6, pc}
    8968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    896c:	f04f 0e00 	mov.w	lr, #0
    8970:	3c01      	subs	r4, #1
    8972:	e690      	b.n	8696 <__aeabi_dmul+0xde>
    8974:	ea45 0e06 	orr.w	lr, r5, r6
    8978:	e68d      	b.n	8696 <__aeabi_dmul+0xde>
    897a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    897e:	ea94 0f0c 	teq	r4, ip
    8982:	bf08      	it	eq
    8984:	ea95 0f0c 	teqeq	r5, ip
    8988:	f43f af3b 	beq.w	8802 <__aeabi_dmul+0x24a>
    898c:	ea94 0f0c 	teq	r4, ip
    8990:	d10a      	bne.n	89a8 <__aeabi_ddiv+0x19c>
    8992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8996:	f47f af34 	bne.w	8802 <__aeabi_dmul+0x24a>
    899a:	ea95 0f0c 	teq	r5, ip
    899e:	f47f af25 	bne.w	87ec <__aeabi_dmul+0x234>
    89a2:	4610      	mov	r0, r2
    89a4:	4619      	mov	r1, r3
    89a6:	e72c      	b.n	8802 <__aeabi_dmul+0x24a>
    89a8:	ea95 0f0c 	teq	r5, ip
    89ac:	d106      	bne.n	89bc <__aeabi_ddiv+0x1b0>
    89ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    89b2:	f43f aefd 	beq.w	87b0 <__aeabi_dmul+0x1f8>
    89b6:	4610      	mov	r0, r2
    89b8:	4619      	mov	r1, r3
    89ba:	e722      	b.n	8802 <__aeabi_dmul+0x24a>
    89bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    89c0:	bf18      	it	ne
    89c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    89c6:	f47f aec5 	bne.w	8754 <__aeabi_dmul+0x19c>
    89ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    89ce:	f47f af0d 	bne.w	87ec <__aeabi_dmul+0x234>
    89d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    89d6:	f47f aeeb 	bne.w	87b0 <__aeabi_dmul+0x1f8>
    89da:	e712      	b.n	8802 <__aeabi_dmul+0x24a>

000089dc <__gedf2>:
    89dc:	f04f 3cff 	mov.w	ip, #4294967295
    89e0:	e006      	b.n	89f0 <__cmpdf2+0x4>
    89e2:	bf00      	nop

000089e4 <__ledf2>:
    89e4:	f04f 0c01 	mov.w	ip, #1
    89e8:	e002      	b.n	89f0 <__cmpdf2+0x4>
    89ea:	bf00      	nop

000089ec <__cmpdf2>:
    89ec:	f04f 0c01 	mov.w	ip, #1
    89f0:	f84d cd04 	str.w	ip, [sp, #-4]!
    89f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    89f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    89fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a00:	bf18      	it	ne
    8a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8a06:	d01b      	beq.n	8a40 <__cmpdf2+0x54>
    8a08:	b001      	add	sp, #4
    8a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8a0e:	bf0c      	ite	eq
    8a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8a14:	ea91 0f03 	teqne	r1, r3
    8a18:	bf02      	ittt	eq
    8a1a:	ea90 0f02 	teqeq	r0, r2
    8a1e:	2000      	moveq	r0, #0
    8a20:	4770      	bxeq	lr
    8a22:	f110 0f00 	cmn.w	r0, #0
    8a26:	ea91 0f03 	teq	r1, r3
    8a2a:	bf58      	it	pl
    8a2c:	4299      	cmppl	r1, r3
    8a2e:	bf08      	it	eq
    8a30:	4290      	cmpeq	r0, r2
    8a32:	bf2c      	ite	cs
    8a34:	17d8      	asrcs	r0, r3, #31
    8a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8a3a:	f040 0001 	orr.w	r0, r0, #1
    8a3e:	4770      	bx	lr
    8a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a48:	d102      	bne.n	8a50 <__cmpdf2+0x64>
    8a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8a4e:	d107      	bne.n	8a60 <__cmpdf2+0x74>
    8a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a58:	d1d6      	bne.n	8a08 <__cmpdf2+0x1c>
    8a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8a5e:	d0d3      	beq.n	8a08 <__cmpdf2+0x1c>
    8a60:	f85d 0b04 	ldr.w	r0, [sp], #4
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop

00008a68 <__aeabi_cdrcmple>:
    8a68:	4684      	mov	ip, r0
    8a6a:	4610      	mov	r0, r2
    8a6c:	4662      	mov	r2, ip
    8a6e:	468c      	mov	ip, r1
    8a70:	4619      	mov	r1, r3
    8a72:	4663      	mov	r3, ip
    8a74:	e000      	b.n	8a78 <__aeabi_cdcmpeq>
    8a76:	bf00      	nop

00008a78 <__aeabi_cdcmpeq>:
    8a78:	b501      	push	{r0, lr}
    8a7a:	f7ff ffb7 	bl	89ec <__cmpdf2>
    8a7e:	2800      	cmp	r0, #0
    8a80:	bf48      	it	mi
    8a82:	f110 0f00 	cmnmi.w	r0, #0
    8a86:	bd01      	pop	{r0, pc}

00008a88 <__aeabi_dcmpeq>:
    8a88:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a8c:	f7ff fff4 	bl	8a78 <__aeabi_cdcmpeq>
    8a90:	bf0c      	ite	eq
    8a92:	2001      	moveq	r0, #1
    8a94:	2000      	movne	r0, #0
    8a96:	f85d fb08 	ldr.w	pc, [sp], #8
    8a9a:	bf00      	nop

00008a9c <__aeabi_dcmplt>:
    8a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8aa0:	f7ff ffea 	bl	8a78 <__aeabi_cdcmpeq>
    8aa4:	bf34      	ite	cc
    8aa6:	2001      	movcc	r0, #1
    8aa8:	2000      	movcs	r0, #0
    8aaa:	f85d fb08 	ldr.w	pc, [sp], #8
    8aae:	bf00      	nop

00008ab0 <__aeabi_dcmple>:
    8ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ab4:	f7ff ffe0 	bl	8a78 <__aeabi_cdcmpeq>
    8ab8:	bf94      	ite	ls
    8aba:	2001      	movls	r0, #1
    8abc:	2000      	movhi	r0, #0
    8abe:	f85d fb08 	ldr.w	pc, [sp], #8
    8ac2:	bf00      	nop

00008ac4 <__aeabi_dcmpge>:
    8ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ac8:	f7ff ffce 	bl	8a68 <__aeabi_cdrcmple>
    8acc:	bf94      	ite	ls
    8ace:	2001      	movls	r0, #1
    8ad0:	2000      	movhi	r0, #0
    8ad2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ad6:	bf00      	nop

00008ad8 <__aeabi_dcmpgt>:
    8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8adc:	f7ff ffc4 	bl	8a68 <__aeabi_cdrcmple>
    8ae0:	bf34      	ite	cc
    8ae2:	2001      	movcc	r0, #1
    8ae4:	2000      	movcs	r0, #0
    8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
    8aea:	bf00      	nop

00008aec <__aeabi_d2uiz>:
    8aec:	004a      	lsls	r2, r1, #1
    8aee:	d211      	bcs.n	8b14 <__aeabi_d2uiz+0x28>
    8af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8af4:	d211      	bcs.n	8b1a <__aeabi_d2uiz+0x2e>
    8af6:	d50d      	bpl.n	8b14 <__aeabi_d2uiz+0x28>
    8af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b00:	d40e      	bmi.n	8b20 <__aeabi_d2uiz+0x34>
    8b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8b0e:	fa23 f002 	lsr.w	r0, r3, r2
    8b12:	4770      	bx	lr
    8b14:	f04f 0000 	mov.w	r0, #0
    8b18:	4770      	bx	lr
    8b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8b1e:	d102      	bne.n	8b26 <__aeabi_d2uiz+0x3a>
    8b20:	f04f 30ff 	mov.w	r0, #4294967295
    8b24:	4770      	bx	lr
    8b26:	f04f 0000 	mov.w	r0, #0
    8b2a:	4770      	bx	lr

00008b2c <__aeabi_uldivmod>:
    8b2c:	b953      	cbnz	r3, 8b44 <__aeabi_uldivmod+0x18>
    8b2e:	b94a      	cbnz	r2, 8b44 <__aeabi_uldivmod+0x18>
    8b30:	2900      	cmp	r1, #0
    8b32:	bf08      	it	eq
    8b34:	2800      	cmpeq	r0, #0
    8b36:	bf1c      	itt	ne
    8b38:	f04f 31ff 	movne.w	r1, #4294967295
    8b3c:	f04f 30ff 	movne.w	r0, #4294967295
    8b40:	f000 b980 	b.w	8e44 <__aeabi_idiv0>
    8b44:	f1ad 0c08 	sub.w	ip, sp, #8
    8b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8b4c:	f000 f806 	bl	8b5c <__udivmoddi4>
    8b50:	f8dd e004 	ldr.w	lr, [sp, #4]
    8b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8b58:	b004      	add	sp, #16
    8b5a:	4770      	bx	lr

00008b5c <__udivmoddi4>:
    8b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b60:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8b62:	460d      	mov	r5, r1
    8b64:	4604      	mov	r4, r0
    8b66:	460f      	mov	r7, r1
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d147      	bne.n	8bfc <__udivmoddi4+0xa0>
    8b6c:	428a      	cmp	r2, r1
    8b6e:	4694      	mov	ip, r2
    8b70:	d95f      	bls.n	8c32 <__udivmoddi4+0xd6>
    8b72:	fab2 f382 	clz	r3, r2
    8b76:	b143      	cbz	r3, 8b8a <__udivmoddi4+0x2e>
    8b78:	f1c3 0120 	rsb	r1, r3, #32
    8b7c:	409f      	lsls	r7, r3
    8b7e:	fa02 fc03 	lsl.w	ip, r2, r3
    8b82:	409c      	lsls	r4, r3
    8b84:	fa20 f101 	lsr.w	r1, r0, r1
    8b88:	430f      	orrs	r7, r1
    8b8a:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8b8e:	fa1f fe8c 	uxth.w	lr, ip
    8b92:	0c22      	lsrs	r2, r4, #16
    8b94:	fbb7 f1f5 	udiv	r1, r7, r5
    8b98:	fb05 7711 	mls	r7, r5, r1, r7
    8b9c:	fb01 f00e 	mul.w	r0, r1, lr
    8ba0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    8ba4:	4290      	cmp	r0, r2
    8ba6:	d908      	bls.n	8bba <__udivmoddi4+0x5e>
    8ba8:	eb1c 0202 	adds.w	r2, ip, r2
    8bac:	f101 37ff 	add.w	r7, r1, #4294967295
    8bb0:	d202      	bcs.n	8bb8 <__udivmoddi4+0x5c>
    8bb2:	4290      	cmp	r0, r2
    8bb4:	f200 8134 	bhi.w	8e20 <__udivmoddi4+0x2c4>
    8bb8:	4639      	mov	r1, r7
    8bba:	1a12      	subs	r2, r2, r0
    8bbc:	b2a4      	uxth	r4, r4
    8bbe:	fbb2 f0f5 	udiv	r0, r2, r5
    8bc2:	fb05 2210 	mls	r2, r5, r0, r2
    8bc6:	fb00 fe0e 	mul.w	lr, r0, lr
    8bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    8bce:	45a6      	cmp	lr, r4
    8bd0:	d908      	bls.n	8be4 <__udivmoddi4+0x88>
    8bd2:	eb1c 0404 	adds.w	r4, ip, r4
    8bd6:	f100 32ff 	add.w	r2, r0, #4294967295
    8bda:	d202      	bcs.n	8be2 <__udivmoddi4+0x86>
    8bdc:	45a6      	cmp	lr, r4
    8bde:	f200 8119 	bhi.w	8e14 <__udivmoddi4+0x2b8>
    8be2:	4610      	mov	r0, r2
    8be4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8be8:	eba4 040e 	sub.w	r4, r4, lr
    8bec:	2100      	movs	r1, #0
    8bee:	b11e      	cbz	r6, 8bf8 <__udivmoddi4+0x9c>
    8bf0:	40dc      	lsrs	r4, r3
    8bf2:	2300      	movs	r3, #0
    8bf4:	e9c6 4300 	strd	r4, r3, [r6]
    8bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bfc:	428b      	cmp	r3, r1
    8bfe:	d908      	bls.n	8c12 <__udivmoddi4+0xb6>
    8c00:	2e00      	cmp	r6, #0
    8c02:	f000 80fb 	beq.w	8dfc <__udivmoddi4+0x2a0>
    8c06:	2100      	movs	r1, #0
    8c08:	e9c6 0500 	strd	r0, r5, [r6]
    8c0c:	4608      	mov	r0, r1
    8c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c12:	fab3 f183 	clz	r1, r3
    8c16:	2900      	cmp	r1, #0
    8c18:	d14b      	bne.n	8cb2 <__udivmoddi4+0x156>
    8c1a:	42ab      	cmp	r3, r5
    8c1c:	f0c0 80f1 	bcc.w	8e02 <__udivmoddi4+0x2a6>
    8c20:	4282      	cmp	r2, r0
    8c22:	f240 80ee 	bls.w	8e02 <__udivmoddi4+0x2a6>
    8c26:	4608      	mov	r0, r1
    8c28:	2e00      	cmp	r6, #0
    8c2a:	d0e5      	beq.n	8bf8 <__udivmoddi4+0x9c>
    8c2c:	e9c6 4700 	strd	r4, r7, [r6]
    8c30:	e7e2      	b.n	8bf8 <__udivmoddi4+0x9c>
    8c32:	b902      	cbnz	r2, 8c36 <__udivmoddi4+0xda>
    8c34:	deff      	udf	#255	; 0xff
    8c36:	fab2 f382 	clz	r3, r2
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	f040 809d 	bne.w	8d7a <__udivmoddi4+0x21e>
    8c40:	1a8d      	subs	r5, r1, r2
    8c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8c46:	b297      	uxth	r7, r2
    8c48:	2101      	movs	r1, #1
    8c4a:	fbb5 f2fe 	udiv	r2, r5, lr
    8c4e:	fb0e 5012 	mls	r0, lr, r2, r5
    8c52:	0c25      	lsrs	r5, r4, #16
    8c54:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    8c58:	fb07 f002 	mul.w	r0, r7, r2
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d90f      	bls.n	8c80 <__udivmoddi4+0x124>
    8c60:	eb1c 0505 	adds.w	r5, ip, r5
    8c64:	f102 38ff 	add.w	r8, r2, #4294967295
    8c68:	bf2c      	ite	cs
    8c6a:	f04f 0901 	movcs.w	r9, #1
    8c6e:	f04f 0900 	movcc.w	r9, #0
    8c72:	42a8      	cmp	r0, r5
    8c74:	d903      	bls.n	8c7e <__udivmoddi4+0x122>
    8c76:	f1b9 0f00 	cmp.w	r9, #0
    8c7a:	f000 80ce 	beq.w	8e1a <__udivmoddi4+0x2be>
    8c7e:	4642      	mov	r2, r8
    8c80:	1a2d      	subs	r5, r5, r0
    8c82:	b2a4      	uxth	r4, r4
    8c84:	fbb5 f0fe 	udiv	r0, r5, lr
    8c88:	fb0e 5510 	mls	r5, lr, r0, r5
    8c8c:	fb00 f707 	mul.w	r7, r0, r7
    8c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    8c94:	42a7      	cmp	r7, r4
    8c96:	d908      	bls.n	8caa <__udivmoddi4+0x14e>
    8c98:	eb1c 0404 	adds.w	r4, ip, r4
    8c9c:	f100 35ff 	add.w	r5, r0, #4294967295
    8ca0:	d202      	bcs.n	8ca8 <__udivmoddi4+0x14c>
    8ca2:	42a7      	cmp	r7, r4
    8ca4:	f200 80b3 	bhi.w	8e0e <__udivmoddi4+0x2b2>
    8ca8:	4628      	mov	r0, r5
    8caa:	1be4      	subs	r4, r4, r7
    8cac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    8cb0:	e79d      	b.n	8bee <__udivmoddi4+0x92>
    8cb2:	f1c1 0720 	rsb	r7, r1, #32
    8cb6:	408b      	lsls	r3, r1
    8cb8:	fa05 f401 	lsl.w	r4, r5, r1
    8cbc:	fa22 fc07 	lsr.w	ip, r2, r7
    8cc0:	40fd      	lsrs	r5, r7
    8cc2:	408a      	lsls	r2, r1
    8cc4:	ea4c 0c03 	orr.w	ip, ip, r3
    8cc8:	fa20 f307 	lsr.w	r3, r0, r7
    8ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    8cd0:	431c      	orrs	r4, r3
    8cd2:	fa1f fe8c 	uxth.w	lr, ip
    8cd6:	fa00 f301 	lsl.w	r3, r0, r1
    8cda:	0c20      	lsrs	r0, r4, #16
    8cdc:	fbb5 f8f9 	udiv	r8, r5, r9
    8ce0:	fb09 5518 	mls	r5, r9, r8, r5
    8ce4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    8ce8:	fb08 f00e 	mul.w	r0, r8, lr
    8cec:	42a8      	cmp	r0, r5
    8cee:	d90f      	bls.n	8d10 <__udivmoddi4+0x1b4>
    8cf0:	eb1c 0505 	adds.w	r5, ip, r5
    8cf4:	f108 3aff 	add.w	sl, r8, #4294967295
    8cf8:	bf2c      	ite	cs
    8cfa:	f04f 0b01 	movcs.w	fp, #1
    8cfe:	f04f 0b00 	movcc.w	fp, #0
    8d02:	42a8      	cmp	r0, r5
    8d04:	d903      	bls.n	8d0e <__udivmoddi4+0x1b2>
    8d06:	f1bb 0f00 	cmp.w	fp, #0
    8d0a:	f000 808c 	beq.w	8e26 <__udivmoddi4+0x2ca>
    8d0e:	46d0      	mov	r8, sl
    8d10:	1a2d      	subs	r5, r5, r0
    8d12:	b2a4      	uxth	r4, r4
    8d14:	fbb5 f0f9 	udiv	r0, r5, r9
    8d18:	fb09 5510 	mls	r5, r9, r0, r5
    8d1c:	fb00 fe0e 	mul.w	lr, r0, lr
    8d20:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    8d24:	45ae      	cmp	lr, r5
    8d26:	d907      	bls.n	8d38 <__udivmoddi4+0x1dc>
    8d28:	eb1c 0505 	adds.w	r5, ip, r5
    8d2c:	f100 34ff 	add.w	r4, r0, #4294967295
    8d30:	d201      	bcs.n	8d36 <__udivmoddi4+0x1da>
    8d32:	45ae      	cmp	lr, r5
    8d34:	d87e      	bhi.n	8e34 <__udivmoddi4+0x2d8>
    8d36:	4620      	mov	r0, r4
    8d38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    8d3c:	eba5 050e 	sub.w	r5, r5, lr
    8d40:	fba0 9802 	umull	r9, r8, r0, r2
    8d44:	4545      	cmp	r5, r8
    8d46:	464c      	mov	r4, r9
    8d48:	46c6      	mov	lr, r8
    8d4a:	d302      	bcc.n	8d52 <__udivmoddi4+0x1f6>
    8d4c:	d106      	bne.n	8d5c <__udivmoddi4+0x200>
    8d4e:	454b      	cmp	r3, r9
    8d50:	d204      	bcs.n	8d5c <__udivmoddi4+0x200>
    8d52:	3801      	subs	r0, #1
    8d54:	ebb9 0402 	subs.w	r4, r9, r2
    8d58:	eb68 0e0c 	sbc.w	lr, r8, ip
    8d5c:	2e00      	cmp	r6, #0
    8d5e:	d06f      	beq.n	8e40 <__udivmoddi4+0x2e4>
    8d60:	1b1a      	subs	r2, r3, r4
    8d62:	eb65 050e 	sbc.w	r5, r5, lr
    8d66:	fa22 f301 	lsr.w	r3, r2, r1
    8d6a:	fa05 f707 	lsl.w	r7, r5, r7
    8d6e:	40cd      	lsrs	r5, r1
    8d70:	2100      	movs	r1, #0
    8d72:	431f      	orrs	r7, r3
    8d74:	e9c6 7500 	strd	r7, r5, [r6]
    8d78:	e73e      	b.n	8bf8 <__udivmoddi4+0x9c>
    8d7a:	fa02 fc03 	lsl.w	ip, r2, r3
    8d7e:	f1c3 0020 	rsb	r0, r3, #32
    8d82:	fa01 f203 	lsl.w	r2, r1, r3
    8d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    8d8a:	40c1      	lsrs	r1, r0
    8d8c:	fa24 f500 	lsr.w	r5, r4, r0
    8d90:	fa1f f78c 	uxth.w	r7, ip
    8d94:	409c      	lsls	r4, r3
    8d96:	4315      	orrs	r5, r2
    8d98:	fbb1 f0fe 	udiv	r0, r1, lr
    8d9c:	0c2a      	lsrs	r2, r5, #16
    8d9e:	fb0e 1110 	mls	r1, lr, r0, r1
    8da2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8da6:	fb00 f107 	mul.w	r1, r0, r7
    8daa:	4291      	cmp	r1, r2
    8dac:	d90e      	bls.n	8dcc <__udivmoddi4+0x270>
    8dae:	eb1c 0202 	adds.w	r2, ip, r2
    8db2:	f100 38ff 	add.w	r8, r0, #4294967295
    8db6:	bf2c      	ite	cs
    8db8:	f04f 0901 	movcs.w	r9, #1
    8dbc:	f04f 0900 	movcc.w	r9, #0
    8dc0:	4291      	cmp	r1, r2
    8dc2:	d902      	bls.n	8dca <__udivmoddi4+0x26e>
    8dc4:	f1b9 0f00 	cmp.w	r9, #0
    8dc8:	d031      	beq.n	8e2e <__udivmoddi4+0x2d2>
    8dca:	4640      	mov	r0, r8
    8dcc:	1a52      	subs	r2, r2, r1
    8dce:	b2ad      	uxth	r5, r5
    8dd0:	fbb2 f1fe 	udiv	r1, r2, lr
    8dd4:	fb0e 2211 	mls	r2, lr, r1, r2
    8dd8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    8ddc:	fb01 f207 	mul.w	r2, r1, r7
    8de0:	42aa      	cmp	r2, r5
    8de2:	d907      	bls.n	8df4 <__udivmoddi4+0x298>
    8de4:	eb1c 0505 	adds.w	r5, ip, r5
    8de8:	f101 38ff 	add.w	r8, r1, #4294967295
    8dec:	d201      	bcs.n	8df2 <__udivmoddi4+0x296>
    8dee:	42aa      	cmp	r2, r5
    8df0:	d823      	bhi.n	8e3a <__udivmoddi4+0x2de>
    8df2:	4641      	mov	r1, r8
    8df4:	1aad      	subs	r5, r5, r2
    8df6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8dfa:	e726      	b.n	8c4a <__udivmoddi4+0xee>
    8dfc:	4631      	mov	r1, r6
    8dfe:	4630      	mov	r0, r6
    8e00:	e6fa      	b.n	8bf8 <__udivmoddi4+0x9c>
    8e02:	1a84      	subs	r4, r0, r2
    8e04:	eb65 0303 	sbc.w	r3, r5, r3
    8e08:	2001      	movs	r0, #1
    8e0a:	461f      	mov	r7, r3
    8e0c:	e70c      	b.n	8c28 <__udivmoddi4+0xcc>
    8e0e:	4464      	add	r4, ip
    8e10:	3802      	subs	r0, #2
    8e12:	e74a      	b.n	8caa <__udivmoddi4+0x14e>
    8e14:	4464      	add	r4, ip
    8e16:	3802      	subs	r0, #2
    8e18:	e6e4      	b.n	8be4 <__udivmoddi4+0x88>
    8e1a:	3a02      	subs	r2, #2
    8e1c:	4465      	add	r5, ip
    8e1e:	e72f      	b.n	8c80 <__udivmoddi4+0x124>
    8e20:	3902      	subs	r1, #2
    8e22:	4462      	add	r2, ip
    8e24:	e6c9      	b.n	8bba <__udivmoddi4+0x5e>
    8e26:	f1a8 0802 	sub.w	r8, r8, #2
    8e2a:	4465      	add	r5, ip
    8e2c:	e770      	b.n	8d10 <__udivmoddi4+0x1b4>
    8e2e:	3802      	subs	r0, #2
    8e30:	4462      	add	r2, ip
    8e32:	e7cb      	b.n	8dcc <__udivmoddi4+0x270>
    8e34:	3802      	subs	r0, #2
    8e36:	4465      	add	r5, ip
    8e38:	e77e      	b.n	8d38 <__udivmoddi4+0x1dc>
    8e3a:	3902      	subs	r1, #2
    8e3c:	4465      	add	r5, ip
    8e3e:	e7d9      	b.n	8df4 <__udivmoddi4+0x298>
    8e40:	4631      	mov	r1, r6
    8e42:	e6d9      	b.n	8bf8 <__udivmoddi4+0x9c>

00008e44 <__aeabi_idiv0>:
    8e44:	4770      	bx	lr
    8e46:	bf00      	nop

00008e48 <_ZN7dataCSC9calcSpeedEv>:
    }

    return retVal;
}

uint16_t dataCSC::calcSpeed() {
    8e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e4c:	4605      	mov	r5, r0
    if (nbrRevSpeed < 0)
    {
        nbrRevSpeed = maxVal - oldSumRevSpeed + sumRevSpeed;
    }

    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e4e:	8900      	ldrh	r0, [r0, #8]
    8e50:	896b      	ldrh	r3, [r5, #10]
    8e52:	4298      	cmp	r0, r3
    8e54:	d047      	beq.n	8ee6 <_ZN7dataCSC9calcSpeedEv+0x9e>
    uint16_t nbrRevSpeed = sumRevSpeed - oldSumRevSpeed;
    8e56:	f8b5 a000 	ldrh.w	sl, [r5]
    8e5a:	f8b5 9002 	ldrh.w	r9, [r5, #2]
    8e5e:	ebaa 0409 	sub.w	r4, sl, r9
    8e62:	b2a4      	uxth	r4, r4
    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e64:	b1f4      	cbz	r4, 8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    {
        wheelCircumference = wheelDiameter;
        wheelCircumference = (wheelDiameter) * 3.1415;
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e66:	eba0 0803 	sub.w	r8, r0, r3
    8e6a:	4640      	mov	r0, r8
    8e6c:	f7ff fb3a 	bl	84e4 <__aeabi_i2d>
    8e70:	2200      	movs	r2, #0
    8e72:	4b21      	ldr	r3, [pc, #132]	; (8ef8 <_ZN7dataCSC9calcSpeedEv+0xb0>)
    8e74:	f7ff fba0 	bl	85b8 <__aeabi_dmul>
        double oldSpeed = speed;

        if (time < 0)
    8e78:	2200      	movs	r2, #0
    8e7a:	2300      	movs	r3, #0
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e7c:	4606      	mov	r6, r0
    8e7e:	460f      	mov	r7, r1
        if (time < 0)
    8e80:	f7ff fe0c 	bl	8a9c <__aeabi_dcmplt>
    8e84:	b138      	cbz	r0, 8e96 <_ZN7dataCSC9calcSpeedEv+0x4e>
        {
            time = (0xffff - oldLastEventSpeed + lastEventSpeed)/1024;
    8e86:	f508 407f 	add.w	r0, r8, #65280	; 0xff00
    8e8a:	30ff      	adds	r0, #255	; 0xff
    8e8c:	1280      	asrs	r0, r0, #10
    8e8e:	f7ff fb29 	bl	84e4 <__aeabi_i2d>
    8e92:	4606      	mov	r6, r0
    8e94:	460f      	mov	r7, r1
        }
        if (sumRevSpeed == oldSumRevSpeed)
    8e96:	45ca      	cmp	sl, r9
    8e98:	d107      	bne.n	8eaa <_ZN7dataCSC9calcSpeedEv+0x62>
        {
            return (uint16_t) oldSpeed;
    8e9a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
            //rpm_speed = time/nbrRevSpeed *60;
            //printk("rpm1%d\n",rpm_speed);
            rpm_speed = (nbrRevSpeed) * 60 / time;
            //printk("rpm2%d\n",rpm_speed);
            speed = rpm_speed * wheelCircumference;
            retVal = (uint16_t) (speed);
    8e9e:	f7ff fe25 	bl	8aec <__aeabi_d2uiz>
    8ea2:	b284      	uxth	r4, r0
            return retVal;
        }  
    }
    return 0;
    8ea4:	4620      	mov	r0, r4
    8ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eaa:	203c      	movs	r0, #60	; 0x3c
        wheelCircumference = wheelDiameter;
    8eac:	e9d5 8906 	ldrd	r8, r9, [r5, #24]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eb0:	4360      	muls	r0, r4
    8eb2:	f7ff fb17 	bl	84e4 <__aeabi_i2d>
    8eb6:	4632      	mov	r2, r6
    8eb8:	463b      	mov	r3, r7
    8eba:	f7ff fca7 	bl	880c <__aeabi_ddiv>
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ebe:	a30c      	add	r3, pc, #48	; (adr r3, 8ef0 <_ZN7dataCSC9calcSpeedEv+0xa8>)
    8ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8ec4:	4606      	mov	r6, r0
    8ec6:	460f      	mov	r7, r1
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ec8:	4640      	mov	r0, r8
    8eca:	4649      	mov	r1, r9
    8ecc:	f7ff fb74 	bl	85b8 <__aeabi_dmul>
    8ed0:	4602      	mov	r2, r0
    8ed2:	460b      	mov	r3, r1
            speed = rpm_speed * wheelCircumference;
    8ed4:	4630      	mov	r0, r6
    8ed6:	4639      	mov	r1, r7
    8ed8:	f7ff fb6e 	bl	85b8 <__aeabi_dmul>
    8edc:	4602      	mov	r2, r0
    8ede:	460b      	mov	r3, r1
    8ee0:	e9c5 2308 	strd	r2, r3, [r5, #32]
    8ee4:	e7db      	b.n	8e9e <_ZN7dataCSC9calcSpeedEv+0x56>
    return 0;
    8ee6:	2400      	movs	r4, #0
    8ee8:	e7dc      	b.n	8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    8eea:	bf00      	nop
    8eec:	f3af 8000 	nop.w
    8ef0:	c083126f 	.word	0xc083126f
    8ef4:	400921ca 	.word	0x400921ca
    8ef8:	3f500000 	.word	0x3f500000
    8efc:	00000000 	.word	0x00000000

00008f00 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth>:
{

    const uint8_t * buffer = (uint8_t *) buf;
    
    // len = 1 -> new diameter received - or diameter reset (when 0)
    if (len == 1)
    8f00:	2b01      	cmp	r3, #1
{
    8f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f06:	4607      	mov	r7, r0
    8f08:	4688      	mov	r8, r1
    8f0a:	4614      	mov	r4, r2
    8f0c:	461e      	mov	r6, r3
    if (len == 1)
    8f0e:	d125      	bne.n	8f5c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x5c>
    {
        diameter = (uint8_t ) *buffer;
    8f10:	7815      	ldrb	r5, [r2, #0]
    8f12:	4b4b      	ldr	r3, [pc, #300]	; (9040 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x140>)

        // check if last bit is '1', then add 0.5 to dia and convert it to cm
        if ((diameter & 0b10000000) == 0b10000000)
        {
            dia = (diameter + 0.5) * 2.54;
    8f14:	4628      	mov	r0, r5
        diameter = (uint8_t ) *buffer;
    8f16:	701d      	strb	r5, [r3, #0]
            dia = (diameter + 0.5) * 2.54;
    8f18:	f7ff fae4 	bl	84e4 <__aeabi_i2d>
        if ((diameter & 0b10000000) == 0b10000000)
    8f1c:	062b      	lsls	r3, r5, #24
    8f1e:	d503      	bpl.n	8f28 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x28>
            dia = (diameter + 0.5) * 2.54;
    8f20:	2200      	movs	r2, #0
    8f22:	4b48      	ldr	r3, [pc, #288]	; (9044 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x144>)
    8f24:	f7ff f992 	bl	824c <__adddf3>
        }
        else {
            dia = diameter * 2.54;
    8f28:	a343      	add	r3, pc, #268	; (adr r3, 9038 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x138>)
    8f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f2e:	f7ff fb43 	bl	85b8 <__aeabi_dmul>
    8f32:	4b45      	ldr	r3, [pc, #276]	; (9048 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x148>)
    8f34:	e9c3 0100 	strd	r0, r1, [r3]
        default:
            break;
        }
    }
    
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    8f38:	463a      	mov	r2, r7
    8f3a:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    8f3e:	4843      	ldr	r0, [pc, #268]	; (904c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x14c>)
    8f40:	f010 fd13 	bl	1996a <printk>
    8f44:	2300      	movs	r3, #0
 
    for(uint8_t i = 0; i < len; i++){
        printk("%02X", buffer[i]);
    8f46:	4f42      	ldr	r7, [pc, #264]	; (9050 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x150>)
    for(uint8_t i = 0; i < len; i++){
    8f48:	1c5d      	adds	r5, r3, #1
    8f4a:	b2db      	uxtb	r3, r3
    8f4c:	42b3      	cmp	r3, r6
    8f4e:	da6c      	bge.n	902a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x12a>
        printk("%02X", buffer[i]);
    8f50:	5ce1      	ldrb	r1, [r4, r3]
    8f52:	4638      	mov	r0, r7
    8f54:	f010 fd09 	bl	1996a <printk>
    for(uint8_t i = 0; i < len; i++){
    8f58:	462b      	mov	r3, r5
    8f5a:	e7f5      	b.n	8f48 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x48>
    if (len == 19)
    8f5c:	2b13      	cmp	r3, #19
    8f5e:	d1eb      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
        nbrAddresses = (uint8_t) buffer[17];
    8f60:	7c53      	ldrb	r3, [r2, #17]
    8f62:	4a3c      	ldr	r2, [pc, #240]	; (9054 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x154>)
        infoSensors = (uint8_t) buffer[18];
    8f64:	7ca1      	ldrb	r1, [r4, #18]
        nbrAddresses = (uint8_t) buffer[17];
    8f66:	7013      	strb	r3, [r2, #0]
        infoSensors = (uint8_t) buffer[18];
    8f68:	4a3b      	ldr	r2, [pc, #236]	; (9058 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x158>)
        switch (nbrAddresses)
    8f6a:	2b02      	cmp	r3, #2
        infoSensors = (uint8_t) buffer[18];
    8f6c:	7011      	strb	r1, [r2, #0]
        switch (nbrAddresses)
    8f6e:	d00e      	beq.n	8f8e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x8e>
    8f70:	2b03      	cmp	r3, #3
    8f72:	d02e      	beq.n	8fd2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xd2>
    8f74:	2b01      	cmp	r3, #1
    8f76:	d1df      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8f78:	4a38      	ldr	r2, [pc, #224]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8f7a:	1e63      	subs	r3, r4, #1
    8f7c:	f104 0110 	add.w	r1, r4, #16
                uint8_t val = (uint8_t) buffer[i];
    8f80:	f813 0f01 	ldrb.w	r0, [r3, #1]!
            for (uint8_t i=0; i<17; i++)
    8f84:	4299      	cmp	r1, r3
                address1[i] = charToSave;
    8f86:	f802 0b01 	strb.w	r0, [r2], #1
            for (uint8_t i=0; i<17; i++)
    8f8a:	d1f9      	bne.n	8f80 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x80>
    8f8c:	e7d4      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8f8e:	4b34      	ldr	r3, [pc, #208]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8f90:	781d      	ldrb	r5, [r3, #0]
    8f92:	3501      	adds	r5, #1
    8f94:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8f96:	2d01      	cmp	r5, #1
            cntAddresses++;
    8f98:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8f9a:	d10a      	bne.n	8fb2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xb2>
    8f9c:	4a2f      	ldr	r2, [pc, #188]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8f9e:	1e63      	subs	r3, r4, #1
    8fa0:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fa4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fa8:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8faa:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fae:	d1f9      	bne.n	8fa4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xa4>
    8fb0:	e7c2      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    8fb2:	2d02      	cmp	r5, #2
    8fb4:	d1c0      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8fb6:	4a2b      	ldr	r2, [pc, #172]	; (9064 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    8fb8:	1e63      	subs	r3, r4, #1
    8fba:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fbe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fc2:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    8fc4:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fc8:	d1f9      	bne.n	8fbe <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xbe>
                cntAddresses = 0;
    8fca:	2200      	movs	r2, #0
    8fcc:	4b24      	ldr	r3, [pc, #144]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8fce:	701a      	strb	r2, [r3, #0]
    8fd0:	e7b2      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8fd2:	4b23      	ldr	r3, [pc, #140]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8fd4:	781d      	ldrb	r5, [r3, #0]
    8fd6:	3501      	adds	r5, #1
    8fd8:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8fda:	2d01      	cmp	r5, #1
            cntAddresses++;
    8fdc:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8fde:	d10a      	bne.n	8ff6 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xf6>
    8fe0:	4a1e      	ldr	r2, [pc, #120]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8fe2:	1e63      	subs	r3, r4, #1
    8fe4:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fe8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fec:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8fee:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8ff2:	d1f9      	bne.n	8fe8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xe8>
    8ff4:	e7a0      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    8ff6:	2d02      	cmp	r5, #2
    8ff8:	d10a      	bne.n	9010 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x110>
    8ffa:	4a1a      	ldr	r2, [pc, #104]	; (9064 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    8ffc:	1e63      	subs	r3, r4, #1
    8ffe:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9002:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9006:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    9008:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    900c:	d1f9      	bne.n	9002 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x102>
    900e:	e793      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            } else if (cntAddresses == 3)
    9010:	2d03      	cmp	r5, #3
    9012:	d191      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    9014:	4a14      	ldr	r2, [pc, #80]	; (9068 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x168>)
    9016:	1e63      	subs	r3, r4, #1
    9018:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    901c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9020:	428b      	cmp	r3, r1
                    address3[i] = charToSave;
    9022:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9026:	d1f9      	bne.n	901c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x11c>
    9028:	e7cf      	b.n	8fca <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xca>
    }
    printk("\n");
    902a:	4810      	ldr	r0, [pc, #64]	; (906c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x16c>)
    902c:	f010 fc9d 	bl	1996a <printk>
 	return len;
}
    9030:	4630      	mov	r0, r6
    9032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9036:	bf00      	nop
    9038:	851eb852 	.word	0x851eb852
    903c:	400451eb 	.word	0x400451eb
    9040:	2000c110 	.word	0x2000c110
    9044:	3fe00000 	.word	0x3fe00000
    9048:	20008818 	.word	0x20008818
    904c:	0001e945 	.word	0x0001e945
    9050:	0001e971 	.word	0x0001e971
    9054:	2000c112 	.word	0x2000c112
    9058:	2000c111 	.word	0x2000c111
    905c:	2000befc 	.word	0x2000befc
    9060:	2000bf2f 	.word	0x2000bf2f
    9064:	2000bf0d 	.word	0x2000bf0d
    9068:	2000bf1e 	.word	0x2000bf1e
    906c:	00021538 	.word	0x00021538

00009070 <main>:
#include <bluetooth/services/bas_client.h>

//static struct bt_bas_client bas;

void main(void)
{
    9070:	b500      	push	{lr}
	printk("Application start\n");
    9072:	4807      	ldr	r0, [pc, #28]	; (9090 <main+0x20>)
{
    9074:	b091      	sub	sp, #68	; 0x44
	printk("Application start\n");
    9076:	f010 fc78 	bl	1996a <printk>

	//bt_bas_client_init(&bas);


	// create a new device manager
	deviceManager dManager;
    907a:	4668      	mov	r0, sp
    907c:	f000 f968 	bl	9350 <_ZN13deviceManagerC1Ev>
	// start application as peripheral and central
	dManager.setDevice(true,true);
    9080:	2201      	movs	r2, #1
    9082:	4668      	mov	r0, sp
    9084:	4611      	mov	r1, r2
    9086:	f000 fbb5 	bl	97f4 <_ZN13deviceManager9setDeviceEbb>
    908a:	b011      	add	sp, #68	; 0x44
    908c:	f85d fb04 	ldr.w	pc, [sp], #4
    9090:	0001e264 	.word	0x0001e264

00009094 <_ZN13deviceManager13app_button_cbEv>:
    dk_set_led(USER_LED,led_state);
}

bool deviceManager::app_button_cb(void){
    return app_button_state;
}
    9094:	4b01      	ldr	r3, [pc, #4]	; (909c <_ZN13deviceManager13app_button_cbEv+0x8>)
    9096:	7818      	ldrb	r0, [r3, #0]
    9098:	4770      	bx	lr
    909a:	bf00      	nop
    909c:	2000bef7 	.word	0x2000bef7

000090a0 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv>:
}


void deviceManager::discovery_error_found(struct bt_conn *conn, int err, void *ctx)
{
	printk("The discovery procedure failed, err %d\n", err);
    90a0:	4801      	ldr	r0, [pc, #4]	; (90a8 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv+0x8>)
    90a2:	f010 bc62 	b.w	1996a <printk>
    90a6:	bf00      	nop
    90a8:	0001e277 	.word	0x0001e277

000090ac <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv>:
}


void deviceManager::discoveryCompletedHR(struct bt_gatt_dm *dm, void *ctx) 
{
    90ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90ae:	4604      	mov	r4, r0
	const struct bt_gatt_dm_attr *gatt_desc;

	// subscribe CSC characteristic
	static struct bt_gatt_subscribe_params paramHR;

	struct bt_conn *conn = bt_gatt_dm_conn_get(dm);
    90b0:	f011 f897 	bl	1a1e2 <bt_gatt_dm_conn_get>
    90b4:	4607      	mov	r7, r0

	printk("The discovery procedure succeeded\n");
    90b6:	4821      	ldr	r0, [pc, #132]	; (913c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x90>)
    90b8:	f010 fc57 	bl	1996a <printk>

	bt_gatt_dm_data_print(dm);

	/* Heart rate characteristic */
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_HRS_MEASUREMENT);
    90bc:	4620      	mov	r0, r4
    90be:	4920      	ldr	r1, [pc, #128]	; (9140 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x94>)
    90c0:	f002 ffcc 	bl	c05c <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    90c4:	4606      	mov	r6, r0
    90c6:	b920      	cbnz	r0, 90d2 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x26>
		printk("No heart rate measurement characteristic found");
    90c8:	481e      	ldr	r0, [pc, #120]	; (9144 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x98>)

	err = bt_gatt_dm_data_release(dm);
	if (err) {
		printk("Could not release the discovery data (err %d)\n", err);
	}
}
    90ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printk("No heat rate measurement characteristic value found");
    90ce:	f010 bc4c 	b.w	1996a <printk>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    90d2:	4601      	mov	r1, r0
    90d4:	4a1c      	ldr	r2, [pc, #112]	; (9148 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x9c>)
    90d6:	4620      	mov	r0, r4
    90d8:	f011 f8d0 	bl	1a27c <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    90dc:	b908      	cbnz	r0, 90e2 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x36>
		printk("No heat rate measurement characteristic value found");
    90de:	481b      	ldr	r0, [pc, #108]	; (914c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa0>)
    90e0:	e7f3      	b.n	90ca <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1e>
	paramHR.value_handle = gatt_desc->handle;
    90e2:	8883      	ldrh	r3, [r0, #4]
    90e4:	4d1a      	ldr	r5, [pc, #104]	; (9150 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa4>)
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    90e6:	4631      	mov	r1, r6
    90e8:	4620      	mov	r0, r4
    90ea:	4a1a      	ldr	r2, [pc, #104]	; (9154 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa8>)
	paramHR.value_handle = gatt_desc->handle;
    90ec:	812b      	strh	r3, [r5, #8]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    90ee:	f011 f8c5 	bl	1a27c <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    90f2:	b908      	cbnz	r0, 90f8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x4c>
		printk("No heart rate CCC descriptor found. "
    90f4:	4818      	ldr	r0, [pc, #96]	; (9158 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xac>)
    90f6:	e7e8      	b.n	90ca <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1e>
	paramHR.notify = notify_func;
    90f8:	4b18      	ldr	r3, [pc, #96]	; (915c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xb0>)
	err = bt_gatt_subscribe(conn, &paramHR);
    90fa:	4629      	mov	r1, r5
	paramHR.notify = notify_func;
    90fc:	602b      	str	r3, [r5, #0]
	paramHR.value = BT_GATT_CCC_NOTIFY;
    90fe:	2301      	movs	r3, #1
    9100:	81ab      	strh	r3, [r5, #12]
	paramHR.ccc_handle = gatt_desc->handle;
    9102:	8883      	ldrh	r3, [r0, #4]
	err = bt_gatt_subscribe(conn, &paramHR);
    9104:	4638      	mov	r0, r7
	paramHR.ccc_handle = gatt_desc->handle;
    9106:	816b      	strh	r3, [r5, #10]
	err = bt_gatt_subscribe(conn, &paramHR);
    9108:	f00a ff3a 	bl	13f80 <bt_gatt_subscribe>
	if (err && err != -EALREADY) {
    910c:	4601      	mov	r1, r0
    910e:	b178      	cbz	r0, 9130 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x84>
    9110:	f110 0f45 	cmn.w	r0, #69	; 0x45
    9114:	d00c      	beq.n	9130 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x84>
		printk("Subscribe failed (err %d)\n", err);
    9116:	4812      	ldr	r0, [pc, #72]	; (9160 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xb4>)
    9118:	f010 fc27 	bl	1996a <printk>
	err = bt_gatt_dm_data_release(dm);
    911c:	4620      	mov	r0, r4
    911e:	f011 f8bf 	bl	1a2a0 <bt_gatt_dm_data_release>
	if (err) {
    9122:	4601      	mov	r1, r0
    9124:	b140      	cbz	r0, 9138 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x8c>
}
    9126:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printk("Could not release the discovery data (err %d)\n", err);
    912a:	480e      	ldr	r0, [pc, #56]	; (9164 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xb8>)
    912c:	f010 bc1d 	b.w	1996a <printk>
		printk("[SUBSCRIBED]\n");
    9130:	480d      	ldr	r0, [pc, #52]	; (9168 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xbc>)
    9132:	f010 fc1a 	bl	1996a <printk>
    9136:	e7f1      	b.n	911c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x70>
}
    9138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    913a:	bf00      	nop
    913c:	0001e29f 	.word	0x0001e29f
    9140:	0001e1bc 	.word	0x0001e1bc
    9144:	0001e2c2 	.word	0x0001e2c2
    9148:	0001e1c0 	.word	0x0001e1c0
    914c:	0001e2f1 	.word	0x0001e2f1
    9150:	2000a480 	.word	0x2000a480
    9154:	0001e1c4 	.word	0x0001e1c4
    9158:	0001e325 	.word	0x0001e325
    915c:	000091b9 	.word	0x000091b9
    9160:	0001e37c 	.word	0x0001e37c
    9164:	0001e3a5 	.word	0x0001e3a5
    9168:	0001e397 	.word	0x0001e397

0000916c <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv>:
void deviceManager::discovery_service_not_found(struct bt_conn *conn, void *ctx) {
    916c:	b513      	push	{r0, r1, r4, lr}
    916e:	4604      	mov	r4, r0
	printk("Service not found!\n");
    9170:	4808      	ldr	r0, [pc, #32]	; (9194 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x28>)
    9172:	f010 fbfa 	bl	1996a <printk>
	error[0] = 10;
    9176:	230a      	movs	r3, #10
    9178:	f88d 3004 	strb.w	r3, [sp, #4]
	data_service_send(peripheralConn,error, sizeof(error));
    917c:	4b06      	ldr	r3, [pc, #24]	; (9198 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x2c>)
    917e:	2201      	movs	r2, #1
    9180:	6818      	ldr	r0, [r3, #0]
    9182:	a901      	add	r1, sp, #4
    9184:	f000 fdd8 	bl	9d38 <_Z17data_service_sendP7bt_connPKht>
	bt_conn_disconnect(conn,-5);
    9188:	21fb      	movs	r1, #251	; 0xfb
    918a:	4620      	mov	r0, r4
    918c:	f007 fdb8 	bl	10d00 <bt_conn_disconnect>
}
    9190:	b002      	add	sp, #8
    9192:	bd10      	pop	{r4, pc}
    9194:	0001e3d4 	.word	0x0001e3d4
    9198:	2000a468 	.word	0x2000a468

0000919c <_ZN13deviceManager13buttonChangedEjj>:
   	if (has_changed & USER_BUTTON) {
    919c:	07cb      	lsls	r3, r1, #31
void deviceManager::buttonChanged(uint32_t button_state, uint32_t has_changed){
    919e:	b510      	push	{r4, lr}
   	if (has_changed & USER_BUTTON) {
    91a0:	d507      	bpl.n	91b2 <_ZN13deviceManager13buttonChangedEjj+0x16>
		bt_lbs_send_button_state(button_state);
    91a2:	1e04      	subs	r4, r0, #0
    91a4:	bf18      	it	ne
    91a6:	2401      	movne	r4, #1
    91a8:	4620      	mov	r0, r4
    91aa:	f003 fb59 	bl	c860 <bt_lbs_send_button_state>
		app_button_state = button_state ? true : false;
    91ae:	4b01      	ldr	r3, [pc, #4]	; (91b4 <_ZN13deviceManager13buttonChangedEjj+0x18>)
    91b0:	701c      	strb	r4, [r3, #0]
}
    91b2:	bd10      	pop	{r4, pc}
    91b4:	2000bef7 	.word	0x2000bef7

000091b8 <_ZN13deviceManager11notify_funcEP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
	return BT_GATT_ITER_CONTINUE;
}

uint8_t deviceManager::notify_func(struct bt_conn *conn,
		struct bt_gatt_subscribe_params *params,
		const void *data, uint16_t length) {
    91b8:	b538      	push	{r3, r4, r5, lr}
    91ba:	4614      	mov	r4, r2
    91bc:	460d      	mov	r5, r1
    91be:	461a      	mov	r2, r3

	if (!data) {
    91c0:	b92c      	cbnz	r4, 91ce <_ZN13deviceManager11notify_funcEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x16>
		printk("[UNSUBSCRIBED]\n");
    91c2:	4809      	ldr	r0, [pc, #36]	; (91e8 <_ZN13deviceManager11notify_funcEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x30>)
    91c4:	f010 fbd1 	bl	1996a <printk>
		params->value_handle = 0U;
		return BT_GATT_ITER_STOP;
    91c8:	4620      	mov	r0, r4
		params->value_handle = 0U;
    91ca:	812c      	strh	r4, [r5, #8]
	} else {
		printk("[NOTIFICATION] data %p length %u\n", data, length);
	}

	return BT_GATT_ITER_CONTINUE;
}
    91cc:	bd38      	pop	{r3, r4, r5, pc}
	if (length == 2) {
    91ce:	2b02      	cmp	r3, #2
    91d0:	d105      	bne.n	91de <_ZN13deviceManager11notify_funcEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x26>
		printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    91d2:	7861      	ldrb	r1, [r4, #1]
    91d4:	4805      	ldr	r0, [pc, #20]	; (91ec <_ZN13deviceManager11notify_funcEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x34>)
    91d6:	f010 fbc8 	bl	1996a <printk>
	return BT_GATT_ITER_CONTINUE;
    91da:	2001      	movs	r0, #1
    91dc:	e7f6      	b.n	91cc <_ZN13deviceManager11notify_funcEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x14>
		printk("[NOTIFICATION] data %p length %u\n", data, length);
    91de:	4621      	mov	r1, r4
    91e0:	4803      	ldr	r0, [pc, #12]	; (91f0 <_ZN13deviceManager11notify_funcEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>)
    91e2:	f010 fbc2 	bl	1996a <printk>
    91e6:	e7f8      	b.n	91da <_ZN13deviceManager11notify_funcEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x22>
    91e8:	0001e3e8 	.word	0x0001e3e8
    91ec:	0001e3f8 	.word	0x0001e3f8
    91f0:	0001e41a 	.word	0x0001e41a

000091f4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
			const void *data, uint16_t length) {
    91f4:	b513      	push	{r0, r1, r4, lr}
    91f6:	4611      	mov	r1, r2
	if (subscriptionDone)
    91f8:	4a31      	ldr	r2, [pc, #196]	; (92c0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xcc>)
    91fa:	7812      	ldrb	r2, [r2, #0]
    91fc:	2a00      	cmp	r2, #0
    91fe:	d034      	beq.n	926a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
		if (length > 0)
    9200:	2b00      	cmp	r3, #0
    9202:	d032      	beq.n	926a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
			deviceManager::data.saveData(data);
    9204:	4c2f      	ldr	r4, [pc, #188]	; (92c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    9206:	4620      	mov	r0, r4
    9208:	f000 fd10 	bl	9c2c <_ZN7dataCSC8saveDataEPKv>
			if (getDiameter() != 0 && diameterSet == false)
    920c:	f000 fdbe 	bl	9d8c <_Z11getDiameterv>
    9210:	2200      	movs	r2, #0
    9212:	2300      	movs	r3, #0
    9214:	f7ff fc38 	bl	8a88 <__aeabi_dcmpeq>
    9218:	bb50      	cbnz	r0, 9270 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7c>
    921a:	4b2b      	ldr	r3, [pc, #172]	; (92c8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    921c:	781a      	ldrb	r2, [r3, #0]
    921e:	bb3a      	cbnz	r2, 9270 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7c>
				diameterSet = true;
    9220:	2201      	movs	r2, #1
    9222:	701a      	strb	r2, [r3, #0]
				deviceManager::data.wheelDiameter = getDiameter();
    9224:	f000 fdb2 	bl	9d8c <_Z11getDiameterv>
    9228:	e9c4 0106 	strd	r0, r1, [r4, #24]
			if (deviceManager::data.type == CSC_SPEED)
    922c:	7c24      	ldrb	r4, [r4, #16]
    922e:	2c01      	cmp	r4, #1
    9230:	d12d      	bne.n	928e <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x9a>
				if (diameterSet)
    9232:	4b25      	ldr	r3, [pc, #148]	; (92c8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    9234:	781b      	ldrb	r3, [r3, #0]
    9236:	b1c3      	cbz	r3, 926a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
					uint16_t speed = deviceManager::data.calcSpeed();
    9238:	4822      	ldr	r0, [pc, #136]	; (92c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    923a:	f7ff fe05 	bl	8e48 <_ZN7dataCSC9calcSpeedEv>
					if (speed > 0)
    923e:	b1a0      	cbz	r0, 926a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
						dataToSend[1] = (uint8_t) (speed/100);	
    9240:	2164      	movs	r1, #100	; 0x64
    9242:	fbb0 f1f1 	udiv	r1, r0, r1
						dataToSend[0] = CSC_SPEED;
    9246:	f88d 4004 	strb.w	r4, [sp, #4]
						if (peripheralConn != nullptr)
    924a:	4c20      	ldr	r4, [pc, #128]	; (92cc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>)
						dataToSend[1] = (uint8_t) (speed/100);	
    924c:	b289      	uxth	r1, r1
						if (peripheralConn != nullptr)
    924e:	6823      	ldr	r3, [r4, #0]
						dataToSend[1] = (uint8_t) (speed/100);	
    9250:	f88d 1005 	strb.w	r1, [sp, #5]
						val_after_comma = (uint8_t) (speed);
    9254:	f88d 0006 	strb.w	r0, [sp, #6]
						if (peripheralConn != nullptr)
    9258:	b13b      	cbz	r3, 926a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
							printk("Speed: %d\n",speed/100);
    925a:	481d      	ldr	r0, [pc, #116]	; (92d0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xdc>)
							printk("Cadence rpm: %d\n",rpm);
    925c:	f010 fb85 	bl	1996a <printk>
							data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    9260:	2203      	movs	r2, #3
    9262:	6820      	ldr	r0, [r4, #0]
    9264:	a901      	add	r1, sp, #4
    9266:	f000 fd67 	bl	9d38 <_Z17data_service_sendP7bt_connPKht>
}
    926a:	2001      	movs	r0, #1
    926c:	b002      	add	sp, #8
    926e:	bd10      	pop	{r4, pc}
			else if (getDiameter() == 0 && diameterSet == true)
    9270:	f000 fd8c 	bl	9d8c <_Z11getDiameterv>
    9274:	2200      	movs	r2, #0
    9276:	2300      	movs	r3, #0
    9278:	f7ff fc06 	bl	8a88 <__aeabi_dcmpeq>
    927c:	2800      	cmp	r0, #0
    927e:	d0d5      	beq.n	922c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
    9280:	4b11      	ldr	r3, [pc, #68]	; (92c8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    9282:	781a      	ldrb	r2, [r3, #0]
    9284:	2a00      	cmp	r2, #0
    9286:	d0d1      	beq.n	922c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
				diameterSet = false;
    9288:	2200      	movs	r2, #0
    928a:	701a      	strb	r2, [r3, #0]
    928c:	e7ce      	b.n	922c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
			else if (deviceManager::data.type == CSC_CADENCE)
    928e:	2c02      	cmp	r4, #2
    9290:	d1eb      	bne.n	926a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
				if (diameterSet)
    9292:	4b0d      	ldr	r3, [pc, #52]	; (92c8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    9294:	781b      	ldrb	r3, [r3, #0]
    9296:	2b00      	cmp	r3, #0
    9298:	d0e7      	beq.n	926a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
					uint16_t rpm = deviceManager::data.calcRPM();
    929a:	480a      	ldr	r0, [pc, #40]	; (92c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    929c:	f000 fce8 	bl	9c70 <_ZN7dataCSC7calcRPMEv>
					if (rpm > 0)
    92a0:	4601      	mov	r1, r0
    92a2:	2800      	cmp	r0, #0
    92a4:	d0e1      	beq.n	926a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
						dataToSend[0] = CSC_CADENCE;	
    92a6:	f88d 4004 	strb.w	r4, [sp, #4]
						if (peripheralConn != nullptr)
    92aa:	4c08      	ldr	r4, [pc, #32]	; (92cc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>)
						dataToSend[2] = (uint8_t) (rpm >> 8);	
    92ac:	0a03      	lsrs	r3, r0, #8
    92ae:	f88d 3006 	strb.w	r3, [sp, #6]
						if (peripheralConn != nullptr)
    92b2:	6823      	ldr	r3, [r4, #0]
						dataToSend[1] = (uint8_t) rpm;
    92b4:	f88d 0005 	strb.w	r0, [sp, #5]
						if (peripheralConn != nullptr)
    92b8:	2b00      	cmp	r3, #0
    92ba:	d0d6      	beq.n	926a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
							printk("Cadence rpm: %d\n",rpm);
    92bc:	4805      	ldr	r0, [pc, #20]	; (92d4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe0>)
    92be:	e7cd      	b.n	925c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x68>
    92c0:	2000bef8 	.word	0x2000bef8
    92c4:	200087e8 	.word	0x200087e8
    92c8:	2000bef3 	.word	0x2000bef3
    92cc:	2000a468 	.word	0x2000a468
    92d0:	0001e43c 	.word	0x0001e43c
    92d4:	0001e447 	.word	0x0001e447

000092d8 <bt_addr_le_to_str.isra.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    92d8:	b5f0      	push	{r4, r5, r6, r7, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    92da:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    92dc:	b08b      	sub	sp, #44	; 0x2c
    92de:	4604      	mov	r4, r0
    92e0:	460e      	mov	r6, r1
    92e2:	4617      	mov	r7, r2
    92e4:	ad07      	add	r5, sp, #28
    92e6:	2b03      	cmp	r3, #3
    92e8:	d820      	bhi.n	932c <bt_addr_le_to_str.isra.0+0x54>
    92ea:	e8df f003 	tbb	[pc, r3]
    92ee:	1902      	.short	0x1902
    92f0:	1d1b      	.short	0x1d1b
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    92f2:	4911      	ldr	r1, [pc, #68]	; (9338 <bt_addr_le_to_str.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    92f4:	4628      	mov	r0, r5
    92f6:	f011 fd1e 	bl	1ad36 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    92fa:	7863      	ldrb	r3, [r4, #1]
    92fc:	4639      	mov	r1, r7
    92fe:	9304      	str	r3, [sp, #16]
    9300:	78a3      	ldrb	r3, [r4, #2]
    9302:	4630      	mov	r0, r6
    9304:	9303      	str	r3, [sp, #12]
    9306:	78e3      	ldrb	r3, [r4, #3]
    9308:	4a0c      	ldr	r2, [pc, #48]	; (933c <bt_addr_le_to_str.isra.0+0x64>)
    930a:	9302      	str	r3, [sp, #8]
    930c:	7923      	ldrb	r3, [r4, #4]
    930e:	9505      	str	r5, [sp, #20]
    9310:	9301      	str	r3, [sp, #4]
    9312:	7963      	ldrb	r3, [r4, #5]
    9314:	9300      	str	r3, [sp, #0]
    9316:	79a3      	ldrb	r3, [r4, #6]
    9318:	f010 fb34 	bl	19984 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    931c:	b00b      	add	sp, #44	; 0x2c
    931e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    9320:	4907      	ldr	r1, [pc, #28]	; (9340 <bt_addr_le_to_str.isra.0+0x68>)
    9322:	e7e7      	b.n	92f4 <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "public-id");
    9324:	4907      	ldr	r1, [pc, #28]	; (9344 <bt_addr_le_to_str.isra.0+0x6c>)
    9326:	e7e5      	b.n	92f4 <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "random-id");
    9328:	4907      	ldr	r1, [pc, #28]	; (9348 <bt_addr_le_to_str.isra.0+0x70>)
    932a:	e7e3      	b.n	92f4 <bt_addr_le_to_str.isra.0+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    932c:	210a      	movs	r1, #10
    932e:	4628      	mov	r0, r5
    9330:	4a06      	ldr	r2, [pc, #24]	; (934c <bt_addr_le_to_str.isra.0+0x74>)
    9332:	f010 fb27 	bl	19984 <snprintk>
		break;
    9336:	e7e0      	b.n	92fa <bt_addr_le_to_str.isra.0+0x22>
    9338:	0001e458 	.word	0x0001e458
    933c:	0001e481 	.word	0x0001e481
    9340:	0001e45f 	.word	0x0001e45f
    9344:	0001e466 	.word	0x0001e466
    9348:	0001e470 	.word	0x0001e470
    934c:	0001e47a 	.word	0x0001e47a

00009350 <_ZN13deviceManagerC1Ev>:
deviceManager::deviceManager(){
    9350:	b510      	push	{r4, lr}
    9352:	4604      	mov	r4, r0
    9354:	2214      	movs	r2, #20
    9356:	2100      	movs	r1, #0
    9358:	f011 fd72 	bl	1ae40 <memset>
    935c:	4b0e      	ldr	r3, [pc, #56]	; (9398 <_ZN13deviceManagerC1Ev+0x48>)
    935e:	4a0f      	ldr	r2, [pc, #60]	; (939c <_ZN13deviceManagerC1Ev+0x4c>)
    9360:	6023      	str	r3, [r4, #0]
    9362:	4b0f      	ldr	r3, [pc, #60]	; (93a0 <_ZN13deviceManagerC1Ev+0x50>)
    9364:	e892 0003 	ldmia.w	r2, {r0, r1}
    9368:	6063      	str	r3, [r4, #4]
    936a:	f104 0314 	add.w	r3, r4, #20
    936e:	e883 0003 	stmia.w	r3, {r0, r1}
    9372:	2224      	movs	r2, #36	; 0x24
    9374:	2100      	movs	r1, #0
    9376:	f104 001c 	add.w	r0, r4, #28
    937a:	f011 fd61 	bl	1ae40 <memset>
		centralConnections[i] = nullptr;
    937e:	2300      	movs	r3, #0
    9380:	4a08      	ldr	r2, [pc, #32]	; (93a4 <_ZN13deviceManagerC1Ev+0x54>)
}
    9382:	4620      	mov	r0, r4
		centralConnections[i] = nullptr;
    9384:	e9c2 3300 	strd	r3, r3, [r2]
    9388:	e9c2 3302 	strd	r3, r3, [r2, #8]
	connectedP = false;
    938c:	4a06      	ldr	r2, [pc, #24]	; (93a8 <_ZN13deviceManagerC1Ev+0x58>)
    938e:	7013      	strb	r3, [r2, #0]
	connectedC = false;
    9390:	4a06      	ldr	r2, [pc, #24]	; (93ac <_ZN13deviceManagerC1Ev+0x5c>)
    9392:	7013      	strb	r3, [r2, #0]
}
    9394:	bd10      	pop	{r4, pc}
    9396:	bf00      	nop
    9398:	000098b9 	.word	0x000098b9
    939c:	0001d7d0 	.word	0x0001d7d0
    93a0:	00009b05 	.word	0x00009b05
    93a4:	2000a46c 	.word	0x2000a46c
    93a8:	2000bef2 	.word	0x2000bef2
    93ac:	2000bef1 	.word	0x2000bef1

000093b0 <_ZN13deviceManager9getDeviceEv>:
    if(isCentral && isPeripheral){
    93b0:	4a07      	ldr	r2, [pc, #28]	; (93d0 <_ZN13deviceManager9getDeviceEv+0x20>)
    93b2:	4b08      	ldr	r3, [pc, #32]	; (93d4 <_ZN13deviceManager9getDeviceEv+0x24>)
    93b4:	7812      	ldrb	r2, [r2, #0]
    93b6:	781b      	ldrb	r3, [r3, #0]
    93b8:	b122      	cbz	r2, 93c4 <_ZN13deviceManager9getDeviceEv+0x14>
        return 1;
    93ba:	2b00      	cmp	r3, #0
    93bc:	bf14      	ite	ne
    93be:	2003      	movne	r0, #3
    93c0:	2001      	moveq	r0, #1
    93c2:	4770      	bx	lr
        return 0;
    93c4:	2b00      	cmp	r3, #0
    93c6:	bf14      	ite	ne
    93c8:	2002      	movne	r0, #2
    93ca:	2000      	moveq	r0, #0
}
    93cc:	4770      	bx	lr
    93ce:	bf00      	nop
    93d0:	2000befa 	.word	0x2000befa
    93d4:	2000bef5 	.word	0x2000bef5

000093d8 <_ZN13deviceManager10initButtonEv>:
int deviceManager::initButton(){
    93d8:	b510      	push	{r4, lr}
    err = dk_buttons_init(buttonChanged);
    93da:	4805      	ldr	r0, [pc, #20]	; (93f0 <_ZN13deviceManager10initButtonEv+0x18>)
    93dc:	f00c fb40 	bl	15a60 <dk_buttons_init>
	if (err) {
    93e0:	4604      	mov	r4, r0
    93e2:	b118      	cbz	r0, 93ec <_ZN13deviceManager10initButtonEv+0x14>
		printk("Cannot init buttons (err: %d)\n", err);
    93e4:	4601      	mov	r1, r0
    93e6:	4803      	ldr	r0, [pc, #12]	; (93f4 <_ZN13deviceManager10initButtonEv+0x1c>)
    93e8:	f010 fabf 	bl	1996a <printk>
}
    93ec:	4620      	mov	r0, r4
    93ee:	bd10      	pop	{r4, pc}
    93f0:	0000919d 	.word	0x0000919d
    93f4:	0001e4a4 	.word	0x0001e4a4

000093f8 <_ZN13deviceManager16startAdvertisingEv>:
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    93f8:	2301      	movs	r3, #1
void deviceManager::startAdvertising() {
    93fa:	b507      	push	{r0, r1, r2, lr}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    93fc:	490b      	ldr	r1, [pc, #44]	; (942c <_ZN13deviceManager16startAdvertisingEv+0x34>)
    93fe:	9300      	str	r3, [sp, #0]
    9400:	2202      	movs	r2, #2
    9402:	4b0b      	ldr	r3, [pc, #44]	; (9430 <_ZN13deviceManager16startAdvertisingEv+0x38>)
    9404:	480b      	ldr	r0, [pc, #44]	; (9434 <_ZN13deviceManager16startAdvertisingEv+0x3c>)
    9406:	f006 fc8d 	bl	fd24 <bt_le_adv_start>
	if (err) {
    940a:	4601      	mov	r1, r0
    940c:	b128      	cbz	r0, 941a <_ZN13deviceManager16startAdvertisingEv+0x22>
		printk("Advertising failed to start (err %d)\n", err);
    940e:	480a      	ldr	r0, [pc, #40]	; (9438 <_ZN13deviceManager16startAdvertisingEv+0x40>)
}
    9410:	b003      	add	sp, #12
    9412:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Advertising failed to start (err %d)\n", err);
    9416:	f010 baa8 	b.w	1996a <printk>
	printk("Advertising successfully started\n");
    941a:	4808      	ldr	r0, [pc, #32]	; (943c <_ZN13deviceManager16startAdvertisingEv+0x44>)
    941c:	f010 faa5 	bl	1996a <printk>
	printk("Waiting for connection...\n");
    9420:	4807      	ldr	r0, [pc, #28]	; (9440 <_ZN13deviceManager16startAdvertisingEv+0x48>)
}
    9422:	b003      	add	sp, #12
    9424:	f85d eb04 	ldr.w	lr, [sp], #4
	printk("Waiting for connection...\n");
    9428:	f010 ba9f 	b.w	1996a <printk>
    942c:	0001d8e8 	.word	0x0001d8e8
    9430:	0001d8f8 	.word	0x0001d8f8
    9434:	0001d868 	.word	0x0001d868
    9438:	0001e4c3 	.word	0x0001e4c3
    943c:	0001e4e9 	.word	0x0001e4e9
    9440:	0001e50b 	.word	0x0001e50b

00009444 <_ZN13deviceManager14initPeripheralEv>:
void deviceManager::initPeripheral(){
    9444:	b510      	push	{r4, lr}
    9446:	4604      	mov	r4, r0
    if(getDevice() == 3 || getDevice() == 2){
    9448:	f7ff ffb2 	bl	93b0 <_ZN13deviceManager9getDeviceEv>
    944c:	1e83      	subs	r3, r0, #2
    944e:	b2db      	uxtb	r3, r3
    9450:	2b01      	cmp	r3, #1
    9452:	d82d      	bhi.n	94b0 <_ZN13deviceManager14initPeripheralEv+0x6c>
        err = dk_leds_init();
    9454:	f00c fa9e 	bl	15994 <dk_leds_init>
        if (err) {
    9458:	4601      	mov	r1, r0
    945a:	b120      	cbz	r0, 9466 <_ZN13deviceManager14initPeripheralEv+0x22>
            printk("LEDs init failed (err %d)\n", err);
    945c:	4815      	ldr	r0, [pc, #84]	; (94b4 <_ZN13deviceManager14initPeripheralEv+0x70>)
}
    945e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Button init failed (err %d)\n", err);
    9462:	f010 ba82 	b.w	1996a <printk>
        err = initButton();
    9466:	f7ff ffb7 	bl	93d8 <_ZN13deviceManager10initButtonEv>
    946a:	4601      	mov	r1, r0
        if (err) {
    946c:	b108      	cbz	r0, 9472 <_ZN13deviceManager14initPeripheralEv+0x2e>
            printk("Button init failed (err %d)\n", err);
    946e:	4812      	ldr	r0, [pc, #72]	; (94b8 <_ZN13deviceManager14initPeripheralEv+0x74>)
    9470:	e7f5      	b.n	945e <_ZN13deviceManager14initPeripheralEv+0x1a>
        err = bt_enable(NULL);
    9472:	f006 f9bd 	bl	f7f0 <bt_enable>
        if (err) {
    9476:	4601      	mov	r1, r0
    9478:	b108      	cbz	r0, 947e <_ZN13deviceManager14initPeripheralEv+0x3a>
            printk("Bluetooth init failed (err %d)\n", err);
    947a:	4810      	ldr	r0, [pc, #64]	; (94bc <_ZN13deviceManager14initPeripheralEv+0x78>)
    947c:	e7ef      	b.n	945e <_ZN13deviceManager14initPeripheralEv+0x1a>
        printk("Bluetooth initialized\n");
    947e:	4810      	ldr	r0, [pc, #64]	; (94c0 <_ZN13deviceManager14initPeripheralEv+0x7c>)
    9480:	f010 fa73 	bl	1996a <printk>
		bt_conn_cb_register(&conn_callbacks);
    9484:	4620      	mov	r0, r4
    9486:	f007 f811 	bl	104ac <bt_conn_cb_register>
            settings_load();
    948a:	f010 fd63 	bl	19f54 <settings_load>
        err = bt_lbs_init(&lbs_callbacs);
    948e:	f104 0014 	add.w	r0, r4, #20
    9492:	f003 f9db 	bl	c84c <bt_lbs_init>
        if (err) {
    9496:	4601      	mov	r1, r0
    9498:	b108      	cbz	r0, 949e <_ZN13deviceManager14initPeripheralEv+0x5a>
			printk("Failed to init LBS (err:%d)\n", err);
    949a:	480a      	ldr	r0, [pc, #40]	; (94c4 <_ZN13deviceManager14initPeripheralEv+0x80>)
    949c:	e7df      	b.n	945e <_ZN13deviceManager14initPeripheralEv+0x1a>
		err = data_service_init();
    949e:	f000 fc39 	bl	9d14 <_Z17data_service_initv>
		if (err) 
    94a2:	4601      	mov	r1, r0
    94a4:	2800      	cmp	r0, #0
    94a6:	d1f8      	bne.n	949a <_ZN13deviceManager14initPeripheralEv+0x56>
}
    94a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startAdvertising();
    94ac:	f7ff bfa4 	b.w	93f8 <_ZN13deviceManager16startAdvertisingEv>
}
    94b0:	bd10      	pop	{r4, pc}
    94b2:	bf00      	nop
    94b4:	0001e526 	.word	0x0001e526
    94b8:	0001e541 	.word	0x0001e541
    94bc:	0001e55e 	.word	0x0001e55e
    94c0:	0001e57e 	.word	0x0001e57e
    94c4:	0001e595 	.word	0x0001e595

000094c8 <_ZN13deviceManager9startScanEv>:
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    94c8:	2001      	movs	r0, #1
void deviceManager::startScan(){
    94ca:	b508      	push	{r3, lr}
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    94cc:	f003 f976 	bl	c7bc <bt_scan_start>
	if (err) {
    94d0:	4601      	mov	r1, r0
    94d2:	b110      	cbz	r0, 94da <_ZN13deviceManager9startScanEv+0x12>
		printk("Scanning failed to start, err %d\n", err);
    94d4:	4803      	ldr	r0, [pc, #12]	; (94e4 <_ZN13deviceManager9startScanEv+0x1c>)
    94d6:	f010 fa48 	bl	1996a <printk>
}
    94da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Scanning...\n");
    94de:	4802      	ldr	r0, [pc, #8]	; (94e8 <_ZN13deviceManager9startScanEv+0x20>)
    94e0:	f010 ba43 	b.w	1996a <printk>
    94e4:	0001e5b2 	.word	0x0001e5b2
    94e8:	0001e5d4 	.word	0x0001e5d4

000094ec <_ZN13deviceManager8initScanEv>:
void deviceManager::initScan() {
    94ec:	b530      	push	{r4, r5, lr}
    94ee:	b089      	sub	sp, #36	; 0x24
	sensorInfos = getSensorInfos();
    94f0:	f000 fc82 	bl	9df8 <_Z14getSensorInfosv>
    94f4:	4d2c      	ldr	r5, [pc, #176]	; (95a8 <_ZN13deviceManager8initScanEv+0xbc>)
	struct bt_le_scan_param scanParam = {
    94f6:	ab03      	add	r3, sp, #12
    94f8:	2214      	movs	r2, #20
	sensorInfos = getSensorInfos();
    94fa:	7028      	strb	r0, [r5, #0]
    94fc:	4604      	mov	r4, r0
	struct bt_le_scan_param scanParam = {
    94fe:	2100      	movs	r1, #0
    9500:	4618      	mov	r0, r3
    9502:	f011 fc9d 	bl	1ae40 <memset>
    9506:	2201      	movs	r2, #1
    9508:	f88d 200c 	strb.w	r2, [sp, #12]
    950c:	9204      	str	r2, [sp, #16]
    950e:	4a27      	ldr	r2, [pc, #156]	; (95ac <_ZN13deviceManager8initScanEv+0xc0>)
	};
    9510:	9000      	str	r0, [sp, #0]
	struct bt_le_scan_param scanParam = {
    9512:	9205      	str	r2, [sp, #20]
	struct bt_scan_init_param scanInit = {
    9514:	2200      	movs	r2, #0
    9516:	9201      	str	r2, [sp, #4]
    9518:	4a25      	ldr	r2, [pc, #148]	; (95b0 <_ZN13deviceManager8initScanEv+0xc4>)
    951a:	9202      	str	r2, [sp, #8]
	if (sensorInfos != 0)
    951c:	2c00      	cmp	r4, #0
    951e:	d03e      	beq.n	959e <_ZN13deviceManager8initScanEv+0xb2>
		bt_le_scan_stop();
    9520:	f006 fe02 	bl	10128 <bt_le_scan_stop>
		bt_scan_init(&scanInit);
    9524:	4668      	mov	r0, sp
    9526:	f003 f917 	bl	c758 <bt_scan_init>
		bt_scan_cb_register(&scan_cb);
    952a:	4822      	ldr	r0, [pc, #136]	; (95b4 <_ZN13deviceManager8initScanEv+0xc8>)
    952c:	f002 ff60 	bl	c3f0 <bt_scan_cb_register>
		bt_scan_filter_remove_all();
    9530:	f002 ffc4 	bl	c4bc <bt_scan_filter_remove_all>
		switch (sensorInfos)
    9534:	782b      	ldrb	r3, [r5, #0]
    9536:	3b01      	subs	r3, #1
    9538:	2b04      	cmp	r3, #4
    953a:	d825      	bhi.n	9588 <_ZN13deviceManager8initScanEv+0x9c>
    953c:	e8df f003 	tbb	[pc, r3]
    9540:	190f0d03 	.word	0x190f0d03
    9544:	22          	.byte	0x22
    9545:	00          	.byte	0x00
			err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9546:	491c      	ldr	r1, [pc, #112]	; (95b8 <_ZN13deviceManager8initScanEv+0xcc>)
    9548:	2003      	movs	r0, #3
    954a:	f002 ff61 	bl	c410 <bt_scan_filter_add>
			if (err) {
    954e:	b1d8      	cbz	r0, 9588 <_ZN13deviceManager8initScanEv+0x9c>
				printk("Scanning filters cannot be set\n");
    9550:	481a      	ldr	r0, [pc, #104]	; (95bc <_ZN13deviceManager8initScanEv+0xd0>)
    9552:	f010 fa0a 	bl	1996a <printk>
}
    9556:	b009      	add	sp, #36	; 0x24
    9558:	bd30      	pop	{r4, r5, pc}
			err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    955a:	4919      	ldr	r1, [pc, #100]	; (95c0 <_ZN13deviceManager8initScanEv+0xd4>)
    955c:	e7f4      	b.n	9548 <_ZN13deviceManager8initScanEv+0x5c>
			if (nbrConnectionsCentral == 0 || nbrConnectionsCentral == 1)
    955e:	4b19      	ldr	r3, [pc, #100]	; (95c4 <_ZN13deviceManager8initScanEv+0xd8>)
    9560:	781b      	ldrb	r3, [r3, #0]
    9562:	2b01      	cmp	r3, #1
    9564:	d801      	bhi.n	956a <_ZN13deviceManager8initScanEv+0x7e>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9566:	4918      	ldr	r1, [pc, #96]	; (95c8 <_ZN13deviceManager8initScanEv+0xdc>)
    9568:	e7ee      	b.n	9548 <_ZN13deviceManager8initScanEv+0x5c>
			else if (nbrConnectionsCentral == 2)
    956a:	2b02      	cmp	r3, #2
    956c:	d10c      	bne.n	9588 <_ZN13deviceManager8initScanEv+0x9c>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_DIS);
    956e:	4917      	ldr	r1, [pc, #92]	; (95cc <_ZN13deviceManager8initScanEv+0xe0>)
    9570:	e7ea      	b.n	9548 <_ZN13deviceManager8initScanEv+0x5c>
			if (nbrConnectionsCentral == 0)
    9572:	4b14      	ldr	r3, [pc, #80]	; (95c4 <_ZN13deviceManager8initScanEv+0xd8>)
    9574:	781b      	ldrb	r3, [r3, #0]
    9576:	b90b      	cbnz	r3, 957c <_ZN13deviceManager8initScanEv+0x90>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9578:	4915      	ldr	r1, [pc, #84]	; (95d0 <_ZN13deviceManager8initScanEv+0xe4>)
    957a:	e7e5      	b.n	9548 <_ZN13deviceManager8initScanEv+0x5c>
			else if (nbrConnectionsCentral == 1)
    957c:	2b01      	cmp	r3, #1
    957e:	d103      	bne.n	9588 <_ZN13deviceManager8initScanEv+0x9c>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_DIS);
    9580:	4914      	ldr	r1, [pc, #80]	; (95d4 <_ZN13deviceManager8initScanEv+0xe8>)
    9582:	e7e1      	b.n	9548 <_ZN13deviceManager8initScanEv+0x5c>
			err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_DIS);
    9584:	4914      	ldr	r1, [pc, #80]	; (95d8 <_ZN13deviceManager8initScanEv+0xec>)
    9586:	e7df      	b.n	9548 <_ZN13deviceManager8initScanEv+0x5c>
		err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    9588:	2100      	movs	r1, #0
    958a:	2004      	movs	r0, #4
    958c:	f002 ffc2 	bl	c514 <bt_scan_filter_enable>
		if (err) {
    9590:	b110      	cbz	r0, 9598 <_ZN13deviceManager8initScanEv+0xac>
			printk("Filters cannot be turned on\n");
    9592:	4812      	ldr	r0, [pc, #72]	; (95dc <_ZN13deviceManager8initScanEv+0xf0>)
    9594:	f010 f9e9 	bl	1996a <printk>
		startScan();
    9598:	f7ff ff96 	bl	94c8 <_ZN13deviceManager9startScanEv>
    959c:	e7db      	b.n	9556 <_ZN13deviceManager8initScanEv+0x6a>
		err = bt_le_scan_start(&scanParam, deviceFound);
    959e:	4910      	ldr	r1, [pc, #64]	; (95e0 <_ZN13deviceManager8initScanEv+0xf4>)
    95a0:	f006 fd5e 	bl	10060 <bt_le_scan_start>
		if (err) {
    95a4:	e7d7      	b.n	9556 <_ZN13deviceManager8initScanEv+0x6a>
    95a6:	bf00      	nop
    95a8:	2000bef4 	.word	0x2000bef4
    95ac:	00300060 	.word	0x00300060
    95b0:	0001e184 	.word	0x0001e184
    95b4:	20008170 	.word	0x20008170
    95b8:	0001e18c 	.word	0x0001e18c
    95bc:	0001e5e1 	.word	0x0001e5e1
    95c0:	0001e190 	.word	0x0001e190
    95c4:	2000bef9 	.word	0x2000bef9
    95c8:	0001e194 	.word	0x0001e194
    95cc:	0001e198 	.word	0x0001e198
    95d0:	0001e19c 	.word	0x0001e19c
    95d4:	0001e1a0 	.word	0x0001e1a0
    95d8:	0001e1a4 	.word	0x0001e1a4
    95dc:	0001e601 	.word	0x0001e601
    95e0:	00019809 	.word	0x00019809

000095e4 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv>:
void deviceManager::discoveryCompletedCSC(struct bt_gatt_dm *dm, void *ctx) {
    95e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!subscriptionDone)
    95e6:	4e4d      	ldr	r6, [pc, #308]	; (971c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x138>)
void deviceManager::discoveryCompletedCSC(struct bt_gatt_dm *dm, void *ctx) {
    95e8:	4604      	mov	r4, r0
	if (!subscriptionDone)
    95ea:	7833      	ldrb	r3, [r6, #0]
    95ec:	2b00      	cmp	r3, #0
    95ee:	d135      	bne.n	965c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x78>
		chrc = bt_gatt_dm_char_by_uuid(dm,BT_UUID_CSC_MEASUREMENT);
    95f0:	494b      	ldr	r1, [pc, #300]	; (9720 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x13c>)
    95f2:	f002 fd33 	bl	c05c <bt_gatt_dm_char_by_uuid>
		if (!chrc) {
    95f6:	4605      	mov	r5, r0
    95f8:	b970      	cbnz	r0, 9618 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x34>
			printk("Missing CSC measurement characteristic\n");
    95fa:	484a      	ldr	r0, [pc, #296]	; (9724 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x140>)
			printk("Missing CSC measurement char CCC descriptor\n");
    95fc:	f010 f9b5 	bl	1996a <printk>
			err = bt_gatt_dm_data_release(dm);
    9600:	4620      	mov	r0, r4
    9602:	f010 fe4d 	bl	1a2a0 <bt_gatt_dm_data_release>
			if (err) {
    9606:	4601      	mov	r1, r0
    9608:	2800      	cmp	r0, #0
    960a:	d040      	beq.n	968e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
				printk("Could not release discovery data, err: %d\n", err);
    960c:	4846      	ldr	r0, [pc, #280]	; (9728 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x144>)
}
    960e:	b003      	add	sp, #12
    9610:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				printk("Could not release discovery data, err: %d\n", err);
    9614:	f010 b9a9 	b.w	1996a <printk>
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_CSC_MEASUREMENT);
    9618:	4601      	mov	r1, r0
    961a:	4a44      	ldr	r2, [pc, #272]	; (972c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x148>)
    961c:	4620      	mov	r0, r4
    961e:	f010 fe2d 	bl	1a27c <bt_gatt_dm_desc_by_uuid>
		if (!desc) {
    9622:	b908      	cbnz	r0, 9628 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x44>
			printk("Missing CSC measurement char CCC descriptor\n");
    9624:	4842      	ldr	r0, [pc, #264]	; (9730 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x14c>)
    9626:	e7e9      	b.n	95fc <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x18>
		param.value_handle = desc->handle;
    9628:	8883      	ldrh	r3, [r0, #4]
    962a:	4f42      	ldr	r7, [pc, #264]	; (9734 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x150>)
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    962c:	4629      	mov	r1, r5
    962e:	4620      	mov	r0, r4
    9630:	4a41      	ldr	r2, [pc, #260]	; (9738 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x154>)
		param.value_handle = desc->handle;
    9632:	813b      	strh	r3, [r7, #8]
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    9634:	f010 fe22 	bl	1a27c <bt_gatt_dm_desc_by_uuid>
		if (!desc) {
    9638:	2800      	cmp	r0, #0
    963a:	d0f3      	beq.n	9624 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x40>
		param.ccc_handle = desc->handle;
    963c:	8883      	ldrh	r3, [r0, #4]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &param);
    963e:	4620      	mov	r0, r4
		param.ccc_handle = desc->handle;
    9640:	817b      	strh	r3, [r7, #10]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &param);
    9642:	f010 fdce 	bl	1a1e2 <bt_gatt_dm_conn_get>
    9646:	4639      	mov	r1, r7
    9648:	f00a fc9a 	bl	13f80 <bt_gatt_subscribe>
		if (err) {
    964c:	4601      	mov	r1, r0
    964e:	b110      	cbz	r0, 9656 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x72>
			printk("Subscribtion failed (err %d)\n", err);
    9650:	483a      	ldr	r0, [pc, #232]	; (973c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x158>)
    9652:	f010 f98a 	bl	1996a <printk>
		bt_gatt_dm_data_release(dm);
    9656:	4620      	mov	r0, r4
    9658:	f010 fe22 	bl	1a2a0 <bt_gatt_dm_data_release>
	switch (nbrConnectionsCentral)
    965c:	4b38      	ldr	r3, [pc, #224]	; (9740 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x15c>)
    965e:	781a      	ldrb	r2, [r3, #0]
    9660:	2a02      	cmp	r2, #2
    9662:	d026      	beq.n	96b2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xce>
    9664:	2a03      	cmp	r2, #3
    9666:	d04d      	beq.n	9704 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x120>
    9668:	2a01      	cmp	r2, #1
    966a:	d110      	bne.n	968e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
		if (nbrAddresses == 1)
    966c:	4b35      	ldr	r3, [pc, #212]	; (9744 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x160>)
    966e:	781c      	ldrb	r4, [r3, #0]
    9670:	2c01      	cmp	r4, #1
    9672:	d10e      	bne.n	9692 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xae>
			connectedCode[0] = 13;
    9674:	230d      	movs	r3, #13
    9676:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    967a:	4b33      	ldr	r3, [pc, #204]	; (9748 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x164>)
    967c:	4622      	mov	r2, r4
    967e:	6818      	ldr	r0, [r3, #0]
    9680:	a901      	add	r1, sp, #4
    9682:	f000 fb59 	bl	9d38 <_Z17data_service_sendP7bt_connPKht>
			printk("Discovery completed\n");
    9686:	4831      	ldr	r0, [pc, #196]	; (974c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x168>)
    9688:	f010 f96f 	bl	1996a <printk>
			subscriptionDone = true;
    968c:	7034      	strb	r4, [r6, #0]
}
    968e:	b003      	add	sp, #12
    9690:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (nbrAddresses == 2)	
    9692:	2c02      	cmp	r4, #2
    9694:	d1fb      	bne.n	968e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
			connectedCode[0] = 14;
    9696:	230e      	movs	r3, #14
    9698:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    969c:	4b2a      	ldr	r3, [pc, #168]	; (9748 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x164>)
    969e:	a901      	add	r1, sp, #4
    96a0:	6818      	ldr	r0, [r3, #0]
    96a2:	f000 fb49 	bl	9d38 <_Z17data_service_sendP7bt_connPKht>
			initScan();
    96a6:	f7ff ff21 	bl	94ec <_ZN13deviceManager8initScanEv>
			printk("First discovery completed\n");			
    96aa:	4829      	ldr	r0, [pc, #164]	; (9750 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x16c>)
    96ac:	f010 f95d 	bl	1996a <printk>
    96b0:	e7ed      	b.n	968e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
		if (nbrAddresses == 2)
    96b2:	4b24      	ldr	r3, [pc, #144]	; (9744 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x160>)
    96b4:	781b      	ldrb	r3, [r3, #0]
    96b6:	2b02      	cmp	r3, #2
    96b8:	d113      	bne.n	96e2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xfe>
			connectedCode[0] = 15;
    96ba:	230f      	movs	r3, #15
    96bc:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    96c0:	4b21      	ldr	r3, [pc, #132]	; (9748 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x164>)
    96c2:	2201      	movs	r2, #1
    96c4:	6818      	ldr	r0, [r3, #0]
    96c6:	a901      	add	r1, sp, #4
    96c8:	f000 fb36 	bl	9d38 <_Z17data_service_sendP7bt_connPKht>
			printk("Second discovery completed\n");
    96cc:	4821      	ldr	r0, [pc, #132]	; (9754 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x170>)
			printk("Third discovery completed\n");
    96ce:	f010 f94c 	bl	1996a <printk>
			dk_set_led_on(CON_STATUS_LED_CENTRAL);
    96d2:	2001      	movs	r0, #1
    96d4:	f013 f87a 	bl	1c7cc <dk_set_led_on>
			connectedC = true;	
    96d8:	2301      	movs	r3, #1
    96da:	4a1f      	ldr	r2, [pc, #124]	; (9758 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x174>)
			subscriptionDone = true;		
    96dc:	7033      	strb	r3, [r6, #0]
			connectedC = true;	
    96de:	7013      	strb	r3, [r2, #0]
		break;
    96e0:	e7d5      	b.n	968e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
		else if (nbrAddresses == 3) 
    96e2:	2b03      	cmp	r3, #3
    96e4:	d1d3      	bne.n	968e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
			connectedCode[0] = 16;
    96e6:	2310      	movs	r3, #16
    96e8:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    96ec:	4b16      	ldr	r3, [pc, #88]	; (9748 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x164>)
    96ee:	2201      	movs	r2, #1
    96f0:	6818      	ldr	r0, [r3, #0]
    96f2:	a901      	add	r1, sp, #4
    96f4:	f000 fb20 	bl	9d38 <_Z17data_service_sendP7bt_connPKht>
			printk("Second discovery completed\n");		
    96f8:	4816      	ldr	r0, [pc, #88]	; (9754 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x170>)
    96fa:	f010 f936 	bl	1996a <printk>
			initScan();
    96fe:	f7ff fef5 	bl	94ec <_ZN13deviceManager8initScanEv>
    9702:	e7c4      	b.n	968e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
			connectedCode[0] = 17;
    9704:	2311      	movs	r3, #17
    9706:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    970a:	4b0f      	ldr	r3, [pc, #60]	; (9748 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x164>)
    970c:	2201      	movs	r2, #1
    970e:	6818      	ldr	r0, [r3, #0]
    9710:	a901      	add	r1, sp, #4
    9712:	f000 fb11 	bl	9d38 <_Z17data_service_sendP7bt_connPKht>
			printk("Third discovery completed\n");
    9716:	4811      	ldr	r0, [pc, #68]	; (975c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x178>)
    9718:	e7d9      	b.n	96ce <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xea>
    971a:	bf00      	nop
    971c:	2000bef8 	.word	0x2000bef8
    9720:	0001e1b0 	.word	0x0001e1b0
    9724:	0001e61e 	.word	0x0001e61e
    9728:	0001e646 	.word	0x0001e646
    972c:	0001e1b4 	.word	0x0001e1b4
    9730:	0001e671 	.word	0x0001e671
    9734:	20008158 	.word	0x20008158
    9738:	0001e1b8 	.word	0x0001e1b8
    973c:	0001e69e 	.word	0x0001e69e
    9740:	2000bef9 	.word	0x2000bef9
    9744:	2000bef6 	.word	0x2000bef6
    9748:	2000a468 	.word	0x2000a468
    974c:	0001e6bc 	.word	0x0001e6bc
    9750:	0001e6d1 	.word	0x0001e6d1
    9754:	0001e6ec 	.word	0x0001e6ec
    9758:	2000bef1 	.word	0x2000bef1
    975c:	0001e708 	.word	0x0001e708

00009760 <_ZN13deviceManager11initCentralEv>:
void deviceManager::initCentral(){
    9760:	b510      	push	{r4, lr}
    9762:	4604      	mov	r4, r0
	printk("Init Central\n");
    9764:	481c      	ldr	r0, [pc, #112]	; (97d8 <_ZN13deviceManager11initCentralEv+0x78>)
    9766:	f010 f900 	bl	1996a <printk>
	if (getDevice() == 1 || getDevice() == 3)
    976a:	f7ff fe21 	bl	93b0 <_ZN13deviceManager9getDeviceEv>
    976e:	2801      	cmp	r0, #1
    9770:	d00a      	beq.n	9788 <_ZN13deviceManager11initCentralEv+0x28>
    9772:	2803      	cmp	r0, #3
    9774:	d12f      	bne.n	97d6 <_ZN13deviceManager11initCentralEv+0x76>
		bt_conn_cb_register(&conn_callbacks);
    9776:	4620      	mov	r0, r4
    9778:	f006 fe98 	bl	104ac <bt_conn_cb_register>
		initScan();
    977c:	f7ff feb6 	bl	94ec <_ZN13deviceManager8initScanEv>
}
    9780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startScan();	
    9784:	f7ff bea0 	b.w	94c8 <_ZN13deviceManager9startScanEv>
			err = bt_enable(nullptr);
    9788:	2000      	movs	r0, #0
    978a:	f006 f831 	bl	f7f0 <bt_enable>
			if (err) {
    978e:	4601      	mov	r1, r0
    9790:	b120      	cbz	r0, 979c <_ZN13deviceManager11initCentralEv+0x3c>
				printk("Bluetooth init failed (err %d)\n", err);
    9792:	4812      	ldr	r0, [pc, #72]	; (97dc <_ZN13deviceManager11initCentralEv+0x7c>)
}
    9794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				printk("LEDs init failed (err %d)\n", err);
    9798:	f010 b8e7 	b.w	1996a <printk>
			printk("Bluetooth ready\n");
    979c:	4810      	ldr	r0, [pc, #64]	; (97e0 <_ZN13deviceManager11initCentralEv+0x80>)
    979e:	f010 f8e4 	bl	1996a <printk>
			err = dk_leds_init();
    97a2:	f00c f8f7 	bl	15994 <dk_leds_init>
			if (err) {
    97a6:	4601      	mov	r1, r0
    97a8:	b108      	cbz	r0, 97ae <_ZN13deviceManager11initCentralEv+0x4e>
				printk("LEDs init failed (err %d)\n", err);
    97aa:	480e      	ldr	r0, [pc, #56]	; (97e4 <_ZN13deviceManager11initCentralEv+0x84>)
    97ac:	e7f2      	b.n	9794 <_ZN13deviceManager11initCentralEv+0x34>
			err = initButton();
    97ae:	f7ff fe13 	bl	93d8 <_ZN13deviceManager10initButtonEv>
			if (err) {
    97b2:	4601      	mov	r1, r0
    97b4:	b108      	cbz	r0, 97ba <_ZN13deviceManager11initCentralEv+0x5a>
				printk("Button init failed (err %d)\n", err);
    97b6:	480c      	ldr	r0, [pc, #48]	; (97e8 <_ZN13deviceManager11initCentralEv+0x88>)
    97b8:	e7ec      	b.n	9794 <_ZN13deviceManager11initCentralEv+0x34>
			err = bt_lbs_init(&lbs_callbacs);
    97ba:	f104 0014 	add.w	r0, r4, #20
    97be:	f003 f845 	bl	c84c <bt_lbs_init>
			if (err) {
    97c2:	4601      	mov	r1, r0
    97c4:	b108      	cbz	r0, 97ca <_ZN13deviceManager11initCentralEv+0x6a>
				printk("Failed to init LBS (err:%d)\n", err);
    97c6:	4809      	ldr	r0, [pc, #36]	; (97ec <_ZN13deviceManager11initCentralEv+0x8c>)
    97c8:	e7e4      	b.n	9794 <_ZN13deviceManager11initCentralEv+0x34>
				settings_load();
    97ca:	f010 fbc3 	bl	19f54 <settings_load>
				printk("Settings loaded\n");
    97ce:	4808      	ldr	r0, [pc, #32]	; (97f0 <_ZN13deviceManager11initCentralEv+0x90>)
    97d0:	f010 f8cb 	bl	1996a <printk>
    97d4:	e7cf      	b.n	9776 <_ZN13deviceManager11initCentralEv+0x16>
}
    97d6:	bd10      	pop	{r4, pc}
    97d8:	0001e723 	.word	0x0001e723
    97dc:	0001e55e 	.word	0x0001e55e
    97e0:	0001e731 	.word	0x0001e731
    97e4:	0001e526 	.word	0x0001e526
    97e8:	0001e541 	.word	0x0001e541
    97ec:	0001e595 	.word	0x0001e595
    97f0:	0001e742 	.word	0x0001e742

000097f4 <_ZN13deviceManager9setDeviceEbb>:
void deviceManager::setDevice(bool c, bool p){
    97f4:	b410      	push	{r4}
    isPeripheral = p;
    97f6:	4c09      	ldr	r4, [pc, #36]	; (981c <_ZN13deviceManager9setDeviceEbb+0x28>)
void deviceManager::setDevice(bool c, bool p){
    97f8:	4603      	mov	r3, r0
    isPeripheral = p;
    97fa:	7022      	strb	r2, [r4, #0]
    isCentral = c;  
    97fc:	4c08      	ldr	r4, [pc, #32]	; (9820 <_ZN13deviceManager9setDeviceEbb+0x2c>)
    97fe:	7021      	strb	r1, [r4, #0]
	if (isCentral == true && isPeripheral == true)
    9800:	b139      	cbz	r1, 9812 <_ZN13deviceManager9setDeviceEbb+0x1e>
    9802:	b11a      	cbz	r2, 980c <_ZN13deviceManager9setDeviceEbb+0x18>
		initPeripheral();
    9804:	4618      	mov	r0, r3
}
    9806:	bc10      	pop	{r4}
		initPeripheral();
    9808:	f7ff be1c 	b.w	9444 <_ZN13deviceManager14initPeripheralEv>
}
    980c:	bc10      	pop	{r4}
		initCentral();
    980e:	f7ff bfa7 	b.w	9760 <_ZN13deviceManager11initCentralEv>
	else if (isCentral == false && isPeripheral == true)
    9812:	2a00      	cmp	r2, #0
    9814:	d1f6      	bne.n	9804 <_ZN13deviceManager9setDeviceEbb+0x10>
}
    9816:	bc10      	pop	{r4}
    9818:	4770      	bx	lr
    981a:	bf00      	nop
    981c:	2000bef5 	.word	0x2000bef5
    9820:	2000befa 	.word	0x2000befa

00009824 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info>:
void deviceManager::scanConnectionError(struct bt_scan_device_info *device_info) {
    9824:	b508      	push	{r3, lr}
    printk("Connecting failed\n");
    9826:	4803      	ldr	r0, [pc, #12]	; (9834 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info+0x10>)
    9828:	f010 f89f 	bl	1996a <printk>
}
    982c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	startScan();
    9830:	f7ff be4a 	b.w	94c8 <_ZN13deviceManager9startScanEv>
    9834:	0001e753 	.word	0x0001e753

00009838 <_ZN13deviceManager11discoverCSCEv>:
{
    9838:	b510      	push	{r4, lr}
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb, NULL);
    983a:	4b0a      	ldr	r3, [pc, #40]	; (9864 <_ZN13deviceManager11discoverCSCEv+0x2c>)
    983c:	4c0a      	ldr	r4, [pc, #40]	; (9868 <_ZN13deviceManager11discoverCSCEv+0x30>)
    983e:	7818      	ldrb	r0, [r3, #0]
    9840:	490a      	ldr	r1, [pc, #40]	; (986c <_ZN13deviceManager11discoverCSCEv+0x34>)
    9842:	3801      	subs	r0, #1
    9844:	2300      	movs	r3, #0
    9846:	4a0a      	ldr	r2, [pc, #40]	; (9870 <_ZN13deviceManager11discoverCSCEv+0x38>)
    9848:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    984c:	f002 fc32 	bl	c0b4 <bt_gatt_dm_start>
	if (err) 
    9850:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9854:	d004      	beq.n	9860 <_ZN13deviceManager11discoverCSCEv+0x28>
}
    9856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    985a:	4806      	ldr	r0, [pc, #24]	; (9874 <_ZN13deviceManager11discoverCSCEv+0x3c>)
    985c:	f010 b885 	b.w	1996a <printk>
}
    9860:	bd10      	pop	{r4, pc}
    9862:	bf00      	nop
    9864:	2000bef9 	.word	0x2000bef9
    9868:	2000a46c 	.word	0x2000a46c
    986c:	0001e1a8 	.word	0x0001e1a8
    9870:	20008140 	.word	0x20008140
    9874:	0001e766 	.word	0x0001e766

00009878 <_ZN13deviceManager10discoverHREv>:
{
    9878:	b510      	push	{r4, lr}
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_DIS, &discovery_cb_HR, NULL);
    987a:	4b0a      	ldr	r3, [pc, #40]	; (98a4 <_ZN13deviceManager10discoverHREv+0x2c>)
    987c:	4c0a      	ldr	r4, [pc, #40]	; (98a8 <_ZN13deviceManager10discoverHREv+0x30>)
    987e:	7818      	ldrb	r0, [r3, #0]
    9880:	490a      	ldr	r1, [pc, #40]	; (98ac <_ZN13deviceManager10discoverHREv+0x34>)
    9882:	3801      	subs	r0, #1
    9884:	2300      	movs	r3, #0
    9886:	4a0a      	ldr	r2, [pc, #40]	; (98b0 <_ZN13deviceManager10discoverHREv+0x38>)
    9888:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    988c:	f002 fc12 	bl	c0b4 <bt_gatt_dm_start>
	if (err) 
    9890:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9894:	d004      	beq.n	98a0 <_ZN13deviceManager10discoverHREv+0x28>
}
    9896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    989a:	4806      	ldr	r0, [pc, #24]	; (98b4 <_ZN13deviceManager10discoverHREv+0x3c>)
    989c:	f010 b865 	b.w	1996a <printk>
}
    98a0:	bd10      	pop	{r4, pc}
    98a2:	bf00      	nop
    98a4:	2000bef9 	.word	0x2000bef9
    98a8:	2000a46c 	.word	0x2000a46c
    98ac:	0001e1ac 	.word	0x0001e1ac
    98b0:	2000814c 	.word	0x2000814c
    98b4:	0001e766 	.word	0x0001e766

000098b8 <_ZN13deviceManager9connectedEP7bt_connh>:
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    98b8:	b570      	push	{r4, r5, r6, lr}
    98ba:	b090      	sub	sp, #64	; 0x40
    98bc:	460c      	mov	r4, r1
	int error = bt_conn_get_info(conn,&info);
    98be:	a901      	add	r1, sp, #4
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    98c0:	4605      	mov	r5, r0
	int error = bt_conn_get_info(conn,&info);
    98c2:	f007 f8f3 	bl	10aac <bt_conn_get_info>
	if (error)
    98c6:	b120      	cbz	r0, 98d2 <_ZN13deviceManager9connectedEP7bt_connh+0x1a>
		printk("Cannot get info of connection object\n");
    98c8:	482a      	ldr	r0, [pc, #168]	; (9974 <_ZN13deviceManager9connectedEP7bt_connh+0xbc>)
    98ca:	f010 f84e 	bl	1996a <printk>
}
    98ce:	b010      	add	sp, #64	; 0x40
    98d0:	bd70      	pop	{r4, r5, r6, pc}
	if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    98d2:	f89d 6005 	ldrb.w	r6, [sp, #5]
    98d6:	2e00      	cmp	r6, #0
    98d8:	d12f      	bne.n	993a <_ZN13deviceManager9connectedEP7bt_connh+0x82>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    98da:	4628      	mov	r0, r5
    98dc:	f011 fd39 	bl	1b352 <bt_conn_get_dst>
    98e0:	221e      	movs	r2, #30
    98e2:	a908      	add	r1, sp, #32
    98e4:	f7ff fcf8 	bl	92d8 <bt_addr_le_to_str.isra.0>
		if (err) {
    98e8:	b13c      	cbz	r4, 98fa <_ZN13deviceManager9connectedEP7bt_connh+0x42>
			printk("Failed to connect to %s (%u)\n", addr, err);
    98ea:	4622      	mov	r2, r4
    98ec:	4822      	ldr	r0, [pc, #136]	; (9978 <_ZN13deviceManager9connectedEP7bt_connh+0xc0>)
    98ee:	a908      	add	r1, sp, #32
    98f0:	f010 f83b 	bl	1996a <printk>
			startScan();
    98f4:	f7ff fde8 	bl	94c8 <_ZN13deviceManager9startScanEv>
			return;
    98f8:	e7e9      	b.n	98ce <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		printk("Connected: %s\n", addr);
    98fa:	a908      	add	r1, sp, #32
    98fc:	481f      	ldr	r0, [pc, #124]	; (997c <_ZN13deviceManager9connectedEP7bt_connh+0xc4>)
    98fe:	f010 f834 	bl	1996a <printk>
		centralConnections[nbrConnectionsCentral] = conn;
    9902:	4a1f      	ldr	r2, [pc, #124]	; (9980 <_ZN13deviceManager9connectedEP7bt_connh+0xc8>)
    9904:	491f      	ldr	r1, [pc, #124]	; (9984 <_ZN13deviceManager9connectedEP7bt_connh+0xcc>)
    9906:	7813      	ldrb	r3, [r2, #0]
    9908:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
		nbrConnectionsCentral++;
    990c:	3301      	adds	r3, #1
    990e:	b2db      	uxtb	r3, r3
    9910:	7013      	strb	r3, [r2, #0]
		switch (sensorInfos)
    9912:	4a1d      	ldr	r2, [pc, #116]	; (9988 <_ZN13deviceManager9connectedEP7bt_connh+0xd0>)
    9914:	7812      	ldrb	r2, [r2, #0]
    9916:	3a01      	subs	r2, #1
    9918:	2a04      	cmp	r2, #4
    991a:	d8d8      	bhi.n	98ce <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    991c:	e8df f002 	tbb	[pc, r2]
    9920:	08030505 	.word	0x08030505
    9924:	0a          	.byte	0x0a
    9925:	00          	.byte	0x00
			if (nbrConnectionsCentral <= 2)
    9926:	2b02      	cmp	r3, #2
    9928:	d804      	bhi.n	9934 <_ZN13deviceManager9connectedEP7bt_connh+0x7c>
				discoverCSC();
    992a:	f7ff ff85 	bl	9838 <_ZN13deviceManager11discoverCSCEv>
    992e:	e7ce      	b.n	98ce <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			if (nbrConnectionsCentral == 1)
    9930:	2b01      	cmp	r3, #1
    9932:	d0fa      	beq.n	992a <_ZN13deviceManager9connectedEP7bt_connh+0x72>
			discoverHR();
    9934:	f7ff ffa0 	bl	9878 <_ZN13deviceManager10discoverHREv>
			break;
    9938:	e7c9      	b.n	98ce <_ZN13deviceManager9connectedEP7bt_connh+0x16>
	else if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    993a:	2e01      	cmp	r6, #1
    993c:	d1c7      	bne.n	98ce <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		if (err) {
    993e:	b124      	cbz	r4, 994a <_ZN13deviceManager9connectedEP7bt_connh+0x92>
			printk("Connection failed (err %u)\n", err);
    9940:	4621      	mov	r1, r4
    9942:	4812      	ldr	r0, [pc, #72]	; (998c <_ZN13deviceManager9connectedEP7bt_connh+0xd4>)
    9944:	f010 f811 	bl	1996a <printk>
			return;
    9948:	e7c1      	b.n	98ce <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		printk("Connected\n");
    994a:	4811      	ldr	r0, [pc, #68]	; (9990 <_ZN13deviceManager9connectedEP7bt_connh+0xd8>)
    994c:	f010 f80d 	bl	1996a <printk>
		connectedP = true;
    9950:	4b10      	ldr	r3, [pc, #64]	; (9994 <_ZN13deviceManager9connectedEP7bt_connh+0xdc>)
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);	
    9952:	4620      	mov	r0, r4
		connectedP = true;
    9954:	701e      	strb	r6, [r3, #0]
		peripheralConn = conn;
    9956:	4b10      	ldr	r3, [pc, #64]	; (9998 <_ZN13deviceManager9connectedEP7bt_connh+0xe0>)
    9958:	601d      	str	r5, [r3, #0]
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);	
    995a:	f012 ff37 	bl	1c7cc <dk_set_led_on>
		if (getDevice() == 3 && nbrConnectionsCentral == 0) 
    995e:	f7ff fd27 	bl	93b0 <_ZN13deviceManager9getDeviceEv>
    9962:	2803      	cmp	r0, #3
    9964:	d1b3      	bne.n	98ce <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9966:	4b06      	ldr	r3, [pc, #24]	; (9980 <_ZN13deviceManager9connectedEP7bt_connh+0xc8>)
    9968:	781b      	ldrb	r3, [r3, #0]
    996a:	2b00      	cmp	r3, #0
    996c:	d1af      	bne.n	98ce <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			initScan();
    996e:	f7ff fdbd 	bl	94ec <_ZN13deviceManager8initScanEv>
    9972:	e7ac      	b.n	98ce <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9974:	0001e791 	.word	0x0001e791
    9978:	0001e7b7 	.word	0x0001e7b7
    997c:	0001e7d5 	.word	0x0001e7d5
    9980:	2000bef9 	.word	0x2000bef9
    9984:	2000a46c 	.word	0x2000a46c
    9988:	2000bef4 	.word	0x2000bef4
    998c:	0001e7e4 	.word	0x0001e7e4
    9990:	0001e800 	.word	0x0001e800
    9994:	2000bef2 	.word	0x2000bef2
    9998:	2000a468 	.word	0x2000a468

0000999c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb>:
			      bool connectable) {
    999c:	b5f0      	push	{r4, r5, r6, r7, lr}
    999e:	b08f      	sub	sp, #60	; 0x3c
    99a0:	4605      	mov	r5, r0
    99a2:	4617      	mov	r7, r2
	nbrAddresses = getNbrOfAddresses();
    99a4:	f000 f9f8 	bl	9d98 <_Z17getNbrOfAddressesv>
    99a8:	4b45      	ldr	r3, [pc, #276]	; (9ac0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    99aa:	4604      	mov	r4, r0
    99ac:	4e45      	ldr	r6, [pc, #276]	; (9ac4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    99ae:	7018      	strb	r0, [r3, #0]
	if (nbrAddresses != 0)
    99b0:	2800      	cmp	r0, #0
    99b2:	d04e      	beq.n	9a52 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xb6>
		ready = true;
    99b4:	2101      	movs	r1, #1
		switch (nbrAddresses)
    99b6:	2802      	cmp	r0, #2
		ready = true;
    99b8:	7031      	strb	r1, [r6, #0]
		switch (nbrAddresses)
    99ba:	d03a      	beq.n	9a32 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x96>
    99bc:	2803      	cmp	r0, #3
    99be:	d03e      	beq.n	9a3e <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xa2>
    99c0:	4288      	cmp	r0, r1
    99c2:	d103      	bne.n	99cc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x30>
			getAddress(sensor1,1);
    99c4:	4601      	mov	r1, r0
    99c6:	4840      	ldr	r0, [pc, #256]	; (9ac8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
			getAddress(sensor2,2);
    99c8:	f000 f9ec 	bl	9da4 <_Z10getAddressPch>
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    99cc:	682b      	ldr	r3, [r5, #0]
    99ce:	221e      	movs	r2, #30
    99d0:	6818      	ldr	r0, [r3, #0]
    99d2:	a906      	add	r1, sp, #24
    99d4:	f7ff fc80 	bl	92d8 <bt_addr_le_to_str.isra.0>
	bt_addr_le_to_str(device_info->recv_info->addr, addrShort, sizeof(addrShort));
    99d8:	682b      	ldr	r3, [r5, #0]
    99da:	2212      	movs	r2, #18
    99dc:	6818      	ldr	r0, [r3, #0]
    99de:	a901      	add	r1, sp, #4
    99e0:	f7ff fc7a 	bl	92d8 <bt_addr_le_to_str.isra.0>
	printk("Filters matched. Address: %s connectable: %s\n",
    99e4:	4b39      	ldr	r3, [pc, #228]	; (9acc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    99e6:	4a3a      	ldr	r2, [pc, #232]	; (9ad0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    99e8:	483a      	ldr	r0, [pc, #232]	; (9ad4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x138>)
    99ea:	2f00      	cmp	r7, #0
    99ec:	bf08      	it	eq
    99ee:	461a      	moveq	r2, r3
    99f0:	a906      	add	r1, sp, #24
    99f2:	f00f ffba 	bl	1996a <printk>
	if (ready)
    99f6:	7833      	ldrb	r3, [r6, #0]
    99f8:	2b00      	cmp	r3, #0
    99fa:	d03d      	beq.n	9a78 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xdc>
		bt_scan_stop();
    99fc:	f010 fc68 	bl	1a2d0 <bt_scan_stop>
		if (checkAddresses(addrShort,sensor1) && once_sensor1)
    9a00:	4931      	ldr	r1, [pc, #196]	; (9ac8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    9a02:	a801      	add	r0, sp, #4
    9a04:	f00f ff02 	bl	1980c <_ZN13deviceManager14checkAddressesEPcS0_>
    9a08:	b338      	cbz	r0, 9a5a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xbe>
    9a0a:	4c33      	ldr	r4, [pc, #204]	; (9ad8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x13c>)
    9a0c:	7823      	ldrb	r3, [r4, #0]
    9a0e:	b323      	cbz	r3, 9a5a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xbe>
			printk("Correct sensor found\n");
    9a10:	4832      	ldr	r0, [pc, #200]	; (9adc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    9a12:	f00f ffaa 	bl	1996a <printk>
			once_sensor1 = false;
    9a16:	2300      	movs	r3, #0
    9a18:	7023      	strb	r3, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9a1a:	4b31      	ldr	r3, [pc, #196]	; (9ae0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x144>)
    9a1c:	6828      	ldr	r0, [r5, #0]
    9a1e:	781a      	ldrb	r2, [r3, #0]
    9a20:	4b30      	ldr	r3, [pc, #192]	; (9ae4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x148>)
    9a22:	4931      	ldr	r1, [pc, #196]	; (9ae8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x14c>)
    9a24:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9a28:	686a      	ldr	r2, [r5, #4]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9a2a:	6800      	ldr	r0, [r0, #0]
    9a2c:	f007 f86a 	bl	10b04 <bt_conn_le_create>
}
    9a30:	e022      	b.n	9a78 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xdc>
			getAddress(sensor1,1);
    9a32:	4825      	ldr	r0, [pc, #148]	; (9ac8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    9a34:	f000 f9b6 	bl	9da4 <_Z10getAddressPch>
			getAddress(sensor2,2);
    9a38:	4621      	mov	r1, r4
    9a3a:	482c      	ldr	r0, [pc, #176]	; (9aec <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x150>)
    9a3c:	e7c4      	b.n	99c8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2c>
			getAddress(sensor1,1);
    9a3e:	4822      	ldr	r0, [pc, #136]	; (9ac8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    9a40:	f000 f9b0 	bl	9da4 <_Z10getAddressPch>
			getAddress(sensor2,2);
    9a44:	2102      	movs	r1, #2
    9a46:	4829      	ldr	r0, [pc, #164]	; (9aec <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x150>)
    9a48:	f000 f9ac 	bl	9da4 <_Z10getAddressPch>
			getAddress(sensor3,3);
    9a4c:	4621      	mov	r1, r4
    9a4e:	4828      	ldr	r0, [pc, #160]	; (9af0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x154>)
    9a50:	e7ba      	b.n	99c8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2c>
		initScan();
    9a52:	f7ff fd4b 	bl	94ec <_ZN13deviceManager8initScanEv>
		ready = false;
    9a56:	7034      	strb	r4, [r6, #0]
    9a58:	e7b8      	b.n	99cc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x30>
		else if (checkAddresses(addrShort,sensor2) && once_sensor2)
    9a5a:	4924      	ldr	r1, [pc, #144]	; (9aec <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x150>)
    9a5c:	a801      	add	r0, sp, #4
    9a5e:	f00f fed5 	bl	1980c <_ZN13deviceManager14checkAddressesEPcS0_>
    9a62:	b110      	cbz	r0, 9a6a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xce>
    9a64:	4c23      	ldr	r4, [pc, #140]	; (9af4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x158>)
    9a66:	7823      	ldrb	r3, [r4, #0]
    9a68:	b943      	cbnz	r3, 9a7c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xe0>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9a6a:	4921      	ldr	r1, [pc, #132]	; (9af0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x154>)
    9a6c:	a801      	add	r0, sp, #4
    9a6e:	f00f fecd 	bl	1980c <_ZN13deviceManager14checkAddressesEPcS0_>
    9a72:	b988      	cbnz	r0, 9a98 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xfc>
			startScan();
    9a74:	f7ff fd28 	bl	94c8 <_ZN13deviceManager9startScanEv>
}
    9a78:	b00f      	add	sp, #60	; 0x3c
    9a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printk("Correct sensor found\n");
    9a7c:	4817      	ldr	r0, [pc, #92]	; (9adc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    9a7e:	f00f ff74 	bl	1996a <printk>
			once_sensor2 = false;
    9a82:	2300      	movs	r3, #0
    9a84:	7023      	strb	r3, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9a86:	4b16      	ldr	r3, [pc, #88]	; (9ae0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x144>)
    9a88:	6828      	ldr	r0, [r5, #0]
    9a8a:	781a      	ldrb	r2, [r3, #0]
    9a8c:	4b15      	ldr	r3, [pc, #84]	; (9ae4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x148>)
    9a8e:	491a      	ldr	r1, [pc, #104]	; (9af8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x15c>)
    9a90:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9a94:	686a      	ldr	r2, [r5, #4]
    9a96:	e7c8      	b.n	9a2a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x8e>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9a98:	4c18      	ldr	r4, [pc, #96]	; (9afc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x160>)
    9a9a:	7823      	ldrb	r3, [r4, #0]
    9a9c:	2b00      	cmp	r3, #0
    9a9e:	d0e9      	beq.n	9a74 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xd8>
			printk("Correct sensor found\n");
    9aa0:	480e      	ldr	r0, [pc, #56]	; (9adc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    9aa2:	f00f ff62 	bl	1996a <printk>
			once_sensor3 = false;
    9aa6:	2300      	movs	r3, #0
    9aa8:	7023      	strb	r3, [r4, #0]
			bt_scan_stop();
    9aaa:	f010 fc11 	bl	1a2d0 <bt_scan_stop>
			err = bt_conn_le_create(device_info->recv_info->addr,
    9aae:	4b0c      	ldr	r3, [pc, #48]	; (9ae0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x144>)
    9ab0:	6828      	ldr	r0, [r5, #0]
    9ab2:	781a      	ldrb	r2, [r3, #0]
    9ab4:	4b0b      	ldr	r3, [pc, #44]	; (9ae4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x148>)
    9ab6:	4912      	ldr	r1, [pc, #72]	; (9b00 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x164>)
    9ab8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9abc:	686a      	ldr	r2, [r5, #4]
    9abe:	e7b4      	b.n	9a2a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x8e>
    9ac0:	2000bef6 	.word	0x2000bef6
    9ac4:	2000befb 	.word	0x2000befb
    9ac8:	2000bebe 	.word	0x2000bebe
    9acc:	0001e80f 	.word	0x0001e80f
    9ad0:	0001e80b 	.word	0x0001e80b
    9ad4:	0001e812 	.word	0x0001e812
    9ad8:	20008571 	.word	0x20008571
    9adc:	0001e840 	.word	0x0001e840
    9ae0:	2000bef9 	.word	0x2000bef9
    9ae4:	2000a46c 	.word	0x2000a46c
    9ae8:	0001d87c 	.word	0x0001d87c
    9aec:	2000becf 	.word	0x2000becf
    9af0:	2000bee0 	.word	0x2000bee0
    9af4:	20008572 	.word	0x20008572
    9af8:	0001d88c 	.word	0x0001d88c
    9afc:	20008573 	.word	0x20008573
    9b00:	0001d89c 	.word	0x0001d89c

00009b04 <_ZN13deviceManager12disconnectedEP7bt_connh>:
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b08:	b090      	sub	sp, #64	; 0x40
    9b0a:	460f      	mov	r7, r1
	int error = bt_conn_get_info(conn,&info);
    9b0c:	a901      	add	r1, sp, #4
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9b0e:	4605      	mov	r5, r0
	int error = bt_conn_get_info(conn,&info);
    9b10:	f006 ffcc 	bl	10aac <bt_conn_get_info>
	if (error)
    9b14:	4606      	mov	r6, r0
    9b16:	b128      	cbz	r0, 9b24 <_ZN13deviceManager12disconnectedEP7bt_connh+0x20>
		printk("Cannot get info of connection object\n");
    9b18:	4836      	ldr	r0, [pc, #216]	; (9bf4 <_ZN13deviceManager12disconnectedEP7bt_connh+0xf0>)
    9b1a:	f00f ff26 	bl	1996a <printk>
}
    9b1e:	b010      	add	sp, #64	; 0x40
    9b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9b24:	f89d 4005 	ldrb.w	r4, [sp, #5]
    9b28:	2c01      	cmp	r4, #1
    9b2a:	d10b      	bne.n	9b44 <_ZN13deviceManager12disconnectedEP7bt_connh+0x40>
		printk("Disconnected from Application (reason %u)\n", reason);
    9b2c:	4639      	mov	r1, r7
    9b2e:	4832      	ldr	r0, [pc, #200]	; (9bf8 <_ZN13deviceManager12disconnectedEP7bt_connh+0xf4>)
    9b30:	f00f ff1b 	bl	1996a <printk>
		connectedP = false;
    9b34:	4b31      	ldr	r3, [pc, #196]	; (9bfc <_ZN13deviceManager12disconnectedEP7bt_connh+0xf8>)
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9b36:	4630      	mov	r0, r6
		connectedP = false;
    9b38:	701e      	strb	r6, [r3, #0]
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9b3a:	f012 fe4a 	bl	1c7d2 <dk_set_led_off>
		startAdvertising();
    9b3e:	f7ff fc5b 	bl	93f8 <_ZN13deviceManager16startAdvertisingEv>
    9b42:	e7ec      	b.n	9b1e <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
	else if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9b44:	2c00      	cmp	r4, #0
    9b46:	d1ea      	bne.n	9b1e <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9b48:	4628      	mov	r0, r5
    9b4a:	f011 fc02 	bl	1b352 <bt_conn_get_dst>
		for (uint8_t i = 0; i < nbrConnectionsCentral-1; i++)
    9b4e:	4e2c      	ldr	r6, [pc, #176]	; (9c00 <_ZN13deviceManager12disconnectedEP7bt_connh+0xfc>)
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9b50:	221e      	movs	r2, #30
    9b52:	a908      	add	r1, sp, #32
    9b54:	f7ff fbc0 	bl	92d8 <bt_addr_le_to_str.isra.0>
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    9b58:	a908      	add	r1, sp, #32
    9b5a:	463a      	mov	r2, r7
    9b5c:	4829      	ldr	r0, [pc, #164]	; (9c04 <_ZN13deviceManager12disconnectedEP7bt_connh+0x100>)
    9b5e:	f00f ff04 	bl	1996a <printk>
		for (uint8_t i = 0; i < nbrConnectionsCentral-1; i++)
    9b62:	7833      	ldrb	r3, [r6, #0]
			if (centralConnections[i] == conn)
    9b64:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 9c08 <_ZN13deviceManager12disconnectedEP7bt_connh+0x104>
		for (uint8_t i = 0; i < nbrConnectionsCentral-1; i++)
    9b68:	1e59      	subs	r1, r3, #1
    9b6a:	b2e7      	uxtb	r7, r4
    9b6c:	428f      	cmp	r7, r1
    9b6e:	da17      	bge.n	9ba0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x9c>
			if (centralConnections[i] == conn)
    9b70:	f858 2027 	ldr.w	r2, [r8, r7, lsl #2]
    9b74:	3401      	adds	r4, #1
    9b76:	42aa      	cmp	r2, r5
    9b78:	d1f7      	bne.n	9b6a <_ZN13deviceManager12disconnectedEP7bt_connh+0x66>
				bt_conn_unref(centralConnections[i]);
    9b7a:	4628      	mov	r0, r5
    9b7c:	f006 fe04 	bl	10788 <bt_conn_unref>
				centralConnections[i] = nullptr;
    9b80:	2300      	movs	r3, #0
    9b82:	f848 3027 	str.w	r3, [r8, r7, lsl #2]
				nbrConnectionsCentral--;
    9b86:	7833      	ldrb	r3, [r6, #0]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9b88:	2201      	movs	r2, #1
				nbrConnectionsCentral--;
    9b8a:	3b01      	subs	r3, #1
    9b8c:	7033      	strb	r3, [r6, #0]
				disconnectedCode[0] = 11;
    9b8e:	230b      	movs	r3, #11
    9b90:	f88d 3000 	strb.w	r3, [sp]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9b94:	4b1d      	ldr	r3, [pc, #116]	; (9c0c <_ZN13deviceManager12disconnectedEP7bt_connh+0x108>)
    9b96:	4669      	mov	r1, sp
    9b98:	6818      	ldr	r0, [r3, #0]
    9b9a:	f000 f8cd 	bl	9d38 <_Z17data_service_sendP7bt_connPKht>
				return;
    9b9e:	e7be      	b.n	9b1e <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
		if (nbrConnectionsCentral == 0)
    9ba0:	b96b      	cbnz	r3, 9bbe <_ZN13deviceManager12disconnectedEP7bt_connh+0xba>
			connectedC = false;
    9ba2:	4a1b      	ldr	r2, [pc, #108]	; (9c10 <_ZN13deviceManager12disconnectedEP7bt_connh+0x10c>)
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9ba4:	4669      	mov	r1, sp
			connectedC = false;
    9ba6:	7013      	strb	r3, [r2, #0]
			disconnectedCode[0] = 12;
    9ba8:	230c      	movs	r3, #12
    9baa:	f88d 3000 	strb.w	r3, [sp]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9bae:	4b17      	ldr	r3, [pc, #92]	; (9c0c <_ZN13deviceManager12disconnectedEP7bt_connh+0x108>)
    9bb0:	2201      	movs	r2, #1
    9bb2:	6818      	ldr	r0, [r3, #0]
    9bb4:	f000 f8c0 	bl	9d38 <_Z17data_service_sendP7bt_connPKht>
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9bb8:	2001      	movs	r0, #1
    9bba:	f012 fe0a 	bl	1c7d2 <dk_set_led_off>
		if (checkAddresses(addr,sensor1))
    9bbe:	4915      	ldr	r1, [pc, #84]	; (9c14 <_ZN13deviceManager12disconnectedEP7bt_connh+0x110>)
    9bc0:	a808      	add	r0, sp, #32
    9bc2:	f00f fe23 	bl	1980c <_ZN13deviceManager14checkAddressesEPcS0_>
    9bc6:	b110      	cbz	r0, 9bce <_ZN13deviceManager12disconnectedEP7bt_connh+0xca>
			once_sensor1 = true;
    9bc8:	2201      	movs	r2, #1
    9bca:	4b13      	ldr	r3, [pc, #76]	; (9c18 <_ZN13deviceManager12disconnectedEP7bt_connh+0x114>)
    9bcc:	701a      	strb	r2, [r3, #0]
		if (checkAddresses(addr,sensor2))
    9bce:	4913      	ldr	r1, [pc, #76]	; (9c1c <_ZN13deviceManager12disconnectedEP7bt_connh+0x118>)
    9bd0:	a808      	add	r0, sp, #32
    9bd2:	f00f fe1b 	bl	1980c <_ZN13deviceManager14checkAddressesEPcS0_>
    9bd6:	b110      	cbz	r0, 9bde <_ZN13deviceManager12disconnectedEP7bt_connh+0xda>
			once_sensor2 = true;
    9bd8:	2201      	movs	r2, #1
    9bda:	4b11      	ldr	r3, [pc, #68]	; (9c20 <_ZN13deviceManager12disconnectedEP7bt_connh+0x11c>)
    9bdc:	701a      	strb	r2, [r3, #0]
		if (checkAddresses(addr,sensor3))
    9bde:	4911      	ldr	r1, [pc, #68]	; (9c24 <_ZN13deviceManager12disconnectedEP7bt_connh+0x120>)
    9be0:	a808      	add	r0, sp, #32
    9be2:	f00f fe13 	bl	1980c <_ZN13deviceManager14checkAddressesEPcS0_>
    9be6:	b110      	cbz	r0, 9bee <_ZN13deviceManager12disconnectedEP7bt_connh+0xea>
			once_sensor3 = true;
    9be8:	2201      	movs	r2, #1
    9bea:	4b0f      	ldr	r3, [pc, #60]	; (9c28 <_ZN13deviceManager12disconnectedEP7bt_connh+0x124>)
    9bec:	701a      	strb	r2, [r3, #0]
		startScan();	
    9bee:	f7ff fc6b 	bl	94c8 <_ZN13deviceManager9startScanEv>
    9bf2:	e794      	b.n	9b1e <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
    9bf4:	0001e791 	.word	0x0001e791
    9bf8:	0001e856 	.word	0x0001e856
    9bfc:	2000bef2 	.word	0x2000bef2
    9c00:	2000bef9 	.word	0x2000bef9
    9c04:	0001e881 	.word	0x0001e881
    9c08:	2000a46c 	.word	0x2000a46c
    9c0c:	2000a468 	.word	0x2000a468
    9c10:	2000bef1 	.word	0x2000bef1
    9c14:	2000bebe 	.word	0x2000bebe
    9c18:	20008571 	.word	0x20008571
    9c1c:	2000becf 	.word	0x2000becf
    9c20:	20008572 	.word	0x20008572
    9c24:	2000bee0 	.word	0x2000bee0
    9c28:	20008573 	.word	0x20008573

00009c2c <_ZN7dataCSC8saveDataEPKv>:
    type = ((uint8_t*)data)[0];
    9c2c:	780b      	ldrb	r3, [r1, #0]
    switch (type)
    9c2e:	2b01      	cmp	r3, #1
    type = ((uint8_t*)data)[0];
    9c30:	7403      	strb	r3, [r0, #16]
    switch (type)
    9c32:	d004      	beq.n	9c3e <_ZN7dataCSC8saveDataEPKv+0x12>
    9c34:	2b02      	cmp	r3, #2
    9c36:	d00d      	beq.n	9c54 <_ZN7dataCSC8saveDataEPKv+0x28>
        printk("Unknown type\n");
    9c38:	480c      	ldr	r0, [pc, #48]	; (9c6c <_ZN7dataCSC8saveDataEPKv+0x40>)
    9c3a:	f00f be96 	b.w	1996a <printk>
        oldSumRevSpeed = sumRevSpeed;
    9c3e:	8803      	ldrh	r3, [r0, #0]
    9c40:	8043      	strh	r3, [r0, #2]
        oldLastEventSpeed = lastEventSpeed;
    9c42:	8903      	ldrh	r3, [r0, #8]
    9c44:	8143      	strh	r3, [r0, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    9c46:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        sumRevSpeed = sys_get_le16(&((uint8_t*)data)[1]);
    9c4a:	8003      	strh	r3, [r0, #0]
    9c4c:	f8b1 3005 	ldrh.w	r3, [r1, #5]
		lastEventSpeed = sys_get_le16(&((uint8_t*)data)[5]);
    9c50:	8103      	strh	r3, [r0, #8]
        break;
    9c52:	4770      	bx	lr
        oldSumRevCadence = sumRevCadence;
    9c54:	8883      	ldrh	r3, [r0, #4]
    9c56:	80c3      	strh	r3, [r0, #6]
        oldLastEventCadence  = lastEventCadence;
    9c58:	8983      	ldrh	r3, [r0, #12]
    9c5a:	81c3      	strh	r3, [r0, #14]
    9c5c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
		sumRevCadence = sys_get_le16(&((uint8_t*)data)[1]);
    9c60:	8083      	strh	r3, [r0, #4]
    9c62:	f8b1 3003 	ldrh.w	r3, [r1, #3]
		lastEventCadence  = sys_get_le16(&((uint8_t*)data)[3]);
    9c66:	8183      	strh	r3, [r0, #12]
}
    9c68:	4770      	bx	lr
    9c6a:	bf00      	nop
    9c6c:	0001e8c1 	.word	0x0001e8c1

00009c70 <_ZN7dataCSC7calcRPMEv>:
uint16_t dataCSC::calcRPM() {
    9c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9c74:	8985      	ldrh	r5, [r0, #12]
    9c76:	89c3      	ldrh	r3, [r0, #14]
uint16_t dataCSC::calcRPM() {
    9c78:	4604      	mov	r4, r0
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9c7a:	429d      	cmp	r5, r3
    9c7c:	d02f      	beq.n	9cde <_ZN7dataCSC7calcRPMEv+0x6e>
    uint16_t nbrRev = sumRevCadence-oldSumRevCadence;
    9c7e:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    9c82:	f8b0 9006 	ldrh.w	r9, [r0, #6]
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9c86:	45c8      	cmp	r8, r9
    9c88:	d029      	beq.n	9cde <_ZN7dataCSC7calcRPMEv+0x6e>
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9c8a:	1aed      	subs	r5, r5, r3
    9c8c:	4628      	mov	r0, r5
    9c8e:	f7fe fc29 	bl	84e4 <__aeabi_i2d>
    9c92:	2200      	movs	r2, #0
    9c94:	4b13      	ldr	r3, [pc, #76]	; (9ce4 <_ZN7dataCSC7calcRPMEv+0x74>)
    9c96:	f7fe fc8f 	bl	85b8 <__aeabi_dmul>
        if (time < 0)
    9c9a:	2200      	movs	r2, #0
    9c9c:	2300      	movs	r3, #0
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9c9e:	4606      	mov	r6, r0
    9ca0:	460f      	mov	r7, r1
        if (time < 0)
    9ca2:	f7fe fefb 	bl	8a9c <__aeabi_dcmplt>
    9ca6:	b130      	cbz	r0, 9cb6 <_ZN7dataCSC7calcRPMEv+0x46>
            time = 0xffff - oldLastEventCadence + lastEventCadence;
    9ca8:	f505 407f 	add.w	r0, r5, #65280	; 0xff00
    9cac:	30ff      	adds	r0, #255	; 0xff
    9cae:	f7fe fc19 	bl	84e4 <__aeabi_i2d>
    9cb2:	4606      	mov	r6, r0
    9cb4:	460f      	mov	r7, r1
        rpm = (sumRevCadence - oldSumRevCadence) * 60 / time;
    9cb6:	203c      	movs	r0, #60	; 0x3c
    9cb8:	eba8 0809 	sub.w	r8, r8, r9
    9cbc:	fb00 f008 	mul.w	r0, r0, r8
    9cc0:	f7fe fc10 	bl	84e4 <__aeabi_i2d>
    9cc4:	4632      	mov	r2, r6
    9cc6:	463b      	mov	r3, r7
    9cc8:	f7fe fda0 	bl	880c <__aeabi_ddiv>
    9ccc:	4602      	mov	r2, r0
    9cce:	460b      	mov	r3, r1
    9cd0:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
        retVal = (uint16_t) rpm;
    9cd4:	f7fe ff0a 	bl	8aec <__aeabi_d2uiz>
    9cd8:	b280      	uxth	r0, r0
}
    9cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint16_t retVal = 0;
    9cde:	2000      	movs	r0, #0
    9ce0:	e7fb      	b.n	9cda <_ZN7dataCSC7calcRPMEv+0x6a>
    9ce2:	bf00      	nop
    9ce4:	3f500000 	.word	0x3f500000

00009ce8 <_Z15on_cccd_changedPK12bt_gatt_attrt>:

/* This function is called whenever the CCCD register has been changed by the client*/
void on_cccd_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
    ARG_UNUSED(attr);
    switch(value)
    9ce8:	2901      	cmp	r1, #1
    9cea:	d004      	beq.n	9cf6 <_Z15on_cccd_changedPK12bt_gatt_attrt+0xe>
    9cec:	2902      	cmp	r1, #2
    9cee:	d005      	beq.n	9cfc <_Z15on_cccd_changedPK12bt_gatt_attrt+0x14>
    9cf0:	b931      	cbnz	r1, 9d00 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x18>
            printk("Notifications ON with Indications\n");
            break;

        case 0: 
            // Stop sending stuff
            printk("Notifications OFF\n");
    9cf2:	4804      	ldr	r0, [pc, #16]	; (9d04 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x1c>)
    9cf4:	e000      	b.n	9cf8 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Notifications ON\n");
    9cf6:	4804      	ldr	r0, [pc, #16]	; (9d08 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x20>)
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value\n");     
    9cf8:	f00f be37 	b.w	1996a <printk>
            printk("Notifications ON with Indications\n");
    9cfc:	4803      	ldr	r0, [pc, #12]	; (9d0c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x24>)
    9cfe:	e7fb      	b.n	9cf8 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Error, CCCD has been set to an invalid value\n");     
    9d00:	4803      	ldr	r0, [pc, #12]	; (9d10 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x28>)
    9d02:	e7f9      	b.n	9cf8 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
    9d04:	0001e904 	.word	0x0001e904
    9d08:	0001e8cf 	.word	0x0001e8cf
    9d0c:	0001e8e1 	.word	0x0001e8e1
    9d10:	0001e917 	.word	0x0001e917

00009d14 <_Z17data_service_initv>:
{
    9d14:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
    9d16:	22f0      	movs	r2, #240	; 0xf0
    9d18:	2100      	movs	r1, #0
    9d1a:	4805      	ldr	r0, [pc, #20]	; (9d30 <_Z17data_service_initv+0x1c>)
    9d1c:	f011 f890 	bl	1ae40 <memset>
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
    9d20:	22f0      	movs	r2, #240	; 0xf0
    9d22:	2100      	movs	r1, #0
    9d24:	4803      	ldr	r0, [pc, #12]	; (9d34 <_Z17data_service_initv+0x20>)
    9d26:	f011 f88b 	bl	1ae40 <memset>
}
    9d2a:	2000      	movs	r0, #0
    9d2c:	bd08      	pop	{r3, pc}
    9d2e:	bf00      	nop
    9d30:	2000bf30 	.word	0x2000bf30
    9d34:	2000c020 	.word	0x2000c020

00009d38 <_Z17data_service_sendP7bt_connPKht>:
     * to check whether notification has been enabled by the peer or not.
     * Attribute table: 0 = Service, 1 = Primary service, 2 = RX, 3 = TX, 4 = CCC.
     */
    const struct bt_gatt_attr *attr = &data_service.attrs[3]; 

    struct bt_gatt_notify_params params = 
    9d38:	2300      	movs	r3, #0
{
    9d3a:	b510      	push	{r4, lr}
    9d3c:	b086      	sub	sp, #24
    struct bt_gatt_notify_params params = 
    9d3e:	9303      	str	r3, [sp, #12]
    9d40:	9305      	str	r3, [sp, #20]
    9d42:	4b0d      	ldr	r3, [pc, #52]	; (9d78 <_Z17data_service_sendP7bt_connPKht+0x40>)
        .uuid   = BT_UUID_DATA_SERVICE_TX,
        .attr   = attr,
        .data   = data,
        .len    = len,
        .func   = on_sent
    };
    9d44:	f8ad 200c 	strh.w	r2, [sp, #12]
    struct bt_gatt_notify_params params = 
    9d48:	9300      	str	r3, [sp, #0]
    9d4a:	4b0c      	ldr	r3, [pc, #48]	; (9d7c <_Z17data_service_sendP7bt_connPKht+0x44>)

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9d4c:	2201      	movs	r2, #1
    struct bt_gatt_notify_params params = 
    9d4e:	9304      	str	r3, [sp, #16]
    };
    9d50:	4b0b      	ldr	r3, [pc, #44]	; (9d80 <_Z17data_service_sendP7bt_connPKht+0x48>)
{
    9d52:	4604      	mov	r4, r0
    };
    9d54:	e9cd 3101 	strd	r3, r1, [sp, #4]
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9d58:	4619      	mov	r1, r3
    9d5a:	f009 fcfd 	bl	13758 <bt_gatt_is_subscribed>
    9d5e:	b148      	cbz	r0, 9d74 <_Z17data_service_sendP7bt_connPKht+0x3c>
    {
        // Send the notification
	    if(bt_gatt_notify_cb(conn, &params))
    9d60:	4669      	mov	r1, sp
    9d62:	4620      	mov	r0, r4
    9d64:	f009 fb16 	bl	13394 <bt_gatt_notify_cb>
    9d68:	b110      	cbz	r0, 9d70 <_Z17data_service_sendP7bt_connPKht+0x38>
        {
            printk("Error, unable to send notification\n");
    9d6a:	4806      	ldr	r0, [pc, #24]	; (9d84 <_Z17data_service_sendP7bt_connPKht+0x4c>)
        }
    }
    else
    {
        printk("Warning, notification not enabled on the selected attribute\n");
    9d6c:	f00f fdfd 	bl	1996a <printk>
    }
}
    9d70:	b006      	add	sp, #24
    9d72:	bd10      	pop	{r4, pc}
        printk("Warning, notification not enabled on the selected attribute\n");
    9d74:	4804      	ldr	r0, [pc, #16]	; (9d88 <_Z17data_service_sendP7bt_connPKht+0x50>)
    9d76:	e7f9      	b.n	9d6c <_Z17data_service_sendP7bt_connPKht+0x34>
    9d78:	0001ea2c 	.word	0x0001ea2c
    9d7c:	00019833 	.word	0x00019833
    9d80:	0001d94c 	.word	0x0001d94c
    9d84:	0001e976 	.word	0x0001e976
    9d88:	0001e99a 	.word	0x0001e99a

00009d8c <_Z11getDiameterv>:

// getter
double getDiameter() {
    return dia;
}
    9d8c:	4b01      	ldr	r3, [pc, #4]	; (9d94 <_Z11getDiameterv+0x8>)
    9d8e:	e9d3 0100 	ldrd	r0, r1, [r3]
    9d92:	4770      	bx	lr
    9d94:	20008818 	.word	0x20008818

00009d98 <_Z17getNbrOfAddressesv>:

// getter
uint8_t getNbrOfAddresses() {
    return nbrAddresses;
}
    9d98:	4b01      	ldr	r3, [pc, #4]	; (9da0 <_Z17getNbrOfAddressesv+0x8>)
    9d9a:	7818      	ldrb	r0, [r3, #0]
    9d9c:	4770      	bx	lr
    9d9e:	bf00      	nop
    9da0:	2000c112 	.word	0x2000c112

00009da4 <_Z10getAddressPch>:

// getter
void getAddress(char* outArray, uint8_t nbr) {
    switch (nbr)
    9da4:	2902      	cmp	r1, #2
    9da6:	d00d      	beq.n	9dc4 <_Z10getAddressPch+0x20>
    9da8:	2903      	cmp	r1, #3
    9daa:	d015      	beq.n	9dd8 <_Z10getAddressPch+0x34>
    9dac:	2901      	cmp	r1, #1
    9dae:	d11c      	bne.n	9dea <_Z10getAddressPch+0x46>
    9db0:	4a0e      	ldr	r2, [pc, #56]	; (9dec <_Z10getAddressPch+0x48>)
    9db2:	1e43      	subs	r3, r0, #1
    9db4:	3010      	adds	r0, #16
    {
    case 1:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address1[i];
    9db6:	f812 1b01 	ldrb.w	r1, [r2], #1
    9dba:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    9dbe:	4283      	cmp	r3, r0
    9dc0:	d1f9      	bne.n	9db6 <_Z10getAddressPch+0x12>
    9dc2:	4770      	bx	lr
    9dc4:	4a0a      	ldr	r2, [pc, #40]	; (9df0 <_Z10getAddressPch+0x4c>)
    9dc6:	1e43      	subs	r3, r0, #1
    9dc8:	3010      	adds	r0, #16
        }    
        break;
    case 2:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address2[i];
    9dca:	f812 1b01 	ldrb.w	r1, [r2], #1
    9dce:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    9dd2:	4283      	cmp	r3, r0
    9dd4:	d1f9      	bne.n	9dca <_Z10getAddressPch+0x26>
    9dd6:	4770      	bx	lr
    9dd8:	4a06      	ldr	r2, [pc, #24]	; (9df4 <_Z10getAddressPch+0x50>)
    9dda:	1e43      	subs	r3, r0, #1
    9ddc:	3010      	adds	r0, #16
        }    
        break;
    case 3:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address3[i];
    9dde:	f812 1b01 	ldrb.w	r1, [r2], #1
    9de2:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    9de6:	4283      	cmp	r3, r0
    9de8:	d1f9      	bne.n	9dde <_Z10getAddressPch+0x3a>
        break;
    
    default:
        break;
    }
}
    9dea:	4770      	bx	lr
    9dec:	2000befc 	.word	0x2000befc
    9df0:	2000bf0d 	.word	0x2000bf0d
    9df4:	2000bf1e 	.word	0x2000bf1e

00009df8 <_Z14getSensorInfosv>:

uint8_t getSensorInfos() {
    return infoSensors;
}
    9df8:	4b01      	ldr	r3, [pc, #4]	; (9e00 <_Z14getSensorInfosv+0x8>)
    9dfa:	7818      	ldrb	r0, [r3, #0]
    9dfc:	4770      	bx	lr
    9dfe:	bf00      	nop
    9e00:	2000c111 	.word	0x2000c111

00009e04 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9e04:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    9e06:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    9e08:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    9e0c:	2b02      	cmp	r3, #2
{
    9e0e:	4604      	mov	r4, r0
    9e10:	460e      	mov	r6, r1
	notify->result = res;
    9e12:	6081      	str	r1, [r0, #8]
	switch (method) {
    9e14:	d010      	beq.n	9e38 <sys_notify_finalize+0x34>
    9e16:	2b03      	cmp	r3, #3
    9e18:	d004      	beq.n	9e24 <sys_notify_finalize+0x20>
    9e1a:	2b01      	cmp	r3, #1
    9e1c:	d10f      	bne.n	9e3e <sys_notify_finalize+0x3a>
    9e1e:	2500      	movs	r5, #0
    9e20:	4628      	mov	r0, r5
    9e22:	e001      	b.n	9e28 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    9e24:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    9e26:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    9e28:	2300      	movs	r3, #0
    9e2a:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    9e2c:	b110      	cbz	r0, 9e34 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    9e2e:	4631      	mov	r1, r6
    9e30:	f00f fc58 	bl	196e4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9e34:	4628      	mov	r0, r5
    9e36:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
    9e38:	2500      	movs	r5, #0
		sig = notify->method.signal;
    9e3a:	6800      	ldr	r0, [r0, #0]
		break;
    9e3c:	e7f4      	b.n	9e28 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    9e3e:	2245      	movs	r2, #69	; 0x45
    9e40:	4904      	ldr	r1, [pc, #16]	; (9e54 <sys_notify_finalize+0x50>)
    9e42:	4805      	ldr	r0, [pc, #20]	; (9e58 <sys_notify_finalize+0x54>)
    9e44:	f00f fd91 	bl	1996a <printk>
    9e48:	2145      	movs	r1, #69	; 0x45
    9e4a:	4802      	ldr	r0, [pc, #8]	; (9e54 <sys_notify_finalize+0x50>)
    9e4c:	f010 f833 	bl	19eb6 <assert_post_action>
	sys_notify_generic_callback rv = 0;
    9e50:	2500      	movs	r5, #0
    9e52:	e7e8      	b.n	9e26 <sys_notify_finalize+0x22>
    9e54:	0001ea3d 	.word	0x0001ea3d
    9e58:	0001ea60 	.word	0x0001ea60

00009e5c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    9e5c:	680b      	ldr	r3, [r1, #0]
    9e5e:	3301      	adds	r3, #1
    9e60:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    9e62:	4b01      	ldr	r3, [pc, #4]	; (9e68 <char_out+0xc>)
    9e64:	681b      	ldr	r3, [r3, #0]
    9e66:	4718      	bx	r3
    9e68:	200081fc 	.word	0x200081fc

00009e6c <__printk_hook_install>:
	_char_out = fn;
    9e6c:	4b01      	ldr	r3, [pc, #4]	; (9e74 <__printk_hook_install+0x8>)
    9e6e:	6018      	str	r0, [r3, #0]
}
    9e70:	4770      	bx	lr
    9e72:	bf00      	nop
    9e74:	200081fc 	.word	0x200081fc

00009e78 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    9e78:	b507      	push	{r0, r1, r2, lr}
    9e7a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    9e7c:	2100      	movs	r1, #0
{
    9e7e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    9e80:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    9e82:	4803      	ldr	r0, [pc, #12]	; (9e90 <vprintk+0x18>)
    9e84:	a901      	add	r1, sp, #4
    9e86:	f000 fbe9 	bl	a65c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    9e8a:	b003      	add	sp, #12
    9e8c:	f85d fb04 	ldr.w	pc, [sp], #4
    9e90:	00009e5d 	.word	0x00009e5d

00009e94 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    9e94:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    9e96:	2500      	movs	r5, #0
{
    9e98:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    9e9a:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    9e9e:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    9ea0:	a901      	add	r1, sp, #4
    9ea2:	4805      	ldr	r0, [pc, #20]	; (9eb8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    9ea4:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    9ea6:	f000 fbd9 	bl	a65c <cbvprintf>

	if (ctx.count < ctx.max) {
    9eaa:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    9eae:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    9eb0:	bfb8      	it	lt
    9eb2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    9eb4:	b005      	add	sp, #20
    9eb6:	bd30      	pop	{r4, r5, pc}
    9eb8:	00019945 	.word	0x00019945

00009ebc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    9ebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9ec0:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
    9ec4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    9ec6:	f01a 0f08 	tst.w	sl, #8
{
    9eca:	4693      	mov	fp, r2
	if (processing) {
    9ecc:	d01c      	beq.n	9f08 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    9ece:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    9ed0:	bf0c      	ite	eq
    9ed2:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    9ed6:	f04a 0a20 	orrne.w	sl, sl, #32
    9eda:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9ede:	f104 0014 	add.w	r0, r4, #20
    9ee2:	f00e fd67 	bl	189b4 <z_spin_unlock_valid>
    9ee6:	b940      	cbnz	r0, 9efa <process_event+0x3e>
    9ee8:	4992      	ldr	r1, [pc, #584]	; (a134 <process_event+0x278>)
    9eea:	4893      	ldr	r0, [pc, #588]	; (a138 <process_event+0x27c>)
    9eec:	22a7      	movs	r2, #167	; 0xa7
    9eee:	f00f fd3c 	bl	1996a <printk>
    9ef2:	21a7      	movs	r1, #167	; 0xa7
    9ef4:	488f      	ldr	r0, [pc, #572]	; (a134 <process_event+0x278>)
    9ef6:	f00f ffde 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    9efa:	f38b 8811 	msr	BASEPRI, fp
    9efe:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    9f02:	b003      	add	sp, #12
    9f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    9f08:	4f8c      	ldr	r7, [pc, #560]	; (a13c <process_event+0x280>)
    9f0a:	f8df 822c 	ldr.w	r8, [pc, #556]	; a138 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9f0e:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    9f12:	2902      	cmp	r1, #2
    9f14:	d106      	bne.n	9f24 <process_event+0x68>
			evt = process_recheck(mgr);
    9f16:	4620      	mov	r0, r4
    9f18:	f00f fd41 	bl	1999e <process_recheck>
		if (evt == EVT_NOP) {
    9f1c:	2800      	cmp	r0, #0
    9f1e:	d0de      	beq.n	9ede <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    9f20:	2801      	cmp	r0, #1
    9f22:	d163      	bne.n	9fec <process_event+0x130>
			res = mgr->last_res;
    9f24:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9f28:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    9f2a:	f1b9 0f00 	cmp.w	r9, #0
    9f2e:	da19      	bge.n	9f64 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    9f30:	2600      	movs	r6, #0
		*clients = mgr->clients;
    9f32:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9f34:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    9f38:	e9c4 6600 	strd	r6, r6, [r4]
    9f3c:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    9f40:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9f42:	8ba3      	ldrh	r3, [r4, #28]
    9f44:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    9f48:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9f4a:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    9f4c:	d003      	beq.n	9f56 <process_event+0x9a>
		if (do_monitors
    9f4e:	68a2      	ldr	r2, [r4, #8]
    9f50:	2a00      	cmp	r2, #0
    9f52:	f040 80f5 	bne.w	a140 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
    9f56:	b915      	cbnz	r5, 9f5e <process_event+0xa2>
		    || (transit != NULL)) {
    9f58:	2e00      	cmp	r6, #0
    9f5a:	f000 812f 	beq.w	a1bc <process_event+0x300>
    9f5e:	f04f 0a00 	mov.w	sl, #0
    9f62:	e0ef      	b.n	a144 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9f64:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    9f68:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    9f6a:	2901      	cmp	r1, #1
    9f6c:	d820      	bhi.n	9fb0 <process_event+0xf4>
	list->head = NULL;
    9f6e:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9f70:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    9f74:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    9f76:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9f78:	b29b      	uxth	r3, r3
	list->tail = NULL;
    9f7a:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    9f7e:	d10a      	bne.n	9f96 <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9f80:	b13d      	cbz	r5, 9f92 <process_event+0xd6>
    9f82:	4629      	mov	r1, r5
    9f84:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    9f86:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    9f88:	3201      	adds	r2, #1
    9f8a:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    9f8c:	2900      	cmp	r1, #0
    9f8e:	d1fa      	bne.n	9f86 <process_event+0xca>
    9f90:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9f92:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    9f96:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9f98:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    9f9a:	f00f fd00 	bl	1999e <process_recheck>
    9f9e:	4606      	mov	r6, r0
    9fa0:	2800      	cmp	r0, #0
    9fa2:	d0ce      	beq.n	9f42 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9fa4:	8ba3      	ldrh	r3, [r4, #28]
    9fa6:	f043 0320 	orr.w	r3, r3, #32
    9faa:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    9fac:	2600      	movs	r6, #0
    9fae:	e7c8      	b.n	9f42 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    9fb0:	2a04      	cmp	r2, #4
    9fb2:	d10d      	bne.n	9fd0 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9fb4:	f023 0307 	bic.w	r3, r3, #7
    9fb8:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    9fba:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    9fbc:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    9fbe:	f00f fcee 	bl	1999e <process_recheck>
    9fc2:	4605      	mov	r5, r0
    9fc4:	b180      	cbz	r0, 9fe8 <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    9fc6:	f042 0220 	orr.w	r2, r2, #32
    9fca:	2500      	movs	r5, #0
    9fcc:	83a2      	strh	r2, [r4, #28]
    9fce:	e7ed      	b.n	9fac <process_event+0xf0>
		__ASSERT_NO_MSG(false);
    9fd0:	f240 1219 	movw	r2, #281	; 0x119
    9fd4:	4639      	mov	r1, r7
    9fd6:	4640      	mov	r0, r8
    9fd8:	f00f fcc7 	bl	1996a <printk>
    9fdc:	f240 1119 	movw	r1, #281	; 0x119
    9fe0:	4638      	mov	r0, r7
    9fe2:	f00f ff68 	bl	19eb6 <assert_post_action>
    9fe6:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    9fe8:	462e      	mov	r6, r5
    9fea:	e7aa      	b.n	9f42 <process_event+0x86>
		} else if (evt == EVT_START) {
    9fec:	2803      	cmp	r0, #3
    9fee:	d131      	bne.n	a054 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    9ff0:	f1ba 0f00 	cmp.w	sl, #0
    9ff4:	d00a      	beq.n	a00c <process_event+0x150>
    9ff6:	4639      	mov	r1, r7
    9ff8:	4640      	mov	r0, r8
    9ffa:	f44f 72aa 	mov.w	r2, #340	; 0x154
    9ffe:	f00f fcb4 	bl	1996a <printk>
    a002:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a006:	4638      	mov	r0, r7
    a008:	f00f ff55 	bl	19eb6 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a00c:	6823      	ldr	r3, [r4, #0]
    a00e:	b953      	cbnz	r3, a026 <process_event+0x16a>
    a010:	4639      	mov	r1, r7
    a012:	4640      	mov	r0, r8
    a014:	f240 1255 	movw	r2, #341	; 0x155
    a018:	f00f fca7 	bl	1996a <printk>
    a01c:	f240 1155 	movw	r1, #341	; 0x155
    a020:	4638      	mov	r0, r7
    a022:	f00f ff48 	bl	19eb6 <assert_post_action>
			transit = mgr->transitions->start;
    a026:	6923      	ldr	r3, [r4, #16]
    a028:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    a02a:	b956      	cbnz	r6, a042 <process_event+0x186>
    a02c:	4639      	mov	r1, r7
    a02e:	4640      	mov	r0, r8
    a030:	f44f 72ac 	mov.w	r2, #344	; 0x158
    a034:	f00f fc99 	bl	1996a <printk>
    a038:	f44f 71ac 	mov.w	r1, #344	; 0x158
    a03c:	4638      	mov	r0, r7
    a03e:	f00f ff3a 	bl	19eb6 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a042:	8ba3      	ldrh	r3, [r4, #28]
    a044:	f023 0307 	bic.w	r3, r3, #7
    a048:	f043 0306 	orr.w	r3, r3, #6
}
    a04c:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    a04e:	83a3      	strh	r3, [r4, #28]
		res = 0;
    a050:	46a9      	mov	r9, r5
}
    a052:	e776      	b.n	9f42 <process_event+0x86>
		} else if (evt == EVT_STOP) {
    a054:	2804      	cmp	r0, #4
    a056:	d12e      	bne.n	a0b6 <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    a058:	f1ba 0f02 	cmp.w	sl, #2
    a05c:	d00a      	beq.n	a074 <process_event+0x1b8>
    a05e:	4639      	mov	r1, r7
    a060:	4640      	mov	r0, r8
    a062:	f240 125b 	movw	r2, #347	; 0x15b
    a066:	f00f fc80 	bl	1996a <printk>
    a06a:	f240 115b 	movw	r1, #347	; 0x15b
    a06e:	4638      	mov	r0, r7
    a070:	f00f ff21 	bl	19eb6 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    a074:	8be3      	ldrh	r3, [r4, #30]
    a076:	b153      	cbz	r3, a08e <process_event+0x1d2>
    a078:	4639      	mov	r1, r7
    a07a:	4640      	mov	r0, r8
    a07c:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    a080:	f00f fc73 	bl	1996a <printk>
    a084:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    a088:	4638      	mov	r0, r7
    a08a:	f00f ff14 	bl	19eb6 <assert_post_action>
			transit = mgr->transitions->stop;
    a08e:	6923      	ldr	r3, [r4, #16]
    a090:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    a092:	b956      	cbnz	r6, a0aa <process_event+0x1ee>
    a094:	4639      	mov	r1, r7
    a096:	4640      	mov	r0, r8
    a098:	f240 125f 	movw	r2, #351	; 0x15f
    a09c:	f00f fc65 	bl	1996a <printk>
    a0a0:	f240 115f 	movw	r1, #351	; 0x15f
    a0a4:	4638      	mov	r0, r7
    a0a6:	f00f ff06 	bl	19eb6 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a0aa:	8ba3      	ldrh	r3, [r4, #28]
    a0ac:	f023 0307 	bic.w	r3, r3, #7
    a0b0:	f043 0304 	orr.w	r3, r3, #4
    a0b4:	e7ca      	b.n	a04c <process_event+0x190>
		} else if (evt == EVT_RESET) {
    a0b6:	2805      	cmp	r0, #5
    a0b8:	d12e      	bne.n	a118 <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a0ba:	f1ba 0f01 	cmp.w	sl, #1
    a0be:	d00a      	beq.n	a0d6 <process_event+0x21a>
    a0c0:	4639      	mov	r1, r7
    a0c2:	4640      	mov	r0, r8
    a0c4:	f44f 72b1 	mov.w	r2, #354	; 0x162
    a0c8:	f00f fc4f 	bl	1996a <printk>
    a0cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
    a0d0:	4638      	mov	r0, r7
    a0d2:	f00f fef0 	bl	19eb6 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a0d6:	6823      	ldr	r3, [r4, #0]
    a0d8:	b953      	cbnz	r3, a0f0 <process_event+0x234>
    a0da:	4639      	mov	r1, r7
    a0dc:	4640      	mov	r0, r8
    a0de:	f240 1263 	movw	r2, #355	; 0x163
    a0e2:	f00f fc42 	bl	1996a <printk>
    a0e6:	f240 1163 	movw	r1, #355	; 0x163
    a0ea:	4638      	mov	r0, r7
    a0ec:	f00f fee3 	bl	19eb6 <assert_post_action>
			transit = mgr->transitions->reset;
    a0f0:	6923      	ldr	r3, [r4, #16]
    a0f2:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    a0f4:	b956      	cbnz	r6, a10c <process_event+0x250>
    a0f6:	4639      	mov	r1, r7
    a0f8:	4640      	mov	r0, r8
    a0fa:	f44f 72b3 	mov.w	r2, #358	; 0x166
    a0fe:	f00f fc34 	bl	1996a <printk>
    a102:	f44f 71b3 	mov.w	r1, #358	; 0x166
    a106:	4638      	mov	r0, r7
    a108:	f00f fed5 	bl	19eb6 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a10c:	8ba3      	ldrh	r3, [r4, #28]
    a10e:	f023 0307 	bic.w	r3, r3, #7
    a112:	f043 0305 	orr.w	r3, r3, #5
    a116:	e799      	b.n	a04c <process_event+0x190>
			__ASSERT_NO_MSG(false);
    a118:	2500      	movs	r5, #0
    a11a:	f240 1269 	movw	r2, #361	; 0x169
    a11e:	4639      	mov	r1, r7
    a120:	4640      	mov	r0, r8
    a122:	f00f fc22 	bl	1996a <printk>
    a126:	f240 1169 	movw	r1, #361	; 0x169
    a12a:	4638      	mov	r0, r7
    a12c:	f00f fec3 	bl	19eb6 <assert_post_action>
		onoff_transition_fn transit = NULL;
    a130:	462e      	mov	r6, r5
    a132:	e78d      	b.n	a050 <process_event+0x194>
    a134:	0001ea9a 	.word	0x0001ea9a
    a138:	0001ea60 	.word	0x0001ea60
    a13c:	0001ea78 	.word	0x0001ea78
				   && !sys_slist_is_empty(&mgr->monitors);
    a140:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a144:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    a148:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    a14a:	f104 0314 	add.w	r3, r4, #20
    a14e:	4618      	mov	r0, r3
    a150:	9301      	str	r3, [sp, #4]
    a152:	f00e fc2f 	bl	189b4 <z_spin_unlock_valid>
    a156:	b940      	cbnz	r0, a16a <process_event+0x2ae>
    a158:	4640      	mov	r0, r8
    a15a:	4931      	ldr	r1, [pc, #196]	; (a220 <process_event+0x364>)
    a15c:	22a7      	movs	r2, #167	; 0xa7
    a15e:	f00f fc04 	bl	1996a <printk>
    a162:	21a7      	movs	r1, #167	; 0xa7
    a164:	482e      	ldr	r0, [pc, #184]	; (a220 <process_event+0x364>)
    a166:	f00f fea6 	bl	19eb6 <assert_post_action>
    a16a:	f38b 8811 	msr	BASEPRI, fp
    a16e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    a172:	f1ba 0f00 	cmp.w	sl, #0
    a176:	d130      	bne.n	a1da <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
    a178:	2d00      	cmp	r5, #0
    a17a:	d140      	bne.n	a1fe <process_event+0x342>
			if (transit != NULL) {
    a17c:	b116      	cbz	r6, a184 <process_event+0x2c8>
				transit(mgr, transition_complete);
    a17e:	4620      	mov	r0, r4
    a180:	4928      	ldr	r1, [pc, #160]	; (a224 <process_event+0x368>)
    a182:	47b0      	blx	r6
	__asm__ volatile(
    a184:	f04f 0320 	mov.w	r3, #32
    a188:	f3ef 8b11 	mrs	fp, BASEPRI
    a18c:	f383 8811 	msr	BASEPRI, r3
    a190:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a194:	9801      	ldr	r0, [sp, #4]
    a196:	f00e fbff 	bl	18998 <z_spin_lock_valid>
    a19a:	b940      	cbnz	r0, a1ae <process_event+0x2f2>
    a19c:	4640      	mov	r0, r8
    a19e:	4920      	ldr	r1, [pc, #128]	; (a220 <process_event+0x364>)
    a1a0:	227c      	movs	r2, #124	; 0x7c
    a1a2:	f00f fbe2 	bl	1996a <printk>
    a1a6:	217c      	movs	r1, #124	; 0x7c
    a1a8:	481d      	ldr	r0, [pc, #116]	; (a220 <process_event+0x364>)
    a1aa:	f00f fe84 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
    a1ae:	9801      	ldr	r0, [sp, #4]
    a1b0:	f00e fc0e 	bl	189d0 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    a1b4:	8ba3      	ldrh	r3, [r4, #28]
    a1b6:	f023 0308 	bic.w	r3, r3, #8
    a1ba:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    a1bc:	8ba3      	ldrh	r3, [r4, #28]
    a1be:	06da      	lsls	r2, r3, #27
    a1c0:	d525      	bpl.n	a20e <process_event+0x352>
			evt = EVT_COMPLETE;
    a1c2:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a1c4:	f023 0310 	bic.w	r3, r3, #16
    a1c8:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    a1ca:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    a1ce:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    a1d2:	2900      	cmp	r1, #0
    a1d4:	f47f ae9d 	bne.w	9f12 <process_event+0x56>
out:
    a1d8:	e681      	b.n	9ede <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    a1da:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a1dc:	2900      	cmp	r1, #0
    a1de:	d0cb      	beq.n	a178 <process_event+0x2bc>
	return node->next;
    a1e0:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    a1e4:	464b      	mov	r3, r9
    a1e6:	4620      	mov	r0, r4
    a1e8:	f8d1 b004 	ldr.w	fp, [r1, #4]
    a1ec:	9a00      	ldr	r2, [sp, #0]
    a1ee:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a1f0:	f1ba 0f00 	cmp.w	sl, #0
    a1f4:	d0c0      	beq.n	a178 <process_event+0x2bc>
    a1f6:	4651      	mov	r1, sl
    a1f8:	f8da a000 	ldr.w	sl, [sl]
    a1fc:	e7f2      	b.n	a1e4 <process_event+0x328>
    a1fe:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    a200:	464b      	mov	r3, r9
    a202:	4620      	mov	r0, r4
    a204:	9a00      	ldr	r2, [sp, #0]
    a206:	682d      	ldr	r5, [r5, #0]
    a208:	f00f fbe5 	bl	199d6 <notify_one>
    a20c:	e7b4      	b.n	a178 <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    a20e:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a212:	bf1e      	ittt	ne
    a214:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    a218:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a21a:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    a21c:	e7d5      	b.n	a1ca <process_event+0x30e>
    a21e:	bf00      	nop
    a220:	0001ea9a 	.word	0x0001ea9a
    a224:	0000a229 	.word	0x0000a229

0000a228 <transition_complete>:
{
    a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a22a:	4604      	mov	r4, r0
    a22c:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a22e:	f100 0614 	add.w	r6, r0, #20
    a232:	f04f 0320 	mov.w	r3, #32
    a236:	f3ef 8711 	mrs	r7, BASEPRI
    a23a:	f383 8811 	msr	BASEPRI, r3
    a23e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a242:	4630      	mov	r0, r6
    a244:	f00e fba8 	bl	18998 <z_spin_lock_valid>
    a248:	b940      	cbnz	r0, a25c <transition_complete+0x34>
    a24a:	490a      	ldr	r1, [pc, #40]	; (a274 <transition_complete+0x4c>)
    a24c:	480a      	ldr	r0, [pc, #40]	; (a278 <transition_complete+0x50>)
    a24e:	227c      	movs	r2, #124	; 0x7c
    a250:	f00f fb8b 	bl	1996a <printk>
    a254:	217c      	movs	r1, #124	; 0x7c
    a256:	4807      	ldr	r0, [pc, #28]	; (a274 <transition_complete+0x4c>)
    a258:	f00f fe2d 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
    a25c:	4630      	mov	r0, r6
    a25e:	f00e fbb7 	bl	189d0 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
    a262:	463a      	mov	r2, r7
    a264:	4620      	mov	r0, r4
	mgr->last_res = res;
    a266:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    a268:	2101      	movs	r1, #1
}
    a26a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    a26e:	f7ff be25 	b.w	9ebc <process_event>
    a272:	bf00      	nop
    a274:	0001ea9a 	.word	0x0001ea9a
    a278:	0001ea60 	.word	0x0001ea60

0000a27c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    a27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a280:	4604      	mov	r4, r0
    a282:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    a284:	f00f fbbd 	bl	19a02 <validate_args>

	if (rv < 0) {
    a288:	1e05      	subs	r5, r0, #0
    a28a:	db54      	blt.n	a336 <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a28c:	f104 0914 	add.w	r9, r4, #20
    a290:	f04f 0320 	mov.w	r3, #32
    a294:	f3ef 8a11 	mrs	sl, BASEPRI
    a298:	f383 8811 	msr	BASEPRI, r3
    a29c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a2a0:	4648      	mov	r0, r9
    a2a2:	f00e fb79 	bl	18998 <z_spin_lock_valid>
    a2a6:	b940      	cbnz	r0, a2ba <onoff_request+0x3e>
    a2a8:	4933      	ldr	r1, [pc, #204]	; (a378 <onoff_request+0xfc>)
    a2aa:	4834      	ldr	r0, [pc, #208]	; (a37c <onoff_request+0x100>)
    a2ac:	227c      	movs	r2, #124	; 0x7c
    a2ae:	f00f fb5c 	bl	1996a <printk>
    a2b2:	217c      	movs	r1, #124	; 0x7c
    a2b4:	4830      	ldr	r0, [pc, #192]	; (a378 <onoff_request+0xfc>)
    a2b6:	f00f fdfe 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
    a2ba:	4648      	mov	r0, r9
    a2bc:	f00e fb88 	bl	189d0 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    a2c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a2c4:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a2c6:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    a2c8:	428b      	cmp	r3, r1
    a2ca:	f002 0607 	and.w	r6, r2, #7
    a2ce:	d04a      	beq.n	a366 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    a2d0:	2e02      	cmp	r6, #2
    a2d2:	d11f      	bne.n	a314 <onoff_request+0x98>
	rv = state;
    a2d4:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
    a2d6:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
    a2da:	3301      	adds	r3, #1
    a2dc:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a2de:	4648      	mov	r0, r9
    a2e0:	f00e fb68 	bl	189b4 <z_spin_unlock_valid>
    a2e4:	b940      	cbnz	r0, a2f8 <onoff_request+0x7c>
    a2e6:	4924      	ldr	r1, [pc, #144]	; (a378 <onoff_request+0xfc>)
    a2e8:	4824      	ldr	r0, [pc, #144]	; (a37c <onoff_request+0x100>)
    a2ea:	22a7      	movs	r2, #167	; 0xa7
    a2ec:	f00f fb3d 	bl	1996a <printk>
    a2f0:	21a7      	movs	r1, #167	; 0xa7
    a2f2:	4821      	ldr	r0, [pc, #132]	; (a378 <onoff_request+0xfc>)
    a2f4:	f00f fddf 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
    a2f8:	f38a 8811 	msr	BASEPRI, sl
    a2fc:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    a300:	f1b8 0f00 	cmp.w	r8, #0
    a304:	d017      	beq.n	a336 <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    a306:	2300      	movs	r3, #0
    a308:	4632      	mov	r2, r6
    a30a:	4639      	mov	r1, r7
    a30c:	4620      	mov	r0, r4
    a30e:	f00f fb62 	bl	199d6 <notify_one>
    a312:	e010      	b.n	a336 <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    a314:	0793      	lsls	r3, r2, #30
    a316:	d001      	beq.n	a31c <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    a318:	2e06      	cmp	r6, #6
    a31a:	d10f      	bne.n	a33c <onoff_request+0xc0>
	parent->next = child;
    a31c:	2300      	movs	r3, #0
    a31e:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    a320:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    a322:	b9eb      	cbnz	r3, a360 <onoff_request+0xe4>
	list->head = node;
    a324:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    a328:	4635      	mov	r5, r6
    a32a:	b9f6      	cbnz	r6, a36a <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    a32c:	4652      	mov	r2, sl
    a32e:	2102      	movs	r1, #2
    a330:	4620      	mov	r0, r4
    a332:	f7ff fdc3 	bl	9ebc <process_event>
		}
	}

	return rv;
}
    a336:	4628      	mov	r0, r5
    a338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    a33c:	2e05      	cmp	r6, #5
    a33e:	d017      	beq.n	a370 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a340:	2e01      	cmp	r6, #1
    a342:	d00a      	beq.n	a35a <onoff_request+0xde>
    a344:	490e      	ldr	r1, [pc, #56]	; (a380 <onoff_request+0x104>)
    a346:	480d      	ldr	r0, [pc, #52]	; (a37c <onoff_request+0x100>)
    a348:	f240 12c5 	movw	r2, #453	; 0x1c5
    a34c:	f00f fb0d 	bl	1996a <printk>
    a350:	f240 11c5 	movw	r1, #453	; 0x1c5
    a354:	480a      	ldr	r0, [pc, #40]	; (a380 <onoff_request+0x104>)
    a356:	f00f fdae 	bl	19eb6 <assert_post_action>
		rv = -EIO;
    a35a:	f06f 0504 	mvn.w	r5, #4
    a35e:	e004      	b.n	a36a <onoff_request+0xee>
	parent->next = child;
    a360:	601f      	str	r7, [r3, #0]
	list->tail = node;
    a362:	6067      	str	r7, [r4, #4]
}
    a364:	e7e0      	b.n	a328 <onoff_request+0xac>
		rv = -EAGAIN;
    a366:	f06f 050a 	mvn.w	r5, #10
    a36a:	f04f 0800 	mov.w	r8, #0
    a36e:	e7b6      	b.n	a2de <onoff_request+0x62>
		rv = -ENOTSUP;
    a370:	f06f 0522 	mvn.w	r5, #34	; 0x22
    a374:	e7f9      	b.n	a36a <onoff_request+0xee>
    a376:	bf00      	nop
    a378:	0001ea9a 	.word	0x0001ea9a
    a37c:	0001ea60 	.word	0x0001ea60
    a380:	0001ea78 	.word	0x0001ea78

0000a384 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    a384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a388:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    a38a:	4e14      	ldr	r6, [pc, #80]	; (a3dc <z_work_q_main+0x58>)
    a38c:	f8df 8050 	ldr.w	r8, [pc, #80]	; a3e0 <z_work_q_main+0x5c>
	return z_impl_k_queue_get(queue, timeout);
    a390:	f04f 32ff 	mov.w	r2, #4294967295
    a394:	f04f 33ff 	mov.w	r3, #4294967295
    a398:	4628      	mov	r0, r5
    a39a:	f00d f8a5 	bl	174e8 <z_impl_k_queue_get>
		if (work == NULL) {
    a39e:	4604      	mov	r4, r0
    a3a0:	2800      	cmp	r0, #0
    a3a2:	d0f5      	beq.n	a390 <z_work_q_main+0xc>
		handler = work->handler;
    a3a4:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    a3a6:	b947      	cbnz	r7, a3ba <z_work_q_main+0x36>
    a3a8:	4631      	mov	r1, r6
    a3aa:	4640      	mov	r0, r8
    a3ac:	221c      	movs	r2, #28
    a3ae:	f00f fadc 	bl	1996a <printk>
    a3b2:	211c      	movs	r1, #28
    a3b4:	4630      	mov	r0, r6
    a3b6:	f00f fd7e 	bl	19eb6 <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a3ba:	f104 0308 	add.w	r3, r4, #8
    a3be:	e8d3 2fef 	ldaex	r2, [r3]
    a3c2:	f022 0101 	bic.w	r1, r2, #1
    a3c6:	e8c3 1fe0 	stlex	r0, r1, [r3]
    a3ca:	2800      	cmp	r0, #0
    a3cc:	d1f7      	bne.n	a3be <z_work_q_main+0x3a>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    a3ce:	07d3      	lsls	r3, r2, #31
    a3d0:	d501      	bpl.n	a3d6 <z_work_q_main+0x52>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    a3d2:	4620      	mov	r0, r4
    a3d4:	47b8      	blx	r7
	z_impl_k_yield();
    a3d6:	f00d ffb1 	bl	1833c <z_impl_k_yield>
    a3da:	e7d9      	b.n	a390 <z_work_q_main+0xc>
    a3dc:	0001eac0 	.word	0x0001eac0
    a3e0:	0001ea60 	.word	0x0001ea60

0000a3e4 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    a3e4:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    a3e6:	2900      	cmp	r1, #0
    a3e8:	d039      	beq.n	a45e <sys_heap_free+0x7a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    a3ea:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a3ec:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    a3ee:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a3f0:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
    a3f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a3f6:	bf2c      	ite	cs
    a3f8:	2408      	movcs	r4, #8
    a3fa:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a3fc:	1b0c      	subs	r4, r1, r4
    a3fe:	1b64      	subs	r4, r4, r5
    a400:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a402:	4621      	mov	r1, r4
    a404:	f00f fb29 	bl	19a5a <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    a408:	07c3      	lsls	r3, r0, #31
    a40a:	d408      	bmi.n	a41e <sys_heap_free+0x3a>
    a40c:	4914      	ldr	r1, [pc, #80]	; (a460 <sys_heap_free+0x7c>)
    a40e:	4815      	ldr	r0, [pc, #84]	; (a464 <sys_heap_free+0x80>)
    a410:	229a      	movs	r2, #154	; 0x9a
    a412:	f00f faaa 	bl	1996a <printk>
    a416:	219a      	movs	r1, #154	; 0x9a
    a418:	4811      	ldr	r0, [pc, #68]	; (a460 <sys_heap_free+0x7c>)
    a41a:	f00f fd4c 	bl	19eb6 <assert_post_action>
	return c + chunk_size(h, c);
    a41e:	4621      	mov	r1, r4
    a420:	4628      	mov	r0, r5
    a422:	f00f fb30 	bl	19a86 <chunk_size>
    a426:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    a428:	4631      	mov	r1, r6
    a42a:	2200      	movs	r2, #0
    a42c:	4628      	mov	r0, r5
    a42e:	f00f fb14 	bl	19a5a <chunk_field>
    a432:	1a36      	subs	r6, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    a434:	42b4      	cmp	r4, r6
    a436:	d008      	beq.n	a44a <sys_heap_free+0x66>
    a438:	4909      	ldr	r1, [pc, #36]	; (a460 <sys_heap_free+0x7c>)
    a43a:	480a      	ldr	r0, [pc, #40]	; (a464 <sys_heap_free+0x80>)
    a43c:	22a2      	movs	r2, #162	; 0xa2
    a43e:	f00f fa94 	bl	1996a <printk>
    a442:	21a2      	movs	r1, #162	; 0xa2
    a444:	4806      	ldr	r0, [pc, #24]	; (a460 <sys_heap_free+0x7c>)
    a446:	f00f fd36 	bl	19eb6 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    a44a:	4621      	mov	r1, r4
    a44c:	4628      	mov	r0, r5
    a44e:	2200      	movs	r2, #0
    a450:	f00f fb1f 	bl	19a92 <set_chunk_used>
	free_chunk(h, c);
    a454:	4621      	mov	r1, r4
}
    a456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    a45a:	f00f bc5c 	b.w	19d16 <free_chunk>
}
    a45e:	bd70      	pop	{r4, r5, r6, pc}
    a460:	0001eae3 	.word	0x0001eae3
    a464:	0001ea60 	.word	0x0001ea60

0000a468 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    a468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    a46c:	f101 39ff 	add.w	r9, r1, #4294967295
    a470:	ea19 0f01 	tst.w	r9, r1
{
    a474:	4680      	mov	r8, r0
    a476:	460f      	mov	r7, r1
    a478:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    a47a:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    a47c:	d008      	beq.n	a490 <sys_heap_aligned_alloc+0x28>
    a47e:	4931      	ldr	r1, [pc, #196]	; (a544 <sys_heap_aligned_alloc+0xdc>)
    a480:	4831      	ldr	r0, [pc, #196]	; (a548 <sys_heap_aligned_alloc+0xe0>)
    a482:	22fc      	movs	r2, #252	; 0xfc
    a484:	f00f fa71 	bl	1996a <printk>
    a488:	21fc      	movs	r1, #252	; 0xfc
    a48a:	482e      	ldr	r0, [pc, #184]	; (a544 <sys_heap_aligned_alloc+0xdc>)
    a48c:	f00f fd13 	bl	19eb6 <assert_post_action>
	return big_heap_chunks(h->len);
    a490:	68a8      	ldr	r0, [r5, #8]
	return big_heap(h) ? 8 : 4;
    a492:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    a496:	bf2c      	ite	cs
    a498:	2308      	movcs	r3, #8
    a49a:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    a49c:	429f      	cmp	r7, r3
    a49e:	d805      	bhi.n	a4ac <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    a4a0:	4621      	mov	r1, r4
    a4a2:	4640      	mov	r0, r8
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    a4a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return sys_heap_alloc(heap, bytes);
    a4a8:	f00f bc77 	b.w	19d9a <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    a4ac:	b91c      	cbnz	r4, a4b6 <sys_heap_aligned_alloc+0x4e>
		return NULL;
    a4ae:	2600      	movs	r6, #0
}
    a4b0:	4630      	mov	r0, r6
    a4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    a4b6:	ebb0 0fd4 	cmp.w	r0, r4, lsr #3
    a4ba:	d9f8      	bls.n	a4ae <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    a4bc:	1939      	adds	r1, r7, r4
    a4be:	1ac9      	subs	r1, r1, r3
    a4c0:	f00f fb03 	bl	19aca <bytes_to_chunksz.isra.0>
    a4c4:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    a4c6:	4628      	mov	r0, r5
    a4c8:	f00f fb5a 	bl	19b80 <alloc_chunk>
	if (c0 == 0) {
    a4cc:	4680      	mov	r8, r0
    a4ce:	2800      	cmp	r0, #0
    a4d0:	d0ed      	beq.n	a4ae <sys_heap_aligned_alloc+0x46>
    a4d2:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    a4d4:	427f      	negs	r7, r7
    a4d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a4da:	bf2c      	ite	cs
    a4dc:	2308      	movcs	r3, #8
    a4de:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    a4e0:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    a4e4:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    a4e6:	444e      	add	r6, r9
    a4e8:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a4ea:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a4ec:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a4ee:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a4f0:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a4f2:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    a4f6:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    a4f8:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a4fc:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    a500:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    a504:	d208      	bcs.n	a518 <sys_heap_aligned_alloc+0xb0>
		split_chunks(h, c0, c);
    a506:	4601      	mov	r1, r0
    a508:	463a      	mov	r2, r7
    a50a:	4628      	mov	r0, r5
    a50c:	f00f fb7b 	bl	19c06 <split_chunks>
		free_list_add(h, c0);
    a510:	4641      	mov	r1, r8
    a512:	4628      	mov	r0, r5
    a514:	f00f fbbc 	bl	19c90 <free_list_add>
	return c + chunk_size(h, c);
    a518:	4639      	mov	r1, r7
    a51a:	4628      	mov	r0, r5
    a51c:	f00f fab3 	bl	19a86 <chunk_size>
    a520:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    a522:	4284      	cmp	r4, r0
    a524:	d208      	bcs.n	a538 <sys_heap_aligned_alloc+0xd0>
		split_chunks(h, c, c_end);
    a526:	4639      	mov	r1, r7
    a528:	4628      	mov	r0, r5
    a52a:	4622      	mov	r2, r4
    a52c:	f00f fb6b 	bl	19c06 <split_chunks>
		free_list_add(h, c_end);
    a530:	4621      	mov	r1, r4
    a532:	4628      	mov	r0, r5
    a534:	f00f fbac 	bl	19c90 <free_list_add>
	set_chunk_used(h, c, true);
    a538:	2201      	movs	r2, #1
    a53a:	4639      	mov	r1, r7
    a53c:	4628      	mov	r0, r5
    a53e:	f00f faa8 	bl	19a92 <set_chunk_used>
	return mem;
    a542:	e7b5      	b.n	a4b0 <sys_heap_aligned_alloc+0x48>
    a544:	0001eae3 	.word	0x0001eae3
    a548:	0001ea60 	.word	0x0001ea60

0000a54c <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    a54c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    a550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a552:	4607      	mov	r7, r0
    a554:	460c      	mov	r4, r1
    a556:	4616      	mov	r6, r2
    a558:	d20e      	bcs.n	a578 <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    a55a:	2a04      	cmp	r2, #4
    a55c:	d80a      	bhi.n	a574 <sys_heap_init+0x28>
    a55e:	493d      	ldr	r1, [pc, #244]	; (a654 <sys_heap_init+0x108>)
    a560:	483d      	ldr	r0, [pc, #244]	; (a658 <sys_heap_init+0x10c>)
    a562:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    a566:	f00f fa00 	bl	1996a <printk>
    a56a:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    a56e:	4839      	ldr	r0, [pc, #228]	; (a654 <sys_heap_init+0x108>)
    a570:	f00f fca1 	bl	19eb6 <assert_post_action>
    a574:	2204      	movs	r2, #4
    a576:	e000      	b.n	a57a <sys_heap_init+0x2e>
    a578:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
    a57a:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a57c:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a57e:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a580:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a584:	f024 0407 	bic.w	r4, r4, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    a588:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    a58a:	2c17      	cmp	r4, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    a58c:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    a590:	d80a      	bhi.n	a5a8 <sys_heap_init+0x5c>
    a592:	4930      	ldr	r1, [pc, #192]	; (a654 <sys_heap_init+0x108>)
    a594:	4830      	ldr	r0, [pc, #192]	; (a658 <sys_heap_init+0x10c>)
    a596:	f240 1275 	movw	r2, #373	; 0x175
    a59a:	f00f f9e6 	bl	1996a <printk>
    a59e:	f240 1175 	movw	r1, #373	; 0x175
    a5a2:	482c      	ldr	r0, [pc, #176]	; (a654 <sys_heap_init+0x108>)
    a5a4:	f00f fc87 	bl	19eb6 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    a5a8:	2300      	movs	r3, #0
    a5aa:	2200      	movs	r2, #0
	heap->heap = h;
    a5ac:	603d      	str	r5, [r7, #0]
	h->chunk0_hdr_area = 0;
    a5ae:	e9c5 2300 	strd	r2, r3, [r5]
	h->len = buf_sz;
	h->avail_buckets = 0;
    a5b2:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a5b4:	4631      	mov	r1, r6
    a5b6:	4630      	mov	r0, r6
	h->len = buf_sz;
    a5b8:	60ae      	str	r6, [r5, #8]
	h->avail_buckets = 0;
    a5ba:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a5bc:	f00f fa8e 	bl	19adc <bucket_idx.isra.0>
    a5c0:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    a5c2:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a5c4:	1c47      	adds	r7, r0, #1
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a5c6:	4630      	mov	r0, r6
    a5c8:	f00f fa7f 	bl	19aca <bytes_to_chunksz.isra.0>
    a5cc:	341b      	adds	r4, #27
    a5ce:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    a5d0:	4420      	add	r0, r4
    a5d2:	42b0      	cmp	r0, r6
    a5d4:	d30a      	bcc.n	a5ec <sys_heap_init+0xa0>
    a5d6:	491f      	ldr	r1, [pc, #124]	; (a654 <sys_heap_init+0x108>)
    a5d8:	481f      	ldr	r0, [pc, #124]	; (a658 <sys_heap_init+0x10c>)
    a5da:	f240 1281 	movw	r2, #385	; 0x181
    a5de:	f00f f9c4 	bl	1996a <printk>
    a5e2:	f240 1181 	movw	r1, #385	; 0x181
    a5e6:	481b      	ldr	r0, [pc, #108]	; (a654 <sys_heap_init+0x108>)
    a5e8:	f00f fc65 	bl	19eb6 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    a5ec:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    a5ee:	4619      	mov	r1, r3
    a5f0:	f105 0210 	add.w	r2, r5, #16
	for (int i = 0; i < nb_buckets; i++) {
    a5f4:	42bb      	cmp	r3, r7
    a5f6:	db28      	blt.n	a64a <sys_heap_init+0xfe>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    a5f8:	4622      	mov	r2, r4
    a5fa:	4628      	mov	r0, r5
    a5fc:	2100      	movs	r1, #0
    a5fe:	f00f fa60 	bl	19ac2 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    a602:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
    a604:	4628      	mov	r0, r5
    a606:	2201      	movs	r2, #1
    a608:	2100      	movs	r1, #0
    a60a:	f00f fa42 	bl	19a92 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    a60e:	463a      	mov	r2, r7
    a610:	4621      	mov	r1, r4
    a612:	f00f fa56 	bl	19ac2 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    a616:	4623      	mov	r3, r4
    a618:	2200      	movs	r2, #0
    a61a:	4621      	mov	r1, r4
    a61c:	4628      	mov	r0, r5
    a61e:	f00f fa27 	bl	19a70 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    a622:	4631      	mov	r1, r6
    a624:	4628      	mov	r0, r5
    a626:	f00f fa4c 	bl	19ac2 <set_chunk_size>
    a62a:	463b      	mov	r3, r7
    a62c:	4631      	mov	r1, r6
    a62e:	4628      	mov	r0, r5
    a630:	2200      	movs	r2, #0
    a632:	f00f fa1d 	bl	19a70 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    a636:	4631      	mov	r1, r6
    a638:	4628      	mov	r0, r5
    a63a:	2201      	movs	r2, #1
    a63c:	f00f fa29 	bl	19a92 <set_chunk_used>

	free_list_add(h, chunk0_size);
    a640:	4621      	mov	r1, r4
}
    a642:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    a646:	f00f bb23 	b.w	19c90 <free_list_add>
		h->buckets[i].next = 0;
    a64a:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    a64e:	3301      	adds	r3, #1
    a650:	e7d0      	b.n	a5f4 <sys_heap_init+0xa8>
    a652:	bf00      	nop
    a654:	0001eae3 	.word	0x0001eae3
    a658:	0001ea60 	.word	0x0001ea60

0000a65c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    a65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a660:	468b      	mov	fp, r1
    a662:	4692      	mov	sl, r2
    a664:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    a666:	2500      	movs	r5, #0
{
    a668:	b091      	sub	sp, #68	; 0x44
    a66a:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    a66c:	f89a 0000 	ldrb.w	r0, [sl]
    a670:	b908      	cbnz	r0, a676 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    a672:	4628      	mov	r0, r5
    a674:	e35f      	b.n	ad36 <cbvprintf+0x6da>
		if (*fp != '%') {
    a676:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    a678:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    a67c:	d007      	beq.n	a68e <cbvprintf+0x32>
			OUTC('%');
    a67e:	4659      	mov	r1, fp
    a680:	9b02      	ldr	r3, [sp, #8]
    a682:	4798      	blx	r3
    a684:	2800      	cmp	r0, #0
    a686:	f2c0 8356 	blt.w	ad36 <cbvprintf+0x6da>
    a68a:	3501      	adds	r5, #1
			break;
    a68c:	e212      	b.n	aab4 <cbvprintf+0x458>
		} state = {
    a68e:	2218      	movs	r2, #24
    a690:	2100      	movs	r1, #0
    a692:	a80a      	add	r0, sp, #40	; 0x28
    a694:	f010 fbd4 	bl	1ae40 <memset>
	if (*sp == '%') {
    a698:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a69c:	2b25      	cmp	r3, #37	; 0x25
    a69e:	d078      	beq.n	a792 <cbvprintf+0x136>
    a6a0:	2200      	movs	r2, #0
    a6a2:	4694      	mov	ip, r2
    a6a4:	4696      	mov	lr, r2
    a6a6:	4616      	mov	r6, r2
    a6a8:	4610      	mov	r0, r2
    a6aa:	4639      	mov	r1, r7
		switch (*sp) {
    a6ac:	f817 3b01 	ldrb.w	r3, [r7], #1
    a6b0:	2b2b      	cmp	r3, #43	; 0x2b
    a6b2:	f000 809d 	beq.w	a7f0 <cbvprintf+0x194>
    a6b6:	f200 8094 	bhi.w	a7e2 <cbvprintf+0x186>
    a6ba:	2b20      	cmp	r3, #32
    a6bc:	f000 809a 	beq.w	a7f4 <cbvprintf+0x198>
    a6c0:	2b23      	cmp	r3, #35	; 0x23
    a6c2:	f000 809a 	beq.w	a7fa <cbvprintf+0x19e>
    a6c6:	b128      	cbz	r0, a6d4 <cbvprintf+0x78>
    a6c8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a6cc:	f040 0004 	orr.w	r0, r0, #4
    a6d0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a6d4:	b12e      	cbz	r6, a6e2 <cbvprintf+0x86>
    a6d6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a6da:	f040 0008 	orr.w	r0, r0, #8
    a6de:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a6e2:	f1be 0f00 	cmp.w	lr, #0
    a6e6:	d005      	beq.n	a6f4 <cbvprintf+0x98>
    a6e8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a6ec:	f040 0010 	orr.w	r0, r0, #16
    a6f0:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a6f4:	f1bc 0f00 	cmp.w	ip, #0
    a6f8:	d005      	beq.n	a706 <cbvprintf+0xaa>
    a6fa:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a6fe:	f040 0020 	orr.w	r0, r0, #32
    a702:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a706:	b12a      	cbz	r2, a714 <cbvprintf+0xb8>
    a708:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    a70c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    a710:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    a714:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    a718:	f002 0044 	and.w	r0, r2, #68	; 0x44
    a71c:	2844      	cmp	r0, #68	; 0x44
    a71e:	d103      	bne.n	a728 <cbvprintf+0xcc>
		conv->flag_zero = false;
    a720:	f36f 1286 	bfc	r2, #6, #1
    a724:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    a728:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    a72c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    a72e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    a732:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    a736:	d17b      	bne.n	a830 <cbvprintf+0x1d4>
		conv->width_star = true;
    a738:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    a73c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    a73e:	f042 0201 	orr.w	r2, r2, #1
    a742:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    a746:	781a      	ldrb	r2, [r3, #0]
    a748:	2a2e      	cmp	r2, #46	; 0x2e
    a74a:	bf0c      	ite	eq
    a74c:	2101      	moveq	r1, #1
    a74e:	2100      	movne	r1, #0
    a750:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    a754:	f361 0241 	bfi	r2, r1, #1, #1
    a758:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    a75c:	d174      	bne.n	a848 <cbvprintf+0x1ec>
	if (*sp == '*') {
    a75e:	785a      	ldrb	r2, [r3, #1]
    a760:	2a2a      	cmp	r2, #42	; 0x2a
    a762:	d06a      	beq.n	a83a <cbvprintf+0x1de>
	size_t val = 0;
    a764:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    a766:	260a      	movs	r6, #10
	++sp;
    a768:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a76a:	4618      	mov	r0, r3
    a76c:	f810 2b01 	ldrb.w	r2, [r0], #1
    a770:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a774:	2f09      	cmp	r7, #9
    a776:	f240 808e 	bls.w	a896 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    a77a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    a77e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    a780:	f3c2 0040 	ubfx	r0, r2, #1, #1
    a784:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    a788:	f361 0241 	bfi	r2, r1, #1, #1
    a78c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    a790:	e05a      	b.n	a848 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    a792:	f10a 0702 	add.w	r7, sl, #2
    a796:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    a79a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a79e:	07d9      	lsls	r1, r3, #31
    a7a0:	f140 8149 	bpl.w	aa36 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    a7a4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    a7a8:	f1b9 0f00 	cmp.w	r9, #0
    a7ac:	da07      	bge.n	a7be <cbvprintf+0x162>
				conv->flag_dash = true;
    a7ae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    a7b2:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    a7b6:	f042 0204 	orr.w	r2, r2, #4
    a7ba:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    a7be:	075a      	lsls	r2, r3, #29
    a7c0:	f140 8142 	bpl.w	aa48 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    a7c4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    a7c8:	f1b8 0f00 	cmp.w	r8, #0
    a7cc:	f280 8141 	bge.w	aa52 <cbvprintf+0x3f6>
				conv->prec_present = false;
    a7d0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a7d4:	f36f 0341 	bfc	r3, #1, #1
    a7d8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    a7dc:	f04f 38ff 	mov.w	r8, #4294967295
    a7e0:	e137      	b.n	aa52 <cbvprintf+0x3f6>
		switch (*sp) {
    a7e2:	2b2d      	cmp	r3, #45	; 0x2d
    a7e4:	d00c      	beq.n	a800 <cbvprintf+0x1a4>
    a7e6:	2b30      	cmp	r3, #48	; 0x30
    a7e8:	f47f af6d 	bne.w	a6c6 <cbvprintf+0x6a>
			conv->flag_zero = true;
    a7ec:	2201      	movs	r2, #1
	} while (loop);
    a7ee:	e75c      	b.n	a6aa <cbvprintf+0x4e>
			conv->flag_plus = true;
    a7f0:	2601      	movs	r6, #1
    a7f2:	e75a      	b.n	a6aa <cbvprintf+0x4e>
			conv->flag_space = true;
    a7f4:	f04f 0e01 	mov.w	lr, #1
    a7f8:	e757      	b.n	a6aa <cbvprintf+0x4e>
			conv->flag_hash = true;
    a7fa:	f04f 0c01 	mov.w	ip, #1
    a7fe:	e754      	b.n	a6aa <cbvprintf+0x4e>
		switch (*sp) {
    a800:	2001      	movs	r0, #1
    a802:	e752      	b.n	a6aa <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    a804:	4633      	mov	r3, r6
    a806:	fb0c 0202 	mla	r2, ip, r2, r0
    a80a:	3a30      	subs	r2, #48	; 0x30
    a80c:	461e      	mov	r6, r3
    a80e:	f816 0b01 	ldrb.w	r0, [r6], #1
    a812:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a816:	2f09      	cmp	r7, #9
    a818:	d9f4      	bls.n	a804 <cbvprintf+0x1a8>
	if (sp != wp) {
    a81a:	4299      	cmp	r1, r3
    a81c:	d093      	beq.n	a746 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    a81e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    a822:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    a824:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    a826:	f362 0141 	bfi	r1, r2, #1, #1
    a82a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    a82e:	e78a      	b.n	a746 <cbvprintf+0xea>
    a830:	460b      	mov	r3, r1
	size_t val = 0;
    a832:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    a834:	f04f 0c0a 	mov.w	ip, #10
    a838:	e7e8      	b.n	a80c <cbvprintf+0x1b0>
		conv->prec_star = true;
    a83a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    a83e:	3302      	adds	r3, #2
		conv->prec_star = true;
    a840:	f042 0204 	orr.w	r2, r2, #4
    a844:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    a848:	461f      	mov	r7, r3
    a84a:	f817 2b01 	ldrb.w	r2, [r7], #1
    a84e:	2a6c      	cmp	r2, #108	; 0x6c
    a850:	d041      	beq.n	a8d6 <cbvprintf+0x27a>
    a852:	d825      	bhi.n	a8a0 <cbvprintf+0x244>
    a854:	2a68      	cmp	r2, #104	; 0x68
    a856:	d02b      	beq.n	a8b0 <cbvprintf+0x254>
    a858:	2a6a      	cmp	r2, #106	; 0x6a
    a85a:	d046      	beq.n	a8ea <cbvprintf+0x28e>
    a85c:	2a4c      	cmp	r2, #76	; 0x4c
    a85e:	d04c      	beq.n	a8fa <cbvprintf+0x29e>
    a860:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    a862:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    a866:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    a86a:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    a86c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    a870:	f200 80d9 	bhi.w	aa26 <cbvprintf+0x3ca>
    a874:	2a57      	cmp	r2, #87	; 0x57
    a876:	d84d      	bhi.n	a914 <cbvprintf+0x2b8>
    a878:	2a41      	cmp	r2, #65	; 0x41
    a87a:	d003      	beq.n	a884 <cbvprintf+0x228>
    a87c:	3a45      	subs	r2, #69	; 0x45
    a87e:	2a02      	cmp	r2, #2
    a880:	f200 80d1 	bhi.w	aa26 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    a884:	2204      	movs	r2, #4
    a886:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    a88a:	f362 0302 	bfi	r3, r2, #0, #3
    a88e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    a892:	2301      	movs	r3, #1
			break;
    a894:	e09e      	b.n	a9d4 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    a896:	fb06 2101 	mla	r1, r6, r1, r2
    a89a:	4603      	mov	r3, r0
    a89c:	3930      	subs	r1, #48	; 0x30
    a89e:	e764      	b.n	a76a <cbvprintf+0x10e>
	switch (*sp) {
    a8a0:	2a74      	cmp	r2, #116	; 0x74
    a8a2:	d026      	beq.n	a8f2 <cbvprintf+0x296>
    a8a4:	2a7a      	cmp	r2, #122	; 0x7a
    a8a6:	d1db      	bne.n	a860 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    a8a8:	2206      	movs	r2, #6
    a8aa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a8ae:	e00d      	b.n	a8cc <cbvprintf+0x270>
		if (*++sp == 'h') {
    a8b0:	785a      	ldrb	r2, [r3, #1]
    a8b2:	2a68      	cmp	r2, #104	; 0x68
    a8b4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    a8b8:	d106      	bne.n	a8c8 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    a8ba:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    a8bc:	f361 02c6 	bfi	r2, r1, #3, #4
    a8c0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    a8c4:	1c9f      	adds	r7, r3, #2
    a8c6:	e7cc      	b.n	a862 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    a8c8:	4613      	mov	r3, r2
    a8ca:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    a8cc:	f362 03c6 	bfi	r3, r2, #3, #4
    a8d0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    a8d4:	e7c5      	b.n	a862 <cbvprintf+0x206>
		if (*++sp == 'l') {
    a8d6:	785a      	ldrb	r2, [r3, #1]
    a8d8:	2a6c      	cmp	r2, #108	; 0x6c
    a8da:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    a8de:	d101      	bne.n	a8e4 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    a8e0:	2104      	movs	r1, #4
    a8e2:	e7eb      	b.n	a8bc <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    a8e4:	4613      	mov	r3, r2
    a8e6:	2203      	movs	r2, #3
    a8e8:	e7f0      	b.n	a8cc <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    a8ea:	2205      	movs	r2, #5
    a8ec:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a8f0:	e7ec      	b.n	a8cc <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    a8f2:	2207      	movs	r2, #7
    a8f4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a8f8:	e7e8      	b.n	a8cc <cbvprintf+0x270>
		conv->unsupported = true;
    a8fa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    a8fe:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    a902:	f023 0302 	bic.w	r3, r3, #2
    a906:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    a90a:	f043 0302 	orr.w	r3, r3, #2
    a90e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    a912:	e7a6      	b.n	a862 <cbvprintf+0x206>
    a914:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    a918:	2920      	cmp	r1, #32
    a91a:	f200 8084 	bhi.w	aa26 <cbvprintf+0x3ca>
    a91e:	a001      	add	r0, pc, #4	; (adr r0, a924 <cbvprintf+0x2c8>)
    a920:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    a924:	0000a9e9 	.word	0x0000a9e9
    a928:	0000aa27 	.word	0x0000aa27
    a92c:	0000aa27 	.word	0x0000aa27
    a930:	0000aa27 	.word	0x0000aa27
    a934:	0000aa27 	.word	0x0000aa27
    a938:	0000aa27 	.word	0x0000aa27
    a93c:	0000aa27 	.word	0x0000aa27
    a940:	0000aa27 	.word	0x0000aa27
    a944:	0000aa27 	.word	0x0000aa27
    a948:	0000a885 	.word	0x0000a885
    a94c:	0000aa27 	.word	0x0000aa27
    a950:	0000a9e9 	.word	0x0000a9e9
    a954:	0000a9a9 	.word	0x0000a9a9
    a958:	0000a885 	.word	0x0000a885
    a95c:	0000a885 	.word	0x0000a885
    a960:	0000a885 	.word	0x0000a885
    a964:	0000aa27 	.word	0x0000aa27
    a968:	0000a9a9 	.word	0x0000a9a9
    a96c:	0000aa27 	.word	0x0000aa27
    a970:	0000aa27 	.word	0x0000aa27
    a974:	0000aa27 	.word	0x0000aa27
    a978:	0000aa27 	.word	0x0000aa27
    a97c:	0000a9f1 	.word	0x0000a9f1
    a980:	0000a9e9 	.word	0x0000a9e9
    a984:	0000aa0d 	.word	0x0000aa0d
    a988:	0000aa27 	.word	0x0000aa27
    a98c:	0000aa27 	.word	0x0000aa27
    a990:	0000aa0d 	.word	0x0000aa0d
    a994:	0000aa27 	.word	0x0000aa27
    a998:	0000a9e9 	.word	0x0000a9e9
    a99c:	0000aa27 	.word	0x0000aa27
    a9a0:	0000aa27 	.word	0x0000aa27
    a9a4:	0000a9e9 	.word	0x0000a9e9
		conv->specifier_cat = SPECIFIER_SINT;
    a9a8:	2001      	movs	r0, #1
    a9aa:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    a9ae:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    a9b2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    a9b6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    a9b8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    a9bc:	bf02      	ittt	eq
    a9be:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    a9c2:	f041 0101 	orreq.w	r1, r1, #1
    a9c6:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    a9ca:	2a63      	cmp	r2, #99	; 0x63
    a9cc:	d131      	bne.n	aa32 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    a9ce:	3b00      	subs	r3, #0
    a9d0:	bf18      	it	ne
    a9d2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    a9d4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    a9d8:	f3c2 0140 	ubfx	r1, r2, #1, #1
    a9dc:	430b      	orrs	r3, r1
    a9de:	f363 0241 	bfi	r2, r3, #1, #1
    a9e2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    a9e6:	e6d8      	b.n	a79a <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    a9e8:	2002      	movs	r0, #2
    a9ea:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    a9ee:	e7de      	b.n	a9ae <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    a9f0:	2103      	movs	r1, #3
    a9f2:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    a9f6:	f003 0378 	and.w	r3, r3, #120	; 0x78
    a9fa:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    a9fe:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    aa02:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    aa04:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    aa08:	4143      	adcs	r3, r0
    aa0a:	e7e3      	b.n	a9d4 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    aa0c:	2103      	movs	r1, #3
    aa0e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    aa12:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    aa16:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    aa1a:	bf14      	ite	ne
    aa1c:	2301      	movne	r3, #1
    aa1e:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    aa20:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    aa24:	e7d6      	b.n	a9d4 <cbvprintf+0x378>
		conv->invalid = true;
    aa26:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    aa2a:	f043 0301 	orr.w	r3, r3, #1
    aa2e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    aa32:	2300      	movs	r3, #0
    aa34:	e7ce      	b.n	a9d4 <cbvprintf+0x378>
		} else if (conv->width_present) {
    aa36:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    aa3a:	2a00      	cmp	r2, #0
		int width = -1;
    aa3c:	bfac      	ite	ge
    aa3e:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    aa42:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    aa46:	e6ba      	b.n	a7be <cbvprintf+0x162>
		} else if (conv->prec_present) {
    aa48:	079b      	lsls	r3, r3, #30
    aa4a:	f57f aec7 	bpl.w	a7dc <cbvprintf+0x180>
			precision = conv->prec_value;
    aa4e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    aa52:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    aa54:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    aa58:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    aa5c:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    aa60:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    aa64:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    aa66:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    aa6a:	d138      	bne.n	aade <cbvprintf+0x482>
			switch (length_mod) {
    aa6c:	1ecb      	subs	r3, r1, #3
    aa6e:	2b04      	cmp	r3, #4
    aa70:	d822      	bhi.n	aab8 <cbvprintf+0x45c>
    aa72:	e8df f003 	tbb	[pc, r3]
    aa76:	0903      	.short	0x0903
    aa78:	2109      	.short	0x2109
    aa7a:	21          	.byte	0x21
    aa7b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    aa7c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    aa80:	17da      	asrs	r2, r3, #31
    aa82:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    aa86:	e006      	b.n	aa96 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    aa88:	3407      	adds	r4, #7
    aa8a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    aa8e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    aa92:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    aa96:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    aa9a:	f013 0603 	ands.w	r6, r3, #3
    aa9e:	d056      	beq.n	ab4e <cbvprintf+0x4f2>
			OUTS(sp, fp);
    aaa0:	463b      	mov	r3, r7
    aaa2:	4652      	mov	r2, sl
    aaa4:	4659      	mov	r1, fp
    aaa6:	9802      	ldr	r0, [sp, #8]
    aaa8:	f00f f9ef 	bl	19e8a <outs>
    aaac:	2800      	cmp	r0, #0
    aaae:	f2c0 8142 	blt.w	ad36 <cbvprintf+0x6da>
    aab2:	4405      	add	r5, r0
			continue;
    aab4:	46ba      	mov	sl, r7
    aab6:	e5d9      	b.n	a66c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    aab8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    aabc:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    aabe:	ea4f 72e3 	mov.w	r2, r3, asr #31
    aac2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    aac6:	d105      	bne.n	aad4 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    aac8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    aacc:	930a      	str	r3, [sp, #40]	; 0x28
    aace:	2300      	movs	r3, #0
    aad0:	930b      	str	r3, [sp, #44]	; 0x2c
    aad2:	e7e0      	b.n	aa96 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    aad4:	2902      	cmp	r1, #2
    aad6:	d1de      	bne.n	aa96 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    aad8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    aadc:	e7d0      	b.n	aa80 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    aade:	2b02      	cmp	r3, #2
    aae0:	d123      	bne.n	ab2a <cbvprintf+0x4ce>
			switch (length_mod) {
    aae2:	1ecb      	subs	r3, r1, #3
    aae4:	2b04      	cmp	r3, #4
    aae6:	d813      	bhi.n	ab10 <cbvprintf+0x4b4>
    aae8:	e8df f003 	tbb	[pc, r3]
    aaec:	120a0a03 	.word	0x120a0a03
    aaf0:	12          	.byte	0x12
    aaf1:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    aaf2:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    aaf4:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    aaf6:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    aaf8:	920a      	str	r2, [sp, #40]	; 0x28
    aafa:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    aafc:	4604      	mov	r4, r0
    aafe:	e7ca      	b.n	aa96 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    ab00:	1de0      	adds	r0, r4, #7
    ab02:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    ab06:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    ab0a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    ab0e:	e7f5      	b.n	aafc <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    ab10:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    ab14:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    ab16:	930a      	str	r3, [sp, #40]	; 0x28
    ab18:	f04f 0300 	mov.w	r3, #0
    ab1c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    ab1e:	d0d3      	beq.n	aac8 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    ab20:	2902      	cmp	r1, #2
    ab22:	d1b8      	bne.n	aa96 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    ab24:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ab28:	e7d0      	b.n	aacc <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    ab2a:	2b04      	cmp	r3, #4
    ab2c:	d109      	bne.n	ab42 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    ab2e:	1de3      	adds	r3, r4, #7
    ab30:	f023 0307 	bic.w	r3, r3, #7
    ab34:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
    ab3c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    ab40:	e7a9      	b.n	aa96 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    ab42:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    ab44:	bf04      	itt	eq
    ab46:	f854 3b04 	ldreq.w	r3, [r4], #4
    ab4a:	930a      	streq	r3, [sp, #40]	; 0x28
    ab4c:	e7a3      	b.n	aa96 <cbvprintf+0x43a>
		switch (conv->specifier) {
    ab4e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ab52:	2878      	cmp	r0, #120	; 0x78
    ab54:	d8ae      	bhi.n	aab4 <cbvprintf+0x458>
    ab56:	2862      	cmp	r0, #98	; 0x62
    ab58:	d822      	bhi.n	aba0 <cbvprintf+0x544>
    ab5a:	2825      	cmp	r0, #37	; 0x25
    ab5c:	f43f ad8f 	beq.w	a67e <cbvprintf+0x22>
    ab60:	2858      	cmp	r0, #88	; 0x58
    ab62:	d1a7      	bne.n	aab4 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    ab64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    ab68:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    ab6c:	9300      	str	r3, [sp, #0]
    ab6e:	aa0c      	add	r2, sp, #48	; 0x30
    ab70:	ab04      	add	r3, sp, #16
    ab72:	f00f f944 	bl	19dfe <encode_uint>
    ab76:	4682      	mov	sl, r0
			if (precision >= 0) {
    ab78:	f1b8 0f00 	cmp.w	r8, #0
    ab7c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    ab80:	db0c      	blt.n	ab9c <cbvprintf+0x540>
				conv->flag_zero = false;
    ab82:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    ab86:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    ab8a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    ab8e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    ab90:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    ab94:	d902      	bls.n	ab9c <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    ab96:	eba8 0303 	sub.w	r3, r8, r3
    ab9a:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    ab9c:	4680      	mov	r8, r0
    ab9e:	e03d      	b.n	ac1c <cbvprintf+0x5c0>
    aba0:	3863      	subs	r0, #99	; 0x63
    aba2:	2815      	cmp	r0, #21
    aba4:	d886      	bhi.n	aab4 <cbvprintf+0x458>
    aba6:	a201      	add	r2, pc, #4	; (adr r2, abac <cbvprintf+0x550>)
    aba8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    abac:	0000ac2d 	.word	0x0000ac2d
    abb0:	0000ac91 	.word	0x0000ac91
    abb4:	0000aab5 	.word	0x0000aab5
    abb8:	0000aab5 	.word	0x0000aab5
    abbc:	0000aab5 	.word	0x0000aab5
    abc0:	0000aab5 	.word	0x0000aab5
    abc4:	0000ac91 	.word	0x0000ac91
    abc8:	0000aab5 	.word	0x0000aab5
    abcc:	0000aab5 	.word	0x0000aab5
    abd0:	0000aab5 	.word	0x0000aab5
    abd4:	0000aab5 	.word	0x0000aab5
    abd8:	0000aceb 	.word	0x0000aceb
    abdc:	0000acb9 	.word	0x0000acb9
    abe0:	0000acbd 	.word	0x0000acbd
    abe4:	0000aab5 	.word	0x0000aab5
    abe8:	0000aab5 	.word	0x0000aab5
    abec:	0000ac05 	.word	0x0000ac05
    abf0:	0000aab5 	.word	0x0000aab5
    abf4:	0000acb9 	.word	0x0000acb9
    abf8:	0000aab5 	.word	0x0000aab5
    abfc:	0000aab5 	.word	0x0000aab5
    ac00:	0000acb9 	.word	0x0000acb9
			if (precision >= 0) {
    ac04:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    ac08:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    ac0c:	db0a      	blt.n	ac24 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    ac0e:	4641      	mov	r1, r8
    ac10:	4650      	mov	r0, sl
    ac12:	f010 f8b3 	bl	1ad7c <strnlen>
		char sign = 0;
    ac16:	2600      	movs	r6, #0
			bpe = bps + len;
    ac18:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    ac1c:	f1ba 0f00 	cmp.w	sl, #0
    ac20:	d10c      	bne.n	ac3c <cbvprintf+0x5e0>
    ac22:	e747      	b.n	aab4 <cbvprintf+0x458>
				len = strlen(bps);
    ac24:	4650      	mov	r0, sl
    ac26:	f010 f8a2 	bl	1ad6e <strlen>
    ac2a:	e7f4      	b.n	ac16 <cbvprintf+0x5ba>
			break;
    ac2c:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ac2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    ac30:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    ac34:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    ac38:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    ac3c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    ac40:	b106      	cbz	r6, ac44 <cbvprintf+0x5e8>
			nj_len += 1U;
    ac42:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    ac44:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    ac48:	06d0      	lsls	r0, r2, #27
    ac4a:	d568      	bpl.n	ad1e <cbvprintf+0x6c2>
			nj_len += 2U;
    ac4c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    ac4e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    ac50:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    ac52:	bf48      	it	mi
    ac54:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    ac56:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    ac58:	bf48      	it	mi
    ac5a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    ac5c:	f1b9 0f00 	cmp.w	r9, #0
    ac60:	dd76      	ble.n	ad50 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    ac62:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    ac66:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    ac6a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    ac6e:	9303      	str	r3, [sp, #12]
    ac70:	0753      	lsls	r3, r2, #29
    ac72:	d46d      	bmi.n	ad50 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    ac74:	0650      	lsls	r0, r2, #25
    ac76:	d561      	bpl.n	ad3c <cbvprintf+0x6e0>
					if (sign != 0) {
    ac78:	b146      	cbz	r6, ac8c <cbvprintf+0x630>
						OUTC(sign);
    ac7a:	4659      	mov	r1, fp
    ac7c:	4630      	mov	r0, r6
    ac7e:	9b02      	ldr	r3, [sp, #8]
    ac80:	4798      	blx	r3
    ac82:	2800      	cmp	r0, #0
    ac84:	db57      	blt.n	ad36 <cbvprintf+0x6da>
						sign = 0;
    ac86:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    ac88:	3501      	adds	r5, #1
						sign = 0;
    ac8a:	461e      	mov	r6, r3
					pad = '0';
    ac8c:	2330      	movs	r3, #48	; 0x30
    ac8e:	e056      	b.n	ad3e <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    ac90:	071e      	lsls	r6, r3, #28
    ac92:	d40f      	bmi.n	acb4 <cbvprintf+0x658>
				sign = ' ';
    ac94:	f013 0610 	ands.w	r6, r3, #16
    ac98:	bf18      	it	ne
    ac9a:	2620      	movne	r6, #32
			if (value->sint < 0) {
    ac9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    aca0:	2b00      	cmp	r3, #0
    aca2:	f6bf af5f 	bge.w	ab64 <cbvprintf+0x508>
				value->uint = (uint_value_type)-value->sint;
    aca6:	4252      	negs	r2, r2
    aca8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    acac:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    acae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    acb2:	e757      	b.n	ab64 <cbvprintf+0x508>
				sign = '+';
    acb4:	262b      	movs	r6, #43	; 0x2b
    acb6:	e7f1      	b.n	ac9c <cbvprintf+0x640>
		switch (conv->specifier) {
    acb8:	2600      	movs	r6, #0
    acba:	e753      	b.n	ab64 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    acbc:	980a      	ldr	r0, [sp, #40]	; 0x28
    acbe:	b340      	cbz	r0, ad12 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    acc0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    acc4:	9300      	str	r3, [sp, #0]
    acc6:	2100      	movs	r1, #0
    acc8:	ab04      	add	r3, sp, #16
    acca:	aa0c      	add	r2, sp, #48	; 0x30
    accc:	f00f f897 	bl	19dfe <encode_uint>
				conv->altform_0c = true;
    acd0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    acd4:	4682      	mov	sl, r0
				conv->altform_0c = true;
    acd6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    acda:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    acde:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    ace2:	2600      	movs	r6, #0
				conv->altform_0c = true;
    ace4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    ace8:	e746      	b.n	ab78 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    acea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    acec:	2907      	cmp	r1, #7
    acee:	f63f aee1 	bhi.w	aab4 <cbvprintf+0x458>
    acf2:	e8df f001 	tbb	[pc, r1]
    acf6:	040c      	.short	0x040c
    acf8:	08080c06 	.word	0x08080c06
    acfc:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    acfe:	701d      	strb	r5, [r3, #0]
		break;
    ad00:	e6d8      	b.n	aab4 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    ad02:	801d      	strh	r5, [r3, #0]
		break;
    ad04:	e6d6      	b.n	aab4 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    ad06:	17ea      	asrs	r2, r5, #31
    ad08:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    ad0c:	e6d2      	b.n	aab4 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    ad0e:	601d      	str	r5, [r3, #0]
		break;
    ad10:	e6d0      	b.n	aab4 <cbvprintf+0x458>
			bps = "(nil)";
    ad12:	f8df a0c8 	ldr.w	sl, [pc, #200]	; addc <cbvprintf+0x780>
    ad16:	4606      	mov	r6, r0
			bpe = bps + 5;
    ad18:	f10a 0805 	add.w	r8, sl, #5
    ad1c:	e78e      	b.n	ac3c <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    ad1e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    ad20:	bf48      	it	mi
    ad22:	3301      	addmi	r3, #1
    ad24:	e793      	b.n	ac4e <cbvprintf+0x5f2>
					OUTC(pad);
    ad26:	4618      	mov	r0, r3
    ad28:	9303      	str	r3, [sp, #12]
    ad2a:	4659      	mov	r1, fp
    ad2c:	9b02      	ldr	r3, [sp, #8]
    ad2e:	4798      	blx	r3
    ad30:	2800      	cmp	r0, #0
    ad32:	9b03      	ldr	r3, [sp, #12]
    ad34:	da04      	bge.n	ad40 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    ad36:	b011      	add	sp, #68	; 0x44
    ad38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    ad3c:	2320      	movs	r3, #32
    ad3e:	444d      	add	r5, r9
    ad40:	464a      	mov	r2, r9
				while (width-- > 0) {
    ad42:	2a00      	cmp	r2, #0
    ad44:	eba5 0109 	sub.w	r1, r5, r9
    ad48:	f109 39ff 	add.w	r9, r9, #4294967295
    ad4c:	dceb      	bgt.n	ad26 <cbvprintf+0x6ca>
    ad4e:	460d      	mov	r5, r1
		if (sign != 0) {
    ad50:	b136      	cbz	r6, ad60 <cbvprintf+0x704>
			OUTC(sign);
    ad52:	4659      	mov	r1, fp
    ad54:	4630      	mov	r0, r6
    ad56:	9b02      	ldr	r3, [sp, #8]
    ad58:	4798      	blx	r3
    ad5a:	2800      	cmp	r0, #0
    ad5c:	dbeb      	blt.n	ad36 <cbvprintf+0x6da>
    ad5e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    ad60:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    ad64:	06d9      	lsls	r1, r3, #27
    ad66:	d401      	bmi.n	ad6c <cbvprintf+0x710>
    ad68:	071a      	lsls	r2, r3, #28
    ad6a:	d506      	bpl.n	ad7a <cbvprintf+0x71e>
				OUTC('0');
    ad6c:	4659      	mov	r1, fp
    ad6e:	2030      	movs	r0, #48	; 0x30
    ad70:	9b02      	ldr	r3, [sp, #8]
    ad72:	4798      	blx	r3
    ad74:	2800      	cmp	r0, #0
    ad76:	dbde      	blt.n	ad36 <cbvprintf+0x6da>
    ad78:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    ad7a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    ad7e:	06db      	lsls	r3, r3, #27
    ad80:	d507      	bpl.n	ad92 <cbvprintf+0x736>
				OUTC(conv->specifier);
    ad82:	4659      	mov	r1, fp
    ad84:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ad88:	9b02      	ldr	r3, [sp, #8]
    ad8a:	4798      	blx	r3
    ad8c:	2800      	cmp	r0, #0
    ad8e:	dbd2      	blt.n	ad36 <cbvprintf+0x6da>
    ad90:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    ad92:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    ad94:	442e      	add	r6, r5
    ad96:	1b73      	subs	r3, r6, r5
    ad98:	2b00      	cmp	r3, #0
    ad9a:	dc16      	bgt.n	adca <cbvprintf+0x76e>
			OUTS(bps, bpe);
    ad9c:	4643      	mov	r3, r8
    ad9e:	4652      	mov	r2, sl
    ada0:	4659      	mov	r1, fp
    ada2:	9802      	ldr	r0, [sp, #8]
    ada4:	f00f f871 	bl	19e8a <outs>
    ada8:	2800      	cmp	r0, #0
    adaa:	dbc4      	blt.n	ad36 <cbvprintf+0x6da>
    adac:	4405      	add	r5, r0
		while (width > 0) {
    adae:	44a9      	add	r9, r5
    adb0:	eba9 0305 	sub.w	r3, r9, r5
    adb4:	2b00      	cmp	r3, #0
    adb6:	f77f ae7d 	ble.w	aab4 <cbvprintf+0x458>
			OUTC(' ');
    adba:	4659      	mov	r1, fp
    adbc:	2020      	movs	r0, #32
    adbe:	9b02      	ldr	r3, [sp, #8]
    adc0:	4798      	blx	r3
    adc2:	2800      	cmp	r0, #0
    adc4:	dbb7      	blt.n	ad36 <cbvprintf+0x6da>
    adc6:	3501      	adds	r5, #1
			--width;
    adc8:	e7f2      	b.n	adb0 <cbvprintf+0x754>
				OUTC('0');
    adca:	4659      	mov	r1, fp
    adcc:	2030      	movs	r0, #48	; 0x30
    adce:	9b02      	ldr	r3, [sp, #8]
    add0:	4798      	blx	r3
    add2:	2800      	cmp	r0, #0
    add4:	dbaf      	blt.n	ad36 <cbvprintf+0x6da>
    add6:	3501      	adds	r5, #1
    add8:	e7dd      	b.n	ad96 <cbvprintf+0x73a>
    adda:	bf00      	nop
    addc:	0001eb04 	.word	0x0001eb04

0000ade0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    ade0:	b148      	cbz	r0, adf6 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    ade2:	4b05      	ldr	r3, [pc, #20]	; (adf8 <arch_busy_wait+0x18>)
    ade4:	681a      	ldr	r2, [r3, #0]
    ade6:	4b05      	ldr	r3, [pc, #20]	; (adfc <arch_busy_wait+0x1c>)
    ade8:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    adec:	4b04      	ldr	r3, [pc, #16]	; (ae00 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    adee:	4350      	muls	r0, r2
    adf0:	f043 0301 	orr.w	r3, r3, #1
    adf4:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    adf6:	4770      	bx	lr
    adf8:	20008528 	.word	0x20008528
    adfc:	000f4240 	.word	0x000f4240
    ae00:	0001d860 	.word	0x0001d860

0000ae04 <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    ae04:	4b01      	ldr	r3, [pc, #4]	; (ae0c <virtio_set_status+0x8>)
    ae06:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    ae08:	4770      	bx	lr
    ae0a:	bf00      	nop
    ae0c:	20070000 	.word	0x20070000

0000ae10 <init_status_flag>:
    ae10:	2000      	movs	r0, #0
    ae12:	4b01      	ldr	r3, [pc, #4]	; (ae18 <init_status_flag+0x8>)
    ae14:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    ae16:	4770      	bx	lr
    ae18:	20070000 	.word	0x20070000

0000ae1c <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    ae1c:	4b01      	ldr	r3, [pc, #4]	; (ae24 <ipm_callback_process+0x8>)
    ae1e:	6818      	ldr	r0, [r3, #0]
    ae20:	f011 bf5f 	b.w	1cce2 <virtqueue_notification>
    ae24:	2000a4a8 	.word	0x2000a4a8

0000ae28 <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    ae28:	4b0a      	ldr	r3, [pc, #40]	; (ae54 <virtio_notify+0x2c>)
{
    ae2a:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    ae2c:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    ae2e:	2300      	movs	r3, #0
    ae30:	6882      	ldr	r2, [r0, #8]
    ae32:	9300      	str	r3, [sp, #0]
    ae34:	6814      	ldr	r4, [r2, #0]
    ae36:	4619      	mov	r1, r3
    ae38:	461a      	mov	r2, r3
    ae3a:	47a0      	blx	r4
	if (status != 0) {
    ae3c:	4602      	mov	r2, r0
    ae3e:	b130      	cbz	r0, ae4e <virtio_notify+0x26>
		LOG_ERR("ipm_send failed to notify: %d", status);
    ae40:	2145      	movs	r1, #69	; 0x45
    ae42:	4805      	ldr	r0, [pc, #20]	; (ae58 <virtio_notify+0x30>)
}
    ae44:	b002      	add	sp, #8
    ae46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    ae4a:	f00e bd8e 	b.w	1996a <printk>
}
    ae4e:	b002      	add	sp, #8
    ae50:	bd10      	pop	{r4, pc}
    ae52:	bf00      	nop
    ae54:	2000a498 	.word	0x2000a498
    ae58:	0001eb36 	.word	0x0001eb36

0000ae5c <ipm_callback>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ae5c:	4907      	ldr	r1, [pc, #28]	; (ae7c <ipm_callback+0x20>)
    ae5e:	e8d1 3fef 	ldaex	r3, [r1]
    ae62:	f043 0201 	orr.w	r2, r3, #1
    ae66:	e8c1 2fe0 	stlex	r0, r2, [r1]
    ae6a:	2800      	cmp	r0, #0
    ae6c:	d1f7      	bne.n	ae5e <ipm_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ae6e:	07db      	lsls	r3, r3, #31
    ae70:	d403      	bmi.n	ae7a <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    ae72:	4803      	ldr	r0, [pc, #12]	; (ae80 <ipm_callback+0x24>)
    ae74:	3908      	subs	r1, #8
    ae76:	f012 b8f5 	b.w	1d064 <k_queue_append>
}
    ae7a:	4770      	bx	lr
    ae7c:	2000a4a4 	.word	0x2000a4a4
    ae80:	20008820 	.word	0x20008820

0000ae84 <rpmsg_backend_init>:
{
    ae84:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    ae86:	4b47      	ldr	r3, [pc, #284]	; (afa4 <rpmsg_backend_init+0x120>)
{
    ae88:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    ae8a:	ac02      	add	r4, sp, #8
{
    ae8c:	4606      	mov	r6, r0
    ae8e:	460d      	mov	r5, r1
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    ae90:	e893 0003 	ldmia.w	r3, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    ae94:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    ae98:	e884 0003 	stmia.w	r4, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    ae9c:	f04f 33ff 	mov.w	r3, #4294967295
    aea0:	4941      	ldr	r1, [pc, #260]	; (afa8 <rpmsg_backend_init+0x124>)
    aea2:	4842      	ldr	r0, [pc, #264]	; (afac <rpmsg_backend_init+0x128>)
    aea4:	f00d fdc8 	bl	18a38 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    aea8:	4941      	ldr	r1, [pc, #260]	; (afb0 <rpmsg_backend_init+0x12c>)
    aeaa:	4842      	ldr	r0, [pc, #264]	; (afb4 <rpmsg_backend_init+0x130>)
    aeac:	f012 f94c 	bl	1d148 <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    aeb0:	2200      	movs	r2, #0
    aeb2:	4b41      	ldr	r3, [pc, #260]	; (afb8 <rpmsg_backend_init+0x134>)
    aeb4:	4941      	ldr	r1, [pc, #260]	; (afbc <rpmsg_backend_init+0x138>)
	err = metal_init(&metal_params);
    aeb6:	4620      	mov	r0, r4
    aeb8:	e9c3 1201 	strd	r1, r2, [r3, #4]
    aebc:	601a      	str	r2, [r3, #0]
    aebe:	f00b fa91 	bl	163e4 <metal_init>
	if (err) {
    aec2:	4604      	mov	r4, r0
    aec4:	b138      	cbz	r0, aed6 <rpmsg_backend_init+0x52>
		LOG_ERR("metal_init: failed - error code %d", err);
    aec6:	2145      	movs	r1, #69	; 0x45
    aec8:	4602      	mov	r2, r0
    aeca:	483d      	ldr	r0, [pc, #244]	; (afc0 <rpmsg_backend_init+0x13c>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    aecc:	f00e fd4d 	bl	1996a <printk>
}
    aed0:	4620      	mov	r0, r4
    aed2:	b005      	add	sp, #20
    aed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    aed6:	483b      	ldr	r0, [pc, #236]	; (afc4 <rpmsg_backend_init+0x140>)
    aed8:	f00b fa64 	bl	163a4 <metal_register_generic_device>
	if (err) {
    aedc:	4604      	mov	r4, r0
    aede:	b118      	cbz	r0, aee8 <rpmsg_backend_init+0x64>
		LOG_ERR("Couldn't register shared memory device: %d", err);
    aee0:	4602      	mov	r2, r0
    aee2:	2145      	movs	r1, #69	; 0x45
    aee4:	4838      	ldr	r0, [pc, #224]	; (afc8 <rpmsg_backend_init+0x144>)
    aee6:	e7f1      	b.n	aecc <rpmsg_backend_init+0x48>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    aee8:	4938      	ldr	r1, [pc, #224]	; (afcc <rpmsg_backend_init+0x148>)
    aeea:	4839      	ldr	r0, [pc, #228]	; (afd0 <rpmsg_backend_init+0x14c>)
    aeec:	aa01      	add	r2, sp, #4
    aeee:	f011 fc78 	bl	1c7e2 <metal_device_open>
	if (err) {
    aef2:	4604      	mov	r4, r0
    aef4:	b118      	cbz	r0, aefe <rpmsg_backend_init+0x7a>
		LOG_ERR("metal_device_open failed: %d", err);
    aef6:	4602      	mov	r2, r0
    aef8:	2145      	movs	r1, #69	; 0x45
    aefa:	4836      	ldr	r0, [pc, #216]	; (afd4 <rpmsg_backend_init+0x150>)
    aefc:	e7e6      	b.n	aecc <rpmsg_backend_init+0x48>
	*io = metal_device_io_region(device, 0);
    aefe:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    af00:	689a      	ldr	r2, [r3, #8]
    af02:	b92a      	cbnz	r2, af10 <rpmsg_backend_init+0x8c>
    af04:	6030      	str	r0, [r6, #0]
		LOG_ERR("metal_device_io_region failed to get region");
    af06:	2145      	movs	r1, #69	; 0x45
    af08:	4833      	ldr	r0, [pc, #204]	; (afd8 <rpmsg_backend_init+0x154>)
    af0a:	f00e fd2e 	bl	1996a <printk>
		return err;
    af0e:	e7df      	b.n	aed0 <rpmsg_backend_init+0x4c>
    af10:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    af12:	6033      	str	r3, [r6, #0]
	if (!*io) {
    af14:	2b00      	cmp	r3, #0
    af16:	d0f6      	beq.n	af06 <rpmsg_backend_init+0x82>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    af18:	4830      	ldr	r0, [pc, #192]	; (afdc <rpmsg_backend_init+0x158>)
    af1a:	f00b fd7b 	bl	16a14 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    af1e:	4f30      	ldr	r7, [pc, #192]	; (afe0 <rpmsg_backend_init+0x15c>)
    af20:	6038      	str	r0, [r7, #0]
    af22:	4830      	ldr	r0, [pc, #192]	; (afe4 <rpmsg_backend_init+0x160>)
    af24:	f00b fd76 	bl	16a14 <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    af28:	683a      	ldr	r2, [r7, #0]
    af2a:	b932      	cbnz	r2, af3a <rpmsg_backend_init+0xb6>
		LOG_ERR("Could not get TX IPM device handle");
    af2c:	2145      	movs	r1, #69	; 0x45
    af2e:	482e      	ldr	r0, [pc, #184]	; (afe8 <rpmsg_backend_init+0x164>)
		LOG_ERR("Could not get RX IPM device handle");
    af30:	f00e fd1b 	bl	1996a <printk>
		return -ENODEV;
    af34:	f06f 0412 	mvn.w	r4, #18
    af38:	e7ca      	b.n	aed0 <rpmsg_backend_init+0x4c>
	if (!ipm_rx_handle) {
    af3a:	b910      	cbnz	r0, af42 <rpmsg_backend_init+0xbe>
		LOG_ERR("Could not get RX IPM device handle");
    af3c:	2145      	movs	r1, #69	; 0x45
    af3e:	482b      	ldr	r0, [pc, #172]	; (afec <rpmsg_backend_init+0x168>)
    af40:	e7f6      	b.n	af30 <rpmsg_backend_init+0xac>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    af42:	6883      	ldr	r3, [r0, #8]
    af44:	4622      	mov	r2, r4
    af46:	685b      	ldr	r3, [r3, #4]
    af48:	4929      	ldr	r1, [pc, #164]	; (aff0 <rpmsg_backend_init+0x16c>)
    af4a:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    af4c:	f00e fff3 	bl	19f36 <virtqueue_allocate.constprop.0>
    af50:	4f28      	ldr	r7, [pc, #160]	; (aff4 <rpmsg_backend_init+0x170>)
    af52:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    af54:	b930      	cbnz	r0, af64 <rpmsg_backend_init+0xe0>
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    af56:	2145      	movs	r1, #69	; 0x45
    af58:	4827      	ldr	r0, [pc, #156]	; (aff8 <rpmsg_backend_init+0x174>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    af5a:	f00e fd06 	bl	1996a <printk>
		return -ENOMEM;
    af5e:	f06f 040b 	mvn.w	r4, #11
    af62:	e7b5      	b.n	aed0 <rpmsg_backend_init+0x4c>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    af64:	f00e ffe7 	bl	19f36 <virtqueue_allocate.constprop.0>
    af68:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    af6a:	b910      	cbnz	r0, af72 <rpmsg_backend_init+0xee>
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    af6c:	2145      	movs	r1, #69	; 0x45
    af6e:	4823      	ldr	r0, [pc, #140]	; (affc <rpmsg_backend_init+0x178>)
    af70:	e7f3      	b.n	af5a <rpmsg_backend_init+0xd6>
	rvrings[0].io = *io;
    af72:	6832      	ldr	r2, [r6, #0]
    af74:	4b22      	ldr	r3, [pc, #136]	; (b000 <rpmsg_backend_init+0x17c>)
	rvrings[0].info.num_descs = VRING_SIZE;
    af76:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    af78:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    af7a:	4a22      	ldr	r2, [pc, #136]	; (b004 <rpmsg_backend_init+0x180>)
	rvrings[0].vq = vq[0];
    af7c:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    af7e:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    af80:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    af82:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    af84:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    af86:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    af88:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    af8a:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    af8c:	4e1e      	ldr	r6, [pc, #120]	; (b008 <rpmsg_backend_init+0x184>)
	vdev->vrings_num = VRING_COUNT;
    af8e:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    af90:	4a1e      	ldr	r2, [pc, #120]	; (b00c <rpmsg_backend_init+0x188>)
	rvrings[1].info.num_descs = VRING_SIZE;
    af92:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    af94:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    af96:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    af98:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    af9a:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    af9c:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    af9e:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    afa0:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    afa2:	e795      	b.n	aed0 <rpmsg_backend_init+0x4c>
    afa4:	0001d7d8 	.word	0x0001d7d8
    afa8:	2000c610 	.word	0x2000c610
    afac:	20008820 	.word	0x20008820
    afb0:	0001eb59 	.word	0x0001eb59
    afb4:	20008840 	.word	0x20008840
    afb8:	2000a49c 	.word	0x2000a49c
    afbc:	0000ae1d 	.word	0x0000ae1d
    afc0:	0001eb64 	.word	0x0001eb64
    afc4:	20008240 	.word	0x20008240
    afc8:	0001eb8c 	.word	0x0001eb8c
    afcc:	0001ebbc 	.word	0x0001ebbc
    afd0:	0001ebc6 	.word	0x0001ebc6
    afd4:	0001ebce 	.word	0x0001ebce
    afd8:	0001ebf0 	.word	0x0001ebf0
    afdc:	0001ec21 	.word	0x0001ec21
    afe0:	2000a498 	.word	0x2000a498
    afe4:	0001ec27 	.word	0x0001ec27
    afe8:	0001ec2d 	.word	0x0001ec2d
    afec:	0001ec55 	.word	0x0001ec55
    aff0:	0000ae5d 	.word	0x0000ae5d
    aff4:	2000a4a8 	.word	0x2000a4a8
    aff8:	0001ec7d 	.word	0x0001ec7d
    affc:	0001ecab 	.word	0x0001ecab
    b000:	20008210 	.word	0x20008210
    b004:	2007fc00 	.word	0x2007fc00
    b008:	2007f800 	.word	0x2007f800
    b00c:	0001d9ec 	.word	0x0001d9ec

0000b010 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    b010:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    b014:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    b016:	4e1b      	ldr	r6, [pc, #108]	; (b084 <ns_bind_cb+0x74>)
{
    b018:	4607      	mov	r7, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    b01a:	6831      	ldr	r1, [r6, #0]
    b01c:	4628      	mov	r0, r5
{
    b01e:	4690      	mov	r8, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    b020:	f00f feb5 	bl	1ad8e <strcmp>
    b024:	b168      	cbz	r0, b042 <ns_bind_cb+0x32>
    b026:	4628      	mov	r0, r5
    b028:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    b02a:	f00f feb0 	bl	1ad8e <strcmp>
    b02e:	b138      	cbz	r0, b040 <ns_bind_cb+0x30>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    b030:	462a      	mov	r2, r5
    b032:	2145      	movs	r1, #69	; 0x45
    b034:	4814      	ldr	r0, [pc, #80]	; (b088 <ns_bind_cb+0x78>)
}
    b036:	b004      	add	sp, #16
    b038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    b03c:	f00e bc95 	b.w	1996a <printk>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b040:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    b042:	244c      	movs	r4, #76	; 0x4c
    b044:	4344      	muls	r4, r0
    b046:	4b11      	ldr	r3, [pc, #68]	; (b08c <ns_bind_cb+0x7c>)
    b048:	f104 0008 	add.w	r0, r4, #8
    b04c:	9302      	str	r3, [sp, #8]
    b04e:	4434      	add	r4, r6
    b050:	6863      	ldr	r3, [r4, #4]
    b052:	462a      	mov	r2, r5
    b054:	e9cd 8300 	strd	r8, r3, [sp]
    b058:	4639      	mov	r1, r7
    b05a:	f04f 33ff 	mov.w	r3, #4294967295
    b05e:	4430      	add	r0, r6
    b060:	f00b fa8c 	bl	1657c <rpmsg_create_ept>
			if (err != 0) {
    b064:	4603      	mov	r3, r0
    b066:	b138      	cbz	r0, b078 <ns_bind_cb+0x68>
				LOG_ERR("Creating remote endpoint %s"
    b068:	462a      	mov	r2, r5
    b06a:	2145      	movs	r1, #69	; 0x45
    b06c:	4808      	ldr	r0, [pc, #32]	; (b090 <ns_bind_cb+0x80>)
}
    b06e:	b004      	add	sp, #16
    b070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    b074:	f00e bc79 	b.w	1996a <printk>
				endpoints[i].bound = true;
    b078:	2301      	movs	r3, #1
    b07a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    b07e:	b004      	add	sp, #16
    b080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b084:	2000a4b0 	.word	0x2000a4b0
    b088:	0001ece7 	.word	0x0001ece7
    b08c:	00019f51 	.word	0x00019f51
    b090:	0001ed16 	.word	0x0001ed16

0000b094 <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    b094:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    b096:	4d13      	ldr	r5, [pc, #76]	; (b0e4 <rpmsg_service_init+0x50>)
    b098:	4913      	ldr	r1, [pc, #76]	; (b0e8 <rpmsg_service_init+0x54>)
    b09a:	4628      	mov	r0, r5
    b09c:	f7ff fef2 	bl	ae84 <rpmsg_backend_init>
	if (err) {
    b0a0:	4604      	mov	r4, r0
    b0a2:	b138      	cbz	r0, b0b4 <rpmsg_service_init+0x20>
		LOG_ERR("RPMsg backend init failed with error %d", err);
    b0a4:	2145      	movs	r1, #69	; 0x45
    b0a6:	4602      	mov	r2, r0
    b0a8:	4810      	ldr	r0, [pc, #64]	; (b0ec <rpmsg_service_init+0x58>)
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b0aa:	f00e fc5e 	bl	1996a <printk>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    b0ae:	4620      	mov	r0, r4
    b0b0:	b003      	add	sp, #12
    b0b2:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    b0b4:	4c0e      	ldr	r4, [pc, #56]	; (b0f0 <rpmsg_service_init+0x5c>)
    b0b6:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    b0ba:	4620      	mov	r0, r4
    b0bc:	490d      	ldr	r1, [pc, #52]	; (b0f4 <rpmsg_service_init+0x60>)
    b0be:	f011 ff9a 	bl	1cff6 <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    b0c2:	9400      	str	r4, [sp, #0]
    b0c4:	682b      	ldr	r3, [r5, #0]
    b0c6:	4a0c      	ldr	r2, [pc, #48]	; (b0f8 <rpmsg_service_init+0x64>)
    b0c8:	4907      	ldr	r1, [pc, #28]	; (b0e8 <rpmsg_service_init+0x54>)
    b0ca:	480c      	ldr	r0, [pc, #48]	; (b0fc <rpmsg_service_init+0x68>)
    b0cc:	f00b fb82 	bl	167d4 <rpmsg_init_vdev>
	if (err) {
    b0d0:	4604      	mov	r4, r0
    b0d2:	b118      	cbz	r0, b0dc <rpmsg_service_init+0x48>
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b0d4:	4602      	mov	r2, r0
    b0d6:	2145      	movs	r1, #69	; 0x45
    b0d8:	4809      	ldr	r0, [pc, #36]	; (b100 <rpmsg_service_init+0x6c>)
    b0da:	e7e6      	b.n	b0aa <rpmsg_service_init+0x16>
	ep_crt_started = true;
    b0dc:	2201      	movs	r2, #1
    b0de:	4b09      	ldr	r3, [pc, #36]	; (b104 <rpmsg_service_init+0x70>)
    b0e0:	701a      	strb	r2, [r3, #0]
	return 0;
    b0e2:	e7e4      	b.n	b0ae <rpmsg_service_init+0x1a>
    b0e4:	2000a548 	.word	0x2000a548
    b0e8:	200088d0 	.word	0x200088d0
    b0ec:	0001ed4c 	.word	0x0001ed4c
    b0f0:	2000a5dc 	.word	0x2000a5dc
    b0f4:	20070400 	.word	0x20070400
    b0f8:	0000b011 	.word	0x0000b011
    b0fc:	2000a54c 	.word	0x2000a54c
    b100:	0001ed79 	.word	0x0001ed79
    b104:	2000c113 	.word	0x2000c113

0000b108 <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    b108:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    b10a:	4b0d      	ldr	r3, [pc, #52]	; (b140 <rpmsg_service_register_endpoint+0x38>)
{
    b10c:	4602      	mov	r2, r0
	if (ep_crt_started) {
    b10e:	781b      	ldrb	r3, [r3, #0]
    b110:	b993      	cbnz	r3, b138 <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    b112:	4c0c      	ldr	r4, [pc, #48]	; (b144 <rpmsg_service_register_endpoint+0x3c>)
    b114:	6820      	ldr	r0, [r4, #0]
    b116:	b148      	cbz	r0, b12c <rpmsg_service_register_endpoint+0x24>
    b118:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    b11a:	b133      	cbz	r3, b12a <rpmsg_service_register_endpoint+0x22>

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    b11c:	480a      	ldr	r0, [pc, #40]	; (b148 <rpmsg_service_register_endpoint+0x40>)
    b11e:	2145      	movs	r1, #69	; 0x45
    b120:	f00e fc23 	bl	1996a <printk>

	return -ENOMEM;
    b124:	f06f 000b 	mvn.w	r0, #11
}
    b128:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b12a:	2001      	movs	r0, #1
			endpoints[i].name = name;
    b12c:	234c      	movs	r3, #76	; 0x4c
    b12e:	4343      	muls	r3, r0
    b130:	18e5      	adds	r5, r4, r3
    b132:	50e2      	str	r2, [r4, r3]
			endpoints[i].cb = cb;
    b134:	6069      	str	r1, [r5, #4]
			return i;
    b136:	e7f7      	b.n	b128 <rpmsg_service_register_endpoint+0x20>
		return -EINPROGRESS;
    b138:	f06f 0043 	mvn.w	r0, #67	; 0x43
    b13c:	e7f4      	b.n	b128 <rpmsg_service_register_endpoint+0x20>
    b13e:	bf00      	nop
    b140:	2000c113 	.word	0x2000c113
    b144:	2000a4b0 	.word	0x2000a4b0
    b148:	0001ed98 	.word	0x0001ed98

0000b14c <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    b14c:	224c      	movs	r2, #76	; 0x4c
    b14e:	4b03      	ldr	r3, [pc, #12]	; (b15c <rpmsg_service_endpoint_is_bound+0x10>)
    b150:	fb02 3300 	mla	r3, r2, r0, r3
    b154:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    b158:	4770      	bx	lr
    b15a:	bf00      	nop
    b15c:	2000a4b0 	.word	0x2000a4b0

0000b160 <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    b160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    b162:	244c      	movs	r4, #76	; 0x4c
    b164:	460b      	mov	r3, r1
    b166:	2101      	movs	r1, #1
    b168:	4344      	muls	r4, r0
    b16a:	e9cd 2100 	strd	r2, r1, [sp]
    b16e:	4d05      	ldr	r5, [pc, #20]	; (b184 <rpmsg_service_send+0x24>)
    b170:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    b172:	3408      	adds	r4, #8
    b174:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    b178:	1928      	adds	r0, r5, r4
    b17a:	f00b f9ed 	bl	16558 <rpmsg_send_offchannel_raw>
}
    b17e:	b003      	add	sp, #12
    b180:	bd30      	pop	{r4, r5, pc}
    b182:	bf00      	nop
    b184:	2000a4b0 	.word	0x2000a4b0

0000b188 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    b188:	4b10      	ldr	r3, [pc, #64]	; (b1cc <settings_save_one+0x44>)
{
    b18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    b18e:	681c      	ldr	r4, [r3, #0]
{
    b190:	4605      	mov	r5, r0
    b192:	460e      	mov	r6, r1
    b194:	4617      	mov	r7, r2
	if (!cs) {
    b196:	b1ac      	cbz	r4, b1c4 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    b198:	f04f 32ff 	mov.w	r2, #4294967295
    b19c:	f04f 33ff 	mov.w	r3, #4294967295
    b1a0:	480b      	ldr	r0, [pc, #44]	; (b1d0 <settings_save_one+0x48>)
    b1a2:	f00b ff59 	bl	17058 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    b1a6:	6863      	ldr	r3, [r4, #4]
    b1a8:	4632      	mov	r2, r6
    b1aa:	f8d3 8008 	ldr.w	r8, [r3, #8]
    b1ae:	4629      	mov	r1, r5
    b1b0:	463b      	mov	r3, r7
    b1b2:	4620      	mov	r0, r4
    b1b4:	47c0      	blx	r8
    b1b6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    b1b8:	4805      	ldr	r0, [pc, #20]	; (b1d0 <settings_save_one+0x48>)
    b1ba:	f00c f819 	bl	171f0 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    b1be:	4620      	mov	r0, r4
    b1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    b1c4:	f06f 0401 	mvn.w	r4, #1
    b1c8:	e7f9      	b.n	b1be <settings_save_one+0x36>
    b1ca:	bf00      	nop
    b1cc:	2000a5f0 	.word	0x2000a5f0
    b1d0:	20008680 	.word	0x20008680

0000b1d4 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    b1d4:	2300      	movs	r3, #0
{
    b1d6:	b530      	push	{r4, r5, lr}
    b1d8:	b085      	sub	sp, #20
    b1da:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    b1dc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    b1e0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    b1e2:	f04f 33ff 	mov.w	r3, #4294967295
    b1e6:	f04f 32ff 	mov.w	r2, #4294967295
    b1ea:	480b      	ldr	r0, [pc, #44]	; (b218 <settings_load_subtree+0x44>)
    b1ec:	f00b ff34 	bl	17058 <z_impl_k_mutex_lock>
	return list->head;
    b1f0:	4b0a      	ldr	r3, [pc, #40]	; (b21c <settings_load_subtree+0x48>)
    b1f2:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    b1f4:	b134      	cbz	r4, b204 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    b1f6:	6863      	ldr	r3, [r4, #4]
    b1f8:	4620      	mov	r0, r4
    b1fa:	681b      	ldr	r3, [r3, #0]
    b1fc:	a901      	add	r1, sp, #4
    b1fe:	4798      	blx	r3
	return node->next;
    b200:	6824      	ldr	r4, [r4, #0]
    b202:	e7f7      	b.n	b1f4 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    b204:	4628      	mov	r0, r5
    b206:	f000 f83b 	bl	b280 <settings_commit_subtree>
    b20a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    b20c:	4802      	ldr	r0, [pc, #8]	; (b218 <settings_load_subtree+0x44>)
    b20e:	f00b ffef 	bl	171f0 <z_impl_k_mutex_unlock>
}
    b212:	4620      	mov	r0, r4
    b214:	b005      	add	sp, #20
    b216:	bd30      	pop	{r4, r5, pc}
    b218:	20008680 	.word	0x20008680
    b21c:	2000a5e8 	.word	0x2000a5e8

0000b220 <settings_load_subtree_direct>:
{
    b220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    b222:	e9cd 0101 	strd	r0, r1, [sp, #4]
    b226:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    b228:	f04f 33ff 	mov.w	r3, #4294967295
    b22c:	f04f 32ff 	mov.w	r2, #4294967295
    b230:	4809      	ldr	r0, [pc, #36]	; (b258 <settings_load_subtree_direct+0x38>)
    b232:	f00b ff11 	bl	17058 <z_impl_k_mutex_lock>
	return list->head;
    b236:	4b09      	ldr	r3, [pc, #36]	; (b25c <settings_load_subtree_direct+0x3c>)
    b238:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    b23a:	b134      	cbz	r4, b24a <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    b23c:	6863      	ldr	r3, [r4, #4]
    b23e:	4620      	mov	r0, r4
    b240:	681b      	ldr	r3, [r3, #0]
    b242:	a901      	add	r1, sp, #4
    b244:	4798      	blx	r3
	return node->next;
    b246:	6824      	ldr	r4, [r4, #0]
    b248:	e7f7      	b.n	b23a <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    b24a:	4803      	ldr	r0, [pc, #12]	; (b258 <settings_load_subtree_direct+0x38>)
    b24c:	f00b ffd0 	bl	171f0 <z_impl_k_mutex_unlock>
}
    b250:	2000      	movs	r0, #0
    b252:	b004      	add	sp, #16
    b254:	bd10      	pop	{r4, pc}
    b256:	bf00      	nop
    b258:	20008680 	.word	0x20008680
    b25c:	2000a5e8 	.word	0x2000a5e8

0000b260 <settings_store_init>:
	list->head = NULL;
    b260:	2200      	movs	r2, #0
    b262:	4b02      	ldr	r3, [pc, #8]	; (b26c <settings_store_init+0xc>)
	list->tail = NULL;
    b264:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    b268:	4770      	bx	lr
    b26a:	bf00      	nop
    b26c:	2000a5e8 	.word	0x2000a5e8

0000b270 <settings_init>:
	list->head = NULL;
    b270:	2200      	movs	r2, #0
    b272:	4b02      	ldr	r3, [pc, #8]	; (b27c <settings_init+0xc>)
	list->tail = NULL;
    b274:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    b278:	f7ff bff2 	b.w	b260 <settings_store_init>
    b27c:	2000a5f4 	.word	0x2000a5f4

0000b280 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    b280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b284:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    b286:	2500      	movs	r5, #0

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    b288:	4c1f      	ldr	r4, [pc, #124]	; (b308 <settings_commit_subtree+0x88>)
    b28a:	4f20      	ldr	r7, [pc, #128]	; (b30c <settings_commit_subtree+0x8c>)
    b28c:	f8df 8080 	ldr.w	r8, [pc, #128]	; b310 <settings_commit_subtree+0x90>
    b290:	42bc      	cmp	r4, r7
    b292:	d908      	bls.n	b2a6 <settings_commit_subtree+0x26>
    b294:	4641      	mov	r1, r8
    b296:	481f      	ldr	r0, [pc, #124]	; (b314 <settings_commit_subtree+0x94>)
    b298:	22f4      	movs	r2, #244	; 0xf4
    b29a:	f00e fb66 	bl	1996a <printk>
    b29e:	21f4      	movs	r1, #244	; 0xf4
    b2a0:	4640      	mov	r0, r8
    b2a2:	f00e fe08 	bl	19eb6 <assert_post_action>
    b2a6:	42bc      	cmp	r4, r7
    b2a8:	d307      	bcc.n	b2ba <settings_commit_subtree+0x3a>
	return list->head;
    b2aa:	4b1b      	ldr	r3, [pc, #108]	; (b318 <settings_commit_subtree+0x98>)
    b2ac:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    b2ae:	b10c      	cbz	r4, b2b4 <settings_commit_subtree+0x34>
    b2b0:	3c14      	subs	r4, #20
    b2b2:	b9a4      	cbnz	r4, b2de <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    b2b4:	4628      	mov	r0, r5
    b2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b2ba:	b91e      	cbnz	r6, b2c4 <settings_commit_subtree+0x44>
		if (ch->h_commit) {
    b2bc:	68e3      	ldr	r3, [r4, #12]
    b2be:	b94b      	cbnz	r3, b2d4 <settings_commit_subtree+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    b2c0:	3414      	adds	r4, #20
    b2c2:	e7e5      	b.n	b290 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b2c4:	2200      	movs	r2, #0
    b2c6:	4631      	mov	r1, r6
    b2c8:	6820      	ldr	r0, [r4, #0]
    b2ca:	f00e fe4a 	bl	19f62 <settings_name_steq>
    b2ce:	2800      	cmp	r0, #0
    b2d0:	d1f4      	bne.n	b2bc <settings_commit_subtree+0x3c>
    b2d2:	e7f5      	b.n	b2c0 <settings_commit_subtree+0x40>
			rc2 = ch->h_commit();
    b2d4:	4798      	blx	r3
				rc = rc2;
    b2d6:	2d00      	cmp	r5, #0
    b2d8:	bf08      	it	eq
    b2da:	4605      	moveq	r5, r0
    b2dc:	e7f0      	b.n	b2c0 <settings_commit_subtree+0x40>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b2de:	b936      	cbnz	r6, b2ee <settings_commit_subtree+0x6e>
		if (ch->h_commit) {
    b2e0:	68e3      	ldr	r3, [r4, #12]
    b2e2:	b963      	cbnz	r3, b2fe <settings_commit_subtree+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b2e4:	f114 0f14 	cmn.w	r4, #20
    b2e8:	d0e4      	beq.n	b2b4 <settings_commit_subtree+0x34>
	return node->next;
    b2ea:	6964      	ldr	r4, [r4, #20]
    b2ec:	e7df      	b.n	b2ae <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b2ee:	2200      	movs	r2, #0
    b2f0:	4631      	mov	r1, r6
    b2f2:	6820      	ldr	r0, [r4, #0]
    b2f4:	f00e fe35 	bl	19f62 <settings_name_steq>
    b2f8:	2800      	cmp	r0, #0
    b2fa:	d1f1      	bne.n	b2e0 <settings_commit_subtree+0x60>
    b2fc:	e7f2      	b.n	b2e4 <settings_commit_subtree+0x64>
			rc2 = ch->h_commit();
    b2fe:	4798      	blx	r3
				rc = rc2;
    b300:	2d00      	cmp	r5, #0
    b302:	bf08      	it	eq
    b304:	4605      	moveq	r5, r0
    b306:	e7ed      	b.n	b2e4 <settings_commit_subtree+0x64>
    b308:	0001d67c 	.word	0x0001d67c
    b30c:	0001d6e0 	.word	0x0001d6e0
    b310:	0001edd1 	.word	0x0001edd1
    b314:	0001ea60 	.word	0x0001ea60
    b318:	2000a5f4 	.word	0x2000a5f4

0000b31c <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    b31c:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    b31e:	4c06      	ldr	r4, [pc, #24]	; (b338 <settings_subsys_init+0x1c>)
    b320:	7823      	ldrb	r3, [r4, #0]
    b322:	b93b      	cbnz	r3, b334 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    b324:	f7ff ffa4 	bl	b270 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    b328:	f00e fe54 	bl	19fd4 <settings_backend_init>

	if (!err) {
    b32c:	b908      	cbnz	r0, b332 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    b32e:	2301      	movs	r3, #1
    b330:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    b332:	bd10      	pop	{r4, pc}
		return 0;
    b334:	2000      	movs	r0, #0
    b336:	e7fc      	b.n	b332 <settings_subsys_init+0x16>
    b338:	2000c114 	.word	0x2000c114

0000b33c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    b33c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    b33e:	4c04      	ldr	r4, [pc, #16]	; (b350 <rtt_console_init+0x14>)
    b340:	4620      	mov	r0, r4
    b342:	f7fe fd93 	bl	9e6c <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    b346:	4620      	mov	r0, r4
    b348:	f002 fa3e 	bl	d7c8 <__stdout_hook_install>

	return 0;
}
    b34c:	2000      	movs	r0, #0
    b34e:	bd10      	pop	{r4, pc}
    b350:	0000b355 	.word	0x0000b355

0000b354 <rtt_console_out>:
{
    b354:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b358:	4604      	mov	r4, r0
	char c = (char)character;
    b35a:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
    b35c:	f8df 8058 	ldr.w	r8, [pc, #88]	; b3b8 <rtt_console_out+0x64>
    b360:	4e16      	ldr	r6, [pc, #88]	; (b3bc <rtt_console_out+0x68>)
    b362:	f88d 0007 	strb.w	r0, [sp, #7]
    b366:	f04f 33ff 	mov.w	r3, #4294967295
    b36a:	f04f 32ff 	mov.w	r2, #4294967295
    b36e:	4640      	mov	r0, r8
    b370:	f00b fe72 	bl	17058 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    b374:	2201      	movs	r2, #1
    b376:	f10d 0107 	add.w	r1, sp, #7
    b37a:	2000      	movs	r0, #0
    b37c:	f001 fac2 	bl	c904 <SEGGER_RTT_WriteNoLock>
    b380:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    b382:	4640      	mov	r0, r8
    b384:	f00b ff34 	bl	171f0 <z_impl_k_mutex_unlock>
		if (cnt) {
    b388:	b12f      	cbz	r7, b396 <rtt_console_out+0x42>
			host_present = true;
    b38a:	2301      	movs	r3, #1
    b38c:	7033      	strb	r3, [r6, #0]
}
    b38e:	4620      	mov	r0, r4
    b390:	b002      	add	sp, #8
    b392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    b396:	7833      	ldrb	r3, [r6, #0]
    b398:	2b00      	cmp	r3, #0
    b39a:	d0f8      	beq.n	b38e <rtt_console_out+0x3a>
			if (max_cnt) {
    b39c:	3d01      	subs	r5, #1
    b39e:	d008      	beq.n	b3b2 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    b3a0:	f011 fec8 	bl	1d134 <k_is_in_isr>
    b3a4:	2800      	cmp	r0, #0
    b3a6:	d1de      	bne.n	b366 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    b3a8:	2100      	movs	r1, #0
    b3aa:	2042      	movs	r0, #66	; 0x42
    b3ac:	f00d f8d2 	bl	18554 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    b3b0:	e7d9      	b.n	b366 <rtt_console_out+0x12>
				host_present = false;
    b3b2:	7035      	strb	r5, [r6, #0]
    b3b4:	e7eb      	b.n	b38e <rtt_console_out+0x3a>
    b3b6:	bf00      	nop
    b3b8:	20008658 	.word	0x20008658
    b3bc:	2000c115 	.word	0x2000c115

0000b3c0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    b3c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b3c2:	2340      	movs	r3, #64	; 0x40
{
    b3c4:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    b3c6:	490a      	ldr	r1, [pc, #40]	; (b3f0 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b3c8:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    b3ca:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b3cc:	1149      	asrs	r1, r1, #5
{
    b3ce:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b3d0:	4623      	mov	r3, r4
    b3d2:	4a08      	ldr	r2, [pc, #32]	; (b3f4 <onoff_start+0x34>)
    b3d4:	4808      	ldr	r0, [pc, #32]	; (b3f8 <onoff_start+0x38>)
    b3d6:	f00e fe12 	bl	19ffe <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    b3da:	1e01      	subs	r1, r0, #0
    b3dc:	da05      	bge.n	b3ea <onoff_start+0x2a>
		notify(mgr, err);
    b3de:	4628      	mov	r0, r5
    b3e0:	4623      	mov	r3, r4
	}
}
    b3e2:	b003      	add	sp, #12
    b3e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    b3e8:	4718      	bx	r3
}
    b3ea:	b003      	add	sp, #12
    b3ec:	bd30      	pop	{r4, r5, pc}
    b3ee:	bf00      	nop
    b3f0:	2000a60c 	.word	0x2000a60c
    b3f4:	0001a071 	.word	0x0001a071
    b3f8:	20008578 	.word	0x20008578

0000b3fc <get_status>:
{
    b3fc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b3fe:	b2cc      	uxtb	r4, r1
    b400:	2c03      	cmp	r4, #3
{
    b402:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b404:	d908      	bls.n	b418 <get_status+0x1c>
    b406:	4909      	ldr	r1, [pc, #36]	; (b42c <get_status+0x30>)
    b408:	4809      	ldr	r0, [pc, #36]	; (b430 <get_status+0x34>)
    b40a:	227e      	movs	r2, #126	; 0x7e
    b40c:	f00e faad 	bl	1996a <printk>
    b410:	217e      	movs	r1, #126	; 0x7e
    b412:	4806      	ldr	r0, [pc, #24]	; (b42c <get_status+0x30>)
    b414:	f00e fd4f 	bl	19eb6 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    b418:	230c      	movs	r3, #12
    b41a:	68e9      	ldr	r1, [r5, #12]
    b41c:	fb04 1403 	mla	r4, r4, r3, r1
    b420:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    b424:	f000 0007 	and.w	r0, r0, #7
    b428:	bd38      	pop	{r3, r4, r5, pc}
    b42a:	bf00      	nop
    b42c:	0001ee09 	.word	0x0001ee09
    b430:	0001ea60 	.word	0x0001ea60

0000b434 <stop>:
{
    b434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b436:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b438:	2c03      	cmp	r4, #3
{
    b43a:	4605      	mov	r5, r0
    b43c:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    b43e:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b440:	d90a      	bls.n	b458 <stop+0x24>
    b442:	4919      	ldr	r1, [pc, #100]	; (b4a8 <stop+0x74>)
    b444:	4819      	ldr	r0, [pc, #100]	; (b4ac <stop+0x78>)
    b446:	f240 1253 	movw	r2, #339	; 0x153
    b44a:	f00e fa8e 	bl	1996a <printk>
    b44e:	f240 1153 	movw	r1, #339	; 0x153
    b452:	4815      	ldr	r0, [pc, #84]	; (b4a8 <stop+0x74>)
    b454:	f00e fd2f 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
    b458:	f04f 0320 	mov.w	r3, #32
    b45c:	f3ef 8111 	mrs	r1, BASEPRI
    b460:	f383 8811 	msr	BASEPRI, r3
    b464:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b468:	220c      	movs	r2, #12
    b46a:	fb02 6304 	mla	r3, r2, r4, r6
    b46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    b472:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    b476:	d001      	beq.n	b47c <stop+0x48>
    b478:	429f      	cmp	r7, r3
    b47a:	d112      	bne.n	b4a2 <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b47c:	2301      	movs	r3, #1
	int err = 0;
    b47e:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b480:	fb02 6604 	mla	r6, r2, r4, r6
    b484:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
	__asm__ volatile(
    b488:	f381 8811 	msr	BASEPRI, r1
    b48c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    b490:	b930      	cbnz	r0, b4a0 <stop+0x6c>
	get_sub_config(dev, type)->stop();
    b492:	230c      	movs	r3, #12
    b494:	6869      	ldr	r1, [r5, #4]
    b496:	fb03 1404 	mla	r4, r3, r4, r1
    b49a:	6863      	ldr	r3, [r4, #4]
    b49c:	4798      	blx	r3
	return 0;
    b49e:	2000      	movs	r0, #0
}
    b4a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    b4a2:	f04f 30ff 	mov.w	r0, #4294967295
    b4a6:	e7ef      	b.n	b488 <stop+0x54>
    b4a8:	0001ee09 	.word	0x0001ee09
    b4ac:	0001ea60 	.word	0x0001ea60

0000b4b0 <onoff_stop>:
{
    b4b0:	b570      	push	{r4, r5, r6, lr}
    b4b2:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    b4b4:	4906      	ldr	r1, [pc, #24]	; (b4d0 <onoff_stop+0x20>)
{
    b4b6:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    b4b8:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    b4ba:	1149      	asrs	r1, r1, #5
    b4bc:	2240      	movs	r2, #64	; 0x40
    b4be:	4805      	ldr	r0, [pc, #20]	; (b4d4 <onoff_stop+0x24>)
    b4c0:	f7ff ffb8 	bl	b434 <stop>
	notify(mgr, res);
    b4c4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    b4c6:	4601      	mov	r1, r0
	notify(mgr, res);
    b4c8:	4620      	mov	r0, r4
}
    b4ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    b4ce:	4718      	bx	r3
    b4d0:	2000a60c 	.word	0x2000a60c
    b4d4:	20008578 	.word	0x20008578

0000b4d8 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    b4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    b4dc:	2200      	movs	r2, #0
    b4de:	2101      	movs	r1, #1
{
    b4e0:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    b4e2:	2005      	movs	r0, #5
    b4e4:	f001 fc2a 	bl	cd3c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    b4e8:	2005      	movs	r0, #5
    b4ea:	f001 fc09 	bl	cd00 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    b4ee:	4811      	ldr	r0, [pc, #68]	; (b534 <clk_init+0x5c>)
    b4f0:	f00a fc08 	bl	15d04 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    b4f4:	4b10      	ldr	r3, [pc, #64]	; (b538 <clk_init+0x60>)
    b4f6:	4298      	cmp	r0, r3
    b4f8:	d119      	bne.n	b52e <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    b4fa:	f00a fc23 	bl	15d44 <nrfx_clock_enable>
    b4fe:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b500:	f04f 080c 	mov.w	r8, #12
    b504:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    b506:	f8df 9034 	ldr.w	r9, [pc, #52]	; b53c <clk_init+0x64>
	struct nrf_clock_control_data *data = dev->data;
    b50a:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    b50c:	4649      	mov	r1, r9
    b50e:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    b512:	f00e fa85 	bl	19a20 <onoff_manager_init>
		if (err < 0) {
    b516:	2800      	cmp	r0, #0
    b518:	db07      	blt.n	b52a <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b51a:	fb08 5504 	mla	r5, r8, r4, r5
	for (enum clock_control_nrf_type i = 0;
    b51e:	3401      	adds	r4, #1
    b520:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b522:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    b526:	d1f0      	bne.n	b50a <clk_init+0x32>
	}

	return 0;
    b528:	2000      	movs	r0, #0
}
    b52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    b52e:	f06f 0004 	mvn.w	r0, #4
    b532:	e7fa      	b.n	b52a <clk_init+0x52>
    b534:	0000b579 	.word	0x0000b579
    b538:	0bad0000 	.word	0x0bad0000
    b53c:	0001da54 	.word	0x0001da54

0000b540 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    b540:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    b542:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    b544:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    b546:	434b      	muls	r3, r1
    b548:	4809      	ldr	r0, [pc, #36]	; (b570 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    b54a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    b54c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    b54e:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    b550:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    b554:	4418      	add	r0, r3
	sub_data->cb = NULL;
    b556:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    b55a:	f00e fd3d 	bl	19fd8 <set_on_state>
	if (callback) {
    b55e:	b12d      	cbz	r5, b56c <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    b560:	4632      	mov	r2, r6
    b562:	462b      	mov	r3, r5
}
    b564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    b568:	4802      	ldr	r0, [pc, #8]	; (b574 <clkstarted_handle.constprop.0+0x34>)
    b56a:	4718      	bx	r3
}
    b56c:	bd70      	pop	{r4, r5, r6, pc}
    b56e:	bf00      	nop
    b570:	2000a60c 	.word	0x2000a60c
    b574:	20008578 	.word	0x20008578

0000b578 <clock_event_handler>:
{
    b578:	b508      	push	{r3, lr}
    b57a:	2805      	cmp	r0, #5
    b57c:	d821      	bhi.n	b5c2 <clock_event_handler+0x4a>
    b57e:	e8df f000 	tbb	[pc, r0]
    b582:	1103      	.short	0x1103
    b584:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    b588:	4b13      	ldr	r3, [pc, #76]	; (b5d8 <clock_event_handler+0x60>)
    b58a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    b58e:	f010 0007 	ands.w	r0, r0, #7
    b592:	d11f      	bne.n	b5d4 <clock_event_handler+0x5c>
}
    b594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    b598:	f7ff bfd2 	b.w	b540 <clkstarted_handle.constprop.0>
    b59c:	2002      	movs	r0, #2
    b59e:	e7f9      	b.n	b594 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    b5a0:	2003      	movs	r0, #3
    b5a2:	e7f7      	b.n	b594 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    b5a4:	2001      	movs	r0, #1
    b5a6:	e7f5      	b.n	b594 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    b5a8:	490c      	ldr	r1, [pc, #48]	; (b5dc <clock_event_handler+0x64>)
    b5aa:	f240 2266 	movw	r2, #614	; 0x266
    b5ae:	480c      	ldr	r0, [pc, #48]	; (b5e0 <clock_event_handler+0x68>)
    b5b0:	f00e f9db 	bl	1996a <printk>
    b5b4:	f240 2166 	movw	r1, #614	; 0x266
}
    b5b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    b5bc:	4807      	ldr	r0, [pc, #28]	; (b5dc <clock_event_handler+0x64>)
    b5be:	f00e bc7a 	b.w	19eb6 <assert_post_action>
    b5c2:	4906      	ldr	r1, [pc, #24]	; (b5dc <clock_event_handler+0x64>)
    b5c4:	f240 226a 	movw	r2, #618	; 0x26a
    b5c8:	4805      	ldr	r0, [pc, #20]	; (b5e0 <clock_event_handler+0x68>)
    b5ca:	f00e f9ce 	bl	1996a <printk>
    b5ce:	f240 216a 	movw	r1, #618	; 0x26a
    b5d2:	e7f1      	b.n	b5b8 <clock_event_handler+0x40>
}
    b5d4:	bd08      	pop	{r3, pc}
    b5d6:	bf00      	nop
    b5d8:	2000a60c 	.word	0x2000a60c
    b5dc:	0001ee09 	.word	0x0001ee09
    b5e0:	0001ea60 	.word	0x0001ea60

0000b5e4 <generic_hfclk_start>:
{
    b5e4:	b508      	push	{r3, lr}
	__asm__ volatile(
    b5e6:	f04f 0320 	mov.w	r3, #32
    b5ea:	f3ef 8111 	mrs	r1, BASEPRI
    b5ee:	f383 8811 	msr	BASEPRI, r3
    b5f2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    b5f6:	4a11      	ldr	r2, [pc, #68]	; (b63c <generic_hfclk_start+0x58>)
    b5f8:	6813      	ldr	r3, [r2, #0]
    b5fa:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    b5fe:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    b602:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    b604:	d00b      	beq.n	b61e <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    b606:	4a0e      	ldr	r2, [pc, #56]	; (b640 <generic_hfclk_start+0x5c>)
    b608:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b60c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    b610:	f013 0301 	ands.w	r3, r3, #1
    b614:	d003      	beq.n	b61e <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    b616:	480b      	ldr	r0, [pc, #44]	; (b644 <generic_hfclk_start+0x60>)
    b618:	f00e fcde 	bl	19fd8 <set_on_state>
			already_started = true;
    b61c:	2301      	movs	r3, #1
	__asm__ volatile(
    b61e:	f381 8811 	msr	BASEPRI, r1
    b622:	f3bf 8f6f 	isb	sy
	if (already_started) {
    b626:	b123      	cbz	r3, b632 <generic_hfclk_start+0x4e>
}
    b628:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    b62c:	2000      	movs	r0, #0
    b62e:	f7ff bf87 	b.w	b540 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    b632:	2001      	movs	r0, #1
}
    b634:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b638:	f00a bba8 	b.w	15d8c <nrfx_clock_start>
    b63c:	2000a6bc 	.word	0x2000a6bc
    b640:	40005000 	.word	0x40005000
    b644:	2000a694 	.word	0x2000a694

0000b648 <api_blocking_start>:
{
    b648:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    b64a:	2200      	movs	r2, #0
    b64c:	2301      	movs	r3, #1
    b64e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    b652:	ab04      	add	r3, sp, #16
    b654:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    b658:	4a09      	ldr	r2, [pc, #36]	; (b680 <api_blocking_start+0x38>)
    b65a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    b65c:	f8cd d000 	str.w	sp, [sp]
    b660:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    b664:	f00e fcfd 	bl	1a062 <api_start>
	if (err < 0) {
    b668:	2800      	cmp	r0, #0
    b66a:	db05      	blt.n	b678 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    b66c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    b670:	2300      	movs	r3, #0
    b672:	4668      	mov	r0, sp
    b674:	f00c ffe0 	bl	18638 <z_impl_k_sem_take>
}
    b678:	b007      	add	sp, #28
    b67a:	f85d fb04 	ldr.w	pc, [sp], #4
    b67e:	bf00      	nop
    b680:	0001a0a7 	.word	0x0001a0a7

0000b684 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b684:	4b07      	ldr	r3, [pc, #28]	; (b6a4 <generic_hfclk_stop+0x20>)
    b686:	e8d3 2fef 	ldaex	r2, [r3]
    b68a:	f022 0102 	bic.w	r1, r2, #2
    b68e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    b692:	2800      	cmp	r0, #0
    b694:	d1f7      	bne.n	b686 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    b696:	07d3      	lsls	r3, r2, #31
    b698:	d402      	bmi.n	b6a0 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    b69a:	2001      	movs	r0, #1
    b69c:	f00a bbe0 	b.w	15e60 <nrfx_clock_stop>
}
    b6a0:	4770      	bx	lr
    b6a2:	bf00      	nop
    b6a4:	2000a6bc 	.word	0x2000a6bc

0000b6a8 <z_nrf_clock_control_lf_on>:
{
    b6a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b6ac:	2201      	movs	r2, #1
    b6ae:	4606      	mov	r6, r0
    b6b0:	4942      	ldr	r1, [pc, #264]	; (b7bc <z_nrf_clock_control_lf_on+0x114>)
    b6b2:	e8d1 3fef 	ldaex	r3, [r1]
    b6b6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    b6ba:	2800      	cmp	r0, #0
    b6bc:	d1f9      	bne.n	b6b2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    b6be:	b99b      	cbnz	r3, b6e8 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    b6c0:	493f      	ldr	r1, [pc, #252]	; (b7c0 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
    b6c2:	4840      	ldr	r0, [pc, #256]	; (b7c4 <z_nrf_clock_control_lf_on+0x11c>)
    b6c4:	604b      	str	r3, [r1, #4]
    b6c6:	60cb      	str	r3, [r1, #12]
    b6c8:	608a      	str	r2, [r1, #8]
    b6ca:	f7fe fdd7 	bl	a27c <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    b6ce:	2800      	cmp	r0, #0
    b6d0:	da0a      	bge.n	b6e8 <z_nrf_clock_control_lf_on+0x40>
    b6d2:	493d      	ldr	r1, [pc, #244]	; (b7c8 <z_nrf_clock_control_lf_on+0x120>)
    b6d4:	483d      	ldr	r0, [pc, #244]	; (b7cc <z_nrf_clock_control_lf_on+0x124>)
    b6d6:	f240 2226 	movw	r2, #550	; 0x226
    b6da:	f00e f946 	bl	1996a <printk>
    b6de:	f240 2126 	movw	r1, #550	; 0x226
    b6e2:	4839      	ldr	r0, [pc, #228]	; (b7c8 <z_nrf_clock_control_lf_on+0x120>)
    b6e4:	f00e fbe7 	bl	19eb6 <assert_post_action>
	switch (start_mode) {
    b6e8:	b386      	cbz	r6, b74c <z_nrf_clock_control_lf_on+0xa4>
    b6ea:	1e73      	subs	r3, r6, #1
    b6ec:	2b01      	cmp	r3, #1
    b6ee:	d852      	bhi.n	b796 <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    b6f0:	2e01      	cmp	r6, #1
    b6f2:	d106      	bne.n	b702 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    b6f4:	4b36      	ldr	r3, [pc, #216]	; (b7d0 <z_nrf_clock_control_lf_on+0x128>)
    b6f6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    b6fa:	f003 0303 	and.w	r3, r3, #3
    b6fe:	2b02      	cmp	r3, #2
    b700:	d024      	beq.n	b74c <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    b702:	f011 fd17 	bl	1d134 <k_is_in_isr>
    b706:	4604      	mov	r4, r0
    b708:	b918      	cbnz	r0, b712 <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
    b70a:	4b32      	ldr	r3, [pc, #200]	; (b7d4 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
    b70c:	781b      	ldrb	r3, [r3, #0]
    b70e:	2b00      	cmp	r3, #0
    b710:	d14e      	bne.n	b7b0 <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
    b712:	f04f 0320 	mov.w	r3, #32
    b716:	f3ef 8711 	mrs	r7, BASEPRI
    b71a:	f383 8811 	msr	BASEPRI, r3
    b71e:	f3bf 8f6f 	isb	sy
    b722:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b724:	4d2a      	ldr	r5, [pc, #168]	; (b7d0 <z_nrf_clock_control_lf_on+0x128>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b726:	f8df 80b0 	ldr.w	r8, [pc, #176]	; b7d8 <z_nrf_clock_control_lf_on+0x130>
    b72a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b72e:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    b732:	03d2      	lsls	r2, r2, #15
    b734:	d50c      	bpl.n	b750 <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    b736:	f003 0303 	and.w	r3, r3, #3
    b73a:	2b02      	cmp	r3, #2
    b73c:	d001      	beq.n	b742 <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    b73e:	2e01      	cmp	r6, #1
    b740:	d106      	bne.n	b750 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
    b742:	b324      	cbz	r4, b78e <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
    b744:	f387 8811 	msr	BASEPRI, r7
    b748:	f3bf 8f6f 	isb	sy
}
    b74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    b750:	b1c4      	cbz	r4, b784 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    b752:	4638      	mov	r0, r7
    b754:	f001 fb62 	bl	ce1c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    b758:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    b75c:	b2db      	uxtb	r3, r3
    b75e:	2b01      	cmp	r3, #1
    b760:	d1e3      	bne.n	b72a <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    b762:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    b766:	2a00      	cmp	r2, #0
    b768:	d0df      	beq.n	b72a <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b76a:	2200      	movs	r2, #0
    b76c:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    b770:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    b774:	2202      	movs	r2, #2
    b776:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    b77a:	2220      	movs	r2, #32
    b77c:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b780:	60ab      	str	r3, [r5, #8]
}
    b782:	e7d2      	b.n	b72a <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
    b784:	2100      	movs	r1, #0
    b786:	2021      	movs	r0, #33	; 0x21
    b788:	f00c fee4 	bl	18554 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    b78c:	e7e4      	b.n	b758 <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
    b78e:	2302      	movs	r3, #2
    b790:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    b794:	e7da      	b.n	b74c <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
    b796:	490c      	ldr	r1, [pc, #48]	; (b7c8 <z_nrf_clock_control_lf_on+0x120>)
    b798:	480c      	ldr	r0, [pc, #48]	; (b7cc <z_nrf_clock_control_lf_on+0x124>)
    b79a:	f44f 720e 	mov.w	r2, #568	; 0x238
    b79e:	f00e f8e4 	bl	1996a <printk>
}
    b7a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    b7a6:	f44f 710e 	mov.w	r1, #568	; 0x238
    b7aa:	4807      	ldr	r0, [pc, #28]	; (b7c8 <z_nrf_clock_control_lf_on+0x120>)
    b7ac:	f00e bb83 	b.w	19eb6 <assert_post_action>
    p_reg->INTENCLR = mask;
    b7b0:	2202      	movs	r2, #2
    b7b2:	4b07      	ldr	r3, [pc, #28]	; (b7d0 <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
    b7b4:	4607      	mov	r7, r0
    b7b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    b7ba:	e7b3      	b.n	b724 <z_nrf_clock_control_lf_on+0x7c>
    b7bc:	2000a6c0 	.word	0x2000a6c0
    b7c0:	2000a5fc 	.word	0x2000a5fc
    b7c4:	2000a62c 	.word	0x2000a62c
    b7c8:	0001ee09 	.word	0x0001ee09
    b7cc:	0001ea60 	.word	0x0001ea60
    b7d0:	40005000 	.word	0x40005000
    b7d4:	2000c60b 	.word	0x2000c60b
    b7d8:	e000e100 	.word	0xe000e100

0000b7dc <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    b7dc:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    b7de:	f000 f905 	bl	b9ec <bt_rpmsg_platform_init>
	if (err < 0) {
    b7e2:	1e04      	subs	r4, r0, #0
    b7e4:	da06      	bge.n	b7f4 <bt_rpmsg_init+0x18>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    b7e6:	4622      	mov	r2, r4
    b7e8:	2145      	movs	r1, #69	; 0x45
    b7ea:	4807      	ldr	r0, [pc, #28]	; (b808 <bt_rpmsg_init+0x2c>)
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    b7ec:	f00e f8bd 	bl	1996a <printk>
	}

	return err;
}
    b7f0:	4620      	mov	r0, r4
    b7f2:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    b7f4:	4805      	ldr	r0, [pc, #20]	; (b80c <bt_rpmsg_init+0x30>)
    b7f6:	f003 fd95 	bl	f324 <bt_hci_driver_register>
	if (err < 0) {
    b7fa:	1e04      	subs	r4, r0, #0
    b7fc:	daf8      	bge.n	b7f0 <bt_rpmsg_init+0x14>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    b7fe:	4622      	mov	r2, r4
    b800:	2145      	movs	r1, #69	; 0x45
    b802:	4803      	ldr	r0, [pc, #12]	; (b810 <bt_rpmsg_init+0x34>)
    b804:	e7f2      	b.n	b7ec <bt_rpmsg_init+0x10>
    b806:	bf00      	nop
    b808:	0001ee7b 	.word	0x0001ee7b
    b80c:	0001da60 	.word	0x0001da60
    b810:	0001eea7 	.word	0x0001eea7

0000b814 <bt_rpmsg_send>:
{
    b814:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    b816:	7d02      	ldrb	r2, [r0, #20]
    b818:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    b81a:	2a02      	cmp	r2, #2
    b81c:	d00c      	beq.n	b838 <bt_rpmsg_send+0x24>
    b81e:	2a04      	cmp	r2, #4
    b820:	d009      	beq.n	b836 <bt_rpmsg_send+0x22>
    b822:	b1b2      	cbz	r2, b852 <bt_rpmsg_send+0x3e>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    b824:	2145      	movs	r1, #69	; 0x45
    b826:	480c      	ldr	r0, [pc, #48]	; (b858 <bt_rpmsg_send+0x44>)
		BT_ERR("Failed to send (err %d)", err);
    b828:	f00e f89f 	bl	1996a <printk>
	net_buf_unref(buf);
    b82c:	4620      	mov	r0, r4
    b82e:	f009 f829 	bl	14884 <net_buf_unref>
}
    b832:	2000      	movs	r0, #0
    b834:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    b836:	2205      	movs	r2, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    b838:	4611      	mov	r1, r2
    b83a:	f104 0008 	add.w	r0, r4, #8
    b83e:	f010 fdb3 	bl	1c3a8 <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    b842:	4620      	mov	r0, r4
    b844:	f000 f8ee 	bl	ba24 <bt_rpmsg_platform_send>
	if (err < 0) {
    b848:	1e02      	subs	r2, r0, #0
    b84a:	daef      	bge.n	b82c <bt_rpmsg_send+0x18>
		BT_ERR("Failed to send (err %d)", err);
    b84c:	2145      	movs	r1, #69	; 0x45
    b84e:	4803      	ldr	r0, [pc, #12]	; (b85c <bt_rpmsg_send+0x48>)
    b850:	e7ea      	b.n	b828 <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
    b852:	2201      	movs	r2, #1
    b854:	e7f0      	b.n	b838 <bt_rpmsg_send+0x24>
    b856:	bf00      	nop
    b858:	0001eed6 	.word	0x0001eed6
    b85c:	0001eeeb 	.word	0x0001eeeb

0000b860 <bt_rpmsg_rx>:
{
    b860:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    b864:	4680      	mov	r8, r0
{
    b866:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    b868:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    b86c:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    b86e:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    b870:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    b874:	d009      	beq.n	b88a <bt_rpmsg_rx+0x2a>
    b876:	2805      	cmp	r0, #5
    b878:	d074      	beq.n	b964 <bt_rpmsg_rx+0x104>
    b87a:	2802      	cmp	r0, #2
    b87c:	f040 8099 	bne.w	b9b2 <bt_rpmsg_rx+0x152>
	if (remaining < sizeof(hdr)) {
    b880:	2b03      	cmp	r3, #3
    b882:	d84a      	bhi.n	b91a <bt_rpmsg_rx+0xba>
		BT_ERR("Not enough data for ACL header");
    b884:	2145      	movs	r1, #69	; 0x45
    b886:	484f      	ldr	r0, [pc, #316]	; (b9c4 <bt_rpmsg_rx+0x164>)
    b888:	e003      	b.n	b892 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    b88a:	2b01      	cmp	r3, #1
    b88c:	d806      	bhi.n	b89c <bt_rpmsg_rx+0x3c>
		BT_ERR("Not enough data for event header");
    b88e:	2145      	movs	r1, #69	; 0x45
    b890:	484d      	ldr	r0, [pc, #308]	; (b9c8 <bt_rpmsg_rx+0x168>)
}
    b892:	b002      	add	sp, #8
    b894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Not enough data for ACL header");
    b898:	f00e b867 	b.w	1996a <printk>
	switch (evt_type) {
    b89c:	7873      	ldrb	r3, [r6, #1]
    b89e:	2b3e      	cmp	r3, #62	; 0x3e
    b8a0:	d117      	bne.n	b8d2 <bt_rpmsg_rx+0x72>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    b8a2:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    b8a4:	2f02      	cmp	r7, #2
    b8a6:	d016      	beq.n	b8d6 <bt_rpmsg_rx+0x76>
    b8a8:	f1a7 030d 	sub.w	r3, r7, #13
    b8ac:	425f      	negs	r7, r3
    b8ae:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    b8b0:	2202      	movs	r2, #2
    b8b2:	4641      	mov	r1, r8
    b8b4:	a801      	add	r0, sp, #4
    b8b6:	f00f fa98 	bl	1adea <memcpy>
	if (remaining != hdr.len) {
    b8ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    b8be:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    b8c0:	429d      	cmp	r5, r3
    b8c2:	d00a      	beq.n	b8da <bt_rpmsg_rx+0x7a>
		BT_ERR("Event payload length is not correct");
    b8c4:	2145      	movs	r1, #69	; 0x45
    b8c6:	4841      	ldr	r0, [pc, #260]	; (b9cc <bt_rpmsg_rx+0x16c>)
			BT_ERR("No available event buffers!");
    b8c8:	f00e f84f 	bl	1996a <printk>
}
    b8cc:	b002      	add	sp, #8
    b8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    b8d2:	2700      	movs	r7, #0
    b8d4:	e7ec      	b.n	b8b0 <bt_rpmsg_rx+0x50>
			return true;
    b8d6:	2701      	movs	r7, #1
    b8d8:	e7ea      	b.n	b8b0 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    b8da:	2200      	movs	r2, #0
    b8dc:	2300      	movs	r3, #0
    b8de:	4639      	mov	r1, r7
    b8e0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b8e4:	f002 f948 	bl	db78 <bt_buf_get_evt>
	if (!buf) {
    b8e8:	4604      	mov	r4, r0
    b8ea:	b920      	cbnz	r0, b8f6 <bt_rpmsg_rx+0x96>
		if (discardable) {
    b8ec:	2f00      	cmp	r7, #0
    b8ee:	d1ed      	bne.n	b8cc <bt_rpmsg_rx+0x6c>
			BT_ERR("No available event buffers!");
    b8f0:	2145      	movs	r1, #69	; 0x45
    b8f2:	4837      	ldr	r0, [pc, #220]	; (b9d0 <bt_rpmsg_rx+0x170>)
    b8f4:	e7e8      	b.n	b8c8 <bt_rpmsg_rx+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b8f6:	f100 0708 	add.w	r7, r0, #8
    b8fa:	2202      	movs	r2, #2
    b8fc:	a901      	add	r1, sp, #4
    b8fe:	4638      	mov	r0, r7
    b900:	f010 fd75 	bl	1c3ee <net_buf_simple_add_mem>
    b904:	462a      	mov	r2, r5
    b906:	1cf1      	adds	r1, r6, #3
    b908:	4638      	mov	r0, r7
    b90a:	f010 fd70 	bl	1c3ee <net_buf_simple_add_mem>
		bt_recv(buf);
    b90e:	4620      	mov	r0, r4
}
    b910:	b002      	add	sp, #8
    b912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
    b916:	f003 bcdb 	b.w	f2d0 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    b91a:	2200      	movs	r2, #0
    b91c:	2300      	movs	r3, #0
    b91e:	2003      	movs	r0, #3
    b920:	f002 f8d8 	bl	dad4 <bt_buf_get_rx>
	if (buf) {
    b924:	4604      	mov	r4, r0
    b926:	b1d0      	cbz	r0, b95e <bt_rpmsg_rx+0xfe>
		memcpy((void *)&hdr, data, sizeof(hdr));
    b928:	2204      	movs	r2, #4
    b92a:	4641      	mov	r1, r8
    b92c:	eb0d 0002 	add.w	r0, sp, r2
    b930:	f00f fa5b 	bl	1adea <memcpy>
    b934:	2204      	movs	r2, #4
    b936:	f104 0708 	add.w	r7, r4, #8
    b93a:	4638      	mov	r0, r7
    b93c:	eb0d 0102 	add.w	r1, sp, r2
    b940:	f010 fd55 	bl	1c3ee <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    b944:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    b948:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    b94a:	429d      	cmp	r5, r3
    b94c:	d02e      	beq.n	b9ac <bt_rpmsg_rx+0x14c>
		BT_ERR("ACL payload length is not correct");
    b94e:	2145      	movs	r1, #69	; 0x45
    b950:	4820      	ldr	r0, [pc, #128]	; (b9d4 <bt_rpmsg_rx+0x174>)
		BT_ERR("ISO payload length is not correct");
    b952:	f00e f80a 	bl	1996a <printk>
		net_buf_unref(buf);
    b956:	4620      	mov	r0, r4
    b958:	f008 ff94 	bl	14884 <net_buf_unref>
	if (buf) {
    b95c:	e7b6      	b.n	b8cc <bt_rpmsg_rx+0x6c>
		BT_ERR("No available ACL buffers!");
    b95e:	2145      	movs	r1, #69	; 0x45
    b960:	481d      	ldr	r0, [pc, #116]	; (b9d8 <bt_rpmsg_rx+0x178>)
    b962:	e796      	b.n	b892 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    b964:	2b03      	cmp	r3, #3
    b966:	d802      	bhi.n	b96e <bt_rpmsg_rx+0x10e>
		BT_ERR("Not enough data for ISO header");
    b968:	2145      	movs	r1, #69	; 0x45
    b96a:	481c      	ldr	r0, [pc, #112]	; (b9dc <bt_rpmsg_rx+0x17c>)
    b96c:	e791      	b.n	b892 <bt_rpmsg_rx+0x32>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    b96e:	2200      	movs	r2, #0
    b970:	2300      	movs	r3, #0
    b972:	f002 f8af 	bl	dad4 <bt_buf_get_rx>
	if (buf) {
    b976:	4604      	mov	r4, r0
    b978:	b1a8      	cbz	r0, b9a6 <bt_rpmsg_rx+0x146>
		memcpy((void *)&hdr, data, sizeof(hdr));
    b97a:	2204      	movs	r2, #4
    b97c:	4641      	mov	r1, r8
    b97e:	eb0d 0002 	add.w	r0, sp, r2
    b982:	f00f fa32 	bl	1adea <memcpy>
    b986:	2204      	movs	r2, #4
    b988:	f104 0708 	add.w	r7, r4, #8
    b98c:	4638      	mov	r0, r7
    b98e:	eb0d 0102 	add.w	r1, sp, r2
    b992:	f010 fd2c 	bl	1c3ee <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    b996:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    b99a:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    b99c:	429d      	cmp	r5, r3
    b99e:	d005      	beq.n	b9ac <bt_rpmsg_rx+0x14c>
		BT_ERR("ISO payload length is not correct");
    b9a0:	2145      	movs	r1, #69	; 0x45
    b9a2:	480f      	ldr	r0, [pc, #60]	; (b9e0 <bt_rpmsg_rx+0x180>)
    b9a4:	e7d5      	b.n	b952 <bt_rpmsg_rx+0xf2>
		BT_ERR("No available ISO buffers!");
    b9a6:	2145      	movs	r1, #69	; 0x45
    b9a8:	480e      	ldr	r0, [pc, #56]	; (b9e4 <bt_rpmsg_rx+0x184>)
    b9aa:	e772      	b.n	b892 <bt_rpmsg_rx+0x32>
    b9ac:	462a      	mov	r2, r5
    b9ae:	1d71      	adds	r1, r6, #5
    b9b0:	e7aa      	b.n	b908 <bt_rpmsg_rx+0xa8>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    b9b2:	4602      	mov	r2, r0
    b9b4:	2145      	movs	r1, #69	; 0x45
    b9b6:	480c      	ldr	r0, [pc, #48]	; (b9e8 <bt_rpmsg_rx+0x188>)
}
    b9b8:	b002      	add	sp, #8
    b9ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    b9be:	f00d bfd4 	b.w	1996a <printk>
    b9c2:	bf00      	nop
    b9c4:	0001ef78 	.word	0x0001ef78
    b9c8:	0001ef08 	.word	0x0001ef08
    b9cc:	0001ef2e 	.word	0x0001ef2e
    b9d0:	0001ef57 	.word	0x0001ef57
    b9d4:	0001efbb 	.word	0x0001efbb
    b9d8:	0001ef9c 	.word	0x0001ef9c
    b9dc:	0001efe2 	.word	0x0001efe2
    b9e0:	0001f025 	.word	0x0001f025
    b9e4:	0001f006 	.word	0x0001f006
    b9e8:	0001f04c 	.word	0x0001f04c

0000b9ec <bt_rpmsg_platform_init>:

	return RPMSG_SUCCESS;
}

int bt_rpmsg_platform_init(void)
{
    b9ec:	b508      	push	{r3, lr}
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    b9ee:	4908      	ldr	r1, [pc, #32]	; (ba10 <bt_rpmsg_platform_init+0x24>)
    b9f0:	4808      	ldr	r0, [pc, #32]	; (ba14 <bt_rpmsg_platform_init+0x28>)
    b9f2:	f7ff fb89 	bl	b108 <rpmsg_service_register_endpoint>

	if (err < 0) {
    b9f6:	1e02      	subs	r2, r0, #0
    b9f8:	da05      	bge.n	ba06 <bt_rpmsg_platform_init+0x1a>
		LOG_ERR("Registering endpoint failed with %d", err);
    b9fa:	4807      	ldr	r0, [pc, #28]	; (ba18 <bt_rpmsg_platform_init+0x2c>)
    b9fc:	2145      	movs	r1, #69	; 0x45
    b9fe:	f00d ffb4 	bl	1996a <printk>
		return RPMSG_ERR_INIT;
    ba02:	4806      	ldr	r0, [pc, #24]	; (ba1c <bt_rpmsg_platform_init+0x30>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    ba04:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    ba06:	4b06      	ldr	r3, [pc, #24]	; (ba20 <bt_rpmsg_platform_init+0x34>)
	return RPMSG_SUCCESS;
    ba08:	2000      	movs	r0, #0
	endpoint_id = err;
    ba0a:	601a      	str	r2, [r3, #0]
	return RPMSG_SUCCESS;
    ba0c:	e7fa      	b.n	ba04 <bt_rpmsg_platform_init+0x18>
    ba0e:	bf00      	nop
    ba10:	0001a0c3 	.word	0x0001a0c3
    ba14:	0001f079 	.word	0x0001f079
    ba18:	0001f084 	.word	0x0001f084
    ba1c:	fffff82a 	.word	0xfffff82a
    ba20:	2000a6c4 	.word	0x2000a6c4

0000ba24 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    ba24:	4b02      	ldr	r3, [pc, #8]	; (ba30 <bt_rpmsg_platform_send+0xc>)
    ba26:	8982      	ldrh	r2, [r0, #12]
    ba28:	6881      	ldr	r1, [r0, #8]
    ba2a:	6818      	ldr	r0, [r3, #0]
    ba2c:	f7ff bb98 	b.w	b160 <rpmsg_service_send>
    ba30:	2000a6c4 	.word	0x2000a6c4

0000ba34 <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    ba34:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    ba36:	4b02      	ldr	r3, [pc, #8]	; (ba40 <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    ba38:	6818      	ldr	r0, [r3, #0]
    ba3a:	f7ff fb87 	bl	b14c <rpmsg_service_endpoint_is_bound>
}
    ba3e:	bd08      	pop	{r3, pc}
    ba40:	2000a6c4 	.word	0x2000a6c4

0000ba44 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    ba44:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    ba46:	4c06      	ldr	r4, [pc, #24]	; (ba60 <z_clock_isr+0x1c>)
    ba48:	4806      	ldr	r0, [pc, #24]	; (ba64 <z_clock_isr+0x20>)
    ba4a:	4621      	mov	r1, r4
    ba4c:	2217      	movs	r2, #23
    ba4e:	f00d ff8c 	bl	1996a <printk>
    ba52:	4620      	mov	r0, r4
}
    ba54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    ba58:	2117      	movs	r1, #23
    ba5a:	f00e ba2c 	b.w	19eb6 <assert_post_action>
    ba5e:	bf00      	nop
    ba60:	0001f0c1 	.word	0x0001f0c1
    ba64:	0001ea60 	.word	0x0001ea60

0000ba68 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    ba68:	4a04      	ldr	r2, [pc, #16]	; (ba7c <sys_clock_timeout_handler+0x14>)
    ba6a:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    ba6c:	1ac8      	subs	r0, r1, r3
    ba6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    ba72:	4403      	add	r3, r0
    ba74:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    ba76:	f00d ba83 	b.w	18f80 <z_clock_announce>
    ba7a:	bf00      	nop
    ba7c:	2000a6d4 	.word	0x2000a6d4

0000ba80 <set_absolute_alarm>:
{
    ba80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    ba84:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    ba88:	f04f 0900 	mov.w	r9, #0
    ba8c:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    ba8e:	f100 0450 	add.w	r4, r0, #80	; 0x50
    ba92:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    ba96:	00a4      	lsls	r4, r4, #2
    ba98:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    ba9c:	b2a4      	uxth	r4, r4
    ba9e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    baa2:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    baa6:	f8df 806c 	ldr.w	r8, [pc, #108]	; bb14 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    baaa:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    baae:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    bab2:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    bab4:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    bab8:	eba3 030a 	sub.w	r3, r3, sl
    babc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    bac0:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    bac4:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    bac6:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    baca:	d102      	bne.n	bad2 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    bacc:	2013      	movs	r0, #19
    bace:	f011 fb37 	bl	1d140 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    bad2:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    bad6:	1aab      	subs	r3, r5, r2
    bad8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    badc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    bae0:	bf88      	it	hi
    bae2:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bae4:	f8c4 9000 	str.w	r9, [r4]
    bae8:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    baea:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    baee:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    baf2:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    baf6:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    bafa:	459a      	cmp	sl, r3
    bafc:	d006      	beq.n	bb0c <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    bafe:	1aeb      	subs	r3, r5, r3
    bb00:	3b02      	subs	r3, #2
    bb02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    bb06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    bb0a:	d801      	bhi.n	bb10 <set_absolute_alarm+0x90>
}
    bb0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    bb10:	462b      	mov	r3, r5
    bb12:	e7cf      	b.n	bab4 <set_absolute_alarm+0x34>
    bb14:	40015000 	.word	0x40015000

0000bb18 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    bb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    bb1a:	2500      	movs	r5, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bb1c:	462f      	mov	r7, r5
    bb1e:	4c10      	ldr	r4, [pc, #64]	; (bb60 <rtc_nrf_isr+0x48>)
    bb20:	6826      	ldr	r6, [r4, #0]
    return p_reg->INTENSET & mask;
    bb22:	4b10      	ldr	r3, [pc, #64]	; (bb64 <rtc_nrf_isr+0x4c>)
    bb24:	b105      	cbz	r5, bb28 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    bb26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb28:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    bb2c:	03d2      	lsls	r2, r2, #15
    bb2e:	d5fa      	bpl.n	bb26 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bb30:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    bb34:	2a00      	cmp	r2, #0
    bb36:	d0f6      	beq.n	bb26 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bb38:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    bb3c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    bb40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    bb44:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    bb48:	2501      	movs	r5, #1
    return p_reg->CC[ch];
    bb4a:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
			if (handler) {
    bb4e:	b126      	cbz	r6, bb5a <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    bb50:	2000      	movs	r0, #0
    bb52:	6862      	ldr	r2, [r4, #4]
    bb54:	6027      	str	r7, [r4, #0]
    bb56:	47b0      	blx	r6
    bb58:	e7e2      	b.n	bb20 <rtc_nrf_isr+0x8>
    bb5a:	6026      	str	r6, [r4, #0]
}
    bb5c:	e7e3      	b.n	bb26 <rtc_nrf_isr+0xe>
    bb5e:	bf00      	nop
    bb60:	2000a6c8 	.word	0x2000a6c8
    bb64:	40015000 	.word	0x40015000

0000bb68 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    bb68:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    bb6a:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    bb6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    bb70:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    bb74:	4c0c      	ldr	r4, [pc, #48]	; (bba8 <z_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    bb76:	2101      	movs	r1, #1
    bb78:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    bb7c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    bb80:	4b0a      	ldr	r3, [pc, #40]	; (bbac <z_clock_driver_init+0x44>)
    bb82:	2015      	movs	r0, #21
    bb84:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    bb88:	462a      	mov	r2, r5
    bb8a:	f001 f8d7 	bl	cd3c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    bb8e:	2015      	movs	r0, #21
    bb90:	f001 f8b6 	bl	cd00 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    bb94:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    bb96:	4a06      	ldr	r2, [pc, #24]	; (bbb0 <z_clock_driver_init+0x48>)
    bb98:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    bb9a:	2002      	movs	r0, #2
    bb9c:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    bb9e:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    bba0:	f7ff fd82 	bl	b6a8 <z_nrf_clock_control_lf_on>

	return 0;
}
    bba4:	4628      	mov	r0, r5
    bba6:	bd38      	pop	{r3, r4, r5, pc}
    bba8:	40015000 	.word	0x40015000
    bbac:	e000e100 	.word	0xe000e100
    bbb0:	2000a6d0 	.word	0x2000a6d0

0000bbb4 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    bbb4:	4a13      	ldr	r2, [pc, #76]	; (bc04 <z_clock_set_timeout+0x50>)
    bbb6:	f1b0 3fff 	cmp.w	r0, #4294967295
    bbba:	bf14      	ite	ne
    bbbc:	4603      	movne	r3, r0
    bbbe:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    bbc0:	3b01      	subs	r3, #1
    bbc2:	2b00      	cmp	r3, #0
    bbc4:	dd1c      	ble.n	bc00 <z_clock_set_timeout+0x4c>
    bbc6:	4293      	cmp	r3, r2
    bbc8:	bfa8      	it	ge
    bbca:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    bbcc:	4a0e      	ldr	r2, [pc, #56]	; (bc08 <z_clock_set_timeout+0x54>)
    bbce:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    bbd2:	4a0e      	ldr	r2, [pc, #56]	; (bc0c <z_clock_set_timeout+0x58>)
    bbd4:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    bbd6:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    bbd8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    bbdc:	bf18      	it	ne
    bbde:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
    bbe0:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    bbe4:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    bbe6:	480a      	ldr	r0, [pc, #40]	; (bc10 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    bbe8:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    bbea:	4a0a      	ldr	r2, [pc, #40]	; (bc14 <z_clock_set_timeout+0x60>)
    bbec:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    bbee:	2000      	movs	r0, #0
    bbf0:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    bbf2:	4a04      	ldr	r2, [pc, #16]	; (bc04 <z_clock_set_timeout+0x50>)
    bbf4:	4293      	cmp	r3, r2
    bbf6:	bf94      	ite	ls
    bbf8:	18c9      	addls	r1, r1, r3
    bbfa:	1889      	addhi	r1, r1, r2
    bbfc:	f7ff bf40 	b.w	ba80 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    bc00:	2300      	movs	r3, #0
    bc02:	e7e3      	b.n	bbcc <z_clock_set_timeout+0x18>
    bc04:	007fffff 	.word	0x007fffff
    bc08:	40015000 	.word	0x40015000
    bc0c:	2000a6d4 	.word	0x2000a6d4
    bc10:	0000ba69 	.word	0x0000ba69
    bc14:	2000a6c8 	.word	0x2000a6c8

0000bc18 <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    bc18:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    bc1a:	f04f 0320 	mov.w	r3, #32
    bc1e:	f3ef 8511 	mrs	r5, BASEPRI
    bc22:	f383 8811 	msr	BASEPRI, r3
    bc26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bc2a:	4815      	ldr	r0, [pc, #84]	; (bc80 <z_clock_elapsed+0x68>)
    bc2c:	f00c feb4 	bl	18998 <z_spin_lock_valid>
    bc30:	b940      	cbnz	r0, bc44 <z_clock_elapsed+0x2c>
    bc32:	4914      	ldr	r1, [pc, #80]	; (bc84 <z_clock_elapsed+0x6c>)
    bc34:	4814      	ldr	r0, [pc, #80]	; (bc88 <z_clock_elapsed+0x70>)
    bc36:	227c      	movs	r2, #124	; 0x7c
    bc38:	f00d fe97 	bl	1996a <printk>
    bc3c:	217c      	movs	r1, #124	; 0x7c
    bc3e:	4811      	ldr	r0, [pc, #68]	; (bc84 <z_clock_elapsed+0x6c>)
    bc40:	f00e f939 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
    bc44:	480e      	ldr	r0, [pc, #56]	; (bc80 <z_clock_elapsed+0x68>)
    bc46:	f00c fec3 	bl	189d0 <z_spin_lock_set_owner>
    bc4a:	4b10      	ldr	r3, [pc, #64]	; (bc8c <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bc4c:	480c      	ldr	r0, [pc, #48]	; (bc80 <z_clock_elapsed+0x68>)
    bc4e:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    bc52:	4b0f      	ldr	r3, [pc, #60]	; (bc90 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    bc54:	681b      	ldr	r3, [r3, #0]
    bc56:	1ae4      	subs	r4, r4, r3
    bc58:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    bc5c:	f00c feaa 	bl	189b4 <z_spin_unlock_valid>
    bc60:	b940      	cbnz	r0, bc74 <z_clock_elapsed+0x5c>
    bc62:	4908      	ldr	r1, [pc, #32]	; (bc84 <z_clock_elapsed+0x6c>)
    bc64:	4808      	ldr	r0, [pc, #32]	; (bc88 <z_clock_elapsed+0x70>)
    bc66:	22a7      	movs	r2, #167	; 0xa7
    bc68:	f00d fe7f 	bl	1996a <printk>
    bc6c:	21a7      	movs	r1, #167	; 0xa7
    bc6e:	4805      	ldr	r0, [pc, #20]	; (bc84 <z_clock_elapsed+0x6c>)
    bc70:	f00e f921 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
    bc74:	f385 8811 	msr	BASEPRI, r5
    bc78:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    bc7c:	4620      	mov	r0, r4
    bc7e:	bd38      	pop	{r3, r4, r5, pc}
    bc80:	2000a6d8 	.word	0x2000a6d8
    bc84:	0001ea9a 	.word	0x0001ea9a
    bc88:	0001ea60 	.word	0x0001ea60
    bc8c:	40015000 	.word	0x40015000
    bc90:	2000a6d4 	.word	0x2000a6d4

0000bc94 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
    bc94:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    bc96:	1cc5      	adds	r5, r0, #3
    bc98:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    bc9c:	2d74      	cmp	r5, #116	; 0x74
    bc9e:	d908      	bls.n	bcb2 <user_data_alloc.constprop.0+0x1e>
    bca0:	4917      	ldr	r1, [pc, #92]	; (bd00 <user_data_alloc.constprop.0+0x6c>)
    bca2:	4818      	ldr	r0, [pc, #96]	; (bd04 <user_data_alloc.constprop.0+0x70>)
    bca4:	2250      	movs	r2, #80	; 0x50
    bca6:	f00d fe60 	bl	1996a <printk>
    bcaa:	2150      	movs	r1, #80	; 0x50
    bcac:	4814      	ldr	r0, [pc, #80]	; (bd00 <user_data_alloc.constprop.0+0x6c>)
    bcae:	f00e f902 	bl	19eb6 <assert_post_action>
	return list->head;
    bcb2:	4c15      	ldr	r4, [pc, #84]	; (bd08 <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
    bcb4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    bcb8:	b123      	cbz	r3, bcc4 <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    bcba:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    bcbe:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    bcc0:	2b74      	cmp	r3, #116	; 0x74
    bcc2:	d919      	bls.n	bcf8 <user_data_alloc.constprop.0+0x64>
	return k_aligned_alloc(sizeof(void *), size);
    bcc4:	2178      	movs	r1, #120	; 0x78
    bcc6:	2004      	movs	r0, #4
    bcc8:	f00d fd56 	bl	19778 <k_aligned_alloc>

		item = k_malloc(sizeof(struct data_chunk_item));

		if (!item) {
    bccc:	b178      	cbz	r0, bcee <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
    bcce:	2300      	movs	r3, #0
	return list->tail;
    bcd0:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	parent->next = child;
    bcd4:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    bcd6:	b95a      	cbnz	r2, bcf0 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
    bcd8:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
    bcdc:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
    bce0:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    bce4:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    bce6:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    bce8:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    bcea:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

	return user_data_loc;
}
    bcee:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    bcf0:	6010      	str	r0, [r2, #0]
	list->tail = node;
    bcf2:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    bcf6:	e7f1      	b.n	bcdc <user_data_alloc.constprop.0+0x48>
	return list->tail;
    bcf8:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    bcfc:	e7f0      	b.n	bce0 <user_data_alloc.constprop.0+0x4c>
    bcfe:	bf00      	nop
    bd00:	0001f12e 	.word	0x0001f12e
    bd04:	0001ea60 	.word	0x0001ea60
    bd08:	2000a6dc 	.word	0x2000a6dc

0000bd0c <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bd0c:	4808      	ldr	r0, [pc, #32]	; (bd30 <discovery_complete.constprop.0+0x24>)
    bd0e:	f500 739c 	add.w	r3, r0, #312	; 0x138
    bd12:	e8d3 2fef 	ldaex	r2, [r3]
    bd16:	f042 0202 	orr.w	r2, r2, #2
    bd1a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    bd1e:	2900      	cmp	r1, #0
    bd20:	d1f7      	bne.n	bd12 <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    bd22:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    bd26:	681b      	ldr	r3, [r3, #0]
    bd28:	b10b      	cbz	r3, bd2e <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
    bd2a:	6841      	ldr	r1, [r0, #4]
    bd2c:	4718      	bx	r3
	}
}
    bd2e:	4770      	bx	lr
    bd30:	2000a6dc 	.word	0x2000a6dc

0000bd34 <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    bd34:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    bd36:	4c0b      	ldr	r4, [pc, #44]	; (bd64 <discovery_complete_error.constprop.0+0x30>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    bd38:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    bd3a:	4620      	mov	r0, r4
    bd3c:	f00e f9e7 	bl	1a10e <svc_attr_memory_release>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bd40:	f06f 0101 	mvn.w	r1, #1
    bd44:	f504 709c 	add.w	r0, r4, #312	; 0x138
    bd48:	f00e f9f8 	bl	1a13c <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    bd4c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    bd50:	689b      	ldr	r3, [r3, #8]
    bd52:	b12b      	cbz	r3, bd60 <discovery_complete_error.constprop.0+0x2c>
		dm->callback->error_found(dm->conn, err, dm->context);
    bd54:	4629      	mov	r1, r5
    bd56:	6862      	ldr	r2, [r4, #4]
    bd58:	6820      	ldr	r0, [r4, #0]
	}
}
    bd5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    bd5e:	4718      	bx	r3
}
    bd60:	bd70      	pop	{r4, r5, r6, pc}
    bd62:	bf00      	nop
    bd64:	2000a6dc 	.word	0x2000a6dc

0000bd68 <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    bd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    bd6c:	4c1f      	ldr	r4, [pc, #124]	; (bdec <attr_store.constprop.0+0x84>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    bd6e:	4607      	mov	r7, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    bd70:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    bd74:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    bd76:	2b22      	cmp	r3, #34	; 0x22
    bd78:	d907      	bls.n	bd8a <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
    bd7a:	2145      	movs	r1, #69	; 0x45
    bd7c:	481c      	ldr	r0, [pc, #112]	; (bdf0 <attr_store.constprop.0+0x88>)
    bd7e:	f00d fdf4 	bl	1996a <printk>
		return NULL;
    bd82:	2500      	movs	r5, #0
}
    bd84:	4628      	mov	r0, r5
    bd86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    bd8a:	6803      	ldr	r3, [r0, #0]
    bd8c:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    bd8e:	2b02      	cmp	r3, #2
    bd90:	d80d      	bhi.n	bdae <attr_store.constprop.0+0x46>
    bd92:	4a18      	ldr	r2, [pc, #96]	; (bdf4 <attr_store.constprop.0+0x8c>)
    bd94:	f812 9003 	ldrb.w	r9, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    bd98:	eb06 0009 	add.w	r0, r6, r9
    bd9c:	f7ff ff7a 	bl	bc94 <user_data_alloc.constprop.0>
	if (!attr_data) {
    bda0:	4605      	mov	r5, r0
    bda2:	b958      	cbnz	r0, bdbc <attr_store.constprop.0+0x54>
		LOG_ERR("No space for attribute data.");
    bda4:	2145      	movs	r1, #69	; 0x45
    bda6:	4814      	ldr	r0, [pc, #80]	; (bdf8 <attr_store.constprop.0+0x90>)
    bda8:	f00d fddf 	bl	1996a <printk>
		return NULL;
    bdac:	e7ea      	b.n	bd84 <attr_store.constprop.0+0x1c>
		LOG_ERR("Unsupported UUID type.");
    bdae:	2145      	movs	r1, #69	; 0x45
    bdb0:	4812      	ldr	r0, [pc, #72]	; (bdfc <attr_store.constprop.0+0x94>)
    bdb2:	f00d fdda 	bl	1996a <printk>
    bdb6:	f04f 0900 	mov.w	r9, #0
    bdba:	e7ed      	b.n	bd98 <attr_store.constprop.0+0x30>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    bdbc:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    bdc0:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    bdc2:	1c5a      	adds	r2, r3, #1
    bdc4:	3303      	adds	r3, #3
    bdc6:	00db      	lsls	r3, r3, #3
    bdc8:	f103 0804 	add.w	r8, r3, #4
    bdcc:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    bdd0:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    bdd2:	441c      	add	r4, r3
    bdd4:	8a3b      	ldrh	r3, [r7, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    bdd6:	464a      	mov	r2, r9
	cur_attr->handle = attr->handle;
    bdd8:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    bdda:	7cbb      	ldrb	r3, [r7, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    bddc:	6839      	ldr	r1, [r7, #0]
	cur_attr->perm = attr->perm;
    bdde:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    bde0:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    bde2:	f00f f802 	bl	1adea <memcpy>
	return cur_attr;
    bde6:	4645      	mov	r5, r8
    bde8:	e7cc      	b.n	bd84 <attr_store.constprop.0+0x1c>
    bdea:	bf00      	nop
    bdec:	2000a6dc 	.word	0x2000a6dc
    bdf0:	0001f159 	.word	0x0001f159
    bdf4:	0001f324 	.word	0x0001f324
    bdf8:	0001f196 	.word	0x0001f196
    bdfc:	0001f17a 	.word	0x0001f17a

0000be00 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    be00:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    be02:	4604      	mov	r4, r0
    be04:	b930      	cbnz	r0, be14 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
    be06:	2145      	movs	r1, #69	; 0x45
    be08:	480c      	ldr	r0, [pc, #48]	; (be3c <uuid_store.constprop.0+0x3c>)
    be0a:	f00d fdae 	bl	1996a <printk>
    be0e:	4625      	mov	r5, r4
}
    be10:	4628      	mov	r0, r5
    be12:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    be14:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    be16:	2b02      	cmp	r3, #2
    be18:	d80a      	bhi.n	be30 <uuid_store.constprop.0+0x30>
    be1a:	4a09      	ldr	r2, [pc, #36]	; (be40 <uuid_store.constprop.0+0x40>)
    be1c:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    be1e:	4630      	mov	r0, r6
    be20:	f7ff ff38 	bl	bc94 <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    be24:	4632      	mov	r2, r6
    be26:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    be28:	4605      	mov	r5, r0
	memcpy(buffer, uuid, size);
    be2a:	f00e ffde 	bl	1adea <memcpy>
	return (struct bt_uuid *)buffer;
    be2e:	e7ef      	b.n	be10 <uuid_store.constprop.0+0x10>
		LOG_ERR("Unsupported UUID type.");
    be30:	2145      	movs	r1, #69	; 0x45
    be32:	4804      	ldr	r0, [pc, #16]	; (be44 <uuid_store.constprop.0+0x44>)
    be34:	f00d fd99 	bl	1996a <printk>
    be38:	2600      	movs	r6, #0
    be3a:	e7f0      	b.n	be1e <uuid_store.constprop.0+0x1e>
    be3c:	0001f1b8 	.word	0x0001f1b8
    be40:	0001f324 	.word	0x0001f324
    be44:	0001f17a 	.word	0x0001f17a

0000be48 <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    be48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    be4c:	4e79      	ldr	r6, [pc, #484]	; (c034 <discovery_callback+0x1ec>)
{
    be4e:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
    be50:	6833      	ldr	r3, [r6, #0]
    be52:	4283      	cmp	r3, r0
    be54:	d008      	beq.n	be68 <discovery_callback+0x20>
		LOG_ERR("Unexpected conn object. Aborting.");
    be56:	4878      	ldr	r0, [pc, #480]	; (c038 <discovery_callback+0x1f0>)
    be58:	2145      	movs	r1, #69	; 0x45
    be5a:	f00d fd86 	bl	1996a <printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    be5e:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    be62:	f7ff ff67 	bl	bd34 <discovery_complete_error.constprop.0>
    be66:	e031      	b.n	becc <discovery_callback+0x84>
    be68:	7c13      	ldrb	r3, [r2, #16]
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    be6a:	2b03      	cmp	r3, #3
    be6c:	f000 80ae 	beq.w	bfcc <discovery_callback+0x184>
    be70:	d80d      	bhi.n	be8e <discovery_callback+0x46>
    be72:	2b02      	cmp	r3, #2
    be74:	d126      	bne.n	bec4 <discovery_callback+0x7c>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
    be76:	f240 12b3 	movw	r2, #435	; 0x1b3
    be7a:	4970      	ldr	r1, [pc, #448]	; (c03c <discovery_callback+0x1f4>)
    be7c:	4870      	ldr	r0, [pc, #448]	; (c040 <discovery_callback+0x1f8>)
    be7e:	f00d fd74 	bl	1996a <printk>
    be82:	f240 11b3 	movw	r1, #435	; 0x1b3
    be86:	486d      	ldr	r0, [pc, #436]	; (c03c <discovery_callback+0x1f4>)
    be88:	f00e f815 	bl	19eb6 <assert_post_action>
    be8c:	e01e      	b.n	becc <discovery_callback+0x84>
	switch (params->type) {
    be8e:	2b05      	cmp	r3, #5
    be90:	d1f1      	bne.n	be76 <discovery_callback+0x2e>
	if (!attr) {
    be92:	2900      	cmp	r1, #0
    be94:	f040 8081 	bne.w	bf9a <discovery_callback+0x152>
		if (dm->cur_attr_id > 1) {
    be98:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
    be9c:	2b01      	cmp	r3, #1
    be9e:	d979      	bls.n	bf94 <discovery_callback+0x14c>
				dm->attrs[0].handle + 1;
    bea0:	8c33      	ldrh	r3, [r6, #32]
			int err = bt_gatt_discover(dm->conn,
    bea2:	f106 0108 	add.w	r1, r6, #8
				dm->attrs[0].handle + 1;
    bea6:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    bea8:	8233      	strh	r3, [r6, #16]
			dm->discover_params.type =
    beaa:	2303      	movs	r3, #3
    beac:	7633      	strb	r3, [r6, #24]
			int err = bt_gatt_discover(dm->conn,
    beae:	f007 fcbd 	bl	1382c <bt_gatt_discover>
			if (err) {
    beb2:	4604      	mov	r4, r0
    beb4:	b150      	cbz	r0, becc <discovery_callback+0x84>
				LOG_ERR("Characteristic discover failed,"
    beb6:	4602      	mov	r2, r0
    beb8:	2145      	movs	r1, #69	; 0x45
    beba:	4862      	ldr	r0, [pc, #392]	; (c044 <discovery_callback+0x1fc>)
    bebc:	f00d fd55 	bl	1996a <printk>
				discovery_complete_error(dm, err);
    bec0:	4620      	mov	r0, r4
    bec2:	e7ce      	b.n	be62 <discovery_callback+0x1a>
	if (!attr) {
    bec4:	b921      	cbnz	r1, bed0 <discovery_callback+0x88>
		discovery_complete_not_found(dm);
    bec6:	4630      	mov	r0, r6
    bec8:	f00e f943 	bl	1a152 <discovery_complete_not_found>
		break;
	}

	return BT_GATT_ITER_STOP;
    becc:	2400      	movs	r4, #0
    bece:	e04a      	b.n	bf66 <discovery_callback+0x11e>
	struct bt_gatt_service_val *service_val = attr->user_data;
    bed0:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
    bed4:	4628      	mov	r0, r5
    bed6:	2108      	movs	r1, #8
    bed8:	f7ff ff46 	bl	bd68 <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    bedc:	2400      	movs	r4, #0
    bede:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    bee2:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    bee4:	4669      	mov	r1, sp
    bee6:	6828      	ldr	r0, [r5, #0]
    bee8:	f88d 4000 	strb.w	r4, [sp]
    beec:	f8ad 3002 	strh.w	r3, [sp, #2]
    bef0:	f00e fff0 	bl	1aed4 <bt_uuid_cmp>
    bef4:	b1a8      	cbz	r0, bf22 <discovery_callback+0xda>
    bef6:	f642 0301 	movw	r3, #10241	; 0x2801
    befa:	6828      	ldr	r0, [r5, #0]
    befc:	a901      	add	r1, sp, #4
    befe:	f88d 4004 	strb.w	r4, [sp, #4]
    bf02:	f8ad 3006 	strh.w	r3, [sp, #6]
    bf06:	f00e ffe5 	bl	1aed4 <bt_uuid_cmp>
    bf0a:	b150      	cbz	r0, bf22 <discovery_callback+0xda>
    bf0c:	494b      	ldr	r1, [pc, #300]	; (c03c <discovery_callback+0x1f4>)
    bf0e:	484c      	ldr	r0, [pc, #304]	; (c040 <discovery_callback+0x1f8>)
    bf10:	f240 1217 	movw	r2, #279	; 0x117
    bf14:	f00d fd29 	bl	1996a <printk>
    bf18:	f240 1117 	movw	r1, #279	; 0x117
    bf1c:	4847      	ldr	r0, [pc, #284]	; (c03c <discovery_callback+0x1f4>)
    bf1e:	f00d ffca 	bl	19eb6 <assert_post_action>
	if (!cur_attr) {
    bf22:	b937      	cbnz	r7, bf32 <discovery_callback+0xea>
		LOG_ERR("Not enough memory for service attribute.");
    bf24:	4848      	ldr	r0, [pc, #288]	; (c048 <discovery_callback+0x200>)
    bf26:	2145      	movs	r1, #69	; 0x45
    bf28:	f00d fd1f 	bl	1996a <printk>
		discovery_complete_error(dm, -ENOMEM);
    bf2c:	f06f 000b 	mvn.w	r0, #11
    bf30:	e797      	b.n	be62 <discovery_callback+0x1a>
		bt_gatt_dm_attr_service_val(cur_attr);
    bf32:	4638      	mov	r0, r7
    bf34:	f00e f921 	bl	1a17a <bt_gatt_dm_attr_service_val>
    bf38:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    bf3a:	2208      	movs	r2, #8
    bf3c:	4641      	mov	r1, r8
    bf3e:	f00e ff54 	bl	1adea <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    bf42:	6828      	ldr	r0, [r5, #0]
    bf44:	f7ff ff5c 	bl	be00 <uuid_store.constprop.0>
    bf48:	4604      	mov	r4, r0
    bf4a:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    bf4c:	b930      	cbnz	r0, bf5c <discovery_callback+0x114>
		LOG_ERR("Not enough memory for service attribute data.");
    bf4e:	2145      	movs	r1, #69	; 0x45
    bf50:	483e      	ldr	r0, [pc, #248]	; (c04c <discovery_callback+0x204>)
    bf52:	f00d fd0a 	bl	1996a <printk>
		discovery_complete_error(dm, -ENOMEM);
    bf56:	f06f 000b 	mvn.w	r0, #11
    bf5a:	e058      	b.n	c00e <discovery_callback+0x1c6>
	if (cur_attr->handle == cur_service_val->end_handle) {
    bf5c:	88bb      	ldrh	r3, [r7, #4]
    bf5e:	88aa      	ldrh	r2, [r5, #4]
    bf60:	4293      	cmp	r3, r2
    bf62:	d104      	bne.n	bf6e <discovery_callback+0x126>
		return BT_GATT_ITER_CONTINUE;
    bf64:	2401      	movs	r4, #1
}
    bf66:	4620      	mov	r0, r4
    bf68:	b002      	add	sp, #8
    bf6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    bf6e:	2105      	movs	r1, #5
	dm->discover_params.uuid         = NULL;
    bf70:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    bf72:	7631      	strb	r1, [r6, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    bf74:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    bf76:	4936      	ldr	r1, [pc, #216]	; (c050 <discovery_callback+0x208>)
    bf78:	6830      	ldr	r0, [r6, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    bf7a:	82f2      	strh	r2, [r6, #22]
	dm->discover_params.uuid         = NULL;
    bf7c:	60b4      	str	r4, [r6, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    bf7e:	8233      	strh	r3, [r6, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    bf80:	f007 fc54 	bl	1382c <bt_gatt_discover>
	if (err) {
    bf84:	4602      	mov	r2, r0
    bf86:	2800      	cmp	r0, #0
    bf88:	d0a0      	beq.n	becc <discovery_callback+0x84>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    bf8a:	2145      	movs	r1, #69	; 0x45
    bf8c:	4831      	ldr	r0, [pc, #196]	; (c054 <discovery_callback+0x20c>)
		LOG_ERR("Not enough memory for next attribute descriptor"
    bf8e:	f00d fcec 	bl	1996a <printk>
		discovery_complete_error(dm, -ENOMEM);
    bf92:	e7e0      	b.n	bf56 <discovery_callback+0x10e>
			discovery_complete(dm);
    bf94:	f7ff feba 	bl	bd0c <discovery_complete.constprop.0>
    bf98:	e798      	b.n	becc <discovery_callback+0x84>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    bf9a:	2400      	movs	r4, #0
    bf9c:	f642 0303 	movw	r3, #10243	; 0x2803
    bfa0:	6828      	ldr	r0, [r5, #0]
    bfa2:	a901      	add	r1, sp, #4
    bfa4:	f88d 4004 	strb.w	r4, [sp, #4]
    bfa8:	f8ad 3006 	strh.w	r3, [sp, #6]
    bfac:	f00e ff92 	bl	1aed4 <bt_uuid_cmp>
    bfb0:	b950      	cbnz	r0, bfc8 <discovery_callback+0x180>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    bfb2:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    bfb4:	4628      	mov	r0, r5
    bfb6:	f7ff fed7 	bl	bd68 <attr_store.constprop.0>
    bfba:	4604      	mov	r4, r0
	if (!cur_attr) {
    bfbc:	2800      	cmp	r0, #0
    bfbe:	d1d1      	bne.n	bf64 <discovery_callback+0x11c>
		LOG_ERR("Not enough memory for next attribute descriptor"
    bfc0:	2145      	movs	r1, #69	; 0x45
    bfc2:	8a2a      	ldrh	r2, [r5, #16]
    bfc4:	4824      	ldr	r0, [pc, #144]	; (c058 <discovery_callback+0x210>)
    bfc6:	e7e2      	b.n	bf8e <discovery_callback+0x146>
		cur_attr = attr_store(dm, attr, 0);
    bfc8:	4621      	mov	r1, r4
    bfca:	e7f3      	b.n	bfb4 <discovery_callback+0x16c>
	if (!attr) {
    bfcc:	2900      	cmp	r1, #0
    bfce:	d0e1      	beq.n	bf94 <discovery_callback+0x14c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    bfd0:	2300      	movs	r3, #0
    bfd2:	f88d 3004 	strb.w	r3, [sp, #4]
    bfd6:	f642 0303 	movw	r3, #10243	; 0x2803
    bfda:	6828      	ldr	r0, [r5, #0]
    bfdc:	a901      	add	r1, sp, #4
    bfde:	f8ad 3006 	strh.w	r3, [sp, #6]
    bfe2:	f00e ff77 	bl	1aed4 <bt_uuid_cmp>
    bfe6:	b150      	cbz	r0, bffe <discovery_callback+0x1b6>
    bfe8:	4914      	ldr	r1, [pc, #80]	; (c03c <discovery_callback+0x1f4>)
    bfea:	4815      	ldr	r0, [pc, #84]	; (c040 <discovery_callback+0x1f8>)
    bfec:	f44f 72c0 	mov.w	r2, #384	; 0x180
    bff0:	f00d fcbb 	bl	1996a <printk>
    bff4:	f44f 71c0 	mov.w	r1, #384	; 0x180
    bff8:	4810      	ldr	r0, [pc, #64]	; (c03c <discovery_callback+0x1f4>)
    bffa:	f00d ff5c 	bl	19eb6 <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    bffe:	8a29      	ldrh	r1, [r5, #16]
    c000:	480c      	ldr	r0, [pc, #48]	; (c034 <discovery_callback+0x1ec>)
    c002:	f00e f866 	bl	1a0d2 <attr_find_by_handle>
	if (!cur_attr) {
    c006:	4604      	mov	r4, r0
    c008:	b920      	cbnz	r0, c014 <discovery_callback+0x1cc>
		discovery_complete_error(dm, -ESRCH);
    c00a:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    c00e:	f7ff fe91 	bl	bd34 <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    c012:	e7a8      	b.n	bf66 <discovery_callback+0x11e>
	gatt_chrc = attr->user_data;
    c014:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    c016:	f00e f8d0 	bl	1a1ba <bt_gatt_dm_attr_chrc_val>
    c01a:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    c01c:	4621      	mov	r1, r4
    c01e:	2208      	movs	r2, #8
    c020:	f00e fee3 	bl	1adea <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    c024:	6828      	ldr	r0, [r5, #0]
    c026:	f7ff feeb 	bl	be00 <uuid_store.constprop.0>
    c02a:	4604      	mov	r4, r0
    c02c:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    c02e:	2800      	cmp	r0, #0
    c030:	d198      	bne.n	bf64 <discovery_callback+0x11c>
    c032:	e790      	b.n	bf56 <discovery_callback+0x10e>
    c034:	2000a6dc 	.word	0x2000a6dc
    c038:	0001f1d1 	.word	0x0001f1d1
    c03c:	0001f12e 	.word	0x0001f12e
    c040:	0001ea60 	.word	0x0001ea60
    c044:	0001f285 	.word	0x0001f285
    c048:	0001f1f8 	.word	0x0001f1f8
    c04c:	0001f226 	.word	0x0001f226
    c050:	2000a6e4 	.word	0x2000a6e4
    c054:	0001f259 	.word	0x0001f259
    c058:	0001f2b5 	.word	0x0001f2b5

0000c05c <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    c05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c060:	4606      	mov	r6, r0
    c062:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    c064:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
    c066:	f8df 8044 	ldr.w	r8, [pc, #68]	; c0ac <bt_gatt_dm_char_by_uuid+0x50>
    c06a:	f8df 9044 	ldr.w	r9, [pc, #68]	; c0b0 <bt_gatt_dm_char_by_uuid+0x54>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    c06e:	4621      	mov	r1, r4
    c070:	4630      	mov	r0, r6
    c072:	f00e f8b8 	bl	1a1e6 <bt_gatt_dm_char_next>
    c076:	4604      	mov	r4, r0
    c078:	b1a0      	cbz	r0, c0a4 <bt_gatt_dm_char_by_uuid+0x48>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    c07a:	f00e f89e 	bl	1a1ba <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
    c07e:	4605      	mov	r5, r0
    c080:	b950      	cbnz	r0, c098 <bt_gatt_dm_char_by_uuid+0x3c>
    c082:	4641      	mov	r1, r8
    c084:	4648      	mov	r0, r9
    c086:	f240 12fb 	movw	r2, #507	; 0x1fb
    c08a:	f00d fc6e 	bl	1996a <printk>
    c08e:	f240 11fb 	movw	r1, #507	; 0x1fb
    c092:	4640      	mov	r0, r8
    c094:	f00d ff0f 	bl	19eb6 <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    c098:	4638      	mov	r0, r7
    c09a:	6829      	ldr	r1, [r5, #0]
    c09c:	f00e ff1a 	bl	1aed4 <bt_uuid_cmp>
    c0a0:	2800      	cmp	r0, #0
    c0a2:	d1e4      	bne.n	c06e <bt_gatt_dm_char_by_uuid+0x12>
			return curr;
		}
	}

	return NULL;
}
    c0a4:	4620      	mov	r0, r4
    c0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c0aa:	bf00      	nop
    c0ac:	0001f12e 	.word	0x0001f12e
    c0b0:	0001ea60 	.word	0x0001ea60

0000c0b4 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    c0b4:	b570      	push	{r4, r5, r6, lr}
    c0b6:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    c0b8:	4608      	mov	r0, r1
    c0ba:	b119      	cbz	r1, c0c4 <bt_gatt_dm_start+0x10>
    c0bc:	7809      	ldrb	r1, [r1, #0]
    c0be:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    c0c2:	d139      	bne.n	c138 <bt_gatt_dm_start+0x84>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    c0c4:	2a00      	cmp	r2, #0
    c0c6:	d037      	beq.n	c138 <bt_gatt_dm_start+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c0c8:	4c1e      	ldr	r4, [pc, #120]	; (c144 <bt_gatt_dm_start+0x90>)
    c0ca:	f504 769c 	add.w	r6, r4, #312	; 0x138
    c0ce:	e8d6 1fef 	ldaex	r1, [r6]
    c0d2:	f041 0c01 	orr.w	ip, r1, #1
    c0d6:	e8c6 cfee 	stlex	lr, ip, [r6]
    c0da:	f1be 0f00 	cmp.w	lr, #0
    c0de:	d1f6      	bne.n	c0ce <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    c0e0:	f011 0101 	ands.w	r1, r1, #1
    c0e4:	d12b      	bne.n	c13e <bt_gatt_dm_start+0x8a>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    c0e6:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
    c0ea:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    c0ee:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    c0f2:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    c0f6:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    c0fa:	b108      	cbz	r0, c100 <bt_gatt_dm_start+0x4c>
    c0fc:	f7ff fe80 	bl	be00 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    c100:	4b11      	ldr	r3, [pc, #68]	; (c148 <bt_gatt_dm_start+0x94>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    c102:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
    c104:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    c106:	2301      	movs	r3, #1
    c108:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    c10a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c10e:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    c110:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
    c112:	4628      	mov	r0, r5
    c114:	490d      	ldr	r1, [pc, #52]	; (c14c <bt_gatt_dm_start+0x98>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    c116:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    c118:	f007 fb88 	bl	1382c <bt_gatt_discover>
	if (err) {
    c11c:	4604      	mov	r4, r0
    c11e:	b148      	cbz	r0, c134 <bt_gatt_dm_start+0x80>
		LOG_ERR("Discover failed, error: %d.", err);
    c120:	4602      	mov	r2, r0
    c122:	2145      	movs	r1, #69	; 0x45
    c124:	480a      	ldr	r0, [pc, #40]	; (c150 <bt_gatt_dm_start+0x9c>)
    c126:	f00d fc20 	bl	1996a <printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c12a:	f06f 0101 	mvn.w	r1, #1
    c12e:	4809      	ldr	r0, [pc, #36]	; (c154 <bt_gatt_dm_start+0xa0>)
    c130:	f00e f804 	bl	1a13c <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    c134:	4620      	mov	r0, r4
    c136:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    c138:	f06f 0415 	mvn.w	r4, #21
    c13c:	e7fa      	b.n	c134 <bt_gatt_dm_start+0x80>
		return -EALREADY;
    c13e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    c142:	e7f7      	b.n	c134 <bt_gatt_dm_start+0x80>
    c144:	2000a6dc 	.word	0x2000a6dc
    c148:	0000be49 	.word	0x0000be49
    c14c:	2000a6e4 	.word	0x2000a6e4
    c150:	0001f2f8 	.word	0x0001f2f8
    c154:	2000a814 	.word	0x2000a814

0000c158 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    c158:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    c15a:	4c06      	ldr	r4, [pc, #24]	; (c174 <scan_default_param_set+0x1c>)
{
    c15c:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    c15e:	ad01      	add	r5, sp, #4
    c160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c164:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    c166:	4c04      	ldr	r4, [pc, #16]	; (c178 <scan_default_param_set+0x20>)
    c168:	ad01      	add	r5, sp, #4
    c16a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c16c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c16e:	6026      	str	r6, [r4, #0]
}
    c170:	b006      	add	sp, #24
    c172:	bd70      	pop	{r4, r5, r6, pc}
    c174:	0001d7e0 	.word	0x0001d7e0
    c178:	2000a858 	.word	0x2000a858

0000c17c <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
    c17c:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
    c180:	4b02      	ldr	r3, [pc, #8]	; (c18c <scan_default_conn_param_set+0x10>)
    c182:	4903      	ldr	r1, [pc, #12]	; (c190 <scan_default_conn_param_set+0x14>)
    c184:	e9c3 1211 	strd	r1, r2, [r3, #68]	; 0x44
}
    c188:	4770      	bx	lr
    c18a:	bf00      	nop
    c18c:	2000a828 	.word	0x2000a828
    c190:	00280018 	.word	0x00280018

0000c194 <uuid_check>:
{
    c194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_scan.scan_filters.uuid.enabled;
    c198:	4c29      	ldr	r4, [pc, #164]	; (c240 <uuid_check+0xac>)
{
    c19a:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    c19c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
{
    c1a0:	4606      	mov	r6, r0
    c1a2:	9100      	str	r1, [sp, #0]
    c1a4:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    c1a6:	2b00      	cmp	r3, #0
    c1a8:	d03c      	beq.n	c224 <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
    c1aa:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
    c1ac:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
    c1ae:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    c1b0:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    c1b4:	f894 a020 	ldrb.w	sl, [r4, #32]
	uint8_t data_len = data->data_len;
    c1b8:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    c1ba:	4557      	cmp	r7, sl
    c1bc:	d30e      	bcc.n	c1dc <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
    c1be:	f886 503c 	strb.w	r5, [r6, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    c1c2:	f1bb 0f00 	cmp.w	fp, #0
    c1c6:	d02b      	beq.n	c220 <uuid_check+0x8c>
    c1c8:	45aa      	cmp	sl, r5
    c1ca:	d12b      	bne.n	c224 <uuid_check+0x90>
			control->filter_match_cnt++;
    c1cc:	7873      	ldrb	r3, [r6, #1]
    c1ce:	3301      	adds	r3, #1
    c1d0:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
    c1d2:	2301      	movs	r3, #1
    c1d4:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
    c1d8:	70b3      	strb	r3, [r6, #2]
}
    c1da:	e023      	b.n	c224 <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c1dc:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    c1e0:	9b00      	ldr	r3, [sp, #0]
    c1e2:	9a03      	ldr	r2, [sp, #12]
    c1e4:	685b      	ldr	r3, [r3, #4]
    c1e6:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    c1e8:	4b16      	ldr	r3, [pc, #88]	; (c244 <uuid_check+0xb0>)
    c1ea:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c1ee:	9b01      	ldr	r3, [sp, #4]
    c1f0:	4599      	cmp	r9, r3
    c1f2:	d305      	bcc.n	c200 <uuid_check+0x6c>
		} else if (all_filters_mode) {
    c1f4:	f1bb 0f00 	cmp.w	fp, #0
    c1f8:	d1e1      	bne.n	c1be <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
    c1fa:	3701      	adds	r7, #1
    c1fc:	3418      	adds	r4, #24
    c1fe:	e7dc      	b.n	c1ba <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    c200:	9b02      	ldr	r3, [sp, #8]
    c202:	4642      	mov	r2, r8
    c204:	eb03 0109 	add.w	r1, r3, r9
    c208:	a805      	add	r0, sp, #20
    c20a:	f00e fe91 	bl	1af30 <bt_uuid_create>
    c20e:	2800      	cmp	r0, #0
    c210:	d0f0      	beq.n	c1f4 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    c212:	68a1      	ldr	r1, [r4, #8]
    c214:	a805      	add	r0, sp, #20
    c216:	f00e fe5d 	bl	1aed4 <bt_uuid_cmp>
    c21a:	b130      	cbz	r0, c22a <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c21c:	44c1      	add	r9, r8
    c21e:	e7e6      	b.n	c1ee <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    c220:	2d00      	cmp	r5, #0
    c222:	d1d3      	bne.n	c1cc <uuid_check+0x38>
}
    c224:	b00b      	add	sp, #44	; 0x2c
    c226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
    c22a:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    c22c:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
    c230:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    c232:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
    c234:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    c236:	f1bb 0f00 	cmp.w	fp, #0
    c23a:	d1de      	bne.n	c1fa <uuid_check+0x66>
    c23c:	e7bf      	b.n	c1be <uuid_check+0x2a>
    c23e:	bf00      	nop
    c240:	2000a828 	.word	0x2000a828
    c244:	0001f333 	.word	0x0001f333

0000c248 <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    c248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    c24c:	7803      	ldrb	r3, [r0, #0]
{
    c24e:	4605      	mov	r5, r0
	switch (data->type) {
    c250:	2b19      	cmp	r3, #25
{
    c252:	460c      	mov	r4, r1
	switch (data->type) {
    c254:	d812      	bhi.n	c27c <adv_data_found+0x34>
    c256:	2b01      	cmp	r3, #1
    c258:	d912      	bls.n	c280 <adv_data_found+0x38>
    c25a:	3b02      	subs	r3, #2
    c25c:	2b17      	cmp	r3, #23
    c25e:	d80f      	bhi.n	c280 <adv_data_found+0x38>
    c260:	e8df f003 	tbb	[pc, r3]
    c264:	7f7f7979 	.word	0x7f7f7979
    c268:	11318181 	.word	0x11318181
    c26c:	0e0e0e0e 	.word	0x0e0e0e0e
    c270:	0e0e0e0e 	.word	0x0e0e0e0e
    c274:	0e0e0e0e 	.word	0x0e0e0e0e
    c278:	560e0e0e 	.word	0x560e0e0e
    c27c:	2bff      	cmp	r3, #255	; 0xff
    c27e:	d074      	beq.n	c36a <adv_data_found+0x122>
	default:
		break;
	}

	return true;
}
    c280:	2001      	movs	r0, #1
    c282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_scan.scan_filters.name.enabled;
    c286:	4f4d      	ldr	r7, [pc, #308]	; (c3bc <adv_data_found+0x174>)
	if (is_name_filter_enabled()) {
    c288:	787b      	ldrb	r3, [r7, #1]
    c28a:	2b00      	cmp	r3, #0
    c28c:	d0f8      	beq.n	c280 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c28e:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.name.cnt;
    c290:	f897 a000 	ldrb.w	sl, [r7]
	uint8_t data_len = data->data_len;
    c294:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    c298:	4556      	cmp	r6, sl
    c29a:	d2f1      	bcs.n	c280 <adv_data_found+0x38>
		if (adv_name_cmp(data->data,
    c29c:	eb07 1946 	add.w	r9, r7, r6, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    c2a0:	4642      	mov	r2, r8
    c2a2:	4648      	mov	r0, r9
    c2a4:	6869      	ldr	r1, [r5, #4]
    c2a6:	f00e fd7e 	bl	1ada6 <strncmp>
		if (adv_name_cmp(data->data,
    c2aa:	b950      	cbnz	r0, c2c2 <adv_data_found+0x7a>
			control->filter_match_cnt++;
    c2ac:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    c2ae:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
    c2b2:	3301      	adds	r3, #1
    c2b4:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    c2b6:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    c2b8:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
    c2bc:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
    c2be:	70a3      	strb	r3, [r4, #2]
    c2c0:	e7de      	b.n	c280 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c2c2:	3601      	adds	r6, #1
    c2c4:	e7e8      	b.n	c298 <adv_data_found+0x50>
	return bt_scan.scan_filters.short_name.enabled;
    c2c6:	4e3d      	ldr	r6, [pc, #244]	; (c3bc <adv_data_found+0x174>)
	if (is_short_name_filter_enabled()) {
    c2c8:	78f3      	ldrb	r3, [r6, #3]
    c2ca:	2b00      	cmp	r3, #0
    c2cc:	d0d8      	beq.n	c280 <adv_data_found+0x38>
	uint8_t data_len = data->data_len;
    c2ce:	78b3      	ldrb	r3, [r6, #2]
    c2d0:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    c2d4:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    c2d8:	18f7      	adds	r7, r6, r3
    c2da:	42be      	cmp	r6, r7
    c2dc:	d0d0      	beq.n	c280 <adv_data_found+0x38>
	if ((data_len >= short_name_min_len) &&
    c2de:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    c2e2:	4543      	cmp	r3, r8
    c2e4:	d812      	bhi.n	c30c <adv_data_found+0xc4>
    c2e6:	f106 0902 	add.w	r9, r6, #2
	    (strncmp(target_name, data, data_len) == 0)) {
    c2ea:	4642      	mov	r2, r8
    c2ec:	4648      	mov	r0, r9
    c2ee:	6869      	ldr	r1, [r5, #4]
    c2f0:	f00e fd59 	bl	1ada6 <strncmp>
	if ((data_len >= short_name_min_len) &&
    c2f4:	b950      	cbnz	r0, c30c <adv_data_found+0xc4>
			control->filter_match_cnt++;
    c2f6:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.short_name.name =
    c2f8:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
			control->filter_match_cnt++;
    c2fc:	3301      	adds	r3, #1
    c2fe:	7063      	strb	r3, [r4, #1]
			control->filter_status.short_name.match = true;
    c300:	2301      	movs	r3, #1
			control->filter_status.short_name.len = data_len;
    c302:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
			control->filter_status.short_name.match = true;
    c306:	f884 3020 	strb.w	r3, [r4, #32]
			control->filter_match = true;
    c30a:	e7d8      	b.n	c2be <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c30c:	3621      	adds	r6, #33	; 0x21
    c30e:	e7e4      	b.n	c2da <adv_data_found+0x92>
	return bt_scan.scan_filters.appearance.enabled;
    c310:	482a      	ldr	r0, [pc, #168]	; (c3bc <adv_data_found+0x174>)
	if (is_appearance_filter_enabled()) {
    c312:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
    c316:	2b00      	cmp	r3, #0
    c318:	d0b2      	beq.n	c280 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c31a:	2300      	movs	r3, #0
	const uint8_t counter =
    c31c:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
	uint8_t data_len = data->data_len;
    c320:	786f      	ldrb	r7, [r5, #1]
	for (size_t i = 0; i < counter; i++) {
    c322:	42b3      	cmp	r3, r6
    c324:	d2ac      	bcs.n	c280 <adv_data_found+0x38>
	if (data_len != sizeof(uint16_t)) {
    c326:	2f02      	cmp	r7, #2
    c328:	d113      	bne.n	c352 <adv_data_found+0x10a>
	if (decoded_appearance == *appearance) {
    c32a:	686a      	ldr	r2, [r5, #4]
    c32c:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    c330:	8812      	ldrh	r2, [r2, #0]
    c332:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    c334:	ba52      	rev16	r2, r2
    c336:	b292      	uxth	r2, r2
    c338:	4291      	cmp	r1, r2
    c33a:	d10a      	bne.n	c352 <adv_data_found+0x10a>
		if (find_appearance(data->data,
    c33c:	3312      	adds	r3, #18
    c33e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
			control->filter_status.appearance.appearance =
    c342:	6463      	str	r3, [r4, #68]	; 0x44
			control->filter_match_cnt++;
    c344:	7863      	ldrb	r3, [r4, #1]
    c346:	3301      	adds	r3, #1
    c348:	7063      	strb	r3, [r4, #1]
			control->filter_status.appearance.match = true;
    c34a:	2301      	movs	r3, #1
    c34c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			control->filter_match = true;
    c350:	e7b5      	b.n	c2be <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c352:	3301      	adds	r3, #1
    c354:	e7e5      	b.n	c322 <adv_data_found+0xda>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
    c356:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    c358:	4629      	mov	r1, r5
    c35a:	4620      	mov	r0, r4
    c35c:	f7ff ff1a 	bl	c194 <uuid_check>
		break;
    c360:	e78e      	b.n	c280 <adv_data_found+0x38>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
    c362:	2201      	movs	r2, #1
    c364:	e7f8      	b.n	c358 <adv_data_found+0x110>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    c366:	2202      	movs	r2, #2
    c368:	e7f6      	b.n	c358 <adv_data_found+0x110>
	return bt_scan.scan_filters.manufacturer_data.enabled;
    c36a:	f8df 8050 	ldr.w	r8, [pc, #80]	; c3bc <adv_data_found+0x174>
	if (is_manufacturer_data_filter_enabled()) {
    c36e:	f898 3027 	ldrb.w	r3, [r8, #39]	; 0x27
    c372:	2b00      	cmp	r3, #0
    c374:	d084      	beq.n	c280 <adv_data_found+0x38>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    c376:	4647      	mov	r7, r8
	for (size_t i = 0; i < counter; i++) {
    c378:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    c37a:	f817 9f26 	ldrb.w	r9, [r7, #38]!
	for (size_t i = 0; i < counter; i++) {
    c37e:	454e      	cmp	r6, r9
    c380:	f4bf af7e 	bcs.w	c280 <adv_data_found+0x38>
		if (adv_manufacturer_data_cmp(data->data,
    c384:	f897 2020 	ldrb.w	r2, [r7, #32]
	if (target_data_len > data_len) {
    c388:	786b      	ldrb	r3, [r5, #1]
    c38a:	4293      	cmp	r3, r2
    c38c:	d313      	bcc.n	c3b6 <adv_data_found+0x16e>
	if (memcmp(target_data, data, target_data_len) != 0) {
    c38e:	4638      	mov	r0, r7
    c390:	6869      	ldr	r1, [r5, #4]
    c392:	f00e fd19 	bl	1adc8 <memcmp>
    c396:	b970      	cbnz	r0, c3b6 <adv_data_found+0x16e>
				md_filter->manufacturer_data[i].data_len;
    c398:	eb06 1646 	add.w	r6, r6, r6, lsl #5
			control->filter_status.manufacturer_data.data =
    c39c:	64e7      	str	r7, [r4, #76]	; 0x4c
				md_filter->manufacturer_data[i].data_len;
    c39e:	4446      	add	r6, r8
			control->filter_status.manufacturer_data.len =
    c3a0:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
    c3a4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			control->filter_match_cnt++;
    c3a8:	7863      	ldrb	r3, [r4, #1]
    c3aa:	3301      	adds	r3, #1
    c3ac:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    c3ae:	2301      	movs	r3, #1
    c3b0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    c3b4:	e783      	b.n	c2be <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c3b6:	3601      	adds	r6, #1
    c3b8:	3721      	adds	r7, #33	; 0x21
    c3ba:	e7e0      	b.n	c37e <adv_data_found+0x136>
    c3bc:	2000a828 	.word	0x2000a828

0000c3c0 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    c3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3c2:	4605      	mov	r5, r0
    c3c4:	460e      	mov	r6, r1
    c3c6:	4617      	mov	r7, r2
	return list->head;
    c3c8:	4b08      	ldr	r3, [pc, #32]	; (c3ec <notify_filter_matched.constprop.0+0x2c>)
    c3ca:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c3cc:	b10c      	cbz	r4, c3d2 <notify_filter_matched.constprop.0+0x12>
    c3ce:	3c04      	subs	r4, #4
    c3d0:	b904      	cbnz	r4, c3d4 <notify_filter_matched.constprop.0+0x14>
}
    c3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
    c3d4:	6823      	ldr	r3, [r4, #0]
    c3d6:	681b      	ldr	r3, [r3, #0]
    c3d8:	b11b      	cbz	r3, c3e2 <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
    c3da:	463a      	mov	r2, r7
    c3dc:	4631      	mov	r1, r6
    c3de:	4628      	mov	r0, r5
    c3e0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c3e2:	1d23      	adds	r3, r4, #4
    c3e4:	d0f5      	beq.n	c3d2 <notify_filter_matched.constprop.0+0x12>
	return node->next;
    c3e6:	6864      	ldr	r4, [r4, #4]
    c3e8:	e7f0      	b.n	c3cc <notify_filter_matched.constprop.0+0xc>
    c3ea:	bf00      	nop
    c3ec:	2000a874 	.word	0x2000a874

0000c3f0 <bt_scan_cb_register>:
	if (!cb) {
    c3f0:	b150      	cbz	r0, c408 <bt_scan_cb_register+0x18>
	parent->next = child;
    c3f2:	2300      	movs	r3, #0
    c3f4:	6043      	str	r3, [r0, #4]
	return list->tail;
    c3f6:	4b05      	ldr	r3, [pc, #20]	; (c40c <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    c3f8:	1d02      	adds	r2, r0, #4
    c3fa:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    c3fc:	b911      	cbnz	r1, c404 <bt_scan_cb_register+0x14>
	list->head = node;
    c3fe:	e9c3 2200 	strd	r2, r2, [r3]
}
    c402:	4770      	bx	lr
	parent->next = child;
    c404:	600a      	str	r2, [r1, #0]
	list->tail = node;
    c406:	605a      	str	r2, [r3, #4]
}
    c408:	4770      	bx	lr
    c40a:	bf00      	nop
    c40c:	2000a874 	.word	0x2000a874

0000c410 <bt_scan_filter_add>:
{
    c410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c412:	4605      	mov	r5, r0
	if (!data) {
    c414:	460c      	mov	r4, r1
    c416:	2900      	cmp	r1, #0
    c418:	d048      	beq.n	c4ac <bt_scan_filter_add+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
    c41a:	f04f 32ff 	mov.w	r2, #4294967295
    c41e:	f04f 33ff 	mov.w	r3, #4294967295
    c422:	4824      	ldr	r0, [pc, #144]	; (c4b4 <bt_scan_filter_add+0xa4>)
    c424:	f00a fe18 	bl	17058 <z_impl_k_mutex_lock>
	switch (type) {
    c428:	2d03      	cmp	r5, #3
    c42a:	d00c      	beq.n	c446 <bt_scan_filter_add+0x36>
    c42c:	d938      	bls.n	c4a0 <bt_scan_filter_add+0x90>
    c42e:	3d04      	subs	r5, #4
		err = -EINVAL;
    c430:	2d01      	cmp	r5, #1
    c432:	bf94      	ite	ls
    c434:	f06f 040b 	mvnls.w	r4, #11
    c438:	f06f 0415 	mvnhi.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
    c43c:	481d      	ldr	r0, [pc, #116]	; (c4b4 <bt_scan_filter_add+0xa4>)
    c43e:	f00a fed7 	bl	171f0 <z_impl_k_mutex_unlock>
}
    c442:	4620      	mov	r0, r4
    c444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    c446:	4a1c      	ldr	r2, [pc, #112]	; (c4b8 <bt_scan_filter_add+0xa8>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    c448:	f892 3020 	ldrb.w	r3, [r2, #32]
    c44c:	bb43      	cbnz	r3, c4a0 <bt_scan_filter_add+0x90>
	switch (uuid->type) {
    c44e:	7823      	ldrb	r3, [r4, #0]
    c450:	2b01      	cmp	r3, #1
    c452:	d00c      	beq.n	c46e <bt_scan_filter_add+0x5e>
    c454:	2b02      	cmp	r3, #2
    c456:	d011      	beq.n	c47c <bt_scan_filter_add+0x6c>
    c458:	bb2b      	cbnz	r3, c4a6 <bt_scan_filter_add+0x96>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    c45a:	6820      	ldr	r0, [r4, #0]
    c45c:	f102 030c 	add.w	r3, r2, #12
    c460:	60d0      	str	r0, [r2, #12]
		uuid_filter[counter].uuid =
    c462:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
    c464:	2301      	movs	r3, #1
	return 0;
    c466:	2400      	movs	r4, #0
	bt_scan.scan_filters.uuid.cnt++;
    c468:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
    c46c:	e7e6      	b.n	c43c <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    c46e:	f102 030c 	add.w	r3, r2, #12
    c472:	e894 0003 	ldmia.w	r4, {r0, r1}
    c476:	e883 0003 	stmia.w	r3, {r0, r1}
    c47a:	e7f2      	b.n	c462 <bt_scan_filter_add+0x52>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    c47c:	4623      	mov	r3, r4
    c47e:	f102 040c 	add.w	r4, r2, #12
    c482:	4626      	mov	r6, r4
    c484:	f103 0710 	add.w	r7, r3, #16
    c488:	4625      	mov	r5, r4
    c48a:	6818      	ldr	r0, [r3, #0]
    c48c:	6859      	ldr	r1, [r3, #4]
    c48e:	3308      	adds	r3, #8
    c490:	c503      	stmia	r5!, {r0, r1}
    c492:	42bb      	cmp	r3, r7
    c494:	462c      	mov	r4, r5
    c496:	d1f7      	bne.n	c488 <bt_scan_filter_add+0x78>
    c498:	781b      	ldrb	r3, [r3, #0]
    c49a:	702b      	strb	r3, [r5, #0]
		uuid_filter[counter].uuid =
    c49c:	6096      	str	r6, [r2, #8]
		break;
    c49e:	e7e1      	b.n	c464 <bt_scan_filter_add+0x54>
		return -ENOMEM;
    c4a0:	f06f 040b 	mvn.w	r4, #11
    c4a4:	e7ca      	b.n	c43c <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
    c4a6:	f06f 0415 	mvn.w	r4, #21
    c4aa:	e7c7      	b.n	c43c <bt_scan_filter_add+0x2c>
		return -EINVAL;
    c4ac:	f06f 0415 	mvn.w	r4, #21
    c4b0:	e7c7      	b.n	c442 <bt_scan_filter_add+0x32>
    c4b2:	bf00      	nop
    c4b4:	2000866c 	.word	0x2000866c
    c4b8:	2000a828 	.word	0x2000a828

0000c4bc <bt_scan_filter_remove_all>:
{
    c4bc:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    c4be:	4c0c      	ldr	r4, [pc, #48]	; (c4f0 <bt_scan_filter_remove_all+0x34>)
    c4c0:	f04f 32ff 	mov.w	r2, #4294967295
    c4c4:	f04f 33ff 	mov.w	r3, #4294967295
    c4c8:	4620      	mov	r0, r4
    c4ca:	f00a fdc5 	bl	17058 <z_impl_k_mutex_lock>
	name_filter->cnt = 0;
    c4ce:	2200      	movs	r2, #0
    c4d0:	4b08      	ldr	r3, [pc, #32]	; (c4f4 <bt_scan_filter_remove_all+0x38>)
    c4d2:	701a      	strb	r2, [r3, #0]
	short_name_filter->cnt = 0;
    c4d4:	709a      	strb	r2, [r3, #2]
	addr_filter->cnt = 0;
    c4d6:	711a      	strb	r2, [r3, #4]
	uuid_filter->cnt = 0;
    c4d8:	f883 2020 	strb.w	r2, [r3, #32]
	appearance_filter->cnt = 0;
    c4dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	manufacturer_data_filter->cnt = 0;
    c4e0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	return z_impl_k_mutex_unlock(mutex);
    c4e4:	4620      	mov	r0, r4
}
    c4e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c4ea:	f00a be81 	b.w	171f0 <z_impl_k_mutex_unlock>
    c4ee:	bf00      	nop
    c4f0:	2000866c 	.word	0x2000866c
    c4f4:	2000a828 	.word	0x2000a828

0000c4f8 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    c4f8:	2200      	movs	r2, #0
    c4fa:	4b05      	ldr	r3, [pc, #20]	; (c510 <bt_scan_filter_disable+0x18>)
    c4fc:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    c4fe:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    c500:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    c502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
    c506:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    c50a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
    c50e:	4770      	bx	lr
    c510:	2000a828 	.word	0x2000a828

0000c514 <bt_scan_filter_enable>:
{
    c514:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    c516:	0683      	lsls	r3, r0, #26
    c518:	d025      	beq.n	c566 <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
    c51a:	f7ff ffed 	bl	c4f8 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    c51e:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    c522:	bf18      	it	ne
    c524:	2201      	movne	r2, #1
    c526:	4b11      	ldr	r3, [pc, #68]	; (c56c <bt_scan_filter_enable+0x58>)
    c528:	bf18      	it	ne
    c52a:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
    c52c:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    c52e:	bf44      	itt	mi
    c530:	2201      	movmi	r2, #1
    c532:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    c534:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    c536:	bf44      	itt	mi
    c538:	2201      	movmi	r2, #1
    c53a:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
    c53c:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    c53e:	bf44      	itt	mi
    c540:	2201      	movmi	r2, #1
    c542:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    c546:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    c548:	bf44      	itt	mi
    c54a:	2201      	movmi	r2, #1
    c54c:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    c550:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    c552:	bf48      	it	mi
    c554:	2201      	movmi	r2, #1
	return 0;
    c556:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    c55a:	bf48      	it	mi
    c55c:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	filters->all_mode = match_all;
    c560:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
}
    c564:	bd08      	pop	{r3, pc}
		return -EINVAL;
    c566:	f06f 0015 	mvn.w	r0, #21
    c56a:	e7fb      	b.n	c564 <bt_scan_filter_enable+0x50>
    c56c:	2000a828 	.word	0x2000a828

0000c570 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    c570:	b570      	push	{r4, r5, r6, lr}
    c572:	460e      	mov	r6, r1
    c574:	b086      	sub	sp, #24
    c576:	4605      	mov	r5, r0
	bt_scan_stop();
    c578:	f00d feaa 	bl	1a2d0 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    c57c:	4b18      	ldr	r3, [pc, #96]	; (c5e0 <scan_connect_with_target.part.0+0x70>)
    c57e:	ac02      	add	r4, sp, #8
    c580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    c582:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    c586:	4621      	mov	r1, r4
    c588:	ab01      	add	r3, sp, #4
    c58a:	4630      	mov	r0, r6
    c58c:	4a15      	ldr	r2, [pc, #84]	; (c5e4 <scan_connect_with_target.part.0+0x74>)
    c58e:	f004 fab9 	bl	10b04 <bt_conn_le_create>
	if (err) {
    c592:	4b15      	ldr	r3, [pc, #84]	; (c5e8 <scan_connect_with_target.part.0+0x78>)
		notify_connecting_error(&control->device_info);
    c594:	3508      	adds	r5, #8
	return list->head;
    c596:	681c      	ldr	r4, [r3, #0]
	if (err) {
    c598:	b168      	cbz	r0, c5b6 <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c59a:	b10c      	cbz	r4, c5a0 <scan_connect_with_target.part.0+0x30>
    c59c:	3c04      	subs	r4, #4
    c59e:	b90c      	cbnz	r4, c5a4 <scan_connect_with_target.part.0+0x34>
}
    c5a0:	b006      	add	sp, #24
    c5a2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
    c5a4:	6823      	ldr	r3, [r4, #0]
    c5a6:	689b      	ldr	r3, [r3, #8]
    c5a8:	b10b      	cbz	r3, c5ae <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
    c5aa:	4628      	mov	r0, r5
    c5ac:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c5ae:	1d22      	adds	r2, r4, #4
    c5b0:	d0f6      	beq.n	c5a0 <scan_connect_with_target.part.0+0x30>
	return node->next;
    c5b2:	6864      	ldr	r4, [r4, #4]
    c5b4:	e7f1      	b.n	c59a <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c5b6:	b91c      	cbnz	r4, c5c0 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
    c5b8:	9801      	ldr	r0, [sp, #4]
    c5ba:	f004 f8e5 	bl	10788 <bt_conn_unref>
    c5be:	e7ef      	b.n	c5a0 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
    c5c0:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c5c2:	3c04      	subs	r4, #4
    c5c4:	2c00      	cmp	r4, #0
    c5c6:	d0f7      	beq.n	c5b8 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
    c5c8:	6823      	ldr	r3, [r4, #0]
    c5ca:	68db      	ldr	r3, [r3, #12]
    c5cc:	b113      	cbz	r3, c5d4 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
    c5ce:	4631      	mov	r1, r6
    c5d0:	4628      	mov	r0, r5
    c5d2:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c5d4:	1d23      	adds	r3, r4, #4
    c5d6:	d0ef      	beq.n	c5b8 <scan_connect_with_target.part.0+0x48>
	return node->next;
    c5d8:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c5da:	2c00      	cmp	r4, #0
    c5dc:	d1f1      	bne.n	c5c2 <scan_connect_with_target.part.0+0x52>
    c5de:	e7eb      	b.n	c5b8 <scan_connect_with_target.part.0+0x48>
    c5e0:	0001d7f4 	.word	0x0001d7f4
    c5e4:	2000a86c 	.word	0x2000a86c
    c5e8:	2000a874 	.word	0x2000a874

0000c5ec <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
    c5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    c5f0:	4c54      	ldr	r4, [pc, #336]	; (c744 <scan_recv+0x158>)
{
    c5f2:	b097      	sub	sp, #92	; 0x5c
	memset(&scan_control, 0, sizeof(scan_control));
    c5f4:	2254      	movs	r2, #84	; 0x54
{
    c5f6:	4606      	mov	r6, r0
    c5f8:	460d      	mov	r5, r1
	memset(&scan_control, 0, sizeof(scan_control));
    c5fa:	a801      	add	r0, sp, #4
    c5fc:	2100      	movs	r1, #0
    c5fe:	f00e fc1f 	bl	1ae40 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    c602:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	return bt_scan.scan_filters.addr.enabled;
    c606:	7962      	ldrb	r2, [r4, #5]
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    c608:	f88d 3007 	strb.w	r3, [sp, #7]
	control->filter_cnt = 0;
    c60c:	2300      	movs	r3, #0
    c60e:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_addr_filter_enabled()) {
    c612:	b112      	cbz	r2, c61a <scan_recv+0x2e>
		control->filter_cnt++;
    c614:	2301      	movs	r3, #1
    c616:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_name_filter_enabled()) {
    c61a:	7863      	ldrb	r3, [r4, #1]
    c61c:	b123      	cbz	r3, c628 <scan_recv+0x3c>
		control->filter_cnt++;
    c61e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c622:	3301      	adds	r3, #1
    c624:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_short_name_filter_enabled()) {
    c628:	78e3      	ldrb	r3, [r4, #3]
    c62a:	b123      	cbz	r3, c636 <scan_recv+0x4a>
		control->filter_cnt++;
    c62c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c630:	3301      	adds	r3, #1
    c632:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_uuid_filter_enabled()) {
    c636:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    c63a:	b123      	cbz	r3, c646 <scan_recv+0x5a>
		control->filter_cnt++;
    c63c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c640:	3301      	adds	r3, #1
    c642:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_appearance_filter_enabled()) {
    c646:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    c64a:	b123      	cbz	r3, c656 <scan_recv+0x6a>
		control->filter_cnt++;
    c64c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c650:	3301      	adds	r3, #1
    c652:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_manufacturer_data_filter_enabled()) {
    c656:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    c65a:	b123      	cbz	r3, c666 <scan_recv+0x7a>
		control->filter_cnt++;
    c65c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c660:	3301      	adds	r3, #1
    c662:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
    c666:	7a33      	ldrb	r3, [r6, #8]
    c668:	f003 0301 	and.w	r3, r3, #1
    c66c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_addr_filter_enabled()) {
    c670:	b1ea      	cbz	r2, c6ae <scan_recv+0xc2>
	for (size_t i = 0; i < counter; i++) {
    c672:	f04f 0800 	mov.w	r8, #0

	/* Check the address filter. */
	check_addr(&scan_control, info->addr);
    c676:	f8d6 a000 	ldr.w	sl, [r6]
	uint8_t counter = bt_scan.scan_filters.addr.cnt;
    c67a:	f894 9004 	ldrb.w	r9, [r4, #4]
	for (size_t i = 0; i < counter; i++) {
    c67e:	4f32      	ldr	r7, [pc, #200]	; (c748 <scan_recv+0x15c>)
    c680:	45c8      	cmp	r8, r9
    c682:	d214      	bcs.n	c6ae <scan_recv+0xc2>
	return memcmp(a, b, sizeof(*a));
    c684:	4639      	mov	r1, r7
    c686:	2207      	movs	r2, #7
    c688:	4650      	mov	r0, sl
    c68a:	f00e fb9d 	bl	1adc8 <memcmp>
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
    c68e:	46bb      	mov	fp, r7
    c690:	3707      	adds	r7, #7
    c692:	2800      	cmp	r0, #0
    c694:	d13a      	bne.n	c70c <scan_recv+0x120>
			control->filter_match_cnt++;
    c696:	f89d 3005 	ldrb.w	r3, [sp, #5]
			control->filter_status.addr.addr = &addr[i];
    c69a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
			control->filter_match_cnt++;
    c69e:	3301      	adds	r3, #1
    c6a0:	f88d 3005 	strb.w	r3, [sp, #5]
			control->filter_status.addr.match = true;
    c6a4:	2301      	movs	r3, #1
    c6a6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			control->filter_match = true;
    c6aa:	f88d 3006 	strb.w	r3, [sp, #6]
	state->offset = net_buf_simple_headroom(buf);
    c6ae:	4628      	mov	r0, r5
    c6b0:	f00f fe91 	bl	1c3d6 <net_buf_simple_headroom>
    c6b4:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    c6b6:	4925      	ldr	r1, [pc, #148]	; (c74c <scan_recv+0x160>)
    c6b8:	4628      	mov	r0, r5
    c6ba:	aa01      	add	r2, sp, #4
	state->len = buf->len;
    c6bc:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    c6c0:	f002 fb1c 	bl	ecfc <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    c6c4:	4b22      	ldr	r3, [pc, #136]	; (c750 <scan_recv+0x164>)
	buf->data = buf->__buf + state->offset;
    c6c6:	68a8      	ldr	r0, [r5, #8]
	scan_control.device_info.adv_data = ad;
    c6c8:	e9cd 3504 	strd	r3, r5, [sp, #16]
	if (control->all_mode &&
    c6cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c6d0:	fa10 f787 	uxtah	r7, r0, r7
    c6d4:	602f      	str	r7, [r5, #0]
	buf->len = state->len;
    c6d6:	f8a5 8004 	strh.w	r8, [r5, #4]
	scan_control.device_info.recv_info = info;
    c6da:	9603      	str	r6, [sp, #12]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
    c6dc:	6835      	ldr	r5, [r6, #0]
	if (control->all_mode &&
    c6de:	b1c3      	cbz	r3, c712 <scan_recv+0x126>
    c6e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c6e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c6e8:	429a      	cmp	r2, r3
    c6ea:	d116      	bne.n	c71a <scan_recv+0x12e>
		notify_filter_matched(&control->device_info,
    c6ec:	f89d 2008 	ldrb.w	r2, [sp, #8]
    c6f0:	a906      	add	r1, sp, #24
    c6f2:	a803      	add	r0, sp, #12
    c6f4:	f7ff fe64 	bl	c3c0 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    c6f8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    c6fc:	b11b      	cbz	r3, c706 <scan_recv+0x11a>
    c6fe:	4629      	mov	r1, r5
    c700:	a801      	add	r0, sp, #4
    c702:	f7ff ff35 	bl	c570 <scan_connect_with_target.part.0>
}
    c706:	b017      	add	sp, #92	; 0x5c
    c708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < counter; i++) {
    c70c:	f108 0801 	add.w	r8, r8, #1
    c710:	e7b6      	b.n	c680 <scan_recv+0x94>
	else if ((!control->all_mode) && control->filter_match) {
    c712:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c716:	2b00      	cmp	r3, #0
    c718:	d1e8      	bne.n	c6ec <scan_recv+0x100>
	return list->head;
    c71a:	4b0e      	ldr	r3, [pc, #56]	; (c754 <scan_recv+0x168>)
    c71c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c71e:	2c00      	cmp	r4, #0
    c720:	d0f1      	beq.n	c706 <scan_recv+0x11a>
		notify_filter_no_match(&control->device_info,
    c722:	f89d 5008 	ldrb.w	r5, [sp, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c726:	3c04      	subs	r4, #4
    c728:	2c00      	cmp	r4, #0
    c72a:	d0ec      	beq.n	c706 <scan_recv+0x11a>
		if (cb->cb_addr->filter_no_match) {
    c72c:	6823      	ldr	r3, [r4, #0]
    c72e:	685b      	ldr	r3, [r3, #4]
    c730:	b113      	cbz	r3, c738 <scan_recv+0x14c>
			cb->cb_addr->filter_no_match(device_info, connectable);
    c732:	4629      	mov	r1, r5
    c734:	a803      	add	r0, sp, #12
    c736:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c738:	1d23      	adds	r3, r4, #4
    c73a:	d0e4      	beq.n	c706 <scan_recv+0x11a>
	return node->next;
    c73c:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c73e:	2c00      	cmp	r4, #0
    c740:	d1f1      	bne.n	c726 <scan_recv+0x13a>
    c742:	e7e0      	b.n	c706 <scan_recv+0x11a>
    c744:	2000a828 	.word	0x2000a828
    c748:	2000a82c 	.word	0x2000a82c
    c74c:	0000c249 	.word	0x0000c249
    c750:	2000a86c 	.word	0x2000a86c
    c754:	2000a874 	.word	0x2000a874

0000c758 <bt_scan_init>:
{
    c758:	b570      	push	{r4, r5, r6, lr}
    c75a:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    c75c:	4c14      	ldr	r4, [pc, #80]	; (c7b0 <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
    c75e:	4815      	ldr	r0, [pc, #84]	; (c7b4 <bt_scan_init+0x5c>)
    c760:	f003 fcf8 	bl	10154 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    c764:	222c      	movs	r2, #44	; 0x2c
    c766:	2100      	movs	r1, #0
    c768:	4620      	mov	r0, r4
    c76a:	f00e fb69 	bl	1ae40 <memset>
	if (init) {
    c76e:	b1be      	cbz	r6, c7a0 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
    c770:	7933      	ldrb	r3, [r6, #4]
		if (init->scan_param) {
    c772:	6835      	ldr	r5, [r6, #0]
		bt_scan.connect_if_match = init->connect_if_match;
    c774:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
    c778:	b15d      	cbz	r5, c792 <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
    c77a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c77c:	3430      	adds	r4, #48	; 0x30
    c77e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c780:	682b      	ldr	r3, [r5, #0]
    c782:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
    c784:	68b2      	ldr	r2, [r6, #8]
    c786:	b13a      	cbz	r2, c798 <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
    c788:	4b0b      	ldr	r3, [pc, #44]	; (c7b8 <bt_scan_init+0x60>)
    c78a:	6810      	ldr	r0, [r2, #0]
    c78c:	6851      	ldr	r1, [r2, #4]
    c78e:	c303      	stmia	r3!, {r0, r1}
}
    c790:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
    c792:	f7ff fce1 	bl	c158 <scan_default_param_set>
    c796:	e7f5      	b.n	c784 <bt_scan_init+0x2c>
}
    c798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
    c79c:	f7ff bcee 	b.w	c17c <scan_default_conn_param_set>
		scan_default_param_set();
    c7a0:	f7ff fcda 	bl	c158 <scan_default_param_set>
		scan_default_conn_param_set();
    c7a4:	f7ff fcea 	bl	c17c <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
    c7a8:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
    c7ac:	e7f0      	b.n	c790 <bt_scan_init+0x38>
    c7ae:	bf00      	nop
    c7b0:	2000a828 	.word	0x2000a828
    c7b4:	20008298 	.word	0x20008298
    c7b8:	2000a86c 	.word	0x2000a86c

0000c7bc <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    c7bc:	b108      	cbz	r0, c7c2 <bt_scan_start+0x6>
    c7be:	2801      	cmp	r0, #1
    c7c0:	d106      	bne.n	c7d0 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    c7c2:	4b05      	ldr	r3, [pc, #20]	; (c7d8 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    c7c4:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    c7c6:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    c7ca:	4804      	ldr	r0, [pc, #16]	; (c7dc <bt_scan_start+0x20>)
    c7cc:	f003 bc48 	b.w	10060 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    c7d0:	f06f 0015 	mvn.w	r0, #21
    c7d4:	4770      	bx	lr
    c7d6:	bf00      	nop
    c7d8:	2000a828 	.word	0x2000a828
    c7dc:	2000a858 	.word	0x2000a858

0000c7e0 <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
    c7e0:	1e4b      	subs	r3, r1, #1
    c7e2:	4259      	negs	r1, r3
    c7e4:	4159      	adcs	r1, r3
    c7e6:	4b01      	ldr	r3, [pc, #4]	; (c7ec <lbslc_ccc_cfg_changed+0xc>)
    c7e8:	7019      	strb	r1, [r3, #0]
}
    c7ea:	4770      	bx	lr
    c7ec:	2000c117 	.word	0x2000c117

0000c7f0 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    c7f0:	b510      	push	{r4, lr}
    c7f2:	461c      	mov	r4, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.led_cb) {
    c7f4:	4b03      	ldr	r3, [pc, #12]	; (c804 <write_led+0x14>)
    c7f6:	681b      	ldr	r3, [r3, #0]
    c7f8:	b10b      	cbz	r3, c7fe <write_led+0xe>
		lbs_cb.led_cb(*(bool *)buf);
    c7fa:	7810      	ldrb	r0, [r2, #0]
    c7fc:	4798      	blx	r3
	}

	return len;
}
    c7fe:	4620      	mov	r0, r4
    c800:	bd10      	pop	{r4, pc}
    c802:	bf00      	nop
    c804:	2000a87c 	.word	0x2000a87c

0000c808 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
    c808:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    c80c:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.button_cb) {
    c80e:	4b0d      	ldr	r3, [pc, #52]	; (c844 <read_button+0x3c>)
{
    c810:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    c812:	6858      	ldr	r0, [r3, #4]
{
    c814:	460c      	mov	r4, r1
    c816:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    c818:	b180      	cbz	r0, c83c <read_button+0x34>
	const char *value = attr->user_data;
    c81a:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
    c81e:	4780      	blx	r0
    c820:	4b09      	ldr	r3, [pc, #36]	; (c848 <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    c822:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    c824:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    c826:	2301      	movs	r3, #1
    c828:	e9cd 8301 	strd	r8, r3, [sp, #4]
    c82c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    c830:	4621      	mov	r1, r4
    c832:	9300      	str	r3, [sp, #0]
    c834:	4628      	mov	r0, r5
    c836:	463b      	mov	r3, r7
    c838:	f00f fc2b 	bl	1c092 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
    c83c:	b004      	add	sp, #16
    c83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c842:	bf00      	nop
    c844:	2000a87c 	.word	0x2000a87c
    c848:	2000c116 	.word	0x2000c116

0000c84c <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
    c84c:	b120      	cbz	r0, c858 <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
    c84e:	4b03      	ldr	r3, [pc, #12]	; (c85c <bt_lbs_init+0x10>)
    c850:	6802      	ldr	r2, [r0, #0]
    c852:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    c854:	6842      	ldr	r2, [r0, #4]
    c856:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    c858:	2000      	movs	r0, #0
    c85a:	4770      	bx	lr
    c85c:	2000a87c 	.word	0x2000a87c

0000c860 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
    c860:	b500      	push	{lr}
	if (!notify_enabled) {
    c862:	4b0e      	ldr	r3, [pc, #56]	; (c89c <bt_lbs_send_button_state+0x3c>)
{
    c864:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
    c866:	781b      	ldrb	r3, [r3, #0]
{
    c868:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
    c86c:	b19b      	cbz	r3, c896 <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    c86e:	2100      	movs	r1, #0
    c870:	2218      	movs	r2, #24
    c872:	a802      	add	r0, sp, #8
    c874:	f00e fae4 	bl	1ae40 <memset>

	params.attr = attr;
    c878:	4b09      	ldr	r3, [pc, #36]	; (c8a0 <bt_lbs_send_button_state+0x40>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    c87a:	2000      	movs	r0, #0
	params.attr = attr;
    c87c:	9303      	str	r3, [sp, #12]
	params.data = data;
    c87e:	f10d 0307 	add.w	r3, sp, #7
    c882:	9304      	str	r3, [sp, #16]
	params.len = len;
    c884:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    c886:	a902      	add	r1, sp, #8
	params.len = len;
    c888:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    c88c:	f006 fd82 	bl	13394 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
    c890:	b009      	add	sp, #36	; 0x24
    c892:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    c896:	f06f 000c 	mvn.w	r0, #12
    c89a:	e7f9      	b.n	c890 <bt_lbs_send_button_state+0x30>
    c89c:	2000c117 	.word	0x2000c117
    c8a0:	0001da9c 	.word	0x0001da9c

0000c8a4 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    c8a4:	2303      	movs	r3, #3
static void _DoInit(void) {
    c8a6:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    c8a8:	4c10      	ldr	r4, [pc, #64]	; (c8ec <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    c8aa:	4a11      	ldr	r2, [pc, #68]	; (c8f0 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    c8ac:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    c8b0:	4b10      	ldr	r3, [pc, #64]	; (c8f4 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    c8b2:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    c8b4:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    c8b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    c8ba:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    c8bc:	4a0e      	ldr	r2, [pc, #56]	; (c8f8 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    c8be:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    c8c0:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    c8c2:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    c8c4:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    c8c6:	490d      	ldr	r1, [pc, #52]	; (c8fc <_DoInit+0x58>)
    c8c8:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    c8ca:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    c8cc:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    c8ce:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    c8d0:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    c8d2:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    c8d4:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    c8d6:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    c8d8:	f00e fa2d 	bl	1ad36 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    c8dc:	4620      	mov	r0, r4
    c8de:	4908      	ldr	r1, [pc, #32]	; (c900 <_DoInit+0x5c>)
    c8e0:	f00e fa29 	bl	1ad36 <strcpy>
  p->acID[6] = ' ';
    c8e4:	2320      	movs	r3, #32
    c8e6:	71a3      	strb	r3, [r4, #6]
}
    c8e8:	bd10      	pop	{r4, pc}
    c8ea:	bf00      	nop
    c8ec:	2000a884 	.word	0x2000a884
    c8f0:	0001f39d 	.word	0x0001f39d
    c8f4:	2000c128 	.word	0x2000c128
    c8f8:	2000c118 	.word	0x2000c118
    c8fc:	0001f3a6 	.word	0x0001f3a6
    c900:	0001f3aa 	.word	0x0001f3aa

0000c904 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    c904:	b570      	push	{r4, r5, r6, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    c906:	2418      	movs	r4, #24
    c908:	fb00 4504 	mla	r5, r0, r4, r4
    c90c:	4b14      	ldr	r3, [pc, #80]	; (c960 <SEGGER_RTT_WriteNoLock+0x5c>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    c90e:	4616      	mov	r6, r2
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    c910:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    c912:	fb04 3300 	mla	r3, r4, r0, r3
    c916:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    c918:	2c01      	cmp	r4, #1
    c91a:	d00e      	beq.n	c93a <SEGGER_RTT_WriteNoLock+0x36>
    c91c:	2c02      	cmp	r4, #2
    c91e:	d018      	beq.n	c952 <SEGGER_RTT_WriteNoLock+0x4e>
    c920:	b9e4      	cbnz	r4, c95c <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    c922:	4628      	mov	r0, r5
    c924:	f00d fcd6 	bl	1a2d4 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    c928:	4286      	cmp	r6, r0
    c92a:	d804      	bhi.n	c936 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    c92c:	4632      	mov	r2, r6
    c92e:	4628      	mov	r0, r5
    c930:	f00d fcd9 	bl	1a2e6 <_WriteNoCheck>
    c934:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    c936:	4620      	mov	r0, r4
    c938:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    c93a:	4628      	mov	r0, r5
    c93c:	f00d fcca 	bl	1a2d4 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    c940:	4286      	cmp	r6, r0
    c942:	4634      	mov	r4, r6
    c944:	bf28      	it	cs
    c946:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    c948:	4628      	mov	r0, r5
    c94a:	4622      	mov	r2, r4
    c94c:	f00d fccb 	bl	1a2e6 <_WriteNoCheck>
    break;
    c950:	e7f1      	b.n	c936 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    c952:	4628      	mov	r0, r5
}
    c954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    c958:	f00d bce1 	b.w	1a31e <_WriteBlocking>
  switch (pRing->Flags) {
    c95c:	2400      	movs	r4, #0
  return Status;
    c95e:	e7ea      	b.n	c936 <SEGGER_RTT_WriteNoLock+0x32>
    c960:	2000a884 	.word	0x2000a884

0000c964 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    c964:	4904      	ldr	r1, [pc, #16]	; (c978 <sub_bytes+0x14>)
    c966:	1e43      	subs	r3, r0, #1
    c968:	300f      	adds	r0, #15
    c96a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c96e:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    c970:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    c972:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    c974:	d1f9      	bne.n	c96a <sub_bytes+0x6>
	}
}
    c976:	4770      	bx	lr
    c978:	0001f3b1 	.word	0x0001f3b1

0000c97c <tc_aes128_set_encrypt_key>:
{
    c97c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c97e:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    c980:	4e26      	ldr	r6, [pc, #152]	; (ca1c <tc_aes128_set_encrypt_key+0xa0>)
{
    c982:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    c984:	ad01      	add	r5, sp, #4
{
    c986:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    c988:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c98a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c98c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c98e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c990:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    c994:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    c998:	4638      	mov	r0, r7
    c99a:	2f00      	cmp	r7, #0
    c99c:	d039      	beq.n	ca12 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    c99e:	2c00      	cmp	r4, #0
    c9a0:	d039      	beq.n	ca16 <tc_aes128_set_encrypt_key+0x9a>
    c9a2:	1f38      	subs	r0, r7, #4
    c9a4:	4602      	mov	r2, r0
    c9a6:	4621      	mov	r1, r4
    c9a8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    c9aa:	784b      	ldrb	r3, [r1, #1]
    c9ac:	780d      	ldrb	r5, [r1, #0]
    c9ae:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c9b0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    c9b4:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    c9b6:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c9b8:	432b      	orrs	r3, r5
    c9ba:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    c9be:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    c9c0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    c9c4:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    c9c8:	d1ef      	bne.n	c9aa <tc_aes128_set_encrypt_key+0x2e>
    c9ca:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    c9cc:	4c14      	ldr	r4, [pc, #80]	; (ca20 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    c9ce:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    c9d0:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    c9d2:	d116      	bne.n	ca02 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    c9d4:	f3c3 4207 	ubfx	r2, r3, #16, #8
    c9d8:	5ca5      	ldrb	r5, [r4, r2]
    c9da:	0e1a      	lsrs	r2, r3, #24
    c9dc:	5ca2      	ldrb	r2, [r4, r2]
    c9de:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    c9e2:	f3c3 2507 	ubfx	r5, r3, #8, #8
    c9e6:	5d65      	ldrb	r5, [r4, r5]
    c9e8:	b2db      	uxtb	r3, r3
    c9ea:	5ce3      	ldrb	r3, [r4, r3]
    c9ec:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    c9f0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    c9f4:	ad0c      	add	r5, sp, #48	; 0x30
    c9f6:	f021 0303 	bic.w	r3, r1, #3
    c9fa:	442b      	add	r3, r5
    c9fc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    ca00:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    ca02:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    ca06:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    ca08:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    ca0a:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    ca0c:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    ca0e:	d1de      	bne.n	c9ce <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    ca10:	2001      	movs	r0, #1
}
    ca12:	b00d      	add	sp, #52	; 0x34
    ca14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    ca16:	4620      	mov	r0, r4
    ca18:	e7fb      	b.n	ca12 <tc_aes128_set_encrypt_key+0x96>
    ca1a:	bf00      	nop
    ca1c:	0001d804 	.word	0x0001d804
    ca20:	0001f3b1 	.word	0x0001f3b1

0000ca24 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    ca24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    ca28:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    ca2a:	6803      	ldr	r3, [r0, #0]
{
    ca2c:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    ca2e:	9302      	str	r3, [sp, #8]
    ca30:	6843      	ldr	r3, [r0, #4]
    ca32:	f8df a1b8 	ldr.w	sl, [pc, #440]	; cbec <compress+0x1c8>
    ca36:	9303      	str	r3, [sp, #12]
    ca38:	6883      	ldr	r3, [r0, #8]
    ca3a:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    ca3e:	9304      	str	r3, [sp, #16]
    ca40:	68c3      	ldr	r3, [r0, #12]
    ca42:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    ca44:	6903      	ldr	r3, [r0, #16]
    ca46:	9306      	str	r3, [sp, #24]
    ca48:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    ca4a:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    ca4e:	9307      	str	r3, [sp, #28]
    ca50:	6983      	ldr	r3, [r0, #24]
    ca52:	9308      	str	r3, [sp, #32]
    ca54:	69c3      	ldr	r3, [r0, #28]
    ca56:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
    ca5a:	4698      	mov	r8, r3
    ca5c:	9309      	str	r3, [sp, #36]	; 0x24
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    ca5e:	9b04      	ldr	r3, [sp, #16]
    ca60:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    ca62:	59cd      	ldr	r5, [r1, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    ca64:	ab0c      	add	r3, sp, #48	; 0x30
    ca66:	ba2d      	rev	r5, r5
    ca68:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    ca6a:	f85a 3b04 	ldr.w	r3, [sl], #4
	for (i = 0; i < 16; ++i) {
    ca6e:	3704      	adds	r7, #4
    ca70:	eb05 0903 	add.w	r9, r5, r3
	return (((a) >> n) | ((a) << (32 - n)));
    ca74:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ca78:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    ca7c:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    ca80:	444d      	add	r5, r9
    ca82:	ea2b 0302 	bic.w	r3, fp, r2
    ca86:	ea02 090c 	and.w	r9, r2, ip
    ca8a:	ea83 0309 	eor.w	r3, r3, r9
    ca8e:	442b      	add	r3, r5
		t2 = Sigma0(a) + Maj(a, b, c);
    ca90:	9d00      	ldr	r5, [sp, #0]
    ca92:	f8dd 9000 	ldr.w	r9, [sp]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    ca96:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    ca98:	4075      	eors	r5, r6
	return (((a) >> n) | ((a) << (32 - n)));
    ca9a:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    ca9e:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    caa2:	4025      	ands	r5, r4
    caa4:	ea06 0909 	and.w	r9, r6, r9
    caa8:	ea85 0509 	eor.w	r5, r5, r9
    caac:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    cab0:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    cab2:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    cab4:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    cab8:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    caba:	f8dd e000 	ldr.w	lr, [sp]
    cabe:	46d8      	mov	r8, fp
    cac0:	f040 8085 	bne.w	cbce <compress+0x1aa>
    cac4:	f04f 0a10 	mov.w	sl, #16
    cac8:	4949      	ldr	r1, [pc, #292]	; (cbf0 <compress+0x1cc>)
    caca:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    cacc:	4651      	mov	r1, sl
    cace:	f10a 0a01 	add.w	sl, sl, #1
    cad2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    cad6:	f00a 070f 	and.w	r7, sl, #15
    cada:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    cade:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cae2:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    cae6:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    caea:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    caec:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    caf0:	f101 070e 	add.w	r7, r1, #14
    caf4:	f007 070f 	and.w	r7, r7, #15
    caf8:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    cafc:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cb00:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    cb02:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    cb06:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    cb0a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cb0e:	f001 010f 	and.w	r1, r1, #15
    cb12:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    cb16:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    cb1a:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    cb1e:	f851 1c40 	ldr.w	r1, [r1, #-64]
    cb22:	f859 ec40 	ldr.w	lr, [r9, #-64]
	for ( ; i < 64; ++i) {
    cb26:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cb2a:	4471      	add	r1, lr
		s0 = sigma0(s0);
    cb2c:	f8dd e004 	ldr.w	lr, [sp, #4]
    cb30:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    cb34:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cb38:	4441      	add	r1, r8
		s1 = sigma1(s1);
    cb3a:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cb3e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cb40:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cb42:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cb46:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    cb4a:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cb4e:	ea05 0802 	and.w	r8, r5, r2
    cb52:	970a      	str	r7, [sp, #40]	; 0x28
    cb54:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    cb58:	ea2c 0705 	bic.w	r7, ip, r5
    cb5c:	ea87 0708 	eor.w	r7, r7, r8
    cb60:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    cb64:	444f      	add	r7, r9
    cb66:	4477      	add	r7, lr
    cb68:	4439      	add	r1, r7
    cb6a:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
    cb6c:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    cb70:	ea84 0b06 	eor.w	fp, r4, r6
    cb74:	ea0b 0b03 	and.w	fp, fp, r3
    cb78:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    cb7c:	ea04 0e06 	and.w	lr, r4, r6
		h = g; g = f; f = e; e = d + t1;
    cb80:	f8dd 8000 	ldr.w	r8, [sp]
		t2 = Sigma0(a) + Maj(a, b, c);
    cb84:	ea8b 0e0e 	eor.w	lr, fp, lr
    cb88:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    cb8c:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
    cb8e:	4488      	add	r8, r1
		d = c; c = b; b = a; a = t1 + t2;
    cb90:	46e3      	mov	fp, ip
    cb92:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    cb94:	9600      	str	r6, [sp, #0]
    cb96:	d121      	bne.n	cbdc <compress+0x1b8>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    cb98:	9f02      	ldr	r7, [sp, #8]
    cb9a:	440f      	add	r7, r1
    cb9c:	9903      	ldr	r1, [sp, #12]
    cb9e:	6007      	str	r7, [r0, #0]
    cba0:	4419      	add	r1, r3
    cba2:	9b04      	ldr	r3, [sp, #16]
    cba4:	6041      	str	r1, [r0, #4]
    cba6:	4423      	add	r3, r4
    cba8:	6083      	str	r3, [r0, #8]
    cbaa:	9b05      	ldr	r3, [sp, #20]
    cbac:	4433      	add	r3, r6
    cbae:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    cbb0:	9b06      	ldr	r3, [sp, #24]
    cbb2:	4443      	add	r3, r8
    cbb4:	6103      	str	r3, [r0, #16]
    cbb6:	9b07      	ldr	r3, [sp, #28]
    cbb8:	442b      	add	r3, r5
    cbba:	6143      	str	r3, [r0, #20]
    cbbc:	9b08      	ldr	r3, [sp, #32]
    cbbe:	4413      	add	r3, r2
    cbc0:	6183      	str	r3, [r0, #24]
    cbc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cbc4:	4463      	add	r3, ip
    cbc6:	61c3      	str	r3, [r0, #28]
}
    cbc8:	b01d      	add	sp, #116	; 0x74
    cbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbce:	46e3      	mov	fp, ip
    cbd0:	9600      	str	r6, [sp, #0]
    cbd2:	4694      	mov	ip, r2
    cbd4:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
    cbd6:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
    cbd8:	461c      	mov	r4, r3
    cbda:	e742      	b.n	ca62 <compress+0x3e>
    cbdc:	4694      	mov	ip, r2
    cbde:	4626      	mov	r6, r4
    cbe0:	462a      	mov	r2, r5
    cbe2:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    cbe4:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    cbe6:	460b      	mov	r3, r1
    cbe8:	e770      	b.n	cacc <compress+0xa8>
    cbea:	bf00      	nop
    cbec:	0001daec 	.word	0x0001daec
    cbf0:	0001db2c 	.word	0x0001db2c

0000cbf4 <tc_sha256_init>:
{
    cbf4:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    cbf6:	4604      	mov	r4, r0
    cbf8:	b1c8      	cbz	r0, cc2e <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    cbfa:	2270      	movs	r2, #112	; 0x70
    cbfc:	2100      	movs	r1, #0
    cbfe:	f00d fbcb 	bl	1a398 <_set>
	s->iv[1] = 0xbb67ae85;
    cc02:	4b0b      	ldr	r3, [pc, #44]	; (cc30 <tc_sha256_init+0x3c>)
    cc04:	4a0b      	ldr	r2, [pc, #44]	; (cc34 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    cc06:	490c      	ldr	r1, [pc, #48]	; (cc38 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    cc08:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    cc0c:	4b0b      	ldr	r3, [pc, #44]	; (cc3c <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    cc0e:	480c      	ldr	r0, [pc, #48]	; (cc40 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    cc10:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    cc14:	4b0b      	ldr	r3, [pc, #44]	; (cc44 <tc_sha256_init+0x50>)
    cc16:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    cc1a:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    cc1c:	4b0a      	ldr	r3, [pc, #40]	; (cc48 <tc_sha256_init+0x54>)
    cc1e:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    cc20:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    cc24:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    cc28:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    cc2c:	61e3      	str	r3, [r4, #28]
}
    cc2e:	bd10      	pop	{r4, pc}
    cc30:	bb67ae85 	.word	0xbb67ae85
    cc34:	6a09e667 	.word	0x6a09e667
    cc38:	3c6ef372 	.word	0x3c6ef372
    cc3c:	a54ff53a 	.word	0xa54ff53a
    cc40:	510e527f 	.word	0x510e527f
    cc44:	9b05688c 	.word	0x9b05688c
    cc48:	1f83d9ab 	.word	0x1f83d9ab

0000cc4c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    cc4c:	4a0a      	ldr	r2, [pc, #40]	; (cc78 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    cc4e:	490b      	ldr	r1, [pc, #44]	; (cc7c <arch_swap+0x30>)
	_current->arch.basepri = key;
    cc50:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    cc52:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    cc54:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
    cc58:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    cc5c:	4908      	ldr	r1, [pc, #32]	; (cc80 <arch_swap+0x34>)
    cc5e:	684b      	ldr	r3, [r1, #4]
    cc60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    cc64:	604b      	str	r3, [r1, #4]
    cc66:	2300      	movs	r3, #0
    cc68:	f383 8811 	msr	BASEPRI, r3
    cc6c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    cc70:	6893      	ldr	r3, [r2, #8]
}
    cc72:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    cc76:	4770      	bx	lr
    cc78:	2000adec 	.word	0x2000adec
    cc7c:	0001e158 	.word	0x0001e158
    cc80:	e000ed00 	.word	0xe000ed00

0000cc84 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    cc84:	4914      	ldr	r1, [pc, #80]	; (ccd8 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    cc86:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    cc88:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    cc8c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    cc8e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    cc92:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    cc96:	2020      	movs	r0, #32
    msr BASEPRI, r0
    cc98:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    cc9c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    cca0:	4f0e      	ldr	r7, [pc, #56]	; (ccdc <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    cca2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    cca6:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    cca8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    ccaa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    ccac:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    ccb0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    ccb2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    ccb6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    ccba:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    ccbe:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    ccc2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    ccc6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    ccca:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    cccc:	f00d ffa7 	bl	1ac1e <configure_builtin_stack_guard>
    pop {r2, lr}
    ccd0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    ccd4:	4770      	bx	lr
    ccd6:	0000      	.short	0x0000
    ldr r1, =_kernel
    ccd8:	2000adec 	.word	0x2000adec
    ldr v4, =_SCS_ICSR
    ccdc:	e000ed04 	.word	0xe000ed04

0000cce0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    cce0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    cce4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    cce6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    ccea:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    ccee:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    ccf0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    ccf4:	2902      	cmp	r1, #2
    beq _oops
    ccf6:	d0ff      	beq.n	ccf8 <_oops>

0000ccf8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    ccf8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    ccfa:	f00d ff94 	bl	1ac26 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    ccfe:	bd01      	pop	{r0, pc}

0000cd00 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    cd00:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    cd02:	2b00      	cmp	r3, #0
    cd04:	db08      	blt.n	cd18 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cd06:	2201      	movs	r2, #1
    cd08:	f000 001f 	and.w	r0, r0, #31
    cd0c:	fa02 f000 	lsl.w	r0, r2, r0
    cd10:	4a02      	ldr	r2, [pc, #8]	; (cd1c <arch_irq_enable+0x1c>)
    cd12:	095b      	lsrs	r3, r3, #5
    cd14:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    cd18:	4770      	bx	lr
    cd1a:	bf00      	nop
    cd1c:	e000e100 	.word	0xe000e100

0000cd20 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    cd20:	4b05      	ldr	r3, [pc, #20]	; (cd38 <arch_irq_is_enabled+0x18>)
    cd22:	0942      	lsrs	r2, r0, #5
    cd24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    cd28:	2301      	movs	r3, #1
    cd2a:	f000 001f 	and.w	r0, r0, #31
    cd2e:	fa03 f000 	lsl.w	r0, r3, r0
}
    cd32:	4010      	ands	r0, r2
    cd34:	4770      	bx	lr
    cd36:	bf00      	nop
    cd38:	e000e100 	.word	0xe000e100

0000cd3c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    cd3c:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    cd3e:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    cd40:	2c07      	cmp	r4, #7
{
    cd42:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    cd44:	d908      	bls.n	cd58 <z_arm_irq_priority_set+0x1c>
    cd46:	490d      	ldr	r1, [pc, #52]	; (cd7c <z_arm_irq_priority_set+0x40>)
    cd48:	480d      	ldr	r0, [pc, #52]	; (cd80 <z_arm_irq_priority_set+0x44>)
    cd4a:	225c      	movs	r2, #92	; 0x5c
    cd4c:	f00c fe0d 	bl	1996a <printk>
    cd50:	215c      	movs	r1, #92	; 0x5c
    cd52:	480a      	ldr	r0, [pc, #40]	; (cd7c <z_arm_irq_priority_set+0x40>)
    cd54:	f00d f8af 	bl	19eb6 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    cd58:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    cd5a:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cd5c:	bfac      	ite	ge
    cd5e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cd62:	4b08      	ldrlt	r3, [pc, #32]	; (cd84 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cd64:	ea4f 1444 	mov.w	r4, r4, lsl #5
    cd68:	b2e4      	uxtb	r4, r4
    cd6a:	bfab      	itete	ge
    cd6c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cd70:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cd74:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cd78:	555c      	strblt	r4, [r3, r5]
}
    cd7a:	bd38      	pop	{r3, r4, r5, pc}
    cd7c:	0001f4b1 	.word	0x0001f4b1
    cd80:	0001ea60 	.word	0x0001ea60
    cd84:	e000ed14 	.word	0xe000ed14

0000cd88 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    cd88:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    cd8c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    cd8e:	490b      	ldr	r1, [pc, #44]	; (cdbc <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    cd90:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    cd94:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    cd96:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    cd9a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    cd9e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    cda0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    cda4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    cda8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    cdac:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    cdb0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    cdb2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    cdb4:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    cdb6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    cdba:	4770      	bx	lr
    cdbc:	00019a47 	.word	0x00019a47

0000cdc0 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    cdc0:	4604      	mov	r4, r0
    cdc2:	b508      	push	{r3, lr}
    cdc4:	460e      	mov	r6, r1
    cdc6:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    cdc8:	f000 faf6 	bl	d3b8 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    cdcc:	4b08      	ldr	r3, [pc, #32]	; (cdf0 <arch_switch_to_main_thread+0x30>)
    cdce:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    cdd0:	6f63      	ldr	r3, [r4, #116]	; 0x74
    cdd2:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    cdd6:	4628      	mov	r0, r5
    cdd8:	f386 8809 	msr	PSP, r6
    cddc:	2100      	movs	r1, #0
    cdde:	b663      	cpsie	if
    cde0:	f381 8811 	msr	BASEPRI, r1
    cde4:	f3bf 8f6f 	isb	sy
    cde8:	2200      	movs	r2, #0
    cdea:	2300      	movs	r3, #0
    cdec:	f00c fe2b 	bl	19a46 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    cdf0:	2000adec 	.word	0x2000adec

0000cdf4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    cdf4:	4901      	ldr	r1, [pc, #4]	; (cdfc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    cdf6:	2210      	movs	r2, #16
	str	r2, [r1]
    cdf8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    cdfa:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    cdfc:	e000ed10 	.word	0xe000ed10

0000ce00 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    ce00:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    ce02:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    ce04:	f380 8811 	msr	BASEPRI, r0
	isb
    ce08:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    ce0c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    ce10:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    ce12:	b662      	cpsie	i
	isb
    ce14:	f3bf 8f6f 	isb	sy

	bx	lr
    ce18:	4770      	bx	lr
    ce1a:	bf00      	nop

0000ce1c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    ce1c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    ce1e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    ce20:	f381 8811 	msr	BASEPRI, r1

	wfe
    ce24:	bf20      	wfe

	msr	BASEPRI, r0
    ce26:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    ce2a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    ce2c:	4770      	bx	lr
    ce2e:	bf00      	nop

0000ce30 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    ce30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ce32:	4605      	mov	r5, r0

	if (esf != NULL) {
    ce34:	460c      	mov	r4, r1
    ce36:	b1c9      	cbz	r1, ce6c <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    ce38:	688b      	ldr	r3, [r1, #8]
    ce3a:	4810      	ldr	r0, [pc, #64]	; (ce7c <z_arm_fatal_error+0x4c>)
    ce3c:	9300      	str	r3, [sp, #0]
    ce3e:	e9d1 2300 	ldrd	r2, r3, [r1]
    ce42:	2145      	movs	r1, #69	; 0x45
    ce44:	f00c fd91 	bl	1996a <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    ce48:	6963      	ldr	r3, [r4, #20]
    ce4a:	2145      	movs	r1, #69	; 0x45
    ce4c:	9300      	str	r3, [sp, #0]
    ce4e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    ce52:	480b      	ldr	r0, [pc, #44]	; (ce80 <z_arm_fatal_error+0x50>)
    ce54:	f00c fd89 	bl	1996a <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    ce58:	2145      	movs	r1, #69	; 0x45
    ce5a:	69e2      	ldr	r2, [r4, #28]
    ce5c:	4809      	ldr	r0, [pc, #36]	; (ce84 <z_arm_fatal_error+0x54>)
    ce5e:	f00c fd84 	bl	1996a <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    ce62:	2145      	movs	r1, #69	; 0x45
    ce64:	69a2      	ldr	r2, [r4, #24]
    ce66:	4808      	ldr	r0, [pc, #32]	; (ce88 <z_arm_fatal_error+0x58>)
    ce68:	f00c fd7f 	bl	1996a <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    ce6c:	4621      	mov	r1, r4
    ce6e:	4628      	mov	r0, r5
}
    ce70:	b003      	add	sp, #12
    ce72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    ce76:	f009 bdf9 	b.w	16a6c <z_fatal_error>
    ce7a:	bf00      	nop
    ce7c:	0001f4e7 	.word	0x0001f4e7
    ce80:	0001f51b 	.word	0x0001f51b
    ce84:	0001f54f 	.word	0x0001f54f
    ce88:	0001f563 	.word	0x0001f563

0000ce8c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    ce8c:	bf30      	wfi
    b z_SysNmiOnReset
    ce8e:	f7ff bffd 	b.w	ce8c <z_SysNmiOnReset>
    ce92:	bf00      	nop

0000ce94 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    ce94:	4a0e      	ldr	r2, [pc, #56]	; (ced0 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    ce96:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    ce98:	4b0e      	ldr	r3, [pc, #56]	; (ced4 <z_arm_prep_c+0x40>)
    ce9a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    ce9e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    cea0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cea4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    cea8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    ceac:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    ceb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    ceb4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    ceb8:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    cebc:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    cec0:	f009 fe60 	bl	16b84 <z_bss_zero>
	z_data_copy();
    cec4:	f00b fe96 	bl	18bf4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    cec8:	f000 fa48 	bl	d35c <z_arm_interrupt_init>
	z_cstart();
    cecc:	f009 fe7e 	bl	16bcc <z_cstart>
    ced0:	00008000 	.word	0x00008000
    ced4:	e000ed00 	.word	0xe000ed00

0000ced8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    ced8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    ceda:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    cedc:	4a0b      	ldr	r2, [pc, #44]	; (cf0c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    cede:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    cee0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    cee2:	bf1e      	ittt	ne
	movne	r1, #0
    cee4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    cee6:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    cee8:	f010 f88a 	blne	1d000 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    ceec:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    ceee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    cef2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    cef6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    cefa:	4905      	ldr	r1, [pc, #20]	; (cf10 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    cefc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    cefe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    cf00:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    cf02:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    cf06:	4903      	ldr	r1, [pc, #12]	; (cf14 <_isr_wrapper+0x3c>)
	bx r1
    cf08:	4708      	bx	r1
    cf0a:	0000      	.short	0x0000
	ldr r2, =_kernel
    cf0c:	2000adec 	.word	0x2000adec
	ldr r1, =_sw_isr_table
    cf10:	0001d400 	.word	0x0001d400
	ldr r1, =z_arm_int_exit
    cf14:	0000d31d 	.word	0x0000d31d

0000cf18 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    cf18:	f00c ffec 	bl	19ef4 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    cf1c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    cf1e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    cf22:	4808      	ldr	r0, [pc, #32]	; (cf44 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    cf24:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    cf28:	1840      	adds	r0, r0, r1
    msr PSP, r0
    cf2a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    cf2e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    cf32:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    cf34:	4308      	orrs	r0, r1
    msr CONTROL, r0
    cf36:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    cf3a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    cf3e:	f7ff ffa9 	bl	ce94 <z_arm_prep_c>
    cf42:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    cf44:	2000ec68 	.word	0x2000ec68

0000cf48 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    cf48:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    cf4c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    cf50:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    cf52:	4672      	mov	r2, lr
	bl z_arm_fault
    cf54:	f000 f91a 	bl	d18c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    cf58:	bd01      	pop	{r0, pc}
    cf5a:	bf00      	nop

0000cf5c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    cf5c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    cf5e:	4c21      	ldr	r4, [pc, #132]	; (cfe4 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    cf60:	2145      	movs	r1, #69	; 0x45
    cf62:	4821      	ldr	r0, [pc, #132]	; (cfe8 <usage_fault.constprop.0+0x8c>)
    cf64:	f00c fd01 	bl	1996a <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    cf68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cf6a:	019d      	lsls	r5, r3, #6
    cf6c:	d503      	bpl.n	cf76 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    cf6e:	2145      	movs	r1, #69	; 0x45
    cf70:	481e      	ldr	r0, [pc, #120]	; (cfec <usage_fault.constprop.0+0x90>)
    cf72:	f00c fcfa 	bl	1996a <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    cf76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cf78:	01dc      	lsls	r4, r3, #7
    cf7a:	d503      	bpl.n	cf84 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    cf7c:	2145      	movs	r1, #69	; 0x45
    cf7e:	481c      	ldr	r0, [pc, #112]	; (cff0 <usage_fault.constprop.0+0x94>)
    cf80:	f00c fcf3 	bl	1996a <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    cf84:	4d17      	ldr	r5, [pc, #92]	; (cfe4 <usage_fault.constprop.0+0x88>)
    cf86:	6aac      	ldr	r4, [r5, #40]	; 0x28
    cf88:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    cf8c:	d004      	beq.n	cf98 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    cf8e:	2145      	movs	r1, #69	; 0x45
    cf90:	4818      	ldr	r0, [pc, #96]	; (cff4 <usage_fault.constprop.0+0x98>)
    cf92:	f00c fcea 	bl	1996a <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    cf96:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    cf98:	6aab      	ldr	r3, [r5, #40]	; 0x28
    cf9a:	0318      	lsls	r0, r3, #12
    cf9c:	d503      	bpl.n	cfa6 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    cf9e:	2145      	movs	r1, #69	; 0x45
    cfa0:	4815      	ldr	r0, [pc, #84]	; (cff8 <usage_fault.constprop.0+0x9c>)
    cfa2:	f00c fce2 	bl	1996a <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    cfa6:	4d0f      	ldr	r5, [pc, #60]	; (cfe4 <usage_fault.constprop.0+0x88>)
    cfa8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    cfaa:	0359      	lsls	r1, r3, #13
    cfac:	d503      	bpl.n	cfb6 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    cfae:	2145      	movs	r1, #69	; 0x45
    cfb0:	4812      	ldr	r0, [pc, #72]	; (cffc <usage_fault.constprop.0+0xa0>)
    cfb2:	f00c fcda 	bl	1996a <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    cfb6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    cfb8:	039a      	lsls	r2, r3, #14
    cfba:	d503      	bpl.n	cfc4 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    cfbc:	2145      	movs	r1, #69	; 0x45
    cfbe:	4810      	ldr	r0, [pc, #64]	; (d000 <usage_fault.constprop.0+0xa4>)
    cfc0:	f00c fcd3 	bl	1996a <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    cfc4:	4d07      	ldr	r5, [pc, #28]	; (cfe4 <usage_fault.constprop.0+0x88>)
    cfc6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    cfc8:	03db      	lsls	r3, r3, #15
    cfca:	d503      	bpl.n	cfd4 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    cfcc:	2145      	movs	r1, #69	; 0x45
    cfce:	480d      	ldr	r0, [pc, #52]	; (d004 <usage_fault.constprop.0+0xa8>)
    cfd0:	f00c fccb 	bl	1996a <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    cfd4:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    cfd6:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    cfd8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    cfdc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    cfe0:	62ab      	str	r3, [r5, #40]	; 0x28
}
    cfe2:	bd38      	pop	{r3, r4, r5, pc}
    cfe4:	e000ed00 	.word	0xe000ed00
    cfe8:	0001f596 	.word	0x0001f596
    cfec:	0001f5b3 	.word	0x0001f5b3
    cff0:	0001f5cb 	.word	0x0001f5cb
    cff4:	0001f5ea 	.word	0x0001f5ea
    cff8:	0001f619 	.word	0x0001f619
    cffc:	0001f63c 	.word	0x0001f63c
    d000:	0001f666 	.word	0x0001f666
    d004:	0001f685 	.word	0x0001f685

0000d008 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    d008:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d00a:	4c23      	ldr	r4, [pc, #140]	; (d098 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    d00c:	4606      	mov	r6, r0
    d00e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    d010:	4822      	ldr	r0, [pc, #136]	; (d09c <bus_fault.constprop.0+0x94>)
    d012:	2145      	movs	r1, #69	; 0x45
    d014:	f00c fca9 	bl	1996a <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d018:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d01a:	04d9      	lsls	r1, r3, #19
    d01c:	d503      	bpl.n	d026 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    d01e:	2145      	movs	r1, #69	; 0x45
    d020:	481f      	ldr	r0, [pc, #124]	; (d0a0 <bus_fault.constprop.0+0x98>)
    d022:	f00c fca2 	bl	1996a <printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    d026:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d028:	051a      	lsls	r2, r3, #20
    d02a:	d503      	bpl.n	d034 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    d02c:	2145      	movs	r1, #69	; 0x45
    d02e:	481d      	ldr	r0, [pc, #116]	; (d0a4 <bus_fault.constprop.0+0x9c>)
    d030:	f00c fc9b 	bl	1996a <printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    d034:	4c18      	ldr	r4, [pc, #96]	; (d098 <bus_fault.constprop.0+0x90>)
    d036:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d038:	059b      	lsls	r3, r3, #22
    d03a:	d510      	bpl.n	d05e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    d03c:	481a      	ldr	r0, [pc, #104]	; (d0a8 <bus_fault.constprop.0+0xa0>)
    d03e:	2145      	movs	r1, #69	; 0x45
    d040:	f00c fc93 	bl	1996a <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    d044:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    d046:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d048:	0418      	lsls	r0, r3, #16
    d04a:	d508      	bpl.n	d05e <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    d04c:	2145      	movs	r1, #69	; 0x45
    d04e:	4817      	ldr	r0, [pc, #92]	; (d0ac <bus_fault.constprop.0+0xa4>)
    d050:	f00c fc8b 	bl	1996a <printk>
			if (from_hard_fault) {
    d054:	b11e      	cbz	r6, d05e <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    d056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d058:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    d05c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    d05e:	4c0e      	ldr	r4, [pc, #56]	; (d098 <bus_fault.constprop.0+0x90>)
    d060:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d062:	0559      	lsls	r1, r3, #21
    d064:	d503      	bpl.n	d06e <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    d066:	2145      	movs	r1, #69	; 0x45
    d068:	4811      	ldr	r0, [pc, #68]	; (d0b0 <bus_fault.constprop.0+0xa8>)
    d06a:	f00c fc7e 	bl	1996a <printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    d06e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d070:	05da      	lsls	r2, r3, #23
    d072:	d50b      	bpl.n	d08c <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    d074:	2145      	movs	r1, #69	; 0x45
    d076:	480f      	ldr	r0, [pc, #60]	; (d0b4 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    d078:	f00c fc77 	bl	1996a <printk>
	*recoverable = memory_fault_recoverable(esf);
    d07c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d07e:	4a06      	ldr	r2, [pc, #24]	; (d098 <bus_fault.constprop.0+0x90>)
    d080:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d082:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    d086:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    d088:	7028      	strb	r0, [r5, #0]
}
    d08a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    d08c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d08e:	049b      	lsls	r3, r3, #18
    d090:	d5f4      	bpl.n	d07c <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    d092:	2145      	movs	r1, #69	; 0x45
    d094:	4808      	ldr	r0, [pc, #32]	; (d0b8 <bus_fault.constprop.0+0xb0>)
    d096:	e7ef      	b.n	d078 <bus_fault.constprop.0+0x70>
    d098:	e000ed00 	.word	0xe000ed00
    d09c:	0001f6b5 	.word	0x0001f6b5
    d0a0:	0001f6d0 	.word	0x0001f6d0
    d0a4:	0001f6e6 	.word	0x0001f6e6
    d0a8:	0001f6fe 	.word	0x0001f6fe
    d0ac:	0001f71c 	.word	0x0001f71c
    d0b0:	0001f736 	.word	0x0001f736
    d0b4:	0001f756 	.word	0x0001f756
    d0b8:	0001f773 	.word	0x0001f773

0000d0bc <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    d0bc:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d0be:	4c29      	ldr	r4, [pc, #164]	; (d164 <mem_manage_fault.constprop.0+0xa8>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    d0c0:	4606      	mov	r6, r0
    d0c2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    d0c4:	4828      	ldr	r0, [pc, #160]	; (d168 <mem_manage_fault.constprop.0+0xac>)
    d0c6:	2145      	movs	r1, #69	; 0x45
    d0c8:	f00c fc4f 	bl	1996a <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d0cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d0ce:	06d8      	lsls	r0, r3, #27
    d0d0:	d503      	bpl.n	d0da <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    d0d2:	2145      	movs	r1, #69	; 0x45
    d0d4:	4825      	ldr	r0, [pc, #148]	; (d16c <mem_manage_fault.constprop.0+0xb0>)
    d0d6:	f00c fc48 	bl	1996a <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    d0da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d0dc:	0719      	lsls	r1, r3, #28
    d0de:	d503      	bpl.n	d0e8 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    d0e0:	2145      	movs	r1, #69	; 0x45
    d0e2:	4823      	ldr	r0, [pc, #140]	; (d170 <mem_manage_fault.constprop.0+0xb4>)
    d0e4:	f00c fc41 	bl	1996a <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    d0e8:	4c1e      	ldr	r4, [pc, #120]	; (d164 <mem_manage_fault.constprop.0+0xa8>)
    d0ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d0ec:	079a      	lsls	r2, r3, #30
    d0ee:	d510      	bpl.n	d112 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    d0f0:	2145      	movs	r1, #69	; 0x45
    d0f2:	4820      	ldr	r0, [pc, #128]	; (d174 <mem_manage_fault.constprop.0+0xb8>)
    d0f4:	f00c fc39 	bl	1996a <printk>
		uint32_t temp = SCB->MMFAR;
    d0f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    d0fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d0fc:	061b      	lsls	r3, r3, #24
    d0fe:	d508      	bpl.n	d112 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    d100:	2145      	movs	r1, #69	; 0x45
    d102:	481d      	ldr	r0, [pc, #116]	; (d178 <mem_manage_fault.constprop.0+0xbc>)
    d104:	f00c fc31 	bl	1996a <printk>
			if (from_hard_fault) {
    d108:	b11e      	cbz	r6, d112 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    d10a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d10c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    d110:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    d112:	4c14      	ldr	r4, [pc, #80]	; (d164 <mem_manage_fault.constprop.0+0xa8>)
    d114:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d116:	07d8      	lsls	r0, r3, #31
    d118:	d503      	bpl.n	d122 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    d11a:	2145      	movs	r1, #69	; 0x45
    d11c:	4817      	ldr	r0, [pc, #92]	; (d17c <mem_manage_fault.constprop.0+0xc0>)
    d11e:	f00c fc24 	bl	1996a <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d122:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d124:	0699      	lsls	r1, r3, #26
    d126:	d503      	bpl.n	d130 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    d128:	2145      	movs	r1, #69	; 0x45
    d12a:	4815      	ldr	r0, [pc, #84]	; (d180 <mem_manage_fault.constprop.0+0xc4>)
    d12c:	f00c fc1d 	bl	1996a <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    d130:	4b0c      	ldr	r3, [pc, #48]	; (d164 <mem_manage_fault.constprop.0+0xa8>)
    d132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d134:	06d2      	lsls	r2, r2, #27
    d136:	d402      	bmi.n	d13e <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    d138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    d13a:	079b      	lsls	r3, r3, #30
    d13c:	d50a      	bpl.n	d154 <mem_manage_fault.constprop.0+0x98>
	__ASSERT(0,
    d13e:	4911      	ldr	r1, [pc, #68]	; (d184 <mem_manage_fault.constprop.0+0xc8>)
    d140:	4811      	ldr	r0, [pc, #68]	; (d188 <mem_manage_fault.constprop.0+0xcc>)
    d142:	f240 1247 	movw	r2, #327	; 0x147
    d146:	f00c fc10 	bl	1996a <printk>
    d14a:	f240 1147 	movw	r1, #327	; 0x147
    d14e:	480d      	ldr	r0, [pc, #52]	; (d184 <mem_manage_fault.constprop.0+0xc8>)
    d150:	f00c feb1 	bl	19eb6 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    d154:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    d156:	4a03      	ldr	r2, [pc, #12]	; (d164 <mem_manage_fault.constprop.0+0xa8>)
    d158:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d15a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    d15e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    d160:	7028      	strb	r0, [r5, #0]
}
    d162:	bd70      	pop	{r4, r5, r6, pc}
    d164:	e000ed00 	.word	0xe000ed00
    d168:	0001f7a7 	.word	0x0001f7a7
    d16c:	0001f7c2 	.word	0x0001f7c2
    d170:	0001f6e6 	.word	0x0001f6e6
    d174:	0001f7fa 	.word	0x0001f7fa
    d178:	0001f817 	.word	0x0001f817
    d17c:	0001f832 	.word	0x0001f832
    d180:	0001f773 	.word	0x0001f773
    d184:	0001f856 	.word	0x0001f856
    d188:	0001ea60 	.word	0x0001ea60

0000d18c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    d18c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d190:	4b51      	ldr	r3, [pc, #324]	; (d2d8 <z_arm_fault+0x14c>)
{
    d192:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d194:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    d198:	4689      	mov	r9, r1
    d19a:	4614      	mov	r4, r2
    d19c:	2600      	movs	r6, #0
    d19e:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d1a0:	f3c8 0708 	ubfx	r7, r8, #0, #9
    d1a4:	f386 8811 	msr	BASEPRI, r6
    d1a8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    d1ac:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    d1b0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    d1b4:	d111      	bne.n	d1da <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    d1b6:	07d0      	lsls	r0, r2, #31
    d1b8:	d40f      	bmi.n	d1da <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    d1ba:	0651      	lsls	r1, r2, #25
    d1bc:	d403      	bmi.n	d1c6 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    d1be:	0722      	lsls	r2, r4, #28
    d1c0:	d408      	bmi.n	d1d4 <z_arm_fault+0x48>
			*nested_exc = true;
    d1c2:	2601      	movs	r6, #1
    d1c4:	e008      	b.n	d1d8 <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    d1c6:	2145      	movs	r1, #69	; 0x45
    d1c8:	4844      	ldr	r0, [pc, #272]	; (d2dc <z_arm_fault+0x150>)
    d1ca:	f00c fbce 	bl	1996a <printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    d1ce:	f014 0404 	ands.w	r4, r4, #4
    d1d2:	d000      	beq.n	d1d6 <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)psp;
    d1d4:	464d      	mov	r5, r9
	*nested_exc = false;
    d1d6:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    d1d8:	b95d      	cbnz	r5, d1f2 <z_arm_fault+0x66>
    d1da:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    d1de:	4940      	ldr	r1, [pc, #256]	; (d2e0 <z_arm_fault+0x154>)
    d1e0:	4840      	ldr	r0, [pc, #256]	; (d2e4 <z_arm_fault+0x158>)
    d1e2:	f00c fbc2 	bl	1996a <printk>
    d1e6:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    d1ea:	483d      	ldr	r0, [pc, #244]	; (d2e0 <z_arm_fault+0x154>)
    d1ec:	f00c fe63 	bl	19eb6 <assert_post_action>
    d1f0:	2500      	movs	r5, #0
	*recoverable = false;
    d1f2:	2400      	movs	r4, #0
    d1f4:	1efb      	subs	r3, r7, #3
    d1f6:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    d1fa:	2b09      	cmp	r3, #9
    d1fc:	d85a      	bhi.n	d2b4 <z_arm_fault+0x128>
    d1fe:	e8df f003 	tbb	[pc, r3]
    d202:	4e05      	.short	0x4e05
    d204:	59593252 	.word	0x59593252
    d208:	56595959 	.word	0x56595959
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d20c:	4f32      	ldr	r7, [pc, #200]	; (d2d8 <z_arm_fault+0x14c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    d20e:	2145      	movs	r1, #69	; 0x45
    d210:	4835      	ldr	r0, [pc, #212]	; (d2e8 <z_arm_fault+0x15c>)
    d212:	f00c fbaa 	bl	1996a <printk>
	*recoverable = false;
    d216:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d21a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    d21c:	f014 0402 	ands.w	r4, r4, #2
    d220:	d005      	beq.n	d22e <z_arm_fault+0xa2>
		PR_EXC("  Bus fault on vector table read");
    d222:	2145      	movs	r1, #69	; 0x45
    d224:	4831      	ldr	r0, [pc, #196]	; (d2ec <z_arm_fault+0x160>)
	PR_FAULT_INFO(
    d226:	f00c fba0 	bl	1996a <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    d22a:	2400      	movs	r4, #0
}
    d22c:	e01e      	b.n	d26c <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    d22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d230:	005b      	lsls	r3, r3, #1
    d232:	d51b      	bpl.n	d26c <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    d234:	2145      	movs	r1, #69	; 0x45
    d236:	482e      	ldr	r0, [pc, #184]	; (d2f0 <z_arm_fault+0x164>)
    d238:	f00c fb97 	bl	1996a <printk>
		if (SCB_MMFSR != 0) {
    d23c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    d240:	b12b      	cbz	r3, d24e <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    d242:	2001      	movs	r0, #1
    d244:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    d248:	f7ff ff38 	bl	d0bc <mem_manage_fault.constprop.0>
    d24c:	e00d      	b.n	d26a <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    d24e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    d252:	b12b      	cbz	r3, d260 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    d254:	2001      	movs	r0, #1
    d256:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    d25a:	f7ff fed5 	bl	d008 <bus_fault.constprop.0>
    d25e:	e004      	b.n	d26a <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    d260:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    d262:	b29b      	uxth	r3, r3
    d264:	b113      	cbz	r3, d26c <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    d266:	f7ff fe79 	bl	cf5c <usage_fault.constprop.0>
    d26a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    d26c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d270:	b993      	cbnz	r3, d298 <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    d272:	2220      	movs	r2, #32
    d274:	4629      	mov	r1, r5
    d276:	a802      	add	r0, sp, #8
    d278:	f00d fdb7 	bl	1adea <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    d27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d27e:	b336      	cbz	r6, d2ce <z_arm_fault+0x142>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    d280:	f3c3 0208 	ubfx	r2, r3, #0, #9
    d284:	b922      	cbnz	r2, d290 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    d286:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    d28a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d28e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    d290:	4620      	mov	r0, r4
    d292:	a902      	add	r1, sp, #8
    d294:	f7ff fdcc 	bl	ce30 <z_arm_fatal_error>
}
    d298:	b00b      	add	sp, #44	; 0x2c
    d29a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    d29e:	2000      	movs	r0, #0
    d2a0:	f10d 0107 	add.w	r1, sp, #7
    d2a4:	e7d0      	b.n	d248 <z_arm_fault+0xbc>
		reason = bus_fault(esf, 0, recoverable);
    d2a6:	2000      	movs	r0, #0
    d2a8:	f10d 0107 	add.w	r1, sp, #7
    d2ac:	e7d5      	b.n	d25a <z_arm_fault+0xce>
	PR_FAULT_INFO(
    d2ae:	2145      	movs	r1, #69	; 0x45
    d2b0:	4810      	ldr	r0, [pc, #64]	; (d2f4 <z_arm_fault+0x168>)
    d2b2:	e7b8      	b.n	d226 <z_arm_fault+0x9a>
	PR_FAULT_INFO("***** %s %d) *****",
    d2b4:	4910      	ldr	r1, [pc, #64]	; (d2f8 <z_arm_fault+0x16c>)
    d2b6:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    d2ba:	4a10      	ldr	r2, [pc, #64]	; (d2fc <z_arm_fault+0x170>)
    d2bc:	4810      	ldr	r0, [pc, #64]	; (d300 <z_arm_fault+0x174>)
    d2be:	bf08      	it	eq
    d2c0:	460a      	moveq	r2, r1
    d2c2:	f1a7 0310 	sub.w	r3, r7, #16
    d2c6:	2145      	movs	r1, #69	; 0x45
    d2c8:	f00c fb4f 	bl	1996a <printk>
    d2cc:	e7ad      	b.n	d22a <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d2ce:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    d2d2:	f023 0301 	bic.w	r3, r3, #1
    d2d6:	e7da      	b.n	d28e <z_arm_fault+0x102>
    d2d8:	e000ed00 	.word	0xe000ed00
    d2dc:	0001f8be 	.word	0x0001f8be
    d2e0:	0001f856 	.word	0x0001f856
    d2e4:	0001ea60 	.word	0x0001ea60
    d2e8:	0001f8e6 	.word	0x0001f8e6
    d2ec:	0001f902 	.word	0x0001f902
    d2f0:	0001f928 	.word	0x0001f928
    d2f4:	0001f94c 	.word	0x0001f94c
    d2f8:	0001f890 	.word	0x0001f890
    d2fc:	0001f8a5 	.word	0x0001f8a5
    d300:	0001f987 	.word	0x0001f987

0000d304 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d304:	4b04      	ldr	r3, [pc, #16]	; (d318 <z_arm_fault_init+0x14>)
    d306:	695a      	ldr	r2, [r3, #20]
    d308:	f042 0210 	orr.w	r2, r2, #16
    d30c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    d30e:	695a      	ldr	r2, [r3, #20]
    d310:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    d314:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    d316:	4770      	bx	lr
    d318:	e000ed00 	.word	0xe000ed00

0000d31c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    d31c:	4b04      	ldr	r3, [pc, #16]	; (d330 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    d31e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    d320:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    d322:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    d324:	d003      	beq.n	d32e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    d326:	4903      	ldr	r1, [pc, #12]	; (d334 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    d328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    d32c:	600a      	str	r2, [r1, #0]

0000d32e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    d32e:	4770      	bx	lr
	ldr r3, =_kernel
    d330:	2000adec 	.word	0x2000adec
	ldr r1, =_SCS_ICSR
    d334:	e000ed04 	.word	0xe000ed04

0000d338 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    d338:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    d33c:	4905      	ldr	r1, [pc, #20]	; (d354 <sys_arch_reboot+0x1c>)
    d33e:	4b06      	ldr	r3, [pc, #24]	; (d358 <sys_arch_reboot+0x20>)
    d340:	68ca      	ldr	r2, [r1, #12]
    d342:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    d346:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    d348:	60cb      	str	r3, [r1, #12]
    d34a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    d34e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    d350:	e7fd      	b.n	d34e <sys_arch_reboot+0x16>
    d352:	bf00      	nop
    d354:	e000ed00 	.word	0xe000ed00
    d358:	05fa0004 	.word	0x05fa0004

0000d35c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    d35c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d35e:	2120      	movs	r1, #32
    d360:	4803      	ldr	r0, [pc, #12]	; (d370 <z_arm_interrupt_init+0x14>)
    d362:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    d364:	3301      	adds	r3, #1
    d366:	2b45      	cmp	r3, #69	; 0x45
    d368:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    d36c:	d1f9      	bne.n	d362 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    d36e:	4770      	bx	lr
    d370:	e000e100 	.word	0xe000e100

0000d374 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    d374:	b508      	push	{r3, lr}
	if (_current == thread) {
    d376:	4b0e      	ldr	r3, [pc, #56]	; (d3b0 <z_impl_k_thread_abort+0x3c>)
    d378:	689b      	ldr	r3, [r3, #8]
    d37a:	4283      	cmp	r3, r0
    d37c:	d107      	bne.n	d38e <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d37e:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    d382:	b193      	cbz	r3, d3aa <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d384:	4a0b      	ldr	r2, [pc, #44]	; (d3b4 <z_impl_k_thread_abort+0x40>)
    d386:	6853      	ldr	r3, [r2, #4]
    d388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d38c:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    d38e:	f00a fd19 	bl	17dc4 <z_thread_single_abort>
	__asm__ volatile(
    d392:	f04f 0320 	mov.w	r3, #32
    d396:	f3ef 8011 	mrs	r0, BASEPRI
    d39a:	f383 8811 	msr	BASEPRI, r3
    d39e:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    d3a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    d3a6:	f00f be7b 	b.w	1d0a0 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    d3aa:	f00b fb19 	bl	189e0 <z_self_abort>
    d3ae:	bf00      	nop
    d3b0:	2000adec 	.word	0x2000adec
    d3b4:	e000ed00 	.word	0xe000ed00

0000d3b8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    d3b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d3ba:	4c09      	ldr	r4, [pc, #36]	; (d3e0 <z_arm_configure_static_mpu_regions+0x28>)
    d3bc:	4a09      	ldr	r2, [pc, #36]	; (d3e4 <z_arm_configure_static_mpu_regions+0x2c>)
    d3be:	4623      	mov	r3, r4
    d3c0:	2101      	movs	r1, #1
    d3c2:	4809      	ldr	r0, [pc, #36]	; (d3e8 <z_arm_configure_static_mpu_regions+0x30>)
    d3c4:	f000 f976 	bl	d6b4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d3c8:	2300      	movs	r3, #0
    d3ca:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    d3cc:	4b07      	ldr	r3, [pc, #28]	; (d3ec <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d3ce:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    d3d0:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d3d2:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d3d4:	9301      	str	r3, [sp, #4]
    d3d6:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d3d8:	f000 f988 	bl	d6ec <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    d3dc:	b004      	add	sp, #16
    d3de:	bd10      	pop	{r4, pc}
    d3e0:	20070000 	.word	0x20070000
    d3e4:	20008000 	.word	0x20008000
    d3e8:	0001dbec 	.word	0x0001dbec
    d3ec:	200087e8 	.word	0x200087e8

0000d3f0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    d3f0:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d3f2:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    d3f4:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d3f6:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    d3fa:	f004 031f 	and.w	r3, r4, #31
    d3fe:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d400:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d402:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d404:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    d408:	4905      	ldr	r1, [pc, #20]	; (d420 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d40a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    d40e:	f043 0301 	orr.w	r3, r3, #1
    d412:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    d416:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    d41a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    d41e:	bd10      	pop	{r4, pc}
    d420:	e000ed00 	.word	0xe000ed00

0000d424 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    d424:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    d426:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    d428:	680c      	ldr	r4, [r1, #0]
{
    d42a:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    d42c:	890a      	ldrh	r2, [r1, #8]
    d42e:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    d430:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d432:	3b01      	subs	r3, #1
    d434:	f024 041f 	bic.w	r4, r4, #31
    d438:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    d43a:	f002 021f 	and.w	r2, r2, #31
    d43e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d442:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    d446:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d448:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    d44a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d44e:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    d450:	d909      	bls.n	d466 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d452:	4602      	mov	r2, r0
    d454:	2145      	movs	r1, #69	; 0x45
    d456:	4806      	ldr	r0, [pc, #24]	; (d470 <mpu_configure_region+0x4c>)
    d458:	f00c fa87 	bl	1996a <printk>
    d45c:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    d460:	4620      	mov	r0, r4
    d462:	b005      	add	sp, #20
    d464:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    d466:	4669      	mov	r1, sp
    d468:	f7ff ffc2 	bl	d3f0 <region_init>
	return region_allocate_and_init(index,
    d46c:	e7f8      	b.n	d460 <mpu_configure_region+0x3c>
    d46e:	bf00      	nop
    d470:	0001f9a3 	.word	0x0001f9a3

0000d474 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d478:	4689      	mov	r9, r1
    d47a:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    d47c:	4606      	mov	r6, r0
    d47e:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    d482:	4d59      	ldr	r5, [pc, #356]	; (d5e8 <mpu_configure_regions_and_partition.constprop.0+0x174>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d484:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    d486:	45c8      	cmp	r8, r9
    d488:	da27      	bge.n	d4da <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    d48a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    d48e:	f1ba 0f00 	cmp.w	sl, #0
    d492:	d045      	beq.n	d520 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    d494:	f1ba 0f1f 	cmp.w	sl, #31
    d498:	d918      	bls.n	d4cc <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    d49a:	f01a 0f1f 	tst.w	sl, #31
    d49e:	d115      	bne.n	d4cc <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    d4a0:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    d4a4:	f01b 0f1f 	tst.w	fp, #31
    d4a8:	d110      	bne.n	d4cc <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d4aa:	4658      	mov	r0, fp
    d4ac:	f00d fbc6 	bl	1ac3c <arm_cmse_mpu_region_get>
    d4b0:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d4b2:	eb0a 000b 	add.w	r0, sl, fp
    d4b6:	3801      	subs	r0, #1
    d4b8:	f00d fbc0 	bl	1ac3c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d4bc:	4287      	cmp	r7, r0
    d4be:	d010      	beq.n	d4e2 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    d4c0:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    d4c4:	463a      	mov	r2, r7
    d4c6:	2145      	movs	r1, #69	; 0x45
    d4c8:	4848      	ldr	r0, [pc, #288]	; (d5ec <mpu_configure_regions_and_partition.constprop.0+0x178>)
    d4ca:	e002      	b.n	d4d2 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    d4cc:	4642      	mov	r2, r8
    d4ce:	2145      	movs	r1, #69	; 0x45
    d4d0:	4847      	ldr	r0, [pc, #284]	; (d5f0 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d4d2:	f00c fa4a 	bl	1996a <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    d4d6:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    d4da:	4620      	mov	r0, r4
    d4dc:	b005      	add	sp, #20
    d4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    d4e2:	f117 0f16 	cmn.w	r7, #22
    d4e6:	d0ed      	beq.n	d4c4 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    d4e8:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    d4ea:	42bb      	cmp	r3, r7
    d4ec:	dbea      	blt.n	d4c4 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    d4ee:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    d4f2:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    d4f6:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d4fa:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    d4fe:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d502:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d506:	e9d6 3200 	ldrd	r3, r2, [r6]
    d50a:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    d50c:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d50e:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    d512:	d11d      	bne.n	d550 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    d514:	45d3      	cmp	fp, sl
    d516:	d107      	bne.n	d528 <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    d518:	4631      	mov	r1, r6
    d51a:	b2f8      	uxtb	r0, r7
    d51c:	f7ff ff82 	bl	d424 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    d520:	f108 0801 	add.w	r8, r8, #1
    d524:	360c      	adds	r6, #12
    d526:	e7ae      	b.n	d486 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    d528:	4631      	mov	r1, r6
	MPU->RNR = index;
    d52a:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d52e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    d532:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d536:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    d53a:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d53c:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    d540:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    d542:	f7ff ff6f 	bl	d424 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d546:	f110 0f16 	cmn.w	r0, #22
    d54a:	d0c4      	beq.n	d4d6 <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    d54c:	1c44      	adds	r4, r0, #1
    d54e:	e7e7      	b.n	d520 <mpu_configure_regions_and_partition.constprop.0+0xac>
				regions[i].start - 1);
    d550:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    d552:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    d554:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    d556:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    d55a:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    d55e:	d108      	bne.n	d572 <mpu_configure_regions_and_partition.constprop.0+0xfe>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d560:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d564:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d566:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    d56a:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d56c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    d570:	e7e7      	b.n	d542 <mpu_configure_regions_and_partition.constprop.0+0xce>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d572:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    d576:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    d57a:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d57c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d580:	4631      	mov	r1, r6
    d582:	f7ff ff4f 	bl	d424 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d586:	f110 0f16 	cmn.w	r0, #22
    d58a:	d0a4      	beq.n	d4d6 <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    d58c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    d590:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    d594:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    d598:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    d59c:	f362 0304 	bfi	r3, r2, #0, #5
    d5a0:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d5a4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d5a8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    d5ac:	085b      	lsrs	r3, r3, #1
    d5ae:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    d5b2:	e9d6 3100 	ldrd	r3, r1, [r6]
    d5b6:	440b      	add	r3, r1
    d5b8:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    d5ba:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    d5be:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    d5c0:	445b      	add	r3, fp
    d5c2:	eba3 030a 	sub.w	r3, r3, sl
    d5c6:	b2c0      	uxtb	r0, r0
    d5c8:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    d5cc:	2807      	cmp	r0, #7
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d5ce:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    d5d2:	9303      	str	r3, [sp, #12]
    d5d4:	d903      	bls.n	d5de <mpu_configure_regions_and_partition.constprop.0+0x16a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d5d6:	4602      	mov	r2, r0
    d5d8:	2145      	movs	r1, #69	; 0x45
    d5da:	4806      	ldr	r0, [pc, #24]	; (d5f4 <mpu_configure_regions_and_partition.constprop.0+0x180>)
    d5dc:	e779      	b.n	d4d2 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    d5de:	4669      	mov	r1, sp
    d5e0:	f7ff ff06 	bl	d3f0 <region_init>
    d5e4:	e7b2      	b.n	d54c <mpu_configure_regions_and_partition.constprop.0+0xd8>
    d5e6:	bf00      	nop
    d5e8:	e000ed00 	.word	0xe000ed00
    d5ec:	0001f9f6 	.word	0x0001f9f6
    d5f0:	0001f9ce 	.word	0x0001f9ce
    d5f4:	0001f9a3 	.word	0x0001f9a3

0000d5f8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    d5f8:	2205      	movs	r2, #5
    d5fa:	4b04      	ldr	r3, [pc, #16]	; (d60c <arm_core_mpu_enable+0x14>)
    d5fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    d600:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d604:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    d608:	4770      	bx	lr
    d60a:	bf00      	nop
    d60c:	e000ed00 	.word	0xe000ed00

0000d610 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    d610:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    d614:	2200      	movs	r2, #0
    d616:	4b02      	ldr	r3, [pc, #8]	; (d620 <arm_core_mpu_disable+0x10>)
    d618:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    d61c:	4770      	bx	lr
    d61e:	bf00      	nop
    d620:	e000ed00 	.word	0xe000ed00

0000d624 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    d624:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    d626:	4d1d      	ldr	r5, [pc, #116]	; (d69c <arm_mpu_init+0x78>)
    d628:	682c      	ldr	r4, [r5, #0]
    d62a:	2c08      	cmp	r4, #8
    d62c:	d90d      	bls.n	d64a <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    d62e:	f240 123b 	movw	r2, #315	; 0x13b
    d632:	491b      	ldr	r1, [pc, #108]	; (d6a0 <arm_mpu_init+0x7c>)
    d634:	481b      	ldr	r0, [pc, #108]	; (d6a4 <arm_mpu_init+0x80>)
    d636:	f00c f998 	bl	1996a <printk>
    d63a:	4819      	ldr	r0, [pc, #100]	; (d6a0 <arm_mpu_init+0x7c>)
    d63c:	f240 113b 	movw	r1, #315	; 0x13b
    d640:	f00c fc39 	bl	19eb6 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    d644:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    d648:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d64a:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    d64c:	f7ff ffe0 	bl	d610 <arm_core_mpu_disable>
	MPU->MAIR0 =
    d650:	4b15      	ldr	r3, [pc, #84]	; (d6a8 <arm_mpu_init+0x84>)
    d652:	4a16      	ldr	r2, [pc, #88]	; (d6ac <arm_mpu_init+0x88>)
    d654:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d658:	4284      	cmp	r4, r0
    d65a:	d117      	bne.n	d68c <arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
    d65c:	4b14      	ldr	r3, [pc, #80]	; (d6b0 <arm_mpu_init+0x8c>)
    d65e:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    d660:	f7ff ffca 	bl	d5f8 <arm_core_mpu_enable>
	__ASSERT(
    d664:	4b10      	ldr	r3, [pc, #64]	; (d6a8 <arm_mpu_init+0x84>)
    d666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d66a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    d66e:	2b08      	cmp	r3, #8
    d670:	d00a      	beq.n	d688 <arm_mpu_init+0x64>
    d672:	490b      	ldr	r1, [pc, #44]	; (d6a0 <arm_mpu_init+0x7c>)
    d674:	480b      	ldr	r0, [pc, #44]	; (d6a4 <arm_mpu_init+0x80>)
    d676:	f44f 72b3 	mov.w	r2, #358	; 0x166
    d67a:	f00c f976 	bl	1996a <printk>
    d67e:	f44f 71b3 	mov.w	r1, #358	; 0x166
    d682:	4807      	ldr	r0, [pc, #28]	; (d6a0 <arm_mpu_init+0x7c>)
    d684:	f00c fc17 	bl	19eb6 <assert_post_action>
	return 0;
    d688:	2000      	movs	r0, #0
    d68a:	e7dd      	b.n	d648 <arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    d68c:	6869      	ldr	r1, [r5, #4]
    d68e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    d692:	f7ff fead 	bl	d3f0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d696:	3001      	adds	r0, #1
    d698:	e7de      	b.n	d658 <arm_mpu_init+0x34>
    d69a:	bf00      	nop
    d69c:	0001dbf8 	.word	0x0001dbf8
    d6a0:	0001fa1e 	.word	0x0001fa1e
    d6a4:	0001ea60 	.word	0x0001ea60
    d6a8:	e000ed00 	.word	0xe000ed00
    d6ac:	0044ffaa 	.word	0x0044ffaa
    d6b0:	2000c528 	.word	0x2000c528

0000d6b4 <arm_core_mpu_configure_static_mpu_regions>:
{
    d6b4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    d6b6:	4c0a      	ldr	r4, [pc, #40]	; (d6e0 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    d6b8:	7822      	ldrb	r2, [r4, #0]
    d6ba:	f7ff fedb 	bl	d474 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    d6be:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    d6c0:	3016      	adds	r0, #22
    d6c2:	d10c      	bne.n	d6de <arm_core_mpu_configure_static_mpu_regions+0x2a>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    d6c4:	4907      	ldr	r1, [pc, #28]	; (d6e4 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    d6c6:	4808      	ldr	r0, [pc, #32]	; (d6e8 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    d6c8:	f44f 7282 	mov.w	r2, #260	; 0x104
    d6cc:	f00c f94d 	bl	1996a <printk>
}
    d6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    d6d4:	f44f 7182 	mov.w	r1, #260	; 0x104
    d6d8:	4802      	ldr	r0, [pc, #8]	; (d6e4 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    d6da:	f00c bbec 	b.w	19eb6 <assert_post_action>
}
    d6de:	bd10      	pop	{r4, pc}
    d6e0:	2000c528 	.word	0x2000c528
    d6e4:	0001fa1e 	.word	0x0001fa1e
    d6e8:	0001ea60 	.word	0x0001ea60

0000d6ec <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    d6ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d6f0:	4d30      	ldr	r5, [pc, #192]	; (d7b4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    d6f2:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d6f4:	4606      	mov	r6, r0
    d6f6:	f04f 0800 	mov.w	r8, #0
    d6fa:	46ab      	mov	fp, r5
	MPU->RNR = index;
    d6fc:	4f2e      	ldr	r7, [pc, #184]	; (d7b8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d6fe:	45d0      	cmp	r8, sl
    d700:	db02      	blt.n	d708 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    d702:	b003      	add	sp, #12
    d704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    d708:	f8d6 9004 	ldr.w	r9, [r6, #4]
    d70c:	f1b9 0f00 	cmp.w	r9, #0
    d710:	d04a      	beq.n	d7a8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    d712:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d714:	4608      	mov	r0, r1
    d716:	9101      	str	r1, [sp, #4]
    d718:	f00d fa90 	bl	1ac3c <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d71c:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d71e:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d720:	eb09 0001 	add.w	r0, r9, r1
    d724:	3801      	subs	r0, #1
    d726:	f00d fa89 	bl	1ac3c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d72a:	4284      	cmp	r4, r0
    d72c:	f04f 0214 	mov.w	r2, #20
    d730:	4b22      	ldr	r3, [pc, #136]	; (d7bc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    d732:	d013      	beq.n	d75c <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    d734:	f06f 0315 	mvn.w	r3, #21
    d738:	fb02 f808 	mul.w	r8, r2, r8
    d73c:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    d740:	f44f 728a 	mov.w	r2, #276	; 0x114
    d744:	491e      	ldr	r1, [pc, #120]	; (d7c0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    d746:	481f      	ldr	r0, [pc, #124]	; (d7c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    d748:	f00c f90f 	bl	1996a <printk>
    d74c:	f44f 718a 	mov.w	r1, #276	; 0x114
    d750:	481b      	ldr	r0, [pc, #108]	; (d7c0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    d752:	b003      	add	sp, #12
    d754:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    d758:	f00c bbad 	b.w	19eb6 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    d75c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    d760:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    d762:	d0ed      	beq.n	d740 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    d764:	7819      	ldrb	r1, [r3, #0]
    d766:	42a1      	cmp	r1, r4
    d768:	ddea      	ble.n	d740 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    d76a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    d76e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    d772:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    d776:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    d77a:	f100 0108 	add.w	r1, r0, #8
    d77e:	7b00      	ldrb	r0, [r0, #12]
    d780:	f364 0004 	bfi	r0, r4, #0, #5
    d784:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d786:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    d78a:	790c      	ldrb	r4, [r1, #4]
    d78c:	0840      	lsrs	r0, r0, #1
    d78e:	f360 1447 	bfi	r4, r0, #5, #3
    d792:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    d794:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    d798:	f021 011f 	bic.w	r1, r1, #31
    d79c:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    d79e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    d7a2:	f021 011f 	bic.w	r1, r1, #31
    d7a6:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d7a8:	f108 0801 	add.w	r8, r8, #1
    d7ac:	3514      	adds	r5, #20
    d7ae:	360c      	adds	r6, #12
    d7b0:	e7a5      	b.n	d6fe <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    d7b2:	bf00      	nop
    d7b4:	2000a92c 	.word	0x2000a92c
    d7b8:	e000ed00 	.word	0xe000ed00
    d7bc:	2000c528 	.word	0x2000c528
    d7c0:	0001fa1e 	.word	0x0001fa1e
    d7c4:	0001ea60 	.word	0x0001ea60

0000d7c8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    d7c8:	4b01      	ldr	r3, [pc, #4]	; (d7d0 <__stdout_hook_install+0x8>)
    d7ca:	6018      	str	r0, [r3, #0]
}
    d7cc:	4770      	bx	lr
    d7ce:	bf00      	nop
    d7d0:	20008328 	.word	0x20008328

0000d7d4 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    d7d4:	2000      	movs	r0, #0
    d7d6:	4b02      	ldr	r3, [pc, #8]	; (d7e0 <remoteproc_mgr_boot+0xc>)
    d7d8:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    d7dc:	4770      	bx	lr
    d7de:	bf00      	nop
    d7e0:	40005000 	.word	0x40005000

0000d7e4 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    d7e4:	4b0e      	ldr	r3, [pc, #56]	; (d820 <bt_hex_real+0x3c>)
    d7e6:	2940      	cmp	r1, #64	; 0x40
    d7e8:	bf28      	it	cs
    d7ea:	2140      	movcs	r1, #64	; 0x40
{
    d7ec:	b570      	push	{r4, r5, r6, lr}
    d7ee:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    d7f0:	4c0c      	ldr	r4, [pc, #48]	; (d824 <bt_hex_real+0x40>)
    d7f2:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    d7f4:	42b0      	cmp	r0, r6
    d7f6:	f103 0302 	add.w	r3, r3, #2
    d7fa:	d104      	bne.n	d806 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    d7fc:	2300      	movs	r3, #0
    d7fe:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    d802:	4807      	ldr	r0, [pc, #28]	; (d820 <bt_hex_real+0x3c>)
    d804:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    d806:	7802      	ldrb	r2, [r0, #0]
    d808:	0912      	lsrs	r2, r2, #4
    d80a:	5ca2      	ldrb	r2, [r4, r2]
    d80c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    d810:	f810 2b01 	ldrb.w	r2, [r0], #1
    d814:	f002 020f 	and.w	r2, r2, #15
    d818:	5ca2      	ldrb	r2, [r4, r2]
    d81a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    d81e:	e7e9      	b.n	d7f4 <bt_hex_real+0x10>
    d820:	2000c547 	.word	0x2000c547
    d824:	0001fa87 	.word	0x0001fa87

0000d828 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    d828:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    d82a:	7803      	ldrb	r3, [r0, #0]
    d82c:	b08b      	sub	sp, #44	; 0x2c
    d82e:	4604      	mov	r4, r0
    d830:	ad07      	add	r5, sp, #28
    d832:	2b03      	cmp	r3, #3
    d834:	d821      	bhi.n	d87a <bt_addr_le_str_real+0x52>
    d836:	e8df f003 	tbb	[pc, r3]
    d83a:	1a02      	.short	0x1a02
    d83c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    d83e:	4912      	ldr	r1, [pc, #72]	; (d888 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    d840:	4628      	mov	r0, r5
    d842:	f00d fa78 	bl	1ad36 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    d846:	7863      	ldrb	r3, [r4, #1]
    d848:	211e      	movs	r1, #30
    d84a:	9304      	str	r3, [sp, #16]
    d84c:	78a3      	ldrb	r3, [r4, #2]
    d84e:	4a0f      	ldr	r2, [pc, #60]	; (d88c <bt_addr_le_str_real+0x64>)
    d850:	9303      	str	r3, [sp, #12]
    d852:	78e3      	ldrb	r3, [r4, #3]
    d854:	9505      	str	r5, [sp, #20]
    d856:	9302      	str	r3, [sp, #8]
    d858:	7923      	ldrb	r3, [r4, #4]
    d85a:	480d      	ldr	r0, [pc, #52]	; (d890 <bt_addr_le_str_real+0x68>)
    d85c:	9301      	str	r3, [sp, #4]
    d85e:	7963      	ldrb	r3, [r4, #5]
    d860:	9300      	str	r3, [sp, #0]
    d862:	79a3      	ldrb	r3, [r4, #6]
    d864:	f00c f88e 	bl	19984 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    d868:	4809      	ldr	r0, [pc, #36]	; (d890 <bt_addr_le_str_real+0x68>)
    d86a:	b00b      	add	sp, #44	; 0x2c
    d86c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    d86e:	4909      	ldr	r1, [pc, #36]	; (d894 <bt_addr_le_str_real+0x6c>)
    d870:	e7e6      	b.n	d840 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    d872:	4909      	ldr	r1, [pc, #36]	; (d898 <bt_addr_le_str_real+0x70>)
    d874:	e7e4      	b.n	d840 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    d876:	4909      	ldr	r1, [pc, #36]	; (d89c <bt_addr_le_str_real+0x74>)
    d878:	e7e2      	b.n	d840 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    d87a:	210a      	movs	r1, #10
    d87c:	4628      	mov	r0, r5
    d87e:	4a08      	ldr	r2, [pc, #32]	; (d8a0 <bt_addr_le_str_real+0x78>)
    d880:	f00c f880 	bl	19984 <snprintk>
		break;
    d884:	e7df      	b.n	d846 <bt_addr_le_str_real+0x1e>
    d886:	bf00      	nop
    d888:	0001e458 	.word	0x0001e458
    d88c:	0001e481 	.word	0x0001e481
    d890:	2000c529 	.word	0x2000c529
    d894:	0001e45f 	.word	0x0001e45f
    d898:	0001e466 	.word	0x0001e466
    d89c:	0001e470 	.word	0x0001e470
    d8a0:	0001e47a 	.word	0x0001e47a

0000d8a4 <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    d8a4:	2149      	movs	r1, #73	; 0x49
{
    d8a6:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    d8a8:	4809      	ldr	r0, [pc, #36]	; (d8d0 <save_id+0x2c>)
    d8aa:	f00c f85e 	bl	1996a <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    d8ae:	4909      	ldr	r1, [pc, #36]	; (d8d4 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    d8b0:	4809      	ldr	r0, [pc, #36]	; (d8d8 <save_id+0x34>)
    d8b2:	79ca      	ldrb	r2, [r1, #7]
    d8b4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    d8b8:	f7fd fc66 	bl	b188 <settings_save_one>
	if (err) {
    d8bc:	4602      	mov	r2, r0
    d8be:	b128      	cbz	r0, d8cc <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    d8c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    d8c4:	2145      	movs	r1, #69	; 0x45
    d8c6:	4805      	ldr	r0, [pc, #20]	; (d8dc <save_id+0x38>)
    d8c8:	f00c b84f 	b.w	1996a <printk>
}
    d8cc:	bd08      	pop	{r3, pc}
    d8ce:	bf00      	nop
    d8d0:	0001fa98 	.word	0x0001fa98
    d8d4:	20008000 	.word	0x20008000
    d8d8:	0001faa7 	.word	0x0001faa7
    d8dc:	0001faad 	.word	0x0001faad

0000d8e0 <set>:
{
    d8e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d8e2:	4616      	mov	r6, r2
    d8e4:	461f      	mov	r7, r3
	if (!name) {
    d8e6:	4604      	mov	r4, r0
    d8e8:	b930      	cbnz	r0, d8f8 <set+0x18>
		BT_ERR("Insufficient number of arguments");
    d8ea:	2145      	movs	r1, #69	; 0x45
    d8ec:	4819      	ldr	r0, [pc, #100]	; (d954 <set+0x74>)
    d8ee:	f00c f83c 	bl	1996a <printk>
	return -ENOENT;
    d8f2:	f06f 0401 	mvn.w	r4, #1
    d8f6:	e013      	b.n	d920 <set+0x40>
	len = settings_name_next(name, &next);
    d8f8:	a901      	add	r1, sp, #4
    d8fa:	f00c fb55 	bl	19fa8 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    d8fe:	4916      	ldr	r1, [pc, #88]	; (d958 <set+0x78>)
	len = settings_name_next(name, &next);
    d900:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    d902:	4620      	mov	r0, r4
    d904:	f00d fa4f 	bl	1ada6 <strncmp>
    d908:	4604      	mov	r4, r0
    d90a:	2800      	cmp	r0, #0
    d90c:	d1f1      	bne.n	d8f2 <set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d90e:	4d13      	ldr	r5, [pc, #76]	; (d95c <set+0x7c>)
    d910:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    d914:	075b      	lsls	r3, r3, #29
    d916:	d506      	bpl.n	d926 <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    d918:	2157      	movs	r1, #87	; 0x57
    d91a:	4811      	ldr	r0, [pc, #68]	; (d960 <set+0x80>)
    d91c:	f00c f825 	bl	1996a <printk>
}
    d920:	4620      	mov	r0, r4
    d922:	b003      	add	sp, #12
    d924:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    d926:	3d94      	subs	r5, #148	; 0x94
    d928:	2207      	movs	r2, #7
    d92a:	4629      	mov	r1, r5
    d92c:	4638      	mov	r0, r7
    d92e:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    d930:	2806      	cmp	r0, #6
    d932:	d80a      	bhi.n	d94a <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    d934:	2145      	movs	r1, #69	; 0x45
    d936:	480b      	ldr	r0, [pc, #44]	; (d964 <set+0x84>)
    d938:	f00c f817 	bl	1996a <printk>
			(void)memset(bt_dev.id_addr, 0,
    d93c:	2207      	movs	r2, #7
    d93e:	4621      	mov	r1, r4
    d940:	4628      	mov	r0, r5
    d942:	f00d fa7d 	bl	1ae40 <memset>
			bt_dev.id_count = 0U;
    d946:	71ec      	strb	r4, [r5, #7]
    d948:	e7ea      	b.n	d920 <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    d94a:	2307      	movs	r3, #7
    d94c:	fbb0 f0f3 	udiv	r0, r0, r3
    d950:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    d952:	e7e5      	b.n	d920 <set+0x40>
    d954:	0001facd 	.word	0x0001facd
    d958:	0001e46d 	.word	0x0001e46d
    d95c:	20008094 	.word	0x20008094
    d960:	0001faf3 	.word	0x0001faf3
    d964:	0001fb1c 	.word	0x0001fb1c

0000d968 <bt_settings_encode_key>:
{
    d968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d96c:	b088      	sub	sp, #32
    d96e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    d972:	799c      	ldrb	r4, [r3, #6]
    d974:	795d      	ldrb	r5, [r3, #5]
    d976:	791e      	ldrb	r6, [r3, #4]
    d978:	78df      	ldrb	r7, [r3, #3]
    d97a:	f893 c002 	ldrb.w	ip, [r3, #2]
    d97e:	f893 e001 	ldrb.w	lr, [r3, #1]
    d982:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    d984:	f1b8 0f00 	cmp.w	r8, #0
    d988:	d00e      	beq.n	d9a8 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    d98a:	e9cd 3806 	strd	r3, r8, [sp, #24]
    d98e:	e9cd ce04 	strd	ip, lr, [sp, #16]
    d992:	4613      	mov	r3, r2
    d994:	e9cd 6702 	strd	r6, r7, [sp, #8]
    d998:	e9cd 4500 	strd	r4, r5, [sp]
    d99c:	4a08      	ldr	r2, [pc, #32]	; (d9c0 <bt_settings_encode_key+0x58>)
    d99e:	f00b fff1 	bl	19984 <snprintk>
}
    d9a2:	b008      	add	sp, #32
    d9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    d9a8:	e9cd e305 	strd	lr, r3, [sp, #20]
    d9ac:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    d9b0:	4613      	mov	r3, r2
    d9b2:	e9cd 5601 	strd	r5, r6, [sp, #4]
    d9b6:	4a03      	ldr	r2, [pc, #12]	; (d9c4 <bt_settings_encode_key+0x5c>)
    d9b8:	9400      	str	r4, [sp, #0]
    d9ba:	f00b ffe3 	bl	19984 <snprintk>
}
    d9be:	e7f0      	b.n	d9a2 <bt_settings_encode_key+0x3a>
    d9c0:	0001fb46 	.word	0x0001fb46
    d9c4:	0001fb6a 	.word	0x0001fb6a

0000d9c8 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d9c8:	4907      	ldr	r1, [pc, #28]	; (d9e8 <bt_settings_save_id+0x20>)
    d9ca:	e8d1 3fef 	ldaex	r3, [r1]
    d9ce:	f043 0201 	orr.w	r2, r3, #1
    d9d2:	e8c1 2fe0 	stlex	r0, r2, [r1]
    d9d6:	2800      	cmp	r0, #0
    d9d8:	d1f7      	bne.n	d9ca <bt_settings_save_id+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    d9da:	07db      	lsls	r3, r3, #31
    d9dc:	d403      	bmi.n	d9e6 <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    d9de:	4803      	ldr	r0, [pc, #12]	; (d9ec <bt_settings_save_id+0x24>)
    d9e0:	3908      	subs	r1, #8
    d9e2:	f00f bb3f 	b.w	1d064 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    d9e6:	4770      	bx	lr
    d9e8:	20008334 	.word	0x20008334
    d9ec:	2000a3b0 	.word	0x2000a3b0

0000d9f0 <commit>:

static int commit(void)
{
    d9f0:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    d9f2:	4c13      	ldr	r4, [pc, #76]	; (da40 <commit+0x50>)
    d9f4:	79e3      	ldrb	r3, [r4, #7]
    d9f6:	b96b      	cbnz	r3, da14 <commit+0x24>
		bt_setup_public_id_addr();
    d9f8:	f001 ffc0 	bl	f97c <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    d9fc:	79e3      	ldrb	r3, [r4, #7]
    d9fe:	b94b      	cbnz	r3, da14 <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    da00:	f002 f84a 	bl	fa98 <bt_setup_random_id_addr>
		if (err) {
    da04:	4604      	mov	r4, r0
    da06:	b128      	cbz	r0, da14 <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    da08:	2145      	movs	r1, #69	; 0x45
    da0a:	480e      	ldr	r0, [pc, #56]	; (da44 <commit+0x54>)
    da0c:	f00b ffad 	bl	1996a <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    da10:	4620      	mov	r0, r4
    da12:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    da14:	4d0c      	ldr	r5, [pc, #48]	; (da48 <commit+0x58>)
    da16:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    da1a:	079b      	lsls	r3, r3, #30
    da1c:	d401      	bmi.n	da22 <commit+0x32>
		bt_finalize_init();
    da1e:	f001 fc95 	bl	f34c <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    da22:	e8d5 4fef 	ldaex	r4, [r5]
    da26:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    da2a:	e8c5 3fe2 	stlex	r2, r3, [r5]
    da2e:	2a00      	cmp	r2, #0
    da30:	d1f7      	bne.n	da22 <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    da32:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    da36:	d0eb      	beq.n	da10 <commit+0x20>
		bt_settings_save_id();
    da38:	f7ff ffc6 	bl	d9c8 <bt_settings_save_id>
	return 0;
    da3c:	2400      	movs	r4, #0
    da3e:	e7e7      	b.n	da10 <commit+0x20>
    da40:	20008000 	.word	0x20008000
    da44:	0001fb8b 	.word	0x0001fb8b
    da48:	20008094 	.word	0x20008094

0000da4c <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    da4c:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    da4e:	f7fd fc65 	bl	b31c <settings_subsys_init>
	if (err) {
    da52:	4604      	mov	r4, r0
    da54:	b120      	cbz	r0, da60 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    da56:	4602      	mov	r2, r0
    da58:	2145      	movs	r1, #69	; 0x45
    da5a:	4802      	ldr	r0, [pc, #8]	; (da64 <bt_settings_init+0x18>)
    da5c:	f00b ff85 	bl	1996a <printk>
		return err;
	}

	return 0;
}
    da60:	4620      	mov	r0, r4
    da62:	bd10      	pop	{r4, pc}
    da64:	0001fbb4 	.word	0x0001fbb4

0000da68 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    da68:	4603      	mov	r3, r0
    da6a:	b430      	push	{r4, r5}
	switch (src->type) {
    da6c:	781a      	ldrb	r2, [r3, #0]
{
    da6e:	4608      	mov	r0, r1
	switch (src->type) {
    da70:	2a01      	cmp	r2, #1
    da72:	d013      	beq.n	da9c <uuid_to_uuid128+0x34>
    da74:	2a02      	cmp	r2, #2
    da76:	d026      	beq.n	dac6 <uuid_to_uuid128+0x5e>
    da78:	b972      	cbnz	r2, da98 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    da7a:	4a15      	ldr	r2, [pc, #84]	; (dad0 <uuid_to_uuid128+0x68>)
    da7c:	f102 0410 	add.w	r4, r2, #16
    da80:	f852 5b04 	ldr.w	r5, [r2], #4
    da84:	42a2      	cmp	r2, r4
    da86:	f841 5b04 	str.w	r5, [r1], #4
    da8a:	d1f9      	bne.n	da80 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    da8c:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    da8e:	7812      	ldrb	r2, [r2, #0]
    da90:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    da92:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    da94:	0a1b      	lsrs	r3, r3, #8
    da96:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    da98:	bc30      	pop	{r4, r5}
    da9a:	4770      	bx	lr
		*dst = uuid128_base;
    da9c:	4a0c      	ldr	r2, [pc, #48]	; (dad0 <uuid_to_uuid128+0x68>)
    da9e:	f102 0410 	add.w	r4, r2, #16
    daa2:	f852 5b04 	ldr.w	r5, [r2], #4
    daa6:	42a2      	cmp	r2, r4
    daa8:	f841 5b04 	str.w	r5, [r1], #4
    daac:	d1f9      	bne.n	daa2 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    daae:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    dab0:	7812      	ldrb	r2, [r2, #0]
    dab2:	700a      	strb	r2, [r1, #0]
    dab4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    dab8:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    daba:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    dabc:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    dabe:	0a1b      	lsrs	r3, r3, #8
    dac0:	7382      	strb	r2, [r0, #14]
    dac2:	7403      	strb	r3, [r0, #16]
}
    dac4:	e7e8      	b.n	da98 <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    dac6:	2211      	movs	r2, #17
}
    dac8:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    daca:	4619      	mov	r1, r3
    dacc:	f00d b98d 	b.w	1adea <memcpy>
    dad0:	0001fbed 	.word	0x0001fbed

0000dad4 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    dad4:	2801      	cmp	r0, #1
{
    dad6:	b570      	push	{r4, r5, r6, lr}
    dad8:	4605      	mov	r5, r0
    dada:	4616      	mov	r6, r2
    dadc:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    dade:	d010      	beq.n	db02 <bt_buf_get_rx+0x2e>
    dae0:	2803      	cmp	r0, #3
    dae2:	d00a      	beq.n	dafa <bt_buf_get_rx+0x26>
    dae4:	2805      	cmp	r0, #5
    dae6:	d008      	beq.n	dafa <bt_buf_get_rx+0x26>
    dae8:	490c      	ldr	r1, [pc, #48]	; (db1c <bt_buf_get_rx+0x48>)
    daea:	480d      	ldr	r0, [pc, #52]	; (db20 <bt_buf_get_rx+0x4c>)
    daec:	2233      	movs	r2, #51	; 0x33
    daee:	f00b ff3c 	bl	1996a <printk>
    daf2:	2133      	movs	r1, #51	; 0x33
    daf4:	4809      	ldr	r0, [pc, #36]	; (db1c <bt_buf_get_rx+0x48>)
    daf6:	f00c f9de 	bl	19eb6 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    dafa:	4632      	mov	r2, r6
    dafc:	4623      	mov	r3, r4
    dafe:	4809      	ldr	r0, [pc, #36]	; (db24 <bt_buf_get_rx+0x50>)
    db00:	e000      	b.n	db04 <bt_buf_get_rx+0x30>
    db02:	4809      	ldr	r0, [pc, #36]	; (db28 <bt_buf_get_rx+0x54>)
    db04:	f00e fc45 	bl	1c392 <net_buf_alloc_fixed>
    db08:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    db0a:	b12c      	cbz	r4, db18 <bt_buf_get_rx+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
    db0c:	2101      	movs	r1, #1
    db0e:	f104 0008 	add.w	r0, r4, #8
    db12:	f006 fe65 	bl	147e0 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    db16:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    db18:	4620      	mov	r0, r4
    db1a:	bd70      	pop	{r4, r5, r6, pc}
    db1c:	0001fbfe 	.word	0x0001fbfe
    db20:	0001ea60 	.word	0x0001ea60
    db24:	200086b0 	.word	0x200086b0
    db28:	2000878c 	.word	0x2000878c

0000db2c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    db2c:	4602      	mov	r2, r0
    db2e:	460b      	mov	r3, r1
    db30:	b570      	push	{r4, r5, r6, lr}
    db32:	f04f 0120 	mov.w	r1, #32
    db36:	f3ef 8511 	mrs	r5, BASEPRI
    db3a:	f381 8811 	msr	BASEPRI, r1
    db3e:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    db42:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    db44:	490b      	ldr	r1, [pc, #44]	; (db74 <bt_buf_get_cmd_complete+0x48>)
    db46:	f8d1 40f8 	ldr.w	r4, [r1, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    db4a:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
	__asm__ volatile(
    db4e:	f385 8811 	msr	BASEPRI, r5
    db52:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    db56:	b924      	cbnz	r4, db62 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    db58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    db5c:	2001      	movs	r0, #1
    db5e:	f7ff bfb9 	b.w	dad4 <bt_buf_get_rx>
    db62:	2101      	movs	r1, #1
		buf->len = 0U;
    db64:	81a0      	strh	r0, [r4, #12]
    db66:	7521      	strb	r1, [r4, #20]
    db68:	f104 0008 	add.w	r0, r4, #8
    db6c:	f006 fe38 	bl	147e0 <net_buf_simple_reserve>
}
    db70:	4620      	mov	r0, r4
    db72:	bd70      	pop	{r4, r5, r6, pc}
    db74:	20008000 	.word	0x20008000

0000db78 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    db78:	b570      	push	{r4, r5, r6, lr}
    db7a:	4604      	mov	r4, r0
	switch (evt) {
    db7c:	2c0f      	cmp	r4, #15
{
    db7e:	460d      	mov	r5, r1
    db80:	4610      	mov	r0, r2
    db82:	4619      	mov	r1, r3
	switch (evt) {
    db84:	d805      	bhi.n	db92 <bt_buf_get_evt+0x1a>
    db86:	2c0d      	cmp	r4, #13
    db88:	d912      	bls.n	dbb0 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    db8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    db8e:	f7ff bfcd 	b.w	db2c <bt_buf_get_cmd_complete>
	switch (evt) {
    db92:	2c13      	cmp	r4, #19
    db94:	d10c      	bne.n	dbb0 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    db96:	480b      	ldr	r0, [pc, #44]	; (dbc4 <bt_buf_get_evt+0x4c>)
    db98:	f00e fbfb 	bl	1c392 <net_buf_alloc_fixed>
			if (buf) {
    db9c:	4604      	mov	r4, r0
    db9e:	b128      	cbz	r0, dbac <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    dba0:	2101      	movs	r1, #1
    dba2:	3008      	adds	r0, #8
    dba4:	f006 fe1c 	bl	147e0 <net_buf_simple_reserve>
    dba8:	2301      	movs	r3, #1
    dbaa:	7523      	strb	r3, [r4, #20]
}
    dbac:	4620      	mov	r0, r4
    dbae:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    dbb0:	4602      	mov	r2, r0
    dbb2:	460b      	mov	r3, r1
		if (discardable) {
    dbb4:	b10d      	cbz	r5, dbba <bt_buf_get_evt+0x42>
    dbb6:	4804      	ldr	r0, [pc, #16]	; (dbc8 <bt_buf_get_evt+0x50>)
    dbb8:	e7ee      	b.n	db98 <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    dbba:	2001      	movs	r0, #1
}
    dbbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    dbc0:	f7ff bf88 	b.w	dad4 <bt_buf_get_rx>
    dbc4:	200087b8 	.word	0x200087b8
    dbc8:	20008708 	.word	0x20008708

0000dbcc <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    dbcc:	6883      	ldr	r3, [r0, #8]
    dbce:	2157      	movs	r1, #87	; 0x57
    dbd0:	781a      	ldrb	r2, [r3, #0]
    dbd2:	4801      	ldr	r0, [pc, #4]	; (dbd8 <hci_data_buf_overflow+0xc>)
    dbd4:	f00b bec9 	b.w	1996a <printk>
    dbd8:	0001fc34 	.word	0x0001fc34

0000dbdc <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    dbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbde:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    dbe0:	2500      	movs	r5, #0
    dbe2:	4f09      	ldr	r7, [pc, #36]	; (dc08 <id_find+0x2c>)
    dbe4:	79fb      	ldrb	r3, [r7, #7]
    dbe6:	b2ec      	uxtb	r4, r5
    dbe8:	42a3      	cmp	r3, r4
    dbea:	d802      	bhi.n	dbf2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    dbec:	f06f 0401 	mvn.w	r4, #1
    dbf0:	e008      	b.n	dc04 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    dbf2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    dbf6:	4630      	mov	r0, r6
    dbf8:	4439      	add	r1, r7
    dbfa:	f00d f9f4 	bl	1afe6 <bt_addr_le_cmp>
    dbfe:	3501      	adds	r5, #1
    dc00:	2800      	cmp	r0, #0
    dc02:	d1ef      	bne.n	dbe4 <id_find+0x8>
}
    dc04:	4620      	mov	r0, r4
    dc06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dc08:	20008000 	.word	0x20008000

0000dc0c <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    dc0c:	6843      	ldr	r3, [r0, #4]
{
    dc0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dc10:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    dc12:	0558      	lsls	r0, r3, #21
    dc14:	d502      	bpl.n	dc1c <valid_adv_param+0x10>
		return false;
    dc16:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    dc18:	b003      	add	sp, #12
    dc1a:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    dc1c:	6922      	ldr	r2, [r4, #16]
    dc1e:	b10a      	cbz	r2, dc24 <valid_adv_param+0x18>
    dc20:	07d9      	lsls	r1, r3, #31
    dc22:	d5f8      	bpl.n	dc16 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    dc24:	4d1a      	ldr	r5, [pc, #104]	; (dc90 <valid_adv_param+0x84>)
    dc26:	7820      	ldrb	r0, [r4, #0]
    dc28:	79eb      	ldrb	r3, [r5, #7]
    dc2a:	4283      	cmp	r3, r0
    dc2c:	d9f3      	bls.n	dc16 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    dc2e:	2300      	movs	r3, #0
    dc30:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    dc34:	4669      	mov	r1, sp
    dc36:	4428      	add	r0, r5
    dc38:	9300      	str	r3, [sp, #0]
    dc3a:	f8cd 3003 	str.w	r3, [sp, #3]
    dc3e:	f00d f9d2 	bl	1afe6 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    dc42:	2800      	cmp	r0, #0
    dc44:	d0e7      	beq.n	dc16 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    dc46:	6860      	ldr	r0, [r4, #4]
    dc48:	07c2      	lsls	r2, r0, #31
    dc4a:	d406      	bmi.n	dc5a <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    dc4c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    dc50:	2b08      	cmp	r3, #8
    dc52:	d802      	bhi.n	dc5a <valid_adv_param+0x4e>
    dc54:	68a3      	ldr	r3, [r4, #8]
    dc56:	2b9f      	cmp	r3, #159	; 0x9f
    dc58:	d9dd      	bls.n	dc16 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    dc5a:	f010 0f30 	tst.w	r0, #48	; 0x30
    dc5e:	d002      	beq.n	dc66 <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    dc60:	6923      	ldr	r3, [r4, #16]
    dc62:	2b00      	cmp	r3, #0
    dc64:	d0d7      	beq.n	dc16 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    dc66:	06c3      	lsls	r3, r0, #27
    dc68:	d401      	bmi.n	dc6e <valid_adv_param+0x62>
    dc6a:	6923      	ldr	r3, [r4, #16]
    dc6c:	b943      	cbnz	r3, dc80 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    dc6e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    dc72:	429a      	cmp	r2, r3
    dc74:	d8cf      	bhi.n	dc16 <valid_adv_param+0xa>
    dc76:	2a1f      	cmp	r2, #31
    dc78:	d9cd      	bls.n	dc16 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    dc7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    dc7e:	d8ca      	bhi.n	dc16 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    dc80:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    dc84:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    dc88:	bf18      	it	ne
    dc8a:	2001      	movne	r0, #1
    dc8c:	e7c4      	b.n	dc18 <valid_adv_param+0xc>
    dc8e:	bf00      	nop
    dc90:	20008000 	.word	0x20008000

0000dc94 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dc94:	6883      	ldr	r3, [r0, #8]
{
    dc96:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dc98:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    dc9a:	4620      	mov	r0, r4
    dc9c:	f002 fd98 	bl	107d0 <bt_conn_lookup_handle>
	if (!conn) {
    dca0:	b930      	cbnz	r0, dcb0 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    dca2:	4622      	mov	r2, r4
}
    dca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    dca8:	2145      	movs	r1, #69	; 0x45
    dcaa:	4803      	ldr	r0, [pc, #12]	; (dcb8 <le_data_len_change+0x24>)
    dcac:	f00b be5d 	b.w	1996a <printk>
}
    dcb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    dcb4:	f002 bd68 	b.w	10788 <bt_conn_unref>
    dcb8:	0001fc61 	.word	0x0001fc61

0000dcbc <hci_disconn_complete_prio>:
{
    dcbc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    dcbe:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    dcc0:	781a      	ldrb	r2, [r3, #0]
    dcc2:	b9aa      	cbnz	r2, dcf0 <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dcc4:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    dcc8:	4628      	mov	r0, r5
    dcca:	f002 fd81 	bl	107d0 <bt_conn_lookup_handle>
	if (!conn) {
    dcce:	4604      	mov	r4, r0
    dcd0:	b930      	cbnz	r0, dce0 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    dcd2:	462a      	mov	r2, r5
}
    dcd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    dcd8:	2145      	movs	r1, #69	; 0x45
    dcda:	4806      	ldr	r0, [pc, #24]	; (dcf4 <hci_disconn_complete_prio+0x38>)
    dcdc:	f00b be45 	b.w	1996a <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    dce0:	2101      	movs	r1, #1
    dce2:	f002 fd7d 	bl	107e0 <bt_conn_set_state>
	bt_conn_unref(conn);
    dce6:	4620      	mov	r0, r4
}
    dce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    dcec:	f002 bd4c 	b.w	10788 <bt_conn_unref>
}
    dcf0:	bd38      	pop	{r3, r4, r5, pc}
    dcf2:	bf00      	nop
    dcf4:	0001fc8a 	.word	0x0001fc8a

0000dcf8 <hci_hardware_error>:
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    dcf8:	2101      	movs	r1, #1
{
    dcfa:	b508      	push	{r3, lr}
    dcfc:	3008      	adds	r0, #8
    dcfe:	f006 feb9 	bl	14a74 <net_buf_simple_pull_mem>
}
    dd02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    dd06:	7802      	ldrb	r2, [r0, #0]
    dd08:	2145      	movs	r1, #69	; 0x45
    dd0a:	4801      	ldr	r0, [pc, #4]	; (dd10 <hci_hardware_error+0x18>)
    dd0c:	f00b be2d 	b.w	1996a <printk>
    dd10:	0001fcb5 	.word	0x0001fcb5

0000dd14 <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    dd14:	8981      	ldrh	r1, [r0, #12]
{
    dd16:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    dd18:	6880      	ldr	r0, [r0, #8]
    dd1a:	f7ff fd63 	bl	d7e4 <bt_hex_real>
}
    dd1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    dd22:	4602      	mov	r2, r0
    dd24:	2157      	movs	r1, #87	; 0x57
    dd26:	4801      	ldr	r0, [pc, #4]	; (dd2c <hci_vendor_event+0x18>)
    dd28:	f00b be1f 	b.w	1996a <printk>
    dd2c:	0001fcdc 	.word	0x0001fcdc

0000dd30 <le_conn_update_complete>:
{
    dd30:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    dd32:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    dd34:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    dd38:	4630      	mov	r0, r6
    dd3a:	f002 fd49 	bl	107d0 <bt_conn_lookup_handle>
	if (!conn) {
    dd3e:	4604      	mov	r4, r0
    dd40:	b938      	cbnz	r0, dd52 <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    dd42:	4632      	mov	r2, r6
    dd44:	2145      	movs	r1, #69	; 0x45
    dd46:	4821      	ldr	r0, [pc, #132]	; (ddcc <le_conn_update_complete+0x9c>)
}
    dd48:	b002      	add	sp, #8
    dd4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    dd4e:	f00b be0c 	b.w	1996a <printk>
	if (!evt->status) {
    dd52:	782b      	ldrb	r3, [r5, #0]
    dd54:	b9cb      	cbnz	r3, dd8a <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    dd56:	792a      	ldrb	r2, [r5, #4]
    dd58:	78eb      	ldrb	r3, [r5, #3]
    dd5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd5e:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    dd62:	79aa      	ldrb	r2, [r5, #6]
    dd64:	796b      	ldrb	r3, [r5, #5]
    dd66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd6a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    dd6e:	79eb      	ldrb	r3, [r5, #7]
    dd70:	7a2a      	ldrb	r2, [r5, #8]
    dd72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dd76:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    dd7a:	f002 fb47 	bl	1040c <notify_le_param_updated>
	bt_conn_unref(conn);
    dd7e:	4620      	mov	r0, r4
}
    dd80:	b002      	add	sp, #8
    dd82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    dd86:	f002 bcff 	b.w	10788 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    dd8a:	2b1a      	cmp	r3, #26
    dd8c:	d1f7      	bne.n	dd7e <le_conn_update_complete+0x4e>
    dd8e:	78c3      	ldrb	r3, [r0, #3]
    dd90:	2b01      	cmp	r3, #1
    dd92:	d1f4      	bne.n	dd7e <le_conn_update_complete+0x4e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    dd94:	f44f 6180 	mov.w	r1, #1024	; 0x400
    dd98:	3004      	adds	r0, #4
    dd9a:	f00d f919 	bl	1afd0 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    dd9e:	0543      	lsls	r3, r0, #21
    dda0:	d4ed      	bmi.n	dd7e <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
    dda2:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    dda6:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    dda8:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    ddac:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
		bt_l2cap_update_conn_param(conn, &param);
    ddb0:	4620      	mov	r0, r4
		param.interval_max = conn->le.interval_max;
    ddb2:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    ddb6:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    ddba:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
    ddbe:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    ddc2:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    ddc6:	f003 fb09 	bl	113dc <bt_l2cap_update_conn_param>
    ddca:	e7d8      	b.n	dd7e <le_conn_update_complete+0x4e>
    ddcc:	0001fc61 	.word	0x0001fc61

0000ddd0 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    ddd0:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    ddd2:	4c0c      	ldr	r4, [pc, #48]	; (de04 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    ddd4:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    ddd6:	2205      	movs	r2, #5
    ddd8:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    dddc:	f002 fe36 	bl	10a4c <bt_conn_lookup_state_le>
		if (!conn) {
    dde0:	b970      	cbnz	r0, de00 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    dde2:	4b09      	ldr	r3, [pc, #36]	; (de08 <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    dde4:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    dde6:	6818      	ldr	r0, [r3, #0]
    dde8:	889a      	ldrh	r2, [r3, #4]
    ddea:	799b      	ldrb	r3, [r3, #6]
    ddec:	9000      	str	r0, [sp, #0]
    ddee:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ddf2:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    ddf6:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    ddf8:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ddfc:	f002 fe26 	bl	10a4c <bt_conn_lookup_state_le>
}
    de00:	b002      	add	sp, #8
    de02:	bd10      	pop	{r4, pc}
    de04:	20008000 	.word	0x20008000
    de08:	0001d850 	.word	0x0001d850

0000de0c <handle_event>:
{
    de0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    de0e:	4605      	mov	r5, r0
    de10:	4614      	mov	r4, r2
    de12:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    de14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    de18:	7822      	ldrb	r2, [r4, #0]
    de1a:	42aa      	cmp	r2, r5
    de1c:	d010      	beq.n	de40 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    de1e:	3408      	adds	r4, #8
    de20:	429c      	cmp	r4, r3
    de22:	d1f9      	bne.n	de18 <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    de24:	8984      	ldrh	r4, [r0, #12]
    de26:	6880      	ldr	r0, [r0, #8]
    de28:	4621      	mov	r1, r4
    de2a:	f7ff fcdb 	bl	d7e4 <bt_hex_real>
    de2e:	4623      	mov	r3, r4
    de30:	9000      	str	r0, [sp, #0]
    de32:	462a      	mov	r2, r5
    de34:	2157      	movs	r1, #87	; 0x57
    de36:	480b      	ldr	r0, [pc, #44]	; (de64 <handle_event+0x58>)
    de38:	f00b fd97 	bl	1996a <printk>
}
    de3c:	b003      	add	sp, #12
    de3e:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    de40:	8982      	ldrh	r2, [r0, #12]
    de42:	7863      	ldrb	r3, [r4, #1]
    de44:	4293      	cmp	r3, r2
    de46:	d907      	bls.n	de58 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    de48:	462b      	mov	r3, r5
    de4a:	2145      	movs	r1, #69	; 0x45
    de4c:	4806      	ldr	r0, [pc, #24]	; (de68 <handle_event+0x5c>)
}
    de4e:	b003      	add	sp, #12
    de50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    de54:	f00b bd89 	b.w	1996a <printk>
		handler->handler(buf);
    de58:	6863      	ldr	r3, [r4, #4]
}
    de5a:	b003      	add	sp, #12
    de5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    de60:	4718      	bx	r3
    de62:	bf00      	nop
    de64:	0001fd2c 	.word	0x0001fd2c
    de68:	0001fd05 	.word	0x0001fd05

0000de6c <hci_le_meta_event>:
{
    de6c:	b510      	push	{r4, lr}
    de6e:	2101      	movs	r1, #1
    de70:	4604      	mov	r4, r0
    de72:	3008      	adds	r0, #8
    de74:	f006 fdfe 	bl	14a74 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    de78:	4621      	mov	r1, r4
}
    de7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    de7e:	2308      	movs	r3, #8
    de80:	4a01      	ldr	r2, [pc, #4]	; (de88 <hci_le_meta_event+0x1c>)
    de82:	7800      	ldrb	r0, [r0, #0]
    de84:	f7ff bfc2 	b.w	de0c <handle_event>
    de88:	0001dc60 	.word	0x0001dc60

0000de8c <id_create.constprop.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    de8c:	b530      	push	{r4, r5, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    de8e:	4d18      	ldr	r5, [pc, #96]	; (def0 <id_create.constprop.0+0x64>)
    de90:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    de94:	460c      	mov	r4, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    de96:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    de98:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    de9a:	b1b1      	cbz	r1, deca <id_create.constprop.0+0x3e>
    de9c:	2300      	movs	r3, #0
    de9e:	4620      	mov	r0, r4
    dea0:	a902      	add	r1, sp, #8
    dea2:	9302      	str	r3, [sp, #8]
    dea4:	f8cd 300b 	str.w	r3, [sp, #11]
    dea8:	f00d f89d 	bl	1afe6 <bt_addr_le_cmp>
    deac:	b168      	cbz	r0, deca <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    deae:	4621      	mov	r1, r4
    deb0:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    deb2:	f00d f88a 	bl	1afca <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    deb6:	480f      	ldr	r0, [pc, #60]	; (def4 <id_create.constprop.0+0x68>)
    deb8:	f00d f884 	bl	1afc4 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    debc:	0783      	lsls	r3, r0, #30
    debe:	d515      	bpl.n	deec <id_create.constprop.0+0x60>
}
    dec0:	b005      	add	sp, #20
    dec2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		bt_settings_save_id();
    dec6:	f7ff bd7f 	b.w	d9c8 <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    deca:	4668      	mov	r0, sp
    decc:	f00d f84b 	bl	1af66 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    ded0:	4668      	mov	r0, sp
    ded2:	f7ff fe83 	bl	dbdc <id_find>
    ded6:	2800      	cmp	r0, #0
    ded8:	daf7      	bge.n	deca <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    deda:	4669      	mov	r1, sp
    dedc:	4628      	mov	r0, r5
    dede:	f00d f874 	bl	1afca <bt_addr_le_copy>
		if (addr) {
    dee2:	2c00      	cmp	r4, #0
    dee4:	d0e7      	beq.n	deb6 <id_create.constprop.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    dee6:	4629      	mov	r1, r5
    dee8:	4620      	mov	r0, r4
    deea:	e7e2      	b.n	deb2 <id_create.constprop.0+0x26>
}
    deec:	b005      	add	sp, #20
    deee:	bd30      	pop	{r4, r5, pc}
    def0:	20008000 	.word	0x20008000
    def4:	20008094 	.word	0x20008094

0000def8 <hci_rx_thread>:
{
    def8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    defc:	4f40      	ldr	r7, [pc, #256]	; (e000 <hci_rx_thread+0x108>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    defe:	f8df 8104 	ldr.w	r8, [pc, #260]	; e004 <hci_rx_thread+0x10c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    df02:	4e41      	ldr	r6, [pc, #260]	; (e008 <hci_rx_thread+0x110>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    df04:	f04f 32ff 	mov.w	r2, #4294967295
    df08:	f04f 33ff 	mov.w	r3, #4294967295
    df0c:	4638      	mov	r0, r7
    df0e:	f006 fc37 	bl	14780 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    df12:	7d02      	ldrb	r2, [r0, #20]
    df14:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    df16:	2a01      	cmp	r2, #1
    df18:	d041      	beq.n	df9e <hci_rx_thread+0xa6>
    df1a:	2a03      	cmp	r2, #3
    df1c:	d16c      	bne.n	dff8 <hci_rx_thread+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    df1e:	8983      	ldrh	r3, [r0, #12]
    df20:	2b03      	cmp	r3, #3
    df22:	d80b      	bhi.n	df3c <hci_rx_thread+0x44>
    df24:	f240 42ac 	movw	r2, #1196	; 0x4ac
    df28:	4631      	mov	r1, r6
    df2a:	4838      	ldr	r0, [pc, #224]	; (e00c <hci_rx_thread+0x114>)
    df2c:	f00b fd1d 	bl	1996a <printk>
    df30:	4040      	eors	r0, r0
    df32:	f380 8811 	msr	BASEPRI, r0
    df36:	f04f 0003 	mov.w	r0, #3
    df3a:	df02      	svc	2
    df3c:	2104      	movs	r1, #4
    df3e:	f104 0008 	add.w	r0, r4, #8
    df42:	f006 fd97 	bl	14a74 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    df46:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    df48:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    df4a:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    df4e:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    df50:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    df52:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    df56:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    df58:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    df5a:	d007      	beq.n	df6c <hci_rx_thread+0x74>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    df5c:	2145      	movs	r1, #69	; 0x45
    df5e:	482c      	ldr	r0, [pc, #176]	; (e010 <hci_rx_thread+0x118>)
    df60:	f00b fd03 	bl	1996a <printk>
			net_buf_unref(buf);
    df64:	4620      	mov	r0, r4
    df66:	f006 fc8d 	bl	14884 <net_buf_unref>
			break;
    df6a:	e015      	b.n	df98 <hci_rx_thread+0xa0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    df6c:	f002 fc30 	bl	107d0 <bt_conn_lookup_handle>
	if (!conn) {
    df70:	4605      	mov	r5, r0
    df72:	b928      	cbnz	r0, df80 <hci_rx_thread+0x88>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    df74:	2145      	movs	r1, #69	; 0x45
    df76:	8ae2      	ldrh	r2, [r4, #22]
    df78:	4826      	ldr	r0, [pc, #152]	; (e014 <hci_rx_thread+0x11c>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    df7a:	f00b fcf6 	bl	1996a <printk>
    df7e:	e7f1      	b.n	df64 <hci_rx_thread+0x6c>
	acl(buf)->index = bt_conn_index(conn);
    df80:	f003 f85a 	bl	11038 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    df84:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    df86:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    df88:	ea4f 3219 	mov.w	r2, r9, lsr #12
    df8c:	4628      	mov	r0, r5
    df8e:	f002 fad5 	bl	1053c <bt_conn_recv>
	bt_conn_unref(conn);
    df92:	4628      	mov	r0, r5
    df94:	f002 fbf8 	bl	10788 <bt_conn_unref>
	z_impl_k_yield();
    df98:	f00a f9d0 	bl	1833c <z_impl_k_yield>
	while (1) {
    df9c:	e7b2      	b.n	df04 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    df9e:	8983      	ldrh	r3, [r0, #12]
    dfa0:	2b01      	cmp	r3, #1
    dfa2:	d80b      	bhi.n	dfbc <hci_rx_thread+0xc4>
    dfa4:	f241 32fb 	movw	r2, #5115	; 0x13fb
    dfa8:	4631      	mov	r1, r6
    dfaa:	4818      	ldr	r0, [pc, #96]	; (e00c <hci_rx_thread+0x114>)
    dfac:	f00b fcdd 	bl	1996a <printk>
    dfb0:	4040      	eors	r0, r0
    dfb2:	f380 8811 	msr	BASEPRI, r0
    dfb6:	f04f 0003 	mov.w	r0, #3
    dfba:	df02      	svc	2
    dfbc:	2102      	movs	r1, #2
    dfbe:	f104 0008 	add.w	r0, r4, #8
    dfc2:	f006 fd57 	bl	14a74 <net_buf_simple_pull_mem>
    dfc6:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    dfc8:	7800      	ldrb	r0, [r0, #0]
    dfca:	f00c ffda 	bl	1af82 <bt_hci_evt_get_flags>
    dfce:	0783      	lsls	r3, r0, #30
    dfd0:	d40b      	bmi.n	dfea <hci_rx_thread+0xf2>
    dfd2:	f241 32ff 	movw	r2, #5119	; 0x13ff
    dfd6:	4631      	mov	r1, r6
    dfd8:	480c      	ldr	r0, [pc, #48]	; (e00c <hci_rx_thread+0x114>)
    dfda:	f00b fcc6 	bl	1996a <printk>
    dfde:	4040      	eors	r0, r0
    dfe0:	f380 8811 	msr	BASEPRI, r0
    dfe4:	f04f 0003 	mov.w	r0, #3
    dfe8:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    dfea:	2304      	movs	r3, #4
    dfec:	4642      	mov	r2, r8
    dfee:	4621      	mov	r1, r4
    dff0:	7828      	ldrb	r0, [r5, #0]
    dff2:	f7ff ff0b 	bl	de0c <handle_event>
	net_buf_unref(buf);
    dff6:	e7b5      	b.n	df64 <hci_rx_thread+0x6c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    dff8:	2145      	movs	r1, #69	; 0x45
    dffa:	4807      	ldr	r0, [pc, #28]	; (e018 <hci_rx_thread+0x120>)
    dffc:	e7bd      	b.n	df7a <hci_rx_thread+0x82>
    dffe:	bf00      	nop
    e000:	200080fc 	.word	0x200080fc
    e004:	0001dcb0 	.word	0x0001dcb0
    e008:	0001fd53 	.word	0x0001fd53
    e00c:	0001ea60 	.word	0x0001ea60
    e010:	0001fd87 	.word	0x0001fd87
    e014:	0001fdb0 	.word	0x0001fdb0
    e018:	0001fdd7 	.word	0x0001fdd7

0000e01c <hci_cmd_done>:
{
    e01c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e020:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e022:	7990      	ldrb	r0, [r2, #6]
{
    e024:	460f      	mov	r7, r1
    e026:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e028:	f006 faac 	bl	14584 <net_buf_pool_get>
    e02c:	4d2a      	ldr	r5, [pc, #168]	; (e0d8 <hci_cmd_done+0xbc>)
    e02e:	4285      	cmp	r5, r0
    e030:	d00e      	beq.n	e050 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    e032:	79a4      	ldrb	r4, [r4, #6]
    e034:	4620      	mov	r0, r4
    e036:	f006 faa5 	bl	14584 <net_buf_pool_get>
    e03a:	4623      	mov	r3, r4
    e03c:	e9cd 0500 	strd	r0, r5, [sp]
    e040:	4632      	mov	r2, r6
    e042:	2157      	movs	r1, #87	; 0x57
    e044:	4825      	ldr	r0, [pc, #148]	; (e0dc <hci_cmd_done+0xc0>)
    e046:	f00b fc90 	bl	1996a <printk>
}
    e04a:	b002      	add	sp, #8
    e04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    e050:	4620      	mov	r0, r4
    e052:	f006 fa9f 	bl	14594 <net_buf_id>
    e056:	f04f 080c 	mov.w	r8, #12
    e05a:	4d21      	ldr	r5, [pc, #132]	; (e0e0 <hci_cmd_done+0xc4>)
    e05c:	fb08 5000 	mla	r0, r8, r0, r5
    e060:	8843      	ldrh	r3, [r0, #2]
    e062:	42b3      	cmp	r3, r6
    e064:	d00a      	beq.n	e07c <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    e066:	4620      	mov	r0, r4
    e068:	f006 fa94 	bl	14594 <net_buf_id>
    e06c:	fb08 5000 	mla	r0, r8, r0, r5
    e070:	4632      	mov	r2, r6
    e072:	8843      	ldrh	r3, [r0, #2]
    e074:	2157      	movs	r1, #87	; 0x57
    e076:	481b      	ldr	r0, [pc, #108]	; (e0e4 <hci_cmd_done+0xc8>)
    e078:	f00b fc77 	bl	1996a <printk>
	if (cmd(buf)->state && !status) {
    e07c:	4620      	mov	r0, r4
    e07e:	f006 fa89 	bl	14594 <net_buf_id>
    e082:	260c      	movs	r6, #12
    e084:	fb06 5000 	mla	r0, r6, r0, r5
    e088:	6843      	ldr	r3, [r0, #4]
    e08a:	b15b      	cbz	r3, e0a4 <hci_cmd_done+0x88>
    e08c:	b957      	cbnz	r7, e0a4 <hci_cmd_done+0x88>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    e08e:	4620      	mov	r0, r4
    e090:	f006 fa80 	bl	14594 <net_buf_id>
    e094:	fb06 5000 	mla	r0, r6, r0, r5
    e098:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    e09a:	7a1a      	ldrb	r2, [r3, #8]
    e09c:	e9d3 0100 	ldrd	r0, r1, [r3]
    e0a0:	f00c ffaf 	bl	1b002 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    e0a4:	4620      	mov	r0, r4
    e0a6:	f006 fa75 	bl	14594 <net_buf_id>
    e0aa:	260c      	movs	r6, #12
    e0ac:	fb06 5000 	mla	r0, r6, r0, r5
    e0b0:	6883      	ldr	r3, [r0, #8]
    e0b2:	2b00      	cmp	r3, #0
    e0b4:	d0c9      	beq.n	e04a <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    e0b6:	4620      	mov	r0, r4
    e0b8:	f006 fa6c 	bl	14594 <net_buf_id>
    e0bc:	4370      	muls	r0, r6
    e0be:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    e0c0:	4620      	mov	r0, r4
    e0c2:	f006 fa67 	bl	14594 <net_buf_id>
    e0c6:	fb06 5500 	mla	r5, r6, r0, r5
    e0ca:	68a8      	ldr	r0, [r5, #8]
}
    e0cc:	b002      	add	sp, #8
    e0ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    e0d2:	f00a ba75 	b.w	185c0 <z_impl_k_sem_give>
    e0d6:	bf00      	nop
    e0d8:	20008760 	.word	0x20008760
    e0dc:	0001fdf0 	.word	0x0001fdf0
    e0e0:	2000a940 	.word	0x2000a940
    e0e4:	0001fe2a 	.word	0x0001fe2a

0000e0e8 <hci_cmd_status>:
{
    e0e8:	b538      	push	{r3, r4, r5, lr}
    e0ea:	2104      	movs	r1, #4
    e0ec:	4604      	mov	r4, r0
    e0ee:	3008      	adds	r0, #8
    e0f0:	f006 fcc0 	bl	14a74 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    e0f4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    e0f6:	7801      	ldrb	r1, [r0, #0]
    e0f8:	4622      	mov	r2, r4
    e0fa:	8840      	ldrh	r0, [r0, #2]
    e0fc:	f7ff ff8e 	bl	e01c <hci_cmd_done>
	if (ncmd) {
    e100:	b125      	cbz	r5, e10c <hci_cmd_status+0x24>
}
    e102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e106:	4802      	ldr	r0, [pc, #8]	; (e110 <hci_cmd_status+0x28>)
    e108:	f00a ba5a 	b.w	185c0 <z_impl_k_sem_give>
    e10c:	bd38      	pop	{r3, r4, r5, pc}
    e10e:	bf00      	nop
    e110:	200080e0 	.word	0x200080e0

0000e114 <hci_cmd_complete>:
{
    e114:	b538      	push	{r3, r4, r5, lr}
    e116:	2103      	movs	r1, #3
    e118:	4604      	mov	r4, r0
    e11a:	3008      	adds	r0, #8
    e11c:	f006 fcaa 	bl	14a74 <net_buf_simple_pull_mem>
	status = buf->data[0];
    e120:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    e122:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    e124:	4622      	mov	r2, r4
    e126:	7819      	ldrb	r1, [r3, #0]
    e128:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    e12c:	f7ff ff76 	bl	e01c <hci_cmd_done>
	if (ncmd) {
    e130:	b125      	cbz	r5, e13c <hci_cmd_complete+0x28>
}
    e132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e136:	4802      	ldr	r0, [pc, #8]	; (e140 <hci_cmd_complete+0x2c>)
    e138:	f00a ba42 	b.w	185c0 <z_impl_k_sem_give>
    e13c:	bd38      	pop	{r3, r4, r5, pc}
    e13e:	bf00      	nop
    e140:	200080e0 	.word	0x200080e0

0000e144 <hci_num_completed_packets>:
{
    e144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    e148:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    e14a:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    e14c:	6887      	ldr	r7, [r0, #8]
    e14e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; e22c <hci_num_completed_packets+0xe8>
	for (i = 0; i < evt->num_handles; i++) {
    e152:	783b      	ldrb	r3, [r7, #0]
    e154:	429d      	cmp	r5, r3
    e156:	db01      	blt.n	e15c <hci_num_completed_packets+0x18>
}
    e158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    e15c:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    e160:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    e164:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    e168:	4650      	mov	r0, sl
    e16a:	f002 fb31 	bl	107d0 <bt_conn_lookup_handle>
		if (!conn) {
    e16e:	4604      	mov	r4, r0
    e170:	b1d0      	cbz	r0, e1a8 <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    e172:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    e176:	b37e      	cbz	r6, e1d8 <hci_num_completed_packets+0x94>
	__asm__ volatile(
    e178:	f04f 0320 	mov.w	r3, #32
    e17c:	f3ef 8211 	mrs	r2, BASEPRI
    e180:	f383 8811 	msr	BASEPRI, r3
    e184:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    e188:	69e3      	ldr	r3, [r4, #28]
    e18a:	b1a3      	cbz	r3, e1b6 <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    e18c:	3b01      	subs	r3, #1
    e18e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    e190:	f382 8811 	msr	BASEPRI, r2
    e194:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    e198:	4620      	mov	r0, r4
    e19a:	f002 f933 	bl	10404 <bt_conn_get_pkts>
    e19e:	3e01      	subs	r6, #1
    e1a0:	f00a fa0e 	bl	185c0 <z_impl_k_sem_give>
    e1a4:	b2b6      	uxth	r6, r6
    e1a6:	e7e6      	b.n	e176 <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    e1a8:	4652      	mov	r2, sl
    e1aa:	2145      	movs	r1, #69	; 0x45
    e1ac:	4820      	ldr	r0, [pc, #128]	; (e230 <hci_num_completed_packets+0xec>)
    e1ae:	f00b fbdc 	bl	1996a <printk>
	for (i = 0; i < evt->num_handles; i++) {
    e1b2:	3501      	adds	r5, #1
    e1b4:	e7cd      	b.n	e152 <hci_num_completed_packets+0xe>
	return list->head;
    e1b6:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    e1b8:	b12b      	cbz	r3, e1c6 <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e1ba:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    e1bc:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e1be:	428b      	cmp	r3, r1
	list->head = node;
    e1c0:	6160      	str	r0, [r4, #20]
	list->tail = node;
    e1c2:	bf08      	it	eq
    e1c4:	61a0      	streq	r0, [r4, #24]
    e1c6:	f382 8811 	msr	BASEPRI, r2
    e1ca:	f3bf 8f6f 	isb	sy
			if (!node) {
    e1ce:	b93b      	cbnz	r3, e1e0 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    e1d0:	2145      	movs	r1, #69	; 0x45
    e1d2:	4818      	ldr	r0, [pc, #96]	; (e234 <hci_num_completed_packets+0xf0>)
    e1d4:	f00b fbc9 	bl	1996a <printk>
		bt_conn_unref(conn);
    e1d8:	4620      	mov	r0, r4
    e1da:	f002 fad5 	bl	10788 <bt_conn_unref>
    e1de:	e7e8      	b.n	e1b2 <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    e1e0:	f04f 0220 	mov.w	r2, #32
    e1e4:	f3ef 8111 	mrs	r1, BASEPRI
    e1e8:	f382 8811 	msr	BASEPRI, r2
    e1ec:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    e1f0:	68da      	ldr	r2, [r3, #12]
    e1f2:	61e2      	str	r2, [r4, #28]
	return list->tail;
    e1f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    e1f6:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    e1fa:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    e1fe:	b98a      	cbnz	r2, e224 <hci_num_completed_packets+0xe0>
	list->head = node;
    e200:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    e204:	f381 8811 	msr	BASEPRI, r1
    e208:	f3bf 8f6f 	isb	sy
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    e20c:	2101      	movs	r1, #1
    e20e:	f104 0030 	add.w	r0, r4, #48	; 0x30
    e212:	f00c fedd 	bl	1afd0 <atomic_or>
    e216:	07c3      	lsls	r3, r0, #31
    e218:	d4be      	bmi.n	e198 <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    e21a:	4651      	mov	r1, sl
    e21c:	4648      	mov	r0, r9
    e21e:	f00e ff21 	bl	1d064 <k_queue_append>
    e222:	e7b9      	b.n	e198 <hci_num_completed_packets+0x54>
	parent->next = child;
    e224:	6013      	str	r3, [r2, #0]
	list->tail = node;
    e226:	6263      	str	r3, [r4, #36]	; 0x24
}
    e228:	e7ec      	b.n	e204 <hci_num_completed_packets+0xc0>
    e22a:	bf00      	nop
    e22c:	2000a3b0 	.word	0x2000a3b0
    e230:	0001fe62 	.word	0x0001fe62
    e234:	0001fe83 	.word	0x0001fe83

0000e238 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    e238:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adv_id_check_data check_data = {
    e23a:	7803      	ldrb	r3, [r0, #0]
{
    e23c:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    e23e:	f88d 3004 	strb.w	r3, [sp, #4]
    e242:	2300      	movs	r3, #0
	func(&bt_dev.adv, data);
    e244:	4c24      	ldr	r4, [pc, #144]	; (e2d8 <le_adv_start_add_conn+0xa0>)
{
    e246:	4605      	mov	r5, r0
    e248:	460f      	mov	r7, r1
	func(&bt_dev.adv, data);
    e24a:	f104 0018 	add.w	r0, r4, #24
    e24e:	a901      	add	r1, sp, #4
	struct adv_id_check_data check_data = {
    e250:	f88d 3005 	strb.w	r3, [sp, #5]
	func(&bt_dev.adv, data);
    e254:	f00c fee6 	bl	1b024 <adv_id_check_connectable_func>
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
    e258:	f89d 3005 	ldrb.w	r3, [sp, #5]
    e25c:	bb93      	cbnz	r3, e2c4 <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    e25e:	462e      	mov	r6, r5
    e260:	f816 2b09 	ldrb.w	r2, [r6], #9

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    e264:	a902      	add	r1, sp, #8
    e266:	4630      	mov	r0, r6
	bt_dev.adv_conn_id = adv->id;
    e268:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    e26c:	9302      	str	r3, [sp, #8]
    e26e:	f8cd 300b 	str.w	r3, [sp, #11]
    e272:	f00c feb8 	bl	1afe6 <bt_addr_le_cmp>
    e276:	782a      	ldrb	r2, [r5, #0]
    e278:	4604      	mov	r4, r0
    e27a:	b9a8      	cbnz	r0, e2a8 <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    e27c:	4b17      	ldr	r3, [pc, #92]	; (e2dc <le_adv_start_add_conn+0xa4>)
    e27e:	6818      	ldr	r0, [r3, #0]
    e280:	8899      	ldrh	r1, [r3, #4]
    e282:	799b      	ldrb	r3, [r3, #6]
    e284:	9004      	str	r0, [sp, #16]
    e286:	f8ad 1014 	strh.w	r1, [sp, #20]
    e28a:	4610      	mov	r0, r2
    e28c:	a904      	add	r1, sp, #16
    e28e:	f88d 3016 	strb.w	r3, [sp, #22]
    e292:	f002 fa4d 	bl	10730 <bt_conn_add_le>
		if (!conn) {
    e296:	4605      	mov	r5, r0
    e298:	b1d0      	cbz	r0, e2d0 <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    e29a:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    e29c:	f002 faa0 	bl	107e0 <bt_conn_set_state>
	*out_conn = conn;
    e2a0:	603d      	str	r5, [r7, #0]
	return 0;
}
    e2a2:	4620      	mov	r0, r4
    e2a4:	b007      	add	sp, #28
    e2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    e2a8:	4631      	mov	r1, r6
    e2aa:	4610      	mov	r0, r2
    e2ac:	f002 fbb2 	bl	10a14 <bt_conn_exists_le>
    e2b0:	4604      	mov	r4, r0
    e2b2:	b950      	cbnz	r0, e2ca <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    e2b4:	7828      	ldrb	r0, [r5, #0]
    e2b6:	4631      	mov	r1, r6
    e2b8:	f002 fa3a 	bl	10730 <bt_conn_add_le>
	if (!conn) {
    e2bc:	4605      	mov	r5, r0
    e2be:	b138      	cbz	r0, e2d0 <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    e2c0:	2105      	movs	r1, #5
    e2c2:	e7eb      	b.n	e29c <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    e2c4:	f06f 0422 	mvn.w	r4, #34	; 0x22
    e2c8:	e7eb      	b.n	e2a2 <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    e2ca:	f06f 0415 	mvn.w	r4, #21
    e2ce:	e7e8      	b.n	e2a2 <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    e2d0:	f06f 040b 	mvn.w	r4, #11
    e2d4:	e7e5      	b.n	e2a2 <le_adv_start_add_conn+0x6a>
    e2d6:	bf00      	nop
    e2d8:	20008000 	.word	0x20008000
    e2dc:	0001d850 	.word	0x0001d850

0000e2e0 <bt_hci_cmd_create>:
{
    e2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    e2e4:	f04f 32ff 	mov.w	r2, #4294967295
    e2e8:	4606      	mov	r6, r0
    e2ea:	f04f 33ff 	mov.w	r3, #4294967295
    e2ee:	481d      	ldr	r0, [pc, #116]	; (e364 <bt_hci_cmd_create+0x84>)
    e2f0:	460f      	mov	r7, r1
    e2f2:	f00e f84e 	bl	1c392 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    e2f6:	4604      	mov	r4, r0
    e2f8:	b950      	cbnz	r0, e310 <bt_hci_cmd_create+0x30>
    e2fa:	491b      	ldr	r1, [pc, #108]	; (e368 <bt_hci_cmd_create+0x88>)
    e2fc:	481b      	ldr	r0, [pc, #108]	; (e36c <bt_hci_cmd_create+0x8c>)
    e2fe:	f44f 7281 	mov.w	r2, #258	; 0x102
    e302:	f00b fb32 	bl	1996a <printk>
    e306:	f44f 7181 	mov.w	r1, #258	; 0x102
    e30a:	4817      	ldr	r0, [pc, #92]	; (e368 <bt_hci_cmd_create+0x88>)
    e30c:	f00b fdd3 	bl	19eb6 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e310:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    e314:	f104 0a08 	add.w	sl, r4, #8
    e318:	2101      	movs	r1, #1
    e31a:	4650      	mov	r0, sl
    e31c:	f006 fa60 	bl	147e0 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    e320:	4620      	mov	r0, r4
    e322:	f884 8014 	strb.w	r8, [r4, #20]
    e326:	f006 f935 	bl	14594 <net_buf_id>
    e32a:	f04f 090c 	mov.w	r9, #12
    e32e:	4d10      	ldr	r5, [pc, #64]	; (e370 <bt_hci_cmd_create+0x90>)
    e330:	fb09 5000 	mla	r0, r9, r0, r5
    e334:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    e336:	4620      	mov	r0, r4
    e338:	f006 f92c 	bl	14594 <net_buf_id>
    e33c:	fb09 5000 	mla	r0, r9, r0, r5
    e340:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    e344:	4620      	mov	r0, r4
    e346:	f006 f925 	bl	14594 <net_buf_id>
    e34a:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    e34e:	2103      	movs	r1, #3
    e350:	4650      	mov	r0, sl
    e352:	f8c5 8004 	str.w	r8, [r5, #4]
    e356:	f006 fbab 	bl	14ab0 <net_buf_simple_add>
	hdr->param_len = param_len;
    e35a:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    e35c:	8006      	strh	r6, [r0, #0]
}
    e35e:	4620      	mov	r0, r4
    e360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e364:	20008760 	.word	0x20008760
    e368:	0001fd53 	.word	0x0001fd53
    e36c:	0001ea60 	.word	0x0001ea60
    e370:	2000a940 	.word	0x2000a940

0000e374 <bt_hci_cmd_send_sync>:
{
    e374:	b5f0      	push	{r4, r5, r6, r7, lr}
    e376:	4607      	mov	r7, r0
    e378:	4615      	mov	r5, r2
	if (!buf) {
    e37a:	460c      	mov	r4, r1
{
    e37c:	b087      	sub	sp, #28
	if (!buf) {
    e37e:	b921      	cbnz	r1, e38a <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    e380:	f7ff ffae 	bl	e2e0 <bt_hci_cmd_create>
		if (!buf) {
    e384:	4604      	mov	r4, r0
    e386:	2800      	cmp	r0, #0
    e388:	d048      	beq.n	e41c <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e38a:	2201      	movs	r2, #1
    e38c:	2100      	movs	r1, #0
    e38e:	4668      	mov	r0, sp
    e390:	f00e fec0 	bl	1d114 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    e394:	4620      	mov	r0, r4
    e396:	f006 f8fd 	bl	14594 <net_buf_id>
    e39a:	230c      	movs	r3, #12
    e39c:	4e21      	ldr	r6, [pc, #132]	; (e424 <bt_hci_cmd_send_sync+0xb0>)
    e39e:	fb03 6000 	mla	r0, r3, r0, r6
    e3a2:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    e3a6:	4620      	mov	r0, r4
    e3a8:	f006 fab0 	bl	1490c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    e3ac:	4621      	mov	r1, r4
    e3ae:	481e      	ldr	r0, [pc, #120]	; (e428 <bt_hci_cmd_send_sync+0xb4>)
    e3b0:	f006 fa3a 	bl	14828 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    e3b4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    e3b8:	2300      	movs	r3, #0
    e3ba:	4668      	mov	r0, sp
    e3bc:	f00a f93c 	bl	18638 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    e3c0:	b158      	cbz	r0, e3da <bt_hci_cmd_send_sync+0x66>
    e3c2:	f240 124d 	movw	r2, #333	; 0x14d
    e3c6:	4919      	ldr	r1, [pc, #100]	; (e42c <bt_hci_cmd_send_sync+0xb8>)
    e3c8:	4819      	ldr	r0, [pc, #100]	; (e430 <bt_hci_cmd_send_sync+0xbc>)
    e3ca:	f00b face 	bl	1996a <printk>
    e3ce:	4040      	eors	r0, r0
    e3d0:	f380 8811 	msr	BASEPRI, r0
    e3d4:	f04f 0003 	mov.w	r0, #3
    e3d8:	df02      	svc	2
	status = cmd(buf)->status;
    e3da:	4620      	mov	r0, r4
    e3dc:	f006 f8da 	bl	14594 <net_buf_id>
    e3e0:	230c      	movs	r3, #12
    e3e2:	4358      	muls	r0, r3
    e3e4:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    e3e6:	b186      	cbz	r6, e40a <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    e3e8:	4633      	mov	r3, r6
    e3ea:	463a      	mov	r2, r7
    e3ec:	2157      	movs	r1, #87	; 0x57
    e3ee:	4811      	ldr	r0, [pc, #68]	; (e434 <bt_hci_cmd_send_sync+0xc0>)
    e3f0:	f00b fabb 	bl	1996a <printk>
		net_buf_unref(buf);
    e3f4:	4620      	mov	r0, r4
    e3f6:	f006 fa45 	bl	14884 <net_buf_unref>
			return -EIO;
    e3fa:	2e09      	cmp	r6, #9
    e3fc:	bf0c      	ite	eq
    e3fe:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    e402:	f06f 0004 	mvnne.w	r0, #4
}
    e406:	b007      	add	sp, #28
    e408:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    e40a:	b115      	cbz	r5, e412 <bt_hci_cmd_send_sync+0x9e>
	return 0;
    e40c:	4630      	mov	r0, r6
		*rsp = buf;
    e40e:	602c      	str	r4, [r5, #0]
    e410:	e7f9      	b.n	e406 <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    e412:	4620      	mov	r0, r4
    e414:	f006 fa36 	bl	14884 <net_buf_unref>
	return 0;
    e418:	4628      	mov	r0, r5
    e41a:	e7f4      	b.n	e406 <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    e41c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e420:	e7f1      	b.n	e406 <bt_hci_cmd_send_sync+0x92>
    e422:	bf00      	nop
    e424:	2000a940 	.word	0x2000a940
    e428:	20008118 	.word	0x20008118
    e42c:	0001fd53 	.word	0x0001fd53
    e430:	0001ea60 	.word	0x0001ea60
    e434:	0001fe9f 	.word	0x0001fe9f

0000e438 <hci_le_read_max_data_len>:
{
    e438:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e43a:	4606      	mov	r6, r0
    e43c:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    e43e:	f242 002f 	movw	r0, #8239	; 0x202f
    e442:	2100      	movs	r1, #0
    e444:	aa01      	add	r2, sp, #4
    e446:	f7ff ff95 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    e44a:	4604      	mov	r4, r0
    e44c:	b130      	cbz	r0, e45c <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    e44e:	2145      	movs	r1, #69	; 0x45
    e450:	4808      	ldr	r0, [pc, #32]	; (e474 <hci_le_read_max_data_len+0x3c>)
    e452:	f00b fa8a 	bl	1996a <printk>
}
    e456:	4620      	mov	r0, r4
    e458:	b002      	add	sp, #8
    e45a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    e45c:	9801      	ldr	r0, [sp, #4]
    e45e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    e460:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    e464:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    e466:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    e46a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    e46c:	f006 fa0a 	bl	14884 <net_buf_unref>
	return 0;
    e470:	e7f1      	b.n	e456 <hci_le_read_max_data_len+0x1e>
    e472:	bf00      	nop
    e474:	0001fec0 	.word	0x0001fec0

0000e478 <set_random_address>:
{
    e478:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    e47a:	4e15      	ldr	r6, [pc, #84]	; (e4d0 <set_random_address+0x58>)
    e47c:	2206      	movs	r2, #6
    e47e:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    e482:	4605      	mov	r5, r0
    e484:	f00c fca0 	bl	1adc8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    e488:	4604      	mov	r4, r0
    e48a:	b1e0      	cbz	r0, e4c6 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    e48c:	2106      	movs	r1, #6
    e48e:	f242 0005 	movw	r0, #8197	; 0x2005
    e492:	f7ff ff25 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
    e496:	4604      	mov	r4, r0
    e498:	b1b8      	cbz	r0, e4ca <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e49a:	2206      	movs	r2, #6
    e49c:	4629      	mov	r1, r5
    e49e:	3008      	adds	r0, #8
    e4a0:	f00d ffa5 	bl	1c3ee <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    e4a4:	4621      	mov	r1, r4
    e4a6:	2200      	movs	r2, #0
    e4a8:	f242 0005 	movw	r0, #8197	; 0x2005
    e4ac:	f7ff ff62 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    e4b0:	4604      	mov	r4, r0
    e4b2:	b940      	cbnz	r0, e4c6 <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    e4b4:	2206      	movs	r2, #6
    e4b6:	4629      	mov	r1, r5
    e4b8:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    e4bc:	f00c fc95 	bl	1adea <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    e4c0:	2301      	movs	r3, #1
    e4c2:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    e4c6:	4620      	mov	r0, r4
    e4c8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    e4ca:	f06f 0436 	mvn.w	r4, #54	; 0x36
    e4ce:	e7fa      	b.n	e4c6 <set_random_address+0x4e>
    e4d0:	20008000 	.word	0x20008000

0000e4d4 <set_le_scan_enable_legacy>:
{
    e4d4:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    e4d6:	2102      	movs	r1, #2
{
    e4d8:	4604      	mov	r4, r0
    e4da:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    e4dc:	f242 000c 	movw	r0, #8204	; 0x200c
    e4e0:	f7ff fefe 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
    e4e4:	4605      	mov	r5, r0
    e4e6:	b348      	cbz	r0, e53c <set_le_scan_enable_legacy+0x68>
	return net_buf_simple_add(&buf->b, len);
    e4e8:	2102      	movs	r1, #2
    e4ea:	3008      	adds	r0, #8
    e4ec:	f006 fae0 	bl	14ab0 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    e4f0:	2c01      	cmp	r4, #1
    e4f2:	4603      	mov	r3, r0
    e4f4:	d11f      	bne.n	e536 <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e4f6:	4813      	ldr	r0, [pc, #76]	; (e544 <set_le_scan_enable_legacy+0x70>)
    e4f8:	f00c fd64 	bl	1afc4 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e4fc:	f3c0 2000 	ubfx	r0, r0, #8, #1
    e500:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    e502:	701c      	strb	r4, [r3, #0]
/* Initialize command state instance */
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
    e504:	4b0f      	ldr	r3, [pc, #60]	; (e544 <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    e506:	4628      	mov	r0, r5
    e508:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    e50a:	2305      	movs	r3, #5
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    e50c:	f004 0401 	and.w	r4, r4, #1
    e510:	9302      	str	r3, [sp, #8]
    e512:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    e516:	f006 f83d 	bl	14594 <net_buf_id>
    e51a:	220c      	movs	r2, #12
    e51c:	4b0a      	ldr	r3, [pc, #40]	; (e548 <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    e51e:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    e520:	fb02 3300 	mla	r3, r2, r0, r3
    e524:	aa01      	add	r2, sp, #4
    e526:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    e528:	f242 000c 	movw	r0, #8204	; 0x200c
    e52c:	2200      	movs	r2, #0
    e52e:	f7ff ff21 	bl	e374 <bt_hci_cmd_send_sync>
}
    e532:	b005      	add	sp, #20
    e534:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    e536:	2200      	movs	r2, #0
    e538:	7042      	strb	r2, [r0, #1]
    e53a:	e7e2      	b.n	e502 <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    e53c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e540:	e7f7      	b.n	e532 <set_le_scan_enable_legacy+0x5e>
    e542:	bf00      	nop
    e544:	20008094 	.word	0x20008094
    e548:	2000a940 	.word	0x2000a940

0000e54c <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    e54c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    e550:	4605      	mov	r5, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e552:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    e556:	460e      	mov	r6, r1
    e558:	4691      	mov	r9, r2
    e55a:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e55c:	d02c      	beq.n	e5b8 <le_adv_set_random_addr.isra.0+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    e55e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; e640 <le_adv_set_random_addr.isra.0+0xf4>
    e562:	b12a      	cbz	r2, e570 <le_adv_set_random_addr.isra.0+0x24>
    e564:	068c      	lsls	r4, r1, #26
    e566:	d503      	bpl.n	e570 <le_adv_set_random_addr.isra.0+0x24>
    e568:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    e56c:	0658      	lsls	r0, r3, #25
    e56e:	d563      	bpl.n	e638 <le_adv_set_random_addr.isra.0+0xec>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e570:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    e574:	f818 3003 	ldrb.w	r3, [r8, r3]
    e578:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    e57c:	2b01      	cmp	r3, #1
    e57e:	d009      	beq.n	e594 <le_adv_set_random_addr.isra.0+0x48>
			*own_addr_type = id_addr->type;
    e580:	ebaa 0505 	sub.w	r5, sl, r5
    e584:	f818 3005 	ldrb.w	r3, [r8, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e588:	f1b9 0f00 	cmp.w	r9, #0
    e58c:	d10f      	bne.n	e5ae <le_adv_set_random_addr.isra.0+0x62>
	return 0;
    e58e:	2400      	movs	r4, #0
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    e590:	703b      	strb	r3, [r7, #0]
    e592:	e008      	b.n	e5a6 <le_adv_set_random_addr.isra.0+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    e594:	2007      	movs	r0, #7
    e596:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    e59a:	4440      	add	r0, r8
    e59c:	f7ff ff6c 	bl	e478 <set_random_address>
				if (err) {
    e5a0:	4604      	mov	r4, r0
    e5a2:	2800      	cmp	r0, #0
    e5a4:	d0ec      	beq.n	e580 <le_adv_set_random_addr.isra.0+0x34>
}
    e5a6:	4620      	mov	r0, r4
    e5a8:	b002      	add	sp, #8
    e5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e5ae:	06b1      	lsls	r1, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    e5b0:	bf48      	it	mi
    e5b2:	f043 0302 	orrmi.w	r3, r3, #2
    e5b6:	e7ea      	b.n	e58e <le_adv_set_random_addr.isra.0+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    e5b8:	f011 0604 	ands.w	r6, r1, #4
    e5bc:	d014      	beq.n	e5e8 <le_adv_set_random_addr.isra.0+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e5be:	f8df 8080 	ldr.w	r8, [pc, #128]	; e640 <le_adv_set_random_addr.isra.0+0xf4>
    e5c2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    e5c6:	f818 3003 	ldrb.w	r3, [r8, r3]
    e5ca:	00ee      	lsls	r6, r5, #3
    e5cc:	2b01      	cmp	r3, #1
    e5ce:	d105      	bne.n	e5dc <le_adv_set_random_addr.isra.0+0x90>
				err = set_adv_random_address(adv, &id_addr->a);
    e5d0:	2007      	movs	r0, #7
    e5d2:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    e5d6:	4440      	add	r0, r8
    e5d8:	f7ff ff4e 	bl	e478 <set_random_address>
			*own_addr_type = id_addr->type;
    e5dc:	1b75      	subs	r5, r6, r5
    e5de:	f818 3005 	ldrb.w	r3, [r8, r5]
	int err = 0;
    e5e2:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    e5e4:	703b      	strb	r3, [r7, #0]
    e5e6:	e7de      	b.n	e5a6 <le_adv_set_random_addr.isra.0+0x5a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e5e8:	4816      	ldr	r0, [pc, #88]	; (e644 <le_adv_set_random_addr.isra.0+0xf8>)
    e5ea:	f00c fceb 	bl	1afc4 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    e5ee:	0682      	lsls	r2, r0, #26
    e5f0:	d417      	bmi.n	e622 <le_adv_set_random_addr.isra.0+0xd6>
			bool scan_enabled = false;
    e5f2:	2500      	movs	r5, #0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    e5f4:	2106      	movs	r1, #6
    e5f6:	4668      	mov	r0, sp
    e5f8:	f001 fe2a 	bl	10250 <bt_rand>
	if (err) {
    e5fc:	4604      	mov	r4, r0
    e5fe:	b948      	cbnz	r0, e614 <le_adv_set_random_addr.isra.0+0xc8>
	BT_ADDR_SET_NRPA(&nrpa);
    e600:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    e604:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    e606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e60a:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    e60e:	f7ff ff33 	bl	e478 <set_random_address>
    e612:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    e614:	2001      	movs	r0, #1
    e616:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    e618:	2d00      	cmp	r5, #0
    e61a:	d0c4      	beq.n	e5a6 <le_adv_set_random_addr.isra.0+0x5a>
	return set_le_scan_enable_legacy(enable);
    e61c:	f7ff ff5a 	bl	e4d4 <set_le_scan_enable_legacy>
		if (err) {
    e620:	e7c1      	b.n	e5a6 <le_adv_set_random_addr.isra.0+0x5a>
    e622:	4808      	ldr	r0, [pc, #32]	; (e644 <le_adv_set_random_addr.isra.0+0xf8>)
    e624:	f00c fcce 	bl	1afc4 <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    e628:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e62a:	f3c0 15c0 	ubfx	r5, r0, #7, #1
    e62e:	d5e0      	bpl.n	e5f2 <le_adv_set_random_addr.isra.0+0xa6>
	return set_le_scan_enable_legacy(enable);
    e630:	4630      	mov	r0, r6
    e632:	f7ff ff4f 	bl	e4d4 <set_le_scan_enable_legacy>
    e636:	e7dd      	b.n	e5f4 <le_adv_set_random_addr.isra.0+0xa8>
			return -ENOTSUP;
    e638:	f06f 0422 	mvn.w	r4, #34	; 0x22
    e63c:	e7b3      	b.n	e5a6 <le_adv_set_random_addr.isra.0+0x5a>
    e63e:	bf00      	nop
    e640:	20008000 	.word	0x20008000
    e644:	20008094 	.word	0x20008094

0000e648 <hci_set_ad>:
{
    e648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e64c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    e64e:	2120      	movs	r1, #32
{
    e650:	4682      	mov	sl, r0
    e652:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    e654:	f7ff fe44 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
    e658:	4606      	mov	r6, r0
    e65a:	2800      	cmp	r0, #0
    e65c:	d056      	beq.n	e70c <hci_set_ad+0xc4>
    e65e:	2120      	movs	r1, #32
    e660:	3008      	adds	r0, #8
    e662:	f006 fa25 	bl	14ab0 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    e666:	2220      	movs	r2, #32
    e668:	4681      	mov	r9, r0
    e66a:	2100      	movs	r1, #0
    e66c:	f00c fbe8 	bl	1ae40 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    e670:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	uint8_t set_data_len = 0;
    e674:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    e676:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    e67a:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    e67c:	2300      	movs	r3, #0
    e67e:	f8d4 8000 	ldr.w	r8, [r4]
    e682:	6862      	ldr	r2, [r4, #4]
    e684:	4293      	cmp	r3, r2
    e686:	d30d      	bcc.n	e6a4 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    e688:	9b00      	ldr	r3, [sp, #0]
    e68a:	3408      	adds	r4, #8
    e68c:	429c      	cmp	r4, r3
    e68e:	d1f5      	bne.n	e67c <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    e690:	2200      	movs	r2, #0
    e692:	4631      	mov	r1, r6
    e694:	4650      	mov	r0, sl
	*data_len = set_data_len;
    e696:	f889 5000 	strb.w	r5, [r9]
}
    e69a:	b003      	add	sp, #12
    e69c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    e6a0:	f7ff be68 	b.w	e374 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    e6a4:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    e6a8:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    e6aa:	1881      	adds	r1, r0, r2
    e6ac:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    e6ae:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    e6b2:	d914      	bls.n	e6de <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    e6b4:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    e6b8:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    e6bc:	d101      	bne.n	e6c2 <hci_set_ad+0x7a>
    e6be:	2a00      	cmp	r2, #0
    e6c0:	dc0b      	bgt.n	e6da <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
    e6c2:	2145      	movs	r1, #69	; 0x45
    e6c4:	4813      	ldr	r0, [pc, #76]	; (e714 <hci_set_ad+0xcc>)
    e6c6:	f00b f950 	bl	1996a <printk>
		net_buf_unref(buf);
    e6ca:	4630      	mov	r0, r6
    e6cc:	f006 f8da 	bl	14884 <net_buf_unref>
					return -EINVAL;
    e6d0:	f06f 0015 	mvn.w	r0, #21
}
    e6d4:	b003      	add	sp, #12
    e6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    e6da:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    e6de:	b2d7      	uxtb	r7, r2
    e6e0:	1c79      	adds	r1, r7, #1
    e6e2:	f80b 1005 	strb.w	r1, [fp, r5]
    e6e6:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    e6e8:	b2c9      	uxtb	r1, r1
    e6ea:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    e6ee:	f8d8 1004 	ldr.w	r1, [r8, #4]
    e6f2:	fa5b f080 	uxtab	r0, fp, r0
    e6f6:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    e6f8:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    e6fa:	f00c fb76 	bl	1adea <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    e6fe:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    e700:	443d      	add	r5, r7
    e702:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    e704:	3301      	adds	r3, #1
    e706:	f108 0808 	add.w	r8, r8, #8
    e70a:	e7ba      	b.n	e682 <hci_set_ad+0x3a>
		return -ENOBUFS;
    e70c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e710:	e7e0      	b.n	e6d4 <hci_set_ad+0x8c>
    e712:	bf00      	nop
    e714:	0001fee5 	.word	0x0001fee5

0000e718 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    e718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e71c:	b087      	sub	sp, #28
    e71e:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    e722:	4606      	mov	r6, r0
    e724:	460c      	mov	r4, r1
    e726:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    e728:	2100      	movs	r1, #0
    e72a:	2210      	movs	r2, #16
    e72c:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    e72e:	461d      	mov	r5, r3
    e730:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    e734:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
    e738:	f00c fb82 	bl	1ae40 <memset>
	if (use_name) {
    e73c:	f1b8 0f00 	cmp.w	r8, #0
    e740:	d00e      	beq.n	e760 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    e742:	bbb4      	cbnz	r4, e7b2 <le_adv_update.constprop.0+0x9a>
    e744:	2d00      	cmp	r5, #0
    e746:	d13f      	bne.n	e7c8 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    e748:	f8df b0b0 	ldr.w	fp, [pc, #176]	; e7fc <le_adv_update.constprop.0+0xe4>
    e74c:	4658      	mov	r0, fp
    e74e:	f00c fb0e 	bl	1ad6e <strlen>
    e752:	2309      	movs	r3, #9
    e754:	f88d 0001 	strb.w	r0, [sp, #1]
    e758:	f88d 3000 	strb.w	r3, [sp]
    e75c:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    e760:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    e764:	f1b8 0f00 	cmp.w	r8, #0
    e768:	d030      	beq.n	e7cc <le_adv_update.constprop.0+0xb4>
    e76a:	f1ba 0f00 	cmp.w	sl, #0
    e76e:	d12d      	bne.n	e7cc <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    e770:	2301      	movs	r3, #1
			d_len = 2;
    e772:	2202      	movs	r2, #2
			d[1].data = &data;
    e774:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    e778:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    e77a:	f242 0008 	movw	r0, #8200	; 0x2008
    e77e:	a902      	add	r1, sp, #8
    e780:	f7ff ff62 	bl	e648 <hci_set_ad>
		if (err) {
    e784:	4604      	mov	r4, r0
    e786:	b938      	cbnz	r0, e798 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    e788:	f1ba 0f00 	cmp.w	sl, #0
    e78c:	d120      	bne.n	e7d0 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e78e:	2104      	movs	r1, #4
    e790:	f106 0010 	add.w	r0, r6, #16
    e794:	f00c fc1c 	bl	1afd0 <atomic_or>
}
    e798:	4620      	mov	r0, r4
    e79a:	b007      	add	sp, #28
    e79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    e7a0:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    e7a4:	3a08      	subs	r2, #8
    e7a6:	2a01      	cmp	r2, #1
    e7a8:	d925      	bls.n	e7f6 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    e7aa:	3301      	adds	r3, #1
    e7ac:	429f      	cmp	r7, r3
    e7ae:	d1f7      	bne.n	e7a0 <le_adv_update.constprop.0+0x88>
    e7b0:	e7c8      	b.n	e744 <le_adv_update.constprop.0+0x2c>
    e7b2:	2300      	movs	r3, #0
    e7b4:	e7fa      	b.n	e7ac <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    e7b6:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    e7ba:	3a08      	subs	r2, #8
    e7bc:	2a01      	cmp	r2, #1
    e7be:	d91a      	bls.n	e7f6 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    e7c0:	3301      	adds	r3, #1
    e7c2:	4599      	cmp	r9, r3
    e7c4:	d1f7      	bne.n	e7b6 <le_adv_update.constprop.0+0x9e>
    e7c6:	e7bf      	b.n	e748 <le_adv_update.constprop.0+0x30>
    e7c8:	2300      	movs	r3, #0
    e7ca:	e7fa      	b.n	e7c2 <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    e7cc:	2201      	movs	r2, #1
    e7ce:	e7d4      	b.n	e77a <le_adv_update.constprop.0+0x62>
		d[0].data = sd;
    e7d0:	2201      	movs	r2, #1
		d[0].len = sd_len;
    e7d2:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    e7d6:	f1b8 0f00 	cmp.w	r8, #0
    e7da:	d003      	beq.n	e7e4 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    e7dc:	9205      	str	r2, [sp, #20]
			d_len = 2;
    e7de:	2202      	movs	r2, #2
			d[1].data = &data;
    e7e0:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    e7e4:	f242 0009 	movw	r0, #8201	; 0x2009
    e7e8:	a902      	add	r1, sp, #8
    e7ea:	f7ff ff2d 	bl	e648 <hci_set_ad>
		if (err) {
    e7ee:	2800      	cmp	r0, #0
    e7f0:	d0cd      	beq.n	e78e <le_adv_update.constprop.0+0x76>
    e7f2:	4604      	mov	r4, r0
    e7f4:	e7d0      	b.n	e798 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    e7f6:	f06f 0415 	mvn.w	r4, #21
    e7fa:	e7cd      	b.n	e798 <le_adv_update.constprop.0+0x80>
    e7fc:	0001e8af 	.word	0x0001e8af

0000e800 <set_le_adv_enable_legacy>:
{
    e800:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    e802:	4606      	mov	r6, r0
    e804:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    e806:	f242 000a 	movw	r0, #8202	; 0x200a
    e80a:	2101      	movs	r1, #1
    e80c:	f7ff fd68 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
    e810:	4604      	mov	r4, r0
    e812:	b1e8      	cbz	r0, e850 <set_le_adv_enable_legacy+0x50>
	return net_buf_simple_add_u8(&buf->b, val);
    e814:	3008      	adds	r0, #8
	if (enable) {
    e816:	b1cd      	cbz	r5, e84c <set_le_adv_enable_legacy+0x4c>
    e818:	2101      	movs	r1, #1
    e81a:	f00d fdf4 	bl	1c406 <net_buf_simple_add_u8>
    e81e:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    e820:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    e822:	3610      	adds	r6, #16
    e824:	9302      	str	r3, [sp, #8]
	state->target = target;
    e826:	9601      	str	r6, [sp, #4]
	state->val = val;
    e828:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    e82c:	f005 feb2 	bl	14594 <net_buf_id>
    e830:	220c      	movs	r2, #12
    e832:	4b09      	ldr	r3, [pc, #36]	; (e858 <set_le_adv_enable_legacy+0x58>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    e834:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    e836:	fb02 3300 	mla	r3, r2, r0, r3
    e83a:	aa01      	add	r2, sp, #4
    e83c:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    e83e:	f242 000a 	movw	r0, #8202	; 0x200a
    e842:	2200      	movs	r2, #0
    e844:	f7ff fd96 	bl	e374 <bt_hci_cmd_send_sync>
}
    e848:	b004      	add	sp, #16
    e84a:	bd70      	pop	{r4, r5, r6, pc}
    e84c:	4629      	mov	r1, r5
    e84e:	e7e4      	b.n	e81a <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    e850:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e854:	e7f8      	b.n	e848 <set_le_adv_enable_legacy+0x48>
    e856:	bf00      	nop
    e858:	2000a940 	.word	0x2000a940

0000e85c <start_le_scan_legacy>:
{
    e85c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e85e:	460e      	mov	r6, r1
    e860:	4605      	mov	r5, r0
    e862:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    e864:	2100      	movs	r1, #0
    e866:	2207      	movs	r2, #7
    e868:	4668      	mov	r0, sp
    e86a:	f00c fae9 	bl	1ae40 <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    e86e:	f8ad 6001 	strh.w	r6, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    e872:	4e26      	ldr	r6, [pc, #152]	; (e90c <start_le_scan_legacy+0xb0>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    e874:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    e876:	4630      	mov	r0, r6
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    e878:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    e87c:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    e880:	f88d 5000 	strb.w	r5, [sp]
	set_param.window = sys_cpu_to_le16(window);
    e884:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    e888:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e88c:	f00c fb9a 	bl	1afc4 <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    e890:	0641      	lsls	r1, r0, #25
    e892:	d413      	bmi.n	e8bc <start_le_scan_legacy+0x60>
			err = le_set_private_addr(BT_ID_DEFAULT);
    e894:	f00c fbdb 	bl	1b04e <le_set_private_addr.constprop.0>
			if (err) {
    e898:	4604      	mov	r4, r0
    e89a:	b160      	cbz	r0, e8b6 <start_le_scan_legacy+0x5a>
				if (active_scan || !is_adv_using_rand_addr()) {
    e89c:	2d01      	cmp	r5, #1
    e89e:	d02e      	beq.n	e8fe <start_le_scan_legacy+0xa2>
    e8a0:	f106 0028 	add.w	r0, r6, #40	; 0x28
    e8a4:	f00c fb8e 	bl	1afc4 <atomic_get>
    e8a8:	0642      	lsls	r2, r0, #25
    e8aa:	d528      	bpl.n	e8fe <start_le_scan_legacy+0xa2>
					BT_WARN("Ignoring failure to set "
    e8ac:	4622      	mov	r2, r4
    e8ae:	2157      	movs	r1, #87	; 0x57
    e8b0:	4817      	ldr	r0, [pc, #92]	; (e910 <start_le_scan_legacy+0xb4>)
    e8b2:	f00b f85a 	bl	1996a <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    e8b6:	2301      	movs	r3, #1
    e8b8:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    e8bc:	2107      	movs	r1, #7
    e8be:	f242 000b 	movw	r0, #8203	; 0x200b
    e8c2:	f7ff fd0d 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
    e8c6:	4604      	mov	r4, r0
    e8c8:	b1e0      	cbz	r0, e904 <start_le_scan_legacy+0xa8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e8ca:	2207      	movs	r2, #7
    e8cc:	4669      	mov	r1, sp
    e8ce:	3008      	adds	r0, #8
    e8d0:	f00d fd8d 	bl	1c3ee <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    e8d4:	4621      	mov	r1, r4
    e8d6:	2200      	movs	r2, #0
    e8d8:	f242 000b 	movw	r0, #8203	; 0x200b
    e8dc:	f7ff fd4a 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    e8e0:	4604      	mov	r4, r0
    e8e2:	b960      	cbnz	r0, e8fe <start_le_scan_legacy+0xa2>
	return set_le_scan_enable_legacy(enable);
    e8e4:	2001      	movs	r0, #1
    e8e6:	f7ff fdf5 	bl	e4d4 <set_le_scan_enable_legacy>
	if (err) {
    e8ea:	4604      	mov	r4, r0
    e8ec:	b938      	cbnz	r0, e8fe <start_le_scan_legacy+0xa2>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    e8ee:	1e6b      	subs	r3, r5, #1
    e8f0:	425a      	negs	r2, r3
    e8f2:	f04f 0107 	mov.w	r1, #7
    e8f6:	4807      	ldr	r0, [pc, #28]	; (e914 <start_le_scan_legacy+0xb8>)
    e8f8:	415a      	adcs	r2, r3
    e8fa:	f00c fb82 	bl	1b002 <atomic_set_bit_to>
}
    e8fe:	4620      	mov	r0, r4
    e900:	b002      	add	sp, #8
    e902:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    e904:	f06f 0436 	mvn.w	r4, #54	; 0x36
    e908:	e7f9      	b.n	e8fe <start_le_scan_legacy+0xa2>
    e90a:	bf00      	nop
    e90c:	20008000 	.word	0x20008000
    e910:	0001ff03 	.word	0x0001ff03
    e914:	20008094 	.word	0x20008094

0000e918 <bt_le_scan_random_addr_check>:
{
    e918:	b508      	push	{r3, lr}
    e91a:	4802      	ldr	r0, [pc, #8]	; (e924 <bt_le_scan_random_addr_check+0xc>)
    e91c:	f00c fb52 	bl	1afc4 <atomic_get>
}
    e920:	2001      	movs	r0, #1
    e922:	bd08      	pop	{r3, pc}
    e924:	20008028 	.word	0x20008028

0000e928 <bt_le_create_conn_legacy>:
{
    e928:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    e92c:	4f2b      	ldr	r7, [pc, #172]	; (e9dc <bt_le_create_conn_legacy+0xb4>)
{
    e92e:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    e930:	783b      	ldrb	r3, [r7, #0]
    e932:	2b01      	cmp	r3, #1
    e934:	d00b      	beq.n	e94e <bt_le_create_conn_legacy+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    e936:	2119      	movs	r1, #25
    e938:	f242 000d 	movw	r0, #8205	; 0x200d
		*own_addr_type = addr->type;
    e93c:	f897 8000 	ldrb.w	r8, [r7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    e940:	f7ff fcce 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
    e944:	4606      	mov	r6, r0
    e946:	b950      	cbnz	r0, e95e <bt_le_create_conn_legacy+0x36>
		return -ENOBUFS;
    e948:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e94c:	e004      	b.n	e958 <bt_le_create_conn_legacy+0x30>
			err = set_random_address(&addr->a);
    e94e:	1c78      	adds	r0, r7, #1
    e950:	f7ff fd92 	bl	e478 <set_random_address>
			if (err) {
    e954:	2800      	cmp	r0, #0
    e956:	d0ee      	beq.n	e936 <bt_le_create_conn_legacy+0xe>
}
    e958:	b004      	add	sp, #16
    e95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    e95e:	2119      	movs	r1, #25
    e960:	3008      	adds	r0, #8
    e962:	f006 f8a5 	bl	14ab0 <net_buf_simple_add>
    e966:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    e968:	2219      	movs	r2, #25
    e96a:	2100      	movs	r1, #0
    e96c:	f00c fa68 	bl	1ae40 <memset>
	cp->own_addr_type = own_addr_type;
    e970:	f884 800c 	strb.w	r8, [r4, #12]
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    e974:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    e978:	f105 0188 	add.w	r1, r5, #136	; 0x88
    e97c:	1d60      	adds	r0, r4, #5
    e97e:	f00c fb24 	bl	1afca <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    e982:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    e986:	89bb      	ldrh	r3, [r7, #12]
	cmd(buf)->state = &state;
    e988:	4630      	mov	r0, r6
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    e98a:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    e98c:	89fb      	ldrh	r3, [r7, #14]
    e98e:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    e990:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    e994:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    e998:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    e99c:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    e9a0:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    e9a4:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    e9a8:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
    e9ac:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    e9b0:	4b0b      	ldr	r3, [pc, #44]	; (e9e0 <bt_le_create_conn_legacy+0xb8>)
    e9b2:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    e9b4:	230b      	movs	r3, #11
    e9b6:	9302      	str	r3, [sp, #8]
	state->val = val;
    e9b8:	2301      	movs	r3, #1
    e9ba:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    e9be:	f005 fde9 	bl	14594 <net_buf_id>
    e9c2:	220c      	movs	r2, #12
    e9c4:	4b07      	ldr	r3, [pc, #28]	; (e9e4 <bt_le_create_conn_legacy+0xbc>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    e9c6:	4631      	mov	r1, r6
	cmd(buf)->state = &state;
    e9c8:	fb02 3300 	mla	r3, r2, r0, r3
    e9cc:	aa01      	add	r2, sp, #4
    e9ce:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    e9d0:	f242 000d 	movw	r0, #8205	; 0x200d
    e9d4:	4642      	mov	r2, r8
    e9d6:	f7ff fccd 	bl	e374 <bt_hci_cmd_send_sync>
    e9da:	e7bd      	b.n	e958 <bt_le_create_conn_legacy+0x30>
    e9dc:	20008000 	.word	0x20008000
    e9e0:	20008094 	.word	0x20008094
    e9e4:	2000a940 	.word	0x2000a940

0000e9e8 <bt_le_create_conn_cancel>:
{
    e9e8:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    e9ea:	2100      	movs	r1, #0
{
    e9ec:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    e9ee:	f242 000e 	movw	r0, #8206	; 0x200e
    e9f2:	f7ff fc75 	bl	e2e0 <bt_hci_cmd_create>
	state->target = target;
    e9f6:	4b0c      	ldr	r3, [pc, #48]	; (ea28 <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    e9f8:	2500      	movs	r5, #0
	state->target = target;
    e9fa:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    e9fc:	230b      	movs	r3, #11
    e9fe:	4604      	mov	r4, r0
    ea00:	9302      	str	r3, [sp, #8]
	state->val = val;
    ea02:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    ea06:	f005 fdc5 	bl	14594 <net_buf_id>
    ea0a:	220c      	movs	r2, #12
    ea0c:	4b07      	ldr	r3, [pc, #28]	; (ea2c <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    ea0e:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    ea10:	fb02 3300 	mla	r3, r2, r0, r3
    ea14:	aa01      	add	r2, sp, #4
    ea16:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    ea18:	f242 000e 	movw	r0, #8206	; 0x200e
    ea1c:	462a      	mov	r2, r5
    ea1e:	f7ff fca9 	bl	e374 <bt_hci_cmd_send_sync>
}
    ea22:	b005      	add	sp, #20
    ea24:	bd30      	pop	{r4, r5, pc}
    ea26:	bf00      	nop
    ea28:	20008094 	.word	0x20008094
    ea2c:	2000a940 	.word	0x2000a940

0000ea30 <bt_le_scan_update>:
{
    ea30:	b570      	push	{r4, r5, r6, lr}
    ea32:	4606      	mov	r6, r0
    ea34:	481c      	ldr	r0, [pc, #112]	; (eaa8 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>)
    ea36:	f00c fac5 	bl	1afc4 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    ea3a:	0641      	lsls	r1, r0, #25
    ea3c:	f3c0 1380 	ubfx	r3, r0, #6, #1
    ea40:	d501      	bpl.n	ea46 <bt_le_scan_update+0x16>
			return 0;
    ea42:	2000      	movs	r0, #0
    ea44:	e02b      	b.n	ea9e <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
    ea46:	4818      	ldr	r0, [pc, #96]	; (eaa8 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>)
    ea48:	f00c fabc 	bl	1afc4 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    ea4c:	0682      	lsls	r2, r0, #26
    ea4e:	d421      	bmi.n	ea94 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x34>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    ea50:	2100      	movs	r1, #0
    ea52:	2206      	movs	r2, #6
    ea54:	4608      	mov	r0, r1
    ea56:	f001 fff9 	bl	10a4c <bt_conn_lookup_state_le>
		if (conn) {
    ea5a:	4604      	mov	r4, r0
    ea5c:	bb00      	cbnz	r0, eaa0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x40>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    ea5e:	2202      	movs	r2, #2
    ea60:	4601      	mov	r1, r0
    ea62:	f001 fff3 	bl	10a4c <bt_conn_lookup_state_le>
		if (conn) {
    ea66:	4605      	mov	r5, r0
    ea68:	2800      	cmp	r0, #0
    ea6a:	d0ea      	beq.n	ea42 <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ea6c:	f44f 7180 	mov.w	r1, #256	; 0x100
    ea70:	480d      	ldr	r0, [pc, #52]	; (eaa8 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x48>)
    ea72:	f00c faad 	bl	1afd0 <atomic_or>
			bt_conn_unref(conn);
    ea76:	4628      	mov	r0, r5
    ea78:	f001 fe86 	bl	10788 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    ea7c:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    ea7e:	4620      	mov	r0, r4
}
    ea80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    ea84:	bf15      	itete	ne
    ea86:	2230      	movne	r2, #48	; 0x30
    ea88:	2212      	moveq	r2, #18
    ea8a:	2160      	movne	r1, #96	; 0x60
    ea8c:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    ea90:	f7ff bee4 	b.w	e85c <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    ea94:	4618      	mov	r0, r3
    ea96:	f7ff fd1d 	bl	e4d4 <set_le_scan_enable_legacy>
		if (err) {
    ea9a:	2800      	cmp	r0, #0
    ea9c:	d0d8      	beq.n	ea50 <bt_le_scan_update+0x20>
}
    ea9e:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    eaa0:	f001 fe72 	bl	10788 <bt_conn_unref>
    eaa4:	e7cd      	b.n	ea42 <bt_le_scan_update+0x12>
    eaa6:	bf00      	nop
    eaa8:	20008094 	.word	0x20008094

0000eaac <hci_disconn_complete>:
{
    eaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    eaae:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    eab0:	7835      	ldrb	r5, [r6, #0]
    eab2:	bb45      	cbnz	r5, eb06 <hci_disconn_complete+0x5a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    eab4:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    eab8:	4638      	mov	r0, r7
    eaba:	f001 fe89 	bl	107d0 <bt_conn_lookup_handle>
	if (!conn) {
    eabe:	4604      	mov	r4, r0
    eac0:	b930      	cbnz	r0, ead0 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    eac2:	463a      	mov	r2, r7
}
    eac4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    eac8:	2145      	movs	r1, #69	; 0x45
    eaca:	480f      	ldr	r0, [pc, #60]	; (eb08 <hci_disconn_complete+0x5c>)
    eacc:	f00a bf4d 	b.w	1996a <printk>
	conn->err = evt->reason;
    ead0:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ead2:	4629      	mov	r1, r5
	conn->err = evt->reason;
    ead4:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ead6:	f001 fe83 	bl	107e0 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    eada:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    eadc:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    eade:	2b01      	cmp	r3, #1
    eae0:	d004      	beq.n	eaec <hci_disconn_complete+0x40>
	bt_conn_unref(conn);
    eae2:	4620      	mov	r0, r4
}
    eae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    eae8:	f001 be4e 	b.w	10788 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    eaec:	1d20      	adds	r0, r4, #4
    eaee:	f00c fa69 	bl	1afc4 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    eaf2:	07c3      	lsls	r3, r0, #31
    eaf4:	d5f5      	bpl.n	eae2 <hci_disconn_complete+0x36>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    eaf6:	4620      	mov	r0, r4
    eaf8:	2102      	movs	r1, #2
    eafa:	f001 fe71 	bl	107e0 <bt_conn_set_state>
		bt_le_scan_update(false);
    eafe:	4628      	mov	r0, r5
    eb00:	f7ff ff96 	bl	ea30 <bt_le_scan_update>
    eb04:	e7ed      	b.n	eae2 <hci_disconn_complete+0x36>
}
    eb06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb08:	0001fc8a 	.word	0x0001fc8a

0000eb0c <le_adv_report>:
{
    eb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    eb10:	f100 0708 	add.w	r7, r0, #8
    eb14:	b08d      	sub	sp, #52	; 0x34
    eb16:	4604      	mov	r4, r0
    eb18:	4638      	mov	r0, r7
    eb1a:	f00d fc4c 	bl	1c3b6 <net_buf_simple_pull_u8>
    eb1e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; ece8 <le_adv_report+0x1dc>
	if (scan_dev_found_cb) {
    eb22:	f8df a1c8 	ldr.w	sl, [pc, #456]	; ecec <le_adv_report+0x1e0>
    eb26:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    eb28:	9b01      	ldr	r3, [sp, #4]
    eb2a:	b913      	cbnz	r3, eb32 <le_adv_report+0x26>
}
    eb2c:	b00d      	add	sp, #52	; 0x34
    eb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    eb32:	89a3      	ldrh	r3, [r4, #12]
    eb34:	2b08      	cmp	r3, #8
    eb36:	d806      	bhi.n	eb46 <le_adv_report+0x3a>
			BT_ERR("Unexpected end of buffer");
    eb38:	2145      	movs	r1, #69	; 0x45
    eb3a:	486d      	ldr	r0, [pc, #436]	; (ecf0 <le_adv_report+0x1e4>)
}
    eb3c:	b00d      	add	sp, #52	; 0x34
    eb3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    eb42:	f00a bf12 	b.w	1996a <printk>
	return net_buf_simple_pull_mem(&buf->b, len);
    eb46:	2109      	movs	r1, #9
    eb48:	4638      	mov	r0, r7
    eb4a:	f005 ff93 	bl	14a74 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    eb4e:	237f      	movs	r3, #127	; 0x7f
    eb50:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    eb54:	7a03      	ldrb	r3, [r0, #8]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    eb56:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    eb58:	9300      	str	r3, [sp, #0]
    eb5a:	18c3      	adds	r3, r0, r3
    eb5c:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    eb5e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.rssi = evt->data[evt->length];
    eb62:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    eb66:	23ff      	movs	r3, #255	; 0xff
    eb68:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    eb6c:	2300      	movs	r3, #0
    eb6e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
    eb72:	7802      	ldrb	r2, [r0, #0]
    eb74:	4606      	mov	r6, r0
    eb76:	2a04      	cmp	r2, #4
    eb78:	bf98      	it	ls
    eb7a:	4b5e      	ldrls	r3, [pc, #376]	; (ecf4 <le_adv_report+0x1e8>)
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    eb7c:	f100 0901 	add.w	r9, r0, #1
    eb80:	bf98      	it	ls
    eb82:	5c9b      	ldrbls	r3, [r3, r2]
    eb84:	4640      	mov	r0, r8
		adv_info.adv_type = evt->evt_type;
    eb86:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		adv_info.adv_props = get_adv_props(evt->evt_type);
    eb8a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    eb8e:	f00c fa19 	bl	1afc4 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    eb92:	0645      	lsls	r5, r0, #25
    eb94:	d50d      	bpl.n	ebb2 <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    eb96:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    eb9a:	0758      	lsls	r0, r3, #29
    eb9c:	d509      	bpl.n	ebb2 <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    eb9e:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    eba0:	4638      	mov	r0, r7
    eba2:	3101      	adds	r1, #1
    eba4:	f005 ff4a 	bl	14a3c <net_buf_simple_pull>
    eba8:	9b01      	ldr	r3, [sp, #4]
    ebaa:	1e58      	subs	r0, r3, #1
    ebac:	b2c3      	uxtb	r3, r0
    ebae:	9301      	str	r3, [sp, #4]
    ebb0:	e7ba      	b.n	eb28 <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    ebb2:	7873      	ldrb	r3, [r6, #1]
    ebb4:	1e9a      	subs	r2, r3, #2
    ebb6:	2a01      	cmp	r2, #1
    ebb8:	d84c      	bhi.n	ec54 <le_adv_report+0x148>
		bt_addr_le_copy(&id_addr, addr);
    ebba:	4649      	mov	r1, r9
    ebbc:	a804      	add	r0, sp, #16
    ebbe:	f00c fa04 	bl	1afca <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    ebc2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    ebc6:	3b02      	subs	r3, #2
    ebc8:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    ebcc:	ab04      	add	r3, sp, #16
    ebce:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    ebd0:	f8da 3000 	ldr.w	r3, [sl]
    ebd4:	b1a3      	cbz	r3, ec00 <le_adv_report+0xf4>
	state->offset = net_buf_simple_headroom(buf);
    ebd6:	4638      	mov	r0, r7
    ebd8:	f00d fbfd 	bl	1c3d6 <net_buf_simple_headroom>
    ebdc:	4683      	mov	fp, r0
		buf->len = len;
    ebde:	9b00      	ldr	r3, [sp, #0]
	state->len = buf->len;
    ebe0:	89a5      	ldrh	r5, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    ebe2:	a804      	add	r0, sp, #16
		buf->len = len;
    ebe4:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    ebe6:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    ebea:	463b      	mov	r3, r7
    ebec:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    ebf0:	f8da c000 	ldr.w	ip, [sl]
    ebf4:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    ebf6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    ebf8:	81a5      	strh	r5, [r4, #12]
	buf->data = buf->__buf + state->offset;
    ebfa:	fa10 f08b 	uxtah	r0, r0, fp
    ebfe:	60a0      	str	r0, [r4, #8]
	return list->head;
    ec00:	4b3d      	ldr	r3, [pc, #244]	; (ecf8 <le_adv_report+0x1ec>)
    ec02:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    ec04:	2b00      	cmp	r3, #0
    ec06:	d032      	beq.n	ec6e <le_adv_report+0x162>
    ec08:	f1b3 0208 	subs.w	r2, r3, #8
    ec0c:	d02f      	beq.n	ec6e <le_adv_report+0x162>
	return node->next;
    ec0e:	681d      	ldr	r5, [r3, #0]
    ec10:	b105      	cbz	r5, ec14 <le_adv_report+0x108>
    ec12:	3d08      	subs	r5, #8
		if (listener->recv) {
    ec14:	6813      	ldr	r3, [r2, #0]
    ec16:	9203      	str	r2, [sp, #12]
    ec18:	b193      	cbz	r3, ec40 <le_adv_report+0x134>
	state->offset = net_buf_simple_headroom(buf);
    ec1a:	4638      	mov	r0, r7
    ec1c:	f00d fbdb 	bl	1c3d6 <net_buf_simple_headroom>
    ec20:	4683      	mov	fp, r0
	state->len = buf->len;
    ec22:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    ec24:	9a03      	ldr	r2, [sp, #12]
    ec26:	9302      	str	r3, [sp, #8]
			buf->len = len;
    ec28:	9b00      	ldr	r3, [sp, #0]
			listener->recv(info, &buf->b);
    ec2a:	a808      	add	r0, sp, #32
			buf->len = len;
    ec2c:	81a3      	strh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    ec2e:	4639      	mov	r1, r7
    ec30:	6812      	ldr	r2, [r2, #0]
    ec32:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    ec34:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    ec36:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    ec38:	fa10 f08b 	uxtah	r0, r0, fp
    ec3c:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    ec3e:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    ec40:	b1ad      	cbz	r5, ec6e <le_adv_report+0x162>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ec42:	f115 0308 	adds.w	r3, r5, #8
    ec46:	d002      	beq.n	ec4e <le_adv_report+0x142>
	return node->next;
    ec48:	68ab      	ldr	r3, [r5, #8]
    ec4a:	b103      	cbz	r3, ec4e <le_adv_report+0x142>
    ec4c:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    ec4e:	462a      	mov	r2, r5
    ec50:	461d      	mov	r5, r3
    ec52:	e7df      	b.n	ec14 <le_adv_report+0x108>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    ec54:	2bff      	cmp	r3, #255	; 0xff
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    ec56:	bf0a      	itet	eq
    ec58:	2300      	moveq	r3, #0
		bt_addr_le_copy(&id_addr,
    ec5a:	4649      	movne	r1, r9
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    ec5c:	a906      	addeq	r1, sp, #24
		bt_addr_le_copy(&id_addr,
    ec5e:	a804      	add	r0, sp, #16
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    ec60:	bf04      	itt	eq
    ec62:	9306      	streq	r3, [sp, #24]
    ec64:	f8cd 301b 	streq.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    ec68:	f00c f9af 	bl	1afca <bt_addr_le_copy>
    ec6c:	e7ae      	b.n	ebcc <le_adv_report+0xc0>
    ec6e:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    ec70:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ec74:	f00c f9a6 	bl	1afc4 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    ec78:	0641      	lsls	r1, r0, #25
    ec7a:	f3c0 1580 	ubfx	r5, r0, #6, #1
    ec7e:	d48e      	bmi.n	eb9e <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    ec80:	07da      	lsls	r2, r3, #31
    ec82:	d58c      	bpl.n	eb9e <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    ec84:	2202      	movs	r2, #2
    ec86:	4628      	mov	r0, r5
    ec88:	a904      	add	r1, sp, #16
    ec8a:	f001 fedf 	bl	10a4c <bt_conn_lookup_state_le>
	if (!conn) {
    ec8e:	4683      	mov	fp, r0
    ec90:	2800      	cmp	r0, #0
    ec92:	d084      	beq.n	eb9e <le_adv_report+0x92>
    ec94:	4640      	mov	r0, r8
    ec96:	f00c f995 	bl	1afc4 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    ec9a:	0683      	lsls	r3, r0, #26
    ec9c:	d410      	bmi.n	ecc0 <le_adv_report+0x1b4>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    ec9e:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    eca2:	4649      	mov	r1, r9
    eca4:	f00c f991 	bl	1afca <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    eca8:	4658      	mov	r0, fp
    ecaa:	f7ff fe3d 	bl	e928 <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    ecae:	b960      	cbnz	r0, ecca <le_adv_report+0x1be>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    ecb0:	4658      	mov	r0, fp
    ecb2:	2106      	movs	r1, #6
    ecb4:	f001 fd94 	bl	107e0 <bt_conn_set_state>
	bt_conn_unref(conn);
    ecb8:	4658      	mov	r0, fp
    ecba:	f001 fd65 	bl	10788 <bt_conn_unref>
	return;
    ecbe:	e76e      	b.n	eb9e <le_adv_report+0x92>
	return set_le_scan_enable_legacy(enable);
    ecc0:	4628      	mov	r0, r5
    ecc2:	f7ff fc07 	bl	e4d4 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    ecc6:	2800      	cmp	r0, #0
    ecc8:	d0e9      	beq.n	ec9e <le_adv_report+0x192>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    ecca:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    eccc:	2100      	movs	r1, #0
    ecce:	4658      	mov	r0, fp
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    ecd0:	f88b 3009 	strb.w	r3, [fp, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ecd4:	f001 fd84 	bl	107e0 <bt_conn_set_state>
	bt_conn_unref(conn);
    ecd8:	4658      	mov	r0, fp
    ecda:	f001 fd55 	bl	10788 <bt_conn_unref>
	bt_le_scan_update(false);
    ecde:	2000      	movs	r0, #0
    ece0:	f7ff fea6 	bl	ea30 <bt_le_scan_update>
    ece4:	e75b      	b.n	eb9e <le_adv_report+0x92>
    ece6:	bf00      	nop
    ece8:	20008094 	.word	0x20008094
    ecec:	2000a964 	.word	0x2000a964
    ecf0:	0001ff3e 	.word	0x0001ff3e
    ecf4:	000203c2 	.word	0x000203c2
    ecf8:	2000a95c 	.word	0x2000a95c

0000ecfc <bt_data_parse>:
{
    ecfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ecfe:	4604      	mov	r4, r0
    ed00:	460e      	mov	r6, r1
    ed02:	4617      	mov	r7, r2
	while (ad->len > 1) {
    ed04:	88a3      	ldrh	r3, [r4, #4]
    ed06:	2b01      	cmp	r3, #1
    ed08:	d801      	bhi.n	ed0e <bt_data_parse+0x12>
}
    ed0a:	b003      	add	sp, #12
    ed0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
    ed0e:	4620      	mov	r0, r4
    ed10:	f00d fb51 	bl	1c3b6 <net_buf_simple_pull_u8>
		if (len == 0U) {
    ed14:	4605      	mov	r5, r0
    ed16:	2800      	cmp	r0, #0
    ed18:	d0f7      	beq.n	ed0a <bt_data_parse+0xe>
		if (len > ad->len) {
    ed1a:	88a2      	ldrh	r2, [r4, #4]
    ed1c:	b283      	uxth	r3, r0
    ed1e:	429a      	cmp	r2, r3
    ed20:	d206      	bcs.n	ed30 <bt_data_parse+0x34>
			BT_WARN("Malformed data");
    ed22:	2157      	movs	r1, #87	; 0x57
    ed24:	480c      	ldr	r0, [pc, #48]	; (ed58 <bt_data_parse+0x5c>)
}
    ed26:	b003      	add	sp, #12
    ed28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Malformed data");
    ed2c:	f00a be1d 	b.w	1996a <printk>
		data.type = net_buf_simple_pull_u8(ad);
    ed30:	4620      	mov	r0, r4
    ed32:	f00d fb40 	bl	1c3b6 <net_buf_simple_pull_u8>
		data.data = ad->data;
    ed36:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    ed38:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    ed3c:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    ed3e:	4639      	mov	r1, r7
    ed40:	4668      	mov	r0, sp
		data.data_len = len - 1;
    ed42:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    ed46:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    ed48:	47b0      	blx	r6
    ed4a:	2800      	cmp	r0, #0
    ed4c:	d0dd      	beq.n	ed0a <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
    ed4e:	4629      	mov	r1, r5
    ed50:	4620      	mov	r0, r4
    ed52:	f005 fe73 	bl	14a3c <net_buf_simple_pull>
    ed56:	e7d5      	b.n	ed04 <bt_data_parse+0x8>
    ed58:	0001ff5c 	.word	0x0001ff5c

0000ed5c <bt_send>:
	return bt_dev.drv->send(buf);
    ed5c:	4b02      	ldr	r3, [pc, #8]	; (ed68 <bt_send+0xc>)
    ed5e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    ed62:	691b      	ldr	r3, [r3, #16]
    ed64:	4718      	bx	r3
    ed66:	bf00      	nop
    ed68:	20008000 	.word	0x20008000

0000ed6c <bt_hci_cmd_send>:
{
    ed6c:	b538      	push	{r3, r4, r5, lr}
    ed6e:	4605      	mov	r5, r0
	if (!buf) {
    ed70:	460c      	mov	r4, r1
    ed72:	b919      	cbnz	r1, ed7c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    ed74:	f7ff fab4 	bl	e2e0 <bt_hci_cmd_create>
		if (!buf) {
    ed78:	4604      	mov	r4, r0
    ed7a:	b1c0      	cbz	r0, edae <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    ed7c:	f640 4335 	movw	r3, #3125	; 0xc35
    ed80:	429d      	cmp	r5, r3
    ed82:	d10e      	bne.n	eda2 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    ed84:	4620      	mov	r0, r4
    ed86:	f7ff ffe9 	bl	ed5c <bt_send>
		if (err) {
    ed8a:	4605      	mov	r5, r0
    ed8c:	b138      	cbz	r0, ed9e <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    ed8e:	4602      	mov	r2, r0
    ed90:	2145      	movs	r1, #69	; 0x45
    ed92:	4808      	ldr	r0, [pc, #32]	; (edb4 <bt_hci_cmd_send+0x48>)
    ed94:	f00a fde9 	bl	1996a <printk>
			net_buf_unref(buf);
    ed98:	4620      	mov	r0, r4
    ed9a:	f005 fd73 	bl	14884 <net_buf_unref>
}
    ed9e:	4628      	mov	r0, r5
    eda0:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    eda2:	4621      	mov	r1, r4
    eda4:	4804      	ldr	r0, [pc, #16]	; (edb8 <bt_hci_cmd_send+0x4c>)
    eda6:	f005 fd3f 	bl	14828 <net_buf_put>
	return 0;
    edaa:	2500      	movs	r5, #0
    edac:	e7f7      	b.n	ed9e <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    edae:	f06f 0536 	mvn.w	r5, #54	; 0x36
    edb2:	e7f4      	b.n	ed9e <bt_hci_cmd_send+0x32>
    edb4:	0001ff70 	.word	0x0001ff70
    edb8:	20008118 	.word	0x20008118

0000edbc <bt_hci_host_num_completed_packets>:
{
    edbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    edbe:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    edc0:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    edc2:	7980      	ldrb	r0, [r0, #6]
    edc4:	f005 fbde 	bl	14584 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    edc8:	4621      	mov	r1, r4
    edca:	f00e f956 	bl	1d07a <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    edce:	4b24      	ldr	r3, [pc, #144]	; (ee60 <bt_hci_host_num_completed_packets+0xa4>)
    edd0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    edd4:	069b      	lsls	r3, r3, #26
    edd6:	d541      	bpl.n	ee5c <bt_hci_host_num_completed_packets+0xa0>
	conn = bt_conn_lookup_index(acl(buf)->index);
    edd8:	7d60      	ldrb	r0, [r4, #21]
    edda:	f002 f94d 	bl	11078 <bt_conn_lookup_index>
	if (!conn) {
    edde:	4605      	mov	r5, r0
    ede0:	b930      	cbnz	r0, edf0 <bt_hci_host_num_completed_packets+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    ede2:	7d62      	ldrb	r2, [r4, #21]
    ede4:	2157      	movs	r1, #87	; 0x57
}
    ede6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    edea:	481e      	ldr	r0, [pc, #120]	; (ee64 <bt_hci_host_num_completed_packets+0xa8>)
    edec:	f00a bdbd 	b.w	1996a <printk>
	if (!bt_conn_is_handle_valid(conn)) {
    edf0:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    edf2:	2b01      	cmp	r3, #1
    edf4:	d002      	beq.n	edfc <bt_hci_host_num_completed_packets+0x40>
    edf6:	3b07      	subs	r3, #7
    edf8:	2b01      	cmp	r3, #1
    edfa:	d80f      	bhi.n	ee1c <bt_hci_host_num_completed_packets+0x60>
	bt_conn_unref(conn);
    edfc:	4628      	mov	r0, r5
    edfe:	f001 fcc3 	bl	10788 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    ee02:	2105      	movs	r1, #5
    ee04:	f640 4035 	movw	r0, #3125	; 0xc35
    ee08:	f7ff fa6a 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
    ee0c:	4604      	mov	r4, r0
    ee0e:	b970      	cbnz	r0, ee2e <bt_hci_host_num_completed_packets+0x72>
}
    ee10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    ee14:	2145      	movs	r1, #69	; 0x45
    ee16:	4814      	ldr	r0, [pc, #80]	; (ee68 <bt_hci_host_num_completed_packets+0xac>)
    ee18:	f00a bda7 	b.w	1996a <printk>
		BT_WARN("Not reporting packet for non-connected conn");
    ee1c:	4813      	ldr	r0, [pc, #76]	; (ee6c <bt_hci_host_num_completed_packets+0xb0>)
    ee1e:	2157      	movs	r1, #87	; 0x57
    ee20:	f00a fda3 	bl	1996a <printk>
		bt_conn_unref(conn);
    ee24:	4628      	mov	r0, r5
}
    ee26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    ee2a:	f001 bcad 	b.w	10788 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    ee2e:	f100 0708 	add.w	r7, r0, #8
    ee32:	2101      	movs	r1, #1
    ee34:	4638      	mov	r0, r7
    ee36:	f005 fe3b 	bl	14ab0 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    ee3a:	2501      	movs	r5, #1
    ee3c:	2104      	movs	r1, #4
    ee3e:	7005      	strb	r5, [r0, #0]
    ee40:	4638      	mov	r0, r7
    ee42:	f005 fe35 	bl	14ab0 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    ee46:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    ee48:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    ee4a:	7085      	strb	r5, [r0, #2]
    ee4c:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    ee4e:	4621      	mov	r1, r4
}
    ee50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    ee54:	f640 4035 	movw	r0, #3125	; 0xc35
    ee58:	f7ff bf88 	b.w	ed6c <bt_hci_cmd_send>
}
    ee5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ee5e:	bf00      	nop
    ee60:	20008000 	.word	0x20008000
    ee64:	0001ff97 	.word	0x0001ff97
    ee68:	0001fff6 	.word	0x0001fff6
    ee6c:	0001ffc5 	.word	0x0001ffc5

0000ee70 <conn_auto_initiate>:
{
    ee70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    ee72:	7a83      	ldrb	r3, [r0, #10]
{
    ee74:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    ee76:	2b07      	cmp	r3, #7
    ee78:	d15d      	bne.n	ef36 <conn_auto_initiate+0xc6>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    ee7a:	1d06      	adds	r6, r0, #4
    ee7c:	4630      	mov	r0, r6
    ee7e:	f00c f8a1 	bl	1afc4 <atomic_get>
    ee82:	0483      	lsls	r3, r0, #18
    ee84:	d41b      	bmi.n	eebe <conn_auto_initiate+0x4e>
    ee86:	78e3      	ldrb	r3, [r4, #3]
    ee88:	b123      	cbz	r3, ee94 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    ee8a:	4b2c      	ldr	r3, [pc, #176]	; (ef3c <conn_auto_initiate+0xcc>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    ee8c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    ee90:	071d      	lsls	r5, r3, #28
    ee92:	d514      	bpl.n	eebe <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    ee94:	2102      	movs	r1, #2
    ee96:	f242 0016 	movw	r0, #8214	; 0x2016
    ee9a:	f7ff fa21 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
    ee9e:	4605      	mov	r5, r0
    eea0:	b168      	cbz	r0, eebe <conn_auto_initiate+0x4e>
    eea2:	2102      	movs	r1, #2
    eea4:	3008      	adds	r0, #8
    eea6:	f005 fe03 	bl	14ab0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    eeaa:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    eeac:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    eeae:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    eeb0:	f242 0016 	movw	r0, #8214	; 0x2016
}
    eeb4:	b004      	add	sp, #16
    eeb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    eeba:	f7ff bf57 	b.w	ed6c <bt_hci_cmd_send>
    eebe:	4630      	mov	r0, r6
    eec0:	f00c f880 	bl	1afc4 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    eec4:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    eec8:	4d1c      	ldr	r5, [pc, #112]	; (ef3c <conn_auto_initiate+0xcc>)
    eeca:	f3c0 3100 	ubfx	r1, r0, #12, #1
    eece:	d116      	bne.n	eefe <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    eed0:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    eed4:	07d8      	lsls	r0, r3, #31
    eed6:	d512      	bpl.n	eefe <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    eed8:	2302      	movs	r3, #2
    eeda:	4620      	mov	r0, r4
    eedc:	461a      	mov	r2, r3
    eede:	9100      	str	r1, [sp, #0]
    eee0:	f00c f924 	bl	1b12c <bt_le_set_phy>
		if (!err) {
    eee4:	4602      	mov	r2, r0
    eee6:	b930      	cbnz	r0, eef6 <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    eee8:	2180      	movs	r1, #128	; 0x80
    eeea:	4630      	mov	r0, r6
}
    eeec:	b004      	add	sp, #16
    eeee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eef2:	f00c b86d 	b.w	1afd0 <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    eef6:	2145      	movs	r1, #69	; 0x45
    eef8:	4811      	ldr	r0, [pc, #68]	; (ef40 <conn_auto_initiate+0xd0>)
    eefa:	f00a fd36 	bl	1996a <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    eefe:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    ef02:	069a      	lsls	r2, r3, #26
    ef04:	d517      	bpl.n	ef36 <conn_auto_initiate+0xc6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    ef06:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    ef0a:	689b      	ldr	r3, [r3, #8]
    ef0c:	079b      	lsls	r3, r3, #30
    ef0e:	d512      	bpl.n	ef36 <conn_auto_initiate+0xc6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    ef10:	f10d 010e 	add.w	r1, sp, #14
    ef14:	a803      	add	r0, sp, #12
    ef16:	f7ff fa8f 	bl	e438 <hci_le_read_max_data_len>
			if (!err) {
    ef1a:	b960      	cbnz	r0, ef36 <conn_auto_initiate+0xc6>
				err = bt_le_set_data_len(conn,
    ef1c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    ef20:	4620      	mov	r0, r4
    ef22:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    ef26:	f00c f8e4 	bl	1b0f2 <bt_le_set_data_len>
				if (err) {
    ef2a:	4602      	mov	r2, r0
    ef2c:	b118      	cbz	r0, ef36 <conn_auto_initiate+0xc6>
					BT_ERR("Failed to set data len (%d)", err);
    ef2e:	2145      	movs	r1, #69	; 0x45
    ef30:	4804      	ldr	r0, [pc, #16]	; (ef44 <conn_auto_initiate+0xd4>)
    ef32:	f00a fd1a 	bl	1996a <printk>
}
    ef36:	b004      	add	sp, #16
    ef38:	bd70      	pop	{r4, r5, r6, pc}
    ef3a:	bf00      	nop
    ef3c:	20008000 	.word	0x20008000
    ef40:	0002001e 	.word	0x0002001e
    ef44:	0002003d 	.word	0x0002003d

0000ef48 <le_phy_update_complete>:
{
    ef48:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ef4a:	6883      	ldr	r3, [r0, #8]
    ef4c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    ef50:	4628      	mov	r0, r5
    ef52:	f001 fc3d 	bl	107d0 <bt_conn_lookup_handle>
	if (!conn) {
    ef56:	4604      	mov	r4, r0
    ef58:	b930      	cbnz	r0, ef68 <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ef5a:	462a      	mov	r2, r5
}
    ef5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ef60:	2145      	movs	r1, #69	; 0x45
    ef62:	480c      	ldr	r0, [pc, #48]	; (ef94 <le_phy_update_complete+0x4c>)
    ef64:	f00a bd01 	b.w	1996a <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    ef68:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ef6a:	f06f 0180 	mvn.w	r1, #128	; 0x80
    ef6e:	4628      	mov	r0, r5
    ef70:	f00c f83c 	bl	1afec <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    ef74:	0603      	lsls	r3, r0, #24
    ef76:	d507      	bpl.n	ef88 <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ef78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    ef7c:	4628      	mov	r0, r5
    ef7e:	f00c f827 	bl	1afd0 <atomic_or>
		conn_auto_initiate(conn);
    ef82:	4620      	mov	r0, r4
    ef84:	f7ff ff74 	bl	ee70 <conn_auto_initiate>
	bt_conn_unref(conn);
    ef88:	4620      	mov	r0, r4
}
    ef8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    ef8e:	f001 bbfb 	b.w	10788 <bt_conn_unref>
    ef92:	bf00      	nop
    ef94:	0001fc61 	.word	0x0001fc61

0000ef98 <le_remote_feat_complete>:
{
    ef98:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    ef9a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ef9c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    efa0:	4630      	mov	r0, r6
    efa2:	f001 fc15 	bl	107d0 <bt_conn_lookup_handle>
	if (!conn) {
    efa6:	4604      	mov	r4, r0
    efa8:	b930      	cbnz	r0, efb8 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    efaa:	4632      	mov	r2, r6
}
    efac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    efb0:	2145      	movs	r1, #69	; 0x45
    efb2:	480b      	ldr	r0, [pc, #44]	; (efe0 <le_remote_feat_complete+0x48>)
    efb4:	f00a bcd9 	b.w	1996a <printk>
	if (!evt->status) {
    efb8:	782b      	ldrb	r3, [r5, #0]
    efba:	b923      	cbnz	r3, efc6 <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    efbc:	2208      	movs	r2, #8
    efbe:	1ce9      	adds	r1, r5, #3
    efc0:	30ac      	adds	r0, #172	; 0xac
    efc2:	f00b ff12 	bl	1adea <memcpy>
    efc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    efca:	1d20      	adds	r0, r4, #4
    efcc:	f00c f800 	bl	1afd0 <atomic_or>
	conn_auto_initiate(conn);
    efd0:	4620      	mov	r0, r4
    efd2:	f7ff ff4d 	bl	ee70 <conn_auto_initiate>
	bt_conn_unref(conn);
    efd6:	4620      	mov	r0, r4
}
    efd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    efdc:	f001 bbd4 	b.w	10788 <bt_conn_unref>
    efe0:	0001fc61 	.word	0x0001fc61

0000efe4 <le_conn_param_neg_reply>:
{
    efe4:	b570      	push	{r4, r5, r6, lr}
    efe6:	4606      	mov	r6, r0
    efe8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    efea:	f242 0021 	movw	r0, #8225	; 0x2021
    efee:	2103      	movs	r1, #3
    eff0:	f7ff f976 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
    eff4:	4604      	mov	r4, r0
    eff6:	b928      	cbnz	r0, f004 <le_conn_param_neg_reply+0x20>
}
    eff8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    effc:	2145      	movs	r1, #69	; 0x45
    effe:	4808      	ldr	r0, [pc, #32]	; (f020 <le_conn_param_neg_reply+0x3c>)
    f000:	f00a bcb3 	b.w	1996a <printk>
    f004:	2103      	movs	r1, #3
    f006:	3008      	adds	r0, #8
    f008:	f005 fd52 	bl	14ab0 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    f00c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    f00e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    f010:	4621      	mov	r1, r4
}
    f012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    f016:	f242 0021 	movw	r0, #8225	; 0x2021
    f01a:	f7ff bea7 	b.w	ed6c <bt_hci_cmd_send>
    f01e:	bf00      	nop
    f020:	0002005e 	.word	0x0002005e

0000f024 <le_conn_param_req>:
{
    f024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    f026:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    f028:	78d9      	ldrb	r1, [r3, #3]
    f02a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    f02c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    f02e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f032:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    f036:	7959      	ldrb	r1, [r3, #5]
    f038:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    f03a:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    f03c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f040:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    f044:	799a      	ldrb	r2, [r3, #6]
    f046:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    f048:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    f04a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f04e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    f052:	7a1a      	ldrb	r2, [r3, #8]
    f054:	7a5b      	ldrb	r3, [r3, #9]
    f056:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f05a:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    f05e:	f001 fbb7 	bl	107d0 <bt_conn_lookup_handle>
	if (!conn) {
    f062:	4606      	mov	r6, r0
    f064:	b950      	cbnz	r0, f07c <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    f066:	2145      	movs	r1, #69	; 0x45
    f068:	481c      	ldr	r0, [pc, #112]	; (f0dc <le_conn_param_req+0xb8>)
    f06a:	4622      	mov	r2, r4
    f06c:	f00a fc7d 	bl	1996a <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    f070:	2102      	movs	r1, #2
    f072:	4620      	mov	r0, r4
    f074:	f7ff ffb6 	bl	efe4 <le_conn_param_neg_reply>
}
    f078:	b003      	add	sp, #12
    f07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    f07c:	4669      	mov	r1, sp
    f07e:	f001 f9f5 	bl	1046c <le_param_req>
    f082:	b938      	cbnz	r0, f094 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    f084:	211e      	movs	r1, #30
    f086:	4620      	mov	r0, r4
    f088:	f7ff ffac 	bl	efe4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    f08c:	4630      	mov	r0, r6
    f08e:	f001 fb7b 	bl	10788 <bt_conn_unref>
    f092:	e7f1      	b.n	f078 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    f094:	210e      	movs	r1, #14
    f096:	f242 0020 	movw	r0, #8224	; 0x2020
    f09a:	f7ff f921 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
    f09e:	4605      	mov	r5, r0
    f0a0:	2800      	cmp	r0, #0
    f0a2:	d0f3      	beq.n	f08c <le_conn_param_req+0x68>
    f0a4:	210e      	movs	r1, #14
    f0a6:	3008      	adds	r0, #8
    f0a8:	f005 fd02 	bl	14ab0 <net_buf_simple_add>
    f0ac:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    f0ae:	220e      	movs	r2, #14
    f0b0:	2100      	movs	r1, #0
    f0b2:	f00b fec5 	bl	1ae40 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    f0b6:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    f0ba:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    f0bc:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    f0be:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    f0c2:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    f0c4:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    f0c6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    f0ca:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    f0ce:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    f0d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f0d4:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    f0d6:	f7ff fe49 	bl	ed6c <bt_hci_cmd_send>
    f0da:	e7d7      	b.n	f08c <le_conn_param_req+0x68>
    f0dc:	0001fc61 	.word	0x0001fc61

0000f0e0 <hci_tx_thread>:
{
    f0e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    f0e4:	f8df 8128 	ldr.w	r8, [pc, #296]	; f210 <hci_tx_thread+0x130>
		BT_ASSERT(err == 0);
    f0e8:	f8df 9128 	ldr.w	r9, [pc, #296]	; f214 <hci_tx_thread+0x134>
			ev_count += bt_conn_prepare_events(&events[1]);
    f0ec:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    f0f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    f0f4:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    f0f6:	f36f 3310 	bfc	r3, #12, #5
    f0fa:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    f0fe:	f001 fad7 	bl	106b0 <bt_conn_prepare_events>
    f102:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    f104:	f04f 32ff 	mov.w	r2, #4294967295
    f108:	f04f 33ff 	mov.w	r3, #4294967295
    f10c:	4631      	mov	r1, r6
    f10e:	4840      	ldr	r0, [pc, #256]	; (f210 <hci_tx_thread+0x130>)
    f110:	f00a fa12 	bl	19538 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    f114:	b158      	cbz	r0, f12e <hci_tx_thread+0x4e>
    f116:	f241 4271 	movw	r2, #5233	; 0x1471
    f11a:	4649      	mov	r1, r9
    f11c:	483e      	ldr	r0, [pc, #248]	; (f218 <hci_tx_thread+0x138>)
    f11e:	f00a fc24 	bl	1996a <printk>
    f122:	4040      	eors	r0, r0
    f124:	f380 8811 	msr	BASEPRI, r0
    f128:	f04f 0003 	mov.w	r0, #3
    f12c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    f12e:	4d3b      	ldr	r5, [pc, #236]	; (f21c <hci_tx_thread+0x13c>)
{
    f130:	4f37      	ldr	r7, [pc, #220]	; (f210 <hci_tx_thread+0x130>)
    f132:	f105 0be0 	add.w	fp, r5, #224	; 0xe0
	for (; count; ev++, count--) {
    f136:	b916      	cbnz	r6, f13e <hci_tx_thread+0x5e>
	z_impl_k_yield();
    f138:	f009 f900 	bl	1833c <z_impl_k_yield>
	while (1) {
    f13c:	e7d8      	b.n	f0f0 <hci_tx_thread+0x10>
		switch (ev->state) {
    f13e:	68fa      	ldr	r2, [r7, #12]
    f140:	f3c2 3204 	ubfx	r2, r2, #12, #5
    f144:	2a01      	cmp	r2, #1
    f146:	d953      	bls.n	f1f0 <hci_tx_thread+0x110>
    f148:	2a04      	cmp	r2, #4
    f14a:	d15b      	bne.n	f204 <hci_tx_thread+0x124>
			if (ev->tag == BT_EVENT_CMD_TX) {
    f14c:	7b3b      	ldrb	r3, [r7, #12]
    f14e:	2b00      	cmp	r3, #0
    f150:	d151      	bne.n	f1f6 <hci_tx_thread+0x116>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    f152:	2200      	movs	r2, #0
    f154:	2300      	movs	r3, #0
    f156:	4832      	ldr	r0, [pc, #200]	; (f220 <hci_tx_thread+0x140>)
    f158:	f005 fb12 	bl	14780 <net_buf_get>
	BT_ASSERT(buf);
    f15c:	4604      	mov	r4, r0
    f15e:	b958      	cbnz	r0, f178 <hci_tx_thread+0x98>
    f160:	f241 420e 	movw	r2, #5134	; 0x140e
    f164:	4649      	mov	r1, r9
    f166:	482c      	ldr	r0, [pc, #176]	; (f218 <hci_tx_thread+0x138>)
    f168:	f00a fbff 	bl	1996a <printk>
    f16c:	4040      	eors	r0, r0
    f16e:	f380 8811 	msr	BASEPRI, r0
    f172:	f04f 0003 	mov.w	r0, #3
    f176:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    f178:	f04f 33ff 	mov.w	r3, #4294967295
    f17c:	f04f 32ff 	mov.w	r2, #4294967295
    f180:	4658      	mov	r0, fp
    f182:	f009 fa59 	bl	18638 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    f186:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    f18a:	b153      	cbz	r3, f1a2 <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
    f18c:	2145      	movs	r1, #69	; 0x45
    f18e:	4825      	ldr	r0, [pc, #148]	; (f224 <hci_tx_thread+0x144>)
    f190:	f00a fbeb 	bl	1996a <printk>
		net_buf_unref(bt_dev.sent_cmd);
    f194:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    f198:	f005 fb74 	bl	14884 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    f19c:	2300      	movs	r3, #0
    f19e:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    f1a2:	4620      	mov	r0, r4
    f1a4:	f005 fbb2 	bl	1490c <net_buf_ref>
    f1a8:	f8c5 00f8 	str.w	r0, [r5, #248]	; 0xf8
	err = bt_send(buf);
    f1ac:	4620      	mov	r0, r4
    f1ae:	f7ff fdd5 	bl	ed5c <bt_send>
	if (err) {
    f1b2:	4602      	mov	r2, r0
    f1b4:	b1e0      	cbz	r0, f1f0 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    f1b6:	2145      	movs	r1, #69	; 0x45
    f1b8:	481b      	ldr	r0, [pc, #108]	; (f228 <hci_tx_thread+0x148>)
    f1ba:	f00a fbd6 	bl	1996a <printk>
	z_impl_k_sem_give(sem);
    f1be:	481b      	ldr	r0, [pc, #108]	; (f22c <hci_tx_thread+0x14c>)
    f1c0:	f009 f9fe 	bl	185c0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    f1c4:	4620      	mov	r0, r4
    f1c6:	f005 f9e5 	bl	14594 <net_buf_id>
    f1ca:	220c      	movs	r2, #12
    f1cc:	4b18      	ldr	r3, [pc, #96]	; (f230 <hci_tx_thread+0x150>)
    f1ce:	211f      	movs	r1, #31
    f1d0:	fb02 3000 	mla	r0, r2, r0, r3
    f1d4:	4622      	mov	r2, r4
    f1d6:	8840      	ldrh	r0, [r0, #2]
    f1d8:	f7fe ff20 	bl	e01c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    f1dc:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    f1e0:	f005 fb50 	bl	14884 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    f1e4:	2300      	movs	r3, #0
		net_buf_unref(buf);
    f1e6:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    f1e8:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
		net_buf_unref(buf);
    f1ec:	f005 fb4a 	bl	14884 <net_buf_unref>
	for (; count; ev++, count--) {
    f1f0:	3714      	adds	r7, #20
    f1f2:	3e01      	subs	r6, #1
    f1f4:	e79f      	b.n	f136 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    f1f6:	2b01      	cmp	r3, #1
    f1f8:	d1fa      	bne.n	f1f0 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    f1fa:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
    f1fc:	3834      	subs	r0, #52	; 0x34
    f1fe:	f001 febb 	bl	10f78 <bt_conn_process_tx>
    f202:	e7f5      	b.n	f1f0 <hci_tx_thread+0x110>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    f204:	2157      	movs	r1, #87	; 0x57
    f206:	480b      	ldr	r0, [pc, #44]	; (f234 <hci_tx_thread+0x154>)
    f208:	f00a fbaf 	bl	1996a <printk>
    f20c:	e7f0      	b.n	f1f0 <hci_tx_thread+0x110>
    f20e:	bf00      	nop
    f210:	20008338 	.word	0x20008338
    f214:	0001fd53 	.word	0x0001fd53
    f218:	0001ea60 	.word	0x0001ea60
    f21c:	20008000 	.word	0x20008000
    f220:	20008118 	.word	0x20008118
    f224:	0002007d 	.word	0x0002007d
    f228:	0001ff70 	.word	0x0001ff70
    f22c:	200080e0 	.word	0x200080e0
    f230:	2000a940 	.word	0x2000a940
    f234:	0002009d 	.word	0x0002009d

0000f238 <hci_event_prio>:
{
    f238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f23c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    f23e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    f242:	4630      	mov	r0, r6
    f244:	f00d f8c7 	bl	1c3d6 <net_buf_simple_headroom>
	state->len = buf->len;
    f248:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    f24c:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    f24e:	f1b8 0f01 	cmp.w	r8, #1
    f252:	d80b      	bhi.n	f26c <hci_event_prio+0x34>
    f254:	f641 02ae 	movw	r2, #6318	; 0x18ae
    f258:	491a      	ldr	r1, [pc, #104]	; (f2c4 <hci_event_prio+0x8c>)
    f25a:	481b      	ldr	r0, [pc, #108]	; (f2c8 <hci_event_prio+0x90>)
    f25c:	f00a fb85 	bl	1996a <printk>
    f260:	4040      	eors	r0, r0
    f262:	f380 8811 	msr	BASEPRI, r0
    f266:	f04f 0003 	mov.w	r0, #3
    f26a:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    f26c:	4630      	mov	r0, r6
    f26e:	2102      	movs	r1, #2
    f270:	f005 fc00 	bl	14a74 <net_buf_simple_pull_mem>
    f274:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f276:	7800      	ldrb	r0, [r0, #0]
    f278:	f00b fe83 	bl	1af82 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    f27c:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f27e:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    f280:	d40b      	bmi.n	f29a <hci_event_prio+0x62>
    f282:	f641 02b2 	movw	r2, #6322	; 0x18b2
    f286:	490f      	ldr	r1, [pc, #60]	; (f2c4 <hci_event_prio+0x8c>)
    f288:	480f      	ldr	r0, [pc, #60]	; (f2c8 <hci_event_prio+0x90>)
    f28a:	f00a fb6e 	bl	1996a <printk>
    f28e:	4040      	eors	r0, r0
    f290:	f380 8811 	msr	BASEPRI, r0
    f294:	f04f 0003 	mov.w	r0, #3
    f298:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    f29a:	2305      	movs	r3, #5
    f29c:	4621      	mov	r1, r4
    f29e:	4a0b      	ldr	r2, [pc, #44]	; (f2cc <hci_event_prio+0x94>)
    f2a0:	7838      	ldrb	r0, [r7, #0]
    f2a2:	f7fe fdb3 	bl	de0c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    f2a6:	07b3      	lsls	r3, r6, #30
    f2a8:	d507      	bpl.n	f2ba <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
    f2aa:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    f2ac:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    f2b0:	fa10 f585 	uxtah	r5, r0, r5
    f2b4:	60a5      	str	r5, [r4, #8]
}
    f2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    f2ba:	4620      	mov	r0, r4
}
    f2bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    f2c0:	f005 bae0 	b.w	14884 <net_buf_unref>
    f2c4:	0001fd53 	.word	0x0001fd53
    f2c8:	0001ea60 	.word	0x0001ea60
    f2cc:	0001dcd0 	.word	0x0001dcd0

0000f2d0 <bt_recv>:
{
    f2d0:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    f2d2:	7d02      	ldrb	r2, [r0, #20]
    f2d4:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
    f2d6:	2a01      	cmp	r2, #1
    f2d8:	d007      	beq.n	f2ea <bt_recv+0x1a>
    f2da:	2a03      	cmp	r2, #3
    f2dc:	d113      	bne.n	f306 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
    f2de:	480f      	ldr	r0, [pc, #60]	; (f31c <bt_recv+0x4c>)
    f2e0:	4629      	mov	r1, r5
    f2e2:	f005 faa1 	bl	14828 <net_buf_put>
		return 0;
    f2e6:	2000      	movs	r0, #0
    f2e8:	e00c      	b.n	f304 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f2ea:	6883      	ldr	r3, [r0, #8]
    f2ec:	7818      	ldrb	r0, [r3, #0]
    f2ee:	f00b fe48 	bl	1af82 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    f2f2:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f2f4:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    f2f6:	d502      	bpl.n	f2fe <bt_recv+0x2e>
			hci_event_prio(buf);
    f2f8:	4628      	mov	r0, r5
    f2fa:	f7ff ff9d 	bl	f238 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    f2fe:	f014 0002 	ands.w	r0, r4, #2
    f302:	d1ec      	bne.n	f2de <bt_recv+0xe>
}
    f304:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    f306:	2145      	movs	r1, #69	; 0x45
    f308:	4805      	ldr	r0, [pc, #20]	; (f320 <bt_recv+0x50>)
    f30a:	f00a fb2e 	bl	1996a <printk>
		net_buf_unref(buf);
    f30e:	4628      	mov	r0, r5
    f310:	f005 fab8 	bl	14884 <net_buf_unref>
		return -EINVAL;
    f314:	f06f 0015 	mvn.w	r0, #21
    f318:	e7f4      	b.n	f304 <bt_recv+0x34>
    f31a:	bf00      	nop
    f31c:	200080fc 	.word	0x200080fc
    f320:	000200c3 	.word	0x000200c3

0000f324 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    f324:	4a08      	ldr	r2, [pc, #32]	; (f348 <bt_hci_driver_register+0x24>)
{
    f326:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    f328:	f8d2 0134 	ldr.w	r0, [r2, #308]	; 0x134
    f32c:	b930      	cbnz	r0, f33c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    f32e:	68d9      	ldr	r1, [r3, #12]
    f330:	b139      	cbz	r1, f342 <bt_hci_driver_register+0x1e>
    f332:	6919      	ldr	r1, [r3, #16]
    f334:	b129      	cbz	r1, f342 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    f336:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	return 0;
    f33a:	4770      	bx	lr
		return -EALREADY;
    f33c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    f340:	4770      	bx	lr
		return -EINVAL;
    f342:	f06f 0015 	mvn.w	r0, #21
}
    f346:	4770      	bx	lr
    f348:	20008000 	.word	0x20008000

0000f34c <bt_finalize_init>:
{
    f34c:	b508      	push	{r3, lr}
    f34e:	2102      	movs	r1, #2
    f350:	4803      	ldr	r0, [pc, #12]	; (f360 <bt_finalize_init+0x14>)
    f352:	f00b fe3d 	bl	1afd0 <atomic_or>
}
    f356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    f35a:	2000      	movs	r0, #0
    f35c:	f7ff bb68 	b.w	ea30 <bt_le_scan_update>
    f360:	20008094 	.word	0x20008094

0000f364 <bt_init>:
{
    f364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f366:	4d60      	ldr	r5, [pc, #384]	; (f4e8 <bt_init+0x184>)
    f368:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    f36c:	6899      	ldr	r1, [r3, #8]
    f36e:	f011 0101 	ands.w	r1, r1, #1
    f372:	d11e      	bne.n	f3b2 <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    f374:	f640 4003 	movw	r0, #3075	; 0xc03
    f378:	aa01      	add	r2, sp, #4
    f37a:	f7fe fffb 	bl	e374 <bt_hci_cmd_send_sync>
		if (err) {
    f37e:	4604      	mov	r4, r0
    f380:	2800      	cmp	r0, #0
    f382:	f040 80ad 	bne.w	f4e0 <bt_init+0x17c>
	uint8_t status = buf->data[0];
    f386:	9b01      	ldr	r3, [sp, #4]
    f388:	689b      	ldr	r3, [r3, #8]
	if (status) {
    f38a:	781b      	ldrb	r3, [r3, #0]
    f38c:	b973      	cbnz	r3, f3ac <bt_init+0x48>
	scan_dev_found_cb = NULL;
    f38e:	4a57      	ldr	r2, [pc, #348]	; (f4ec <bt_init+0x188>)
    f390:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    f392:	f105 0394 	add.w	r3, r5, #148	; 0x94
    f396:	4618      	mov	r0, r3
    f398:	f00b fe14 	bl	1afc4 <atomic_get>
    f39c:	f000 0005 	and.w	r0, r0, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f3a0:	e8d3 2fef 	ldaex	r2, [r3]
    f3a4:	e8c3 0fe1 	stlex	r1, r0, [r3]
    f3a8:	2900      	cmp	r1, #0
    f3aa:	d1f9      	bne.n	f3a0 <bt_init+0x3c>
		net_buf_unref(rsp);
    f3ac:	9801      	ldr	r0, [sp, #4]
    f3ae:	f005 fa69 	bl	14884 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    f3b2:	2100      	movs	r1, #0
    f3b4:	f241 0003 	movw	r0, #4099	; 0x1003
    f3b8:	aa01      	add	r2, sp, #4
    f3ba:	f7fe ffdb 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    f3be:	4604      	mov	r4, r0
    f3c0:	2800      	cmp	r0, #0
    f3c2:	f040 808d 	bne.w	f4e0 <bt_init+0x17c>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    f3c6:	9b01      	ldr	r3, [sp, #4]
    f3c8:	2208      	movs	r2, #8
    f3ca:	6899      	ldr	r1, [r3, #8]
    f3cc:	4848      	ldr	r0, [pc, #288]	; (f4f0 <bt_init+0x18c>)
    f3ce:	3101      	adds	r1, #1
    f3d0:	f00b fd0b 	bl	1adea <memcpy>
	net_buf_unref(rsp);
    f3d4:	9801      	ldr	r0, [sp, #4]
    f3d6:	f005 fa55 	bl	14884 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    f3da:	4621      	mov	r1, r4
    f3dc:	f241 0001 	movw	r0, #4097	; 0x1001
    f3e0:	aa01      	add	r2, sp, #4
    f3e2:	f7fe ffc7 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    f3e6:	4604      	mov	r4, r0
    f3e8:	2800      	cmp	r0, #0
    f3ea:	d179      	bne.n	f4e0 <bt_init+0x17c>
	read_local_ver_complete(rsp);
    f3ec:	9801      	ldr	r0, [sp, #4]
    f3ee:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    f3f0:	785a      	ldrb	r2, [r3, #1]
    f3f2:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    f3f6:	78d9      	ldrb	r1, [r3, #3]
    f3f8:	789a      	ldrb	r2, [r3, #2]
    f3fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f3fe:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    f400:	791a      	ldrb	r2, [r3, #4]
    f402:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    f406:	7a19      	ldrb	r1, [r3, #8]
    f408:	79da      	ldrb	r2, [r3, #7]
    f40a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f40e:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    f410:	795a      	ldrb	r2, [r3, #5]
    f412:	799b      	ldrb	r3, [r3, #6]
    f414:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f418:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    f41a:	f005 fa33 	bl	14884 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    f41e:	4621      	mov	r1, r4
    f420:	f241 0002 	movw	r0, #4098	; 0x1002
    f424:	aa01      	add	r2, sp, #4
    f426:	f7fe ffa5 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    f42a:	4604      	mov	r4, r0
    f42c:	2800      	cmp	r0, #0
    f42e:	d157      	bne.n	f4e0 <bt_init+0x17c>
	memcpy(bt_dev.supported_commands, rp->commands,
    f430:	9b01      	ldr	r3, [sp, #4]
    f432:	2240      	movs	r2, #64	; 0x40
    f434:	6899      	ldr	r1, [r3, #8]
    f436:	482f      	ldr	r0, [pc, #188]	; (f4f4 <bt_init+0x190>)
    f438:	3101      	adds	r1, #1
    f43a:	f00b fcd6 	bl	1adea <memcpy>
	net_buf_unref(rsp);
    f43e:	9801      	ldr	r0, [sp, #4]
    f440:	f005 fa20 	bl	14884 <net_buf_unref>
		err = prng_init();
    f444:	f000 fed6 	bl	101f4 <prng_init>
		if (err) {
    f448:	4604      	mov	r4, r0
    f44a:	2800      	cmp	r0, #0
    f44c:	d148      	bne.n	f4e0 <bt_init+0x17c>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    f44e:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
    f452:	069f      	lsls	r7, r3, #26
    f454:	d40e      	bmi.n	f474 <bt_init+0x110>
		BT_WARN("Controller to host flow control not supported");
    f456:	2157      	movs	r1, #87	; 0x57
    f458:	4827      	ldr	r0, [pc, #156]	; (f4f8 <bt_init+0x194>)
    f45a:	f00a fa86 	bl	1996a <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
    f45e:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    f462:	065e      	lsls	r6, r3, #25
    f464:	d44c      	bmi.n	f500 <bt_init+0x19c>
		BT_ERR("Non-LE capable controller detected!");
    f466:	2145      	movs	r1, #69	; 0x45
    f468:	4824      	ldr	r0, [pc, #144]	; (f4fc <bt_init+0x198>)
    f46a:	f00a fa7e 	bl	1996a <printk>
		return -ENODEV;
    f46e:	f06f 0412 	mvn.w	r4, #18
    f472:	e035      	b.n	f4e0 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    f474:	2107      	movs	r1, #7
    f476:	f640 4033 	movw	r0, #3123	; 0xc33
    f47a:	f7fe ff31 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
    f47e:	4607      	mov	r7, r0
    f480:	b910      	cbnz	r0, f488 <bt_init+0x124>
		return -ENOBUFS;
    f482:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f486:	e02b      	b.n	f4e0 <bt_init+0x17c>
	return net_buf_simple_add(&buf->b, len);
    f488:	2107      	movs	r1, #7
    f48a:	3008      	adds	r0, #8
    f48c:	f005 fb10 	bl	14ab0 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    f490:	4621      	mov	r1, r4
    f492:	2207      	movs	r2, #7
    f494:	4606      	mov	r6, r0
    f496:	f00b fcd3 	bl	1ae40 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    f49a:	231b      	movs	r3, #27
    f49c:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    f49e:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f4a0:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    f4a2:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    f4a4:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f4a6:	4639      	mov	r1, r7
    f4a8:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    f4ac:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f4ae:	f7fe ff61 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    f4b2:	4604      	mov	r4, r0
    f4b4:	b9a0      	cbnz	r0, f4e0 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    f4b6:	2101      	movs	r1, #1
    f4b8:	f640 4031 	movw	r0, #3121	; 0xc31
    f4bc:	f7fe ff10 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
    f4c0:	4606      	mov	r6, r0
    f4c2:	2800      	cmp	r0, #0
    f4c4:	d0dd      	beq.n	f482 <bt_init+0x11e>
	return net_buf_simple_add_u8(&buf->b, val);
    f4c6:	2101      	movs	r1, #1
    f4c8:	3008      	adds	r0, #8
    f4ca:	f00c ff9c 	bl	1c406 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    f4ce:	4622      	mov	r2, r4
    f4d0:	4631      	mov	r1, r6
    f4d2:	f640 4031 	movw	r0, #3121	; 0xc31
    f4d6:	f7fe ff4d 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    f4da:	4604      	mov	r4, r0
    f4dc:	2800      	cmp	r0, #0
    f4de:	d0be      	beq.n	f45e <bt_init+0xfa>
}
    f4e0:	4620      	mov	r0, r4
    f4e2:	b003      	add	sp, #12
    f4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4e6:	bf00      	nop
    f4e8:	20008000 	.word	0x20008000
    f4ec:	2000a964 	.word	0x2000a964
    f4f0:	2000803c 	.word	0x2000803c
    f4f4:	20008044 	.word	0x20008044
    f4f8:	000200dc 	.word	0x000200dc
    f4fc:	0002010f 	.word	0x0002010f
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    f500:	2100      	movs	r1, #0
    f502:	f242 0003 	movw	r0, #8195	; 0x2003
    f506:	aa01      	add	r2, sp, #4
    f508:	f7fe ff34 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    f50c:	4604      	mov	r4, r0
    f50e:	2800      	cmp	r0, #0
    f510:	d1e6      	bne.n	f4e0 <bt_init+0x17c>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    f512:	9b01      	ldr	r3, [sp, #4]
    f514:	2208      	movs	r2, #8
    f516:	6899      	ldr	r1, [r3, #8]
    f518:	48a6      	ldr	r0, [pc, #664]	; (f7b4 <bt_init+0x450>)
    f51a:	3101      	adds	r1, #1
    f51c:	f00b fc65 	bl	1adea <memcpy>
	net_buf_unref(rsp);
    f520:	9801      	ldr	r0, [sp, #4]
    f522:	f005 f9af 	bl	14884 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    f526:	4621      	mov	r1, r4
    f528:	f242 0002 	movw	r0, #8194	; 0x2002
    f52c:	aa01      	add	r2, sp, #4
    f52e:	f7fe ff21 	bl	e374 <bt_hci_cmd_send_sync>
		if (err) {
    f532:	4604      	mov	r4, r0
    f534:	2800      	cmp	r0, #0
    f536:	d1d3      	bne.n	f4e0 <bt_init+0x17c>
		le_read_buffer_size_complete(rsp);
    f538:	9b01      	ldr	r3, [sp, #4]
    f53a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    f53c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f540:	b291      	uxth	r1, r2
    f542:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
    f546:	b121      	cbz	r1, f552 <bt_init+0x1ee>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    f548:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    f54a:	489b      	ldr	r0, [pc, #620]	; (f7b8 <bt_init+0x454>)
    f54c:	4611      	mov	r1, r2
    f54e:	f00d fde1 	bl	1d114 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    f552:	9801      	ldr	r0, [sp, #4]
    f554:	f005 f996 	bl	14884 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f558:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    f55c:	f016 0620 	ands.w	r6, r6, #32
    f560:	f000 80d4 	beq.w	f70c <bt_init+0x3a8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    f564:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    f568:	071c      	lsls	r4, r3, #28
    f56a:	d512      	bpl.n	f592 <bt_init+0x22e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    f56c:	2100      	movs	r1, #0
    f56e:	f242 001c 	movw	r0, #8220	; 0x201c
    f572:	aa01      	add	r2, sp, #4
    f574:	f7fe fefe 	bl	e374 <bt_hci_cmd_send_sync>
		if (err) {
    f578:	4604      	mov	r4, r0
    f57a:	2800      	cmp	r0, #0
    f57c:	d1b0      	bne.n	f4e0 <bt_init+0x17c>
		le_read_supp_states_complete(rsp);
    f57e:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    f580:	6883      	ldr	r3, [r0, #8]
    f582:	f8d3 2001 	ldr.w	r2, [r3, #1]
    f586:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    f58a:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    f58e:	f005 f979 	bl	14884 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    f592:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    f596:	0698      	lsls	r0, r3, #26
    f598:	d524      	bpl.n	f5e4 <bt_init+0x280>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    f59a:	4668      	mov	r0, sp
    f59c:	f10d 0102 	add.w	r1, sp, #2
    f5a0:	f7fe ff4a 	bl	e438 <hci_le_read_max_data_len>
		if (err) {
    f5a4:	4604      	mov	r4, r0
    f5a6:	2800      	cmp	r0, #0
    f5a8:	d19a      	bne.n	f4e0 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f5aa:	2104      	movs	r1, #4
    f5ac:	f242 0024 	movw	r0, #8228	; 0x2024
    f5b0:	f7fe fe96 	bl	e2e0 <bt_hci_cmd_create>
		if (!buf) {
    f5b4:	4606      	mov	r6, r0
    f5b6:	2800      	cmp	r0, #0
    f5b8:	f43f af63 	beq.w	f482 <bt_init+0x11e>
	return net_buf_simple_add(&buf->b, len);
    f5bc:	2104      	movs	r1, #4
    f5be:	3008      	adds	r0, #8
    f5c0:	f005 fa76 	bl	14ab0 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f5c4:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f5c8:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f5ca:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    f5cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f5d0:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    f5d2:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f5d4:	f242 0024 	movw	r0, #8228	; 0x2024
    f5d8:	f7fe fecc 	bl	e374 <bt_hci_cmd_send_sync>
		if (err) {
    f5dc:	4604      	mov	r4, r0
    f5de:	2800      	cmp	r0, #0
    f5e0:	f47f af7e 	bne.w	f4e0 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    f5e4:	2108      	movs	r1, #8
    f5e6:	f242 0001 	movw	r0, #8193	; 0x2001
    f5ea:	f7fe fe79 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
    f5ee:	4604      	mov	r4, r0
    f5f0:	2800      	cmp	r0, #0
    f5f2:	f43f af46 	beq.w	f482 <bt_init+0x11e>
    f5f6:	2108      	movs	r1, #8
    f5f8:	4408      	add	r0, r1
    f5fa:	f005 fa59 	bl	14ab0 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    f5fe:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    f602:	f012 0f02 	tst.w	r2, #2
    f606:	bf14      	ite	ne
    f608:	232f      	movne	r3, #47	; 0x2f
    f60a:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    f60c:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f60e:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    f612:	bf48      	it	mi
    f614:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f618:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
    f61c:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    f620:	bf18      	it	ne
    f622:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
    f626:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    f628:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    f62c:	4621      	mov	r1, r4
    f62e:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    f630:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    f632:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    f634:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    f636:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    f638:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    f63a:	71c2      	strb	r2, [r0, #7]
    f63c:	f242 0001 	movw	r0, #8193	; 0x2001
    f640:	f7fe fe98 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    f644:	4604      	mov	r4, r0
    f646:	2800      	cmp	r0, #0
    f648:	f47f af4a 	bne.w	f4e0 <bt_init+0x17c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f64c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    f650:	069a      	lsls	r2, r3, #26
    f652:	d41e      	bmi.n	f692 <bt_init+0x32e>
	if (bt_dev.le.acl_mtu) {
    f654:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    f658:	b9d9      	cbnz	r1, f692 <bt_init+0x32e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    f65a:	f241 0005 	movw	r0, #4101	; 0x1005
    f65e:	aa01      	add	r2, sp, #4
    f660:	f7fe fe88 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    f664:	4604      	mov	r4, r0
    f666:	2800      	cmp	r0, #0
    f668:	f47f af3a 	bne.w	f4e0 <bt_init+0x17c>
	if (bt_dev.le.acl_mtu) {
    f66c:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    f670:	b963      	cbnz	r3, f68c <bt_init+0x328>
    f672:	9b01      	ldr	r3, [sp, #4]
    f674:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    f676:	785a      	ldrb	r2, [r3, #1]
    f678:	7899      	ldrb	r1, [r3, #2]
    f67a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f67e:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    f682:	889a      	ldrh	r2, [r3, #4]
    f684:	484c      	ldr	r0, [pc, #304]	; (f7b8 <bt_init+0x454>)
    f686:	4611      	mov	r1, r2
    f688:	f00d fd44 	bl	1d114 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    f68c:	9801      	ldr	r0, [sp, #4]
    f68e:	f005 f8f9 	bl	14884 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    f692:	2108      	movs	r1, #8
    f694:	f640 4001 	movw	r0, #3073	; 0xc01
    f698:	f7fe fe22 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
    f69c:	4604      	mov	r4, r0
    f69e:	2800      	cmp	r0, #0
    f6a0:	f43f aeef 	beq.w	f482 <bt_init+0x11e>
    f6a4:	2108      	movs	r1, #8
    f6a6:	4408      	add	r0, r1
    f6a8:	f005 fa02 	bl	14ab0 <net_buf_simple_add>
	dst[0] = val;
    f6ac:	2310      	movs	r3, #16
    f6ae:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    f6b0:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    f6b2:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    f6b4:	7043      	strb	r3, [r0, #1]
    f6b6:	2602      	movs	r6, #2
    f6b8:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    f6ba:	4621      	mov	r1, r4
	dst[0] = val;
    f6bc:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    f6be:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    f6c0:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    f6c2:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    f6c4:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    f6c6:	71c3      	strb	r3, [r0, #7]
    f6c8:	f640 4001 	movw	r0, #3073	; 0xc01
    f6cc:	f7fe fe52 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    f6d0:	4604      	mov	r4, r0
    f6d2:	2800      	cmp	r0, #0
    f6d4:	f47f af04 	bne.w	f4e0 <bt_init+0x17c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    f6d8:	4601      	mov	r1, r0
    f6da:	aa01      	add	r2, sp, #4
    f6dc:	f64f 4001 	movw	r0, #64513	; 0xfc01
    f6e0:	f7fe fe48 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    f6e4:	4604      	mov	r4, r0
    f6e6:	b360      	cbz	r0, f742 <bt_init+0x3de>
		BT_WARN("Vendor HCI extensions not available");
    f6e8:	2157      	movs	r1, #87	; 0x57
    f6ea:	4834      	ldr	r0, [pc, #208]	; (f7bc <bt_init+0x458>)
			BT_WARN("Failed to read supported vendor features");
    f6ec:	f00a f93d 	bl	1996a <printk>
		err = bt_conn_init();
    f6f0:	f001 fcd0 	bl	11094 <bt_conn_init>
		if (err) {
    f6f4:	4604      	mov	r4, r0
    f6f6:	2800      	cmp	r0, #0
    f6f8:	f47f aef2 	bne.w	f4e0 <bt_init+0x17c>
		if (!bt_dev.id_count) {
    f6fc:	79eb      	ldrb	r3, [r5, #7]
    f6fe:	2b00      	cmp	r3, #0
    f700:	d150      	bne.n	f7a4 <bt_init+0x440>
			BT_INFO("No ID address. App must call settings_load()");
    f702:	2149      	movs	r1, #73	; 0x49
    f704:	482e      	ldr	r0, [pc, #184]	; (f7c0 <bt_init+0x45c>)
    f706:	f00a f930 	bl	1996a <printk>
			return 0;
    f70a:	e6e9      	b.n	f4e0 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    f70c:	2102      	movs	r1, #2
    f70e:	f640 406d 	movw	r0, #3181	; 0xc6d
    f712:	f7fe fde5 	bl	e2e0 <bt_hci_cmd_create>
		if (!buf) {
    f716:	4604      	mov	r4, r0
    f718:	2800      	cmp	r0, #0
    f71a:	f43f aeb2 	beq.w	f482 <bt_init+0x11e>
    f71e:	2102      	movs	r1, #2
    f720:	3008      	adds	r0, #8
    f722:	f005 f9c5 	bl	14ab0 <net_buf_simple_add>
		cp_le->le = 0x01;
    f726:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f728:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    f72a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    f72c:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f72e:	4632      	mov	r2, r6
    f730:	f640 406d 	movw	r0, #3181	; 0xc6d
    f734:	f7fe fe1e 	bl	e374 <bt_hci_cmd_send_sync>
		if (err) {
    f738:	4604      	mov	r4, r0
    f73a:	2800      	cmp	r0, #0
    f73c:	f43f af12 	beq.w	f564 <bt_init+0x200>
    f740:	e6ce      	b.n	f4e0 <bt_init+0x17c>
	net_buf_unref(rsp);
    f742:	9801      	ldr	r0, [sp, #4]
    f744:	f005 f89e 	bl	14884 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    f748:	4621      	mov	r1, r4
    f74a:	f64f 4002 	movw	r0, #64514	; 0xfc02
    f74e:	aa01      	add	r2, sp, #4
    f750:	f7fe fe10 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    f754:	4604      	mov	r4, r0
    f756:	b110      	cbz	r0, f75e <bt_init+0x3fa>
		BT_WARN("Failed to read supported vendor commands");
    f758:	2157      	movs	r1, #87	; 0x57
    f75a:	481a      	ldr	r0, [pc, #104]	; (f7c4 <bt_init+0x460>)
    f75c:	e7c6      	b.n	f6ec <bt_init+0x388>
	rp.cmds = (void *)rsp->data;
    f75e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    f760:	4632      	mov	r2, r6
    f762:	6899      	ldr	r1, [r3, #8]
    f764:	4818      	ldr	r0, [pc, #96]	; (f7c8 <bt_init+0x464>)
    f766:	3101      	adds	r1, #1
    f768:	f00b fb3f 	bl	1adea <memcpy>
	net_buf_unref(rsp);
    f76c:	9801      	ldr	r0, [sp, #4]
    f76e:	f005 f889 	bl	14884 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    f772:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    f776:	075b      	lsls	r3, r3, #29
    f778:	d5ba      	bpl.n	f6f0 <bt_init+0x38c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    f77a:	4621      	mov	r1, r4
    f77c:	f64f 4003 	movw	r0, #64515	; 0xfc03
    f780:	aa01      	add	r2, sp, #4
    f782:	f7fe fdf7 	bl	e374 <bt_hci_cmd_send_sync>
		if (err) {
    f786:	b110      	cbz	r0, f78e <bt_init+0x42a>
			BT_WARN("Failed to read supported vendor features");
    f788:	2157      	movs	r1, #87	; 0x57
    f78a:	4810      	ldr	r0, [pc, #64]	; (f7cc <bt_init+0x468>)
    f78c:	e7ae      	b.n	f6ec <bt_init+0x388>
		memcpy(bt_dev.vs_features, rp.feat->features,
    f78e:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    f790:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    f792:	480f      	ldr	r0, [pc, #60]	; (f7d0 <bt_init+0x46c>)
    f794:	6899      	ldr	r1, [r3, #8]
    f796:	4411      	add	r1, r2
    f798:	f00b fb27 	bl	1adea <memcpy>
		net_buf_unref(rsp);
    f79c:	9801      	ldr	r0, [sp, #4]
    f79e:	f005 f871 	bl	14884 <net_buf_unref>
    f7a2:	e7a5      	b.n	f6f0 <bt_init+0x38c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f7a4:	2104      	movs	r1, #4
    f7a6:	480b      	ldr	r0, [pc, #44]	; (f7d4 <bt_init+0x470>)
    f7a8:	f00b fc12 	bl	1afd0 <atomic_or>
	bt_finalize_init();
    f7ac:	f7ff fdce 	bl	f34c <bt_finalize_init>
	return 0;
    f7b0:	e696      	b.n	f4e0 <bt_init+0x17c>
    f7b2:	bf00      	nop
    f7b4:	20008098 	.word	0x20008098
    f7b8:	200080c8 	.word	0x200080c8
    f7bc:	00020138 	.word	0x00020138
    f7c0:	000201bd 	.word	0x000201bd
    f7c4:	00020161 	.word	0x00020161
    f7c8:	20008085 	.word	0x20008085
    f7cc:	0002018f 	.word	0x0002018f
    f7d0:	20008084 	.word	0x20008084
    f7d4:	20008094 	.word	0x20008094

0000f7d8 <init_work>:
{
    f7d8:	b510      	push	{r4, lr}
	err = bt_init();
    f7da:	f7ff fdc3 	bl	f364 <bt_init>
	if (ready_cb) {
    f7de:	4b03      	ldr	r3, [pc, #12]	; (f7ec <init_work+0x14>)
    f7e0:	681b      	ldr	r3, [r3, #0]
    f7e2:	b113      	cbz	r3, f7ea <init_work+0x12>
}
    f7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    f7e8:	4718      	bx	r3
}
    f7ea:	bd10      	pop	{r4, pc}
    f7ec:	2000a958 	.word	0x2000a958

0000f7f0 <bt_enable>:
{
    f7f0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
    f7f4:	4d35      	ldr	r5, [pc, #212]	; (f8cc <bt_enable+0xdc>)
{
    f7f6:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    f7f8:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
{
    f7fc:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
    f7fe:	b94b      	cbnz	r3, f814 <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
    f800:	2145      	movs	r1, #69	; 0x45
    f802:	4833      	ldr	r0, [pc, #204]	; (f8d0 <bt_enable+0xe0>)
    f804:	f00a f8b1 	bl	1996a <printk>
		return -ENODEV;
    f808:	f06f 0412 	mvn.w	r4, #18
}
    f80c:	4620      	mov	r0, r4
    f80e:	b008      	add	sp, #32
    f810:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    f814:	2101      	movs	r1, #1
    f816:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f81a:	f00b fbd9 	bl	1afd0 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    f81e:	07c2      	lsls	r2, r0, #31
    f820:	d451      	bmi.n	f8c6 <bt_enable+0xd6>
		err = bt_settings_init();
    f822:	f7fe f913 	bl	da4c <bt_settings_init>
		if (err) {
    f826:	4604      	mov	r4, r0
    f828:	2800      	cmp	r0, #0
    f82a:	d1ef      	bne.n	f80c <bt_enable+0x1c>
	ready_cb = cb;
    f82c:	4b29      	ldr	r3, [pc, #164]	; (f8d4 <bt_enable+0xe4>)
    f82e:	f04f 0800 	mov.w	r8, #0
    f832:	f04f 0900 	mov.w	r9, #0
    f836:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f838:	f06f 0308 	mvn.w	r3, #8
    f83c:	e9cd 0000 	strd	r0, r0, [sp]
    f840:	e9cd 0302 	strd	r0, r3, [sp, #8]
    f844:	9004      	str	r0, [sp, #16]
    f846:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f84a:	e9cd 8906 	strd	r8, r9, [sp, #24]
    f84e:	4b22      	ldr	r3, [pc, #136]	; (f8d8 <bt_enable+0xe8>)
    f850:	4922      	ldr	r1, [pc, #136]	; (f8dc <bt_enable+0xec>)
    f852:	4823      	ldr	r0, [pc, #140]	; (f8e0 <bt_enable+0xf0>)
    f854:	f008 ffdc 	bl	18810 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    f858:	4922      	ldr	r1, [pc, #136]	; (f8e4 <bt_enable+0xf4>)
    f85a:	4821      	ldr	r0, [pc, #132]	; (f8e0 <bt_enable+0xf0>)
    f85c:	f00d fc74 	bl	1d148 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f860:	f06f 0307 	mvn.w	r3, #7
    f864:	f640 0298 	movw	r2, #2200	; 0x898
    f868:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f86c:	e9cd 8906 	strd	r8, r9, [sp, #24]
    f870:	e9cd 4400 	strd	r4, r4, [sp]
    f874:	4b1c      	ldr	r3, [pc, #112]	; (f8e8 <bt_enable+0xf8>)
    f876:	491d      	ldr	r1, [pc, #116]	; (f8ec <bt_enable+0xfc>)
    f878:	9404      	str	r4, [sp, #16]
    f87a:	481d      	ldr	r0, [pc, #116]	; (f8f0 <bt_enable+0x100>)
    f87c:	f008 ffc8 	bl	18810 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    f880:	491c      	ldr	r1, [pc, #112]	; (f8f4 <bt_enable+0x104>)
    f882:	481b      	ldr	r0, [pc, #108]	; (f8f0 <bt_enable+0x100>)
    f884:	f00d fc60 	bl	1d148 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    f888:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    f88c:	68db      	ldr	r3, [r3, #12]
    f88e:	4798      	blx	r3
	if (err) {
    f890:	4604      	mov	r4, r0
    f892:	b128      	cbz	r0, f8a0 <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
    f894:	4602      	mov	r2, r0
    f896:	2145      	movs	r1, #69	; 0x45
    f898:	4817      	ldr	r0, [pc, #92]	; (f8f8 <bt_enable+0x108>)
    f89a:	f00a f866 	bl	1996a <printk>
		return err;
    f89e:	e7b5      	b.n	f80c <bt_enable+0x1c>
	if (!cb) {
    f8a0:	b926      	cbnz	r6, f8ac <bt_enable+0xbc>
}
    f8a2:	b008      	add	sp, #32
    f8a4:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
    f8a8:	f7ff bd5c 	b.w	f364 <bt_init>
    f8ac:	2101      	movs	r1, #1
    f8ae:	f105 0090 	add.w	r0, r5, #144	; 0x90
    f8b2:	f00b fb8d 	bl	1afd0 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    f8b6:	07c3      	lsls	r3, r0, #31
    f8b8:	d4a8      	bmi.n	f80c <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
    f8ba:	4810      	ldr	r0, [pc, #64]	; (f8fc <bt_enable+0x10c>)
    f8bc:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f8c0:	f00d fbd0 	bl	1d064 <k_queue_append>
    f8c4:	e7a2      	b.n	f80c <bt_enable+0x1c>
		return -EALREADY;
    f8c6:	f06f 0444 	mvn.w	r4, #68	; 0x44
    f8ca:	e79f      	b.n	f80c <bt_enable+0x1c>
    f8cc:	20008000 	.word	0x20008000
    f8d0:	000201ef 	.word	0x000201ef
    f8d4:	2000a958 	.word	0x2000a958
    f8d8:	0000f0e1 	.word	0x0000f0e1
    f8dc:	2000d6a8 	.word	0x2000d6a8
    f8e0:	20008990 	.word	0x20008990
    f8e4:	0002020d 	.word	0x0002020d
    f8e8:	0000def9 	.word	0x0000def9
    f8ec:	2000ce10 	.word	0x2000ce10
    f8f0:	20008900 	.word	0x20008900
    f8f4:	00020213 	.word	0x00020213
    f8f8:	00020219 	.word	0x00020219
    f8fc:	2000a3b0 	.word	0x2000a3b0

0000f900 <bt_get_name>:
}
    f900:	4800      	ldr	r0, [pc, #0]	; (f904 <bt_get_name+0x4>)
    f902:	4770      	bx	lr
    f904:	0001e8af 	.word	0x0001e8af

0000f908 <bt_id_create>:
{
    f908:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f90a:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    f90c:	4605      	mov	r5, r0
    f90e:	b918      	cbnz	r0, f918 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    f910:	b314      	cbz	r4, f958 <bt_id_create+0x50>
		return -EINVAL;
    f912:	f06f 0415 	mvn.w	r4, #21
    f916:	e01c      	b.n	f952 <bt_id_create+0x4a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    f918:	2300      	movs	r3, #0
    f91a:	4669      	mov	r1, sp
    f91c:	9300      	str	r3, [sp, #0]
    f91e:	f8cd 3003 	str.w	r3, [sp, #3]
    f922:	f00b fb60 	bl	1afe6 <bt_addr_le_cmp>
    f926:	2800      	cmp	r0, #0
    f928:	d0f2      	beq.n	f910 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    f92a:	782b      	ldrb	r3, [r5, #0]
    f92c:	2b01      	cmp	r3, #1
    f92e:	d104      	bne.n	f93a <bt_id_create+0x32>
    f930:	79ab      	ldrb	r3, [r5, #6]
    f932:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f936:	2bc0      	cmp	r3, #192	; 0xc0
    f938:	d004      	beq.n	f944 <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
    f93a:	2145      	movs	r1, #69	; 0x45
    f93c:	480d      	ldr	r0, [pc, #52]	; (f974 <bt_id_create+0x6c>)
    f93e:	f00a f814 	bl	1996a <printk>
			return -EINVAL;
    f942:	e7e6      	b.n	f912 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    f944:	4628      	mov	r0, r5
    f946:	f7fe f949 	bl	dbdc <id_find>
    f94a:	2800      	cmp	r0, #0
    f94c:	dbe0      	blt.n	f910 <bt_id_create+0x8>
			return -EALREADY;
    f94e:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    f952:	4620      	mov	r0, r4
    f954:	b003      	add	sp, #12
    f956:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    f958:	4b07      	ldr	r3, [pc, #28]	; (f978 <bt_id_create+0x70>)
    f95a:	79dc      	ldrb	r4, [r3, #7]
    f95c:	2c01      	cmp	r4, #1
    f95e:	d006      	beq.n	f96e <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
    f960:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    f962:	4629      	mov	r1, r5
    f964:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    f966:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    f968:	f7fe fa90 	bl	de8c <id_create.constprop.0>
	return new_id;
    f96c:	e7f1      	b.n	f952 <bt_id_create+0x4a>
		return -ENOMEM;
    f96e:	f06f 040b 	mvn.w	r4, #11
    f972:	e7ee      	b.n	f952 <bt_id_create+0x4a>
    f974:	0002023a 	.word	0x0002023a
    f978:	20008000 	.word	0x20008000

0000f97c <bt_setup_public_id_addr>:
{
    f97c:	b570      	push	{r4, r5, r6, lr}
    f97e:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    f980:	2100      	movs	r1, #0
    f982:	f241 0009 	movw	r0, #4105	; 0x1009
    f986:	aa01      	add	r2, sp, #4
    f988:	f7fe fcf4 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    f98c:	4e1d      	ldr	r6, [pc, #116]	; (fa04 <bt_setup_public_id_addr+0x88>)
    f98e:	4604      	mov	r4, r0
    f990:	b138      	cbz	r0, f9a2 <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
    f992:	2157      	movs	r1, #87	; 0x57
    f994:	481c      	ldr	r0, [pc, #112]	; (fa08 <bt_setup_public_id_addr+0x8c>)
    f996:	f009 ffe8 	bl	1996a <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
    f99a:	2300      	movs	r3, #0
    f99c:	71f3      	strb	r3, [r6, #7]
}
    f99e:	b006      	add	sp, #24
    f9a0:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    f9a2:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    f9a4:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    f9a6:	689d      	ldr	r5, [r3, #8]
    f9a8:	a904      	add	r1, sp, #16
    f9aa:	3501      	adds	r5, #1
    f9ac:	9004      	str	r0, [sp, #16]
    f9ae:	f8ad 0014 	strh.w	r0, [sp, #20]
    f9b2:	4628      	mov	r0, r5
    f9b4:	f00b fa08 	bl	1adc8 <memcmp>
    f9b8:	b918      	cbnz	r0, f9c2 <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
    f9ba:	9801      	ldr	r0, [sp, #4]
    f9bc:	f004 ff62 	bl	14884 <net_buf_unref>
    f9c0:	e7eb      	b.n	f99a <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    f9c2:	4b12      	ldr	r3, [pc, #72]	; (fa0c <bt_setup_public_id_addr+0x90>)
    f9c4:	2206      	movs	r2, #6
    f9c6:	f8d3 0007 	ldr.w	r0, [r3, #7]
    f9ca:	f8b3 300b 	ldrh.w	r3, [r3, #11]
    f9ce:	9002      	str	r0, [sp, #8]
    f9d0:	a902      	add	r1, sp, #8
    f9d2:	4628      	mov	r0, r5
    f9d4:	f8ad 300c 	strh.w	r3, [sp, #12]
    f9d8:	f00b f9f6 	bl	1adc8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    f9dc:	2800      	cmp	r0, #0
    f9de:	d0ec      	beq.n	f9ba <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
    f9e0:	4629      	mov	r1, r5
    f9e2:	2206      	movs	r2, #6
    f9e4:	f10d 0011 	add.w	r0, sp, #17
    f9e8:	f00b f9ff 	bl	1adea <memcpy>
	net_buf_unref(rsp);
    f9ec:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    f9ee:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    f9f2:	f004 ff47 	bl	14884 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    f9f6:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    f9f8:	4620      	mov	r0, r4
    f9fa:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
    f9fc:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    f9fe:	f7fe fa45 	bl	de8c <id_create.constprop.0>
    fa02:	e7cc      	b.n	f99e <bt_setup_public_id_addr+0x22>
    fa04:	20008000 	.word	0x20008000
    fa08:	0002026d 	.word	0x0002026d
    fa0c:	0001d850 	.word	0x0001d850

0000fa10 <bt_read_static_addr>:
{
    fa10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    fa14:	4b1c      	ldr	r3, [pc, #112]	; (fa88 <bt_read_static_addr+0x78>)
{
    fa16:	4607      	mov	r7, r0
    fa18:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    fa1c:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    fa1e:	f014 0401 	ands.w	r4, r4, #1
    fa22:	d104      	bne.n	fa2e <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
    fa24:	2157      	movs	r1, #87	; 0x57
    fa26:	4819      	ldr	r0, [pc, #100]	; (fa8c <bt_read_static_addr+0x7c>)
		BT_WARN("No static addresses stored in controller");
    fa28:	f009 ff9f 	bl	1996a <printk>
    fa2c:	e00c      	b.n	fa48 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    fa2e:	2100      	movs	r1, #0
    fa30:	f64f 4009 	movw	r0, #64521	; 0xfc09
    fa34:	aa01      	add	r2, sp, #4
    fa36:	f7fe fc9d 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    fa3a:	4605      	mov	r5, r0
    fa3c:	b140      	cbz	r0, fa50 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
    fa3e:	2157      	movs	r1, #87	; 0x57
    fa40:	4813      	ldr	r0, [pc, #76]	; (fa90 <bt_read_static_addr+0x80>)
    fa42:	f009 ff92 	bl	1996a <printk>
		return 0;
    fa46:	2400      	movs	r4, #0
}
    fa48:	4620      	mov	r0, r4
    fa4a:	b002      	add	sp, #8
    fa4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    fa50:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
    fa54:	9b01      	ldr	r3, [sp, #4]
    fa56:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    fa58:	785c      	ldrb	r4, [r3, #1]
    fa5a:	42b4      	cmp	r4, r6
    fa5c:	bf28      	it	cs
    fa5e:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    fa60:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    fa62:	42a5      	cmp	r5, r4
    fa64:	db07      	blt.n	fa76 <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
    fa66:	9801      	ldr	r0, [sp, #4]
    fa68:	f004 ff0c 	bl	14884 <net_buf_unref>
	if (!cnt) {
    fa6c:	2c00      	cmp	r4, #0
    fa6e:	d1eb      	bne.n	fa48 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
    fa70:	2157      	movs	r1, #87	; 0x57
    fa72:	4808      	ldr	r0, [pc, #32]	; (fa94 <bt_read_static_addr+0x84>)
    fa74:	e7d8      	b.n	fa28 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    fa76:	fb08 7005 	mla	r0, r8, r5, r7
    fa7a:	2216      	movs	r2, #22
    fa7c:	4631      	mov	r1, r6
    fa7e:	f00b f9b4 	bl	1adea <memcpy>
	for (i = 0; i < cnt; i++) {
    fa82:	3501      	adds	r5, #1
    fa84:	e7ed      	b.n	fa62 <bt_read_static_addr+0x52>
    fa86:	bf00      	nop
    fa88:	20008000 	.word	0x20008000
    fa8c:	00020290 	.word	0x00020290
    fa90:	000202c1 	.word	0x000202c1
    fa94:	000202e6 	.word	0x000202e6

0000fa98 <bt_setup_random_id_addr>:
{
    fa98:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
    fa9a:	4d15      	ldr	r5, [pc, #84]	; (faf0 <bt_setup_random_id_addr+0x58>)
{
    fa9c:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    fa9e:	79ec      	ldrb	r4, [r5, #7]
    faa0:	b9f4      	cbnz	r4, fae0 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    faa2:	2101      	movs	r1, #1
    faa4:	a802      	add	r0, sp, #8
    faa6:	f7ff ffb3 	bl	fa10 <bt_read_static_addr>
    faaa:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    faac:	b1c0      	cbz	r0, fae0 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    faae:	2716      	movs	r7, #22
    fab0:	b2e6      	uxtb	r6, r4
    fab2:	ab02      	add	r3, sp, #8
    fab4:	2206      	movs	r2, #6
    fab6:	fb07 3106 	mla	r1, r7, r6, r3
    faba:	f10d 0001 	add.w	r0, sp, #1
    fabe:	f00b f994 	bl	1adea <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    fac2:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    fac4:	4669      	mov	r1, sp
    fac6:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    fac8:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    facc:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
    face:	f7fe f9dd 	bl	de8c <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    fad2:	79ea      	ldrb	r2, [r5, #7]
    fad4:	b2e3      	uxtb	r3, r4
    fad6:	429a      	cmp	r2, r3
    fad8:	d8ea      	bhi.n	fab0 <bt_setup_random_id_addr+0x18>
}
    fada:	2000      	movs	r0, #0
    fadc:	b009      	add	sp, #36	; 0x24
    fade:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    fae0:	2100      	movs	r1, #0
    fae2:	4608      	mov	r0, r1
}
    fae4:	b009      	add	sp, #36	; 0x24
    fae6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    faea:	f7ff bf0d 	b.w	f908 <bt_id_create>
    faee:	bf00      	nop
    faf0:	20008000 	.word	0x20008000

0000faf4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    faf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    faf8:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
    fafa:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    fafc:	690d      	ldr	r5, [r1, #16]
{
    fafe:	b08f      	sub	sp, #60	; 0x3c
	bool dir_adv = (param->peer != NULL), scannable;
    fb00:	ebb5 0b03 	subs.w	fp, r5, r3
{
    fb04:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fb06:	4884      	ldr	r0, [pc, #528]	; (fd18 <bt_le_adv_start_legacy+0x224>)
	bool dir_adv = (param->peer != NULL), scannable;
    fb08:	bf18      	it	ne
    fb0a:	f04f 0b01 	movne.w	fp, #1
	struct bt_conn *conn = NULL;
    fb0e:	9307      	str	r3, [sp, #28]
    fb10:	f00b fa58 	bl	1afc4 <atomic_get>
{
    fb14:	4691      	mov	r9, r2
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fb16:	0782      	lsls	r2, r0, #30
{
    fb18:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fb1a:	f140 80ef 	bpl.w	fcfc <bt_le_adv_start_legacy+0x208>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    fb1e:	4608      	mov	r0, r1
    fb20:	f7fe f874 	bl	dc0c <valid_adv_param>
    fb24:	4607      	mov	r7, r0
    fb26:	2800      	cmp	r0, #0
    fb28:	f000 80eb 	beq.w	fd02 <bt_le_adv_start_legacy+0x20e>
    fb2c:	487a      	ldr	r0, [pc, #488]	; (fd18 <bt_le_adv_start_legacy+0x224>)
    fb2e:	f00b fa49 	bl	1afc4 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
    fb32:	0503      	lsls	r3, r0, #20
    fb34:	d402      	bmi.n	fb3c <bt_le_adv_start_legacy+0x48>
    fb36:	4878      	ldr	r0, [pc, #480]	; (fd18 <bt_le_adv_start_legacy+0x224>)
    fb38:	f00b fa44 	bl	1afc4 <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    fb3c:	f106 0810 	add.w	r8, r6, #16
    fb40:	4640      	mov	r0, r8
    fb42:	f00b fa3f 	bl	1afc4 <atomic_get>
    fb46:	f3c0 1180 	ubfx	r1, r0, #6, #1
    fb4a:	0640      	lsls	r0, r0, #25
    fb4c:	f100 80dc 	bmi.w	fd08 <bt_le_adv_start_legacy+0x214>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    fb50:	220f      	movs	r2, #15
    fb52:	a80a      	add	r0, sp, #40	; 0x28
    fb54:	9105      	str	r1, [sp, #20]
    fb56:	f00b f973 	bl	1ae40 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    fb5a:	68a3      	ldr	r3, [r4, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    fb5c:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    fb5e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    fb62:	68e3      	ldr	r3, [r4, #12]
    fb64:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    fb68:	f00b fa1d 	bl	1afa6 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    fb6c:	7832      	ldrb	r2, [r6, #0]
    fb6e:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    fb70:	9905      	ldr	r1, [sp, #20]
	if (adv->id != param->id) {
    fb72:	429a      	cmp	r2, r3
	set_param.channel_map  = get_adv_channel_map(param->options);
    fb74:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
    fb78:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    fb7c:	d004      	beq.n	fb88 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fb7e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    fb82:	4865      	ldr	r0, [pc, #404]	; (fd18 <bt_le_adv_start_legacy+0x224>)
    fb84:	f00b fa32 	bl	1afec <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
    fb88:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;
    fb8a:	4b64      	ldr	r3, [pc, #400]	; (fd1c <bt_le_adv_start_legacy+0x228>)
	adv->id = param->id;
    fb8c:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    fb8e:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    fb92:	465a      	mov	r2, fp
    fb94:	6861      	ldr	r1, [r4, #4]
    fb96:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    fb9a:	f7fe fcd7 	bl	e54c <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    fb9e:	4683      	mov	fp, r0
    fba0:	2800      	cmp	r0, #0
    fba2:	d169      	bne.n	fc78 <bt_le_adv_start_legacy+0x184>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
    fba4:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    fba8:	2d00      	cmp	r5, #0
    fbaa:	d042      	beq.n	fc32 <bt_le_adv_start_legacy+0x13e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    fbac:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    fbae:	f00b fa0c 	bl	1afca <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    fbb2:	6860      	ldr	r0, [r4, #4]
    fbb4:	07c1      	lsls	r1, r0, #31
    fbb6:	d544      	bpl.n	fc42 <bt_le_adv_start_legacy+0x14e>
		scannable = true;

		if (dir_adv) {
    fbb8:	2d00      	cmp	r5, #0
    fbba:	d03f      	beq.n	fc3c <bt_le_adv_start_legacy+0x148>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    fbbc:	f010 0f10 	tst.w	r0, #16
    fbc0:	bf14      	ite	ne
    fbc2:	2304      	movne	r3, #4
    fbc4:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    fbc6:	6921      	ldr	r1, [r4, #16]
    fbc8:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    fbcc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    fbd0:	f00b f9fb 	bl	1afca <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    fbd4:	210f      	movs	r1, #15
    fbd6:	f242 0006 	movw	r0, #8198	; 0x2006
    fbda:	f7fe fb81 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
    fbde:	4683      	mov	fp, r0
    fbe0:	2800      	cmp	r0, #0
    fbe2:	f000 8094 	beq.w	fd0e <bt_le_adv_start_legacy+0x21a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    fbe6:	220f      	movs	r2, #15
    fbe8:	a90a      	add	r1, sp, #40	; 0x28
    fbea:	3008      	adds	r0, #8
    fbec:	f00c fbff 	bl	1c3ee <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    fbf0:	2200      	movs	r2, #0
    fbf2:	4659      	mov	r1, fp
    fbf4:	f242 0006 	movw	r0, #8198	; 0x2006
    fbf8:	f7fe fbbc 	bl	e374 <bt_hci_cmd_send_sync>
	if (err) {
    fbfc:	2800      	cmp	r0, #0
    fbfe:	f040 8089 	bne.w	fd14 <bt_le_adv_start_legacy+0x220>
		return err;
	}

	if (!dir_adv) {
    fc02:	b34d      	cbz	r5, fc58 <bt_le_adv_start_legacy+0x164>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    fc04:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fc06:	07da      	lsls	r2, r3, #31
    fc08:	d43a      	bmi.n	fc80 <bt_le_adv_start_legacy+0x18c>
	return set_le_adv_enable_legacy(adv, enable);
    fc0a:	2101      	movs	r1, #1
    fc0c:	4630      	mov	r0, r6
    fc0e:	f7fe fdf7 	bl	e800 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    fc12:	4683      	mov	fp, r0
    fc14:	2800      	cmp	r0, #0
    fc16:	d06a      	beq.n	fcee <bt_le_adv_start_legacy+0x1fa>
		BT_ERR("Failed to start advertiser");
    fc18:	4841      	ldr	r0, [pc, #260]	; (fd20 <bt_le_adv_start_legacy+0x22c>)
    fc1a:	2145      	movs	r1, #69	; 0x45
    fc1c:	f009 fea5 	bl	1996a <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    fc20:	9807      	ldr	r0, [sp, #28]
    fc22:	b348      	cbz	r0, fc78 <bt_le_adv_start_legacy+0x184>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fc24:	2100      	movs	r1, #0
    fc26:	f000 fddb 	bl	107e0 <bt_conn_set_state>
			bt_conn_unref(conn);
    fc2a:	9807      	ldr	r0, [sp, #28]
    fc2c:	f000 fdac 	bl	10788 <bt_conn_unref>
    fc30:	e022      	b.n	fc78 <bt_le_adv_start_legacy+0x184>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    fc32:	9508      	str	r5, [sp, #32]
    fc34:	a908      	add	r1, sp, #32
    fc36:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
    fc3a:	e7b8      	b.n	fbae <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
    fc3c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    fc40:	e7c8      	b.n	fbd4 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    fc42:	9b18      	ldr	r3, [sp, #96]	; 0x60
    fc44:	b933      	cbnz	r3, fc54 <bt_le_adv_start_legacy+0x160>
    fc46:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    fc4a:	f1c7 0303 	rsb	r3, r7, #3
    fc4e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    fc52:	e7bf      	b.n	fbd4 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    fc54:	2701      	movs	r7, #1
    fc56:	e7f8      	b.n	fc4a <bt_le_adv_start_legacy+0x156>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    fc58:	6863      	ldr	r3, [r4, #4]
    fc5a:	4652      	mov	r2, sl
    fc5c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    fc60:	e9cd 7301 	strd	r7, r3, [sp, #4]
    fc64:	9b19      	ldr	r3, [sp, #100]	; 0x64
    fc66:	4649      	mov	r1, r9
    fc68:	9300      	str	r3, [sp, #0]
    fc6a:	4630      	mov	r0, r6
    fc6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    fc6e:	f7fe fd53 	bl	e718 <le_adv_update.constprop.0>
		if (err) {
    fc72:	4683      	mov	fp, r0
    fc74:	2800      	cmp	r0, #0
    fc76:	d0c5      	beq.n	fc04 <bt_le_adv_start_legacy+0x110>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    fc78:	4658      	mov	r0, fp
    fc7a:	b00f      	add	sp, #60	; 0x3c
    fc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    fc80:	4630      	mov	r0, r6
    fc82:	a907      	add	r1, sp, #28
    fc84:	f7fe fad8 	bl	e238 <le_adv_start_add_conn>
		if (err) {
    fc88:	4683      	mov	fp, r0
    fc8a:	2800      	cmp	r0, #0
    fc8c:	d0bd      	beq.n	fc0a <bt_le_adv_start_legacy+0x116>
			if (err == -ENOMEM && !dir_adv &&
    fc8e:	f110 0f0c 	cmn.w	r0, #12
    fc92:	d1f1      	bne.n	fc78 <bt_le_adv_start_legacy+0x184>
    fc94:	2d00      	cmp	r5, #0
    fc96:	d1ef      	bne.n	fc78 <bt_le_adv_start_legacy+0x184>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    fc98:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    fc9a:	079b      	lsls	r3, r3, #30
    fc9c:	d4ec      	bmi.n	fc78 <bt_le_adv_start_legacy+0x184>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    fc9e:	6860      	ldr	r0, [r4, #4]
    fca0:	f080 0002 	eor.w	r0, r0, #2
    fca4:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    fca8:	f00b 0201 	and.w	r2, fp, #1
    fcac:	210c      	movs	r1, #12
    fcae:	4640      	mov	r0, r8
    fcb0:	f00b f9a7 	bl	1b002 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    fcb4:	6862      	ldr	r2, [r4, #4]
    fcb6:	2107      	movs	r1, #7
    fcb8:	4640      	mov	r0, r8
    fcba:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    fcbe:	f00b f9a0 	bl	1b002 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    fcc2:	6862      	ldr	r2, [r4, #4]
    fcc4:	2108      	movs	r1, #8
    fcc6:	4640      	mov	r0, r8
    fcc8:	f002 0201 	and.w	r2, r2, #1
    fccc:	f00b f999 	bl	1b002 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    fcd0:	463a      	mov	r2, r7
    fcd2:	2109      	movs	r1, #9
    fcd4:	4640      	mov	r0, r8
    fcd6:	f00b f994 	bl	1b002 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    fcda:	6862      	ldr	r2, [r4, #4]
    fcdc:	210b      	movs	r1, #11
    fcde:	4640      	mov	r0, r8
    fce0:	f3c2 0280 	ubfx	r2, r2, #2, #1
    fce4:	f00b f98d 	bl	1b002 <atomic_set_bit_to>
	return 0;
    fce8:	f04f 0b00 	mov.w	fp, #0
    fcec:	e7c4      	b.n	fc78 <bt_le_adv_start_legacy+0x184>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    fcee:	9807      	ldr	r0, [sp, #28]
    fcf0:	b108      	cbz	r0, fcf6 <bt_le_adv_start_legacy+0x202>
		bt_conn_unref(conn);
    fcf2:	f000 fd49 	bl	10788 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    fcf6:	2d00      	cmp	r5, #0
    fcf8:	d1d6      	bne.n	fca8 <bt_le_adv_start_legacy+0x1b4>
    fcfa:	e7d0      	b.n	fc9e <bt_le_adv_start_legacy+0x1aa>
		return -EAGAIN;
    fcfc:	f06f 0b0a 	mvn.w	fp, #10
    fd00:	e7ba      	b.n	fc78 <bt_le_adv_start_legacy+0x184>
		return -EINVAL;
    fd02:	f06f 0b15 	mvn.w	fp, #21
    fd06:	e7b7      	b.n	fc78 <bt_le_adv_start_legacy+0x184>
		return -EALREADY;
    fd08:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    fd0c:	e7b4      	b.n	fc78 <bt_le_adv_start_legacy+0x184>
		return -ENOBUFS;
    fd0e:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    fd12:	e7b1      	b.n	fc78 <bt_le_adv_start_legacy+0x184>
    fd14:	4683      	mov	fp, r0
    fd16:	e7af      	b.n	fc78 <bt_le_adv_start_legacy+0x184>
    fd18:	20008094 	.word	0x20008094
    fd1c:	20008000 	.word	0x20008000
    fd20:	00020314 	.word	0x00020314

0000fd24 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    fd24:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    fd26:	9c04      	ldr	r4, [sp, #16]
    fd28:	e9cd 3400 	strd	r3, r4, [sp]
    fd2c:	4613      	mov	r3, r2
    fd2e:	460a      	mov	r2, r1
    fd30:	4601      	mov	r1, r0
    fd32:	4802      	ldr	r0, [pc, #8]	; (fd3c <bt_le_adv_start+0x18>)
    fd34:	f7ff fede 	bl	faf4 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    fd38:	b002      	add	sp, #8
    fd3a:	bd10      	pop	{r4, pc}
    fd3c:	20008018 	.word	0x20008018

0000fd40 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    fd40:	b530      	push	{r4, r5, lr}
    fd42:	4c29      	ldr	r4, [pc, #164]	; (fde8 <bt_le_adv_stop+0xa8>)
    fd44:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    fd48:	b085      	sub	sp, #20
    fd4a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fd4e:	f00b f94d 	bl	1afec <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fd52:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fd56:	f00b f935 	bl	1afc4 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    fd5a:	0641      	lsls	r1, r0, #25
    fd5c:	d403      	bmi.n	fd66 <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
    fd5e:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    fd60:	4620      	mov	r0, r4
    fd62:	b005      	add	sp, #20
    fd64:	bd30      	pop	{r4, r5, pc}
    fd66:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fd6a:	f00b f92b 	bl	1afc4 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fd6e:	05c2      	lsls	r2, r0, #23
    fd70:	d521      	bpl.n	fdb6 <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    fd72:	2300      	movs	r3, #0
    fd74:	4669      	mov	r1, sp
    fd76:	f104 0021 	add.w	r0, r4, #33	; 0x21
    fd7a:	9300      	str	r3, [sp, #0]
    fd7c:	f8cd 3003 	str.w	r3, [sp, #3]
    fd80:	f00b f931 	bl	1afe6 <bt_addr_le_cmp>
    fd84:	7e25      	ldrb	r5, [r4, #24]
    fd86:	bb58      	cbnz	r0, fde0 <bt_le_adv_stop+0xa0>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    fd88:	4b18      	ldr	r3, [pc, #96]	; (fdec <bt_le_adv_stop+0xac>)
    fd8a:	a902      	add	r1, sp, #8
    fd8c:	889a      	ldrh	r2, [r3, #4]
    fd8e:	6818      	ldr	r0, [r3, #0]
    fd90:	f8ad 200c 	strh.w	r2, [sp, #12]
    fd94:	2204      	movs	r2, #4
    fd96:	799b      	ldrb	r3, [r3, #6]
    fd98:	9002      	str	r0, [sp, #8]
    fd9a:	f88d 300e 	strb.w	r3, [sp, #14]
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    fd9e:	4628      	mov	r0, r5
    fda0:	f000 fe54 	bl	10a4c <bt_conn_lookup_state_le>
    fda4:	4604      	mov	r4, r0
	if (conn) {
    fda6:	b130      	cbz	r0, fdb6 <bt_le_adv_stop+0x76>
		conn->err = status;
    fda8:	2100      	movs	r1, #0
    fdaa:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fdac:	f000 fd18 	bl	107e0 <bt_conn_set_state>
		bt_conn_unref(conn);
    fdb0:	4620      	mov	r0, r4
    fdb2:	f000 fce9 	bl	10788 <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
    fdb6:	2100      	movs	r1, #0
    fdb8:	480d      	ldr	r0, [pc, #52]	; (fdf0 <bt_le_adv_stop+0xb0>)
    fdba:	f7fe fd21 	bl	e800 <set_le_adv_enable_legacy>
		if (err) {
    fdbe:	4604      	mov	r4, r0
    fdc0:	2800      	cmp	r0, #0
    fdc2:	d1cd      	bne.n	fd60 <bt_le_adv_stop+0x20>
    fdc4:	480b      	ldr	r0, [pc, #44]	; (fdf4 <bt_le_adv_stop+0xb4>)
    fdc6:	f00b f8fd 	bl	1afc4 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    fdca:	0683      	lsls	r3, r0, #26
    fdcc:	d5c7      	bpl.n	fd5e <bt_le_adv_stop+0x1e>
	return set_le_scan_enable_legacy(enable);
    fdce:	4620      	mov	r0, r4
    fdd0:	f7fe fb80 	bl	e4d4 <set_le_scan_enable_legacy>
			le_set_private_addr(BT_ID_DEFAULT);
    fdd4:	f00b f93b 	bl	1b04e <le_set_private_addr.constprop.0>
	return set_le_scan_enable_legacy(enable);
    fdd8:	2001      	movs	r0, #1
    fdda:	f7fe fb7b 	bl	e4d4 <set_le_scan_enable_legacy>
    fdde:	e7bf      	b.n	fd60 <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    fde0:	2205      	movs	r2, #5
    fde2:	f104 0121 	add.w	r1, r4, #33	; 0x21
    fde6:	e7da      	b.n	fd9e <bt_le_adv_stop+0x5e>
    fde8:	20008000 	.word	0x20008000
    fdec:	0001d850 	.word	0x0001d850
    fdf0:	20008018 	.word	0x20008018
    fdf4:	20008094 	.word	0x20008094

0000fdf8 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    fdf8:	b513      	push	{r0, r1, r4, lr}
    fdfa:	4818      	ldr	r0, [pc, #96]	; (fe5c <bt_le_adv_resume+0x64>)
    fdfc:	f00b f8e2 	bl	1afc4 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    fe00:	04c1      	lsls	r1, r0, #19
    fe02:	d529      	bpl.n	fe58 <bt_le_adv_resume+0x60>
    fe04:	4815      	ldr	r0, [pc, #84]	; (fe5c <bt_le_adv_resume+0x64>)
    fe06:	f00b f8dd 	bl	1afc4 <atomic_get>
    fe0a:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    fe0c:	f3c0 1480 	ubfx	r4, r0, #6, #1
    fe10:	d422      	bmi.n	fe58 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fe12:	4812      	ldr	r0, [pc, #72]	; (fe5c <bt_le_adv_resume+0x64>)
    fe14:	f00b f8d6 	bl	1afc4 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    fe18:	05c3      	lsls	r3, r0, #23
    fe1a:	d51d      	bpl.n	fe58 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    fe1c:	4810      	ldr	r0, [pc, #64]	; (fe60 <bt_le_adv_resume+0x68>)
    fe1e:	a901      	add	r1, sp, #4
    fe20:	f7fe fa0a 	bl	e238 <le_adv_start_add_conn>
	if (err) {
    fe24:	b9c0      	cbnz	r0, fe58 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
    fe26:	2101      	movs	r1, #1
    fe28:	480d      	ldr	r0, [pc, #52]	; (fe60 <bt_le_adv_resume+0x68>)
    fe2a:	f7fe fce9 	bl	e800 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    fe2e:	b150      	cbz	r0, fe46 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fe30:	4621      	mov	r1, r4
    fe32:	9801      	ldr	r0, [sp, #4]
    fe34:	f000 fcd4 	bl	107e0 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fe38:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    fe3c:	4807      	ldr	r0, [pc, #28]	; (fe5c <bt_le_adv_resume+0x64>)
    fe3e:	f00b f8d5 	bl	1afec <atomic_and>
	return (old & mask) != 0;
    fe42:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    fe46:	9801      	ldr	r0, [sp, #4]
    fe48:	f000 fc9e 	bl	10788 <bt_conn_unref>
	if (persist_paused) {
    fe4c:	b124      	cbz	r4, fe58 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fe4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    fe52:	4802      	ldr	r0, [pc, #8]	; (fe5c <bt_le_adv_resume+0x64>)
    fe54:	f00b f8bc 	bl	1afd0 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    fe58:	b002      	add	sp, #8
    fe5a:	bd10      	pop	{r4, pc}
    fe5c:	20008028 	.word	0x20008028
    fe60:	20008018 	.word	0x20008018

0000fe64 <enh_conn_complete>:
{
    fe64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
    fe68:	7804      	ldrb	r4, [r0, #0]
{
    fe6a:	4605      	mov	r5, r0
	if (evt->status) {
    fe6c:	2c00      	cmp	r4, #0
    fe6e:	d048      	beq.n	ff02 <enh_conn_complete+0x9e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fe70:	2c3c      	cmp	r4, #60	; 0x3c
    fe72:	d11a      	bne.n	feaa <enh_conn_complete+0x46>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fe74:	f06f 0140 	mvn.w	r1, #64	; 0x40
    fe78:	4872      	ldr	r0, [pc, #456]	; (10044 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x44>)
    fe7a:	f00b f8b7 	bl	1afec <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    fe7e:	2000      	movs	r0, #0
    fe80:	f7fd ffa6 	bl	ddd0 <find_pending_connect.part.0>
		if (!conn) {
    fe84:	4605      	mov	r5, r0
    fe86:	b930      	cbnz	r0, fe96 <enh_conn_complete+0x32>
			BT_ERR("No pending slave connection");
    fe88:	2145      	movs	r1, #69	; 0x45
    fe8a:	486f      	ldr	r0, [pc, #444]	; (10048 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x48>)
}
    fe8c:	b004      	add	sp, #16
    fe8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
    fe92:	f009 bd6a 	b.w	1996a <printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    fe96:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fe98:	2100      	movs	r1, #0
    fe9a:	f000 fca1 	bl	107e0 <bt_conn_set_state>
		bt_conn_unref(conn);
    fe9e:	4628      	mov	r0, r5
}
    fea0:	b004      	add	sp, #16
    fea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    fea6:	f000 bc6f 	b.w	10788 <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    feaa:	2c02      	cmp	r4, #2
    feac:	d121      	bne.n	fef2 <enh_conn_complete+0x8e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    feae:	2100      	movs	r1, #0
    feb0:	2206      	movs	r2, #6
    feb2:	4608      	mov	r0, r1
    feb4:	f000 fdca 	bl	10a4c <bt_conn_lookup_state_le>
	if (!conn) {
    feb8:	4605      	mov	r5, r0
    feba:	b948      	cbnz	r0, fed0 <enh_conn_complete+0x6c>
		BT_ERR("No pending master connection");
    febc:	2145      	movs	r1, #69	; 0x45
    febe:	4863      	ldr	r0, [pc, #396]	; (1004c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x4c>)
    fec0:	f009 fd53 	bl	1996a <printk>
			bt_le_scan_update(false);
    fec4:	2000      	movs	r0, #0
    fec6:	f7fe fdb3 	bl	ea30 <bt_le_scan_update>
}
    feca:	b004      	add	sp, #16
    fecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    fed0:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fed2:	2100      	movs	r1, #0
    fed4:	f000 fc84 	bl	107e0 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fed8:	1d28      	adds	r0, r5, #4
    feda:	f00b f873 	bl	1afc4 <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    fede:	07c2      	lsls	r2, r0, #31
    fee0:	d503      	bpl.n	feea <enh_conn_complete+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    fee2:	4621      	mov	r1, r4
    fee4:	4628      	mov	r0, r5
    fee6:	f000 fc7b 	bl	107e0 <bt_conn_set_state>
	bt_conn_unref(conn);
    feea:	4628      	mov	r0, r5
    feec:	f000 fc4c 	bl	10788 <bt_conn_unref>
    fef0:	e7e8      	b.n	fec4 <enh_conn_complete+0x60>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    fef2:	4622      	mov	r2, r4
    fef4:	2157      	movs	r1, #87	; 0x57
    fef6:	4856      	ldr	r0, [pc, #344]	; (10050 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x50>)
}
    fef8:	b004      	add	sp, #16
    fefa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
    fefe:	f009 bd34 	b.w	1996a <printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    ff02:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ff04:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    ff08:	3b02      	subs	r3, #2
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    ff0a:	1d06      	adds	r6, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    ff0c:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    ff0e:	4631      	mov	r1, r6
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ff10:	fa1f f887 	uxth.w	r8, r7
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    ff14:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    ff16:	d834      	bhi.n	ff82 <enh_conn_complete+0x11e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    ff18:	f00b f857 	bl	1afca <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    ff1c:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ff20:	2206      	movs	r2, #6
    ff22:	3b02      	subs	r3, #2
    ff24:	f105 0111 	add.w	r1, r5, #17
    ff28:	f10d 0001 	add.w	r0, sp, #1
    ff2c:	f88d 3008 	strb.w	r3, [sp, #8]
    ff30:	f00a ff5b 	bl	1adea <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    ff34:	2301      	movs	r3, #1
    ff36:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
    ff3a:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
    ff3c:	bb40      	cbnz	r0, ff90 <enh_conn_complete+0x12c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    ff3e:	2206      	movs	r2, #6
    ff40:	a902      	add	r1, sp, #8
    ff42:	f000 fd83 	bl	10a4c <bt_conn_lookup_state_le>
    ff46:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ff48:	78eb      	ldrb	r3, [r5, #3]
    ff4a:	2b01      	cmp	r3, #1
    ff4c:	d104      	bne.n	ff58 <enh_conn_complete+0xf4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ff4e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    ff52:	483c      	ldr	r0, [pc, #240]	; (10044 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x44>)
    ff54:	f00b f84a 	bl	1afec <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ff58:	78eb      	ldrb	r3, [r5, #3]
    ff5a:	b923      	cbnz	r3, ff66 <enh_conn_complete+0x102>
    ff5c:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    ff60:	483c      	ldr	r0, [pc, #240]	; (10054 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x54>)
    ff62:	f00b f843 	bl	1afec <atomic_and>
	if (!conn) {
    ff66:	b9dc      	cbnz	r4, ffa0 <enh_conn_complete+0x13c>
		BT_ERR("No pending conn for peer %s",
    ff68:	4630      	mov	r0, r6
    ff6a:	f7fd fc5d 	bl	d828 <bt_addr_le_str_real>
    ff6e:	2145      	movs	r1, #69	; 0x45
    ff70:	4602      	mov	r2, r0
    ff72:	4839      	ldr	r0, [pc, #228]	; (10058 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x58>)
    ff74:	f009 fcf9 	bl	1996a <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    ff78:	211f      	movs	r1, #31
    ff7a:	4640      	mov	r0, r8
    ff7c:	f00b f87d 	bl	1b07a <bt_hci_disconnect>
		return;
    ff80:	e7a3      	b.n	feca <enh_conn_complete+0x66>
		bt_addr_le_copy(&id_addr,
    ff82:	f00b f822 	bl	1afca <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    ff86:	4631      	mov	r1, r6
    ff88:	4668      	mov	r0, sp
    ff8a:	f00b f81e 	bl	1afca <bt_addr_le_copy>
    ff8e:	e7d4      	b.n	ff3a <enh_conn_complete+0xd6>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    ff90:	2801      	cmp	r0, #1
    ff92:	d103      	bne.n	ff9c <enh_conn_complete+0x138>
    ff94:	a802      	add	r0, sp, #8
    ff96:	f7fd ff1b 	bl	ddd0 <find_pending_connect.part.0>
    ff9a:	e7d4      	b.n	ff46 <enh_conn_complete+0xe2>
	return NULL;
    ff9c:	2400      	movs	r4, #0
    ff9e:	e7d3      	b.n	ff48 <enh_conn_complete+0xe4>
	conn->handle = handle;
    ffa0:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    ffa2:	a902      	add	r1, sp, #8
	conn->handle = handle;
    ffa4:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    ffa8:	f00b f80f 	bl	1afca <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    ffac:	7e2a      	ldrb	r2, [r5, #24]
    ffae:	7deb      	ldrb	r3, [r5, #23]
    ffb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ffb4:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    ffb8:	7eaa      	ldrb	r2, [r5, #26]
    ffba:	7e6b      	ldrb	r3, [r5, #25]
    ffbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ffc0:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    ffc4:	7f2a      	ldrb	r2, [r5, #28]
    ffc6:	7eeb      	ldrb	r3, [r5, #27]
    ffc8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
    ffcc:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    ffce:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    ffd2:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
    ffd4:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ffd6:	2b01      	cmp	r3, #1
	conn->role = evt->role;
    ffd8:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ffda:	d113      	bne.n	10004 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x4>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    ffdc:	4669      	mov	r1, sp
    ffde:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    ffe2:	f00a fff2 	bl	1afca <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
    ffe6:	7a21      	ldrb	r1, [r4, #8]
    ffe8:	4d1c      	ldr	r5, [pc, #112]	; (1005c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5c>)
    ffea:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    ffee:	4429      	add	r1, r5
    fff0:	f104 0096 	add.w	r0, r4, #150	; 0x96
    fff4:	f00a ffe9 	bl	1afca <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    fff8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
    fffc:	065b      	lsls	r3, r3, #25
    fffe:	d501      	bpl.n	10004 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x4>
			bt_le_adv_resume();
   10000:	f7ff fefa 	bl	fdf8 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10004:	78e3      	ldrb	r3, [r4, #3]
   10006:	b96b      	cbnz	r3, 10024 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x24>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   10008:	4669      	mov	r1, sp
   1000a:	f104 0096 	add.w	r0, r4, #150	; 0x96
   1000e:	f00a ffdc 	bl	1afca <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   10012:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   10014:	4b11      	ldr	r3, [pc, #68]	; (1005c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x5c>)
					&bt_dev.id_addr[conn->id]);
   10016:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   1001a:	4419      	add	r1, r3
   1001c:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10020:	f00a ffd3 	bl	1afca <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   10024:	2107      	movs	r1, #7
   10026:	4620      	mov	r0, r4
   10028:	f000 fbda 	bl	107e0 <bt_conn_set_state>
	conn_auto_initiate(conn);
   1002c:	4620      	mov	r0, r4
   1002e:	f7fe ff1f 	bl	ee70 <conn_auto_initiate>
	bt_conn_unref(conn);
   10032:	4620      	mov	r0, r4
   10034:	f000 fba8 	bl	10788 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10038:	78e3      	ldrb	r3, [r4, #3]
   1003a:	2b00      	cmp	r3, #0
   1003c:	f47f af45 	bne.w	feca <enh_conn_complete+0x66>
   10040:	e740      	b.n	fec4 <enh_conn_complete+0x60>
   10042:	bf00      	nop
   10044:	20008028 	.word	0x20008028
   10048:	00020334 	.word	0x00020334
   1004c:	00020355 	.word	0x00020355
   10050:	00020377 	.word	0x00020377
   10054:	20008094 	.word	0x20008094
   10058:	00020395 	.word	0x00020395
   1005c:	20008000 	.word	0x20008000

00010060 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   10060:	b570      	push	{r4, r5, r6, lr}
   10062:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10064:	482e      	ldr	r0, [pc, #184]	; (10120 <bt_le_scan_start+0xc0>)
   10066:	f00a ffad 	bl	1afc4 <atomic_get>
   1006a:	460e      	mov	r6, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1006c:	0781      	lsls	r1, r0, #30
   1006e:	d554      	bpl.n	1011a <bt_le_scan_start+0xba>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   10070:	782a      	ldrb	r2, [r5, #0]
   10072:	2a01      	cmp	r2, #1
   10074:	d903      	bls.n	1007e <bt_le_scan_start+0x1e>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   10076:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   1007a:	4620      	mov	r0, r4
   1007c:	bd70      	pop	{r4, r5, r6, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   1007e:	686b      	ldr	r3, [r5, #4]
   10080:	f033 030f 	bics.w	r3, r3, #15
   10084:	d1f7      	bne.n	10076 <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   10086:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   1008a:	8928      	ldrh	r0, [r5, #8]
   1008c:	1f03      	subs	r3, r0, #4
   1008e:	b29b      	uxth	r3, r3
   10090:	42a3      	cmp	r3, r4
   10092:	d8f0      	bhi.n	10076 <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   10094:	8969      	ldrh	r1, [r5, #10]
   10096:	1f0b      	subs	r3, r1, #4
   10098:	b29b      	uxth	r3, r3
   1009a:	42a3      	cmp	r3, r4
   1009c:	d8eb      	bhi.n	10076 <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   1009e:	4288      	cmp	r0, r1
   100a0:	d3e9      	bcc.n	10076 <bt_le_scan_start+0x16>
	if (param->type && !bt_le_scan_random_addr_check()) {
   100a2:	b94a      	cbnz	r2, 100b8 <bt_le_scan_start+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   100a4:	2140      	movs	r1, #64	; 0x40
   100a6:	481e      	ldr	r0, [pc, #120]	; (10120 <bt_le_scan_start+0xc0>)
   100a8:	f00a ff92 	bl	1afd0 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   100ac:	ea10 0301 	ands.w	r3, r0, r1
   100b0:	d007      	beq.n	100c2 <bt_le_scan_start+0x62>
		return -EALREADY;
   100b2:	f06f 0444 	mvn.w	r4, #68	; 0x44
   100b6:	e7e0      	b.n	1007a <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
   100b8:	f7fe fc2e 	bl	e918 <bt_le_scan_random_addr_check>
   100bc:	2800      	cmp	r0, #0
   100be:	d1f1      	bne.n	100a4 <bt_le_scan_start+0x44>
   100c0:	e7d9      	b.n	10076 <bt_le_scan_start+0x16>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   100c2:	4817      	ldr	r0, [pc, #92]	; (10120 <bt_le_scan_start+0xc0>)
   100c4:	f00a ff7e 	bl	1afc4 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   100c8:	0682      	lsls	r2, r0, #26
   100ca:	d50a      	bpl.n	100e2 <bt_le_scan_start+0x82>
	return set_le_scan_enable_legacy(enable);
   100cc:	4618      	mov	r0, r3
   100ce:	f7fe fa01 	bl	e4d4 <set_le_scan_enable_legacy>
		if (err) {
   100d2:	4604      	mov	r4, r0
   100d4:	b128      	cbz	r0, 100e2 <bt_le_scan_start+0x82>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   100d6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   100da:	4811      	ldr	r0, [pc, #68]	; (10120 <bt_le_scan_start+0xc0>)
   100dc:	f00a ff86 	bl	1afec <atomic_and>
		return err;
   100e0:	e7cb      	b.n	1007a <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   100e2:	686a      	ldr	r2, [r5, #4]
   100e4:	2108      	movs	r1, #8
   100e6:	480e      	ldr	r0, [pc, #56]	; (10120 <bt_le_scan_start+0xc0>)
   100e8:	f002 0201 	and.w	r2, r2, #1
   100ec:	f00a ff89 	bl	1b002 <atomic_set_bit_to>
		if (param->timeout) {
   100f0:	89ab      	ldrh	r3, [r5, #12]
   100f2:	b13b      	cbz	r3, 10104 <bt_le_scan_start+0xa4>
   100f4:	f06f 0140 	mvn.w	r1, #64	; 0x40
   100f8:	4809      	ldr	r0, [pc, #36]	; (10120 <bt_le_scan_start+0xc0>)
   100fa:	f00a ff77 	bl	1afec <atomic_and>
			return -ENOTSUP;
   100fe:	f06f 0422 	mvn.w	r4, #34	; 0x22
   10102:	e7ba      	b.n	1007a <bt_le_scan_start+0x1a>
		err = start_le_scan_legacy(param->type, param->interval,
   10104:	896a      	ldrh	r2, [r5, #10]
   10106:	8929      	ldrh	r1, [r5, #8]
   10108:	7828      	ldrb	r0, [r5, #0]
   1010a:	f7fe fba7 	bl	e85c <start_le_scan_legacy>
	if (err) {
   1010e:	4604      	mov	r4, r0
   10110:	2800      	cmp	r0, #0
   10112:	d1e0      	bne.n	100d6 <bt_le_scan_start+0x76>
	scan_dev_found_cb = cb;
   10114:	4b03      	ldr	r3, [pc, #12]	; (10124 <bt_le_scan_start+0xc4>)
   10116:	601e      	str	r6, [r3, #0]
	return 0;
   10118:	e7af      	b.n	1007a <bt_le_scan_start+0x1a>
		return -EAGAIN;
   1011a:	f06f 040a 	mvn.w	r4, #10
   1011e:	e7ac      	b.n	1007a <bt_le_scan_start+0x1a>
   10120:	20008094 	.word	0x20008094
   10124:	2000a964 	.word	0x2000a964

00010128 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   10128:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1012a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1012e:	4807      	ldr	r0, [pc, #28]	; (1014c <bt_le_scan_stop+0x24>)
   10130:	f00a ff5c 	bl	1afec <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10134:	0643      	lsls	r3, r0, #25
   10136:	d506      	bpl.n	10146 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   10138:	2000      	movs	r0, #0
   1013a:	4b05      	ldr	r3, [pc, #20]	; (10150 <bt_le_scan_stop+0x28>)
   1013c:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   1013e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   10142:	f7fe bc75 	b.w	ea30 <bt_le_scan_update>
}
   10146:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1014a:	bd08      	pop	{r3, pc}
   1014c:	20008094 	.word	0x20008094
   10150:	2000a964 	.word	0x2000a964

00010154 <bt_le_scan_cb_register>:
	parent->next = child;
   10154:	2300      	movs	r3, #0
   10156:	6083      	str	r3, [r0, #8]
	return list->tail;
   10158:	4b05      	ldr	r3, [pc, #20]	; (10170 <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   1015a:	f100 0208 	add.w	r2, r0, #8
   1015e:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   10160:	b911      	cbnz	r1, 10168 <bt_le_scan_cb_register+0x14>
	list->head = node;
   10162:	e9c3 2200 	strd	r2, r2, [r3]
}
   10166:	4770      	bx	lr
	parent->next = child;
   10168:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1016a:	605a      	str	r2, [r3, #4]
}
   1016c:	4770      	bx	lr
   1016e:	bf00      	nop
   10170:	2000a95c 	.word	0x2000a95c

00010174 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   10174:	b5f0      	push	{r4, r5, r6, r7, lr}
   10176:	b08d      	sub	sp, #52	; 0x34
   10178:	ae04      	add	r6, sp, #16
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   1017a:	2700      	movs	r7, #0
   1017c:	4635      	mov	r5, r6
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1017e:	2100      	movs	r1, #0
   10180:	f242 0018 	movw	r0, #8216	; 0x2018
   10184:	aa02      	add	r2, sp, #8
   10186:	f7fe f8f5 	bl	e374 <bt_hci_cmd_send_sync>
		if (ret) {
   1018a:	4604      	mov	r4, r0
   1018c:	bb58      	cbnz	r0, 101e6 <prng_reseed.constprop.0+0x72>
			return ret;
		}

		rp = (void *)rsp->data;
   1018e:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
   10190:	2208      	movs	r2, #8
   10192:	6899      	ldr	r1, [r3, #8]
   10194:	4630      	mov	r0, r6
   10196:	3101      	adds	r1, #1
   10198:	f00a fe27 	bl	1adea <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   1019c:	3701      	adds	r7, #1

		net_buf_unref(rsp);
   1019e:	9802      	ldr	r0, [sp, #8]
   101a0:	f004 fb70 	bl	14884 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   101a4:	2f04      	cmp	r7, #4
   101a6:	f106 0608 	add.w	r6, r6, #8
   101aa:	d1e8      	bne.n	1017e <prng_reseed.constprop.0+0xa>
	return z_impl_k_uptime_ticks();
   101ac:	f00d f82e 	bl	1d20c <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   101b0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   101b4:	fba0 3206 	umull	r3, r2, r0, r6
   101b8:	fb06 2101 	mla	r1, r6, r1, r2
   101bc:	0bdb      	lsrs	r3, r3, #15
   101be:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   101c2:	0bc9      	lsrs	r1, r1, #15
	}

	extra = k_uptime_get();
   101c4:	e9cd 3102 	strd	r3, r1, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   101c8:	2308      	movs	r3, #8
   101ca:	2220      	movs	r2, #32
   101cc:	9300      	str	r3, [sp, #0]
   101ce:	4629      	mov	r1, r5
   101d0:	4806      	ldr	r0, [pc, #24]	; (101ec <prng_reseed.constprop.0+0x78>)
   101d2:	446b      	add	r3, sp
   101d4:	f00a fcbf 	bl	1ab56 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   101d8:	b928      	cbnz	r0, 101e6 <prng_reseed.constprop.0+0x72>
		BT_ERR("Failed to re-seed PRNG");
   101da:	2145      	movs	r1, #69	; 0x45
   101dc:	4804      	ldr	r0, [pc, #16]	; (101f0 <prng_reseed.constprop.0+0x7c>)
   101de:	f009 fbc4 	bl	1996a <printk>
		return -EIO;
   101e2:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
   101e6:	4620      	mov	r0, r4
   101e8:	b00d      	add	sp, #52	; 0x34
   101ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101ec:	20008a20 	.word	0x20008a20
   101f0:	000203c7 	.word	0x000203c7

000101f4 <prng_init>:

int prng_init(void)
{
   101f4:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   101f6:	4b13      	ldr	r3, [pc, #76]	; (10244 <prng_init+0x50>)
   101f8:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
   101fc:	2b00      	cmp	r3, #0
   101fe:	da1d      	bge.n	1023c <prng_init+0x48>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   10200:	2100      	movs	r1, #0
   10202:	f242 0018 	movw	r0, #8216	; 0x2018
   10206:	aa01      	add	r2, sp, #4
   10208:	f7fe f8b4 	bl	e374 <bt_hci_cmd_send_sync>
	if (ret) {
   1020c:	b988      	cbnz	r0, 10232 <prng_init+0x3e>
		return ret;
	}

	rp = (void *)rsp->data;
   1020e:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   10210:	2208      	movs	r2, #8
   10212:	6899      	ldr	r1, [r3, #8]
   10214:	480c      	ldr	r0, [pc, #48]	; (10248 <prng_init+0x54>)
   10216:	3101      	adds	r1, #1
   10218:	f00a fc7d 	bl	1ab16 <tc_hmac_prng_init>
   1021c:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   1021e:	9801      	ldr	r0, [sp, #4]
   10220:	f004 fb30 	bl	14884 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   10224:	b93c      	cbnz	r4, 10236 <prng_init+0x42>
		BT_ERR("Failed to initialize PRNG");
   10226:	4809      	ldr	r0, [pc, #36]	; (1024c <prng_init+0x58>)
   10228:	2145      	movs	r1, #69	; 0x45
   1022a:	f009 fb9e 	bl	1996a <printk>
		return -EIO;
   1022e:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   10232:	b002      	add	sp, #8
   10234:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   10236:	f7ff ff9d 	bl	10174 <prng_reseed.constprop.0>
   1023a:	e7fa      	b.n	10232 <prng_init+0x3e>
		return -ENOTSUP;
   1023c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10240:	e7f7      	b.n	10232 <prng_init+0x3e>
   10242:	bf00      	nop
   10244:	20008000 	.word	0x20008000
   10248:	20008a20 	.word	0x20008a20
   1024c:	000203e3 	.word	0x000203e3

00010250 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   10250:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   10252:	4a0a      	ldr	r2, [pc, #40]	; (1027c <bt_rand+0x2c>)
{
   10254:	4604      	mov	r4, r0
   10256:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   10258:	f00a fc96 	bl	1ab88 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   1025c:	1c43      	adds	r3, r0, #1
   1025e:	d107      	bne.n	10270 <bt_rand+0x20>
		ret = prng_reseed(&prng);
   10260:	f7ff ff88 	bl	10174 <prng_reseed.constprop.0>
		if (ret) {
   10264:	b948      	cbnz	r0, 1027a <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   10266:	4629      	mov	r1, r5
   10268:	4620      	mov	r0, r4
   1026a:	4a04      	ldr	r2, [pc, #16]	; (1027c <bt_rand+0x2c>)
   1026c:	f00a fc8c 	bl	1ab88 <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   10270:	2801      	cmp	r0, #1
   10272:	bf14      	ite	ne
   10274:	f06f 0004 	mvnne.w	r0, #4
   10278:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   1027a:	bd38      	pop	{r3, r4, r5, pc}
   1027c:	20008a20 	.word	0x20008a20

00010280 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   10280:	2300      	movs	r3, #0
{
   10282:	4601      	mov	r1, r0
	tx->user_data = NULL;
   10284:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   10288:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1028a:	4801      	ldr	r0, [pc, #4]	; (10290 <tx_free+0x10>)
   1028c:	f00c beea 	b.w	1d064 <k_queue_append>
   10290:	20008694 	.word	0x20008694

00010294 <notify_connected>:
{
   10294:	b538      	push	{r3, r4, r5, lr}
   10296:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   10298:	4b08      	ldr	r3, [pc, #32]	; (102bc <notify_connected+0x28>)
   1029a:	681d      	ldr	r5, [r3, #0]
			cb->connected(conn, conn->err);
   1029c:	7a61      	ldrb	r1, [r4, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
   1029e:	b92d      	cbnz	r5, 102ac <notify_connected+0x18>
	if (!conn->err) {
   102a0:	b951      	cbnz	r1, 102b8 <notify_connected+0x24>
		bt_gatt_connected(conn);
   102a2:	4620      	mov	r0, r4
}
   102a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   102a8:	f003 bfe6 	b.w	14278 <bt_gatt_connected>
		if (cb->connected) {
   102ac:	682b      	ldr	r3, [r5, #0]
   102ae:	b10b      	cbz	r3, 102b4 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   102b0:	4620      	mov	r0, r4
   102b2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   102b4:	692d      	ldr	r5, [r5, #16]
   102b6:	e7f1      	b.n	1029c <notify_connected+0x8>
}
   102b8:	bd38      	pop	{r3, r4, r5, pc}
   102ba:	bf00      	nop
   102bc:	2000a968 	.word	0x2000a968

000102c0 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   102c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   102c4:	4604      	mov	r4, r0
   102c6:	460e      	mov	r6, r1
   102c8:	4691      	mov	r9, r2
   102ca:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   102cc:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   102ce:	f04f 33ff 	mov.w	r3, #4294967295
   102d2:	f04f 32ff 	mov.w	r2, #4294967295
   102d6:	4847      	ldr	r0, [pc, #284]	; (103f4 <send_frag+0x134>)
   102d8:	f008 f9ae 	bl	18638 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   102dc:	7aa3      	ldrb	r3, [r4, #10]
   102de:	2b07      	cmp	r3, #7
   102e0:	d14b      	bne.n	1037a <send_frag+0xba>
	__asm__ volatile(
   102e2:	f04f 0320 	mov.w	r3, #32
   102e6:	f3ef 8211 	mrs	r2, BASEPRI
   102ea:	f383 8811 	msr	BASEPRI, r3
   102ee:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   102f2:	69a3      	ldr	r3, [r4, #24]
   102f4:	2d00      	cmp	r5, #0
   102f6:	d052      	beq.n	1039e <send_frag+0xde>
	parent->next = child;
   102f8:	2100      	movs	r1, #0
   102fa:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   102fc:	2b00      	cmp	r3, #0
   102fe:	d14b      	bne.n	10398 <send_frag+0xd8>
	list->head = node;
   10300:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   10304:	f382 8811 	msr	BASEPRI, r2
   10308:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1030c:	2104      	movs	r1, #4
   1030e:	f106 0008 	add.w	r0, r6, #8
   10312:	f004 fb75 	bl	14a00 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   10316:	8823      	ldrh	r3, [r4, #0]
   10318:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   1031c:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   10320:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   10322:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   10326:	3b04      	subs	r3, #4
   10328:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1032a:	2302      	movs	r3, #2
	return bt_send(buf);
   1032c:	4630      	mov	r0, r6
   1032e:	7533      	strb	r3, [r6, #20]
   10330:	f7fe fd14 	bl	ed5c <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   10334:	4602      	mov	r2, r0
   10336:	2800      	cmp	r0, #0
   10338:	d059      	beq.n	103ee <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   1033a:	2145      	movs	r1, #69	; 0x45
   1033c:	482e      	ldr	r0, [pc, #184]	; (103f8 <send_frag+0x138>)
   1033e:	f009 fb14 	bl	1996a <printk>
	__asm__ volatile(
   10342:	f04f 0320 	mov.w	r3, #32
   10346:	f3ef 8911 	mrs	r9, BASEPRI
   1034a:	f383 8811 	msr	BASEPRI, r3
   1034e:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   10352:	2d00      	cmp	r5, #0
   10354:	d037      	beq.n	103c6 <send_frag+0x106>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10356:	2200      	movs	r2, #0
	return list->head;
   10358:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1035a:	b153      	cbz	r3, 10372 <send_frag+0xb2>
   1035c:	429d      	cmp	r5, r3
   1035e:	d12f      	bne.n	103c0 <send_frag+0x100>
	return node->next;
   10360:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   10362:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   10364:	bb3a      	cbnz	r2, 103b6 <send_frag+0xf6>
   10366:	42a9      	cmp	r1, r5
	list->head = node;
   10368:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1036a:	d100      	bne.n	1036e <send_frag+0xae>
	list->tail = node;
   1036c:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   1036e:	2300      	movs	r3, #0
   10370:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   10372:	f389 8811 	msr	BASEPRI, r9
   10376:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1037a:	481e      	ldr	r0, [pc, #120]	; (103f4 <send_frag+0x134>)
   1037c:	f008 f920 	bl	185c0 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   10380:	b115      	cbz	r5, 10388 <send_frag+0xc8>
		tx_free(tx);
   10382:	4628      	mov	r0, r5
   10384:	f7ff ff7c 	bl	10280 <tx_free>
	}

	if (always_consume) {
   10388:	b11f      	cbz	r7, 10392 <send_frag+0xd2>
		net_buf_unref(buf);
   1038a:	4630      	mov	r0, r6
   1038c:	f004 fa7a 	bl	14884 <net_buf_unref>
	}
	return false;
   10390:	2700      	movs	r7, #0
}
   10392:	4638      	mov	r0, r7
   10394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10398:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1039a:	61a5      	str	r5, [r4, #24]
}
   1039c:	e7b2      	b.n	10304 <send_frag+0x44>
		if (tail_tx) {
   1039e:	b133      	cbz	r3, 103ae <send_frag+0xee>
			pending_no_cb = &tail_tx->pending_no_cb;
   103a0:	f103 080c 	add.w	r8, r3, #12
   103a4:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   103a6:	3301      	adds	r3, #1
   103a8:	f8c8 3000 	str.w	r3, [r8]
   103ac:	e7aa      	b.n	10304 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   103ae:	69e3      	ldr	r3, [r4, #28]
   103b0:	f104 081c 	add.w	r8, r4, #28
   103b4:	e7f7      	b.n	103a6 <send_frag+0xe6>
Z_GENLIST_REMOVE(slist, snode)
   103b6:	42a9      	cmp	r1, r5
	parent->next = child;
   103b8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   103ba:	bf08      	it	eq
   103bc:	61a2      	streq	r2, [r4, #24]
}
   103be:	e7d6      	b.n	1036e <send_frag+0xae>
	return node->next;
   103c0:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   103c2:	681b      	ldr	r3, [r3, #0]
   103c4:	e7c9      	b.n	1035a <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   103c6:	f8d8 3000 	ldr.w	r3, [r8]
   103ca:	b953      	cbnz	r3, 103e2 <send_frag+0x122>
   103cc:	490b      	ldr	r1, [pc, #44]	; (103fc <send_frag+0x13c>)
   103ce:	480c      	ldr	r0, [pc, #48]	; (10400 <send_frag+0x140>)
   103d0:	f240 4292 	movw	r2, #1170	; 0x492
   103d4:	f009 fac9 	bl	1996a <printk>
   103d8:	f240 4192 	movw	r1, #1170	; 0x492
   103dc:	4807      	ldr	r0, [pc, #28]	; (103fc <send_frag+0x13c>)
   103de:	f009 fd6a 	bl	19eb6 <assert_post_action>
			(*pending_no_cb)--;
   103e2:	f8d8 3000 	ldr.w	r3, [r8]
   103e6:	3b01      	subs	r3, #1
   103e8:	f8c8 3000 	str.w	r3, [r8]
   103ec:	e7c1      	b.n	10372 <send_frag+0xb2>
	return true;
   103ee:	2701      	movs	r7, #1
   103f0:	e7cf      	b.n	10392 <send_frag+0xd2>
   103f2:	bf00      	nop
   103f4:	200080c8 	.word	0x200080c8
   103f8:	0001ff70 	.word	0x0001ff70
   103fc:	0002040c 	.word	0x0002040c
   10400:	0001ea60 	.word	0x0001ea60

00010404 <bt_conn_get_pkts>:
}
   10404:	4800      	ldr	r0, [pc, #0]	; (10408 <bt_conn_get_pkts+0x4>)
   10406:	4770      	bx	lr
   10408:	200080c8 	.word	0x200080c8

0001040c <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   1040c:	1d03      	adds	r3, r0, #4
{
   1040e:	b570      	push	{r4, r5, r6, lr}
   10410:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10412:	4618      	mov	r0, r3
   10414:	f00a feee 	bl	1b1f4 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   10418:	0582      	lsls	r2, r0, #22
   1041a:	d515      	bpl.n	10448 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   1041c:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   10420:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   10424:	4291      	cmp	r1, r2
   10426:	d80f      	bhi.n	10448 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   10428:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   1042c:	4291      	cmp	r1, r2
   1042e:	d30b      	bcc.n	10448 <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
   10430:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   10434:	4291      	cmp	r1, r2
   10436:	d107      	bne.n	10448 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10438:	e8d3 2fef 	ldaex	r2, [r3]
   1043c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   10440:	e8c3 2fe1 	stlex	r1, r2, [r3]
   10444:	2900      	cmp	r1, #0
   10446:	d1f7      	bne.n	10438 <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
   10448:	4b07      	ldr	r3, [pc, #28]	; (10468 <notify_le_param_updated+0x5c>)
   1044a:	681d      	ldr	r5, [r3, #0]
   1044c:	b905      	cbnz	r5, 10450 <notify_le_param_updated+0x44>
}
   1044e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   10450:	68ee      	ldr	r6, [r5, #12]
   10452:	b13e      	cbz	r6, 10464 <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
   10454:	4620      	mov	r0, r4
   10456:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1045a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1045e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   10462:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   10464:	692d      	ldr	r5, [r5, #16]
   10466:	e7f1      	b.n	1044c <notify_le_param_updated+0x40>
   10468:	2000a968 	.word	0x2000a968

0001046c <le_param_req>:
{
   1046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1046e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   10470:	4608      	mov	r0, r1
{
   10472:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   10474:	f00a fe1c 	bl	1b0b0 <bt_le_conn_params_valid>
   10478:	4604      	mov	r4, r0
   1047a:	b910      	cbnz	r0, 10482 <le_param_req+0x16>
		return false;
   1047c:	2400      	movs	r4, #0
}
   1047e:	4620      	mov	r0, r4
   10480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   10482:	4b09      	ldr	r3, [pc, #36]	; (104a8 <le_param_req+0x3c>)
   10484:	681e      	ldr	r6, [r3, #0]
   10486:	2e00      	cmp	r6, #0
   10488:	d0f9      	beq.n	1047e <le_param_req+0x12>
		if (!cb->le_param_req) {
   1048a:	68b3      	ldr	r3, [r6, #8]
   1048c:	b90b      	cbnz	r3, 10492 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   1048e:	6936      	ldr	r6, [r6, #16]
   10490:	e7f9      	b.n	10486 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   10492:	4629      	mov	r1, r5
   10494:	4638      	mov	r0, r7
   10496:	4798      	blx	r3
   10498:	2800      	cmp	r0, #0
   1049a:	d0ef      	beq.n	1047c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   1049c:	4628      	mov	r0, r5
   1049e:	f00a fe07 	bl	1b0b0 <bt_le_conn_params_valid>
   104a2:	2800      	cmp	r0, #0
   104a4:	d1f3      	bne.n	1048e <le_param_req+0x22>
   104a6:	e7e9      	b.n	1047c <le_param_req+0x10>
   104a8:	2000a968 	.word	0x2000a968

000104ac <bt_conn_cb_register>:
	cb->_next = callback_list;
   104ac:	4b02      	ldr	r3, [pc, #8]	; (104b8 <bt_conn_cb_register+0xc>)
   104ae:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   104b0:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   104b2:	6102      	str	r2, [r0, #16]
}
   104b4:	4770      	bx	lr
   104b6:	bf00      	nop
   104b8:	2000a968 	.word	0x2000a968

000104bc <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   104bc:	b570      	push	{r4, r5, r6, lr}
   104be:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   104c0:	f100 0634 	add.w	r6, r0, #52	; 0x34
   104c4:	2200      	movs	r2, #0
   104c6:	2300      	movs	r3, #0
   104c8:	4630      	mov	r0, r6
   104ca:	f004 f959 	bl	14780 <net_buf_get>
   104ce:	4605      	mov	r5, r0
   104d0:	bb28      	cbnz	r0, 1051e <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   104d2:	6963      	ldr	r3, [r4, #20]
   104d4:	b153      	cbz	r3, 104ec <conn_cleanup+0x30>
   104d6:	4916      	ldr	r1, [pc, #88]	; (10530 <conn_cleanup+0x74>)
   104d8:	4816      	ldr	r0, [pc, #88]	; (10534 <conn_cleanup+0x78>)
   104da:	f240 520c 	movw	r2, #1292	; 0x50c
   104de:	f009 fa44 	bl	1996a <printk>
   104e2:	f240 510c 	movw	r1, #1292	; 0x50c
   104e6:	4812      	ldr	r0, [pc, #72]	; (10530 <conn_cleanup+0x74>)
   104e8:	f009 fce5 	bl	19eb6 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   104ec:	69e3      	ldr	r3, [r4, #28]
   104ee:	b153      	cbz	r3, 10506 <conn_cleanup+0x4a>
   104f0:	490f      	ldr	r1, [pc, #60]	; (10530 <conn_cleanup+0x74>)
   104f2:	4810      	ldr	r0, [pc, #64]	; (10534 <conn_cleanup+0x78>)
   104f4:	f240 520d 	movw	r2, #1293	; 0x50d
   104f8:	f009 fa37 	bl	1996a <printk>
   104fc:	f240 510d 	movw	r1, #1293	; 0x50d
   10500:	480b      	ldr	r0, [pc, #44]	; (10530 <conn_cleanup+0x74>)
   10502:	f009 fcd8 	bl	19eb6 <assert_post_action>

	bt_conn_reset_rx_state(conn);
   10506:	4620      	mov	r0, r4
   10508:	f00a fec1 	bl	1b28e <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1050c:	f104 0158 	add.w	r1, r4, #88	; 0x58
   10510:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   10512:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10516:	2300      	movs	r3, #0
   10518:	4807      	ldr	r0, [pc, #28]	; (10538 <conn_cleanup+0x7c>)
   1051a:	f008 bab3 	b.w	18a84 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   1051e:	6968      	ldr	r0, [r5, #20]
   10520:	b108      	cbz	r0, 10526 <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
   10522:	f7ff fead 	bl	10280 <tx_free>
		net_buf_unref(buf);
   10526:	4628      	mov	r0, r5
   10528:	f004 f9ac 	bl	14884 <net_buf_unref>
   1052c:	e7ca      	b.n	104c4 <conn_cleanup+0x8>
   1052e:	bf00      	nop
   10530:	0002040c 	.word	0x0002040c
   10534:	0001ea60 	.word	0x0001ea60
   10538:	2000a3b0 	.word	0x2000a3b0

0001053c <bt_conn_recv>:
{
   1053c:	b570      	push	{r4, r5, r6, lr}
   1053e:	4616      	mov	r6, r2
   10540:	4604      	mov	r4, r0
   10542:	460d      	mov	r5, r1
	tx_notify(conn);
   10544:	f00a fe59 	bl	1b1fa <tx_notify>
	switch (flags) {
   10548:	2e01      	cmp	r6, #1
   1054a:	d01f      	beq.n	1058c <bt_conn_recv+0x50>
   1054c:	2e02      	cmp	r6, #2
   1054e:	d140      	bne.n	105d2 <bt_conn_recv+0x96>
		if (conn->rx) {
   10550:	6923      	ldr	r3, [r4, #16]
   10552:	b133      	cbz	r3, 10562 <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   10554:	4826      	ldr	r0, [pc, #152]	; (105f0 <bt_conn_recv+0xb4>)
   10556:	2145      	movs	r1, #69	; 0x45
   10558:	f009 fa07 	bl	1996a <printk>
			bt_conn_reset_rx_state(conn);
   1055c:	4620      	mov	r0, r4
   1055e:	f00a fe96 	bl	1b28e <bt_conn_reset_rx_state>
		conn->rx = buf;
   10562:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   10564:	6921      	ldr	r1, [r4, #16]
   10566:	898a      	ldrh	r2, [r1, #12]
   10568:	2a01      	cmp	r2, #1
   1056a:	d93f      	bls.n	105ec <bt_conn_recv+0xb0>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1056c:	688b      	ldr	r3, [r1, #8]
   1056e:	881b      	ldrh	r3, [r3, #0]
   10570:	3304      	adds	r3, #4
   10572:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   10574:	429a      	cmp	r2, r3
   10576:	d339      	bcc.n	105ec <bt_conn_recv+0xb0>
	if (conn->rx->len > acl_total_len) {
   10578:	d931      	bls.n	105de <bt_conn_recv+0xa2>
		BT_ERR("ACL len mismatch (%u > %u)",
   1057a:	481e      	ldr	r0, [pc, #120]	; (105f4 <bt_conn_recv+0xb8>)
   1057c:	2145      	movs	r1, #69	; 0x45
   1057e:	f009 f9f4 	bl	1996a <printk>
		bt_conn_reset_rx_state(conn);
   10582:	4620      	mov	r0, r4
}
   10584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   10588:	f00a be81 	b.w	1b28e <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1058c:	6920      	ldr	r0, [r4, #16]
   1058e:	b938      	cbnz	r0, 105a0 <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   10590:	2145      	movs	r1, #69	; 0x45
   10592:	4819      	ldr	r0, [pc, #100]	; (105f8 <bt_conn_recv+0xbc>)
			BT_ERR("Not enough buffer space for L2CAP data");
   10594:	f009 f9e9 	bl	1996a <printk>
			bt_conn_reset_rx_state(conn);
   10598:	4620      	mov	r0, r4
   1059a:	f00a fe78 	bl	1b28e <bt_conn_reset_rx_state>
   1059e:	e001      	b.n	105a4 <bt_conn_recv+0x68>
		if (!buf->len) {
   105a0:	89ae      	ldrh	r6, [r5, #12]
   105a2:	b926      	cbnz	r6, 105ae <bt_conn_recv+0x72>
			net_buf_unref(buf);
   105a4:	4628      	mov	r0, r5
}
   105a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   105aa:	f004 b96b 	b.w	14884 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   105ae:	3008      	adds	r0, #8
   105b0:	f00b ff15 	bl	1c3de <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   105b4:	4286      	cmp	r6, r0
   105b6:	d902      	bls.n	105be <bt_conn_recv+0x82>
			BT_ERR("Not enough buffer space for L2CAP data");
   105b8:	2145      	movs	r1, #69	; 0x45
   105ba:	4810      	ldr	r0, [pc, #64]	; (105fc <bt_conn_recv+0xc0>)
   105bc:	e7ea      	b.n	10594 <bt_conn_recv+0x58>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   105be:	6920      	ldr	r0, [r4, #16]
   105c0:	89aa      	ldrh	r2, [r5, #12]
   105c2:	68a9      	ldr	r1, [r5, #8]
   105c4:	3008      	adds	r0, #8
   105c6:	f00b ff12 	bl	1c3ee <net_buf_simple_add_mem>
		net_buf_unref(buf);
   105ca:	4628      	mov	r0, r5
   105cc:	f004 f95a 	bl	14884 <net_buf_unref>
		break;
   105d0:	e7c8      	b.n	10564 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   105d2:	4632      	mov	r2, r6
   105d4:	2145      	movs	r1, #69	; 0x45
   105d6:	480a      	ldr	r0, [pc, #40]	; (10600 <bt_conn_recv+0xc4>)
   105d8:	f009 f9c7 	bl	1996a <printk>
		bt_conn_reset_rx_state(conn);
   105dc:	e7dc      	b.n	10598 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   105de:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf);
   105e0:	4620      	mov	r0, r4
	conn->rx = NULL;
   105e2:	6123      	str	r3, [r4, #16]
}
   105e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   105e8:	f000 bed0 	b.w	1138c <bt_l2cap_recv>
}
   105ec:	bd70      	pop	{r4, r5, r6, pc}
   105ee:	bf00      	nop
   105f0:	0002043c 	.word	0x0002043c
   105f4:	000204d0 	.word	0x000204d0
   105f8:	0002045e 	.word	0x0002045e
   105fc:	00020481 	.word	0x00020481
   10600:	000204ad 	.word	0x000204ad

00010604 <bt_conn_send_cb>:
{
   10604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10608:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1060a:	7a83      	ldrb	r3, [r0, #10]
{
   1060c:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1060e:	2b07      	cmp	r3, #7
{
   10610:	460d      	mov	r5, r1
   10612:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   10614:	d009      	beq.n	1062a <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
   10616:	4821      	ldr	r0, [pc, #132]	; (1069c <bt_conn_send_cb+0x98>)
   10618:	2145      	movs	r1, #69	; 0x45
   1061a:	f009 f9a6 	bl	1996a <printk>
		net_buf_unref(buf);
   1061e:	4628      	mov	r0, r5
   10620:	f004 f930 	bl	14884 <net_buf_unref>
			return -ENOTCONN;
   10624:	f06f 0038 	mvn.w	r0, #56	; 0x38
   10628:	e01a      	b.n	10660 <bt_conn_send_cb+0x5c>
	if (cb) {
   1062a:	2a00      	cmp	r2, #0
   1062c:	d034      	beq.n	10698 <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
   1062e:	f007 ffc1 	bl	185b4 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   10632:	4b1b      	ldr	r3, [pc, #108]	; (106a0 <bt_conn_send_cb+0x9c>)
   10634:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   10636:	481b      	ldr	r0, [pc, #108]	; (106a4 <bt_conn_send_cb+0xa0>)
   10638:	bf07      	ittee	eq
   1063a:	2200      	moveq	r2, #0
   1063c:	2300      	moveq	r3, #0
   1063e:	f04f 32ff 	movne.w	r2, #4294967295
   10642:	f04f 33ff 	movne.w	r3, #4294967295
   10646:	f006 ff4f 	bl	174e8 <z_impl_k_queue_get>
   1064a:	4604      	mov	r4, r0
		if (!tx) {
   1064c:	b950      	cbnz	r0, 10664 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
   1064e:	2145      	movs	r1, #69	; 0x45
   10650:	4815      	ldr	r0, [pc, #84]	; (106a8 <bt_conn_send_cb+0xa4>)
   10652:	f009 f98a 	bl	1996a <printk>
			net_buf_unref(buf);
   10656:	4628      	mov	r0, r5
   10658:	f004 f914 	bl	14884 <net_buf_unref>
			return -ENOBUFS;
   1065c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   10660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   10664:	7ab3      	ldrb	r3, [r6, #10]
   10666:	2b07      	cmp	r3, #7
   10668:	d00a      	beq.n	10680 <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
   1066a:	2157      	movs	r1, #87	; 0x57
   1066c:	480f      	ldr	r0, [pc, #60]	; (106ac <bt_conn_send_cb+0xa8>)
   1066e:	f009 f97c 	bl	1996a <printk>
			net_buf_unref(buf);
   10672:	4628      	mov	r0, r5
   10674:	f004 f906 	bl	14884 <net_buf_unref>
			tx_free(tx);
   10678:	4620      	mov	r0, r4
   1067a:	f7ff fe01 	bl	10280 <tx_free>
   1067e:	e7d1      	b.n	10624 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
   10680:	2300      	movs	r3, #0
		tx->user_data = user_data;
   10682:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   10686:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   10688:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1068a:	f106 0034 	add.w	r0, r6, #52	; 0x34
   1068e:	4629      	mov	r1, r5
   10690:	f004 f8ca 	bl	14828 <net_buf_put>
	return 0;
   10694:	2000      	movs	r0, #0
   10696:	e7e3      	b.n	10660 <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
   10698:	614a      	str	r2, [r1, #20]
   1069a:	e7f6      	b.n	1068a <bt_conn_send_cb+0x86>
   1069c:	000204f0 	.word	0x000204f0
   106a0:	2000a3d0 	.word	0x2000a3d0
   106a4:	20008694 	.word	0x20008694
   106a8:	00020504 	.word	0x00020504
   106ac:	00020527 	.word	0x00020527

000106b0 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   106b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   106b4:	2500      	movs	r5, #0
   106b6:	4b1c      	ldr	r3, [pc, #112]	; (10728 <bt_conn_prepare_events+0x78>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   106b8:	462a      	mov	r2, r5
   106ba:	2101      	movs	r1, #1
{
   106bc:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   106be:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   106c0:	2601      	movs	r6, #1
   106c2:	f008 ff03 	bl	194cc <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   106c6:	f04f 0914 	mov.w	r9, #20
   106ca:	4c18      	ldr	r4, [pc, #96]	; (1072c <bt_conn_prepare_events+0x7c>)
	if (!atomic_get(&conn->ref)) {
   106cc:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
   106d0:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   106d4:	f00a fd8e 	bl	1b1f4 <atomic_get>
   106d8:	b178      	cbz	r0, 106fa <bt_conn_prepare_events+0x4a>
	if (conn->state == BT_CONN_DISCONNECTED &&
   106da:	7aa3      	ldrb	r3, [r4, #10]
   106dc:	b9ab      	cbnz	r3, 1070a <bt_conn_prepare_events+0x5a>
   106de:	1d23      	adds	r3, r4, #4
   106e0:	e8d3 2fef 	ldaex	r2, [r3]
   106e4:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   106e8:	e8c3 1fe0 	stlex	r0, r1, [r3]
   106ec:	2800      	cmp	r0, #0
   106ee:	d1f7      	bne.n	106e0 <bt_conn_prepare_events+0x30>
   106f0:	0653      	lsls	r3, r2, #25
   106f2:	d50a      	bpl.n	1070a <bt_conn_prepare_events+0x5a>
		conn_cleanup(conn);
   106f4:	4620      	mov	r0, r4
   106f6:	f7ff fee1 	bl	104bc <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   106fa:	3501      	adds	r5, #1
   106fc:	2d0a      	cmp	r5, #10
   106fe:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   10702:	d1e3      	bne.n	106cc <bt_conn_prepare_events+0x1c>
		}
	}
#endif

	return ev_count;
}
   10704:	4630      	mov	r0, r6
   10706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   1070a:	7aa3      	ldrb	r3, [r4, #10]
   1070c:	2b07      	cmp	r3, #7
   1070e:	d1f4      	bne.n	106fa <bt_conn_prepare_events+0x4a>
	k_poll_event_init(&events[0],
   10710:	f104 0334 	add.w	r3, r4, #52	; 0x34
   10714:	2200      	movs	r2, #0
   10716:	2104      	movs	r1, #4
   10718:	4640      	mov	r0, r8
   1071a:	f008 fed7 	bl	194cc <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1071e:	2301      	movs	r3, #1
   10720:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   10724:	441e      	add	r6, r3
   10726:	e7e8      	b.n	106fa <bt_conn_prepare_events+0x4a>
   10728:	20008428 	.word	0x20008428
   1072c:	20008b58 	.word	0x20008b58

00010730 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   10730:	b570      	push	{r4, r5, r6, lr}
   10732:	4606      	mov	r6, r0
   10734:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   10736:	4810      	ldr	r0, [pc, #64]	; (10778 <bt_conn_add_le+0x48>)
   10738:	210a      	movs	r1, #10
   1073a:	f00a fd84 	bl	1b246 <bt_conn_new>
	if (!conn) {
   1073e:	4604      	mov	r4, r0
   10740:	b1b8      	cbz	r0, 10772 <bt_conn_add_le+0x42>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   10742:	2230      	movs	r2, #48	; 0x30
   10744:	2100      	movs	r1, #0
   10746:	3058      	adds	r0, #88	; 0x58
   10748:	f00a fb7a 	bl	1ae40 <memset>
   1074c:	4b0b      	ldr	r3, [pc, #44]	; (1077c <bt_conn_add_le+0x4c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1074e:	4a0c      	ldr	r2, [pc, #48]	; (10780 <bt_conn_add_le+0x50>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   10750:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   10752:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   10754:	4629      	mov	r1, r5
   10756:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   1075a:	62a3      	str	r3, [r4, #40]	; 0x28
   1075c:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   1075e:	7226      	strb	r6, [r4, #8]
   10760:	f104 0088 	add.w	r0, r4, #136	; 0x88
   10764:	f00a fb41 	bl	1adea <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   10768:	2301      	movs	r3, #1
   1076a:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1076c:	4b05      	ldr	r3, [pc, #20]	; (10784 <bt_conn_add_le+0x54>)
   1076e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   10772:	4620      	mov	r0, r4
   10774:	bd70      	pop	{r4, r5, r6, pc}
   10776:	bf00      	nop
   10778:	20008b58 	.word	0x20008b58
   1077c:	00010de9 	.word	0x00010de9
   10780:	0001b241 	.word	0x0001b241
   10784:	00280018 	.word	0x00280018

00010788 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   10788:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   1078a:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1078e:	e8d4 3fef 	ldaex	r3, [r4]
   10792:	1e5a      	subs	r2, r3, #1
   10794:	e8c4 2fe1 	stlex	r1, r2, [r4]
   10798:	2900      	cmp	r1, #0
   1079a:	d1f8      	bne.n	1078e <bt_conn_unref+0x6>

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   1079c:	2b00      	cmp	r3, #0
   1079e:	dc0a      	bgt.n	107b6 <bt_conn_unref+0x2e>
   107a0:	4909      	ldr	r1, [pc, #36]	; (107c8 <bt_conn_unref+0x40>)
   107a2:	480a      	ldr	r0, [pc, #40]	; (107cc <bt_conn_unref+0x44>)
   107a4:	f240 7265 	movw	r2, #1893	; 0x765
   107a8:	f009 f8df 	bl	1996a <printk>
   107ac:	f240 7165 	movw	r1, #1893	; 0x765
   107b0:	4805      	ldr	r0, [pc, #20]	; (107c8 <bt_conn_unref+0x40>)
   107b2:	f009 fb80 	bl	19eb6 <assert_post_action>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
   107b6:	4620      	mov	r0, r4
   107b8:	f00a fd1c 	bl	1b1f4 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   107bc:	b918      	cbnz	r0, 107c6 <bt_conn_unref+0x3e>
		bt_le_adv_resume();
	}
}
   107be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   107c2:	f7ff bb19 	b.w	fdf8 <bt_le_adv_resume>
}
   107c6:	bd10      	pop	{r4, pc}
   107c8:	0002040c 	.word	0x0002040c
   107cc:	0001ea60 	.word	0x0001ea60

000107d0 <bt_conn_lookup_handle>:
{
   107d0:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   107d2:	210a      	movs	r1, #10
   107d4:	4801      	ldr	r0, [pc, #4]	; (107dc <bt_conn_lookup_handle+0xc>)
   107d6:	f00a bd9a 	b.w	1b30e <conn_lookup_handle>
   107da:	bf00      	nop
   107dc:	20008b58 	.word	0x20008b58

000107e0 <bt_conn_set_state>:
{
   107e0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   107e2:	7a85      	ldrb	r5, [r0, #10]
{
   107e4:	4604      	mov	r4, r0
	if (conn->state == state) {
   107e6:	428d      	cmp	r5, r1
{
   107e8:	460e      	mov	r6, r1
	if (conn->state == state) {
   107ea:	d10b      	bne.n	10804 <bt_conn_set_state+0x24>
		BT_WARN("no transition %s", state2str(state));
   107ec:	2157      	movs	r1, #87	; 0x57
   107ee:	2d08      	cmp	r5, #8
   107f0:	bf96      	itet	ls
   107f2:	4b6d      	ldrls	r3, [pc, #436]	; (109a8 <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
   107f4:	4a6d      	ldrhi	r2, [pc, #436]	; (109ac <bt_conn_set_state+0x1cc>)
   107f6:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   107fa:	486d      	ldr	r0, [pc, #436]	; (109b0 <bt_conn_set_state+0x1d0>)
}
   107fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   10800:	f009 b8b3 	b.w	1996a <printk>
	conn->state = state;
   10804:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   10806:	b165      	cbz	r5, 10822 <bt_conn_set_state+0x42>
   10808:	2d06      	cmp	r5, #6
   1080a:	d00d      	beq.n	10828 <bt_conn_set_state+0x48>
	switch (conn->state) {
   1080c:	7aa3      	ldrb	r3, [r4, #10]
   1080e:	2b08      	cmp	r3, #8
   10810:	f200 80c5 	bhi.w	1099e <bt_conn_set_state+0x1be>
   10814:	e8df f003 	tbb	[pc, r3]
   10818:	c7c70f4a 	.word	0xc7c70f4a
   1081c:	278ec7c7 	.word	0x278ec7c7
   10820:	c7          	.byte	0xc7
   10821:	00          	.byte	0x00
		bt_conn_ref(conn);
   10822:	f00a fd5d 	bl	1b2e0 <bt_conn_ref>
		break;
   10826:	e7f1      	b.n	1080c <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10828:	7883      	ldrb	r3, [r0, #2]
   1082a:	2b01      	cmp	r3, #1
   1082c:	d1ee      	bne.n	1080c <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->deferred_work);
   1082e:	3058      	adds	r0, #88	; 0x58
   10830:	f008 f998 	bl	18b64 <k_delayed_work_cancel>
   10834:	e7ea      	b.n	1080c <bt_conn_set_state+0x2c>
		tx->pending_no_cb = 0U;
   10836:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   10838:	4d5e      	ldr	r5, [pc, #376]	; (109b4 <bt_conn_set_state+0x1d4>)
	__asm__ volatile(
   1083a:	f04f 0320 	mov.w	r3, #32
   1083e:	f3ef 8211 	mrs	r2, BASEPRI
   10842:	f383 8811 	msr	BASEPRI, r3
   10846:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1084a:	69e3      	ldr	r3, [r4, #28]
   1084c:	2b00      	cmp	r3, #0
   1084e:	f000 8087 	beq.w	10960 <bt_conn_set_state+0x180>
			conn->pending_no_cb--;
   10852:	3b01      	subs	r3, #1
   10854:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   10856:	f382 8811 	msr	BASEPRI, r2
   1085a:	f3bf 8f6f 	isb	sy
   1085e:	4628      	mov	r0, r5
   10860:	f007 feae 	bl	185c0 <z_impl_k_sem_give>
}
   10864:	e7e9      	b.n	1083a <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   10866:	78a3      	ldrb	r3, [r4, #2]
   10868:	2b04      	cmp	r3, #4
   1086a:	f000 809c 	beq.w	109a6 <bt_conn_set_state+0x1c6>
	z_impl_k_queue_init(queue);
   1086e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10872:	f00c fbea 	bl	1d04a <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
   10876:	2100      	movs	r1, #0
   10878:	484f      	ldr	r0, [pc, #316]	; (109b8 <bt_conn_set_state+0x1d8>)
   1087a:	f008 ff33 	bl	196e4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1087e:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
   10880:	4620      	mov	r0, r4
	list->tail = NULL;
   10882:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   10886:	f000 fc8f 	bl	111a8 <bt_l2cap_connected>
		notify_connected(conn);
   1088a:	4620      	mov	r0, r4
   1088c:	f7ff fd02 	bl	10294 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10890:	78e3      	ldrb	r3, [r4, #3]
   10892:	2b01      	cmp	r3, #1
   10894:	f040 8087 	bne.w	109a6 <bt_conn_set_state+0x1c6>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   10898:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1089c:	2300      	movs	r3, #0
   1089e:	f104 0158 	add.w	r1, r4, #88	; 0x58
   108a2:	4846      	ldr	r0, [pc, #280]	; (109bc <bt_conn_set_state+0x1dc>)
}
   108a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   108a8:	f008 b8ec 	b.w	18a84 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   108ac:	78a3      	ldrb	r3, [r4, #2]
   108ae:	2b04      	cmp	r3, #4
   108b0:	d104      	bne.n	108bc <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   108b2:	4620      	mov	r0, r4
}
   108b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   108b8:	f7ff bf66 	b.w	10788 <bt_conn_unref>
		switch (old_state) {
   108bc:	2d08      	cmp	r5, #8
   108be:	d872      	bhi.n	109a6 <bt_conn_set_state+0x1c6>
   108c0:	a301      	add	r3, pc, #4	; (adr r3, 108c8 <bt_conn_set_state+0xe8>)
   108c2:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   108c6:	bf00      	nop
   108c8:	0001092d 	.word	0x0001092d
   108cc:	000108ed 	.word	0x000108ed
   108d0:	0001091f 	.word	0x0001091f
   108d4:	000108b3 	.word	0x000108b3
   108d8:	000108b3 	.word	0x000108b3
   108dc:	0001091f 	.word	0x0001091f
   108e0:	0001091f 	.word	0x0001091f
   108e4:	0001092d 	.word	0x0001092d
   108e8:	0001092d 	.word	0x0001092d
			tx_notify(conn);
   108ec:	4620      	mov	r0, r4
   108ee:	f00a fc84 	bl	1b1fa <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   108f2:	78a3      	ldrb	r3, [r4, #2]
   108f4:	2b01      	cmp	r3, #1
   108f6:	d103      	bne.n	10900 <bt_conn_set_state+0x120>
				k_delayed_work_cancel(&conn->deferred_work);
   108f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   108fc:	f008 f932 	bl	18b64 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10900:	3404      	adds	r4, #4
   10902:	e8d4 3fef 	ldaex	r3, [r4]
   10906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1090a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1090e:	2a00      	cmp	r2, #0
   10910:	d1f7      	bne.n	10902 <bt_conn_set_state+0x122>
}
   10912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10916:	2100      	movs	r1, #0
   10918:	4827      	ldr	r0, [pc, #156]	; (109b8 <bt_conn_set_state+0x1d8>)
   1091a:	f008 bee3 	b.w	196e4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1091e:	7a63      	ldrb	r3, [r4, #9]
   10920:	2b00      	cmp	r3, #0
   10922:	d0c6      	beq.n	108b2 <bt_conn_set_state+0xd2>
				notify_connected(conn);
   10924:	4620      	mov	r0, r4
   10926:	f7ff fcb5 	bl	10294 <notify_connected>
   1092a:	e7c2      	b.n	108b2 <bt_conn_set_state+0xd2>
			BT_WARN("Invalid (%u) old state", state);
   1092c:	4632      	mov	r2, r6
   1092e:	2157      	movs	r1, #87	; 0x57
   10930:	4823      	ldr	r0, [pc, #140]	; (109c0 <bt_conn_set_state+0x1e0>)
   10932:	e763      	b.n	107fc <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10934:	78a3      	ldrb	r3, [r4, #2]
   10936:	2b01      	cmp	r3, #1
   10938:	d135      	bne.n	109a6 <bt_conn_set_state+0x1c6>
				K_MSEC(10 * bt_dev.create_param.timeout));
   1093a:	4b22      	ldr	r3, [pc, #136]	; (109c4 <bt_conn_set_state+0x1e4>)
   1093c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   10940:	8a9d      	ldrh	r5, [r3, #20]
   10942:	230a      	movs	r3, #10
   10944:	f240 30e7 	movw	r0, #999	; 0x3e7
   10948:	2100      	movs	r1, #0
   1094a:	435d      	muls	r5, r3
   1094c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10950:	2300      	movs	r3, #0
   10952:	fbc5 0106 	smlal	r0, r1, r5, r6
   10956:	f7f8 f8e9 	bl	8b2c <__aeabi_uldivmod>
   1095a:	4602      	mov	r2, r0
   1095c:	460b      	mov	r3, r1
   1095e:	e79e      	b.n	1089e <bt_conn_set_state+0xbe>
	return list->head;
   10960:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   10962:	b128      	cbz	r0, 10970 <bt_conn_set_state+0x190>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10964:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   10966:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10968:	4288      	cmp	r0, r1
	list->head = node;
   1096a:	6163      	str	r3, [r4, #20]
	list->tail = node;
   1096c:	bf08      	it	eq
   1096e:	61a3      	streq	r3, [r4, #24]
   10970:	f382 8811 	msr	BASEPRI, r2
   10974:	f3bf 8f6f 	isb	sy
		if (!node) {
   10978:	b1a8      	cbz	r0, 109a6 <bt_conn_set_state+0x1c6>
	__asm__ volatile(
   1097a:	f04f 0220 	mov.w	r2, #32
   1097e:	f3ef 8311 	mrs	r3, BASEPRI
   10982:	f382 8811 	msr	BASEPRI, r2
   10986:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1098a:	68c2      	ldr	r2, [r0, #12]
   1098c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1098e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   10990:	f383 8811 	msr	BASEPRI, r3
   10994:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   10998:	f7ff fc72 	bl	10280 <tx_free>
   1099c:	e75f      	b.n	1085e <bt_conn_set_state+0x7e>
		BT_WARN("no valid (%u) state was set", state);
   1099e:	4632      	mov	r2, r6
   109a0:	2157      	movs	r1, #87	; 0x57
   109a2:	4809      	ldr	r0, [pc, #36]	; (109c8 <bt_conn_set_state+0x1e8>)
   109a4:	e72a      	b.n	107fc <bt_conn_set_state+0x1c>
}
   109a6:	bd70      	pop	{r4, r5, r6, pc}
   109a8:	0001dcf8 	.word	0x0001dcf8
   109ac:	00020552 	.word	0x00020552
   109b0:	0002055c 	.word	0x0002055c
   109b4:	200080c8 	.word	0x200080c8
   109b8:	20008428 	.word	0x20008428
   109bc:	2000a3b0 	.word	0x2000a3b0
   109c0:	00020572 	.word	0x00020572
   109c4:	20008000 	.word	0x20008000
   109c8:	0002058e 	.word	0x0002058e

000109cc <bt_conn_lookup_addr_le>:
{
   109cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   109d0:	4607      	mov	r7, r0
   109d2:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   109d4:	2500      	movs	r5, #0
   109d6:	4e0e      	ldr	r6, [pc, #56]	; (10a10 <bt_conn_lookup_addr_le+0x44>)
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   109d8:	4630      	mov	r0, r6
   109da:	f00a fc81 	bl	1b2e0 <bt_conn_ref>
		if (!conn) {
   109de:	4604      	mov	r4, r0
   109e0:	b120      	cbz	r0, 109ec <bt_conn_lookup_addr_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   109e2:	7883      	ldrb	r3, [r0, #2]
   109e4:	2b01      	cmp	r3, #1
   109e6:	d00a      	beq.n	109fe <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
   109e8:	f7ff fece 	bl	10788 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   109ec:	3501      	adds	r5, #1
   109ee:	2d0a      	cmp	r5, #10
   109f0:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   109f4:	d1f0      	bne.n	109d8 <bt_conn_lookup_addr_le+0xc>
	return NULL;
   109f6:	2400      	movs	r4, #0
}
   109f8:	4620      	mov	r0, r4
   109fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   109fe:	4642      	mov	r2, r8
   10a00:	4639      	mov	r1, r7
   10a02:	f00a fc4d 	bl	1b2a0 <bt_conn_is_peer_addr_le>
   10a06:	2800      	cmp	r0, #0
   10a08:	d1f6      	bne.n	109f8 <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   10a0a:	4620      	mov	r0, r4
   10a0c:	e7ec      	b.n	109e8 <bt_conn_lookup_addr_le+0x1c>
   10a0e:	bf00      	nop
   10a10:	20008b58 	.word	0x20008b58

00010a14 <bt_conn_exists_le>:
{
   10a14:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   10a16:	f7ff ffd9 	bl	109cc <bt_conn_lookup_addr_le>
	if (conn) {
   10a1a:	4604      	mov	r4, r0
   10a1c:	b170      	cbz	r0, 10a3c <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   10a1e:	7a83      	ldrb	r3, [r0, #10]
   10a20:	2157      	movs	r1, #87	; 0x57
   10a22:	2b08      	cmp	r3, #8
   10a24:	bf96      	itet	ls
   10a26:	4a06      	ldrls	r2, [pc, #24]	; (10a40 <bt_conn_exists_le+0x2c>)
   10a28:	4a06      	ldrhi	r2, [pc, #24]	; (10a44 <bt_conn_exists_le+0x30>)
   10a2a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   10a2e:	4806      	ldr	r0, [pc, #24]	; (10a48 <bt_conn_exists_le+0x34>)
   10a30:	f008 ff9b 	bl	1996a <printk>
		bt_conn_unref(conn);
   10a34:	4620      	mov	r0, r4
   10a36:	f7ff fea7 	bl	10788 <bt_conn_unref>
		return true;
   10a3a:	2001      	movs	r0, #1
}
   10a3c:	bd10      	pop	{r4, pc}
   10a3e:	bf00      	nop
   10a40:	0001dcf8 	.word	0x0001dcf8
   10a44:	00020552 	.word	0x00020552
   10a48:	000205af 	.word	0x000205af

00010a4c <bt_conn_lookup_state_le>:
{
   10a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a50:	4606      	mov	r6, r0
   10a52:	460f      	mov	r7, r1
   10a54:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   10a56:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10a58:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   10a5c:	f8df a048 	ldr.w	sl, [pc, #72]	; 10aa8 <bt_conn_lookup_state_le+0x5c>
   10a60:	fb09 a005 	mla	r0, r9, r5, sl
   10a64:	f00a fc3c 	bl	1b2e0 <bt_conn_ref>
		if (!conn) {
   10a68:	4604      	mov	r4, r0
   10a6a:	b120      	cbz	r0, 10a76 <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
   10a6c:	7883      	ldrb	r3, [r0, #2]
   10a6e:	2b01      	cmp	r3, #1
   10a70:	d006      	beq.n	10a80 <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
   10a72:	f00a fc35 	bl	1b2e0 <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   10a76:	3501      	adds	r5, #1
   10a78:	2d0a      	cmp	r5, #10
   10a7a:	d1f1      	bne.n	10a60 <bt_conn_lookup_state_le+0x14>
	return NULL;
   10a7c:	2400      	movs	r4, #0
   10a7e:	e00f      	b.n	10aa0 <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   10a80:	b147      	cbz	r7, 10a94 <bt_conn_lookup_state_le+0x48>
   10a82:	463a      	mov	r2, r7
   10a84:	4631      	mov	r1, r6
   10a86:	f00a fc0b 	bl	1b2a0 <bt_conn_is_peer_addr_le>
   10a8a:	b918      	cbnz	r0, 10a94 <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
   10a8c:	4620      	mov	r0, r4
   10a8e:	f7ff fe7b 	bl	10788 <bt_conn_unref>
			continue;
   10a92:	e7f0      	b.n	10a76 <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
   10a94:	7aa3      	ldrb	r3, [r4, #10]
   10a96:	4543      	cmp	r3, r8
   10a98:	d1f8      	bne.n	10a8c <bt_conn_lookup_state_le+0x40>
   10a9a:	7a23      	ldrb	r3, [r4, #8]
   10a9c:	42b3      	cmp	r3, r6
   10a9e:	d1f5      	bne.n	10a8c <bt_conn_lookup_state_le+0x40>
}
   10aa0:	4620      	mov	r0, r4
   10aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10aa6:	bf00      	nop
   10aa8:	20008b58 	.word	0x20008b58

00010aac <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   10aac:	b510      	push	{r4, lr}
	info->type = conn->type;
   10aae:	7882      	ldrb	r2, [r0, #2]
   10ab0:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   10ab2:	78c4      	ldrb	r4, [r0, #3]
	info->id = conn->id;

	switch (conn->type) {
   10ab4:	2a01      	cmp	r2, #1
	info->role = conn->role;
   10ab6:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   10ab8:	7a03      	ldrb	r3, [r0, #8]
   10aba:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
   10abc:	d11c      	bne.n	10af8 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   10abe:	f100 0288 	add.w	r2, r0, #136	; 0x88
   10ac2:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   10ac4:	4a0e      	ldr	r2, [pc, #56]	; (10b00 <bt_conn_get_info+0x54>)
   10ac6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   10aca:	4413      	add	r3, r2
   10acc:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   10ace:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   10ad2:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_MASTER) {
   10ad6:	b964      	cbnz	r4, 10af2 <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
   10ad8:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   10adc:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   10ae0:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   10ae2:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   10ae6:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   10ae8:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   10aec:	2000      	movs	r0, #0
		info->le.timeout = conn->le.timeout;
   10aee:	830b      	strh	r3, [r1, #24]
		return 0;
#endif
	}

	return -EINVAL;
}
   10af0:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   10af2:	e9c1 2303 	strd	r2, r3, [r1, #12]
   10af6:	e7f1      	b.n	10adc <bt_conn_get_info+0x30>
	return -EINVAL;
   10af8:	f06f 0015 	mvn.w	r0, #21
   10afc:	e7f8      	b.n	10af0 <bt_conn_get_info+0x44>
   10afe:	bf00      	nop
   10b00:	20008000 	.word	0x20008000

00010b04 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   10b04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10b08:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10b0a:	4844      	ldr	r0, [pc, #272]	; (10c1c <bt_conn_le_create+0x118>)
   10b0c:	f00a fb72 	bl	1b1f4 <atomic_get>
   10b10:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10b12:	0781      	lsls	r1, r0, #30
{
   10b14:	4615      	mov	r5, r2
   10b16:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10b18:	d576      	bpl.n	10c08 <bt_conn_le_create+0x104>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   10b1a:	4610      	mov	r0, r2
   10b1c:	f00a fac8 	bl	1b0b0 <bt_le_conn_params_valid>
   10b20:	b928      	cbnz	r0, 10b2e <bt_conn_le_create+0x2a>
		return -EINVAL;
   10b22:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   10b26:	4628      	mov	r0, r5
   10b28:	b002      	add	sp, #8
   10b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b2e:	483b      	ldr	r0, [pc, #236]	; (10c1c <bt_conn_le_create+0x118>)
   10b30:	f00a fb60 	bl	1b1f4 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10b34:	0642      	lsls	r2, r0, #25
   10b36:	d4f4      	bmi.n	10b22 <bt_conn_le_create+0x1e>
   10b38:	4838      	ldr	r0, [pc, #224]	; (10c1c <bt_conn_le_create+0x118>)
   10b3a:	f00a fb5b 	bl	1b1f4 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   10b3e:	0503      	lsls	r3, r0, #20
   10b40:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   10b44:	d463      	bmi.n	10c0e <bt_conn_le_create+0x10a>
	if (!bt_le_scan_random_addr_check()) {
   10b46:	f7fd fee7 	bl	e918 <bt_le_scan_random_addr_check>
   10b4a:	2800      	cmp	r0, #0
   10b4c:	d0e9      	beq.n	10b22 <bt_conn_le_create+0x1e>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   10b4e:	4621      	mov	r1, r4
   10b50:	4640      	mov	r0, r8
   10b52:	f7ff ff5f 	bl	10a14 <bt_conn_exists_le>
   10b56:	2800      	cmp	r0, #0
   10b58:	d1e3      	bne.n	10b22 <bt_conn_le_create+0x1e>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   10b5a:	7823      	ldrb	r3, [r4, #0]
   10b5c:	3b02      	subs	r3, #2
   10b5e:	2b01      	cmp	r3, #1
   10b60:	d847      	bhi.n	10bf2 <bt_conn_le_create+0xee>
   10b62:	2207      	movs	r2, #7
   10b64:	4621      	mov	r1, r4
   10b66:	4668      	mov	r0, sp
   10b68:	f00a f93f 	bl	1adea <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   10b6c:	f89d 3000 	ldrb.w	r3, [sp]
   10b70:	3b02      	subs	r3, #2
   10b72:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   10b76:	4669      	mov	r1, sp
   10b78:	2000      	movs	r0, #0
   10b7a:	f7ff fdd9 	bl	10730 <bt_conn_add_le>
	if (!conn) {
   10b7e:	4604      	mov	r4, r0
   10b80:	2800      	cmp	r0, #0
   10b82:	d047      	beq.n	10c14 <bt_conn_le_create+0x110>
	conn->le.interval_min = param->interval_min;
   10b84:	882b      	ldrh	r3, [r5, #0]
   10b86:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   10b8a:	886b      	ldrh	r3, [r5, #2]
   10b8c:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   10b90:	88ab      	ldrh	r3, [r5, #4]
   10b92:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   10b96:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
   10b98:	4d21      	ldr	r5, [pc, #132]	; (10c20 <bt_conn_le_create+0x11c>)
	conn->le.timeout = param->timeout;
   10b9a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   10b9e:	f105 0c08 	add.w	ip, r5, #8
   10ba2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   10ba6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   10baa:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   10bac:	2b00      	cmp	r3, #0
   10bae:	bf08      	it	eq
   10bb0:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   10bb4:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   10bb6:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   10bb8:	b903      	cbnz	r3, 10bbc <bt_conn_le_create+0xb8>
   10bba:	89ab      	ldrh	r3, [r5, #12]
   10bbc:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   10bbe:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   10bc0:	b903      	cbnz	r3, 10bc4 <bt_conn_le_create+0xc0>
   10bc2:	89eb      	ldrh	r3, [r5, #14]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   10bc4:	2106      	movs	r1, #6
   10bc6:	4620      	mov	r0, r4
	bt_dev.create_param.window_coded =
   10bc8:	826b      	strh	r3, [r5, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   10bca:	f7ff fe09 	bl	107e0 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   10bce:	4620      	mov	r0, r4
   10bd0:	f00a fa51 	bl	1b076 <bt_le_create_conn>
	if (err) {
   10bd4:	4605      	mov	r5, r0
   10bd6:	b1a8      	cbz	r0, 10c04 <bt_conn_le_create+0x100>
		conn->err = 0;
   10bd8:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10bda:	4620      	mov	r0, r4
   10bdc:	4631      	mov	r1, r6
		conn->err = 0;
   10bde:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10be0:	f7ff fdfe 	bl	107e0 <bt_conn_set_state>
		bt_conn_unref(conn);
   10be4:	4620      	mov	r0, r4
   10be6:	f7ff fdcf 	bl	10788 <bt_conn_unref>
		bt_le_scan_update(false);
   10bea:	4630      	mov	r0, r6
   10bec:	f7fd ff20 	bl	ea30 <bt_le_scan_update>
		return err;
   10bf0:	e799      	b.n	10b26 <bt_conn_le_create+0x22>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   10bf2:	4621      	mov	r1, r4
   10bf4:	f00a fa3d 	bl	1b072 <bt_lookup_id_addr>
   10bf8:	2207      	movs	r2, #7
   10bfa:	4601      	mov	r1, r0
   10bfc:	4668      	mov	r0, sp
   10bfe:	f00a f8f4 	bl	1adea <memcpy>
}
   10c02:	e7b8      	b.n	10b76 <bt_conn_le_create+0x72>
	*ret_conn = conn;
   10c04:	603c      	str	r4, [r7, #0]
	return 0;
   10c06:	e78e      	b.n	10b26 <bt_conn_le_create+0x22>
		return -EAGAIN;
   10c08:	f06f 050a 	mvn.w	r5, #10
   10c0c:	e78b      	b.n	10b26 <bt_conn_le_create+0x22>
		return -EALREADY;
   10c0e:	f06f 0544 	mvn.w	r5, #68	; 0x44
   10c12:	e788      	b.n	10b26 <bt_conn_le_create+0x22>
		return -ENOMEM;
   10c14:	f06f 050b 	mvn.w	r5, #11
   10c18:	e785      	b.n	10b26 <bt_conn_le_create+0x22>
   10c1a:	bf00      	nop
   10c1c:	20008094 	.word	0x20008094
   10c20:	20008000 	.word	0x20008000

00010c24 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   10c24:	b570      	push	{r4, r5, r6, lr}
   10c26:	4606      	mov	r6, r0
   10c28:	4834      	ldr	r0, [pc, #208]	; (10cfc <bt_le_set_auto_conn+0xd8>)
   10c2a:	f00a fae3 	bl	1b1f4 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10c2e:	0780      	lsls	r0, r0, #30
{
   10c30:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10c32:	d55c      	bpl.n	10cee <bt_le_set_auto_conn+0xca>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   10c34:	b929      	cbnz	r1, 10c42 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
   10c36:	f7fd fe6f 	bl	e918 <bt_le_scan_random_addr_check>
   10c3a:	b940      	cbnz	r0, 10c4e <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   10c3c:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   10c40:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   10c42:	4608      	mov	r0, r1
   10c44:	f00a fa34 	bl	1b0b0 <bt_le_conn_params_valid>
   10c48:	2800      	cmp	r0, #0
   10c4a:	d1f4      	bne.n	10c36 <bt_le_set_auto_conn+0x12>
   10c4c:	e7f6      	b.n	10c3c <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   10c4e:	4631      	mov	r1, r6
   10c50:	2000      	movs	r0, #0
   10c52:	f7ff febb 	bl	109cc <bt_conn_lookup_addr_le>
	if (!conn) {
   10c56:	4604      	mov	r4, r0
   10c58:	b928      	cbnz	r0, 10c66 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   10c5a:	4631      	mov	r1, r6
   10c5c:	f7ff fd68 	bl	10730 <bt_conn_add_le>
		if (!conn) {
   10c60:	4604      	mov	r4, r0
   10c62:	2800      	cmp	r0, #0
   10c64:	d046      	beq.n	10cf4 <bt_le_set_auto_conn+0xd0>
		if (!atomic_test_and_set_bit(conn->flags,
   10c66:	1d23      	adds	r3, r4, #4
	if (param) {
   10c68:	b365      	cbz	r5, 10cc4 <bt_le_set_auto_conn+0xa0>
	conn->le.interval_min = param->interval_min;
   10c6a:	882a      	ldrh	r2, [r5, #0]
   10c6c:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   10c70:	886a      	ldrh	r2, [r5, #2]
   10c72:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   10c76:	88aa      	ldrh	r2, [r5, #4]
   10c78:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   10c7c:	88ea      	ldrh	r2, [r5, #6]
   10c7e:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10c82:	e8d3 2fef 	ldaex	r2, [r3]
   10c86:	f042 0101 	orr.w	r1, r2, #1
   10c8a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   10c8e:	2800      	cmp	r0, #0
   10c90:	d1f7      	bne.n	10c82 <bt_le_set_auto_conn+0x5e>
		if (!atomic_test_and_set_bit(conn->flags,
   10c92:	07d1      	lsls	r1, r2, #31
   10c94:	d402      	bmi.n	10c9c <bt_le_set_auto_conn+0x78>
			bt_conn_ref(conn);
   10c96:	4620      	mov	r0, r4
   10c98:	f00a fb22 	bl	1b2e0 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   10c9c:	7aa3      	ldrb	r3, [r4, #10]
   10c9e:	b963      	cbnz	r3, 10cba <bt_le_set_auto_conn+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10ca0:	4816      	ldr	r0, [pc, #88]	; (10cfc <bt_le_set_auto_conn+0xd8>)
   10ca2:	f00a faa7 	bl	1b1f4 <atomic_get>
   10ca6:	0783      	lsls	r3, r0, #30
   10ca8:	d507      	bpl.n	10cba <bt_le_set_auto_conn+0x96>
		if (param) {
   10caa:	b11d      	cbz	r5, 10cb4 <bt_le_set_auto_conn+0x90>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   10cac:	2102      	movs	r1, #2
   10cae:	4620      	mov	r0, r4
   10cb0:	f7ff fd96 	bl	107e0 <bt_conn_set_state>
		bt_le_scan_update(false);
   10cb4:	2000      	movs	r0, #0
   10cb6:	f7fd febb 	bl	ea30 <bt_le_scan_update>
	bt_conn_unref(conn);
   10cba:	4620      	mov	r0, r4
   10cbc:	f7ff fd64 	bl	10788 <bt_conn_unref>
	return 0;
   10cc0:	2000      	movs	r0, #0
   10cc2:	e7bd      	b.n	10c40 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10cc4:	e8d3 2fef 	ldaex	r2, [r3]
   10cc8:	f022 0101 	bic.w	r1, r2, #1
   10ccc:	e8c3 1fe0 	stlex	r0, r1, [r3]
   10cd0:	2800      	cmp	r0, #0
   10cd2:	d1f7      	bne.n	10cc4 <bt_le_set_auto_conn+0xa0>
		if (atomic_test_and_clear_bit(conn->flags,
   10cd4:	07d2      	lsls	r2, r2, #31
   10cd6:	d5e1      	bpl.n	10c9c <bt_le_set_auto_conn+0x78>
			bt_conn_unref(conn);
   10cd8:	4620      	mov	r0, r4
   10cda:	f7ff fd55 	bl	10788 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   10cde:	7aa3      	ldrb	r3, [r4, #10]
   10ce0:	2b02      	cmp	r3, #2
   10ce2:	d1db      	bne.n	10c9c <bt_le_set_auto_conn+0x78>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10ce4:	4629      	mov	r1, r5
   10ce6:	4620      	mov	r0, r4
   10ce8:	f7ff fd7a 	bl	107e0 <bt_conn_set_state>
   10cec:	e7d6      	b.n	10c9c <bt_le_set_auto_conn+0x78>
		return -EAGAIN;
   10cee:	f06f 000a 	mvn.w	r0, #10
   10cf2:	e7a5      	b.n	10c40 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   10cf4:	f06f 000b 	mvn.w	r0, #11
   10cf8:	e7a2      	b.n	10c40 <bt_le_set_auto_conn+0x1c>
   10cfa:	bf00      	nop
   10cfc:	20008094 	.word	0x20008094

00010d00 <bt_conn_disconnect>:
{
   10d00:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10d02:	7883      	ldrb	r3, [r0, #2]
{
   10d04:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10d06:	2b01      	cmp	r3, #1
{
   10d08:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10d0a:	d103      	bne.n	10d14 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   10d0c:	2100      	movs	r1, #0
   10d0e:	3088      	adds	r0, #136	; 0x88
   10d10:	f7ff ff88 	bl	10c24 <bt_le_set_auto_conn>
	switch (conn->state) {
   10d14:	7aa3      	ldrb	r3, [r4, #10]
   10d16:	3b02      	subs	r3, #2
   10d18:	2b06      	cmp	r3, #6
   10d1a:	d805      	bhi.n	10d28 <bt_conn_disconnect+0x28>
   10d1c:	e8df f003 	tbb	[pc, r3]
   10d20:	12040408 	.word	0x12040408
   10d24:	271f      	.short	0x271f
   10d26:	10          	.byte	0x10
   10d27:	00          	.byte	0x00
   10d28:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   10d2c:	4628      	mov	r0, r5
   10d2e:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10d30:	4620      	mov	r0, r4
   10d32:	2100      	movs	r1, #0
		conn->err = reason;
   10d34:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10d36:	f7ff fd53 	bl	107e0 <bt_conn_set_state>
			bt_le_scan_update(false);
   10d3a:	2000      	movs	r0, #0
   10d3c:	f7fd fe78 	bl	ea30 <bt_le_scan_update>
		return 0;
   10d40:	2500      	movs	r5, #0
   10d42:	e7f3      	b.n	10d2c <bt_conn_disconnect+0x2c>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
   10d44:	2157      	movs	r1, #87	; 0x57
   10d46:	4810      	ldr	r0, [pc, #64]	; (10d88 <bt_conn_disconnect+0x88>)
   10d48:	f008 fe0f 	bl	1996a <printk>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10d4c:	4620      	mov	r0, r4
		conn->err = reason;
   10d4e:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10d50:	2100      	movs	r1, #0
   10d52:	f7ff fd45 	bl	107e0 <bt_conn_set_state>
}
   10d56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   10d5a:	f7fe bff1 	b.w	fd40 <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->deferred_work);
   10d5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   10d62:	f007 feff 	bl	18b64 <k_delayed_work_cancel>
}
   10d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   10d6a:	f7fd be3d 	b.w	e9e8 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   10d6e:	4629      	mov	r1, r5
   10d70:	8820      	ldrh	r0, [r4, #0]
   10d72:	f00a f982 	bl	1b07a <bt_hci_disconnect>
	if (err) {
   10d76:	4605      	mov	r5, r0
   10d78:	2800      	cmp	r0, #0
   10d7a:	d1d7      	bne.n	10d2c <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   10d7c:	2108      	movs	r1, #8
   10d7e:	4620      	mov	r0, r4
   10d80:	f7ff fd2e 	bl	107e0 <bt_conn_set_state>
	return 0;
   10d84:	e7d2      	b.n	10d2c <bt_conn_disconnect+0x2c>
   10d86:	bf00      	nop
   10d88:	000205d7 	.word	0x000205d7

00010d8c <send_conn_le_param_update>:
{
   10d8c:	b538      	push	{r3, r4, r5, lr}
   10d8e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   10d90:	4608      	mov	r0, r1
{
   10d92:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   10d94:	f00a f98c 	bl	1b0b0 <bt_le_conn_params_valid>
   10d98:	b308      	cbz	r0, 10dde <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   10d9a:	4b12      	ldr	r3, [pc, #72]	; (10de4 <send_conn_le_param_update+0x58>)
   10d9c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   10da0:	0799      	lsls	r1, r3, #30
   10da2:	d407      	bmi.n	10db4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   10da4:	78e3      	ldrb	r3, [r4, #3]
   10da6:	b173      	cbz	r3, 10dc6 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   10da8:	4629      	mov	r1, r5
   10daa:	4620      	mov	r0, r4
}
   10dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   10db0:	f000 bb14 	b.w	113dc <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   10db4:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   10db8:	079a      	lsls	r2, r3, #30
   10dba:	d5f3      	bpl.n	10da4 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10dbc:	1d20      	adds	r0, r4, #4
   10dbe:	f00a fa19 	bl	1b1f4 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   10dc2:	0543      	lsls	r3, r0, #21
   10dc4:	d4ee      	bmi.n	10da4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   10dc6:	4629      	mov	r1, r5
   10dc8:	4620      	mov	r0, r4
   10dca:	f00a fac4 	bl	1b356 <bt_conn_le_conn_update>
		if (rc == 0) {
   10dce:	b928      	cbnz	r0, 10ddc <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   10dd0:	88ab      	ldrh	r3, [r5, #4]
   10dd2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   10dd6:	88eb      	ldrh	r3, [r5, #6]
   10dd8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   10ddc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10dde:	f06f 0015 	mvn.w	r0, #21
   10de2:	e7fb      	b.n	10ddc <send_conn_le_param_update+0x50>
   10de4:	20008000 	.word	0x20008000

00010de8 <deferred_work>:
{
   10de8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   10dea:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   10dee:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   10df0:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   10df4:	b99b      	cbnz	r3, 10e1e <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   10df6:	4630      	mov	r0, r6
   10df8:	f00a fb0d 	bl	1b416 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   10dfc:	4b26      	ldr	r3, [pc, #152]	; (10e98 <deferred_work+0xb0>)
   10dfe:	681d      	ldr	r5, [r3, #0]
   10e00:	b92d      	cbnz	r5, 10e0e <deferred_work+0x26>
		bt_conn_unref(conn);
   10e02:	4630      	mov	r0, r6
}
   10e04:	b002      	add	sp, #8
   10e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   10e0a:	f7ff bcbd 	b.w	10788 <bt_conn_unref>
		if (cb->disconnected) {
   10e0e:	686b      	ldr	r3, [r5, #4]
   10e10:	b11b      	cbz	r3, 10e1a <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   10e12:	4630      	mov	r0, r6
   10e14:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   10e18:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10e1a:	692d      	ldr	r5, [r5, #16]
   10e1c:	e7f0      	b.n	10e00 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   10e1e:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   10e22:	2b01      	cmp	r3, #1
   10e24:	d12f      	bne.n	10e86 <deferred_work+0x9e>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10e26:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   10e2a:	b923      	cbnz	r3, 10e36 <deferred_work+0x4e>
}
   10e2c:	b002      	add	sp, #8
   10e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
   10e32:	f7fd bdd9 	b.w	e9e8 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   10e36:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10e3a:	e8d5 3fef 	ldaex	r3, [r5]
   10e3e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   10e42:	e8c5 2fe1 	stlex	r1, r2, [r5]
   10e46:	2900      	cmp	r1, #0
   10e48:	d1f7      	bne.n	10e3a <deferred_work+0x52>
   10e4a:	059b      	lsls	r3, r3, #22
   10e4c:	d51d      	bpl.n	10e8a <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   10e4e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   10e52:	f8ad 3000 	strh.w	r3, [sp]
   10e56:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   10e5a:	f8ad 3002 	strh.w	r3, [sp, #2]
   10e5e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   10e62:	f8ad 3004 	strh.w	r3, [sp, #4]
   10e66:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   10e6a:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   10e6e:	4669      	mov	r1, sp
   10e70:	4630      	mov	r0, r6
   10e72:	f7ff ff8b 	bl	10d8c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10e76:	e8d5 3fef 	ldaex	r3, [r5]
   10e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10e7e:	e8c5 3fe2 	stlex	r2, r3, [r5]
   10e82:	2a00      	cmp	r2, #0
   10e84:	d1f7      	bne.n	10e76 <deferred_work+0x8e>
}
   10e86:	b002      	add	sp, #8
   10e88:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
   10e8a:	466b      	mov	r3, sp
   10e8c:	4a03      	ldr	r2, [pc, #12]	; (10e9c <deferred_work+0xb4>)
   10e8e:	6810      	ldr	r0, [r2, #0]
   10e90:	6851      	ldr	r1, [r2, #4]
   10e92:	c303      	stmia	r3!, {r0, r1}
   10e94:	e7eb      	b.n	10e6e <deferred_work+0x86>
   10e96:	bf00      	nop
   10e98:	2000a968 	.word	0x2000a968
   10e9c:	0001d848 	.word	0x0001d848

00010ea0 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   10ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ea2:	4604      	mov	r4, r0
   10ea4:	460d      	mov	r5, r1
   10ea6:	4617      	mov	r7, r2
   10ea8:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   10eaa:	f00c f943 	bl	1d134 <k_is_in_isr>
   10eae:	b150      	cbz	r0, 10ec6 <bt_conn_create_pdu_timeout+0x26>
   10eb0:	490f      	ldr	r1, [pc, #60]	; (10ef0 <bt_conn_create_pdu_timeout+0x50>)
   10eb2:	4810      	ldr	r0, [pc, #64]	; (10ef4 <bt_conn_create_pdu_timeout+0x54>)
   10eb4:	f640 12ee 	movw	r2, #2542	; 0x9ee
   10eb8:	f008 fd57 	bl	1996a <printk>
   10ebc:	f640 11ee 	movw	r1, #2542	; 0x9ee
   10ec0:	480b      	ldr	r0, [pc, #44]	; (10ef0 <bt_conn_create_pdu_timeout+0x50>)
   10ec2:	f008 fff8 	bl	19eb6 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   10ec6:	480c      	ldr	r0, [pc, #48]	; (10ef8 <bt_conn_create_pdu_timeout+0x58>)
   10ec8:	463a      	mov	r2, r7
   10eca:	2c00      	cmp	r4, #0
   10ecc:	bf18      	it	ne
   10ece:	4620      	movne	r0, r4
   10ed0:	4633      	mov	r3, r6
   10ed2:	f00b fa5e 	bl	1c392 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   10ed6:	4604      	mov	r4, r0
   10ed8:	b928      	cbnz	r0, 10ee6 <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   10eda:	2157      	movs	r1, #87	; 0x57
   10edc:	4807      	ldr	r0, [pc, #28]	; (10efc <bt_conn_create_pdu_timeout+0x5c>)
   10ede:	f008 fd44 	bl	1996a <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   10ee2:	4620      	mov	r0, r4
   10ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   10ee6:	1d69      	adds	r1, r5, #5
   10ee8:	3008      	adds	r0, #8
   10eea:	f003 fc79 	bl	147e0 <net_buf_simple_reserve>
	return buf;
   10eee:	e7f8      	b.n	10ee2 <bt_conn_create_pdu_timeout+0x42>
   10ef0:	0002040c 	.word	0x0002040c
   10ef4:	0001ea60 	.word	0x0001ea60
   10ef8:	200086dc 	.word	0x200086dc
   10efc:	00020603 	.word	0x00020603

00010f00 <bt_conn_create_frag_timeout>:
{
   10f00:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   10f02:	4801      	ldr	r0, [pc, #4]	; (10f08 <bt_conn_create_frag_timeout+0x8>)
   10f04:	f7ff bfcc 	b.w	10ea0 <bt_conn_create_pdu_timeout>
   10f08:	20008734 	.word	0x20008734

00010f0c <create_frag>:
{
   10f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f10:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   10f12:	f04f 33ff 	mov.w	r3, #4294967295
   10f16:	f04f 32ff 	mov.w	r2, #4294967295
   10f1a:	2000      	movs	r0, #0
{
   10f1c:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   10f1e:	f7ff ffef 	bl	10f00 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   10f22:	7ab3      	ldrb	r3, [r6, #10]
		frag = bt_conn_create_frag(0);
   10f24:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   10f26:	2b07      	cmp	r3, #7
   10f28:	f04f 0600 	mov.w	r6, #0
   10f2c:	d005      	beq.n	10f3a <create_frag+0x2e>
		net_buf_unref(frag);
   10f2e:	f003 fca9 	bl	14884 <net_buf_unref>
		return NULL;
   10f32:	4635      	mov	r5, r6
}
   10f34:	4628      	mov	r0, r5
   10f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   10f3a:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   10f3c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   10f40:	4e0c      	ldr	r6, [pc, #48]	; (10f74 <create_frag+0x68>)
   10f42:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   10f44:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
   10f48:	f00b fa49 	bl	1c3de <net_buf_simple_tailroom>
   10f4c:	4580      	cmp	r8, r0
   10f4e:	d20c      	bcs.n	10f6a <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   10f50:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10f54:	f854 1f08 	ldr.w	r1, [r4, #8]!
   10f58:	4632      	mov	r2, r6
   10f5a:	4638      	mov	r0, r7
   10f5c:	f00b fa47 	bl	1c3ee <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   10f60:	4631      	mov	r1, r6
   10f62:	4620      	mov	r0, r4
   10f64:	f003 fd6a 	bl	14a3c <net_buf_simple_pull>
   10f68:	e7e4      	b.n	10f34 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   10f6a:	4638      	mov	r0, r7
   10f6c:	f00b fa37 	bl	1c3de <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   10f70:	b286      	uxth	r6, r0
   10f72:	e7ef      	b.n	10f54 <create_frag+0x48>
   10f74:	20008000 	.word	0x20008000

00010f78 <bt_conn_process_tx>:
{
   10f78:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   10f7a:	7a83      	ldrb	r3, [r0, #10]
{
   10f7c:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   10f7e:	b973      	cbnz	r3, 10f9e <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10f80:	1d03      	adds	r3, r0, #4
   10f82:	e8d3 2fef 	ldaex	r2, [r3]
   10f86:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   10f8a:	e8c3 1fe5 	stlex	r5, r1, [r3]
   10f8e:	2d00      	cmp	r5, #0
   10f90:	d1f7      	bne.n	10f82 <bt_conn_process_tx+0xa>
   10f92:	0653      	lsls	r3, r2, #25
   10f94:	d503      	bpl.n	10f9e <bt_conn_process_tx+0x26>
}
   10f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   10f9a:	f7ff ba8f 	b.w	104bc <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   10f9e:	2200      	movs	r2, #0
   10fa0:	2300      	movs	r3, #0
   10fa2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10fa6:	f003 fbeb 	bl	14780 <net_buf_get>
	BT_ASSERT(buf);
   10faa:	4605      	mov	r5, r0
   10fac:	b958      	cbnz	r0, 10fc6 <bt_conn_process_tx+0x4e>
   10fae:	f240 525f 	movw	r2, #1375	; 0x55f
   10fb2:	491e      	ldr	r1, [pc, #120]	; (1102c <bt_conn_process_tx+0xb4>)
   10fb4:	481e      	ldr	r0, [pc, #120]	; (11030 <bt_conn_process_tx+0xb8>)
   10fb6:	f008 fcd8 	bl	1996a <printk>
   10fba:	4040      	eors	r0, r0
   10fbc:	f380 8811 	msr	BASEPRI, r0
   10fc0:	f04f 0003 	mov.w	r0, #3
   10fc4:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   10fc6:	4e1b      	ldr	r6, [pc, #108]	; (11034 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   10fc8:	89aa      	ldrh	r2, [r5, #12]
   10fca:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   10fce:	429a      	cmp	r2, r3
   10fd0:	d807      	bhi.n	10fe2 <bt_conn_process_tx+0x6a>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   10fd2:	2300      	movs	r3, #0
   10fd4:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   10fd6:	4629      	mov	r1, r5
   10fd8:	4620      	mov	r0, r4
   10fda:	f7ff f971 	bl	102c0 <send_frag>
	if (!send_buf(conn, buf)) {
   10fde:	b130      	cbz	r0, 10fee <bt_conn_process_tx+0x76>
}
   10fe0:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   10fe2:	4629      	mov	r1, r5
   10fe4:	4620      	mov	r0, r4
   10fe6:	f7ff ff91 	bl	10f0c <create_frag>
	if (!frag) {
   10fea:	4601      	mov	r1, r0
   10fec:	b920      	cbnz	r0, 10ff8 <bt_conn_process_tx+0x80>
		net_buf_unref(buf);
   10fee:	4628      	mov	r0, r5
}
   10ff0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   10ff4:	f003 bc46 	b.w	14884 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   10ff8:	2301      	movs	r3, #1
   10ffa:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   10ffc:	4620      	mov	r0, r4
   10ffe:	f7ff f95f 	bl	102c0 <send_frag>
   11002:	2800      	cmp	r0, #0
   11004:	d0f3      	beq.n	10fee <bt_conn_process_tx+0x76>
	while (buf->len > conn_mtu(conn)) {
   11006:	89aa      	ldrh	r2, [r5, #12]
   11008:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   1100c:	429a      	cmp	r2, r3
   1100e:	d802      	bhi.n	11016 <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   11010:	2300      	movs	r3, #0
   11012:	2203      	movs	r2, #3
   11014:	e7df      	b.n	10fd6 <bt_conn_process_tx+0x5e>
		frag = create_frag(conn, buf);
   11016:	4629      	mov	r1, r5
   11018:	4620      	mov	r0, r4
   1101a:	f7ff ff77 	bl	10f0c <create_frag>
		if (!frag) {
   1101e:	4601      	mov	r1, r0
   11020:	2800      	cmp	r0, #0
   11022:	d0e4      	beq.n	10fee <bt_conn_process_tx+0x76>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11024:	2301      	movs	r3, #1
   11026:	461a      	mov	r2, r3
   11028:	e7e8      	b.n	10ffc <bt_conn_process_tx+0x84>
   1102a:	bf00      	nop
   1102c:	0002040c 	.word	0x0002040c
   11030:	0001ea60 	.word	0x0001ea60
   11034:	20008000 	.word	0x20008000

00011038 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   11038:	4b0b      	ldr	r3, [pc, #44]	; (11068 <bt_conn_index+0x30>)
{
   1103a:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   1103c:	1ac0      	subs	r0, r0, r3
   1103e:	4b0b      	ldr	r3, [pc, #44]	; (1106c <bt_conn_index+0x34>)
   11040:	1184      	asrs	r4, r0, #6
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11042:	f5b0 6fd8 	cmp.w	r0, #1728	; 0x6c0
		index = conn - acl_conns;
   11046:	fb03 f404 	mul.w	r4, r3, r4
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   1104a:	d90a      	bls.n	11062 <bt_conn_index+0x2a>
   1104c:	4908      	ldr	r1, [pc, #32]	; (11070 <bt_conn_index+0x38>)
   1104e:	4809      	ldr	r0, [pc, #36]	; (11074 <bt_conn_index+0x3c>)
   11050:	f640 2295 	movw	r2, #2709	; 0xa95
   11054:	f008 fc89 	bl	1996a <printk>
   11058:	f640 2195 	movw	r1, #2709	; 0xa95
   1105c:	4804      	ldr	r0, [pc, #16]	; (11070 <bt_conn_index+0x38>)
   1105e:	f008 ff2a 	bl	19eb6 <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   11062:	b2e0      	uxtb	r0, r4
   11064:	bd10      	pop	{r4, pc}
   11066:	bf00      	nop
   11068:	20008b58 	.word	0x20008b58
   1106c:	aaaaaaab 	.word	0xaaaaaaab
   11070:	0002040c 	.word	0x0002040c
   11074:	0001ea60 	.word	0x0001ea60

00011078 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   11078:	2809      	cmp	r0, #9
   1107a:	d806      	bhi.n	1108a <bt_conn_lookup_index+0x12>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   1107c:	4b04      	ldr	r3, [pc, #16]	; (11090 <bt_conn_lookup_index+0x18>)
   1107e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11082:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   11086:	f00a b92b 	b.w	1b2e0 <bt_conn_ref>
}
   1108a:	2000      	movs	r0, #0
   1108c:	4770      	bx	lr
   1108e:	bf00      	nop
   11090:	20008b58 	.word	0x20008b58

00011094 <bt_conn_init>:

int bt_conn_init(void)
{
   11094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   11096:	4917      	ldr	r1, [pc, #92]	; (110f4 <bt_conn_init+0x60>)
   11098:	4817      	ldr	r0, [pc, #92]	; (110f8 <bt_conn_init+0x64>)
   1109a:	f00b ffe3 	bl	1d064 <k_queue_append>
   1109e:	4917      	ldr	r1, [pc, #92]	; (110fc <bt_conn_init+0x68>)
   110a0:	4815      	ldr	r0, [pc, #84]	; (110f8 <bt_conn_init+0x64>)
   110a2:	f00b ffdf 	bl	1d064 <k_queue_append>
   110a6:	4916      	ldr	r1, [pc, #88]	; (11100 <bt_conn_init+0x6c>)
   110a8:	4813      	ldr	r0, [pc, #76]	; (110f8 <bt_conn_init+0x64>)
   110aa:	f00b ffdb 	bl	1d064 <k_queue_append>
	}

	bt_att_init();
   110ae:	f00a fd32 	bl	1bb16 <bt_att_init>

	err = bt_smp_init();
   110b2:	f00b f96b 	bl	1c38c <bt_smp_init>
	if (err) {
   110b6:	4605      	mov	r5, r0
   110b8:	b9d0      	cbnz	r0, 110f0 <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   110ba:	f00a fa15 	bl	1b4e8 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   110be:	462e      	mov	r6, r5
   110c0:	4f10      	ldr	r7, [pc, #64]	; (11104 <bt_conn_init+0x70>)
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   110c2:	4638      	mov	r0, r7
   110c4:	f00a f90c 	bl	1b2e0 <bt_conn_ref>

			if (!conn) {
   110c8:	4604      	mov	r4, r0
   110ca:	b160      	cbz	r0, 110e6 <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   110cc:	3004      	adds	r0, #4
   110ce:	f00a f891 	bl	1b1f4 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   110d2:	07c3      	lsls	r3, r0, #31
   110d4:	d504      	bpl.n	110e0 <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   110d6:	2102      	movs	r1, #2
   110d8:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   110da:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   110dc:	f7ff fb80 	bl	107e0 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   110e0:	4620      	mov	r0, r4
   110e2:	f7ff fb51 	bl	10788 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   110e6:	3601      	adds	r6, #1
   110e8:	2e0a      	cmp	r6, #10
   110ea:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   110ee:	d1e8      	bne.n	110c2 <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   110f0:	4628      	mov	r0, r5
   110f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   110f4:	2000a96c 	.word	0x2000a96c
   110f8:	20008694 	.word	0x20008694
   110fc:	2000a97c 	.word	0x2000a97c
   11100:	2000a98c 	.word	0x2000a98c
   11104:	20008b58 	.word	0x20008b58

00011108 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   11108:	b570      	push	{r4, r5, r6, lr}
   1110a:	4602      	mov	r2, r0
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1110c:	2400      	movs	r4, #0
   1110e:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   11110:	4b09      	ldr	r3, [pc, #36]	; (11138 <l2cap_accept+0x30>)
   11112:	fb06 f504 	mul.w	r5, r6, r4
   11116:	58e8      	ldr	r0, [r5, r3]
   11118:	b148      	cbz	r0, 1112e <l2cap_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1111a:	3401      	adds	r4, #1
   1111c:	2c0a      	cmp	r4, #10
   1111e:	d1f8      	bne.n	11112 <l2cap_accept+0xa>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   11120:	4806      	ldr	r0, [pc, #24]	; (1113c <l2cap_accept+0x34>)
   11122:	2145      	movs	r1, #69	; 0x45
   11124:	f008 fc21 	bl	1996a <printk>
   11128:	f06f 000b 	mvn.w	r0, #11
   1112c:	e003      	b.n	11136 <l2cap_accept+0x2e>
		l2cap->chan.chan.ops = &ops;
   1112e:	4a04      	ldr	r2, [pc, #16]	; (11140 <l2cap_accept+0x38>)
   11130:	442b      	add	r3, r5
   11132:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   11134:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   11136:	bd70      	pop	{r4, r5, r6, pc}
   11138:	200092d8 	.word	0x200092d8
   1113c:	0002069b 	.word	0x0002069b
   11140:	0001dd3c 	.word	0x0001dd3c

00011144 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   11144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11146:	4605      	mov	r5, r0
   11148:	460f      	mov	r7, r1
   1114a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1114c:	2300      	movs	r3, #0
   1114e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11152:	2104      	movs	r1, #4
   11154:	2000      	movs	r0, #0
   11156:	f7ff fea3 	bl	10ea0 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1115a:	4604      	mov	r4, r0
   1115c:	b930      	cbnz	r0, 1116c <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1115e:	462a      	mov	r2, r5
   11160:	2145      	movs	r1, #69	; 0x45
   11162:	4806      	ldr	r0, [pc, #24]	; (1117c <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   11164:	f008 fc01 	bl	1996a <printk>
}
   11168:	4620      	mov	r0, r4
   1116a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1116c:	2104      	movs	r1, #4
   1116e:	3008      	adds	r0, #8
   11170:	f003 fc9e 	bl	14ab0 <net_buf_simple_add>
	hdr->code = code;
   11174:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   11176:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   11178:	8046      	strh	r6, [r0, #2]
	return buf;
   1117a:	e7f5      	b.n	11168 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   1117c:	000206c7 	.word	0x000206c7

00011180 <l2cap_rtx_timeout>:
{
   11180:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   11182:	4604      	mov	r4, r0
   11184:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   11188:	2145      	movs	r1, #69	; 0x45
   1118a:	4622      	mov	r2, r4
   1118c:	4805      	ldr	r0, [pc, #20]	; (111a4 <l2cap_rtx_timeout+0x24>)
   1118e:	f008 fbec 	bl	1996a <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
   11192:	4628      	mov	r0, r5
   11194:	4621      	mov	r1, r4
   11196:	f00a f908 	bl	1b3aa <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1119a:	4620      	mov	r0, r4
}
   1119c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   111a0:	f00a b924 	b.w	1b3ec <bt_l2cap_chan_del>
   111a4:	000206f4 	.word	0x000206f4

000111a8 <bt_l2cap_connected>:
{
   111a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   111ac:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   111ae:	4e2d      	ldr	r6, [pc, #180]	; (11264 <bt_l2cap_connected+0xbc>)
   111b0:	4f2d      	ldr	r7, [pc, #180]	; (11268 <bt_l2cap_connected+0xc0>)
   111b2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1126c <bt_l2cap_connected+0xc4>
   111b6:	42be      	cmp	r6, r7
   111b8:	d90a      	bls.n	111d0 <bt_l2cap_connected+0x28>
   111ba:	4641      	mov	r1, r8
   111bc:	482c      	ldr	r0, [pc, #176]	; (11270 <bt_l2cap_connected+0xc8>)
   111be:	f240 1267 	movw	r2, #359	; 0x167
   111c2:	f008 fbd2 	bl	1996a <printk>
   111c6:	f240 1167 	movw	r1, #359	; 0x167
   111ca:	4640      	mov	r0, r8
   111cc:	f008 fe73 	bl	19eb6 <assert_post_action>
   111d0:	42be      	cmp	r6, r7
   111d2:	d302      	bcc.n	111da <bt_l2cap_connected+0x32>
}
   111d4:	b003      	add	sp, #12
   111d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   111da:	4628      	mov	r0, r5
   111dc:	6873      	ldr	r3, [r6, #4]
   111de:	a901      	add	r1, sp, #4
   111e0:	4798      	blx	r3
   111e2:	2800      	cmp	r0, #0
   111e4:	db38      	blt.n	11258 <bt_l2cap_connected+0xb0>
		ch = BT_L2CAP_LE_CHAN(chan);
   111e6:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   111e8:	8833      	ldrh	r3, [r6, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   111ea:	2230      	movs	r2, #48	; 0x30
   111ec:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   111f0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   111f4:	2100      	movs	r1, #0
   111f6:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   111fa:	f8d6 9008 	ldr.w	r9, [r6, #8]
   111fe:	f009 fe1f 	bl	1ae40 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11202:	2200      	movs	r2, #0
   11204:	4b1b      	ldr	r3, [pc, #108]	; (11274 <bt_l2cap_connected+0xcc>)
   11206:	6163      	str	r3, [r4, #20]
   11208:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1120c:	e8d3 1fef 	ldaex	r1, [r3]
   11210:	e8c3 2fe0 	stlex	r0, r2, [r3]
   11214:	2800      	cmp	r0, #0
   11216:	d1f9      	bne.n	1120c <bt_l2cap_connected+0x64>
	parent->next = child;
   11218:	60a2      	str	r2, [r4, #8]
	return list->tail;
   1121a:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   1121c:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
   11220:	b9e2      	cbnz	r2, 1125c <bt_l2cap_connected+0xb4>
	list->head = node;
   11222:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
		if (chan->ops->connected) {
   11226:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   11228:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
   1122a:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   1122c:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   11230:	681b      	ldr	r3, [r3, #0]
   11232:	b103      	cbz	r3, 11236 <bt_l2cap_connected+0x8e>
			chan->ops->connected(chan);
   11234:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11236:	9b01      	ldr	r3, [sp, #4]
   11238:	3340      	adds	r3, #64	; 0x40
   1123a:	e8d3 2fef 	ldaex	r2, [r3]
   1123e:	f042 0201 	orr.w	r2, r2, #1
   11242:	e8c3 2fe1 	stlex	r1, r2, [r3]
   11246:	2900      	cmp	r1, #0
   11248:	d1f7      	bne.n	1123a <bt_l2cap_connected+0x92>
		if (chan->ops->status) {
   1124a:	9801      	ldr	r0, [sp, #4]
   1124c:	6843      	ldr	r3, [r0, #4]
   1124e:	699b      	ldr	r3, [r3, #24]
   11250:	b113      	cbz	r3, 11258 <bt_l2cap_connected+0xb0>
			chan->ops->status(chan, chan->status);
   11252:	f100 0140 	add.w	r1, r0, #64	; 0x40
   11256:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11258:	360c      	adds	r6, #12
   1125a:	e7ac      	b.n	111b6 <bt_l2cap_connected+0xe>
	parent->next = child;
   1125c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1125e:	656b      	str	r3, [r5, #84]	; 0x54
}
   11260:	e7e1      	b.n	11226 <bt_l2cap_connected+0x7e>
   11262:	bf00      	nop
   11264:	0001d628 	.word	0x0001d628
   11268:	0001d64c 	.word	0x0001d64c
   1126c:	00020709 	.word	0x00020709
   11270:	0001ea60 	.word	0x0001ea60
   11274:	00011181 	.word	0x00011181

00011278 <l2cap_recv>:
{
   11278:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1127a:	898b      	ldrh	r3, [r1, #12]
{
   1127c:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   1127e:	2b03      	cmp	r3, #3
{
   11280:	460d      	mov	r5, r1
   11282:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   11284:	d804      	bhi.n	11290 <l2cap_recv+0x18>
		BT_ERR("Too small L2CAP signaling PDU");
   11286:	2145      	movs	r1, #69	; 0x45
   11288:	483a      	ldr	r0, [pc, #232]	; (11374 <l2cap_recv+0xfc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   1128a:	f008 fb6e 	bl	1996a <printk>
		return 0;
   1128e:	e00d      	b.n	112ac <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   11290:	2104      	movs	r1, #4
   11292:	f105 0008 	add.w	r0, r5, #8
   11296:	f003 fbed 	bl	14a74 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1129a:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1129c:	8843      	ldrh	r3, [r0, #2]
   1129e:	4604      	mov	r4, r0
	if (buf->len != len) {
   112a0:	4293      	cmp	r3, r2
   112a2:	d006      	beq.n	112b2 <l2cap_recv+0x3a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   112a4:	2145      	movs	r1, #69	; 0x45
   112a6:	4834      	ldr	r0, [pc, #208]	; (11378 <l2cap_recv+0x100>)
   112a8:	f008 fb5f 	bl	1996a <printk>
}
   112ac:	2000      	movs	r0, #0
   112ae:	b005      	add	sp, #20
   112b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   112b2:	7841      	ldrb	r1, [r0, #1]
   112b4:	b911      	cbnz	r1, 112bc <l2cap_recv+0x44>
		BT_ERR("Invalid ident value in L2CAP PDU");
   112b6:	2145      	movs	r1, #69	; 0x45
   112b8:	4830      	ldr	r0, [pc, #192]	; (1137c <l2cap_recv+0x104>)
   112ba:	e7e6      	b.n	1128a <l2cap_recv+0x12>
	switch (hdr->code) {
   112bc:	7802      	ldrb	r2, [r0, #0]
   112be:	2a12      	cmp	r2, #18
   112c0:	d00f      	beq.n	112e2 <l2cap_recv+0x6a>
   112c2:	2a13      	cmp	r2, #19
   112c4:	d008      	beq.n	112d8 <l2cap_recv+0x60>
   112c6:	2a01      	cmp	r2, #1
   112c8:	d0f0      	beq.n	112ac <l2cap_recv+0x34>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   112ca:	2157      	movs	r1, #87	; 0x57
   112cc:	482c      	ldr	r0, [pc, #176]	; (11380 <l2cap_recv+0x108>)
   112ce:	f008 fb4c 	bl	1996a <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   112d2:	7861      	ldrb	r1, [r4, #1]
   112d4:	6830      	ldr	r0, [r6, #0]
   112d6:	e00d      	b.n	112f4 <l2cap_recv+0x7c>
	if (buf->len < sizeof(*rsp)) {
   112d8:	2b01      	cmp	r3, #1
   112da:	d8e7      	bhi.n	112ac <l2cap_recv+0x34>
		BT_ERR("Too small LE conn param rsp");
   112dc:	2145      	movs	r1, #69	; 0x45
   112de:	4829      	ldr	r0, [pc, #164]	; (11384 <l2cap_recv+0x10c>)
   112e0:	e7d3      	b.n	1128a <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   112e2:	2b07      	cmp	r3, #7
   112e4:	d802      	bhi.n	112ec <l2cap_recv+0x74>
		BT_ERR("Too small LE conn update param req");
   112e6:	2145      	movs	r1, #69	; 0x45
   112e8:	4827      	ldr	r0, [pc, #156]	; (11388 <l2cap_recv+0x110>)
   112ea:	e7ce      	b.n	1128a <l2cap_recv+0x12>
   112ec:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   112ee:	78e7      	ldrb	r7, [r4, #3]
   112f0:	b11f      	cbz	r7, 112fa <l2cap_recv+0x82>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   112f2:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   112f4:	f00a f8c1 	bl	1b47a <l2cap_send_reject.constprop.0>
		break;
   112f8:	e7d8      	b.n	112ac <l2cap_recv+0x34>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   112fa:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   112fc:	7850      	ldrb	r0, [r2, #1]
   112fe:	7813      	ldrb	r3, [r2, #0]
   11300:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11304:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   11308:	78d0      	ldrb	r0, [r2, #3]
   1130a:	7893      	ldrb	r3, [r2, #2]
   1130c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11310:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   11314:	7950      	ldrb	r0, [r2, #5]
   11316:	7913      	ldrb	r3, [r2, #4]
   11318:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1131c:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   11320:	7993      	ldrb	r3, [r2, #6]
   11322:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   11324:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   11326:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1132a:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   1132c:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   11330:	f7ff ff08 	bl	11144 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   11334:	4605      	mov	r5, r0
   11336:	2800      	cmp	r0, #0
   11338:	d0b8      	beq.n	112ac <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   1133a:	a902      	add	r1, sp, #8
   1133c:	4620      	mov	r0, r4
   1133e:	f7ff f895 	bl	1046c <le_param_req>
   11342:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   11344:	2102      	movs	r1, #2
   11346:	f105 0008 	add.w	r0, r5, #8
   1134a:	f003 fbb1 	bl	14ab0 <net_buf_simple_add>
	if (accepted) {
   1134e:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   11352:	b2db      	uxtb	r3, r3
   11354:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   11356:	462a      	mov	r2, r5
   11358:	463b      	mov	r3, r7
   1135a:	2105      	movs	r1, #5
   1135c:	4620      	mov	r0, r4
   1135e:	9700      	str	r7, [sp, #0]
   11360:	f00a f872 	bl	1b448 <bt_l2cap_send_cb>
	if (accepted) {
   11364:	2e00      	cmp	r6, #0
   11366:	d0a1      	beq.n	112ac <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   11368:	4620      	mov	r0, r4
   1136a:	a902      	add	r1, sp, #8
   1136c:	f009 fff3 	bl	1b356 <bt_conn_le_conn_update>
   11370:	e79c      	b.n	112ac <l2cap_recv+0x34>
   11372:	bf00      	nop
   11374:	0002073a 	.word	0x0002073a
   11378:	0002075d 	.word	0x0002075d
   1137c:	00020783 	.word	0x00020783
   11380:	000207f2 	.word	0x000207f2
   11384:	000207a9 	.word	0x000207a9
   11388:	000207ca 	.word	0x000207ca

0001138c <bt_l2cap_recv>:
{
   1138c:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1138e:	898b      	ldrh	r3, [r1, #12]
{
   11390:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   11392:	2b03      	cmp	r3, #3
{
   11394:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   11396:	d808      	bhi.n	113aa <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   11398:	2145      	movs	r1, #69	; 0x45
   1139a:	480e      	ldr	r0, [pc, #56]	; (113d4 <bt_l2cap_recv+0x48>)
   1139c:	f008 fae5 	bl	1996a <printk>
	net_buf_unref(buf);
   113a0:	4620      	mov	r0, r4
}
   113a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   113a6:	f003 ba6d 	b.w	14884 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   113aa:	2104      	movs	r1, #4
   113ac:	f104 0008 	add.w	r0, r4, #8
   113b0:	f003 fb60 	bl	14a74 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   113b4:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   113b6:	4628      	mov	r0, r5
   113b8:	4611      	mov	r1, r2
   113ba:	f00a f885 	bl	1b4c8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   113be:	b920      	cbnz	r0, 113ca <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   113c0:	2157      	movs	r1, #87	; 0x57
   113c2:	4805      	ldr	r0, [pc, #20]	; (113d8 <bt_l2cap_recv+0x4c>)
   113c4:	f008 fad1 	bl	1996a <printk>
		net_buf_unref(buf);
   113c8:	e7ea      	b.n	113a0 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   113ca:	6843      	ldr	r3, [r0, #4]
   113cc:	4621      	mov	r1, r4
   113ce:	691b      	ldr	r3, [r3, #16]
   113d0:	4798      	blx	r3
   113d2:	e7e5      	b.n	113a0 <bt_l2cap_recv+0x14>
   113d4:	00020815 	.word	0x00020815
   113d8:	00020837 	.word	0x00020837

000113dc <bt_l2cap_update_conn_param>:
{
   113dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   113de:	460c      	mov	r4, r1
	ident++;
   113e0:	4914      	ldr	r1, [pc, #80]	; (11434 <bt_l2cap_update_conn_param+0x58>)
{
   113e2:	4605      	mov	r5, r0
	ident++;
   113e4:	780b      	ldrb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   113e6:	2208      	movs	r2, #8
	ident++;
   113e8:	3301      	adds	r3, #1
	if (!ident) {
   113ea:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   113ee:	bf08      	it	eq
   113f0:	2301      	moveq	r3, #1
   113f2:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   113f4:	2012      	movs	r0, #18
   113f6:	7809      	ldrb	r1, [r1, #0]
   113f8:	f7ff fea4 	bl	11144 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   113fc:	4606      	mov	r6, r0
   113fe:	b1b0      	cbz	r0, 1142e <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   11400:	2108      	movs	r1, #8
   11402:	4408      	add	r0, r1
   11404:	f003 fb54 	bl	14ab0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   11408:	8822      	ldrh	r2, [r4, #0]
   1140a:	2105      	movs	r1, #5
   1140c:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1140e:	8862      	ldrh	r2, [r4, #2]
   11410:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   11412:	88a2      	ldrh	r2, [r4, #4]
   11414:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   11416:	88e2      	ldrh	r2, [r4, #6]
   11418:	2400      	movs	r4, #0
   1141a:	80c2      	strh	r2, [r0, #6]
   1141c:	4623      	mov	r3, r4
   1141e:	4632      	mov	r2, r6
   11420:	4628      	mov	r0, r5
   11422:	9400      	str	r4, [sp, #0]
   11424:	f00a f810 	bl	1b448 <bt_l2cap_send_cb>
	return 0;
   11428:	4620      	mov	r0, r4
}
   1142a:	b002      	add	sp, #8
   1142c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1142e:	f06f 000b 	mvn.w	r0, #11
   11432:	e7fa      	b.n	1142a <bt_l2cap_update_conn_param+0x4e>
   11434:	2000c5c8 	.word	0x2000c5c8

00011438 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   11438:	4b02      	ldr	r3, [pc, #8]	; (11444 <att_cfm_sent+0xc>)
   1143a:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   1143e:	f00a b866 	b.w	1b50e <att_sent>
   11442:	bf00      	nop
   11444:	0001b91d 	.word	0x0001b91d

00011448 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   11448:	4b02      	ldr	r3, [pc, #8]	; (11454 <att_rsp_sent+0xc>)
   1144a:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   1144e:	f00a b85e 	b.w	1b50e <att_sent>
   11452:	bf00      	nop
   11454:	0001b909 	.word	0x0001b909

00011458 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   11458:	4b02      	ldr	r3, [pc, #8]	; (11464 <att_req_sent+0xc>)
   1145a:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   1145e:	f00a b856 	b.w	1b50e <att_sent>
   11462:	bf00      	nop
   11464:	00011615 	.word	0x00011615

00011468 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   11468:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1146a:	7a83      	ldrb	r3, [r0, #10]
   1146c:	2b07      	cmp	r3, #7
   1146e:	d005      	beq.n	1147c <att_get+0x14>
		BT_WARN("Not connected");
   11470:	2157      	movs	r1, #87	; 0x57
   11472:	480e      	ldr	r0, [pc, #56]	; (114ac <att_get+0x44>)
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
   11474:	f008 fa79 	bl	1996a <printk>
		return NULL;
   11478:	2400      	movs	r4, #0
   1147a:	e008      	b.n	1148e <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1147c:	2104      	movs	r1, #4
   1147e:	f00a f823 	bl	1b4c8 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   11482:	4604      	mov	r4, r0
   11484:	b928      	cbnz	r0, 11492 <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   11486:	2145      	movs	r1, #69	; 0x45
   11488:	4809      	ldr	r0, [pc, #36]	; (114b0 <att_get+0x48>)
   1148a:	f008 fa6e 	bl	1996a <printk>
	}

	return att_chan->att;
}
   1148e:	4620      	mov	r0, r4
   11490:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11492:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
   11496:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1149a:	075b      	lsls	r3, r3, #29
   1149c:	d502      	bpl.n	114a4 <att_get+0x3c>
		BT_WARN("ATT channel flagged as disconnected");
   1149e:	2157      	movs	r1, #87	; 0x57
   114a0:	4804      	ldr	r0, [pc, #16]	; (114b4 <att_get+0x4c>)
   114a2:	e7e7      	b.n	11474 <att_get+0xc>
	return att_chan->att;
   114a4:	f850 4c08 	ldr.w	r4, [r0, #-8]
   114a8:	e7f1      	b.n	1148e <att_get+0x26>
   114aa:	bf00      	nop
   114ac:	00020871 	.word	0x00020871
   114b0:	00020884 	.word	0x00020884
   114b4:	000208a4 	.word	0x000208a4

000114b8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   114b8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   114ba:	3808      	subs	r0, #8
   114bc:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   114be:	a901      	add	r1, sp, #4
   114c0:	4802      	ldr	r0, [pc, #8]	; (114cc <bt_att_released+0x14>)
   114c2:	f005 fd7b 	bl	16fbc <k_mem_slab_free>
}
   114c6:	b003      	add	sp, #12
   114c8:	f85d fb04 	ldr.w	pc, [sp], #4
   114cc:	20008608 	.word	0x20008608

000114d0 <find_type_cb>:
{
   114d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   114d4:	f642 0301 	movw	r3, #10241	; 0x2801
   114d8:	2500      	movs	r5, #0
{
   114da:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   114dc:	f8d2 9000 	ldr.w	r9, [r2]
{
   114e0:	4607      	mov	r7, r0
   114e2:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   114e4:	6800      	ldr	r0, [r0, #0]
   114e6:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   114e8:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   114ec:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   114ee:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   114f2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   114f6:	f009 fced 	bl	1aed4 <bt_uuid_cmp>
   114fa:	2800      	cmp	r0, #0
   114fc:	d060      	beq.n	115c0 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   114fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11502:	6838      	ldr	r0, [r7, #0]
   11504:	a90b      	add	r1, sp, #44	; 0x2c
   11506:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1150a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1150e:	f009 fce1 	bl	1aed4 <bt_uuid_cmp>
   11512:	b138      	cbz	r0, 11524 <find_type_cb+0x54>
		if (data->group &&
   11514:	68a3      	ldr	r3, [r4, #8]
   11516:	b11b      	cbz	r3, 11520 <find_type_cb+0x50>
   11518:	885a      	ldrh	r2, [r3, #2]
   1151a:	42b2      	cmp	r2, r6
   1151c:	d200      	bcs.n	11520 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1151e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   11520:	2001      	movs	r0, #1
   11522:	e009      	b.n	11538 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   11524:	6861      	ldr	r1, [r4, #4]
   11526:	4608      	mov	r0, r1
   11528:	f009 ffe9 	bl	1b4fe <net_buf_frags_len>
   1152c:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   11530:	1a1b      	subs	r3, r3, r0
   11532:	2b03      	cmp	r3, #3
   11534:	d803      	bhi.n	1153e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   11536:	2000      	movs	r0, #0
}
   11538:	b011      	add	sp, #68	; 0x44
   1153a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1153e:	4608      	mov	r0, r1
   11540:	f003 f9fc 	bl	1493c <net_buf_frag_last>
   11544:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   11546:	6860      	ldr	r0, [r4, #4]
   11548:	f009 ffd9 	bl	1b4fe <net_buf_frags_len>
   1154c:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   11550:	f105 0b08 	add.w	fp, r5, #8
   11554:	ebaa 0a00 	sub.w	sl, sl, r0
   11558:	4658      	mov	r0, fp
   1155a:	f00a ff40 	bl	1c3de <net_buf_simple_tailroom>
   1155e:	4582      	cmp	sl, r0
   11560:	d231      	bcs.n	115c6 <find_type_cb+0xf6>
   11562:	6860      	ldr	r0, [r4, #4]
   11564:	f009 ffcb 	bl	1b4fe <net_buf_frags_len>
   11568:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1156c:	1a18      	subs	r0, r3, r0
	if (!len) {
   1156e:	b970      	cbnz	r0, 1158e <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   11570:	6863      	ldr	r3, [r4, #4]
   11572:	7998      	ldrb	r0, [r3, #6]
   11574:	f003 f806 	bl	14584 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   11578:	2200      	movs	r2, #0
   1157a:	2300      	movs	r3, #0
   1157c:	f00a ff09 	bl	1c392 <net_buf_alloc_fixed>
		if (!frag) {
   11580:	4605      	mov	r5, r0
   11582:	2800      	cmp	r0, #0
   11584:	d0d7      	beq.n	11536 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   11586:	4601      	mov	r1, r0
   11588:	6860      	ldr	r0, [r4, #4]
   1158a:	f003 fa17 	bl	149bc <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1158e:	2300      	movs	r3, #0
   11590:	9300      	str	r3, [sp, #0]
   11592:	4639      	mov	r1, r7
   11594:	f8d7 9004 	ldr.w	r9, [r7, #4]
   11598:	2310      	movs	r3, #16
   1159a:	4640      	mov	r0, r8
   1159c:	aa02      	add	r2, sp, #8
   1159e:	47c8      	blx	r9
	if (read < 0) {
   115a0:	1e07      	subs	r7, r0, #0
   115a2:	db0d      	blt.n	115c0 <find_type_cb+0xf0>
	if (read != data->value_len) {
   115a4:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   115a6:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   115a8:	42ba      	cmp	r2, r7
   115aa:	d02b      	beq.n	11604 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   115ac:	4601      	mov	r1, r0
   115ae:	a80b      	add	r0, sp, #44	; 0x2c
   115b0:	f009 fcbe 	bl	1af30 <bt_uuid_create>
   115b4:	b958      	cbnz	r0, 115ce <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   115b6:	2157      	movs	r1, #87	; 0x57
   115b8:	7c22      	ldrb	r2, [r4, #16]
   115ba:	4814      	ldr	r0, [pc, #80]	; (1160c <find_type_cb+0x13c>)
			BT_WARN("Unable to create UUID: size %d", read);
   115bc:	f008 f9d5 	bl	1996a <printk>
	data->group = NULL;
   115c0:	2300      	movs	r3, #0
   115c2:	60a3      	str	r3, [r4, #8]
   115c4:	e7ac      	b.n	11520 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   115c6:	4658      	mov	r0, fp
   115c8:	f00a ff09 	bl	1c3de <net_buf_simple_tailroom>
   115cc:	e7cf      	b.n	1156e <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   115ce:	b2fa      	uxtb	r2, r7
   115d0:	a902      	add	r1, sp, #8
   115d2:	a806      	add	r0, sp, #24
   115d4:	f009 fcac 	bl	1af30 <bt_uuid_create>
   115d8:	b918      	cbnz	r0, 115e2 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   115da:	463a      	mov	r2, r7
   115dc:	2157      	movs	r1, #87	; 0x57
   115de:	480c      	ldr	r0, [pc, #48]	; (11610 <find_type_cb+0x140>)
   115e0:	e7ec      	b.n	115bc <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   115e2:	a906      	add	r1, sp, #24
   115e4:	a80b      	add	r0, sp, #44	; 0x2c
   115e6:	f009 fc75 	bl	1aed4 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   115ea:	2800      	cmp	r0, #0
   115ec:	d1e8      	bne.n	115c0 <find_type_cb+0xf0>
	data->err = 0x00;
   115ee:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   115f0:	2104      	movs	r1, #4
   115f2:	7463      	strb	r3, [r4, #17]
   115f4:	f105 0008 	add.w	r0, r5, #8
   115f8:	f003 fa5a 	bl	14ab0 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   115fc:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   115fe:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   11600:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   11602:	e78d      	b.n	11520 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   11604:	a902      	add	r1, sp, #8
   11606:	f009 fbdf 	bl	1adc8 <memcmp>
   1160a:	e7ee      	b.n	115ea <find_type_cb+0x11a>
   1160c:	000208cd 	.word	0x000208cd
   11610:	000208f1 	.word	0x000208f1

00011614 <chan_req_sent>:
	if (chan->req) {
   11614:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   11618:	b13b      	cbz	r3, 1162a <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1161a:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
   1161e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   11622:	2300      	movs	r3, #0
   11624:	4801      	ldr	r0, [pc, #4]	; (1162c <chan_req_sent+0x18>)
   11626:	f007 ba2d 	b.w	18a84 <k_delayed_work_submit_to_queue>
}
   1162a:	4770      	bx	lr
   1162c:	2000a3b0 	.word	0x2000a3b0

00011630 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   11630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   11632:	2300      	movs	r3, #0
{
   11634:	4606      	mov	r6, r0
   11636:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   11638:	2200      	movs	r2, #0
   1163a:	4669      	mov	r1, sp
   1163c:	4823      	ldr	r0, [pc, #140]	; (116cc <bt_att_accept+0x9c>)
   1163e:	f005 fc63 	bl	16f08 <k_mem_slab_alloc>
   11642:	4604      	mov	r4, r0
   11644:	b148      	cbz	r0, 1165a <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   11646:	4632      	mov	r2, r6
   11648:	2145      	movs	r1, #69	; 0x45
   1164a:	4821      	ldr	r0, [pc, #132]	; (116d0 <bt_att_accept+0xa0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1164c:	f008 f98d 	bl	1996a <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   11650:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   11654:	4620      	mov	r0, r4
   11656:	b003      	add	sp, #12
   11658:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   1165a:	4601      	mov	r1, r0
   1165c:	2230      	movs	r2, #48	; 0x30
   1165e:	9800      	ldr	r0, [sp, #0]
   11660:	f009 fbee 	bl	1ae40 <memset>
	att->conn = conn;
   11664:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   11666:	2200      	movs	r2, #0
	list->head = NULL;
   11668:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   1166c:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   11670:	60ac      	str	r4, [r5, #8]
   11672:	2300      	movs	r3, #0
   11674:	4817      	ldr	r0, [pc, #92]	; (116d4 <bt_att_accept+0xa4>)
   11676:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   11678:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1167a:	f005 fc45 	bl	16f08 <k_mem_slab_alloc>
   1167e:	4604      	mov	r4, r0
   11680:	b118      	cbz	r0, 1168a <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   11682:	2145      	movs	r1, #69	; 0x45
   11684:	682a      	ldr	r2, [r5, #0]
   11686:	4814      	ldr	r0, [pc, #80]	; (116d8 <bt_att_accept+0xa8>)
   11688:	e7e0      	b.n	1164c <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   1168a:	4601      	mov	r1, r0
   1168c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   11690:	9801      	ldr	r0, [sp, #4]
   11692:	f009 fbd5 	bl	1ae40 <memset>
	chan->chan.chan.ops = &ops;
   11696:	9801      	ldr	r0, [sp, #4]
   11698:	4b10      	ldr	r3, [pc, #64]	; (116dc <bt_att_accept+0xac>)
   1169a:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   1169c:	30d0      	adds	r0, #208	; 0xd0
   1169e:	f00b fcd4 	bl	1d04a <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   116a2:	9801      	ldr	r0, [sp, #4]
   116a4:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
   116a8:	2203      	movs	r2, #3
   116aa:	4611      	mov	r1, r2
   116ac:	f00b fd32 	bl	1d114 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   116b0:	9b01      	ldr	r3, [sp, #4]
   116b2:	33c8      	adds	r3, #200	; 0xc8
   116b4:	e8d3 2fef 	ldaex	r2, [r3]
   116b8:	e8c3 4fe1 	stlex	r1, r4, [r3]
   116bc:	2900      	cmp	r1, #0
   116be:	d1f9      	bne.n	116b4 <bt_att_accept+0x84>
	chan->att = att;
   116c0:	9b01      	ldr	r3, [sp, #4]
   116c2:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   116c6:	603b      	str	r3, [r7, #0]
	return 0;
   116c8:	e7c4      	b.n	11654 <bt_att_accept+0x24>
   116ca:	bf00      	nop
   116cc:	200085ec 	.word	0x200085ec
   116d0:	00020915 	.word	0x00020915
   116d4:	20008608 	.word	0x20008608
   116d8:	0002093f 	.word	0x0002093f
   116dc:	20008438 	.word	0x20008438

000116e0 <read_group_cb>:
{
   116e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   116e4:	f04f 0800 	mov.w	r8, #0
   116e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   116ec:	4605      	mov	r5, r0
   116ee:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   116f0:	6800      	ldr	r0, [r0, #0]
   116f2:	a902      	add	r1, sp, #8
{
   116f4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   116f6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   116f8:	f88d 8008 	strb.w	r8, [sp, #8]
   116fc:	f8ad 300a 	strh.w	r3, [sp, #10]
   11700:	f009 fbe8 	bl	1aed4 <bt_uuid_cmp>
   11704:	b1a0      	cbz	r0, 11730 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11706:	f642 0301 	movw	r3, #10241	; 0x2801
   1170a:	6828      	ldr	r0, [r5, #0]
   1170c:	a903      	add	r1, sp, #12
   1170e:	f88d 800c 	strb.w	r8, [sp, #12]
   11712:	f8ad 300e 	strh.w	r3, [sp, #14]
   11716:	f009 fbdd 	bl	1aed4 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1171a:	b148      	cbz	r0, 11730 <read_group_cb+0x50>
		if (data->group &&
   1171c:	6923      	ldr	r3, [r4, #16]
   1171e:	b11b      	cbz	r3, 11728 <read_group_cb+0x48>
   11720:	885a      	ldrh	r2, [r3, #2]
   11722:	42b2      	cmp	r2, r6
   11724:	d200      	bcs.n	11728 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   11726:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   11728:	2001      	movs	r0, #1
}
   1172a:	b004      	add	sp, #16
   1172c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11730:	6861      	ldr	r1, [r4, #4]
   11732:	6828      	ldr	r0, [r5, #0]
   11734:	f009 fbce 	bl	1aed4 <bt_uuid_cmp>
   11738:	b110      	cbz	r0, 11740 <read_group_cb+0x60>
		data->group = NULL;
   1173a:	2300      	movs	r3, #0
   1173c:	6123      	str	r3, [r4, #16]
   1173e:	e7f3      	b.n	11728 <read_group_cb+0x48>
	if (data->rsp->len &&
   11740:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   11742:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   11744:	781a      	ldrb	r2, [r3, #0]
   11746:	b13a      	cbz	r2, 11758 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   11748:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   1174c:	8981      	ldrh	r1, [r0, #12]
   1174e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   11750:	4293      	cmp	r3, r2
   11752:	da01      	bge.n	11758 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   11754:	2000      	movs	r0, #0
   11756:	e7e8      	b.n	1172a <read_group_cb+0x4a>
   11758:	2104      	movs	r1, #4
   1175a:	3008      	adds	r0, #8
   1175c:	f003 f9a8 	bl	14ab0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   11760:	4b09      	ldr	r3, [pc, #36]	; (11788 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   11762:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   11764:	4629      	mov	r1, r5
	data->group->start_handle = sys_cpu_to_le16(handle);
   11766:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   11768:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1176a:	68a2      	ldr	r2, [r4, #8]
   1176c:	9300      	str	r3, [sp, #0]
   1176e:	4638      	mov	r0, r7
   11770:	2300      	movs	r3, #0
   11772:	9401      	str	r4, [sp, #4]
   11774:	f009 ffbe 	bl	1b6f4 <att_chan_read>
	if (read < 0) {
   11778:	2800      	cmp	r0, #0
   1177a:	dbeb      	blt.n	11754 <read_group_cb+0x74>
	if (!data->group) {
   1177c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1177e:	3800      	subs	r0, #0
   11780:	bf18      	it	ne
   11782:	2001      	movne	r0, #1
   11784:	e7d1      	b.n	1172a <read_group_cb+0x4a>
   11786:	bf00      	nop
   11788:	0001b679 	.word	0x0001b679

0001178c <chan_send>:
{
   1178c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   11790:	688b      	ldr	r3, [r1, #8]
{
   11792:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   11794:	781b      	ldrb	r3, [r3, #0]
{
   11796:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   11798:	2bd2      	cmp	r3, #210	; 0xd2
{
   1179a:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1179c:	d110      	bne.n	117c0 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
   1179e:	6803      	ldr	r3, [r0, #0]
   117a0:	6818      	ldr	r0, [r3, #0]
   117a2:	f00a fdf0 	bl	1c386 <bt_smp_sign>
		if (err) {
   117a6:	4606      	mov	r6, r0
   117a8:	b150      	cbz	r0, 117c0 <chan_send+0x34>
			BT_ERR("Error signing data");
   117aa:	2145      	movs	r1, #69	; 0x45
   117ac:	4824      	ldr	r0, [pc, #144]	; (11840 <chan_send+0xb4>)
   117ae:	f008 f8dc 	bl	1996a <printk>
		net_buf_unref(buf);
   117b2:	4620      	mov	r0, r4
   117b4:	f003 f866 	bl	14884 <net_buf_unref>
}
   117b8:	4630      	mov	r0, r6
   117ba:	b003      	add	sp, #12
   117bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   117c0:	f104 0008 	add.w	r0, r4, #8
   117c4:	f00a fe07 	bl	1c3d6 <net_buf_simple_headroom>
	state->len = buf->len;
   117c8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   117cc:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   117ce:	f1b9 0f00 	cmp.w	r9, #0
   117d2:	d10a      	bne.n	117ea <chan_send+0x5e>
	switch (att_op_get_type(buf->data[0])) {
   117d4:	68a3      	ldr	r3, [r4, #8]
   117d6:	7818      	ldrb	r0, [r3, #0]
   117d8:	f009 feb1 	bl	1b53e <att_op_get_type>
   117dc:	1e43      	subs	r3, r0, #1
   117de:	b2db      	uxtb	r3, r3
   117e0:	2b04      	cmp	r3, #4
   117e2:	bf9c      	itt	ls
   117e4:	4a17      	ldrls	r2, [pc, #92]	; (11844 <chan_send+0xb8>)
   117e6:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   117ea:	682b      	ldr	r3, [r5, #0]
   117ec:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
   117ee:	f8c5 9138 	str.w	r9, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   117f2:	681e      	ldr	r6, [r3, #0]
   117f4:	f003 f88a 	bl	1490c <net_buf_ref>
   117f8:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
   117fc:	4b12      	ldr	r3, [pc, #72]	; (11848 <chan_send+0xbc>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   117fe:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   11800:	4299      	cmp	r1, r3
   11802:	d019      	beq.n	11838 <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
   11804:	4b11      	ldr	r3, [pc, #68]	; (1184c <chan_send+0xc0>)
   11806:	4299      	cmp	r1, r3
   11808:	d018      	beq.n	1183c <chan_send+0xb0>
		return att_sent;
   1180a:	f8df c044 	ldr.w	ip, [pc, #68]	; 11850 <chan_send+0xc4>
   1180e:	4b11      	ldr	r3, [pc, #68]	; (11854 <chan_send+0xc8>)
   11810:	4811      	ldr	r0, [pc, #68]	; (11858 <chan_send+0xcc>)
   11812:	4561      	cmp	r1, ip
   11814:	bf18      	it	ne
   11816:	4603      	movne	r3, r0
				&chan->chan.chan);
   11818:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1181a:	4630      	mov	r0, r6
   1181c:	2104      	movs	r1, #4
   1181e:	9500      	str	r5, [sp, #0]
   11820:	f009 fe12 	bl	1b448 <bt_l2cap_send_cb>
	if (!err) {
   11824:	4606      	mov	r6, r0
   11826:	2800      	cmp	r0, #0
   11828:	d0c3      	beq.n	117b2 <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
   1182a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1182c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   11830:	fa10 f787 	uxtah	r7, r0, r7
   11834:	60a7      	str	r7, [r4, #8]
}
   11836:	e7bf      	b.n	117b8 <chan_send+0x2c>
		return att_rsp_sent;
   11838:	4b08      	ldr	r3, [pc, #32]	; (1185c <chan_send+0xd0>)
   1183a:	e7ed      	b.n	11818 <chan_send+0x8c>
		return att_cfm_sent;
   1183c:	4b08      	ldr	r3, [pc, #32]	; (11860 <chan_send+0xd4>)
   1183e:	e7eb      	b.n	11818 <chan_send+0x8c>
   11840:	00020969 	.word	0x00020969
   11844:	0001dd5c 	.word	0x0001dd5c
   11848:	0001b909 	.word	0x0001b909
   1184c:	0001b91d 	.word	0x0001b91d
   11850:	00011615 	.word	0x00011615
   11854:	00011459 	.word	0x00011459
   11858:	0001b50f 	.word	0x0001b50f
   1185c:	00011449 	.word	0x00011449
   11860:	00011439 	.word	0x00011439

00011864 <bt_att_chan_req_send>:
{
   11864:	b570      	push	{r4, r5, r6, lr}
   11866:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   11868:	4604      	mov	r4, r0
   1186a:	b950      	cbnz	r0, 11882 <bt_att_chan_req_send+0x1e>
   1186c:	4924      	ldr	r1, [pc, #144]	; (11900 <bt_att_chan_req_send+0x9c>)
   1186e:	4825      	ldr	r0, [pc, #148]	; (11904 <bt_att_chan_req_send+0xa0>)
   11870:	f240 224f 	movw	r2, #591	; 0x24f
   11874:	f008 f879 	bl	1996a <printk>
   11878:	f240 214f 	movw	r1, #591	; 0x24f
   1187c:	4820      	ldr	r0, [pc, #128]	; (11900 <bt_att_chan_req_send+0x9c>)
   1187e:	f008 fb1a 	bl	19eb6 <assert_post_action>
	__ASSERT_NO_MSG(req);
   11882:	b955      	cbnz	r5, 1189a <bt_att_chan_req_send+0x36>
   11884:	491e      	ldr	r1, [pc, #120]	; (11900 <bt_att_chan_req_send+0x9c>)
   11886:	481f      	ldr	r0, [pc, #124]	; (11904 <bt_att_chan_req_send+0xa0>)
   11888:	f44f 7214 	mov.w	r2, #592	; 0x250
   1188c:	f008 f86d 	bl	1996a <printk>
   11890:	f44f 7114 	mov.w	r1, #592	; 0x250
   11894:	481a      	ldr	r0, [pc, #104]	; (11900 <bt_att_chan_req_send+0x9c>)
   11896:	f008 fb0e 	bl	19eb6 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   1189a:	686b      	ldr	r3, [r5, #4]
   1189c:	b953      	cbnz	r3, 118b4 <bt_att_chan_req_send+0x50>
   1189e:	4918      	ldr	r1, [pc, #96]	; (11900 <bt_att_chan_req_send+0x9c>)
   118a0:	4818      	ldr	r0, [pc, #96]	; (11904 <bt_att_chan_req_send+0xa0>)
   118a2:	f240 2251 	movw	r2, #593	; 0x251
   118a6:	f008 f860 	bl	1996a <printk>
   118aa:	f240 2151 	movw	r1, #593	; 0x251
   118ae:	4814      	ldr	r0, [pc, #80]	; (11900 <bt_att_chan_req_send+0x9c>)
   118b0:	f008 fb01 	bl	19eb6 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   118b4:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   118b8:	b153      	cbz	r3, 118d0 <bt_att_chan_req_send+0x6c>
   118ba:	4911      	ldr	r1, [pc, #68]	; (11900 <bt_att_chan_req_send+0x9c>)
   118bc:	4811      	ldr	r0, [pc, #68]	; (11904 <bt_att_chan_req_send+0xa0>)
   118be:	f240 2252 	movw	r2, #594	; 0x252
   118c2:	f008 f852 	bl	1996a <printk>
   118c6:	f240 2152 	movw	r1, #594	; 0x252
   118ca:	480d      	ldr	r0, [pc, #52]	; (11900 <bt_att_chan_req_send+0x9c>)
   118cc:	f008 faf3 	bl	19eb6 <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   118d0:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
   118d4:	2200      	movs	r2, #0
   118d6:	2300      	movs	r3, #0
   118d8:	4630      	mov	r0, r6
   118da:	f006 fead 	bl	18638 <z_impl_k_sem_take>
   118de:	2800      	cmp	r0, #0
   118e0:	db0a      	blt.n	118f8 <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
   118e2:	4620      	mov	r0, r4
   118e4:	4629      	mov	r1, r5
   118e6:	f009 ffe9 	bl	1b8bc <chan_req_send>
	if (err < 0) {
   118ea:	1e04      	subs	r4, r0, #0
   118ec:	da02      	bge.n	118f4 <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
   118ee:	4630      	mov	r0, r6
   118f0:	f006 fe66 	bl	185c0 <z_impl_k_sem_give>
}
   118f4:	4620      	mov	r0, r4
   118f6:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   118f8:	f06f 040a 	mvn.w	r4, #10
   118fc:	e7fa      	b.n	118f4 <bt_att_chan_req_send+0x90>
   118fe:	bf00      	nop
   11900:	00020981 	.word	0x00020981
   11904:	0001ea60 	.word	0x0001ea60

00011908 <read_type_cb>:
{
   11908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1190c:	f8d2 8000 	ldr.w	r8, [r2]
{
   11910:	4606      	mov	r6, r0
   11912:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11914:	6800      	ldr	r0, [r0, #0]
   11916:	6851      	ldr	r1, [r2, #4]
{
   11918:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1191a:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1191e:	f009 fad9 	bl	1aed4 <bt_uuid_cmp>
   11922:	4607      	mov	r7, r0
   11924:	2800      	cmp	r0, #0
   11926:	d13e      	bne.n	119a6 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   11928:	4628      	mov	r0, r5
   1192a:	2215      	movs	r2, #21
   1192c:	4631      	mov	r1, r6
   1192e:	f00a fc23 	bl	1c178 <bt_gatt_check_perm>
   11932:	4605      	mov	r5, r0
   11934:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   11936:	b148      	cbz	r0, 1194c <read_type_cb+0x44>
		if (data->rsp->len) {
   11938:	68e3      	ldr	r3, [r4, #12]
   1193a:	781b      	ldrb	r3, [r3, #0]
   1193c:	b923      	cbnz	r3, 11948 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1193e:	2500      	movs	r5, #0
}
   11940:	4628      	mov	r0, r5
   11942:	b003      	add	sp, #12
   11944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   11948:	7527      	strb	r7, [r4, #20]
   1194a:	e7f8      	b.n	1193e <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1194c:	68a0      	ldr	r0, [r4, #8]
   1194e:	f002 fff5 	bl	1493c <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   11952:	2102      	movs	r1, #2
   11954:	3008      	adds	r0, #8
   11956:	f003 f8ab 	bl	14ab0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1195a:	4b14      	ldr	r3, [pc, #80]	; (119ac <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1195c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1195e:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   11960:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   11964:	68a2      	ldr	r2, [r4, #8]
   11966:	9300      	str	r3, [sp, #0]
   11968:	4640      	mov	r0, r8
   1196a:	462b      	mov	r3, r5
   1196c:	9401      	str	r4, [sp, #4]
   1196e:	f009 fec1 	bl	1b6f4 <att_chan_read>
	if (read < 0) {
   11972:	2800      	cmp	r0, #0
   11974:	da07      	bge.n	11986 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   11976:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1197a:	bf32      	itee	cc
   1197c:	200e      	movcc	r0, #14
		return -err;
   1197e:	4240      	negcs	r0, r0
   11980:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   11982:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   11984:	e7dc      	b.n	11940 <read_type_cb+0x38>
	if (!data->item) {
   11986:	6923      	ldr	r3, [r4, #16]
   11988:	2b00      	cmp	r3, #0
   1198a:	d0d8      	beq.n	1193e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1198c:	68a0      	ldr	r0, [r4, #8]
   1198e:	f009 fdb6 	bl	1b4fe <net_buf_frags_len>
   11992:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   11996:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   11998:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1199a:	7818      	ldrb	r0, [r3, #0]
   1199c:	4285      	cmp	r5, r0
   1199e:	bf94      	ite	ls
   119a0:	2500      	movls	r5, #0
   119a2:	2501      	movhi	r5, #1
   119a4:	e7cc      	b.n	11940 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   119a6:	2501      	movs	r5, #1
   119a8:	e7ca      	b.n	11940 <read_type_cb+0x38>
   119aa:	bf00      	nop
   119ac:	0001b51b 	.word	0x0001b51b

000119b0 <bt_att_connected>:
{
   119b0:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   119b2:	2104      	movs	r1, #4
{
   119b4:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   119b6:	6800      	ldr	r0, [r0, #0]
   119b8:	f009 fd76 	bl	1b4a8 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   119bc:	4605      	mov	r5, r0
   119be:	b950      	cbnz	r0, 119d6 <bt_att_connected+0x26>
   119c0:	4919      	ldr	r1, [pc, #100]	; (11a28 <bt_att_connected+0x78>)
   119c2:	481a      	ldr	r0, [pc, #104]	; (11a2c <bt_att_connected+0x7c>)
   119c4:	f44f 6226 	mov.w	r2, #2656	; 0xa60
   119c8:	f007 ffcf 	bl	1996a <printk>
   119cc:	f44f 6126 	mov.w	r1, #2656	; 0xa60
   119d0:	4815      	ldr	r0, [pc, #84]	; (11a28 <bt_att_connected+0x78>)
   119d2:	f008 fa70 	bl	19eb6 <assert_post_action>
	struct bt_att *att = att_chan->att;
   119d6:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   119da:	6aab      	ldr	r3, [r5, #40]	; 0x28
   119dc:	b91b      	cbnz	r3, 119e6 <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
   119de:	f105 000c 	add.w	r0, r5, #12
   119e2:	f00b fb32 	bl	1d04a <z_impl_k_queue_init>
	parent->next = child;
   119e6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   119e8:	f504 739a 	add.w	r3, r4, #308	; 0x134
   119ec:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
   119f0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   119f2:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   119f4:	b902      	cbnz	r2, 119f8 <bt_att_connected+0x48>
	list->tail = node;
   119f6:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   119f8:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   119fc:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   11a00:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11a02:	bf58      	it	pl
   11a04:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11a06:	f04f 0230 	mov.w	r2, #48	; 0x30
   11a0a:	bf5c      	itt	pl
   11a0c:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11a10:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
   11a14:	2100      	movs	r1, #0
   11a16:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   11a1a:	f009 fa11 	bl	1ae40 <memset>
   11a1e:	4b04      	ldr	r3, [pc, #16]	; (11a30 <bt_att_connected+0x80>)
   11a20:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   11a24:	bd38      	pop	{r3, r4, r5, pc}
   11a26:	bf00      	nop
   11a28:	00020981 	.word	0x00020981
   11a2c:	0001ea60 	.word	0x0001ea60
   11a30:	0001233d 	.word	0x0001233d

00011a34 <bt_att_chan_create_pdu>:
{
   11a34:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   11a36:	1c53      	adds	r3, r2, #1
   11a38:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
{
   11a3c:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   11a3e:	4293      	cmp	r3, r2
   11a40:	d906      	bls.n	11a50 <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   11a42:	2157      	movs	r1, #87	; 0x57
   11a44:	4813      	ldr	r0, [pc, #76]	; (11a94 <bt_att_chan_create_pdu+0x60>)
   11a46:	f007 ff90 	bl	1996a <printk>
		return NULL;
   11a4a:	2400      	movs	r4, #0
}
   11a4c:	4620      	mov	r0, r4
   11a4e:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   11a50:	4608      	mov	r0, r1
   11a52:	f009 fd74 	bl	1b53e <att_op_get_type>
   11a56:	2802      	cmp	r0, #2
   11a58:	d001      	beq.n	11a5e <bt_att_chan_create_pdu+0x2a>
   11a5a:	2804      	cmp	r0, #4
   11a5c:	d10e      	bne.n	11a7c <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   11a5e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   11a62:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   11a64:	2100      	movs	r1, #0
   11a66:	4608      	mov	r0, r1
   11a68:	f009 fceb 	bl	1b442 <bt_l2cap_create_pdu_timeout>
   11a6c:	4604      	mov	r4, r0
	if (!buf) {
   11a6e:	b950      	cbnz	r0, 11a86 <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   11a70:	462a      	mov	r2, r5
   11a72:	2145      	movs	r1, #69	; 0x45
   11a74:	4808      	ldr	r0, [pc, #32]	; (11a98 <bt_att_chan_create_pdu+0x64>)
   11a76:	f007 ff78 	bl	1996a <printk>
		return NULL;
   11a7a:	e7e7      	b.n	11a4c <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
   11a7c:	f04f 32ff 	mov.w	r2, #4294967295
   11a80:	f04f 33ff 	mov.w	r3, #4294967295
   11a84:	e7ee      	b.n	11a64 <bt_att_chan_create_pdu+0x30>
   11a86:	2101      	movs	r1, #1
   11a88:	3008      	adds	r0, #8
   11a8a:	f003 f811 	bl	14ab0 <net_buf_simple_add>
	hdr->code = op;
   11a8e:	7005      	strb	r5, [r0, #0]
	return buf;
   11a90:	e7dc      	b.n	11a4c <bt_att_chan_create_pdu+0x18>
   11a92:	bf00      	nop
   11a94:	000209b0 	.word	0x000209b0
   11a98:	000206c7 	.word	0x000206c7

00011a9c <att_indicate>:
{
   11a9c:	b570      	push	{r4, r5, r6, lr}
   11a9e:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   11aa0:	f101 0008 	add.w	r0, r1, #8
   11aa4:	460d      	mov	r5, r1
   11aa6:	f00a fc8e 	bl	1c3c6 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   11aaa:	6826      	ldr	r6, [r4, #0]
   11aac:	4601      	mov	r1, r0
   11aae:	89ab      	ldrh	r3, [r5, #12]
   11ab0:	68aa      	ldr	r2, [r5, #8]
   11ab2:	6830      	ldr	r0, [r6, #0]
   11ab4:	f00a fbef 	bl	1c296 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   11ab8:	211e      	movs	r1, #30
   11aba:	2200      	movs	r2, #0
   11abc:	4620      	mov	r0, r4
   11abe:	f7ff ffb9 	bl	11a34 <bt_att_chan_create_pdu>
	if (!buf) {
   11ac2:	4601      	mov	r1, r0
   11ac4:	b118      	cbz	r0, 11ace <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   11ac6:	4620      	mov	r0, r4
   11ac8:	4a02      	ldr	r2, [pc, #8]	; (11ad4 <att_indicate+0x38>)
   11aca:	f009 feb5 	bl	1b838 <bt_att_chan_send_rsp>
}
   11ace:	2000      	movs	r0, #0
   11ad0:	bd70      	pop	{r4, r5, r6, pc}
   11ad2:	bf00      	nop
   11ad4:	0001b91d 	.word	0x0001b91d

00011ad8 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   11ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11adc:	4688      	mov	r8, r1
   11ade:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   11ae0:	2101      	movs	r1, #1
   11ae2:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   11ae4:	4605      	mov	r5, r0
   11ae6:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   11ae8:	f7ff ffa4 	bl	11a34 <bt_att_chan_create_pdu>
	if (!buf) {
   11aec:	4604      	mov	r4, r0
   11aee:	b178      	cbz	r0, 11b10 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   11af0:	2104      	movs	r1, #4
   11af2:	3008      	adds	r0, #8
   11af4:	f002 ffdc 	bl	14ab0 <net_buf_simple_add>
	rsp->request = req;
   11af8:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   11afc:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   11afe:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   11b02:	4621      	mov	r1, r4
   11b04:	4628      	mov	r0, r5
}
   11b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   11b0a:	4a02      	ldr	r2, [pc, #8]	; (11b14 <send_err_rsp.part.0+0x3c>)
   11b0c:	f009 be94 	b.w	1b838 <bt_att_chan_send_rsp>
}
   11b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11b14:	0001b909 	.word	0x0001b909

00011b18 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   11b18:	898b      	ldrh	r3, [r1, #12]
{
   11b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b1e:	4604      	mov	r4, r0
   11b20:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   11b22:	b933      	cbnz	r3, 11b32 <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   11b24:	2145      	movs	r1, #69	; 0x45
   11b26:	4838      	ldr	r0, [pc, #224]	; (11c08 <bt_att_recv+0xf0>)
			BT_WARN("Ignoring unexpected indication");
   11b28:	f007 ff1f 	bl	1996a <printk>
}
   11b2c:	2000      	movs	r0, #0
   11b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   11b32:	2101      	movs	r1, #1
   11b34:	f108 0008 	add.w	r0, r8, #8
   11b38:	f002 ff9c 	bl	14a74 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   11b3c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   11b40:	4605      	mov	r5, r0
   11b42:	2b00      	cmp	r3, #0
   11b44:	d0f2      	beq.n	11b2c <bt_att_recv+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   11b46:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   11b48:	7802      	ldrb	r2, [r0, #0]
   11b4a:	4930      	ldr	r1, [pc, #192]	; (11c0c <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   11b4c:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   11b50:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
   11b54:	4290      	cmp	r0, r2
   11b56:	d114      	bne.n	11b82 <bt_att_recv+0x6a>
		if (handler->type == ATT_REQUEST &&
   11b58:	00d8      	lsls	r0, r3, #3
   11b5a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   11b5e:	789f      	ldrb	r7, [r3, #2]
   11b60:	2f01      	cmp	r7, #1
   11b62:	d123      	bne.n	11bac <bt_att_recv+0x94>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11b64:	34c0      	adds	r4, #192	; 0xc0
   11b66:	e8d4 3fef 	ldaex	r3, [r4]
   11b6a:	f043 0201 	orr.w	r2, r3, #1
   11b6e:	e8c4 2fec 	stlex	ip, r2, [r4]
   11b72:	f1bc 0f00 	cmp.w	ip, #0
   11b76:	d1f6      	bne.n	11b66 <bt_att_recv+0x4e>
   11b78:	07da      	lsls	r2, r3, #31
   11b7a:	d528      	bpl.n	11bce <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected request");
   11b7c:	2157      	movs	r1, #87	; 0x57
   11b7e:	4824      	ldr	r0, [pc, #144]	; (11c10 <bt_att_recv+0xf8>)
   11b80:	e7d2      	b.n	11b28 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   11b82:	3301      	adds	r3, #1
   11b84:	2b1c      	cmp	r3, #28
   11b86:	d1e3      	bne.n	11b50 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   11b88:	2157      	movs	r1, #87	; 0x57
   11b8a:	4822      	ldr	r0, [pc, #136]	; (11c14 <bt_att_recv+0xfc>)
   11b8c:	f007 feed 	bl	1996a <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   11b90:	7829      	ldrb	r1, [r5, #0]
   11b92:	4608      	mov	r0, r1
   11b94:	f009 fcd3 	bl	1b53e <att_op_get_type>
   11b98:	2800      	cmp	r0, #0
   11b9a:	d0c7      	beq.n	11b2c <bt_att_recv+0x14>
	if (!req) {
   11b9c:	2900      	cmp	r1, #0
   11b9e:	d0c5      	beq.n	11b2c <bt_att_recv+0x14>
   11ba0:	2306      	movs	r3, #6
   11ba2:	2200      	movs	r2, #0
   11ba4:	4630      	mov	r0, r6
   11ba6:	f7ff ff97 	bl	11ad8 <send_err_rsp.part.0>
   11baa:	e7bf      	b.n	11b2c <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   11bac:	2f05      	cmp	r7, #5
   11bae:	d10e      	bne.n	11bce <bt_att_recv+0xb6>
   11bb0:	34c0      	adds	r4, #192	; 0xc0
   11bb2:	e8d4 3fef 	ldaex	r3, [r4]
   11bb6:	f043 0202 	orr.w	r2, r3, #2
   11bba:	e8c4 2fec 	stlex	ip, r2, [r4]
   11bbe:	f1bc 0f00 	cmp.w	ip, #0
   11bc2:	d1f6      	bne.n	11bb2 <bt_att_recv+0x9a>
   11bc4:	079b      	lsls	r3, r3, #30
   11bc6:	d502      	bpl.n	11bce <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected indication");
   11bc8:	2157      	movs	r1, #87	; 0x57
   11bca:	4813      	ldr	r0, [pc, #76]	; (11c18 <bt_att_recv+0x100>)
   11bcc:	e7ac      	b.n	11b28 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   11bce:	180b      	adds	r3, r1, r0
   11bd0:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   11bd4:	7859      	ldrb	r1, [r3, #1]
   11bd6:	4291      	cmp	r1, r2
   11bd8:	d908      	bls.n	11bec <bt_att_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   11bda:	2145      	movs	r1, #69	; 0x45
   11bdc:	782b      	ldrb	r3, [r5, #0]
   11bde:	480f      	ldr	r0, [pc, #60]	; (11c1c <bt_att_recv+0x104>)
   11be0:	f007 fec3 	bl	1996a <printk>
	if (handler->type == ATT_REQUEST && err) {
   11be4:	2f01      	cmp	r7, #1
   11be6:	d1a1      	bne.n	11b2c <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   11be8:	2304      	movs	r3, #4
   11bea:	e008      	b.n	11bfe <bt_att_recv+0xe6>
		err = handler->func(att_chan, buf);
   11bec:	685b      	ldr	r3, [r3, #4]
   11bee:	4641      	mov	r1, r8
   11bf0:	4630      	mov	r0, r6
   11bf2:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   11bf4:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   11bf6:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   11bf8:	d198      	bne.n	11b2c <bt_att_recv+0x14>
   11bfa:	2800      	cmp	r0, #0
   11bfc:	d096      	beq.n	11b2c <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   11bfe:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   11c00:	2900      	cmp	r1, #0
   11c02:	d093      	beq.n	11b2c <bt_att_recv+0x14>
   11c04:	e7cd      	b.n	11ba2 <bt_att_recv+0x8a>
   11c06:	bf00      	nop
   11c08:	000209da 	.word	0x000209da
   11c0c:	0001dd70 	.word	0x0001dd70
   11c10:	000209fa 	.word	0x000209fa
   11c14:	00020a63 	.word	0x00020a63
   11c18:	00020a1b 	.word	0x00020a1b
   11c1c:	00020a3f 	.word	0x00020a3f

00011c20 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11c24:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11c26:	6803      	ldr	r3, [r0, #0]
   11c28:	460e      	mov	r6, r1
   11c2a:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11c2c:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11c2e:	bf18      	it	ne
   11c30:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11c32:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11c34:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11c36:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11c38:	f00a fb58 	bl	1c2ec <bt_gatt_change_aware>
   11c3c:	2800      	cmp	r0, #0
   11c3e:	d04b      	beq.n	11cd8 <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   11c40:	2f00      	cmp	r7, #0
   11c42:	d04b      	beq.n	11cdc <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   11c44:	2218      	movs	r2, #24
   11c46:	2100      	movs	r1, #0
   11c48:	4668      	mov	r0, sp
   11c4a:	f009 f8f9 	bl	1ae40 <memset>
	if (rsp) {
   11c4e:	f1b8 0f00 	cmp.w	r8, #0
   11c52:	d122      	bne.n	11c9a <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   11c54:	682b      	ldr	r3, [r5, #0]
	data.offset = offset;
   11c56:	f04f 0900 	mov.w	r9, #0
	data.conn = chan->att->conn;
   11c5a:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11c5c:	4639      	mov	r1, r7
	data.conn = chan->att->conn;
   11c5e:	9300      	str	r3, [sp, #0]
	data.value = value;
   11c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11c62:	4638      	mov	r0, r7
	data.value = value;
   11c64:	9303      	str	r3, [sp, #12]
	data.len = len;
   11c66:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11c6a:	4a1d      	ldr	r2, [pc, #116]	; (11ce0 <att_write_rsp.constprop.0+0xc0>)
	data.len = len;
   11c6c:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   11c70:	2301      	movs	r3, #1
   11c72:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11c76:	466b      	mov	r3, sp
	data.req = req;
   11c78:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   11c7c:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11c80:	f009 fca3 	bl	1b5ca <bt_gatt_foreach_attr>
	if (data.err) {
   11c84:	f89d 4014 	ldrb.w	r4, [sp, #20]
   11c88:	b1f4      	cbz	r4, 11cc8 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   11c8a:	f1b8 0f00 	cmp.w	r8, #0
   11c8e:	d10e      	bne.n	11cae <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   11c90:	2400      	movs	r4, #0
}
   11c92:	4620      	mov	r0, r4
   11c94:	b007      	add	sp, #28
   11c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   11c9a:	2200      	movs	r2, #0
   11c9c:	4641      	mov	r1, r8
   11c9e:	4628      	mov	r0, r5
   11ca0:	f7ff fec8 	bl	11a34 <bt_att_chan_create_pdu>
   11ca4:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   11ca6:	2800      	cmp	r0, #0
   11ca8:	d1d4      	bne.n	11c54 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   11caa:	240e      	movs	r4, #14
   11cac:	e7f1      	b.n	11c92 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   11cae:	9801      	ldr	r0, [sp, #4]
   11cb0:	f002 fde8 	bl	14884 <net_buf_unref>
	if (!req) {
   11cb4:	2e00      	cmp	r6, #0
   11cb6:	d0eb      	beq.n	11c90 <att_write_rsp.constprop.0+0x70>
   11cb8:	463a      	mov	r2, r7
   11cba:	4631      	mov	r1, r6
   11cbc:	4628      	mov	r0, r5
   11cbe:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11cc2:	f7ff ff09 	bl	11ad8 <send_err_rsp.part.0>
   11cc6:	e7e3      	b.n	11c90 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   11cc8:	9901      	ldr	r1, [sp, #4]
   11cca:	2900      	cmp	r1, #0
   11ccc:	d0e0      	beq.n	11c90 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11cce:	4628      	mov	r0, r5
   11cd0:	4a04      	ldr	r2, [pc, #16]	; (11ce4 <att_write_rsp.constprop.0+0xc4>)
   11cd2:	f009 fdb1 	bl	1b838 <bt_att_chan_send_rsp>
   11cd6:	e7dc      	b.n	11c92 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11cd8:	2412      	movs	r4, #18
   11cda:	e7da      	b.n	11c92 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   11cdc:	2401      	movs	r4, #1
   11cde:	e7d8      	b.n	11c92 <att_write_rsp.constprop.0+0x72>
   11ce0:	0001b699 	.word	0x0001b699
   11ce4:	0001b909 	.word	0x0001b909

00011ce8 <bt_att_create_pdu>:
{
   11ce8:	b570      	push	{r4, r5, r6, lr}
   11cea:	460e      	mov	r6, r1
   11cec:	4615      	mov	r5, r2
	att = att_get(conn);
   11cee:	f7ff fbbb 	bl	11468 <att_get>
	if (!att) {
   11cf2:	b190      	cbz	r0, 11d1a <bt_att_create_pdu+0x32>
	return list->head;
   11cf4:	6a83      	ldr	r3, [r0, #40]	; 0x28
   11cf6:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11cf8:	b15b      	cbz	r3, 11d12 <bt_att_create_pdu+0x2a>
   11cfa:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   11cfe:	d008      	beq.n	11d12 <bt_att_create_pdu+0x2a>
	return node->next;
   11d00:	681b      	ldr	r3, [r3, #0]
   11d02:	b10b      	cbz	r3, 11d08 <bt_att_create_pdu+0x20>
   11d04:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11d08:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   11d0c:	428a      	cmp	r2, r1
   11d0e:	d906      	bls.n	11d1e <bt_att_create_pdu+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11d10:	b95b      	cbnz	r3, 11d2a <bt_att_create_pdu+0x42>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   11d12:	2157      	movs	r1, #87	; 0x57
   11d14:	480a      	ldr	r0, [pc, #40]	; (11d40 <bt_att_create_pdu+0x58>)
   11d16:	f007 fe28 	bl	1996a <printk>
}
   11d1a:	2000      	movs	r0, #0
   11d1c:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   11d1e:	462a      	mov	r2, r5
   11d20:	4631      	mov	r1, r6
}
   11d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   11d26:	f7ff be85 	b.w	11a34 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   11d2a:	f513 749e 	adds.w	r4, r3, #316	; 0x13c
   11d2e:	d004      	beq.n	11d3a <bt_att_create_pdu+0x52>
	return node->next;
   11d30:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11d34:	b10c      	cbz	r4, 11d3a <bt_att_create_pdu+0x52>
   11d36:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
   11d3a:	4618      	mov	r0, r3
   11d3c:	4623      	mov	r3, r4
   11d3e:	e7e3      	b.n	11d08 <bt_att_create_pdu+0x20>
   11d40:	00020a82 	.word	0x00020a82

00011d44 <att_read_group_req>:
{
   11d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   11d48:	898c      	ldrh	r4, [r1, #12]
{
   11d4a:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   11d4c:	3c04      	subs	r4, #4
   11d4e:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   11d50:	2c02      	cmp	r4, #2
{
   11d52:	4608      	mov	r0, r1
   11d54:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   11d56:	d001      	beq.n	11d5c <att_read_group_req+0x18>
   11d58:	2c10      	cmp	r4, #16
   11d5a:	d16f      	bne.n	11e3c <att_read_group_req+0xf8>
   11d5c:	2104      	movs	r1, #4
   11d5e:	3008      	adds	r0, #8
   11d60:	f002 fe88 	bl	14a74 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11d64:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   11d68:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   11d6a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11d6c:	1d01      	adds	r1, r0, #4
   11d6e:	4622      	mov	r2, r4
   11d70:	4640      	mov	r0, r8
   11d72:	f009 f8dd 	bl	1af30 <bt_uuid_create>
   11d76:	2800      	cmp	r0, #0
   11d78:	d062      	beq.n	11e40 <att_read_group_req+0xfc>
	if (!start || !end) {
   11d7a:	2e00      	cmp	r6, #0
   11d7c:	d03a      	beq.n	11df4 <att_read_group_req+0xb0>
   11d7e:	2400      	movs	r4, #0
   11d80:	2f00      	cmp	r7, #0
   11d82:	d036      	beq.n	11df2 <att_read_group_req+0xae>
	if (start > end) {
   11d84:	42be      	cmp	r6, r7
   11d86:	d835      	bhi.n	11df4 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   11d88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11d8c:	4640      	mov	r0, r8
   11d8e:	a901      	add	r1, sp, #4
   11d90:	f88d 4004 	strb.w	r4, [sp, #4]
   11d94:	f8ad 3006 	strh.w	r3, [sp, #6]
   11d98:	f009 f89c 	bl	1aed4 <bt_uuid_cmp>
   11d9c:	2800      	cmp	r0, #0
   11d9e:	d134      	bne.n	11e0a <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   11da0:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   11da2:	2214      	movs	r2, #20
   11da4:	2100      	movs	r1, #0
   11da6:	a807      	add	r0, sp, #28
   11da8:	f009 f84a 	bl	1ae40 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   11dac:	2201      	movs	r2, #1
   11dae:	2111      	movs	r1, #17
   11db0:	4620      	mov	r0, r4
   11db2:	f7ff ff99 	bl	11ce8 <bt_att_create_pdu>
   11db6:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   11db8:	2800      	cmp	r0, #0
   11dba:	d041      	beq.n	11e40 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   11dbc:	2101      	movs	r1, #1
   11dbe:	3008      	adds	r0, #8
	data.uuid = uuid;
   11dc0:	e9cd 5807 	strd	r5, r8, [sp, #28]
   11dc4:	f002 fe74 	bl	14ab0 <net_buf_simple_add>
	data.rsp->len = 0U;
   11dc8:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   11dcc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11dce:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   11dd0:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11dd4:	4639      	mov	r1, r7
   11dd6:	4630      	mov	r0, r6
   11dd8:	4a1a      	ldr	r2, [pc, #104]	; (11e44 <att_read_group_req+0x100>)
	data.group = NULL;
   11dda:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11dde:	f009 fbf4 	bl	1b5ca <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   11de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11de4:	781c      	ldrb	r4, [r3, #0]
   11de6:	bb1c      	cbnz	r4, 11e30 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   11de8:	9809      	ldr	r0, [sp, #36]	; 0x24
   11dea:	f002 fd4b 	bl	14884 <net_buf_unref>
	if (!req) {
   11dee:	230a      	movs	r3, #10
   11df0:	e018      	b.n	11e24 <att_read_group_req+0xe0>
			*err = 0U;
   11df2:	463e      	mov	r6, r7
	if (!req) {
   11df4:	2301      	movs	r3, #1
   11df6:	4632      	mov	r2, r6
   11df8:	2110      	movs	r1, #16
   11dfa:	4628      	mov	r0, r5
   11dfc:	f7ff fe6c 	bl	11ad8 <send_err_rsp.part.0>
		return 0;
   11e00:	2400      	movs	r4, #0
}
   11e02:	4620      	mov	r0, r4
   11e04:	b00c      	add	sp, #48	; 0x30
   11e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   11e0a:	f642 0301 	movw	r3, #10241	; 0x2801
   11e0e:	4640      	mov	r0, r8
   11e10:	a907      	add	r1, sp, #28
   11e12:	f88d 401c 	strb.w	r4, [sp, #28]
   11e16:	f8ad 301e 	strh.w	r3, [sp, #30]
   11e1a:	f009 f85b 	bl	1aed4 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   11e1e:	2800      	cmp	r0, #0
   11e20:	d0be      	beq.n	11da0 <att_read_group_req+0x5c>
	if (!req) {
   11e22:	2310      	movs	r3, #16
   11e24:	4632      	mov	r2, r6
   11e26:	2110      	movs	r1, #16
   11e28:	4628      	mov	r0, r5
   11e2a:	f7ff fe55 	bl	11ad8 <send_err_rsp.part.0>
		return 0;
   11e2e:	e7e8      	b.n	11e02 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11e30:	4628      	mov	r0, r5
   11e32:	4a05      	ldr	r2, [pc, #20]	; (11e48 <att_read_group_req+0x104>)
   11e34:	9909      	ldr	r1, [sp, #36]	; 0x24
   11e36:	f009 fcff 	bl	1b838 <bt_att_chan_send_rsp>
	return 0;
   11e3a:	e7e1      	b.n	11e00 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   11e3c:	2404      	movs	r4, #4
   11e3e:	e7e0      	b.n	11e02 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   11e40:	240e      	movs	r4, #14
   11e42:	e7de      	b.n	11e02 <att_read_group_req+0xbe>
   11e44:	000116e1 	.word	0x000116e1
   11e48:	0001b909 	.word	0x0001b909

00011e4c <att_read_mult_req>:
{
   11e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   11e50:	6886      	ldr	r6, [r0, #8]
{
   11e52:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   11e54:	2210      	movs	r2, #16
{
   11e56:	4604      	mov	r4, r0
   11e58:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   11e5a:	4668      	mov	r0, sp
   11e5c:	2100      	movs	r1, #0
   11e5e:	f008 ffef 	bl	1ae40 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   11e62:	2200      	movs	r2, #0
   11e64:	210f      	movs	r1, #15
   11e66:	4630      	mov	r0, r6
   11e68:	f7ff ff3e 	bl	11ce8 <bt_att_create_pdu>
   11e6c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   11e6e:	b360      	cbz	r0, 11eca <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   11e70:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11e74:	f8df 9058 	ldr.w	r9, [pc, #88]	; 11ed0 <att_read_mult_req+0x84>
	data.chan = chan;
   11e78:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   11e7a:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   11e7e:	89ab      	ldrh	r3, [r5, #12]
   11e80:	2b01      	cmp	r3, #1
   11e82:	d805      	bhi.n	11e90 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11e84:	4620      	mov	r0, r4
   11e86:	4a13      	ldr	r2, [pc, #76]	; (11ed4 <att_read_mult_req+0x88>)
   11e88:	9902      	ldr	r1, [sp, #8]
   11e8a:	f009 fcd5 	bl	1b838 <bt_att_chan_send_rsp>
   11e8e:	e018      	b.n	11ec2 <att_read_mult_req+0x76>
   11e90:	4638      	mov	r0, r7
   11e92:	f00a fa98 	bl	1c3c6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11e96:	466b      	mov	r3, sp
   11e98:	464a      	mov	r2, r9
   11e9a:	4601      	mov	r1, r0
   11e9c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   11e9e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11ea2:	f009 fb92 	bl	1b5ca <bt_gatt_foreach_attr>
		if (data.err) {
   11ea6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11eaa:	2b00      	cmp	r3, #0
   11eac:	d0e7      	beq.n	11e7e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   11eae:	9802      	ldr	r0, [sp, #8]
   11eb0:	f002 fce8 	bl	14884 <net_buf_unref>
	if (!req) {
   11eb4:	4632      	mov	r2, r6
   11eb6:	210e      	movs	r1, #14
   11eb8:	4620      	mov	r0, r4
   11eba:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11ebe:	f7ff fe0b 	bl	11ad8 <send_err_rsp.part.0>
	return 0;
   11ec2:	2000      	movs	r0, #0
}
   11ec4:	b005      	add	sp, #20
   11ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   11eca:	200e      	movs	r0, #14
   11ecc:	e7fa      	b.n	11ec4 <att_read_mult_req+0x78>
   11ece:	bf00      	nop
   11ed0:	0001b931 	.word	0x0001b931
   11ed4:	0001b909 	.word	0x0001b909

00011ed8 <att_read_rsp>:
{
   11ed8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   11edc:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   11ee0:	4605      	mov	r5, r0
   11ee2:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   11ee4:	4640      	mov	r0, r8
   11ee6:	2101      	movs	r1, #1
{
   11ee8:	4614      	mov	r4, r2
   11eea:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   11eec:	f00a f9fe 	bl	1c2ec <bt_gatt_change_aware>
   11ef0:	b390      	cbz	r0, 11f58 <att_read_rsp+0x80>
	if (!handle) {
   11ef2:	b39e      	cbz	r6, 11f5c <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   11ef4:	2210      	movs	r2, #16
   11ef6:	2100      	movs	r1, #0
   11ef8:	4668      	mov	r0, sp
   11efa:	f008 ffa1 	bl	1ae40 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   11efe:	2200      	movs	r2, #0
   11f00:	4621      	mov	r1, r4
   11f02:	4640      	mov	r0, r8
   11f04:	f7ff fef0 	bl	11ce8 <bt_att_create_pdu>
   11f08:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   11f0a:	b348      	cbz	r0, 11f60 <att_read_rsp+0x88>
	data.offset = offset;
   11f0c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11f10:	4631      	mov	r1, r6
	data.offset = offset;
   11f12:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   11f16:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11f18:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   11f1a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11f1e:	4a11      	ldr	r2, [pc, #68]	; (11f64 <att_read_rsp+0x8c>)
   11f20:	466b      	mov	r3, sp
	data.chan = chan;
   11f22:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11f24:	f009 fb51 	bl	1b5ca <bt_gatt_foreach_attr>
	if (data.err) {
   11f28:	f89d 400c 	ldrb.w	r4, [sp, #12]
   11f2c:	b174      	cbz	r4, 11f4c <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   11f2e:	9802      	ldr	r0, [sp, #8]
   11f30:	f002 fca8 	bl	14884 <net_buf_unref>
	if (!req) {
   11f34:	4632      	mov	r2, r6
   11f36:	4639      	mov	r1, r7
   11f38:	4628      	mov	r0, r5
   11f3a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11f3e:	f7ff fdcb 	bl	11ad8 <send_err_rsp.part.0>
		return 0;
   11f42:	2400      	movs	r4, #0
}
   11f44:	4620      	mov	r0, r4
   11f46:	b004      	add	sp, #16
   11f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11f4c:	4628      	mov	r0, r5
   11f4e:	4a06      	ldr	r2, [pc, #24]	; (11f68 <att_read_rsp+0x90>)
   11f50:	9902      	ldr	r1, [sp, #8]
   11f52:	f009 fc71 	bl	1b838 <bt_att_chan_send_rsp>
	return 0;
   11f56:	e7f5      	b.n	11f44 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11f58:	2412      	movs	r4, #18
   11f5a:	e7f3      	b.n	11f44 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   11f5c:	2401      	movs	r4, #1
   11f5e:	e7f1      	b.n	11f44 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   11f60:	240e      	movs	r4, #14
   11f62:	e7ef      	b.n	11f44 <att_read_rsp+0x6c>
   11f64:	0001b931 	.word	0x0001b931
   11f68:	0001b909 	.word	0x0001b909

00011f6c <att_read_type_req>:
{
   11f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   11f70:	898c      	ldrh	r4, [r1, #12]
{
   11f72:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   11f74:	3c04      	subs	r4, #4
   11f76:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   11f78:	2c02      	cmp	r4, #2
{
   11f7a:	4608      	mov	r0, r1
   11f7c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   11f7e:	d001      	beq.n	11f84 <att_read_type_req+0x18>
   11f80:	2c10      	cmp	r4, #16
   11f82:	d150      	bne.n	12026 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   11f84:	2104      	movs	r1, #4
   11f86:	3008      	adds	r0, #8
   11f88:	f002 fd74 	bl	14a74 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11f8c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   11f90:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   11f92:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11f94:	1d01      	adds	r1, r0, #4
   11f96:	4622      	mov	r2, r4
   11f98:	4640      	mov	r0, r8
   11f9a:	f008 ffc9 	bl	1af30 <bt_uuid_create>
   11f9e:	b188      	cbz	r0, 11fc4 <att_read_type_req+0x58>
	if (!start || !end) {
   11fa0:	b19e      	cbz	r6, 11fca <att_read_type_req+0x5e>
   11fa2:	b18f      	cbz	r7, 11fc8 <att_read_type_req+0x5c>
	if (start > end) {
   11fa4:	42b7      	cmp	r7, r6
   11fa6:	d310      	bcc.n	11fca <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   11fa8:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   11faa:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   11fac:	2100      	movs	r1, #0
   11fae:	eb0d 0002 	add.w	r0, sp, r2
   11fb2:	f008 ff45 	bl	1ae40 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   11fb6:	2201      	movs	r2, #1
   11fb8:	2109      	movs	r1, #9
   11fba:	4620      	mov	r0, r4
   11fbc:	f7ff fe94 	bl	11ce8 <bt_att_create_pdu>
   11fc0:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   11fc2:	b968      	cbnz	r0, 11fe0 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   11fc4:	240e      	movs	r4, #14
   11fc6:	e007      	b.n	11fd8 <att_read_type_req+0x6c>
			*err = 0U;
   11fc8:	463e      	mov	r6, r7
	if (!req) {
   11fca:	2301      	movs	r3, #1
   11fcc:	4632      	mov	r2, r6
   11fce:	2108      	movs	r1, #8
   11fd0:	4628      	mov	r0, r5
   11fd2:	f7ff fd81 	bl	11ad8 <send_err_rsp.part.0>
		return 0;
   11fd6:	2400      	movs	r4, #0
}
   11fd8:	4620      	mov	r0, r4
   11fda:	b00c      	add	sp, #48	; 0x30
   11fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   11fe0:	2101      	movs	r1, #1
   11fe2:	3008      	adds	r0, #8
	data.uuid = uuid;
   11fe4:	e9cd 5806 	strd	r5, r8, [sp, #24]
   11fe8:	f002 fd62 	bl	14ab0 <net_buf_simple_add>
	data.rsp->len = 0U;
   11fec:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   11ff0:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   11ff2:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   11ff4:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   11ff6:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   11ffa:	4a0c      	ldr	r2, [pc, #48]	; (1202c <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   11ffc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12000:	4630      	mov	r0, r6
   12002:	ab06      	add	r3, sp, #24
   12004:	f009 fae1 	bl	1b5ca <bt_gatt_foreach_attr>
	if (data.err) {
   12008:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   1200c:	b12c      	cbz	r4, 1201a <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   1200e:	9808      	ldr	r0, [sp, #32]
   12010:	f002 fc38 	bl	14884 <net_buf_unref>
	if (!req) {
   12014:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   12018:	e7d8      	b.n	11fcc <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1201a:	4628      	mov	r0, r5
   1201c:	4a04      	ldr	r2, [pc, #16]	; (12030 <att_read_type_req+0xc4>)
   1201e:	9908      	ldr	r1, [sp, #32]
   12020:	f009 fc0a 	bl	1b838 <bt_att_chan_send_rsp>
	return 0;
   12024:	e7d8      	b.n	11fd8 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   12026:	2404      	movs	r4, #4
   12028:	e7d6      	b.n	11fd8 <att_read_type_req+0x6c>
   1202a:	bf00      	nop
   1202c:	00011909 	.word	0x00011909
   12030:	0001b909 	.word	0x0001b909

00012034 <att_find_type_req>:
{
   12034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12038:	4688      	mov	r8, r1
   1203a:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1203c:	2106      	movs	r1, #6
   1203e:	b086      	sub	sp, #24
   12040:	f108 0008 	add.w	r0, r8, #8
   12044:	f002 fd16 	bl	14a74 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   12048:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1204a:	b317      	cbz	r7, 12092 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1204c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   12050:	f1b9 0f00 	cmp.w	r9, #0
   12054:	d01c      	beq.n	12090 <att_find_type_req+0x5c>
	if (start > end) {
   12056:	454f      	cmp	r7, r9
   12058:	d81b      	bhi.n	12092 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1205a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1205c:	2400      	movs	r4, #0
   1205e:	f8ad 3002 	strh.w	r3, [sp, #2]
   12062:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12066:	4668      	mov	r0, sp
   12068:	a901      	add	r1, sp, #4
	value = buf->data;
   1206a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1206e:	f88d 4000 	strb.w	r4, [sp]
   12072:	f88d 4004 	strb.w	r4, [sp, #4]
   12076:	f8ad 3006 	strh.w	r3, [sp, #6]
   1207a:	f008 ff2b 	bl	1aed4 <bt_uuid_cmp>
   1207e:	4606      	mov	r6, r0
   12080:	b190      	cbz	r0, 120a8 <att_find_type_req+0x74>
	if (!req) {
   12082:	230a      	movs	r3, #10
   12084:	463a      	mov	r2, r7
   12086:	2106      	movs	r1, #6
   12088:	4628      	mov	r0, r5
   1208a:	f7ff fd25 	bl	11ad8 <send_err_rsp.part.0>
		return 0;
   1208e:	e007      	b.n	120a0 <att_find_type_req+0x6c>
			*err = 0U;
   12090:	464f      	mov	r7, r9
	if (!req) {
   12092:	2301      	movs	r3, #1
   12094:	463a      	mov	r2, r7
   12096:	2106      	movs	r1, #6
   12098:	4628      	mov	r0, r5
   1209a:	f7ff fd1d 	bl	11ad8 <send_err_rsp.part.0>
		return 0;
   1209e:	2400      	movs	r4, #0
}
   120a0:	4620      	mov	r0, r4
   120a2:	b006      	add	sp, #24
   120a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   120a8:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   120ac:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   120b0:	4601      	mov	r1, r0
   120b2:	2214      	movs	r2, #20
   120b4:	a801      	add	r0, sp, #4
   120b6:	f008 fec3 	bl	1ae40 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   120ba:	4632      	mov	r2, r6
   120bc:	2107      	movs	r1, #7
   120be:	4640      	mov	r0, r8
   120c0:	f7ff fe12 	bl	11ce8 <bt_att_create_pdu>
   120c4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   120c6:	b1e0      	cbz	r0, 12102 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   120c8:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   120ca:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   120cc:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   120d0:	4638      	mov	r0, r7
   120d2:	4a0d      	ldr	r2, [pc, #52]	; (12108 <att_find_type_req+0xd4>)
   120d4:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   120d6:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   120da:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   120de:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   120e0:	f009 fa73 	bl	1b5ca <bt_gatt_foreach_attr>
	if (data.err) {
   120e4:	f89d 4015 	ldrb.w	r4, [sp, #21]
   120e8:	b12c      	cbz	r4, 120f6 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   120ea:	9802      	ldr	r0, [sp, #8]
   120ec:	f002 fbca 	bl	14884 <net_buf_unref>
	if (!req) {
   120f0:	f89d 3015 	ldrb.w	r3, [sp, #21]
   120f4:	e7ce      	b.n	12094 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   120f6:	4628      	mov	r0, r5
   120f8:	4a04      	ldr	r2, [pc, #16]	; (1210c <att_find_type_req+0xd8>)
   120fa:	9902      	ldr	r1, [sp, #8]
   120fc:	f009 fb9c 	bl	1b838 <bt_att_chan_send_rsp>
	return 0;
   12100:	e7ce      	b.n	120a0 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12102:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12104:	e7cc      	b.n	120a0 <att_find_type_req+0x6c>
   12106:	bf00      	nop
   12108:	000114d1 	.word	0x000114d1
   1210c:	0001b909 	.word	0x0001b909

00012110 <att_find_info_req>:
{
   12110:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   12112:	688b      	ldr	r3, [r1, #8]
{
   12114:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   12116:	881e      	ldrh	r6, [r3, #0]
{
   12118:	b085      	sub	sp, #20
	if (!start || !end) {
   1211a:	b19e      	cbz	r6, 12144 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1211c:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   1211e:	b184      	cbz	r4, 12142 <att_find_info_req+0x32>
	if (start > end) {
   12120:	42b4      	cmp	r4, r6
   12122:	d30f      	bcc.n	12144 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   12124:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   12126:	2210      	movs	r2, #16
   12128:	2100      	movs	r1, #0
   1212a:	4668      	mov	r0, sp
   1212c:	f008 fe88 	bl	1ae40 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   12130:	2200      	movs	r2, #0
   12132:	2105      	movs	r1, #5
   12134:	4638      	mov	r0, r7
   12136:	f7ff fdd7 	bl	11ce8 <bt_att_create_pdu>
   1213a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1213c:	b958      	cbnz	r0, 12156 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1213e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   12140:	e007      	b.n	12152 <att_find_info_req+0x42>
			*err = 0U;
   12142:	4626      	mov	r6, r4
	if (!req) {
   12144:	2301      	movs	r3, #1
   12146:	4632      	mov	r2, r6
   12148:	2104      	movs	r1, #4
   1214a:	4628      	mov	r0, r5
   1214c:	f7ff fcc4 	bl	11ad8 <send_err_rsp.part.0>
	return 0;
   12150:	2000      	movs	r0, #0
}
   12152:	b005      	add	sp, #20
   12154:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12156:	4621      	mov	r1, r4
   12158:	466b      	mov	r3, sp
   1215a:	4630      	mov	r0, r6
   1215c:	4a08      	ldr	r2, [pc, #32]	; (12180 <att_find_info_req+0x70>)
	data.chan = chan;
   1215e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12160:	f009 fa33 	bl	1b5ca <bt_gatt_foreach_attr>
	if (!data.rsp) {
   12164:	9c02      	ldr	r4, [sp, #8]
   12166:	b924      	cbnz	r4, 12172 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   12168:	9801      	ldr	r0, [sp, #4]
   1216a:	f002 fb8b 	bl	14884 <net_buf_unref>
	if (!req) {
   1216e:	230a      	movs	r3, #10
   12170:	e7e9      	b.n	12146 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12172:	4628      	mov	r0, r5
   12174:	4a03      	ldr	r2, [pc, #12]	; (12184 <att_find_info_req+0x74>)
   12176:	9901      	ldr	r1, [sp, #4]
   12178:	f009 fb5e 	bl	1b838 <bt_att_chan_send_rsp>
   1217c:	e7e8      	b.n	12150 <att_find_info_req+0x40>
   1217e:	bf00      	nop
   12180:	0001b5e1 	.word	0x0001b5e1
   12184:	0001b909 	.word	0x0001b909

00012188 <att_mtu_req>:
{
   12188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1218a:	4603      	mov	r3, r0
   1218c:	f853 2bc8 	ldr.w	r2, [r3], #200
{
   12190:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   12192:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12194:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   12198:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   1219c:	071b      	lsls	r3, r3, #28
   1219e:	d41b      	bmi.n	121d8 <att_mtu_req+0x50>
	mtu_client = sys_le16_to_cpu(req->mtu);
   121a0:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   121a2:	881b      	ldrh	r3, [r3, #0]
   121a4:	2b16      	cmp	r3, #22
   121a6:	d919      	bls.n	121dc <att_mtu_req+0x54>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   121a8:	2202      	movs	r2, #2
   121aa:	2103      	movs	r1, #3
   121ac:	f7ff fd9c 	bl	11ce8 <bt_att_create_pdu>
	if (!pdu) {
   121b0:	4606      	mov	r6, r0
   121b2:	b1a8      	cbz	r0, 121e0 <att_mtu_req+0x58>
	return net_buf_simple_add(&buf->b, len);
   121b4:	2102      	movs	r1, #2
   121b6:	3008      	adds	r0, #8
   121b8:	f002 fc7a 	bl	14ab0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   121bc:	2717      	movs	r7, #23
   121be:	7044      	strb	r4, [r0, #1]
   121c0:	7007      	strb	r7, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   121c2:	4631      	mov	r1, r6
   121c4:	4628      	mov	r0, r5
   121c6:	4a07      	ldr	r2, [pc, #28]	; (121e4 <att_mtu_req+0x5c>)
   121c8:	f009 fb36 	bl	1b838 <bt_att_chan_send_rsp>
	return 0;
   121cc:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   121ce:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   121d2:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
}
   121d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   121d8:	2006      	movs	r0, #6
   121da:	e7fc      	b.n	121d6 <att_mtu_req+0x4e>
		return BT_ATT_ERR_INVALID_PDU;
   121dc:	2004      	movs	r0, #4
   121de:	e7fa      	b.n	121d6 <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   121e0:	200e      	movs	r0, #14
   121e2:	e7f8      	b.n	121d6 <att_mtu_req+0x4e>
   121e4:	0001b909 	.word	0x0001b909

000121e8 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   121e8:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   121ea:	2400      	movs	r4, #0
{
   121ec:	4602      	mov	r2, r0
   121ee:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   121f0:	4807      	ldr	r0, [pc, #28]	; (12210 <bt_att_req_alloc+0x28>)
   121f2:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   121f4:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   121f6:	f004 fe87 	bl	16f08 <k_mem_slab_alloc>
   121fa:	4601      	mov	r1, r0
   121fc:	b930      	cbnz	r0, 1220c <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   121fe:	2218      	movs	r2, #24
   12200:	9801      	ldr	r0, [sp, #4]
   12202:	f008 fe1d 	bl	1ae40 <memset>

	return req;
   12206:	9801      	ldr	r0, [sp, #4]
}
   12208:	b002      	add	sp, #8
   1220a:	bd10      	pop	{r4, pc}
		return NULL;
   1220c:	4620      	mov	r0, r4
   1220e:	e7fb      	b.n	12208 <bt_att_req_alloc+0x20>
   12210:	20008624 	.word	0x20008624

00012214 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   12214:	b507      	push	{r0, r1, r2, lr}
   12216:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   12218:	a901      	add	r1, sp, #4
   1221a:	4803      	ldr	r0, [pc, #12]	; (12228 <bt_att_req_free+0x14>)
   1221c:	f004 fece 	bl	16fbc <k_mem_slab_free>
}
   12220:	b003      	add	sp, #12
   12222:	f85d fb04 	ldr.w	pc, [sp], #4
   12226:	bf00      	nop
   12228:	20008624 	.word	0x20008624

0001222c <att_handle_rsp>:
{
   1222c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12230:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->timeout_work);
   12232:	30f0      	adds	r0, #240	; 0xf0
{
   12234:	460f      	mov	r7, r1
   12236:	4690      	mov	r8, r2
   12238:	461e      	mov	r6, r3
	k_delayed_work_cancel(&chan->timeout_work);
   1223a:	f006 fc93 	bl	18b64 <k_delayed_work_cancel>
	if (!chan->req) {
   1223e:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
   12242:	f04f 0a00 	mov.w	sl, #0
   12246:	b99d      	cbnz	r5, 12270 <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   12248:	2157      	movs	r1, #87	; 0x57
   1224a:	4818      	ldr	r0, [pc, #96]	; (122ac <att_handle_rsp+0x80>)
   1224c:	f007 fb8d 	bl	1996a <printk>
	att_req_send_process(chan->att);
   12250:	6820      	ldr	r0, [r4, #0]
   12252:	f009 fbd5 	bl	1ba00 <att_req_send_process>
	if (func) {
   12256:	b13d      	cbz	r5, 12268 <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   12258:	6820      	ldr	r0, [r4, #0]
   1225a:	f8cd 9000 	str.w	r9, [sp]
   1225e:	4643      	mov	r3, r8
   12260:	463a      	mov	r2, r7
   12262:	4631      	mov	r1, r6
   12264:	6800      	ldr	r0, [r0, #0]
   12266:	47a8      	blx	r5
}
   12268:	2000      	movs	r0, #0
   1226a:	b002      	add	sp, #8
   1226c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   12270:	4b0f      	ldr	r3, [pc, #60]	; (122b0 <att_handle_rsp+0x84>)
   12272:	429d      	cmp	r5, r3
   12274:	d103      	bne.n	1227e <att_handle_rsp+0x52>
	bt_att_func_t func = NULL;
   12276:	4655      	mov	r5, sl
		chan->req = NULL;
   12278:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
		goto process;
   1227c:	e7e8      	b.n	12250 <att_handle_rsp+0x24>
	if (chan->req->buf) {
   1227e:	6928      	ldr	r0, [r5, #16]
   12280:	b128      	cbz	r0, 1228e <att_handle_rsp+0x62>
		net_buf_unref(chan->req->buf);
   12282:	f002 faff 	bl	14884 <net_buf_unref>
		chan->req->buf = NULL;
   12286:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1228a:	f8c3 a010 	str.w	sl, [r3, #16]
	chan->req->func = NULL;
   1228e:	f04f 0a00 	mov.w	sl, #0
	func = chan->req->func;
   12292:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   12296:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   12298:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   1229c:	f8d0 9014 	ldr.w	r9, [r0, #20]
	att_req_destroy(chan->req);
   122a0:	f009 fc3b 	bl	1bb1a <att_req_destroy>
	chan->req = NULL;
   122a4:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
   122a8:	e7d2      	b.n	12250 <att_handle_rsp+0x24>
   122aa:	bf00      	nop
   122ac:	00020aa2 	.word	0x00020aa2
   122b0:	2000a99c 	.word	0x2000a99c

000122b4 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   122b4:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
{
   122b8:	b430      	push	{r4, r5}
	if (!chan->req || chan->req == &cancel) {
   122ba:	b18b      	cbz	r3, 122e0 <att_error_rsp+0x2c>
   122bc:	4a09      	ldr	r2, [pc, #36]	; (122e4 <att_error_rsp+0x30>)
   122be:	4293      	cmp	r3, r2
   122c0:	d00e      	beq.n	122e0 <att_error_rsp+0x2c>
	if (chan->req->buf) {
   122c2:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
   122c4:	6889      	ldr	r1, [r1, #8]
	if (chan->req->buf) {
   122c6:	b12a      	cbz	r2, 122d4 <att_error_rsp+0x20>
	buf->data = buf->__buf + state->offset;
   122c8:	899d      	ldrh	r5, [r3, #12]
   122ca:	89dc      	ldrh	r4, [r3, #14]
   122cc:	6913      	ldr	r3, [r2, #16]
	buf->len = state->len;
   122ce:	8194      	strh	r4, [r2, #12]
	buf->data = buf->__buf + state->offset;
   122d0:	442b      	add	r3, r5
   122d2:	6093      	str	r3, [r2, #8]
	err = rsp->error;
   122d4:	78cb      	ldrb	r3, [r1, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   122d6:	2200      	movs	r2, #0
}
   122d8:	bc30      	pop	{r4, r5}
	return att_handle_rsp(chan, NULL, 0, err);
   122da:	4611      	mov	r1, r2
   122dc:	f7ff bfa6 	b.w	1222c <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   122e0:	230e      	movs	r3, #14
   122e2:	e7f8      	b.n	122d6 <att_error_rsp+0x22>
   122e4:	2000a99c 	.word	0x2000a99c

000122e8 <att_reset>:
{
   122e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   122ea:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   122ec:	9803      	ldr	r0, [sp, #12]
   122ee:	2200      	movs	r2, #0
   122f0:	2300      	movs	r3, #0
   122f2:	300c      	adds	r0, #12
   122f4:	f002 fa44 	bl	14780 <net_buf_get>
   122f8:	b948      	cbnz	r0, 1230e <att_reset+0x26>
	att->conn = NULL;
   122fa:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   122fc:	6854      	ldr	r4, [r2, #4]
   122fe:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   12300:	b944      	cbnz	r4, 12314 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   12302:	480d      	ldr	r0, [pc, #52]	; (12338 <att_reset+0x50>)
   12304:	a903      	add	r1, sp, #12
   12306:	f004 fe59 	bl	16fbc <k_mem_slab_free>
}
   1230a:	b004      	add	sp, #16
   1230c:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   1230e:	f002 fab9 	bl	14884 <net_buf_unref>
   12312:	e7eb      	b.n	122ec <att_reset+0x4>
	return node->next;
   12314:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
   12316:	6866      	ldr	r6, [r4, #4]
   12318:	b136      	cbz	r6, 12328 <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1231a:	6963      	ldr	r3, [r4, #20]
   1231c:	210e      	movs	r1, #14
   1231e:	9300      	str	r3, [sp, #0]
   12320:	2300      	movs	r3, #0
   12322:	461a      	mov	r2, r3
   12324:	4618      	mov	r0, r3
   12326:	47b0      	blx	r6
		att_req_destroy(req);
   12328:	4620      	mov	r0, r4
   1232a:	f009 fbf6 	bl	1bb1a <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1232e:	2d00      	cmp	r5, #0
   12330:	d0e7      	beq.n	12302 <att_reset+0x1a>
   12332:	462c      	mov	r4, r5
   12334:	682d      	ldr	r5, [r5, #0]
   12336:	e7ee      	b.n	12316 <att_reset+0x2e>
   12338:	200085ec 	.word	0x200085ec

0001233c <att_timeout>:
{
   1233c:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
   1233e:	4605      	mov	r5, r0
   12340:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
   12344:	2145      	movs	r1, #69	; 0x45
{
   12346:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   12348:	4808      	ldr	r0, [pc, #32]	; (1236c <att_timeout+0x30>)
   1234a:	f007 fb0e 	bl	1996a <printk>
	att_chan_detach(chan);
   1234e:	4628      	mov	r0, r5
   12350:	f009 fc20 	bl	1bb94 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   12354:	6ab5      	ldr	r5, [r6, #40]	; 0x28
   12356:	b945      	cbnz	r5, 1236a <att_timeout+0x2e>
	att_reset(att);
   12358:	4630      	mov	r0, r6
   1235a:	f7ff ffc5 	bl	122e8 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1235e:	f854 0ce8 	ldr.w	r0, [r4, #-232]
   12362:	f002 f83b 	bl	143dc <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   12366:	f844 5ce8 	str.w	r5, [r4, #-232]
}
   1236a:	bd70      	pop	{r4, r5, r6, pc}
   1236c:	00020abe 	.word	0x00020abe

00012370 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   12370:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12374:	460c      	mov	r4, r1
   12376:	4617      	mov	r7, r2
   12378:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1237a:	4605      	mov	r5, r0
   1237c:	b950      	cbnz	r0, 12394 <bt_att_send+0x24>
   1237e:	492e      	ldr	r1, [pc, #184]	; (12438 <bt_att_send+0xc8>)
   12380:	482e      	ldr	r0, [pc, #184]	; (1243c <bt_att_send+0xcc>)
   12382:	f640 32ce 	movw	r2, #3022	; 0xbce
   12386:	f007 faf0 	bl	1996a <printk>
   1238a:	f640 31ce 	movw	r1, #3022	; 0xbce
   1238e:	482a      	ldr	r0, [pc, #168]	; (12438 <bt_att_send+0xc8>)
   12390:	f007 fd91 	bl	19eb6 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   12394:	b954      	cbnz	r4, 123ac <bt_att_send+0x3c>
   12396:	4928      	ldr	r1, [pc, #160]	; (12438 <bt_att_send+0xc8>)
   12398:	4828      	ldr	r0, [pc, #160]	; (1243c <bt_att_send+0xcc>)
   1239a:	f640 32cf 	movw	r2, #3023	; 0xbcf
   1239e:	f007 fae4 	bl	1996a <printk>
   123a2:	f640 31cf 	movw	r1, #3023	; 0xbcf
   123a6:	4824      	ldr	r0, [pc, #144]	; (12438 <bt_att_send+0xc8>)
   123a8:	f007 fd85 	bl	19eb6 <assert_post_action>

	att = att_get(conn);
   123ac:	4628      	mov	r0, r5
   123ae:	f7ff f85b 	bl	11468 <att_get>
	if (!att) {
   123b2:	4606      	mov	r6, r0
   123b4:	b938      	cbnz	r0, 123c6 <bt_att_send+0x56>
		net_buf_unref(buf);
   123b6:	4620      	mov	r0, r4
   123b8:	f002 fa64 	bl	14884 <net_buf_unref>
		return -ENOTCONN;
   123bc:	f06f 0038 	mvn.w	r0, #56	; 0x38

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   123c0:	b002      	add	sp, #8
   123c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   123c6:	b147      	cbz	r7, 123da <bt_att_send+0x6a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   123c8:	463b      	mov	r3, r7
   123ca:	4622      	mov	r2, r4
   123cc:	2104      	movs	r1, #4
   123ce:	4628      	mov	r0, r5
   123d0:	f8cd 8000 	str.w	r8, [sp]
   123d4:	f009 f838 	bl	1b448 <bt_l2cap_send_cb>
   123d8:	e7f2      	b.n	123c0 <bt_att_send+0x50>
	net_buf_put(&att->tx_queue, buf);
   123da:	f100 070c 	add.w	r7, r0, #12
   123de:	4621      	mov	r1, r4
   123e0:	4638      	mov	r0, r7
   123e2:	f002 fa21 	bl	14828 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   123e6:	2200      	movs	r2, #0
   123e8:	2300      	movs	r3, #0
   123ea:	4638      	mov	r0, r7
   123ec:	f002 f9c8 	bl	14780 <net_buf_get>
	if (!buf) {
   123f0:	4605      	mov	r5, r0
   123f2:	b908      	cbnz	r0, 123f8 <bt_att_send+0x88>
	return 0;
   123f4:	2000      	movs	r0, #0
   123f6:	e7e3      	b.n	123c0 <bt_att_send+0x50>
	return list->head;
   123f8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   123fa:	b1c3      	cbz	r3, 1242e <bt_att_send+0xbe>
   123fc:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   12400:	d015      	beq.n	1242e <bt_att_send+0xbe>
	return node->next;
   12402:	681c      	ldr	r4, [r3, #0]
   12404:	b10c      	cbz	r4, 1240a <bt_att_send+0x9a>
   12406:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		err = bt_att_chan_send(chan, buf, NULL);
   1240a:	2200      	movs	r2, #0
   1240c:	4629      	mov	r1, r5
   1240e:	f009 f9fc 	bl	1b80a <bt_att_chan_send>
		if (err >= 0) {
   12412:	2800      	cmp	r0, #0
   12414:	daee      	bge.n	123f4 <bt_att_send+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12416:	b154      	cbz	r4, 1242e <bt_att_send+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12418:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   1241c:	d004      	beq.n	12428 <bt_att_send+0xb8>
	return node->next;
   1241e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   12422:	b10b      	cbz	r3, 12428 <bt_att_send+0xb8>
   12424:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   12428:	4620      	mov	r0, r4
   1242a:	461c      	mov	r4, r3
   1242c:	e7ed      	b.n	1240a <bt_att_send+0x9a>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1242e:	4629      	mov	r1, r5
   12430:	4638      	mov	r0, r7
   12432:	f00a fe22 	bl	1d07a <k_queue_prepend>
   12436:	e7dd      	b.n	123f4 <bt_att_send+0x84>
   12438:	00020981 	.word	0x00020981
   1243c:	0001ea60 	.word	0x0001ea60

00012440 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   12440:	b538      	push	{r3, r4, r5, lr}
   12442:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   12444:	4605      	mov	r5, r0
   12446:	b950      	cbnz	r0, 1245e <bt_att_req_send+0x1e>
   12448:	4918      	ldr	r1, [pc, #96]	; (124ac <bt_att_req_send+0x6c>)
   1244a:	4819      	ldr	r0, [pc, #100]	; (124b0 <bt_att_req_send+0x70>)
   1244c:	f640 32eb 	movw	r2, #3051	; 0xbeb
   12450:	f007 fa8b 	bl	1996a <printk>
   12454:	f640 31eb 	movw	r1, #3051	; 0xbeb
   12458:	4814      	ldr	r0, [pc, #80]	; (124ac <bt_att_req_send+0x6c>)
   1245a:	f007 fd2c 	bl	19eb6 <assert_post_action>
	__ASSERT_NO_MSG(req);
   1245e:	b954      	cbnz	r4, 12476 <bt_att_req_send+0x36>
   12460:	4912      	ldr	r1, [pc, #72]	; (124ac <bt_att_req_send+0x6c>)
   12462:	4813      	ldr	r0, [pc, #76]	; (124b0 <bt_att_req_send+0x70>)
   12464:	f640 32ec 	movw	r2, #3052	; 0xbec
   12468:	f007 fa7f 	bl	1996a <printk>
   1246c:	f640 31ec 	movw	r1, #3052	; 0xbec
   12470:	480e      	ldr	r0, [pc, #56]	; (124ac <bt_att_req_send+0x6c>)
   12472:	f007 fd20 	bl	19eb6 <assert_post_action>

	att = att_get(conn);
   12476:	4628      	mov	r0, r5
   12478:	f7fe fff6 	bl	11468 <att_get>
	if (!att) {
   1247c:	4605      	mov	r5, r0
   1247e:	b930      	cbnz	r0, 1248e <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
   12480:	6920      	ldr	r0, [r4, #16]
   12482:	f002 f9ff 	bl	14884 <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
   12486:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
   1248a:	6125      	str	r5, [r4, #16]

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);

	return 0;
}
   1248c:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   1248e:	2300      	movs	r3, #0
   12490:	6023      	str	r3, [r4, #0]
	return list->tail;
   12492:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   12494:	b933      	cbnz	r3, 124a4 <bt_att_req_send+0x64>
	list->head = node;
   12496:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   1249a:	4628      	mov	r0, r5
   1249c:	f009 fab0 	bl	1ba00 <att_req_send_process>
	return 0;
   124a0:	2000      	movs	r0, #0
   124a2:	e7f3      	b.n	1248c <bt_att_req_send+0x4c>
	parent->next = child;
   124a4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   124a6:	6084      	str	r4, [r0, #8]
}
   124a8:	e7f7      	b.n	1249a <bt_att_req_send+0x5a>
   124aa:	bf00      	nop
   124ac:	00020981 	.word	0x00020981
   124b0:	0001ea60 	.word	0x0001ea60

000124b4 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   124b4:	b510      	push	{r4, lr}
   124b6:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   124b8:	b350      	cbz	r0, 12510 <bt_att_req_cancel+0x5c>
   124ba:	b349      	cbz	r1, 12510 <bt_att_req_cancel+0x5c>
		return;
	}

	att = att_get(conn);
   124bc:	f7fe ffd4 	bl	11468 <att_get>
	if (!att) {
   124c0:	b330      	cbz	r0, 12510 <bt_att_req_cancel+0x5c>
	return list->head;
   124c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   124c4:	b15b      	cbz	r3, 124de <bt_att_req_cancel+0x2a>
   124c6:	f5b3 719e 	subs.w	r1, r3, #316	; 0x13c
   124ca:	d008      	beq.n	124de <bt_att_req_cancel+0x2a>
	return node->next;
   124cc:	681b      	ldr	r3, [r3, #0]
   124ce:	b10b      	cbz	r3, 124d4 <bt_att_req_cancel+0x20>
   124d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
	if (chan->req != req) {
   124d4:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
   124d8:	4294      	cmp	r4, r2
   124da:	d006      	beq.n	124ea <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   124dc:	b96b      	cbnz	r3, 124fa <bt_att_req_cancel+0x46>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   124de:	3004      	adds	r0, #4
   124e0:	4621      	mov	r1, r4
   124e2:	f009 f9d1 	bl	1b888 <sys_slist_find_and_remove.isra.0>

	att_req_destroy(req);
   124e6:	4620      	mov	r0, r4
   124e8:	e003      	b.n	124f2 <bt_att_req_cancel+0x3e>
	att_req_destroy(req);
   124ea:	4620      	mov	r0, r4
	chan->req = &cancel;
   124ec:	4b09      	ldr	r3, [pc, #36]	; (12514 <bt_att_req_cancel+0x60>)
   124ee:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
}
   124f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
   124f6:	f009 bb10 	b.w	1bb1a <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
   124fa:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   124fe:	d004      	beq.n	1250a <bt_att_req_cancel+0x56>
	return node->next;
   12500:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12504:	b10a      	cbz	r2, 1250a <bt_att_req_cancel+0x56>
   12506:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   1250a:	4619      	mov	r1, r3
   1250c:	4613      	mov	r3, r2
   1250e:	e7e1      	b.n	124d4 <bt_att_req_cancel+0x20>
}
   12510:	bd10      	pop	{r4, pc}
   12512:	bf00      	nop
   12514:	2000a99c 	.word	0x2000a99c

00012518 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   12518:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   1251a:	4618      	mov	r0, r3
{
   1251c:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   1251e:	4907      	ldr	r1, [pc, #28]	; (1253c <db_hash_set+0x24>)
   12520:	2210      	movs	r2, #16
   12522:	47a0      	blx	r4
	if (len < 0) {
   12524:	1e04      	subs	r4, r0, #0
   12526:	da06      	bge.n	12536 <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   12528:	4622      	mov	r2, r4
   1252a:	2145      	movs	r1, #69	; 0x45
   1252c:	4804      	ldr	r0, [pc, #16]	; (12540 <db_hash_set+0x28>)
   1252e:	f007 fa1c 	bl	1996a <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
   12532:	4620      	mov	r0, r4
   12534:	bd10      	pop	{r4, pc}
	return 0;
   12536:	2400      	movs	r4, #0
   12538:	e7fb      	b.n	12532 <db_hash_set+0x1a>
   1253a:	bf00      	nop
   1253c:	2000c5d9 	.word	0x2000c5d9
   12540:	00020ad6 	.word	0x00020ad6

00012544 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   12544:	2210      	movs	r2, #16
{
   12546:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   12548:	4906      	ldr	r1, [pc, #24]	; (12564 <db_hash_store+0x20>)
   1254a:	4807      	ldr	r0, [pc, #28]	; (12568 <db_hash_store+0x24>)
   1254c:	f7f8 fe1c 	bl	b188 <settings_save_one>
	if (err) {
   12550:	4602      	mov	r2, r0
   12552:	b128      	cbz	r0, 12560 <db_hash_store+0x1c>
}
   12554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   12558:	2145      	movs	r1, #69	; 0x45
   1255a:	4804      	ldr	r0, [pc, #16]	; (1256c <db_hash_store+0x28>)
   1255c:	f007 ba05 	b.w	1996a <printk>
}
   12560:	bd08      	pop	{r3, pc}
   12562:	bf00      	nop
   12564:	2000c5c9 	.word	0x2000c5c9
   12568:	00020afc 	.word	0x00020afc
   1256c:	00020b04 	.word	0x00020b04

00012570 <find_cf_cfg>:
{
   12570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12572:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   12574:	2600      	movs	r6, #0
   12576:	4d0e      	ldr	r5, [pc, #56]	; (125b0 <find_cf_cfg+0x40>)
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   12578:	462f      	mov	r7, r5
		if (!conn) {
   1257a:	1c6a      	adds	r2, r5, #1
   1257c:	b954      	cbnz	r4, 12594 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1257e:	4669      	mov	r1, sp
   12580:	4610      	mov	r0, r2
   12582:	9400      	str	r4, [sp, #0]
   12584:	f8cd 4003 	str.w	r4, [sp, #3]
   12588:	f009 fbc9 	bl	1bd1e <bt_addr_le_cmp>
   1258c:	b940      	cbnz	r0, 125a0 <find_cf_cfg+0x30>
}
   1258e:	4638      	mov	r0, r7
   12590:	b003      	add	sp, #12
   12592:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   12594:	4620      	mov	r0, r4
   12596:	7829      	ldrb	r1, [r5, #0]
   12598:	f008 fe82 	bl	1b2a0 <bt_conn_is_peer_addr_le>
   1259c:	2800      	cmp	r0, #0
   1259e:	d1f6      	bne.n	1258e <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   125a0:	3601      	adds	r6, #1
   125a2:	2e0a      	cmp	r6, #10
   125a4:	f105 0510 	add.w	r5, r5, #16
   125a8:	d1e6      	bne.n	12578 <find_cf_cfg+0x8>
	return NULL;
   125aa:	2700      	movs	r7, #0
   125ac:	e7ef      	b.n	1258e <find_cf_cfg+0x1e>
   125ae:	bf00      	nop
   125b0:	2000a9b4 	.word	0x2000a9b4

000125b4 <find_sc_cfg>:
{
   125b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   125b6:	4606      	mov	r6, r0
   125b8:	460f      	mov	r7, r1
   125ba:	2400      	movs	r4, #0
   125bc:	4d09      	ldr	r5, [pc, #36]	; (125e4 <find_sc_cfg+0x30>)
		if (id == sc_cfg[i].id &&
   125be:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   125c2:	42b3      	cmp	r3, r6
   125c4:	d107      	bne.n	125d6 <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   125c6:	4639      	mov	r1, r7
   125c8:	4628      	mov	r0, r5
   125ca:	f009 fba8 	bl	1bd1e <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   125ce:	b910      	cbnz	r0, 125d6 <find_sc_cfg+0x22>
			return &sc_cfg[i];
   125d0:	4805      	ldr	r0, [pc, #20]	; (125e8 <find_sc_cfg+0x34>)
   125d2:	4420      	add	r0, r4
}
   125d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   125d6:	340c      	adds	r4, #12
   125d8:	2c78      	cmp	r4, #120	; 0x78
   125da:	f105 050c 	add.w	r5, r5, #12
   125de:	d1ee      	bne.n	125be <find_sc_cfg+0xa>
	return NULL;
   125e0:	2000      	movs	r0, #0
   125e2:	e7f7      	b.n	125d4 <find_sc_cfg+0x20>
   125e4:	2000be47 	.word	0x2000be47
   125e8:	2000be46 	.word	0x2000be46

000125ec <gatt_sub_find>:
{
   125ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   125ee:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   125f0:	2600      	movs	r6, #0
   125f2:	4d0e      	ldr	r5, [pc, #56]	; (1262c <gatt_sub_find+0x40>)
		struct gatt_sub *sub = &subscriptions[i];
   125f4:	462f      	mov	r7, r5
		if (!conn) {
   125f6:	1c6a      	adds	r2, r5, #1
   125f8:	b954      	cbnz	r4, 12610 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   125fa:	4669      	mov	r1, sp
   125fc:	4610      	mov	r0, r2
   125fe:	9400      	str	r4, [sp, #0]
   12600:	f8cd 4003 	str.w	r4, [sp, #3]
   12604:	f009 fb8b 	bl	1bd1e <bt_addr_le_cmp>
   12608:	b940      	cbnz	r0, 1261c <gatt_sub_find+0x30>
}
   1260a:	4638      	mov	r0, r7
   1260c:	b003      	add	sp, #12
   1260e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   12610:	4620      	mov	r0, r4
   12612:	7829      	ldrb	r1, [r5, #0]
   12614:	f008 fe44 	bl	1b2a0 <bt_conn_is_peer_addr_le>
   12618:	2800      	cmp	r0, #0
   1261a:	d1f6      	bne.n	1260a <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   1261c:	3601      	adds	r6, #1
   1261e:	2e0a      	cmp	r6, #10
   12620:	f105 0510 	add.w	r5, r5, #16
   12624:	d1e6      	bne.n	125f4 <gatt_sub_find+0x8>
	return NULL;
   12626:	2700      	movs	r7, #0
   12628:	e7ef      	b.n	1260a <gatt_sub_find+0x1e>
   1262a:	bf00      	nop
   1262c:	2000ab4c 	.word	0x2000ab4c

00012630 <find_cf_cfg_by_addr>:
{
   12630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12632:	4606      	mov	r6, r0
   12634:	460f      	mov	r7, r1
   12636:	2400      	movs	r4, #0
   12638:	4d09      	ldr	r5, [pc, #36]	; (12660 <find_cf_cfg_by_addr+0x30>)
			if (id == cf_cfg[i].id &&
   1263a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1263e:	42b3      	cmp	r3, r6
   12640:	d107      	bne.n	12652 <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   12642:	4629      	mov	r1, r5
   12644:	4638      	mov	r0, r7
   12646:	f009 fb6a 	bl	1bd1e <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   1264a:	b910      	cbnz	r0, 12652 <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   1264c:	4805      	ldr	r0, [pc, #20]	; (12664 <find_cf_cfg_by_addr+0x34>)
   1264e:	4420      	add	r0, r4
}
   12650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   12652:	3410      	adds	r4, #16
   12654:	2ca0      	cmp	r4, #160	; 0xa0
   12656:	f105 0510 	add.w	r5, r5, #16
   1265a:	d1ee      	bne.n	1263a <find_cf_cfg_by_addr+0xa>
	return NULL;
   1265c:	2000      	movs	r0, #0
   1265e:	e7f7      	b.n	12650 <find_cf_cfg_by_addr+0x20>
   12660:	2000a9b5 	.word	0x2000a9b5
   12664:	2000a9b4 	.word	0x2000a9b4

00012668 <bt_gatt_attr_write_ccc>:
{
   12668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1266c:	461f      	mov	r7, r3
   1266e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   12672:	4604      	mov	r4, r0
   12674:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   12676:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   1267a:	2b00      	cmp	r3, #0
   1267c:	d141      	bne.n	12702 <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   1267e:	1e7b      	subs	r3, r7, #1
   12680:	2b01      	cmp	r3, #1
   12682:	d841      	bhi.n	12708 <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   12684:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   12686:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   12688:	4649      	mov	r1, r9
   1268a:	bf14      	ite	ne
   1268c:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   1268e:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   12690:	f009 fb48 	bl	1bd24 <find_ccc_cfg>
	if (!cfg) {
   12694:	4605      	mov	r5, r0
   12696:	b9b0      	cbnz	r0, 126c6 <bt_gatt_attr_write_ccc+0x5e>
		if (!value) {
   12698:	b916      	cbnz	r6, 126a0 <bt_gatt_attr_write_ccc+0x38>
			return len;
   1269a:	4638      	mov	r0, r7
}
   1269c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   126a0:	4649      	mov	r1, r9
   126a2:	f009 fb3f 	bl	1bd24 <find_ccc_cfg>
		if (!cfg) {
   126a6:	4605      	mov	r5, r0
   126a8:	b930      	cbnz	r0, 126b8 <bt_gatt_attr_write_ccc+0x50>
			BT_WARN("No space to store CCC cfg");
   126aa:	4819      	ldr	r0, [pc, #100]	; (12710 <bt_gatt_attr_write_ccc+0xa8>)
   126ac:	2157      	movs	r1, #87	; 0x57
   126ae:	f007 f95c 	bl	1996a <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   126b2:	f06f 0010 	mvn.w	r0, #16
   126b6:	e7f1      	b.n	1269c <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   126b8:	f104 0188 	add.w	r1, r4, #136	; 0x88
   126bc:	3001      	adds	r0, #1
   126be:	f009 fb6a 	bl	1bd96 <bt_addr_le_copy>
		cfg->id = conn->id;
   126c2:	7a23      	ldrb	r3, [r4, #8]
   126c4:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   126c6:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
   126ca:	b973      	cbnz	r3, 126ea <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   126cc:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
	cfg->value = value;
   126d0:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   126d2:	42b3      	cmp	r3, r6
   126d4:	d003      	beq.n	126de <bt_gatt_attr_write_ccc+0x76>
		gatt_ccc_changed(attr, ccc);
   126d6:	4649      	mov	r1, r9
   126d8:	4640      	mov	r0, r8
   126da:	f009 fa99 	bl	1bc10 <gatt_ccc_changed>
	if (!value) {
   126de:	2e00      	cmp	r6, #0
   126e0:	d1db      	bne.n	1269a <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
   126e2:	4628      	mov	r0, r5
   126e4:	f009 fb5a 	bl	1bd9c <clear_ccc_cfg>
   126e8:	e7d7      	b.n	1269a <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   126ea:	4632      	mov	r2, r6
   126ec:	4641      	mov	r1, r8
   126ee:	4620      	mov	r0, r4
   126f0:	4798      	blx	r3
		if (write < 0) {
   126f2:	2800      	cmp	r0, #0
   126f4:	dbd2      	blt.n	1269c <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   126f6:	1e44      	subs	r4, r0, #1
   126f8:	2c01      	cmp	r4, #1
   126fa:	d9e7      	bls.n	126cc <bt_gatt_attr_write_ccc+0x64>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   126fc:	f06f 000d 	mvn.w	r0, #13
   12700:	e7cc      	b.n	1269c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12702:	f06f 0006 	mvn.w	r0, #6
   12706:	e7c9      	b.n	1269c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   12708:	f06f 000c 	mvn.w	r0, #12
   1270c:	e7c6      	b.n	1269c <bt_gatt_attr_write_ccc+0x34>
   1270e:	bf00      	nop
   12710:	00020b2f 	.word	0x00020b2f

00012714 <cf_write>:
{
   12714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12718:	461f      	mov	r7, r3
   1271a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1271e:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
   12720:	2b01      	cmp	r3, #1
{
   12722:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   12724:	d845      	bhi.n	127b2 <cf_write+0x9e>
	if (offset + len > sizeof(cfg->data)) {
   12726:	443b      	add	r3, r7
   12728:	2b01      	cmp	r3, #1
   1272a:	463d      	mov	r5, r7
   1272c:	dc44      	bgt.n	127b8 <cf_write+0xa4>
	cfg = find_cf_cfg(conn);
   1272e:	f7ff ff1f 	bl	12570 <find_cf_cfg>
	if (!cfg) {
   12732:	4604      	mov	r4, r0
   12734:	b918      	cbnz	r0, 1273e <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   12736:	f7ff ff1b 	bl	12570 <find_cf_cfg>
	if (!cfg) {
   1273a:	4604      	mov	r4, r0
   1273c:	b1d8      	cbz	r0, 12776 <cf_write+0x62>
   1273e:	4632      	mov	r2, r6
   12740:	f104 0008 	add.w	r0, r4, #8
   12744:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   12748:	4596      	cmp	lr, r2
   1274a:	d11d      	bne.n	12788 <cf_write+0x74>
	for (i = 0U; i < len && i < last_byte; i++) {
   1274c:	b12f      	cbz	r7, 1275a <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   1274e:	7833      	ldrb	r3, [r6, #0]
   12750:	7a22      	ldrb	r2, [r4, #8]
   12752:	f003 0307 	and.w	r3, r3, #7
   12756:	4313      	orrs	r3, r2
   12758:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1275a:	f108 0188 	add.w	r1, r8, #136	; 0x88
   1275e:	1c60      	adds	r0, r4, #1
   12760:	f009 fb19 	bl	1bd96 <bt_addr_le_copy>
	cfg->id = conn->id;
   12764:	4620      	mov	r0, r4
   12766:	f898 3008 	ldrb.w	r3, [r8, #8]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1276a:	2101      	movs	r1, #1
   1276c:	f800 3b0c 	strb.w	r3, [r0], #12
   12770:	f009 fb22 	bl	1bdb8 <atomic_or>
}
   12774:	e005      	b.n	12782 <cf_write+0x6e>
		BT_WARN("No space to store Client Supported Features");
   12776:	2157      	movs	r1, #87	; 0x57
   12778:	4812      	ldr	r0, [pc, #72]	; (127c4 <cf_write+0xb0>)
   1277a:	f007 f8f6 	bl	1996a <printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1277e:	f06f 0510 	mvn.w	r5, #16
}
   12782:	4628      	mov	r0, r5
   12784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   12788:	2300      	movs	r3, #0
   1278a:	f812 1b01 	ldrb.w	r1, [r2], #1
   1278e:	f810 cb01 	ldrb.w	ip, [r0], #1
   12792:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
   12796:	fa21 f903 	lsr.w	r9, r1, r3
   1279a:	f019 0f01 	tst.w	r9, #1
   1279e:	d004      	beq.n	127aa <cf_write+0x96>
   127a0:	fa2c f903 	lsr.w	r9, ip, r3
   127a4:	f019 0f01 	tst.w	r9, #1
   127a8:	d109      	bne.n	127be <cf_write+0xaa>
		for (bit = 0U; bit <= last_bit; bit++) {
   127aa:	3301      	adds	r3, #1
   127ac:	2b03      	cmp	r3, #3
   127ae:	d1f2      	bne.n	12796 <cf_write+0x82>
   127b0:	e7ca      	b.n	12748 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   127b2:	f06f 0506 	mvn.w	r5, #6
   127b6:	e7e4      	b.n	12782 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   127b8:	f06f 050c 	mvn.w	r5, #12
   127bc:	e7e1      	b.n	12782 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   127be:	f06f 0512 	mvn.w	r5, #18
   127c2:	e7de      	b.n	12782 <cf_write+0x6e>
   127c4:	00020b4e 	.word	0x00020b4e

000127c8 <sc_store>:
{
   127c8:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   127ca:	4605      	mov	r5, r0
   127cc:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   127d0:	4604      	mov	r4, r0
   127d2:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   127d4:	b1ca      	cbz	r2, 1280a <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   127d6:	ae02      	add	r6, sp, #8
   127d8:	2104      	movs	r1, #4
   127da:	4630      	mov	r0, r6
   127dc:	f007 f82b 	bl	19836 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   127e0:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   127e2:	462b      	mov	r3, r5
   127e4:	2124      	movs	r1, #36	; 0x24
   127e6:	4a0a      	ldr	r2, [pc, #40]	; (12810 <sc_store+0x48>)
   127e8:	a803      	add	r0, sp, #12
   127ea:	f7fb f8bd 	bl	d968 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   127ee:	2204      	movs	r2, #4
   127f0:	f104 0108 	add.w	r1, r4, #8
   127f4:	a803      	add	r0, sp, #12
   127f6:	f7f8 fcc7 	bl	b188 <settings_save_one>
	if (err) {
   127fa:	4602      	mov	r2, r0
   127fc:	b118      	cbz	r0, 12806 <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   127fe:	2145      	movs	r1, #69	; 0x45
   12800:	4804      	ldr	r0, [pc, #16]	; (12814 <sc_store+0x4c>)
   12802:	f007 f8b2 	bl	1996a <printk>
}
   12806:	b00c      	add	sp, #48	; 0x30
   12808:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1280a:	9200      	str	r2, [sp, #0]
   1280c:	e7e9      	b.n	127e2 <sc_store+0x1a>
   1280e:	bf00      	nop
   12810:	00020e8a 	.word	0x00020e8a
   12814:	00020b7f 	.word	0x00020b7f

00012818 <sc_save>:
{
   12818:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1281c:	4680      	mov	r8, r0
   1281e:	460f      	mov	r7, r1
   12820:	4616      	mov	r6, r2
   12822:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   12824:	f7ff fec6 	bl	125b4 <find_sc_cfg>
	if (!cfg) {
   12828:	4604      	mov	r4, r0
   1282a:	b998      	cbnz	r0, 12854 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1282c:	4669      	mov	r1, sp
   1282e:	9000      	str	r0, [sp, #0]
   12830:	f8cd 0003 	str.w	r0, [sp, #3]
   12834:	f7ff febe 	bl	125b4 <find_sc_cfg>
		if (!cfg) {
   12838:	4604      	mov	r4, r0
   1283a:	b930      	cbnz	r0, 1284a <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   1283c:	2145      	movs	r1, #69	; 0x45
   1283e:	4813      	ldr	r0, [pc, #76]	; (1288c <sc_save+0x74>)
   12840:	f007 f893 	bl	1996a <printk>
}
   12844:	b002      	add	sp, #8
   12846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   1284a:	4639      	mov	r1, r7
		cfg->id = id;
   1284c:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   12850:	f009 faa1 	bl	1bd96 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   12854:	8922      	ldrh	r2, [r4, #8]
   12856:	8963      	ldrh	r3, [r4, #10]
   12858:	b97a      	cbnz	r2, 1287a <sc_save+0x62>
   1285a:	b983      	cbnz	r3, 1287e <sc_save+0x66>
		cfg->data.start = start;
   1285c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1285e:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   12860:	4621      	mov	r1, r4
   12862:	f811 0b01 	ldrb.w	r0, [r1], #1
   12866:	f008 fc87 	bl	1b178 <bt_addr_le_is_bonded>
   1286a:	2800      	cmp	r0, #0
   1286c:	d0ea      	beq.n	12844 <sc_save+0x2c>
		sc_store(cfg);
   1286e:	4620      	mov	r0, r4
}
   12870:	b002      	add	sp, #8
   12872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   12876:	f7ff bfa7 	b.w	127c8 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1287a:	4296      	cmp	r6, r2
   1287c:	d302      	bcc.n	12884 <sc_save+0x6c>
   1287e:	429d      	cmp	r5, r3
   12880:	d8ed      	bhi.n	1285e <sc_save+0x46>
   12882:	e7df      	b.n	12844 <sc_save+0x2c>
	if (*end < new_end) {
   12884:	429d      	cmp	r5, r3
		*start = new_start;
   12886:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   12888:	d9ea      	bls.n	12860 <sc_save+0x48>
   1288a:	e7e8      	b.n	1285e <sc_save+0x46>
   1288c:	00020ba0 	.word	0x00020ba0

00012890 <sc_set>:
{
   12890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12894:	460e      	mov	r6, r1
   12896:	4690      	mov	r8, r2
   12898:	4699      	mov	r9, r3
	if (!name) {
   1289a:	4604      	mov	r4, r0
{
   1289c:	b087      	sub	sp, #28
	if (!name) {
   1289e:	b948      	cbnz	r0, 128b4 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   128a0:	2145      	movs	r1, #69	; 0x45
   128a2:	4829      	ldr	r0, [pc, #164]	; (12948 <sc_set+0xb8>)
   128a4:	f007 f861 	bl	1996a <printk>
		return -EINVAL;
   128a8:	f06f 0515 	mvn.w	r5, #21
}
   128ac:	4628      	mov	r0, r5
   128ae:	b007      	add	sp, #28
   128b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   128b4:	a902      	add	r1, sp, #8
   128b6:	f008 fae9 	bl	1ae8c <bt_settings_decode_key>
	if (err) {
   128ba:	4605      	mov	r5, r0
   128bc:	b128      	cbz	r0, 128ca <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   128be:	4622      	mov	r2, r4
   128c0:	2145      	movs	r1, #69	; 0x45
   128c2:	4822      	ldr	r0, [pc, #136]	; (1294c <sc_set+0xbc>)
   128c4:	f007 f851 	bl	1996a <printk>
   128c8:	e7ee      	b.n	128a8 <sc_set+0x18>
	settings_name_next(name, &next);
   128ca:	4620      	mov	r0, r4
   128cc:	a901      	add	r1, sp, #4
   128ce:	f007 fb6b 	bl	19fa8 <settings_name_next>
	if (!next) {
   128d2:	9801      	ldr	r0, [sp, #4]
   128d4:	b1d8      	cbz	r0, 1290e <sc_set+0x7e>
		id = strtol(next, NULL, 10);
   128d6:	220a      	movs	r2, #10
   128d8:	4629      	mov	r1, r5
   128da:	f008 f9b8 	bl	1ac4e <strtol>
   128de:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   128e0:	4638      	mov	r0, r7
   128e2:	a902      	add	r1, sp, #8
   128e4:	f7ff fe66 	bl	125b4 <find_sc_cfg>
	if (!cfg && len_rd) {
   128e8:	4604      	mov	r4, r0
   128ea:	bb28      	cbnz	r0, 12938 <sc_set+0xa8>
   128ec:	2e00      	cmp	r6, #0
   128ee:	d0dd      	beq.n	128ac <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   128f0:	a904      	add	r1, sp, #16
   128f2:	9004      	str	r0, [sp, #16]
   128f4:	f8cd 0013 	str.w	r0, [sp, #19]
   128f8:	f7ff fe5c 	bl	125b4 <find_sc_cfg>
		if (!cfg) {
   128fc:	4604      	mov	r4, r0
   128fe:	b940      	cbnz	r0, 12912 <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
   12900:	2145      	movs	r1, #69	; 0x45
   12902:	4813      	ldr	r0, [pc, #76]	; (12950 <sc_set+0xc0>)
   12904:	f007 f831 	bl	1996a <printk>
			return -ENOMEM;
   12908:	f06f 050b 	mvn.w	r5, #11
   1290c:	e7ce      	b.n	128ac <sc_set+0x1c>
		id = BT_ID_DEFAULT;
   1290e:	462f      	mov	r7, r5
   12910:	e7e6      	b.n	128e0 <sc_set+0x50>
		cfg->id = id;
   12912:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   12916:	a902      	add	r1, sp, #8
   12918:	f009 fa3d 	bl	1bd96 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1291c:	f104 0108 	add.w	r1, r4, #8
   12920:	2204      	movs	r2, #4
   12922:	4648      	mov	r0, r9
   12924:	47c0      	blx	r8
		if (len < 0) {
   12926:	1e04      	subs	r4, r0, #0
   12928:	dac0      	bge.n	128ac <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   1292a:	4622      	mov	r2, r4
   1292c:	2145      	movs	r1, #69	; 0x45
   1292e:	4809      	ldr	r0, [pc, #36]	; (12954 <sc_set+0xc4>)
   12930:	f007 f81b 	bl	1996a <printk>
			return len;
   12934:	4625      	mov	r5, r4
   12936:	e7b9      	b.n	128ac <sc_set+0x1c>
	if (len_rd) {
   12938:	2e00      	cmp	r6, #0
   1293a:	d1ef      	bne.n	1291c <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
   1293c:	220c      	movs	r2, #12
   1293e:	4631      	mov	r1, r6
   12940:	f008 fa7e 	bl	1ae40 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   12944:	e7b2      	b.n	128ac <sc_set+0x1c>
   12946:	bf00      	nop
   12948:	0001facd 	.word	0x0001facd
   1294c:	00020bc4 	.word	0x00020bc4
   12950:	00020be5 	.word	0x00020be5
   12954:	00020ad6 	.word	0x00020ad6

00012958 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   12958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1295c:	4606      	mov	r6, r0
   1295e:	4688      	mov	r8, r1
   12960:	4617      	mov	r7, r2
	if (params) {
   12962:	461c      	mov	r4, r3
   12964:	b31b      	cbz	r3, 129ae <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   12966:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1296a:	2100      	movs	r1, #0
   1296c:	f7ff fc3c 	bl	121e8 <bt_att_req_alloc>
		if (!req) {
   12970:	4605      	mov	r5, r0
   12972:	b920      	cbnz	r0, 1297e <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   12974:	f06f 040b 	mvn.w	r4, #11
}
   12978:	4620      	mov	r0, r4
   1297a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   1297e:	2300      	movs	r3, #0
		req->user_data = params;
   12980:	6144      	str	r4, [r0, #20]
		err = bt_att_req_send(conn, req);
   12982:	4601      	mov	r1, r0
		req->buf = buf;
   12984:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   12988:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   1298a:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   1298c:	4630      	mov	r0, r6
   1298e:	f7ff fd57 	bl	12440 <bt_att_req_send>
		if (err) {
   12992:	4604      	mov	r4, r0
   12994:	2800      	cmp	r0, #0
   12996:	d0ef      	beq.n	12978 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   12998:	4628      	mov	r0, r5
   1299a:	f7ff fc3b 	bl	12214 <bt_att_req_free>
	if (err) {
   1299e:	2c00      	cmp	r4, #0
   129a0:	d0ea      	beq.n	12978 <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
   129a2:	4622      	mov	r2, r4
   129a4:	2145      	movs	r1, #69	; 0x45
   129a6:	4804      	ldr	r0, [pc, #16]	; (129b8 <gatt_send.constprop.0+0x60>)
   129a8:	f006 ffdf 	bl	1996a <printk>
   129ac:	e7e4      	b.n	12978 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
   129ae:	461a      	mov	r2, r3
   129b0:	f7ff fcde 	bl	12370 <bt_att_send>
   129b4:	4604      	mov	r4, r0
   129b6:	e7f2      	b.n	1299e <gatt_send.constprop.0+0x46>
   129b8:	00020c0c 	.word	0x00020c0c

000129bc <cf_set>:
{
   129bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   129c0:	4689      	mov	r9, r1
   129c2:	4617      	mov	r7, r2
   129c4:	4698      	mov	r8, r3
	if (!name) {
   129c6:	4605      	mov	r5, r0
{
   129c8:	b085      	sub	sp, #20
	if (!name) {
   129ca:	b948      	cbnz	r0, 129e0 <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
   129cc:	2145      	movs	r1, #69	; 0x45
   129ce:	4826      	ldr	r0, [pc, #152]	; (12a68 <cf_set+0xac>)
   129d0:	f006 ffcb 	bl	1996a <printk>
		return -EINVAL;
   129d4:	f06f 0415 	mvn.w	r4, #21
}
   129d8:	4620      	mov	r0, r4
   129da:	b005      	add	sp, #20
   129dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   129e0:	a902      	add	r1, sp, #8
   129e2:	f008 fa53 	bl	1ae8c <bt_settings_decode_key>
	if (err) {
   129e6:	4604      	mov	r4, r0
   129e8:	b128      	cbz	r0, 129f6 <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   129ea:	462a      	mov	r2, r5
   129ec:	2145      	movs	r1, #69	; 0x45
   129ee:	481f      	ldr	r0, [pc, #124]	; (12a6c <cf_set+0xb0>)
   129f0:	f006 ffbb 	bl	1996a <printk>
   129f4:	e7ee      	b.n	129d4 <cf_set+0x18>
	settings_name_next(name, &next);
   129f6:	4628      	mov	r0, r5
   129f8:	a901      	add	r1, sp, #4
   129fa:	f007 fad5 	bl	19fa8 <settings_name_next>
	if (!next) {
   129fe:	9801      	ldr	r0, [sp, #4]
   12a00:	b1a8      	cbz	r0, 12a2e <cf_set+0x72>
		id = strtol(next, NULL, 10);
   12a02:	220a      	movs	r2, #10
   12a04:	4621      	mov	r1, r4
   12a06:	f008 f922 	bl	1ac4e <strtol>
   12a0a:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   12a0c:	4630      	mov	r0, r6
   12a0e:	a902      	add	r1, sp, #8
   12a10:	f7ff fe0e 	bl	12630 <find_cf_cfg_by_addr>
	if (!cfg) {
   12a14:	4605      	mov	r5, r0
   12a16:	b988      	cbnz	r0, 12a3c <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
   12a18:	f7ff fdaa 	bl	12570 <find_cf_cfg>
		if (!cfg) {
   12a1c:	4605      	mov	r5, r0
   12a1e:	b940      	cbnz	r0, 12a32 <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
   12a20:	2145      	movs	r1, #69	; 0x45
   12a22:	4813      	ldr	r0, [pc, #76]	; (12a70 <cf_set+0xb4>)
   12a24:	f006 ffa1 	bl	1996a <printk>
			return -ENOMEM;
   12a28:	f06f 040b 	mvn.w	r4, #11
   12a2c:	e7d4      	b.n	129d8 <cf_set+0x1c>
		id = BT_ID_DEFAULT;
   12a2e:	4626      	mov	r6, r4
   12a30:	e7ec      	b.n	12a0c <cf_set+0x50>
		cfg->id = id;
   12a32:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   12a36:	a902      	add	r1, sp, #8
   12a38:	f009 f9ad 	bl	1bd96 <bt_addr_le_copy>
	if (len_rd) {
   12a3c:	f1b9 0f00 	cmp.w	r9, #0
   12a40:	d00d      	beq.n	12a5e <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   12a42:	f105 0108 	add.w	r1, r5, #8
   12a46:	2201      	movs	r2, #1
   12a48:	4640      	mov	r0, r8
   12a4a:	47b8      	blx	r7
		if (len < 0) {
   12a4c:	1e05      	subs	r5, r0, #0
   12a4e:	dac3      	bge.n	129d8 <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   12a50:	462a      	mov	r2, r5
   12a52:	2145      	movs	r1, #69	; 0x45
   12a54:	4807      	ldr	r0, [pc, #28]	; (12a74 <cf_set+0xb8>)
   12a56:	f006 ff88 	bl	1996a <printk>
			return len;
   12a5a:	462c      	mov	r4, r5
   12a5c:	e7bc      	b.n	129d8 <cf_set+0x1c>
		clear_cf_cfg(cfg);
   12a5e:	4628      	mov	r0, r5
   12a60:	f009 f9c4 	bl	1bdec <clear_cf_cfg>
   12a64:	e7b8      	b.n	129d8 <cf_set+0x1c>
   12a66:	bf00      	nop
   12a68:	0001facd 	.word	0x0001facd
   12a6c:	00020bc4 	.word	0x00020bc4
   12a70:	00020c2b 	.word	0x00020c2b
   12a74:	00020ad6 	.word	0x00020ad6

00012a78 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   12a78:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   12a7a:	6881      	ldr	r1, [r0, #8]
{
   12a7c:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12a7e:	4a07      	ldr	r2, [pc, #28]	; (12a9c <remove_peer_from_attr+0x24>)
   12a80:	4291      	cmp	r1, r2
   12a82:	d109      	bne.n	12a98 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   12a84:	791a      	ldrb	r2, [r3, #4]
   12a86:	6819      	ldr	r1, [r3, #0]
   12a88:	68c0      	ldr	r0, [r0, #12]
   12a8a:	f009 f96a 	bl	1bd62 <ccc_find_cfg>
	if (cfg) {
   12a8e:	b118      	cbz	r0, 12a98 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   12a90:	220a      	movs	r2, #10
   12a92:	2100      	movs	r1, #0
   12a94:	f008 f9d4 	bl	1ae40 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   12a98:	2001      	movs	r0, #1
   12a9a:	bd08      	pop	{r3, pc}
   12a9c:	00012669 	.word	0x00012669

00012aa0 <ccc_load>:
{
   12aa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   12aa2:	4b21      	ldr	r3, [pc, #132]	; (12b28 <ccc_load+0x88>)
{
   12aa4:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12aa6:	6882      	ldr	r2, [r0, #8]
   12aa8:	429a      	cmp	r2, r3
   12aaa:	d002      	beq.n	12ab2 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   12aac:	2001      	movs	r0, #1
}
   12aae:	b002      	add	sp, #8
   12ab0:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   12ab2:	68a3      	ldr	r3, [r4, #8]
   12ab4:	68c6      	ldr	r6, [r0, #12]
   12ab6:	b94b      	cbnz	r3, 12acc <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   12ab8:	4630      	mov	r0, r6
   12aba:	7922      	ldrb	r2, [r4, #4]
   12abc:	6821      	ldr	r1, [r4, #0]
   12abe:	f009 f950 	bl	1bd62 <ccc_find_cfg>
	if (!cfg) {
   12ac2:	2800      	cmp	r0, #0
   12ac4:	d0f2      	beq.n	12aac <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   12ac6:	f009 f969 	bl	1bd9c <clear_ccc_cfg>
   12aca:	e7ef      	b.n	12aac <ccc_load+0xc>
	} else if (!load->count) {
   12acc:	68e0      	ldr	r0, [r4, #12]
   12ace:	2800      	cmp	r0, #0
   12ad0:	d0ed      	beq.n	12aae <ccc_load+0xe>
	if (load->entry->handle != handle) {
   12ad2:	881b      	ldrh	r3, [r3, #0]
   12ad4:	4299      	cmp	r1, r3
   12ad6:	d00a      	beq.n	12aee <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   12ad8:	d9e8      	bls.n	12aac <ccc_load+0xc>
	load->count--;
   12ada:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   12adc:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   12ade:	3801      	subs	r0, #1
	load->entry++;
   12ae0:	3304      	adds	r3, #4
	load->count--;
   12ae2:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12ae4:	3800      	subs	r0, #0
   12ae6:	bf18      	it	ne
   12ae8:	2001      	movne	r0, #1
	load->entry++;
   12aea:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12aec:	e7df      	b.n	12aae <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   12aee:	4630      	mov	r0, r6
   12af0:	7922      	ldrb	r2, [r4, #4]
   12af2:	6821      	ldr	r1, [r4, #0]
   12af4:	f009 f935 	bl	1bd62 <ccc_find_cfg>
	if (!cfg) {
   12af8:	4605      	mov	r5, r0
   12afa:	b980      	cbnz	r0, 12b1e <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   12afc:	9000      	str	r0, [sp, #0]
   12afe:	4602      	mov	r2, r0
   12b00:	f8cd 0003 	str.w	r0, [sp, #3]
   12b04:	4669      	mov	r1, sp
   12b06:	4630      	mov	r0, r6
   12b08:	f009 f92b 	bl	1bd62 <ccc_find_cfg>
		if (!cfg) {
   12b0c:	4605      	mov	r5, r0
   12b0e:	2800      	cmp	r0, #0
   12b10:	d0e3      	beq.n	12ada <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   12b12:	6821      	ldr	r1, [r4, #0]
   12b14:	3001      	adds	r0, #1
   12b16:	f009 f93e 	bl	1bd96 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   12b1a:	7923      	ldrb	r3, [r4, #4]
   12b1c:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   12b1e:	68a3      	ldr	r3, [r4, #8]
   12b20:	885b      	ldrh	r3, [r3, #2]
   12b22:	812b      	strh	r3, [r5, #8]
   12b24:	e7d9      	b.n	12ada <ccc_load+0x3a>
   12b26:	bf00      	nop
   12b28:	00012669 	.word	0x00012669

00012b2c <ccc_save>:
{
   12b2c:	b538      	push	{r3, r4, r5, lr}
   12b2e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12b30:	4b0b      	ldr	r3, [pc, #44]	; (12b60 <ccc_save+0x34>)
   12b32:	6882      	ldr	r2, [r0, #8]
{
   12b34:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   12b36:	429a      	cmp	r2, r3
   12b38:	d10f      	bne.n	12b5a <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   12b3a:	7922      	ldrb	r2, [r4, #4]
   12b3c:	6821      	ldr	r1, [r4, #0]
   12b3e:	68c0      	ldr	r0, [r0, #12]
   12b40:	f009 f90f 	bl	1bd62 <ccc_find_cfg>
	if (!cfg) {
   12b44:	b148      	cbz	r0, 12b5a <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   12b46:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   12b4a:	8901      	ldrh	r1, [r0, #8]
   12b4c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   12b50:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   12b52:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   12b54:	8151      	strh	r1, [r2, #10]
	save->count++;
   12b56:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   12b5a:	2001      	movs	r0, #1
   12b5c:	bd38      	pop	{r3, r4, r5, pc}
   12b5e:	bf00      	nop
   12b60:	00012669 	.word	0x00012669

00012b64 <gatt_indicate>:
{
   12b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12b68:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
   12b6a:	8a92      	ldrh	r2, [r2, #20]
{
   12b6c:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   12b6e:	3202      	adds	r2, #2
   12b70:	211d      	movs	r1, #29
{
   12b72:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   12b74:	f7ff f8b8 	bl	11ce8 <bt_att_create_pdu>
	if (!buf) {
   12b78:	4605      	mov	r5, r0
   12b7a:	b1e8      	cbz	r0, 12bb8 <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
   12b7c:	f100 0808 	add.w	r8, r0, #8
   12b80:	2102      	movs	r1, #2
   12b82:	4640      	mov	r0, r8
   12b84:	f001 ff94 	bl	14ab0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   12b88:	4606      	mov	r6, r0
   12b8a:	8aa1      	ldrh	r1, [r4, #20]
   12b8c:	f826 9b02 	strh.w	r9, [r6], #2
   12b90:	4640      	mov	r0, r8
   12b92:	f001 ff8d 	bl	14ab0 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   12b96:	4630      	mov	r0, r6
   12b98:	8aa2      	ldrh	r2, [r4, #20]
   12b9a:	6921      	ldr	r1, [r4, #16]
   12b9c:	f008 f925 	bl	1adea <memcpy>
	if (!params->func) {
   12ba0:	68a3      	ldr	r3, [r4, #8]
   12ba2:	b933      	cbnz	r3, 12bb2 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
   12ba4:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   12ba6:	4629      	mov	r1, r5
   12ba8:	4638      	mov	r0, r7
}
   12baa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   12bae:	f7ff bed3 	b.w	12958 <gatt_send.constprop.0>
   12bb2:	4623      	mov	r3, r4
   12bb4:	4a04      	ldr	r2, [pc, #16]	; (12bc8 <gatt_indicate+0x64>)
   12bb6:	e7f6      	b.n	12ba6 <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
   12bb8:	2157      	movs	r1, #87	; 0x57
   12bba:	4804      	ldr	r0, [pc, #16]	; (12bcc <gatt_indicate+0x68>)
   12bbc:	f006 fed5 	bl	1996a <printk>
}
   12bc0:	f06f 000b 	mvn.w	r0, #11
   12bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12bc8:	0001bc43 	.word	0x0001bc43
   12bcc:	00020c52 	.word	0x00020c52

00012bd0 <gatt_notify>:
{
   12bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12bd4:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   12bd6:	8992      	ldrh	r2, [r2, #12]
{
   12bd8:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   12bda:	3202      	adds	r2, #2
   12bdc:	211b      	movs	r1, #27
{
   12bde:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   12be0:	f7ff f882 	bl	11ce8 <bt_att_create_pdu>
	if (!buf) {
   12be4:	4605      	mov	r5, r0
   12be6:	b1c8      	cbz	r0, 12c1c <gatt_notify+0x4c>
   12be8:	f100 0908 	add.w	r9, r0, #8
   12bec:	2102      	movs	r1, #2
   12bee:	4648      	mov	r0, r9
   12bf0:	f001 ff5e 	bl	14ab0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   12bf4:	4606      	mov	r6, r0
   12bf6:	89a1      	ldrh	r1, [r4, #12]
   12bf8:	f826 8b02 	strh.w	r8, [r6], #2
   12bfc:	4648      	mov	r0, r9
   12bfe:	f001 ff57 	bl	14ab0 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   12c02:	89a2      	ldrh	r2, [r4, #12]
   12c04:	68a1      	ldr	r1, [r4, #8]
   12c06:	4630      	mov	r0, r6
   12c08:	f008 f8ef 	bl	1adea <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   12c0c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   12c10:	4629      	mov	r1, r5
   12c12:	4638      	mov	r0, r7
}
   12c14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   12c18:	f7ff bbaa 	b.w	12370 <bt_att_send>
		BT_WARN("No buffer available to send notification");
   12c1c:	2157      	movs	r1, #87	; 0x57
   12c1e:	4803      	ldr	r0, [pc, #12]	; (12c2c <gatt_notify+0x5c>)
   12c20:	f006 fea3 	bl	1996a <printk>
}
   12c24:	f06f 000b 	mvn.w	r0, #11
   12c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12c2c:	00020c7e 	.word	0x00020c7e

00012c30 <notify_cb>:
{
   12c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   12c34:	4b38      	ldr	r3, [pc, #224]	; (12d18 <notify_cb+0xe8>)
{
   12c36:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12c38:	6882      	ldr	r2, [r0, #8]
{
   12c3a:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   12c3c:	429a      	cmp	r2, r3
   12c3e:	d003      	beq.n	12c48 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   12c40:	2001      	movs	r0, #1
}
   12c42:	b003      	add	sp, #12
   12c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   12c48:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   12c4c:	4b33      	ldr	r3, [pc, #204]	; (12d1c <notify_cb+0xec>)
   12c4e:	4599      	cmp	r9, r3
   12c50:	d01a      	beq.n	12c88 <notify_cb+0x58>
   12c52:	f04f 0b00 	mov.w	fp, #0
   12c56:	f109 0701 	add.w	r7, r9, #1
   12c5a:	f109 0a65 	add.w	sl, r9, #101	; 0x65
		if (cfg->value != data->type) {
   12c5e:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   12c62:	89a3      	ldrh	r3, [r4, #12]
   12c64:	429a      	cmp	r2, r3
   12c66:	d10b      	bne.n	12c80 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   12c68:	4639      	mov	r1, r7
   12c6a:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   12c6e:	f7fd fead 	bl	109cc <bt_conn_lookup_addr_le>
		if (!conn) {
   12c72:	4605      	mov	r5, r0
   12c74:	b120      	cbz	r0, 12c80 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   12c76:	7a83      	ldrb	r3, [r0, #10]
   12c78:	2b07      	cmp	r3, #7
   12c7a:	d029      	beq.n	12cd0 <notify_cb+0xa0>
			bt_conn_unref(conn);
   12c7c:	f7fd fd84 	bl	10788 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   12c80:	370a      	adds	r7, #10
   12c82:	4557      	cmp	r7, sl
   12c84:	d1eb      	bne.n	12c5e <notify_cb+0x2e>
   12c86:	e7db      	b.n	12c40 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   12c88:	2600      	movs	r6, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   12c8a:	4637      	mov	r7, r6
   12c8c:	4d24      	ldr	r5, [pc, #144]	; (12d20 <notify_cb+0xf0>)
   12c8e:	4669      	mov	r1, sp
   12c90:	4628      	mov	r0, r5
   12c92:	9700      	str	r7, [sp, #0]
   12c94:	f8cd 7003 	str.w	r7, [sp, #3]
   12c98:	f009 f841 	bl	1bd1e <bt_addr_le_cmp>
   12c9c:	b178      	cbz	r0, 12cbe <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   12c9e:	2207      	movs	r2, #7
   12ca0:	4629      	mov	r1, r5
   12ca2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   12ca6:	f7fd fed1 	bl	10a4c <bt_conn_lookup_state_le>
			if (!conn) {
   12caa:	b970      	cbnz	r0, 12cca <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   12cac:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   12cae:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   12cb0:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   12cb2:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   12cb6:	8853      	ldrh	r3, [r2, #2]
   12cb8:	8812      	ldrh	r2, [r2, #0]
   12cba:	f7ff fdad 	bl	12818 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   12cbe:	3601      	adds	r6, #1
   12cc0:	2e0a      	cmp	r6, #10
   12cc2:	f105 050c 	add.w	r5, r5, #12
   12cc6:	d1e2      	bne.n	12c8e <notify_cb+0x5e>
   12cc8:	e7c3      	b.n	12c52 <notify_cb+0x22>
			bt_conn_unref(conn);
   12cca:	f7fd fd5d 	bl	10788 <bt_conn_unref>
   12cce:	e7f6      	b.n	12cbe <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   12cd0:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
   12cd4:	b123      	cbz	r3, 12ce0 <notify_cb+0xb0>
   12cd6:	4641      	mov	r1, r8
   12cd8:	4798      	blx	r3
   12cda:	b908      	cbnz	r0, 12ce0 <notify_cb+0xb0>
			bt_conn_unref(conn);
   12cdc:	4628      	mov	r0, r5
   12cde:	e7cd      	b.n	12c7c <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   12ce0:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   12ce2:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   12ce4:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   12ce6:	88a1      	ldrh	r1, [r4, #4]
   12ce8:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   12cea:	d10f      	bne.n	12d0c <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   12cec:	f7ff ff3a 	bl	12b64 <gatt_indicate>
			if (err == 0) {
   12cf0:	4606      	mov	r6, r0
   12cf2:	b918      	cbnz	r0, 12cfc <notify_cb+0xcc>
				data->ind_params->_ref++;
   12cf4:	6922      	ldr	r2, [r4, #16]
   12cf6:	7d93      	ldrb	r3, [r2, #22]
   12cf8:	3301      	adds	r3, #1
   12cfa:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   12cfc:	4628      	mov	r0, r5
   12cfe:	f7fd fd43 	bl	10788 <bt_conn_unref>
		if (err < 0) {
   12d02:	2e00      	cmp	r6, #0
   12d04:	db06      	blt.n	12d14 <notify_cb+0xe4>
		data->err = 0;
   12d06:	f8c4 b008 	str.w	fp, [r4, #8]
   12d0a:	e7b9      	b.n	12c80 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   12d0c:	f7ff ff60 	bl	12bd0 <gatt_notify>
   12d10:	4606      	mov	r6, r0
   12d12:	e7f3      	b.n	12cfc <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   12d14:	2000      	movs	r0, #0
   12d16:	e794      	b.n	12c42 <notify_cb+0x12>
   12d18:	00012669 	.word	0x00012669
   12d1c:	20008488 	.word	0x20008488
   12d20:	2000be47 	.word	0x2000be47

00012d24 <bt_gatt_clear_sc>:
{
   12d24:	b570      	push	{r4, r5, r6, lr}
   12d26:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   12d28:	f7ff fc44 	bl	125b4 <find_sc_cfg>
	if (!cfg) {
   12d2c:	4604      	mov	r4, r0
   12d2e:	b1e8      	cbz	r0, 12d6c <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   12d30:	4605      	mov	r5, r0
   12d32:	f815 2b01 	ldrb.w	r2, [r5], #1
   12d36:	b1e2      	cbz	r2, 12d72 <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   12d38:	ae02      	add	r6, sp, #8
   12d3a:	2104      	movs	r1, #4
   12d3c:	4630      	mov	r0, r6
   12d3e:	f006 fd7a 	bl	19836 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   12d42:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   12d44:	4a0c      	ldr	r2, [pc, #48]	; (12d78 <bt_gatt_clear_sc+0x54>)
   12d46:	462b      	mov	r3, r5
   12d48:	2124      	movs	r1, #36	; 0x24
   12d4a:	a803      	add	r0, sp, #12
   12d4c:	f7fa fe0c 	bl	d968 <bt_settings_encode_key>
		err = settings_delete(key);
   12d50:	a803      	add	r0, sp, #12
   12d52:	f007 f902 	bl	19f5a <settings_delete>
		if (err) {
   12d56:	4602      	mov	r2, r0
   12d58:	b118      	cbz	r0, 12d62 <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   12d5a:	2145      	movs	r1, #69	; 0x45
   12d5c:	4807      	ldr	r0, [pc, #28]	; (12d7c <bt_gatt_clear_sc+0x58>)
   12d5e:	f006 fe04 	bl	1996a <printk>
	memset(cfg, 0, sizeof(*cfg));
   12d62:	220c      	movs	r2, #12
   12d64:	2100      	movs	r1, #0
   12d66:	4620      	mov	r0, r4
   12d68:	f008 f86a 	bl	1ae40 <memset>
}
   12d6c:	2000      	movs	r0, #0
   12d6e:	b00c      	add	sp, #48	; 0x30
   12d70:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   12d72:	9200      	str	r2, [sp, #0]
   12d74:	e7e6      	b.n	12d44 <bt_gatt_clear_sc+0x20>
   12d76:	bf00      	nop
   12d78:	00020e8a 	.word	0x00020e8a
   12d7c:	00020cac 	.word	0x00020cac

00012d80 <sc_clear>:
{
   12d80:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12d82:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   12d86:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12d88:	4631      	mov	r1, r6
   12d8a:	7a00      	ldrb	r0, [r0, #8]
   12d8c:	f008 f9f4 	bl	1b178 <bt_addr_le_is_bonded>
   12d90:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   12d92:	4631      	mov	r1, r6
   12d94:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12d96:	b14d      	cbz	r5, 12dac <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   12d98:	f7ff ffc4 	bl	12d24 <bt_gatt_clear_sc>
		if (err) {
   12d9c:	4602      	mov	r2, r0
   12d9e:	b170      	cbz	r0, 12dbe <sc_clear+0x3e>
}
   12da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   12da4:	2145      	movs	r1, #69	; 0x45
   12da6:	4806      	ldr	r0, [pc, #24]	; (12dc0 <sc_clear+0x40>)
   12da8:	f006 bddf 	b.w	1996a <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   12dac:	f7ff fc02 	bl	125b4 <find_sc_cfg>
		if (cfg) {
   12db0:	b128      	cbz	r0, 12dbe <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   12db2:	4629      	mov	r1, r5
}
   12db4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   12db8:	220c      	movs	r2, #12
   12dba:	f008 b841 	b.w	1ae40 <memset>
}
   12dbe:	bd70      	pop	{r4, r5, r6, pc}
   12dc0:	00020cce 	.word	0x00020cce

00012dc4 <disconnected_cb>:
{
   12dc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dc8:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12dca:	4b26      	ldr	r3, [pc, #152]	; (12e64 <disconnected_cb+0xa0>)
   12dcc:	6882      	ldr	r2, [r0, #8]
{
   12dce:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   12dd0:	429a      	cmp	r2, r3
   12dd2:	d130      	bne.n	12e36 <disconnected_cb+0x72>
	ccc = attr->user_data;
   12dd4:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   12dd6:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
   12dda:	b363      	cbz	r3, 12e36 <disconnected_cb+0x72>
	value_used = false;
   12ddc:	f04f 0800 	mov.w	r8, #0
				if (ccc == &sc_ccc) {
   12de0:	f8df b084 	ldr.w	fp, [pc, #132]	; 12e68 <disconnected_cb+0xa4>
   12de4:	1c6c      	adds	r4, r5, #1
   12de6:	f105 0a65 	add.w	sl, r5, #101	; 0x65
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12dea:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   12dee:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   12df2:	b19b      	cbz	r3, 12e1c <disconnected_cb+0x58>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   12df4:	4622      	mov	r2, r4
   12df6:	4630      	mov	r0, r6
   12df8:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   12dfc:	f008 fa50 	bl	1b2a0 <bt_conn_is_peer_addr_le>
   12e00:	b9e0      	cbnz	r0, 12e3c <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   12e02:	4621      	mov	r1, r4
   12e04:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   12e08:	f7fd fde0 	bl	109cc <bt_conn_lookup_addr_le>
			if (tmp) {
   12e0c:	b130      	cbz	r0, 12e1c <disconnected_cb+0x58>
				if (tmp->state == BT_CONN_CONNECTED) {
   12e0e:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
   12e10:	2b07      	cmp	r3, #7
   12e12:	bf08      	it	eq
   12e14:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   12e18:	f7fd fcb6 	bl	10788 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   12e1c:	340a      	adds	r4, #10
   12e1e:	45a2      	cmp	sl, r4
   12e20:	d1e5      	bne.n	12dee <disconnected_cb+0x2a>
	if (!value_used) {
   12e22:	f1b8 0f00 	cmp.w	r8, #0
   12e26:	d106      	bne.n	12e36 <disconnected_cb+0x72>
		if (ccc->cfg_changed) {
   12e28:	6eab      	ldr	r3, [r5, #104]	; 0x68
		ccc->value = 0U;
   12e2a:	f8a5 8064 	strh.w	r8, [r5, #100]	; 0x64
		if (ccc->cfg_changed) {
   12e2e:	b113      	cbz	r3, 12e36 <disconnected_cb+0x72>
			ccc->cfg_changed(attr, ccc->value);
   12e30:	4641      	mov	r1, r8
   12e32:	4638      	mov	r0, r7
   12e34:	4798      	blx	r3
}
   12e36:	2001      	movs	r0, #1
   12e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12e3c:	4649      	mov	r1, r9
   12e3e:	7a30      	ldrb	r0, [r6, #8]
   12e40:	f008 f99a 	bl	1b178 <bt_addr_le_is_bonded>
   12e44:	b940      	cbnz	r0, 12e58 <disconnected_cb+0x94>
				if (ccc == &sc_ccc) {
   12e46:	455d      	cmp	r5, fp
   12e48:	d102      	bne.n	12e50 <disconnected_cb+0x8c>
					sc_clear(conn);
   12e4a:	4630      	mov	r0, r6
   12e4c:	f7ff ff98 	bl	12d80 <sc_clear>
				clear_ccc_cfg(cfg);
   12e50:	1e60      	subs	r0, r4, #1
   12e52:	f008 ffa3 	bl	1bd9c <clear_ccc_cfg>
   12e56:	e7e1      	b.n	12e1c <disconnected_cb+0x58>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   12e58:	4649      	mov	r1, r9
   12e5a:	4620      	mov	r0, r4
   12e5c:	f008 ff9b 	bl	1bd96 <bt_addr_le_copy>
   12e60:	e7dc      	b.n	12e1c <disconnected_cb+0x58>
   12e62:	bf00      	nop
   12e64:	00012669 	.word	0x00012669
   12e68:	20008488 	.word	0x20008488

00012e6c <sc_commit>:
{
   12e6c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12e6e:	490b      	ldr	r1, [pc, #44]	; (12e9c <sc_commit+0x30>)
   12e70:	e8d1 3fef 	ldaex	r3, [r1]
   12e74:	f023 0302 	bic.w	r3, r3, #2
   12e78:	e8c1 3fe2 	stlex	r2, r3, [r1]
   12e7c:	2a00      	cmp	r2, #0
   12e7e:	d1f7      	bne.n	12e70 <sc_commit+0x4>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12e80:	4608      	mov	r0, r1
   12e82:	f008 ffa4 	bl	1bdce <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   12e86:	07c3      	lsls	r3, r0, #31
   12e88:	d506      	bpl.n	12e98 <sc_commit+0x2c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12e8a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   12e8e:	2300      	movs	r3, #0
   12e90:	4803      	ldr	r0, [pc, #12]	; (12ea0 <sc_commit+0x34>)
   12e92:	3930      	subs	r1, #48	; 0x30
   12e94:	f005 fdf6 	bl	18a84 <k_delayed_work_submit_to_queue>
}
   12e98:	2000      	movs	r0, #0
   12e9a:	bd08      	pop	{r3, pc}
   12e9c:	20009ad8 	.word	0x20009ad8
   12ea0:	2000a3b0 	.word	0x2000a3b0

00012ea4 <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   12ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12ea8:	4688      	mov	r8, r1
   12eaa:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   12eac:	2112      	movs	r1, #18
   12eae:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   12eb0:	4606      	mov	r6, r0
   12eb2:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   12eb4:	f7fe ff18 	bl	11ce8 <bt_att_create_pdu>
	if (!buf) {
   12eb8:	4604      	mov	r4, r0
   12eba:	b1c0      	cbz	r0, 12eee <gatt_write_ccc.constprop.0+0x4a>
   12ebc:	f100 0908 	add.w	r9, r0, #8
   12ec0:	2102      	movs	r1, #2
   12ec2:	4648      	mov	r0, r9
   12ec4:	f001 fdf4 	bl	14ab0 <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
   12ec8:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
   12eca:	f8a0 8000 	strh.w	r8, [r0]
   12ece:	4648      	mov	r0, r9
   12ed0:	f009 faa0 	bl	1c414 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12ed4:	2104      	movs	r1, #4
   12ed6:	f105 0010 	add.w	r0, r5, #16
   12eda:	f008 ff6d 	bl	1bdb8 <atomic_or>
	return gatt_send(conn, buf, func, params, NULL);
   12ede:	462b      	mov	r3, r5
   12ee0:	4621      	mov	r1, r4
   12ee2:	4630      	mov	r0, r6
}
   12ee4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
   12ee8:	4a03      	ldr	r2, [pc, #12]	; (12ef8 <gatt_write_ccc.constprop.0+0x54>)
   12eea:	f7ff bd35 	b.w	12958 <gatt_send.constprop.0>
}
   12eee:	f06f 000b 	mvn.w	r0, #11
   12ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12ef6:	bf00      	nop
   12ef8:	0001be7b 	.word	0x0001be7b

00012efc <sc_indicate_rsp>:
{
   12efc:	b510      	push	{r4, lr}
   12efe:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12f00:	4910      	ldr	r1, [pc, #64]	; (12f44 <sc_indicate_rsp+0x48>)
   12f02:	e8d1 3fef 	ldaex	r3, [r1]
   12f06:	f023 0302 	bic.w	r3, r3, #2
   12f0a:	e8c1 3fe2 	stlex	r2, r3, [r1]
   12f0e:	2a00      	cmp	r2, #0
   12f10:	d1f7      	bne.n	12f02 <sc_indicate_rsp+0x6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12f12:	4608      	mov	r0, r1
   12f14:	f008 ff5b 	bl	1bdce <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   12f18:	07c2      	lsls	r2, r0, #31
   12f1a:	d505      	bpl.n	12f28 <sc_indicate_rsp+0x2c>
   12f1c:	2200      	movs	r2, #0
   12f1e:	2300      	movs	r3, #0
   12f20:	4809      	ldr	r0, [pc, #36]	; (12f48 <sc_indicate_rsp+0x4c>)
   12f22:	3930      	subs	r1, #48	; 0x30
   12f24:	f005 fdae 	bl	18a84 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   12f28:	4620      	mov	r0, r4
   12f2a:	f7ff fb21 	bl	12570 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   12f2e:	b140      	cbz	r0, 12f42 <sc_indicate_rsp+0x46>
   12f30:	7a03      	ldrb	r3, [r0, #8]
   12f32:	07db      	lsls	r3, r3, #31
   12f34:	d505      	bpl.n	12f42 <sc_indicate_rsp+0x46>
}
   12f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12f3a:	2101      	movs	r1, #1
   12f3c:	300c      	adds	r0, #12
   12f3e:	f008 bf3b 	b.w	1bdb8 <atomic_or>
   12f42:	bd10      	pop	{r4, pc}
   12f44:	20009ad8 	.word	0x20009ad8
   12f48:	2000a3b0 	.word	0x2000a3b0

00012f4c <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12f4c:	2201      	movs	r2, #1
{
   12f4e:	b570      	push	{r4, r5, r6, lr}
   12f50:	4b26      	ldr	r3, [pc, #152]	; (12fec <bt_gatt_init+0xa0>)
   12f52:	e8d3 1fef 	ldaex	r1, [r3]
   12f56:	2900      	cmp	r1, #0
   12f58:	d103      	bne.n	12f62 <bt_gatt_init+0x16>
   12f5a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12f5e:	2800      	cmp	r0, #0
   12f60:	d1f7      	bne.n	12f52 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   12f62:	d142      	bne.n	12fea <bt_gatt_init+0x9e>
   12f64:	4b22      	ldr	r3, [pc, #136]	; (12ff0 <bt_gatt_init+0xa4>)
   12f66:	e8d3 1fef 	ldaex	r1, [r3]
   12f6a:	2900      	cmp	r1, #0
   12f6c:	d103      	bne.n	12f76 <bt_gatt_init+0x2a>
   12f6e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12f72:	2800      	cmp	r0, #0
   12f74:	d1f7      	bne.n	12f66 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   12f76:	d034      	beq.n	12fe2 <bt_gatt_init+0x96>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   12f78:	4c1e      	ldr	r4, [pc, #120]	; (12ff4 <bt_gatt_init+0xa8>)
   12f7a:	2230      	movs	r2, #48	; 0x30
   12f7c:	2100      	movs	r1, #0
   12f7e:	4620      	mov	r0, r4
   12f80:	f007 ff5e 	bl	1ae40 <memset>
   12f84:	4b1c      	ldr	r3, [pc, #112]	; (12ff8 <bt_gatt_init+0xac>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12f86:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   12f88:	6063      	str	r3, [r4, #4]
   12f8a:	4c1c      	ldr	r4, [pc, #112]	; (12ffc <bt_gatt_init+0xb0>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12f8c:	2300      	movs	r3, #0
   12f8e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   12f92:	481b      	ldr	r0, [pc, #108]	; (13000 <bt_gatt_init+0xb4>)
   12f94:	f005 fd76 	bl	18a84 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   12f98:	2100      	movs	r1, #0
   12f9a:	f104 0020 	add.w	r0, r4, #32
   12f9e:	2230      	movs	r2, #48	; 0x30
   12fa0:	f007 ff4e 	bl	1ae40 <memset>
   12fa4:	4b17      	ldr	r3, [pc, #92]	; (13004 <bt_gatt_init+0xb8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12fa6:	f104 0050 	add.w	r0, r4, #80	; 0x50
   12faa:	6263      	str	r3, [r4, #36]	; 0x24
   12fac:	2102      	movs	r1, #2
}
   12fae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12fb2:	f008 bf01 	b.w	1bdb8 <atomic_or>
		last_static_handle += svc->attr_count;
   12fb6:	4a14      	ldr	r2, [pc, #80]	; (13008 <bt_gatt_init+0xbc>)
   12fb8:	6863      	ldr	r3, [r4, #4]
   12fba:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12fbc:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   12fbe:	440b      	add	r3, r1
   12fc0:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   12fc2:	42ac      	cmp	r4, r5
   12fc4:	d90a      	bls.n	12fdc <bt_gatt_init+0x90>
   12fc6:	4631      	mov	r1, r6
   12fc8:	4810      	ldr	r0, [pc, #64]	; (1300c <bt_gatt_init+0xc0>)
   12fca:	f44f 6283 	mov.w	r2, #1048	; 0x418
   12fce:	f006 fccc 	bl	1996a <printk>
   12fd2:	f44f 6183 	mov.w	r1, #1048	; 0x418
   12fd6:	4630      	mov	r0, r6
   12fd8:	f006 ff6d 	bl	19eb6 <assert_post_action>
   12fdc:	42ac      	cmp	r4, r5
   12fde:	d3ea      	bcc.n	12fb6 <bt_gatt_init+0x6a>
   12fe0:	e7ca      	b.n	12f78 <bt_gatt_init+0x2c>
   12fe2:	4c0b      	ldr	r4, [pc, #44]	; (13010 <bt_gatt_init+0xc4>)
   12fe4:	4d0b      	ldr	r5, [pc, #44]	; (13014 <bt_gatt_init+0xc8>)
   12fe6:	4e0c      	ldr	r6, [pc, #48]	; (13018 <bt_gatt_init+0xcc>)
   12fe8:	e7eb      	b.n	12fc2 <bt_gatt_init+0x76>
}
   12fea:	bd70      	pop	{r4, r5, r6, pc}
   12fec:	2000aa54 	.word	0x2000aa54
   12ff0:	2000ab48 	.word	0x2000ab48
   12ff4:	20009a58 	.word	0x20009a58
   12ff8:	0001c173 	.word	0x0001c173
   12ffc:	20009a88 	.word	0x20009a88
   13000:	2000a3b0 	.word	0x2000a3b0
   13004:	000135dd 	.word	0x000135dd
   13008:	2000be44 	.word	0x2000be44
   1300c:	0001ea60 	.word	0x0001ea60
   13010:	0001d64c 	.word	0x0001d64c
   13014:	0001d67c 	.word	0x0001d67c
   13018:	00020ce9 	.word	0x00020ce9

0001301c <bt_gatt_attr_get_handle>:
{
   1301c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   13020:	4604      	mov	r4, r0
   13022:	b910      	cbnz	r0, 1302a <bt_gatt_attr_get_handle+0xe>
		return 0;
   13024:	2000      	movs	r0, #0
}
   13026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   1302a:	8a00      	ldrh	r0, [r0, #16]
   1302c:	2800      	cmp	r0, #0
   1302e:	d1fa      	bne.n	13026 <bt_gatt_attr_get_handle+0xa>
	uint16_t handle = 1;
   13030:	f04f 0801 	mov.w	r8, #1
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13034:	4d17      	ldr	r5, [pc, #92]	; (13094 <bt_gatt_attr_get_handle+0x78>)
   13036:	4e18      	ldr	r6, [pc, #96]	; (13098 <bt_gatt_attr_get_handle+0x7c>)
   13038:	4f18      	ldr	r7, [pc, #96]	; (1309c <bt_gatt_attr_get_handle+0x80>)
   1303a:	42b5      	cmp	r5, r6
   1303c:	d90a      	bls.n	13054 <bt_gatt_attr_get_handle+0x38>
   1303e:	4639      	mov	r1, r7
   13040:	4817      	ldr	r0, [pc, #92]	; (130a0 <bt_gatt_attr_get_handle+0x84>)
   13042:	f240 522d 	movw	r2, #1325	; 0x52d
   13046:	f006 fc90 	bl	1996a <printk>
   1304a:	f240 512d 	movw	r1, #1325	; 0x52d
   1304e:	4638      	mov	r0, r7
   13050:	f006 ff31 	bl	19eb6 <assert_post_action>
   13054:	42b5      	cmp	r5, r6
   13056:	d2e5      	bcs.n	13024 <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13058:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   1305c:	4564      	cmp	r4, ip
   1305e:	d306      	bcc.n	1306e <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13060:	f04f 0e14 	mov.w	lr, #20
   13064:	fb0e c301 	mla	r3, lr, r1, ip
   13068:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   1306a:	429c      	cmp	r4, r3
   1306c:	d910      	bls.n	13090 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   1306e:	eb08 0001 	add.w	r0, r8, r1
   13072:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13074:	4680      	mov	r8, r0
   13076:	3508      	adds	r5, #8
   13078:	e7df      	b.n	1303a <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   1307a:	fb0e c302 	mla	r3, lr, r2, ip
   1307e:	429c      	cmp	r4, r3
   13080:	d0d1      	beq.n	13026 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   13082:	3201      	adds	r2, #1
   13084:	eb08 0302 	add.w	r3, r8, r2
   13088:	4291      	cmp	r1, r2
   1308a:	b298      	uxth	r0, r3
   1308c:	d1f5      	bne.n	1307a <bt_gatt_attr_get_handle+0x5e>
   1308e:	e7f1      	b.n	13074 <bt_gatt_attr_get_handle+0x58>
   13090:	2200      	movs	r2, #0
   13092:	e7f7      	b.n	13084 <bt_gatt_attr_get_handle+0x68>
   13094:	0001d64c 	.word	0x0001d64c
   13098:	0001d67c 	.word	0x0001d67c
   1309c:	00020ce9 	.word	0x00020ce9
   130a0:	0001ea60 	.word	0x0001ea60

000130a4 <bt_gatt_foreach_attr_type>:
{
   130a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130a8:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   130aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   130ae:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   130b2:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   130b4:	2d00      	cmp	r5, #0
   130b6:	bf08      	it	eq
   130b8:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   130ba:	4b2b      	ldr	r3, [pc, #172]	; (13168 <bt_gatt_foreach_attr_type+0xc4>)
{
   130bc:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   130be:	881b      	ldrh	r3, [r3, #0]
{
   130c0:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   130c2:	4283      	cmp	r3, r0
   130c4:	d24b      	bcs.n	1315e <bt_gatt_foreach_attr_type+0xba>
}
   130c6:	b003      	add	sp, #12
   130c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   130cc:	6873      	ldr	r3, [r6, #4]
   130ce:	4423      	add	r3, r4
   130d0:	42bb      	cmp	r3, r7
   130d2:	d241      	bcs.n	13158 <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   130d4:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   130d6:	3608      	adds	r6, #8
   130d8:	4b24      	ldr	r3, [pc, #144]	; (1316c <bt_gatt_foreach_attr_type+0xc8>)
   130da:	429e      	cmp	r6, r3
   130dc:	d90a      	bls.n	130f4 <bt_gatt_foreach_attr_type+0x50>
   130de:	4659      	mov	r1, fp
   130e0:	4823      	ldr	r0, [pc, #140]	; (13170 <bt_gatt_foreach_attr_type+0xcc>)
   130e2:	f240 52f1 	movw	r2, #1521	; 0x5f1
   130e6:	f006 fc40 	bl	1996a <printk>
   130ea:	f240 51f1 	movw	r1, #1521	; 0x5f1
   130ee:	4658      	mov	r0, fp
   130f0:	f006 fee1 	bl	19eb6 <assert_post_action>
   130f4:	4b1d      	ldr	r3, [pc, #116]	; (1316c <bt_gatt_foreach_attr_type+0xc8>)
   130f6:	429e      	cmp	r6, r3
   130f8:	d3e8      	bcc.n	130cc <bt_gatt_foreach_attr_type+0x28>
   130fa:	e7e4      	b.n	130c6 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   130fc:	4640      	mov	r0, r8
   130fe:	5889      	ldr	r1, [r1, r2]
   13100:	9301      	str	r3, [sp, #4]
   13102:	f007 fee7 	bl	1aed4 <bt_uuid_cmp>
   13106:	9b01      	ldr	r3, [sp, #4]
   13108:	b198      	cbz	r0, 13132 <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1310a:	3401      	adds	r4, #1
   1310c:	f10a 0a01 	add.w	sl, sl, #1
   13110:	b2a4      	uxth	r4, r4
   13112:	6873      	ldr	r3, [r6, #4]
   13114:	4553      	cmp	r3, sl
   13116:	d9de      	bls.n	130d6 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   13118:	9b00      	ldr	r3, [sp, #0]
   1311a:	429c      	cmp	r4, r3
   1311c:	d8d3      	bhi.n	130c6 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1311e:	42bc      	cmp	r4, r7
   13120:	d3f3      	bcc.n	1310a <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13122:	2314      	movs	r3, #20
   13124:	fb03 f20a 	mul.w	r2, r3, sl
   13128:	6831      	ldr	r1, [r6, #0]
   1312a:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1312c:	f1b8 0f00 	cmp.w	r8, #0
   13130:	d1e4      	bne.n	130fc <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   13132:	f1b9 0f00 	cmp.w	r9, #0
   13136:	d10b      	bne.n	13150 <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   13138:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   1313a:	4618      	mov	r0, r3
	*num_matches -= 1;
   1313c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1313e:	4621      	mov	r1, r4
   13140:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13144:	4798      	blx	r3
	if (!*num_matches) {
   13146:	2d00      	cmp	r5, #0
   13148:	d0bd      	beq.n	130c6 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1314a:	2800      	cmp	r0, #0
   1314c:	d1dd      	bne.n	1310a <bt_gatt_foreach_attr_type+0x66>
   1314e:	e7ba      	b.n	130c6 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   13150:	68da      	ldr	r2, [r3, #12]
   13152:	4591      	cmp	r9, r2
   13154:	d1d9      	bne.n	1310a <bt_gatt_foreach_attr_type+0x66>
   13156:	e7ef      	b.n	13138 <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   13158:	f04f 0a00 	mov.w	sl, #0
   1315c:	e7d9      	b.n	13112 <bt_gatt_foreach_attr_type+0x6e>
		uint16_t handle = 1;
   1315e:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13160:	4e04      	ldr	r6, [pc, #16]	; (13174 <bt_gatt_foreach_attr_type+0xd0>)
   13162:	f8df b014 	ldr.w	fp, [pc, #20]	; 13178 <bt_gatt_foreach_attr_type+0xd4>
   13166:	e7b7      	b.n	130d8 <bt_gatt_foreach_attr_type+0x34>
   13168:	2000be44 	.word	0x2000be44
   1316c:	0001d67c 	.word	0x0001d67c
   13170:	0001ea60 	.word	0x0001ea60
   13174:	0001d64c 	.word	0x0001d64c
   13178:	00020ce9 	.word	0x00020ce9

0001317c <db_hash_gen>:
	uint8_t key[16] = {};
   1317c:	2300      	movs	r3, #0
{
   1317e:	b530      	push	{r4, r5, lr}
   13180:	b0c9      	sub	sp, #292	; 0x124
   13182:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13184:	4669      	mov	r1, sp
   13186:	aa1c      	add	r2, sp, #112	; 0x70
   13188:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1318a:	e9cd 3300 	strd	r3, r3, [sp]
   1318e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13192:	f007 fa53 	bl	1a63c <tc_cmac_setup>
   13196:	b928      	cbnz	r0, 131a4 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   13198:	2145      	movs	r1, #69	; 0x45
   1319a:	4812      	ldr	r0, [pc, #72]	; (131e4 <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
   1319c:	f006 fbe5 	bl	1996a <printk>
}
   131a0:	b049      	add	sp, #292	; 0x124
   131a2:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   131a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   131a8:	2001      	movs	r0, #1
   131aa:	4a0f      	ldr	r2, [pc, #60]	; (131e8 <db_hash_gen+0x6c>)
   131ac:	ab04      	add	r3, sp, #16
   131ae:	f008 ffd5 	bl	1c15c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   131b2:	480e      	ldr	r0, [pc, #56]	; (131ec <db_hash_gen+0x70>)
   131b4:	a904      	add	r1, sp, #16
   131b6:	f007 fad7 	bl	1a768 <tc_cmac_final>
   131ba:	b910      	cbnz	r0, 131c2 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   131bc:	2145      	movs	r1, #69	; 0x45
   131be:	480c      	ldr	r0, [pc, #48]	; (131f0 <db_hash_gen+0x74>)
   131c0:	e7ec      	b.n	1319c <db_hash_gen+0x20>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   131c2:	2208      	movs	r2, #8
   131c4:	4b09      	ldr	r3, [pc, #36]	; (131ec <db_hash_gen+0x70>)
   131c6:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   131ca:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   131cc:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   131d0:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   131d2:	f803 5b01 	strb.w	r5, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   131d6:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   131d8:	d1f7      	bne.n	131ca <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   131da:	2c00      	cmp	r4, #0
   131dc:	d0e0      	beq.n	131a0 <db_hash_gen+0x24>
		db_hash_store();
   131de:	f7ff f9b1 	bl	12544 <db_hash_store>
   131e2:	e7dd      	b.n	131a0 <db_hash_gen+0x24>
   131e4:	00020d19 	.word	0x00020d19
   131e8:	0001bc73 	.word	0x0001bc73
   131ec:	2000c5c9 	.word	0x2000c5c9
   131f0:	00020d37 	.word	0x00020d37

000131f4 <db_hash_commit>:
{
   131f4:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
   131f6:	4821      	ldr	r0, [pc, #132]	; (1327c <db_hash_commit+0x88>)
   131f8:	f005 fcb4 	bl	18b64 <k_delayed_work_cancel>
	if (!err) {
   131fc:	b908      	cbnz	r0, 13202 <db_hash_commit+0xe>
		db_hash_gen(false);
   131fe:	f7ff ffbd 	bl	1317c <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
   13202:	2210      	movs	r2, #16
   13204:	491e      	ldr	r1, [pc, #120]	; (13280 <db_hash_commit+0x8c>)
   13206:	481f      	ldr	r0, [pc, #124]	; (13284 <db_hash_commit+0x90>)
   13208:	f007 fdde 	bl	1adc8 <memcmp>
   1320c:	b968      	cbnz	r0, 1322a <db_hash_commit+0x36>
		k_delayed_work_cancel(&gatt_sc.work);
   1320e:	481e      	ldr	r0, [pc, #120]	; (13288 <db_hash_commit+0x94>)
   13210:	f005 fca8 	bl	18b64 <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13214:	4b1d      	ldr	r3, [pc, #116]	; (1328c <db_hash_commit+0x98>)
   13216:	e8d3 2fef 	ldaex	r2, [r3]
   1321a:	f022 0201 	bic.w	r2, r2, #1
   1321e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13222:	2900      	cmp	r1, #0
   13224:	d1f7      	bne.n	13216 <db_hash_commit+0x22>
}
   13226:	2000      	movs	r0, #0
   13228:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1322a:	4c19      	ldr	r4, [pc, #100]	; (13290 <db_hash_commit+0x9c>)
   1322c:	2101      	movs	r1, #1
   1322e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   13232:	f008 fdc1 	bl	1bdb8 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13236:	07c2      	lsls	r2, r0, #31
   13238:	d410      	bmi.n	1325c <db_hash_commit+0x68>
		gatt_sc.start = start;
   1323a:	4b16      	ldr	r3, [pc, #88]	; (13294 <db_hash_commit+0xa0>)
   1323c:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1323e:	4813      	ldr	r0, [pc, #76]	; (1328c <db_hash_commit+0x98>)
   13240:	f008 fdc5 	bl	1bdce <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   13244:	0783      	lsls	r3, r0, #30
   13246:	d406      	bmi.n	13256 <db_hash_commit+0x62>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13248:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1324c:	2300      	movs	r3, #0
   1324e:	490e      	ldr	r1, [pc, #56]	; (13288 <db_hash_commit+0x94>)
   13250:	4811      	ldr	r0, [pc, #68]	; (13298 <db_hash_commit+0xa4>)
   13252:	f005 fc17 	bl	18a84 <k_delayed_work_submit_to_queue>
	db_hash_store();
   13256:	f7ff f975 	bl	12544 <db_hash_store>
	return 0;
   1325a:	e7e4      	b.n	13226 <db_hash_commit+0x32>
	if (new_start >= *start && new_end <= *end) {
   1325c:	8b23      	ldrh	r3, [r4, #24]
   1325e:	8b62      	ldrh	r2, [r4, #26]
   13260:	2b01      	cmp	r3, #1
   13262:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13266:	d805      	bhi.n	13274 <db_hash_commit+0x80>
   13268:	429a      	cmp	r2, r3
   1326a:	d0f4      	beq.n	13256 <db_hash_commit+0x62>
		*end = new_end;
   1326c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13270:	8363      	strh	r3, [r4, #26]
   13272:	e7e4      	b.n	1323e <db_hash_commit+0x4a>
	if (*end < new_end) {
   13274:	429a      	cmp	r2, r3
		*start = new_start;
   13276:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   13278:	d0e1      	beq.n	1323e <db_hash_commit+0x4a>
   1327a:	e7f7      	b.n	1326c <db_hash_commit+0x78>
   1327c:	20009a58 	.word	0x20009a58
   13280:	2000c5c9 	.word	0x2000c5c9
   13284:	2000c5d9 	.word	0x2000c5d9
   13288:	20009aa8 	.word	0x20009aa8
   1328c:	20009ad8 	.word	0x20009ad8
   13290:	20009a88 	.word	0x20009a88
   13294:	ffff0001 	.word	0xffff0001
   13298:	2000a3b0 	.word	0x2000a3b0

0001329c <ccc_set_direct>:
{
   1329c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   132a0:	b0b9      	sub	sp, #228	; 0xe4
   132a2:	4688      	mov	r8, r1
   132a4:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   132a6:	492c      	ldr	r1, [pc, #176]	; (13358 <ccc_set_direct+0xbc>)
   132a8:	466a      	mov	r2, sp
   132aa:	9840      	ldr	r0, [sp, #256]	; 0x100
{
   132ac:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   132ae:	f006 fe58 	bl	19f62 <settings_name_steq>
   132b2:	b948      	cbnz	r0, 132c8 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   132b4:	2145      	movs	r1, #69	; 0x45
   132b6:	4829      	ldr	r0, [pc, #164]	; (1335c <ccc_set_direct+0xc0>)
   132b8:	f006 fb57 	bl	1996a <printk>
   132bc:	f06f 0515 	mvn.w	r5, #21
}
   132c0:	4628      	mov	r0, r5
   132c2:	b039      	add	sp, #228	; 0xe4
   132c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   132c8:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   132ca:	a901      	add	r1, sp, #4
   132cc:	4620      	mov	r0, r4
   132ce:	f006 fe6b 	bl	19fa8 <settings_name_next>
		if (!name) {
   132d2:	b93c      	cbnz	r4, 132e4 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   132d4:	2145      	movs	r1, #69	; 0x45
   132d6:	4822      	ldr	r0, [pc, #136]	; (13360 <ccc_set_direct+0xc4>)
   132d8:	f006 fb47 	bl	1996a <printk>
			return -EINVAL;
   132dc:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   132e0:	4625      	mov	r5, r4
   132e2:	e7ed      	b.n	132c0 <ccc_set_direct+0x24>
		} else if (!next) {
   132e4:	9801      	ldr	r0, [sp, #4]
   132e6:	b978      	cbnz	r0, 13308 <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
   132e8:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   132ec:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   132f0:	4649      	mov	r1, r9
   132f2:	4620      	mov	r0, r4
   132f4:	f007 fdca 	bl	1ae8c <bt_settings_decode_key>
		if (err) {
   132f8:	4605      	mov	r5, r0
   132fa:	b150      	cbz	r0, 13312 <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   132fc:	4622      	mov	r2, r4
   132fe:	2145      	movs	r1, #69	; 0x45
   13300:	4818      	ldr	r0, [pc, #96]	; (13364 <ccc_set_direct+0xc8>)
   13302:	f006 fb32 	bl	1996a <printk>
   13306:	e7e9      	b.n	132dc <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
   13308:	220a      	movs	r2, #10
   1330a:	2100      	movs	r1, #0
   1330c:	f007 fc9f 	bl	1ac4e <strtol>
   13310:	e7ea      	b.n	132e8 <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
   13312:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   13316:	f1b8 0f00 	cmp.w	r8, #0
   1331a:	d019      	beq.n	13350 <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1331c:	f10d 0820 	add.w	r8, sp, #32
   13320:	22c0      	movs	r2, #192	; 0xc0
   13322:	4641      	mov	r1, r8
   13324:	4638      	mov	r0, r7
   13326:	47b0      	blx	r6
			if (len < 0) {
   13328:	1e04      	subs	r4, r0, #0
   1332a:	da05      	bge.n	13338 <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
   1332c:	4622      	mov	r2, r4
   1332e:	2145      	movs	r1, #69	; 0x45
   13330:	480d      	ldr	r0, [pc, #52]	; (13368 <ccc_set_direct+0xcc>)
   13332:	f006 fb1a 	bl	1996a <printk>
				return len;
   13336:	e7d3      	b.n	132e0 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   13338:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   1333a:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   1333e:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   13340:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13344:	2001      	movs	r0, #1
   13346:	4a09      	ldr	r2, [pc, #36]	; (1336c <ccc_set_direct+0xd0>)
   13348:	ab04      	add	r3, sp, #16
   1334a:	f008 ff07 	bl	1c15c <bt_gatt_foreach_attr>
	return 0;
   1334e:	e7b7      	b.n	132c0 <ccc_set_direct+0x24>
			load.count = 0;
   13350:	e9cd 0006 	strd	r0, r0, [sp, #24]
   13354:	e7f4      	b.n	13340 <ccc_set_direct+0xa4>
   13356:	bf00      	nop
   13358:	00020d55 	.word	0x00020d55
   1335c:	00020d5c 	.word	0x00020d5c
   13360:	0001facd 	.word	0x0001facd
   13364:	00020bc4 	.word	0x00020bc4
   13368:	00020ad6 	.word	0x00020ad6
   1336c:	00012aa1 	.word	0x00012aa1

00013370 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   13370:	2300      	movs	r3, #0
{
   13372:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   13374:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   13376:	f7ff fe51 	bl	1301c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1337a:	1c41      	adds	r1, r0, #1
   1337c:	b289      	uxth	r1, r1
   1337e:	4608      	mov	r0, r1
   13380:	4a03      	ldr	r2, [pc, #12]	; (13390 <bt_gatt_attr_next+0x20>)
   13382:	ab01      	add	r3, sp, #4
   13384:	f008 feea 	bl	1c15c <bt_gatt_foreach_attr>
}
   13388:	9801      	ldr	r0, [sp, #4]
   1338a:	b003      	add	sp, #12
   1338c:	f85d fb04 	ldr.w	pc, [sp], #4
   13390:	0001bc0b 	.word	0x0001bc0b

00013394 <bt_gatt_notify_cb>:
{
   13394:	b530      	push	{r4, r5, lr}
   13396:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   13398:	460d      	mov	r5, r1
{
   1339a:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1339c:	b951      	cbnz	r1, 133b4 <bt_gatt_notify_cb+0x20>
   1339e:	4940      	ldr	r1, [pc, #256]	; (134a0 <bt_gatt_notify_cb+0x10c>)
   133a0:	4840      	ldr	r0, [pc, #256]	; (134a4 <bt_gatt_notify_cb+0x110>)
   133a2:	f640 023d 	movw	r2, #2109	; 0x83d
   133a6:	f006 fae0 	bl	1996a <printk>
   133aa:	f640 013d 	movw	r1, #2109	; 0x83d
   133ae:	483c      	ldr	r0, [pc, #240]	; (134a0 <bt_gatt_notify_cb+0x10c>)
   133b0:	f006 fd81 	bl	19eb6 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   133b4:	686b      	ldr	r3, [r5, #4]
   133b6:	b953      	cbnz	r3, 133ce <bt_gatt_notify_cb+0x3a>
   133b8:	4939      	ldr	r1, [pc, #228]	; (134a0 <bt_gatt_notify_cb+0x10c>)
   133ba:	483a      	ldr	r0, [pc, #232]	; (134a4 <bt_gatt_notify_cb+0x110>)
   133bc:	f640 023e 	movw	r2, #2110	; 0x83e
   133c0:	f006 fad3 	bl	1996a <printk>
   133c4:	f640 013e 	movw	r1, #2110	; 0x83e
   133c8:	4835      	ldr	r0, [pc, #212]	; (134a0 <bt_gatt_notify_cb+0x10c>)
   133ca:	f006 fd74 	bl	19eb6 <assert_post_action>
   133ce:	4836      	ldr	r0, [pc, #216]	; (134a8 <bt_gatt_notify_cb+0x114>)
   133d0:	f008 fcfd 	bl	1bdce <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   133d4:	0782      	lsls	r2, r0, #30
   133d6:	d55d      	bpl.n	13494 <bt_gatt_notify_cb+0x100>
	data.attr = params->attr;
   133d8:	6868      	ldr	r0, [r5, #4]
   133da:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   133dc:	b114      	cbz	r4, 133e4 <bt_gatt_notify_cb+0x50>
   133de:	7aa3      	ldrb	r3, [r4, #10]
   133e0:	2b07      	cmp	r3, #7
   133e2:	d15a      	bne.n	1349a <bt_gatt_notify_cb+0x106>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   133e4:	f7ff fe1a 	bl	1301c <bt_gatt_attr_get_handle>
   133e8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   133ec:	b918      	cbnz	r0, 133f6 <bt_gatt_notify_cb+0x62>
		return -ENOENT;
   133ee:	f06f 0001 	mvn.w	r0, #1
}
   133f2:	b00b      	add	sp, #44	; 0x2c
   133f4:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   133f6:	682a      	ldr	r2, [r5, #0]
   133f8:	b9aa      	cbnz	r2, 13426 <bt_gatt_notify_cb+0x92>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   133fa:	9b05      	ldr	r3, [sp, #20]
   133fc:	a904      	add	r1, sp, #16
   133fe:	6818      	ldr	r0, [r3, #0]
   13400:	2300      	movs	r3, #0
   13402:	f88d 3010 	strb.w	r3, [sp, #16]
   13406:	f642 0303 	movw	r3, #10243	; 0x2803
   1340a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1340e:	f007 fd61 	bl	1aed4 <bt_uuid_cmp>
   13412:	b1c0      	cbz	r0, 13446 <bt_gatt_notify_cb+0xb2>
		return gatt_notify(conn, data.handle, params);
   13414:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   13418:	b314      	cbz	r4, 13460 <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   1341a:	4601      	mov	r1, r0
   1341c:	462a      	mov	r2, r5
   1341e:	4620      	mov	r0, r4
   13420:	f7ff fbd6 	bl	12bd0 <gatt_notify>
   13424:	e7e5      	b.n	133f2 <bt_gatt_notify_cb+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13426:	a905      	add	r1, sp, #20
   13428:	9102      	str	r1, [sp, #8]
   1342a:	4920      	ldr	r1, [pc, #128]	; (134ac <bt_gatt_notify_cb+0x118>)
	found->attr = NULL;
   1342c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1342e:	9101      	str	r1, [sp, #4]
   13430:	2101      	movs	r1, #1
   13432:	9100      	str	r1, [sp, #0]
   13434:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   13438:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1343a:	f7ff fe33 	bl	130a4 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1343e:	9b05      	ldr	r3, [sp, #20]
   13440:	2b00      	cmp	r3, #0
   13442:	d1da      	bne.n	133fa <bt_gatt_notify_cb+0x66>
   13444:	e7d3      	b.n	133ee <bt_gatt_notify_cb+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   13446:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   13448:	68c3      	ldr	r3, [r0, #12]
   1344a:	799b      	ldrb	r3, [r3, #6]
   1344c:	06db      	lsls	r3, r3, #27
   1344e:	d402      	bmi.n	13456 <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   13450:	f06f 0015 	mvn.w	r0, #21
   13454:	e7cd      	b.n	133f2 <bt_gatt_notify_cb+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   13456:	f008 fe33 	bl	1c0c0 <bt_gatt_attr_value_handle>
   1345a:	f8ad 0018 	strh.w	r0, [sp, #24]
   1345e:	e7d9      	b.n	13414 <bt_gatt_notify_cb+0x80>
	data.err = -ENOTCONN;
   13460:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13464:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   13468:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1346a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1346c:	f8ad 2012 	strh.w	r2, [sp, #18]
   13470:	aa05      	add	r2, sp, #20
   13472:	9202      	str	r2, [sp, #8]
   13474:	4a0e      	ldr	r2, [pc, #56]	; (134b0 <bt_gatt_notify_cb+0x11c>)
	data.type = BT_GATT_CCC_NOTIFY;
   13476:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1347a:	e9cd 3200 	strd	r3, r2, [sp]
   1347e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13482:	4623      	mov	r3, r4
   13484:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   13486:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13488:	f88d 4010 	strb.w	r4, [sp, #16]
   1348c:	f7ff fe0a 	bl	130a4 <bt_gatt_foreach_attr_type>
	return data.err;
   13490:	9807      	ldr	r0, [sp, #28]
   13492:	e7ae      	b.n	133f2 <bt_gatt_notify_cb+0x5e>
		return -EAGAIN;
   13494:	f06f 000a 	mvn.w	r0, #10
   13498:	e7ab      	b.n	133f2 <bt_gatt_notify_cb+0x5e>
		return -ENOTCONN;
   1349a:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1349e:	e7a8      	b.n	133f2 <bt_gatt_notify_cb+0x5e>
   134a0:	00020ce9 	.word	0x00020ce9
   134a4:	0001ea60 	.word	0x0001ea60
   134a8:	20008094 	.word	0x20008094
   134ac:	0001bc67 	.word	0x0001bc67
   134b0:	00012c31 	.word	0x00012c31

000134b4 <bt_gatt_indicate>:
{
   134b4:	b530      	push	{r4, r5, lr}
   134b6:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   134b8:	460c      	mov	r4, r1
{
   134ba:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   134bc:	b951      	cbnz	r1, 134d4 <bt_gatt_indicate+0x20>
   134be:	4942      	ldr	r1, [pc, #264]	; (135c8 <bt_gatt_indicate+0x114>)
   134c0:	4842      	ldr	r0, [pc, #264]	; (135cc <bt_gatt_indicate+0x118>)
   134c2:	f640 0289 	movw	r2, #2185	; 0x889
   134c6:	f006 fa50 	bl	1996a <printk>
   134ca:	f640 0189 	movw	r1, #2185	; 0x889
   134ce:	483e      	ldr	r0, [pc, #248]	; (135c8 <bt_gatt_indicate+0x114>)
   134d0:	f006 fcf1 	bl	19eb6 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   134d4:	6863      	ldr	r3, [r4, #4]
   134d6:	b953      	cbnz	r3, 134ee <bt_gatt_indicate+0x3a>
   134d8:	493b      	ldr	r1, [pc, #236]	; (135c8 <bt_gatt_indicate+0x114>)
   134da:	483c      	ldr	r0, [pc, #240]	; (135cc <bt_gatt_indicate+0x118>)
   134dc:	f640 028a 	movw	r2, #2186	; 0x88a
   134e0:	f006 fa43 	bl	1996a <printk>
   134e4:	f640 018a 	movw	r1, #2186	; 0x88a
   134e8:	4837      	ldr	r0, [pc, #220]	; (135c8 <bt_gatt_indicate+0x114>)
   134ea:	f006 fce4 	bl	19eb6 <assert_post_action>
   134ee:	4838      	ldr	r0, [pc, #224]	; (135d0 <bt_gatt_indicate+0x11c>)
   134f0:	f008 fc6d 	bl	1bdce <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   134f4:	0782      	lsls	r2, r0, #30
   134f6:	d561      	bpl.n	135bc <bt_gatt_indicate+0x108>
	data.attr = params->attr;
   134f8:	6860      	ldr	r0, [r4, #4]
   134fa:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   134fc:	b115      	cbz	r5, 13504 <bt_gatt_indicate+0x50>
   134fe:	7aab      	ldrb	r3, [r5, #10]
   13500:	2b07      	cmp	r3, #7
   13502:	d15e      	bne.n	135c2 <bt_gatt_indicate+0x10e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13504:	f7ff fd8a 	bl	1301c <bt_gatt_attr_get_handle>
   13508:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   1350c:	b918      	cbnz	r0, 13516 <bt_gatt_indicate+0x62>
		return -ENOENT;
   1350e:	f06f 0001 	mvn.w	r0, #1
}
   13512:	b00b      	add	sp, #44	; 0x2c
   13514:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   13516:	6822      	ldr	r2, [r4, #0]
   13518:	b9ba      	cbnz	r2, 1354a <bt_gatt_indicate+0x96>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1351a:	9b05      	ldr	r3, [sp, #20]
   1351c:	a904      	add	r1, sp, #16
   1351e:	6818      	ldr	r0, [r3, #0]
   13520:	2300      	movs	r3, #0
   13522:	f88d 3010 	strb.w	r3, [sp, #16]
   13526:	f642 0303 	movw	r3, #10243	; 0x2803
   1352a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1352e:	f007 fcd1 	bl	1aed4 <bt_uuid_cmp>
   13532:	b1d0      	cbz	r0, 1356a <bt_gatt_indicate+0xb6>
		return gatt_indicate(conn, data.handle, params);
   13534:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   13538:	b325      	cbz	r5, 13584 <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   1353a:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1353c:	4601      	mov	r1, r0
   1353e:	4622      	mov	r2, r4
   13540:	4628      	mov	r0, r5
		params->_ref = 1;
   13542:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   13544:	f7ff fb0e 	bl	12b64 <gatt_indicate>
   13548:	e7e3      	b.n	13512 <bt_gatt_indicate+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1354a:	a905      	add	r1, sp, #20
   1354c:	9102      	str	r1, [sp, #8]
   1354e:	4921      	ldr	r1, [pc, #132]	; (135d4 <bt_gatt_indicate+0x120>)
	found->attr = NULL;
   13550:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13552:	9101      	str	r1, [sp, #4]
   13554:	2101      	movs	r1, #1
   13556:	9100      	str	r1, [sp, #0]
   13558:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1355c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1355e:	f7ff fda1 	bl	130a4 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   13562:	9b05      	ldr	r3, [sp, #20]
   13564:	2b00      	cmp	r3, #0
   13566:	d1d8      	bne.n	1351a <bt_gatt_indicate+0x66>
   13568:	e7d1      	b.n	1350e <bt_gatt_indicate+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1356a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1356c:	68c3      	ldr	r3, [r0, #12]
   1356e:	799b      	ldrb	r3, [r3, #6]
   13570:	069b      	lsls	r3, r3, #26
   13572:	d402      	bmi.n	1357a <bt_gatt_indicate+0xc6>
			return -EINVAL;
   13574:	f06f 0015 	mvn.w	r0, #21
   13578:	e7cb      	b.n	13512 <bt_gatt_indicate+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1357a:	f008 fda1 	bl	1c0c0 <bt_gatt_attr_value_handle>
   1357e:	f8ad 0018 	strh.w	r0, [sp, #24]
   13582:	e7d7      	b.n	13534 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   13584:	f06f 0338 	mvn.w	r3, #56	; 0x38
   13588:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1358a:	2302      	movs	r3, #2
   1358c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13590:	f642 1302 	movw	r3, #10498	; 0x2902
   13594:	f8ad 3012 	strh.w	r3, [sp, #18]
   13598:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1359a:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1359c:	9302      	str	r3, [sp, #8]
   1359e:	4b0e      	ldr	r3, [pc, #56]	; (135d8 <bt_gatt_indicate+0x124>)
   135a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   135a4:	9301      	str	r3, [sp, #4]
   135a6:	2301      	movs	r3, #1
   135a8:	aa04      	add	r2, sp, #16
   135aa:	9300      	str	r3, [sp, #0]
   135ac:	462b      	mov	r3, r5
	data.ind_params = params;
   135ae:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   135b0:	f88d 5010 	strb.w	r5, [sp, #16]
   135b4:	f7ff fd76 	bl	130a4 <bt_gatt_foreach_attr_type>
	return data.err;
   135b8:	9807      	ldr	r0, [sp, #28]
   135ba:	e7aa      	b.n	13512 <bt_gatt_indicate+0x5e>
		return -EAGAIN;
   135bc:	f06f 000a 	mvn.w	r0, #10
   135c0:	e7a7      	b.n	13512 <bt_gatt_indicate+0x5e>
		return -ENOTCONN;
   135c2:	f06f 0038 	mvn.w	r0, #56	; 0x38
   135c6:	e7a4      	b.n	13512 <bt_gatt_indicate+0x5e>
   135c8:	00020ce9 	.word	0x00020ce9
   135cc:	0001ea60 	.word	0x0001ea60
   135d0:	20008094 	.word	0x20008094
   135d4:	0001bc67 	.word	0x0001bc67
   135d8:	00012c31 	.word	0x00012c31

000135dc <sc_process>:
{
   135dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   135de:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   135e2:	4604      	mov	r4, r0
   135e4:	4628      	mov	r0, r5
   135e6:	f008 fbf2 	bl	1bdce <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   135ea:	0783      	lsls	r3, r0, #30
   135ec:	d50a      	bpl.n	13604 <sc_process+0x28>
   135ee:	491b      	ldr	r1, [pc, #108]	; (1365c <sc_process+0x80>)
   135f0:	481b      	ldr	r0, [pc, #108]	; (13660 <sc_process+0x84>)
   135f2:	f240 32ae 	movw	r2, #942	; 0x3ae
   135f6:	f006 f9b8 	bl	1996a <printk>
   135fa:	f240 31ae 	movw	r1, #942	; 0x3ae
   135fe:	4817      	ldr	r0, [pc, #92]	; (1365c <sc_process+0x80>)
   13600:	f006 fc59 	bl	19eb6 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   13604:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   13608:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1360c:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   13610:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13614:	e8d5 3fef 	ldaex	r3, [r5]
   13618:	f023 0301 	bic.w	r3, r3, #1
   1361c:	e8c5 3fe2 	stlex	r2, r3, [r5]
   13620:	2a00      	cmp	r2, #0
   13622:	d1f7      	bne.n	13614 <sc_process+0x38>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   13624:	4b0f      	ldr	r3, [pc, #60]	; (13664 <sc_process+0x88>)
	sc->start = 0U;
   13626:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   13628:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1362c:	4b0e      	ldr	r3, [pc, #56]	; (13668 <sc_process+0x8c>)
	sc->start = 0U;
   1362e:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   13632:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   13636:	ab01      	add	r3, sp, #4
   13638:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1363c:	2304      	movs	r3, #4
	sc->end = 0U;
   1363e:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   13642:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   13646:	f1a4 0120 	sub.w	r1, r4, #32
   1364a:	f7ff ff33 	bl	134b4 <bt_gatt_indicate>
   1364e:	b918      	cbnz	r0, 13658 <sc_process+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13650:	2102      	movs	r1, #2
   13652:	4628      	mov	r0, r5
   13654:	f008 fbb0 	bl	1bdb8 <atomic_or>
}
   13658:	b003      	add	sp, #12
   1365a:	bd30      	pop	{r4, r5, pc}
   1365c:	00020ce9 	.word	0x00020ce9
   13660:	0001ea60 	.word	0x0001ea60
   13664:	0001de78 	.word	0x0001de78
   13668:	00012efd 	.word	0x00012efd

0001366c <update_ccc>:
{
   1366c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13670:	4b32      	ldr	r3, [pc, #200]	; (1373c <update_ccc+0xd0>)
   13672:	6881      	ldr	r1, [r0, #8]
{
   13674:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13676:	4299      	cmp	r1, r3
   13678:	d15c      	bne.n	13734 <update_ccc+0xc8>
	ccc = attr->user_data;
   1367a:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
   1367c:	6816      	ldr	r6, [r2, #0]
				BT_WARN("CCC %p not writable", attr);
   1367e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 13740 <update_ccc+0xd4>
   13682:	1c7d      	adds	r5, r7, #1
   13684:	f107 0865 	add.w	r8, r7, #101	; 0x65
		if (!cfg->value ||
   13688:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1368c:	b193      	cbz	r3, 136b4 <update_ccc+0x48>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1368e:	462a      	mov	r2, r5
   13690:	4630      	mov	r0, r6
   13692:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   13696:	f007 fe03 	bl	1b2a0 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1369a:	b158      	cbz	r0, 136b4 <update_ccc+0x48>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1369c:	222a      	movs	r2, #42	; 0x2a
   1369e:	4621      	mov	r1, r4
   136a0:	4630      	mov	r0, r6
   136a2:	f008 fd69 	bl	1c178 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   136a6:	2803      	cmp	r0, #3
   136a8:	d108      	bne.n	136bc <update_ccc+0x50>
				BT_WARN("CCC %p not writable", attr);
   136aa:	4622      	mov	r2, r4
   136ac:	2157      	movs	r1, #87	; 0x57
   136ae:	4648      	mov	r0, r9
   136b0:	f006 f95b 	bl	1996a <printk>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   136b4:	350a      	adds	r5, #10
   136b6:	4545      	cmp	r5, r8
   136b8:	d1e6      	bne.n	13688 <update_ccc+0x1c>
   136ba:	e03b      	b.n	13734 <update_ccc+0xc8>
		gatt_ccc_changed(attr, ccc);
   136bc:	4639      	mov	r1, r7
   136be:	4620      	mov	r0, r4
   136c0:	f008 faa6 	bl	1bc10 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   136c4:	4b1f      	ldr	r3, [pc, #124]	; (13744 <update_ccc+0xd8>)
   136c6:	429f      	cmp	r7, r3
   136c8:	d134      	bne.n	13734 <update_ccc+0xc8>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   136ca:	7a30      	ldrb	r0, [r6, #8]
   136cc:	f106 0188 	add.w	r1, r6, #136	; 0x88
   136d0:	f7fe ff70 	bl	125b4 <find_sc_cfg>
	if (!cfg) {
   136d4:	4604      	mov	r4, r0
   136d6:	b368      	cbz	r0, 13734 <update_ccc+0xc8>
	if (!(cfg->data.start || cfg->data.end)) {
   136d8:	8902      	ldrh	r2, [r0, #8]
   136da:	8943      	ldrh	r3, [r0, #10]
   136dc:	ea52 0103 	orrs.w	r1, r2, r3
   136e0:	d028      	beq.n	13734 <update_ccc+0xc8>
	index = bt_conn_index(conn);
   136e2:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   136e4:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   136e8:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   136ec:	f7fd fca4 	bl	11038 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   136f0:	2318      	movs	r3, #24
   136f2:	4915      	ldr	r1, [pc, #84]	; (13748 <update_ccc+0xdc>)
   136f4:	4a15      	ldr	r2, [pc, #84]	; (1374c <update_ccc+0xe0>)
   136f6:	fb03 1300 	mla	r3, r3, r0, r1
   136fa:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   136fc:	4a14      	ldr	r2, [pc, #80]	; (13750 <update_ccc+0xe4>)
   136fe:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   13700:	aa01      	add	r2, sp, #4
   13702:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   13704:	2204      	movs	r2, #4
   13706:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   13708:	b203      	sxth	r3, r0
   1370a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1370e:	4630      	mov	r0, r6
   13710:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   13714:	f7ff fece 	bl	134b4 <bt_gatt_indicate>
   13718:	b118      	cbz	r0, 13722 <update_ccc+0xb6>
		BT_ERR("SC restore indication failed");
   1371a:	2145      	movs	r1, #69	; 0x45
   1371c:	480d      	ldr	r0, [pc, #52]	; (13754 <update_ccc+0xe8>)
   1371e:	f006 f924 	bl	1996a <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
   13722:	2204      	movs	r2, #4
   13724:	2100      	movs	r1, #0
   13726:	f104 0008 	add.w	r0, r4, #8
   1372a:	f007 fb89 	bl	1ae40 <memset>
		sc_store(cfg);
   1372e:	4620      	mov	r0, r4
   13730:	f7ff f84a 	bl	127c8 <sc_store>
}
   13734:	2001      	movs	r0, #1
   13736:	b003      	add	sp, #12
   13738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1373c:	00012669 	.word	0x00012669
   13740:	00020d6d 	.word	0x00020d6d
   13744:	20008488 	.word	0x20008488
   13748:	2000aa58 	.word	0x2000aa58
   1374c:	0001de78 	.word	0x0001de78
   13750:	0001c077 	.word	0x0001c077
   13754:	00020d86 	.word	0x00020d86

00013758 <bt_gatt_is_subscribed>:
{
   13758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1375a:	460c      	mov	r4, r1
   1375c:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   1375e:	4606      	mov	r6, r0
   13760:	b950      	cbnz	r0, 13778 <bt_gatt_is_subscribed+0x20>
   13762:	4930      	ldr	r1, [pc, #192]	; (13824 <bt_gatt_is_subscribed+0xcc>)
   13764:	4830      	ldr	r0, [pc, #192]	; (13828 <bt_gatt_is_subscribed+0xd0>)
   13766:	f640 12b5 	movw	r2, #2485	; 0x9b5
   1376a:	f006 f8fe 	bl	1996a <printk>
   1376e:	f640 11b5 	movw	r1, #2485	; 0x9b5
   13772:	482c      	ldr	r0, [pc, #176]	; (13824 <bt_gatt_is_subscribed+0xcc>)
   13774:	f006 fb9f 	bl	19eb6 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   13778:	b954      	cbnz	r4, 13790 <bt_gatt_is_subscribed+0x38>
   1377a:	492a      	ldr	r1, [pc, #168]	; (13824 <bt_gatt_is_subscribed+0xcc>)
   1377c:	482a      	ldr	r0, [pc, #168]	; (13828 <bt_gatt_is_subscribed+0xd0>)
   1377e:	f640 12b6 	movw	r2, #2486	; 0x9b6
   13782:	f006 f8f2 	bl	1996a <printk>
   13786:	f640 11b6 	movw	r1, #2486	; 0x9b6
   1378a:	4826      	ldr	r0, [pc, #152]	; (13824 <bt_gatt_is_subscribed+0xcc>)
   1378c:	f006 fb93 	bl	19eb6 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   13790:	7ab3      	ldrb	r3, [r6, #10]
   13792:	2b07      	cmp	r3, #7
   13794:	d130      	bne.n	137f8 <bt_gatt_is_subscribed+0xa0>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   13796:	2300      	movs	r3, #0
   13798:	f88d 3004 	strb.w	r3, [sp, #4]
   1379c:	f642 0303 	movw	r3, #10243	; 0x2803
   137a0:	6820      	ldr	r0, [r4, #0]
   137a2:	a901      	add	r1, sp, #4
   137a4:	f8ad 3006 	strh.w	r3, [sp, #6]
   137a8:	f007 fb94 	bl	1aed4 <bt_uuid_cmp>
   137ac:	b940      	cbnz	r0, 137c0 <bt_gatt_is_subscribed+0x68>
		if (!(chrc->properties &
   137ae:	68e3      	ldr	r3, [r4, #12]
   137b0:	799b      	ldrb	r3, [r3, #6]
   137b2:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   137b6:	d020      	beq.n	137fa <bt_gatt_is_subscribed+0xa2>
		attr = bt_gatt_attr_next(attr);
   137b8:	4620      	mov	r0, r4
   137ba:	f7ff fdd9 	bl	13370 <bt_gatt_attr_next>
   137be:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   137c0:	2300      	movs	r3, #0
   137c2:	6820      	ldr	r0, [r4, #0]
   137c4:	f88d 3004 	strb.w	r3, [sp, #4]
   137c8:	f642 1302 	movw	r3, #10498	; 0x2902
   137cc:	a901      	add	r1, sp, #4
   137ce:	f8ad 3006 	strh.w	r3, [sp, #6]
   137d2:	f007 fb7f 	bl	1aed4 <bt_uuid_cmp>
   137d6:	b118      	cbz	r0, 137e0 <bt_gatt_is_subscribed+0x88>
		attr = bt_gatt_attr_next(attr);
   137d8:	4620      	mov	r0, r4
   137da:	f7ff fdc9 	bl	13370 <bt_gatt_attr_next>
   137de:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   137e0:	2500      	movs	r5, #0
   137e2:	f642 1302 	movw	r3, #10498	; 0x2902
   137e6:	6820      	ldr	r0, [r4, #0]
   137e8:	a901      	add	r1, sp, #4
   137ea:	f88d 5004 	strb.w	r5, [sp, #4]
   137ee:	f8ad 3006 	strh.w	r3, [sp, #6]
   137f2:	f007 fb6f 	bl	1aed4 <bt_uuid_cmp>
   137f6:	b110      	cbz	r0, 137fe <bt_gatt_is_subscribed+0xa6>
		return false;
   137f8:	2000      	movs	r0, #0
}
   137fa:	b003      	add	sp, #12
   137fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   137fe:	68e5      	ldr	r5, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   13800:	1c6c      	adds	r4, r5, #1
   13802:	3565      	adds	r5, #101	; 0x65
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   13804:	4622      	mov	r2, r4
   13806:	4630      	mov	r0, r6
   13808:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1380c:	f007 fd48 	bl	1b2a0 <bt_conn_is_peer_addr_le>
   13810:	b118      	cbz	r0, 1381a <bt_gatt_is_subscribed+0xc2>
   13812:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   13816:	421f      	tst	r7, r3
   13818:	d1ef      	bne.n	137fa <bt_gatt_is_subscribed+0xa2>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   1381a:	340a      	adds	r4, #10
   1381c:	42ac      	cmp	r4, r5
   1381e:	d1f1      	bne.n	13804 <bt_gatt_is_subscribed+0xac>
   13820:	e7ea      	b.n	137f8 <bt_gatt_is_subscribed+0xa0>
   13822:	bf00      	nop
   13824:	00020ce9 	.word	0x00020ce9
   13828:	0001ea60 	.word	0x0001ea60

0001382c <bt_gatt_discover>:
{
   1382c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1382e:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   13830:	4605      	mov	r5, r0
{
   13832:	b085      	sub	sp, #20
	__ASSERT(conn, "invalid parameters\n");
   13834:	b950      	cbnz	r0, 1384c <bt_gatt_discover+0x20>
   13836:	4989      	ldr	r1, [pc, #548]	; (13a5c <bt_gatt_discover+0x230>)
   13838:	4889      	ldr	r0, [pc, #548]	; (13a60 <bt_gatt_discover+0x234>)
   1383a:	f640 5277 	movw	r2, #3447	; 0xd77
   1383e:	f006 f894 	bl	1996a <printk>
   13842:	f640 5177 	movw	r1, #3447	; 0xd77
   13846:	4885      	ldr	r0, [pc, #532]	; (13a5c <bt_gatt_discover+0x230>)
   13848:	f006 fb35 	bl	19eb6 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   1384c:	b10c      	cbz	r4, 13852 <bt_gatt_discover+0x26>
   1384e:	6863      	ldr	r3, [r4, #4]
   13850:	b953      	cbnz	r3, 13868 <bt_gatt_discover+0x3c>
   13852:	4982      	ldr	r1, [pc, #520]	; (13a5c <bt_gatt_discover+0x230>)
   13854:	4882      	ldr	r0, [pc, #520]	; (13a60 <bt_gatt_discover+0x234>)
   13856:	f640 5278 	movw	r2, #3448	; 0xd78
   1385a:	f006 f886 	bl	1996a <printk>
   1385e:	f640 5178 	movw	r1, #3448	; 0xd78
   13862:	487e      	ldr	r0, [pc, #504]	; (13a5c <bt_gatt_discover+0x230>)
   13864:	f006 fb27 	bl	19eb6 <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   13868:	8923      	ldrh	r3, [r4, #8]
   1386a:	b10b      	cbz	r3, 13870 <bt_gatt_discover+0x44>
   1386c:	89e3      	ldrh	r3, [r4, #14]
   1386e:	b953      	cbnz	r3, 13886 <bt_gatt_discover+0x5a>
   13870:	497a      	ldr	r1, [pc, #488]	; (13a5c <bt_gatt_discover+0x230>)
   13872:	487b      	ldr	r0, [pc, #492]	; (13a60 <bt_gatt_discover+0x234>)
   13874:	f640 5279 	movw	r2, #3449	; 0xd79
   13878:	f006 f877 	bl	1996a <printk>
   1387c:	f640 5179 	movw	r1, #3449	; 0xd79
   13880:	4876      	ldr	r0, [pc, #472]	; (13a5c <bt_gatt_discover+0x230>)
   13882:	f006 fb18 	bl	19eb6 <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   13886:	8922      	ldrh	r2, [r4, #8]
   13888:	89e3      	ldrh	r3, [r4, #14]
   1388a:	429a      	cmp	r2, r3
   1388c:	d90a      	bls.n	138a4 <bt_gatt_discover+0x78>
   1388e:	4973      	ldr	r1, [pc, #460]	; (13a5c <bt_gatt_discover+0x230>)
   13890:	4873      	ldr	r0, [pc, #460]	; (13a60 <bt_gatt_discover+0x234>)
   13892:	f640 527b 	movw	r2, #3451	; 0xd7b
   13896:	f006 f868 	bl	1996a <printk>
   1389a:	f640 517b 	movw	r1, #3451	; 0xd7b
   1389e:	486f      	ldr	r0, [pc, #444]	; (13a5c <bt_gatt_discover+0x230>)
   138a0:	f006 fb09 	bl	19eb6 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   138a4:	7aab      	ldrb	r3, [r5, #10]
   138a6:	2b07      	cmp	r3, #7
   138a8:	f040 80d5 	bne.w	13a56 <bt_gatt_discover+0x22a>
	switch (params->type) {
   138ac:	7c22      	ldrb	r2, [r4, #16]
   138ae:	2a05      	cmp	r2, #5
   138b0:	f200 80cc 	bhi.w	13a4c <bt_gatt_discover+0x220>
   138b4:	e8df f002 	tbb	[pc, r2]
   138b8:	64640303 	.word	0x64640303
   138bc:	b683      	.short	0xb683
		if (params->uuid) {
   138be:	6823      	ldr	r3, [r4, #0]
   138c0:	2b00      	cmp	r3, #0
   138c2:	d03e      	beq.n	13942 <bt_gatt_discover+0x116>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
   138c4:	2206      	movs	r2, #6
   138c6:	4628      	mov	r0, r5
   138c8:	4611      	mov	r1, r2
   138ca:	f7fe fa0d 	bl	11ce8 <bt_att_create_pdu>
	if (!buf) {
   138ce:	4606      	mov	r6, r0
   138d0:	b918      	cbnz	r0, 138da <bt_gatt_discover+0xae>
		return -ENOMEM;
   138d2:	f06f 000b 	mvn.w	r0, #11
}
   138d6:	b005      	add	sp, #20
   138d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   138da:	f100 0708 	add.w	r7, r0, #8
   138de:	2106      	movs	r1, #6
   138e0:	4638      	mov	r0, r7
   138e2:	f001 f8e5 	bl	14ab0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   138e6:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
   138e8:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   138ea:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   138ec:	89e3      	ldrh	r3, [r4, #14]
   138ee:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   138f0:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   138f2:	2b00      	cmp	r3, #0
   138f4:	f642 0301 	movw	r3, #10241	; 0x2801
   138f8:	bf08      	it	eq
   138fa:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   138fe:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   13900:	780a      	ldrb	r2, [r1, #0]
   13902:	b15a      	cbz	r2, 1391c <bt_gatt_discover+0xf0>
   13904:	2a02      	cmp	r2, #2
   13906:	d016      	beq.n	13936 <bt_gatt_discover+0x10a>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   13908:	4856      	ldr	r0, [pc, #344]	; (13a64 <bt_gatt_discover+0x238>)
   1390a:	2145      	movs	r1, #69	; 0x45
   1390c:	f006 f82d 	bl	1996a <printk>
		net_buf_unref(buf);
   13910:	4630      	mov	r0, r6
   13912:	f000 ffb7 	bl	14884 <net_buf_unref>
	return -EINVAL;
   13916:	f06f 0015 	mvn.w	r0, #21
   1391a:	e7dc      	b.n	138d6 <bt_gatt_discover+0xaa>
	net_buf_simple_add_le16(&buf->b, val);
   1391c:	4638      	mov	r0, r7
   1391e:	8849      	ldrh	r1, [r1, #2]
   13920:	f008 fd78 	bl	1c414 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
   13924:	4623      	mov	r3, r4
   13926:	4a50      	ldr	r2, [pc, #320]	; (13a68 <bt_gatt_discover+0x23c>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   13928:	4631      	mov	r1, r6
   1392a:	4628      	mov	r0, r5
}
   1392c:	b005      	add	sp, #20
   1392e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   13932:	f7ff b811 	b.w	12958 <gatt_send.constprop.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   13936:	2210      	movs	r2, #16
   13938:	4638      	mov	r0, r7
   1393a:	3101      	adds	r1, #1
   1393c:	f008 fd57 	bl	1c3ee <net_buf_simple_add_mem>
   13940:	e7f0      	b.n	13924 <bt_gatt_discover+0xf8>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
   13942:	2204      	movs	r2, #4
   13944:	2110      	movs	r1, #16
   13946:	4628      	mov	r0, r5
   13948:	f7fe f9ce 	bl	11ce8 <bt_att_create_pdu>
	if (!buf) {
   1394c:	4606      	mov	r6, r0
   1394e:	2800      	cmp	r0, #0
   13950:	d0bf      	beq.n	138d2 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   13952:	f100 0708 	add.w	r7, r0, #8
   13956:	2104      	movs	r1, #4
   13958:	4638      	mov	r0, r7
   1395a:	f001 f8a9 	bl	14ab0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1395e:	8923      	ldrh	r3, [r4, #8]
   13960:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   13962:	89e3      	ldrh	r3, [r4, #14]
   13964:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   13966:	7c23      	ldrb	r3, [r4, #16]
   13968:	b93b      	cbnz	r3, 1397a <bt_gatt_discover+0x14e>
	net_buf_simple_add_le16(&buf->b, val);
   1396a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   1396e:	4638      	mov	r0, r7
   13970:	f008 fd50 	bl	1c414 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
   13974:	4623      	mov	r3, r4
   13976:	4a3d      	ldr	r2, [pc, #244]	; (13a6c <bt_gatt_discover+0x240>)
   13978:	e7d6      	b.n	13928 <bt_gatt_discover+0xfc>
   1397a:	f642 0101 	movw	r1, #10241	; 0x2801
   1397e:	e7f6      	b.n	1396e <bt_gatt_discover+0x142>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   13980:	2204      	movs	r2, #4
   13982:	2108      	movs	r1, #8
   13984:	4628      	mov	r0, r5
   13986:	f7fe f9af 	bl	11ce8 <bt_att_create_pdu>
	if (!buf) {
   1398a:	4606      	mov	r6, r0
   1398c:	2800      	cmp	r0, #0
   1398e:	d0a0      	beq.n	138d2 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   13990:	f100 0708 	add.w	r7, r0, #8
   13994:	2104      	movs	r1, #4
   13996:	4638      	mov	r0, r7
   13998:	f001 f88a 	bl	14ab0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1399c:	8923      	ldrh	r3, [r4, #8]
   1399e:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   139a0:	89e3      	ldrh	r3, [r4, #14]
   139a2:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   139a4:	7c23      	ldrb	r3, [r4, #16]
	net_buf_simple_add_le16(&buf->b, val);
   139a6:	4638      	mov	r0, r7
   139a8:	2b02      	cmp	r3, #2
   139aa:	bf0c      	ite	eq
   139ac:	f642 0102 	movweq	r1, #10242	; 0x2802
   139b0:	f642 0103 	movwne	r1, #10243	; 0x2803
   139b4:	f008 fd2e 	bl	1c414 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
   139b8:	4623      	mov	r3, r4
   139ba:	4a2d      	ldr	r2, [pc, #180]	; (13a70 <bt_gatt_discover+0x244>)
   139bc:	e7b4      	b.n	13928 <bt_gatt_discover+0xfc>
		if (params->uuid &&
   139be:	6820      	ldr	r0, [r4, #0]
   139c0:	b380      	cbz	r0, 13a24 <bt_gatt_discover+0x1f8>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   139c2:	2600      	movs	r6, #0
   139c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   139c8:	4669      	mov	r1, sp
   139ca:	f88d 6000 	strb.w	r6, [sp]
   139ce:	f8ad 3002 	strh.w	r3, [sp, #2]
   139d2:	f007 fa7f 	bl	1aed4 <bt_uuid_cmp>
		if (params->uuid &&
   139d6:	2800      	cmp	r0, #0
   139d8:	d09d      	beq.n	13916 <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   139da:	f642 0301 	movw	r3, #10241	; 0x2801
   139de:	6820      	ldr	r0, [r4, #0]
   139e0:	a901      	add	r1, sp, #4
   139e2:	f88d 6004 	strb.w	r6, [sp, #4]
   139e6:	f8ad 3006 	strh.w	r3, [sp, #6]
   139ea:	f007 fa73 	bl	1aed4 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   139ee:	2800      	cmp	r0, #0
   139f0:	d091      	beq.n	13916 <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   139f2:	f642 0302 	movw	r3, #10242	; 0x2802
   139f6:	6820      	ldr	r0, [r4, #0]
   139f8:	a902      	add	r1, sp, #8
   139fa:	f88d 6008 	strb.w	r6, [sp, #8]
   139fe:	f8ad 300a 	strh.w	r3, [sp, #10]
   13a02:	f007 fa67 	bl	1aed4 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   13a06:	2800      	cmp	r0, #0
   13a08:	d085      	beq.n	13916 <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   13a0a:	f642 0303 	movw	r3, #10243	; 0x2803
   13a0e:	6820      	ldr	r0, [r4, #0]
   13a10:	a903      	add	r1, sp, #12
   13a12:	f88d 600c 	strb.w	r6, [sp, #12]
   13a16:	f8ad 300e 	strh.w	r3, [sp, #14]
   13a1a:	f007 fa5b 	bl	1aed4 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   13a1e:	2800      	cmp	r0, #0
   13a20:	f43f af79 	beq.w	13916 <bt_gatt_discover+0xea>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
   13a24:	2204      	movs	r2, #4
   13a26:	4628      	mov	r0, r5
   13a28:	4611      	mov	r1, r2
   13a2a:	f7fe f95d 	bl	11ce8 <bt_att_create_pdu>
	if (!buf) {
   13a2e:	4606      	mov	r6, r0
   13a30:	2800      	cmp	r0, #0
   13a32:	f43f af4e 	beq.w	138d2 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   13a36:	2104      	movs	r1, #4
   13a38:	3008      	adds	r0, #8
   13a3a:	f001 f839 	bl	14ab0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   13a3e:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   13a40:	4a0c      	ldr	r2, [pc, #48]	; (13a74 <bt_gatt_discover+0x248>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   13a42:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   13a44:	89e3      	ldrh	r3, [r4, #14]
   13a46:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   13a48:	4623      	mov	r3, r4
   13a4a:	e76d      	b.n	13928 <bt_gatt_discover+0xfc>
		BT_ERR("Invalid discovery type: %u", params->type);
   13a4c:	2145      	movs	r1, #69	; 0x45
   13a4e:	480a      	ldr	r0, [pc, #40]	; (13a78 <bt_gatt_discover+0x24c>)
   13a50:	f005 ff8b 	bl	1996a <printk>
   13a54:	e75f      	b.n	13916 <bt_gatt_discover+0xea>
		return -ENOTCONN;
   13a56:	f06f 0038 	mvn.w	r0, #56	; 0x38
   13a5a:	e73c      	b.n	138d6 <bt_gatt_discover+0xaa>
   13a5c:	00020ce9 	.word	0x00020ce9
   13a60:	0001ea60 	.word	0x0001ea60
   13a64:	00020da8 	.word	0x00020da8
   13a68:	0001c1f9 	.word	0x0001c1f9
   13a6c:	00013a7d 	.word	0x00013a7d
   13a70:	00013b85 	.word	0x00013b85
   13a74:	00013e35 	.word	0x00013e35
   13a78:	00020dc2 	.word	0x00020dc2

00013a7c <gatt_read_group_rsp>:
{
   13a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a80:	b08f      	sub	sp, #60	; 0x3c
   13a82:	4681      	mov	r9, r0
   13a84:	4617      	mov	r7, r2
   13a86:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
   13a88:	b131      	cbz	r1, 13a98 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   13a8a:	462a      	mov	r2, r5
   13a8c:	2100      	movs	r1, #0
   13a8e:	686b      	ldr	r3, [r5, #4]
}
   13a90:	b00f      	add	sp, #60	; 0x3c
   13a92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   13a96:	4718      	bx	r3
	switch (rsp->len) {
   13a98:	7812      	ldrb	r2, [r2, #0]
   13a9a:	2a06      	cmp	r2, #6
   13a9c:	d00d      	beq.n	13aba <gatt_read_group_rsp+0x3e>
   13a9e:	2a14      	cmp	r2, #20
   13aa0:	d021      	beq.n	13ae6 <gatt_read_group_rsp+0x6a>
		BT_ERR("Invalid data len %u", rsp->len);
   13aa2:	2145      	movs	r1, #69	; 0x45
   13aa4:	4836      	ldr	r0, [pc, #216]	; (13b80 <gatt_read_group_rsp+0x104>)
   13aa6:	f005 ff60 	bl	1996a <printk>
	params->func(conn, NULL, params);
   13aaa:	462a      	mov	r2, r5
   13aac:	2100      	movs	r1, #0
   13aae:	4648      	mov	r0, r9
   13ab0:	686b      	ldr	r3, [r5, #4]
   13ab2:	4798      	blx	r3
}
   13ab4:	b00f      	add	sp, #60	; 0x3c
   13ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   13aba:	f88d 1010 	strb.w	r1, [sp, #16]
	uint16_t start_handle, end_handle = 0U;
   13abe:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   13ac0:	3b01      	subs	r3, #1
   13ac2:	b29c      	uxth	r4, r3
   13ac4:	f107 0801 	add.w	r8, r7, #1
   13ac8:	783b      	ldrb	r3, [r7, #0]
   13aca:	42a3      	cmp	r3, r4
   13acc:	d90f      	bls.n	13aee <gatt_read_group_rsp+0x72>
	if (length == 0U && end_handle) {
   13ace:	2c00      	cmp	r4, #0
   13ad0:	d1eb      	bne.n	13aaa <gatt_read_group_rsp+0x2e>
   13ad2:	2e00      	cmp	r6, #0
   13ad4:	d0e9      	beq.n	13aaa <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   13ad6:	462a      	mov	r2, r5
   13ad8:	4631      	mov	r1, r6
   13ada:	4648      	mov	r0, r9
}
   13adc:	b00f      	add	sp, #60	; 0x3c
   13ade:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   13ae2:	f008 bb6c 	b.w	1c1be <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   13ae6:	2202      	movs	r2, #2
   13ae8:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   13aec:	e7e7      	b.n	13abe <gatt_read_group_rsp+0x42>
		struct bt_gatt_attr attr = {};
   13aee:	2214      	movs	r2, #20
   13af0:	2100      	movs	r1, #0
   13af2:	a809      	add	r0, sp, #36	; 0x24
   13af4:	f007 f9a4 	bl	1ae40 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   13af8:	f8b8 a000 	ldrh.w	sl, [r8]
   13afc:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   13b00:	2b00      	cmp	r3, #0
   13b02:	d0d2      	beq.n	13aaa <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   13b04:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   13b08:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   13b0c:	2e00      	cmp	r6, #0
   13b0e:	d0cc      	beq.n	13aaa <gatt_read_group_rsp+0x2e>
   13b10:	42b3      	cmp	r3, r6
   13b12:	d8ca      	bhi.n	13aaa <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   13b14:	f89d 3010 	ldrb.w	r3, [sp, #16]
   13b18:	b323      	cbz	r3, 13b64 <gatt_read_group_rsp+0xe8>
   13b1a:	2b02      	cmp	r3, #2
   13b1c:	d02a      	beq.n	13b74 <gatt_read_group_rsp+0xf8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   13b1e:	f04f 0300 	mov.w	r3, #0
   13b22:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   13b26:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13b28:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   13b2a:	2b00      	cmp	r3, #0
   13b2c:	f642 0301 	movw	r3, #10241	; 0x2801
   13b30:	bf08      	it	eq
   13b32:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   13b36:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   13b3a:	ab04      	add	r3, sp, #16
   13b3c:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   13b3e:	ab01      	add	r3, sp, #4
   13b40:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   13b42:	ab02      	add	r3, sp, #8
   13b44:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13b46:	4648      	mov	r0, r9
   13b48:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
   13b4a:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
   13b4e:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13b52:	a909      	add	r1, sp, #36	; 0x24
   13b54:	4798      	blx	r3
   13b56:	2800      	cmp	r0, #0
   13b58:	d0ac      	beq.n	13ab4 <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   13b5a:	783a      	ldrb	r2, [r7, #0]
   13b5c:	1aa4      	subs	r4, r4, r2
   13b5e:	b2a4      	uxth	r4, r4
   13b60:	4490      	add	r8, r2
   13b62:	e7b1      	b.n	13ac8 <gatt_read_group_rsp+0x4c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   13b64:	2202      	movs	r2, #2
   13b66:	f108 0104 	add.w	r1, r8, #4
   13b6a:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   13b6e:	f007 f93c 	bl	1adea <memcpy>
			break;
   13b72:	e7d4      	b.n	13b1e <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   13b74:	2210      	movs	r2, #16
   13b76:	f108 0104 	add.w	r1, r8, #4
   13b7a:	f10d 0011 	add.w	r0, sp, #17
   13b7e:	e7f6      	b.n	13b6e <gatt_read_group_rsp+0xf2>
   13b80:	00020de2 	.word	0x00020de2

00013b84 <gatt_read_type_rsp>:
{
   13b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b88:	b091      	sub	sp, #68	; 0x44
   13b8a:	4607      	mov	r7, r0
   13b8c:	4690      	mov	r8, r2
   13b8e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	if (err) {
   13b90:	b131      	cbz	r1, 13ba0 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   13b92:	462a      	mov	r2, r5
   13b94:	2100      	movs	r1, #0
   13b96:	686b      	ldr	r3, [r5, #4]
}
   13b98:	b011      	add	sp, #68	; 0x44
   13b9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   13b9e:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   13ba0:	7c28      	ldrb	r0, [r5, #16]
	switch (rsp->len) {
   13ba2:	7812      	ldrb	r2, [r2, #0]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   13ba4:	2802      	cmp	r0, #2
   13ba6:	f040 8089 	bne.w	13cbc <gatt_read_type_rsp+0x138>
	switch (rsp->len) {
   13baa:	2a06      	cmp	r2, #6
   13bac:	d01c      	beq.n	13be8 <gatt_read_type_rsp+0x64>
   13bae:	2a08      	cmp	r2, #8
   13bb0:	f040 8088 	bne.w	13cc4 <gatt_read_type_rsp+0x140>
		u.uuid.type = BT_UUID_TYPE_16;
   13bb4:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   13bb8:	2600      	movs	r6, #0
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13bba:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   13bbc:	1e5c      	subs	r4, r3, #1
   13bbe:	b2a4      	uxth	r4, r4
   13bc0:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
   13bc4:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
   13bc8:	f898 3000 	ldrb.w	r3, [r8]
   13bcc:	42a3      	cmp	r3, r4
   13bce:	d90e      	bls.n	13bee <gatt_read_type_rsp+0x6a>
	if (length == 0U && handle) {
   13bd0:	2c00      	cmp	r4, #0
   13bd2:	d17b      	bne.n	13ccc <gatt_read_type_rsp+0x148>
   13bd4:	2e00      	cmp	r6, #0
   13bd6:	d079      	beq.n	13ccc <gatt_read_type_rsp+0x148>
	gatt_discover_next(conn, handle, params);
   13bd8:	462a      	mov	r2, r5
   13bda:	4631      	mov	r1, r6
   13bdc:	4638      	mov	r0, r7
}
   13bde:	b011      	add	sp, #68	; 0x44
   13be0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   13be4:	f008 baeb 	b.w	1c1be <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   13be8:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
   13bec:	e7e4      	b.n	13bb8 <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
   13bee:	f8b9 3000 	ldrh.w	r3, [r9]
   13bf2:	b29e      	uxth	r6, r3
		if (!handle) {
   13bf4:	2e00      	cmp	r6, #0
   13bf6:	d069      	beq.n	13ccc <gatt_read_type_rsp+0x148>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   13bf8:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   13bfc:	f8ad 2014 	strh.w	r2, [sp, #20]
   13c00:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   13c02:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   13c06:	b291      	uxth	r1, r2
   13c08:	f8ad 2016 	strh.w	r2, [sp, #22]
		switch (u.uuid.type) {
   13c0c:	f89d 2018 	ldrb.w	r2, [sp, #24]
   13c10:	b182      	cbz	r2, 13c34 <gatt_read_type_rsp+0xb0>
   13c12:	2a02      	cmp	r2, #2
   13c14:	d019      	beq.n	13c4a <gatt_read_type_rsp+0xc6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13c16:	6829      	ldr	r1, [r5, #0]
   13c18:	2900      	cmp	r1, #0
   13c1a:	d036      	beq.n	13c8a <gatt_read_type_rsp+0x106>
   13c1c:	4650      	mov	r0, sl
   13c1e:	9301      	str	r3, [sp, #4]
   13c20:	f007 f958 	bl	1aed4 <bt_uuid_cmp>
   13c24:	9b01      	ldr	r3, [sp, #4]
   13c26:	b380      	cbz	r0, 13c8a <gatt_read_type_rsp+0x106>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   13c28:	f898 2000 	ldrb.w	r2, [r8]
   13c2c:	1aa4      	subs	r4, r4, r2
   13c2e:	b2a4      	uxth	r4, r4
   13c30:	4491      	add	r9, r2
   13c32:	e7c9      	b.n	13bc8 <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
   13c34:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   13c38:	f899 2006 	ldrb.w	r2, [r9, #6]
   13c3c:	f899 1007 	ldrb.w	r1, [r9, #7]
   13c40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13c44:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
   13c48:	e7e5      	b.n	13c16 <gatt_read_type_rsp+0x92>
			params->_included.start_handle = value.start_handle;
   13c4a:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   13c4c:	81a9      	strh	r1, [r5, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   13c4e:	4638      	mov	r0, r7
   13c50:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
   13c52:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   13c54:	9201      	str	r2, [sp, #4]
   13c56:	f7fe f847 	bl	11ce8 <bt_att_create_pdu>
	if (!buf) {
   13c5a:	4604      	mov	r4, r0
   13c5c:	b190      	cbz	r0, 13c84 <gatt_read_type_rsp+0x100>
   13c5e:	9a01      	ldr	r2, [sp, #4]
   13c60:	3008      	adds	r0, #8
   13c62:	4611      	mov	r1, r2
   13c64:	f000 ff24 	bl	14ab0 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   13c68:	896b      	ldrh	r3, [r5, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   13c6a:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   13c6c:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   13c6e:	4a49      	ldr	r2, [pc, #292]	; (13d94 <gatt_read_type_rsp+0x210>)
   13c70:	462b      	mov	r3, r5
   13c72:	4638      	mov	r0, r7
   13c74:	f7fe fe70 	bl	12958 <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
   13c78:	b286      	uxth	r6, r0
	if (!handle) {
   13c7a:	2e00      	cmp	r6, #0
   13c7c:	d1ac      	bne.n	13bd8 <gatt_read_type_rsp+0x54>
}
   13c7e:	b011      	add	sp, #68	; 0x44
   13c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   13c84:	f06f 000b 	mvn.w	r0, #11
   13c88:	e7f6      	b.n	13c78 <gatt_read_type_rsp+0xf4>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13c8a:	f642 0202 	movw	r2, #10242	; 0x2802
   13c8e:	f8ad 200e 	strh.w	r2, [sp, #14]
   13c92:	aa03      	add	r2, sp, #12
   13c94:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
   13c98:	aa04      	add	r2, sp, #16
   13c9a:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
   13c9c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13ca0:	462a      	mov	r2, r5
   13ca2:	4638      	mov	r0, r7
   13ca4:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13ca6:	f88d b00c 	strb.w	fp, [sp, #12]
   13caa:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   13cae:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13cb2:	a90b      	add	r1, sp, #44	; 0x2c
   13cb4:	4798      	blx	r3
   13cb6:	2800      	cmp	r0, #0
   13cb8:	d1b6      	bne.n	13c28 <gatt_read_type_rsp+0xa4>
   13cba:	e7e0      	b.n	13c7e <gatt_read_type_rsp+0xfa>
	switch (rsp->len) {
   13cbc:	2a07      	cmp	r2, #7
   13cbe:	d00b      	beq.n	13cd8 <gatt_read_type_rsp+0x154>
   13cc0:	2a15      	cmp	r2, #21
   13cc2:	d02e      	beq.n	13d22 <gatt_read_type_rsp+0x19e>
		BT_ERR("Invalid data len %u", rsp->len);
   13cc4:	2145      	movs	r1, #69	; 0x45
   13cc6:	4834      	ldr	r0, [pc, #208]	; (13d98 <gatt_read_type_rsp+0x214>)
   13cc8:	f005 fe4f 	bl	1996a <printk>
	params->func(conn, NULL, params);
   13ccc:	462a      	mov	r2, r5
   13cce:	2100      	movs	r1, #0
   13cd0:	4638      	mov	r0, r7
   13cd2:	686b      	ldr	r3, [r5, #4]
   13cd4:	4798      	blx	r3
	if (!handle) {
   13cd6:	e7d2      	b.n	13c7e <gatt_read_type_rsp+0xfa>
		u.uuid.type = BT_UUID_TYPE_16;
   13cd8:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   13cdc:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   13cde:	1e5c      	subs	r4, r3, #1
   13ce0:	b2a4      	uxth	r4, r4
   13ce2:	f108 0901 	add.w	r9, r8, #1
   13ce6:	f10d 0a18 	add.w	sl, sp, #24
   13cea:	f898 3000 	ldrb.w	r3, [r8]
   13cee:	42a3      	cmp	r3, r4
   13cf0:	f63f af6e 	bhi.w	13bd0 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
   13cf4:	f8b9 b000 	ldrh.w	fp, [r9]
   13cf8:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   13cfc:	2e00      	cmp	r6, #0
   13cfe:	d0e5      	beq.n	13ccc <gatt_read_type_rsp+0x148>
		switch (u.uuid.type) {
   13d00:	f89d 3018 	ldrb.w	r3, [sp, #24]
   13d04:	b18b      	cbz	r3, 13d2a <gatt_read_type_rsp+0x1a6>
   13d06:	2b02      	cmp	r3, #2
   13d08:	d018      	beq.n	13d3c <gatt_read_type_rsp+0x1b8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13d0a:	6829      	ldr	r1, [r5, #0]
   13d0c:	b1f1      	cbz	r1, 13d4c <gatt_read_type_rsp+0x1c8>
   13d0e:	4650      	mov	r0, sl
   13d10:	f007 f8e0 	bl	1aed4 <bt_uuid_cmp>
   13d14:	b1d0      	cbz	r0, 13d4c <gatt_read_type_rsp+0x1c8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   13d16:	f898 2000 	ldrb.w	r2, [r8]
   13d1a:	1aa4      	subs	r4, r4, r2
   13d1c:	b2a4      	uxth	r4, r4
   13d1e:	4491      	add	r9, r2
   13d20:	e7e3      	b.n	13cea <gatt_read_type_rsp+0x166>
		u.uuid.type = BT_UUID_TYPE_128;
   13d22:	2202      	movs	r2, #2
   13d24:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
   13d28:	e7d8      	b.n	13cdc <gatt_read_type_rsp+0x158>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   13d2a:	f899 3005 	ldrb.w	r3, [r9, #5]
   13d2e:	f899 2006 	ldrb.w	r2, [r9, #6]
   13d32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13d36:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
   13d3a:	e7e6      	b.n	13d0a <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   13d3c:	2210      	movs	r2, #16
   13d3e:	f109 0105 	add.w	r1, r9, #5
   13d42:	f10d 0019 	add.w	r0, sp, #25
   13d46:	f007 f850 	bl	1adea <memcpy>
			break;
   13d4a:	e7de      	b.n	13d0a <gatt_read_type_rsp+0x186>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   13d4c:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   13d50:	f899 3002 	ldrb.w	r3, [r9, #2]
   13d54:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13d58:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   13d5c:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13d60:	2300      	movs	r3, #0
   13d62:	f8ad 200e 	strh.w	r2, [sp, #14]
   13d66:	aa03      	add	r2, sp, #12
   13d68:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
   13d6c:	aa04      	add	r2, sp, #16
   13d6e:	f88d 300c 	strb.w	r3, [sp, #12]
   13d72:	930d      	str	r3, [sp, #52]	; 0x34
   13d74:	920e      	str	r2, [sp, #56]	; 0x38
   13d76:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13d7a:	462a      	mov	r2, r5
   13d7c:	4638      	mov	r0, r7
   13d7e:	686b      	ldr	r3, [r5, #4]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   13d80:	f8cd a010 	str.w	sl, [sp, #16]
		attr.handle = handle;
   13d84:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13d88:	a90b      	add	r1, sp, #44	; 0x2c
   13d8a:	4798      	blx	r3
   13d8c:	2800      	cmp	r0, #0
   13d8e:	d1c2      	bne.n	13d16 <gatt_read_type_rsp+0x192>
   13d90:	e775      	b.n	13c7e <gatt_read_type_rsp+0xfa>
   13d92:	bf00      	nop
   13d94:	00013d9d 	.word	0x00013d9d
   13d98:	00020de2 	.word	0x00020de2

00013d9c <read_included_uuid_cb>:
{
   13d9c:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
   13d9e:	2b10      	cmp	r3, #16
{
   13da0:	b08e      	sub	sp, #56	; 0x38
   13da2:	4611      	mov	r1, r2
   13da4:	4605      	mov	r5, r0
   13da6:	461a      	mov	r2, r3
   13da8:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   13daa:	d00b      	beq.n	13dc4 <read_included_uuid_cb+0x28>
		BT_ERR("Invalid data len %u", length);
   13dac:	2145      	movs	r1, #69	; 0x45
   13dae:	4820      	ldr	r0, [pc, #128]	; (13e30 <read_included_uuid_cb+0x94>)
   13db0:	f005 fddb 	bl	1996a <printk>
		params->func(conn, NULL, params);
   13db4:	4622      	mov	r2, r4
   13db6:	2100      	movs	r1, #0
   13db8:	4628      	mov	r0, r5
   13dba:	6863      	ldr	r3, [r4, #4]
}
   13dbc:	b00e      	add	sp, #56	; 0x38
   13dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   13dc2:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   13dc4:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   13dc6:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
   13dc8:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   13dcc:	89a3      	ldrh	r3, [r4, #12]
	memcpy(u.u128.val, pdu, length);
   13dce:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
   13dd2:	f8ad 300e 	strh.w	r3, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   13dd6:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   13dd8:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   13dda:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   13dde:	f007 f804 	bl	1adea <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13de2:	6821      	ldr	r1, [r4, #0]
   13de4:	b9c9      	cbnz	r1, 13e1a <read_included_uuid_cb+0x7e>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13de6:	f642 0202 	movw	r2, #10242	; 0x2802
   13dea:	2300      	movs	r3, #0
   13dec:	f8ad 2006 	strh.w	r2, [sp, #6]
   13df0:	aa01      	add	r2, sp, #4
   13df2:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   13df6:	f88d 3004 	strb.w	r3, [sp, #4]
   13dfa:	930b      	str	r3, [sp, #44]	; 0x2c
   13dfc:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   13e00:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13e02:	aa02      	add	r2, sp, #8
   13e04:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   13e06:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13e0a:	4622      	mov	r2, r4
   13e0c:	4628      	mov	r0, r5
   13e0e:	6863      	ldr	r3, [r4, #4]
   13e10:	a909      	add	r1, sp, #36	; 0x24
   13e12:	4798      	blx	r3
   13e14:	b930      	cbnz	r0, 13e24 <read_included_uuid_cb+0x88>
}
   13e16:	b00e      	add	sp, #56	; 0x38
   13e18:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13e1a:	4630      	mov	r0, r6
   13e1c:	f007 f85a 	bl	1aed4 <bt_uuid_cmp>
   13e20:	2800      	cmp	r0, #0
   13e22:	d0e0      	beq.n	13de6 <read_included_uuid_cb+0x4a>
	gatt_discover_next(conn, params->start_handle, params);
   13e24:	4622      	mov	r2, r4
   13e26:	4628      	mov	r0, r5
   13e28:	8921      	ldrh	r1, [r4, #8]
   13e2a:	f008 f9c8 	bl	1c1be <gatt_discover_next>
	return;
   13e2e:	e7f2      	b.n	13e16 <read_included_uuid_cb+0x7a>
   13e30:	00020de2 	.word	0x00020de2

00013e34 <gatt_find_info_rsp>:
{
   13e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e38:	b08f      	sub	sp, #60	; 0x3c
   13e3a:	4680      	mov	r8, r0
   13e3c:	4614      	mov	r4, r2
   13e3e:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   13e40:	b941      	cbnz	r1, 13e54 <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   13e42:	7812      	ldrb	r2, [r2, #0]
   13e44:	2a01      	cmp	r2, #1
   13e46:	d00b      	beq.n	13e60 <gatt_find_info_rsp+0x2c>
   13e48:	2a02      	cmp	r2, #2
   13e4a:	d022      	beq.n	13e92 <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
   13e4c:	2145      	movs	r1, #69	; 0x45
   13e4e:	484b      	ldr	r0, [pc, #300]	; (13f7c <gatt_find_info_rsp+0x148>)
   13e50:	f005 fd8b 	bl	1996a <printk>
	params->func(conn, NULL, params);
   13e54:	4632      	mov	r2, r6
   13e56:	2100      	movs	r1, #0
   13e58:	4640      	mov	r0, r8
   13e5a:	6873      	ldr	r3, [r6, #4]
   13e5c:	4798      	blx	r3
   13e5e:	e08a      	b.n	13f76 <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i16);
   13e60:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
   13e64:	f88d 1010 	strb.w	r1, [sp, #16]
	length--;
   13e68:	3b01      	subs	r3, #1
   13e6a:	b29b      	uxth	r3, r3
	if (length < len) {
   13e6c:	4553      	cmp	r3, sl
   13e6e:	d3f1      	bcc.n	13e54 <gatt_find_info_rsp+0x20>
	bool skip = false;
   13e70:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   13e74:	fbb3 f3fa 	udiv	r3, r3, sl
	uint16_t handle = 0U;
   13e78:	46cb      	mov	fp, r9
			skip = false;
   13e7a:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
   13e7c:	9300      	str	r3, [sp, #0]
   13e7e:	3401      	adds	r4, #1
   13e80:	af04      	add	r7, sp, #16
   13e82:	9b00      	ldr	r3, [sp, #0]
   13e84:	b953      	cbnz	r3, 13e9c <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
   13e86:	4632      	mov	r2, r6
   13e88:	4659      	mov	r1, fp
   13e8a:	4640      	mov	r0, r8
   13e8c:	f008 f997 	bl	1c1be <gatt_discover_next>
	return;
   13e90:	e071      	b.n	13f76 <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i128);
   13e92:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
   13e96:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   13e9a:	e7e5      	b.n	13e68 <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
   13e9c:	8823      	ldrh	r3, [r4, #0]
   13e9e:	9301      	str	r3, [sp, #4]
   13ea0:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   13ea4:	f1b9 0f00 	cmp.w	r9, #0
   13ea8:	d151      	bne.n	13f4e <gatt_find_info_rsp+0x11a>
		switch (u.uuid.type) {
   13eaa:	f89d 3010 	ldrb.w	r3, [sp, #16]
   13eae:	2b00      	cmp	r3, #0
   13eb0:	d03a      	beq.n	13f28 <gatt_find_info_rsp+0xf4>
   13eb2:	2b02      	cmp	r3, #2
   13eb4:	d03f      	beq.n	13f36 <gatt_find_info_rsp+0x102>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13eb6:	6831      	ldr	r1, [r6, #0]
   13eb8:	2900      	cmp	r1, #0
   13eba:	d143      	bne.n	13f44 <gatt_find_info_rsp+0x110>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   13ebc:	7c33      	ldrb	r3, [r6, #16]
   13ebe:	2b04      	cmp	r3, #4
   13ec0:	d148      	bne.n	13f54 <gatt_find_info_rsp+0x120>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   13ec2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   13ec6:	4638      	mov	r0, r7
   13ec8:	a902      	add	r1, sp, #8
   13eca:	f88d 5008 	strb.w	r5, [sp, #8]
   13ece:	f8ad 300a 	strh.w	r3, [sp, #10]
   13ed2:	f006 ffff 	bl	1aed4 <bt_uuid_cmp>
   13ed6:	b310      	cbz	r0, 13f1e <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   13ed8:	f642 0301 	movw	r3, #10241	; 0x2801
   13edc:	4638      	mov	r0, r7
   13ede:	a903      	add	r1, sp, #12
   13ee0:	f88d 500c 	strb.w	r5, [sp, #12]
   13ee4:	f8ad 300e 	strh.w	r3, [sp, #14]
   13ee8:	f006 fff4 	bl	1aed4 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   13eec:	b1b8      	cbz	r0, 13f1e <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   13eee:	f642 0302 	movw	r3, #10242	; 0x2802
   13ef2:	4638      	mov	r0, r7
   13ef4:	a909      	add	r1, sp, #36	; 0x24
   13ef6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   13efa:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   13efe:	f006 ffe9 	bl	1aed4 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   13f02:	b160      	cbz	r0, 13f1e <gatt_find_info_rsp+0xea>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   13f04:	f642 0303 	movw	r3, #10243	; 0x2803
   13f08:	4638      	mov	r0, r7
   13f0a:	a909      	add	r1, sp, #36	; 0x24
   13f0c:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   13f10:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   13f14:	f006 ffde 	bl	1aed4 <bt_uuid_cmp>
   13f18:	b9e0      	cbnz	r0, 13f54 <gatt_find_info_rsp+0x120>
				skip = true;
   13f1a:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   13f1e:	9b00      	ldr	r3, [sp, #0]
   13f20:	4454      	add	r4, sl
   13f22:	3b01      	subs	r3, #1
   13f24:	9300      	str	r3, [sp, #0]
   13f26:	e7ac      	b.n	13e82 <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   13f28:	78a3      	ldrb	r3, [r4, #2]
   13f2a:	78e2      	ldrb	r2, [r4, #3]
   13f2c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13f30:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   13f34:	e7bf      	b.n	13eb6 <gatt_find_info_rsp+0x82>
			memcpy(u.u128.val, info.i128->uuid, 16);
   13f36:	2210      	movs	r2, #16
   13f38:	1ca1      	adds	r1, r4, #2
   13f3a:	f10d 0011 	add.w	r0, sp, #17
   13f3e:	f006 ff54 	bl	1adea <memcpy>
			break;
   13f42:	e7b8      	b.n	13eb6 <gatt_find_info_rsp+0x82>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13f44:	4638      	mov	r0, r7
   13f46:	f006 ffc5 	bl	1aed4 <bt_uuid_cmp>
   13f4a:	2800      	cmp	r0, #0
   13f4c:	d0b6      	beq.n	13ebc <gatt_find_info_rsp+0x88>
			skip = false;
   13f4e:	f04f 0900 	mov.w	r9, #0
   13f52:	e7e4      	b.n	13f1e <gatt_find_info_rsp+0xea>
		attr.handle = handle;
   13f54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13f58:	4632      	mov	r2, r6
		attr.handle = handle;
   13f5a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13f5e:	4640      	mov	r0, r8
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13f60:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   13f64:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13f68:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13f6a:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13f6e:	a909      	add	r1, sp, #36	; 0x24
   13f70:	4798      	blx	r3
   13f72:	2800      	cmp	r0, #0
   13f74:	d1d3      	bne.n	13f1e <gatt_find_info_rsp+0xea>
}
   13f76:	b00f      	add	sp, #60	; 0x3c
   13f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f7c:	00020dfb 	.word	0x00020dfb

00013f80 <bt_gatt_subscribe>:
{
   13f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13f82:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   13f84:	4606      	mov	r6, r0
   13f86:	b950      	cbnz	r0, 13f9e <bt_gatt_subscribe+0x1e>
   13f88:	4944      	ldr	r1, [pc, #272]	; (1409c <bt_gatt_subscribe+0x11c>)
   13f8a:	4845      	ldr	r0, [pc, #276]	; (140a0 <bt_gatt_subscribe+0x120>)
   13f8c:	f640 72fb 	movw	r2, #4091	; 0xffb
   13f90:	f005 fceb 	bl	1996a <printk>
   13f94:	f640 71fb 	movw	r1, #4091	; 0xffb
   13f98:	4840      	ldr	r0, [pc, #256]	; (1409c <bt_gatt_subscribe+0x11c>)
   13f9a:	f005 ff8c 	bl	19eb6 <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   13f9e:	b10d      	cbz	r5, 13fa4 <bt_gatt_subscribe+0x24>
   13fa0:	682b      	ldr	r3, [r5, #0]
   13fa2:	b953      	cbnz	r3, 13fba <bt_gatt_subscribe+0x3a>
   13fa4:	493d      	ldr	r1, [pc, #244]	; (1409c <bt_gatt_subscribe+0x11c>)
   13fa6:	483e      	ldr	r0, [pc, #248]	; (140a0 <bt_gatt_subscribe+0x120>)
   13fa8:	f640 72fc 	movw	r2, #4092	; 0xffc
   13fac:	f005 fcdd 	bl	1996a <printk>
   13fb0:	f640 71fc 	movw	r1, #4092	; 0xffc
   13fb4:	4839      	ldr	r0, [pc, #228]	; (1409c <bt_gatt_subscribe+0x11c>)
   13fb6:	f005 ff7e 	bl	19eb6 <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   13fba:	89ab      	ldrh	r3, [r5, #12]
   13fbc:	b953      	cbnz	r3, 13fd4 <bt_gatt_subscribe+0x54>
   13fbe:	4937      	ldr	r1, [pc, #220]	; (1409c <bt_gatt_subscribe+0x11c>)
   13fc0:	4837      	ldr	r0, [pc, #220]	; (140a0 <bt_gatt_subscribe+0x120>)
   13fc2:	f640 72fd 	movw	r2, #4093	; 0xffd
   13fc6:	f005 fcd0 	bl	1996a <printk>
   13fca:	f640 71fd 	movw	r1, #4093	; 0xffd
   13fce:	4833      	ldr	r0, [pc, #204]	; (1409c <bt_gatt_subscribe+0x11c>)
   13fd0:	f005 ff71 	bl	19eb6 <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   13fd4:	896b      	ldrh	r3, [r5, #10]
   13fd6:	b953      	cbnz	r3, 13fee <bt_gatt_subscribe+0x6e>
   13fd8:	4930      	ldr	r1, [pc, #192]	; (1409c <bt_gatt_subscribe+0x11c>)
   13fda:	4831      	ldr	r0, [pc, #196]	; (140a0 <bt_gatt_subscribe+0x120>)
   13fdc:	f241 0203 	movw	r2, #4099	; 0x1003
   13fe0:	f005 fcc3 	bl	1996a <printk>
   13fe4:	f241 0103 	movw	r1, #4099	; 0x1003
   13fe8:	482c      	ldr	r0, [pc, #176]	; (1409c <bt_gatt_subscribe+0x11c>)
   13fea:	f005 ff64 	bl	19eb6 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   13fee:	7ab3      	ldrb	r3, [r6, #10]
   13ff0:	2b07      	cmp	r3, #7
   13ff2:	d14b      	bne.n	1408c <bt_gatt_subscribe+0x10c>
	sub = gatt_sub_find(conn);
   13ff4:	4630      	mov	r0, r6
   13ff6:	f7fe faf9 	bl	125ec <gatt_sub_find>
	if (!sub) {
   13ffa:	4604      	mov	r4, r0
   13ffc:	b958      	cbnz	r0, 14016 <bt_gatt_subscribe+0x96>
		sub = gatt_sub_find(NULL);
   13ffe:	f7fe faf5 	bl	125ec <gatt_sub_find>
		if (sub) {
   14002:	4604      	mov	r4, r0
   14004:	2800      	cmp	r0, #0
   14006:	d044      	beq.n	14092 <bt_gatt_subscribe+0x112>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   14008:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1400c:	3001      	adds	r0, #1
   1400e:	f007 fec2 	bl	1bd96 <bt_addr_le_copy>
			sub->id = conn->id;
   14012:	7a33      	ldrb	r3, [r6, #8]
   14014:	7023      	strb	r3, [r4, #0]
	return list->head;
   14016:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14018:	b90a      	cbnz	r2, 1401e <bt_gatt_subscribe+0x9e>
   1401a:	4613      	mov	r3, r2
   1401c:	e001      	b.n	14022 <bt_gatt_subscribe+0xa2>
   1401e:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   14022:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14024:	b97b      	cbnz	r3, 14046 <bt_gatt_subscribe+0xc6>
	if (!has_subscription) {
   14026:	bb41      	cbnz	r1, 1407a <bt_gatt_subscribe+0xfa>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
   14028:	4630      	mov	r0, r6
   1402a:	462b      	mov	r3, r5
   1402c:	89aa      	ldrh	r2, [r5, #12]
   1402e:	8969      	ldrh	r1, [r5, #10]
   14030:	f7fe ff38 	bl	12ea4 <gatt_write_ccc.constprop.0>
		if (err) {
   14034:	4606      	mov	r6, r0
   14036:	b300      	cbz	r0, 1407a <bt_gatt_subscribe+0xfa>
	if (sys_slist_is_empty(&sub->list)) {
   14038:	68a3      	ldr	r3, [r4, #8]
   1403a:	b913      	cbnz	r3, 14042 <bt_gatt_subscribe+0xc2>
   1403c:	4620      	mov	r0, r4
   1403e:	f007 fec9 	bl	1bdd4 <gatt_sub_remove.part.0>
}
   14042:	4630      	mov	r0, r6
   14044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   14046:	42ab      	cmp	r3, r5
   14048:	d106      	bne.n	14058 <bt_gatt_subscribe+0xd8>
	if (sys_slist_is_empty(&sub->list)) {
   1404a:	b912      	cbnz	r2, 14052 <bt_gatt_subscribe+0xd2>
   1404c:	4620      	mov	r0, r4
   1404e:	f007 fec1 	bl	1bdd4 <gatt_sub_remove.part.0>
			return -EALREADY;
   14052:	f06f 0644 	mvn.w	r6, #68	; 0x44
   14056:	e7f4      	b.n	14042 <bt_gatt_subscribe+0xc2>
		if (tmp->value_handle == params->value_handle &&
   14058:	891f      	ldrh	r7, [r3, #8]
   1405a:	8928      	ldrh	r0, [r5, #8]
   1405c:	4287      	cmp	r7, r0
   1405e:	d104      	bne.n	1406a <bt_gatt_subscribe+0xea>
   14060:	899f      	ldrh	r7, [r3, #12]
   14062:	89a8      	ldrh	r0, [r5, #12]
			has_subscription = true;
   14064:	4287      	cmp	r7, r0
   14066:	bf28      	it	cs
   14068:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1406a:	f113 0f14 	cmn.w	r3, #20
   1406e:	d0da      	beq.n	14026 <bt_gatt_subscribe+0xa6>
	return node->next;
   14070:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14072:	2b00      	cmp	r3, #0
   14074:	d0d7      	beq.n	14026 <bt_gatt_subscribe+0xa6>
   14076:	3b14      	subs	r3, #20
   14078:	e7d4      	b.n	14024 <bt_gatt_subscribe+0xa4>
	parent->next = child;
   1407a:	68a2      	ldr	r2, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1407c:	68e6      	ldr	r6, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   1407e:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
   14082:	616a      	str	r2, [r5, #20]
	list->head = node;
   14084:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   14086:	b93e      	cbnz	r6, 14098 <bt_gatt_subscribe+0x118>
	list->tail = node;
   14088:	60e3      	str	r3, [r4, #12]
}
   1408a:	e7da      	b.n	14042 <bt_gatt_subscribe+0xc2>
		return -ENOTCONN;
   1408c:	f06f 0638 	mvn.w	r6, #56	; 0x38
   14090:	e7d7      	b.n	14042 <bt_gatt_subscribe+0xc2>
		return -ENOMEM;
   14092:	f06f 060b 	mvn.w	r6, #11
   14096:	e7d4      	b.n	14042 <bt_gatt_subscribe+0xc2>
	return 0;
   14098:	2600      	movs	r6, #0
   1409a:	e7d2      	b.n	14042 <bt_gatt_subscribe+0xc2>
   1409c:	00020ce9 	.word	0x00020ce9
   140a0:	0001ea60 	.word	0x0001ea60

000140a4 <bt_gatt_unsubscribe>:
{
   140a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140a8:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   140aa:	4607      	mov	r7, r0
   140ac:	b950      	cbnz	r0, 140c4 <bt_gatt_unsubscribe+0x20>
   140ae:	4947      	ldr	r1, [pc, #284]	; (141cc <bt_gatt_unsubscribe+0x128>)
   140b0:	4847      	ldr	r0, [pc, #284]	; (141d0 <bt_gatt_unsubscribe+0x12c>)
   140b2:	f241 025c 	movw	r2, #4188	; 0x105c
   140b6:	f005 fc58 	bl	1996a <printk>
   140ba:	f241 015c 	movw	r1, #4188	; 0x105c
   140be:	4843      	ldr	r0, [pc, #268]	; (141cc <bt_gatt_unsubscribe+0x128>)
   140c0:	f005 fef9 	bl	19eb6 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   140c4:	b956      	cbnz	r6, 140dc <bt_gatt_unsubscribe+0x38>
   140c6:	4941      	ldr	r1, [pc, #260]	; (141cc <bt_gatt_unsubscribe+0x128>)
   140c8:	4841      	ldr	r0, [pc, #260]	; (141d0 <bt_gatt_unsubscribe+0x12c>)
   140ca:	f241 025d 	movw	r2, #4189	; 0x105d
   140ce:	f005 fc4c 	bl	1996a <printk>
   140d2:	f241 015d 	movw	r1, #4189	; 0x105d
   140d6:	483d      	ldr	r0, [pc, #244]	; (141cc <bt_gatt_unsubscribe+0x128>)
   140d8:	f005 feed 	bl	19eb6 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   140dc:	7abb      	ldrb	r3, [r7, #10]
   140de:	2b07      	cmp	r3, #7
   140e0:	d170      	bne.n	141c4 <bt_gatt_unsubscribe+0x120>
	sub = gatt_sub_find(conn);
   140e2:	4638      	mov	r0, r7
   140e4:	f7fe fa82 	bl	125ec <gatt_sub_find>
	if (!sub) {
   140e8:	4680      	mov	r8, r0
   140ea:	b920      	cbnz	r0, 140f6 <bt_gatt_unsubscribe+0x52>
		return -EINVAL;
   140ec:	f06f 0015 	mvn.w	r0, #21
}
   140f0:	b003      	add	sp, #12
   140f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   140f6:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   140f8:	b1cc      	cbz	r4, 1412e <bt_gatt_unsubscribe+0x8a>
   140fa:	f1b4 0514 	subs.w	r5, r4, #20
   140fe:	d018      	beq.n	14132 <bt_gatt_unsubscribe+0x8e>
	return node->next;
   14100:	6824      	ldr	r4, [r4, #0]
   14102:	b104      	cbz	r4, 14106 <bt_gatt_unsubscribe+0x62>
   14104:	3c14      	subs	r4, #20
   14106:	f04f 0900 	mov.w	r9, #0
   1410a:	464b      	mov	r3, r9
   1410c:	46ca      	mov	sl, r9
			if (atomic_test_bit(params->flags,
   1410e:	f106 0b10 	add.w	fp, r6, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14112:	b985      	cbnz	r5, 14136 <bt_gatt_unsubscribe+0x92>
	if (!found) {
   14114:	2b00      	cmp	r3, #0
   14116:	d0e9      	beq.n	140ec <bt_gatt_unsubscribe+0x48>
	if (has_subscription) {
   14118:	f1ba 0f00 	cmp.w	sl, #0
   1411c:	d047      	beq.n	141ae <bt_gatt_unsubscribe+0x10a>
		params->notify(conn, params, NULL, 0);
   1411e:	462b      	mov	r3, r5
   14120:	462a      	mov	r2, r5
   14122:	4631      	mov	r1, r6
   14124:	4638      	mov	r0, r7
   14126:	6834      	ldr	r4, [r6, #0]
   14128:	47a0      	blx	r4
		return 0;
   1412a:	4628      	mov	r0, r5
   1412c:	e7e0      	b.n	140f0 <bt_gatt_unsubscribe+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1412e:	4625      	mov	r5, r4
   14130:	e7e9      	b.n	14106 <bt_gatt_unsubscribe+0x62>
   14132:	462c      	mov	r4, r5
   14134:	e7e7      	b.n	14106 <bt_gatt_unsubscribe+0x62>
		if (params == tmp) {
   14136:	42b5      	cmp	r5, r6
			sys_slist_remove(&sub->list, prev, &tmp->node);
   14138:	f105 0114 	add.w	r1, r5, #20
		if (params == tmp) {
   1413c:	d12b      	bne.n	14196 <bt_gatt_unsubscribe+0xf2>
Z_GENLIST_REMOVE(slist, snode)
   1413e:	696b      	ldr	r3, [r5, #20]
   14140:	f8d8 000c 	ldr.w	r0, [r8, #12]
   14144:	f1b9 0f00 	cmp.w	r9, #0
   14148:	d11e      	bne.n	14188 <bt_gatt_unsubscribe+0xe4>
   1414a:	4281      	cmp	r1, r0
	list->head = node;
   1414c:	f8c8 3008 	str.w	r3, [r8, #8]
Z_GENLIST_REMOVE(slist, snode)
   14150:	d101      	bne.n	14156 <bt_gatt_unsubscribe+0xb2>
	list->tail = node;
   14152:	f8c8 300c 	str.w	r3, [r8, #12]
	parent->next = child;
   14156:	2300      	movs	r3, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14158:	4658      	mov	r0, fp
   1415a:	616b      	str	r3, [r5, #20]
   1415c:	f007 fe37 	bl	1bdce <atomic_get>
			if (atomic_test_bit(params->flags,
   14160:	0742      	lsls	r2, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14162:	f3c0 0380 	ubfx	r3, r0, #2, #1
   14166:	d51e      	bpl.n	141a6 <bt_gatt_unsubscribe+0x102>
	bt_att_req_cancel(conn, params);
   14168:	4631      	mov	r1, r6
   1416a:	4638      	mov	r0, r7
   1416c:	9301      	str	r3, [sp, #4]
   1416e:	f7fe f9a1 	bl	124b4 <bt_att_req_cancel>
}
   14172:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14174:	b1cc      	cbz	r4, 141aa <bt_gatt_unsubscribe+0x106>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14176:	f114 0114 	adds.w	r1, r4, #20
   1417a:	d002      	beq.n	14182 <bt_gatt_unsubscribe+0xde>
	return node->next;
   1417c:	6961      	ldr	r1, [r4, #20]
   1417e:	b101      	cbz	r1, 14182 <bt_gatt_unsubscribe+0xde>
   14180:	3914      	subs	r1, #20
   14182:	4625      	mov	r5, r4
   14184:	460c      	mov	r4, r1
   14186:	e7c4      	b.n	14112 <bt_gatt_unsubscribe+0x6e>
Z_GENLIST_REMOVE(slist, snode)
   14188:	4288      	cmp	r0, r1
	parent->next = child;
   1418a:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
   1418e:	bf08      	it	eq
   14190:	f8c8 900c 	streq.w	r9, [r8, #12]
}
   14194:	e7df      	b.n	14156 <bt_gatt_unsubscribe+0xb2>
		if (tmp->value_handle == params->value_handle) {
   14196:	892d      	ldrh	r5, [r5, #8]
   14198:	8930      	ldrh	r0, [r6, #8]
			sys_slist_remove(&sub->list, prev, &tmp->node);
   1419a:	4689      	mov	r9, r1
   1419c:	4285      	cmp	r5, r0
   1419e:	bf08      	it	eq
   141a0:	f04f 0a01 	moveq.w	sl, #1
   141a4:	e7e6      	b.n	14174 <bt_gatt_unsubscribe+0xd0>
			found = true;
   141a6:	2301      	movs	r3, #1
   141a8:	e7e4      	b.n	14174 <bt_gatt_unsubscribe+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   141aa:	4621      	mov	r1, r4
   141ac:	e7e9      	b.n	14182 <bt_gatt_unsubscribe+0xde>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   141ae:	4633      	mov	r3, r6
   141b0:	4652      	mov	r2, sl
   141b2:	4638      	mov	r0, r7
   141b4:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   141b6:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   141ba:	b003      	add	sp, #12
   141bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   141c0:	f7fe be70 	b.w	12ea4 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   141c4:	f06f 0038 	mvn.w	r0, #56	; 0x38
   141c8:	e792      	b.n	140f0 <bt_gatt_unsubscribe+0x4c>
   141ca:	bf00      	nop
   141cc:	00020ce9 	.word	0x00020ce9
   141d0:	0001ea60 	.word	0x0001ea60

000141d4 <bt_gatt_mult_notification>:
{
   141d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141d8:	b085      	sub	sp, #20
   141da:	4680      	mov	r8, r0
   141dc:	460c      	mov	r4, r1
   141de:	4691      	mov	r9, r2
	sub = gatt_sub_find(conn);
   141e0:	f7fe fa04 	bl	125ec <gatt_sub_find>
	if (!sub) {
   141e4:	4606      	mov	r6, r0
   141e6:	b1d0      	cbz	r0, 1421e <bt_gatt_mult_notification+0x4a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   141e8:	464a      	mov	r2, r9
   141ea:	4621      	mov	r1, r4
   141ec:	a801      	add	r0, sp, #4
   141ee:	f008 f8d5 	bl	1c39c <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   141f2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   141f6:	2b04      	cmp	r3, #4
   141f8:	d911      	bls.n	1421e <bt_gatt_mult_notification+0x4a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   141fa:	2104      	movs	r1, #4
   141fc:	eb0d 0001 	add.w	r0, sp, r1
   14200:	f000 fc38 	bl	14a74 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   14204:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   14208:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1420c:	4605      	mov	r5, r0
		if (len > buf.len) {
   1420e:	4553      	cmp	r3, sl
   14210:	d208      	bcs.n	14224 <bt_gatt_mult_notification+0x50>
			BT_ERR("Invalid data len %u > %u", len, length);
   14212:	464b      	mov	r3, r9
   14214:	4652      	mov	r2, sl
   14216:	2145      	movs	r1, #69	; 0x45
   14218:	4816      	ldr	r0, [pc, #88]	; (14274 <bt_gatt_mult_notification+0xa0>)
   1421a:	f005 fba6 	bl	1996a <printk>
}
   1421e:	b005      	add	sp, #20
   14220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   14224:	68b3      	ldr	r3, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   14226:	b303      	cbz	r3, 1426a <bt_gatt_mult_notification+0x96>
   14228:	f1b3 0714 	subs.w	r7, r3, #20
   1422c:	d01d      	beq.n	1426a <bt_gatt_mult_notification+0x96>
	return node->next;
   1422e:	681c      	ldr	r4, [r3, #0]
   14230:	b104      	cbz	r4, 14234 <bt_gatt_mult_notification+0x60>
   14232:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   14234:	f835 bb04 	ldrh.w	fp, [r5], #4
			if (handle != params->value_handle) {
   14238:	893b      	ldrh	r3, [r7, #8]
   1423a:	455b      	cmp	r3, fp
   1423c:	d10b      	bne.n	14256 <bt_gatt_mult_notification+0x82>
			if (params->notify(conn, params, nfy->value, len) ==
   1423e:	4653      	mov	r3, sl
   14240:	462a      	mov	r2, r5
   14242:	4639      	mov	r1, r7
   14244:	4640      	mov	r0, r8
   14246:	f8d7 c000 	ldr.w	ip, [r7]
   1424a:	47e0      	blx	ip
   1424c:	b918      	cbnz	r0, 14256 <bt_gatt_mult_notification+0x82>
				bt_gatt_unsubscribe(conn, params);
   1424e:	4639      	mov	r1, r7
   14250:	4640      	mov	r0, r8
   14252:	f7ff ff27 	bl	140a4 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   14256:	b144      	cbz	r4, 1426a <bt_gatt_mult_notification+0x96>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14258:	f114 0314 	adds.w	r3, r4, #20
   1425c:	d002      	beq.n	14264 <bt_gatt_mult_notification+0x90>
	return node->next;
   1425e:	6963      	ldr	r3, [r4, #20]
   14260:	b103      	cbz	r3, 14264 <bt_gatt_mult_notification+0x90>
   14262:	3b14      	subs	r3, #20
{
   14264:	4627      	mov	r7, r4
   14266:	461c      	mov	r4, r3
   14268:	e7e6      	b.n	14238 <bt_gatt_mult_notification+0x64>
		net_buf_simple_pull_mem(&buf, len);
   1426a:	4651      	mov	r1, sl
   1426c:	a801      	add	r0, sp, #4
   1426e:	f000 fc01 	bl	14a74 <net_buf_simple_pull_mem>
   14272:	e7be      	b.n	141f2 <bt_gatt_mult_notification+0x1e>
   14274:	00020e12 	.word	0x00020e12

00014278 <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
   14278:	2301      	movs	r3, #1
{
   1427a:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1427c:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   14280:	b08e      	sub	sp, #56	; 0x38
   14282:	4605      	mov	r5, r0
	data.conn = conn;
   14284:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14286:	4631      	mov	r1, r6
   14288:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1428a:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1428e:	f006 ff73 	bl	1b178 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   14292:	b190      	cbz	r0, 142ba <bt_gatt_connected+0x42>
		if (conn->id) {
   14294:	7a2a      	ldrb	r2, [r5, #8]
   14296:	b30a      	cbz	r2, 142dc <bt_gatt_connected+0x64>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   14298:	ac02      	add	r4, sp, #8
   1429a:	2104      	movs	r1, #4
   1429c:	4620      	mov	r0, r4
   1429e:	f005 faca 	bl	19836 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   142a2:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   142a4:	2124      	movs	r1, #36	; 0x24
   142a6:	4a19      	ldr	r2, [pc, #100]	; (1430c <bt_gatt_connected+0x94>)
   142a8:	a805      	add	r0, sp, #20
   142aa:	4633      	mov	r3, r6
   142ac:	f7f9 fb5c 	bl	d968 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   142b0:	aa05      	add	r2, sp, #20
   142b2:	4610      	mov	r0, r2
   142b4:	4916      	ldr	r1, [pc, #88]	; (14310 <bt_gatt_connected+0x98>)
   142b6:	f7f6 ffb3 	bl	b220 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   142ba:	2001      	movs	r0, #1
   142bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   142c0:	4a14      	ldr	r2, [pc, #80]	; (14314 <bt_gatt_connected+0x9c>)
   142c2:	ab03      	add	r3, sp, #12
   142c4:	f007 ff4a 	bl	1c15c <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   142c8:	4628      	mov	r0, r5
   142ca:	f7fe f98f 	bl	125ec <gatt_sub_find>
	if (!sub) {
   142ce:	b118      	cbz	r0, 142d8 <bt_gatt_connected+0x60>
	return list->head;
   142d0:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   142d2:	b10c      	cbz	r4, 142d8 <bt_gatt_connected+0x60>
   142d4:	3c14      	subs	r4, #20
   142d6:	b91c      	cbnz	r4, 142e0 <bt_gatt_connected+0x68>
}
   142d8:	b00e      	add	sp, #56	; 0x38
   142da:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   142dc:	9200      	str	r2, [sp, #0]
   142de:	e7e1      	b.n	142a4 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   142e0:	4631      	mov	r1, r6
   142e2:	7a28      	ldrb	r0, [r5, #8]
   142e4:	f006 ff48 	bl	1b178 <bt_addr_le_is_bonded>
   142e8:	b158      	cbz	r0, 14302 <bt_gatt_connected+0x8a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   142ea:	f104 0010 	add.w	r0, r4, #16
   142ee:	f007 fd6e 	bl	1bdce <atomic_get>
   142f2:	0783      	lsls	r3, r0, #30
   142f4:	d405      	bmi.n	14302 <bt_gatt_connected+0x8a>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
   142f6:	4623      	mov	r3, r4
   142f8:	4628      	mov	r0, r5
   142fa:	89a2      	ldrh	r2, [r4, #12]
   142fc:	8961      	ldrh	r1, [r4, #10]
   142fe:	f7fe fdd1 	bl	12ea4 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14302:	f114 0f14 	cmn.w	r4, #20
   14306:	d0e7      	beq.n	142d8 <bt_gatt_connected+0x60>
	return node->next;
   14308:	6964      	ldr	r4, [r4, #20]
   1430a:	e7e2      	b.n	142d2 <bt_gatt_connected+0x5a>
   1430c:	00020d58 	.word	0x00020d58
   14310:	0001329d 	.word	0x0001329d
   14314:	0001366d 	.word	0x0001366d

00014318 <db_hash_read>:
{
   14318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1431a:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   1431c:	4810      	ldr	r0, [pc, #64]	; (14360 <db_hash_read+0x48>)
{
   1431e:	4615      	mov	r5, r2
   14320:	461f      	mov	r7, r3
   14322:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
   14326:	f004 fc1d 	bl	18b64 <k_delayed_work_cancel>
	if (!err) {
   1432a:	b910      	cbnz	r0, 14332 <db_hash_read+0x1a>
		db_hash_gen(true);
   1432c:	2001      	movs	r0, #1
   1432e:	f7fe ff25 	bl	1317c <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   14332:	2101      	movs	r1, #1
   14334:	4620      	mov	r0, r4
   14336:	f007 ffd9 	bl	1c2ec <bt_gatt_change_aware>
	if (offset > value_len) {
   1433a:	2e10      	cmp	r6, #16
   1433c:	d80c      	bhi.n	14358 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
   1433e:	f1c6 0410 	rsb	r4, r6, #16
   14342:	42bc      	cmp	r4, r7
   14344:	bfa8      	it	ge
   14346:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   14348:	4906      	ldr	r1, [pc, #24]	; (14364 <db_hash_read+0x4c>)
   1434a:	4622      	mov	r2, r4
   1434c:	4628      	mov	r0, r5
   1434e:	4431      	add	r1, r6
   14350:	f006 fd4b 	bl	1adea <memcpy>
}
   14354:	4620      	mov	r0, r4
   14356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   14358:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   1435c:	e7fa      	b.n	14354 <db_hash_read+0x3c>
   1435e:	bf00      	nop
   14360:	20009a58 	.word	0x20009a58
   14364:	2000c5c9 	.word	0x2000c5c9

00014368 <bt_gatt_store_ccc>:
	save.count = 0;
   14368:	2300      	movs	r3, #0
{
   1436a:	b570      	push	{r4, r5, r6, lr}
   1436c:	4604      	mov	r4, r0
   1436e:	b0c0      	sub	sp, #256	; 0x100
   14370:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   14372:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   14374:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   14378:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1437a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1437e:	2001      	movs	r0, #1
   14380:	4a13      	ldr	r2, [pc, #76]	; (143d0 <bt_gatt_store_ccc+0x68>)
   14382:	ab0d      	add	r3, sp, #52	; 0x34
   14384:	f007 feea 	bl	1c15c <bt_gatt_foreach_attr>
	if (id) {
   14388:	b1ec      	cbz	r4, 143c6 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   1438a:	ae03      	add	r6, sp, #12
   1438c:	4622      	mov	r2, r4
   1438e:	2104      	movs	r1, #4
   14390:	4630      	mov	r0, r6
   14392:	f005 fa50 	bl	19836 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   14396:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   14398:	4a0e      	ldr	r2, [pc, #56]	; (143d4 <bt_gatt_store_ccc+0x6c>)
   1439a:	462b      	mov	r3, r5
   1439c:	2124      	movs	r1, #36	; 0x24
   1439e:	a804      	add	r0, sp, #16
   143a0:	f7f9 fae2 	bl	d968 <bt_settings_encode_key>
	if (save.count) {
   143a4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   143a6:	b182      	cbz	r2, 143ca <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   143a8:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   143aa:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   143ac:	a804      	add	r0, sp, #16
   143ae:	f7f6 feeb 	bl	b188 <settings_save_one>
	if (err) {
   143b2:	4604      	mov	r4, r0
   143b4:	b120      	cbz	r0, 143c0 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   143b6:	4602      	mov	r2, r0
   143b8:	2145      	movs	r1, #69	; 0x45
   143ba:	4807      	ldr	r0, [pc, #28]	; (143d8 <bt_gatt_store_ccc+0x70>)
   143bc:	f005 fad5 	bl	1996a <printk>
}
   143c0:	4620      	mov	r0, r4
   143c2:	b040      	add	sp, #256	; 0x100
   143c4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   143c6:	9400      	str	r4, [sp, #0]
   143c8:	e7e6      	b.n	14398 <bt_gatt_store_ccc+0x30>
		str = NULL;
   143ca:	4611      	mov	r1, r2
   143cc:	e7ee      	b.n	143ac <bt_gatt_store_ccc+0x44>
   143ce:	bf00      	nop
   143d0:	00012b2d 	.word	0x00012b2d
   143d4:	00020d58 	.word	0x00020d58
   143d8:	00020e30 	.word	0x00020e30

000143dc <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   143dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143e0:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   143e2:	4603      	mov	r3, r0
   143e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   143e8:	2001      	movs	r0, #1
{
   143ea:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   143ec:	4a52      	ldr	r2, [pc, #328]	; (14538 <bt_gatt_disconnected+0x15c>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   143ee:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   143f2:	f007 feb3 	bl	1c15c <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   143f6:	4629      	mov	r1, r5
   143f8:	7a20      	ldrb	r0, [r4, #8]
   143fa:	f006 febd 	bl	1b178 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   143fe:	b378      	cbz	r0, 14460 <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   14400:	4629      	mov	r1, r5
   14402:	7a20      	ldrb	r0, [r4, #8]
   14404:	f7ff ffb0 	bl	14368 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   14408:	4620      	mov	r0, r4
   1440a:	f7fe f8b1 	bl	12570 <find_cf_cfg>
	if (!cfg) {
   1440e:	4606      	mov	r6, r0
   14410:	2800      	cmp	r0, #0
   14412:	d05e      	beq.n	144d2 <bt_gatt_disconnected+0xf6>
		if (conn->id) {
   14414:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   14416:	3608      	adds	r6, #8
		if (conn->id) {
   14418:	2a00      	cmp	r2, #0
   1441a:	d05c      	beq.n	144d6 <bt_gatt_disconnected+0xfa>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1441c:	af02      	add	r7, sp, #8
   1441e:	2104      	movs	r1, #4
   14420:	4638      	mov	r0, r7
   14422:	f005 fa08 	bl	19836 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   14426:	462b      	mov	r3, r5
   14428:	9700      	str	r7, [sp, #0]
   1442a:	2124      	movs	r1, #36	; 0x24
   1442c:	4a43      	ldr	r2, [pc, #268]	; (1453c <bt_gatt_disconnected+0x160>)
   1442e:	a803      	add	r0, sp, #12
   14430:	f7f9 fa9a 	bl	d968 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   14434:	7a23      	ldrb	r3, [r4, #8]
   14436:	2701      	movs	r7, #1
   14438:	b93b      	cbnz	r3, 1444a <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1443a:	2300      	movs	r3, #0
   1443c:	2124      	movs	r1, #36	; 0x24
   1443e:	9300      	str	r3, [sp, #0]
   14440:	4a3e      	ldr	r2, [pc, #248]	; (1453c <bt_gatt_disconnected+0x160>)
   14442:	462b      	mov	r3, r5
   14444:	a803      	add	r0, sp, #12
   14446:	f7f9 fa8f 	bl	d968 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1444a:	463a      	mov	r2, r7
   1444c:	4631      	mov	r1, r6
   1444e:	a803      	add	r0, sp, #12
   14450:	f7f6 fe9a 	bl	b188 <settings_save_one>
	if (err) {
   14454:	4602      	mov	r2, r0
   14456:	b118      	cbz	r0, 14460 <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
   14458:	2145      	movs	r1, #69	; 0x45
   1445a:	4839      	ldr	r0, [pc, #228]	; (14540 <bt_gatt_disconnected+0x164>)
   1445c:	f005 fa85 	bl	1996a <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14460:	4629      	mov	r1, r5
   14462:	7a20      	ldrb	r0, [r4, #8]
   14464:	f006 fe88 	bl	1b178 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   14468:	b150      	cbz	r0, 14480 <bt_gatt_disconnected+0xa4>
		struct addr_with_id addr_with_id = {
   1446a:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1446c:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   14470:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   14474:	2001      	movs	r0, #1
   14476:	4a33      	ldr	r2, [pc, #204]	; (14544 <bt_gatt_disconnected+0x168>)
   14478:	ab03      	add	r3, sp, #12
		struct addr_with_id addr_with_id = {
   1447a:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1447c:	f007 fe6e 	bl	1c15c <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   14480:	4620      	mov	r0, r4
   14482:	f7fe f8b3 	bl	125ec <gatt_sub_find>
	if (!sub) {
   14486:	4607      	mov	r7, r0
   14488:	b3b0      	cbz	r0, 144f8 <bt_gatt_disconnected+0x11c>
	return list->head;
   1448a:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1448c:	b3a3      	cbz	r3, 144f8 <bt_gatt_disconnected+0x11c>
   1448e:	f1b3 0b14 	subs.w	fp, r3, #20
   14492:	d031      	beq.n	144f8 <bt_gatt_disconnected+0x11c>
	return node->next;
   14494:	681e      	ldr	r6, [r3, #0]
   14496:	b106      	cbz	r6, 1449a <bt_gatt_disconnected+0xbe>
   14498:	3e14      	subs	r6, #20
   1449a:	f04f 0800 	mov.w	r8, #0
			params->value = 0U;
   1449e:	46c2      	mov	sl, r8
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   144a0:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   144a4:	4629      	mov	r1, r5
   144a6:	7a20      	ldrb	r0, [r4, #8]
   144a8:	f006 fe66 	bl	1b178 <bt_addr_le_is_bonded>
   144ac:	b9a8      	cbnz	r0, 144da <bt_gatt_disconnected+0xfe>
			gatt_sub_remove(conn, sub, prev, params);
   144ae:	465b      	mov	r3, fp
   144b0:	4642      	mov	r2, r8
   144b2:	4639      	mov	r1, r7
   144b4:	4620      	mov	r0, r4
			params->value = 0U;
   144b6:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   144ba:	f007 fcb0 	bl	1be1e <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   144be:	b1de      	cbz	r6, 144f8 <bt_gatt_disconnected+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   144c0:	f116 0214 	adds.w	r2, r6, #20
   144c4:	d002      	beq.n	144cc <bt_gatt_disconnected+0xf0>
	return node->next;
   144c6:	6972      	ldr	r2, [r6, #20]
   144c8:	b102      	cbz	r2, 144cc <bt_gatt_disconnected+0xf0>
   144ca:	3a14      	subs	r2, #20
   144cc:	46b3      	mov	fp, r6
   144ce:	4616      	mov	r6, r2
   144d0:	e7e8      	b.n	144a4 <bt_gatt_disconnected+0xc8>
		len = 0;
   144d2:	4607      	mov	r7, r0
   144d4:	e7b1      	b.n	1443a <bt_gatt_disconnected+0x5e>
   144d6:	2701      	movs	r7, #1
   144d8:	e7af      	b.n	1443a <bt_gatt_disconnected+0x5e>
   144da:	f10b 0010 	add.w	r0, fp, #16
   144de:	f007 fc76 	bl	1bdce <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   144e2:	07c3      	lsls	r3, r0, #31
   144e4:	d4e3      	bmi.n	144ae <bt_gatt_disconnected+0xd2>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   144e6:	787b      	ldrb	r3, [r7, #1]
   144e8:	b11b      	cbz	r3, 144f2 <bt_gatt_disconnected+0x116>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   144ea:	4629      	mov	r1, r5
   144ec:	4648      	mov	r0, r9
   144ee:	f007 fc52 	bl	1bd96 <bt_addr_le_copy>
			prev = &params->node;
   144f2:	f10b 0814 	add.w	r8, fp, #20
   144f6:	e7e2      	b.n	144be <bt_gatt_disconnected+0xe2>
	cfg = find_cf_cfg(conn);
   144f8:	4620      	mov	r0, r4
   144fa:	f7fe f839 	bl	12570 <find_cf_cfg>
	if (!cfg) {
   144fe:	4606      	mov	r6, r0
   14500:	b1b8      	cbz	r0, 14532 <bt_gatt_disconnected+0x156>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14502:	4629      	mov	r1, r5
   14504:	7a20      	ldrb	r0, [r4, #8]
   14506:	f006 fe37 	bl	1b178 <bt_addr_le_is_bonded>
   1450a:	b928      	cbnz	r0, 14518 <bt_gatt_disconnected+0x13c>
		clear_cf_cfg(cfg);
   1450c:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1450e:	b00d      	add	sp, #52	; 0x34
   14510:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   14514:	f007 bc6a 	b.w	1bdec <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   14518:	1c70      	adds	r0, r6, #1
   1451a:	4629      	mov	r1, r5
   1451c:	f007 fc3b 	bl	1bd96 <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14520:	360c      	adds	r6, #12
   14522:	e8d6 3fef 	ldaex	r3, [r6]
   14526:	f023 0302 	bic.w	r3, r3, #2
   1452a:	e8c6 3fe2 	stlex	r2, r3, [r6]
   1452e:	2a00      	cmp	r2, #0
   14530:	d1f7      	bne.n	14522 <bt_gatt_disconnected+0x146>
}
   14532:	b00d      	add	sp, #52	; 0x34
   14534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14538:	00012dc5 	.word	0x00012dc5
   1453c:	00020e84 	.word	0x00020e84
   14540:	00020e53 	.word	0x00020e53
   14544:	00012a79 	.word	0x00012a79

00014548 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   14548:	b570      	push	{r4, r5, r6, lr}
   1454a:	4602      	mov	r2, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1454c:	2400      	movs	r4, #0
   1454e:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   14550:	4b09      	ldr	r3, [pc, #36]	; (14578 <bt_smp_accept+0x30>)
   14552:	fb06 f504 	mul.w	r5, r6, r4
   14556:	58e8      	ldr	r0, [r5, r3]
   14558:	b148      	cbz	r0, 1456e <bt_smp_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1455a:	3401      	adds	r4, #1
   1455c:	2c0a      	cmp	r4, #10
   1455e:	d1f8      	bne.n	14552 <bt_smp_accept+0xa>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   14560:	4806      	ldr	r0, [pc, #24]	; (1457c <bt_smp_accept+0x34>)
   14562:	2145      	movs	r1, #69	; 0x45
   14564:	f005 fa01 	bl	1996a <printk>
   14568:	f06f 000b 	mvn.w	r0, #11
   1456c:	e003      	b.n	14576 <bt_smp_accept+0x2e>
		smp->chan.ops = &ops;
   1456e:	4a04      	ldr	r2, [pc, #16]	; (14580 <bt_smp_accept+0x38>)
   14570:	442b      	add	r3, r5
   14572:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   14574:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   14576:	bd70      	pop	{r4, r5, r6, pc}
   14578:	20009ae0 	.word	0x20009ae0
   1457c:	00020e95 	.word	0x00020e95
   14580:	0001df7c 	.word	0x0001df7c

00014584 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   14584:	222c      	movs	r2, #44	; 0x2c
   14586:	4b02      	ldr	r3, [pc, #8]	; (14590 <net_buf_pool_get+0xc>)
   14588:	fb02 3000 	mla	r0, r2, r0, r3
   1458c:	4770      	bx	lr
   1458e:	bf00      	nop
   14590:	200086b0 	.word	0x200086b0

00014594 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   14594:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14596:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   14598:	4b04      	ldr	r3, [pc, #16]	; (145ac <net_buf_id+0x18>)
   1459a:	fb01 3302 	mla	r3, r1, r2, r3
   1459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   145a0:	1ac0      	subs	r0, r0, r3
}
   145a2:	4b03      	ldr	r3, [pc, #12]	; (145b0 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   145a4:	10c0      	asrs	r0, r0, #3
}
   145a6:	4358      	muls	r0, r3
   145a8:	4770      	bx	lr
   145aa:	bf00      	nop
   145ac:	200086b0 	.word	0x200086b0
   145b0:	aaaaaaab 	.word	0xaaaaaaab

000145b4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   145b4:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   145b6:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   145b8:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   145ba:	4b09      	ldr	r3, [pc, #36]	; (145e0 <fixed_data_alloc+0x2c>)
   145bc:	fb04 3302 	mla	r3, r4, r2, r3
   145c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   145c2:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   145c4:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   145c6:	6823      	ldr	r3, [r4, #0]
   145c8:	429a      	cmp	r2, r3
   145ca:	bf94      	ite	ls
   145cc:	600a      	strls	r2, [r1, #0]
   145ce:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   145d0:	f7ff ffe0 	bl	14594 <net_buf_id>
   145d4:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   145d8:	fb02 3000 	mla	r0, r2, r0, r3
   145dc:	bd10      	pop	{r4, pc}
   145de:	bf00      	nop
   145e0:	200086b0 	.word	0x200086b0

000145e4 <net_buf_reset>:
{
   145e4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   145e6:	7943      	ldrb	r3, [r0, #5]
{
   145e8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   145ea:	b143      	cbz	r3, 145fe <net_buf_reset+0x1a>
   145ec:	490c      	ldr	r1, [pc, #48]	; (14620 <net_buf_reset+0x3c>)
   145ee:	480d      	ldr	r0, [pc, #52]	; (14624 <net_buf_reset+0x40>)
   145f0:	224f      	movs	r2, #79	; 0x4f
   145f2:	f005 f9ba 	bl	1996a <printk>
   145f6:	214f      	movs	r1, #79	; 0x4f
   145f8:	4809      	ldr	r0, [pc, #36]	; (14620 <net_buf_reset+0x3c>)
   145fa:	f005 fc5c 	bl	19eb6 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   145fe:	6823      	ldr	r3, [r4, #0]
   14600:	b143      	cbz	r3, 14614 <net_buf_reset+0x30>
   14602:	4907      	ldr	r1, [pc, #28]	; (14620 <net_buf_reset+0x3c>)
   14604:	4807      	ldr	r0, [pc, #28]	; (14624 <net_buf_reset+0x40>)
   14606:	2250      	movs	r2, #80	; 0x50
   14608:	f005 f9af 	bl	1996a <printk>
   1460c:	2150      	movs	r1, #80	; 0x50
   1460e:	4804      	ldr	r0, [pc, #16]	; (14620 <net_buf_reset+0x3c>)
   14610:	f005 fc51 	bl	19eb6 <assert_post_action>
	buf->len  = 0U;
   14614:	2300      	movs	r3, #0
   14616:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   14618:	6923      	ldr	r3, [r4, #16]
   1461a:	60a3      	str	r3, [r4, #8]
}
   1461c:	bd10      	pop	{r4, pc}
   1461e:	bf00      	nop
   14620:	00020ec6 	.word	0x00020ec6
   14624:	0001ea60 	.word	0x0001ea60

00014628 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   14628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1462c:	4605      	mov	r5, r0
   1462e:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   14630:	4610      	mov	r0, r2
   14632:	4619      	mov	r1, r3
{
   14634:	4691      	mov	r9, r2
   14636:	4698      	mov	r8, r3
   14638:	4617      	mov	r7, r2
   1463a:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1463c:	f008 fde8 	bl	1d210 <z_timeout_end_calc>
   14640:	4682      	mov	sl, r0
   14642:	468b      	mov	fp, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   14644:	b945      	cbnz	r5, 14658 <net_buf_alloc_len+0x30>
   14646:	494a      	ldr	r1, [pc, #296]	; (14770 <net_buf_alloc_len+0x148>)
   14648:	484a      	ldr	r0, [pc, #296]	; (14774 <net_buf_alloc_len+0x14c>)
   1464a:	22ed      	movs	r2, #237	; 0xed
   1464c:	f005 f98d 	bl	1996a <printk>
   14650:	21ed      	movs	r1, #237	; 0xed
   14652:	4847      	ldr	r0, [pc, #284]	; (14770 <net_buf_alloc_len+0x148>)
   14654:	f005 fc2f 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   14658:	f04f 0320 	mov.w	r3, #32
   1465c:	f3ef 8111 	mrs	r1, BASEPRI
   14660:	f383 8811 	msr	BASEPRI, r3
   14664:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   14668:	8beb      	ldrh	r3, [r5, #30]
   1466a:	2b00      	cmp	r3, #0
   1466c:	d055      	beq.n	1471a <net_buf_alloc_len+0xf2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1466e:	8baa      	ldrh	r2, [r5, #28]
   14670:	429a      	cmp	r2, r3
   14672:	d93e      	bls.n	146f2 <net_buf_alloc_len+0xca>
   14674:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   14676:	2200      	movs	r2, #0
   14678:	2300      	movs	r3, #0
   1467a:	4628      	mov	r0, r5
   1467c:	f002 ff34 	bl	174e8 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   14680:	9900      	ldr	r1, [sp, #0]
   14682:	4604      	mov	r4, r0
   14684:	2800      	cmp	r0, #0
   14686:	d034      	beq.n	146f2 <net_buf_alloc_len+0xca>
	__asm__ volatile(
   14688:	f381 8811 	msr	BASEPRI, r1
   1468c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   14690:	9d01      	ldr	r5, [sp, #4]
   14692:	2d00      	cmp	r5, #0
   14694:	d069      	beq.n	1476a <net_buf_alloc_len+0x142>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   14696:	ea58 0309 	orrs.w	r3, r8, r9
   1469a:	d00f      	beq.n	146bc <net_buf_alloc_len+0x94>
   1469c:	f1b8 3fff 	cmp.w	r8, #4294967295
   146a0:	bf08      	it	eq
   146a2:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   146a6:	d009      	beq.n	146bc <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   146a8:	f004 fd08 	bl	190bc <z_tick_get>
   146ac:	ebba 0700 	subs.w	r7, sl, r0
   146b0:	eb6b 0601 	sbc.w	r6, fp, r1
   146b4:	2e00      	cmp	r6, #0
   146b6:	bfbc      	itt	lt
   146b8:	2700      	movlt	r7, #0
   146ba:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   146bc:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   146c0:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   146c2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 14778 <net_buf_alloc_len+0x150>
   146c6:	463a      	mov	r2, r7
   146c8:	fb09 8303 	mla	r3, r9, r3, r8
   146cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   146ce:	4620      	mov	r0, r4
   146d0:	681b      	ldr	r3, [r3, #0]
   146d2:	a901      	add	r1, sp, #4
   146d4:	f8d3 a000 	ldr.w	sl, [r3]
   146d8:	4633      	mov	r3, r6
   146da:	47d0      	blx	sl
   146dc:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   146de:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   146e0:	bb58      	cbnz	r0, 1473a <net_buf_alloc_len+0x112>
	k_lifo_put(&pool->free, buf);
   146e2:	79a0      	ldrb	r0, [r4, #6]
   146e4:	4621      	mov	r1, r4
   146e6:	fb00 8009 	mla	r0, r0, r9, r8
   146ea:	f008 fcc6 	bl	1d07a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   146ee:	4634      	mov	r4, r6
}
   146f0:	e01f      	b.n	14732 <net_buf_alloc_len+0x10a>
		uninit_count = pool->uninit_count--;
   146f2:	8beb      	ldrh	r3, [r5, #30]
   146f4:	1e5a      	subs	r2, r3, #1
   146f6:	83ea      	strh	r2, [r5, #30]
   146f8:	f381 8811 	msr	BASEPRI, r1
   146fc:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   14700:	2018      	movs	r0, #24
   14702:	8bac      	ldrh	r4, [r5, #28]
   14704:	1ae3      	subs	r3, r4, r3
   14706:	6aac      	ldr	r4, [r5, #40]	; 0x28
   14708:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1470c:	481a      	ldr	r0, [pc, #104]	; (14778 <net_buf_alloc_len+0x150>)
   1470e:	4b1b      	ldr	r3, [pc, #108]	; (1477c <net_buf_alloc_len+0x154>)
   14710:	1a2d      	subs	r5, r5, r0
   14712:	10ad      	asrs	r5, r5, #2
   14714:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   14716:	71a5      	strb	r5, [r4, #6]
		goto success;
   14718:	e7ba      	b.n	14690 <net_buf_alloc_len+0x68>
   1471a:	f381 8811 	msr	BASEPRI, r1
   1471e:	f3bf 8f6f 	isb	sy
   14722:	464a      	mov	r2, r9
   14724:	4643      	mov	r3, r8
   14726:	4628      	mov	r0, r5
   14728:	f002 fede 	bl	174e8 <z_impl_k_queue_get>
	if (!buf) {
   1472c:	4604      	mov	r4, r0
   1472e:	2800      	cmp	r0, #0
   14730:	d1ae      	bne.n	14690 <net_buf_alloc_len+0x68>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   14732:	4620      	mov	r0, r4
   14734:	b003      	add	sp, #12
   14736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1473a:	9b01      	ldr	r3, [sp, #4]
   1473c:	429d      	cmp	r5, r3
   1473e:	d90a      	bls.n	14756 <net_buf_alloc_len+0x12e>
   14740:	490b      	ldr	r1, [pc, #44]	; (14770 <net_buf_alloc_len+0x148>)
   14742:	480c      	ldr	r0, [pc, #48]	; (14774 <net_buf_alloc_len+0x14c>)
   14744:	f240 124d 	movw	r2, #333	; 0x14d
   14748:	f005 f90f 	bl	1996a <printk>
   1474c:	f240 114d 	movw	r1, #333	; 0x14d
   14750:	4807      	ldr	r0, [pc, #28]	; (14770 <net_buf_alloc_len+0x148>)
   14752:	f005 fbb0 	bl	19eb6 <assert_post_action>
	buf->frags = NULL;
   14756:	2300      	movs	r3, #0
   14758:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1475a:	2301      	movs	r3, #1
   1475c:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1475e:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   14760:	4620      	mov	r0, r4
	buf->size  = size;
   14762:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   14764:	f7ff ff3e 	bl	145e4 <net_buf_reset>
	return buf;
   14768:	e7e3      	b.n	14732 <net_buf_alloc_len+0x10a>
		buf->__buf = NULL;
   1476a:	6125      	str	r5, [r4, #16]
   1476c:	e7f3      	b.n	14756 <net_buf_alloc_len+0x12e>
   1476e:	bf00      	nop
   14770:	00020ec6 	.word	0x00020ec6
   14774:	0001ea60 	.word	0x0001ea60
   14778:	200086b0 	.word	0x200086b0
   1477c:	ba2e8ba3 	.word	0xba2e8ba3

00014780 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   14780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14784:	4606      	mov	r6, r0
   14786:	f002 feaf 	bl	174e8 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1478a:	4605      	mov	r5, r0
   1478c:	b140      	cbz	r0, 147a0 <net_buf_get+0x20>
   1478e:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   14790:	4f11      	ldr	r7, [pc, #68]	; (147d8 <net_buf_get+0x58>)
   14792:	f8df 8048 	ldr.w	r8, [pc, #72]	; 147dc <net_buf_get+0x5c>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   14796:	7963      	ldrb	r3, [r4, #5]
   14798:	f013 0301 	ands.w	r3, r3, #1
   1479c:	d103      	bne.n	147a6 <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1479e:	6023      	str	r3, [r4, #0]

	return buf;
}
   147a0:	4628      	mov	r0, r5
   147a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   147a6:	2200      	movs	r2, #0
   147a8:	2300      	movs	r3, #0
   147aa:	4630      	mov	r0, r6
   147ac:	f002 fe9c 	bl	174e8 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   147b0:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   147b2:	b950      	cbnz	r0, 147ca <net_buf_get+0x4a>
   147b4:	4639      	mov	r1, r7
   147b6:	4640      	mov	r0, r8
   147b8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   147bc:	f005 f8d5 	bl	1996a <printk>
   147c0:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   147c4:	4638      	mov	r0, r7
   147c6:	f005 fb76 	bl	19eb6 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   147ca:	7963      	ldrb	r3, [r4, #5]
   147cc:	f023 0301 	bic.w	r3, r3, #1
   147d0:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   147d2:	6824      	ldr	r4, [r4, #0]
   147d4:	e7df      	b.n	14796 <net_buf_get+0x16>
   147d6:	bf00      	nop
   147d8:	00020ec6 	.word	0x00020ec6
   147dc:	0001ea60 	.word	0x0001ea60

000147e0 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   147e0:	b538      	push	{r3, r4, r5, lr}
   147e2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   147e4:	4604      	mov	r4, r0
   147e6:	b950      	cbnz	r0, 147fe <net_buf_simple_reserve+0x1e>
   147e8:	490d      	ldr	r1, [pc, #52]	; (14820 <net_buf_simple_reserve+0x40>)
   147ea:	480e      	ldr	r0, [pc, #56]	; (14824 <net_buf_simple_reserve+0x44>)
   147ec:	f240 12bb 	movw	r2, #443	; 0x1bb
   147f0:	f005 f8bb 	bl	1996a <printk>
   147f4:	f240 11bb 	movw	r1, #443	; 0x1bb
   147f8:	4809      	ldr	r0, [pc, #36]	; (14820 <net_buf_simple_reserve+0x40>)
   147fa:	f005 fb5c 	bl	19eb6 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   147fe:	88a3      	ldrh	r3, [r4, #4]
   14800:	b153      	cbz	r3, 14818 <net_buf_simple_reserve+0x38>
   14802:	4907      	ldr	r1, [pc, #28]	; (14820 <net_buf_simple_reserve+0x40>)
   14804:	4807      	ldr	r0, [pc, #28]	; (14824 <net_buf_simple_reserve+0x44>)
   14806:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   1480a:	f005 f8ae 	bl	1996a <printk>
   1480e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   14812:	4803      	ldr	r0, [pc, #12]	; (14820 <net_buf_simple_reserve+0x40>)
   14814:	f005 fb4f 	bl	19eb6 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   14818:	68a3      	ldr	r3, [r4, #8]
   1481a:	442b      	add	r3, r5
   1481c:	6023      	str	r3, [r4, #0]
}
   1481e:	bd38      	pop	{r3, r4, r5, pc}
   14820:	00020ec6 	.word	0x00020ec6
   14824:	0001ea60 	.word	0x0001ea60

00014828 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   14828:	b538      	push	{r3, r4, r5, lr}
   1482a:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1482c:	4605      	mov	r5, r0
   1482e:	b950      	cbnz	r0, 14846 <net_buf_put+0x1e>
   14830:	4912      	ldr	r1, [pc, #72]	; (1487c <net_buf_put+0x54>)
   14832:	4813      	ldr	r0, [pc, #76]	; (14880 <net_buf_put+0x58>)
   14834:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   14838:	f005 f897 	bl	1996a <printk>
   1483c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   14840:	480e      	ldr	r0, [pc, #56]	; (1487c <net_buf_put+0x54>)
   14842:	f005 fb38 	bl	19eb6 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   14846:	b954      	cbnz	r4, 1485e <net_buf_put+0x36>
   14848:	490c      	ldr	r1, [pc, #48]	; (1487c <net_buf_put+0x54>)
   1484a:	480d      	ldr	r0, [pc, #52]	; (14880 <net_buf_put+0x58>)
   1484c:	f240 12f9 	movw	r2, #505	; 0x1f9
   14850:	f005 f88b 	bl	1996a <printk>
   14854:	f240 11f9 	movw	r1, #505	; 0x1f9
   14858:	4808      	ldr	r0, [pc, #32]	; (1487c <net_buf_put+0x54>)
   1485a:	f005 fb2c 	bl	19eb6 <assert_post_action>
{
   1485e:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   14860:	6811      	ldr	r1, [r2, #0]
   14862:	b929      	cbnz	r1, 14870 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   14864:	4621      	mov	r1, r4
   14866:	4628      	mov	r0, r5
}
   14868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1486c:	f002 bde8 	b.w	17440 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   14870:	7953      	ldrb	r3, [r2, #5]
   14872:	f043 0301 	orr.w	r3, r3, #1
   14876:	7153      	strb	r3, [r2, #5]
   14878:	460a      	mov	r2, r1
   1487a:	e7f1      	b.n	14860 <net_buf_put+0x38>
   1487c:	00020ec6 	.word	0x00020ec6
   14880:	0001ea60 	.word	0x0001ea60

00014884 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   14884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   14888:	4605      	mov	r5, r0
   1488a:	b328      	cbz	r0, 148d8 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1488c:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1488e:	f04f 082c 	mov.w	r8, #44	; 0x2c
   14892:	4e1b      	ldr	r6, [pc, #108]	; (14900 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   14894:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   14896:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   14898:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1489a:	3b01      	subs	r3, #1
   1489c:	b2db      	uxtb	r3, r3
   1489e:	7123      	strb	r3, [r4, #4]
   148a0:	b9c3      	cbnz	r3, 148d4 <net_buf_unref+0x50>
		if (buf->__buf) {
   148a2:	6921      	ldr	r1, [r4, #16]
   148a4:	b159      	cbz	r1, 148be <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   148a6:	7963      	ldrb	r3, [r4, #5]
   148a8:	079b      	lsls	r3, r3, #30
   148aa:	d407      	bmi.n	148bc <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   148ac:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   148ae:	4620      	mov	r0, r4
   148b0:	fb08 6303 	mla	r3, r8, r3, r6
   148b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   148b6:	681b      	ldr	r3, [r3, #0]
   148b8:	689b      	ldr	r3, [r3, #8]
   148ba:	4798      	blx	r3
			buf->__buf = NULL;
   148bc:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   148be:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   148c0:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   148c2:	fb08 6300 	mla	r3, r8, r0, r6
   148c6:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   148c8:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   148ca:	b193      	cbz	r3, 148f2 <net_buf_unref+0x6e>
			pool->destroy(buf);
   148cc:	4620      	mov	r0, r4
   148ce:	4798      	blx	r3
	while (buf) {
   148d0:	2d00      	cmp	r5, #0
   148d2:	d1df      	bne.n	14894 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   148d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   148d8:	490a      	ldr	r1, [pc, #40]	; (14904 <net_buf_unref+0x80>)
   148da:	480b      	ldr	r0, [pc, #44]	; (14908 <net_buf_unref+0x84>)
   148dc:	f44f 7202 	mov.w	r2, #520	; 0x208
   148e0:	f005 f843 	bl	1996a <printk>
}
   148e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   148e8:	f44f 7102 	mov.w	r1, #520	; 0x208
   148ec:	4805      	ldr	r0, [pc, #20]	; (14904 <net_buf_unref+0x80>)
   148ee:	f005 bae2 	b.w	19eb6 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   148f2:	4621      	mov	r1, r4
   148f4:	fb00 6008 	mla	r0, r0, r8, r6
   148f8:	f008 fbbf 	bl	1d07a <k_queue_prepend>
}
   148fc:	e7e8      	b.n	148d0 <net_buf_unref+0x4c>
   148fe:	bf00      	nop
   14900:	200086b0 	.word	0x200086b0
   14904:	00020ec6 	.word	0x00020ec6
   14908:	0001ea60 	.word	0x0001ea60

0001490c <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1490c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1490e:	4604      	mov	r4, r0
   14910:	b950      	cbnz	r0, 14928 <net_buf_ref+0x1c>
   14912:	4908      	ldr	r1, [pc, #32]	; (14934 <net_buf_ref+0x28>)
   14914:	4808      	ldr	r0, [pc, #32]	; (14938 <net_buf_ref+0x2c>)
   14916:	f240 2237 	movw	r2, #567	; 0x237
   1491a:	f005 f826 	bl	1996a <printk>
   1491e:	f240 2137 	movw	r1, #567	; 0x237
   14922:	4804      	ldr	r0, [pc, #16]	; (14934 <net_buf_ref+0x28>)
   14924:	f005 fac7 	bl	19eb6 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   14928:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   1492a:	4620      	mov	r0, r4
	buf->ref++;
   1492c:	3301      	adds	r3, #1
   1492e:	7123      	strb	r3, [r4, #4]
}
   14930:	bd10      	pop	{r4, pc}
   14932:	bf00      	nop
   14934:	00020ec6 	.word	0x00020ec6
   14938:	0001ea60 	.word	0x0001ea60

0001493c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1493c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1493e:	4604      	mov	r4, r0
   14940:	b950      	cbnz	r0, 14958 <net_buf_frag_last+0x1c>
   14942:	4908      	ldr	r1, [pc, #32]	; (14964 <net_buf_frag_last+0x28>)
   14944:	4808      	ldr	r0, [pc, #32]	; (14968 <net_buf_frag_last+0x2c>)
   14946:	f44f 721d 	mov.w	r2, #628	; 0x274
   1494a:	f005 f80e 	bl	1996a <printk>
   1494e:	f44f 711d 	mov.w	r1, #628	; 0x274
   14952:	4804      	ldr	r0, [pc, #16]	; (14964 <net_buf_frag_last+0x28>)
   14954:	f005 faaf 	bl	19eb6 <assert_post_action>

	while (buf->frags) {
   14958:	4620      	mov	r0, r4
   1495a:	6824      	ldr	r4, [r4, #0]
   1495c:	2c00      	cmp	r4, #0
   1495e:	d1fb      	bne.n	14958 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   14960:	bd10      	pop	{r4, pc}
   14962:	bf00      	nop
   14964:	00020ec6 	.word	0x00020ec6
   14968:	0001ea60 	.word	0x0001ea60

0001496c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1496c:	b538      	push	{r3, r4, r5, lr}
   1496e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   14970:	4604      	mov	r4, r0
   14972:	b950      	cbnz	r0, 1498a <net_buf_frag_insert+0x1e>
   14974:	490f      	ldr	r1, [pc, #60]	; (149b4 <net_buf_frag_insert+0x48>)
   14976:	4810      	ldr	r0, [pc, #64]	; (149b8 <net_buf_frag_insert+0x4c>)
   14978:	f240 227f 	movw	r2, #639	; 0x27f
   1497c:	f004 fff5 	bl	1996a <printk>
   14980:	f240 217f 	movw	r1, #639	; 0x27f
   14984:	480b      	ldr	r0, [pc, #44]	; (149b4 <net_buf_frag_insert+0x48>)
   14986:	f005 fa96 	bl	19eb6 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   1498a:	b955      	cbnz	r5, 149a2 <net_buf_frag_insert+0x36>
   1498c:	4909      	ldr	r1, [pc, #36]	; (149b4 <net_buf_frag_insert+0x48>)
   1498e:	480a      	ldr	r0, [pc, #40]	; (149b8 <net_buf_frag_insert+0x4c>)
   14990:	f44f 7220 	mov.w	r2, #640	; 0x280
   14994:	f004 ffe9 	bl	1996a <printk>
   14998:	f44f 7120 	mov.w	r1, #640	; 0x280
   1499c:	4805      	ldr	r0, [pc, #20]	; (149b4 <net_buf_frag_insert+0x48>)
   1499e:	f005 fa8a 	bl	19eb6 <assert_post_action>

	if (parent->frags) {
   149a2:	6823      	ldr	r3, [r4, #0]
   149a4:	b123      	cbz	r3, 149b0 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   149a6:	4628      	mov	r0, r5
   149a8:	f7ff ffc8 	bl	1493c <net_buf_frag_last>
   149ac:	6823      	ldr	r3, [r4, #0]
   149ae:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   149b0:	6025      	str	r5, [r4, #0]
}
   149b2:	bd38      	pop	{r3, r4, r5, pc}
   149b4:	00020ec6 	.word	0x00020ec6
   149b8:	0001ea60 	.word	0x0001ea60

000149bc <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   149bc:	b538      	push	{r3, r4, r5, lr}
   149be:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   149c0:	460d      	mov	r5, r1
   149c2:	b951      	cbnz	r1, 149da <net_buf_frag_add+0x1e>
   149c4:	490c      	ldr	r1, [pc, #48]	; (149f8 <net_buf_frag_add+0x3c>)
   149c6:	480d      	ldr	r0, [pc, #52]	; (149fc <net_buf_frag_add+0x40>)
   149c8:	f240 228b 	movw	r2, #651	; 0x28b
   149cc:	f004 ffcd 	bl	1996a <printk>
   149d0:	f240 218b 	movw	r1, #651	; 0x28b
   149d4:	4808      	ldr	r0, [pc, #32]	; (149f8 <net_buf_frag_add+0x3c>)
   149d6:	f005 fa6e 	bl	19eb6 <assert_post_action>

	if (!head) {
   149da:	b924      	cbnz	r4, 149e6 <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   149dc:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   149de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   149e2:	f7ff bf93 	b.w	1490c <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   149e6:	4620      	mov	r0, r4
   149e8:	f7ff ffa8 	bl	1493c <net_buf_frag_last>
   149ec:	4629      	mov	r1, r5
   149ee:	f7ff ffbd 	bl	1496c <net_buf_frag_insert>
}
   149f2:	4620      	mov	r0, r4
   149f4:	bd38      	pop	{r3, r4, r5, pc}
   149f6:	bf00      	nop
   149f8:	00020ec6 	.word	0x00020ec6
   149fc:	0001ea60 	.word	0x0001ea60

00014a00 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   14a00:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   14a02:	6882      	ldr	r2, [r0, #8]
   14a04:	6803      	ldr	r3, [r0, #0]
{
   14a06:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   14a08:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   14a0a:	4299      	cmp	r1, r3
{
   14a0c:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   14a0e:	d90a      	bls.n	14a26 <net_buf_simple_push+0x26>
   14a10:	4908      	ldr	r1, [pc, #32]	; (14a34 <net_buf_simple_push+0x34>)
   14a12:	4809      	ldr	r0, [pc, #36]	; (14a38 <net_buf_simple_push+0x38>)
   14a14:	f240 4204 	movw	r2, #1028	; 0x404
   14a18:	f004 ffa7 	bl	1996a <printk>
   14a1c:	f240 4104 	movw	r1, #1028	; 0x404
   14a20:	4804      	ldr	r0, [pc, #16]	; (14a34 <net_buf_simple_push+0x34>)
   14a22:	f005 fa48 	bl	19eb6 <assert_post_action>
	buf->data -= len;
   14a26:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   14a28:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   14a2a:	1b40      	subs	r0, r0, r5
	buf->len += len;
   14a2c:	440d      	add	r5, r1
	buf->data -= len;
   14a2e:	6020      	str	r0, [r4, #0]
	buf->len += len;
   14a30:	80a5      	strh	r5, [r4, #4]
}
   14a32:	bd38      	pop	{r3, r4, r5, pc}
   14a34:	00020ec6 	.word	0x00020ec6
   14a38:	0001ea60 	.word	0x0001ea60

00014a3c <net_buf_simple_pull>:
{
   14a3c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   14a3e:	8883      	ldrh	r3, [r0, #4]
{
   14a40:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   14a42:	428b      	cmp	r3, r1
{
   14a44:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   14a46:	d20a      	bcs.n	14a5e <net_buf_simple_pull+0x22>
   14a48:	4908      	ldr	r1, [pc, #32]	; (14a6c <net_buf_simple_pull+0x30>)
   14a4a:	4809      	ldr	r0, [pc, #36]	; (14a70 <net_buf_simple_pull+0x34>)
   14a4c:	f240 4264 	movw	r2, #1124	; 0x464
   14a50:	f004 ff8b 	bl	1996a <printk>
   14a54:	f240 4164 	movw	r1, #1124	; 0x464
   14a58:	4804      	ldr	r0, [pc, #16]	; (14a6c <net_buf_simple_pull+0x30>)
   14a5a:	f005 fa2c 	bl	19eb6 <assert_post_action>
	buf->len -= len;
   14a5e:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   14a60:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   14a62:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   14a64:	4428      	add	r0, r5
	buf->len -= len;
   14a66:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   14a68:	6020      	str	r0, [r4, #0]
}
   14a6a:	bd38      	pop	{r3, r4, r5, pc}
   14a6c:	00020ec6 	.word	0x00020ec6
   14a70:	0001ea60 	.word	0x0001ea60

00014a74 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   14a74:	8883      	ldrh	r3, [r0, #4]
{
   14a76:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   14a78:	428b      	cmp	r3, r1
{
   14a7a:	4604      	mov	r4, r0
   14a7c:	460d      	mov	r5, r1
	void *data = buf->data;
   14a7e:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   14a80:	d20a      	bcs.n	14a98 <net_buf_simple_pull_mem+0x24>
   14a82:	4909      	ldr	r1, [pc, #36]	; (14aa8 <net_buf_simple_pull_mem+0x34>)
   14a84:	4809      	ldr	r0, [pc, #36]	; (14aac <net_buf_simple_pull_mem+0x38>)
   14a86:	f44f 628e 	mov.w	r2, #1136	; 0x470
   14a8a:	f004 ff6e 	bl	1996a <printk>
   14a8e:	f44f 618e 	mov.w	r1, #1136	; 0x470
   14a92:	4805      	ldr	r0, [pc, #20]	; (14aa8 <net_buf_simple_pull_mem+0x34>)
   14a94:	f005 fa0f 	bl	19eb6 <assert_post_action>
	buf->len -= len;
   14a98:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   14a9a:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   14a9c:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   14a9e:	4429      	add	r1, r5
}
   14aa0:	4630      	mov	r0, r6
	buf->len -= len;
   14aa2:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   14aa4:	6021      	str	r1, [r4, #0]
}
   14aa6:	bd70      	pop	{r4, r5, r6, pc}
   14aa8:	00020ec6 	.word	0x00020ec6
   14aac:	0001ea60 	.word	0x0001ea60

00014ab0 <net_buf_simple_add>:
{
   14ab0:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   14ab2:	6803      	ldr	r3, [r0, #0]
   14ab4:	8886      	ldrh	r6, [r0, #4]
   14ab6:	4604      	mov	r4, r0
   14ab8:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   14aba:	f007 fc90 	bl	1c3de <net_buf_simple_tailroom>
   14abe:	4288      	cmp	r0, r1
{
   14ac0:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   14ac2:	d20a      	bcs.n	14ada <net_buf_simple_add+0x2a>
   14ac4:	4907      	ldr	r1, [pc, #28]	; (14ae4 <net_buf_simple_add+0x34>)
   14ac6:	4808      	ldr	r0, [pc, #32]	; (14ae8 <net_buf_simple_add+0x38>)
   14ac8:	f240 3215 	movw	r2, #789	; 0x315
   14acc:	f004 ff4d 	bl	1996a <printk>
   14ad0:	f240 3115 	movw	r1, #789	; 0x315
   14ad4:	4803      	ldr	r0, [pc, #12]	; (14ae4 <net_buf_simple_add+0x34>)
   14ad6:	f005 f9ee 	bl	19eb6 <assert_post_action>
	buf->len += len;
   14ada:	88a1      	ldrh	r1, [r4, #4]
}
   14adc:	4630      	mov	r0, r6
	buf->len += len;
   14ade:	440d      	add	r5, r1
   14ae0:	80a5      	strh	r5, [r4, #4]
}
   14ae2:	bd70      	pop	{r4, r5, r6, pc}
   14ae4:	00020ec6 	.word	0x00020ec6
   14ae8:	0001ea60 	.word	0x0001ea60

00014aec <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   14aec:	b570      	push	{r4, r5, r6, lr}
   14aee:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   14af0:	460c      	mov	r4, r1
	return port->data;
   14af2:	68c5      	ldr	r5, [r0, #12]
   14af4:	b941      	cbnz	r1, 14b08 <gpio_nrfx_manage_callback+0x1c>
   14af6:	491e      	ldr	r1, [pc, #120]	; (14b70 <gpio_nrfx_manage_callback+0x84>)
   14af8:	481e      	ldr	r0, [pc, #120]	; (14b74 <gpio_nrfx_manage_callback+0x88>)
   14afa:	2224      	movs	r2, #36	; 0x24
   14afc:	f004 ff35 	bl	1996a <printk>
   14b00:	2124      	movs	r1, #36	; 0x24
   14b02:	481b      	ldr	r0, [pc, #108]	; (14b70 <gpio_nrfx_manage_callback+0x84>)
   14b04:	f005 f9d7 	bl	19eb6 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   14b08:	6863      	ldr	r3, [r4, #4]
   14b0a:	b943      	cbnz	r3, 14b1e <gpio_nrfx_manage_callback+0x32>
   14b0c:	4918      	ldr	r1, [pc, #96]	; (14b70 <gpio_nrfx_manage_callback+0x84>)
   14b0e:	4819      	ldr	r0, [pc, #100]	; (14b74 <gpio_nrfx_manage_callback+0x88>)
   14b10:	2225      	movs	r2, #37	; 0x25
   14b12:	f004 ff2a 	bl	1996a <printk>
   14b16:	2125      	movs	r1, #37	; 0x25
   14b18:	4815      	ldr	r0, [pc, #84]	; (14b70 <gpio_nrfx_manage_callback+0x84>)
   14b1a:	f005 f9cc 	bl	19eb6 <assert_post_action>
	return list->head;
   14b1e:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   14b20:	b15b      	cbz	r3, 14b3a <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14b22:	2200      	movs	r2, #0
   14b24:	429c      	cmp	r4, r3
   14b26:	d112      	bne.n	14b4e <gpio_nrfx_manage_callback+0x62>
	return node->next;
   14b28:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   14b2a:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   14b2c:	b952      	cbnz	r2, 14b44 <gpio_nrfx_manage_callback+0x58>
   14b2e:	42a1      	cmp	r1, r4
	list->head = node;
   14b30:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   14b32:	d100      	bne.n	14b36 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   14b34:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   14b36:	2300      	movs	r3, #0
   14b38:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   14b3a:	b96e      	cbnz	r6, 14b58 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   14b3c:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   14b3e:	bd70      	pop	{r4, r5, r6, pc}
   14b40:	460b      	mov	r3, r1
   14b42:	e7ef      	b.n	14b24 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   14b44:	42a1      	cmp	r1, r4
	parent->next = child;
   14b46:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14b48:	bf08      	it	eq
   14b4a:	60aa      	streq	r2, [r5, #8]
}
   14b4c:	e7f3      	b.n	14b36 <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   14b4e:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14b50:	461a      	mov	r2, r3
   14b52:	2900      	cmp	r1, #0
   14b54:	d1f4      	bne.n	14b40 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   14b56:	b13e      	cbz	r6, 14b68 <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   14b58:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   14b5a:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   14b5c:	6023      	str	r3, [r4, #0]
	list->head = node;
   14b5e:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   14b60:	2800      	cmp	r0, #0
   14b62:	d1eb      	bne.n	14b3c <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   14b64:	60ac      	str	r4, [r5, #8]
}
   14b66:	e7ea      	b.n	14b3e <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   14b68:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   14b6c:	e7e7      	b.n	14b3e <gpio_nrfx_manage_callback+0x52>
   14b6e:	bf00      	nop
   14b70:	00020ef2 	.word	0x00020ef2
   14b74:	0001ea60 	.word	0x0001ea60

00014b78 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14b78:	6802      	ldr	r2, [r0, #0]
{
   14b7a:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   14b7c:	0953      	lsrs	r3, r2, #5
{
   14b7e:	4604      	mov	r4, r0
    switch (port)
   14b80:	d029      	beq.n	14bd6 <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   14b82:	2b01      	cmp	r3, #1
   14b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14b88:	bf18      	it	ne
   14b8a:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   14b8c:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   14b90:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14b92:	07db      	lsls	r3, r3, #31
   14b94:	d40a      	bmi.n	14bac <nrf_gpio_pin_port_decode+0x34>
   14b96:	4912      	ldr	r1, [pc, #72]	; (14be0 <nrf_gpio_pin_port_decode+0x68>)
   14b98:	4812      	ldr	r0, [pc, #72]	; (14be4 <nrf_gpio_pin_port_decode+0x6c>)
   14b9a:	f240 221a 	movw	r2, #538	; 0x21a
   14b9e:	f004 fee4 	bl	1996a <printk>
   14ba2:	f240 211a 	movw	r1, #538	; 0x21a
   14ba6:	480e      	ldr	r0, [pc, #56]	; (14be0 <nrf_gpio_pin_port_decode+0x68>)
   14ba8:	f005 f985 	bl	19eb6 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   14bac:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   14bae:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14bb2:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   14bb4:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14bb6:	d00c      	beq.n	14bd2 <nrf_gpio_pin_port_decode+0x5a>
   14bb8:	2b01      	cmp	r3, #1
   14bba:	d00f      	beq.n	14bdc <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   14bbc:	4908      	ldr	r1, [pc, #32]	; (14be0 <nrf_gpio_pin_port_decode+0x68>)
   14bbe:	4809      	ldr	r0, [pc, #36]	; (14be4 <nrf_gpio_pin_port_decode+0x6c>)
   14bc0:	f240 221f 	movw	r2, #543	; 0x21f
   14bc4:	f004 fed1 	bl	1996a <printk>
   14bc8:	f240 211f 	movw	r1, #543	; 0x21f
   14bcc:	4804      	ldr	r0, [pc, #16]	; (14be0 <nrf_gpio_pin_port_decode+0x68>)
   14bce:	f005 f972 	bl	19eb6 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14bd2:	4805      	ldr	r0, [pc, #20]	; (14be8 <nrf_gpio_pin_port_decode+0x70>)
}
   14bd4:	bd10      	pop	{r4, pc}
    switch (port)
   14bd6:	f04f 33ff 	mov.w	r3, #4294967295
   14bda:	e7d7      	b.n	14b8c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   14bdc:	4803      	ldr	r0, [pc, #12]	; (14bec <nrf_gpio_pin_port_decode+0x74>)
   14bde:	e7f9      	b.n	14bd4 <nrf_gpio_pin_port_decode+0x5c>
   14be0:	00020f1f 	.word	0x00020f1f
   14be4:	0001ea60 	.word	0x0001ea60
   14be8:	40842500 	.word	0x40842500
   14bec:	40842800 	.word	0x40842800

00014bf0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   14bf0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   14bf2:	4b09      	ldr	r3, [pc, #36]	; (14c18 <gpio_nrfx_init+0x28>)
   14bf4:	781a      	ldrb	r2, [r3, #0]
   14bf6:	b96a      	cbnz	r2, 14c14 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   14bf8:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14bfa:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   14bfc:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14bfe:	2105      	movs	r1, #5
   14c00:	f7f8 f89c 	bl	cd3c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   14c04:	202f      	movs	r0, #47	; 0x2f
   14c06:	f7f8 f87b 	bl	cd00 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   14c0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14c0e:	4b03      	ldr	r3, [pc, #12]	; (14c1c <gpio_nrfx_init+0x2c>)
   14c10:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   14c14:	2000      	movs	r0, #0
   14c16:	bd08      	pop	{r3, pc}
   14c18:	2000c5e9 	.word	0x2000c5e9
   14c1c:	4002f000 	.word	0x4002f000

00014c20 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14c20:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   14c24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14c28:	4680      	mov	r8, r0
   14c2a:	460e      	mov	r6, r1
   14c2c:	4617      	mov	r7, r2
   14c2e:	4699      	mov	r9, r3
	return port->data;
   14c30:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   14c32:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14c36:	f040 80ab 	bne.w	14d90 <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   14c3a:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14c3c:	a801      	add	r0, sp, #4
   14c3e:	7a1b      	ldrb	r3, [r3, #8]
   14c40:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   14c44:	9301      	str	r3, [sp, #4]
   14c46:	f7ff ff97 	bl	14b78 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   14c4a:	9b01      	ldr	r3, [sp, #4]
   14c4c:	3380      	adds	r3, #128	; 0x80
   14c4e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14c52:	07d8      	lsls	r0, r3, #31
   14c54:	f100 80bb 	bmi.w	14dce <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14c58:	2101      	movs	r1, #1
   14c5a:	68e3      	ldr	r3, [r4, #12]
   14c5c:	40b1      	lsls	r1, r6
   14c5e:	4319      	orrs	r1, r3
   14c60:	60e1      	str	r1, [r4, #12]
   14c62:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14c64:	2000      	movs	r0, #0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   14c66:	6963      	ldr	r3, [r4, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14c68:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   14c6a:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   14c6e:	bf0c      	ite	eq
   14c70:	430b      	orreq	r3, r1
   14c72:	438b      	bicne	r3, r1
   14c74:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   14c76:	69a3      	ldr	r3, [r4, #24]
   14c78:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   14c7c:	bf0c      	ite	eq
   14c7e:	430b      	orreq	r3, r1
   14c80:	438b      	bicne	r3, r1
   14c82:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14c84:	6923      	ldr	r3, [r4, #16]
   14c86:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   14c8a:	bf0c      	ite	eq
   14c8c:	4319      	orreq	r1, r3
   14c8e:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14c92:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14c96:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14c98:	7a1b      	ldrb	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   14c9a:	4a4e      	ldr	r2, [pc, #312]	; (14dd4 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   14c9c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   14ca0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	return port->data;
   14ca4:	f8d8 700c 	ldr.w	r7, [r8, #12]
   14ca8:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14caa:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   14cae:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   14cb2:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   14cb6:	428d      	cmp	r5, r1
   14cb8:	d175      	bne.n	14da6 <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   14cba:	fa23 f100 	lsr.w	r1, r3, r0
   14cbe:	07c9      	lsls	r1, r1, #31
   14cc0:	d571      	bpl.n	14da6 <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   14cc2:	0083      	lsls	r3, r0, #2
   14cc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14cc8:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   14ccc:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   14cd0:	f021 0101 	bic.w	r1, r1, #1
   14cd4:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   14cd8:	2301      	movs	r3, #1
   14cda:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   14cdc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   14ce0:	b2c0      	uxtb	r0, r0
   14ce2:	f001 f9bf 	bl	16064 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   14ce6:	4628      	mov	r0, r5
   14ce8:	2100      	movs	r1, #0
   14cea:	f007 fbbc 	bl	1c466 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   14cee:	68f8      	ldr	r0, [r7, #12]
   14cf0:	40f0      	lsrs	r0, r6
   14cf2:	f010 0001 	ands.w	r0, r0, #1
   14cf6:	d048      	beq.n	14d8a <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   14cf8:	6978      	ldr	r0, [r7, #20]
   14cfa:	40f0      	lsrs	r0, r6
   14cfc:	f010 0401 	ands.w	r4, r0, #1
   14d00:	d059      	beq.n	14db6 <gpio_nrfx_pin_interrupt_configure+0x196>
			if (data->double_edge & BIT(pin)) {
   14d02:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   14d04:	a801      	add	r0, sp, #4
			if (data->double_edge & BIT(pin)) {
   14d06:	40f3      	lsrs	r3, r6
   14d08:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   14d0a:	bf57      	itett	pl
   14d0c:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   14d0e:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   14d10:	fa21 f606 	lsrpl.w	r6, r1, r6
   14d14:	f006 0601 	andpl.w	r6, r6, #1
   14d18:	bf5c      	itt	pl
   14d1a:	f1c6 0602 	rsbpl	r6, r6, #2
   14d1e:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   14d20:	f001 f9c0 	bl	160a4 <nrfx_gpiote_channel_alloc>
   14d24:	4b2c      	ldr	r3, [pc, #176]	; (14dd8 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
   14d26:	4298      	cmp	r0, r3
   14d28:	d142      	bne.n	14db0 <gpio_nrfx_pin_interrupt_configure+0x190>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14d2a:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   14d2c:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14d30:	022d      	lsls	r5, r5, #8
   14d32:	008b      	lsls	r3, r1, #2
   14d34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14d38:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14d3c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14d40:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14d44:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   14d48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   14d4c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14d50:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   14d54:	4315      	orrs	r5, r2
   14d56:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   14d5a:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   14d5e:	4b1f      	ldr	r3, [pc, #124]	; (14ddc <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   14d60:	008a      	lsls	r2, r1, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14d62:	5098      	str	r0, [r3, r2]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   14d64:	f89d 1004 	ldrb.w	r1, [sp, #4]
   14d68:	589b      	ldr	r3, [r3, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   14d6a:	008b      	lsls	r3, r1, #2
   14d6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14d70:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   14d74:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   14d78:	f042 0201 	orr.w	r2, r2, #1
   14d7c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   14d80:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   14d82:	4a14      	ldr	r2, [pc, #80]	; (14dd4 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   14d84:	408b      	lsls	r3, r1
   14d86:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   14d8a:	b003      	add	sp, #12
   14d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14d90:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   14d94:	f47f af60 	bne.w	14c58 <gpio_nrfx_pin_interrupt_configure+0x38>
   14d98:	2101      	movs	r1, #1
   14d9a:	fa01 f306 	lsl.w	r3, r1, r6
   14d9e:	68e1      	ldr	r1, [r4, #12]
   14da0:	ea21 0103 	bic.w	r1, r1, r3
   14da4:	e75c      	b.n	14c60 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14da6:	3001      	adds	r0, #1
   14da8:	2808      	cmp	r0, #8
   14daa:	f47f af7e 	bne.w	14caa <gpio_nrfx_pin_interrupt_configure+0x8a>
   14dae:	e79a      	b.n	14ce6 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   14db0:	f06f 0012 	mvn.w	r0, #18
   14db4:	e7e9      	b.n	14d8a <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14db6:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   14db8:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14dba:	40f1      	lsrs	r1, r6
   14dbc:	f001 0101 	and.w	r1, r1, #1
   14dc0:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   14dc4:	b2c9      	uxtb	r1, r1
   14dc6:	f007 fb4e 	bl	1c466 <nrf_gpio_cfg_sense_set>
	int res = 0;
   14dca:	4620      	mov	r0, r4
   14dcc:	e7dd      	b.n	14d8a <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   14dce:	f06f 0022 	mvn.w	r0, #34	; 0x22
   14dd2:	e7da      	b.n	14d8a <gpio_nrfx_pin_interrupt_configure+0x16a>
   14dd4:	4002f000 	.word	0x4002f000
   14dd8:	0bad0000 	.word	0x0bad0000
   14ddc:	4002f100 	.word	0x4002f100

00014de0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14de0:	4b2e      	ldr	r3, [pc, #184]	; (14e9c <gpio_nrfx_config+0xbc>)
{
   14de2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14de4:	4c2e      	ldr	r4, [pc, #184]	; (14ea0 <gpio_nrfx_config+0xc0>)
   14de6:	4013      	ands	r3, r2
   14de8:	42a3      	cmp	r3, r4
	return port->config;
   14dea:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14dec:	d044      	beq.n	14e78 <gpio_nrfx_config+0x98>
   14dee:	d80e      	bhi.n	14e0e <gpio_nrfx_config+0x2e>
   14df0:	2b06      	cmp	r3, #6
   14df2:	d043      	beq.n	14e7c <gpio_nrfx_config+0x9c>
   14df4:	d806      	bhi.n	14e04 <gpio_nrfx_config+0x24>
   14df6:	2b00      	cmp	r3, #0
   14df8:	d040      	beq.n	14e7c <gpio_nrfx_config+0x9c>
   14dfa:	2b02      	cmp	r3, #2
   14dfc:	d040      	beq.n	14e80 <gpio_nrfx_config+0xa0>
   14dfe:	f06f 0015 	mvn.w	r0, #21
   14e02:	e037      	b.n	14e74 <gpio_nrfx_config+0x94>
   14e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14e08:	d1f9      	bne.n	14dfe <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   14e0a:	2401      	movs	r4, #1
   14e0c:	e009      	b.n	14e22 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14e0e:	4c25      	ldr	r4, [pc, #148]	; (14ea4 <gpio_nrfx_config+0xc4>)
   14e10:	42a3      	cmp	r3, r4
   14e12:	d037      	beq.n	14e84 <gpio_nrfx_config+0xa4>
   14e14:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   14e18:	d036      	beq.n	14e88 <gpio_nrfx_config+0xa8>
   14e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   14e1e:	d1ee      	bne.n	14dfe <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   14e20:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   14e22:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   14e24:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   14e28:	bf4c      	ite	mi
   14e2a:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   14e2c:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   14e30:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   14e34:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   14e36:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   14e3a:	d507      	bpl.n	14e4c <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   14e3c:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14e3e:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   14e42:	d523      	bpl.n	14e8c <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   14e44:	2301      	movs	r3, #1
   14e46:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   14e48:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   14e4c:	7a03      	ldrb	r3, [r0, #8]
   14e4e:	f001 011f 	and.w	r1, r1, #31
   14e52:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14e56:	a801      	add	r0, sp, #4
   14e58:	9101      	str	r1, [sp, #4]
   14e5a:	f7ff fe8d 	bl	14b78 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14e5e:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   14e60:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   14e64:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   14e68:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14e6c:	3280      	adds	r2, #128	; 0x80
   14e6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   14e72:	2000      	movs	r0, #0
}
   14e74:	b003      	add	sp, #12
   14e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   14e78:	2407      	movs	r4, #7
   14e7a:	e7d2      	b.n	14e22 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14e7c:	461c      	mov	r4, r3
   14e7e:	e7d0      	b.n	14e22 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   14e80:	2404      	movs	r4, #4
   14e82:	e7ce      	b.n	14e22 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   14e84:	2405      	movs	r4, #5
   14e86:	e7cc      	b.n	14e22 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   14e88:	2403      	movs	r4, #3
   14e8a:	e7ca      	b.n	14e22 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   14e8c:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   14e8e:	bf42      	ittt	mi
   14e90:	2301      	movmi	r3, #1
   14e92:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   14e94:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   14e98:	e7d8      	b.n	14e4c <gpio_nrfx_config+0x6c>
   14e9a:	bf00      	nop
   14e9c:	00f00006 	.word	0x00f00006
   14ea0:	00100006 	.word	0x00100006
   14ea4:	00400002 	.word	0x00400002

00014ea8 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   14ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14eac:	460f      	mov	r7, r1
   14eae:	4616      	mov	r6, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14eb0:	4604      	mov	r4, r0
   14eb2:	b1e0      	cbz	r0, 14eee <gpio_fire_callbacks.isra.0+0x46>
	return node->next;
   14eb4:	6805      	ldr	r5, [r0, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   14eb6:	f8df 803c 	ldr.w	r8, [pc, #60]	; 14ef4 <gpio_fire_callbacks.isra.0+0x4c>
   14eba:	f8df 903c 	ldr.w	r9, [pc, #60]	; 14ef8 <gpio_fire_callbacks.isra.0+0x50>
		if (cb->pin_mask & pins) {
   14ebe:	68a3      	ldr	r3, [r4, #8]
   14ec0:	421e      	tst	r6, r3
   14ec2:	d010      	beq.n	14ee6 <gpio_fire_callbacks.isra.0+0x3e>
			__ASSERT(cb->handler, "No callback handler!");
   14ec4:	6863      	ldr	r3, [r4, #4]
   14ec6:	b943      	cbnz	r3, 14eda <gpio_fire_callbacks.isra.0+0x32>
   14ec8:	4641      	mov	r1, r8
   14eca:	4648      	mov	r0, r9
   14ecc:	2245      	movs	r2, #69	; 0x45
   14ece:	f004 fd4c 	bl	1996a <printk>
   14ed2:	2145      	movs	r1, #69	; 0x45
   14ed4:	4640      	mov	r0, r8
   14ed6:	f004 ffee 	bl	19eb6 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   14eda:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   14ede:	4621      	mov	r1, r4
   14ee0:	4638      	mov	r0, r7
   14ee2:	4032      	ands	r2, r6
   14ee4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14ee6:	b115      	cbz	r5, 14eee <gpio_fire_callbacks.isra.0+0x46>
   14ee8:	462c      	mov	r4, r5
   14eea:	682d      	ldr	r5, [r5, #0]
   14eec:	e7e7      	b.n	14ebe <gpio_fire_callbacks.isra.0+0x16>
		}
	}
}
   14eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14ef2:	bf00      	nop
   14ef4:	00020ef2 	.word	0x00020ef2
   14ef8:	0001ea60 	.word	0x0001ea60

00014efc <gpiote_event_handler>:
{
   14efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   14efe:	2600      	movs	r6, #0
   14f00:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14f04:	4d28      	ldr	r5, [pc, #160]	; (14fa8 <gpiote_event_handler+0xac>)
   14f06:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   14f0a:	b15c      	cbz	r4, 14f24 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   14f0c:	4827      	ldr	r0, [pc, #156]	; (14fac <gpiote_event_handler+0xb0>)
   14f0e:	f007 fae3 	bl	1c4d8 <check_level_trigger_pins>
		fired_triggers[0] =
   14f12:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   14f14:	4826      	ldr	r0, [pc, #152]	; (14fb0 <gpiote_event_handler+0xb4>)
   14f16:	f007 fadf 	bl	1c4d8 <check_level_trigger_pins>
		fired_triggers[1] =
   14f1a:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14f1c:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   14f20:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   14f24:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   14f26:	2601      	movs	r6, #1
   14f28:	4694      	mov	ip, r2
{
   14f2a:	4922      	ldr	r1, [pc, #136]	; (14fb4 <gpiote_event_handler+0xb8>)
    return p_reg->INTENSET & mask;
   14f2c:	4d1e      	ldr	r5, [pc, #120]	; (14fa8 <gpiote_event_handler+0xac>)
   14f2e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   14f32:	fa06 f002 	lsl.w	r0, r6, r2
   14f36:	4218      	tst	r0, r3
   14f38:	d016      	beq.n	14f68 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14f3a:	680b      	ldr	r3, [r1, #0]
   14f3c:	b1a3      	cbz	r3, 14f68 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14f3e:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   14f42:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   14f46:	af02      	add	r7, sp, #8
   14f48:	f3c3 3040 	ubfx	r0, r3, #13, #1
   14f4c:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   14f50:	f850 7c08 	ldr.w	r7, [r0, #-8]
   14f54:	f3c3 2304 	ubfx	r3, r3, #8, #5
   14f58:	fa06 f303 	lsl.w	r3, r6, r3
   14f5c:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14f5e:	f8c1 c000 	str.w	ip, [r1]
   14f62:	f840 3c08 	str.w	r3, [r0, #-8]
   14f66:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14f68:	3201      	adds	r2, #1
   14f6a:	2a08      	cmp	r2, #8
   14f6c:	f101 0104 	add.w	r1, r1, #4
   14f70:	d1dd      	bne.n	14f2e <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   14f72:	9a00      	ldr	r2, [sp, #0]
   14f74:	b122      	cbz	r2, 14f80 <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   14f76:	4b10      	ldr	r3, [pc, #64]	; (14fb8 <gpiote_event_handler+0xbc>)
   14f78:	490c      	ldr	r1, [pc, #48]	; (14fac <gpiote_event_handler+0xb0>)
   14f7a:	6858      	ldr	r0, [r3, #4]
   14f7c:	f7ff ff94 	bl	14ea8 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   14f80:	9a01      	ldr	r2, [sp, #4]
   14f82:	b122      	cbz	r2, 14f8e <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   14f84:	4b0d      	ldr	r3, [pc, #52]	; (14fbc <gpiote_event_handler+0xc0>)
   14f86:	490a      	ldr	r1, [pc, #40]	; (14fb0 <gpiote_event_handler+0xb4>)
   14f88:	6858      	ldr	r0, [r3, #4]
   14f8a:	f7ff ff8d 	bl	14ea8 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   14f8e:	b144      	cbz	r4, 14fa2 <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   14f90:	4806      	ldr	r0, [pc, #24]	; (14fac <gpiote_event_handler+0xb0>)
   14f92:	f007 fa7b 	bl	1c48c <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   14f96:	4806      	ldr	r0, [pc, #24]	; (14fb0 <gpiote_event_handler+0xb4>)
}
   14f98:	b003      	add	sp, #12
   14f9a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   14f9e:	f007 ba75 	b.w	1c48c <cfg_level_pins>
}
   14fa2:	b003      	add	sp, #12
   14fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14fa6:	bf00      	nop
   14fa8:	4002f000 	.word	0x4002f000
   14fac:	200085c8 	.word	0x200085c8
   14fb0:	200085d8 	.word	0x200085d8
   14fb4:	4002f100 	.word	0x4002f100
   14fb8:	2000abec 	.word	0x2000abec
   14fbc:	2000ac08 	.word	0x2000ac08

00014fc0 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   14fc0:	4b02      	ldr	r3, [pc, #8]	; (14fcc <vipm_nrf_1_register_callback+0xc>)
   14fc2:	6059      	str	r1, [r3, #4]
   14fc4:	645a      	str	r2, [r3, #68]	; 0x44
   14fc6:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   14fca:	4770      	bx	lr
   14fcc:	2000ac2c 	.word	0x2000ac2c

00014fd0 <vipm_nrf_0_set_enabled>:
   14fd0:	b508      	push	{r3, lr}
   14fd2:	2145      	movs	r1, #69	; 0x45
   14fd4:	4802      	ldr	r0, [pc, #8]	; (14fe0 <vipm_nrf_0_set_enabled+0x10>)
   14fd6:	f004 fcc8 	bl	1996a <printk>
   14fda:	f06f 0015 	mvn.w	r0, #21
   14fde:	bd08      	pop	{r3, pc}
   14fe0:	00020f60 	.word	0x00020f60

00014fe4 <vipm_nrf_0_register_callback>:
   14fe4:	2157      	movs	r1, #87	; 0x57
   14fe6:	4801      	ldr	r0, [pc, #4]	; (14fec <vipm_nrf_0_register_callback+0x8>)
   14fe8:	f004 bcbf 	b.w	1996a <printk>
   14fec:	00020f81 	.word	0x00020f81

00014ff0 <vipm_nrf_1_send>:
   14ff0:	b508      	push	{r3, lr}
   14ff2:	2145      	movs	r1, #69	; 0x45
   14ff4:	4802      	ldr	r0, [pc, #8]	; (15000 <vipm_nrf_1_send+0x10>)
   14ff6:	f004 fcb8 	bl	1996a <printk>
   14ffa:	f06f 0015 	mvn.w	r0, #21
   14ffe:	bd08      	pop	{r3, pc}
   15000:	00020fb8 	.word	0x00020fb8

00015004 <vipm_nrf_init>:
{
   15004:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
   15006:	4d0b      	ldr	r5, [pc, #44]	; (15034 <vipm_nrf_init+0x30>)
   15008:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
   1500c:	b97c      	cbnz	r4, 1502e <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
   1500e:	4a0a      	ldr	r2, [pc, #40]	; (15038 <vipm_nrf_init+0x34>)
   15010:	490a      	ldr	r1, [pc, #40]	; (1503c <vipm_nrf_init+0x38>)
   15012:	4620      	mov	r0, r4
   15014:	f001 f87e 	bl	16114 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
   15018:	4622      	mov	r2, r4
   1501a:	2101      	movs	r1, #1
   1501c:	202a      	movs	r0, #42	; 0x2a
   1501e:	f7f7 fe8d 	bl	cd3c <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
   15022:	4807      	ldr	r0, [pc, #28]	; (15040 <vipm_nrf_init+0x3c>)
   15024:	f001 f89c 	bl	16160 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
   15028:	2301      	movs	r3, #1
   1502a:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
   1502e:	2000      	movs	r0, #0
   15030:	bd38      	pop	{r3, r4, r5, pc}
   15032:	bf00      	nop
   15034:	2000ac2c 	.word	0x2000ac2c
   15038:	2000ac24 	.word	0x2000ac24
   1503c:	00015045 	.word	0x00015045
   15040:	0001dfe4 	.word	0x0001dfe4

00015044 <vipm_dispatcher>:
{
   15044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15048:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   1504a:	4f17      	ldr	r7, [pc, #92]	; (150a8 <vipm_dispatcher+0x64>)
   1504c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 150ac <vipm_dispatcher+0x68>
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   15050:	4e17      	ldr	r6, [pc, #92]	; (150b0 <vipm_dispatcher+0x6c>)
	while (event_mask) {
   15052:	b90d      	cbnz	r5, 15058 <vipm_dispatcher+0x14>
}
   15054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   15058:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   1505c:	b30c      	cbz	r4, 150a2 <vipm_dispatcher+0x5e>
  {
    return 32U;
  }
  return __builtin_clz(value);
   1505e:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   15062:	2b0f      	cmp	r3, #15
   15064:	461c      	mov	r4, r3
   15066:	dd08      	ble.n	1507a <vipm_dispatcher+0x36>
   15068:	4639      	mov	r1, r7
   1506a:	4640      	mov	r0, r8
   1506c:	2283      	movs	r2, #131	; 0x83
   1506e:	f004 fc7c 	bl	1996a <printk>
   15072:	2183      	movs	r1, #131	; 0x83
   15074:	4638      	mov	r0, r7
   15076:	f004 ff1e 	bl	19eb6 <assert_post_action>
		event_mask &= ~BIT(event_idx);
   1507a:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   1507c:	f856 9024 	ldr.w	r9, [r6, r4, lsl #2]
		event_mask &= ~BIT(event_idx);
   15080:	40a3      	lsls	r3, r4
   15082:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   15086:	f1b9 0f00 	cmp.w	r9, #0
   1508a:	d0e2      	beq.n	15052 <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
   1508c:	2300      	movs	r3, #0
   1508e:	f104 0110 	add.w	r1, r4, #16
   15092:	3420      	adds	r4, #32
   15094:	461a      	mov	r2, r3
   15096:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   1509a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1509e:	47c8      	blx	r9
   150a0:	e7d7      	b.n	15052 <vipm_dispatcher+0xe>
    return 32U;
   150a2:	2420      	movs	r4, #32
   150a4:	e7e0      	b.n	15068 <vipm_dispatcher+0x24>
   150a6:	bf00      	nop
   150a8:	00020fd9 	.word	0x00020fd9
   150ac:	0001ea60 	.word	0x0001ea60
   150b0:	2000ac2c 	.word	0x2000ac2c

000150b4 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   150b4:	2a10      	cmp	r2, #16
   150b6:	b508      	push	{r3, lr}
   150b8:	d810      	bhi.n	150dc <vipm_nrf_0_send+0x28>
   150ba:	b11a      	cbz	r2, 150c4 <vipm_nrf_0_send+0x10>
   150bc:	2157      	movs	r1, #87	; 0x57
   150be:	4809      	ldr	r0, [pc, #36]	; (150e4 <vipm_nrf_0_send+0x30>)
   150c0:	f004 fc53 	bl	1996a <printk>
   150c4:	9b02      	ldr	r3, [sp, #8]
   150c6:	2b00      	cmp	r3, #0
   150c8:	dd03      	ble.n	150d2 <vipm_nrf_0_send+0x1e>
   150ca:	2157      	movs	r1, #87	; 0x57
   150cc:	4806      	ldr	r0, [pc, #24]	; (150e8 <vipm_nrf_0_send+0x34>)
   150ce:	f004 fc4c 	bl	1996a <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   150d2:	2201      	movs	r2, #1
   150d4:	2000      	movs	r0, #0
   150d6:	4b05      	ldr	r3, [pc, #20]	; (150ec <vipm_nrf_0_send+0x38>)
   150d8:	601a      	str	r2, [r3, #0]
   150da:	bd08      	pop	{r3, pc}
   150dc:	f06f 0015 	mvn.w	r0, #21
   150e0:	e7fb      	b.n	150da <vipm_nrf_0_send+0x26>
   150e2:	bf00      	nop
   150e4:	00021007 	.word	0x00021007
   150e8:	00021040 	.word	0x00021040
   150ec:	4002a000 	.word	0x4002a000

000150f0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   150f0:	6802      	ldr	r2, [r0, #0]
{
   150f2:	b510      	push	{r4, lr}
    switch (port)
   150f4:	0953      	lsrs	r3, r2, #5
{
   150f6:	4604      	mov	r4, r0
    switch (port)
   150f8:	d029      	beq.n	1514e <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   150fa:	2b01      	cmp	r3, #1
   150fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15100:	bf18      	it	ne
   15102:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   15104:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   15108:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1510a:	07db      	lsls	r3, r3, #31
   1510c:	d40a      	bmi.n	15124 <nrf_gpio_pin_port_decode+0x34>
   1510e:	4912      	ldr	r1, [pc, #72]	; (15158 <nrf_gpio_pin_port_decode+0x68>)
   15110:	4812      	ldr	r0, [pc, #72]	; (1515c <nrf_gpio_pin_port_decode+0x6c>)
   15112:	f240 221a 	movw	r2, #538	; 0x21a
   15116:	f004 fc28 	bl	1996a <printk>
   1511a:	f240 211a 	movw	r1, #538	; 0x21a
   1511e:	480e      	ldr	r0, [pc, #56]	; (15158 <nrf_gpio_pin_port_decode+0x68>)
   15120:	f004 fec9 	bl	19eb6 <assert_post_action>
    uint32_t pin_number = *p_pin;
   15124:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   15126:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1512a:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   1512c:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1512e:	d00c      	beq.n	1514a <nrf_gpio_pin_port_decode+0x5a>
   15130:	2b01      	cmp	r3, #1
   15132:	d00f      	beq.n	15154 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   15134:	4908      	ldr	r1, [pc, #32]	; (15158 <nrf_gpio_pin_port_decode+0x68>)
   15136:	4809      	ldr	r0, [pc, #36]	; (1515c <nrf_gpio_pin_port_decode+0x6c>)
   15138:	f240 221f 	movw	r2, #543	; 0x21f
   1513c:	f004 fc15 	bl	1996a <printk>
   15140:	f240 211f 	movw	r1, #543	; 0x21f
   15144:	4804      	ldr	r0, [pc, #16]	; (15158 <nrf_gpio_pin_port_decode+0x68>)
   15146:	f004 feb6 	bl	19eb6 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1514a:	4805      	ldr	r0, [pc, #20]	; (15160 <nrf_gpio_pin_port_decode+0x70>)
}
   1514c:	bd10      	pop	{r4, pc}
    switch (port)
   1514e:	f04f 33ff 	mov.w	r3, #4294967295
   15152:	e7d7      	b.n	15104 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   15154:	4803      	ldr	r0, [pc, #12]	; (15164 <nrf_gpio_pin_port_decode+0x74>)
   15156:	e7f9      	b.n	1514c <nrf_gpio_pin_port_decode+0x5c>
   15158:	00020f1f 	.word	0x00020f1f
   1515c:	0001ea60 	.word	0x0001ea60
   15160:	40842500 	.word	0x40842500
   15164:	40842800 	.word	0x40842800

00015168 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   15168:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1516a:	794b      	ldrb	r3, [r1, #5]
   1516c:	2b01      	cmp	r3, #1
   1516e:	d02b      	beq.n	151c8 <uarte_nrfx_configure+0x60>
   15170:	2b03      	cmp	r3, #3
   15172:	d126      	bne.n	151c2 <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   15174:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15176:	798b      	ldrb	r3, [r1, #6]
   15178:	2b03      	cmp	r3, #3
   1517a:	d122      	bne.n	151c2 <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1517c:	79cd      	ldrb	r5, [r1, #7]
   1517e:	b125      	cbz	r5, 1518a <uarte_nrfx_configure+0x22>
   15180:	2d01      	cmp	r5, #1
   15182:	d11e      	bne.n	151c2 <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   15184:	6843      	ldr	r3, [r0, #4]
   15186:	791b      	ldrb	r3, [r3, #4]
   15188:	b1db      	cbz	r3, 151c2 <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1518a:	790a      	ldrb	r2, [r1, #4]
   1518c:	2a01      	cmp	r2, #1
   1518e:	d01d      	beq.n	151cc <uarte_nrfx_configure+0x64>
   15190:	2a02      	cmp	r2, #2
   15192:	d01f      	beq.n	151d4 <uarte_nrfx_configure+0x6c>
   15194:	b9aa      	cbnz	r2, 151c2 <uarte_nrfx_configure+0x5a>
   15196:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   15198:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1519a:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   1519c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   151a0:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   151a2:	d06e      	beq.n	15282 <uarte_nrfx_configure+0x11a>
   151a4:	d833      	bhi.n	1520e <uarte_nrfx_configure+0xa6>
   151a6:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   151aa:	d06d      	beq.n	15288 <uarte_nrfx_configure+0x120>
   151ac:	d81c      	bhi.n	151e8 <uarte_nrfx_configure+0x80>
   151ae:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   151b2:	d06b      	beq.n	1528c <uarte_nrfx_configure+0x124>
   151b4:	d810      	bhi.n	151d8 <uarte_nrfx_configure+0x70>
   151b6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   151ba:	d06a      	beq.n	15292 <uarte_nrfx_configure+0x12a>
   151bc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   151c0:	d06a      	beq.n	15298 <uarte_nrfx_configure+0x130>
   151c2:	f06f 0022 	mvn.w	r0, #34	; 0x22
   151c6:	e05b      	b.n	15280 <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
   151c8:	2700      	movs	r7, #0
   151ca:	e7d4      	b.n	15176 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   151cc:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   151d0:	220e      	movs	r2, #14
   151d2:	e7e1      	b.n	15198 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   151d4:	2400      	movs	r4, #0
   151d6:	e7fb      	b.n	151d0 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
   151d8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   151dc:	d05f      	beq.n	1529e <uarte_nrfx_configure+0x136>
   151de:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   151e2:	d1ee      	bne.n	151c2 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   151e4:	4b38      	ldr	r3, [pc, #224]	; (152c8 <uarte_nrfx_configure+0x160>)
   151e6:	e03e      	b.n	15266 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   151e8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   151ec:	d05a      	beq.n	152a4 <uarte_nrfx_configure+0x13c>
   151ee:	d807      	bhi.n	15200 <uarte_nrfx_configure+0x98>
   151f0:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   151f4:	d058      	beq.n	152a8 <uarte_nrfx_configure+0x140>
   151f6:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   151fa:	d1e2      	bne.n	151c2 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   151fc:	4b33      	ldr	r3, [pc, #204]	; (152cc <uarte_nrfx_configure+0x164>)
   151fe:	e032      	b.n	15266 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15200:	f647 2c12 	movw	ip, #31250	; 0x7a12
   15204:	4563      	cmp	r3, ip
   15206:	d1dc      	bne.n	151c2 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   15208:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1520c:	e02b      	b.n	15266 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1520e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   15212:	d04b      	beq.n	152ac <uarte_nrfx_configure+0x144>
   15214:	d813      	bhi.n	1523e <uarte_nrfx_configure+0xd6>
   15216:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1521a:	d04a      	beq.n	152b2 <uarte_nrfx_configure+0x14a>
   1521c:	d809      	bhi.n	15232 <uarte_nrfx_configure+0xca>
   1521e:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   15222:	4563      	cmp	r3, ip
   15224:	d047      	beq.n	152b6 <uarte_nrfx_configure+0x14e>
   15226:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1522a:	d1ca      	bne.n	151c2 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1522c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   15230:	e019      	b.n	15266 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15232:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   15236:	d1c4      	bne.n	151c2 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   15238:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1523c:	e013      	b.n	15266 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1523e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   15242:	d03b      	beq.n	152bc <uarte_nrfx_configure+0x154>
   15244:	d809      	bhi.n	1525a <uarte_nrfx_configure+0xf2>
   15246:	f8df c088 	ldr.w	ip, [pc, #136]	; 152d0 <uarte_nrfx_configure+0x168>
   1524a:	4563      	cmp	r3, ip
   1524c:	d039      	beq.n	152c2 <uarte_nrfx_configure+0x15a>
   1524e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   15252:	d1b6      	bne.n	151c2 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   15254:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   15258:	e005      	b.n	15266 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1525a:	f8df c078 	ldr.w	ip, [pc, #120]	; 152d4 <uarte_nrfx_configure+0x16c>
   1525e:	4563      	cmp	r3, ip
   15260:	d1af      	bne.n	151c2 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   15262:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   15266:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1526a:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   1526c:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   1526e:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   15270:	4322      	orrs	r2, r4
   15272:	3304      	adds	r3, #4
   15274:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   15276:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   1527a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1527e:	2000      	movs	r0, #0
}
   15280:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   15282:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   15286:	e7ee      	b.n	15266 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   15288:	4b13      	ldr	r3, [pc, #76]	; (152d8 <uarte_nrfx_configure+0x170>)
   1528a:	e7ec      	b.n	15266 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1528c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   15290:	e7e9      	b.n	15266 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
   15292:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   15296:	e7e6      	b.n	15266 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15298:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1529c:	e7e3      	b.n	15266 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1529e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   152a2:	e7e0      	b.n	15266 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   152a4:	4b0d      	ldr	r3, [pc, #52]	; (152dc <uarte_nrfx_configure+0x174>)
   152a6:	e7de      	b.n	15266 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   152a8:	4b0d      	ldr	r3, [pc, #52]	; (152e0 <uarte_nrfx_configure+0x178>)
   152aa:	e7dc      	b.n	15266 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   152ac:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   152b0:	e7d9      	b.n	15266 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   152b2:	4b0c      	ldr	r3, [pc, #48]	; (152e4 <uarte_nrfx_configure+0x17c>)
   152b4:	e7d7      	b.n	15266 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   152b6:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   152ba:	e7d4      	b.n	15266 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   152bc:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   152c0:	e7d1      	b.n	15266 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   152c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   152c6:	e7ce      	b.n	15266 <uarte_nrfx_configure+0xfe>
   152c8:	0013b000 	.word	0x0013b000
   152cc:	004ea000 	.word	0x004ea000
   152d0:	0003d090 	.word	0x0003d090
   152d4:	000f4240 	.word	0x000f4240
   152d8:	00275000 	.word	0x00275000
   152dc:	0075c000 	.word	0x0075c000
   152e0:	003af000 	.word	0x003af000
   152e4:	013a9000 	.word	0x013a9000

000152e8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   152e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   152ec:	4606      	mov	r6, r0
   152ee:	4688      	mov	r8, r1
	return dev->data;
   152f0:	68c7      	ldr	r7, [r0, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   152f2:	f007 ff1f 	bl	1d134 <k_is_in_isr>
   152f6:	b9b8      	cbnz	r0, 15328 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   152f8:	4b28      	ldr	r3, [pc, #160]	; (1539c <uarte_nrfx_poll_out+0xb4>)
   152fa:	781b      	ldrb	r3, [r3, #0]
   152fc:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   15300:	6872      	ldr	r2, [r6, #4]
   15302:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   15304:	b193      	cbz	r3, 1532c <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   15306:	f04f 0320 	mov.w	r3, #32
   1530a:	f3ef 8411 	mrs	r4, BASEPRI
   1530e:	f383 8811 	msr	BASEPRI, r3
   15312:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   15316:	6870      	ldr	r0, [r6, #4]
   15318:	f007 f9c1 	bl	1c69e <is_tx_ready.isra.0>
   1531c:	bb38      	cbnz	r0, 1536e <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1531e:	f384 8811 	msr	BASEPRI, r4
   15322:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   15326:	e7ee      	b.n	15306 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15328:	2301      	movs	r3, #1
   1532a:	e7e9      	b.n	15300 <uarte_nrfx_poll_out+0x18>
   1532c:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1532e:	6870      	ldr	r0, [r6, #4]
   15330:	f007 f9b5 	bl	1c69e <is_tx_ready.isra.0>
   15334:	b970      	cbnz	r0, 15354 <uarte_nrfx_poll_out+0x6c>
   15336:	2001      	movs	r0, #1
   15338:	f007 fa51 	bl	1c7de <nrfx_busy_wait>
   1533c:	3c01      	subs	r4, #1
   1533e:	d1f6      	bne.n	1532e <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   15340:	2100      	movs	r1, #0
   15342:	2021      	movs	r0, #33	; 0x21
   15344:	f003 f906 	bl	18554 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   15348:	e7f0      	b.n	1532c <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1534a:	f384 8811 	msr	BASEPRI, r4
   1534e:	f3bf 8f6f 	isb	sy
}
   15352:	e7f5      	b.n	15340 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   15354:	f04f 0320 	mov.w	r3, #32
   15358:	f3ef 8411 	mrs	r4, BASEPRI
   1535c:	f383 8811 	msr	BASEPRI, r3
   15360:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   15364:	6870      	ldr	r0, [r6, #4]
   15366:	f007 f99a 	bl	1c69e <is_tx_ready.isra.0>
   1536a:	2800      	cmp	r0, #0
   1536c:	d0ed      	beq.n	1534a <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1536e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15370:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   15372:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15376:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1537a:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1537e:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   15382:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   15386:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   1538a:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1538e:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   15390:	f384 8811 	msr	BASEPRI, r4
   15394:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   15398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1539c:	2000c60b 	.word	0x2000c60b

000153a0 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   153a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153a4:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   153a6:	f04f 0800 	mov.w	r8, #0
   153aa:	f04f 0914 	mov.w	r9, #20
   153ae:	2200      	movs	r2, #0
   153b0:	2101      	movs	r1, #1
   153b2:	2008      	movs	r0, #8
   153b4:	f7f7 fcc2 	bl	cd3c <z_arm_irq_priority_set>
   153b8:	2008      	movs	r0, #8
   153ba:	f7f7 fca1 	bl	cd00 <arch_irq_enable>
	return config->uarte_regs;
   153be:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   153c0:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   153c2:	681c      	ldr	r4, [r3, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   153c4:	2701      	movs	r7, #1
   153c6:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   153ca:	a801      	add	r0, sp, #4
	data->dev = dev;
   153cc:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   153ce:	f8cd 9004 	str.w	r9, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   153d2:	f7ff fe8d 	bl	150f0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   153d6:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   153d8:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   153dc:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   153e0:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   153e2:	a801      	add	r0, sp, #4
   153e4:	f8cd 9004 	str.w	r9, [sp, #4]
   153e8:	f7ff fe82 	bl	150f0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   153ec:	f04f 0b16 	mov.w	fp, #22
   153f0:	9b01      	ldr	r3, [sp, #4]
   153f2:	3380      	adds	r3, #128	; 0x80
   153f4:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   153f8:	a801      	add	r0, sp, #4
   153fa:	f8cd b004 	str.w	fp, [sp, #4]
   153fe:	f7ff fe77 	bl	150f0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15402:	9b01      	ldr	r3, [sp, #4]
   15404:	3380      	adds	r3, #128	; 0x80
   15406:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   1540a:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1540e:	f04f 0915 	mov.w	r9, #21
   15412:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15416:	a801      	add	r0, sp, #4
   15418:	f8cd 9004 	str.w	r9, [sp, #4]
   1541c:	f7ff fe68 	bl	150f0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15420:	9b01      	ldr	r3, [sp, #4]
   15422:	3380      	adds	r3, #128	; 0x80
   15424:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
   15428:	f04f 0813 	mov.w	r8, #19
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1542c:	a801      	add	r0, sp, #4
   1542e:	f8cd 8004 	str.w	r8, [sp, #4]
   15432:	f7ff fe5d 	bl	150f0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15436:	9b01      	ldr	r3, [sp, #4]
   15438:	409f      	lsls	r7, r3
    p_reg->OUTSET = set_mask;
   1543a:	6087      	str	r7, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1543c:	a801      	add	r0, sp, #4
   1543e:	f8cd 8004 	str.w	r8, [sp, #4]
   15442:	f7ff fe55 	bl	150f0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15446:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   15448:	68e9      	ldr	r1, [r5, #12]
   1544a:	3380      	adds	r3, #128	; 0x80
   1544c:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
   15450:	3104      	adds	r1, #4
    p_reg->PSEL.RTS = pselrts;
   15452:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   15456:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   15458:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   1545c:	f7ff fe84 	bl	15168 <uarte_nrfx_configure>
	if (err) {
   15460:	4607      	mov	r7, r0
   15462:	b980      	cbnz	r0, 15486 <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   15464:	686b      	ldr	r3, [r5, #4]
   15466:	799b      	ldrb	r3, [r3, #6]
   15468:	2b00      	cmp	r3, #0
   1546a:	d03a      	beq.n	154e2 <uarte_0_init+0x142>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1546c:	eb06 000b 	add.w	r0, r6, fp
   15470:	f000 fddc 	bl	1602c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   15474:	4b2b      	ldr	r3, [pc, #172]	; (15524 <uarte_0_init+0x184>)
   15476:	4298      	cmp	r0, r3
   15478:	d009      	beq.n	1548e <uarte_0_init+0xee>
		LOG_ERR("Failed to allocate PPI Channel");
   1547a:	2145      	movs	r1, #69	; 0x45
   1547c:	482a      	ldr	r0, [pc, #168]	; (15528 <uarte_0_init+0x188>)
   1547e:	f004 fa74 	bl	1996a <printk>
		return -EIO;
   15482:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   15486:	4638      	mov	r0, r7
   15488:	b003      	add	sp, #12
   1548a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   1548e:	f514 7990 	adds.w	r9, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   15492:	f896 8016 	ldrb.w	r8, [r6, #22]
   15496:	d10a      	bne.n	154ae <uarte_0_init+0x10e>
   15498:	4924      	ldr	r1, [pc, #144]	; (1552c <uarte_0_init+0x18c>)
   1549a:	4825      	ldr	r0, [pc, #148]	; (15530 <uarte_0_init+0x190>)
   1549c:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   154a0:	f004 fa63 	bl	1996a <printk>
   154a4:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   154a8:	4820      	ldr	r0, [pc, #128]	; (1552c <uarte_0_init+0x18c>)
   154aa:	f004 fd04 	bl	19eb6 <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   154ae:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   154b2:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   154b6:	f8c9 8080 	str.w	r8, [r9, #128]	; 0x80
    NRFX_ASSERT(tep);
   154ba:	d10a      	bne.n	154d2 <uarte_0_init+0x132>
   154bc:	491b      	ldr	r1, [pc, #108]	; (1552c <uarte_0_init+0x18c>)
   154be:	481c      	ldr	r0, [pc, #112]	; (15530 <uarte_0_init+0x190>)
   154c0:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   154c4:	f004 fa51 	bl	1996a <printk>
   154c8:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   154cc:	4817      	ldr	r0, [pc, #92]	; (1552c <uarte_0_init+0x18c>)
   154ce:	f004 fcf2 	bl	19eb6 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   154d2:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   154d4:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
   154d8:	7db2      	ldrb	r2, [r6, #22]
   154da:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   154dc:	4a15      	ldr	r2, [pc, #84]	; (15534 <uarte_0_init+0x194>)
   154de:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   154e2:	2308      	movs	r3, #8
   154e4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   154e8:	2300      	movs	r3, #0
   154ea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   154ee:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   154f2:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   154f6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   154fa:	2301      	movs	r3, #1
   154fc:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15500:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   15502:	686b      	ldr	r3, [r5, #4]
   15504:	799b      	ldrb	r3, [r3, #6]
   15506:	b91b      	cbnz	r3, 15510 <uarte_0_init+0x170>
    p_reg->INTENSET = mask;
   15508:	f44f 7380 	mov.w	r3, #256	; 0x100
   1550c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   15510:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   15512:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15514:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15518:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1551c:	2301      	movs	r3, #1
   1551e:	60a3      	str	r3, [r4, #8]
   15520:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   15522:	e7b0      	b.n	15486 <uarte_0_init+0xe6>
   15524:	0bad0000 	.word	0x0bad0000
   15528:	00021083 	.word	0x00021083
   1552c:	000210a7 	.word	0x000210a7
   15530:	0001ea60 	.word	0x0001ea60
   15534:	40017000 	.word	0x40017000

00015538 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   15538:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   1553c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   15540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   15544:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   15548:	4605      	mov	r5, r0
   1554a:	460e      	mov	r6, r1
   1554c:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   1554e:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   15552:	d14f      	bne.n	155f4 <z_impl_gpio_pin_interrupt_configure+0xbc>
   15554:	492d      	ldr	r1, [pc, #180]	; (1560c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   15556:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   1555a:	482d      	ldr	r0, [pc, #180]	; (15610 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1555c:	f004 fa05 	bl	1996a <printk>
   15560:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   15564:	4829      	ldr	r0, [pc, #164]	; (1560c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   15566:	f004 fca6 	bl	19eb6 <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1556a:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   1556e:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   15572:	d10a      	bne.n	1558a <z_impl_gpio_pin_interrupt_configure+0x52>
   15574:	4925      	ldr	r1, [pc, #148]	; (1560c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   15576:	4826      	ldr	r0, [pc, #152]	; (15610 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   15578:	f240 12f1 	movw	r2, #497	; 0x1f1
   1557c:	f004 f9f5 	bl	1996a <printk>
   15580:	f240 11f1 	movw	r1, #497	; 0x1f1
   15584:	4821      	ldr	r0, [pc, #132]	; (1560c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   15586:	f004 fc96 	bl	19eb6 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1558a:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   1558e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   15592:	d10a      	bne.n	155aa <z_impl_gpio_pin_interrupt_configure+0x72>
   15594:	491d      	ldr	r1, [pc, #116]	; (1560c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   15596:	481e      	ldr	r0, [pc, #120]	; (15610 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   15598:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1559c:	f004 f9e5 	bl	1996a <printk>
   155a0:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   155a4:	4819      	ldr	r0, [pc, #100]	; (1560c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   155a6:	f004 fc86 	bl	19eb6 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   155aa:	2701      	movs	r7, #1
   155ac:	f8da 3000 	ldr.w	r3, [sl]
   155b0:	40b7      	lsls	r7, r6
   155b2:	421f      	tst	r7, r3
   155b4:	d10a      	bne.n	155cc <z_impl_gpio_pin_interrupt_configure+0x94>
   155b6:	4915      	ldr	r1, [pc, #84]	; (1560c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   155b8:	4815      	ldr	r0, [pc, #84]	; (15610 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   155ba:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   155be:	f004 f9d4 	bl	1996a <printk>
   155c2:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   155c6:	4811      	ldr	r0, [pc, #68]	; (1560c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   155c8:	f004 fc75 	bl	19eb6 <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   155cc:	0423      	lsls	r3, r4, #16
   155ce:	d505      	bpl.n	155dc <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   155d0:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   155d4:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   155d6:	bf18      	it	ne
   155d8:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   155dc:	f8d8 7018 	ldr.w	r7, [r8, #24]
   155e0:	4631      	mov	r1, r6
   155e2:	4628      	mov	r0, r5
   155e4:	46bc      	mov	ip, r7
   155e6:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   155ea:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   155ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   155f2:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   155f4:	2b00      	cmp	r3, #0
   155f6:	d1b8      	bne.n	1556a <z_impl_gpio_pin_interrupt_configure+0x32>
   155f8:	4904      	ldr	r1, [pc, #16]	; (1560c <z_impl_gpio_pin_interrupt_configure+0xd4>)
   155fa:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   155fe:	4804      	ldr	r0, [pc, #16]	; (15610 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   15600:	f004 f9b3 	bl	1996a <printk>
   15604:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   15608:	e7ac      	b.n	15564 <z_impl_gpio_pin_interrupt_configure+0x2c>
   1560a:	bf00      	nop
   1560c:	000210f6 	.word	0x000210f6
   15610:	0001ea60 	.word	0x0001ea60

00015614 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   15614:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15616:	2501      	movs	r5, #1
   15618:	6843      	ldr	r3, [r0, #4]
   1561a:	408d      	lsls	r5, r1
   1561c:	681b      	ldr	r3, [r3, #0]
{
   1561e:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15620:	421d      	tst	r5, r3
{
   15622:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15624:	d10a      	bne.n	1563c <gpio_pin_set_raw+0x28>
   15626:	490b      	ldr	r1, [pc, #44]	; (15654 <gpio_pin_set_raw+0x40>)
   15628:	480b      	ldr	r0, [pc, #44]	; (15658 <gpio_pin_set_raw+0x44>)
   1562a:	f44f 7270 	mov.w	r2, #960	; 0x3c0
   1562e:	f004 f99c 	bl	1996a <printk>
   15632:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   15636:	4807      	ldr	r0, [pc, #28]	; (15654 <gpio_pin_set_raw+0x40>)
   15638:	f004 fc3d 	bl	19eb6 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   1563c:	b136      	cbz	r6, 1564c <gpio_pin_set_raw+0x38>
	return api->port_set_bits_raw(port, pins);
   1563e:	68a3      	ldr	r3, [r4, #8]
   15640:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   15642:	4629      	mov	r1, r5
   15644:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   15646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   1564a:	4718      	bx	r3
   1564c:	68a3      	ldr	r3, [r4, #8]
   1564e:	691b      	ldr	r3, [r3, #16]
   15650:	e7f7      	b.n	15642 <gpio_pin_set_raw+0x2e>
   15652:	bf00      	nop
   15654:	000210f6 	.word	0x000210f6
   15658:	0001ea60 	.word	0x0001ea60

0001565c <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1565c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15660:	4606      	mov	r6, r0
   15662:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   15664:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   15666:	f8df 8044 	ldr.w	r8, [pc, #68]	; 156ac <dk_set_leds_state.part.0+0x50>
   1566a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 156b0 <dk_set_leds_state.part.0+0x54>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   1566e:	fa26 f204 	lsr.w	r2, r6, r4
   15672:	fa27 f304 	lsr.w	r3, r7, r4
   15676:	4313      	orrs	r3, r2
   15678:	07db      	lsls	r3, r3, #31
   1567a:	d512      	bpl.n	156a2 <dk_set_leds_state.part.0+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
   1567c:	43d2      	mvns	r2, r2
   1567e:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   15682:	7919      	ldrb	r1, [r3, #4]
   15684:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   15688:	f002 0201 	and.w	r2, r2, #1
   1568c:	f7ff ffc2 	bl	15614 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   15690:	4605      	mov	r5, r0
   15692:	b130      	cbz	r0, 156a2 <dk_set_leds_state.part.0+0x46>
				LOG_ERR("Cannot write LED gpio");
   15694:	2145      	movs	r1, #69	; 0x45
   15696:	4807      	ldr	r0, [pc, #28]	; (156b4 <dk_set_leds_state.part.0+0x58>)
   15698:	f004 f967 	bl	1996a <printk>
			}
		}
	}

	return 0;
}
   1569c:	4628      	mov	r0, r5
   1569e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   156a2:	3401      	adds	r4, #1
   156a4:	2c04      	cmp	r4, #4
   156a6:	d1e2      	bne.n	1566e <dk_set_leds_state.part.0+0x12>
	return 0;
   156a8:	2500      	movs	r5, #0
   156aa:	e7f7      	b.n	1569c <dk_set_leds_state.part.0+0x40>
   156ac:	0001e104 	.word	0x0001e104
   156b0:	2000ad34 	.word	0x2000ad34
   156b4:	00021120 	.word	0x00021120

000156b8 <buttons_scan_fn>:
{
   156b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   156bc:	2400      	movs	r4, #0
   156be:	4e6c      	ldr	r6, [pc, #432]	; (15870 <buttons_scan_fn+0x1b8>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   156c0:	4625      	mov	r5, r4
{
   156c2:	46b1      	mov	r9, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   156c4:	4f6b      	ldr	r7, [pc, #428]	; (15874 <buttons_scan_fn+0x1bc>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   156c6:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 15878 <buttons_scan_fn+0x1c0>
   156ca:	f04f 0801 	mov.w	r8, #1
   156ce:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   156d2:	791b      	ldrb	r3, [r3, #4]
   156d4:	f859 bb04 	ldr.w	fp, [r9], #4
   156d8:	fa08 f803 	lsl.w	r8, r8, r3
   156dc:	f8db 3004 	ldr.w	r3, [fp, #4]
   156e0:	681b      	ldr	r3, [r3, #0]
   156e2:	ea18 0f03 	tst.w	r8, r3
   156e6:	d10a      	bne.n	156fe <buttons_scan_fn+0x46>
   156e8:	4651      	mov	r1, sl
   156ea:	4864      	ldr	r0, [pc, #400]	; (1587c <buttons_scan_fn+0x1c4>)
   156ec:	f44f 725e 	mov.w	r2, #888	; 0x378
   156f0:	f004 f93b 	bl	1996a <printk>
   156f4:	f44f 715e 	mov.w	r1, #888	; 0x378
   156f8:	4650      	mov	r0, sl
   156fa:	f004 fbdc 	bl	19eb6 <assert_post_action>
	return api->port_get_raw(port, value);
   156fe:	f8db 3008 	ldr.w	r3, [fp, #8]
   15702:	4658      	mov	r0, fp
   15704:	685b      	ldr	r3, [r3, #4]
   15706:	a901      	add	r1, sp, #4
   15708:	4798      	blx	r3
	if (ret == 0) {
   1570a:	2800      	cmp	r0, #0
   1570c:	d16b      	bne.n	157e6 <buttons_scan_fn+0x12e>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   1570e:	9b01      	ldr	r3, [sp, #4]
   15710:	ea18 0f03 	tst.w	r8, r3
   15714:	d003      	beq.n	1571e <buttons_scan_fn+0x66>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15716:	3501      	adds	r5, #1
   15718:	2d04      	cmp	r5, #4
   1571a:	d1d6      	bne.n	156ca <buttons_scan_fn+0x12>
   1571c:	e069      	b.n	157f2 <buttons_scan_fn+0x13a>
			ret |= 1U << i;
   1571e:	2301      	movs	r3, #1
   15720:	40ab      	lsls	r3, r5
   15722:	431c      	orrs	r4, r3
   15724:	e7f7      	b.n	15716 <buttons_scan_fn+0x5e>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   15726:	3d04      	subs	r5, #4
   15728:	2d00      	cmp	r5, #0
   1572a:	f000 8087 	beq.w	1583c <buttons_scan_fn+0x184>
			handler->cb(button_state, has_changed);
   1572e:	46aa      	mov	sl, r5
   15730:	f85a 3b04 	ldr.w	r3, [sl], #4
   15734:	4641      	mov	r1, r8
   15736:	4620      	mov	r0, r4
   15738:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1573a:	f1ba 0f00 	cmp.w	sl, #0
   1573e:	d07d      	beq.n	1583c <buttons_scan_fn+0x184>
	return node->next;
   15740:	686d      	ldr	r5, [r5, #4]
   15742:	e078      	b.n	15836 <buttons_scan_fn+0x17e>
		initial_run = false;
   15744:	2200      	movs	r2, #0
   15746:	701a      	strb	r2, [r3, #0]
   15748:	e07b      	b.n	15842 <buttons_scan_fn+0x18a>
	__asm__ volatile(
   1574a:	f04f 0320 	mov.w	r3, #32
   1574e:	f3ef 8811 	mrs	r8, BASEPRI
   15752:	f383 8811 	msr	BASEPRI, r3
   15756:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1575a:	4849      	ldr	r0, [pc, #292]	; (15880 <buttons_scan_fn+0x1c8>)
   1575c:	f003 f91c 	bl	18998 <z_spin_lock_valid>
   15760:	b940      	cbnz	r0, 15774 <buttons_scan_fn+0xbc>
   15762:	4948      	ldr	r1, [pc, #288]	; (15884 <buttons_scan_fn+0x1cc>)
   15764:	4845      	ldr	r0, [pc, #276]	; (1587c <buttons_scan_fn+0x1c4>)
   15766:	227c      	movs	r2, #124	; 0x7c
   15768:	f004 f8ff 	bl	1996a <printk>
   1576c:	217c      	movs	r1, #124	; 0x7c
   1576e:	4845      	ldr	r0, [pc, #276]	; (15884 <buttons_scan_fn+0x1cc>)
   15770:	f004 fba1 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   15774:	4842      	ldr	r0, [pc, #264]	; (15880 <buttons_scan_fn+0x1c8>)
   15776:	f003 f92b 	bl	189d0 <z_spin_lock_set_owner>
		switch (state) {
   1577a:	4b43      	ldr	r3, [pc, #268]	; (15888 <buttons_scan_fn+0x1d0>)
   1577c:	781a      	ldrb	r2, [r3, #0]
   1577e:	2a01      	cmp	r2, #1
   15780:	d126      	bne.n	157d0 <buttons_scan_fn+0x118>
			state = STATE_WAITING;
   15782:	2200      	movs	r2, #0
   15784:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   15786:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1578a:	f856 0b04 	ldr.w	r0, [r6], #4
   1578e:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   15790:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   15794:	f7ff fed0 	bl	15538 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   15798:	3401      	adds	r4, #1
   1579a:	2c04      	cmp	r4, #4
   1579c:	4605      	mov	r5, r0
   1579e:	d001      	beq.n	157a4 <buttons_scan_fn+0xec>
   157a0:	2800      	cmp	r0, #0
   157a2:	d0f0      	beq.n	15786 <buttons_scan_fn+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   157a4:	4836      	ldr	r0, [pc, #216]	; (15880 <buttons_scan_fn+0x1c8>)
   157a6:	f003 f905 	bl	189b4 <z_spin_unlock_valid>
   157aa:	b940      	cbnz	r0, 157be <buttons_scan_fn+0x106>
   157ac:	4935      	ldr	r1, [pc, #212]	; (15884 <buttons_scan_fn+0x1cc>)
   157ae:	4833      	ldr	r0, [pc, #204]	; (1587c <buttons_scan_fn+0x1c4>)
   157b0:	22a7      	movs	r2, #167	; 0xa7
   157b2:	f004 f8da 	bl	1996a <printk>
   157b6:	21a7      	movs	r1, #167	; 0xa7
   157b8:	4832      	ldr	r0, [pc, #200]	; (15884 <buttons_scan_fn+0x1cc>)
   157ba:	f004 fb7c 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   157be:	f388 8811 	msr	BASEPRI, r8
   157c2:	f3bf 8f6f 	isb	sy
		if (err) {
   157c6:	2d00      	cmp	r5, #0
   157c8:	d04f      	beq.n	1586a <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot enable callbacks");
   157ca:	2145      	movs	r1, #69	; 0x45
   157cc:	482f      	ldr	r0, [pc, #188]	; (1588c <buttons_scan_fn+0x1d4>)
   157ce:	e047      	b.n	15860 <buttons_scan_fn+0x1a8>
			__ASSERT_NO_MSG(false);
   157d0:	22b4      	movs	r2, #180	; 0xb4
   157d2:	492f      	ldr	r1, [pc, #188]	; (15890 <buttons_scan_fn+0x1d8>)
   157d4:	4829      	ldr	r0, [pc, #164]	; (1587c <buttons_scan_fn+0x1c4>)
   157d6:	f004 f8c8 	bl	1996a <printk>
   157da:	21b4      	movs	r1, #180	; 0xb4
   157dc:	482c      	ldr	r0, [pc, #176]	; (15890 <buttons_scan_fn+0x1d8>)
   157de:	f004 fb6a 	bl	19eb6 <assert_post_action>
		int err = 0;
   157e2:	2500      	movs	r5, #0
			break;
   157e4:	e7de      	b.n	157a4 <buttons_scan_fn+0xec>
		if (val < 0) {
   157e6:	da96      	bge.n	15716 <buttons_scan_fn+0x5e>
			LOG_ERR("Cannot read gpio pin");
   157e8:	2145      	movs	r1, #69	; 0x45
   157ea:	482a      	ldr	r0, [pc, #168]	; (15894 <buttons_scan_fn+0x1dc>)
   157ec:	f004 f8bd 	bl	1996a <printk>
			return 0;
   157f0:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   157f2:	4b29      	ldr	r3, [pc, #164]	; (15898 <buttons_scan_fn+0x1e0>)
   157f4:	e8d3 2fef 	ldaex	r2, [r3]
   157f8:	e8c3 4fe1 	stlex	r1, r4, [r3]
   157fc:	2900      	cmp	r1, #0
   157fe:	d1f9      	bne.n	157f4 <buttons_scan_fn+0x13c>
	if (!initial_run) {
   15800:	4b26      	ldr	r3, [pc, #152]	; (1589c <buttons_scan_fn+0x1e4>)
   15802:	f8df 909c 	ldr.w	r9, [pc, #156]	; 158a0 <buttons_scan_fn+0x1e8>
   15806:	781a      	ldrb	r2, [r3, #0]
   15808:	2a00      	cmp	r2, #0
   1580a:	d19b      	bne.n	15744 <buttons_scan_fn+0x8c>
		if (button_scan != last_button_scan) {
   1580c:	f8d9 3000 	ldr.w	r3, [r9]
   15810:	42a3      	cmp	r3, r4
   15812:	d016      	beq.n	15842 <buttons_scan_fn+0x18a>
			uint32_t has_changed = (button_scan ^ last_button_scan);
   15814:	ea83 0804 	eor.w	r8, r3, r4
	if (button_handler_cb != NULL) {
   15818:	4b22      	ldr	r3, [pc, #136]	; (158a4 <buttons_scan_fn+0x1ec>)
   1581a:	681b      	ldr	r3, [r3, #0]
   1581c:	b113      	cbz	r3, 15824 <buttons_scan_fn+0x16c>
		button_handler_cb(button_state, has_changed);
   1581e:	4641      	mov	r1, r8
   15820:	4620      	mov	r0, r4
   15822:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   15824:	f04f 33ff 	mov.w	r3, #4294967295
   15828:	f04f 32ff 	mov.w	r2, #4294967295
   1582c:	481e      	ldr	r0, [pc, #120]	; (158a8 <buttons_scan_fn+0x1f0>)
   1582e:	f001 fc13 	bl	17058 <z_impl_k_mutex_lock>
	return list->head;
   15832:	4b1e      	ldr	r3, [pc, #120]	; (158ac <buttons_scan_fn+0x1f4>)
   15834:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   15836:	2d00      	cmp	r5, #0
   15838:	f47f af75 	bne.w	15726 <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   1583c:	481a      	ldr	r0, [pc, #104]	; (158a8 <buttons_scan_fn+0x1f0>)
   1583e:	f001 fcd7 	bl	171f0 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   15842:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   15846:	2c00      	cmp	r4, #0
   15848:	f43f af7f 	beq.w	1574a <buttons_scan_fn+0x92>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1584c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   15850:	2300      	movs	r3, #0
   15852:	4917      	ldr	r1, [pc, #92]	; (158b0 <buttons_scan_fn+0x1f8>)
   15854:	4817      	ldr	r0, [pc, #92]	; (158b4 <buttons_scan_fn+0x1fc>)
   15856:	f003 f915 	bl	18a84 <k_delayed_work_submit_to_queue>
		if (err) {
   1585a:	b130      	cbz	r0, 1586a <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot add work to workqueue");
   1585c:	2145      	movs	r1, #69	; 0x45
   1585e:	4816      	ldr	r0, [pc, #88]	; (158b8 <buttons_scan_fn+0x200>)
}
   15860:	b003      	add	sp, #12
   15862:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot enable callbacks");
   15866:	f004 b880 	b.w	1996a <printk>
}
   1586a:	b003      	add	sp, #12
   1586c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15870:	2000acf0 	.word	0x2000acf0
   15874:	0001e0e4 	.word	0x0001e0e4
   15878:	000210f6 	.word	0x000210f6
   1587c:	0001ea60 	.word	0x0001ea60
   15880:	2000ad44 	.word	0x2000ad44
   15884:	0001ea9a 	.word	0x0001ea9a
   15888:	2000c60a 	.word	0x2000c60a
   1588c:	000211b5 	.word	0x000211b5
   15890:	00021177 	.word	0x00021177
   15894:	0002113b 	.word	0x0002113b
   15898:	2000ad48 	.word	0x2000ad48
   1589c:	20008574 	.word	0x20008574
   158a0:	2000ad2c 	.word	0x2000ad2c
   158a4:	2000ad00 	.word	0x2000ad00
   158a8:	2000ad04 	.word	0x2000ad04
   158ac:	2000ad18 	.word	0x2000ad18
   158b0:	2000a260 	.word	0x2000a260
   158b4:	2000a3b0 	.word	0x2000a3b0
   158b8:	00021155 	.word	0x00021155

000158bc <button_pressed>:
{
   158bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   158be:	f04f 0320 	mov.w	r3, #32
   158c2:	f3ef 8611 	mrs	r6, BASEPRI
   158c6:	f383 8811 	msr	BASEPRI, r3
   158ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   158ce:	4827      	ldr	r0, [pc, #156]	; (1596c <button_pressed+0xb0>)
   158d0:	f003 f862 	bl	18998 <z_spin_lock_valid>
   158d4:	b940      	cbnz	r0, 158e8 <button_pressed+0x2c>
   158d6:	4926      	ldr	r1, [pc, #152]	; (15970 <button_pressed+0xb4>)
   158d8:	4826      	ldr	r0, [pc, #152]	; (15974 <button_pressed+0xb8>)
   158da:	227c      	movs	r2, #124	; 0x7c
   158dc:	f004 f845 	bl	1996a <printk>
   158e0:	217c      	movs	r1, #124	; 0x7c
   158e2:	4823      	ldr	r0, [pc, #140]	; (15970 <button_pressed+0xb4>)
   158e4:	f004 fae7 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   158e8:	4820      	ldr	r0, [pc, #128]	; (1596c <button_pressed+0xb0>)
   158ea:	f003 f871 	bl	189d0 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   158ee:	2400      	movs	r4, #0
   158f0:	4d21      	ldr	r5, [pc, #132]	; (15978 <button_pressed+0xbc>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   158f2:	4f22      	ldr	r7, [pc, #136]	; (1597c <button_pressed+0xc0>)
   158f4:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   158f8:	f855 0b04 	ldr.w	r0, [r5], #4
   158fc:	7919      	ldrb	r1, [r3, #4]
   158fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   15902:	3401      	adds	r4, #1
   15904:	f7ff fe18 	bl	15538 <z_impl_gpio_pin_interrupt_configure>
   15908:	2c04      	cmp	r4, #4
   1590a:	d006      	beq.n	1591a <button_pressed+0x5e>
   1590c:	2800      	cmp	r0, #0
   1590e:	d0f1      	beq.n	158f4 <button_pressed+0x38>
		LOG_ERR("Cannot disable callbacks");
   15910:	2145      	movs	r1, #69	; 0x45
   15912:	481b      	ldr	r0, [pc, #108]	; (15980 <button_pressed+0xc4>)
   15914:	f004 f829 	bl	1996a <printk>
   15918:	e001      	b.n	1591e <button_pressed+0x62>
	if (err) {
   1591a:	2800      	cmp	r0, #0
   1591c:	d1f8      	bne.n	15910 <button_pressed+0x54>
	switch (state) {
   1591e:	4b19      	ldr	r3, [pc, #100]	; (15984 <button_pressed+0xc8>)
   15920:	781a      	ldrb	r2, [r3, #0]
   15922:	b9ca      	cbnz	r2, 15958 <button_pressed+0x9c>
		state = STATE_SCANNING;
   15924:	2201      	movs	r2, #1
   15926:	4918      	ldr	r1, [pc, #96]	; (15988 <button_pressed+0xcc>)
   15928:	701a      	strb	r2, [r3, #0]
   1592a:	4818      	ldr	r0, [pc, #96]	; (1598c <button_pressed+0xd0>)
   1592c:	2221      	movs	r2, #33	; 0x21
   1592e:	2300      	movs	r3, #0
   15930:	f003 f8a8 	bl	18a84 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15934:	480d      	ldr	r0, [pc, #52]	; (1596c <button_pressed+0xb0>)
   15936:	f003 f83d 	bl	189b4 <z_spin_unlock_valid>
   1593a:	b940      	cbnz	r0, 1594e <button_pressed+0x92>
   1593c:	490c      	ldr	r1, [pc, #48]	; (15970 <button_pressed+0xb4>)
   1593e:	480d      	ldr	r0, [pc, #52]	; (15974 <button_pressed+0xb8>)
   15940:	22a7      	movs	r2, #167	; 0xa7
   15942:	f004 f812 	bl	1996a <printk>
   15946:	21a7      	movs	r1, #167	; 0xa7
   15948:	4809      	ldr	r0, [pc, #36]	; (15970 <button_pressed+0xb4>)
   1594a:	f004 fab4 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   1594e:	f386 8811 	msr	BASEPRI, r6
   15952:	f3bf 8f6f 	isb	sy
}
   15956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   15958:	22eb      	movs	r2, #235	; 0xeb
   1595a:	490d      	ldr	r1, [pc, #52]	; (15990 <button_pressed+0xd4>)
   1595c:	4805      	ldr	r0, [pc, #20]	; (15974 <button_pressed+0xb8>)
   1595e:	f004 f804 	bl	1996a <printk>
   15962:	21eb      	movs	r1, #235	; 0xeb
   15964:	480a      	ldr	r0, [pc, #40]	; (15990 <button_pressed+0xd4>)
   15966:	f004 faa6 	bl	19eb6 <assert_post_action>
		break;
   1596a:	e7e3      	b.n	15934 <button_pressed+0x78>
   1596c:	2000ad44 	.word	0x2000ad44
   15970:	0001ea9a 	.word	0x0001ea9a
   15974:	0001ea60 	.word	0x0001ea60
   15978:	2000acf0 	.word	0x2000acf0
   1597c:	0001e0e4 	.word	0x0001e0e4
   15980:	000211d2 	.word	0x000211d2
   15984:	2000c60a 	.word	0x2000c60a
   15988:	2000a260 	.word	0x2000a260
   1598c:	2000a3b0 	.word	0x2000a3b0
   15990:	00021177 	.word	0x00021177

00015994 <dk_leds_init>:
{
   15994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   15998:	2600      	movs	r6, #0
   1599a:	4d23      	ldr	r5, [pc, #140]	; (15a28 <dk_leds_init+0x94>)
   1599c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 15a2c <dk_leds_init+0x98>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   159a0:	f8df a08c 	ldr.w	sl, [pc, #140]	; 15a30 <dk_leds_init+0x9c>
		led_devs[i] = device_get_binding(led_pins[i].port);
   159a4:	6828      	ldr	r0, [r5, #0]
   159a6:	f001 f835 	bl	16a14 <z_impl_device_get_binding>
   159aa:	4604      	mov	r4, r0
   159ac:	f849 0b04 	str.w	r0, [r9], #4
		if (!led_devs[i]) {
   159b0:	b940      	cbnz	r0, 159c4 <dk_leds_init+0x30>
			LOG_ERR("Cannot bind gpio device");
   159b2:	2145      	movs	r1, #69	; 0x45
   159b4:	481f      	ldr	r0, [pc, #124]	; (15a34 <dk_leds_init+0xa0>)
   159b6:	f003 ffd8 	bl	1996a <printk>
			return -ENODEV;
   159ba:	f06f 0412 	mvn.w	r4, #18
}
   159be:	4620      	mov	r0, r4
   159c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159c4:	2301      	movs	r3, #1
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   159c6:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   159ca:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   159cc:	fa03 f80b 	lsl.w	r8, r3, fp
   159d0:	6843      	ldr	r3, [r0, #4]
   159d2:	681b      	ldr	r3, [r3, #0]
   159d4:	ea18 0f03 	tst.w	r8, r3
   159d8:	d10a      	bne.n	159f0 <dk_leds_init+0x5c>
   159da:	4651      	mov	r1, sl
   159dc:	4816      	ldr	r0, [pc, #88]	; (15a38 <dk_leds_init+0xa4>)
   159de:	f44f 7211 	mov.w	r2, #580	; 0x244
   159e2:	f003 ffc2 	bl	1996a <printk>
   159e6:	f44f 7111 	mov.w	r1, #580	; 0x244
   159ea:	4650      	mov	r0, sl
   159ec:	f004 fa63 	bl	19eb6 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   159f0:	68a3      	ldr	r3, [r4, #8]
   159f2:	4620      	mov	r0, r4
   159f4:	f44f 7200 	mov.w	r2, #512	; 0x200
   159f8:	4659      	mov	r1, fp
   159fa:	681b      	ldr	r3, [r3, #0]
   159fc:	4798      	blx	r3
	if (ret != 0) {
   159fe:	4604      	mov	r4, r0
   15a00:	b968      	cbnz	r0, 15a1e <dk_leds_init+0x8a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   15a02:	683b      	ldr	r3, [r7, #0]
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   15a04:	3601      	adds	r6, #1
   15a06:	ea23 0308 	bic.w	r3, r3, r8
   15a0a:	2e04      	cmp	r6, #4
   15a0c:	603b      	str	r3, [r7, #0]
   15a0e:	f105 0508 	add.w	r5, r5, #8
   15a12:	d1c7      	bne.n	159a4 <dk_leds_init+0x10>
}
   15a14:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a18:	210f      	movs	r1, #15
   15a1a:	f7ff be1f 	b.w	1565c <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   15a1e:	2145      	movs	r1, #69	; 0x45
   15a20:	4806      	ldr	r0, [pc, #24]	; (15a3c <dk_leds_init+0xa8>)
   15a22:	f003 ffa2 	bl	1996a <printk>
			return err;
   15a26:	e7ca      	b.n	159be <dk_leds_init+0x2a>
   15a28:	0001e104 	.word	0x0001e104
   15a2c:	2000ad34 	.word	0x2000ad34
   15a30:	000210f6 	.word	0x000210f6
   15a34:	000211f0 	.word	0x000211f0
   15a38:	0001ea60 	.word	0x0001ea60
   15a3c:	0002120d 	.word	0x0002120d

00015a40 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15a40:	4b05      	ldr	r3, [pc, #20]	; (15a58 <dk_read_buttons+0x18>)
   15a42:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   15a46:	b100      	cbz	r0, 15a4a <dk_read_buttons+0xa>
		*button_state = current_state;
   15a48:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   15a4a:	4804      	ldr	r0, [pc, #16]	; (15a5c <dk_read_buttons+0x1c>)
   15a4c:	b111      	cbz	r1, 15a54 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   15a4e:	6802      	ldr	r2, [r0, #0]
   15a50:	405a      	eors	r2, r3
   15a52:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   15a54:	6003      	str	r3, [r0, #0]
}
   15a56:	4770      	bx	lr
   15a58:	2000ad48 	.word	0x2000ad48
   15a5c:	2000ad30 	.word	0x2000ad30

00015a60 <dk_buttons_init>:
	button_handler_cb = button_handler;
   15a60:	4b4f      	ldr	r3, [pc, #316]	; (15ba0 <dk_buttons_init+0x140>)
{
   15a62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   15a66:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   15a68:	4e4e      	ldr	r6, [pc, #312]	; (15ba4 <dk_buttons_init+0x144>)
   15a6a:	484f      	ldr	r0, [pc, #316]	; (15ba8 <dk_buttons_init+0x148>)
   15a6c:	f007 fada 	bl	1d024 <z_impl_k_mutex_init>
   15a70:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15a72:	2700      	movs	r7, #0
   15a74:	4d4d      	ldr	r5, [pc, #308]	; (15bac <dk_buttons_init+0x14c>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15a76:	f8df a138 	ldr.w	sl, [pc, #312]	; 15bb0 <dk_buttons_init+0x150>
		button_devs[i] = device_get_binding(button_pins[i].port);
   15a7a:	6828      	ldr	r0, [r5, #0]
   15a7c:	f000 ffca 	bl	16a14 <z_impl_device_get_binding>
   15a80:	4604      	mov	r4, r0
   15a82:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   15a86:	b948      	cbnz	r0, 15a9c <dk_buttons_init+0x3c>
			LOG_ERR("Cannot bind gpio device");
   15a88:	2145      	movs	r1, #69	; 0x45
   15a8a:	484a      	ldr	r0, [pc, #296]	; (15bb4 <dk_buttons_init+0x154>)
   15a8c:	f003 ff6d 	bl	1996a <printk>
			return -ENODEV;
   15a90:	f06f 0412 	mvn.w	r4, #18
}
   15a94:	4620      	mov	r0, r4
   15a96:	b003      	add	sp, #12
   15a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a9c:	2301      	movs	r3, #1
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   15a9e:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   15aa2:	f8d0 800c 	ldr.w	r8, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15aa6:	fa03 f30b 	lsl.w	r3, r3, fp
   15aaa:	9301      	str	r3, [sp, #4]
   15aac:	6843      	ldr	r3, [r0, #4]
   15aae:	9a01      	ldr	r2, [sp, #4]
   15ab0:	681b      	ldr	r3, [r3, #0]
   15ab2:	421a      	tst	r2, r3
   15ab4:	d10a      	bne.n	15acc <dk_buttons_init+0x6c>
   15ab6:	4651      	mov	r1, sl
   15ab8:	483f      	ldr	r0, [pc, #252]	; (15bb8 <dk_buttons_init+0x158>)
   15aba:	f44f 7211 	mov.w	r2, #580	; 0x244
   15abe:	f003 ff54 	bl	1996a <printk>
   15ac2:	f44f 7111 	mov.w	r1, #580	; 0x244
   15ac6:	4650      	mov	r0, sl
   15ac8:	f004 f9f5 	bl	19eb6 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   15acc:	68a3      	ldr	r3, [r4, #8]
   15ace:	4620      	mov	r0, r4
   15ad0:	f44f 7288 	mov.w	r2, #272	; 0x110
   15ad4:	4659      	mov	r1, fp
   15ad6:	681b      	ldr	r3, [r3, #0]
   15ad8:	4798      	blx	r3
	if (ret != 0) {
   15ada:	4604      	mov	r4, r0
   15adc:	bb08      	cbnz	r0, 15b22 <dk_buttons_init+0xc2>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   15ade:	f8d8 3000 	ldr.w	r3, [r8]
   15ae2:	9a01      	ldr	r2, [sp, #4]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15ae4:	3701      	adds	r7, #1
   15ae6:	ea23 0302 	bic.w	r3, r3, r2
   15aea:	2f04      	cmp	r7, #4
   15aec:	f8c8 3000 	str.w	r3, [r8]
   15af0:	f105 0508 	add.w	r5, r5, #8
   15af4:	d1c1      	bne.n	15a7a <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15af6:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   15af8:	4680      	mov	r8, r0
		pin_mask |= BIT(button_pins[i].number);
   15afa:	f04f 0a01 	mov.w	sl, #1
   15afe:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 15ba4 <dk_buttons_init+0x144>
		err = gpio_pin_interrupt_configure(button_devs[i],
   15b02:	4b2a      	ldr	r3, [pc, #168]	; (15bac <dk_buttons_init+0x14c>)
   15b04:	f859 0b04 	ldr.w	r0, [r9], #4
   15b08:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   15b0c:	791f      	ldrb	r7, [r3, #4]
   15b0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   15b12:	4639      	mov	r1, r7
   15b14:	f7ff fd10 	bl	15538 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   15b18:	4604      	mov	r4, r0
   15b1a:	b138      	cbz	r0, 15b2c <dk_buttons_init+0xcc>
			LOG_ERR("Cannot disable callbacks()");
   15b1c:	2145      	movs	r1, #69	; 0x45
   15b1e:	4827      	ldr	r0, [pc, #156]	; (15bbc <dk_buttons_init+0x15c>)
   15b20:	e001      	b.n	15b26 <dk_buttons_init+0xc6>
			LOG_ERR("Cannot configure button gpio");
   15b22:	2145      	movs	r1, #69	; 0x45
   15b24:	4826      	ldr	r0, [pc, #152]	; (15bc0 <dk_buttons_init+0x160>)
		LOG_ERR("Cannot add work to workqueue");
   15b26:	f003 ff20 	bl	1996a <printk>
		return err;
   15b2a:	e7b3      	b.n	15a94 <dk_buttons_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15b2c:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   15b2e:	fa0a f707 	lsl.w	r7, sl, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15b32:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   15b34:	ea48 0807 	orr.w	r8, r8, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15b38:	d1e3      	bne.n	15b02 <dk_buttons_init+0xa2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15b3a:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   15b3c:	4f21      	ldr	r7, [pc, #132]	; (15bc4 <dk_buttons_init+0x164>)
   15b3e:	4b22      	ldr	r3, [pc, #136]	; (15bc8 <dk_buttons_init+0x168>)
	callback->pin_mask = pin_mask;
   15b40:	e9c7 3801 	strd	r3, r8, [r7, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   15b44:	f856 0b04 	ldr.w	r0, [r6], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   15b48:	6883      	ldr	r3, [r0, #8]
   15b4a:	69db      	ldr	r3, [r3, #28]
   15b4c:	b13b      	cbz	r3, 15b5e <dk_buttons_init+0xfe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   15b4e:	2201      	movs	r2, #1
   15b50:	4639      	mov	r1, r7
   15b52:	4798      	blx	r3
		if (err) {
   15b54:	4604      	mov	r4, r0
   15b56:	b128      	cbz	r0, 15b64 <dk_buttons_init+0x104>
			LOG_ERR("Cannot add callback");
   15b58:	2145      	movs	r1, #69	; 0x45
   15b5a:	481c      	ldr	r0, [pc, #112]	; (15bcc <dk_buttons_init+0x16c>)
   15b5c:	e7e3      	b.n	15b26 <dk_buttons_init+0xc6>
		return -ENOTSUP;
   15b5e:	f06f 0422 	mvn.w	r4, #34	; 0x22
   15b62:	e7f9      	b.n	15b58 <dk_buttons_init+0xf8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15b64:	3501      	adds	r5, #1
   15b66:	2d04      	cmp	r5, #4
   15b68:	d1ec      	bne.n	15b44 <dk_buttons_init+0xe4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   15b6a:	4d19      	ldr	r5, [pc, #100]	; (15bd0 <dk_buttons_init+0x170>)
   15b6c:	4601      	mov	r1, r0
   15b6e:	2230      	movs	r2, #48	; 0x30
   15b70:	4628      	mov	r0, r5
   15b72:	f005 f965 	bl	1ae40 <memset>
	state = STATE_SCANNING;
   15b76:	2201      	movs	r2, #1
   15b78:	4b16      	ldr	r3, [pc, #88]	; (15bd4 <dk_buttons_init+0x174>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15b7a:	4629      	mov	r1, r5
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   15b7c:	606b      	str	r3, [r5, #4]
   15b7e:	4b16      	ldr	r3, [pc, #88]	; (15bd8 <dk_buttons_init+0x178>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15b80:	4816      	ldr	r0, [pc, #88]	; (15bdc <dk_buttons_init+0x17c>)
   15b82:	701a      	strb	r2, [r3, #0]
   15b84:	2200      	movs	r2, #0
   15b86:	2300      	movs	r3, #0
   15b88:	f002 ff7c 	bl	18a84 <k_delayed_work_submit_to_queue>
	if (err) {
   15b8c:	4604      	mov	r4, r0
   15b8e:	b110      	cbz	r0, 15b96 <dk_buttons_init+0x136>
		LOG_ERR("Cannot add work to workqueue");
   15b90:	2145      	movs	r1, #69	; 0x45
   15b92:	4813      	ldr	r0, [pc, #76]	; (15be0 <dk_buttons_init+0x180>)
   15b94:	e7c7      	b.n	15b26 <dk_buttons_init+0xc6>
	dk_read_buttons(NULL, NULL);
   15b96:	4601      	mov	r1, r0
   15b98:	f7ff ff52 	bl	15a40 <dk_read_buttons>
	return 0;
   15b9c:	e77a      	b.n	15a94 <dk_buttons_init+0x34>
   15b9e:	bf00      	nop
   15ba0:	2000ad00 	.word	0x2000ad00
   15ba4:	2000acf0 	.word	0x2000acf0
   15ba8:	2000ad04 	.word	0x2000ad04
   15bac:	0001e0e4 	.word	0x0001e0e4
   15bb0:	000210f6 	.word	0x000210f6
   15bb4:	000211f0 	.word	0x000211f0
   15bb8:	0001ea60 	.word	0x0001ea60
   15bbc:	0002124e 	.word	0x0002124e
   15bc0:	0002122c 	.word	0x0002122c
   15bc4:	2000ad20 	.word	0x2000ad20
   15bc8:	000158bd 	.word	0x000158bd
   15bcc:	0002126e 	.word	0x0002126e
   15bd0:	2000a260 	.word	0x2000a260
   15bd4:	000156b9 	.word	0x000156b9
   15bd8:	2000c60a 	.word	0x2000c60a
   15bdc:	2000a3b0 	.word	0x2000a3b0
   15be0:	00021155 	.word	0x00021155

00015be4 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   15be4:	2804      	cmp	r0, #4
{
   15be6:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   15be8:	d907      	bls.n	15bfa <dk_set_led+0x16>
		LOG_ERR("LED index out of the range");
   15bea:	2145      	movs	r1, #69	; 0x45
   15bec:	480d      	ldr	r0, [pc, #52]	; (15c24 <dk_set_led+0x40>)
   15bee:	f003 febc 	bl	1996a <printk>
   15bf2:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   15bf6:	4620      	mov	r0, r4
   15bf8:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   15bfa:	fab1 f281 	clz	r2, r1
   15bfe:	4b0a      	ldr	r3, [pc, #40]	; (15c28 <dk_set_led+0x44>)
   15c00:	0952      	lsrs	r2, r2, #5
   15c02:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   15c06:	7919      	ldrb	r1, [r3, #4]
   15c08:	4b08      	ldr	r3, [pc, #32]	; (15c2c <dk_set_led+0x48>)
   15c0a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   15c0e:	f7ff fd01 	bl	15614 <gpio_pin_set_raw>
	if (err) {
   15c12:	4604      	mov	r4, r0
   15c14:	2800      	cmp	r0, #0
   15c16:	d0ee      	beq.n	15bf6 <dk_set_led+0x12>
		LOG_ERR("Cannot write LED gpio");
   15c18:	2145      	movs	r1, #69	; 0x45
   15c1a:	4805      	ldr	r0, [pc, #20]	; (15c30 <dk_set_led+0x4c>)
   15c1c:	f003 fea5 	bl	1996a <printk>
   15c20:	e7e9      	b.n	15bf6 <dk_set_led+0x12>
   15c22:	bf00      	nop
   15c24:	00021287 	.word	0x00021287
   15c28:	0001e104 	.word	0x0001e104
   15c2c:	2000ad34 	.word	0x2000ad34
   15c30:	00021120 	.word	0x00021120

00015c34 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   15c34:	4803      	ldr	r0, [pc, #12]	; (15c44 <k_sys_fatal_error_handler+0x10>)
   15c36:	2145      	movs	r1, #69	; 0x45
{
   15c38:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   15c3a:	f003 fe96 	bl	1996a <printk>
	sys_arch_reboot(0);
   15c3e:	2000      	movs	r0, #0
   15c40:	f7f7 fb7a 	bl	d338 <sys_arch_reboot>

	CODE_UNREACHABLE;
   15c44:	000212bb 	.word	0x000212bb

00015c48 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   15c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15c4c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   15c4e:	4c21      	ldr	r4, [pc, #132]	; (15cd4 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   15c50:	4e21      	ldr	r6, [pc, #132]	; (15cd8 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15c52:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   15c56:	f8df 9084 	ldr.w	r9, [pc, #132]	; 15cdc <check_ext_api_requests+0x94>
{
   15c5a:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15c5c:	45a8      	cmp	r8, r5
   15c5e:	d803      	bhi.n	15c68 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   15c60:	2000      	movs	r0, #0
   15c62:	b005      	add	sp, #20
   15c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   15c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15c6a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   15c6e:	681f      	ldr	r7, [r3, #0]
   15c70:	ab01      	add	r3, sp, #4
   15c72:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   15c76:	220c      	movs	r2, #12
   15c78:	4619      	mov	r1, r3
   15c7a:	4638      	mov	r0, r7
   15c7c:	f005 f8a4 	bl	1adc8 <memcmp>
   15c80:	b990      	cbnz	r0, 15ca8 <check_ext_api_requests+0x60>
   15c82:	b18f      	cbz	r7, 15ca8 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   15c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   15c86:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   15c88:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   15c8a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   15c8c:	4291      	cmp	r1, r2
   15c8e:	d10b      	bne.n	15ca8 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   15c90:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   15c92:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   15c94:	4291      	cmp	r1, r2
   15c96:	d807      	bhi.n	15ca8 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   15c98:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   15c9a:	4291      	cmp	r1, r2
   15c9c:	d904      	bls.n	15ca8 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   15c9e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   15ca0:	695b      	ldr	r3, [r3, #20]
   15ca2:	ea32 0303 	bics.w	r3, r2, r3
   15ca6:	d00a      	beq.n	15cbe <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   15ca8:	6a27      	ldr	r7, [r4, #32]
   15caa:	b167      	cbz	r7, 15cc6 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   15cac:	480c      	ldr	r0, [pc, #48]	; (15ce0 <check_ext_api_requests+0x98>)
   15cae:	f003 fe5c 	bl	1996a <printk>
			k_panic();
   15cb2:	4040      	eors	r0, r0
   15cb4:	f380 8811 	msr	BASEPRI, r0
   15cb8:	f04f 0004 	mov.w	r0, #4
   15cbc:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   15cbe:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15cc0:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   15cc2:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15cc4:	e7ca      	b.n	15c5c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   15cc6:	4648      	mov	r0, r9
   15cc8:	f003 fe4f 	bl	1996a <printk>
			*ext_api_req->ext_api = NULL;
   15ccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15cce:	601f      	str	r7, [r3, #0]
   15cd0:	e7f5      	b.n	15cbe <check_ext_api_requests+0x76>
   15cd2:	bf00      	nop
   15cd4:	0000823c 	.word	0x0000823c
   15cd8:	0001d830 	.word	0x0001d830
   15cdc:	00021306 	.word	0x00021306
   15ce0:	000212dd 	.word	0x000212dd

00015ce4 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   15ce4:	4b04      	ldr	r3, [pc, #16]	; (15cf8 <SystemCoreClockUpdate+0x14>)
   15ce6:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   15cea:	4b04      	ldr	r3, [pc, #16]	; (15cfc <SystemCoreClockUpdate+0x18>)
   15cec:	f002 0203 	and.w	r2, r2, #3
   15cf0:	40d3      	lsrs	r3, r2
   15cf2:	4a03      	ldr	r2, [pc, #12]	; (15d00 <SystemCoreClockUpdate+0x1c>)
   15cf4:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   15cf6:	4770      	bx	lr
   15cf8:	40005000 	.word	0x40005000
   15cfc:	07a12000 	.word	0x07a12000
   15d00:	20008528 	.word	0x20008528

00015d04 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   15d04:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   15d06:	4604      	mov	r4, r0
   15d08:	b940      	cbnz	r0, 15d1c <nrfx_clock_init+0x18>
   15d0a:	4909      	ldr	r1, [pc, #36]	; (15d30 <nrfx_clock_init+0x2c>)
   15d0c:	4809      	ldr	r0, [pc, #36]	; (15d34 <nrfx_clock_init+0x30>)
   15d0e:	22b3      	movs	r2, #179	; 0xb3
   15d10:	f003 fe2b 	bl	1996a <printk>
   15d14:	21b3      	movs	r1, #179	; 0xb3
   15d16:	4806      	ldr	r0, [pc, #24]	; (15d30 <nrfx_clock_init+0x2c>)
   15d18:	f004 f8cd 	bl	19eb6 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   15d1c:	4b06      	ldr	r3, [pc, #24]	; (15d38 <nrfx_clock_init+0x34>)
   15d1e:	791a      	ldrb	r2, [r3, #4]
   15d20:	b922      	cbnz	r2, 15d2c <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   15d22:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   15d24:	4805      	ldr	r0, [pc, #20]	; (15d3c <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   15d26:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   15d28:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15d2a:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   15d2c:	4804      	ldr	r0, [pc, #16]	; (15d40 <nrfx_clock_init+0x3c>)
    return err_code;
   15d2e:	e7fc      	b.n	15d2a <nrfx_clock_init+0x26>
   15d30:	00021339 	.word	0x00021339
   15d34:	0001ea60 	.word	0x0001ea60
   15d38:	2000ad4c 	.word	0x2000ad4c
   15d3c:	0bad0000 	.word	0x0bad0000
   15d40:	0bad000c 	.word	0x0bad000c

00015d44 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   15d44:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15d46:	4b0d      	ldr	r3, [pc, #52]	; (15d7c <nrfx_clock_enable+0x38>)
   15d48:	791b      	ldrb	r3, [r3, #4]
   15d4a:	b943      	cbnz	r3, 15d5e <nrfx_clock_enable+0x1a>
   15d4c:	490c      	ldr	r1, [pc, #48]	; (15d80 <nrfx_clock_enable+0x3c>)
   15d4e:	480d      	ldr	r0, [pc, #52]	; (15d84 <nrfx_clock_enable+0x40>)
   15d50:	22cc      	movs	r2, #204	; 0xcc
   15d52:	f003 fe0a 	bl	1996a <printk>
   15d56:	21cc      	movs	r1, #204	; 0xcc
   15d58:	4809      	ldr	r0, [pc, #36]	; (15d80 <nrfx_clock_enable+0x3c>)
   15d5a:	f004 f8ac 	bl	19eb6 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   15d5e:	2005      	movs	r0, #5
   15d60:	f7f6 ffde 	bl	cd20 <arch_irq_is_enabled>
   15d64:	b910      	cbnz	r0, 15d6c <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   15d66:	2005      	movs	r0, #5
   15d68:	f7f6 ffca 	bl	cd00 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   15d6c:	2201      	movs	r2, #1
   15d6e:	4b06      	ldr	r3, [pc, #24]	; (15d88 <nrfx_clock_enable+0x44>)
   15d70:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   15d74:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   15d78:	bd08      	pop	{r3, pc}
   15d7a:	bf00      	nop
   15d7c:	2000ad4c 	.word	0x2000ad4c
   15d80:	00021339 	.word	0x00021339
   15d84:	0001ea60 	.word	0x0001ea60
   15d88:	40005000 	.word	0x40005000

00015d8c <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15d8c:	4b30      	ldr	r3, [pc, #192]	; (15e50 <nrfx_clock_start+0xc4>)
{
   15d8e:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15d90:	791b      	ldrb	r3, [r3, #4]
{
   15d92:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15d94:	b953      	cbnz	r3, 15dac <nrfx_clock_start+0x20>
   15d96:	492f      	ldr	r1, [pc, #188]	; (15e54 <nrfx_clock_start+0xc8>)
   15d98:	482f      	ldr	r0, [pc, #188]	; (15e58 <nrfx_clock_start+0xcc>)
   15d9a:	f44f 7284 	mov.w	r2, #264	; 0x108
   15d9e:	f003 fde4 	bl	1996a <printk>
   15da2:	f44f 7184 	mov.w	r1, #264	; 0x108
   15da6:	482b      	ldr	r0, [pc, #172]	; (15e54 <nrfx_clock_start+0xc8>)
   15da8:	f004 f885 	bl	19eb6 <assert_post_action>
    switch (domain)
   15dac:	2c03      	cmp	r4, #3
   15dae:	d842      	bhi.n	15e36 <nrfx_clock_start+0xaa>
   15db0:	e8df f004 	tbb	[pc, r4]
   15db4:	34271c02 	.word	0x34271c02
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15db8:	4b28      	ldr	r3, [pc, #160]	; (15e5c <nrfx_clock_start+0xd0>)
   15dba:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15dbe:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   15dc2:	03c9      	lsls	r1, r1, #15
   15dc4:	d510      	bpl.n	15de8 <nrfx_clock_start+0x5c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   15dc6:	f002 0203 	and.w	r2, r2, #3
   15dca:	2a02      	cmp	r2, #2
   15dcc:	d10c      	bne.n	15de8 <nrfx_clock_start+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15dce:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15dd2:	2200      	movs	r2, #0
   15dd4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15dd8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   15ddc:	2202      	movs	r2, #2
   15dde:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15de2:	2201      	movs	r2, #1
   15de4:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   15de6:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   15de8:	2201      	movs	r2, #1
   15dea:	e7f0      	b.n	15dce <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15dec:	2200      	movs	r2, #0
   15dee:	4b1b      	ldr	r3, [pc, #108]	; (15e5c <nrfx_clock_start+0xd0>)
   15df0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15df4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   15df8:	2201      	movs	r2, #1
   15dfa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15dfe:	601a      	str	r2, [r3, #0]
}
   15e00:	e7f1      	b.n	15de6 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e02:	2200      	movs	r2, #0
   15e04:	4b15      	ldr	r3, [pc, #84]	; (15e5c <nrfx_clock_start+0xd0>)
   15e06:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15e0a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   15e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
   15e12:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e16:	2201      	movs	r2, #1
   15e18:	621a      	str	r2, [r3, #32]
}
   15e1a:	e7e4      	b.n	15de6 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e1c:	2200      	movs	r2, #0
   15e1e:	4b0f      	ldr	r3, [pc, #60]	; (15e5c <nrfx_clock_start+0xd0>)
   15e20:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15e24:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   15e28:	f44f 7280 	mov.w	r2, #256	; 0x100
   15e2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e30:	2201      	movs	r2, #1
   15e32:	619a      	str	r2, [r3, #24]
}
   15e34:	e7d7      	b.n	15de6 <nrfx_clock_start+0x5a>
            NRFX_ASSERT(0);
   15e36:	4907      	ldr	r1, [pc, #28]	; (15e54 <nrfx_clock_start+0xc8>)
   15e38:	4807      	ldr	r0, [pc, #28]	; (15e58 <nrfx_clock_start+0xcc>)
   15e3a:	f44f 729d 	mov.w	r2, #314	; 0x13a
   15e3e:	f003 fd94 	bl	1996a <printk>
}
   15e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   15e46:	f44f 719d 	mov.w	r1, #314	; 0x13a
   15e4a:	4802      	ldr	r0, [pc, #8]	; (15e54 <nrfx_clock_start+0xc8>)
   15e4c:	f004 b833 	b.w	19eb6 <assert_post_action>
   15e50:	2000ad4c 	.word	0x2000ad4c
   15e54:	00021339 	.word	0x00021339
   15e58:	0001ea60 	.word	0x0001ea60
   15e5c:	40005000 	.word	0x40005000

00015e60 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15e60:	4b42      	ldr	r3, [pc, #264]	; (15f6c <nrfx_clock_stop+0x10c>)
{
   15e62:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15e64:	791b      	ldrb	r3, [r3, #4]
{
   15e66:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15e68:	b953      	cbnz	r3, 15e80 <nrfx_clock_stop+0x20>
   15e6a:	4941      	ldr	r1, [pc, #260]	; (15f70 <nrfx_clock_stop+0x110>)
   15e6c:	4841      	ldr	r0, [pc, #260]	; (15f74 <nrfx_clock_stop+0x114>)
   15e6e:	f240 1241 	movw	r2, #321	; 0x141
   15e72:	f003 fd7a 	bl	1996a <printk>
   15e76:	f240 1141 	movw	r1, #321	; 0x141
   15e7a:	483d      	ldr	r0, [pc, #244]	; (15f70 <nrfx_clock_stop+0x110>)
   15e7c:	f004 f81b 	bl	19eb6 <assert_post_action>
    switch (domain)
   15e80:	2c03      	cmp	r4, #3
   15e82:	d856      	bhi.n	15f32 <nrfx_clock_stop+0xd2>
   15e84:	e8df f004 	tbb	[pc, r4]
   15e88:	483b2002 	.word	0x483b2002
    p_reg->INTENCLR = mask;
   15e8c:	2202      	movs	r2, #2
   15e8e:	4b3a      	ldr	r3, [pc, #232]	; (15f78 <nrfx_clock_stop+0x118>)
   15e90:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e94:	2200      	movs	r2, #0
   15e96:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15e9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e9e:	2201      	movs	r2, #1
   15ea0:	60da      	str	r2, [r3, #12]
   15ea2:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   15ea6:	4e34      	ldr	r6, [pc, #208]	; (15f78 <nrfx_clock_stop+0x118>)
    switch (domain)
   15ea8:	2c02      	cmp	r4, #2
   15eaa:	d04f      	beq.n	15f4c <nrfx_clock_stop+0xec>
   15eac:	2c03      	cmp	r4, #3
   15eae:	d050      	beq.n	15f52 <nrfx_clock_stop+0xf2>
   15eb0:	2c00      	cmp	r4, #0
   15eb2:	d151      	bne.n	15f58 <nrfx_clock_stop+0xf8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15eb4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   15eb8:	03db      	lsls	r3, r3, #15
   15eba:	d51f      	bpl.n	15efc <nrfx_clock_stop+0x9c>
   15ebc:	2001      	movs	r0, #1
   15ebe:	f006 fc8e 	bl	1c7de <nrfx_busy_wait>
   15ec2:	3d01      	subs	r5, #1
   15ec4:	d1f0      	bne.n	15ea8 <nrfx_clock_stop+0x48>
   15ec6:	e019      	b.n	15efc <nrfx_clock_stop+0x9c>
    p_reg->INTENCLR = mask;
   15ec8:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15eca:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15ecc:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   15ed0:	4c29      	ldr	r4, [pc, #164]	; (15f78 <nrfx_clock_stop+0x118>)
   15ed2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15ed6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   15eda:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15ede:	6063      	str	r3, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15ee0:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15ee4:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15ee8:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15eec:	03d2      	lsls	r2, r2, #15
   15eee:	d505      	bpl.n	15efc <nrfx_clock_stop+0x9c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   15ef0:	b123      	cbz	r3, 15efc <nrfx_clock_stop+0x9c>
   15ef2:	2001      	movs	r0, #1
   15ef4:	f006 fc73 	bl	1c7de <nrfx_busy_wait>
   15ef8:	3d01      	subs	r5, #1
   15efa:	d1f1      	bne.n	15ee0 <nrfx_clock_stop+0x80>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   15efc:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   15efe:	f44f 7200 	mov.w	r2, #512	; 0x200
   15f02:	4b1d      	ldr	r3, [pc, #116]	; (15f78 <nrfx_clock_stop+0x118>)
   15f04:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f08:	2200      	movs	r2, #0
   15f0a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15f0e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f12:	2201      	movs	r2, #1
   15f14:	625a      	str	r2, [r3, #36]	; 0x24
}
   15f16:	e7c4      	b.n	15ea2 <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   15f18:	f44f 7280 	mov.w	r2, #256	; 0x100
   15f1c:	4b16      	ldr	r3, [pc, #88]	; (15f78 <nrfx_clock_stop+0x118>)
   15f1e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f22:	2200      	movs	r2, #0
   15f24:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15f28:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f2c:	2201      	movs	r2, #1
   15f2e:	61da      	str	r2, [r3, #28]
}
   15f30:	e7b7      	b.n	15ea2 <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   15f32:	490f      	ldr	r1, [pc, #60]	; (15f70 <nrfx_clock_stop+0x110>)
   15f34:	480f      	ldr	r0, [pc, #60]	; (15f74 <nrfx_clock_stop+0x114>)
   15f36:	f240 125d 	movw	r2, #349	; 0x15d
   15f3a:	f003 fd16 	bl	1996a <printk>
   15f3e:	f240 115d 	movw	r1, #349	; 0x15d
   15f42:	480b      	ldr	r0, [pc, #44]	; (15f70 <nrfx_clock_stop+0x110>)
}
   15f44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
   15f48:	f003 bfb5 	b.w	19eb6 <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   15f4c:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   15f50:	e7b2      	b.n	15eb8 <nrfx_clock_stop+0x58>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   15f52:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   15f56:	e7af      	b.n	15eb8 <nrfx_clock_stop+0x58>
            NRFX_ASSERT(0);
   15f58:	4908      	ldr	r1, [pc, #32]	; (15f7c <nrfx_clock_stop+0x11c>)
   15f5a:	4806      	ldr	r0, [pc, #24]	; (15f74 <nrfx_clock_stop+0x114>)
   15f5c:	f240 3242 	movw	r2, #834	; 0x342
   15f60:	f003 fd03 	bl	1996a <printk>
   15f64:	f240 3142 	movw	r1, #834	; 0x342
   15f68:	4804      	ldr	r0, [pc, #16]	; (15f7c <nrfx_clock_stop+0x11c>)
   15f6a:	e7eb      	b.n	15f44 <nrfx_clock_stop+0xe4>
   15f6c:	2000ad4c 	.word	0x2000ad4c
   15f70:	00021339 	.word	0x00021339
   15f74:	0001ea60 	.word	0x0001ea60
   15f78:	40005000 	.word	0x40005000
   15f7c:	00021376 	.word	0x00021376

00015f80 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15f80:	4b28      	ldr	r3, [pc, #160]	; (16024 <nrfx_power_clock_irq_handler+0xa4>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   15f82:	b510      	push	{r4, lr}
   15f84:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   15f88:	b152      	cbz	r2, 15fa0 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f8a:	2000      	movs	r0, #0
   15f8c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   15f90:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   15f94:	2201      	movs	r2, #1
   15f96:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   15f9a:	4b23      	ldr	r3, [pc, #140]	; (16028 <nrfx_power_clock_irq_handler+0xa8>)
   15f9c:	681b      	ldr	r3, [r3, #0]
   15f9e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15fa0:	4b20      	ldr	r3, [pc, #128]	; (16024 <nrfx_power_clock_irq_handler+0xa4>)
   15fa2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   15fa6:	b18a      	cbz	r2, 15fcc <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15fa8:	2200      	movs	r2, #0
   15faa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15fae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15fb2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15fb6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   15fba:	f002 0203 	and.w	r2, r2, #3
   15fbe:	2a01      	cmp	r2, #1
   15fc0:	f04f 0102 	mov.w	r1, #2
   15fc4:	d126      	bne.n	16014 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15fc6:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15fca:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15fcc:	4b15      	ldr	r3, [pc, #84]	; (16024 <nrfx_power_clock_irq_handler+0xa4>)
   15fce:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   15fd2:	b162      	cbz	r2, 15fee <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15fd4:	2200      	movs	r2, #0
   15fd6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15fda:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   15fde:	f44f 7280 	mov.w	r2, #256	; 0x100
   15fe2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   15fe6:	4b10      	ldr	r3, [pc, #64]	; (16028 <nrfx_power_clock_irq_handler+0xa8>)
   15fe8:	2004      	movs	r0, #4
   15fea:	681b      	ldr	r3, [r3, #0]
   15fec:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   15fee:	4b0d      	ldr	r3, [pc, #52]	; (16024 <nrfx_power_clock_irq_handler+0xa4>)
   15ff0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   15ff4:	b1aa      	cbz	r2, 16022 <nrfx_power_clock_irq_handler+0xa2>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   15ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15ffa:	2200      	movs	r2, #0
   15ffc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16000:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   16004:	f44f 7200 	mov.w	r2, #512	; 0x200
   16008:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   1600c:	4b06      	ldr	r3, [pc, #24]	; (16028 <nrfx_power_clock_irq_handler+0xa8>)
   1600e:	2005      	movs	r0, #5
   16010:	681b      	ldr	r3, [r3, #0]
   16012:	4718      	bx	r3
   16014:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   16018:	4b03      	ldr	r3, [pc, #12]	; (16028 <nrfx_power_clock_irq_handler+0xa8>)
   1601a:	2001      	movs	r0, #1
   1601c:	681b      	ldr	r3, [r3, #0]
   1601e:	4798      	blx	r3
   16020:	e7d4      	b.n	15fcc <nrfx_power_clock_irq_handler+0x4c>
}
   16022:	bd10      	pop	{r4, pc}
   16024:	40005000 	.word	0x40005000
   16028:	2000ad4c 	.word	0x2000ad4c

0001602c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1602c:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   1602e:	4c0a      	ldr	r4, [pc, #40]	; (16058 <nrfx_dppi_channel_alloc+0x2c>)
   16030:	6821      	ldr	r1, [r4, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   16032:	43ce      	mvns	r6, r1
   16034:	d00e      	beq.n	16054 <nrfx_dppi_channel_alloc+0x28>
   16036:	2300      	movs	r3, #0
   16038:	b2da      	uxtb	r2, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   1603a:	fa26 f502 	lsr.w	r5, r6, r2
   1603e:	07ed      	lsls	r5, r5, #31
   16040:	f103 0301 	add.w	r3, r3, #1
   16044:	d5f8      	bpl.n	16038 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   16046:	2301      	movs	r3, #1
   16048:	4093      	lsls	r3, r2
   1604a:	430b      	orrs	r3, r1
    *p_channel = channel;
   1604c:	7002      	strb	r2, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   1604e:	4803      	ldr	r0, [pc, #12]	; (1605c <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   16050:	6023      	str	r3, [r4, #0]
}
   16052:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   16054:	4802      	ldr	r0, [pc, #8]	; (16060 <nrfx_dppi_channel_alloc+0x34>)
   16056:	e7fc      	b.n	16052 <nrfx_dppi_channel_alloc+0x26>
   16058:	2000ad54 	.word	0x2000ad54
   1605c:	0bad0000 	.word	0x0bad0000
   16060:	0bad0002 	.word	0x0bad0002

00016064 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   16064:	2301      	movs	r3, #1
   16066:	fa03 f000 	lsl.w	r0, r3, r0
   1606a:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1606c:	b193      	cbz	r3, 16094 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   1606e:	f04f 0320 	mov.w	r3, #32
   16072:	f3ef 8111 	mrs	r1, BASEPRI
   16076:	f383 8811 	msr	BASEPRI, r3
   1607a:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1607e:	4a06      	ldr	r2, [pc, #24]	; (16098 <nrfx_gpiote_channel_free+0x34>)
   16080:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   16082:	ea23 0000 	bic.w	r0, r3, r0
   16086:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   16088:	f381 8811 	msr	BASEPRI, r1
   1608c:	f3bf 8f6f 	isb	sy
   16090:	4802      	ldr	r0, [pc, #8]	; (1609c <nrfx_gpiote_channel_free+0x38>)
   16092:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   16094:	4802      	ldr	r0, [pc, #8]	; (160a0 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16096:	4770      	bx	lr
   16098:	2000ad58 	.word	0x2000ad58
   1609c:	0bad0000 	.word	0x0bad0000
   160a0:	0bad0004 	.word	0x0bad0004

000160a4 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   160a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   160a8:	22ff      	movs	r2, #255	; 0xff
{
   160aa:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   160ac:	2601      	movs	r6, #1
{
   160ae:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   160b0:	f8df e054 	ldr.w	lr, [pc, #84]	; 16108 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   160b4:	4815      	ldr	r0, [pc, #84]	; (1610c <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   160b6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 16110 <nrfx_gpiote_channel_alloc+0x6c>
   160ba:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   160bc:	f04f 0120 	mov.w	r1, #32
   160c0:	f3ef 8c11 	mrs	ip, BASEPRI
   160c4:	f381 8811 	msr	BASEPRI, r1
   160c8:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   160cc:	fa22 f103 	lsr.w	r1, r2, r3
   160d0:	07c9      	lsls	r1, r1, #31
   160d2:	d50a      	bpl.n	160ea <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   160d4:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   160d8:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   160dc:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   160de:	bf01      	itttt	eq
   160e0:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   160e2:	4339      	orreq	r1, r7
   160e4:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   160e8:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   160ea:	f38c 8811 	msr	BASEPRI, ip
   160ee:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   160f2:	4540      	cmp	r0, r8
   160f4:	d005      	beq.n	16102 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   160f6:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   160fa:	439a      	bics	r2, r3
   160fc:	f104 0401 	add.w	r4, r4, #1
   16100:	d1db      	bne.n	160ba <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16106:	bf00      	nop
   16108:	2000ad58 	.word	0x2000ad58
   1610c:	0bad0002 	.word	0x0bad0002
   16110:	0bad0000 	.word	0x0bad0000

00016114 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   16114:	b570      	push	{r4, r5, r6, lr}
   16116:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   16118:	460d      	mov	r5, r1
   1611a:	b941      	cbnz	r1, 1612e <nrfx_ipc_init+0x1a>
   1611c:	490b      	ldr	r1, [pc, #44]	; (1614c <nrfx_ipc_init+0x38>)
   1611e:	480c      	ldr	r0, [pc, #48]	; (16150 <nrfx_ipc_init+0x3c>)
   16120:	2232      	movs	r2, #50	; 0x32
   16122:	f003 fc22 	bl	1996a <printk>
   16126:	2132      	movs	r1, #50	; 0x32
   16128:	4808      	ldr	r0, [pc, #32]	; (1614c <nrfx_ipc_init+0x38>)
   1612a:	f003 fec4 	bl	19eb6 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1612e:	4c09      	ldr	r4, [pc, #36]	; (16154 <nrfx_ipc_init+0x40>)
   16130:	7923      	ldrb	r3, [r4, #4]
   16132:	b943      	cbnz	r3, 16146 <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   16134:	202a      	movs	r0, #42	; 0x2a
   16136:	f7f6 fde3 	bl	cd00 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1613a:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   1613c:	4806      	ldr	r0, [pc, #24]	; (16158 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1613e:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   16140:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   16142:	60a6      	str	r6, [r4, #8]
}
   16144:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   16146:	4805      	ldr	r0, [pc, #20]	; (1615c <nrfx_ipc_init+0x48>)
   16148:	e7fc      	b.n	16144 <nrfx_ipc_init+0x30>
   1614a:	bf00      	nop
   1614c:	000213aa 	.word	0x000213aa
   16150:	0001ea60 	.word	0x0001ea60
   16154:	2000adb8 	.word	0x2000adb8
   16158:	0bad0000 	.word	0x0bad0000
   1615c:	0bad000c 	.word	0x0bad000c

00016160 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   16160:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   16162:	4604      	mov	r4, r0
   16164:	b940      	cbnz	r0, 16178 <nrfx_ipc_config_load+0x18>
   16166:	4919      	ldr	r1, [pc, #100]	; (161cc <nrfx_ipc_config_load+0x6c>)
   16168:	4819      	ldr	r0, [pc, #100]	; (161d0 <nrfx_ipc_config_load+0x70>)
   1616a:	2244      	movs	r2, #68	; 0x44
   1616c:	f003 fbfd 	bl	1996a <printk>
   16170:	2144      	movs	r1, #68	; 0x44
   16172:	4816      	ldr	r0, [pc, #88]	; (161cc <nrfx_ipc_config_load+0x6c>)
   16174:	f003 fe9f 	bl	19eb6 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16178:	4b16      	ldr	r3, [pc, #88]	; (161d4 <nrfx_ipc_config_load+0x74>)
   1617a:	791b      	ldrb	r3, [r3, #4]
   1617c:	2b01      	cmp	r3, #1
   1617e:	d008      	beq.n	16192 <nrfx_ipc_config_load+0x32>
   16180:	4912      	ldr	r1, [pc, #72]	; (161cc <nrfx_ipc_config_load+0x6c>)
   16182:	4813      	ldr	r0, [pc, #76]	; (161d0 <nrfx_ipc_config_load+0x70>)
   16184:	2245      	movs	r2, #69	; 0x45
   16186:	f003 fbf0 	bl	1996a <printk>
   1618a:	2145      	movs	r1, #69	; 0x45
   1618c:	480f      	ldr	r0, [pc, #60]	; (161cc <nrfx_ipc_config_load+0x6c>)
   1618e:	f003 fe92 	bl	19eb6 <assert_post_action>
{
   16192:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   16194:	4a10      	ldr	r2, [pc, #64]	; (161d8 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   16196:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   1619a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1619e:	3301      	adds	r3, #1
   161a0:	2b10      	cmp	r3, #16
   161a2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   161a6:	d1f6      	bne.n	16196 <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   161a8:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   161aa:	4a0b      	ldr	r2, [pc, #44]	; (161d8 <nrfx_ipc_config_load+0x78>)
   161ac:	f104 0140 	add.w	r1, r4, #64	; 0x40
   161b0:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   161b4:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   161b8:	3301      	adds	r3, #1
   161ba:	2b10      	cmp	r3, #16
   161bc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   161c0:	d1f6      	bne.n	161b0 <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   161c2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
   161c6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   161ca:	bd38      	pop	{r3, r4, r5, pc}
   161cc:	000213aa 	.word	0x000213aa
   161d0:	0001ea60 	.word	0x0001ea60
   161d4:	2000adb8 	.word	0x2000adb8
   161d8:	4002a000 	.word	0x4002a000

000161dc <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   161dc:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   161de:	4b0a      	ldr	r3, [pc, #40]	; (16208 <nrfx_ipc_receive_event_enable+0x2c>)
{
   161e0:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   161e2:	791b      	ldrb	r3, [r3, #4]
   161e4:	2b01      	cmp	r3, #1
   161e6:	d008      	beq.n	161fa <nrfx_ipc_receive_event_enable+0x1e>
   161e8:	4908      	ldr	r1, [pc, #32]	; (1620c <nrfx_ipc_receive_event_enable+0x30>)
   161ea:	4809      	ldr	r0, [pc, #36]	; (16210 <nrfx_ipc_receive_event_enable+0x34>)
   161ec:	226a      	movs	r2, #106	; 0x6a
   161ee:	f003 fbbc 	bl	1996a <printk>
   161f2:	216a      	movs	r1, #106	; 0x6a
   161f4:	4805      	ldr	r0, [pc, #20]	; (1620c <nrfx_ipc_receive_event_enable+0x30>)
   161f6:	f003 fe5e 	bl	19eb6 <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   161fa:	2301      	movs	r3, #1
   161fc:	fa03 f404 	lsl.w	r4, r3, r4
   16200:	4b04      	ldr	r3, [pc, #16]	; (16214 <nrfx_ipc_receive_event_enable+0x38>)
   16202:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   16206:	bd10      	pop	{r4, pc}
   16208:	2000adb8 	.word	0x2000adb8
   1620c:	000213aa 	.word	0x000213aa
   16210:	0001ea60 	.word	0x0001ea60
   16214:	4002a000 	.word	0x4002a000

00016218 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   16218:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1621a:	4b0a      	ldr	r3, [pc, #40]	; (16244 <nrfx_ipc_receive_event_disable+0x2c>)
{
   1621c:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1621e:	791b      	ldrb	r3, [r3, #4]
   16220:	2b01      	cmp	r3, #1
   16222:	d008      	beq.n	16236 <nrfx_ipc_receive_event_disable+0x1e>
   16224:	4908      	ldr	r1, [pc, #32]	; (16248 <nrfx_ipc_receive_event_disable+0x30>)
   16226:	4809      	ldr	r0, [pc, #36]	; (1624c <nrfx_ipc_receive_event_disable+0x34>)
   16228:	2270      	movs	r2, #112	; 0x70
   1622a:	f003 fb9e 	bl	1996a <printk>
   1622e:	2170      	movs	r1, #112	; 0x70
   16230:	4805      	ldr	r0, [pc, #20]	; (16248 <nrfx_ipc_receive_event_disable+0x30>)
   16232:	f003 fe40 	bl	19eb6 <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   16236:	2301      	movs	r3, #1
   16238:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   1623c:	4b04      	ldr	r3, [pc, #16]	; (16250 <nrfx_ipc_receive_event_disable+0x38>)
   1623e:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   16242:	bd10      	pop	{r4, pc}
   16244:	2000adb8 	.word	0x2000adb8
   16248:	000213aa 	.word	0x000213aa
   1624c:	0001ea60 	.word	0x0001ea60
   16250:	4002a000 	.word	0x4002a000

00016254 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   16254:	4b15      	ldr	r3, [pc, #84]	; (162ac <nrfx_ipc_irq_handler+0x58>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   16256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1625a:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   1625e:	4f14      	ldr	r7, [pc, #80]	; (162b0 <nrfx_ipc_irq_handler+0x5c>)
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   16260:	4635      	mov	r5, r6
   16262:	f8df 8050 	ldr.w	r8, [pc, #80]	; 162b4 <nrfx_ipc_irq_handler+0x60>
    while (bitmask)
   16266:	b935      	cbnz	r5, 16276 <nrfx_ipc_irq_handler+0x22>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   16268:	4b13      	ldr	r3, [pc, #76]	; (162b8 <nrfx_ipc_irq_handler+0x64>)
   1626a:	4630      	mov	r0, r6
}
   1626c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   16270:	681a      	ldr	r2, [r3, #0]
   16272:	6899      	ldr	r1, [r3, #8]
   16274:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   16276:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   1627a:	2301      	movs	r3, #1
  return __builtin_clz(value);
   1627c:	fab4 f484 	clz	r4, r4
   16280:	40a3      	lsls	r3, r4
   16282:	2c0f      	cmp	r4, #15
   16284:	ea25 0503 	bic.w	r5, r5, r3
   16288:	d90a      	bls.n	162a0 <nrfx_ipc_irq_handler+0x4c>
   1628a:	4639      	mov	r1, r7
   1628c:	4640      	mov	r0, r8
   1628e:	f240 12e5 	movw	r2, #485	; 0x1e5
   16292:	f003 fb6a 	bl	1996a <printk>
   16296:	f240 11e5 	movw	r1, #485	; 0x1e5
   1629a:	4638      	mov	r0, r7
   1629c:	f003 fe0b 	bl	19eb6 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   162a0:	2200      	movs	r2, #0
   162a2:	4b06      	ldr	r3, [pc, #24]	; (162bc <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   162a4:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   162a6:	511a      	str	r2, [r3, r4]
}
   162a8:	e7dd      	b.n	16266 <nrfx_ipc_irq_handler+0x12>
   162aa:	bf00      	nop
   162ac:	4002a000 	.word	0x4002a000
   162b0:	000213e5 	.word	0x000213e5
   162b4:	0001ea60 	.word	0x0001ea60
   162b8:	2000adb8 	.word	0x2000adb8
   162bc:	4002a100 	.word	0x4002a100

000162c0 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   162c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   162c4:	460e      	mov	r6, r1
   162c6:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   162c8:	4d0c      	ldr	r5, [pc, #48]	; (162fc <metal_generic_dev_open+0x3c>)
   162ca:	f855 4f18 	ldr.w	r4, [r5, #24]!
   162ce:	42ac      	cmp	r4, r5
   162d0:	d103      	bne.n	162da <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   162d2:	f06f 0012 	mvn.w	r0, #18
   162d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   162da:	4631      	mov	r1, r6
   162dc:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   162e0:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   162e4:	f004 fd53 	bl	1ad8e <strcmp>
   162e8:	b930      	cbnz	r0, 162f8 <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
   162ea:	4640      	mov	r0, r8
			*device = dev;
   162ec:	f8c7 8000 	str.w	r8, [r7]
}
   162f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   162f4:	f006 bb4c 	b.w	1c990 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   162f8:	6824      	ldr	r4, [r4, #0]
   162fa:	e7e8      	b.n	162ce <metal_generic_dev_open+0xe>
   162fc:	2000adc4 	.word	0x2000adc4

00016300 <metal_bus_find>:
{
   16300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16304:	4607      	mov	r7, r0
   16306:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   16308:	4e0b      	ldr	r6, [pc, #44]	; (16338 <metal_bus_find+0x38>)
   1630a:	f856 4f08 	ldr.w	r4, [r6, #8]!
   1630e:	42b4      	cmp	r4, r6
   16310:	d102      	bne.n	16318 <metal_bus_find+0x18>
	return -ENOENT;
   16312:	f06f 0001 	mvn.w	r0, #1
   16316:	e00a      	b.n	1632e <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   16318:	4639      	mov	r1, r7
   1631a:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   1631e:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   16322:	f004 fd34 	bl	1ad8e <strcmp>
   16326:	b920      	cbnz	r0, 16332 <metal_bus_find+0x32>
   16328:	b11d      	cbz	r5, 16332 <metal_bus_find+0x32>
			*result = bus;
   1632a:	f8c5 8000 	str.w	r8, [r5]
}
   1632e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   16332:	6824      	ldr	r4, [r4, #0]
   16334:	e7eb      	b.n	1630e <metal_bus_find+0xe>
   16336:	bf00      	nop
   16338:	2000adc4 	.word	0x2000adc4

0001633c <metal_bus_register>:
{
   1633c:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   1633e:	4604      	mov	r4, r0
   16340:	b910      	cbnz	r0, 16348 <metal_bus_register+0xc>
		return -EINVAL;
   16342:	f06f 0015 	mvn.w	r0, #21
}
   16346:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   16348:	6800      	ldr	r0, [r0, #0]
   1634a:	2800      	cmp	r0, #0
   1634c:	d0f9      	beq.n	16342 <metal_bus_register+0x6>
   1634e:	f004 fd0e 	bl	1ad6e <strlen>
   16352:	2800      	cmp	r0, #0
   16354:	d0f5      	beq.n	16342 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   16356:	2100      	movs	r1, #0
   16358:	6820      	ldr	r0, [r4, #0]
   1635a:	f7ff ffd1 	bl	16300 <metal_bus_find>
   1635e:	b1c0      	cbz	r0, 16392 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   16360:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
   16364:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
   16368:	4b0c      	ldr	r3, [pc, #48]	; (1639c <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   1636a:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1636e:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   16370:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   16374:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   16376:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   16378:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   1637a:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   1637c:	781a      	ldrb	r2, [r3, #0]
   1637e:	2a06      	cmp	r2, #6
   16380:	d905      	bls.n	1638e <metal_bus_register+0x52>
   16382:	685b      	ldr	r3, [r3, #4]
   16384:	b143      	cbz	r3, 16398 <metal_bus_register+0x5c>
   16386:	2007      	movs	r0, #7
   16388:	6822      	ldr	r2, [r4, #0]
   1638a:	4905      	ldr	r1, [pc, #20]	; (163a0 <metal_bus_register+0x64>)
   1638c:	4798      	blx	r3
	return 0;
   1638e:	2000      	movs	r0, #0
   16390:	e7d9      	b.n	16346 <metal_bus_register+0xa>
		return -EEXIST;
   16392:	f06f 0010 	mvn.w	r0, #16
   16396:	e7d6      	b.n	16346 <metal_bus_register+0xa>
	return 0;
   16398:	4618      	mov	r0, r3
   1639a:	e7d4      	b.n	16346 <metal_bus_register+0xa>
   1639c:	2000adc4 	.word	0x2000adc4
   163a0:	00021417 	.word	0x00021417

000163a4 <metal_register_generic_device>:
{
   163a4:	b510      	push	{r4, lr}
   163a6:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   163a8:	6800      	ldr	r0, [r0, #0]
   163aa:	b910      	cbnz	r0, 163b2 <metal_register_generic_device+0xe>
		return -EINVAL;
   163ac:	f06f 0015 	mvn.w	r0, #21
}
   163b0:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   163b2:	f004 fcdc 	bl	1ad6e <strlen>
   163b6:	2800      	cmp	r0, #0
   163b8:	d0f8      	beq.n	163ac <metal_register_generic_device+0x8>
   163ba:	68a3      	ldr	r3, [r4, #8]
   163bc:	2b01      	cmp	r3, #1
   163be:	d8f5      	bhi.n	163ac <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   163c0:	4b06      	ldr	r3, [pc, #24]	; (163dc <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   163c2:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   163c6:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   163c8:	4b05      	ldr	r3, [pc, #20]	; (163e0 <metal_register_generic_device+0x3c>)
   163ca:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   163cc:	f103 0018 	add.w	r0, r3, #24
   163d0:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   163d2:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   163d4:	61d9      	str	r1, [r3, #28]
	return 0;
   163d6:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   163d8:	6011      	str	r1, [r2, #0]
}
   163da:	e7e9      	b.n	163b0 <metal_register_generic_device+0xc>
   163dc:	2000852c 	.word	0x2000852c
   163e0:	2000adc4 	.word	0x2000adc4

000163e4 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   163e4:	b538      	push	{r3, r4, r5, lr}
   163e6:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   163e8:	4c0d      	ldr	r4, [pc, #52]	; (16420 <metal_init+0x3c>)
   163ea:	2220      	movs	r2, #32
   163ec:	4620      	mov	r0, r4
   163ee:	2100      	movs	r1, #0
   163f0:	f004 fd26 	bl	1ae40 <memset>

	_metal.common.log_handler   = params->log_handler;
   163f4:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   163f6:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   163f8:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   163fa:	4623      	mov	r3, r4
   163fc:	792a      	ldrb	r2, [r5, #4]
   163fe:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   16402:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   16406:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   1640a:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   1640e:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   16412:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   16416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   1641a:	f000 b803 	b.w	16424 <metal_sys_init>
   1641e:	bf00      	nop
   16420:	2000adc4 	.word	0x2000adc4

00016424 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   16424:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   16426:	4802      	ldr	r0, [pc, #8]	; (16430 <metal_sys_init+0xc>)
   16428:	f7ff ff88 	bl	1633c <metal_bus_register>
	return 0;
}
   1642c:	2000      	movs	r0, #0
   1642e:	bd08      	pop	{r3, pc}
   16430:	2000852c 	.word	0x2000852c

00016434 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   16434:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   16436:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   16438:	2b06      	cmp	r3, #6
{
   1643a:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   1643c:	bf88      	it	hi
   1643e:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   16440:	4b09      	ldr	r3, [pc, #36]	; (16468 <metal_zephyr_log_handler+0x34>)
{
   16442:	ac05      	add	r4, sp, #20
   16444:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   16448:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   1644c:	4807      	ldr	r0, [pc, #28]	; (1646c <metal_zephyr_log_handler+0x38>)
   1644e:	f003 fa8c 	bl	1996a <printk>

	va_start(args, format);
	vprintk(format, args);
   16452:	4621      	mov	r1, r4
   16454:	4628      	mov	r0, r5
	va_start(args, format);
   16456:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   16458:	f7f3 fd0e 	bl	9e78 <vprintk>
	va_end(args);
}
   1645c:	b002      	add	sp, #8
   1645e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   16462:	b003      	add	sp, #12
   16464:	4770      	bx	lr
   16466:	bf00      	nop
   16468:	0001e124 	.word	0x0001e124
   1646c:	0001fb67 	.word	0x0001fb67

00016470 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   16470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16474:	b087      	sub	sp, #28
   16476:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   16478:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   1647a:	4605      	mov	r5, r0
	if (nvqs > num_vrings)
   1647c:	4293      	cmp	r3, r2
{
   1647e:	4616      	mov	r6, r2
	if (nvqs > num_vrings)
   16480:	d349      	bcc.n	16516 <virtio_create_virtqueues+0xa6>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   16482:	2400      	movs	r4, #0
		vring_info = &vdev->vrings_info[i];
   16484:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   16488:	42b4      	cmp	r4, r6
   1648a:	d103      	bne.n	16494 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   1648c:	2000      	movs	r0, #0
}
   1648e:	b007      	add	sp, #28
   16490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   16494:	fb0b f704 	mul.w	r7, fp, r4
   16498:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
   1649c:	69aa      	ldr	r2, [r5, #24]
		vring_info = &vdev->vrings_info[i];
   1649e:	eb08 0c07 	add.w	ip, r8, r7
		vring_alloc = &vring_info->info;
   164a2:	f10c 0904 	add.w	r9, ip, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
   164a6:	bb02      	cbnz	r2, 164ea <virtio_create_virtqueues+0x7a>
			struct metal_io_region *io = vring_info->io;
   164a8:	f8dc 0014 	ldr.w	r0, [ip, #20]
			metal_io_block_set(io, offset, 0,
   164ac:	f8bc e00c 	ldrh.w	lr, [ip, #12]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   164b0:	f8dc 3004 	ldr.w	r3, [ip, #4]
   164b4:	6801      	ldr	r1, [r0, #0]
						      vring_alloc->align));
   164b6:	f8dc c008 	ldr.w	ip, [ip, #8]
   164ba:	1a59      	subs	r1, r3, r1
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   164bc:	f10c 33ff 	add.w	r3, ip, #4294967295
   164c0:	eb03 130e 	add.w	r3, r3, lr, lsl #4
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   164c4:	f10e 0a03 	add.w	sl, lr, #3
	size = (size + align - 1) & ~(align - 1);
   164c8:	f1cc 0c00 	rsb	ip, ip, #0
   164cc:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   164d0:	ea03 030c 	and.w	r3, r3, ip
			metal_io_block_set(io, offset, 0,
   164d4:	f8d0 c008 	ldr.w	ip, [r0, #8]
	size += sizeof(struct vring_used) +
   164d8:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
   164dc:	4561      	cmp	r1, ip
   164de:	bf28      	it	cs
   164e0:	f04f 31ff 	movcs.w	r1, #4294967295
   164e4:	3306      	adds	r3, #6
   164e6:	f006 fa1a 	bl	1c91e <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   164ea:	f858 3007 	ldr.w	r3, [r8, r7]
   164ee:	9a05      	ldr	r2, [sp, #20]
   164f0:	9302      	str	r3, [sp, #8]
   164f2:	6a2b      	ldr	r3, [r5, #32]
   164f4:	4628      	mov	r0, r5
   164f6:	6a1b      	ldr	r3, [r3, #32]
   164f8:	b2a1      	uxth	r1, r4
   164fa:	9301      	str	r3, [sp, #4]
   164fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   164fe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   16502:	9300      	str	r3, [sp, #0]
   16504:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   16508:	464b      	mov	r3, r9
   1650a:	f006 fa5e 	bl	1c9ca <virtqueue_create>
		if (ret)
   1650e:	2800      	cmp	r0, #0
   16510:	d1bd      	bne.n	1648e <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   16512:	3401      	adds	r4, #1
   16514:	e7b8      	b.n	16488 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   16516:	4801      	ldr	r0, [pc, #4]	; (1651c <virtio_create_virtqueues+0xac>)
   16518:	e7b9      	b.n	1648e <virtio_create_virtqueues+0x1e>
   1651a:	bf00      	nop
   1651c:	fffff440 	.word	0xfffff440

00016520 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   16520:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   16522:	8944      	ldrh	r4, [r0, #10]
   16524:	428c      	cmp	r4, r1
   16526:	d312      	bcc.n	1654e <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   16528:	6a03      	ldr	r3, [r0, #32]
   1652a:	3c01      	subs	r4, #1
   1652c:	885d      	ldrh	r5, [r3, #2]
   1652e:	402c      	ands	r4, r5
   16530:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
   16534:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
   16536:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   16538:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   1653c:	6a02      	ldr	r2, [r0, #32]
   1653e:	8853      	ldrh	r3, [r2, #2]
   16540:	3301      	adds	r3, #1
   16542:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   16544:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   16546:	3301      	adds	r3, #1
   16548:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   1654a:	2000      	movs	r0, #0
}
   1654c:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   1654e:	4801      	ldr	r0, [pc, #4]	; (16554 <virtqueue_add_consumed_buffer+0x34>)
   16550:	e7fc      	b.n	1654c <virtqueue_add_consumed_buffer+0x2c>
   16552:	bf00      	nop
   16554:	fffff441 	.word	0xfffff441

00016558 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
   16558:	b4f0      	push	{r4, r5, r6, r7}
   1655a:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   1655c:	b148      	cbz	r0, 16572 <rpmsg_send_offchannel_raw+0x1a>
   1655e:	6a00      	ldr	r0, [r0, #32]
   16560:	b138      	cbz	r0, 16572 <rpmsg_send_offchannel_raw+0x1a>
   16562:	b133      	cbz	r3, 16572 <rpmsg_send_offchannel_raw+0x1a>
   16564:	3401      	adds	r4, #1
   16566:	d004      	beq.n	16572 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   16568:	6f44      	ldr	r4, [r0, #116]	; 0x74
   1656a:	b114      	cbz	r4, 16572 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1656c:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
   1656e:	bcf0      	pop	{r4, r5, r6, r7}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   16570:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   16572:	4801      	ldr	r0, [pc, #4]	; (16578 <rpmsg_send_offchannel_raw+0x20>)
}
   16574:	bcf0      	pop	{r4, r5, r6, r7}
   16576:	4770      	bx	lr
   16578:	fffff82d 	.word	0xfffff82d

0001657c <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   1657c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16580:	460e      	mov	r6, r1
   16582:	4690      	mov	r8, r2
   16584:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   16586:	4605      	mov	r5, r0
   16588:	2800      	cmp	r0, #0
   1658a:	d06a      	beq.n	16662 <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   1658c:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   16590:	4638      	mov	r0, r7
   16592:	f006 fbac 	bl	1ccee <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   16596:	1c63      	adds	r3, r4, #1
   16598:	d11a      	bne.n	165d0 <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   1659a:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   1659c:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   165a0:	095a      	lsrs	r2, r3, #5
   165a2:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   165a6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   165aa:	f003 011f 	and.w	r1, r3, #31
   165ae:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   165b2:	07e4      	lsls	r4, r4, #31
   165b4:	d407      	bmi.n	165c6 <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   165b6:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   165ba:	2301      	movs	r3, #1
   165bc:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   165be:	4313      	orrs	r3, r2
   165c0:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
   165c4:	e01d      	b.n	16602 <rpmsg_create_ept+0x86>
	     bit++)
   165c6:	3301      	adds	r3, #1
	for (bit = start;
   165c8:	2b80      	cmp	r3, #128	; 0x80
   165ca:	d1e9      	bne.n	165a0 <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
   165cc:	4c27      	ldr	r4, [pc, #156]	; (1666c <rpmsg_create_ept+0xf0>)
   165ce:	e044      	b.n	1665a <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   165d0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   165d4:	d315      	bcc.n	16602 <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
   165d6:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
   165da:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   165dc:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   165e0:	d83a      	bhi.n	16658 <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   165e2:	0958      	lsrs	r0, r3, #5
   165e4:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   165e8:	f003 031f 	and.w	r3, r3, #31
   165ec:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   165f0:	07d2      	lsls	r2, r2, #31
   165f2:	d4eb      	bmi.n	165cc <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   165f4:	2201      	movs	r2, #1
   165f6:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   165fa:	ea43 030c 	orr.w	r3, r3, ip
   165fe:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   16602:	491b      	ldr	r1, [pc, #108]	; (16670 <rpmsg_create_ept+0xf4>)
   16604:	2220      	movs	r2, #32
   16606:	f1b8 0f00 	cmp.w	r8, #0
   1660a:	bf18      	it	ne
   1660c:	4641      	movne	r1, r8
   1660e:	4628      	mov	r0, r5
   16610:	f004 fb9b 	bl	1ad4a <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   16614:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
   16616:	4629      	mov	r1, r5
   16618:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
   1661a:	9b07      	ldr	r3, [sp, #28]
   1661c:	4630      	mov	r0, r6
   1661e:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   16620:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
   16622:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
   16624:	632b      	str	r3, [r5, #48]	; 0x30
   16626:	f006 fbdc 	bl	1cde2 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   1662a:	4638      	mov	r0, r7
   1662c:	f001 ffc8 	bl	185c0 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   16630:	782c      	ldrb	r4, [r5, #0]
   16632:	b174      	cbz	r4, 16652 <rpmsg_create_ept+0xd6>
   16634:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   16638:	b15c      	cbz	r4, 16652 <rpmsg_create_ept+0xd6>
   1663a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1663c:	3301      	adds	r3, #1
   1663e:	d112      	bne.n	16666 <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   16640:	2100      	movs	r1, #0
   16642:	4628      	mov	r0, r5
   16644:	f006 fb84 	bl	1cd50 <rpmsg_send_ns_message>

	if (status)
   16648:	4604      	mov	r4, r0
   1664a:	b110      	cbz	r0, 16652 <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
   1664c:	4628      	mov	r0, r5
   1664e:	f006 fb54 	bl	1ccfa <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   16652:	4620      	mov	r0, r4
   16654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16658:	4c06      	ldr	r4, [pc, #24]	; (16674 <rpmsg_create_ept+0xf8>)
   1665a:	4638      	mov	r0, r7
   1665c:	f001 ffb0 	bl	185c0 <z_impl_k_sem_give>
}
   16660:	e7f7      	b.n	16652 <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
   16662:	4c04      	ldr	r4, [pc, #16]	; (16674 <rpmsg_create_ept+0xf8>)
   16664:	e7f5      	b.n	16652 <rpmsg_create_ept+0xd6>
   16666:	2400      	movs	r4, #0
   16668:	e7f3      	b.n	16652 <rpmsg_create_ept+0xd6>
   1666a:	bf00      	nop
   1666c:	fffff829 	.word	0xfffff829
   16670:	00021539 	.word	0x00021539
   16674:	fffff82d 	.word	0xfffff82d

00016678 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
   16678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1667c:	4605      	mov	r5, r0
   1667e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   16680:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
   16682:	6a03      	ldr	r3, [r0, #32]
   16684:	b08d      	sub	sp, #52	; 0x34
   16686:	681b      	ldr	r3, [r3, #0]
   16688:	4692      	mov	sl, r2
   1668a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   1668e:	9103      	str	r1, [sp, #12]
   16690:	4798      	blx	r3
	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
   16692:	0743      	lsls	r3, r0, #29
   16694:	d57b      	bpl.n	1678e <rpmsg_virtio_send_offchannel_raw+0x116>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   16696:	f643 2398 	movw	r3, #15000	; 0x3a98
   1669a:	2f00      	cmp	r7, #0
   1669c:	bf18      	it	ne
   1669e:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
   166a0:	f105 0858 	add.w	r8, r5, #88	; 0x58
   166a4:	4640      	mov	r0, r8
   166a6:	f006 fbc0 	bl	1ce2a <__metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
   166aa:	4628      	mov	r0, r5
   166ac:	f006 fc82 	bl	1cfb4 <_rpmsg_virtio_get_buffer_size>
		if (avail_size && size > avail_size) {
   166b0:	4681      	mov	r9, r0
   166b2:	b130      	cbz	r0, 166c2 <rpmsg_virtio_send_offchannel_raw+0x4a>
   166b4:	42b0      	cmp	r0, r6
   166b6:	da04      	bge.n	166c2 <rpmsg_virtio_send_offchannel_raw+0x4a>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   166b8:	4640      	mov	r0, r8
   166ba:	f006 fbb4 	bl	1ce26 <k_sem_give>
		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
			break;
		if (avail_size != 0)
			return RPMSG_ERR_BUFF_SIZE;
   166be:	4e42      	ldr	r6, [pc, #264]	; (167c8 <rpmsg_virtio_send_offchannel_raw+0x150>)
   166c0:	e061      	b.n	16786 <rpmsg_virtio_send_offchannel_raw+0x10e>
	return rvdev->vdev->role;
   166c2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   166c4:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   166c6:	b9f3      	cbnz	r3, 16706 <rpmsg_virtio_send_offchannel_raw+0x8e>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   166c8:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   166cc:	f10d 0212 	add.w	r2, sp, #18
   166d0:	a905      	add	r1, sp, #20
   166d2:	f006 fa0a 	bl	1caea <virtqueue_get_buffer>
		if (!data) {
   166d6:	4604      	mov	r4, r0
   166d8:	b948      	cbnz	r0, 166ee <rpmsg_virtio_send_offchannel_raw+0x76>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   166da:	f44f 7100 	mov.w	r1, #512	; 0x200
   166de:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
   166e2:	f006 fc7a 	bl	1cfda <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
   166e6:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   166ea:	4604      	mov	r4, r0
			*len = RPMSG_BUFFER_SIZE;
   166ec:	9305      	str	r3, [sp, #20]
   166ee:	4640      	mov	r0, r8
   166f0:	f006 fb99 	bl	1ce26 <k_sem_give>
		if (buffer || !tick_count)
   166f4:	2c00      	cmp	r4, #0
   166f6:	d14e      	bne.n	16796 <rpmsg_virtio_send_offchannel_raw+0x11e>
   166f8:	2f00      	cmp	r7, #0
   166fa:	d04a      	beq.n	16792 <rpmsg_virtio_send_offchannel_raw+0x11a>
		if (avail_size != 0)
   166fc:	f1b9 0f00 	cmp.w	r9, #0
   16700:	d1dd      	bne.n	166be <rpmsg_virtio_send_offchannel_raw+0x46>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
   16702:	3f01      	subs	r7, #1
	while (1) {
   16704:	e7ce      	b.n	166a4 <rpmsg_virtio_send_offchannel_raw+0x2c>
	if (role == RPMSG_REMOTE) {
   16706:	2b01      	cmp	r3, #1
   16708:	d108      	bne.n	1671c <rpmsg_virtio_send_offchannel_raw+0xa4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   1670a:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1670e:	aa05      	add	r2, sp, #20
   16710:	f10d 0112 	add.w	r1, sp, #18
   16714:	f006 fa23 	bl	1cb5e <virtqueue_get_available_buffer>
   16718:	4604      	mov	r4, r0
   1671a:	e7e8      	b.n	166ee <rpmsg_virtio_send_offchannel_raw+0x76>
	void *data = NULL;
   1671c:	2400      	movs	r4, #0
   1671e:	e7e6      	b.n	166ee <rpmsg_virtio_send_offchannel_raw+0x76>
   16720:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   16722:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
   16724:	f104 0110 	add.w	r1, r4, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   16728:	1ac9      	subs	r1, r1, r3
   1672a:	4281      	cmp	r1, r0
   1672c:	bf28      	it	cs
   1672e:	f04f 31ff 	movcs.w	r1, #4294967295
   16732:	4633      	mov	r3, r6
   16734:	465a      	mov	r2, fp
   16736:	4638      	mov	r0, r7
   16738:	f006 f8b6 	bl	1c8a8 <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
   1673c:	4286      	cmp	r6, r0
   1673e:	d000      	beq.n	16742 <rpmsg_virtio_send_offchannel_raw+0xca>
   16740:	e7fe      	b.n	16740 <rpmsg_virtio_send_offchannel_raw+0xc8>
   16742:	4640      	mov	r0, r8
   16744:	f006 fb71 	bl	1ce2a <__metal_mutex_acquire>
   16748:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
   1674a:	9a05      	ldr	r2, [sp, #20]
   1674c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1674e:	b953      	cbnz	r3, 16766 <rpmsg_virtio_send_offchannel_raw+0xee>
		vqbuf.len = len;
   16750:	e9cd 4206 	strd	r4, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   16754:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   16758:	2201      	movs	r2, #1
   1675a:	9400      	str	r4, [sp, #0]
   1675c:	a906      	add	r1, sp, #24
   1675e:	f006 f964 	bl	1ca2a <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   16762:	b148      	cbz	r0, 16778 <rpmsg_virtio_send_offchannel_raw+0x100>
   16764:	e7fe      	b.n	16764 <rpmsg_virtio_send_offchannel_raw+0xec>
	if (role == RPMSG_REMOTE) {
   16766:	2b01      	cmp	r3, #1
   16768:	d106      	bne.n	16778 <rpmsg_virtio_send_offchannel_raw+0x100>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   1676a:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1676e:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   16772:	f7ff fed5 	bl	16520 <virtqueue_add_consumed_buffer>
   16776:	e7f4      	b.n	16762 <rpmsg_virtio_send_offchannel_raw+0xea>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   16778:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1677c:	f006 fa69 	bl	1cc52 <virtqueue_kick>
   16780:	4640      	mov	r0, r8
   16782:	f006 fb50 	bl	1ce26 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
   16786:	4630      	mov	r0, r6
   16788:	b00d      	add	sp, #52	; 0x34
   1678a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
   1678e:	4e0f      	ldr	r6, [pc, #60]	; (167cc <rpmsg_virtio_send_offchannel_raw+0x154>)
   16790:	e7f9      	b.n	16786 <rpmsg_virtio_send_offchannel_raw+0x10e>
		return RPMSG_ERR_NO_BUFF;
   16792:	4e0f      	ldr	r6, [pc, #60]	; (167d0 <rpmsg_virtio_send_offchannel_raw+0x158>)
   16794:	e7f7      	b.n	16786 <rpmsg_virtio_send_offchannel_raw+0x10e>
	rp_hdr.src = src;
   16796:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   16798:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
	rp_hdr.src = src;
   1679c:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
   1679e:	2300      	movs	r3, #0
   167a0:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   167a2:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   167a4:	1a61      	subs	r1, r4, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   167a6:	4281      	cmp	r1, r0
   167a8:	bf28      	it	cs
   167aa:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
   167ae:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   167b0:	4638      	mov	r0, r7
   167b2:	2310      	movs	r3, #16
   167b4:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
   167b6:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
   167ba:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   167be:	f006 f873 	bl	1c8a8 <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   167c2:	2810      	cmp	r0, #16
   167c4:	d0ac      	beq.n	16720 <rpmsg_virtio_send_offchannel_raw+0xa8>
   167c6:	e7fe      	b.n	167c6 <rpmsg_virtio_send_offchannel_raw+0x14e>
   167c8:	fffff82b 	.word	0xfffff82b
   167cc:	fffff82c 	.word	0xfffff82c
   167d0:	fffff82e 	.word	0xfffff82e

000167d4 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
   167d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   167d8:	460d      	mov	r5, r1
   167da:	b088      	sub	sp, #32
   167dc:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   167de:	2100      	movs	r1, #0
   167e0:	227c      	movs	r2, #124	; 0x7c
{
   167e2:	4604      	mov	r4, r0
   167e4:	461e      	mov	r6, r3
   167e6:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
   167ea:	f004 fb29 	bl	1ae40 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   167ee:	2201      	movs	r2, #1
   167f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   167f4:	4611      	mov	r1, r2
   167f6:	f006 fc8d 	bl	1d114 <z_impl_k_sem_init>
   167fa:	f8d5 8018 	ldr.w	r8, [r5, #24]
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   167fe:	4b5d      	ldr	r3, [pc, #372]	; (16974 <rpmsg_init_vdev+0x1a0>)
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
   16800:	f1b8 0f01 	cmp.w	r8, #1
	rvdev->vdev = vdev;
   16804:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
   16806:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   16808:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1680a:	6763      	str	r3, [r4, #116]	; 0x74
	if (role == RPMSG_REMOTE) {
   1680c:	d020      	beq.n	16850 <rpmsg_init_vdev+0x7c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1680e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   16810:	6a03      	ldr	r3, [r0, #32]
   16812:	689b      	ldr	r3, [r3, #8]
   16814:	4798      	blx	r3
   16816:	2300      	movs	r3, #0
   16818:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1681a:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1681e:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   16820:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   16824:	f1b8 0f00 	cmp.w	r8, #0
   16828:	d01e      	beq.n	16868 <rpmsg_init_vdev+0x94>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   1682a:	f1b8 0f01 	cmp.w	r8, #1
   1682e:	d133      	bne.n	16898 <rpmsg_init_vdev+0xc4>
		vq_names[0] = "tx_vq";
   16830:	4b51      	ldr	r3, [pc, #324]	; (16978 <rpmsg_init_vdev+0x1a4>)
   16832:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
   16834:	4b51      	ldr	r3, [pc, #324]	; (1697c <rpmsg_init_vdev+0x1a8>)
   16836:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
   16838:	4b51      	ldr	r3, [pc, #324]	; (16980 <rpmsg_init_vdev+0x1ac>)
   1683a:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
   1683c:	4b51      	ldr	r3, [pc, #324]	; (16984 <rpmsg_init_vdev+0x1b0>)
   1683e:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   16840:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16842:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   16844:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   16846:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   1684a:	e023      	b.n	16894 <rpmsg_init_vdev+0xc0>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   1684c:	0743      	lsls	r3, r0, #29
   1684e:	d4de      	bmi.n	1680e <rpmsg_init_vdev+0x3a>
		status = rpmsg_virtio_get_status(rvdev);
   16850:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
   16852:	6a03      	ldr	r3, [r0, #32]
   16854:	681b      	ldr	r3, [r3, #0]
   16856:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   16858:	0642      	lsls	r2, r0, #25
   1685a:	d5f7      	bpl.n	1684c <rpmsg_init_vdev+0x78>
			rpmsg_virtio_set_status(rvdev, 0);
   1685c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1685e:	2100      	movs	r1, #0
   16860:	6a03      	ldr	r3, [r0, #32]
   16862:	685b      	ldr	r3, [r3, #4]
   16864:	4798      	blx	r3
}
   16866:	e7f3      	b.n	16850 <rpmsg_init_vdev+0x7c>
		if (!shpool)
   16868:	f1b9 0f00 	cmp.w	r9, #0
   1686c:	d07d      	beq.n	1696a <rpmsg_init_vdev+0x196>
		if (!shpool->size)
   1686e:	f8d9 3008 	ldr.w	r3, [r9, #8]
   16872:	2b00      	cmp	r3, #0
   16874:	d07b      	beq.n	1696e <rpmsg_init_vdev+0x19a>
		vq_names[0] = "rx_vq";
   16876:	4b41      	ldr	r3, [pc, #260]	; (1697c <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
   16878:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
   1687c:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
   1687e:	4b3e      	ldr	r3, [pc, #248]	; (16978 <rpmsg_init_vdev+0x1a4>)
   16880:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
   16882:	4b40      	ldr	r3, [pc, #256]	; (16984 <rpmsg_init_vdev+0x1b0>)
   16884:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
   16886:	4b3e      	ldr	r3, [pc, #248]	; (16980 <rpmsg_init_vdev+0x1ac>)
   16888:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   1688a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1688c:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
   1688e:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   16890:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   16894:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   16898:	ab04      	add	r3, sp, #16
   1689a:	9300      	str	r3, [sp, #0]
   1689c:	2202      	movs	r2, #2
   1689e:	2100      	movs	r1, #0
   168a0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
   168a2:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
   168a6:	ab02      	add	r3, sp, #8
   168a8:	f7ff fde2 	bl	16470 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   168ac:	4607      	mov	r7, r0
   168ae:	2800      	cmp	r0, #0
   168b0:	d157      	bne.n	16962 <rpmsg_init_vdev+0x18e>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
   168b2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   168b6:	f006 f9a6 	bl	1cc06 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
   168ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
   168bc:	681a      	ldr	r2, [r3, #0]
   168be:	699b      	ldr	r3, [r3, #24]
   168c0:	6296      	str	r6, [r2, #40]	; 0x28
   168c2:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   168c4:	f1b8 0f00 	cmp.w	r8, #0
   168c8:	d108      	bne.n	168dc <rpmsg_init_vdev+0x108>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
   168ca:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   168ce:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
   168d0:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   168d2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   168d6:	895b      	ldrh	r3, [r3, #10]
   168d8:	4553      	cmp	r3, sl
   168da:	d81f      	bhi.n	1691c <rpmsg_init_vdev+0x148>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
   168dc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   168e0:	e9c4 4400 	strd	r4, r4, [r4]
   168e4:	b18b      	cbz	r3, 1690a <rpmsg_init_vdev+0x136>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
   168e6:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   168ea:	4927      	ldr	r1, [pc, #156]	; (16988 <rpmsg_init_vdev+0x1b4>)
   168ec:	2220      	movs	r2, #32
   168ee:	4628      	mov	r0, r5
   168f0:	f004 fa2b 	bl	1ad4a <strncpy>
	ept->addr = src;
   168f4:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
   168f6:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
   168fa:	4b24      	ldr	r3, [pc, #144]	; (1698c <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
   168fc:	4629      	mov	r1, r5
   168fe:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
   16900:	2300      	movs	r3, #0
   16902:	4620      	mov	r0, r4
   16904:	63a3      	str	r3, [r4, #56]	; 0x38
   16906:	f006 fa6c 	bl	1cde2 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
   1690a:	f1b8 0f00 	cmp.w	r8, #0
   1690e:	d128      	bne.n	16962 <rpmsg_init_vdev+0x18e>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   16910:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   16912:	2104      	movs	r1, #4
   16914:	6a03      	ldr	r3, [r0, #32]
   16916:	685b      	ldr	r3, [r3, #4]
   16918:	4798      	blx	r3
}
   1691a:	e022      	b.n	16962 <rpmsg_init_vdev+0x18e>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   1691c:	f44f 7100 	mov.w	r1, #512	; 0x200
   16920:	4648      	mov	r0, r9
   16922:	f006 fb5a 	bl	1cfda <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   16926:	4605      	mov	r5, r0
   16928:	b1c8      	cbz	r0, 1695e <rpmsg_init_vdev+0x18a>
   1692a:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   1692c:	9006      	str	r0, [sp, #24]
   1692e:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   16930:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   16932:	f44f 7300 	mov.w	r3, #512	; 0x200
   16936:	4281      	cmp	r1, r0
   16938:	bf28      	it	cs
   1693a:	f04f 31ff 	movcs.w	r1, #4294967295
   1693e:	2200      	movs	r2, #0
   16940:	4630      	mov	r0, r6
   16942:	f005 ffec 	bl	1c91e <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   16946:	2301      	movs	r3, #1
   16948:	2200      	movs	r2, #0
   1694a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   1694e:	9500      	str	r5, [sp, #0]
   16950:	a906      	add	r1, sp, #24
   16952:	f006 f86a 	bl	1ca2a <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   16956:	b918      	cbnz	r0, 16960 <rpmsg_init_vdev+0x18c>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   16958:	f10a 0a01 	add.w	sl, sl, #1
   1695c:	e7b9      	b.n	168d2 <rpmsg_init_vdev+0xfe>
				return RPMSG_ERR_NO_BUFF;
   1695e:	480c      	ldr	r0, [pc, #48]	; (16990 <rpmsg_init_vdev+0x1bc>)
   16960:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
   16962:	4638      	mov	r0, r7
   16964:	b008      	add	sp, #32
   16966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
   1696a:	4f0a      	ldr	r7, [pc, #40]	; (16994 <rpmsg_init_vdev+0x1c0>)
   1696c:	e7f9      	b.n	16962 <rpmsg_init_vdev+0x18e>
			return RPMSG_ERR_NO_BUFF;
   1696e:	4f08      	ldr	r7, [pc, #32]	; (16990 <rpmsg_init_vdev+0x1bc>)
   16970:	e7f7      	b.n	16962 <rpmsg_init_vdev+0x18e>
   16972:	bf00      	nop
   16974:	00016679 	.word	0x00016679
   16978:	000214c8 	.word	0x000214c8
   1697c:	000214c2 	.word	0x000214c2
   16980:	0001ce25 	.word	0x0001ce25
   16984:	0001cef5 	.word	0x0001cef5
   16988:	000214ce 	.word	0x000214ce
   1698c:	0001ce37 	.word	0x0001ce37
   16990:	fffff82e 	.word	0xfffff82e
   16994:	fffff82d 	.word	0xfffff82d

00016998 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   16998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1699a:	4b10      	ldr	r3, [pc, #64]	; (169dc <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1699c:	4f10      	ldr	r7, [pc, #64]	; (169e0 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1699e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   169a2:	3001      	adds	r0, #1
   169a4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   169a8:	42ae      	cmp	r6, r5
   169aa:	d800      	bhi.n	169ae <z_sys_init_run_level+0x16>
		}
	}
}
   169ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   169ae:	e9d5 3400 	ldrd	r3, r4, [r5]
   169b2:	4620      	mov	r0, r4
   169b4:	4798      	blx	r3
   169b6:	b170      	cbz	r0, 169d6 <z_sys_init_run_level+0x3e>
   169b8:	b16c      	cbz	r4, 169d6 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   169ba:	2301      	movs	r3, #1
				(dev - __device_start));
   169bc:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   169be:	4a09      	ldr	r2, [pc, #36]	; (169e4 <z_sys_init_run_level+0x4c>)
   169c0:	1124      	asrs	r4, r4, #4
   169c2:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   169c4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   169c8:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   169cc:	fa03 f404 	lsl.w	r4, r3, r4
   169d0:	4304      	orrs	r4, r0
   169d2:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   169d6:	3508      	adds	r5, #8
   169d8:	e7e6      	b.n	169a8 <z_sys_init_run_level+0x10>
   169da:	bf00      	nop
   169dc:	0001e144 	.word	0x0001e144
   169e0:	20008578 	.word	0x20008578
   169e4:	200085e8 	.word	0x200085e8

000169e8 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   169e8:	4b08      	ldr	r3, [pc, #32]	; (16a0c <z_device_ready+0x24>)
   169ea:	1ac0      	subs	r0, r0, r3
   169ec:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   169ee:	4b08      	ldr	r3, [pc, #32]	; (16a10 <z_device_ready+0x28>)
   169f0:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   169f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   169f6:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   169f8:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   169fc:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   16a00:	4210      	tst	r0, r2
}
   16a02:	bf0c      	ite	eq
   16a04:	4618      	moveq	r0, r3
   16a06:	2000      	movne	r0, #0
   16a08:	4770      	bx	lr
   16a0a:	bf00      	nop
   16a0c:	20008578 	.word	0x20008578
   16a10:	200085e8 	.word	0x200085e8

00016a14 <z_impl_device_get_binding>:
{
   16a14:	b570      	push	{r4, r5, r6, lr}
   16a16:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   16a18:	4c0f      	ldr	r4, [pc, #60]	; (16a58 <z_impl_device_get_binding+0x44>)
   16a1a:	4e10      	ldr	r6, [pc, #64]	; (16a5c <z_impl_device_get_binding+0x48>)
   16a1c:	42b4      	cmp	r4, r6
   16a1e:	d104      	bne.n	16a2a <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   16a20:	4c0d      	ldr	r4, [pc, #52]	; (16a58 <z_impl_device_get_binding+0x44>)
   16a22:	42b4      	cmp	r4, r6
   16a24:	d10a      	bne.n	16a3c <z_impl_device_get_binding+0x28>
	return NULL;
   16a26:	2400      	movs	r4, #0
   16a28:	e014      	b.n	16a54 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   16a2a:	4620      	mov	r0, r4
   16a2c:	f7ff ffdc 	bl	169e8 <z_device_ready>
   16a30:	b110      	cbz	r0, 16a38 <z_impl_device_get_binding+0x24>
   16a32:	6823      	ldr	r3, [r4, #0]
   16a34:	42ab      	cmp	r3, r5
   16a36:	d00d      	beq.n	16a54 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   16a38:	3410      	adds	r4, #16
   16a3a:	e7ef      	b.n	16a1c <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   16a3c:	4620      	mov	r0, r4
   16a3e:	f7ff ffd3 	bl	169e8 <z_device_ready>
   16a42:	b908      	cbnz	r0, 16a48 <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   16a44:	3410      	adds	r4, #16
   16a46:	e7ec      	b.n	16a22 <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   16a48:	4628      	mov	r0, r5
   16a4a:	6821      	ldr	r1, [r4, #0]
   16a4c:	f004 f99f 	bl	1ad8e <strcmp>
   16a50:	2800      	cmp	r0, #0
   16a52:	d1f7      	bne.n	16a44 <z_impl_device_get_binding+0x30>
}
   16a54:	4620      	mov	r0, r4
   16a56:	bd70      	pop	{r4, r5, r6, pc}
   16a58:	20008578 	.word	0x20008578
   16a5c:	200085e8 	.word	0x200085e8

00016a60 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   16a60:	4b01      	ldr	r3, [pc, #4]	; (16a68 <z_impl_z_errno+0x8>)
   16a62:	6898      	ldr	r0, [r3, #8]
}
   16a64:	3070      	adds	r0, #112	; 0x70
   16a66:	4770      	bx	lr
   16a68:	2000adec 	.word	0x2000adec

00016a6c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   16a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16a6e:	4604      	mov	r4, r0
   16a70:	460e      	mov	r6, r1
	__asm__ volatile(
   16a72:	f04f 0320 	mov.w	r3, #32
   16a76:	f3ef 8711 	mrs	r7, BASEPRI
   16a7a:	f383 8811 	msr	BASEPRI, r3
   16a7e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   16a82:	f001 fd97 	bl	185b4 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   16a86:	2200      	movs	r2, #0
   16a88:	2c04      	cmp	r4, #4
   16a8a:	bf98      	it	ls
   16a8c:	4b1d      	ldrls	r3, [pc, #116]	; (16b04 <z_fatal_error+0x98>)
   16a8e:	4605      	mov	r5, r0
	switch (reason) {
   16a90:	bf94      	ite	ls
   16a92:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   16a96:	4b1c      	ldrhi	r3, [pc, #112]	; (16b08 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   16a98:	9200      	str	r2, [sp, #0]
   16a9a:	2145      	movs	r1, #69	; 0x45
   16a9c:	4622      	mov	r2, r4
   16a9e:	481b      	ldr	r0, [pc, #108]	; (16b0c <z_fatal_error+0xa0>)
   16aa0:	f002 ff63 	bl	1996a <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   16aa4:	b13e      	cbz	r6, 16ab6 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   16aa6:	69f3      	ldr	r3, [r6, #28]
   16aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   16aac:	b11b      	cbz	r3, 16ab6 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   16aae:	2145      	movs	r1, #69	; 0x45
   16ab0:	4817      	ldr	r0, [pc, #92]	; (16b10 <z_fatal_error+0xa4>)
   16ab2:	f002 ff5a 	bl	1996a <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   16ab6:	b135      	cbz	r5, 16ac6 <z_fatal_error+0x5a>
   16ab8:	4628      	mov	r0, r5
   16aba:	f006 fb48 	bl	1d14e <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   16abe:	4603      	mov	r3, r0
   16ac0:	b108      	cbz	r0, 16ac6 <z_fatal_error+0x5a>
   16ac2:	7802      	ldrb	r2, [r0, #0]
   16ac4:	b902      	cbnz	r2, 16ac8 <z_fatal_error+0x5c>
		thread_name = "unknown";
   16ac6:	4b13      	ldr	r3, [pc, #76]	; (16b14 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   16ac8:	462a      	mov	r2, r5
   16aca:	2145      	movs	r1, #69	; 0x45
   16acc:	4812      	ldr	r0, [pc, #72]	; (16b18 <z_fatal_error+0xac>)
   16ace:	f002 ff4c 	bl	1996a <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   16ad2:	4631      	mov	r1, r6
   16ad4:	4620      	mov	r0, r4
   16ad6:	f7ff f8ad 	bl	15c34 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   16ada:	2c04      	cmp	r4, #4
   16adc:	d108      	bne.n	16af0 <z_fatal_error+0x84>
   16ade:	490f      	ldr	r1, [pc, #60]	; (16b1c <z_fatal_error+0xb0>)
   16ae0:	480f      	ldr	r0, [pc, #60]	; (16b20 <z_fatal_error+0xb4>)
   16ae2:	228e      	movs	r2, #142	; 0x8e
   16ae4:	f002 ff41 	bl	1996a <printk>
   16ae8:	218e      	movs	r1, #142	; 0x8e
   16aea:	480c      	ldr	r0, [pc, #48]	; (16b1c <z_fatal_error+0xb0>)
   16aec:	f003 f9e3 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   16af0:	f387 8811 	msr	BASEPRI, r7
   16af4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   16af8:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   16afa:	b003      	add	sp, #12
   16afc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   16b00:	f7f6 bc38 	b.w	d374 <z_impl_k_thread_abort>
   16b04:	0001e15c 	.word	0x0001e15c
   16b08:	000214d1 	.word	0x000214d1
   16b0c:	000214e7 	.word	0x000214e7
   16b10:	00021514 	.word	0x00021514
   16b14:	000214df 	.word	0x000214df
   16b18:	0002153a 	.word	0x0002153a
   16b1c:	00021557 	.word	0x00021557
   16b20:	0001ea60 	.word	0x0001ea60

00016b24 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   16b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16b26:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   16b28:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   16b2a:	4e15      	ldr	r6, [pc, #84]	; (16b80 <idle+0x5c>)
	__asm__ volatile(
   16b2c:	f04f 0220 	mov.w	r2, #32
   16b30:	f3ef 8311 	mrs	r3, BASEPRI
   16b34:	f382 8811 	msr	BASEPRI, r2
   16b38:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   16b3c:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   16b3e:	b188      	cbz	r0, 16b64 <idle+0x40>
			cpu->pending_abort = NULL;
   16b40:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   16b42:	f383 8811 	msr	BASEPRI, r3
   16b46:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   16b4a:	f001 f93b 	bl	17dc4 <z_thread_single_abort>
	__asm__ volatile(
   16b4e:	f04f 0320 	mov.w	r3, #32
   16b52:	f3ef 8011 	mrs	r0, BASEPRI
   16b56:	f383 8811 	msr	BASEPRI, r3
   16b5a:	f3bf 8f6f 	isb	sy
   16b5e:	f006 fa9f 	bl	1d0a0 <z_reschedule_irqlock>
			continue;
   16b62:	e7e3      	b.n	16b2c <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   16b64:	f002 f998 	bl	18e98 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   16b68:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   16b6a:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   16b6c:	2802      	cmp	r0, #2
   16b6e:	bfd8      	it	le
   16b70:	4608      	movle	r0, r1
   16b72:	f002 f9c7 	bl	18f04 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   16b76:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   16b78:	f7f6 f942 	bl	ce00 <arch_cpu_idle>
}
   16b7c:	e7d6      	b.n	16b2c <idle+0x8>
   16b7e:	bf00      	nop
   16b80:	2000adec 	.word	0x2000adec

00016b84 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   16b84:	4802      	ldr	r0, [pc, #8]	; (16b90 <z_bss_zero+0xc>)
   16b86:	4a03      	ldr	r2, [pc, #12]	; (16b94 <z_bss_zero+0x10>)
   16b88:	2100      	movs	r1, #0
   16b8a:	1a12      	subs	r2, r2, r0
   16b8c:	f004 b958 	b.w	1ae40 <memset>
   16b90:	200087e8 	.word	0x200087e8
   16b94:	2000c60c 	.word	0x2000c60c

00016b98 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   16b98:	2201      	movs	r2, #1
{
   16b9a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   16b9c:	4b09      	ldr	r3, [pc, #36]	; (16bc4 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   16b9e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   16ba0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   16ba2:	f7ff fef9 	bl	16998 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   16ba6:	f002 f819 	bl	18bdc <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   16baa:	2003      	movs	r0, #3
   16bac:	f7ff fef4 	bl	16998 <z_sys_init_run_level>

	z_init_static_threads();
   16bb0:	f001 fe76 	bl	188a0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   16bb4:	f7f2 fa5c 	bl	9070 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   16bb8:	4a03      	ldr	r2, [pc, #12]	; (16bc8 <bg_thread_main+0x30>)
   16bba:	7b13      	ldrb	r3, [r2, #12]
   16bbc:	f023 0301 	bic.w	r3, r3, #1
   16bc0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   16bc2:	bd08      	pop	{r3, pc}
   16bc4:	2000c60b 	.word	0x2000c60b
   16bc8:	2000a320 	.word	0x2000a320

00016bcc <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   16bcc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   16bd0:	4b34      	ldr	r3, [pc, #208]	; (16ca4 <z_cstart+0xd8>)
   16bd2:	b0ab      	sub	sp, #172	; 0xac
	uint32_t msp =
   16bd4:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   16bd8:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   16bdc:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16be0:	2400      	movs	r4, #0
   16be2:	23e0      	movs	r3, #224	; 0xe0
   16be4:	4d30      	ldr	r5, [pc, #192]	; (16ca8 <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16be6:	f04f 0b01 	mov.w	fp, #1
   16bea:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   16bee:	77ec      	strb	r4, [r5, #31]
   16bf0:	762c      	strb	r4, [r5, #24]
   16bf2:	766c      	strb	r4, [r5, #25]
   16bf4:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   16bf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   16bf8:	4e2c      	ldr	r6, [pc, #176]	; (16cac <z_cstart+0xe0>)
   16bfa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   16bfe:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   16c00:	f7f6 fb80 	bl	d304 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   16c04:	f7f6 f8f6 	bl	cdf4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   16c08:	f04f 33ff 	mov.w	r3, #4294967295
   16c0c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   16c0e:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   16c10:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   16c14:	4d26      	ldr	r5, [pc, #152]	; (16cb0 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   16c16:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   16c1a:	ab06      	add	r3, sp, #24
   16c1c:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   16c1e:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   16c20:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   16c24:	f7ff feb8 	bl	16998 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   16c28:	2001      	movs	r0, #1
   16c2a:	f7ff feb5 	bl	16998 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16c2e:	f8df a084 	ldr.w	sl, [pc, #132]	; 16cb4 <z_cstart+0xe8>
	z_sched_init();
   16c32:	f001 fb77 	bl	18324 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16c36:	4b20      	ldr	r3, [pc, #128]	; (16cb8 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   16c38:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16c3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16c3e:	491f      	ldr	r1, [pc, #124]	; (16cbc <z_cstart+0xf0>)
   16c40:	9305      	str	r3, [sp, #20]
   16c42:	4630      	mov	r0, r6
   16c44:	4653      	mov	r3, sl
   16c46:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   16c4a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   16c4e:	9400      	str	r4, [sp, #0]
   16c50:	f001 fd74 	bl	1873c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16c54:	7b73      	ldrb	r3, [r6, #13]
   16c56:	4680      	mov	r8, r0
   16c58:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   16c5c:	4630      	mov	r0, r6
   16c5e:	7373      	strb	r3, [r6, #13]
   16c60:	f000 feec 	bl	17a3c <z_ready_thread>
	z_setup_new_thread(thread, stack,
   16c64:	230f      	movs	r3, #15
   16c66:	4f16      	ldr	r7, [pc, #88]	; (16cc0 <z_cstart+0xf4>)
   16c68:	f44f 72a0 	mov.w	r2, #320	; 0x140
   16c6c:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16c70:	4914      	ldr	r1, [pc, #80]	; (16cc4 <z_cstart+0xf8>)
   16c72:	4b15      	ldr	r3, [pc, #84]	; (16cc8 <z_cstart+0xfc>)
   16c74:	4638      	mov	r0, r7
   16c76:	e9cd b404 	strd	fp, r4, [sp, #16]
   16c7a:	e9cd 5400 	strd	r5, r4, [sp]
   16c7e:	f001 fd5d 	bl	1873c <z_setup_new_thread>
   16c82:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   16c84:	4652      	mov	r2, sl
   16c86:	f023 0304 	bic.w	r3, r3, #4
   16c8a:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   16c8c:	f105 031c 	add.w	r3, r5, #28
   16c90:	4641      	mov	r1, r8
   16c92:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   16c94:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   16c98:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   16c9a:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   16c9c:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   16ca0:	f7f6 f88e 	bl	cdc0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   16ca4:	2000ec68 	.word	0x2000ec68
   16ca8:	e000ed00 	.word	0xe000ed00
   16cac:	2000a320 	.word	0x2000a320
   16cb0:	2000adec 	.word	0x2000adec
   16cb4:	00016b99 	.word	0x00016b99
   16cb8:	000215c3 	.word	0x000215c3
   16cbc:	2000e728 	.word	0x2000e728
   16cc0:	2000a290 	.word	0x2000a290
   16cc4:	2000eb28 	.word	0x2000eb28
   16cc8:	00016b25 	.word	0x00016b25

00016ccc <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   16ccc:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   16cce:	4c0c      	ldr	r4, [pc, #48]	; (16d00 <statics_init+0x34>)
   16cd0:	4d0c      	ldr	r5, [pc, #48]	; (16d04 <statics_init+0x38>)
   16cd2:	4e0d      	ldr	r6, [pc, #52]	; (16d08 <statics_init+0x3c>)
   16cd4:	42ac      	cmp	r4, r5
   16cd6:	d908      	bls.n	16cea <statics_init+0x1e>
   16cd8:	4631      	mov	r1, r6
   16cda:	480c      	ldr	r0, [pc, #48]	; (16d0c <statics_init+0x40>)
   16cdc:	2215      	movs	r2, #21
   16cde:	f002 fe44 	bl	1996a <printk>
   16ce2:	2115      	movs	r1, #21
   16ce4:	4630      	mov	r0, r6
   16ce6:	f003 f8e6 	bl	19eb6 <assert_post_action>
   16cea:	42ac      	cmp	r4, r5
   16cec:	d301      	bcc.n	16cf2 <statics_init+0x26>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   16cee:	2000      	movs	r0, #0
   16cf0:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   16cf2:	4620      	mov	r0, r4
   16cf4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   16cf8:	f006 f984 	bl	1d004 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   16cfc:	3418      	adds	r4, #24
   16cfe:	e7e9      	b.n	16cd4 <statics_init+0x8>
   16d00:	20008640 	.word	0x20008640
   16d04:	20008658 	.word	0x20008658
   16d08:	000215cb 	.word	0x000215cb
   16d0c:	0001ea60 	.word	0x0001ea60

00016d10 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   16d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d14:	b085      	sub	sp, #20
   16d16:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   16d1a:	4606      	mov	r6, r0
   16d1c:	468b      	mov	fp, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   16d1e:	4648      	mov	r0, r9
   16d20:	4639      	mov	r1, r7
{
   16d22:	4690      	mov	r8, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   16d24:	f006 fa74 	bl	1d210 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   16d28:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   16d2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16d30:	f04f 0320 	mov.w	r3, #32
   16d34:	f3ef 8411 	mrs	r4, BASEPRI
   16d38:	f383 8811 	msr	BASEPRI, r3
   16d3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16d40:	4628      	mov	r0, r5
   16d42:	f001 fe29 	bl	18998 <z_spin_lock_valid>
   16d46:	b940      	cbnz	r0, 16d5a <k_heap_aligned_alloc+0x4a>
   16d48:	4932      	ldr	r1, [pc, #200]	; (16e14 <k_heap_aligned_alloc+0x104>)
   16d4a:	4833      	ldr	r0, [pc, #204]	; (16e18 <k_heap_aligned_alloc+0x108>)
   16d4c:	227c      	movs	r2, #124	; 0x7c
   16d4e:	f002 fe0c 	bl	1996a <printk>
   16d52:	217c      	movs	r1, #124	; 0x7c
   16d54:	482f      	ldr	r0, [pc, #188]	; (16e14 <k_heap_aligned_alloc+0x104>)
   16d56:	f003 f8ae 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   16d5a:	4628      	mov	r0, r5
   16d5c:	f001 fe38 	bl	189d0 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16d60:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   16d64:	b15b      	cbz	r3, 16d7e <k_heap_aligned_alloc+0x6e>
   16d66:	ea59 0307 	orrs.w	r3, r9, r7
   16d6a:	d008      	beq.n	16d7e <k_heap_aligned_alloc+0x6e>
   16d6c:	492b      	ldr	r1, [pc, #172]	; (16e1c <k_heap_aligned_alloc+0x10c>)
   16d6e:	482a      	ldr	r0, [pc, #168]	; (16e18 <k_heap_aligned_alloc+0x108>)
   16d70:	2224      	movs	r2, #36	; 0x24
   16d72:	f002 fdfa 	bl	1996a <printk>
   16d76:	2124      	movs	r1, #36	; 0x24
   16d78:	4828      	ldr	r0, [pc, #160]	; (16e1c <k_heap_aligned_alloc+0x10c>)
   16d7a:	f003 f89c 	bl	19eb6 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16d7e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 16e14 <k_heap_aligned_alloc+0x104>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   16d82:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   16d86:	4642      	mov	r2, r8
   16d88:	4659      	mov	r1, fp
   16d8a:	4630      	mov	r0, r6
   16d8c:	f7f3 fb6c 	bl	a468 <sys_heap_aligned_alloc>
   16d90:	4607      	mov	r7, r0
		now = z_tick_get();
   16d92:	f002 f993 	bl	190bc <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   16d96:	b1a7      	cbz	r7, 16dc2 <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16d98:	4628      	mov	r0, r5
   16d9a:	f001 fe0b 	bl	189b4 <z_spin_unlock_valid>
   16d9e:	b940      	cbnz	r0, 16db2 <k_heap_aligned_alloc+0xa2>
   16da0:	491c      	ldr	r1, [pc, #112]	; (16e14 <k_heap_aligned_alloc+0x104>)
   16da2:	481d      	ldr	r0, [pc, #116]	; (16e18 <k_heap_aligned_alloc+0x108>)
   16da4:	22a7      	movs	r2, #167	; 0xa7
   16da6:	f002 fde0 	bl	1996a <printk>
   16daa:	21a7      	movs	r1, #167	; 0xa7
   16dac:	4819      	ldr	r0, [pc, #100]	; (16e14 <k_heap_aligned_alloc+0x104>)
   16dae:	f003 f882 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   16db2:	f384 8811 	msr	BASEPRI, r4
   16db6:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   16dba:	4638      	mov	r0, r7
   16dbc:	b005      	add	sp, #20
   16dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   16dc2:	9b02      	ldr	r3, [sp, #8]
   16dc4:	1a18      	subs	r0, r3, r0
   16dc6:	9b03      	ldr	r3, [sp, #12]
   16dc8:	eb63 0101 	sbc.w	r1, r3, r1
   16dcc:	2801      	cmp	r0, #1
   16dce:	f171 0300 	sbcs.w	r3, r1, #0
   16dd2:	dbe1      	blt.n	16d98 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   16dd4:	e9cd 0100 	strd	r0, r1, [sp]
   16dd8:	4652      	mov	r2, sl
   16dda:	4621      	mov	r1, r4
   16ddc:	4628      	mov	r0, r5
   16dde:	f001 f997 	bl	18110 <z_pend_curr>
	__asm__ volatile(
   16de2:	f04f 0320 	mov.w	r3, #32
   16de6:	f3ef 8411 	mrs	r4, BASEPRI
   16dea:	f383 8811 	msr	BASEPRI, r3
   16dee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16df2:	4628      	mov	r0, r5
   16df4:	f001 fdd0 	bl	18998 <z_spin_lock_valid>
   16df8:	b940      	cbnz	r0, 16e0c <k_heap_aligned_alloc+0xfc>
   16dfa:	4649      	mov	r1, r9
   16dfc:	4806      	ldr	r0, [pc, #24]	; (16e18 <k_heap_aligned_alloc+0x108>)
   16dfe:	227c      	movs	r2, #124	; 0x7c
   16e00:	f002 fdb3 	bl	1996a <printk>
   16e04:	217c      	movs	r1, #124	; 0x7c
   16e06:	4648      	mov	r0, r9
   16e08:	f003 f855 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   16e0c:	4628      	mov	r0, r5
   16e0e:	f001 fddf 	bl	189d0 <z_spin_lock_set_owner>
	return k;
   16e12:	e7b8      	b.n	16d86 <k_heap_aligned_alloc+0x76>
   16e14:	0001ea9a 	.word	0x0001ea9a
   16e18:	0001ea60 	.word	0x0001ea60
   16e1c:	000215cb 	.word	0x000215cb

00016e20 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   16e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16e22:	4604      	mov	r4, r0
   16e24:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   16e26:	f100 0514 	add.w	r5, r0, #20
   16e2a:	f04f 0320 	mov.w	r3, #32
   16e2e:	f3ef 8711 	mrs	r7, BASEPRI
   16e32:	f383 8811 	msr	BASEPRI, r3
   16e36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16e3a:	4628      	mov	r0, r5
   16e3c:	f001 fdac 	bl	18998 <z_spin_lock_valid>
   16e40:	b940      	cbnz	r0, 16e54 <k_heap_free+0x34>
   16e42:	4916      	ldr	r1, [pc, #88]	; (16e9c <k_heap_free+0x7c>)
   16e44:	4816      	ldr	r0, [pc, #88]	; (16ea0 <k_heap_free+0x80>)
   16e46:	227c      	movs	r2, #124	; 0x7c
   16e48:	f002 fd8f 	bl	1996a <printk>
   16e4c:	217c      	movs	r1, #124	; 0x7c
   16e4e:	4813      	ldr	r0, [pc, #76]	; (16e9c <k_heap_free+0x7c>)
   16e50:	f003 f831 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   16e54:	4628      	mov	r0, r5
   16e56:	f001 fdbb 	bl	189d0 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   16e5a:	4620      	mov	r0, r4
   16e5c:	4631      	mov	r1, r6
   16e5e:	f7f3 fac1 	bl	a3e4 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   16e62:	f104 000c 	add.w	r0, r4, #12
   16e66:	f006 f945 	bl	1d0f4 <z_unpend_all>
   16e6a:	b128      	cbz	r0, 16e78 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   16e6c:	4639      	mov	r1, r7
   16e6e:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   16e70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   16e74:	f000 bc0e 	b.w	17694 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16e78:	4628      	mov	r0, r5
   16e7a:	f001 fd9b 	bl	189b4 <z_spin_unlock_valid>
   16e7e:	b940      	cbnz	r0, 16e92 <k_heap_free+0x72>
   16e80:	4906      	ldr	r1, [pc, #24]	; (16e9c <k_heap_free+0x7c>)
   16e82:	4807      	ldr	r0, [pc, #28]	; (16ea0 <k_heap_free+0x80>)
   16e84:	22a7      	movs	r2, #167	; 0xa7
   16e86:	f002 fd70 	bl	1996a <printk>
   16e8a:	21a7      	movs	r1, #167	; 0xa7
   16e8c:	4803      	ldr	r0, [pc, #12]	; (16e9c <k_heap_free+0x7c>)
   16e8e:	f003 f812 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   16e92:	f387 8811 	msr	BASEPRI, r7
   16e96:	f3bf 8f6f 	isb	sy
}
   16e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16e9c:	0001ea9a 	.word	0x0001ea9a
   16ea0:	0001ea60 	.word	0x0001ea60

00016ea4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   16ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16ea6:	4c14      	ldr	r4, [pc, #80]	; (16ef8 <init_mem_slab_module+0x54>)
   16ea8:	4d14      	ldr	r5, [pc, #80]	; (16efc <init_mem_slab_module+0x58>)
   16eaa:	4e15      	ldr	r6, [pc, #84]	; (16f00 <init_mem_slab_module+0x5c>)
   16eac:	42ac      	cmp	r4, r5
   16eae:	d908      	bls.n	16ec2 <init_mem_slab_module+0x1e>
   16eb0:	4631      	mov	r1, r6
   16eb2:	4814      	ldr	r0, [pc, #80]	; (16f04 <init_mem_slab_module+0x60>)
   16eb4:	2242      	movs	r2, #66	; 0x42
   16eb6:	f002 fd58 	bl	1996a <printk>
   16eba:	2142      	movs	r1, #66	; 0x42
   16ebc:	4630      	mov	r0, r6
   16ebe:	f002 fffa 	bl	19eb6 <assert_post_action>
   16ec2:	42ac      	cmp	r4, r5
   16ec4:	d301      	bcc.n	16eca <init_mem_slab_module+0x26>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   16ec6:	2000      	movs	r0, #0
	return rc;
}
   16ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   16eca:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   16ece:	ea42 0301 	orr.w	r3, r2, r1
   16ed2:	f013 0303 	ands.w	r3, r3, #3
   16ed6:	d10b      	bne.n	16ef0 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   16ed8:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   16eda:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   16edc:	4283      	cmp	r3, r0
   16ede:	d101      	bne.n	16ee4 <init_mem_slab_module+0x40>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16ee0:	341c      	adds	r4, #28
   16ee2:	e7e3      	b.n	16eac <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   16ee4:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   16ee6:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   16ee8:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   16eea:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   16eec:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   16eee:	e7f5      	b.n	16edc <init_mem_slab_module+0x38>
	return rc;
   16ef0:	f06f 0015 	mvn.w	r0, #21
   16ef4:	e7e8      	b.n	16ec8 <init_mem_slab_module+0x24>
   16ef6:	bf00      	nop
   16ef8:	200085ec 	.word	0x200085ec
   16efc:	20008640 	.word	0x20008640
   16f00:	000215ed 	.word	0x000215ed
   16f04:	0001ea60 	.word	0x0001ea60

00016f08 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   16f08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16f0c:	4604      	mov	r4, r0
   16f0e:	460d      	mov	r5, r1
   16f10:	4617      	mov	r7, r2
   16f12:	461e      	mov	r6, r3
	__asm__ volatile(
   16f14:	f04f 0320 	mov.w	r3, #32
   16f18:	f3ef 8811 	mrs	r8, BASEPRI
   16f1c:	f383 8811 	msr	BASEPRI, r3
   16f20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16f24:	4821      	ldr	r0, [pc, #132]	; (16fac <k_mem_slab_alloc+0xa4>)
   16f26:	f001 fd37 	bl	18998 <z_spin_lock_valid>
   16f2a:	b940      	cbnz	r0, 16f3e <k_mem_slab_alloc+0x36>
   16f2c:	4920      	ldr	r1, [pc, #128]	; (16fb0 <k_mem_slab_alloc+0xa8>)
   16f2e:	4821      	ldr	r0, [pc, #132]	; (16fb4 <k_mem_slab_alloc+0xac>)
   16f30:	227c      	movs	r2, #124	; 0x7c
   16f32:	f002 fd1a 	bl	1996a <printk>
   16f36:	217c      	movs	r1, #124	; 0x7c
   16f38:	481d      	ldr	r0, [pc, #116]	; (16fb0 <k_mem_slab_alloc+0xa8>)
   16f3a:	f002 ffbc 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   16f3e:	481b      	ldr	r0, [pc, #108]	; (16fac <k_mem_slab_alloc+0xa4>)
   16f40:	f001 fd46 	bl	189d0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   16f44:	6963      	ldr	r3, [r4, #20]
   16f46:	b1c3      	cbz	r3, 16f7a <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   16f48:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   16f4a:	681b      	ldr	r3, [r3, #0]
   16f4c:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   16f4e:	69a3      	ldr	r3, [r4, #24]
   16f50:	3301      	adds	r3, #1
   16f52:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   16f54:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16f56:	4815      	ldr	r0, [pc, #84]	; (16fac <k_mem_slab_alloc+0xa4>)
   16f58:	f001 fd2c 	bl	189b4 <z_spin_unlock_valid>
   16f5c:	b940      	cbnz	r0, 16f70 <k_mem_slab_alloc+0x68>
   16f5e:	4914      	ldr	r1, [pc, #80]	; (16fb0 <k_mem_slab_alloc+0xa8>)
   16f60:	4814      	ldr	r0, [pc, #80]	; (16fb4 <k_mem_slab_alloc+0xac>)
   16f62:	22a7      	movs	r2, #167	; 0xa7
   16f64:	f002 fd01 	bl	1996a <printk>
   16f68:	21a7      	movs	r1, #167	; 0xa7
   16f6a:	4811      	ldr	r0, [pc, #68]	; (16fb0 <k_mem_slab_alloc+0xa8>)
   16f6c:	f002 ffa3 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   16f70:	f388 8811 	msr	BASEPRI, r8
   16f74:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   16f78:	e013      	b.n	16fa2 <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16f7a:	ea57 0206 	orrs.w	r2, r7, r6
   16f7e:	d103      	bne.n	16f88 <k_mem_slab_alloc+0x80>
		result = -ENOMEM;
   16f80:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   16f84:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   16f86:	e7e6      	b.n	16f56 <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   16f88:	4622      	mov	r2, r4
   16f8a:	4641      	mov	r1, r8
   16f8c:	e9cd 7600 	strd	r7, r6, [sp]
   16f90:	4806      	ldr	r0, [pc, #24]	; (16fac <k_mem_slab_alloc+0xa4>)
   16f92:	f001 f8bd 	bl	18110 <z_pend_curr>
		if (result == 0) {
   16f96:	4604      	mov	r4, r0
   16f98:	b918      	cbnz	r0, 16fa2 <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   16f9a:	4b07      	ldr	r3, [pc, #28]	; (16fb8 <k_mem_slab_alloc+0xb0>)
   16f9c:	689b      	ldr	r3, [r3, #8]
   16f9e:	695b      	ldr	r3, [r3, #20]
   16fa0:	602b      	str	r3, [r5, #0]
}
   16fa2:	4620      	mov	r0, r4
   16fa4:	b002      	add	sp, #8
   16fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16faa:	bf00      	nop
   16fac:	2000ade4 	.word	0x2000ade4
   16fb0:	0001ea9a 	.word	0x0001ea9a
   16fb4:	0001ea60 	.word	0x0001ea60
   16fb8:	2000adec 	.word	0x2000adec

00016fbc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   16fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16fbe:	4604      	mov	r4, r0
   16fc0:	460d      	mov	r5, r1
	__asm__ volatile(
   16fc2:	f04f 0320 	mov.w	r3, #32
   16fc6:	f3ef 8611 	mrs	r6, BASEPRI
   16fca:	f383 8811 	msr	BASEPRI, r3
   16fce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16fd2:	481e      	ldr	r0, [pc, #120]	; (1704c <k_mem_slab_free+0x90>)
   16fd4:	f001 fce0 	bl	18998 <z_spin_lock_valid>
   16fd8:	b940      	cbnz	r0, 16fec <k_mem_slab_free+0x30>
   16fda:	491d      	ldr	r1, [pc, #116]	; (17050 <k_mem_slab_free+0x94>)
   16fdc:	481d      	ldr	r0, [pc, #116]	; (17054 <k_mem_slab_free+0x98>)
   16fde:	227c      	movs	r2, #124	; 0x7c
   16fe0:	f002 fcc3 	bl	1996a <printk>
   16fe4:	217c      	movs	r1, #124	; 0x7c
   16fe6:	481a      	ldr	r0, [pc, #104]	; (17050 <k_mem_slab_free+0x94>)
   16fe8:	f002 ff65 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   16fec:	4817      	ldr	r0, [pc, #92]	; (1704c <k_mem_slab_free+0x90>)
   16fee:	f001 fcef 	bl	189d0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   16ff2:	6967      	ldr	r7, [r4, #20]
   16ff4:	b97f      	cbnz	r7, 17016 <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   16ff6:	4620      	mov	r0, r4
   16ff8:	f001 f92c 	bl	18254 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   16ffc:	b158      	cbz	r0, 17016 <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   16ffe:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   17000:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   17004:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   17006:	f000 fd19 	bl	17a3c <z_ready_thread>
			z_reschedule(&lock, key);
   1700a:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1700c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   17010:	480e      	ldr	r0, [pc, #56]	; (1704c <k_mem_slab_free+0x90>)
   17012:	f000 bb3f 	b.w	17694 <z_reschedule>
	**(char ***) mem = slab->free_list;
   17016:	682b      	ldr	r3, [r5, #0]
   17018:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1701a:	480c      	ldr	r0, [pc, #48]	; (1704c <k_mem_slab_free+0x90>)
   1701c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1701e:	682b      	ldr	r3, [r5, #0]
   17020:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   17022:	69a3      	ldr	r3, [r4, #24]
   17024:	3b01      	subs	r3, #1
   17026:	61a3      	str	r3, [r4, #24]
   17028:	f001 fcc4 	bl	189b4 <z_spin_unlock_valid>
   1702c:	b940      	cbnz	r0, 17040 <k_mem_slab_free+0x84>
   1702e:	4908      	ldr	r1, [pc, #32]	; (17050 <k_mem_slab_free+0x94>)
   17030:	4808      	ldr	r0, [pc, #32]	; (17054 <k_mem_slab_free+0x98>)
   17032:	22a7      	movs	r2, #167	; 0xa7
   17034:	f002 fc99 	bl	1996a <printk>
   17038:	21a7      	movs	r1, #167	; 0xa7
   1703a:	4805      	ldr	r0, [pc, #20]	; (17050 <k_mem_slab_free+0x94>)
   1703c:	f002 ff3b 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   17040:	f386 8811 	msr	BASEPRI, r6
   17044:	f3bf 8f6f 	isb	sy
}
   17048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1704a:	bf00      	nop
   1704c:	2000ade4 	.word	0x2000ade4
   17050:	0001ea9a 	.word	0x0001ea9a
   17054:	0001ea60 	.word	0x0001ea60

00017058 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   17058:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1705c:	4604      	mov	r4, r0
   1705e:	4617      	mov	r7, r2
   17060:	461e      	mov	r6, r3
   17062:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   17066:	b143      	cbz	r3, 1707a <z_impl_k_mutex_lock+0x22>
   17068:	495c      	ldr	r1, [pc, #368]	; (171dc <z_impl_k_mutex_lock+0x184>)
   1706a:	485d      	ldr	r0, [pc, #372]	; (171e0 <z_impl_k_mutex_lock+0x188>)
   1706c:	227d      	movs	r2, #125	; 0x7d
   1706e:	f002 fc7c 	bl	1996a <printk>
   17072:	217d      	movs	r1, #125	; 0x7d
   17074:	4859      	ldr	r0, [pc, #356]	; (171dc <z_impl_k_mutex_lock+0x184>)
   17076:	f002 ff1e 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   1707a:	f04f 0320 	mov.w	r3, #32
   1707e:	f3ef 8811 	mrs	r8, BASEPRI
   17082:	f383 8811 	msr	BASEPRI, r3
   17086:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1708a:	4856      	ldr	r0, [pc, #344]	; (171e4 <z_impl_k_mutex_lock+0x18c>)
   1708c:	f001 fc84 	bl	18998 <z_spin_lock_valid>
   17090:	b940      	cbnz	r0, 170a4 <z_impl_k_mutex_lock+0x4c>
   17092:	4955      	ldr	r1, [pc, #340]	; (171e8 <z_impl_k_mutex_lock+0x190>)
   17094:	4852      	ldr	r0, [pc, #328]	; (171e0 <z_impl_k_mutex_lock+0x188>)
   17096:	227c      	movs	r2, #124	; 0x7c
   17098:	f002 fc67 	bl	1996a <printk>
   1709c:	217c      	movs	r1, #124	; 0x7c
   1709e:	4852      	ldr	r0, [pc, #328]	; (171e8 <z_impl_k_mutex_lock+0x190>)
   170a0:	f002 ff09 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   170a4:	484f      	ldr	r0, [pc, #316]	; (171e4 <z_impl_k_mutex_lock+0x18c>)
   170a6:	f001 fc93 	bl	189d0 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   170aa:	68e3      	ldr	r3, [r4, #12]
   170ac:	4a4f      	ldr	r2, [pc, #316]	; (171ec <z_impl_k_mutex_lock+0x194>)
   170ae:	b1d3      	cbz	r3, 170e6 <z_impl_k_mutex_lock+0x8e>
   170b0:	68a0      	ldr	r0, [r4, #8]
   170b2:	6891      	ldr	r1, [r2, #8]
   170b4:	4288      	cmp	r0, r1
   170b6:	d033      	beq.n	17120 <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   170b8:	ea57 0306 	orrs.w	r3, r7, r6
   170bc:	d132      	bne.n	17124 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   170be:	4849      	ldr	r0, [pc, #292]	; (171e4 <z_impl_k_mutex_lock+0x18c>)
   170c0:	f001 fc78 	bl	189b4 <z_spin_unlock_valid>
   170c4:	b940      	cbnz	r0, 170d8 <z_impl_k_mutex_lock+0x80>
   170c6:	4948      	ldr	r1, [pc, #288]	; (171e8 <z_impl_k_mutex_lock+0x190>)
   170c8:	4845      	ldr	r0, [pc, #276]	; (171e0 <z_impl_k_mutex_lock+0x188>)
   170ca:	22a7      	movs	r2, #167	; 0xa7
   170cc:	f002 fc4d 	bl	1996a <printk>
   170d0:	21a7      	movs	r1, #167	; 0xa7
   170d2:	4845      	ldr	r0, [pc, #276]	; (171e8 <z_impl_k_mutex_lock+0x190>)
   170d4:	f002 feef 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   170d8:	f388 8811 	msr	BASEPRI, r8
   170dc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   170e0:	f06f 000f 	mvn.w	r0, #15
   170e4:	e019      	b.n	1711a <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   170e6:	6891      	ldr	r1, [r2, #8]
   170e8:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   170ec:	3301      	adds	r3, #1
   170ee:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   170f0:	6893      	ldr	r3, [r2, #8]
   170f2:	483c      	ldr	r0, [pc, #240]	; (171e4 <z_impl_k_mutex_lock+0x18c>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   170f4:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   170f6:	60a3      	str	r3, [r4, #8]
   170f8:	f001 fc5c 	bl	189b4 <z_spin_unlock_valid>
   170fc:	b940      	cbnz	r0, 17110 <z_impl_k_mutex_lock+0xb8>
   170fe:	493a      	ldr	r1, [pc, #232]	; (171e8 <z_impl_k_mutex_lock+0x190>)
   17100:	4837      	ldr	r0, [pc, #220]	; (171e0 <z_impl_k_mutex_lock+0x188>)
   17102:	22a7      	movs	r2, #167	; 0xa7
   17104:	f002 fc31 	bl	1996a <printk>
   17108:	21a7      	movs	r1, #167	; 0xa7
   1710a:	4837      	ldr	r0, [pc, #220]	; (171e8 <z_impl_k_mutex_lock+0x190>)
   1710c:	f002 fed3 	bl	19eb6 <assert_post_action>
   17110:	f388 8811 	msr	BASEPRI, r8
   17114:	f3bf 8f6f 	isb	sy
		return 0;
   17118:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1711a:	b002      	add	sp, #8
   1711c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   17120:	6921      	ldr	r1, [r4, #16]
   17122:	e7e3      	b.n	170ec <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   17124:	f990 300e 	ldrsb.w	r3, [r0, #14]
   17128:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1712c:	4299      	cmp	r1, r3
   1712e:	bfa8      	it	ge
   17130:	4619      	movge	r1, r3
   17132:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   17136:	4299      	cmp	r1, r3
   17138:	da3b      	bge.n	171b2 <z_impl_k_mutex_lock+0x15a>
		resched = adjust_owner_prio(mutex, new_prio);
   1713a:	f005 ff6b 	bl	1d014 <adjust_owner_prio.isra.0>
   1713e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   17140:	4622      	mov	r2, r4
   17142:	4641      	mov	r1, r8
   17144:	e9cd 7600 	strd	r7, r6, [sp]
   17148:	4826      	ldr	r0, [pc, #152]	; (171e4 <z_impl_k_mutex_lock+0x18c>)
   1714a:	f000 ffe1 	bl	18110 <z_pend_curr>
	if (got_mutex == 0) {
   1714e:	2800      	cmp	r0, #0
   17150:	d0e3      	beq.n	1711a <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   17152:	f04f 0320 	mov.w	r3, #32
   17156:	f3ef 8611 	mrs	r6, BASEPRI
   1715a:	f383 8811 	msr	BASEPRI, r3
   1715e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17162:	4820      	ldr	r0, [pc, #128]	; (171e4 <z_impl_k_mutex_lock+0x18c>)
   17164:	f001 fc18 	bl	18998 <z_spin_lock_valid>
   17168:	b940      	cbnz	r0, 1717c <z_impl_k_mutex_lock+0x124>
   1716a:	491f      	ldr	r1, [pc, #124]	; (171e8 <z_impl_k_mutex_lock+0x190>)
   1716c:	481c      	ldr	r0, [pc, #112]	; (171e0 <z_impl_k_mutex_lock+0x188>)
   1716e:	227c      	movs	r2, #124	; 0x7c
   17170:	f002 fbfb 	bl	1996a <printk>
   17174:	217c      	movs	r1, #124	; 0x7c
   17176:	481c      	ldr	r0, [pc, #112]	; (171e8 <z_impl_k_mutex_lock+0x190>)
   17178:	f002 fe9d 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   1717c:	4819      	ldr	r0, [pc, #100]	; (171e4 <z_impl_k_mutex_lock+0x18c>)
   1717e:	f001 fc27 	bl	189d0 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   17182:	6823      	ldr	r3, [r4, #0]
   17184:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17186:	42a3      	cmp	r3, r4
   17188:	d007      	beq.n	1719a <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1718a:	b133      	cbz	r3, 1719a <z_impl_k_mutex_lock+0x142>
   1718c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   17190:	4299      	cmp	r1, r3
   17192:	bfa8      	it	ge
   17194:	4619      	movge	r1, r3
   17196:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1719a:	68a0      	ldr	r0, [r4, #8]
   1719c:	f005 ff3a 	bl	1d014 <adjust_owner_prio.isra.0>
   171a0:	b900      	cbnz	r0, 171a4 <z_impl_k_mutex_lock+0x14c>
	if (resched) {
   171a2:	b145      	cbz	r5, 171b6 <z_impl_k_mutex_lock+0x15e>
		z_reschedule(&lock, key);
   171a4:	4631      	mov	r1, r6
   171a6:	480f      	ldr	r0, [pc, #60]	; (171e4 <z_impl_k_mutex_lock+0x18c>)
   171a8:	f000 fa74 	bl	17694 <z_reschedule>
	return -EAGAIN;
   171ac:	f06f 000a 	mvn.w	r0, #10
   171b0:	e7b3      	b.n	1711a <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   171b2:	2500      	movs	r5, #0
   171b4:	e7c4      	b.n	17140 <z_impl_k_mutex_lock+0xe8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   171b6:	480b      	ldr	r0, [pc, #44]	; (171e4 <z_impl_k_mutex_lock+0x18c>)
   171b8:	f001 fbfc 	bl	189b4 <z_spin_unlock_valid>
   171bc:	b940      	cbnz	r0, 171d0 <z_impl_k_mutex_lock+0x178>
   171be:	490a      	ldr	r1, [pc, #40]	; (171e8 <z_impl_k_mutex_lock+0x190>)
   171c0:	4807      	ldr	r0, [pc, #28]	; (171e0 <z_impl_k_mutex_lock+0x188>)
   171c2:	22a7      	movs	r2, #167	; 0xa7
   171c4:	f002 fbd1 	bl	1996a <printk>
   171c8:	21a7      	movs	r1, #167	; 0xa7
   171ca:	4807      	ldr	r0, [pc, #28]	; (171e8 <z_impl_k_mutex_lock+0x190>)
   171cc:	f002 fe73 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   171d0:	f386 8811 	msr	BASEPRI, r6
   171d4:	f3bf 8f6f 	isb	sy
   171d8:	e7e8      	b.n	171ac <z_impl_k_mutex_lock+0x154>
   171da:	bf00      	nop
   171dc:	00021612 	.word	0x00021612
   171e0:	0001ea60 	.word	0x0001ea60
   171e4:	2000ade8 	.word	0x2000ade8
   171e8:	0001ea9a 	.word	0x0001ea9a
   171ec:	2000adec 	.word	0x2000adec

000171f0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   171f0:	b538      	push	{r3, r4, r5, lr}
   171f2:	4604      	mov	r4, r0
   171f4:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   171f8:	b143      	cbz	r3, 1720c <z_impl_k_mutex_unlock+0x1c>
   171fa:	4946      	ldr	r1, [pc, #280]	; (17314 <z_impl_k_mutex_unlock+0x124>)
   171fc:	4846      	ldr	r0, [pc, #280]	; (17318 <z_impl_k_mutex_unlock+0x128>)
   171fe:	22d8      	movs	r2, #216	; 0xd8
   17200:	f002 fbb3 	bl	1996a <printk>
   17204:	21d8      	movs	r1, #216	; 0xd8
   17206:	4843      	ldr	r0, [pc, #268]	; (17314 <z_impl_k_mutex_unlock+0x124>)
   17208:	f002 fe55 	bl	19eb6 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   1720c:	68a3      	ldr	r3, [r4, #8]
   1720e:	2b00      	cmp	r3, #0
   17210:	d079      	beq.n	17306 <z_impl_k_mutex_unlock+0x116>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   17212:	4d42      	ldr	r5, [pc, #264]	; (1731c <z_impl_k_mutex_unlock+0x12c>)
   17214:	68aa      	ldr	r2, [r5, #8]
   17216:	4293      	cmp	r3, r2
   17218:	d178      	bne.n	1730c <z_impl_k_mutex_unlock+0x11c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1721a:	68e3      	ldr	r3, [r4, #12]
   1721c:	b943      	cbnz	r3, 17230 <z_impl_k_mutex_unlock+0x40>
   1721e:	493d      	ldr	r1, [pc, #244]	; (17314 <z_impl_k_mutex_unlock+0x124>)
   17220:	483d      	ldr	r0, [pc, #244]	; (17318 <z_impl_k_mutex_unlock+0x128>)
   17222:	22ea      	movs	r2, #234	; 0xea
   17224:	f002 fba1 	bl	1996a <printk>
   17228:	21ea      	movs	r1, #234	; 0xea
   1722a:	483a      	ldr	r0, [pc, #232]	; (17314 <z_impl_k_mutex_unlock+0x124>)
   1722c:	f002 fe43 	bl	19eb6 <assert_post_action>
   17230:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   17234:	b153      	cbz	r3, 1724c <z_impl_k_mutex_unlock+0x5c>
   17236:	493a      	ldr	r1, [pc, #232]	; (17320 <z_impl_k_mutex_unlock+0x130>)
   17238:	4837      	ldr	r0, [pc, #220]	; (17318 <z_impl_k_mutex_unlock+0x128>)
   1723a:	f44f 7289 	mov.w	r2, #274	; 0x112
   1723e:	f002 fb94 	bl	1996a <printk>
   17242:	f44f 7189 	mov.w	r1, #274	; 0x112
   17246:	4836      	ldr	r0, [pc, #216]	; (17320 <z_impl_k_mutex_unlock+0x130>)
   17248:	f002 fe35 	bl	19eb6 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1724c:	68ab      	ldr	r3, [r5, #8]
   1724e:	7bdb      	ldrb	r3, [r3, #15]
   17250:	2b01      	cmp	r3, #1
   17252:	d10a      	bne.n	1726a <z_impl_k_mutex_unlock+0x7a>
   17254:	4932      	ldr	r1, [pc, #200]	; (17320 <z_impl_k_mutex_unlock+0x130>)
   17256:	4830      	ldr	r0, [pc, #192]	; (17318 <z_impl_k_mutex_unlock+0x128>)
   17258:	f240 1213 	movw	r2, #275	; 0x113
   1725c:	f002 fb85 	bl	1996a <printk>
   17260:	f240 1113 	movw	r1, #275	; 0x113
   17264:	482e      	ldr	r0, [pc, #184]	; (17320 <z_impl_k_mutex_unlock+0x130>)
   17266:	f002 fe26 	bl	19eb6 <assert_post_action>

	--_current->base.sched_locked;
   1726a:	68aa      	ldr	r2, [r5, #8]
   1726c:	7bd3      	ldrb	r3, [r2, #15]
   1726e:	3b01      	subs	r3, #1
   17270:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   17272:	68e3      	ldr	r3, [r4, #12]
   17274:	2b01      	cmp	r3, #1
   17276:	d005      	beq.n	17284 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   17278:	3b01      	subs	r3, #1
   1727a:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1727c:	f000 fb38 	bl	178f0 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   17280:	2000      	movs	r0, #0
}
   17282:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   17284:	f04f 0320 	mov.w	r3, #32
   17288:	f3ef 8511 	mrs	r5, BASEPRI
   1728c:	f383 8811 	msr	BASEPRI, r3
   17290:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17294:	4823      	ldr	r0, [pc, #140]	; (17324 <z_impl_k_mutex_unlock+0x134>)
   17296:	f001 fb7f 	bl	18998 <z_spin_lock_valid>
   1729a:	b940      	cbnz	r0, 172ae <z_impl_k_mutex_unlock+0xbe>
   1729c:	4922      	ldr	r1, [pc, #136]	; (17328 <z_impl_k_mutex_unlock+0x138>)
   1729e:	481e      	ldr	r0, [pc, #120]	; (17318 <z_impl_k_mutex_unlock+0x128>)
   172a0:	227c      	movs	r2, #124	; 0x7c
   172a2:	f002 fb62 	bl	1996a <printk>
   172a6:	217c      	movs	r1, #124	; 0x7c
   172a8:	481f      	ldr	r0, [pc, #124]	; (17328 <z_impl_k_mutex_unlock+0x138>)
   172aa:	f002 fe04 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   172ae:	481d      	ldr	r0, [pc, #116]	; (17324 <z_impl_k_mutex_unlock+0x134>)
   172b0:	f001 fb8e 	bl	189d0 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   172b4:	6921      	ldr	r1, [r4, #16]
   172b6:	68a0      	ldr	r0, [r4, #8]
   172b8:	f005 feac 	bl	1d014 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   172bc:	4620      	mov	r0, r4
   172be:	f000 ffc9 	bl	18254 <z_unpend_first_thread>
	mutex->owner = new_owner;
   172c2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   172c4:	b160      	cbz	r0, 172e0 <z_impl_k_mutex_unlock+0xf0>
		mutex->owner_orig_prio = new_owner->base.prio;
   172c6:	f990 200e 	ldrsb.w	r2, [r0, #14]
   172ca:	6122      	str	r2, [r4, #16]
   172cc:	2200      	movs	r2, #0
   172ce:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   172d2:	f000 fbb3 	bl	17a3c <z_ready_thread>
		z_reschedule(&lock, key);
   172d6:	4629      	mov	r1, r5
   172d8:	4812      	ldr	r0, [pc, #72]	; (17324 <z_impl_k_mutex_unlock+0x134>)
   172da:	f000 f9db 	bl	17694 <z_reschedule>
   172de:	e7cd      	b.n	1727c <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   172e0:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   172e2:	4810      	ldr	r0, [pc, #64]	; (17324 <z_impl_k_mutex_unlock+0x134>)
   172e4:	f001 fb66 	bl	189b4 <z_spin_unlock_valid>
   172e8:	b940      	cbnz	r0, 172fc <z_impl_k_mutex_unlock+0x10c>
   172ea:	490f      	ldr	r1, [pc, #60]	; (17328 <z_impl_k_mutex_unlock+0x138>)
   172ec:	480a      	ldr	r0, [pc, #40]	; (17318 <z_impl_k_mutex_unlock+0x128>)
   172ee:	22a7      	movs	r2, #167	; 0xa7
   172f0:	f002 fb3b 	bl	1996a <printk>
   172f4:	21a7      	movs	r1, #167	; 0xa7
   172f6:	480c      	ldr	r0, [pc, #48]	; (17328 <z_impl_k_mutex_unlock+0x138>)
   172f8:	f002 fddd 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   172fc:	f385 8811 	msr	BASEPRI, r5
   17300:	f3bf 8f6f 	isb	sy
   17304:	e7ba      	b.n	1727c <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   17306:	f06f 0015 	mvn.w	r0, #21
   1730a:	e7ba      	b.n	17282 <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   1730c:	f04f 30ff 	mov.w	r0, #4294967295
   17310:	e7b7      	b.n	17282 <z_impl_k_mutex_unlock+0x92>
   17312:	bf00      	nop
   17314:	00021612 	.word	0x00021612
   17318:	0001ea60 	.word	0x0001ea60
   1731c:	2000adec 	.word	0x2000adec
   17320:	00021634 	.word	0x00021634
   17324:	2000ade8 	.word	0x2000ade8
   17328:	0001ea9a 	.word	0x0001ea9a

0001732c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   1732c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17330:	4604      	mov	r4, r0
   17332:	460d      	mov	r5, r1
   17334:	4690      	mov	r8, r2
   17336:	4699      	mov	r9, r3
   17338:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1733c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   17340:	f04f 0320 	mov.w	r3, #32
   17344:	f3ef 8711 	mrs	r7, BASEPRI
   17348:	f383 8811 	msr	BASEPRI, r3
   1734c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17350:	4630      	mov	r0, r6
   17352:	f001 fb21 	bl	18998 <z_spin_lock_valid>
   17356:	b940      	cbnz	r0, 1736a <queue_insert+0x3e>
   17358:	4937      	ldr	r1, [pc, #220]	; (17438 <queue_insert+0x10c>)
   1735a:	4838      	ldr	r0, [pc, #224]	; (1743c <queue_insert+0x110>)
   1735c:	227c      	movs	r2, #124	; 0x7c
   1735e:	f002 fb04 	bl	1996a <printk>
   17362:	217c      	movs	r1, #124	; 0x7c
   17364:	4834      	ldr	r0, [pc, #208]	; (17438 <queue_insert+0x10c>)
   17366:	f002 fda6 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   1736a:	4630      	mov	r0, r6
   1736c:	f001 fb30 	bl	189d0 <z_spin_lock_set_owner>

	if (is_append) {
   17370:	f1ba 0f00 	cmp.w	sl, #0
   17374:	d000      	beq.n	17378 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   17376:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   17378:	f104 000c 	add.w	r0, r4, #12
   1737c:	f000 ff6a 	bl	18254 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   17380:	b160      	cbz	r0, 1739c <queue_insert+0x70>
   17382:	2400      	movs	r4, #0
   17384:	f8c0 8014 	str.w	r8, [r0, #20]
   17388:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   1738c:	f000 fb56 	bl	17a3c <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   17390:	4630      	mov	r0, r6
   17392:	4639      	mov	r1, r7
   17394:	f000 f97e 	bl	17694 <z_reschedule>
	return 0;
   17398:	2000      	movs	r0, #0
   1739a:	e019      	b.n	173d0 <queue_insert+0xa4>
	if (alloc) {
   1739c:	f1b9 0f00 	cmp.w	r9, #0
   173a0:	d028      	beq.n	173f4 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   173a2:	2108      	movs	r1, #8
   173a4:	f002 fa12 	bl	197cc <z_thread_aligned_alloc>
		if (anode == NULL) {
   173a8:	b9a0      	cbnz	r0, 173d4 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   173aa:	4630      	mov	r0, r6
   173ac:	f001 fb02 	bl	189b4 <z_spin_unlock_valid>
   173b0:	b940      	cbnz	r0, 173c4 <queue_insert+0x98>
   173b2:	4921      	ldr	r1, [pc, #132]	; (17438 <queue_insert+0x10c>)
   173b4:	4821      	ldr	r0, [pc, #132]	; (1743c <queue_insert+0x110>)
   173b6:	22a7      	movs	r2, #167	; 0xa7
   173b8:	f002 fad7 	bl	1996a <printk>
   173bc:	21a7      	movs	r1, #167	; 0xa7
   173be:	481e      	ldr	r0, [pc, #120]	; (17438 <queue_insert+0x10c>)
   173c0:	f002 fd79 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   173c4:	f387 8811 	msr	BASEPRI, r7
   173c8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   173cc:	f06f 000b 	mvn.w	r0, #11
}
   173d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   173d4:	2301      	movs	r3, #1
		anode->data = data;
   173d6:	f8c0 8004 	str.w	r8, [r0, #4]
   173da:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   173dc:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   173de:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   173e2:	b95d      	cbnz	r5, 173fc <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   173e4:	6823      	ldr	r3, [r4, #0]
   173e6:	4313      	orrs	r3, r2
   173e8:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   173ea:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   173ec:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   173ee:	b973      	cbnz	r3, 1740e <queue_insert+0xe2>
	list->tail = node;
   173f0:	6060      	str	r0, [r4, #4]
}
   173f2:	e00c      	b.n	1740e <queue_insert+0xe2>
}
   173f4:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   173f6:	f8c8 9000 	str.w	r9, [r8]
}
   173fa:	e7ef      	b.n	173dc <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   173fc:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   173fe:	f033 0303 	bics.w	r3, r3, #3
   17402:	d110      	bne.n	17426 <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   17404:	6002      	str	r2, [r0, #0]
	return list->tail;
   17406:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   17408:	b93a      	cbnz	r2, 1741a <queue_insert+0xee>
	list->head = node;
   1740a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1740e:	2104      	movs	r1, #4
   17410:	f104 0014 	add.w	r0, r4, #20
   17414:	f005 ff6d 	bl	1d2f2 <z_handle_obj_poll_events>
   17418:	e7ba      	b.n	17390 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1741a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1741c:	f003 0303 	and.w	r3, r3, #3
   17420:	4303      	orrs	r3, r0
   17422:	6013      	str	r3, [r2, #0]
   17424:	e7e4      	b.n	173f0 <queue_insert+0xc4>
   17426:	4313      	orrs	r3, r2
   17428:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1742a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1742c:	f003 0303 	and.w	r3, r3, #3
   17430:	4303      	orrs	r3, r0
   17432:	602b      	str	r3, [r5, #0]
}
   17434:	e7eb      	b.n	1740e <queue_insert+0xe2>
   17436:	bf00      	nop
   17438:	0001ea9a 	.word	0x0001ea9a
   1743c:	0001ea60 	.word	0x0001ea60

00017440 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   17440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17444:	4605      	mov	r5, r0
   17446:	4616      	mov	r6, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   17448:	460c      	mov	r4, r1
   1744a:	2900      	cmp	r1, #0
   1744c:	d045      	beq.n	174da <k_queue_append_list+0x9a>
   1744e:	2a00      	cmp	r2, #0
   17450:	d043      	beq.n	174da <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17452:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   17456:	f04f 0320 	mov.w	r3, #32
   1745a:	f3ef 8911 	mrs	r9, BASEPRI
   1745e:	f383 8811 	msr	BASEPRI, r3
   17462:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17466:	4638      	mov	r0, r7
   17468:	f001 fa96 	bl	18998 <z_spin_lock_valid>
   1746c:	b940      	cbnz	r0, 17480 <k_queue_append_list+0x40>
   1746e:	491c      	ldr	r1, [pc, #112]	; (174e0 <k_queue_append_list+0xa0>)
   17470:	481c      	ldr	r0, [pc, #112]	; (174e4 <k_queue_append_list+0xa4>)
   17472:	227c      	movs	r2, #124	; 0x7c
   17474:	f002 fa79 	bl	1996a <printk>
   17478:	217c      	movs	r1, #124	; 0x7c
   1747a:	4819      	ldr	r0, [pc, #100]	; (174e0 <k_queue_append_list+0xa0>)
   1747c:	f002 fd1b 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   17480:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   17482:	f105 080c 	add.w	r8, r5, #12
   17486:	f001 faa3 	bl	189d0 <z_spin_lock_set_owner>
   1748a:	4640      	mov	r0, r8
   1748c:	f000 fee2 	bl	18254 <z_unpend_first_thread>
   17490:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   17494:	b920      	cbnz	r0, 174a0 <k_queue_append_list+0x60>
	return list->tail;
   17496:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   17498:	b9ca      	cbnz	r2, 174ce <k_queue_append_list+0x8e>
	list->head = node;
   1749a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1749c:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1749e:	e00a      	b.n	174b6 <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   174a0:	6144      	str	r4, [r0, #20]
   174a2:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   174a6:	f000 fac9 	bl	17a3c <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   174aa:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   174ac:	4640      	mov	r0, r8
   174ae:	f000 fed1 	bl	18254 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   174b2:	2c00      	cmp	r4, #0
   174b4:	d1ee      	bne.n	17494 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   174b6:	2104      	movs	r1, #4
   174b8:	f105 0014 	add.w	r0, r5, #20
   174bc:	f005 ff19 	bl	1d2f2 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   174c0:	4638      	mov	r0, r7
   174c2:	4649      	mov	r1, r9
   174c4:	f000 f8e6 	bl	17694 <z_reschedule>
	return 0;
   174c8:	2000      	movs	r0, #0
}
   174ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   174ce:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   174d0:	f003 0303 	and.w	r3, r3, #3
   174d4:	431c      	orrs	r4, r3
   174d6:	6014      	str	r4, [r2, #0]
}
   174d8:	e7e0      	b.n	1749c <k_queue_append_list+0x5c>
		return -EINVAL;
   174da:	f06f 0015 	mvn.w	r0, #21
   174de:	e7f4      	b.n	174ca <k_queue_append_list+0x8a>
   174e0:	0001ea9a 	.word	0x0001ea9a
   174e4:	0001ea60 	.word	0x0001ea60

000174e8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   174e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   174ec:	4605      	mov	r5, r0
   174ee:	4690      	mov	r8, r2
   174f0:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   174f2:	f100 0608 	add.w	r6, r0, #8
   174f6:	f04f 0320 	mov.w	r3, #32
   174fa:	f3ef 8911 	mrs	r9, BASEPRI
   174fe:	f383 8811 	msr	BASEPRI, r3
   17502:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17506:	4630      	mov	r0, r6
   17508:	f001 fa46 	bl	18998 <z_spin_lock_valid>
   1750c:	b940      	cbnz	r0, 17520 <z_impl_k_queue_get+0x38>
   1750e:	4921      	ldr	r1, [pc, #132]	; (17594 <z_impl_k_queue_get+0xac>)
   17510:	4821      	ldr	r0, [pc, #132]	; (17598 <z_impl_k_queue_get+0xb0>)
   17512:	227c      	movs	r2, #124	; 0x7c
   17514:	f002 fa29 	bl	1996a <printk>
   17518:	217c      	movs	r1, #124	; 0x7c
   1751a:	481e      	ldr	r0, [pc, #120]	; (17594 <z_impl_k_queue_get+0xac>)
   1751c:	f002 fccb 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   17520:	4630      	mov	r0, r6
   17522:	f001 fa55 	bl	189d0 <z_spin_lock_set_owner>
	return list->head;
   17526:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   17528:	b314      	cbz	r4, 17570 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1752a:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1752c:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1752e:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   17532:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   17534:	4620      	mov	r0, r4
   17536:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   1753a:	602b      	str	r3, [r5, #0]
	list->tail = node;
   1753c:	bf08      	it	eq
   1753e:	606b      	streq	r3, [r5, #4]
   17540:	f005 fd77 	bl	1d032 <z_queue_node_peek>
   17544:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17546:	4630      	mov	r0, r6
   17548:	f001 fa34 	bl	189b4 <z_spin_unlock_valid>
   1754c:	b940      	cbnz	r0, 17560 <z_impl_k_queue_get+0x78>
   1754e:	4911      	ldr	r1, [pc, #68]	; (17594 <z_impl_k_queue_get+0xac>)
   17550:	4811      	ldr	r0, [pc, #68]	; (17598 <z_impl_k_queue_get+0xb0>)
   17552:	22a7      	movs	r2, #167	; 0xa7
   17554:	f002 fa09 	bl	1996a <printk>
   17558:	21a7      	movs	r1, #167	; 0xa7
   1755a:	480e      	ldr	r0, [pc, #56]	; (17594 <z_impl_k_queue_get+0xac>)
   1755c:	f002 fcab 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   17560:	f389 8811 	msr	BASEPRI, r9
   17564:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   17568:	4620      	mov	r0, r4
   1756a:	b003      	add	sp, #12
   1756c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17570:	ea58 0307 	orrs.w	r3, r8, r7
   17574:	d0e7      	beq.n	17546 <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   17576:	4649      	mov	r1, r9
   17578:	4630      	mov	r0, r6
   1757a:	e9cd 8700 	strd	r8, r7, [sp]
   1757e:	f105 020c 	add.w	r2, r5, #12
   17582:	f000 fdc5 	bl	18110 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   17586:	2800      	cmp	r0, #0
   17588:	d1ee      	bne.n	17568 <z_impl_k_queue_get+0x80>
   1758a:	4b04      	ldr	r3, [pc, #16]	; (1759c <z_impl_k_queue_get+0xb4>)
   1758c:	689b      	ldr	r3, [r3, #8]
   1758e:	695c      	ldr	r4, [r3, #20]
   17590:	e7ea      	b.n	17568 <z_impl_k_queue_get+0x80>
   17592:	bf00      	nop
   17594:	0001ea9a 	.word	0x0001ea9a
   17598:	0001ea60 	.word	0x0001ea60
   1759c:	2000adec 	.word	0x2000adec

000175a0 <pended_on>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   175a0:	6883      	ldr	r3, [r0, #8]
{
   175a2:	b510      	push	{r4, lr}
   175a4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   175a6:	b953      	cbnz	r3, 175be <pended_on+0x1e>
   175a8:	4906      	ldr	r1, [pc, #24]	; (175c4 <pended_on+0x24>)
   175aa:	4807      	ldr	r0, [pc, #28]	; (175c8 <pended_on+0x28>)
   175ac:	f44f 7201 	mov.w	r2, #516	; 0x204
   175b0:	f002 f9db 	bl	1996a <printk>
   175b4:	f44f 7101 	mov.w	r1, #516	; 0x204
   175b8:	4802      	ldr	r0, [pc, #8]	; (175c4 <pended_on+0x24>)
   175ba:	f002 fc7c 	bl	19eb6 <assert_post_action>

	return thread->base.pended_on;
}
   175be:	68a0      	ldr	r0, [r4, #8]
   175c0:	bd10      	pop	{r4, pc}
   175c2:	bf00      	nop
   175c4:	0002165f 	.word	0x0002165f
   175c8:	0001ea60 	.word	0x0001ea60

000175cc <z_reset_time_slice>:
{
   175cc:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   175ce:	4c08      	ldr	r4, [pc, #32]	; (175f0 <z_reset_time_slice+0x24>)
   175d0:	6823      	ldr	r3, [r4, #0]
   175d2:	b15b      	cbz	r3, 175ec <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   175d4:	f7f4 fb20 	bl	bc18 <z_clock_elapsed>
   175d8:	4603      	mov	r3, r0
   175da:	6820      	ldr	r0, [r4, #0]
   175dc:	4a05      	ldr	r2, [pc, #20]	; (175f4 <z_reset_time_slice+0x28>)
   175de:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   175e0:	2100      	movs	r1, #0
}
   175e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   175e6:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   175e8:	f001 bc8c 	b.w	18f04 <z_set_timeout_expiry>
}
   175ec:	bd10      	pop	{r4, pc}
   175ee:	bf00      	nop
   175f0:	2000ae2c 	.word	0x2000ae2c
   175f4:	2000adec 	.word	0x2000adec

000175f8 <k_sched_time_slice_set>:
{
   175f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   175fa:	4604      	mov	r4, r0
   175fc:	460d      	mov	r5, r1
	__asm__ volatile(
   175fe:	f04f 0320 	mov.w	r3, #32
   17602:	f3ef 8711 	mrs	r7, BASEPRI
   17606:	f383 8811 	msr	BASEPRI, r3
   1760a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1760e:	481b      	ldr	r0, [pc, #108]	; (1767c <k_sched_time_slice_set+0x84>)
   17610:	f001 f9c2 	bl	18998 <z_spin_lock_valid>
   17614:	b940      	cbnz	r0, 17628 <k_sched_time_slice_set+0x30>
   17616:	491a      	ldr	r1, [pc, #104]	; (17680 <k_sched_time_slice_set+0x88>)
   17618:	481a      	ldr	r0, [pc, #104]	; (17684 <k_sched_time_slice_set+0x8c>)
   1761a:	227c      	movs	r2, #124	; 0x7c
   1761c:	f002 f9a5 	bl	1996a <printk>
   17620:	217c      	movs	r1, #124	; 0x7c
   17622:	4817      	ldr	r0, [pc, #92]	; (17680 <k_sched_time_slice_set+0x88>)
   17624:	f002 fc47 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   17628:	4814      	ldr	r0, [pc, #80]	; (1767c <k_sched_time_slice_set+0x84>)
   1762a:	f001 f9d1 	bl	189d0 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1762e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   17632:	2100      	movs	r1, #0
   17634:	f240 30e7 	movw	r0, #999	; 0x3e7
   17638:	4b13      	ldr	r3, [pc, #76]	; (17688 <k_sched_time_slice_set+0x90>)
   1763a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1763e:	6159      	str	r1, [r3, #20]
   17640:	2300      	movs	r3, #0
   17642:	fbe4 0106 	umlal	r0, r1, r4, r6
   17646:	f7f1 fa71 	bl	8b2c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1764a:	4b10      	ldr	r3, [pc, #64]	; (1768c <k_sched_time_slice_set+0x94>)
   1764c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1764e:	4b10      	ldr	r3, [pc, #64]	; (17690 <k_sched_time_slice_set+0x98>)
   17650:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   17652:	f7ff ffbb 	bl	175cc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17656:	4809      	ldr	r0, [pc, #36]	; (1767c <k_sched_time_slice_set+0x84>)
   17658:	f001 f9ac 	bl	189b4 <z_spin_unlock_valid>
   1765c:	b940      	cbnz	r0, 17670 <k_sched_time_slice_set+0x78>
   1765e:	4908      	ldr	r1, [pc, #32]	; (17680 <k_sched_time_slice_set+0x88>)
   17660:	4808      	ldr	r0, [pc, #32]	; (17684 <k_sched_time_slice_set+0x8c>)
   17662:	22a7      	movs	r2, #167	; 0xa7
   17664:	f002 f981 	bl	1996a <printk>
   17668:	21a7      	movs	r1, #167	; 0xa7
   1766a:	4805      	ldr	r0, [pc, #20]	; (17680 <k_sched_time_slice_set+0x88>)
   1766c:	f002 fc23 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   17670:	f387 8811 	msr	BASEPRI, r7
   17674:	f3bf 8f6f 	isb	sy
}
   17678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1767a:	bf00      	nop
   1767c:	2000ae24 	.word	0x2000ae24
   17680:	0001ea9a 	.word	0x0001ea9a
   17684:	0001ea60 	.word	0x0001ea60
   17688:	2000adec 	.word	0x2000adec
   1768c:	2000ae2c 	.word	0x2000ae2c
   17690:	2000ae28 	.word	0x2000ae28

00017694 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   17694:	b510      	push	{r4, lr}
   17696:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   17698:	460c      	mov	r4, r1
   1769a:	b9c1      	cbnz	r1, 176ce <z_reschedule+0x3a>
   1769c:	f3ef 8205 	mrs	r2, IPSR
   176a0:	b9aa      	cbnz	r2, 176ce <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   176a2:	4a14      	ldr	r2, [pc, #80]	; (176f4 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   176a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
   176a6:	6892      	ldr	r2, [r2, #8]
   176a8:	4291      	cmp	r1, r2
   176aa:	d010      	beq.n	176ce <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   176ac:	f001 f982 	bl	189b4 <z_spin_unlock_valid>
   176b0:	b940      	cbnz	r0, 176c4 <z_reschedule+0x30>
   176b2:	4911      	ldr	r1, [pc, #68]	; (176f8 <z_reschedule+0x64>)
   176b4:	4811      	ldr	r0, [pc, #68]	; (176fc <z_reschedule+0x68>)
   176b6:	22be      	movs	r2, #190	; 0xbe
   176b8:	f002 f957 	bl	1996a <printk>
   176bc:	21be      	movs	r1, #190	; 0xbe
   176be:	480e      	ldr	r0, [pc, #56]	; (176f8 <z_reschedule+0x64>)
   176c0:	f002 fbf9 	bl	19eb6 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   176c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   176c8:	2000      	movs	r0, #0
   176ca:	f7f5 babf 	b.w	cc4c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   176ce:	4618      	mov	r0, r3
   176d0:	f001 f970 	bl	189b4 <z_spin_unlock_valid>
   176d4:	b940      	cbnz	r0, 176e8 <z_reschedule+0x54>
   176d6:	4908      	ldr	r1, [pc, #32]	; (176f8 <z_reschedule+0x64>)
   176d8:	4808      	ldr	r0, [pc, #32]	; (176fc <z_reschedule+0x68>)
   176da:	22a7      	movs	r2, #167	; 0xa7
   176dc:	f002 f945 	bl	1996a <printk>
   176e0:	21a7      	movs	r1, #167	; 0xa7
   176e2:	4805      	ldr	r0, [pc, #20]	; (176f8 <z_reschedule+0x64>)
   176e4:	f002 fbe7 	bl	19eb6 <assert_post_action>
   176e8:	f384 8811 	msr	BASEPRI, r4
   176ec:	f3bf 8f6f 	isb	sy
   176f0:	bd10      	pop	{r4, pc}
   176f2:	bf00      	nop
   176f4:	2000adec 	.word	0x2000adec
   176f8:	0001ea9a 	.word	0x0001ea9a
   176fc:	0001ea60 	.word	0x0001ea60

00017700 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   17700:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   17702:	f04f 0320 	mov.w	r3, #32
   17706:	f3ef 8511 	mrs	r5, BASEPRI
   1770a:	f383 8811 	msr	BASEPRI, r3
   1770e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17712:	4822      	ldr	r0, [pc, #136]	; (1779c <k_sched_lock+0x9c>)
   17714:	f001 f940 	bl	18998 <z_spin_lock_valid>
   17718:	b940      	cbnz	r0, 1772c <k_sched_lock+0x2c>
   1771a:	4921      	ldr	r1, [pc, #132]	; (177a0 <k_sched_lock+0xa0>)
   1771c:	4821      	ldr	r0, [pc, #132]	; (177a4 <k_sched_lock+0xa4>)
   1771e:	227c      	movs	r2, #124	; 0x7c
   17720:	f002 f923 	bl	1996a <printk>
   17724:	217c      	movs	r1, #124	; 0x7c
   17726:	481e      	ldr	r0, [pc, #120]	; (177a0 <k_sched_lock+0xa0>)
   17728:	f002 fbc5 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   1772c:	481b      	ldr	r0, [pc, #108]	; (1779c <k_sched_lock+0x9c>)
   1772e:	f001 f94f 	bl	189d0 <z_spin_lock_set_owner>
   17732:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   17736:	b153      	cbz	r3, 1774e <k_sched_lock+0x4e>
   17738:	491b      	ldr	r1, [pc, #108]	; (177a8 <k_sched_lock+0xa8>)
   1773a:	481a      	ldr	r0, [pc, #104]	; (177a4 <k_sched_lock+0xa4>)
   1773c:	f44f 7289 	mov.w	r2, #274	; 0x112
   17740:	f002 f913 	bl	1996a <printk>
   17744:	f44f 7189 	mov.w	r1, #274	; 0x112
   17748:	4817      	ldr	r0, [pc, #92]	; (177a8 <k_sched_lock+0xa8>)
   1774a:	f002 fbb4 	bl	19eb6 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1774e:	4c17      	ldr	r4, [pc, #92]	; (177ac <k_sched_lock+0xac>)
   17750:	68a3      	ldr	r3, [r4, #8]
   17752:	7bdb      	ldrb	r3, [r3, #15]
   17754:	2b01      	cmp	r3, #1
   17756:	d10a      	bne.n	1776e <k_sched_lock+0x6e>
   17758:	4913      	ldr	r1, [pc, #76]	; (177a8 <k_sched_lock+0xa8>)
   1775a:	4812      	ldr	r0, [pc, #72]	; (177a4 <k_sched_lock+0xa4>)
   1775c:	f240 1213 	movw	r2, #275	; 0x113
   17760:	f002 f903 	bl	1996a <printk>
   17764:	f240 1113 	movw	r1, #275	; 0x113
   17768:	480f      	ldr	r0, [pc, #60]	; (177a8 <k_sched_lock+0xa8>)
   1776a:	f002 fba4 	bl	19eb6 <assert_post_action>
	--_current->base.sched_locked;
   1776e:	68a2      	ldr	r2, [r4, #8]
   17770:	7bd3      	ldrb	r3, [r2, #15]
   17772:	3b01      	subs	r3, #1
   17774:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17776:	4809      	ldr	r0, [pc, #36]	; (1779c <k_sched_lock+0x9c>)
   17778:	f001 f91c 	bl	189b4 <z_spin_unlock_valid>
   1777c:	b940      	cbnz	r0, 17790 <k_sched_lock+0x90>
   1777e:	4908      	ldr	r1, [pc, #32]	; (177a0 <k_sched_lock+0xa0>)
   17780:	4808      	ldr	r0, [pc, #32]	; (177a4 <k_sched_lock+0xa4>)
   17782:	22a7      	movs	r2, #167	; 0xa7
   17784:	f002 f8f1 	bl	1996a <printk>
   17788:	21a7      	movs	r1, #167	; 0xa7
   1778a:	4805      	ldr	r0, [pc, #20]	; (177a0 <k_sched_lock+0xa0>)
   1778c:	f002 fb93 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   17790:	f385 8811 	msr	BASEPRI, r5
   17794:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   17798:	bd38      	pop	{r3, r4, r5, pc}
   1779a:	bf00      	nop
   1779c:	2000ae24 	.word	0x2000ae24
   177a0:	0001ea9a 	.word	0x0001ea9a
   177a4:	0001ea60 	.word	0x0001ea60
   177a8:	00021634 	.word	0x00021634
   177ac:	2000adec 	.word	0x2000adec

000177b0 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   177b0:	4b11      	ldr	r3, [pc, #68]	; (177f8 <z_priq_dumb_remove+0x48>)
{
   177b2:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   177b4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   177b8:	4282      	cmp	r2, r0
{
   177ba:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   177bc:	d105      	bne.n	177ca <z_priq_dumb_remove+0x1a>
   177be:	689b      	ldr	r3, [r3, #8]
   177c0:	428b      	cmp	r3, r1
   177c2:	d102      	bne.n	177ca <z_priq_dumb_remove+0x1a>
   177c4:	7b4b      	ldrb	r3, [r1, #13]
   177c6:	06db      	lsls	r3, r3, #27
   177c8:	d114      	bne.n	177f4 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   177ca:	4b0c      	ldr	r3, [pc, #48]	; (177fc <z_priq_dumb_remove+0x4c>)
   177cc:	429c      	cmp	r4, r3
   177ce:	d10a      	bne.n	177e6 <z_priq_dumb_remove+0x36>
   177d0:	490b      	ldr	r1, [pc, #44]	; (17800 <z_priq_dumb_remove+0x50>)
   177d2:	480c      	ldr	r0, [pc, #48]	; (17804 <z_priq_dumb_remove+0x54>)
   177d4:	f240 32da 	movw	r2, #986	; 0x3da
   177d8:	f002 f8c7 	bl	1996a <printk>
   177dc:	f240 31da 	movw	r1, #986	; 0x3da
   177e0:	4807      	ldr	r0, [pc, #28]	; (17800 <z_priq_dumb_remove+0x50>)
   177e2:	f002 fb68 	bl	19eb6 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   177e6:	e9d4 3200 	ldrd	r3, r2, [r4]
   177ea:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   177ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   177ee:	2300      	movs	r3, #0
	node->prev = NULL;
   177f0:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   177f4:	bd10      	pop	{r4, pc}
   177f6:	bf00      	nop
   177f8:	2000adec 	.word	0x2000adec
   177fc:	2000a290 	.word	0x2000a290
   17800:	0002165f 	.word	0x0002165f
   17804:	0001ea60 	.word	0x0001ea60

00017808 <z_unpend_thread>:
{
   17808:	b538      	push	{r3, r4, r5, lr}
   1780a:	4604      	mov	r4, r0
	__asm__ volatile(
   1780c:	f04f 0320 	mov.w	r3, #32
   17810:	f3ef 8511 	mrs	r5, BASEPRI
   17814:	f383 8811 	msr	BASEPRI, r3
   17818:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1781c:	4814      	ldr	r0, [pc, #80]	; (17870 <z_unpend_thread+0x68>)
   1781e:	f001 f8bb 	bl	18998 <z_spin_lock_valid>
   17822:	b940      	cbnz	r0, 17836 <z_unpend_thread+0x2e>
   17824:	4913      	ldr	r1, [pc, #76]	; (17874 <z_unpend_thread+0x6c>)
   17826:	4814      	ldr	r0, [pc, #80]	; (17878 <z_unpend_thread+0x70>)
   17828:	227c      	movs	r2, #124	; 0x7c
   1782a:	f002 f89e 	bl	1996a <printk>
   1782e:	217c      	movs	r1, #124	; 0x7c
   17830:	4810      	ldr	r0, [pc, #64]	; (17874 <z_unpend_thread+0x6c>)
   17832:	f002 fb40 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   17836:	480e      	ldr	r0, [pc, #56]	; (17870 <z_unpend_thread+0x68>)
   17838:	f001 f8ca 	bl	189d0 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   1783c:	4620      	mov	r0, r4
   1783e:	f005 fc45 	bl	1d0cc <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17842:	480b      	ldr	r0, [pc, #44]	; (17870 <z_unpend_thread+0x68>)
   17844:	f001 f8b6 	bl	189b4 <z_spin_unlock_valid>
   17848:	b940      	cbnz	r0, 1785c <z_unpend_thread+0x54>
   1784a:	490a      	ldr	r1, [pc, #40]	; (17874 <z_unpend_thread+0x6c>)
   1784c:	480a      	ldr	r0, [pc, #40]	; (17878 <z_unpend_thread+0x70>)
   1784e:	22a7      	movs	r2, #167	; 0xa7
   17850:	f002 f88b 	bl	1996a <printk>
   17854:	21a7      	movs	r1, #167	; 0xa7
   17856:	4807      	ldr	r0, [pc, #28]	; (17874 <z_unpend_thread+0x6c>)
   17858:	f002 fb2d 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   1785c:	f385 8811 	msr	BASEPRI, r5
   17860:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   17864:	f104 0018 	add.w	r0, r4, #24
}
   17868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1786c:	f001 bad8 	b.w	18e20 <z_abort_timeout>
   17870:	2000ae24 	.word	0x2000ae24
   17874:	0001ea9a 	.word	0x0001ea9a
   17878:	0001ea60 	.word	0x0001ea60

0001787c <update_cache>:
{
   1787c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current != NULL, "");
   1787e:	4c19      	ldr	r4, [pc, #100]	; (178e4 <update_cache+0x68>)
{
   17880:	4602      	mov	r2, r0
	if (_current_cpu->pending_abort != NULL) {
   17882:	6923      	ldr	r3, [r4, #16]
	__ASSERT(_current != NULL, "");
   17884:	68a1      	ldr	r1, [r4, #8]
	if (_current_cpu->pending_abort != NULL) {
   17886:	b143      	cbz	r3, 1789a <update_cache+0x1e>
		return _current_cpu->idle_thread;
   17888:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1788a:	b1a8      	cbz	r0, 178b8 <update_cache+0x3c>
		if (thread != _current) {
   1788c:	68a3      	ldr	r3, [r4, #8]
   1788e:	42ab      	cmp	r3, r5
   17890:	d001      	beq.n	17896 <update_cache+0x1a>
			z_reset_time_slice();
   17892:	f7ff fe9b 	bl	175cc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   17896:	62a5      	str	r5, [r4, #40]	; 0x28
}
   17898:	e023      	b.n	178e2 <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1789a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1789e:	f005 fc23 	bl	1d0e8 <z_priq_dumb_best>
   178a2:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   178a4:	7b4b      	ldrb	r3, [r1, #13]
   178a6:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   178a8:	bf44      	itt	mi
   178aa:	f043 0308 	orrmi.w	r3, r3, #8
   178ae:	734b      	strbmi	r3, [r1, #13]
	return thread ? thread : _current_cpu->idle_thread;
   178b0:	b905      	cbnz	r5, 178b4 <update_cache+0x38>
   178b2:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   178b4:	b152      	cbz	r2, 178cc <update_cache+0x50>
   178b6:	e7e9      	b.n	1788c <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   178b8:	b941      	cbnz	r1, 178cc <update_cache+0x50>
   178ba:	490b      	ldr	r1, [pc, #44]	; (178e8 <update_cache+0x6c>)
   178bc:	480b      	ldr	r0, [pc, #44]	; (178ec <update_cache+0x70>)
   178be:	2283      	movs	r2, #131	; 0x83
   178c0:	f002 f853 	bl	1996a <printk>
   178c4:	2183      	movs	r1, #131	; 0x83
   178c6:	4808      	ldr	r0, [pc, #32]	; (178e8 <update_cache+0x6c>)
   178c8:	f002 faf5 	bl	19eb6 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   178cc:	68a3      	ldr	r3, [r4, #8]
   178ce:	7b5a      	ldrb	r2, [r3, #13]
   178d0:	06d2      	lsls	r2, r2, #27
   178d2:	d1db      	bne.n	1788c <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   178d4:	69aa      	ldr	r2, [r5, #24]
   178d6:	2a00      	cmp	r2, #0
   178d8:	d1d8      	bne.n	1788c <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   178da:	89da      	ldrh	r2, [r3, #14]
   178dc:	2a7f      	cmp	r2, #127	; 0x7f
   178de:	d9d5      	bls.n	1788c <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   178e0:	62a3      	str	r3, [r4, #40]	; 0x28
}
   178e2:	bd38      	pop	{r3, r4, r5, pc}
   178e4:	2000adec 	.word	0x2000adec
   178e8:	0002165f 	.word	0x0002165f
   178ec:	0001ea60 	.word	0x0001ea60

000178f0 <k_sched_unlock>:
{
   178f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   178f2:	f04f 0320 	mov.w	r3, #32
   178f6:	f3ef 8511 	mrs	r5, BASEPRI
   178fa:	f383 8811 	msr	BASEPRI, r3
   178fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17902:	4824      	ldr	r0, [pc, #144]	; (17994 <k_sched_unlock+0xa4>)
   17904:	f001 f848 	bl	18998 <z_spin_lock_valid>
   17908:	b940      	cbnz	r0, 1791c <k_sched_unlock+0x2c>
   1790a:	4923      	ldr	r1, [pc, #140]	; (17998 <k_sched_unlock+0xa8>)
   1790c:	4823      	ldr	r0, [pc, #140]	; (1799c <k_sched_unlock+0xac>)
   1790e:	227c      	movs	r2, #124	; 0x7c
   17910:	f002 f82b 	bl	1996a <printk>
   17914:	217c      	movs	r1, #124	; 0x7c
   17916:	4820      	ldr	r0, [pc, #128]	; (17998 <k_sched_unlock+0xa8>)
   17918:	f002 facd 	bl	19eb6 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   1791c:	4c20      	ldr	r4, [pc, #128]	; (179a0 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   1791e:	481d      	ldr	r0, [pc, #116]	; (17994 <k_sched_unlock+0xa4>)
   17920:	f001 f856 	bl	189d0 <z_spin_lock_set_owner>
   17924:	68a3      	ldr	r3, [r4, #8]
   17926:	7bdb      	ldrb	r3, [r3, #15]
   17928:	b953      	cbnz	r3, 17940 <k_sched_unlock+0x50>
   1792a:	491e      	ldr	r1, [pc, #120]	; (179a4 <k_sched_unlock+0xb4>)
   1792c:	481b      	ldr	r0, [pc, #108]	; (1799c <k_sched_unlock+0xac>)
   1792e:	f44f 725d 	mov.w	r2, #884	; 0x374
   17932:	f002 f81a 	bl	1996a <printk>
   17936:	f44f 715d 	mov.w	r1, #884	; 0x374
   1793a:	481a      	ldr	r0, [pc, #104]	; (179a4 <k_sched_unlock+0xb4>)
   1793c:	f002 fabb 	bl	19eb6 <assert_post_action>
   17940:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   17944:	b153      	cbz	r3, 1795c <k_sched_unlock+0x6c>
   17946:	4917      	ldr	r1, [pc, #92]	; (179a4 <k_sched_unlock+0xb4>)
   17948:	4814      	ldr	r0, [pc, #80]	; (1799c <k_sched_unlock+0xac>)
   1794a:	f240 3275 	movw	r2, #885	; 0x375
   1794e:	f002 f80c 	bl	1996a <printk>
   17952:	f240 3175 	movw	r1, #885	; 0x375
   17956:	4813      	ldr	r0, [pc, #76]	; (179a4 <k_sched_unlock+0xb4>)
   17958:	f002 faad 	bl	19eb6 <assert_post_action>
		++_current->base.sched_locked;
   1795c:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   1795e:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   17960:	7bd3      	ldrb	r3, [r2, #15]
   17962:	3301      	adds	r3, #1
   17964:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   17966:	f7ff ff89 	bl	1787c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1796a:	480a      	ldr	r0, [pc, #40]	; (17994 <k_sched_unlock+0xa4>)
   1796c:	f001 f822 	bl	189b4 <z_spin_unlock_valid>
   17970:	b940      	cbnz	r0, 17984 <k_sched_unlock+0x94>
   17972:	4909      	ldr	r1, [pc, #36]	; (17998 <k_sched_unlock+0xa8>)
   17974:	4809      	ldr	r0, [pc, #36]	; (1799c <k_sched_unlock+0xac>)
   17976:	22a7      	movs	r2, #167	; 0xa7
   17978:	f001 fff7 	bl	1996a <printk>
   1797c:	21a7      	movs	r1, #167	; 0xa7
   1797e:	4806      	ldr	r0, [pc, #24]	; (17998 <k_sched_unlock+0xa8>)
   17980:	f002 fa99 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   17984:	f385 8811 	msr	BASEPRI, r5
   17988:	f3bf 8f6f 	isb	sy
}
   1798c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   17990:	f005 bb92 	b.w	1d0b8 <z_reschedule_unlocked>
   17994:	2000ae24 	.word	0x2000ae24
   17998:	0001ea9a 	.word	0x0001ea9a
   1799c:	0001ea60 	.word	0x0001ea60
   179a0:	2000adec 	.word	0x2000adec
   179a4:	0002165f 	.word	0x0002165f

000179a8 <ready_thread>:
{
   179a8:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   179aa:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   179ae:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   179b0:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   179b2:	7b43      	ldrb	r3, [r0, #13]
   179b4:	db39      	blt.n	17a2a <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   179b6:	06db      	lsls	r3, r3, #27
   179b8:	d137      	bne.n	17a2a <ready_thread+0x82>
   179ba:	6983      	ldr	r3, [r0, #24]
   179bc:	2b00      	cmp	r3, #0
   179be:	d134      	bne.n	17a2a <ready_thread+0x82>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   179c0:	4b1a      	ldr	r3, [pc, #104]	; (17a2c <ready_thread+0x84>)
   179c2:	4298      	cmp	r0, r3
   179c4:	d10a      	bne.n	179dc <ready_thread+0x34>
   179c6:	491a      	ldr	r1, [pc, #104]	; (17a30 <ready_thread+0x88>)
   179c8:	481a      	ldr	r0, [pc, #104]	; (17a34 <ready_thread+0x8c>)
   179ca:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   179ce:	f001 ffcc 	bl	1996a <printk>
   179d2:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   179d6:	4816      	ldr	r0, [pc, #88]	; (17a30 <ready_thread+0x88>)
   179d8:	f002 fa6d 	bl	19eb6 <assert_post_action>
	return list->head == list;
   179dc:	4a16      	ldr	r2, [pc, #88]	; (17a38 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   179de:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   179e2:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   179e6:	4283      	cmp	r3, r0
   179e8:	d019      	beq.n	17a1e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   179ea:	b1c3      	cbz	r3, 17a1e <ready_thread+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   179ec:	f994 500e 	ldrsb.w	r5, [r4, #14]
   179f0:	f993 600e 	ldrsb.w	r6, [r3, #14]
   179f4:	42ae      	cmp	r6, r5
   179f6:	dd0d      	ble.n	17a14 <ready_thread+0x6c>
	node->prev = successor->prev;
   179f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   179fa:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   179fe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   17a00:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   17a02:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   17a04:	2000      	movs	r0, #0
   17a06:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17a0a:	7363      	strb	r3, [r4, #13]
}
   17a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   17a10:	f7ff bf34 	b.w	1787c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   17a14:	428b      	cmp	r3, r1
   17a16:	d002      	beq.n	17a1e <ready_thread+0x76>
   17a18:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17a1a:	2b00      	cmp	r3, #0
   17a1c:	d1e8      	bne.n	179f0 <ready_thread+0x48>
	node->prev = list->tail;
   17a1e:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   17a22:	6b13      	ldr	r3, [r2, #48]	; 0x30
   17a24:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17a26:	6314      	str	r4, [r2, #48]	; 0x30
}
   17a28:	e7eb      	b.n	17a02 <ready_thread+0x5a>
}
   17a2a:	bd70      	pop	{r4, r5, r6, pc}
   17a2c:	2000a290 	.word	0x2000a290
   17a30:	0002165f 	.word	0x0002165f
   17a34:	0001ea60 	.word	0x0001ea60
   17a38:	2000adec 	.word	0x2000adec

00017a3c <z_ready_thread>:
{
   17a3c:	b538      	push	{r3, r4, r5, lr}
   17a3e:	4604      	mov	r4, r0
	__asm__ volatile(
   17a40:	f04f 0320 	mov.w	r3, #32
   17a44:	f3ef 8511 	mrs	r5, BASEPRI
   17a48:	f383 8811 	msr	BASEPRI, r3
   17a4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17a50:	4812      	ldr	r0, [pc, #72]	; (17a9c <z_ready_thread+0x60>)
   17a52:	f000 ffa1 	bl	18998 <z_spin_lock_valid>
   17a56:	b940      	cbnz	r0, 17a6a <z_ready_thread+0x2e>
   17a58:	4911      	ldr	r1, [pc, #68]	; (17aa0 <z_ready_thread+0x64>)
   17a5a:	4812      	ldr	r0, [pc, #72]	; (17aa4 <z_ready_thread+0x68>)
   17a5c:	227c      	movs	r2, #124	; 0x7c
   17a5e:	f001 ff84 	bl	1996a <printk>
   17a62:	217c      	movs	r1, #124	; 0x7c
   17a64:	480e      	ldr	r0, [pc, #56]	; (17aa0 <z_ready_thread+0x64>)
   17a66:	f002 fa26 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   17a6a:	480c      	ldr	r0, [pc, #48]	; (17a9c <z_ready_thread+0x60>)
   17a6c:	f000 ffb0 	bl	189d0 <z_spin_lock_set_owner>
		ready_thread(thread);
   17a70:	4620      	mov	r0, r4
   17a72:	f7ff ff99 	bl	179a8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17a76:	4809      	ldr	r0, [pc, #36]	; (17a9c <z_ready_thread+0x60>)
   17a78:	f000 ff9c 	bl	189b4 <z_spin_unlock_valid>
   17a7c:	b940      	cbnz	r0, 17a90 <z_ready_thread+0x54>
   17a7e:	4908      	ldr	r1, [pc, #32]	; (17aa0 <z_ready_thread+0x64>)
   17a80:	4808      	ldr	r0, [pc, #32]	; (17aa4 <z_ready_thread+0x68>)
   17a82:	22a7      	movs	r2, #167	; 0xa7
   17a84:	f001 ff71 	bl	1996a <printk>
   17a88:	21a7      	movs	r1, #167	; 0xa7
   17a8a:	4805      	ldr	r0, [pc, #20]	; (17aa0 <z_ready_thread+0x64>)
   17a8c:	f002 fa13 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   17a90:	f385 8811 	msr	BASEPRI, r5
   17a94:	f3bf 8f6f 	isb	sy
}
   17a98:	bd38      	pop	{r3, r4, r5, pc}
   17a9a:	bf00      	nop
   17a9c:	2000ae24 	.word	0x2000ae24
   17aa0:	0001ea9a 	.word	0x0001ea9a
   17aa4:	0001ea60 	.word	0x0001ea60

00017aa8 <z_sched_start>:
{
   17aa8:	b538      	push	{r3, r4, r5, lr}
   17aaa:	4604      	mov	r4, r0
	__asm__ volatile(
   17aac:	f04f 0320 	mov.w	r3, #32
   17ab0:	f3ef 8511 	mrs	r5, BASEPRI
   17ab4:	f383 8811 	msr	BASEPRI, r3
   17ab8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17abc:	4818      	ldr	r0, [pc, #96]	; (17b20 <z_sched_start+0x78>)
   17abe:	f000 ff6b 	bl	18998 <z_spin_lock_valid>
   17ac2:	b940      	cbnz	r0, 17ad6 <z_sched_start+0x2e>
   17ac4:	4917      	ldr	r1, [pc, #92]	; (17b24 <z_sched_start+0x7c>)
   17ac6:	4818      	ldr	r0, [pc, #96]	; (17b28 <z_sched_start+0x80>)
   17ac8:	227c      	movs	r2, #124	; 0x7c
   17aca:	f001 ff4e 	bl	1996a <printk>
   17ace:	217c      	movs	r1, #124	; 0x7c
   17ad0:	4814      	ldr	r0, [pc, #80]	; (17b24 <z_sched_start+0x7c>)
   17ad2:	f002 f9f0 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   17ad6:	4812      	ldr	r0, [pc, #72]	; (17b20 <z_sched_start+0x78>)
   17ad8:	f000 ff7a 	bl	189d0 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   17adc:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   17ade:	075a      	lsls	r2, r3, #29
   17ae0:	d411      	bmi.n	17b06 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17ae2:	480f      	ldr	r0, [pc, #60]	; (17b20 <z_sched_start+0x78>)
   17ae4:	f000 ff66 	bl	189b4 <z_spin_unlock_valid>
   17ae8:	b940      	cbnz	r0, 17afc <z_sched_start+0x54>
   17aea:	490e      	ldr	r1, [pc, #56]	; (17b24 <z_sched_start+0x7c>)
   17aec:	480e      	ldr	r0, [pc, #56]	; (17b28 <z_sched_start+0x80>)
   17aee:	22a7      	movs	r2, #167	; 0xa7
   17af0:	f001 ff3b 	bl	1996a <printk>
   17af4:	21a7      	movs	r1, #167	; 0xa7
   17af6:	480b      	ldr	r0, [pc, #44]	; (17b24 <z_sched_start+0x7c>)
   17af8:	f002 f9dd 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   17afc:	f385 8811 	msr	BASEPRI, r5
   17b00:	f3bf 8f6f 	isb	sy
}
   17b04:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17b06:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   17b0a:	4620      	mov	r0, r4
   17b0c:	7363      	strb	r3, [r4, #13]
   17b0e:	f7ff ff4b 	bl	179a8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   17b12:	4629      	mov	r1, r5
}
   17b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   17b18:	4801      	ldr	r0, [pc, #4]	; (17b20 <z_sched_start+0x78>)
   17b1a:	f7ff bdbb 	b.w	17694 <z_reschedule>
   17b1e:	bf00      	nop
   17b20:	2000ae24 	.word	0x2000ae24
   17b24:	0001ea9a 	.word	0x0001ea9a
   17b28:	0001ea60 	.word	0x0001ea60

00017b2c <z_thread_timeout>:
{
   17b2c:	b570      	push	{r4, r5, r6, lr}
   17b2e:	4604      	mov	r4, r0
	__asm__ volatile(
   17b30:	f04f 0320 	mov.w	r3, #32
   17b34:	f3ef 8611 	mrs	r6, BASEPRI
   17b38:	f383 8811 	msr	BASEPRI, r3
   17b3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17b40:	4819      	ldr	r0, [pc, #100]	; (17ba8 <z_thread_timeout+0x7c>)
   17b42:	f000 ff29 	bl	18998 <z_spin_lock_valid>
   17b46:	b940      	cbnz	r0, 17b5a <z_thread_timeout+0x2e>
   17b48:	4918      	ldr	r1, [pc, #96]	; (17bac <z_thread_timeout+0x80>)
   17b4a:	4819      	ldr	r0, [pc, #100]	; (17bb0 <z_thread_timeout+0x84>)
   17b4c:	227c      	movs	r2, #124	; 0x7c
   17b4e:	f001 ff0c 	bl	1996a <printk>
   17b52:	217c      	movs	r1, #124	; 0x7c
   17b54:	4815      	ldr	r0, [pc, #84]	; (17bac <z_thread_timeout+0x80>)
   17b56:	f002 f9ae 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   17b5a:	4813      	ldr	r0, [pc, #76]	; (17ba8 <z_thread_timeout+0x7c>)
   17b5c:	f000 ff38 	bl	189d0 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   17b60:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   17b64:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   17b68:	b113      	cbz	r3, 17b70 <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   17b6a:	4628      	mov	r0, r5
   17b6c:	f005 faae 	bl	1d0cc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   17b70:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   17b74:	4628      	mov	r0, r5
   17b76:	f023 0314 	bic.w	r3, r3, #20
   17b7a:	f804 3c0b 	strb.w	r3, [r4, #-11]
   17b7e:	f7ff ff13 	bl	179a8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17b82:	4809      	ldr	r0, [pc, #36]	; (17ba8 <z_thread_timeout+0x7c>)
   17b84:	f000 ff16 	bl	189b4 <z_spin_unlock_valid>
   17b88:	b940      	cbnz	r0, 17b9c <z_thread_timeout+0x70>
   17b8a:	4908      	ldr	r1, [pc, #32]	; (17bac <z_thread_timeout+0x80>)
   17b8c:	4808      	ldr	r0, [pc, #32]	; (17bb0 <z_thread_timeout+0x84>)
   17b8e:	22a7      	movs	r2, #167	; 0xa7
   17b90:	f001 feeb 	bl	1996a <printk>
   17b94:	21a7      	movs	r1, #167	; 0xa7
   17b96:	4805      	ldr	r0, [pc, #20]	; (17bac <z_thread_timeout+0x80>)
   17b98:	f002 f98d 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   17b9c:	f386 8811 	msr	BASEPRI, r6
   17ba0:	f3bf 8f6f 	isb	sy
}
   17ba4:	bd70      	pop	{r4, r5, r6, pc}
   17ba6:	bf00      	nop
   17ba8:	2000ae24 	.word	0x2000ae24
   17bac:	0001ea9a 	.word	0x0001ea9a
   17bb0:	0001ea60 	.word	0x0001ea60

00017bb4 <move_thread_to_end_of_prio_q>:
{
   17bb4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   17bb6:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   17bba:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   17bbc:	2b00      	cmp	r3, #0
   17bbe:	da03      	bge.n	17bc8 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   17bc0:	4601      	mov	r1, r0
   17bc2:	481d      	ldr	r0, [pc, #116]	; (17c38 <move_thread_to_end_of_prio_q+0x84>)
   17bc4:	f7ff fdf4 	bl	177b0 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17bc8:	4b1c      	ldr	r3, [pc, #112]	; (17c3c <move_thread_to_end_of_prio_q+0x88>)
   17bca:	429c      	cmp	r4, r3
   17bcc:	d10a      	bne.n	17be4 <move_thread_to_end_of_prio_q+0x30>
   17bce:	491c      	ldr	r1, [pc, #112]	; (17c40 <move_thread_to_end_of_prio_q+0x8c>)
   17bd0:	481c      	ldr	r0, [pc, #112]	; (17c44 <move_thread_to_end_of_prio_q+0x90>)
   17bd2:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   17bd6:	f001 fec8 	bl	1996a <printk>
   17bda:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   17bde:	4818      	ldr	r0, [pc, #96]	; (17c40 <move_thread_to_end_of_prio_q+0x8c>)
   17be0:	f002 f969 	bl	19eb6 <assert_post_action>
	return list->head == list;
   17be4:	4a18      	ldr	r2, [pc, #96]	; (17c48 <move_thread_to_end_of_prio_q+0x94>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17be6:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   17bea:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17bee:	4283      	cmp	r3, r0
   17bf0:	d01c      	beq.n	17c2c <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17bf2:	b1db      	cbz	r3, 17c2c <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   17bf4:	f994 500e 	ldrsb.w	r5, [r4, #14]
   17bf8:	f993 600e 	ldrsb.w	r6, [r3, #14]
   17bfc:	42ae      	cmp	r6, r5
   17bfe:	dd10      	ble.n	17c22 <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   17c00:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   17c02:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   17c06:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   17c08:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   17c0a:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   17c0c:	6890      	ldr	r0, [r2, #8]
   17c0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17c12:	7363      	strb	r3, [r4, #13]
   17c14:	1b03      	subs	r3, r0, r4
   17c16:	4258      	negs	r0, r3
   17c18:	4158      	adcs	r0, r3
}
   17c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   17c1e:	f7ff be2d 	b.w	1787c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   17c22:	428b      	cmp	r3, r1
   17c24:	d002      	beq.n	17c2c <move_thread_to_end_of_prio_q+0x78>
   17c26:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17c28:	2b00      	cmp	r3, #0
   17c2a:	d1e5      	bne.n	17bf8 <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   17c2c:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   17c30:	6b13      	ldr	r3, [r2, #48]	; 0x30
   17c32:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17c34:	6314      	str	r4, [r2, #48]	; 0x30
}
   17c36:	e7e8      	b.n	17c0a <move_thread_to_end_of_prio_q+0x56>
   17c38:	2000ae18 	.word	0x2000ae18
   17c3c:	2000a290 	.word	0x2000a290
   17c40:	0002165f 	.word	0x0002165f
   17c44:	0001ea60 	.word	0x0001ea60
   17c48:	2000adec 	.word	0x2000adec

00017c4c <z_time_slice>:
{
   17c4c:	b538      	push	{r3, r4, r5, lr}
   17c4e:	4604      	mov	r4, r0
	__asm__ volatile(
   17c50:	f04f 0320 	mov.w	r3, #32
   17c54:	f3ef 8511 	mrs	r5, BASEPRI
   17c58:	f383 8811 	msr	BASEPRI, r3
   17c5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17c60:	4824      	ldr	r0, [pc, #144]	; (17cf4 <z_time_slice+0xa8>)
   17c62:	f000 fe99 	bl	18998 <z_spin_lock_valid>
   17c66:	b940      	cbnz	r0, 17c7a <z_time_slice+0x2e>
   17c68:	4923      	ldr	r1, [pc, #140]	; (17cf8 <z_time_slice+0xac>)
   17c6a:	4824      	ldr	r0, [pc, #144]	; (17cfc <z_time_slice+0xb0>)
   17c6c:	227c      	movs	r2, #124	; 0x7c
   17c6e:	f001 fe7c 	bl	1996a <printk>
   17c72:	217c      	movs	r1, #124	; 0x7c
   17c74:	4820      	ldr	r0, [pc, #128]	; (17cf8 <z_time_slice+0xac>)
   17c76:	f002 f91e 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   17c7a:	481e      	ldr	r0, [pc, #120]	; (17cf4 <z_time_slice+0xa8>)
   17c7c:	f000 fea8 	bl	189d0 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   17c80:	4b1f      	ldr	r3, [pc, #124]	; (17d00 <z_time_slice+0xb4>)
   17c82:	4a20      	ldr	r2, [pc, #128]	; (17d04 <z_time_slice+0xb8>)
   17c84:	6898      	ldr	r0, [r3, #8]
   17c86:	6811      	ldr	r1, [r2, #0]
   17c88:	4288      	cmp	r0, r1
   17c8a:	d113      	bne.n	17cb4 <z_time_slice+0x68>
			z_reset_time_slice();
   17c8c:	f7ff fc9e 	bl	175cc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17c90:	4818      	ldr	r0, [pc, #96]	; (17cf4 <z_time_slice+0xa8>)
   17c92:	f000 fe8f 	bl	189b4 <z_spin_unlock_valid>
   17c96:	b940      	cbnz	r0, 17caa <z_time_slice+0x5e>
   17c98:	4917      	ldr	r1, [pc, #92]	; (17cf8 <z_time_slice+0xac>)
   17c9a:	4818      	ldr	r0, [pc, #96]	; (17cfc <z_time_slice+0xb0>)
   17c9c:	22a7      	movs	r2, #167	; 0xa7
   17c9e:	f001 fe64 	bl	1996a <printk>
   17ca2:	21a7      	movs	r1, #167	; 0xa7
   17ca4:	4814      	ldr	r0, [pc, #80]	; (17cf8 <z_time_slice+0xac>)
   17ca6:	f002 f906 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   17caa:	f385 8811 	msr	BASEPRI, r5
   17cae:	f3bf 8f6f 	isb	sy
}
   17cb2:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   17cb4:	2100      	movs	r1, #0
   17cb6:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   17cb8:	4a13      	ldr	r2, [pc, #76]	; (17d08 <z_time_slice+0xbc>)
   17cba:	6812      	ldr	r2, [r2, #0]
   17cbc:	b1ba      	cbz	r2, 17cee <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   17cbe:	89c2      	ldrh	r2, [r0, #14]
   17cc0:	2a7f      	cmp	r2, #127	; 0x7f
   17cc2:	d814      	bhi.n	17cee <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   17cc4:	7b42      	ldrb	r2, [r0, #13]
   17cc6:	06d2      	lsls	r2, r2, #27
   17cc8:	d111      	bne.n	17cee <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   17cca:	4a10      	ldr	r2, [pc, #64]	; (17d0c <z_time_slice+0xc0>)
   17ccc:	f990 100e 	ldrsb.w	r1, [r0, #14]
   17cd0:	6812      	ldr	r2, [r2, #0]
   17cd2:	4291      	cmp	r1, r2
   17cd4:	db0b      	blt.n	17cee <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   17cd6:	4a0e      	ldr	r2, [pc, #56]	; (17d10 <z_time_slice+0xc4>)
   17cd8:	4290      	cmp	r0, r2
   17cda:	d008      	beq.n	17cee <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   17cdc:	695a      	ldr	r2, [r3, #20]
   17cde:	42a2      	cmp	r2, r4
   17ce0:	dc02      	bgt.n	17ce8 <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   17ce2:	f7ff ff67 	bl	17bb4 <move_thread_to_end_of_prio_q>
   17ce6:	e7d1      	b.n	17c8c <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   17ce8:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   17cea:	615a      	str	r2, [r3, #20]
   17cec:	e7d0      	b.n	17c90 <z_time_slice+0x44>
   17cee:	2200      	movs	r2, #0
   17cf0:	e7fb      	b.n	17cea <z_time_slice+0x9e>
   17cf2:	bf00      	nop
   17cf4:	2000ae24 	.word	0x2000ae24
   17cf8:	0001ea9a 	.word	0x0001ea9a
   17cfc:	0001ea60 	.word	0x0001ea60
   17d00:	2000adec 	.word	0x2000adec
   17d04:	2000ae20 	.word	0x2000ae20
   17d08:	2000ae2c 	.word	0x2000ae2c
   17d0c:	2000ae28 	.word	0x2000ae28
   17d10:	2000a290 	.word	0x2000a290

00017d14 <z_impl_k_thread_suspend>:
{
   17d14:	b570      	push	{r4, r5, r6, lr}
   17d16:	4604      	mov	r4, r0
   17d18:	3018      	adds	r0, #24
   17d1a:	f001 f881 	bl	18e20 <z_abort_timeout>
	__asm__ volatile(
   17d1e:	f04f 0320 	mov.w	r3, #32
   17d22:	f3ef 8611 	mrs	r6, BASEPRI
   17d26:	f383 8811 	msr	BASEPRI, r3
   17d2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17d2e:	4820      	ldr	r0, [pc, #128]	; (17db0 <z_impl_k_thread_suspend+0x9c>)
   17d30:	f000 fe32 	bl	18998 <z_spin_lock_valid>
   17d34:	b940      	cbnz	r0, 17d48 <z_impl_k_thread_suspend+0x34>
   17d36:	491f      	ldr	r1, [pc, #124]	; (17db4 <z_impl_k_thread_suspend+0xa0>)
   17d38:	481f      	ldr	r0, [pc, #124]	; (17db8 <z_impl_k_thread_suspend+0xa4>)
   17d3a:	227c      	movs	r2, #124	; 0x7c
   17d3c:	f001 fe15 	bl	1996a <printk>
   17d40:	217c      	movs	r1, #124	; 0x7c
   17d42:	481c      	ldr	r0, [pc, #112]	; (17db4 <z_impl_k_thread_suspend+0xa0>)
   17d44:	f002 f8b7 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   17d48:	4819      	ldr	r0, [pc, #100]	; (17db0 <z_impl_k_thread_suspend+0x9c>)
   17d4a:	f000 fe41 	bl	189d0 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   17d4e:	f994 300d 	ldrsb.w	r3, [r4, #13]
   17d52:	2b00      	cmp	r3, #0
   17d54:	da07      	bge.n	17d66 <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   17d56:	4621      	mov	r1, r4
   17d58:	4818      	ldr	r0, [pc, #96]	; (17dbc <z_impl_k_thread_suspend+0xa8>)
   17d5a:	f7ff fd29 	bl	177b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   17d5e:	7b63      	ldrb	r3, [r4, #13]
   17d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17d64:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   17d66:	4d16      	ldr	r5, [pc, #88]	; (17dc0 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   17d68:	7b63      	ldrb	r3, [r4, #13]
   17d6a:	68a8      	ldr	r0, [r5, #8]
   17d6c:	f043 0310 	orr.w	r3, r3, #16
   17d70:	7363      	strb	r3, [r4, #13]
   17d72:	1b03      	subs	r3, r0, r4
   17d74:	4258      	negs	r0, r3
   17d76:	4158      	adcs	r0, r3
   17d78:	f7ff fd80 	bl	1787c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17d7c:	480c      	ldr	r0, [pc, #48]	; (17db0 <z_impl_k_thread_suspend+0x9c>)
   17d7e:	f000 fe19 	bl	189b4 <z_spin_unlock_valid>
   17d82:	b940      	cbnz	r0, 17d96 <z_impl_k_thread_suspend+0x82>
   17d84:	490b      	ldr	r1, [pc, #44]	; (17db4 <z_impl_k_thread_suspend+0xa0>)
   17d86:	480c      	ldr	r0, [pc, #48]	; (17db8 <z_impl_k_thread_suspend+0xa4>)
   17d88:	22a7      	movs	r2, #167	; 0xa7
   17d8a:	f001 fdee 	bl	1996a <printk>
   17d8e:	21a7      	movs	r1, #167	; 0xa7
   17d90:	4808      	ldr	r0, [pc, #32]	; (17db4 <z_impl_k_thread_suspend+0xa0>)
   17d92:	f002 f890 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   17d96:	f386 8811 	msr	BASEPRI, r6
   17d9a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   17d9e:	68ab      	ldr	r3, [r5, #8]
   17da0:	42a3      	cmp	r3, r4
   17da2:	d103      	bne.n	17dac <z_impl_k_thread_suspend+0x98>
}
   17da4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   17da8:	f005 b986 	b.w	1d0b8 <z_reschedule_unlocked>
}
   17dac:	bd70      	pop	{r4, r5, r6, pc}
   17dae:	bf00      	nop
   17db0:	2000ae24 	.word	0x2000ae24
   17db4:	0001ea9a 	.word	0x0001ea9a
   17db8:	0001ea60 	.word	0x0001ea60
   17dbc:	2000ae18 	.word	0x2000ae18
   17dc0:	2000adec 	.word	0x2000adec

00017dc4 <z_thread_single_abort>:
{
   17dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   17dc8:	7b03      	ldrb	r3, [r0, #12]
{
   17dca:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   17dcc:	07dd      	lsls	r5, r3, #31
   17dce:	d50a      	bpl.n	17de6 <z_thread_single_abort+0x22>
   17dd0:	4976      	ldr	r1, [pc, #472]	; (17fac <z_thread_single_abort+0x1e8>)
   17dd2:	4877      	ldr	r0, [pc, #476]	; (17fb0 <z_thread_single_abort+0x1ec>)
   17dd4:	f240 220d 	movw	r2, #525	; 0x20d
   17dd8:	f001 fdc7 	bl	1996a <printk>
   17ddc:	f240 210d 	movw	r1, #525	; 0x20d
   17de0:	4872      	ldr	r0, [pc, #456]	; (17fac <z_thread_single_abort+0x1e8>)
   17de2:	f002 f868 	bl	19eb6 <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   17de6:	4e73      	ldr	r6, [pc, #460]	; (17fb4 <z_thread_single_abort+0x1f0>)
   17de8:	68b3      	ldr	r3, [r6, #8]
   17dea:	42a3      	cmp	r3, r4
   17dec:	d10d      	bne.n	17e0a <z_thread_single_abort+0x46>
   17dee:	f3ef 8305 	mrs	r3, IPSR
   17df2:	b953      	cbnz	r3, 17e0a <z_thread_single_abort+0x46>
   17df4:	496d      	ldr	r1, [pc, #436]	; (17fac <z_thread_single_abort+0x1e8>)
   17df6:	486e      	ldr	r0, [pc, #440]	; (17fb0 <z_thread_single_abort+0x1ec>)
   17df8:	f240 220f 	movw	r2, #527	; 0x20f
   17dfc:	f001 fdb5 	bl	1996a <printk>
   17e00:	f240 210f 	movw	r1, #527	; 0x20f
   17e04:	4869      	ldr	r0, [pc, #420]	; (17fac <z_thread_single_abort+0x1e8>)
   17e06:	f002 f856 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   17e0a:	f04f 0320 	mov.w	r3, #32
   17e0e:	f3ef 8511 	mrs	r5, BASEPRI
   17e12:	f383 8811 	msr	BASEPRI, r3
   17e16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17e1a:	4867      	ldr	r0, [pc, #412]	; (17fb8 <z_thread_single_abort+0x1f4>)
   17e1c:	f000 fdbc 	bl	18998 <z_spin_lock_valid>
   17e20:	b940      	cbnz	r0, 17e34 <z_thread_single_abort+0x70>
   17e22:	4966      	ldr	r1, [pc, #408]	; (17fbc <z_thread_single_abort+0x1f8>)
   17e24:	4862      	ldr	r0, [pc, #392]	; (17fb0 <z_thread_single_abort+0x1ec>)
   17e26:	227c      	movs	r2, #124	; 0x7c
   17e28:	f001 fd9f 	bl	1996a <printk>
   17e2c:	217c      	movs	r1, #124	; 0x7c
   17e2e:	4863      	ldr	r0, [pc, #396]	; (17fbc <z_thread_single_abort+0x1f8>)
   17e30:	f002 f841 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   17e34:	4860      	ldr	r0, [pc, #384]	; (17fb8 <z_thread_single_abort+0x1f4>)
   17e36:	f000 fdcb 	bl	189d0 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   17e3a:	7b63      	ldrb	r3, [r4, #13]
   17e3c:	f013 0f28 	tst.w	r3, #40	; 0x28
   17e40:	d012      	beq.n	17e68 <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17e42:	485d      	ldr	r0, [pc, #372]	; (17fb8 <z_thread_single_abort+0x1f4>)
   17e44:	f000 fdb6 	bl	189b4 <z_spin_unlock_valid>
   17e48:	b940      	cbnz	r0, 17e5c <z_thread_single_abort+0x98>
   17e4a:	495c      	ldr	r1, [pc, #368]	; (17fbc <z_thread_single_abort+0x1f8>)
   17e4c:	4858      	ldr	r0, [pc, #352]	; (17fb0 <z_thread_single_abort+0x1ec>)
   17e4e:	22a7      	movs	r2, #167	; 0xa7
   17e50:	f001 fd8b 	bl	1996a <printk>
   17e54:	21a7      	movs	r1, #167	; 0xa7
   17e56:	4859      	ldr	r0, [pc, #356]	; (17fbc <z_thread_single_abort+0x1f8>)
   17e58:	f002 f82d 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   17e5c:	f385 8811 	msr	BASEPRI, r5
   17e60:	f3bf 8f6f 	isb	sy
}
   17e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   17e68:	f043 0320 	orr.w	r3, r3, #32
   17e6c:	4852      	ldr	r0, [pc, #328]	; (17fb8 <z_thread_single_abort+0x1f4>)
   17e6e:	7363      	strb	r3, [r4, #13]
   17e70:	f000 fda0 	bl	189b4 <z_spin_unlock_valid>
   17e74:	b940      	cbnz	r0, 17e88 <z_thread_single_abort+0xc4>
   17e76:	4951      	ldr	r1, [pc, #324]	; (17fbc <z_thread_single_abort+0x1f8>)
   17e78:	484d      	ldr	r0, [pc, #308]	; (17fb0 <z_thread_single_abort+0x1ec>)
   17e7a:	22a7      	movs	r2, #167	; 0xa7
   17e7c:	f001 fd75 	bl	1996a <printk>
   17e80:	21a7      	movs	r1, #167	; 0xa7
   17e82:	484e      	ldr	r0, [pc, #312]	; (17fbc <z_thread_single_abort+0x1f8>)
   17e84:	f002 f817 	bl	19eb6 <assert_post_action>
   17e88:	f385 8811 	msr	BASEPRI, r5
   17e8c:	f3bf 8f6f 	isb	sy
   17e90:	f104 0018 	add.w	r0, r4, #24
   17e94:	f000 ffc4 	bl	18e20 <z_abort_timeout>
	__asm__ volatile(
   17e98:	f04f 0320 	mov.w	r3, #32
   17e9c:	f3ef 8711 	mrs	r7, BASEPRI
   17ea0:	f383 8811 	msr	BASEPRI, r3
   17ea4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17ea8:	4843      	ldr	r0, [pc, #268]	; (17fb8 <z_thread_single_abort+0x1f4>)
   17eaa:	f000 fd75 	bl	18998 <z_spin_lock_valid>
   17eae:	b940      	cbnz	r0, 17ec2 <z_thread_single_abort+0xfe>
   17eb0:	4942      	ldr	r1, [pc, #264]	; (17fbc <z_thread_single_abort+0x1f8>)
   17eb2:	483f      	ldr	r0, [pc, #252]	; (17fb0 <z_thread_single_abort+0x1ec>)
   17eb4:	227c      	movs	r2, #124	; 0x7c
   17eb6:	f001 fd58 	bl	1996a <printk>
   17eba:	217c      	movs	r1, #124	; 0x7c
   17ebc:	483f      	ldr	r0, [pc, #252]	; (17fbc <z_thread_single_abort+0x1f8>)
   17ebe:	f001 fffa 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   17ec2:	483d      	ldr	r0, [pc, #244]	; (17fb8 <z_thread_single_abort+0x1f4>)
   17ec4:	f000 fd84 	bl	189d0 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   17ec8:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17eca:	06d8      	lsls	r0, r3, #27
   17ecc:	d116      	bne.n	17efc <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   17ece:	69a2      	ldr	r2, [r4, #24]
   17ed0:	b9a2      	cbnz	r2, 17efc <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   17ed2:	0619      	lsls	r1, r3, #24
   17ed4:	d507      	bpl.n	17ee6 <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   17ed6:	4621      	mov	r1, r4
   17ed8:	4839      	ldr	r0, [pc, #228]	; (17fc0 <z_thread_single_abort+0x1fc>)
   17eda:	f7ff fc69 	bl	177b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   17ede:	7b63      	ldrb	r3, [r4, #13]
   17ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17ee4:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   17ee6:	68b0      	ldr	r0, [r6, #8]
   17ee8:	1b02      	subs	r2, r0, r4
   17eea:	4250      	negs	r0, r2
   17eec:	4150      	adcs	r0, r2
   17eee:	f7ff fcc5 	bl	1787c <update_cache>
			waiter->base.pended_on = NULL;
   17ef2:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   17ef6:	f104 0930 	add.w	r9, r4, #48	; 0x30
   17efa:	e023      	b.n	17f44 <z_thread_single_abort+0x180>
			if (z_is_thread_pending(thread)) {
   17efc:	079b      	lsls	r3, r3, #30
   17efe:	d5f8      	bpl.n	17ef2 <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   17f00:	4620      	mov	r0, r4
   17f02:	f7ff fb4d 	bl	175a0 <pended_on>
   17f06:	4621      	mov	r1, r4
   17f08:	f7ff fc52 	bl	177b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   17f0c:	7b63      	ldrb	r3, [r4, #13]
   17f0e:	f023 0302 	bic.w	r3, r3, #2
   17f12:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   17f14:	2300      	movs	r3, #0
   17f16:	60a3      	str	r3, [r4, #8]
   17f18:	e7eb      	b.n	17ef2 <z_thread_single_abort+0x12e>
   17f1a:	f105 0018 	add.w	r0, r5, #24
   17f1e:	f000 ff7f 	bl	18e20 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   17f22:	4628      	mov	r0, r5
   17f24:	f7ff fb3c 	bl	175a0 <pended_on>
   17f28:	4629      	mov	r1, r5
   17f2a:	f7ff fc41 	bl	177b0 <z_priq_dumb_remove>
   17f2e:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   17f30:	4628      	mov	r0, r5
   17f32:	f023 0302 	bic.w	r3, r3, #2
   17f36:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   17f38:	f8c5 8008 	str.w	r8, [r5, #8]
   17f3c:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   17f40:	f7ff fd32 	bl	179a8 <ready_thread>
	return list->head == list;
   17f44:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17f46:	454d      	cmp	r5, r9
   17f48:	d001      	beq.n	17f4e <z_thread_single_abort+0x18a>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   17f4a:	2d00      	cmp	r5, #0
   17f4c:	d1e5      	bne.n	17f1a <z_thread_single_abort+0x156>
		if (z_is_idle_thread_object(_current)) {
   17f4e:	68b2      	ldr	r2, [r6, #8]
   17f50:	4b1c      	ldr	r3, [pc, #112]	; (17fc4 <z_thread_single_abort+0x200>)
   17f52:	429a      	cmp	r2, r3
   17f54:	d102      	bne.n	17f5c <z_thread_single_abort+0x198>
			update_cache(1);
   17f56:	2001      	movs	r0, #1
   17f58:	f7ff fc90 	bl	1787c <update_cache>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17f5c:	2200      	movs	r2, #0
		thread->base.thread_state |= _THREAD_DEAD;
   17f5e:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   17f60:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   17f62:	f043 0308 	orr.w	r3, r3, #8
   17f66:	7363      	strb	r3, [r4, #13]
   17f68:	f104 0338 	add.w	r3, r4, #56	; 0x38
   17f6c:	e8d3 1fef 	ldaex	r1, [r3]
   17f70:	e8c3 2fe0 	stlex	r0, r2, [r3]
   17f74:	2800      	cmp	r0, #0
   17f76:	d1f9      	bne.n	17f6c <z_thread_single_abort+0x1a8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17f78:	480f      	ldr	r0, [pc, #60]	; (17fb8 <z_thread_single_abort+0x1f4>)
   17f7a:	f000 fd1b 	bl	189b4 <z_spin_unlock_valid>
   17f7e:	b940      	cbnz	r0, 17f92 <z_thread_single_abort+0x1ce>
   17f80:	490e      	ldr	r1, [pc, #56]	; (17fbc <z_thread_single_abort+0x1f8>)
   17f82:	480b      	ldr	r0, [pc, #44]	; (17fb0 <z_thread_single_abort+0x1ec>)
   17f84:	22a7      	movs	r2, #167	; 0xa7
   17f86:	f001 fcf0 	bl	1996a <printk>
   17f8a:	21a7      	movs	r1, #167	; 0xa7
   17f8c:	480b      	ldr	r0, [pc, #44]	; (17fbc <z_thread_single_abort+0x1f8>)
   17f8e:	f001 ff92 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   17f92:	f387 8811 	msr	BASEPRI, r7
   17f96:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   17f9a:	2d00      	cmp	r5, #0
   17f9c:	f43f af62 	beq.w	17e64 <z_thread_single_abort+0xa0>
		fn_abort(thread);
   17fa0:	4620      	mov	r0, r4
   17fa2:	462b      	mov	r3, r5
}
   17fa4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   17fa8:	4718      	bx	r3
   17faa:	bf00      	nop
   17fac:	0002165f 	.word	0x0002165f
   17fb0:	0001ea60 	.word	0x0001ea60
   17fb4:	2000adec 	.word	0x2000adec
   17fb8:	2000ae24 	.word	0x2000ae24
   17fbc:	0001ea9a 	.word	0x0001ea9a
   17fc0:	2000ae18 	.word	0x2000ae18
   17fc4:	2000a290 	.word	0x2000a290

00017fc8 <unready_thread>:
{
   17fc8:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   17fca:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   17fce:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   17fd0:	2b00      	cmp	r3, #0
   17fd2:	da07      	bge.n	17fe4 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   17fd4:	4601      	mov	r1, r0
   17fd6:	4808      	ldr	r0, [pc, #32]	; (17ff8 <unready_thread+0x30>)
   17fd8:	f7ff fbea 	bl	177b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   17fdc:	7b63      	ldrb	r3, [r4, #13]
   17fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17fe2:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   17fe4:	4b05      	ldr	r3, [pc, #20]	; (17ffc <unready_thread+0x34>)
   17fe6:	6898      	ldr	r0, [r3, #8]
   17fe8:	1b03      	subs	r3, r0, r4
   17fea:	4258      	negs	r0, r3
   17fec:	4158      	adcs	r0, r3
}
   17fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   17ff2:	f7ff bc43 	b.w	1787c <update_cache>
   17ff6:	bf00      	nop
   17ff8:	2000ae18 	.word	0x2000ae18
   17ffc:	2000adec 	.word	0x2000adec

00018000 <add_to_waitq_locked>:
{
   18000:	b538      	push	{r3, r4, r5, lr}
   18002:	4604      	mov	r4, r0
   18004:	460d      	mov	r5, r1
	unready_thread(thread);
   18006:	f7ff ffdf 	bl	17fc8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1800a:	7b63      	ldrb	r3, [r4, #13]
   1800c:	f043 0302 	orr.w	r3, r3, #2
   18010:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   18012:	b1ed      	cbz	r5, 18050 <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18014:	4b15      	ldr	r3, [pc, #84]	; (1806c <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   18016:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18018:	429c      	cmp	r4, r3
   1801a:	d10a      	bne.n	18032 <add_to_waitq_locked+0x32>
   1801c:	4914      	ldr	r1, [pc, #80]	; (18070 <add_to_waitq_locked+0x70>)
   1801e:	4815      	ldr	r0, [pc, #84]	; (18074 <add_to_waitq_locked+0x74>)
   18020:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18024:	f001 fca1 	bl	1996a <printk>
   18028:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   1802c:	4810      	ldr	r0, [pc, #64]	; (18070 <add_to_waitq_locked+0x70>)
   1802e:	f001 ff42 	bl	19eb6 <assert_post_action>
	return list->head == list;
   18032:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18034:	429d      	cmp	r5, r3
   18036:	d012      	beq.n	1805e <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18038:	b18b      	cbz	r3, 1805e <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   1803a:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1803e:	f993 100e 	ldrsb.w	r1, [r3, #14]
   18042:	4291      	cmp	r1, r2
   18044:	dd05      	ble.n	18052 <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   18046:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18048:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1804c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1804e:	605c      	str	r4, [r3, #4]
}
   18050:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   18052:	6869      	ldr	r1, [r5, #4]
   18054:	428b      	cmp	r3, r1
   18056:	d002      	beq.n	1805e <add_to_waitq_locked+0x5e>
   18058:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1805a:	2b00      	cmp	r3, #0
   1805c:	d1ef      	bne.n	1803e <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   1805e:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   18060:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   18062:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18064:	686b      	ldr	r3, [r5, #4]
   18066:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18068:	606c      	str	r4, [r5, #4]
}
   1806a:	e7f1      	b.n	18050 <add_to_waitq_locked+0x50>
   1806c:	2000a290 	.word	0x2000a290
   18070:	0002165f 	.word	0x0002165f
   18074:	0001ea60 	.word	0x0001ea60

00018078 <pend>:
{
   18078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1807c:	4604      	mov	r4, r0
   1807e:	4688      	mov	r8, r1
   18080:	4616      	mov	r6, r2
   18082:	461d      	mov	r5, r3
	__asm__ volatile(
   18084:	f04f 0320 	mov.w	r3, #32
   18088:	f3ef 8711 	mrs	r7, BASEPRI
   1808c:	f383 8811 	msr	BASEPRI, r3
   18090:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18094:	481a      	ldr	r0, [pc, #104]	; (18100 <pend+0x88>)
   18096:	f000 fc7f 	bl	18998 <z_spin_lock_valid>
   1809a:	b940      	cbnz	r0, 180ae <pend+0x36>
   1809c:	4919      	ldr	r1, [pc, #100]	; (18104 <pend+0x8c>)
   1809e:	481a      	ldr	r0, [pc, #104]	; (18108 <pend+0x90>)
   180a0:	227c      	movs	r2, #124	; 0x7c
   180a2:	f001 fc62 	bl	1996a <printk>
   180a6:	217c      	movs	r1, #124	; 0x7c
   180a8:	4816      	ldr	r0, [pc, #88]	; (18104 <pend+0x8c>)
   180aa:	f001 ff04 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   180ae:	4814      	ldr	r0, [pc, #80]	; (18100 <pend+0x88>)
   180b0:	f000 fc8e 	bl	189d0 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   180b4:	4620      	mov	r0, r4
   180b6:	4641      	mov	r1, r8
   180b8:	f7ff ffa2 	bl	18000 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   180bc:	4810      	ldr	r0, [pc, #64]	; (18100 <pend+0x88>)
   180be:	f000 fc79 	bl	189b4 <z_spin_unlock_valid>
   180c2:	b940      	cbnz	r0, 180d6 <pend+0x5e>
   180c4:	490f      	ldr	r1, [pc, #60]	; (18104 <pend+0x8c>)
   180c6:	4810      	ldr	r0, [pc, #64]	; (18108 <pend+0x90>)
   180c8:	22a7      	movs	r2, #167	; 0xa7
   180ca:	f001 fc4e 	bl	1996a <printk>
   180ce:	21a7      	movs	r1, #167	; 0xa7
   180d0:	480c      	ldr	r0, [pc, #48]	; (18104 <pend+0x8c>)
   180d2:	f001 fef0 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   180d6:	f387 8811 	msr	BASEPRI, r7
   180da:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   180de:	f1b5 3fff 	cmp.w	r5, #4294967295
   180e2:	bf08      	it	eq
   180e4:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   180e8:	d008      	beq.n	180fc <pend+0x84>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   180ea:	4632      	mov	r2, r6
   180ec:	462b      	mov	r3, r5
   180ee:	f104 0018 	add.w	r0, r4, #24
   180f2:	4906      	ldr	r1, [pc, #24]	; (1810c <pend+0x94>)
}
   180f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   180f8:	f000 bde2 	b.w	18cc0 <z_add_timeout>
   180fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18100:	2000ae24 	.word	0x2000ae24
   18104:	0001ea9a 	.word	0x0001ea9a
   18108:	0001ea60 	.word	0x0001ea60
   1810c:	00017b2d 	.word	0x00017b2d

00018110 <z_pend_curr>:
{
   18110:	b538      	push	{r3, r4, r5, lr}
   18112:	4605      	mov	r5, r0
	pending_current = _current;
   18114:	4b0d      	ldr	r3, [pc, #52]	; (1814c <z_pend_curr+0x3c>)
{
   18116:	460c      	mov	r4, r1
	pending_current = _current;
   18118:	6898      	ldr	r0, [r3, #8]
   1811a:	4b0d      	ldr	r3, [pc, #52]	; (18150 <z_pend_curr+0x40>)
{
   1811c:	4611      	mov	r1, r2
	pending_current = _current;
   1811e:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   18120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   18124:	f7ff ffa8 	bl	18078 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18128:	4628      	mov	r0, r5
   1812a:	f000 fc43 	bl	189b4 <z_spin_unlock_valid>
   1812e:	b940      	cbnz	r0, 18142 <z_pend_curr+0x32>
   18130:	4908      	ldr	r1, [pc, #32]	; (18154 <z_pend_curr+0x44>)
   18132:	4809      	ldr	r0, [pc, #36]	; (18158 <z_pend_curr+0x48>)
   18134:	22be      	movs	r2, #190	; 0xbe
   18136:	f001 fc18 	bl	1996a <printk>
   1813a:	21be      	movs	r1, #190	; 0xbe
   1813c:	4805      	ldr	r0, [pc, #20]	; (18154 <z_pend_curr+0x44>)
   1813e:	f001 feba 	bl	19eb6 <assert_post_action>
   18142:	4620      	mov	r0, r4
}
   18144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18148:	f7f4 bd80 	b.w	cc4c <arch_swap>
   1814c:	2000adec 	.word	0x2000adec
   18150:	2000ae20 	.word	0x2000ae20
   18154:	0001ea9a 	.word	0x0001ea9a
   18158:	0001ea60 	.word	0x0001ea60

0001815c <z_set_prio>:
{
   1815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1815e:	4604      	mov	r4, r0
   18160:	460d      	mov	r5, r1
	__asm__ volatile(
   18162:	f04f 0320 	mov.w	r3, #32
   18166:	f3ef 8611 	mrs	r6, BASEPRI
   1816a:	f383 8811 	msr	BASEPRI, r3
   1816e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18172:	4831      	ldr	r0, [pc, #196]	; (18238 <z_set_prio+0xdc>)
   18174:	f000 fc10 	bl	18998 <z_spin_lock_valid>
   18178:	b940      	cbnz	r0, 1818c <z_set_prio+0x30>
   1817a:	4930      	ldr	r1, [pc, #192]	; (1823c <z_set_prio+0xe0>)
   1817c:	4830      	ldr	r0, [pc, #192]	; (18240 <z_set_prio+0xe4>)
   1817e:	227c      	movs	r2, #124	; 0x7c
   18180:	f001 fbf3 	bl	1996a <printk>
   18184:	217c      	movs	r1, #124	; 0x7c
   18186:	482d      	ldr	r0, [pc, #180]	; (1823c <z_set_prio+0xe0>)
   18188:	f001 fe95 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   1818c:	482a      	ldr	r0, [pc, #168]	; (18238 <z_set_prio+0xdc>)
   1818e:	f000 fc1f 	bl	189d0 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18192:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   18194:	b26d      	sxtb	r5, r5
   18196:	06db      	lsls	r3, r3, #27
   18198:	d14a      	bne.n	18230 <z_set_prio+0xd4>
		if (need_sched) {
   1819a:	69a3      	ldr	r3, [r4, #24]
   1819c:	2b00      	cmp	r3, #0
   1819e:	d147      	bne.n	18230 <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   181a0:	4621      	mov	r1, r4
   181a2:	4828      	ldr	r0, [pc, #160]	; (18244 <z_set_prio+0xe8>)
   181a4:	f7ff fb04 	bl	177b0 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   181a8:	4b27      	ldr	r3, [pc, #156]	; (18248 <z_set_prio+0xec>)
				thread->base.prio = prio;
   181aa:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   181ac:	429c      	cmp	r4, r3
   181ae:	d10a      	bne.n	181c6 <z_set_prio+0x6a>
   181b0:	4926      	ldr	r1, [pc, #152]	; (1824c <z_set_prio+0xf0>)
   181b2:	4823      	ldr	r0, [pc, #140]	; (18240 <z_set_prio+0xe4>)
   181b4:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   181b8:	f001 fbd7 	bl	1996a <printk>
   181bc:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   181c0:	4822      	ldr	r0, [pc, #136]	; (1824c <z_set_prio+0xf0>)
   181c2:	f001 fe78 	bl	19eb6 <assert_post_action>
	return list->head == list;
   181c6:	4a22      	ldr	r2, [pc, #136]	; (18250 <z_set_prio+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   181c8:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   181cc:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   181d0:	4283      	cmp	r3, r0
   181d2:	d027      	beq.n	18224 <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   181d4:	b333      	cbz	r3, 18224 <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   181d6:	f994 500e 	ldrsb.w	r5, [r4, #14]
   181da:	f993 700e 	ldrsb.w	r7, [r3, #14]
   181de:	42af      	cmp	r7, r5
   181e0:	dd1b      	ble.n	1821a <z_set_prio+0xbe>
	node->prev = successor->prev;
   181e2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   181e4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   181e8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   181ea:	605c      	str	r4, [r3, #4]
			update_cache(1);
   181ec:	2001      	movs	r0, #1
   181ee:	f7ff fb45 	bl	1787c <update_cache>
   181f2:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   181f4:	4810      	ldr	r0, [pc, #64]	; (18238 <z_set_prio+0xdc>)
   181f6:	f000 fbdd 	bl	189b4 <z_spin_unlock_valid>
   181fa:	b940      	cbnz	r0, 1820e <z_set_prio+0xb2>
   181fc:	490f      	ldr	r1, [pc, #60]	; (1823c <z_set_prio+0xe0>)
   181fe:	4810      	ldr	r0, [pc, #64]	; (18240 <z_set_prio+0xe4>)
   18200:	22a7      	movs	r2, #167	; 0xa7
   18202:	f001 fbb2 	bl	1996a <printk>
   18206:	21a7      	movs	r1, #167	; 0xa7
   18208:	480c      	ldr	r0, [pc, #48]	; (1823c <z_set_prio+0xe0>)
   1820a:	f001 fe54 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   1820e:	f386 8811 	msr	BASEPRI, r6
   18212:	f3bf 8f6f 	isb	sy
}
   18216:	4620      	mov	r0, r4
   18218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1821a:	4299      	cmp	r1, r3
   1821c:	d002      	beq.n	18224 <z_set_prio+0xc8>
   1821e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18220:	2b00      	cmp	r3, #0
   18222:	d1da      	bne.n	181da <z_set_prio+0x7e>
	node->prev = list->tail;
   18224:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   18228:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1822a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1822c:	6314      	str	r4, [r2, #48]	; 0x30
}
   1822e:	e7dd      	b.n	181ec <z_set_prio+0x90>
			thread->base.prio = prio;
   18230:	73a5      	strb	r5, [r4, #14]
   18232:	2400      	movs	r4, #0
   18234:	e7de      	b.n	181f4 <z_set_prio+0x98>
   18236:	bf00      	nop
   18238:	2000ae24 	.word	0x2000ae24
   1823c:	0001ea9a 	.word	0x0001ea9a
   18240:	0001ea60 	.word	0x0001ea60
   18244:	2000ae18 	.word	0x2000ae18
   18248:	2000a290 	.word	0x2000a290
   1824c:	0002165f 	.word	0x0002165f
   18250:	2000adec 	.word	0x2000adec

00018254 <z_unpend_first_thread>:
{
   18254:	b538      	push	{r3, r4, r5, lr}
   18256:	4604      	mov	r4, r0
	__asm__ volatile(
   18258:	f04f 0320 	mov.w	r3, #32
   1825c:	f3ef 8511 	mrs	r5, BASEPRI
   18260:	f383 8811 	msr	BASEPRI, r3
   18264:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18268:	482b      	ldr	r0, [pc, #172]	; (18318 <z_unpend_first_thread+0xc4>)
   1826a:	f000 fb95 	bl	18998 <z_spin_lock_valid>
   1826e:	b940      	cbnz	r0, 18282 <z_unpend_first_thread+0x2e>
   18270:	492a      	ldr	r1, [pc, #168]	; (1831c <z_unpend_first_thread+0xc8>)
   18272:	482b      	ldr	r0, [pc, #172]	; (18320 <z_unpend_first_thread+0xcc>)
   18274:	227c      	movs	r2, #124	; 0x7c
   18276:	f001 fb78 	bl	1996a <printk>
   1827a:	217c      	movs	r1, #124	; 0x7c
   1827c:	4827      	ldr	r0, [pc, #156]	; (1831c <z_unpend_first_thread+0xc8>)
   1827e:	f001 fe1a 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   18282:	4825      	ldr	r0, [pc, #148]	; (18318 <z_unpend_first_thread+0xc4>)
   18284:	f000 fba4 	bl	189d0 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   18288:	4620      	mov	r0, r4
   1828a:	f004 ff2d 	bl	1d0e8 <z_priq_dumb_best>
   1828e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18290:	4821      	ldr	r0, [pc, #132]	; (18318 <z_unpend_first_thread+0xc4>)
   18292:	f000 fb8f 	bl	189b4 <z_spin_unlock_valid>
   18296:	b940      	cbnz	r0, 182aa <z_unpend_first_thread+0x56>
   18298:	4920      	ldr	r1, [pc, #128]	; (1831c <z_unpend_first_thread+0xc8>)
   1829a:	4821      	ldr	r0, [pc, #132]	; (18320 <z_unpend_first_thread+0xcc>)
   1829c:	22a7      	movs	r2, #167	; 0xa7
   1829e:	f001 fb64 	bl	1996a <printk>
   182a2:	21a7      	movs	r1, #167	; 0xa7
   182a4:	481d      	ldr	r0, [pc, #116]	; (1831c <z_unpend_first_thread+0xc8>)
   182a6:	f001 fe06 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   182aa:	f385 8811 	msr	BASEPRI, r5
   182ae:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   182b2:	b37c      	cbz	r4, 18314 <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   182b4:	f04f 0320 	mov.w	r3, #32
   182b8:	f3ef 8511 	mrs	r5, BASEPRI
   182bc:	f383 8811 	msr	BASEPRI, r3
   182c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   182c4:	4814      	ldr	r0, [pc, #80]	; (18318 <z_unpend_first_thread+0xc4>)
   182c6:	f000 fb67 	bl	18998 <z_spin_lock_valid>
   182ca:	b940      	cbnz	r0, 182de <z_unpend_first_thread+0x8a>
   182cc:	4913      	ldr	r1, [pc, #76]	; (1831c <z_unpend_first_thread+0xc8>)
   182ce:	4814      	ldr	r0, [pc, #80]	; (18320 <z_unpend_first_thread+0xcc>)
   182d0:	227c      	movs	r2, #124	; 0x7c
   182d2:	f001 fb4a 	bl	1996a <printk>
   182d6:	217c      	movs	r1, #124	; 0x7c
   182d8:	4810      	ldr	r0, [pc, #64]	; (1831c <z_unpend_first_thread+0xc8>)
   182da:	f001 fdec 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   182de:	480e      	ldr	r0, [pc, #56]	; (18318 <z_unpend_first_thread+0xc4>)
   182e0:	f000 fb76 	bl	189d0 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   182e4:	4620      	mov	r0, r4
   182e6:	f004 fef1 	bl	1d0cc <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   182ea:	480b      	ldr	r0, [pc, #44]	; (18318 <z_unpend_first_thread+0xc4>)
   182ec:	f000 fb62 	bl	189b4 <z_spin_unlock_valid>
   182f0:	b940      	cbnz	r0, 18304 <z_unpend_first_thread+0xb0>
   182f2:	490a      	ldr	r1, [pc, #40]	; (1831c <z_unpend_first_thread+0xc8>)
   182f4:	480a      	ldr	r0, [pc, #40]	; (18320 <z_unpend_first_thread+0xcc>)
   182f6:	22a7      	movs	r2, #167	; 0xa7
   182f8:	f001 fb37 	bl	1996a <printk>
   182fc:	21a7      	movs	r1, #167	; 0xa7
   182fe:	4807      	ldr	r0, [pc, #28]	; (1831c <z_unpend_first_thread+0xc8>)
   18300:	f001 fdd9 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   18304:	f385 8811 	msr	BASEPRI, r5
   18308:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   1830c:	f104 0018 	add.w	r0, r4, #24
   18310:	f000 fd86 	bl	18e20 <z_abort_timeout>
}
   18314:	4620      	mov	r0, r4
   18316:	bd38      	pop	{r3, r4, r5, pc}
   18318:	2000ae24 	.word	0x2000ae24
   1831c:	0001ea9a 	.word	0x0001ea9a
   18320:	0001ea60 	.word	0x0001ea60

00018324 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   18324:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   18326:	4b04      	ldr	r3, [pc, #16]	; (18338 <z_sched_init+0x14>)
   18328:	4608      	mov	r0, r1
   1832a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1832e:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   18332:	f7ff b961 	b.w	175f8 <k_sched_time_slice_set>
   18336:	bf00      	nop
   18338:	2000adec 	.word	0x2000adec

0001833c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1833e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   18342:	b153      	cbz	r3, 1835a <z_impl_k_yield+0x1e>
   18344:	493d      	ldr	r1, [pc, #244]	; (1843c <z_impl_k_yield+0x100>)
   18346:	483e      	ldr	r0, [pc, #248]	; (18440 <z_impl_k_yield+0x104>)
   18348:	f240 42cf 	movw	r2, #1231	; 0x4cf
   1834c:	f001 fb0d 	bl	1996a <printk>
   18350:	f240 41cf 	movw	r1, #1231	; 0x4cf
   18354:	4839      	ldr	r0, [pc, #228]	; (1843c <z_impl_k_yield+0x100>)
   18356:	f001 fdae 	bl	19eb6 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   1835a:	4d3a      	ldr	r5, [pc, #232]	; (18444 <z_impl_k_yield+0x108>)
   1835c:	4f3a      	ldr	r7, [pc, #232]	; (18448 <z_impl_k_yield+0x10c>)
   1835e:	68ab      	ldr	r3, [r5, #8]
   18360:	42bb      	cmp	r3, r7
   18362:	d054      	beq.n	1840e <z_impl_k_yield+0xd2>
	__asm__ volatile(
   18364:	f04f 0320 	mov.w	r3, #32
   18368:	f3ef 8611 	mrs	r6, BASEPRI
   1836c:	f383 8811 	msr	BASEPRI, r3
   18370:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18374:	4835      	ldr	r0, [pc, #212]	; (1844c <z_impl_k_yield+0x110>)
   18376:	f000 fb0f 	bl	18998 <z_spin_lock_valid>
   1837a:	b940      	cbnz	r0, 1838e <z_impl_k_yield+0x52>
   1837c:	4934      	ldr	r1, [pc, #208]	; (18450 <z_impl_k_yield+0x114>)
   1837e:	4830      	ldr	r0, [pc, #192]	; (18440 <z_impl_k_yield+0x104>)
   18380:	227c      	movs	r2, #124	; 0x7c
   18382:	f001 faf2 	bl	1996a <printk>
   18386:	217c      	movs	r1, #124	; 0x7c
   18388:	4831      	ldr	r0, [pc, #196]	; (18450 <z_impl_k_yield+0x114>)
   1838a:	f001 fd94 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   1838e:	482f      	ldr	r0, [pc, #188]	; (1844c <z_impl_k_yield+0x110>)
   18390:	f000 fb1e 	bl	189d0 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   18394:	68a9      	ldr	r1, [r5, #8]
   18396:	482f      	ldr	r0, [pc, #188]	; (18454 <z_impl_k_yield+0x118>)
   18398:	f7ff fa0a 	bl	177b0 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1839c:	68ac      	ldr	r4, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1839e:	42bc      	cmp	r4, r7
   183a0:	d10a      	bne.n	183b8 <z_impl_k_yield+0x7c>
   183a2:	4926      	ldr	r1, [pc, #152]	; (1843c <z_impl_k_yield+0x100>)
   183a4:	4826      	ldr	r0, [pc, #152]	; (18440 <z_impl_k_yield+0x104>)
   183a6:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   183aa:	f001 fade 	bl	1996a <printk>
   183ae:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   183b2:	4822      	ldr	r0, [pc, #136]	; (1843c <z_impl_k_yield+0x100>)
   183b4:	f001 fd7f 	bl	19eb6 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   183b8:	e9d5 320b 	ldrd	r3, r2, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   183bc:	4925      	ldr	r1, [pc, #148]	; (18454 <z_impl_k_yield+0x118>)
   183be:	428b      	cmp	r3, r1
   183c0:	d036      	beq.n	18430 <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   183c2:	2b00      	cmp	r3, #0
   183c4:	d034      	beq.n	18430 <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   183c6:	f994 000e 	ldrsb.w	r0, [r4, #14]
   183ca:	f993 700e 	ldrsb.w	r7, [r3, #14]
   183ce:	4287      	cmp	r7, r0
   183d0:	dd29      	ble.n	18426 <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   183d2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   183d4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   183d8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   183da:	605c      	str	r4, [r3, #4]
			z_mark_thread_as_queued(_current);
   183dc:	68aa      	ldr	r2, [r5, #8]
			update_cache(1);
   183de:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   183e0:	7b53      	ldrb	r3, [r2, #13]
   183e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   183e6:	7353      	strb	r3, [r2, #13]
   183e8:	f7ff fa48 	bl	1787c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   183ec:	4817      	ldr	r0, [pc, #92]	; (1844c <z_impl_k_yield+0x110>)
   183ee:	f000 fae1 	bl	189b4 <z_spin_unlock_valid>
   183f2:	b940      	cbnz	r0, 18406 <z_impl_k_yield+0xca>
   183f4:	4916      	ldr	r1, [pc, #88]	; (18450 <z_impl_k_yield+0x114>)
   183f6:	4812      	ldr	r0, [pc, #72]	; (18440 <z_impl_k_yield+0x104>)
   183f8:	22a7      	movs	r2, #167	; 0xa7
   183fa:	f001 fab6 	bl	1996a <printk>
   183fe:	21a7      	movs	r1, #167	; 0xa7
   18400:	4813      	ldr	r0, [pc, #76]	; (18450 <z_impl_k_yield+0x114>)
   18402:	f001 fd58 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   18406:	f386 8811 	msr	BASEPRI, r6
   1840a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1840e:	f04f 0320 	mov.w	r3, #32
   18412:	f3ef 8011 	mrs	r0, BASEPRI
   18416:	f383 8811 	msr	BASEPRI, r3
   1841a:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   1841e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   18422:	f7f4 bc13 	b.w	cc4c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   18426:	4293      	cmp	r3, r2
   18428:	d002      	beq.n	18430 <z_impl_k_yield+0xf4>
   1842a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1842c:	2b00      	cmp	r3, #0
   1842e:	d1cc      	bne.n	183ca <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   18430:	e9c4 1200 	strd	r1, r2, [r4]
	list->tail->next = node;
   18434:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   18436:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18438:	632c      	str	r4, [r5, #48]	; 0x30
}
   1843a:	e7cf      	b.n	183dc <z_impl_k_yield+0xa0>
   1843c:	0002165f 	.word	0x0002165f
   18440:	0001ea60 	.word	0x0001ea60
   18444:	2000adec 	.word	0x2000adec
   18448:	2000a290 	.word	0x2000a290
   1844c:	2000ae24 	.word	0x2000ae24
   18450:	0001ea9a 	.word	0x0001ea9a
   18454:	2000ae18 	.word	0x2000ae18

00018458 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   18458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1845c:	4605      	mov	r5, r0
   1845e:	460f      	mov	r7, r1
   18460:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   18464:	b153      	cbz	r3, 1847c <z_tick_sleep+0x24>
   18466:	4934      	ldr	r1, [pc, #208]	; (18538 <z_tick_sleep+0xe0>)
   18468:	4834      	ldr	r0, [pc, #208]	; (1853c <z_tick_sleep+0xe4>)
   1846a:	f240 42ed 	movw	r2, #1261	; 0x4ed
   1846e:	f001 fa7c 	bl	1996a <printk>
   18472:	f240 41ed 	movw	r1, #1261	; 0x4ed
   18476:	4830      	ldr	r0, [pc, #192]	; (18538 <z_tick_sleep+0xe0>)
   18478:	f001 fd1d 	bl	19eb6 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1847c:	ea55 0307 	orrs.w	r3, r5, r7
   18480:	d104      	bne.n	1848c <z_tick_sleep+0x34>
	z_impl_k_yield();
   18482:	f7ff ff5b 	bl	1833c <z_impl_k_yield>
		k_yield();
		return 0;
   18486:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   18488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1848c:	f004 feba 	bl	1d204 <z_tick_get_32>
   18490:	1944      	adds	r4, r0, r5
   18492:	f04f 0320 	mov.w	r3, #32
   18496:	f3ef 8811 	mrs	r8, BASEPRI
   1849a:	f383 8811 	msr	BASEPRI, r3
   1849e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   184a2:	4827      	ldr	r0, [pc, #156]	; (18540 <z_tick_sleep+0xe8>)
   184a4:	f000 fa78 	bl	18998 <z_spin_lock_valid>
   184a8:	b940      	cbnz	r0, 184bc <z_tick_sleep+0x64>
   184aa:	4926      	ldr	r1, [pc, #152]	; (18544 <z_tick_sleep+0xec>)
   184ac:	4823      	ldr	r0, [pc, #140]	; (1853c <z_tick_sleep+0xe4>)
   184ae:	227c      	movs	r2, #124	; 0x7c
   184b0:	f001 fa5b 	bl	1996a <printk>
   184b4:	217c      	movs	r1, #124	; 0x7c
   184b6:	4823      	ldr	r0, [pc, #140]	; (18544 <z_tick_sleep+0xec>)
   184b8:	f001 fcfd 	bl	19eb6 <assert_post_action>
	pending_current = _current;
   184bc:	4e22      	ldr	r6, [pc, #136]	; (18548 <z_tick_sleep+0xf0>)
	z_spin_lock_set_owner(l);
   184be:	4820      	ldr	r0, [pc, #128]	; (18540 <z_tick_sleep+0xe8>)
   184c0:	f000 fa86 	bl	189d0 <z_spin_lock_set_owner>
   184c4:	68b0      	ldr	r0, [r6, #8]
   184c6:	4b21      	ldr	r3, [pc, #132]	; (1854c <z_tick_sleep+0xf4>)
   184c8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   184ca:	f7ff fd7d 	bl	17fc8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   184ce:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   184d0:	462a      	mov	r2, r5
   184d2:	463b      	mov	r3, r7
   184d4:	3018      	adds	r0, #24
   184d6:	491e      	ldr	r1, [pc, #120]	; (18550 <z_tick_sleep+0xf8>)
   184d8:	f000 fbf2 	bl	18cc0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   184dc:	68b2      	ldr	r2, [r6, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   184de:	4818      	ldr	r0, [pc, #96]	; (18540 <z_tick_sleep+0xe8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   184e0:	7b53      	ldrb	r3, [r2, #13]
   184e2:	f043 0310 	orr.w	r3, r3, #16
   184e6:	7353      	strb	r3, [r2, #13]
   184e8:	f000 fa64 	bl	189b4 <z_spin_unlock_valid>
   184ec:	b940      	cbnz	r0, 18500 <z_tick_sleep+0xa8>
   184ee:	4915      	ldr	r1, [pc, #84]	; (18544 <z_tick_sleep+0xec>)
   184f0:	4812      	ldr	r0, [pc, #72]	; (1853c <z_tick_sleep+0xe4>)
   184f2:	22be      	movs	r2, #190	; 0xbe
   184f4:	f001 fa39 	bl	1996a <printk>
   184f8:	21be      	movs	r1, #190	; 0xbe
   184fa:	4812      	ldr	r0, [pc, #72]	; (18544 <z_tick_sleep+0xec>)
   184fc:	f001 fcdb 	bl	19eb6 <assert_post_action>
   18500:	4640      	mov	r0, r8
   18502:	f7f4 fba3 	bl	cc4c <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   18506:	68b3      	ldr	r3, [r6, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   18508:	7b5b      	ldrb	r3, [r3, #13]
   1850a:	06db      	lsls	r3, r3, #27
   1850c:	d50a      	bpl.n	18524 <z_tick_sleep+0xcc>
   1850e:	490a      	ldr	r1, [pc, #40]	; (18538 <z_tick_sleep+0xe0>)
   18510:	480a      	ldr	r0, [pc, #40]	; (1853c <z_tick_sleep+0xe4>)
   18512:	f240 520b 	movw	r2, #1291	; 0x50b
   18516:	f001 fa28 	bl	1996a <printk>
   1851a:	f240 510b 	movw	r1, #1291	; 0x50b
   1851e:	4806      	ldr	r0, [pc, #24]	; (18538 <z_tick_sleep+0xe0>)
   18520:	f001 fcc9 	bl	19eb6 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   18524:	f004 fe6e 	bl	1d204 <z_tick_get_32>
   18528:	1a20      	subs	r0, r4, r0
   1852a:	eb63 0303 	sbc.w	r3, r3, r3
   1852e:	2b00      	cmp	r3, #0
   18530:	bfb8      	it	lt
   18532:	2000      	movlt	r0, #0
   18534:	e7a8      	b.n	18488 <z_tick_sleep+0x30>
   18536:	bf00      	nop
   18538:	0002165f 	.word	0x0002165f
   1853c:	0001ea60 	.word	0x0001ea60
   18540:	2000ae24 	.word	0x2000ae24
   18544:	0001ea9a 	.word	0x0001ea9a
   18548:	2000adec 	.word	0x2000adec
   1854c:	2000ae20 	.word	0x2000ae20
   18550:	00017b2d 	.word	0x00017b2d

00018554 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   18554:	b538      	push	{r3, r4, r5, lr}
   18556:	4605      	mov	r5, r0
   18558:	460c      	mov	r4, r1
   1855a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1855e:	b153      	cbz	r3, 18576 <z_impl_k_sleep+0x22>
   18560:	4911      	ldr	r1, [pc, #68]	; (185a8 <z_impl_k_sleep+0x54>)
   18562:	4812      	ldr	r0, [pc, #72]	; (185ac <z_impl_k_sleep+0x58>)
   18564:	f240 521a 	movw	r2, #1306	; 0x51a
   18568:	f001 f9ff 	bl	1996a <printk>
   1856c:	f240 511a 	movw	r1, #1306	; 0x51a
   18570:	480d      	ldr	r0, [pc, #52]	; (185a8 <z_impl_k_sleep+0x54>)
   18572:	f001 fca0 	bl	19eb6 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18576:	f1b4 3fff 	cmp.w	r4, #4294967295
   1857a:	bf08      	it	eq
   1857c:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   18580:	d106      	bne.n	18590 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   18582:	4b0b      	ldr	r3, [pc, #44]	; (185b0 <z_impl_k_sleep+0x5c>)
   18584:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   18586:	f7ff fbc5 	bl	17d14 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1858a:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1858e:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   18590:	4628      	mov	r0, r5
   18592:	4621      	mov	r1, r4
   18594:	f7ff ff60 	bl	18458 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   18598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1859c:	fb80 0303 	smull	r0, r3, r0, r3
   185a0:	0bc0      	lsrs	r0, r0, #15
   185a2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   185a6:	e7f2      	b.n	1858e <z_impl_k_sleep+0x3a>
   185a8:	0002165f 	.word	0x0002165f
   185ac:	0001ea60 	.word	0x0001ea60
   185b0:	2000adec 	.word	0x2000adec

000185b4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   185b4:	4b01      	ldr	r3, [pc, #4]	; (185bc <z_impl_k_current_get+0x8>)
   185b6:	6898      	ldr	r0, [r3, #8]
   185b8:	4770      	bx	lr
   185ba:	bf00      	nop
   185bc:	2000adec 	.word	0x2000adec

000185c0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   185c0:	b538      	push	{r3, r4, r5, lr}
   185c2:	4604      	mov	r4, r0
   185c4:	f04f 0320 	mov.w	r3, #32
   185c8:	f3ef 8511 	mrs	r5, BASEPRI
   185cc:	f383 8811 	msr	BASEPRI, r3
   185d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   185d4:	4815      	ldr	r0, [pc, #84]	; (1862c <z_impl_k_sem_give+0x6c>)
   185d6:	f000 f9df 	bl	18998 <z_spin_lock_valid>
   185da:	b940      	cbnz	r0, 185ee <z_impl_k_sem_give+0x2e>
   185dc:	4914      	ldr	r1, [pc, #80]	; (18630 <z_impl_k_sem_give+0x70>)
   185de:	4815      	ldr	r0, [pc, #84]	; (18634 <z_impl_k_sem_give+0x74>)
   185e0:	227c      	movs	r2, #124	; 0x7c
   185e2:	f001 f9c2 	bl	1996a <printk>
   185e6:	217c      	movs	r1, #124	; 0x7c
   185e8:	4811      	ldr	r0, [pc, #68]	; (18630 <z_impl_k_sem_give+0x70>)
   185ea:	f001 fc64 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   185ee:	480f      	ldr	r0, [pc, #60]	; (1862c <z_impl_k_sem_give+0x6c>)
   185f0:	f000 f9ee 	bl	189d0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   185f4:	4620      	mov	r0, r4
   185f6:	f7ff fe2d 	bl	18254 <z_unpend_first_thread>

	if (thread != NULL) {
   185fa:	b150      	cbz	r0, 18612 <z_impl_k_sem_give+0x52>
   185fc:	2200      	movs	r2, #0
   185fe:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   18602:	f7ff fa1b 	bl	17a3c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   18606:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   18608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1860c:	4807      	ldr	r0, [pc, #28]	; (1862c <z_impl_k_sem_give+0x6c>)
   1860e:	f7ff b841 	b.w	17694 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   18612:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   18616:	429a      	cmp	r2, r3
   18618:	bf18      	it	ne
   1861a:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1861c:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1861e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   18620:	f104 0010 	add.w	r0, r4, #16
   18624:	f004 fe65 	bl	1d2f2 <z_handle_obj_poll_events>
}
   18628:	e7ed      	b.n	18606 <z_impl_k_sem_give+0x46>
   1862a:	bf00      	nop
   1862c:	2000ae30 	.word	0x2000ae30
   18630:	0001ea9a 	.word	0x0001ea9a
   18634:	0001ea60 	.word	0x0001ea60

00018638 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   18638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1863a:	4604      	mov	r4, r0
   1863c:	4616      	mov	r6, r2
   1863e:	461d      	mov	r5, r3
   18640:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   18644:	b15b      	cbz	r3, 1865e <z_impl_k_sem_take+0x26>
   18646:	ea52 0305 	orrs.w	r3, r2, r5
   1864a:	d008      	beq.n	1865e <z_impl_k_sem_take+0x26>
   1864c:	492b      	ldr	r1, [pc, #172]	; (186fc <z_impl_k_sem_take+0xc4>)
   1864e:	482c      	ldr	r0, [pc, #176]	; (18700 <z_impl_k_sem_take+0xc8>)
   18650:	228c      	movs	r2, #140	; 0x8c
   18652:	f001 f98a 	bl	1996a <printk>
   18656:	218c      	movs	r1, #140	; 0x8c
   18658:	4828      	ldr	r0, [pc, #160]	; (186fc <z_impl_k_sem_take+0xc4>)
   1865a:	f001 fc2c 	bl	19eb6 <assert_post_action>
   1865e:	f04f 0320 	mov.w	r3, #32
   18662:	f3ef 8711 	mrs	r7, BASEPRI
   18666:	f383 8811 	msr	BASEPRI, r3
   1866a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1866e:	4825      	ldr	r0, [pc, #148]	; (18704 <z_impl_k_sem_take+0xcc>)
   18670:	f000 f992 	bl	18998 <z_spin_lock_valid>
   18674:	b940      	cbnz	r0, 18688 <z_impl_k_sem_take+0x50>
   18676:	4924      	ldr	r1, [pc, #144]	; (18708 <z_impl_k_sem_take+0xd0>)
   18678:	4821      	ldr	r0, [pc, #132]	; (18700 <z_impl_k_sem_take+0xc8>)
   1867a:	227c      	movs	r2, #124	; 0x7c
   1867c:	f001 f975 	bl	1996a <printk>
   18680:	217c      	movs	r1, #124	; 0x7c
   18682:	4821      	ldr	r0, [pc, #132]	; (18708 <z_impl_k_sem_take+0xd0>)
   18684:	f001 fc17 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   18688:	481e      	ldr	r0, [pc, #120]	; (18704 <z_impl_k_sem_take+0xcc>)
   1868a:	f000 f9a1 	bl	189d0 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1868e:	68a3      	ldr	r3, [r4, #8]
   18690:	b1ab      	cbz	r3, 186be <z_impl_k_sem_take+0x86>
		sem->count--;
   18692:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18694:	481b      	ldr	r0, [pc, #108]	; (18704 <z_impl_k_sem_take+0xcc>)
   18696:	60a3      	str	r3, [r4, #8]
   18698:	f000 f98c 	bl	189b4 <z_spin_unlock_valid>
   1869c:	b940      	cbnz	r0, 186b0 <z_impl_k_sem_take+0x78>
   1869e:	491a      	ldr	r1, [pc, #104]	; (18708 <z_impl_k_sem_take+0xd0>)
   186a0:	4817      	ldr	r0, [pc, #92]	; (18700 <z_impl_k_sem_take+0xc8>)
   186a2:	22a7      	movs	r2, #167	; 0xa7
   186a4:	f001 f961 	bl	1996a <printk>
   186a8:	21a7      	movs	r1, #167	; 0xa7
   186aa:	4817      	ldr	r0, [pc, #92]	; (18708 <z_impl_k_sem_take+0xd0>)
   186ac:	f001 fc03 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   186b0:	f387 8811 	msr	BASEPRI, r7
   186b4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   186b8:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   186ba:	b003      	add	sp, #12
   186bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   186be:	ea56 0305 	orrs.w	r3, r6, r5
   186c2:	d113      	bne.n	186ec <z_impl_k_sem_take+0xb4>
   186c4:	480f      	ldr	r0, [pc, #60]	; (18704 <z_impl_k_sem_take+0xcc>)
   186c6:	f000 f975 	bl	189b4 <z_spin_unlock_valid>
   186ca:	b940      	cbnz	r0, 186de <z_impl_k_sem_take+0xa6>
   186cc:	490e      	ldr	r1, [pc, #56]	; (18708 <z_impl_k_sem_take+0xd0>)
   186ce:	480c      	ldr	r0, [pc, #48]	; (18700 <z_impl_k_sem_take+0xc8>)
   186d0:	22a7      	movs	r2, #167	; 0xa7
   186d2:	f001 f94a 	bl	1996a <printk>
   186d6:	21a7      	movs	r1, #167	; 0xa7
   186d8:	480b      	ldr	r0, [pc, #44]	; (18708 <z_impl_k_sem_take+0xd0>)
   186da:	f001 fbec 	bl	19eb6 <assert_post_action>
   186de:	f387 8811 	msr	BASEPRI, r7
   186e2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   186e6:	f06f 000f 	mvn.w	r0, #15
   186ea:	e7e6      	b.n	186ba <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   186ec:	4622      	mov	r2, r4
   186ee:	4639      	mov	r1, r7
   186f0:	e9cd 6500 	strd	r6, r5, [sp]
   186f4:	4803      	ldr	r0, [pc, #12]	; (18704 <z_impl_k_sem_take+0xcc>)
   186f6:	f7ff fd0b 	bl	18110 <z_pend_curr>
	return ret;
   186fa:	e7de      	b.n	186ba <z_impl_k_sem_take+0x82>
   186fc:	00021681 	.word	0x00021681
   18700:	0001ea60 	.word	0x0001ea60
   18704:	2000ae30 	.word	0x2000ae30
   18708:	0001ea9a 	.word	0x0001ea9a

0001870c <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1870c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1870e:	4c08      	ldr	r4, [pc, #32]	; (18730 <k_sys_work_q_init+0x24>)
   18710:	f04f 33ff 	mov.w	r3, #4294967295
   18714:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18718:	4620      	mov	r0, r4
   1871a:	4906      	ldr	r1, [pc, #24]	; (18734 <k_sys_work_q_init+0x28>)
   1871c:	f000 f98c 	bl	18a38 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   18720:	4905      	ldr	r1, [pc, #20]	; (18738 <k_sys_work_q_init+0x2c>)
   18722:	f104 0020 	add.w	r0, r4, #32
   18726:	f004 fd0f 	bl	1d148 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1872a:	2000      	movs	r0, #0
   1872c:	bd10      	pop	{r4, pc}
   1872e:	bf00      	nop
   18730:	2000a3b0 	.word	0x2000a3b0
   18734:	2000f468 	.word	0x2000f468
   18738:	000216a1 	.word	0x000216a1

0001873c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1873c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18740:	4604      	mov	r4, r0
   18742:	460f      	mov	r7, r1
   18744:	4698      	mov	r8, r3
   18746:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   18748:	4b2c      	ldr	r3, [pc, #176]	; (187fc <z_setup_new_thread+0xc0>)
   1874a:	4616      	mov	r6, r2
   1874c:	f100 0238 	add.w	r2, r0, #56	; 0x38
   18750:	e8d2 1fef 	ldaex	r1, [r2]
   18754:	e8c2 3fe0 	stlex	r0, r3, [r2]
   18758:	2800      	cmp	r0, #0
   1875a:	d1f9      	bne.n	18750 <z_setup_new_thread+0x14>
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   1875c:	4299      	cmp	r1, r3
   1875e:	d10a      	bne.n	18776 <z_setup_new_thread+0x3a>
   18760:	4927      	ldr	r1, [pc, #156]	; (18800 <z_setup_new_thread+0xc4>)
   18762:	4828      	ldr	r0, [pc, #160]	; (18804 <z_setup_new_thread+0xc8>)
   18764:	f240 2223 	movw	r2, #547	; 0x223
   18768:	f001 f8ff 	bl	1996a <printk>
   1876c:	f240 2123 	movw	r1, #547	; 0x223
   18770:	4823      	ldr	r0, [pc, #140]	; (18800 <z_setup_new_thread+0xc4>)
   18772:	f001 fba0 	bl	19eb6 <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   18776:	2d0f      	cmp	r5, #15
   18778:	d12f      	bne.n	187da <z_setup_new_thread+0x9e>
   1877a:	4b23      	ldr	r3, [pc, #140]	; (18808 <z_setup_new_thread+0xcc>)
   1877c:	4598      	cmp	r8, r3
   1877e:	d130      	bne.n	187e2 <z_setup_new_thread+0xa6>
	sys_dlist_init(&w->waitq);
   18780:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   18784:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   18788:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   1878a:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   1878c:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1878e:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   18790:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   18792:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18794:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   18796:	1df0      	adds	r0, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18798:	9302      	str	r3, [sp, #8]
   1879a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1879c:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   187a0:	9301      	str	r3, [sp, #4]
   187a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   187a4:	183e      	adds	r6, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   187a6:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   187aa:	9300      	str	r3, [sp, #0]
   187ac:	4632      	mov	r2, r6
   187ae:	4643      	mov	r3, r8
   187b0:	4639      	mov	r1, r7
   187b2:	4620      	mov	r0, r4
	node->prev = NULL;
   187b4:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->sched_locked = 0U;
   187b8:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   187ba:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   187bc:	f7f4 fae4 	bl	cd88 <arch_new_thread>
	if (!_current) {
   187c0:	4b12      	ldr	r3, [pc, #72]	; (1880c <z_setup_new_thread+0xd0>)
	new_thread->fn_abort = NULL;
   187c2:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   187c6:	689b      	ldr	r3, [r3, #8]
   187c8:	b10b      	cbz	r3, 187ce <z_setup_new_thread+0x92>
	new_thread->resource_pool = _current->resource_pool;
   187ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   187ce:	4630      	mov	r0, r6
   187d0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   187d4:	b004      	add	sp, #16
   187d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   187da:	f105 0310 	add.w	r3, r5, #16
   187de:	2b1e      	cmp	r3, #30
   187e0:	d9ce      	bls.n	18780 <z_setup_new_thread+0x44>
   187e2:	f240 2226 	movw	r2, #550	; 0x226
   187e6:	4906      	ldr	r1, [pc, #24]	; (18800 <z_setup_new_thread+0xc4>)
   187e8:	4806      	ldr	r0, [pc, #24]	; (18804 <z_setup_new_thread+0xc8>)
   187ea:	f001 f8be 	bl	1996a <printk>
   187ee:	f240 2126 	movw	r1, #550	; 0x226
   187f2:	4803      	ldr	r0, [pc, #12]	; (18800 <z_setup_new_thread+0xc4>)
   187f4:	f001 fb5f 	bl	19eb6 <assert_post_action>
   187f8:	e7c2      	b.n	18780 <z_setup_new_thread+0x44>
   187fa:	bf00      	nop
   187fc:	1337c0d3 	.word	0x1337c0d3
   18800:	000216aa 	.word	0x000216aa
   18804:	0001ea60 	.word	0x0001ea60
   18808:	00016b25 	.word	0x00016b25
   1880c:	2000adec 	.word	0x2000adec

00018810 <z_impl_k_thread_create>:
{
   18810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18814:	b087      	sub	sp, #28
   18816:	4604      	mov	r4, r0
   18818:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   1881c:	460f      	mov	r7, r1
   1881e:	4690      	mov	r8, r2
   18820:	4699      	mov	r9, r3
   18822:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   18826:	b153      	cbz	r3, 1883e <z_impl_k_thread_create+0x2e>
   18828:	491a      	ldr	r1, [pc, #104]	; (18894 <z_impl_k_thread_create+0x84>)
   1882a:	481b      	ldr	r0, [pc, #108]	; (18898 <z_impl_k_thread_create+0x88>)
   1882c:	f240 228f 	movw	r2, #655	; 0x28f
   18830:	f001 f89b 	bl	1996a <printk>
   18834:	f240 218f 	movw	r1, #655	; 0x28f
   18838:	4816      	ldr	r0, [pc, #88]	; (18894 <z_impl_k_thread_create+0x84>)
   1883a:	f001 fb3c 	bl	19eb6 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1883e:	2300      	movs	r3, #0
   18840:	9305      	str	r3, [sp, #20]
   18842:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18844:	4642      	mov	r2, r8
   18846:	9304      	str	r3, [sp, #16]
   18848:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1884a:	4639      	mov	r1, r7
   1884c:	9303      	str	r3, [sp, #12]
   1884e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18850:	4620      	mov	r0, r4
   18852:	9302      	str	r3, [sp, #8]
   18854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18856:	9301      	str	r3, [sp, #4]
   18858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1885a:	9300      	str	r3, [sp, #0]
   1885c:	464b      	mov	r3, r9
   1885e:	f7ff ff6d 	bl	1873c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   18862:	f1b5 3fff 	cmp.w	r5, #4294967295
   18866:	bf08      	it	eq
   18868:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1886c:	d005      	beq.n	1887a <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1886e:	ea55 0306 	orrs.w	r3, r5, r6
   18872:	d106      	bne.n	18882 <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   18874:	4620      	mov	r0, r4
   18876:	f7ff f917 	bl	17aa8 <z_sched_start>
}
   1887a:	4620      	mov	r0, r4
   1887c:	b007      	add	sp, #28
   1887e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18882:	4632      	mov	r2, r6
   18884:	462b      	mov	r3, r5
   18886:	4905      	ldr	r1, [pc, #20]	; (1889c <z_impl_k_thread_create+0x8c>)
   18888:	f104 0018 	add.w	r0, r4, #24
   1888c:	f000 fa18 	bl	18cc0 <z_add_timeout>
   18890:	e7f3      	b.n	1887a <z_impl_k_thread_create+0x6a>
   18892:	bf00      	nop
   18894:	000216aa 	.word	0x000216aa
   18898:	0001ea60 	.word	0x0001ea60
   1889c:	00017b2d 	.word	0x00017b2d

000188a0 <z_init_static_threads>:
{
   188a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   188a4:	4c37      	ldr	r4, [pc, #220]	; (18984 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   188a6:	4d38      	ldr	r5, [pc, #224]	; (18988 <z_init_static_threads+0xe8>)
   188a8:	4f38      	ldr	r7, [pc, #224]	; (1898c <z_init_static_threads+0xec>)
{
   188aa:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   188ac:	42ac      	cmp	r4, r5
   188ae:	4626      	mov	r6, r4
   188b0:	d90a      	bls.n	188c8 <z_init_static_threads+0x28>
   188b2:	4639      	mov	r1, r7
   188b4:	4836      	ldr	r0, [pc, #216]	; (18990 <z_init_static_threads+0xf0>)
   188b6:	f240 22fd 	movw	r2, #765	; 0x2fd
   188ba:	f001 f856 	bl	1996a <printk>
   188be:	f240 21fd 	movw	r1, #765	; 0x2fd
   188c2:	4638      	mov	r0, r7
   188c4:	f001 faf7 	bl	19eb6 <assert_post_action>
   188c8:	42ae      	cmp	r6, r5
   188ca:	f104 0430 	add.w	r4, r4, #48	; 0x30
   188ce:	d31b      	bcc.n	18908 <z_init_static_threads+0x68>
	k_sched_lock();
   188d0:	f7fe ff16 	bl	17700 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   188d4:	4c2b      	ldr	r4, [pc, #172]	; (18984 <z_init_static_threads+0xe4>)
   188d6:	4e2d      	ldr	r6, [pc, #180]	; (1898c <z_init_static_threads+0xec>)
   188d8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 18990 <z_init_static_threads+0xf0>
   188dc:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 18994 <z_init_static_threads+0xf4>
   188e0:	42ac      	cmp	r4, r5
   188e2:	d90a      	bls.n	188fa <z_init_static_threads+0x5a>
   188e4:	4631      	mov	r1, r6
   188e6:	4640      	mov	r0, r8
   188e8:	f44f 7247 	mov.w	r2, #796	; 0x31c
   188ec:	f001 f83d 	bl	1996a <printk>
   188f0:	f44f 7147 	mov.w	r1, #796	; 0x31c
   188f4:	4630      	mov	r0, r6
   188f6:	f001 fade 	bl	19eb6 <assert_post_action>
   188fa:	42ac      	cmp	r4, r5
   188fc:	d320      	bcc.n	18940 <z_init_static_threads+0xa0>
}
   188fe:	b007      	add	sp, #28
   18900:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   18904:	f7fe bff4 	b.w	178f0 <k_sched_unlock>
		z_setup_new_thread(
   18908:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1890c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   18910:	9305      	str	r3, [sp, #20]
   18912:	f854 3c10 	ldr.w	r3, [r4, #-16]
   18916:	9304      	str	r3, [sp, #16]
   18918:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1891c:	9303      	str	r3, [sp, #12]
   1891e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   18922:	9302      	str	r3, [sp, #8]
   18924:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   18928:	9301      	str	r3, [sp, #4]
   1892a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1892e:	9300      	str	r3, [sp, #0]
   18930:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   18934:	f7ff ff02 	bl	1873c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   18938:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1893c:	665e      	str	r6, [r3, #100]	; 0x64
	_FOREACH_STATIC_THREAD(thread_data) {
   1893e:	e7b5      	b.n	188ac <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   18940:	6a63      	ldr	r3, [r4, #36]	; 0x24
   18942:	1c5a      	adds	r2, r3, #1
   18944:	d00f      	beq.n	18966 <z_init_static_threads+0xc6>
   18946:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1894a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1894e:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   18950:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   18954:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18958:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1895c:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1895e:	d104      	bne.n	1896a <z_init_static_threads+0xca>
	z_sched_start(thread);
   18960:	4638      	mov	r0, r7
   18962:	f7ff f8a1 	bl	17aa8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   18966:	3430      	adds	r4, #48	; 0x30
   18968:	e7ba      	b.n	188e0 <z_init_static_threads+0x40>
   1896a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1896e:	2300      	movs	r3, #0
   18970:	f7f0 f8dc 	bl	8b2c <__aeabi_uldivmod>
   18974:	4602      	mov	r2, r0
   18976:	460b      	mov	r3, r1
   18978:	f107 0018 	add.w	r0, r7, #24
   1897c:	4649      	mov	r1, r9
   1897e:	f000 f99f 	bl	18cc0 <z_add_timeout>
   18982:	e7f0      	b.n	18966 <z_init_static_threads+0xc6>
   18984:	200085ec 	.word	0x200085ec
   18988:	200085ec 	.word	0x200085ec
   1898c:	000216aa 	.word	0x000216aa
   18990:	0001ea60 	.word	0x0001ea60
   18994:	00017b2d 	.word	0x00017b2d

00018998 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   18998:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   1899a:	b138      	cbz	r0, 189ac <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1899c:	4b04      	ldr	r3, [pc, #16]	; (189b0 <z_spin_lock_valid+0x18>)
   1899e:	f000 0003 	and.w	r0, r0, #3
   189a2:	7e1b      	ldrb	r3, [r3, #24]
   189a4:	1ac0      	subs	r0, r0, r3
   189a6:	bf18      	it	ne
   189a8:	2001      	movne	r0, #1
   189aa:	4770      	bx	lr
			return false;
		}
	}
	return true;
   189ac:	2001      	movs	r0, #1
}
   189ae:	4770      	bx	lr
   189b0:	2000adec 	.word	0x2000adec

000189b4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   189b4:	4905      	ldr	r1, [pc, #20]	; (189cc <z_spin_unlock_valid+0x18>)
{
   189b6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   189b8:	688a      	ldr	r2, [r1, #8]
   189ba:	7e08      	ldrb	r0, [r1, #24]
   189bc:	6819      	ldr	r1, [r3, #0]
   189be:	4302      	orrs	r2, r0
   189c0:	2000      	movs	r0, #0
   189c2:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   189c4:	bf04      	itt	eq
   189c6:	6018      	streq	r0, [r3, #0]
	return true;
   189c8:	2001      	moveq	r0, #1
}
   189ca:	4770      	bx	lr
   189cc:	2000adec 	.word	0x2000adec

000189d0 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   189d0:	4a02      	ldr	r2, [pc, #8]	; (189dc <z_spin_lock_set_owner+0xc>)
   189d2:	7e11      	ldrb	r1, [r2, #24]
   189d4:	6893      	ldr	r3, [r2, #8]
   189d6:	430b      	orrs	r3, r1
   189d8:	6003      	str	r3, [r0, #0]
}
   189da:	4770      	bx	lr
   189dc:	2000adec 	.word	0x2000adec

000189e0 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   189e0:	b508      	push	{r3, lr}
	__asm__ volatile(
   189e2:	f04f 0320 	mov.w	r3, #32
   189e6:	f3ef 8511 	mrs	r5, BASEPRI
   189ea:	f383 8811 	msr	BASEPRI, r3
   189ee:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   189f2:	4c0e      	ldr	r4, [pc, #56]	; (18a2c <z_self_abort+0x4c>)
   189f4:	6923      	ldr	r3, [r4, #16]
   189f6:	b143      	cbz	r3, 18a0a <z_self_abort+0x2a>
   189f8:	490d      	ldr	r1, [pc, #52]	; (18a30 <z_self_abort+0x50>)
   189fa:	480e      	ldr	r0, [pc, #56]	; (18a34 <z_self_abort+0x54>)
   189fc:	2228      	movs	r2, #40	; 0x28
   189fe:	f000 ffb4 	bl	1996a <printk>
   18a02:	2128      	movs	r1, #40	; 0x28
   18a04:	480a      	ldr	r0, [pc, #40]	; (18a30 <z_self_abort+0x50>)
   18a06:	f001 fa56 	bl	19eb6 <assert_post_action>
	cpu->pending_abort = _current;
   18a0a:	68a0      	ldr	r0, [r4, #8]
   18a0c:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   18a0e:	f7ff f981 	bl	17d14 <z_impl_k_thread_suspend>
   18a12:	4628      	mov	r0, r5
   18a14:	f7f4 f91a 	bl	cc4c <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   18a18:	4905      	ldr	r1, [pc, #20]	; (18a30 <z_self_abort+0x50>)
   18a1a:	4806      	ldr	r0, [pc, #24]	; (18a34 <z_self_abort+0x54>)
   18a1c:	2230      	movs	r2, #48	; 0x30
   18a1e:	f000 ffa4 	bl	1996a <printk>
   18a22:	2130      	movs	r1, #48	; 0x30
   18a24:	4802      	ldr	r0, [pc, #8]	; (18a30 <z_self_abort+0x50>)
   18a26:	f001 fa46 	bl	19eb6 <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   18a2a:	bf00      	nop
   18a2c:	2000adec 	.word	0x2000adec
   18a30:	000216cd 	.word	0x000216cd
   18a34:	0001ea60 	.word	0x0001ea60

00018a38 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   18a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a3c:	4604      	mov	r4, r0
   18a3e:	b088      	sub	sp, #32
   18a40:	460d      	mov	r5, r1
   18a42:	4616      	mov	r6, r2
   18a44:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   18a46:	f004 fb00 	bl	1d04a <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   18a4a:	f104 0820 	add.w	r8, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18a4e:	2200      	movs	r2, #0
   18a50:	2300      	movs	r3, #0
   18a52:	e9cd 7203 	strd	r7, r2, [sp, #12]
   18a56:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18a5a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   18a5e:	4629      	mov	r1, r5
   18a60:	4632      	mov	r2, r6
   18a62:	4640      	mov	r0, r8
   18a64:	4b05      	ldr	r3, [pc, #20]	; (18a7c <k_work_q_start+0x44>)
   18a66:	9400      	str	r4, [sp, #0]
   18a68:	f7ff fed2 	bl	18810 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   18a6c:	4640      	mov	r0, r8
   18a6e:	4904      	ldr	r1, [pc, #16]	; (18a80 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   18a70:	b008      	add	sp, #32
   18a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18a76:	f004 bb67 	b.w	1d148 <z_impl_k_thread_name_set>
   18a7a:	bf00      	nop
   18a7c:	0000a385 	.word	0x0000a385
   18a80:	000216f6 	.word	0x000216f6

00018a84 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   18a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18a88:	4606      	mov	r6, r0
   18a8a:	460d      	mov	r5, r1
   18a8c:	4690      	mov	r8, r2
   18a8e:	461f      	mov	r7, r3
   18a90:	f04f 0320 	mov.w	r3, #32
   18a94:	f3ef 8911 	mrs	r9, BASEPRI
   18a98:	f383 8811 	msr	BASEPRI, r3
   18a9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18aa0:	482c      	ldr	r0, [pc, #176]	; (18b54 <k_delayed_work_submit_to_queue+0xd0>)
   18aa2:	f7ff ff79 	bl	18998 <z_spin_lock_valid>
   18aa6:	b940      	cbnz	r0, 18aba <k_delayed_work_submit_to_queue+0x36>
   18aa8:	492b      	ldr	r1, [pc, #172]	; (18b58 <k_delayed_work_submit_to_queue+0xd4>)
   18aaa:	482c      	ldr	r0, [pc, #176]	; (18b5c <k_delayed_work_submit_to_queue+0xd8>)
   18aac:	227c      	movs	r2, #124	; 0x7c
   18aae:	f000 ff5c 	bl	1996a <printk>
   18ab2:	217c      	movs	r1, #124	; 0x7c
   18ab4:	4828      	ldr	r0, [pc, #160]	; (18b58 <k_delayed_work_submit_to_queue+0xd4>)
   18ab6:	f001 f9fe 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   18aba:	4826      	ldr	r0, [pc, #152]	; (18b54 <k_delayed_work_submit_to_queue+0xd0>)
   18abc:	f7ff ff88 	bl	189d0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   18ac0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   18ac2:	b1e3      	cbz	r3, 18afe <k_delayed_work_submit_to_queue+0x7a>
   18ac4:	42b3      	cmp	r3, r6
   18ac6:	d142      	bne.n	18b4e <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   18ac8:	4628      	mov	r0, r5
   18aca:	f004 fb5b 	bl	1d184 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   18ace:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   18ad2:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   18ad4:	d015      	beq.n	18b02 <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   18ad6:	2800      	cmp	r0, #0
   18ad8:	da14      	bge.n	18b04 <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ada:	481e      	ldr	r0, [pc, #120]	; (18b54 <k_delayed_work_submit_to_queue+0xd0>)
   18adc:	f7ff ff6a 	bl	189b4 <z_spin_unlock_valid>
   18ae0:	b940      	cbnz	r0, 18af4 <k_delayed_work_submit_to_queue+0x70>
   18ae2:	491d      	ldr	r1, [pc, #116]	; (18b58 <k_delayed_work_submit_to_queue+0xd4>)
   18ae4:	481d      	ldr	r0, [pc, #116]	; (18b5c <k_delayed_work_submit_to_queue+0xd8>)
   18ae6:	22a7      	movs	r2, #167	; 0xa7
   18ae8:	f000 ff3f 	bl	1996a <printk>
   18aec:	21a7      	movs	r1, #167	; 0xa7
   18aee:	481a      	ldr	r0, [pc, #104]	; (18b58 <k_delayed_work_submit_to_queue+0xd4>)
   18af0:	f001 f9e1 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   18af4:	f389 8811 	msr	BASEPRI, r9
   18af8:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   18afc:	e01c      	b.n	18b38 <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   18afe:	2e00      	cmp	r6, #0
   18b00:	d0e2      	beq.n	18ac8 <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   18b02:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18b04:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   18b08:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18b0a:	d118      	bne.n	18b3e <k_delayed_work_submit_to_queue+0xba>
   18b0c:	4811      	ldr	r0, [pc, #68]	; (18b54 <k_delayed_work_submit_to_queue+0xd0>)
   18b0e:	f7ff ff51 	bl	189b4 <z_spin_unlock_valid>
   18b12:	b940      	cbnz	r0, 18b26 <k_delayed_work_submit_to_queue+0xa2>
   18b14:	4910      	ldr	r1, [pc, #64]	; (18b58 <k_delayed_work_submit_to_queue+0xd4>)
   18b16:	4811      	ldr	r0, [pc, #68]	; (18b5c <k_delayed_work_submit_to_queue+0xd8>)
   18b18:	22a7      	movs	r2, #167	; 0xa7
   18b1a:	f000 ff26 	bl	1996a <printk>
   18b1e:	21a7      	movs	r1, #167	; 0xa7
   18b20:	480d      	ldr	r0, [pc, #52]	; (18b58 <k_delayed_work_submit_to_queue+0xd4>)
   18b22:	f001 f9c8 	bl	19eb6 <assert_post_action>
   18b26:	f389 8811 	msr	BASEPRI, r9
   18b2a:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   18b2e:	4629      	mov	r1, r5
   18b30:	4630      	mov	r0, r6
   18b32:	f004 fb0e 	bl	1d152 <k_work_submit_to_queue>
		return 0;
   18b36:	2400      	movs	r4, #0
}
   18b38:	4620      	mov	r0, r4
   18b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   18b3e:	4642      	mov	r2, r8
   18b40:	463b      	mov	r3, r7
   18b42:	4907      	ldr	r1, [pc, #28]	; (18b60 <k_delayed_work_submit_to_queue+0xdc>)
   18b44:	f105 0010 	add.w	r0, r5, #16
   18b48:	f000 f8ba 	bl	18cc0 <z_add_timeout>
   18b4c:	e7c5      	b.n	18ada <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   18b4e:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   18b52:	e7c2      	b.n	18ada <k_delayed_work_submit_to_queue+0x56>
   18b54:	2000ae34 	.word	0x2000ae34
   18b58:	0001ea9a 	.word	0x0001ea9a
   18b5c:	0001ea60 	.word	0x0001ea60
   18b60:	0001d17b 	.word	0x0001d17b

00018b64 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   18b64:	b538      	push	{r3, r4, r5, lr}
   18b66:	4604      	mov	r4, r0
	__asm__ volatile(
   18b68:	f04f 0320 	mov.w	r3, #32
   18b6c:	f3ef 8511 	mrs	r5, BASEPRI
   18b70:	f383 8811 	msr	BASEPRI, r3
   18b74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18b78:	4815      	ldr	r0, [pc, #84]	; (18bd0 <k_delayed_work_cancel+0x6c>)
   18b7a:	f7ff ff0d 	bl	18998 <z_spin_lock_valid>
   18b7e:	b940      	cbnz	r0, 18b92 <k_delayed_work_cancel+0x2e>
   18b80:	4914      	ldr	r1, [pc, #80]	; (18bd4 <k_delayed_work_cancel+0x70>)
   18b82:	4815      	ldr	r0, [pc, #84]	; (18bd8 <k_delayed_work_cancel+0x74>)
   18b84:	227c      	movs	r2, #124	; 0x7c
   18b86:	f000 fef0 	bl	1996a <printk>
   18b8a:	217c      	movs	r1, #124	; 0x7c
   18b8c:	4811      	ldr	r0, [pc, #68]	; (18bd4 <k_delayed_work_cancel+0x70>)
   18b8e:	f001 f992 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   18b92:	480f      	ldr	r0, [pc, #60]	; (18bd0 <k_delayed_work_cancel+0x6c>)
   18b94:	f7ff ff1c 	bl	189d0 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   18b98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   18b9a:	b1b3      	cbz	r3, 18bca <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   18b9c:	4620      	mov	r0, r4
   18b9e:	f004 faf1 	bl	1d184 <work_cancel>
   18ba2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ba4:	480a      	ldr	r0, [pc, #40]	; (18bd0 <k_delayed_work_cancel+0x6c>)
   18ba6:	f7ff ff05 	bl	189b4 <z_spin_unlock_valid>
   18baa:	b940      	cbnz	r0, 18bbe <k_delayed_work_cancel+0x5a>
   18bac:	4909      	ldr	r1, [pc, #36]	; (18bd4 <k_delayed_work_cancel+0x70>)
   18bae:	480a      	ldr	r0, [pc, #40]	; (18bd8 <k_delayed_work_cancel+0x74>)
   18bb0:	22a7      	movs	r2, #167	; 0xa7
   18bb2:	f000 feda 	bl	1996a <printk>
   18bb6:	21a7      	movs	r1, #167	; 0xa7
   18bb8:	4806      	ldr	r0, [pc, #24]	; (18bd4 <k_delayed_work_cancel+0x70>)
   18bba:	f001 f97c 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   18bbe:	f385 8811 	msr	BASEPRI, r5
   18bc2:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   18bc6:	4620      	mov	r0, r4
   18bc8:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   18bca:	f06f 0415 	mvn.w	r4, #21
   18bce:	e7e9      	b.n	18ba4 <k_delayed_work_cancel+0x40>
   18bd0:	2000ae34 	.word	0x2000ae34
   18bd4:	0001ea9a 	.word	0x0001ea9a
   18bd8:	0001ea60 	.word	0x0001ea60

00018bdc <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   18bdc:	4a02      	ldr	r2, [pc, #8]	; (18be8 <boot_banner+0xc>)
   18bde:	4903      	ldr	r1, [pc, #12]	; (18bec <boot_banner+0x10>)
   18be0:	4803      	ldr	r0, [pc, #12]	; (18bf0 <boot_banner+0x14>)
   18be2:	f000 bec2 	b.w	1996a <printk>
   18be6:	bf00      	nop
   18be8:	00021539 	.word	0x00021539
   18bec:	00021700 	.word	0x00021700
   18bf0:	0002170d 	.word	0x0002170d

00018bf4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   18bf4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   18bf6:	4806      	ldr	r0, [pc, #24]	; (18c10 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   18bf8:	4a06      	ldr	r2, [pc, #24]	; (18c14 <z_data_copy+0x20>)
   18bfa:	4907      	ldr	r1, [pc, #28]	; (18c18 <z_data_copy+0x24>)
   18bfc:	1a12      	subs	r2, r2, r0
   18bfe:	f002 f8f4 	bl	1adea <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   18c02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   18c06:	4a05      	ldr	r2, [pc, #20]	; (18c1c <z_data_copy+0x28>)
   18c08:	4905      	ldr	r1, [pc, #20]	; (18c20 <z_data_copy+0x2c>)
   18c0a:	4806      	ldr	r0, [pc, #24]	; (18c24 <z_data_copy+0x30>)
   18c0c:	f002 b8ed 	b.w	1adea <memcpy>
   18c10:	20008000 	.word	0x20008000
   18c14:	200087e4 	.word	0x200087e4
   18c18:	000217a4 	.word	0x000217a4
   18c1c:	00000000 	.word	0x00000000
   18c20:	000217a4 	.word	0x000217a4
   18c24:	20008000 	.word	0x20008000

00018c28 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   18c28:	4b03      	ldr	r3, [pc, #12]	; (18c38 <elapsed+0x10>)
   18c2a:	681b      	ldr	r3, [r3, #0]
   18c2c:	b90b      	cbnz	r3, 18c32 <elapsed+0xa>
   18c2e:	f7f2 bff3 	b.w	bc18 <z_clock_elapsed>
}
   18c32:	2000      	movs	r0, #0
   18c34:	4770      	bx	lr
   18c36:	bf00      	nop
   18c38:	2000ae38 	.word	0x2000ae38

00018c3c <next_timeout>:
	return list->head == list;
   18c3c:	4b11      	ldr	r3, [pc, #68]	; (18c84 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   18c3e:	b510      	push	{r4, lr}
   18c40:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18c42:	429c      	cmp	r4, r3
   18c44:	bf08      	it	eq
   18c46:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   18c48:	f7ff ffee 	bl	18c28 <elapsed>
   18c4c:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   18c4e:	b16c      	cbz	r4, 18c6c <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   18c50:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   18c54:	1ac0      	subs	r0, r0, r3
   18c56:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   18c5a:	2801      	cmp	r0, #1
   18c5c:	f173 0200 	sbcs.w	r2, r3, #0
   18c60:	db0d      	blt.n	18c7e <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   18c62:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   18c66:	f173 0300 	sbcs.w	r3, r3, #0
   18c6a:	db01      	blt.n	18c70 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   18c6c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   18c70:	4b05      	ldr	r3, [pc, #20]	; (18c88 <next_timeout+0x4c>)
   18c72:	695b      	ldr	r3, [r3, #20]
   18c74:	b113      	cbz	r3, 18c7c <next_timeout+0x40>
   18c76:	4298      	cmp	r0, r3
   18c78:	bfa8      	it	ge
   18c7a:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   18c7c:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   18c7e:	2000      	movs	r0, #0
   18c80:	e7f6      	b.n	18c70 <next_timeout+0x34>
   18c82:	bf00      	nop
   18c84:	20008558 	.word	0x20008558
   18c88:	2000adec 	.word	0x2000adec

00018c8c <remove_timeout>:
{
   18c8c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   18c8e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18c90:	b168      	cbz	r0, 18cae <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   18c92:	4a0a      	ldr	r2, [pc, #40]	; (18cbc <remove_timeout+0x30>)
   18c94:	6852      	ldr	r2, [r2, #4]
   18c96:	4290      	cmp	r0, r2
   18c98:	d009      	beq.n	18cae <remove_timeout+0x22>
	if (next(t) != NULL) {
   18c9a:	b143      	cbz	r3, 18cae <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   18c9c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   18ca0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   18ca4:	1912      	adds	r2, r2, r4
   18ca6:	eb41 0105 	adc.w	r1, r1, r5
   18caa:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   18cae:	6842      	ldr	r2, [r0, #4]
   18cb0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   18cb2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18cb4:	2300      	movs	r3, #0
	node->prev = NULL;
   18cb6:	e9c0 3300 	strd	r3, r3, [r0]
}
   18cba:	bd30      	pop	{r4, r5, pc}
   18cbc:	20008558 	.word	0x20008558

00018cc0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
   18cc4:	bf08      	it	eq
   18cc6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   18cca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18cce:	4604      	mov	r4, r0
   18cd0:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18cd2:	f000 808c 	beq.w	18dee <z_add_timeout+0x12e>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   18cd6:	f06f 0601 	mvn.w	r6, #1
   18cda:	f04f 39ff 	mov.w	r9, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   18cde:	1c55      	adds	r5, r2, #1
   18ce0:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   18ce4:	1b73      	subs	r3, r6, r5
   18ce6:	eb69 0307 	sbc.w	r3, r9, r7
   18cea:	2b00      	cmp	r3, #0
   18cec:	db0d      	blt.n	18d0a <z_add_timeout+0x4a>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   18cee:	f7ff ff9b 	bl	18c28 <elapsed>
   18cf2:	4b44      	ldr	r3, [pc, #272]	; (18e04 <z_add_timeout+0x144>)
   18cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   18cf8:	1ab6      	subs	r6, r6, r2
   18cfa:	eb69 0303 	sbc.w	r3, r9, r3
   18cfe:	1b75      	subs	r5, r6, r5
   18d00:	eb63 0707 	sbc.w	r7, r3, r7
   18d04:	1a2d      	subs	r5, r5, r0
   18d06:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   18d0a:	6823      	ldr	r3, [r4, #0]
   18d0c:	b143      	cbz	r3, 18d20 <z_add_timeout+0x60>
   18d0e:	493e      	ldr	r1, [pc, #248]	; (18e08 <z_add_timeout+0x148>)
   18d10:	483e      	ldr	r0, [pc, #248]	; (18e0c <z_add_timeout+0x14c>)
   18d12:	2268      	movs	r2, #104	; 0x68
   18d14:	f000 fe29 	bl	1996a <printk>
   18d18:	2168      	movs	r1, #104	; 0x68
   18d1a:	483b      	ldr	r0, [pc, #236]	; (18e08 <z_add_timeout+0x148>)
   18d1c:	f001 f8cb 	bl	19eb6 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   18d20:	2d01      	cmp	r5, #1
   18d22:	f177 0300 	sbcs.w	r3, r7, #0
   18d26:	bfbc      	itt	lt
   18d28:	2501      	movlt	r5, #1
   18d2a:	2700      	movlt	r7, #0
	to->fn = fn;
   18d2c:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   18d30:	f04f 0320 	mov.w	r3, #32
   18d34:	f3ef 8611 	mrs	r6, BASEPRI
   18d38:	f383 8811 	msr	BASEPRI, r3
   18d3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18d40:	4833      	ldr	r0, [pc, #204]	; (18e10 <z_add_timeout+0x150>)
   18d42:	f7ff fe29 	bl	18998 <z_spin_lock_valid>
   18d46:	b940      	cbnz	r0, 18d5a <z_add_timeout+0x9a>
   18d48:	4932      	ldr	r1, [pc, #200]	; (18e14 <z_add_timeout+0x154>)
   18d4a:	4830      	ldr	r0, [pc, #192]	; (18e0c <z_add_timeout+0x14c>)
   18d4c:	227c      	movs	r2, #124	; 0x7c
   18d4e:	f000 fe0c 	bl	1996a <printk>
   18d52:	217c      	movs	r1, #124	; 0x7c
   18d54:	482f      	ldr	r0, [pc, #188]	; (18e14 <z_add_timeout+0x154>)
   18d56:	f001 f8ae 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   18d5a:	482d      	ldr	r0, [pc, #180]	; (18e10 <z_add_timeout+0x150>)
   18d5c:	f7ff fe38 	bl	189d0 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   18d60:	f7ff ff62 	bl	18c28 <elapsed>
	return list->head == list;
   18d64:	4a2c      	ldr	r2, [pc, #176]	; (18e18 <z_add_timeout+0x158>)
   18d66:	1945      	adds	r5, r0, r5
   18d68:	6813      	ldr	r3, [r2, #0]
   18d6a:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18d6e:	4293      	cmp	r3, r2
   18d70:	e9c4 5704 	strd	r5, r7, [r4, #16]
   18d74:	d002      	beq.n	18d7c <z_add_timeout+0xbc>
	return (node == list->tail) ? NULL : node->next;
   18d76:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   18d7a:	b933      	cbnz	r3, 18d8a <z_add_timeout+0xca>
	node->prev = list->tail;
   18d7c:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   18d7e:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
   18d80:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18d82:	6853      	ldr	r3, [r2, #4]
   18d84:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18d86:	6054      	str	r4, [r2, #4]
}
   18d88:	e011      	b.n	18dae <z_add_timeout+0xee>
			if (t->dticks > to->dticks) {
   18d8a:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   18d8e:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   18d92:	4281      	cmp	r1, r0
   18d94:	eb75 0e07 	sbcs.w	lr, r5, r7
   18d98:	da2b      	bge.n	18df2 <z_add_timeout+0x132>
				t->dticks -= to->dticks;
   18d9a:	1a41      	subs	r1, r0, r1
   18d9c:	eb67 0505 	sbc.w	r5, r7, r5
   18da0:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   18da4:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   18da6:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   18daa:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   18dac:	605c      	str	r4, [r3, #4]
	return list->head == list;
   18dae:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18db0:	4293      	cmp	r3, r2
   18db2:	d00b      	beq.n	18dcc <z_add_timeout+0x10c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   18db4:	429c      	cmp	r4, r3
   18db6:	d109      	bne.n	18dcc <z_add_timeout+0x10c>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   18db8:	f7ff ff40 	bl	18c3c <next_timeout>

			if (next_time == 0 ||
   18dbc:	b118      	cbz	r0, 18dc6 <z_add_timeout+0x106>
			    _current_cpu->slice_ticks != next_time) {
   18dbe:	4b17      	ldr	r3, [pc, #92]	; (18e1c <z_add_timeout+0x15c>)
			if (next_time == 0 ||
   18dc0:	695b      	ldr	r3, [r3, #20]
   18dc2:	4283      	cmp	r3, r0
   18dc4:	d002      	beq.n	18dcc <z_add_timeout+0x10c>
				z_clock_set_timeout(next_time, false);
   18dc6:	2100      	movs	r1, #0
   18dc8:	f7f2 fef4 	bl	bbb4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18dcc:	4810      	ldr	r0, [pc, #64]	; (18e10 <z_add_timeout+0x150>)
   18dce:	f7ff fdf1 	bl	189b4 <z_spin_unlock_valid>
   18dd2:	b940      	cbnz	r0, 18de6 <z_add_timeout+0x126>
   18dd4:	490f      	ldr	r1, [pc, #60]	; (18e14 <z_add_timeout+0x154>)
   18dd6:	480d      	ldr	r0, [pc, #52]	; (18e0c <z_add_timeout+0x14c>)
   18dd8:	22a7      	movs	r2, #167	; 0xa7
   18dda:	f000 fdc6 	bl	1996a <printk>
   18dde:	21a7      	movs	r1, #167	; 0xa7
   18de0:	480c      	ldr	r0, [pc, #48]	; (18e14 <z_add_timeout+0x154>)
   18de2:	f001 f868 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   18de6:	f386 8811 	msr	BASEPRI, r6
   18dea:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   18dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   18df2:	1a09      	subs	r1, r1, r0
   18df4:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   18df8:	4563      	cmp	r3, ip
   18dfa:	e9c4 1504 	strd	r1, r5, [r4, #16]
   18dfe:	d0bd      	beq.n	18d7c <z_add_timeout+0xbc>
   18e00:	681b      	ldr	r3, [r3, #0]
   18e02:	e7ba      	b.n	18d7a <z_add_timeout+0xba>
   18e04:	2000a460 	.word	0x2000a460
   18e08:	00021734 	.word	0x00021734
   18e0c:	0001ea60 	.word	0x0001ea60
   18e10:	2000ae3c 	.word	0x2000ae3c
   18e14:	0001ea9a 	.word	0x0001ea9a
   18e18:	20008558 	.word	0x20008558
   18e1c:	2000adec 	.word	0x2000adec

00018e20 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   18e20:	b538      	push	{r3, r4, r5, lr}
   18e22:	4604      	mov	r4, r0
	__asm__ volatile(
   18e24:	f04f 0320 	mov.w	r3, #32
   18e28:	f3ef 8511 	mrs	r5, BASEPRI
   18e2c:	f383 8811 	msr	BASEPRI, r3
   18e30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e34:	4815      	ldr	r0, [pc, #84]	; (18e8c <z_abort_timeout+0x6c>)
   18e36:	f7ff fdaf 	bl	18998 <z_spin_lock_valid>
   18e3a:	b940      	cbnz	r0, 18e4e <z_abort_timeout+0x2e>
   18e3c:	4914      	ldr	r1, [pc, #80]	; (18e90 <z_abort_timeout+0x70>)
   18e3e:	4815      	ldr	r0, [pc, #84]	; (18e94 <z_abort_timeout+0x74>)
   18e40:	227c      	movs	r2, #124	; 0x7c
   18e42:	f000 fd92 	bl	1996a <printk>
   18e46:	217c      	movs	r1, #124	; 0x7c
   18e48:	4811      	ldr	r0, [pc, #68]	; (18e90 <z_abort_timeout+0x70>)
   18e4a:	f001 f834 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   18e4e:	480f      	ldr	r0, [pc, #60]	; (18e8c <z_abort_timeout+0x6c>)
   18e50:	f7ff fdbe 	bl	189d0 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   18e54:	6823      	ldr	r3, [r4, #0]
   18e56:	b1b3      	cbz	r3, 18e86 <z_abort_timeout+0x66>
			remove_timeout(to);
   18e58:	4620      	mov	r0, r4
   18e5a:	f7ff ff17 	bl	18c8c <remove_timeout>
			ret = 0;
   18e5e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18e60:	480a      	ldr	r0, [pc, #40]	; (18e8c <z_abort_timeout+0x6c>)
   18e62:	f7ff fda7 	bl	189b4 <z_spin_unlock_valid>
   18e66:	b940      	cbnz	r0, 18e7a <z_abort_timeout+0x5a>
   18e68:	4909      	ldr	r1, [pc, #36]	; (18e90 <z_abort_timeout+0x70>)
   18e6a:	480a      	ldr	r0, [pc, #40]	; (18e94 <z_abort_timeout+0x74>)
   18e6c:	22a7      	movs	r2, #167	; 0xa7
   18e6e:	f000 fd7c 	bl	1996a <printk>
   18e72:	21a7      	movs	r1, #167	; 0xa7
   18e74:	4806      	ldr	r0, [pc, #24]	; (18e90 <z_abort_timeout+0x70>)
   18e76:	f001 f81e 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   18e7a:	f385 8811 	msr	BASEPRI, r5
   18e7e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   18e82:	4620      	mov	r0, r4
   18e84:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   18e86:	f06f 0415 	mvn.w	r4, #21
   18e8a:	e7e9      	b.n	18e60 <z_abort_timeout+0x40>
   18e8c:	2000ae3c 	.word	0x2000ae3c
   18e90:	0001ea9a 	.word	0x0001ea9a
   18e94:	0001ea60 	.word	0x0001ea60

00018e98 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   18e98:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18e9a:	f04f 0320 	mov.w	r3, #32
   18e9e:	f3ef 8511 	mrs	r5, BASEPRI
   18ea2:	f383 8811 	msr	BASEPRI, r3
   18ea6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18eaa:	4813      	ldr	r0, [pc, #76]	; (18ef8 <z_get_next_timeout_expiry+0x60>)
   18eac:	f7ff fd74 	bl	18998 <z_spin_lock_valid>
   18eb0:	b940      	cbnz	r0, 18ec4 <z_get_next_timeout_expiry+0x2c>
   18eb2:	4912      	ldr	r1, [pc, #72]	; (18efc <z_get_next_timeout_expiry+0x64>)
   18eb4:	4812      	ldr	r0, [pc, #72]	; (18f00 <z_get_next_timeout_expiry+0x68>)
   18eb6:	227c      	movs	r2, #124	; 0x7c
   18eb8:	f000 fd57 	bl	1996a <printk>
   18ebc:	217c      	movs	r1, #124	; 0x7c
   18ebe:	480f      	ldr	r0, [pc, #60]	; (18efc <z_get_next_timeout_expiry+0x64>)
   18ec0:	f000 fff9 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   18ec4:	480c      	ldr	r0, [pc, #48]	; (18ef8 <z_get_next_timeout_expiry+0x60>)
   18ec6:	f7ff fd83 	bl	189d0 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   18eca:	f7ff feb7 	bl	18c3c <next_timeout>
   18ece:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ed0:	4809      	ldr	r0, [pc, #36]	; (18ef8 <z_get_next_timeout_expiry+0x60>)
   18ed2:	f7ff fd6f 	bl	189b4 <z_spin_unlock_valid>
   18ed6:	b940      	cbnz	r0, 18eea <z_get_next_timeout_expiry+0x52>
   18ed8:	4908      	ldr	r1, [pc, #32]	; (18efc <z_get_next_timeout_expiry+0x64>)
   18eda:	4809      	ldr	r0, [pc, #36]	; (18f00 <z_get_next_timeout_expiry+0x68>)
   18edc:	22a7      	movs	r2, #167	; 0xa7
   18ede:	f000 fd44 	bl	1996a <printk>
   18ee2:	21a7      	movs	r1, #167	; 0xa7
   18ee4:	4805      	ldr	r0, [pc, #20]	; (18efc <z_get_next_timeout_expiry+0x64>)
   18ee6:	f000 ffe6 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   18eea:	f385 8811 	msr	BASEPRI, r5
   18eee:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   18ef2:	4620      	mov	r0, r4
   18ef4:	bd38      	pop	{r3, r4, r5, pc}
   18ef6:	bf00      	nop
   18ef8:	2000ae3c 	.word	0x2000ae3c
   18efc:	0001ea9a 	.word	0x0001ea9a
   18f00:	0001ea60 	.word	0x0001ea60

00018f04 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   18f04:	b570      	push	{r4, r5, r6, lr}
   18f06:	4604      	mov	r4, r0
   18f08:	460d      	mov	r5, r1
	__asm__ volatile(
   18f0a:	f04f 0320 	mov.w	r3, #32
   18f0e:	f3ef 8611 	mrs	r6, BASEPRI
   18f12:	f383 8811 	msr	BASEPRI, r3
   18f16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f1a:	4816      	ldr	r0, [pc, #88]	; (18f74 <z_set_timeout_expiry+0x70>)
   18f1c:	f7ff fd3c 	bl	18998 <z_spin_lock_valid>
   18f20:	b940      	cbnz	r0, 18f34 <z_set_timeout_expiry+0x30>
   18f22:	4915      	ldr	r1, [pc, #84]	; (18f78 <z_set_timeout_expiry+0x74>)
   18f24:	4815      	ldr	r0, [pc, #84]	; (18f7c <z_set_timeout_expiry+0x78>)
   18f26:	227c      	movs	r2, #124	; 0x7c
   18f28:	f000 fd1f 	bl	1996a <printk>
   18f2c:	217c      	movs	r1, #124	; 0x7c
   18f2e:	4812      	ldr	r0, [pc, #72]	; (18f78 <z_set_timeout_expiry+0x74>)
   18f30:	f000 ffc1 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   18f34:	480f      	ldr	r0, [pc, #60]	; (18f74 <z_set_timeout_expiry+0x70>)
   18f36:	f7ff fd4b 	bl	189d0 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   18f3a:	f7ff fe7f 	bl	18c3c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   18f3e:	2801      	cmp	r0, #1
   18f40:	dd05      	ble.n	18f4e <z_set_timeout_expiry+0x4a>
   18f42:	42a0      	cmp	r0, r4
   18f44:	dd03      	ble.n	18f4e <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   18f46:	4629      	mov	r1, r5
   18f48:	4620      	mov	r0, r4
   18f4a:	f7f2 fe33 	bl	bbb4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18f4e:	4809      	ldr	r0, [pc, #36]	; (18f74 <z_set_timeout_expiry+0x70>)
   18f50:	f7ff fd30 	bl	189b4 <z_spin_unlock_valid>
   18f54:	b940      	cbnz	r0, 18f68 <z_set_timeout_expiry+0x64>
   18f56:	4908      	ldr	r1, [pc, #32]	; (18f78 <z_set_timeout_expiry+0x74>)
   18f58:	4808      	ldr	r0, [pc, #32]	; (18f7c <z_set_timeout_expiry+0x78>)
   18f5a:	22a7      	movs	r2, #167	; 0xa7
   18f5c:	f000 fd05 	bl	1996a <printk>
   18f60:	21a7      	movs	r1, #167	; 0xa7
   18f62:	4805      	ldr	r0, [pc, #20]	; (18f78 <z_set_timeout_expiry+0x74>)
   18f64:	f000 ffa7 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   18f68:	f386 8811 	msr	BASEPRI, r6
   18f6c:	f3bf 8f6f 	isb	sy
		}
	}
}
   18f70:	bd70      	pop	{r4, r5, r6, pc}
   18f72:	bf00      	nop
   18f74:	2000ae3c 	.word	0x2000ae3c
   18f78:	0001ea9a 	.word	0x0001ea9a
   18f7c:	0001ea60 	.word	0x0001ea60

00018f80 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   18f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18f84:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   18f86:	f7fe fe61 	bl	17c4c <z_time_slice>
	__asm__ volatile(
   18f8a:	f04f 0320 	mov.w	r3, #32
   18f8e:	f3ef 8511 	mrs	r5, BASEPRI
   18f92:	f383 8811 	msr	BASEPRI, r3
   18f96:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f9a:	4842      	ldr	r0, [pc, #264]	; (190a4 <z_clock_announce+0x124>)
   18f9c:	f7ff fcfc 	bl	18998 <z_spin_lock_valid>
   18fa0:	b940      	cbnz	r0, 18fb4 <z_clock_announce+0x34>
   18fa2:	4941      	ldr	r1, [pc, #260]	; (190a8 <z_clock_announce+0x128>)
   18fa4:	4841      	ldr	r0, [pc, #260]	; (190ac <z_clock_announce+0x12c>)
   18fa6:	227c      	movs	r2, #124	; 0x7c
   18fa8:	f000 fcdf 	bl	1996a <printk>
   18fac:	217c      	movs	r1, #124	; 0x7c
   18fae:	483e      	ldr	r0, [pc, #248]	; (190a8 <z_clock_announce+0x128>)
   18fb0:	f000 ff81 	bl	19eb6 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   18fb4:	4f3e      	ldr	r7, [pc, #248]	; (190b0 <z_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   18fb6:	483b      	ldr	r0, [pc, #236]	; (190a4 <z_clock_announce+0x124>)
	return list->head == list;
   18fb8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 190b4 <z_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   18fbc:	4e3e      	ldr	r6, [pc, #248]	; (190b8 <z_clock_announce+0x138>)
   18fbe:	f7ff fd07 	bl	189d0 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   18fc2:	603c      	str	r4, [r7, #0]
   18fc4:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   18fc8:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18fca:	4544      	cmp	r4, r8
   18fcc:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   18fd0:	e9d6 1e00 	ldrd	r1, lr, [r6]
   18fd4:	d00b      	beq.n	18fee <z_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   18fd6:	b154      	cbz	r4, 18fee <z_clock_announce+0x6e>
   18fd8:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   18fdc:	429a      	cmp	r2, r3
   18fde:	eb70 090c 	sbcs.w	r9, r0, ip
   18fe2:	da23      	bge.n	1902c <z_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   18fe4:	1a9b      	subs	r3, r3, r2
   18fe6:	eb6c 0c00 	sbc.w	ip, ip, r0
   18fea:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   18fee:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   18ff0:	1852      	adds	r2, r2, r1
   18ff2:	eb4e 0000 	adc.w	r0, lr, r0
   18ff6:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   18ffa:	603c      	str	r4, [r7, #0]

	z_clock_set_timeout(next_timeout(), false);
   18ffc:	f7ff fe1e 	bl	18c3c <next_timeout>
   19000:	4621      	mov	r1, r4
   19002:	f7f2 fdd7 	bl	bbb4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19006:	4827      	ldr	r0, [pc, #156]	; (190a4 <z_clock_announce+0x124>)
   19008:	f7ff fcd4 	bl	189b4 <z_spin_unlock_valid>
   1900c:	b940      	cbnz	r0, 19020 <z_clock_announce+0xa0>
   1900e:	4926      	ldr	r1, [pc, #152]	; (190a8 <z_clock_announce+0x128>)
   19010:	4826      	ldr	r0, [pc, #152]	; (190ac <z_clock_announce+0x12c>)
   19012:	22a7      	movs	r2, #167	; 0xa7
   19014:	f000 fca9 	bl	1996a <printk>
   19018:	21a7      	movs	r1, #167	; 0xa7
   1901a:	4823      	ldr	r0, [pc, #140]	; (190a8 <z_clock_announce+0x128>)
   1901c:	f000 ff4b 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   19020:	f385 8811 	msr	BASEPRI, r5
   19024:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   19028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1902c:	1859      	adds	r1, r3, r1
   1902e:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   19032:	1ad3      	subs	r3, r2, r3
   19034:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   19036:	2200      	movs	r2, #0
   19038:	2300      	movs	r3, #0
		curr_tick += dt;
   1903a:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   1903e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   19042:	4620      	mov	r0, r4
   19044:	f7ff fe22 	bl	18c8c <remove_timeout>
   19048:	4816      	ldr	r0, [pc, #88]	; (190a4 <z_clock_announce+0x124>)
   1904a:	f7ff fcb3 	bl	189b4 <z_spin_unlock_valid>
   1904e:	b940      	cbnz	r0, 19062 <z_clock_announce+0xe2>
   19050:	4915      	ldr	r1, [pc, #84]	; (190a8 <z_clock_announce+0x128>)
   19052:	4816      	ldr	r0, [pc, #88]	; (190ac <z_clock_announce+0x12c>)
   19054:	22a7      	movs	r2, #167	; 0xa7
   19056:	f000 fc88 	bl	1996a <printk>
   1905a:	21a7      	movs	r1, #167	; 0xa7
   1905c:	4812      	ldr	r0, [pc, #72]	; (190a8 <z_clock_announce+0x128>)
   1905e:	f000 ff2a 	bl	19eb6 <assert_post_action>
   19062:	f385 8811 	msr	BASEPRI, r5
   19066:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1906a:	4620      	mov	r0, r4
   1906c:	68a3      	ldr	r3, [r4, #8]
   1906e:	4798      	blx	r3
	__asm__ volatile(
   19070:	f04f 0320 	mov.w	r3, #32
   19074:	f3ef 8511 	mrs	r5, BASEPRI
   19078:	f383 8811 	msr	BASEPRI, r3
   1907c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19080:	4808      	ldr	r0, [pc, #32]	; (190a4 <z_clock_announce+0x124>)
   19082:	f7ff fc89 	bl	18998 <z_spin_lock_valid>
   19086:	b940      	cbnz	r0, 1909a <z_clock_announce+0x11a>
   19088:	4907      	ldr	r1, [pc, #28]	; (190a8 <z_clock_announce+0x128>)
   1908a:	4808      	ldr	r0, [pc, #32]	; (190ac <z_clock_announce+0x12c>)
   1908c:	227c      	movs	r2, #124	; 0x7c
   1908e:	f000 fc6c 	bl	1996a <printk>
   19092:	217c      	movs	r1, #124	; 0x7c
   19094:	4804      	ldr	r0, [pc, #16]	; (190a8 <z_clock_announce+0x128>)
   19096:	f000 ff0e 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   1909a:	4802      	ldr	r0, [pc, #8]	; (190a4 <z_clock_announce+0x124>)
   1909c:	f7ff fc98 	bl	189d0 <z_spin_lock_set_owner>
	return k;
   190a0:	e790      	b.n	18fc4 <z_clock_announce+0x44>
   190a2:	bf00      	nop
   190a4:	2000ae3c 	.word	0x2000ae3c
   190a8:	0001ea9a 	.word	0x0001ea9a
   190ac:	0001ea60 	.word	0x0001ea60
   190b0:	2000ae38 	.word	0x2000ae38
   190b4:	20008558 	.word	0x20008558
   190b8:	2000a460 	.word	0x2000a460

000190bc <z_tick_get>:

int64_t z_tick_get(void)
{
   190bc:	b570      	push	{r4, r5, r6, lr}
   190be:	f04f 0320 	mov.w	r3, #32
   190c2:	f3ef 8611 	mrs	r6, BASEPRI
   190c6:	f383 8811 	msr	BASEPRI, r3
   190ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   190ce:	4816      	ldr	r0, [pc, #88]	; (19128 <z_tick_get+0x6c>)
   190d0:	f7ff fc62 	bl	18998 <z_spin_lock_valid>
   190d4:	b940      	cbnz	r0, 190e8 <z_tick_get+0x2c>
   190d6:	4915      	ldr	r1, [pc, #84]	; (1912c <z_tick_get+0x70>)
   190d8:	4815      	ldr	r0, [pc, #84]	; (19130 <z_tick_get+0x74>)
   190da:	227c      	movs	r2, #124	; 0x7c
   190dc:	f000 fc45 	bl	1996a <printk>
   190e0:	217c      	movs	r1, #124	; 0x7c
   190e2:	4812      	ldr	r0, [pc, #72]	; (1912c <z_tick_get+0x70>)
   190e4:	f000 fee7 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   190e8:	480f      	ldr	r0, [pc, #60]	; (19128 <z_tick_get+0x6c>)
   190ea:	f7ff fc71 	bl	189d0 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   190ee:	f7f2 fd93 	bl	bc18 <z_clock_elapsed>
   190f2:	4b10      	ldr	r3, [pc, #64]	; (19134 <z_tick_get+0x78>)
   190f4:	e9d3 4500 	ldrd	r4, r5, [r3]
   190f8:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   190fa:	480b      	ldr	r0, [pc, #44]	; (19128 <z_tick_get+0x6c>)
   190fc:	f145 0500 	adc.w	r5, r5, #0
   19100:	f7ff fc58 	bl	189b4 <z_spin_unlock_valid>
   19104:	b940      	cbnz	r0, 19118 <z_tick_get+0x5c>
   19106:	4909      	ldr	r1, [pc, #36]	; (1912c <z_tick_get+0x70>)
   19108:	4809      	ldr	r0, [pc, #36]	; (19130 <z_tick_get+0x74>)
   1910a:	22a7      	movs	r2, #167	; 0xa7
   1910c:	f000 fc2d 	bl	1996a <printk>
   19110:	21a7      	movs	r1, #167	; 0xa7
   19112:	4806      	ldr	r0, [pc, #24]	; (1912c <z_tick_get+0x70>)
   19114:	f000 fecf 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   19118:	f386 8811 	msr	BASEPRI, r6
   1911c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   19120:	4620      	mov	r0, r4
   19122:	4629      	mov	r1, r5
   19124:	bd70      	pop	{r4, r5, r6, pc}
   19126:	bf00      	nop
   19128:	2000ae3c 	.word	0x2000ae3c
   1912c:	0001ea9a 	.word	0x0001ea9a
   19130:	0001ea60 	.word	0x0001ea60
   19134:	2000a460 	.word	0x2000a460

00019138 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   19138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1913c:	6884      	ldr	r4, [r0, #8]
{
   1913e:	4605      	mov	r5, r0
   19140:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   19142:	b1b4      	cbz	r4, 19172 <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   19144:	7863      	ldrb	r3, [r4, #1]
   19146:	2b01      	cmp	r3, #1
   19148:	d145      	bne.n	191d6 <signal_poll_event+0x9e>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   1914a:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   1914e:	d10a      	bne.n	19166 <signal_poll_event+0x2e>
   19150:	22e3      	movs	r2, #227	; 0xe3
   19152:	492d      	ldr	r1, [pc, #180]	; (19208 <signal_poll_event+0xd0>)
   19154:	482d      	ldr	r0, [pc, #180]	; (1920c <signal_poll_event+0xd4>)
   19156:	f000 fc08 	bl	1996a <printk>
   1915a:	21e3      	movs	r1, #227	; 0xe3
   1915c:	482a      	ldr	r0, [pc, #168]	; (19208 <signal_poll_event+0xd0>)
   1915e:	f000 feaa 	bl	19eb6 <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   19162:	7b7b      	ldrb	r3, [r7, #13]
   19164:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
   19166:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1916a:	f013 0302 	ands.w	r3, r3, #2
   1916e:	d10a      	bne.n	19186 <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   19170:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   19172:	2000      	movs	r0, #0
	event->state |= state;
   19174:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   19176:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   19178:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1917c:	430e      	orrs	r6, r1
   1917e:	f366 3310 	bfi	r3, r6, #12, #5
   19182:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   19184:	e00b      	b.n	1919e <signal_poll_event+0x66>
	if (z_is_thread_timeout_expired(thread)) {
   19186:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   1918a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1918e:	bf08      	it	eq
   19190:	f112 0f02 	cmneq.w	r2, #2
   19194:	d105      	bne.n	191a2 <signal_poll_event+0x6a>
		poller->is_polling = false;
   19196:	2300      	movs	r3, #0
		return -EAGAIN;
   19198:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1919c:	7023      	strb	r3, [r4, #0]
}
   1919e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   191a2:	4638      	mov	r0, r7
   191a4:	f7fe fb30 	bl	17808 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   191a8:	2e08      	cmp	r6, #8
   191aa:	bf0c      	ite	eq
   191ac:	f06f 0303 	mvneq.w	r3, #3
   191b0:	2300      	movne	r3, #0
   191b2:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   191b4:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   191b8:	06db      	lsls	r3, r3, #27
   191ba:	d104      	bne.n	191c6 <signal_poll_event+0x8e>
	if (!z_is_thread_ready(thread)) {
   191bc:	f854 8c54 	ldr.w	r8, [r4, #-84]
   191c0:	f1b8 0f00 	cmp.w	r8, #0
   191c4:	d001      	beq.n	191ca <signal_poll_event+0x92>
		poller->is_polling = false;
   191c6:	2300      	movs	r3, #0
   191c8:	e7d2      	b.n	19170 <signal_poll_event+0x38>
	z_ready_thread(thread);
   191ca:	4638      	mov	r0, r7
   191cc:	f7fe fc36 	bl	17a3c <z_ready_thread>
		poller->is_polling = false;
   191d0:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   191d4:	e7cd      	b.n	19172 <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   191d6:	2b02      	cmp	r3, #2
   191d8:	d1f5      	bne.n	191c6 <signal_poll_event+0x8e>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   191da:	7823      	ldrb	r3, [r4, #0]
   191dc:	2b00      	cmp	r3, #0
   191de:	d0c8      	beq.n	19172 <signal_poll_event+0x3a>
   191e0:	f854 7c04 	ldr.w	r7, [r4, #-4]
   191e4:	b177      	cbz	r7, 19204 <signal_poll_event+0xcc>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   191e6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   191ea:	f1a4 0910 	sub.w	r9, r4, #16
   191ee:	f104 0010 	add.w	r0, r4, #16
   191f2:	f7ff fe15 	bl	18e20 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   191f6:	4649      	mov	r1, r9
   191f8:	4638      	mov	r0, r7
		twork->poll_result = 0;
   191fa:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   191fe:	f004 f832 	bl	1d266 <k_work_submit_to_queue>
   19202:	e7e5      	b.n	191d0 <signal_poll_event+0x98>
		poller->is_polling = false;
   19204:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   19206:	e7b4      	b.n	19172 <signal_poll_event+0x3a>
   19208:	00021758 	.word	0x00021758
   1920c:	0001ea60 	.word	0x0001ea60

00019210 <register_events>:
{
   19210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   19214:	2600      	movs	r6, #0
{
   19216:	4614      	mov	r4, r2
   19218:	4681      	mov	r9, r0
	int events_registered = 0;
   1921a:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1921c:	f8df a188 	ldr.w	sl, [pc, #392]	; 193a8 <register_events+0x198>
   19220:	4f62      	ldr	r7, [pc, #392]	; (193ac <register_events+0x19c>)
   19222:	4d63      	ldr	r5, [pc, #396]	; (193b0 <register_events+0x1a0>)
{
   19224:	9100      	str	r1, [sp, #0]
   19226:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   19228:	9b00      	ldr	r3, [sp, #0]
   1922a:	429e      	cmp	r6, r3
   1922c:	db03      	blt.n	19236 <register_events+0x26>
}
   1922e:	4640      	mov	r0, r8
   19230:	b003      	add	sp, #12
   19232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   19236:	f04f 0220 	mov.w	r2, #32
   1923a:	f3ef 8b11 	mrs	fp, BASEPRI
   1923e:	f382 8811 	msr	BASEPRI, r2
   19242:	f3bf 8f6f 	isb	sy
   19246:	4650      	mov	r0, sl
   19248:	f7ff fba6 	bl	18998 <z_spin_lock_valid>
   1924c:	b940      	cbnz	r0, 19260 <register_events+0x50>
   1924e:	4639      	mov	r1, r7
   19250:	4628      	mov	r0, r5
   19252:	227c      	movs	r2, #124	; 0x7c
   19254:	f000 fb89 	bl	1996a <printk>
   19258:	217c      	movs	r1, #124	; 0x7c
   1925a:	4638      	mov	r0, r7
   1925c:	f000 fe2b 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   19260:	4650      	mov	r0, sl
   19262:	f7ff fbb5 	bl	189d0 <z_spin_lock_set_owner>
	switch (event->type) {
   19266:	f899 200d 	ldrb.w	r2, [r9, #13]
   1926a:	f002 020f 	and.w	r2, r2, #15
   1926e:	2a04      	cmp	r2, #4
   19270:	d848      	bhi.n	19304 <register_events+0xf4>
   19272:	e8df f002 	tbb	[pc, r2]
   19276:	402f      	.short	0x402f
   19278:	4703      	.short	0x4703
   1927a:	2b          	.byte	0x2b
   1927b:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1927c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19280:	6892      	ldr	r2, [r2, #8]
   19282:	b33a      	cbz	r2, 192d4 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   19284:	2102      	movs	r1, #2
	event->poller = NULL;
   19286:	2000      	movs	r0, #0
	event->state |= state;
   19288:	f8d9 200c 	ldr.w	r2, [r9, #12]
	event->poller = NULL;
   1928c:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   19290:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   19294:	ea41 010c 	orr.w	r1, r1, ip
   19298:	f361 3210 	bfi	r2, r1, #12, #5
   1929c:	f8c9 200c 	str.w	r2, [r9, #12]
			poller->is_polling = false;
   192a0:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   192a2:	4650      	mov	r0, sl
   192a4:	f7ff fb86 	bl	189b4 <z_spin_unlock_valid>
   192a8:	b940      	cbnz	r0, 192bc <register_events+0xac>
   192aa:	4639      	mov	r1, r7
   192ac:	4628      	mov	r0, r5
   192ae:	22a7      	movs	r2, #167	; 0xa7
   192b0:	f000 fb5b 	bl	1996a <printk>
   192b4:	21a7      	movs	r1, #167	; 0xa7
   192b6:	4638      	mov	r0, r7
   192b8:	f000 fdfd 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   192bc:	f38b 8811 	msr	BASEPRI, fp
   192c0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   192c4:	3601      	adds	r6, #1
   192c6:	f109 0914 	add.w	r9, r9, #20
   192ca:	e7ad      	b.n	19228 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   192cc:	f8d9 2010 	ldr.w	r2, [r9, #16]
   192d0:	6812      	ldr	r2, [r2, #0]
   192d2:	bb0a      	cbnz	r2, 19318 <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   192d4:	9b01      	ldr	r3, [sp, #4]
   192d6:	2b00      	cmp	r3, #0
   192d8:	d1e3      	bne.n	192a2 <register_events+0x92>
   192da:	7822      	ldrb	r2, [r4, #0]
   192dc:	2a00      	cmp	r2, #0
   192de:	d0e0      	beq.n	192a2 <register_events+0x92>
	switch (event->type) {
   192e0:	f899 200d 	ldrb.w	r2, [r9, #13]
   192e4:	f002 020f 	and.w	r2, r2, #15
   192e8:	2a04      	cmp	r2, #4
   192ea:	d852      	bhi.n	19392 <register_events+0x182>
   192ec:	e8df f002 	tbb	[pc, r2]
   192f0:	51164029 	.word	0x51164029
   192f4:	2e          	.byte	0x2e
   192f5:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   192f6:	f8d9 2010 	ldr.w	r2, [r9, #16]
   192fa:	6892      	ldr	r2, [r2, #8]
   192fc:	2a00      	cmp	r2, #0
   192fe:	d0e9      	beq.n	192d4 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   19300:	2101      	movs	r1, #1
   19302:	e7c0      	b.n	19286 <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   19304:	4628      	mov	r0, r5
   19306:	2254      	movs	r2, #84	; 0x54
   19308:	492a      	ldr	r1, [pc, #168]	; (193b4 <register_events+0x1a4>)
   1930a:	f000 fb2e 	bl	1996a <printk>
   1930e:	2154      	movs	r1, #84	; 0x54
   19310:	4828      	ldr	r0, [pc, #160]	; (193b4 <register_events+0x1a4>)
   19312:	f000 fdd0 	bl	19eb6 <assert_post_action>
		break;
   19316:	e7dd      	b.n	192d4 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   19318:	2104      	movs	r1, #4
   1931a:	e7b4      	b.n	19286 <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1931c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19320:	b942      	cbnz	r2, 19334 <register_events+0x124>
   19322:	4628      	mov	r0, r5
   19324:	4923      	ldr	r1, [pc, #140]	; (193b4 <register_events+0x1a4>)
   19326:	227e      	movs	r2, #126	; 0x7e
   19328:	f000 fb1f 	bl	1996a <printk>
   1932c:	217e      	movs	r1, #126	; 0x7e
   1932e:	4821      	ldr	r0, [pc, #132]	; (193b4 <register_events+0x1a4>)
   19330:	f000 fdc1 	bl	19eb6 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   19334:	4622      	mov	r2, r4
   19336:	4649      	mov	r1, r9
   19338:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1933c:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   1933e:	f003 ffa6 	bl	1d28e <add_event>
	event->poller = poller;
   19342:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   19346:	f108 0801 	add.w	r8, r8, #1
   1934a:	e7aa      	b.n	192a2 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1934c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19350:	b942      	cbnz	r2, 19364 <register_events+0x154>
   19352:	4628      	mov	r0, r5
   19354:	4917      	ldr	r1, [pc, #92]	; (193b4 <register_events+0x1a4>)
   19356:	2282      	movs	r2, #130	; 0x82
   19358:	f000 fb07 	bl	1996a <printk>
   1935c:	2182      	movs	r1, #130	; 0x82
   1935e:	4815      	ldr	r0, [pc, #84]	; (193b4 <register_events+0x1a4>)
   19360:	f000 fda9 	bl	19eb6 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   19364:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19368:	4622      	mov	r2, r4
   1936a:	4649      	mov	r1, r9
   1936c:	3014      	adds	r0, #20
   1936e:	e7e6      	b.n	1933e <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   19370:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19374:	b942      	cbnz	r2, 19388 <register_events+0x178>
   19376:	4628      	mov	r0, r5
   19378:	490e      	ldr	r1, [pc, #56]	; (193b4 <register_events+0x1a4>)
   1937a:	2286      	movs	r2, #134	; 0x86
   1937c:	f000 faf5 	bl	1996a <printk>
   19380:	2186      	movs	r1, #134	; 0x86
   19382:	480c      	ldr	r0, [pc, #48]	; (193b4 <register_events+0x1a4>)
   19384:	f000 fd97 	bl	19eb6 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   19388:	4622      	mov	r2, r4
   1938a:	4649      	mov	r1, r9
   1938c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19390:	e7d5      	b.n	1933e <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   19392:	4628      	mov	r0, r5
   19394:	228d      	movs	r2, #141	; 0x8d
   19396:	4907      	ldr	r1, [pc, #28]	; (193b4 <register_events+0x1a4>)
   19398:	f000 fae7 	bl	1996a <printk>
   1939c:	218d      	movs	r1, #141	; 0x8d
   1939e:	4805      	ldr	r0, [pc, #20]	; (193b4 <register_events+0x1a4>)
   193a0:	f000 fd89 	bl	19eb6 <assert_post_action>
		break;
   193a4:	e7cd      	b.n	19342 <register_events+0x132>
   193a6:	bf00      	nop
   193a8:	2000ae40 	.word	0x2000ae40
   193ac:	0001ea9a 	.word	0x0001ea9a
   193b0:	0001ea60 	.word	0x0001ea60
   193b4:	00021758 	.word	0x00021758

000193b8 <clear_event_registrations>:
{
   193b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   193bc:	2414      	movs	r4, #20
   193be:	4617      	mov	r7, r2
	while (num_events--) {
   193c0:	460e      	mov	r6, r1
   193c2:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   193c6:	4d3d      	ldr	r5, [pc, #244]	; (194bc <clear_event_registrations+0x104>)
   193c8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 194c0 <clear_event_registrations+0x108>
   193cc:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 194c4 <clear_event_registrations+0x10c>
	while (num_events--) {
   193d0:	b90e      	cbnz	r6, 193d6 <clear_event_registrations+0x1e>
}
   193d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   193d6:	2300      	movs	r3, #0
   193d8:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   193dc:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   193e0:	f1a4 0a14 	sub.w	sl, r4, #20
   193e4:	f003 030f 	and.w	r3, r3, #15
   193e8:	2b04      	cmp	r3, #4
   193ea:	d831      	bhi.n	19450 <clear_event_registrations+0x98>
   193ec:	e8df f003 	tbb	[pc, r3]
   193f0:	30032539 	.word	0x30032539
   193f4:	1a          	.byte	0x1a
   193f5:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   193f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   193fa:	b943      	cbnz	r3, 1940e <clear_event_registrations+0x56>
   193fc:	4629      	mov	r1, r5
   193fe:	229d      	movs	r2, #157	; 0x9d
   19400:	4640      	mov	r0, r8
   19402:	f000 fab2 	bl	1996a <printk>
   19406:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   19408:	4628      	mov	r0, r5
   1940a:	f000 fd54 	bl	19eb6 <assert_post_action>
	return node->next != NULL;
   1940e:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   19412:	b333      	cbz	r3, 19462 <clear_event_registrations+0xaa>
	node->prev->next = node->next;
   19414:	f854 2c10 	ldr.w	r2, [r4, #-16]
   19418:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1941a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1941c:	2300      	movs	r3, #0
	node->prev = NULL;
   1941e:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   19422:	e01e      	b.n	19462 <clear_event_registrations+0xaa>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   19424:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19428:	2b00      	cmp	r3, #0
   1942a:	d1f0      	bne.n	1940e <clear_event_registrations+0x56>
   1942c:	4629      	mov	r1, r5
   1942e:	22a1      	movs	r2, #161	; 0xa1
   19430:	4640      	mov	r0, r8
   19432:	f000 fa9a 	bl	1996a <printk>
   19436:	21a1      	movs	r1, #161	; 0xa1
   19438:	e7e6      	b.n	19408 <clear_event_registrations+0x50>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1943a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1943e:	2b00      	cmp	r3, #0
   19440:	d1e5      	bne.n	1940e <clear_event_registrations+0x56>
   19442:	4629      	mov	r1, r5
   19444:	22a5      	movs	r2, #165	; 0xa5
   19446:	4640      	mov	r0, r8
   19448:	f000 fa8f 	bl	1996a <printk>
   1944c:	21a5      	movs	r1, #165	; 0xa5
   1944e:	e7db      	b.n	19408 <clear_event_registrations+0x50>
		__ASSERT(false, "invalid event type\n");
   19450:	4629      	mov	r1, r5
   19452:	4640      	mov	r0, r8
   19454:	22ac      	movs	r2, #172	; 0xac
   19456:	f000 fa88 	bl	1996a <printk>
   1945a:	21ac      	movs	r1, #172	; 0xac
   1945c:	4628      	mov	r0, r5
   1945e:	f000 fd2a 	bl	19eb6 <assert_post_action>
   19462:	4648      	mov	r0, r9
   19464:	f7ff faa6 	bl	189b4 <z_spin_unlock_valid>
   19468:	b940      	cbnz	r0, 1947c <clear_event_registrations+0xc4>
   1946a:	4640      	mov	r0, r8
   1946c:	4916      	ldr	r1, [pc, #88]	; (194c8 <clear_event_registrations+0x110>)
   1946e:	22a7      	movs	r2, #167	; 0xa7
   19470:	f000 fa7b 	bl	1996a <printk>
   19474:	21a7      	movs	r1, #167	; 0xa7
   19476:	4814      	ldr	r0, [pc, #80]	; (194c8 <clear_event_registrations+0x110>)
   19478:	f000 fd1d 	bl	19eb6 <assert_post_action>
   1947c:	f387 8811 	msr	BASEPRI, r7
   19480:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   19484:	f04f 0320 	mov.w	r3, #32
   19488:	f3ef 8711 	mrs	r7, BASEPRI
   1948c:	f383 8811 	msr	BASEPRI, r3
   19490:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19494:	4648      	mov	r0, r9
   19496:	f7ff fa7f 	bl	18998 <z_spin_lock_valid>
   1949a:	b940      	cbnz	r0, 194ae <clear_event_registrations+0xf6>
   1949c:	4640      	mov	r0, r8
   1949e:	490a      	ldr	r1, [pc, #40]	; (194c8 <clear_event_registrations+0x110>)
   194a0:	227c      	movs	r2, #124	; 0x7c
   194a2:	f000 fa62 	bl	1996a <printk>
   194a6:	217c      	movs	r1, #124	; 0x7c
   194a8:	4807      	ldr	r0, [pc, #28]	; (194c8 <clear_event_registrations+0x110>)
   194aa:	f000 fd04 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   194ae:	4648      	mov	r0, r9
   194b0:	f7ff fa8e 	bl	189d0 <z_spin_lock_set_owner>
	return k;
   194b4:	4654      	mov	r4, sl
   194b6:	3e01      	subs	r6, #1
   194b8:	e78a      	b.n	193d0 <clear_event_registrations+0x18>
   194ba:	bf00      	nop
   194bc:	00021758 	.word	0x00021758
   194c0:	0001ea60 	.word	0x0001ea60
   194c4:	2000ae40 	.word	0x2000ae40
   194c8:	0001ea9a 	.word	0x0001ea9a

000194cc <k_poll_event_init>:
{
   194cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   194ce:	4605      	mov	r5, r0
   194d0:	460f      	mov	r7, r1
   194d2:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   194d4:	4614      	mov	r4, r2
   194d6:	b142      	cbz	r2, 194ea <k_poll_event_init+0x1e>
   194d8:	4915      	ldr	r1, [pc, #84]	; (19530 <k_poll_event_init+0x64>)
   194da:	4816      	ldr	r0, [pc, #88]	; (19534 <k_poll_event_init+0x68>)
   194dc:	222d      	movs	r2, #45	; 0x2d
   194de:	f000 fa44 	bl	1996a <printk>
   194e2:	212d      	movs	r1, #45	; 0x2d
   194e4:	4812      	ldr	r0, [pc, #72]	; (19530 <k_poll_event_init+0x64>)
   194e6:	f000 fce6 	bl	19eb6 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   194ea:	2f0f      	cmp	r7, #15
   194ec:	d908      	bls.n	19500 <k_poll_event_init+0x34>
   194ee:	4910      	ldr	r1, [pc, #64]	; (19530 <k_poll_event_init+0x64>)
   194f0:	4810      	ldr	r0, [pc, #64]	; (19534 <k_poll_event_init+0x68>)
   194f2:	222f      	movs	r2, #47	; 0x2f
   194f4:	f000 fa39 	bl	1996a <printk>
   194f8:	212f      	movs	r1, #47	; 0x2f
   194fa:	480d      	ldr	r0, [pc, #52]	; (19530 <k_poll_event_init+0x64>)
   194fc:	f000 fcdb 	bl	19eb6 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   19500:	b946      	cbnz	r6, 19514 <k_poll_event_init+0x48>
   19502:	490b      	ldr	r1, [pc, #44]	; (19530 <k_poll_event_init+0x64>)
   19504:	480b      	ldr	r0, [pc, #44]	; (19534 <k_poll_event_init+0x68>)
   19506:	2230      	movs	r2, #48	; 0x30
   19508:	f000 fa2f 	bl	1996a <printk>
   1950c:	2130      	movs	r1, #48	; 0x30
   1950e:	4808      	ldr	r0, [pc, #32]	; (19530 <k_poll_event_init+0x64>)
   19510:	f000 fcd1 	bl	19eb6 <assert_post_action>
	event->poller = NULL;
   19514:	2300      	movs	r3, #0
	event->type = type;
   19516:	0464      	lsls	r4, r4, #17
   19518:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   1951a:	60ab      	str	r3, [r5, #8]
	event->type = type;
   1951c:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   19520:	7b2b      	ldrb	r3, [r5, #12]
   19522:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   19526:	433c      	orrs	r4, r7
   19528:	431c      	orrs	r4, r3
	event->obj = obj;
   1952a:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   1952e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19530:	00021758 	.word	0x00021758
   19534:	0001ea60 	.word	0x0001ea60

00019538 <z_impl_k_poll>:
{
   19538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1953c:	461d      	mov	r5, r3
	struct z_poller *poller = &_current->poller;
   1953e:	4b64      	ldr	r3, [pc, #400]	; (196d0 <z_impl_k_poll+0x198>)
{
   19540:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   19542:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
   19544:	2301      	movs	r3, #1
{
   19546:	4688      	mov	r8, r1
   19548:	4616      	mov	r6, r2
   1954a:	b085      	sub	sp, #20
	struct z_poller *poller = &_current->poller;
   1954c:	f107 096c 	add.w	r9, r7, #108	; 0x6c
	poller->is_polling = true;
   19550:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	poller->mode = MODE_POLL;
   19554:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   19558:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1955c:	b153      	cbz	r3, 19574 <z_impl_k_poll+0x3c>
   1955e:	495d      	ldr	r1, [pc, #372]	; (196d4 <z_impl_k_poll+0x19c>)
   19560:	485d      	ldr	r0, [pc, #372]	; (196d8 <z_impl_k_poll+0x1a0>)
   19562:	f44f 7282 	mov.w	r2, #260	; 0x104
   19566:	f000 fa00 	bl	1996a <printk>
   1956a:	f44f 7182 	mov.w	r1, #260	; 0x104
   1956e:	4859      	ldr	r0, [pc, #356]	; (196d4 <z_impl_k_poll+0x19c>)
   19570:	f000 fca1 	bl	19eb6 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   19574:	b954      	cbnz	r4, 1958c <z_impl_k_poll+0x54>
   19576:	4957      	ldr	r1, [pc, #348]	; (196d4 <z_impl_k_poll+0x19c>)
   19578:	4857      	ldr	r0, [pc, #348]	; (196d8 <z_impl_k_poll+0x1a0>)
   1957a:	f240 1205 	movw	r2, #261	; 0x105
   1957e:	f000 f9f4 	bl	1996a <printk>
   19582:	f240 1105 	movw	r1, #261	; 0x105
   19586:	4853      	ldr	r0, [pc, #332]	; (196d4 <z_impl_k_poll+0x19c>)
   19588:	f000 fc95 	bl	19eb6 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1958c:	f1b8 0f00 	cmp.w	r8, #0
   19590:	da0a      	bge.n	195a8 <z_impl_k_poll+0x70>
   19592:	4950      	ldr	r1, [pc, #320]	; (196d4 <z_impl_k_poll+0x19c>)
   19594:	4850      	ldr	r0, [pc, #320]	; (196d8 <z_impl_k_poll+0x1a0>)
   19596:	f44f 7283 	mov.w	r2, #262	; 0x106
   1959a:	f000 f9e6 	bl	1996a <printk>
   1959e:	f44f 7183 	mov.w	r1, #262	; 0x106
   195a2:	484c      	ldr	r0, [pc, #304]	; (196d4 <z_impl_k_poll+0x19c>)
   195a4:	f000 fc87 	bl	19eb6 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   195a8:	ea56 0305 	orrs.w	r3, r6, r5
   195ac:	bf0c      	ite	eq
   195ae:	2301      	moveq	r3, #1
   195b0:	2300      	movne	r3, #0
   195b2:	4641      	mov	r1, r8
   195b4:	464a      	mov	r2, r9
   195b6:	4620      	mov	r0, r4
   195b8:	f7ff fe2a 	bl	19210 <register_events>
   195bc:	4680      	mov	r8, r0
   195be:	f04f 0320 	mov.w	r3, #32
   195c2:	f3ef 8911 	mrs	r9, BASEPRI
   195c6:	f383 8811 	msr	BASEPRI, r3
   195ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   195ce:	4843      	ldr	r0, [pc, #268]	; (196dc <z_impl_k_poll+0x1a4>)
   195d0:	f7ff f9e2 	bl	18998 <z_spin_lock_valid>
   195d4:	b940      	cbnz	r0, 195e8 <z_impl_k_poll+0xb0>
   195d6:	4942      	ldr	r1, [pc, #264]	; (196e0 <z_impl_k_poll+0x1a8>)
   195d8:	483f      	ldr	r0, [pc, #252]	; (196d8 <z_impl_k_poll+0x1a0>)
   195da:	227c      	movs	r2, #124	; 0x7c
   195dc:	f000 f9c5 	bl	1996a <printk>
   195e0:	217c      	movs	r1, #124	; 0x7c
   195e2:	483f      	ldr	r0, [pc, #252]	; (196e0 <z_impl_k_poll+0x1a8>)
   195e4:	f000 fc67 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   195e8:	483c      	ldr	r0, [pc, #240]	; (196dc <z_impl_k_poll+0x1a4>)
   195ea:	f7ff f9f1 	bl	189d0 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   195ee:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   195f2:	b9d3      	cbnz	r3, 1962a <z_impl_k_poll+0xf2>
		clear_event_registrations(events, events_registered, key);
   195f4:	4620      	mov	r0, r4
   195f6:	464a      	mov	r2, r9
   195f8:	4641      	mov	r1, r8
   195fa:	f7ff fedd 	bl	193b8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   195fe:	4837      	ldr	r0, [pc, #220]	; (196dc <z_impl_k_poll+0x1a4>)
   19600:	f7ff f9d8 	bl	189b4 <z_spin_unlock_valid>
   19604:	b940      	cbnz	r0, 19618 <z_impl_k_poll+0xe0>
   19606:	4936      	ldr	r1, [pc, #216]	; (196e0 <z_impl_k_poll+0x1a8>)
   19608:	4833      	ldr	r0, [pc, #204]	; (196d8 <z_impl_k_poll+0x1a0>)
   1960a:	22a7      	movs	r2, #167	; 0xa7
   1960c:	f000 f9ad 	bl	1996a <printk>
   19610:	21a7      	movs	r1, #167	; 0xa7
   19612:	4833      	ldr	r0, [pc, #204]	; (196e0 <z_impl_k_poll+0x1a8>)
   19614:	f000 fc4f 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   19618:	f389 8811 	msr	BASEPRI, r9
   1961c:	f3bf 8f6f 	isb	sy
		return 0;
   19620:	2500      	movs	r5, #0
}
   19622:	4628      	mov	r0, r5
   19624:	b005      	add	sp, #20
   19626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   1962a:	2300      	movs	r3, #0
   1962c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19630:	ea56 0305 	orrs.w	r3, r6, r5
   19634:	d113      	bne.n	1965e <z_impl_k_poll+0x126>
   19636:	4829      	ldr	r0, [pc, #164]	; (196dc <z_impl_k_poll+0x1a4>)
   19638:	f7ff f9bc 	bl	189b4 <z_spin_unlock_valid>
   1963c:	b940      	cbnz	r0, 19650 <z_impl_k_poll+0x118>
   1963e:	4928      	ldr	r1, [pc, #160]	; (196e0 <z_impl_k_poll+0x1a8>)
   19640:	4825      	ldr	r0, [pc, #148]	; (196d8 <z_impl_k_poll+0x1a0>)
   19642:	22a7      	movs	r2, #167	; 0xa7
   19644:	f000 f991 	bl	1996a <printk>
   19648:	21a7      	movs	r1, #167	; 0xa7
   1964a:	4825      	ldr	r0, [pc, #148]	; (196e0 <z_impl_k_poll+0x1a8>)
   1964c:	f000 fc33 	bl	19eb6 <assert_post_action>
   19650:	f389 8811 	msr	BASEPRI, r9
   19654:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   19658:	f06f 050a 	mvn.w	r5, #10
   1965c:	e7e1      	b.n	19622 <z_impl_k_poll+0xea>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1965e:	e9cd 6500 	strd	r6, r5, [sp]
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   19662:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   19664:	4649      	mov	r1, r9
   19666:	481d      	ldr	r0, [pc, #116]	; (196dc <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   19668:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1966c:	f7fe fd50 	bl	18110 <z_pend_curr>
   19670:	4605      	mov	r5, r0
	__asm__ volatile(
   19672:	f04f 0320 	mov.w	r3, #32
   19676:	f3ef 8611 	mrs	r6, BASEPRI
   1967a:	f383 8811 	msr	BASEPRI, r3
   1967e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19682:	4816      	ldr	r0, [pc, #88]	; (196dc <z_impl_k_poll+0x1a4>)
   19684:	f7ff f988 	bl	18998 <z_spin_lock_valid>
   19688:	b940      	cbnz	r0, 1969c <z_impl_k_poll+0x164>
   1968a:	4915      	ldr	r1, [pc, #84]	; (196e0 <z_impl_k_poll+0x1a8>)
   1968c:	4812      	ldr	r0, [pc, #72]	; (196d8 <z_impl_k_poll+0x1a0>)
   1968e:	227c      	movs	r2, #124	; 0x7c
   19690:	f000 f96b 	bl	1996a <printk>
   19694:	217c      	movs	r1, #124	; 0x7c
   19696:	4812      	ldr	r0, [pc, #72]	; (196e0 <z_impl_k_poll+0x1a8>)
   19698:	f000 fc0d 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   1969c:	480f      	ldr	r0, [pc, #60]	; (196dc <z_impl_k_poll+0x1a4>)
   1969e:	f7ff f997 	bl	189d0 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   196a2:	4620      	mov	r0, r4
   196a4:	4632      	mov	r2, r6
   196a6:	4641      	mov	r1, r8
   196a8:	f7ff fe86 	bl	193b8 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   196ac:	480b      	ldr	r0, [pc, #44]	; (196dc <z_impl_k_poll+0x1a4>)
   196ae:	f7ff f981 	bl	189b4 <z_spin_unlock_valid>
   196b2:	b940      	cbnz	r0, 196c6 <z_impl_k_poll+0x18e>
   196b4:	490a      	ldr	r1, [pc, #40]	; (196e0 <z_impl_k_poll+0x1a8>)
   196b6:	4808      	ldr	r0, [pc, #32]	; (196d8 <z_impl_k_poll+0x1a0>)
   196b8:	22a7      	movs	r2, #167	; 0xa7
   196ba:	f000 f956 	bl	1996a <printk>
   196be:	21a7      	movs	r1, #167	; 0xa7
   196c0:	4807      	ldr	r0, [pc, #28]	; (196e0 <z_impl_k_poll+0x1a8>)
   196c2:	f000 fbf8 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   196c6:	f386 8811 	msr	BASEPRI, r6
   196ca:	f3bf 8f6f 	isb	sy
	return swap_rc;
   196ce:	e7a8      	b.n	19622 <z_impl_k_poll+0xea>
   196d0:	2000adec 	.word	0x2000adec
   196d4:	00021758 	.word	0x00021758
   196d8:	0001ea60 	.word	0x0001ea60
   196dc:	2000ae40 	.word	0x2000ae40
   196e0:	0001ea9a 	.word	0x0001ea9a

000196e4 <z_impl_k_poll_signal_raise>:
{
   196e4:	b570      	push	{r4, r5, r6, lr}
   196e6:	4604      	mov	r4, r0
   196e8:	460d      	mov	r5, r1
	__asm__ volatile(
   196ea:	f04f 0320 	mov.w	r3, #32
   196ee:	f3ef 8611 	mrs	r6, BASEPRI
   196f2:	f383 8811 	msr	BASEPRI, r3
   196f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   196fa:	481c      	ldr	r0, [pc, #112]	; (1976c <z_impl_k_poll_signal_raise+0x88>)
   196fc:	f7ff f94c 	bl	18998 <z_spin_lock_valid>
   19700:	b940      	cbnz	r0, 19714 <z_impl_k_poll_signal_raise+0x30>
   19702:	491b      	ldr	r1, [pc, #108]	; (19770 <z_impl_k_poll_signal_raise+0x8c>)
   19704:	481b      	ldr	r0, [pc, #108]	; (19774 <z_impl_k_poll_signal_raise+0x90>)
   19706:	227c      	movs	r2, #124	; 0x7c
   19708:	f000 f92f 	bl	1996a <printk>
   1970c:	217c      	movs	r1, #124	; 0x7c
   1970e:	4818      	ldr	r0, [pc, #96]	; (19770 <z_impl_k_poll_signal_raise+0x8c>)
   19710:	f000 fbd1 	bl	19eb6 <assert_post_action>
	z_spin_lock_set_owner(l);
   19714:	4815      	ldr	r0, [pc, #84]	; (1976c <z_impl_k_poll_signal_raise+0x88>)
   19716:	f7ff f95b 	bl	189d0 <z_spin_lock_set_owner>
	signal->signaled = 1U;
   1971a:	2101      	movs	r1, #1
	return list->head == list;
   1971c:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   1971e:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   19720:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   19722:	60a1      	str	r1, [r4, #8]
   19724:	d112      	bne.n	1974c <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19726:	4811      	ldr	r0, [pc, #68]	; (1976c <z_impl_k_poll_signal_raise+0x88>)
   19728:	f7ff f944 	bl	189b4 <z_spin_unlock_valid>
   1972c:	b940      	cbnz	r0, 19740 <z_impl_k_poll_signal_raise+0x5c>
   1972e:	4910      	ldr	r1, [pc, #64]	; (19770 <z_impl_k_poll_signal_raise+0x8c>)
   19730:	4810      	ldr	r0, [pc, #64]	; (19774 <z_impl_k_poll_signal_raise+0x90>)
   19732:	22a7      	movs	r2, #167	; 0xa7
   19734:	f000 f919 	bl	1996a <printk>
   19738:	21a7      	movs	r1, #167	; 0xa7
   1973a:	480d      	ldr	r0, [pc, #52]	; (19770 <z_impl_k_poll_signal_raise+0x8c>)
   1973c:	f000 fbbb 	bl	19eb6 <assert_post_action>
	__asm__ volatile(
   19740:	f386 8811 	msr	BASEPRI, r6
   19744:	f3bf 8f6f 	isb	sy
		return 0;
   19748:	2400      	movs	r4, #0
   1974a:	e00d      	b.n	19768 <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   1974c:	e9d0 3200 	ldrd	r3, r2, [r0]
   19750:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   19752:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19754:	2300      	movs	r3, #0
	node->prev = NULL;
   19756:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1975a:	f7ff fced 	bl	19138 <signal_poll_event>
	z_reschedule(&lock, key);
   1975e:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19760:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   19762:	4802      	ldr	r0, [pc, #8]	; (1976c <z_impl_k_poll_signal_raise+0x88>)
   19764:	f7fd ff96 	bl	17694 <z_reschedule>
}
   19768:	4620      	mov	r0, r4
   1976a:	bd70      	pop	{r4, r5, r6, pc}
   1976c:	2000ae40 	.word	0x2000ae40
   19770:	0001ea9a 	.word	0x0001ea9a
   19774:	0001ea60 	.word	0x0001ea60

00019778 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   19778:	2803      	cmp	r0, #3
{
   1977a:	b538      	push	{r3, r4, r5, lr}
   1977c:	4604      	mov	r4, r0
   1977e:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   19780:	d901      	bls.n	19786 <k_aligned_alloc+0xe>
   19782:	0783      	lsls	r3, r0, #30
   19784:	d008      	beq.n	19798 <k_aligned_alloc+0x20>
   19786:	490e      	ldr	r1, [pc, #56]	; (197c0 <k_aligned_alloc+0x48>)
   19788:	480e      	ldr	r0, [pc, #56]	; (197c4 <k_aligned_alloc+0x4c>)
   1978a:	223e      	movs	r2, #62	; 0x3e
   1978c:	f000 f8ed 	bl	1996a <printk>
   19790:	213e      	movs	r1, #62	; 0x3e
   19792:	480b      	ldr	r0, [pc, #44]	; (197c0 <k_aligned_alloc+0x48>)
   19794:	f000 fb8f 	bl	19eb6 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   19798:	1e63      	subs	r3, r4, #1
   1979a:	4223      	tst	r3, r4
   1979c:	d008      	beq.n	197b0 <k_aligned_alloc+0x38>
   1979e:	4908      	ldr	r1, [pc, #32]	; (197c0 <k_aligned_alloc+0x48>)
   197a0:	4808      	ldr	r0, [pc, #32]	; (197c4 <k_aligned_alloc+0x4c>)
   197a2:	2242      	movs	r2, #66	; 0x42
   197a4:	f000 f8e1 	bl	1996a <printk>
   197a8:	2142      	movs	r1, #66	; 0x42
   197aa:	4805      	ldr	r0, [pc, #20]	; (197c0 <k_aligned_alloc+0x48>)
   197ac:	f000 fb83 	bl	19eb6 <assert_post_action>
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   197b0:	462a      	mov	r2, r5
   197b2:	4621      	mov	r1, r4
}
   197b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   197b8:	4803      	ldr	r0, [pc, #12]	; (197c8 <k_aligned_alloc+0x50>)
   197ba:	f003 bda8 	b.w	1d30e <z_heap_aligned_alloc>
   197be:	bf00      	nop
   197c0:	00021779 	.word	0x00021779
   197c4:	0001ea60 	.word	0x0001ea60
   197c8:	20008640 	.word	0x20008640

000197cc <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   197cc:	b538      	push	{r3, r4, r5, lr}
   197ce:	4604      	mov	r4, r0
   197d0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   197d2:	f003 fcaf 	bl	1d134 <k_is_in_isr>
   197d6:	b958      	cbnz	r0, 197f0 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   197d8:	4b07      	ldr	r3, [pc, #28]	; (197f8 <z_thread_aligned_alloc+0x2c>)
   197da:	689b      	ldr	r3, [r3, #8]
   197dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap) {
   197e0:	b143      	cbz	r3, 197f4 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   197e2:	462a      	mov	r2, r5
   197e4:	4621      	mov	r1, r4
   197e6:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   197e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   197ec:	f003 bd8f 	b.w	1d30e <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   197f0:	4b02      	ldr	r3, [pc, #8]	; (197fc <z_thread_aligned_alloc+0x30>)
   197f2:	e7f6      	b.n	197e2 <z_thread_aligned_alloc+0x16>
}
   197f4:	bd38      	pop	{r3, r4, r5, pc}
   197f6:	bf00      	nop
   197f8:	2000adec 	.word	0x2000adec
   197fc:	20008640 	.word	0x20008640

00019800 <_ZN13deviceManager10app_led_cbEb>:
void deviceManager::app_led_cb(bool led_state){
   19800:	4601      	mov	r1, r0
    dk_set_led(USER_LED,led_state);
   19802:	2003      	movs	r0, #3
   19804:	f7fc b9ee 	b.w	15be4 <dk_set_led>

00019808 <_ZN13deviceManager11deviceFoundEPK12bt_addr_le_tahP14net_buf_simple>:
	initScan();
   19808:	f7ef be70 	b.w	94ec <_ZN13deviceManager8initScanEv>

0001980c <_ZN13deviceManager14checkAddressesEPcS0_>:
	}
}

bool deviceManager::checkAddresses(char addr1[],char addr2[])
{
	uint8_t cnt = 0;
   1980c:	2300      	movs	r3, #0
{
   1980e:	b530      	push	{r4, r5, lr}
   19810:	1e42      	subs	r2, r0, #1
   19812:	3901      	subs	r1, #1
   19814:	3010      	adds	r0, #16
	bool retVal = false;
	for (uint8_t i = 0; i < 17; i++)
	{
		if (addr1[i] == addr2[i])
   19816:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   1981a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1981e:	42a5      	cmp	r5, r4
		{
			cnt++;
   19820:	bf04      	itt	eq
   19822:	3301      	addeq	r3, #1
   19824:	b2db      	uxtbeq	r3, r3
	for (uint8_t i = 0; i < 17; i++)
   19826:	4282      	cmp	r2, r0
   19828:	d1f5      	bne.n	19816 <_ZN13deviceManager14checkAddressesEPcS0_+0xa>
	{
		cnt = 0;
		retVal = false;
	}
	return retVal;
}
   1982a:	3b11      	subs	r3, #17
   1982c:	4258      	negs	r0, r3
   1982e:	4158      	adcs	r0, r3
   19830:	bd30      	pop	{r4, r5, pc}

00019832 <_ZL7on_sentP7bt_connPv>:
    const bt_addr_le_t * addr = bt_conn_get_dst(conn);
   19832:	f001 bd8e 	b.w	1b352 <bt_conn_get_dst>

00019836 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   19836:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   19838:	2364      	movs	r3, #100	; 0x64
{
   1983a:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   1983c:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   1983e:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   19840:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   19844:	b111      	cbz	r1, 1984c <u8_to_dec+0x16>
   19846:	3d01      	subs	r5, #1
   19848:	d101      	bne.n	1984e <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1984a:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   1984c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   1984e:	fbb2 f7f3 	udiv	r7, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   19852:	429a      	cmp	r2, r3
		digit = value / divisor;
   19854:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   19856:	d202      	bcs.n	1985e <u8_to_dec+0x28>
   19858:	2b01      	cmp	r3, #1
   1985a:	d000      	beq.n	1985e <u8_to_dec+0x28>
   1985c:	b130      	cbz	r0, 1986c <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1985e:	3630      	adds	r6, #48	; 0x30
			buflen--;
   19860:	3901      	subs	r1, #1
			num_digits++;
   19862:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   19864:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   19868:	b2c9      	uxtb	r1, r1
			num_digits++;
   1986a:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   1986c:	fb03 2217 	mls	r2, r3, r7, r2
		divisor /= 10;
   19870:	fbb3 f3fc 	udiv	r3, r3, ip
   19874:	b2d2      	uxtb	r2, r2
   19876:	e7e5      	b.n	19844 <u8_to_dec+0xe>

00019878 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   19878:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1987c:	b2db      	uxtb	r3, r3
   1987e:	2b09      	cmp	r3, #9
   19880:	d802      	bhi.n	19888 <char2hex+0x10>
		*x = c - '0';
   19882:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   19884:	2000      	movs	r0, #0
   19886:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   19888:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1988c:	2b05      	cmp	r3, #5
   1988e:	d802      	bhi.n	19896 <char2hex+0x1e>
		*x = c - 'a' + 10;
   19890:	3857      	subs	r0, #87	; 0x57
   19892:	7008      	strb	r0, [r1, #0]
   19894:	e7f6      	b.n	19884 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   19896:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1989a:	2b05      	cmp	r3, #5
   1989c:	d801      	bhi.n	198a2 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1989e:	3837      	subs	r0, #55	; 0x37
   198a0:	e7f7      	b.n	19892 <char2hex+0x1a>
		return -EINVAL;
   198a2:	f06f 0015 	mvn.w	r0, #21
}
   198a6:	4770      	bx	lr

000198a8 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   198a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   198aa:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   198ac:	f001 0001 	and.w	r0, r1, #1
   198b0:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   198b4:	429d      	cmp	r5, r3
   198b6:	ea4f 0651 	mov.w	r6, r1, lsr #1
   198ba:	d903      	bls.n	198c4 <hex2bin+0x1c>
		return 0;
   198bc:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   198be:	4628      	mov	r0, r5
   198c0:	b003      	add	sp, #12
   198c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   198c4:	b158      	cbz	r0, 198de <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   198c6:	7820      	ldrb	r0, [r4, #0]
   198c8:	f10d 0107 	add.w	r1, sp, #7
   198cc:	f7ff ffd4 	bl	19878 <char2hex>
   198d0:	2800      	cmp	r0, #0
   198d2:	dbf3      	blt.n	198bc <hex2bin+0x14>
		buf[0] = dec;
   198d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   198d8:	3401      	adds	r4, #1
		buf[0] = dec;
   198da:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   198de:	3401      	adds	r4, #1
   198e0:	4416      	add	r6, r2
   198e2:	42b2      	cmp	r2, r6
   198e4:	d0eb      	beq.n	198be <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   198e6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   198ea:	f10d 0107 	add.w	r1, sp, #7
   198ee:	f7ff ffc3 	bl	19878 <char2hex>
   198f2:	2800      	cmp	r0, #0
   198f4:	dbe2      	blt.n	198bc <hex2bin+0x14>
		buf[i] = dec << 4;
   198f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   198fa:	011b      	lsls	r3, r3, #4
   198fc:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   198fe:	f814 0b02 	ldrb.w	r0, [r4], #2
   19902:	f7ff ffb9 	bl	19878 <char2hex>
   19906:	2800      	cmp	r0, #0
   19908:	dbd8      	blt.n	198bc <hex2bin+0x14>
		buf[i] += dec;
   1990a:	7813      	ldrb	r3, [r2, #0]
   1990c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   19910:	440b      	add	r3, r1
   19912:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   19916:	e7e4      	b.n	198e2 <hex2bin+0x3a>

00019918 <sys_notify_validate>:
	if (notify == NULL) {
   19918:	4603      	mov	r3, r0
   1991a:	b140      	cbz	r0, 1992e <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1991c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1991e:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   19922:	2a02      	cmp	r2, #2
   19924:	d006      	beq.n	19934 <sys_notify_validate+0x1c>
   19926:	2a03      	cmp	r2, #3
   19928:	d004      	beq.n	19934 <sys_notify_validate+0x1c>
   1992a:	2a01      	cmp	r2, #1
   1992c:	d005      	beq.n	1993a <sys_notify_validate+0x22>
		return -EINVAL;
   1992e:	f06f 0015 	mvn.w	r0, #21
}
   19932:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   19934:	681a      	ldr	r2, [r3, #0]
   19936:	2a00      	cmp	r2, #0
   19938:	d0f9      	beq.n	1992e <sys_notify_validate+0x16>
		notify->result = 0;
   1993a:	2000      	movs	r0, #0
   1993c:	6098      	str	r0, [r3, #8]
   1993e:	4770      	bx	lr

00019940 <arch_printk_char_out>:
}
   19940:	2000      	movs	r0, #0
   19942:	4770      	bx	lr

00019944 <str_out>:
{
   19944:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   19946:	688a      	ldr	r2, [r1, #8]
   19948:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1994a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1994c:	b114      	cbz	r4, 19954 <str_out+0x10>
   1994e:	684b      	ldr	r3, [r1, #4]
   19950:	4293      	cmp	r3, r2
   19952:	dc01      	bgt.n	19958 <str_out+0x14>
		ctx->count++;
   19954:	608d      	str	r5, [r1, #8]
}
   19956:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   19958:	3b01      	subs	r3, #1
   1995a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1995c:	bf08      	it	eq
   1995e:	2200      	moveq	r2, #0
   19960:	608d      	str	r5, [r1, #8]
   19962:	bf0c      	ite	eq
   19964:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   19966:	54a0      	strbne	r0, [r4, r2]
   19968:	e7f5      	b.n	19956 <str_out+0x12>

0001996a <printk>:
{
   1996a:	b40f      	push	{r0, r1, r2, r3}
   1996c:	b507      	push	{r0, r1, r2, lr}
   1996e:	a904      	add	r1, sp, #16
   19970:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   19974:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   19976:	f7f0 fa7f 	bl	9e78 <vprintk>
}
   1997a:	b003      	add	sp, #12
   1997c:	f85d eb04 	ldr.w	lr, [sp], #4
   19980:	b004      	add	sp, #16
   19982:	4770      	bx	lr

00019984 <snprintk>:
{
   19984:	b40c      	push	{r2, r3}
   19986:	b507      	push	{r0, r1, r2, lr}
   19988:	ab04      	add	r3, sp, #16
   1998a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1998e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   19990:	f7f0 fa80 	bl	9e94 <vsnprintk>
}
   19994:	b003      	add	sp, #12
   19996:	f85d eb04 	ldr.w	lr, [sp], #4
   1999a:	b002      	add	sp, #8
   1999c:	4770      	bx	lr

0001999e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1999e:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   199a0:	f013 0307 	ands.w	r3, r3, #7
   199a4:	d105      	bne.n	199b2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   199a6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   199a8:	2b00      	cmp	r3, #0
   199aa:	bf0c      	ite	eq
   199ac:	2000      	moveq	r0, #0
   199ae:	2003      	movne	r0, #3
   199b0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   199b2:	2b02      	cmp	r3, #2
   199b4:	d105      	bne.n	199c2 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   199b6:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   199b8:	2b00      	cmp	r3, #0
   199ba:	bf14      	ite	ne
   199bc:	2000      	movne	r0, #0
   199be:	2004      	moveq	r0, #4
   199c0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   199c2:	2b01      	cmp	r3, #1
   199c4:	d105      	bne.n	199d2 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   199c6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   199c8:	2b00      	cmp	r3, #0
   199ca:	bf0c      	ite	eq
   199cc:	2000      	moveq	r0, #0
   199ce:	2005      	movne	r0, #5
   199d0:	4770      	bx	lr
	int evt = EVT_NOP;
   199d2:	2000      	movs	r0, #0
}
   199d4:	4770      	bx	lr

000199d6 <notify_one>:
{
   199d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   199da:	460d      	mov	r5, r1
   199dc:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   199de:	4619      	mov	r1, r3
   199e0:	1d28      	adds	r0, r5, #4
{
   199e2:	4690      	mov	r8, r2
   199e4:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   199e6:	f7f0 fa0d 	bl	9e04 <sys_notify_finalize>
	if (cb) {
   199ea:	4604      	mov	r4, r0
   199ec:	b138      	cbz	r0, 199fe <notify_one+0x28>
		cb(mgr, cli, state, res);
   199ee:	4633      	mov	r3, r6
   199f0:	4642      	mov	r2, r8
   199f2:	4629      	mov	r1, r5
   199f4:	4638      	mov	r0, r7
   199f6:	46a4      	mov	ip, r4
}
   199f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   199fc:	4760      	bx	ip
}
   199fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019a02 <validate_args>:
{
   19a02:	b510      	push	{r4, lr}
   19a04:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   19a06:	b140      	cbz	r0, 19a1a <validate_args+0x18>
   19a08:	b139      	cbz	r1, 19a1a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   19a0a:	1d08      	adds	r0, r1, #4
   19a0c:	f7ff ff84 	bl	19918 <sys_notify_validate>
	if ((rv == 0)
   19a10:	b928      	cbnz	r0, 19a1e <validate_args+0x1c>
	    && ((cli->notify.flags
   19a12:	68a3      	ldr	r3, [r4, #8]
   19a14:	f033 0303 	bics.w	r3, r3, #3
   19a18:	d001      	beq.n	19a1e <validate_args+0x1c>
		rv = -EINVAL;
   19a1a:	f06f 0015 	mvn.w	r0, #21
}
   19a1e:	bd10      	pop	{r4, pc}

00019a20 <onoff_manager_init>:
{
   19a20:	b538      	push	{r3, r4, r5, lr}
   19a22:	460c      	mov	r4, r1
	if ((mgr == NULL)
   19a24:	4605      	mov	r5, r0
   19a26:	b158      	cbz	r0, 19a40 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   19a28:	b151      	cbz	r1, 19a40 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   19a2a:	680b      	ldr	r3, [r1, #0]
   19a2c:	b143      	cbz	r3, 19a40 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   19a2e:	684b      	ldr	r3, [r1, #4]
   19a30:	b133      	cbz	r3, 19a40 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   19a32:	2220      	movs	r2, #32
   19a34:	2100      	movs	r1, #0
   19a36:	f001 fa03 	bl	1ae40 <memset>
	return 0;
   19a3a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   19a3c:	612c      	str	r4, [r5, #16]
}
   19a3e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   19a40:	f06f 0015 	mvn.w	r0, #21
   19a44:	e7fb      	b.n	19a3e <onoff_manager_init+0x1e>

00019a46 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   19a46:	4604      	mov	r4, r0
   19a48:	b508      	push	{r3, lr}
   19a4a:	4608      	mov	r0, r1
   19a4c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   19a4e:	461a      	mov	r2, r3
   19a50:	47a0      	blx	r4
	return z_impl_k_current_get();
   19a52:	f7fe fdaf 	bl	185b4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   19a56:	f7f3 fc8d 	bl	d374 <z_impl_k_thread_abort>

00019a5a <chunk_field>:
	if (big_heap(h)) {
   19a5a:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   19a5c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   19a64:	bf2c      	ite	cs
   19a66:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   19a6a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   19a6e:	4770      	bx	lr

00019a70 <chunk_set>:
	void *cmem = &buf[c];
   19a70:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19a74:	6880      	ldr	r0, [r0, #8]
   19a76:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   19a7a:	bf2c      	ite	cs
   19a7c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   19a80:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   19a84:	4770      	bx	lr

00019a86 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19a86:	2201      	movs	r2, #1
{
   19a88:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19a8a:	f7ff ffe6 	bl	19a5a <chunk_field>
}
   19a8e:	40d0      	lsrs	r0, r2
   19a90:	bd08      	pop	{r3, pc}

00019a92 <set_chunk_used>:
	if (big_heap(h)) {
   19a92:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   19a94:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19a9c:	d308      	bcc.n	19ab0 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   19a9e:	684b      	ldr	r3, [r1, #4]
		if (used) {
   19aa0:	b11a      	cbz	r2, 19aaa <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   19aa2:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19aa6:	604b      	str	r3, [r1, #4]
   19aa8:	4770      	bx	lr
   19aaa:	f023 0301 	bic.w	r3, r3, #1
   19aae:	e7fa      	b.n	19aa6 <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19ab0:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   19ab2:	b11a      	cbz	r2, 19abc <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19ab4:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19ab8:	804b      	strh	r3, [r1, #2]
}
   19aba:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19abc:	f023 0301 	bic.w	r3, r3, #1
   19ac0:	e7fa      	b.n	19ab8 <set_chunk_used+0x26>

00019ac2 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   19ac2:	0053      	lsls	r3, r2, #1
   19ac4:	2201      	movs	r2, #1
   19ac6:	f7ff bfd3 	b.w	19a70 <chunk_set>

00019aca <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
   19aca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   19ace:	bf2c      	ite	cs
   19ad0:	2008      	movcs	r0, #8
   19ad2:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19ad4:	3107      	adds	r1, #7
   19ad6:	4408      	add	r0, r1
}

static inline size_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
	return chunksz(chunk_header_bytes(h) + bytes);
}
   19ad8:	08c0      	lsrs	r0, r0, #3
   19ada:	4770      	bx	lr

00019adc <bucket_idx.isra.0>:
static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
   19adc:	b508      	push	{r3, lr}
   19ade:	460b      	mov	r3, r1
   19ae0:	2101      	movs	r1, #1
   19ae2:	f7ff fff2 	bl	19aca <bytes_to_chunksz.isra.0>
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   19ae6:	3301      	adds	r3, #1
   19ae8:	1a1b      	subs	r3, r3, r0
	return 31 - __builtin_clz(usable_sz);
   19aea:	fab3 f083 	clz	r0, r3
}
   19aee:	f1c0 001f 	rsb	r0, r0, #31
   19af2:	bd08      	pop	{r3, pc}

00019af4 <free_list_remove_bidx>:
{
   19af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19af8:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   19afa:	2203      	movs	r2, #3
   19afc:	460e      	mov	r6, r1
   19afe:	4604      	mov	r4, r0
   19b00:	f7ff ffab 	bl	19a5a <chunk_field>
	if (next_free_chunk(h, c) == c) {
   19b04:	4286      	cmp	r6, r0
   19b06:	4605      	mov	r5, r0
   19b08:	f107 0804 	add.w	r8, r7, #4
   19b0c:	d10b      	bne.n	19b26 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   19b0e:	2301      	movs	r3, #1
   19b10:	fa03 f707 	lsl.w	r7, r3, r7
   19b14:	68e3      	ldr	r3, [r4, #12]
   19b16:	ea23 0307 	bic.w	r3, r3, r7
   19b1a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   19b1c:	2300      	movs	r3, #0
   19b1e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   19b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   19b26:	4631      	mov	r1, r6
   19b28:	2202      	movs	r2, #2
   19b2a:	4620      	mov	r0, r4
   19b2c:	f7ff ff95 	bl	19a5a <chunk_field>
   19b30:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   19b32:	462b      	mov	r3, r5
   19b34:	4601      	mov	r1, r0
   19b36:	2203      	movs	r2, #3
   19b38:	4620      	mov	r0, r4
		b->next = second;
   19b3a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   19b3e:	f7ff ff97 	bl	19a70 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   19b42:	4633      	mov	r3, r6
   19b44:	4629      	mov	r1, r5
   19b46:	4620      	mov	r0, r4
}
   19b48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19b4c:	2202      	movs	r2, #2
   19b4e:	f7ff bf8f 	b.w	19a70 <chunk_set>

00019b52 <free_list_remove>:
{
   19b52:	b570      	push	{r4, r5, r6, lr}
   19b54:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   19b56:	6886      	ldr	r6, [r0, #8]
   19b58:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   19b5a:	f7ff ff94 	bl	19a86 <chunk_size>
   19b5e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   19b62:	4601      	mov	r1, r0
   19b64:	d301      	bcc.n	19b6a <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   19b66:	2801      	cmp	r0, #1
   19b68:	d009      	beq.n	19b7e <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   19b6a:	4630      	mov	r0, r6
   19b6c:	f7ff ffb6 	bl	19adc <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   19b70:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   19b72:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   19b74:	4620      	mov	r0, r4
}
   19b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   19b7a:	f7ff bfbb 	b.w	19af4 <free_list_remove_bidx>
}
   19b7e:	bd70      	pop	{r4, r5, r6, pc}

00019b80 <alloc_chunk>:
{
   19b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19b84:	6886      	ldr	r6, [r0, #8]
   19b86:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   19b88:	4630      	mov	r0, r6
{
   19b8a:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   19b8c:	f7ff ffa6 	bl	19adc <bucket_idx.isra.0>
	if (bi > bucket_idx(h, h->len)) {
   19b90:	4631      	mov	r1, r6
	int bi = bucket_idx(h, sz);
   19b92:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   19b94:	4630      	mov	r0, r6
   19b96:	f7ff ffa1 	bl	19adc <bucket_idx.isra.0>
   19b9a:	42a8      	cmp	r0, r5
   19b9c:	da03      	bge.n	19ba6 <alloc_chunk+0x26>
		return 0;
   19b9e:	2600      	movs	r6, #0
}
   19ba0:	4630      	mov	r0, r6
   19ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   19ba6:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   19baa:	f8da 9010 	ldr.w	r9, [sl, #16]
   19bae:	f1b9 0f00 	cmp.w	r9, #0
   19bb2:	d019      	beq.n	19be8 <alloc_chunk+0x68>
   19bb4:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   19bb6:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   19bba:	4620      	mov	r0, r4
   19bbc:	4631      	mov	r1, r6
   19bbe:	f7ff ff62 	bl	19a86 <chunk_size>
   19bc2:	4540      	cmp	r0, r8
   19bc4:	d305      	bcc.n	19bd2 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   19bc6:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   19bc8:	4631      	mov	r1, r6
   19bca:	4620      	mov	r0, r4
   19bcc:	f7ff ff92 	bl	19af4 <free_list_remove_bidx>
		return c;
   19bd0:	e7e6      	b.n	19ba0 <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   19bd2:	2203      	movs	r2, #3
   19bd4:	4631      	mov	r1, r6
   19bd6:	4620      	mov	r0, r4
   19bd8:	f7ff ff3f 	bl	19a5a <chunk_field>
		} while (--i && b->next != first);
   19bdc:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   19bde:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   19be2:	d001      	beq.n	19be8 <alloc_chunk+0x68>
   19be4:	4581      	cmp	r9, r0
   19be6:	d1e6      	bne.n	19bb6 <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   19be8:	f04f 32ff 	mov.w	r2, #4294967295
   19bec:	68e3      	ldr	r3, [r4, #12]
   19bee:	3501      	adds	r5, #1
   19bf0:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   19bf2:	401a      	ands	r2, r3
   19bf4:	d0d3      	beq.n	19b9e <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   19bf6:	fa92 f2a2 	rbit	r2, r2
   19bfa:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   19bfe:	1d13      	adds	r3, r2, #4
   19c00:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   19c04:	e7e0      	b.n	19bc8 <alloc_chunk+0x48>

00019c06 <split_chunks>:
{
   19c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c0a:	4614      	mov	r4, r2
   19c0c:	460e      	mov	r6, r1
   19c0e:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   19c10:	f7ff ff39 	bl	19a86 <chunk_size>
	size_t lsz = rc - lc;
   19c14:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   19c18:	1b37      	subs	r7, r6, r4
   19c1a:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   19c1c:	4642      	mov	r2, r8
   19c1e:	4631      	mov	r1, r6
   19c20:	4628      	mov	r0, r5
   19c22:	f7ff ff4e 	bl	19ac2 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   19c26:	463a      	mov	r2, r7
   19c28:	4621      	mov	r1, r4
   19c2a:	4628      	mov	r0, r5
   19c2c:	f7ff ff49 	bl	19ac2 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19c30:	4643      	mov	r3, r8
   19c32:	2200      	movs	r2, #0
   19c34:	4621      	mov	r1, r4
   19c36:	4628      	mov	r0, r5
   19c38:	f7ff ff1a 	bl	19a70 <chunk_set>
	return c + chunk_size(h, c);
   19c3c:	4621      	mov	r1, r4
   19c3e:	4628      	mov	r0, r5
   19c40:	f7ff ff21 	bl	19a86 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19c44:	463b      	mov	r3, r7
   19c46:	1821      	adds	r1, r4, r0
   19c48:	2200      	movs	r2, #0
   19c4a:	4628      	mov	r0, r5
}
   19c4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19c50:	f7ff bf0e 	b.w	19a70 <chunk_set>

00019c54 <merge_chunks>:
{
   19c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c58:	4616      	mov	r6, r2
   19c5a:	4604      	mov	r4, r0
   19c5c:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   19c5e:	f7ff ff12 	bl	19a86 <chunk_size>
   19c62:	4631      	mov	r1, r6
   19c64:	4605      	mov	r5, r0
   19c66:	4620      	mov	r0, r4
   19c68:	f7ff ff0d 	bl	19a86 <chunk_size>
   19c6c:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   19c6e:	462a      	mov	r2, r5
   19c70:	4639      	mov	r1, r7
   19c72:	4620      	mov	r0, r4
   19c74:	f7ff ff25 	bl	19ac2 <set_chunk_size>
	return c + chunk_size(h, c);
   19c78:	4631      	mov	r1, r6
   19c7a:	4620      	mov	r0, r4
   19c7c:	f7ff ff03 	bl	19a86 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19c80:	462b      	mov	r3, r5
   19c82:	1831      	adds	r1, r6, r0
   19c84:	2200      	movs	r2, #0
   19c86:	4620      	mov	r0, r4
}
   19c88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19c8c:	f7ff bef0 	b.w	19a70 <chunk_set>

00019c90 <free_list_add>:
{
   19c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c94:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   19c96:	6886      	ldr	r6, [r0, #8]
   19c98:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   19c9a:	f7ff fef4 	bl	19a86 <chunk_size>
   19c9e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   19ca2:	4601      	mov	r1, r0
   19ca4:	d301      	bcc.n	19caa <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   19ca6:	2801      	cmp	r0, #1
   19ca8:	d033      	beq.n	19d12 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   19caa:	4630      	mov	r0, r6
   19cac:	f7ff ff16 	bl	19adc <bucket_idx.isra.0>
	if (b->next == 0U) {
   19cb0:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   19cb4:	6916      	ldr	r6, [r2, #16]
   19cb6:	b99e      	cbnz	r6, 19ce0 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   19cb8:	2301      	movs	r3, #1
   19cba:	fa03 f000 	lsl.w	r0, r3, r0
   19cbe:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   19cc0:	4629      	mov	r1, r5
   19cc2:	4303      	orrs	r3, r0
   19cc4:	60e3      	str	r3, [r4, #12]
   19cc6:	4620      	mov	r0, r4
		b->next = c;
   19cc8:	6115      	str	r5, [r2, #16]
   19cca:	462b      	mov	r3, r5
   19ccc:	2202      	movs	r2, #2
   19cce:	f7ff fecf 	bl	19a70 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   19cd2:	2203      	movs	r2, #3
   19cd4:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   19cd6:	4620      	mov	r0, r4
}
   19cd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19cdc:	f7ff bec8 	b.w	19a70 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   19ce0:	2202      	movs	r2, #2
   19ce2:	4631      	mov	r1, r6
   19ce4:	4620      	mov	r0, r4
   19ce6:	f7ff feb8 	bl	19a5a <chunk_field>
   19cea:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   19cec:	4603      	mov	r3, r0
   19cee:	4629      	mov	r1, r5
   19cf0:	4620      	mov	r0, r4
   19cf2:	f7ff febd 	bl	19a70 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   19cf6:	2203      	movs	r2, #3
   19cf8:	4633      	mov	r3, r6
   19cfa:	4629      	mov	r1, r5
   19cfc:	4620      	mov	r0, r4
   19cfe:	f7ff feb7 	bl	19a70 <chunk_set>
   19d02:	4639      	mov	r1, r7
   19d04:	462b      	mov	r3, r5
   19d06:	4620      	mov	r0, r4
   19d08:	f7ff feb2 	bl	19a70 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   19d0c:	2202      	movs	r2, #2
   19d0e:	4631      	mov	r1, r6
   19d10:	e7e1      	b.n	19cd6 <free_list_add+0x46>
   19d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019d16 <free_chunk>:
{
   19d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d18:	460c      	mov	r4, r1
   19d1a:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   19d1c:	f7ff feb3 	bl	19a86 <chunk_size>
   19d20:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19d22:	2201      	movs	r2, #1
   19d24:	4631      	mov	r1, r6
   19d26:	4628      	mov	r0, r5
   19d28:	f7ff fe97 	bl	19a5a <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   19d2c:	07c3      	lsls	r3, r0, #31
   19d2e:	d40c      	bmi.n	19d4a <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   19d30:	4631      	mov	r1, r6
   19d32:	4628      	mov	r0, r5
   19d34:	f7ff ff0d 	bl	19b52 <free_list_remove>
	return c + chunk_size(h, c);
   19d38:	4621      	mov	r1, r4
   19d3a:	4628      	mov	r0, r5
   19d3c:	f7ff fea3 	bl	19a86 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   19d40:	4621      	mov	r1, r4
   19d42:	1822      	adds	r2, r4, r0
   19d44:	4628      	mov	r0, r5
   19d46:	f7ff ff85 	bl	19c54 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   19d4a:	2200      	movs	r2, #0
   19d4c:	4621      	mov	r1, r4
   19d4e:	4628      	mov	r0, r5
   19d50:	f7ff fe83 	bl	19a5a <chunk_field>
   19d54:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19d56:	2201      	movs	r2, #1
   19d58:	4639      	mov	r1, r7
   19d5a:	4628      	mov	r0, r5
   19d5c:	f7ff fe7d 	bl	19a5a <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   19d60:	ea10 0602 	ands.w	r6, r0, r2
   19d64:	d113      	bne.n	19d8e <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   19d66:	4639      	mov	r1, r7
   19d68:	4628      	mov	r0, r5
   19d6a:	f7ff fef2 	bl	19b52 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   19d6e:	4621      	mov	r1, r4
   19d70:	4632      	mov	r2, r6
   19d72:	4628      	mov	r0, r5
   19d74:	f7ff fe71 	bl	19a5a <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   19d78:	4622      	mov	r2, r4
   19d7a:	1a21      	subs	r1, r4, r0
   19d7c:	4628      	mov	r0, r5
   19d7e:	f7ff ff69 	bl	19c54 <merge_chunks>
   19d82:	4621      	mov	r1, r4
   19d84:	4632      	mov	r2, r6
   19d86:	4628      	mov	r0, r5
   19d88:	f7ff fe67 	bl	19a5a <chunk_field>
   19d8c:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   19d8e:	4621      	mov	r1, r4
   19d90:	4628      	mov	r0, r5
}
   19d92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   19d96:	f7ff bf7b 	b.w	19c90 <free_list_add>

00019d9a <sys_heap_alloc>:
{
   19d9a:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   19d9c:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   19d9e:	b909      	cbnz	r1, 19da4 <sys_heap_alloc+0xa>
		return NULL;
   19da0:	2000      	movs	r0, #0
}
   19da2:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   19da4:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   19da6:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
   19daa:	d9f9      	bls.n	19da0 <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   19dac:	f7ff fe8d 	bl	19aca <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   19db0:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   19db2:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   19db4:	4630      	mov	r0, r6
   19db6:	f7ff fee3 	bl	19b80 <alloc_chunk>
	if (c == 0U) {
   19dba:	4604      	mov	r4, r0
   19dbc:	2800      	cmp	r0, #0
   19dbe:	d0ef      	beq.n	19da0 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   19dc0:	4601      	mov	r1, r0
   19dc2:	4630      	mov	r0, r6
   19dc4:	f7ff fe5f 	bl	19a86 <chunk_size>
   19dc8:	42a8      	cmp	r0, r5
   19dca:	d909      	bls.n	19de0 <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
   19dcc:	4425      	add	r5, r4
   19dce:	4621      	mov	r1, r4
   19dd0:	4630      	mov	r0, r6
   19dd2:	462a      	mov	r2, r5
   19dd4:	f7ff ff17 	bl	19c06 <split_chunks>
		free_list_add(h, c + chunk_sz);
   19dd8:	4629      	mov	r1, r5
   19dda:	4630      	mov	r0, r6
   19ddc:	f7ff ff58 	bl	19c90 <free_list_add>
	set_chunk_used(h, c, true);
   19de0:	4621      	mov	r1, r4
   19de2:	4630      	mov	r0, r6
   19de4:	2201      	movs	r2, #1
   19de6:	f7ff fe54 	bl	19a92 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   19dea:	68b3      	ldr	r3, [r6, #8]
   19dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19df0:	bf2c      	ite	cs
   19df2:	2308      	movcs	r3, #8
   19df4:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   19df6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   19dfa:	4420      	add	r0, r4
	return chunk_mem(h, c);
   19dfc:	e7d1      	b.n	19da2 <sys_heap_alloc+0x8>

00019dfe <encode_uint>:
{
   19dfe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e02:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   19e04:	78d3      	ldrb	r3, [r2, #3]
{
   19e06:	4680      	mov	r8, r0
	switch (specifier) {
   19e08:	2b6f      	cmp	r3, #111	; 0x6f
{
   19e0a:	460f      	mov	r7, r1
   19e0c:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   19e0e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   19e12:	d029      	beq.n	19e68 <encode_uint+0x6a>
   19e14:	d824      	bhi.n	19e60 <encode_uint+0x62>
		return 16;
   19e16:	2b58      	cmp	r3, #88	; 0x58
   19e18:	bf14      	ite	ne
   19e1a:	260a      	movne	r6, #10
   19e1c:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   19e1e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   19e22:	4632      	mov	r2, r6
   19e24:	2300      	movs	r3, #0
   19e26:	4640      	mov	r0, r8
   19e28:	4639      	mov	r1, r7
   19e2a:	f7ee fe7f 	bl	8b2c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19e2e:	2a09      	cmp	r2, #9
   19e30:	b2d4      	uxtb	r4, r2
   19e32:	d81e      	bhi.n	19e72 <encode_uint+0x74>
   19e34:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   19e36:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19e38:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   19e3a:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19e3e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   19e42:	d301      	bcc.n	19e48 <encode_uint+0x4a>
   19e44:	45d1      	cmp	r9, sl
   19e46:	d811      	bhi.n	19e6c <encode_uint+0x6e>
	if (conv->flag_hash) {
   19e48:	782b      	ldrb	r3, [r5, #0]
   19e4a:	069b      	lsls	r3, r3, #26
   19e4c:	d505      	bpl.n	19e5a <encode_uint+0x5c>
		if (radix == 8) {
   19e4e:	2e08      	cmp	r6, #8
   19e50:	d115      	bne.n	19e7e <encode_uint+0x80>
			conv->altform_0 = true;
   19e52:	78ab      	ldrb	r3, [r5, #2]
   19e54:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   19e58:	70ab      	strb	r3, [r5, #2]
}
   19e5a:	4648      	mov	r0, r9
   19e5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   19e60:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   19e64:	2b70      	cmp	r3, #112	; 0x70
   19e66:	e7d7      	b.n	19e18 <encode_uint+0x1a>
	switch (specifier) {
   19e68:	2608      	movs	r6, #8
   19e6a:	e7d8      	b.n	19e1e <encode_uint+0x20>
		value /= radix;
   19e6c:	4680      	mov	r8, r0
   19e6e:	460f      	mov	r7, r1
   19e70:	e7d7      	b.n	19e22 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19e72:	f1bb 0f19 	cmp.w	fp, #25
   19e76:	bf94      	ite	ls
   19e78:	3437      	addls	r4, #55	; 0x37
   19e7a:	3457      	addhi	r4, #87	; 0x57
   19e7c:	e7db      	b.n	19e36 <encode_uint+0x38>
		} else if (radix == 16) {
   19e7e:	2e10      	cmp	r6, #16
   19e80:	d1eb      	bne.n	19e5a <encode_uint+0x5c>
			conv->altform_0c = true;
   19e82:	78ab      	ldrb	r3, [r5, #2]
   19e84:	f043 0310 	orr.w	r3, r3, #16
   19e88:	e7e6      	b.n	19e58 <encode_uint+0x5a>

00019e8a <outs>:
{
   19e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e8e:	4607      	mov	r7, r0
   19e90:	4688      	mov	r8, r1
   19e92:	4615      	mov	r5, r2
   19e94:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   19e96:	4614      	mov	r4, r2
   19e98:	42b4      	cmp	r4, r6
   19e9a:	eba4 0005 	sub.w	r0, r4, r5
   19e9e:	d302      	bcc.n	19ea6 <outs+0x1c>
   19ea0:	b93e      	cbnz	r6, 19eb2 <outs+0x28>
   19ea2:	7823      	ldrb	r3, [r4, #0]
   19ea4:	b12b      	cbz	r3, 19eb2 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   19ea6:	4641      	mov	r1, r8
   19ea8:	f814 0b01 	ldrb.w	r0, [r4], #1
   19eac:	47b8      	blx	r7
		if (rc < 0) {
   19eae:	2800      	cmp	r0, #0
   19eb0:	daf2      	bge.n	19e98 <outs+0xe>
}
   19eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019eb6 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   19eb6:	4040      	eors	r0, r0
   19eb8:	f380 8811 	msr	BASEPRI, r0
   19ebc:	f04f 0004 	mov.w	r0, #4
   19ec0:	df02      	svc	2
}
   19ec2:	4770      	bx	lr

00019ec4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   19ec4:	4770      	bx	lr

00019ec6 <nordicsemi_nrf53_init>:
	__asm__ volatile(
   19ec6:	f04f 0320 	mov.w	r3, #32
   19eca:	f3ef 8111 	mrs	r1, BASEPRI
   19ece:	f383 8811 	msr	BASEPRI, r3
   19ed2:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   19ed6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   19eda:	2201      	movs	r2, #1
   19edc:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   19ee0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   19ee4:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   19ee8:	f381 8811 	msr	BASEPRI, r1
   19eec:	f3bf 8f6f 	isb	sy
}
   19ef0:	2000      	movs	r0, #0
   19ef2:	4770      	bx	lr

00019ef4 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   19ef4:	f002 bc70 	b.w	1c7d8 <SystemInit>

00019ef8 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   19ef8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   19efc:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   19f00:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   19f02:	4640      	mov	r0, r8
{
   19f04:	461f      	mov	r7, r3
   19f06:	460c      	mov	r4, r1
   19f08:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   19f0a:	f000 ff30 	bl	1ad6e <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   19f0e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19f12:	b280      	uxth	r0, r0
   19f14:	e9cd 8001 	strd	r8, r0, [sp, #4]
   19f18:	9300      	str	r3, [sp, #0]
   19f1a:	4632      	mov	r2, r6
   19f1c:	463b      	mov	r3, r7
   19f1e:	4621      	mov	r1, r4
   19f20:	4628      	mov	r0, r5
   19f22:	f002 f8b6 	bl	1c092 <bt_gatt_attr_read>
}
   19f26:	b004      	add	sp, #16
   19f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019f2c <virtio_get_status>:
}
   19f2c:	2004      	movs	r0, #4
   19f2e:	4770      	bx	lr

00019f30 <virtio_get_features>:
}
   19f30:	2001      	movs	r0, #1
   19f32:	4770      	bx	lr

00019f34 <virtio_set_features>:
}
   19f34:	4770      	bx	lr

00019f36 <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
   19f36:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
   19f38:	21b4      	movs	r1, #180	; 0xb4
   19f3a:	2004      	movs	r0, #4
   19f3c:	f7ff fc1c 	bl	19778 <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   19f40:	4604      	mov	r4, r0
   19f42:	b118      	cbz	r0, 19f4c <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
   19f44:	22b4      	movs	r2, #180	; 0xb4
   19f46:	2100      	movs	r1, #0
   19f48:	f000 ff7a 	bl	1ae40 <memset>
	}

	return vqs;
}
   19f4c:	4620      	mov	r0, r4
   19f4e:	bd10      	pop	{r4, pc}

00019f50 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   19f50:	f002 bf51 	b.w	1cdf6 <rpmsg_destroy_ept>

00019f54 <settings_load>:
	return settings_load_subtree(NULL);
   19f54:	2000      	movs	r0, #0
   19f56:	f7f1 b93d 	b.w	b1d4 <settings_load_subtree>

00019f5a <settings_delete>:
	return settings_save_one(name, NULL, 0);
   19f5a:	2200      	movs	r2, #0
   19f5c:	4611      	mov	r1, r2
   19f5e:	f7f1 b913 	b.w	b188 <settings_save_one>

00019f62 <settings_name_steq>:
{
   19f62:	4603      	mov	r3, r0
   19f64:	b530      	push	{r4, r5, lr}
   19f66:	4608      	mov	r0, r1
	if (next) {
   19f68:	b10a      	cbz	r2, 19f6e <settings_name_steq+0xc>
		*next = NULL;
   19f6a:	2100      	movs	r1, #0
   19f6c:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   19f6e:	b163      	cbz	r3, 19f8a <_flash_used+0x2>
   19f70:	b190      	cbz	r0, 19f98 <_flash_used+0x10>
   19f72:	1e41      	subs	r1, r0, #1
   19f74:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   19f76:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   19f7a:	4604      	mov	r4, r0
   19f7c:	f810 3b01 	ldrb.w	r3, [r0], #1
   19f80:	b15d      	cbz	r5, 19f9a <_flash_used+0x12>
   19f82:	429d      	cmp	r5, r3
   19f84:	d101      	bne.n	19f8a <_flash_used+0x2>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   19f86:	2d3d      	cmp	r5, #61	; 0x3d
   19f88:	d1f5      	bne.n	19f76 <settings_name_steq+0x14>
	return 0;
   19f8a:	2000      	movs	r0, #0
   19f8c:	e004      	b.n	19f98 <_flash_used+0x10>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   19f8e:	2b3d      	cmp	r3, #61	; 0x3d
   19f90:	d008      	beq.n	19fa4 <_flash_used+0x1c>
   19f92:	fab3 f083 	clz	r0, r3
   19f96:	0940      	lsrs	r0, r0, #5
}
   19f98:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   19f9a:	2b2f      	cmp	r3, #47	; 0x2f
   19f9c:	d1f7      	bne.n	19f8e <_flash_used+0x6>
		if (next) {
   19f9e:	b10a      	cbz	r2, 19fa4 <_flash_used+0x1c>
			*next = name + 1;
   19fa0:	3401      	adds	r4, #1
   19fa2:	6014      	str	r4, [r2, #0]
		return 1;
   19fa4:	2001      	movs	r0, #1
   19fa6:	e7f7      	b.n	19f98 <_flash_used+0x10>

00019fa8 <settings_name_next>:
{
   19fa8:	4603      	mov	r3, r0
   19faa:	b530      	push	{r4, r5, lr}
	if (next) {
   19fac:	b109      	cbz	r1, 19fb2 <settings_name_next+0xa>
		*next = NULL;
   19fae:	2200      	movs	r2, #0
   19fb0:	600a      	str	r2, [r1, #0]
	if (!name) {
   19fb2:	b16b      	cbz	r3, 19fd0 <settings_name_next+0x28>
   19fb4:	461a      	mov	r2, r3
   19fb6:	4614      	mov	r4, r2
   19fb8:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   19fba:	f812 5b01 	ldrb.w	r5, [r2], #1
   19fbe:	b135      	cbz	r5, 19fce <settings_name_next+0x26>
   19fc0:	2d3d      	cmp	r5, #61	; 0x3d
   19fc2:	d004      	beq.n	19fce <settings_name_next+0x26>
   19fc4:	2d2f      	cmp	r5, #47	; 0x2f
   19fc6:	d1f6      	bne.n	19fb6 <settings_name_next+0xe>
		if (next) {
   19fc8:	b109      	cbz	r1, 19fce <settings_name_next+0x26>
			*next = name + 1;
   19fca:	3401      	adds	r4, #1
   19fcc:	600c      	str	r4, [r1, #0]
}
   19fce:	bd30      	pop	{r4, r5, pc}
		return 0;
   19fd0:	4618      	mov	r0, r3
   19fd2:	e7fc      	b.n	19fce <settings_name_next+0x26>

00019fd4 <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   19fd4:	2000      	movs	r0, #0
   19fd6:	4770      	bx	lr

00019fd8 <set_on_state>:
	__asm__ volatile(
   19fd8:	f04f 0320 	mov.w	r3, #32
   19fdc:	f3ef 8211 	mrs	r2, BASEPRI
   19fe0:	f383 8811 	msr	BASEPRI, r3
   19fe4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   19fe8:	6803      	ldr	r3, [r0, #0]
   19fea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19fee:	f043 0302 	orr.w	r3, r3, #2
   19ff2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   19ff4:	f382 8811 	msr	BASEPRI, r2
   19ff8:	f3bf 8f6f 	isb	sy
}
   19ffc:	4770      	bx	lr

00019ffe <async_start>:
{
   19ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a000:	9f06      	ldr	r7, [sp, #24]
   1a002:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   1a004:	68c4      	ldr	r4, [r0, #12]
	return &data->subsys[type];
   1a006:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1a008:	f04f 0020 	mov.w	r0, #32
   1a00c:	f3ef 8c11 	mrs	ip, BASEPRI
   1a010:	f380 8811 	msr	BASEPRI, r0
   1a014:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1a018:	260c      	movs	r6, #12
   1a01a:	fb06 4601 	mla	r6, r6, r1, r4
   1a01e:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1a022:	f000 0e07 	and.w	lr, r0, #7
   1a026:	f1be 0f01 	cmp.w	lr, #1
   1a02a:	d111      	bne.n	1a050 <async_start+0x52>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1a02c:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
	int err = 0;
   1a030:	2600      	movs	r6, #0
	__asm__ volatile(
   1a032:	f38c 8811 	msr	BASEPRI, ip
   1a036:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1a03a:	b93e      	cbnz	r6, 1a04c <async_start+0x4e>
	subdata->cb = cb;
   1a03c:	200c      	movs	r0, #12
   1a03e:	4341      	muls	r1, r0
   1a040:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1a042:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1a046:	686b      	ldr	r3, [r5, #4]
   1a048:	585b      	ldr	r3, [r3, r1]
   1a04a:	4798      	blx	r3
}
   1a04c:	4630      	mov	r0, r6
   1a04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1a050:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1a054:	4287      	cmp	r7, r0
   1a056:	bf14      	ite	ne
   1a058:	f04f 36ff 	movne.w	r6, #4294967295
   1a05c:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   1a060:	e7e7      	b.n	1a032 <async_start+0x34>

0001a062 <api_start>:
{
   1a062:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1a064:	2480      	movs	r4, #128	; 0x80
   1a066:	9400      	str	r4, [sp, #0]
   1a068:	f7ff ffc9 	bl	19ffe <async_start>
}
   1a06c:	b002      	add	sp, #8
   1a06e:	bd10      	pop	{r4, pc}

0001a070 <onoff_started_callback>:
	return &data->mgr[type];
   1a070:	68c0      	ldr	r0, [r0, #12]
   1a072:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1a074:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1a078:	2100      	movs	r1, #0
   1a07a:	4710      	bx	r2

0001a07c <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1a07c:	2003      	movs	r0, #3
   1a07e:	f7fb be85 	b.w	15d8c <nrfx_clock_start>

0001a082 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1a082:	2002      	movs	r0, #2
   1a084:	f7fb be82 	b.w	15d8c <nrfx_clock_start>

0001a088 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1a088:	2000      	movs	r0, #0
   1a08a:	f7fb be7f 	b.w	15d8c <nrfx_clock_start>

0001a08e <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1a08e:	2003      	movs	r0, #3
   1a090:	f7fb bee6 	b.w	15e60 <nrfx_clock_stop>

0001a094 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1a094:	2002      	movs	r0, #2
   1a096:	f7fb bee3 	b.w	15e60 <nrfx_clock_stop>

0001a09a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1a09a:	2000      	movs	r0, #0
   1a09c:	f7fb bee0 	b.w	15e60 <nrfx_clock_stop>

0001a0a0 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1a0a0:	2280      	movs	r2, #128	; 0x80
   1a0a2:	f7f1 b9c7 	b.w	b434 <stop>

0001a0a6 <blocking_start_callback>:
{
   1a0a6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1a0a8:	f7fe ba8a 	b.w	185c0 <z_impl_k_sem_give>

0001a0ac <bt_rpmsg_open>:
{
   1a0ac:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   1a0ae:	f7f1 fcc1 	bl	ba34 <bt_rpmsg_platform_endpoint_is_bound>
   1a0b2:	b108      	cbz	r0, 1a0b8 <bt_rpmsg_open+0xc>
}
   1a0b4:	2000      	movs	r0, #0
   1a0b6:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   1a0b8:	2100      	movs	r1, #0
   1a0ba:	2021      	movs	r0, #33	; 0x21
   1a0bc:	f7fe fa4a 	bl	18554 <z_impl_k_sleep>
   1a0c0:	e7f5      	b.n	1a0ae <bt_rpmsg_open+0x2>

0001a0c2 <endpoint_cb>:
{
   1a0c2:	b508      	push	{r3, lr}
   1a0c4:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   1a0c6:	4611      	mov	r1, r2
   1a0c8:	f7f1 fbca 	bl	b860 <bt_rpmsg_rx>
}
   1a0cc:	2000      	movs	r0, #0
   1a0ce:	bd08      	pop	{r3, pc}

0001a0d0 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1a0d0:	4770      	bx	lr

0001a0d2 <attr_find_by_handle>:
{
   1a0d2:	b570      	push	{r4, r5, r6, lr}
   1a0d4:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   1a0d6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1a0da:	b1a8      	cbz	r0, 1a108 <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   1a0dc:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   1a0de:	3801      	subs	r0, #1
	while (upper >= lower) {
   1a0e0:	4286      	cmp	r6, r0
   1a0e2:	dd01      	ble.n	1a0e8 <attr_find_by_handle+0x16>
		return NULL;
   1a0e4:	2000      	movs	r0, #0
   1a0e6:	e00f      	b.n	1a108 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   1a0e8:	1832      	adds	r2, r6, r0
   1a0ea:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1a0ee:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   1a0f0:	1cd5      	adds	r5, r2, #3
   1a0f2:	00eb      	lsls	r3, r5, #3
   1a0f4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   1a0f8:	892d      	ldrh	r5, [r5, #8]
   1a0fa:	428d      	cmp	r5, r1
   1a0fc:	d201      	bcs.n	1a102 <attr_find_by_handle+0x30>
			lower = m + 1;
   1a0fe:	1c56      	adds	r6, r2, #1
   1a100:	e7ee      	b.n	1a0e0 <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   1a102:	d802      	bhi.n	1a10a <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   1a104:	3304      	adds	r3, #4
   1a106:	18e0      	adds	r0, r4, r3
}
   1a108:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   1a10a:	1e50      	subs	r0, r2, #1
   1a10c:	e7e8      	b.n	1a0e0 <attr_find_by_handle+0xe>

0001a10e <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   1a10e:	2300      	movs	r3, #0
{
   1a110:	b510      	push	{r4, lr}
   1a112:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   1a114:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1a118:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   1a11c:	b910      	cbnz	r0, 1a124 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   1a11e:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   1a122:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a124:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	return node->next;
   1a128:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a12a:	4290      	cmp	r0, r2
	list->head = node;
   1a12c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   1a130:	bf08      	it	eq
   1a132:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   1a136:	f003 f908 	bl	1d34a <k_free>
   1a13a:	e7ed      	b.n	1a118 <svc_attr_memory_release+0xa>

0001a13c <atomic_and>:
{
   1a13c:	4603      	mov	r3, r0
}
   1a13e:	e8d3 0fef 	ldaex	r0, [r3]
   1a142:	ea00 0201 	and.w	r2, r0, r1
   1a146:	e8c3 2fec 	stlex	ip, r2, [r3]
   1a14a:	f1bc 0f00 	cmp.w	ip, #0
   1a14e:	d1f6      	bne.n	1a13e <atomic_and+0x2>
   1a150:	4770      	bx	lr

0001a152 <discovery_complete_not_found>:
{
   1a152:	b510      	push	{r4, lr}
   1a154:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   1a156:	f7ff ffda 	bl	1a10e <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a15a:	f06f 0101 	mvn.w	r1, #1
   1a15e:	f504 709c 	add.w	r0, r4, #312	; 0x138
   1a162:	f7ff ffeb 	bl	1a13c <atomic_and>
	if (dm->callback->service_not_found) {
   1a166:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1a16a:	685b      	ldr	r3, [r3, #4]
   1a16c:	b123      	cbz	r3, 1a178 <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   1a16e:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   1a172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   1a176:	4718      	bx	r3
}
   1a178:	bd10      	pop	{r4, pc}

0001a17a <bt_gatt_dm_attr_service_val>:
{
   1a17a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1a17c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a180:	2400      	movs	r4, #0
{
   1a182:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1a184:	6801      	ldr	r1, [r0, #0]
   1a186:	4668      	mov	r0, sp
   1a188:	f88d 4000 	strb.w	r4, [sp]
   1a18c:	f8ad 3002 	strh.w	r3, [sp, #2]
   1a190:	f000 fea0 	bl	1aed4 <bt_uuid_cmp>
   1a194:	b918      	cbnz	r0, 1a19e <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   1a196:	6828      	ldr	r0, [r5, #0]
   1a198:	3808      	subs	r0, #8
}
   1a19a:	b003      	add	sp, #12
   1a19c:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   1a19e:	f642 0301 	movw	r3, #10241	; 0x2801
   1a1a2:	6829      	ldr	r1, [r5, #0]
   1a1a4:	a801      	add	r0, sp, #4
   1a1a6:	f88d 4004 	strb.w	r4, [sp, #4]
   1a1aa:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a1ae:	f000 fe91 	bl	1aed4 <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1a1b2:	2800      	cmp	r0, #0
   1a1b4:	d0ef      	beq.n	1a196 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   1a1b6:	4620      	mov	r0, r4
   1a1b8:	e7ef      	b.n	1a19a <bt_gatt_dm_attr_service_val+0x20>

0001a1ba <bt_gatt_dm_attr_chrc_val>:
{
   1a1ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1a1bc:	f642 0303 	movw	r3, #10243	; 0x2803
   1a1c0:	2400      	movs	r4, #0
{
   1a1c2:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1a1c4:	6801      	ldr	r1, [r0, #0]
   1a1c6:	a801      	add	r0, sp, #4
   1a1c8:	f88d 4004 	strb.w	r4, [sp, #4]
   1a1cc:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a1d0:	f000 fe80 	bl	1aed4 <bt_uuid_cmp>
   1a1d4:	b918      	cbnz	r0, 1a1de <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   1a1d6:	6828      	ldr	r0, [r5, #0]
   1a1d8:	3808      	subs	r0, #8
}
   1a1da:	b003      	add	sp, #12
   1a1dc:	bd30      	pop	{r4, r5, pc}
	return NULL;
   1a1de:	4620      	mov	r0, r4
   1a1e0:	e7fb      	b.n	1a1da <bt_gatt_dm_attr_chrc_val+0x20>

0001a1e2 <bt_gatt_dm_conn_get>:
}
   1a1e2:	6800      	ldr	r0, [r0, #0]
   1a1e4:	4770      	bx	lr

0001a1e6 <bt_gatt_dm_char_next>:
{
   1a1e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   1a1e8:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   1a1ec:	b131      	cbz	r1, 1a1fc <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   1a1ee:	42a9      	cmp	r1, r5
   1a1f0:	d203      	bcs.n	1a1fa <bt_gatt_dm_char_next+0x14>
	return NULL;
   1a1f2:	2500      	movs	r5, #0
}
   1a1f4:	4628      	mov	r0, r5
   1a1f6:	b003      	add	sp, #12
   1a1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a1fa:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1a1fc:	2600      	movs	r6, #0
   1a1fe:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   1a202:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   1a206:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1a20a:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   1a20e:	3508      	adds	r5, #8
   1a210:	42ac      	cmp	r4, r5
   1a212:	d9ee      	bls.n	1a1f2 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1a214:	6829      	ldr	r1, [r5, #0]
   1a216:	a801      	add	r0, sp, #4
   1a218:	f88d 6004 	strb.w	r6, [sp, #4]
   1a21c:	f8ad 7006 	strh.w	r7, [sp, #6]
   1a220:	f000 fe58 	bl	1aed4 <bt_uuid_cmp>
   1a224:	2800      	cmp	r0, #0
   1a226:	d1f2      	bne.n	1a20e <bt_gatt_dm_char_next+0x28>
   1a228:	e7e4      	b.n	1a1f4 <bt_gatt_dm_char_next+0xe>

0001a22a <bt_gatt_dm_attr_next>:
{
   1a22a:	4602      	mov	r2, r0
		prev = dm->attrs;
   1a22c:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   1a230:	b111      	cbz	r1, 1a238 <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   1a232:	4299      	cmp	r1, r3
   1a234:	d30b      	bcc.n	1a24e <bt_gatt_dm_attr_next+0x24>
   1a236:	460b      	mov	r3, r1
		if (++prev < end) {
   1a238:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   1a23c:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   1a240:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1a244:	321c      	adds	r2, #28
	return NULL;
   1a246:	4290      	cmp	r0, r2
   1a248:	bf28      	it	cs
   1a24a:	2000      	movcs	r0, #0
   1a24c:	4770      	bx	lr
   1a24e:	2000      	movs	r0, #0
}
   1a250:	4770      	bx	lr

0001a252 <bt_gatt_dm_desc_next>:
{
   1a252:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   1a254:	f7ff ffe9 	bl	1a22a <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   1a258:	4604      	mov	r4, r0
   1a25a:	b158      	cbz	r0, 1a274 <bt_gatt_dm_desc_next+0x22>
   1a25c:	2300      	movs	r3, #0
   1a25e:	f88d 3004 	strb.w	r3, [sp, #4]
   1a262:	f642 0303 	movw	r3, #10243	; 0x2803
   1a266:	6801      	ldr	r1, [r0, #0]
   1a268:	a801      	add	r0, sp, #4
   1a26a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a26e:	f000 fe31 	bl	1aed4 <bt_uuid_cmp>
   1a272:	b900      	cbnz	r0, 1a276 <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   1a274:	2400      	movs	r4, #0
}
   1a276:	4620      	mov	r0, r4
   1a278:	b002      	add	sp, #8
   1a27a:	bd10      	pop	{r4, pc}

0001a27c <bt_gatt_dm_desc_by_uuid>:
{
   1a27c:	b570      	push	{r4, r5, r6, lr}
   1a27e:	4605      	mov	r5, r0
   1a280:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   1a282:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   1a284:	4621      	mov	r1, r4
   1a286:	4628      	mov	r0, r5
   1a288:	f7ff ffe3 	bl	1a252 <bt_gatt_dm_desc_next>
   1a28c:	4604      	mov	r4, r0
   1a28e:	b128      	cbz	r0, 1a29c <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   1a290:	4630      	mov	r0, r6
   1a292:	6821      	ldr	r1, [r4, #0]
   1a294:	f000 fe1e 	bl	1aed4 <bt_uuid_cmp>
   1a298:	2800      	cmp	r0, #0
   1a29a:	d1f3      	bne.n	1a284 <bt_gatt_dm_desc_by_uuid+0x8>
}
   1a29c:	4620      	mov	r0, r4
   1a29e:	bd70      	pop	{r4, r5, r6, pc}

0001a2a0 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   1a2a0:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1a2a2:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   1a2a6:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a2a8:	f06f 0102 	mvn.w	r1, #2
   1a2ac:	4628      	mov	r0, r5
   1a2ae:	f7ff ff45 	bl	1a13c <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1a2b2:	0783      	lsls	r3, r0, #30
   1a2b4:	d509      	bpl.n	1a2ca <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   1a2b6:	4620      	mov	r0, r4
   1a2b8:	f7ff ff29 	bl	1a10e <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a2bc:	f06f 0101 	mvn.w	r1, #1
   1a2c0:	4628      	mov	r0, r5
   1a2c2:	f7ff ff3b 	bl	1a13c <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   1a2c6:	2000      	movs	r0, #0
}
   1a2c8:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1a2ca:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1a2ce:	e7fb      	b.n	1a2c8 <bt_gatt_dm_data_release+0x28>

0001a2d0 <bt_scan_stop>:
	return bt_le_scan_stop();
   1a2d0:	f7f5 bf2a 	b.w	10128 <bt_le_scan_stop>

0001a2d4 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1a2d4:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1a2d6:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1a2d8:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1a2da:	bf9c      	itt	ls
   1a2dc:	6880      	ldrls	r0, [r0, #8]
   1a2de:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1a2e0:	3b01      	subs	r3, #1
   1a2e2:	1a98      	subs	r0, r3, r2
}
   1a2e4:	4770      	bx	lr

0001a2e6 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1a2e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1a2ea:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1a2ee:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1a2f0:	eba9 0804 	sub.w	r8, r9, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a2f4:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1a2f6:	4590      	cmp	r8, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a2f8:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1a2fa:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1a2fc:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1a2fe:	d904      	bls.n	1a30a <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1a300:	f000 fd73 	bl	1adea <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1a304:	60ec      	str	r4, [r5, #12]
}
   1a306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a30a:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1a30c:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a310:	f000 fd6b 	bl	1adea <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1a314:	4622      	mov	r2, r4
   1a316:	6868      	ldr	r0, [r5, #4]
   1a318:	eb07 0108 	add.w	r1, r7, r8
   1a31c:	e7f0      	b.n	1a300 <_WriteNoCheck+0x1a>

0001a31e <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1a31e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a322:	4606      	mov	r6, r0
   1a324:	4689      	mov	r9, r1
   1a326:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1a328:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   1a32c:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1a32e:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1a330:	68b3      	ldr	r3, [r6, #8]
    if (RdOff > WrOff) {
   1a332:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1a334:	bf28      	it	cs
   1a336:	18e4      	addcs	r4, r4, r3
   1a338:	3c01      	subs	r4, #1
   1a33a:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1a33c:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1a33e:	42bc      	cmp	r4, r7
   1a340:	bf28      	it	cs
   1a342:	463c      	movcs	r4, r7
   1a344:	4294      	cmp	r4, r2
   1a346:	bf28      	it	cs
   1a348:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1a34a:	6870      	ldr	r0, [r6, #4]
   1a34c:	4649      	mov	r1, r9
   1a34e:	4428      	add	r0, r5
   1a350:	4622      	mov	r2, r4
   1a352:	f000 fd4a 	bl	1adea <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1a356:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1a358:	4425      	add	r5, r4
      WrOff = 0u;
   1a35a:	42ab      	cmp	r3, r5
   1a35c:	bf08      	it	eq
   1a35e:	2500      	moveq	r5, #0
  } while (NumBytes);
   1a360:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1a362:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1a364:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1a366:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1a368:	d1e1      	bne.n	1a32e <_WriteBlocking+0x10>
}
   1a36a:	4640      	mov	r0, r8
   1a36c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001a370 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1a370:	f7f2 ba98 	b.w	c8a4 <_DoInit>

0001a374 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1a374:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1a376:	f7ff fffb 	bl	1a370 <SEGGER_RTT_Init>

	return 0;
}
   1a37a:	2000      	movs	r0, #0
   1a37c:	bd08      	pop	{r3, pc}

0001a37e <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1a37e:	b538      	push	{r3, r4, r5, lr}
   1a380:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1a382:	42ab      	cmp	r3, r5
{
   1a384:	4611      	mov	r1, r2
   1a386:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1a388:	d804      	bhi.n	1a394 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1a38a:	461a      	mov	r2, r3
   1a38c:	f000 fd2d 	bl	1adea <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1a390:	4620      	mov	r0, r4
   1a392:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1a394:	2400      	movs	r4, #0
   1a396:	e7fb      	b.n	1a390 <_copy+0x12>

0001a398 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1a398:	f000 bd52 	b.w	1ae40 <memset>

0001a39c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1a39c:	09c3      	lsrs	r3, r0, #7
   1a39e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a3a2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1a3a6:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1a3aa:	b2c0      	uxtb	r0, r0
   1a3ac:	4770      	bx	lr

0001a3ae <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1a3ae:	78cb      	ldrb	r3, [r1, #3]
   1a3b0:	7802      	ldrb	r2, [r0, #0]
   1a3b2:	4053      	eors	r3, r2
   1a3b4:	7003      	strb	r3, [r0, #0]
   1a3b6:	884b      	ldrh	r3, [r1, #2]
   1a3b8:	7842      	ldrb	r2, [r0, #1]
   1a3ba:	4053      	eors	r3, r2
   1a3bc:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1a3be:	680a      	ldr	r2, [r1, #0]
   1a3c0:	7883      	ldrb	r3, [r0, #2]
   1a3c2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a3c6:	7083      	strb	r3, [r0, #2]
   1a3c8:	680a      	ldr	r2, [r1, #0]
   1a3ca:	78c3      	ldrb	r3, [r0, #3]
   1a3cc:	4053      	eors	r3, r2
   1a3ce:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1a3d0:	79cb      	ldrb	r3, [r1, #7]
   1a3d2:	7902      	ldrb	r2, [r0, #4]
   1a3d4:	4053      	eors	r3, r2
   1a3d6:	7103      	strb	r3, [r0, #4]
   1a3d8:	88cb      	ldrh	r3, [r1, #6]
   1a3da:	7942      	ldrb	r2, [r0, #5]
   1a3dc:	4053      	eors	r3, r2
   1a3de:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1a3e0:	684a      	ldr	r2, [r1, #4]
   1a3e2:	7983      	ldrb	r3, [r0, #6]
   1a3e4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a3e8:	7183      	strb	r3, [r0, #6]
   1a3ea:	684a      	ldr	r2, [r1, #4]
   1a3ec:	79c3      	ldrb	r3, [r0, #7]
   1a3ee:	4053      	eors	r3, r2
   1a3f0:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1a3f2:	7acb      	ldrb	r3, [r1, #11]
   1a3f4:	7a02      	ldrb	r2, [r0, #8]
   1a3f6:	4053      	eors	r3, r2
   1a3f8:	7203      	strb	r3, [r0, #8]
   1a3fa:	7a42      	ldrb	r2, [r0, #9]
   1a3fc:	894b      	ldrh	r3, [r1, #10]
   1a3fe:	4053      	eors	r3, r2
   1a400:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1a402:	688a      	ldr	r2, [r1, #8]
   1a404:	7a83      	ldrb	r3, [r0, #10]
   1a406:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a40a:	7283      	strb	r3, [r0, #10]
   1a40c:	688a      	ldr	r2, [r1, #8]
   1a40e:	7ac3      	ldrb	r3, [r0, #11]
   1a410:	4053      	eors	r3, r2
   1a412:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1a414:	7bcb      	ldrb	r3, [r1, #15]
   1a416:	7b02      	ldrb	r2, [r0, #12]
   1a418:	4053      	eors	r3, r2
   1a41a:	7303      	strb	r3, [r0, #12]
   1a41c:	89cb      	ldrh	r3, [r1, #14]
   1a41e:	7b42      	ldrb	r2, [r0, #13]
   1a420:	4053      	eors	r3, r2
   1a422:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1a424:	68ca      	ldr	r2, [r1, #12]
   1a426:	7b83      	ldrb	r3, [r0, #14]
   1a428:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a42c:	7383      	strb	r3, [r0, #14]
   1a42e:	68ca      	ldr	r2, [r1, #12]
   1a430:	7bc3      	ldrb	r3, [r0, #15]
   1a432:	4053      	eors	r3, r2
   1a434:	73c3      	strb	r3, [r0, #15]
}
   1a436:	4770      	bx	lr

0001a438 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1a438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1a43a:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1a43c:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1a43e:	f88d 2000 	strb.w	r2, [sp]
   1a442:	7942      	ldrb	r2, [r0, #5]
   1a444:	f88d 2001 	strb.w	r2, [sp, #1]
   1a448:	7a82      	ldrb	r2, [r0, #10]
   1a44a:	f88d 2002 	strb.w	r2, [sp, #2]
   1a44e:	7bc2      	ldrb	r2, [r0, #15]
   1a450:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1a454:	7902      	ldrb	r2, [r0, #4]
   1a456:	f88d 2004 	strb.w	r2, [sp, #4]
   1a45a:	7a42      	ldrb	r2, [r0, #9]
   1a45c:	f88d 2005 	strb.w	r2, [sp, #5]
   1a460:	7b82      	ldrb	r2, [r0, #14]
   1a462:	f88d 2006 	strb.w	r2, [sp, #6]
   1a466:	78c2      	ldrb	r2, [r0, #3]
   1a468:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1a46c:	7a02      	ldrb	r2, [r0, #8]
   1a46e:	f88d 2008 	strb.w	r2, [sp, #8]
   1a472:	7b42      	ldrb	r2, [r0, #13]
   1a474:	f88d 2009 	strb.w	r2, [sp, #9]
   1a478:	7882      	ldrb	r2, [r0, #2]
   1a47a:	f88d 200a 	strb.w	r2, [sp, #10]
   1a47e:	79c2      	ldrb	r2, [r0, #7]
   1a480:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1a484:	7b02      	ldrb	r2, [r0, #12]
   1a486:	f88d 200c 	strb.w	r2, [sp, #12]
   1a48a:	7842      	ldrb	r2, [r0, #1]
   1a48c:	f88d 200d 	strb.w	r2, [sp, #13]
   1a490:	7982      	ldrb	r2, [r0, #6]
   1a492:	f88d 200e 	strb.w	r2, [sp, #14]
   1a496:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1a49a:	2310      	movs	r3, #16
   1a49c:	466a      	mov	r2, sp
   1a49e:	4619      	mov	r1, r3
   1a4a0:	f7ff ff6d 	bl	1a37e <_copy>
}
   1a4a4:	b005      	add	sp, #20
   1a4a6:	f85d fb04 	ldr.w	pc, [sp], #4

0001a4aa <mult_row_column>:
{
   1a4aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a4ac:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1a4ae:	7808      	ldrb	r0, [r1, #0]
{
   1a4b0:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1a4b2:	f7ff ff73 	bl	1a39c <_double_byte>
   1a4b6:	4605      	mov	r5, r0
   1a4b8:	7860      	ldrb	r0, [r4, #1]
   1a4ba:	f7ff ff6f 	bl	1a39c <_double_byte>
   1a4be:	78a2      	ldrb	r2, [r4, #2]
   1a4c0:	7863      	ldrb	r3, [r4, #1]
   1a4c2:	4053      	eors	r3, r2
   1a4c4:	78e2      	ldrb	r2, [r4, #3]
   1a4c6:	4053      	eors	r3, r2
   1a4c8:	405d      	eors	r5, r3
   1a4ca:	4045      	eors	r5, r0
   1a4cc:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1a4ce:	7860      	ldrb	r0, [r4, #1]
   1a4d0:	7827      	ldrb	r7, [r4, #0]
   1a4d2:	f7ff ff63 	bl	1a39c <_double_byte>
   1a4d6:	4605      	mov	r5, r0
   1a4d8:	78a0      	ldrb	r0, [r4, #2]
   1a4da:	f7ff ff5f 	bl	1a39c <_double_byte>
   1a4de:	78a3      	ldrb	r3, [r4, #2]
   1a4e0:	405f      	eors	r7, r3
   1a4e2:	78e3      	ldrb	r3, [r4, #3]
   1a4e4:	405f      	eors	r7, r3
   1a4e6:	407d      	eors	r5, r7
   1a4e8:	4045      	eors	r5, r0
   1a4ea:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1a4ec:	78a0      	ldrb	r0, [r4, #2]
   1a4ee:	7865      	ldrb	r5, [r4, #1]
   1a4f0:	7827      	ldrb	r7, [r4, #0]
   1a4f2:	f7ff ff53 	bl	1a39c <_double_byte>
   1a4f6:	406f      	eors	r7, r5
   1a4f8:	4605      	mov	r5, r0
   1a4fa:	78e0      	ldrb	r0, [r4, #3]
   1a4fc:	f7ff ff4e 	bl	1a39c <_double_byte>
   1a500:	78e3      	ldrb	r3, [r4, #3]
   1a502:	405f      	eors	r7, r3
   1a504:	407d      	eors	r5, r7
   1a506:	4045      	eors	r5, r0
   1a508:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1a50a:	7820      	ldrb	r0, [r4, #0]
   1a50c:	f7ff ff46 	bl	1a39c <_double_byte>
   1a510:	7863      	ldrb	r3, [r4, #1]
   1a512:	7825      	ldrb	r5, [r4, #0]
   1a514:	405d      	eors	r5, r3
   1a516:	78a3      	ldrb	r3, [r4, #2]
   1a518:	405d      	eors	r5, r3
   1a51a:	4045      	eors	r5, r0
   1a51c:	78e0      	ldrb	r0, [r4, #3]
   1a51e:	f7ff ff3d 	bl	1a39c <_double_byte>
   1a522:	b2ed      	uxtb	r5, r5
   1a524:	4045      	eors	r5, r0
   1a526:	70f5      	strb	r5, [r6, #3]
}
   1a528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a52a <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1a52a:	b570      	push	{r4, r5, r6, lr}
   1a52c:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1a52e:	4605      	mov	r5, r0
{
   1a530:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1a532:	2800      	cmp	r0, #0
   1a534:	d049      	beq.n	1a5ca <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1a536:	2900      	cmp	r1, #0
   1a538:	d049      	beq.n	1a5ce <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1a53a:	2a00      	cmp	r2, #0
   1a53c:	d049      	beq.n	1a5d2 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1a53e:	2310      	movs	r3, #16
   1a540:	460a      	mov	r2, r1
   1a542:	4668      	mov	r0, sp
   1a544:	4619      	mov	r1, r3
   1a546:	f7ff ff1a 	bl	1a37e <_copy>
	add_round_key(state, s->words);
   1a54a:	4621      	mov	r1, r4
   1a54c:	4668      	mov	r0, sp
   1a54e:	f7ff ff2e 	bl	1a3ae <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1a552:	3410      	adds	r4, #16
   1a554:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1a558:	4668      	mov	r0, sp
   1a55a:	f7f2 fa03 	bl	c964 <sub_bytes>
		shift_rows(state);
   1a55e:	4668      	mov	r0, sp
   1a560:	f7ff ff6a 	bl	1a438 <shift_rows>
	mult_row_column(t, s);
   1a564:	4669      	mov	r1, sp
   1a566:	a804      	add	r0, sp, #16
   1a568:	f7ff ff9f 	bl	1a4aa <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1a56c:	a901      	add	r1, sp, #4
   1a56e:	a805      	add	r0, sp, #20
   1a570:	f7ff ff9b 	bl	1a4aa <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1a574:	a902      	add	r1, sp, #8
   1a576:	a806      	add	r0, sp, #24
   1a578:	f7ff ff97 	bl	1a4aa <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1a57c:	a903      	add	r1, sp, #12
   1a57e:	a807      	add	r0, sp, #28
   1a580:	f7ff ff93 	bl	1a4aa <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1a584:	2310      	movs	r3, #16
   1a586:	4668      	mov	r0, sp
   1a588:	4619      	mov	r1, r3
   1a58a:	eb0d 0203 	add.w	r2, sp, r3
   1a58e:	f7ff fef6 	bl	1a37e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1a592:	4621      	mov	r1, r4
   1a594:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1a596:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1a598:	f7ff ff09 	bl	1a3ae <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1a59c:	42a6      	cmp	r6, r4
   1a59e:	d1db      	bne.n	1a558 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1a5a0:	f7f2 f9e0 	bl	c964 <sub_bytes>
	shift_rows(state);
   1a5a4:	4668      	mov	r0, sp
   1a5a6:	f7ff ff47 	bl	1a438 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1a5aa:	4631      	mov	r1, r6
   1a5ac:	4668      	mov	r0, sp
   1a5ae:	f7ff fefe 	bl	1a3ae <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1a5b2:	2310      	movs	r3, #16
   1a5b4:	466a      	mov	r2, sp
   1a5b6:	4619      	mov	r1, r3
   1a5b8:	4628      	mov	r0, r5
   1a5ba:	f7ff fee0 	bl	1a37e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1a5be:	4668      	mov	r0, sp
   1a5c0:	2210      	movs	r2, #16
   1a5c2:	2100      	movs	r1, #0
   1a5c4:	f7ff fee8 	bl	1a398 <_set>

	return TC_CRYPTO_SUCCESS;
   1a5c8:	2001      	movs	r0, #1
}
   1a5ca:	b008      	add	sp, #32
   1a5cc:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1a5ce:	4608      	mov	r0, r1
   1a5d0:	e7fb      	b.n	1a5ca <tc_aes_encrypt+0xa0>
   1a5d2:	4610      	mov	r0, r2
   1a5d4:	e7f9      	b.n	1a5ca <tc_aes_encrypt+0xa0>

0001a5d6 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a5d6:	460a      	mov	r2, r1
{
   1a5d8:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a5da:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1a5de:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a5e0:	2b00      	cmp	r3, #0
   1a5e2:	bfb4      	ite	lt
   1a5e4:	2387      	movlt	r3, #135	; 0x87
   1a5e6:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1a5e8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1a5ec:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1a5f0:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1a5f2:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1a5f6:	d002      	beq.n	1a5fe <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1a5f8:	7813      	ldrb	r3, [r2, #0]
   1a5fa:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1a5fc:	e7f4      	b.n	1a5e8 <gf_double+0x12>
	}
}
   1a5fe:	bd10      	pop	{r4, pc}

0001a600 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1a600:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1a602:	b120      	cbz	r0, 1a60e <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1a604:	2258      	movs	r2, #88	; 0x58
   1a606:	2100      	movs	r1, #0
   1a608:	f7ff fec6 	bl	1a398 <_set>
   1a60c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1a60e:	bd08      	pop	{r3, pc}

0001a610 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1a610:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1a612:	4604      	mov	r4, r0
   1a614:	b188      	cbz	r0, 1a63a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1a616:	2210      	movs	r2, #16
   1a618:	2100      	movs	r1, #0
   1a61a:	f7ff febd 	bl	1a398 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1a61e:	2210      	movs	r2, #16
   1a620:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a624:	2100      	movs	r1, #0
   1a626:	f7ff feb7 	bl	1a398 <_set>
	s->leftover_offset = 0;
   1a62a:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1a62c:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1a62e:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1a630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1a634:	2001      	movs	r0, #1
   1a636:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1a63a:	bd10      	pop	{r4, pc}

0001a63c <tc_cmac_setup>:
{
   1a63c:	b570      	push	{r4, r5, r6, lr}
   1a63e:	460d      	mov	r5, r1
   1a640:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1a642:	4604      	mov	r4, r0
   1a644:	b310      	cbz	r0, 1a68c <tc_cmac_setup+0x50>
   1a646:	b311      	cbz	r1, 1a68e <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1a648:	2258      	movs	r2, #88	; 0x58
   1a64a:	2100      	movs	r1, #0
   1a64c:	f7ff fea4 	bl	1a398 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1a650:	4629      	mov	r1, r5
   1a652:	4630      	mov	r0, r6
	s->sched = sched;
   1a654:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1a656:	f7f2 f991 	bl	c97c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1a65a:	2210      	movs	r2, #16
   1a65c:	2100      	movs	r1, #0
   1a65e:	4620      	mov	r0, r4
   1a660:	f7ff fe9a 	bl	1a398 <_set>
	gf_double (s->K1, s->iv);
   1a664:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a668:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a66a:	4621      	mov	r1, r4
   1a66c:	4620      	mov	r0, r4
   1a66e:	f7ff ff5c 	bl	1a52a <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1a672:	4621      	mov	r1, r4
   1a674:	4628      	mov	r0, r5
   1a676:	f7ff ffae 	bl	1a5d6 <gf_double>
	gf_double (s->K2, s->K1);
   1a67a:	4629      	mov	r1, r5
   1a67c:	f104 0020 	add.w	r0, r4, #32
   1a680:	f7ff ffa9 	bl	1a5d6 <gf_double>
	tc_cmac_init(s);
   1a684:	4620      	mov	r0, r4
   1a686:	f7ff ffc3 	bl	1a610 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1a68a:	2001      	movs	r0, #1
}
   1a68c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1a68e:	4608      	mov	r0, r1
   1a690:	e7fc      	b.n	1a68c <tc_cmac_setup+0x50>

0001a692 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1a692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a696:	460d      	mov	r5, r1
   1a698:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1a69a:	4604      	mov	r4, r0
   1a69c:	2800      	cmp	r0, #0
   1a69e:	d061      	beq.n	1a764 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1a6a0:	b912      	cbnz	r2, 1a6a8 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1a6a2:	2001      	movs	r0, #1
}
   1a6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1a6a8:	2900      	cmp	r1, #0
   1a6aa:	d05b      	beq.n	1a764 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1a6ac:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1a6b0:	ea53 0102 	orrs.w	r1, r3, r2
   1a6b4:	d056      	beq.n	1a764 <tc_cmac_update+0xd2>
	s->countdown--;
   1a6b6:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1a6b8:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1a6bc:	f142 32ff 	adc.w	r2, r2, #4294967295
   1a6c0:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1a6c4:	f1b8 0f00 	cmp.w	r8, #0
   1a6c8:	d02a      	beq.n	1a720 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1a6ca:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a6ce:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1a6d2:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a6d4:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1a6d6:	d208      	bcs.n	1a6ea <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a6d8:	462a      	mov	r2, r5
   1a6da:	4633      	mov	r3, r6
   1a6dc:	4631      	mov	r1, r6
   1a6de:	f7ff fe4e 	bl	1a37e <_copy>
			s->leftover_offset += data_length;
   1a6e2:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a6e4:	4432      	add	r2, r6
   1a6e6:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1a6e8:	e7db      	b.n	1a6a2 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1a6ea:	463b      	mov	r3, r7
   1a6ec:	462a      	mov	r2, r5
   1a6ee:	4639      	mov	r1, r7
   1a6f0:	f7ff fe45 	bl	1a37e <_copy>
		s->leftover_offset = 0;
   1a6f4:	2300      	movs	r3, #0
   1a6f6:	3e10      	subs	r6, #16
   1a6f8:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1a6fa:	4446      	add	r6, r8
		data += remaining_space;
   1a6fc:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a6fe:	1e63      	subs	r3, r4, #1
   1a700:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1a704:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a708:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a70c:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1a70e:	ea82 0200 	eor.w	r2, r2, r0
   1a712:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a714:	d1f6      	bne.n	1a704 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a716:	4621      	mov	r1, r4
   1a718:	4620      	mov	r0, r4
   1a71a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a71c:	f7ff ff05 	bl	1a52a <tc_aes_encrypt>
   1a720:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1a724:	2e10      	cmp	r6, #16
   1a726:	d80a      	bhi.n	1a73e <tc_cmac_update+0xac>
	if (data_length > 0) {
   1a728:	2e00      	cmp	r6, #0
   1a72a:	d0ba      	beq.n	1a6a2 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1a72c:	4633      	mov	r3, r6
   1a72e:	462a      	mov	r2, r5
   1a730:	4631      	mov	r1, r6
   1a732:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a736:	f7ff fe22 	bl	1a37e <_copy>
		s->leftover_offset = data_length;
   1a73a:	6466      	str	r6, [r4, #68]	; 0x44
   1a73c:	e7b1      	b.n	1a6a2 <tc_cmac_update+0x10>
   1a73e:	1e63      	subs	r3, r4, #1
   1a740:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1a742:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a746:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a74a:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1a74c:	ea82 0200 	eor.w	r2, r2, r0
   1a750:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a752:	d1f6      	bne.n	1a742 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a754:	4621      	mov	r1, r4
   1a756:	4620      	mov	r0, r4
   1a758:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a75a:	f7ff fee6 	bl	1a52a <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1a75e:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1a760:	3e10      	subs	r6, #16
   1a762:	e7df      	b.n	1a724 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1a764:	2000      	movs	r0, #0
   1a766:	e79d      	b.n	1a6a4 <tc_cmac_update+0x12>

0001a768 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1a768:	b570      	push	{r4, r5, r6, lr}
   1a76a:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1a76c:	4605      	mov	r5, r0
   1a76e:	b1f0      	cbz	r0, 1a7ae <tc_cmac_final+0x46>
   1a770:	b371      	cbz	r1, 1a7d0 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1a772:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1a774:	2a10      	cmp	r2, #16
   1a776:	d11b      	bne.n	1a7b0 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1a778:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a77a:	1e63      	subs	r3, r4, #1
   1a77c:	3901      	subs	r1, #1
   1a77e:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1a782:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a786:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a78a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1a78c:	ea82 0206 	eor.w	r2, r2, r6
   1a790:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1a794:	ea82 0206 	eor.w	r2, r2, r6
   1a798:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a79a:	d1f2      	bne.n	1a782 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1a79c:	4621      	mov	r1, r4
   1a79e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a7a0:	4628      	mov	r0, r5
   1a7a2:	f7ff fec2 	bl	1a52a <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1a7a6:	4620      	mov	r0, r4
   1a7a8:	f7ff ff2a 	bl	1a600 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1a7ac:	2001      	movs	r0, #1
}
   1a7ae:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1a7b0:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1a7b4:	2100      	movs	r1, #0
   1a7b6:	f1c2 0210 	rsb	r2, r2, #16
   1a7ba:	4420      	add	r0, r4
   1a7bc:	f7ff fdec 	bl	1a398 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1a7c0:	2280      	movs	r2, #128	; 0x80
   1a7c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1a7c4:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1a7c8:	4423      	add	r3, r4
   1a7ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1a7ce:	e7d4      	b.n	1a77a <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1a7d0:	4608      	mov	r0, r1
   1a7d2:	e7ec      	b.n	1a7ae <tc_cmac_final+0x46>

0001a7d4 <tc_sha256_update>:
{
   1a7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a7d6:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1a7d8:	b110      	cbz	r0, 1a7e0 <tc_sha256_update+0xc>
   1a7da:	b1f9      	cbz	r1, 1a81c <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1a7dc:	b90a      	cbnz	r2, 1a7e2 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1a7de:	2001      	movs	r0, #1
}
   1a7e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1a7e2:	2600      	movs	r6, #0
   1a7e4:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1a7e6:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   1a7ea:	42a5      	cmp	r5, r4
   1a7ec:	d0f7      	beq.n	1a7de <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   1a7ee:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1a7f0:	1c5a      	adds	r2, r3, #1
   1a7f2:	6682      	str	r2, [r0, #104]	; 0x68
   1a7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
   1a7f8:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1a7fa:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1a7fc:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1a800:	d9f3      	bls.n	1a7ea <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   1a802:	4639      	mov	r1, r7
   1a804:	f7f2 f90e 	bl	ca24 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1a808:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1a80c:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1a810:	f142 0200 	adc.w	r2, r2, #0
   1a814:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1a818:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1a81a:	e7e6      	b.n	1a7ea <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   1a81c:	4608      	mov	r0, r1
   1a81e:	e7df      	b.n	1a7e0 <tc_sha256_update+0xc>

0001a820 <tc_sha256_final>:
{
   1a820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a822:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1a824:	4605      	mov	r5, r0
   1a826:	2800      	cmp	r0, #0
   1a828:	d055      	beq.n	1a8d6 <tc_sha256_final+0xb6>
   1a82a:	2900      	cmp	r1, #0
   1a82c:	d054      	beq.n	1a8d8 <tc_sha256_final+0xb8>
	s->bits_hashed += (s->leftover_offset << 3);
   1a82e:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1a830:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1a834:	00d8      	lsls	r0, r3, #3
   1a836:	1812      	adds	r2, r2, r0
   1a838:	f141 0100 	adc.w	r1, r1, #0
   1a83c:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1a840:	2280      	movs	r2, #128	; 0x80
   1a842:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1a844:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1a846:	4423      	add	r3, r4
   1a848:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1a84a:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1a84e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1a852:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1a856:	d90a      	bls.n	1a86e <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1a858:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1a85c:	4639      	mov	r1, r7
   1a85e:	4430      	add	r0, r6
   1a860:	f7ff fd9a 	bl	1a398 <_set>
		compress(s->iv, s->leftover);
   1a864:	4631      	mov	r1, r6
   1a866:	4620      	mov	r0, r4
   1a868:	f7f2 f8dc 	bl	ca24 <compress>
		s->leftover_offset = 0;
   1a86c:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1a86e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1a870:	2100      	movs	r1, #0
   1a872:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1a876:	4430      	add	r0, r6
   1a878:	f7ff fd8e 	bl	1a398 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1a87c:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1a87e:	4631      	mov	r1, r6
   1a880:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1a882:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1a884:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1a886:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1a888:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1a88c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1a890:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1a892:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   1a894:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1a896:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1a89a:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1a89e:	f7f2 f8c1 	bl	ca24 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1a8a2:	1f26      	subs	r6, r4, #4
   1a8a4:	1d2b      	adds	r3, r5, #4
   1a8a6:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1a8aa:	f856 2f04 	ldr.w	r2, [r6, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1a8ae:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1a8b0:	0e11      	lsrs	r1, r2, #24
   1a8b2:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1a8b6:	0c11      	lsrs	r1, r2, #16
   1a8b8:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1a8bc:	0a11      	lsrs	r1, r2, #8
   1a8be:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1a8c2:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1a8c6:	4283      	cmp	r3, r0
   1a8c8:	d1ef      	bne.n	1a8aa <tc_sha256_final+0x8a>
	_set(s, 0, sizeof(*s));
   1a8ca:	4620      	mov	r0, r4
   1a8cc:	2270      	movs	r2, #112	; 0x70
   1a8ce:	2100      	movs	r1, #0
   1a8d0:	f7ff fd62 	bl	1a398 <_set>
	return TC_CRYPTO_SUCCESS;
   1a8d4:	2001      	movs	r0, #1
}
   1a8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1a8d8:	4608      	mov	r0, r1
   1a8da:	e7fc      	b.n	1a8d6 <tc_sha256_final+0xb6>

0001a8dc <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1a8dc:	b530      	push	{r4, r5, lr}
   1a8de:	1e43      	subs	r3, r0, #1
   1a8e0:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1a8e2:	42a9      	cmp	r1, r5
   1a8e4:	d106      	bne.n	1a8f4 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1a8e6:	2136      	movs	r1, #54	; 0x36
   1a8e8:	245c      	movs	r4, #92	; 0x5c
   1a8ea:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1a8ec:	1a13      	subs	r3, r2, r0
   1a8ee:	2b3f      	cmp	r3, #63	; 0x3f
   1a8f0:	d90c      	bls.n	1a90c <rekey+0x30>
	}
}
   1a8f2:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1a8f4:	780c      	ldrb	r4, [r1, #0]
   1a8f6:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1a8fa:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1a8fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   1a902:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1a906:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1a90a:	e7ea      	b.n	1a8e2 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1a90c:	f802 1b01 	strb.w	r1, [r2], #1
   1a910:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1a914:	e7ea      	b.n	1a8ec <rekey+0x10>

0001a916 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1a916:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a918:	460e      	mov	r6, r1
   1a91a:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1a91c:	4605      	mov	r5, r0
{
   1a91e:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1a920:	b1b8      	cbz	r0, 1a952 <tc_hmac_set_key+0x3c>
   1a922:	b341      	cbz	r1, 1a976 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1a924:	b34a      	cbz	r2, 1a97a <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1a926:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1a928:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1a92c:	d813      	bhi.n	1a956 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1a92e:	a810      	add	r0, sp, #64	; 0x40
   1a930:	f7f2 f960 	bl	cbf4 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1a934:	4622      	mov	r2, r4
   1a936:	4669      	mov	r1, sp
   1a938:	a810      	add	r0, sp, #64	; 0x40
   1a93a:	f7ff ff4b 	bl	1a7d4 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1a93e:	a910      	add	r1, sp, #64	; 0x40
   1a940:	a834      	add	r0, sp, #208	; 0xd0
   1a942:	f7ff ff6d 	bl	1a820 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1a946:	4622      	mov	r2, r4
   1a948:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1a94a:	4638      	mov	r0, r7
   1a94c:	f7ff ffc6 	bl	1a8dc <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1a950:	2001      	movs	r0, #1
}
   1a952:	b04d      	add	sp, #308	; 0x134
   1a954:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1a956:	f7f2 f94d 	bl	cbf4 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1a95a:	4622      	mov	r2, r4
   1a95c:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1a95e:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1a962:	4628      	mov	r0, r5
   1a964:	f7ff ff36 	bl	1a7d4 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1a968:	4629      	mov	r1, r5
   1a96a:	4620      	mov	r0, r4
   1a96c:	f7ff ff58 	bl	1a820 <tc_sha256_final>
		rekey(ctx->key,
   1a970:	2220      	movs	r2, #32
   1a972:	4621      	mov	r1, r4
   1a974:	e7e9      	b.n	1a94a <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1a976:	4608      	mov	r0, r1
   1a978:	e7eb      	b.n	1a952 <tc_hmac_set_key+0x3c>
   1a97a:	4610      	mov	r0, r2
   1a97c:	e7e9      	b.n	1a952 <tc_hmac_set_key+0x3c>

0001a97e <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1a97e:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1a980:	4604      	mov	r4, r0
   1a982:	b140      	cbz	r0, 1a996 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1a984:	f7f2 f936 	bl	cbf4 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1a988:	2240      	movs	r2, #64	; 0x40
   1a98a:	4620      	mov	r0, r4
   1a98c:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1a990:	f7ff ff20 	bl	1a7d4 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1a994:	2001      	movs	r0, #1
}
   1a996:	bd10      	pop	{r4, pc}

0001a998 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1a998:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1a99a:	b110      	cbz	r0, 1a9a2 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1a99c:	f7ff ff1a 	bl	1a7d4 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1a9a0:	2001      	movs	r0, #1
}
   1a9a2:	bd08      	pop	{r3, pc}

0001a9a4 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1a9a4:	b570      	push	{r4, r5, r6, lr}
   1a9a6:	460e      	mov	r6, r1
   1a9a8:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1a9aa:	4605      	mov	r5, r0
   1a9ac:	b1f0      	cbz	r0, 1a9ec <tc_hmac_final+0x48>
   1a9ae:	2920      	cmp	r1, #32
   1a9b0:	d11c      	bne.n	1a9ec <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1a9b2:	b1ea      	cbz	r2, 1a9f0 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1a9b4:	4611      	mov	r1, r2
   1a9b6:	f7ff ff33 	bl	1a820 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1a9ba:	4620      	mov	r0, r4
   1a9bc:	f7f2 f91a 	bl	cbf4 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1a9c0:	2240      	movs	r2, #64	; 0x40
   1a9c2:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1a9c6:	4620      	mov	r0, r4
   1a9c8:	f7ff ff04 	bl	1a7d4 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1a9cc:	4632      	mov	r2, r6
   1a9ce:	4629      	mov	r1, r5
   1a9d0:	4620      	mov	r0, r4
   1a9d2:	f7ff feff 	bl	1a7d4 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1a9d6:	4621      	mov	r1, r4
   1a9d8:	4628      	mov	r0, r5
   1a9da:	f7ff ff21 	bl	1a820 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1a9de:	4620      	mov	r0, r4
   1a9e0:	22f0      	movs	r2, #240	; 0xf0
   1a9e2:	2100      	movs	r1, #0
   1a9e4:	f7ff fcd8 	bl	1a398 <_set>

	return TC_CRYPTO_SUCCESS;
   1a9e8:	2001      	movs	r0, #1
}
   1a9ea:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1a9ec:	2000      	movs	r0, #0
   1a9ee:	e7fc      	b.n	1a9ea <tc_hmac_final+0x46>
   1a9f0:	4610      	mov	r0, r2
   1a9f2:	e7fa      	b.n	1a9ea <tc_hmac_final+0x46>

0001a9f4 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1a9f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9f8:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1a9fa:	f04f 0b01 	mov.w	fp, #1
{
   1a9fe:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1aa00:	2300      	movs	r3, #0
{
   1aa02:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1aa04:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1aa08:	4631      	mov	r1, r6
{
   1aa0a:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1aa0c:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1aa0e:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1aa12:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1aa16:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1aa1a:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1aa1e:	f7ff ff7a 	bl	1a916 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1aa22:	4620      	mov	r0, r4
   1aa24:	f7ff ffab 	bl	1a97e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1aa28:	2220      	movs	r2, #32
   1aa2a:	4629      	mov	r1, r5
   1aa2c:	4620      	mov	r0, r4
   1aa2e:	f7ff ffb3 	bl	1a998 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1aa32:	465a      	mov	r2, fp
   1aa34:	4620      	mov	r0, r4
   1aa36:	f10d 0106 	add.w	r1, sp, #6
   1aa3a:	f7ff ffad 	bl	1a998 <tc_hmac_update>

	if (data && datalen)
   1aa3e:	f1b8 0f00 	cmp.w	r8, #0
   1aa42:	d007      	beq.n	1aa54 <update+0x60>
   1aa44:	f1b9 0f00 	cmp.w	r9, #0
   1aa48:	d004      	beq.n	1aa54 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1aa4a:	464a      	mov	r2, r9
   1aa4c:	4641      	mov	r1, r8
   1aa4e:	4620      	mov	r0, r4
   1aa50:	f7ff ffa2 	bl	1a998 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1aa54:	b13f      	cbz	r7, 1aa66 <update+0x72>
   1aa56:	f1ba 0f00 	cmp.w	sl, #0
   1aa5a:	d004      	beq.n	1aa66 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1aa5c:	4652      	mov	r2, sl
   1aa5e:	4639      	mov	r1, r7
   1aa60:	4620      	mov	r0, r4
   1aa62:	f7ff ff99 	bl	1a998 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1aa66:	4622      	mov	r2, r4
   1aa68:	2120      	movs	r1, #32
   1aa6a:	4630      	mov	r0, r6
   1aa6c:	f7ff ff9a 	bl	1a9a4 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1aa70:	2220      	movs	r2, #32
   1aa72:	4631      	mov	r1, r6
   1aa74:	4620      	mov	r0, r4
   1aa76:	f7ff ff4e 	bl	1a916 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1aa7a:	4620      	mov	r0, r4
   1aa7c:	f7ff ff7f 	bl	1a97e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1aa80:	2220      	movs	r2, #32
   1aa82:	4629      	mov	r1, r5
   1aa84:	4620      	mov	r0, r4
   1aa86:	f7ff ff87 	bl	1a998 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1aa8a:	4622      	mov	r2, r4
   1aa8c:	2120      	movs	r1, #32
   1aa8e:	4628      	mov	r0, r5
   1aa90:	f7ff ff88 	bl	1a9a4 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1aa94:	f1b8 0f00 	cmp.w	r8, #0
   1aa98:	d03a      	beq.n	1ab10 <update+0x11c>
   1aa9a:	f1b9 0f00 	cmp.w	r9, #0
   1aa9e:	d037      	beq.n	1ab10 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1aaa0:	2220      	movs	r2, #32
   1aaa2:	4631      	mov	r1, r6
   1aaa4:	4620      	mov	r0, r4
   1aaa6:	f7ff ff36 	bl	1a916 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1aaaa:	4620      	mov	r0, r4
   1aaac:	f7ff ff67 	bl	1a97e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1aab0:	2220      	movs	r2, #32
   1aab2:	4629      	mov	r1, r5
   1aab4:	4620      	mov	r0, r4
   1aab6:	f7ff ff6f 	bl	1a998 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1aaba:	2201      	movs	r2, #1
   1aabc:	f10d 0107 	add.w	r1, sp, #7
   1aac0:	4620      	mov	r0, r4
   1aac2:	f7ff ff69 	bl	1a998 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1aac6:	464a      	mov	r2, r9
   1aac8:	4641      	mov	r1, r8
   1aaca:	4620      	mov	r0, r4
   1aacc:	f7ff ff64 	bl	1a998 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1aad0:	b13f      	cbz	r7, 1aae2 <update+0xee>
   1aad2:	f1ba 0f00 	cmp.w	sl, #0
   1aad6:	d004      	beq.n	1aae2 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1aad8:	4652      	mov	r2, sl
   1aada:	4639      	mov	r1, r7
   1aadc:	4620      	mov	r0, r4
   1aade:	f7ff ff5b 	bl	1a998 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1aae2:	4622      	mov	r2, r4
   1aae4:	2120      	movs	r1, #32
   1aae6:	4630      	mov	r0, r6
   1aae8:	f7ff ff5c 	bl	1a9a4 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1aaec:	2220      	movs	r2, #32
   1aaee:	4631      	mov	r1, r6
   1aaf0:	4620      	mov	r0, r4
   1aaf2:	f7ff ff10 	bl	1a916 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1aaf6:	4620      	mov	r0, r4
   1aaf8:	f7ff ff41 	bl	1a97e <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1aafc:	2220      	movs	r2, #32
   1aafe:	4629      	mov	r1, r5
   1ab00:	4620      	mov	r0, r4
   1ab02:	f7ff ff49 	bl	1a998 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1ab06:	4622      	mov	r2, r4
   1ab08:	2120      	movs	r1, #32
   1ab0a:	4628      	mov	r0, r5
   1ab0c:	f7ff ff4a 	bl	1a9a4 <tc_hmac_final>
}
   1ab10:	b003      	add	sp, #12
   1ab12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ab16 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1ab16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ab18:	460c      	mov	r4, r1
   1ab1a:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1ab1c:	4605      	mov	r5, r0
   1ab1e:	b1b0      	cbz	r0, 1ab4e <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1ab20:	b1b9      	cbz	r1, 1ab52 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1ab22:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1ab24:	2220      	movs	r2, #32
   1ab26:	2100      	movs	r1, #0
   1ab28:	30f0      	adds	r0, #240	; 0xf0
   1ab2a:	f7ff fc35 	bl	1a398 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1ab2e:	2220      	movs	r2, #32
   1ab30:	2101      	movs	r1, #1
   1ab32:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1ab36:	f7ff fc2f 	bl	1a398 <_set>
	update(prng, personalization, plen, 0, 0);
   1ab3a:	4628      	mov	r0, r5
   1ab3c:	4633      	mov	r3, r6
   1ab3e:	463a      	mov	r2, r7
   1ab40:	4621      	mov	r1, r4
   1ab42:	9600      	str	r6, [sp, #0]
   1ab44:	f7ff ff56 	bl	1a9f4 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1ab48:	2001      	movs	r0, #1
	prng->countdown = 0;
   1ab4a:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1ab4e:	b003      	add	sp, #12
   1ab50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1ab52:	4608      	mov	r0, r1
   1ab54:	e7fb      	b.n	1ab4e <tc_hmac_prng_init+0x38>

0001ab56 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1ab56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ab58:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1ab5a:	4605      	mov	r5, r0
   1ab5c:	b180      	cbz	r0, 1ab80 <tc_hmac_prng_reseed+0x2a>
   1ab5e:	b179      	cbz	r1, 1ab80 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1ab60:	2a1f      	cmp	r2, #31
   1ab62:	d90d      	bls.n	1ab80 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1ab64:	b153      	cbz	r3, 1ab7c <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1ab66:	b16c      	cbz	r4, 1ab84 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1ab68:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1ab6a:	f7ff ff43 	bl	1a9f4 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1ab6e:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1ab72:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1ab74:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1ab78:	b003      	add	sp, #12
   1ab7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1ab7c:	9300      	str	r3, [sp, #0]
   1ab7e:	e7f4      	b.n	1ab6a <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1ab80:	2000      	movs	r0, #0
   1ab82:	e7f9      	b.n	1ab78 <tc_hmac_prng_reseed+0x22>
   1ab84:	4620      	mov	r0, r4
   1ab86:	e7f7      	b.n	1ab78 <tc_hmac_prng_reseed+0x22>

0001ab88 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1ab88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1ab8c:	460d      	mov	r5, r1
   1ab8e:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1ab90:	4680      	mov	r8, r0
   1ab92:	b3d8      	cbz	r0, 1ac0c <tc_hmac_prng_generate+0x84>
   1ab94:	b3d2      	cbz	r2, 1ac0c <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1ab96:	1e4b      	subs	r3, r1, #1
   1ab98:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1ab9c:	d236      	bcs.n	1ac0c <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1ab9e:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1aba2:	b3ab      	cbz	r3, 1ac10 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1aba4:	3b01      	subs	r3, #1
   1aba6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1abaa:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1abae:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1abb2:	2220      	movs	r2, #32
   1abb4:	4649      	mov	r1, r9
   1abb6:	4620      	mov	r0, r4
   1abb8:	f7ff fead 	bl	1a916 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1abbc:	4620      	mov	r0, r4
   1abbe:	f7ff fede 	bl	1a97e <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1abc2:	2220      	movs	r2, #32
   1abc4:	4639      	mov	r1, r7
   1abc6:	4620      	mov	r0, r4
   1abc8:	f7ff fee6 	bl	1a998 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1abcc:	4622      	mov	r2, r4
   1abce:	2120      	movs	r1, #32
   1abd0:	4638      	mov	r0, r7
   1abd2:	f7ff fee7 	bl	1a9a4 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1abd6:	2d20      	cmp	r5, #32
   1abd8:	462e      	mov	r6, r5
   1abda:	bf28      	it	cs
   1abdc:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1abde:	4640      	mov	r0, r8
   1abe0:	4633      	mov	r3, r6
   1abe2:	463a      	mov	r2, r7
   1abe4:	4631      	mov	r1, r6
   1abe6:	f7ff fbca 	bl	1a37e <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1abea:	2d20      	cmp	r5, #32
   1abec:	bf38      	it	cc
   1abee:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1abf0:	3d20      	subs	r5, #32
		out += bufferlen;
   1abf2:	44b0      	add	r8, r6
	while (outlen != 0) {
   1abf4:	d1dd      	bne.n	1abb2 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1abf6:	4620      	mov	r0, r4
   1abf8:	462b      	mov	r3, r5
   1abfa:	462a      	mov	r2, r5
   1abfc:	4629      	mov	r1, r5
   1abfe:	9500      	str	r5, [sp, #0]
   1ac00:	f7ff fef8 	bl	1a9f4 <update>

	return TC_CRYPTO_SUCCESS;
   1ac04:	2001      	movs	r0, #1
}
   1ac06:	b003      	add	sp, #12
   1ac08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1ac0c:	2000      	movs	r0, #0
   1ac0e:	e7fa      	b.n	1ac06 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1ac10:	f04f 30ff 	mov.w	r0, #4294967295
   1ac14:	e7f7      	b.n	1ac06 <tc_hmac_prng_generate+0x7e>

0001ac16 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1ac16:	2100      	movs	r1, #0
   1ac18:	2001      	movs	r0, #1
   1ac1a:	f7f2 b909 	b.w	ce30 <z_arm_fatal_error>

0001ac1e <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1ac1e:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1ac20:	f383 880b 	msr	PSPLIM, r3
}
   1ac24:	4770      	bx	lr

0001ac26 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1ac26:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1ac28:	6800      	ldr	r0, [r0, #0]
   1ac2a:	f7f2 b901 	b.w	ce30 <z_arm_fatal_error>

0001ac2e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1ac2e:	b508      	push	{r3, lr}
	handler();
   1ac30:	f7f2 f92c 	bl	ce8c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1ac34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1ac38:	f7f2 bb70 	b.w	d31c <z_arm_exc_exit>

0001ac3c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1ac3c:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1ac40:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1ac44:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1ac46:	bf08      	it	eq
   1ac48:	f06f 0015 	mvneq.w	r0, #21
   1ac4c:	4770      	bx	lr

0001ac4e <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1ac4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ac52:	4684      	mov	ip, r0
   1ac54:	4688      	mov	r8, r1
	register const char *s = nptr;
   1ac56:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1ac58:	4621      	mov	r1, r4
   1ac5a:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1ac5e:	2b20      	cmp	r3, #32
   1ac60:	d0fa      	beq.n	1ac58 <strtol+0xa>
   1ac62:	f1a3 0009 	sub.w	r0, r3, #9
   1ac66:	2804      	cmp	r0, #4
   1ac68:	d9f6      	bls.n	1ac58 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   1ac6a:	2b2d      	cmp	r3, #45	; 0x2d
   1ac6c:	d12d      	bne.n	1acca <strtol+0x7c>
		neg = 1;
		c = *s++;
   1ac6e:	784b      	ldrb	r3, [r1, #1]
   1ac70:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1ac72:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1ac74:	2a00      	cmp	r2, #0
   1ac76:	d05a      	beq.n	1ad2e <strtol+0xe0>
   1ac78:	2a10      	cmp	r2, #16
   1ac7a:	d109      	bne.n	1ac90 <strtol+0x42>
   1ac7c:	2b30      	cmp	r3, #48	; 0x30
   1ac7e:	d107      	bne.n	1ac90 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1ac80:	7823      	ldrb	r3, [r4, #0]
   1ac82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1ac86:	2b58      	cmp	r3, #88	; 0x58
   1ac88:	d14c      	bne.n	1ad24 <strtol+0xd6>
		c = s[1];
		s += 2;
		base = 16;
   1ac8a:	2210      	movs	r2, #16
		c = s[1];
   1ac8c:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1ac8e:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1ac90:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1ac92:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1ac96:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1ac98:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1ac9c:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1ac9e:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1aca2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1aca6:	2d09      	cmp	r5, #9
   1aca8:	d815      	bhi.n	1acd6 <strtol+0x88>
			c -= '0';
   1acaa:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1acac:	429a      	cmp	r2, r3
   1acae:	dd22      	ble.n	1acf6 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1acb0:	1c75      	adds	r5, r6, #1
   1acb2:	d007      	beq.n	1acc4 <strtol+0x76>
   1acb4:	4570      	cmp	r0, lr
   1acb6:	d81b      	bhi.n	1acf0 <strtol+0xa2>
   1acb8:	d101      	bne.n	1acbe <strtol+0x70>
   1acba:	454b      	cmp	r3, r9
   1acbc:	dc18      	bgt.n	1acf0 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
   1acbe:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1acc0:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1acc4:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1acc8:	e7eb      	b.n	1aca2 <strtol+0x54>
	} else if (c == '+') {
   1acca:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1accc:	bf04      	itt	eq
   1acce:	784b      	ldrbeq	r3, [r1, #1]
   1acd0:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1acd2:	2100      	movs	r1, #0
   1acd4:	e7ce      	b.n	1ac74 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1acd6:	f043 0520 	orr.w	r5, r3, #32
   1acda:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1acdc:	2d19      	cmp	r5, #25
   1acde:	d80a      	bhi.n	1acf6 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1ace0:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1ace4:	2d1a      	cmp	r5, #26
   1ace6:	bf34      	ite	cc
   1ace8:	2537      	movcc	r5, #55	; 0x37
   1acea:	2557      	movcs	r5, #87	; 0x57
   1acec:	1b5b      	subs	r3, r3, r5
   1acee:	e7dd      	b.n	1acac <strtol+0x5e>
			any = -1;
   1acf0:	f04f 36ff 	mov.w	r6, #4294967295
   1acf4:	e7e6      	b.n	1acc4 <strtol+0x76>
		}
	}

	if (any < 0) {
   1acf6:	1c73      	adds	r3, r6, #1
   1acf8:	d109      	bne.n	1ad0e <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1acfa:	f7fb feb1 	bl	16a60 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1acfe:	2326      	movs	r3, #38	; 0x26
   1ad00:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1ad02:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1ad04:	f1b8 0f00 	cmp.w	r8, #0
   1ad08:	d107      	bne.n	1ad1a <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1ad0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1ad0e:	b101      	cbz	r1, 1ad12 <strtol+0xc4>
		acc = -acc;
   1ad10:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1ad12:	f1b8 0f00 	cmp.w	r8, #0
   1ad16:	d0f8      	beq.n	1ad0a <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   1ad18:	b10e      	cbz	r6, 1ad1e <strtol+0xd0>
   1ad1a:	f104 3cff 	add.w	ip, r4, #4294967295
   1ad1e:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1ad22:	e7f2      	b.n	1ad0a <strtol+0xbc>
	if (base == 0) {
   1ad24:	2330      	movs	r3, #48	; 0x30
   1ad26:	2a00      	cmp	r2, #0
   1ad28:	d1b2      	bne.n	1ac90 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1ad2a:	2208      	movs	r2, #8
   1ad2c:	e7b0      	b.n	1ac90 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1ad2e:	2b30      	cmp	r3, #48	; 0x30
   1ad30:	d0a6      	beq.n	1ac80 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1ad32:	220a      	movs	r2, #10
   1ad34:	e7ac      	b.n	1ac90 <strtol+0x42>

0001ad36 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1ad36:	4603      	mov	r3, r0
   1ad38:	3901      	subs	r1, #1
   1ad3a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1ad3e:	b90a      	cbnz	r2, 1ad44 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1ad40:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1ad42:	4770      	bx	lr
		*d = *s;
   1ad44:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1ad48:	e7f7      	b.n	1ad3a <strcpy+0x4>

0001ad4a <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1ad4a:	b570      	push	{r4, r5, r6, lr}
   1ad4c:	4605      	mov	r5, r0
   1ad4e:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1ad50:	b142      	cbz	r2, 1ad64 <strncpy+0x1a>
   1ad52:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1ad56:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1ad58:	b92c      	cbnz	r4, 1ad66 <strncpy+0x1c>
   1ad5a:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1ad5c:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1ad60:	429a      	cmp	r2, r3
   1ad62:	d1fb      	bne.n	1ad5c <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1ad64:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1ad66:	4632      	mov	r2, r6
		*d = *s;
   1ad68:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1ad6c:	e7ef      	b.n	1ad4e <strncpy+0x4>

0001ad6e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1ad6e:	4603      	mov	r3, r0
	size_t n = 0;
   1ad70:	2000      	movs	r0, #0

	while (*s != '\0') {
   1ad72:	5c1a      	ldrb	r2, [r3, r0]
   1ad74:	b902      	cbnz	r2, 1ad78 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1ad76:	4770      	bx	lr
		n++;
   1ad78:	3001      	adds	r0, #1
   1ad7a:	e7fa      	b.n	1ad72 <strlen+0x4>

0001ad7c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1ad7c:	4603      	mov	r3, r0
	size_t n = 0;
   1ad7e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1ad80:	5c1a      	ldrb	r2, [r3, r0]
   1ad82:	b10a      	cbz	r2, 1ad88 <strnlen+0xc>
   1ad84:	4288      	cmp	r0, r1
   1ad86:	d100      	bne.n	1ad8a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1ad88:	4770      	bx	lr
		n++;
   1ad8a:	3001      	adds	r0, #1
   1ad8c:	e7f8      	b.n	1ad80 <strnlen+0x4>

0001ad8e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1ad8e:	1e43      	subs	r3, r0, #1
   1ad90:	3901      	subs	r1, #1
   1ad92:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1ad96:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1ad9a:	4282      	cmp	r2, r0
   1ad9c:	d101      	bne.n	1ada2 <strcmp+0x14>
   1ad9e:	2a00      	cmp	r2, #0
   1ada0:	d1f7      	bne.n	1ad92 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1ada2:	1a10      	subs	r0, r2, r0
   1ada4:	4770      	bx	lr

0001ada6 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1ada6:	b510      	push	{r4, lr}
   1ada8:	3901      	subs	r1, #1
   1adaa:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1adac:	4282      	cmp	r2, r0
   1adae:	d009      	beq.n	1adc4 <strncmp+0x1e>
   1adb0:	7803      	ldrb	r3, [r0, #0]
   1adb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1adb6:	42a3      	cmp	r3, r4
   1adb8:	d100      	bne.n	1adbc <strncmp+0x16>
   1adba:	b90b      	cbnz	r3, 1adc0 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1adbc:	1b18      	subs	r0, r3, r4
   1adbe:	e002      	b.n	1adc6 <strncmp+0x20>
		s1++;
   1adc0:	3001      	adds	r0, #1
		n--;
   1adc2:	e7f3      	b.n	1adac <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   1adc4:	2000      	movs	r0, #0
}
   1adc6:	bd10      	pop	{r4, pc}

0001adc8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1adc8:	4603      	mov	r3, r0
   1adca:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1adcc:	b15a      	cbz	r2, 1ade6 <memcmp+0x1e>
   1adce:	3901      	subs	r1, #1
   1add0:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1add2:	f813 0b01 	ldrb.w	r0, [r3], #1
   1add6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1adda:	42a3      	cmp	r3, r4
   1addc:	d001      	beq.n	1ade2 <memcmp+0x1a>
   1adde:	4290      	cmp	r0, r2
   1ade0:	d0f7      	beq.n	1add2 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1ade2:	1a80      	subs	r0, r0, r2
}
   1ade4:	bd10      	pop	{r4, pc}
		return 0;
   1ade6:	4610      	mov	r0, r2
   1ade8:	e7fc      	b.n	1ade4 <memcmp+0x1c>

0001adea <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1adea:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1adec:	ea81 0400 	eor.w	r4, r1, r0
   1adf0:	07a5      	lsls	r5, r4, #30
   1adf2:	4603      	mov	r3, r0
   1adf4:	d00b      	beq.n	1ae0e <memcpy+0x24>
   1adf6:	3b01      	subs	r3, #1
   1adf8:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1adfa:	4291      	cmp	r1, r2
   1adfc:	d11b      	bne.n	1ae36 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1adfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1ae00:	2a00      	cmp	r2, #0
   1ae02:	d0fc      	beq.n	1adfe <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1ae04:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1ae08:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1ae0a:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1ae0e:	079c      	lsls	r4, r3, #30
   1ae10:	d1f6      	bne.n	1ae00 <memcpy+0x16>
   1ae12:	f022 0403 	bic.w	r4, r2, #3
   1ae16:	1f1d      	subs	r5, r3, #4
   1ae18:	0896      	lsrs	r6, r2, #2
   1ae1a:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1ae1c:	42b9      	cmp	r1, r7
   1ae1e:	d105      	bne.n	1ae2c <memcpy+0x42>
   1ae20:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
   1ae24:	4423      	add	r3, r4
   1ae26:	fb05 2206 	mla	r2, r5, r6, r2
   1ae2a:	e7e4      	b.n	1adf6 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1ae2c:	f851 cb04 	ldr.w	ip, [r1], #4
   1ae30:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1ae34:	e7f2      	b.n	1ae1c <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1ae36:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ae3a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1ae3e:	e7dc      	b.n	1adfa <memcpy+0x10>

0001ae40 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1ae40:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1ae42:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
   1ae44:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1ae46:	07a3      	lsls	r3, r4, #30
   1ae48:	d111      	bne.n	1ae6e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1ae4a:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   1ae4e:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1ae52:	f022 0303 	bic.w	r3, r2, #3
   1ae56:	0896      	lsrs	r6, r2, #2
   1ae58:	4423      	add	r3, r4
   1ae5a:	429c      	cmp	r4, r3
   1ae5c:	d10d      	bne.n	1ae7a <memset+0x3a>
   1ae5e:	f06f 0403 	mvn.w	r4, #3
   1ae62:	fb04 2206 	mla	r2, r4, r6, r2
   1ae66:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1ae68:	4293      	cmp	r3, r2
   1ae6a:	d109      	bne.n	1ae80 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1ae6c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1ae6e:	2a00      	cmp	r2, #0
   1ae70:	d0fc      	beq.n	1ae6c <memset+0x2c>
		*(d_byte++) = c_byte;
   1ae72:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   1ae76:	3a01      	subs	r2, #1
   1ae78:	e7e5      	b.n	1ae46 <memset+0x6>
		*(d_word++) = c_word;
   1ae7a:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   1ae7e:	e7ec      	b.n	1ae5a <memset+0x1a>
		*(d_byte++) = c_byte;
   1ae80:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1ae84:	e7f0      	b.n	1ae68 <memset+0x28>

0001ae86 <_stdout_hook_default>:
}
   1ae86:	f04f 30ff 	mov.w	r0, #4294967295
   1ae8a:	4770      	bx	lr

0001ae8c <bt_settings_decode_key>:
{
   1ae8c:	b570      	push	{r4, r5, r6, lr}
   1ae8e:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1ae90:	2100      	movs	r1, #0
{
   1ae92:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1ae94:	f7ff f888 	bl	19fa8 <settings_name_next>
   1ae98:	280d      	cmp	r0, #13
   1ae9a:	d118      	bne.n	1aece <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1ae9c:	7b23      	ldrb	r3, [r4, #12]
   1ae9e:	2b30      	cmp	r3, #48	; 0x30
   1aea0:	d111      	bne.n	1aec6 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1aea2:	2300      	movs	r3, #0
   1aea4:	702b      	strb	r3, [r5, #0]
   1aea6:	f104 060c 	add.w	r6, r4, #12
   1aeaa:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1aeac:	462a      	mov	r2, r5
   1aeae:	4620      	mov	r0, r4
   1aeb0:	2301      	movs	r3, #1
   1aeb2:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   1aeb4:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1aeb6:	f7fe fcf7 	bl	198a8 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1aeba:	42b4      	cmp	r4, r6
   1aebc:	f105 35ff 	add.w	r5, r5, #4294967295
   1aec0:	d1f4      	bne.n	1aeac <bt_settings_decode_key+0x20>
	return 0;
   1aec2:	2000      	movs	r0, #0
}
   1aec4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1aec6:	2b31      	cmp	r3, #49	; 0x31
   1aec8:	d101      	bne.n	1aece <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1aeca:	2301      	movs	r3, #1
   1aecc:	e7ea      	b.n	1aea4 <bt_settings_decode_key+0x18>
		return -EINVAL;
   1aece:	f06f 0015 	mvn.w	r0, #21
   1aed2:	e7f7      	b.n	1aec4 <bt_settings_decode_key+0x38>

0001aed4 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1aed4:	b510      	push	{r4, lr}
   1aed6:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1aed8:	7801      	ldrb	r1, [r0, #0]
   1aeda:	7822      	ldrb	r2, [r4, #0]
{
   1aedc:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1aede:	428a      	cmp	r2, r1
   1aee0:	d00f      	beq.n	1af02 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1aee2:	4669      	mov	r1, sp
   1aee4:	f7f2 fdc0 	bl	da68 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1aee8:	4620      	mov	r0, r4
   1aeea:	a905      	add	r1, sp, #20
   1aeec:	f7f2 fdbc 	bl	da68 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1aef0:	2210      	movs	r2, #16
   1aef2:	f10d 0115 	add.w	r1, sp, #21
   1aef6:	f10d 0001 	add.w	r0, sp, #1
   1aefa:	f7ff ff65 	bl	1adc8 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1aefe:	b00a      	add	sp, #40	; 0x28
   1af00:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1af02:	2a01      	cmp	r2, #1
   1af04:	d006      	beq.n	1af14 <bt_uuid_cmp+0x40>
   1af06:	2a02      	cmp	r2, #2
   1af08:	d007      	beq.n	1af1a <bt_uuid_cmp+0x46>
   1af0a:	b972      	cbnz	r2, 1af2a <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1af0c:	8840      	ldrh	r0, [r0, #2]
   1af0e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1af10:	1ac0      	subs	r0, r0, r3
   1af12:	e7f4      	b.n	1aefe <bt_uuid_cmp+0x2a>
   1af14:	6840      	ldr	r0, [r0, #4]
   1af16:	6863      	ldr	r3, [r4, #4]
   1af18:	e7fa      	b.n	1af10 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1af1a:	2210      	movs	r2, #16
   1af1c:	1c61      	adds	r1, r4, #1
   1af1e:	3001      	adds	r0, #1
}
   1af20:	b00a      	add	sp, #40	; 0x28
   1af22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1af26:	f7ff bf4f 	b.w	1adc8 <memcmp>
	switch (u1->type) {
   1af2a:	f06f 0015 	mvn.w	r0, #21
   1af2e:	e7e6      	b.n	1aefe <bt_uuid_cmp+0x2a>

0001af30 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1af30:	2a04      	cmp	r2, #4
{
   1af32:	b510      	push	{r4, lr}
	switch (data_len) {
   1af34:	d00a      	beq.n	1af4c <bt_uuid_create+0x1c>
   1af36:	2a10      	cmp	r2, #16
   1af38:	d00d      	beq.n	1af56 <bt_uuid_create+0x26>
   1af3a:	2a02      	cmp	r2, #2
   1af3c:	f04f 0300 	mov.w	r3, #0
   1af40:	d10f      	bne.n	1af62 <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1af42:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1af44:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1af46:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1af48:	2001      	movs	r0, #1
}
   1af4a:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1af4c:	2301      	movs	r3, #1
   1af4e:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1af50:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1af52:	6042      	str	r2, [r0, #4]
		break;
   1af54:	e7f8      	b.n	1af48 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1af56:	2302      	movs	r3, #2
   1af58:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1af5c:	f7ff ff45 	bl	1adea <memcpy>
		break;
   1af60:	e7f2      	b.n	1af48 <bt_uuid_create+0x18>
	switch (data_len) {
   1af62:	4618      	mov	r0, r3
   1af64:	e7f1      	b.n	1af4a <bt_uuid_create+0x1a>

0001af66 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1af66:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1af68:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1af6a:	2106      	movs	r1, #6
{
   1af6c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1af6e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1af72:	f7f5 f96d 	bl	10250 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1af76:	b918      	cbnz	r0, 1af80 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1af78:	79a3      	ldrb	r3, [r4, #6]
   1af7a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1af7e:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1af80:	bd10      	pop	{r4, pc}

0001af82 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1af82:	280f      	cmp	r0, #15
   1af84:	d806      	bhi.n	1af94 <bt_hci_evt_get_flags+0x12>
   1af86:	280d      	cmp	r0, #13
   1af88:	d80b      	bhi.n	1afa2 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1af8a:	2805      	cmp	r0, #5
   1af8c:	bf14      	ite	ne
   1af8e:	2002      	movne	r0, #2
   1af90:	2003      	moveq	r0, #3
   1af92:	4770      	bx	lr
	switch (evt) {
   1af94:	2813      	cmp	r0, #19
   1af96:	d004      	beq.n	1afa2 <bt_hci_evt_get_flags+0x20>
   1af98:	281a      	cmp	r0, #26
   1af9a:	bf14      	ite	ne
   1af9c:	2002      	movne	r0, #2
   1af9e:	2001      	moveq	r0, #1
   1afa0:	4770      	bx	lr
   1afa2:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1afa4:	4770      	bx	lr

0001afa6 <get_adv_channel_map>:
{
   1afa6:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1afa8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1afac:	bf0c      	ite	eq
   1afae:	2007      	moveq	r0, #7
   1afb0:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1afb2:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1afb4:	bf48      	it	mi
   1afb6:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1afba:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1afbc:	bf48      	it	mi
   1afbe:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1afc2:	4770      	bx	lr

0001afc4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1afc4:	e8d0 0faf 	lda	r0, [r0]
}
   1afc8:	4770      	bx	lr

0001afca <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1afca:	2207      	movs	r2, #7
   1afcc:	f7ff bf0d 	b.w	1adea <memcpy>

0001afd0 <atomic_or>:
{
   1afd0:	4603      	mov	r3, r0
}
   1afd2:	e8d3 0fef 	ldaex	r0, [r3]
   1afd6:	ea40 0201 	orr.w	r2, r0, r1
   1afda:	e8c3 2fec 	stlex	ip, r2, [r3]
   1afde:	f1bc 0f00 	cmp.w	ip, #0
   1afe2:	d1f6      	bne.n	1afd2 <atomic_or+0x2>
   1afe4:	4770      	bx	lr

0001afe6 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1afe6:	2207      	movs	r2, #7
   1afe8:	f7ff beee 	b.w	1adc8 <memcmp>

0001afec <atomic_and>:
{
   1afec:	4603      	mov	r3, r0
}
   1afee:	e8d3 0fef 	ldaex	r0, [r3]
   1aff2:	ea00 0201 	and.w	r2, r0, r1
   1aff6:	e8c3 2fec 	stlex	ip, r2, [r3]
   1affa:	f1bc 0f00 	cmp.w	ip, #0
   1affe:	d1f6      	bne.n	1afee <atomic_and+0x2>
   1b000:	4770      	bx	lr

0001b002 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1b002:	460b      	mov	r3, r1
   1b004:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b006:	f001 041f 	and.w	r4, r1, #31
   1b00a:	2101      	movs	r1, #1

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b00c:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b00e:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b010:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   1b014:	b112      	cbz	r2, 1b01c <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1b016:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b018:	f7ff bfda 	b.w	1afd0 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b01c:	43c9      	mvns	r1, r1
}
   1b01e:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b020:	f7ff bfe4 	b.w	1afec <atomic_and>

0001b024 <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1b024:	f100 0210 	add.w	r2, r0, #16
{
   1b028:	b508      	push	{r3, lr}
   1b02a:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b02c:	4610      	mov	r0, r2
   1b02e:	f7ff ffc9 	bl	1afc4 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1b032:	0640      	lsls	r0, r0, #25
   1b034:	d50a      	bpl.n	1b04c <adv_id_check_connectable_func+0x28>
   1b036:	4610      	mov	r0, r2
   1b038:	f7ff ffc4 	bl	1afc4 <atomic_get>
   1b03c:	05c2      	lsls	r2, r0, #23
   1b03e:	d505      	bpl.n	1b04c <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   1b040:	781a      	ldrb	r2, [r3, #0]
   1b042:	780b      	ldrb	r3, [r1, #0]
   1b044:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   1b046:	bf1c      	itt	ne
   1b048:	2301      	movne	r3, #1
   1b04a:	704b      	strbne	r3, [r1, #1]
}
   1b04c:	bd08      	pop	{r3, pc}

0001b04e <le_set_private_addr.constprop.0>:
static int le_set_private_addr(uint8_t id)
   1b04e:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1b050:	2106      	movs	r1, #6
   1b052:	4668      	mov	r0, sp
   1b054:	f7f5 f8fc 	bl	10250 <bt_rand>
	if (err) {
   1b058:	b940      	cbnz	r0, 1b06c <le_set_private_addr.constprop.0+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1b05a:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1b05e:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1b060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b064:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1b068:	f7f3 fa06 	bl	e478 <set_random_address>
}
   1b06c:	b003      	add	sp, #12
   1b06e:	f85d fb04 	ldr.w	pc, [sp], #4

0001b072 <bt_lookup_id_addr>:
}
   1b072:	4608      	mov	r0, r1
   1b074:	4770      	bx	lr

0001b076 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1b076:	f7f3 bc57 	b.w	e928 <bt_le_create_conn_legacy>

0001b07a <bt_hci_disconnect>:
{
   1b07a:	b570      	push	{r4, r5, r6, lr}
   1b07c:	4606      	mov	r6, r0
   1b07e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1b080:	f240 4006 	movw	r0, #1030	; 0x406
   1b084:	2103      	movs	r1, #3
   1b086:	f7f3 f92b 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
   1b08a:	4604      	mov	r4, r0
   1b08c:	b168      	cbz	r0, 1b0aa <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1b08e:	2103      	movs	r1, #3
   1b090:	3008      	adds	r0, #8
   1b092:	f7f9 fd0d 	bl	14ab0 <net_buf_simple_add>
	disconn->reason = reason;
   1b096:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1b098:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1b09a:	4621      	mov	r1, r4
}
   1b09c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1b0a0:	2200      	movs	r2, #0
   1b0a2:	f240 4006 	movw	r0, #1030	; 0x406
   1b0a6:	f7f3 b965 	b.w	e374 <bt_hci_cmd_send_sync>
}
   1b0aa:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b0ae:	bd70      	pop	{r4, r5, r6, pc}

0001b0b0 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1b0b0:	8803      	ldrh	r3, [r0, #0]
   1b0b2:	8842      	ldrh	r2, [r0, #2]
{
   1b0b4:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1b0b6:	4293      	cmp	r3, r2
   1b0b8:	d819      	bhi.n	1b0ee <bt_le_conn_params_valid+0x3e>
   1b0ba:	2b05      	cmp	r3, #5
   1b0bc:	d917      	bls.n	1b0ee <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1b0be:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1b0c2:	d814      	bhi.n	1b0ee <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1b0c4:	8883      	ldrh	r3, [r0, #4]
   1b0c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1b0ca:	d210      	bcs.n	1b0ee <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1b0cc:	f640 4476 	movw	r4, #3190	; 0xc76
   1b0d0:	88c0      	ldrh	r0, [r0, #6]
   1b0d2:	f1a0 010a 	sub.w	r1, r0, #10
   1b0d6:	b289      	uxth	r1, r1
   1b0d8:	42a1      	cmp	r1, r4
   1b0da:	d808      	bhi.n	1b0ee <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1b0dc:	3301      	adds	r3, #1
   1b0de:	b29b      	uxth	r3, r3
   1b0e0:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1b0e2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1b0e6:	bf34      	ite	cc
   1b0e8:	2001      	movcc	r0, #1
   1b0ea:	2000      	movcs	r0, #0
}
   1b0ec:	bd10      	pop	{r4, pc}
		return false;
   1b0ee:	2000      	movs	r0, #0
   1b0f0:	e7fc      	b.n	1b0ec <bt_le_conn_params_valid+0x3c>

0001b0f2 <bt_le_set_data_len>:
{
   1b0f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b0f4:	4607      	mov	r7, r0
   1b0f6:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1b0f8:	f242 0022 	movw	r0, #8226	; 0x2022
   1b0fc:	2106      	movs	r1, #6
{
   1b0fe:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1b100:	f7f3 f8ee 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
   1b104:	4604      	mov	r4, r0
   1b106:	b170      	cbz	r0, 1b126 <bt_le_set_data_len+0x34>
   1b108:	2106      	movs	r1, #6
   1b10a:	3008      	adds	r0, #8
   1b10c:	f7f9 fcd0 	bl	14ab0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b110:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1b112:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b114:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1b116:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1b118:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1b11a:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1b11e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1b122:	f7f3 be23 	b.w	ed6c <bt_hci_cmd_send>
}
   1b126:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b12c <bt_le_set_phy>:
{
   1b12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b130:	4680      	mov	r8, r0
   1b132:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1b134:	f242 0032 	movw	r0, #8242	; 0x2032
   1b138:	2107      	movs	r1, #7
{
   1b13a:	4616      	mov	r6, r2
   1b13c:	461d      	mov	r5, r3
   1b13e:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1b142:	f7f3 f8cd 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
   1b146:	4604      	mov	r4, r0
   1b148:	b190      	cbz	r0, 1b170 <bt_le_set_phy+0x44>
   1b14a:	2107      	movs	r1, #7
   1b14c:	3008      	adds	r0, #8
   1b14e:	f7f9 fcaf 	bl	14ab0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b152:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1b156:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1b158:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1b15a:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b15c:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1b15e:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1b162:	4621      	mov	r1, r4
}
   1b164:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1b168:	f242 0032 	movw	r0, #8242	; 0x2032
   1b16c:	f7f3 bdfe 	b.w	ed6c <bt_hci_cmd_send>
}
   1b170:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b178 <bt_addr_le_is_bonded>:
}
   1b178:	2000      	movs	r0, #0
   1b17a:	4770      	bx	lr

0001b17c <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1b17c:	6880      	ldr	r0, [r0, #8]
   1b17e:	f7f4 be71 	b.w	fe64 <enh_conn_complete>

0001b182 <le_legacy_conn_complete>:
{
   1b182:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1b184:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1b186:	6881      	ldr	r1, [r0, #8]
{
   1b188:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1b18a:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1b18c:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   1b18e:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1b192:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1b196:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1b198:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1b19c:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1b1a0:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1b1a4:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1b1a8:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1b1ac:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1b1b0:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1b1b4:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1b1b8:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1b1bc:	7b4b      	ldrb	r3, [r1, #13]
   1b1be:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1b1c2:	f7ff ff02 	bl	1afca <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   1b1c6:	4669      	mov	r1, sp
   1b1c8:	2206      	movs	r2, #6
   1b1ca:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1b1ce:	9400      	str	r4, [sp, #0]
   1b1d0:	f8ad 4004 	strh.w	r4, [sp, #4]
   1b1d4:	f7ff fe09 	bl	1adea <memcpy>
   1b1d8:	2206      	movs	r2, #6
   1b1da:	4669      	mov	r1, sp
   1b1dc:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1b1e0:	9400      	str	r4, [sp, #0]
   1b1e2:	f8ad 4004 	strh.w	r4, [sp, #4]
   1b1e6:	f7ff fe00 	bl	1adea <memcpy>
	enh_conn_complete(&enh);
   1b1ea:	a802      	add	r0, sp, #8
   1b1ec:	f7f4 fe3a 	bl	fe64 <enh_conn_complete>
}
   1b1f0:	b00a      	add	sp, #40	; 0x28
   1b1f2:	bd10      	pop	{r4, pc}

0001b1f4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b1f4:	e8d0 0faf 	lda	r0, [r0]
}
   1b1f8:	4770      	bx	lr

0001b1fa <tx_notify>:
{
   1b1fa:	b570      	push	{r4, r5, r6, lr}
   1b1fc:	4604      	mov	r4, r0
	__asm__ volatile(
   1b1fe:	f04f 0220 	mov.w	r2, #32
   1b202:	f3ef 8311 	mrs	r3, BASEPRI
   1b206:	f382 8811 	msr	BASEPRI, r2
   1b20a:	f3bf 8f6f 	isb	sy
	return list->head;
   1b20e:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1b210:	b920      	cbnz	r0, 1b21c <tx_notify+0x22>
	__asm__ volatile(
   1b212:	f383 8811 	msr	BASEPRI, r3
   1b216:	f3bf 8f6f 	isb	sy
}
   1b21a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b21c:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1b21e:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b220:	4288      	cmp	r0, r1
	list->tail = node;
   1b222:	bf08      	it	eq
   1b224:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1b226:	6222      	str	r2, [r4, #32]
   1b228:	f383 8811 	msr	BASEPRI, r3
   1b22c:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1b230:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1b234:	f7f5 f824 	bl	10280 <tx_free>
		cb(conn, user_data);
   1b238:	4631      	mov	r1, r6
   1b23a:	4620      	mov	r0, r4
   1b23c:	47a8      	blx	r5
	while (1) {
   1b23e:	e7de      	b.n	1b1fe <tx_notify+0x4>

0001b240 <tx_complete_work>:
	tx_notify(conn);
   1b240:	3828      	subs	r0, #40	; 0x28
   1b242:	f7ff bfda 	b.w	1b1fa <tx_notify>

0001b246 <bt_conn_new>:
{
   1b246:	b538      	push	{r3, r4, r5, lr}
   1b248:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1b24a:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b24c:	2501      	movs	r5, #1
   1b24e:	428b      	cmp	r3, r1
   1b250:	d102      	bne.n	1b258 <bt_conn_new+0x12>
		return NULL;
   1b252:	2400      	movs	r4, #0
}
   1b254:	4620      	mov	r0, r4
   1b256:	bd38      	pop	{r3, r4, r5, pc}
   1b258:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1b25c:	e8d2 0fef 	ldaex	r0, [r2]
   1b260:	2800      	cmp	r0, #0
   1b262:	d104      	bne.n	1b26e <bt_conn_new+0x28>
   1b264:	e8c2 5fec 	stlex	ip, r5, [r2]
   1b268:	f1bc 0f00 	cmp.w	ip, #0
   1b26c:	d1f6      	bne.n	1b25c <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1b26e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1b272:	d002      	beq.n	1b27a <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   1b274:	4604      	mov	r4, r0
   1b276:	3301      	adds	r3, #1
   1b278:	e7e9      	b.n	1b24e <bt_conn_new+0x8>
	if (!conn) {
   1b27a:	2c00      	cmp	r4, #0
   1b27c:	d0ea      	beq.n	1b254 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1b27e:	22b8      	movs	r2, #184	; 0xb8
   1b280:	2100      	movs	r1, #0
   1b282:	4620      	mov	r0, r4
   1b284:	f7ff fddc 	bl	1ae40 <memset>
	return conn;
   1b288:	e7e4      	b.n	1b254 <bt_conn_new+0xe>

0001b28a <bt_conn_get_security>:
}
   1b28a:	2001      	movs	r0, #1
   1b28c:	4770      	bx	lr

0001b28e <bt_conn_reset_rx_state>:
{
   1b28e:	b510      	push	{r4, lr}
   1b290:	4604      	mov	r4, r0
	if (!conn->rx) {
   1b292:	6900      	ldr	r0, [r0, #16]
   1b294:	b118      	cbz	r0, 1b29e <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1b296:	f7f9 faf5 	bl	14884 <net_buf_unref>
	conn->rx = NULL;
   1b29a:	2300      	movs	r3, #0
   1b29c:	6123      	str	r3, [r4, #16]
}
   1b29e:	bd10      	pop	{r4, pc}

0001b2a0 <bt_conn_is_peer_addr_le>:
{
   1b2a0:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1b2a2:	7a03      	ldrb	r3, [r0, #8]
{
   1b2a4:	4604      	mov	r4, r0
	if (id != conn->id) {
   1b2a6:	428b      	cmp	r3, r1
{
   1b2a8:	4615      	mov	r5, r2
	if (id != conn->id) {
   1b2aa:	d115      	bne.n	1b2d8 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1b2ac:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1b2b0:	2207      	movs	r2, #7
   1b2b2:	4628      	mov	r0, r5
   1b2b4:	f7ff fd88 	bl	1adc8 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1b2b8:	b180      	cbz	r0, 1b2dc <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1b2ba:	78e3      	ldrb	r3, [r4, #3]
   1b2bc:	2207      	movs	r2, #7
   1b2be:	b943      	cbnz	r3, 1b2d2 <bt_conn_is_peer_addr_le+0x32>
   1b2c0:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1b2c4:	4628      	mov	r0, r5
   1b2c6:	f7ff fd7f 	bl	1adc8 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1b2ca:	fab0 f080 	clz	r0, r0
   1b2ce:	0940      	lsrs	r0, r0, #5
}
   1b2d0:	bd38      	pop	{r3, r4, r5, pc}
   1b2d2:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1b2d6:	e7f5      	b.n	1b2c4 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1b2d8:	2000      	movs	r0, #0
   1b2da:	e7f9      	b.n	1b2d0 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1b2dc:	2001      	movs	r0, #1
   1b2de:	e7f7      	b.n	1b2d0 <bt_conn_is_peer_addr_le+0x30>

0001b2e0 <bt_conn_ref>:
{
   1b2e0:	4603      	mov	r3, r0
   1b2e2:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1b2e4:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1b2e8:	4610      	mov	r0, r2
   1b2ea:	f7ff ff83 	bl	1b1f4 <atomic_get>
		if (!old) {
   1b2ee:	b160      	cbz	r0, 1b30a <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1b2f0:	1c41      	adds	r1, r0, #1
   1b2f2:	e8d2 4fef 	ldaex	r4, [r2]
   1b2f6:	4284      	cmp	r4, r0
   1b2f8:	d104      	bne.n	1b304 <bt_conn_ref+0x24>
   1b2fa:	e8c2 1fec 	stlex	ip, r1, [r2]
   1b2fe:	f1bc 0f00 	cmp.w	ip, #0
   1b302:	d1f6      	bne.n	1b2f2 <bt_conn_ref+0x12>
   1b304:	d1f0      	bne.n	1b2e8 <bt_conn_ref+0x8>
}
   1b306:	4618      	mov	r0, r3
   1b308:	bd10      	pop	{r4, pc}
			return NULL;
   1b30a:	4603      	mov	r3, r0
   1b30c:	e7fb      	b.n	1b306 <bt_conn_ref+0x26>

0001b30e <conn_lookup_handle>:
{
   1b30e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b312:	4607      	mov	r7, r0
   1b314:	460e      	mov	r6, r1
   1b316:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1b318:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1b31a:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1b31e:	42b4      	cmp	r4, r6
   1b320:	d103      	bne.n	1b32a <conn_lookup_handle+0x1c>
	return NULL;
   1b322:	2300      	movs	r3, #0
}
   1b324:	4618      	mov	r0, r3
   1b326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1b32a:	fb09 7004 	mla	r0, r9, r4, r7
   1b32e:	f7ff ffd7 	bl	1b2e0 <bt_conn_ref>
   1b332:	4603      	mov	r3, r0
		if (!conn) {
   1b334:	b158      	cbz	r0, 1b34e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1b336:	7a85      	ldrb	r5, [r0, #10]
   1b338:	2d01      	cmp	r5, #1
   1b33a:	d002      	beq.n	1b342 <conn_lookup_handle+0x34>
   1b33c:	3d07      	subs	r5, #7
   1b33e:	2d01      	cmp	r5, #1
   1b340:	d803      	bhi.n	1b34a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1b342:	881a      	ldrh	r2, [r3, #0]
   1b344:	4542      	cmp	r2, r8
   1b346:	d0ed      	beq.n	1b324 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1b348:	4618      	mov	r0, r3
   1b34a:	f7f5 fa1d 	bl	10788 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1b34e:	3401      	adds	r4, #1
   1b350:	e7e5      	b.n	1b31e <conn_lookup_handle+0x10>

0001b352 <bt_conn_get_dst>:
}
   1b352:	3088      	adds	r0, #136	; 0x88
   1b354:	4770      	bx	lr

0001b356 <bt_conn_le_conn_update>:
{
   1b356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b358:	4607      	mov	r7, r0
   1b35a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1b35c:	f242 0013 	movw	r0, #8211	; 0x2013
   1b360:	210e      	movs	r1, #14
   1b362:	f7f2 ffbd 	bl	e2e0 <bt_hci_cmd_create>
	if (!buf) {
   1b366:	4606      	mov	r6, r0
   1b368:	b1d0      	cbz	r0, 1b3a0 <bt_conn_le_conn_update+0x4a>
   1b36a:	210e      	movs	r1, #14
   1b36c:	3008      	adds	r0, #8
   1b36e:	f7f9 fb9f 	bl	14ab0 <net_buf_simple_add>
   1b372:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1b374:	220e      	movs	r2, #14
   1b376:	2100      	movs	r1, #0
   1b378:	f7ff fd62 	bl	1ae40 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1b37c:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b37e:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1b380:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1b382:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b384:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1b386:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1b388:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b38a:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1b38e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1b390:	88ab      	ldrh	r3, [r5, #4]
   1b392:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1b394:	88eb      	ldrh	r3, [r5, #6]
   1b396:	8123      	strh	r3, [r4, #8]
}
   1b398:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b39c:	f7f2 bfea 	b.w	e374 <bt_hci_cmd_send_sync>
}
   1b3a0:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b3a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b3a6 <l2cap_connected>:
}
   1b3a6:	4770      	bx	lr

0001b3a8 <l2cap_disconnected>:
   1b3a8:	4770      	bx	lr

0001b3aa <bt_l2cap_chan_remove>:
	return list->head;
   1b3aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1b3ac:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b3ae:	b17b      	cbz	r3, 1b3d0 <bt_l2cap_chan_remove+0x26>
   1b3b0:	2200      	movs	r2, #0
   1b3b2:	3b08      	subs	r3, #8
   1b3b4:	b163      	cbz	r3, 1b3d0 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1b3b6:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1b3b8:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1b3bc:	d10e      	bne.n	1b3dc <bt_l2cap_chan_remove+0x32>
	return node->next;
   1b3be:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1b3c0:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1b3c2:	b932      	cbnz	r2, 1b3d2 <bt_l2cap_chan_remove+0x28>
   1b3c4:	42ac      	cmp	r4, r5
	list->head = node;
   1b3c6:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1b3c8:	d100      	bne.n	1b3cc <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1b3ca:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1b3cc:	2200      	movs	r2, #0
   1b3ce:	609a      	str	r2, [r3, #8]
}
   1b3d0:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1b3d2:	42ac      	cmp	r4, r5
	parent->next = child;
   1b3d4:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1b3d6:	bf08      	it	eq
   1b3d8:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1b3da:	e7f7      	b.n	1b3cc <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b3dc:	2c00      	cmp	r4, #0
   1b3de:	d0f7      	beq.n	1b3d0 <bt_l2cap_chan_remove+0x26>
	return node->next;
   1b3e0:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b3e2:	2b00      	cmp	r3, #0
   1b3e4:	d0f4      	beq.n	1b3d0 <bt_l2cap_chan_remove+0x26>
   1b3e6:	4622      	mov	r2, r4
   1b3e8:	3b08      	subs	r3, #8
   1b3ea:	e7e3      	b.n	1b3b4 <bt_l2cap_chan_remove+0xa>

0001b3ec <bt_l2cap_chan_del>:
{
   1b3ec:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1b3ee:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1b3f2:	4604      	mov	r4, r0
	if (!chan->conn) {
   1b3f4:	b123      	cbz	r3, 1b400 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1b3f6:	686b      	ldr	r3, [r5, #4]
   1b3f8:	b103      	cbz	r3, 1b3fc <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1b3fa:	4798      	blx	r3
	chan->conn = NULL;
   1b3fc:	2300      	movs	r3, #0
   1b3fe:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1b400:	68e3      	ldr	r3, [r4, #12]
   1b402:	b10b      	cbz	r3, 1b408 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1b404:	4620      	mov	r0, r4
   1b406:	4798      	blx	r3
	if (ops->released) {
   1b408:	69eb      	ldr	r3, [r5, #28]
   1b40a:	b11b      	cbz	r3, 1b414 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1b40c:	4620      	mov	r0, r4
}
   1b40e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1b412:	4718      	bx	r3
}
   1b414:	bd70      	pop	{r4, r5, r6, pc}

0001b416 <bt_l2cap_disconnected>:
	return list->head;
   1b416:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1b418:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1b41a:	b18b      	cbz	r3, 1b440 <bt_l2cap_disconnected+0x2a>
   1b41c:	f1b3 0008 	subs.w	r0, r3, #8
   1b420:	d00e      	beq.n	1b440 <bt_l2cap_disconnected+0x2a>
	return node->next;
   1b422:	681c      	ldr	r4, [r3, #0]
   1b424:	b104      	cbz	r4, 1b428 <bt_l2cap_disconnected+0x12>
   1b426:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1b428:	f7ff ffe0 	bl	1b3ec <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1b42c:	b144      	cbz	r4, 1b440 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b42e:	f114 0308 	adds.w	r3, r4, #8
   1b432:	d002      	beq.n	1b43a <bt_l2cap_disconnected+0x24>
	return node->next;
   1b434:	68a3      	ldr	r3, [r4, #8]
   1b436:	b103      	cbz	r3, 1b43a <bt_l2cap_disconnected+0x24>
   1b438:	3b08      	subs	r3, #8
{
   1b43a:	4620      	mov	r0, r4
   1b43c:	461c      	mov	r4, r3
   1b43e:	e7f3      	b.n	1b428 <bt_l2cap_disconnected+0x12>
}
   1b440:	bd10      	pop	{r4, pc}

0001b442 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1b442:	3104      	adds	r1, #4
   1b444:	f7f5 bd2c 	b.w	10ea0 <bt_conn_create_pdu_timeout>

0001b448 <bt_l2cap_send_cb>:
{
   1b448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b44c:	4614      	mov	r4, r2
   1b44e:	4605      	mov	r5, r0
   1b450:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1b452:	f102 0008 	add.w	r0, r2, #8
   1b456:	2104      	movs	r1, #4
   1b458:	461e      	mov	r6, r3
   1b45a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1b45e:	f7f9 facf 	bl	14a00 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1b462:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1b464:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1b466:	3a04      	subs	r2, #4
   1b468:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   1b46a:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1b46c:	4632      	mov	r2, r6
   1b46e:	4621      	mov	r1, r4
   1b470:	4628      	mov	r0, r5
}
   1b472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1b476:	f7f5 b8c5 	b.w	10604 <bt_conn_send_cb>

0001b47a <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1b47a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b47c:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1b47e:	2202      	movs	r2, #2
   1b480:	2001      	movs	r0, #1
   1b482:	f7f5 fe5f 	bl	11144 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1b486:	4604      	mov	r4, r0
   1b488:	b160      	cbz	r0, 1b4a4 <l2cap_send_reject.constprop.0+0x2a>
	return net_buf_simple_add(&buf->b, len);
   1b48a:	2102      	movs	r1, #2
   1b48c:	3008      	adds	r0, #8
   1b48e:	f7f9 fb0f 	bl	14ab0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1b492:	2300      	movs	r3, #0
   1b494:	4622      	mov	r2, r4
   1b496:	7003      	strb	r3, [r0, #0]
   1b498:	7043      	strb	r3, [r0, #1]
   1b49a:	2105      	movs	r1, #5
   1b49c:	4628      	mov	r0, r5
   1b49e:	9300      	str	r3, [sp, #0]
   1b4a0:	f7ff ffd2 	bl	1b448 <bt_l2cap_send_cb>
}
   1b4a4:	b003      	add	sp, #12
   1b4a6:	bd30      	pop	{r4, r5, pc}

0001b4a8 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1b4a8:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b4aa:	b160      	cbz	r0, 1b4c6 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1b4ac:	3808      	subs	r0, #8
   1b4ae:	b900      	cbnz	r0, 1b4b2 <bt_l2cap_le_lookup_tx_cid+0xa>
   1b4b0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1b4b2:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1b4b6:	428b      	cmp	r3, r1
   1b4b8:	d005      	beq.n	1b4c6 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b4ba:	f110 0308 	adds.w	r3, r0, #8
   1b4be:	d001      	beq.n	1b4c4 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1b4c0:	6880      	ldr	r0, [r0, #8]
   1b4c2:	e7f2      	b.n	1b4aa <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1b4c4:	4618      	mov	r0, r3
}
   1b4c6:	4770      	bx	lr

0001b4c8 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1b4c8:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b4ca:	b160      	cbz	r0, 1b4e6 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1b4cc:	3808      	subs	r0, #8
   1b4ce:	b900      	cbnz	r0, 1b4d2 <bt_l2cap_le_lookup_rx_cid+0xa>
   1b4d0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1b4d2:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1b4d6:	428b      	cmp	r3, r1
   1b4d8:	d005      	beq.n	1b4e6 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b4da:	f110 0308 	adds.w	r3, r0, #8
   1b4de:	d001      	beq.n	1b4e4 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1b4e0:	6880      	ldr	r0, [r0, #8]
   1b4e2:	e7f2      	b.n	1b4ca <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1b4e4:	4618      	mov	r0, r3
}
   1b4e6:	4770      	bx	lr

0001b4e8 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1b4e8:	4770      	bx	lr

0001b4ea <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1b4ea:	4603      	mov	r3, r0
	return list->head;
   1b4ec:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1b4ee:	b128      	cbz	r0, 1b4fc <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b4f0:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1b4f2:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b4f4:	4288      	cmp	r0, r1
	list->head = node;
   1b4f6:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1b4f8:	bf08      	it	eq
   1b4fa:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1b4fc:	4770      	bx	lr

0001b4fe <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1b4fe:	4603      	mov	r3, r0
	size_t bytes = 0;
   1b500:	2000      	movs	r0, #0

	while (buf) {
   1b502:	b903      	cbnz	r3, 1b506 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1b504:	4770      	bx	lr
		bytes += buf->len;
   1b506:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1b508:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1b50a:	4410      	add	r0, r2
		buf = buf->frags;
   1b50c:	e7f9      	b.n	1b502 <net_buf_frags_len+0x4>

0001b50e <att_sent>:
	if (chan->ops->sent) {
   1b50e:	684b      	ldr	r3, [r1, #4]
{
   1b510:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1b512:	695b      	ldr	r3, [r3, #20]
   1b514:	b103      	cbz	r3, 1b518 <att_sent+0xa>
		chan->ops->sent(chan);
   1b516:	4718      	bx	r3
}
   1b518:	4770      	bx	lr

0001b51a <attr_read_type_cb>:
{
   1b51a:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1b51c:	68d4      	ldr	r4, [r2, #12]
   1b51e:	3102      	adds	r1, #2
   1b520:	7823      	ldrb	r3, [r4, #0]
   1b522:	b913      	cbnz	r3, 1b52a <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1b524:	7021      	strb	r1, [r4, #0]
	return true;
   1b526:	2001      	movs	r0, #1
   1b528:	e006      	b.n	1b538 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1b52a:	428b      	cmp	r3, r1
   1b52c:	d0fb      	beq.n	1b526 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1b52e:	8983      	ldrh	r3, [r0, #12]
   1b530:	3b02      	subs	r3, #2
   1b532:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1b534:	2000      	movs	r0, #0
   1b536:	6110      	str	r0, [r2, #16]
}
   1b538:	bd10      	pop	{r4, pc}

0001b53a <att_prepare_write_req>:
}
   1b53a:	2006      	movs	r0, #6
   1b53c:	4770      	bx	lr

0001b53e <att_op_get_type>:
	switch (op) {
   1b53e:	281e      	cmp	r0, #30
   1b540:	d816      	bhi.n	1b570 <att_op_get_type+0x32>
   1b542:	b308      	cbz	r0, 1b588 <att_op_get_type+0x4a>
   1b544:	1e43      	subs	r3, r0, #1
   1b546:	2b1d      	cmp	r3, #29
   1b548:	d81e      	bhi.n	1b588 <att_op_get_type+0x4a>
   1b54a:	e8df f003 	tbb	[pc, r3]
   1b54e:	2317      	.short	0x2317
   1b550:	23172317 	.word	0x23172317
   1b554:	23172317 	.word	0x23172317
   1b558:	23172317 	.word	0x23172317
   1b55c:	23172317 	.word	0x23172317
   1b560:	231d1d17 	.word	0x231d1d17
   1b564:	1d172317 	.word	0x1d172317
   1b568:	0f1b1d19 	.word	0x0f1b1d19
   1b56c:	2004      	movs	r0, #4
   1b56e:	4770      	bx	lr
   1b570:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1b574:	2b52      	cmp	r3, #82	; 0x52
   1b576:	d107      	bne.n	1b588 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1b578:	2000      	movs	r0, #0
}
   1b57a:	4770      	bx	lr
		return ATT_RESPONSE;
   1b57c:	2002      	movs	r0, #2
   1b57e:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1b580:	2003      	movs	r0, #3
   1b582:	4770      	bx	lr
		return ATT_INDICATION;
   1b584:	2005      	movs	r0, #5
   1b586:	4770      	bx	lr
		return ATT_COMMAND;
   1b588:	f010 0f40 	tst.w	r0, #64	; 0x40
   1b58c:	bf0c      	ite	eq
   1b58e:	2006      	moveq	r0, #6
   1b590:	2000      	movne	r0, #0
   1b592:	4770      	bx	lr
		return ATT_REQUEST;
   1b594:	2001      	movs	r0, #1
   1b596:	4770      	bx	lr

0001b598 <att_notify_mult>:
{
   1b598:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1b59a:	6803      	ldr	r3, [r0, #0]
   1b59c:	898a      	ldrh	r2, [r1, #12]
   1b59e:	6818      	ldr	r0, [r3, #0]
   1b5a0:	6889      	ldr	r1, [r1, #8]
   1b5a2:	f7f8 fe17 	bl	141d4 <bt_gatt_mult_notification>
}
   1b5a6:	2000      	movs	r0, #0
   1b5a8:	bd08      	pop	{r3, pc}

0001b5aa <att_notify>:
{
   1b5aa:	b538      	push	{r3, r4, r5, lr}
   1b5ac:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1b5ae:	f101 0008 	add.w	r0, r1, #8
   1b5b2:	460c      	mov	r4, r1
   1b5b4:	f000 ff07 	bl	1c3c6 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1b5b8:	682d      	ldr	r5, [r5, #0]
   1b5ba:	4601      	mov	r1, r0
   1b5bc:	89a3      	ldrh	r3, [r4, #12]
   1b5be:	6828      	ldr	r0, [r5, #0]
   1b5c0:	68a2      	ldr	r2, [r4, #8]
   1b5c2:	f000 fe68 	bl	1c296 <bt_gatt_notification>
}
   1b5c6:	2000      	movs	r0, #0
   1b5c8:	bd38      	pop	{r3, r4, r5, pc}

0001b5ca <bt_gatt_foreach_attr>:
{
   1b5ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1b5cc:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1b5d0:	2300      	movs	r3, #0
   1b5d2:	461a      	mov	r2, r3
   1b5d4:	9300      	str	r3, [sp, #0]
   1b5d6:	f7f7 fd65 	bl	130a4 <bt_gatt_foreach_attr_type>
}
   1b5da:	b005      	add	sp, #20
   1b5dc:	f85d fb04 	ldr.w	pc, [sp], #4

0001b5e0 <find_info_cb>:
{
   1b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1b5e2:	6893      	ldr	r3, [r2, #8]
{
   1b5e4:	4605      	mov	r5, r0
   1b5e6:	460e      	mov	r6, r1
   1b5e8:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1b5ea:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1b5ec:	b963      	cbnz	r3, 1b608 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1b5ee:	6850      	ldr	r0, [r2, #4]
   1b5f0:	2101      	movs	r1, #1
   1b5f2:	3008      	adds	r0, #8
   1b5f4:	f7f9 fa5c 	bl	14ab0 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1b5f8:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1b5fa:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1b5fc:	781b      	ldrb	r3, [r3, #0]
   1b5fe:	2b00      	cmp	r3, #0
   1b600:	bf0c      	ite	eq
   1b602:	2301      	moveq	r3, #1
   1b604:	2302      	movne	r3, #2
   1b606:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1b608:	68a3      	ldr	r3, [r4, #8]
   1b60a:	781b      	ldrb	r3, [r3, #0]
   1b60c:	2b01      	cmp	r3, #1
   1b60e:	d003      	beq.n	1b618 <find_info_cb+0x38>
   1b610:	2b02      	cmp	r3, #2
   1b612:	d019      	beq.n	1b648 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1b614:	2000      	movs	r0, #0
   1b616:	e016      	b.n	1b646 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1b618:	682b      	ldr	r3, [r5, #0]
   1b61a:	781b      	ldrb	r3, [r3, #0]
   1b61c:	2b00      	cmp	r3, #0
   1b61e:	d1f9      	bne.n	1b614 <find_info_cb+0x34>
   1b620:	6860      	ldr	r0, [r4, #4]
   1b622:	2104      	movs	r1, #4
   1b624:	3008      	adds	r0, #8
   1b626:	f7f9 fa43 	bl	14ab0 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b62a:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1b62c:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b62e:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   1b630:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b632:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1b634:	6863      	ldr	r3, [r4, #4]
   1b636:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1b63a:	899b      	ldrh	r3, [r3, #12]
   1b63c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1b63e:	2804      	cmp	r0, #4
   1b640:	bf94      	ite	ls
   1b642:	2000      	movls	r0, #0
   1b644:	2001      	movhi	r0, #1
}
   1b646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1b648:	682b      	ldr	r3, [r5, #0]
   1b64a:	781b      	ldrb	r3, [r3, #0]
   1b64c:	2b02      	cmp	r3, #2
   1b64e:	d1e1      	bne.n	1b614 <find_info_cb+0x34>
   1b650:	6860      	ldr	r0, [r4, #4]
   1b652:	2112      	movs	r1, #18
   1b654:	3008      	adds	r0, #8
   1b656:	f7f9 fa2b 	bl	14ab0 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b65a:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1b65c:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b65e:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1b660:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b664:	3101      	adds	r1, #1
   1b666:	f7ff fbc0 	bl	1adea <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1b66a:	6863      	ldr	r3, [r4, #4]
   1b66c:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1b670:	899b      	ldrh	r3, [r3, #12]
   1b672:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1b674:	2812      	cmp	r0, #18
   1b676:	e7e3      	b.n	1b640 <find_info_cb+0x60>

0001b678 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1b678:	68d0      	ldr	r0, [r2, #12]
   1b67a:	3104      	adds	r1, #4
   1b67c:	7803      	ldrb	r3, [r0, #0]
   1b67e:	b913      	cbnz	r3, 1b686 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1b680:	7001      	strb	r1, [r0, #0]
	return true;
   1b682:	2001      	movs	r0, #1
}
   1b684:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1b686:	428b      	cmp	r3, r1
   1b688:	d0fb      	beq.n	1b682 <attr_read_group_cb+0xa>
		data->group = NULL;
   1b68a:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1b68c:	6891      	ldr	r1, [r2, #8]
   1b68e:	898b      	ldrh	r3, [r1, #12]
   1b690:	3b04      	subs	r3, #4
   1b692:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1b694:	6110      	str	r0, [r2, #16]
		return false;
   1b696:	4770      	bx	lr

0001b698 <write_cb>:
{
   1b698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b69a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1b69c:	4601      	mov	r1, r0
{
   1b69e:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1b6a0:	222a      	movs	r2, #42	; 0x2a
   1b6a2:	6820      	ldr	r0, [r4, #0]
   1b6a4:	f000 fd68 	bl	1c178 <bt_gatt_check_perm>
   1b6a8:	4605      	mov	r5, r0
   1b6aa:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1b6ac:	bb00      	cbnz	r0, 1b6f0 <write_cb+0x58>
	if (!data->req) {
   1b6ae:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1b6b0:	4631      	mov	r1, r6
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1b6b2:	2b00      	cmp	r3, #0
   1b6b4:	bf14      	ite	ne
   1b6b6:	2300      	movne	r3, #0
   1b6b8:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1b6ba:	9301      	str	r3, [sp, #4]
   1b6bc:	8a63      	ldrh	r3, [r4, #18]
   1b6be:	68b7      	ldr	r7, [r6, #8]
   1b6c0:	9300      	str	r3, [sp, #0]
   1b6c2:	68e2      	ldr	r2, [r4, #12]
   1b6c4:	8a23      	ldrh	r3, [r4, #16]
   1b6c6:	6820      	ldr	r0, [r4, #0]
   1b6c8:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1b6ca:	1e03      	subs	r3, r0, #0
   1b6cc:	db05      	blt.n	1b6da <write_cb+0x42>
   1b6ce:	8a22      	ldrh	r2, [r4, #16]
   1b6d0:	4293      	cmp	r3, r2
   1b6d2:	d10b      	bne.n	1b6ec <write_cb+0x54>
	data->err = 0U;
   1b6d4:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1b6d6:	2501      	movs	r5, #1
   1b6d8:	e005      	b.n	1b6e6 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1b6da:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1b6de:	d305      	bcc.n	1b6ec <write_cb+0x54>
		return -err;
   1b6e0:	425b      	negs	r3, r3
   1b6e2:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1b6e4:	7523      	strb	r3, [r4, #20]
}
   1b6e6:	4628      	mov	r0, r5
   1b6e8:	b003      	add	sp, #12
   1b6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1b6ec:	230e      	movs	r3, #14
   1b6ee:	e7f9      	b.n	1b6e4 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1b6f0:	2500      	movs	r5, #0
   1b6f2:	e7f8      	b.n	1b6e6 <write_cb+0x4e>

0001b6f4 <att_chan_read>:
{
   1b6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6f8:	4680      	mov	r8, r0
   1b6fa:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b6fc:	4610      	mov	r0, r2
{
   1b6fe:	4699      	mov	r9, r3
   1b700:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b702:	f7ff fefc 	bl	1b4fe <net_buf_frags_len>
   1b706:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
{
   1b70a:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b70c:	4283      	cmp	r3, r0
   1b70e:	d97a      	bls.n	1b806 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b710:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   1b714:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1b716:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1b718:	f7f9 f910 	bl	1493c <net_buf_frag_last>
	size_t len, total = 0;
   1b71c:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1b720:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b722:	4630      	mov	r0, r6
   1b724:	f7ff feeb 	bl	1b4fe <net_buf_frags_len>
   1b728:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1b72c:	f105 0708 	add.w	r7, r5, #8
   1b730:	1a24      	subs	r4, r4, r0
   1b732:	4638      	mov	r0, r7
   1b734:	f000 fe53 	bl	1c3de <net_buf_simple_tailroom>
   1b738:	4284      	cmp	r4, r0
   1b73a:	d211      	bcs.n	1b760 <att_chan_read+0x6c>
   1b73c:	4630      	mov	r0, r6
   1b73e:	f7ff fede 	bl	1b4fe <net_buf_frags_len>
   1b742:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1b746:	1a24      	subs	r4, r4, r0
		if (!len) {
   1b748:	bb34      	cbnz	r4, 1b798 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1b74a:	79b0      	ldrb	r0, [r6, #6]
   1b74c:	f7f8 ff1a 	bl	14584 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1b750:	2200      	movs	r2, #0
   1b752:	2300      	movs	r3, #0
   1b754:	f000 fe1d 	bl	1c392 <net_buf_alloc_fixed>
			if (!frag) {
   1b758:	4605      	mov	r5, r0
   1b75a:	b930      	cbnz	r0, 1b76a <att_chan_read+0x76>
	return total;
   1b75c:	4657      	mov	r7, sl
   1b75e:	e02c      	b.n	1b7ba <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1b760:	4638      	mov	r0, r7
   1b762:	f000 fe3c 	bl	1c3de <net_buf_simple_tailroom>
   1b766:	4604      	mov	r4, r0
   1b768:	e7ee      	b.n	1b748 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1b76a:	4601      	mov	r1, r0
   1b76c:	4630      	mov	r0, r6
   1b76e:	f7f9 f925 	bl	149bc <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b772:	4630      	mov	r0, r6
   1b774:	f7ff fec3 	bl	1b4fe <net_buf_frags_len>
   1b778:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1b77c:	f105 0708 	add.w	r7, r5, #8
   1b780:	1a24      	subs	r4, r4, r0
   1b782:	4638      	mov	r0, r7
   1b784:	f000 fe2b 	bl	1c3de <net_buf_simple_tailroom>
   1b788:	4284      	cmp	r4, r0
   1b78a:	d21a      	bcs.n	1b7c2 <att_chan_read+0xce>
   1b78c:	4630      	mov	r0, r6
   1b78e:	f7ff feb6 	bl	1b4fe <net_buf_frags_len>
   1b792:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1b796:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1b798:	68a9      	ldr	r1, [r5, #8]
   1b79a:	89aa      	ldrh	r2, [r5, #12]
   1b79c:	f8db 7004 	ldr.w	r7, [fp, #4]
   1b7a0:	440a      	add	r2, r1
   1b7a2:	9803      	ldr	r0, [sp, #12]
   1b7a4:	4659      	mov	r1, fp
   1b7a6:	f8cd 9000 	str.w	r9, [sp]
   1b7aa:	b2a3      	uxth	r3, r4
   1b7ac:	47b8      	blx	r7
		if (read < 0) {
   1b7ae:	1e07      	subs	r7, r0, #0
   1b7b0:	da0c      	bge.n	1b7cc <att_chan_read+0xd8>
				return total;
   1b7b2:	f1ba 0f00 	cmp.w	sl, #0
   1b7b6:	bf18      	it	ne
   1b7b8:	4657      	movne	r7, sl
}
   1b7ba:	4638      	mov	r0, r7
   1b7bc:	b005      	add	sp, #20
   1b7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7c2:	4638      	mov	r0, r7
   1b7c4:	f000 fe0b 	bl	1c3de <net_buf_simple_tailroom>
   1b7c8:	4604      	mov	r4, r0
   1b7ca:	e7e5      	b.n	1b798 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1b7cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b7ce:	b993      	cbnz	r3, 1b7f6 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1b7d0:	4639      	mov	r1, r7
   1b7d2:	f105 0008 	add.w	r0, r5, #8
   1b7d6:	f7f9 f96b 	bl	14ab0 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b7da:	4630      	mov	r0, r6
   1b7dc:	f7ff fe8f 	bl	1b4fe <net_buf_frags_len>
   1b7e0:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1b7e4:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b7e6:	4283      	cmp	r3, r0
		total += read;
   1b7e8:	44ba      	add	sl, r7
		offset += read;
   1b7ea:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b7ee:	d9b5      	bls.n	1b75c <att_chan_read+0x68>
   1b7f0:	42a7      	cmp	r7, r4
   1b7f2:	d096      	beq.n	1b722 <att_chan_read+0x2e>
   1b7f4:	e7b2      	b.n	1b75c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1b7f6:	4639      	mov	r1, r7
   1b7f8:	4628      	mov	r0, r5
   1b7fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b7fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b7fe:	4798      	blx	r3
   1b800:	2800      	cmp	r0, #0
   1b802:	d1e5      	bne.n	1b7d0 <att_chan_read+0xdc>
   1b804:	e7aa      	b.n	1b75c <att_chan_read+0x68>
		return 0;
   1b806:	2700      	movs	r7, #0
   1b808:	e7d7      	b.n	1b7ba <att_chan_read+0xc6>

0001b80a <bt_att_chan_send>:
{
   1b80a:	b570      	push	{r4, r5, r6, lr}
   1b80c:	4604      	mov	r4, r0
   1b80e:	460e      	mov	r6, r1
	if (!cb) {
   1b810:	4615      	mov	r5, r2
   1b812:	b132      	cbz	r2, 1b822 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1b814:	462a      	mov	r2, r5
   1b816:	4631      	mov	r1, r6
   1b818:	4620      	mov	r0, r4
}
   1b81a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1b81e:	f7f5 bfb5 	b.w	1178c <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1b822:	2200      	movs	r2, #0
   1b824:	2300      	movs	r3, #0
   1b826:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1b82a:	f7fc ff05 	bl	18638 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1b82e:	2800      	cmp	r0, #0
   1b830:	daf0      	bge.n	1b814 <bt_att_chan_send+0xa>
}
   1b832:	f06f 000a 	mvn.w	r0, #10
   1b836:	bd70      	pop	{r4, r5, r6, pc}

0001b838 <bt_att_chan_send_rsp>:
{
   1b838:	b538      	push	{r3, r4, r5, lr}
   1b83a:	4604      	mov	r4, r0
   1b83c:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1b83e:	f7ff ffe4 	bl	1b80a <bt_att_chan_send>
	if (err) {
   1b842:	b130      	cbz	r0, 1b852 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1b844:	4629      	mov	r1, r5
   1b846:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   1b84a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1b84e:	f7f8 bfeb 	b.w	14828 <net_buf_put>
}
   1b852:	bd38      	pop	{r3, r4, r5, pc}

0001b854 <process_queue>:
{
   1b854:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1b856:	2200      	movs	r2, #0
{
   1b858:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1b85a:	2300      	movs	r3, #0
   1b85c:	4608      	mov	r0, r1
{
   1b85e:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1b860:	f7f8 ff8e 	bl	14780 <net_buf_get>
	if (buf) {
   1b864:	4605      	mov	r5, r0
   1b866:	b160      	cbz	r0, 1b882 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1b868:	4601      	mov	r1, r0
   1b86a:	2200      	movs	r2, #0
   1b86c:	4620      	mov	r0, r4
   1b86e:	f7f5 ff8d 	bl	1178c <chan_send>
		if (err) {
   1b872:	4604      	mov	r4, r0
   1b874:	b118      	cbz	r0, 1b87e <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1b876:	4629      	mov	r1, r5
   1b878:	4630      	mov	r0, r6
   1b87a:	f001 fbfe 	bl	1d07a <k_queue_prepend>
}
   1b87e:	4620      	mov	r0, r4
   1b880:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1b882:	f06f 0401 	mvn.w	r4, #1
   1b886:	e7fa      	b.n	1b87e <process_queue+0x2a>

0001b888 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b888:	2200      	movs	r2, #0
   1b88a:	b510      	push	{r4, lr}
	return list->head;
   1b88c:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b88e:	b153      	cbz	r3, 1b8a6 <sys_slist_find_and_remove.isra.0+0x1e>
   1b890:	428b      	cmp	r3, r1
   1b892:	d10e      	bne.n	1b8b2 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1b894:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1b896:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b898:	b932      	cbnz	r2, 1b8a8 <sys_slist_find_and_remove.isra.0+0x20>
   1b89a:	42a1      	cmp	r1, r4
	list->head = node;
   1b89c:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b89e:	d100      	bne.n	1b8a2 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1b8a0:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1b8a2:	2300      	movs	r3, #0
   1b8a4:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b8a6:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1b8a8:	42a1      	cmp	r1, r4
	parent->next = child;
   1b8aa:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1b8ac:	bf08      	it	eq
   1b8ae:	6042      	streq	r2, [r0, #4]
}
   1b8b0:	e7f7      	b.n	1b8a2 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1b8b2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b8b4:	681b      	ldr	r3, [r3, #0]
   1b8b6:	e7ea      	b.n	1b88e <sys_slist_find_and_remove.isra.0+0x6>

0001b8b8 <att_exec_write_req>:
   1b8b8:	2006      	movs	r0, #6
   1b8ba:	4770      	bx	lr

0001b8bc <chan_req_send>:
{
   1b8bc:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b8be:	690e      	ldr	r6, [r1, #16]
{
   1b8c0:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b8c2:	4630      	mov	r0, r6
   1b8c4:	f7ff fe1b 	bl	1b4fe <net_buf_frags_len>
   1b8c8:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
{
   1b8cc:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b8ce:	4283      	cmp	r3, r0
   1b8d0:	d317      	bcc.n	1b902 <chan_req_send+0x46>
	chan->req = req;
   1b8d2:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   1b8d6:	f106 0008 	add.w	r0, r6, #8
   1b8da:	f000 fd7c 	bl	1c3d6 <net_buf_simple_headroom>
	state->len = buf->len;
   1b8de:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1b8e0:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1b8e2:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1b8e4:	6920      	ldr	r0, [r4, #16]
   1b8e6:	f7f9 f811 	bl	1490c <net_buf_ref>
   1b8ea:	2200      	movs	r2, #0
   1b8ec:	4601      	mov	r1, r0
   1b8ee:	4628      	mov	r0, r5
   1b8f0:	f7f5 ff4c 	bl	1178c <chan_send>
	if (err) {
   1b8f4:	4605      	mov	r5, r0
   1b8f6:	b110      	cbz	r0, 1b8fe <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1b8f8:	6920      	ldr	r0, [r4, #16]
   1b8fa:	f7f8 ffc3 	bl	14884 <net_buf_unref>
}
   1b8fe:	4628      	mov	r0, r5
   1b900:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1b902:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1b906:	e7fa      	b.n	1b8fe <chan_req_send+0x42>

0001b908 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b908:	30c8      	adds	r0, #200	; 0xc8
   1b90a:	e8d0 3fef 	ldaex	r3, [r0]
   1b90e:	f023 0301 	bic.w	r3, r3, #1
   1b912:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1b916:	2a00      	cmp	r2, #0
   1b918:	d1f7      	bne.n	1b90a <chan_rsp_sent+0x2>
}
   1b91a:	4770      	bx	lr

0001b91c <chan_cfm_sent>:
   1b91c:	30c8      	adds	r0, #200	; 0xc8
   1b91e:	e8d0 3fef 	ldaex	r3, [r0]
   1b922:	f023 0302 	bic.w	r3, r3, #2
   1b926:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1b92a:	2a00      	cmp	r2, #0
   1b92c:	d1f7      	bne.n	1b91e <chan_cfm_sent+0x2>
}
   1b92e:	4770      	bx	lr

0001b930 <read_cb>:
{
   1b930:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b934:	4606      	mov	r6, r0
	data->err = 0x00;
   1b936:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   1b938:	f8d2 8000 	ldr.w	r8, [r2]
{
   1b93c:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1b93e:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b942:	4631      	mov	r1, r6
	data->err = 0x00;
   1b944:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b946:	2215      	movs	r2, #21
   1b948:	f000 fc16 	bl	1c178 <bt_gatt_check_perm>
   1b94c:	4604      	mov	r4, r0
   1b94e:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1b950:	b9a0      	cbnz	r0, 1b97c <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1b952:	e9cd 0000 	strd	r0, r0, [sp]
   1b956:	88ab      	ldrh	r3, [r5, #4]
   1b958:	4631      	mov	r1, r6
   1b95a:	4640      	mov	r0, r8
   1b95c:	68aa      	ldr	r2, [r5, #8]
   1b95e:	f7ff fec9 	bl	1b6f4 <att_chan_read>
	if (ret < 0) {
   1b962:	1e03      	subs	r3, r0, #0
   1b964:	da0c      	bge.n	1b980 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1b966:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1b96a:	bf32      	itee	cc
   1b96c:	230e      	movcc	r3, #14
		return -err;
   1b96e:	425b      	negcs	r3, r3
   1b970:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   1b972:	732b      	strb	r3, [r5, #12]
}
   1b974:	4620      	mov	r0, r4
   1b976:	b002      	add	sp, #8
   1b978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1b97c:	463c      	mov	r4, r7
   1b97e:	e7f9      	b.n	1b974 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1b980:	2401      	movs	r4, #1
   1b982:	e7f7      	b.n	1b974 <read_cb+0x44>

0001b984 <bt_att_sent>:
{
   1b984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1b986:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
{
   1b98a:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1b98c:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1b990:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1b994:	b10b      	cbz	r3, 1b99a <bt_att_sent+0x16>
		chan->sent(chan);
   1b996:	4638      	mov	r0, r7
   1b998:	4798      	blx	r3
   1b99a:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1b99e:	e8d3 2fef 	ldaex	r2, [r3]
   1b9a2:	f022 0210 	bic.w	r2, r2, #16
   1b9a6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1b9aa:	2900      	cmp	r1, #0
   1b9ac:	d1f7      	bne.n	1b99e <bt_att_sent+0x1a>
	if (!att) {
   1b9ae:	b335      	cbz	r5, 1b9fe <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1b9b0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1b9b4:	b98b      	cbnz	r3, 1b9da <bt_att_sent+0x56>
   1b9b6:	686b      	ldr	r3, [r5, #4]
   1b9b8:	b17b      	cbz	r3, 1b9da <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1b9ba:	1d28      	adds	r0, r5, #4
   1b9bc:	f7ff fd95 	bl	1b4ea <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b9c0:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1b9c2:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1b9c4:	4638      	mov	r0, r7
   1b9c6:	f7ff ff79 	bl	1b8bc <chan_req_send>
   1b9ca:	2800      	cmp	r0, #0
   1b9cc:	da17      	bge.n	1b9fe <bt_att_sent+0x7a>
	parent->next = child;
   1b9ce:	686b      	ldr	r3, [r5, #4]
   1b9d0:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1b9d2:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1b9d4:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1b9d6:	b903      	cbnz	r3, 1b9da <bt_att_sent+0x56>
	list->tail = node;
   1b9d8:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1b9da:	4638      	mov	r0, r7
   1b9dc:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   1b9e0:	f7ff ff38 	bl	1b854 <process_queue>
	if (!err) {
   1b9e4:	b158      	cbz	r0, 1b9fe <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
   1b9e6:	4638      	mov	r0, r7
   1b9e8:	f105 010c 	add.w	r1, r5, #12
   1b9ec:	f7ff ff32 	bl	1b854 <process_queue>
	if (!err) {
   1b9f0:	b128      	cbz	r0, 1b9fe <bt_att_sent+0x7a>
	z_impl_k_sem_give(sem);
   1b9f2:	f504 708c 	add.w	r0, r4, #280	; 0x118
}
   1b9f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1b9fa:	f7fc bde1 	b.w	185c0 <z_impl_k_sem_give>
   1b9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ba00 <att_req_send_process>:
{
   1ba00:	b570      	push	{r4, r5, r6, lr}
   1ba02:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1ba04:	3004      	adds	r0, #4
   1ba06:	f7ff fd70 	bl	1b4ea <sys_slist_get>
	if (!node) {
   1ba0a:	4606      	mov	r6, r0
   1ba0c:	b1c0      	cbz	r0, 1ba40 <att_req_send_process+0x40>
	return list->head;
   1ba0e:	6aab      	ldr	r3, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ba10:	b153      	cbz	r3, 1ba28 <att_req_send_process+0x28>
   1ba12:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   1ba16:	d007      	beq.n	1ba28 <att_req_send_process+0x28>
	return node->next;
   1ba18:	681c      	ldr	r4, [r3, #0]
   1ba1a:	b10c      	cbz	r4, 1ba20 <att_req_send_process+0x20>
   1ba1c:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		if (!chan->req) {
   1ba20:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1ba24:	b13b      	cbz	r3, 1ba36 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ba26:	b964      	cbnz	r4, 1ba42 <att_req_send_process+0x42>
	parent->next = child;
   1ba28:	686b      	ldr	r3, [r5, #4]
   1ba2a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ba2c:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1ba2e:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ba30:	b933      	cbnz	r3, 1ba40 <att_req_send_process+0x40>
	list->tail = node;
   1ba32:	60ae      	str	r6, [r5, #8]
}
   1ba34:	e004      	b.n	1ba40 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ba36:	4631      	mov	r1, r6
   1ba38:	f7f5 ff14 	bl	11864 <bt_att_chan_req_send>
   1ba3c:	2800      	cmp	r0, #0
   1ba3e:	dbf2      	blt.n	1ba26 <att_req_send_process+0x26>
}
   1ba40:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ba42:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   1ba46:	d004      	beq.n	1ba52 <att_req_send_process+0x52>
	return node->next;
   1ba48:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ba4c:	b10b      	cbz	r3, 1ba52 <att_req_send_process+0x52>
   1ba4e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1ba52:	4620      	mov	r0, r4
   1ba54:	461c      	mov	r4, r3
   1ba56:	e7e3      	b.n	1ba20 <att_req_send_process+0x20>

0001ba58 <bt_att_status>:
{
   1ba58:	b538      	push	{r3, r4, r5, lr}
   1ba5a:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ba5c:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1ba60:	07db      	lsls	r3, r3, #31
   1ba62:	d519      	bpl.n	1ba98 <bt_att_status+0x40>
	if (!chan->att) {
   1ba64:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1ba68:	b1b0      	cbz	r0, 1ba98 <bt_att_status+0x40>
	if (chan->req) {
   1ba6a:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1ba6e:	b99b      	cbnz	r3, 1ba98 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1ba70:	3004      	adds	r0, #4
   1ba72:	f7ff fd3a 	bl	1b4ea <sys_slist_get>
	if (!node) {
   1ba76:	4604      	mov	r4, r0
   1ba78:	b170      	cbz	r0, 1ba98 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ba7a:	4601      	mov	r1, r0
   1ba7c:	f1a5 0008 	sub.w	r0, r5, #8
   1ba80:	f7f5 fef0 	bl	11864 <bt_att_chan_req_send>
   1ba84:	2800      	cmp	r0, #0
   1ba86:	da07      	bge.n	1ba98 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1ba88:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1ba8c:	685a      	ldr	r2, [r3, #4]
   1ba8e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ba90:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1ba92:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ba94:	b902      	cbnz	r2, 1ba98 <bt_att_status+0x40>
	list->tail = node;
   1ba96:	609c      	str	r4, [r3, #8]
}
   1ba98:	bd38      	pop	{r3, r4, r5, pc}

0001ba9a <att_write_req>:
{
   1ba9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ba9c:	460c      	mov	r4, r1
   1ba9e:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1baa0:	f101 0008 	add.w	r0, r1, #8
   1baa4:	f000 fc8f 	bl	1c3c6 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1baa8:	89a2      	ldrh	r2, [r4, #12]
   1baaa:	4603      	mov	r3, r0
   1baac:	9201      	str	r2, [sp, #4]
   1baae:	68a2      	ldr	r2, [r4, #8]
   1bab0:	2112      	movs	r1, #18
   1bab2:	9200      	str	r2, [sp, #0]
   1bab4:	4628      	mov	r0, r5
   1bab6:	2213      	movs	r2, #19
   1bab8:	f7f6 f8b2 	bl	11c20 <att_write_rsp.constprop.0>
}
   1babc:	b003      	add	sp, #12
   1babe:	bd30      	pop	{r4, r5, pc}

0001bac0 <att_write_cmd>:
{
   1bac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bac2:	460c      	mov	r4, r1
   1bac4:	4605      	mov	r5, r0
   1bac6:	f101 0008 	add.w	r0, r1, #8
   1baca:	f000 fc7c 	bl	1c3c6 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1bace:	89a2      	ldrh	r2, [r4, #12]
   1bad0:	4603      	mov	r3, r0
   1bad2:	9201      	str	r2, [sp, #4]
   1bad4:	68a2      	ldr	r2, [r4, #8]
   1bad6:	4628      	mov	r0, r5
   1bad8:	9200      	str	r2, [sp, #0]
   1bada:	2200      	movs	r2, #0
   1badc:	4611      	mov	r1, r2
   1bade:	f7f6 f89f 	bl	11c20 <att_write_rsp.constprop.0>
}
   1bae2:	b003      	add	sp, #12
   1bae4:	bd30      	pop	{r4, r5, pc}

0001bae6 <att_read_blob_req>:
{
   1bae6:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1bae8:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1baea:	210c      	movs	r1, #12
   1baec:	8813      	ldrh	r3, [r2, #0]
   1baee:	8852      	ldrh	r2, [r2, #2]
   1baf0:	9200      	str	r2, [sp, #0]
   1baf2:	220d      	movs	r2, #13
   1baf4:	f7f6 f9f0 	bl	11ed8 <att_read_rsp>
}
   1baf8:	b003      	add	sp, #12
   1bafa:	f85d fb04 	ldr.w	pc, [sp], #4

0001bafe <att_read_req>:
{
   1bafe:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1bb00:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1bb02:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1bb04:	210a      	movs	r1, #10
   1bb06:	881b      	ldrh	r3, [r3, #0]
   1bb08:	9200      	str	r2, [sp, #0]
   1bb0a:	220b      	movs	r2, #11
   1bb0c:	f7f6 f9e4 	bl	11ed8 <att_read_rsp>
}
   1bb10:	b003      	add	sp, #12
   1bb12:	f85d fb04 	ldr.w	pc, [sp], #4

0001bb16 <bt_att_init>:
	bt_gatt_init();
   1bb16:	f7f7 ba19 	b.w	12f4c <bt_gatt_init>

0001bb1a <att_req_destroy>:
{
   1bb1a:	b510      	push	{r4, lr}
   1bb1c:	4604      	mov	r4, r0
	if (req->buf) {
   1bb1e:	6900      	ldr	r0, [r0, #16]
   1bb20:	b108      	cbz	r0, 1bb26 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1bb22:	f7f8 feaf 	bl	14884 <net_buf_unref>
	if (req->destroy) {
   1bb26:	68a3      	ldr	r3, [r4, #8]
   1bb28:	b10b      	cbz	r3, 1bb2e <att_req_destroy+0x14>
		req->destroy(req);
   1bb2a:	4620      	mov	r0, r4
   1bb2c:	4798      	blx	r3
	bt_att_req_free(req);
   1bb2e:	4620      	mov	r0, r4
}
   1bb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1bb34:	f7f6 bb6e 	b.w	12214 <bt_att_req_free>

0001bb38 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1bb38:	898a      	ldrh	r2, [r1, #12]
   1bb3a:	2300      	movs	r3, #0
   1bb3c:	6889      	ldr	r1, [r1, #8]
   1bb3e:	f7f6 bb75 	b.w	1222c <att_handle_rsp>

0001bb42 <att_handle_find_type_rsp>:
   1bb42:	f7ff bff9 	b.w	1bb38 <att_handle_find_info_rsp>

0001bb46 <att_handle_read_type_rsp>:
   1bb46:	f7ff bff7 	b.w	1bb38 <att_handle_find_info_rsp>

0001bb4a <att_handle_read_rsp>:
   1bb4a:	f7ff bff5 	b.w	1bb38 <att_handle_find_info_rsp>

0001bb4e <att_handle_read_blob_rsp>:
   1bb4e:	f7ff bff3 	b.w	1bb38 <att_handle_find_info_rsp>

0001bb52 <att_handle_read_mult_rsp>:
   1bb52:	f7ff bff1 	b.w	1bb38 <att_handle_find_info_rsp>

0001bb56 <att_handle_read_group_rsp>:
   1bb56:	f7ff bfef 	b.w	1bb38 <att_handle_find_info_rsp>

0001bb5a <att_handle_write_rsp>:
   1bb5a:	f7ff bfed 	b.w	1bb38 <att_handle_find_info_rsp>

0001bb5e <att_handle_prepare_write_rsp>:
   1bb5e:	f7ff bfeb 	b.w	1bb38 <att_handle_find_info_rsp>

0001bb62 <att_handle_exec_write_rsp>:
   1bb62:	f7ff bfe9 	b.w	1bb38 <att_handle_find_info_rsp>

0001bb66 <att_confirm>:
   1bb66:	f7ff bfe7 	b.w	1bb38 <att_handle_find_info_rsp>

0001bb6a <att_mtu_rsp>:
{
   1bb6a:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   1bb6c:	6889      	ldr	r1, [r1, #8]
{
   1bb6e:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1bb70:	880c      	ldrh	r4, [r1, #0]
{
   1bb72:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1bb74:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1bb76:	bf89      	itett	hi
   1bb78:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1bb7a:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1bb7c:	f8a3 4052 	strhhi.w	r4, [r3, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1bb80:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1bb84:	bf99      	ittee	ls
   1bb86:	2304      	movls	r3, #4
   1bb88:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1bb8a:	2300      	movhi	r3, #0
   1bb8c:	8992      	ldrhhi	r2, [r2, #12]
}
   1bb8e:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1bb90:	f7f6 bb4c 	b.w	1222c <att_handle_rsp>

0001bb94 <att_chan_detach>:
{
   1bb94:	b538      	push	{r3, r4, r5, lr}
   1bb96:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1bb98:	6800      	ldr	r0, [r0, #0]
   1bb9a:	f504 719e 	add.w	r1, r4, #316	; 0x13c
   1bb9e:	3028      	adds	r0, #40	; 0x28
   1bba0:	f7ff fe72 	bl	1b888 <sys_slist_find_and_remove.isra.0>
		k_sem_give(&chan->tx_sem);
   1bba4:	f504 7590 	add.w	r5, r4, #288	; 0x120
   1bba8:	4628      	mov	r0, r5
   1bbaa:	f7fc fd09 	bl	185c0 <z_impl_k_sem_give>
   1bbae:	4628      	mov	r0, r5
   1bbb0:	f7fc fd06 	bl	185c0 <z_impl_k_sem_give>
   1bbb4:	4628      	mov	r0, r5
   1bbb6:	f7fc fd03 	bl	185c0 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1bbba:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   1bbbe:	2200      	movs	r2, #0
   1bbc0:	2300      	movs	r3, #0
   1bbc2:	4628      	mov	r0, r5
   1bbc4:	f7f8 fddc 	bl	14780 <net_buf_get>
   1bbc8:	4602      	mov	r2, r0
   1bbca:	b950      	cbnz	r0, 1bbe2 <att_chan_detach+0x4e>
	if (chan->req) {
   1bbcc:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1bbd0:	b123      	cbz	r3, 1bbdc <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1bbd2:	4601      	mov	r1, r0
   1bbd4:	230e      	movs	r3, #14
   1bbd6:	4620      	mov	r0, r4
   1bbd8:	f7f6 fb28 	bl	1222c <att_handle_rsp>
	chan->att = NULL;
   1bbdc:	2300      	movs	r3, #0
   1bbde:	6023      	str	r3, [r4, #0]
}
   1bbe0:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1bbe2:	f7f8 fe4f 	bl	14884 <net_buf_unref>
   1bbe6:	e7ea      	b.n	1bbbe <att_chan_detach+0x2a>

0001bbe8 <bt_att_disconnected>:
{
   1bbe8:	b538      	push	{r3, r4, r5, lr}
   1bbea:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1bbec:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1bbf0:	f7ff ffd0 	bl	1bb94 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1bbf4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1bbf6:	b93b      	cbnz	r3, 1bc08 <bt_att_disconnected+0x20>
	att_reset(att);
   1bbf8:	4628      	mov	r0, r5
   1bbfa:	f7f6 fb75 	bl	122e8 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1bbfe:	6820      	ldr	r0, [r4, #0]
}
   1bc00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1bc04:	f7f8 bbea 	b.w	143dc <bt_gatt_disconnected>
}
   1bc08:	bd38      	pop	{r3, r4, r5, pc}

0001bc0a <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1bc0a:	6010      	str	r0, [r2, #0]
}
   1bc0c:	2000      	movs	r0, #0
   1bc0e:	4770      	bx	lr

0001bc10 <gatt_ccc_changed>:
{
   1bc10:	460b      	mov	r3, r1
   1bc12:	460a      	mov	r2, r1
   1bc14:	b430      	push	{r4, r5}
   1bc16:	f101 0464 	add.w	r4, r1, #100	; 0x64
	uint16_t value = 0x0000;
   1bc1a:	2100      	movs	r1, #0
		if (ccc->cfg[i].value > value) {
   1bc1c:	8915      	ldrh	r5, [r2, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bc1e:	320a      	adds	r2, #10
   1bc20:	42a9      	cmp	r1, r5
   1bc22:	bf38      	it	cc
   1bc24:	4629      	movcc	r1, r5
   1bc26:	42a2      	cmp	r2, r4
   1bc28:	d1f8      	bne.n	1bc1c <gatt_ccc_changed+0xc>
	if (value != ccc->value) {
   1bc2a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   1bc2e:	428a      	cmp	r2, r1
   1bc30:	d005      	beq.n	1bc3e <gatt_ccc_changed+0x2e>
		ccc->value = value;
   1bc32:	f8a3 1064 	strh.w	r1, [r3, #100]	; 0x64
		if (ccc->cfg_changed) {
   1bc36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1bc38:	b10b      	cbz	r3, 1bc3e <gatt_ccc_changed+0x2e>
}
   1bc3a:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   1bc3c:	4718      	bx	r3
}
   1bc3e:	bc30      	pop	{r4, r5}
   1bc40:	4770      	bx	lr

0001bc42 <gatt_indicate_rsp>:
{
   1bc42:	b510      	push	{r4, lr}
   1bc44:	9c02      	ldr	r4, [sp, #8]
   1bc46:	460a      	mov	r2, r1
	params->_ref--;
   1bc48:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
   1bc4a:	4621      	mov	r1, r4
	params->_ref--;
   1bc4c:	3b01      	subs	r3, #1
   1bc4e:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1bc50:	68a3      	ldr	r3, [r4, #8]
   1bc52:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1bc54:	68e3      	ldr	r3, [r4, #12]
   1bc56:	b12b      	cbz	r3, 1bc64 <gatt_indicate_rsp+0x22>
   1bc58:	7da2      	ldrb	r2, [r4, #22]
   1bc5a:	b91a      	cbnz	r2, 1bc64 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1bc5c:	4620      	mov	r0, r4
}
   1bc5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1bc62:	4718      	bx	r3
}
   1bc64:	bd10      	pop	{r4, pc}

0001bc66 <match_uuid>:
	data->attr = attr;
   1bc66:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1bc68:	8091      	strh	r1, [r2, #4]
}
   1bc6a:	2000      	movs	r0, #0
   1bc6c:	4770      	bx	lr

0001bc6e <ccc_set_cb>:
}
   1bc6e:	2000      	movs	r0, #0
   1bc70:	4770      	bx	lr

0001bc72 <gen_hash_m>:
{
   1bc72:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1bc74:	6807      	ldr	r7, [r0, #0]
{
   1bc76:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1bc78:	783d      	ldrb	r5, [r7, #0]
{
   1bc7a:	4614      	mov	r4, r2
   1bc7c:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1bc7e:	b10d      	cbz	r5, 1bc84 <gen_hash_m+0x12>
	switch (u16->val) {
   1bc80:	2501      	movs	r5, #1
   1bc82:	e014      	b.n	1bcae <gen_hash_m+0x3c>
   1bc84:	887b      	ldrh	r3, [r7, #2]
   1bc86:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1bc8a:	d004      	beq.n	1bc96 <gen_hash_m+0x24>
   1bc8c:	d812      	bhi.n	1bcb4 <gen_hash_m+0x42>
   1bc8e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1bc92:	2b03      	cmp	r3, #3
   1bc94:	d8f4      	bhi.n	1bc80 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1bc96:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bc9a:	2202      	movs	r2, #2
   1bc9c:	4620      	mov	r0, r4
   1bc9e:	f10d 010e 	add.w	r1, sp, #14
   1bca2:	f7fe fcf6 	bl	1a692 <tc_cmac_update>
   1bca6:	b9e0      	cbnz	r0, 1bce2 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1bca8:	f06f 0315 	mvn.w	r3, #21
   1bcac:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1bcae:	4628      	mov	r0, r5
   1bcb0:	b009      	add	sp, #36	; 0x24
   1bcb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1bcb4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1bcb8:	33ff      	adds	r3, #255	; 0xff
   1bcba:	b29b      	uxth	r3, r3
   1bcbc:	2b04      	cmp	r3, #4
   1bcbe:	d8df      	bhi.n	1bc80 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1bcc0:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bcc4:	2202      	movs	r2, #2
   1bcc6:	4620      	mov	r0, r4
   1bcc8:	f10d 010e 	add.w	r1, sp, #14
   1bccc:	f7fe fce1 	bl	1a692 <tc_cmac_update>
   1bcd0:	2800      	cmp	r0, #0
   1bcd2:	d0e9      	beq.n	1bca8 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1bcd4:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bcd6:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1bcd8:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bcdc:	f10d 010e 	add.w	r1, sp, #14
   1bce0:	e017      	b.n	1bd12 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1bce2:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bce4:	2202      	movs	r2, #2
   1bce6:	4620      	mov	r0, r4
   1bce8:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1bcec:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bcf0:	f7fe fccf 	bl	1a692 <tc_cmac_update>
   1bcf4:	2800      	cmp	r0, #0
   1bcf6:	d0d7      	beq.n	1bca8 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1bcf8:	2000      	movs	r0, #0
   1bcfa:	2310      	movs	r3, #16
   1bcfc:	4631      	mov	r1, r6
   1bcfe:	eb0d 0203 	add.w	r2, sp, r3
   1bd02:	6877      	ldr	r7, [r6, #4]
   1bd04:	9000      	str	r0, [sp, #0]
   1bd06:	47b8      	blx	r7
		if (len < 0) {
   1bd08:	1e02      	subs	r2, r0, #0
   1bd0a:	da01      	bge.n	1bd10 <gen_hash_m+0x9e>
			state->err = len;
   1bd0c:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1bd0e:	e7ce      	b.n	1bcae <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1bd10:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bd12:	4620      	mov	r0, r4
   1bd14:	f7fe fcbd 	bl	1a692 <tc_cmac_update>
   1bd18:	2800      	cmp	r0, #0
   1bd1a:	d1b1      	bne.n	1bc80 <gen_hash_m+0xe>
   1bd1c:	e7c4      	b.n	1bca8 <gen_hash_m+0x36>

0001bd1e <bt_addr_le_cmp>:
   1bd1e:	2207      	movs	r2, #7
   1bd20:	f7ff b852 	b.w	1adc8 <memcmp>

0001bd24 <find_ccc_cfg>:
{
   1bd24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bd26:	4606      	mov	r6, r0
   1bd28:	1c4c      	adds	r4, r1, #1
   1bd2a:	f101 0565 	add.w	r5, r1, #101	; 0x65
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1bd2e:	1e67      	subs	r7, r4, #1
		if (conn) {
   1bd30:	b14e      	cbz	r6, 1bd46 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1bd32:	4622      	mov	r2, r4
   1bd34:	4630      	mov	r0, r6
   1bd36:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1bd3a:	f7ff fab1 	bl	1b2a0 <bt_conn_is_peer_addr_le>
   1bd3e:	b158      	cbz	r0, 1bd58 <find_ccc_cfg+0x34>
}
   1bd40:	4638      	mov	r0, r7
   1bd42:	b003      	add	sp, #12
   1bd44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bd46:	4669      	mov	r1, sp
   1bd48:	4620      	mov	r0, r4
   1bd4a:	9600      	str	r6, [sp, #0]
   1bd4c:	f8cd 6003 	str.w	r6, [sp, #3]
   1bd50:	f7ff ffe5 	bl	1bd1e <bt_addr_le_cmp>
   1bd54:	2800      	cmp	r0, #0
   1bd56:	d0f3      	beq.n	1bd40 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bd58:	340a      	adds	r4, #10
   1bd5a:	42ac      	cmp	r4, r5
   1bd5c:	d1e7      	bne.n	1bd2e <find_ccc_cfg+0xa>
	return NULL;
   1bd5e:	2700      	movs	r7, #0
   1bd60:	e7ee      	b.n	1bd40 <find_ccc_cfg+0x1c>

0001bd62 <ccc_find_cfg>:
{
   1bd62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd66:	4604      	mov	r4, r0
   1bd68:	460f      	mov	r7, r1
   1bd6a:	4690      	mov	r8, r2
   1bd6c:	2500      	movs	r5, #0
   1bd6e:	1c46      	adds	r6, r0, #1
		if (id == ccc->cfg[i].id &&
   1bd70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1bd74:	4543      	cmp	r3, r8
   1bd76:	d107      	bne.n	1bd88 <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1bd78:	4639      	mov	r1, r7
   1bd7a:	4630      	mov	r0, r6
   1bd7c:	f7ff ffcf 	bl	1bd1e <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1bd80:	b910      	cbnz	r0, 1bd88 <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   1bd82:	1960      	adds	r0, r4, r5
}
   1bd84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bd88:	350a      	adds	r5, #10
   1bd8a:	2d64      	cmp	r5, #100	; 0x64
   1bd8c:	f106 060a 	add.w	r6, r6, #10
   1bd90:	d1ee      	bne.n	1bd70 <ccc_find_cfg+0xe>
	return NULL;
   1bd92:	2000      	movs	r0, #0
   1bd94:	e7f6      	b.n	1bd84 <ccc_find_cfg+0x22>

0001bd96 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1bd96:	2207      	movs	r2, #7
   1bd98:	f7ff b827 	b.w	1adea <memcpy>

0001bd9c <clear_ccc_cfg>:
{
   1bd9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bd9e:	2500      	movs	r5, #0
{
   1bda0:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bda2:	4669      	mov	r1, sp
   1bda4:	3001      	adds	r0, #1
   1bda6:	9500      	str	r5, [sp, #0]
   1bda8:	f8cd 5003 	str.w	r5, [sp, #3]
   1bdac:	f7ff fff3 	bl	1bd96 <bt_addr_le_copy>
	cfg->id = 0U;
   1bdb0:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1bdb2:	8125      	strh	r5, [r4, #8]
}
   1bdb4:	b003      	add	sp, #12
   1bdb6:	bd30      	pop	{r4, r5, pc}

0001bdb8 <atomic_or>:
{
   1bdb8:	4603      	mov	r3, r0
}
   1bdba:	e8d3 0fef 	ldaex	r0, [r3]
   1bdbe:	ea40 0201 	orr.w	r2, r0, r1
   1bdc2:	e8c3 2fec 	stlex	ip, r2, [r3]
   1bdc6:	f1bc 0f00 	cmp.w	ip, #0
   1bdca:	d1f6      	bne.n	1bdba <atomic_or+0x2>
   1bdcc:	4770      	bx	lr

0001bdce <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bdce:	e8d0 0faf 	lda	r0, [r0]
}
   1bdd2:	4770      	bx	lr

0001bdd4 <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1bdd4:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   1bdd6:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1bdd8:	3001      	adds	r0, #1
   1bdda:	4669      	mov	r1, sp
   1bddc:	9300      	str	r3, [sp, #0]
   1bdde:	f8cd 3003 	str.w	r3, [sp, #3]
   1bde2:	f7ff ffd8 	bl	1bd96 <bt_addr_le_copy>
}
   1bde6:	b003      	add	sp, #12
   1bde8:	f85d fb04 	ldr.w	pc, [sp], #4

0001bdec <clear_cf_cfg>:
{
   1bdec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bdee:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bdf0:	2500      	movs	r5, #0
   1bdf2:	4669      	mov	r1, sp
   1bdf4:	3001      	adds	r0, #1
   1bdf6:	9500      	str	r5, [sp, #0]
   1bdf8:	f8cd 5003 	str.w	r5, [sp, #3]
   1bdfc:	f7ff ffcb 	bl	1bd96 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1be00:	f104 0008 	add.w	r0, r4, #8
   1be04:	2201      	movs	r2, #1
   1be06:	4629      	mov	r1, r5
   1be08:	f7ff f81a 	bl	1ae40 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1be0c:	340c      	adds	r4, #12
   1be0e:	e8d4 3fef 	ldaex	r3, [r4]
   1be12:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1be16:	2a00      	cmp	r2, #0
   1be18:	d1f9      	bne.n	1be0e <clear_cf_cfg+0x22>
}
   1be1a:	b003      	add	sp, #12
   1be1c:	bd30      	pop	{r4, r5, pc}

0001be1e <gatt_sub_remove>:
{
   1be1e:	b570      	push	{r4, r5, r6, lr}
   1be20:	460c      	mov	r4, r1
	if (params) {
   1be22:	4619      	mov	r1, r3
   1be24:	b16b      	cbz	r3, 1be42 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1be26:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   1be2a:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   1be2c:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   1be2e:	b97a      	cbnz	r2, 1be50 <gatt_sub_remove+0x32>
   1be30:	42ae      	cmp	r6, r5
	list->head = node;
   1be32:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1be34:	d100      	bne.n	1be38 <gatt_sub_remove+0x1a>
	list->tail = node;
   1be36:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1be38:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1be3a:	680d      	ldr	r5, [r1, #0]
   1be3c:	461a      	mov	r2, r3
   1be3e:	614b      	str	r3, [r1, #20]
   1be40:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   1be42:	68a3      	ldr	r3, [r4, #8]
   1be44:	b94b      	cbnz	r3, 1be5a <gatt_sub_remove+0x3c>
   1be46:	4620      	mov	r0, r4
}
   1be48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1be4c:	f7ff bfc2 	b.w	1bdd4 <gatt_sub_remove.part.0>
Z_GENLIST_REMOVE(slist, snode)
   1be50:	42ae      	cmp	r6, r5
	parent->next = child;
   1be52:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1be54:	bf08      	it	eq
   1be56:	60e2      	streq	r2, [r4, #12]
}
   1be58:	e7ee      	b.n	1be38 <gatt_sub_remove+0x1a>
   1be5a:	bd70      	pop	{r4, r5, r6, pc}

0001be5c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1be5c:	2a02      	cmp	r2, #2
{
   1be5e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1be60:	d108      	bne.n	1be74 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1be62:	2300      	movs	r3, #0
   1be64:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1be68:	461a      	mov	r2, r3
   1be6a:	7a00      	ldrb	r0, [r0, #8]
   1be6c:	f7f6 fcd4 	bl	12818 <sc_save>
}
   1be70:	2002      	movs	r0, #2
   1be72:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1be74:	f7f6 ff84 	bl	12d80 <sc_clear>
   1be78:	e7fa      	b.n	1be70 <sc_ccc_cfg_write+0x14>

0001be7a <gatt_write_ccc_rsp>:
{
   1be7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be7e:	4606      	mov	r6, r0
   1be80:	460d      	mov	r5, r1
   1be82:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1be84:	f104 0310 	add.w	r3, r4, #16
   1be88:	e8d3 2fef 	ldaex	r2, [r3]
   1be8c:	f022 0204 	bic.w	r2, r2, #4
   1be90:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1be94:	2900      	cmp	r1, #0
   1be96:	d1f7      	bne.n	1be88 <gatt_write_ccc_rsp+0xe>
	if (err) {
   1be98:	b1dd      	cbz	r5, 1bed2 <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   1be9a:	f7f6 fba7 	bl	125ec <gatt_sub_find>
		if (!sub) {
   1be9e:	4601      	mov	r1, r0
   1bea0:	b300      	cbz	r0, 1bee4 <gatt_write_ccc_rsp+0x6a>
	return list->head;
   1bea2:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bea4:	b143      	cbz	r3, 1beb8 <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1bea6:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1bea8:	f104 0014 	add.w	r0, r4, #20
   1beac:	4283      	cmp	r3, r0
   1beae:	d10b      	bne.n	1bec8 <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   1beb0:	4623      	mov	r3, r4
   1beb2:	4630      	mov	r0, r6
   1beb4:	f7ff ffb3 	bl	1be1e <gatt_sub_remove>
	if (params->write) {
   1beb8:	6863      	ldr	r3, [r4, #4]
   1beba:	b19b      	cbz	r3, 1bee4 <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   1bebc:	4629      	mov	r1, r5
   1bebe:	4630      	mov	r0, r6
}
   1bec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1bec4:	2200      	movs	r2, #0
   1bec6:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bec8:	2a00      	cmp	r2, #0
   1beca:	d0f5      	beq.n	1beb8 <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1becc:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bece:	6812      	ldr	r2, [r2, #0]
   1bed0:	e7ec      	b.n	1beac <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   1bed2:	89a3      	ldrh	r3, [r4, #12]
   1bed4:	2b00      	cmp	r3, #0
   1bed6:	d1ef      	bne.n	1beb8 <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   1bed8:	462b      	mov	r3, r5
   1beda:	462a      	mov	r2, r5
   1bedc:	4621      	mov	r1, r4
   1bede:	6827      	ldr	r7, [r4, #0]
   1bee0:	47b8      	blx	r7
   1bee2:	e7e9      	b.n	1beb8 <gatt_write_ccc_rsp+0x3e>
}
   1bee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bee8 <read_ppcp>:
{
   1bee8:	b513      	push	{r0, r1, r4, lr}
   1beea:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1beec:	2218      	movs	r2, #24
   1beee:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1bef2:	2228      	movs	r2, #40	; 0x28
   1bef4:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1bef8:	2200      	movs	r2, #0
   1befa:	f8ad 2004 	strh.w	r2, [sp, #4]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1befe:	222a      	movs	r2, #42	; 0x2a
{
   1bf00:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1bf04:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1bf08:	2908      	cmp	r1, #8
   1bf0a:	d80b      	bhi.n	1bf24 <read_ppcp+0x3c>
	len = MIN(buf_len, value_len - offset);
   1bf0c:	f1c1 0408 	rsb	r4, r1, #8
   1bf10:	429c      	cmp	r4, r3
   1bf12:	bfa8      	it	ge
   1bf14:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1bf16:	4469      	add	r1, sp
   1bf18:	4622      	mov	r2, r4
   1bf1a:	f7fe ff66 	bl	1adea <memcpy>
}
   1bf1e:	4620      	mov	r0, r4
   1bf20:	b002      	add	sp, #8
   1bf22:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bf24:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1bf28:	e7f9      	b.n	1bf1e <read_ppcp+0x36>

0001bf2a <read_appearance>:
{
   1bf2a:	b513      	push	{r0, r1, r4, lr}
   1bf2c:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1bf2e:	2200      	movs	r2, #0
{
   1bf30:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1bf34:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1bf38:	2902      	cmp	r1, #2
   1bf3a:	d80d      	bhi.n	1bf58 <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   1bf3c:	f1c1 0402 	rsb	r4, r1, #2
   1bf40:	429c      	cmp	r4, r3
   1bf42:	bfa8      	it	ge
   1bf44:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1bf46:	f10d 0306 	add.w	r3, sp, #6
   1bf4a:	4622      	mov	r2, r4
   1bf4c:	4419      	add	r1, r3
   1bf4e:	f7fe ff4c 	bl	1adea <memcpy>
}
   1bf52:	4620      	mov	r0, r4
   1bf54:	b002      	add	sp, #8
   1bf56:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bf58:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1bf5c:	e7f9      	b.n	1bf52 <read_appearance+0x28>

0001bf5e <read_name>:
{
   1bf5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf62:	4698      	mov	r8, r3
   1bf64:	4615      	mov	r5, r2
   1bf66:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1bf6a:	f7f3 fcc9 	bl	f900 <bt_get_name>
   1bf6e:	4607      	mov	r7, r0
				 strlen(name));
   1bf70:	f7fe fefd 	bl	1ad6e <strlen>
	if (offset > value_len) {
   1bf74:	b283      	uxth	r3, r0
   1bf76:	42b3      	cmp	r3, r6
   1bf78:	d30c      	bcc.n	1bf94 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1bf7a:	1b9c      	subs	r4, r3, r6
   1bf7c:	4544      	cmp	r4, r8
   1bf7e:	bfa8      	it	ge
   1bf80:	4644      	movge	r4, r8
   1bf82:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1bf84:	4622      	mov	r2, r4
   1bf86:	4628      	mov	r0, r5
   1bf88:	19b9      	adds	r1, r7, r6
   1bf8a:	f7fe ff2e 	bl	1adea <memcpy>
}
   1bf8e:	4620      	mov	r0, r4
   1bf90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bf94:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1bf98:	e7f9      	b.n	1bf8e <read_name+0x30>

0001bf9a <cf_read>:
{
   1bf9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bf9c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1bf9e:	2300      	movs	r3, #0
{
   1bfa0:	4615      	mov	r5, r2
   1bfa2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1bfa6:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1bfaa:	f7f6 fae1 	bl	12570 <find_cf_cfg>
	if (cfg) {
   1bfae:	b128      	cbz	r0, 1bfbc <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1bfb0:	f100 0108 	add.w	r1, r0, #8
   1bfb4:	2201      	movs	r2, #1
   1bfb6:	a801      	add	r0, sp, #4
   1bfb8:	f7fe ff17 	bl	1adea <memcpy>
	if (offset > value_len) {
   1bfbc:	2e01      	cmp	r6, #1
   1bfbe:	d80d      	bhi.n	1bfdc <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1bfc0:	f1c6 0401 	rsb	r4, r6, #1
   1bfc4:	42bc      	cmp	r4, r7
   1bfc6:	bfa8      	it	ge
   1bfc8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1bfca:	ab01      	add	r3, sp, #4
   1bfcc:	4622      	mov	r2, r4
   1bfce:	4628      	mov	r0, r5
   1bfd0:	1999      	adds	r1, r3, r6
   1bfd2:	f7fe ff0a 	bl	1adea <memcpy>
}
   1bfd6:	4620      	mov	r0, r4
   1bfd8:	b003      	add	sp, #12
   1bfda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bfdc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1bfe0:	e7f9      	b.n	1bfd6 <cf_read+0x3c>

0001bfe2 <bt_gatt_attr_read_service>:
{
   1bfe2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1bfe4:	68c9      	ldr	r1, [r1, #12]
{
   1bfe6:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1bfe8:	780b      	ldrb	r3, [r1, #0]
{
   1bfea:	4610      	mov	r0, r2
   1bfec:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1bff0:	b993      	cbnz	r3, 1c018 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1bff2:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   1bff4:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1bff6:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1bffa:	d819      	bhi.n	1c030 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1bffc:	f1c5 0202 	rsb	r2, r5, #2
   1c000:	4294      	cmp	r4, r2
   1c002:	bfa8      	it	ge
   1c004:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1c006:	4622      	mov	r2, r4
   1c008:	f10d 0306 	add.w	r3, sp, #6
   1c00c:	1959      	adds	r1, r3, r5
   1c00e:	f7fe feec 	bl	1adea <memcpy>
}
   1c012:	4620      	mov	r0, r4
   1c014:	b003      	add	sp, #12
   1c016:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1c018:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1c01a:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1c01e:	d807      	bhi.n	1c030 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1c020:	f1c5 0210 	rsb	r2, r5, #16
   1c024:	4294      	cmp	r4, r2
   1c026:	bfa8      	it	ge
   1c028:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1c02a:	4429      	add	r1, r5
   1c02c:	4622      	mov	r2, r4
   1c02e:	e7ee      	b.n	1c00e <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c030:	f06f 0406 	mvn.w	r4, #6
   1c034:	e7ed      	b.n	1c012 <bt_gatt_attr_read_service+0x30>

0001c036 <bt_gatt_attr_read_ccc>:
{
   1c036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1c038:	68c9      	ldr	r1, [r1, #12]
{
   1c03a:	4615      	mov	r5, r2
   1c03c:	461f      	mov	r7, r3
   1c03e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1c042:	f7ff fe6f 	bl	1bd24 <find_ccc_cfg>
	if (cfg) {
   1c046:	b100      	cbz	r0, 1c04a <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1c048:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1c04a:	2e02      	cmp	r6, #2
   1c04c:	f8ad 0006 	strh.w	r0, [sp, #6]
   1c050:	d80e      	bhi.n	1c070 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1c052:	f1c6 0402 	rsb	r4, r6, #2
   1c056:	42bc      	cmp	r4, r7
   1c058:	bfa8      	it	ge
   1c05a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1c05c:	f10d 0306 	add.w	r3, sp, #6
   1c060:	4622      	mov	r2, r4
   1c062:	4628      	mov	r0, r5
   1c064:	1999      	adds	r1, r3, r6
   1c066:	f7fe fec0 	bl	1adea <memcpy>
}
   1c06a:	4620      	mov	r0, r4
   1c06c:	b003      	add	sp, #12
   1c06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c070:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1c074:	e7f9      	b.n	1c06a <bt_gatt_attr_read_ccc+0x34>

0001c076 <sc_restore_rsp>:
{
   1c076:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1c078:	f7f6 fa7a 	bl	12570 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1c07c:	b140      	cbz	r0, 1c090 <sc_restore_rsp+0x1a>
   1c07e:	7a03      	ldrb	r3, [r0, #8]
   1c080:	07db      	lsls	r3, r3, #31
   1c082:	d505      	bpl.n	1c090 <sc_restore_rsp+0x1a>
}
   1c084:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c088:	2101      	movs	r1, #1
   1c08a:	300c      	adds	r0, #12
   1c08c:	f7ff be94 	b.w	1bdb8 <atomic_or>
   1c090:	bd08      	pop	{r3, pc}

0001c092 <bt_gatt_attr_read>:
{
   1c092:	b538      	push	{r3, r4, r5, lr}
   1c094:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1c098:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1c09c:	4610      	mov	r0, r2
	if (offset > value_len) {
   1c09e:	42a9      	cmp	r1, r5
   1c0a0:	d80b      	bhi.n	1c0ba <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1c0a2:	1a6d      	subs	r5, r5, r1
   1c0a4:	429d      	cmp	r5, r3
   1c0a6:	bfa8      	it	ge
   1c0a8:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1c0aa:	9b05      	ldr	r3, [sp, #20]
   1c0ac:	b2ad      	uxth	r5, r5
   1c0ae:	462a      	mov	r2, r5
   1c0b0:	4419      	add	r1, r3
   1c0b2:	f7fe fe9a 	bl	1adea <memcpy>
}
   1c0b6:	4628      	mov	r0, r5
   1c0b8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c0ba:	f06f 0506 	mvn.w	r5, #6
   1c0be:	e7fa      	b.n	1c0b6 <bt_gatt_attr_read+0x24>

0001c0c0 <bt_gatt_attr_value_handle>:
{
   1c0c0:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1c0c2:	4604      	mov	r4, r0
   1c0c4:	b910      	cbnz	r0, 1c0cc <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1c0c6:	2000      	movs	r0, #0
}
   1c0c8:	b002      	add	sp, #8
   1c0ca:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1c0cc:	2300      	movs	r3, #0
   1c0ce:	f88d 3004 	strb.w	r3, [sp, #4]
   1c0d2:	f642 0303 	movw	r3, #10243	; 0x2803
   1c0d6:	6800      	ldr	r0, [r0, #0]
   1c0d8:	a901      	add	r1, sp, #4
   1c0da:	f8ad 3006 	strh.w	r3, [sp, #6]
   1c0de:	f7fe fef9 	bl	1aed4 <bt_uuid_cmp>
   1c0e2:	2800      	cmp	r0, #0
   1c0e4:	d1ef      	bne.n	1c0c6 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1c0e6:	68e3      	ldr	r3, [r4, #12]
   1c0e8:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1c0ea:	2800      	cmp	r0, #0
   1c0ec:	d1ec      	bne.n	1c0c8 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1c0ee:	4620      	mov	r0, r4
   1c0f0:	f7f6 ff94 	bl	1301c <bt_gatt_attr_get_handle>
   1c0f4:	3001      	adds	r0, #1
   1c0f6:	b280      	uxth	r0, r0
	return handle;
   1c0f8:	e7e6      	b.n	1c0c8 <bt_gatt_attr_value_handle+0x8>

0001c0fa <bt_gatt_attr_read_chrc>:
{
   1c0fa:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1c0fc:	68cf      	ldr	r7, [r1, #12]
{
   1c0fe:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1c100:	79bb      	ldrb	r3, [r7, #6]
{
   1c102:	b087      	sub	sp, #28
   1c104:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1c106:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1c10a:	4615      	mov	r5, r2
   1c10c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1c110:	f7ff ffd6 	bl	1c0c0 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1c114:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1c116:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1c11a:	780b      	ldrb	r3, [r1, #0]
   1c11c:	b99b      	cbnz	r3, 1c146 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1c11e:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   1c120:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1c122:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1c126:	42b1      	cmp	r1, r6
   1c128:	d315      	bcc.n	1c156 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1c12a:	1b89      	subs	r1, r1, r6
   1c12c:	42a1      	cmp	r1, r4
   1c12e:	bfa8      	it	ge
   1c130:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1c132:	ab01      	add	r3, sp, #4
   1c134:	b28c      	uxth	r4, r1
   1c136:	4622      	mov	r2, r4
   1c138:	4628      	mov	r0, r5
   1c13a:	1999      	adds	r1, r3, r6
   1c13c:	f7fe fe55 	bl	1adea <memcpy>
}
   1c140:	4620      	mov	r0, r4
   1c142:	b007      	add	sp, #28
   1c144:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1c146:	3101      	adds	r1, #1
   1c148:	2210      	movs	r2, #16
   1c14a:	f10d 0007 	add.w	r0, sp, #7
   1c14e:	f7fe fe4c 	bl	1adea <memcpy>
		value_len += 16U;
   1c152:	2113      	movs	r1, #19
   1c154:	e7e7      	b.n	1c126 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c156:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1c15a:	e7f1      	b.n	1c140 <bt_gatt_attr_read_chrc+0x46>

0001c15c <bt_gatt_foreach_attr>:
{
   1c15c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c15e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c162:	2300      	movs	r3, #0
   1c164:	461a      	mov	r2, r3
   1c166:	9300      	str	r3, [sp, #0]
   1c168:	f7f6 ff9c 	bl	130a4 <bt_gatt_foreach_attr_type>
}
   1c16c:	b005      	add	sp, #20
   1c16e:	f85d fb04 	ldr.w	pc, [sp], #4

0001c172 <db_hash_process>:
	db_hash_gen(true);
   1c172:	2001      	movs	r0, #1
   1c174:	f7f7 b802 	b.w	1317c <db_hash_gen>

0001c178 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1c178:	07d3      	lsls	r3, r2, #31
{
   1c17a:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1c17c:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1c17e:	d504      	bpl.n	1c18a <bt_gatt_check_perm+0x12>
   1c180:	f014 0f15 	tst.w	r4, #21
   1c184:	d017      	beq.n	1c1b6 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1c186:	684b      	ldr	r3, [r1, #4]
   1c188:	b1ab      	cbz	r3, 1c1b6 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1c18a:	0793      	lsls	r3, r2, #30
   1c18c:	d504      	bpl.n	1c198 <bt_gatt_check_perm+0x20>
   1c18e:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1c192:	d012      	beq.n	1c1ba <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1c194:	688b      	ldr	r3, [r1, #8]
   1c196:	b183      	cbz	r3, 1c1ba <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1c198:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1c19a:	f014 0f30 	tst.w	r4, #48	; 0x30
   1c19e:	d104      	bne.n	1c1aa <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1c1a0:	f014 000c 	ands.w	r0, r4, #12
   1c1a4:	bf18      	it	ne
   1c1a6:	200f      	movne	r0, #15
}
   1c1a8:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1c1aa:	f7ff f86e 	bl	1b28a <bt_conn_get_security>
   1c1ae:	2802      	cmp	r0, #2
   1c1b0:	d8f6      	bhi.n	1c1a0 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1c1b2:	2005      	movs	r0, #5
   1c1b4:	e7f8      	b.n	1c1a8 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1c1b6:	2002      	movs	r0, #2
   1c1b8:	e7f6      	b.n	1c1a8 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1c1ba:	2003      	movs	r0, #3
   1c1bc:	e7f4      	b.n	1c1a8 <bt_gatt_check_perm+0x30>

0001c1be <gatt_discover_next>:
{
   1c1be:	b570      	push	{r4, r5, r6, lr}
   1c1c0:	4605      	mov	r5, r0
   1c1c2:	4614      	mov	r4, r2
	if (!last_handle)
   1c1c4:	b929      	cbnz	r1, 1c1d2 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   1c1c6:	4621      	mov	r1, r4
   1c1c8:	4628      	mov	r0, r5
   1c1ca:	f7f7 fb2f 	bl	1382c <bt_gatt_discover>
   1c1ce:	b928      	cbnz	r0, 1c1dc <gatt_discover_next+0x1e>
}
   1c1d0:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   1c1d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c1d6:	4291      	cmp	r1, r2
   1c1d8:	d107      	bne.n	1c1ea <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   1c1da:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   1c1dc:	4622      	mov	r2, r4
   1c1de:	4628      	mov	r0, r5
   1c1e0:	6863      	ldr	r3, [r4, #4]
   1c1e2:	2100      	movs	r1, #0
}
   1c1e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   1c1e8:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   1c1ea:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   1c1ec:	1c4b      	adds	r3, r1, #1
   1c1ee:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   1c1f0:	429a      	cmp	r2, r3
		params->start_handle++;
   1c1f2:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   1c1f4:	d2e7      	bcs.n	1c1c6 <gatt_discover_next+0x8>
   1c1f6:	e7f1      	b.n	1c1dc <gatt_discover_next+0x1e>

0001c1f8 <gatt_find_type_rsp>:
{
   1c1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c1fc:	b088      	sub	sp, #32
   1c1fe:	4607      	mov	r7, r0
   1c200:	4614      	mov	r4, r2
   1c202:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   1c206:	b911      	cbnz	r1, 1c20e <gatt_find_type_rsp+0x16>
   1c208:	f013 0803 	ands.w	r8, r3, #3
   1c20c:	d008      	beq.n	1c220 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   1c20e:	464a      	mov	r2, r9
   1c210:	2100      	movs	r1, #0
   1c212:	4638      	mov	r0, r7
   1c214:	f8d9 3004 	ldr.w	r3, [r9, #4]
}
   1c218:	b008      	add	sp, #32
   1c21a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   1c21e:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1c220:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1c222:	f642 0a01 	movw	sl, #10241	; 0x2801
   1c226:	f3c3 0387 	ubfx	r3, r3, #2, #8
   1c22a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   1c22e:	42ac      	cmp	r4, r5
   1c230:	d107      	bne.n	1c242 <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   1c232:	464a      	mov	r2, r9
   1c234:	4641      	mov	r1, r8
   1c236:	4638      	mov	r0, r7
}
   1c238:	b008      	add	sp, #32
   1c23a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   1c23e:	f7ff bfbe 	b.w	1c1be <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1c242:	f899 1010 	ldrb.w	r1, [r9, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1c246:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1c248:	2900      	cmp	r1, #0
   1c24a:	bf0c      	ite	eq
   1c24c:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   1c250:	4651      	movne	r1, sl
		value.end_handle = end_handle;
   1c252:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1c256:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   1c25a:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   1c25e:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   1c260:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1c262:	ab01      	add	r3, sp, #4
   1c264:	f8ad 1002 	strh.w	r1, [sp, #2]
   1c268:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   1c26a:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c26e:	4638      	mov	r0, r7
   1c270:	464a      	mov	r2, r9
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1c272:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c276:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1c27a:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1c27e:	f8cd d00c 	str.w	sp, [sp, #12]
   1c282:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c286:	a903      	add	r1, sp, #12
   1c288:	4798      	blx	r3
   1c28a:	3404      	adds	r4, #4
   1c28c:	2800      	cmp	r0, #0
   1c28e:	d1ce      	bne.n	1c22e <gatt_find_type_rsp+0x36>
}
   1c290:	b008      	add	sp, #32
   1c292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c296 <bt_gatt_notification>:
{
   1c296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c29a:	4607      	mov	r7, r0
   1c29c:	4688      	mov	r8, r1
   1c29e:	4691      	mov	r9, r2
   1c2a0:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1c2a2:	f7f6 f9a3 	bl	125ec <gatt_sub_find>
	if (!sub) {
   1c2a6:	b1f8      	cbz	r0, 1c2e8 <bt_gatt_notification+0x52>
	return list->head;
   1c2a8:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c2aa:	b1eb      	cbz	r3, 1c2e8 <bt_gatt_notification+0x52>
   1c2ac:	f1b3 0614 	subs.w	r6, r3, #20
   1c2b0:	d01a      	beq.n	1c2e8 <bt_gatt_notification+0x52>
	return node->next;
   1c2b2:	681c      	ldr	r4, [r3, #0]
   1c2b4:	b104      	cbz	r4, 1c2b8 <bt_gatt_notification+0x22>
   1c2b6:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1c2b8:	8933      	ldrh	r3, [r6, #8]
   1c2ba:	4543      	cmp	r3, r8
   1c2bc:	d10a      	bne.n	1c2d4 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1c2be:	4653      	mov	r3, sl
   1c2c0:	464a      	mov	r2, r9
   1c2c2:	4631      	mov	r1, r6
   1c2c4:	4638      	mov	r0, r7
   1c2c6:	6835      	ldr	r5, [r6, #0]
   1c2c8:	47a8      	blx	r5
   1c2ca:	b918      	cbnz	r0, 1c2d4 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1c2cc:	4631      	mov	r1, r6
   1c2ce:	4638      	mov	r0, r7
   1c2d0:	f7f7 fee8 	bl	140a4 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c2d4:	b144      	cbz	r4, 1c2e8 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c2d6:	f114 0514 	adds.w	r5, r4, #20
   1c2da:	d002      	beq.n	1c2e2 <bt_gatt_notification+0x4c>
	return node->next;
   1c2dc:	6965      	ldr	r5, [r4, #20]
   1c2de:	b105      	cbz	r5, 1c2e2 <bt_gatt_notification+0x4c>
   1c2e0:	3d14      	subs	r5, #20
{
   1c2e2:	4626      	mov	r6, r4
   1c2e4:	462c      	mov	r4, r5
   1c2e6:	e7e7      	b.n	1c2b8 <bt_gatt_notification+0x22>
}
   1c2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c2ec <bt_gatt_change_aware>:
{
   1c2ec:	b510      	push	{r4, lr}
   1c2ee:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1c2f0:	f7f6 f93e 	bl	12570 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1c2f4:	b910      	cbnz	r0, 1c2fc <bt_gatt_change_aware+0x10>
		return true;
   1c2f6:	2401      	movs	r4, #1
}
   1c2f8:	4620      	mov	r0, r4
   1c2fa:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1c2fc:	7a03      	ldrb	r3, [r0, #8]
   1c2fe:	07db      	lsls	r3, r3, #31
   1c300:	d5f9      	bpl.n	1c2f6 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1c302:	f100 030c 	add.w	r3, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c306:	4618      	mov	r0, r3
   1c308:	f7ff fd61 	bl	1bdce <atomic_get>
   1c30c:	07c1      	lsls	r1, r0, #31
   1c30e:	d4f2      	bmi.n	1c2f6 <bt_gatt_change_aware+0xa>
	if (!req) {
   1c310:	2c00      	cmp	r4, #0
   1c312:	d0f1      	beq.n	1c2f8 <bt_gatt_change_aware+0xc>
   1c314:	4618      	mov	r0, r3
   1c316:	f7ff fd5a 	bl	1bdce <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1c31a:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1c31c:	f3c0 0440 	ubfx	r4, r0, #1, #1
   1c320:	d50c      	bpl.n	1c33c <bt_gatt_change_aware+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c322:	e8d3 2fef 	ldaex	r2, [r3]
   1c326:	f022 0202 	bic.w	r2, r2, #2
   1c32a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c32e:	2900      	cmp	r1, #0
   1c330:	d1f7      	bne.n	1c322 <bt_gatt_change_aware+0x36>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c332:	2101      	movs	r1, #1
   1c334:	4618      	mov	r0, r3
   1c336:	f7ff fd3f 	bl	1bdb8 <atomic_or>
}
   1c33a:	e7dd      	b.n	1c2f8 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c33c:	2102      	movs	r1, #2
   1c33e:	e7f9      	b.n	1c334 <bt_gatt_change_aware+0x48>

0001c340 <bt_smp_recv>:
{
   1c340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1c342:	2100      	movs	r1, #0
   1c344:	f04f 32ff 	mov.w	r2, #4294967295
   1c348:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1c34c:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1c34e:	4608      	mov	r0, r1
   1c350:	f7ff f877 	bl	1b442 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   1c354:	f100 0608 	add.w	r6, r0, #8
   1c358:	4604      	mov	r4, r0
   1c35a:	2101      	movs	r1, #1
   1c35c:	4630      	mov	r0, r6
   1c35e:	f7f8 fba7 	bl	14ab0 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1c362:	2505      	movs	r5, #5
   1c364:	2101      	movs	r1, #1
   1c366:	7005      	strb	r5, [r0, #0]
   1c368:	4630      	mov	r0, r6
   1c36a:	f7f8 fba1 	bl	14ab0 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1c36e:	7005      	strb	r5, [r0, #0]
   1c370:	2500      	movs	r5, #0
   1c372:	4622      	mov	r2, r4
   1c374:	462b      	mov	r3, r5
   1c376:	2106      	movs	r1, #6
   1c378:	4638      	mov	r0, r7
   1c37a:	9500      	str	r5, [sp, #0]
   1c37c:	f7ff f864 	bl	1b448 <bt_l2cap_send_cb>
}
   1c380:	4628      	mov	r0, r5
   1c382:	b003      	add	sp, #12
   1c384:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c386 <bt_smp_sign>:
   1c386:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1c38a:	4770      	bx	lr

0001c38c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1c38c:	2000      	movs	r0, #0
   1c38e:	4770      	bx	lr

0001c390 <fixed_data_unref>:
}
   1c390:	4770      	bx	lr

0001c392 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c392:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1c394:	6849      	ldr	r1, [r1, #4]
   1c396:	6809      	ldr	r1, [r1, #0]
   1c398:	f7f8 b946 	b.w	14628 <net_buf_alloc_len>

0001c39c <net_buf_simple_init_with_data>:
	buf->size  = size;
   1c39c:	b292      	uxth	r2, r2
	buf->__buf = data;
   1c39e:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1c3a0:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1c3a2:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1c3a4:	8082      	strh	r2, [r0, #4]
}
   1c3a6:	4770      	bx	lr

0001c3a8 <net_buf_simple_push_u8>:
{
   1c3a8:	b510      	push	{r4, lr}
   1c3aa:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   1c3ac:	2101      	movs	r1, #1
   1c3ae:	f7f8 fb27 	bl	14a00 <net_buf_simple_push>
	*data = val;
   1c3b2:	7004      	strb	r4, [r0, #0]
}
   1c3b4:	bd10      	pop	{r4, pc}

0001c3b6 <net_buf_simple_pull_u8>:
{
   1c3b6:	b510      	push	{r4, lr}
	val = buf->data[0];
   1c3b8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1c3ba:	2101      	movs	r1, #1
	val = buf->data[0];
   1c3bc:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1c3be:	f7f8 fb3d 	bl	14a3c <net_buf_simple_pull>
}
   1c3c2:	4620      	mov	r0, r4
   1c3c4:	bd10      	pop	{r4, pc}

0001c3c6 <net_buf_simple_pull_le16>:
{
   1c3c6:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1c3c8:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1c3ca:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1c3cc:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1c3ce:	f7f8 fb35 	bl	14a3c <net_buf_simple_pull>
}
   1c3d2:	4620      	mov	r0, r4
   1c3d4:	bd10      	pop	{r4, pc}

0001c3d6 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1c3d6:	6802      	ldr	r2, [r0, #0]
   1c3d8:	6880      	ldr	r0, [r0, #8]
}
   1c3da:	1a10      	subs	r0, r2, r0
   1c3dc:	4770      	bx	lr

0001c3de <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1c3de:	8883      	ldrh	r3, [r0, #4]
   1c3e0:	88c2      	ldrh	r2, [r0, #6]
   1c3e2:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1c3e4:	6803      	ldr	r3, [r0, #0]
   1c3e6:	6880      	ldr	r0, [r0, #8]
   1c3e8:	1a18      	subs	r0, r3, r0
}
   1c3ea:	1a10      	subs	r0, r2, r0
   1c3ec:	4770      	bx	lr

0001c3ee <net_buf_simple_add_mem>:
{
   1c3ee:	b538      	push	{r3, r4, r5, lr}
   1c3f0:	460d      	mov	r5, r1
   1c3f2:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1c3f4:	4611      	mov	r1, r2
   1c3f6:	f7f8 fb5b 	bl	14ab0 <net_buf_simple_add>
   1c3fa:	4622      	mov	r2, r4
   1c3fc:	4629      	mov	r1, r5
}
   1c3fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1c402:	f7fe bcf2 	b.w	1adea <memcpy>

0001c406 <net_buf_simple_add_u8>:
{
   1c406:	b510      	push	{r4, lr}
   1c408:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   1c40a:	2101      	movs	r1, #1
   1c40c:	f7f8 fb50 	bl	14ab0 <net_buf_simple_add>
	*u8 = val;
   1c410:	7004      	strb	r4, [r0, #0]
}
   1c412:	bd10      	pop	{r4, pc}

0001c414 <net_buf_simple_add_le16>:
{
   1c414:	b510      	push	{r4, lr}
   1c416:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1c418:	2102      	movs	r1, #2
   1c41a:	f7f8 fb49 	bl	14ab0 <net_buf_simple_add>
	dst[0] = val;
   1c41e:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1c420:	0a24      	lsrs	r4, r4, #8
   1c422:	7044      	strb	r4, [r0, #1]
}
   1c424:	bd10      	pop	{r4, pc}

0001c426 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c426:	6843      	ldr	r3, [r0, #4]
}
   1c428:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c42a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1c42c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1c42e:	600b      	str	r3, [r1, #0]
}
   1c430:	4770      	bx	lr

0001c432 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c432:	6843      	ldr	r3, [r0, #4]
   1c434:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1c436:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1c438:	4042      	eors	r2, r0
   1c43a:	400a      	ands	r2, r1
   1c43c:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1c43e:	605a      	str	r2, [r3, #4]
}
   1c440:	2000      	movs	r0, #0
   1c442:	4770      	bx	lr

0001c444 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c444:	6843      	ldr	r3, [r0, #4]
}
   1c446:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c448:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1c44a:	6099      	str	r1, [r3, #8]
}
   1c44c:	4770      	bx	lr

0001c44e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c44e:	6843      	ldr	r3, [r0, #4]
}
   1c450:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c452:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1c454:	60d9      	str	r1, [r3, #12]
}
   1c456:	4770      	bx	lr

0001c458 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c458:	6843      	ldr	r3, [r0, #4]
}
   1c45a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c45c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1c45e:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1c460:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1c462:	6053      	str	r3, [r2, #4]
}
   1c464:	4770      	bx	lr

0001c466 <nrf_gpio_cfg_sense_set>:
{
   1c466:	b513      	push	{r0, r1, r4, lr}
   1c468:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c46a:	a801      	add	r0, sp, #4
{
   1c46c:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c46e:	f7f8 fb83 	bl	14b78 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1c472:	9b01      	ldr	r3, [sp, #4]
   1c474:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1c478:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1c47c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1c480:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   1c484:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   1c488:	b002      	add	sp, #8
   1c48a:	bd10      	pop	{r4, pc}

0001c48c <cfg_level_pins>:
{
   1c48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1c490:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1c492:	2500      	movs	r5, #0
	return port->data;
   1c494:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   1c496:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1c49a:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1c49c:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1c4a0:	4313      	orrs	r3, r2
   1c4a2:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1c4a6:	b90c      	cbnz	r4, 1c4ac <cfg_level_pins+0x20>
}
   1c4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1c4ac:	4226      	tst	r6, r4
   1c4ae:	d010      	beq.n	1c4d2 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1c4b0:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c4b2:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1c4b6:	40e9      	lsrs	r1, r5
   1c4b8:	f001 0101 	and.w	r1, r1, #1
   1c4bc:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c4c0:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1c4c4:	b2c9      	uxtb	r1, r1
   1c4c6:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1c4ca:	f7ff ffcc 	bl	1c466 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1c4ce:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1c4d2:	3501      	adds	r5, #1
		bit <<= 1;
   1c4d4:	0076      	lsls	r6, r6, #1
   1c4d6:	e7e6      	b.n	1c4a6 <cfg_level_pins+0x1a>

0001c4d8 <check_level_trigger_pins>:
{
   1c4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1c4dc:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1c4de:	2700      	movs	r7, #0
	return port->data;
   1c4e0:	68c3      	ldr	r3, [r0, #12]
	return port->config;
   1c4e2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1c4e6:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1c4e8:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1c4ec:	430a      	orrs	r2, r1
   1c4ee:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1c4f2:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1c4f6:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1c4f8:	6915      	ldr	r5, [r2, #16]
   1c4fa:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1c4fc:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   1c500:	b914      	cbnz	r4, 1c508 <check_level_trigger_pins+0x30>
}
   1c502:	4628      	mov	r0, r5
   1c504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1c508:	4234      	tst	r4, r6
   1c50a:	d00a      	beq.n	1c522 <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c50c:	f898 0008 	ldrb.w	r0, [r8, #8]
   1c510:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1c514:	2100      	movs	r1, #0
   1c516:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   1c51a:	f7ff ffa4 	bl	1c466 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1c51e:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1c522:	3701      	adds	r7, #1
		bit <<= 1;
   1c524:	0076      	lsls	r6, r6, #1
   1c526:	e7eb      	b.n	1c500 <check_level_trigger_pins+0x28>

0001c528 <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   1c528:	6883      	ldr	r3, [r0, #8]
   1c52a:	689b      	ldr	r3, [r3, #8]
   1c52c:	4718      	bx	r3

0001c52e <vipm_nrf_max_id_val_get>:
}
   1c52e:	2000      	movs	r0, #0
   1c530:	4770      	bx	lr

0001c532 <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   1c532:	b508      	push	{r3, lr}
   1c534:	b139      	cbz	r1, 1c546 <vipm_nrf_1_set_enabled+0x14>
   1c536:	202a      	movs	r0, #42	; 0x2a
   1c538:	f7f0 fbe2 	bl	cd00 <arch_irq_enable>
   1c53c:	2001      	movs	r0, #1
   1c53e:	f7f9 fe4d 	bl	161dc <nrfx_ipc_receive_event_enable>
   1c542:	2000      	movs	r0, #0
   1c544:	bd08      	pop	{r3, pc}
   1c546:	2001      	movs	r0, #1
   1c548:	f7f9 fe66 	bl	16218 <nrfx_ipc_receive_event_disable>
   1c54c:	e7f9      	b.n	1c542 <vipm_nrf_1_set_enabled+0x10>

0001c54e <uarte_nrfx_config_get>:
{
   1c54e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1c550:	68c2      	ldr	r2, [r0, #12]
   1c552:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1c556:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1c55a:	2000      	movs	r0, #0
   1c55c:	4770      	bx	lr

0001c55e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1c55e:	6843      	ldr	r3, [r0, #4]
   1c560:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1c562:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1c566:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1c56a:	4770      	bx	lr

0001c56c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1c56c:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1c56e:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1c570:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c572:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c576:	b148      	cbz	r0, 1c58c <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c578:	2000      	movs	r0, #0
	*c = data->rx_data;
   1c57a:	7d52      	ldrb	r2, [r2, #21]
   1c57c:	700a      	strb	r2, [r1, #0]
   1c57e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1c582:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c586:	2201      	movs	r2, #1
   1c588:	601a      	str	r2, [r3, #0]
	return 0;
   1c58a:	4770      	bx	lr
		return -1;
   1c58c:	f04f 30ff 	mov.w	r0, #4294967295
}
   1c590:	4770      	bx	lr

0001c592 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   1c592:	6843      	ldr	r3, [r0, #4]
{
   1c594:	4602      	mov	r2, r0
	return config->uarte_regs;
   1c596:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c598:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c59c:	b148      	cbz	r0, 1c5b2 <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c59e:	2000      	movs	r0, #0
	return dev->data;
   1c5a0:	68d2      	ldr	r2, [r2, #12]
   1c5a2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1c5a6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c5aa:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1c5ac:	7d52      	ldrb	r2, [r2, #21]
   1c5ae:	700a      	strb	r2, [r1, #0]
   1c5b0:	6018      	str	r0, [r3, #0]
}
   1c5b2:	4770      	bx	lr

0001c5b4 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1c5b4:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1c5b6:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   1c5b8:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1c5ba:	f04f 0020 	mov.w	r0, #32
   1c5be:	f3ef 8311 	mrs	r3, BASEPRI
   1c5c2:	f380 8811 	msr	BASEPRI, r0
   1c5c6:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1c5ca:	2000      	movs	r0, #0
   1c5cc:	68c9      	ldr	r1, [r1, #12]
   1c5ce:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1c5d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1c5d4:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1c5d8:	f383 8811 	msr	BASEPRI, r3
   1c5dc:	f3bf 8f6f 	isb	sy
}
   1c5e0:	4770      	bx	lr

0001c5e2 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1c5e2:	2201      	movs	r2, #1
   1c5e4:	68c3      	ldr	r3, [r0, #12]
   1c5e6:	68db      	ldr	r3, [r3, #12]
   1c5e8:	739a      	strb	r2, [r3, #14]
}
   1c5ea:	4770      	bx	lr

0001c5ec <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1c5ec:	68c3      	ldr	r3, [r0, #12]
   1c5ee:	68db      	ldr	r3, [r3, #12]
   1c5f0:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1c5f2:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1c5f6:	b962      	cbnz	r2, 1c612 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1c5f8:	6842      	ldr	r2, [r0, #4]
   1c5fa:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c5fc:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1c600:	b140      	cbz	r0, 1c614 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1c602:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   1c606:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1c60a:	d003      	beq.n	1c614 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1c60c:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   1c60e:	6119      	str	r1, [r3, #16]
   1c610:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1c612:	2000      	movs	r0, #0
}
   1c614:	4770      	bx	lr

0001c616 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1c616:	6843      	ldr	r3, [r0, #4]
   1c618:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c61a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1c61e:	3800      	subs	r0, #0
   1c620:	bf18      	it	ne
   1c622:	2001      	movne	r0, #1
   1c624:	4770      	bx	lr

0001c626 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1c626:	2210      	movs	r2, #16
	return config->uarte_regs;
   1c628:	6843      	ldr	r3, [r0, #4]
   1c62a:	681b      	ldr	r3, [r3, #0]
   1c62c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c630:	4770      	bx	lr

0001c632 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1c632:	2210      	movs	r2, #16
	return config->uarte_regs;
   1c634:	6843      	ldr	r3, [r0, #4]
   1c636:	681b      	ldr	r3, [r3, #0]
   1c638:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1c63c:	4770      	bx	lr

0001c63e <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1c63e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1c642:	6843      	ldr	r3, [r0, #4]
   1c644:	681b      	ldr	r3, [r3, #0]
   1c646:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c64a:	4770      	bx	lr

0001c64c <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1c64c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1c650:	6843      	ldr	r3, [r0, #4]
   1c652:	681b      	ldr	r3, [r3, #0]
   1c654:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1c658:	4770      	bx	lr

0001c65a <uarte_nrfx_irq_update>:
}
   1c65a:	2001      	movs	r0, #1
   1c65c:	4770      	bx	lr

0001c65e <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1c65e:	68c3      	ldr	r3, [r0, #12]
   1c660:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1c662:	e9c3 1200 	strd	r1, r2, [r3]
}
   1c666:	4770      	bx	lr

0001c668 <uarte_nrfx_irq_is_pending>:
{
   1c668:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1c66a:	6843      	ldr	r3, [r0, #4]
{
   1c66c:	4604      	mov	r4, r0
	return config->uarte_regs;
   1c66e:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1c670:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1c674:	025b      	lsls	r3, r3, #9
   1c676:	d405      	bmi.n	1c684 <uarte_nrfx_irq_is_pending+0x1c>
   1c678:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1c67c:	f010 0010 	ands.w	r0, r0, #16
   1c680:	d106      	bne.n	1c690 <uarte_nrfx_irq_is_pending+0x28>
}
   1c682:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1c684:	f7ff ffb2 	bl	1c5ec <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1c688:	2800      	cmp	r0, #0
   1c68a:	d0f5      	beq.n	1c678 <uarte_nrfx_irq_is_pending+0x10>
		||
   1c68c:	2001      	movs	r0, #1
   1c68e:	e7f8      	b.n	1c682 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1c690:	4620      	mov	r0, r4
   1c692:	f7ff ffc0 	bl	1c616 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1c696:	3800      	subs	r0, #0
   1c698:	bf18      	it	ne
   1c69a:	2001      	movne	r0, #1
   1c69c:	e7f1      	b.n	1c682 <uarte_nrfx_irq_is_pending+0x1a>

0001c69e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1c69e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1c6a0:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c6a2:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1c6a6:	b938      	cbnz	r0, 1c6b8 <is_tx_ready.isra.0+0x1a>
   1c6a8:	799b      	ldrb	r3, [r3, #6]
   1c6aa:	b933      	cbnz	r3, 1c6ba <is_tx_ready.isra.0+0x1c>
   1c6ac:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1c6b0:	3800      	subs	r0, #0
   1c6b2:	bf18      	it	ne
   1c6b4:	2001      	movne	r0, #1
   1c6b6:	4770      	bx	lr
   1c6b8:	2001      	movs	r0, #1
}
   1c6ba:	4770      	bx	lr

0001c6bc <uarte_nrfx_fifo_fill>:
{
   1c6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   1c6be:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1c6c0:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   1c6c2:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   1c6c4:	68f3      	ldr	r3, [r6, #12]
   1c6c6:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c6c8:	3310      	adds	r3, #16
   1c6ca:	4294      	cmp	r4, r2
   1c6cc:	bfa8      	it	ge
   1c6ce:	4614      	movge	r4, r2
   1c6d0:	2201      	movs	r2, #1
   1c6d2:	e8d3 7fef 	ldaex	r7, [r3]
   1c6d6:	2f00      	cmp	r7, #0
   1c6d8:	d104      	bne.n	1c6e4 <uarte_nrfx_fifo_fill+0x28>
   1c6da:	e8c3 2fec 	stlex	ip, r2, [r3]
   1c6de:	f1bc 0f00 	cmp.w	ip, #0
   1c6e2:	d1f6      	bne.n	1c6d2 <uarte_nrfx_fifo_fill+0x16>
   1c6e4:	bf0c      	ite	eq
   1c6e6:	4613      	moveq	r3, r2
   1c6e8:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1c6ea:	d01d      	beq.n	1c728 <uarte_nrfx_fifo_fill+0x6c>
		return 0;
   1c6ec:	461c      	mov	r4, r3
}
   1c6ee:	4620      	mov	r0, r4
   1c6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1c6f2:	68f2      	ldr	r2, [r6, #12]
   1c6f4:	5ccf      	ldrb	r7, [r1, r3]
   1c6f6:	6892      	ldr	r2, [r2, #8]
   1c6f8:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   1c6fa:	3301      	adds	r3, #1
   1c6fc:	42a3      	cmp	r3, r4
   1c6fe:	dbf8      	blt.n	1c6f2 <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   1c700:	f04f 0320 	mov.w	r3, #32
   1c704:	f3ef 8111 	mrs	r1, BASEPRI
   1c708:	f383 8811 	msr	BASEPRI, r3
   1c70c:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1c710:	6840      	ldr	r0, [r0, #4]
   1c712:	f7ff ffc4 	bl	1c69e <is_tx_ready.isra.0>
   1c716:	68f3      	ldr	r3, [r6, #12]
   1c718:	b940      	cbnz	r0, 1c72c <uarte_nrfx_fifo_fill+0x70>
		len = 0;
   1c71a:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   1c71c:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   1c71e:	f381 8811 	msr	BASEPRI, r1
   1c722:	f3bf 8f6f 	isb	sy
	return len;
   1c726:	e7e2      	b.n	1c6ee <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   1c728:	2300      	movs	r3, #0
   1c72a:	e7e7      	b.n	1c6fc <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c72c:	689b      	ldr	r3, [r3, #8]
   1c72e:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c732:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   1c734:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c738:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   1c73c:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   1c740:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   1c744:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c748:	2301      	movs	r3, #1
   1c74a:	60ab      	str	r3, [r5, #8]
}
   1c74c:	e7e7      	b.n	1c71e <uarte_nrfx_fifo_fill+0x62>

0001c74e <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1c74e:	6843      	ldr	r3, [r0, #4]
{
   1c750:	b410      	push	{r4}
	return config->uarte_regs;
   1c752:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1c754:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1c758:	05d2      	lsls	r2, r2, #23
   1c75a:	d518      	bpl.n	1c78e <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c75c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1c760:	b1aa      	cbz	r2, 1c78e <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1c762:	f04f 0120 	mov.w	r1, #32
   1c766:	f3ef 8211 	mrs	r2, BASEPRI
   1c76a:	f381 8811 	msr	BASEPRI, r1
   1c76e:	f3bf 8f6f 	isb	sy
   1c772:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1c776:	b131      	cbz	r1, 1c786 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c778:	2100      	movs	r1, #0
   1c77a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1c77e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c782:	2101      	movs	r1, #1
   1c784:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1c786:	f382 8811 	msr	BASEPRI, r2
   1c78a:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   1c78e:	68c2      	ldr	r2, [r0, #12]
   1c790:	68d2      	ldr	r2, [r2, #12]
   1c792:	b15a      	cbz	r2, 1c7ac <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c794:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1c798:	b151      	cbz	r1, 1c7b0 <uarte_nrfx_isr_int+0x62>
		data->int_driven->fifo_fill_lock = 0;
   1c79a:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   1c79c:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   1c79e:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1c7a0:	b134      	cbz	r4, 1c7b0 <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
   1c7a2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1c7a6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1c7aa:	7391      	strb	r1, [r2, #14]
}
   1c7ac:	bc10      	pop	{r4}
   1c7ae:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c7b0:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1c7b4:	b121      	cbz	r1, 1c7c0 <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c7b6:	2100      	movs	r1, #0
   1c7b8:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1c7bc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1c7c0:	6813      	ldr	r3, [r2, #0]
   1c7c2:	2b00      	cmp	r3, #0
   1c7c4:	d0f2      	beq.n	1c7ac <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1c7c6:	6851      	ldr	r1, [r2, #4]
}
   1c7c8:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1c7ca:	4718      	bx	r3

0001c7cc <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1c7cc:	2101      	movs	r1, #1
   1c7ce:	f7f9 ba09 	b.w	15be4 <dk_set_led>

0001c7d2 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1c7d2:	2100      	movs	r1, #0
   1c7d4:	f7f9 ba06 	b.w	15be4 <dk_set_led>

0001c7d8 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1c7d8:	f7f9 ba84 	b.w	15ce4 <SystemCoreClockUpdate>

0001c7dc <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1c7dc:	4700      	bx	r0

0001c7de <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1c7de:	f000 bcaf 	b.w	1d140 <z_impl_k_busy_wait>

0001c7e2 <metal_device_open>:
{
   1c7e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c7e4:	460c      	mov	r4, r1
   1c7e6:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1c7e8:	4606      	mov	r6, r0
   1c7ea:	b918      	cbnz	r0, 1c7f4 <metal_device_open+0x12>
		return -EINVAL;
   1c7ec:	f06f 0015 	mvn.w	r0, #21
}
   1c7f0:	b002      	add	sp, #8
   1c7f2:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1c7f4:	f7fe fabb 	bl	1ad6e <strlen>
   1c7f8:	2800      	cmp	r0, #0
   1c7fa:	d0f7      	beq.n	1c7ec <metal_device_open+0xa>
   1c7fc:	2c00      	cmp	r4, #0
   1c7fe:	d0f5      	beq.n	1c7ec <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1c800:	4620      	mov	r0, r4
   1c802:	f7fe fab4 	bl	1ad6e <strlen>
   1c806:	2800      	cmp	r0, #0
   1c808:	d0f0      	beq.n	1c7ec <metal_device_open+0xa>
   1c80a:	2d00      	cmp	r5, #0
   1c80c:	d0ee      	beq.n	1c7ec <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1c80e:	4630      	mov	r0, r6
   1c810:	a901      	add	r1, sp, #4
   1c812:	f7f9 fd75 	bl	16300 <metal_bus_find>
	if (error)
   1c816:	2800      	cmp	r0, #0
   1c818:	d1ea      	bne.n	1c7f0 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1c81a:	9801      	ldr	r0, [sp, #4]
   1c81c:	6883      	ldr	r3, [r0, #8]
   1c81e:	b11b      	cbz	r3, 1c828 <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1c820:	462a      	mov	r2, r5
   1c822:	4621      	mov	r1, r4
   1c824:	4798      	blx	r3
	if (error)
   1c826:	e7e3      	b.n	1c7f0 <metal_device_open+0xe>
		return -ENODEV;
   1c828:	f06f 0012 	mvn.w	r0, #18
   1c82c:	e7e0      	b.n	1c7f0 <metal_device_open+0xe>

0001c82e <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1c82e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c830:	6804      	ldr	r4, [r0, #0]
   1c832:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1c834:	1c66      	adds	r6, r4, #1
   1c836:	d00f      	beq.n	1c858 <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c838:	42a9      	cmp	r1, r5
   1c83a:	d232      	bcs.n	1c8a2 <metal_io_block_read+0x74>
		: NULL);
   1c83c:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1c83e:	185e      	adds	r6, r3, r1
   1c840:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1c842:	bf88      	it	hi
   1c844:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1c846:	6a05      	ldr	r5, [r0, #32]
   1c848:	b155      	cbz	r5, 1c860 <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   1c84a:	9300      	str	r3, [sp, #0]
   1c84c:	2305      	movs	r3, #5
   1c84e:	47a8      	blx	r5
   1c850:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1c852:	4618      	mov	r0, r3
   1c854:	b002      	add	sp, #8
   1c856:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1c858:	42a9      	cmp	r1, r5
   1c85a:	d222      	bcs.n	1c8a2 <metal_io_block_read+0x74>
   1c85c:	2400      	movs	r4, #0
   1c85e:	e7ee      	b.n	1c83e <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   1c860:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1c864:	4621      	mov	r1, r4
   1c866:	4618      	mov	r0, r3
   1c868:	2800      	cmp	r0, #0
   1c86a:	d0f2      	beq.n	1c852 <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   1c86c:	ea42 0401 	orr.w	r4, r2, r1
   1c870:	07a4      	lsls	r4, r4, #30
   1c872:	d10a      	bne.n	1c88a <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1c874:	2803      	cmp	r0, #3
   1c876:	dc0e      	bgt.n	1c896 <metal_io_block_read+0x68>
   1c878:	3901      	subs	r1, #1
   1c87a:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   1c87c:	4282      	cmp	r2, r0
   1c87e:	d0e8      	beq.n	1c852 <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   1c880:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   1c884:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1c888:	e7f8      	b.n	1c87c <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   1c88a:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   1c88e:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   1c890:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   1c894:	e7e8      	b.n	1c868 <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1c896:	f851 4b04 	ldr.w	r4, [r1], #4
   1c89a:	3804      	subs	r0, #4
   1c89c:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1c8a0:	e7e8      	b.n	1c874 <metal_io_block_read+0x46>
		return -ERANGE;
   1c8a2:	f06f 0325 	mvn.w	r3, #37	; 0x25
   1c8a6:	e7d4      	b.n	1c852 <metal_io_block_read+0x24>

0001c8a8 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1c8a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c8aa:	6804      	ldr	r4, [r0, #0]
   1c8ac:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1c8ae:	1c66      	adds	r6, r4, #1
   1c8b0:	d00e      	beq.n	1c8d0 <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c8b2:	42a9      	cmp	r1, r5
   1c8b4:	d230      	bcs.n	1c918 <metal_io_block_write+0x70>
		: NULL);
   1c8b6:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1c8b8:	185e      	adds	r6, r3, r1
   1c8ba:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1c8bc:	bf88      	it	hi
   1c8be:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1c8c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1c8c2:	b94d      	cbnz	r5, 1c8d8 <metal_io_block_write+0x30>
   1c8c4:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   1c8c6:	b991      	cbnz	r1, 1c8ee <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   1c8c8:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1c8cc:	4618      	mov	r0, r3
   1c8ce:	e006      	b.n	1c8de <metal_io_block_write+0x36>
	if (offset >= io->size)
   1c8d0:	42a9      	cmp	r1, r5
   1c8d2:	d221      	bcs.n	1c918 <metal_io_block_write+0x70>
   1c8d4:	2400      	movs	r4, #0
   1c8d6:	e7ef      	b.n	1c8b8 <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   1c8d8:	9300      	str	r3, [sp, #0]
   1c8da:	2305      	movs	r3, #5
   1c8dc:	47a8      	blx	r5
	}
	return retlen;
}
   1c8de:	b002      	add	sp, #8
   1c8e0:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1c8e2:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   1c8e6:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1c8e8:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   1c8ec:	e7eb      	b.n	1c8c6 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   1c8ee:	ea44 0002 	orr.w	r0, r4, r2
   1c8f2:	0780      	lsls	r0, r0, #30
   1c8f4:	d1f5      	bne.n	1c8e2 <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1c8f6:	2903      	cmp	r1, #3
   1c8f8:	dc08      	bgt.n	1c90c <metal_io_block_write+0x64>
   1c8fa:	3a01      	subs	r2, #1
   1c8fc:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   1c8fe:	428c      	cmp	r4, r1
   1c900:	d0e2      	beq.n	1c8c8 <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   1c902:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   1c906:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   1c90a:	e7f8      	b.n	1c8fe <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1c90c:	f852 0b04 	ldr.w	r0, [r2], #4
   1c910:	3904      	subs	r1, #4
   1c912:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1c916:	e7ee      	b.n	1c8f6 <metal_io_block_write+0x4e>
		return -ERANGE;
   1c918:	f06f 0025 	mvn.w	r0, #37	; 0x25
   1c91c:	e7df      	b.n	1c8de <metal_io_block_write+0x36>

0001c91e <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1c91e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c920:	6804      	ldr	r4, [r0, #0]
   1c922:	461d      	mov	r5, r3
		: NULL);
   1c924:	1c66      	adds	r6, r4, #1
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c926:	6883      	ldr	r3, [r0, #8]
		: NULL);
   1c928:	d00e      	beq.n	1c948 <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c92a:	4299      	cmp	r1, r3
   1c92c:	d22d      	bcs.n	1c98a <metal_io_block_set+0x6c>
		: NULL);
   1c92e:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1c930:	186e      	adds	r6, r5, r1
   1c932:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1c934:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1c936:	bf88      	it	hi
   1c938:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1c93a:	b186      	cbz	r6, 1c95e <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   1c93c:	2305      	movs	r3, #5
   1c93e:	9500      	str	r5, [sp, #0]
   1c940:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1c942:	4628      	mov	r0, r5
   1c944:	b002      	add	sp, #8
   1c946:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1c948:	4299      	cmp	r1, r3
   1c94a:	d21e      	bcs.n	1c98a <metal_io_block_set+0x6c>
   1c94c:	2400      	movs	r4, #0
   1c94e:	e7ef      	b.n	1c930 <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   1c950:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1c954:	3b01      	subs	r3, #1
   1c956:	b923      	cbnz	r3, 1c962 <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   1c958:	f3bf 8f5b 	dmb	ish
   1c95c:	e7f1      	b.n	1c942 <metal_io_block_set+0x24>
   1c95e:	462b      	mov	r3, r5
   1c960:	e7f9      	b.n	1c956 <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1c962:	07a1      	lsls	r1, r4, #30
   1c964:	d1f4      	bne.n	1c950 <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1c966:	0611      	lsls	r1, r2, #24
   1c968:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1c96c:	4311      	orrs	r1, r2
   1c96e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1c972:	2b03      	cmp	r3, #3
   1c974:	dc05      	bgt.n	1c982 <metal_io_block_set+0x64>
   1c976:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   1c978:	429c      	cmp	r4, r3
   1c97a:	d0ed      	beq.n	1c958 <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   1c97c:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   1c980:	e7fa      	b.n	1c978 <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   1c982:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1c986:	3b04      	subs	r3, #4
   1c988:	e7f3      	b.n	1c972 <metal_io_block_set+0x54>
		return -ERANGE;
   1c98a:	f06f 0525 	mvn.w	r5, #37	; 0x25
   1c98e:	e7d8      	b.n	1c942 <metal_io_block_set+0x24>

0001c990 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1c990:	2000      	movs	r0, #0
   1c992:	4770      	bx	lr

0001c994 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1c994:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   1c996:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1c998:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1c99a:	b984      	cbnz	r4, 1c9be <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   1c99c:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   1c99e:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   1c9a0:	291f      	cmp	r1, #31
   1c9a2:	bf98      	it	ls
   1c9a4:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1c9a8:	b165      	cbz	r5, 1c9c4 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   1c9aa:	6881      	ldr	r1, [r0, #8]
   1c9ac:	428b      	cmp	r3, r1
   1c9ae:	d209      	bcs.n	1c9c4 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   1c9b0:	6900      	ldr	r0, [r0, #16]
   1c9b2:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   1c9b4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1c9b8:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1c9ba:	bc30      	pop	{r4, r5}
   1c9bc:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1c9be:	4623      	mov	r3, r4
}
   1c9c0:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   1c9c2:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1c9c4:	f04f 30ff 	mov.w	r0, #4294967295
   1c9c8:	e7f7      	b.n	1c9ba <metal_io_phys+0x26>

0001c9ca <virtqueue_create>:
{
   1c9ca:	b570      	push	{r4, r5, r6, lr}
   1c9cc:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   1c9ce:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   1c9d0:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   1c9d2:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   1c9d6:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   1c9d8:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   1c9da:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1c9dc:	1c96      	adds	r6, r2, #2
   1c9de:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1c9e0:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1c9e4:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   1c9e8:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1c9ea:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   1c9ee:	1c6e      	adds	r6, r5, #1
   1c9f0:	4433      	add	r3, r6
   1c9f2:	426d      	negs	r5, r5
   1c9f4:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1c9f6:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1c9f8:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   1c9fa:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   1c9fe:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1ca00:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1ca02:	b96b      	cbnz	r3, 1ca20 <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   1ca04:	3a01      	subs	r2, #1
   1ca06:	4293      	cmp	r3, r2
   1ca08:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   1ca0c:	db0a      	blt.n	1ca24 <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1ca0e:	2300      	movs	r3, #0
			vr->desc[i].next = i + 1;
   1ca10:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1ca14:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1ca18:	7393      	strb	r3, [r2, #14]
   1ca1a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1ca1e:	73d3      	strb	r3, [r2, #15]
}
   1ca20:	2000      	movs	r0, #0
   1ca22:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   1ca24:	3301      	adds	r3, #1
   1ca26:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   1ca28:	e7ed      	b.n	1ca06 <virtqueue_create+0x3c>

0001ca2a <virtqueue_add_buffer>:
{
   1ca2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1ca2e:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   1ca30:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   1ca34:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1ca36:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1ca38:	46ba      	mov	sl, r7
{
   1ca3a:	b085      	sub	sp, #20
	needed = readable + writable;
   1ca3c:	18d6      	adds	r6, r2, r3
{
   1ca3e:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1ca40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1ca42:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   1ca46:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1ca48:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   1ca4a:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1ca4c:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1ca4e:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   1ca52:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1ca54:	42be      	cmp	r6, r7
   1ca56:	dc19      	bgt.n	1ca8c <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   1ca58:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1ca5a:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   1ca5c:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1ca5e:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   1ca60:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1ca62:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1ca64:	1e51      	subs	r1, r2, #1
   1ca66:	885a      	ldrh	r2, [r3, #2]
}
   1ca68:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1ca6a:	400a      	ands	r2, r1
   1ca6c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1ca70:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   1ca74:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   1ca78:	69e2      	ldr	r2, [r4, #28]
   1ca7a:	8853      	ldrh	r3, [r2, #2]
   1ca7c:	3301      	adds	r3, #1
   1ca7e:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1ca80:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1ca82:	3301      	adds	r3, #1
   1ca84:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1ca86:	b005      	add	sp, #20
   1ca88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1ca8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1ca8e:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1ca90:	f858 1c04 	ldr.w	r1, [r8, #-4]
   1ca94:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1ca98:	9302      	str	r3, [sp, #8]
   1ca9a:	6803      	ldr	r3, [r0, #0]
   1ca9c:	9203      	str	r2, [sp, #12]
   1ca9e:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1caa0:	6883      	ldr	r3, [r0, #8]
   1caa2:	f108 0808 	add.w	r8, r8, #8
   1caa6:	4299      	cmp	r1, r3
   1caa8:	bf28      	it	cs
   1caaa:	f04f 31ff 	movcs.w	r1, #4294967295
   1caae:	f7ff ff71 	bl	1c994 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1cab2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1cab6:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   1cab8:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   1cabc:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   1cac0:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1cac2:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1cac4:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   1cac8:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   1caca:	bfb6      	itet	lt
   1cacc:	2201      	movlt	r2, #1
		dp->flags = 0;
   1cace:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   1cad2:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   1cad4:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   1cad6:	bfd8      	it	le
   1cad8:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cada:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   1cade:	bfdc      	itt	le
   1cae0:	f042 0202 	orrle.w	r2, r2, #2
   1cae4:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cae6:	89ed      	ldrh	r5, [r5, #14]
   1cae8:	e7b4      	b.n	1ca54 <virtqueue_add_buffer+0x2a>

0001caea <virtqueue_get_buffer>:
{
   1caea:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1caec:	b350      	cbz	r0, 1cb44 <virtqueue_get_buffer+0x5a>
   1caee:	6a05      	ldr	r5, [r0, #32]
   1caf0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1caf2:	886c      	ldrh	r4, [r5, #2]
   1caf4:	429c      	cmp	r4, r3
   1caf6:	d030      	beq.n	1cb5a <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1caf8:	1c5c      	adds	r4, r3, #1
   1cafa:	85c4      	strh	r4, [r0, #46]	; 0x2e
   1cafc:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1cafe:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1cb02:	3c01      	subs	r4, #1
   1cb04:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1cb06:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1cb0a:	686b      	ldr	r3, [r5, #4]
   1cb0c:	b29e      	uxth	r6, r3
	if (len)
   1cb0e:	b109      	cbz	r1, 1cb14 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1cb10:	68ad      	ldr	r5, [r5, #8]
   1cb12:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1cb14:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1cb18:	b29b      	uxth	r3, r3
   1cb1a:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1cb1e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1cb22:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1cb24:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1cb26:	442f      	add	r7, r5
	dxp->ndescs--;
   1cb28:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1cb2a:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1cb2c:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1cb2e:	898d      	ldrh	r5, [r1, #12]
   1cb30:	076f      	lsls	r7, r5, #29
   1cb32:	d50e      	bpl.n	1cb52 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1cb34:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1cb36:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1cb38:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1cb3a:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1cb3c:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1cb3e:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1cb40:	b102      	cbz	r2, 1cb44 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1cb42:	8014      	strh	r4, [r2, #0]
}
   1cb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1cb46:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1cb48:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1cb4a:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1cb4c:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1cb50:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1cb52:	898d      	ldrh	r5, [r1, #12]
   1cb54:	07ed      	lsls	r5, r5, #31
   1cb56:	d4f6      	bmi.n	1cb46 <virtqueue_get_buffer+0x5c>
   1cb58:	e7ec      	b.n	1cb34 <virtqueue_get_buffer+0x4a>
		return NULL;
   1cb5a:	2000      	movs	r0, #0
   1cb5c:	e7f2      	b.n	1cb44 <virtqueue_get_buffer+0x5a>

0001cb5e <virtqueue_get_available_buffer>:
{
   1cb5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1cb62:	f3bf 8f5b 	dmb	ish
{
   1cb66:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1cb68:	69c2      	ldr	r2, [r0, #28]
{
   1cb6a:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1cb6c:	8853      	ldrh	r3, [r2, #2]
   1cb6e:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   1cb70:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1cb72:	428b      	cmp	r3, r1
   1cb74:	d045      	beq.n	1cc02 <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1cb76:	1c4b      	adds	r3, r1, #1
   1cb78:	8603      	strh	r3, [r0, #48]	; 0x30
   1cb7a:	8943      	ldrh	r3, [r0, #10]
   1cb7c:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
   1cb80:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1cb82:	400b      	ands	r3, r1
   1cb84:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1cb88:	889a      	ldrh	r2, [r3, #4]
   1cb8a:	b293      	uxth	r3, r2
   1cb8c:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1cb8e:	6982      	ldr	r2, [r0, #24]
   1cb90:	011b      	lsls	r3, r3, #4
   1cb92:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   1cb96:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1cb9a:	bb5b      	cbnz	r3, 1cbf4 <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1cb9c:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1cba0:	1c62      	adds	r2, r4, #1
   1cba2:	bf09      	itett	eq
   1cba4:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   1cba8:	ea09 0404 	andne.w	r4, r9, r4
   1cbac:	681c      	ldreq	r4, [r3, #0]
   1cbae:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   1cbb2:	4621      	mov	r1, r4
   1cbb4:	4640      	mov	r0, r8
   1cbb6:	f7ff feed 	bl	1c994 <metal_io_phys>
   1cbba:	4581      	cmp	r9, r0
   1cbbc:	d009      	beq.n	1cbd2 <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   1cbbe:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1cbc2:	3301      	adds	r3, #1
   1cbc4:	441c      	add	r4, r3
		} while (offset < io->size);
   1cbc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1cbca:	429c      	cmp	r4, r3
   1cbcc:	d3f1      	bcc.n	1cbb2 <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   1cbce:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1cbd2:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   1cbd6:	1c43      	adds	r3, r0, #1
   1cbd8:	d011      	beq.n	1cbfe <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1cbda:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1cbde:	42a3      	cmp	r3, r4
   1cbe0:	d90d      	bls.n	1cbfe <virtqueue_get_available_buffer+0xa0>
		: NULL);
   1cbe2:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   1cbe4:	8832      	ldrh	r2, [r6, #0]
   1cbe6:	69ab      	ldr	r3, [r5, #24]
   1cbe8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1cbec:	689b      	ldr	r3, [r3, #8]
   1cbee:	603b      	str	r3, [r7, #0]
}
   1cbf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1cbf4:	4649      	mov	r1, r9
   1cbf6:	4640      	mov	r0, r8
   1cbf8:	4798      	blx	r3
   1cbfa:	4604      	mov	r4, r0
   1cbfc:	e7e9      	b.n	1cbd2 <virtqueue_get_available_buffer+0x74>
		: NULL);
   1cbfe:	2000      	movs	r0, #0
   1cc00:	e7f0      	b.n	1cbe4 <virtqueue_get_available_buffer+0x86>
		return NULL;
   1cc02:	2000      	movs	r0, #0
   1cc04:	e7f4      	b.n	1cbf0 <virtqueue_get_available_buffer+0x92>

0001cc06 <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1cc06:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1cc08:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1cc0a:	6912      	ldr	r2, [r2, #16]
   1cc0c:	0092      	lsls	r2, r2, #2
   1cc0e:	d515      	bpl.n	1cc3c <virtqueue_disable_cb+0x36>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1cc10:	b94b      	cbnz	r3, 1cc26 <virtqueue_disable_cb+0x20>
			vring_used_event(&vq->vq_ring) =
   1cc12:	69c2      	ldr	r2, [r0, #28]
   1cc14:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1cc16:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1cc18:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   1cc1a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1cc1e:	1a1b      	subs	r3, r3, r0
   1cc20:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   1cc22:	8093      	strh	r3, [r2, #4]
   1cc24:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1cc26:	2b01      	cmp	r3, #1
   1cc28:	d10e      	bne.n	1cc48 <virtqueue_disable_cb+0x42>
			vring_avail_event(&vq->vq_ring) =
   1cc2a:	6a02      	ldr	r2, [r0, #32]
   1cc2c:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1cc2e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1cc30:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   1cc32:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1cc36:	1a1b      	subs	r3, r3, r0
   1cc38:	3b01      	subs	r3, #1
   1cc3a:	e7f2      	b.n	1cc22 <virtqueue_disable_cb+0x1c>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1cc3c:	b92b      	cbnz	r3, 1cc4a <virtqueue_disable_cb+0x44>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1cc3e:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1cc40:	8813      	ldrh	r3, [r2, #0]
   1cc42:	f043 0301 	orr.w	r3, r3, #1
   1cc46:	8013      	strh	r3, [r2, #0]
}
   1cc48:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1cc4a:	2b01      	cmp	r3, #1
   1cc4c:	d1fc      	bne.n	1cc48 <virtqueue_disable_cb+0x42>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1cc4e:	6a02      	ldr	r2, [r0, #32]
   1cc50:	e7f6      	b.n	1cc40 <virtqueue_disable_cb+0x3a>

0001cc52 <virtqueue_kick>:
{
   1cc52:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1cc54:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1cc58:	6803      	ldr	r3, [r0, #0]
{
   1cc5a:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1cc5c:	691a      	ldr	r2, [r3, #16]
   1cc5e:	699b      	ldr	r3, [r3, #24]
   1cc60:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1cc64:	d019      	beq.n	1cc9a <virtqueue_kick+0x48>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1cc66:	b97b      	cbnz	r3, 1cc88 <virtqueue_kick+0x36>
			new_idx = vq->vq_ring.avail->idx;
   1cc68:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   1cc6a:	6a02      	ldr	r2, [r0, #32]
   1cc6c:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.avail->idx;
   1cc6e:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1cc70:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   1cc74:	8892      	ldrh	r2, [r2, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1cc76:	1a9b      	subs	r3, r3, r2
   1cc78:	3b01      	subs	r3, #1
	if (vq_ring_must_notify(vq))
   1cc7a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1cc7c:	b29b      	uxth	r3, r3
   1cc7e:	429a      	cmp	r2, r3
   1cc80:	d813      	bhi.n	1ccaa <virtqueue_kick+0x58>
	vq->vq_queued_cnt = 0;
   1cc82:	2300      	movs	r3, #0
   1cc84:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1cc86:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1cc88:	2b01      	cmp	r3, #1
   1cc8a:	d1fa      	bne.n	1cc82 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1cc8c:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1cc8e:	69c2      	ldr	r2, [r0, #28]
   1cc90:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.used->idx;
   1cc92:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1cc94:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1cc98:	e7ec      	b.n	1cc74 <virtqueue_kick+0x22>
						prev_idx) != 0;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1cc9a:	b963      	cbnz	r3, 1ccb6 <virtqueue_kick+0x64>
			return (vq->vq_ring.used->flags &
   1cc9c:	6a03      	ldr	r3, [r0, #32]
				VRING_USED_F_NO_NOTIFY) == 0;
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
			return (vq->vq_ring.avail->flags &
   1cc9e:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1cca0:	43db      	mvns	r3, r3
   1cca2:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1cca6:	2b00      	cmp	r3, #0
   1cca8:	d0eb      	beq.n	1cc82 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1ccaa:	6923      	ldr	r3, [r4, #16]
   1ccac:	2b00      	cmp	r3, #0
   1ccae:	d0e8      	beq.n	1cc82 <virtqueue_kick+0x30>
		vq->notify(vq);
   1ccb0:	4620      	mov	r0, r4
   1ccb2:	4798      	blx	r3
   1ccb4:	e7e5      	b.n	1cc82 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1ccb6:	2b01      	cmp	r3, #1
   1ccb8:	d1e3      	bne.n	1cc82 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1ccba:	69c3      	ldr	r3, [r0, #28]
   1ccbc:	e7ef      	b.n	1cc9e <virtqueue_kick+0x4c>

0001ccbe <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1ccbe:	69c2      	ldr	r2, [r0, #28]
   1ccc0:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   1ccc2:	8853      	ldrh	r3, [r2, #2]
   1ccc4:	428b      	cmp	r3, r1
   1ccc6:	d00a      	beq.n	1ccde <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1ccc8:	8943      	ldrh	r3, [r0, #10]
   1ccca:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1cccc:	400b      	ands	r3, r1
   1ccce:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1ccd2:	889a      	ldrh	r2, [r3, #4]
   1ccd4:	6983      	ldr	r3, [r0, #24]
   1ccd6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1ccda:	6898      	ldr	r0, [r3, #8]
	return len;
   1ccdc:	4770      	bx	lr
		return 0;
   1ccde:	2000      	movs	r0, #0
}
   1cce0:	4770      	bx	lr

0001cce2 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1cce2:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1cce6:	68c3      	ldr	r3, [r0, #12]
   1cce8:	b103      	cbz	r3, 1ccec <virtqueue_notification+0xa>
		vq->callback(vq);
   1ccea:	4718      	bx	r3
}
   1ccec:	4770      	bx	lr

0001ccee <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1ccee:	f04f 32ff 	mov.w	r2, #4294967295
   1ccf2:	f04f 33ff 	mov.w	r3, #4294967295
   1ccf6:	f7fb bc9f 	b.w	18638 <z_impl_k_sem_take>

0001ccfa <rpmsg_unregister_endpoint>:
{
   1ccfa:	b570      	push	{r4, r5, r6, lr}
   1ccfc:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1ccfe:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1cd00:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1cd04:	4630      	mov	r0, r6
   1cd06:	f7ff fff2 	bl	1ccee <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1cd0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cd0c:	1c5a      	adds	r2, r3, #1
   1cd0e:	d010      	beq.n	1cd32 <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1cd10:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1cd14:	2b7f      	cmp	r3, #127	; 0x7f
   1cd16:	d80c      	bhi.n	1cd32 <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1cd18:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1cd1a:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1cd1c:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1cd1e:	f003 031f 	and.w	r3, r3, #31
   1cd22:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1cd26:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   1cd2a:	ea22 0203 	bic.w	r2, r2, r3
   1cd2e:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   1cd32:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1cd36:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1cd3a:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1cd3c:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1cd3e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1cd42:	2300      	movs	r3, #0
   1cd44:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1cd46:	4630      	mov	r0, r6
}
   1cd48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cd4c:	f7fb bc38 	b.w	185c0 <z_impl_k_sem_give>

0001cd50 <rpmsg_send_ns_message>:
{
   1cd50:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   1cd52:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1cd54:	b08c      	sub	sp, #48	; 0x30
   1cd56:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1cd58:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1cd5a:	2220      	movs	r2, #32
   1cd5c:	4601      	mov	r1, r0
   1cd5e:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1cd60:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1cd62:	f7fd fff2 	bl	1ad4a <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1cd66:	2328      	movs	r3, #40	; 0x28
   1cd68:	2201      	movs	r2, #1
   1cd6a:	4620      	mov	r0, r4
   1cd6c:	e9cd 3200 	strd	r3, r2, [sp]
   1cd70:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1cd72:	2235      	movs	r2, #53	; 0x35
   1cd74:	ab02      	add	r3, sp, #8
   1cd76:	f7f9 fbef 	bl	16558 <rpmsg_send_offchannel_raw>
}
   1cd7a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1cd7e:	b00c      	add	sp, #48	; 0x30
   1cd80:	bd10      	pop	{r4, pc}

0001cd82 <rpmsg_get_endpoint>:
{
   1cd82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cd86:	4680      	mov	r8, r0
   1cd88:	4689      	mov	r9, r1
   1cd8a:	4615      	mov	r5, r2
   1cd8c:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1cd8e:	6807      	ldr	r7, [r0, #0]
   1cd90:	45b8      	cmp	r8, r7
   1cd92:	d101      	bne.n	1cd98 <rpmsg_get_endpoint+0x16>
	return NULL;
   1cd94:	2400      	movs	r4, #0
   1cd96:	e021      	b.n	1cddc <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1cd98:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1cd9a:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1cd9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cda0:	d006      	beq.n	1cdb0 <rpmsg_get_endpoint+0x2e>
   1cda2:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1cda4:	d01a      	beq.n	1cddc <rpmsg_get_endpoint+0x5a>
		if (name)
   1cda6:	f1b9 0f00 	cmp.w	r9, #0
   1cdaa:	d106      	bne.n	1cdba <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   1cdac:	683f      	ldr	r7, [r7, #0]
   1cdae:	e7ef      	b.n	1cd90 <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1cdb0:	3301      	adds	r3, #1
   1cdb2:	d1f8      	bne.n	1cda6 <rpmsg_get_endpoint+0x24>
   1cdb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cdb6:	42b3      	cmp	r3, r6
   1cdb8:	e7f4      	b.n	1cda4 <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   1cdba:	2220      	movs	r2, #32
   1cdbc:	4649      	mov	r1, r9
   1cdbe:	4620      	mov	r0, r4
   1cdc0:	f7fd fff1 	bl	1ada6 <strncmp>
		if (!name || !name_match)
   1cdc4:	2800      	cmp	r0, #0
   1cdc6:	d1f1      	bne.n	1cdac <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1cdc8:	1c72      	adds	r2, r6, #1
   1cdca:	d002      	beq.n	1cdd2 <rpmsg_get_endpoint+0x50>
   1cdcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cdce:	42b3      	cmp	r3, r6
   1cdd0:	d004      	beq.n	1cddc <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1cdd2:	1c6b      	adds	r3, r5, #1
   1cdd4:	d1ea      	bne.n	1cdac <rpmsg_get_endpoint+0x2a>
   1cdd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1cdd8:	3301      	adds	r3, #1
   1cdda:	d1e7      	bne.n	1cdac <rpmsg_get_endpoint+0x2a>
}
   1cddc:	4620      	mov	r0, r4
   1cdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001cde2 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   1cde2:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1cde4:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   1cde8:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   1cdec:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   1cdee:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   1cdf0:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   1cdf2:	6013      	str	r3, [r2, #0]
}
   1cdf4:	4770      	bx	lr

0001cdf6 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1cdf6:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   1cdf8:	4604      	mov	r4, r0
   1cdfa:	b190      	cbz	r0, 1ce22 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   1cdfc:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   1cdfe:	b183      	cbz	r3, 1ce22 <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   1ce00:	7802      	ldrb	r2, [r0, #0]
   1ce02:	b14a      	cbz	r2, 1ce18 <rpmsg_destroy_ept+0x22>
   1ce04:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1ce08:	b133      	cbz	r3, 1ce18 <rpmsg_destroy_ept+0x22>
   1ce0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1ce0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1ce10:	d302      	bcc.n	1ce18 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1ce12:	2101      	movs	r1, #1
   1ce14:	f7ff ff9c 	bl	1cd50 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1ce18:	4620      	mov	r0, r4
}
   1ce1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1ce1e:	f7ff bf6c 	b.w	1ccfa <rpmsg_unregister_endpoint>
}
   1ce22:	bd10      	pop	{r4, pc}

0001ce24 <rpmsg_virtio_tx_callback>:
}
   1ce24:	4770      	bx	lr

0001ce26 <k_sem_give>:
   1ce26:	f7fb bbcb 	b.w	185c0 <z_impl_k_sem_give>

0001ce2a <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1ce2a:	f04f 32ff 	mov.w	r2, #4294967295
   1ce2e:	f04f 33ff 	mov.w	r3, #4294967295
   1ce32:	f7fb bc01 	b.w	18638 <z_impl_k_sem_take>

0001ce36 <rpmsg_virtio_ns_callback>:
{
   1ce36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   1ce3a:	2a28      	cmp	r2, #40	; 0x28
{
   1ce3c:	4680      	mov	r8, r0
   1ce3e:	460e      	mov	r6, r1
   1ce40:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   1ce42:	d12b      	bne.n	1ce9c <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   1ce44:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   1ce46:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   1ce48:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   1ce4c:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1ce4e:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1ce50:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1ce52:	1a71      	subs	r1, r6, r1
   1ce54:	42a1      	cmp	r1, r4
   1ce56:	bf28      	it	cs
   1ce58:	f04f 31ff 	movcs.w	r1, #4294967295
   1ce5c:	f7ff fce7 	bl	1c82e <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1ce60:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   1ce64:	f8d6 9020 	ldr.w	r9, [r6, #32]
   1ce68:	4638      	mov	r0, r7
   1ce6a:	f7ff ffde 	bl	1ce2a <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1ce6e:	464b      	mov	r3, r9
   1ce70:	f04f 32ff 	mov.w	r2, #4294967295
   1ce74:	4669      	mov	r1, sp
   1ce76:	4628      	mov	r0, r5
   1ce78:	f7ff ff83 	bl	1cd82 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1ce7c:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1ce7e:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1ce80:	07db      	lsls	r3, r3, #31
   1ce82:	d50f      	bpl.n	1cea4 <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   1ce84:	b110      	cbz	r0, 1ce8c <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1ce86:	f04f 33ff 	mov.w	r3, #4294967295
   1ce8a:	6283      	str	r3, [r0, #40]	; 0x28
   1ce8c:	4638      	mov	r0, r7
   1ce8e:	f7ff ffca 	bl	1ce26 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1ce92:	b11c      	cbz	r4, 1ce9c <rpmsg_virtio_ns_callback+0x66>
   1ce94:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1ce96:	b10b      	cbz	r3, 1ce9c <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   1ce98:	4640      	mov	r0, r8
   1ce9a:	4798      	blx	r3
}
   1ce9c:	2000      	movs	r0, #0
   1ce9e:	b009      	add	sp, #36	; 0x24
   1cea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   1cea4:	b950      	cbnz	r0, 1cebc <rpmsg_virtio_ns_callback+0x86>
   1cea6:	4638      	mov	r0, r7
   1cea8:	f7ff ffbd 	bl	1ce26 <k_sem_give>
			if (rdev->ns_bind_cb)
   1ceac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1ceae:	2b00      	cmp	r3, #0
   1ceb0:	d0f4      	beq.n	1ce9c <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   1ceb2:	464a      	mov	r2, r9
   1ceb4:	4669      	mov	r1, sp
   1ceb6:	4628      	mov	r0, r5
   1ceb8:	4798      	blx	r3
   1ceba:	e7ef      	b.n	1ce9c <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   1cebc:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   1cec0:	4638      	mov	r0, r7
   1cec2:	f7ff ffb0 	bl	1ce26 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1cec6:	e7e9      	b.n	1ce9c <rpmsg_virtio_ns_callback+0x66>

0001cec8 <rpmsg_virtio_get_rx_buffer>:
{
   1cec8:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1ceca:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   1cecc:	4613      	mov	r3, r2
   1cece:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   1ced0:	b925      	cbnz	r5, 1cedc <rpmsg_virtio_get_rx_buffer+0x14>
}
   1ced2:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1ced4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1ced8:	f7ff be07 	b.w	1caea <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1cedc:	2d01      	cmp	r5, #1
   1cede:	d106      	bne.n	1ceee <rpmsg_virtio_get_rx_buffer+0x26>
}
   1cee0:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1cee2:	460a      	mov	r2, r1
   1cee4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1cee8:	4619      	mov	r1, r3
   1ceea:	f7ff be38 	b.w	1cb5e <virtqueue_get_available_buffer>
}
   1ceee:	2000      	movs	r0, #0
   1cef0:	bc30      	pop	{r4, r5}
   1cef2:	4770      	bx	lr

0001cef4 <rpmsg_virtio_rx_callback>:
{
   1cef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1cef8:	6803      	ldr	r3, [r0, #0]
{
   1cefa:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1cefc:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   1cefe:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1cf02:	4638      	mov	r0, r7
   1cf04:	f7ff ff91 	bl	1ce2a <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1cf08:	4630      	mov	r0, r6
   1cf0a:	f10d 020a 	add.w	r2, sp, #10
   1cf0e:	a903      	add	r1, sp, #12
   1cf10:	f7ff ffda 	bl	1cec8 <rpmsg_virtio_get_rx_buffer>
   1cf14:	4604      	mov	r4, r0
   1cf16:	4638      	mov	r0, r7
   1cf18:	f7ff ff85 	bl	1ce26 <k_sem_give>
	while (rp_hdr) {
   1cf1c:	b914      	cbnz	r4, 1cf24 <rpmsg_virtio_rx_callback+0x30>
}
   1cf1e:	b006      	add	sp, #24
   1cf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cf24:	4638      	mov	r0, r7
   1cf26:	f7ff ff80 	bl	1ce2a <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1cf2a:	f04f 33ff 	mov.w	r3, #4294967295
   1cf2e:	2100      	movs	r1, #0
   1cf30:	4630      	mov	r0, r6
   1cf32:	6862      	ldr	r2, [r4, #4]
   1cf34:	f7ff ff25 	bl	1cd82 <rpmsg_get_endpoint>
   1cf38:	4605      	mov	r5, r0
   1cf3a:	4638      	mov	r0, r7
   1cf3c:	f7ff ff73 	bl	1ce26 <k_sem_give>
		if (ept) {
   1cf40:	b185      	cbz	r5, 1cf64 <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1cf42:	6aaa      	ldr	r2, [r5, #40]	; 0x28
				ept->dest_addr = rp_hdr->src;
   1cf44:	6823      	ldr	r3, [r4, #0]
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1cf46:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1cf48:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   1cf4a:	bf08      	it	eq
   1cf4c:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1cf4e:	89a2      	ldrh	r2, [r4, #12]
   1cf50:	9100      	str	r1, [sp, #0]
   1cf52:	4628      	mov	r0, r5
   1cf54:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1cf58:	f104 0110 	add.w	r1, r4, #16
   1cf5c:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   1cf5e:	2800      	cmp	r0, #0
   1cf60:	da00      	bge.n	1cf64 <rpmsg_virtio_rx_callback+0x70>
   1cf62:	e7fe      	b.n	1cf62 <rpmsg_virtio_rx_callback+0x6e>
   1cf64:	4638      	mov	r0, r7
   1cf66:	f7ff ff60 	bl	1ce2a <__metal_mutex_acquire>
   1cf6a:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1cf6c:	9b03      	ldr	r3, [sp, #12]
   1cf6e:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   1cf70:	b9b2      	cbnz	r2, 1cfa0 <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1cf72:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1cf74:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1cf78:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1cf7c:	2301      	movs	r3, #1
   1cf7e:	a904      	add	r1, sp, #16
   1cf80:	f7ff fd53 	bl	1ca2a <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1cf84:	4630      	mov	r0, r6
   1cf86:	f10d 020a 	add.w	r2, sp, #10
   1cf8a:	a903      	add	r1, sp, #12
   1cf8c:	f7ff ff9c 	bl	1cec8 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1cf90:	4604      	mov	r4, r0
   1cf92:	2800      	cmp	r0, #0
   1cf94:	d1bf      	bne.n	1cf16 <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   1cf96:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1cf9a:	f7ff fe5a 	bl	1cc52 <virtqueue_kick>
   1cf9e:	e7ba      	b.n	1cf16 <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   1cfa0:	2a01      	cmp	r2, #1
   1cfa2:	d1ef      	bne.n	1cf84 <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1cfa4:	461a      	mov	r2, r3
   1cfa6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1cfaa:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1cfae:	f7f9 fab7 	bl	16520 <virtqueue_add_consumed_buffer>
   1cfb2:	e7e7      	b.n	1cf84 <rpmsg_virtio_rx_callback+0x90>

0001cfb4 <_rpmsg_virtio_get_buffer_size>:
{
   1cfb4:	b508      	push	{r3, lr}
   1cfb6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1cfb8:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1cfba:	b14b      	cbz	r3, 1cfd0 <_rpmsg_virtio_get_buffer_size+0x1c>
	if (role == RPMSG_REMOTE) {
   1cfbc:	2b01      	cmp	r3, #1
   1cfbe:	d10a      	bne.n	1cfd6 <_rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1cfc0:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   1cfc4:	f7ff fe7b 	bl	1ccbe <virtqueue_get_desc_size>
   1cfc8:	3810      	subs	r0, #16
   1cfca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1cfce:	bd08      	pop	{r3, pc}
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
   1cfd0:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
   1cfd4:	e7fb      	b.n	1cfce <_rpmsg_virtio_get_buffer_size+0x1a>
	int length = 0;
   1cfd6:	2000      	movs	r0, #0
	return length;
   1cfd8:	e7f9      	b.n	1cfce <_rpmsg_virtio_get_buffer_size+0x1a>

0001cfda <rpmsg_virtio_shm_pool_get_buffer>:
{
   1cfda:	4603      	mov	r3, r0
	if (shpool->avail < size)
   1cfdc:	6842      	ldr	r2, [r0, #4]
{
   1cfde:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   1cfe0:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1cfe2:	bf29      	itett	cs
   1cfe4:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   1cfe6:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1cfe8:	1a84      	subcs	r4, r0, r2
   1cfea:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   1cfec:	bf22      	ittt	cs
   1cfee:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1cff0:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   1cff2:	605a      	strcs	r2, [r3, #4]
}
   1cff4:	bd10      	pop	{r4, pc}

0001cff6 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   1cff6:	b110      	cbz	r0, 1cffe <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   1cff8:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1cffc:	6001      	str	r1, [r0, #0]
}
   1cffe:	4770      	bx	lr

0001d000 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   1d000:	f7fd b866 	b.w	1a0d0 <z_clock_idle_exit>

0001d004 <k_heap_init>:
{
   1d004:	b410      	push	{r4}
   1d006:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1d00a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1d00e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1d010:	f7ed ba9c 	b.w	a54c <sys_heap_init>

0001d014 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1d014:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d018:	428b      	cmp	r3, r1
   1d01a:	d001      	beq.n	1d020 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1d01c:	f7fb b89e 	b.w	1815c <z_set_prio>
}
   1d020:	2000      	movs	r0, #0
   1d022:	4770      	bx	lr

0001d024 <z_impl_k_mutex_init>:
{
   1d024:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1d026:	2000      	movs	r0, #0
   1d028:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1d02c:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1d030:	4770      	bx	lr

0001d032 <z_queue_node_peek>:
{
   1d032:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1d034:	4604      	mov	r4, r0
   1d036:	b130      	cbz	r0, 1d046 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d038:	6802      	ldr	r2, [r0, #0]
   1d03a:	0793      	lsls	r3, r2, #30
   1d03c:	d003      	beq.n	1d046 <z_queue_node_peek+0x14>
		ret = anode->data;
   1d03e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1d040:	b109      	cbz	r1, 1d046 <z_queue_node_peek+0x14>
			k_free(anode);
   1d042:	f000 f982 	bl	1d34a <k_free>
}
   1d046:	4620      	mov	r0, r4
   1d048:	bd10      	pop	{r4, pc}

0001d04a <z_impl_k_queue_init>:
	list->head = NULL;
   1d04a:	2300      	movs	r3, #0
	list->tail = NULL;
   1d04c:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1d050:	6083      	str	r3, [r0, #8]
   1d052:	f100 030c 	add.w	r3, r0, #12
   1d056:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1d05a:	f100 0314 	add.w	r3, r0, #20
   1d05e:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   1d062:	4770      	bx	lr

0001d064 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1d064:	2301      	movs	r3, #1
{
   1d066:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1d068:	9300      	str	r3, [sp, #0]
   1d06a:	2300      	movs	r3, #0
{
   1d06c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1d06e:	4619      	mov	r1, r3
   1d070:	f7fa f95c 	bl	1732c <queue_insert>
}
   1d074:	b003      	add	sp, #12
   1d076:	f85d fb04 	ldr.w	pc, [sp], #4

0001d07a <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1d07a:	2300      	movs	r3, #0
{
   1d07c:	b507      	push	{r0, r1, r2, lr}
   1d07e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1d080:	9300      	str	r3, [sp, #0]
   1d082:	4619      	mov	r1, r3
   1d084:	f7fa f952 	bl	1732c <queue_insert>
}
   1d088:	b003      	add	sp, #12
   1d08a:	f85d fb04 	ldr.w	pc, [sp], #4

0001d08e <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1d08e:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1d092:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1d096:	4298      	cmp	r0, r3
   1d098:	bfac      	ite	ge
   1d09a:	2000      	movge	r0, #0
   1d09c:	2001      	movlt	r0, #1
   1d09e:	4770      	bx	lr

0001d0a0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d0a0:	4603      	mov	r3, r0
   1d0a2:	b920      	cbnz	r0, 1d0ae <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d0a4:	f3ef 8205 	mrs	r2, IPSR
   1d0a8:	b90a      	cbnz	r2, 1d0ae <z_reschedule_irqlock+0xe>
   1d0aa:	f7ef bdcf 	b.w	cc4c <arch_swap>
   1d0ae:	f383 8811 	msr	BASEPRI, r3
   1d0b2:	f3bf 8f6f 	isb	sy
}
   1d0b6:	4770      	bx	lr

0001d0b8 <z_reschedule_unlocked>:
	__asm__ volatile(
   1d0b8:	f04f 0320 	mov.w	r3, #32
   1d0bc:	f3ef 8011 	mrs	r0, BASEPRI
   1d0c0:	f383 8811 	msr	BASEPRI, r3
   1d0c4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1d0c8:	f7ff bfea 	b.w	1d0a0 <z_reschedule_irqlock>

0001d0cc <unpend_thread_no_timeout>:
{
   1d0cc:	b510      	push	{r4, lr}
   1d0ce:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1d0d0:	f7fa fa66 	bl	175a0 <pended_on>
   1d0d4:	4621      	mov	r1, r4
   1d0d6:	f7fa fb6b 	bl	177b0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d0da:	7b63      	ldrb	r3, [r4, #13]
   1d0dc:	f023 0302 	bic.w	r3, r3, #2
   1d0e0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1d0e2:	2300      	movs	r3, #0
   1d0e4:	60a3      	str	r3, [r4, #8]
}
   1d0e6:	bd10      	pop	{r4, pc}

0001d0e8 <z_priq_dumb_best>:
{
   1d0e8:	4603      	mov	r3, r0
	return list->head == list;
   1d0ea:	6800      	ldr	r0, [r0, #0]
}
   1d0ec:	4283      	cmp	r3, r0
   1d0ee:	bf08      	it	eq
   1d0f0:	2000      	moveq	r0, #0
   1d0f2:	4770      	bx	lr

0001d0f4 <z_unpend_all>:
{
   1d0f4:	b538      	push	{r3, r4, r5, lr}
   1d0f6:	4605      	mov	r5, r0
	int need_sched = 0;
   1d0f8:	2000      	movs	r0, #0
   1d0fa:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d0fc:	42a5      	cmp	r5, r4
   1d0fe:	d000      	beq.n	1d102 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1d100:	b904      	cbnz	r4, 1d104 <z_unpend_all+0x10>
}
   1d102:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1d104:	4620      	mov	r0, r4
   1d106:	f7fa fb7f 	bl	17808 <z_unpend_thread>
		z_ready_thread(thread);
   1d10a:	4620      	mov	r0, r4
   1d10c:	f7fa fc96 	bl	17a3c <z_ready_thread>
		need_sched = 1;
   1d110:	2001      	movs	r0, #1
   1d112:	e7f2      	b.n	1d0fa <z_unpend_all+0x6>

0001d114 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1d114:	b15a      	cbz	r2, 1d12e <z_impl_k_sem_init+0x1a>
   1d116:	428a      	cmp	r2, r1
   1d118:	d309      	bcc.n	1d12e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1d11a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1d11e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1d122:	e9c0 0000 	strd	r0, r0, [r0]
   1d126:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1d12a:	2000      	movs	r0, #0
   1d12c:	4770      	bx	lr
		return -EINVAL;
   1d12e:	f06f 0015 	mvn.w	r0, #21
}
   1d132:	4770      	bx	lr

0001d134 <k_is_in_isr>:
   1d134:	f3ef 8005 	mrs	r0, IPSR
}
   1d138:	3800      	subs	r0, #0
   1d13a:	bf18      	it	ne
   1d13c:	2001      	movne	r0, #1
   1d13e:	4770      	bx	lr

0001d140 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1d140:	b108      	cbz	r0, 1d146 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1d142:	f7ed be4d 	b.w	ade0 <arch_busy_wait>
}
   1d146:	4770      	bx	lr

0001d148 <z_impl_k_thread_name_set>:
}
   1d148:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1d14c:	4770      	bx	lr

0001d14e <k_thread_name_get>:
}
   1d14e:	2000      	movs	r0, #0
   1d150:	4770      	bx	lr

0001d152 <k_work_submit_to_queue>:
{
   1d152:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d154:	f101 0308 	add.w	r3, r1, #8
   1d158:	e8d3 2fef 	ldaex	r2, [r3]
   1d15c:	f042 0c01 	orr.w	ip, r2, #1
   1d160:	e8c3 cfee 	stlex	lr, ip, [r3]
   1d164:	f1be 0f00 	cmp.w	lr, #0
   1d168:	d1f6      	bne.n	1d158 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1d16a:	07d3      	lsls	r3, r2, #31
   1d16c:	d403      	bmi.n	1d176 <k_work_submit_to_queue+0x24>
}
   1d16e:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1d172:	f7ff bf77 	b.w	1d064 <k_queue_append>
}
   1d176:	f85d fb04 	ldr.w	pc, [sp], #4

0001d17a <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1d17a:	f1a0 0110 	sub.w	r1, r0, #16
   1d17e:	6980      	ldr	r0, [r0, #24]
   1d180:	f7ff bfe7 	b.w	1d152 <k_work_submit_to_queue>

0001d184 <work_cancel>:
{
   1d184:	b570      	push	{r4, r5, r6, lr}
   1d186:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1d188:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d18c:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   1d190:	07db      	lsls	r3, r3, #31
   1d192:	d52f      	bpl.n	1d1f4 <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1d194:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1d196:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   1d198:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1d19a:	b913      	cbnz	r3, 1d1a2 <work_cancel+0x1e>
			return -EINVAL;
   1d19c:	f06f 0015 	mvn.w	r0, #21
}
   1d1a0:	bd70      	pop	{r4, r5, r6, pc}
   1d1a2:	429c      	cmp	r4, r3
   1d1a4:	d121      	bne.n	1d1ea <work_cancel+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d1a6:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1d1a8:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d1aa:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   1d1ae:	b991      	cbnz	r1, 1d1d6 <work_cancel+0x52>
   1d1b0:	42b4      	cmp	r4, r6
	list->head = node;
   1d1b2:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1d1b4:	d100      	bne.n	1d1b8 <work_cancel+0x34>
	list->tail = node;
   1d1b6:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d1b8:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d1ba:	f003 0303 	and.w	r3, r3, #3
   1d1be:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1d1c0:	2000      	movs	r0, #0
   1d1c2:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d1c4:	e8d5 3fef 	ldaex	r3, [r5]
   1d1c8:	f023 0301 	bic.w	r3, r3, #1
   1d1cc:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1d1d0:	2a00      	cmp	r2, #0
   1d1d2:	d0e5      	beq.n	1d1a0 <work_cancel+0x1c>
   1d1d4:	e7f6      	b.n	1d1c4 <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d1d6:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1d1d8:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d1da:	f003 0303 	and.w	r3, r3, #3
   1d1de:	ea43 0300 	orr.w	r3, r3, r0
   1d1e2:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1d1e4:	bf08      	it	eq
   1d1e6:	6051      	streq	r1, [r2, #4]
}
   1d1e8:	e7e6      	b.n	1d1b8 <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d1ea:	6818      	ldr	r0, [r3, #0]
   1d1ec:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1d1ee:	f020 0303 	bic.w	r3, r0, #3
   1d1f2:	e7d2      	b.n	1d19a <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   1d1f4:	3010      	adds	r0, #16
   1d1f6:	f7fb fe13 	bl	18e20 <z_abort_timeout>
		if (err) {
   1d1fa:	2800      	cmp	r0, #0
   1d1fc:	d0e0      	beq.n	1d1c0 <work_cancel+0x3c>
			return -EALREADY;
   1d1fe:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1d202:	e7cd      	b.n	1d1a0 <work_cancel+0x1c>

0001d204 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1d204:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1d206:	f7fb ff59 	bl	190bc <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1d20a:	bd08      	pop	{r3, pc}

0001d20c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1d20c:	f7fb bf56 	b.w	190bc <z_tick_get>

0001d210 <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d210:	f1b1 3fff 	cmp.w	r1, #4294967295
   1d214:	bf08      	it	eq
   1d216:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1d21a:	b538      	push	{r3, r4, r5, lr}
   1d21c:	4605      	mov	r5, r0
   1d21e:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d220:	d01d      	beq.n	1d25e <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d222:	ea51 0300 	orrs.w	r3, r1, r0
   1d226:	d103      	bne.n	1d230 <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   1d228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1d22c:	f7fb bf46 	b.w	190bc <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1d230:	f06f 0301 	mvn.w	r3, #1
   1d234:	1a18      	subs	r0, r3, r0
   1d236:	f04f 33ff 	mov.w	r3, #4294967295
   1d23a:	eb63 0101 	sbc.w	r1, r3, r1
   1d23e:	2900      	cmp	r1, #0
   1d240:	da0c      	bge.n	1d25c <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   1d242:	f7fb ff3b 	bl	190bc <z_tick_get>
   1d246:	2d01      	cmp	r5, #1
   1d248:	4622      	mov	r2, r4
   1d24a:	f174 0400 	sbcs.w	r4, r4, #0
   1d24e:	462b      	mov	r3, r5
   1d250:	bfbc      	itt	lt
   1d252:	2301      	movlt	r3, #1
   1d254:	2200      	movlt	r2, #0
   1d256:	1818      	adds	r0, r3, r0
   1d258:	eb41 0102 	adc.w	r1, r1, r2
}
   1d25c:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1d25e:	f04f 30ff 	mov.w	r0, #4294967295
   1d262:	4601      	mov	r1, r0
   1d264:	e7fa      	b.n	1d25c <z_timeout_end_calc+0x4c>

0001d266 <k_work_submit_to_queue>:
{
   1d266:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d268:	f101 0308 	add.w	r3, r1, #8
   1d26c:	e8d3 2fef 	ldaex	r2, [r3]
   1d270:	f042 0c01 	orr.w	ip, r2, #1
   1d274:	e8c3 cfee 	stlex	lr, ip, [r3]
   1d278:	f1be 0f00 	cmp.w	lr, #0
   1d27c:	d1f6      	bne.n	1d26c <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1d27e:	07d3      	lsls	r3, r2, #31
   1d280:	d403      	bmi.n	1d28a <k_work_submit_to_queue+0x24>
}
   1d282:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1d286:	f7ff beed 	b.w	1d064 <k_queue_append>
}
   1d28a:	f85d fb04 	ldr.w	pc, [sp], #4

0001d28e <add_event>:
{
   1d28e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d290:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1d292:	e9d0 2300 	ldrd	r2, r3, [r0]
   1d296:	4290      	cmp	r0, r2
   1d298:	4604      	mov	r4, r0
   1d29a:	460d      	mov	r5, r1
   1d29c:	d106      	bne.n	1d2ac <add_event+0x1e>
	node->prev = list->tail;
   1d29e:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1d2a0:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1d2a2:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1d2a4:	6863      	ldr	r3, [r4, #4]
   1d2a6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1d2a8:	6065      	str	r5, [r4, #4]
}
   1d2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1d2ac:	2b00      	cmp	r3, #0
   1d2ae:	d0f6      	beq.n	1d29e <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1d2b0:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d2b2:	b100      	cbz	r0, 1d2b6 <add_event+0x28>
   1d2b4:	386c      	subs	r0, #108	; 0x6c
   1d2b6:	b107      	cbz	r7, 1d2ba <add_event+0x2c>
   1d2b8:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1d2ba:	4639      	mov	r1, r7
   1d2bc:	f7ff fee7 	bl	1d08e <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1d2c0:	2800      	cmp	r0, #0
   1d2c2:	d1ec      	bne.n	1d29e <add_event+0x10>
	return list->head == list;
   1d2c4:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d2c6:	42b4      	cmp	r4, r6
   1d2c8:	d0e9      	beq.n	1d29e <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1d2ca:	2e00      	cmp	r6, #0
   1d2cc:	d0e7      	beq.n	1d29e <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1d2ce:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d2d0:	b101      	cbz	r1, 1d2d4 <add_event+0x46>
   1d2d2:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1d2d4:	4638      	mov	r0, r7
   1d2d6:	f7ff feda 	bl	1d08e <z_is_t1_higher_prio_than_t2>
   1d2da:	b128      	cbz	r0, 1d2e8 <add_event+0x5a>
	node->prev = successor->prev;
   1d2dc:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1d2de:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1d2e2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1d2e4:	6075      	str	r5, [r6, #4]
			return;
   1d2e6:	e7e0      	b.n	1d2aa <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1d2e8:	6863      	ldr	r3, [r4, #4]
   1d2ea:	429e      	cmp	r6, r3
   1d2ec:	d0d7      	beq.n	1d29e <add_event+0x10>
   1d2ee:	6836      	ldr	r6, [r6, #0]
   1d2f0:	e7eb      	b.n	1d2ca <add_event+0x3c>

0001d2f2 <z_handle_obj_poll_events>:
{
   1d2f2:	4603      	mov	r3, r0
	return list->head == list;
   1d2f4:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1d2f6:	4283      	cmp	r3, r0
   1d2f8:	d008      	beq.n	1d30c <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1d2fa:	e9d0 3200 	ldrd	r3, r2, [r0]
   1d2fe:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1d300:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d302:	2300      	movs	r3, #0
	node->prev = NULL;
   1d304:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1d308:	f7fb bf16 	b.w	19138 <signal_poll_event>
}
   1d30c:	4770      	bx	lr

0001d30e <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1d30e:	2904      	cmp	r1, #4
{
   1d310:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1d314:	460d      	mov	r5, r1
   1d316:	bf38      	it	cc
   1d318:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1d31a:	1952      	adds	r2, r2, r5
{
   1d31c:	4606      	mov	r6, r0
   1d31e:	d209      	bcs.n	1d334 <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   1d320:	f04f 0800 	mov.w	r8, #0
   1d324:	f04f 0900 	mov.w	r9, #0
   1d328:	e9cd 8900 	strd	r8, r9, [sp]
   1d32c:	f7f9 fcf0 	bl	16d10 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1d330:	4604      	mov	r4, r0
   1d332:	b918      	cbnz	r0, 1d33c <z_heap_aligned_alloc+0x2e>
		return NULL;
   1d334:	2000      	movs	r0, #0
}
   1d336:	b002      	add	sp, #8
   1d338:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   1d33c:	462a      	mov	r2, r5
   1d33e:	21ff      	movs	r1, #255	; 0xff
   1d340:	f7fd fd7e 	bl	1ae40 <memset>
	*heap_ref = heap;
   1d344:	6026      	str	r6, [r4, #0]
	return mem + excess;
   1d346:	1960      	adds	r0, r4, r5
   1d348:	e7f5      	b.n	1d336 <z_heap_aligned_alloc+0x28>

0001d34a <k_free>:
	if (ptr != NULL) {
   1d34a:	b138      	cbz	r0, 1d35c <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1d34c:	1f03      	subs	r3, r0, #4
   1d34e:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   1d350:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1d354:	1c42      	adds	r2, r0, #1
   1d356:	d0fa      	beq.n	1d34e <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   1d358:	f7f9 bd62 	b.w	16e20 <k_heap_free>
}
   1d35c:	4770      	bx	lr

0001d35e <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1d35e:	4770      	bx	lr
