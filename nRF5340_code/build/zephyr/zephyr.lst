
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	10 3b 01 20 31 de 00 00 81 bd 01 00 61 de 00 00     .;. 1.......a...
    8010:	61 de 00 00 61 de 00 00 61 de 00 00 61 de 00 00     a...a...a...a...
	...
    802c:	f9 db 00 00 61 de 00 00 00 00 00 00 9d db 00 00     ....a...........
    803c:	dd c4 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    8050:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    8060:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    8070:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    8080:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    8090:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    80a0:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    80b0:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    80c0:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    80d0:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    80e0:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    80f0:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    8100:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    8110:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    8120:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    8130:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    8140:	f1 dd 00 00 f1 dd 00 00 f1 dd 00 00 f1 dd 00 00     ................
    8150:	f1 dd 00 00                                         ....

00008154 <_vector_end>:
	...

00008200 <m_firmware_info>:
    8200:	de e6 1e 28 4c bb ce 8f 02 35 00 00 3c 00 00 00     ...(L....5..<...
    8210:	dc b7 01 00 01 00 00 00 00 80 00 00 00 80 00 00     ................
    8220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00008240 <__aeabi_drsub>:
    8240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    8244:	e002      	b.n	824c <__adddf3>
    8246:	bf00      	nop

00008248 <__aeabi_dsub>:
    8248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000824c <__adddf3>:
    824c:	b530      	push	{r4, r5, lr}
    824e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    8252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    8256:	ea94 0f05 	teq	r4, r5
    825a:	bf08      	it	eq
    825c:	ea90 0f02 	teqeq	r0, r2
    8260:	bf1f      	itttt	ne
    8262:	ea54 0c00 	orrsne.w	ip, r4, r0
    8266:	ea55 0c02 	orrsne.w	ip, r5, r2
    826a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    826e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8272:	f000 80e2 	beq.w	843a <__adddf3+0x1ee>
    8276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    827a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    827e:	bfb8      	it	lt
    8280:	426d      	neglt	r5, r5
    8282:	dd0c      	ble.n	829e <__adddf3+0x52>
    8284:	442c      	add	r4, r5
    8286:	ea80 0202 	eor.w	r2, r0, r2
    828a:	ea81 0303 	eor.w	r3, r1, r3
    828e:	ea82 0000 	eor.w	r0, r2, r0
    8292:	ea83 0101 	eor.w	r1, r3, r1
    8296:	ea80 0202 	eor.w	r2, r0, r2
    829a:	ea81 0303 	eor.w	r3, r1, r3
    829e:	2d36      	cmp	r5, #54	; 0x36
    82a0:	bf88      	it	hi
    82a2:	bd30      	pophi	{r4, r5, pc}
    82a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    82a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    82ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    82b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    82b4:	d002      	beq.n	82bc <__adddf3+0x70>
    82b6:	4240      	negs	r0, r0
    82b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    82bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    82c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    82c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    82c8:	d002      	beq.n	82d0 <__adddf3+0x84>
    82ca:	4252      	negs	r2, r2
    82cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    82d0:	ea94 0f05 	teq	r4, r5
    82d4:	f000 80a7 	beq.w	8426 <__adddf3+0x1da>
    82d8:	f1a4 0401 	sub.w	r4, r4, #1
    82dc:	f1d5 0e20 	rsbs	lr, r5, #32
    82e0:	db0d      	blt.n	82fe <__adddf3+0xb2>
    82e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    82e6:	fa22 f205 	lsr.w	r2, r2, r5
    82ea:	1880      	adds	r0, r0, r2
    82ec:	f141 0100 	adc.w	r1, r1, #0
    82f0:	fa03 f20e 	lsl.w	r2, r3, lr
    82f4:	1880      	adds	r0, r0, r2
    82f6:	fa43 f305 	asr.w	r3, r3, r5
    82fa:	4159      	adcs	r1, r3
    82fc:	e00e      	b.n	831c <__adddf3+0xd0>
    82fe:	f1a5 0520 	sub.w	r5, r5, #32
    8302:	f10e 0e20 	add.w	lr, lr, #32
    8306:	2a01      	cmp	r2, #1
    8308:	fa03 fc0e 	lsl.w	ip, r3, lr
    830c:	bf28      	it	cs
    830e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8312:	fa43 f305 	asr.w	r3, r3, r5
    8316:	18c0      	adds	r0, r0, r3
    8318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    831c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8320:	d507      	bpl.n	8332 <__adddf3+0xe6>
    8322:	f04f 0e00 	mov.w	lr, #0
    8326:	f1dc 0c00 	rsbs	ip, ip, #0
    832a:	eb7e 0000 	sbcs.w	r0, lr, r0
    832e:	eb6e 0101 	sbc.w	r1, lr, r1
    8332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    8336:	d31b      	bcc.n	8370 <__adddf3+0x124>
    8338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    833c:	d30c      	bcc.n	8358 <__adddf3+0x10c>
    833e:	0849      	lsrs	r1, r1, #1
    8340:	ea5f 0030 	movs.w	r0, r0, rrx
    8344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8348:	f104 0401 	add.w	r4, r4, #1
    834c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    8354:	f080 809a 	bcs.w	848c <__adddf3+0x240>
    8358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    835c:	bf08      	it	eq
    835e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8362:	f150 0000 	adcs.w	r0, r0, #0
    8366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    836a:	ea41 0105 	orr.w	r1, r1, r5
    836e:	bd30      	pop	{r4, r5, pc}
    8370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    8374:	4140      	adcs	r0, r0
    8376:	eb41 0101 	adc.w	r1, r1, r1
    837a:	3c01      	subs	r4, #1
    837c:	bf28      	it	cs
    837e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    8382:	d2e9      	bcs.n	8358 <__adddf3+0x10c>
    8384:	f091 0f00 	teq	r1, #0
    8388:	bf04      	itt	eq
    838a:	4601      	moveq	r1, r0
    838c:	2000      	moveq	r0, #0
    838e:	fab1 f381 	clz	r3, r1
    8392:	bf08      	it	eq
    8394:	3320      	addeq	r3, #32
    8396:	f1a3 030b 	sub.w	r3, r3, #11
    839a:	f1b3 0220 	subs.w	r2, r3, #32
    839e:	da0c      	bge.n	83ba <__adddf3+0x16e>
    83a0:	320c      	adds	r2, #12
    83a2:	dd08      	ble.n	83b6 <__adddf3+0x16a>
    83a4:	f102 0c14 	add.w	ip, r2, #20
    83a8:	f1c2 020c 	rsb	r2, r2, #12
    83ac:	fa01 f00c 	lsl.w	r0, r1, ip
    83b0:	fa21 f102 	lsr.w	r1, r1, r2
    83b4:	e00c      	b.n	83d0 <__adddf3+0x184>
    83b6:	f102 0214 	add.w	r2, r2, #20
    83ba:	bfd8      	it	le
    83bc:	f1c2 0c20 	rsble	ip, r2, #32
    83c0:	fa01 f102 	lsl.w	r1, r1, r2
    83c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    83c8:	bfdc      	itt	le
    83ca:	ea41 010c 	orrle.w	r1, r1, ip
    83ce:	4090      	lslle	r0, r2
    83d0:	1ae4      	subs	r4, r4, r3
    83d2:	bfa2      	ittt	ge
    83d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    83d8:	4329      	orrge	r1, r5
    83da:	bd30      	popge	{r4, r5, pc}
    83dc:	ea6f 0404 	mvn.w	r4, r4
    83e0:	3c1f      	subs	r4, #31
    83e2:	da1c      	bge.n	841e <__adddf3+0x1d2>
    83e4:	340c      	adds	r4, #12
    83e6:	dc0e      	bgt.n	8406 <__adddf3+0x1ba>
    83e8:	f104 0414 	add.w	r4, r4, #20
    83ec:	f1c4 0220 	rsb	r2, r4, #32
    83f0:	fa20 f004 	lsr.w	r0, r0, r4
    83f4:	fa01 f302 	lsl.w	r3, r1, r2
    83f8:	ea40 0003 	orr.w	r0, r0, r3
    83fc:	fa21 f304 	lsr.w	r3, r1, r4
    8400:	ea45 0103 	orr.w	r1, r5, r3
    8404:	bd30      	pop	{r4, r5, pc}
    8406:	f1c4 040c 	rsb	r4, r4, #12
    840a:	f1c4 0220 	rsb	r2, r4, #32
    840e:	fa20 f002 	lsr.w	r0, r0, r2
    8412:	fa01 f304 	lsl.w	r3, r1, r4
    8416:	ea40 0003 	orr.w	r0, r0, r3
    841a:	4629      	mov	r1, r5
    841c:	bd30      	pop	{r4, r5, pc}
    841e:	fa21 f004 	lsr.w	r0, r1, r4
    8422:	4629      	mov	r1, r5
    8424:	bd30      	pop	{r4, r5, pc}
    8426:	f094 0f00 	teq	r4, #0
    842a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    842e:	bf06      	itte	eq
    8430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    8434:	3401      	addeq	r4, #1
    8436:	3d01      	subne	r5, #1
    8438:	e74e      	b.n	82d8 <__adddf3+0x8c>
    843a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    843e:	bf18      	it	ne
    8440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8444:	d029      	beq.n	849a <__adddf3+0x24e>
    8446:	ea94 0f05 	teq	r4, r5
    844a:	bf08      	it	eq
    844c:	ea90 0f02 	teqeq	r0, r2
    8450:	d005      	beq.n	845e <__adddf3+0x212>
    8452:	ea54 0c00 	orrs.w	ip, r4, r0
    8456:	bf04      	itt	eq
    8458:	4619      	moveq	r1, r3
    845a:	4610      	moveq	r0, r2
    845c:	bd30      	pop	{r4, r5, pc}
    845e:	ea91 0f03 	teq	r1, r3
    8462:	bf1e      	ittt	ne
    8464:	2100      	movne	r1, #0
    8466:	2000      	movne	r0, #0
    8468:	bd30      	popne	{r4, r5, pc}
    846a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    846e:	d105      	bne.n	847c <__adddf3+0x230>
    8470:	0040      	lsls	r0, r0, #1
    8472:	4149      	adcs	r1, r1
    8474:	bf28      	it	cs
    8476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    847a:	bd30      	pop	{r4, r5, pc}
    847c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8480:	bf3c      	itt	cc
    8482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    8486:	bd30      	popcc	{r4, r5, pc}
    8488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    848c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8494:	f04f 0000 	mov.w	r0, #0
    8498:	bd30      	pop	{r4, r5, pc}
    849a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    849e:	bf1a      	itte	ne
    84a0:	4619      	movne	r1, r3
    84a2:	4610      	movne	r0, r2
    84a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    84a8:	bf1c      	itt	ne
    84aa:	460b      	movne	r3, r1
    84ac:	4602      	movne	r2, r0
    84ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    84b2:	bf06      	itte	eq
    84b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    84b8:	ea91 0f03 	teqeq	r1, r3
    84bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    84c0:	bd30      	pop	{r4, r5, pc}
    84c2:	bf00      	nop

000084c4 <__aeabi_ui2d>:
    84c4:	f090 0f00 	teq	r0, #0
    84c8:	bf04      	itt	eq
    84ca:	2100      	moveq	r1, #0
    84cc:	4770      	bxeq	lr
    84ce:	b530      	push	{r4, r5, lr}
    84d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84d8:	f04f 0500 	mov.w	r5, #0
    84dc:	f04f 0100 	mov.w	r1, #0
    84e0:	e750      	b.n	8384 <__adddf3+0x138>
    84e2:	bf00      	nop

000084e4 <__aeabi_i2d>:
    84e4:	f090 0f00 	teq	r0, #0
    84e8:	bf04      	itt	eq
    84ea:	2100      	moveq	r1, #0
    84ec:	4770      	bxeq	lr
    84ee:	b530      	push	{r4, r5, lr}
    84f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    84fc:	bf48      	it	mi
    84fe:	4240      	negmi	r0, r0
    8500:	f04f 0100 	mov.w	r1, #0
    8504:	e73e      	b.n	8384 <__adddf3+0x138>
    8506:	bf00      	nop

00008508 <__aeabi_f2d>:
    8508:	0042      	lsls	r2, r0, #1
    850a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    850e:	ea4f 0131 	mov.w	r1, r1, rrx
    8512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8516:	bf1f      	itttt	ne
    8518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    851c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8524:	4770      	bxne	lr
    8526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    852a:	bf08      	it	eq
    852c:	4770      	bxeq	lr
    852e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    8532:	bf04      	itt	eq
    8534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8538:	4770      	bxeq	lr
    853a:	b530      	push	{r4, r5, lr}
    853c:	f44f 7460 	mov.w	r4, #896	; 0x380
    8540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8548:	e71c      	b.n	8384 <__adddf3+0x138>
    854a:	bf00      	nop

0000854c <__aeabi_ul2d>:
    854c:	ea50 0201 	orrs.w	r2, r0, r1
    8550:	bf08      	it	eq
    8552:	4770      	bxeq	lr
    8554:	b530      	push	{r4, r5, lr}
    8556:	f04f 0500 	mov.w	r5, #0
    855a:	e00a      	b.n	8572 <__aeabi_l2d+0x16>

0000855c <__aeabi_l2d>:
    855c:	ea50 0201 	orrs.w	r2, r0, r1
    8560:	bf08      	it	eq
    8562:	4770      	bxeq	lr
    8564:	b530      	push	{r4, r5, lr}
    8566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    856a:	d502      	bpl.n	8572 <__aeabi_l2d+0x16>
    856c:	4240      	negs	r0, r0
    856e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    857a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    857e:	f43f aed8 	beq.w	8332 <__adddf3+0xe6>
    8582:	f04f 0203 	mov.w	r2, #3
    8586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    858a:	bf18      	it	ne
    858c:	3203      	addne	r2, #3
    858e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8592:	bf18      	it	ne
    8594:	3203      	addne	r2, #3
    8596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    859a:	f1c2 0320 	rsb	r3, r2, #32
    859e:	fa00 fc03 	lsl.w	ip, r0, r3
    85a2:	fa20 f002 	lsr.w	r0, r0, r2
    85a6:	fa01 fe03 	lsl.w	lr, r1, r3
    85aa:	ea40 000e 	orr.w	r0, r0, lr
    85ae:	fa21 f102 	lsr.w	r1, r1, r2
    85b2:	4414      	add	r4, r2
    85b4:	e6bd      	b.n	8332 <__adddf3+0xe6>
    85b6:	bf00      	nop

000085b8 <__aeabi_dmul>:
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    85be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    85c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    85c6:	bf1d      	ittte	ne
    85c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    85cc:	ea94 0f0c 	teqne	r4, ip
    85d0:	ea95 0f0c 	teqne	r5, ip
    85d4:	f000 f8de 	bleq	8794 <__aeabi_dmul+0x1dc>
    85d8:	442c      	add	r4, r5
    85da:	ea81 0603 	eor.w	r6, r1, r3
    85de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    85e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    85e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    85ea:	bf18      	it	ne
    85ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    85f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    85f8:	d038      	beq.n	866c <__aeabi_dmul+0xb4>
    85fa:	fba0 ce02 	umull	ip, lr, r0, r2
    85fe:	f04f 0500 	mov.w	r5, #0
    8602:	fbe1 e502 	umlal	lr, r5, r1, r2
    8606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    860a:	fbe0 e503 	umlal	lr, r5, r0, r3
    860e:	f04f 0600 	mov.w	r6, #0
    8612:	fbe1 5603 	umlal	r5, r6, r1, r3
    8616:	f09c 0f00 	teq	ip, #0
    861a:	bf18      	it	ne
    861c:	f04e 0e01 	orrne.w	lr, lr, #1
    8620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    862c:	d204      	bcs.n	8638 <__aeabi_dmul+0x80>
    862e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    8632:	416d      	adcs	r5, r5
    8634:	eb46 0606 	adc.w	r6, r6, r6
    8638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    863c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    8644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    864c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8650:	bf88      	it	hi
    8652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8656:	d81e      	bhi.n	8696 <__aeabi_dmul+0xde>
    8658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    865c:	bf08      	it	eq
    865e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    8662:	f150 0000 	adcs.w	r0, r0, #0
    8666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8670:	ea46 0101 	orr.w	r1, r6, r1
    8674:	ea40 0002 	orr.w	r0, r0, r2
    8678:	ea81 0103 	eor.w	r1, r1, r3
    867c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8680:	bfc2      	ittt	gt
    8682:	ebd4 050c 	rsbsgt	r5, r4, ip
    8686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    868a:	bd70      	popgt	{r4, r5, r6, pc}
    868c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8690:	f04f 0e00 	mov.w	lr, #0
    8694:	3c01      	subs	r4, #1
    8696:	f300 80ab 	bgt.w	87f0 <__aeabi_dmul+0x238>
    869a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    869e:	bfde      	ittt	le
    86a0:	2000      	movle	r0, #0
    86a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    86a6:	bd70      	pople	{r4, r5, r6, pc}
    86a8:	f1c4 0400 	rsb	r4, r4, #0
    86ac:	3c20      	subs	r4, #32
    86ae:	da35      	bge.n	871c <__aeabi_dmul+0x164>
    86b0:	340c      	adds	r4, #12
    86b2:	dc1b      	bgt.n	86ec <__aeabi_dmul+0x134>
    86b4:	f104 0414 	add.w	r4, r4, #20
    86b8:	f1c4 0520 	rsb	r5, r4, #32
    86bc:	fa00 f305 	lsl.w	r3, r0, r5
    86c0:	fa20 f004 	lsr.w	r0, r0, r4
    86c4:	fa01 f205 	lsl.w	r2, r1, r5
    86c8:	ea40 0002 	orr.w	r0, r0, r2
    86cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    86d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    86d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    86d8:	fa21 f604 	lsr.w	r6, r1, r4
    86dc:	eb42 0106 	adc.w	r1, r2, r6
    86e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    86e4:	bf08      	it	eq
    86e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    86ea:	bd70      	pop	{r4, r5, r6, pc}
    86ec:	f1c4 040c 	rsb	r4, r4, #12
    86f0:	f1c4 0520 	rsb	r5, r4, #32
    86f4:	fa00 f304 	lsl.w	r3, r0, r4
    86f8:	fa20 f005 	lsr.w	r0, r0, r5
    86fc:	fa01 f204 	lsl.w	r2, r1, r4
    8700:	ea40 0002 	orr.w	r0, r0, r2
    8704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    870c:	f141 0100 	adc.w	r1, r1, #0
    8710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8714:	bf08      	it	eq
    8716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    871a:	bd70      	pop	{r4, r5, r6, pc}
    871c:	f1c4 0520 	rsb	r5, r4, #32
    8720:	fa00 f205 	lsl.w	r2, r0, r5
    8724:	ea4e 0e02 	orr.w	lr, lr, r2
    8728:	fa20 f304 	lsr.w	r3, r0, r4
    872c:	fa01 f205 	lsl.w	r2, r1, r5
    8730:	ea43 0302 	orr.w	r3, r3, r2
    8734:	fa21 f004 	lsr.w	r0, r1, r4
    8738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    873c:	fa21 f204 	lsr.w	r2, r1, r4
    8740:	ea20 0002 	bic.w	r0, r0, r2
    8744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    874c:	bf08      	it	eq
    874e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8752:	bd70      	pop	{r4, r5, r6, pc}
    8754:	f094 0f00 	teq	r4, #0
    8758:	d10f      	bne.n	877a <__aeabi_dmul+0x1c2>
    875a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    875e:	0040      	lsls	r0, r0, #1
    8760:	eb41 0101 	adc.w	r1, r1, r1
    8764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8768:	bf08      	it	eq
    876a:	3c01      	subeq	r4, #1
    876c:	d0f7      	beq.n	875e <__aeabi_dmul+0x1a6>
    876e:	ea41 0106 	orr.w	r1, r1, r6
    8772:	f095 0f00 	teq	r5, #0
    8776:	bf18      	it	ne
    8778:	4770      	bxne	lr
    877a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    877e:	0052      	lsls	r2, r2, #1
    8780:	eb43 0303 	adc.w	r3, r3, r3
    8784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8788:	bf08      	it	eq
    878a:	3d01      	subeq	r5, #1
    878c:	d0f7      	beq.n	877e <__aeabi_dmul+0x1c6>
    878e:	ea43 0306 	orr.w	r3, r3, r6
    8792:	4770      	bx	lr
    8794:	ea94 0f0c 	teq	r4, ip
    8798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    879c:	bf18      	it	ne
    879e:	ea95 0f0c 	teqne	r5, ip
    87a2:	d00c      	beq.n	87be <__aeabi_dmul+0x206>
    87a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87a8:	bf18      	it	ne
    87aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87ae:	d1d1      	bne.n	8754 <__aeabi_dmul+0x19c>
    87b0:	ea81 0103 	eor.w	r1, r1, r3
    87b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87b8:	f04f 0000 	mov.w	r0, #0
    87bc:	bd70      	pop	{r4, r5, r6, pc}
    87be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87c2:	bf06      	itte	eq
    87c4:	4610      	moveq	r0, r2
    87c6:	4619      	moveq	r1, r3
    87c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87cc:	d019      	beq.n	8802 <__aeabi_dmul+0x24a>
    87ce:	ea94 0f0c 	teq	r4, ip
    87d2:	d102      	bne.n	87da <__aeabi_dmul+0x222>
    87d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    87d8:	d113      	bne.n	8802 <__aeabi_dmul+0x24a>
    87da:	ea95 0f0c 	teq	r5, ip
    87de:	d105      	bne.n	87ec <__aeabi_dmul+0x234>
    87e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    87e4:	bf1c      	itt	ne
    87e6:	4610      	movne	r0, r2
    87e8:	4619      	movne	r1, r3
    87ea:	d10a      	bne.n	8802 <__aeabi_dmul+0x24a>
    87ec:	ea81 0103 	eor.w	r1, r1, r3
    87f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    87f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    87fc:	f04f 0000 	mov.w	r0, #0
    8800:	bd70      	pop	{r4, r5, r6, pc}
    8802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    880a:	bd70      	pop	{r4, r5, r6, pc}

0000880c <__aeabi_ddiv>:
    880c:	b570      	push	{r4, r5, r6, lr}
    880e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    881a:	bf1d      	ittte	ne
    881c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8820:	ea94 0f0c 	teqne	r4, ip
    8824:	ea95 0f0c 	teqne	r5, ip
    8828:	f000 f8a7 	bleq	897a <__aeabi_ddiv+0x16e>
    882c:	eba4 0405 	sub.w	r4, r4, r5
    8830:	ea81 0e03 	eor.w	lr, r1, r3
    8834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8838:	ea4f 3101 	mov.w	r1, r1, lsl #12
    883c:	f000 8088 	beq.w	8950 <__aeabi_ddiv+0x144>
    8840:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    884c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8850:	ea4f 2202 	mov.w	r2, r2, lsl #8
    8854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    885c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    8864:	429d      	cmp	r5, r3
    8866:	bf08      	it	eq
    8868:	4296      	cmpeq	r6, r2
    886a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    886e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    8872:	d202      	bcs.n	887a <__aeabi_ddiv+0x6e>
    8874:	085b      	lsrs	r3, r3, #1
    8876:	ea4f 0232 	mov.w	r2, r2, rrx
    887a:	1ab6      	subs	r6, r6, r2
    887c:	eb65 0503 	sbc.w	r5, r5, r3
    8880:	085b      	lsrs	r3, r3, #1
    8882:	ea4f 0232 	mov.w	r2, r2, rrx
    8886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    888a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    888e:	ebb6 0e02 	subs.w	lr, r6, r2
    8892:	eb75 0e03 	sbcs.w	lr, r5, r3
    8896:	bf22      	ittt	cs
    8898:	1ab6      	subcs	r6, r6, r2
    889a:	4675      	movcs	r5, lr
    889c:	ea40 000c 	orrcs.w	r0, r0, ip
    88a0:	085b      	lsrs	r3, r3, #1
    88a2:	ea4f 0232 	mov.w	r2, r2, rrx
    88a6:	ebb6 0e02 	subs.w	lr, r6, r2
    88aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    88ae:	bf22      	ittt	cs
    88b0:	1ab6      	subcs	r6, r6, r2
    88b2:	4675      	movcs	r5, lr
    88b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    88b8:	085b      	lsrs	r3, r3, #1
    88ba:	ea4f 0232 	mov.w	r2, r2, rrx
    88be:	ebb6 0e02 	subs.w	lr, r6, r2
    88c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    88c6:	bf22      	ittt	cs
    88c8:	1ab6      	subcs	r6, r6, r2
    88ca:	4675      	movcs	r5, lr
    88cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    88d0:	085b      	lsrs	r3, r3, #1
    88d2:	ea4f 0232 	mov.w	r2, r2, rrx
    88d6:	ebb6 0e02 	subs.w	lr, r6, r2
    88da:	eb75 0e03 	sbcs.w	lr, r5, r3
    88de:	bf22      	ittt	cs
    88e0:	1ab6      	subcs	r6, r6, r2
    88e2:	4675      	movcs	r5, lr
    88e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    88e8:	ea55 0e06 	orrs.w	lr, r5, r6
    88ec:	d018      	beq.n	8920 <__aeabi_ddiv+0x114>
    88ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    88f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    88f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    88fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    88fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    890a:	d1c0      	bne.n	888e <__aeabi_ddiv+0x82>
    890c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8910:	d10b      	bne.n	892a <__aeabi_ddiv+0x11e>
    8912:	ea41 0100 	orr.w	r1, r1, r0
    8916:	f04f 0000 	mov.w	r0, #0
    891a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    891e:	e7b6      	b.n	888e <__aeabi_ddiv+0x82>
    8920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8924:	bf04      	itt	eq
    8926:	4301      	orreq	r1, r0
    8928:	2000      	moveq	r0, #0
    892a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    892e:	bf88      	it	hi
    8930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8934:	f63f aeaf 	bhi.w	8696 <__aeabi_dmul+0xde>
    8938:	ebb5 0c03 	subs.w	ip, r5, r3
    893c:	bf04      	itt	eq
    893e:	ebb6 0c02 	subseq.w	ip, r6, r2
    8942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8946:	f150 0000 	adcs.w	r0, r0, #0
    894a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    894e:	bd70      	pop	{r4, r5, r6, pc}
    8950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    8954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    895c:	bfc2      	ittt	gt
    895e:	ebd4 050c 	rsbsgt	r5, r4, ip
    8962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8966:	bd70      	popgt	{r4, r5, r6, pc}
    8968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    896c:	f04f 0e00 	mov.w	lr, #0
    8970:	3c01      	subs	r4, #1
    8972:	e690      	b.n	8696 <__aeabi_dmul+0xde>
    8974:	ea45 0e06 	orr.w	lr, r5, r6
    8978:	e68d      	b.n	8696 <__aeabi_dmul+0xde>
    897a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    897e:	ea94 0f0c 	teq	r4, ip
    8982:	bf08      	it	eq
    8984:	ea95 0f0c 	teqeq	r5, ip
    8988:	f43f af3b 	beq.w	8802 <__aeabi_dmul+0x24a>
    898c:	ea94 0f0c 	teq	r4, ip
    8990:	d10a      	bne.n	89a8 <__aeabi_ddiv+0x19c>
    8992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8996:	f47f af34 	bne.w	8802 <__aeabi_dmul+0x24a>
    899a:	ea95 0f0c 	teq	r5, ip
    899e:	f47f af25 	bne.w	87ec <__aeabi_dmul+0x234>
    89a2:	4610      	mov	r0, r2
    89a4:	4619      	mov	r1, r3
    89a6:	e72c      	b.n	8802 <__aeabi_dmul+0x24a>
    89a8:	ea95 0f0c 	teq	r5, ip
    89ac:	d106      	bne.n	89bc <__aeabi_ddiv+0x1b0>
    89ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    89b2:	f43f aefd 	beq.w	87b0 <__aeabi_dmul+0x1f8>
    89b6:	4610      	mov	r0, r2
    89b8:	4619      	mov	r1, r3
    89ba:	e722      	b.n	8802 <__aeabi_dmul+0x24a>
    89bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    89c0:	bf18      	it	ne
    89c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    89c6:	f47f aec5 	bne.w	8754 <__aeabi_dmul+0x19c>
    89ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    89ce:	f47f af0d 	bne.w	87ec <__aeabi_dmul+0x234>
    89d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    89d6:	f47f aeeb 	bne.w	87b0 <__aeabi_dmul+0x1f8>
    89da:	e712      	b.n	8802 <__aeabi_dmul+0x24a>

000089dc <__gedf2>:
    89dc:	f04f 3cff 	mov.w	ip, #4294967295
    89e0:	e006      	b.n	89f0 <__cmpdf2+0x4>
    89e2:	bf00      	nop

000089e4 <__ledf2>:
    89e4:	f04f 0c01 	mov.w	ip, #1
    89e8:	e002      	b.n	89f0 <__cmpdf2+0x4>
    89ea:	bf00      	nop

000089ec <__cmpdf2>:
    89ec:	f04f 0c01 	mov.w	ip, #1
    89f0:	f84d cd04 	str.w	ip, [sp, #-4]!
    89f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    89f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    89fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a00:	bf18      	it	ne
    8a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8a06:	d01b      	beq.n	8a40 <__cmpdf2+0x54>
    8a08:	b001      	add	sp, #4
    8a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8a0e:	bf0c      	ite	eq
    8a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8a14:	ea91 0f03 	teqne	r1, r3
    8a18:	bf02      	ittt	eq
    8a1a:	ea90 0f02 	teqeq	r0, r2
    8a1e:	2000      	moveq	r0, #0
    8a20:	4770      	bxeq	lr
    8a22:	f110 0f00 	cmn.w	r0, #0
    8a26:	ea91 0f03 	teq	r1, r3
    8a2a:	bf58      	it	pl
    8a2c:	4299      	cmppl	r1, r3
    8a2e:	bf08      	it	eq
    8a30:	4290      	cmpeq	r0, r2
    8a32:	bf2c      	ite	cs
    8a34:	17d8      	asrcs	r0, r3, #31
    8a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8a3a:	f040 0001 	orr.w	r0, r0, #1
    8a3e:	4770      	bx	lr
    8a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a48:	d102      	bne.n	8a50 <__cmpdf2+0x64>
    8a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8a4e:	d107      	bne.n	8a60 <__cmpdf2+0x74>
    8a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a58:	d1d6      	bne.n	8a08 <__cmpdf2+0x1c>
    8a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8a5e:	d0d3      	beq.n	8a08 <__cmpdf2+0x1c>
    8a60:	f85d 0b04 	ldr.w	r0, [sp], #4
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop

00008a68 <__aeabi_cdrcmple>:
    8a68:	4684      	mov	ip, r0
    8a6a:	4610      	mov	r0, r2
    8a6c:	4662      	mov	r2, ip
    8a6e:	468c      	mov	ip, r1
    8a70:	4619      	mov	r1, r3
    8a72:	4663      	mov	r3, ip
    8a74:	e000      	b.n	8a78 <__aeabi_cdcmpeq>
    8a76:	bf00      	nop

00008a78 <__aeabi_cdcmpeq>:
    8a78:	b501      	push	{r0, lr}
    8a7a:	f7ff ffb7 	bl	89ec <__cmpdf2>
    8a7e:	2800      	cmp	r0, #0
    8a80:	bf48      	it	mi
    8a82:	f110 0f00 	cmnmi.w	r0, #0
    8a86:	bd01      	pop	{r0, pc}

00008a88 <__aeabi_dcmpeq>:
    8a88:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a8c:	f7ff fff4 	bl	8a78 <__aeabi_cdcmpeq>
    8a90:	bf0c      	ite	eq
    8a92:	2001      	moveq	r0, #1
    8a94:	2000      	movne	r0, #0
    8a96:	f85d fb08 	ldr.w	pc, [sp], #8
    8a9a:	bf00      	nop

00008a9c <__aeabi_dcmplt>:
    8a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8aa0:	f7ff ffea 	bl	8a78 <__aeabi_cdcmpeq>
    8aa4:	bf34      	ite	cc
    8aa6:	2001      	movcc	r0, #1
    8aa8:	2000      	movcs	r0, #0
    8aaa:	f85d fb08 	ldr.w	pc, [sp], #8
    8aae:	bf00      	nop

00008ab0 <__aeabi_dcmple>:
    8ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ab4:	f7ff ffe0 	bl	8a78 <__aeabi_cdcmpeq>
    8ab8:	bf94      	ite	ls
    8aba:	2001      	movls	r0, #1
    8abc:	2000      	movhi	r0, #0
    8abe:	f85d fb08 	ldr.w	pc, [sp], #8
    8ac2:	bf00      	nop

00008ac4 <__aeabi_dcmpge>:
    8ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ac8:	f7ff ffce 	bl	8a68 <__aeabi_cdrcmple>
    8acc:	bf94      	ite	ls
    8ace:	2001      	movls	r0, #1
    8ad0:	2000      	movhi	r0, #0
    8ad2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ad6:	bf00      	nop

00008ad8 <__aeabi_dcmpgt>:
    8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8adc:	f7ff ffc4 	bl	8a68 <__aeabi_cdrcmple>
    8ae0:	bf34      	ite	cc
    8ae2:	2001      	movcc	r0, #1
    8ae4:	2000      	movcs	r0, #0
    8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
    8aea:	bf00      	nop

00008aec <__aeabi_d2uiz>:
    8aec:	004a      	lsls	r2, r1, #1
    8aee:	d211      	bcs.n	8b14 <__aeabi_d2uiz+0x28>
    8af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8af4:	d211      	bcs.n	8b1a <__aeabi_d2uiz+0x2e>
    8af6:	d50d      	bpl.n	8b14 <__aeabi_d2uiz+0x28>
    8af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b00:	d40e      	bmi.n	8b20 <__aeabi_d2uiz+0x34>
    8b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8b0e:	fa23 f002 	lsr.w	r0, r3, r2
    8b12:	4770      	bx	lr
    8b14:	f04f 0000 	mov.w	r0, #0
    8b18:	4770      	bx	lr
    8b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8b1e:	d102      	bne.n	8b26 <__aeabi_d2uiz+0x3a>
    8b20:	f04f 30ff 	mov.w	r0, #4294967295
    8b24:	4770      	bx	lr
    8b26:	f04f 0000 	mov.w	r0, #0
    8b2a:	4770      	bx	lr

00008b2c <__aeabi_uldivmod>:
    8b2c:	b953      	cbnz	r3, 8b44 <__aeabi_uldivmod+0x18>
    8b2e:	b94a      	cbnz	r2, 8b44 <__aeabi_uldivmod+0x18>
    8b30:	2900      	cmp	r1, #0
    8b32:	bf08      	it	eq
    8b34:	2800      	cmpeq	r0, #0
    8b36:	bf1c      	itt	ne
    8b38:	f04f 31ff 	movne.w	r1, #4294967295
    8b3c:	f04f 30ff 	movne.w	r0, #4294967295
    8b40:	f000 b980 	b.w	8e44 <__aeabi_idiv0>
    8b44:	f1ad 0c08 	sub.w	ip, sp, #8
    8b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8b4c:	f000 f806 	bl	8b5c <__udivmoddi4>
    8b50:	f8dd e004 	ldr.w	lr, [sp, #4]
    8b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8b58:	b004      	add	sp, #16
    8b5a:	4770      	bx	lr

00008b5c <__udivmoddi4>:
    8b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b60:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8b62:	460d      	mov	r5, r1
    8b64:	4604      	mov	r4, r0
    8b66:	460f      	mov	r7, r1
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d147      	bne.n	8bfc <__udivmoddi4+0xa0>
    8b6c:	428a      	cmp	r2, r1
    8b6e:	4694      	mov	ip, r2
    8b70:	d95f      	bls.n	8c32 <__udivmoddi4+0xd6>
    8b72:	fab2 f382 	clz	r3, r2
    8b76:	b143      	cbz	r3, 8b8a <__udivmoddi4+0x2e>
    8b78:	f1c3 0120 	rsb	r1, r3, #32
    8b7c:	409f      	lsls	r7, r3
    8b7e:	fa02 fc03 	lsl.w	ip, r2, r3
    8b82:	409c      	lsls	r4, r3
    8b84:	fa20 f101 	lsr.w	r1, r0, r1
    8b88:	430f      	orrs	r7, r1
    8b8a:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8b8e:	fa1f fe8c 	uxth.w	lr, ip
    8b92:	0c22      	lsrs	r2, r4, #16
    8b94:	fbb7 f1f5 	udiv	r1, r7, r5
    8b98:	fb05 7711 	mls	r7, r5, r1, r7
    8b9c:	fb01 f00e 	mul.w	r0, r1, lr
    8ba0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    8ba4:	4290      	cmp	r0, r2
    8ba6:	d908      	bls.n	8bba <__udivmoddi4+0x5e>
    8ba8:	eb1c 0202 	adds.w	r2, ip, r2
    8bac:	f101 37ff 	add.w	r7, r1, #4294967295
    8bb0:	d202      	bcs.n	8bb8 <__udivmoddi4+0x5c>
    8bb2:	4290      	cmp	r0, r2
    8bb4:	f200 8134 	bhi.w	8e20 <__udivmoddi4+0x2c4>
    8bb8:	4639      	mov	r1, r7
    8bba:	1a12      	subs	r2, r2, r0
    8bbc:	b2a4      	uxth	r4, r4
    8bbe:	fbb2 f0f5 	udiv	r0, r2, r5
    8bc2:	fb05 2210 	mls	r2, r5, r0, r2
    8bc6:	fb00 fe0e 	mul.w	lr, r0, lr
    8bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    8bce:	45a6      	cmp	lr, r4
    8bd0:	d908      	bls.n	8be4 <__udivmoddi4+0x88>
    8bd2:	eb1c 0404 	adds.w	r4, ip, r4
    8bd6:	f100 32ff 	add.w	r2, r0, #4294967295
    8bda:	d202      	bcs.n	8be2 <__udivmoddi4+0x86>
    8bdc:	45a6      	cmp	lr, r4
    8bde:	f200 8119 	bhi.w	8e14 <__udivmoddi4+0x2b8>
    8be2:	4610      	mov	r0, r2
    8be4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8be8:	eba4 040e 	sub.w	r4, r4, lr
    8bec:	2100      	movs	r1, #0
    8bee:	b11e      	cbz	r6, 8bf8 <__udivmoddi4+0x9c>
    8bf0:	40dc      	lsrs	r4, r3
    8bf2:	2300      	movs	r3, #0
    8bf4:	e9c6 4300 	strd	r4, r3, [r6]
    8bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bfc:	428b      	cmp	r3, r1
    8bfe:	d908      	bls.n	8c12 <__udivmoddi4+0xb6>
    8c00:	2e00      	cmp	r6, #0
    8c02:	f000 80fb 	beq.w	8dfc <__udivmoddi4+0x2a0>
    8c06:	2100      	movs	r1, #0
    8c08:	e9c6 0500 	strd	r0, r5, [r6]
    8c0c:	4608      	mov	r0, r1
    8c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c12:	fab3 f183 	clz	r1, r3
    8c16:	2900      	cmp	r1, #0
    8c18:	d14b      	bne.n	8cb2 <__udivmoddi4+0x156>
    8c1a:	42ab      	cmp	r3, r5
    8c1c:	f0c0 80f1 	bcc.w	8e02 <__udivmoddi4+0x2a6>
    8c20:	4282      	cmp	r2, r0
    8c22:	f240 80ee 	bls.w	8e02 <__udivmoddi4+0x2a6>
    8c26:	4608      	mov	r0, r1
    8c28:	2e00      	cmp	r6, #0
    8c2a:	d0e5      	beq.n	8bf8 <__udivmoddi4+0x9c>
    8c2c:	e9c6 4700 	strd	r4, r7, [r6]
    8c30:	e7e2      	b.n	8bf8 <__udivmoddi4+0x9c>
    8c32:	b902      	cbnz	r2, 8c36 <__udivmoddi4+0xda>
    8c34:	deff      	udf	#255	; 0xff
    8c36:	fab2 f382 	clz	r3, r2
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	f040 809d 	bne.w	8d7a <__udivmoddi4+0x21e>
    8c40:	1a8d      	subs	r5, r1, r2
    8c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8c46:	b297      	uxth	r7, r2
    8c48:	2101      	movs	r1, #1
    8c4a:	fbb5 f2fe 	udiv	r2, r5, lr
    8c4e:	fb0e 5012 	mls	r0, lr, r2, r5
    8c52:	0c25      	lsrs	r5, r4, #16
    8c54:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    8c58:	fb07 f002 	mul.w	r0, r7, r2
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d90f      	bls.n	8c80 <__udivmoddi4+0x124>
    8c60:	eb1c 0505 	adds.w	r5, ip, r5
    8c64:	f102 38ff 	add.w	r8, r2, #4294967295
    8c68:	bf2c      	ite	cs
    8c6a:	f04f 0901 	movcs.w	r9, #1
    8c6e:	f04f 0900 	movcc.w	r9, #0
    8c72:	42a8      	cmp	r0, r5
    8c74:	d903      	bls.n	8c7e <__udivmoddi4+0x122>
    8c76:	f1b9 0f00 	cmp.w	r9, #0
    8c7a:	f000 80ce 	beq.w	8e1a <__udivmoddi4+0x2be>
    8c7e:	4642      	mov	r2, r8
    8c80:	1a2d      	subs	r5, r5, r0
    8c82:	b2a4      	uxth	r4, r4
    8c84:	fbb5 f0fe 	udiv	r0, r5, lr
    8c88:	fb0e 5510 	mls	r5, lr, r0, r5
    8c8c:	fb00 f707 	mul.w	r7, r0, r7
    8c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    8c94:	42a7      	cmp	r7, r4
    8c96:	d908      	bls.n	8caa <__udivmoddi4+0x14e>
    8c98:	eb1c 0404 	adds.w	r4, ip, r4
    8c9c:	f100 35ff 	add.w	r5, r0, #4294967295
    8ca0:	d202      	bcs.n	8ca8 <__udivmoddi4+0x14c>
    8ca2:	42a7      	cmp	r7, r4
    8ca4:	f200 80b3 	bhi.w	8e0e <__udivmoddi4+0x2b2>
    8ca8:	4628      	mov	r0, r5
    8caa:	1be4      	subs	r4, r4, r7
    8cac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    8cb0:	e79d      	b.n	8bee <__udivmoddi4+0x92>
    8cb2:	f1c1 0720 	rsb	r7, r1, #32
    8cb6:	408b      	lsls	r3, r1
    8cb8:	fa05 f401 	lsl.w	r4, r5, r1
    8cbc:	fa22 fc07 	lsr.w	ip, r2, r7
    8cc0:	40fd      	lsrs	r5, r7
    8cc2:	408a      	lsls	r2, r1
    8cc4:	ea4c 0c03 	orr.w	ip, ip, r3
    8cc8:	fa20 f307 	lsr.w	r3, r0, r7
    8ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    8cd0:	431c      	orrs	r4, r3
    8cd2:	fa1f fe8c 	uxth.w	lr, ip
    8cd6:	fa00 f301 	lsl.w	r3, r0, r1
    8cda:	0c20      	lsrs	r0, r4, #16
    8cdc:	fbb5 f8f9 	udiv	r8, r5, r9
    8ce0:	fb09 5518 	mls	r5, r9, r8, r5
    8ce4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    8ce8:	fb08 f00e 	mul.w	r0, r8, lr
    8cec:	42a8      	cmp	r0, r5
    8cee:	d90f      	bls.n	8d10 <__udivmoddi4+0x1b4>
    8cf0:	eb1c 0505 	adds.w	r5, ip, r5
    8cf4:	f108 3aff 	add.w	sl, r8, #4294967295
    8cf8:	bf2c      	ite	cs
    8cfa:	f04f 0b01 	movcs.w	fp, #1
    8cfe:	f04f 0b00 	movcc.w	fp, #0
    8d02:	42a8      	cmp	r0, r5
    8d04:	d903      	bls.n	8d0e <__udivmoddi4+0x1b2>
    8d06:	f1bb 0f00 	cmp.w	fp, #0
    8d0a:	f000 808c 	beq.w	8e26 <__udivmoddi4+0x2ca>
    8d0e:	46d0      	mov	r8, sl
    8d10:	1a2d      	subs	r5, r5, r0
    8d12:	b2a4      	uxth	r4, r4
    8d14:	fbb5 f0f9 	udiv	r0, r5, r9
    8d18:	fb09 5510 	mls	r5, r9, r0, r5
    8d1c:	fb00 fe0e 	mul.w	lr, r0, lr
    8d20:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    8d24:	45ae      	cmp	lr, r5
    8d26:	d907      	bls.n	8d38 <__udivmoddi4+0x1dc>
    8d28:	eb1c 0505 	adds.w	r5, ip, r5
    8d2c:	f100 34ff 	add.w	r4, r0, #4294967295
    8d30:	d201      	bcs.n	8d36 <__udivmoddi4+0x1da>
    8d32:	45ae      	cmp	lr, r5
    8d34:	d87e      	bhi.n	8e34 <__udivmoddi4+0x2d8>
    8d36:	4620      	mov	r0, r4
    8d38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    8d3c:	eba5 050e 	sub.w	r5, r5, lr
    8d40:	fba0 9802 	umull	r9, r8, r0, r2
    8d44:	4545      	cmp	r5, r8
    8d46:	464c      	mov	r4, r9
    8d48:	46c6      	mov	lr, r8
    8d4a:	d302      	bcc.n	8d52 <__udivmoddi4+0x1f6>
    8d4c:	d106      	bne.n	8d5c <__udivmoddi4+0x200>
    8d4e:	454b      	cmp	r3, r9
    8d50:	d204      	bcs.n	8d5c <__udivmoddi4+0x200>
    8d52:	3801      	subs	r0, #1
    8d54:	ebb9 0402 	subs.w	r4, r9, r2
    8d58:	eb68 0e0c 	sbc.w	lr, r8, ip
    8d5c:	2e00      	cmp	r6, #0
    8d5e:	d06f      	beq.n	8e40 <__udivmoddi4+0x2e4>
    8d60:	1b1a      	subs	r2, r3, r4
    8d62:	eb65 050e 	sbc.w	r5, r5, lr
    8d66:	fa22 f301 	lsr.w	r3, r2, r1
    8d6a:	fa05 f707 	lsl.w	r7, r5, r7
    8d6e:	40cd      	lsrs	r5, r1
    8d70:	2100      	movs	r1, #0
    8d72:	431f      	orrs	r7, r3
    8d74:	e9c6 7500 	strd	r7, r5, [r6]
    8d78:	e73e      	b.n	8bf8 <__udivmoddi4+0x9c>
    8d7a:	fa02 fc03 	lsl.w	ip, r2, r3
    8d7e:	f1c3 0020 	rsb	r0, r3, #32
    8d82:	fa01 f203 	lsl.w	r2, r1, r3
    8d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    8d8a:	40c1      	lsrs	r1, r0
    8d8c:	fa24 f500 	lsr.w	r5, r4, r0
    8d90:	fa1f f78c 	uxth.w	r7, ip
    8d94:	409c      	lsls	r4, r3
    8d96:	4315      	orrs	r5, r2
    8d98:	fbb1 f0fe 	udiv	r0, r1, lr
    8d9c:	0c2a      	lsrs	r2, r5, #16
    8d9e:	fb0e 1110 	mls	r1, lr, r0, r1
    8da2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8da6:	fb00 f107 	mul.w	r1, r0, r7
    8daa:	4291      	cmp	r1, r2
    8dac:	d90e      	bls.n	8dcc <__udivmoddi4+0x270>
    8dae:	eb1c 0202 	adds.w	r2, ip, r2
    8db2:	f100 38ff 	add.w	r8, r0, #4294967295
    8db6:	bf2c      	ite	cs
    8db8:	f04f 0901 	movcs.w	r9, #1
    8dbc:	f04f 0900 	movcc.w	r9, #0
    8dc0:	4291      	cmp	r1, r2
    8dc2:	d902      	bls.n	8dca <__udivmoddi4+0x26e>
    8dc4:	f1b9 0f00 	cmp.w	r9, #0
    8dc8:	d031      	beq.n	8e2e <__udivmoddi4+0x2d2>
    8dca:	4640      	mov	r0, r8
    8dcc:	1a52      	subs	r2, r2, r1
    8dce:	b2ad      	uxth	r5, r5
    8dd0:	fbb2 f1fe 	udiv	r1, r2, lr
    8dd4:	fb0e 2211 	mls	r2, lr, r1, r2
    8dd8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    8ddc:	fb01 f207 	mul.w	r2, r1, r7
    8de0:	42aa      	cmp	r2, r5
    8de2:	d907      	bls.n	8df4 <__udivmoddi4+0x298>
    8de4:	eb1c 0505 	adds.w	r5, ip, r5
    8de8:	f101 38ff 	add.w	r8, r1, #4294967295
    8dec:	d201      	bcs.n	8df2 <__udivmoddi4+0x296>
    8dee:	42aa      	cmp	r2, r5
    8df0:	d823      	bhi.n	8e3a <__udivmoddi4+0x2de>
    8df2:	4641      	mov	r1, r8
    8df4:	1aad      	subs	r5, r5, r2
    8df6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8dfa:	e726      	b.n	8c4a <__udivmoddi4+0xee>
    8dfc:	4631      	mov	r1, r6
    8dfe:	4630      	mov	r0, r6
    8e00:	e6fa      	b.n	8bf8 <__udivmoddi4+0x9c>
    8e02:	1a84      	subs	r4, r0, r2
    8e04:	eb65 0303 	sbc.w	r3, r5, r3
    8e08:	2001      	movs	r0, #1
    8e0a:	461f      	mov	r7, r3
    8e0c:	e70c      	b.n	8c28 <__udivmoddi4+0xcc>
    8e0e:	4464      	add	r4, ip
    8e10:	3802      	subs	r0, #2
    8e12:	e74a      	b.n	8caa <__udivmoddi4+0x14e>
    8e14:	4464      	add	r4, ip
    8e16:	3802      	subs	r0, #2
    8e18:	e6e4      	b.n	8be4 <__udivmoddi4+0x88>
    8e1a:	3a02      	subs	r2, #2
    8e1c:	4465      	add	r5, ip
    8e1e:	e72f      	b.n	8c80 <__udivmoddi4+0x124>
    8e20:	3902      	subs	r1, #2
    8e22:	4462      	add	r2, ip
    8e24:	e6c9      	b.n	8bba <__udivmoddi4+0x5e>
    8e26:	f1a8 0802 	sub.w	r8, r8, #2
    8e2a:	4465      	add	r5, ip
    8e2c:	e770      	b.n	8d10 <__udivmoddi4+0x1b4>
    8e2e:	3802      	subs	r0, #2
    8e30:	4462      	add	r2, ip
    8e32:	e7cb      	b.n	8dcc <__udivmoddi4+0x270>
    8e34:	3802      	subs	r0, #2
    8e36:	4465      	add	r5, ip
    8e38:	e77e      	b.n	8d38 <__udivmoddi4+0x1dc>
    8e3a:	3902      	subs	r1, #2
    8e3c:	4465      	add	r5, ip
    8e3e:	e7d9      	b.n	8df4 <__udivmoddi4+0x298>
    8e40:	4631      	mov	r1, r6
    8e42:	e6d9      	b.n	8bf8 <__udivmoddi4+0x9c>

00008e44 <__aeabi_idiv0>:
    8e44:	4770      	bx	lr
    8e46:	bf00      	nop

00008e48 <_ZN7dataCSC9calcSpeedEv>:

    return retVal;
}

uint16_t dataCSC::calcSpeed() 
{
    8e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e4c:	4605      	mov	r5, r0
    if (nbrRevSpeed < 0)
    {
        nbrRevSpeed = maxVal - oldSumRevSpeed + sumRevSpeed;
    }

    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e4e:	8900      	ldrh	r0, [r0, #8]
    8e50:	896b      	ldrh	r3, [r5, #10]
    8e52:	4298      	cmp	r0, r3
    8e54:	d04f      	beq.n	8ef6 <_ZN7dataCSC9calcSpeedEv+0xae>
    uint16_t nbrRevSpeed = sumRevSpeed - oldSumRevSpeed;
    8e56:	f8b5 a000 	ldrh.w	sl, [r5]
    8e5a:	f8b5 9002 	ldrh.w	r9, [r5, #2]
    8e5e:	ebaa 0409 	sub.w	r4, sl, r9
    8e62:	b2a4      	uxth	r4, r4
    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e64:	b1f4      	cbz	r4, 8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    {
        wheelCircumference = wheelDiameter;
        wheelCircumference = (wheelDiameter) * PI;
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e66:	eba0 0803 	sub.w	r8, r0, r3
    8e6a:	4640      	mov	r0, r8
    8e6c:	f7ff fb3a 	bl	84e4 <__aeabi_i2d>
    8e70:	2200      	movs	r2, #0
    8e72:	4b25      	ldr	r3, [pc, #148]	; (8f08 <_ZN7dataCSC9calcSpeedEv+0xc0>)
    8e74:	f7ff fba0 	bl	85b8 <__aeabi_dmul>
        double oldSpeed = speed;

        if (time < 0)
    8e78:	2200      	movs	r2, #0
    8e7a:	2300      	movs	r3, #0
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e7c:	4606      	mov	r6, r0
    8e7e:	460f      	mov	r7, r1
        if (time < 0)
    8e80:	f7ff fe0c 	bl	8a9c <__aeabi_dcmplt>
    8e84:	b138      	cbz	r0, 8e96 <_ZN7dataCSC9calcSpeedEv+0x4e>
        {
            time = (0xffff - oldLastEventSpeed + lastEventSpeed)/1024;
    8e86:	f508 407f 	add.w	r0, r8, #65280	; 0xff00
    8e8a:	30ff      	adds	r0, #255	; 0xff
    8e8c:	1280      	asrs	r0, r0, #10
    8e8e:	f7ff fb29 	bl	84e4 <__aeabi_i2d>
    8e92:	4606      	mov	r6, r0
    8e94:	460f      	mov	r7, r1
        }
        if (sumRevSpeed == oldSumRevSpeed)
    8e96:	45ca      	cmp	sl, r9
    8e98:	d107      	bne.n	8eaa <_ZN7dataCSC9calcSpeedEv+0x62>
        {
            return (uint16_t) oldSpeed;
    8e9a:	e9d5 010a 	ldrd	r0, r1, [r5, #40]	; 0x28
        }
        else   
        {
            rpm_speed = (nbrRevSpeed) * 60 / time;
            speed = (rpm_speed * wheelCircumference) * 60 / 1000; // km/h * 100 for the values after the comma
            retVal = (uint16_t) (speed);
    8e9e:	f7ff fe25 	bl	8aec <__aeabi_d2uiz>
    8ea2:	b284      	uxth	r4, r0
            return retVal;
        }  
    }
    return 0;
    8ea4:	4620      	mov	r0, r4
    8ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eaa:	203c      	movs	r0, #60	; 0x3c
        wheelCircumference = wheelDiameter;
    8eac:	e9d5 8906 	ldrd	r8, r9, [r5, #24]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eb0:	4360      	muls	r0, r4
    8eb2:	f7ff fb17 	bl	84e4 <__aeabi_i2d>
    8eb6:	4632      	mov	r2, r6
    8eb8:	463b      	mov	r3, r7
    8eba:	f7ff fca7 	bl	880c <__aeabi_ddiv>
        wheelCircumference = (wheelDiameter) * PI;
    8ebe:	a310      	add	r3, pc, #64	; (adr r3, 8f00 <_ZN7dataCSC9calcSpeedEv+0xb8>)
    8ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8ec4:	4606      	mov	r6, r0
    8ec6:	460f      	mov	r7, r1
        wheelCircumference = (wheelDiameter) * PI;
    8ec8:	4640      	mov	r0, r8
    8eca:	4649      	mov	r1, r9
    8ecc:	f7ff fb74 	bl	85b8 <__aeabi_dmul>
    8ed0:	4602      	mov	r2, r0
    8ed2:	460b      	mov	r3, r1
            speed = (rpm_speed * wheelCircumference) * 60 / 1000; // km/h * 100 for the values after the comma
    8ed4:	4630      	mov	r0, r6
    8ed6:	4639      	mov	r1, r7
    8ed8:	f7ff fb6e 	bl	85b8 <__aeabi_dmul>
    8edc:	2200      	movs	r2, #0
    8ede:	4b0b      	ldr	r3, [pc, #44]	; (8f0c <_ZN7dataCSC9calcSpeedEv+0xc4>)
    8ee0:	f7ff fb6a 	bl	85b8 <__aeabi_dmul>
    8ee4:	2200      	movs	r2, #0
    8ee6:	4b0a      	ldr	r3, [pc, #40]	; (8f10 <_ZN7dataCSC9calcSpeedEv+0xc8>)
    8ee8:	f7ff fc90 	bl	880c <__aeabi_ddiv>
    8eec:	4602      	mov	r2, r0
    8eee:	460b      	mov	r3, r1
    8ef0:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    8ef4:	e7d3      	b.n	8e9e <_ZN7dataCSC9calcSpeedEv+0x56>
    return 0;
    8ef6:	2400      	movs	r4, #0
    8ef8:	e7d4      	b.n	8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    8efa:	bf00      	nop
    8efc:	f3af 8000 	nop.w
    8f00:	2e5a865e 	.word	0x2e5a865e
    8f04:	40093676 	.word	0x40093676
    8f08:	3f500000 	.word	0x3f500000
    8f0c:	404e0000 	.word	0x404e0000
    8f10:	408f4000 	.word	0x408f4000
    8f14:	00000000 	.word	0x00000000

00008f18 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth>:
			  uint8_t flags)
{
    const uint8_t * buffer = (uint8_t *) buf;
    
    // len = 1 -> new diameter received - or diameter reset (when 0)
    if (len == 1)
    8f18:	2b01      	cmp	r3, #1
{
    8f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f1e:	4607      	mov	r7, r0
    8f20:	4688      	mov	r8, r1
    8f22:	4614      	mov	r4, r2
    8f24:	461e      	mov	r6, r3
    if (len == 1)
    8f26:	d125      	bne.n	8f74 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x5c>
    {
        diameter = (uint8_t ) *buffer;
    8f28:	7815      	ldrb	r5, [r2, #0]
    8f2a:	4b4b      	ldr	r3, [pc, #300]	; (9058 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x140>)

        // check if last bit is '1', then add 0.5 to dia and convert it to cm
        if ((diameter & 0b10000000) == 0b10000000)
        {
            dia = (diameter + 0.5) * 2.54;
    8f2c:	4628      	mov	r0, r5
        diameter = (uint8_t ) *buffer;
    8f2e:	701d      	strb	r5, [r3, #0]
            dia = (diameter + 0.5) * 2.54;
    8f30:	f7ff fad8 	bl	84e4 <__aeabi_i2d>
        if ((diameter & 0b10000000) == 0b10000000)
    8f34:	062b      	lsls	r3, r5, #24
    8f36:	d503      	bpl.n	8f40 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x28>
            dia = (diameter + 0.5) * 2.54;
    8f38:	2200      	movs	r2, #0
    8f3a:	4b48      	ldr	r3, [pc, #288]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x144>)
    8f3c:	f7ff f986 	bl	824c <__adddf3>
        }
        else 
        {
            dia = diameter * 2.54;
    8f40:	a343      	add	r3, pc, #268	; (adr r3, 9050 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x138>)
    8f42:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f46:	f7ff fb37 	bl	85b8 <__aeabi_dmul>
    8f4a:	4b45      	ldr	r3, [pc, #276]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x148>)
    8f4c:	e9c3 0100 	strd	r0, r1, [r3]
        default:
            break;
        }
    }
    
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    8f50:	463a      	mov	r2, r7
    8f52:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    8f56:	4843      	ldr	r0, [pc, #268]	; (9064 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x14c>)
    8f58:	f011 fdac 	bl	1aab4 <printk>
    8f5c:	2300      	movs	r3, #0
 
    for(uint8_t i = 0; i < len; i++)
    {
        printk("%02X", buffer[i]);
    8f5e:	4f42      	ldr	r7, [pc, #264]	; (9068 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x150>)
    for(uint8_t i = 0; i < len; i++)
    8f60:	1c5d      	adds	r5, r3, #1
    8f62:	b2db      	uxtb	r3, r3
    8f64:	42b3      	cmp	r3, r6
    8f66:	da6c      	bge.n	9042 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x12a>
        printk("%02X", buffer[i]);
    8f68:	5ce1      	ldrb	r1, [r4, r3]
    8f6a:	4638      	mov	r0, r7
    8f6c:	f011 fda2 	bl	1aab4 <printk>
    for(uint8_t i = 0; i < len; i++)
    8f70:	462b      	mov	r3, r5
    8f72:	e7f5      	b.n	8f60 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x48>
    if (len == 19)
    8f74:	2b13      	cmp	r3, #19
    8f76:	d1eb      	bne.n	8f50 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
        nbrAddresses = (uint8_t) buffer[17];
    8f78:	7c53      	ldrb	r3, [r2, #17]
    8f7a:	4a3c      	ldr	r2, [pc, #240]	; (906c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x154>)
        infoSensors = (uint8_t) buffer[18];
    8f7c:	7ca1      	ldrb	r1, [r4, #18]
        nbrAddresses = (uint8_t) buffer[17];
    8f7e:	7013      	strb	r3, [r2, #0]
        infoSensors = (uint8_t) buffer[18];
    8f80:	4a3b      	ldr	r2, [pc, #236]	; (9070 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x158>)
        switch (nbrAddresses)
    8f82:	2b02      	cmp	r3, #2
        infoSensors = (uint8_t) buffer[18];
    8f84:	7011      	strb	r1, [r2, #0]
        switch (nbrAddresses)
    8f86:	d00e      	beq.n	8fa6 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x8e>
    8f88:	2b03      	cmp	r3, #3
    8f8a:	d02e      	beq.n	8fea <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xd2>
    8f8c:	2b01      	cmp	r3, #1
    8f8e:	d1df      	bne.n	8f50 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8f90:	4a38      	ldr	r2, [pc, #224]	; (9074 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8f92:	1e63      	subs	r3, r4, #1
    8f94:	f104 0110 	add.w	r1, r4, #16
                uint8_t val = (uint8_t) buffer[i];
    8f98:	f813 0f01 	ldrb.w	r0, [r3, #1]!
            for (uint8_t i=0; i<17; i++)
    8f9c:	4299      	cmp	r1, r3
                address1[i] = charToSave;
    8f9e:	f802 0b01 	strb.w	r0, [r2], #1
            for (uint8_t i=0; i<17; i++)
    8fa2:	d1f9      	bne.n	8f98 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x80>
    8fa4:	e7d4      	b.n	8f50 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8fa6:	4b34      	ldr	r3, [pc, #208]	; (9078 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8fa8:	781d      	ldrb	r5, [r3, #0]
    8faa:	3501      	adds	r5, #1
    8fac:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8fae:	2d01      	cmp	r5, #1
            cntAddresses++;
    8fb0:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8fb2:	d10a      	bne.n	8fca <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xb2>
    8fb4:	4a2f      	ldr	r2, [pc, #188]	; (9074 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8fb6:	1e63      	subs	r3, r4, #1
    8fb8:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fbc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fc0:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8fc2:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fc6:	d1f9      	bne.n	8fbc <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xa4>
    8fc8:	e7c2      	b.n	8f50 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    8fca:	2d02      	cmp	r5, #2
    8fcc:	d1c0      	bne.n	8f50 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8fce:	4a2b      	ldr	r2, [pc, #172]	; (907c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    8fd0:	1e63      	subs	r3, r4, #1
    8fd2:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fd6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fda:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    8fdc:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fe0:	d1f9      	bne.n	8fd6 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xbe>
                cntAddresses = 0;
    8fe2:	2200      	movs	r2, #0
    8fe4:	4b24      	ldr	r3, [pc, #144]	; (9078 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8fe6:	701a      	strb	r2, [r3, #0]
    8fe8:	e7b2      	b.n	8f50 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8fea:	4b23      	ldr	r3, [pc, #140]	; (9078 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8fec:	781d      	ldrb	r5, [r3, #0]
    8fee:	3501      	adds	r5, #1
    8ff0:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8ff2:	2d01      	cmp	r5, #1
            cntAddresses++;
    8ff4:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8ff6:	d10a      	bne.n	900e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xf6>
    8ff8:	4a1e      	ldr	r2, [pc, #120]	; (9074 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8ffa:	1e63      	subs	r3, r4, #1
    8ffc:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9000:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9004:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    9006:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    900a:	d1f9      	bne.n	9000 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xe8>
    900c:	e7a0      	b.n	8f50 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    900e:	2d02      	cmp	r5, #2
    9010:	d10a      	bne.n	9028 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x110>
    9012:	4a1a      	ldr	r2, [pc, #104]	; (907c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    9014:	1e63      	subs	r3, r4, #1
    9016:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    901a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    901e:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    9020:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9024:	d1f9      	bne.n	901a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x102>
    9026:	e793      	b.n	8f50 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            } else if (cntAddresses == 3)
    9028:	2d03      	cmp	r5, #3
    902a:	d191      	bne.n	8f50 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    902c:	4a14      	ldr	r2, [pc, #80]	; (9080 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x168>)
    902e:	1e63      	subs	r3, r4, #1
    9030:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9034:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9038:	428b      	cmp	r3, r1
                    address3[i] = charToSave;
    903a:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    903e:	d1f9      	bne.n	9034 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x11c>
    9040:	e7cf      	b.n	8fe2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xca>
    }
    printk("\n");
    9042:	4810      	ldr	r0, [pc, #64]	; (9084 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x16c>)
    9044:	f011 fd36 	bl	1aab4 <printk>
 	return len;
}
    9048:	4630      	mov	r0, r6
    904a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    904e:	bf00      	nop
    9050:	851eb852 	.word	0x851eb852
    9054:	400451eb 	.word	0x400451eb
    9058:	2000f4f2 	.word	0x2000f4f2
    905c:	3fe00000 	.word	0x3fe00000
    9060:	20008810 	.word	0x20008810
    9064:	0001fb56 	.word	0x0001fb56
    9068:	0001fb82 	.word	0x0001fb82
    906c:	2000f4f4 	.word	0x2000f4f4
    9070:	2000f4f3 	.word	0x2000f4f3
    9074:	2000f2de 	.word	0x2000f2de
    9078:	2000f311 	.word	0x2000f311
    907c:	2000f2ef 	.word	0x2000f2ef
    9080:	2000f300 	.word	0x2000f300
    9084:	00022d9b 	.word	0x00022d9b

00009088 <main>:
 */

#include "deviceManager.h"

void main(void)
{
    9088:	b500      	push	{lr}

	printk("Application start\n");
    908a:	4807      	ldr	r0, [pc, #28]	; (90a8 <main+0x20>)
{
    908c:	b091      	sub	sp, #68	; 0x44
	printk("Application start\n");
    908e:	f011 fd11 	bl	1aab4 <printk>

	// create a new device manager
	deviceManager dManager;
    9092:	4668      	mov	r0, sp
    9094:	f000 fae4 	bl	9660 <_ZN13deviceManagerC1Ev>
	// start application as peripheral and central
	dManager.setDevice(true,true);
    9098:	2201      	movs	r2, #1
    909a:	4668      	mov	r0, sp
    909c:	4611      	mov	r1, r2
    909e:	f000 fd69 	bl	9b74 <_ZN13deviceManager9setDeviceEbb>
    90a2:	b011      	add	sp, #68	; 0x44
    90a4:	f85d fb04 	ldr.w	pc, [sp], #4
    90a8:	0001f44c 	.word	0x0001f44c

000090ac <_ZN13deviceManager13app_button_cbEv>:
}

bool deviceManager::app_button_cb(void)
{
    return app_button_state;
}
    90ac:	4b01      	ldr	r3, [pc, #4]	; (90b4 <_ZN13deviceManager13app_button_cbEv+0x8>)
    90ae:	7818      	ldrb	r0, [r3, #0]
    90b0:	4770      	bx	lr
    90b2:	bf00      	nop
    90b4:	2000f29e 	.word	0x2000f29e

000090b8 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv>:
	bt_conn_disconnect(conn,-5);
}

void deviceManager::discovery_error_found(struct bt_conn *conn, int err, void *ctx)
{
	printk("The discovery procedure failed, err %d\n", err);
    90b8:	4801      	ldr	r0, [pc, #4]	; (90c0 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv+0x8>)
    90ba:	f011 bcfb 	b.w	1aab4 <printk>
    90be:	bf00      	nop
    90c0:	0001f45f 	.word	0x0001f45f

000090c4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv>:
}


void deviceManager::discoveryCompletedHR(struct bt_gatt_dm *dm, void *ctx) 
{
    90c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    90c8:	4604      	mov	r4, r0
	uint8_t err;

	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;

	struct bt_conn *conn = bt_gatt_dm_conn_get(dm);
    90ca:	f012 f92f 	bl	1b32c <bt_gatt_dm_conn_get>
    90ce:	4607      	mov	r7, r0

	printk("The discovery procedure succeeded\n");
    90d0:	4847      	ldr	r0, [pc, #284]	; (91f0 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x12c>)
    90d2:	f011 fcef 	bl	1aab4 <printk>

	bt_gatt_dm_data_print(dm);

	// Heart rate characteristic 
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_HRS_MEASUREMENT);
    90d6:	4620      	mov	r0, r4
    90d8:	4946      	ldr	r1, [pc, #280]	; (91f4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x130>)
    90da:	f003 fd0b 	bl	caf4 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) 
    90de:	4605      	mov	r5, r0
    90e0:	b928      	cbnz	r0, 90ee <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x2a>
	{
		printk("No heart rate measurement characteristic found\n");
    90e2:	4845      	ldr	r0, [pc, #276]	; (91f8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x134>)
		break;
	default:
		break;
	}
	dk_set_led_on(CON_STATUS_LED_CENTRAL);
}
    90e4:	b003      	add	sp, #12
    90e6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		printk("No heart rate CCC descriptor found. "
    90ea:	f011 bce3 	b.w	1aab4 <printk>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_HRS_MEASUREMENT);
    90ee:	4601      	mov	r1, r0
    90f0:	4a42      	ldr	r2, [pc, #264]	; (91fc <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x138>)
    90f2:	4620      	mov	r0, r4
    90f4:	f012 f969 	bl	1b3ca <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) 
    90f8:	b908      	cbnz	r0, 90fe <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x3a>
		printk("No heat rate measurement characteristic value found\n");
    90fa:	4841      	ldr	r0, [pc, #260]	; (9200 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x13c>)
    90fc:	e7f2      	b.n	90e4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x20>
	subscribe_params[nbrConnectionsCentral-1].value_handle = gatt_desc->handle;
    90fe:	f04f 0918 	mov.w	r9, #24
    9102:	4e40      	ldr	r6, [pc, #256]	; (9204 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x140>)
    9104:	f8df 8100 	ldr.w	r8, [pc, #256]	; 9208 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x144>
    9108:	7832      	ldrb	r2, [r6, #0]
    910a:	8883      	ldrh	r3, [r0, #4]
    910c:	3a01      	subs	r2, #1
    910e:	fb09 8202 	mla	r2, r9, r2, r8
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    9112:	4629      	mov	r1, r5
	subscribe_params[nbrConnectionsCentral-1].value_handle = gatt_desc->handle;
    9114:	8113      	strh	r3, [r2, #8]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    9116:	4620      	mov	r0, r4
    9118:	4a3c      	ldr	r2, [pc, #240]	; (920c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x148>)
    911a:	f012 f956 	bl	1b3ca <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) 
    911e:	b908      	cbnz	r0, 9124 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x60>
		printk("No heart rate CCC descriptor found. "
    9120:	483b      	ldr	r0, [pc, #236]	; (9210 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x14c>)
    9122:	e7df      	b.n	90e4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x20>
	subscribe_params[nbrConnectionsCentral-1].notify = notify_HR;
    9124:	7833      	ldrb	r3, [r6, #0]
    9126:	4a3b      	ldr	r2, [pc, #236]	; (9214 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x150>)
    9128:	3b01      	subs	r3, #1
    912a:	fb09 f303 	mul.w	r3, r9, r3
    912e:	eb08 0103 	add.w	r1, r8, r3
    9132:	f848 2003 	str.w	r2, [r8, r3]
	subscribe_params[nbrConnectionsCentral-1].value = BT_GATT_CCC_NOTIFY;
    9136:	2301      	movs	r3, #1
    9138:	818b      	strh	r3, [r1, #12]
	subscribe_params[nbrConnectionsCentral-1].ccc_handle = gatt_desc->handle;
    913a:	8883      	ldrh	r3, [r0, #4]
	err = bt_gatt_subscribe(conn, &subscribe_params[nbrConnectionsCentral-1]);
    913c:	4638      	mov	r0, r7
	subscribe_params[nbrConnectionsCentral-1].ccc_handle = gatt_desc->handle;
    913e:	814b      	strh	r3, [r1, #10]
	err = bt_gatt_subscribe(conn, &subscribe_params[nbrConnectionsCentral-1]);
    9140:	f00b ffc0 	bl	150c4 <bt_gatt_subscribe>
	if (err && err != -EALREADY) 
    9144:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9148:	d022      	beq.n	9190 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xcc>
		printk("Subscribe failed (err %d)\n", err);
    914a:	4833      	ldr	r0, [pc, #204]	; (9218 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x154>)
    914c:	f011 fcb2 	bl	1aab4 <printk>
	err = bt_gatt_dm_data_release(dm);
    9150:	4620      	mov	r0, r4
    9152:	f012 f94c 	bl	1b3ee <bt_gatt_dm_data_release>
	if (err) 
    9156:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    915a:	d002      	beq.n	9162 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x9e>
		printk("Could not release the discovery data (err %d)\n", err);
    915c:	482f      	ldr	r0, [pc, #188]	; (921c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x158>)
    915e:	f011 fca9 	bl	1aab4 <printk>
	subscriptionDone = true;
    9162:	2401      	movs	r4, #1
    9164:	4b2e      	ldr	r3, [pc, #184]	; (9220 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x15c>)
    9166:	701c      	strb	r4, [r3, #0]
	switch (nbrConnectionsCentral)
    9168:	7833      	ldrb	r3, [r6, #0]
    916a:	2b02      	cmp	r3, #2
    916c:	d014      	beq.n	9198 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xd4>
    916e:	2b03      	cmp	r3, #3
    9170:	d02c      	beq.n	91cc <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x108>
    9172:	42a3      	cmp	r3, r4
    9174:	d120      	bne.n	91b8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xf4>
		connectedCode[0] = 21;
    9176:	2215      	movs	r2, #21
    9178:	f88d 2004 	strb.w	r2, [sp, #4]
		data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    917c:	461a      	mov	r2, r3
    917e:	4b29      	ldr	r3, [pc, #164]	; (9224 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x160>)
    9180:	a901      	add	r1, sp, #4
    9182:	6818      	ldr	r0, [r3, #0]
    9184:	f001 f834 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
		printk("Discovery completed\n");
    9188:	4827      	ldr	r0, [pc, #156]	; (9228 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x164>)
		printk("Third discovery completed\n");
    918a:	f011 fc93 	bl	1aab4 <printk>
		break;
    918e:	e013      	b.n	91b8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xf4>
		printk("[SUBSCRIBED]\n");
    9190:	4826      	ldr	r0, [pc, #152]	; (922c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x168>)
    9192:	f011 fc8f 	bl	1aab4 <printk>
    9196:	e7db      	b.n	9150 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x8c>
		printk("Second discovery completed\n");
    9198:	4825      	ldr	r0, [pc, #148]	; (9230 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x16c>)
    919a:	f011 fc8b 	bl	1aab4 <printk>
		if (sensorInfos == 5)
    919e:	4b25      	ldr	r3, [pc, #148]	; (9234 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x170>)
    91a0:	781b      	ldrb	r3, [r3, #0]
    91a2:	2b05      	cmp	r3, #5
    91a4:	d10e      	bne.n	91c4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x100>
			connectedCode[0] = 17;
    91a6:	2311      	movs	r3, #17
			connectedCode[0] = 18;
    91a8:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    91ac:	4b1d      	ldr	r3, [pc, #116]	; (9224 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x160>)
    91ae:	4622      	mov	r2, r4
    91b0:	6818      	ldr	r0, [r3, #0]
    91b2:	a901      	add	r1, sp, #4
    91b4:	f001 f81c 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
	dk_set_led_on(CON_STATUS_LED_CENTRAL);
    91b8:	2001      	movs	r0, #1
    91ba:	f014 fbec 	bl	1d996 <dk_set_led_on>
}
    91be:	b003      	add	sp, #12
    91c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		else if (sensorInfos == 6)
    91c4:	2b06      	cmp	r3, #6
    91c6:	d1f7      	bne.n	91b8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xf4>
			connectedCode[0] = 18;
    91c8:	2312      	movs	r3, #18
    91ca:	e7ed      	b.n	91a8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xe4>
		if (reconnectedHeartRate)
    91cc:	4b1a      	ldr	r3, [pc, #104]	; (9238 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x174>)
    91ce:	781a      	ldrb	r2, [r3, #0]
    91d0:	b162      	cbz	r2, 91ec <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x128>
			reconnectedHeartRate = false;
    91d2:	2200      	movs	r2, #0
    91d4:	701a      	strb	r2, [r3, #0]
			connectedCode[0] = 22;
    91d6:	2316      	movs	r3, #22
			connectedCode[0] = 20;
    91d8:	f88d 3004 	strb.w	r3, [sp, #4]
		data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    91dc:	4b11      	ldr	r3, [pc, #68]	; (9224 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x160>)
    91de:	2201      	movs	r2, #1
    91e0:	6818      	ldr	r0, [r3, #0]
    91e2:	a901      	add	r1, sp, #4
    91e4:	f001 f804 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
		printk("Third discovery completed\n");
    91e8:	4814      	ldr	r0, [pc, #80]	; (923c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x178>)
    91ea:	e7ce      	b.n	918a <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xc6>
			connectedCode[0] = 20;
    91ec:	2314      	movs	r3, #20
    91ee:	e7f3      	b.n	91d8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x114>
    91f0:	0001f487 	.word	0x0001f487
    91f4:	0001f3a4 	.word	0x0001f3a4
    91f8:	0001f4aa 	.word	0x0001f4aa
    91fc:	0001f3a8 	.word	0x0001f3a8
    9200:	0001f4da 	.word	0x0001f4da
    9204:	2000f2a1 	.word	0x2000f2a1
    9208:	2000a5fc 	.word	0x2000a5fc
    920c:	0001f3ac 	.word	0x0001f3ac
    9210:	0001f50f 	.word	0x0001f50f
    9214:	00009271 	.word	0x00009271
    9218:	0001f568 	.word	0x0001f568
    921c:	0001f591 	.word	0x0001f591
    9220:	2000f29f 	.word	0x2000f29f
    9224:	2000a5f8 	.word	0x2000a5f8
    9228:	0001f5c0 	.word	0x0001f5c0
    922c:	0001f583 	.word	0x0001f583
    9230:	0001f5d5 	.word	0x0001f5d5
    9234:	2000f29b 	.word	0x2000f29b
    9238:	2000f2a0 	.word	0x2000f2a0
    923c:	0001f5f1 	.word	0x0001f5f1

00009240 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv>:
{
    9240:	b513      	push	{r0, r1, r4, lr}
    9242:	4604      	mov	r4, r0
	printk("Service not found!\n");
    9244:	4808      	ldr	r0, [pc, #32]	; (9268 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x28>)
    9246:	f011 fc35 	bl	1aab4 <printk>
	error[0] = 10;
    924a:	230a      	movs	r3, #10
    924c:	f88d 3004 	strb.w	r3, [sp, #4]
	data_service_send(peripheralConn,error, sizeof(error));
    9250:	4b06      	ldr	r3, [pc, #24]	; (926c <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x2c>)
    9252:	2201      	movs	r2, #1
    9254:	6818      	ldr	r0, [r3, #0]
    9256:	a901      	add	r1, sp, #4
    9258:	f000 ffca 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
	bt_conn_disconnect(conn,-5);
    925c:	21fb      	movs	r1, #251	; 0xfb
    925e:	4620      	mov	r0, r4
    9260:	f008 fcda 	bl	11c18 <bt_conn_disconnect>
}
    9264:	b002      	add	sp, #8
    9266:	bd10      	pop	{r4, pc}
    9268:	0001f60c 	.word	0x0001f60c
    926c:	2000a5f8 	.word	0x2000a5f8

00009270 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
}

uint8_t deviceManager::notify_HR(struct bt_conn *conn,
		struct bt_gatt_subscribe_params *params,
		const void *data, uint16_t length) 
{
    9270:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9274:	461e      	mov	r6, r3
	static bool onceHeartRate = true;
	static uint16_t cntNbrReceived = 0;		
	static uint16_t cntFirst = 0;	
	uint8_t dataToSend[2];
	uint8_t batteryLevelToSend[4];
	dataToSend[0] = TYPE_HEARTRATE;
    9276:	2303      	movs	r3, #3
{
    9278:	4614      	mov	r4, r2
	batteryLevelToSend[0] = TYPE_BATTERY;
    927a:	2204      	movs	r2, #4
	dataToSend[0] = TYPE_HEARTRATE;
    927c:	f88d 3000 	strb.w	r3, [sp]
	batteryLevelToSend[1] = TYPE_HEARTRATE;
    9280:	f88d 3005 	strb.w	r3, [sp, #5]
				batterySubscriptionDone = true;
			}
		}
	}*/

	if (sensorInfos == 7)
    9284:	4b39      	ldr	r3, [pc, #228]	; (936c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xfc>)
{
    9286:	4688      	mov	r8, r1
	if (sensorInfos == 7)
    9288:	7818      	ldrb	r0, [r3, #0]
    928a:	4d39      	ldr	r5, [pc, #228]	; (9370 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x100>)
    928c:	2807      	cmp	r0, #7
	batteryLevelToSend[0] = TYPE_BATTERY;
    928e:	f88d 2004 	strb.w	r2, [sp, #4]
	if (sensorInfos == 7)
    9292:	d12a      	bne.n	92ea <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7a>
	{
		if (onceHeartRate)
    9294:	4b37      	ldr	r3, [pc, #220]	; (9374 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x104>)
    9296:	781a      	ldrb	r2, [r3, #0]
    9298:	b33a      	cbz	r2, 92ea <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7a>
		{
			onceHeartRate = false;
    929a:	2200      	movs	r2, #0
    929c:	701a      	strb	r2, [r3, #0]
			initBatteryManager(sensorInfos);
    929e:	f001 f955 	bl	a54c <initBatteryManager>
			err = gatt_discover_battery_service(centralConnections[cntBatterySubscriptions]);	
    92a2:	4b35      	ldr	r3, [pc, #212]	; (9378 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x108>)
    92a4:	781a      	ldrb	r2, [r3, #0]
    92a6:	4b35      	ldr	r3, [pc, #212]	; (937c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x10c>)
    92a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    92ac:	f001 f920 	bl	a4f0 <gatt_discover_battery_service>
			if (err == 0)
    92b0:	b9d8      	cbnz	r0, 92ea <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7a>
			{
				batterySubscriptionDone = true;
    92b2:	2301      	movs	r3, #1
    92b4:	702b      	strb	r3, [r5, #0]
	

	if (batterySubscriptionDone)
	{
		// get battery level every few minutes
		if (cntFirst == 2 || cntNbrReceived == 300)
    92b6:	4d32      	ldr	r5, [pc, #200]	; (9380 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x110>)
    92b8:	4f32      	ldr	r7, [pc, #200]	; (9384 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x114>)
    92ba:	882a      	ldrh	r2, [r5, #0]
    92bc:	883b      	ldrh	r3, [r7, #0]
    92be:	2a02      	cmp	r2, #2
    92c0:	d002      	beq.n	92c8 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x58>
    92c2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    92c6:	d115      	bne.n	92f4 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x84>
		{
			cntFirst++;
    92c8:	3201      	adds	r2, #1
			cntNbrReceived++;
    92ca:	3301      	adds	r3, #1
			askForBatteryLevel(TYPE_HEARTRATE);
    92cc:	2003      	movs	r0, #3
			cntFirst++;
    92ce:	802a      	strh	r2, [r5, #0]
			cntNbrReceived++;
    92d0:	803b      	strh	r3, [r7, #0]
			askForBatteryLevel(TYPE_HEARTRATE);
    92d2:	f001 fa8d 	bl	a7f0 <askForBatteryLevel>
		{
			cntFirst++;
			cntNbrReceived++;
		}	

		if (!data) {
    92d6:	bb84      	cbnz	r4, 933a <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xca>
			printk("[UNSUBSCRIBED]\n");
    92d8:	482b      	ldr	r0, [pc, #172]	; (9388 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x118>)
    92da:	f011 fbeb 	bl	1aab4 <printk>
			params->value_handle = 0U;
			return BT_GATT_ITER_STOP;
    92de:	4620      	mov	r0, r4
			params->value_handle = 0U;
    92e0:	f8a8 4008 	strh.w	r4, [r8, #8]
			printk("[NOTIFICATION] data %p length %u\n", data, length);
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    92e4:	b002      	add	sp, #8
    92e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (batterySubscriptionDone)
    92ea:	782b      	ldrb	r3, [r5, #0]
    92ec:	2b00      	cmp	r3, #0
    92ee:	d1e2      	bne.n	92b6 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x46>
	return BT_GATT_ITER_CONTINUE;
    92f0:	2001      	movs	r0, #1
    92f2:	e7f7      	b.n	92e4 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x74>
		else if (isValueReady(TYPE_HEARTRATE))
    92f4:	2003      	movs	r0, #3
    92f6:	f001 faa7 	bl	a848 <isValueReady>
    92fa:	b1b8      	cbz	r0, 932c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xbc>
			resetReadyValue(TYPE_HEARTRATE);
    92fc:	2003      	movs	r0, #3
    92fe:	f001 fab9 	bl	a874 <resetReadyValue>
			cntNbrReceived = 0;
    9302:	2300      	movs	r3, #0
    9304:	803b      	strh	r3, [r7, #0]
			cntFirst++;
    9306:	882b      	ldrh	r3, [r5, #0]
			deviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    9308:	2003      	movs	r0, #3
			cntFirst++;
    930a:	3301      	adds	r3, #1
    930c:	802b      	strh	r3, [r5, #0]
			deviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    930e:	f001 f95b 	bl	a5c8 <getBatteryLevel>
			data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    9312:	2204      	movs	r2, #4
			deviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    9314:	4b1d      	ldr	r3, [pc, #116]	; (938c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x11c>)
			batteryLevelToSend[2] = deviceManager::data.battValue_heartRate;
    9316:	f88d 0006 	strb.w	r0, [sp, #6]
			deviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    931a:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
			data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    931e:	4b1c      	ldr	r3, [pc, #112]	; (9390 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x120>)
    9320:	eb0d 0102 	add.w	r1, sp, r2
    9324:	6818      	ldr	r0, [r3, #0]
    9326:	f000 ff63 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
    932a:	e7d4      	b.n	92d6 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x66>
			cntFirst++;
    932c:	882b      	ldrh	r3, [r5, #0]
    932e:	3301      	adds	r3, #1
    9330:	802b      	strh	r3, [r5, #0]
			cntNbrReceived++;
    9332:	883b      	ldrh	r3, [r7, #0]
    9334:	3301      	adds	r3, #1
    9336:	803b      	strh	r3, [r7, #0]
    9338:	e7cd      	b.n	92d6 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x66>
		if (length == 2)
    933a:	2e02      	cmp	r6, #2
    933c:	d10f      	bne.n	935e <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xee>
				uint8_t hr_bpm = ((uint8_t *)data)[1];
    933e:	7861      	ldrb	r1, [r4, #1]
				deviceManager::data.heartRate = hr_bpm;
    9340:	4b12      	ldr	r3, [pc, #72]	; (938c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x11c>)
				printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    9342:	4814      	ldr	r0, [pc, #80]	; (9394 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x124>)
				deviceManager::data.heartRate = hr_bpm;
    9344:	f883 1020 	strb.w	r1, [r3, #32]
				dataToSend[1] = hr_bpm;
    9348:	f88d 1001 	strb.w	r1, [sp, #1]
				printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    934c:	f011 fbb2 	bl	1aab4 <printk>
				data_service_send(peripheralConn,dataToSend,sizeof(dataToSend));
    9350:	4b0f      	ldr	r3, [pc, #60]	; (9390 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x120>)
    9352:	4632      	mov	r2, r6
    9354:	4669      	mov	r1, sp
    9356:	6818      	ldr	r0, [r3, #0]
    9358:	f000 ff4a 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
    935c:	e7c8      	b.n	92f0 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x80>
			printk("[NOTIFICATION] data %p length %u\n", data, length);
    935e:	4632      	mov	r2, r6
    9360:	4621      	mov	r1, r4
    9362:	480d      	ldr	r0, [pc, #52]	; (9398 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x128>)
    9364:	f011 fba6 	bl	1aab4 <printk>
    9368:	e7c2      	b.n	92f0 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x80>
    936a:	bf00      	nop
    936c:	2000f29b 	.word	0x2000f29b
    9370:	2000f2a2 	.word	0x2000f2a2
    9374:	20008569 	.word	0x20008569
    9378:	2000f2a3 	.word	0x2000f2a3
    937c:	2000a674 	.word	0x2000a674
    9380:	2000f1a6 	.word	0x2000f1a6
    9384:	2000f1a4 	.word	0x2000f1a4
    9388:	0001f620 	.word	0x0001f620
    938c:	200087d8 	.word	0x200087d8
    9390:	2000a5f8 	.word	0x2000a5f8
    9394:	0001f630 	.word	0x0001f630
    9398:	0001f652 	.word	0x0001f652

0000939c <_ZN13deviceManager13buttonChangedEjj>:
   	if (has_changed & USER_BUTTON) {
    939c:	07cb      	lsls	r3, r1, #31
{
    939e:	b510      	push	{r4, lr}
   	if (has_changed & USER_BUTTON) {
    93a0:	d507      	bpl.n	93b2 <_ZN13deviceManager13buttonChangedEjj+0x16>
		bt_lbs_send_button_state(button_state);
    93a2:	1e04      	subs	r4, r0, #0
    93a4:	bf18      	it	ne
    93a6:	2401      	movne	r4, #1
    93a8:	4620      	mov	r0, r4
    93aa:	f004 f9e5 	bl	d778 <bt_lbs_send_button_state>
		app_button_state = button_state ? true : false;
    93ae:	4b01      	ldr	r3, [pc, #4]	; (93b4 <_ZN13deviceManager13buttonChangedEjj+0x18>)
    93b0:	701c      	strb	r4, [r3, #0]
}
    93b2:	bd10      	pop	{r4, pc}
    93b4:	2000f29e 	.word	0x2000f29e

000093b8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
{
    93b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    93ba:	4611      	mov	r1, r2
	if (subscriptionDone)
    93bc:	4a79      	ldr	r2, [pc, #484]	; (95a4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1ec>)
    93be:	7812      	ldrb	r2, [r2, #0]
    93c0:	2a00      	cmp	r2, #0
    93c2:	f000 80eb 	beq.w	959c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1e4>
		if (!batterySubscriptionDone)
    93c6:	4a78      	ldr	r2, [pc, #480]	; (95a8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1f0>)
    93c8:	7810      	ldrb	r0, [r2, #0]
    93ca:	2800      	cmp	r0, #0
    93cc:	d12e      	bne.n	942c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x74>
			if (cntBatterySubscriptions == nbrConnectionsCentral)
    93ce:	4c77      	ldr	r4, [pc, #476]	; (95ac <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1f4>)
    93d0:	4b77      	ldr	r3, [pc, #476]	; (95b0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1f8>)
    93d2:	7821      	ldrb	r1, [r4, #0]
    93d4:	781b      	ldrb	r3, [r3, #0]
    93d6:	4299      	cmp	r1, r3
    93d8:	d104      	bne.n	93e4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x2c>
				batterySubscriptionDone = true;
    93da:	2301      	movs	r3, #1
    93dc:	7013      	strb	r3, [r2, #0]
}
    93de:	2001      	movs	r0, #1
    93e0:	b002      	add	sp, #8
    93e2:	bd70      	pop	{r4, r5, r6, pc}
				if (isFree())
    93e4:	f001 f9fe 	bl	a7e4 <isFree>
    93e8:	2800      	cmp	r0, #0
    93ea:	d0f8      	beq.n	93de <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x26>
					if (cntForDiscover == 0 || cntForDiscover == 7 || cntForDiscover == 14) 
    93ec:	4d71      	ldr	r5, [pc, #452]	; (95b4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1fc>)
    93ee:	782a      	ldrb	r2, [r5, #0]
    93f0:	2a0e      	cmp	r2, #14
    93f2:	d817      	bhi.n	9424 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x6c>
    93f4:	f244 0381 	movw	r3, #16513	; 0x4081
    93f8:	40d3      	lsrs	r3, r2
    93fa:	07db      	lsls	r3, r3, #31
    93fc:	d512      	bpl.n	9424 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x6c>
						initBatteryManager(sensorInfos);
    93fe:	4b6e      	ldr	r3, [pc, #440]	; (95b8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x200>)
    9400:	7818      	ldrb	r0, [r3, #0]
    9402:	f001 f8a3 	bl	a54c <initBatteryManager>
						err = gatt_discover_battery_service(centralConnections[cntBatterySubscriptions]);	
    9406:	7822      	ldrb	r2, [r4, #0]
    9408:	4b6c      	ldr	r3, [pc, #432]	; (95bc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x204>)
    940a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    940e:	f001 f86f 	bl	a4f0 <gatt_discover_battery_service>
    9412:	4606      	mov	r6, r0
						printk("Nbr connections %d\n", cntBatterySubscriptions);
    9414:	7821      	ldrb	r1, [r4, #0]
    9416:	486a      	ldr	r0, [pc, #424]	; (95c0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x208>)
    9418:	f011 fb4c 	bl	1aab4 <printk>
						if (err == 0)
    941c:	b916      	cbnz	r6, 9424 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x6c>
							cntBatterySubscriptions++;
    941e:	7823      	ldrb	r3, [r4, #0]
    9420:	3301      	adds	r3, #1
    9422:	7023      	strb	r3, [r4, #0]
					cntForDiscover++;
    9424:	782b      	ldrb	r3, [r5, #0]
    9426:	3301      	adds	r3, #1
    9428:	702b      	strb	r3, [r5, #0]
    942a:	e7d8      	b.n	93de <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x26>
			if (length > 0)
    942c:	2b00      	cmp	r3, #0
    942e:	d0d6      	beq.n	93de <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x26>
				deviceManager::data.saveData(data);
    9430:	4d64      	ldr	r5, [pc, #400]	; (95c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20c>)
    9432:	4628      	mov	r0, r5
    9434:	f000 fe56 	bl	a0e4 <_ZN7dataCSC8saveDataEPKv>
				if (getDiameter() != 0 && diameterSet == false)
    9438:	f000 ff04 	bl	a244 <_Z11getDiameterv>
    943c:	2200      	movs	r2, #0
    943e:	2300      	movs	r3, #0
    9440:	f7ff fb22 	bl	8a88 <__aeabi_dcmpeq>
    9444:	2800      	cmp	r0, #0
    9446:	d139      	bne.n	94bc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x104>
    9448:	4b5f      	ldr	r3, [pc, #380]	; (95c8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x210>)
    944a:	781a      	ldrb	r2, [r3, #0]
    944c:	2a00      	cmp	r2, #0
    944e:	d135      	bne.n	94bc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x104>
					diameterSet = true;
    9450:	2201      	movs	r2, #1
    9452:	701a      	strb	r2, [r3, #0]
					deviceManager::data.wheelDiameter = getDiameter();
    9454:	f000 fef6 	bl	a244 <_Z11getDiameterv>
    9458:	e9c5 0106 	strd	r0, r1, [r5, #24]
				if (deviceManager::data.type == TYPE_CSC_SPEED)
    945c:	7c2c      	ldrb	r4, [r5, #16]
    945e:	2c01      	cmp	r4, #1
    9460:	d15a      	bne.n	9518 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x160>
					if (diameterSet)
    9462:	4b59      	ldr	r3, [pc, #356]	; (95c8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x210>)
    9464:	781b      	ldrb	r3, [r3, #0]
    9466:	b1c3      	cbz	r3, 949a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe2>
						uint16_t speed = deviceManager::data.calcSpeed();
    9468:	4856      	ldr	r0, [pc, #344]	; (95c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20c>)
    946a:	f7ff fced 	bl	8e48 <_ZN7dataCSC9calcSpeedEv>
						if (speed > 0)
    946e:	b1a0      	cbz	r0, 949a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe2>
							dataToSend[1] = (uint8_t) (speed/100);	
    9470:	2164      	movs	r1, #100	; 0x64
    9472:	fbb0 f1f1 	udiv	r1, r0, r1
							dataToSend[0] = TYPE_CSC_SPEED;
    9476:	f88d 4000 	strb.w	r4, [sp]
							if (peripheralConn != nullptr)
    947a:	4c54      	ldr	r4, [pc, #336]	; (95cc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x214>)
							dataToSend[1] = (uint8_t) (speed/100);	
    947c:	b289      	uxth	r1, r1
							if (peripheralConn != nullptr)
    947e:	6823      	ldr	r3, [r4, #0]
							dataToSend[1] = (uint8_t) (speed/100);	
    9480:	f88d 1001 	strb.w	r1, [sp, #1]
							val_after_comma = (uint8_t) (speed);
    9484:	f88d 0002 	strb.w	r0, [sp, #2]
							if (peripheralConn != nullptr)
    9488:	b13b      	cbz	r3, 949a <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe2>
								printk("Speed: %d\n",speed/100);
    948a:	4851      	ldr	r0, [pc, #324]	; (95d0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x218>)
    948c:	f011 fb12 	bl	1aab4 <printk>
								data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    9490:	2203      	movs	r2, #3
    9492:	4669      	mov	r1, sp
    9494:	6820      	ldr	r0, [r4, #0]
    9496:	f000 feab 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
					if (cntFirstSpeed == 1 || cntNbrReceived1 == 50)
    949a:	4c4e      	ldr	r4, [pc, #312]	; (95d4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x21c>)
    949c:	4e4e      	ldr	r6, [pc, #312]	; (95d8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x220>)
    949e:	7823      	ldrb	r3, [r4, #0]
    94a0:	2b01      	cmp	r3, #1
    94a2:	d002      	beq.n	94aa <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xf2>
    94a4:	7833      	ldrb	r3, [r6, #0]
    94a6:	2b32      	cmp	r3, #50	; 0x32
    94a8:	d117      	bne.n	94da <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x122>
						cntNbrReceived1 = 0;
    94aa:	2300      	movs	r3, #0
						askForBatteryLevel(TYPE_CSC_SPEED);
    94ac:	2001      	movs	r0, #1
						cntNbrReceived1 = 0;
    94ae:	7033      	strb	r3, [r6, #0]
						askForBatteryLevel(TYPE_CSC_SPEED);
    94b0:	f001 f99e 	bl	a7f0 <askForBatteryLevel>
						cntFirstCadence++;
    94b4:	7823      	ldrb	r3, [r4, #0]
    94b6:	3301      	adds	r3, #1
    94b8:	7023      	strb	r3, [r4, #0]
    94ba:	e790      	b.n	93de <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x26>
				else if (getDiameter() == 0 && diameterSet == true)
    94bc:	f000 fec2 	bl	a244 <_Z11getDiameterv>
    94c0:	2200      	movs	r2, #0
    94c2:	2300      	movs	r3, #0
    94c4:	f7ff fae0 	bl	8a88 <__aeabi_dcmpeq>
    94c8:	2800      	cmp	r0, #0
    94ca:	d0c7      	beq.n	945c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xa4>
    94cc:	4b3e      	ldr	r3, [pc, #248]	; (95c8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x210>)
    94ce:	781a      	ldrb	r2, [r3, #0]
    94d0:	2a00      	cmp	r2, #0
    94d2:	d0c3      	beq.n	945c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xa4>
					diameterSet = false;
    94d4:	2200      	movs	r2, #0
    94d6:	701a      	strb	r2, [r3, #0]
    94d8:	e7c0      	b.n	945c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xa4>
					else if (isValueReady(TYPE_CSC_SPEED))
    94da:	2001      	movs	r0, #1
    94dc:	f001 f9b4 	bl	a848 <isValueReady>
    94e0:	b1b0      	cbz	r0, 9510 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x158>
						resetReadyValue(TYPE_CSC_SPEED);
    94e2:	2001      	movs	r0, #1
    94e4:	f001 f9c6 	bl	a874 <resetReadyValue>
						deviceManager::data.battValue_speed = getBatteryLevel(TYPE_CSC_SPEED);
    94e8:	2001      	movs	r0, #1
    94ea:	f001 f86d 	bl	a5c8 <getBatteryLevel>
						batteryLevelToSend[0] = TYPE_BATTERY;
    94ee:	2204      	movs	r2, #4
						batteryLevelToSend[1] = TYPE_CSC_SPEED;
    94f0:	2301      	movs	r3, #1
						deviceManager::data.battValue_speed = getBatteryLevel(TYPE_CSC_SPEED);
    94f2:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
						batteryLevelToSend[0] = TYPE_BATTERY;
    94f6:	f88d 2004 	strb.w	r2, [sp, #4]
						batteryLevelToSend[1] = TYPE_CSC_CADENCE;	
    94fa:	f88d 3005 	strb.w	r3, [sp, #5]
						data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));			
    94fe:	4b33      	ldr	r3, [pc, #204]	; (95cc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x214>)
						batteryLevelToSend[2] = deviceManager::data.battValue_cadence;
    9500:	f88d 0006 	strb.w	r0, [sp, #6]
						data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));			
    9504:	eb0d 0102 	add.w	r1, sp, r2
    9508:	6818      	ldr	r0, [r3, #0]
    950a:	f000 fe71 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
    950e:	e766      	b.n	93de <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x26>
						cntNbrReceived1++;
    9510:	7833      	ldrb	r3, [r6, #0]
    9512:	3301      	adds	r3, #1
						cntNbrReceived2 = 0;
    9514:	7033      	strb	r3, [r6, #0]
    9516:	e7cd      	b.n	94b4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xfc>
				else if (deviceManager::data.type == TYPE_CSC_CADENCE)
    9518:	2c02      	cmp	r4, #2
    951a:	f47f af60 	bne.w	93de <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x26>
					uint16_t rpm = deviceManager::data.calcRPM();
    951e:	4829      	ldr	r0, [pc, #164]	; (95c4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x20c>)
    9520:	f000 fe02 	bl	a128 <_ZN7dataCSC7calcRPMEv>
					if (rpm > 0 && rpm < 500)
    9524:	1e43      	subs	r3, r0, #1
    9526:	b29b      	uxth	r3, r3
    9528:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
					uint16_t rpm = deviceManager::data.calcRPM();
    952c:	4601      	mov	r1, r0
					if (rpm > 0 && rpm < 500)
    952e:	d811      	bhi.n	9554 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x19c>
						dataToSend[0] = TYPE_CSC_CADENCE;	
    9530:	f88d 4000 	strb.w	r4, [sp]
						if (peripheralConn != nullptr)
    9534:	4c25      	ldr	r4, [pc, #148]	; (95cc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x214>)
						dataToSend[2] = (uint8_t) (rpm >> 8);	
    9536:	0a03      	lsrs	r3, r0, #8
    9538:	f88d 3002 	strb.w	r3, [sp, #2]
						if (peripheralConn != nullptr)
    953c:	6823      	ldr	r3, [r4, #0]
						dataToSend[1] = (uint8_t) rpm;
    953e:	f88d 0001 	strb.w	r0, [sp, #1]
						if (peripheralConn != nullptr)
    9542:	b13b      	cbz	r3, 9554 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x19c>
							printk("Cadence rpm: %d\n",rpm);
    9544:	4825      	ldr	r0, [pc, #148]	; (95dc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x224>)
    9546:	f011 fab5 	bl	1aab4 <printk>
							data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    954a:	2203      	movs	r2, #3
    954c:	4669      	mov	r1, sp
    954e:	6820      	ldr	r0, [r4, #0]
    9550:	f000 fe4e 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
					if (cntFirstCadence == 5 || cntNbrReceived2 == 100)
    9554:	4c22      	ldr	r4, [pc, #136]	; (95e0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x228>)
						askForBatteryLevel(TYPE_CSC_CADENCE);
    9556:	2002      	movs	r0, #2
					if (cntFirstCadence == 5 || cntNbrReceived2 == 100)
    9558:	7823      	ldrb	r3, [r4, #0]
    955a:	4e22      	ldr	r6, [pc, #136]	; (95e4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x22c>)
    955c:	2b05      	cmp	r3, #5
    955e:	d002      	beq.n	9566 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1ae>
    9560:	7833      	ldrb	r3, [r6, #0]
    9562:	2b64      	cmp	r3, #100	; 0x64
    9564:	d103      	bne.n	956e <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1b6>
						askForBatteryLevel(TYPE_CSC_CADENCE);
    9566:	f001 f943 	bl	a7f0 <askForBatteryLevel>
						cntNbrReceived2 = 0;
    956a:	2300      	movs	r3, #0
    956c:	e7d2      	b.n	9514 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x15c>
					else if (isValueReady(TYPE_CSC_CADENCE))
    956e:	f001 f96b 	bl	a848 <isValueReady>
    9572:	b160      	cbz	r0, 958e <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1d6>
						resetReadyValue(TYPE_CSC_CADENCE);
    9574:	2002      	movs	r0, #2
    9576:	f001 f97d 	bl	a874 <resetReadyValue>
						deviceManager::data.battValue_cadence = getBatteryLevel(TYPE_CSC_CADENCE);
    957a:	2002      	movs	r0, #2
    957c:	f001 f824 	bl	a5c8 <getBatteryLevel>
						batteryLevelToSend[0] = TYPE_BATTERY;
    9580:	2204      	movs	r2, #4
						batteryLevelToSend[1] = TYPE_CSC_CADENCE;	
    9582:	2302      	movs	r3, #2
						deviceManager::data.battValue_cadence = getBatteryLevel(TYPE_CSC_CADENCE);
    9584:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
						batteryLevelToSend[0] = TYPE_BATTERY;
    9588:	f88d 2004 	strb.w	r2, [sp, #4]
						batteryLevelToSend[1] = TYPE_CSC_CADENCE;	
    958c:	e7b5      	b.n	94fa <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x142>
						cntFirstCadence++;
    958e:	7823      	ldrb	r3, [r4, #0]
    9590:	3301      	adds	r3, #1
    9592:	7023      	strb	r3, [r4, #0]
						cntNbrReceived2++;
    9594:	7833      	ldrb	r3, [r6, #0]
    9596:	3301      	adds	r3, #1
    9598:	7033      	strb	r3, [r6, #0]
    959a:	e720      	b.n	93de <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x26>
		cntForDiscover = 0;
    959c:	4b05      	ldr	r3, [pc, #20]	; (95b4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1fc>)
    959e:	701a      	strb	r2, [r3, #0]
    95a0:	e71d      	b.n	93de <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x26>
    95a2:	bf00      	nop
    95a4:	2000f29f 	.word	0x2000f29f
    95a8:	2000f2a2 	.word	0x2000f2a2
    95ac:	2000f2a3 	.word	0x2000f2a3
    95b0:	2000f2a1 	.word	0x2000f2a1
    95b4:	2000f2d9 	.word	0x2000f2d9
    95b8:	2000f29b 	.word	0x2000f29b
    95bc:	2000a674 	.word	0x2000a674
    95c0:	0001f674 	.word	0x0001f674
    95c4:	200087d8 	.word	0x200087d8
    95c8:	2000f29a 	.word	0x2000f29a
    95cc:	2000a5f8 	.word	0x2000a5f8
    95d0:	0001f688 	.word	0x0001f688
    95d4:	2000f2d8 	.word	0x2000f2d8
    95d8:	2000f2db 	.word	0x2000f2db
    95dc:	0001f693 	.word	0x0001f693
    95e0:	2000f2da 	.word	0x2000f2da
    95e4:	2000f2dc 	.word	0x2000f2dc

000095e8 <bt_addr_le_to_str.isra.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    95e8:	b5f0      	push	{r4, r5, r6, r7, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    95ea:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    95ec:	b08b      	sub	sp, #44	; 0x2c
    95ee:	4604      	mov	r4, r0
    95f0:	460e      	mov	r6, r1
    95f2:	4617      	mov	r7, r2
    95f4:	ad07      	add	r5, sp, #28
    95f6:	2b03      	cmp	r3, #3
    95f8:	d820      	bhi.n	963c <bt_addr_le_to_str.isra.0+0x54>
    95fa:	e8df f003 	tbb	[pc, r3]
    95fe:	1902      	.short	0x1902
    9600:	1d1b      	.short	0x1d1b
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    9602:	4911      	ldr	r1, [pc, #68]	; (9648 <bt_addr_le_to_str.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    9604:	4628      	mov	r0, r5
    9606:	f012 fc3f 	bl	1be88 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    960a:	7863      	ldrb	r3, [r4, #1]
    960c:	4639      	mov	r1, r7
    960e:	9304      	str	r3, [sp, #16]
    9610:	78a3      	ldrb	r3, [r4, #2]
    9612:	4630      	mov	r0, r6
    9614:	9303      	str	r3, [sp, #12]
    9616:	78e3      	ldrb	r3, [r4, #3]
    9618:	4a0c      	ldr	r2, [pc, #48]	; (964c <bt_addr_le_to_str.isra.0+0x64>)
    961a:	9302      	str	r3, [sp, #8]
    961c:	7923      	ldrb	r3, [r4, #4]
    961e:	9505      	str	r5, [sp, #20]
    9620:	9301      	str	r3, [sp, #4]
    9622:	7963      	ldrb	r3, [r4, #5]
    9624:	9300      	str	r3, [sp, #0]
    9626:	79a3      	ldrb	r3, [r4, #6]
    9628:	f011 fa51 	bl	1aace <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    962c:	b00b      	add	sp, #44	; 0x2c
    962e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    9630:	4907      	ldr	r1, [pc, #28]	; (9650 <bt_addr_le_to_str.isra.0+0x68>)
    9632:	e7e7      	b.n	9604 <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "public-id");
    9634:	4907      	ldr	r1, [pc, #28]	; (9654 <bt_addr_le_to_str.isra.0+0x6c>)
    9636:	e7e5      	b.n	9604 <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "random-id");
    9638:	4907      	ldr	r1, [pc, #28]	; (9658 <bt_addr_le_to_str.isra.0+0x70>)
    963a:	e7e3      	b.n	9604 <bt_addr_le_to_str.isra.0+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    963c:	210a      	movs	r1, #10
    963e:	4628      	mov	r0, r5
    9640:	4a06      	ldr	r2, [pc, #24]	; (965c <bt_addr_le_to_str.isra.0+0x74>)
    9642:	f011 fa44 	bl	1aace <snprintk>
		break;
    9646:	e7e0      	b.n	960a <bt_addr_le_to_str.isra.0+0x22>
    9648:	0001f6a4 	.word	0x0001f6a4
    964c:	0001f6cd 	.word	0x0001f6cd
    9650:	0001f6ab 	.word	0x0001f6ab
    9654:	0001f6b2 	.word	0x0001f6b2
    9658:	0001f6bc 	.word	0x0001f6bc
    965c:	0001f6c6 	.word	0x0001f6c6

00009660 <_ZN13deviceManagerC1Ev>:
deviceManager::deviceManager()
    9660:	b510      	push	{r4, lr}
    9662:	4604      	mov	r4, r0
    9664:	2214      	movs	r2, #20
    9666:	2100      	movs	r1, #0
    9668:	f012 fc93 	bl	1bf92 <memset>
    966c:	4b0e      	ldr	r3, [pc, #56]	; (96a8 <_ZN13deviceManagerC1Ev+0x48>)
    966e:	4a0f      	ldr	r2, [pc, #60]	; (96ac <_ZN13deviceManagerC1Ev+0x4c>)
    9670:	6023      	str	r3, [r4, #0]
    9672:	4b0f      	ldr	r3, [pc, #60]	; (96b0 <_ZN13deviceManagerC1Ev+0x50>)
    9674:	e892 0003 	ldmia.w	r2, {r0, r1}
    9678:	6063      	str	r3, [r4, #4]
    967a:	4b0e      	ldr	r3, [pc, #56]	; (96b4 <_ZN13deviceManagerC1Ev+0x54>)
    967c:	2224      	movs	r2, #36	; 0x24
    967e:	60a3      	str	r3, [r4, #8]
    9680:	4b0d      	ldr	r3, [pc, #52]	; (96b8 <_ZN13deviceManagerC1Ev+0x58>)
    9682:	60e3      	str	r3, [r4, #12]
    9684:	f104 0314 	add.w	r3, r4, #20
    9688:	e883 0003 	stmia.w	r3, {r0, r1}
    968c:	2100      	movs	r1, #0
    968e:	f104 001c 	add.w	r0, r4, #28
    9692:	f012 fc7e 	bl	1bf92 <memset>
		centralConnections[i] = nullptr;
    9696:	2200      	movs	r2, #0
    9698:	4b08      	ldr	r3, [pc, #32]	; (96bc <_ZN13deviceManagerC1Ev+0x5c>)
}
    969a:	4620      	mov	r0, r4
		centralConnections[i] = nullptr;
    969c:	e9c3 2200 	strd	r2, r2, [r3]
    96a0:	e9c3 2202 	strd	r2, r2, [r3, #8]
    96a4:	611a      	str	r2, [r3, #16]
}
    96a6:	bd10      	pop	{r4, pc}
    96a8:	00009ca1 	.word	0x00009ca1
    96ac:	0001e9a0 	.word	0x0001e9a0
    96b0:	00009f19 	.word	0x00009f19
    96b4:	0001a945 	.word	0x0001a945
    96b8:	0001a949 	.word	0x0001a949
    96bc:	2000a674 	.word	0x2000a674

000096c0 <_ZN13deviceManager9getDeviceEv>:
    if(isCentral && isPeripheral)
    96c0:	4a07      	ldr	r2, [pc, #28]	; (96e0 <_ZN13deviceManager9getDeviceEv+0x20>)
    96c2:	4b08      	ldr	r3, [pc, #32]	; (96e4 <_ZN13deviceManager9getDeviceEv+0x24>)
    96c4:	7812      	ldrb	r2, [r2, #0]
    96c6:	781b      	ldrb	r3, [r3, #0]
    96c8:	b122      	cbz	r2, 96d4 <_ZN13deviceManager9getDeviceEv+0x14>
        return 1;
    96ca:	2b00      	cmp	r3, #0
    96cc:	bf14      	ite	ne
    96ce:	2003      	movne	r0, #3
    96d0:	2001      	moveq	r0, #1
    96d2:	4770      	bx	lr
        return 0;
    96d4:	2b00      	cmp	r3, #0
    96d6:	bf14      	ite	ne
    96d8:	2002      	movne	r0, #2
    96da:	2000      	moveq	r0, #0
}
    96dc:	4770      	bx	lr
    96de:	bf00      	nop
    96e0:	2000f2d7 	.word	0x2000f2d7
    96e4:	2000f29c 	.word	0x2000f29c

000096e8 <_ZN13deviceManager10initButtonEv>:
{
    96e8:	b510      	push	{r4, lr}
    err = dk_buttons_init(buttonChanged);
    96ea:	4806      	ldr	r0, [pc, #24]	; (9704 <_ZN13deviceManager10initButtonEv+0x1c>)
    96ec:	f00d fa5a 	bl	16ba4 <dk_buttons_init>
	if (err) {
    96f0:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    96f4:	d003      	beq.n	96fe <_ZN13deviceManager10initButtonEv+0x16>
		printk("Cannot init buttons (err: %d)\n", err);
    96f6:	4621      	mov	r1, r4
    96f8:	4803      	ldr	r0, [pc, #12]	; (9708 <_ZN13deviceManager10initButtonEv+0x20>)
    96fa:	f011 f9db 	bl	1aab4 <printk>
}
    96fe:	4620      	mov	r0, r4
    9700:	bd10      	pop	{r4, pc}
    9702:	bf00      	nop
    9704:	0000939d 	.word	0x0000939d
    9708:	0001f6f0 	.word	0x0001f6f0

0000970c <_ZN13deviceManager16startAdvertisingEv>:
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    970c:	2301      	movs	r3, #1
{
    970e:	b507      	push	{r0, r1, r2, lr}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    9710:	490c      	ldr	r1, [pc, #48]	; (9744 <_ZN13deviceManager16startAdvertisingEv+0x38>)
    9712:	9300      	str	r3, [sp, #0]
    9714:	2202      	movs	r2, #2
    9716:	4b0c      	ldr	r3, [pc, #48]	; (9748 <_ZN13deviceManager16startAdvertisingEv+0x3c>)
    9718:	480c      	ldr	r0, [pc, #48]	; (974c <_ZN13deviceManager16startAdvertisingEv+0x40>)
    971a:	f007 fa8f 	bl	10c3c <bt_le_adv_start>
	if (err) {
    971e:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9722:	d005      	beq.n	9730 <_ZN13deviceManager16startAdvertisingEv+0x24>
		printk("Advertising failed to start (err %d)\n", err);
    9724:	480a      	ldr	r0, [pc, #40]	; (9750 <_ZN13deviceManager16startAdvertisingEv+0x44>)
}
    9726:	b003      	add	sp, #12
    9728:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Advertising failed to start (err %d)\n", err);
    972c:	f011 b9c2 	b.w	1aab4 <printk>
	printk("Advertising successfully started\n");
    9730:	4808      	ldr	r0, [pc, #32]	; (9754 <_ZN13deviceManager16startAdvertisingEv+0x48>)
    9732:	f011 f9bf 	bl	1aab4 <printk>
	printk("Waiting for connection...\n");
    9736:	4808      	ldr	r0, [pc, #32]	; (9758 <_ZN13deviceManager16startAdvertisingEv+0x4c>)
}
    9738:	b003      	add	sp, #12
    973a:	f85d eb04 	ldr.w	lr, [sp], #4
	printk("Waiting for connection...\n");
    973e:	f011 b9b9 	b.w	1aab4 <printk>
    9742:	bf00      	nop
    9744:	0001eab8 	.word	0x0001eab8
    9748:	0001eac8 	.word	0x0001eac8
    974c:	0001ea38 	.word	0x0001ea38
    9750:	0001f70f 	.word	0x0001f70f
    9754:	0001f735 	.word	0x0001f735
    9758:	0001f757 	.word	0x0001f757

0000975c <_ZN13deviceManager14initPeripheralEv>:
{
    975c:	b510      	push	{r4, lr}
    975e:	4604      	mov	r4, r0
    if(getDevice() == 3 || getDevice() == 2){
    9760:	f7ff ffae 	bl	96c0 <_ZN13deviceManager9getDeviceEv>
    9764:	1e83      	subs	r3, r0, #2
    9766:	b2db      	uxtb	r3, r3
    9768:	2b01      	cmp	r3, #1
    976a:	d830      	bhi.n	97ce <_ZN13deviceManager14initPeripheralEv+0x72>
        err = dk_leds_init();
    976c:	f00d f9b4 	bl	16ad8 <dk_leds_init>
        if (err) {
    9770:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9774:	d004      	beq.n	9780 <_ZN13deviceManager14initPeripheralEv+0x24>
            printk("LEDs init failed (err %d)\n", err);
    9776:	4816      	ldr	r0, [pc, #88]	; (97d0 <_ZN13deviceManager14initPeripheralEv+0x74>)
}
    9778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Button init failed (err %d)\n", err);
    977c:	f011 b99a 	b.w	1aab4 <printk>
        err = initButton();
    9780:	f7ff ffb2 	bl	96e8 <_ZN13deviceManager10initButtonEv>
    9784:	4601      	mov	r1, r0
        if (err) {
    9786:	b108      	cbz	r0, 978c <_ZN13deviceManager14initPeripheralEv+0x30>
            printk("Button init failed (err %d)\n", err);
    9788:	4812      	ldr	r0, [pc, #72]	; (97d4 <_ZN13deviceManager14initPeripheralEv+0x78>)
    978a:	e7f5      	b.n	9778 <_ZN13deviceManager14initPeripheralEv+0x1c>
        err = bt_enable(NULL);
    978c:	f006 ffbc 	bl	10708 <bt_enable>
        if (err) {
    9790:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9794:	d001      	beq.n	979a <_ZN13deviceManager14initPeripheralEv+0x3e>
            printk("Bluetooth init failed (err %d)\n", err);
    9796:	4810      	ldr	r0, [pc, #64]	; (97d8 <_ZN13deviceManager14initPeripheralEv+0x7c>)
    9798:	e7ee      	b.n	9778 <_ZN13deviceManager14initPeripheralEv+0x1c>
        printk("Bluetooth initialized\n");
    979a:	4810      	ldr	r0, [pc, #64]	; (97dc <_ZN13deviceManager14initPeripheralEv+0x80>)
    979c:	f011 f98a 	bl	1aab4 <printk>
		bt_conn_cb_register(&conn_callbacks);
    97a0:	4620      	mov	r0, r4
    97a2:	f007 fe0f 	bl	113c4 <bt_conn_cb_register>
            settings_load();
    97a6:	f011 fc7a 	bl	1b09e <settings_load>
        err = bt_lbs_init(&lbs_callbacs);
    97aa:	f104 0014 	add.w	r0, r4, #20
    97ae:	f003 ffd9 	bl	d764 <bt_lbs_init>
        if (err) {
    97b2:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    97b6:	d001      	beq.n	97bc <_ZN13deviceManager14initPeripheralEv+0x60>
			printk("Failed to init LBS (err:%d)\n", err);
    97b8:	4809      	ldr	r0, [pc, #36]	; (97e0 <_ZN13deviceManager14initPeripheralEv+0x84>)
    97ba:	e7dd      	b.n	9778 <_ZN13deviceManager14initPeripheralEv+0x1c>
		err = data_service_init();
    97bc:	f000 fd06 	bl	a1cc <_Z17data_service_initv>
		if (err) 
    97c0:	4601      	mov	r1, r0
    97c2:	2800      	cmp	r0, #0
    97c4:	d1f8      	bne.n	97b8 <_ZN13deviceManager14initPeripheralEv+0x5c>
}
    97c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startAdvertising();
    97ca:	f7ff bf9f 	b.w	970c <_ZN13deviceManager16startAdvertisingEv>
}
    97ce:	bd10      	pop	{r4, pc}
    97d0:	0001f772 	.word	0x0001f772
    97d4:	0001f78d 	.word	0x0001f78d
    97d8:	0001f7aa 	.word	0x0001f7aa
    97dc:	0001f7ca 	.word	0x0001f7ca
    97e0:	0001f7e1 	.word	0x0001f7e1

000097e4 <_ZN13deviceManager9startScanEv>:
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    97e4:	2001      	movs	r0, #1
{
    97e6:	b508      	push	{r3, lr}
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    97e8:	f003 fd5a 	bl	d2a0 <bt_scan_start>
	if (err)
    97ec:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    97f0:	d002      	beq.n	97f8 <_ZN13deviceManager9startScanEv+0x14>
		printk("Scanning failed to start, err %d\n", err);
    97f2:	4804      	ldr	r0, [pc, #16]	; (9804 <_ZN13deviceManager9startScanEv+0x20>)
    97f4:	f011 f95e 	bl	1aab4 <printk>
}
    97f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Scanning...\n");
    97fc:	4802      	ldr	r0, [pc, #8]	; (9808 <_ZN13deviceManager9startScanEv+0x24>)
    97fe:	f011 b959 	b.w	1aab4 <printk>
    9802:	bf00      	nop
    9804:	0001f7fe 	.word	0x0001f7fe
    9808:	0001f820 	.word	0x0001f820

0000980c <_ZN13deviceManager8initScanEv>:
{
    980c:	b530      	push	{r4, r5, lr}
    980e:	b089      	sub	sp, #36	; 0x24
	sensorInfos = getSensorInfos();
    9810:	f000 fd4e 	bl	a2b0 <_Z14getSensorInfosv>
    9814:	4d35      	ldr	r5, [pc, #212]	; (98ec <_ZN13deviceManager8initScanEv+0xe0>)
	struct bt_le_scan_param scanParam = {
    9816:	ab03      	add	r3, sp, #12
    9818:	2214      	movs	r2, #20
    981a:	2100      	movs	r1, #0
	sensorInfos = getSensorInfos();
    981c:	7028      	strb	r0, [r5, #0]
    981e:	4604      	mov	r4, r0
	struct bt_le_scan_param scanParam = {
    9820:	4618      	mov	r0, r3
    9822:	f012 fbb6 	bl	1bf92 <memset>
    9826:	2201      	movs	r2, #1
    9828:	f88d 200c 	strb.w	r2, [sp, #12]
    982c:	9204      	str	r2, [sp, #16]
    982e:	4a30      	ldr	r2, [pc, #192]	; (98f0 <_ZN13deviceManager8initScanEv+0xe4>)
	struct bt_scan_init_param scanInit = {
    9830:	4930      	ldr	r1, [pc, #192]	; (98f4 <_ZN13deviceManager8initScanEv+0xe8>)
	struct bt_le_scan_param scanParam = {
    9832:	9205      	str	r2, [sp, #20]
	struct bt_scan_init_param scanInit = {
    9834:	2200      	movs	r2, #0
    9836:	9102      	str	r1, [sp, #8]
    9838:	9201      	str	r2, [sp, #4]
	};
    983a:	9000      	str	r0, [sp, #0]
	if (sensorInfos != 0)
    983c:	2c00      	cmp	r4, #0
    983e:	d050      	beq.n	98e2 <_ZN13deviceManager8initScanEv+0xd6>
		if (once)
    9840:	4b2d      	ldr	r3, [pc, #180]	; (98f8 <_ZN13deviceManager8initScanEv+0xec>)
    9842:	7819      	ldrb	r1, [r3, #0]
    9844:	b141      	cbz	r1, 9858 <_ZN13deviceManager8initScanEv+0x4c>
			once = false;
    9846:	701a      	strb	r2, [r3, #0]
			bt_le_scan_stop();
    9848:	f007 fbfa 	bl	11040 <bt_le_scan_stop>
			bt_scan_init(&scanInit);
    984c:	4668      	mov	r0, sp
    984e:	f003 fcf5 	bl	d23c <bt_scan_init>
			bt_scan_cb_register(&scan_cb);			
    9852:	482a      	ldr	r0, [pc, #168]	; (98fc <_ZN13deviceManager8initScanEv+0xf0>)
    9854:	f003 fb1a 	bl	ce8c <bt_scan_cb_register>
		bt_scan_filter_remove_all();
    9858:	f003 fba2 	bl	cfa0 <bt_scan_filter_remove_all>
		switch (sensorInfos)
    985c:	782b      	ldrb	r3, [r5, #0]
    985e:	3b01      	subs	r3, #1
    9860:	2b06      	cmp	r3, #6
    9862:	d832      	bhi.n	98ca <_ZN13deviceManager8initScanEv+0xbe>
    9864:	e8df f003 	tbb	[pc, r3]
    9868:	13110f04 	.word	0x13110f04
    986c:	261d      	.short	0x261d
    986e:	2f          	.byte	0x2f
    986f:	00          	.byte	0x00
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9870:	4923      	ldr	r1, [pc, #140]	; (9900 <_ZN13deviceManager8initScanEv+0xf4>)
    9872:	2003      	movs	r0, #3
    9874:	f003 fb1a 	bl	ceac <bt_scan_filter_add>
				if (err) 
    9878:	b2c0      	uxtb	r0, r0
    987a:	b330      	cbz	r0, 98ca <_ZN13deviceManager8initScanEv+0xbe>
					printk("Scanning filters cannot be set\n");
    987c:	4821      	ldr	r0, [pc, #132]	; (9904 <_ZN13deviceManager8initScanEv+0xf8>)
    987e:	f011 f919 	bl	1aab4 <printk>
}
    9882:	b009      	add	sp, #36	; 0x24
    9884:	bd30      	pop	{r4, r5, pc}
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9886:	4920      	ldr	r1, [pc, #128]	; (9908 <_ZN13deviceManager8initScanEv+0xfc>)
    9888:	e7f3      	b.n	9872 <_ZN13deviceManager8initScanEv+0x66>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    988a:	4920      	ldr	r1, [pc, #128]	; (990c <_ZN13deviceManager8initScanEv+0x100>)
    988c:	e7f1      	b.n	9872 <_ZN13deviceManager8initScanEv+0x66>
				if (nbrConnectionsCentral == 0 || nbrConnectionsCentral == 1)
    988e:	4b20      	ldr	r3, [pc, #128]	; (9910 <_ZN13deviceManager8initScanEv+0x104>)
    9890:	781b      	ldrb	r3, [r3, #0]
    9892:	2b01      	cmp	r3, #1
    9894:	d801      	bhi.n	989a <_ZN13deviceManager8initScanEv+0x8e>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9896:	491f      	ldr	r1, [pc, #124]	; (9914 <_ZN13deviceManager8initScanEv+0x108>)
    9898:	e7eb      	b.n	9872 <_ZN13deviceManager8initScanEv+0x66>
				else if (nbrConnectionsCentral == 2)
    989a:	2b02      	cmp	r3, #2
    989c:	d115      	bne.n	98ca <_ZN13deviceManager8initScanEv+0xbe>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    989e:	491e      	ldr	r1, [pc, #120]	; (9918 <_ZN13deviceManager8initScanEv+0x10c>)
    98a0:	e7e7      	b.n	9872 <_ZN13deviceManager8initScanEv+0x66>
				if (nbrConnectionsCentral == 0)
    98a2:	4b1b      	ldr	r3, [pc, #108]	; (9910 <_ZN13deviceManager8initScanEv+0x104>)
    98a4:	781b      	ldrb	r3, [r3, #0]
    98a6:	b90b      	cbnz	r3, 98ac <_ZN13deviceManager8initScanEv+0xa0>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    98a8:	491c      	ldr	r1, [pc, #112]	; (991c <_ZN13deviceManager8initScanEv+0x110>)
    98aa:	e7e2      	b.n	9872 <_ZN13deviceManager8initScanEv+0x66>
				else if (nbrConnectionsCentral == 1)
    98ac:	2b01      	cmp	r3, #1
    98ae:	d10c      	bne.n	98ca <_ZN13deviceManager8initScanEv+0xbe>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    98b0:	491b      	ldr	r1, [pc, #108]	; (9920 <_ZN13deviceManager8initScanEv+0x114>)
    98b2:	e7de      	b.n	9872 <_ZN13deviceManager8initScanEv+0x66>
				if (nbrConnectionsCentral == 0)
    98b4:	4b16      	ldr	r3, [pc, #88]	; (9910 <_ZN13deviceManager8initScanEv+0x104>)
    98b6:	781b      	ldrb	r3, [r3, #0]
    98b8:	b90b      	cbnz	r3, 98be <_ZN13deviceManager8initScanEv+0xb2>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    98ba:	491a      	ldr	r1, [pc, #104]	; (9924 <_ZN13deviceManager8initScanEv+0x118>)
    98bc:	e7d9      	b.n	9872 <_ZN13deviceManager8initScanEv+0x66>
				else if (nbrConnectionsCentral == 1)
    98be:	2b01      	cmp	r3, #1
    98c0:	d103      	bne.n	98ca <_ZN13deviceManager8initScanEv+0xbe>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    98c2:	4919      	ldr	r1, [pc, #100]	; (9928 <_ZN13deviceManager8initScanEv+0x11c>)
    98c4:	e7d5      	b.n	9872 <_ZN13deviceManager8initScanEv+0x66>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    98c6:	4919      	ldr	r1, [pc, #100]	; (992c <_ZN13deviceManager8initScanEv+0x120>)
    98c8:	e7d3      	b.n	9872 <_ZN13deviceManager8initScanEv+0x66>
		err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    98ca:	2100      	movs	r1, #0
    98cc:	2004      	movs	r0, #4
    98ce:	f003 fb93 	bl	cff8 <bt_scan_filter_enable>
		if (err) 
    98d2:	b2c0      	uxtb	r0, r0
    98d4:	b110      	cbz	r0, 98dc <_ZN13deviceManager8initScanEv+0xd0>
			printk("Filters cannot be turned on\n");
    98d6:	4816      	ldr	r0, [pc, #88]	; (9930 <_ZN13deviceManager8initScanEv+0x124>)
    98d8:	f011 f8ec 	bl	1aab4 <printk>
		startScan();
    98dc:	f7ff ff82 	bl	97e4 <_ZN13deviceManager9startScanEv>
    98e0:	e7cf      	b.n	9882 <_ZN13deviceManager8initScanEv+0x76>
		bt_le_scan_start(&scanParam, deviceFound);
    98e2:	4914      	ldr	r1, [pc, #80]	; (9934 <_ZN13deviceManager8initScanEv+0x128>)
    98e4:	f007 fb48 	bl	10f78 <bt_le_scan_start>
    98e8:	e7cb      	b.n	9882 <_ZN13deviceManager8initScanEv+0x76>
    98ea:	bf00      	nop
    98ec:	2000f29b 	.word	0x2000f29b
    98f0:	00300060 	.word	0x00300060
    98f4:	0001f354 	.word	0x0001f354
    98f8:	20008568 	.word	0x20008568
    98fc:	20008158 	.word	0x20008158
    9900:	0001f35c 	.word	0x0001f35c
    9904:	0001f82d 	.word	0x0001f82d
    9908:	0001f360 	.word	0x0001f360
    990c:	0001f364 	.word	0x0001f364
    9910:	2000f2a1 	.word	0x2000f2a1
    9914:	0001f368 	.word	0x0001f368
    9918:	0001f36c 	.word	0x0001f36c
    991c:	0001f370 	.word	0x0001f370
    9920:	0001f374 	.word	0x0001f374
    9924:	0001f378 	.word	0x0001f378
    9928:	0001f37c 	.word	0x0001f37c
    992c:	0001f380 	.word	0x0001f380
    9930:	0001f84d 	.word	0x0001f84d
    9934:	0001a953 	.word	0x0001a953

00009938 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv>:
{
    9938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (!subscriptionDone)
    993c:	4f55      	ldr	r7, [pc, #340]	; (9a94 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x15c>)
{
    993e:	4604      	mov	r4, r0
	if (!subscriptionDone)
    9940:	783b      	ldrb	r3, [r7, #0]
    9942:	4d55      	ldr	r5, [pc, #340]	; (9a98 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x160>)
    9944:	2b00      	cmp	r3, #0
    9946:	d14c      	bne.n	99e2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
		subscribe_params[nbrConnectionsCentral-1].value = BT_GATT_CCC_NOTIFY;
    9948:	f04f 0818 	mov.w	r8, #24
    994c:	2101      	movs	r1, #1
    994e:	782b      	ldrb	r3, [r5, #0]
    9950:	4e52      	ldr	r6, [pc, #328]	; (9a9c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x164>)
    9952:	3b01      	subs	r3, #1
    9954:	fb08 f303 	mul.w	r3, r8, r3
    9958:	18f2      	adds	r2, r6, r3
    995a:	8191      	strh	r1, [r2, #12]
		subscribe_params[nbrConnectionsCentral-1].notify = onReceived;
    995c:	4a50      	ldr	r2, [pc, #320]	; (9aa0 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x168>)
		chrc = bt_gatt_dm_char_by_uuid(dm,BT_UUID_CSC_MEASUREMENT);
    995e:	4951      	ldr	r1, [pc, #324]	; (9aa4 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x16c>)
		subscribe_params[nbrConnectionsCentral-1].notify = onReceived;
    9960:	50f2      	str	r2, [r6, r3]
		chrc = bt_gatt_dm_char_by_uuid(dm,BT_UUID_CSC_MEASUREMENT);
    9962:	f003 f8c7 	bl	caf4 <bt_gatt_dm_char_by_uuid>
		if (!chrc) 
    9966:	4681      	mov	r9, r0
    9968:	b970      	cbnz	r0, 9988 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x50>
			printk("Missing CSC measurement characteristic\n");
    996a:	484f      	ldr	r0, [pc, #316]	; (9aa8 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x170>)
			printk("Missing CSC measurement char CCC descriptor\n");
    996c:	f011 f8a2 	bl	1aab4 <printk>
			err = bt_gatt_dm_data_release(dm);
    9970:	4620      	mov	r0, r4
    9972:	f011 fd3c 	bl	1b3ee <bt_gatt_dm_data_release>
			if (err) 
    9976:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    997a:	d037      	beq.n	99ec <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
				printk("Could not release discovery data, err: %d\n", err);
    997c:	484b      	ldr	r0, [pc, #300]	; (9aac <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x174>)
}
    997e:	b003      	add	sp, #12
    9980:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
				printk("Could not release discovery data, err: %d\n", err);
    9984:	f011 b896 	b.w	1aab4 <printk>
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_CSC_MEASUREMENT);
    9988:	4601      	mov	r1, r0
    998a:	4a49      	ldr	r2, [pc, #292]	; (9ab0 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x178>)
    998c:	4620      	mov	r0, r4
    998e:	f011 fd1c 	bl	1b3ca <bt_gatt_dm_desc_by_uuid>
		if (!desc) 
    9992:	b908      	cbnz	r0, 9998 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x60>
			printk("Missing CSC measurement char CCC descriptor\n");
    9994:	4847      	ldr	r0, [pc, #284]	; (9ab4 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x17c>)
    9996:	e7e9      	b.n	996c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x34>
		subscribe_params[nbrConnectionsCentral-1].value_handle = desc->handle;
    9998:	782b      	ldrb	r3, [r5, #0]
    999a:	8882      	ldrh	r2, [r0, #4]
    999c:	3b01      	subs	r3, #1
    999e:	fb08 6303 	mla	r3, r8, r3, r6
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    99a2:	4649      	mov	r1, r9
		subscribe_params[nbrConnectionsCentral-1].value_handle = desc->handle;
    99a4:	811a      	strh	r2, [r3, #8]
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    99a6:	4620      	mov	r0, r4
    99a8:	4a43      	ldr	r2, [pc, #268]	; (9ab8 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x180>)
    99aa:	f011 fd0e 	bl	1b3ca <bt_gatt_dm_desc_by_uuid>
		if (!desc) 
    99ae:	2800      	cmp	r0, #0
    99b0:	d0f0      	beq.n	9994 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x5c>
		subscribe_params[nbrConnectionsCentral-1].ccc_handle = desc->handle;
    99b2:	782b      	ldrb	r3, [r5, #0]
    99b4:	8882      	ldrh	r2, [r0, #4]
    99b6:	3b01      	subs	r3, #1
    99b8:	fb08 6303 	mla	r3, r8, r3, r6
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &subscribe_params[nbrConnectionsCentral-1]);
    99bc:	4620      	mov	r0, r4
		subscribe_params[nbrConnectionsCentral-1].ccc_handle = desc->handle;
    99be:	815a      	strh	r2, [r3, #10]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &subscribe_params[nbrConnectionsCentral-1]);
    99c0:	f011 fcb4 	bl	1b32c <bt_gatt_dm_conn_get>
    99c4:	7829      	ldrb	r1, [r5, #0]
    99c6:	3901      	subs	r1, #1
    99c8:	fb08 6101 	mla	r1, r8, r1, r6
    99cc:	f00b fb7a 	bl	150c4 <bt_gatt_subscribe>
		if (err) 
    99d0:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    99d4:	d002      	beq.n	99dc <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xa4>
			printk("Subscription failed (err %d)\n", err);
    99d6:	4839      	ldr	r0, [pc, #228]	; (9abc <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x184>)
    99d8:	f011 f86c 	bl	1aab4 <printk>
		bt_gatt_dm_data_release(dm);
    99dc:	4620      	mov	r0, r4
    99de:	f011 fd06 	bl	1b3ee <bt_gatt_dm_data_release>
	switch (nbrConnectionsCentral)
    99e2:	782d      	ldrb	r5, [r5, #0]
    99e4:	2d01      	cmp	r5, #1
    99e6:	d004      	beq.n	99f2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xba>
    99e8:	2d02      	cmp	r5, #2
    99ea:	d035      	beq.n	9a58 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x120>
}
    99ec:	b003      	add	sp, #12
    99ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (nbrAddresses == 1 && sensorInfos == 1)
    99f2:	4b33      	ldr	r3, [pc, #204]	; (9ac0 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x188>)
    99f4:	781c      	ldrb	r4, [r3, #0]
    99f6:	2c01      	cmp	r4, #1
    99f8:	d11c      	bne.n	9a34 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xfc>
    99fa:	4b32      	ldr	r3, [pc, #200]	; (9ac4 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x18c>)
    99fc:	781d      	ldrb	r5, [r3, #0]
    99fe:	2d01      	cmp	r5, #1
    9a00:	d10d      	bne.n	9a1e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xe6>
			printk("Discovery completed\n");
    9a02:	4831      	ldr	r0, [pc, #196]	; (9ac8 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x190>)
    9a04:	f011 f856 	bl	1aab4 <printk>
			connectedCode[0] = 14;
    9a08:	230e      	movs	r3, #14
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9a0a:	462a      	mov	r2, r5
			subscriptionDone = true;
    9a0c:	703d      	strb	r5, [r7, #0]
			connectedCode[0] = 14;
    9a0e:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9a12:	4b2e      	ldr	r3, [pc, #184]	; (9acc <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x194>)
    9a14:	a901      	add	r1, sp, #4
    9a16:	6818      	ldr	r0, [r3, #0]
    9a18:	f000 fbea 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
    9a1c:	e7e6      	b.n	99ec <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
		else if (nbrAddresses == 1 && sensorInfos == 2)
    9a1e:	2d02      	cmp	r5, #2
    9a20:	d1e4      	bne.n	99ec <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
			printk("Discovery completed\n");
    9a22:	4829      	ldr	r0, [pc, #164]	; (9ac8 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x190>)
    9a24:	f011 f846 	bl	1aab4 <printk>
			connectedCode[0] = 15;
    9a28:	230f      	movs	r3, #15
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9a2a:	4622      	mov	r2, r4
			subscriptionDone = true;
    9a2c:	703c      	strb	r4, [r7, #0]
			connectedCode[0] = 15;
    9a2e:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9a32:	e7ee      	b.n	9a12 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xda>
		else if (nbrAddresses == 2)	
    9a34:	3c02      	subs	r4, #2
    9a36:	2c01      	cmp	r4, #1
    9a38:	d8d8      	bhi.n	99ec <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
			printk("First discovery completed\n");
    9a3a:	4825      	ldr	r0, [pc, #148]	; (9ad0 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x198>)
    9a3c:	f011 f83a 	bl	1aab4 <printk>
			connectedCode[0] = 16;
    9a40:	2310      	movs	r3, #16
			connectedCode[0] = 19;
    9a42:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9a46:	4b21      	ldr	r3, [pc, #132]	; (9acc <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x194>)
    9a48:	2201      	movs	r2, #1
    9a4a:	6818      	ldr	r0, [r3, #0]
    9a4c:	a901      	add	r1, sp, #4
    9a4e:	f000 fbcf 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
			initScan();
    9a52:	f7ff fedb 	bl	980c <_ZN13deviceManager8initScanEv>
    9a56:	e7c9      	b.n	99ec <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
		if (nbrAddresses == 2)
    9a58:	4b19      	ldr	r3, [pc, #100]	; (9ac0 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x188>)
    9a5a:	781b      	ldrb	r3, [r3, #0]
    9a5c:	2b02      	cmp	r3, #2
    9a5e:	d111      	bne.n	9a84 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x14c>
			printk("Second discovery completed\n");
    9a60:	481c      	ldr	r0, [pc, #112]	; (9ad4 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x19c>)
    9a62:	f011 f827 	bl	1aab4 <printk>
			connectedCode[0] = 17;
    9a66:	2311      	movs	r3, #17
    9a68:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn, connectedCode, sizeof(connectedCode));
    9a6c:	4b17      	ldr	r3, [pc, #92]	; (9acc <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x194>)
    9a6e:	2201      	movs	r2, #1
    9a70:	6818      	ldr	r0, [r3, #0]
    9a72:	a901      	add	r1, sp, #4
    9a74:	f000 fbbc 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
			dk_set_led_on(CON_STATUS_LED_CENTRAL);
    9a78:	2001      	movs	r0, #1
    9a7a:	f013 ff8c 	bl	1d996 <dk_set_led_on>
			subscriptionDone = true;
    9a7e:	2301      	movs	r3, #1
    9a80:	703b      	strb	r3, [r7, #0]
    9a82:	e7b3      	b.n	99ec <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
		else if (nbrAddresses == 3) 
    9a84:	2b03      	cmp	r3, #3
    9a86:	d1b1      	bne.n	99ec <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb4>
			printk("Second discovery completed\n");	
    9a88:	4812      	ldr	r0, [pc, #72]	; (9ad4 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x19c>)
    9a8a:	f011 f813 	bl	1aab4 <printk>
			connectedCode[0] = 19;
    9a8e:	2313      	movs	r3, #19
    9a90:	e7d7      	b.n	9a42 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x10a>
    9a92:	bf00      	nop
    9a94:	2000f29f 	.word	0x2000f29f
    9a98:	2000f2a1 	.word	0x2000f2a1
    9a9c:	2000a5fc 	.word	0x2000a5fc
    9aa0:	000093b9 	.word	0x000093b9
    9aa4:	0001f398 	.word	0x0001f398
    9aa8:	0001f86a 	.word	0x0001f86a
    9aac:	0001f892 	.word	0x0001f892
    9ab0:	0001f39c 	.word	0x0001f39c
    9ab4:	0001f8bd 	.word	0x0001f8bd
    9ab8:	0001f3a0 	.word	0x0001f3a0
    9abc:	0001f8ea 	.word	0x0001f8ea
    9ac0:	2000f29d 	.word	0x2000f29d
    9ac4:	2000f29b 	.word	0x2000f29b
    9ac8:	0001f5c0 	.word	0x0001f5c0
    9acc:	2000a5f8 	.word	0x2000a5f8
    9ad0:	0001f908 	.word	0x0001f908
    9ad4:	0001f5d5 	.word	0x0001f5d5

00009ad8 <_ZN13deviceManager11initCentralEv>:
{
    9ad8:	b510      	push	{r4, lr}
    9ada:	4604      	mov	r4, r0
	printk("Init Central\n");
    9adc:	481e      	ldr	r0, [pc, #120]	; (9b58 <_ZN13deviceManager11initCentralEv+0x80>)
    9ade:	f010 ffe9 	bl	1aab4 <printk>
	if (getDevice() == 1 || getDevice() == 3)
    9ae2:	f7ff fded 	bl	96c0 <_ZN13deviceManager9getDeviceEv>
    9ae6:	2801      	cmp	r0, #1
    9ae8:	d00a      	beq.n	9b00 <_ZN13deviceManager11initCentralEv+0x28>
    9aea:	2803      	cmp	r0, #3
    9aec:	d132      	bne.n	9b54 <_ZN13deviceManager11initCentralEv+0x7c>
		bt_conn_cb_register(&conn_callbacks);
    9aee:	4620      	mov	r0, r4
    9af0:	f007 fc68 	bl	113c4 <bt_conn_cb_register>
		initScan();
    9af4:	f7ff fe8a 	bl	980c <_ZN13deviceManager8initScanEv>
}
    9af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startScan();	
    9afc:	f7ff be72 	b.w	97e4 <_ZN13deviceManager9startScanEv>
			err = bt_enable(nullptr);
    9b00:	2000      	movs	r0, #0
    9b02:	f006 fe01 	bl	10708 <bt_enable>
			if (err) {
    9b06:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9b0a:	d004      	beq.n	9b16 <_ZN13deviceManager11initCentralEv+0x3e>
				printk("Bluetooth init failed (err %d)\n", err);
    9b0c:	4813      	ldr	r0, [pc, #76]	; (9b5c <_ZN13deviceManager11initCentralEv+0x84>)
}
    9b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				printk("LEDs init failed (err %d)\n", err);
    9b12:	f010 bfcf 	b.w	1aab4 <printk>
			printk("Bluetooth ready\n");
    9b16:	4812      	ldr	r0, [pc, #72]	; (9b60 <_ZN13deviceManager11initCentralEv+0x88>)
    9b18:	f010 ffcc 	bl	1aab4 <printk>
			err = dk_leds_init();
    9b1c:	f00c ffdc 	bl	16ad8 <dk_leds_init>
			if (err) {
    9b20:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9b24:	d001      	beq.n	9b2a <_ZN13deviceManager11initCentralEv+0x52>
				printk("LEDs init failed (err %d)\n", err);
    9b26:	480f      	ldr	r0, [pc, #60]	; (9b64 <_ZN13deviceManager11initCentralEv+0x8c>)
    9b28:	e7f1      	b.n	9b0e <_ZN13deviceManager11initCentralEv+0x36>
			err = initButton();
    9b2a:	f7ff fddd 	bl	96e8 <_ZN13deviceManager10initButtonEv>
			if (err) {
    9b2e:	4601      	mov	r1, r0
    9b30:	b108      	cbz	r0, 9b36 <_ZN13deviceManager11initCentralEv+0x5e>
				printk("Button init failed (err %d)\n", err);
    9b32:	480d      	ldr	r0, [pc, #52]	; (9b68 <_ZN13deviceManager11initCentralEv+0x90>)
    9b34:	e7eb      	b.n	9b0e <_ZN13deviceManager11initCentralEv+0x36>
			err = bt_lbs_init(&lbs_callbacs);
    9b36:	f104 0014 	add.w	r0, r4, #20
    9b3a:	f003 fe13 	bl	d764 <bt_lbs_init>
			if (err) {
    9b3e:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9b42:	d001      	beq.n	9b48 <_ZN13deviceManager11initCentralEv+0x70>
				printk("Failed to init LBS (err:%d)\n", err);
    9b44:	4809      	ldr	r0, [pc, #36]	; (9b6c <_ZN13deviceManager11initCentralEv+0x94>)
    9b46:	e7e2      	b.n	9b0e <_ZN13deviceManager11initCentralEv+0x36>
				settings_load();
    9b48:	f011 faa9 	bl	1b09e <settings_load>
				printk("Settings loaded\n");
    9b4c:	4808      	ldr	r0, [pc, #32]	; (9b70 <_ZN13deviceManager11initCentralEv+0x98>)
    9b4e:	f010 ffb1 	bl	1aab4 <printk>
    9b52:	e7cc      	b.n	9aee <_ZN13deviceManager11initCentralEv+0x16>
}
    9b54:	bd10      	pop	{r4, pc}
    9b56:	bf00      	nop
    9b58:	0001f923 	.word	0x0001f923
    9b5c:	0001f7aa 	.word	0x0001f7aa
    9b60:	0001f931 	.word	0x0001f931
    9b64:	0001f772 	.word	0x0001f772
    9b68:	0001f78d 	.word	0x0001f78d
    9b6c:	0001f7e1 	.word	0x0001f7e1
    9b70:	0001f942 	.word	0x0001f942

00009b74 <_ZN13deviceManager9setDeviceEbb>:
{
    9b74:	b410      	push	{r4}
    isPeripheral = p;
    9b76:	4c09      	ldr	r4, [pc, #36]	; (9b9c <_ZN13deviceManager9setDeviceEbb+0x28>)
{
    9b78:	4603      	mov	r3, r0
    isPeripheral = p;
    9b7a:	7022      	strb	r2, [r4, #0]
    isCentral = c;  
    9b7c:	4c08      	ldr	r4, [pc, #32]	; (9ba0 <_ZN13deviceManager9setDeviceEbb+0x2c>)
    9b7e:	7021      	strb	r1, [r4, #0]
	if (isCentral == true && isPeripheral == true)
    9b80:	b139      	cbz	r1, 9b92 <_ZN13deviceManager9setDeviceEbb+0x1e>
    9b82:	b11a      	cbz	r2, 9b8c <_ZN13deviceManager9setDeviceEbb+0x18>
		initPeripheral();
    9b84:	4618      	mov	r0, r3
}
    9b86:	bc10      	pop	{r4}
		initPeripheral();
    9b88:	f7ff bde8 	b.w	975c <_ZN13deviceManager14initPeripheralEv>
}
    9b8c:	bc10      	pop	{r4}
		initCentral();
    9b8e:	f7ff bfa3 	b.w	9ad8 <_ZN13deviceManager11initCentralEv>
	else if (isCentral == false && isPeripheral == true)
    9b92:	2a00      	cmp	r2, #0
    9b94:	d1f6      	bne.n	9b84 <_ZN13deviceManager9setDeviceEbb+0x10>
}
    9b96:	bc10      	pop	{r4}
    9b98:	4770      	bx	lr
    9b9a:	bf00      	nop
    9b9c:	2000f29c 	.word	0x2000f29c
    9ba0:	2000f2d7 	.word	0x2000f2d7

00009ba4 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info>:
{
    9ba4:	b508      	push	{r3, lr}
    printk("Connecting failed\n");
    9ba6:	4803      	ldr	r0, [pc, #12]	; (9bb4 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info+0x10>)
    9ba8:	f010 ff84 	bl	1aab4 <printk>
}
    9bac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	startScan();
    9bb0:	f7ff be18 	b.w	97e4 <_ZN13deviceManager9startScanEv>
    9bb4:	0001f953 	.word	0x0001f953

00009bb8 <_ZN13deviceManager6reScanEh>:
{
    9bb8:	b510      	push	{r4, lr}
    9bba:	4604      	mov	r4, r0
	bt_scan_filter_remove_all();	
    9bbc:	f003 f9f0 	bl	cfa0 <bt_scan_filter_remove_all>
	switch (type)
    9bc0:	2c02      	cmp	r4, #2
    9bc2:	d019      	beq.n	9bf8 <_ZN13deviceManager6reScanEh+0x40>
    9bc4:	2c03      	cmp	r4, #3
    9bc6:	d019      	beq.n	9bfc <_ZN13deviceManager6reScanEh+0x44>
    9bc8:	2c01      	cmp	r4, #1
    9bca:	d108      	bne.n	9bde <_ZN13deviceManager6reScanEh+0x26>
		err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9bcc:	490c      	ldr	r1, [pc, #48]	; (9c00 <_ZN13deviceManager6reScanEh+0x48>)
    9bce:	2003      	movs	r0, #3
    9bd0:	f003 f96c 	bl	ceac <bt_scan_filter_add>
		if (err) 
    9bd4:	b2c0      	uxtb	r0, r0
    9bd6:	b110      	cbz	r0, 9bde <_ZN13deviceManager6reScanEh+0x26>
			printk("Scanning filters cannot be set\n");
    9bd8:	480a      	ldr	r0, [pc, #40]	; (9c04 <_ZN13deviceManager6reScanEh+0x4c>)
    9bda:	f010 ff6b 	bl	1aab4 <printk>
	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    9bde:	2100      	movs	r1, #0
    9be0:	2004      	movs	r0, #4
    9be2:	f003 fa09 	bl	cff8 <bt_scan_filter_enable>
	if (err) 
    9be6:	b2c0      	uxtb	r0, r0
    9be8:	b110      	cbz	r0, 9bf0 <_ZN13deviceManager6reScanEh+0x38>
		printk("Filters cannot be turned on\n");
    9bea:	4807      	ldr	r0, [pc, #28]	; (9c08 <_ZN13deviceManager6reScanEh+0x50>)
    9bec:	f010 ff62 	bl	1aab4 <printk>
}
    9bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	startScan();
    9bf4:	f7ff bdf6 	b.w	97e4 <_ZN13deviceManager9startScanEv>
		err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9bf8:	4904      	ldr	r1, [pc, #16]	; (9c0c <_ZN13deviceManager6reScanEh+0x54>)
    9bfa:	e7e8      	b.n	9bce <_ZN13deviceManager6reScanEh+0x16>
		err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    9bfc:	4904      	ldr	r1, [pc, #16]	; (9c10 <_ZN13deviceManager6reScanEh+0x58>)
    9bfe:	e7e6      	b.n	9bce <_ZN13deviceManager6reScanEh+0x16>
    9c00:	0001f384 	.word	0x0001f384
    9c04:	0001f82d 	.word	0x0001f82d
    9c08:	0001f84d 	.word	0x0001f84d
    9c0c:	0001f388 	.word	0x0001f388
    9c10:	0001f38c 	.word	0x0001f38c

00009c14 <_ZN13deviceManager11discoverCSCEv>:
{
    9c14:	b510      	push	{r4, lr}
	printk("nbr conn: %d\n", nbrConnectionsCentral);
    9c16:	4c0c      	ldr	r4, [pc, #48]	; (9c48 <_ZN13deviceManager11discoverCSCEv+0x34>)
    9c18:	480c      	ldr	r0, [pc, #48]	; (9c4c <_ZN13deviceManager11discoverCSCEv+0x38>)
    9c1a:	7821      	ldrb	r1, [r4, #0]
    9c1c:	f010 ff4a 	bl	1aab4 <printk>
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb_CSC, NULL);
    9c20:	7820      	ldrb	r0, [r4, #0]
    9c22:	4c0b      	ldr	r4, [pc, #44]	; (9c50 <_ZN13deviceManager11discoverCSCEv+0x3c>)
    9c24:	3801      	subs	r0, #1
    9c26:	490b      	ldr	r1, [pc, #44]	; (9c54 <_ZN13deviceManager11discoverCSCEv+0x40>)
    9c28:	2300      	movs	r3, #0
    9c2a:	4a0b      	ldr	r2, [pc, #44]	; (9c58 <_ZN13deviceManager11discoverCSCEv+0x44>)
    9c2c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    9c30:	f002 ff8c 	bl	cb4c <bt_gatt_dm_start>
	if (err) 
    9c34:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9c38:	d004      	beq.n	9c44 <_ZN13deviceManager11discoverCSCEv+0x30>
}
    9c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    9c3e:	4807      	ldr	r0, [pc, #28]	; (9c5c <_ZN13deviceManager11discoverCSCEv+0x48>)
    9c40:	f010 bf38 	b.w	1aab4 <printk>
}
    9c44:	bd10      	pop	{r4, pc}
    9c46:	bf00      	nop
    9c48:	2000f2a1 	.word	0x2000f2a1
    9c4c:	0001f966 	.word	0x0001f966
    9c50:	2000a674 	.word	0x2000a674
    9c54:	0001f390 	.word	0x0001f390
    9c58:	2000814c 	.word	0x2000814c
    9c5c:	0001f974 	.word	0x0001f974

00009c60 <_ZN13deviceManager10discoverHREv>:
{
    9c60:	b510      	push	{r4, lr}
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_HRS, &discovery_cb_HR, NULL);
    9c62:	4b0a      	ldr	r3, [pc, #40]	; (9c8c <_ZN13deviceManager10discoverHREv+0x2c>)
    9c64:	4c0a      	ldr	r4, [pc, #40]	; (9c90 <_ZN13deviceManager10discoverHREv+0x30>)
    9c66:	7818      	ldrb	r0, [r3, #0]
    9c68:	490a      	ldr	r1, [pc, #40]	; (9c94 <_ZN13deviceManager10discoverHREv+0x34>)
    9c6a:	3801      	subs	r0, #1
    9c6c:	2300      	movs	r3, #0
    9c6e:	4a0a      	ldr	r2, [pc, #40]	; (9c98 <_ZN13deviceManager10discoverHREv+0x38>)
    9c70:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    9c74:	f002 ff6a 	bl	cb4c <bt_gatt_dm_start>
	if (err) 
    9c78:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9c7c:	d004      	beq.n	9c88 <_ZN13deviceManager10discoverHREv+0x28>
}
    9c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    9c82:	4806      	ldr	r0, [pc, #24]	; (9c9c <_ZN13deviceManager10discoverHREv+0x3c>)
    9c84:	f010 bf16 	b.w	1aab4 <printk>
}
    9c88:	bd10      	pop	{r4, pc}
    9c8a:	bf00      	nop
    9c8c:	2000f2a1 	.word	0x2000f2a1
    9c90:	2000a674 	.word	0x2000a674
    9c94:	0001f394 	.word	0x0001f394
    9c98:	20008140 	.word	0x20008140
    9c9c:	0001f974 	.word	0x0001f974

00009ca0 <_ZN13deviceManager9connectedEP7bt_connh>:
{
    9ca0:	b570      	push	{r4, r5, r6, lr}
    9ca2:	b090      	sub	sp, #64	; 0x40
    9ca4:	460c      	mov	r4, r1
	uint8_t error = bt_conn_get_info(conn,&info);
    9ca6:	a901      	add	r1, sp, #4
{
    9ca8:	4605      	mov	r5, r0
	uint8_t error = bt_conn_get_info(conn,&info);
    9caa:	f007 fe8b 	bl	119c4 <bt_conn_get_info>
	if (error)
    9cae:	b2c0      	uxtb	r0, r0
    9cb0:	b120      	cbz	r0, 9cbc <_ZN13deviceManager9connectedEP7bt_connh+0x1c>
		printk("Cannot get info of connection object\n");
    9cb2:	4834      	ldr	r0, [pc, #208]	; (9d84 <_ZN13deviceManager9connectedEP7bt_connh+0xe4>)
    9cb4:	f010 fefe 	bl	1aab4 <printk>
}
    9cb8:	b010      	add	sp, #64	; 0x40
    9cba:	bd70      	pop	{r4, r5, r6, pc}
	if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9cbc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    9cc0:	2b00      	cmp	r3, #0
    9cc2:	d13e      	bne.n	9d42 <_ZN13deviceManager9connectedEP7bt_connh+0xa2>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9cc4:	4628      	mov	r0, r5
    9cc6:	f012 fbed 	bl	1c4a4 <bt_conn_get_dst>
    9cca:	221e      	movs	r2, #30
    9ccc:	a908      	add	r1, sp, #32
    9cce:	f7ff fc8b 	bl	95e8 <bt_addr_le_to_str.isra.0>
		if (err) 
    9cd2:	b13c      	cbz	r4, 9ce4 <_ZN13deviceManager9connectedEP7bt_connh+0x44>
			printk("Failed to connect to %s (%u)\n", addr, err);
    9cd4:	4622      	mov	r2, r4
    9cd6:	482c      	ldr	r0, [pc, #176]	; (9d88 <_ZN13deviceManager9connectedEP7bt_connh+0xe8>)
    9cd8:	a908      	add	r1, sp, #32
    9cda:	f010 feeb 	bl	1aab4 <printk>
			startScan();
    9cde:	f7ff fd81 	bl	97e4 <_ZN13deviceManager9startScanEv>
			return;
    9ce2:	e7e9      	b.n	9cb8 <_ZN13deviceManager9connectedEP7bt_connh+0x18>
		printk("Connected: %s\n", addr);
    9ce4:	4829      	ldr	r0, [pc, #164]	; (9d8c <_ZN13deviceManager9connectedEP7bt_connh+0xec>)
    9ce6:	a908      	add	r1, sp, #32
    9ce8:	f010 fee4 	bl	1aab4 <printk>
		for (uint8_t i=0; i <= MAX_CONNECTIONS_CENTRAL-1; i++)
    9cec:	4b28      	ldr	r3, [pc, #160]	; (9d90 <_ZN13deviceManager9connectedEP7bt_connh+0xf0>)
    9cee:	461e      	mov	r6, r3
			if (centralConnections[i] == nullptr)
    9cf0:	f853 2b04 	ldr.w	r2, [r3], #4
    9cf4:	b9ba      	cbnz	r2, 9d26 <_ZN13deviceManager9connectedEP7bt_connh+0x86>
				centralConnections[i] = bt_conn_ref(conn);
    9cf6:	4628      	mov	r0, r5
    9cf8:	f012 fb9b 	bl	1c432 <bt_conn_ref>
    9cfc:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
		bt_conn_unref(conn);
    9d00:	4628      	mov	r0, r5
    9d02:	f007 fccd 	bl	116a0 <bt_conn_unref>
		nbrConnectionsCentral++;
    9d06:	4a23      	ldr	r2, [pc, #140]	; (9d94 <_ZN13deviceManager9connectedEP7bt_connh+0xf4>)
    9d08:	7813      	ldrb	r3, [r2, #0]
    9d0a:	3301      	adds	r3, #1
    9d0c:	b2db      	uxtb	r3, r3
    9d0e:	7013      	strb	r3, [r2, #0]
		switch (sensorInfos)
    9d10:	4a21      	ldr	r2, [pc, #132]	; (9d98 <_ZN13deviceManager9connectedEP7bt_connh+0xf8>)
    9d12:	7812      	ldrb	r2, [r2, #0]
    9d14:	3a01      	subs	r2, #1
    9d16:	2a06      	cmp	r2, #6
    9d18:	d8ce      	bhi.n	9cb8 <_ZN13deviceManager9connectedEP7bt_connh+0x18>
    9d1a:	e8df f002 	tbb	[pc, r2]
    9d1e:	0a0a      	.short	0x0a0a
    9d20:	0d0d080a 	.word	0x0d0d080a
    9d24:	0f          	.byte	0x0f
    9d25:	00          	.byte	0x00
		for (uint8_t i=0; i <= MAX_CONNECTIONS_CENTRAL-1; i++)
    9d26:	3401      	adds	r4, #1
    9d28:	2c05      	cmp	r4, #5
    9d2a:	d1e1      	bne.n	9cf0 <_ZN13deviceManager9connectedEP7bt_connh+0x50>
    9d2c:	e7e8      	b.n	9d00 <_ZN13deviceManager9connectedEP7bt_connh+0x60>
			if (nbrConnectionsCentral <= 2)
    9d2e:	2b02      	cmp	r3, #2
    9d30:	d804      	bhi.n	9d3c <_ZN13deviceManager9connectedEP7bt_connh+0x9c>
				discoverCSC();
    9d32:	f7ff ff6f 	bl	9c14 <_ZN13deviceManager11discoverCSCEv>
    9d36:	e7bf      	b.n	9cb8 <_ZN13deviceManager9connectedEP7bt_connh+0x18>
			if (nbrConnectionsCentral == 1)
    9d38:	2b01      	cmp	r3, #1
    9d3a:	d0fa      	beq.n	9d32 <_ZN13deviceManager9connectedEP7bt_connh+0x92>
			discoverHR();
    9d3c:	f7ff ff90 	bl	9c60 <_ZN13deviceManager10discoverHREv>
			break;
    9d40:	e7ba      	b.n	9cb8 <_ZN13deviceManager9connectedEP7bt_connh+0x18>
	else if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9d42:	2b01      	cmp	r3, #1
    9d44:	d1b8      	bne.n	9cb8 <_ZN13deviceManager9connectedEP7bt_connh+0x18>
		if (err) 
    9d46:	b124      	cbz	r4, 9d52 <_ZN13deviceManager9connectedEP7bt_connh+0xb2>
			printk("Connection failed (err %u)\n", err);
    9d48:	4621      	mov	r1, r4
    9d4a:	4814      	ldr	r0, [pc, #80]	; (9d9c <_ZN13deviceManager9connectedEP7bt_connh+0xfc>)
    9d4c:	f010 feb2 	bl	1aab4 <printk>
			return;
    9d50:	e7b2      	b.n	9cb8 <_ZN13deviceManager9connectedEP7bt_connh+0x18>
		printk("Connected with application\n");
    9d52:	4813      	ldr	r0, [pc, #76]	; (9da0 <_ZN13deviceManager9connectedEP7bt_connh+0x100>)
    9d54:	f010 feae 	bl	1aab4 <printk>
		peripheralConn = bt_conn_ref(conn);
    9d58:	4628      	mov	r0, r5
    9d5a:	f012 fb6a 	bl	1c432 <bt_conn_ref>
    9d5e:	4b11      	ldr	r3, [pc, #68]	; (9da4 <_ZN13deviceManager9connectedEP7bt_connh+0x104>)
    9d60:	6018      	str	r0, [r3, #0]
		bt_conn_unref(conn);
    9d62:	4628      	mov	r0, r5
    9d64:	f007 fc9c 	bl	116a0 <bt_conn_unref>
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);			
    9d68:	4620      	mov	r0, r4
    9d6a:	f013 fe14 	bl	1d996 <dk_set_led_on>
		if (getDevice() == 3 && nbrConnectionsCentral == 0) 
    9d6e:	f7ff fca7 	bl	96c0 <_ZN13deviceManager9getDeviceEv>
    9d72:	2803      	cmp	r0, #3
    9d74:	d1a0      	bne.n	9cb8 <_ZN13deviceManager9connectedEP7bt_connh+0x18>
    9d76:	4b07      	ldr	r3, [pc, #28]	; (9d94 <_ZN13deviceManager9connectedEP7bt_connh+0xf4>)
    9d78:	781b      	ldrb	r3, [r3, #0]
    9d7a:	2b00      	cmp	r3, #0
    9d7c:	d19c      	bne.n	9cb8 <_ZN13deviceManager9connectedEP7bt_connh+0x18>
			initScan();
    9d7e:	f7ff fd45 	bl	980c <_ZN13deviceManager8initScanEv>
    9d82:	e799      	b.n	9cb8 <_ZN13deviceManager9connectedEP7bt_connh+0x18>
    9d84:	0001f99f 	.word	0x0001f99f
    9d88:	0001f9c5 	.word	0x0001f9c5
    9d8c:	0001f9e3 	.word	0x0001f9e3
    9d90:	2000a674 	.word	0x2000a674
    9d94:	2000f2a1 	.word	0x2000f2a1
    9d98:	2000f29b 	.word	0x2000f29b
    9d9c:	0001f9f2 	.word	0x0001f9f2
    9da0:	0001fa0e 	.word	0x0001fa0e
    9da4:	2000a5f8 	.word	0x2000a5f8

00009da8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb>:
			      bool connectable) {
    9da8:	b570      	push	{r4, r5, r6, lr}
    9daa:	b08e      	sub	sp, #56	; 0x38
    9dac:	4605      	mov	r5, r0
	nbrAddresses = getNbrOfAddresses();
    9dae:	f000 fa4f 	bl	a250 <_Z17getNbrOfAddressesv>
    9db2:	4b48      	ldr	r3, [pc, #288]	; (9ed4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    9db4:	4604      	mov	r4, r0
    9db6:	4e48      	ldr	r6, [pc, #288]	; (9ed8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9db8:	7018      	strb	r0, [r3, #0]
	if (nbrAddresses != 0)
    9dba:	2800      	cmp	r0, #0
    9dbc:	d052      	beq.n	9e64 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xbc>
		ready = true;
    9dbe:	2101      	movs	r1, #1
		switch (nbrAddresses)
    9dc0:	2802      	cmp	r0, #2
		ready = true;
    9dc2:	7031      	strb	r1, [r6, #0]
		switch (nbrAddresses)
    9dc4:	d036      	beq.n	9e34 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x8c>
    9dc6:	2803      	cmp	r0, #3
    9dc8:	d03e      	beq.n	9e48 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xa0>
    9dca:	4288      	cmp	r0, r1
    9dcc:	d107      	bne.n	9dde <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x36>
			getAddress(sensor1,1);
    9dce:	4601      	mov	r1, r0
    9dd0:	4842      	ldr	r0, [pc, #264]	; (9edc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9dd2:	f000 fa43 	bl	a25c <_Z10getAddressPch>
			printk("sensor1: %s\n",sensor1);
    9dd6:	4941      	ldr	r1, [pc, #260]	; (9edc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9dd8:	4841      	ldr	r0, [pc, #260]	; (9ee0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x138>)
			printk("sensor2: %s\n",sensor2);
    9dda:	f010 fe6b 	bl	1aab4 <printk>
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    9dde:	682b      	ldr	r3, [r5, #0]
    9de0:	221e      	movs	r2, #30
    9de2:	6818      	ldr	r0, [r3, #0]
    9de4:	a906      	add	r1, sp, #24
    9de6:	f7ff fbff 	bl	95e8 <bt_addr_le_to_str.isra.0>
	bt_addr_le_to_str(device_info->recv_info->addr, addrShort, sizeof(addrShort));
    9dea:	682b      	ldr	r3, [r5, #0]
    9dec:	2212      	movs	r2, #18
    9dee:	6818      	ldr	r0, [r3, #0]
    9df0:	a901      	add	r1, sp, #4
    9df2:	f7ff fbf9 	bl	95e8 <bt_addr_le_to_str.isra.0>
	if (ready)
    9df6:	7833      	ldrb	r3, [r6, #0]
    9df8:	2b00      	cmp	r3, #0
    9dfa:	d046      	beq.n	9e8a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xe2>
		bt_scan_stop();
    9dfc:	f011 fb0f 	bl	1b41e <bt_scan_stop>
		if (checkAddresses(addrShort,sensor1) && once_sensor1)
    9e00:	4936      	ldr	r1, [pc, #216]	; (9edc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9e02:	a801      	add	r0, sp, #4
    9e04:	f010 fda7 	bl	1a956 <_ZN13deviceManager14checkAddressesEPcS0_>
    9e08:	2800      	cmp	r0, #0
    9e0a:	d02f      	beq.n	9e6c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc4>
    9e0c:	4c35      	ldr	r4, [pc, #212]	; (9ee4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x13c>)
    9e0e:	7823      	ldrb	r3, [r4, #0]
    9e10:	b363      	cbz	r3, 9e6c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc4>
			printk("Correct sensor found\n");
    9e12:	4835      	ldr	r0, [pc, #212]	; (9ee8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    9e14:	f010 fe4e 	bl	1aab4 <printk>
			once_sensor1 = false;
    9e18:	2300      	movs	r3, #0
    9e1a:	7023      	strb	r3, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9e1c:	4b33      	ldr	r3, [pc, #204]	; (9eec <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x144>)
    9e1e:	6828      	ldr	r0, [r5, #0]
    9e20:	781a      	ldrb	r2, [r3, #0]
    9e22:	4b33      	ldr	r3, [pc, #204]	; (9ef0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x148>)
    9e24:	4933      	ldr	r1, [pc, #204]	; (9ef4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x14c>)
    9e26:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9e2a:	686a      	ldr	r2, [r5, #4]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9e2c:	6800      	ldr	r0, [r0, #0]
    9e2e:	f007 fdf5 	bl	11a1c <bt_conn_le_create>
}
    9e32:	e02a      	b.n	9e8a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xe2>
			getAddress(sensor1,1);
    9e34:	4829      	ldr	r0, [pc, #164]	; (9edc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9e36:	f000 fa11 	bl	a25c <_Z10getAddressPch>
			getAddress(sensor2,2);
    9e3a:	4621      	mov	r1, r4
    9e3c:	482e      	ldr	r0, [pc, #184]	; (9ef8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x150>)
    9e3e:	f000 fa0d 	bl	a25c <_Z10getAddressPch>
			printk("sensor2: %s\n",sensor2);
    9e42:	492d      	ldr	r1, [pc, #180]	; (9ef8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x150>)
    9e44:	482d      	ldr	r0, [pc, #180]	; (9efc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x154>)
    9e46:	e7c8      	b.n	9dda <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x32>
			getAddress(sensor1,1);
    9e48:	4824      	ldr	r0, [pc, #144]	; (9edc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9e4a:	f000 fa07 	bl	a25c <_Z10getAddressPch>
			getAddress(sensor2,2);
    9e4e:	2102      	movs	r1, #2
    9e50:	4829      	ldr	r0, [pc, #164]	; (9ef8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x150>)
    9e52:	f000 fa03 	bl	a25c <_Z10getAddressPch>
			getAddress(sensor3,3);
    9e56:	4621      	mov	r1, r4
    9e58:	4829      	ldr	r0, [pc, #164]	; (9f00 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x158>)
    9e5a:	f000 f9ff 	bl	a25c <_Z10getAddressPch>
			printk("sensor3: %s\n",sensor3);
    9e5e:	4928      	ldr	r1, [pc, #160]	; (9f00 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x158>)
    9e60:	4828      	ldr	r0, [pc, #160]	; (9f04 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x15c>)
    9e62:	e7ba      	b.n	9dda <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x32>
		initScan();
    9e64:	f7ff fcd2 	bl	980c <_ZN13deviceManager8initScanEv>
		ready = false;
    9e68:	7034      	strb	r4, [r6, #0]
    9e6a:	e7b8      	b.n	9dde <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x36>
		else if (checkAddresses(addrShort,sensor2) && once_sensor2)
    9e6c:	4922      	ldr	r1, [pc, #136]	; (9ef8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x150>)
    9e6e:	a801      	add	r0, sp, #4
    9e70:	f010 fd71 	bl	1a956 <_ZN13deviceManager14checkAddressesEPcS0_>
    9e74:	b110      	cbz	r0, 9e7c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xd4>
    9e76:	4c24      	ldr	r4, [pc, #144]	; (9f08 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x160>)
    9e78:	7823      	ldrb	r3, [r4, #0]
    9e7a:	b943      	cbnz	r3, 9e8e <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xe6>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9e7c:	4920      	ldr	r1, [pc, #128]	; (9f00 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x158>)
    9e7e:	a801      	add	r0, sp, #4
    9e80:	f010 fd69 	bl	1a956 <_ZN13deviceManager14checkAddressesEPcS0_>
    9e84:	b988      	cbnz	r0, 9eaa <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x102>
			startScan();
    9e86:	f7ff fcad 	bl	97e4 <_ZN13deviceManager9startScanEv>
}
    9e8a:	b00e      	add	sp, #56	; 0x38
    9e8c:	bd70      	pop	{r4, r5, r6, pc}
			printk("Correct sensor found\n");
    9e8e:	4816      	ldr	r0, [pc, #88]	; (9ee8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    9e90:	f010 fe10 	bl	1aab4 <printk>
			once_sensor2 = false;
    9e94:	2300      	movs	r3, #0
    9e96:	7023      	strb	r3, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9e98:	4b14      	ldr	r3, [pc, #80]	; (9eec <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x144>)
    9e9a:	6828      	ldr	r0, [r5, #0]
    9e9c:	781a      	ldrb	r2, [r3, #0]
    9e9e:	4b14      	ldr	r3, [pc, #80]	; (9ef0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x148>)
    9ea0:	491a      	ldr	r1, [pc, #104]	; (9f0c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x164>)
    9ea2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9ea6:	686a      	ldr	r2, [r5, #4]
    9ea8:	e7c0      	b.n	9e2c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x84>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9eaa:	4c19      	ldr	r4, [pc, #100]	; (9f10 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x168>)
    9eac:	7823      	ldrb	r3, [r4, #0]
    9eae:	2b00      	cmp	r3, #0
    9eb0:	d0e9      	beq.n	9e86 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xde>
			printk("Correct sensor found\n");
    9eb2:	480d      	ldr	r0, [pc, #52]	; (9ee8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    9eb4:	f010 fdfe 	bl	1aab4 <printk>
			once_sensor3 = false;
    9eb8:	2300      	movs	r3, #0
    9eba:	7023      	strb	r3, [r4, #0]
			bt_scan_stop();
    9ebc:	f011 faaf 	bl	1b41e <bt_scan_stop>
			err = bt_conn_le_create(device_info->recv_info->addr,
    9ec0:	4b0a      	ldr	r3, [pc, #40]	; (9eec <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x144>)
    9ec2:	6828      	ldr	r0, [r5, #0]
    9ec4:	781a      	ldrb	r2, [r3, #0]
    9ec6:	4b0a      	ldr	r3, [pc, #40]	; (9ef0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x148>)
    9ec8:	4912      	ldr	r1, [pc, #72]	; (9f14 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x16c>)
    9eca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9ece:	686a      	ldr	r2, [r5, #4]
    9ed0:	e7ac      	b.n	9e2c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x84>
    9ed2:	bf00      	nop
    9ed4:	2000f29d 	.word	0x2000f29d
    9ed8:	2000f2dd 	.word	0x2000f2dd
    9edc:	2000f2a4 	.word	0x2000f2a4
    9ee0:	0001fa2a 	.word	0x0001fa2a
    9ee4:	20008565 	.word	0x20008565
    9ee8:	0001fa51 	.word	0x0001fa51
    9eec:	2000f2a1 	.word	0x2000f2a1
    9ef0:	2000a674 	.word	0x2000a674
    9ef4:	0001ea4c 	.word	0x0001ea4c
    9ef8:	2000f2b5 	.word	0x2000f2b5
    9efc:	0001fa37 	.word	0x0001fa37
    9f00:	2000f2c6 	.word	0x2000f2c6
    9f04:	0001fa44 	.word	0x0001fa44
    9f08:	20008566 	.word	0x20008566
    9f0c:	0001ea5c 	.word	0x0001ea5c
    9f10:	20008567 	.word	0x20008567
    9f14:	0001ea6c 	.word	0x0001ea6c

00009f18 <_ZN13deviceManager12disconnectedEP7bt_connh>:
{
    9f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f1c:	b096      	sub	sp, #88	; 0x58
    9f1e:	460e      	mov	r6, r1
	uint8_t err = bt_conn_get_info(conn,&info);
    9f20:	a907      	add	r1, sp, #28
{
    9f22:	4607      	mov	r7, r0
	uint8_t err = bt_conn_get_info(conn,&info);
    9f24:	f007 fd4e 	bl	119c4 <bt_conn_get_info>
	if (err)
    9f28:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    9f2c:	d005      	beq.n	9f3a <_ZN13deviceManager12disconnectedEP7bt_connh+0x22>
		printk("Cannot get info of connection object\n");
    9f2e:	485e      	ldr	r0, [pc, #376]	; (a0a8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x190>)
    9f30:	f010 fdc0 	bl	1aab4 <printk>
}
    9f34:	b016      	add	sp, #88	; 0x58
    9f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9f3a:	f89d 401d 	ldrb.w	r4, [sp, #29]
    9f3e:	2c01      	cmp	r4, #1
    9f40:	d109      	bne.n	9f56 <_ZN13deviceManager12disconnectedEP7bt_connh+0x3e>
		printk("Disconnected from Application (reason %u)\n", reason);		
    9f42:	4631      	mov	r1, r6
    9f44:	4859      	ldr	r0, [pc, #356]	; (a0ac <_ZN13deviceManager12disconnectedEP7bt_connh+0x194>)
    9f46:	f010 fdb5 	bl	1aab4 <printk>
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9f4a:	4628      	mov	r0, r5
    9f4c:	f013 fd26 	bl	1d99c <dk_set_led_off>
		startAdvertising();
    9f50:	f7ff fbdc 	bl	970c <_ZN13deviceManager16startAdvertisingEv>
    9f54:	e7ee      	b.n	9f34 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1c>
	else if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9f56:	2c00      	cmp	r4, #0
    9f58:	d1ec      	bne.n	9f34 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1c>
		subscriptionDone = false;
    9f5a:	4d55      	ldr	r5, [pc, #340]	; (a0b0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x198>)
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9f5c:	4638      	mov	r0, r7
		subscriptionDone = false;
    9f5e:	702c      	strb	r4, [r5, #0]
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9f60:	f012 faa0 	bl	1c4a4 <bt_conn_get_dst>
    9f64:	221e      	movs	r2, #30
    9f66:	a90e      	add	r1, sp, #56	; 0x38
    9f68:	f7ff fb3e 	bl	95e8 <bt_addr_le_to_str.isra.0>
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    9f6c:	4632      	mov	r2, r6
		if (nbrConnectionsCentral == 0)
    9f6e:	4e51      	ldr	r6, [pc, #324]	; (a0b4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x19c>)
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    9f70:	4851      	ldr	r0, [pc, #324]	; (a0b8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a0>)
    9f72:	a90e      	add	r1, sp, #56	; 0x38
    9f74:	f010 fd9e 	bl	1aab4 <printk>
		if (nbrConnectionsCentral == 0)
    9f78:	7833      	ldrb	r3, [r6, #0]
    9f7a:	b94b      	cbnz	r3, 9f90 <_ZN13deviceManager12disconnectedEP7bt_connh+0x78>
			disconnectedCode[0] = 13;
    9f7c:	230d      	movs	r3, #13
    9f7e:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9f82:	4b4e      	ldr	r3, [pc, #312]	; (a0bc <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a4>)
    9f84:	2201      	movs	r2, #1
    9f86:	6818      	ldr	r0, [r3, #0]
    9f88:	a901      	add	r1, sp, #4
    9f8a:	f000 f931 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
			subscriptionDone = false;
    9f8e:	702c      	strb	r4, [r5, #0]
		if (checkAddresses(addr,sensor1))
    9f90:	494b      	ldr	r1, [pc, #300]	; (a0c0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a8>)
    9f92:	a80e      	add	r0, sp, #56	; 0x38
    9f94:	f010 fcdf 	bl	1a956 <_ZN13deviceManager14checkAddressesEPcS0_>
    9f98:	b1b8      	cbz	r0, 9fca <_ZN13deviceManager12disconnectedEP7bt_connh+0xb2>
			once_sensor1 = true;
    9f9a:	2401      	movs	r4, #1
    9f9c:	4b49      	ldr	r3, [pc, #292]	; (a0c4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1ac>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9f9e:	4620      	mov	r0, r4
			once_sensor1 = true;
    9fa0:	701c      	strb	r4, [r3, #0]
			subscriptionDone = false;
    9fa2:	2300      	movs	r3, #0
    9fa4:	702b      	strb	r3, [r5, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9fa6:	f013 fcf9 	bl	1d99c <dk_set_led_off>
			if (sensorInfos == 7)
    9faa:	4b47      	ldr	r3, [pc, #284]	; (a0c8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1b0>)
    9fac:	781b      	ldrb	r3, [r3, #0]
    9fae:	2b07      	cmp	r3, #7
    9fb0:	4b42      	ldr	r3, [pc, #264]	; (a0bc <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a4>)
    9fb2:	d15f      	bne.n	a074 <_ZN13deviceManager12disconnectedEP7bt_connh+0x15c>
				reconnectedHeartRate = true;
    9fb4:	4a45      	ldr	r2, [pc, #276]	; (a0cc <_ZN13deviceManager12disconnectedEP7bt_connh+0x1b4>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9fb6:	6818      	ldr	r0, [r3, #0]
				reconnectedHeartRate = true;
    9fb8:	7014      	strb	r4, [r2, #0]
				disconnectedCode[0] = 12;
    9fba:	220c      	movs	r2, #12
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9fbc:	a901      	add	r1, sp, #4
				disconnectedCode[0] = 12;
    9fbe:	f88d 2004 	strb.w	r2, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9fc2:	4622      	mov	r2, r4
    9fc4:	f000 f914 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
				typeToReconnect = TYPE_HEARTRATE;
    9fc8:	2403      	movs	r4, #3
		if (checkAddresses(addr,sensor2))
    9fca:	4941      	ldr	r1, [pc, #260]	; (a0d0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1b8>)
    9fcc:	a80e      	add	r0, sp, #56	; 0x38
    9fce:	f010 fcc2 	bl	1a956 <_ZN13deviceManager14checkAddressesEPcS0_>
    9fd2:	b1a8      	cbz	r0, a000 <_ZN13deviceManager12disconnectedEP7bt_connh+0xe8>
			once_sensor2 = true;
    9fd4:	2401      	movs	r4, #1
    9fd6:	4b3f      	ldr	r3, [pc, #252]	; (a0d4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1bc>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9fd8:	4620      	mov	r0, r4
			once_sensor2 = true;
    9fda:	701c      	strb	r4, [r3, #0]
			subscriptionDone = false;
    9fdc:	2300      	movs	r3, #0
    9fde:	702b      	strb	r3, [r5, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9fe0:	f013 fcdc 	bl	1d99c <dk_set_led_off>
			if (sensorInfos == 3 || sensorInfos == 4)
    9fe4:	4b38      	ldr	r3, [pc, #224]	; (a0c8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1b0>)
    9fe6:	781b      	ldrb	r3, [r3, #0]
    9fe8:	3b03      	subs	r3, #3
    9fea:	42a3      	cmp	r3, r4
    9fec:	4b33      	ldr	r3, [pc, #204]	; (a0bc <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a4>)
    9fee:	d84a      	bhi.n	a086 <_ZN13deviceManager12disconnectedEP7bt_connh+0x16e>
				disconnectedCode[0] = 11;
    9ff0:	220b      	movs	r2, #11
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9ff2:	6818      	ldr	r0, [r3, #0]
				disconnectedCode[0] = 11;
    9ff4:	f88d 2004 	strb.w	r2, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9ff8:	a901      	add	r1, sp, #4
    9ffa:	4622      	mov	r2, r4
    9ffc:	f000 f8f8 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
		if (checkAddresses(addr,sensor3))
    a000:	4935      	ldr	r1, [pc, #212]	; (a0d8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1c0>)
    a002:	a80e      	add	r0, sp, #56	; 0x38
    a004:	f010 fca7 	bl	1a956 <_ZN13deviceManager14checkAddressesEPcS0_>
    a008:	b198      	cbz	r0, a032 <_ZN13deviceManager12disconnectedEP7bt_connh+0x11a>
			reconnectedHeartRate = true;
    a00a:	2401      	movs	r4, #1
    a00c:	4b2f      	ldr	r3, [pc, #188]	; (a0cc <_ZN13deviceManager12disconnectedEP7bt_connh+0x1b4>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    a00e:	4620      	mov	r0, r4
			reconnectedHeartRate = true;
    a010:	701c      	strb	r4, [r3, #0]
			subscriptionDone = false;
    a012:	2300      	movs	r3, #0
    a014:	702b      	strb	r3, [r5, #0]
			once_sensor3 = true;
    a016:	4b31      	ldr	r3, [pc, #196]	; (a0dc <_ZN13deviceManager12disconnectedEP7bt_connh+0x1c4>)
    a018:	701c      	strb	r4, [r3, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    a01a:	f013 fcbf 	bl	1d99c <dk_set_led_off>
			disconnectedCode[0] = 12;
    a01e:	230c      	movs	r3, #12
    a020:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a024:	4b25      	ldr	r3, [pc, #148]	; (a0bc <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a4>)
    a026:	4622      	mov	r2, r4
    a028:	6818      	ldr	r0, [r3, #0]
    a02a:	a901      	add	r1, sp, #4
    a02c:	f000 f8e0 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
			typeToReconnect = TYPE_HEARTRATE;
    a030:	2403      	movs	r4, #3
    a032:	2700      	movs	r7, #0
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    a034:	f8df 80a8 	ldr.w	r8, [pc, #168]	; a0e0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1c8>
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    a038:	7833      	ldrb	r3, [r6, #0]
    a03a:	b2fd      	uxtb	r5, r7
    a03c:	3b01      	subs	r3, #1
    a03e:	429d      	cmp	r5, r3
    a040:	dc2d      	bgt.n	a09e <_ZN13deviceManager12disconnectedEP7bt_connh+0x186>
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    a042:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
    a046:	f012 fa2d 	bl	1c4a4 <bt_conn_get_dst>
    a04a:	a902      	add	r1, sp, #8
    a04c:	2212      	movs	r2, #18
    a04e:	f7ff facb 	bl	95e8 <bt_addr_le_to_str.isra.0>
			if (checkAddresses(addr,addrToFind))
    a052:	a902      	add	r1, sp, #8
    a054:	a80e      	add	r0, sp, #56	; 0x38
    a056:	f010 fc7e 	bl	1a956 <_ZN13deviceManager14checkAddressesEPcS0_>
    a05a:	b148      	cbz	r0, a070 <_ZN13deviceManager12disconnectedEP7bt_connh+0x158>
				bt_conn_unref(centralConnections[i]);
    a05c:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
    a060:	f007 fb1e 	bl	116a0 <bt_conn_unref>
				centralConnections[i] = nullptr;
    a064:	2300      	movs	r3, #0
    a066:	f848 3025 	str.w	r3, [r8, r5, lsl #2]
				nbrConnectionsCentral--;
    a06a:	7833      	ldrb	r3, [r6, #0]
    a06c:	3b01      	subs	r3, #1
    a06e:	7033      	strb	r3, [r6, #0]
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    a070:	3701      	adds	r7, #1
    a072:	e7e1      	b.n	a038 <_ZN13deviceManager12disconnectedEP7bt_connh+0x120>
				disconnectedCode[0] = 11;
    a074:	220b      	movs	r2, #11
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a076:	6818      	ldr	r0, [r3, #0]
				disconnectedCode[0] = 11;
    a078:	f88d 2004 	strb.w	r2, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a07c:	a901      	add	r1, sp, #4
    a07e:	4622      	mov	r2, r4
    a080:	f000 f8b6 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
    a084:	e7a1      	b.n	9fca <_ZN13deviceManager12disconnectedEP7bt_connh+0xb2>
				reconnectedHeartRate = true;
    a086:	4a11      	ldr	r2, [pc, #68]	; (a0cc <_ZN13deviceManager12disconnectedEP7bt_connh+0x1b4>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a088:	6818      	ldr	r0, [r3, #0]
				reconnectedHeartRate = true;
    a08a:	7014      	strb	r4, [r2, #0]
				disconnectedCode[0] = 12;
    a08c:	220c      	movs	r2, #12
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a08e:	a901      	add	r1, sp, #4
				disconnectedCode[0] = 12;
    a090:	f88d 2004 	strb.w	r2, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    a094:	4622      	mov	r2, r4
    a096:	f000 f8ab 	bl	a1f0 <_Z17data_service_sendP7bt_connPKht>
				typeToReconnect = TYPE_HEARTRATE;
    a09a:	2403      	movs	r4, #3
    a09c:	e7b0      	b.n	a000 <_ZN13deviceManager12disconnectedEP7bt_connh+0xe8>
		reScan(typeToReconnect);
    a09e:	4620      	mov	r0, r4
    a0a0:	f7ff fd8a 	bl	9bb8 <_ZN13deviceManager6reScanEh>
    a0a4:	e746      	b.n	9f34 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1c>
    a0a6:	bf00      	nop
    a0a8:	0001f99f 	.word	0x0001f99f
    a0ac:	0001fa67 	.word	0x0001fa67
    a0b0:	2000f29f 	.word	0x2000f29f
    a0b4:	2000f2a1 	.word	0x2000f2a1
    a0b8:	0001fa92 	.word	0x0001fa92
    a0bc:	2000a5f8 	.word	0x2000a5f8
    a0c0:	2000f2a4 	.word	0x2000f2a4
    a0c4:	20008565 	.word	0x20008565
    a0c8:	2000f29b 	.word	0x2000f29b
    a0cc:	2000f2a0 	.word	0x2000f2a0
    a0d0:	2000f2b5 	.word	0x2000f2b5
    a0d4:	20008566 	.word	0x20008566
    a0d8:	2000f2c6 	.word	0x2000f2c6
    a0dc:	20008567 	.word	0x20008567
    a0e0:	2000a674 	.word	0x2000a674

0000a0e4 <_ZN7dataCSC8saveDataEPKv>:
    type = ((uint8_t*)data)[0];
    a0e4:	780b      	ldrb	r3, [r1, #0]
    switch (type)
    a0e6:	2b01      	cmp	r3, #1
    type = ((uint8_t*)data)[0];
    a0e8:	7403      	strb	r3, [r0, #16]
    switch (type)
    a0ea:	d004      	beq.n	a0f6 <_ZN7dataCSC8saveDataEPKv+0x12>
    a0ec:	2b02      	cmp	r3, #2
    a0ee:	d00d      	beq.n	a10c <_ZN7dataCSC8saveDataEPKv+0x28>
        printk("Unknown type\n");
    a0f0:	480c      	ldr	r0, [pc, #48]	; (a124 <_ZN7dataCSC8saveDataEPKv+0x40>)
    a0f2:	f010 bcdf 	b.w	1aab4 <printk>
        oldSumRevSpeed = sumRevSpeed;
    a0f6:	8803      	ldrh	r3, [r0, #0]
    a0f8:	8043      	strh	r3, [r0, #2]
        oldLastEventSpeed = lastEventSpeed;
    a0fa:	8903      	ldrh	r3, [r0, #8]
    a0fc:	8143      	strh	r3, [r0, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    a0fe:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        sumRevSpeed = sys_get_le16(&((uint8_t*)data)[1]);
    a102:	8003      	strh	r3, [r0, #0]
    a104:	f8b1 3005 	ldrh.w	r3, [r1, #5]
		lastEventSpeed = sys_get_le16(&((uint8_t*)data)[5]);
    a108:	8103      	strh	r3, [r0, #8]
        break;
    a10a:	4770      	bx	lr
        oldSumRevCadence = sumRevCadence;
    a10c:	8883      	ldrh	r3, [r0, #4]
    a10e:	80c3      	strh	r3, [r0, #6]
        oldLastEventCadence  = lastEventCadence;
    a110:	8983      	ldrh	r3, [r0, #12]
    a112:	81c3      	strh	r3, [r0, #14]
    a114:	f8b1 3001 	ldrh.w	r3, [r1, #1]
		sumRevCadence = sys_get_le16(&((uint8_t*)data)[1]);
    a118:	8083      	strh	r3, [r0, #4]
    a11a:	f8b1 3003 	ldrh.w	r3, [r1, #3]
		lastEventCadence  = sys_get_le16(&((uint8_t*)data)[3]);
    a11e:	8183      	strh	r3, [r0, #12]
}
    a120:	4770      	bx	lr
    a122:	bf00      	nop
    a124:	0001fad2 	.word	0x0001fad2

0000a128 <_ZN7dataCSC7calcRPMEv>:
{
    a128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    a12c:	8985      	ldrh	r5, [r0, #12]
    a12e:	89c3      	ldrh	r3, [r0, #14]
{
    a130:	4604      	mov	r4, r0
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    a132:	429d      	cmp	r5, r3
    a134:	d02f      	beq.n	a196 <_ZN7dataCSC7calcRPMEv+0x6e>
    uint16_t nbrRev = sumRevCadence-oldSumRevCadence;
    a136:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    a13a:	f8b0 9006 	ldrh.w	r9, [r0, #6]
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    a13e:	45c8      	cmp	r8, r9
    a140:	d029      	beq.n	a196 <_ZN7dataCSC7calcRPMEv+0x6e>
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    a142:	1aed      	subs	r5, r5, r3
    a144:	4628      	mov	r0, r5
    a146:	f7fe f9cd 	bl	84e4 <__aeabi_i2d>
    a14a:	2200      	movs	r2, #0
    a14c:	4b13      	ldr	r3, [pc, #76]	; (a19c <_ZN7dataCSC7calcRPMEv+0x74>)
    a14e:	f7fe fa33 	bl	85b8 <__aeabi_dmul>
        if (time < 0)
    a152:	2200      	movs	r2, #0
    a154:	2300      	movs	r3, #0
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    a156:	4606      	mov	r6, r0
    a158:	460f      	mov	r7, r1
        if (time < 0)
    a15a:	f7fe fc9f 	bl	8a9c <__aeabi_dcmplt>
    a15e:	b130      	cbz	r0, a16e <_ZN7dataCSC7calcRPMEv+0x46>
            time = 0xffff - oldLastEventCadence + lastEventCadence;
    a160:	f505 407f 	add.w	r0, r5, #65280	; 0xff00
    a164:	30ff      	adds	r0, #255	; 0xff
    a166:	f7fe f9bd 	bl	84e4 <__aeabi_i2d>
    a16a:	4606      	mov	r6, r0
    a16c:	460f      	mov	r7, r1
        rpm = (sumRevCadence - oldSumRevCadence) * 60 / time;
    a16e:	203c      	movs	r0, #60	; 0x3c
    a170:	eba8 0809 	sub.w	r8, r8, r9
    a174:	fb00 f008 	mul.w	r0, r0, r8
    a178:	f7fe f9b4 	bl	84e4 <__aeabi_i2d>
    a17c:	4632      	mov	r2, r6
    a17e:	463b      	mov	r3, r7
    a180:	f7fe fb44 	bl	880c <__aeabi_ddiv>
    a184:	4602      	mov	r2, r0
    a186:	460b      	mov	r3, r1
    a188:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
        retVal = (uint16_t) rpm;
    a18c:	f7fe fcae 	bl	8aec <__aeabi_d2uiz>
    a190:	b280      	uxth	r0, r0
}
    a192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint16_t retVal = 0;
    a196:	2000      	movs	r0, #0
    a198:	e7fb      	b.n	a192 <_ZN7dataCSC7calcRPMEv+0x6a>
    a19a:	bf00      	nop
    a19c:	3f500000 	.word	0x3f500000

0000a1a0 <_Z15on_cccd_changedPK12bt_gatt_attrt>:
{
    ARG_UNUSED(attr);

    uint8_t notificationsCode[1];

    switch(value)
    a1a0:	2901      	cmp	r1, #1
    a1a2:	d004      	beq.n	a1ae <_Z15on_cccd_changedPK12bt_gatt_attrt+0xe>
    a1a4:	2902      	cmp	r1, #2
    a1a6:	d005      	beq.n	a1b4 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x14>
    a1a8:	b931      	cbnz	r1, a1b8 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x18>
            printk("Notifications ON with Indications\n");
            break;

        case 0: 
            // Stop sending stuff
            printk("Notifications OFF\n");
    a1aa:	4804      	ldr	r0, [pc, #16]	; (a1bc <_Z15on_cccd_changedPK12bt_gatt_attrt+0x1c>)
    a1ac:	e000      	b.n	a1b0 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Notifications ON\n");
    a1ae:	4804      	ldr	r0, [pc, #16]	; (a1c0 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x20>)
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value\n");     
    a1b0:	f010 bc80 	b.w	1aab4 <printk>
            printk("Notifications ON with Indications\n");
    a1b4:	4803      	ldr	r0, [pc, #12]	; (a1c4 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x24>)
    a1b6:	e7fb      	b.n	a1b0 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Error, CCCD has been set to an invalid value\n");     
    a1b8:	4803      	ldr	r0, [pc, #12]	; (a1c8 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x28>)
    a1ba:	e7f9      	b.n	a1b0 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
    a1bc:	0001fb15 	.word	0x0001fb15
    a1c0:	0001fae0 	.word	0x0001fae0
    a1c4:	0001faf2 	.word	0x0001faf2
    a1c8:	0001fb28 	.word	0x0001fb28

0000a1cc <_Z17data_service_initv>:
{
    a1cc:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
    a1ce:	22f0      	movs	r2, #240	; 0xf0
    a1d0:	2100      	movs	r1, #0
    a1d2:	4805      	ldr	r0, [pc, #20]	; (a1e8 <_Z17data_service_initv+0x1c>)
    a1d4:	f011 fedd 	bl	1bf92 <memset>
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
    a1d8:	22f0      	movs	r2, #240	; 0xf0
    a1da:	2100      	movs	r1, #0
    a1dc:	4803      	ldr	r0, [pc, #12]	; (a1ec <_Z17data_service_initv+0x20>)
    a1de:	f011 fed8 	bl	1bf92 <memset>
}
    a1e2:	2000      	movs	r0, #0
    a1e4:	bd08      	pop	{r3, pc}
    a1e6:	bf00      	nop
    a1e8:	2000f312 	.word	0x2000f312
    a1ec:	2000f402 	.word	0x2000f402

0000a1f0 <_Z17data_service_sendP7bt_connPKht>:
     * to check whether notification has been enabled by the peer or not.
     * Attribute table: 0 = Service, 1 = Primary service, 2 = RX, 3 = TX, 4 = CCC.
     */
    const struct bt_gatt_attr *attr = &data_service.attrs[3]; 

    struct bt_gatt_notify_params params = 
    a1f0:	2300      	movs	r3, #0
{
    a1f2:	b510      	push	{r4, lr}
    a1f4:	b086      	sub	sp, #24
    struct bt_gatt_notify_params params = 
    a1f6:	9303      	str	r3, [sp, #12]
    a1f8:	9305      	str	r3, [sp, #20]
    a1fa:	4b0d      	ldr	r3, [pc, #52]	; (a230 <_Z17data_service_sendP7bt_connPKht+0x40>)
        .uuid   = BT_UUID_DATA_SERVICE_TX,
        .attr   = attr,
        .data   = data,
        .len    = len,
        .func   = on_sent
    };
    a1fc:	f8ad 200c 	strh.w	r2, [sp, #12]
    struct bt_gatt_notify_params params = 
    a200:	9300      	str	r3, [sp, #0]
    a202:	4b0c      	ldr	r3, [pc, #48]	; (a234 <_Z17data_service_sendP7bt_connPKht+0x44>)

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    a204:	2201      	movs	r2, #1
    struct bt_gatt_notify_params params = 
    a206:	9304      	str	r3, [sp, #16]
    };
    a208:	4b0b      	ldr	r3, [pc, #44]	; (a238 <_Z17data_service_sendP7bt_connPKht+0x48>)
{
    a20a:	4604      	mov	r4, r0
    };
    a20c:	e9cd 3101 	strd	r3, r1, [sp, #4]
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    a210:	4619      	mov	r1, r3
    a212:	f00a fa2f 	bl	14674 <bt_gatt_is_subscribed>
    a216:	b148      	cbz	r0, a22c <_Z17data_service_sendP7bt_connPKht+0x3c>
    {
        // Send the notification
	    if(bt_gatt_notify_cb(conn, &params))
    a218:	4669      	mov	r1, sp
    a21a:	4620      	mov	r0, r4
    a21c:	f00a f848 	bl	142b0 <bt_gatt_notify_cb>
    a220:	b110      	cbz	r0, a228 <_Z17data_service_sendP7bt_connPKht+0x38>
        {
            printk("Error, unable to send notification\n");
    a222:	4806      	ldr	r0, [pc, #24]	; (a23c <_Z17data_service_sendP7bt_connPKht+0x4c>)
        }
    }
    else
    {
        printk("Warning, notification not enabled on the selected attribute\n");
    a224:	f010 fc46 	bl	1aab4 <printk>
    }
}
    a228:	b006      	add	sp, #24
    a22a:	bd10      	pop	{r4, pc}
        printk("Warning, notification not enabled on the selected attribute\n");
    a22c:	4804      	ldr	r0, [pc, #16]	; (a240 <_Z17data_service_sendP7bt_connPKht+0x50>)
    a22e:	e7f9      	b.n	a224 <_Z17data_service_sendP7bt_connPKht+0x34>
    a230:	0001fc3d 	.word	0x0001fc3d
    a234:	0001a97d 	.word	0x0001a97d
    a238:	0001eb1c 	.word	0x0001eb1c
    a23c:	0001fb87 	.word	0x0001fb87
    a240:	0001fbab 	.word	0x0001fbab

0000a244 <_Z11getDiameterv>:

double getDiameter() 
{
    return dia;
}
    a244:	4b01      	ldr	r3, [pc, #4]	; (a24c <_Z11getDiameterv+0x8>)
    a246:	e9d3 0100 	ldrd	r0, r1, [r3]
    a24a:	4770      	bx	lr
    a24c:	20008810 	.word	0x20008810

0000a250 <_Z17getNbrOfAddressesv>:

uint8_t getNbrOfAddresses() 
{
    return nbrAddresses;
}
    a250:	4b01      	ldr	r3, [pc, #4]	; (a258 <_Z17getNbrOfAddressesv+0x8>)
    a252:	7818      	ldrb	r0, [r3, #0]
    a254:	4770      	bx	lr
    a256:	bf00      	nop
    a258:	2000f4f4 	.word	0x2000f4f4

0000a25c <_Z10getAddressPch>:

void getAddress(char* outArray, uint8_t nbr) 
{
    switch (nbr)
    a25c:	2902      	cmp	r1, #2
    a25e:	d00d      	beq.n	a27c <_Z10getAddressPch+0x20>
    a260:	2903      	cmp	r1, #3
    a262:	d015      	beq.n	a290 <_Z10getAddressPch+0x34>
    a264:	2901      	cmp	r1, #1
    a266:	d11c      	bne.n	a2a2 <_Z10getAddressPch+0x46>
    a268:	4a0e      	ldr	r2, [pc, #56]	; (a2a4 <_Z10getAddressPch+0x48>)
    a26a:	1e43      	subs	r3, r0, #1
    a26c:	3010      	adds	r0, #16
    {
    case 1:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address1[i];
    a26e:	f812 1b01 	ldrb.w	r1, [r2], #1
    a272:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a276:	4283      	cmp	r3, r0
    a278:	d1f9      	bne.n	a26e <_Z10getAddressPch+0x12>
    a27a:	4770      	bx	lr
    a27c:	4a0a      	ldr	r2, [pc, #40]	; (a2a8 <_Z10getAddressPch+0x4c>)
    a27e:	1e43      	subs	r3, r0, #1
    a280:	3010      	adds	r0, #16
        }    
        break;
    case 2:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address2[i];
    a282:	f812 1b01 	ldrb.w	r1, [r2], #1
    a286:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a28a:	4283      	cmp	r3, r0
    a28c:	d1f9      	bne.n	a282 <_Z10getAddressPch+0x26>
    a28e:	4770      	bx	lr
    a290:	4a06      	ldr	r2, [pc, #24]	; (a2ac <_Z10getAddressPch+0x50>)
    a292:	1e43      	subs	r3, r0, #1
    a294:	3010      	adds	r0, #16
        }    
        break;
    case 3:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address3[i];
    a296:	f812 1b01 	ldrb.w	r1, [r2], #1
    a29a:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a29e:	4283      	cmp	r3, r0
    a2a0:	d1f9      	bne.n	a296 <_Z10getAddressPch+0x3a>
        break;
    
    default:
        break;
    }
}
    a2a2:	4770      	bx	lr
    a2a4:	2000f2de 	.word	0x2000f2de
    a2a8:	2000f2ef 	.word	0x2000f2ef
    a2ac:	2000f300 	.word	0x2000f300

0000a2b0 <_Z14getSensorInfosv>:

uint8_t getSensorInfos() 
{
    return infoSensors;
}
    a2b0:	4b01      	ldr	r3, [pc, #4]	; (a2b8 <_Z14getSensorInfosv+0x8>)
    a2b2:	7818      	ldrb	r0, [r3, #0]
    a2b4:	4770      	bx	lr
    a2b6:	bf00      	nop
    a2b8:	2000f4f3 	.word	0x2000f4f3

0000a2bc <discovery_service_not_found_cb>:
	}
}

void discovery_service_not_found_cb(struct bt_conn *conn, void *context)
{
	printk("The service could not be found during the discovery\n");
    a2bc:	4801      	ldr	r0, [pc, #4]	; (a2c4 <discovery_service_not_found_cb+0x8>)
    a2be:	f010 bbf9 	b.w	1aab4 <printk>
    a2c2:	bf00      	nop
    a2c4:	0001fc4e 	.word	0x0001fc4e

0000a2c8 <discovery_error_found_cb>:

void discovery_error_found_cb(struct bt_conn *conn,
				     int err,
				     void *context)
{
	printk("The discovery procedure failed with %d\n", err);
    a2c8:	4801      	ldr	r0, [pc, #4]	; (a2d0 <discovery_error_found_cb+0x8>)
    a2ca:	f010 bbf3 	b.w	1aab4 <printk>
    a2ce:	bf00      	nop
    a2d0:	0001fc83 	.word	0x0001fc83

0000a2d4 <bt_addr_le_to_str.constprop.0.isra.0>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a2d4:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    a2d6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a2d8:	b08a      	sub	sp, #40	; 0x28
    a2da:	4604      	mov	r4, r0
    a2dc:	460e      	mov	r6, r1
    a2de:	ad07      	add	r5, sp, #28
    a2e0:	2b03      	cmp	r3, #3
    a2e2:	d820      	bhi.n	a326 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    a2e4:	e8df f003 	tbb	[pc, r3]
    a2e8:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    a2ec:	4911      	ldr	r1, [pc, #68]	; (a334 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		strcpy(type, "random");
    a2ee:	4628      	mov	r0, r5
    a2f0:	f011 fdca 	bl	1be88 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    a2f4:	7863      	ldrb	r3, [r4, #1]
    a2f6:	211e      	movs	r1, #30
    a2f8:	9304      	str	r3, [sp, #16]
    a2fa:	78a3      	ldrb	r3, [r4, #2]
    a2fc:	4630      	mov	r0, r6
    a2fe:	9303      	str	r3, [sp, #12]
    a300:	78e3      	ldrb	r3, [r4, #3]
    a302:	4a0d      	ldr	r2, [pc, #52]	; (a338 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    a304:	9302      	str	r3, [sp, #8]
    a306:	7923      	ldrb	r3, [r4, #4]
    a308:	9505      	str	r5, [sp, #20]
    a30a:	9301      	str	r3, [sp, #4]
    a30c:	7963      	ldrb	r3, [r4, #5]
    a30e:	9300      	str	r3, [sp, #0]
    a310:	79a3      	ldrb	r3, [r4, #6]
    a312:	f010 fbdc 	bl	1aace <snprintk>
}
    a316:	b00a      	add	sp, #40	; 0x28
    a318:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    a31a:	4908      	ldr	r1, [pc, #32]	; (a33c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    a31c:	e7e7      	b.n	a2ee <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    a31e:	4908      	ldr	r1, [pc, #32]	; (a340 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    a320:	e7e5      	b.n	a2ee <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    a322:	4908      	ldr	r1, [pc, #32]	; (a344 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    a324:	e7e3      	b.n	a2ee <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    a326:	210a      	movs	r1, #10
    a328:	4628      	mov	r0, r5
    a32a:	4a07      	ldr	r2, [pc, #28]	; (a348 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    a32c:	f010 fbcf 	bl	1aace <snprintk>
		break;
    a330:	e7e0      	b.n	a2f4 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    a332:	bf00      	nop
    a334:	0001f6a4 	.word	0x0001f6a4
    a338:	0001f6cd 	.word	0x0001f6cd
    a33c:	0001f6ab 	.word	0x0001f6ab
    a340:	0001f6b2 	.word	0x0001f6b2
    a344:	0001f6bc 	.word	0x0001f6bc
    a348:	0001f6c6 	.word	0x0001f6c6

0000a34c <notify_battery_level_cb_speed>:
	return err;
}

void notify_battery_level_cb_speed(struct bt_bas_client *bas,
				    uint8_t battery_level)
{
    a34c:	b510      	push	{r4, lr}
    a34e:	460c      	mov	r4, r1
    a350:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a352:	f011 f866 	bl	1b422 <bt_bas_conn>
    a356:	f012 f8a5 	bl	1c4a4 <bt_conn_get_dst>
    a35a:	4669      	mov	r1, sp
    a35c:	f7ff ffba 	bl	a2d4 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (battery_level == BT_BAS_VAL_INVALID) 
    a360:	2cff      	cmp	r4, #255	; 0xff
    a362:	d107      	bne.n	a374 <notify_battery_level_cb_speed+0x28>
	{
		printk("[%s] Battery notification aborted\n", addr);
    a364:	4669      	mov	r1, sp
    a366:	4806      	ldr	r0, [pc, #24]	; (a380 <notify_battery_level_cb_speed+0x34>)
    a368:	f010 fba4 	bl	1aab4 <printk>
	else 
	{
		printk("[%s] Battery notification: %"PRIu8"%%\n",
		       addr, battery_level);
	}
	batteryLevel_speed = battery_level;
    a36c:	4b05      	ldr	r3, [pc, #20]	; (a384 <notify_battery_level_cb_speed+0x38>)
    a36e:	701c      	strb	r4, [r3, #0]
}
    a370:	b008      	add	sp, #32
    a372:	bd10      	pop	{r4, pc}
		printk("[%s] Battery notification: %"PRIu8"%%\n",
    a374:	4622      	mov	r2, r4
    a376:	4669      	mov	r1, sp
    a378:	4803      	ldr	r0, [pc, #12]	; (a388 <notify_battery_level_cb_speed+0x3c>)
    a37a:	f010 fb9b 	bl	1aab4 <printk>
    a37e:	e7f5      	b.n	a36c <notify_battery_level_cb_speed+0x20>
    a380:	0001fcab 	.word	0x0001fcab
    a384:	2000f4f7 	.word	0x2000f4f7
    a388:	0001fcce 	.word	0x0001fcce

0000a38c <notify_battery_level_cb_cadence>:

void notify_battery_level_cb_cadence(struct bt_bas_client *bas,
				    uint8_t battery_level)
{
    a38c:	b510      	push	{r4, lr}
    a38e:	460c      	mov	r4, r1
    a390:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a392:	f011 f846 	bl	1b422 <bt_bas_conn>
    a396:	f012 f885 	bl	1c4a4 <bt_conn_get_dst>
    a39a:	4669      	mov	r1, sp
    a39c:	f7ff ff9a 	bl	a2d4 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (battery_level == BT_BAS_VAL_INVALID) 
    a3a0:	2cff      	cmp	r4, #255	; 0xff
    a3a2:	d107      	bne.n	a3b4 <notify_battery_level_cb_cadence+0x28>
	{
		printk("[%s] Battery notification aborted\n", addr);
    a3a4:	4669      	mov	r1, sp
    a3a6:	4806      	ldr	r0, [pc, #24]	; (a3c0 <notify_battery_level_cb_cadence+0x34>)
    a3a8:	f010 fb84 	bl	1aab4 <printk>
	else 
	{
		printk("[%s] Battery notification: %"PRIu8"%%\n",
		       addr, battery_level);
	}
	batteryLevel_cadence = battery_level;
    a3ac:	4b05      	ldr	r3, [pc, #20]	; (a3c4 <notify_battery_level_cb_cadence+0x38>)
    a3ae:	701c      	strb	r4, [r3, #0]
}
    a3b0:	b008      	add	sp, #32
    a3b2:	bd10      	pop	{r4, pc}
		printk("[%s] Battery notification: %"PRIu8"%%\n",
    a3b4:	4622      	mov	r2, r4
    a3b6:	4669      	mov	r1, sp
    a3b8:	4803      	ldr	r0, [pc, #12]	; (a3c8 <notify_battery_level_cb_cadence+0x3c>)
    a3ba:	f010 fb7b 	bl	1aab4 <printk>
    a3be:	e7f5      	b.n	a3ac <notify_battery_level_cb_cadence+0x20>
    a3c0:	0001fcab 	.word	0x0001fcab
    a3c4:	2000f4f5 	.word	0x2000f4f5
    a3c8:	0001fcce 	.word	0x0001fcce

0000a3cc <notify_battery_level_cb_heartRate>:

void notify_battery_level_cb_heartRate(struct bt_bas_client *bas,
				    uint8_t battery_level)
{
    a3cc:	b510      	push	{r4, lr}
    a3ce:	460c      	mov	r4, r1
    a3d0:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a3d2:	f011 f826 	bl	1b422 <bt_bas_conn>
    a3d6:	f012 f865 	bl	1c4a4 <bt_conn_get_dst>
    a3da:	4669      	mov	r1, sp
    a3dc:	f7ff ff7a 	bl	a2d4 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (battery_level == BT_BAS_VAL_INVALID) 
    a3e0:	2cff      	cmp	r4, #255	; 0xff
    a3e2:	d107      	bne.n	a3f4 <notify_battery_level_cb_heartRate+0x28>
	{
		printk("[%s] Battery notification aborted\n", addr);
    a3e4:	4669      	mov	r1, sp
    a3e6:	4806      	ldr	r0, [pc, #24]	; (a400 <notify_battery_level_cb_heartRate+0x34>)
    a3e8:	f010 fb64 	bl	1aab4 <printk>
	else 
	{
		printk("[%s] Battery notification: %"PRIu8"%%\n",
		       addr, battery_level);
	}
	batteryLevel_heartRate = battery_level;
    a3ec:	4b05      	ldr	r3, [pc, #20]	; (a404 <notify_battery_level_cb_heartRate+0x38>)
    a3ee:	701c      	strb	r4, [r3, #0]
}
    a3f0:	b008      	add	sp, #32
    a3f2:	bd10      	pop	{r4, pc}
		printk("[%s] Battery notification: %"PRIu8"%%\n",
    a3f4:	4622      	mov	r2, r4
    a3f6:	4669      	mov	r1, sp
    a3f8:	4803      	ldr	r0, [pc, #12]	; (a408 <notify_battery_level_cb_heartRate+0x3c>)
    a3fa:	f010 fb5b 	bl	1aab4 <printk>
    a3fe:	e7f5      	b.n	a3ec <notify_battery_level_cb_heartRate+0x20>
    a400:	0001fcab 	.word	0x0001fcab
    a404:	2000f4f6 	.word	0x2000f4f6
    a408:	0001fcce 	.word	0x0001fcce

0000a40c <read_battery_level_cb_speed>:

void read_battery_level_cb_speed(struct bt_bas_client *bas,
				  uint8_t battery_level,
				  int err)
{
    a40c:	b530      	push	{r4, r5, lr}
    a40e:	4615      	mov	r5, r2
	readySpeed = true;
    a410:	2201      	movs	r2, #1
    a412:	4b0d      	ldr	r3, [pc, #52]	; (a448 <read_battery_level_cb_speed+0x3c>)
{
    a414:	b089      	sub	sp, #36	; 0x24
    a416:	460c      	mov	r4, r1
	readySpeed = true;
    a418:	701a      	strb	r2, [r3, #0]
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a41a:	f011 f802 	bl	1b422 <bt_bas_conn>
    a41e:	f012 f841 	bl	1c4a4 <bt_conn_get_dst>
    a422:	4669      	mov	r1, sp
    a424:	f7ff ff56 	bl	a2d4 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (err) 
    a428:	b135      	cbz	r5, a438 <read_battery_level_cb_speed+0x2c>
	{
		printk("[%s] Battery read ERROR: %d\n", addr, err);
    a42a:	462a      	mov	r2, r5
    a42c:	4669      	mov	r1, sp
    a42e:	4807      	ldr	r0, [pc, #28]	; (a44c <read_battery_level_cb_speed+0x40>)
    a430:	f010 fb40 	bl	1aab4 <printk>
		return;
	}

	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    batteryLevel_speed = battery_level;
}
    a434:	b009      	add	sp, #36	; 0x24
    a436:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    a438:	4622      	mov	r2, r4
    a43a:	4669      	mov	r1, sp
    a43c:	4804      	ldr	r0, [pc, #16]	; (a450 <read_battery_level_cb_speed+0x44>)
    a43e:	f010 fb39 	bl	1aab4 <printk>
    batteryLevel_speed = battery_level;
    a442:	4b04      	ldr	r3, [pc, #16]	; (a454 <read_battery_level_cb_speed+0x48>)
    a444:	701c      	strb	r4, [r3, #0]
    a446:	e7f5      	b.n	a434 <read_battery_level_cb_speed+0x28>
    a448:	2000f4fd 	.word	0x2000f4fd
    a44c:	0001fcef 	.word	0x0001fcef
    a450:	0001fd0c 	.word	0x0001fd0c
    a454:	2000f4f7 	.word	0x2000f4f7

0000a458 <read_battery_level_cb_cadence>:

void read_battery_level_cb_cadence(struct bt_bas_client *bas,
				  uint8_t battery_level,
				  int err)
{
    a458:	b530      	push	{r4, r5, lr}
    a45a:	4615      	mov	r5, r2
	readyCadence = true;
    a45c:	2201      	movs	r2, #1
    a45e:	4b0d      	ldr	r3, [pc, #52]	; (a494 <read_battery_level_cb_cadence+0x3c>)
{
    a460:	b089      	sub	sp, #36	; 0x24
    a462:	460c      	mov	r4, r1
	readyCadence = true;
    a464:	701a      	strb	r2, [r3, #0]
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a466:	f010 ffdc 	bl	1b422 <bt_bas_conn>
    a46a:	f012 f81b 	bl	1c4a4 <bt_conn_get_dst>
    a46e:	4669      	mov	r1, sp
    a470:	f7ff ff30 	bl	a2d4 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (err) 
    a474:	b135      	cbz	r5, a484 <read_battery_level_cb_cadence+0x2c>
	{
		printk("[%s] Battery read ERROR: %d\n", addr, err);
    a476:	462a      	mov	r2, r5
    a478:	4669      	mov	r1, sp
    a47a:	4807      	ldr	r0, [pc, #28]	; (a498 <read_battery_level_cb_cadence+0x40>)
    a47c:	f010 fb1a 	bl	1aab4 <printk>
		return;
	}

	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    batteryLevel_cadence = battery_level;
}
    a480:	b009      	add	sp, #36	; 0x24
    a482:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    a484:	4622      	mov	r2, r4
    a486:	4669      	mov	r1, sp
    a488:	4804      	ldr	r0, [pc, #16]	; (a49c <read_battery_level_cb_cadence+0x44>)
    a48a:	f010 fb13 	bl	1aab4 <printk>
    batteryLevel_cadence = battery_level;
    a48e:	4b04      	ldr	r3, [pc, #16]	; (a4a0 <read_battery_level_cb_cadence+0x48>)
    a490:	701c      	strb	r4, [r3, #0]
    a492:	e7f5      	b.n	a480 <read_battery_level_cb_cadence+0x28>
    a494:	2000f4fb 	.word	0x2000f4fb
    a498:	0001fcef 	.word	0x0001fcef
    a49c:	0001fd0c 	.word	0x0001fd0c
    a4a0:	2000f4f5 	.word	0x2000f4f5

0000a4a4 <read_battery_level_cb_heartRate>:

void read_battery_level_cb_heartRate(struct bt_bas_client *bas,
				  uint8_t battery_level,
				  int err)
{
    a4a4:	b530      	push	{r4, r5, lr}
    a4a6:	4615      	mov	r5, r2
	readyHeartRate = true;
    a4a8:	2201      	movs	r2, #1
    a4aa:	4b0d      	ldr	r3, [pc, #52]	; (a4e0 <read_battery_level_cb_heartRate+0x3c>)
{
    a4ac:	b089      	sub	sp, #36	; 0x24
    a4ae:	460c      	mov	r4, r1
	readyHeartRate = true;
    a4b0:	701a      	strb	r2, [r3, #0]
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a4b2:	f010 ffb6 	bl	1b422 <bt_bas_conn>
    a4b6:	f011 fff5 	bl	1c4a4 <bt_conn_get_dst>
    a4ba:	4669      	mov	r1, sp
    a4bc:	f7ff ff0a 	bl	a2d4 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (err) 
    a4c0:	b135      	cbz	r5, a4d0 <read_battery_level_cb_heartRate+0x2c>
	{
		printk("[%s] Battery read ERROR: %d\n", addr, err);
    a4c2:	462a      	mov	r2, r5
    a4c4:	4669      	mov	r1, sp
    a4c6:	4807      	ldr	r0, [pc, #28]	; (a4e4 <read_battery_level_cb_heartRate+0x40>)
    a4c8:	f010 faf4 	bl	1aab4 <printk>
		return;
	}

	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    batteryLevel_heartRate = battery_level;
}
    a4cc:	b009      	add	sp, #36	; 0x24
    a4ce:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    a4d0:	4622      	mov	r2, r4
    a4d2:	4669      	mov	r1, sp
    a4d4:	4804      	ldr	r0, [pc, #16]	; (a4e8 <read_battery_level_cb_heartRate+0x44>)
    a4d6:	f010 faed 	bl	1aab4 <printk>
    batteryLevel_heartRate = battery_level;
    a4da:	4b04      	ldr	r3, [pc, #16]	; (a4ec <read_battery_level_cb_heartRate+0x48>)
    a4dc:	701c      	strb	r4, [r3, #0]
    a4de:	e7f5      	b.n	a4cc <read_battery_level_cb_heartRate+0x28>
    a4e0:	2000f4fc 	.word	0x2000f4fc
    a4e4:	0001fcef 	.word	0x0001fcef
    a4e8:	0001fd0c 	.word	0x0001fd0c
    a4ec:	2000f4f6 	.word	0x2000f4f6

0000a4f0 <gatt_discover_battery_service>:
	free = false;
    a4f0:	2300      	movs	r3, #0
{
    a4f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	free = false;
    a4f4:	4a10      	ldr	r2, [pc, #64]	; (a538 <gatt_discover_battery_service+0x48>)
	cnt++;
    a4f6:	4d11      	ldr	r5, [pc, #68]	; (a53c <gatt_discover_battery_service+0x4c>)
	free = false;
    a4f8:	7013      	strb	r3, [r2, #0]
	cnt++;
    a4fa:	782a      	ldrb	r2, [r5, #0]
	err = bt_gatt_dm_start(conn, BT_UUID_BAS, &discovery_cb, NULL);
    a4fc:	a901      	add	r1, sp, #4
	cnt++;
    a4fe:	3201      	adds	r2, #1
    a500:	702a      	strb	r2, [r5, #0]
	err = bt_gatt_dm_start(conn, BT_UUID_BAS, &discovery_cb, NULL);
    a502:	f641 020f 	movw	r2, #6159	; 0x180f
    a506:	f8ad 2006 	strh.w	r2, [sp, #6]
    a50a:	4a0d      	ldr	r2, [pc, #52]	; (a540 <gatt_discover_battery_service+0x50>)
    a50c:	f88d 3004 	strb.w	r3, [sp, #4]
    a510:	f002 fb1c 	bl	cb4c <bt_gatt_dm_start>
	if (err) 
    a514:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    a518:	d00a      	beq.n	a530 <gatt_discover_battery_service+0x40>
		printk("Could not start the discovery procedure, error "
    a51a:	4621      	mov	r1, r4
    a51c:	4809      	ldr	r0, [pc, #36]	; (a544 <gatt_discover_battery_service+0x54>)
    a51e:	f010 fac9 	bl	1aab4 <printk>
		cnt--;
    a522:	782b      	ldrb	r3, [r5, #0]
		cntDevices--;
    a524:	4a08      	ldr	r2, [pc, #32]	; (a548 <gatt_discover_battery_service+0x58>)
		cnt--;
    a526:	3b01      	subs	r3, #1
    a528:	702b      	strb	r3, [r5, #0]
		cntDevices--;
    a52a:	7813      	ldrb	r3, [r2, #0]
    a52c:	3b01      	subs	r3, #1
    a52e:	7013      	strb	r3, [r2, #0]
}
    a530:	4620      	mov	r0, r4
    a532:	b003      	add	sp, #12
    a534:	bd30      	pop	{r4, r5, pc}
    a536:	bf00      	nop
    a538:	2000856a 	.word	0x2000856a
    a53c:	2000f4f8 	.word	0x2000f4f8
    a540:	200081e4 	.word	0x200081e4
    a544:	0001fd25 	.word	0x0001fd25
    a548:	2000f4f9 	.word	0x2000f4f9

0000a54c <initBatteryManager>:

void initBatteryManager(uint8_t sensorInfos)
{
	free = false;
    a54c:	2200      	movs	r2, #0
{
    a54e:	b538      	push	{r3, r4, r5, lr}
    a550:	4604      	mov	r4, r0
	infoSensors = sensorInfos;
	cntDevices++;
    a552:	4d16      	ldr	r5, [pc, #88]	; (a5ac <initBatteryManager+0x60>)
	free = false;
    a554:	4b16      	ldr	r3, [pc, #88]	; (a5b0 <initBatteryManager+0x64>)
	cntDevices++;
    a556:	7829      	ldrb	r1, [r5, #0]
	free = false;
    a558:	701a      	strb	r2, [r3, #0]
	infoSensors = sensorInfos;
    a55a:	4b16      	ldr	r3, [pc, #88]	; (a5b4 <initBatteryManager+0x68>)
	cntDevices++;
    a55c:	3101      	adds	r1, #1
	infoSensors = sensorInfos;
    a55e:	7018      	strb	r0, [r3, #0]
	cntDevices++;
    a560:	b2c9      	uxtb	r1, r1
	printk("Initialize battery manager: # %d\n", cntDevices);
    a562:	4815      	ldr	r0, [pc, #84]	; (a5b8 <initBatteryManager+0x6c>)
    a564:	3c01      	subs	r4, #1
	cntDevices++;
    a566:	7029      	strb	r1, [r5, #0]
	printk("Initialize battery manager: # %d\n", cntDevices);
    a568:	f010 faa4 	bl	1aab4 <printk>

	switch (sensorInfos)
    a56c:	2c06      	cmp	r4, #6
    a56e:	d81c      	bhi.n	a5aa <initBatteryManager+0x5e>
    a570:	e8df f004 	tbb	[pc, r4]
    a574:	0c041107 	.word	0x0c041107
    a578:	1813      	.short	0x1813
    a57a:	16          	.byte	0x16
    a57b:	00          	.byte	0x00
		break;
	case 2:
		bt_bas_client_init(&bas_cadence);
		break;
	case 3:
		if (cntDevices == 1)
    a57c:	782b      	ldrb	r3, [r5, #0]
    a57e:	2b01      	cmp	r3, #1
    a580:	d109      	bne.n	a596 <initBatteryManager+0x4a>
		{
			bt_bas_client_init(&bas_speed);
    a582:	480e      	ldr	r0, [pc, #56]	; (a5bc <initBatteryManager+0x70>)
	default:
		break;
	}

	//free = true;
}
    a584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_bas_client_init(&bas_heartRate);
    a588:	f002 bf80 	b.w	d48c <bt_bas_client_init>
		if (cntDevices == 1)
    a58c:	782b      	ldrb	r3, [r5, #0]
    a58e:	2b01      	cmp	r3, #1
    a590:	d0f7      	beq.n	a582 <initBatteryManager+0x36>
		else if (cntDevices == 2)
    a592:	2b02      	cmp	r3, #2
		if (cntDevices == 1)
    a594:	d104      	bne.n	a5a0 <initBatteryManager+0x54>
			bt_bas_client_init(&bas_cadence);
    a596:	480a      	ldr	r0, [pc, #40]	; (a5c0 <initBatteryManager+0x74>)
    a598:	e7f4      	b.n	a584 <initBatteryManager+0x38>
		if (cntDevices == 1)
    a59a:	782b      	ldrb	r3, [r5, #0]
    a59c:	2b01      	cmp	r3, #1
    a59e:	d0f0      	beq.n	a582 <initBatteryManager+0x36>
		bt_bas_client_init(&bas_heartRate);
    a5a0:	4808      	ldr	r0, [pc, #32]	; (a5c4 <initBatteryManager+0x78>)
    a5a2:	e7ef      	b.n	a584 <initBatteryManager+0x38>
		if (cntDevices == 1)
    a5a4:	782b      	ldrb	r3, [r5, #0]
    a5a6:	2b01      	cmp	r3, #1
    a5a8:	e7f4      	b.n	a594 <initBatteryManager+0x48>
}
    a5aa:	bd38      	pop	{r3, r4, r5, pc}
    a5ac:	2000f4f9 	.word	0x2000f4f9
    a5b0:	2000856a 	.word	0x2000856a
    a5b4:	2000f4fa 	.word	0x2000f4fa
    a5b8:	0001fd5e 	.word	0x0001fd5e
    a5bc:	20008928 	.word	0x20008928
    a5c0:	20008818 	.word	0x20008818
    a5c4:	200088a0 	.word	0x200088a0

0000a5c8 <getBatteryLevel>:

uint8_t getBatteryLevel(uint8_t nbrSensor) 
{
    uint8_t defaultValue = 0;
	switch (nbrSensor)
    a5c8:	2802      	cmp	r0, #2
    a5ca:	d006      	beq.n	a5da <getBatteryLevel+0x12>
    a5cc:	2803      	cmp	r0, #3
    a5ce:	d006      	beq.n	a5de <getBatteryLevel+0x16>
    a5d0:	2801      	cmp	r0, #1
    a5d2:	d106      	bne.n	a5e2 <getBatteryLevel+0x1a>
	{
	case 1:		
		return batteryLevel_speed;
    a5d4:	4b04      	ldr	r3, [pc, #16]	; (a5e8 <getBatteryLevel+0x20>)
		break;
	case 2:
		return batteryLevel_cadence;
    a5d6:	7818      	ldrb	r0, [r3, #0]
    a5d8:	4770      	bx	lr
    a5da:	4b04      	ldr	r3, [pc, #16]	; (a5ec <getBatteryLevel+0x24>)
    a5dc:	e7fb      	b.n	a5d6 <getBatteryLevel+0xe>
		break;
	case 3:
		return batteryLevel_heartRate;
    a5de:	4b04      	ldr	r3, [pc, #16]	; (a5f0 <getBatteryLevel+0x28>)
    a5e0:	e7f9      	b.n	a5d6 <getBatteryLevel+0xe>
	switch (nbrSensor)
    a5e2:	2000      	movs	r0, #0
		return defaultValue;
		break;
	}

    return defaultValue;
}
    a5e4:	4770      	bx	lr
    a5e6:	bf00      	nop
    a5e8:	2000f4f7 	.word	0x2000f4f7
    a5ec:	2000f4f5 	.word	0x2000f4f5
    a5f0:	2000f4f6 	.word	0x2000f4f6

0000a5f4 <subscribeBatterySpeed>:

void subscribeBatterySpeed(struct bt_gatt_dm *dm) 
{
    a5f4:	b510      	push	{r4, lr}
	uint8_t err = 0;

	err = bt_bas_handles_assign(dm, &bas_speed);
    a5f6:	4918      	ldr	r1, [pc, #96]	; (a658 <subscribeBatterySpeed+0x64>)
{
    a5f8:	4604      	mov	r4, r0
	err = bt_bas_handles_assign(dm, &bas_speed);
    a5fa:	f002 ff5b 	bl	d4b4 <bt_bas_handles_assign>
	if (err) 
    a5fe:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a602:	d002      	beq.n	a60a <subscribeBatterySpeed+0x16>
	{
		printk("Could not init BAS client object from speed sensor, error: %d\n", err);
    a604:	4815      	ldr	r0, [pc, #84]	; (a65c <subscribeBatterySpeed+0x68>)
    a606:	f010 fa55 	bl	1aab4 <printk>
 * @retval true If notifications are supported.
 *              Otherwise, @c false is returned.
 */
static inline bool bt_bas_notify_supported(struct bt_bas_client *bas)
{
	return bas->notify;
    a60a:	4813      	ldr	r0, [pc, #76]	; (a658 <subscribeBatterySpeed+0x64>)
	}

	if (bt_bas_notify_supported(&bas_speed))
    a60c:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a610:	b1ab      	cbz	r3, a63e <subscribeBatterySpeed+0x4a>
	{
		err = bt_bas_subscribe_battery_level(&bas_speed, notify_battery_level_cb_speed);
    a612:	4913      	ldr	r1, [pc, #76]	; (a660 <subscribeBatterySpeed+0x6c>)
    a614:	f002 ffd8 	bl	d5c8 <bt_bas_subscribe_battery_level>
		if (err) 
    a618:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a61c:	d002      	beq.n	a624 <subscribeBatterySpeed+0x30>
		{
			printk("Cannot subscribe to BAS value notification from speed sensor, (err: %d)\n", err);
    a61e:	4811      	ldr	r0, [pc, #68]	; (a664 <subscribeBatterySpeed+0x70>)
    a620:	f010 fa48 	bl	1aab4 <printk>
		{
			printk("Could not start periodic read of BAS value for speed sensor\n");
		}
	}

	err = bt_gatt_dm_data_release(dm);
    a624:	4620      	mov	r0, r4
    a626:	f010 fee2 	bl	1b3ee <bt_gatt_dm_data_release>
	if (err) 
    a62a:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a62e:	d002      	beq.n	a636 <subscribeBatterySpeed+0x42>
	{
		printk("Could not release the discovery data, error "
    a630:	480d      	ldr	r0, [pc, #52]	; (a668 <subscribeBatterySpeed+0x74>)
    a632:	f010 fa3f 	bl	1aab4 <printk>
		       "code: %d\n", err);
	}
	free = true;
    a636:	2201      	movs	r2, #1
    a638:	4b0c      	ldr	r3, [pc, #48]	; (a66c <subscribeBatterySpeed+0x78>)
    a63a:	701a      	strb	r2, [r3, #0]
}
    a63c:	bd10      	pop	{r4, pc}
		err = bt_bas_start_per_read_battery_level(&bas_speed, BAS_READ_VALUE_INTERVAL, notify_battery_level_cb_speed);
    a63e:	f242 7110 	movw	r1, #10000	; 0x2710
    a642:	4a07      	ldr	r2, [pc, #28]	; (a660 <subscribeBatterySpeed+0x6c>)
    a644:	f003 f81a 	bl	d67c <bt_bas_start_per_read_battery_level>
		if (err) 
    a648:	b2c0      	uxtb	r0, r0
    a64a:	2800      	cmp	r0, #0
    a64c:	d0ea      	beq.n	a624 <subscribeBatterySpeed+0x30>
			printk("Could not start periodic read of BAS value for speed sensor\n");
    a64e:	4808      	ldr	r0, [pc, #32]	; (a670 <subscribeBatterySpeed+0x7c>)
    a650:	f010 fa30 	bl	1aab4 <printk>
    a654:	e7e6      	b.n	a624 <subscribeBatterySpeed+0x30>
    a656:	bf00      	nop
    a658:	20008928 	.word	0x20008928
    a65c:	0001fd80 	.word	0x0001fd80
    a660:	0000a34d 	.word	0x0000a34d
    a664:	0001fdbf 	.word	0x0001fdbf
    a668:	0001fe45 	.word	0x0001fe45
    a66c:	2000856a 	.word	0x2000856a
    a670:	0001fe08 	.word	0x0001fe08

0000a674 <subscribeBatteryCadence>:

void subscribeBatteryCadence(struct bt_gatt_dm *dm) 
{
    a674:	b510      	push	{r4, lr}
	uint8_t err = 0;

	err = bt_bas_handles_assign(dm, &bas_cadence);
    a676:	4918      	ldr	r1, [pc, #96]	; (a6d8 <subscribeBatteryCadence+0x64>)
{
    a678:	4604      	mov	r4, r0
	err = bt_bas_handles_assign(dm, &bas_cadence);
    a67a:	f002 ff1b 	bl	d4b4 <bt_bas_handles_assign>
	if (err) 
    a67e:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a682:	d002      	beq.n	a68a <subscribeBatteryCadence+0x16>
	{
		printk("Could not init BAS client object from cadence sensor, error: %d\n", err);
    a684:	4815      	ldr	r0, [pc, #84]	; (a6dc <subscribeBatteryCadence+0x68>)
    a686:	f010 fa15 	bl	1aab4 <printk>
    a68a:	4813      	ldr	r0, [pc, #76]	; (a6d8 <subscribeBatteryCadence+0x64>)
	}

	if (bt_bas_notify_supported(&bas_cadence))
    a68c:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a690:	b1ab      	cbz	r3, a6be <subscribeBatteryCadence+0x4a>
	{
		err = bt_bas_subscribe_battery_level(&bas_cadence, notify_battery_level_cb_cadence);
    a692:	4913      	ldr	r1, [pc, #76]	; (a6e0 <subscribeBatteryCadence+0x6c>)
    a694:	f002 ff98 	bl	d5c8 <bt_bas_subscribe_battery_level>
		if (err) 
    a698:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a69c:	d002      	beq.n	a6a4 <subscribeBatteryCadence+0x30>
		{
			printk("Cannot subscribe to BAS value notification from cadence sensor, (err: %d)\n", err);
    a69e:	4811      	ldr	r0, [pc, #68]	; (a6e4 <subscribeBatteryCadence+0x70>)
    a6a0:	f010 fa08 	bl	1aab4 <printk>
		{
			printk("Could not start periodic read of BAS value for cadence sensor\n");
		}
	}	

	err = bt_gatt_dm_data_release(dm);
    a6a4:	4620      	mov	r0, r4
    a6a6:	f010 fea2 	bl	1b3ee <bt_gatt_dm_data_release>
	if (err) 
    a6aa:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a6ae:	d002      	beq.n	a6b6 <subscribeBatteryCadence+0x42>
	{
		printk("Could not release the discovery data, error "
    a6b0:	480d      	ldr	r0, [pc, #52]	; (a6e8 <subscribeBatteryCadence+0x74>)
    a6b2:	f010 f9ff 	bl	1aab4 <printk>
		       "code: %d\n", err);
	}

	free = true;
    a6b6:	2201      	movs	r2, #1
    a6b8:	4b0c      	ldr	r3, [pc, #48]	; (a6ec <subscribeBatteryCadence+0x78>)
    a6ba:	701a      	strb	r2, [r3, #0]
}
    a6bc:	bd10      	pop	{r4, pc}
		err = bt_bas_start_per_read_battery_level(&bas_cadence, BAS_READ_VALUE_INTERVAL, notify_battery_level_cb_cadence);
    a6be:	f242 7110 	movw	r1, #10000	; 0x2710
    a6c2:	4a07      	ldr	r2, [pc, #28]	; (a6e0 <subscribeBatteryCadence+0x6c>)
    a6c4:	f002 ffda 	bl	d67c <bt_bas_start_per_read_battery_level>
		if (err) 
    a6c8:	b2c0      	uxtb	r0, r0
    a6ca:	2800      	cmp	r0, #0
    a6cc:	d0ea      	beq.n	a6a4 <subscribeBatteryCadence+0x30>
			printk("Could not start periodic read of BAS value for cadence sensor\n");
    a6ce:	4808      	ldr	r0, [pc, #32]	; (a6f0 <subscribeBatteryCadence+0x7c>)
    a6d0:	f010 f9f0 	bl	1aab4 <printk>
    a6d4:	e7e6      	b.n	a6a4 <subscribeBatteryCadence+0x30>
    a6d6:	bf00      	nop
    a6d8:	20008818 	.word	0x20008818
    a6dc:	0001fe7b 	.word	0x0001fe7b
    a6e0:	0000a38d 	.word	0x0000a38d
    a6e4:	0001febc 	.word	0x0001febc
    a6e8:	0001fe45 	.word	0x0001fe45
    a6ec:	2000856a 	.word	0x2000856a
    a6f0:	0001ff07 	.word	0x0001ff07

0000a6f4 <subscribeBatteryHeartRate>:

void subscribeBatteryHeartRate(struct bt_gatt_dm *dm) 
{
    a6f4:	b510      	push	{r4, lr}
	uint8_t err = 0;

	err = bt_bas_handles_assign(dm, &bas_heartRate);
    a6f6:	4918      	ldr	r1, [pc, #96]	; (a758 <subscribeBatteryHeartRate+0x64>)
{
    a6f8:	4604      	mov	r4, r0
	err = bt_bas_handles_assign(dm, &bas_heartRate);
    a6fa:	f002 fedb 	bl	d4b4 <bt_bas_handles_assign>
	if (err) 
    a6fe:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a702:	d002      	beq.n	a70a <subscribeBatteryHeartRate+0x16>
	{
		printk("Could not init BAS client object from heart rate sensor, error: %d\n", err);
    a704:	4815      	ldr	r0, [pc, #84]	; (a75c <subscribeBatteryHeartRate+0x68>)
    a706:	f010 f9d5 	bl	1aab4 <printk>
    a70a:	4813      	ldr	r0, [pc, #76]	; (a758 <subscribeBatteryHeartRate+0x64>)
	}

	if (bt_bas_notify_supported(&bas_heartRate))
    a70c:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a710:	b1ab      	cbz	r3, a73e <subscribeBatteryHeartRate+0x4a>
	{
		err = bt_bas_subscribe_battery_level(&bas_heartRate, notify_battery_level_cb_heartRate);
    a712:	4913      	ldr	r1, [pc, #76]	; (a760 <subscribeBatteryHeartRate+0x6c>)
    a714:	f002 ff58 	bl	d5c8 <bt_bas_subscribe_battery_level>
		if (err) 
    a718:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a71c:	d002      	beq.n	a724 <subscribeBatteryHeartRate+0x30>
		{
			printk("Cannot subscribe to BAS value notification from heart rate sensor, (err: %d)\n", err);
    a71e:	4811      	ldr	r0, [pc, #68]	; (a764 <subscribeBatteryHeartRate+0x70>)
    a720:	f010 f9c8 	bl	1aab4 <printk>
		{
			printk("Could not start periodic read of BAS value for heart rate sensor\n");
		}
	}

	err = bt_gatt_dm_data_release(dm);
    a724:	4620      	mov	r0, r4
    a726:	f010 fe62 	bl	1b3ee <bt_gatt_dm_data_release>
	if (err) 
    a72a:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    a72e:	d002      	beq.n	a736 <subscribeBatteryHeartRate+0x42>
	{
		printk("Could not release the discovery data, error "
    a730:	480d      	ldr	r0, [pc, #52]	; (a768 <subscribeBatteryHeartRate+0x74>)
    a732:	f010 f9bf 	bl	1aab4 <printk>
		       "code: %d\n", err);
	}	
	
	free = true;
    a736:	2201      	movs	r2, #1
    a738:	4b0c      	ldr	r3, [pc, #48]	; (a76c <subscribeBatteryHeartRate+0x78>)
    a73a:	701a      	strb	r2, [r3, #0]
}
    a73c:	bd10      	pop	{r4, pc}
		err = bt_bas_start_per_read_battery_level(&bas_heartRate, BAS_READ_VALUE_INTERVAL, notify_battery_level_cb_heartRate);
    a73e:	f242 7110 	movw	r1, #10000	; 0x2710
    a742:	4a07      	ldr	r2, [pc, #28]	; (a760 <subscribeBatteryHeartRate+0x6c>)
    a744:	f002 ff9a 	bl	d67c <bt_bas_start_per_read_battery_level>
		if (err) 
    a748:	b2c0      	uxtb	r0, r0
    a74a:	2800      	cmp	r0, #0
    a74c:	d0ea      	beq.n	a724 <subscribeBatteryHeartRate+0x30>
			printk("Could not start periodic read of BAS value for heart rate sensor\n");
    a74e:	4808      	ldr	r0, [pc, #32]	; (a770 <subscribeBatteryHeartRate+0x7c>)
    a750:	f010 f9b0 	bl	1aab4 <printk>
    a754:	e7e6      	b.n	a724 <subscribeBatteryHeartRate+0x30>
    a756:	bf00      	nop
    a758:	200088a0 	.word	0x200088a0
    a75c:	0001ff46 	.word	0x0001ff46
    a760:	0000a3cd 	.word	0x0000a3cd
    a764:	0001ff8a 	.word	0x0001ff8a
    a768:	0001fe45 	.word	0x0001fe45
    a76c:	2000856a 	.word	0x2000856a
    a770:	0001ffd8 	.word	0x0001ffd8

0000a774 <discovery_completed_cb>:
{
    a774:	b510      	push	{r4, lr}
    a776:	4604      	mov	r4, r0
	printk("The discovery procedure succeeded\n");
    a778:	4817      	ldr	r0, [pc, #92]	; (a7d8 <discovery_completed_cb+0x64>)
    a77a:	f010 f99b 	bl	1aab4 <printk>
	switch (infoSensors)
    a77e:	4b17      	ldr	r3, [pc, #92]	; (a7dc <discovery_completed_cb+0x68>)
    a780:	781b      	ldrb	r3, [r3, #0]
    a782:	3b01      	subs	r3, #1
    a784:	2b06      	cmp	r3, #6
    a786:	d826      	bhi.n	a7d6 <discovery_completed_cb+0x62>
    a788:	e8df f003 	tbb	[pc, r3]
    a78c:	0d041308 	.word	0x0d041308
    a790:	2118      	.short	0x2118
    a792:	1c          	.byte	0x1c
    a793:	00          	.byte	0x00
		if (cntDevices == 1)
    a794:	4b12      	ldr	r3, [pc, #72]	; (a7e0 <discovery_completed_cb+0x6c>)
    a796:	781b      	ldrb	r3, [r3, #0]
    a798:	2b01      	cmp	r3, #1
    a79a:	d10a      	bne.n	a7b2 <discovery_completed_cb+0x3e>
			subscribeBatterySpeed(dm);
    a79c:	4620      	mov	r0, r4
}
    a79e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			subscribeBatterySpeed(dm);
    a7a2:	f7ff bf27 	b.w	a5f4 <subscribeBatterySpeed>
		if (cntDevices == 1)
    a7a6:	4b0e      	ldr	r3, [pc, #56]	; (a7e0 <discovery_completed_cb+0x6c>)
    a7a8:	781b      	ldrb	r3, [r3, #0]
    a7aa:	2b01      	cmp	r3, #1
    a7ac:	d0f6      	beq.n	a79c <discovery_completed_cb+0x28>
		else if (cntDevices == 2)
    a7ae:	2b02      	cmp	r3, #2
		if (cntDevices == 1)
    a7b0:	d108      	bne.n	a7c4 <discovery_completed_cb+0x50>
			subscribeBatteryCadence(dm);
    a7b2:	4620      	mov	r0, r4
}
    a7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			subscribeBatteryCadence(dm);
    a7b8:	f7ff bf5c 	b.w	a674 <subscribeBatteryCadence>
		if (cntDevices == 1)
    a7bc:	4b08      	ldr	r3, [pc, #32]	; (a7e0 <discovery_completed_cb+0x6c>)
    a7be:	781b      	ldrb	r3, [r3, #0]
    a7c0:	2b01      	cmp	r3, #1
    a7c2:	d0eb      	beq.n	a79c <discovery_completed_cb+0x28>
			subscribeBatteryHeartRate(dm);
    a7c4:	4620      	mov	r0, r4
}
    a7c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			subscribeBatteryHeartRate(dm);
    a7ca:	f7ff bf93 	b.w	a6f4 <subscribeBatteryHeartRate>
		if (cntDevices == 1)
    a7ce:	4b04      	ldr	r3, [pc, #16]	; (a7e0 <discovery_completed_cb+0x6c>)
    a7d0:	781b      	ldrb	r3, [r3, #0]
    a7d2:	2b01      	cmp	r3, #1
    a7d4:	e7ec      	b.n	a7b0 <discovery_completed_cb+0x3c>
}
    a7d6:	bd10      	pop	{r4, pc}
    a7d8:	0001f487 	.word	0x0001f487
    a7dc:	2000f4fa 	.word	0x2000f4fa
    a7e0:	2000f4f9 	.word	0x2000f4f9

0000a7e4 <isFree>:

bool isFree()
{
	return free;
}
    a7e4:	4b01      	ldr	r3, [pc, #4]	; (a7ec <isFree+0x8>)
    a7e6:	7818      	ldrb	r0, [r3, #0]
    a7e8:	4770      	bx	lr
    a7ea:	bf00      	nop
    a7ec:	2000856a 	.word	0x2000856a

0000a7f0 <askForBatteryLevel>:

void askForBatteryLevel(uint8_t type)
{
	switch (type)
    a7f0:	2802      	cmp	r0, #2
    a7f2:	d00a      	beq.n	a80a <askForBatteryLevel+0x1a>
    a7f4:	2803      	cmp	r0, #3
    a7f6:	d00e      	beq.n	a816 <askForBatteryLevel+0x26>
    a7f8:	2801      	cmp	r0, #1
    a7fa:	d112      	bne.n	a822 <askForBatteryLevel+0x32>
	{
	case 1:
		readySpeed = false;
    a7fc:	2200      	movs	r2, #0
    a7fe:	4b09      	ldr	r3, [pc, #36]	; (a824 <askForBatteryLevel+0x34>)
		bt_bas_read_battery_level(&bas_speed, read_battery_level_cb_speed);
    a800:	4909      	ldr	r1, [pc, #36]	; (a828 <askForBatteryLevel+0x38>)
    a802:	480a      	ldr	r0, [pc, #40]	; (a82c <askForBatteryLevel+0x3c>)
		readySpeed = false;
    a804:	701a      	strb	r2, [r3, #0]
		readyCadence = false;
		bt_bas_read_battery_level(&bas_cadence, read_battery_level_cb_cadence);
		break;
	case 3:
		readyHeartRate = false;
		bt_bas_read_battery_level(&bas_heartRate, read_battery_level_cb_heartRate);
    a806:	f002 bf19 	b.w	d63c <bt_bas_read_battery_level>
		readyCadence = false;
    a80a:	2200      	movs	r2, #0
    a80c:	4b08      	ldr	r3, [pc, #32]	; (a830 <askForBatteryLevel+0x40>)
		bt_bas_read_battery_level(&bas_cadence, read_battery_level_cb_cadence);
    a80e:	4909      	ldr	r1, [pc, #36]	; (a834 <askForBatteryLevel+0x44>)
    a810:	4809      	ldr	r0, [pc, #36]	; (a838 <askForBatteryLevel+0x48>)
		readyCadence = false;
    a812:	701a      	strb	r2, [r3, #0]
		bt_bas_read_battery_level(&bas_cadence, read_battery_level_cb_cadence);
    a814:	e7f7      	b.n	a806 <askForBatteryLevel+0x16>
		readyHeartRate = false;
    a816:	2200      	movs	r2, #0
    a818:	4b08      	ldr	r3, [pc, #32]	; (a83c <askForBatteryLevel+0x4c>)
		bt_bas_read_battery_level(&bas_heartRate, read_battery_level_cb_heartRate);
    a81a:	4909      	ldr	r1, [pc, #36]	; (a840 <askForBatteryLevel+0x50>)
    a81c:	4809      	ldr	r0, [pc, #36]	; (a844 <askForBatteryLevel+0x54>)
		readyHeartRate = false;
    a81e:	701a      	strb	r2, [r3, #0]
		bt_bas_read_battery_level(&bas_heartRate, read_battery_level_cb_heartRate);
    a820:	e7f1      	b.n	a806 <askForBatteryLevel+0x16>
		break;
	default:
		break;
	}
}
    a822:	4770      	bx	lr
    a824:	2000f4fd 	.word	0x2000f4fd
    a828:	0000a40d 	.word	0x0000a40d
    a82c:	20008928 	.word	0x20008928
    a830:	2000f4fb 	.word	0x2000f4fb
    a834:	0000a459 	.word	0x0000a459
    a838:	20008818 	.word	0x20008818
    a83c:	2000f4fc 	.word	0x2000f4fc
    a840:	0000a4a5 	.word	0x0000a4a5
    a844:	200088a0 	.word	0x200088a0

0000a848 <isValueReady>:

bool isValueReady(uint8_t type)
{
	switch (type)
    a848:	2802      	cmp	r0, #2
    a84a:	d006      	beq.n	a85a <isValueReady+0x12>
    a84c:	2803      	cmp	r0, #3
    a84e:	d006      	beq.n	a85e <isValueReady+0x16>
    a850:	2801      	cmp	r0, #1
    a852:	d106      	bne.n	a862 <isValueReady+0x1a>
	{
	case 1:
		return readySpeed;
    a854:	4b04      	ldr	r3, [pc, #16]	; (a868 <isValueReady+0x20>)
		break;
	case 2:
		return readyCadence;
    a856:	7818      	ldrb	r0, [r3, #0]
    a858:	4770      	bx	lr
    a85a:	4b04      	ldr	r3, [pc, #16]	; (a86c <isValueReady+0x24>)
    a85c:	e7fb      	b.n	a856 <isValueReady+0xe>
		break;
	case 3:
		return readyHeartRate;
    a85e:	4b04      	ldr	r3, [pc, #16]	; (a870 <isValueReady+0x28>)
    a860:	e7f9      	b.n	a856 <isValueReady+0xe>
	switch (type)
    a862:	2000      	movs	r0, #0
		break;			
	default:
		return false;
		break;
	}	
}
    a864:	4770      	bx	lr
    a866:	bf00      	nop
    a868:	2000f4fd 	.word	0x2000f4fd
    a86c:	2000f4fb 	.word	0x2000f4fb
    a870:	2000f4fc 	.word	0x2000f4fc

0000a874 <resetReadyValue>:

void resetReadyValue(uint8_t type)
{
	switch (type)
    a874:	2802      	cmp	r0, #2
    a876:	d007      	beq.n	a888 <resetReadyValue+0x14>
    a878:	2803      	cmp	r0, #3
    a87a:	d007      	beq.n	a88c <resetReadyValue+0x18>
    a87c:	2801      	cmp	r0, #1
    a87e:	d102      	bne.n	a886 <resetReadyValue+0x12>
	{
	case 1:
		readySpeed = false;
    a880:	4b03      	ldr	r3, [pc, #12]	; (a890 <resetReadyValue+0x1c>)
		break;
	case 2:
		readyCadence = false;
		break;
	case 3:
		readyHeartRate = false;
    a882:	2200      	movs	r2, #0
    a884:	701a      	strb	r2, [r3, #0]
		break;			
	default:
		break;
	}		
    a886:	4770      	bx	lr
		readyCadence = false;
    a888:	4b02      	ldr	r3, [pc, #8]	; (a894 <resetReadyValue+0x20>)
    a88a:	e7fa      	b.n	a882 <resetReadyValue+0xe>
		readyHeartRate = false;
    a88c:	4b02      	ldr	r3, [pc, #8]	; (a898 <resetReadyValue+0x24>)
    a88e:	e7f8      	b.n	a882 <resetReadyValue+0xe>
    a890:	2000f4fd 	.word	0x2000f4fd
    a894:	2000f4fb 	.word	0x2000f4fb
    a898:	2000f4fc 	.word	0x2000f4fc

0000a89c <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a89c:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    a89e:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    a8a0:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    a8a4:	2b02      	cmp	r3, #2
{
    a8a6:	4604      	mov	r4, r0
    a8a8:	460e      	mov	r6, r1
	notify->result = res;
    a8aa:	6081      	str	r1, [r0, #8]
	switch (method) {
    a8ac:	d010      	beq.n	a8d0 <sys_notify_finalize+0x34>
    a8ae:	2b03      	cmp	r3, #3
    a8b0:	d004      	beq.n	a8bc <sys_notify_finalize+0x20>
    a8b2:	2b01      	cmp	r3, #1
    a8b4:	d10f      	bne.n	a8d6 <sys_notify_finalize+0x3a>
    a8b6:	2500      	movs	r5, #0
    a8b8:	4628      	mov	r0, r5
    a8ba:	e001      	b.n	a8c0 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    a8bc:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    a8be:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a8c0:	2300      	movs	r3, #0
    a8c2:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    a8c4:	b110      	cbz	r0, a8cc <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    a8c6:	4631      	mov	r1, r6
    a8c8:	f00f ffae 	bl	1a828 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    a8cc:	4628      	mov	r0, r5
    a8ce:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
    a8d0:	2500      	movs	r5, #0
		sig = notify->method.signal;
    a8d2:	6800      	ldr	r0, [r0, #0]
		break;
    a8d4:	e7f4      	b.n	a8c0 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    a8d6:	2245      	movs	r2, #69	; 0x45
    a8d8:	4904      	ldr	r1, [pc, #16]	; (a8ec <sys_notify_finalize+0x50>)
    a8da:	4805      	ldr	r0, [pc, #20]	; (a8f0 <sys_notify_finalize+0x54>)
    a8dc:	f010 f8ea 	bl	1aab4 <printk>
    a8e0:	2145      	movs	r1, #69	; 0x45
    a8e2:	4802      	ldr	r0, [pc, #8]	; (a8ec <sys_notify_finalize+0x50>)
    a8e4:	f010 fb8c 	bl	1b000 <assert_post_action>
	sys_notify_generic_callback rv = 0;
    a8e8:	2500      	movs	r5, #0
    a8ea:	e7e8      	b.n	a8be <sys_notify_finalize+0x22>
    a8ec:	0002001a 	.word	0x0002001a
    a8f0:	0002003d 	.word	0x0002003d

0000a8f4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    a8f4:	680b      	ldr	r3, [r1, #0]
    a8f6:	3301      	adds	r3, #1
    a8f8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    a8fa:	4b01      	ldr	r3, [pc, #4]	; (a900 <char_out+0xc>)
    a8fc:	681b      	ldr	r3, [r3, #0]
    a8fe:	4718      	bx	r3
    a900:	200081f0 	.word	0x200081f0

0000a904 <__printk_hook_install>:
	_char_out = fn;
    a904:	4b01      	ldr	r3, [pc, #4]	; (a90c <__printk_hook_install+0x8>)
    a906:	6018      	str	r0, [r3, #0]
}
    a908:	4770      	bx	lr
    a90a:	bf00      	nop
    a90c:	200081f0 	.word	0x200081f0

0000a910 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    a910:	b507      	push	{r0, r1, r2, lr}
    a912:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    a914:	2100      	movs	r1, #0
{
    a916:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    a918:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    a91a:	4803      	ldr	r0, [pc, #12]	; (a928 <vprintk+0x18>)
    a91c:	a901      	add	r1, sp, #4
    a91e:	f000 fbe9 	bl	b0f4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    a922:	b003      	add	sp, #12
    a924:	f85d fb04 	ldr.w	pc, [sp], #4
    a928:	0000a8f5 	.word	0x0000a8f5

0000a92c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    a92c:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    a92e:	2500      	movs	r5, #0
{
    a930:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    a932:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    a936:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    a938:	a901      	add	r1, sp, #4
    a93a:	4805      	ldr	r0, [pc, #20]	; (a950 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    a93c:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    a93e:	f000 fbd9 	bl	b0f4 <cbvprintf>

	if (ctx.count < ctx.max) {
    a942:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    a946:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    a948:	bfb8      	it	lt
    a94a:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    a94c:	b005      	add	sp, #20
    a94e:	bd30      	pop	{r4, r5, pc}
    a950:	0001aa8f 	.word	0x0001aa8f

0000a954 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    a954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a958:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
    a95c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    a95e:	f01a 0f08 	tst.w	sl, #8
{
    a962:	4693      	mov	fp, r2
	if (processing) {
    a964:	d01c      	beq.n	a9a0 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    a966:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    a968:	bf0c      	ite	eq
    a96a:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    a96e:	f04a 0a20 	orrne.w	sl, sl, #32
    a972:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a976:	f104 0014 	add.w	r0, r4, #20
    a97a:	f00f f8bd 	bl	19af8 <z_spin_unlock_valid>
    a97e:	b940      	cbnz	r0, a992 <process_event+0x3e>
    a980:	4992      	ldr	r1, [pc, #584]	; (abcc <process_event+0x278>)
    a982:	4893      	ldr	r0, [pc, #588]	; (abd0 <process_event+0x27c>)
    a984:	22a7      	movs	r2, #167	; 0xa7
    a986:	f010 f895 	bl	1aab4 <printk>
    a98a:	21a7      	movs	r1, #167	; 0xa7
    a98c:	488f      	ldr	r0, [pc, #572]	; (abcc <process_event+0x278>)
    a98e:	f010 fb37 	bl	1b000 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    a992:	f38b 8811 	msr	BASEPRI, fp
    a996:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    a99a:	b003      	add	sp, #12
    a99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    a9a0:	4f8c      	ldr	r7, [pc, #560]	; (abd4 <process_event+0x280>)
    a9a2:	f8df 822c 	ldr.w	r8, [pc, #556]	; abd0 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a9a6:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    a9aa:	2902      	cmp	r1, #2
    a9ac:	d106      	bne.n	a9bc <process_event+0x68>
			evt = process_recheck(mgr);
    a9ae:	4620      	mov	r0, r4
    a9b0:	f010 f89a 	bl	1aae8 <process_recheck>
		if (evt == EVT_NOP) {
    a9b4:	2800      	cmp	r0, #0
    a9b6:	d0de      	beq.n	a976 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    a9b8:	2801      	cmp	r0, #1
    a9ba:	d163      	bne.n	aa84 <process_event+0x130>
			res = mgr->last_res;
    a9bc:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a9c0:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    a9c2:	f1b9 0f00 	cmp.w	r9, #0
    a9c6:	da19      	bge.n	a9fc <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    a9c8:	2600      	movs	r6, #0
		*clients = mgr->clients;
    a9ca:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a9cc:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    a9d0:	e9c4 6600 	strd	r6, r6, [r4]
    a9d4:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    a9d8:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a9da:	8ba3      	ldrh	r3, [r4, #28]
    a9dc:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a9e0:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a9e2:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    a9e4:	d003      	beq.n	a9ee <process_event+0x9a>
		if (do_monitors
    a9e6:	68a2      	ldr	r2, [r4, #8]
    a9e8:	2a00      	cmp	r2, #0
    a9ea:	f040 80f5 	bne.w	abd8 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
    a9ee:	b915      	cbnz	r5, a9f6 <process_event+0xa2>
		    || (transit != NULL)) {
    a9f0:	2e00      	cmp	r6, #0
    a9f2:	f000 812f 	beq.w	ac54 <process_event+0x300>
    a9f6:	f04f 0a00 	mov.w	sl, #0
    a9fa:	e0ef      	b.n	abdc <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a9fc:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    aa00:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    aa02:	2901      	cmp	r1, #1
    aa04:	d820      	bhi.n	aa48 <process_event+0xf4>
	list->head = NULL;
    aa06:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    aa08:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    aa0c:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    aa0e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    aa10:	b29b      	uxth	r3, r3
	list->tail = NULL;
    aa12:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    aa16:	d10a      	bne.n	aa2e <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    aa18:	b13d      	cbz	r5, aa2a <process_event+0xd6>
    aa1a:	4629      	mov	r1, r5
    aa1c:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    aa1e:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    aa20:	3201      	adds	r2, #1
    aa22:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    aa24:	2900      	cmp	r1, #0
    aa26:	d1fa      	bne.n	aa1e <process_event+0xca>
    aa28:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    aa2a:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    aa2e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    aa30:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    aa32:	f010 f859 	bl	1aae8 <process_recheck>
    aa36:	4606      	mov	r6, r0
    aa38:	2800      	cmp	r0, #0
    aa3a:	d0ce      	beq.n	a9da <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    aa3c:	8ba3      	ldrh	r3, [r4, #28]
    aa3e:	f043 0320 	orr.w	r3, r3, #32
    aa42:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    aa44:	2600      	movs	r6, #0
    aa46:	e7c8      	b.n	a9da <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    aa48:	2a04      	cmp	r2, #4
    aa4a:	d10d      	bne.n	aa68 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    aa4c:	f023 0307 	bic.w	r3, r3, #7
    aa50:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    aa52:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    aa54:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    aa56:	f010 f847 	bl	1aae8 <process_recheck>
    aa5a:	4605      	mov	r5, r0
    aa5c:	b180      	cbz	r0, aa80 <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    aa5e:	f042 0220 	orr.w	r2, r2, #32
    aa62:	2500      	movs	r5, #0
    aa64:	83a2      	strh	r2, [r4, #28]
    aa66:	e7ed      	b.n	aa44 <process_event+0xf0>
		__ASSERT_NO_MSG(false);
    aa68:	f240 1219 	movw	r2, #281	; 0x119
    aa6c:	4639      	mov	r1, r7
    aa6e:	4640      	mov	r0, r8
    aa70:	f010 f820 	bl	1aab4 <printk>
    aa74:	f240 1119 	movw	r1, #281	; 0x119
    aa78:	4638      	mov	r0, r7
    aa7a:	f010 fac1 	bl	1b000 <assert_post_action>
    aa7e:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    aa80:	462e      	mov	r6, r5
    aa82:	e7aa      	b.n	a9da <process_event+0x86>
		} else if (evt == EVT_START) {
    aa84:	2803      	cmp	r0, #3
    aa86:	d131      	bne.n	aaec <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    aa88:	f1ba 0f00 	cmp.w	sl, #0
    aa8c:	d00a      	beq.n	aaa4 <process_event+0x150>
    aa8e:	4639      	mov	r1, r7
    aa90:	4640      	mov	r0, r8
    aa92:	f44f 72aa 	mov.w	r2, #340	; 0x154
    aa96:	f010 f80d 	bl	1aab4 <printk>
    aa9a:	f44f 71aa 	mov.w	r1, #340	; 0x154
    aa9e:	4638      	mov	r0, r7
    aaa0:	f010 faae 	bl	1b000 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    aaa4:	6823      	ldr	r3, [r4, #0]
    aaa6:	b953      	cbnz	r3, aabe <process_event+0x16a>
    aaa8:	4639      	mov	r1, r7
    aaaa:	4640      	mov	r0, r8
    aaac:	f240 1255 	movw	r2, #341	; 0x155
    aab0:	f010 f800 	bl	1aab4 <printk>
    aab4:	f240 1155 	movw	r1, #341	; 0x155
    aab8:	4638      	mov	r0, r7
    aaba:	f010 faa1 	bl	1b000 <assert_post_action>
			transit = mgr->transitions->start;
    aabe:	6923      	ldr	r3, [r4, #16]
    aac0:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    aac2:	b956      	cbnz	r6, aada <process_event+0x186>
    aac4:	4639      	mov	r1, r7
    aac6:	4640      	mov	r0, r8
    aac8:	f44f 72ac 	mov.w	r2, #344	; 0x158
    aacc:	f00f fff2 	bl	1aab4 <printk>
    aad0:	f44f 71ac 	mov.w	r1, #344	; 0x158
    aad4:	4638      	mov	r0, r7
    aad6:	f010 fa93 	bl	1b000 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    aada:	8ba3      	ldrh	r3, [r4, #28]
    aadc:	f023 0307 	bic.w	r3, r3, #7
    aae0:	f043 0306 	orr.w	r3, r3, #6
}
    aae4:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    aae6:	83a3      	strh	r3, [r4, #28]
		res = 0;
    aae8:	46a9      	mov	r9, r5
}
    aaea:	e776      	b.n	a9da <process_event+0x86>
		} else if (evt == EVT_STOP) {
    aaec:	2804      	cmp	r0, #4
    aaee:	d12e      	bne.n	ab4e <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    aaf0:	f1ba 0f02 	cmp.w	sl, #2
    aaf4:	d00a      	beq.n	ab0c <process_event+0x1b8>
    aaf6:	4639      	mov	r1, r7
    aaf8:	4640      	mov	r0, r8
    aafa:	f240 125b 	movw	r2, #347	; 0x15b
    aafe:	f00f ffd9 	bl	1aab4 <printk>
    ab02:	f240 115b 	movw	r1, #347	; 0x15b
    ab06:	4638      	mov	r0, r7
    ab08:	f010 fa7a 	bl	1b000 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    ab0c:	8be3      	ldrh	r3, [r4, #30]
    ab0e:	b153      	cbz	r3, ab26 <process_event+0x1d2>
    ab10:	4639      	mov	r1, r7
    ab12:	4640      	mov	r0, r8
    ab14:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    ab18:	f00f ffcc 	bl	1aab4 <printk>
    ab1c:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    ab20:	4638      	mov	r0, r7
    ab22:	f010 fa6d 	bl	1b000 <assert_post_action>
			transit = mgr->transitions->stop;
    ab26:	6923      	ldr	r3, [r4, #16]
    ab28:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    ab2a:	b956      	cbnz	r6, ab42 <process_event+0x1ee>
    ab2c:	4639      	mov	r1, r7
    ab2e:	4640      	mov	r0, r8
    ab30:	f240 125f 	movw	r2, #351	; 0x15f
    ab34:	f00f ffbe 	bl	1aab4 <printk>
    ab38:	f240 115f 	movw	r1, #351	; 0x15f
    ab3c:	4638      	mov	r0, r7
    ab3e:	f010 fa5f 	bl	1b000 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    ab42:	8ba3      	ldrh	r3, [r4, #28]
    ab44:	f023 0307 	bic.w	r3, r3, #7
    ab48:	f043 0304 	orr.w	r3, r3, #4
    ab4c:	e7ca      	b.n	aae4 <process_event+0x190>
		} else if (evt == EVT_RESET) {
    ab4e:	2805      	cmp	r0, #5
    ab50:	d12e      	bne.n	abb0 <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    ab52:	f1ba 0f01 	cmp.w	sl, #1
    ab56:	d00a      	beq.n	ab6e <process_event+0x21a>
    ab58:	4639      	mov	r1, r7
    ab5a:	4640      	mov	r0, r8
    ab5c:	f44f 72b1 	mov.w	r2, #354	; 0x162
    ab60:	f00f ffa8 	bl	1aab4 <printk>
    ab64:	f44f 71b1 	mov.w	r1, #354	; 0x162
    ab68:	4638      	mov	r0, r7
    ab6a:	f010 fa49 	bl	1b000 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    ab6e:	6823      	ldr	r3, [r4, #0]
    ab70:	b953      	cbnz	r3, ab88 <process_event+0x234>
    ab72:	4639      	mov	r1, r7
    ab74:	4640      	mov	r0, r8
    ab76:	f240 1263 	movw	r2, #355	; 0x163
    ab7a:	f00f ff9b 	bl	1aab4 <printk>
    ab7e:	f240 1163 	movw	r1, #355	; 0x163
    ab82:	4638      	mov	r0, r7
    ab84:	f010 fa3c 	bl	1b000 <assert_post_action>
			transit = mgr->transitions->reset;
    ab88:	6923      	ldr	r3, [r4, #16]
    ab8a:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    ab8c:	b956      	cbnz	r6, aba4 <process_event+0x250>
    ab8e:	4639      	mov	r1, r7
    ab90:	4640      	mov	r0, r8
    ab92:	f44f 72b3 	mov.w	r2, #358	; 0x166
    ab96:	f00f ff8d 	bl	1aab4 <printk>
    ab9a:	f44f 71b3 	mov.w	r1, #358	; 0x166
    ab9e:	4638      	mov	r0, r7
    aba0:	f010 fa2e 	bl	1b000 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    aba4:	8ba3      	ldrh	r3, [r4, #28]
    aba6:	f023 0307 	bic.w	r3, r3, #7
    abaa:	f043 0305 	orr.w	r3, r3, #5
    abae:	e799      	b.n	aae4 <process_event+0x190>
			__ASSERT_NO_MSG(false);
    abb0:	2500      	movs	r5, #0
    abb2:	f240 1269 	movw	r2, #361	; 0x169
    abb6:	4639      	mov	r1, r7
    abb8:	4640      	mov	r0, r8
    abba:	f00f ff7b 	bl	1aab4 <printk>
    abbe:	f240 1169 	movw	r1, #361	; 0x169
    abc2:	4638      	mov	r0, r7
    abc4:	f010 fa1c 	bl	1b000 <assert_post_action>
		onoff_transition_fn transit = NULL;
    abc8:	462e      	mov	r6, r5
    abca:	e78d      	b.n	aae8 <process_event+0x194>
    abcc:	00020077 	.word	0x00020077
    abd0:	0002003d 	.word	0x0002003d
    abd4:	00020055 	.word	0x00020055
				   && !sys_slist_is_empty(&mgr->monitors);
    abd8:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    abdc:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    abe0:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    abe2:	f104 0314 	add.w	r3, r4, #20
    abe6:	4618      	mov	r0, r3
    abe8:	9301      	str	r3, [sp, #4]
    abea:	f00e ff85 	bl	19af8 <z_spin_unlock_valid>
    abee:	b940      	cbnz	r0, ac02 <process_event+0x2ae>
    abf0:	4640      	mov	r0, r8
    abf2:	4931      	ldr	r1, [pc, #196]	; (acb8 <process_event+0x364>)
    abf4:	22a7      	movs	r2, #167	; 0xa7
    abf6:	f00f ff5d 	bl	1aab4 <printk>
    abfa:	21a7      	movs	r1, #167	; 0xa7
    abfc:	482e      	ldr	r0, [pc, #184]	; (acb8 <process_event+0x364>)
    abfe:	f010 f9ff 	bl	1b000 <assert_post_action>
    ac02:	f38b 8811 	msr	BASEPRI, fp
    ac06:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    ac0a:	f1ba 0f00 	cmp.w	sl, #0
    ac0e:	d130      	bne.n	ac72 <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
    ac10:	2d00      	cmp	r5, #0
    ac12:	d140      	bne.n	ac96 <process_event+0x342>
			if (transit != NULL) {
    ac14:	b116      	cbz	r6, ac1c <process_event+0x2c8>
				transit(mgr, transition_complete);
    ac16:	4620      	mov	r0, r4
    ac18:	4928      	ldr	r1, [pc, #160]	; (acbc <process_event+0x368>)
    ac1a:	47b0      	blx	r6
	__asm__ volatile(
    ac1c:	f04f 0320 	mov.w	r3, #32
    ac20:	f3ef 8b11 	mrs	fp, BASEPRI
    ac24:	f383 8811 	msr	BASEPRI, r3
    ac28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ac2c:	9801      	ldr	r0, [sp, #4]
    ac2e:	f00e ff55 	bl	19adc <z_spin_lock_valid>
    ac32:	b940      	cbnz	r0, ac46 <process_event+0x2f2>
    ac34:	4640      	mov	r0, r8
    ac36:	4920      	ldr	r1, [pc, #128]	; (acb8 <process_event+0x364>)
    ac38:	227c      	movs	r2, #124	; 0x7c
    ac3a:	f00f ff3b 	bl	1aab4 <printk>
    ac3e:	217c      	movs	r1, #124	; 0x7c
    ac40:	481d      	ldr	r0, [pc, #116]	; (acb8 <process_event+0x364>)
    ac42:	f010 f9dd 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
    ac46:	9801      	ldr	r0, [sp, #4]
    ac48:	f00e ff64 	bl	19b14 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    ac4c:	8ba3      	ldrh	r3, [r4, #28]
    ac4e:	f023 0308 	bic.w	r3, r3, #8
    ac52:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    ac54:	8ba3      	ldrh	r3, [r4, #28]
    ac56:	06da      	lsls	r2, r3, #27
    ac58:	d525      	bpl.n	aca6 <process_event+0x352>
			evt = EVT_COMPLETE;
    ac5a:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    ac5c:	f023 0310 	bic.w	r3, r3, #16
    ac60:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    ac62:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    ac66:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    ac6a:	2900      	cmp	r1, #0
    ac6c:	f47f ae9d 	bne.w	a9aa <process_event+0x56>
out:
    ac70:	e681      	b.n	a976 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    ac72:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ac74:	2900      	cmp	r1, #0
    ac76:	d0cb      	beq.n	ac10 <process_event+0x2bc>
	return node->next;
    ac78:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    ac7c:	464b      	mov	r3, r9
    ac7e:	4620      	mov	r0, r4
    ac80:	f8d1 b004 	ldr.w	fp, [r1, #4]
    ac84:	9a00      	ldr	r2, [sp, #0]
    ac86:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ac88:	f1ba 0f00 	cmp.w	sl, #0
    ac8c:	d0c0      	beq.n	ac10 <process_event+0x2bc>
    ac8e:	4651      	mov	r1, sl
    ac90:	f8da a000 	ldr.w	sl, [sl]
    ac94:	e7f2      	b.n	ac7c <process_event+0x328>
    ac96:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    ac98:	464b      	mov	r3, r9
    ac9a:	4620      	mov	r0, r4
    ac9c:	9a00      	ldr	r2, [sp, #0]
    ac9e:	682d      	ldr	r5, [r5, #0]
    aca0:	f00f ff3e 	bl	1ab20 <notify_one>
    aca4:	e7b4      	b.n	ac10 <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    aca6:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    acaa:	bf1e      	ittt	ne
    acac:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    acb0:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    acb2:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    acb4:	e7d5      	b.n	ac62 <process_event+0x30e>
    acb6:	bf00      	nop
    acb8:	00020077 	.word	0x00020077
    acbc:	0000acc1 	.word	0x0000acc1

0000acc0 <transition_complete>:
{
    acc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    acc2:	4604      	mov	r4, r0
    acc4:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    acc6:	f100 0614 	add.w	r6, r0, #20
    acca:	f04f 0320 	mov.w	r3, #32
    acce:	f3ef 8711 	mrs	r7, BASEPRI
    acd2:	f383 8811 	msr	BASEPRI, r3
    acd6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    acda:	4630      	mov	r0, r6
    acdc:	f00e fefe 	bl	19adc <z_spin_lock_valid>
    ace0:	b940      	cbnz	r0, acf4 <transition_complete+0x34>
    ace2:	490a      	ldr	r1, [pc, #40]	; (ad0c <transition_complete+0x4c>)
    ace4:	480a      	ldr	r0, [pc, #40]	; (ad10 <transition_complete+0x50>)
    ace6:	227c      	movs	r2, #124	; 0x7c
    ace8:	f00f fee4 	bl	1aab4 <printk>
    acec:	217c      	movs	r1, #124	; 0x7c
    acee:	4807      	ldr	r0, [pc, #28]	; (ad0c <transition_complete+0x4c>)
    acf0:	f010 f986 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
    acf4:	4630      	mov	r0, r6
    acf6:	f00e ff0d 	bl	19b14 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
    acfa:	463a      	mov	r2, r7
    acfc:	4620      	mov	r0, r4
	mgr->last_res = res;
    acfe:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    ad00:	2101      	movs	r1, #1
}
    ad02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    ad06:	f7ff be25 	b.w	a954 <process_event>
    ad0a:	bf00      	nop
    ad0c:	00020077 	.word	0x00020077
    ad10:	0002003d 	.word	0x0002003d

0000ad14 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    ad14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ad18:	4604      	mov	r4, r0
    ad1a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    ad1c:	f00f ff16 	bl	1ab4c <validate_args>

	if (rv < 0) {
    ad20:	1e05      	subs	r5, r0, #0
    ad22:	db54      	blt.n	adce <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    ad24:	f104 0914 	add.w	r9, r4, #20
    ad28:	f04f 0320 	mov.w	r3, #32
    ad2c:	f3ef 8a11 	mrs	sl, BASEPRI
    ad30:	f383 8811 	msr	BASEPRI, r3
    ad34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ad38:	4648      	mov	r0, r9
    ad3a:	f00e fecf 	bl	19adc <z_spin_lock_valid>
    ad3e:	b940      	cbnz	r0, ad52 <onoff_request+0x3e>
    ad40:	4933      	ldr	r1, [pc, #204]	; (ae10 <onoff_request+0xfc>)
    ad42:	4834      	ldr	r0, [pc, #208]	; (ae14 <onoff_request+0x100>)
    ad44:	227c      	movs	r2, #124	; 0x7c
    ad46:	f00f feb5 	bl	1aab4 <printk>
    ad4a:	217c      	movs	r1, #124	; 0x7c
    ad4c:	4830      	ldr	r0, [pc, #192]	; (ae10 <onoff_request+0xfc>)
    ad4e:	f010 f957 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
    ad52:	4648      	mov	r0, r9
    ad54:	f00e fede 	bl	19b14 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    ad58:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ad5c:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    ad5e:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    ad60:	428b      	cmp	r3, r1
    ad62:	f002 0607 	and.w	r6, r2, #7
    ad66:	d04a      	beq.n	adfe <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    ad68:	2e02      	cmp	r6, #2
    ad6a:	d11f      	bne.n	adac <onoff_request+0x98>
	rv = state;
    ad6c:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
    ad6e:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
    ad72:	3301      	adds	r3, #1
    ad74:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ad76:	4648      	mov	r0, r9
    ad78:	f00e febe 	bl	19af8 <z_spin_unlock_valid>
    ad7c:	b940      	cbnz	r0, ad90 <onoff_request+0x7c>
    ad7e:	4924      	ldr	r1, [pc, #144]	; (ae10 <onoff_request+0xfc>)
    ad80:	4824      	ldr	r0, [pc, #144]	; (ae14 <onoff_request+0x100>)
    ad82:	22a7      	movs	r2, #167	; 0xa7
    ad84:	f00f fe96 	bl	1aab4 <printk>
    ad88:	21a7      	movs	r1, #167	; 0xa7
    ad8a:	4821      	ldr	r0, [pc, #132]	; (ae10 <onoff_request+0xfc>)
    ad8c:	f010 f938 	bl	1b000 <assert_post_action>
	__asm__ volatile(
    ad90:	f38a 8811 	msr	BASEPRI, sl
    ad94:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    ad98:	f1b8 0f00 	cmp.w	r8, #0
    ad9c:	d017      	beq.n	adce <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    ad9e:	2300      	movs	r3, #0
    ada0:	4632      	mov	r2, r6
    ada2:	4639      	mov	r1, r7
    ada4:	4620      	mov	r0, r4
    ada6:	f00f febb 	bl	1ab20 <notify_one>
    adaa:	e010      	b.n	adce <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    adac:	0793      	lsls	r3, r2, #30
    adae:	d001      	beq.n	adb4 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    adb0:	2e06      	cmp	r6, #6
    adb2:	d10f      	bne.n	add4 <onoff_request+0xc0>
	parent->next = child;
    adb4:	2300      	movs	r3, #0
    adb6:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    adb8:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    adba:	b9eb      	cbnz	r3, adf8 <onoff_request+0xe4>
	list->head = node;
    adbc:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    adc0:	4635      	mov	r5, r6
    adc2:	b9f6      	cbnz	r6, ae02 <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    adc4:	4652      	mov	r2, sl
    adc6:	2102      	movs	r1, #2
    adc8:	4620      	mov	r0, r4
    adca:	f7ff fdc3 	bl	a954 <process_event>
		}
	}

	return rv;
}
    adce:	4628      	mov	r0, r5
    add0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    add4:	2e05      	cmp	r6, #5
    add6:	d017      	beq.n	ae08 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    add8:	2e01      	cmp	r6, #1
    adda:	d00a      	beq.n	adf2 <onoff_request+0xde>
    addc:	490e      	ldr	r1, [pc, #56]	; (ae18 <onoff_request+0x104>)
    adde:	480d      	ldr	r0, [pc, #52]	; (ae14 <onoff_request+0x100>)
    ade0:	f240 12c5 	movw	r2, #453	; 0x1c5
    ade4:	f00f fe66 	bl	1aab4 <printk>
    ade8:	f240 11c5 	movw	r1, #453	; 0x1c5
    adec:	480a      	ldr	r0, [pc, #40]	; (ae18 <onoff_request+0x104>)
    adee:	f010 f907 	bl	1b000 <assert_post_action>
		rv = -EIO;
    adf2:	f06f 0504 	mvn.w	r5, #4
    adf6:	e004      	b.n	ae02 <onoff_request+0xee>
	parent->next = child;
    adf8:	601f      	str	r7, [r3, #0]
	list->tail = node;
    adfa:	6067      	str	r7, [r4, #4]
}
    adfc:	e7e0      	b.n	adc0 <onoff_request+0xac>
		rv = -EAGAIN;
    adfe:	f06f 050a 	mvn.w	r5, #10
    ae02:	f04f 0800 	mov.w	r8, #0
    ae06:	e7b6      	b.n	ad76 <onoff_request+0x62>
		rv = -ENOTSUP;
    ae08:	f06f 0522 	mvn.w	r5, #34	; 0x22
    ae0c:	e7f9      	b.n	ae02 <onoff_request+0xee>
    ae0e:	bf00      	nop
    ae10:	00020077 	.word	0x00020077
    ae14:	0002003d 	.word	0x0002003d
    ae18:	00020055 	.word	0x00020055

0000ae1c <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    ae1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae20:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    ae22:	4e14      	ldr	r6, [pc, #80]	; (ae74 <z_work_q_main+0x58>)
    ae24:	f8df 8050 	ldr.w	r8, [pc, #80]	; ae78 <z_work_q_main+0x5c>
	return z_impl_k_queue_get(queue, timeout);
    ae28:	f04f 32ff 	mov.w	r2, #4294967295
    ae2c:	f04f 33ff 	mov.w	r3, #4294967295
    ae30:	4628      	mov	r0, r5
    ae32:	f00d fbfb 	bl	1862c <z_impl_k_queue_get>
		if (work == NULL) {
    ae36:	4604      	mov	r4, r0
    ae38:	2800      	cmp	r0, #0
    ae3a:	d0f5      	beq.n	ae28 <z_work_q_main+0xc>
		handler = work->handler;
    ae3c:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    ae3e:	b947      	cbnz	r7, ae52 <z_work_q_main+0x36>
    ae40:	4631      	mov	r1, r6
    ae42:	4640      	mov	r0, r8
    ae44:	221c      	movs	r2, #28
    ae46:	f00f fe35 	bl	1aab4 <printk>
    ae4a:	211c      	movs	r1, #28
    ae4c:	4630      	mov	r0, r6
    ae4e:	f010 f8d7 	bl	1b000 <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ae52:	f104 0308 	add.w	r3, r4, #8
    ae56:	e8d3 2fef 	ldaex	r2, [r3]
    ae5a:	f022 0101 	bic.w	r1, r2, #1
    ae5e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    ae62:	2800      	cmp	r0, #0
    ae64:	d1f7      	bne.n	ae56 <z_work_q_main+0x3a>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    ae66:	07d3      	lsls	r3, r2, #31
    ae68:	d501      	bpl.n	ae6e <z_work_q_main+0x52>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    ae6a:	4620      	mov	r0, r4
    ae6c:	47b8      	blx	r7
	z_impl_k_yield();
    ae6e:	f00e fb07 	bl	19480 <z_impl_k_yield>
    ae72:	e7d9      	b.n	ae28 <z_work_q_main+0xc>
    ae74:	0002009d 	.word	0x0002009d
    ae78:	0002003d 	.word	0x0002003d

0000ae7c <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    ae7c:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    ae7e:	2900      	cmp	r1, #0
    ae80:	d039      	beq.n	aef6 <sys_heap_free+0x7a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    ae82:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ae84:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    ae86:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ae88:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
    ae8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ae8e:	bf2c      	ite	cs
    ae90:	2408      	movcs	r4, #8
    ae92:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ae94:	1b0c      	subs	r4, r1, r4
    ae96:	1b64      	subs	r4, r4, r5
    ae98:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    ae9a:	4621      	mov	r1, r4
    ae9c:	f00f fe82 	bl	1aba4 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    aea0:	07c3      	lsls	r3, r0, #31
    aea2:	d408      	bmi.n	aeb6 <sys_heap_free+0x3a>
    aea4:	4914      	ldr	r1, [pc, #80]	; (aef8 <sys_heap_free+0x7c>)
    aea6:	4815      	ldr	r0, [pc, #84]	; (aefc <sys_heap_free+0x80>)
    aea8:	229a      	movs	r2, #154	; 0x9a
    aeaa:	f00f fe03 	bl	1aab4 <printk>
    aeae:	219a      	movs	r1, #154	; 0x9a
    aeb0:	4811      	ldr	r0, [pc, #68]	; (aef8 <sys_heap_free+0x7c>)
    aeb2:	f010 f8a5 	bl	1b000 <assert_post_action>
	return c + chunk_size(h, c);
    aeb6:	4621      	mov	r1, r4
    aeb8:	4628      	mov	r0, r5
    aeba:	f00f fe89 	bl	1abd0 <chunk_size>
    aebe:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    aec0:	4631      	mov	r1, r6
    aec2:	2200      	movs	r2, #0
    aec4:	4628      	mov	r0, r5
    aec6:	f00f fe6d 	bl	1aba4 <chunk_field>
    aeca:	1a36      	subs	r6, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    aecc:	42b4      	cmp	r4, r6
    aece:	d008      	beq.n	aee2 <sys_heap_free+0x66>
    aed0:	4909      	ldr	r1, [pc, #36]	; (aef8 <sys_heap_free+0x7c>)
    aed2:	480a      	ldr	r0, [pc, #40]	; (aefc <sys_heap_free+0x80>)
    aed4:	22a2      	movs	r2, #162	; 0xa2
    aed6:	f00f fded 	bl	1aab4 <printk>
    aeda:	21a2      	movs	r1, #162	; 0xa2
    aedc:	4806      	ldr	r0, [pc, #24]	; (aef8 <sys_heap_free+0x7c>)
    aede:	f010 f88f 	bl	1b000 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    aee2:	4621      	mov	r1, r4
    aee4:	4628      	mov	r0, r5
    aee6:	2200      	movs	r2, #0
    aee8:	f00f fe78 	bl	1abdc <set_chunk_used>
	free_chunk(h, c);
    aeec:	4621      	mov	r1, r4
}
    aeee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    aef2:	f00f bfb5 	b.w	1ae60 <free_chunk>
}
    aef6:	bd70      	pop	{r4, r5, r6, pc}
    aef8:	000200c0 	.word	0x000200c0
    aefc:	0002003d 	.word	0x0002003d

0000af00 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    af00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    af04:	f101 39ff 	add.w	r9, r1, #4294967295
    af08:	ea19 0f01 	tst.w	r9, r1
{
    af0c:	4680      	mov	r8, r0
    af0e:	460f      	mov	r7, r1
    af10:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    af12:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    af14:	d008      	beq.n	af28 <sys_heap_aligned_alloc+0x28>
    af16:	4931      	ldr	r1, [pc, #196]	; (afdc <sys_heap_aligned_alloc+0xdc>)
    af18:	4831      	ldr	r0, [pc, #196]	; (afe0 <sys_heap_aligned_alloc+0xe0>)
    af1a:	22fc      	movs	r2, #252	; 0xfc
    af1c:	f00f fdca 	bl	1aab4 <printk>
    af20:	21fc      	movs	r1, #252	; 0xfc
    af22:	482e      	ldr	r0, [pc, #184]	; (afdc <sys_heap_aligned_alloc+0xdc>)
    af24:	f010 f86c 	bl	1b000 <assert_post_action>
	return big_heap_chunks(h->len);
    af28:	68a8      	ldr	r0, [r5, #8]
	return big_heap(h) ? 8 : 4;
    af2a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    af2e:	bf2c      	ite	cs
    af30:	2308      	movcs	r3, #8
    af32:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    af34:	429f      	cmp	r7, r3
    af36:	d805      	bhi.n	af44 <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    af38:	4621      	mov	r1, r4
    af3a:	4640      	mov	r0, r8
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    af3c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return sys_heap_alloc(heap, bytes);
    af40:	f00f bfd0 	b.w	1aee4 <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    af44:	b91c      	cbnz	r4, af4e <sys_heap_aligned_alloc+0x4e>
		return NULL;
    af46:	2600      	movs	r6, #0
}
    af48:	4630      	mov	r0, r6
    af4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    af4e:	ebb0 0fd4 	cmp.w	r0, r4, lsr #3
    af52:	d9f8      	bls.n	af46 <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    af54:	1939      	adds	r1, r7, r4
    af56:	1ac9      	subs	r1, r1, r3
    af58:	f00f fe5c 	bl	1ac14 <bytes_to_chunksz.isra.0>
    af5c:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    af5e:	4628      	mov	r0, r5
    af60:	f00f feb3 	bl	1acca <alloc_chunk>
	if (c0 == 0) {
    af64:	4680      	mov	r8, r0
    af66:	2800      	cmp	r0, #0
    af68:	d0ed      	beq.n	af46 <sys_heap_aligned_alloc+0x46>
    af6a:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    af6c:	427f      	negs	r7, r7
    af6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    af72:	bf2c      	ite	cs
    af74:	2308      	movcs	r3, #8
    af76:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    af78:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    af7c:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    af7e:	444e      	add	r6, r9
    af80:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    af82:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    af84:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    af86:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    af88:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    af8a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    af8e:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    af90:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    af94:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    af98:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    af9c:	d208      	bcs.n	afb0 <sys_heap_aligned_alloc+0xb0>
		split_chunks(h, c0, c);
    af9e:	4601      	mov	r1, r0
    afa0:	463a      	mov	r2, r7
    afa2:	4628      	mov	r0, r5
    afa4:	f00f fed4 	bl	1ad50 <split_chunks>
		free_list_add(h, c0);
    afa8:	4641      	mov	r1, r8
    afaa:	4628      	mov	r0, r5
    afac:	f00f ff15 	bl	1adda <free_list_add>
	return c + chunk_size(h, c);
    afb0:	4639      	mov	r1, r7
    afb2:	4628      	mov	r0, r5
    afb4:	f00f fe0c 	bl	1abd0 <chunk_size>
    afb8:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    afba:	4284      	cmp	r4, r0
    afbc:	d208      	bcs.n	afd0 <sys_heap_aligned_alloc+0xd0>
		split_chunks(h, c, c_end);
    afbe:	4639      	mov	r1, r7
    afc0:	4628      	mov	r0, r5
    afc2:	4622      	mov	r2, r4
    afc4:	f00f fec4 	bl	1ad50 <split_chunks>
		free_list_add(h, c_end);
    afc8:	4621      	mov	r1, r4
    afca:	4628      	mov	r0, r5
    afcc:	f00f ff05 	bl	1adda <free_list_add>
	set_chunk_used(h, c, true);
    afd0:	2201      	movs	r2, #1
    afd2:	4639      	mov	r1, r7
    afd4:	4628      	mov	r0, r5
    afd6:	f00f fe01 	bl	1abdc <set_chunk_used>
	return mem;
    afda:	e7b5      	b.n	af48 <sys_heap_aligned_alloc+0x48>
    afdc:	000200c0 	.word	0x000200c0
    afe0:	0002003d 	.word	0x0002003d

0000afe4 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    afe4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    afea:	4607      	mov	r7, r0
    afec:	460c      	mov	r4, r1
    afee:	4616      	mov	r6, r2
    aff0:	d20e      	bcs.n	b010 <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    aff2:	2a04      	cmp	r2, #4
    aff4:	d80a      	bhi.n	b00c <sys_heap_init+0x28>
    aff6:	493d      	ldr	r1, [pc, #244]	; (b0ec <sys_heap_init+0x108>)
    aff8:	483d      	ldr	r0, [pc, #244]	; (b0f0 <sys_heap_init+0x10c>)
    affa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    affe:	f00f fd59 	bl	1aab4 <printk>
    b002:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    b006:	4839      	ldr	r0, [pc, #228]	; (b0ec <sys_heap_init+0x108>)
    b008:	f00f fffa 	bl	1b000 <assert_post_action>
    b00c:	2204      	movs	r2, #4
    b00e:	e000      	b.n	b012 <sys_heap_init+0x2e>
    b010:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
    b012:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    b014:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    b016:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    b018:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    b01c:	f024 0407 	bic.w	r4, r4, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    b020:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    b022:	2c17      	cmp	r4, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    b024:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    b028:	d80a      	bhi.n	b040 <sys_heap_init+0x5c>
    b02a:	4930      	ldr	r1, [pc, #192]	; (b0ec <sys_heap_init+0x108>)
    b02c:	4830      	ldr	r0, [pc, #192]	; (b0f0 <sys_heap_init+0x10c>)
    b02e:	f240 1275 	movw	r2, #373	; 0x175
    b032:	f00f fd3f 	bl	1aab4 <printk>
    b036:	f240 1175 	movw	r1, #373	; 0x175
    b03a:	482c      	ldr	r0, [pc, #176]	; (b0ec <sys_heap_init+0x108>)
    b03c:	f00f ffe0 	bl	1b000 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    b040:	2300      	movs	r3, #0
    b042:	2200      	movs	r2, #0
	heap->heap = h;
    b044:	603d      	str	r5, [r7, #0]
	h->chunk0_hdr_area = 0;
    b046:	e9c5 2300 	strd	r2, r3, [r5]
	h->len = buf_sz;
	h->avail_buckets = 0;
    b04a:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    b04c:	4631      	mov	r1, r6
    b04e:	4630      	mov	r0, r6
	h->len = buf_sz;
    b050:	60ae      	str	r6, [r5, #8]
	h->avail_buckets = 0;
    b052:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    b054:	f00f fde7 	bl	1ac26 <bucket_idx.isra.0>
    b058:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    b05a:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    b05c:	1c47      	adds	r7, r0, #1
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b05e:	4630      	mov	r0, r6
    b060:	f00f fdd8 	bl	1ac14 <bytes_to_chunksz.isra.0>
    b064:	341b      	adds	r4, #27
    b066:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    b068:	4420      	add	r0, r4
    b06a:	42b0      	cmp	r0, r6
    b06c:	d30a      	bcc.n	b084 <sys_heap_init+0xa0>
    b06e:	491f      	ldr	r1, [pc, #124]	; (b0ec <sys_heap_init+0x108>)
    b070:	481f      	ldr	r0, [pc, #124]	; (b0f0 <sys_heap_init+0x10c>)
    b072:	f240 1281 	movw	r2, #385	; 0x181
    b076:	f00f fd1d 	bl	1aab4 <printk>
    b07a:	f240 1181 	movw	r1, #385	; 0x181
    b07e:	481b      	ldr	r0, [pc, #108]	; (b0ec <sys_heap_init+0x108>)
    b080:	f00f ffbe 	bl	1b000 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    b084:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    b086:	4619      	mov	r1, r3
    b088:	f105 0210 	add.w	r2, r5, #16
	for (int i = 0; i < nb_buckets; i++) {
    b08c:	42bb      	cmp	r3, r7
    b08e:	db28      	blt.n	b0e2 <sys_heap_init+0xfe>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    b090:	4622      	mov	r2, r4
    b092:	4628      	mov	r0, r5
    b094:	2100      	movs	r1, #0
    b096:	f00f fdb9 	bl	1ac0c <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    b09a:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
    b09c:	4628      	mov	r0, r5
    b09e:	2201      	movs	r2, #1
    b0a0:	2100      	movs	r1, #0
    b0a2:	f00f fd9b 	bl	1abdc <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    b0a6:	463a      	mov	r2, r7
    b0a8:	4621      	mov	r1, r4
    b0aa:	f00f fdaf 	bl	1ac0c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    b0ae:	4623      	mov	r3, r4
    b0b0:	2200      	movs	r2, #0
    b0b2:	4621      	mov	r1, r4
    b0b4:	4628      	mov	r0, r5
    b0b6:	f00f fd80 	bl	1abba <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    b0ba:	4631      	mov	r1, r6
    b0bc:	4628      	mov	r0, r5
    b0be:	f00f fda5 	bl	1ac0c <set_chunk_size>
    b0c2:	463b      	mov	r3, r7
    b0c4:	4631      	mov	r1, r6
    b0c6:	4628      	mov	r0, r5
    b0c8:	2200      	movs	r2, #0
    b0ca:	f00f fd76 	bl	1abba <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    b0ce:	4631      	mov	r1, r6
    b0d0:	4628      	mov	r0, r5
    b0d2:	2201      	movs	r2, #1
    b0d4:	f00f fd82 	bl	1abdc <set_chunk_used>

	free_list_add(h, chunk0_size);
    b0d8:	4621      	mov	r1, r4
}
    b0da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    b0de:	f00f be7c 	b.w	1adda <free_list_add>
		h->buckets[i].next = 0;
    b0e2:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    b0e6:	3301      	adds	r3, #1
    b0e8:	e7d0      	b.n	b08c <sys_heap_init+0xa8>
    b0ea:	bf00      	nop
    b0ec:	000200c0 	.word	0x000200c0
    b0f0:	0002003d 	.word	0x0002003d

0000b0f4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    b0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0f8:	468b      	mov	fp, r1
    b0fa:	4692      	mov	sl, r2
    b0fc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    b0fe:	2500      	movs	r5, #0
{
    b100:	b091      	sub	sp, #68	; 0x44
    b102:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    b104:	f89a 0000 	ldrb.w	r0, [sl]
    b108:	b908      	cbnz	r0, b10e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    b10a:	4628      	mov	r0, r5
    b10c:	e35f      	b.n	b7ce <cbvprintf+0x6da>
		if (*fp != '%') {
    b10e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    b110:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    b114:	d007      	beq.n	b126 <cbvprintf+0x32>
			OUTC('%');
    b116:	4659      	mov	r1, fp
    b118:	9b02      	ldr	r3, [sp, #8]
    b11a:	4798      	blx	r3
    b11c:	2800      	cmp	r0, #0
    b11e:	f2c0 8356 	blt.w	b7ce <cbvprintf+0x6da>
    b122:	3501      	adds	r5, #1
			break;
    b124:	e212      	b.n	b54c <cbvprintf+0x458>
		} state = {
    b126:	2218      	movs	r2, #24
    b128:	2100      	movs	r1, #0
    b12a:	a80a      	add	r0, sp, #40	; 0x28
    b12c:	f010 ff31 	bl	1bf92 <memset>
	if (*sp == '%') {
    b130:	f89a 3001 	ldrb.w	r3, [sl, #1]
    b134:	2b25      	cmp	r3, #37	; 0x25
    b136:	d078      	beq.n	b22a <cbvprintf+0x136>
    b138:	2200      	movs	r2, #0
    b13a:	4694      	mov	ip, r2
    b13c:	4696      	mov	lr, r2
    b13e:	4616      	mov	r6, r2
    b140:	4610      	mov	r0, r2
    b142:	4639      	mov	r1, r7
		switch (*sp) {
    b144:	f817 3b01 	ldrb.w	r3, [r7], #1
    b148:	2b2b      	cmp	r3, #43	; 0x2b
    b14a:	f000 809d 	beq.w	b288 <cbvprintf+0x194>
    b14e:	f200 8094 	bhi.w	b27a <cbvprintf+0x186>
    b152:	2b20      	cmp	r3, #32
    b154:	f000 809a 	beq.w	b28c <cbvprintf+0x198>
    b158:	2b23      	cmp	r3, #35	; 0x23
    b15a:	f000 809a 	beq.w	b292 <cbvprintf+0x19e>
    b15e:	b128      	cbz	r0, b16c <cbvprintf+0x78>
    b160:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    b164:	f040 0004 	orr.w	r0, r0, #4
    b168:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    b16c:	b12e      	cbz	r6, b17a <cbvprintf+0x86>
    b16e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    b172:	f040 0008 	orr.w	r0, r0, #8
    b176:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    b17a:	f1be 0f00 	cmp.w	lr, #0
    b17e:	d005      	beq.n	b18c <cbvprintf+0x98>
    b180:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    b184:	f040 0010 	orr.w	r0, r0, #16
    b188:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    b18c:	f1bc 0f00 	cmp.w	ip, #0
    b190:	d005      	beq.n	b19e <cbvprintf+0xaa>
    b192:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    b196:	f040 0020 	orr.w	r0, r0, #32
    b19a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    b19e:	b12a      	cbz	r2, b1ac <cbvprintf+0xb8>
    b1a0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    b1a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    b1a8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    b1ac:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    b1b0:	f002 0044 	and.w	r0, r2, #68	; 0x44
    b1b4:	2844      	cmp	r0, #68	; 0x44
    b1b6:	d103      	bne.n	b1c0 <cbvprintf+0xcc>
		conv->flag_zero = false;
    b1b8:	f36f 1286 	bfc	r2, #6, #1
    b1bc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    b1c0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    b1c4:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    b1c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    b1ca:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    b1ce:	d17b      	bne.n	b2c8 <cbvprintf+0x1d4>
		conv->width_star = true;
    b1d0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    b1d4:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    b1d6:	f042 0201 	orr.w	r2, r2, #1
    b1da:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    b1de:	781a      	ldrb	r2, [r3, #0]
    b1e0:	2a2e      	cmp	r2, #46	; 0x2e
    b1e2:	bf0c      	ite	eq
    b1e4:	2101      	moveq	r1, #1
    b1e6:	2100      	movne	r1, #0
    b1e8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    b1ec:	f361 0241 	bfi	r2, r1, #1, #1
    b1f0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    b1f4:	d174      	bne.n	b2e0 <cbvprintf+0x1ec>
	if (*sp == '*') {
    b1f6:	785a      	ldrb	r2, [r3, #1]
    b1f8:	2a2a      	cmp	r2, #42	; 0x2a
    b1fa:	d06a      	beq.n	b2d2 <cbvprintf+0x1de>
	size_t val = 0;
    b1fc:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    b1fe:	260a      	movs	r6, #10
	++sp;
    b200:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    b202:	4618      	mov	r0, r3
    b204:	f810 2b01 	ldrb.w	r2, [r0], #1
    b208:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    b20c:	2f09      	cmp	r7, #9
    b20e:	f240 808e 	bls.w	b32e <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    b212:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    b216:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    b218:	f3c2 0040 	ubfx	r0, r2, #1, #1
    b21c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    b220:	f361 0241 	bfi	r2, r1, #1, #1
    b224:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    b228:	e05a      	b.n	b2e0 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    b22a:	f10a 0702 	add.w	r7, sl, #2
    b22e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    b232:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b236:	07d9      	lsls	r1, r3, #31
    b238:	f140 8149 	bpl.w	b4ce <cbvprintf+0x3da>
			width = va_arg(ap, int);
    b23c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    b240:	f1b9 0f00 	cmp.w	r9, #0
    b244:	da07      	bge.n	b256 <cbvprintf+0x162>
				conv->flag_dash = true;
    b246:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    b24a:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    b24e:	f042 0204 	orr.w	r2, r2, #4
    b252:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    b256:	075a      	lsls	r2, r3, #29
    b258:	f140 8142 	bpl.w	b4e0 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    b25c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    b260:	f1b8 0f00 	cmp.w	r8, #0
    b264:	f280 8141 	bge.w	b4ea <cbvprintf+0x3f6>
				conv->prec_present = false;
    b268:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b26c:	f36f 0341 	bfc	r3, #1, #1
    b270:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    b274:	f04f 38ff 	mov.w	r8, #4294967295
    b278:	e137      	b.n	b4ea <cbvprintf+0x3f6>
		switch (*sp) {
    b27a:	2b2d      	cmp	r3, #45	; 0x2d
    b27c:	d00c      	beq.n	b298 <cbvprintf+0x1a4>
    b27e:	2b30      	cmp	r3, #48	; 0x30
    b280:	f47f af6d 	bne.w	b15e <cbvprintf+0x6a>
			conv->flag_zero = true;
    b284:	2201      	movs	r2, #1
	} while (loop);
    b286:	e75c      	b.n	b142 <cbvprintf+0x4e>
			conv->flag_plus = true;
    b288:	2601      	movs	r6, #1
    b28a:	e75a      	b.n	b142 <cbvprintf+0x4e>
			conv->flag_space = true;
    b28c:	f04f 0e01 	mov.w	lr, #1
    b290:	e757      	b.n	b142 <cbvprintf+0x4e>
			conv->flag_hash = true;
    b292:	f04f 0c01 	mov.w	ip, #1
    b296:	e754      	b.n	b142 <cbvprintf+0x4e>
		switch (*sp) {
    b298:	2001      	movs	r0, #1
    b29a:	e752      	b.n	b142 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    b29c:	4633      	mov	r3, r6
    b29e:	fb0c 0202 	mla	r2, ip, r2, r0
    b2a2:	3a30      	subs	r2, #48	; 0x30
    b2a4:	461e      	mov	r6, r3
    b2a6:	f816 0b01 	ldrb.w	r0, [r6], #1
    b2aa:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    b2ae:	2f09      	cmp	r7, #9
    b2b0:	d9f4      	bls.n	b29c <cbvprintf+0x1a8>
	if (sp != wp) {
    b2b2:	4299      	cmp	r1, r3
    b2b4:	d093      	beq.n	b1de <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    b2b6:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    b2ba:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    b2bc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    b2be:	f362 0141 	bfi	r1, r2, #1, #1
    b2c2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    b2c6:	e78a      	b.n	b1de <cbvprintf+0xea>
    b2c8:	460b      	mov	r3, r1
	size_t val = 0;
    b2ca:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    b2cc:	f04f 0c0a 	mov.w	ip, #10
    b2d0:	e7e8      	b.n	b2a4 <cbvprintf+0x1b0>
		conv->prec_star = true;
    b2d2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    b2d6:	3302      	adds	r3, #2
		conv->prec_star = true;
    b2d8:	f042 0204 	orr.w	r2, r2, #4
    b2dc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    b2e0:	461f      	mov	r7, r3
    b2e2:	f817 2b01 	ldrb.w	r2, [r7], #1
    b2e6:	2a6c      	cmp	r2, #108	; 0x6c
    b2e8:	d041      	beq.n	b36e <cbvprintf+0x27a>
    b2ea:	d825      	bhi.n	b338 <cbvprintf+0x244>
    b2ec:	2a68      	cmp	r2, #104	; 0x68
    b2ee:	d02b      	beq.n	b348 <cbvprintf+0x254>
    b2f0:	2a6a      	cmp	r2, #106	; 0x6a
    b2f2:	d046      	beq.n	b382 <cbvprintf+0x28e>
    b2f4:	2a4c      	cmp	r2, #76	; 0x4c
    b2f6:	d04c      	beq.n	b392 <cbvprintf+0x29e>
    b2f8:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    b2fa:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    b2fe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    b302:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    b304:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    b308:	f200 80d9 	bhi.w	b4be <cbvprintf+0x3ca>
    b30c:	2a57      	cmp	r2, #87	; 0x57
    b30e:	d84d      	bhi.n	b3ac <cbvprintf+0x2b8>
    b310:	2a41      	cmp	r2, #65	; 0x41
    b312:	d003      	beq.n	b31c <cbvprintf+0x228>
    b314:	3a45      	subs	r2, #69	; 0x45
    b316:	2a02      	cmp	r2, #2
    b318:	f200 80d1 	bhi.w	b4be <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    b31c:	2204      	movs	r2, #4
    b31e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b322:	f362 0302 	bfi	r3, r2, #0, #3
    b326:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    b32a:	2301      	movs	r3, #1
			break;
    b32c:	e09e      	b.n	b46c <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    b32e:	fb06 2101 	mla	r1, r6, r1, r2
    b332:	4603      	mov	r3, r0
    b334:	3930      	subs	r1, #48	; 0x30
    b336:	e764      	b.n	b202 <cbvprintf+0x10e>
	switch (*sp) {
    b338:	2a74      	cmp	r2, #116	; 0x74
    b33a:	d026      	beq.n	b38a <cbvprintf+0x296>
    b33c:	2a7a      	cmp	r2, #122	; 0x7a
    b33e:	d1db      	bne.n	b2f8 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    b340:	2206      	movs	r2, #6
    b342:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b346:	e00d      	b.n	b364 <cbvprintf+0x270>
		if (*++sp == 'h') {
    b348:	785a      	ldrb	r2, [r3, #1]
    b34a:	2a68      	cmp	r2, #104	; 0x68
    b34c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    b350:	d106      	bne.n	b360 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    b352:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    b354:	f361 02c6 	bfi	r2, r1, #3, #4
    b358:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    b35c:	1c9f      	adds	r7, r3, #2
    b35e:	e7cc      	b.n	b2fa <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    b360:	4613      	mov	r3, r2
    b362:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    b364:	f362 03c6 	bfi	r3, r2, #3, #4
    b368:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    b36c:	e7c5      	b.n	b2fa <cbvprintf+0x206>
		if (*++sp == 'l') {
    b36e:	785a      	ldrb	r2, [r3, #1]
    b370:	2a6c      	cmp	r2, #108	; 0x6c
    b372:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    b376:	d101      	bne.n	b37c <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    b378:	2104      	movs	r1, #4
    b37a:	e7eb      	b.n	b354 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    b37c:	4613      	mov	r3, r2
    b37e:	2203      	movs	r2, #3
    b380:	e7f0      	b.n	b364 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    b382:	2205      	movs	r2, #5
    b384:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b388:	e7ec      	b.n	b364 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    b38a:	2207      	movs	r2, #7
    b38c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    b390:	e7e8      	b.n	b364 <cbvprintf+0x270>
		conv->unsupported = true;
    b392:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    b396:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    b39a:	f023 0302 	bic.w	r3, r3, #2
    b39e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    b3a2:	f043 0302 	orr.w	r3, r3, #2
    b3a6:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    b3aa:	e7a6      	b.n	b2fa <cbvprintf+0x206>
    b3ac:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    b3b0:	2920      	cmp	r1, #32
    b3b2:	f200 8084 	bhi.w	b4be <cbvprintf+0x3ca>
    b3b6:	a001      	add	r0, pc, #4	; (adr r0, b3bc <cbvprintf+0x2c8>)
    b3b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    b3bc:	0000b481 	.word	0x0000b481
    b3c0:	0000b4bf 	.word	0x0000b4bf
    b3c4:	0000b4bf 	.word	0x0000b4bf
    b3c8:	0000b4bf 	.word	0x0000b4bf
    b3cc:	0000b4bf 	.word	0x0000b4bf
    b3d0:	0000b4bf 	.word	0x0000b4bf
    b3d4:	0000b4bf 	.word	0x0000b4bf
    b3d8:	0000b4bf 	.word	0x0000b4bf
    b3dc:	0000b4bf 	.word	0x0000b4bf
    b3e0:	0000b31d 	.word	0x0000b31d
    b3e4:	0000b4bf 	.word	0x0000b4bf
    b3e8:	0000b481 	.word	0x0000b481
    b3ec:	0000b441 	.word	0x0000b441
    b3f0:	0000b31d 	.word	0x0000b31d
    b3f4:	0000b31d 	.word	0x0000b31d
    b3f8:	0000b31d 	.word	0x0000b31d
    b3fc:	0000b4bf 	.word	0x0000b4bf
    b400:	0000b441 	.word	0x0000b441
    b404:	0000b4bf 	.word	0x0000b4bf
    b408:	0000b4bf 	.word	0x0000b4bf
    b40c:	0000b4bf 	.word	0x0000b4bf
    b410:	0000b4bf 	.word	0x0000b4bf
    b414:	0000b489 	.word	0x0000b489
    b418:	0000b481 	.word	0x0000b481
    b41c:	0000b4a5 	.word	0x0000b4a5
    b420:	0000b4bf 	.word	0x0000b4bf
    b424:	0000b4bf 	.word	0x0000b4bf
    b428:	0000b4a5 	.word	0x0000b4a5
    b42c:	0000b4bf 	.word	0x0000b4bf
    b430:	0000b481 	.word	0x0000b481
    b434:	0000b4bf 	.word	0x0000b4bf
    b438:	0000b4bf 	.word	0x0000b4bf
    b43c:	0000b481 	.word	0x0000b481
		conv->specifier_cat = SPECIFIER_SINT;
    b440:	2001      	movs	r0, #1
    b442:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b446:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    b44a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b44e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    b450:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    b454:	bf02      	ittt	eq
    b456:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    b45a:	f041 0101 	orreq.w	r1, r1, #1
    b45e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    b462:	2a63      	cmp	r2, #99	; 0x63
    b464:	d131      	bne.n	b4ca <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    b466:	3b00      	subs	r3, #0
    b468:	bf18      	it	ne
    b46a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    b46c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    b470:	f3c2 0140 	ubfx	r1, r2, #1, #1
    b474:	430b      	orrs	r3, r1
    b476:	f363 0241 	bfi	r2, r3, #1, #1
    b47a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    b47e:	e6d8      	b.n	b232 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    b480:	2002      	movs	r0, #2
    b482:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    b486:	e7de      	b.n	b446 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    b488:	2103      	movs	r1, #3
    b48a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b48e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    b492:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    b496:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b49a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    b49c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b4a0:	4143      	adcs	r3, r0
    b4a2:	e7e3      	b.n	b46c <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    b4a4:	2103      	movs	r1, #3
    b4a6:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    b4aa:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    b4ae:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    b4b2:	bf14      	ite	ne
    b4b4:	2301      	movne	r3, #1
    b4b6:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    b4b8:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    b4bc:	e7d6      	b.n	b46c <cbvprintf+0x378>
		conv->invalid = true;
    b4be:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    b4c2:	f043 0301 	orr.w	r3, r3, #1
    b4c6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    b4ca:	2300      	movs	r3, #0
    b4cc:	e7ce      	b.n	b46c <cbvprintf+0x378>
		} else if (conv->width_present) {
    b4ce:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    b4d2:	2a00      	cmp	r2, #0
		int width = -1;
    b4d4:	bfac      	ite	ge
    b4d6:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    b4da:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    b4de:	e6ba      	b.n	b256 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    b4e0:	079b      	lsls	r3, r3, #30
    b4e2:	f57f aec7 	bpl.w	b274 <cbvprintf+0x180>
			precision = conv->prec_value;
    b4e6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    b4ea:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    b4ec:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    b4f0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    b4f4:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    b4f8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    b4fc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    b4fe:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    b502:	d138      	bne.n	b576 <cbvprintf+0x482>
			switch (length_mod) {
    b504:	1ecb      	subs	r3, r1, #3
    b506:	2b04      	cmp	r3, #4
    b508:	d822      	bhi.n	b550 <cbvprintf+0x45c>
    b50a:	e8df f003 	tbb	[pc, r3]
    b50e:	0903      	.short	0x0903
    b510:	2109      	.short	0x2109
    b512:	21          	.byte	0x21
    b513:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    b514:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    b518:	17da      	asrs	r2, r3, #31
    b51a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    b51e:	e006      	b.n	b52e <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    b520:	3407      	adds	r4, #7
    b522:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    b526:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    b52a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    b52e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    b532:	f013 0603 	ands.w	r6, r3, #3
    b536:	d056      	beq.n	b5e6 <cbvprintf+0x4f2>
			OUTS(sp, fp);
    b538:	463b      	mov	r3, r7
    b53a:	4652      	mov	r2, sl
    b53c:	4659      	mov	r1, fp
    b53e:	9802      	ldr	r0, [sp, #8]
    b540:	f00f fd48 	bl	1afd4 <outs>
    b544:	2800      	cmp	r0, #0
    b546:	f2c0 8142 	blt.w	b7ce <cbvprintf+0x6da>
    b54a:	4405      	add	r5, r0
			continue;
    b54c:	46ba      	mov	sl, r7
    b54e:	e5d9      	b.n	b104 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b550:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    b554:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b556:	ea4f 72e3 	mov.w	r2, r3, asr #31
    b55a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    b55e:	d105      	bne.n	b56c <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    b560:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    b564:	930a      	str	r3, [sp, #40]	; 0x28
    b566:	2300      	movs	r3, #0
    b568:	930b      	str	r3, [sp, #44]	; 0x2c
    b56a:	e7e0      	b.n	b52e <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    b56c:	2902      	cmp	r1, #2
    b56e:	d1de      	bne.n	b52e <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    b570:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    b574:	e7d0      	b.n	b518 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    b576:	2b02      	cmp	r3, #2
    b578:	d123      	bne.n	b5c2 <cbvprintf+0x4ce>
			switch (length_mod) {
    b57a:	1ecb      	subs	r3, r1, #3
    b57c:	2b04      	cmp	r3, #4
    b57e:	d813      	bhi.n	b5a8 <cbvprintf+0x4b4>
    b580:	e8df f003 	tbb	[pc, r3]
    b584:	120a0a03 	.word	0x120a0a03
    b588:	12          	.byte	0x12
    b589:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    b58a:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    b58c:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    b58e:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    b590:	920a      	str	r2, [sp, #40]	; 0x28
    b592:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    b594:	4604      	mov	r4, r0
    b596:	e7ca      	b.n	b52e <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    b598:	1de0      	adds	r0, r4, #7
    b59a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    b59e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    b5a2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    b5a6:	e7f5      	b.n	b594 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    b5a8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    b5ac:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    b5ae:	930a      	str	r3, [sp, #40]	; 0x28
    b5b0:	f04f 0300 	mov.w	r3, #0
    b5b4:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    b5b6:	d0d3      	beq.n	b560 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    b5b8:	2902      	cmp	r1, #2
    b5ba:	d1b8      	bne.n	b52e <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    b5bc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    b5c0:	e7d0      	b.n	b564 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    b5c2:	2b04      	cmp	r3, #4
    b5c4:	d109      	bne.n	b5da <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    b5c6:	1de3      	adds	r3, r4, #7
    b5c8:	f023 0307 	bic.w	r3, r3, #7
    b5cc:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
    b5d4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    b5d8:	e7a9      	b.n	b52e <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    b5da:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    b5dc:	bf04      	itt	eq
    b5de:	f854 3b04 	ldreq.w	r3, [r4], #4
    b5e2:	930a      	streq	r3, [sp, #40]	; 0x28
    b5e4:	e7a3      	b.n	b52e <cbvprintf+0x43a>
		switch (conv->specifier) {
    b5e6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    b5ea:	2878      	cmp	r0, #120	; 0x78
    b5ec:	d8ae      	bhi.n	b54c <cbvprintf+0x458>
    b5ee:	2862      	cmp	r0, #98	; 0x62
    b5f0:	d822      	bhi.n	b638 <cbvprintf+0x544>
    b5f2:	2825      	cmp	r0, #37	; 0x25
    b5f4:	f43f ad8f 	beq.w	b116 <cbvprintf+0x22>
    b5f8:	2858      	cmp	r0, #88	; 0x58
    b5fa:	d1a7      	bne.n	b54c <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    b5fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    b600:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    b604:	9300      	str	r3, [sp, #0]
    b606:	aa0c      	add	r2, sp, #48	; 0x30
    b608:	ab04      	add	r3, sp, #16
    b60a:	f00f fc9d 	bl	1af48 <encode_uint>
    b60e:	4682      	mov	sl, r0
			if (precision >= 0) {
    b610:	f1b8 0f00 	cmp.w	r8, #0
    b614:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    b618:	db0c      	blt.n	b634 <cbvprintf+0x540>
				conv->flag_zero = false;
    b61a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    b61e:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    b622:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    b626:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    b628:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    b62c:	d902      	bls.n	b634 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    b62e:	eba8 0303 	sub.w	r3, r8, r3
    b632:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    b634:	4680      	mov	r8, r0
    b636:	e03d      	b.n	b6b4 <cbvprintf+0x5c0>
    b638:	3863      	subs	r0, #99	; 0x63
    b63a:	2815      	cmp	r0, #21
    b63c:	d886      	bhi.n	b54c <cbvprintf+0x458>
    b63e:	a201      	add	r2, pc, #4	; (adr r2, b644 <cbvprintf+0x550>)
    b640:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    b644:	0000b6c5 	.word	0x0000b6c5
    b648:	0000b729 	.word	0x0000b729
    b64c:	0000b54d 	.word	0x0000b54d
    b650:	0000b54d 	.word	0x0000b54d
    b654:	0000b54d 	.word	0x0000b54d
    b658:	0000b54d 	.word	0x0000b54d
    b65c:	0000b729 	.word	0x0000b729
    b660:	0000b54d 	.word	0x0000b54d
    b664:	0000b54d 	.word	0x0000b54d
    b668:	0000b54d 	.word	0x0000b54d
    b66c:	0000b54d 	.word	0x0000b54d
    b670:	0000b783 	.word	0x0000b783
    b674:	0000b751 	.word	0x0000b751
    b678:	0000b755 	.word	0x0000b755
    b67c:	0000b54d 	.word	0x0000b54d
    b680:	0000b54d 	.word	0x0000b54d
    b684:	0000b69d 	.word	0x0000b69d
    b688:	0000b54d 	.word	0x0000b54d
    b68c:	0000b751 	.word	0x0000b751
    b690:	0000b54d 	.word	0x0000b54d
    b694:	0000b54d 	.word	0x0000b54d
    b698:	0000b751 	.word	0x0000b751
			if (precision >= 0) {
    b69c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    b6a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    b6a4:	db0a      	blt.n	b6bc <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    b6a6:	4641      	mov	r1, r8
    b6a8:	4650      	mov	r0, sl
    b6aa:	f010 fc10 	bl	1bece <strnlen>
		char sign = 0;
    b6ae:	2600      	movs	r6, #0
			bpe = bps + len;
    b6b0:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    b6b4:	f1ba 0f00 	cmp.w	sl, #0
    b6b8:	d10c      	bne.n	b6d4 <cbvprintf+0x5e0>
    b6ba:	e747      	b.n	b54c <cbvprintf+0x458>
				len = strlen(bps);
    b6bc:	4650      	mov	r0, sl
    b6be:	f010 fbff 	bl	1bec0 <strlen>
    b6c2:	e7f4      	b.n	b6ae <cbvprintf+0x5ba>
			break;
    b6c4:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b6c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    b6c8:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b6cc:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    b6d0:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    b6d4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    b6d8:	b106      	cbz	r6, b6dc <cbvprintf+0x5e8>
			nj_len += 1U;
    b6da:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    b6dc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    b6e0:	06d0      	lsls	r0, r2, #27
    b6e2:	d568      	bpl.n	b7b6 <cbvprintf+0x6c2>
			nj_len += 2U;
    b6e4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    b6e6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    b6e8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    b6ea:	bf48      	it	mi
    b6ec:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    b6ee:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    b6f0:	bf48      	it	mi
    b6f2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    b6f4:	f1b9 0f00 	cmp.w	r9, #0
    b6f8:	dd76      	ble.n	b7e8 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    b6fa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    b6fe:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    b702:	f3c2 0380 	ubfx	r3, r2, #2, #1
    b706:	9303      	str	r3, [sp, #12]
    b708:	0753      	lsls	r3, r2, #29
    b70a:	d46d      	bmi.n	b7e8 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    b70c:	0650      	lsls	r0, r2, #25
    b70e:	d561      	bpl.n	b7d4 <cbvprintf+0x6e0>
					if (sign != 0) {
    b710:	b146      	cbz	r6, b724 <cbvprintf+0x630>
						OUTC(sign);
    b712:	4659      	mov	r1, fp
    b714:	4630      	mov	r0, r6
    b716:	9b02      	ldr	r3, [sp, #8]
    b718:	4798      	blx	r3
    b71a:	2800      	cmp	r0, #0
    b71c:	db57      	blt.n	b7ce <cbvprintf+0x6da>
						sign = 0;
    b71e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    b720:	3501      	adds	r5, #1
						sign = 0;
    b722:	461e      	mov	r6, r3
					pad = '0';
    b724:	2330      	movs	r3, #48	; 0x30
    b726:	e056      	b.n	b7d6 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    b728:	071e      	lsls	r6, r3, #28
    b72a:	d40f      	bmi.n	b74c <cbvprintf+0x658>
				sign = ' ';
    b72c:	f013 0610 	ands.w	r6, r3, #16
    b730:	bf18      	it	ne
    b732:	2620      	movne	r6, #32
			if (value->sint < 0) {
    b734:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    b738:	2b00      	cmp	r3, #0
    b73a:	f6bf af5f 	bge.w	b5fc <cbvprintf+0x508>
				value->uint = (uint_value_type)-value->sint;
    b73e:	4252      	negs	r2, r2
    b740:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    b744:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    b746:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    b74a:	e757      	b.n	b5fc <cbvprintf+0x508>
				sign = '+';
    b74c:	262b      	movs	r6, #43	; 0x2b
    b74e:	e7f1      	b.n	b734 <cbvprintf+0x640>
		switch (conv->specifier) {
    b750:	2600      	movs	r6, #0
    b752:	e753      	b.n	b5fc <cbvprintf+0x508>
			if (value->ptr != NULL) {
    b754:	980a      	ldr	r0, [sp, #40]	; 0x28
    b756:	b340      	cbz	r0, b7aa <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b758:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    b75c:	9300      	str	r3, [sp, #0]
    b75e:	2100      	movs	r1, #0
    b760:	ab04      	add	r3, sp, #16
    b762:	aa0c      	add	r2, sp, #48	; 0x30
    b764:	f00f fbf0 	bl	1af48 <encode_uint>
				conv->altform_0c = true;
    b768:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b76c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    b76e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    b772:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    b776:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    b77a:	2600      	movs	r6, #0
				conv->altform_0c = true;
    b77c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    b780:	e746      	b.n	b610 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    b782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    b784:	2907      	cmp	r1, #7
    b786:	f63f aee1 	bhi.w	b54c <cbvprintf+0x458>
    b78a:	e8df f001 	tbb	[pc, r1]
    b78e:	040c      	.short	0x040c
    b790:	08080c06 	.word	0x08080c06
    b794:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    b796:	701d      	strb	r5, [r3, #0]
		break;
    b798:	e6d8      	b.n	b54c <cbvprintf+0x458>
		*(short *)dp = (short)count;
    b79a:	801d      	strh	r5, [r3, #0]
		break;
    b79c:	e6d6      	b.n	b54c <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    b79e:	17ea      	asrs	r2, r5, #31
    b7a0:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    b7a4:	e6d2      	b.n	b54c <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    b7a6:	601d      	str	r5, [r3, #0]
		break;
    b7a8:	e6d0      	b.n	b54c <cbvprintf+0x458>
			bps = "(nil)";
    b7aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; b874 <cbvprintf+0x780>
    b7ae:	4606      	mov	r6, r0
			bpe = bps + 5;
    b7b0:	f10a 0805 	add.w	r8, sl, #5
    b7b4:	e78e      	b.n	b6d4 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    b7b6:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    b7b8:	bf48      	it	mi
    b7ba:	3301      	addmi	r3, #1
    b7bc:	e793      	b.n	b6e6 <cbvprintf+0x5f2>
					OUTC(pad);
    b7be:	4618      	mov	r0, r3
    b7c0:	9303      	str	r3, [sp, #12]
    b7c2:	4659      	mov	r1, fp
    b7c4:	9b02      	ldr	r3, [sp, #8]
    b7c6:	4798      	blx	r3
    b7c8:	2800      	cmp	r0, #0
    b7ca:	9b03      	ldr	r3, [sp, #12]
    b7cc:	da04      	bge.n	b7d8 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    b7ce:	b011      	add	sp, #68	; 0x44
    b7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    b7d4:	2320      	movs	r3, #32
    b7d6:	444d      	add	r5, r9
    b7d8:	464a      	mov	r2, r9
				while (width-- > 0) {
    b7da:	2a00      	cmp	r2, #0
    b7dc:	eba5 0109 	sub.w	r1, r5, r9
    b7e0:	f109 39ff 	add.w	r9, r9, #4294967295
    b7e4:	dceb      	bgt.n	b7be <cbvprintf+0x6ca>
    b7e6:	460d      	mov	r5, r1
		if (sign != 0) {
    b7e8:	b136      	cbz	r6, b7f8 <cbvprintf+0x704>
			OUTC(sign);
    b7ea:	4659      	mov	r1, fp
    b7ec:	4630      	mov	r0, r6
    b7ee:	9b02      	ldr	r3, [sp, #8]
    b7f0:	4798      	blx	r3
    b7f2:	2800      	cmp	r0, #0
    b7f4:	dbeb      	blt.n	b7ce <cbvprintf+0x6da>
    b7f6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    b7f8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b7fc:	06d9      	lsls	r1, r3, #27
    b7fe:	d401      	bmi.n	b804 <cbvprintf+0x710>
    b800:	071a      	lsls	r2, r3, #28
    b802:	d506      	bpl.n	b812 <cbvprintf+0x71e>
				OUTC('0');
    b804:	4659      	mov	r1, fp
    b806:	2030      	movs	r0, #48	; 0x30
    b808:	9b02      	ldr	r3, [sp, #8]
    b80a:	4798      	blx	r3
    b80c:	2800      	cmp	r0, #0
    b80e:	dbde      	blt.n	b7ce <cbvprintf+0x6da>
    b810:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    b812:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b816:	06db      	lsls	r3, r3, #27
    b818:	d507      	bpl.n	b82a <cbvprintf+0x736>
				OUTC(conv->specifier);
    b81a:	4659      	mov	r1, fp
    b81c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    b820:	9b02      	ldr	r3, [sp, #8]
    b822:	4798      	blx	r3
    b824:	2800      	cmp	r0, #0
    b826:	dbd2      	blt.n	b7ce <cbvprintf+0x6da>
    b828:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    b82a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    b82c:	442e      	add	r6, r5
    b82e:	1b73      	subs	r3, r6, r5
    b830:	2b00      	cmp	r3, #0
    b832:	dc16      	bgt.n	b862 <cbvprintf+0x76e>
			OUTS(bps, bpe);
    b834:	4643      	mov	r3, r8
    b836:	4652      	mov	r2, sl
    b838:	4659      	mov	r1, fp
    b83a:	9802      	ldr	r0, [sp, #8]
    b83c:	f00f fbca 	bl	1afd4 <outs>
    b840:	2800      	cmp	r0, #0
    b842:	dbc4      	blt.n	b7ce <cbvprintf+0x6da>
    b844:	4405      	add	r5, r0
		while (width > 0) {
    b846:	44a9      	add	r9, r5
    b848:	eba9 0305 	sub.w	r3, r9, r5
    b84c:	2b00      	cmp	r3, #0
    b84e:	f77f ae7d 	ble.w	b54c <cbvprintf+0x458>
			OUTC(' ');
    b852:	4659      	mov	r1, fp
    b854:	2020      	movs	r0, #32
    b856:	9b02      	ldr	r3, [sp, #8]
    b858:	4798      	blx	r3
    b85a:	2800      	cmp	r0, #0
    b85c:	dbb7      	blt.n	b7ce <cbvprintf+0x6da>
    b85e:	3501      	adds	r5, #1
			--width;
    b860:	e7f2      	b.n	b848 <cbvprintf+0x754>
				OUTC('0');
    b862:	4659      	mov	r1, fp
    b864:	2030      	movs	r0, #48	; 0x30
    b866:	9b02      	ldr	r3, [sp, #8]
    b868:	4798      	blx	r3
    b86a:	2800      	cmp	r0, #0
    b86c:	dbaf      	blt.n	b7ce <cbvprintf+0x6da>
    b86e:	3501      	adds	r5, #1
    b870:	e7dd      	b.n	b82e <cbvprintf+0x73a>
    b872:	bf00      	nop
    b874:	000200e1 	.word	0x000200e1

0000b878 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    b878:	b148      	cbz	r0, b88e <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    b87a:	4b05      	ldr	r3, [pc, #20]	; (b890 <arch_busy_wait+0x18>)
    b87c:	681a      	ldr	r2, [r3, #0]
    b87e:	4b05      	ldr	r3, [pc, #20]	; (b894 <arch_busy_wait+0x1c>)
    b880:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    b884:	4b04      	ldr	r3, [pc, #16]	; (b898 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    b886:	4350      	muls	r0, r2
    b888:	f043 0301 	orr.w	r3, r3, #1
    b88c:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    b88e:	4770      	bx	lr
    b890:	2000851c 	.word	0x2000851c
    b894:	000f4240 	.word	0x000f4240
    b898:	0001ea30 	.word	0x0001ea30

0000b89c <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    b89c:	4b01      	ldr	r3, [pc, #4]	; (b8a4 <virtio_set_status+0x8>)
    b89e:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    b8a0:	4770      	bx	lr
    b8a2:	bf00      	nop
    b8a4:	20070000 	.word	0x20070000

0000b8a8 <init_status_flag>:
    b8a8:	2000      	movs	r0, #0
    b8aa:	4b01      	ldr	r3, [pc, #4]	; (b8b0 <init_status_flag+0x8>)
    b8ac:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    b8ae:	4770      	bx	lr
    b8b0:	20070000 	.word	0x20070000

0000b8b4 <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    b8b4:	4b01      	ldr	r3, [pc, #4]	; (b8bc <ipm_callback_process+0x8>)
    b8b6:	6818      	ldr	r0, [r3, #0]
    b8b8:	f012 baf8 	b.w	1deac <virtqueue_notification>
    b8bc:	2000a698 	.word	0x2000a698

0000b8c0 <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b8c0:	4b0a      	ldr	r3, [pc, #40]	; (b8ec <virtio_notify+0x2c>)
{
    b8c2:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b8c4:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    b8c6:	2300      	movs	r3, #0
    b8c8:	6882      	ldr	r2, [r0, #8]
    b8ca:	9300      	str	r3, [sp, #0]
    b8cc:	6814      	ldr	r4, [r2, #0]
    b8ce:	4619      	mov	r1, r3
    b8d0:	461a      	mov	r2, r3
    b8d2:	47a0      	blx	r4
	if (status != 0) {
    b8d4:	4602      	mov	r2, r0
    b8d6:	b130      	cbz	r0, b8e6 <virtio_notify+0x26>
		LOG_ERR("ipm_send failed to notify: %d", status);
    b8d8:	2145      	movs	r1, #69	; 0x45
    b8da:	4805      	ldr	r0, [pc, #20]	; (b8f0 <virtio_notify+0x30>)
}
    b8dc:	b002      	add	sp, #8
    b8de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    b8e2:	f00f b8e7 	b.w	1aab4 <printk>
}
    b8e6:	b002      	add	sp, #8
    b8e8:	bd10      	pop	{r4, pc}
    b8ea:	bf00      	nop
    b8ec:	2000a688 	.word	0x2000a688
    b8f0:	00020113 	.word	0x00020113

0000b8f4 <ipm_callback>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b8f4:	4907      	ldr	r1, [pc, #28]	; (b914 <ipm_callback+0x20>)
    b8f6:	e8d1 3fef 	ldaex	r3, [r1]
    b8fa:	f043 0201 	orr.w	r2, r3, #1
    b8fe:	e8c1 2fe0 	stlex	r0, r2, [r1]
    b902:	2800      	cmp	r0, #0
    b904:	d1f7      	bne.n	b8f6 <ipm_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    b906:	07db      	lsls	r3, r3, #31
    b908:	d403      	bmi.n	b912 <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    b90a:	4803      	ldr	r0, [pc, #12]	; (b918 <ipm_callback+0x24>)
    b90c:	3908      	subs	r1, #8
    b90e:	f012 bc8e 	b.w	1e22e <k_queue_append>
}
    b912:	4770      	bx	lr
    b914:	2000a694 	.word	0x2000a694
    b918:	200089b0 	.word	0x200089b0

0000b91c <rpmsg_backend_init>:
{
    b91c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b91e:	4b47      	ldr	r3, [pc, #284]	; (ba3c <rpmsg_backend_init+0x120>)
{
    b920:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b922:	ac02      	add	r4, sp, #8
{
    b924:	4606      	mov	r6, r0
    b926:	460d      	mov	r5, r1
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b928:	e893 0003 	ldmia.w	r3, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b92c:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b930:	e884 0003 	stmia.w	r4, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b934:	f04f 33ff 	mov.w	r3, #4294967295
    b938:	4941      	ldr	r1, [pc, #260]	; (ba40 <rpmsg_backend_init+0x124>)
    b93a:	4842      	ldr	r0, [pc, #264]	; (ba44 <rpmsg_backend_init+0x128>)
    b93c:	f00e f91e 	bl	19b7c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    b940:	4941      	ldr	r1, [pc, #260]	; (ba48 <rpmsg_backend_init+0x12c>)
    b942:	4842      	ldr	r0, [pc, #264]	; (ba4c <rpmsg_backend_init+0x130>)
    b944:	f012 fce5 	bl	1e312 <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b948:	2200      	movs	r2, #0
    b94a:	4b41      	ldr	r3, [pc, #260]	; (ba50 <rpmsg_backend_init+0x134>)
    b94c:	4941      	ldr	r1, [pc, #260]	; (ba54 <rpmsg_backend_init+0x138>)
	err = metal_init(&metal_params);
    b94e:	4620      	mov	r0, r4
    b950:	e9c3 1201 	strd	r1, r2, [r3, #4]
    b954:	601a      	str	r2, [r3, #0]
    b956:	f00b fde7 	bl	17528 <metal_init>
	if (err) {
    b95a:	4604      	mov	r4, r0
    b95c:	b138      	cbz	r0, b96e <rpmsg_backend_init+0x52>
		LOG_ERR("metal_init: failed - error code %d", err);
    b95e:	2145      	movs	r1, #69	; 0x45
    b960:	4602      	mov	r2, r0
    b962:	483d      	ldr	r0, [pc, #244]	; (ba58 <rpmsg_backend_init+0x13c>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b964:	f00f f8a6 	bl	1aab4 <printk>
}
    b968:	4620      	mov	r0, r4
    b96a:	b005      	add	sp, #20
    b96c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    b96e:	483b      	ldr	r0, [pc, #236]	; (ba5c <rpmsg_backend_init+0x140>)
    b970:	f00b fdba 	bl	174e8 <metal_register_generic_device>
	if (err) {
    b974:	4604      	mov	r4, r0
    b976:	b118      	cbz	r0, b980 <rpmsg_backend_init+0x64>
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b978:	4602      	mov	r2, r0
    b97a:	2145      	movs	r1, #69	; 0x45
    b97c:	4838      	ldr	r0, [pc, #224]	; (ba60 <rpmsg_backend_init+0x144>)
    b97e:	e7f1      	b.n	b964 <rpmsg_backend_init+0x48>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    b980:	4938      	ldr	r1, [pc, #224]	; (ba64 <rpmsg_backend_init+0x148>)
    b982:	4839      	ldr	r0, [pc, #228]	; (ba68 <rpmsg_backend_init+0x14c>)
    b984:	aa01      	add	r2, sp, #4
    b986:	f012 f811 	bl	1d9ac <metal_device_open>
	if (err) {
    b98a:	4604      	mov	r4, r0
    b98c:	b118      	cbz	r0, b996 <rpmsg_backend_init+0x7a>
		LOG_ERR("metal_device_open failed: %d", err);
    b98e:	4602      	mov	r2, r0
    b990:	2145      	movs	r1, #69	; 0x45
    b992:	4836      	ldr	r0, [pc, #216]	; (ba6c <rpmsg_backend_init+0x150>)
    b994:	e7e6      	b.n	b964 <rpmsg_backend_init+0x48>
	*io = metal_device_io_region(device, 0);
    b996:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    b998:	689a      	ldr	r2, [r3, #8]
    b99a:	b92a      	cbnz	r2, b9a8 <rpmsg_backend_init+0x8c>
    b99c:	6030      	str	r0, [r6, #0]
		LOG_ERR("metal_device_io_region failed to get region");
    b99e:	2145      	movs	r1, #69	; 0x45
    b9a0:	4833      	ldr	r0, [pc, #204]	; (ba70 <rpmsg_backend_init+0x154>)
    b9a2:	f00f f887 	bl	1aab4 <printk>
		return err;
    b9a6:	e7df      	b.n	b968 <rpmsg_backend_init+0x4c>
    b9a8:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    b9aa:	6033      	str	r3, [r6, #0]
	if (!*io) {
    b9ac:	2b00      	cmp	r3, #0
    b9ae:	d0f6      	beq.n	b99e <rpmsg_backend_init+0x82>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    b9b0:	4830      	ldr	r0, [pc, #192]	; (ba74 <rpmsg_backend_init+0x158>)
    b9b2:	f00c f8d1 	bl	17b58 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    b9b6:	4f30      	ldr	r7, [pc, #192]	; (ba78 <rpmsg_backend_init+0x15c>)
    b9b8:	6038      	str	r0, [r7, #0]
    b9ba:	4830      	ldr	r0, [pc, #192]	; (ba7c <rpmsg_backend_init+0x160>)
    b9bc:	f00c f8cc 	bl	17b58 <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    b9c0:	683a      	ldr	r2, [r7, #0]
    b9c2:	b932      	cbnz	r2, b9d2 <rpmsg_backend_init+0xb6>
		LOG_ERR("Could not get TX IPM device handle");
    b9c4:	2145      	movs	r1, #69	; 0x45
    b9c6:	482e      	ldr	r0, [pc, #184]	; (ba80 <rpmsg_backend_init+0x164>)
		LOG_ERR("Could not get RX IPM device handle");
    b9c8:	f00f f874 	bl	1aab4 <printk>
		return -ENODEV;
    b9cc:	f06f 0412 	mvn.w	r4, #18
    b9d0:	e7ca      	b.n	b968 <rpmsg_backend_init+0x4c>
	if (!ipm_rx_handle) {
    b9d2:	b910      	cbnz	r0, b9da <rpmsg_backend_init+0xbe>
		LOG_ERR("Could not get RX IPM device handle");
    b9d4:	2145      	movs	r1, #69	; 0x45
    b9d6:	482b      	ldr	r0, [pc, #172]	; (ba84 <rpmsg_backend_init+0x168>)
    b9d8:	e7f6      	b.n	b9c8 <rpmsg_backend_init+0xac>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    b9da:	6883      	ldr	r3, [r0, #8]
    b9dc:	4622      	mov	r2, r4
    b9de:	685b      	ldr	r3, [r3, #4]
    b9e0:	4929      	ldr	r1, [pc, #164]	; (ba88 <rpmsg_backend_init+0x16c>)
    b9e2:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    b9e4:	f00f fb4c 	bl	1b080 <virtqueue_allocate.constprop.0>
    b9e8:	4f28      	ldr	r7, [pc, #160]	; (ba8c <rpmsg_backend_init+0x170>)
    b9ea:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    b9ec:	b930      	cbnz	r0, b9fc <rpmsg_backend_init+0xe0>
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    b9ee:	2145      	movs	r1, #69	; 0x45
    b9f0:	4827      	ldr	r0, [pc, #156]	; (ba90 <rpmsg_backend_init+0x174>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    b9f2:	f00f f85f 	bl	1aab4 <printk>
		return -ENOMEM;
    b9f6:	f06f 040b 	mvn.w	r4, #11
    b9fa:	e7b5      	b.n	b968 <rpmsg_backend_init+0x4c>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    b9fc:	f00f fb40 	bl	1b080 <virtqueue_allocate.constprop.0>
    ba00:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    ba02:	b910      	cbnz	r0, ba0a <rpmsg_backend_init+0xee>
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    ba04:	2145      	movs	r1, #69	; 0x45
    ba06:	4823      	ldr	r0, [pc, #140]	; (ba94 <rpmsg_backend_init+0x178>)
    ba08:	e7f3      	b.n	b9f2 <rpmsg_backend_init+0xd6>
	rvrings[0].io = *io;
    ba0a:	6832      	ldr	r2, [r6, #0]
    ba0c:	4b22      	ldr	r3, [pc, #136]	; (ba98 <rpmsg_backend_init+0x17c>)
	rvrings[0].info.num_descs = VRING_SIZE;
    ba0e:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    ba10:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    ba12:	4a22      	ldr	r2, [pc, #136]	; (ba9c <rpmsg_backend_init+0x180>)
	rvrings[0].vq = vq[0];
    ba14:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    ba16:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    ba18:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    ba1a:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    ba1c:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    ba1e:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    ba20:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    ba22:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    ba24:	4e1e      	ldr	r6, [pc, #120]	; (baa0 <rpmsg_backend_init+0x184>)
	vdev->vrings_num = VRING_COUNT;
    ba26:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    ba28:	4a1e      	ldr	r2, [pc, #120]	; (baa4 <rpmsg_backend_init+0x188>)
	rvrings[1].info.num_descs = VRING_SIZE;
    ba2a:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    ba2c:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    ba2e:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    ba30:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    ba32:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    ba34:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    ba36:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    ba38:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    ba3a:	e795      	b.n	b968 <rpmsg_backend_init+0x4c>
    ba3c:	0001e9a8 	.word	0x0001e9a8
    ba40:	2000f9f8 	.word	0x2000f9f8
    ba44:	200089b0 	.word	0x200089b0
    ba48:	00020136 	.word	0x00020136
    ba4c:	200089d0 	.word	0x200089d0
    ba50:	2000a68c 	.word	0x2000a68c
    ba54:	0000b8b5 	.word	0x0000b8b5
    ba58:	00020141 	.word	0x00020141
    ba5c:	20008234 	.word	0x20008234
    ba60:	00020169 	.word	0x00020169
    ba64:	00020199 	.word	0x00020199
    ba68:	000201a3 	.word	0x000201a3
    ba6c:	000201ab 	.word	0x000201ab
    ba70:	000201cd 	.word	0x000201cd
    ba74:	000201fe 	.word	0x000201fe
    ba78:	2000a688 	.word	0x2000a688
    ba7c:	00020204 	.word	0x00020204
    ba80:	0002020a 	.word	0x0002020a
    ba84:	00020232 	.word	0x00020232
    ba88:	0000b8f5 	.word	0x0000b8f5
    ba8c:	2000a698 	.word	0x2000a698
    ba90:	0002025a 	.word	0x0002025a
    ba94:	00020288 	.word	0x00020288
    ba98:	20008204 	.word	0x20008204
    ba9c:	2007fc00 	.word	0x2007fc00
    baa0:	2007f800 	.word	0x2007f800
    baa4:	0001ebbc 	.word	0x0001ebbc

0000baa8 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    baa8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    baac:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    baae:	4e1b      	ldr	r6, [pc, #108]	; (bb1c <ns_bind_cb+0x74>)
{
    bab0:	4607      	mov	r7, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    bab2:	6831      	ldr	r1, [r6, #0]
    bab4:	4628      	mov	r0, r5
{
    bab6:	4690      	mov	r8, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    bab8:	f010 fa12 	bl	1bee0 <strcmp>
    babc:	b168      	cbz	r0, bada <ns_bind_cb+0x32>
    babe:	4628      	mov	r0, r5
    bac0:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    bac2:	f010 fa0d 	bl	1bee0 <strcmp>
    bac6:	b138      	cbz	r0, bad8 <ns_bind_cb+0x30>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    bac8:	462a      	mov	r2, r5
    baca:	2145      	movs	r1, #69	; 0x45
    bacc:	4814      	ldr	r0, [pc, #80]	; (bb20 <ns_bind_cb+0x78>)
}
    bace:	b004      	add	sp, #16
    bad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    bad4:	f00e bfee 	b.w	1aab4 <printk>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    bad8:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    bada:	244c      	movs	r4, #76	; 0x4c
    badc:	4344      	muls	r4, r0
    bade:	4b11      	ldr	r3, [pc, #68]	; (bb24 <ns_bind_cb+0x7c>)
    bae0:	f104 0008 	add.w	r0, r4, #8
    bae4:	9302      	str	r3, [sp, #8]
    bae6:	4434      	add	r4, r6
    bae8:	6863      	ldr	r3, [r4, #4]
    baea:	462a      	mov	r2, r5
    baec:	e9cd 8300 	strd	r8, r3, [sp]
    baf0:	4639      	mov	r1, r7
    baf2:	f04f 33ff 	mov.w	r3, #4294967295
    baf6:	4430      	add	r0, r6
    baf8:	f00b fde2 	bl	176c0 <rpmsg_create_ept>
			if (err != 0) {
    bafc:	4603      	mov	r3, r0
    bafe:	b138      	cbz	r0, bb10 <ns_bind_cb+0x68>
				LOG_ERR("Creating remote endpoint %s"
    bb00:	462a      	mov	r2, r5
    bb02:	2145      	movs	r1, #69	; 0x45
    bb04:	4808      	ldr	r0, [pc, #32]	; (bb28 <ns_bind_cb+0x80>)
}
    bb06:	b004      	add	sp, #16
    bb08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    bb0c:	f00e bfd2 	b.w	1aab4 <printk>
				endpoints[i].bound = true;
    bb10:	2301      	movs	r3, #1
    bb12:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    bb16:	b004      	add	sp, #16
    bb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb1c:	2000a6a0 	.word	0x2000a6a0
    bb20:	000202c4 	.word	0x000202c4
    bb24:	0001b09b 	.word	0x0001b09b
    bb28:	000202f3 	.word	0x000202f3

0000bb2c <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    bb2c:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    bb2e:	4d13      	ldr	r5, [pc, #76]	; (bb7c <rpmsg_service_init+0x50>)
    bb30:	4913      	ldr	r1, [pc, #76]	; (bb80 <rpmsg_service_init+0x54>)
    bb32:	4628      	mov	r0, r5
    bb34:	f7ff fef2 	bl	b91c <rpmsg_backend_init>
	if (err) {
    bb38:	4604      	mov	r4, r0
    bb3a:	b138      	cbz	r0, bb4c <rpmsg_service_init+0x20>
		LOG_ERR("RPMsg backend init failed with error %d", err);
    bb3c:	2145      	movs	r1, #69	; 0x45
    bb3e:	4602      	mov	r2, r0
    bb40:	4810      	ldr	r0, [pc, #64]	; (bb84 <rpmsg_service_init+0x58>)
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    bb42:	f00e ffb7 	bl	1aab4 <printk>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    bb46:	4620      	mov	r0, r4
    bb48:	b003      	add	sp, #12
    bb4a:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    bb4c:	4c0e      	ldr	r4, [pc, #56]	; (bb88 <rpmsg_service_init+0x5c>)
    bb4e:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    bb52:	4620      	mov	r0, r4
    bb54:	490d      	ldr	r1, [pc, #52]	; (bb8c <rpmsg_service_init+0x60>)
    bb56:	f012 fb33 	bl	1e1c0 <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    bb5a:	9400      	str	r4, [sp, #0]
    bb5c:	682b      	ldr	r3, [r5, #0]
    bb5e:	4a0c      	ldr	r2, [pc, #48]	; (bb90 <rpmsg_service_init+0x64>)
    bb60:	4907      	ldr	r1, [pc, #28]	; (bb80 <rpmsg_service_init+0x54>)
    bb62:	480c      	ldr	r0, [pc, #48]	; (bb94 <rpmsg_service_init+0x68>)
    bb64:	f00b fed8 	bl	17918 <rpmsg_init_vdev>
	if (err) {
    bb68:	4604      	mov	r4, r0
    bb6a:	b118      	cbz	r0, bb74 <rpmsg_service_init+0x48>
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    bb6c:	4602      	mov	r2, r0
    bb6e:	2145      	movs	r1, #69	; 0x45
    bb70:	4809      	ldr	r0, [pc, #36]	; (bb98 <rpmsg_service_init+0x6c>)
    bb72:	e7e6      	b.n	bb42 <rpmsg_service_init+0x16>
	ep_crt_started = true;
    bb74:	2201      	movs	r2, #1
    bb76:	4b09      	ldr	r3, [pc, #36]	; (bb9c <rpmsg_service_init+0x70>)
    bb78:	701a      	strb	r2, [r3, #0]
	return 0;
    bb7a:	e7e4      	b.n	bb46 <rpmsg_service_init+0x1a>
    bb7c:	2000a738 	.word	0x2000a738
    bb80:	20008a60 	.word	0x20008a60
    bb84:	00020329 	.word	0x00020329
    bb88:	2000a7cc 	.word	0x2000a7cc
    bb8c:	20070400 	.word	0x20070400
    bb90:	0000baa9 	.word	0x0000baa9
    bb94:	2000a73c 	.word	0x2000a73c
    bb98:	00020356 	.word	0x00020356
    bb9c:	2000f4fe 	.word	0x2000f4fe

0000bba0 <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    bba0:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    bba2:	4b0d      	ldr	r3, [pc, #52]	; (bbd8 <rpmsg_service_register_endpoint+0x38>)
{
    bba4:	4602      	mov	r2, r0
	if (ep_crt_started) {
    bba6:	781b      	ldrb	r3, [r3, #0]
    bba8:	b993      	cbnz	r3, bbd0 <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    bbaa:	4c0c      	ldr	r4, [pc, #48]	; (bbdc <rpmsg_service_register_endpoint+0x3c>)
    bbac:	6820      	ldr	r0, [r4, #0]
    bbae:	b148      	cbz	r0, bbc4 <rpmsg_service_register_endpoint+0x24>
    bbb0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    bbb2:	b133      	cbz	r3, bbc2 <rpmsg_service_register_endpoint+0x22>

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    bbb4:	480a      	ldr	r0, [pc, #40]	; (bbe0 <rpmsg_service_register_endpoint+0x40>)
    bbb6:	2145      	movs	r1, #69	; 0x45
    bbb8:	f00e ff7c 	bl	1aab4 <printk>

	return -ENOMEM;
    bbbc:	f06f 000b 	mvn.w	r0, #11
}
    bbc0:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    bbc2:	2001      	movs	r0, #1
			endpoints[i].name = name;
    bbc4:	234c      	movs	r3, #76	; 0x4c
    bbc6:	4343      	muls	r3, r0
    bbc8:	18e5      	adds	r5, r4, r3
    bbca:	50e2      	str	r2, [r4, r3]
			endpoints[i].cb = cb;
    bbcc:	6069      	str	r1, [r5, #4]
			return i;
    bbce:	e7f7      	b.n	bbc0 <rpmsg_service_register_endpoint+0x20>
		return -EINPROGRESS;
    bbd0:	f06f 0043 	mvn.w	r0, #67	; 0x43
    bbd4:	e7f4      	b.n	bbc0 <rpmsg_service_register_endpoint+0x20>
    bbd6:	bf00      	nop
    bbd8:	2000f4fe 	.word	0x2000f4fe
    bbdc:	2000a6a0 	.word	0x2000a6a0
    bbe0:	00020375 	.word	0x00020375

0000bbe4 <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    bbe4:	224c      	movs	r2, #76	; 0x4c
    bbe6:	4b03      	ldr	r3, [pc, #12]	; (bbf4 <rpmsg_service_endpoint_is_bound+0x10>)
    bbe8:	fb02 3300 	mla	r3, r2, r0, r3
    bbec:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    bbf0:	4770      	bx	lr
    bbf2:	bf00      	nop
    bbf4:	2000a6a0 	.word	0x2000a6a0

0000bbf8 <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    bbf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    bbfa:	244c      	movs	r4, #76	; 0x4c
    bbfc:	460b      	mov	r3, r1
    bbfe:	2101      	movs	r1, #1
    bc00:	4344      	muls	r4, r0
    bc02:	e9cd 2100 	strd	r2, r1, [sp]
    bc06:	4d05      	ldr	r5, [pc, #20]	; (bc1c <rpmsg_service_send+0x24>)
    bc08:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    bc0a:	3408      	adds	r4, #8
    bc0c:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    bc10:	1928      	adds	r0, r5, r4
    bc12:	f00b fd43 	bl	1769c <rpmsg_send_offchannel_raw>
}
    bc16:	b003      	add	sp, #12
    bc18:	bd30      	pop	{r4, r5, pc}
    bc1a:	bf00      	nop
    bc1c:	2000a6a0 	.word	0x2000a6a0

0000bc20 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    bc20:	4b10      	ldr	r3, [pc, #64]	; (bc64 <settings_save_one+0x44>)
{
    bc22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    bc26:	681c      	ldr	r4, [r3, #0]
{
    bc28:	4605      	mov	r5, r0
    bc2a:	460e      	mov	r6, r1
    bc2c:	4617      	mov	r7, r2
	if (!cs) {
    bc2e:	b1ac      	cbz	r4, bc5c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    bc30:	f04f 32ff 	mov.w	r2, #4294967295
    bc34:	f04f 33ff 	mov.w	r3, #4294967295
    bc38:	480b      	ldr	r0, [pc, #44]	; (bc68 <settings_save_one+0x48>)
    bc3a:	f00c faaf 	bl	1819c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    bc3e:	6863      	ldr	r3, [r4, #4]
    bc40:	4632      	mov	r2, r6
    bc42:	f8d3 8008 	ldr.w	r8, [r3, #8]
    bc46:	4629      	mov	r1, r5
    bc48:	463b      	mov	r3, r7
    bc4a:	4620      	mov	r0, r4
    bc4c:	47c0      	blx	r8
    bc4e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    bc50:	4805      	ldr	r0, [pc, #20]	; (bc68 <settings_save_one+0x48>)
    bc52:	f00c fb6f 	bl	18334 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    bc56:	4620      	mov	r0, r4
    bc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    bc5c:	f06f 0401 	mvn.w	r4, #1
    bc60:	e7f9      	b.n	bc56 <settings_save_one+0x36>
    bc62:	bf00      	nop
    bc64:	2000a7e0 	.word	0x2000a7e0
    bc68:	20008674 	.word	0x20008674

0000bc6c <settings_load_subtree>:
	const struct settings_load_arg arg = {
    bc6c:	2300      	movs	r3, #0
{
    bc6e:	b530      	push	{r4, r5, lr}
    bc70:	b085      	sub	sp, #20
    bc72:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    bc74:	e9cd 3302 	strd	r3, r3, [sp, #8]
    bc78:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    bc7a:	f04f 33ff 	mov.w	r3, #4294967295
    bc7e:	f04f 32ff 	mov.w	r2, #4294967295
    bc82:	480b      	ldr	r0, [pc, #44]	; (bcb0 <settings_load_subtree+0x44>)
    bc84:	f00c fa8a 	bl	1819c <z_impl_k_mutex_lock>
	return list->head;
    bc88:	4b0a      	ldr	r3, [pc, #40]	; (bcb4 <settings_load_subtree+0x48>)
    bc8a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    bc8c:	b134      	cbz	r4, bc9c <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    bc8e:	6863      	ldr	r3, [r4, #4]
    bc90:	4620      	mov	r0, r4
    bc92:	681b      	ldr	r3, [r3, #0]
    bc94:	a901      	add	r1, sp, #4
    bc96:	4798      	blx	r3
	return node->next;
    bc98:	6824      	ldr	r4, [r4, #0]
    bc9a:	e7f7      	b.n	bc8c <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    bc9c:	4628      	mov	r0, r5
    bc9e:	f000 f83b 	bl	bd18 <settings_commit_subtree>
    bca2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    bca4:	4802      	ldr	r0, [pc, #8]	; (bcb0 <settings_load_subtree+0x44>)
    bca6:	f00c fb45 	bl	18334 <z_impl_k_mutex_unlock>
}
    bcaa:	4620      	mov	r0, r4
    bcac:	b005      	add	sp, #20
    bcae:	bd30      	pop	{r4, r5, pc}
    bcb0:	20008674 	.word	0x20008674
    bcb4:	2000a7d8 	.word	0x2000a7d8

0000bcb8 <settings_load_subtree_direct>:
{
    bcb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    bcba:	e9cd 0101 	strd	r0, r1, [sp, #4]
    bcbe:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    bcc0:	f04f 33ff 	mov.w	r3, #4294967295
    bcc4:	f04f 32ff 	mov.w	r2, #4294967295
    bcc8:	4809      	ldr	r0, [pc, #36]	; (bcf0 <settings_load_subtree_direct+0x38>)
    bcca:	f00c fa67 	bl	1819c <z_impl_k_mutex_lock>
	return list->head;
    bcce:	4b09      	ldr	r3, [pc, #36]	; (bcf4 <settings_load_subtree_direct+0x3c>)
    bcd0:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    bcd2:	b134      	cbz	r4, bce2 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    bcd4:	6863      	ldr	r3, [r4, #4]
    bcd6:	4620      	mov	r0, r4
    bcd8:	681b      	ldr	r3, [r3, #0]
    bcda:	a901      	add	r1, sp, #4
    bcdc:	4798      	blx	r3
	return node->next;
    bcde:	6824      	ldr	r4, [r4, #0]
    bce0:	e7f7      	b.n	bcd2 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    bce2:	4803      	ldr	r0, [pc, #12]	; (bcf0 <settings_load_subtree_direct+0x38>)
    bce4:	f00c fb26 	bl	18334 <z_impl_k_mutex_unlock>
}
    bce8:	2000      	movs	r0, #0
    bcea:	b004      	add	sp, #16
    bcec:	bd10      	pop	{r4, pc}
    bcee:	bf00      	nop
    bcf0:	20008674 	.word	0x20008674
    bcf4:	2000a7d8 	.word	0x2000a7d8

0000bcf8 <settings_store_init>:
	list->head = NULL;
    bcf8:	2200      	movs	r2, #0
    bcfa:	4b02      	ldr	r3, [pc, #8]	; (bd04 <settings_store_init+0xc>)
	list->tail = NULL;
    bcfc:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    bd00:	4770      	bx	lr
    bd02:	bf00      	nop
    bd04:	2000a7d8 	.word	0x2000a7d8

0000bd08 <settings_init>:
	list->head = NULL;
    bd08:	2200      	movs	r2, #0
    bd0a:	4b02      	ldr	r3, [pc, #8]	; (bd14 <settings_init+0xc>)
	list->tail = NULL;
    bd0c:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    bd10:	f7ff bff2 	b.w	bcf8 <settings_store_init>
    bd14:	2000a7e4 	.word	0x2000a7e4

0000bd18 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    bd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd1c:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    bd1e:	2500      	movs	r5, #0

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    bd20:	4c1f      	ldr	r4, [pc, #124]	; (bda0 <settings_commit_subtree+0x88>)
    bd22:	4f20      	ldr	r7, [pc, #128]	; (bda4 <settings_commit_subtree+0x8c>)
    bd24:	f8df 8080 	ldr.w	r8, [pc, #128]	; bda8 <settings_commit_subtree+0x90>
    bd28:	42bc      	cmp	r4, r7
    bd2a:	d908      	bls.n	bd3e <settings_commit_subtree+0x26>
    bd2c:	4641      	mov	r1, r8
    bd2e:	481f      	ldr	r0, [pc, #124]	; (bdac <settings_commit_subtree+0x94>)
    bd30:	22f4      	movs	r2, #244	; 0xf4
    bd32:	f00e febf 	bl	1aab4 <printk>
    bd36:	21f4      	movs	r1, #244	; 0xf4
    bd38:	4640      	mov	r0, r8
    bd3a:	f00f f961 	bl	1b000 <assert_post_action>
    bd3e:	42bc      	cmp	r4, r7
    bd40:	d307      	bcc.n	bd52 <settings_commit_subtree+0x3a>
	return list->head;
    bd42:	4b1b      	ldr	r3, [pc, #108]	; (bdb0 <settings_commit_subtree+0x98>)
    bd44:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    bd46:	b10c      	cbz	r4, bd4c <settings_commit_subtree+0x34>
    bd48:	3c14      	subs	r4, #20
    bd4a:	b9a4      	cbnz	r4, bd76 <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    bd4c:	4628      	mov	r0, r5
    bd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bd52:	b91e      	cbnz	r6, bd5c <settings_commit_subtree+0x44>
		if (ch->h_commit) {
    bd54:	68e3      	ldr	r3, [r4, #12]
    bd56:	b94b      	cbnz	r3, bd6c <settings_commit_subtree+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    bd58:	3414      	adds	r4, #20
    bd5a:	e7e5      	b.n	bd28 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bd5c:	2200      	movs	r2, #0
    bd5e:	4631      	mov	r1, r6
    bd60:	6820      	ldr	r0, [r4, #0]
    bd62:	f00f f9a3 	bl	1b0ac <settings_name_steq>
    bd66:	2800      	cmp	r0, #0
    bd68:	d1f4      	bne.n	bd54 <settings_commit_subtree+0x3c>
    bd6a:	e7f5      	b.n	bd58 <settings_commit_subtree+0x40>
			rc2 = ch->h_commit();
    bd6c:	4798      	blx	r3
				rc = rc2;
    bd6e:	2d00      	cmp	r5, #0
    bd70:	bf08      	it	eq
    bd72:	4605      	moveq	r5, r0
    bd74:	e7f0      	b.n	bd58 <settings_commit_subtree+0x40>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bd76:	b936      	cbnz	r6, bd86 <settings_commit_subtree+0x6e>
		if (ch->h_commit) {
    bd78:	68e3      	ldr	r3, [r4, #12]
    bd7a:	b963      	cbnz	r3, bd96 <settings_commit_subtree+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    bd7c:	f114 0f14 	cmn.w	r4, #20
    bd80:	d0e4      	beq.n	bd4c <settings_commit_subtree+0x34>
	return node->next;
    bd82:	6964      	ldr	r4, [r4, #20]
    bd84:	e7df      	b.n	bd46 <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    bd86:	2200      	movs	r2, #0
    bd88:	4631      	mov	r1, r6
    bd8a:	6820      	ldr	r0, [r4, #0]
    bd8c:	f00f f98e 	bl	1b0ac <settings_name_steq>
    bd90:	2800      	cmp	r0, #0
    bd92:	d1f1      	bne.n	bd78 <settings_commit_subtree+0x60>
    bd94:	e7f2      	b.n	bd7c <settings_commit_subtree+0x64>
			rc2 = ch->h_commit();
    bd96:	4798      	blx	r3
				rc = rc2;
    bd98:	2d00      	cmp	r5, #0
    bd9a:	bf08      	it	eq
    bd9c:	4605      	moveq	r5, r0
    bd9e:	e7ed      	b.n	bd7c <settings_commit_subtree+0x64>
    bda0:	0001e848 	.word	0x0001e848
    bda4:	0001e8ac 	.word	0x0001e8ac
    bda8:	000203ae 	.word	0x000203ae
    bdac:	0002003d 	.word	0x0002003d
    bdb0:	2000a7e4 	.word	0x2000a7e4

0000bdb4 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    bdb4:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    bdb6:	4c06      	ldr	r4, [pc, #24]	; (bdd0 <settings_subsys_init+0x1c>)
    bdb8:	7823      	ldrb	r3, [r4, #0]
    bdba:	b93b      	cbnz	r3, bdcc <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    bdbc:	f7ff ffa4 	bl	bd08 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    bdc0:	f00f f9ad 	bl	1b11e <settings_backend_init>

	if (!err) {
    bdc4:	b908      	cbnz	r0, bdca <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    bdc6:	2301      	movs	r3, #1
    bdc8:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    bdca:	bd10      	pop	{r4, pc}
		return 0;
    bdcc:	2000      	movs	r0, #0
    bdce:	e7fc      	b.n	bdca <settings_subsys_init+0x16>
    bdd0:	2000f4ff 	.word	0x2000f4ff

0000bdd4 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    bdd4:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    bdd6:	4c04      	ldr	r4, [pc, #16]	; (bde8 <rtt_console_init+0x14>)
    bdd8:	4620      	mov	r0, r4
    bdda:	f7fe fd93 	bl	a904 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    bdde:	4620      	mov	r0, r4
    bde0:	f002 fc7e 	bl	e6e0 <__stdout_hook_install>

	return 0;
}
    bde4:	2000      	movs	r0, #0
    bde6:	bd10      	pop	{r4, pc}
    bde8:	0000bded 	.word	0x0000bded

0000bdec <rtt_console_out>:
{
    bdec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bdf0:	4604      	mov	r4, r0
	char c = (char)character;
    bdf2:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
    bdf4:	f8df 8058 	ldr.w	r8, [pc, #88]	; be50 <rtt_console_out+0x64>
    bdf8:	4e16      	ldr	r6, [pc, #88]	; (be54 <rtt_console_out+0x68>)
    bdfa:	f88d 0007 	strb.w	r0, [sp, #7]
    bdfe:	f04f 33ff 	mov.w	r3, #4294967295
    be02:	f04f 32ff 	mov.w	r2, #4294967295
    be06:	4640      	mov	r0, r8
    be08:	f00c f9c8 	bl	1819c <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    be0c:	2201      	movs	r2, #1
    be0e:	f10d 0107 	add.w	r1, sp, #7
    be12:	2000      	movs	r0, #0
    be14:	f001 fd02 	bl	d81c <SEGGER_RTT_WriteNoLock>
    be18:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    be1a:	4640      	mov	r0, r8
    be1c:	f00c fa8a 	bl	18334 <z_impl_k_mutex_unlock>
		if (cnt) {
    be20:	b12f      	cbz	r7, be2e <rtt_console_out+0x42>
			host_present = true;
    be22:	2301      	movs	r3, #1
    be24:	7033      	strb	r3, [r6, #0]
}
    be26:	4620      	mov	r0, r4
    be28:	b002      	add	sp, #8
    be2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    be2e:	7833      	ldrb	r3, [r6, #0]
    be30:	2b00      	cmp	r3, #0
    be32:	d0f8      	beq.n	be26 <rtt_console_out+0x3a>
			if (max_cnt) {
    be34:	3d01      	subs	r5, #1
    be36:	d008      	beq.n	be4a <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    be38:	f012 fa61 	bl	1e2fe <k_is_in_isr>
    be3c:	2800      	cmp	r0, #0
    be3e:	d1de      	bne.n	bdfe <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    be40:	2100      	movs	r1, #0
    be42:	2042      	movs	r0, #66	; 0x42
    be44:	f00d fc28 	bl	19698 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    be48:	e7d9      	b.n	bdfe <rtt_console_out+0x12>
				host_present = false;
    be4a:	7035      	strb	r5, [r6, #0]
    be4c:	e7eb      	b.n	be26 <rtt_console_out+0x3a>
    be4e:	bf00      	nop
    be50:	2000864c 	.word	0x2000864c
    be54:	2000f500 	.word	0x2000f500

0000be58 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    be58:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    be5a:	2340      	movs	r3, #64	; 0x40
{
    be5c:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    be5e:	490a      	ldr	r1, [pc, #40]	; (be88 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    be60:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    be62:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    be64:	1149      	asrs	r1, r1, #5
{
    be66:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    be68:	4623      	mov	r3, r4
    be6a:	4a08      	ldr	r2, [pc, #32]	; (be8c <onoff_start+0x34>)
    be6c:	4808      	ldr	r0, [pc, #32]	; (be90 <onoff_start+0x38>)
    be6e:	f00f f96b 	bl	1b148 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    be72:	1e01      	subs	r1, r0, #0
    be74:	da05      	bge.n	be82 <onoff_start+0x2a>
		notify(mgr, err);
    be76:	4628      	mov	r0, r5
    be78:	4623      	mov	r3, r4
	}
}
    be7a:	b003      	add	sp, #12
    be7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    be80:	4718      	bx	r3
}
    be82:	b003      	add	sp, #12
    be84:	bd30      	pop	{r4, r5, pc}
    be86:	bf00      	nop
    be88:	2000a7fc 	.word	0x2000a7fc
    be8c:	0001b1bb 	.word	0x0001b1bb
    be90:	2000856c 	.word	0x2000856c

0000be94 <get_status>:
{
    be94:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    be96:	b2cc      	uxtb	r4, r1
    be98:	2c03      	cmp	r4, #3
{
    be9a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    be9c:	d908      	bls.n	beb0 <get_status+0x1c>
    be9e:	4909      	ldr	r1, [pc, #36]	; (bec4 <get_status+0x30>)
    bea0:	4809      	ldr	r0, [pc, #36]	; (bec8 <get_status+0x34>)
    bea2:	227e      	movs	r2, #126	; 0x7e
    bea4:	f00e fe06 	bl	1aab4 <printk>
    bea8:	217e      	movs	r1, #126	; 0x7e
    beaa:	4806      	ldr	r0, [pc, #24]	; (bec4 <get_status+0x30>)
    beac:	f00f f8a8 	bl	1b000 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    beb0:	230c      	movs	r3, #12
    beb2:	68e9      	ldr	r1, [r5, #12]
    beb4:	fb04 1403 	mla	r4, r4, r3, r1
    beb8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    bebc:	f000 0007 	and.w	r0, r0, #7
    bec0:	bd38      	pop	{r3, r4, r5, pc}
    bec2:	bf00      	nop
    bec4:	000203e6 	.word	0x000203e6
    bec8:	0002003d 	.word	0x0002003d

0000becc <stop>:
{
    becc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bece:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bed0:	2c03      	cmp	r4, #3
{
    bed2:	4605      	mov	r5, r0
    bed4:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    bed6:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    bed8:	d90a      	bls.n	bef0 <stop+0x24>
    beda:	4919      	ldr	r1, [pc, #100]	; (bf40 <stop+0x74>)
    bedc:	4819      	ldr	r0, [pc, #100]	; (bf44 <stop+0x78>)
    bede:	f240 1253 	movw	r2, #339	; 0x153
    bee2:	f00e fde7 	bl	1aab4 <printk>
    bee6:	f240 1153 	movw	r1, #339	; 0x153
    beea:	4815      	ldr	r0, [pc, #84]	; (bf40 <stop+0x74>)
    beec:	f00f f888 	bl	1b000 <assert_post_action>
	__asm__ volatile(
    bef0:	f04f 0320 	mov.w	r3, #32
    bef4:	f3ef 8111 	mrs	r1, BASEPRI
    bef8:	f383 8811 	msr	BASEPRI, r3
    befc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    bf00:	220c      	movs	r2, #12
    bf02:	fb02 6304 	mla	r3, r2, r4, r6
    bf06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    bf0a:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    bf0e:	d001      	beq.n	bf14 <stop+0x48>
    bf10:	429f      	cmp	r7, r3
    bf12:	d112      	bne.n	bf3a <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    bf14:	2301      	movs	r3, #1
	int err = 0;
    bf16:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    bf18:	fb02 6604 	mla	r6, r2, r4, r6
    bf1c:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
	__asm__ volatile(
    bf20:	f381 8811 	msr	BASEPRI, r1
    bf24:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    bf28:	b930      	cbnz	r0, bf38 <stop+0x6c>
	get_sub_config(dev, type)->stop();
    bf2a:	230c      	movs	r3, #12
    bf2c:	6869      	ldr	r1, [r5, #4]
    bf2e:	fb03 1404 	mla	r4, r3, r4, r1
    bf32:	6863      	ldr	r3, [r4, #4]
    bf34:	4798      	blx	r3
	return 0;
    bf36:	2000      	movs	r0, #0
}
    bf38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    bf3a:	f04f 30ff 	mov.w	r0, #4294967295
    bf3e:	e7ef      	b.n	bf20 <stop+0x54>
    bf40:	000203e6 	.word	0x000203e6
    bf44:	0002003d 	.word	0x0002003d

0000bf48 <onoff_stop>:
{
    bf48:	b570      	push	{r4, r5, r6, lr}
    bf4a:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    bf4c:	4906      	ldr	r1, [pc, #24]	; (bf68 <onoff_stop+0x20>)
{
    bf4e:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    bf50:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    bf52:	1149      	asrs	r1, r1, #5
    bf54:	2240      	movs	r2, #64	; 0x40
    bf56:	4805      	ldr	r0, [pc, #20]	; (bf6c <onoff_stop+0x24>)
    bf58:	f7ff ffb8 	bl	becc <stop>
	notify(mgr, res);
    bf5c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    bf5e:	4601      	mov	r1, r0
	notify(mgr, res);
    bf60:	4620      	mov	r0, r4
}
    bf62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    bf66:	4718      	bx	r3
    bf68:	2000a7fc 	.word	0x2000a7fc
    bf6c:	2000856c 	.word	0x2000856c

0000bf70 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    bf70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    bf74:	2200      	movs	r2, #0
    bf76:	2101      	movs	r1, #1
{
    bf78:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    bf7a:	2005      	movs	r0, #5
    bf7c:	f001 fe6a 	bl	dc54 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    bf80:	2005      	movs	r0, #5
    bf82:	f001 fe49 	bl	dc18 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    bf86:	4811      	ldr	r0, [pc, #68]	; (bfcc <clk_init+0x5c>)
    bf88:	f00a ff5e 	bl	16e48 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    bf8c:	4b10      	ldr	r3, [pc, #64]	; (bfd0 <clk_init+0x60>)
    bf8e:	4298      	cmp	r0, r3
    bf90:	d119      	bne.n	bfc6 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    bf92:	f00a ff79 	bl	16e88 <nrfx_clock_enable>
    bf96:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    bf98:	f04f 080c 	mov.w	r8, #12
    bf9c:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    bf9e:	f8df 9034 	ldr.w	r9, [pc, #52]	; bfd4 <clk_init+0x64>
	struct nrf_clock_control_data *data = dev->data;
    bfa2:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    bfa4:	4649      	mov	r1, r9
    bfa6:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    bfaa:	f00e fdde 	bl	1ab6a <onoff_manager_init>
		if (err < 0) {
    bfae:	2800      	cmp	r0, #0
    bfb0:	db07      	blt.n	bfc2 <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    bfb2:	fb08 5504 	mla	r5, r8, r4, r5
	for (enum clock_control_nrf_type i = 0;
    bfb6:	3401      	adds	r4, #1
    bfb8:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    bfba:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    bfbe:	d1f0      	bne.n	bfa2 <clk_init+0x32>
	}

	return 0;
    bfc0:	2000      	movs	r0, #0
}
    bfc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    bfc6:	f06f 0004 	mvn.w	r0, #4
    bfca:	e7fa      	b.n	bfc2 <clk_init+0x52>
    bfcc:	0000c011 	.word	0x0000c011
    bfd0:	0bad0000 	.word	0x0bad0000
    bfd4:	0001ec24 	.word	0x0001ec24

0000bfd8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    bfd8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    bfda:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    bfdc:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    bfde:	434b      	muls	r3, r1
    bfe0:	4809      	ldr	r0, [pc, #36]	; (c008 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    bfe2:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    bfe4:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    bfe6:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    bfe8:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    bfec:	4418      	add	r0, r3
	sub_data->cb = NULL;
    bfee:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    bff2:	f00f f896 	bl	1b122 <set_on_state>
	if (callback) {
    bff6:	b12d      	cbz	r5, c004 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    bff8:	4632      	mov	r2, r6
    bffa:	462b      	mov	r3, r5
}
    bffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    c000:	4802      	ldr	r0, [pc, #8]	; (c00c <clkstarted_handle.constprop.0+0x34>)
    c002:	4718      	bx	r3
}
    c004:	bd70      	pop	{r4, r5, r6, pc}
    c006:	bf00      	nop
    c008:	2000a7fc 	.word	0x2000a7fc
    c00c:	2000856c 	.word	0x2000856c

0000c010 <clock_event_handler>:
{
    c010:	b508      	push	{r3, lr}
    c012:	2805      	cmp	r0, #5
    c014:	d821      	bhi.n	c05a <clock_event_handler+0x4a>
    c016:	e8df f000 	tbb	[pc, r0]
    c01a:	1103      	.short	0x1103
    c01c:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    c020:	4b13      	ldr	r3, [pc, #76]	; (c070 <clock_event_handler+0x60>)
    c022:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    c026:	f010 0007 	ands.w	r0, r0, #7
    c02a:	d11f      	bne.n	c06c <clock_event_handler+0x5c>
}
    c02c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    c030:	f7ff bfd2 	b.w	bfd8 <clkstarted_handle.constprop.0>
    c034:	2002      	movs	r0, #2
    c036:	e7f9      	b.n	c02c <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    c038:	2003      	movs	r0, #3
    c03a:	e7f7      	b.n	c02c <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    c03c:	2001      	movs	r0, #1
    c03e:	e7f5      	b.n	c02c <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    c040:	490c      	ldr	r1, [pc, #48]	; (c074 <clock_event_handler+0x64>)
    c042:	f240 2266 	movw	r2, #614	; 0x266
    c046:	480c      	ldr	r0, [pc, #48]	; (c078 <clock_event_handler+0x68>)
    c048:	f00e fd34 	bl	1aab4 <printk>
    c04c:	f240 2166 	movw	r1, #614	; 0x266
}
    c050:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    c054:	4807      	ldr	r0, [pc, #28]	; (c074 <clock_event_handler+0x64>)
    c056:	f00e bfd3 	b.w	1b000 <assert_post_action>
    c05a:	4906      	ldr	r1, [pc, #24]	; (c074 <clock_event_handler+0x64>)
    c05c:	f240 226a 	movw	r2, #618	; 0x26a
    c060:	4805      	ldr	r0, [pc, #20]	; (c078 <clock_event_handler+0x68>)
    c062:	f00e fd27 	bl	1aab4 <printk>
    c066:	f240 216a 	movw	r1, #618	; 0x26a
    c06a:	e7f1      	b.n	c050 <clock_event_handler+0x40>
}
    c06c:	bd08      	pop	{r3, pc}
    c06e:	bf00      	nop
    c070:	2000a7fc 	.word	0x2000a7fc
    c074:	000203e6 	.word	0x000203e6
    c078:	0002003d 	.word	0x0002003d

0000c07c <generic_hfclk_start>:
{
    c07c:	b508      	push	{r3, lr}
	__asm__ volatile(
    c07e:	f04f 0320 	mov.w	r3, #32
    c082:	f3ef 8111 	mrs	r1, BASEPRI
    c086:	f383 8811 	msr	BASEPRI, r3
    c08a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    c08e:	4a11      	ldr	r2, [pc, #68]	; (c0d4 <generic_hfclk_start+0x58>)
    c090:	6813      	ldr	r3, [r2, #0]
    c092:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    c096:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    c09a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    c09c:	d00b      	beq.n	c0b6 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    c09e:	4a0e      	ldr	r2, [pc, #56]	; (c0d8 <generic_hfclk_start+0x5c>)
    c0a0:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    c0a4:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    c0a8:	f013 0301 	ands.w	r3, r3, #1
    c0ac:	d003      	beq.n	c0b6 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    c0ae:	480b      	ldr	r0, [pc, #44]	; (c0dc <generic_hfclk_start+0x60>)
    c0b0:	f00f f837 	bl	1b122 <set_on_state>
			already_started = true;
    c0b4:	2301      	movs	r3, #1
	__asm__ volatile(
    c0b6:	f381 8811 	msr	BASEPRI, r1
    c0ba:	f3bf 8f6f 	isb	sy
	if (already_started) {
    c0be:	b123      	cbz	r3, c0ca <generic_hfclk_start+0x4e>
}
    c0c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    c0c4:	2000      	movs	r0, #0
    c0c6:	f7ff bf87 	b.w	bfd8 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    c0ca:	2001      	movs	r0, #1
}
    c0cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c0d0:	f00a befe 	b.w	16ed0 <nrfx_clock_start>
    c0d4:	2000a8ac 	.word	0x2000a8ac
    c0d8:	40005000 	.word	0x40005000
    c0dc:	2000a884 	.word	0x2000a884

0000c0e0 <api_blocking_start>:
{
    c0e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c0e2:	2200      	movs	r2, #0
    c0e4:	2301      	movs	r3, #1
    c0e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    c0ea:	ab04      	add	r3, sp, #16
    c0ec:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c0f0:	4a09      	ldr	r2, [pc, #36]	; (c118 <api_blocking_start+0x38>)
    c0f2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    c0f4:	f8cd d000 	str.w	sp, [sp]
    c0f8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    c0fc:	f00f f856 	bl	1b1ac <api_start>
	if (err < 0) {
    c100:	2800      	cmp	r0, #0
    c102:	db05      	blt.n	c110 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    c104:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    c108:	2300      	movs	r3, #0
    c10a:	4668      	mov	r0, sp
    c10c:	f00d fb36 	bl	1977c <z_impl_k_sem_take>
}
    c110:	b007      	add	sp, #28
    c112:	f85d fb04 	ldr.w	pc, [sp], #4
    c116:	bf00      	nop
    c118:	0001b1f1 	.word	0x0001b1f1

0000c11c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c11c:	4b07      	ldr	r3, [pc, #28]	; (c13c <generic_hfclk_stop+0x20>)
    c11e:	e8d3 2fef 	ldaex	r2, [r3]
    c122:	f022 0102 	bic.w	r1, r2, #2
    c126:	e8c3 1fe0 	stlex	r0, r1, [r3]
    c12a:	2800      	cmp	r0, #0
    c12c:	d1f7      	bne.n	c11e <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    c12e:	07d3      	lsls	r3, r2, #31
    c130:	d402      	bmi.n	c138 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    c132:	2001      	movs	r0, #1
    c134:	f00a bf36 	b.w	16fa4 <nrfx_clock_stop>
}
    c138:	4770      	bx	lr
    c13a:	bf00      	nop
    c13c:	2000a8ac 	.word	0x2000a8ac

0000c140 <z_nrf_clock_control_lf_on>:
{
    c140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c144:	2201      	movs	r2, #1
    c146:	4606      	mov	r6, r0
    c148:	4942      	ldr	r1, [pc, #264]	; (c254 <z_nrf_clock_control_lf_on+0x114>)
    c14a:	e8d1 3fef 	ldaex	r3, [r1]
    c14e:	e8c1 2fe0 	stlex	r0, r2, [r1]
    c152:	2800      	cmp	r0, #0
    c154:	d1f9      	bne.n	c14a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    c156:	b99b      	cbnz	r3, c180 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    c158:	493f      	ldr	r1, [pc, #252]	; (c258 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
    c15a:	4840      	ldr	r0, [pc, #256]	; (c25c <z_nrf_clock_control_lf_on+0x11c>)
    c15c:	604b      	str	r3, [r1, #4]
    c15e:	60cb      	str	r3, [r1, #12]
    c160:	608a      	str	r2, [r1, #8]
    c162:	f7fe fdd7 	bl	ad14 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    c166:	2800      	cmp	r0, #0
    c168:	da0a      	bge.n	c180 <z_nrf_clock_control_lf_on+0x40>
    c16a:	493d      	ldr	r1, [pc, #244]	; (c260 <z_nrf_clock_control_lf_on+0x120>)
    c16c:	483d      	ldr	r0, [pc, #244]	; (c264 <z_nrf_clock_control_lf_on+0x124>)
    c16e:	f240 2226 	movw	r2, #550	; 0x226
    c172:	f00e fc9f 	bl	1aab4 <printk>
    c176:	f240 2126 	movw	r1, #550	; 0x226
    c17a:	4839      	ldr	r0, [pc, #228]	; (c260 <z_nrf_clock_control_lf_on+0x120>)
    c17c:	f00e ff40 	bl	1b000 <assert_post_action>
	switch (start_mode) {
    c180:	b386      	cbz	r6, c1e4 <z_nrf_clock_control_lf_on+0xa4>
    c182:	1e73      	subs	r3, r6, #1
    c184:	2b01      	cmp	r3, #1
    c186:	d852      	bhi.n	c22e <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    c188:	2e01      	cmp	r6, #1
    c18a:	d106      	bne.n	c19a <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    c18c:	4b36      	ldr	r3, [pc, #216]	; (c268 <z_nrf_clock_control_lf_on+0x128>)
    c18e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    c192:	f003 0303 	and.w	r3, r3, #3
    c196:	2b02      	cmp	r3, #2
    c198:	d024      	beq.n	c1e4 <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    c19a:	f012 f8b0 	bl	1e2fe <k_is_in_isr>
    c19e:	4604      	mov	r4, r0
    c1a0:	b918      	cbnz	r0, c1aa <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
    c1a2:	4b32      	ldr	r3, [pc, #200]	; (c26c <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
    c1a4:	781b      	ldrb	r3, [r3, #0]
    c1a6:	2b00      	cmp	r3, #0
    c1a8:	d14e      	bne.n	c248 <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
    c1aa:	f04f 0320 	mov.w	r3, #32
    c1ae:	f3ef 8711 	mrs	r7, BASEPRI
    c1b2:	f383 8811 	msr	BASEPRI, r3
    c1b6:	f3bf 8f6f 	isb	sy
    c1ba:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    c1bc:	4d2a      	ldr	r5, [pc, #168]	; (c268 <z_nrf_clock_control_lf_on+0x128>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c1be:	f8df 80b0 	ldr.w	r8, [pc, #176]	; c270 <z_nrf_clock_control_lf_on+0x130>
    c1c2:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c1c6:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    c1ca:	03d2      	lsls	r2, r2, #15
    c1cc:	d50c      	bpl.n	c1e8 <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    c1ce:	f003 0303 	and.w	r3, r3, #3
    c1d2:	2b02      	cmp	r3, #2
    c1d4:	d001      	beq.n	c1da <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    c1d6:	2e01      	cmp	r6, #1
    c1d8:	d106      	bne.n	c1e8 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
    c1da:	b324      	cbz	r4, c226 <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
    c1dc:	f387 8811 	msr	BASEPRI, r7
    c1e0:	f3bf 8f6f 	isb	sy
}
    c1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    c1e8:	b1c4      	cbz	r4, c21c <z_nrf_clock_control_lf_on+0xdc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    c1ea:	4638      	mov	r0, r7
    c1ec:	f001 fda2 	bl	dd34 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    c1f0:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    c1f4:	b2db      	uxtb	r3, r3
    c1f6:	2b01      	cmp	r3, #1
    c1f8:	d1e3      	bne.n	c1c2 <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    c1fa:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    c1fe:	2a00      	cmp	r2, #0
    c200:	d0df      	beq.n	c1c2 <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c202:	2200      	movs	r2, #0
    c204:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    c208:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    c20c:	2202      	movs	r2, #2
    c20e:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    c212:	2220      	movs	r2, #32
    c214:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c218:	60ab      	str	r3, [r5, #8]
}
    c21a:	e7d2      	b.n	c1c2 <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
    c21c:	2100      	movs	r1, #0
    c21e:	2021      	movs	r0, #33	; 0x21
    c220:	f00d fa3a 	bl	19698 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    c224:	e7e4      	b.n	c1f0 <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
    c226:	2302      	movs	r3, #2
    c228:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    c22c:	e7da      	b.n	c1e4 <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
    c22e:	490c      	ldr	r1, [pc, #48]	; (c260 <z_nrf_clock_control_lf_on+0x120>)
    c230:	480c      	ldr	r0, [pc, #48]	; (c264 <z_nrf_clock_control_lf_on+0x124>)
    c232:	f44f 720e 	mov.w	r2, #568	; 0x238
    c236:	f00e fc3d 	bl	1aab4 <printk>
}
    c23a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    c23e:	f44f 710e 	mov.w	r1, #568	; 0x238
    c242:	4807      	ldr	r0, [pc, #28]	; (c260 <z_nrf_clock_control_lf_on+0x120>)
    c244:	f00e bedc 	b.w	1b000 <assert_post_action>
    p_reg->INTENCLR = mask;
    c248:	2202      	movs	r2, #2
    c24a:	4b07      	ldr	r3, [pc, #28]	; (c268 <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
    c24c:	4607      	mov	r7, r0
    c24e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    c252:	e7b3      	b.n	c1bc <z_nrf_clock_control_lf_on+0x7c>
    c254:	2000a8b0 	.word	0x2000a8b0
    c258:	2000a7ec 	.word	0x2000a7ec
    c25c:	2000a81c 	.word	0x2000a81c
    c260:	000203e6 	.word	0x000203e6
    c264:	0002003d 	.word	0x0002003d
    c268:	40005000 	.word	0x40005000
    c26c:	2000f9f6 	.word	0x2000f9f6
    c270:	e000e100 	.word	0xe000e100

0000c274 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    c274:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    c276:	f000 f905 	bl	c484 <bt_rpmsg_platform_init>
	if (err < 0) {
    c27a:	1e04      	subs	r4, r0, #0
    c27c:	da06      	bge.n	c28c <bt_rpmsg_init+0x18>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    c27e:	4622      	mov	r2, r4
    c280:	2145      	movs	r1, #69	; 0x45
    c282:	4807      	ldr	r0, [pc, #28]	; (c2a0 <bt_rpmsg_init+0x2c>)
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    c284:	f00e fc16 	bl	1aab4 <printk>
	}

	return err;
}
    c288:	4620      	mov	r0, r4
    c28a:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    c28c:	4805      	ldr	r0, [pc, #20]	; (c2a4 <bt_rpmsg_init+0x30>)
    c28e:	f003 ffd5 	bl	1023c <bt_hci_driver_register>
	if (err < 0) {
    c292:	1e04      	subs	r4, r0, #0
    c294:	daf8      	bge.n	c288 <bt_rpmsg_init+0x14>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    c296:	4622      	mov	r2, r4
    c298:	2145      	movs	r1, #69	; 0x45
    c29a:	4803      	ldr	r0, [pc, #12]	; (c2a8 <bt_rpmsg_init+0x34>)
    c29c:	e7f2      	b.n	c284 <bt_rpmsg_init+0x10>
    c29e:	bf00      	nop
    c2a0:	00020458 	.word	0x00020458
    c2a4:	0001ec30 	.word	0x0001ec30
    c2a8:	00020484 	.word	0x00020484

0000c2ac <bt_rpmsg_send>:
{
    c2ac:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    c2ae:	7d02      	ldrb	r2, [r0, #20]
    c2b0:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    c2b2:	2a02      	cmp	r2, #2
    c2b4:	d00c      	beq.n	c2d0 <bt_rpmsg_send+0x24>
    c2b6:	2a04      	cmp	r2, #4
    c2b8:	d009      	beq.n	c2ce <bt_rpmsg_send+0x22>
    c2ba:	b1b2      	cbz	r2, c2ea <bt_rpmsg_send+0x3e>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    c2bc:	2145      	movs	r1, #69	; 0x45
    c2be:	480c      	ldr	r0, [pc, #48]	; (c2f0 <bt_rpmsg_send+0x44>)
		BT_ERR("Failed to send (err %d)", err);
    c2c0:	f00e fbf8 	bl	1aab4 <printk>
	net_buf_unref(buf);
    c2c4:	4620      	mov	r0, r4
    c2c6:	f009 fb7f 	bl	159c8 <net_buf_unref>
}
    c2ca:	2000      	movs	r0, #0
    c2cc:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    c2ce:	2205      	movs	r2, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    c2d0:	4611      	mov	r1, r2
    c2d2:	f104 0008 	add.w	r0, r4, #8
    c2d6:	f011 f94c 	bl	1d572 <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    c2da:	4620      	mov	r0, r4
    c2dc:	f000 f8ee 	bl	c4bc <bt_rpmsg_platform_send>
	if (err < 0) {
    c2e0:	1e02      	subs	r2, r0, #0
    c2e2:	daef      	bge.n	c2c4 <bt_rpmsg_send+0x18>
		BT_ERR("Failed to send (err %d)", err);
    c2e4:	2145      	movs	r1, #69	; 0x45
    c2e6:	4803      	ldr	r0, [pc, #12]	; (c2f4 <bt_rpmsg_send+0x48>)
    c2e8:	e7ea      	b.n	c2c0 <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
    c2ea:	2201      	movs	r2, #1
    c2ec:	e7f0      	b.n	c2d0 <bt_rpmsg_send+0x24>
    c2ee:	bf00      	nop
    c2f0:	000204b3 	.word	0x000204b3
    c2f4:	000204c8 	.word	0x000204c8

0000c2f8 <bt_rpmsg_rx>:
{
    c2f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    c2fc:	4680      	mov	r8, r0
{
    c2fe:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    c300:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    c304:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    c306:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    c308:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    c30c:	d009      	beq.n	c322 <bt_rpmsg_rx+0x2a>
    c30e:	2805      	cmp	r0, #5
    c310:	d074      	beq.n	c3fc <bt_rpmsg_rx+0x104>
    c312:	2802      	cmp	r0, #2
    c314:	f040 8099 	bne.w	c44a <bt_rpmsg_rx+0x152>
	if (remaining < sizeof(hdr)) {
    c318:	2b03      	cmp	r3, #3
    c31a:	d84a      	bhi.n	c3b2 <bt_rpmsg_rx+0xba>
		BT_ERR("Not enough data for ACL header");
    c31c:	2145      	movs	r1, #69	; 0x45
    c31e:	484f      	ldr	r0, [pc, #316]	; (c45c <bt_rpmsg_rx+0x164>)
    c320:	e003      	b.n	c32a <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    c322:	2b01      	cmp	r3, #1
    c324:	d806      	bhi.n	c334 <bt_rpmsg_rx+0x3c>
		BT_ERR("Not enough data for event header");
    c326:	2145      	movs	r1, #69	; 0x45
    c328:	484d      	ldr	r0, [pc, #308]	; (c460 <bt_rpmsg_rx+0x168>)
}
    c32a:	b002      	add	sp, #8
    c32c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Not enough data for ACL header");
    c330:	f00e bbc0 	b.w	1aab4 <printk>
	switch (evt_type) {
    c334:	7873      	ldrb	r3, [r6, #1]
    c336:	2b3e      	cmp	r3, #62	; 0x3e
    c338:	d117      	bne.n	c36a <bt_rpmsg_rx+0x72>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    c33a:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    c33c:	2f02      	cmp	r7, #2
    c33e:	d016      	beq.n	c36e <bt_rpmsg_rx+0x76>
    c340:	f1a7 030d 	sub.w	r3, r7, #13
    c344:	425f      	negs	r7, r3
    c346:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    c348:	2202      	movs	r2, #2
    c34a:	4641      	mov	r1, r8
    c34c:	a801      	add	r0, sp, #4
    c34e:	f00f fdf5 	bl	1bf3c <memcpy>
	if (remaining != hdr.len) {
    c352:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    c356:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    c358:	429d      	cmp	r5, r3
    c35a:	d00a      	beq.n	c372 <bt_rpmsg_rx+0x7a>
		BT_ERR("Event payload length is not correct");
    c35c:	2145      	movs	r1, #69	; 0x45
    c35e:	4841      	ldr	r0, [pc, #260]	; (c464 <bt_rpmsg_rx+0x16c>)
			BT_ERR("No available event buffers!");
    c360:	f00e fba8 	bl	1aab4 <printk>
}
    c364:	b002      	add	sp, #8
    c366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    c36a:	2700      	movs	r7, #0
    c36c:	e7ec      	b.n	c348 <bt_rpmsg_rx+0x50>
			return true;
    c36e:	2701      	movs	r7, #1
    c370:	e7ea      	b.n	c348 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    c372:	2200      	movs	r2, #0
    c374:	2300      	movs	r3, #0
    c376:	4639      	mov	r1, r7
    c378:	f89d 0004 	ldrb.w	r0, [sp, #4]
    c37c:	f002 fb88 	bl	ea90 <bt_buf_get_evt>
	if (!buf) {
    c380:	4604      	mov	r4, r0
    c382:	b920      	cbnz	r0, c38e <bt_rpmsg_rx+0x96>
		if (discardable) {
    c384:	2f00      	cmp	r7, #0
    c386:	d1ed      	bne.n	c364 <bt_rpmsg_rx+0x6c>
			BT_ERR("No available event buffers!");
    c388:	2145      	movs	r1, #69	; 0x45
    c38a:	4837      	ldr	r0, [pc, #220]	; (c468 <bt_rpmsg_rx+0x170>)
    c38c:	e7e8      	b.n	c360 <bt_rpmsg_rx+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c38e:	f100 0708 	add.w	r7, r0, #8
    c392:	2202      	movs	r2, #2
    c394:	a901      	add	r1, sp, #4
    c396:	4638      	mov	r0, r7
    c398:	f011 f90e 	bl	1d5b8 <net_buf_simple_add_mem>
    c39c:	462a      	mov	r2, r5
    c39e:	1cf1      	adds	r1, r6, #3
    c3a0:	4638      	mov	r0, r7
    c3a2:	f011 f909 	bl	1d5b8 <net_buf_simple_add_mem>
		bt_recv(buf);
    c3a6:	4620      	mov	r0, r4
}
    c3a8:	b002      	add	sp, #8
    c3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
    c3ae:	f003 bf1b 	b.w	101e8 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    c3b2:	2200      	movs	r2, #0
    c3b4:	2300      	movs	r3, #0
    c3b6:	2003      	movs	r0, #3
    c3b8:	f002 fb18 	bl	e9ec <bt_buf_get_rx>
	if (buf) {
    c3bc:	4604      	mov	r4, r0
    c3be:	b1d0      	cbz	r0, c3f6 <bt_rpmsg_rx+0xfe>
		memcpy((void *)&hdr, data, sizeof(hdr));
    c3c0:	2204      	movs	r2, #4
    c3c2:	4641      	mov	r1, r8
    c3c4:	eb0d 0002 	add.w	r0, sp, r2
    c3c8:	f00f fdb8 	bl	1bf3c <memcpy>
    c3cc:	2204      	movs	r2, #4
    c3ce:	f104 0708 	add.w	r7, r4, #8
    c3d2:	4638      	mov	r0, r7
    c3d4:	eb0d 0102 	add.w	r1, sp, r2
    c3d8:	f011 f8ee 	bl	1d5b8 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c3dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    c3e0:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c3e2:	429d      	cmp	r5, r3
    c3e4:	d02e      	beq.n	c444 <bt_rpmsg_rx+0x14c>
		BT_ERR("ACL payload length is not correct");
    c3e6:	2145      	movs	r1, #69	; 0x45
    c3e8:	4820      	ldr	r0, [pc, #128]	; (c46c <bt_rpmsg_rx+0x174>)
		BT_ERR("ISO payload length is not correct");
    c3ea:	f00e fb63 	bl	1aab4 <printk>
		net_buf_unref(buf);
    c3ee:	4620      	mov	r0, r4
    c3f0:	f009 faea 	bl	159c8 <net_buf_unref>
	if (buf) {
    c3f4:	e7b6      	b.n	c364 <bt_rpmsg_rx+0x6c>
		BT_ERR("No available ACL buffers!");
    c3f6:	2145      	movs	r1, #69	; 0x45
    c3f8:	481d      	ldr	r0, [pc, #116]	; (c470 <bt_rpmsg_rx+0x178>)
    c3fa:	e796      	b.n	c32a <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    c3fc:	2b03      	cmp	r3, #3
    c3fe:	d802      	bhi.n	c406 <bt_rpmsg_rx+0x10e>
		BT_ERR("Not enough data for ISO header");
    c400:	2145      	movs	r1, #69	; 0x45
    c402:	481c      	ldr	r0, [pc, #112]	; (c474 <bt_rpmsg_rx+0x17c>)
    c404:	e791      	b.n	c32a <bt_rpmsg_rx+0x32>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    c406:	2200      	movs	r2, #0
    c408:	2300      	movs	r3, #0
    c40a:	f002 faef 	bl	e9ec <bt_buf_get_rx>
	if (buf) {
    c40e:	4604      	mov	r4, r0
    c410:	b1a8      	cbz	r0, c43e <bt_rpmsg_rx+0x146>
		memcpy((void *)&hdr, data, sizeof(hdr));
    c412:	2204      	movs	r2, #4
    c414:	4641      	mov	r1, r8
    c416:	eb0d 0002 	add.w	r0, sp, r2
    c41a:	f00f fd8f 	bl	1bf3c <memcpy>
    c41e:	2204      	movs	r2, #4
    c420:	f104 0708 	add.w	r7, r4, #8
    c424:	4638      	mov	r0, r7
    c426:	eb0d 0102 	add.w	r1, sp, r2
    c42a:	f011 f8c5 	bl	1d5b8 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c42e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    c432:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    c434:	429d      	cmp	r5, r3
    c436:	d005      	beq.n	c444 <bt_rpmsg_rx+0x14c>
		BT_ERR("ISO payload length is not correct");
    c438:	2145      	movs	r1, #69	; 0x45
    c43a:	480f      	ldr	r0, [pc, #60]	; (c478 <bt_rpmsg_rx+0x180>)
    c43c:	e7d5      	b.n	c3ea <bt_rpmsg_rx+0xf2>
		BT_ERR("No available ISO buffers!");
    c43e:	2145      	movs	r1, #69	; 0x45
    c440:	480e      	ldr	r0, [pc, #56]	; (c47c <bt_rpmsg_rx+0x184>)
    c442:	e772      	b.n	c32a <bt_rpmsg_rx+0x32>
    c444:	462a      	mov	r2, r5
    c446:	1d71      	adds	r1, r6, #5
    c448:	e7aa      	b.n	c3a0 <bt_rpmsg_rx+0xa8>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    c44a:	4602      	mov	r2, r0
    c44c:	2145      	movs	r1, #69	; 0x45
    c44e:	480c      	ldr	r0, [pc, #48]	; (c480 <bt_rpmsg_rx+0x188>)
}
    c450:	b002      	add	sp, #8
    c452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    c456:	f00e bb2d 	b.w	1aab4 <printk>
    c45a:	bf00      	nop
    c45c:	00020555 	.word	0x00020555
    c460:	000204e5 	.word	0x000204e5
    c464:	0002050b 	.word	0x0002050b
    c468:	00020534 	.word	0x00020534
    c46c:	00020598 	.word	0x00020598
    c470:	00020579 	.word	0x00020579
    c474:	000205bf 	.word	0x000205bf
    c478:	00020602 	.word	0x00020602
    c47c:	000205e3 	.word	0x000205e3
    c480:	00020629 	.word	0x00020629

0000c484 <bt_rpmsg_platform_init>:

	return RPMSG_SUCCESS;
}

int bt_rpmsg_platform_init(void)
{
    c484:	b508      	push	{r3, lr}
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    c486:	4908      	ldr	r1, [pc, #32]	; (c4a8 <bt_rpmsg_platform_init+0x24>)
    c488:	4808      	ldr	r0, [pc, #32]	; (c4ac <bt_rpmsg_platform_init+0x28>)
    c48a:	f7ff fb89 	bl	bba0 <rpmsg_service_register_endpoint>

	if (err < 0) {
    c48e:	1e02      	subs	r2, r0, #0
    c490:	da05      	bge.n	c49e <bt_rpmsg_platform_init+0x1a>
		LOG_ERR("Registering endpoint failed with %d", err);
    c492:	4807      	ldr	r0, [pc, #28]	; (c4b0 <bt_rpmsg_platform_init+0x2c>)
    c494:	2145      	movs	r1, #69	; 0x45
    c496:	f00e fb0d 	bl	1aab4 <printk>
		return RPMSG_ERR_INIT;
    c49a:	4806      	ldr	r0, [pc, #24]	; (c4b4 <bt_rpmsg_platform_init+0x30>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    c49c:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    c49e:	4b06      	ldr	r3, [pc, #24]	; (c4b8 <bt_rpmsg_platform_init+0x34>)
	return RPMSG_SUCCESS;
    c4a0:	2000      	movs	r0, #0
	endpoint_id = err;
    c4a2:	601a      	str	r2, [r3, #0]
	return RPMSG_SUCCESS;
    c4a4:	e7fa      	b.n	c49c <bt_rpmsg_platform_init+0x18>
    c4a6:	bf00      	nop
    c4a8:	0001b20d 	.word	0x0001b20d
    c4ac:	00020656 	.word	0x00020656
    c4b0:	00020661 	.word	0x00020661
    c4b4:	fffff82a 	.word	0xfffff82a
    c4b8:	2000a8b4 	.word	0x2000a8b4

0000c4bc <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    c4bc:	4b02      	ldr	r3, [pc, #8]	; (c4c8 <bt_rpmsg_platform_send+0xc>)
    c4be:	8982      	ldrh	r2, [r0, #12]
    c4c0:	6881      	ldr	r1, [r0, #8]
    c4c2:	6818      	ldr	r0, [r3, #0]
    c4c4:	f7ff bb98 	b.w	bbf8 <rpmsg_service_send>
    c4c8:	2000a8b4 	.word	0x2000a8b4

0000c4cc <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    c4cc:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    c4ce:	4b02      	ldr	r3, [pc, #8]	; (c4d8 <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    c4d0:	6818      	ldr	r0, [r3, #0]
    c4d2:	f7ff fb87 	bl	bbe4 <rpmsg_service_endpoint_is_bound>
}
    c4d6:	bd08      	pop	{r3, pc}
    c4d8:	2000a8b4 	.word	0x2000a8b4

0000c4dc <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    c4dc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    c4de:	4c06      	ldr	r4, [pc, #24]	; (c4f8 <z_clock_isr+0x1c>)
    c4e0:	4806      	ldr	r0, [pc, #24]	; (c4fc <z_clock_isr+0x20>)
    c4e2:	4621      	mov	r1, r4
    c4e4:	2217      	movs	r2, #23
    c4e6:	f00e fae5 	bl	1aab4 <printk>
    c4ea:	4620      	mov	r0, r4
}
    c4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    c4f0:	2117      	movs	r1, #23
    c4f2:	f00e bd85 	b.w	1b000 <assert_post_action>
    c4f6:	bf00      	nop
    c4f8:	0002069e 	.word	0x0002069e
    c4fc:	0002003d 	.word	0x0002003d

0000c500 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    c500:	4a04      	ldr	r2, [pc, #16]	; (c514 <sys_clock_timeout_handler+0x14>)
    c502:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c504:	1ac8      	subs	r0, r1, r3
    c506:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    c50a:	4403      	add	r3, r0
    c50c:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    c50e:	f00d bdd9 	b.w	1a0c4 <z_clock_announce>
    c512:	bf00      	nop
    c514:	2000a8c4 	.word	0x2000a8c4

0000c518 <set_absolute_alarm>:
{
    c518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c51c:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c520:	f04f 0900 	mov.w	r9, #0
    c524:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    c526:	f100 0450 	add.w	r4, r0, #80	; 0x50
    c52a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    c52e:	00a4      	lsls	r4, r4, #2
    c530:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    c534:	b2a4      	uxth	r4, r4
    c536:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    c53a:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    c53e:	f8df 806c 	ldr.w	r8, [pc, #108]	; c5ac <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    c542:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c546:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c54a:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    c54c:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    c550:	eba3 030a 	sub.w	r3, r3, sl
    c554:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c558:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    c55c:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    c55e:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    c562:	d102      	bne.n	c56a <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    c564:	2013      	movs	r0, #19
    c566:	f011 fed0 	bl	1e30a <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    c56a:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    c56e:	1aab      	subs	r3, r5, r2
    c570:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    c574:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c578:	bf88      	it	hi
    c57a:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c57c:	f8c4 9000 	str.w	r9, [r4]
    c580:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c582:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    c586:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    c58a:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    c58e:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    c592:	459a      	cmp	sl, r3
    c594:	d006      	beq.n	c5a4 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    c596:	1aeb      	subs	r3, r5, r3
    c598:	3b02      	subs	r3, #2
    c59a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    c59e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c5a2:	d801      	bhi.n	c5a8 <set_absolute_alarm+0x90>
}
    c5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    c5a8:	462b      	mov	r3, r5
    c5aa:	e7cf      	b.n	c54c <set_absolute_alarm+0x34>
    c5ac:	40015000 	.word	0x40015000

0000c5b0 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    c5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c5b2:	2500      	movs	r5, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c5b4:	462f      	mov	r7, r5
    c5b6:	4c10      	ldr	r4, [pc, #64]	; (c5f8 <rtc_nrf_isr+0x48>)
    c5b8:	6826      	ldr	r6, [r4, #0]
    return p_reg->INTENSET & mask;
    c5ba:	4b10      	ldr	r3, [pc, #64]	; (c5fc <rtc_nrf_isr+0x4c>)
    c5bc:	b105      	cbz	r5, c5c0 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    c5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c5c0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    c5c4:	03d2      	lsls	r2, r2, #15
    c5c6:	d5fa      	bpl.n	c5be <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c5c8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    c5cc:	2a00      	cmp	r2, #0
    c5ce:	d0f6      	beq.n	c5be <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c5d0:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    c5d4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    c5d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c5dc:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c5e0:	2501      	movs	r5, #1
    return p_reg->CC[ch];
    c5e2:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
			if (handler) {
    c5e6:	b126      	cbz	r6, c5f2 <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    c5e8:	2000      	movs	r0, #0
    c5ea:	6862      	ldr	r2, [r4, #4]
    c5ec:	6027      	str	r7, [r4, #0]
    c5ee:	47b0      	blx	r6
    c5f0:	e7e2      	b.n	c5b8 <rtc_nrf_isr+0x8>
    c5f2:	6026      	str	r6, [r4, #0]
}
    c5f4:	e7e3      	b.n	c5be <rtc_nrf_isr+0xe>
    c5f6:	bf00      	nop
    c5f8:	2000a8b8 	.word	0x2000a8b8
    c5fc:	40015000 	.word	0x40015000

0000c600 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    c600:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    c602:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    c604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    c608:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    c60c:	4c0c      	ldr	r4, [pc, #48]	; (c640 <z_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    c60e:	2101      	movs	r1, #1
    c610:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    c614:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    c618:	4b0a      	ldr	r3, [pc, #40]	; (c644 <z_clock_driver_init+0x44>)
    c61a:	2015      	movs	r0, #21
    c61c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    c620:	462a      	mov	r2, r5
    c622:	f001 fb17 	bl	dc54 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    c626:	2015      	movs	r0, #21
    c628:	f001 faf6 	bl	dc18 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    c62c:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    c62e:	4a06      	ldr	r2, [pc, #24]	; (c648 <z_clock_driver_init+0x48>)
    c630:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    c632:	2002      	movs	r0, #2
    c634:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    c636:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    c638:	f7ff fd82 	bl	c140 <z_nrf_clock_control_lf_on>

	return 0;
}
    c63c:	4628      	mov	r0, r5
    c63e:	bd38      	pop	{r3, r4, r5, pc}
    c640:	40015000 	.word	0x40015000
    c644:	e000e100 	.word	0xe000e100
    c648:	2000a8c0 	.word	0x2000a8c0

0000c64c <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    c64c:	4a13      	ldr	r2, [pc, #76]	; (c69c <z_clock_set_timeout+0x50>)
    c64e:	f1b0 3fff 	cmp.w	r0, #4294967295
    c652:	bf14      	ite	ne
    c654:	4603      	movne	r3, r0
    c656:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c658:	3b01      	subs	r3, #1
    c65a:	2b00      	cmp	r3, #0
    c65c:	dd1c      	ble.n	c698 <z_clock_set_timeout+0x4c>
    c65e:	4293      	cmp	r3, r2
    c660:	bfa8      	it	ge
    c662:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    c664:	4a0e      	ldr	r2, [pc, #56]	; (c6a0 <z_clock_set_timeout+0x54>)
    c666:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    c66a:	4a0e      	ldr	r2, [pc, #56]	; (c6a4 <z_clock_set_timeout+0x58>)
    c66c:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c66e:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    c670:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    c674:	bf18      	it	ne
    c676:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
    c678:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c67c:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    c67e:	480a      	ldr	r0, [pc, #40]	; (c6a8 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c680:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    c682:	4a0a      	ldr	r2, [pc, #40]	; (c6ac <z_clock_set_timeout+0x60>)
    c684:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    c686:	2000      	movs	r0, #0
    c688:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    c68a:	4a04      	ldr	r2, [pc, #16]	; (c69c <z_clock_set_timeout+0x50>)
    c68c:	4293      	cmp	r3, r2
    c68e:	bf94      	ite	ls
    c690:	18c9      	addls	r1, r1, r3
    c692:	1889      	addhi	r1, r1, r2
    c694:	f7ff bf40 	b.w	c518 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c698:	2300      	movs	r3, #0
    c69a:	e7e3      	b.n	c664 <z_clock_set_timeout+0x18>
    c69c:	007fffff 	.word	0x007fffff
    c6a0:	40015000 	.word	0x40015000
    c6a4:	2000a8c4 	.word	0x2000a8c4
    c6a8:	0000c501 	.word	0x0000c501
    c6ac:	2000a8b8 	.word	0x2000a8b8

0000c6b0 <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    c6b0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c6b2:	f04f 0320 	mov.w	r3, #32
    c6b6:	f3ef 8511 	mrs	r5, BASEPRI
    c6ba:	f383 8811 	msr	BASEPRI, r3
    c6be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c6c2:	4815      	ldr	r0, [pc, #84]	; (c718 <z_clock_elapsed+0x68>)
    c6c4:	f00d fa0a 	bl	19adc <z_spin_lock_valid>
    c6c8:	b940      	cbnz	r0, c6dc <z_clock_elapsed+0x2c>
    c6ca:	4914      	ldr	r1, [pc, #80]	; (c71c <z_clock_elapsed+0x6c>)
    c6cc:	4814      	ldr	r0, [pc, #80]	; (c720 <z_clock_elapsed+0x70>)
    c6ce:	227c      	movs	r2, #124	; 0x7c
    c6d0:	f00e f9f0 	bl	1aab4 <printk>
    c6d4:	217c      	movs	r1, #124	; 0x7c
    c6d6:	4811      	ldr	r0, [pc, #68]	; (c71c <z_clock_elapsed+0x6c>)
    c6d8:	f00e fc92 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
    c6dc:	480e      	ldr	r0, [pc, #56]	; (c718 <z_clock_elapsed+0x68>)
    c6de:	f00d fa19 	bl	19b14 <z_spin_lock_set_owner>
    c6e2:	4b10      	ldr	r3, [pc, #64]	; (c724 <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c6e4:	480c      	ldr	r0, [pc, #48]	; (c718 <z_clock_elapsed+0x68>)
    c6e6:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    c6ea:	4b0f      	ldr	r3, [pc, #60]	; (c728 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    c6ec:	681b      	ldr	r3, [r3, #0]
    c6ee:	1ae4      	subs	r4, r4, r3
    c6f0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    c6f4:	f00d fa00 	bl	19af8 <z_spin_unlock_valid>
    c6f8:	b940      	cbnz	r0, c70c <z_clock_elapsed+0x5c>
    c6fa:	4908      	ldr	r1, [pc, #32]	; (c71c <z_clock_elapsed+0x6c>)
    c6fc:	4808      	ldr	r0, [pc, #32]	; (c720 <z_clock_elapsed+0x70>)
    c6fe:	22a7      	movs	r2, #167	; 0xa7
    c700:	f00e f9d8 	bl	1aab4 <printk>
    c704:	21a7      	movs	r1, #167	; 0xa7
    c706:	4805      	ldr	r0, [pc, #20]	; (c71c <z_clock_elapsed+0x6c>)
    c708:	f00e fc7a 	bl	1b000 <assert_post_action>
	__asm__ volatile(
    c70c:	f385 8811 	msr	BASEPRI, r5
    c710:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    c714:	4620      	mov	r0, r4
    c716:	bd38      	pop	{r3, r4, r5, pc}
    c718:	2000a8c8 	.word	0x2000a8c8
    c71c:	00020077 	.word	0x00020077
    c720:	0002003d 	.word	0x0002003d
    c724:	40015000 	.word	0x40015000
    c728:	2000a8c4 	.word	0x2000a8c4

0000c72c <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
    c72c:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    c72e:	1cc5      	adds	r5, r0, #3
    c730:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    c734:	2d74      	cmp	r5, #116	; 0x74
    c736:	d908      	bls.n	c74a <user_data_alloc.constprop.0+0x1e>
    c738:	4917      	ldr	r1, [pc, #92]	; (c798 <user_data_alloc.constprop.0+0x6c>)
    c73a:	4818      	ldr	r0, [pc, #96]	; (c79c <user_data_alloc.constprop.0+0x70>)
    c73c:	2250      	movs	r2, #80	; 0x50
    c73e:	f00e f9b9 	bl	1aab4 <printk>
    c742:	2150      	movs	r1, #80	; 0x50
    c744:	4814      	ldr	r0, [pc, #80]	; (c798 <user_data_alloc.constprop.0+0x6c>)
    c746:	f00e fc5b 	bl	1b000 <assert_post_action>
	return list->head;
    c74a:	4c15      	ldr	r4, [pc, #84]	; (c7a0 <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
    c74c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    c750:	b123      	cbz	r3, c75c <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    c752:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c756:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    c758:	2b74      	cmp	r3, #116	; 0x74
    c75a:	d919      	bls.n	c790 <user_data_alloc.constprop.0+0x64>
	return k_aligned_alloc(sizeof(void *), size);
    c75c:	2178      	movs	r1, #120	; 0x78
    c75e:	2004      	movs	r0, #4
    c760:	f00e f8ac 	bl	1a8bc <k_aligned_alloc>

		item = k_malloc(sizeof(struct data_chunk_item));

		if (!item) {
    c764:	b178      	cbz	r0, c786 <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
    c766:	2300      	movs	r3, #0
	return list->tail;
    c768:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	parent->next = child;
    c76c:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    c76e:	b95a      	cbnz	r2, c788 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
    c770:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
    c774:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
    c778:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c77c:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    c77e:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    c780:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    c782:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

	return user_data_loc;
}
    c786:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    c788:	6010      	str	r0, [r2, #0]
	list->tail = node;
    c78a:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    c78e:	e7f1      	b.n	c774 <user_data_alloc.constprop.0+0x48>
	return list->tail;
    c790:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    c794:	e7f0      	b.n	c778 <user_data_alloc.constprop.0+0x4c>
    c796:	bf00      	nop
    c798:	0002070b 	.word	0x0002070b
    c79c:	0002003d 	.word	0x0002003d
    c7a0:	2000a8cc 	.word	0x2000a8cc

0000c7a4 <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c7a4:	4808      	ldr	r0, [pc, #32]	; (c7c8 <discovery_complete.constprop.0+0x24>)
    c7a6:	f500 739c 	add.w	r3, r0, #312	; 0x138
    c7aa:	e8d3 2fef 	ldaex	r2, [r3]
    c7ae:	f042 0202 	orr.w	r2, r2, #2
    c7b2:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c7b6:	2900      	cmp	r1, #0
    c7b8:	d1f7      	bne.n	c7aa <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    c7ba:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    c7be:	681b      	ldr	r3, [r3, #0]
    c7c0:	b10b      	cbz	r3, c7c6 <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
    c7c2:	6841      	ldr	r1, [r0, #4]
    c7c4:	4718      	bx	r3
	}
}
    c7c6:	4770      	bx	lr
    c7c8:	2000a8cc 	.word	0x2000a8cc

0000c7cc <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c7cc:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    c7ce:	4c0b      	ldr	r4, [pc, #44]	; (c7fc <discovery_complete_error.constprop.0+0x30>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c7d0:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    c7d2:	4620      	mov	r0, r4
    c7d4:	f00e fd40 	bl	1b258 <svc_attr_memory_release>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c7d8:	f06f 0101 	mvn.w	r1, #1
    c7dc:	f504 709c 	add.w	r0, r4, #312	; 0x138
    c7e0:	f00e fd51 	bl	1b286 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    c7e4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    c7e8:	689b      	ldr	r3, [r3, #8]
    c7ea:	b12b      	cbz	r3, c7f8 <discovery_complete_error.constprop.0+0x2c>
		dm->callback->error_found(dm->conn, err, dm->context);
    c7ec:	4629      	mov	r1, r5
    c7ee:	6862      	ldr	r2, [r4, #4]
    c7f0:	6820      	ldr	r0, [r4, #0]
	}
}
    c7f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    c7f6:	4718      	bx	r3
}
    c7f8:	bd70      	pop	{r4, r5, r6, pc}
    c7fa:	bf00      	nop
    c7fc:	2000a8cc 	.word	0x2000a8cc

0000c800 <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c804:	4c1f      	ldr	r4, [pc, #124]	; (c884 <attr_store.constprop.0+0x84>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c806:	4607      	mov	r7, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c808:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c80c:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c80e:	2b22      	cmp	r3, #34	; 0x22
    c810:	d907      	bls.n	c822 <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
    c812:	2145      	movs	r1, #69	; 0x45
    c814:	481c      	ldr	r0, [pc, #112]	; (c888 <attr_store.constprop.0+0x88>)
    c816:	f00e f94d 	bl	1aab4 <printk>
		return NULL;
    c81a:	2500      	movs	r5, #0
}
    c81c:	4628      	mov	r0, r5
    c81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    c822:	6803      	ldr	r3, [r0, #0]
    c824:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    c826:	2b02      	cmp	r3, #2
    c828:	d80d      	bhi.n	c846 <attr_store.constprop.0+0x46>
    c82a:	4a18      	ldr	r2, [pc, #96]	; (c88c <attr_store.constprop.0+0x8c>)
    c82c:	f812 9003 	ldrb.w	r9, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    c830:	eb06 0009 	add.w	r0, r6, r9
    c834:	f7ff ff7a 	bl	c72c <user_data_alloc.constprop.0>
	if (!attr_data) {
    c838:	4605      	mov	r5, r0
    c83a:	b958      	cbnz	r0, c854 <attr_store.constprop.0+0x54>
		LOG_ERR("No space for attribute data.");
    c83c:	2145      	movs	r1, #69	; 0x45
    c83e:	4814      	ldr	r0, [pc, #80]	; (c890 <attr_store.constprop.0+0x90>)
    c840:	f00e f938 	bl	1aab4 <printk>
		return NULL;
    c844:	e7ea      	b.n	c81c <attr_store.constprop.0+0x1c>
		LOG_ERR("Unsupported UUID type.");
    c846:	2145      	movs	r1, #69	; 0x45
    c848:	4812      	ldr	r0, [pc, #72]	; (c894 <attr_store.constprop.0+0x94>)
    c84a:	f00e f933 	bl	1aab4 <printk>
    c84e:	f04f 0900 	mov.w	r9, #0
    c852:	e7ed      	b.n	c830 <attr_store.constprop.0+0x30>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c854:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c858:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c85a:	1c5a      	adds	r2, r3, #1
    c85c:	3303      	adds	r3, #3
    c85e:	00db      	lsls	r3, r3, #3
    c860:	f103 0804 	add.w	r8, r3, #4
    c864:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    c868:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    c86a:	441c      	add	r4, r3
    c86c:	8a3b      	ldrh	r3, [r7, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c86e:	464a      	mov	r2, r9
	cur_attr->handle = attr->handle;
    c870:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    c872:	7cbb      	ldrb	r3, [r7, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c874:	6839      	ldr	r1, [r7, #0]
	cur_attr->perm = attr->perm;
    c876:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c878:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c87a:	f00f fb5f 	bl	1bf3c <memcpy>
	return cur_attr;
    c87e:	4645      	mov	r5, r8
    c880:	e7cc      	b.n	c81c <attr_store.constprop.0+0x1c>
    c882:	bf00      	nop
    c884:	2000a8cc 	.word	0x2000a8cc
    c888:	00020736 	.word	0x00020736
    c88c:	00020901 	.word	0x00020901
    c890:	00020773 	.word	0x00020773
    c894:	00020757 	.word	0x00020757

0000c898 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    c898:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    c89a:	4604      	mov	r4, r0
    c89c:	b930      	cbnz	r0, c8ac <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
    c89e:	2145      	movs	r1, #69	; 0x45
    c8a0:	480c      	ldr	r0, [pc, #48]	; (c8d4 <uuid_store.constprop.0+0x3c>)
    c8a2:	f00e f907 	bl	1aab4 <printk>
    c8a6:	4625      	mov	r5, r4
}
    c8a8:	4628      	mov	r0, r5
    c8aa:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    c8ac:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    c8ae:	2b02      	cmp	r3, #2
    c8b0:	d80a      	bhi.n	c8c8 <uuid_store.constprop.0+0x30>
    c8b2:	4a09      	ldr	r2, [pc, #36]	; (c8d8 <uuid_store.constprop.0+0x40>)
    c8b4:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    c8b6:	4630      	mov	r0, r6
    c8b8:	f7ff ff38 	bl	c72c <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    c8bc:	4632      	mov	r2, r6
    c8be:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    c8c0:	4605      	mov	r5, r0
	memcpy(buffer, uuid, size);
    c8c2:	f00f fb3b 	bl	1bf3c <memcpy>
	return (struct bt_uuid *)buffer;
    c8c6:	e7ef      	b.n	c8a8 <uuid_store.constprop.0+0x10>
		LOG_ERR("Unsupported UUID type.");
    c8c8:	2145      	movs	r1, #69	; 0x45
    c8ca:	4804      	ldr	r0, [pc, #16]	; (c8dc <uuid_store.constprop.0+0x44>)
    c8cc:	f00e f8f2 	bl	1aab4 <printk>
    c8d0:	2600      	movs	r6, #0
    c8d2:	e7f0      	b.n	c8b6 <uuid_store.constprop.0+0x1e>
    c8d4:	00020795 	.word	0x00020795
    c8d8:	00020901 	.word	0x00020901
    c8dc:	00020757 	.word	0x00020757

0000c8e0 <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    c8e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    c8e4:	4e79      	ldr	r6, [pc, #484]	; (cacc <discovery_callback+0x1ec>)
{
    c8e6:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
    c8e8:	6833      	ldr	r3, [r6, #0]
    c8ea:	4283      	cmp	r3, r0
    c8ec:	d008      	beq.n	c900 <discovery_callback+0x20>
		LOG_ERR("Unexpected conn object. Aborting.");
    c8ee:	4878      	ldr	r0, [pc, #480]	; (cad0 <discovery_callback+0x1f0>)
    c8f0:	2145      	movs	r1, #69	; 0x45
    c8f2:	f00e f8df 	bl	1aab4 <printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    c8f6:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    c8fa:	f7ff ff67 	bl	c7cc <discovery_complete_error.constprop.0>
    c8fe:	e031      	b.n	c964 <discovery_callback+0x84>
    c900:	7c13      	ldrb	r3, [r2, #16]
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    c902:	2b03      	cmp	r3, #3
    c904:	f000 80ae 	beq.w	ca64 <discovery_callback+0x184>
    c908:	d80d      	bhi.n	c926 <discovery_callback+0x46>
    c90a:	2b02      	cmp	r3, #2
    c90c:	d126      	bne.n	c95c <discovery_callback+0x7c>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
    c90e:	f240 12b3 	movw	r2, #435	; 0x1b3
    c912:	4970      	ldr	r1, [pc, #448]	; (cad4 <discovery_callback+0x1f4>)
    c914:	4870      	ldr	r0, [pc, #448]	; (cad8 <discovery_callback+0x1f8>)
    c916:	f00e f8cd 	bl	1aab4 <printk>
    c91a:	f240 11b3 	movw	r1, #435	; 0x1b3
    c91e:	486d      	ldr	r0, [pc, #436]	; (cad4 <discovery_callback+0x1f4>)
    c920:	f00e fb6e 	bl	1b000 <assert_post_action>
    c924:	e01e      	b.n	c964 <discovery_callback+0x84>
	switch (params->type) {
    c926:	2b05      	cmp	r3, #5
    c928:	d1f1      	bne.n	c90e <discovery_callback+0x2e>
	if (!attr) {
    c92a:	2900      	cmp	r1, #0
    c92c:	f040 8081 	bne.w	ca32 <discovery_callback+0x152>
		if (dm->cur_attr_id > 1) {
    c930:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
    c934:	2b01      	cmp	r3, #1
    c936:	d979      	bls.n	ca2c <discovery_callback+0x14c>
				dm->attrs[0].handle + 1;
    c938:	8c33      	ldrh	r3, [r6, #32]
			int err = bt_gatt_discover(dm->conn,
    c93a:	f106 0108 	add.w	r1, r6, #8
				dm->attrs[0].handle + 1;
    c93e:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    c940:	8233      	strh	r3, [r6, #16]
			dm->discover_params.type =
    c942:	2303      	movs	r3, #3
    c944:	7633      	strb	r3, [r6, #24]
			int err = bt_gatt_discover(dm->conn,
    c946:	f007 feff 	bl	14748 <bt_gatt_discover>
			if (err) {
    c94a:	4604      	mov	r4, r0
    c94c:	b150      	cbz	r0, c964 <discovery_callback+0x84>
				LOG_ERR("Characteristic discover failed,"
    c94e:	4602      	mov	r2, r0
    c950:	2145      	movs	r1, #69	; 0x45
    c952:	4862      	ldr	r0, [pc, #392]	; (cadc <discovery_callback+0x1fc>)
    c954:	f00e f8ae 	bl	1aab4 <printk>
				discovery_complete_error(dm, err);
    c958:	4620      	mov	r0, r4
    c95a:	e7ce      	b.n	c8fa <discovery_callback+0x1a>
	if (!attr) {
    c95c:	b921      	cbnz	r1, c968 <discovery_callback+0x88>
		discovery_complete_not_found(dm);
    c95e:	4630      	mov	r0, r6
    c960:	f00e fc9c 	bl	1b29c <discovery_complete_not_found>
		break;
	}

	return BT_GATT_ITER_STOP;
    c964:	2400      	movs	r4, #0
    c966:	e04a      	b.n	c9fe <discovery_callback+0x11e>
	struct bt_gatt_service_val *service_val = attr->user_data;
    c968:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
    c96c:	4628      	mov	r0, r5
    c96e:	2108      	movs	r1, #8
    c970:	f7ff ff46 	bl	c800 <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    c974:	2400      	movs	r4, #0
    c976:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    c97a:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    c97c:	4669      	mov	r1, sp
    c97e:	6828      	ldr	r0, [r5, #0]
    c980:	f88d 4000 	strb.w	r4, [sp]
    c984:	f8ad 3002 	strh.w	r3, [sp, #2]
    c988:	f00f fb4d 	bl	1c026 <bt_uuid_cmp>
    c98c:	b1a8      	cbz	r0, c9ba <discovery_callback+0xda>
    c98e:	f642 0301 	movw	r3, #10241	; 0x2801
    c992:	6828      	ldr	r0, [r5, #0]
    c994:	a901      	add	r1, sp, #4
    c996:	f88d 4004 	strb.w	r4, [sp, #4]
    c99a:	f8ad 3006 	strh.w	r3, [sp, #6]
    c99e:	f00f fb42 	bl	1c026 <bt_uuid_cmp>
    c9a2:	b150      	cbz	r0, c9ba <discovery_callback+0xda>
    c9a4:	494b      	ldr	r1, [pc, #300]	; (cad4 <discovery_callback+0x1f4>)
    c9a6:	484c      	ldr	r0, [pc, #304]	; (cad8 <discovery_callback+0x1f8>)
    c9a8:	f240 1217 	movw	r2, #279	; 0x117
    c9ac:	f00e f882 	bl	1aab4 <printk>
    c9b0:	f240 1117 	movw	r1, #279	; 0x117
    c9b4:	4847      	ldr	r0, [pc, #284]	; (cad4 <discovery_callback+0x1f4>)
    c9b6:	f00e fb23 	bl	1b000 <assert_post_action>
	if (!cur_attr) {
    c9ba:	b937      	cbnz	r7, c9ca <discovery_callback+0xea>
		LOG_ERR("Not enough memory for service attribute.");
    c9bc:	4848      	ldr	r0, [pc, #288]	; (cae0 <discovery_callback+0x200>)
    c9be:	2145      	movs	r1, #69	; 0x45
    c9c0:	f00e f878 	bl	1aab4 <printk>
		discovery_complete_error(dm, -ENOMEM);
    c9c4:	f06f 000b 	mvn.w	r0, #11
    c9c8:	e797      	b.n	c8fa <discovery_callback+0x1a>
		bt_gatt_dm_attr_service_val(cur_attr);
    c9ca:	4638      	mov	r0, r7
    c9cc:	f00e fc7a 	bl	1b2c4 <bt_gatt_dm_attr_service_val>
    c9d0:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    c9d2:	2208      	movs	r2, #8
    c9d4:	4641      	mov	r1, r8
    c9d6:	f00f fab1 	bl	1bf3c <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    c9da:	6828      	ldr	r0, [r5, #0]
    c9dc:	f7ff ff5c 	bl	c898 <uuid_store.constprop.0>
    c9e0:	4604      	mov	r4, r0
    c9e2:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    c9e4:	b930      	cbnz	r0, c9f4 <discovery_callback+0x114>
		LOG_ERR("Not enough memory for service attribute data.");
    c9e6:	2145      	movs	r1, #69	; 0x45
    c9e8:	483e      	ldr	r0, [pc, #248]	; (cae4 <discovery_callback+0x204>)
    c9ea:	f00e f863 	bl	1aab4 <printk>
		discovery_complete_error(dm, -ENOMEM);
    c9ee:	f06f 000b 	mvn.w	r0, #11
    c9f2:	e058      	b.n	caa6 <discovery_callback+0x1c6>
	if (cur_attr->handle == cur_service_val->end_handle) {
    c9f4:	88bb      	ldrh	r3, [r7, #4]
    c9f6:	88aa      	ldrh	r2, [r5, #4]
    c9f8:	4293      	cmp	r3, r2
    c9fa:	d104      	bne.n	ca06 <discovery_callback+0x126>
		return BT_GATT_ITER_CONTINUE;
    c9fc:	2401      	movs	r4, #1
}
    c9fe:	4620      	mov	r0, r4
    ca00:	b002      	add	sp, #8
    ca02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    ca06:	2105      	movs	r1, #5
	dm->discover_params.uuid         = NULL;
    ca08:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    ca0a:	7631      	strb	r1, [r6, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    ca0c:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    ca0e:	4936      	ldr	r1, [pc, #216]	; (cae8 <discovery_callback+0x208>)
    ca10:	6830      	ldr	r0, [r6, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    ca12:	82f2      	strh	r2, [r6, #22]
	dm->discover_params.uuid         = NULL;
    ca14:	60b4      	str	r4, [r6, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    ca16:	8233      	strh	r3, [r6, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    ca18:	f007 fe96 	bl	14748 <bt_gatt_discover>
	if (err) {
    ca1c:	4602      	mov	r2, r0
    ca1e:	2800      	cmp	r0, #0
    ca20:	d0a0      	beq.n	c964 <discovery_callback+0x84>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    ca22:	2145      	movs	r1, #69	; 0x45
    ca24:	4831      	ldr	r0, [pc, #196]	; (caec <discovery_callback+0x20c>)
		LOG_ERR("Not enough memory for next attribute descriptor"
    ca26:	f00e f845 	bl	1aab4 <printk>
		discovery_complete_error(dm, -ENOMEM);
    ca2a:	e7e0      	b.n	c9ee <discovery_callback+0x10e>
			discovery_complete(dm);
    ca2c:	f7ff feba 	bl	c7a4 <discovery_complete.constprop.0>
    ca30:	e798      	b.n	c964 <discovery_callback+0x84>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    ca32:	2400      	movs	r4, #0
    ca34:	f642 0303 	movw	r3, #10243	; 0x2803
    ca38:	6828      	ldr	r0, [r5, #0]
    ca3a:	a901      	add	r1, sp, #4
    ca3c:	f88d 4004 	strb.w	r4, [sp, #4]
    ca40:	f8ad 3006 	strh.w	r3, [sp, #6]
    ca44:	f00f faef 	bl	1c026 <bt_uuid_cmp>
    ca48:	b950      	cbnz	r0, ca60 <discovery_callback+0x180>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    ca4a:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    ca4c:	4628      	mov	r0, r5
    ca4e:	f7ff fed7 	bl	c800 <attr_store.constprop.0>
    ca52:	4604      	mov	r4, r0
	if (!cur_attr) {
    ca54:	2800      	cmp	r0, #0
    ca56:	d1d1      	bne.n	c9fc <discovery_callback+0x11c>
		LOG_ERR("Not enough memory for next attribute descriptor"
    ca58:	2145      	movs	r1, #69	; 0x45
    ca5a:	8a2a      	ldrh	r2, [r5, #16]
    ca5c:	4824      	ldr	r0, [pc, #144]	; (caf0 <discovery_callback+0x210>)
    ca5e:	e7e2      	b.n	ca26 <discovery_callback+0x146>
		cur_attr = attr_store(dm, attr, 0);
    ca60:	4621      	mov	r1, r4
    ca62:	e7f3      	b.n	ca4c <discovery_callback+0x16c>
	if (!attr) {
    ca64:	2900      	cmp	r1, #0
    ca66:	d0e1      	beq.n	ca2c <discovery_callback+0x14c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    ca68:	2300      	movs	r3, #0
    ca6a:	f88d 3004 	strb.w	r3, [sp, #4]
    ca6e:	f642 0303 	movw	r3, #10243	; 0x2803
    ca72:	6828      	ldr	r0, [r5, #0]
    ca74:	a901      	add	r1, sp, #4
    ca76:	f8ad 3006 	strh.w	r3, [sp, #6]
    ca7a:	f00f fad4 	bl	1c026 <bt_uuid_cmp>
    ca7e:	b150      	cbz	r0, ca96 <discovery_callback+0x1b6>
    ca80:	4914      	ldr	r1, [pc, #80]	; (cad4 <discovery_callback+0x1f4>)
    ca82:	4815      	ldr	r0, [pc, #84]	; (cad8 <discovery_callback+0x1f8>)
    ca84:	f44f 72c0 	mov.w	r2, #384	; 0x180
    ca88:	f00e f814 	bl	1aab4 <printk>
    ca8c:	f44f 71c0 	mov.w	r1, #384	; 0x180
    ca90:	4810      	ldr	r0, [pc, #64]	; (cad4 <discovery_callback+0x1f4>)
    ca92:	f00e fab5 	bl	1b000 <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    ca96:	8a29      	ldrh	r1, [r5, #16]
    ca98:	480c      	ldr	r0, [pc, #48]	; (cacc <discovery_callback+0x1ec>)
    ca9a:	f00e fbbf 	bl	1b21c <attr_find_by_handle>
	if (!cur_attr) {
    ca9e:	4604      	mov	r4, r0
    caa0:	b920      	cbnz	r0, caac <discovery_callback+0x1cc>
		discovery_complete_error(dm, -ESRCH);
    caa2:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    caa6:	f7ff fe91 	bl	c7cc <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    caaa:	e7a8      	b.n	c9fe <discovery_callback+0x11e>
	gatt_chrc = attr->user_data;
    caac:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    caae:	f00e fc29 	bl	1b304 <bt_gatt_dm_attr_chrc_val>
    cab2:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    cab4:	4621      	mov	r1, r4
    cab6:	2208      	movs	r2, #8
    cab8:	f00f fa40 	bl	1bf3c <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    cabc:	6828      	ldr	r0, [r5, #0]
    cabe:	f7ff feeb 	bl	c898 <uuid_store.constprop.0>
    cac2:	4604      	mov	r4, r0
    cac4:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    cac6:	2800      	cmp	r0, #0
    cac8:	d198      	bne.n	c9fc <discovery_callback+0x11c>
    caca:	e790      	b.n	c9ee <discovery_callback+0x10e>
    cacc:	2000a8cc 	.word	0x2000a8cc
    cad0:	000207ae 	.word	0x000207ae
    cad4:	0002070b 	.word	0x0002070b
    cad8:	0002003d 	.word	0x0002003d
    cadc:	00020862 	.word	0x00020862
    cae0:	000207d5 	.word	0x000207d5
    cae4:	00020803 	.word	0x00020803
    cae8:	2000a8d4 	.word	0x2000a8d4
    caec:	00020836 	.word	0x00020836
    caf0:	00020892 	.word	0x00020892

0000caf4 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    caf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    caf8:	4606      	mov	r6, r0
    cafa:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    cafc:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
    cafe:	f8df 8044 	ldr.w	r8, [pc, #68]	; cb44 <bt_gatt_dm_char_by_uuid+0x50>
    cb02:	f8df 9044 	ldr.w	r9, [pc, #68]	; cb48 <bt_gatt_dm_char_by_uuid+0x54>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    cb06:	4621      	mov	r1, r4
    cb08:	4630      	mov	r0, r6
    cb0a:	f00e fc13 	bl	1b334 <bt_gatt_dm_char_next>
    cb0e:	4604      	mov	r4, r0
    cb10:	b1a0      	cbz	r0, cb3c <bt_gatt_dm_char_by_uuid+0x48>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    cb12:	f00e fbf7 	bl	1b304 <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
    cb16:	4605      	mov	r5, r0
    cb18:	b950      	cbnz	r0, cb30 <bt_gatt_dm_char_by_uuid+0x3c>
    cb1a:	4641      	mov	r1, r8
    cb1c:	4648      	mov	r0, r9
    cb1e:	f240 12fb 	movw	r2, #507	; 0x1fb
    cb22:	f00d ffc7 	bl	1aab4 <printk>
    cb26:	f240 11fb 	movw	r1, #507	; 0x1fb
    cb2a:	4640      	mov	r0, r8
    cb2c:	f00e fa68 	bl	1b000 <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    cb30:	4638      	mov	r0, r7
    cb32:	6829      	ldr	r1, [r5, #0]
    cb34:	f00f fa77 	bl	1c026 <bt_uuid_cmp>
    cb38:	2800      	cmp	r0, #0
    cb3a:	d1e4      	bne.n	cb06 <bt_gatt_dm_char_by_uuid+0x12>
			return curr;
		}
	}

	return NULL;
}
    cb3c:	4620      	mov	r0, r4
    cb3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cb42:	bf00      	nop
    cb44:	0002070b 	.word	0x0002070b
    cb48:	0002003d 	.word	0x0002003d

0000cb4c <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    cb4c:	b570      	push	{r4, r5, r6, lr}
    cb4e:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    cb50:	4608      	mov	r0, r1
    cb52:	b119      	cbz	r1, cb5c <bt_gatt_dm_start+0x10>
    cb54:	7809      	ldrb	r1, [r1, #0]
    cb56:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    cb5a:	d139      	bne.n	cbd0 <bt_gatt_dm_start+0x84>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    cb5c:	2a00      	cmp	r2, #0
    cb5e:	d037      	beq.n	cbd0 <bt_gatt_dm_start+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cb60:	4c1e      	ldr	r4, [pc, #120]	; (cbdc <bt_gatt_dm_start+0x90>)
    cb62:	f504 769c 	add.w	r6, r4, #312	; 0x138
    cb66:	e8d6 1fef 	ldaex	r1, [r6]
    cb6a:	f041 0c01 	orr.w	ip, r1, #1
    cb6e:	e8c6 cfee 	stlex	lr, ip, [r6]
    cb72:	f1be 0f00 	cmp.w	lr, #0
    cb76:	d1f6      	bne.n	cb66 <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    cb78:	f011 0101 	ands.w	r1, r1, #1
    cb7c:	d12b      	bne.n	cbd6 <bt_gatt_dm_start+0x8a>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    cb7e:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
    cb82:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    cb86:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    cb8a:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    cb8e:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    cb92:	b108      	cbz	r0, cb98 <bt_gatt_dm_start+0x4c>
    cb94:	f7ff fe80 	bl	c898 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    cb98:	4b11      	ldr	r3, [pc, #68]	; (cbe0 <bt_gatt_dm_start+0x94>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    cb9a:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
    cb9c:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    cb9e:	2301      	movs	r3, #1
    cba0:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    cba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cba6:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    cba8:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
    cbaa:	4628      	mov	r0, r5
    cbac:	490d      	ldr	r1, [pc, #52]	; (cbe4 <bt_gatt_dm_start+0x98>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    cbae:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    cbb0:	f007 fdca 	bl	14748 <bt_gatt_discover>
	if (err) {
    cbb4:	4604      	mov	r4, r0
    cbb6:	b148      	cbz	r0, cbcc <bt_gatt_dm_start+0x80>
		LOG_ERR("Discover failed, error: %d.", err);
    cbb8:	4602      	mov	r2, r0
    cbba:	2145      	movs	r1, #69	; 0x45
    cbbc:	480a      	ldr	r0, [pc, #40]	; (cbe8 <bt_gatt_dm_start+0x9c>)
    cbbe:	f00d ff79 	bl	1aab4 <printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    cbc2:	f06f 0101 	mvn.w	r1, #1
    cbc6:	4809      	ldr	r0, [pc, #36]	; (cbec <bt_gatt_dm_start+0xa0>)
    cbc8:	f00e fb5d 	bl	1b286 <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    cbcc:	4620      	mov	r0, r4
    cbce:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    cbd0:	f06f 0415 	mvn.w	r4, #21
    cbd4:	e7fa      	b.n	cbcc <bt_gatt_dm_start+0x80>
		return -EALREADY;
    cbd6:	f06f 0444 	mvn.w	r4, #68	; 0x44
    cbda:	e7f7      	b.n	cbcc <bt_gatt_dm_start+0x80>
    cbdc:	2000a8cc 	.word	0x2000a8cc
    cbe0:	0000c8e1 	.word	0x0000c8e1
    cbe4:	2000a8d4 	.word	0x2000a8d4
    cbe8:	000208d5 	.word	0x000208d5
    cbec:	2000aa04 	.word	0x2000aa04

0000cbf0 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    cbf0:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    cbf2:	4c06      	ldr	r4, [pc, #24]	; (cc0c <scan_default_param_set+0x1c>)
{
    cbf4:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    cbf6:	ad01      	add	r5, sp, #4
    cbf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    cbfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cbfc:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    cbfe:	4c04      	ldr	r4, [pc, #16]	; (cc10 <scan_default_param_set+0x20>)
    cc00:	ad01      	add	r5, sp, #4
    cc02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cc04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cc06:	6026      	str	r6, [r4, #0]
}
    cc08:	b006      	add	sp, #24
    cc0a:	bd70      	pop	{r4, r5, r6, pc}
    cc0c:	0001e9b0 	.word	0x0001e9b0
    cc10:	2000aa78 	.word	0x2000aa78

0000cc14 <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
    cc14:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
    cc18:	4b02      	ldr	r3, [pc, #8]	; (cc24 <scan_default_conn_param_set+0x10>)
    cc1a:	4903      	ldr	r1, [pc, #12]	; (cc28 <scan_default_conn_param_set+0x14>)
    cc1c:	e9c3 121d 	strd	r1, r2, [r3, #116]	; 0x74
}
    cc20:	4770      	bx	lr
    cc22:	bf00      	nop
    cc24:	2000aa18 	.word	0x2000aa18
    cc28:	00280018 	.word	0x00280018

0000cc2c <uuid_check>:
{
    cc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_scan.scan_filters.uuid.enabled;
    cc30:	4c29      	ldr	r4, [pc, #164]	; (ccd8 <uuid_check+0xac>)
{
    cc32:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    cc34:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
{
    cc38:	4606      	mov	r6, r0
    cc3a:	9100      	str	r1, [sp, #0]
    cc3c:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    cc3e:	2b00      	cmp	r3, #0
    cc40:	d03c      	beq.n	ccbc <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
    cc42:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
    cc44:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
    cc46:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    cc48:	f894 b058 	ldrb.w	fp, [r4, #88]	; 0x58
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    cc4c:	f894 a050 	ldrb.w	sl, [r4, #80]	; 0x50
	uint8_t data_len = data->data_len;
    cc50:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    cc52:	4557      	cmp	r7, sl
    cc54:	d30e      	bcc.n	cc74 <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
    cc56:	f886 5044 	strb.w	r5, [r6, #68]	; 0x44
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    cc5a:	f1bb 0f00 	cmp.w	fp, #0
    cc5e:	d02b      	beq.n	ccb8 <uuid_check+0x8c>
    cc60:	45aa      	cmp	sl, r5
    cc62:	d12b      	bne.n	ccbc <uuid_check+0x90>
			control->filter_match_cnt++;
    cc64:	7873      	ldrb	r3, [r6, #1]
    cc66:	3301      	adds	r3, #1
    cc68:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
    cc6a:	2301      	movs	r3, #1
    cc6c:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
    cc70:	70b3      	strb	r3, [r6, #2]
}
    cc72:	e023      	b.n	ccbc <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    cc74:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    cc78:	9b00      	ldr	r3, [sp, #0]
    cc7a:	9a03      	ldr	r2, [sp, #12]
    cc7c:	685b      	ldr	r3, [r3, #4]
    cc7e:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    cc80:	4b16      	ldr	r3, [pc, #88]	; (ccdc <uuid_check+0xb0>)
    cc82:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    cc86:	9b01      	ldr	r3, [sp, #4]
    cc88:	4599      	cmp	r9, r3
    cc8a:	d305      	bcc.n	cc98 <uuid_check+0x6c>
		} else if (all_filters_mode) {
    cc8c:	f1bb 0f00 	cmp.w	fp, #0
    cc90:	d1e1      	bne.n	cc56 <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
    cc92:	3701      	adds	r7, #1
    cc94:	3418      	adds	r4, #24
    cc96:	e7dc      	b.n	cc52 <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    cc98:	9b02      	ldr	r3, [sp, #8]
    cc9a:	4642      	mov	r2, r8
    cc9c:	eb03 0109 	add.w	r1, r3, r9
    cca0:	a805      	add	r0, sp, #20
    cca2:	f00f f9ee 	bl	1c082 <bt_uuid_create>
    cca6:	2800      	cmp	r0, #0
    cca8:	d0f0      	beq.n	cc8c <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    ccaa:	68a1      	ldr	r1, [r4, #8]
    ccac:	a805      	add	r0, sp, #20
    ccae:	f00f f9ba 	bl	1c026 <bt_uuid_cmp>
    ccb2:	b130      	cbz	r0, ccc2 <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    ccb4:	44c1      	add	r9, r8
    ccb6:	e7e6      	b.n	cc86 <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    ccb8:	2d00      	cmp	r5, #0
    ccba:	d1d3      	bne.n	cc64 <uuid_check+0x38>
}
    ccbc:	b00b      	add	sp, #44	; 0x2c
    ccbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
    ccc2:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    ccc4:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
    ccc8:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    ccca:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
    cccc:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    ccce:	f1bb 0f00 	cmp.w	fp, #0
    ccd2:	d1de      	bne.n	cc92 <uuid_check+0x66>
    ccd4:	e7bf      	b.n	cc56 <uuid_check+0x2a>
    ccd6:	bf00      	nop
    ccd8:	2000aa18 	.word	0x2000aa18
    ccdc:	00020910 	.word	0x00020910

0000cce0 <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    cce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    cce4:	7803      	ldrb	r3, [r0, #0]
{
    cce6:	4605      	mov	r5, r0
	switch (data->type) {
    cce8:	2b19      	cmp	r3, #25
{
    ccea:	460c      	mov	r4, r1
	switch (data->type) {
    ccec:	d812      	bhi.n	cd14 <adv_data_found+0x34>
    ccee:	2b01      	cmp	r3, #1
    ccf0:	d912      	bls.n	cd18 <adv_data_found+0x38>
    ccf2:	3b02      	subs	r3, #2
    ccf4:	2b17      	cmp	r3, #23
    ccf6:	d80f      	bhi.n	cd18 <adv_data_found+0x38>
    ccf8:	e8df f003 	tbb	[pc, r3]
    ccfc:	80807a7a 	.word	0x80807a7a
    cd00:	11318282 	.word	0x11318282
    cd04:	0e0e0e0e 	.word	0x0e0e0e0e
    cd08:	0e0e0e0e 	.word	0x0e0e0e0e
    cd0c:	0e0e0e0e 	.word	0x0e0e0e0e
    cd10:	560e0e0e 	.word	0x560e0e0e
    cd14:	2bff      	cmp	r3, #255	; 0xff
    cd16:	d075      	beq.n	ce04 <adv_data_found+0x124>
	default:
		break;
	}

	return true;
}
    cd18:	2001      	movs	r0, #1
    cd1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_scan.scan_filters.name.enabled;
    cd1e:	4f4e      	ldr	r7, [pc, #312]	; (ce58 <adv_data_found+0x178>)
	if (is_name_filter_enabled()) {
    cd20:	787b      	ldrb	r3, [r7, #1]
    cd22:	2b00      	cmp	r3, #0
    cd24:	d0f8      	beq.n	cd18 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    cd26:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.name.cnt;
    cd28:	f897 a000 	ldrb.w	sl, [r7]
	uint8_t data_len = data->data_len;
    cd2c:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    cd30:	4556      	cmp	r6, sl
    cd32:	d2f1      	bcs.n	cd18 <adv_data_found+0x38>
		if (adv_name_cmp(data->data,
    cd34:	eb07 1946 	add.w	r9, r7, r6, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    cd38:	4642      	mov	r2, r8
    cd3a:	4648      	mov	r0, r9
    cd3c:	6869      	ldr	r1, [r5, #4]
    cd3e:	f00f f8db 	bl	1bef8 <strncmp>
		if (adv_name_cmp(data->data,
    cd42:	b950      	cbnz	r0, cd5a <adv_data_found+0x7a>
			control->filter_match_cnt++;
    cd44:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    cd46:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
    cd4a:	3301      	adds	r3, #1
    cd4c:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    cd4e:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    cd50:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
    cd54:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
    cd56:	70a3      	strb	r3, [r4, #2]
    cd58:	e7de      	b.n	cd18 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    cd5a:	3601      	adds	r6, #1
    cd5c:	e7e8      	b.n	cd30 <adv_data_found+0x50>
	return bt_scan.scan_filters.short_name.enabled;
    cd5e:	4e3e      	ldr	r6, [pc, #248]	; (ce58 <adv_data_found+0x178>)
	if (is_short_name_filter_enabled()) {
    cd60:	78f3      	ldrb	r3, [r6, #3]
    cd62:	2b00      	cmp	r3, #0
    cd64:	d0d8      	beq.n	cd18 <adv_data_found+0x38>
	uint8_t data_len = data->data_len;
    cd66:	78b3      	ldrb	r3, [r6, #2]
    cd68:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    cd6c:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    cd70:	18f7      	adds	r7, r6, r3
    cd72:	42be      	cmp	r6, r7
    cd74:	d0d0      	beq.n	cd18 <adv_data_found+0x38>
	if ((data_len >= short_name_min_len) &&
    cd76:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    cd7a:	4543      	cmp	r3, r8
    cd7c:	d812      	bhi.n	cda4 <adv_data_found+0xc4>
    cd7e:	f106 0902 	add.w	r9, r6, #2
	    (strncmp(target_name, data, data_len) == 0)) {
    cd82:	4642      	mov	r2, r8
    cd84:	4648      	mov	r0, r9
    cd86:	6869      	ldr	r1, [r5, #4]
    cd88:	f00f f8b6 	bl	1bef8 <strncmp>
	if ((data_len >= short_name_min_len) &&
    cd8c:	b950      	cbnz	r0, cda4 <adv_data_found+0xc4>
			control->filter_match_cnt++;
    cd8e:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.short_name.name =
    cd90:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
			control->filter_match_cnt++;
    cd94:	3301      	adds	r3, #1
    cd96:	7063      	strb	r3, [r4, #1]
			control->filter_status.short_name.match = true;
    cd98:	2301      	movs	r3, #1
			control->filter_status.short_name.len = data_len;
    cd9a:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
			control->filter_status.short_name.match = true;
    cd9e:	f884 3020 	strb.w	r3, [r4, #32]
			control->filter_match = true;
    cda2:	e7d8      	b.n	cd56 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    cda4:	3621      	adds	r6, #33	; 0x21
    cda6:	e7e4      	b.n	cd72 <adv_data_found+0x92>
	return bt_scan.scan_filters.appearance.enabled;
    cda8:	482b      	ldr	r0, [pc, #172]	; (ce58 <adv_data_found+0x178>)
	if (is_appearance_filter_enabled()) {
    cdaa:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
    cdae:	2b00      	cmp	r3, #0
    cdb0:	d0b2      	beq.n	cd18 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    cdb2:	2300      	movs	r3, #0
	const uint8_t counter =
    cdb4:	f890 6054 	ldrb.w	r6, [r0, #84]	; 0x54
	uint8_t data_len = data->data_len;
    cdb8:	786f      	ldrb	r7, [r5, #1]
	for (size_t i = 0; i < counter; i++) {
    cdba:	42b3      	cmp	r3, r6
    cdbc:	d2ac      	bcs.n	cd18 <adv_data_found+0x38>
	if (data_len != sizeof(uint16_t)) {
    cdbe:	2f02      	cmp	r7, #2
    cdc0:	d114      	bne.n	cdec <adv_data_found+0x10c>
	if (decoded_appearance == *appearance) {
    cdc2:	686a      	ldr	r2, [r5, #4]
    cdc4:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    cdc8:	8812      	ldrh	r2, [r2, #0]
    cdca:	f8b1 1054 	ldrh.w	r1, [r1, #84]	; 0x54
    cdce:	ba52      	rev16	r2, r2
    cdd0:	b292      	uxth	r2, r2
    cdd2:	4291      	cmp	r1, r2
    cdd4:	d10a      	bne.n	cdec <adv_data_found+0x10c>
		if (find_appearance(data->data,
    cdd6:	332a      	adds	r3, #42	; 0x2a
    cdd8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
			control->filter_status.appearance.appearance =
    cddc:	64e3      	str	r3, [r4, #76]	; 0x4c
			control->filter_match_cnt++;
    cdde:	7863      	ldrb	r3, [r4, #1]
    cde0:	3301      	adds	r3, #1
    cde2:	7063      	strb	r3, [r4, #1]
			control->filter_status.appearance.match = true;
    cde4:	2301      	movs	r3, #1
    cde6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			control->filter_match = true;
    cdea:	e7b4      	b.n	cd56 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    cdec:	3301      	adds	r3, #1
    cdee:	e7e4      	b.n	cdba <adv_data_found+0xda>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
    cdf0:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    cdf2:	4629      	mov	r1, r5
    cdf4:	4620      	mov	r0, r4
    cdf6:	f7ff ff19 	bl	cc2c <uuid_check>
		break;
    cdfa:	e78d      	b.n	cd18 <adv_data_found+0x38>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
    cdfc:	2201      	movs	r2, #1
    cdfe:	e7f8      	b.n	cdf2 <adv_data_found+0x112>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    ce00:	2202      	movs	r2, #2
    ce02:	e7f6      	b.n	cdf2 <adv_data_found+0x112>
	return bt_scan.scan_filters.manufacturer_data.enabled;
    ce04:	f8df 8050 	ldr.w	r8, [pc, #80]	; ce58 <adv_data_found+0x178>
	if (is_manufacturer_data_filter_enabled()) {
    ce08:	f898 3057 	ldrb.w	r3, [r8, #87]	; 0x57
    ce0c:	2b00      	cmp	r3, #0
    ce0e:	d083      	beq.n	cd18 <adv_data_found+0x38>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    ce10:	4647      	mov	r7, r8
	for (size_t i = 0; i < counter; i++) {
    ce12:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    ce14:	f817 9f56 	ldrb.w	r9, [r7, #86]!
	for (size_t i = 0; i < counter; i++) {
    ce18:	454e      	cmp	r6, r9
    ce1a:	f4bf af7d 	bcs.w	cd18 <adv_data_found+0x38>
		if (adv_manufacturer_data_cmp(data->data,
    ce1e:	f897 2020 	ldrb.w	r2, [r7, #32]
	if (target_data_len > data_len) {
    ce22:	786b      	ldrb	r3, [r5, #1]
    ce24:	4293      	cmp	r3, r2
    ce26:	d313      	bcc.n	ce50 <adv_data_found+0x170>
	if (memcmp(target_data, data, target_data_len) != 0) {
    ce28:	4638      	mov	r0, r7
    ce2a:	6869      	ldr	r1, [r5, #4]
    ce2c:	f00f f875 	bl	1bf1a <memcmp>
    ce30:	b970      	cbnz	r0, ce50 <adv_data_found+0x170>
				md_filter->manufacturer_data[i].data_len;
    ce32:	eb06 1646 	add.w	r6, r6, r6, lsl #5
			control->filter_status.manufacturer_data.data =
    ce36:	6567      	str	r7, [r4, #84]	; 0x54
				md_filter->manufacturer_data[i].data_len;
    ce38:	4446      	add	r6, r8
			control->filter_status.manufacturer_data.len =
    ce3a:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    ce3e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
			control->filter_match_cnt++;
    ce42:	7863      	ldrb	r3, [r4, #1]
    ce44:	3301      	adds	r3, #1
    ce46:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    ce48:	2301      	movs	r3, #1
    ce4a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    ce4e:	e782      	b.n	cd56 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    ce50:	3601      	adds	r6, #1
    ce52:	3721      	adds	r7, #33	; 0x21
    ce54:	e7e0      	b.n	ce18 <adv_data_found+0x138>
    ce56:	bf00      	nop
    ce58:	2000aa18 	.word	0x2000aa18

0000ce5c <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    ce5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce5e:	4605      	mov	r5, r0
    ce60:	460e      	mov	r6, r1
    ce62:	4617      	mov	r7, r2
	return list->head;
    ce64:	4b08      	ldr	r3, [pc, #32]	; (ce88 <notify_filter_matched.constprop.0+0x2c>)
    ce66:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    ce68:	b10c      	cbz	r4, ce6e <notify_filter_matched.constprop.0+0x12>
    ce6a:	3c04      	subs	r4, #4
    ce6c:	b904      	cbnz	r4, ce70 <notify_filter_matched.constprop.0+0x14>
}
    ce6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
    ce70:	6823      	ldr	r3, [r4, #0]
    ce72:	681b      	ldr	r3, [r3, #0]
    ce74:	b11b      	cbz	r3, ce7e <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
    ce76:	463a      	mov	r2, r7
    ce78:	4631      	mov	r1, r6
    ce7a:	4628      	mov	r0, r5
    ce7c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    ce7e:	1d23      	adds	r3, r4, #4
    ce80:	d0f5      	beq.n	ce6e <notify_filter_matched.constprop.0+0x12>
	return node->next;
    ce82:	6864      	ldr	r4, [r4, #4]
    ce84:	e7f0      	b.n	ce68 <notify_filter_matched.constprop.0+0xc>
    ce86:	bf00      	nop
    ce88:	2000aa94 	.word	0x2000aa94

0000ce8c <bt_scan_cb_register>:
	if (!cb) {
    ce8c:	b150      	cbz	r0, cea4 <bt_scan_cb_register+0x18>
	parent->next = child;
    ce8e:	2300      	movs	r3, #0
    ce90:	6043      	str	r3, [r0, #4]
	return list->tail;
    ce92:	4b05      	ldr	r3, [pc, #20]	; (cea8 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    ce94:	1d02      	adds	r2, r0, #4
    ce96:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    ce98:	b911      	cbnz	r1, cea0 <bt_scan_cb_register+0x14>
	list->head = node;
    ce9a:	e9c3 2200 	strd	r2, r2, [r3]
}
    ce9e:	4770      	bx	lr
	parent->next = child;
    cea0:	600a      	str	r2, [r1, #0]
	list->tail = node;
    cea2:	605a      	str	r2, [r3, #4]
}
    cea4:	4770      	bx	lr
    cea6:	bf00      	nop
    cea8:	2000aa94 	.word	0x2000aa94

0000ceac <bt_scan_filter_add>:
{
    ceac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ceb0:	4604      	mov	r4, r0
	if (!data) {
    ceb2:	460d      	mov	r5, r1
    ceb4:	2900      	cmp	r1, #0
    ceb6:	d06a      	beq.n	cf8e <bt_scan_filter_add+0xe2>
	return z_impl_k_mutex_lock(mutex, timeout);
    ceb8:	f04f 32ff 	mov.w	r2, #4294967295
    cebc:	f04f 33ff 	mov.w	r3, #4294967295
    cec0:	4834      	ldr	r0, [pc, #208]	; (cf94 <bt_scan_filter_add+0xe8>)
    cec2:	f00b f96b 	bl	1819c <z_impl_k_mutex_lock>
	switch (type) {
    cec6:	2c03      	cmp	r4, #3
    cec8:	d006      	beq.n	ced8 <bt_scan_filter_add+0x2c>
    ceca:	d902      	bls.n	ced2 <bt_scan_filter_add+0x26>
    cecc:	3c04      	subs	r4, #4
    cece:	2c01      	cmp	r4, #1
    ced0:	d85a      	bhi.n	cf88 <bt_scan_filter_add+0xdc>
		return -ENOMEM;
    ced2:	f06f 060b 	mvn.w	r6, #11
    ced6:	e020      	b.n	cf1a <bt_scan_filter_add+0x6e>
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    ced8:	4f2f      	ldr	r7, [pc, #188]	; (cf98 <bt_scan_filter_add+0xec>)
    ceda:	f897 4050 	ldrb.w	r4, [r7, #80]	; 0x50
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    cede:	2c02      	cmp	r4, #2
    cee0:	d8f7      	bhi.n	ced2 <bt_scan_filter_add+0x26>
    cee2:	46b9      	mov	r9, r7
	for (size_t i = 0; i < counter; i++) {
    cee4:	f04f 0800 	mov.w	r8, #0
    cee8:	45a0      	cmp	r8, r4
    ceea:	d31c      	bcc.n	cf26 <bt_scan_filter_add+0x7a>
	switch (uuid->type) {
    ceec:	782b      	ldrb	r3, [r5, #0]
    ceee:	2b01      	cmp	r3, #1
    cef0:	d026      	beq.n	cf40 <bt_scan_filter_add+0x94>
    cef2:	2b02      	cmp	r3, #2
    cef4:	d031      	beq.n	cf5a <bt_scan_filter_add+0xae>
    cef6:	2b00      	cmp	r3, #0
    cef8:	d146      	bne.n	cf88 <bt_scan_filter_add+0xdc>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    cefa:	4b28      	ldr	r3, [pc, #160]	; (cf9c <bt_scan_filter_add+0xf0>)
    cefc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cf00:	6828      	ldr	r0, [r5, #0]
    cf02:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    cf06:	1d11      	adds	r1, r2, #4
    cf08:	6050      	str	r0, [r2, #4]
		uuid_filter[counter].uuid =
    cf0a:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	return 0;
    cf0e:	2600      	movs	r6, #0
	bt_scan.scan_filters.uuid.cnt++;
    cf10:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    cf14:	3301      	adds	r3, #1
    cf16:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	return z_impl_k_mutex_unlock(mutex);
    cf1a:	481e      	ldr	r0, [pc, #120]	; (cf94 <bt_scan_filter_add+0xe8>)
    cf1c:	f00b fa0a 	bl	18334 <z_impl_k_mutex_unlock>
}
    cf20:	4630      	mov	r0, r6
    cf22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (bt_uuid_cmp(uuid_filter[i].uuid, uuid) == 0) {
    cf26:	f8d9 0008 	ldr.w	r0, [r9, #8]
    cf2a:	4629      	mov	r1, r5
    cf2c:	f00f f87b 	bl	1c026 <bt_uuid_cmp>
    cf30:	f109 0918 	add.w	r9, r9, #24
    cf34:	4606      	mov	r6, r0
    cf36:	2800      	cmp	r0, #0
    cf38:	d0ef      	beq.n	cf1a <bt_scan_filter_add+0x6e>
	for (size_t i = 0; i < counter; i++) {
    cf3a:	f108 0801 	add.w	r8, r8, #1
    cf3e:	e7d3      	b.n	cee8 <bt_scan_filter_add+0x3c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    cf40:	4a16      	ldr	r2, [pc, #88]	; (cf9c <bt_scan_filter_add+0xf0>)
    cf42:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cf46:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
    cf4a:	3304      	adds	r3, #4
    cf4c:	e895 0003 	ldmia.w	r5, {r0, r1}
    cf50:	e883 0003 	stmia.w	r3, {r0, r1}
		uuid_filter[counter].uuid =
    cf54:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
		break;
    cf58:	e7d9      	b.n	cf0e <bt_scan_filter_add+0x62>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    cf5a:	4a10      	ldr	r2, [pc, #64]	; (cf9c <bt_scan_filter_add+0xf0>)
    cf5c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cf60:	00e6      	lsls	r6, r4, #3
    cf62:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    cf66:	3404      	adds	r4, #4
    cf68:	46a4      	mov	ip, r4
    cf6a:	f105 0e10 	add.w	lr, r5, #16
    cf6e:	4623      	mov	r3, r4
    cf70:	6828      	ldr	r0, [r5, #0]
    cf72:	6869      	ldr	r1, [r5, #4]
    cf74:	3508      	adds	r5, #8
    cf76:	c303      	stmia	r3!, {r0, r1}
    cf78:	4575      	cmp	r5, lr
    cf7a:	461c      	mov	r4, r3
    cf7c:	d1f7      	bne.n	cf6e <bt_scan_filter_add+0xc2>
    cf7e:	782b      	ldrb	r3, [r5, #0]
    cf80:	7023      	strb	r3, [r4, #0]
		uuid_filter[counter].uuid =
    cf82:	f842 c006 	str.w	ip, [r2, r6]
		break;
    cf86:	e7c2      	b.n	cf0e <bt_scan_filter_add+0x62>
		err = -EINVAL;
    cf88:	f06f 0615 	mvn.w	r6, #21
		break;
    cf8c:	e7c5      	b.n	cf1a <bt_scan_filter_add+0x6e>
		return -EINVAL;
    cf8e:	f06f 0615 	mvn.w	r6, #21
    cf92:	e7c5      	b.n	cf20 <bt_scan_filter_add+0x74>
    cf94:	20008660 	.word	0x20008660
    cf98:	2000aa18 	.word	0x2000aa18
    cf9c:	2000aa20 	.word	0x2000aa20

0000cfa0 <bt_scan_filter_remove_all>:
{
    cfa0:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    cfa2:	4c0c      	ldr	r4, [pc, #48]	; (cfd4 <bt_scan_filter_remove_all+0x34>)
    cfa4:	f04f 32ff 	mov.w	r2, #4294967295
    cfa8:	f04f 33ff 	mov.w	r3, #4294967295
    cfac:	4620      	mov	r0, r4
    cfae:	f00b f8f5 	bl	1819c <z_impl_k_mutex_lock>
	name_filter->cnt = 0;
    cfb2:	2200      	movs	r2, #0
    cfb4:	4b08      	ldr	r3, [pc, #32]	; (cfd8 <bt_scan_filter_remove_all+0x38>)
    cfb6:	701a      	strb	r2, [r3, #0]
	short_name_filter->cnt = 0;
    cfb8:	709a      	strb	r2, [r3, #2]
	addr_filter->cnt = 0;
    cfba:	711a      	strb	r2, [r3, #4]
	uuid_filter->cnt = 0;
    cfbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	appearance_filter->cnt = 0;
    cfc0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	manufacturer_data_filter->cnt = 0;
    cfc4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	return z_impl_k_mutex_unlock(mutex);
    cfc8:	4620      	mov	r0, r4
}
    cfca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cfce:	f00b b9b1 	b.w	18334 <z_impl_k_mutex_unlock>
    cfd2:	bf00      	nop
    cfd4:	20008660 	.word	0x20008660
    cfd8:	2000aa18 	.word	0x2000aa18

0000cfdc <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    cfdc:	2200      	movs	r2, #0
    cfde:	4b05      	ldr	r3, [pc, #20]	; (cff4 <bt_scan_filter_disable+0x18>)
    cfe0:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    cfe2:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    cfe4:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    cfe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	bt_scan.scan_filters.appearance.enabled = false;
    cfea:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    cfee:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
    cff2:	4770      	bx	lr
    cff4:	2000aa18 	.word	0x2000aa18

0000cff8 <bt_scan_filter_enable>:
{
    cff8:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    cffa:	0683      	lsls	r3, r0, #26
    cffc:	d025      	beq.n	d04a <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
    cffe:	f7ff ffed 	bl	cfdc <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    d002:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    d006:	bf18      	it	ne
    d008:	2201      	movne	r2, #1
    d00a:	4b11      	ldr	r3, [pc, #68]	; (d050 <bt_scan_filter_enable+0x58>)
    d00c:	bf18      	it	ne
    d00e:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
    d010:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    d012:	bf44      	itt	mi
    d014:	2201      	movmi	r2, #1
    d016:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    d018:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    d01a:	bf44      	itt	mi
    d01c:	2201      	movmi	r2, #1
    d01e:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
    d020:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    d022:	bf44      	itt	mi
    d024:	2201      	movmi	r2, #1
    d026:	f883 2051 	strbmi.w	r2, [r3, #81]	; 0x51
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    d02a:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    d02c:	bf44      	itt	mi
    d02e:	2201      	movmi	r2, #1
    d030:	f883 2055 	strbmi.w	r2, [r3, #85]	; 0x55
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    d034:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    d036:	bf48      	it	mi
    d038:	2201      	movmi	r2, #1
	return 0;
    d03a:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    d03e:	bf48      	it	mi
    d040:	f883 2057 	strbmi.w	r2, [r3, #87]	; 0x57
	filters->all_mode = match_all;
    d044:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
}
    d048:	bd08      	pop	{r3, pc}
		return -EINVAL;
    d04a:	f06f 0015 	mvn.w	r0, #21
    d04e:	e7fb      	b.n	d048 <bt_scan_filter_enable+0x50>
    d050:	2000aa18 	.word	0x2000aa18

0000d054 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    d054:	b570      	push	{r4, r5, r6, lr}
    d056:	460e      	mov	r6, r1
    d058:	b086      	sub	sp, #24
    d05a:	4605      	mov	r5, r0
	bt_scan_stop();
    d05c:	f00e f9df 	bl	1b41e <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    d060:	4b18      	ldr	r3, [pc, #96]	; (d0c4 <scan_connect_with_target.part.0+0x70>)
    d062:	ac02      	add	r4, sp, #8
    d064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    d066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    d06a:	4621      	mov	r1, r4
    d06c:	ab01      	add	r3, sp, #4
    d06e:	4630      	mov	r0, r6
    d070:	4a15      	ldr	r2, [pc, #84]	; (d0c8 <scan_connect_with_target.part.0+0x74>)
    d072:	f004 fcd3 	bl	11a1c <bt_conn_le_create>
	if (err) {
    d076:	4b15      	ldr	r3, [pc, #84]	; (d0cc <scan_connect_with_target.part.0+0x78>)
		notify_connecting_error(&control->device_info);
    d078:	3508      	adds	r5, #8
	return list->head;
    d07a:	681c      	ldr	r4, [r3, #0]
	if (err) {
    d07c:	b168      	cbz	r0, d09a <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d07e:	b10c      	cbz	r4, d084 <scan_connect_with_target.part.0+0x30>
    d080:	3c04      	subs	r4, #4
    d082:	b90c      	cbnz	r4, d088 <scan_connect_with_target.part.0+0x34>
}
    d084:	b006      	add	sp, #24
    d086:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
    d088:	6823      	ldr	r3, [r4, #0]
    d08a:	689b      	ldr	r3, [r3, #8]
    d08c:	b10b      	cbz	r3, d092 <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
    d08e:	4628      	mov	r0, r5
    d090:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d092:	1d22      	adds	r2, r4, #4
    d094:	d0f6      	beq.n	d084 <scan_connect_with_target.part.0+0x30>
	return node->next;
    d096:	6864      	ldr	r4, [r4, #4]
    d098:	e7f1      	b.n	d07e <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d09a:	b91c      	cbnz	r4, d0a4 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
    d09c:	9801      	ldr	r0, [sp, #4]
    d09e:	f004 faff 	bl	116a0 <bt_conn_unref>
    d0a2:	e7ef      	b.n	d084 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
    d0a4:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d0a6:	3c04      	subs	r4, #4
    d0a8:	2c00      	cmp	r4, #0
    d0aa:	d0f7      	beq.n	d09c <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
    d0ac:	6823      	ldr	r3, [r4, #0]
    d0ae:	68db      	ldr	r3, [r3, #12]
    d0b0:	b113      	cbz	r3, d0b8 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
    d0b2:	4631      	mov	r1, r6
    d0b4:	4628      	mov	r0, r5
    d0b6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d0b8:	1d23      	adds	r3, r4, #4
    d0ba:	d0ef      	beq.n	d09c <scan_connect_with_target.part.0+0x48>
	return node->next;
    d0bc:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d0be:	2c00      	cmp	r4, #0
    d0c0:	d1f1      	bne.n	d0a6 <scan_connect_with_target.part.0+0x52>
    d0c2:	e7eb      	b.n	d09c <scan_connect_with_target.part.0+0x48>
    d0c4:	0001e9c4 	.word	0x0001e9c4
    d0c8:	2000aa8c 	.word	0x2000aa8c
    d0cc:	2000aa94 	.word	0x2000aa94

0000d0d0 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
    d0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    d0d4:	4c54      	ldr	r4, [pc, #336]	; (d228 <scan_recv+0x158>)
{
    d0d6:	b099      	sub	sp, #100	; 0x64
	memset(&scan_control, 0, sizeof(scan_control));
    d0d8:	225c      	movs	r2, #92	; 0x5c
{
    d0da:	4606      	mov	r6, r0
    d0dc:	460d      	mov	r5, r1
	memset(&scan_control, 0, sizeof(scan_control));
    d0de:	a801      	add	r0, sp, #4
    d0e0:	2100      	movs	r1, #0
    d0e2:	f00e ff56 	bl	1bf92 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    d0e6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
	return bt_scan.scan_filters.addr.enabled;
    d0ea:	7962      	ldrb	r2, [r4, #5]
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    d0ec:	f88d 3007 	strb.w	r3, [sp, #7]
	control->filter_cnt = 0;
    d0f0:	2300      	movs	r3, #0
    d0f2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_addr_filter_enabled()) {
    d0f6:	b112      	cbz	r2, d0fe <scan_recv+0x2e>
		control->filter_cnt++;
    d0f8:	2301      	movs	r3, #1
    d0fa:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_name_filter_enabled()) {
    d0fe:	7863      	ldrb	r3, [r4, #1]
    d100:	b123      	cbz	r3, d10c <scan_recv+0x3c>
		control->filter_cnt++;
    d102:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d106:	3301      	adds	r3, #1
    d108:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_short_name_filter_enabled()) {
    d10c:	78e3      	ldrb	r3, [r4, #3]
    d10e:	b123      	cbz	r3, d11a <scan_recv+0x4a>
		control->filter_cnt++;
    d110:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d114:	3301      	adds	r3, #1
    d116:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_uuid_filter_enabled()) {
    d11a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    d11e:	b123      	cbz	r3, d12a <scan_recv+0x5a>
		control->filter_cnt++;
    d120:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d124:	3301      	adds	r3, #1
    d126:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_appearance_filter_enabled()) {
    d12a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
    d12e:	b123      	cbz	r3, d13a <scan_recv+0x6a>
		control->filter_cnt++;
    d130:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d134:	3301      	adds	r3, #1
    d136:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_manufacturer_data_filter_enabled()) {
    d13a:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
    d13e:	b123      	cbz	r3, d14a <scan_recv+0x7a>
		control->filter_cnt++;
    d140:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d144:	3301      	adds	r3, #1
    d146:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
    d14a:	7a33      	ldrb	r3, [r6, #8]
    d14c:	f003 0301 	and.w	r3, r3, #1
    d150:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_addr_filter_enabled()) {
    d154:	b1ea      	cbz	r2, d192 <scan_recv+0xc2>
	for (size_t i = 0; i < counter; i++) {
    d156:	f04f 0800 	mov.w	r8, #0

	/* Check the address filter. */
	check_addr(&scan_control, info->addr);
    d15a:	f8d6 a000 	ldr.w	sl, [r6]
	uint8_t counter = bt_scan.scan_filters.addr.cnt;
    d15e:	f894 9004 	ldrb.w	r9, [r4, #4]
	for (size_t i = 0; i < counter; i++) {
    d162:	4f32      	ldr	r7, [pc, #200]	; (d22c <scan_recv+0x15c>)
    d164:	45c8      	cmp	r8, r9
    d166:	d214      	bcs.n	d192 <scan_recv+0xc2>
	return memcmp(a, b, sizeof(*a));
    d168:	4639      	mov	r1, r7
    d16a:	2207      	movs	r2, #7
    d16c:	4650      	mov	r0, sl
    d16e:	f00e fed4 	bl	1bf1a <memcmp>
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
    d172:	46bb      	mov	fp, r7
    d174:	3707      	adds	r7, #7
    d176:	2800      	cmp	r0, #0
    d178:	d13a      	bne.n	d1f0 <scan_recv+0x120>
			control->filter_match_cnt++;
    d17a:	f89d 3005 	ldrb.w	r3, [sp, #5]
			control->filter_status.addr.addr = &addr[i];
    d17e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
			control->filter_match_cnt++;
    d182:	3301      	adds	r3, #1
    d184:	f88d 3005 	strb.w	r3, [sp, #5]
			control->filter_status.addr.match = true;
    d188:	2301      	movs	r3, #1
    d18a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			control->filter_match = true;
    d18e:	f88d 3006 	strb.w	r3, [sp, #6]
	state->offset = net_buf_simple_headroom(buf);
    d192:	4628      	mov	r0, r5
    d194:	f010 fa04 	bl	1d5a0 <net_buf_simple_headroom>
    d198:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    d19a:	4925      	ldr	r1, [pc, #148]	; (d230 <scan_recv+0x160>)
    d19c:	4628      	mov	r0, r5
    d19e:	aa01      	add	r2, sp, #4
	state->len = buf->len;
    d1a0:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    d1a4:	f002 fd36 	bl	fc14 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    d1a8:	4b22      	ldr	r3, [pc, #136]	; (d234 <scan_recv+0x164>)
	buf->data = buf->__buf + state->offset;
    d1aa:	68a8      	ldr	r0, [r5, #8]
	scan_control.device_info.adv_data = ad;
    d1ac:	e9cd 3504 	strd	r3, r5, [sp, #16]
	if (control->all_mode &&
    d1b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d1b4:	fa10 f787 	uxtah	r7, r0, r7
    d1b8:	602f      	str	r7, [r5, #0]
	buf->len = state->len;
    d1ba:	f8a5 8004 	strh.w	r8, [r5, #4]
	scan_control.device_info.recv_info = info;
    d1be:	9603      	str	r6, [sp, #12]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
    d1c0:	6835      	ldr	r5, [r6, #0]
	if (control->all_mode &&
    d1c2:	b1c3      	cbz	r3, d1f6 <scan_recv+0x126>
    d1c4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    d1c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d1cc:	429a      	cmp	r2, r3
    d1ce:	d116      	bne.n	d1fe <scan_recv+0x12e>
		notify_filter_matched(&control->device_info,
    d1d0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    d1d4:	a906      	add	r1, sp, #24
    d1d6:	a803      	add	r0, sp, #12
    d1d8:	f7ff fe40 	bl	ce5c <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    d1dc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    d1e0:	b11b      	cbz	r3, d1ea <scan_recv+0x11a>
    d1e2:	4629      	mov	r1, r5
    d1e4:	a801      	add	r0, sp, #4
    d1e6:	f7ff ff35 	bl	d054 <scan_connect_with_target.part.0>
}
    d1ea:	b019      	add	sp, #100	; 0x64
    d1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < counter; i++) {
    d1f0:	f108 0801 	add.w	r8, r8, #1
    d1f4:	e7b6      	b.n	d164 <scan_recv+0x94>
	else if ((!control->all_mode) && control->filter_match) {
    d1f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    d1fa:	2b00      	cmp	r3, #0
    d1fc:	d1e8      	bne.n	d1d0 <scan_recv+0x100>
	return list->head;
    d1fe:	4b0e      	ldr	r3, [pc, #56]	; (d238 <scan_recv+0x168>)
    d200:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d202:	2c00      	cmp	r4, #0
    d204:	d0f1      	beq.n	d1ea <scan_recv+0x11a>
		notify_filter_no_match(&control->device_info,
    d206:	f89d 5008 	ldrb.w	r5, [sp, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d20a:	3c04      	subs	r4, #4
    d20c:	2c00      	cmp	r4, #0
    d20e:	d0ec      	beq.n	d1ea <scan_recv+0x11a>
		if (cb->cb_addr->filter_no_match) {
    d210:	6823      	ldr	r3, [r4, #0]
    d212:	685b      	ldr	r3, [r3, #4]
    d214:	b113      	cbz	r3, d21c <scan_recv+0x14c>
			cb->cb_addr->filter_no_match(device_info, connectable);
    d216:	4629      	mov	r1, r5
    d218:	a803      	add	r0, sp, #12
    d21a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    d21c:	1d23      	adds	r3, r4, #4
    d21e:	d0e4      	beq.n	d1ea <scan_recv+0x11a>
	return node->next;
    d220:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    d222:	2c00      	cmp	r4, #0
    d224:	d1f1      	bne.n	d20a <scan_recv+0x13a>
    d226:	e7e0      	b.n	d1ea <scan_recv+0x11a>
    d228:	2000aa18 	.word	0x2000aa18
    d22c:	2000aa1c 	.word	0x2000aa1c
    d230:	0000cce1 	.word	0x0000cce1
    d234:	2000aa8c 	.word	0x2000aa8c
    d238:	2000aa94 	.word	0x2000aa94

0000d23c <bt_scan_init>:
{
    d23c:	b570      	push	{r4, r5, r6, lr}
    d23e:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    d240:	4c14      	ldr	r4, [pc, #80]	; (d294 <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
    d242:	4815      	ldr	r0, [pc, #84]	; (d298 <bt_scan_init+0x5c>)
    d244:	f003 ff12 	bl	1106c <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    d248:	225c      	movs	r2, #92	; 0x5c
    d24a:	2100      	movs	r1, #0
    d24c:	4620      	mov	r0, r4
    d24e:	f00e fea0 	bl	1bf92 <memset>
	if (init) {
    d252:	b1be      	cbz	r6, d284 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
    d254:	7933      	ldrb	r3, [r6, #4]
		if (init->scan_param) {
    d256:	6835      	ldr	r5, [r6, #0]
		bt_scan.connect_if_match = init->connect_if_match;
    d258:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (init->scan_param) {
    d25c:	b15d      	cbz	r5, d276 <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
    d25e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d260:	3460      	adds	r4, #96	; 0x60
    d262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d264:	682b      	ldr	r3, [r5, #0]
    d266:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
    d268:	68b2      	ldr	r2, [r6, #8]
    d26a:	b13a      	cbz	r2, d27c <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
    d26c:	4b0b      	ldr	r3, [pc, #44]	; (d29c <bt_scan_init+0x60>)
    d26e:	6810      	ldr	r0, [r2, #0]
    d270:	6851      	ldr	r1, [r2, #4]
    d272:	c303      	stmia	r3!, {r0, r1}
}
    d274:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
    d276:	f7ff fcbb 	bl	cbf0 <scan_default_param_set>
    d27a:	e7f5      	b.n	d268 <bt_scan_init+0x2c>
}
    d27c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
    d280:	f7ff bcc8 	b.w	cc14 <scan_default_conn_param_set>
		scan_default_param_set();
    d284:	f7ff fcb4 	bl	cbf0 <scan_default_param_set>
		scan_default_conn_param_set();
    d288:	f7ff fcc4 	bl	cc14 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
    d28c:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
}
    d290:	e7f0      	b.n	d274 <bt_scan_init+0x38>
    d292:	bf00      	nop
    d294:	2000aa18 	.word	0x2000aa18
    d298:	2000828c 	.word	0x2000828c
    d29c:	2000aa8c 	.word	0x2000aa8c

0000d2a0 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    d2a0:	b108      	cbz	r0, d2a6 <bt_scan_start+0x6>
    d2a2:	2801      	cmp	r0, #1
    d2a4:	d106      	bne.n	d2b4 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    d2a6:	4b05      	ldr	r3, [pc, #20]	; (d2bc <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    d2a8:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    d2aa:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    d2ae:	4804      	ldr	r0, [pc, #16]	; (d2c0 <bt_scan_start+0x20>)
    d2b0:	f003 be62 	b.w	10f78 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    d2b4:	f06f 0015 	mvn.w	r0, #21
    d2b8:	4770      	bx	lr
    d2ba:	bf00      	nop
    d2bc:	2000aa18 	.word	0x2000aa18
    d2c0:	2000aa78 	.word	0x2000aa78

0000d2c4 <notify_process>:
 * @retval BT_GATT_ITER_CONTINUE Continue notification
 */
static uint8_t notify_process(struct bt_conn *conn,
			   struct bt_gatt_subscribe_params *params,
			   const void *data, uint16_t length)
{
    d2c4:	b570      	push	{r4, r5, r6, lr}
    d2c6:	460d      	mov	r5, r1
    d2c8:	461c      	mov	r4, r3
	struct bt_bas_client *bas;
	uint8_t battery_level;
	const uint8_t *bdata = (uint8_t *)data;

	bas = CONTAINER_OF(params, struct bt_bas_client, notify_params);
    d2ca:	1f0e      	subs	r6, r1, #4
	if (!data || !length) {
    d2cc:	b102      	cbz	r2, d2d0 <notify_process+0xc>
    d2ce:	b953      	cbnz	r3, d2e6 <notify_process+0x22>
		LOG_INF("Notifications disabled.");
    d2d0:	2149      	movs	r1, #73	; 0x49
    d2d2:	480e      	ldr	r0, [pc, #56]	; (d30c <notify_process+0x48>)
		return BT_GATT_ITER_STOP;
	}

	battery_level = bdata[0];
	if (battery_level > BT_BAS_VAL_MAX) {
		LOG_ERR("Unexpected notification value.");
    d2d4:	f00d fbee 	bl	1aab4 <printk>
		if (bas->notify_cb) {
    d2d8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
    d2da:	b113      	cbz	r3, d2e2 <notify_process+0x1e>
			bas->notify_cb(bas, BT_BAS_VAL_INVALID);
    d2dc:	21ff      	movs	r1, #255	; 0xff
    d2de:	4630      	mov	r0, r6
    d2e0:	4798      	blx	r3
		return BT_GATT_ITER_STOP;
    d2e2:	2000      	movs	r0, #0
	if (bas->notify_cb) {
		bas->notify_cb(bas, battery_level);
	}

	return BT_GATT_ITER_CONTINUE;
}
    d2e4:	bd70      	pop	{r4, r5, r6, pc}
	if (length != 1) {
    d2e6:	2b01      	cmp	r3, #1
    d2e8:	d002      	beq.n	d2f0 <notify_process+0x2c>
		LOG_ERR("Unexpected notification value size.");
    d2ea:	2145      	movs	r1, #69	; 0x45
    d2ec:	4808      	ldr	r0, [pc, #32]	; (d310 <notify_process+0x4c>)
    d2ee:	e7f1      	b.n	d2d4 <notify_process+0x10>
	battery_level = bdata[0];
    d2f0:	7811      	ldrb	r1, [r2, #0]
	if (battery_level > BT_BAS_VAL_MAX) {
    d2f2:	2964      	cmp	r1, #100	; 0x64
    d2f4:	d902      	bls.n	d2fc <notify_process+0x38>
		LOG_ERR("Unexpected notification value.");
    d2f6:	2145      	movs	r1, #69	; 0x45
    d2f8:	4806      	ldr	r0, [pc, #24]	; (d314 <notify_process+0x50>)
    d2fa:	e7eb      	b.n	d2d4 <notify_process+0x10>
	if (bas->notify_cb) {
    d2fc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
	bas->battery_level = battery_level;
    d2fe:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
	if (bas->notify_cb) {
    d302:	b10b      	cbz	r3, d308 <notify_process+0x44>
		bas->notify_cb(bas, battery_level);
    d304:	4630      	mov	r0, r6
    d306:	4798      	blx	r3
	return BT_GATT_ITER_CONTINUE;
    d308:	4620      	mov	r0, r4
    d30a:	e7eb      	b.n	d2e4 <notify_process+0x20>
    d30c:	00020913 	.word	0x00020913
    d310:	00020930 	.word	0x00020930
    d314:	00020959 	.word	0x00020959

0000d318 <read_process>:
 * @retval BT_GATT_ITER_CONTINUE Continue notification
 */
static uint8_t read_process(struct bt_conn *conn, uint8_t err,
			     struct bt_gatt_read_params *params,
			     const void *data, uint16_t length)
{
    d318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t battery_level = BT_BAS_VAL_INVALID;
	const uint8_t *bdata = (uint8_t *)data;

	bas = CONTAINER_OF(params, struct bt_bas_client, read_params);

	if (!bas->read_cb) {
    d31a:	6e17      	ldr	r7, [r2, #96]	; 0x60
{
    d31c:	460d      	mov	r5, r1
    d31e:	4614      	mov	r4, r2
	bas = CONTAINER_OF(params, struct bt_bas_client, read_params);
    d320:	f1a2 061c 	sub.w	r6, r2, #28
	if (!bas->read_cb) {
    d324:	b937      	cbnz	r7, d334 <read_process+0x1c>
		LOG_ERR("No read callback present");
    d326:	2145      	movs	r1, #69	; 0x45
    d328:	4814      	ldr	r0, [pc, #80]	; (d37c <read_process+0x64>)
    d32a:	f00d fbc3 	bl	1aab4 <printk>
			bas->battery_level = battery_level;
			bas->read_cb(bas, battery_level, err);
		}
	}

	bas->read_cb = NULL;
    d32e:	2000      	movs	r0, #0
    d330:	6620      	str	r0, [r4, #96]	; 0x60

	return BT_GATT_ITER_STOP;
}
    d332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else  if (err) {
    d334:	b151      	cbz	r1, d34c <read_process+0x34>
		LOG_ERR("Read value error: %d", err);
    d336:	460a      	mov	r2, r1
    d338:	4811      	ldr	r0, [pc, #68]	; (d380 <read_process+0x68>)
    d33a:	2145      	movs	r1, #69	; 0x45
    d33c:	f00d fbba 	bl	1aab4 <printk>
			bas->read_cb(bas, BT_BAS_VAL_INVALID, err);
    d340:	462a      	mov	r2, r5
    d342:	21ff      	movs	r1, #255	; 0xff
    d344:	4630      	mov	r0, r6
    d346:	6e23      	ldr	r3, [r4, #96]	; 0x60
    d348:	4798      	blx	r3
    d34a:	e7f0      	b.n	d32e <read_process+0x16>
	} else if (!data || length != 1) {
    d34c:	b11b      	cbz	r3, d356 <read_process+0x3e>
    d34e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    d352:	2a01      	cmp	r2, #1
    d354:	d005      	beq.n	d362 <read_process+0x4a>
		bas->read_cb(bas,  battery_level, -EMSGSIZE);
    d356:	f06f 0223 	mvn.w	r2, #35	; 0x23
    d35a:	21ff      	movs	r1, #255	; 0xff
			bas->read_cb(bas, battery_level, err);
    d35c:	4630      	mov	r0, r6
    d35e:	47b8      	blx	r7
    d360:	e7e5      	b.n	d32e <read_process+0x16>
		battery_level = bdata[0];
    d362:	7819      	ldrb	r1, [r3, #0]
		if (battery_level > BT_BAS_VAL_MAX) {
    d364:	2964      	cmp	r1, #100	; 0x64
    d366:	d904      	bls.n	d372 <read_process+0x5a>
			LOG_ERR("Unexpected read value.");
    d368:	2145      	movs	r1, #69	; 0x45
    d36a:	4806      	ldr	r0, [pc, #24]	; (d384 <read_process+0x6c>)
    d36c:	f00d fba2 	bl	1aab4 <printk>
    d370:	e7e6      	b.n	d340 <read_process+0x28>
			bas->read_cb(bas, battery_level, err);
    d372:	462a      	mov	r2, r5
			bas->battery_level = battery_level;
    d374:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
			bas->read_cb(bas, battery_level, err);
    d378:	e7f0      	b.n	d35c <read_process+0x44>
    d37a:	bf00      	nop
    d37c:	0002097d 	.word	0x0002097d
    d380:	0002099b 	.word	0x0002099b
    d384:	000209b5 	.word	0x000209b5

0000d388 <bas_read_value_handler>:
 * @brief Periodic read workqueue handler.
 *
 * @param work Work instance.
 */
static void bas_read_value_handler(struct k_work *work)
{
    d388:	4601      	mov	r1, r0
	struct bt_bas_client *bas;

	bas = CONTAINER_OF(work, struct bt_bas_client,
			     periodic_read.read_work);

	if (!bas->conn) {
    d38a:	f850 0c30 	ldr.w	r0, [r0, #-48]
{
    d38e:	b508      	push	{r3, lr}
	if (!bas->conn) {
    d390:	b928      	cbnz	r0, d39e <bas_read_value_handler+0x16>
	 */
	if (err) {
		LOG_ERR("Periodic Battery Level characteristic read error: %d",
			err);
	}
}
    d392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("No connection object.");
    d396:	2145      	movs	r1, #69	; 0x45
    d398:	480b      	ldr	r0, [pc, #44]	; (d3c8 <bas_read_value_handler+0x40>)
    d39a:	f00d bb8b 	b.w	1aab4 <printk>
	bas->periodic_read.params.func = periodic_read_process;
    d39e:	4b0b      	ldr	r3, [pc, #44]	; (d3cc <bas_read_value_handler+0x44>)
	err = bt_gatt_read(bas->conn, &bas->periodic_read.params);
    d3a0:	3130      	adds	r1, #48	; 0x30
	bas->periodic_read.params.func = periodic_read_process;
    d3a2:	600b      	str	r3, [r1, #0]
	bas->periodic_read.params.handle_count  = 1;
    d3a4:	2301      	movs	r3, #1
    d3a6:	604b      	str	r3, [r1, #4]
	bas->periodic_read.params.single.handle = bas->val_handle;
    d3a8:	8c0b      	ldrh	r3, [r1, #32]
    d3aa:	810b      	strh	r3, [r1, #8]
	bas->periodic_read.params.single.offset = 0;
    d3ac:	2300      	movs	r3, #0
    d3ae:	814b      	strh	r3, [r1, #10]
	err = bt_gatt_read(bas->conn, &bas->periodic_read.params);
    d3b0:	f007 fd74 	bl	14e9c <bt_gatt_read>
	if (err) {
    d3b4:	4602      	mov	r2, r0
    d3b6:	b128      	cbz	r0, d3c4 <bas_read_value_handler+0x3c>
}
    d3b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Periodic Battery Level characteristic read error: %d",
    d3bc:	2145      	movs	r1, #69	; 0x45
    d3be:	4804      	ldr	r0, [pc, #16]	; (d3d0 <bas_read_value_handler+0x48>)
    d3c0:	f00d bb78 	b.w	1aab4 <printk>
}
    d3c4:	bd08      	pop	{r3, pc}
    d3c6:	bf00      	nop
    d3c8:	000209d1 	.word	0x000209d1
    d3cc:	0000d3d5 	.word	0x0000d3d5
    d3d0:	000209ec 	.word	0x000209ec

0000d3d4 <periodic_read_process>:
{
    d3d4:	b538      	push	{r3, r4, r5, lr}
    d3d6:	4614      	mov	r4, r2
	if (!bas->notify_cb) {
    d3d8:	6992      	ldr	r2, [r2, #24]
    d3da:	b922      	cbnz	r2, d3e6 <periodic_read_process+0x12>
		LOG_ERR("No notification callback present");
    d3dc:	2145      	movs	r1, #69	; 0x45
    d3de:	4826      	ldr	r0, [pc, #152]	; (d478 <periodic_read_process+0xa4>)
		LOG_ERR("Unexpected read value size.");
    d3e0:	f00d fb68 	bl	1aab4 <printk>
    d3e4:	e005      	b.n	d3f2 <periodic_read_process+0x1e>
	} else  if (err) {
    d3e6:	b359      	cbz	r1, d440 <periodic_read_process+0x6c>
		LOG_ERR("Read value error: %d", err);
    d3e8:	460a      	mov	r2, r1
    d3ea:	4824      	ldr	r0, [pc, #144]	; (d47c <periodic_read_process+0xa8>)
    d3ec:	2145      	movs	r1, #69	; 0x45
    d3ee:	f00d fb61 	bl	1aab4 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d3f2:	f104 0314 	add.w	r3, r4, #20
    d3f6:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(&bas->periodic_read.process,
    d3fa:	079b      	lsls	r3, r3, #30
    d3fc:	d51e      	bpl.n	d43c <periodic_read_process+0x68>
		k_delayed_work_submit(&bas->periodic_read.read_work,
    d3fe:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
				      K_MSEC(atomic_get(
    d402:	3410      	adds	r4, #16
    d404:	e8d4 3faf 	lda	r3, [r4]
    d408:	2b00      	cmp	r3, #0
    d40a:	dd31      	ble.n	d470 <periodic_read_process+0x9c>
    d40c:	e8d4 0faf 	lda	r0, [r4]
    d410:	17c1      	asrs	r1, r0, #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    d412:	f240 33e7 	movw	r3, #999	; 0x3e7
    d416:	03c9      	lsls	r1, r1, #15
    d418:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    d41c:	03c0      	lsls	r0, r0, #15
    d41e:	18c0      	adds	r0, r0, r3
    d420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d424:	f04f 0300 	mov.w	r3, #0
    d428:	f141 0100 	adc.w	r1, r1, #0
    d42c:	f7fb fb7e 	bl	8b2c <__aeabi_uldivmod>
    d430:	4602      	mov	r2, r0
    d432:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d434:	4812      	ldr	r0, [pc, #72]	; (d480 <periodic_read_process+0xac>)
    d436:	4629      	mov	r1, r5
    d438:	f00c fbc6 	bl	19bc8 <k_delayed_work_submit_to_queue>
}
    d43c:	2000      	movs	r0, #0
    d43e:	bd38      	pop	{r3, r4, r5, pc}
	} else if (!data || length != 1) {
    d440:	b11b      	cbz	r3, d44a <periodic_read_process+0x76>
    d442:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    d446:	2901      	cmp	r1, #1
    d448:	d002      	beq.n	d450 <periodic_read_process+0x7c>
		LOG_ERR("Unexpected read value size.");
    d44a:	2145      	movs	r1, #69	; 0x45
    d44c:	480d      	ldr	r0, [pc, #52]	; (d484 <periodic_read_process+0xb0>)
    d44e:	e7c7      	b.n	d3e0 <periodic_read_process+0xc>
		battery_level = bdata[0];
    d450:	7819      	ldrb	r1, [r3, #0]
		if (battery_level > BT_BAS_VAL_MAX) {
    d452:	2964      	cmp	r1, #100	; 0x64
    d454:	d902      	bls.n	d45c <periodic_read_process+0x88>
			LOG_ERR("Unexpected read value.");
    d456:	2145      	movs	r1, #69	; 0x45
    d458:	480b      	ldr	r0, [pc, #44]	; (d488 <periodic_read_process+0xb4>)
    d45a:	e7c1      	b.n	d3e0 <periodic_read_process+0xc>
		} else if (bas->battery_level != battery_level) {
    d45c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    d460:	428b      	cmp	r3, r1
    d462:	d0c6      	beq.n	d3f2 <periodic_read_process+0x1e>
			bas->battery_level = battery_level;
    d464:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
			bas->notify_cb(bas, battery_level);
    d468:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
    d46c:	4790      	blx	r2
    d46e:	e7c0      	b.n	d3f2 <periodic_read_process+0x1e>
				      K_MSEC(atomic_get(
    d470:	2000      	movs	r0, #0
    d472:	4601      	mov	r1, r0
    d474:	e7cd      	b.n	d412 <periodic_read_process+0x3e>
    d476:	bf00      	nop
    d478:	00020a26 	.word	0x00020a26
    d47c:	0002099b 	.word	0x0002099b
    d480:	2000a540 	.word	0x2000a540
    d484:	00020a4c 	.word	0x00020a4c
    d488:	000209b5 	.word	0x000209b5

0000d48c <bt_bas_client_init>:
	bas->notify = false;
}


void bt_bas_client_init(struct bt_bas_client *bas)
{
    d48c:	b510      	push	{r4, lr}
	memset(bas, 0, sizeof(*bas));
    d48e:	2288      	movs	r2, #136	; 0x88
    d490:	2100      	movs	r1, #0
{
    d492:	4604      	mov	r4, r0
	memset(bas, 0, sizeof(*bas));
    d494:	f00e fd7d 	bl	1bf92 <memset>
	bas->battery_level = BT_BAS_VAL_INVALID;
    d498:	23ff      	movs	r3, #255	; 0xff
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d49a:	2230      	movs	r2, #48	; 0x30
    d49c:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
    d4a0:	2100      	movs	r1, #0
    d4a2:	18a0      	adds	r0, r4, r2
    d4a4:	f00e fd75 	bl	1bf92 <memset>
    d4a8:	4b01      	ldr	r3, [pc, #4]	; (d4b0 <bt_bas_client_init+0x24>)
    d4aa:	6363      	str	r3, [r4, #52]	; 0x34

	k_delayed_work_init(&bas->periodic_read.read_work,
			    bas_read_value_handler);
}
    d4ac:	bd10      	pop	{r4, pc}
    d4ae:	bf00      	nop
    d4b0:	0000d389 	.word	0x0000d389

0000d4b4 <bt_bas_handles_assign>:


int bt_bas_handles_assign(struct bt_gatt_dm *dm,
				 struct bt_bas_client *bas)
{
    d4b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d4b8:	460c      	mov	r4, r1
    d4ba:	4606      	mov	r6, r0
	const struct bt_gatt_dm_attr *gatt_service_attr =
			bt_gatt_dm_service_get(dm);
    d4bc:	f00d ff38 	bl	1b330 <bt_gatt_dm_service_get>
	const struct bt_gatt_service_val *gatt_service =
			bt_gatt_dm_attr_service_val(gatt_service_attr);
    d4c0:	f00d ff00 	bl	1b2c4 <bt_gatt_dm_attr_service_val>
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;
	const struct bt_gatt_chrc *chrc_val;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_BAS)) {
    d4c4:	2300      	movs	r3, #0
    d4c6:	6800      	ldr	r0, [r0, #0]
    d4c8:	f88d 300c 	strb.w	r3, [sp, #12]
    d4cc:	f641 030f 	movw	r3, #6159	; 0x180f
    d4d0:	a903      	add	r1, sp, #12
    d4d2:	f8ad 300e 	strh.w	r3, [sp, #14]
    d4d6:	f00e fda6 	bl	1c026 <bt_uuid_cmp>
    d4da:	4605      	mov	r5, r0
    d4dc:	b128      	cbz	r0, d4ea <bt_bas_handles_assign+0x36>
		return -ENOTSUP;
    d4de:	f06f 0522 	mvn.w	r5, #34	; 0x22
	}

	/* Finally - save connection object */
	bas->conn = bt_gatt_dm_conn_get(dm);
	return 0;
}
    d4e2:	4628      	mov	r0, r5
    d4e4:	b004      	add	sp, #16
    d4e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_delayed_work_cancel(&bas->periodic_read.read_work);
    d4ea:	f104 0030 	add.w	r0, r4, #48	; 0x30
    d4ee:	f00c fbdb 	bl	19ca8 <k_delayed_work_cancel>
	bas->battery_level = BT_BAS_VAL_INVALID;
    d4f2:	23ff      	movs	r3, #255	; 0xff
    d4f4:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_BAS_BATTERY_LEVEL);
    d4f8:	f642 2319 	movw	r3, #10777	; 0x2a19
    d4fc:	4630      	mov	r0, r6
	bas->read_cb = NULL;
    d4fe:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
	bas->conn = NULL;
    d502:	6025      	str	r5, [r4, #0]
	bas->val_handle = 0;
    d504:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	bas->notify = false;
    d508:	f884 5086 	strb.w	r5, [r4, #134]	; 0x86
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_BAS_BATTERY_LEVEL);
    d50c:	a901      	add	r1, sp, #4
    d50e:	f88d 5004 	strb.w	r5, [sp, #4]
    d512:	f8ad 3006 	strh.w	r3, [sp, #6]
    d516:	f7ff faed 	bl	caf4 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    d51a:	4607      	mov	r7, r0
    d51c:	b930      	cbnz	r0, d52c <bt_bas_handles_assign+0x78>
		LOG_ERR("No battery level characteristic found.");
    d51e:	2145      	movs	r1, #69	; 0x45
    d520:	4824      	ldr	r0, [pc, #144]	; (d5b4 <bt_bas_handles_assign+0x100>)
		LOG_ERR("No battery level characteristic value found.");
    d522:	f00d fac7 	bl	1aab4 <printk>
		return -EINVAL;
    d526:	f06f 0515 	mvn.w	r5, #21
    d52a:	e7da      	b.n	d4e2 <bt_bas_handles_assign+0x2e>
	chrc_val = bt_gatt_dm_attr_chrc_val(gatt_chrc);
    d52c:	f00d feea 	bl	1b304 <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
    d530:	4680      	mov	r8, r0
    d532:	b950      	cbnz	r0, d54a <bt_bas_handles_assign+0x96>
    d534:	4920      	ldr	r1, [pc, #128]	; (d5b8 <bt_bas_handles_assign+0x104>)
    d536:	4821      	ldr	r0, [pc, #132]	; (d5bc <bt_bas_handles_assign+0x108>)
    d538:	f44f 7285 	mov.w	r2, #266	; 0x10a
    d53c:	f00d faba 	bl	1aab4 <printk>
    d540:	f44f 7185 	mov.w	r1, #266	; 0x10a
    d544:	481c      	ldr	r0, [pc, #112]	; (d5b8 <bt_bas_handles_assign+0x104>)
    d546:	f00d fd5b 	bl	1b000 <assert_post_action>
	bas->properties = chrc_val->properties;
    d54a:	f898 3006 	ldrb.w	r3, [r8, #6]
					    BT_UUID_BAS_BATTERY_LEVEL);
    d54e:	f04f 0800 	mov.w	r8, #0
	bas->properties = chrc_val->properties;
    d552:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
					    BT_UUID_BAS_BATTERY_LEVEL);
    d556:	f642 2319 	movw	r3, #10777	; 0x2a19
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    d55a:	4639      	mov	r1, r7
    d55c:	4630      	mov	r0, r6
    d55e:	aa02      	add	r2, sp, #8
					    BT_UUID_BAS_BATTERY_LEVEL);
    d560:	f88d 8008 	strb.w	r8, [sp, #8]
    d564:	f8ad 300a 	strh.w	r3, [sp, #10]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    d568:	f00d ff2f 	bl	1b3ca <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    d56c:	b910      	cbnz	r0, d574 <bt_bas_handles_assign+0xc0>
		LOG_ERR("No battery level characteristic value found.");
    d56e:	2145      	movs	r1, #69	; 0x45
    d570:	4813      	ldr	r0, [pc, #76]	; (d5c0 <bt_bas_handles_assign+0x10c>)
    d572:	e7d6      	b.n	d522 <bt_bas_handles_assign+0x6e>
	bas->val_handle = gatt_desc->handle;
    d574:	8883      	ldrh	r3, [r0, #4]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    d576:	4639      	mov	r1, r7
	bas->val_handle = gatt_desc->handle;
    d578:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    d57c:	f642 1302 	movw	r3, #10498	; 0x2902
    d580:	4630      	mov	r0, r6
    d582:	aa03      	add	r2, sp, #12
    d584:	f88d 800c 	strb.w	r8, [sp, #12]
    d588:	f8ad 300e 	strh.w	r3, [sp, #14]
    d58c:	f00d ff1d 	bl	1b3ca <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    d590:	b940      	cbnz	r0, d5a4 <bt_bas_handles_assign+0xf0>
		LOG_INF("No battery CCC descriptor found. Battery service do not supported notification.");
    d592:	2149      	movs	r1, #73	; 0x49
    d594:	480b      	ldr	r0, [pc, #44]	; (d5c4 <bt_bas_handles_assign+0x110>)
    d596:	f00d fa8d 	bl	1aab4 <printk>
	bas->conn = bt_gatt_dm_conn_get(dm);
    d59a:	4630      	mov	r0, r6
    d59c:	f00d fec6 	bl	1b32c <bt_gatt_dm_conn_get>
    d5a0:	6020      	str	r0, [r4, #0]
	return 0;
    d5a2:	e79e      	b.n	d4e2 <bt_bas_handles_assign+0x2e>
		bas->notify = true;
    d5a4:	2301      	movs	r3, #1
    d5a6:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
		bas->ccc_handle = gatt_desc->handle;
    d5aa:	8883      	ldrh	r3, [r0, #4]
    d5ac:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
    d5b0:	e7f3      	b.n	d59a <bt_bas_handles_assign+0xe6>
    d5b2:	bf00      	nop
    d5b4:	00020a6d 	.word	0x00020a6d
    d5b8:	00020a99 	.word	0x00020a99
    d5bc:	0002003d 	.word	0x0002003d
    d5c0:	00020ad0 	.word	0x00020ad0
    d5c4:	00020b02 	.word	0x00020b02

0000d5c8 <bt_bas_subscribe_battery_level>:

int bt_bas_subscribe_battery_level(struct bt_bas_client *bas,
				   bt_bas_notify_cb func)
{
    d5c8:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bas || !func) {
    d5ca:	4604      	mov	r4, r0
    d5cc:	b340      	cbz	r0, d620 <bt_bas_subscribe_battery_level+0x58>
    d5ce:	b339      	cbz	r1, d620 <bt_bas_subscribe_battery_level+0x58>
		return -EINVAL;
	}
	if (!bas->conn) {
    d5d0:	6803      	ldr	r3, [r0, #0]
    d5d2:	b32b      	cbz	r3, d620 <bt_bas_subscribe_battery_level+0x58>
		return -EINVAL;
	}
	if (!(bas->properties & BT_GATT_CHRC_NOTIFY)) {
    d5d4:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    d5d8:	06db      	lsls	r3, r3, #27
    d5da:	d524      	bpl.n	d626 <bt_bas_subscribe_battery_level+0x5e>
		return -ENOTSUP;
	}
	if (bas->notify_cb) {
    d5dc:	6f86      	ldr	r6, [r0, #120]	; 0x78
    d5de:	bb2e      	cbnz	r6, d62c <bt_bas_subscribe_battery_level+0x64>
		return -EALREADY;
	}

	bas->notify_cb = func;

	bas->notify_params.notify = notify_process;
    d5e0:	4b14      	ldr	r3, [pc, #80]	; (d634 <bt_bas_subscribe_battery_level+0x6c>)
	bas->notify_cb = func;
    d5e2:	6781      	str	r1, [r0, #120]	; 0x78
	bas->notify_params.notify = notify_process;
    d5e4:	6043      	str	r3, [r0, #4]
	bas->notify_params.value = BT_GATT_CCC_NOTIFY;
    d5e6:	2301      	movs	r3, #1
    d5e8:	8203      	strh	r3, [r0, #16]
	bas->notify_params.value_handle = bas->val_handle;
    d5ea:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    d5ee:	60c3      	str	r3, [r0, #12]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d5f0:	f100 0314 	add.w	r3, r0, #20
    d5f4:	e8d3 2fef 	ldaex	r2, [r3]
    d5f8:	f042 0201 	orr.w	r2, r2, #1
    d5fc:	e8c3 2fe1 	stlex	r1, r2, [r3]
    d600:	2900      	cmp	r1, #0
    d602:	d1f7      	bne.n	d5f4 <bt_bas_subscribe_battery_level+0x2c>
		       BT_GATT_SUBSCRIBE_FLAG_VOLATILE);

	LOG_DBG("Subscribe: val: %u, ccc: %u",
		bas->notify_params.value_handle,
		bas->notify_params.ccc_handle);
	err = bt_gatt_subscribe(bas->conn, &bas->notify_params);
    d604:	6820      	ldr	r0, [r4, #0]
    d606:	1d21      	adds	r1, r4, #4
    d608:	f007 fd5c 	bl	150c4 <bt_gatt_subscribe>
	if (err) {
    d60c:	4605      	mov	r5, r0
    d60e:	b128      	cbz	r0, d61c <bt_bas_subscribe_battery_level+0x54>
		LOG_ERR("Report notification subscribe error: %d.", err);
    d610:	4602      	mov	r2, r0
    d612:	2145      	movs	r1, #69	; 0x45
    d614:	4808      	ldr	r0, [pc, #32]	; (d638 <bt_bas_subscribe_battery_level+0x70>)
    d616:	f00d fa4d 	bl	1aab4 <printk>
		bas->notify_cb = NULL;
    d61a:	67a6      	str	r6, [r4, #120]	; 0x78
		return err;
	}
	LOG_DBG("Report subscribed.");
	return err;
}
    d61c:	4628      	mov	r0, r5
    d61e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    d620:	f06f 0515 	mvn.w	r5, #21
    d624:	e7fa      	b.n	d61c <bt_bas_subscribe_battery_level+0x54>
		return -ENOTSUP;
    d626:	f06f 0522 	mvn.w	r5, #34	; 0x22
    d62a:	e7f7      	b.n	d61c <bt_bas_subscribe_battery_level+0x54>
		return -EALREADY;
    d62c:	f06f 0544 	mvn.w	r5, #68	; 0x44
    d630:	e7f4      	b.n	d61c <bt_bas_subscribe_battery_level+0x54>
    d632:	bf00      	nop
    d634:	0000d2c5 	.word	0x0000d2c5
    d638:	00020b57 	.word	0x00020b57

0000d63c <bt_bas_read_battery_level>:
	return bas->conn;
}


int bt_bas_read_battery_level(struct bt_bas_client *bas, bt_bas_read_cb func)
{
    d63c:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!bas || !func) {
    d63e:	4604      	mov	r4, r0
    d640:	b1a0      	cbz	r0, d66c <bt_bas_read_battery_level+0x30>
    d642:	b199      	cbz	r1, d66c <bt_bas_read_battery_level+0x30>
		return -EINVAL;
	}
	if (!bas->conn) {
    d644:	6800      	ldr	r0, [r0, #0]
    d646:	b188      	cbz	r0, d66c <bt_bas_read_battery_level+0x30>
		return -EINVAL;
	}
	if (bas->read_cb) {
    d648:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
    d64a:	b995      	cbnz	r5, d672 <bt_bas_read_battery_level+0x36>
		return -EBUSY;
	}
	bas->read_cb = func;
	bas->read_params.func = read_process;
    d64c:	4b0a      	ldr	r3, [pc, #40]	; (d678 <bt_bas_read_battery_level+0x3c>)
	bas->read_cb = func;
    d64e:	67e1      	str	r1, [r4, #124]	; 0x7c
	bas->read_params.func = read_process;
    d650:	61e3      	str	r3, [r4, #28]
	bas->read_params.handle_count  = 1;
    d652:	2301      	movs	r3, #1
    d654:	6223      	str	r3, [r4, #32]
	bas->read_params.single.handle = bas->val_handle;
    d656:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
	bas->read_params.single.offset = 0;
    d65a:	84e5      	strh	r5, [r4, #38]	; 0x26
	bas->read_params.single.handle = bas->val_handle;
    d65c:	84a3      	strh	r3, [r4, #36]	; 0x24

	err = bt_gatt_read(bas->conn, &bas->read_params);
    d65e:	f104 011c 	add.w	r1, r4, #28
    d662:	f007 fc1b 	bl	14e9c <bt_gatt_read>
	if (err) {
    d666:	b100      	cbz	r0, d66a <bt_bas_read_battery_level+0x2e>
		bas->read_cb = NULL;
    d668:	67e5      	str	r5, [r4, #124]	; 0x7c
		return err;
	}
	return 0;
}
    d66a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    d66c:	f06f 0015 	mvn.w	r0, #21
    d670:	e7fb      	b.n	d66a <bt_bas_read_battery_level+0x2e>
		return -EBUSY;
    d672:	f06f 000f 	mvn.w	r0, #15
    d676:	e7f8      	b.n	d66a <bt_bas_read_battery_level+0x2e>
    d678:	0000d319 	.word	0x0000d319

0000d67c <bt_bas_start_per_read_battery_level>:


int bt_bas_start_per_read_battery_level(struct bt_bas_client *bas,
					int32_t interval,
					bt_bas_notify_cb func)
{
    d67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!bas || !func) {
    d67e:	4605      	mov	r5, r0
    d680:	b380      	cbz	r0, d6e4 <bt_bas_start_per_read_battery_level+0x68>
    d682:	b37a      	cbz	r2, d6e4 <bt_bas_start_per_read_battery_level+0x68>
		return -EINVAL;
	}

	if (bt_bas_notify_supported(bas)) {
    d684:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    d688:	bb78      	cbnz	r0, d6ea <bt_bas_start_per_read_battery_level+0x6e>
		return -ENOTSUP;
	}

	bas->notify_cb = func;
    d68a:	67aa      	str	r2, [r5, #120]	; 0x78
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d68c:	f105 0370 	add.w	r3, r5, #112	; 0x70
    d690:	e8d3 2fef 	ldaex	r2, [r3]
    d694:	e8c3 1fe4 	stlex	r4, r1, [r3]
    d698:	2c00      	cmp	r4, #0
    d69a:	d1f9      	bne.n	d690 <bt_bas_start_per_read_battery_level+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d69c:	f105 0374 	add.w	r3, r5, #116	; 0x74
    d6a0:	e8d3 4fef 	ldaex	r4, [r3]
    d6a4:	f044 0202 	orr.w	r2, r4, #2
    d6a8:	e8c3 2fe6 	stlex	r6, r2, [r3]
    d6ac:	2e00      	cmp	r6, #0
    d6ae:	d1f7      	bne.n	d6a0 <bt_bas_start_per_read_battery_level+0x24>
	atomic_set(&bas->periodic_read.interval, interval);

	if (!atomic_test_and_set_bit(&bas->periodic_read.process,
    d6b0:	f014 0402 	ands.w	r4, r4, #2
    d6b4:	d11c      	bne.n	d6f0 <bt_bas_start_per_read_battery_level+0x74>
				     BAS_PERIODIC_READ_PROC_BIT)) {
		k_delayed_work_submit(&bas->periodic_read.read_work,
				      K_MSEC(interval));
    d6b6:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
    d6ba:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    d6be:	f240 30e7 	movw	r0, #999	; 0x3e7
    d6c2:	4621      	mov	r1, r4
    d6c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d6c8:	2300      	movs	r3, #0
    d6ca:	fbc6 0107 	smlal	r0, r1, r6, r7
    d6ce:	f7fb fa2d 	bl	8b2c <__aeabi_uldivmod>
    d6d2:	4602      	mov	r2, r0
    d6d4:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d6d6:	4807      	ldr	r0, [pc, #28]	; (d6f4 <bt_bas_start_per_read_battery_level+0x78>)
    d6d8:	f105 0130 	add.w	r1, r5, #48	; 0x30
    d6dc:	f00c fa74 	bl	19bc8 <k_delayed_work_submit_to_queue>
	}

	return 0;
}
    d6e0:	4620      	mov	r0, r4
    d6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    d6e4:	f06f 0415 	mvn.w	r4, #21
    d6e8:	e7fa      	b.n	d6e0 <bt_bas_start_per_read_battery_level+0x64>
		return -ENOTSUP;
    d6ea:	f06f 0422 	mvn.w	r4, #34	; 0x22
    d6ee:	e7f7      	b.n	d6e0 <bt_bas_start_per_read_battery_level+0x64>
	return 0;
    d6f0:	4604      	mov	r4, r0
    d6f2:	e7f5      	b.n	d6e0 <bt_bas_start_per_read_battery_level+0x64>
    d6f4:	2000a540 	.word	0x2000a540

0000d6f8 <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
    d6f8:	1e4b      	subs	r3, r1, #1
    d6fa:	4259      	negs	r1, r3
    d6fc:	4159      	adcs	r1, r3
    d6fe:	4b01      	ldr	r3, [pc, #4]	; (d704 <lbslc_ccc_cfg_changed+0xc>)
    d700:	7019      	strb	r1, [r3, #0]
}
    d702:	4770      	bx	lr
    d704:	2000f502 	.word	0x2000f502

0000d708 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    d708:	b510      	push	{r4, lr}
    d70a:	461c      	mov	r4, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.led_cb) {
    d70c:	4b03      	ldr	r3, [pc, #12]	; (d71c <write_led+0x14>)
    d70e:	681b      	ldr	r3, [r3, #0]
    d710:	b10b      	cbz	r3, d716 <write_led+0xe>
		lbs_cb.led_cb(*(bool *)buf);
    d712:	7810      	ldrb	r0, [r2, #0]
    d714:	4798      	blx	r3
	}

	return len;
}
    d716:	4620      	mov	r0, r4
    d718:	bd10      	pop	{r4, pc}
    d71a:	bf00      	nop
    d71c:	2000aa9c 	.word	0x2000aa9c

0000d720 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
    d720:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d724:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.button_cb) {
    d726:	4b0d      	ldr	r3, [pc, #52]	; (d75c <read_button+0x3c>)
{
    d728:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    d72a:	6858      	ldr	r0, [r3, #4]
{
    d72c:	460c      	mov	r4, r1
    d72e:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    d730:	b180      	cbz	r0, d754 <read_button+0x34>
	const char *value = attr->user_data;
    d732:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
    d736:	4780      	blx	r0
    d738:	4b09      	ldr	r3, [pc, #36]	; (d760 <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d73a:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    d73c:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d73e:	2301      	movs	r3, #1
    d740:	e9cd 8301 	strd	r8, r3, [sp, #4]
    d744:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    d748:	4621      	mov	r1, r4
    d74a:	9300      	str	r3, [sp, #0]
    d74c:	4628      	mov	r0, r5
    d74e:	463b      	mov	r3, r7
    d750:	f00f fd84 	bl	1d25c <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
    d754:	b004      	add	sp, #16
    d756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d75a:	bf00      	nop
    d75c:	2000aa9c 	.word	0x2000aa9c
    d760:	2000f501 	.word	0x2000f501

0000d764 <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
    d764:	b120      	cbz	r0, d770 <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
    d766:	4b03      	ldr	r3, [pc, #12]	; (d774 <bt_lbs_init+0x10>)
    d768:	6802      	ldr	r2, [r0, #0]
    d76a:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    d76c:	6842      	ldr	r2, [r0, #4]
    d76e:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    d770:	2000      	movs	r0, #0
    d772:	4770      	bx	lr
    d774:	2000aa9c 	.word	0x2000aa9c

0000d778 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
    d778:	b500      	push	{lr}
	if (!notify_enabled) {
    d77a:	4b0e      	ldr	r3, [pc, #56]	; (d7b4 <bt_lbs_send_button_state+0x3c>)
{
    d77c:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
    d77e:	781b      	ldrb	r3, [r3, #0]
{
    d780:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
    d784:	b19b      	cbz	r3, d7ae <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    d786:	2100      	movs	r1, #0
    d788:	2218      	movs	r2, #24
    d78a:	a802      	add	r0, sp, #8
    d78c:	f00e fc01 	bl	1bf92 <memset>

	params.attr = attr;
    d790:	4b09      	ldr	r3, [pc, #36]	; (d7b8 <bt_lbs_send_button_state+0x40>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    d792:	2000      	movs	r0, #0
	params.attr = attr;
    d794:	9303      	str	r3, [sp, #12]
	params.data = data;
    d796:	f10d 0307 	add.w	r3, sp, #7
    d79a:	9304      	str	r3, [sp, #16]
	params.len = len;
    d79c:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    d79e:	a902      	add	r1, sp, #8
	params.len = len;
    d7a0:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    d7a4:	f006 fd84 	bl	142b0 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
    d7a8:	b009      	add	sp, #36	; 0x24
    d7aa:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    d7ae:	f06f 000c 	mvn.w	r0, #12
    d7b2:	e7f9      	b.n	d7a8 <bt_lbs_send_button_state+0x30>
    d7b4:	2000f502 	.word	0x2000f502
    d7b8:	0001ec6c 	.word	0x0001ec6c

0000d7bc <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d7bc:	2303      	movs	r3, #3
static void _DoInit(void) {
    d7be:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d7c0:	4c10      	ldr	r4, [pc, #64]	; (d804 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    d7c2:	4a11      	ldr	r2, [pc, #68]	; (d808 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    d7c4:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d7c8:	4b10      	ldr	r3, [pc, #64]	; (d80c <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    d7ca:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d7cc:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d7ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    d7d2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    d7d4:	4a0e      	ldr	r2, [pc, #56]	; (d810 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d7d6:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    d7d8:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    d7da:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d7dc:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    d7de:	490d      	ldr	r1, [pc, #52]	; (d814 <_DoInit+0x58>)
    d7e0:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    d7e2:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    d7e4:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d7e6:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    d7e8:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    d7ea:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d7ec:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d7ee:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    d7f0:	f00e fb4a 	bl	1be88 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    d7f4:	4620      	mov	r0, r4
    d7f6:	4908      	ldr	r1, [pc, #32]	; (d818 <_DoInit+0x5c>)
    d7f8:	f00e fb46 	bl	1be88 <strcpy>
  p->acID[6] = ' ';
    d7fc:	2320      	movs	r3, #32
    d7fe:	71a3      	strb	r3, [r4, #6]
}
    d800:	bd10      	pop	{r4, pc}
    d802:	bf00      	nop
    d804:	2000aaa4 	.word	0x2000aaa4
    d808:	00020bec 	.word	0x00020bec
    d80c:	2000f513 	.word	0x2000f513
    d810:	2000f503 	.word	0x2000f503
    d814:	00020bf5 	.word	0x00020bf5
    d818:	00020bf9 	.word	0x00020bf9

0000d81c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d81c:	b570      	push	{r4, r5, r6, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d81e:	2418      	movs	r4, #24
    d820:	fb00 4504 	mla	r5, r0, r4, r4
    d824:	4b14      	ldr	r3, [pc, #80]	; (d878 <SEGGER_RTT_WriteNoLock+0x5c>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d826:	4616      	mov	r6, r2
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d828:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    d82a:	fb04 3300 	mla	r3, r4, r0, r3
    d82e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d830:	2c01      	cmp	r4, #1
    d832:	d00e      	beq.n	d852 <SEGGER_RTT_WriteNoLock+0x36>
    d834:	2c02      	cmp	r4, #2
    d836:	d018      	beq.n	d86a <SEGGER_RTT_WriteNoLock+0x4e>
    d838:	b9e4      	cbnz	r4, d874 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    d83a:	4628      	mov	r0, r5
    d83c:	f00d fdf3 	bl	1b426 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    d840:	4286      	cmp	r6, r0
    d842:	d804      	bhi.n	d84e <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    d844:	4632      	mov	r2, r6
    d846:	4628      	mov	r0, r5
    d848:	f00d fdf6 	bl	1b438 <_WriteNoCheck>
    d84c:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    d84e:	4620      	mov	r0, r4
    d850:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    d852:	4628      	mov	r0, r5
    d854:	f00d fde7 	bl	1b426 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    d858:	4286      	cmp	r6, r0
    d85a:	4634      	mov	r4, r6
    d85c:	bf28      	it	cs
    d85e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    d860:	4628      	mov	r0, r5
    d862:	4622      	mov	r2, r4
    d864:	f00d fde8 	bl	1b438 <_WriteNoCheck>
    break;
    d868:	e7f1      	b.n	d84e <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d86a:	4628      	mov	r0, r5
}
    d86c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d870:	f00d bdfe 	b.w	1b470 <_WriteBlocking>
  switch (pRing->Flags) {
    d874:	2400      	movs	r4, #0
  return Status;
    d876:	e7ea      	b.n	d84e <SEGGER_RTT_WriteNoLock+0x32>
    d878:	2000aaa4 	.word	0x2000aaa4

0000d87c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    d87c:	4904      	ldr	r1, [pc, #16]	; (d890 <sub_bytes+0x14>)
    d87e:	1e43      	subs	r3, r0, #1
    d880:	300f      	adds	r0, #15
    d882:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d886:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    d888:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    d88a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    d88c:	d1f9      	bne.n	d882 <sub_bytes+0x6>
	}
}
    d88e:	4770      	bx	lr
    d890:	00020c00 	.word	0x00020c00

0000d894 <tc_aes128_set_encrypt_key>:
{
    d894:	b5f0      	push	{r4, r5, r6, r7, lr}
    d896:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    d898:	4e26      	ldr	r6, [pc, #152]	; (d934 <tc_aes128_set_encrypt_key+0xa0>)
{
    d89a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    d89c:	ad01      	add	r5, sp, #4
{
    d89e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    d8a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d8a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d8a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d8a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d8a8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    d8ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    d8b0:	4638      	mov	r0, r7
    d8b2:	2f00      	cmp	r7, #0
    d8b4:	d039      	beq.n	d92a <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    d8b6:	2c00      	cmp	r4, #0
    d8b8:	d039      	beq.n	d92e <tc_aes128_set_encrypt_key+0x9a>
    d8ba:	1f38      	subs	r0, r7, #4
    d8bc:	4602      	mov	r2, r0
    d8be:	4621      	mov	r1, r4
    d8c0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d8c2:	784b      	ldrb	r3, [r1, #1]
    d8c4:	780d      	ldrb	r5, [r1, #0]
    d8c6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d8c8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    d8cc:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    d8ce:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d8d0:	432b      	orrs	r3, r5
    d8d2:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    d8d6:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d8d8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d8dc:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    d8e0:	d1ef      	bne.n	d8c2 <tc_aes128_set_encrypt_key+0x2e>
    d8e2:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d8e4:	4c14      	ldr	r4, [pc, #80]	; (d938 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    d8e6:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    d8e8:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    d8ea:	d116      	bne.n	d91a <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d8ec:	f3c3 4207 	ubfx	r2, r3, #16, #8
    d8f0:	5ca5      	ldrb	r5, [r4, r2]
    d8f2:	0e1a      	lsrs	r2, r3, #24
    d8f4:	5ca2      	ldrb	r2, [r4, r2]
    d8f6:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    d8fa:	f3c3 2507 	ubfx	r5, r3, #8, #8
    d8fe:	5d65      	ldrb	r5, [r4, r5]
    d900:	b2db      	uxtb	r3, r3
    d902:	5ce3      	ldrb	r3, [r4, r3]
    d904:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    d908:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    d90c:	ad0c      	add	r5, sp, #48	; 0x30
    d90e:	f021 0303 	bic.w	r3, r1, #3
    d912:	442b      	add	r3, r5
    d914:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    d918:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    d91a:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    d91e:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    d920:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    d922:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    d924:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    d926:	d1de      	bne.n	d8e6 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    d928:	2001      	movs	r0, #1
}
    d92a:	b00d      	add	sp, #52	; 0x34
    d92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    d92e:	4620      	mov	r0, r4
    d930:	e7fb      	b.n	d92a <tc_aes128_set_encrypt_key+0x96>
    d932:	bf00      	nop
    d934:	0001e9d4 	.word	0x0001e9d4
    d938:	00020c00 	.word	0x00020c00

0000d93c <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    d93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d940:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d942:	6803      	ldr	r3, [r0, #0]
{
    d944:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d946:	9302      	str	r3, [sp, #8]
    d948:	6843      	ldr	r3, [r0, #4]
    d94a:	f8df a1b8 	ldr.w	sl, [pc, #440]	; db04 <compress+0x1c8>
    d94e:	9303      	str	r3, [sp, #12]
    d950:	6883      	ldr	r3, [r0, #8]
    d952:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    d956:	9304      	str	r3, [sp, #16]
    d958:	68c3      	ldr	r3, [r0, #12]
    d95a:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d95c:	6903      	ldr	r3, [r0, #16]
    d95e:	9306      	str	r3, [sp, #24]
    d960:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d962:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d966:	9307      	str	r3, [sp, #28]
    d968:	6983      	ldr	r3, [r0, #24]
    d96a:	9308      	str	r3, [sp, #32]
    d96c:	69c3      	ldr	r3, [r0, #28]
    d96e:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
    d972:	4698      	mov	r8, r3
    d974:	9309      	str	r3, [sp, #36]	; 0x24
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d976:	9b04      	ldr	r3, [sp, #16]
    d978:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    d97a:	59cd      	ldr	r5, [r1, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    d97c:	ab0c      	add	r3, sp, #48	; 0x30
    d97e:	ba2d      	rev	r5, r5
    d980:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    d982:	f85a 3b04 	ldr.w	r3, [sl], #4
	for (i = 0; i < 16; ++i) {
    d986:	3704      	adds	r7, #4
    d988:	eb05 0903 	add.w	r9, r5, r3
	return (((a) >> n) | ((a) << (32 - n)));
    d98c:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d990:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    d994:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    d998:	444d      	add	r5, r9
    d99a:	ea2b 0302 	bic.w	r3, fp, r2
    d99e:	ea02 090c 	and.w	r9, r2, ip
    d9a2:	ea83 0309 	eor.w	r3, r3, r9
    d9a6:	442b      	add	r3, r5
		t2 = Sigma0(a) + Maj(a, b, c);
    d9a8:	9d00      	ldr	r5, [sp, #0]
    d9aa:	f8dd 9000 	ldr.w	r9, [sp]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d9ae:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    d9b0:	4075      	eors	r5, r6
	return (((a) >> n) | ((a) << (32 - n)));
    d9b2:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d9b6:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    d9ba:	4025      	ands	r5, r4
    d9bc:	ea06 0909 	and.w	r9, r6, r9
    d9c0:	ea85 0509 	eor.w	r5, r5, r9
    d9c4:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    d9c8:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    d9ca:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    d9cc:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    d9d0:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    d9d2:	f8dd e000 	ldr.w	lr, [sp]
    d9d6:	46d8      	mov	r8, fp
    d9d8:	f040 8085 	bne.w	dae6 <compress+0x1aa>
    d9dc:	f04f 0a10 	mov.w	sl, #16
    d9e0:	4949      	ldr	r1, [pc, #292]	; (db08 <compress+0x1cc>)
    d9e2:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    d9e4:	4651      	mov	r1, sl
    d9e6:	f10a 0a01 	add.w	sl, sl, #1
    d9ea:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d9ee:	f00a 070f 	and.w	r7, sl, #15
    d9f2:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d9f6:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d9fa:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    d9fe:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    da02:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    da04:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    da08:	f101 070e 	add.w	r7, r1, #14
    da0c:	f007 070f 	and.w	r7, r7, #15
    da10:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    da14:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    da18:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    da1a:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    da1e:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    da22:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    da26:	f001 010f 	and.w	r1, r1, #15
    da2a:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    da2e:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    da32:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    da36:	f851 1c40 	ldr.w	r1, [r1, #-64]
    da3a:	f859 ec40 	ldr.w	lr, [r9, #-64]
	for ( ; i < 64; ++i) {
    da3e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    da42:	4471      	add	r1, lr
		s0 = sigma0(s0);
    da44:	f8dd e004 	ldr.w	lr, [sp, #4]
    da48:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    da4c:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    da50:	4441      	add	r1, r8
		s1 = sigma1(s1);
    da52:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    da56:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    da58:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    da5a:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    da5e:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    da62:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    da66:	ea05 0802 	and.w	r8, r5, r2
    da6a:	970a      	str	r7, [sp, #40]	; 0x28
    da6c:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    da70:	ea2c 0705 	bic.w	r7, ip, r5
    da74:	ea87 0708 	eor.w	r7, r7, r8
    da78:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    da7c:	444f      	add	r7, r9
    da7e:	4477      	add	r7, lr
    da80:	4439      	add	r1, r7
    da82:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
    da84:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    da88:	ea84 0b06 	eor.w	fp, r4, r6
    da8c:	ea0b 0b03 	and.w	fp, fp, r3
    da90:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    da94:	ea04 0e06 	and.w	lr, r4, r6
		h = g; g = f; f = e; e = d + t1;
    da98:	f8dd 8000 	ldr.w	r8, [sp]
		t2 = Sigma0(a) + Maj(a, b, c);
    da9c:	ea8b 0e0e 	eor.w	lr, fp, lr
    daa0:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    daa4:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
    daa6:	4488      	add	r8, r1
		d = c; c = b; b = a; a = t1 + t2;
    daa8:	46e3      	mov	fp, ip
    daaa:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    daac:	9600      	str	r6, [sp, #0]
    daae:	d121      	bne.n	daf4 <compress+0x1b8>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    dab0:	9f02      	ldr	r7, [sp, #8]
    dab2:	440f      	add	r7, r1
    dab4:	9903      	ldr	r1, [sp, #12]
    dab6:	6007      	str	r7, [r0, #0]
    dab8:	4419      	add	r1, r3
    daba:	9b04      	ldr	r3, [sp, #16]
    dabc:	6041      	str	r1, [r0, #4]
    dabe:	4423      	add	r3, r4
    dac0:	6083      	str	r3, [r0, #8]
    dac2:	9b05      	ldr	r3, [sp, #20]
    dac4:	4433      	add	r3, r6
    dac6:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    dac8:	9b06      	ldr	r3, [sp, #24]
    daca:	4443      	add	r3, r8
    dacc:	6103      	str	r3, [r0, #16]
    dace:	9b07      	ldr	r3, [sp, #28]
    dad0:	442b      	add	r3, r5
    dad2:	6143      	str	r3, [r0, #20]
    dad4:	9b08      	ldr	r3, [sp, #32]
    dad6:	4413      	add	r3, r2
    dad8:	6183      	str	r3, [r0, #24]
    dada:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dadc:	4463      	add	r3, ip
    dade:	61c3      	str	r3, [r0, #28]
}
    dae0:	b01d      	add	sp, #116	; 0x74
    dae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dae6:	46e3      	mov	fp, ip
    dae8:	9600      	str	r6, [sp, #0]
    daea:	4694      	mov	ip, r2
    daec:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
    daee:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
    daf0:	461c      	mov	r4, r3
    daf2:	e742      	b.n	d97a <compress+0x3e>
    daf4:	4694      	mov	ip, r2
    daf6:	4626      	mov	r6, r4
    daf8:	462a      	mov	r2, r5
    dafa:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    dafc:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    dafe:	460b      	mov	r3, r1
    db00:	e770      	b.n	d9e4 <compress+0xa8>
    db02:	bf00      	nop
    db04:	0001ecbc 	.word	0x0001ecbc
    db08:	0001ecfc 	.word	0x0001ecfc

0000db0c <tc_sha256_init>:
{
    db0c:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    db0e:	4604      	mov	r4, r0
    db10:	b1c8      	cbz	r0, db46 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    db12:	2270      	movs	r2, #112	; 0x70
    db14:	2100      	movs	r1, #0
    db16:	f00d fce8 	bl	1b4ea <_set>
	s->iv[1] = 0xbb67ae85;
    db1a:	4b0b      	ldr	r3, [pc, #44]	; (db48 <tc_sha256_init+0x3c>)
    db1c:	4a0b      	ldr	r2, [pc, #44]	; (db4c <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    db1e:	490c      	ldr	r1, [pc, #48]	; (db50 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    db20:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    db24:	4b0b      	ldr	r3, [pc, #44]	; (db54 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    db26:	480c      	ldr	r0, [pc, #48]	; (db58 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    db28:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    db2c:	4b0b      	ldr	r3, [pc, #44]	; (db5c <tc_sha256_init+0x50>)
    db2e:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    db32:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    db34:	4b0a      	ldr	r3, [pc, #40]	; (db60 <tc_sha256_init+0x54>)
    db36:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    db38:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    db3c:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    db40:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    db44:	61e3      	str	r3, [r4, #28]
}
    db46:	bd10      	pop	{r4, pc}
    db48:	bb67ae85 	.word	0xbb67ae85
    db4c:	6a09e667 	.word	0x6a09e667
    db50:	3c6ef372 	.word	0x3c6ef372
    db54:	a54ff53a 	.word	0xa54ff53a
    db58:	510e527f 	.word	0x510e527f
    db5c:	9b05688c 	.word	0x9b05688c
    db60:	1f83d9ab 	.word	0x1f83d9ab

0000db64 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    db64:	4a0a      	ldr	r2, [pc, #40]	; (db90 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    db66:	490b      	ldr	r1, [pc, #44]	; (db94 <arch_swap+0x30>)
	_current->arch.basepri = key;
    db68:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    db6a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    db6c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
    db70:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    db74:	4908      	ldr	r1, [pc, #32]	; (db98 <arch_swap+0x34>)
    db76:	684b      	ldr	r3, [r1, #4]
    db78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    db7c:	604b      	str	r3, [r1, #4]
    db7e:	2300      	movs	r3, #0
    db80:	f383 8811 	msr	BASEPRI, r3
    db84:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    db88:	6893      	ldr	r3, [r2, #8]
}
    db8a:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    db8e:	4770      	bx	lr
    db90:	2000b14c 	.word	0x2000b14c
    db94:	0001f328 	.word	0x0001f328
    db98:	e000ed00 	.word	0xe000ed00

0000db9c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    db9c:	4914      	ldr	r1, [pc, #80]	; (dbf0 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    db9e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    dba0:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    dba4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    dba6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    dbaa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    dbae:	2020      	movs	r0, #32
    msr BASEPRI, r0
    dbb0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    dbb4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    dbb8:	4f0e      	ldr	r7, [pc, #56]	; (dbf4 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    dbba:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    dbbe:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    dbc0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    dbc2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    dbc4:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    dbc8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    dbca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    dbce:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    dbd2:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    dbd6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    dbda:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    dbde:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    dbe2:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    dbe4:	f00e f8c4 	bl	1bd70 <configure_builtin_stack_guard>
    pop {r2, lr}
    dbe8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    dbec:	4770      	bx	lr
    dbee:	0000      	.short	0x0000
    ldr r1, =_kernel
    dbf0:	2000b14c 	.word	0x2000b14c
    ldr v4, =_SCS_ICSR
    dbf4:	e000ed04 	.word	0xe000ed04

0000dbf8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    dbf8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    dbfc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    dbfe:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    dc02:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    dc06:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    dc08:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    dc0c:	2902      	cmp	r1, #2
    beq _oops
    dc0e:	d0ff      	beq.n	dc10 <_oops>

0000dc10 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    dc10:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    dc12:	f00e f8b1 	bl	1bd78 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    dc16:	bd01      	pop	{r0, pc}

0000dc18 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    dc18:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    dc1a:	2b00      	cmp	r3, #0
    dc1c:	db08      	blt.n	dc30 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    dc1e:	2201      	movs	r2, #1
    dc20:	f000 001f 	and.w	r0, r0, #31
    dc24:	fa02 f000 	lsl.w	r0, r2, r0
    dc28:	4a02      	ldr	r2, [pc, #8]	; (dc34 <arch_irq_enable+0x1c>)
    dc2a:	095b      	lsrs	r3, r3, #5
    dc2c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    dc30:	4770      	bx	lr
    dc32:	bf00      	nop
    dc34:	e000e100 	.word	0xe000e100

0000dc38 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    dc38:	4b05      	ldr	r3, [pc, #20]	; (dc50 <arch_irq_is_enabled+0x18>)
    dc3a:	0942      	lsrs	r2, r0, #5
    dc3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    dc40:	2301      	movs	r3, #1
    dc42:	f000 001f 	and.w	r0, r0, #31
    dc46:	fa03 f000 	lsl.w	r0, r3, r0
}
    dc4a:	4010      	ands	r0, r2
    dc4c:	4770      	bx	lr
    dc4e:	bf00      	nop
    dc50:	e000e100 	.word	0xe000e100

0000dc54 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    dc54:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    dc56:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    dc58:	2c07      	cmp	r4, #7
{
    dc5a:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    dc5c:	d908      	bls.n	dc70 <z_arm_irq_priority_set+0x1c>
    dc5e:	490d      	ldr	r1, [pc, #52]	; (dc94 <z_arm_irq_priority_set+0x40>)
    dc60:	480d      	ldr	r0, [pc, #52]	; (dc98 <z_arm_irq_priority_set+0x44>)
    dc62:	225c      	movs	r2, #92	; 0x5c
    dc64:	f00c ff26 	bl	1aab4 <printk>
    dc68:	215c      	movs	r1, #92	; 0x5c
    dc6a:	480a      	ldr	r0, [pc, #40]	; (dc94 <z_arm_irq_priority_set+0x40>)
    dc6c:	f00d f9c8 	bl	1b000 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    dc70:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    dc72:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc74:	bfac      	ite	ge
    dc76:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc7a:	4b08      	ldrlt	r3, [pc, #32]	; (dc9c <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc7c:	ea4f 1444 	mov.w	r4, r4, lsl #5
    dc80:	b2e4      	uxtb	r4, r4
    dc82:	bfab      	itete	ge
    dc84:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc88:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc8c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    dc90:	555c      	strblt	r4, [r3, r5]
}
    dc92:	bd38      	pop	{r3, r4, r5, pc}
    dc94:	00020d00 	.word	0x00020d00
    dc98:	0002003d 	.word	0x0002003d
    dc9c:	e000ed14 	.word	0xe000ed14

0000dca0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    dca0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    dca4:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    dca6:	490b      	ldr	r1, [pc, #44]	; (dcd4 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    dca8:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    dcac:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    dcae:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    dcb2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    dcb6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    dcb8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    dcbc:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    dcc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    dcc4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    dcc8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    dcca:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    dccc:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    dcce:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    dcd2:	4770      	bx	lr
    dcd4:	0001ab91 	.word	0x0001ab91

0000dcd8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    dcd8:	4604      	mov	r4, r0
    dcda:	b508      	push	{r3, lr}
    dcdc:	460e      	mov	r6, r1
    dcde:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    dce0:	f000 faf6 	bl	e2d0 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    dce4:	4b08      	ldr	r3, [pc, #32]	; (dd08 <arch_switch_to_main_thread+0x30>)
    dce6:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    dce8:	6f63      	ldr	r3, [r4, #116]	; 0x74
    dcea:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    dcee:	4628      	mov	r0, r5
    dcf0:	f386 8809 	msr	PSP, r6
    dcf4:	2100      	movs	r1, #0
    dcf6:	b663      	cpsie	if
    dcf8:	f381 8811 	msr	BASEPRI, r1
    dcfc:	f3bf 8f6f 	isb	sy
    dd00:	2200      	movs	r2, #0
    dd02:	2300      	movs	r3, #0
    dd04:	f00c ff44 	bl	1ab90 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    dd08:	2000b14c 	.word	0x2000b14c

0000dd0c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    dd0c:	4901      	ldr	r1, [pc, #4]	; (dd14 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    dd0e:	2210      	movs	r2, #16
	str	r2, [r1]
    dd10:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    dd12:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    dd14:	e000ed10 	.word	0xe000ed10

0000dd18 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    dd18:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    dd1a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    dd1c:	f380 8811 	msr	BASEPRI, r0
	isb
    dd20:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    dd24:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    dd28:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    dd2a:	b662      	cpsie	i
	isb
    dd2c:	f3bf 8f6f 	isb	sy

	bx	lr
    dd30:	4770      	bx	lr
    dd32:	bf00      	nop

0000dd34 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    dd34:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    dd36:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    dd38:	f381 8811 	msr	BASEPRI, r1

	wfe
    dd3c:	bf20      	wfe

	msr	BASEPRI, r0
    dd3e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    dd42:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    dd44:	4770      	bx	lr
    dd46:	bf00      	nop

0000dd48 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    dd48:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dd4a:	4605      	mov	r5, r0

	if (esf != NULL) {
    dd4c:	460c      	mov	r4, r1
    dd4e:	b1c9      	cbz	r1, dd84 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    dd50:	688b      	ldr	r3, [r1, #8]
    dd52:	4810      	ldr	r0, [pc, #64]	; (dd94 <z_arm_fatal_error+0x4c>)
    dd54:	9300      	str	r3, [sp, #0]
    dd56:	e9d1 2300 	ldrd	r2, r3, [r1]
    dd5a:	2145      	movs	r1, #69	; 0x45
    dd5c:	f00c feaa 	bl	1aab4 <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    dd60:	6963      	ldr	r3, [r4, #20]
    dd62:	2145      	movs	r1, #69	; 0x45
    dd64:	9300      	str	r3, [sp, #0]
    dd66:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    dd6a:	480b      	ldr	r0, [pc, #44]	; (dd98 <z_arm_fatal_error+0x50>)
    dd6c:	f00c fea2 	bl	1aab4 <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    dd70:	2145      	movs	r1, #69	; 0x45
    dd72:	69e2      	ldr	r2, [r4, #28]
    dd74:	4809      	ldr	r0, [pc, #36]	; (dd9c <z_arm_fatal_error+0x54>)
    dd76:	f00c fe9d 	bl	1aab4 <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    dd7a:	2145      	movs	r1, #69	; 0x45
    dd7c:	69a2      	ldr	r2, [r4, #24]
    dd7e:	4808      	ldr	r0, [pc, #32]	; (dda0 <z_arm_fatal_error+0x58>)
    dd80:	f00c fe98 	bl	1aab4 <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    dd84:	4621      	mov	r1, r4
    dd86:	4628      	mov	r0, r5
}
    dd88:	b003      	add	sp, #12
    dd8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    dd8e:	f009 bf0f 	b.w	17bb0 <z_fatal_error>
    dd92:	bf00      	nop
    dd94:	00020d36 	.word	0x00020d36
    dd98:	00020d6a 	.word	0x00020d6a
    dd9c:	00020d9e 	.word	0x00020d9e
    dda0:	00020db2 	.word	0x00020db2

0000dda4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    dda4:	bf30      	wfi
    b z_SysNmiOnReset
    dda6:	f7ff bffd 	b.w	dda4 <z_SysNmiOnReset>
    ddaa:	bf00      	nop

0000ddac <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    ddac:	4a0e      	ldr	r2, [pc, #56]	; (dde8 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    ddae:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    ddb0:	4b0e      	ldr	r3, [pc, #56]	; (ddec <z_arm_prep_c+0x40>)
    ddb2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    ddb6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    ddb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    ddbc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    ddc0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    ddc4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    ddc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    ddcc:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    ddd0:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    ddd4:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    ddd8:	f009 ff76 	bl	17cc8 <z_bss_zero>
	z_data_copy();
    dddc:	f00b ffac 	bl	19d38 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    dde0:	f000 fa48 	bl	e274 <z_arm_interrupt_init>
	z_cstart();
    dde4:	f009 ff94 	bl	17d10 <z_cstart>
    dde8:	00008000 	.word	0x00008000
    ddec:	e000ed00 	.word	0xe000ed00

0000ddf0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    ddf0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    ddf2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    ddf4:	4a0b      	ldr	r2, [pc, #44]	; (de24 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    ddf6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    ddf8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    ddfa:	bf1e      	ittt	ne
	movne	r1, #0
    ddfc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    ddfe:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    de00:	f010 f9e3 	blne	1e1ca <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    de04:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    de06:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    de0a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    de0e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    de12:	4905      	ldr	r1, [pc, #20]	; (de28 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    de14:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    de16:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    de18:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    de1a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    de1e:	4903      	ldr	r1, [pc, #12]	; (de2c <_isr_wrapper+0x3c>)
	bx r1
    de20:	4708      	bx	r1
    de22:	0000      	.short	0x0000
	ldr r2, =_kernel
    de24:	2000b14c 	.word	0x2000b14c
	ldr r1, =_sw_isr_table
    de28:	0001e5cc 	.word	0x0001e5cc
	ldr r1, =z_arm_int_exit
    de2c:	0000e235 	.word	0x0000e235

0000de30 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    de30:	f00d f905 	bl	1b03e <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    de34:	2020      	movs	r0, #32
    msr BASEPRI, r0
    de36:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    de3a:	4808      	ldr	r0, [pc, #32]	; (de5c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    de3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    de40:	1840      	adds	r0, r0, r1
    msr PSP, r0
    de42:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    de46:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    de4a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    de4c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    de4e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    de52:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    de56:	f7ff ffa9 	bl	ddac <z_arm_prep_c>
    de5a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    de5c:	20013c50 	.word	0x20013c50

0000de60 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    de60:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    de64:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    de68:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    de6a:	4672      	mov	r2, lr
	bl z_arm_fault
    de6c:	f000 f91a 	bl	e0a4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    de70:	bd01      	pop	{r0, pc}
    de72:	bf00      	nop

0000de74 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    de74:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    de76:	4c21      	ldr	r4, [pc, #132]	; (defc <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    de78:	2145      	movs	r1, #69	; 0x45
    de7a:	4821      	ldr	r0, [pc, #132]	; (df00 <usage_fault.constprop.0+0x8c>)
    de7c:	f00c fe1a 	bl	1aab4 <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    de80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de82:	019d      	lsls	r5, r3, #6
    de84:	d503      	bpl.n	de8e <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    de86:	2145      	movs	r1, #69	; 0x45
    de88:	481e      	ldr	r0, [pc, #120]	; (df04 <usage_fault.constprop.0+0x90>)
    de8a:	f00c fe13 	bl	1aab4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    de8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de90:	01dc      	lsls	r4, r3, #7
    de92:	d503      	bpl.n	de9c <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    de94:	2145      	movs	r1, #69	; 0x45
    de96:	481c      	ldr	r0, [pc, #112]	; (df08 <usage_fault.constprop.0+0x94>)
    de98:	f00c fe0c 	bl	1aab4 <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    de9c:	4d17      	ldr	r5, [pc, #92]	; (defc <usage_fault.constprop.0+0x88>)
    de9e:	6aac      	ldr	r4, [r5, #40]	; 0x28
    dea0:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    dea4:	d004      	beq.n	deb0 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    dea6:	2145      	movs	r1, #69	; 0x45
    dea8:	4818      	ldr	r0, [pc, #96]	; (df0c <usage_fault.constprop.0+0x98>)
    deaa:	f00c fe03 	bl	1aab4 <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    deae:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    deb0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    deb2:	0318      	lsls	r0, r3, #12
    deb4:	d503      	bpl.n	debe <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    deb6:	2145      	movs	r1, #69	; 0x45
    deb8:	4815      	ldr	r0, [pc, #84]	; (df10 <usage_fault.constprop.0+0x9c>)
    deba:	f00c fdfb 	bl	1aab4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    debe:	4d0f      	ldr	r5, [pc, #60]	; (defc <usage_fault.constprop.0+0x88>)
    dec0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dec2:	0359      	lsls	r1, r3, #13
    dec4:	d503      	bpl.n	dece <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    dec6:	2145      	movs	r1, #69	; 0x45
    dec8:	4812      	ldr	r0, [pc, #72]	; (df14 <usage_fault.constprop.0+0xa0>)
    deca:	f00c fdf3 	bl	1aab4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    dece:	6aab      	ldr	r3, [r5, #40]	; 0x28
    ded0:	039a      	lsls	r2, r3, #14
    ded2:	d503      	bpl.n	dedc <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    ded4:	2145      	movs	r1, #69	; 0x45
    ded6:	4810      	ldr	r0, [pc, #64]	; (df18 <usage_fault.constprop.0+0xa4>)
    ded8:	f00c fdec 	bl	1aab4 <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    dedc:	4d07      	ldr	r5, [pc, #28]	; (defc <usage_fault.constprop.0+0x88>)
    dede:	6aab      	ldr	r3, [r5, #40]	; 0x28
    dee0:	03db      	lsls	r3, r3, #15
    dee2:	d503      	bpl.n	deec <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    dee4:	2145      	movs	r1, #69	; 0x45
    dee6:	480d      	ldr	r0, [pc, #52]	; (df1c <usage_fault.constprop.0+0xa8>)
    dee8:	f00c fde4 	bl	1aab4 <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    deec:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    deee:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    def0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    def4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    def8:	62ab      	str	r3, [r5, #40]	; 0x28
}
    defa:	bd38      	pop	{r3, r4, r5, pc}
    defc:	e000ed00 	.word	0xe000ed00
    df00:	00020de5 	.word	0x00020de5
    df04:	00020e02 	.word	0x00020e02
    df08:	00020e1a 	.word	0x00020e1a
    df0c:	00020e39 	.word	0x00020e39
    df10:	00020e68 	.word	0x00020e68
    df14:	00020e8b 	.word	0x00020e8b
    df18:	00020eb5 	.word	0x00020eb5
    df1c:	00020ed4 	.word	0x00020ed4

0000df20 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    df20:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    df22:	4c23      	ldr	r4, [pc, #140]	; (dfb0 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    df24:	4606      	mov	r6, r0
    df26:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    df28:	4822      	ldr	r0, [pc, #136]	; (dfb4 <bus_fault.constprop.0+0x94>)
    df2a:	2145      	movs	r1, #69	; 0x45
    df2c:	f00c fdc2 	bl	1aab4 <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    df30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df32:	04d9      	lsls	r1, r3, #19
    df34:	d503      	bpl.n	df3e <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    df36:	2145      	movs	r1, #69	; 0x45
    df38:	481f      	ldr	r0, [pc, #124]	; (dfb8 <bus_fault.constprop.0+0x98>)
    df3a:	f00c fdbb 	bl	1aab4 <printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    df3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df40:	051a      	lsls	r2, r3, #20
    df42:	d503      	bpl.n	df4c <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    df44:	2145      	movs	r1, #69	; 0x45
    df46:	481d      	ldr	r0, [pc, #116]	; (dfbc <bus_fault.constprop.0+0x9c>)
    df48:	f00c fdb4 	bl	1aab4 <printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    df4c:	4c18      	ldr	r4, [pc, #96]	; (dfb0 <bus_fault.constprop.0+0x90>)
    df4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df50:	059b      	lsls	r3, r3, #22
    df52:	d510      	bpl.n	df76 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    df54:	481a      	ldr	r0, [pc, #104]	; (dfc0 <bus_fault.constprop.0+0xa0>)
    df56:	2145      	movs	r1, #69	; 0x45
    df58:	f00c fdac 	bl	1aab4 <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    df5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    df5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df60:	0418      	lsls	r0, r3, #16
    df62:	d508      	bpl.n	df76 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    df64:	2145      	movs	r1, #69	; 0x45
    df66:	4817      	ldr	r0, [pc, #92]	; (dfc4 <bus_fault.constprop.0+0xa4>)
    df68:	f00c fda4 	bl	1aab4 <printk>
			if (from_hard_fault) {
    df6c:	b11e      	cbz	r6, df76 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    df6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    df74:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    df76:	4c0e      	ldr	r4, [pc, #56]	; (dfb0 <bus_fault.constprop.0+0x90>)
    df78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df7a:	0559      	lsls	r1, r3, #21
    df7c:	d503      	bpl.n	df86 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    df7e:	2145      	movs	r1, #69	; 0x45
    df80:	4811      	ldr	r0, [pc, #68]	; (dfc8 <bus_fault.constprop.0+0xa8>)
    df82:	f00c fd97 	bl	1aab4 <printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    df86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df88:	05da      	lsls	r2, r3, #23
    df8a:	d50b      	bpl.n	dfa4 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    df8c:	2145      	movs	r1, #69	; 0x45
    df8e:	480f      	ldr	r0, [pc, #60]	; (dfcc <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    df90:	f00c fd90 	bl	1aab4 <printk>
	*recoverable = memory_fault_recoverable(esf);
    df94:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    df96:	4a06      	ldr	r2, [pc, #24]	; (dfb0 <bus_fault.constprop.0+0x90>)
    df98:	6a93      	ldr	r3, [r2, #40]	; 0x28
    df9a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    df9e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    dfa0:	7028      	strb	r0, [r5, #0]
}
    dfa2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    dfa4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dfa6:	049b      	lsls	r3, r3, #18
    dfa8:	d5f4      	bpl.n	df94 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    dfaa:	2145      	movs	r1, #69	; 0x45
    dfac:	4808      	ldr	r0, [pc, #32]	; (dfd0 <bus_fault.constprop.0+0xb0>)
    dfae:	e7ef      	b.n	df90 <bus_fault.constprop.0+0x70>
    dfb0:	e000ed00 	.word	0xe000ed00
    dfb4:	00020f04 	.word	0x00020f04
    dfb8:	00020f1f 	.word	0x00020f1f
    dfbc:	00020f35 	.word	0x00020f35
    dfc0:	00020f4d 	.word	0x00020f4d
    dfc4:	00020f6b 	.word	0x00020f6b
    dfc8:	00020f85 	.word	0x00020f85
    dfcc:	00020fa5 	.word	0x00020fa5
    dfd0:	00020fc2 	.word	0x00020fc2

0000dfd4 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dfd4:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dfd6:	4c29      	ldr	r4, [pc, #164]	; (e07c <mem_manage_fault.constprop.0+0xa8>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    dfd8:	4606      	mov	r6, r0
    dfda:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    dfdc:	4828      	ldr	r0, [pc, #160]	; (e080 <mem_manage_fault.constprop.0+0xac>)
    dfde:	2145      	movs	r1, #69	; 0x45
    dfe0:	f00c fd68 	bl	1aab4 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    dfe4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dfe6:	06d8      	lsls	r0, r3, #27
    dfe8:	d503      	bpl.n	dff2 <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    dfea:	2145      	movs	r1, #69	; 0x45
    dfec:	4825      	ldr	r0, [pc, #148]	; (e084 <mem_manage_fault.constprop.0+0xb0>)
    dfee:	f00c fd61 	bl	1aab4 <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    dff2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dff4:	0719      	lsls	r1, r3, #28
    dff6:	d503      	bpl.n	e000 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    dff8:	2145      	movs	r1, #69	; 0x45
    dffa:	4823      	ldr	r0, [pc, #140]	; (e088 <mem_manage_fault.constprop.0+0xb4>)
    dffc:	f00c fd5a 	bl	1aab4 <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    e000:	4c1e      	ldr	r4, [pc, #120]	; (e07c <mem_manage_fault.constprop.0+0xa8>)
    e002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e004:	079a      	lsls	r2, r3, #30
    e006:	d510      	bpl.n	e02a <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    e008:	2145      	movs	r1, #69	; 0x45
    e00a:	4820      	ldr	r0, [pc, #128]	; (e08c <mem_manage_fault.constprop.0+0xb8>)
    e00c:	f00c fd52 	bl	1aab4 <printk>
		uint32_t temp = SCB->MMFAR;
    e010:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    e012:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e014:	061b      	lsls	r3, r3, #24
    e016:	d508      	bpl.n	e02a <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    e018:	2145      	movs	r1, #69	; 0x45
    e01a:	481d      	ldr	r0, [pc, #116]	; (e090 <mem_manage_fault.constprop.0+0xbc>)
    e01c:	f00c fd4a 	bl	1aab4 <printk>
			if (from_hard_fault) {
    e020:	b11e      	cbz	r6, e02a <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    e022:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    e028:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    e02a:	4c14      	ldr	r4, [pc, #80]	; (e07c <mem_manage_fault.constprop.0+0xa8>)
    e02c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e02e:	07d8      	lsls	r0, r3, #31
    e030:	d503      	bpl.n	e03a <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    e032:	2145      	movs	r1, #69	; 0x45
    e034:	4817      	ldr	r0, [pc, #92]	; (e094 <mem_manage_fault.constprop.0+0xc0>)
    e036:	f00c fd3d 	bl	1aab4 <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    e03a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e03c:	0699      	lsls	r1, r3, #26
    e03e:	d503      	bpl.n	e048 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    e040:	2145      	movs	r1, #69	; 0x45
    e042:	4815      	ldr	r0, [pc, #84]	; (e098 <mem_manage_fault.constprop.0+0xc4>)
    e044:	f00c fd36 	bl	1aab4 <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    e048:	4b0c      	ldr	r3, [pc, #48]	; (e07c <mem_manage_fault.constprop.0+0xa8>)
    e04a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e04c:	06d2      	lsls	r2, r2, #27
    e04e:	d402      	bmi.n	e056 <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    e050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    e052:	079b      	lsls	r3, r3, #30
    e054:	d50a      	bpl.n	e06c <mem_manage_fault.constprop.0+0x98>
	__ASSERT(0,
    e056:	4911      	ldr	r1, [pc, #68]	; (e09c <mem_manage_fault.constprop.0+0xc8>)
    e058:	4811      	ldr	r0, [pc, #68]	; (e0a0 <mem_manage_fault.constprop.0+0xcc>)
    e05a:	f240 1247 	movw	r2, #327	; 0x147
    e05e:	f00c fd29 	bl	1aab4 <printk>
    e062:	f240 1147 	movw	r1, #327	; 0x147
    e066:	480d      	ldr	r0, [pc, #52]	; (e09c <mem_manage_fault.constprop.0+0xc8>)
    e068:	f00c ffca 	bl	1b000 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    e06c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    e06e:	4a03      	ldr	r2, [pc, #12]	; (e07c <mem_manage_fault.constprop.0+0xa8>)
    e070:	6a93      	ldr	r3, [r2, #40]	; 0x28
    e072:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    e076:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    e078:	7028      	strb	r0, [r5, #0]
}
    e07a:	bd70      	pop	{r4, r5, r6, pc}
    e07c:	e000ed00 	.word	0xe000ed00
    e080:	00020ff6 	.word	0x00020ff6
    e084:	00021011 	.word	0x00021011
    e088:	00020f35 	.word	0x00020f35
    e08c:	00021049 	.word	0x00021049
    e090:	00021066 	.word	0x00021066
    e094:	00021081 	.word	0x00021081
    e098:	00020fc2 	.word	0x00020fc2
    e09c:	000210a5 	.word	0x000210a5
    e0a0:	0002003d 	.word	0x0002003d

0000e0a4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    e0a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e0a8:	4b51      	ldr	r3, [pc, #324]	; (e1f0 <z_arm_fault+0x14c>)
{
    e0aa:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e0ac:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    e0b0:	4689      	mov	r9, r1
    e0b2:	4614      	mov	r4, r2
    e0b4:	2600      	movs	r6, #0
    e0b6:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    e0b8:	f3c8 0708 	ubfx	r7, r8, #0, #9
    e0bc:	f386 8811 	msr	BASEPRI, r6
    e0c0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    e0c4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    e0c8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    e0cc:	d111      	bne.n	e0f2 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    e0ce:	07d0      	lsls	r0, r2, #31
    e0d0:	d40f      	bmi.n	e0f2 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    e0d2:	0651      	lsls	r1, r2, #25
    e0d4:	d403      	bmi.n	e0de <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    e0d6:	0722      	lsls	r2, r4, #28
    e0d8:	d408      	bmi.n	e0ec <z_arm_fault+0x48>
			*nested_exc = true;
    e0da:	2601      	movs	r6, #1
    e0dc:	e008      	b.n	e0f0 <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    e0de:	2145      	movs	r1, #69	; 0x45
    e0e0:	4844      	ldr	r0, [pc, #272]	; (e1f4 <z_arm_fault+0x150>)
    e0e2:	f00c fce7 	bl	1aab4 <printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    e0e6:	f014 0404 	ands.w	r4, r4, #4
    e0ea:	d000      	beq.n	e0ee <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)psp;
    e0ec:	464d      	mov	r5, r9
	*nested_exc = false;
    e0ee:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    e0f0:	b95d      	cbnz	r5, e10a <z_arm_fault+0x66>
    e0f2:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    e0f6:	4940      	ldr	r1, [pc, #256]	; (e1f8 <z_arm_fault+0x154>)
    e0f8:	4840      	ldr	r0, [pc, #256]	; (e1fc <z_arm_fault+0x158>)
    e0fa:	f00c fcdb 	bl	1aab4 <printk>
    e0fe:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    e102:	483d      	ldr	r0, [pc, #244]	; (e1f8 <z_arm_fault+0x154>)
    e104:	f00c ff7c 	bl	1b000 <assert_post_action>
    e108:	2500      	movs	r5, #0
	*recoverable = false;
    e10a:	2400      	movs	r4, #0
    e10c:	1efb      	subs	r3, r7, #3
    e10e:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    e112:	2b09      	cmp	r3, #9
    e114:	d85a      	bhi.n	e1cc <z_arm_fault+0x128>
    e116:	e8df f003 	tbb	[pc, r3]
    e11a:	4e05      	.short	0x4e05
    e11c:	59593252 	.word	0x59593252
    e120:	56595959 	.word	0x56595959
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e124:	4f32      	ldr	r7, [pc, #200]	; (e1f0 <z_arm_fault+0x14c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    e126:	2145      	movs	r1, #69	; 0x45
    e128:	4835      	ldr	r0, [pc, #212]	; (e200 <z_arm_fault+0x15c>)
    e12a:	f00c fcc3 	bl	1aab4 <printk>
	*recoverable = false;
    e12e:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    e132:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    e134:	f014 0402 	ands.w	r4, r4, #2
    e138:	d005      	beq.n	e146 <z_arm_fault+0xa2>
		PR_EXC("  Bus fault on vector table read");
    e13a:	2145      	movs	r1, #69	; 0x45
    e13c:	4831      	ldr	r0, [pc, #196]	; (e204 <z_arm_fault+0x160>)
	PR_FAULT_INFO(
    e13e:	f00c fcb9 	bl	1aab4 <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    e142:	2400      	movs	r4, #0
}
    e144:	e01e      	b.n	e184 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    e146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e148:	005b      	lsls	r3, r3, #1
    e14a:	d51b      	bpl.n	e184 <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    e14c:	2145      	movs	r1, #69	; 0x45
    e14e:	482e      	ldr	r0, [pc, #184]	; (e208 <z_arm_fault+0x164>)
    e150:	f00c fcb0 	bl	1aab4 <printk>
		if (SCB_MMFSR != 0) {
    e154:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    e158:	b12b      	cbz	r3, e166 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    e15a:	2001      	movs	r0, #1
    e15c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    e160:	f7ff ff38 	bl	dfd4 <mem_manage_fault.constprop.0>
    e164:	e00d      	b.n	e182 <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    e166:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    e16a:	b12b      	cbz	r3, e178 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    e16c:	2001      	movs	r0, #1
    e16e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    e172:	f7ff fed5 	bl	df20 <bus_fault.constprop.0>
    e176:	e004      	b.n	e182 <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    e178:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    e17a:	b29b      	uxth	r3, r3
    e17c:	b113      	cbz	r3, e184 <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    e17e:	f7ff fe79 	bl	de74 <usage_fault.constprop.0>
    e182:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    e184:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e188:	b993      	cbnz	r3, e1b0 <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    e18a:	2220      	movs	r2, #32
    e18c:	4629      	mov	r1, r5
    e18e:	a802      	add	r0, sp, #8
    e190:	f00d fed4 	bl	1bf3c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    e194:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e196:	b336      	cbz	r6, e1e6 <z_arm_fault+0x142>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    e198:	f3c3 0208 	ubfx	r2, r3, #0, #9
    e19c:	b922      	cbnz	r2, e1a8 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    e19e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    e1a2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e1a6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    e1a8:	4620      	mov	r0, r4
    e1aa:	a902      	add	r1, sp, #8
    e1ac:	f7ff fdcc 	bl	dd48 <z_arm_fatal_error>
}
    e1b0:	b00b      	add	sp, #44	; 0x2c
    e1b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    e1b6:	2000      	movs	r0, #0
    e1b8:	f10d 0107 	add.w	r1, sp, #7
    e1bc:	e7d0      	b.n	e160 <z_arm_fault+0xbc>
		reason = bus_fault(esf, 0, recoverable);
    e1be:	2000      	movs	r0, #0
    e1c0:	f10d 0107 	add.w	r1, sp, #7
    e1c4:	e7d5      	b.n	e172 <z_arm_fault+0xce>
	PR_FAULT_INFO(
    e1c6:	2145      	movs	r1, #69	; 0x45
    e1c8:	4810      	ldr	r0, [pc, #64]	; (e20c <z_arm_fault+0x168>)
    e1ca:	e7b8      	b.n	e13e <z_arm_fault+0x9a>
	PR_FAULT_INFO("***** %s %d) *****",
    e1cc:	4910      	ldr	r1, [pc, #64]	; (e210 <z_arm_fault+0x16c>)
    e1ce:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    e1d2:	4a10      	ldr	r2, [pc, #64]	; (e214 <z_arm_fault+0x170>)
    e1d4:	4810      	ldr	r0, [pc, #64]	; (e218 <z_arm_fault+0x174>)
    e1d6:	bf08      	it	eq
    e1d8:	460a      	moveq	r2, r1
    e1da:	f1a7 0310 	sub.w	r3, r7, #16
    e1de:	2145      	movs	r1, #69	; 0x45
    e1e0:	f00c fc68 	bl	1aab4 <printk>
    e1e4:	e7ad      	b.n	e142 <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    e1e6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    e1ea:	f023 0301 	bic.w	r3, r3, #1
    e1ee:	e7da      	b.n	e1a6 <z_arm_fault+0x102>
    e1f0:	e000ed00 	.word	0xe000ed00
    e1f4:	0002110d 	.word	0x0002110d
    e1f8:	000210a5 	.word	0x000210a5
    e1fc:	0002003d 	.word	0x0002003d
    e200:	00021135 	.word	0x00021135
    e204:	00021151 	.word	0x00021151
    e208:	00021177 	.word	0x00021177
    e20c:	0002119b 	.word	0x0002119b
    e210:	000210df 	.word	0x000210df
    e214:	000210f4 	.word	0x000210f4
    e218:	000211d6 	.word	0x000211d6

0000e21c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    e21c:	4b04      	ldr	r3, [pc, #16]	; (e230 <z_arm_fault_init+0x14>)
    e21e:	695a      	ldr	r2, [r3, #20]
    e220:	f042 0210 	orr.w	r2, r2, #16
    e224:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    e226:	695a      	ldr	r2, [r3, #20]
    e228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    e22c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    e22e:	4770      	bx	lr
    e230:	e000ed00 	.word	0xe000ed00

0000e234 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    e234:	4b04      	ldr	r3, [pc, #16]	; (e248 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    e236:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    e238:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    e23a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    e23c:	d003      	beq.n	e246 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    e23e:	4903      	ldr	r1, [pc, #12]	; (e24c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    e240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    e244:	600a      	str	r2, [r1, #0]

0000e246 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    e246:	4770      	bx	lr
	ldr r3, =_kernel
    e248:	2000b14c 	.word	0x2000b14c
	ldr r1, =_SCS_ICSR
    e24c:	e000ed04 	.word	0xe000ed04

0000e250 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    e250:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    e254:	4905      	ldr	r1, [pc, #20]	; (e26c <sys_arch_reboot+0x1c>)
    e256:	4b06      	ldr	r3, [pc, #24]	; (e270 <sys_arch_reboot+0x20>)
    e258:	68ca      	ldr	r2, [r1, #12]
    e25a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    e25e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    e260:	60cb      	str	r3, [r1, #12]
    e262:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    e266:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    e268:	e7fd      	b.n	e266 <sys_arch_reboot+0x16>
    e26a:	bf00      	nop
    e26c:	e000ed00 	.word	0xe000ed00
    e270:	05fa0004 	.word	0x05fa0004

0000e274 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    e274:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    e276:	2120      	movs	r1, #32
    e278:	4803      	ldr	r0, [pc, #12]	; (e288 <z_arm_interrupt_init+0x14>)
    e27a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    e27c:	3301      	adds	r3, #1
    e27e:	2b45      	cmp	r3, #69	; 0x45
    e280:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    e284:	d1f9      	bne.n	e27a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    e286:	4770      	bx	lr
    e288:	e000e100 	.word	0xe000e100

0000e28c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    e28c:	b508      	push	{r3, lr}
	if (_current == thread) {
    e28e:	4b0e      	ldr	r3, [pc, #56]	; (e2c8 <z_impl_k_thread_abort+0x3c>)
    e290:	689b      	ldr	r3, [r3, #8]
    e292:	4283      	cmp	r3, r0
    e294:	d107      	bne.n	e2a6 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e296:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    e29a:	b193      	cbz	r3, e2c2 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    e29c:	4a0b      	ldr	r2, [pc, #44]	; (e2cc <z_impl_k_thread_abort+0x40>)
    e29e:	6853      	ldr	r3, [r2, #4]
    e2a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    e2a4:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    e2a6:	f00a fe2f 	bl	18f08 <z_thread_single_abort>
	__asm__ volatile(
    e2aa:	f04f 0320 	mov.w	r3, #32
    e2ae:	f3ef 8011 	mrs	r0, BASEPRI
    e2b2:	f383 8811 	msr	BASEPRI, r3
    e2b6:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    e2ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    e2be:	f00f bfd4 	b.w	1e26a <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    e2c2:	f00b fc2f 	bl	19b24 <z_self_abort>
    e2c6:	bf00      	nop
    e2c8:	2000b14c 	.word	0x2000b14c
    e2cc:	e000ed00 	.word	0xe000ed00

0000e2d0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    e2d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    e2d2:	4c09      	ldr	r4, [pc, #36]	; (e2f8 <z_arm_configure_static_mpu_regions+0x28>)
    e2d4:	4a09      	ldr	r2, [pc, #36]	; (e2fc <z_arm_configure_static_mpu_regions+0x2c>)
    e2d6:	4623      	mov	r3, r4
    e2d8:	2101      	movs	r1, #1
    e2da:	4809      	ldr	r0, [pc, #36]	; (e300 <z_arm_configure_static_mpu_regions+0x30>)
    e2dc:	f000 f976 	bl	e5cc <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e2e0:	2300      	movs	r3, #0
    e2e2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    e2e4:	4b07      	ldr	r3, [pc, #28]	; (e304 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e2e6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    e2e8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e2ea:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    e2ec:	9301      	str	r3, [sp, #4]
    e2ee:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    e2f0:	f000 f988 	bl	e604 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    e2f4:	b004      	add	sp, #16
    e2f6:	bd10      	pop	{r4, pc}
    e2f8:	20070000 	.word	0x20070000
    e2fc:	20008000 	.word	0x20008000
    e300:	0001edbc 	.word	0x0001edbc
    e304:	200087d8 	.word	0x200087d8

0000e308 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    e308:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e30a:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    e30c:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    e30e:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    e312:	f004 031f 	and.w	r3, r4, #31
    e316:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e318:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e31a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    e31c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    e320:	4905      	ldr	r1, [pc, #20]	; (e338 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    e322:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    e326:	f043 0301 	orr.w	r3, r3, #1
    e32a:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    e32e:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    e332:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    e336:	bd10      	pop	{r4, pc}
    e338:	e000ed00 	.word	0xe000ed00

0000e33c <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    e33c:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    e33e:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    e340:	680c      	ldr	r4, [r1, #0]
{
    e342:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    e344:	890a      	ldrh	r2, [r1, #8]
    e346:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    e348:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e34a:	3b01      	subs	r3, #1
    e34c:	f024 041f 	bic.w	r4, r4, #31
    e350:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    e352:	f002 021f 	and.w	r2, r2, #31
    e356:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e35a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e35e:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e360:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    e362:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    e366:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    e368:	d909      	bls.n	e37e <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e36a:	4602      	mov	r2, r0
    e36c:	2145      	movs	r1, #69	; 0x45
    e36e:	4806      	ldr	r0, [pc, #24]	; (e388 <mpu_configure_region+0x4c>)
    e370:	f00c fba0 	bl	1aab4 <printk>
    e374:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    e378:	4620      	mov	r0, r4
    e37a:	b005      	add	sp, #20
    e37c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    e37e:	4669      	mov	r1, sp
    e380:	f7ff ffc2 	bl	e308 <region_init>
	return region_allocate_and_init(index,
    e384:	e7f8      	b.n	e378 <mpu_configure_region+0x3c>
    e386:	bf00      	nop
    e388:	000211f2 	.word	0x000211f2

0000e38c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e390:	4689      	mov	r9, r1
    e392:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    e394:	4606      	mov	r6, r0
    e396:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    e39a:	4d59      	ldr	r5, [pc, #356]	; (e500 <mpu_configure_regions_and_partition.constprop.0+0x174>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    e39c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    e39e:	45c8      	cmp	r8, r9
    e3a0:	da27      	bge.n	e3f2 <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    e3a2:	f8d6 a004 	ldr.w	sl, [r6, #4]
    e3a6:	f1ba 0f00 	cmp.w	sl, #0
    e3aa:	d045      	beq.n	e438 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    e3ac:	f1ba 0f1f 	cmp.w	sl, #31
    e3b0:	d918      	bls.n	e3e4 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    e3b2:	f01a 0f1f 	tst.w	sl, #31
    e3b6:	d115      	bne.n	e3e4 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    e3b8:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    e3bc:	f01b 0f1f 	tst.w	fp, #31
    e3c0:	d110      	bne.n	e3e4 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e3c2:	4658      	mov	r0, fp
    e3c4:	f00d fce3 	bl	1bd8e <arm_cmse_mpu_region_get>
    e3c8:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e3ca:	eb0a 000b 	add.w	r0, sl, fp
    e3ce:	3801      	subs	r0, #1
    e3d0:	f00d fcdd 	bl	1bd8e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e3d4:	4287      	cmp	r7, r0
    e3d6:	d010      	beq.n	e3fa <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    e3d8:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    e3dc:	463a      	mov	r2, r7
    e3de:	2145      	movs	r1, #69	; 0x45
    e3e0:	4848      	ldr	r0, [pc, #288]	; (e504 <mpu_configure_regions_and_partition.constprop.0+0x178>)
    e3e2:	e002      	b.n	e3ea <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    e3e4:	4642      	mov	r2, r8
    e3e6:	2145      	movs	r1, #69	; 0x45
    e3e8:	4847      	ldr	r0, [pc, #284]	; (e508 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e3ea:	f00c fb63 	bl	1aab4 <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    e3ee:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    e3f2:	4620      	mov	r0, r4
    e3f4:	b005      	add	sp, #20
    e3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    e3fa:	f117 0f16 	cmn.w	r7, #22
    e3fe:	d0ed      	beq.n	e3dc <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    e400:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    e402:	42bb      	cmp	r3, r7
    e404:	dbea      	blt.n	e3dc <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    e406:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e40a:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    e40e:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e412:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    e416:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    e41a:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e41e:	e9d6 3200 	ldrd	r3, r2, [r6]
    e422:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    e424:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    e426:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    e42a:	d11d      	bne.n	e468 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    e42c:	45d3      	cmp	fp, sl
    e42e:	d107      	bne.n	e440 <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    e430:	4631      	mov	r1, r6
    e432:	b2f8      	uxtb	r0, r7
    e434:	f7ff ff82 	bl	e33c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    e438:	f108 0801 	add.w	r8, r8, #1
    e43c:	360c      	adds	r6, #12
    e43e:	e7ae      	b.n	e39e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    e440:	4631      	mov	r1, r6
	MPU->RNR = index;
    e442:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e446:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    e44a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e44e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e452:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e454:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    e458:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    e45a:	f7ff ff6f 	bl	e33c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e45e:	f110 0f16 	cmn.w	r0, #22
    e462:	d0c4      	beq.n	e3ee <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    e464:	1c44      	adds	r4, r0, #1
    e466:	e7e7      	b.n	e438 <mpu_configure_regions_and_partition.constprop.0+0xac>
				regions[i].start - 1);
    e468:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    e46a:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    e46c:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    e46e:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    e472:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    e476:	d108      	bne.n	e48a <mpu_configure_regions_and_partition.constprop.0+0xfe>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e478:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e47c:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e47e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e482:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e484:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    e488:	e7e7      	b.n	e45a <mpu_configure_regions_and_partition.constprop.0+0xce>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e48a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    e48e:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e492:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e494:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e498:	4631      	mov	r1, r6
    e49a:	f7ff ff4f 	bl	e33c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e49e:	f110 0f16 	cmn.w	r0, #22
    e4a2:	d0a4      	beq.n	e3ee <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    e4a4:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e4a8:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    e4ac:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    e4b0:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    e4b4:	f362 0304 	bfi	r3, r2, #0, #5
    e4b8:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e4bc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    e4c0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e4c4:	085b      	lsrs	r3, r3, #1
    e4c6:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    e4ca:	e9d6 3100 	ldrd	r3, r1, [r6]
    e4ce:	440b      	add	r3, r1
    e4d0:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    e4d2:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e4d6:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    e4d8:	445b      	add	r3, fp
    e4da:	eba3 030a 	sub.w	r3, r3, sl
    e4de:	b2c0      	uxtb	r0, r0
    e4e0:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e4e4:	2807      	cmp	r0, #7
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e4e6:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    e4ea:	9303      	str	r3, [sp, #12]
    e4ec:	d903      	bls.n	e4f6 <mpu_configure_regions_and_partition.constprop.0+0x16a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e4ee:	4602      	mov	r2, r0
    e4f0:	2145      	movs	r1, #69	; 0x45
    e4f2:	4806      	ldr	r0, [pc, #24]	; (e50c <mpu_configure_regions_and_partition.constprop.0+0x180>)
    e4f4:	e779      	b.n	e3ea <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    e4f6:	4669      	mov	r1, sp
    e4f8:	f7ff ff06 	bl	e308 <region_init>
    e4fc:	e7b2      	b.n	e464 <mpu_configure_regions_and_partition.constprop.0+0xd8>
    e4fe:	bf00      	nop
    e500:	e000ed00 	.word	0xe000ed00
    e504:	00021245 	.word	0x00021245
    e508:	0002121d 	.word	0x0002121d
    e50c:	000211f2 	.word	0x000211f2

0000e510 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e510:	2205      	movs	r2, #5
    e512:	4b04      	ldr	r3, [pc, #16]	; (e524 <arm_core_mpu_enable+0x14>)
    e514:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    e518:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e51c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e520:	4770      	bx	lr
    e522:	bf00      	nop
    e524:	e000ed00 	.word	0xe000ed00

0000e528 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e528:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e52c:	2200      	movs	r2, #0
    e52e:	4b02      	ldr	r3, [pc, #8]	; (e538 <arm_core_mpu_disable+0x10>)
    e530:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e534:	4770      	bx	lr
    e536:	bf00      	nop
    e538:	e000ed00 	.word	0xe000ed00

0000e53c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    e53c:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e53e:	4d1d      	ldr	r5, [pc, #116]	; (e5b4 <arm_mpu_init+0x78>)
    e540:	682c      	ldr	r4, [r5, #0]
    e542:	2c08      	cmp	r4, #8
    e544:	d90d      	bls.n	e562 <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    e546:	f240 123b 	movw	r2, #315	; 0x13b
    e54a:	491b      	ldr	r1, [pc, #108]	; (e5b8 <arm_mpu_init+0x7c>)
    e54c:	481b      	ldr	r0, [pc, #108]	; (e5bc <arm_mpu_init+0x80>)
    e54e:	f00c fab1 	bl	1aab4 <printk>
    e552:	4819      	ldr	r0, [pc, #100]	; (e5b8 <arm_mpu_init+0x7c>)
    e554:	f240 113b 	movw	r1, #315	; 0x13b
    e558:	f00c fd52 	bl	1b000 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    e55c:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    e560:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e562:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    e564:	f7ff ffe0 	bl	e528 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e568:	4b15      	ldr	r3, [pc, #84]	; (e5c0 <arm_mpu_init+0x84>)
    e56a:	4a16      	ldr	r2, [pc, #88]	; (e5c4 <arm_mpu_init+0x88>)
    e56c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e570:	4284      	cmp	r4, r0
    e572:	d117      	bne.n	e5a4 <arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
    e574:	4b14      	ldr	r3, [pc, #80]	; (e5c8 <arm_mpu_init+0x8c>)
    e576:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    e578:	f7ff ffca 	bl	e510 <arm_core_mpu_enable>
	__ASSERT(
    e57c:	4b10      	ldr	r3, [pc, #64]	; (e5c0 <arm_mpu_init+0x84>)
    e57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    e582:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e586:	2b08      	cmp	r3, #8
    e588:	d00a      	beq.n	e5a0 <arm_mpu_init+0x64>
    e58a:	490b      	ldr	r1, [pc, #44]	; (e5b8 <arm_mpu_init+0x7c>)
    e58c:	480b      	ldr	r0, [pc, #44]	; (e5bc <arm_mpu_init+0x80>)
    e58e:	f44f 72b3 	mov.w	r2, #358	; 0x166
    e592:	f00c fa8f 	bl	1aab4 <printk>
    e596:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e59a:	4807      	ldr	r0, [pc, #28]	; (e5b8 <arm_mpu_init+0x7c>)
    e59c:	f00c fd30 	bl	1b000 <assert_post_action>
	return 0;
    e5a0:	2000      	movs	r0, #0
    e5a2:	e7dd      	b.n	e560 <arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e5a4:	6869      	ldr	r1, [r5, #4]
    e5a6:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e5aa:	f7ff fead 	bl	e308 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e5ae:	3001      	adds	r0, #1
    e5b0:	e7de      	b.n	e570 <arm_mpu_init+0x34>
    e5b2:	bf00      	nop
    e5b4:	0001edc8 	.word	0x0001edc8
    e5b8:	0002126d 	.word	0x0002126d
    e5bc:	0002003d 	.word	0x0002003d
    e5c0:	e000ed00 	.word	0xe000ed00
    e5c4:	0044ffaa 	.word	0x0044ffaa
    e5c8:	2000f913 	.word	0x2000f913

0000e5cc <arm_core_mpu_configure_static_mpu_regions>:
{
    e5cc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e5ce:	4c0a      	ldr	r4, [pc, #40]	; (e5f8 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e5d0:	7822      	ldrb	r2, [r4, #0]
    e5d2:	f7ff fedb 	bl	e38c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e5d6:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e5d8:	3016      	adds	r0, #22
    e5da:	d10c      	bne.n	e5f6 <arm_core_mpu_configure_static_mpu_regions+0x2a>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e5dc:	4907      	ldr	r1, [pc, #28]	; (e5fc <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e5de:	4808      	ldr	r0, [pc, #32]	; (e600 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    e5e0:	f44f 7282 	mov.w	r2, #260	; 0x104
    e5e4:	f00c fa66 	bl	1aab4 <printk>
}
    e5e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e5ec:	f44f 7182 	mov.w	r1, #260	; 0x104
    e5f0:	4802      	ldr	r0, [pc, #8]	; (e5fc <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e5f2:	f00c bd05 	b.w	1b000 <assert_post_action>
}
    e5f6:	bd10      	pop	{r4, pc}
    e5f8:	2000f913 	.word	0x2000f913
    e5fc:	0002126d 	.word	0x0002126d
    e600:	0002003d 	.word	0x0002003d

0000e604 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e608:	4d30      	ldr	r5, [pc, #192]	; (e6cc <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    e60a:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e60c:	4606      	mov	r6, r0
    e60e:	f04f 0800 	mov.w	r8, #0
    e612:	46ab      	mov	fp, r5
	MPU->RNR = index;
    e614:	4f2e      	ldr	r7, [pc, #184]	; (e6d0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e616:	45d0      	cmp	r8, sl
    e618:	db02      	blt.n	e620 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    e61a:	b003      	add	sp, #12
    e61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    e620:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e624:	f1b9 0f00 	cmp.w	r9, #0
    e628:	d04a      	beq.n	e6c0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e62a:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e62c:	4608      	mov	r0, r1
    e62e:	9101      	str	r1, [sp, #4]
    e630:	f00d fbad 	bl	1bd8e <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e634:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e636:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e638:	eb09 0001 	add.w	r0, r9, r1
    e63c:	3801      	subs	r0, #1
    e63e:	f00d fba6 	bl	1bd8e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e642:	4284      	cmp	r4, r0
    e644:	f04f 0214 	mov.w	r2, #20
    e648:	4b22      	ldr	r3, [pc, #136]	; (e6d4 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    e64a:	d013      	beq.n	e674 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    e64c:	f06f 0315 	mvn.w	r3, #21
    e650:	fb02 f808 	mul.w	r8, r2, r8
    e654:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e658:	f44f 728a 	mov.w	r2, #276	; 0x114
    e65c:	491e      	ldr	r1, [pc, #120]	; (e6d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    e65e:	481f      	ldr	r0, [pc, #124]	; (e6dc <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    e660:	f00c fa28 	bl	1aab4 <printk>
    e664:	f44f 718a 	mov.w	r1, #276	; 0x114
    e668:	481b      	ldr	r0, [pc, #108]	; (e6d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    e66a:	b003      	add	sp, #12
    e66c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e670:	f00c bcc6 	b.w	1b000 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e674:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    e678:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e67a:	d0ed      	beq.n	e658 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e67c:	7819      	ldrb	r1, [r3, #0]
    e67e:	42a1      	cmp	r1, r4
    e680:	ddea      	ble.n	e658 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    e682:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    e686:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    e68a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e68e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    e692:	f100 0108 	add.w	r1, r0, #8
    e696:	7b00      	ldrb	r0, [r0, #12]
    e698:	f364 0004 	bfi	r0, r4, #0, #5
    e69c:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e69e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    e6a2:	790c      	ldrb	r4, [r1, #4]
    e6a4:	0840      	lsrs	r0, r0, #1
    e6a6:	f360 1447 	bfi	r4, r0, #5, #3
    e6aa:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e6ac:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    e6b0:	f021 011f 	bic.w	r1, r1, #31
    e6b4:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e6b6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    e6ba:	f021 011f 	bic.w	r1, r1, #31
    e6be:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e6c0:	f108 0801 	add.w	r8, r8, #1
    e6c4:	3514      	adds	r5, #20
    e6c6:	360c      	adds	r6, #12
    e6c8:	e7a5      	b.n	e616 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    e6ca:	bf00      	nop
    e6cc:	2000ab4c 	.word	0x2000ab4c
    e6d0:	e000ed00 	.word	0xe000ed00
    e6d4:	2000f913 	.word	0x2000f913
    e6d8:	0002126d 	.word	0x0002126d
    e6dc:	0002003d 	.word	0x0002003d

0000e6e0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e6e0:	4b01      	ldr	r3, [pc, #4]	; (e6e8 <__stdout_hook_install+0x8>)
    e6e2:	6018      	str	r0, [r3, #0]
}
    e6e4:	4770      	bx	lr
    e6e6:	bf00      	nop
    e6e8:	2000831c 	.word	0x2000831c

0000e6ec <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    e6ec:	2000      	movs	r0, #0
    e6ee:	4b02      	ldr	r3, [pc, #8]	; (e6f8 <remoteproc_mgr_boot+0xc>)
    e6f0:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    e6f4:	4770      	bx	lr
    e6f6:	bf00      	nop
    e6f8:	40005000 	.word	0x40005000

0000e6fc <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    e6fc:	4b0e      	ldr	r3, [pc, #56]	; (e738 <bt_hex_real+0x3c>)
    e6fe:	2940      	cmp	r1, #64	; 0x40
    e700:	bf28      	it	cs
    e702:	2140      	movcs	r1, #64	; 0x40
{
    e704:	b570      	push	{r4, r5, r6, lr}
    e706:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    e708:	4c0c      	ldr	r4, [pc, #48]	; (e73c <bt_hex_real+0x40>)
    e70a:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    e70c:	42b0      	cmp	r0, r6
    e70e:	f103 0302 	add.w	r3, r3, #2
    e712:	d104      	bne.n	e71e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    e714:	2300      	movs	r3, #0
    e716:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    e71a:	4807      	ldr	r0, [pc, #28]	; (e738 <bt_hex_real+0x3c>)
    e71c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    e71e:	7802      	ldrb	r2, [r0, #0]
    e720:	0912      	lsrs	r2, r2, #4
    e722:	5ca2      	ldrb	r2, [r4, r2]
    e724:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    e728:	f810 2b01 	ldrb.w	r2, [r0], #1
    e72c:	f002 020f 	and.w	r2, r2, #15
    e730:	5ca2      	ldrb	r2, [r4, r2]
    e732:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    e736:	e7e9      	b.n	e70c <bt_hex_real+0x10>
    e738:	2000f932 	.word	0x2000f932
    e73c:	000212d6 	.word	0x000212d6

0000e740 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    e740:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    e742:	7803      	ldrb	r3, [r0, #0]
    e744:	b08b      	sub	sp, #44	; 0x2c
    e746:	4604      	mov	r4, r0
    e748:	ad07      	add	r5, sp, #28
    e74a:	2b03      	cmp	r3, #3
    e74c:	d821      	bhi.n	e792 <bt_addr_le_str_real+0x52>
    e74e:	e8df f003 	tbb	[pc, r3]
    e752:	1a02      	.short	0x1a02
    e754:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    e756:	4912      	ldr	r1, [pc, #72]	; (e7a0 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    e758:	4628      	mov	r0, r5
    e75a:	f00d fb95 	bl	1be88 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e75e:	7863      	ldrb	r3, [r4, #1]
    e760:	211e      	movs	r1, #30
    e762:	9304      	str	r3, [sp, #16]
    e764:	78a3      	ldrb	r3, [r4, #2]
    e766:	4a0f      	ldr	r2, [pc, #60]	; (e7a4 <bt_addr_le_str_real+0x64>)
    e768:	9303      	str	r3, [sp, #12]
    e76a:	78e3      	ldrb	r3, [r4, #3]
    e76c:	9505      	str	r5, [sp, #20]
    e76e:	9302      	str	r3, [sp, #8]
    e770:	7923      	ldrb	r3, [r4, #4]
    e772:	480d      	ldr	r0, [pc, #52]	; (e7a8 <bt_addr_le_str_real+0x68>)
    e774:	9301      	str	r3, [sp, #4]
    e776:	7963      	ldrb	r3, [r4, #5]
    e778:	9300      	str	r3, [sp, #0]
    e77a:	79a3      	ldrb	r3, [r4, #6]
    e77c:	f00c f9a7 	bl	1aace <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    e780:	4809      	ldr	r0, [pc, #36]	; (e7a8 <bt_addr_le_str_real+0x68>)
    e782:	b00b      	add	sp, #44	; 0x2c
    e784:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    e786:	4909      	ldr	r1, [pc, #36]	; (e7ac <bt_addr_le_str_real+0x6c>)
    e788:	e7e6      	b.n	e758 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    e78a:	4909      	ldr	r1, [pc, #36]	; (e7b0 <bt_addr_le_str_real+0x70>)
    e78c:	e7e4      	b.n	e758 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    e78e:	4909      	ldr	r1, [pc, #36]	; (e7b4 <bt_addr_le_str_real+0x74>)
    e790:	e7e2      	b.n	e758 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e792:	210a      	movs	r1, #10
    e794:	4628      	mov	r0, r5
    e796:	4a08      	ldr	r2, [pc, #32]	; (e7b8 <bt_addr_le_str_real+0x78>)
    e798:	f00c f999 	bl	1aace <snprintk>
		break;
    e79c:	e7df      	b.n	e75e <bt_addr_le_str_real+0x1e>
    e79e:	bf00      	nop
    e7a0:	0001f6a4 	.word	0x0001f6a4
    e7a4:	0001f6cd 	.word	0x0001f6cd
    e7a8:	2000f914 	.word	0x2000f914
    e7ac:	0001f6ab 	.word	0x0001f6ab
    e7b0:	0001f6b2 	.word	0x0001f6b2
    e7b4:	0001f6bc 	.word	0x0001f6bc
    e7b8:	0001f6c6 	.word	0x0001f6c6

0000e7bc <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    e7bc:	2149      	movs	r1, #73	; 0x49
{
    e7be:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    e7c0:	4809      	ldr	r0, [pc, #36]	; (e7e8 <save_id+0x2c>)
    e7c2:	f00c f977 	bl	1aab4 <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    e7c6:	4909      	ldr	r1, [pc, #36]	; (e7ec <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    e7c8:	4809      	ldr	r0, [pc, #36]	; (e7f0 <save_id+0x34>)
    e7ca:	79ca      	ldrb	r2, [r1, #7]
    e7cc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    e7d0:	f7fd fa26 	bl	bc20 <settings_save_one>
	if (err) {
    e7d4:	4602      	mov	r2, r0
    e7d6:	b128      	cbz	r0, e7e4 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    e7d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    e7dc:	2145      	movs	r1, #69	; 0x45
    e7de:	4805      	ldr	r0, [pc, #20]	; (e7f4 <save_id+0x38>)
    e7e0:	f00c b968 	b.w	1aab4 <printk>
}
    e7e4:	bd08      	pop	{r3, pc}
    e7e6:	bf00      	nop
    e7e8:	000212e7 	.word	0x000212e7
    e7ec:	20008000 	.word	0x20008000
    e7f0:	000212f6 	.word	0x000212f6
    e7f4:	000212fc 	.word	0x000212fc

0000e7f8 <set>:
{
    e7f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e7fa:	4616      	mov	r6, r2
    e7fc:	461f      	mov	r7, r3
	if (!name) {
    e7fe:	4604      	mov	r4, r0
    e800:	b930      	cbnz	r0, e810 <set+0x18>
		BT_ERR("Insufficient number of arguments");
    e802:	2145      	movs	r1, #69	; 0x45
    e804:	4819      	ldr	r0, [pc, #100]	; (e86c <set+0x74>)
    e806:	f00c f955 	bl	1aab4 <printk>
	return -ENOENT;
    e80a:	f06f 0401 	mvn.w	r4, #1
    e80e:	e013      	b.n	e838 <set+0x40>
	len = settings_name_next(name, &next);
    e810:	a901      	add	r1, sp, #4
    e812:	f00c fc6e 	bl	1b0f2 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    e816:	4916      	ldr	r1, [pc, #88]	; (e870 <set+0x78>)
	len = settings_name_next(name, &next);
    e818:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    e81a:	4620      	mov	r0, r4
    e81c:	f00d fb6c 	bl	1bef8 <strncmp>
    e820:	4604      	mov	r4, r0
    e822:	2800      	cmp	r0, #0
    e824:	d1f1      	bne.n	e80a <set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e826:	4d13      	ldr	r5, [pc, #76]	; (e874 <set+0x7c>)
    e828:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    e82c:	075b      	lsls	r3, r3, #29
    e82e:	d506      	bpl.n	e83e <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    e830:	2157      	movs	r1, #87	; 0x57
    e832:	4811      	ldr	r0, [pc, #68]	; (e878 <set+0x80>)
    e834:	f00c f93e 	bl	1aab4 <printk>
}
    e838:	4620      	mov	r0, r4
    e83a:	b003      	add	sp, #12
    e83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    e83e:	3d94      	subs	r5, #148	; 0x94
    e840:	2207      	movs	r2, #7
    e842:	4629      	mov	r1, r5
    e844:	4638      	mov	r0, r7
    e846:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    e848:	2806      	cmp	r0, #6
    e84a:	d80a      	bhi.n	e862 <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    e84c:	2145      	movs	r1, #69	; 0x45
    e84e:	480b      	ldr	r0, [pc, #44]	; (e87c <set+0x84>)
    e850:	f00c f930 	bl	1aab4 <printk>
			(void)memset(bt_dev.id_addr, 0,
    e854:	2207      	movs	r2, #7
    e856:	4621      	mov	r1, r4
    e858:	4628      	mov	r0, r5
    e85a:	f00d fb9a 	bl	1bf92 <memset>
			bt_dev.id_count = 0U;
    e85e:	71ec      	strb	r4, [r5, #7]
    e860:	e7ea      	b.n	e838 <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    e862:	2307      	movs	r3, #7
    e864:	fbb0 f0f3 	udiv	r0, r0, r3
    e868:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    e86a:	e7e5      	b.n	e838 <set+0x40>
    e86c:	0002131c 	.word	0x0002131c
    e870:	0001f6b9 	.word	0x0001f6b9
    e874:	20008094 	.word	0x20008094
    e878:	00021342 	.word	0x00021342
    e87c:	0002136b 	.word	0x0002136b

0000e880 <bt_settings_encode_key>:
{
    e880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e884:	b088      	sub	sp, #32
    e886:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    e88a:	799c      	ldrb	r4, [r3, #6]
    e88c:	795d      	ldrb	r5, [r3, #5]
    e88e:	791e      	ldrb	r6, [r3, #4]
    e890:	78df      	ldrb	r7, [r3, #3]
    e892:	f893 c002 	ldrb.w	ip, [r3, #2]
    e896:	f893 e001 	ldrb.w	lr, [r3, #1]
    e89a:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    e89c:	f1b8 0f00 	cmp.w	r8, #0
    e8a0:	d00e      	beq.n	e8c0 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    e8a2:	e9cd 3806 	strd	r3, r8, [sp, #24]
    e8a6:	e9cd ce04 	strd	ip, lr, [sp, #16]
    e8aa:	4613      	mov	r3, r2
    e8ac:	e9cd 6702 	strd	r6, r7, [sp, #8]
    e8b0:	e9cd 4500 	strd	r4, r5, [sp]
    e8b4:	4a08      	ldr	r2, [pc, #32]	; (e8d8 <bt_settings_encode_key+0x58>)
    e8b6:	f00c f90a 	bl	1aace <snprintk>
}
    e8ba:	b008      	add	sp, #32
    e8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    e8c0:	e9cd e305 	strd	lr, r3, [sp, #20]
    e8c4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    e8c8:	4613      	mov	r3, r2
    e8ca:	e9cd 5601 	strd	r5, r6, [sp, #4]
    e8ce:	4a03      	ldr	r2, [pc, #12]	; (e8dc <bt_settings_encode_key+0x5c>)
    e8d0:	9400      	str	r4, [sp, #0]
    e8d2:	f00c f8fc 	bl	1aace <snprintk>
}
    e8d6:	e7f0      	b.n	e8ba <bt_settings_encode_key+0x3a>
    e8d8:	00021395 	.word	0x00021395
    e8dc:	000213b9 	.word	0x000213b9

0000e8e0 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e8e0:	4907      	ldr	r1, [pc, #28]	; (e900 <bt_settings_save_id+0x20>)
    e8e2:	e8d1 3fef 	ldaex	r3, [r1]
    e8e6:	f043 0201 	orr.w	r2, r3, #1
    e8ea:	e8c1 2fe0 	stlex	r0, r2, [r1]
    e8ee:	2800      	cmp	r0, #0
    e8f0:	d1f7      	bne.n	e8e2 <bt_settings_save_id+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    e8f2:	07db      	lsls	r3, r3, #31
    e8f4:	d403      	bmi.n	e8fe <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    e8f6:	4803      	ldr	r0, [pc, #12]	; (e904 <bt_settings_save_id+0x24>)
    e8f8:	3908      	subs	r1, #8
    e8fa:	f00f bc98 	b.w	1e22e <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    e8fe:	4770      	bx	lr
    e900:	20008328 	.word	0x20008328
    e904:	2000a540 	.word	0x2000a540

0000e908 <commit>:

static int commit(void)
{
    e908:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    e90a:	4c13      	ldr	r4, [pc, #76]	; (e958 <commit+0x50>)
    e90c:	79e3      	ldrb	r3, [r4, #7]
    e90e:	b96b      	cbnz	r3, e92c <commit+0x24>
		bt_setup_public_id_addr();
    e910:	f001 ffc0 	bl	10894 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    e914:	79e3      	ldrb	r3, [r4, #7]
    e916:	b94b      	cbnz	r3, e92c <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    e918:	f002 f84a 	bl	109b0 <bt_setup_random_id_addr>
		if (err) {
    e91c:	4604      	mov	r4, r0
    e91e:	b128      	cbz	r0, e92c <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    e920:	2145      	movs	r1, #69	; 0x45
    e922:	480e      	ldr	r0, [pc, #56]	; (e95c <commit+0x54>)
    e924:	f00c f8c6 	bl	1aab4 <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    e928:	4620      	mov	r0, r4
    e92a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e92c:	4d0c      	ldr	r5, [pc, #48]	; (e960 <commit+0x58>)
    e92e:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e932:	079b      	lsls	r3, r3, #30
    e934:	d401      	bmi.n	e93a <commit+0x32>
		bt_finalize_init();
    e936:	f001 fc95 	bl	10264 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e93a:	e8d5 4fef 	ldaex	r4, [r5]
    e93e:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    e942:	e8c5 3fe2 	stlex	r2, r3, [r5]
    e946:	2a00      	cmp	r2, #0
    e948:	d1f7      	bne.n	e93a <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    e94a:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    e94e:	d0eb      	beq.n	e928 <commit+0x20>
		bt_settings_save_id();
    e950:	f7ff ffc6 	bl	e8e0 <bt_settings_save_id>
	return 0;
    e954:	2400      	movs	r4, #0
    e956:	e7e7      	b.n	e928 <commit+0x20>
    e958:	20008000 	.word	0x20008000
    e95c:	000213da 	.word	0x000213da
    e960:	20008094 	.word	0x20008094

0000e964 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    e964:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    e966:	f7fd fa25 	bl	bdb4 <settings_subsys_init>
	if (err) {
    e96a:	4604      	mov	r4, r0
    e96c:	b120      	cbz	r0, e978 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    e96e:	4602      	mov	r2, r0
    e970:	2145      	movs	r1, #69	; 0x45
    e972:	4802      	ldr	r0, [pc, #8]	; (e97c <bt_settings_init+0x18>)
    e974:	f00c f89e 	bl	1aab4 <printk>
		return err;
	}

	return 0;
}
    e978:	4620      	mov	r0, r4
    e97a:	bd10      	pop	{r4, pc}
    e97c:	00021403 	.word	0x00021403

0000e980 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    e980:	4603      	mov	r3, r0
    e982:	b430      	push	{r4, r5}
	switch (src->type) {
    e984:	781a      	ldrb	r2, [r3, #0]
{
    e986:	4608      	mov	r0, r1
	switch (src->type) {
    e988:	2a01      	cmp	r2, #1
    e98a:	d013      	beq.n	e9b4 <uuid_to_uuid128+0x34>
    e98c:	2a02      	cmp	r2, #2
    e98e:	d026      	beq.n	e9de <uuid_to_uuid128+0x5e>
    e990:	b972      	cbnz	r2, e9b0 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    e992:	4a15      	ldr	r2, [pc, #84]	; (e9e8 <uuid_to_uuid128+0x68>)
    e994:	f102 0410 	add.w	r4, r2, #16
    e998:	f852 5b04 	ldr.w	r5, [r2], #4
    e99c:	42a2      	cmp	r2, r4
    e99e:	f841 5b04 	str.w	r5, [r1], #4
    e9a2:	d1f9      	bne.n	e998 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    e9a4:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    e9a6:	7812      	ldrb	r2, [r2, #0]
    e9a8:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    e9aa:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    e9ac:	0a1b      	lsrs	r3, r3, #8
    e9ae:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    e9b0:	bc30      	pop	{r4, r5}
    e9b2:	4770      	bx	lr
		*dst = uuid128_base;
    e9b4:	4a0c      	ldr	r2, [pc, #48]	; (e9e8 <uuid_to_uuid128+0x68>)
    e9b6:	f102 0410 	add.w	r4, r2, #16
    e9ba:	f852 5b04 	ldr.w	r5, [r2], #4
    e9be:	42a2      	cmp	r2, r4
    e9c0:	f841 5b04 	str.w	r5, [r1], #4
    e9c4:	d1f9      	bne.n	e9ba <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    e9c6:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    e9c8:	7812      	ldrb	r2, [r2, #0]
    e9ca:	700a      	strb	r2, [r1, #0]
    e9cc:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    e9d0:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    e9d2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e9d4:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    e9d6:	0a1b      	lsrs	r3, r3, #8
    e9d8:	7382      	strb	r2, [r0, #14]
    e9da:	7403      	strb	r3, [r0, #16]
}
    e9dc:	e7e8      	b.n	e9b0 <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    e9de:	2211      	movs	r2, #17
}
    e9e0:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    e9e2:	4619      	mov	r1, r3
    e9e4:	f00d baaa 	b.w	1bf3c <memcpy>
    e9e8:	0002143c 	.word	0x0002143c

0000e9ec <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e9ec:	2801      	cmp	r0, #1
{
    e9ee:	b570      	push	{r4, r5, r6, lr}
    e9f0:	4605      	mov	r5, r0
    e9f2:	4616      	mov	r6, r2
    e9f4:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e9f6:	d010      	beq.n	ea1a <bt_buf_get_rx+0x2e>
    e9f8:	2803      	cmp	r0, #3
    e9fa:	d00a      	beq.n	ea12 <bt_buf_get_rx+0x26>
    e9fc:	2805      	cmp	r0, #5
    e9fe:	d008      	beq.n	ea12 <bt_buf_get_rx+0x26>
    ea00:	490c      	ldr	r1, [pc, #48]	; (ea34 <bt_buf_get_rx+0x48>)
    ea02:	480d      	ldr	r0, [pc, #52]	; (ea38 <bt_buf_get_rx+0x4c>)
    ea04:	2233      	movs	r2, #51	; 0x33
    ea06:	f00c f855 	bl	1aab4 <printk>
    ea0a:	2133      	movs	r1, #51	; 0x33
    ea0c:	4809      	ldr	r0, [pc, #36]	; (ea34 <bt_buf_get_rx+0x48>)
    ea0e:	f00c faf7 	bl	1b000 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    ea12:	4632      	mov	r2, r6
    ea14:	4623      	mov	r3, r4
    ea16:	4809      	ldr	r0, [pc, #36]	; (ea3c <bt_buf_get_rx+0x50>)
    ea18:	e000      	b.n	ea1c <bt_buf_get_rx+0x30>
    ea1a:	4809      	ldr	r0, [pc, #36]	; (ea40 <bt_buf_get_rx+0x54>)
    ea1c:	f00e fd9e 	bl	1d55c <net_buf_alloc_fixed>
    ea20:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    ea22:	b12c      	cbz	r4, ea30 <bt_buf_get_rx+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
    ea24:	2101      	movs	r1, #1
    ea26:	f104 0008 	add.w	r0, r4, #8
    ea2a:	f006 ff7b 	bl	15924 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    ea2e:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    ea30:	4620      	mov	r0, r4
    ea32:	bd70      	pop	{r4, r5, r6, pc}
    ea34:	0002144d 	.word	0x0002144d
    ea38:	0002003d 	.word	0x0002003d
    ea3c:	200086a4 	.word	0x200086a4
    ea40:	20008780 	.word	0x20008780

0000ea44 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    ea44:	4602      	mov	r2, r0
    ea46:	460b      	mov	r3, r1
    ea48:	b570      	push	{r4, r5, r6, lr}
    ea4a:	f04f 0120 	mov.w	r1, #32
    ea4e:	f3ef 8511 	mrs	r5, BASEPRI
    ea52:	f381 8811 	msr	BASEPRI, r1
    ea56:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    ea5a:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    ea5c:	490b      	ldr	r1, [pc, #44]	; (ea8c <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c>)
    ea5e:	f8d1 40f8 	ldr.w	r4, [r1, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    ea62:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
	__asm__ volatile(
    ea66:	f385 8811 	msr	BASEPRI, r5
    ea6a:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    ea6e:	b924      	cbnz	r4, ea7a <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    ea70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    ea74:	2001      	movs	r0, #1
    ea76:	f7ff bfb9 	b.w	e9ec <bt_buf_get_rx>
    ea7a:	2101      	movs	r1, #1
		buf->len = 0U;
    ea7c:	81a0      	strh	r0, [r4, #12]
    ea7e:	7521      	strb	r1, [r4, #20]
    ea80:	f104 0008 	add.w	r0, r4, #8
    ea84:	f006 ff4e 	bl	15924 <net_buf_simple_reserve>
}
    ea88:	4620      	mov	r0, r4
    ea8a:	bd70      	pop	{r4, r5, r6, pc}
    ea8c:	20008000 	.word	0x20008000

0000ea90 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    ea90:	b570      	push	{r4, r5, r6, lr}
    ea92:	4604      	mov	r4, r0
	switch (evt) {
    ea94:	2c0f      	cmp	r4, #15
{
    ea96:	460d      	mov	r5, r1
    ea98:	4610      	mov	r0, r2
    ea9a:	4619      	mov	r1, r3
	switch (evt) {
    ea9c:	d805      	bhi.n	eaaa <bt_buf_get_evt+0x1a>
    ea9e:	2c0d      	cmp	r4, #13
    eaa0:	d912      	bls.n	eac8 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    eaa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    eaa6:	f7ff bfcd 	b.w	ea44 <bt_buf_get_cmd_complete>
	switch (evt) {
    eaaa:	2c13      	cmp	r4, #19
    eaac:	d10c      	bne.n	eac8 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    eaae:	480b      	ldr	r0, [pc, #44]	; (eadc <bt_buf_get_evt+0x4c>)
    eab0:	f00e fd54 	bl	1d55c <net_buf_alloc_fixed>
			if (buf) {
    eab4:	4604      	mov	r4, r0
    eab6:	b128      	cbz	r0, eac4 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    eab8:	2101      	movs	r1, #1
    eaba:	3008      	adds	r0, #8
    eabc:	f006 ff32 	bl	15924 <net_buf_simple_reserve>
    eac0:	2301      	movs	r3, #1
    eac2:	7523      	strb	r3, [r4, #20]
}
    eac4:	4620      	mov	r0, r4
    eac6:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    eac8:	4602      	mov	r2, r0
    eaca:	460b      	mov	r3, r1
		if (discardable) {
    eacc:	b10d      	cbz	r5, ead2 <bt_buf_get_evt+0x42>
    eace:	4804      	ldr	r0, [pc, #16]	; (eae0 <bt_buf_get_evt+0x50>)
    ead0:	e7ee      	b.n	eab0 <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    ead2:	2001      	movs	r0, #1
}
    ead4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    ead8:	f7ff bf88 	b.w	e9ec <bt_buf_get_rx>
    eadc:	200087ac 	.word	0x200087ac
    eae0:	200086fc 	.word	0x200086fc

0000eae4 <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    eae4:	6883      	ldr	r3, [r0, #8]
    eae6:	2157      	movs	r1, #87	; 0x57
    eae8:	781a      	ldrb	r2, [r3, #0]
    eaea:	4801      	ldr	r0, [pc, #4]	; (eaf0 <hci_data_buf_overflow+0xc>)
    eaec:	f00b bfe2 	b.w	1aab4 <printk>
    eaf0:	00021483 	.word	0x00021483

0000eaf4 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    eaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eaf6:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    eaf8:	2500      	movs	r5, #0
    eafa:	4f09      	ldr	r7, [pc, #36]	; (eb20 <id_find+0x2c>)
    eafc:	79fb      	ldrb	r3, [r7, #7]
    eafe:	b2ec      	uxtb	r4, r5
    eb00:	42a3      	cmp	r3, r4
    eb02:	d802      	bhi.n	eb0a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    eb04:	f06f 0401 	mvn.w	r4, #1
    eb08:	e008      	b.n	eb1c <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    eb0a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    eb0e:	4630      	mov	r0, r6
    eb10:	4439      	add	r1, r7
    eb12:	f00d fb11 	bl	1c138 <bt_addr_le_cmp>
    eb16:	3501      	adds	r5, #1
    eb18:	2800      	cmp	r0, #0
    eb1a:	d1ef      	bne.n	eafc <id_find+0x8>
}
    eb1c:	4620      	mov	r0, r4
    eb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb20:	20008000 	.word	0x20008000

0000eb24 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    eb24:	6843      	ldr	r3, [r0, #4]
{
    eb26:	b537      	push	{r0, r1, r2, r4, r5, lr}
    eb28:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    eb2a:	0558      	lsls	r0, r3, #21
    eb2c:	d502      	bpl.n	eb34 <valid_adv_param+0x10>
		return false;
    eb2e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    eb30:	b003      	add	sp, #12
    eb32:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    eb34:	6922      	ldr	r2, [r4, #16]
    eb36:	b10a      	cbz	r2, eb3c <valid_adv_param+0x18>
    eb38:	07d9      	lsls	r1, r3, #31
    eb3a:	d5f8      	bpl.n	eb2e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    eb3c:	4d1a      	ldr	r5, [pc, #104]	; (eba8 <valid_adv_param+0x84>)
    eb3e:	7820      	ldrb	r0, [r4, #0]
    eb40:	79eb      	ldrb	r3, [r5, #7]
    eb42:	4283      	cmp	r3, r0
    eb44:	d9f3      	bls.n	eb2e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    eb46:	2300      	movs	r3, #0
    eb48:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    eb4c:	4669      	mov	r1, sp
    eb4e:	4428      	add	r0, r5
    eb50:	9300      	str	r3, [sp, #0]
    eb52:	f8cd 3003 	str.w	r3, [sp, #3]
    eb56:	f00d faef 	bl	1c138 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    eb5a:	2800      	cmp	r0, #0
    eb5c:	d0e7      	beq.n	eb2e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    eb5e:	6860      	ldr	r0, [r4, #4]
    eb60:	07c2      	lsls	r2, r0, #31
    eb62:	d406      	bmi.n	eb72 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    eb64:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    eb68:	2b08      	cmp	r3, #8
    eb6a:	d802      	bhi.n	eb72 <valid_adv_param+0x4e>
    eb6c:	68a3      	ldr	r3, [r4, #8]
    eb6e:	2b9f      	cmp	r3, #159	; 0x9f
    eb70:	d9dd      	bls.n	eb2e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    eb72:	f010 0f30 	tst.w	r0, #48	; 0x30
    eb76:	d002      	beq.n	eb7e <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    eb78:	6923      	ldr	r3, [r4, #16]
    eb7a:	2b00      	cmp	r3, #0
    eb7c:	d0d7      	beq.n	eb2e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    eb7e:	06c3      	lsls	r3, r0, #27
    eb80:	d401      	bmi.n	eb86 <valid_adv_param+0x62>
    eb82:	6923      	ldr	r3, [r4, #16]
    eb84:	b943      	cbnz	r3, eb98 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    eb86:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    eb8a:	429a      	cmp	r2, r3
    eb8c:	d8cf      	bhi.n	eb2e <valid_adv_param+0xa>
    eb8e:	2a1f      	cmp	r2, #31
    eb90:	d9cd      	bls.n	eb2e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    eb92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    eb96:	d8ca      	bhi.n	eb2e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    eb98:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    eb9c:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    eba0:	bf18      	it	ne
    eba2:	2001      	movne	r0, #1
    eba4:	e7c4      	b.n	eb30 <valid_adv_param+0xc>
    eba6:	bf00      	nop
    eba8:	20008000 	.word	0x20008000

0000ebac <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ebac:	6883      	ldr	r3, [r0, #8]
{
    ebae:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ebb0:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    ebb2:	4620      	mov	r0, r4
    ebb4:	f002 fd98 	bl	116e8 <bt_conn_lookup_handle>
	if (!conn) {
    ebb8:	b930      	cbnz	r0, ebc8 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ebba:	4622      	mov	r2, r4
}
    ebbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ebc0:	2145      	movs	r1, #69	; 0x45
    ebc2:	4803      	ldr	r0, [pc, #12]	; (ebd0 <le_data_len_change+0x24>)
    ebc4:	f00b bf76 	b.w	1aab4 <printk>
}
    ebc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    ebcc:	f002 bd68 	b.w	116a0 <bt_conn_unref>
    ebd0:	000214b0 	.word	0x000214b0

0000ebd4 <hci_disconn_complete_prio>:
{
    ebd4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    ebd6:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    ebd8:	781a      	ldrb	r2, [r3, #0]
    ebda:	b9aa      	cbnz	r2, ec08 <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ebdc:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    ebe0:	4628      	mov	r0, r5
    ebe2:	f002 fd81 	bl	116e8 <bt_conn_lookup_handle>
	if (!conn) {
    ebe6:	4604      	mov	r4, r0
    ebe8:	b930      	cbnz	r0, ebf8 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    ebea:	462a      	mov	r2, r5
}
    ebec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    ebf0:	2145      	movs	r1, #69	; 0x45
    ebf2:	4806      	ldr	r0, [pc, #24]	; (ec0c <hci_disconn_complete_prio+0x38>)
    ebf4:	f00b bf5e 	b.w	1aab4 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    ebf8:	2101      	movs	r1, #1
    ebfa:	f002 fd7d 	bl	116f8 <bt_conn_set_state>
	bt_conn_unref(conn);
    ebfe:	4620      	mov	r0, r4
}
    ec00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    ec04:	f002 bd4c 	b.w	116a0 <bt_conn_unref>
}
    ec08:	bd38      	pop	{r3, r4, r5, pc}
    ec0a:	bf00      	nop
    ec0c:	000214d9 	.word	0x000214d9

0000ec10 <hci_hardware_error>:
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    ec10:	2101      	movs	r1, #1
{
    ec12:	b508      	push	{r3, lr}
    ec14:	3008      	adds	r0, #8
    ec16:	f006 ffcf 	bl	15bb8 <net_buf_simple_pull_mem>
}
    ec1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    ec1e:	7802      	ldrb	r2, [r0, #0]
    ec20:	2145      	movs	r1, #69	; 0x45
    ec22:	4801      	ldr	r0, [pc, #4]	; (ec28 <hci_hardware_error+0x18>)
    ec24:	f00b bf46 	b.w	1aab4 <printk>
    ec28:	00021504 	.word	0x00021504

0000ec2c <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    ec2c:	8981      	ldrh	r1, [r0, #12]
{
    ec2e:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    ec30:	6880      	ldr	r0, [r0, #8]
    ec32:	f7ff fd63 	bl	e6fc <bt_hex_real>
}
    ec36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    ec3a:	4602      	mov	r2, r0
    ec3c:	2157      	movs	r1, #87	; 0x57
    ec3e:	4801      	ldr	r0, [pc, #4]	; (ec44 <hci_vendor_event+0x18>)
    ec40:	f00b bf38 	b.w	1aab4 <printk>
    ec44:	0002152b 	.word	0x0002152b

0000ec48 <le_conn_update_complete>:
{
    ec48:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    ec4a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    ec4c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    ec50:	4630      	mov	r0, r6
    ec52:	f002 fd49 	bl	116e8 <bt_conn_lookup_handle>
	if (!conn) {
    ec56:	4604      	mov	r4, r0
    ec58:	b938      	cbnz	r0, ec6a <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ec5a:	4632      	mov	r2, r6
    ec5c:	2145      	movs	r1, #69	; 0x45
    ec5e:	4821      	ldr	r0, [pc, #132]	; (ece4 <le_conn_update_complete+0x9c>)
}
    ec60:	b002      	add	sp, #8
    ec62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ec66:	f00b bf25 	b.w	1aab4 <printk>
	if (!evt->status) {
    ec6a:	782b      	ldrb	r3, [r5, #0]
    ec6c:	b9cb      	cbnz	r3, eca2 <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    ec6e:	792a      	ldrb	r2, [r5, #4]
    ec70:	78eb      	ldrb	r3, [r5, #3]
    ec72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ec76:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    ec7a:	79aa      	ldrb	r2, [r5, #6]
    ec7c:	796b      	ldrb	r3, [r5, #5]
    ec7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ec82:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    ec86:	79eb      	ldrb	r3, [r5, #7]
    ec88:	7a2a      	ldrb	r2, [r5, #8]
    ec8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ec8e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    ec92:	f002 fb47 	bl	11324 <notify_le_param_updated>
	bt_conn_unref(conn);
    ec96:	4620      	mov	r0, r4
}
    ec98:	b002      	add	sp, #8
    ec9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    ec9e:	f002 bcff 	b.w	116a0 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    eca2:	2b1a      	cmp	r3, #26
    eca4:	d1f7      	bne.n	ec96 <le_conn_update_complete+0x4e>
    eca6:	78c3      	ldrb	r3, [r0, #3]
    eca8:	2b01      	cmp	r3, #1
    ecaa:	d1f4      	bne.n	ec96 <le_conn_update_complete+0x4e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    ecac:	f44f 6180 	mov.w	r1, #1024	; 0x400
    ecb0:	3004      	adds	r0, #4
    ecb2:	f00d fa36 	bl	1c122 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    ecb6:	0543      	lsls	r3, r0, #21
    ecb8:	d4ed      	bmi.n	ec96 <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
    ecba:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    ecbe:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    ecc0:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    ecc4:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
		bt_l2cap_update_conn_param(conn, &param);
    ecc8:	4620      	mov	r0, r4
		param.interval_max = conn->le.interval_max;
    ecca:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    ecce:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    ecd2:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
    ecd6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    ecda:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    ecde:	f003 fb09 	bl	122f4 <bt_l2cap_update_conn_param>
    ece2:	e7d8      	b.n	ec96 <le_conn_update_complete+0x4e>
    ece4:	000214b0 	.word	0x000214b0

0000ece8 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    ece8:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    ecea:	4c0c      	ldr	r4, [pc, #48]	; (ed1c <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    ecec:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    ecee:	2205      	movs	r2, #5
    ecf0:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    ecf4:	f002 fe36 	bl	11964 <bt_conn_lookup_state_le>
		if (!conn) {
    ecf8:	b970      	cbnz	r0, ed18 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    ecfa:	4b09      	ldr	r3, [pc, #36]	; (ed20 <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ecfc:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    ecfe:	6818      	ldr	r0, [r3, #0]
    ed00:	889a      	ldrh	r2, [r3, #4]
    ed02:	799b      	ldrb	r3, [r3, #6]
    ed04:	9000      	str	r0, [sp, #0]
    ed06:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ed0a:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    ed0e:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    ed10:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    ed14:	f002 fe26 	bl	11964 <bt_conn_lookup_state_le>
}
    ed18:	b002      	add	sp, #8
    ed1a:	bd10      	pop	{r4, pc}
    ed1c:	20008000 	.word	0x20008000
    ed20:	0001ea20 	.word	0x0001ea20

0000ed24 <handle_event>:
{
    ed24:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ed26:	4605      	mov	r5, r0
    ed28:	4614      	mov	r4, r2
    ed2a:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    ed2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    ed30:	7822      	ldrb	r2, [r4, #0]
    ed32:	42aa      	cmp	r2, r5
    ed34:	d010      	beq.n	ed58 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    ed36:	3408      	adds	r4, #8
    ed38:	429c      	cmp	r4, r3
    ed3a:	d1f9      	bne.n	ed30 <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    ed3c:	8984      	ldrh	r4, [r0, #12]
    ed3e:	6880      	ldr	r0, [r0, #8]
    ed40:	4621      	mov	r1, r4
    ed42:	f7ff fcdb 	bl	e6fc <bt_hex_real>
    ed46:	4623      	mov	r3, r4
    ed48:	9000      	str	r0, [sp, #0]
    ed4a:	462a      	mov	r2, r5
    ed4c:	2157      	movs	r1, #87	; 0x57
    ed4e:	480b      	ldr	r0, [pc, #44]	; (ed7c <handle_event+0x58>)
    ed50:	f00b feb0 	bl	1aab4 <printk>
}
    ed54:	b003      	add	sp, #12
    ed56:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    ed58:	8982      	ldrh	r2, [r0, #12]
    ed5a:	7863      	ldrb	r3, [r4, #1]
    ed5c:	4293      	cmp	r3, r2
    ed5e:	d907      	bls.n	ed70 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    ed60:	462b      	mov	r3, r5
    ed62:	2145      	movs	r1, #69	; 0x45
    ed64:	4806      	ldr	r0, [pc, #24]	; (ed80 <handle_event+0x5c>)
}
    ed66:	b003      	add	sp, #12
    ed68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    ed6c:	f00b bea2 	b.w	1aab4 <printk>
		handler->handler(buf);
    ed70:	6863      	ldr	r3, [r4, #4]
}
    ed72:	b003      	add	sp, #12
    ed74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    ed78:	4718      	bx	r3
    ed7a:	bf00      	nop
    ed7c:	0002157b 	.word	0x0002157b
    ed80:	00021554 	.word	0x00021554

0000ed84 <hci_le_meta_event>:
{
    ed84:	b510      	push	{r4, lr}
    ed86:	2101      	movs	r1, #1
    ed88:	4604      	mov	r4, r0
    ed8a:	3008      	adds	r0, #8
    ed8c:	f006 ff14 	bl	15bb8 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    ed90:	4621      	mov	r1, r4
}
    ed92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    ed96:	2308      	movs	r3, #8
    ed98:	4a01      	ldr	r2, [pc, #4]	; (eda0 <hci_le_meta_event+0x1c>)
    ed9a:	7800      	ldrb	r0, [r0, #0]
    ed9c:	f7ff bfc2 	b.w	ed24 <handle_event>
    eda0:	0001ee30 	.word	0x0001ee30

0000eda4 <id_create.constprop.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    eda4:	b530      	push	{r4, r5, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    eda6:	4d18      	ldr	r5, [pc, #96]	; (ee08 <id_create.constprop.0+0x64>)
    eda8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    edac:	460c      	mov	r4, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    edae:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    edb0:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    edb2:	b1b1      	cbz	r1, ede2 <id_create.constprop.0+0x3e>
    edb4:	2300      	movs	r3, #0
    edb6:	4620      	mov	r0, r4
    edb8:	a902      	add	r1, sp, #8
    edba:	9302      	str	r3, [sp, #8]
    edbc:	f8cd 300b 	str.w	r3, [sp, #11]
    edc0:	f00d f9ba 	bl	1c138 <bt_addr_le_cmp>
    edc4:	b168      	cbz	r0, ede2 <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    edc6:	4621      	mov	r1, r4
    edc8:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    edca:	f00d f9a7 	bl	1c11c <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    edce:	480f      	ldr	r0, [pc, #60]	; (ee0c <id_create.constprop.0+0x68>)
    edd0:	f00d f9a1 	bl	1c116 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    edd4:	0783      	lsls	r3, r0, #30
    edd6:	d515      	bpl.n	ee04 <id_create.constprop.0+0x60>
}
    edd8:	b005      	add	sp, #20
    edda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		bt_settings_save_id();
    edde:	f7ff bd7f 	b.w	e8e0 <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    ede2:	4668      	mov	r0, sp
    ede4:	f00d f968 	bl	1c0b8 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    ede8:	4668      	mov	r0, sp
    edea:	f7ff fe83 	bl	eaf4 <id_find>
    edee:	2800      	cmp	r0, #0
    edf0:	daf7      	bge.n	ede2 <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    edf2:	4669      	mov	r1, sp
    edf4:	4628      	mov	r0, r5
    edf6:	f00d f991 	bl	1c11c <bt_addr_le_copy>
		if (addr) {
    edfa:	2c00      	cmp	r4, #0
    edfc:	d0e7      	beq.n	edce <id_create.constprop.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    edfe:	4629      	mov	r1, r5
    ee00:	4620      	mov	r0, r4
    ee02:	e7e2      	b.n	edca <id_create.constprop.0+0x26>
}
    ee04:	b005      	add	sp, #20
    ee06:	bd30      	pop	{r4, r5, pc}
    ee08:	20008000 	.word	0x20008000
    ee0c:	20008094 	.word	0x20008094

0000ee10 <hci_rx_thread>:
{
    ee10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    ee14:	4f40      	ldr	r7, [pc, #256]	; (ef18 <hci_rx_thread+0x108>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    ee16:	f8df 8104 	ldr.w	r8, [pc, #260]	; ef1c <hci_rx_thread+0x10c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ee1a:	4e41      	ldr	r6, [pc, #260]	; (ef20 <hci_rx_thread+0x110>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    ee1c:	f04f 32ff 	mov.w	r2, #4294967295
    ee20:	f04f 33ff 	mov.w	r3, #4294967295
    ee24:	4638      	mov	r0, r7
    ee26:	f006 fd4d 	bl	158c4 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    ee2a:	7d02      	ldrb	r2, [r0, #20]
    ee2c:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    ee2e:	2a01      	cmp	r2, #1
    ee30:	d041      	beq.n	eeb6 <hci_rx_thread+0xa6>
    ee32:	2a03      	cmp	r2, #3
    ee34:	d16c      	bne.n	ef10 <hci_rx_thread+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ee36:	8983      	ldrh	r3, [r0, #12]
    ee38:	2b03      	cmp	r3, #3
    ee3a:	d80b      	bhi.n	ee54 <hci_rx_thread+0x44>
    ee3c:	f240 42ac 	movw	r2, #1196	; 0x4ac
    ee40:	4631      	mov	r1, r6
    ee42:	4838      	ldr	r0, [pc, #224]	; (ef24 <hci_rx_thread+0x114>)
    ee44:	f00b fe36 	bl	1aab4 <printk>
    ee48:	4040      	eors	r0, r0
    ee4a:	f380 8811 	msr	BASEPRI, r0
    ee4e:	f04f 0003 	mov.w	r0, #3
    ee52:	df02      	svc	2
    ee54:	2104      	movs	r1, #4
    ee56:	f104 0008 	add.w	r0, r4, #8
    ee5a:	f006 fead 	bl	15bb8 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ee5e:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    ee60:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    ee62:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ee66:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    ee68:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    ee6a:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    ee6e:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    ee70:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    ee72:	d007      	beq.n	ee84 <hci_rx_thread+0x74>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    ee74:	2145      	movs	r1, #69	; 0x45
    ee76:	482c      	ldr	r0, [pc, #176]	; (ef28 <hci_rx_thread+0x118>)
    ee78:	f00b fe1c 	bl	1aab4 <printk>
			net_buf_unref(buf);
    ee7c:	4620      	mov	r0, r4
    ee7e:	f006 fda3 	bl	159c8 <net_buf_unref>
			break;
    ee82:	e015      	b.n	eeb0 <hci_rx_thread+0xa0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    ee84:	f002 fc30 	bl	116e8 <bt_conn_lookup_handle>
	if (!conn) {
    ee88:	4605      	mov	r5, r0
    ee8a:	b928      	cbnz	r0, ee98 <hci_rx_thread+0x88>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    ee8c:	2145      	movs	r1, #69	; 0x45
    ee8e:	8ae2      	ldrh	r2, [r4, #22]
    ee90:	4826      	ldr	r0, [pc, #152]	; (ef2c <hci_rx_thread+0x11c>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ee92:	f00b fe0f 	bl	1aab4 <printk>
    ee96:	e7f1      	b.n	ee7c <hci_rx_thread+0x6c>
	acl(buf)->index = bt_conn_index(conn);
    ee98:	f003 f85a 	bl	11f50 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    ee9c:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    ee9e:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    eea0:	ea4f 3219 	mov.w	r2, r9, lsr #12
    eea4:	4628      	mov	r0, r5
    eea6:	f002 fad5 	bl	11454 <bt_conn_recv>
	bt_conn_unref(conn);
    eeaa:	4628      	mov	r0, r5
    eeac:	f002 fbf8 	bl	116a0 <bt_conn_unref>
	z_impl_k_yield();
    eeb0:	f00a fae6 	bl	19480 <z_impl_k_yield>
	while (1) {
    eeb4:	e7b2      	b.n	ee1c <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    eeb6:	8983      	ldrh	r3, [r0, #12]
    eeb8:	2b01      	cmp	r3, #1
    eeba:	d80b      	bhi.n	eed4 <hci_rx_thread+0xc4>
    eebc:	f241 32fb 	movw	r2, #5115	; 0x13fb
    eec0:	4631      	mov	r1, r6
    eec2:	4818      	ldr	r0, [pc, #96]	; (ef24 <hci_rx_thread+0x114>)
    eec4:	f00b fdf6 	bl	1aab4 <printk>
    eec8:	4040      	eors	r0, r0
    eeca:	f380 8811 	msr	BASEPRI, r0
    eece:	f04f 0003 	mov.w	r0, #3
    eed2:	df02      	svc	2
    eed4:	2102      	movs	r1, #2
    eed6:	f104 0008 	add.w	r0, r4, #8
    eeda:	f006 fe6d 	bl	15bb8 <net_buf_simple_pull_mem>
    eede:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    eee0:	7800      	ldrb	r0, [r0, #0]
    eee2:	f00d f8f7 	bl	1c0d4 <bt_hci_evt_get_flags>
    eee6:	0783      	lsls	r3, r0, #30
    eee8:	d40b      	bmi.n	ef02 <hci_rx_thread+0xf2>
    eeea:	f241 32ff 	movw	r2, #5119	; 0x13ff
    eeee:	4631      	mov	r1, r6
    eef0:	480c      	ldr	r0, [pc, #48]	; (ef24 <hci_rx_thread+0x114>)
    eef2:	f00b fddf 	bl	1aab4 <printk>
    eef6:	4040      	eors	r0, r0
    eef8:	f380 8811 	msr	BASEPRI, r0
    eefc:	f04f 0003 	mov.w	r0, #3
    ef00:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    ef02:	2304      	movs	r3, #4
    ef04:	4642      	mov	r2, r8
    ef06:	4621      	mov	r1, r4
    ef08:	7828      	ldrb	r0, [r5, #0]
    ef0a:	f7ff ff0b 	bl	ed24 <handle_event>
	net_buf_unref(buf);
    ef0e:	e7b5      	b.n	ee7c <hci_rx_thread+0x6c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ef10:	2145      	movs	r1, #69	; 0x45
    ef12:	4807      	ldr	r0, [pc, #28]	; (ef30 <hci_rx_thread+0x120>)
    ef14:	e7bd      	b.n	ee92 <hci_rx_thread+0x82>
    ef16:	bf00      	nop
    ef18:	200080fc 	.word	0x200080fc
    ef1c:	0001ee80 	.word	0x0001ee80
    ef20:	000215a2 	.word	0x000215a2
    ef24:	0002003d 	.word	0x0002003d
    ef28:	000215d6 	.word	0x000215d6
    ef2c:	000215ff 	.word	0x000215ff
    ef30:	00021626 	.word	0x00021626

0000ef34 <hci_cmd_done>:
{
    ef34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ef38:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ef3a:	7990      	ldrb	r0, [r2, #6]
{
    ef3c:	460f      	mov	r7, r1
    ef3e:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    ef40:	f006 fbc2 	bl	156c8 <net_buf_pool_get>
    ef44:	4d2a      	ldr	r5, [pc, #168]	; (eff0 <hci_cmd_done+0xbc>)
    ef46:	4285      	cmp	r5, r0
    ef48:	d00e      	beq.n	ef68 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    ef4a:	79a4      	ldrb	r4, [r4, #6]
    ef4c:	4620      	mov	r0, r4
    ef4e:	f006 fbbb 	bl	156c8 <net_buf_pool_get>
    ef52:	4623      	mov	r3, r4
    ef54:	e9cd 0500 	strd	r0, r5, [sp]
    ef58:	4632      	mov	r2, r6
    ef5a:	2157      	movs	r1, #87	; 0x57
    ef5c:	4825      	ldr	r0, [pc, #148]	; (eff4 <hci_cmd_done+0xc0>)
    ef5e:	f00b fda9 	bl	1aab4 <printk>
}
    ef62:	b002      	add	sp, #8
    ef64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    ef68:	4620      	mov	r0, r4
    ef6a:	f006 fbb5 	bl	156d8 <net_buf_id>
    ef6e:	f04f 080c 	mov.w	r8, #12
    ef72:	4d21      	ldr	r5, [pc, #132]	; (eff8 <hci_cmd_done+0xc4>)
    ef74:	fb08 5000 	mla	r0, r8, r0, r5
    ef78:	8843      	ldrh	r3, [r0, #2]
    ef7a:	42b3      	cmp	r3, r6
    ef7c:	d00a      	beq.n	ef94 <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    ef7e:	4620      	mov	r0, r4
    ef80:	f006 fbaa 	bl	156d8 <net_buf_id>
    ef84:	fb08 5000 	mla	r0, r8, r0, r5
    ef88:	4632      	mov	r2, r6
    ef8a:	8843      	ldrh	r3, [r0, #2]
    ef8c:	2157      	movs	r1, #87	; 0x57
    ef8e:	481b      	ldr	r0, [pc, #108]	; (effc <hci_cmd_done+0xc8>)
    ef90:	f00b fd90 	bl	1aab4 <printk>
	if (cmd(buf)->state && !status) {
    ef94:	4620      	mov	r0, r4
    ef96:	f006 fb9f 	bl	156d8 <net_buf_id>
    ef9a:	260c      	movs	r6, #12
    ef9c:	fb06 5000 	mla	r0, r6, r0, r5
    efa0:	6843      	ldr	r3, [r0, #4]
    efa2:	b15b      	cbz	r3, efbc <hci_cmd_done+0x88>
    efa4:	b957      	cbnz	r7, efbc <hci_cmd_done+0x88>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    efa6:	4620      	mov	r0, r4
    efa8:	f006 fb96 	bl	156d8 <net_buf_id>
    efac:	fb06 5000 	mla	r0, r6, r0, r5
    efb0:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    efb2:	7a1a      	ldrb	r2, [r3, #8]
    efb4:	e9d3 0100 	ldrd	r0, r1, [r3]
    efb8:	f00d f8cc 	bl	1c154 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    efbc:	4620      	mov	r0, r4
    efbe:	f006 fb8b 	bl	156d8 <net_buf_id>
    efc2:	260c      	movs	r6, #12
    efc4:	fb06 5000 	mla	r0, r6, r0, r5
    efc8:	6883      	ldr	r3, [r0, #8]
    efca:	2b00      	cmp	r3, #0
    efcc:	d0c9      	beq.n	ef62 <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    efce:	4620      	mov	r0, r4
    efd0:	f006 fb82 	bl	156d8 <net_buf_id>
    efd4:	4370      	muls	r0, r6
    efd6:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    efd8:	4620      	mov	r0, r4
    efda:	f006 fb7d 	bl	156d8 <net_buf_id>
    efde:	fb06 5500 	mla	r5, r6, r0, r5
    efe2:	68a8      	ldr	r0, [r5, #8]
}
    efe4:	b002      	add	sp, #8
    efe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    efea:	f00a bb8b 	b.w	19704 <z_impl_k_sem_give>
    efee:	bf00      	nop
    eff0:	20008754 	.word	0x20008754
    eff4:	0002163f 	.word	0x0002163f
    eff8:	2000ab60 	.word	0x2000ab60
    effc:	00021679 	.word	0x00021679

0000f000 <hci_cmd_status>:
{
    f000:	b538      	push	{r3, r4, r5, lr}
    f002:	2104      	movs	r1, #4
    f004:	4604      	mov	r4, r0
    f006:	3008      	adds	r0, #8
    f008:	f006 fdd6 	bl	15bb8 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    f00c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    f00e:	7801      	ldrb	r1, [r0, #0]
    f010:	4622      	mov	r2, r4
    f012:	8840      	ldrh	r0, [r0, #2]
    f014:	f7ff ff8e 	bl	ef34 <hci_cmd_done>
	if (ncmd) {
    f018:	b125      	cbz	r5, f024 <hci_cmd_status+0x24>
}
    f01a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f01e:	4802      	ldr	r0, [pc, #8]	; (f028 <hci_cmd_status+0x28>)
    f020:	f00a bb70 	b.w	19704 <z_impl_k_sem_give>
    f024:	bd38      	pop	{r3, r4, r5, pc}
    f026:	bf00      	nop
    f028:	200080e0 	.word	0x200080e0

0000f02c <hci_cmd_complete>:
{
    f02c:	b538      	push	{r3, r4, r5, lr}
    f02e:	2103      	movs	r1, #3
    f030:	4604      	mov	r4, r0
    f032:	3008      	adds	r0, #8
    f034:	f006 fdc0 	bl	15bb8 <net_buf_simple_pull_mem>
	status = buf->data[0];
    f038:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    f03a:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    f03c:	4622      	mov	r2, r4
    f03e:	7819      	ldrb	r1, [r3, #0]
    f040:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    f044:	f7ff ff76 	bl	ef34 <hci_cmd_done>
	if (ncmd) {
    f048:	b125      	cbz	r5, f054 <hci_cmd_complete+0x28>
}
    f04a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f04e:	4802      	ldr	r0, [pc, #8]	; (f058 <hci_cmd_complete+0x2c>)
    f050:	f00a bb58 	b.w	19704 <z_impl_k_sem_give>
    f054:	bd38      	pop	{r3, r4, r5, pc}
    f056:	bf00      	nop
    f058:	200080e0 	.word	0x200080e0

0000f05c <hci_num_completed_packets>:
{
    f05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    f060:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    f062:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    f064:	6887      	ldr	r7, [r0, #8]
    f066:	f8df 90dc 	ldr.w	r9, [pc, #220]	; f144 <hci_num_completed_packets+0xe8>
	for (i = 0; i < evt->num_handles; i++) {
    f06a:	783b      	ldrb	r3, [r7, #0]
    f06c:	429d      	cmp	r5, r3
    f06e:	db01      	blt.n	f074 <hci_num_completed_packets+0x18>
}
    f070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    f074:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    f078:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    f07c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    f080:	4650      	mov	r0, sl
    f082:	f002 fb31 	bl	116e8 <bt_conn_lookup_handle>
		if (!conn) {
    f086:	4604      	mov	r4, r0
    f088:	b1d0      	cbz	r0, f0c0 <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    f08a:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    f08e:	b37e      	cbz	r6, f0f0 <hci_num_completed_packets+0x94>
	__asm__ volatile(
    f090:	f04f 0320 	mov.w	r3, #32
    f094:	f3ef 8211 	mrs	r2, BASEPRI
    f098:	f383 8811 	msr	BASEPRI, r3
    f09c:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    f0a0:	69e3      	ldr	r3, [r4, #28]
    f0a2:	b1a3      	cbz	r3, f0ce <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    f0a4:	3b01      	subs	r3, #1
    f0a6:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    f0a8:	f382 8811 	msr	BASEPRI, r2
    f0ac:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    f0b0:	4620      	mov	r0, r4
    f0b2:	f002 f933 	bl	1131c <bt_conn_get_pkts>
    f0b6:	3e01      	subs	r6, #1
    f0b8:	f00a fb24 	bl	19704 <z_impl_k_sem_give>
    f0bc:	b2b6      	uxth	r6, r6
    f0be:	e7e6      	b.n	f08e <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    f0c0:	4652      	mov	r2, sl
    f0c2:	2145      	movs	r1, #69	; 0x45
    f0c4:	4820      	ldr	r0, [pc, #128]	; (f148 <hci_num_completed_packets+0xec>)
    f0c6:	f00b fcf5 	bl	1aab4 <printk>
	for (i = 0; i < evt->num_handles; i++) {
    f0ca:	3501      	adds	r5, #1
    f0cc:	e7cd      	b.n	f06a <hci_num_completed_packets+0xe>
	return list->head;
    f0ce:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    f0d0:	b12b      	cbz	r3, f0de <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f0d2:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    f0d4:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f0d6:	428b      	cmp	r3, r1
	list->head = node;
    f0d8:	6160      	str	r0, [r4, #20]
	list->tail = node;
    f0da:	bf08      	it	eq
    f0dc:	61a0      	streq	r0, [r4, #24]
    f0de:	f382 8811 	msr	BASEPRI, r2
    f0e2:	f3bf 8f6f 	isb	sy
			if (!node) {
    f0e6:	b93b      	cbnz	r3, f0f8 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    f0e8:	2145      	movs	r1, #69	; 0x45
    f0ea:	4818      	ldr	r0, [pc, #96]	; (f14c <hci_num_completed_packets+0xf0>)
    f0ec:	f00b fce2 	bl	1aab4 <printk>
		bt_conn_unref(conn);
    f0f0:	4620      	mov	r0, r4
    f0f2:	f002 fad5 	bl	116a0 <bt_conn_unref>
    f0f6:	e7e8      	b.n	f0ca <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    f0f8:	f04f 0220 	mov.w	r2, #32
    f0fc:	f3ef 8111 	mrs	r1, BASEPRI
    f100:	f382 8811 	msr	BASEPRI, r2
    f104:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    f108:	68da      	ldr	r2, [r3, #12]
    f10a:	61e2      	str	r2, [r4, #28]
	return list->tail;
    f10c:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    f10e:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    f112:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    f116:	b98a      	cbnz	r2, f13c <hci_num_completed_packets+0xe0>
	list->head = node;
    f118:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    f11c:	f381 8811 	msr	BASEPRI, r1
    f120:	f3bf 8f6f 	isb	sy
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    f124:	2101      	movs	r1, #1
    f126:	f104 0030 	add.w	r0, r4, #48	; 0x30
    f12a:	f00c fffa 	bl	1c122 <atomic_or>
    f12e:	07c3      	lsls	r3, r0, #31
    f130:	d4be      	bmi.n	f0b0 <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    f132:	4651      	mov	r1, sl
    f134:	4648      	mov	r0, r9
    f136:	f00f f87a 	bl	1e22e <k_queue_append>
    f13a:	e7b9      	b.n	f0b0 <hci_num_completed_packets+0x54>
	parent->next = child;
    f13c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    f13e:	6263      	str	r3, [r4, #36]	; 0x24
}
    f140:	e7ec      	b.n	f11c <hci_num_completed_packets+0xc0>
    f142:	bf00      	nop
    f144:	2000a540 	.word	0x2000a540
    f148:	000216b1 	.word	0x000216b1
    f14c:	000216d2 	.word	0x000216d2

0000f150 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    f150:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adv_id_check_data check_data = {
    f152:	7803      	ldrb	r3, [r0, #0]
{
    f154:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    f156:	f88d 3004 	strb.w	r3, [sp, #4]
    f15a:	2300      	movs	r3, #0
	func(&bt_dev.adv, data);
    f15c:	4c24      	ldr	r4, [pc, #144]	; (f1f0 <le_adv_start_add_conn+0xa0>)
{
    f15e:	4605      	mov	r5, r0
    f160:	460f      	mov	r7, r1
	func(&bt_dev.adv, data);
    f162:	f104 0018 	add.w	r0, r4, #24
    f166:	a901      	add	r1, sp, #4
	struct adv_id_check_data check_data = {
    f168:	f88d 3005 	strb.w	r3, [sp, #5]
	func(&bt_dev.adv, data);
    f16c:	f00d f803 	bl	1c176 <adv_id_check_connectable_func>
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
    f170:	f89d 3005 	ldrb.w	r3, [sp, #5]
    f174:	bb93      	cbnz	r3, f1dc <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    f176:	462e      	mov	r6, r5
    f178:	f816 2b09 	ldrb.w	r2, [r6], #9

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    f17c:	a902      	add	r1, sp, #8
    f17e:	4630      	mov	r0, r6
	bt_dev.adv_conn_id = adv->id;
    f180:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    f184:	9302      	str	r3, [sp, #8]
    f186:	f8cd 300b 	str.w	r3, [sp, #11]
    f18a:	f00c ffd5 	bl	1c138 <bt_addr_le_cmp>
    f18e:	782a      	ldrb	r2, [r5, #0]
    f190:	4604      	mov	r4, r0
    f192:	b9a8      	cbnz	r0, f1c0 <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    f194:	4b17      	ldr	r3, [pc, #92]	; (f1f4 <le_adv_start_add_conn+0xa4>)
    f196:	6818      	ldr	r0, [r3, #0]
    f198:	8899      	ldrh	r1, [r3, #4]
    f19a:	799b      	ldrb	r3, [r3, #6]
    f19c:	9004      	str	r0, [sp, #16]
    f19e:	f8ad 1014 	strh.w	r1, [sp, #20]
    f1a2:	4610      	mov	r0, r2
    f1a4:	a904      	add	r1, sp, #16
    f1a6:	f88d 3016 	strb.w	r3, [sp, #22]
    f1aa:	f002 fa4d 	bl	11648 <bt_conn_add_le>
		if (!conn) {
    f1ae:	4605      	mov	r5, r0
    f1b0:	b1d0      	cbz	r0, f1e8 <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    f1b2:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    f1b4:	f002 faa0 	bl	116f8 <bt_conn_set_state>
	*out_conn = conn;
    f1b8:	603d      	str	r5, [r7, #0]
	return 0;
}
    f1ba:	4620      	mov	r0, r4
    f1bc:	b007      	add	sp, #28
    f1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    f1c0:	4631      	mov	r1, r6
    f1c2:	4610      	mov	r0, r2
    f1c4:	f002 fbb2 	bl	1192c <bt_conn_exists_le>
    f1c8:	4604      	mov	r4, r0
    f1ca:	b950      	cbnz	r0, f1e2 <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    f1cc:	7828      	ldrb	r0, [r5, #0]
    f1ce:	4631      	mov	r1, r6
    f1d0:	f002 fa3a 	bl	11648 <bt_conn_add_le>
	if (!conn) {
    f1d4:	4605      	mov	r5, r0
    f1d6:	b138      	cbz	r0, f1e8 <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    f1d8:	2105      	movs	r1, #5
    f1da:	e7eb      	b.n	f1b4 <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    f1dc:	f06f 0422 	mvn.w	r4, #34	; 0x22
    f1e0:	e7eb      	b.n	f1ba <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    f1e2:	f06f 0415 	mvn.w	r4, #21
    f1e6:	e7e8      	b.n	f1ba <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    f1e8:	f06f 040b 	mvn.w	r4, #11
    f1ec:	e7e5      	b.n	f1ba <le_adv_start_add_conn+0x6a>
    f1ee:	bf00      	nop
    f1f0:	20008000 	.word	0x20008000
    f1f4:	0001ea20 	.word	0x0001ea20

0000f1f8 <bt_hci_cmd_create>:
{
    f1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    f1fc:	f04f 32ff 	mov.w	r2, #4294967295
    f200:	4606      	mov	r6, r0
    f202:	f04f 33ff 	mov.w	r3, #4294967295
    f206:	481d      	ldr	r0, [pc, #116]	; (f27c <bt_hci_cmd_create+0x84>)
    f208:	460f      	mov	r7, r1
    f20a:	f00e f9a7 	bl	1d55c <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    f20e:	4604      	mov	r4, r0
    f210:	b950      	cbnz	r0, f228 <bt_hci_cmd_create+0x30>
    f212:	491b      	ldr	r1, [pc, #108]	; (f280 <bt_hci_cmd_create+0x88>)
    f214:	481b      	ldr	r0, [pc, #108]	; (f284 <bt_hci_cmd_create+0x8c>)
    f216:	f44f 7281 	mov.w	r2, #258	; 0x102
    f21a:	f00b fc4b 	bl	1aab4 <printk>
    f21e:	f44f 7181 	mov.w	r1, #258	; 0x102
    f222:	4817      	ldr	r0, [pc, #92]	; (f280 <bt_hci_cmd_create+0x88>)
    f224:	f00b feec 	bl	1b000 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    f228:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    f22c:	f104 0a08 	add.w	sl, r4, #8
    f230:	2101      	movs	r1, #1
    f232:	4650      	mov	r0, sl
    f234:	f006 fb76 	bl	15924 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    f238:	4620      	mov	r0, r4
    f23a:	f884 8014 	strb.w	r8, [r4, #20]
    f23e:	f006 fa4b 	bl	156d8 <net_buf_id>
    f242:	f04f 090c 	mov.w	r9, #12
    f246:	4d10      	ldr	r5, [pc, #64]	; (f288 <bt_hci_cmd_create+0x90>)
    f248:	fb09 5000 	mla	r0, r9, r0, r5
    f24c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    f24e:	4620      	mov	r0, r4
    f250:	f006 fa42 	bl	156d8 <net_buf_id>
    f254:	fb09 5000 	mla	r0, r9, r0, r5
    f258:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    f25c:	4620      	mov	r0, r4
    f25e:	f006 fa3b 	bl	156d8 <net_buf_id>
    f262:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    f266:	2103      	movs	r1, #3
    f268:	4650      	mov	r0, sl
    f26a:	f8c5 8004 	str.w	r8, [r5, #4]
    f26e:	f006 fcc1 	bl	15bf4 <net_buf_simple_add>
	hdr->param_len = param_len;
    f272:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    f274:	8006      	strh	r6, [r0, #0]
}
    f276:	4620      	mov	r0, r4
    f278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f27c:	20008754 	.word	0x20008754
    f280:	000215a2 	.word	0x000215a2
    f284:	0002003d 	.word	0x0002003d
    f288:	2000ab60 	.word	0x2000ab60

0000f28c <bt_hci_cmd_send_sync>:
{
    f28c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f28e:	4607      	mov	r7, r0
    f290:	4615      	mov	r5, r2
	if (!buf) {
    f292:	460c      	mov	r4, r1
{
    f294:	b087      	sub	sp, #28
	if (!buf) {
    f296:	b921      	cbnz	r1, f2a2 <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    f298:	f7ff ffae 	bl	f1f8 <bt_hci_cmd_create>
		if (!buf) {
    f29c:	4604      	mov	r4, r0
    f29e:	2800      	cmp	r0, #0
    f2a0:	d048      	beq.n	f334 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    f2a2:	2201      	movs	r2, #1
    f2a4:	2100      	movs	r1, #0
    f2a6:	4668      	mov	r0, sp
    f2a8:	f00f f819 	bl	1e2de <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    f2ac:	4620      	mov	r0, r4
    f2ae:	f006 fa13 	bl	156d8 <net_buf_id>
    f2b2:	230c      	movs	r3, #12
    f2b4:	4e21      	ldr	r6, [pc, #132]	; (f33c <bt_hci_cmd_send_sync+0xb0>)
    f2b6:	fb03 6000 	mla	r0, r3, r0, r6
    f2ba:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    f2be:	4620      	mov	r0, r4
    f2c0:	f006 fbc6 	bl	15a50 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    f2c4:	4621      	mov	r1, r4
    f2c6:	481e      	ldr	r0, [pc, #120]	; (f340 <bt_hci_cmd_send_sync+0xb4>)
    f2c8:	f006 fb50 	bl	1596c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    f2cc:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    f2d0:	2300      	movs	r3, #0
    f2d2:	4668      	mov	r0, sp
    f2d4:	f00a fa52 	bl	1977c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    f2d8:	b158      	cbz	r0, f2f2 <bt_hci_cmd_send_sync+0x66>
    f2da:	f240 124d 	movw	r2, #333	; 0x14d
    f2de:	4919      	ldr	r1, [pc, #100]	; (f344 <bt_hci_cmd_send_sync+0xb8>)
    f2e0:	4819      	ldr	r0, [pc, #100]	; (f348 <bt_hci_cmd_send_sync+0xbc>)
    f2e2:	f00b fbe7 	bl	1aab4 <printk>
    f2e6:	4040      	eors	r0, r0
    f2e8:	f380 8811 	msr	BASEPRI, r0
    f2ec:	f04f 0003 	mov.w	r0, #3
    f2f0:	df02      	svc	2
	status = cmd(buf)->status;
    f2f2:	4620      	mov	r0, r4
    f2f4:	f006 f9f0 	bl	156d8 <net_buf_id>
    f2f8:	230c      	movs	r3, #12
    f2fa:	4358      	muls	r0, r3
    f2fc:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    f2fe:	b186      	cbz	r6, f322 <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    f300:	4633      	mov	r3, r6
    f302:	463a      	mov	r2, r7
    f304:	2157      	movs	r1, #87	; 0x57
    f306:	4811      	ldr	r0, [pc, #68]	; (f34c <bt_hci_cmd_send_sync+0xc0>)
    f308:	f00b fbd4 	bl	1aab4 <printk>
		net_buf_unref(buf);
    f30c:	4620      	mov	r0, r4
    f30e:	f006 fb5b 	bl	159c8 <net_buf_unref>
			return -EIO;
    f312:	2e09      	cmp	r6, #9
    f314:	bf0c      	ite	eq
    f316:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    f31a:	f06f 0004 	mvnne.w	r0, #4
}
    f31e:	b007      	add	sp, #28
    f320:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    f322:	b115      	cbz	r5, f32a <bt_hci_cmd_send_sync+0x9e>
	return 0;
    f324:	4630      	mov	r0, r6
		*rsp = buf;
    f326:	602c      	str	r4, [r5, #0]
    f328:	e7f9      	b.n	f31e <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    f32a:	4620      	mov	r0, r4
    f32c:	f006 fb4c 	bl	159c8 <net_buf_unref>
	return 0;
    f330:	4628      	mov	r0, r5
    f332:	e7f4      	b.n	f31e <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    f334:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f338:	e7f1      	b.n	f31e <bt_hci_cmd_send_sync+0x92>
    f33a:	bf00      	nop
    f33c:	2000ab60 	.word	0x2000ab60
    f340:	20008118 	.word	0x20008118
    f344:	000215a2 	.word	0x000215a2
    f348:	0002003d 	.word	0x0002003d
    f34c:	000216ee 	.word	0x000216ee

0000f350 <hci_le_read_max_data_len>:
{
    f350:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f352:	4606      	mov	r6, r0
    f354:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    f356:	f242 002f 	movw	r0, #8239	; 0x202f
    f35a:	2100      	movs	r1, #0
    f35c:	aa01      	add	r2, sp, #4
    f35e:	f7ff ff95 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
    f362:	4604      	mov	r4, r0
    f364:	b130      	cbz	r0, f374 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    f366:	2145      	movs	r1, #69	; 0x45
    f368:	4808      	ldr	r0, [pc, #32]	; (f38c <hci_le_read_max_data_len+0x3c>)
    f36a:	f00b fba3 	bl	1aab4 <printk>
}
    f36e:	4620      	mov	r0, r4
    f370:	b002      	add	sp, #8
    f372:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    f374:	9801      	ldr	r0, [sp, #4]
    f376:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    f378:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f37c:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    f37e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    f382:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    f384:	f006 fb20 	bl	159c8 <net_buf_unref>
	return 0;
    f388:	e7f1      	b.n	f36e <hci_le_read_max_data_len+0x1e>
    f38a:	bf00      	nop
    f38c:	0002170f 	.word	0x0002170f

0000f390 <set_random_address>:
{
    f390:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    f392:	4e15      	ldr	r6, [pc, #84]	; (f3e8 <set_random_address+0x58>)
    f394:	2206      	movs	r2, #6
    f396:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    f39a:	4605      	mov	r5, r0
    f39c:	f00c fdbd 	bl	1bf1a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    f3a0:	4604      	mov	r4, r0
    f3a2:	b1e0      	cbz	r0, f3de <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    f3a4:	2106      	movs	r1, #6
    f3a6:	f242 0005 	movw	r0, #8197	; 0x2005
    f3aa:	f7ff ff25 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
    f3ae:	4604      	mov	r4, r0
    f3b0:	b1b8      	cbz	r0, f3e2 <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f3b2:	2206      	movs	r2, #6
    f3b4:	4629      	mov	r1, r5
    f3b6:	3008      	adds	r0, #8
    f3b8:	f00e f8fe 	bl	1d5b8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    f3bc:	4621      	mov	r1, r4
    f3be:	2200      	movs	r2, #0
    f3c0:	f242 0005 	movw	r0, #8197	; 0x2005
    f3c4:	f7ff ff62 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
    f3c8:	4604      	mov	r4, r0
    f3ca:	b940      	cbnz	r0, f3de <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    f3cc:	2206      	movs	r2, #6
    f3ce:	4629      	mov	r1, r5
    f3d0:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    f3d4:	f00c fdb2 	bl	1bf3c <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    f3d8:	2301      	movs	r3, #1
    f3da:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    f3de:	4620      	mov	r0, r4
    f3e0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f3e2:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f3e6:	e7fa      	b.n	f3de <set_random_address+0x4e>
    f3e8:	20008000 	.word	0x20008000

0000f3ec <set_le_scan_enable_legacy>:
{
    f3ec:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    f3ee:	2102      	movs	r1, #2
{
    f3f0:	4604      	mov	r4, r0
    f3f2:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    f3f4:	f242 000c 	movw	r0, #8204	; 0x200c
    f3f8:	f7ff fefe 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
    f3fc:	4605      	mov	r5, r0
    f3fe:	b348      	cbz	r0, f454 <set_le_scan_enable_legacy+0x68>
	return net_buf_simple_add(&buf->b, len);
    f400:	2102      	movs	r1, #2
    f402:	3008      	adds	r0, #8
    f404:	f006 fbf6 	bl	15bf4 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    f408:	2c01      	cmp	r4, #1
    f40a:	4603      	mov	r3, r0
    f40c:	d11f      	bne.n	f44e <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f40e:	4813      	ldr	r0, [pc, #76]	; (f45c <set_le_scan_enable_legacy+0x70>)
    f410:	f00c fe81 	bl	1c116 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f414:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f418:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    f41a:	701c      	strb	r4, [r3, #0]
/* Initialize command state instance */
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
    f41c:	4b0f      	ldr	r3, [pc, #60]	; (f45c <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    f41e:	4628      	mov	r0, r5
    f420:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f422:	2305      	movs	r3, #5
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    f424:	f004 0401 	and.w	r4, r4, #1
    f428:	9302      	str	r3, [sp, #8]
    f42a:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    f42e:	f006 f953 	bl	156d8 <net_buf_id>
    f432:	220c      	movs	r2, #12
    f434:	4b0a      	ldr	r3, [pc, #40]	; (f460 <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    f436:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    f438:	fb02 3300 	mla	r3, r2, r0, r3
    f43c:	aa01      	add	r2, sp, #4
    f43e:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    f440:	f242 000c 	movw	r0, #8204	; 0x200c
    f444:	2200      	movs	r2, #0
    f446:	f7ff ff21 	bl	f28c <bt_hci_cmd_send_sync>
}
    f44a:	b005      	add	sp, #20
    f44c:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    f44e:	2200      	movs	r2, #0
    f450:	7042      	strb	r2, [r0, #1]
    f452:	e7e2      	b.n	f41a <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    f454:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f458:	e7f7      	b.n	f44a <set_le_scan_enable_legacy+0x5e>
    f45a:	bf00      	nop
    f45c:	20008094 	.word	0x20008094
    f460:	2000ab60 	.word	0x2000ab60

0000f464 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f464:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f468:	4605      	mov	r5, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f46a:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f46e:	460e      	mov	r6, r1
    f470:	4691      	mov	r9, r2
    f472:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f474:	d02c      	beq.n	f4d0 <le_adv_set_random_addr.isra.0+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    f476:	f8df 80e0 	ldr.w	r8, [pc, #224]	; f558 <le_adv_set_random_addr.isra.0+0xf4>
    f47a:	b12a      	cbz	r2, f488 <le_adv_set_random_addr.isra.0+0x24>
    f47c:	068c      	lsls	r4, r1, #26
    f47e:	d503      	bpl.n	f488 <le_adv_set_random_addr.isra.0+0x24>
    f480:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    f484:	0658      	lsls	r0, r3, #25
    f486:	d563      	bpl.n	f550 <le_adv_set_random_addr.isra.0+0xec>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f488:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f48c:	f818 3003 	ldrb.w	r3, [r8, r3]
    f490:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    f494:	2b01      	cmp	r3, #1
    f496:	d009      	beq.n	f4ac <le_adv_set_random_addr.isra.0+0x48>
			*own_addr_type = id_addr->type;
    f498:	ebaa 0505 	sub.w	r5, sl, r5
    f49c:	f818 3005 	ldrb.w	r3, [r8, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f4a0:	f1b9 0f00 	cmp.w	r9, #0
    f4a4:	d10f      	bne.n	f4c6 <le_adv_set_random_addr.isra.0+0x62>
	return 0;
    f4a6:	2400      	movs	r4, #0
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f4a8:	703b      	strb	r3, [r7, #0]
    f4aa:	e008      	b.n	f4be <le_adv_set_random_addr.isra.0+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    f4ac:	2007      	movs	r0, #7
    f4ae:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f4b2:	4440      	add	r0, r8
    f4b4:	f7ff ff6c 	bl	f390 <set_random_address>
				if (err) {
    f4b8:	4604      	mov	r4, r0
    f4ba:	2800      	cmp	r0, #0
    f4bc:	d0ec      	beq.n	f498 <le_adv_set_random_addr.isra.0+0x34>
}
    f4be:	4620      	mov	r0, r4
    f4c0:	b002      	add	sp, #8
    f4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f4c6:	06b1      	lsls	r1, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f4c8:	bf48      	it	mi
    f4ca:	f043 0302 	orrmi.w	r3, r3, #2
    f4ce:	e7ea      	b.n	f4a6 <le_adv_set_random_addr.isra.0+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    f4d0:	f011 0604 	ands.w	r6, r1, #4
    f4d4:	d014      	beq.n	f500 <le_adv_set_random_addr.isra.0+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f4d6:	f8df 8080 	ldr.w	r8, [pc, #128]	; f558 <le_adv_set_random_addr.isra.0+0xf4>
    f4da:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f4de:	f818 3003 	ldrb.w	r3, [r8, r3]
    f4e2:	00ee      	lsls	r6, r5, #3
    f4e4:	2b01      	cmp	r3, #1
    f4e6:	d105      	bne.n	f4f4 <le_adv_set_random_addr.isra.0+0x90>
				err = set_adv_random_address(adv, &id_addr->a);
    f4e8:	2007      	movs	r0, #7
    f4ea:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f4ee:	4440      	add	r0, r8
    f4f0:	f7ff ff4e 	bl	f390 <set_random_address>
			*own_addr_type = id_addr->type;
    f4f4:	1b75      	subs	r5, r6, r5
    f4f6:	f818 3005 	ldrb.w	r3, [r8, r5]
	int err = 0;
    f4fa:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    f4fc:	703b      	strb	r3, [r7, #0]
    f4fe:	e7de      	b.n	f4be <le_adv_set_random_addr.isra.0+0x5a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f500:	4816      	ldr	r0, [pc, #88]	; (f55c <le_adv_set_random_addr.isra.0+0xf8>)
    f502:	f00c fe08 	bl	1c116 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    f506:	0682      	lsls	r2, r0, #26
    f508:	d417      	bmi.n	f53a <le_adv_set_random_addr.isra.0+0xd6>
			bool scan_enabled = false;
    f50a:	2500      	movs	r5, #0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    f50c:	2106      	movs	r1, #6
    f50e:	4668      	mov	r0, sp
    f510:	f001 fe2a 	bl	11168 <bt_rand>
	if (err) {
    f514:	4604      	mov	r4, r0
    f516:	b948      	cbnz	r0, f52c <le_adv_set_random_addr.isra.0+0xc8>
	BT_ADDR_SET_NRPA(&nrpa);
    f518:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    f51c:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    f51e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f522:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    f526:	f7ff ff33 	bl	f390 <set_random_address>
    f52a:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f52c:	2001      	movs	r0, #1
    f52e:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    f530:	2d00      	cmp	r5, #0
    f532:	d0c4      	beq.n	f4be <le_adv_set_random_addr.isra.0+0x5a>
	return set_le_scan_enable_legacy(enable);
    f534:	f7ff ff5a 	bl	f3ec <set_le_scan_enable_legacy>
		if (err) {
    f538:	e7c1      	b.n	f4be <le_adv_set_random_addr.isra.0+0x5a>
    f53a:	4808      	ldr	r0, [pc, #32]	; (f55c <le_adv_set_random_addr.isra.0+0xf8>)
    f53c:	f00c fdeb 	bl	1c116 <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f540:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f542:	f3c0 15c0 	ubfx	r5, r0, #7, #1
    f546:	d5e0      	bpl.n	f50a <le_adv_set_random_addr.isra.0+0xa6>
	return set_le_scan_enable_legacy(enable);
    f548:	4630      	mov	r0, r6
    f54a:	f7ff ff4f 	bl	f3ec <set_le_scan_enable_legacy>
    f54e:	e7dd      	b.n	f50c <le_adv_set_random_addr.isra.0+0xa8>
			return -ENOTSUP;
    f550:	f06f 0422 	mvn.w	r4, #34	; 0x22
    f554:	e7b3      	b.n	f4be <le_adv_set_random_addr.isra.0+0x5a>
    f556:	bf00      	nop
    f558:	20008000 	.word	0x20008000
    f55c:	20008094 	.word	0x20008094

0000f560 <hci_set_ad>:
{
    f560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f564:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f566:	2120      	movs	r1, #32
{
    f568:	4682      	mov	sl, r0
    f56a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f56c:	f7ff fe44 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
    f570:	4606      	mov	r6, r0
    f572:	2800      	cmp	r0, #0
    f574:	d056      	beq.n	f624 <hci_set_ad+0xc4>
    f576:	2120      	movs	r1, #32
    f578:	3008      	adds	r0, #8
    f57a:	f006 fb3b 	bl	15bf4 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    f57e:	2220      	movs	r2, #32
    f580:	4681      	mov	r9, r0
    f582:	2100      	movs	r1, #0
    f584:	f00c fd05 	bl	1bf92 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f588:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	uint8_t set_data_len = 0;
    f58c:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f58e:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    f592:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    f594:	2300      	movs	r3, #0
    f596:	f8d4 8000 	ldr.w	r8, [r4]
    f59a:	6862      	ldr	r2, [r4, #4]
    f59c:	4293      	cmp	r3, r2
    f59e:	d30d      	bcc.n	f5bc <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    f5a0:	9b00      	ldr	r3, [sp, #0]
    f5a2:	3408      	adds	r4, #8
    f5a4:	429c      	cmp	r4, r3
    f5a6:	d1f5      	bne.n	f594 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f5a8:	2200      	movs	r2, #0
    f5aa:	4631      	mov	r1, r6
    f5ac:	4650      	mov	r0, sl
	*data_len = set_data_len;
    f5ae:	f889 5000 	strb.w	r5, [r9]
}
    f5b2:	b003      	add	sp, #12
    f5b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f5b8:	f7ff be68 	b.w	f28c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    f5bc:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    f5c0:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    f5c2:	1881      	adds	r1, r0, r2
    f5c4:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    f5c6:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    f5ca:	d914      	bls.n	f5f6 <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f5cc:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    f5d0:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f5d4:	d101      	bne.n	f5da <hci_set_ad+0x7a>
    f5d6:	2a00      	cmp	r2, #0
    f5d8:	dc0b      	bgt.n	f5f2 <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
    f5da:	2145      	movs	r1, #69	; 0x45
    f5dc:	4813      	ldr	r0, [pc, #76]	; (f62c <hci_set_ad+0xcc>)
    f5de:	f00b fa69 	bl	1aab4 <printk>
		net_buf_unref(buf);
    f5e2:	4630      	mov	r0, r6
    f5e4:	f006 f9f0 	bl	159c8 <net_buf_unref>
					return -EINVAL;
    f5e8:	f06f 0015 	mvn.w	r0, #21
}
    f5ec:	b003      	add	sp, #12
    f5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    f5f2:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    f5f6:	b2d7      	uxtb	r7, r2
    f5f8:	1c79      	adds	r1, r7, #1
    f5fa:	f80b 1005 	strb.w	r1, [fp, r5]
    f5fe:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    f600:	b2c9      	uxtb	r1, r1
    f602:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    f606:	f8d8 1004 	ldr.w	r1, [r8, #4]
    f60a:	fa5b f080 	uxtab	r0, fp, r0
    f60e:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    f610:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    f612:	f00c fc93 	bl	1bf3c <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    f616:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    f618:	443d      	add	r5, r7
    f61a:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    f61c:	3301      	adds	r3, #1
    f61e:	f108 0808 	add.w	r8, r8, #8
    f622:	e7ba      	b.n	f59a <hci_set_ad+0x3a>
		return -ENOBUFS;
    f624:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f628:	e7e0      	b.n	f5ec <hci_set_ad+0x8c>
    f62a:	bf00      	nop
    f62c:	00021734 	.word	0x00021734

0000f630 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    f630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f634:	b087      	sub	sp, #28
    f636:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    f63a:	4606      	mov	r6, r0
    f63c:	460c      	mov	r4, r1
    f63e:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    f640:	2100      	movs	r1, #0
    f642:	2210      	movs	r2, #16
    f644:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    f646:	461d      	mov	r5, r3
    f648:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    f64c:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
    f650:	f00c fc9f 	bl	1bf92 <memset>
	if (use_name) {
    f654:	f1b8 0f00 	cmp.w	r8, #0
    f658:	d00e      	beq.n	f678 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    f65a:	bbb4      	cbnz	r4, f6ca <le_adv_update.constprop.0+0x9a>
    f65c:	2d00      	cmp	r5, #0
    f65e:	d13f      	bne.n	f6e0 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    f660:	f8df b0b0 	ldr.w	fp, [pc, #176]	; f714 <le_adv_update.constprop.0+0xe4>
    f664:	4658      	mov	r0, fp
    f666:	f00c fc2b 	bl	1bec0 <strlen>
    f66a:	2309      	movs	r3, #9
    f66c:	f88d 0001 	strb.w	r0, [sp, #1]
    f670:	f88d 3000 	strb.w	r3, [sp]
    f674:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    f678:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    f67c:	f1b8 0f00 	cmp.w	r8, #0
    f680:	d030      	beq.n	f6e4 <le_adv_update.constprop.0+0xb4>
    f682:	f1ba 0f00 	cmp.w	sl, #0
    f686:	d12d      	bne.n	f6e4 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    f688:	2301      	movs	r3, #1
			d_len = 2;
    f68a:	2202      	movs	r2, #2
			d[1].data = &data;
    f68c:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    f690:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    f692:	f242 0008 	movw	r0, #8200	; 0x2008
    f696:	a902      	add	r1, sp, #8
    f698:	f7ff ff62 	bl	f560 <hci_set_ad>
		if (err) {
    f69c:	4604      	mov	r4, r0
    f69e:	b938      	cbnz	r0, f6b0 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    f6a0:	f1ba 0f00 	cmp.w	sl, #0
    f6a4:	d120      	bne.n	f6e8 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f6a6:	2104      	movs	r1, #4
    f6a8:	f106 0010 	add.w	r0, r6, #16
    f6ac:	f00c fd39 	bl	1c122 <atomic_or>
}
    f6b0:	4620      	mov	r0, r4
    f6b2:	b007      	add	sp, #28
    f6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f6b8:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    f6bc:	3a08      	subs	r2, #8
    f6be:	2a01      	cmp	r2, #1
    f6c0:	d925      	bls.n	f70e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f6c2:	3301      	adds	r3, #1
    f6c4:	429f      	cmp	r7, r3
    f6c6:	d1f7      	bne.n	f6b8 <le_adv_update.constprop.0+0x88>
    f6c8:	e7c8      	b.n	f65c <le_adv_update.constprop.0+0x2c>
    f6ca:	2300      	movs	r3, #0
    f6cc:	e7fa      	b.n	f6c4 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f6ce:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    f6d2:	3a08      	subs	r2, #8
    f6d4:	2a01      	cmp	r2, #1
    f6d6:	d91a      	bls.n	f70e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f6d8:	3301      	adds	r3, #1
    f6da:	4599      	cmp	r9, r3
    f6dc:	d1f7      	bne.n	f6ce <le_adv_update.constprop.0+0x9e>
    f6de:	e7bf      	b.n	f660 <le_adv_update.constprop.0+0x30>
    f6e0:	2300      	movs	r3, #0
    f6e2:	e7fa      	b.n	f6da <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    f6e4:	2201      	movs	r2, #1
    f6e6:	e7d4      	b.n	f692 <le_adv_update.constprop.0+0x62>
		d[0].data = sd;
    f6e8:	2201      	movs	r2, #1
		d[0].len = sd_len;
    f6ea:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    f6ee:	f1b8 0f00 	cmp.w	r8, #0
    f6f2:	d003      	beq.n	f6fc <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    f6f4:	9205      	str	r2, [sp, #20]
			d_len = 2;
    f6f6:	2202      	movs	r2, #2
			d[1].data = &data;
    f6f8:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    f6fc:	f242 0009 	movw	r0, #8201	; 0x2009
    f700:	a902      	add	r1, sp, #8
    f702:	f7ff ff2d 	bl	f560 <hci_set_ad>
		if (err) {
    f706:	2800      	cmp	r0, #0
    f708:	d0cd      	beq.n	f6a6 <le_adv_update.constprop.0+0x76>
    f70a:	4604      	mov	r4, r0
    f70c:	e7d0      	b.n	f6b0 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    f70e:	f06f 0415 	mvn.w	r4, #21
    f712:	e7cd      	b.n	f6b0 <le_adv_update.constprop.0+0x80>
    f714:	0001fac0 	.word	0x0001fac0

0000f718 <set_le_adv_enable_legacy>:
{
    f718:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f71a:	4606      	mov	r6, r0
    f71c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    f71e:	f242 000a 	movw	r0, #8202	; 0x200a
    f722:	2101      	movs	r1, #1
    f724:	f7ff fd68 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
    f728:	4604      	mov	r4, r0
    f72a:	b1e8      	cbz	r0, f768 <set_le_adv_enable_legacy+0x50>
	return net_buf_simple_add_u8(&buf->b, val);
    f72c:	3008      	adds	r0, #8
	if (enable) {
    f72e:	b1cd      	cbz	r5, f764 <set_le_adv_enable_legacy+0x4c>
    f730:	2101      	movs	r1, #1
    f732:	f00d ff4d 	bl	1d5d0 <net_buf_simple_add_u8>
    f736:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    f738:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    f73a:	3610      	adds	r6, #16
    f73c:	9302      	str	r3, [sp, #8]
	state->target = target;
    f73e:	9601      	str	r6, [sp, #4]
	state->val = val;
    f740:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f744:	f005 ffc8 	bl	156d8 <net_buf_id>
    f748:	220c      	movs	r2, #12
    f74a:	4b09      	ldr	r3, [pc, #36]	; (f770 <set_le_adv_enable_legacy+0x58>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f74c:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f74e:	fb02 3300 	mla	r3, r2, r0, r3
    f752:	aa01      	add	r2, sp, #4
    f754:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f756:	f242 000a 	movw	r0, #8202	; 0x200a
    f75a:	2200      	movs	r2, #0
    f75c:	f7ff fd96 	bl	f28c <bt_hci_cmd_send_sync>
}
    f760:	b004      	add	sp, #16
    f762:	bd70      	pop	{r4, r5, r6, pc}
    f764:	4629      	mov	r1, r5
    f766:	e7e4      	b.n	f732 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    f768:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f76c:	e7f8      	b.n	f760 <set_le_adv_enable_legacy+0x48>
    f76e:	bf00      	nop
    f770:	2000ab60 	.word	0x2000ab60

0000f774 <start_le_scan_legacy>:
{
    f774:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f776:	460e      	mov	r6, r1
    f778:	4605      	mov	r5, r0
    f77a:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    f77c:	2100      	movs	r1, #0
    f77e:	2207      	movs	r2, #7
    f780:	4668      	mov	r0, sp
    f782:	f00c fc06 	bl	1bf92 <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    f786:	f8ad 6001 	strh.w	r6, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    f78a:	4e26      	ldr	r6, [pc, #152]	; (f824 <start_le_scan_legacy+0xb0>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f78c:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    f78e:	4630      	mov	r0, r6
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f790:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    f794:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    f798:	f88d 5000 	strb.w	r5, [sp]
	set_param.window = sys_cpu_to_le16(window);
    f79c:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    f7a0:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f7a4:	f00c fcb7 	bl	1c116 <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    f7a8:	0641      	lsls	r1, r0, #25
    f7aa:	d413      	bmi.n	f7d4 <start_le_scan_legacy+0x60>
			err = le_set_private_addr(BT_ID_DEFAULT);
    f7ac:	f00c fcf8 	bl	1c1a0 <le_set_private_addr.constprop.0>
			if (err) {
    f7b0:	4604      	mov	r4, r0
    f7b2:	b160      	cbz	r0, f7ce <start_le_scan_legacy+0x5a>
				if (active_scan || !is_adv_using_rand_addr()) {
    f7b4:	2d01      	cmp	r5, #1
    f7b6:	d02e      	beq.n	f816 <start_le_scan_legacy+0xa2>
    f7b8:	f106 0028 	add.w	r0, r6, #40	; 0x28
    f7bc:	f00c fcab 	bl	1c116 <atomic_get>
    f7c0:	0642      	lsls	r2, r0, #25
    f7c2:	d528      	bpl.n	f816 <start_le_scan_legacy+0xa2>
					BT_WARN("Ignoring failure to set "
    f7c4:	4622      	mov	r2, r4
    f7c6:	2157      	movs	r1, #87	; 0x57
    f7c8:	4817      	ldr	r0, [pc, #92]	; (f828 <start_le_scan_legacy+0xb4>)
    f7ca:	f00b f973 	bl	1aab4 <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f7ce:	2301      	movs	r3, #1
    f7d0:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    f7d4:	2107      	movs	r1, #7
    f7d6:	f242 000b 	movw	r0, #8203	; 0x200b
    f7da:	f7ff fd0d 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
    f7de:	4604      	mov	r4, r0
    f7e0:	b1e0      	cbz	r0, f81c <start_le_scan_legacy+0xa8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f7e2:	2207      	movs	r2, #7
    f7e4:	4669      	mov	r1, sp
    f7e6:	3008      	adds	r0, #8
    f7e8:	f00d fee6 	bl	1d5b8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    f7ec:	4621      	mov	r1, r4
    f7ee:	2200      	movs	r2, #0
    f7f0:	f242 000b 	movw	r0, #8203	; 0x200b
    f7f4:	f7ff fd4a 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
    f7f8:	4604      	mov	r4, r0
    f7fa:	b960      	cbnz	r0, f816 <start_le_scan_legacy+0xa2>
	return set_le_scan_enable_legacy(enable);
    f7fc:	2001      	movs	r0, #1
    f7fe:	f7ff fdf5 	bl	f3ec <set_le_scan_enable_legacy>
	if (err) {
    f802:	4604      	mov	r4, r0
    f804:	b938      	cbnz	r0, f816 <start_le_scan_legacy+0xa2>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    f806:	1e6b      	subs	r3, r5, #1
    f808:	425a      	negs	r2, r3
    f80a:	f04f 0107 	mov.w	r1, #7
    f80e:	4807      	ldr	r0, [pc, #28]	; (f82c <start_le_scan_legacy+0xb8>)
    f810:	415a      	adcs	r2, r3
    f812:	f00c fc9f 	bl	1c154 <atomic_set_bit_to>
}
    f816:	4620      	mov	r0, r4
    f818:	b002      	add	sp, #8
    f81a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f81c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f820:	e7f9      	b.n	f816 <start_le_scan_legacy+0xa2>
    f822:	bf00      	nop
    f824:	20008000 	.word	0x20008000
    f828:	00021752 	.word	0x00021752
    f82c:	20008094 	.word	0x20008094

0000f830 <bt_le_scan_random_addr_check>:
{
    f830:	b508      	push	{r3, lr}
    f832:	4802      	ldr	r0, [pc, #8]	; (f83c <bt_le_scan_random_addr_check+0xc>)
    f834:	f00c fc6f 	bl	1c116 <atomic_get>
}
    f838:	2001      	movs	r0, #1
    f83a:	bd08      	pop	{r3, pc}
    f83c:	20008028 	.word	0x20008028

0000f840 <bt_le_create_conn_legacy>:
{
    f840:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f844:	4f2b      	ldr	r7, [pc, #172]	; (f8f4 <bt_le_create_conn_legacy+0xb4>)
{
    f846:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f848:	783b      	ldrb	r3, [r7, #0]
    f84a:	2b01      	cmp	r3, #1
    f84c:	d00b      	beq.n	f866 <bt_le_create_conn_legacy+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f84e:	2119      	movs	r1, #25
    f850:	f242 000d 	movw	r0, #8205	; 0x200d
		*own_addr_type = addr->type;
    f854:	f897 8000 	ldrb.w	r8, [r7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f858:	f7ff fcce 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
    f85c:	4606      	mov	r6, r0
    f85e:	b950      	cbnz	r0, f876 <bt_le_create_conn_legacy+0x36>
		return -ENOBUFS;
    f860:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f864:	e004      	b.n	f870 <bt_le_create_conn_legacy+0x30>
			err = set_random_address(&addr->a);
    f866:	1c78      	adds	r0, r7, #1
    f868:	f7ff fd92 	bl	f390 <set_random_address>
			if (err) {
    f86c:	2800      	cmp	r0, #0
    f86e:	d0ee      	beq.n	f84e <bt_le_create_conn_legacy+0xe>
}
    f870:	b004      	add	sp, #16
    f872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    f876:	2119      	movs	r1, #25
    f878:	3008      	adds	r0, #8
    f87a:	f006 f9bb 	bl	15bf4 <net_buf_simple_add>
    f87e:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    f880:	2219      	movs	r2, #25
    f882:	2100      	movs	r1, #0
    f884:	f00c fb85 	bl	1bf92 <memset>
	cp->own_addr_type = own_addr_type;
    f888:	f884 800c 	strb.w	r8, [r4, #12]
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f88c:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    f890:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f894:	1d60      	adds	r0, r4, #5
    f896:	f00c fc41 	bl	1c11c <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f89a:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f89e:	89bb      	ldrh	r3, [r7, #12]
	cmd(buf)->state = &state;
    f8a0:	4630      	mov	r0, r6
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f8a2:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    f8a4:	89fb      	ldrh	r3, [r7, #14]
    f8a6:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    f8a8:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    f8ac:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    f8b0:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    f8b4:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    f8b8:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    f8bc:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    f8c0:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
    f8c4:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    f8c8:	4b0b      	ldr	r3, [pc, #44]	; (f8f8 <bt_le_create_conn_legacy+0xb8>)
    f8ca:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f8cc:	230b      	movs	r3, #11
    f8ce:	9302      	str	r3, [sp, #8]
	state->val = val;
    f8d0:	2301      	movs	r3, #1
    f8d2:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    f8d6:	f005 feff 	bl	156d8 <net_buf_id>
    f8da:	220c      	movs	r2, #12
    f8dc:	4b07      	ldr	r3, [pc, #28]	; (f8fc <bt_le_create_conn_legacy+0xbc>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f8de:	4631      	mov	r1, r6
	cmd(buf)->state = &state;
    f8e0:	fb02 3300 	mla	r3, r2, r0, r3
    f8e4:	aa01      	add	r2, sp, #4
    f8e6:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f8e8:	f242 000d 	movw	r0, #8205	; 0x200d
    f8ec:	4642      	mov	r2, r8
    f8ee:	f7ff fccd 	bl	f28c <bt_hci_cmd_send_sync>
    f8f2:	e7bd      	b.n	f870 <bt_le_create_conn_legacy+0x30>
    f8f4:	20008000 	.word	0x20008000
    f8f8:	20008094 	.word	0x20008094
    f8fc:	2000ab60 	.word	0x2000ab60

0000f900 <bt_le_create_conn_cancel>:
{
    f900:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f902:	2100      	movs	r1, #0
{
    f904:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f906:	f242 000e 	movw	r0, #8206	; 0x200e
    f90a:	f7ff fc75 	bl	f1f8 <bt_hci_cmd_create>
	state->target = target;
    f90e:	4b0c      	ldr	r3, [pc, #48]	; (f940 <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    f910:	2500      	movs	r5, #0
	state->target = target;
    f912:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f914:	230b      	movs	r3, #11
    f916:	4604      	mov	r4, r0
    f918:	9302      	str	r3, [sp, #8]
	state->val = val;
    f91a:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f91e:	f005 fedb 	bl	156d8 <net_buf_id>
    f922:	220c      	movs	r2, #12
    f924:	4b07      	ldr	r3, [pc, #28]	; (f944 <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f926:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f928:	fb02 3300 	mla	r3, r2, r0, r3
    f92c:	aa01      	add	r2, sp, #4
    f92e:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f930:	f242 000e 	movw	r0, #8206	; 0x200e
    f934:	462a      	mov	r2, r5
    f936:	f7ff fca9 	bl	f28c <bt_hci_cmd_send_sync>
}
    f93a:	b005      	add	sp, #20
    f93c:	bd30      	pop	{r4, r5, pc}
    f93e:	bf00      	nop
    f940:	20008094 	.word	0x20008094
    f944:	2000ab60 	.word	0x2000ab60

0000f948 <bt_le_scan_update>:
{
    f948:	b570      	push	{r4, r5, r6, lr}
    f94a:	4606      	mov	r6, r0
    f94c:	481c      	ldr	r0, [pc, #112]	; (f9c0 <bt_le_scan_update+0x78>)
    f94e:	f00c fbe2 	bl	1c116 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    f952:	0641      	lsls	r1, r0, #25
    f954:	f3c0 1380 	ubfx	r3, r0, #6, #1
    f958:	d501      	bpl.n	f95e <bt_le_scan_update+0x16>
			return 0;
    f95a:	2000      	movs	r0, #0
    f95c:	e02b      	b.n	f9b6 <bt_le_scan_update+0x6e>
    f95e:	4818      	ldr	r0, [pc, #96]	; (f9c0 <bt_le_scan_update+0x78>)
    f960:	f00c fbd9 	bl	1c116 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    f964:	0682      	lsls	r2, r0, #26
    f966:	d421      	bmi.n	f9ac <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f968:	2100      	movs	r1, #0
    f96a:	2206      	movs	r2, #6
    f96c:	4608      	mov	r0, r1
    f96e:	f001 fff9 	bl	11964 <bt_conn_lookup_state_le>
		if (conn) {
    f972:	4604      	mov	r4, r0
    f974:	bb00      	cbnz	r0, f9b8 <bt_le_scan_update+0x70>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f976:	2202      	movs	r2, #2
    f978:	4601      	mov	r1, r0
    f97a:	f001 fff3 	bl	11964 <bt_conn_lookup_state_le>
		if (conn) {
    f97e:	4605      	mov	r5, r0
    f980:	2800      	cmp	r0, #0
    f982:	d0ea      	beq.n	f95a <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f984:	f44f 7180 	mov.w	r1, #256	; 0x100
    f988:	480d      	ldr	r0, [pc, #52]	; (f9c0 <bt_le_scan_update+0x78>)
    f98a:	f00c fbca 	bl	1c122 <atomic_or>
			bt_conn_unref(conn);
    f98e:	4628      	mov	r0, r5
    f990:	f001 fe86 	bl	116a0 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    f994:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f996:	4620      	mov	r0, r4
}
    f998:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f99c:	bf15      	itete	ne
    f99e:	2230      	movne	r2, #48	; 0x30
    f9a0:	2212      	moveq	r2, #18
    f9a2:	2160      	movne	r1, #96	; 0x60
    f9a4:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    f9a8:	f7ff bee4 	b.w	f774 <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    f9ac:	4618      	mov	r0, r3
    f9ae:	f7ff fd1d 	bl	f3ec <set_le_scan_enable_legacy>
		if (err) {
    f9b2:	2800      	cmp	r0, #0
    f9b4:	d0d8      	beq.n	f968 <bt_le_scan_update+0x20>
}
    f9b6:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    f9b8:	f001 fe72 	bl	116a0 <bt_conn_unref>
    f9bc:	e7cd      	b.n	f95a <bt_le_scan_update+0x12>
    f9be:	bf00      	nop
    f9c0:	20008094 	.word	0x20008094

0000f9c4 <hci_disconn_complete>:
{
    f9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    f9c6:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    f9c8:	7835      	ldrb	r5, [r6, #0]
    f9ca:	bb45      	cbnz	r5, fa1e <hci_disconn_complete+0x5a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f9cc:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    f9d0:	4638      	mov	r0, r7
    f9d2:	f001 fe89 	bl	116e8 <bt_conn_lookup_handle>
	if (!conn) {
    f9d6:	4604      	mov	r4, r0
    f9d8:	b930      	cbnz	r0, f9e8 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    f9da:	463a      	mov	r2, r7
}
    f9dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    f9e0:	2145      	movs	r1, #69	; 0x45
    f9e2:	480f      	ldr	r0, [pc, #60]	; (fa20 <hci_disconn_complete+0x5c>)
    f9e4:	f00b b866 	b.w	1aab4 <printk>
	conn->err = evt->reason;
    f9e8:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f9ea:	4629      	mov	r1, r5
	conn->err = evt->reason;
    f9ec:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f9ee:	f001 fe83 	bl	116f8 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    f9f2:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    f9f4:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    f9f6:	2b01      	cmp	r3, #1
    f9f8:	d004      	beq.n	fa04 <hci_disconn_complete+0x40>
	bt_conn_unref(conn);
    f9fa:	4620      	mov	r0, r4
}
    f9fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    fa00:	f001 be4e 	b.w	116a0 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fa04:	1d20      	adds	r0, r4, #4
    fa06:	f00c fb86 	bl	1c116 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    fa0a:	07c3      	lsls	r3, r0, #31
    fa0c:	d5f5      	bpl.n	f9fa <hci_disconn_complete+0x36>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    fa0e:	4620      	mov	r0, r4
    fa10:	2102      	movs	r1, #2
    fa12:	f001 fe71 	bl	116f8 <bt_conn_set_state>
		bt_le_scan_update(false);
    fa16:	4628      	mov	r0, r5
    fa18:	f7ff ff96 	bl	f948 <bt_le_scan_update>
    fa1c:	e7ed      	b.n	f9fa <hci_disconn_complete+0x36>
}
    fa1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fa20:	000214d9 	.word	0x000214d9

0000fa24 <le_adv_report>:
{
    fa24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    fa28:	f100 0708 	add.w	r7, r0, #8
    fa2c:	b08d      	sub	sp, #52	; 0x34
    fa2e:	4604      	mov	r4, r0
    fa30:	4638      	mov	r0, r7
    fa32:	f00d fda5 	bl	1d580 <net_buf_simple_pull_u8>
    fa36:	f8df 81c8 	ldr.w	r8, [pc, #456]	; fc00 <le_adv_report+0x1dc>
	if (scan_dev_found_cb) {
    fa3a:	f8df a1c8 	ldr.w	sl, [pc, #456]	; fc04 <le_adv_report+0x1e0>
    fa3e:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    fa40:	9b01      	ldr	r3, [sp, #4]
    fa42:	b913      	cbnz	r3, fa4a <le_adv_report+0x26>
}
    fa44:	b00d      	add	sp, #52	; 0x34
    fa46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    fa4a:	89a3      	ldrh	r3, [r4, #12]
    fa4c:	2b08      	cmp	r3, #8
    fa4e:	d806      	bhi.n	fa5e <le_adv_report+0x3a>
			BT_ERR("Unexpected end of buffer");
    fa50:	2145      	movs	r1, #69	; 0x45
    fa52:	486d      	ldr	r0, [pc, #436]	; (fc08 <le_adv_report+0x1e4>)
}
    fa54:	b00d      	add	sp, #52	; 0x34
    fa56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    fa5a:	f00b b82b 	b.w	1aab4 <printk>
	return net_buf_simple_pull_mem(&buf->b, len);
    fa5e:	2109      	movs	r1, #9
    fa60:	4638      	mov	r0, r7
    fa62:	f006 f8a9 	bl	15bb8 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    fa66:	237f      	movs	r3, #127	; 0x7f
    fa68:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    fa6c:	7a03      	ldrb	r3, [r0, #8]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    fa6e:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    fa70:	9300      	str	r3, [sp, #0]
    fa72:	18c3      	adds	r3, r0, r3
    fa74:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    fa76:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.rssi = evt->data[evt->length];
    fa7a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    fa7e:	23ff      	movs	r3, #255	; 0xff
    fa80:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    fa84:	2300      	movs	r3, #0
    fa86:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
    fa8a:	7802      	ldrb	r2, [r0, #0]
    fa8c:	4606      	mov	r6, r0
    fa8e:	2a04      	cmp	r2, #4
    fa90:	bf98      	it	ls
    fa92:	4b5e      	ldrls	r3, [pc, #376]	; (fc0c <le_adv_report+0x1e8>)
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    fa94:	f100 0901 	add.w	r9, r0, #1
    fa98:	bf98      	it	ls
    fa9a:	5c9b      	ldrbls	r3, [r3, r2]
    fa9c:	4640      	mov	r0, r8
		adv_info.adv_type = evt->evt_type;
    fa9e:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		adv_info.adv_props = get_adv_props(evt->evt_type);
    faa2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    faa6:	f00c fb36 	bl	1c116 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    faaa:	0645      	lsls	r5, r0, #25
    faac:	d50d      	bpl.n	faca <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    faae:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    fab2:	0758      	lsls	r0, r3, #29
    fab4:	d509      	bpl.n	faca <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    fab6:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    fab8:	4638      	mov	r0, r7
    faba:	3101      	adds	r1, #1
    fabc:	f006 f860 	bl	15b80 <net_buf_simple_pull>
    fac0:	9b01      	ldr	r3, [sp, #4]
    fac2:	1e58      	subs	r0, r3, #1
    fac4:	b2c3      	uxtb	r3, r0
    fac6:	9301      	str	r3, [sp, #4]
    fac8:	e7ba      	b.n	fa40 <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    faca:	7873      	ldrb	r3, [r6, #1]
    facc:	1e9a      	subs	r2, r3, #2
    face:	2a01      	cmp	r2, #1
    fad0:	d84c      	bhi.n	fb6c <le_adv_report+0x148>
		bt_addr_le_copy(&id_addr, addr);
    fad2:	4649      	mov	r1, r9
    fad4:	a804      	add	r0, sp, #16
    fad6:	f00c fb21 	bl	1c11c <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    fada:	f89d 3010 	ldrb.w	r3, [sp, #16]
    fade:	3b02      	subs	r3, #2
    fae0:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    fae4:	ab04      	add	r3, sp, #16
    fae6:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    fae8:	f8da 3000 	ldr.w	r3, [sl]
    faec:	b1a3      	cbz	r3, fb18 <le_adv_report+0xf4>
	state->offset = net_buf_simple_headroom(buf);
    faee:	4638      	mov	r0, r7
    faf0:	f00d fd56 	bl	1d5a0 <net_buf_simple_headroom>
    faf4:	4683      	mov	fp, r0
		buf->len = len;
    faf6:	9b00      	ldr	r3, [sp, #0]
	state->len = buf->len;
    faf8:	89a5      	ldrh	r5, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    fafa:	a804      	add	r0, sp, #16
		buf->len = len;
    fafc:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    fafe:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    fb02:	463b      	mov	r3, r7
    fb04:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    fb08:	f8da c000 	ldr.w	ip, [sl]
    fb0c:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    fb0e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    fb10:	81a5      	strh	r5, [r4, #12]
	buf->data = buf->__buf + state->offset;
    fb12:	fa10 f08b 	uxtah	r0, r0, fp
    fb16:	60a0      	str	r0, [r4, #8]
	return list->head;
    fb18:	4b3d      	ldr	r3, [pc, #244]	; (fc10 <le_adv_report+0x1ec>)
    fb1a:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    fb1c:	2b00      	cmp	r3, #0
    fb1e:	d032      	beq.n	fb86 <le_adv_report+0x162>
    fb20:	f1b3 0208 	subs.w	r2, r3, #8
    fb24:	d02f      	beq.n	fb86 <le_adv_report+0x162>
	return node->next;
    fb26:	681d      	ldr	r5, [r3, #0]
    fb28:	b105      	cbz	r5, fb2c <le_adv_report+0x108>
    fb2a:	3d08      	subs	r5, #8
		if (listener->recv) {
    fb2c:	6813      	ldr	r3, [r2, #0]
    fb2e:	9203      	str	r2, [sp, #12]
    fb30:	b193      	cbz	r3, fb58 <le_adv_report+0x134>
	state->offset = net_buf_simple_headroom(buf);
    fb32:	4638      	mov	r0, r7
    fb34:	f00d fd34 	bl	1d5a0 <net_buf_simple_headroom>
    fb38:	4683      	mov	fp, r0
	state->len = buf->len;
    fb3a:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    fb3c:	9a03      	ldr	r2, [sp, #12]
    fb3e:	9302      	str	r3, [sp, #8]
			buf->len = len;
    fb40:	9b00      	ldr	r3, [sp, #0]
			listener->recv(info, &buf->b);
    fb42:	a808      	add	r0, sp, #32
			buf->len = len;
    fb44:	81a3      	strh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    fb46:	4639      	mov	r1, r7
    fb48:	6812      	ldr	r2, [r2, #0]
    fb4a:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    fb4c:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    fb4e:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    fb50:	fa10 f08b 	uxtah	r0, r0, fp
    fb54:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    fb56:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    fb58:	b1ad      	cbz	r5, fb86 <le_adv_report+0x162>
Z_GENLIST_PEEK_NEXT(slist, snode)
    fb5a:	f115 0308 	adds.w	r3, r5, #8
    fb5e:	d002      	beq.n	fb66 <le_adv_report+0x142>
	return node->next;
    fb60:	68ab      	ldr	r3, [r5, #8]
    fb62:	b103      	cbz	r3, fb66 <le_adv_report+0x142>
    fb64:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    fb66:	462a      	mov	r2, r5
    fb68:	461d      	mov	r5, r3
    fb6a:	e7df      	b.n	fb2c <le_adv_report+0x108>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    fb6c:	2bff      	cmp	r3, #255	; 0xff
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    fb6e:	bf0a      	itet	eq
    fb70:	2300      	moveq	r3, #0
		bt_addr_le_copy(&id_addr,
    fb72:	4649      	movne	r1, r9
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    fb74:	a906      	addeq	r1, sp, #24
		bt_addr_le_copy(&id_addr,
    fb76:	a804      	add	r0, sp, #16
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    fb78:	bf04      	itt	eq
    fb7a:	9306      	streq	r3, [sp, #24]
    fb7c:	f8cd 301b 	streq.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    fb80:	f00c facc 	bl	1c11c <bt_addr_le_copy>
    fb84:	e7ae      	b.n	fae4 <le_adv_report+0xc0>
    fb86:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    fb88:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    fb8c:	f00c fac3 	bl	1c116 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    fb90:	0641      	lsls	r1, r0, #25
    fb92:	f3c0 1580 	ubfx	r5, r0, #6, #1
    fb96:	d48e      	bmi.n	fab6 <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    fb98:	07da      	lsls	r2, r3, #31
    fb9a:	d58c      	bpl.n	fab6 <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    fb9c:	2202      	movs	r2, #2
    fb9e:	4628      	mov	r0, r5
    fba0:	a904      	add	r1, sp, #16
    fba2:	f001 fedf 	bl	11964 <bt_conn_lookup_state_le>
	if (!conn) {
    fba6:	4683      	mov	fp, r0
    fba8:	2800      	cmp	r0, #0
    fbaa:	d084      	beq.n	fab6 <le_adv_report+0x92>
    fbac:	4640      	mov	r0, r8
    fbae:	f00c fab2 	bl	1c116 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    fbb2:	0683      	lsls	r3, r0, #26
    fbb4:	d410      	bmi.n	fbd8 <le_adv_report+0x1b4>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    fbb6:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    fbba:	4649      	mov	r1, r9
    fbbc:	f00c faae 	bl	1c11c <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    fbc0:	4658      	mov	r0, fp
    fbc2:	f7ff fe3d 	bl	f840 <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    fbc6:	b960      	cbnz	r0, fbe2 <le_adv_report+0x1be>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    fbc8:	4658      	mov	r0, fp
    fbca:	2106      	movs	r1, #6
    fbcc:	f001 fd94 	bl	116f8 <bt_conn_set_state>
	bt_conn_unref(conn);
    fbd0:	4658      	mov	r0, fp
    fbd2:	f001 fd65 	bl	116a0 <bt_conn_unref>
	return;
    fbd6:	e76e      	b.n	fab6 <le_adv_report+0x92>
	return set_le_scan_enable_legacy(enable);
    fbd8:	4628      	mov	r0, r5
    fbda:	f7ff fc07 	bl	f3ec <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    fbde:	2800      	cmp	r0, #0
    fbe0:	d0e9      	beq.n	fbb6 <le_adv_report+0x192>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    fbe2:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fbe4:	2100      	movs	r1, #0
    fbe6:	4658      	mov	r0, fp
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    fbe8:	f88b 3009 	strb.w	r3, [fp, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fbec:	f001 fd84 	bl	116f8 <bt_conn_set_state>
	bt_conn_unref(conn);
    fbf0:	4658      	mov	r0, fp
    fbf2:	f001 fd55 	bl	116a0 <bt_conn_unref>
	bt_le_scan_update(false);
    fbf6:	2000      	movs	r0, #0
    fbf8:	f7ff fea6 	bl	f948 <bt_le_scan_update>
    fbfc:	e75b      	b.n	fab6 <le_adv_report+0x92>
    fbfe:	bf00      	nop
    fc00:	20008094 	.word	0x20008094
    fc04:	2000ab84 	.word	0x2000ab84
    fc08:	0002178d 	.word	0x0002178d
    fc0c:	00021c11 	.word	0x00021c11
    fc10:	2000ab7c 	.word	0x2000ab7c

0000fc14 <bt_data_parse>:
{
    fc14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fc16:	4604      	mov	r4, r0
    fc18:	460e      	mov	r6, r1
    fc1a:	4617      	mov	r7, r2
	while (ad->len > 1) {
    fc1c:	88a3      	ldrh	r3, [r4, #4]
    fc1e:	2b01      	cmp	r3, #1
    fc20:	d801      	bhi.n	fc26 <bt_data_parse+0x12>
}
    fc22:	b003      	add	sp, #12
    fc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
    fc26:	4620      	mov	r0, r4
    fc28:	f00d fcaa 	bl	1d580 <net_buf_simple_pull_u8>
		if (len == 0U) {
    fc2c:	4605      	mov	r5, r0
    fc2e:	2800      	cmp	r0, #0
    fc30:	d0f7      	beq.n	fc22 <bt_data_parse+0xe>
		if (len > ad->len) {
    fc32:	88a2      	ldrh	r2, [r4, #4]
    fc34:	b283      	uxth	r3, r0
    fc36:	429a      	cmp	r2, r3
    fc38:	d206      	bcs.n	fc48 <bt_data_parse+0x34>
			BT_WARN("Malformed data");
    fc3a:	2157      	movs	r1, #87	; 0x57
    fc3c:	480c      	ldr	r0, [pc, #48]	; (fc70 <bt_data_parse+0x5c>)
}
    fc3e:	b003      	add	sp, #12
    fc40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Malformed data");
    fc44:	f00a bf36 	b.w	1aab4 <printk>
		data.type = net_buf_simple_pull_u8(ad);
    fc48:	4620      	mov	r0, r4
    fc4a:	f00d fc99 	bl	1d580 <net_buf_simple_pull_u8>
		data.data = ad->data;
    fc4e:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    fc50:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    fc54:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    fc56:	4639      	mov	r1, r7
    fc58:	4668      	mov	r0, sp
		data.data_len = len - 1;
    fc5a:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    fc5e:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    fc60:	47b0      	blx	r6
    fc62:	2800      	cmp	r0, #0
    fc64:	d0dd      	beq.n	fc22 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
    fc66:	4629      	mov	r1, r5
    fc68:	4620      	mov	r0, r4
    fc6a:	f005 ff89 	bl	15b80 <net_buf_simple_pull>
    fc6e:	e7d5      	b.n	fc1c <bt_data_parse+0x8>
    fc70:	000217ab 	.word	0x000217ab

0000fc74 <bt_send>:
	return bt_dev.drv->send(buf);
    fc74:	4b02      	ldr	r3, [pc, #8]	; (fc80 <bt_send+0xc>)
    fc76:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    fc7a:	691b      	ldr	r3, [r3, #16]
    fc7c:	4718      	bx	r3
    fc7e:	bf00      	nop
    fc80:	20008000 	.word	0x20008000

0000fc84 <bt_hci_cmd_send>:
{
    fc84:	b538      	push	{r3, r4, r5, lr}
    fc86:	4605      	mov	r5, r0
	if (!buf) {
    fc88:	460c      	mov	r4, r1
    fc8a:	b919      	cbnz	r1, fc94 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    fc8c:	f7ff fab4 	bl	f1f8 <bt_hci_cmd_create>
		if (!buf) {
    fc90:	4604      	mov	r4, r0
    fc92:	b1c0      	cbz	r0, fcc6 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    fc94:	f640 4335 	movw	r3, #3125	; 0xc35
    fc98:	429d      	cmp	r5, r3
    fc9a:	d10e      	bne.n	fcba <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    fc9c:	4620      	mov	r0, r4
    fc9e:	f7ff ffe9 	bl	fc74 <bt_send>
		if (err) {
    fca2:	4605      	mov	r5, r0
    fca4:	b138      	cbz	r0, fcb6 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    fca6:	4602      	mov	r2, r0
    fca8:	2145      	movs	r1, #69	; 0x45
    fcaa:	4808      	ldr	r0, [pc, #32]	; (fccc <bt_hci_cmd_send+0x48>)
    fcac:	f00a ff02 	bl	1aab4 <printk>
			net_buf_unref(buf);
    fcb0:	4620      	mov	r0, r4
    fcb2:	f005 fe89 	bl	159c8 <net_buf_unref>
}
    fcb6:	4628      	mov	r0, r5
    fcb8:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    fcba:	4621      	mov	r1, r4
    fcbc:	4804      	ldr	r0, [pc, #16]	; (fcd0 <bt_hci_cmd_send+0x4c>)
    fcbe:	f005 fe55 	bl	1596c <net_buf_put>
	return 0;
    fcc2:	2500      	movs	r5, #0
    fcc4:	e7f7      	b.n	fcb6 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    fcc6:	f06f 0536 	mvn.w	r5, #54	; 0x36
    fcca:	e7f4      	b.n	fcb6 <bt_hci_cmd_send+0x32>
    fccc:	000217bf 	.word	0x000217bf
    fcd0:	20008118 	.word	0x20008118

0000fcd4 <bt_hci_host_num_completed_packets>:
{
    fcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fcd6:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    fcd8:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    fcda:	7980      	ldrb	r0, [r0, #6]
    fcdc:	f005 fcf4 	bl	156c8 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    fce0:	4621      	mov	r1, r4
    fce2:	f00e faaf 	bl	1e244 <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    fce6:	4b24      	ldr	r3, [pc, #144]	; (fd78 <bt_hci_host_num_completed_packets+0xa4>)
    fce8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    fcec:	069b      	lsls	r3, r3, #26
    fcee:	d541      	bpl.n	fd74 <bt_hci_host_num_completed_packets+0xa0>
	conn = bt_conn_lookup_index(acl(buf)->index);
    fcf0:	7d60      	ldrb	r0, [r4, #21]
    fcf2:	f002 f94d 	bl	11f90 <bt_conn_lookup_index>
	if (!conn) {
    fcf6:	4605      	mov	r5, r0
    fcf8:	b930      	cbnz	r0, fd08 <bt_hci_host_num_completed_packets+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    fcfa:	7d62      	ldrb	r2, [r4, #21]
    fcfc:	2157      	movs	r1, #87	; 0x57
}
    fcfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    fd02:	481e      	ldr	r0, [pc, #120]	; (fd7c <bt_hci_host_num_completed_packets+0xa8>)
    fd04:	f00a bed6 	b.w	1aab4 <printk>
	if (!bt_conn_is_handle_valid(conn)) {
    fd08:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    fd0a:	2b01      	cmp	r3, #1
    fd0c:	d002      	beq.n	fd14 <bt_hci_host_num_completed_packets+0x40>
    fd0e:	3b07      	subs	r3, #7
    fd10:	2b01      	cmp	r3, #1
    fd12:	d80f      	bhi.n	fd34 <bt_hci_host_num_completed_packets+0x60>
	bt_conn_unref(conn);
    fd14:	4628      	mov	r0, r5
    fd16:	f001 fcc3 	bl	116a0 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    fd1a:	2105      	movs	r1, #5
    fd1c:	f640 4035 	movw	r0, #3125	; 0xc35
    fd20:	f7ff fa6a 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
    fd24:	4604      	mov	r4, r0
    fd26:	b970      	cbnz	r0, fd46 <bt_hci_host_num_completed_packets+0x72>
}
    fd28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    fd2c:	2145      	movs	r1, #69	; 0x45
    fd2e:	4814      	ldr	r0, [pc, #80]	; (fd80 <bt_hci_host_num_completed_packets+0xac>)
    fd30:	f00a bec0 	b.w	1aab4 <printk>
		BT_WARN("Not reporting packet for non-connected conn");
    fd34:	4813      	ldr	r0, [pc, #76]	; (fd84 <bt_hci_host_num_completed_packets+0xb0>)
    fd36:	2157      	movs	r1, #87	; 0x57
    fd38:	f00a febc 	bl	1aab4 <printk>
		bt_conn_unref(conn);
    fd3c:	4628      	mov	r0, r5
}
    fd3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    fd42:	f001 bcad 	b.w	116a0 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    fd46:	f100 0708 	add.w	r7, r0, #8
    fd4a:	2101      	movs	r1, #1
    fd4c:	4638      	mov	r0, r7
    fd4e:	f005 ff51 	bl	15bf4 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    fd52:	2501      	movs	r5, #1
    fd54:	2104      	movs	r1, #4
    fd56:	7005      	strb	r5, [r0, #0]
    fd58:	4638      	mov	r0, r7
    fd5a:	f005 ff4b 	bl	15bf4 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    fd5e:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    fd60:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    fd62:	7085      	strb	r5, [r0, #2]
    fd64:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    fd66:	4621      	mov	r1, r4
}
    fd68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    fd6c:	f640 4035 	movw	r0, #3125	; 0xc35
    fd70:	f7ff bf88 	b.w	fc84 <bt_hci_cmd_send>
}
    fd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd76:	bf00      	nop
    fd78:	20008000 	.word	0x20008000
    fd7c:	000217e6 	.word	0x000217e6
    fd80:	00021845 	.word	0x00021845
    fd84:	00021814 	.word	0x00021814

0000fd88 <conn_auto_initiate>:
{
    fd88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    fd8a:	7a83      	ldrb	r3, [r0, #10]
{
    fd8c:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    fd8e:	2b07      	cmp	r3, #7
    fd90:	d15d      	bne.n	fe4e <conn_auto_initiate+0xc6>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    fd92:	1d06      	adds	r6, r0, #4
    fd94:	4630      	mov	r0, r6
    fd96:	f00c f9be 	bl	1c116 <atomic_get>
    fd9a:	0483      	lsls	r3, r0, #18
    fd9c:	d41b      	bmi.n	fdd6 <conn_auto_initiate+0x4e>
    fd9e:	78e3      	ldrb	r3, [r4, #3]
    fda0:	b123      	cbz	r3, fdac <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    fda2:	4b2c      	ldr	r3, [pc, #176]	; (fe54 <conn_auto_initiate+0xcc>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    fda4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    fda8:	071d      	lsls	r5, r3, #28
    fdaa:	d514      	bpl.n	fdd6 <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    fdac:	2102      	movs	r1, #2
    fdae:	f242 0016 	movw	r0, #8214	; 0x2016
    fdb2:	f7ff fa21 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
    fdb6:	4605      	mov	r5, r0
    fdb8:	b168      	cbz	r0, fdd6 <conn_auto_initiate+0x4e>
    fdba:	2102      	movs	r1, #2
    fdbc:	3008      	adds	r0, #8
    fdbe:	f005 ff19 	bl	15bf4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    fdc2:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fdc4:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    fdc6:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fdc8:	f242 0016 	movw	r0, #8214	; 0x2016
}
    fdcc:	b004      	add	sp, #16
    fdce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    fdd2:	f7ff bf57 	b.w	fc84 <bt_hci_cmd_send>
    fdd6:	4630      	mov	r0, r6
    fdd8:	f00c f99d 	bl	1c116 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    fddc:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    fde0:	4d1c      	ldr	r5, [pc, #112]	; (fe54 <conn_auto_initiate+0xcc>)
    fde2:	f3c0 3100 	ubfx	r1, r0, #12, #1
    fde6:	d116      	bne.n	fe16 <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    fde8:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    fdec:	07d8      	lsls	r0, r3, #31
    fdee:	d512      	bpl.n	fe16 <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    fdf0:	2302      	movs	r3, #2
    fdf2:	4620      	mov	r0, r4
    fdf4:	461a      	mov	r2, r3
    fdf6:	9100      	str	r1, [sp, #0]
    fdf8:	f00c fa41 	bl	1c27e <bt_le_set_phy>
		if (!err) {
    fdfc:	4602      	mov	r2, r0
    fdfe:	b930      	cbnz	r0, fe0e <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fe00:	2180      	movs	r1, #128	; 0x80
    fe02:	4630      	mov	r0, r6
}
    fe04:	b004      	add	sp, #16
    fe06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fe0a:	f00c b98a 	b.w	1c122 <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    fe0e:	2145      	movs	r1, #69	; 0x45
    fe10:	4811      	ldr	r0, [pc, #68]	; (fe58 <conn_auto_initiate+0xd0>)
    fe12:	f00a fe4f 	bl	1aab4 <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    fe16:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    fe1a:	069a      	lsls	r2, r3, #26
    fe1c:	d517      	bpl.n	fe4e <conn_auto_initiate+0xc6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    fe1e:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    fe22:	689b      	ldr	r3, [r3, #8]
    fe24:	079b      	lsls	r3, r3, #30
    fe26:	d512      	bpl.n	fe4e <conn_auto_initiate+0xc6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    fe28:	f10d 010e 	add.w	r1, sp, #14
    fe2c:	a803      	add	r0, sp, #12
    fe2e:	f7ff fa8f 	bl	f350 <hci_le_read_max_data_len>
			if (!err) {
    fe32:	b960      	cbnz	r0, fe4e <conn_auto_initiate+0xc6>
				err = bt_le_set_data_len(conn,
    fe34:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    fe38:	4620      	mov	r0, r4
    fe3a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    fe3e:	f00c fa01 	bl	1c244 <bt_le_set_data_len>
				if (err) {
    fe42:	4602      	mov	r2, r0
    fe44:	b118      	cbz	r0, fe4e <conn_auto_initiate+0xc6>
					BT_ERR("Failed to set data len (%d)", err);
    fe46:	2145      	movs	r1, #69	; 0x45
    fe48:	4804      	ldr	r0, [pc, #16]	; (fe5c <conn_auto_initiate+0xd4>)
    fe4a:	f00a fe33 	bl	1aab4 <printk>
}
    fe4e:	b004      	add	sp, #16
    fe50:	bd70      	pop	{r4, r5, r6, pc}
    fe52:	bf00      	nop
    fe54:	20008000 	.word	0x20008000
    fe58:	0002186d 	.word	0x0002186d
    fe5c:	0002188c 	.word	0x0002188c

0000fe60 <le_phy_update_complete>:
{
    fe60:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fe62:	6883      	ldr	r3, [r0, #8]
    fe64:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    fe68:	4628      	mov	r0, r5
    fe6a:	f001 fc3d 	bl	116e8 <bt_conn_lookup_handle>
	if (!conn) {
    fe6e:	4604      	mov	r4, r0
    fe70:	b930      	cbnz	r0, fe80 <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fe72:	462a      	mov	r2, r5
}
    fe74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fe78:	2145      	movs	r1, #69	; 0x45
    fe7a:	480c      	ldr	r0, [pc, #48]	; (feac <le_phy_update_complete+0x4c>)
    fe7c:	f00a be1a 	b.w	1aab4 <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    fe80:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fe82:	f06f 0180 	mvn.w	r1, #128	; 0x80
    fe86:	4628      	mov	r0, r5
    fe88:	f00c f959 	bl	1c13e <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    fe8c:	0603      	lsls	r3, r0, #24
    fe8e:	d507      	bpl.n	fea0 <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fe90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    fe94:	4628      	mov	r0, r5
    fe96:	f00c f944 	bl	1c122 <atomic_or>
		conn_auto_initiate(conn);
    fe9a:	4620      	mov	r0, r4
    fe9c:	f7ff ff74 	bl	fd88 <conn_auto_initiate>
	bt_conn_unref(conn);
    fea0:	4620      	mov	r0, r4
}
    fea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    fea6:	f001 bbfb 	b.w	116a0 <bt_conn_unref>
    feaa:	bf00      	nop
    feac:	000214b0 	.word	0x000214b0

0000feb0 <le_remote_feat_complete>:
{
    feb0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    feb2:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    feb4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    feb8:	4630      	mov	r0, r6
    feba:	f001 fc15 	bl	116e8 <bt_conn_lookup_handle>
	if (!conn) {
    febe:	4604      	mov	r4, r0
    fec0:	b930      	cbnz	r0, fed0 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fec2:	4632      	mov	r2, r6
}
    fec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fec8:	2145      	movs	r1, #69	; 0x45
    feca:	480b      	ldr	r0, [pc, #44]	; (fef8 <le_remote_feat_complete+0x48>)
    fecc:	f00a bdf2 	b.w	1aab4 <printk>
	if (!evt->status) {
    fed0:	782b      	ldrb	r3, [r5, #0]
    fed2:	b923      	cbnz	r3, fede <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    fed4:	2208      	movs	r2, #8
    fed6:	1ce9      	adds	r1, r5, #3
    fed8:	30ac      	adds	r0, #172	; 0xac
    feda:	f00c f82f 	bl	1bf3c <memcpy>
    fede:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    fee2:	1d20      	adds	r0, r4, #4
    fee4:	f00c f91d 	bl	1c122 <atomic_or>
	conn_auto_initiate(conn);
    fee8:	4620      	mov	r0, r4
    feea:	f7ff ff4d 	bl	fd88 <conn_auto_initiate>
	bt_conn_unref(conn);
    feee:	4620      	mov	r0, r4
}
    fef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    fef4:	f001 bbd4 	b.w	116a0 <bt_conn_unref>
    fef8:	000214b0 	.word	0x000214b0

0000fefc <le_conn_param_neg_reply>:
{
    fefc:	b570      	push	{r4, r5, r6, lr}
    fefe:	4606      	mov	r6, r0
    ff00:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    ff02:	f242 0021 	movw	r0, #8225	; 0x2021
    ff06:	2103      	movs	r1, #3
    ff08:	f7ff f976 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
    ff0c:	4604      	mov	r4, r0
    ff0e:	b928      	cbnz	r0, ff1c <le_conn_param_neg_reply+0x20>
}
    ff10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    ff14:	2145      	movs	r1, #69	; 0x45
    ff16:	4808      	ldr	r0, [pc, #32]	; (ff38 <le_conn_param_neg_reply+0x3c>)
    ff18:	f00a bdcc 	b.w	1aab4 <printk>
    ff1c:	2103      	movs	r1, #3
    ff1e:	3008      	adds	r0, #8
    ff20:	f005 fe68 	bl	15bf4 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    ff24:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    ff26:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    ff28:	4621      	mov	r1, r4
}
    ff2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    ff2e:	f242 0021 	movw	r0, #8225	; 0x2021
    ff32:	f7ff bea7 	b.w	fc84 <bt_hci_cmd_send>
    ff36:	bf00      	nop
    ff38:	000218ad 	.word	0x000218ad

0000ff3c <le_conn_param_req>:
{
    ff3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    ff3e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    ff40:	78d9      	ldrb	r1, [r3, #3]
    ff42:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    ff44:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    ff46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ff4a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    ff4e:	7959      	ldrb	r1, [r3, #5]
    ff50:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    ff52:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    ff54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ff58:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    ff5c:	799a      	ldrb	r2, [r3, #6]
    ff5e:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    ff60:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    ff62:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ff66:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    ff6a:	7a1a      	ldrb	r2, [r3, #8]
    ff6c:	7a5b      	ldrb	r3, [r3, #9]
    ff6e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    ff72:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    ff76:	f001 fbb7 	bl	116e8 <bt_conn_lookup_handle>
	if (!conn) {
    ff7a:	4606      	mov	r6, r0
    ff7c:	b950      	cbnz	r0, ff94 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ff7e:	2145      	movs	r1, #69	; 0x45
    ff80:	481c      	ldr	r0, [pc, #112]	; (fff4 <le_conn_param_req+0xb8>)
    ff82:	4622      	mov	r2, r4
    ff84:	f00a fd96 	bl	1aab4 <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    ff88:	2102      	movs	r1, #2
    ff8a:	4620      	mov	r0, r4
    ff8c:	f7ff ffb6 	bl	fefc <le_conn_param_neg_reply>
}
    ff90:	b003      	add	sp, #12
    ff92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    ff94:	4669      	mov	r1, sp
    ff96:	f001 f9f5 	bl	11384 <le_param_req>
    ff9a:	b938      	cbnz	r0, ffac <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    ff9c:	211e      	movs	r1, #30
    ff9e:	4620      	mov	r0, r4
    ffa0:	f7ff ffac 	bl	fefc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    ffa4:	4630      	mov	r0, r6
    ffa6:	f001 fb7b 	bl	116a0 <bt_conn_unref>
    ffaa:	e7f1      	b.n	ff90 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    ffac:	210e      	movs	r1, #14
    ffae:	f242 0020 	movw	r0, #8224	; 0x2020
    ffb2:	f7ff f921 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
    ffb6:	4605      	mov	r5, r0
    ffb8:	2800      	cmp	r0, #0
    ffba:	d0f3      	beq.n	ffa4 <le_conn_param_req+0x68>
    ffbc:	210e      	movs	r1, #14
    ffbe:	3008      	adds	r0, #8
    ffc0:	f005 fe18 	bl	15bf4 <net_buf_simple_add>
    ffc4:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    ffc6:	220e      	movs	r2, #14
    ffc8:	2100      	movs	r1, #0
    ffca:	f00b ffe2 	bl	1bf92 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ffce:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ffd2:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    ffd4:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ffd6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    ffda:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    ffdc:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    ffde:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ffe2:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    ffe6:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    ffe8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ffec:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    ffee:	f7ff fe49 	bl	fc84 <bt_hci_cmd_send>
    fff2:	e7d7      	b.n	ffa4 <le_conn_param_req+0x68>
    fff4:	000214b0 	.word	0x000214b0

0000fff8 <hci_tx_thread>:
{
    fff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    fffc:	f8df 8128 	ldr.w	r8, [pc, #296]	; 10128 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x128>
		BT_ASSERT(err == 0);
   10000:	f8df 9128 	ldr.w	r9, [pc, #296]	; 1012c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x12c>
			ev_count += bt_conn_prepare_events(&events[1]);
   10004:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   10008:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1000c:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
   1000e:	f36f 3310 	bfc	r3, #12, #5
   10012:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   10016:	f001 fad7 	bl	115c8 <bt_conn_prepare_events>
   1001a:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   1001c:	f04f 32ff 	mov.w	r2, #4294967295
   10020:	f04f 33ff 	mov.w	r3, #4294967295
   10024:	4631      	mov	r1, r6
   10026:	4840      	ldr	r0, [pc, #256]	; (10128 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x128>)
   10028:	f00a fb28 	bl	1a67c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1002c:	b158      	cbz	r0, 10046 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x46>
   1002e:	f241 4271 	movw	r2, #5233	; 0x1471
   10032:	4649      	mov	r1, r9
   10034:	483e      	ldr	r0, [pc, #248]	; (10130 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x130>)
   10036:	f00a fd3d 	bl	1aab4 <printk>
   1003a:	4040      	eors	r0, r0
   1003c:	f380 8811 	msr	BASEPRI, r0
   10040:	f04f 0003 	mov.w	r0, #3
   10044:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   10046:	4d3b      	ldr	r5, [pc, #236]	; (10134 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x134>)
{
   10048:	4f37      	ldr	r7, [pc, #220]	; (10128 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x128>)
   1004a:	f105 0be0 	add.w	fp, r5, #224	; 0xe0
	for (; count; ev++, count--) {
   1004e:	b916      	cbnz	r6, 10056 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x56>
	z_impl_k_yield();
   10050:	f009 fa16 	bl	19480 <z_impl_k_yield>
	while (1) {
   10054:	e7d8      	b.n	10008 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x8>
		switch (ev->state) {
   10056:	68fa      	ldr	r2, [r7, #12]
   10058:	f3c2 3204 	ubfx	r2, r2, #12, #5
   1005c:	2a01      	cmp	r2, #1
   1005e:	d953      	bls.n	10108 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x108>
   10060:	2a04      	cmp	r2, #4
   10062:	d15b      	bne.n	1011c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x11c>
			if (ev->tag == BT_EVENT_CMD_TX) {
   10064:	7b3b      	ldrb	r3, [r7, #12]
   10066:	2b00      	cmp	r3, #0
   10068:	d151      	bne.n	1010e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x10e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1006a:	2200      	movs	r2, #0
   1006c:	2300      	movs	r3, #0
   1006e:	4832      	ldr	r0, [pc, #200]	; (10138 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x138>)
   10070:	f005 fc28 	bl	158c4 <net_buf_get>
	BT_ASSERT(buf);
   10074:	4604      	mov	r4, r0
   10076:	b958      	cbnz	r0, 10090 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x90>
   10078:	f241 420e 	movw	r2, #5134	; 0x140e
   1007c:	4649      	mov	r1, r9
   1007e:	482c      	ldr	r0, [pc, #176]	; (10130 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x130>)
   10080:	f00a fd18 	bl	1aab4 <printk>
   10084:	4040      	eors	r0, r0
   10086:	f380 8811 	msr	BASEPRI, r0
   1008a:	f04f 0003 	mov.w	r0, #3
   1008e:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   10090:	f04f 33ff 	mov.w	r3, #4294967295
   10094:	f04f 32ff 	mov.w	r2, #4294967295
   10098:	4658      	mov	r0, fp
   1009a:	f009 fb6f 	bl	1977c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   1009e:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
   100a2:	b153      	cbz	r3, 100ba <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xba>
		BT_ERR("Uncleared pending sent_cmd");
   100a4:	2145      	movs	r1, #69	; 0x45
   100a6:	4825      	ldr	r0, [pc, #148]	; (1013c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x13c>)
   100a8:	f00a fd04 	bl	1aab4 <printk>
		net_buf_unref(bt_dev.sent_cmd);
   100ac:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
   100b0:	f005 fc8a 	bl	159c8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   100b4:	2300      	movs	r3, #0
   100b6:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
   100ba:	4620      	mov	r0, r4
   100bc:	f005 fcc8 	bl	15a50 <net_buf_ref>
   100c0:	f8c5 00f8 	str.w	r0, [r5, #248]	; 0xf8
	err = bt_send(buf);
   100c4:	4620      	mov	r0, r4
   100c6:	f7ff fdd5 	bl	fc74 <bt_send>
	if (err) {
   100ca:	4602      	mov	r2, r0
   100cc:	b1e0      	cbz	r0, 10108 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x108>
		BT_ERR("Unable to send to driver (err %d)", err);
   100ce:	2145      	movs	r1, #69	; 0x45
   100d0:	481b      	ldr	r0, [pc, #108]	; (10140 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x140>)
   100d2:	f00a fcef 	bl	1aab4 <printk>
	z_impl_k_sem_give(sem);
   100d6:	481b      	ldr	r0, [pc, #108]	; (10144 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x144>)
   100d8:	f009 fb14 	bl	19704 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   100dc:	4620      	mov	r0, r4
   100de:	f005 fafb 	bl	156d8 <net_buf_id>
   100e2:	220c      	movs	r2, #12
   100e4:	4b18      	ldr	r3, [pc, #96]	; (10148 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x148>)
   100e6:	211f      	movs	r1, #31
   100e8:	fb02 3000 	mla	r0, r2, r0, r3
   100ec:	4622      	mov	r2, r4
   100ee:	8840      	ldrh	r0, [r0, #2]
   100f0:	f7fe ff20 	bl	ef34 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   100f4:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
   100f8:	f005 fc66 	bl	159c8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   100fc:	2300      	movs	r3, #0
		net_buf_unref(buf);
   100fe:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   10100:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
		net_buf_unref(buf);
   10104:	f005 fc60 	bl	159c8 <net_buf_unref>
	for (; count; ev++, count--) {
   10108:	3714      	adds	r7, #20
   1010a:	3e01      	subs	r6, #1
   1010c:	e79f      	b.n	1004e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x4e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1010e:	2b01      	cmp	r3, #1
   10110:	d1fa      	bne.n	10108 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x108>
					conn = CONTAINER_OF(ev->fifo,
   10112:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
   10114:	3834      	subs	r0, #52	; 0x34
   10116:	f001 febb 	bl	11e90 <bt_conn_process_tx>
   1011a:	e7f5      	b.n	10108 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x108>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   1011c:	2157      	movs	r1, #87	; 0x57
   1011e:	480b      	ldr	r0, [pc, #44]	; (1014c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x14c>)
   10120:	f00a fcc8 	bl	1aab4 <printk>
   10124:	e7f0      	b.n	10108 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x108>
   10126:	bf00      	nop
   10128:	2000832c 	.word	0x2000832c
   1012c:	000215a2 	.word	0x000215a2
   10130:	0002003d 	.word	0x0002003d
   10134:	20008000 	.word	0x20008000
   10138:	20008118 	.word	0x20008118
   1013c:	000218cc 	.word	0x000218cc
   10140:	000217bf 	.word	0x000217bf
   10144:	200080e0 	.word	0x200080e0
   10148:	2000ab60 	.word	0x2000ab60
   1014c:	000218ec 	.word	0x000218ec

00010150 <hci_event_prio>:
{
   10150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10154:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   10156:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   1015a:	4630      	mov	r0, r6
   1015c:	f00d fa20 	bl	1d5a0 <net_buf_simple_headroom>
	state->len = buf->len;
   10160:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   10164:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   10166:	f1b8 0f01 	cmp.w	r8, #1
   1016a:	d80b      	bhi.n	10184 <hci_event_prio+0x34>
   1016c:	f641 02ae 	movw	r2, #6318	; 0x18ae
   10170:	491a      	ldr	r1, [pc, #104]	; (101dc <hci_event_prio+0x8c>)
   10172:	481b      	ldr	r0, [pc, #108]	; (101e0 <hci_event_prio+0x90>)
   10174:	f00a fc9e 	bl	1aab4 <printk>
   10178:	4040      	eors	r0, r0
   1017a:	f380 8811 	msr	BASEPRI, r0
   1017e:	f04f 0003 	mov.w	r0, #3
   10182:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   10184:	4630      	mov	r0, r6
   10186:	2102      	movs	r1, #2
   10188:	f005 fd16 	bl	15bb8 <net_buf_simple_pull_mem>
   1018c:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1018e:	7800      	ldrb	r0, [r0, #0]
   10190:	f00b ffa0 	bl	1c0d4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   10194:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   10196:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   10198:	d40b      	bmi.n	101b2 <hci_event_prio+0x62>
   1019a:	f641 02b2 	movw	r2, #6322	; 0x18b2
   1019e:	490f      	ldr	r1, [pc, #60]	; (101dc <hci_event_prio+0x8c>)
   101a0:	480f      	ldr	r0, [pc, #60]	; (101e0 <hci_event_prio+0x90>)
   101a2:	f00a fc87 	bl	1aab4 <printk>
   101a6:	4040      	eors	r0, r0
   101a8:	f380 8811 	msr	BASEPRI, r0
   101ac:	f04f 0003 	mov.w	r0, #3
   101b0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   101b2:	2305      	movs	r3, #5
   101b4:	4621      	mov	r1, r4
   101b6:	4a0b      	ldr	r2, [pc, #44]	; (101e4 <hci_event_prio+0x94>)
   101b8:	7838      	ldrb	r0, [r7, #0]
   101ba:	f7fe fdb3 	bl	ed24 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   101be:	07b3      	lsls	r3, r6, #30
   101c0:	d507      	bpl.n	101d2 <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   101c2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   101c4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   101c8:	fa10 f585 	uxtah	r5, r0, r5
   101cc:	60a5      	str	r5, [r4, #8]
}
   101ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   101d2:	4620      	mov	r0, r4
}
   101d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   101d8:	f005 bbf6 	b.w	159c8 <net_buf_unref>
   101dc:	000215a2 	.word	0x000215a2
   101e0:	0002003d 	.word	0x0002003d
   101e4:	0001eea0 	.word	0x0001eea0

000101e8 <bt_recv>:
{
   101e8:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   101ea:	7d02      	ldrb	r2, [r0, #20]
   101ec:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   101ee:	2a01      	cmp	r2, #1
   101f0:	d007      	beq.n	10202 <bt_recv+0x1a>
   101f2:	2a03      	cmp	r2, #3
   101f4:	d113      	bne.n	1021e <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   101f6:	480f      	ldr	r0, [pc, #60]	; (10234 <bt_recv+0x4c>)
   101f8:	4629      	mov	r1, r5
   101fa:	f005 fbb7 	bl	1596c <net_buf_put>
		return 0;
   101fe:	2000      	movs	r0, #0
   10200:	e00c      	b.n	1021c <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   10202:	6883      	ldr	r3, [r0, #8]
   10204:	7818      	ldrb	r0, [r3, #0]
   10206:	f00b ff65 	bl	1c0d4 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1020a:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1020c:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1020e:	d502      	bpl.n	10216 <bt_recv+0x2e>
			hci_event_prio(buf);
   10210:	4628      	mov	r0, r5
   10212:	f7ff ff9d 	bl	10150 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   10216:	f014 0002 	ands.w	r0, r4, #2
   1021a:	d1ec      	bne.n	101f6 <bt_recv+0xe>
}
   1021c:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1021e:	2145      	movs	r1, #69	; 0x45
   10220:	4805      	ldr	r0, [pc, #20]	; (10238 <bt_recv+0x50>)
   10222:	f00a fc47 	bl	1aab4 <printk>
		net_buf_unref(buf);
   10226:	4628      	mov	r0, r5
   10228:	f005 fbce 	bl	159c8 <net_buf_unref>
		return -EINVAL;
   1022c:	f06f 0015 	mvn.w	r0, #21
   10230:	e7f4      	b.n	1021c <bt_recv+0x34>
   10232:	bf00      	nop
   10234:	200080fc 	.word	0x200080fc
   10238:	00021912 	.word	0x00021912

0001023c <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1023c:	4a08      	ldr	r2, [pc, #32]	; (10260 <bt_hci_driver_register+0x24>)
{
   1023e:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   10240:	f8d2 0134 	ldr.w	r0, [r2, #308]	; 0x134
   10244:	b930      	cbnz	r0, 10254 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   10246:	68d9      	ldr	r1, [r3, #12]
   10248:	b139      	cbz	r1, 1025a <bt_hci_driver_register+0x1e>
   1024a:	6919      	ldr	r1, [r3, #16]
   1024c:	b129      	cbz	r1, 1025a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   1024e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	return 0;
   10252:	4770      	bx	lr
		return -EALREADY;
   10254:	f06f 0044 	mvn.w	r0, #68	; 0x44
   10258:	4770      	bx	lr
		return -EINVAL;
   1025a:	f06f 0015 	mvn.w	r0, #21
}
   1025e:	4770      	bx	lr
   10260:	20008000 	.word	0x20008000

00010264 <bt_finalize_init>:
{
   10264:	b508      	push	{r3, lr}
   10266:	2102      	movs	r1, #2
   10268:	4803      	ldr	r0, [pc, #12]	; (10278 <bt_finalize_init+0x14>)
   1026a:	f00b ff5a 	bl	1c122 <atomic_or>
}
   1026e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   10272:	2000      	movs	r0, #0
   10274:	f7ff bb68 	b.w	f948 <bt_le_scan_update>
   10278:	20008094 	.word	0x20008094

0001027c <bt_init>:
{
   1027c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1027e:	4d60      	ldr	r5, [pc, #384]	; (10400 <bt_init+0x184>)
   10280:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   10284:	6899      	ldr	r1, [r3, #8]
   10286:	f011 0101 	ands.w	r1, r1, #1
   1028a:	d11e      	bne.n	102ca <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1028c:	f640 4003 	movw	r0, #3075	; 0xc03
   10290:	aa01      	add	r2, sp, #4
   10292:	f7fe fffb 	bl	f28c <bt_hci_cmd_send_sync>
		if (err) {
   10296:	4604      	mov	r4, r0
   10298:	2800      	cmp	r0, #0
   1029a:	f040 80ad 	bne.w	103f8 <bt_init+0x17c>
	uint8_t status = buf->data[0];
   1029e:	9b01      	ldr	r3, [sp, #4]
   102a0:	689b      	ldr	r3, [r3, #8]
	if (status) {
   102a2:	781b      	ldrb	r3, [r3, #0]
   102a4:	b973      	cbnz	r3, 102c4 <bt_init+0x48>
	scan_dev_found_cb = NULL;
   102a6:	4a57      	ldr	r2, [pc, #348]	; (10404 <bt_init+0x188>)
   102a8:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   102aa:	f105 0394 	add.w	r3, r5, #148	; 0x94
   102ae:	4618      	mov	r0, r3
   102b0:	f00b ff31 	bl	1c116 <atomic_get>
   102b4:	f000 0005 	and.w	r0, r0, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   102b8:	e8d3 2fef 	ldaex	r2, [r3]
   102bc:	e8c3 0fe1 	stlex	r1, r0, [r3]
   102c0:	2900      	cmp	r1, #0
   102c2:	d1f9      	bne.n	102b8 <bt_init+0x3c>
		net_buf_unref(rsp);
   102c4:	9801      	ldr	r0, [sp, #4]
   102c6:	f005 fb7f 	bl	159c8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   102ca:	2100      	movs	r1, #0
   102cc:	f241 0003 	movw	r0, #4099	; 0x1003
   102d0:	aa01      	add	r2, sp, #4
   102d2:	f7fe ffdb 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
   102d6:	4604      	mov	r4, r0
   102d8:	2800      	cmp	r0, #0
   102da:	f040 808d 	bne.w	103f8 <bt_init+0x17c>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   102de:	9b01      	ldr	r3, [sp, #4]
   102e0:	2208      	movs	r2, #8
   102e2:	6899      	ldr	r1, [r3, #8]
   102e4:	4848      	ldr	r0, [pc, #288]	; (10408 <bt_init+0x18c>)
   102e6:	3101      	adds	r1, #1
   102e8:	f00b fe28 	bl	1bf3c <memcpy>
	net_buf_unref(rsp);
   102ec:	9801      	ldr	r0, [sp, #4]
   102ee:	f005 fb6b 	bl	159c8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   102f2:	4621      	mov	r1, r4
   102f4:	f241 0001 	movw	r0, #4097	; 0x1001
   102f8:	aa01      	add	r2, sp, #4
   102fa:	f7fe ffc7 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
   102fe:	4604      	mov	r4, r0
   10300:	2800      	cmp	r0, #0
   10302:	d179      	bne.n	103f8 <bt_init+0x17c>
	read_local_ver_complete(rsp);
   10304:	9801      	ldr	r0, [sp, #4]
   10306:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   10308:	785a      	ldrb	r2, [r3, #1]
   1030a:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1030e:	78d9      	ldrb	r1, [r3, #3]
   10310:	789a      	ldrb	r2, [r3, #2]
   10312:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10316:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
   10318:	791a      	ldrb	r2, [r3, #4]
   1031a:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   1031e:	7a19      	ldrb	r1, [r3, #8]
   10320:	79da      	ldrb	r2, [r3, #7]
   10322:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10326:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   10328:	795a      	ldrb	r2, [r3, #5]
   1032a:	799b      	ldrb	r3, [r3, #6]
   1032c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   10330:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
   10332:	f005 fb49 	bl	159c8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   10336:	4621      	mov	r1, r4
   10338:	f241 0002 	movw	r0, #4098	; 0x1002
   1033c:	aa01      	add	r2, sp, #4
   1033e:	f7fe ffa5 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
   10342:	4604      	mov	r4, r0
   10344:	2800      	cmp	r0, #0
   10346:	d157      	bne.n	103f8 <bt_init+0x17c>
	memcpy(bt_dev.supported_commands, rp->commands,
   10348:	9b01      	ldr	r3, [sp, #4]
   1034a:	2240      	movs	r2, #64	; 0x40
   1034c:	6899      	ldr	r1, [r3, #8]
   1034e:	482f      	ldr	r0, [pc, #188]	; (1040c <bt_init+0x190>)
   10350:	3101      	adds	r1, #1
   10352:	f00b fdf3 	bl	1bf3c <memcpy>
	net_buf_unref(rsp);
   10356:	9801      	ldr	r0, [sp, #4]
   10358:	f005 fb36 	bl	159c8 <net_buf_unref>
		err = prng_init();
   1035c:	f000 fed6 	bl	1110c <prng_init>
		if (err) {
   10360:	4604      	mov	r4, r0
   10362:	2800      	cmp	r0, #0
   10364:	d148      	bne.n	103f8 <bt_init+0x17c>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   10366:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
   1036a:	069f      	lsls	r7, r3, #26
   1036c:	d40e      	bmi.n	1038c <bt_init+0x110>
		BT_WARN("Controller to host flow control not supported");
   1036e:	2157      	movs	r1, #87	; 0x57
   10370:	4827      	ldr	r0, [pc, #156]	; (10410 <bt_init+0x194>)
   10372:	f00a fb9f 	bl	1aab4 <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
   10376:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   1037a:	065e      	lsls	r6, r3, #25
   1037c:	d44c      	bmi.n	10418 <bt_init+0x19c>
		BT_ERR("Non-LE capable controller detected!");
   1037e:	2145      	movs	r1, #69	; 0x45
   10380:	4824      	ldr	r0, [pc, #144]	; (10414 <bt_init+0x198>)
   10382:	f00a fb97 	bl	1aab4 <printk>
		return -ENODEV;
   10386:	f06f 0412 	mvn.w	r4, #18
   1038a:	e035      	b.n	103f8 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
   1038c:	2107      	movs	r1, #7
   1038e:	f640 4033 	movw	r0, #3123	; 0xc33
   10392:	f7fe ff31 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
   10396:	4607      	mov	r7, r0
   10398:	b910      	cbnz	r0, 103a0 <bt_init+0x124>
		return -ENOBUFS;
   1039a:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1039e:	e02b      	b.n	103f8 <bt_init+0x17c>
	return net_buf_simple_add(&buf->b, len);
   103a0:	2107      	movs	r1, #7
   103a2:	3008      	adds	r0, #8
   103a4:	f005 fc26 	bl	15bf4 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
   103a8:	4621      	mov	r1, r4
   103aa:	2207      	movs	r2, #7
   103ac:	4606      	mov	r6, r0
   103ae:	f00b fdf0 	bl	1bf92 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
   103b2:	231b      	movs	r3, #27
   103b4:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
   103b6:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   103b8:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
   103ba:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
   103bc:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   103be:	4639      	mov	r1, r7
   103c0:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
   103c4:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   103c6:	f7fe ff61 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
   103ca:	4604      	mov	r4, r0
   103cc:	b9a0      	cbnz	r0, 103f8 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
   103ce:	2101      	movs	r1, #1
   103d0:	f640 4031 	movw	r0, #3121	; 0xc31
   103d4:	f7fe ff10 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
   103d8:	4606      	mov	r6, r0
   103da:	2800      	cmp	r0, #0
   103dc:	d0dd      	beq.n	1039a <bt_init+0x11e>
	return net_buf_simple_add_u8(&buf->b, val);
   103de:	2101      	movs	r1, #1
   103e0:	3008      	adds	r0, #8
   103e2:	f00d f8f5 	bl	1d5d0 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
   103e6:	4622      	mov	r2, r4
   103e8:	4631      	mov	r1, r6
   103ea:	f640 4031 	movw	r0, #3121	; 0xc31
   103ee:	f7fe ff4d 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
   103f2:	4604      	mov	r4, r0
   103f4:	2800      	cmp	r0, #0
   103f6:	d0be      	beq.n	10376 <bt_init+0xfa>
}
   103f8:	4620      	mov	r0, r4
   103fa:	b003      	add	sp, #12
   103fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103fe:	bf00      	nop
   10400:	20008000 	.word	0x20008000
   10404:	2000ab84 	.word	0x2000ab84
   10408:	2000803c 	.word	0x2000803c
   1040c:	20008044 	.word	0x20008044
   10410:	0002192b 	.word	0x0002192b
   10414:	0002195e 	.word	0x0002195e
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   10418:	2100      	movs	r1, #0
   1041a:	f242 0003 	movw	r0, #8195	; 0x2003
   1041e:	aa01      	add	r2, sp, #4
   10420:	f7fe ff34 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
   10424:	4604      	mov	r4, r0
   10426:	2800      	cmp	r0, #0
   10428:	d1e6      	bne.n	103f8 <bt_init+0x17c>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1042a:	9b01      	ldr	r3, [sp, #4]
   1042c:	2208      	movs	r2, #8
   1042e:	6899      	ldr	r1, [r3, #8]
   10430:	48a6      	ldr	r0, [pc, #664]	; (106cc <bt_init+0x450>)
   10432:	3101      	adds	r1, #1
   10434:	f00b fd82 	bl	1bf3c <memcpy>
	net_buf_unref(rsp);
   10438:	9801      	ldr	r0, [sp, #4]
   1043a:	f005 fac5 	bl	159c8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1043e:	4621      	mov	r1, r4
   10440:	f242 0002 	movw	r0, #8194	; 0x2002
   10444:	aa01      	add	r2, sp, #4
   10446:	f7fe ff21 	bl	f28c <bt_hci_cmd_send_sync>
		if (err) {
   1044a:	4604      	mov	r4, r0
   1044c:	2800      	cmp	r0, #0
   1044e:	d1d3      	bne.n	103f8 <bt_init+0x17c>
		le_read_buffer_size_complete(rsp);
   10450:	9b01      	ldr	r3, [sp, #4]
   10452:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   10454:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10458:	b291      	uxth	r1, r2
   1045a:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
   1045e:	b121      	cbz	r1, 1046a <bt_init+0x1ee>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   10460:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   10462:	489b      	ldr	r0, [pc, #620]	; (106d0 <bt_init+0x454>)
   10464:	4611      	mov	r1, r2
   10466:	f00d ff3a 	bl	1e2de <z_impl_k_sem_init>
		net_buf_unref(rsp);
   1046a:	9801      	ldr	r0, [sp, #4]
   1046c:	f005 faac 	bl	159c8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10470:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
   10474:	f016 0620 	ands.w	r6, r6, #32
   10478:	f000 80d4 	beq.w	10624 <bt_init+0x3a8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1047c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   10480:	071c      	lsls	r4, r3, #28
   10482:	d512      	bpl.n	104aa <bt_init+0x22e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   10484:	2100      	movs	r1, #0
   10486:	f242 001c 	movw	r0, #8220	; 0x201c
   1048a:	aa01      	add	r2, sp, #4
   1048c:	f7fe fefe 	bl	f28c <bt_hci_cmd_send_sync>
		if (err) {
   10490:	4604      	mov	r4, r0
   10492:	2800      	cmp	r0, #0
   10494:	d1b0      	bne.n	103f8 <bt_init+0x17c>
		le_read_supp_states_complete(rsp);
   10496:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10498:	6883      	ldr	r3, [r0, #8]
   1049a:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1049e:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   104a2:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
   104a6:	f005 fa8f 	bl	159c8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   104aa:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
   104ae:	0698      	lsls	r0, r3, #26
   104b0:	d524      	bpl.n	104fc <bt_init+0x280>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   104b2:	4668      	mov	r0, sp
   104b4:	f10d 0102 	add.w	r1, sp, #2
   104b8:	f7fe ff4a 	bl	f350 <hci_le_read_max_data_len>
		if (err) {
   104bc:	4604      	mov	r4, r0
   104be:	2800      	cmp	r0, #0
   104c0:	d19a      	bne.n	103f8 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   104c2:	2104      	movs	r1, #4
   104c4:	f242 0024 	movw	r0, #8228	; 0x2024
   104c8:	f7fe fe96 	bl	f1f8 <bt_hci_cmd_create>
		if (!buf) {
   104cc:	4606      	mov	r6, r0
   104ce:	2800      	cmp	r0, #0
   104d0:	f43f af63 	beq.w	1039a <bt_init+0x11e>
	return net_buf_simple_add(&buf->b, len);
   104d4:	2104      	movs	r1, #4
   104d6:	3008      	adds	r0, #8
   104d8:	f005 fb8c 	bl	15bf4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   104dc:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   104e0:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   104e2:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   104e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   104e8:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   104ea:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   104ec:	f242 0024 	movw	r0, #8228	; 0x2024
   104f0:	f7fe fecc 	bl	f28c <bt_hci_cmd_send_sync>
		if (err) {
   104f4:	4604      	mov	r4, r0
   104f6:	2800      	cmp	r0, #0
   104f8:	f47f af7e 	bne.w	103f8 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   104fc:	2108      	movs	r1, #8
   104fe:	f242 0001 	movw	r0, #8193	; 0x2001
   10502:	f7fe fe79 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
   10506:	4604      	mov	r4, r0
   10508:	2800      	cmp	r0, #0
   1050a:	f43f af46 	beq.w	1039a <bt_init+0x11e>
   1050e:	2108      	movs	r1, #8
   10510:	4408      	add	r0, r1
   10512:	f005 fb6f 	bl	15bf4 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   10516:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1051a:	f012 0f02 	tst.w	r2, #2
   1051e:	bf14      	ite	ne
   10520:	232f      	movne	r3, #47	; 0x2f
   10522:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   10524:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10526:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1052a:	bf48      	it	mi
   1052c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   10530:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
   10534:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   10538:	bf18      	it	ne
   1053a:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   1053e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   10540:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   10544:	4621      	mov	r1, r4
   10546:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   10548:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1054a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   1054c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1054e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   10550:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   10552:	71c2      	strb	r2, [r0, #7]
   10554:	f242 0001 	movw	r0, #8193	; 0x2001
   10558:	f7fe fe98 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
   1055c:	4604      	mov	r4, r0
   1055e:	2800      	cmp	r0, #0
   10560:	f47f af4a 	bne.w	103f8 <bt_init+0x17c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10564:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   10568:	069a      	lsls	r2, r3, #26
   1056a:	d41e      	bmi.n	105aa <bt_init+0x32e>
	if (bt_dev.le.acl_mtu) {
   1056c:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
   10570:	b9d9      	cbnz	r1, 105aa <bt_init+0x32e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   10572:	f241 0005 	movw	r0, #4101	; 0x1005
   10576:	aa01      	add	r2, sp, #4
   10578:	f7fe fe88 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
   1057c:	4604      	mov	r4, r0
   1057e:	2800      	cmp	r0, #0
   10580:	f47f af3a 	bne.w	103f8 <bt_init+0x17c>
	if (bt_dev.le.acl_mtu) {
   10584:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
   10588:	b963      	cbnz	r3, 105a4 <bt_init+0x328>
   1058a:	9b01      	ldr	r3, [sp, #4]
   1058c:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1058e:	785a      	ldrb	r2, [r3, #1]
   10590:	7899      	ldrb	r1, [r3, #2]
   10592:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   10596:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   1059a:	889a      	ldrh	r2, [r3, #4]
   1059c:	484c      	ldr	r0, [pc, #304]	; (106d0 <bt_init+0x454>)
   1059e:	4611      	mov	r1, r2
   105a0:	f00d fe9d 	bl	1e2de <z_impl_k_sem_init>
	net_buf_unref(rsp);
   105a4:	9801      	ldr	r0, [sp, #4]
   105a6:	f005 fa0f 	bl	159c8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   105aa:	2108      	movs	r1, #8
   105ac:	f640 4001 	movw	r0, #3073	; 0xc01
   105b0:	f7fe fe22 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
   105b4:	4604      	mov	r4, r0
   105b6:	2800      	cmp	r0, #0
   105b8:	f43f aeef 	beq.w	1039a <bt_init+0x11e>
   105bc:	2108      	movs	r1, #8
   105be:	4408      	add	r0, r1
   105c0:	f005 fb18 	bl	15bf4 <net_buf_simple_add>
	dst[0] = val;
   105c4:	2310      	movs	r3, #16
   105c6:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   105c8:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   105ca:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   105cc:	7043      	strb	r3, [r0, #1]
   105ce:	2602      	movs	r6, #2
   105d0:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   105d2:	4621      	mov	r1, r4
	dst[0] = val;
   105d4:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   105d6:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   105d8:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   105da:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   105dc:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   105de:	71c3      	strb	r3, [r0, #7]
   105e0:	f640 4001 	movw	r0, #3073	; 0xc01
   105e4:	f7fe fe52 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
   105e8:	4604      	mov	r4, r0
   105ea:	2800      	cmp	r0, #0
   105ec:	f47f af04 	bne.w	103f8 <bt_init+0x17c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   105f0:	4601      	mov	r1, r0
   105f2:	aa01      	add	r2, sp, #4
   105f4:	f64f 4001 	movw	r0, #64513	; 0xfc01
   105f8:	f7fe fe48 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
   105fc:	4604      	mov	r4, r0
   105fe:	b360      	cbz	r0, 1065a <bt_init+0x3de>
		BT_WARN("Vendor HCI extensions not available");
   10600:	2157      	movs	r1, #87	; 0x57
   10602:	4834      	ldr	r0, [pc, #208]	; (106d4 <bt_init+0x458>)
			BT_WARN("Failed to read supported vendor features");
   10604:	f00a fa56 	bl	1aab4 <printk>
		err = bt_conn_init();
   10608:	f001 fcd0 	bl	11fac <bt_conn_init>
		if (err) {
   1060c:	4604      	mov	r4, r0
   1060e:	2800      	cmp	r0, #0
   10610:	f47f aef2 	bne.w	103f8 <bt_init+0x17c>
		if (!bt_dev.id_count) {
   10614:	79eb      	ldrb	r3, [r5, #7]
   10616:	2b00      	cmp	r3, #0
   10618:	d150      	bne.n	106bc <bt_init+0x440>
			BT_INFO("No ID address. App must call settings_load()");
   1061a:	2149      	movs	r1, #73	; 0x49
   1061c:	482e      	ldr	r0, [pc, #184]	; (106d8 <bt_init+0x45c>)
   1061e:	f00a fa49 	bl	1aab4 <printk>
			return 0;
   10622:	e6e9      	b.n	103f8 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   10624:	2102      	movs	r1, #2
   10626:	f640 406d 	movw	r0, #3181	; 0xc6d
   1062a:	f7fe fde5 	bl	f1f8 <bt_hci_cmd_create>
		if (!buf) {
   1062e:	4604      	mov	r4, r0
   10630:	2800      	cmp	r0, #0
   10632:	f43f aeb2 	beq.w	1039a <bt_init+0x11e>
   10636:	2102      	movs	r1, #2
   10638:	3008      	adds	r0, #8
   1063a:	f005 fadb 	bl	15bf4 <net_buf_simple_add>
		cp_le->le = 0x01;
   1063e:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   10640:	4621      	mov	r1, r4
		cp_le->le = 0x01;
   10642:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   10644:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   10646:	4632      	mov	r2, r6
   10648:	f640 406d 	movw	r0, #3181	; 0xc6d
   1064c:	f7fe fe1e 	bl	f28c <bt_hci_cmd_send_sync>
		if (err) {
   10650:	4604      	mov	r4, r0
   10652:	2800      	cmp	r0, #0
   10654:	f43f af12 	beq.w	1047c <bt_init+0x200>
   10658:	e6ce      	b.n	103f8 <bt_init+0x17c>
	net_buf_unref(rsp);
   1065a:	9801      	ldr	r0, [sp, #4]
   1065c:	f005 f9b4 	bl	159c8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   10660:	4621      	mov	r1, r4
   10662:	f64f 4002 	movw	r0, #64514	; 0xfc02
   10666:	aa01      	add	r2, sp, #4
   10668:	f7fe fe10 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
   1066c:	4604      	mov	r4, r0
   1066e:	b110      	cbz	r0, 10676 <bt_init+0x3fa>
		BT_WARN("Failed to read supported vendor commands");
   10670:	2157      	movs	r1, #87	; 0x57
   10672:	481a      	ldr	r0, [pc, #104]	; (106dc <bt_init+0x460>)
   10674:	e7c6      	b.n	10604 <bt_init+0x388>
	rp.cmds = (void *)rsp->data;
   10676:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   10678:	4632      	mov	r2, r6
   1067a:	6899      	ldr	r1, [r3, #8]
   1067c:	4818      	ldr	r0, [pc, #96]	; (106e0 <bt_init+0x464>)
   1067e:	3101      	adds	r1, #1
   10680:	f00b fc5c 	bl	1bf3c <memcpy>
	net_buf_unref(rsp);
   10684:	9801      	ldr	r0, [sp, #4]
   10686:	f005 f99f 	bl	159c8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1068a:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
   1068e:	075b      	lsls	r3, r3, #29
   10690:	d5ba      	bpl.n	10608 <bt_init+0x38c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   10692:	4621      	mov	r1, r4
   10694:	f64f 4003 	movw	r0, #64515	; 0xfc03
   10698:	aa01      	add	r2, sp, #4
   1069a:	f7fe fdf7 	bl	f28c <bt_hci_cmd_send_sync>
		if (err) {
   1069e:	b110      	cbz	r0, 106a6 <bt_init+0x42a>
			BT_WARN("Failed to read supported vendor features");
   106a0:	2157      	movs	r1, #87	; 0x57
   106a2:	4810      	ldr	r0, [pc, #64]	; (106e4 <bt_init+0x468>)
   106a4:	e7ae      	b.n	10604 <bt_init+0x388>
		memcpy(bt_dev.vs_features, rp.feat->features,
   106a6:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
   106a8:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   106aa:	480f      	ldr	r0, [pc, #60]	; (106e8 <bt_init+0x46c>)
   106ac:	6899      	ldr	r1, [r3, #8]
   106ae:	4411      	add	r1, r2
   106b0:	f00b fc44 	bl	1bf3c <memcpy>
		net_buf_unref(rsp);
   106b4:	9801      	ldr	r0, [sp, #4]
   106b6:	f005 f987 	bl	159c8 <net_buf_unref>
   106ba:	e7a5      	b.n	10608 <bt_init+0x38c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   106bc:	2104      	movs	r1, #4
   106be:	480b      	ldr	r0, [pc, #44]	; (106ec <bt_init+0x470>)
   106c0:	f00b fd2f 	bl	1c122 <atomic_or>
	bt_finalize_init();
   106c4:	f7ff fdce 	bl	10264 <bt_finalize_init>
	return 0;
   106c8:	e696      	b.n	103f8 <bt_init+0x17c>
   106ca:	bf00      	nop
   106cc:	20008098 	.word	0x20008098
   106d0:	200080c8 	.word	0x200080c8
   106d4:	00021987 	.word	0x00021987
   106d8:	00021a0c 	.word	0x00021a0c
   106dc:	000219b0 	.word	0x000219b0
   106e0:	20008085 	.word	0x20008085
   106e4:	000219de 	.word	0x000219de
   106e8:	20008084 	.word	0x20008084
   106ec:	20008094 	.word	0x20008094

000106f0 <init_work>:
{
   106f0:	b510      	push	{r4, lr}
	err = bt_init();
   106f2:	f7ff fdc3 	bl	1027c <bt_init>
	if (ready_cb) {
   106f6:	4b03      	ldr	r3, [pc, #12]	; (10704 <init_work+0x14>)
   106f8:	681b      	ldr	r3, [r3, #0]
   106fa:	b113      	cbz	r3, 10702 <init_work+0x12>
}
   106fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   10700:	4718      	bx	r3
}
   10702:	bd10      	pop	{r4, pc}
   10704:	2000ab78 	.word	0x2000ab78

00010708 <bt_enable>:
{
   10708:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   1070c:	4d35      	ldr	r5, [pc, #212]	; (107e4 <bt_enable+0xdc>)
{
   1070e:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   10710:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
{
   10714:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
   10716:	b94b      	cbnz	r3, 1072c <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
   10718:	2145      	movs	r1, #69	; 0x45
   1071a:	4833      	ldr	r0, [pc, #204]	; (107e8 <bt_enable+0xe0>)
   1071c:	f00a f9ca 	bl	1aab4 <printk>
		return -ENODEV;
   10720:	f06f 0412 	mvn.w	r4, #18
}
   10724:	4620      	mov	r0, r4
   10726:	b008      	add	sp, #32
   10728:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1072c:	2101      	movs	r1, #1
   1072e:	f105 0094 	add.w	r0, r5, #148	; 0x94
   10732:	f00b fcf6 	bl	1c122 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   10736:	07c2      	lsls	r2, r0, #31
   10738:	d451      	bmi.n	107de <bt_enable+0xd6>
		err = bt_settings_init();
   1073a:	f7fe f913 	bl	e964 <bt_settings_init>
		if (err) {
   1073e:	4604      	mov	r4, r0
   10740:	2800      	cmp	r0, #0
   10742:	d1ef      	bne.n	10724 <bt_enable+0x1c>
	ready_cb = cb;
   10744:	4b29      	ldr	r3, [pc, #164]	; (107ec <bt_enable+0xe4>)
   10746:	f04f 0800 	mov.w	r8, #0
   1074a:	f04f 0900 	mov.w	r9, #0
   1074e:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10750:	f06f 0308 	mvn.w	r3, #8
   10754:	e9cd 0000 	strd	r0, r0, [sp]
   10758:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1075c:	9004      	str	r0, [sp, #16]
   1075e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   10762:	e9cd 8906 	strd	r8, r9, [sp, #24]
   10766:	4b22      	ldr	r3, [pc, #136]	; (107f0 <bt_enable+0xe8>)
   10768:	4922      	ldr	r1, [pc, #136]	; (107f4 <bt_enable+0xec>)
   1076a:	4823      	ldr	r0, [pc, #140]	; (107f8 <bt_enable+0xf0>)
   1076c:	f009 f8f2 	bl	19954 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   10770:	4922      	ldr	r1, [pc, #136]	; (107fc <bt_enable+0xf4>)
   10772:	4821      	ldr	r0, [pc, #132]	; (107f8 <bt_enable+0xf0>)
   10774:	f00d fdcd 	bl	1e312 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10778:	f06f 0307 	mvn.w	r3, #7
   1077c:	f640 0298 	movw	r2, #2200	; 0x898
   10780:	e9cd 4302 	strd	r4, r3, [sp, #8]
   10784:	e9cd 8906 	strd	r8, r9, [sp, #24]
   10788:	e9cd 4400 	strd	r4, r4, [sp]
   1078c:	4b1c      	ldr	r3, [pc, #112]	; (10800 <bt_enable+0xf8>)
   1078e:	491d      	ldr	r1, [pc, #116]	; (10804 <bt_enable+0xfc>)
   10790:	9404      	str	r4, [sp, #16]
   10792:	481d      	ldr	r0, [pc, #116]	; (10808 <bt_enable+0x100>)
   10794:	f009 f8de 	bl	19954 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   10798:	491c      	ldr	r1, [pc, #112]	; (1080c <bt_enable+0x104>)
   1079a:	481b      	ldr	r0, [pc, #108]	; (10808 <bt_enable+0x100>)
   1079c:	f00d fdb9 	bl	1e312 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   107a0:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   107a4:	68db      	ldr	r3, [r3, #12]
   107a6:	4798      	blx	r3
	if (err) {
   107a8:	4604      	mov	r4, r0
   107aa:	b128      	cbz	r0, 107b8 <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
   107ac:	4602      	mov	r2, r0
   107ae:	2145      	movs	r1, #69	; 0x45
   107b0:	4817      	ldr	r0, [pc, #92]	; (10810 <bt_enable+0x108>)
   107b2:	f00a f97f 	bl	1aab4 <printk>
		return err;
   107b6:	e7b5      	b.n	10724 <bt_enable+0x1c>
	if (!cb) {
   107b8:	b926      	cbnz	r6, 107c4 <bt_enable+0xbc>
}
   107ba:	b008      	add	sp, #32
   107bc:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   107c0:	f7ff bd5c 	b.w	1027c <bt_init>
   107c4:	2101      	movs	r1, #1
   107c6:	f105 0090 	add.w	r0, r5, #144	; 0x90
   107ca:	f00b fcaa 	bl	1c122 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   107ce:	07c3      	lsls	r3, r0, #31
   107d0:	d4a8      	bmi.n	10724 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
   107d2:	4810      	ldr	r0, [pc, #64]	; (10814 <bt_enable+0x10c>)
   107d4:	f105 0188 	add.w	r1, r5, #136	; 0x88
   107d8:	f00d fd29 	bl	1e22e <k_queue_append>
   107dc:	e7a2      	b.n	10724 <bt_enable+0x1c>
		return -EALREADY;
   107de:	f06f 0444 	mvn.w	r4, #68	; 0x44
   107e2:	e79f      	b.n	10724 <bt_enable+0x1c>
   107e4:	20008000 	.word	0x20008000
   107e8:	00021a3e 	.word	0x00021a3e
   107ec:	2000ab78 	.word	0x2000ab78
   107f0:	0000fff9 	.word	0x0000fff9
   107f4:	20010a90 	.word	0x20010a90
   107f8:	20008b20 	.word	0x20008b20
   107fc:	00021a5c 	.word	0x00021a5c
   10800:	0000ee11 	.word	0x0000ee11
   10804:	200101f8 	.word	0x200101f8
   10808:	20008a90 	.word	0x20008a90
   1080c:	00021a62 	.word	0x00021a62
   10810:	00021a68 	.word	0x00021a68
   10814:	2000a540 	.word	0x2000a540

00010818 <bt_get_name>:
}
   10818:	4800      	ldr	r0, [pc, #0]	; (1081c <bt_get_name+0x4>)
   1081a:	4770      	bx	lr
   1081c:	0001fac0 	.word	0x0001fac0

00010820 <bt_id_create>:
{
   10820:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10822:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   10824:	4605      	mov	r5, r0
   10826:	b918      	cbnz	r0, 10830 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   10828:	b314      	cbz	r4, 10870 <bt_id_create+0x50>
		return -EINVAL;
   1082a:	f06f 0415 	mvn.w	r4, #21
   1082e:	e01c      	b.n	1086a <bt_id_create+0x4a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   10830:	2300      	movs	r3, #0
   10832:	4669      	mov	r1, sp
   10834:	9300      	str	r3, [sp, #0]
   10836:	f8cd 3003 	str.w	r3, [sp, #3]
   1083a:	f00b fc7d 	bl	1c138 <bt_addr_le_cmp>
   1083e:	2800      	cmp	r0, #0
   10840:	d0f2      	beq.n	10828 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   10842:	782b      	ldrb	r3, [r5, #0]
   10844:	2b01      	cmp	r3, #1
   10846:	d104      	bne.n	10852 <bt_id_create+0x32>
   10848:	79ab      	ldrb	r3, [r5, #6]
   1084a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1084e:	2bc0      	cmp	r3, #192	; 0xc0
   10850:	d004      	beq.n	1085c <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
   10852:	2145      	movs	r1, #69	; 0x45
   10854:	480d      	ldr	r0, [pc, #52]	; (1088c <bt_id_create+0x6c>)
   10856:	f00a f92d 	bl	1aab4 <printk>
			return -EINVAL;
   1085a:	e7e6      	b.n	1082a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   1085c:	4628      	mov	r0, r5
   1085e:	f7fe f949 	bl	eaf4 <id_find>
   10862:	2800      	cmp	r0, #0
   10864:	dbe0      	blt.n	10828 <bt_id_create+0x8>
			return -EALREADY;
   10866:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   1086a:	4620      	mov	r0, r4
   1086c:	b003      	add	sp, #12
   1086e:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   10870:	4b07      	ldr	r3, [pc, #28]	; (10890 <bt_id_create+0x70>)
   10872:	79dc      	ldrb	r4, [r3, #7]
   10874:	2c01      	cmp	r4, #1
   10876:	d006      	beq.n	10886 <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
   10878:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   1087a:	4629      	mov	r1, r5
   1087c:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   1087e:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   10880:	f7fe fa90 	bl	eda4 <id_create.constprop.0>
	return new_id;
   10884:	e7f1      	b.n	1086a <bt_id_create+0x4a>
		return -ENOMEM;
   10886:	f06f 040b 	mvn.w	r4, #11
   1088a:	e7ee      	b.n	1086a <bt_id_create+0x4a>
   1088c:	00021a89 	.word	0x00021a89
   10890:	20008000 	.word	0x20008000

00010894 <bt_setup_public_id_addr>:
{
   10894:	b570      	push	{r4, r5, r6, lr}
   10896:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   10898:	2100      	movs	r1, #0
   1089a:	f241 0009 	movw	r0, #4105	; 0x1009
   1089e:	aa01      	add	r2, sp, #4
   108a0:	f7fe fcf4 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
   108a4:	4e1d      	ldr	r6, [pc, #116]	; (1091c <bt_setup_public_id_addr+0x88>)
   108a6:	4604      	mov	r4, r0
   108a8:	b138      	cbz	r0, 108ba <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
   108aa:	2157      	movs	r1, #87	; 0x57
   108ac:	481c      	ldr	r0, [pc, #112]	; (10920 <bt_setup_public_id_addr+0x8c>)
   108ae:	f00a f901 	bl	1aab4 <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
   108b2:	2300      	movs	r3, #0
   108b4:	71f3      	strb	r3, [r6, #7]
}
   108b6:	b006      	add	sp, #24
   108b8:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   108ba:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   108bc:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   108be:	689d      	ldr	r5, [r3, #8]
   108c0:	a904      	add	r1, sp, #16
   108c2:	3501      	adds	r5, #1
   108c4:	9004      	str	r0, [sp, #16]
   108c6:	f8ad 0014 	strh.w	r0, [sp, #20]
   108ca:	4628      	mov	r0, r5
   108cc:	f00b fb25 	bl	1bf1a <memcmp>
   108d0:	b918      	cbnz	r0, 108da <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
   108d2:	9801      	ldr	r0, [sp, #4]
   108d4:	f005 f878 	bl	159c8 <net_buf_unref>
   108d8:	e7eb      	b.n	108b2 <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   108da:	4b12      	ldr	r3, [pc, #72]	; (10924 <bt_setup_public_id_addr+0x90>)
   108dc:	2206      	movs	r2, #6
   108de:	f8d3 0007 	ldr.w	r0, [r3, #7]
   108e2:	f8b3 300b 	ldrh.w	r3, [r3, #11]
   108e6:	9002      	str	r0, [sp, #8]
   108e8:	a902      	add	r1, sp, #8
   108ea:	4628      	mov	r0, r5
   108ec:	f8ad 300c 	strh.w	r3, [sp, #12]
   108f0:	f00b fb13 	bl	1bf1a <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   108f4:	2800      	cmp	r0, #0
   108f6:	d0ec      	beq.n	108d2 <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
   108f8:	4629      	mov	r1, r5
   108fa:	2206      	movs	r2, #6
   108fc:	f10d 0011 	add.w	r0, sp, #17
   10900:	f00b fb1c 	bl	1bf3c <memcpy>
	net_buf_unref(rsp);
   10904:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   10906:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   1090a:	f005 f85d 	bl	159c8 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   1090e:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   10910:	4620      	mov	r0, r4
   10912:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
   10914:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   10916:	f7fe fa45 	bl	eda4 <id_create.constprop.0>
   1091a:	e7cc      	b.n	108b6 <bt_setup_public_id_addr+0x22>
   1091c:	20008000 	.word	0x20008000
   10920:	00021abc 	.word	0x00021abc
   10924:	0001ea20 	.word	0x0001ea20

00010928 <bt_read_static_addr>:
{
   10928:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1092c:	4b1c      	ldr	r3, [pc, #112]	; (109a0 <bt_read_static_addr+0x78>)
{
   1092e:	4607      	mov	r7, r0
   10930:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   10934:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   10936:	f014 0401 	ands.w	r4, r4, #1
   1093a:	d104      	bne.n	10946 <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
   1093c:	2157      	movs	r1, #87	; 0x57
   1093e:	4819      	ldr	r0, [pc, #100]	; (109a4 <bt_read_static_addr+0x7c>)
		BT_WARN("No static addresses stored in controller");
   10940:	f00a f8b8 	bl	1aab4 <printk>
   10944:	e00c      	b.n	10960 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   10946:	2100      	movs	r1, #0
   10948:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1094c:	aa01      	add	r2, sp, #4
   1094e:	f7fe fc9d 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
   10952:	4605      	mov	r5, r0
   10954:	b140      	cbz	r0, 10968 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
   10956:	2157      	movs	r1, #87	; 0x57
   10958:	4813      	ldr	r0, [pc, #76]	; (109a8 <bt_read_static_addr+0x80>)
   1095a:	f00a f8ab 	bl	1aab4 <printk>
		return 0;
   1095e:	2400      	movs	r4, #0
}
   10960:	4620      	mov	r0, r4
   10962:	b002      	add	sp, #8
   10964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10968:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
   1096c:	9b01      	ldr	r3, [sp, #4]
   1096e:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   10970:	785c      	ldrb	r4, [r3, #1]
   10972:	42b4      	cmp	r4, r6
   10974:	bf28      	it	cs
   10976:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10978:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   1097a:	42a5      	cmp	r5, r4
   1097c:	db07      	blt.n	1098e <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
   1097e:	9801      	ldr	r0, [sp, #4]
   10980:	f005 f822 	bl	159c8 <net_buf_unref>
	if (!cnt) {
   10984:	2c00      	cmp	r4, #0
   10986:	d1eb      	bne.n	10960 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
   10988:	2157      	movs	r1, #87	; 0x57
   1098a:	4808      	ldr	r0, [pc, #32]	; (109ac <bt_read_static_addr+0x84>)
   1098c:	e7d8      	b.n	10940 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1098e:	fb08 7005 	mla	r0, r8, r5, r7
   10992:	2216      	movs	r2, #22
   10994:	4631      	mov	r1, r6
   10996:	f00b fad1 	bl	1bf3c <memcpy>
	for (i = 0; i < cnt; i++) {
   1099a:	3501      	adds	r5, #1
   1099c:	e7ed      	b.n	1097a <bt_read_static_addr+0x52>
   1099e:	bf00      	nop
   109a0:	20008000 	.word	0x20008000
   109a4:	00021adf 	.word	0x00021adf
   109a8:	00021b10 	.word	0x00021b10
   109ac:	00021b35 	.word	0x00021b35

000109b0 <bt_setup_random_id_addr>:
{
   109b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   109b2:	4d15      	ldr	r5, [pc, #84]	; (10a08 <bt_setup_random_id_addr+0x58>)
{
   109b4:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   109b6:	79ec      	ldrb	r4, [r5, #7]
   109b8:	b9f4      	cbnz	r4, 109f8 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   109ba:	2101      	movs	r1, #1
   109bc:	a802      	add	r0, sp, #8
   109be:	f7ff ffb3 	bl	10928 <bt_read_static_addr>
   109c2:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   109c4:	b1c0      	cbz	r0, 109f8 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   109c6:	2716      	movs	r7, #22
   109c8:	b2e6      	uxtb	r6, r4
   109ca:	ab02      	add	r3, sp, #8
   109cc:	2206      	movs	r2, #6
   109ce:	fb07 3106 	mla	r1, r7, r6, r3
   109d2:	f10d 0001 	add.w	r0, sp, #1
   109d6:	f00b fab1 	bl	1bf3c <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   109da:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   109dc:	4669      	mov	r1, sp
   109de:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   109e0:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   109e4:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
   109e6:	f7fe f9dd 	bl	eda4 <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   109ea:	79ea      	ldrb	r2, [r5, #7]
   109ec:	b2e3      	uxtb	r3, r4
   109ee:	429a      	cmp	r2, r3
   109f0:	d8ea      	bhi.n	109c8 <bt_setup_random_id_addr+0x18>
}
   109f2:	2000      	movs	r0, #0
   109f4:	b009      	add	sp, #36	; 0x24
   109f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   109f8:	2100      	movs	r1, #0
   109fa:	4608      	mov	r0, r1
}
   109fc:	b009      	add	sp, #36	; 0x24
   109fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   10a02:	f7ff bf0d 	b.w	10820 <bt_id_create>
   10a06:	bf00      	nop
   10a08:	20008000 	.word	0x20008000

00010a0c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   10a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a10:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   10a12:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   10a14:	690d      	ldr	r5, [r1, #16]
{
   10a16:	b08f      	sub	sp, #60	; 0x3c
	bool dir_adv = (param->peer != NULL), scannable;
   10a18:	ebb5 0b03 	subs.w	fp, r5, r3
{
   10a1c:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10a1e:	4884      	ldr	r0, [pc, #528]	; (10c30 <bt_le_adv_start_legacy+0x224>)
	bool dir_adv = (param->peer != NULL), scannable;
   10a20:	bf18      	it	ne
   10a22:	f04f 0b01 	movne.w	fp, #1
	struct bt_conn *conn = NULL;
   10a26:	9307      	str	r3, [sp, #28]
   10a28:	f00b fb75 	bl	1c116 <atomic_get>
{
   10a2c:	4691      	mov	r9, r2
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10a2e:	0782      	lsls	r2, r0, #30
{
   10a30:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10a32:	f140 80ef 	bpl.w	10c14 <bt_le_adv_start_legacy+0x208>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   10a36:	4608      	mov	r0, r1
   10a38:	f7fe f874 	bl	eb24 <valid_adv_param>
   10a3c:	4607      	mov	r7, r0
   10a3e:	2800      	cmp	r0, #0
   10a40:	f000 80eb 	beq.w	10c1a <bt_le_adv_start_legacy+0x20e>
   10a44:	487a      	ldr	r0, [pc, #488]	; (10c30 <bt_le_adv_start_legacy+0x224>)
   10a46:	f00b fb66 	bl	1c116 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
   10a4a:	0503      	lsls	r3, r0, #20
   10a4c:	d402      	bmi.n	10a54 <bt_le_adv_start_legacy+0x48>
   10a4e:	4878      	ldr	r0, [pc, #480]	; (10c30 <bt_le_adv_start_legacy+0x224>)
   10a50:	f00b fb61 	bl	1c116 <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   10a54:	f106 0810 	add.w	r8, r6, #16
   10a58:	4640      	mov	r0, r8
   10a5a:	f00b fb5c 	bl	1c116 <atomic_get>
   10a5e:	f3c0 1180 	ubfx	r1, r0, #6, #1
   10a62:	0640      	lsls	r0, r0, #25
   10a64:	f100 80dc 	bmi.w	10c20 <bt_le_adv_start_legacy+0x214>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   10a68:	220f      	movs	r2, #15
   10a6a:	a80a      	add	r0, sp, #40	; 0x28
   10a6c:	9105      	str	r1, [sp, #20]
   10a6e:	f00b fa90 	bl	1bf92 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   10a72:	68a3      	ldr	r3, [r4, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   10a74:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   10a76:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   10a7a:	68e3      	ldr	r3, [r4, #12]
   10a7c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   10a80:	f00b fb3a 	bl	1c0f8 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   10a84:	7832      	ldrb	r2, [r6, #0]
   10a86:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   10a88:	9905      	ldr	r1, [sp, #20]
	if (adv->id != param->id) {
   10a8a:	429a      	cmp	r2, r3
	set_param.channel_map  = get_adv_channel_map(param->options);
   10a8c:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
   10a90:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   10a94:	d004      	beq.n	10aa0 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10a96:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10a9a:	4865      	ldr	r0, [pc, #404]	; (10c30 <bt_le_adv_start_legacy+0x224>)
   10a9c:	f00b fb4f 	bl	1c13e <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   10aa0:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;
   10aa2:	4b64      	ldr	r3, [pc, #400]	; (10c34 <bt_le_adv_start_legacy+0x228>)
	adv->id = param->id;
   10aa4:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   10aa6:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   10aaa:	465a      	mov	r2, fp
   10aac:	6861      	ldr	r1, [r4, #4]
   10aae:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   10ab2:	f7fe fcd7 	bl	f464 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   10ab6:	4683      	mov	fp, r0
   10ab8:	2800      	cmp	r0, #0
   10aba:	d169      	bne.n	10b90 <bt_le_adv_start_legacy+0x184>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
   10abc:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   10ac0:	2d00      	cmp	r5, #0
   10ac2:	d042      	beq.n	10b4a <bt_le_adv_start_legacy+0x13e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   10ac4:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   10ac6:	f00b fb29 	bl	1c11c <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   10aca:	6860      	ldr	r0, [r4, #4]
   10acc:	07c1      	lsls	r1, r0, #31
   10ace:	d544      	bpl.n	10b5a <bt_le_adv_start_legacy+0x14e>
		scannable = true;

		if (dir_adv) {
   10ad0:	2d00      	cmp	r5, #0
   10ad2:	d03f      	beq.n	10b54 <bt_le_adv_start_legacy+0x148>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   10ad4:	f010 0f10 	tst.w	r0, #16
   10ad8:	bf14      	ite	ne
   10ada:	2304      	movne	r3, #4
   10adc:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   10ade:	6921      	ldr	r1, [r4, #16]
   10ae0:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   10ae4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   10ae8:	f00b fb18 	bl	1c11c <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   10aec:	210f      	movs	r1, #15
   10aee:	f242 0006 	movw	r0, #8198	; 0x2006
   10af2:	f7fe fb81 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
   10af6:	4683      	mov	fp, r0
   10af8:	2800      	cmp	r0, #0
   10afa:	f000 8094 	beq.w	10c26 <bt_le_adv_start_legacy+0x21a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10afe:	220f      	movs	r2, #15
   10b00:	a90a      	add	r1, sp, #40	; 0x28
   10b02:	3008      	adds	r0, #8
   10b04:	f00c fd58 	bl	1d5b8 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   10b08:	2200      	movs	r2, #0
   10b0a:	4659      	mov	r1, fp
   10b0c:	f242 0006 	movw	r0, #8198	; 0x2006
   10b10:	f7fe fbbc 	bl	f28c <bt_hci_cmd_send_sync>
	if (err) {
   10b14:	2800      	cmp	r0, #0
   10b16:	f040 8089 	bne.w	10c2c <bt_le_adv_start_legacy+0x220>
		return err;
	}

	if (!dir_adv) {
   10b1a:	b34d      	cbz	r5, 10b70 <bt_le_adv_start_legacy+0x164>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   10b1c:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10b1e:	07da      	lsls	r2, r3, #31
   10b20:	d43a      	bmi.n	10b98 <bt_le_adv_start_legacy+0x18c>
	return set_le_adv_enable_legacy(adv, enable);
   10b22:	2101      	movs	r1, #1
   10b24:	4630      	mov	r0, r6
   10b26:	f7fe fdf7 	bl	f718 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   10b2a:	4683      	mov	fp, r0
   10b2c:	2800      	cmp	r0, #0
   10b2e:	d06a      	beq.n	10c06 <bt_le_adv_start_legacy+0x1fa>
		BT_ERR("Failed to start advertiser");
   10b30:	4841      	ldr	r0, [pc, #260]	; (10c38 <bt_le_adv_start_legacy+0x22c>)
   10b32:	2145      	movs	r1, #69	; 0x45
   10b34:	f009 ffbe 	bl	1aab4 <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   10b38:	9807      	ldr	r0, [sp, #28]
   10b3a:	b348      	cbz	r0, 10b90 <bt_le_adv_start_legacy+0x184>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10b3c:	2100      	movs	r1, #0
   10b3e:	f000 fddb 	bl	116f8 <bt_conn_set_state>
			bt_conn_unref(conn);
   10b42:	9807      	ldr	r0, [sp, #28]
   10b44:	f000 fdac 	bl	116a0 <bt_conn_unref>
   10b48:	e022      	b.n	10b90 <bt_le_adv_start_legacy+0x184>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   10b4a:	9508      	str	r5, [sp, #32]
   10b4c:	a908      	add	r1, sp, #32
   10b4e:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   10b52:	e7b8      	b.n	10ac6 <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
   10b54:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   10b58:	e7c8      	b.n	10aec <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   10b5a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10b5c:	b933      	cbnz	r3, 10b6c <bt_le_adv_start_legacy+0x160>
   10b5e:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   10b62:	f1c7 0303 	rsb	r3, r7, #3
   10b66:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   10b6a:	e7bf      	b.n	10aec <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   10b6c:	2701      	movs	r7, #1
   10b6e:	e7f8      	b.n	10b62 <bt_le_adv_start_legacy+0x156>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   10b70:	6863      	ldr	r3, [r4, #4]
   10b72:	4652      	mov	r2, sl
   10b74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   10b78:	e9cd 7301 	strd	r7, r3, [sp, #4]
   10b7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10b7e:	4649      	mov	r1, r9
   10b80:	9300      	str	r3, [sp, #0]
   10b82:	4630      	mov	r0, r6
   10b84:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10b86:	f7fe fd53 	bl	f630 <le_adv_update.constprop.0>
		if (err) {
   10b8a:	4683      	mov	fp, r0
   10b8c:	2800      	cmp	r0, #0
   10b8e:	d0c5      	beq.n	10b1c <bt_le_adv_start_legacy+0x110>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   10b90:	4658      	mov	r0, fp
   10b92:	b00f      	add	sp, #60	; 0x3c
   10b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   10b98:	4630      	mov	r0, r6
   10b9a:	a907      	add	r1, sp, #28
   10b9c:	f7fe fad8 	bl	f150 <le_adv_start_add_conn>
		if (err) {
   10ba0:	4683      	mov	fp, r0
   10ba2:	2800      	cmp	r0, #0
   10ba4:	d0bd      	beq.n	10b22 <bt_le_adv_start_legacy+0x116>
			if (err == -ENOMEM && !dir_adv &&
   10ba6:	f110 0f0c 	cmn.w	r0, #12
   10baa:	d1f1      	bne.n	10b90 <bt_le_adv_start_legacy+0x184>
   10bac:	2d00      	cmp	r5, #0
   10bae:	d1ef      	bne.n	10b90 <bt_le_adv_start_legacy+0x184>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   10bb0:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   10bb2:	079b      	lsls	r3, r3, #30
   10bb4:	d4ec      	bmi.n	10b90 <bt_le_adv_start_legacy+0x184>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   10bb6:	6860      	ldr	r0, [r4, #4]
   10bb8:	f080 0002 	eor.w	r0, r0, #2
   10bbc:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   10bc0:	f00b 0201 	and.w	r2, fp, #1
   10bc4:	210c      	movs	r1, #12
   10bc6:	4640      	mov	r0, r8
   10bc8:	f00b fac4 	bl	1c154 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   10bcc:	6862      	ldr	r2, [r4, #4]
   10bce:	2107      	movs	r1, #7
   10bd0:	4640      	mov	r0, r8
   10bd2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   10bd6:	f00b fabd 	bl	1c154 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   10bda:	6862      	ldr	r2, [r4, #4]
   10bdc:	2108      	movs	r1, #8
   10bde:	4640      	mov	r0, r8
   10be0:	f002 0201 	and.w	r2, r2, #1
   10be4:	f00b fab6 	bl	1c154 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   10be8:	463a      	mov	r2, r7
   10bea:	2109      	movs	r1, #9
   10bec:	4640      	mov	r0, r8
   10bee:	f00b fab1 	bl	1c154 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   10bf2:	6862      	ldr	r2, [r4, #4]
   10bf4:	210b      	movs	r1, #11
   10bf6:	4640      	mov	r0, r8
   10bf8:	f3c2 0280 	ubfx	r2, r2, #2, #1
   10bfc:	f00b faaa 	bl	1c154 <atomic_set_bit_to>
	return 0;
   10c00:	f04f 0b00 	mov.w	fp, #0
   10c04:	e7c4      	b.n	10b90 <bt_le_adv_start_legacy+0x184>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   10c06:	9807      	ldr	r0, [sp, #28]
   10c08:	b108      	cbz	r0, 10c0e <bt_le_adv_start_legacy+0x202>
		bt_conn_unref(conn);
   10c0a:	f000 fd49 	bl	116a0 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   10c0e:	2d00      	cmp	r5, #0
   10c10:	d1d6      	bne.n	10bc0 <bt_le_adv_start_legacy+0x1b4>
   10c12:	e7d0      	b.n	10bb6 <bt_le_adv_start_legacy+0x1aa>
		return -EAGAIN;
   10c14:	f06f 0b0a 	mvn.w	fp, #10
   10c18:	e7ba      	b.n	10b90 <bt_le_adv_start_legacy+0x184>
		return -EINVAL;
   10c1a:	f06f 0b15 	mvn.w	fp, #21
   10c1e:	e7b7      	b.n	10b90 <bt_le_adv_start_legacy+0x184>
		return -EALREADY;
   10c20:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   10c24:	e7b4      	b.n	10b90 <bt_le_adv_start_legacy+0x184>
		return -ENOBUFS;
   10c26:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   10c2a:	e7b1      	b.n	10b90 <bt_le_adv_start_legacy+0x184>
   10c2c:	4683      	mov	fp, r0
   10c2e:	e7af      	b.n	10b90 <bt_le_adv_start_legacy+0x184>
   10c30:	20008094 	.word	0x20008094
   10c34:	20008000 	.word	0x20008000
   10c38:	00021b63 	.word	0x00021b63

00010c3c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   10c3c:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   10c3e:	9c04      	ldr	r4, [sp, #16]
   10c40:	e9cd 3400 	strd	r3, r4, [sp]
   10c44:	4613      	mov	r3, r2
   10c46:	460a      	mov	r2, r1
   10c48:	4601      	mov	r1, r0
   10c4a:	4802      	ldr	r0, [pc, #8]	; (10c54 <bt_le_adv_start+0x18>)
   10c4c:	f7ff fede 	bl	10a0c <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   10c50:	b002      	add	sp, #8
   10c52:	bd10      	pop	{r4, pc}
   10c54:	20008018 	.word	0x20008018

00010c58 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   10c58:	b530      	push	{r4, r5, lr}
   10c5a:	4c29      	ldr	r4, [pc, #164]	; (10d00 <bt_le_adv_stop+0xa8>)
   10c5c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10c60:	b085      	sub	sp, #20
   10c62:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10c66:	f00b fa6a 	bl	1c13e <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10c6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10c6e:	f00b fa52 	bl	1c116 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   10c72:	0641      	lsls	r1, r0, #25
   10c74:	d403      	bmi.n	10c7e <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
   10c76:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   10c78:	4620      	mov	r0, r4
   10c7a:	b005      	add	sp, #20
   10c7c:	bd30      	pop	{r4, r5, pc}
   10c7e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10c82:	f00b fa48 	bl	1c116 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10c86:	05c2      	lsls	r2, r0, #23
   10c88:	d521      	bpl.n	10cce <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   10c8a:	2300      	movs	r3, #0
   10c8c:	4669      	mov	r1, sp
   10c8e:	f104 0021 	add.w	r0, r4, #33	; 0x21
   10c92:	9300      	str	r3, [sp, #0]
   10c94:	f8cd 3003 	str.w	r3, [sp, #3]
   10c98:	f00b fa4e 	bl	1c138 <bt_addr_le_cmp>
   10c9c:	7e25      	ldrb	r5, [r4, #24]
   10c9e:	bb58      	cbnz	r0, 10cf8 <bt_le_adv_stop+0xa0>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   10ca0:	4b18      	ldr	r3, [pc, #96]	; (10d04 <bt_le_adv_stop+0xac>)
   10ca2:	a902      	add	r1, sp, #8
   10ca4:	889a      	ldrh	r2, [r3, #4]
   10ca6:	6818      	ldr	r0, [r3, #0]
   10ca8:	f8ad 200c 	strh.w	r2, [sp, #12]
   10cac:	2204      	movs	r2, #4
   10cae:	799b      	ldrb	r3, [r3, #6]
   10cb0:	9002      	str	r0, [sp, #8]
   10cb2:	f88d 300e 	strb.w	r3, [sp, #14]
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   10cb6:	4628      	mov	r0, r5
   10cb8:	f000 fe54 	bl	11964 <bt_conn_lookup_state_le>
   10cbc:	4604      	mov	r4, r0
	if (conn) {
   10cbe:	b130      	cbz	r0, 10cce <bt_le_adv_stop+0x76>
		conn->err = status;
   10cc0:	2100      	movs	r1, #0
   10cc2:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10cc4:	f000 fd18 	bl	116f8 <bt_conn_set_state>
		bt_conn_unref(conn);
   10cc8:	4620      	mov	r0, r4
   10cca:	f000 fce9 	bl	116a0 <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
   10cce:	2100      	movs	r1, #0
   10cd0:	480d      	ldr	r0, [pc, #52]	; (10d08 <bt_le_adv_stop+0xb0>)
   10cd2:	f7fe fd21 	bl	f718 <set_le_adv_enable_legacy>
		if (err) {
   10cd6:	4604      	mov	r4, r0
   10cd8:	2800      	cmp	r0, #0
   10cda:	d1cd      	bne.n	10c78 <bt_le_adv_stop+0x20>
   10cdc:	480b      	ldr	r0, [pc, #44]	; (10d0c <bt_le_adv_stop+0xb4>)
   10cde:	f00b fa1a 	bl	1c116 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10ce2:	0683      	lsls	r3, r0, #26
   10ce4:	d5c7      	bpl.n	10c76 <bt_le_adv_stop+0x1e>
	return set_le_scan_enable_legacy(enable);
   10ce6:	4620      	mov	r0, r4
   10ce8:	f7fe fb80 	bl	f3ec <set_le_scan_enable_legacy>
			le_set_private_addr(BT_ID_DEFAULT);
   10cec:	f00b fa58 	bl	1c1a0 <le_set_private_addr.constprop.0>
	return set_le_scan_enable_legacy(enable);
   10cf0:	2001      	movs	r0, #1
   10cf2:	f7fe fb7b 	bl	f3ec <set_le_scan_enable_legacy>
   10cf6:	e7bf      	b.n	10c78 <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   10cf8:	2205      	movs	r2, #5
   10cfa:	f104 0121 	add.w	r1, r4, #33	; 0x21
   10cfe:	e7da      	b.n	10cb6 <bt_le_adv_stop+0x5e>
   10d00:	20008000 	.word	0x20008000
   10d04:	0001ea20 	.word	0x0001ea20
   10d08:	20008018 	.word	0x20008018
   10d0c:	20008094 	.word	0x20008094

00010d10 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   10d10:	b513      	push	{r0, r1, r4, lr}
   10d12:	4818      	ldr	r0, [pc, #96]	; (10d74 <bt_le_adv_resume+0x64>)
   10d14:	f00b f9ff 	bl	1c116 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   10d18:	04c1      	lsls	r1, r0, #19
   10d1a:	d529      	bpl.n	10d70 <bt_le_adv_resume+0x60>
   10d1c:	4815      	ldr	r0, [pc, #84]	; (10d74 <bt_le_adv_resume+0x64>)
   10d1e:	f00b f9fa 	bl	1c116 <atomic_get>
   10d22:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   10d24:	f3c0 1480 	ubfx	r4, r0, #6, #1
   10d28:	d422      	bmi.n	10d70 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10d2a:	4812      	ldr	r0, [pc, #72]	; (10d74 <bt_le_adv_resume+0x64>)
   10d2c:	f00b f9f3 	bl	1c116 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   10d30:	05c3      	lsls	r3, r0, #23
   10d32:	d51d      	bpl.n	10d70 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   10d34:	4810      	ldr	r0, [pc, #64]	; (10d78 <bt_le_adv_resume+0x68>)
   10d36:	a901      	add	r1, sp, #4
   10d38:	f7fe fa0a 	bl	f150 <le_adv_start_add_conn>
	if (err) {
   10d3c:	b9c0      	cbnz	r0, 10d70 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   10d3e:	2101      	movs	r1, #1
   10d40:	480d      	ldr	r0, [pc, #52]	; (10d78 <bt_le_adv_resume+0x68>)
   10d42:	f7fe fce9 	bl	f718 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   10d46:	b150      	cbz	r0, 10d5e <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10d48:	4621      	mov	r1, r4
   10d4a:	9801      	ldr	r0, [sp, #4]
   10d4c:	f000 fcd4 	bl	116f8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10d50:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10d54:	4807      	ldr	r0, [pc, #28]	; (10d74 <bt_le_adv_resume+0x64>)
   10d56:	f00b f9f2 	bl	1c13e <atomic_and>
	return (old & mask) != 0;
   10d5a:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   10d5e:	9801      	ldr	r0, [sp, #4]
   10d60:	f000 fc9e 	bl	116a0 <bt_conn_unref>
	if (persist_paused) {
   10d64:	b124      	cbz	r4, 10d70 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10d6a:	4802      	ldr	r0, [pc, #8]	; (10d74 <bt_le_adv_resume+0x64>)
   10d6c:	f00b f9d9 	bl	1c122 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   10d70:	b002      	add	sp, #8
   10d72:	bd10      	pop	{r4, pc}
   10d74:	20008028 	.word	0x20008028
   10d78:	20008018 	.word	0x20008018

00010d7c <enh_conn_complete>:
{
   10d7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
   10d80:	7804      	ldrb	r4, [r0, #0]
{
   10d82:	4605      	mov	r5, r0
	if (evt->status) {
   10d84:	2c00      	cmp	r4, #0
   10d86:	d048      	beq.n	10e1a <enh_conn_complete+0x9e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10d88:	2c3c      	cmp	r4, #60	; 0x3c
   10d8a:	d11a      	bne.n	10dc2 <enh_conn_complete+0x46>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10d8c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10d90:	4872      	ldr	r0, [pc, #456]	; (10f5c <enh_conn_complete+0x1e0>)
   10d92:	f00b f9d4 	bl	1c13e <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10d96:	2000      	movs	r0, #0
   10d98:	f7fd ffa6 	bl	ece8 <find_pending_connect.part.0>
		if (!conn) {
   10d9c:	4605      	mov	r5, r0
   10d9e:	b930      	cbnz	r0, 10dae <enh_conn_complete+0x32>
			BT_ERR("No pending slave connection");
   10da0:	2145      	movs	r1, #69	; 0x45
   10da2:	486f      	ldr	r0, [pc, #444]	; (10f60 <enh_conn_complete+0x1e4>)
}
   10da4:	b004      	add	sp, #16
   10da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
   10daa:	f009 be83 	b.w	1aab4 <printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   10dae:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10db0:	2100      	movs	r1, #0
   10db2:	f000 fca1 	bl	116f8 <bt_conn_set_state>
		bt_conn_unref(conn);
   10db6:	4628      	mov	r0, r5
}
   10db8:	b004      	add	sp, #16
   10dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   10dbe:	f000 bc6f 	b.w	116a0 <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10dc2:	2c02      	cmp	r4, #2
   10dc4:	d121      	bne.n	10e0a <enh_conn_complete+0x8e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   10dc6:	2100      	movs	r1, #0
   10dc8:	2206      	movs	r2, #6
   10dca:	4608      	mov	r0, r1
   10dcc:	f000 fdca 	bl	11964 <bt_conn_lookup_state_le>
	if (!conn) {
   10dd0:	4605      	mov	r5, r0
   10dd2:	b948      	cbnz	r0, 10de8 <enh_conn_complete+0x6c>
		BT_ERR("No pending master connection");
   10dd4:	2145      	movs	r1, #69	; 0x45
   10dd6:	4863      	ldr	r0, [pc, #396]	; (10f64 <enh_conn_complete+0x1e8>)
   10dd8:	f009 fe6c 	bl	1aab4 <printk>
			bt_le_scan_update(false);
   10ddc:	2000      	movs	r0, #0
   10dde:	f7fe fdb3 	bl	f948 <bt_le_scan_update>
}
   10de2:	b004      	add	sp, #16
   10de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   10de8:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10dea:	2100      	movs	r1, #0
   10dec:	f000 fc84 	bl	116f8 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10df0:	1d28      	adds	r0, r5, #4
   10df2:	f00b f990 	bl	1c116 <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   10df6:	07c2      	lsls	r2, r0, #31
   10df8:	d503      	bpl.n	10e02 <enh_conn_complete+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   10dfa:	4621      	mov	r1, r4
   10dfc:	4628      	mov	r0, r5
   10dfe:	f000 fc7b 	bl	116f8 <bt_conn_set_state>
	bt_conn_unref(conn);
   10e02:	4628      	mov	r0, r5
   10e04:	f000 fc4c 	bl	116a0 <bt_conn_unref>
   10e08:	e7e8      	b.n	10ddc <enh_conn_complete+0x60>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   10e0a:	4622      	mov	r2, r4
   10e0c:	2157      	movs	r1, #87	; 0x57
   10e0e:	4856      	ldr	r0, [pc, #344]	; (10f68 <enh_conn_complete+0x1ec>)
}
   10e10:	b004      	add	sp, #16
   10e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   10e16:	f009 be4d 	b.w	1aab4 <printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10e1a:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10e1c:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10e20:	3b02      	subs	r3, #2
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10e22:	1d06      	adds	r6, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10e24:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10e26:	4631      	mov	r1, r6
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   10e28:	fa1f f887 	uxth.w	r8, r7
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10e2c:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   10e2e:	d834      	bhi.n	10e9a <enh_conn_complete+0x11e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   10e30:	f00b f974 	bl	1c11c <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   10e34:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10e38:	2206      	movs	r2, #6
   10e3a:	3b02      	subs	r3, #2
   10e3c:	f105 0111 	add.w	r1, r5, #17
   10e40:	f10d 0001 	add.w	r0, sp, #1
   10e44:	f88d 3008 	strb.w	r3, [sp, #8]
   10e48:	f00b f878 	bl	1bf3c <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   10e4c:	2301      	movs	r3, #1
   10e4e:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
   10e52:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
   10e54:	bb40      	cbnz	r0, 10ea8 <enh_conn_complete+0x12c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   10e56:	2206      	movs	r2, #6
   10e58:	a902      	add	r1, sp, #8
   10e5a:	f000 fd83 	bl	11964 <bt_conn_lookup_state_le>
   10e5e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10e60:	78eb      	ldrb	r3, [r5, #3]
   10e62:	2b01      	cmp	r3, #1
   10e64:	d104      	bne.n	10e70 <enh_conn_complete+0xf4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10e66:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10e6a:	483c      	ldr	r0, [pc, #240]	; (10f5c <enh_conn_complete+0x1e0>)
   10e6c:	f00b f967 	bl	1c13e <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10e70:	78eb      	ldrb	r3, [r5, #3]
   10e72:	b923      	cbnz	r3, 10e7e <enh_conn_complete+0x102>
   10e74:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   10e78:	483c      	ldr	r0, [pc, #240]	; (10f6c <enh_conn_complete+0x1f0>)
   10e7a:	f00b f960 	bl	1c13e <atomic_and>
	if (!conn) {
   10e7e:	b9dc      	cbnz	r4, 10eb8 <enh_conn_complete+0x13c>
		BT_ERR("No pending conn for peer %s",
   10e80:	4630      	mov	r0, r6
   10e82:	f7fd fc5d 	bl	e740 <bt_addr_le_str_real>
   10e86:	2145      	movs	r1, #69	; 0x45
   10e88:	4602      	mov	r2, r0
   10e8a:	4839      	ldr	r0, [pc, #228]	; (10f70 <enh_conn_complete+0x1f4>)
   10e8c:	f009 fe12 	bl	1aab4 <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   10e90:	211f      	movs	r1, #31
   10e92:	4640      	mov	r0, r8
   10e94:	f00b f99a 	bl	1c1cc <bt_hci_disconnect>
		return;
   10e98:	e7a3      	b.n	10de2 <enh_conn_complete+0x66>
		bt_addr_le_copy(&id_addr,
   10e9a:	f00b f93f 	bl	1c11c <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   10e9e:	4631      	mov	r1, r6
   10ea0:	4668      	mov	r0, sp
   10ea2:	f00b f93b 	bl	1c11c <bt_addr_le_copy>
   10ea6:	e7d4      	b.n	10e52 <enh_conn_complete+0xd6>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10ea8:	2801      	cmp	r0, #1
   10eaa:	d103      	bne.n	10eb4 <enh_conn_complete+0x138>
   10eac:	a802      	add	r0, sp, #8
   10eae:	f7fd ff1b 	bl	ece8 <find_pending_connect.part.0>
   10eb2:	e7d4      	b.n	10e5e <enh_conn_complete+0xe2>
	return NULL;
   10eb4:	2400      	movs	r4, #0
   10eb6:	e7d3      	b.n	10e60 <enh_conn_complete+0xe4>
	conn->handle = handle;
   10eb8:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10eba:	a902      	add	r1, sp, #8
	conn->handle = handle;
   10ebc:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10ec0:	f00b f92c 	bl	1c11c <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   10ec4:	7e2a      	ldrb	r2, [r5, #24]
   10ec6:	7deb      	ldrb	r3, [r5, #23]
   10ec8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10ecc:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   10ed0:	7eaa      	ldrb	r2, [r5, #26]
   10ed2:	7e6b      	ldrb	r3, [r5, #25]
   10ed4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10ed8:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10edc:	7f2a      	ldrb	r2, [r5, #28]
   10ede:	7eeb      	ldrb	r3, [r5, #27]
   10ee0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
   10ee4:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10ee6:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   10eea:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   10eec:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10eee:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   10ef0:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10ef2:	d113      	bne.n	10f1c <enh_conn_complete+0x1a0>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   10ef4:	4669      	mov	r1, sp
   10ef6:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10efa:	f00b f90f 	bl	1c11c <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   10efe:	7a21      	ldrb	r1, [r4, #8]
   10f00:	4d1c      	ldr	r5, [pc, #112]	; (10f74 <enh_conn_complete+0x1f8>)
   10f02:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   10f06:	4429      	add	r1, r5
   10f08:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10f0c:	f00b f906 	bl	1c11c <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   10f10:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   10f14:	065b      	lsls	r3, r3, #25
   10f16:	d501      	bpl.n	10f1c <enh_conn_complete+0x1a0>
			bt_le_adv_resume();
   10f18:	f7ff fefa 	bl	10d10 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10f1c:	78e3      	ldrb	r3, [r4, #3]
   10f1e:	b96b      	cbnz	r3, 10f3c <enh_conn_complete+0x1c0>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   10f20:	4669      	mov	r1, sp
   10f22:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10f26:	f00b f8f9 	bl	1c11c <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   10f2a:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   10f2c:	4b11      	ldr	r3, [pc, #68]	; (10f74 <enh_conn_complete+0x1f8>)
					&bt_dev.id_addr[conn->id]);
   10f2e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   10f32:	4419      	add	r1, r3
   10f34:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10f38:	f00b f8f0 	bl	1c11c <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   10f3c:	2107      	movs	r1, #7
   10f3e:	4620      	mov	r0, r4
   10f40:	f000 fbda 	bl	116f8 <bt_conn_set_state>
	conn_auto_initiate(conn);
   10f44:	4620      	mov	r0, r4
   10f46:	f7fe ff1f 	bl	fd88 <conn_auto_initiate>
	bt_conn_unref(conn);
   10f4a:	4620      	mov	r0, r4
   10f4c:	f000 fba8 	bl	116a0 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10f50:	78e3      	ldrb	r3, [r4, #3]
   10f52:	2b00      	cmp	r3, #0
   10f54:	f47f af45 	bne.w	10de2 <enh_conn_complete+0x66>
   10f58:	e740      	b.n	10ddc <enh_conn_complete+0x60>
   10f5a:	bf00      	nop
   10f5c:	20008028 	.word	0x20008028
   10f60:	00021b83 	.word	0x00021b83
   10f64:	00021ba4 	.word	0x00021ba4
   10f68:	00021bc6 	.word	0x00021bc6
   10f6c:	20008094 	.word	0x20008094
   10f70:	00021be4 	.word	0x00021be4
   10f74:	20008000 	.word	0x20008000

00010f78 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   10f78:	b570      	push	{r4, r5, r6, lr}
   10f7a:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10f7c:	482e      	ldr	r0, [pc, #184]	; (11038 <bt_le_scan_start+0xc0>)
   10f7e:	f00b f8ca 	bl	1c116 <atomic_get>
   10f82:	460e      	mov	r6, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10f84:	0781      	lsls	r1, r0, #30
   10f86:	d554      	bpl.n	11032 <bt_le_scan_start+0xba>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   10f88:	782a      	ldrb	r2, [r5, #0]
   10f8a:	2a01      	cmp	r2, #1
   10f8c:	d903      	bls.n	10f96 <bt_le_scan_start+0x1e>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   10f8e:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   10f92:	4620      	mov	r0, r4
   10f94:	bd70      	pop	{r4, r5, r6, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   10f96:	686b      	ldr	r3, [r5, #4]
   10f98:	f033 030f 	bics.w	r3, r3, #15
   10f9c:	d1f7      	bne.n	10f8e <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   10f9e:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   10fa2:	8928      	ldrh	r0, [r5, #8]
   10fa4:	1f03      	subs	r3, r0, #4
   10fa6:	b29b      	uxth	r3, r3
   10fa8:	42a3      	cmp	r3, r4
   10faa:	d8f0      	bhi.n	10f8e <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   10fac:	8969      	ldrh	r1, [r5, #10]
   10fae:	1f0b      	subs	r3, r1, #4
   10fb0:	b29b      	uxth	r3, r3
   10fb2:	42a3      	cmp	r3, r4
   10fb4:	d8eb      	bhi.n	10f8e <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   10fb6:	4288      	cmp	r0, r1
   10fb8:	d3e9      	bcc.n	10f8e <bt_le_scan_start+0x16>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10fba:	b94a      	cbnz	r2, 10fd0 <bt_le_scan_start+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   10fbc:	2140      	movs	r1, #64	; 0x40
   10fbe:	481e      	ldr	r0, [pc, #120]	; (11038 <bt_le_scan_start+0xc0>)
   10fc0:	f00b f8af 	bl	1c122 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10fc4:	ea10 0301 	ands.w	r3, r0, r1
   10fc8:	d007      	beq.n	10fda <bt_le_scan_start+0x62>
		return -EALREADY;
   10fca:	f06f 0444 	mvn.w	r4, #68	; 0x44
   10fce:	e7e0      	b.n	10f92 <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10fd0:	f7fe fc2e 	bl	f830 <bt_le_scan_random_addr_check>
   10fd4:	2800      	cmp	r0, #0
   10fd6:	d1f1      	bne.n	10fbc <bt_le_scan_start+0x44>
   10fd8:	e7d9      	b.n	10f8e <bt_le_scan_start+0x16>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10fda:	4817      	ldr	r0, [pc, #92]	; (11038 <bt_le_scan_start+0xc0>)
   10fdc:	f00b f89b 	bl	1c116 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10fe0:	0682      	lsls	r2, r0, #26
   10fe2:	d50a      	bpl.n	10ffa <bt_le_scan_start+0x82>
	return set_le_scan_enable_legacy(enable);
   10fe4:	4618      	mov	r0, r3
   10fe6:	f7fe fa01 	bl	f3ec <set_le_scan_enable_legacy>
		if (err) {
   10fea:	4604      	mov	r4, r0
   10fec:	b128      	cbz	r0, 10ffa <bt_le_scan_start+0x82>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10fee:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10ff2:	4811      	ldr	r0, [pc, #68]	; (11038 <bt_le_scan_start+0xc0>)
   10ff4:	f00b f8a3 	bl	1c13e <atomic_and>
		return err;
   10ff8:	e7cb      	b.n	10f92 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   10ffa:	686a      	ldr	r2, [r5, #4]
   10ffc:	2108      	movs	r1, #8
   10ffe:	480e      	ldr	r0, [pc, #56]	; (11038 <bt_le_scan_start+0xc0>)
   11000:	f002 0201 	and.w	r2, r2, #1
   11004:	f00b f8a6 	bl	1c154 <atomic_set_bit_to>
		if (param->timeout) {
   11008:	89ab      	ldrh	r3, [r5, #12]
   1100a:	b13b      	cbz	r3, 1101c <bt_le_scan_start+0xa4>
   1100c:	f06f 0140 	mvn.w	r1, #64	; 0x40
   11010:	4809      	ldr	r0, [pc, #36]	; (11038 <bt_le_scan_start+0xc0>)
   11012:	f00b f894 	bl	1c13e <atomic_and>
			return -ENOTSUP;
   11016:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1101a:	e7ba      	b.n	10f92 <bt_le_scan_start+0x1a>
		err = start_le_scan_legacy(param->type, param->interval,
   1101c:	896a      	ldrh	r2, [r5, #10]
   1101e:	8929      	ldrh	r1, [r5, #8]
   11020:	7828      	ldrb	r0, [r5, #0]
   11022:	f7fe fba7 	bl	f774 <start_le_scan_legacy>
	if (err) {
   11026:	4604      	mov	r4, r0
   11028:	2800      	cmp	r0, #0
   1102a:	d1e0      	bne.n	10fee <bt_le_scan_start+0x76>
	scan_dev_found_cb = cb;
   1102c:	4b03      	ldr	r3, [pc, #12]	; (1103c <bt_le_scan_start+0xc4>)
   1102e:	601e      	str	r6, [r3, #0]
	return 0;
   11030:	e7af      	b.n	10f92 <bt_le_scan_start+0x1a>
		return -EAGAIN;
   11032:	f06f 040a 	mvn.w	r4, #10
   11036:	e7ac      	b.n	10f92 <bt_le_scan_start+0x1a>
   11038:	20008094 	.word	0x20008094
   1103c:	2000ab84 	.word	0x2000ab84

00011040 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   11040:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   11042:	f06f 0140 	mvn.w	r1, #64	; 0x40
   11046:	4807      	ldr	r0, [pc, #28]	; (11064 <bt_le_scan_stop+0x24>)
   11048:	f00b f879 	bl	1c13e <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1104c:	0643      	lsls	r3, r0, #25
   1104e:	d506      	bpl.n	1105e <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   11050:	2000      	movs	r0, #0
   11052:	4b05      	ldr	r3, [pc, #20]	; (11068 <bt_le_scan_stop+0x28>)
   11054:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   11056:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   1105a:	f7fe bc75 	b.w	f948 <bt_le_scan_update>
}
   1105e:	f06f 0044 	mvn.w	r0, #68	; 0x44
   11062:	bd08      	pop	{r3, pc}
   11064:	20008094 	.word	0x20008094
   11068:	2000ab84 	.word	0x2000ab84

0001106c <bt_le_scan_cb_register>:
	parent->next = child;
   1106c:	2300      	movs	r3, #0
   1106e:	6083      	str	r3, [r0, #8]
	return list->tail;
   11070:	4b05      	ldr	r3, [pc, #20]	; (11088 <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   11072:	f100 0208 	add.w	r2, r0, #8
   11076:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   11078:	b911      	cbnz	r1, 11080 <bt_le_scan_cb_register+0x14>
	list->head = node;
   1107a:	e9c3 2200 	strd	r2, r2, [r3]
}
   1107e:	4770      	bx	lr
	parent->next = child;
   11080:	600a      	str	r2, [r1, #0]
	list->tail = node;
   11082:	605a      	str	r2, [r3, #4]
}
   11084:	4770      	bx	lr
   11086:	bf00      	nop
   11088:	2000ab7c 	.word	0x2000ab7c

0001108c <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   1108c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1108e:	b08d      	sub	sp, #52	; 0x34
   11090:	ae04      	add	r6, sp, #16
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   11092:	2700      	movs	r7, #0
   11094:	4635      	mov	r5, r6
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   11096:	2100      	movs	r1, #0
   11098:	f242 0018 	movw	r0, #8216	; 0x2018
   1109c:	aa02      	add	r2, sp, #8
   1109e:	f7fe f8f5 	bl	f28c <bt_hci_cmd_send_sync>
		if (ret) {
   110a2:	4604      	mov	r4, r0
   110a4:	bb58      	cbnz	r0, 110fe <prng_reseed.constprop.0+0x72>
			return ret;
		}

		rp = (void *)rsp->data;
   110a6:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
   110a8:	2208      	movs	r2, #8
   110aa:	6899      	ldr	r1, [r3, #8]
   110ac:	4630      	mov	r0, r6
   110ae:	3101      	adds	r1, #1
   110b0:	f00a ff44 	bl	1bf3c <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   110b4:	3701      	adds	r7, #1

		net_buf_unref(rsp);
   110b6:	9802      	ldr	r0, [sp, #8]
   110b8:	f004 fc86 	bl	159c8 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   110bc:	2f04      	cmp	r7, #4
   110be:	f106 0608 	add.w	r6, r6, #8
   110c2:	d1e8      	bne.n	11096 <prng_reseed.constprop.0+0xa>
	return z_impl_k_uptime_ticks();
   110c4:	f00d f987 	bl	1e3d6 <z_impl_k_uptime_ticks>
   110c8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   110cc:	fba0 3206 	umull	r3, r2, r0, r6
   110d0:	fb06 2101 	mla	r1, r6, r1, r2
   110d4:	0bdb      	lsrs	r3, r3, #15
   110d6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   110da:	0bc9      	lsrs	r1, r1, #15
	}

	extra = k_uptime_get();
   110dc:	e9cd 3102 	strd	r3, r1, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   110e0:	2308      	movs	r3, #8
   110e2:	2220      	movs	r2, #32
   110e4:	9300      	str	r3, [sp, #0]
   110e6:	4629      	mov	r1, r5
   110e8:	4806      	ldr	r0, [pc, #24]	; (11104 <prng_reseed.constprop.0+0x78>)
   110ea:	446b      	add	r3, sp
   110ec:	f00a fddc 	bl	1bca8 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   110f0:	b928      	cbnz	r0, 110fe <prng_reseed.constprop.0+0x72>
		BT_ERR("Failed to re-seed PRNG");
   110f2:	2145      	movs	r1, #69	; 0x45
   110f4:	4804      	ldr	r0, [pc, #16]	; (11108 <prng_reseed.constprop.0+0x7c>)
   110f6:	f009 fcdd 	bl	1aab4 <printk>
		return -EIO;
   110fa:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
   110fe:	4620      	mov	r0, r4
   11100:	b00d      	add	sp, #52	; 0x34
   11102:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11104:	20008bb0 	.word	0x20008bb0
   11108:	00021c16 	.word	0x00021c16

0001110c <prng_init>:

int prng_init(void)
{
   1110c:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1110e:	4b13      	ldr	r3, [pc, #76]	; (1115c <prng_init+0x50>)
   11110:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
   11114:	2b00      	cmp	r3, #0
   11116:	da1d      	bge.n	11154 <prng_init+0x48>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   11118:	2100      	movs	r1, #0
   1111a:	f242 0018 	movw	r0, #8216	; 0x2018
   1111e:	aa01      	add	r2, sp, #4
   11120:	f7fe f8b4 	bl	f28c <bt_hci_cmd_send_sync>
	if (ret) {
   11124:	b988      	cbnz	r0, 1114a <prng_init+0x3e>
		return ret;
	}

	rp = (void *)rsp->data;
   11126:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   11128:	2208      	movs	r2, #8
   1112a:	6899      	ldr	r1, [r3, #8]
   1112c:	480c      	ldr	r0, [pc, #48]	; (11160 <prng_init+0x54>)
   1112e:	3101      	adds	r1, #1
   11130:	f00a fd9a 	bl	1bc68 <tc_hmac_prng_init>
   11134:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   11136:	9801      	ldr	r0, [sp, #4]
   11138:	f004 fc46 	bl	159c8 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   1113c:	b93c      	cbnz	r4, 1114e <prng_init+0x42>
		BT_ERR("Failed to initialize PRNG");
   1113e:	4809      	ldr	r0, [pc, #36]	; (11164 <prng_init+0x58>)
   11140:	2145      	movs	r1, #69	; 0x45
   11142:	f009 fcb7 	bl	1aab4 <printk>
		return -EIO;
   11146:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1114a:	b002      	add	sp, #8
   1114c:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   1114e:	f7ff ff9d 	bl	1108c <prng_reseed.constprop.0>
   11152:	e7fa      	b.n	1114a <prng_init+0x3e>
		return -ENOTSUP;
   11154:	f06f 0022 	mvn.w	r0, #34	; 0x22
   11158:	e7f7      	b.n	1114a <prng_init+0x3e>
   1115a:	bf00      	nop
   1115c:	20008000 	.word	0x20008000
   11160:	20008bb0 	.word	0x20008bb0
   11164:	00021c32 	.word	0x00021c32

00011168 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   11168:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1116a:	4a0a      	ldr	r2, [pc, #40]	; (11194 <bt_rand+0x2c>)
{
   1116c:	4604      	mov	r4, r0
   1116e:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   11170:	f00a fdb3 	bl	1bcda <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   11174:	1c43      	adds	r3, r0, #1
   11176:	d107      	bne.n	11188 <bt_rand+0x20>
		ret = prng_reseed(&prng);
   11178:	f7ff ff88 	bl	1108c <prng_reseed.constprop.0>
		if (ret) {
   1117c:	b948      	cbnz	r0, 11192 <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   1117e:	4629      	mov	r1, r5
   11180:	4620      	mov	r0, r4
   11182:	4a04      	ldr	r2, [pc, #16]	; (11194 <bt_rand+0x2c>)
   11184:	f00a fda9 	bl	1bcda <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   11188:	2801      	cmp	r0, #1
   1118a:	bf14      	ite	ne
   1118c:	f06f 0004 	mvnne.w	r0, #4
   11190:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   11192:	bd38      	pop	{r3, r4, r5, pc}
   11194:	20008bb0 	.word	0x20008bb0

00011198 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   11198:	2300      	movs	r3, #0
{
   1119a:	4601      	mov	r1, r0
	tx->user_data = NULL;
   1119c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   111a0:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   111a2:	4801      	ldr	r0, [pc, #4]	; (111a8 <tx_free+0x10>)
   111a4:	f00d b843 	b.w	1e22e <k_queue_append>
   111a8:	20008688 	.word	0x20008688

000111ac <notify_connected>:
{
   111ac:	b538      	push	{r3, r4, r5, lr}
   111ae:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   111b0:	4b08      	ldr	r3, [pc, #32]	; (111d4 <notify_connected+0x28>)
   111b2:	681d      	ldr	r5, [r3, #0]
			cb->connected(conn, conn->err);
   111b4:	7a61      	ldrb	r1, [r4, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
   111b6:	b92d      	cbnz	r5, 111c4 <notify_connected+0x18>
	if (!conn->err) {
   111b8:	b951      	cbnz	r1, 111d0 <notify_connected+0x24>
		bt_gatt_connected(conn);
   111ba:	4620      	mov	r0, r4
}
   111bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   111c0:	f004 b8fc 	b.w	153bc <bt_gatt_connected>
		if (cb->connected) {
   111c4:	682b      	ldr	r3, [r5, #0]
   111c6:	b10b      	cbz	r3, 111cc <notify_connected+0x20>
			cb->connected(conn, conn->err);
   111c8:	4620      	mov	r0, r4
   111ca:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   111cc:	692d      	ldr	r5, [r5, #16]
   111ce:	e7f1      	b.n	111b4 <notify_connected+0x8>
}
   111d0:	bd38      	pop	{r3, r4, r5, pc}
   111d2:	bf00      	nop
   111d4:	2000ab88 	.word	0x2000ab88

000111d8 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   111d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   111dc:	4604      	mov	r4, r0
   111de:	460e      	mov	r6, r1
   111e0:	4691      	mov	r9, r2
   111e2:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   111e4:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   111e6:	f04f 33ff 	mov.w	r3, #4294967295
   111ea:	f04f 32ff 	mov.w	r2, #4294967295
   111ee:	4847      	ldr	r0, [pc, #284]	; (1130c <send_frag+0x134>)
   111f0:	f008 fac4 	bl	1977c <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   111f4:	7aa3      	ldrb	r3, [r4, #10]
   111f6:	2b07      	cmp	r3, #7
   111f8:	d14b      	bne.n	11292 <send_frag+0xba>
	__asm__ volatile(
   111fa:	f04f 0320 	mov.w	r3, #32
   111fe:	f3ef 8211 	mrs	r2, BASEPRI
   11202:	f383 8811 	msr	BASEPRI, r3
   11206:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   1120a:	69a3      	ldr	r3, [r4, #24]
   1120c:	2d00      	cmp	r5, #0
   1120e:	d052      	beq.n	112b6 <send_frag+0xde>
	parent->next = child;
   11210:	2100      	movs	r1, #0
   11212:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   11214:	2b00      	cmp	r3, #0
   11216:	d14b      	bne.n	112b0 <send_frag+0xd8>
	list->head = node;
   11218:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1121c:	f382 8811 	msr	BASEPRI, r2
   11220:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   11224:	2104      	movs	r1, #4
   11226:	f106 0008 	add.w	r0, r6, #8
   1122a:	f004 fc8b 	bl	15b44 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1122e:	8823      	ldrh	r3, [r4, #0]
   11230:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   11234:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   11238:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1123a:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1123e:	3b04      	subs	r3, #4
   11240:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   11242:	2302      	movs	r3, #2
	return bt_send(buf);
   11244:	4630      	mov	r0, r6
   11246:	7533      	strb	r3, [r6, #20]
   11248:	f7fe fd14 	bl	fc74 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   1124c:	4602      	mov	r2, r0
   1124e:	2800      	cmp	r0, #0
   11250:	d059      	beq.n	11306 <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   11252:	2145      	movs	r1, #69	; 0x45
   11254:	482e      	ldr	r0, [pc, #184]	; (11310 <send_frag+0x138>)
   11256:	f009 fc2d 	bl	1aab4 <printk>
	__asm__ volatile(
   1125a:	f04f 0320 	mov.w	r3, #32
   1125e:	f3ef 8911 	mrs	r9, BASEPRI
   11262:	f383 8811 	msr	BASEPRI, r3
   11266:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   1126a:	2d00      	cmp	r5, #0
   1126c:	d037      	beq.n	112de <send_frag+0x106>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1126e:	2200      	movs	r2, #0
	return list->head;
   11270:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11272:	b153      	cbz	r3, 1128a <send_frag+0xb2>
   11274:	429d      	cmp	r5, r3
   11276:	d12f      	bne.n	112d8 <send_frag+0x100>
	return node->next;
   11278:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   1127a:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   1127c:	bb3a      	cbnz	r2, 112ce <send_frag+0xf6>
   1127e:	42a9      	cmp	r1, r5
	list->head = node;
   11280:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   11282:	d100      	bne.n	11286 <send_frag+0xae>
	list->tail = node;
   11284:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   11286:	2300      	movs	r3, #0
   11288:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1128a:	f389 8811 	msr	BASEPRI, r9
   1128e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   11292:	481e      	ldr	r0, [pc, #120]	; (1130c <send_frag+0x134>)
   11294:	f008 fa36 	bl	19704 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   11298:	b115      	cbz	r5, 112a0 <send_frag+0xc8>
		tx_free(tx);
   1129a:	4628      	mov	r0, r5
   1129c:	f7ff ff7c 	bl	11198 <tx_free>
	}

	if (always_consume) {
   112a0:	b11f      	cbz	r7, 112aa <send_frag+0xd2>
		net_buf_unref(buf);
   112a2:	4630      	mov	r0, r6
   112a4:	f004 fb90 	bl	159c8 <net_buf_unref>
	}
	return false;
   112a8:	2700      	movs	r7, #0
}
   112aa:	4638      	mov	r0, r7
   112ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   112b0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   112b2:	61a5      	str	r5, [r4, #24]
}
   112b4:	e7b2      	b.n	1121c <send_frag+0x44>
		if (tail_tx) {
   112b6:	b133      	cbz	r3, 112c6 <send_frag+0xee>
			pending_no_cb = &tail_tx->pending_no_cb;
   112b8:	f103 080c 	add.w	r8, r3, #12
   112bc:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   112be:	3301      	adds	r3, #1
   112c0:	f8c8 3000 	str.w	r3, [r8]
   112c4:	e7aa      	b.n	1121c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   112c6:	69e3      	ldr	r3, [r4, #28]
   112c8:	f104 081c 	add.w	r8, r4, #28
   112cc:	e7f7      	b.n	112be <send_frag+0xe6>
Z_GENLIST_REMOVE(slist, snode)
   112ce:	42a9      	cmp	r1, r5
	parent->next = child;
   112d0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   112d2:	bf08      	it	eq
   112d4:	61a2      	streq	r2, [r4, #24]
}
   112d6:	e7d6      	b.n	11286 <send_frag+0xae>
	return node->next;
   112d8:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   112da:	681b      	ldr	r3, [r3, #0]
   112dc:	e7c9      	b.n	11272 <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   112de:	f8d8 3000 	ldr.w	r3, [r8]
   112e2:	b953      	cbnz	r3, 112fa <send_frag+0x122>
   112e4:	490b      	ldr	r1, [pc, #44]	; (11314 <send_frag+0x13c>)
   112e6:	480c      	ldr	r0, [pc, #48]	; (11318 <send_frag+0x140>)
   112e8:	f240 4292 	movw	r2, #1170	; 0x492
   112ec:	f009 fbe2 	bl	1aab4 <printk>
   112f0:	f240 4192 	movw	r1, #1170	; 0x492
   112f4:	4807      	ldr	r0, [pc, #28]	; (11314 <send_frag+0x13c>)
   112f6:	f009 fe83 	bl	1b000 <assert_post_action>
			(*pending_no_cb)--;
   112fa:	f8d8 3000 	ldr.w	r3, [r8]
   112fe:	3b01      	subs	r3, #1
   11300:	f8c8 3000 	str.w	r3, [r8]
   11304:	e7c1      	b.n	1128a <send_frag+0xb2>
	return true;
   11306:	2701      	movs	r7, #1
   11308:	e7cf      	b.n	112aa <send_frag+0xd2>
   1130a:	bf00      	nop
   1130c:	200080c8 	.word	0x200080c8
   11310:	000217bf 	.word	0x000217bf
   11314:	00021c5b 	.word	0x00021c5b
   11318:	0002003d 	.word	0x0002003d

0001131c <bt_conn_get_pkts>:
}
   1131c:	4800      	ldr	r0, [pc, #0]	; (11320 <bt_conn_get_pkts+0x4>)
   1131e:	4770      	bx	lr
   11320:	200080c8 	.word	0x200080c8

00011324 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   11324:	1d03      	adds	r3, r0, #4
{
   11326:	b570      	push	{r4, r5, r6, lr}
   11328:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1132a:	4618      	mov	r0, r3
   1132c:	f00b f80b 	bl	1c346 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   11330:	0582      	lsls	r2, r0, #22
   11332:	d515      	bpl.n	11360 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   11334:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   11338:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   1133c:	4291      	cmp	r1, r2
   1133e:	d80f      	bhi.n	11360 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   11340:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   11344:	4291      	cmp	r1, r2
   11346:	d30b      	bcc.n	11360 <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
   11348:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   1134c:	4291      	cmp	r1, r2
   1134e:	d107      	bne.n	11360 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11350:	e8d3 2fef 	ldaex	r2, [r3]
   11354:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   11358:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1135c:	2900      	cmp	r1, #0
   1135e:	d1f7      	bne.n	11350 <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
   11360:	4b07      	ldr	r3, [pc, #28]	; (11380 <notify_le_param_updated+0x5c>)
   11362:	681d      	ldr	r5, [r3, #0]
   11364:	b905      	cbnz	r5, 11368 <notify_le_param_updated+0x44>
}
   11366:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   11368:	68ee      	ldr	r6, [r5, #12]
   1136a:	b13e      	cbz	r6, 1137c <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
   1136c:	4620      	mov	r0, r4
   1136e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   11372:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   11376:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1137a:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1137c:	692d      	ldr	r5, [r5, #16]
   1137e:	e7f1      	b.n	11364 <notify_le_param_updated+0x40>
   11380:	2000ab88 	.word	0x2000ab88

00011384 <le_param_req>:
{
   11384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11386:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   11388:	4608      	mov	r0, r1
{
   1138a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1138c:	f00a ff39 	bl	1c202 <bt_le_conn_params_valid>
   11390:	4604      	mov	r4, r0
   11392:	b910      	cbnz	r0, 1139a <le_param_req+0x16>
		return false;
   11394:	2400      	movs	r4, #0
}
   11396:	4620      	mov	r0, r4
   11398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1139a:	4b09      	ldr	r3, [pc, #36]	; (113c0 <le_param_req+0x3c>)
   1139c:	681e      	ldr	r6, [r3, #0]
   1139e:	2e00      	cmp	r6, #0
   113a0:	d0f9      	beq.n	11396 <le_param_req+0x12>
		if (!cb->le_param_req) {
   113a2:	68b3      	ldr	r3, [r6, #8]
   113a4:	b90b      	cbnz	r3, 113aa <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   113a6:	6936      	ldr	r6, [r6, #16]
   113a8:	e7f9      	b.n	1139e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   113aa:	4629      	mov	r1, r5
   113ac:	4638      	mov	r0, r7
   113ae:	4798      	blx	r3
   113b0:	2800      	cmp	r0, #0
   113b2:	d0ef      	beq.n	11394 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   113b4:	4628      	mov	r0, r5
   113b6:	f00a ff24 	bl	1c202 <bt_le_conn_params_valid>
   113ba:	2800      	cmp	r0, #0
   113bc:	d1f3      	bne.n	113a6 <le_param_req+0x22>
   113be:	e7e9      	b.n	11394 <le_param_req+0x10>
   113c0:	2000ab88 	.word	0x2000ab88

000113c4 <bt_conn_cb_register>:
	cb->_next = callback_list;
   113c4:	4b02      	ldr	r3, [pc, #8]	; (113d0 <bt_conn_cb_register+0xc>)
   113c6:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   113c8:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   113ca:	6102      	str	r2, [r0, #16]
}
   113cc:	4770      	bx	lr
   113ce:	bf00      	nop
   113d0:	2000ab88 	.word	0x2000ab88

000113d4 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   113d4:	b570      	push	{r4, r5, r6, lr}
   113d6:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   113d8:	f100 0634 	add.w	r6, r0, #52	; 0x34
   113dc:	2200      	movs	r2, #0
   113de:	2300      	movs	r3, #0
   113e0:	4630      	mov	r0, r6
   113e2:	f004 fa6f 	bl	158c4 <net_buf_get>
   113e6:	4605      	mov	r5, r0
   113e8:	bb28      	cbnz	r0, 11436 <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   113ea:	6963      	ldr	r3, [r4, #20]
   113ec:	b153      	cbz	r3, 11404 <conn_cleanup+0x30>
   113ee:	4916      	ldr	r1, [pc, #88]	; (11448 <conn_cleanup+0x74>)
   113f0:	4816      	ldr	r0, [pc, #88]	; (1144c <conn_cleanup+0x78>)
   113f2:	f240 520c 	movw	r2, #1292	; 0x50c
   113f6:	f009 fb5d 	bl	1aab4 <printk>
   113fa:	f240 510c 	movw	r1, #1292	; 0x50c
   113fe:	4812      	ldr	r0, [pc, #72]	; (11448 <conn_cleanup+0x74>)
   11400:	f009 fdfe 	bl	1b000 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   11404:	69e3      	ldr	r3, [r4, #28]
   11406:	b153      	cbz	r3, 1141e <conn_cleanup+0x4a>
   11408:	490f      	ldr	r1, [pc, #60]	; (11448 <conn_cleanup+0x74>)
   1140a:	4810      	ldr	r0, [pc, #64]	; (1144c <conn_cleanup+0x78>)
   1140c:	f240 520d 	movw	r2, #1293	; 0x50d
   11410:	f009 fb50 	bl	1aab4 <printk>
   11414:	f240 510d 	movw	r1, #1293	; 0x50d
   11418:	480b      	ldr	r0, [pc, #44]	; (11448 <conn_cleanup+0x74>)
   1141a:	f009 fdf1 	bl	1b000 <assert_post_action>

	bt_conn_reset_rx_state(conn);
   1141e:	4620      	mov	r0, r4
   11420:	f00a ffde 	bl	1c3e0 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11424:	f104 0158 	add.w	r1, r4, #88	; 0x58
   11428:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   1142a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1142e:	2300      	movs	r3, #0
   11430:	4807      	ldr	r0, [pc, #28]	; (11450 <conn_cleanup+0x7c>)
   11432:	f008 bbc9 	b.w	19bc8 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   11436:	6968      	ldr	r0, [r5, #20]
   11438:	b108      	cbz	r0, 1143e <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
   1143a:	f7ff fead 	bl	11198 <tx_free>
		net_buf_unref(buf);
   1143e:	4628      	mov	r0, r5
   11440:	f004 fac2 	bl	159c8 <net_buf_unref>
   11444:	e7ca      	b.n	113dc <conn_cleanup+0x8>
   11446:	bf00      	nop
   11448:	00021c5b 	.word	0x00021c5b
   1144c:	0002003d 	.word	0x0002003d
   11450:	2000a540 	.word	0x2000a540

00011454 <bt_conn_recv>:
{
   11454:	b570      	push	{r4, r5, r6, lr}
   11456:	4616      	mov	r6, r2
   11458:	4604      	mov	r4, r0
   1145a:	460d      	mov	r5, r1
	tx_notify(conn);
   1145c:	f00a ff76 	bl	1c34c <tx_notify>
	switch (flags) {
   11460:	2e01      	cmp	r6, #1
   11462:	d01f      	beq.n	114a4 <bt_conn_recv+0x50>
   11464:	2e02      	cmp	r6, #2
   11466:	d140      	bne.n	114ea <bt_conn_recv+0x96>
		if (conn->rx) {
   11468:	6923      	ldr	r3, [r4, #16]
   1146a:	b133      	cbz	r3, 1147a <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   1146c:	4826      	ldr	r0, [pc, #152]	; (11508 <bt_conn_recv+0xb4>)
   1146e:	2145      	movs	r1, #69	; 0x45
   11470:	f009 fb20 	bl	1aab4 <printk>
			bt_conn_reset_rx_state(conn);
   11474:	4620      	mov	r0, r4
   11476:	f00a ffb3 	bl	1c3e0 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1147a:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1147c:	6921      	ldr	r1, [r4, #16]
   1147e:	898a      	ldrh	r2, [r1, #12]
   11480:	2a01      	cmp	r2, #1
   11482:	d93f      	bls.n	11504 <bt_conn_recv+0xb0>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   11484:	688b      	ldr	r3, [r1, #8]
   11486:	881b      	ldrh	r3, [r3, #0]
   11488:	3304      	adds	r3, #4
   1148a:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1148c:	429a      	cmp	r2, r3
   1148e:	d339      	bcc.n	11504 <bt_conn_recv+0xb0>
	if (conn->rx->len > acl_total_len) {
   11490:	d931      	bls.n	114f6 <bt_conn_recv+0xa2>
		BT_ERR("ACL len mismatch (%u > %u)",
   11492:	481e      	ldr	r0, [pc, #120]	; (1150c <bt_conn_recv+0xb8>)
   11494:	2145      	movs	r1, #69	; 0x45
   11496:	f009 fb0d 	bl	1aab4 <printk>
		bt_conn_reset_rx_state(conn);
   1149a:	4620      	mov	r0, r4
}
   1149c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   114a0:	f00a bf9e 	b.w	1c3e0 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   114a4:	6920      	ldr	r0, [r4, #16]
   114a6:	b938      	cbnz	r0, 114b8 <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   114a8:	2145      	movs	r1, #69	; 0x45
   114aa:	4819      	ldr	r0, [pc, #100]	; (11510 <bt_conn_recv+0xbc>)
			BT_ERR("Not enough buffer space for L2CAP data");
   114ac:	f009 fb02 	bl	1aab4 <printk>
			bt_conn_reset_rx_state(conn);
   114b0:	4620      	mov	r0, r4
   114b2:	f00a ff95 	bl	1c3e0 <bt_conn_reset_rx_state>
   114b6:	e001      	b.n	114bc <bt_conn_recv+0x68>
		if (!buf->len) {
   114b8:	89ae      	ldrh	r6, [r5, #12]
   114ba:	b926      	cbnz	r6, 114c6 <bt_conn_recv+0x72>
			net_buf_unref(buf);
   114bc:	4628      	mov	r0, r5
}
   114be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   114c2:	f004 ba81 	b.w	159c8 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   114c6:	3008      	adds	r0, #8
   114c8:	f00c f86e 	bl	1d5a8 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   114cc:	4286      	cmp	r6, r0
   114ce:	d902      	bls.n	114d6 <bt_conn_recv+0x82>
			BT_ERR("Not enough buffer space for L2CAP data");
   114d0:	2145      	movs	r1, #69	; 0x45
   114d2:	4810      	ldr	r0, [pc, #64]	; (11514 <bt_conn_recv+0xc0>)
   114d4:	e7ea      	b.n	114ac <bt_conn_recv+0x58>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   114d6:	6920      	ldr	r0, [r4, #16]
   114d8:	89aa      	ldrh	r2, [r5, #12]
   114da:	68a9      	ldr	r1, [r5, #8]
   114dc:	3008      	adds	r0, #8
   114de:	f00c f86b 	bl	1d5b8 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   114e2:	4628      	mov	r0, r5
   114e4:	f004 fa70 	bl	159c8 <net_buf_unref>
		break;
   114e8:	e7c8      	b.n	1147c <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   114ea:	4632      	mov	r2, r6
   114ec:	2145      	movs	r1, #69	; 0x45
   114ee:	480a      	ldr	r0, [pc, #40]	; (11518 <bt_conn_recv+0xc4>)
   114f0:	f009 fae0 	bl	1aab4 <printk>
		bt_conn_reset_rx_state(conn);
   114f4:	e7dc      	b.n	114b0 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   114f6:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf);
   114f8:	4620      	mov	r0, r4
	conn->rx = NULL;
   114fa:	6123      	str	r3, [r4, #16]
}
   114fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   11500:	f000 bed0 	b.w	122a4 <bt_l2cap_recv>
}
   11504:	bd70      	pop	{r4, r5, r6, pc}
   11506:	bf00      	nop
   11508:	00021c8b 	.word	0x00021c8b
   1150c:	00021d1f 	.word	0x00021d1f
   11510:	00021cad 	.word	0x00021cad
   11514:	00021cd0 	.word	0x00021cd0
   11518:	00021cfc 	.word	0x00021cfc

0001151c <bt_conn_send_cb>:
{
   1151c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11520:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   11522:	7a83      	ldrb	r3, [r0, #10]
{
   11524:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   11526:	2b07      	cmp	r3, #7
{
   11528:	460d      	mov	r5, r1
   1152a:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1152c:	d009      	beq.n	11542 <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
   1152e:	4821      	ldr	r0, [pc, #132]	; (115b4 <bt_conn_send_cb+0x98>)
   11530:	2145      	movs	r1, #69	; 0x45
   11532:	f009 fabf 	bl	1aab4 <printk>
		net_buf_unref(buf);
   11536:	4628      	mov	r0, r5
   11538:	f004 fa46 	bl	159c8 <net_buf_unref>
			return -ENOTCONN;
   1153c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   11540:	e01a      	b.n	11578 <bt_conn_send_cb+0x5c>
	if (cb) {
   11542:	2a00      	cmp	r2, #0
   11544:	d034      	beq.n	115b0 <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
   11546:	f008 f8d7 	bl	196f8 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1154a:	4b1b      	ldr	r3, [pc, #108]	; (115b8 <bt_conn_send_cb+0x9c>)
   1154c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1154e:	481b      	ldr	r0, [pc, #108]	; (115bc <bt_conn_send_cb+0xa0>)
   11550:	bf07      	ittee	eq
   11552:	2200      	moveq	r2, #0
   11554:	2300      	moveq	r3, #0
   11556:	f04f 32ff 	movne.w	r2, #4294967295
   1155a:	f04f 33ff 	movne.w	r3, #4294967295
   1155e:	f007 f865 	bl	1862c <z_impl_k_queue_get>
   11562:	4604      	mov	r4, r0
		if (!tx) {
   11564:	b950      	cbnz	r0, 1157c <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
   11566:	2145      	movs	r1, #69	; 0x45
   11568:	4815      	ldr	r0, [pc, #84]	; (115c0 <bt_conn_send_cb+0xa4>)
   1156a:	f009 faa3 	bl	1aab4 <printk>
			net_buf_unref(buf);
   1156e:	4628      	mov	r0, r5
   11570:	f004 fa2a 	bl	159c8 <net_buf_unref>
			return -ENOBUFS;
   11574:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   11578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   1157c:	7ab3      	ldrb	r3, [r6, #10]
   1157e:	2b07      	cmp	r3, #7
   11580:	d00a      	beq.n	11598 <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
   11582:	2157      	movs	r1, #87	; 0x57
   11584:	480f      	ldr	r0, [pc, #60]	; (115c4 <bt_conn_send_cb+0xa8>)
   11586:	f009 fa95 	bl	1aab4 <printk>
			net_buf_unref(buf);
   1158a:	4628      	mov	r0, r5
   1158c:	f004 fa1c 	bl	159c8 <net_buf_unref>
			tx_free(tx);
   11590:	4620      	mov	r0, r4
   11592:	f7ff fe01 	bl	11198 <tx_free>
   11596:	e7d1      	b.n	1153c <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
   11598:	2300      	movs	r3, #0
		tx->user_data = user_data;
   1159a:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1159e:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   115a0:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   115a2:	f106 0034 	add.w	r0, r6, #52	; 0x34
   115a6:	4629      	mov	r1, r5
   115a8:	f004 f9e0 	bl	1596c <net_buf_put>
	return 0;
   115ac:	2000      	movs	r0, #0
   115ae:	e7e3      	b.n	11578 <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
   115b0:	614a      	str	r2, [r1, #20]
   115b2:	e7f6      	b.n	115a2 <bt_conn_send_cb+0x86>
   115b4:	00021d3f 	.word	0x00021d3f
   115b8:	2000a560 	.word	0x2000a560
   115bc:	20008688 	.word	0x20008688
   115c0:	00021d53 	.word	0x00021d53
   115c4:	00021d76 	.word	0x00021d76

000115c8 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   115c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   115cc:	2500      	movs	r5, #0
   115ce:	4b1c      	ldr	r3, [pc, #112]	; (11640 <bt_conn_prepare_events+0x78>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   115d0:	462a      	mov	r2, r5
   115d2:	2101      	movs	r1, #1
{
   115d4:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   115d6:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   115d8:	2601      	movs	r6, #1
   115da:	f009 f819 	bl	1a610 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   115de:	f04f 0914 	mov.w	r9, #20
   115e2:	4c18      	ldr	r4, [pc, #96]	; (11644 <bt_conn_prepare_events+0x7c>)
	if (!atomic_get(&conn->ref)) {
   115e4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
   115e8:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   115ec:	f00a feab 	bl	1c346 <atomic_get>
   115f0:	b178      	cbz	r0, 11612 <bt_conn_prepare_events+0x4a>
	if (conn->state == BT_CONN_DISCONNECTED &&
   115f2:	7aa3      	ldrb	r3, [r4, #10]
   115f4:	b9ab      	cbnz	r3, 11622 <bt_conn_prepare_events+0x5a>
   115f6:	1d23      	adds	r3, r4, #4
   115f8:	e8d3 2fef 	ldaex	r2, [r3]
   115fc:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   11600:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11604:	2800      	cmp	r0, #0
   11606:	d1f7      	bne.n	115f8 <bt_conn_prepare_events+0x30>
   11608:	0653      	lsls	r3, r2, #25
   1160a:	d50a      	bpl.n	11622 <bt_conn_prepare_events+0x5a>
		conn_cleanup(conn);
   1160c:	4620      	mov	r0, r4
   1160e:	f7ff fee1 	bl	113d4 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11612:	3501      	adds	r5, #1
   11614:	2d0a      	cmp	r5, #10
   11616:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   1161a:	d1e3      	bne.n	115e4 <bt_conn_prepare_events+0x1c>
		}
	}
#endif

	return ev_count;
}
   1161c:	4630      	mov	r0, r6
   1161e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   11622:	7aa3      	ldrb	r3, [r4, #10]
   11624:	2b07      	cmp	r3, #7
   11626:	d1f4      	bne.n	11612 <bt_conn_prepare_events+0x4a>
	k_poll_event_init(&events[0],
   11628:	f104 0334 	add.w	r3, r4, #52	; 0x34
   1162c:	2200      	movs	r2, #0
   1162e:	2104      	movs	r1, #4
   11630:	4640      	mov	r0, r8
   11632:	f008 ffed 	bl	1a610 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   11636:	2301      	movs	r3, #1
   11638:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   1163c:	441e      	add	r6, r3
   1163e:	e7e8      	b.n	11612 <bt_conn_prepare_events+0x4a>
   11640:	2000841c 	.word	0x2000841c
   11644:	20008ce8 	.word	0x20008ce8

00011648 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   11648:	b570      	push	{r4, r5, r6, lr}
   1164a:	4606      	mov	r6, r0
   1164c:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1164e:	4810      	ldr	r0, [pc, #64]	; (11690 <bt_conn_add_le+0x48>)
   11650:	210a      	movs	r1, #10
   11652:	f00a fea1 	bl	1c398 <bt_conn_new>
	if (!conn) {
   11656:	4604      	mov	r4, r0
   11658:	b1b8      	cbz	r0, 1168a <bt_conn_add_le+0x42>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1165a:	2230      	movs	r2, #48	; 0x30
   1165c:	2100      	movs	r1, #0
   1165e:	3058      	adds	r0, #88	; 0x58
   11660:	f00a fc97 	bl	1bf92 <memset>
   11664:	4b0b      	ldr	r3, [pc, #44]	; (11694 <bt_conn_add_le+0x4c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   11666:	4a0c      	ldr	r2, [pc, #48]	; (11698 <bt_conn_add_le+0x50>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11668:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1166a:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   1166c:	4629      	mov	r1, r5
   1166e:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   11672:	62a3      	str	r3, [r4, #40]	; 0x28
   11674:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   11676:	7226      	strb	r6, [r4, #8]
   11678:	f104 0088 	add.w	r0, r4, #136	; 0x88
   1167c:	f00a fc5e 	bl	1bf3c <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   11680:	2301      	movs	r3, #1
   11682:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   11684:	4b05      	ldr	r3, [pc, #20]	; (1169c <bt_conn_add_le+0x54>)
   11686:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1168a:	4620      	mov	r0, r4
   1168c:	bd70      	pop	{r4, r5, r6, pc}
   1168e:	bf00      	nop
   11690:	20008ce8 	.word	0x20008ce8
   11694:	00011d01 	.word	0x00011d01
   11698:	0001c393 	.word	0x0001c393
   1169c:	00280018 	.word	0x00280018

000116a0 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   116a0:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   116a2:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   116a6:	e8d4 3fef 	ldaex	r3, [r4]
   116aa:	1e5a      	subs	r2, r3, #1
   116ac:	e8c4 2fe1 	stlex	r1, r2, [r4]
   116b0:	2900      	cmp	r1, #0
   116b2:	d1f8      	bne.n	116a6 <bt_conn_unref+0x6>

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   116b4:	2b00      	cmp	r3, #0
   116b6:	dc0a      	bgt.n	116ce <bt_conn_unref+0x2e>
   116b8:	4909      	ldr	r1, [pc, #36]	; (116e0 <bt_conn_unref+0x40>)
   116ba:	480a      	ldr	r0, [pc, #40]	; (116e4 <bt_conn_unref+0x44>)
   116bc:	f240 7265 	movw	r2, #1893	; 0x765
   116c0:	f009 f9f8 	bl	1aab4 <printk>
   116c4:	f240 7165 	movw	r1, #1893	; 0x765
   116c8:	4805      	ldr	r0, [pc, #20]	; (116e0 <bt_conn_unref+0x40>)
   116ca:	f009 fc99 	bl	1b000 <assert_post_action>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
   116ce:	4620      	mov	r0, r4
   116d0:	f00a fe39 	bl	1c346 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   116d4:	b918      	cbnz	r0, 116de <bt_conn_unref+0x3e>
		bt_le_adv_resume();
	}
}
   116d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   116da:	f7ff bb19 	b.w	10d10 <bt_le_adv_resume>
}
   116de:	bd10      	pop	{r4, pc}
   116e0:	00021c5b 	.word	0x00021c5b
   116e4:	0002003d 	.word	0x0002003d

000116e8 <bt_conn_lookup_handle>:
{
   116e8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   116ea:	210a      	movs	r1, #10
   116ec:	4801      	ldr	r0, [pc, #4]	; (116f4 <bt_conn_lookup_handle+0xc>)
   116ee:	f00a beb7 	b.w	1c460 <conn_lookup_handle>
   116f2:	bf00      	nop
   116f4:	20008ce8 	.word	0x20008ce8

000116f8 <bt_conn_set_state>:
{
   116f8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   116fa:	7a85      	ldrb	r5, [r0, #10]
{
   116fc:	4604      	mov	r4, r0
	if (conn->state == state) {
   116fe:	428d      	cmp	r5, r1
{
   11700:	460e      	mov	r6, r1
	if (conn->state == state) {
   11702:	d10b      	bne.n	1171c <bt_conn_set_state+0x24>
		BT_WARN("no transition %s", state2str(state));
   11704:	2157      	movs	r1, #87	; 0x57
   11706:	2d08      	cmp	r5, #8
   11708:	bf96      	itet	ls
   1170a:	4b6d      	ldrls	r3, [pc, #436]	; (118c0 <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
   1170c:	4a6d      	ldrhi	r2, [pc, #436]	; (118c4 <bt_conn_set_state+0x1cc>)
   1170e:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   11712:	486d      	ldr	r0, [pc, #436]	; (118c8 <bt_conn_set_state+0x1d0>)
}
   11714:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   11718:	f009 b9cc 	b.w	1aab4 <printk>
	conn->state = state;
   1171c:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1171e:	b165      	cbz	r5, 1173a <bt_conn_set_state+0x42>
   11720:	2d06      	cmp	r5, #6
   11722:	d00d      	beq.n	11740 <bt_conn_set_state+0x48>
	switch (conn->state) {
   11724:	7aa3      	ldrb	r3, [r4, #10]
   11726:	2b08      	cmp	r3, #8
   11728:	f200 80c5 	bhi.w	118b6 <bt_conn_set_state+0x1be>
   1172c:	e8df f003 	tbb	[pc, r3]
   11730:	c7c70f4a 	.word	0xc7c70f4a
   11734:	278ec7c7 	.word	0x278ec7c7
   11738:	c7          	.byte	0xc7
   11739:	00          	.byte	0x00
		bt_conn_ref(conn);
   1173a:	f00a fe7a 	bl	1c432 <bt_conn_ref>
		break;
   1173e:	e7f1      	b.n	11724 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11740:	7883      	ldrb	r3, [r0, #2]
   11742:	2b01      	cmp	r3, #1
   11744:	d1ee      	bne.n	11724 <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->deferred_work);
   11746:	3058      	adds	r0, #88	; 0x58
   11748:	f008 faae 	bl	19ca8 <k_delayed_work_cancel>
   1174c:	e7ea      	b.n	11724 <bt_conn_set_state+0x2c>
		tx->pending_no_cb = 0U;
   1174e:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   11750:	4d5e      	ldr	r5, [pc, #376]	; (118cc <bt_conn_set_state+0x1d4>)
	__asm__ volatile(
   11752:	f04f 0320 	mov.w	r3, #32
   11756:	f3ef 8211 	mrs	r2, BASEPRI
   1175a:	f383 8811 	msr	BASEPRI, r3
   1175e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   11762:	69e3      	ldr	r3, [r4, #28]
   11764:	2b00      	cmp	r3, #0
   11766:	f000 8087 	beq.w	11878 <bt_conn_set_state+0x180>
			conn->pending_no_cb--;
   1176a:	3b01      	subs	r3, #1
   1176c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1176e:	f382 8811 	msr	BASEPRI, r2
   11772:	f3bf 8f6f 	isb	sy
   11776:	4628      	mov	r0, r5
   11778:	f007 ffc4 	bl	19704 <z_impl_k_sem_give>
}
   1177c:	e7e9      	b.n	11752 <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1177e:	78a3      	ldrb	r3, [r4, #2]
   11780:	2b04      	cmp	r3, #4
   11782:	f000 809c 	beq.w	118be <bt_conn_set_state+0x1c6>
	z_impl_k_queue_init(queue);
   11786:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1178a:	f00c fd43 	bl	1e214 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
   1178e:	2100      	movs	r1, #0
   11790:	484f      	ldr	r0, [pc, #316]	; (118d0 <bt_conn_set_state+0x1d8>)
   11792:	f009 f849 	bl	1a828 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   11796:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
   11798:	4620      	mov	r0, r4
	list->tail = NULL;
   1179a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   1179e:	f000 fc8f 	bl	120c0 <bt_l2cap_connected>
		notify_connected(conn);
   117a2:	4620      	mov	r0, r4
   117a4:	f7ff fd02 	bl	111ac <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   117a8:	78e3      	ldrb	r3, [r4, #3]
   117aa:	2b01      	cmp	r3, #1
   117ac:	f040 8087 	bne.w	118be <bt_conn_set_state+0x1c6>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   117b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   117b4:	2300      	movs	r3, #0
   117b6:	f104 0158 	add.w	r1, r4, #88	; 0x58
   117ba:	4846      	ldr	r0, [pc, #280]	; (118d4 <bt_conn_set_state+0x1dc>)
}
   117bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   117c0:	f008 ba02 	b.w	19bc8 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   117c4:	78a3      	ldrb	r3, [r4, #2]
   117c6:	2b04      	cmp	r3, #4
   117c8:	d104      	bne.n	117d4 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   117ca:	4620      	mov	r0, r4
}
   117cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   117d0:	f7ff bf66 	b.w	116a0 <bt_conn_unref>
		switch (old_state) {
   117d4:	2d08      	cmp	r5, #8
   117d6:	d872      	bhi.n	118be <bt_conn_set_state+0x1c6>
   117d8:	a301      	add	r3, pc, #4	; (adr r3, 117e0 <bt_conn_set_state+0xe8>)
   117da:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   117de:	bf00      	nop
   117e0:	00011845 	.word	0x00011845
   117e4:	00011805 	.word	0x00011805
   117e8:	00011837 	.word	0x00011837
   117ec:	000117cb 	.word	0x000117cb
   117f0:	000117cb 	.word	0x000117cb
   117f4:	00011837 	.word	0x00011837
   117f8:	00011837 	.word	0x00011837
   117fc:	00011845 	.word	0x00011845
   11800:	00011845 	.word	0x00011845
			tx_notify(conn);
   11804:	4620      	mov	r0, r4
   11806:	f00a fda1 	bl	1c34c <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   1180a:	78a3      	ldrb	r3, [r4, #2]
   1180c:	2b01      	cmp	r3, #1
   1180e:	d103      	bne.n	11818 <bt_conn_set_state+0x120>
				k_delayed_work_cancel(&conn->deferred_work);
   11810:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11814:	f008 fa48 	bl	19ca8 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11818:	3404      	adds	r4, #4
   1181a:	e8d4 3fef 	ldaex	r3, [r4]
   1181e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11822:	e8c4 3fe2 	stlex	r2, r3, [r4]
   11826:	2a00      	cmp	r2, #0
   11828:	d1f7      	bne.n	1181a <bt_conn_set_state+0x122>
}
   1182a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1182e:	2100      	movs	r1, #0
   11830:	4827      	ldr	r0, [pc, #156]	; (118d0 <bt_conn_set_state+0x1d8>)
   11832:	f008 bff9 	b.w	1a828 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   11836:	7a63      	ldrb	r3, [r4, #9]
   11838:	2b00      	cmp	r3, #0
   1183a:	d0c6      	beq.n	117ca <bt_conn_set_state+0xd2>
				notify_connected(conn);
   1183c:	4620      	mov	r0, r4
   1183e:	f7ff fcb5 	bl	111ac <notify_connected>
   11842:	e7c2      	b.n	117ca <bt_conn_set_state+0xd2>
			BT_WARN("Invalid (%u) old state", state);
   11844:	4632      	mov	r2, r6
   11846:	2157      	movs	r1, #87	; 0x57
   11848:	4823      	ldr	r0, [pc, #140]	; (118d8 <bt_conn_set_state+0x1e0>)
   1184a:	e763      	b.n	11714 <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1184c:	78a3      	ldrb	r3, [r4, #2]
   1184e:	2b01      	cmp	r3, #1
   11850:	d135      	bne.n	118be <bt_conn_set_state+0x1c6>
				K_MSEC(10 * bt_dev.create_param.timeout));
   11852:	4b22      	ldr	r3, [pc, #136]	; (118dc <bt_conn_set_state+0x1e4>)
   11854:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   11858:	8a9d      	ldrh	r5, [r3, #20]
   1185a:	230a      	movs	r3, #10
   1185c:	f240 30e7 	movw	r0, #999	; 0x3e7
   11860:	2100      	movs	r1, #0
   11862:	435d      	muls	r5, r3
   11864:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11868:	2300      	movs	r3, #0
   1186a:	fbc5 0106 	smlal	r0, r1, r5, r6
   1186e:	f7f7 f95d 	bl	8b2c <__aeabi_uldivmod>
   11872:	4602      	mov	r2, r0
   11874:	460b      	mov	r3, r1
   11876:	e79e      	b.n	117b6 <bt_conn_set_state+0xbe>
	return list->head;
   11878:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1187a:	b128      	cbz	r0, 11888 <bt_conn_set_state+0x190>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1187c:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   1187e:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11880:	4288      	cmp	r0, r1
	list->head = node;
   11882:	6163      	str	r3, [r4, #20]
	list->tail = node;
   11884:	bf08      	it	eq
   11886:	61a3      	streq	r3, [r4, #24]
   11888:	f382 8811 	msr	BASEPRI, r2
   1188c:	f3bf 8f6f 	isb	sy
		if (!node) {
   11890:	b1a8      	cbz	r0, 118be <bt_conn_set_state+0x1c6>
	__asm__ volatile(
   11892:	f04f 0220 	mov.w	r2, #32
   11896:	f3ef 8311 	mrs	r3, BASEPRI
   1189a:	f382 8811 	msr	BASEPRI, r2
   1189e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   118a2:	68c2      	ldr	r2, [r0, #12]
   118a4:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   118a6:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   118a8:	f383 8811 	msr	BASEPRI, r3
   118ac:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   118b0:	f7ff fc72 	bl	11198 <tx_free>
   118b4:	e75f      	b.n	11776 <bt_conn_set_state+0x7e>
		BT_WARN("no valid (%u) state was set", state);
   118b6:	4632      	mov	r2, r6
   118b8:	2157      	movs	r1, #87	; 0x57
   118ba:	4809      	ldr	r0, [pc, #36]	; (118e0 <bt_conn_set_state+0x1e8>)
   118bc:	e72a      	b.n	11714 <bt_conn_set_state+0x1c>
}
   118be:	bd70      	pop	{r4, r5, r6, pc}
   118c0:	0001eec8 	.word	0x0001eec8
   118c4:	00021da1 	.word	0x00021da1
   118c8:	00021dab 	.word	0x00021dab
   118cc:	200080c8 	.word	0x200080c8
   118d0:	2000841c 	.word	0x2000841c
   118d4:	2000a540 	.word	0x2000a540
   118d8:	00021dc1 	.word	0x00021dc1
   118dc:	20008000 	.word	0x20008000
   118e0:	00021ddd 	.word	0x00021ddd

000118e4 <bt_conn_lookup_addr_le>:
{
   118e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118e8:	4607      	mov	r7, r0
   118ea:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   118ec:	2500      	movs	r5, #0
   118ee:	4e0e      	ldr	r6, [pc, #56]	; (11928 <bt_conn_lookup_addr_le+0x44>)
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   118f0:	4630      	mov	r0, r6
   118f2:	f00a fd9e 	bl	1c432 <bt_conn_ref>
		if (!conn) {
   118f6:	4604      	mov	r4, r0
   118f8:	b120      	cbz	r0, 11904 <bt_conn_lookup_addr_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   118fa:	7883      	ldrb	r3, [r0, #2]
   118fc:	2b01      	cmp	r3, #1
   118fe:	d00a      	beq.n	11916 <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
   11900:	f7ff fece 	bl	116a0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11904:	3501      	adds	r5, #1
   11906:	2d0a      	cmp	r5, #10
   11908:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   1190c:	d1f0      	bne.n	118f0 <bt_conn_lookup_addr_le+0xc>
	return NULL;
   1190e:	2400      	movs	r4, #0
}
   11910:	4620      	mov	r0, r4
   11912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   11916:	4642      	mov	r2, r8
   11918:	4639      	mov	r1, r7
   1191a:	f00a fd6a 	bl	1c3f2 <bt_conn_is_peer_addr_le>
   1191e:	2800      	cmp	r0, #0
   11920:	d1f6      	bne.n	11910 <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   11922:	4620      	mov	r0, r4
   11924:	e7ec      	b.n	11900 <bt_conn_lookup_addr_le+0x1c>
   11926:	bf00      	nop
   11928:	20008ce8 	.word	0x20008ce8

0001192c <bt_conn_exists_le>:
{
   1192c:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1192e:	f7ff ffd9 	bl	118e4 <bt_conn_lookup_addr_le>
	if (conn) {
   11932:	4604      	mov	r4, r0
   11934:	b170      	cbz	r0, 11954 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   11936:	7a83      	ldrb	r3, [r0, #10]
   11938:	2157      	movs	r1, #87	; 0x57
   1193a:	2b08      	cmp	r3, #8
   1193c:	bf96      	itet	ls
   1193e:	4a06      	ldrls	r2, [pc, #24]	; (11958 <bt_conn_exists_le+0x2c>)
   11940:	4a06      	ldrhi	r2, [pc, #24]	; (1195c <bt_conn_exists_le+0x30>)
   11942:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   11946:	4806      	ldr	r0, [pc, #24]	; (11960 <bt_conn_exists_le+0x34>)
   11948:	f009 f8b4 	bl	1aab4 <printk>
		bt_conn_unref(conn);
   1194c:	4620      	mov	r0, r4
   1194e:	f7ff fea7 	bl	116a0 <bt_conn_unref>
		return true;
   11952:	2001      	movs	r0, #1
}
   11954:	bd10      	pop	{r4, pc}
   11956:	bf00      	nop
   11958:	0001eec8 	.word	0x0001eec8
   1195c:	00021da1 	.word	0x00021da1
   11960:	00021dfe 	.word	0x00021dfe

00011964 <bt_conn_lookup_state_le>:
{
   11964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11968:	4606      	mov	r6, r0
   1196a:	460f      	mov	r7, r1
   1196c:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1196e:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11970:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   11974:	f8df a048 	ldr.w	sl, [pc, #72]	; 119c0 <bt_conn_lookup_state_le+0x5c>
   11978:	fb09 a005 	mla	r0, r9, r5, sl
   1197c:	f00a fd59 	bl	1c432 <bt_conn_ref>
		if (!conn) {
   11980:	4604      	mov	r4, r0
   11982:	b120      	cbz	r0, 1198e <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
   11984:	7883      	ldrb	r3, [r0, #2]
   11986:	2b01      	cmp	r3, #1
   11988:	d006      	beq.n	11998 <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
   1198a:	f00a fd52 	bl	1c432 <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1198e:	3501      	adds	r5, #1
   11990:	2d0a      	cmp	r5, #10
   11992:	d1f1      	bne.n	11978 <bt_conn_lookup_state_le+0x14>
	return NULL;
   11994:	2400      	movs	r4, #0
   11996:	e00f      	b.n	119b8 <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   11998:	b147      	cbz	r7, 119ac <bt_conn_lookup_state_le+0x48>
   1199a:	463a      	mov	r2, r7
   1199c:	4631      	mov	r1, r6
   1199e:	f00a fd28 	bl	1c3f2 <bt_conn_is_peer_addr_le>
   119a2:	b918      	cbnz	r0, 119ac <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
   119a4:	4620      	mov	r0, r4
   119a6:	f7ff fe7b 	bl	116a0 <bt_conn_unref>
			continue;
   119aa:	e7f0      	b.n	1198e <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
   119ac:	7aa3      	ldrb	r3, [r4, #10]
   119ae:	4543      	cmp	r3, r8
   119b0:	d1f8      	bne.n	119a4 <bt_conn_lookup_state_le+0x40>
   119b2:	7a23      	ldrb	r3, [r4, #8]
   119b4:	42b3      	cmp	r3, r6
   119b6:	d1f5      	bne.n	119a4 <bt_conn_lookup_state_le+0x40>
}
   119b8:	4620      	mov	r0, r4
   119ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   119be:	bf00      	nop
   119c0:	20008ce8 	.word	0x20008ce8

000119c4 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   119c4:	b510      	push	{r4, lr}
	info->type = conn->type;
   119c6:	7882      	ldrb	r2, [r0, #2]
   119c8:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   119ca:	78c4      	ldrb	r4, [r0, #3]
	info->id = conn->id;

	switch (conn->type) {
   119cc:	2a01      	cmp	r2, #1
	info->role = conn->role;
   119ce:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   119d0:	7a03      	ldrb	r3, [r0, #8]
   119d2:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
   119d4:	d11c      	bne.n	11a10 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   119d6:	f100 0288 	add.w	r2, r0, #136	; 0x88
   119da:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   119dc:	4a0e      	ldr	r2, [pc, #56]	; (11a18 <bt_conn_get_info+0x54>)
   119de:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   119e2:	4413      	add	r3, r2
   119e4:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   119e6:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   119ea:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_MASTER) {
   119ee:	b964      	cbnz	r4, 11a0a <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
   119f0:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   119f4:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   119f8:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   119fa:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   119fe:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   11a00:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   11a04:	2000      	movs	r0, #0
		info->le.timeout = conn->le.timeout;
   11a06:	830b      	strh	r3, [r1, #24]
		return 0;
#endif
	}

	return -EINVAL;
}
   11a08:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   11a0a:	e9c1 2303 	strd	r2, r3, [r1, #12]
   11a0e:	e7f1      	b.n	119f4 <bt_conn_get_info+0x30>
	return -EINVAL;
   11a10:	f06f 0015 	mvn.w	r0, #21
   11a14:	e7f8      	b.n	11a08 <bt_conn_get_info+0x44>
   11a16:	bf00      	nop
   11a18:	20008000 	.word	0x20008000

00011a1c <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   11a1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11a20:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11a22:	4844      	ldr	r0, [pc, #272]	; (11b34 <bt_conn_le_create+0x118>)
   11a24:	f00a fc8f 	bl	1c346 <atomic_get>
   11a28:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11a2a:	0781      	lsls	r1, r0, #30
{
   11a2c:	4615      	mov	r5, r2
   11a2e:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11a30:	d576      	bpl.n	11b20 <bt_conn_le_create+0x104>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   11a32:	4610      	mov	r0, r2
   11a34:	f00a fbe5 	bl	1c202 <bt_le_conn_params_valid>
   11a38:	b928      	cbnz	r0, 11a46 <bt_conn_le_create+0x2a>
		return -EINVAL;
   11a3a:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   11a3e:	4628      	mov	r0, r5
   11a40:	b002      	add	sp, #8
   11a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11a46:	483b      	ldr	r0, [pc, #236]	; (11b34 <bt_conn_le_create+0x118>)
   11a48:	f00a fc7d 	bl	1c346 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   11a4c:	0642      	lsls	r2, r0, #25
   11a4e:	d4f4      	bmi.n	11a3a <bt_conn_le_create+0x1e>
   11a50:	4838      	ldr	r0, [pc, #224]	; (11b34 <bt_conn_le_create+0x118>)
   11a52:	f00a fc78 	bl	1c346 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   11a56:	0503      	lsls	r3, r0, #20
   11a58:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   11a5c:	d463      	bmi.n	11b26 <bt_conn_le_create+0x10a>
	if (!bt_le_scan_random_addr_check()) {
   11a5e:	f7fd fee7 	bl	f830 <bt_le_scan_random_addr_check>
   11a62:	2800      	cmp	r0, #0
   11a64:	d0e9      	beq.n	11a3a <bt_conn_le_create+0x1e>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   11a66:	4621      	mov	r1, r4
   11a68:	4640      	mov	r0, r8
   11a6a:	f7ff ff5f 	bl	1192c <bt_conn_exists_le>
   11a6e:	2800      	cmp	r0, #0
   11a70:	d1e3      	bne.n	11a3a <bt_conn_le_create+0x1e>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   11a72:	7823      	ldrb	r3, [r4, #0]
   11a74:	3b02      	subs	r3, #2
   11a76:	2b01      	cmp	r3, #1
   11a78:	d847      	bhi.n	11b0a <bt_conn_le_create+0xee>
   11a7a:	2207      	movs	r2, #7
   11a7c:	4621      	mov	r1, r4
   11a7e:	4668      	mov	r0, sp
   11a80:	f00a fa5c 	bl	1bf3c <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   11a84:	f89d 3000 	ldrb.w	r3, [sp]
   11a88:	3b02      	subs	r3, #2
   11a8a:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   11a8e:	4669      	mov	r1, sp
   11a90:	2000      	movs	r0, #0
   11a92:	f7ff fdd9 	bl	11648 <bt_conn_add_le>
	if (!conn) {
   11a96:	4604      	mov	r4, r0
   11a98:	2800      	cmp	r0, #0
   11a9a:	d047      	beq.n	11b2c <bt_conn_le_create+0x110>
	conn->le.interval_min = param->interval_min;
   11a9c:	882b      	ldrh	r3, [r5, #0]
   11a9e:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   11aa2:	886b      	ldrh	r3, [r5, #2]
   11aa4:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   11aa8:	88ab      	ldrh	r3, [r5, #4]
   11aaa:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   11aae:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
   11ab0:	4d21      	ldr	r5, [pc, #132]	; (11b38 <bt_conn_le_create+0x11c>)
	conn->le.timeout = param->timeout;
   11ab2:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   11ab6:	f105 0c08 	add.w	ip, r5, #8
   11aba:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   11abe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   11ac2:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   11ac4:	2b00      	cmp	r3, #0
   11ac6:	bf08      	it	eq
   11ac8:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   11acc:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   11ace:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   11ad0:	b903      	cbnz	r3, 11ad4 <bt_conn_le_create+0xb8>
   11ad2:	89ab      	ldrh	r3, [r5, #12]
   11ad4:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   11ad6:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   11ad8:	b903      	cbnz	r3, 11adc <bt_conn_le_create+0xc0>
   11ada:	89eb      	ldrh	r3, [r5, #14]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   11adc:	2106      	movs	r1, #6
   11ade:	4620      	mov	r0, r4
	bt_dev.create_param.window_coded =
   11ae0:	826b      	strh	r3, [r5, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   11ae2:	f7ff fe09 	bl	116f8 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   11ae6:	4620      	mov	r0, r4
   11ae8:	f00a fb6e 	bl	1c1c8 <bt_le_create_conn>
	if (err) {
   11aec:	4605      	mov	r5, r0
   11aee:	b1a8      	cbz	r0, 11b1c <bt_conn_le_create+0x100>
		conn->err = 0;
   11af0:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11af2:	4620      	mov	r0, r4
   11af4:	4631      	mov	r1, r6
		conn->err = 0;
   11af6:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11af8:	f7ff fdfe 	bl	116f8 <bt_conn_set_state>
		bt_conn_unref(conn);
   11afc:	4620      	mov	r0, r4
   11afe:	f7ff fdcf 	bl	116a0 <bt_conn_unref>
		bt_le_scan_update(false);
   11b02:	4630      	mov	r0, r6
   11b04:	f7fd ff20 	bl	f948 <bt_le_scan_update>
		return err;
   11b08:	e799      	b.n	11a3e <bt_conn_le_create+0x22>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   11b0a:	4621      	mov	r1, r4
   11b0c:	f00a fb5a 	bl	1c1c4 <bt_lookup_id_addr>
   11b10:	2207      	movs	r2, #7
   11b12:	4601      	mov	r1, r0
   11b14:	4668      	mov	r0, sp
   11b16:	f00a fa11 	bl	1bf3c <memcpy>
}
   11b1a:	e7b8      	b.n	11a8e <bt_conn_le_create+0x72>
	*ret_conn = conn;
   11b1c:	603c      	str	r4, [r7, #0]
	return 0;
   11b1e:	e78e      	b.n	11a3e <bt_conn_le_create+0x22>
		return -EAGAIN;
   11b20:	f06f 050a 	mvn.w	r5, #10
   11b24:	e78b      	b.n	11a3e <bt_conn_le_create+0x22>
		return -EALREADY;
   11b26:	f06f 0544 	mvn.w	r5, #68	; 0x44
   11b2a:	e788      	b.n	11a3e <bt_conn_le_create+0x22>
		return -ENOMEM;
   11b2c:	f06f 050b 	mvn.w	r5, #11
   11b30:	e785      	b.n	11a3e <bt_conn_le_create+0x22>
   11b32:	bf00      	nop
   11b34:	20008094 	.word	0x20008094
   11b38:	20008000 	.word	0x20008000

00011b3c <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   11b3c:	b570      	push	{r4, r5, r6, lr}
   11b3e:	4606      	mov	r6, r0
   11b40:	4834      	ldr	r0, [pc, #208]	; (11c14 <bt_le_set_auto_conn+0xd8>)
   11b42:	f00a fc00 	bl	1c346 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11b46:	0780      	lsls	r0, r0, #30
{
   11b48:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11b4a:	d55c      	bpl.n	11c06 <bt_le_set_auto_conn+0xca>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   11b4c:	b929      	cbnz	r1, 11b5a <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
   11b4e:	f7fd fe6f 	bl	f830 <bt_le_scan_random_addr_check>
   11b52:	b940      	cbnz	r0, 11b66 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   11b54:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   11b58:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   11b5a:	4608      	mov	r0, r1
   11b5c:	f00a fb51 	bl	1c202 <bt_le_conn_params_valid>
   11b60:	2800      	cmp	r0, #0
   11b62:	d1f4      	bne.n	11b4e <bt_le_set_auto_conn+0x12>
   11b64:	e7f6      	b.n	11b54 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   11b66:	4631      	mov	r1, r6
   11b68:	2000      	movs	r0, #0
   11b6a:	f7ff febb 	bl	118e4 <bt_conn_lookup_addr_le>
	if (!conn) {
   11b6e:	4604      	mov	r4, r0
   11b70:	b928      	cbnz	r0, 11b7e <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   11b72:	4631      	mov	r1, r6
   11b74:	f7ff fd68 	bl	11648 <bt_conn_add_le>
		if (!conn) {
   11b78:	4604      	mov	r4, r0
   11b7a:	2800      	cmp	r0, #0
   11b7c:	d046      	beq.n	11c0c <bt_le_set_auto_conn+0xd0>
		if (!atomic_test_and_set_bit(conn->flags,
   11b7e:	1d23      	adds	r3, r4, #4
	if (param) {
   11b80:	b365      	cbz	r5, 11bdc <bt_le_set_auto_conn+0xa0>
	conn->le.interval_min = param->interval_min;
   11b82:	882a      	ldrh	r2, [r5, #0]
   11b84:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   11b88:	886a      	ldrh	r2, [r5, #2]
   11b8a:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   11b8e:	88aa      	ldrh	r2, [r5, #4]
   11b90:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   11b94:	88ea      	ldrh	r2, [r5, #6]
   11b96:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11b9a:	e8d3 2fef 	ldaex	r2, [r3]
   11b9e:	f042 0101 	orr.w	r1, r2, #1
   11ba2:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11ba6:	2800      	cmp	r0, #0
   11ba8:	d1f7      	bne.n	11b9a <bt_le_set_auto_conn+0x5e>
		if (!atomic_test_and_set_bit(conn->flags,
   11baa:	07d1      	lsls	r1, r2, #31
   11bac:	d402      	bmi.n	11bb4 <bt_le_set_auto_conn+0x78>
			bt_conn_ref(conn);
   11bae:	4620      	mov	r0, r4
   11bb0:	f00a fc3f 	bl	1c432 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   11bb4:	7aa3      	ldrb	r3, [r4, #10]
   11bb6:	b963      	cbnz	r3, 11bd2 <bt_le_set_auto_conn+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11bb8:	4816      	ldr	r0, [pc, #88]	; (11c14 <bt_le_set_auto_conn+0xd8>)
   11bba:	f00a fbc4 	bl	1c346 <atomic_get>
   11bbe:	0783      	lsls	r3, r0, #30
   11bc0:	d507      	bpl.n	11bd2 <bt_le_set_auto_conn+0x96>
		if (param) {
   11bc2:	b11d      	cbz	r5, 11bcc <bt_le_set_auto_conn+0x90>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11bc4:	2102      	movs	r1, #2
   11bc6:	4620      	mov	r0, r4
   11bc8:	f7ff fd96 	bl	116f8 <bt_conn_set_state>
		bt_le_scan_update(false);
   11bcc:	2000      	movs	r0, #0
   11bce:	f7fd febb 	bl	f948 <bt_le_scan_update>
	bt_conn_unref(conn);
   11bd2:	4620      	mov	r0, r4
   11bd4:	f7ff fd64 	bl	116a0 <bt_conn_unref>
	return 0;
   11bd8:	2000      	movs	r0, #0
   11bda:	e7bd      	b.n	11b58 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11bdc:	e8d3 2fef 	ldaex	r2, [r3]
   11be0:	f022 0101 	bic.w	r1, r2, #1
   11be4:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11be8:	2800      	cmp	r0, #0
   11bea:	d1f7      	bne.n	11bdc <bt_le_set_auto_conn+0xa0>
		if (atomic_test_and_clear_bit(conn->flags,
   11bec:	07d2      	lsls	r2, r2, #31
   11bee:	d5e1      	bpl.n	11bb4 <bt_le_set_auto_conn+0x78>
			bt_conn_unref(conn);
   11bf0:	4620      	mov	r0, r4
   11bf2:	f7ff fd55 	bl	116a0 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   11bf6:	7aa3      	ldrb	r3, [r4, #10]
   11bf8:	2b02      	cmp	r3, #2
   11bfa:	d1db      	bne.n	11bb4 <bt_le_set_auto_conn+0x78>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11bfc:	4629      	mov	r1, r5
   11bfe:	4620      	mov	r0, r4
   11c00:	f7ff fd7a 	bl	116f8 <bt_conn_set_state>
   11c04:	e7d6      	b.n	11bb4 <bt_le_set_auto_conn+0x78>
		return -EAGAIN;
   11c06:	f06f 000a 	mvn.w	r0, #10
   11c0a:	e7a5      	b.n	11b58 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   11c0c:	f06f 000b 	mvn.w	r0, #11
   11c10:	e7a2      	b.n	11b58 <bt_le_set_auto_conn+0x1c>
   11c12:	bf00      	nop
   11c14:	20008094 	.word	0x20008094

00011c18 <bt_conn_disconnect>:
{
   11c18:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11c1a:	7883      	ldrb	r3, [r0, #2]
{
   11c1c:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11c1e:	2b01      	cmp	r3, #1
{
   11c20:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11c22:	d103      	bne.n	11c2c <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   11c24:	2100      	movs	r1, #0
   11c26:	3088      	adds	r0, #136	; 0x88
   11c28:	f7ff ff88 	bl	11b3c <bt_le_set_auto_conn>
	switch (conn->state) {
   11c2c:	7aa3      	ldrb	r3, [r4, #10]
   11c2e:	3b02      	subs	r3, #2
   11c30:	2b06      	cmp	r3, #6
   11c32:	d805      	bhi.n	11c40 <bt_conn_disconnect+0x28>
   11c34:	e8df f003 	tbb	[pc, r3]
   11c38:	12040408 	.word	0x12040408
   11c3c:	271f      	.short	0x271f
   11c3e:	10          	.byte	0x10
   11c3f:	00          	.byte	0x00
   11c40:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   11c44:	4628      	mov	r0, r5
   11c46:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11c48:	4620      	mov	r0, r4
   11c4a:	2100      	movs	r1, #0
		conn->err = reason;
   11c4c:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11c4e:	f7ff fd53 	bl	116f8 <bt_conn_set_state>
			bt_le_scan_update(false);
   11c52:	2000      	movs	r0, #0
   11c54:	f7fd fe78 	bl	f948 <bt_le_scan_update>
		return 0;
   11c58:	2500      	movs	r5, #0
   11c5a:	e7f3      	b.n	11c44 <bt_conn_disconnect+0x2c>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
   11c5c:	2157      	movs	r1, #87	; 0x57
   11c5e:	4810      	ldr	r0, [pc, #64]	; (11ca0 <bt_conn_disconnect+0x88>)
   11c60:	f008 ff28 	bl	1aab4 <printk>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11c64:	4620      	mov	r0, r4
		conn->err = reason;
   11c66:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11c68:	2100      	movs	r1, #0
   11c6a:	f7ff fd45 	bl	116f8 <bt_conn_set_state>
}
   11c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   11c72:	f7fe bff1 	b.w	10c58 <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->deferred_work);
   11c76:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11c7a:	f008 f815 	bl	19ca8 <k_delayed_work_cancel>
}
   11c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   11c82:	f7fd be3d 	b.w	f900 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   11c86:	4629      	mov	r1, r5
   11c88:	8820      	ldrh	r0, [r4, #0]
   11c8a:	f00a fa9f 	bl	1c1cc <bt_hci_disconnect>
	if (err) {
   11c8e:	4605      	mov	r5, r0
   11c90:	2800      	cmp	r0, #0
   11c92:	d1d7      	bne.n	11c44 <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   11c94:	2108      	movs	r1, #8
   11c96:	4620      	mov	r0, r4
   11c98:	f7ff fd2e 	bl	116f8 <bt_conn_set_state>
	return 0;
   11c9c:	e7d2      	b.n	11c44 <bt_conn_disconnect+0x2c>
   11c9e:	bf00      	nop
   11ca0:	00021e26 	.word	0x00021e26

00011ca4 <send_conn_le_param_update>:
{
   11ca4:	b538      	push	{r3, r4, r5, lr}
   11ca6:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   11ca8:	4608      	mov	r0, r1
{
   11caa:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   11cac:	f00a faa9 	bl	1c202 <bt_le_conn_params_valid>
   11cb0:	b308      	cbz	r0, 11cf6 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11cb2:	4b12      	ldr	r3, [pc, #72]	; (11cfc <send_conn_le_param_update+0x58>)
   11cb4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   11cb8:	0799      	lsls	r1, r3, #30
   11cba:	d407      	bmi.n	11ccc <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   11cbc:	78e3      	ldrb	r3, [r4, #3]
   11cbe:	b173      	cbz	r3, 11cde <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   11cc0:	4629      	mov	r1, r5
   11cc2:	4620      	mov	r0, r4
}
   11cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   11cc8:	f000 bb14 	b.w	122f4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11ccc:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   11cd0:	079a      	lsls	r2, r3, #30
   11cd2:	d5f3      	bpl.n	11cbc <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11cd4:	1d20      	adds	r0, r4, #4
   11cd6:	f00a fb36 	bl	1c346 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   11cda:	0543      	lsls	r3, r0, #21
   11cdc:	d4ee      	bmi.n	11cbc <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   11cde:	4629      	mov	r1, r5
   11ce0:	4620      	mov	r0, r4
   11ce2:	f00a fbe1 	bl	1c4a8 <bt_conn_le_conn_update>
		if (rc == 0) {
   11ce6:	b928      	cbnz	r0, 11cf4 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   11ce8:	88ab      	ldrh	r3, [r5, #4]
   11cea:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   11cee:	88eb      	ldrh	r3, [r5, #6]
   11cf0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   11cf4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   11cf6:	f06f 0015 	mvn.w	r0, #21
   11cfa:	e7fb      	b.n	11cf4 <send_conn_le_param_update+0x50>
   11cfc:	20008000 	.word	0x20008000

00011d00 <deferred_work>:
{
   11d00:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   11d02:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   11d06:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   11d08:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   11d0c:	b99b      	cbnz	r3, 11d36 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   11d0e:	4630      	mov	r0, r6
   11d10:	f00a fc2a 	bl	1c568 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   11d14:	4b26      	ldr	r3, [pc, #152]	; (11db0 <deferred_work+0xb0>)
   11d16:	681d      	ldr	r5, [r3, #0]
   11d18:	b92d      	cbnz	r5, 11d26 <deferred_work+0x26>
		bt_conn_unref(conn);
   11d1a:	4630      	mov	r0, r6
}
   11d1c:	b002      	add	sp, #8
   11d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   11d22:	f7ff bcbd 	b.w	116a0 <bt_conn_unref>
		if (cb->disconnected) {
   11d26:	686b      	ldr	r3, [r5, #4]
   11d28:	b11b      	cbz	r3, 11d32 <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   11d2a:	4630      	mov	r0, r6
   11d2c:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   11d30:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   11d32:	692d      	ldr	r5, [r5, #16]
   11d34:	e7f0      	b.n	11d18 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   11d36:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   11d3a:	2b01      	cmp	r3, #1
   11d3c:	d12f      	bne.n	11d9e <deferred_work+0x9e>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11d3e:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   11d42:	b923      	cbnz	r3, 11d4e <deferred_work+0x4e>
}
   11d44:	b002      	add	sp, #8
   11d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
   11d4a:	f7fd bdd9 	b.w	f900 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   11d4e:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11d52:	e8d5 3fef 	ldaex	r3, [r5]
   11d56:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   11d5a:	e8c5 2fe1 	stlex	r1, r2, [r5]
   11d5e:	2900      	cmp	r1, #0
   11d60:	d1f7      	bne.n	11d52 <deferred_work+0x52>
   11d62:	059b      	lsls	r3, r3, #22
   11d64:	d51d      	bpl.n	11da2 <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   11d66:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   11d6a:	f8ad 3000 	strh.w	r3, [sp]
   11d6e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   11d72:	f8ad 3002 	strh.w	r3, [sp, #2]
   11d76:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   11d7a:	f8ad 3004 	strh.w	r3, [sp, #4]
   11d7e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   11d82:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   11d86:	4669      	mov	r1, sp
   11d88:	4630      	mov	r0, r6
   11d8a:	f7ff ff8b 	bl	11ca4 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11d8e:	e8d5 3fef 	ldaex	r3, [r5]
   11d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11d96:	e8c5 3fe2 	stlex	r2, r3, [r5]
   11d9a:	2a00      	cmp	r2, #0
   11d9c:	d1f7      	bne.n	11d8e <deferred_work+0x8e>
}
   11d9e:	b002      	add	sp, #8
   11da0:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
   11da2:	466b      	mov	r3, sp
   11da4:	4a03      	ldr	r2, [pc, #12]	; (11db4 <deferred_work+0xb4>)
   11da6:	6810      	ldr	r0, [r2, #0]
   11da8:	6851      	ldr	r1, [r2, #4]
   11daa:	c303      	stmia	r3!, {r0, r1}
   11dac:	e7eb      	b.n	11d86 <deferred_work+0x86>
   11dae:	bf00      	nop
   11db0:	2000ab88 	.word	0x2000ab88
   11db4:	0001ea18 	.word	0x0001ea18

00011db8 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   11db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11dba:	4604      	mov	r4, r0
   11dbc:	460d      	mov	r5, r1
   11dbe:	4617      	mov	r7, r2
   11dc0:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   11dc2:	f00c fa9c 	bl	1e2fe <k_is_in_isr>
   11dc6:	b150      	cbz	r0, 11dde <bt_conn_create_pdu_timeout+0x26>
   11dc8:	490f      	ldr	r1, [pc, #60]	; (11e08 <bt_conn_create_pdu_timeout+0x50>)
   11dca:	4810      	ldr	r0, [pc, #64]	; (11e0c <bt_conn_create_pdu_timeout+0x54>)
   11dcc:	f640 12ee 	movw	r2, #2542	; 0x9ee
   11dd0:	f008 fe70 	bl	1aab4 <printk>
   11dd4:	f640 11ee 	movw	r1, #2542	; 0x9ee
   11dd8:	480b      	ldr	r0, [pc, #44]	; (11e08 <bt_conn_create_pdu_timeout+0x50>)
   11dda:	f009 f911 	bl	1b000 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   11dde:	480c      	ldr	r0, [pc, #48]	; (11e10 <bt_conn_create_pdu_timeout+0x58>)
   11de0:	463a      	mov	r2, r7
   11de2:	2c00      	cmp	r4, #0
   11de4:	bf18      	it	ne
   11de6:	4620      	movne	r0, r4
   11de8:	4633      	mov	r3, r6
   11dea:	f00b fbb7 	bl	1d55c <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   11dee:	4604      	mov	r4, r0
   11df0:	b928      	cbnz	r0, 11dfe <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   11df2:	2157      	movs	r1, #87	; 0x57
   11df4:	4807      	ldr	r0, [pc, #28]	; (11e14 <bt_conn_create_pdu_timeout+0x5c>)
   11df6:	f008 fe5d 	bl	1aab4 <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   11dfa:	4620      	mov	r0, r4
   11dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   11dfe:	1d69      	adds	r1, r5, #5
   11e00:	3008      	adds	r0, #8
   11e02:	f003 fd8f 	bl	15924 <net_buf_simple_reserve>
	return buf;
   11e06:	e7f8      	b.n	11dfa <bt_conn_create_pdu_timeout+0x42>
   11e08:	00021c5b 	.word	0x00021c5b
   11e0c:	0002003d 	.word	0x0002003d
   11e10:	200086d0 	.word	0x200086d0
   11e14:	00021e52 	.word	0x00021e52

00011e18 <bt_conn_create_frag_timeout>:
{
   11e18:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   11e1a:	4801      	ldr	r0, [pc, #4]	; (11e20 <bt_conn_create_frag_timeout+0x8>)
   11e1c:	f7ff bfcc 	b.w	11db8 <bt_conn_create_pdu_timeout>
   11e20:	20008728 	.word	0x20008728

00011e24 <create_frag>:
{
   11e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e28:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   11e2a:	f04f 33ff 	mov.w	r3, #4294967295
   11e2e:	f04f 32ff 	mov.w	r2, #4294967295
   11e32:	2000      	movs	r0, #0
{
   11e34:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   11e36:	f7ff ffef 	bl	11e18 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   11e3a:	7ab3      	ldrb	r3, [r6, #10]
		frag = bt_conn_create_frag(0);
   11e3c:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   11e3e:	2b07      	cmp	r3, #7
   11e40:	f04f 0600 	mov.w	r6, #0
   11e44:	d005      	beq.n	11e52 <create_frag+0x2e>
		net_buf_unref(frag);
   11e46:	f003 fdbf 	bl	159c8 <net_buf_unref>
		return NULL;
   11e4a:	4635      	mov	r5, r6
}
   11e4c:	4628      	mov	r0, r5
   11e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   11e52:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   11e54:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   11e58:	4e0c      	ldr	r6, [pc, #48]	; (11e8c <create_frag+0x68>)
   11e5a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11e5c:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
   11e60:	f00b fba2 	bl	1d5a8 <net_buf_simple_tailroom>
   11e64:	4580      	cmp	r8, r0
   11e66:	d20c      	bcs.n	11e82 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   11e68:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11e6c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   11e70:	4632      	mov	r2, r6
   11e72:	4638      	mov	r0, r7
   11e74:	f00b fba0 	bl	1d5b8 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   11e78:	4631      	mov	r1, r6
   11e7a:	4620      	mov	r0, r4
   11e7c:	f003 fe80 	bl	15b80 <net_buf_simple_pull>
   11e80:	e7e4      	b.n	11e4c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   11e82:	4638      	mov	r0, r7
   11e84:	f00b fb90 	bl	1d5a8 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11e88:	b286      	uxth	r6, r0
   11e8a:	e7ef      	b.n	11e6c <create_frag+0x48>
   11e8c:	20008000 	.word	0x20008000

00011e90 <bt_conn_process_tx>:
{
   11e90:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   11e92:	7a83      	ldrb	r3, [r0, #10]
{
   11e94:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   11e96:	b973      	cbnz	r3, 11eb6 <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11e98:	1d03      	adds	r3, r0, #4
   11e9a:	e8d3 2fef 	ldaex	r2, [r3]
   11e9e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   11ea2:	e8c3 1fe5 	stlex	r5, r1, [r3]
   11ea6:	2d00      	cmp	r5, #0
   11ea8:	d1f7      	bne.n	11e9a <bt_conn_process_tx+0xa>
   11eaa:	0653      	lsls	r3, r2, #25
   11eac:	d503      	bpl.n	11eb6 <bt_conn_process_tx+0x26>
}
   11eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   11eb2:	f7ff ba8f 	b.w	113d4 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   11eb6:	2200      	movs	r2, #0
   11eb8:	2300      	movs	r3, #0
   11eba:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11ebe:	f003 fd01 	bl	158c4 <net_buf_get>
	BT_ASSERT(buf);
   11ec2:	4605      	mov	r5, r0
   11ec4:	b958      	cbnz	r0, 11ede <bt_conn_process_tx+0x4e>
   11ec6:	f240 525f 	movw	r2, #1375	; 0x55f
   11eca:	491e      	ldr	r1, [pc, #120]	; (11f44 <bt_conn_process_tx+0xb4>)
   11ecc:	481e      	ldr	r0, [pc, #120]	; (11f48 <bt_conn_process_tx+0xb8>)
   11ece:	f008 fdf1 	bl	1aab4 <printk>
   11ed2:	4040      	eors	r0, r0
   11ed4:	f380 8811 	msr	BASEPRI, r0
   11ed8:	f04f 0003 	mov.w	r0, #3
   11edc:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   11ede:	4e1b      	ldr	r6, [pc, #108]	; (11f4c <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   11ee0:	89aa      	ldrh	r2, [r5, #12]
   11ee2:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11ee6:	429a      	cmp	r2, r3
   11ee8:	d807      	bhi.n	11efa <bt_conn_process_tx+0x6a>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   11eea:	2300      	movs	r3, #0
   11eec:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   11eee:	4629      	mov	r1, r5
   11ef0:	4620      	mov	r0, r4
   11ef2:	f7ff f971 	bl	111d8 <send_frag>
	if (!send_buf(conn, buf)) {
   11ef6:	b130      	cbz	r0, 11f06 <bt_conn_process_tx+0x76>
}
   11ef8:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   11efa:	4629      	mov	r1, r5
   11efc:	4620      	mov	r0, r4
   11efe:	f7ff ff91 	bl	11e24 <create_frag>
	if (!frag) {
   11f02:	4601      	mov	r1, r0
   11f04:	b920      	cbnz	r0, 11f10 <bt_conn_process_tx+0x80>
		net_buf_unref(buf);
   11f06:	4628      	mov	r0, r5
}
   11f08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   11f0c:	f003 bd5c 	b.w	159c8 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   11f10:	2301      	movs	r3, #1
   11f12:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11f14:	4620      	mov	r0, r4
   11f16:	f7ff f95f 	bl	111d8 <send_frag>
   11f1a:	2800      	cmp	r0, #0
   11f1c:	d0f3      	beq.n	11f06 <bt_conn_process_tx+0x76>
	while (buf->len > conn_mtu(conn)) {
   11f1e:	89aa      	ldrh	r2, [r5, #12]
   11f20:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11f24:	429a      	cmp	r2, r3
   11f26:	d802      	bhi.n	11f2e <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   11f28:	2300      	movs	r3, #0
   11f2a:	2203      	movs	r2, #3
   11f2c:	e7df      	b.n	11eee <bt_conn_process_tx+0x5e>
		frag = create_frag(conn, buf);
   11f2e:	4629      	mov	r1, r5
   11f30:	4620      	mov	r0, r4
   11f32:	f7ff ff77 	bl	11e24 <create_frag>
		if (!frag) {
   11f36:	4601      	mov	r1, r0
   11f38:	2800      	cmp	r0, #0
   11f3a:	d0e4      	beq.n	11f06 <bt_conn_process_tx+0x76>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11f3c:	2301      	movs	r3, #1
   11f3e:	461a      	mov	r2, r3
   11f40:	e7e8      	b.n	11f14 <bt_conn_process_tx+0x84>
   11f42:	bf00      	nop
   11f44:	00021c5b 	.word	0x00021c5b
   11f48:	0002003d 	.word	0x0002003d
   11f4c:	20008000 	.word	0x20008000

00011f50 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   11f50:	4b0b      	ldr	r3, [pc, #44]	; (11f80 <bt_conn_index+0x30>)
{
   11f52:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   11f54:	1ac0      	subs	r0, r0, r3
   11f56:	4b0b      	ldr	r3, [pc, #44]	; (11f84 <bt_conn_index+0x34>)
   11f58:	1184      	asrs	r4, r0, #6
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11f5a:	f5b0 6fd8 	cmp.w	r0, #1728	; 0x6c0
		index = conn - acl_conns;
   11f5e:	fb03 f404 	mul.w	r4, r3, r4
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11f62:	d90a      	bls.n	11f7a <bt_conn_index+0x2a>
   11f64:	4908      	ldr	r1, [pc, #32]	; (11f88 <bt_conn_index+0x38>)
   11f66:	4809      	ldr	r0, [pc, #36]	; (11f8c <bt_conn_index+0x3c>)
   11f68:	f640 2295 	movw	r2, #2709	; 0xa95
   11f6c:	f008 fda2 	bl	1aab4 <printk>
   11f70:	f640 2195 	movw	r1, #2709	; 0xa95
   11f74:	4804      	ldr	r0, [pc, #16]	; (11f88 <bt_conn_index+0x38>)
   11f76:	f009 f843 	bl	1b000 <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   11f7a:	b2e0      	uxtb	r0, r4
   11f7c:	bd10      	pop	{r4, pc}
   11f7e:	bf00      	nop
   11f80:	20008ce8 	.word	0x20008ce8
   11f84:	aaaaaaab 	.word	0xaaaaaaab
   11f88:	00021c5b 	.word	0x00021c5b
   11f8c:	0002003d 	.word	0x0002003d

00011f90 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   11f90:	2809      	cmp	r0, #9
   11f92:	d806      	bhi.n	11fa2 <bt_conn_lookup_index+0x12>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   11f94:	4b04      	ldr	r3, [pc, #16]	; (11fa8 <bt_conn_lookup_index+0x18>)
   11f96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11f9a:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   11f9e:	f00a ba48 	b.w	1c432 <bt_conn_ref>
}
   11fa2:	2000      	movs	r0, #0
   11fa4:	4770      	bx	lr
   11fa6:	bf00      	nop
   11fa8:	20008ce8 	.word	0x20008ce8

00011fac <bt_conn_init>:

int bt_conn_init(void)
{
   11fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   11fae:	4917      	ldr	r1, [pc, #92]	; (1200c <bt_conn_init+0x60>)
   11fb0:	4817      	ldr	r0, [pc, #92]	; (12010 <bt_conn_init+0x64>)
   11fb2:	f00c f93c 	bl	1e22e <k_queue_append>
   11fb6:	4917      	ldr	r1, [pc, #92]	; (12014 <bt_conn_init+0x68>)
   11fb8:	4815      	ldr	r0, [pc, #84]	; (12010 <bt_conn_init+0x64>)
   11fba:	f00c f938 	bl	1e22e <k_queue_append>
   11fbe:	4916      	ldr	r1, [pc, #88]	; (12018 <bt_conn_init+0x6c>)
   11fc0:	4813      	ldr	r0, [pc, #76]	; (12010 <bt_conn_init+0x64>)
   11fc2:	f00c f934 	bl	1e22e <k_queue_append>
	}

	bt_att_init();
   11fc6:	f00a fe4f 	bl	1cc68 <bt_att_init>

	err = bt_smp_init();
   11fca:	f00b fac4 	bl	1d556 <bt_smp_init>
	if (err) {
   11fce:	4605      	mov	r5, r0
   11fd0:	b9d0      	cbnz	r0, 12008 <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   11fd2:	f00a fb32 	bl	1c63a <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11fd6:	462e      	mov	r6, r5
   11fd8:	4f10      	ldr	r7, [pc, #64]	; (1201c <bt_conn_init+0x70>)
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11fda:	4638      	mov	r0, r7
   11fdc:	f00a fa29 	bl	1c432 <bt_conn_ref>

			if (!conn) {
   11fe0:	4604      	mov	r4, r0
   11fe2:	b160      	cbz	r0, 11ffe <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11fe4:	3004      	adds	r0, #4
   11fe6:	f00a f9ae 	bl	1c346 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   11fea:	07c3      	lsls	r3, r0, #31
   11fec:	d504      	bpl.n	11ff8 <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11fee:	2102      	movs	r1, #2
   11ff0:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   11ff2:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11ff4:	f7ff fb80 	bl	116f8 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   11ff8:	4620      	mov	r0, r4
   11ffa:	f7ff fb51 	bl	116a0 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11ffe:	3601      	adds	r6, #1
   12000:	2e0a      	cmp	r6, #10
   12002:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   12006:	d1e8      	bne.n	11fda <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   12008:	4628      	mov	r0, r5
   1200a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1200c:	2000ab8c 	.word	0x2000ab8c
   12010:	20008688 	.word	0x20008688
   12014:	2000ab9c 	.word	0x2000ab9c
   12018:	2000abac 	.word	0x2000abac
   1201c:	20008ce8 	.word	0x20008ce8

00012020 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   12020:	b570      	push	{r4, r5, r6, lr}
   12022:	4602      	mov	r2, r0
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   12024:	2400      	movs	r4, #0
   12026:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   12028:	4b09      	ldr	r3, [pc, #36]	; (12050 <l2cap_accept+0x30>)
   1202a:	fb06 f504 	mul.w	r5, r6, r4
   1202e:	58e8      	ldr	r0, [r5, r3]
   12030:	b148      	cbz	r0, 12046 <l2cap_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   12032:	3401      	adds	r4, #1
   12034:	2c0a      	cmp	r4, #10
   12036:	d1f8      	bne.n	1202a <l2cap_accept+0xa>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   12038:	4806      	ldr	r0, [pc, #24]	; (12054 <l2cap_accept+0x34>)
   1203a:	2145      	movs	r1, #69	; 0x45
   1203c:	f008 fd3a 	bl	1aab4 <printk>
   12040:	f06f 000b 	mvn.w	r0, #11
   12044:	e003      	b.n	1204e <l2cap_accept+0x2e>
		l2cap->chan.chan.ops = &ops;
   12046:	4a04      	ldr	r2, [pc, #16]	; (12058 <l2cap_accept+0x38>)
   12048:	442b      	add	r3, r5
   1204a:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1204c:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   1204e:	bd70      	pop	{r4, r5, r6, pc}
   12050:	20009468 	.word	0x20009468
   12054:	00021eea 	.word	0x00021eea
   12058:	0001ef0c 	.word	0x0001ef0c

0001205c <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1205e:	4605      	mov	r5, r0
   12060:	460f      	mov	r7, r1
   12062:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   12064:	2300      	movs	r3, #0
   12066:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1206a:	2104      	movs	r1, #4
   1206c:	2000      	movs	r0, #0
   1206e:	f7ff fea3 	bl	11db8 <bt_conn_create_pdu_timeout>
	if (!buf) {
   12072:	4604      	mov	r4, r0
   12074:	b930      	cbnz	r0, 12084 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   12076:	462a      	mov	r2, r5
   12078:	2145      	movs	r1, #69	; 0x45
   1207a:	4806      	ldr	r0, [pc, #24]	; (12094 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   1207c:	f008 fd1a 	bl	1aab4 <printk>
}
   12080:	4620      	mov	r0, r4
   12082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   12084:	2104      	movs	r1, #4
   12086:	3008      	adds	r0, #8
   12088:	f003 fdb4 	bl	15bf4 <net_buf_simple_add>
	hdr->code = code;
   1208c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1208e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   12090:	8046      	strh	r6, [r0, #2]
	return buf;
   12092:	e7f5      	b.n	12080 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   12094:	00021f16 	.word	0x00021f16

00012098 <l2cap_rtx_timeout>:
{
   12098:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   1209a:	4604      	mov	r4, r0
   1209c:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   120a0:	2145      	movs	r1, #69	; 0x45
   120a2:	4622      	mov	r2, r4
   120a4:	4805      	ldr	r0, [pc, #20]	; (120bc <l2cap_rtx_timeout+0x24>)
   120a6:	f008 fd05 	bl	1aab4 <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
   120aa:	4628      	mov	r0, r5
   120ac:	4621      	mov	r1, r4
   120ae:	f00a fa25 	bl	1c4fc <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   120b2:	4620      	mov	r0, r4
}
   120b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   120b8:	f00a ba41 	b.w	1c53e <bt_l2cap_chan_del>
   120bc:	00021f43 	.word	0x00021f43

000120c0 <bt_l2cap_connected>:
{
   120c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   120c4:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   120c6:	4e2d      	ldr	r6, [pc, #180]	; (1217c <bt_l2cap_connected+0xbc>)
   120c8:	4f2d      	ldr	r7, [pc, #180]	; (12180 <bt_l2cap_connected+0xc0>)
   120ca:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 12184 <bt_l2cap_connected+0xc4>
   120ce:	42be      	cmp	r6, r7
   120d0:	d90a      	bls.n	120e8 <bt_l2cap_connected+0x28>
   120d2:	4641      	mov	r1, r8
   120d4:	482c      	ldr	r0, [pc, #176]	; (12188 <bt_l2cap_connected+0xc8>)
   120d6:	f240 1267 	movw	r2, #359	; 0x167
   120da:	f008 fceb 	bl	1aab4 <printk>
   120de:	f240 1167 	movw	r1, #359	; 0x167
   120e2:	4640      	mov	r0, r8
   120e4:	f008 ff8c 	bl	1b000 <assert_post_action>
   120e8:	42be      	cmp	r6, r7
   120ea:	d302      	bcc.n	120f2 <bt_l2cap_connected+0x32>
}
   120ec:	b003      	add	sp, #12
   120ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   120f2:	4628      	mov	r0, r5
   120f4:	6873      	ldr	r3, [r6, #4]
   120f6:	a901      	add	r1, sp, #4
   120f8:	4798      	blx	r3
   120fa:	2800      	cmp	r0, #0
   120fc:	db38      	blt.n	12170 <bt_l2cap_connected+0xb0>
		ch = BT_L2CAP_LE_CHAN(chan);
   120fe:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   12100:	8833      	ldrh	r3, [r6, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   12102:	2230      	movs	r2, #48	; 0x30
   12104:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   12108:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   1210c:	2100      	movs	r1, #0
   1210e:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   12112:	f8d6 9008 	ldr.w	r9, [r6, #8]
   12116:	f009 ff3c 	bl	1bf92 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1211a:	2200      	movs	r2, #0
   1211c:	4b1b      	ldr	r3, [pc, #108]	; (1218c <bt_l2cap_connected+0xcc>)
   1211e:	6163      	str	r3, [r4, #20]
   12120:	f104 0340 	add.w	r3, r4, #64	; 0x40
   12124:	e8d3 1fef 	ldaex	r1, [r3]
   12128:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1212c:	2800      	cmp	r0, #0
   1212e:	d1f9      	bne.n	12124 <bt_l2cap_connected+0x64>
	parent->next = child;
   12130:	60a2      	str	r2, [r4, #8]
	return list->tail;
   12132:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   12134:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
   12138:	b9e2      	cbnz	r2, 12174 <bt_l2cap_connected+0xb4>
	list->head = node;
   1213a:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
		if (chan->ops->connected) {
   1213e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   12140:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
   12142:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   12144:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   12148:	681b      	ldr	r3, [r3, #0]
   1214a:	b103      	cbz	r3, 1214e <bt_l2cap_connected+0x8e>
			chan->ops->connected(chan);
   1214c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1214e:	9b01      	ldr	r3, [sp, #4]
   12150:	3340      	adds	r3, #64	; 0x40
   12152:	e8d3 2fef 	ldaex	r2, [r3]
   12156:	f042 0201 	orr.w	r2, r2, #1
   1215a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1215e:	2900      	cmp	r1, #0
   12160:	d1f7      	bne.n	12152 <bt_l2cap_connected+0x92>
		if (chan->ops->status) {
   12162:	9801      	ldr	r0, [sp, #4]
   12164:	6843      	ldr	r3, [r0, #4]
   12166:	699b      	ldr	r3, [r3, #24]
   12168:	b113      	cbz	r3, 12170 <bt_l2cap_connected+0xb0>
			chan->ops->status(chan, chan->status);
   1216a:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1216e:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   12170:	360c      	adds	r6, #12
   12172:	e7ac      	b.n	120ce <bt_l2cap_connected+0xe>
	parent->next = child;
   12174:	6013      	str	r3, [r2, #0]
	list->tail = node;
   12176:	656b      	str	r3, [r5, #84]	; 0x54
}
   12178:	e7e1      	b.n	1213e <bt_l2cap_connected+0x7e>
   1217a:	bf00      	nop
   1217c:	0001e7f4 	.word	0x0001e7f4
   12180:	0001e818 	.word	0x0001e818
   12184:	00021f58 	.word	0x00021f58
   12188:	0002003d 	.word	0x0002003d
   1218c:	00012099 	.word	0x00012099

00012190 <l2cap_recv>:
{
   12190:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   12192:	898b      	ldrh	r3, [r1, #12]
{
   12194:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   12196:	2b03      	cmp	r3, #3
{
   12198:	460d      	mov	r5, r1
   1219a:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   1219c:	d804      	bhi.n	121a8 <l2cap_recv+0x18>
		BT_ERR("Too small L2CAP signaling PDU");
   1219e:	2145      	movs	r1, #69	; 0x45
   121a0:	483a      	ldr	r0, [pc, #232]	; (1228c <l2cap_recv+0xfc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   121a2:	f008 fc87 	bl	1aab4 <printk>
		return 0;
   121a6:	e00d      	b.n	121c4 <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   121a8:	2104      	movs	r1, #4
   121aa:	f105 0008 	add.w	r0, r5, #8
   121ae:	f003 fd03 	bl	15bb8 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   121b2:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   121b4:	8843      	ldrh	r3, [r0, #2]
   121b6:	4604      	mov	r4, r0
	if (buf->len != len) {
   121b8:	4293      	cmp	r3, r2
   121ba:	d006      	beq.n	121ca <l2cap_recv+0x3a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   121bc:	2145      	movs	r1, #69	; 0x45
   121be:	4834      	ldr	r0, [pc, #208]	; (12290 <l2cap_recv+0x100>)
   121c0:	f008 fc78 	bl	1aab4 <printk>
}
   121c4:	2000      	movs	r0, #0
   121c6:	b005      	add	sp, #20
   121c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   121ca:	7841      	ldrb	r1, [r0, #1]
   121cc:	b911      	cbnz	r1, 121d4 <l2cap_recv+0x44>
		BT_ERR("Invalid ident value in L2CAP PDU");
   121ce:	2145      	movs	r1, #69	; 0x45
   121d0:	4830      	ldr	r0, [pc, #192]	; (12294 <l2cap_recv+0x104>)
   121d2:	e7e6      	b.n	121a2 <l2cap_recv+0x12>
	switch (hdr->code) {
   121d4:	7802      	ldrb	r2, [r0, #0]
   121d6:	2a12      	cmp	r2, #18
   121d8:	d00f      	beq.n	121fa <l2cap_recv+0x6a>
   121da:	2a13      	cmp	r2, #19
   121dc:	d008      	beq.n	121f0 <l2cap_recv+0x60>
   121de:	2a01      	cmp	r2, #1
   121e0:	d0f0      	beq.n	121c4 <l2cap_recv+0x34>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   121e2:	2157      	movs	r1, #87	; 0x57
   121e4:	482c      	ldr	r0, [pc, #176]	; (12298 <l2cap_recv+0x108>)
   121e6:	f008 fc65 	bl	1aab4 <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   121ea:	7861      	ldrb	r1, [r4, #1]
   121ec:	6830      	ldr	r0, [r6, #0]
   121ee:	e00d      	b.n	1220c <l2cap_recv+0x7c>
	if (buf->len < sizeof(*rsp)) {
   121f0:	2b01      	cmp	r3, #1
   121f2:	d8e7      	bhi.n	121c4 <l2cap_recv+0x34>
		BT_ERR("Too small LE conn param rsp");
   121f4:	2145      	movs	r1, #69	; 0x45
   121f6:	4829      	ldr	r0, [pc, #164]	; (1229c <l2cap_recv+0x10c>)
   121f8:	e7d3      	b.n	121a2 <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   121fa:	2b07      	cmp	r3, #7
   121fc:	d802      	bhi.n	12204 <l2cap_recv+0x74>
		BT_ERR("Too small LE conn update param req");
   121fe:	2145      	movs	r1, #69	; 0x45
   12200:	4827      	ldr	r0, [pc, #156]	; (122a0 <l2cap_recv+0x110>)
   12202:	e7ce      	b.n	121a2 <l2cap_recv+0x12>
   12204:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   12206:	78e7      	ldrb	r7, [r4, #3]
   12208:	b11f      	cbz	r7, 12212 <l2cap_recv+0x82>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1220a:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   1220c:	f00a f9de 	bl	1c5cc <l2cap_send_reject.constprop.0>
		break;
   12210:	e7d8      	b.n	121c4 <l2cap_recv+0x34>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   12212:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   12214:	7850      	ldrb	r0, [r2, #1]
   12216:	7813      	ldrb	r3, [r2, #0]
   12218:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1221c:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   12220:	78d0      	ldrb	r0, [r2, #3]
   12222:	7893      	ldrb	r3, [r2, #2]
   12224:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   12228:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   1222c:	7950      	ldrb	r0, [r2, #5]
   1222e:	7913      	ldrb	r3, [r2, #4]
   12230:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   12234:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   12238:	7993      	ldrb	r3, [r2, #6]
   1223a:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1223c:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   1223e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   12242:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   12244:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   12248:	f7ff ff08 	bl	1205c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1224c:	4605      	mov	r5, r0
   1224e:	2800      	cmp	r0, #0
   12250:	d0b8      	beq.n	121c4 <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   12252:	a902      	add	r1, sp, #8
   12254:	4620      	mov	r0, r4
   12256:	f7ff f895 	bl	11384 <le_param_req>
   1225a:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   1225c:	2102      	movs	r1, #2
   1225e:	f105 0008 	add.w	r0, r5, #8
   12262:	f003 fcc7 	bl	15bf4 <net_buf_simple_add>
	if (accepted) {
   12266:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1226a:	b2db      	uxtb	r3, r3
   1226c:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1226e:	462a      	mov	r2, r5
   12270:	463b      	mov	r3, r7
   12272:	2105      	movs	r1, #5
   12274:	4620      	mov	r0, r4
   12276:	9700      	str	r7, [sp, #0]
   12278:	f00a f98f 	bl	1c59a <bt_l2cap_send_cb>
	if (accepted) {
   1227c:	2e00      	cmp	r6, #0
   1227e:	d0a1      	beq.n	121c4 <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   12280:	4620      	mov	r0, r4
   12282:	a902      	add	r1, sp, #8
   12284:	f00a f910 	bl	1c4a8 <bt_conn_le_conn_update>
   12288:	e79c      	b.n	121c4 <l2cap_recv+0x34>
   1228a:	bf00      	nop
   1228c:	00021f89 	.word	0x00021f89
   12290:	00021fac 	.word	0x00021fac
   12294:	00021fd2 	.word	0x00021fd2
   12298:	00022041 	.word	0x00022041
   1229c:	00021ff8 	.word	0x00021ff8
   122a0:	00022019 	.word	0x00022019

000122a4 <bt_l2cap_recv>:
{
   122a4:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   122a6:	898b      	ldrh	r3, [r1, #12]
{
   122a8:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   122aa:	2b03      	cmp	r3, #3
{
   122ac:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   122ae:	d808      	bhi.n	122c2 <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   122b0:	2145      	movs	r1, #69	; 0x45
   122b2:	480e      	ldr	r0, [pc, #56]	; (122ec <bt_l2cap_recv+0x48>)
   122b4:	f008 fbfe 	bl	1aab4 <printk>
	net_buf_unref(buf);
   122b8:	4620      	mov	r0, r4
}
   122ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   122be:	f003 bb83 	b.w	159c8 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   122c2:	2104      	movs	r1, #4
   122c4:	f104 0008 	add.w	r0, r4, #8
   122c8:	f003 fc76 	bl	15bb8 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   122cc:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   122ce:	4628      	mov	r0, r5
   122d0:	4611      	mov	r1, r2
   122d2:	f00a f9a2 	bl	1c61a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   122d6:	b920      	cbnz	r0, 122e2 <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   122d8:	2157      	movs	r1, #87	; 0x57
   122da:	4805      	ldr	r0, [pc, #20]	; (122f0 <bt_l2cap_recv+0x4c>)
   122dc:	f008 fbea 	bl	1aab4 <printk>
		net_buf_unref(buf);
   122e0:	e7ea      	b.n	122b8 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   122e2:	6843      	ldr	r3, [r0, #4]
   122e4:	4621      	mov	r1, r4
   122e6:	691b      	ldr	r3, [r3, #16]
   122e8:	4798      	blx	r3
   122ea:	e7e5      	b.n	122b8 <bt_l2cap_recv+0x14>
   122ec:	00022064 	.word	0x00022064
   122f0:	00022086 	.word	0x00022086

000122f4 <bt_l2cap_update_conn_param>:
{
   122f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   122f6:	460c      	mov	r4, r1
	ident++;
   122f8:	4914      	ldr	r1, [pc, #80]	; (1234c <bt_l2cap_update_conn_param+0x58>)
{
   122fa:	4605      	mov	r5, r0
	ident++;
   122fc:	780b      	ldrb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   122fe:	2208      	movs	r2, #8
	ident++;
   12300:	3301      	adds	r3, #1
	if (!ident) {
   12302:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   12306:	bf08      	it	eq
   12308:	2301      	moveq	r3, #1
   1230a:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1230c:	2012      	movs	r0, #18
   1230e:	7809      	ldrb	r1, [r1, #0]
   12310:	f7ff fea4 	bl	1205c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   12314:	4606      	mov	r6, r0
   12316:	b1b0      	cbz	r0, 12346 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   12318:	2108      	movs	r1, #8
   1231a:	4408      	add	r0, r1
   1231c:	f003 fc6a 	bl	15bf4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   12320:	8822      	ldrh	r2, [r4, #0]
   12322:	2105      	movs	r1, #5
   12324:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   12326:	8862      	ldrh	r2, [r4, #2]
   12328:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1232a:	88a2      	ldrh	r2, [r4, #4]
   1232c:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1232e:	88e2      	ldrh	r2, [r4, #6]
   12330:	2400      	movs	r4, #0
   12332:	80c2      	strh	r2, [r0, #6]
   12334:	4623      	mov	r3, r4
   12336:	4632      	mov	r2, r6
   12338:	4628      	mov	r0, r5
   1233a:	9400      	str	r4, [sp, #0]
   1233c:	f00a f92d 	bl	1c59a <bt_l2cap_send_cb>
	return 0;
   12340:	4620      	mov	r0, r4
}
   12342:	b002      	add	sp, #8
   12344:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   12346:	f06f 000b 	mvn.w	r0, #11
   1234a:	e7fa      	b.n	12342 <bt_l2cap_update_conn_param+0x4e>
   1234c:	2000f9b3 	.word	0x2000f9b3

00012350 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   12350:	4b02      	ldr	r3, [pc, #8]	; (1235c <att_cfm_sent+0xc>)
   12352:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   12356:	f00a b983 	b.w	1c660 <att_sent>
   1235a:	bf00      	nop
   1235c:	0001ca6f 	.word	0x0001ca6f

00012360 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   12360:	4b02      	ldr	r3, [pc, #8]	; (1236c <att_rsp_sent+0xc>)
   12362:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   12366:	f00a b97b 	b.w	1c660 <att_sent>
   1236a:	bf00      	nop
   1236c:	0001ca5b 	.word	0x0001ca5b

00012370 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   12370:	4b02      	ldr	r3, [pc, #8]	; (1237c <att_req_sent+0xc>)
   12372:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   12376:	f00a b973 	b.w	1c660 <att_sent>
   1237a:	bf00      	nop
   1237c:	0001252d 	.word	0x0001252d

00012380 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   12380:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   12382:	7a83      	ldrb	r3, [r0, #10]
   12384:	2b07      	cmp	r3, #7
   12386:	d005      	beq.n	12394 <att_get+0x14>
		BT_WARN("Not connected");
   12388:	2157      	movs	r1, #87	; 0x57
   1238a:	480e      	ldr	r0, [pc, #56]	; (123c4 <att_get+0x44>)
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
   1238c:	f008 fb92 	bl	1aab4 <printk>
		return NULL;
   12390:	2400      	movs	r4, #0
   12392:	e008      	b.n	123a6 <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   12394:	2104      	movs	r1, #4
   12396:	f00a f940 	bl	1c61a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1239a:	4604      	mov	r4, r0
   1239c:	b928      	cbnz	r0, 123aa <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   1239e:	2145      	movs	r1, #69	; 0x45
   123a0:	4809      	ldr	r0, [pc, #36]	; (123c8 <att_get+0x48>)
   123a2:	f008 fb87 	bl	1aab4 <printk>
	}

	return att_chan->att;
}
   123a6:	4620      	mov	r0, r4
   123a8:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   123aa:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
   123ae:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   123b2:	075b      	lsls	r3, r3, #29
   123b4:	d502      	bpl.n	123bc <att_get+0x3c>
		BT_WARN("ATT channel flagged as disconnected");
   123b6:	2157      	movs	r1, #87	; 0x57
   123b8:	4804      	ldr	r0, [pc, #16]	; (123cc <att_get+0x4c>)
   123ba:	e7e7      	b.n	1238c <att_get+0xc>
	return att_chan->att;
   123bc:	f850 4c08 	ldr.w	r4, [r0, #-8]
   123c0:	e7f1      	b.n	123a6 <att_get+0x26>
   123c2:	bf00      	nop
   123c4:	000220c0 	.word	0x000220c0
   123c8:	000220d3 	.word	0x000220d3
   123cc:	000220f3 	.word	0x000220f3

000123d0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   123d0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   123d2:	3808      	subs	r0, #8
   123d4:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   123d6:	a901      	add	r1, sp, #4
   123d8:	4802      	ldr	r0, [pc, #8]	; (123e4 <bt_att_released+0x14>)
   123da:	f005 fe91 	bl	18100 <k_mem_slab_free>
}
   123de:	b003      	add	sp, #12
   123e0:	f85d fb04 	ldr.w	pc, [sp], #4
   123e4:	200085fc 	.word	0x200085fc

000123e8 <find_type_cb>:
{
   123e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   123ec:	f642 0301 	movw	r3, #10241	; 0x2801
   123f0:	2500      	movs	r5, #0
{
   123f2:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   123f4:	f8d2 9000 	ldr.w	r9, [r2]
{
   123f8:	4607      	mov	r7, r0
   123fa:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   123fc:	6800      	ldr	r0, [r0, #0]
   123fe:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   12400:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   12404:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   12406:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1240a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1240e:	f009 fe0a 	bl	1c026 <bt_uuid_cmp>
   12412:	2800      	cmp	r0, #0
   12414:	d060      	beq.n	124d8 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   12416:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1241a:	6838      	ldr	r0, [r7, #0]
   1241c:	a90b      	add	r1, sp, #44	; 0x2c
   1241e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   12422:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   12426:	f009 fdfe 	bl	1c026 <bt_uuid_cmp>
   1242a:	b138      	cbz	r0, 1243c <find_type_cb+0x54>
		if (data->group &&
   1242c:	68a3      	ldr	r3, [r4, #8]
   1242e:	b11b      	cbz	r3, 12438 <find_type_cb+0x50>
   12430:	885a      	ldrh	r2, [r3, #2]
   12432:	42b2      	cmp	r2, r6
   12434:	d200      	bcs.n	12438 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   12436:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   12438:	2001      	movs	r0, #1
   1243a:	e009      	b.n	12450 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1243c:	6861      	ldr	r1, [r4, #4]
   1243e:	4608      	mov	r0, r1
   12440:	f00a f906 	bl	1c650 <net_buf_frags_len>
   12444:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   12448:	1a1b      	subs	r3, r3, r0
   1244a:	2b03      	cmp	r3, #3
   1244c:	d803      	bhi.n	12456 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1244e:	2000      	movs	r0, #0
}
   12450:	b011      	add	sp, #68	; 0x44
   12452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   12456:	4608      	mov	r0, r1
   12458:	f003 fb12 	bl	15a80 <net_buf_frag_last>
   1245c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1245e:	6860      	ldr	r0, [r4, #4]
   12460:	f00a f8f6 	bl	1c650 <net_buf_frags_len>
   12464:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   12468:	f105 0b08 	add.w	fp, r5, #8
   1246c:	ebaa 0a00 	sub.w	sl, sl, r0
   12470:	4658      	mov	r0, fp
   12472:	f00b f899 	bl	1d5a8 <net_buf_simple_tailroom>
   12476:	4582      	cmp	sl, r0
   12478:	d231      	bcs.n	124de <find_type_cb+0xf6>
   1247a:	6860      	ldr	r0, [r4, #4]
   1247c:	f00a f8e8 	bl	1c650 <net_buf_frags_len>
   12480:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   12484:	1a18      	subs	r0, r3, r0
	if (!len) {
   12486:	b970      	cbnz	r0, 124a6 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   12488:	6863      	ldr	r3, [r4, #4]
   1248a:	7998      	ldrb	r0, [r3, #6]
   1248c:	f003 f91c 	bl	156c8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   12490:	2200      	movs	r2, #0
   12492:	2300      	movs	r3, #0
   12494:	f00b f862 	bl	1d55c <net_buf_alloc_fixed>
		if (!frag) {
   12498:	4605      	mov	r5, r0
   1249a:	2800      	cmp	r0, #0
   1249c:	d0d7      	beq.n	1244e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1249e:	4601      	mov	r1, r0
   124a0:	6860      	ldr	r0, [r4, #4]
   124a2:	f003 fb2d 	bl	15b00 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   124a6:	2300      	movs	r3, #0
   124a8:	9300      	str	r3, [sp, #0]
   124aa:	4639      	mov	r1, r7
   124ac:	f8d7 9004 	ldr.w	r9, [r7, #4]
   124b0:	2310      	movs	r3, #16
   124b2:	4640      	mov	r0, r8
   124b4:	aa02      	add	r2, sp, #8
   124b6:	47c8      	blx	r9
	if (read < 0) {
   124b8:	1e07      	subs	r7, r0, #0
   124ba:	db0d      	blt.n	124d8 <find_type_cb+0xf0>
	if (read != data->value_len) {
   124bc:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   124be:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   124c0:	42ba      	cmp	r2, r7
   124c2:	d02b      	beq.n	1251c <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   124c4:	4601      	mov	r1, r0
   124c6:	a80b      	add	r0, sp, #44	; 0x2c
   124c8:	f009 fddb 	bl	1c082 <bt_uuid_create>
   124cc:	b958      	cbnz	r0, 124e6 <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   124ce:	2157      	movs	r1, #87	; 0x57
   124d0:	7c22      	ldrb	r2, [r4, #16]
   124d2:	4814      	ldr	r0, [pc, #80]	; (12524 <find_type_cb+0x13c>)
			BT_WARN("Unable to create UUID: size %d", read);
   124d4:	f008 faee 	bl	1aab4 <printk>
	data->group = NULL;
   124d8:	2300      	movs	r3, #0
   124da:	60a3      	str	r3, [r4, #8]
   124dc:	e7ac      	b.n	12438 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   124de:	4658      	mov	r0, fp
   124e0:	f00b f862 	bl	1d5a8 <net_buf_simple_tailroom>
   124e4:	e7cf      	b.n	12486 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   124e6:	b2fa      	uxtb	r2, r7
   124e8:	a902      	add	r1, sp, #8
   124ea:	a806      	add	r0, sp, #24
   124ec:	f009 fdc9 	bl	1c082 <bt_uuid_create>
   124f0:	b918      	cbnz	r0, 124fa <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   124f2:	463a      	mov	r2, r7
   124f4:	2157      	movs	r1, #87	; 0x57
   124f6:	480c      	ldr	r0, [pc, #48]	; (12528 <find_type_cb+0x140>)
   124f8:	e7ec      	b.n	124d4 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   124fa:	a906      	add	r1, sp, #24
   124fc:	a80b      	add	r0, sp, #44	; 0x2c
   124fe:	f009 fd92 	bl	1c026 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   12502:	2800      	cmp	r0, #0
   12504:	d1e8      	bne.n	124d8 <find_type_cb+0xf0>
	data->err = 0x00;
   12506:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   12508:	2104      	movs	r1, #4
   1250a:	7463      	strb	r3, [r4, #17]
   1250c:	f105 0008 	add.w	r0, r5, #8
   12510:	f003 fb70 	bl	15bf4 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   12514:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   12516:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   12518:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1251a:	e78d      	b.n	12438 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   1251c:	a902      	add	r1, sp, #8
   1251e:	f009 fcfc 	bl	1bf1a <memcmp>
   12522:	e7ee      	b.n	12502 <find_type_cb+0x11a>
   12524:	0002211c 	.word	0x0002211c
   12528:	00022140 	.word	0x00022140

0001252c <chan_req_sent>:
	if (chan->req) {
   1252c:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   12530:	b13b      	cbz	r3, 12542 <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12532:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
   12536:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1253a:	2300      	movs	r3, #0
   1253c:	4801      	ldr	r0, [pc, #4]	; (12544 <chan_req_sent+0x18>)
   1253e:	f007 bb43 	b.w	19bc8 <k_delayed_work_submit_to_queue>
}
   12542:	4770      	bx	lr
   12544:	2000a540 	.word	0x2000a540

00012548 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   12548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1254a:	2300      	movs	r3, #0
{
   1254c:	4606      	mov	r6, r0
   1254e:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   12550:	2200      	movs	r2, #0
   12552:	4669      	mov	r1, sp
   12554:	4823      	ldr	r0, [pc, #140]	; (125e4 <bt_att_accept+0x9c>)
   12556:	f005 fd79 	bl	1804c <k_mem_slab_alloc>
   1255a:	4604      	mov	r4, r0
   1255c:	b148      	cbz	r0, 12572 <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   1255e:	4632      	mov	r2, r6
   12560:	2145      	movs	r1, #69	; 0x45
   12562:	4821      	ldr	r0, [pc, #132]	; (125e8 <bt_att_accept+0xa0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   12564:	f008 faa6 	bl	1aab4 <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   12568:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1256c:	4620      	mov	r0, r4
   1256e:	b003      	add	sp, #12
   12570:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   12572:	4601      	mov	r1, r0
   12574:	2230      	movs	r2, #48	; 0x30
   12576:	9800      	ldr	r0, [sp, #0]
   12578:	f009 fd0b 	bl	1bf92 <memset>
	att->conn = conn;
   1257c:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1257e:	2200      	movs	r2, #0
	list->head = NULL;
   12580:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   12584:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   12588:	60ac      	str	r4, [r5, #8]
   1258a:	2300      	movs	r3, #0
   1258c:	4817      	ldr	r0, [pc, #92]	; (125ec <bt_att_accept+0xa4>)
   1258e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   12590:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   12592:	f005 fd5b 	bl	1804c <k_mem_slab_alloc>
   12596:	4604      	mov	r4, r0
   12598:	b118      	cbz	r0, 125a2 <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1259a:	2145      	movs	r1, #69	; 0x45
   1259c:	682a      	ldr	r2, [r5, #0]
   1259e:	4814      	ldr	r0, [pc, #80]	; (125f0 <bt_att_accept+0xa8>)
   125a0:	e7e0      	b.n	12564 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   125a2:	4601      	mov	r1, r0
   125a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   125a8:	9801      	ldr	r0, [sp, #4]
   125aa:	f009 fcf2 	bl	1bf92 <memset>
	chan->chan.chan.ops = &ops;
   125ae:	9801      	ldr	r0, [sp, #4]
   125b0:	4b10      	ldr	r3, [pc, #64]	; (125f4 <bt_att_accept+0xac>)
   125b2:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   125b4:	30d0      	adds	r0, #208	; 0xd0
   125b6:	f00b fe2d 	bl	1e214 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   125ba:	9801      	ldr	r0, [sp, #4]
   125bc:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
   125c0:	2203      	movs	r2, #3
   125c2:	4611      	mov	r1, r2
   125c4:	f00b fe8b 	bl	1e2de <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   125c8:	9b01      	ldr	r3, [sp, #4]
   125ca:	33c8      	adds	r3, #200	; 0xc8
   125cc:	e8d3 2fef 	ldaex	r2, [r3]
   125d0:	e8c3 4fe1 	stlex	r1, r4, [r3]
   125d4:	2900      	cmp	r1, #0
   125d6:	d1f9      	bne.n	125cc <bt_att_accept+0x84>
	chan->att = att;
   125d8:	9b01      	ldr	r3, [sp, #4]
   125da:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   125de:	603b      	str	r3, [r7, #0]
	return 0;
   125e0:	e7c4      	b.n	1256c <bt_att_accept+0x24>
   125e2:	bf00      	nop
   125e4:	200085e0 	.word	0x200085e0
   125e8:	00022164 	.word	0x00022164
   125ec:	200085fc 	.word	0x200085fc
   125f0:	0002218e 	.word	0x0002218e
   125f4:	2000842c 	.word	0x2000842c

000125f8 <read_group_cb>:
{
   125f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   125fc:	f04f 0800 	mov.w	r8, #0
   12600:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   12604:	4605      	mov	r5, r0
   12606:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12608:	6800      	ldr	r0, [r0, #0]
   1260a:	a902      	add	r1, sp, #8
{
   1260c:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1260e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12610:	f88d 8008 	strb.w	r8, [sp, #8]
   12614:	f8ad 300a 	strh.w	r3, [sp, #10]
   12618:	f009 fd05 	bl	1c026 <bt_uuid_cmp>
   1261c:	b1a0      	cbz	r0, 12648 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1261e:	f642 0301 	movw	r3, #10241	; 0x2801
   12622:	6828      	ldr	r0, [r5, #0]
   12624:	a903      	add	r1, sp, #12
   12626:	f88d 800c 	strb.w	r8, [sp, #12]
   1262a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1262e:	f009 fcfa 	bl	1c026 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   12632:	b148      	cbz	r0, 12648 <read_group_cb+0x50>
		if (data->group &&
   12634:	6923      	ldr	r3, [r4, #16]
   12636:	b11b      	cbz	r3, 12640 <read_group_cb+0x48>
   12638:	885a      	ldrh	r2, [r3, #2]
   1263a:	42b2      	cmp	r2, r6
   1263c:	d200      	bcs.n	12640 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1263e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   12640:	2001      	movs	r0, #1
}
   12642:	b004      	add	sp, #16
   12644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12648:	6861      	ldr	r1, [r4, #4]
   1264a:	6828      	ldr	r0, [r5, #0]
   1264c:	f009 fceb 	bl	1c026 <bt_uuid_cmp>
   12650:	b110      	cbz	r0, 12658 <read_group_cb+0x60>
		data->group = NULL;
   12652:	2300      	movs	r3, #0
   12654:	6123      	str	r3, [r4, #16]
   12656:	e7f3      	b.n	12640 <read_group_cb+0x48>
	if (data->rsp->len &&
   12658:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1265a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1265c:	781a      	ldrb	r2, [r3, #0]
   1265e:	b13a      	cbz	r2, 12670 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   12660:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   12664:	8981      	ldrh	r1, [r0, #12]
   12666:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   12668:	4293      	cmp	r3, r2
   1266a:	da01      	bge.n	12670 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   1266c:	2000      	movs	r0, #0
   1266e:	e7e8      	b.n	12642 <read_group_cb+0x4a>
   12670:	2104      	movs	r1, #4
   12672:	3008      	adds	r0, #8
   12674:	f003 fabe 	bl	15bf4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   12678:	4b09      	ldr	r3, [pc, #36]	; (126a0 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1267a:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1267c:	4629      	mov	r1, r5
	data->group->start_handle = sys_cpu_to_le16(handle);
   1267e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   12680:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   12682:	68a2      	ldr	r2, [r4, #8]
   12684:	9300      	str	r3, [sp, #0]
   12686:	4638      	mov	r0, r7
   12688:	2300      	movs	r3, #0
   1268a:	9401      	str	r4, [sp, #4]
   1268c:	f00a f8db 	bl	1c846 <att_chan_read>
	if (read < 0) {
   12690:	2800      	cmp	r0, #0
   12692:	dbeb      	blt.n	1266c <read_group_cb+0x74>
	if (!data->group) {
   12694:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   12696:	3800      	subs	r0, #0
   12698:	bf18      	it	ne
   1269a:	2001      	movne	r0, #1
   1269c:	e7d1      	b.n	12642 <read_group_cb+0x4a>
   1269e:	bf00      	nop
   126a0:	0001c7cb 	.word	0x0001c7cb

000126a4 <chan_send>:
{
   126a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   126a8:	688b      	ldr	r3, [r1, #8]
{
   126aa:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   126ac:	781b      	ldrb	r3, [r3, #0]
{
   126ae:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   126b0:	2bd2      	cmp	r3, #210	; 0xd2
{
   126b2:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   126b4:	d110      	bne.n	126d8 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
   126b6:	6803      	ldr	r3, [r0, #0]
   126b8:	6818      	ldr	r0, [r3, #0]
   126ba:	f00a ff49 	bl	1d550 <bt_smp_sign>
		if (err) {
   126be:	4606      	mov	r6, r0
   126c0:	b150      	cbz	r0, 126d8 <chan_send+0x34>
			BT_ERR("Error signing data");
   126c2:	2145      	movs	r1, #69	; 0x45
   126c4:	4824      	ldr	r0, [pc, #144]	; (12758 <chan_send+0xb4>)
   126c6:	f008 f9f5 	bl	1aab4 <printk>
		net_buf_unref(buf);
   126ca:	4620      	mov	r0, r4
   126cc:	f003 f97c 	bl	159c8 <net_buf_unref>
}
   126d0:	4630      	mov	r0, r6
   126d2:	b003      	add	sp, #12
   126d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   126d8:	f104 0008 	add.w	r0, r4, #8
   126dc:	f00a ff60 	bl	1d5a0 <net_buf_simple_headroom>
	state->len = buf->len;
   126e0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   126e4:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   126e6:	f1b9 0f00 	cmp.w	r9, #0
   126ea:	d10a      	bne.n	12702 <chan_send+0x5e>
	switch (att_op_get_type(buf->data[0])) {
   126ec:	68a3      	ldr	r3, [r4, #8]
   126ee:	7818      	ldrb	r0, [r3, #0]
   126f0:	f009 ffce 	bl	1c690 <att_op_get_type>
   126f4:	1e43      	subs	r3, r0, #1
   126f6:	b2db      	uxtb	r3, r3
   126f8:	2b04      	cmp	r3, #4
   126fa:	bf9c      	itt	ls
   126fc:	4a17      	ldrls	r2, [pc, #92]	; (1275c <chan_send+0xb8>)
   126fe:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12702:	682b      	ldr	r3, [r5, #0]
   12704:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
   12706:	f8c5 9138 	str.w	r9, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1270a:	681e      	ldr	r6, [r3, #0]
   1270c:	f003 f9a0 	bl	15a50 <net_buf_ref>
   12710:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
   12714:	4b12      	ldr	r3, [pc, #72]	; (12760 <chan_send+0xbc>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12716:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   12718:	4299      	cmp	r1, r3
   1271a:	d019      	beq.n	12750 <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
   1271c:	4b11      	ldr	r3, [pc, #68]	; (12764 <chan_send+0xc0>)
   1271e:	4299      	cmp	r1, r3
   12720:	d018      	beq.n	12754 <chan_send+0xb0>
		return att_sent;
   12722:	f8df c044 	ldr.w	ip, [pc, #68]	; 12768 <chan_send+0xc4>
   12726:	4b11      	ldr	r3, [pc, #68]	; (1276c <chan_send+0xc8>)
   12728:	4811      	ldr	r0, [pc, #68]	; (12770 <chan_send+0xcc>)
   1272a:	4561      	cmp	r1, ip
   1272c:	bf18      	it	ne
   1272e:	4603      	movne	r3, r0
				&chan->chan.chan);
   12730:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   12732:	4630      	mov	r0, r6
   12734:	2104      	movs	r1, #4
   12736:	9500      	str	r5, [sp, #0]
   12738:	f009 ff2f 	bl	1c59a <bt_l2cap_send_cb>
	if (!err) {
   1273c:	4606      	mov	r6, r0
   1273e:	2800      	cmp	r0, #0
   12740:	d0c3      	beq.n	126ca <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
   12742:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   12744:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   12748:	fa10 f787 	uxtah	r7, r0, r7
   1274c:	60a7      	str	r7, [r4, #8]
}
   1274e:	e7bf      	b.n	126d0 <chan_send+0x2c>
		return att_rsp_sent;
   12750:	4b08      	ldr	r3, [pc, #32]	; (12774 <chan_send+0xd0>)
   12752:	e7ed      	b.n	12730 <chan_send+0x8c>
		return att_cfm_sent;
   12754:	4b08      	ldr	r3, [pc, #32]	; (12778 <chan_send+0xd4>)
   12756:	e7eb      	b.n	12730 <chan_send+0x8c>
   12758:	000221b8 	.word	0x000221b8
   1275c:	0001ef2c 	.word	0x0001ef2c
   12760:	0001ca5b 	.word	0x0001ca5b
   12764:	0001ca6f 	.word	0x0001ca6f
   12768:	0001252d 	.word	0x0001252d
   1276c:	00012371 	.word	0x00012371
   12770:	0001c661 	.word	0x0001c661
   12774:	00012361 	.word	0x00012361
   12778:	00012351 	.word	0x00012351

0001277c <bt_att_chan_req_send>:
{
   1277c:	b570      	push	{r4, r5, r6, lr}
   1277e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   12780:	4604      	mov	r4, r0
   12782:	b950      	cbnz	r0, 1279a <bt_att_chan_req_send+0x1e>
   12784:	4924      	ldr	r1, [pc, #144]	; (12818 <bt_att_chan_req_send+0x9c>)
   12786:	4825      	ldr	r0, [pc, #148]	; (1281c <bt_att_chan_req_send+0xa0>)
   12788:	f240 224f 	movw	r2, #591	; 0x24f
   1278c:	f008 f992 	bl	1aab4 <printk>
   12790:	f240 214f 	movw	r1, #591	; 0x24f
   12794:	4820      	ldr	r0, [pc, #128]	; (12818 <bt_att_chan_req_send+0x9c>)
   12796:	f008 fc33 	bl	1b000 <assert_post_action>
	__ASSERT_NO_MSG(req);
   1279a:	b955      	cbnz	r5, 127b2 <bt_att_chan_req_send+0x36>
   1279c:	491e      	ldr	r1, [pc, #120]	; (12818 <bt_att_chan_req_send+0x9c>)
   1279e:	481f      	ldr	r0, [pc, #124]	; (1281c <bt_att_chan_req_send+0xa0>)
   127a0:	f44f 7214 	mov.w	r2, #592	; 0x250
   127a4:	f008 f986 	bl	1aab4 <printk>
   127a8:	f44f 7114 	mov.w	r1, #592	; 0x250
   127ac:	481a      	ldr	r0, [pc, #104]	; (12818 <bt_att_chan_req_send+0x9c>)
   127ae:	f008 fc27 	bl	1b000 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   127b2:	686b      	ldr	r3, [r5, #4]
   127b4:	b953      	cbnz	r3, 127cc <bt_att_chan_req_send+0x50>
   127b6:	4918      	ldr	r1, [pc, #96]	; (12818 <bt_att_chan_req_send+0x9c>)
   127b8:	4818      	ldr	r0, [pc, #96]	; (1281c <bt_att_chan_req_send+0xa0>)
   127ba:	f240 2251 	movw	r2, #593	; 0x251
   127be:	f008 f979 	bl	1aab4 <printk>
   127c2:	f240 2151 	movw	r1, #593	; 0x251
   127c6:	4814      	ldr	r0, [pc, #80]	; (12818 <bt_att_chan_req_send+0x9c>)
   127c8:	f008 fc1a 	bl	1b000 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   127cc:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   127d0:	b153      	cbz	r3, 127e8 <bt_att_chan_req_send+0x6c>
   127d2:	4911      	ldr	r1, [pc, #68]	; (12818 <bt_att_chan_req_send+0x9c>)
   127d4:	4811      	ldr	r0, [pc, #68]	; (1281c <bt_att_chan_req_send+0xa0>)
   127d6:	f240 2252 	movw	r2, #594	; 0x252
   127da:	f008 f96b 	bl	1aab4 <printk>
   127de:	f240 2152 	movw	r1, #594	; 0x252
   127e2:	480d      	ldr	r0, [pc, #52]	; (12818 <bt_att_chan_req_send+0x9c>)
   127e4:	f008 fc0c 	bl	1b000 <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   127e8:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
   127ec:	2200      	movs	r2, #0
   127ee:	2300      	movs	r3, #0
   127f0:	4630      	mov	r0, r6
   127f2:	f006 ffc3 	bl	1977c <z_impl_k_sem_take>
   127f6:	2800      	cmp	r0, #0
   127f8:	db0a      	blt.n	12810 <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
   127fa:	4620      	mov	r0, r4
   127fc:	4629      	mov	r1, r5
   127fe:	f00a f906 	bl	1ca0e <chan_req_send>
	if (err < 0) {
   12802:	1e04      	subs	r4, r0, #0
   12804:	da02      	bge.n	1280c <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
   12806:	4630      	mov	r0, r6
   12808:	f006 ff7c 	bl	19704 <z_impl_k_sem_give>
}
   1280c:	4620      	mov	r0, r4
   1280e:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   12810:	f06f 040a 	mvn.w	r4, #10
   12814:	e7fa      	b.n	1280c <bt_att_chan_req_send+0x90>
   12816:	bf00      	nop
   12818:	000221d0 	.word	0x000221d0
   1281c:	0002003d 	.word	0x0002003d

00012820 <read_type_cb>:
{
   12820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   12824:	f8d2 8000 	ldr.w	r8, [r2]
{
   12828:	4606      	mov	r6, r0
   1282a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1282c:	6800      	ldr	r0, [r0, #0]
   1282e:	6851      	ldr	r1, [r2, #4]
{
   12830:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   12832:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12836:	f009 fbf6 	bl	1c026 <bt_uuid_cmp>
   1283a:	4607      	mov	r7, r0
   1283c:	2800      	cmp	r0, #0
   1283e:	d13e      	bne.n	128be <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   12840:	4628      	mov	r0, r5
   12842:	2215      	movs	r2, #21
   12844:	4631      	mov	r1, r6
   12846:	f00a fd7c 	bl	1d342 <bt_gatt_check_perm>
   1284a:	4605      	mov	r5, r0
   1284c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1284e:	b148      	cbz	r0, 12864 <read_type_cb+0x44>
		if (data->rsp->len) {
   12850:	68e3      	ldr	r3, [r4, #12]
   12852:	781b      	ldrb	r3, [r3, #0]
   12854:	b923      	cbnz	r3, 12860 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   12856:	2500      	movs	r5, #0
}
   12858:	4628      	mov	r0, r5
   1285a:	b003      	add	sp, #12
   1285c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   12860:	7527      	strb	r7, [r4, #20]
   12862:	e7f8      	b.n	12856 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   12864:	68a0      	ldr	r0, [r4, #8]
   12866:	f003 f90b 	bl	15a80 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   1286a:	2102      	movs	r1, #2
   1286c:	3008      	adds	r0, #8
   1286e:	f003 f9c1 	bl	15bf4 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   12872:	4b14      	ldr	r3, [pc, #80]	; (128c4 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   12874:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   12876:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   12878:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1287c:	68a2      	ldr	r2, [r4, #8]
   1287e:	9300      	str	r3, [sp, #0]
   12880:	4640      	mov	r0, r8
   12882:	462b      	mov	r3, r5
   12884:	9401      	str	r4, [sp, #4]
   12886:	f009 ffde 	bl	1c846 <att_chan_read>
	if (read < 0) {
   1288a:	2800      	cmp	r0, #0
   1288c:	da07      	bge.n	1289e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1288e:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   12892:	bf32      	itee	cc
   12894:	200e      	movcc	r0, #14
		return -err;
   12896:	4240      	negcs	r0, r0
   12898:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   1289a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1289c:	e7dc      	b.n	12858 <read_type_cb+0x38>
	if (!data->item) {
   1289e:	6923      	ldr	r3, [r4, #16]
   128a0:	2b00      	cmp	r3, #0
   128a2:	d0d8      	beq.n	12856 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   128a4:	68a0      	ldr	r0, [r4, #8]
   128a6:	f009 fed3 	bl	1c650 <net_buf_frags_len>
   128aa:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   128ae:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   128b0:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   128b2:	7818      	ldrb	r0, [r3, #0]
   128b4:	4285      	cmp	r5, r0
   128b6:	bf94      	ite	ls
   128b8:	2500      	movls	r5, #0
   128ba:	2501      	movhi	r5, #1
   128bc:	e7cc      	b.n	12858 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   128be:	2501      	movs	r5, #1
   128c0:	e7ca      	b.n	12858 <read_type_cb+0x38>
   128c2:	bf00      	nop
   128c4:	0001c66d 	.word	0x0001c66d

000128c8 <bt_att_connected>:
{
   128c8:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   128ca:	2104      	movs	r1, #4
{
   128cc:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   128ce:	6800      	ldr	r0, [r0, #0]
   128d0:	f009 fe93 	bl	1c5fa <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   128d4:	4605      	mov	r5, r0
   128d6:	b950      	cbnz	r0, 128ee <bt_att_connected+0x26>
   128d8:	4919      	ldr	r1, [pc, #100]	; (12940 <bt_att_connected+0x78>)
   128da:	481a      	ldr	r0, [pc, #104]	; (12944 <bt_att_connected+0x7c>)
   128dc:	f44f 6226 	mov.w	r2, #2656	; 0xa60
   128e0:	f008 f8e8 	bl	1aab4 <printk>
   128e4:	f44f 6126 	mov.w	r1, #2656	; 0xa60
   128e8:	4815      	ldr	r0, [pc, #84]	; (12940 <bt_att_connected+0x78>)
   128ea:	f008 fb89 	bl	1b000 <assert_post_action>
	struct bt_att *att = att_chan->att;
   128ee:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   128f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   128f4:	b91b      	cbnz	r3, 128fe <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
   128f6:	f105 000c 	add.w	r0, r5, #12
   128fa:	f00b fc8b 	bl	1e214 <z_impl_k_queue_init>
	parent->next = child;
   128fe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   12900:	f504 739a 	add.w	r3, r4, #308	; 0x134
   12904:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
   12908:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   1290a:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   1290c:	b902      	cbnz	r2, 12910 <bt_att_connected+0x48>
	list->tail = node;
   1290e:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12910:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   12914:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   12918:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1291a:	bf58      	it	pl
   1291c:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1291e:	f04f 0230 	mov.w	r2, #48	; 0x30
   12922:	bf5c      	itt	pl
   12924:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   12928:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
   1292c:	2100      	movs	r1, #0
   1292e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   12932:	f009 fb2e 	bl	1bf92 <memset>
   12936:	4b04      	ldr	r3, [pc, #16]	; (12948 <bt_att_connected+0x80>)
   12938:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   1293c:	bd38      	pop	{r3, r4, r5, pc}
   1293e:	bf00      	nop
   12940:	000221d0 	.word	0x000221d0
   12944:	0002003d 	.word	0x0002003d
   12948:	00013255 	.word	0x00013255

0001294c <bt_att_chan_create_pdu>:
{
   1294c:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1294e:	1c53      	adds	r3, r2, #1
   12950:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
{
   12954:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   12956:	4293      	cmp	r3, r2
   12958:	d906      	bls.n	12968 <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1295a:	2157      	movs	r1, #87	; 0x57
   1295c:	4813      	ldr	r0, [pc, #76]	; (129ac <bt_att_chan_create_pdu+0x60>)
   1295e:	f008 f8a9 	bl	1aab4 <printk>
		return NULL;
   12962:	2400      	movs	r4, #0
}
   12964:	4620      	mov	r0, r4
   12966:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   12968:	4608      	mov	r0, r1
   1296a:	f009 fe91 	bl	1c690 <att_op_get_type>
   1296e:	2802      	cmp	r0, #2
   12970:	d001      	beq.n	12976 <bt_att_chan_create_pdu+0x2a>
   12972:	2804      	cmp	r0, #4
   12974:	d10e      	bne.n	12994 <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   12976:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1297a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1297c:	2100      	movs	r1, #0
   1297e:	4608      	mov	r0, r1
   12980:	f009 fe08 	bl	1c594 <bt_l2cap_create_pdu_timeout>
   12984:	4604      	mov	r4, r0
	if (!buf) {
   12986:	b950      	cbnz	r0, 1299e <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   12988:	462a      	mov	r2, r5
   1298a:	2145      	movs	r1, #69	; 0x45
   1298c:	4808      	ldr	r0, [pc, #32]	; (129b0 <bt_att_chan_create_pdu+0x64>)
   1298e:	f008 f891 	bl	1aab4 <printk>
		return NULL;
   12992:	e7e7      	b.n	12964 <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
   12994:	f04f 32ff 	mov.w	r2, #4294967295
   12998:	f04f 33ff 	mov.w	r3, #4294967295
   1299c:	e7ee      	b.n	1297c <bt_att_chan_create_pdu+0x30>
   1299e:	2101      	movs	r1, #1
   129a0:	3008      	adds	r0, #8
   129a2:	f003 f927 	bl	15bf4 <net_buf_simple_add>
	hdr->code = op;
   129a6:	7005      	strb	r5, [r0, #0]
	return buf;
   129a8:	e7dc      	b.n	12964 <bt_att_chan_create_pdu+0x18>
   129aa:	bf00      	nop
   129ac:	000221ff 	.word	0x000221ff
   129b0:	00021f16 	.word	0x00021f16

000129b4 <att_indicate>:
{
   129b4:	b570      	push	{r4, r5, r6, lr}
   129b6:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   129b8:	f101 0008 	add.w	r0, r1, #8
   129bc:	460d      	mov	r5, r1
   129be:	f00a fde7 	bl	1d590 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   129c2:	6826      	ldr	r6, [r4, #0]
   129c4:	4601      	mov	r1, r0
   129c6:	89ab      	ldrh	r3, [r5, #12]
   129c8:	68aa      	ldr	r2, [r5, #8]
   129ca:	6830      	ldr	r0, [r6, #0]
   129cc:	f00a fd48 	bl	1d460 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   129d0:	211e      	movs	r1, #30
   129d2:	2200      	movs	r2, #0
   129d4:	4620      	mov	r0, r4
   129d6:	f7ff ffb9 	bl	1294c <bt_att_chan_create_pdu>
	if (!buf) {
   129da:	4601      	mov	r1, r0
   129dc:	b118      	cbz	r0, 129e6 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   129de:	4620      	mov	r0, r4
   129e0:	4a02      	ldr	r2, [pc, #8]	; (129ec <att_indicate+0x38>)
   129e2:	f009 ffd2 	bl	1c98a <bt_att_chan_send_rsp>
}
   129e6:	2000      	movs	r0, #0
   129e8:	bd70      	pop	{r4, r5, r6, pc}
   129ea:	bf00      	nop
   129ec:	0001ca6f 	.word	0x0001ca6f

000129f0 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   129f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   129f4:	4688      	mov	r8, r1
   129f6:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   129f8:	2101      	movs	r1, #1
   129fa:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   129fc:	4605      	mov	r5, r0
   129fe:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   12a00:	f7ff ffa4 	bl	1294c <bt_att_chan_create_pdu>
	if (!buf) {
   12a04:	4604      	mov	r4, r0
   12a06:	b178      	cbz	r0, 12a28 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   12a08:	2104      	movs	r1, #4
   12a0a:	3008      	adds	r0, #8
   12a0c:	f003 f8f2 	bl	15bf4 <net_buf_simple_add>
	rsp->request = req;
   12a10:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   12a14:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   12a16:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   12a1a:	4621      	mov	r1, r4
   12a1c:	4628      	mov	r0, r5
}
   12a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   12a22:	4a02      	ldr	r2, [pc, #8]	; (12a2c <send_err_rsp.part.0+0x3c>)
   12a24:	f009 bfb1 	b.w	1c98a <bt_att_chan_send_rsp>
}
   12a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12a2c:	0001ca5b 	.word	0x0001ca5b

00012a30 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   12a30:	898b      	ldrh	r3, [r1, #12]
{
   12a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a36:	4604      	mov	r4, r0
   12a38:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   12a3a:	b933      	cbnz	r3, 12a4a <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   12a3c:	2145      	movs	r1, #69	; 0x45
   12a3e:	4838      	ldr	r0, [pc, #224]	; (12b20 <bt_att_recv+0xf0>)
			BT_WARN("Ignoring unexpected indication");
   12a40:	f008 f838 	bl	1aab4 <printk>
}
   12a44:	2000      	movs	r0, #0
   12a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   12a4a:	2101      	movs	r1, #1
   12a4c:	f108 0008 	add.w	r0, r8, #8
   12a50:	f003 f8b2 	bl	15bb8 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   12a54:	f854 3c08 	ldr.w	r3, [r4, #-8]
   12a58:	4605      	mov	r5, r0
   12a5a:	2b00      	cmp	r3, #0
   12a5c:	d0f2      	beq.n	12a44 <bt_att_recv+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   12a5e:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   12a60:	7802      	ldrb	r2, [r0, #0]
   12a62:	4930      	ldr	r1, [pc, #192]	; (12b24 <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   12a64:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   12a68:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
   12a6c:	4290      	cmp	r0, r2
   12a6e:	d114      	bne.n	12a9a <bt_att_recv+0x6a>
		if (handler->type == ATT_REQUEST &&
   12a70:	00d8      	lsls	r0, r3, #3
   12a72:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   12a76:	789f      	ldrb	r7, [r3, #2]
   12a78:	2f01      	cmp	r7, #1
   12a7a:	d123      	bne.n	12ac4 <bt_att_recv+0x94>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12a7c:	34c0      	adds	r4, #192	; 0xc0
   12a7e:	e8d4 3fef 	ldaex	r3, [r4]
   12a82:	f043 0201 	orr.w	r2, r3, #1
   12a86:	e8c4 2fec 	stlex	ip, r2, [r4]
   12a8a:	f1bc 0f00 	cmp.w	ip, #0
   12a8e:	d1f6      	bne.n	12a7e <bt_att_recv+0x4e>
   12a90:	07da      	lsls	r2, r3, #31
   12a92:	d528      	bpl.n	12ae6 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected request");
   12a94:	2157      	movs	r1, #87	; 0x57
   12a96:	4824      	ldr	r0, [pc, #144]	; (12b28 <bt_att_recv+0xf8>)
   12a98:	e7d2      	b.n	12a40 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   12a9a:	3301      	adds	r3, #1
   12a9c:	2b1c      	cmp	r3, #28
   12a9e:	d1e3      	bne.n	12a68 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   12aa0:	2157      	movs	r1, #87	; 0x57
   12aa2:	4822      	ldr	r0, [pc, #136]	; (12b2c <bt_att_recv+0xfc>)
   12aa4:	f008 f806 	bl	1aab4 <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   12aa8:	7829      	ldrb	r1, [r5, #0]
   12aaa:	4608      	mov	r0, r1
   12aac:	f009 fdf0 	bl	1c690 <att_op_get_type>
   12ab0:	2800      	cmp	r0, #0
   12ab2:	d0c7      	beq.n	12a44 <bt_att_recv+0x14>
	if (!req) {
   12ab4:	2900      	cmp	r1, #0
   12ab6:	d0c5      	beq.n	12a44 <bt_att_recv+0x14>
   12ab8:	2306      	movs	r3, #6
   12aba:	2200      	movs	r2, #0
   12abc:	4630      	mov	r0, r6
   12abe:	f7ff ff97 	bl	129f0 <send_err_rsp.part.0>
   12ac2:	e7bf      	b.n	12a44 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   12ac4:	2f05      	cmp	r7, #5
   12ac6:	d10e      	bne.n	12ae6 <bt_att_recv+0xb6>
   12ac8:	34c0      	adds	r4, #192	; 0xc0
   12aca:	e8d4 3fef 	ldaex	r3, [r4]
   12ace:	f043 0202 	orr.w	r2, r3, #2
   12ad2:	e8c4 2fec 	stlex	ip, r2, [r4]
   12ad6:	f1bc 0f00 	cmp.w	ip, #0
   12ada:	d1f6      	bne.n	12aca <bt_att_recv+0x9a>
   12adc:	079b      	lsls	r3, r3, #30
   12ade:	d502      	bpl.n	12ae6 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected indication");
   12ae0:	2157      	movs	r1, #87	; 0x57
   12ae2:	4813      	ldr	r0, [pc, #76]	; (12b30 <bt_att_recv+0x100>)
   12ae4:	e7ac      	b.n	12a40 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   12ae6:	180b      	adds	r3, r1, r0
   12ae8:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   12aec:	7859      	ldrb	r1, [r3, #1]
   12aee:	4291      	cmp	r1, r2
   12af0:	d908      	bls.n	12b04 <bt_att_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   12af2:	2145      	movs	r1, #69	; 0x45
   12af4:	782b      	ldrb	r3, [r5, #0]
   12af6:	480f      	ldr	r0, [pc, #60]	; (12b34 <bt_att_recv+0x104>)
   12af8:	f007 ffdc 	bl	1aab4 <printk>
	if (handler->type == ATT_REQUEST && err) {
   12afc:	2f01      	cmp	r7, #1
   12afe:	d1a1      	bne.n	12a44 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   12b00:	2304      	movs	r3, #4
   12b02:	e008      	b.n	12b16 <bt_att_recv+0xe6>
		err = handler->func(att_chan, buf);
   12b04:	685b      	ldr	r3, [r3, #4]
   12b06:	4641      	mov	r1, r8
   12b08:	4630      	mov	r0, r6
   12b0a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   12b0c:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   12b0e:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   12b10:	d198      	bne.n	12a44 <bt_att_recv+0x14>
   12b12:	2800      	cmp	r0, #0
   12b14:	d096      	beq.n	12a44 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   12b16:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   12b18:	2900      	cmp	r1, #0
   12b1a:	d093      	beq.n	12a44 <bt_att_recv+0x14>
   12b1c:	e7cd      	b.n	12aba <bt_att_recv+0x8a>
   12b1e:	bf00      	nop
   12b20:	00022229 	.word	0x00022229
   12b24:	0001ef40 	.word	0x0001ef40
   12b28:	00022249 	.word	0x00022249
   12b2c:	000222b2 	.word	0x000222b2
   12b30:	0002226a 	.word	0x0002226a
   12b34:	0002228e 	.word	0x0002228e

00012b38 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12b3c:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12b3e:	6803      	ldr	r3, [r0, #0]
   12b40:	460e      	mov	r6, r1
   12b42:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12b44:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12b46:	bf18      	it	ne
   12b48:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12b4a:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12b4c:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12b4e:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12b50:	f00a fcb1 	bl	1d4b6 <bt_gatt_change_aware>
   12b54:	2800      	cmp	r0, #0
   12b56:	d04b      	beq.n	12bf0 <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   12b58:	2f00      	cmp	r7, #0
   12b5a:	d04b      	beq.n	12bf4 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   12b5c:	2218      	movs	r2, #24
   12b5e:	2100      	movs	r1, #0
   12b60:	4668      	mov	r0, sp
   12b62:	f009 fa16 	bl	1bf92 <memset>
	if (rsp) {
   12b66:	f1b8 0f00 	cmp.w	r8, #0
   12b6a:	d122      	bne.n	12bb2 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   12b6c:	682b      	ldr	r3, [r5, #0]
	data.offset = offset;
   12b6e:	f04f 0900 	mov.w	r9, #0
	data.conn = chan->att->conn;
   12b72:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12b74:	4639      	mov	r1, r7
	data.conn = chan->att->conn;
   12b76:	9300      	str	r3, [sp, #0]
	data.value = value;
   12b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12b7a:	4638      	mov	r0, r7
	data.value = value;
   12b7c:	9303      	str	r3, [sp, #12]
	data.len = len;
   12b7e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12b82:	4a1d      	ldr	r2, [pc, #116]	; (12bf8 <att_write_rsp.constprop.0+0xc0>)
	data.len = len;
   12b84:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12b88:	2301      	movs	r3, #1
   12b8a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12b8e:	466b      	mov	r3, sp
	data.req = req;
   12b90:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   12b94:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12b98:	f009 fdc0 	bl	1c71c <bt_gatt_foreach_attr>
	if (data.err) {
   12b9c:	f89d 4014 	ldrb.w	r4, [sp, #20]
   12ba0:	b1f4      	cbz	r4, 12be0 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   12ba2:	f1b8 0f00 	cmp.w	r8, #0
   12ba6:	d10e      	bne.n	12bc6 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   12ba8:	2400      	movs	r4, #0
}
   12baa:	4620      	mov	r0, r4
   12bac:	b007      	add	sp, #28
   12bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   12bb2:	2200      	movs	r2, #0
   12bb4:	4641      	mov	r1, r8
   12bb6:	4628      	mov	r0, r5
   12bb8:	f7ff fec8 	bl	1294c <bt_att_chan_create_pdu>
   12bbc:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   12bbe:	2800      	cmp	r0, #0
   12bc0:	d1d4      	bne.n	12b6c <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   12bc2:	240e      	movs	r4, #14
   12bc4:	e7f1      	b.n	12baa <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   12bc6:	9801      	ldr	r0, [sp, #4]
   12bc8:	f002 fefe 	bl	159c8 <net_buf_unref>
	if (!req) {
   12bcc:	2e00      	cmp	r6, #0
   12bce:	d0eb      	beq.n	12ba8 <att_write_rsp.constprop.0+0x70>
   12bd0:	463a      	mov	r2, r7
   12bd2:	4631      	mov	r1, r6
   12bd4:	4628      	mov	r0, r5
   12bd6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12bda:	f7ff ff09 	bl	129f0 <send_err_rsp.part.0>
   12bde:	e7e3      	b.n	12ba8 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   12be0:	9901      	ldr	r1, [sp, #4]
   12be2:	2900      	cmp	r1, #0
   12be4:	d0e0      	beq.n	12ba8 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12be6:	4628      	mov	r0, r5
   12be8:	4a04      	ldr	r2, [pc, #16]	; (12bfc <att_write_rsp.constprop.0+0xc4>)
   12bea:	f009 fece 	bl	1c98a <bt_att_chan_send_rsp>
   12bee:	e7dc      	b.n	12baa <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12bf0:	2412      	movs	r4, #18
   12bf2:	e7da      	b.n	12baa <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   12bf4:	2401      	movs	r4, #1
   12bf6:	e7d8      	b.n	12baa <att_write_rsp.constprop.0+0x72>
   12bf8:	0001c7eb 	.word	0x0001c7eb
   12bfc:	0001ca5b 	.word	0x0001ca5b

00012c00 <bt_att_create_pdu>:
{
   12c00:	b570      	push	{r4, r5, r6, lr}
   12c02:	460e      	mov	r6, r1
   12c04:	4615      	mov	r5, r2
	att = att_get(conn);
   12c06:	f7ff fbbb 	bl	12380 <att_get>
	if (!att) {
   12c0a:	b190      	cbz	r0, 12c32 <bt_att_create_pdu+0x32>
	return list->head;
   12c0c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   12c0e:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12c10:	b15b      	cbz	r3, 12c2a <bt_att_create_pdu+0x2a>
   12c12:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   12c16:	d008      	beq.n	12c2a <bt_att_create_pdu+0x2a>
	return node->next;
   12c18:	681b      	ldr	r3, [r3, #0]
   12c1a:	b10b      	cbz	r3, 12c20 <bt_att_create_pdu+0x20>
   12c1c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   12c20:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   12c24:	428a      	cmp	r2, r1
   12c26:	d906      	bls.n	12c36 <bt_att_create_pdu+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12c28:	b95b      	cbnz	r3, 12c42 <bt_att_create_pdu+0x42>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   12c2a:	2157      	movs	r1, #87	; 0x57
   12c2c:	480a      	ldr	r0, [pc, #40]	; (12c58 <bt_att_create_pdu+0x58>)
   12c2e:	f007 ff41 	bl	1aab4 <printk>
}
   12c32:	2000      	movs	r0, #0
   12c34:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   12c36:	462a      	mov	r2, r5
   12c38:	4631      	mov	r1, r6
}
   12c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   12c3e:	f7ff be85 	b.w	1294c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12c42:	f513 749e 	adds.w	r4, r3, #316	; 0x13c
   12c46:	d004      	beq.n	12c52 <bt_att_create_pdu+0x52>
	return node->next;
   12c48:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12c4c:	b10c      	cbz	r4, 12c52 <bt_att_create_pdu+0x52>
   12c4e:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
   12c52:	4618      	mov	r0, r3
   12c54:	4623      	mov	r3, r4
   12c56:	e7e3      	b.n	12c20 <bt_att_create_pdu+0x20>
   12c58:	000222d1 	.word	0x000222d1

00012c5c <att_read_group_req>:
{
   12c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12c60:	898c      	ldrh	r4, [r1, #12]
{
   12c62:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12c64:	3c04      	subs	r4, #4
   12c66:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12c68:	2c02      	cmp	r4, #2
{
   12c6a:	4608      	mov	r0, r1
   12c6c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12c6e:	d001      	beq.n	12c74 <att_read_group_req+0x18>
   12c70:	2c10      	cmp	r4, #16
   12c72:	d16f      	bne.n	12d54 <att_read_group_req+0xf8>
   12c74:	2104      	movs	r1, #4
   12c76:	3008      	adds	r0, #8
   12c78:	f002 ff9e 	bl	15bb8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12c7c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   12c80:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12c82:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12c84:	1d01      	adds	r1, r0, #4
   12c86:	4622      	mov	r2, r4
   12c88:	4640      	mov	r0, r8
   12c8a:	f009 f9fa 	bl	1c082 <bt_uuid_create>
   12c8e:	2800      	cmp	r0, #0
   12c90:	d062      	beq.n	12d58 <att_read_group_req+0xfc>
	if (!start || !end) {
   12c92:	2e00      	cmp	r6, #0
   12c94:	d03a      	beq.n	12d0c <att_read_group_req+0xb0>
   12c96:	2400      	movs	r4, #0
   12c98:	2f00      	cmp	r7, #0
   12c9a:	d036      	beq.n	12d0a <att_read_group_req+0xae>
	if (start > end) {
   12c9c:	42be      	cmp	r6, r7
   12c9e:	d835      	bhi.n	12d0c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12ca0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12ca4:	4640      	mov	r0, r8
   12ca6:	a901      	add	r1, sp, #4
   12ca8:	f88d 4004 	strb.w	r4, [sp, #4]
   12cac:	f8ad 3006 	strh.w	r3, [sp, #6]
   12cb0:	f009 f9b9 	bl	1c026 <bt_uuid_cmp>
   12cb4:	2800      	cmp	r0, #0
   12cb6:	d134      	bne.n	12d22 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   12cb8:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12cba:	2214      	movs	r2, #20
   12cbc:	2100      	movs	r1, #0
   12cbe:	a807      	add	r0, sp, #28
   12cc0:	f009 f967 	bl	1bf92 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   12cc4:	2201      	movs	r2, #1
   12cc6:	2111      	movs	r1, #17
   12cc8:	4620      	mov	r0, r4
   12cca:	f7ff ff99 	bl	12c00 <bt_att_create_pdu>
   12cce:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   12cd0:	2800      	cmp	r0, #0
   12cd2:	d041      	beq.n	12d58 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   12cd4:	2101      	movs	r1, #1
   12cd6:	3008      	adds	r0, #8
	data.uuid = uuid;
   12cd8:	e9cd 5807 	strd	r5, r8, [sp, #28]
   12cdc:	f002 ff8a 	bl	15bf4 <net_buf_simple_add>
	data.rsp->len = 0U;
   12ce0:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12ce4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12ce6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   12ce8:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12cec:	4639      	mov	r1, r7
   12cee:	4630      	mov	r0, r6
   12cf0:	4a1a      	ldr	r2, [pc, #104]	; (12d5c <att_read_group_req+0x100>)
	data.group = NULL;
   12cf2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   12cf6:	f009 fd11 	bl	1c71c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   12cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12cfc:	781c      	ldrb	r4, [r3, #0]
   12cfe:	bb1c      	cbnz	r4, 12d48 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   12d00:	9809      	ldr	r0, [sp, #36]	; 0x24
   12d02:	f002 fe61 	bl	159c8 <net_buf_unref>
	if (!req) {
   12d06:	230a      	movs	r3, #10
   12d08:	e018      	b.n	12d3c <att_read_group_req+0xe0>
			*err = 0U;
   12d0a:	463e      	mov	r6, r7
	if (!req) {
   12d0c:	2301      	movs	r3, #1
   12d0e:	4632      	mov	r2, r6
   12d10:	2110      	movs	r1, #16
   12d12:	4628      	mov	r0, r5
   12d14:	f7ff fe6c 	bl	129f0 <send_err_rsp.part.0>
		return 0;
   12d18:	2400      	movs	r4, #0
}
   12d1a:	4620      	mov	r0, r4
   12d1c:	b00c      	add	sp, #48	; 0x30
   12d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   12d22:	f642 0301 	movw	r3, #10241	; 0x2801
   12d26:	4640      	mov	r0, r8
   12d28:	a907      	add	r1, sp, #28
   12d2a:	f88d 401c 	strb.w	r4, [sp, #28]
   12d2e:	f8ad 301e 	strh.w	r3, [sp, #30]
   12d32:	f009 f978 	bl	1c026 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12d36:	2800      	cmp	r0, #0
   12d38:	d0be      	beq.n	12cb8 <att_read_group_req+0x5c>
	if (!req) {
   12d3a:	2310      	movs	r3, #16
   12d3c:	4632      	mov	r2, r6
   12d3e:	2110      	movs	r1, #16
   12d40:	4628      	mov	r0, r5
   12d42:	f7ff fe55 	bl	129f0 <send_err_rsp.part.0>
		return 0;
   12d46:	e7e8      	b.n	12d1a <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12d48:	4628      	mov	r0, r5
   12d4a:	4a05      	ldr	r2, [pc, #20]	; (12d60 <att_read_group_req+0x104>)
   12d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
   12d4e:	f009 fe1c 	bl	1c98a <bt_att_chan_send_rsp>
	return 0;
   12d52:	e7e1      	b.n	12d18 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   12d54:	2404      	movs	r4, #4
   12d56:	e7e0      	b.n	12d1a <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   12d58:	240e      	movs	r4, #14
   12d5a:	e7de      	b.n	12d1a <att_read_group_req+0xbe>
   12d5c:	000125f9 	.word	0x000125f9
   12d60:	0001ca5b 	.word	0x0001ca5b

00012d64 <att_read_mult_req>:
{
   12d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12d68:	6886      	ldr	r6, [r0, #8]
{
   12d6a:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   12d6c:	2210      	movs	r2, #16
{
   12d6e:	4604      	mov	r4, r0
   12d70:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   12d72:	4668      	mov	r0, sp
   12d74:	2100      	movs	r1, #0
   12d76:	f009 f90c 	bl	1bf92 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   12d7a:	2200      	movs	r2, #0
   12d7c:	210f      	movs	r1, #15
   12d7e:	4630      	mov	r0, r6
   12d80:	f7ff ff3e 	bl	12c00 <bt_att_create_pdu>
   12d84:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12d86:	b360      	cbz	r0, 12de2 <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12d88:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12d8c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 12de8 <att_read_mult_req+0x84>
	data.chan = chan;
   12d90:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   12d92:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   12d96:	89ab      	ldrh	r3, [r5, #12]
   12d98:	2b01      	cmp	r3, #1
   12d9a:	d805      	bhi.n	12da8 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12d9c:	4620      	mov	r0, r4
   12d9e:	4a13      	ldr	r2, [pc, #76]	; (12dec <att_read_mult_req+0x88>)
   12da0:	9902      	ldr	r1, [sp, #8]
   12da2:	f009 fdf2 	bl	1c98a <bt_att_chan_send_rsp>
   12da6:	e018      	b.n	12dda <att_read_mult_req+0x76>
   12da8:	4638      	mov	r0, r7
   12daa:	f00a fbf1 	bl	1d590 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12dae:	466b      	mov	r3, sp
   12db0:	464a      	mov	r2, r9
   12db2:	4601      	mov	r1, r0
   12db4:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12db6:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12dba:	f009 fcaf 	bl	1c71c <bt_gatt_foreach_attr>
		if (data.err) {
   12dbe:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12dc2:	2b00      	cmp	r3, #0
   12dc4:	d0e7      	beq.n	12d96 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   12dc6:	9802      	ldr	r0, [sp, #8]
   12dc8:	f002 fdfe 	bl	159c8 <net_buf_unref>
	if (!req) {
   12dcc:	4632      	mov	r2, r6
   12dce:	210e      	movs	r1, #14
   12dd0:	4620      	mov	r0, r4
   12dd2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12dd6:	f7ff fe0b 	bl	129f0 <send_err_rsp.part.0>
	return 0;
   12dda:	2000      	movs	r0, #0
}
   12ddc:	b005      	add	sp, #20
   12dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   12de2:	200e      	movs	r0, #14
   12de4:	e7fa      	b.n	12ddc <att_read_mult_req+0x78>
   12de6:	bf00      	nop
   12de8:	0001ca83 	.word	0x0001ca83
   12dec:	0001ca5b 	.word	0x0001ca5b

00012df0 <att_read_rsp>:
{
   12df0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12df4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   12df8:	4605      	mov	r5, r0
   12dfa:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   12dfc:	4640      	mov	r0, r8
   12dfe:	2101      	movs	r1, #1
{
   12e00:	4614      	mov	r4, r2
   12e02:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   12e04:	f00a fb57 	bl	1d4b6 <bt_gatt_change_aware>
   12e08:	b390      	cbz	r0, 12e70 <att_read_rsp+0x80>
	if (!handle) {
   12e0a:	b39e      	cbz	r6, 12e74 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   12e0c:	2210      	movs	r2, #16
   12e0e:	2100      	movs	r1, #0
   12e10:	4668      	mov	r0, sp
   12e12:	f009 f8be 	bl	1bf92 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   12e16:	2200      	movs	r2, #0
   12e18:	4621      	mov	r1, r4
   12e1a:	4640      	mov	r0, r8
   12e1c:	f7ff fef0 	bl	12c00 <bt_att_create_pdu>
   12e20:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12e22:	b348      	cbz	r0, 12e78 <att_read_rsp+0x88>
	data.offset = offset;
   12e24:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12e28:	4631      	mov	r1, r6
	data.offset = offset;
   12e2a:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12e2e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12e30:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12e32:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12e36:	4a11      	ldr	r2, [pc, #68]	; (12e7c <att_read_rsp+0x8c>)
   12e38:	466b      	mov	r3, sp
	data.chan = chan;
   12e3a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12e3c:	f009 fc6e 	bl	1c71c <bt_gatt_foreach_attr>
	if (data.err) {
   12e40:	f89d 400c 	ldrb.w	r4, [sp, #12]
   12e44:	b174      	cbz	r4, 12e64 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   12e46:	9802      	ldr	r0, [sp, #8]
   12e48:	f002 fdbe 	bl	159c8 <net_buf_unref>
	if (!req) {
   12e4c:	4632      	mov	r2, r6
   12e4e:	4639      	mov	r1, r7
   12e50:	4628      	mov	r0, r5
   12e52:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12e56:	f7ff fdcb 	bl	129f0 <send_err_rsp.part.0>
		return 0;
   12e5a:	2400      	movs	r4, #0
}
   12e5c:	4620      	mov	r0, r4
   12e5e:	b004      	add	sp, #16
   12e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12e64:	4628      	mov	r0, r5
   12e66:	4a06      	ldr	r2, [pc, #24]	; (12e80 <att_read_rsp+0x90>)
   12e68:	9902      	ldr	r1, [sp, #8]
   12e6a:	f009 fd8e 	bl	1c98a <bt_att_chan_send_rsp>
	return 0;
   12e6e:	e7f5      	b.n	12e5c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12e70:	2412      	movs	r4, #18
   12e72:	e7f3      	b.n	12e5c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   12e74:	2401      	movs	r4, #1
   12e76:	e7f1      	b.n	12e5c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12e78:	240e      	movs	r4, #14
   12e7a:	e7ef      	b.n	12e5c <att_read_rsp+0x6c>
   12e7c:	0001ca83 	.word	0x0001ca83
   12e80:	0001ca5b 	.word	0x0001ca5b

00012e84 <att_read_type_req>:
{
   12e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12e88:	898c      	ldrh	r4, [r1, #12]
{
   12e8a:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12e8c:	3c04      	subs	r4, #4
   12e8e:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12e90:	2c02      	cmp	r4, #2
{
   12e92:	4608      	mov	r0, r1
   12e94:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12e96:	d001      	beq.n	12e9c <att_read_type_req+0x18>
   12e98:	2c10      	cmp	r4, #16
   12e9a:	d150      	bne.n	12f3e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   12e9c:	2104      	movs	r1, #4
   12e9e:	3008      	adds	r0, #8
   12ea0:	f002 fe8a 	bl	15bb8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12ea4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   12ea8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12eaa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12eac:	1d01      	adds	r1, r0, #4
   12eae:	4622      	mov	r2, r4
   12eb0:	4640      	mov	r0, r8
   12eb2:	f009 f8e6 	bl	1c082 <bt_uuid_create>
   12eb6:	b188      	cbz	r0, 12edc <att_read_type_req+0x58>
	if (!start || !end) {
   12eb8:	b19e      	cbz	r6, 12ee2 <att_read_type_req+0x5e>
   12eba:	b18f      	cbz	r7, 12ee0 <att_read_type_req+0x5c>
	if (start > end) {
   12ebc:	42b7      	cmp	r7, r6
   12ebe:	d310      	bcc.n	12ee2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   12ec0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   12ec2:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12ec4:	2100      	movs	r1, #0
   12ec6:	eb0d 0002 	add.w	r0, sp, r2
   12eca:	f009 f862 	bl	1bf92 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   12ece:	2201      	movs	r2, #1
   12ed0:	2109      	movs	r1, #9
   12ed2:	4620      	mov	r0, r4
   12ed4:	f7ff fe94 	bl	12c00 <bt_att_create_pdu>
   12ed8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   12eda:	b968      	cbnz	r0, 12ef8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   12edc:	240e      	movs	r4, #14
   12ede:	e007      	b.n	12ef0 <att_read_type_req+0x6c>
			*err = 0U;
   12ee0:	463e      	mov	r6, r7
	if (!req) {
   12ee2:	2301      	movs	r3, #1
   12ee4:	4632      	mov	r2, r6
   12ee6:	2108      	movs	r1, #8
   12ee8:	4628      	mov	r0, r5
   12eea:	f7ff fd81 	bl	129f0 <send_err_rsp.part.0>
		return 0;
   12eee:	2400      	movs	r4, #0
}
   12ef0:	4620      	mov	r0, r4
   12ef2:	b00c      	add	sp, #48	; 0x30
   12ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   12ef8:	2101      	movs	r1, #1
   12efa:	3008      	adds	r0, #8
	data.uuid = uuid;
   12efc:	e9cd 5806 	strd	r5, r8, [sp, #24]
   12f00:	f002 fe78 	bl	15bf4 <net_buf_simple_add>
	data.rsp->len = 0U;
   12f04:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12f08:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12f0a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12f0c:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   12f0e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12f12:	4a0c      	ldr	r2, [pc, #48]	; (12f44 <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12f14:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12f18:	4630      	mov	r0, r6
   12f1a:	ab06      	add	r3, sp, #24
   12f1c:	f009 fbfe 	bl	1c71c <bt_gatt_foreach_attr>
	if (data.err) {
   12f20:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   12f24:	b12c      	cbz	r4, 12f32 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   12f26:	9808      	ldr	r0, [sp, #32]
   12f28:	f002 fd4e 	bl	159c8 <net_buf_unref>
	if (!req) {
   12f2c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   12f30:	e7d8      	b.n	12ee4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12f32:	4628      	mov	r0, r5
   12f34:	4a04      	ldr	r2, [pc, #16]	; (12f48 <att_read_type_req+0xc4>)
   12f36:	9908      	ldr	r1, [sp, #32]
   12f38:	f009 fd27 	bl	1c98a <bt_att_chan_send_rsp>
	return 0;
   12f3c:	e7d8      	b.n	12ef0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   12f3e:	2404      	movs	r4, #4
   12f40:	e7d6      	b.n	12ef0 <att_read_type_req+0x6c>
   12f42:	bf00      	nop
   12f44:	00012821 	.word	0x00012821
   12f48:	0001ca5b 	.word	0x0001ca5b

00012f4c <att_find_type_req>:
{
   12f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12f50:	4688      	mov	r8, r1
   12f52:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   12f54:	2106      	movs	r1, #6
   12f56:	b086      	sub	sp, #24
   12f58:	f108 0008 	add.w	r0, r8, #8
   12f5c:	f002 fe2c 	bl	15bb8 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   12f60:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   12f62:	b317      	cbz	r7, 12faa <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   12f64:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   12f68:	f1b9 0f00 	cmp.w	r9, #0
   12f6c:	d01c      	beq.n	12fa8 <att_find_type_req+0x5c>
	if (start > end) {
   12f6e:	454f      	cmp	r7, r9
   12f70:	d81b      	bhi.n	12faa <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   12f72:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12f74:	2400      	movs	r4, #0
   12f76:	f8ad 3002 	strh.w	r3, [sp, #2]
   12f7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12f7e:	4668      	mov	r0, sp
   12f80:	a901      	add	r1, sp, #4
	value = buf->data;
   12f82:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12f86:	f88d 4000 	strb.w	r4, [sp]
   12f8a:	f88d 4004 	strb.w	r4, [sp, #4]
   12f8e:	f8ad 3006 	strh.w	r3, [sp, #6]
   12f92:	f009 f848 	bl	1c026 <bt_uuid_cmp>
   12f96:	4606      	mov	r6, r0
   12f98:	b190      	cbz	r0, 12fc0 <att_find_type_req+0x74>
	if (!req) {
   12f9a:	230a      	movs	r3, #10
   12f9c:	463a      	mov	r2, r7
   12f9e:	2106      	movs	r1, #6
   12fa0:	4628      	mov	r0, r5
   12fa2:	f7ff fd25 	bl	129f0 <send_err_rsp.part.0>
		return 0;
   12fa6:	e007      	b.n	12fb8 <att_find_type_req+0x6c>
			*err = 0U;
   12fa8:	464f      	mov	r7, r9
	if (!req) {
   12faa:	2301      	movs	r3, #1
   12fac:	463a      	mov	r2, r7
   12fae:	2106      	movs	r1, #6
   12fb0:	4628      	mov	r0, r5
   12fb2:	f7ff fd1d 	bl	129f0 <send_err_rsp.part.0>
		return 0;
   12fb6:	2400      	movs	r4, #0
}
   12fb8:	4620      	mov	r0, r4
   12fba:	b006      	add	sp, #24
   12fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12fc0:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   12fc4:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12fc8:	4601      	mov	r1, r0
   12fca:	2214      	movs	r2, #20
   12fcc:	a801      	add	r0, sp, #4
   12fce:	f008 ffe0 	bl	1bf92 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   12fd2:	4632      	mov	r2, r6
   12fd4:	2107      	movs	r1, #7
   12fd6:	4640      	mov	r0, r8
   12fd8:	f7ff fe12 	bl	12c00 <bt_att_create_pdu>
   12fdc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12fde:	b1e0      	cbz	r0, 1301a <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12fe0:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12fe2:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12fe4:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12fe8:	4638      	mov	r0, r7
   12fea:	4a0d      	ldr	r2, [pc, #52]	; (13020 <att_find_type_req+0xd4>)
   12fec:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   12fee:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   12ff2:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   12ff6:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12ff8:	f009 fb90 	bl	1c71c <bt_gatt_foreach_attr>
	if (data.err) {
   12ffc:	f89d 4015 	ldrb.w	r4, [sp, #21]
   13000:	b12c      	cbz	r4, 1300e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   13002:	9802      	ldr	r0, [sp, #8]
   13004:	f002 fce0 	bl	159c8 <net_buf_unref>
	if (!req) {
   13008:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1300c:	e7ce      	b.n	12fac <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1300e:	4628      	mov	r0, r5
   13010:	4a04      	ldr	r2, [pc, #16]	; (13024 <att_find_type_req+0xd8>)
   13012:	9902      	ldr	r1, [sp, #8]
   13014:	f009 fcb9 	bl	1c98a <bt_att_chan_send_rsp>
	return 0;
   13018:	e7ce      	b.n	12fb8 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1301a:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1301c:	e7cc      	b.n	12fb8 <att_find_type_req+0x6c>
   1301e:	bf00      	nop
   13020:	000123e9 	.word	0x000123e9
   13024:	0001ca5b 	.word	0x0001ca5b

00013028 <att_find_info_req>:
{
   13028:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1302a:	688b      	ldr	r3, [r1, #8]
{
   1302c:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   1302e:	881e      	ldrh	r6, [r3, #0]
{
   13030:	b085      	sub	sp, #20
	if (!start || !end) {
   13032:	b19e      	cbz	r6, 1305c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   13034:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   13036:	b184      	cbz	r4, 1305a <att_find_info_req+0x32>
	if (start > end) {
   13038:	42b4      	cmp	r4, r6
   1303a:	d30f      	bcc.n	1305c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1303c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1303e:	2210      	movs	r2, #16
   13040:	2100      	movs	r1, #0
   13042:	4668      	mov	r0, sp
   13044:	f008 ffa5 	bl	1bf92 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   13048:	2200      	movs	r2, #0
   1304a:	2105      	movs	r1, #5
   1304c:	4638      	mov	r0, r7
   1304e:	f7ff fdd7 	bl	12c00 <bt_att_create_pdu>
   13052:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   13054:	b958      	cbnz	r0, 1306e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   13056:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   13058:	e007      	b.n	1306a <att_find_info_req+0x42>
			*err = 0U;
   1305a:	4626      	mov	r6, r4
	if (!req) {
   1305c:	2301      	movs	r3, #1
   1305e:	4632      	mov	r2, r6
   13060:	2104      	movs	r1, #4
   13062:	4628      	mov	r0, r5
   13064:	f7ff fcc4 	bl	129f0 <send_err_rsp.part.0>
	return 0;
   13068:	2000      	movs	r0, #0
}
   1306a:	b005      	add	sp, #20
   1306c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1306e:	4621      	mov	r1, r4
   13070:	466b      	mov	r3, sp
   13072:	4630      	mov	r0, r6
   13074:	4a08      	ldr	r2, [pc, #32]	; (13098 <att_find_info_req+0x70>)
	data.chan = chan;
   13076:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   13078:	f009 fb50 	bl	1c71c <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1307c:	9c02      	ldr	r4, [sp, #8]
   1307e:	b924      	cbnz	r4, 1308a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   13080:	9801      	ldr	r0, [sp, #4]
   13082:	f002 fca1 	bl	159c8 <net_buf_unref>
	if (!req) {
   13086:	230a      	movs	r3, #10
   13088:	e7e9      	b.n	1305e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1308a:	4628      	mov	r0, r5
   1308c:	4a03      	ldr	r2, [pc, #12]	; (1309c <att_find_info_req+0x74>)
   1308e:	9901      	ldr	r1, [sp, #4]
   13090:	f009 fc7b 	bl	1c98a <bt_att_chan_send_rsp>
   13094:	e7e8      	b.n	13068 <att_find_info_req+0x40>
   13096:	bf00      	nop
   13098:	0001c733 	.word	0x0001c733
   1309c:	0001ca5b 	.word	0x0001ca5b

000130a0 <att_mtu_req>:
{
   130a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   130a2:	4603      	mov	r3, r0
   130a4:	f853 2bc8 	ldr.w	r2, [r3], #200
{
   130a8:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   130aa:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   130ac:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   130b0:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   130b4:	071b      	lsls	r3, r3, #28
   130b6:	d41b      	bmi.n	130f0 <att_mtu_req+0x50>
	mtu_client = sys_le16_to_cpu(req->mtu);
   130b8:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   130ba:	881b      	ldrh	r3, [r3, #0]
   130bc:	2b16      	cmp	r3, #22
   130be:	d919      	bls.n	130f4 <att_mtu_req+0x54>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   130c0:	2202      	movs	r2, #2
   130c2:	2103      	movs	r1, #3
   130c4:	f7ff fd9c 	bl	12c00 <bt_att_create_pdu>
	if (!pdu) {
   130c8:	4606      	mov	r6, r0
   130ca:	b1a8      	cbz	r0, 130f8 <att_mtu_req+0x58>
	return net_buf_simple_add(&buf->b, len);
   130cc:	2102      	movs	r1, #2
   130ce:	3008      	adds	r0, #8
   130d0:	f002 fd90 	bl	15bf4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   130d4:	2717      	movs	r7, #23
   130d6:	7044      	strb	r4, [r0, #1]
   130d8:	7007      	strb	r7, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   130da:	4631      	mov	r1, r6
   130dc:	4628      	mov	r0, r5
   130de:	4a07      	ldr	r2, [pc, #28]	; (130fc <att_mtu_req+0x5c>)
   130e0:	f009 fc53 	bl	1c98a <bt_att_chan_send_rsp>
	return 0;
   130e4:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   130e6:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   130ea:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
}
   130ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   130f0:	2006      	movs	r0, #6
   130f2:	e7fc      	b.n	130ee <att_mtu_req+0x4e>
		return BT_ATT_ERR_INVALID_PDU;
   130f4:	2004      	movs	r0, #4
   130f6:	e7fa      	b.n	130ee <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   130f8:	200e      	movs	r0, #14
   130fa:	e7f8      	b.n	130ee <att_mtu_req+0x4e>
   130fc:	0001ca5b 	.word	0x0001ca5b

00013100 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   13100:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   13102:	2400      	movs	r4, #0
{
   13104:	4602      	mov	r2, r0
   13106:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   13108:	4807      	ldr	r0, [pc, #28]	; (13128 <bt_att_req_alloc+0x28>)
   1310a:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   1310c:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1310e:	f004 ff9d 	bl	1804c <k_mem_slab_alloc>
   13112:	4601      	mov	r1, r0
   13114:	b930      	cbnz	r0, 13124 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   13116:	2218      	movs	r2, #24
   13118:	9801      	ldr	r0, [sp, #4]
   1311a:	f008 ff3a 	bl	1bf92 <memset>

	return req;
   1311e:	9801      	ldr	r0, [sp, #4]
}
   13120:	b002      	add	sp, #8
   13122:	bd10      	pop	{r4, pc}
		return NULL;
   13124:	4620      	mov	r0, r4
   13126:	e7fb      	b.n	13120 <bt_att_req_alloc+0x20>
   13128:	20008618 	.word	0x20008618

0001312c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1312c:	b507      	push	{r0, r1, r2, lr}
   1312e:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   13130:	a901      	add	r1, sp, #4
   13132:	4803      	ldr	r0, [pc, #12]	; (13140 <bt_att_req_free+0x14>)
   13134:	f004 ffe4 	bl	18100 <k_mem_slab_free>
}
   13138:	b003      	add	sp, #12
   1313a:	f85d fb04 	ldr.w	pc, [sp], #4
   1313e:	bf00      	nop
   13140:	20008618 	.word	0x20008618

00013144 <att_handle_rsp>:
{
   13144:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13148:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->timeout_work);
   1314a:	30f0      	adds	r0, #240	; 0xf0
{
   1314c:	460f      	mov	r7, r1
   1314e:	4690      	mov	r8, r2
   13150:	461e      	mov	r6, r3
	k_delayed_work_cancel(&chan->timeout_work);
   13152:	f006 fda9 	bl	19ca8 <k_delayed_work_cancel>
	if (!chan->req) {
   13156:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
   1315a:	f04f 0a00 	mov.w	sl, #0
   1315e:	b99d      	cbnz	r5, 13188 <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   13160:	2157      	movs	r1, #87	; 0x57
   13162:	4818      	ldr	r0, [pc, #96]	; (131c4 <att_handle_rsp+0x80>)
   13164:	f007 fca6 	bl	1aab4 <printk>
	att_req_send_process(chan->att);
   13168:	6820      	ldr	r0, [r4, #0]
   1316a:	f009 fcf2 	bl	1cb52 <att_req_send_process>
	if (func) {
   1316e:	b13d      	cbz	r5, 13180 <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   13170:	6820      	ldr	r0, [r4, #0]
   13172:	f8cd 9000 	str.w	r9, [sp]
   13176:	4643      	mov	r3, r8
   13178:	463a      	mov	r2, r7
   1317a:	4631      	mov	r1, r6
   1317c:	6800      	ldr	r0, [r0, #0]
   1317e:	47a8      	blx	r5
}
   13180:	2000      	movs	r0, #0
   13182:	b002      	add	sp, #8
   13184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   13188:	4b0f      	ldr	r3, [pc, #60]	; (131c8 <att_handle_rsp+0x84>)
   1318a:	429d      	cmp	r5, r3
   1318c:	d103      	bne.n	13196 <att_handle_rsp+0x52>
	bt_att_func_t func = NULL;
   1318e:	4655      	mov	r5, sl
		chan->req = NULL;
   13190:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
		goto process;
   13194:	e7e8      	b.n	13168 <att_handle_rsp+0x24>
	if (chan->req->buf) {
   13196:	6928      	ldr	r0, [r5, #16]
   13198:	b128      	cbz	r0, 131a6 <att_handle_rsp+0x62>
		net_buf_unref(chan->req->buf);
   1319a:	f002 fc15 	bl	159c8 <net_buf_unref>
		chan->req->buf = NULL;
   1319e:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   131a2:	f8c3 a010 	str.w	sl, [r3, #16]
	chan->req->func = NULL;
   131a6:	f04f 0a00 	mov.w	sl, #0
	func = chan->req->func;
   131aa:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   131ae:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   131b0:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   131b4:	f8d0 9014 	ldr.w	r9, [r0, #20]
	att_req_destroy(chan->req);
   131b8:	f009 fd79 	bl	1ccae <att_req_destroy>
	chan->req = NULL;
   131bc:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
   131c0:	e7d2      	b.n	13168 <att_handle_rsp+0x24>
   131c2:	bf00      	nop
   131c4:	000222f1 	.word	0x000222f1
   131c8:	2000abbc 	.word	0x2000abbc

000131cc <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   131cc:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
{
   131d0:	b430      	push	{r4, r5}
	if (!chan->req || chan->req == &cancel) {
   131d2:	b18b      	cbz	r3, 131f8 <att_error_rsp+0x2c>
   131d4:	4a09      	ldr	r2, [pc, #36]	; (131fc <att_error_rsp+0x30>)
   131d6:	4293      	cmp	r3, r2
   131d8:	d00e      	beq.n	131f8 <att_error_rsp+0x2c>
	if (chan->req->buf) {
   131da:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
   131dc:	6889      	ldr	r1, [r1, #8]
	if (chan->req->buf) {
   131de:	b12a      	cbz	r2, 131ec <att_error_rsp+0x20>
	buf->data = buf->__buf + state->offset;
   131e0:	899d      	ldrh	r5, [r3, #12]
   131e2:	89dc      	ldrh	r4, [r3, #14]
   131e4:	6913      	ldr	r3, [r2, #16]
	buf->len = state->len;
   131e6:	8194      	strh	r4, [r2, #12]
	buf->data = buf->__buf + state->offset;
   131e8:	442b      	add	r3, r5
   131ea:	6093      	str	r3, [r2, #8]
	err = rsp->error;
   131ec:	78cb      	ldrb	r3, [r1, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   131ee:	2200      	movs	r2, #0
}
   131f0:	bc30      	pop	{r4, r5}
	return att_handle_rsp(chan, NULL, 0, err);
   131f2:	4611      	mov	r1, r2
   131f4:	f7ff bfa6 	b.w	13144 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   131f8:	230e      	movs	r3, #14
   131fa:	e7f8      	b.n	131ee <att_error_rsp+0x22>
   131fc:	2000abbc 	.word	0x2000abbc

00013200 <att_reset>:
{
   13200:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13202:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   13204:	9803      	ldr	r0, [sp, #12]
   13206:	2200      	movs	r2, #0
   13208:	2300      	movs	r3, #0
   1320a:	300c      	adds	r0, #12
   1320c:	f002 fb5a 	bl	158c4 <net_buf_get>
   13210:	b948      	cbnz	r0, 13226 <att_reset+0x26>
	att->conn = NULL;
   13212:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   13214:	6854      	ldr	r4, [r2, #4]
   13216:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   13218:	b944      	cbnz	r4, 1322c <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   1321a:	480d      	ldr	r0, [pc, #52]	; (13250 <att_reset+0x50>)
   1321c:	a903      	add	r1, sp, #12
   1321e:	f004 ff6f 	bl	18100 <k_mem_slab_free>
}
   13222:	b004      	add	sp, #16
   13224:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   13226:	f002 fbcf 	bl	159c8 <net_buf_unref>
   1322a:	e7eb      	b.n	13204 <att_reset+0x4>
	return node->next;
   1322c:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
   1322e:	6866      	ldr	r6, [r4, #4]
   13230:	b136      	cbz	r6, 13240 <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   13232:	6963      	ldr	r3, [r4, #20]
   13234:	210e      	movs	r1, #14
   13236:	9300      	str	r3, [sp, #0]
   13238:	2300      	movs	r3, #0
   1323a:	461a      	mov	r2, r3
   1323c:	4618      	mov	r0, r3
   1323e:	47b0      	blx	r6
		att_req_destroy(req);
   13240:	4620      	mov	r0, r4
   13242:	f009 fd34 	bl	1ccae <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   13246:	2d00      	cmp	r5, #0
   13248:	d0e7      	beq.n	1321a <att_reset+0x1a>
   1324a:	462c      	mov	r4, r5
   1324c:	682d      	ldr	r5, [r5, #0]
   1324e:	e7ee      	b.n	1322e <att_reset+0x2e>
   13250:	200085e0 	.word	0x200085e0

00013254 <att_timeout>:
{
   13254:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
   13256:	4605      	mov	r5, r0
   13258:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
   1325c:	2145      	movs	r1, #69	; 0x45
{
   1325e:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   13260:	4808      	ldr	r0, [pc, #32]	; (13284 <att_timeout+0x30>)
   13262:	f007 fc27 	bl	1aab4 <printk>
	att_chan_detach(chan);
   13266:	4628      	mov	r0, r5
   13268:	f009 fd5e 	bl	1cd28 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1326c:	6ab5      	ldr	r5, [r6, #40]	; 0x28
   1326e:	b945      	cbnz	r5, 13282 <att_timeout+0x2e>
	att_reset(att);
   13270:	4630      	mov	r0, r6
   13272:	f7ff ffc5 	bl	13200 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   13276:	f854 0ce8 	ldr.w	r0, [r4, #-232]
   1327a:	f002 f951 	bl	15520 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   1327e:	f844 5ce8 	str.w	r5, [r4, #-232]
}
   13282:	bd70      	pop	{r4, r5, r6, pc}
   13284:	0002230d 	.word	0x0002230d

00013288 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   13288:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1328c:	460c      	mov	r4, r1
   1328e:	4617      	mov	r7, r2
   13290:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   13292:	4605      	mov	r5, r0
   13294:	b950      	cbnz	r0, 132ac <bt_att_send+0x24>
   13296:	492e      	ldr	r1, [pc, #184]	; (13350 <bt_att_send+0xc8>)
   13298:	482e      	ldr	r0, [pc, #184]	; (13354 <bt_att_send+0xcc>)
   1329a:	f640 32ce 	movw	r2, #3022	; 0xbce
   1329e:	f007 fc09 	bl	1aab4 <printk>
   132a2:	f640 31ce 	movw	r1, #3022	; 0xbce
   132a6:	482a      	ldr	r0, [pc, #168]	; (13350 <bt_att_send+0xc8>)
   132a8:	f007 feaa 	bl	1b000 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   132ac:	b954      	cbnz	r4, 132c4 <bt_att_send+0x3c>
   132ae:	4928      	ldr	r1, [pc, #160]	; (13350 <bt_att_send+0xc8>)
   132b0:	4828      	ldr	r0, [pc, #160]	; (13354 <bt_att_send+0xcc>)
   132b2:	f640 32cf 	movw	r2, #3023	; 0xbcf
   132b6:	f007 fbfd 	bl	1aab4 <printk>
   132ba:	f640 31cf 	movw	r1, #3023	; 0xbcf
   132be:	4824      	ldr	r0, [pc, #144]	; (13350 <bt_att_send+0xc8>)
   132c0:	f007 fe9e 	bl	1b000 <assert_post_action>

	att = att_get(conn);
   132c4:	4628      	mov	r0, r5
   132c6:	f7ff f85b 	bl	12380 <att_get>
	if (!att) {
   132ca:	4606      	mov	r6, r0
   132cc:	b938      	cbnz	r0, 132de <bt_att_send+0x56>
		net_buf_unref(buf);
   132ce:	4620      	mov	r0, r4
   132d0:	f002 fb7a 	bl	159c8 <net_buf_unref>
		return -ENOTCONN;
   132d4:	f06f 0038 	mvn.w	r0, #56	; 0x38

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   132d8:	b002      	add	sp, #8
   132da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   132de:	b147      	cbz	r7, 132f2 <bt_att_send+0x6a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   132e0:	463b      	mov	r3, r7
   132e2:	4622      	mov	r2, r4
   132e4:	2104      	movs	r1, #4
   132e6:	4628      	mov	r0, r5
   132e8:	f8cd 8000 	str.w	r8, [sp]
   132ec:	f009 f955 	bl	1c59a <bt_l2cap_send_cb>
   132f0:	e7f2      	b.n	132d8 <bt_att_send+0x50>
	net_buf_put(&att->tx_queue, buf);
   132f2:	f100 070c 	add.w	r7, r0, #12
   132f6:	4621      	mov	r1, r4
   132f8:	4638      	mov	r0, r7
   132fa:	f002 fb37 	bl	1596c <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   132fe:	2200      	movs	r2, #0
   13300:	2300      	movs	r3, #0
   13302:	4638      	mov	r0, r7
   13304:	f002 fade 	bl	158c4 <net_buf_get>
	if (!buf) {
   13308:	4605      	mov	r5, r0
   1330a:	b908      	cbnz	r0, 13310 <bt_att_send+0x88>
	return 0;
   1330c:	2000      	movs	r0, #0
   1330e:	e7e3      	b.n	132d8 <bt_att_send+0x50>
	return list->head;
   13310:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   13312:	b1c3      	cbz	r3, 13346 <bt_att_send+0xbe>
   13314:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   13318:	d015      	beq.n	13346 <bt_att_send+0xbe>
	return node->next;
   1331a:	681c      	ldr	r4, [r3, #0]
   1331c:	b10c      	cbz	r4, 13322 <bt_att_send+0x9a>
   1331e:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		err = bt_att_chan_send(chan, buf, NULL);
   13322:	2200      	movs	r2, #0
   13324:	4629      	mov	r1, r5
   13326:	f009 fb19 	bl	1c95c <bt_att_chan_send>
		if (err >= 0) {
   1332a:	2800      	cmp	r0, #0
   1332c:	daee      	bge.n	1330c <bt_att_send+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1332e:	b154      	cbz	r4, 13346 <bt_att_send+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13330:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   13334:	d004      	beq.n	13340 <bt_att_send+0xb8>
	return node->next;
   13336:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1333a:	b10b      	cbz	r3, 13340 <bt_att_send+0xb8>
   1333c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   13340:	4620      	mov	r0, r4
   13342:	461c      	mov	r4, r3
   13344:	e7ed      	b.n	13322 <bt_att_send+0x9a>
		k_queue_prepend(&att->tx_queue._queue, buf);
   13346:	4629      	mov	r1, r5
   13348:	4638      	mov	r0, r7
   1334a:	f00a ff7b 	bl	1e244 <k_queue_prepend>
   1334e:	e7dd      	b.n	1330c <bt_att_send+0x84>
   13350:	000221d0 	.word	0x000221d0
   13354:	0002003d 	.word	0x0002003d

00013358 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   13358:	b538      	push	{r3, r4, r5, lr}
   1335a:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1335c:	4605      	mov	r5, r0
   1335e:	b950      	cbnz	r0, 13376 <bt_att_req_send+0x1e>
   13360:	4918      	ldr	r1, [pc, #96]	; (133c4 <bt_att_req_send+0x6c>)
   13362:	4819      	ldr	r0, [pc, #100]	; (133c8 <bt_att_req_send+0x70>)
   13364:	f640 32eb 	movw	r2, #3051	; 0xbeb
   13368:	f007 fba4 	bl	1aab4 <printk>
   1336c:	f640 31eb 	movw	r1, #3051	; 0xbeb
   13370:	4814      	ldr	r0, [pc, #80]	; (133c4 <bt_att_req_send+0x6c>)
   13372:	f007 fe45 	bl	1b000 <assert_post_action>
	__ASSERT_NO_MSG(req);
   13376:	b954      	cbnz	r4, 1338e <bt_att_req_send+0x36>
   13378:	4912      	ldr	r1, [pc, #72]	; (133c4 <bt_att_req_send+0x6c>)
   1337a:	4813      	ldr	r0, [pc, #76]	; (133c8 <bt_att_req_send+0x70>)
   1337c:	f640 32ec 	movw	r2, #3052	; 0xbec
   13380:	f007 fb98 	bl	1aab4 <printk>
   13384:	f640 31ec 	movw	r1, #3052	; 0xbec
   13388:	480e      	ldr	r0, [pc, #56]	; (133c4 <bt_att_req_send+0x6c>)
   1338a:	f007 fe39 	bl	1b000 <assert_post_action>

	att = att_get(conn);
   1338e:	4628      	mov	r0, r5
   13390:	f7fe fff6 	bl	12380 <att_get>
	if (!att) {
   13394:	4605      	mov	r5, r0
   13396:	b930      	cbnz	r0, 133a6 <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
   13398:	6920      	ldr	r0, [r4, #16]
   1339a:	f002 fb15 	bl	159c8 <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
   1339e:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
   133a2:	6125      	str	r5, [r4, #16]

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);

	return 0;
}
   133a4:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   133a6:	2300      	movs	r3, #0
   133a8:	6023      	str	r3, [r4, #0]
	return list->tail;
   133aa:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   133ac:	b933      	cbnz	r3, 133bc <bt_att_req_send+0x64>
	list->head = node;
   133ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   133b2:	4628      	mov	r0, r5
   133b4:	f009 fbcd 	bl	1cb52 <att_req_send_process>
	return 0;
   133b8:	2000      	movs	r0, #0
   133ba:	e7f3      	b.n	133a4 <bt_att_req_send+0x4c>
	parent->next = child;
   133bc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   133be:	6084      	str	r4, [r0, #8]
}
   133c0:	e7f7      	b.n	133b2 <bt_att_req_send+0x5a>
   133c2:	bf00      	nop
   133c4:	000221d0 	.word	0x000221d0
   133c8:	0002003d 	.word	0x0002003d

000133cc <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   133cc:	b510      	push	{r4, lr}
   133ce:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   133d0:	b350      	cbz	r0, 13428 <bt_att_req_cancel+0x5c>
   133d2:	b349      	cbz	r1, 13428 <bt_att_req_cancel+0x5c>
		return;
	}

	att = att_get(conn);
   133d4:	f7fe ffd4 	bl	12380 <att_get>
	if (!att) {
   133d8:	b330      	cbz	r0, 13428 <bt_att_req_cancel+0x5c>
	return list->head;
   133da:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   133dc:	b15b      	cbz	r3, 133f6 <bt_att_req_cancel+0x2a>
   133de:	f5b3 719e 	subs.w	r1, r3, #316	; 0x13c
   133e2:	d008      	beq.n	133f6 <bt_att_req_cancel+0x2a>
	return node->next;
   133e4:	681b      	ldr	r3, [r3, #0]
   133e6:	b10b      	cbz	r3, 133ec <bt_att_req_cancel+0x20>
   133e8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
	if (chan->req != req) {
   133ec:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
   133f0:	4294      	cmp	r4, r2
   133f2:	d006      	beq.n	13402 <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   133f4:	b96b      	cbnz	r3, 13412 <bt_att_req_cancel+0x46>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   133f6:	3004      	adds	r0, #4
   133f8:	4621      	mov	r1, r4
   133fa:	f009 faee 	bl	1c9da <sys_slist_find_and_remove.isra.0>

	att_req_destroy(req);
   133fe:	4620      	mov	r0, r4
   13400:	e003      	b.n	1340a <bt_att_req_cancel+0x3e>
	att_req_destroy(req);
   13402:	4620      	mov	r0, r4
	chan->req = &cancel;
   13404:	4b09      	ldr	r3, [pc, #36]	; (1342c <bt_att_req_cancel+0x60>)
   13406:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
}
   1340a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
   1340e:	f009 bc4e 	b.w	1ccae <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
   13412:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   13416:	d004      	beq.n	13422 <bt_att_req_cancel+0x56>
	return node->next;
   13418:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1341c:	b10a      	cbz	r2, 13422 <bt_att_req_cancel+0x56>
   1341e:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   13422:	4619      	mov	r1, r3
   13424:	4613      	mov	r3, r2
   13426:	e7e1      	b.n	133ec <bt_att_req_cancel+0x20>
}
   13428:	bd10      	pop	{r4, pc}
   1342a:	bf00      	nop
   1342c:	2000abbc 	.word	0x2000abbc

00013430 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   13430:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   13432:	4618      	mov	r0, r3
{
   13434:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   13436:	4907      	ldr	r1, [pc, #28]	; (13454 <db_hash_set+0x24>)
   13438:	2210      	movs	r2, #16
   1343a:	47a0      	blx	r4
	if (len < 0) {
   1343c:	1e04      	subs	r4, r0, #0
   1343e:	da06      	bge.n	1344e <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   13440:	4622      	mov	r2, r4
   13442:	2145      	movs	r1, #69	; 0x45
   13444:	4804      	ldr	r0, [pc, #16]	; (13458 <db_hash_set+0x28>)
   13446:	f007 fb35 	bl	1aab4 <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
   1344a:	4620      	mov	r0, r4
   1344c:	bd10      	pop	{r4, pc}
	return 0;
   1344e:	2400      	movs	r4, #0
   13450:	e7fb      	b.n	1344a <db_hash_set+0x1a>
   13452:	bf00      	nop
   13454:	2000f9c4 	.word	0x2000f9c4
   13458:	00022325 	.word	0x00022325

0001345c <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   1345c:	2210      	movs	r2, #16
{
   1345e:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   13460:	4906      	ldr	r1, [pc, #24]	; (1347c <db_hash_store+0x20>)
   13462:	4807      	ldr	r0, [pc, #28]	; (13480 <db_hash_store+0x24>)
   13464:	f7f8 fbdc 	bl	bc20 <settings_save_one>
	if (err) {
   13468:	4602      	mov	r2, r0
   1346a:	b128      	cbz	r0, 13478 <db_hash_store+0x1c>
}
   1346c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   13470:	2145      	movs	r1, #69	; 0x45
   13472:	4804      	ldr	r0, [pc, #16]	; (13484 <db_hash_store+0x28>)
   13474:	f007 bb1e 	b.w	1aab4 <printk>
}
   13478:	bd08      	pop	{r3, pc}
   1347a:	bf00      	nop
   1347c:	2000f9b4 	.word	0x2000f9b4
   13480:	0002234b 	.word	0x0002234b
   13484:	00022353 	.word	0x00022353

00013488 <find_cf_cfg>:
{
   13488:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1348a:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1348c:	2600      	movs	r6, #0
   1348e:	4d0e      	ldr	r5, [pc, #56]	; (134c8 <find_cf_cfg+0x40>)
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   13490:	462f      	mov	r7, r5
		if (!conn) {
   13492:	1c6a      	adds	r2, r5, #1
   13494:	b954      	cbnz	r4, 134ac <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   13496:	4669      	mov	r1, sp
   13498:	4610      	mov	r0, r2
   1349a:	9400      	str	r4, [sp, #0]
   1349c:	f8cd 4003 	str.w	r4, [sp, #3]
   134a0:	f009 fd07 	bl	1ceb2 <bt_addr_le_cmp>
   134a4:	b940      	cbnz	r0, 134b8 <find_cf_cfg+0x30>
}
   134a6:	4638      	mov	r0, r7
   134a8:	b003      	add	sp, #12
   134aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   134ac:	4620      	mov	r0, r4
   134ae:	7829      	ldrb	r1, [r5, #0]
   134b0:	f008 ff9f 	bl	1c3f2 <bt_conn_is_peer_addr_le>
   134b4:	2800      	cmp	r0, #0
   134b6:	d1f6      	bne.n	134a6 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   134b8:	3601      	adds	r6, #1
   134ba:	2e14      	cmp	r6, #20
   134bc:	f105 0510 	add.w	r5, r5, #16
   134c0:	d1e6      	bne.n	13490 <find_cf_cfg+0x8>
	return NULL;
   134c2:	2700      	movs	r7, #0
   134c4:	e7ef      	b.n	134a6 <find_cf_cfg+0x1e>
   134c6:	bf00      	nop
   134c8:	2000abd4 	.word	0x2000abd4

000134cc <find_sc_cfg>:
{
   134cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   134ce:	4606      	mov	r6, r0
   134d0:	460f      	mov	r7, r1
   134d2:	2400      	movs	r4, #0
   134d4:	4d09      	ldr	r5, [pc, #36]	; (134fc <find_sc_cfg+0x30>)
		if (id == sc_cfg[i].id &&
   134d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   134da:	42b3      	cmp	r3, r6
   134dc:	d107      	bne.n	134ee <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   134de:	4639      	mov	r1, r7
   134e0:	4628      	mov	r0, r5
   134e2:	f009 fce6 	bl	1ceb2 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   134e6:	b910      	cbnz	r0, 134ee <find_sc_cfg+0x22>
			return &sc_cfg[i];
   134e8:	4805      	ldr	r0, [pc, #20]	; (13500 <find_sc_cfg+0x34>)
   134ea:	4420      	add	r0, r4
}
   134ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   134ee:	340c      	adds	r4, #12
   134f0:	2cf0      	cmp	r4, #240	; 0xf0
   134f2:	f105 050c 	add.w	r5, r5, #12
   134f6:	d1ee      	bne.n	134d6 <find_sc_cfg+0xa>
	return NULL;
   134f8:	2000      	movs	r0, #0
   134fa:	e7f7      	b.n	134ec <find_sc_cfg+0x20>
   134fc:	2000f1ab 	.word	0x2000f1ab
   13500:	2000f1aa 	.word	0x2000f1aa

00013504 <gatt_sub_find>:
{
   13504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13506:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   13508:	2600      	movs	r6, #0
   1350a:	4d0e      	ldr	r5, [pc, #56]	; (13544 <gatt_sub_find+0x40>)
		struct gatt_sub *sub = &subscriptions[i];
   1350c:	462f      	mov	r7, r5
		if (!conn) {
   1350e:	1c6a      	adds	r2, r5, #1
   13510:	b954      	cbnz	r4, 13528 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   13512:	4669      	mov	r1, sp
   13514:	4610      	mov	r0, r2
   13516:	9400      	str	r4, [sp, #0]
   13518:	f8cd 4003 	str.w	r4, [sp, #3]
   1351c:	f009 fcc9 	bl	1ceb2 <bt_addr_le_cmp>
   13520:	b940      	cbnz	r0, 13534 <gatt_sub_find+0x30>
}
   13522:	4638      	mov	r0, r7
   13524:	b003      	add	sp, #12
   13526:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   13528:	4620      	mov	r0, r4
   1352a:	7829      	ldrb	r1, [r5, #0]
   1352c:	f008 ff61 	bl	1c3f2 <bt_conn_is_peer_addr_le>
   13530:	2800      	cmp	r0, #0
   13532:	d1f6      	bne.n	13522 <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   13534:	3601      	adds	r6, #1
   13536:	2e14      	cmp	r6, #20
   13538:	f105 0510 	add.w	r5, r5, #16
   1353c:	d1e6      	bne.n	1350c <gatt_sub_find+0x8>
	return NULL;
   1353e:	2700      	movs	r7, #0
   13540:	e7ef      	b.n	13522 <gatt_sub_find+0x1e>
   13542:	bf00      	nop
   13544:	2000ae0c 	.word	0x2000ae0c

00013548 <find_cf_cfg_by_addr>:
{
   13548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1354a:	4606      	mov	r6, r0
   1354c:	460f      	mov	r7, r1
   1354e:	2400      	movs	r4, #0
   13550:	4d0a      	ldr	r5, [pc, #40]	; (1357c <find_cf_cfg_by_addr+0x34>)
			if (id == cf_cfg[i].id &&
   13552:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   13556:	42b3      	cmp	r3, r6
   13558:	d107      	bne.n	1356a <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   1355a:	4629      	mov	r1, r5
   1355c:	4638      	mov	r0, r7
   1355e:	f009 fca8 	bl	1ceb2 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   13562:	b910      	cbnz	r0, 1356a <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   13564:	4806      	ldr	r0, [pc, #24]	; (13580 <find_cf_cfg_by_addr+0x38>)
   13566:	4420      	add	r0, r4
}
   13568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1356a:	3410      	adds	r4, #16
   1356c:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
   13570:	f105 0510 	add.w	r5, r5, #16
   13574:	d1ed      	bne.n	13552 <find_cf_cfg_by_addr+0xa>
	return NULL;
   13576:	2000      	movs	r0, #0
   13578:	e7f6      	b.n	13568 <find_cf_cfg_by_addr+0x20>
   1357a:	bf00      	nop
   1357c:	2000abd5 	.word	0x2000abd5
   13580:	2000abd4 	.word	0x2000abd4

00013584 <bt_gatt_attr_write_ccc>:
{
   13584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13588:	461f      	mov	r7, r3
   1358a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1358e:	4604      	mov	r4, r0
   13590:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   13592:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   13596:	2b00      	cmp	r3, #0
   13598:	d141      	bne.n	1361e <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   1359a:	1e7b      	subs	r3, r7, #1
   1359c:	2b01      	cmp	r3, #1
   1359e:	d841      	bhi.n	13624 <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   135a0:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   135a2:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   135a4:	4649      	mov	r1, r9
   135a6:	bf14      	ite	ne
   135a8:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   135aa:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   135ac:	f009 fc84 	bl	1ceb8 <find_ccc_cfg>
	if (!cfg) {
   135b0:	4605      	mov	r5, r0
   135b2:	b9b0      	cbnz	r0, 135e2 <bt_gatt_attr_write_ccc+0x5e>
		if (!value) {
   135b4:	b916      	cbnz	r6, 135bc <bt_gatt_attr_write_ccc+0x38>
			return len;
   135b6:	4638      	mov	r0, r7
}
   135b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   135bc:	4649      	mov	r1, r9
   135be:	f009 fc7b 	bl	1ceb8 <find_ccc_cfg>
		if (!cfg) {
   135c2:	4605      	mov	r5, r0
   135c4:	b930      	cbnz	r0, 135d4 <bt_gatt_attr_write_ccc+0x50>
			BT_WARN("No space to store CCC cfg");
   135c6:	4819      	ldr	r0, [pc, #100]	; (1362c <bt_gatt_attr_write_ccc+0xa8>)
   135c8:	2157      	movs	r1, #87	; 0x57
   135ca:	f007 fa73 	bl	1aab4 <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   135ce:	f06f 0010 	mvn.w	r0, #16
   135d2:	e7f1      	b.n	135b8 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   135d4:	f104 0188 	add.w	r1, r4, #136	; 0x88
   135d8:	3001      	adds	r0, #1
   135da:	f009 fca6 	bl	1cf2a <bt_addr_le_copy>
		cfg->id = conn->id;
   135de:	7a23      	ldrb	r3, [r4, #8]
   135e0:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   135e2:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
   135e6:	b973      	cbnz	r3, 13606 <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   135e8:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
	cfg->value = value;
   135ec:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   135ee:	42b3      	cmp	r3, r6
   135f0:	d003      	beq.n	135fa <bt_gatt_attr_write_ccc+0x76>
		gatt_ccc_changed(attr, ccc);
   135f2:	4649      	mov	r1, r9
   135f4:	4640      	mov	r0, r8
   135f6:	f009 fbd5 	bl	1cda4 <gatt_ccc_changed>
	if (!value) {
   135fa:	2e00      	cmp	r6, #0
   135fc:	d1db      	bne.n	135b6 <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
   135fe:	4628      	mov	r0, r5
   13600:	f009 fc96 	bl	1cf30 <clear_ccc_cfg>
   13604:	e7d7      	b.n	135b6 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   13606:	4632      	mov	r2, r6
   13608:	4641      	mov	r1, r8
   1360a:	4620      	mov	r0, r4
   1360c:	4798      	blx	r3
		if (write < 0) {
   1360e:	2800      	cmp	r0, #0
   13610:	dbd2      	blt.n	135b8 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   13612:	1e44      	subs	r4, r0, #1
   13614:	2c01      	cmp	r4, #1
   13616:	d9e7      	bls.n	135e8 <bt_gatt_attr_write_ccc+0x64>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   13618:	f06f 000d 	mvn.w	r0, #13
   1361c:	e7cc      	b.n	135b8 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1361e:	f06f 0006 	mvn.w	r0, #6
   13622:	e7c9      	b.n	135b8 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   13624:	f06f 000c 	mvn.w	r0, #12
   13628:	e7c6      	b.n	135b8 <bt_gatt_attr_write_ccc+0x34>
   1362a:	bf00      	nop
   1362c:	0002237e 	.word	0x0002237e

00013630 <cf_write>:
{
   13630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13634:	461f      	mov	r7, r3
   13636:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1363a:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
   1363c:	2b01      	cmp	r3, #1
{
   1363e:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   13640:	d845      	bhi.n	136ce <cf_write+0x9e>
	if (offset + len > sizeof(cfg->data)) {
   13642:	443b      	add	r3, r7
   13644:	2b01      	cmp	r3, #1
   13646:	463d      	mov	r5, r7
   13648:	dc44      	bgt.n	136d4 <cf_write+0xa4>
	cfg = find_cf_cfg(conn);
   1364a:	f7ff ff1d 	bl	13488 <find_cf_cfg>
	if (!cfg) {
   1364e:	4604      	mov	r4, r0
   13650:	b918      	cbnz	r0, 1365a <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   13652:	f7ff ff19 	bl	13488 <find_cf_cfg>
	if (!cfg) {
   13656:	4604      	mov	r4, r0
   13658:	b1d8      	cbz	r0, 13692 <cf_write+0x62>
   1365a:	4632      	mov	r2, r6
   1365c:	f104 0008 	add.w	r0, r4, #8
   13660:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   13664:	4596      	cmp	lr, r2
   13666:	d11d      	bne.n	136a4 <cf_write+0x74>
	for (i = 0U; i < len && i < last_byte; i++) {
   13668:	b12f      	cbz	r7, 13676 <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   1366a:	7833      	ldrb	r3, [r6, #0]
   1366c:	7a22      	ldrb	r2, [r4, #8]
   1366e:	f003 0307 	and.w	r3, r3, #7
   13672:	4313      	orrs	r3, r2
   13674:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13676:	f108 0188 	add.w	r1, r8, #136	; 0x88
   1367a:	1c60      	adds	r0, r4, #1
   1367c:	f009 fc55 	bl	1cf2a <bt_addr_le_copy>
	cfg->id = conn->id;
   13680:	4620      	mov	r0, r4
   13682:	f898 3008 	ldrb.w	r3, [r8, #8]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13686:	2101      	movs	r1, #1
   13688:	f800 3b0c 	strb.w	r3, [r0], #12
   1368c:	f009 fc5e 	bl	1cf4c <atomic_or>
}
   13690:	e005      	b.n	1369e <cf_write+0x6e>
		BT_WARN("No space to store Client Supported Features");
   13692:	2157      	movs	r1, #87	; 0x57
   13694:	4812      	ldr	r0, [pc, #72]	; (136e0 <cf_write+0xb0>)
   13696:	f007 fa0d 	bl	1aab4 <printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1369a:	f06f 0510 	mvn.w	r5, #16
}
   1369e:	4628      	mov	r0, r5
   136a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   136a4:	2300      	movs	r3, #0
   136a6:	f812 1b01 	ldrb.w	r1, [r2], #1
   136aa:	f810 cb01 	ldrb.w	ip, [r0], #1
   136ae:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
   136b2:	fa21 f903 	lsr.w	r9, r1, r3
   136b6:	f019 0f01 	tst.w	r9, #1
   136ba:	d004      	beq.n	136c6 <cf_write+0x96>
   136bc:	fa2c f903 	lsr.w	r9, ip, r3
   136c0:	f019 0f01 	tst.w	r9, #1
   136c4:	d109      	bne.n	136da <cf_write+0xaa>
		for (bit = 0U; bit <= last_bit; bit++) {
   136c6:	3301      	adds	r3, #1
   136c8:	2b03      	cmp	r3, #3
   136ca:	d1f2      	bne.n	136b2 <cf_write+0x82>
   136cc:	e7ca      	b.n	13664 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   136ce:	f06f 0506 	mvn.w	r5, #6
   136d2:	e7e4      	b.n	1369e <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   136d4:	f06f 050c 	mvn.w	r5, #12
   136d8:	e7e1      	b.n	1369e <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   136da:	f06f 0512 	mvn.w	r5, #18
   136de:	e7de      	b.n	1369e <cf_write+0x6e>
   136e0:	0002239d 	.word	0x0002239d

000136e4 <sc_store>:
{
   136e4:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   136e6:	4605      	mov	r5, r0
   136e8:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   136ec:	4604      	mov	r4, r0
   136ee:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   136f0:	b1ca      	cbz	r2, 13726 <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   136f2:	ae02      	add	r6, sp, #8
   136f4:	2104      	movs	r1, #4
   136f6:	4630      	mov	r0, r6
   136f8:	f007 f942 	bl	1a980 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   136fc:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   136fe:	462b      	mov	r3, r5
   13700:	2124      	movs	r1, #36	; 0x24
   13702:	4a0a      	ldr	r2, [pc, #40]	; (1372c <sc_store+0x48>)
   13704:	a803      	add	r0, sp, #12
   13706:	f7fb f8bb 	bl	e880 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1370a:	2204      	movs	r2, #4
   1370c:	f104 0108 	add.w	r1, r4, #8
   13710:	a803      	add	r0, sp, #12
   13712:	f7f8 fa85 	bl	bc20 <settings_save_one>
	if (err) {
   13716:	4602      	mov	r2, r0
   13718:	b118      	cbz	r0, 13722 <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   1371a:	2145      	movs	r1, #69	; 0x45
   1371c:	4804      	ldr	r0, [pc, #16]	; (13730 <sc_store+0x4c>)
   1371e:	f007 f9c9 	bl	1aab4 <printk>
}
   13722:	b00c      	add	sp, #48	; 0x30
   13724:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   13726:	9200      	str	r2, [sp, #0]
   13728:	e7e9      	b.n	136fe <sc_store+0x1a>
   1372a:	bf00      	nop
   1372c:	000226ed 	.word	0x000226ed
   13730:	000223ce 	.word	0x000223ce

00013734 <sc_save>:
{
   13734:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13738:	4680      	mov	r8, r0
   1373a:	460f      	mov	r7, r1
   1373c:	4616      	mov	r6, r2
   1373e:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   13740:	f7ff fec4 	bl	134cc <find_sc_cfg>
	if (!cfg) {
   13744:	4604      	mov	r4, r0
   13746:	b998      	cbnz	r0, 13770 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   13748:	4669      	mov	r1, sp
   1374a:	9000      	str	r0, [sp, #0]
   1374c:	f8cd 0003 	str.w	r0, [sp, #3]
   13750:	f7ff febc 	bl	134cc <find_sc_cfg>
		if (!cfg) {
   13754:	4604      	mov	r4, r0
   13756:	b930      	cbnz	r0, 13766 <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   13758:	2145      	movs	r1, #69	; 0x45
   1375a:	4813      	ldr	r0, [pc, #76]	; (137a8 <sc_save+0x74>)
   1375c:	f007 f9aa 	bl	1aab4 <printk>
}
   13760:	b002      	add	sp, #8
   13762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   13766:	4639      	mov	r1, r7
		cfg->id = id;
   13768:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1376c:	f009 fbdd 	bl	1cf2a <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   13770:	8922      	ldrh	r2, [r4, #8]
   13772:	8963      	ldrh	r3, [r4, #10]
   13774:	b97a      	cbnz	r2, 13796 <sc_save+0x62>
   13776:	b983      	cbnz	r3, 1379a <sc_save+0x66>
		cfg->data.start = start;
   13778:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1377a:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1377c:	4621      	mov	r1, r4
   1377e:	f811 0b01 	ldrb.w	r0, [r1], #1
   13782:	f008 fda2 	bl	1c2ca <bt_addr_le_is_bonded>
   13786:	2800      	cmp	r0, #0
   13788:	d0ea      	beq.n	13760 <sc_save+0x2c>
		sc_store(cfg);
   1378a:	4620      	mov	r0, r4
}
   1378c:	b002      	add	sp, #8
   1378e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   13792:	f7ff bfa7 	b.w	136e4 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   13796:	4296      	cmp	r6, r2
   13798:	d302      	bcc.n	137a0 <sc_save+0x6c>
   1379a:	429d      	cmp	r5, r3
   1379c:	d8ed      	bhi.n	1377a <sc_save+0x46>
   1379e:	e7df      	b.n	13760 <sc_save+0x2c>
	if (*end < new_end) {
   137a0:	429d      	cmp	r5, r3
		*start = new_start;
   137a2:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   137a4:	d9ea      	bls.n	1377c <sc_save+0x48>
   137a6:	e7e8      	b.n	1377a <sc_save+0x46>
   137a8:	000223ef 	.word	0x000223ef

000137ac <sc_set>:
{
   137ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   137b0:	460e      	mov	r6, r1
   137b2:	4690      	mov	r8, r2
   137b4:	4699      	mov	r9, r3
	if (!name) {
   137b6:	4604      	mov	r4, r0
{
   137b8:	b087      	sub	sp, #28
	if (!name) {
   137ba:	b948      	cbnz	r0, 137d0 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   137bc:	2145      	movs	r1, #69	; 0x45
   137be:	4829      	ldr	r0, [pc, #164]	; (13864 <sc_set+0xb8>)
   137c0:	f007 f978 	bl	1aab4 <printk>
		return -EINVAL;
   137c4:	f06f 0515 	mvn.w	r5, #21
}
   137c8:	4628      	mov	r0, r5
   137ca:	b007      	add	sp, #28
   137cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   137d0:	a902      	add	r1, sp, #8
   137d2:	f008 fc04 	bl	1bfde <bt_settings_decode_key>
	if (err) {
   137d6:	4605      	mov	r5, r0
   137d8:	b128      	cbz	r0, 137e6 <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   137da:	4622      	mov	r2, r4
   137dc:	2145      	movs	r1, #69	; 0x45
   137de:	4822      	ldr	r0, [pc, #136]	; (13868 <sc_set+0xbc>)
   137e0:	f007 f968 	bl	1aab4 <printk>
   137e4:	e7ee      	b.n	137c4 <sc_set+0x18>
	settings_name_next(name, &next);
   137e6:	4620      	mov	r0, r4
   137e8:	a901      	add	r1, sp, #4
   137ea:	f007 fc82 	bl	1b0f2 <settings_name_next>
	if (!next) {
   137ee:	9801      	ldr	r0, [sp, #4]
   137f0:	b1d8      	cbz	r0, 1382a <sc_set+0x7e>
		id = strtol(next, NULL, 10);
   137f2:	220a      	movs	r2, #10
   137f4:	4629      	mov	r1, r5
   137f6:	f008 fad3 	bl	1bda0 <strtol>
   137fa:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   137fc:	4638      	mov	r0, r7
   137fe:	a902      	add	r1, sp, #8
   13800:	f7ff fe64 	bl	134cc <find_sc_cfg>
	if (!cfg && len_rd) {
   13804:	4604      	mov	r4, r0
   13806:	bb28      	cbnz	r0, 13854 <sc_set+0xa8>
   13808:	2e00      	cmp	r6, #0
   1380a:	d0dd      	beq.n	137c8 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1380c:	a904      	add	r1, sp, #16
   1380e:	9004      	str	r0, [sp, #16]
   13810:	f8cd 0013 	str.w	r0, [sp, #19]
   13814:	f7ff fe5a 	bl	134cc <find_sc_cfg>
		if (!cfg) {
   13818:	4604      	mov	r4, r0
   1381a:	b940      	cbnz	r0, 1382e <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
   1381c:	2145      	movs	r1, #69	; 0x45
   1381e:	4813      	ldr	r0, [pc, #76]	; (1386c <sc_set+0xc0>)
   13820:	f007 f948 	bl	1aab4 <printk>
			return -ENOMEM;
   13824:	f06f 050b 	mvn.w	r5, #11
   13828:	e7ce      	b.n	137c8 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
   1382a:	462f      	mov	r7, r5
   1382c:	e7e6      	b.n	137fc <sc_set+0x50>
		cfg->id = id;
   1382e:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   13832:	a902      	add	r1, sp, #8
   13834:	f009 fb79 	bl	1cf2a <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   13838:	f104 0108 	add.w	r1, r4, #8
   1383c:	2204      	movs	r2, #4
   1383e:	4648      	mov	r0, r9
   13840:	47c0      	blx	r8
		if (len < 0) {
   13842:	1e04      	subs	r4, r0, #0
   13844:	dac0      	bge.n	137c8 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   13846:	4622      	mov	r2, r4
   13848:	2145      	movs	r1, #69	; 0x45
   1384a:	4809      	ldr	r0, [pc, #36]	; (13870 <sc_set+0xc4>)
   1384c:	f007 f932 	bl	1aab4 <printk>
			return len;
   13850:	4625      	mov	r5, r4
   13852:	e7b9      	b.n	137c8 <sc_set+0x1c>
	if (len_rd) {
   13854:	2e00      	cmp	r6, #0
   13856:	d1ef      	bne.n	13838 <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
   13858:	220c      	movs	r2, #12
   1385a:	4631      	mov	r1, r6
   1385c:	f008 fb99 	bl	1bf92 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   13860:	e7b2      	b.n	137c8 <sc_set+0x1c>
   13862:	bf00      	nop
   13864:	0002131c 	.word	0x0002131c
   13868:	00022413 	.word	0x00022413
   1386c:	00022434 	.word	0x00022434
   13870:	00022325 	.word	0x00022325

00013874 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   13874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13878:	4606      	mov	r6, r0
   1387a:	4688      	mov	r8, r1
   1387c:	4617      	mov	r7, r2
	if (params) {
   1387e:	461c      	mov	r4, r3
   13880:	b31b      	cbz	r3, 138ca <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   13882:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   13886:	2100      	movs	r1, #0
   13888:	f7ff fc3a 	bl	13100 <bt_att_req_alloc>
		if (!req) {
   1388c:	4605      	mov	r5, r0
   1388e:	b920      	cbnz	r0, 1389a <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   13890:	f06f 040b 	mvn.w	r4, #11
}
   13894:	4620      	mov	r0, r4
   13896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   1389a:	2300      	movs	r3, #0
		req->user_data = params;
   1389c:	6144      	str	r4, [r0, #20]
		err = bt_att_req_send(conn, req);
   1389e:	4601      	mov	r1, r0
		req->buf = buf;
   138a0:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   138a4:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   138a6:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   138a8:	4630      	mov	r0, r6
   138aa:	f7ff fd55 	bl	13358 <bt_att_req_send>
		if (err) {
   138ae:	4604      	mov	r4, r0
   138b0:	2800      	cmp	r0, #0
   138b2:	d0ef      	beq.n	13894 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   138b4:	4628      	mov	r0, r5
   138b6:	f7ff fc39 	bl	1312c <bt_att_req_free>
	if (err) {
   138ba:	2c00      	cmp	r4, #0
   138bc:	d0ea      	beq.n	13894 <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
   138be:	4622      	mov	r2, r4
   138c0:	2145      	movs	r1, #69	; 0x45
   138c2:	4804      	ldr	r0, [pc, #16]	; (138d4 <gatt_send.constprop.0+0x60>)
   138c4:	f007 f8f6 	bl	1aab4 <printk>
   138c8:	e7e4      	b.n	13894 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
   138ca:	461a      	mov	r2, r3
   138cc:	f7ff fcdc 	bl	13288 <bt_att_send>
   138d0:	4604      	mov	r4, r0
   138d2:	e7f2      	b.n	138ba <gatt_send.constprop.0+0x46>
   138d4:	0002245b 	.word	0x0002245b

000138d8 <cf_set>:
{
   138d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   138dc:	4689      	mov	r9, r1
   138de:	4617      	mov	r7, r2
   138e0:	4698      	mov	r8, r3
	if (!name) {
   138e2:	4605      	mov	r5, r0
{
   138e4:	b085      	sub	sp, #20
	if (!name) {
   138e6:	b948      	cbnz	r0, 138fc <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
   138e8:	2145      	movs	r1, #69	; 0x45
   138ea:	4826      	ldr	r0, [pc, #152]	; (13984 <cf_set+0xac>)
   138ec:	f007 f8e2 	bl	1aab4 <printk>
		return -EINVAL;
   138f0:	f06f 0415 	mvn.w	r4, #21
}
   138f4:	4620      	mov	r0, r4
   138f6:	b005      	add	sp, #20
   138f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   138fc:	a902      	add	r1, sp, #8
   138fe:	f008 fb6e 	bl	1bfde <bt_settings_decode_key>
	if (err) {
   13902:	4604      	mov	r4, r0
   13904:	b128      	cbz	r0, 13912 <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   13906:	462a      	mov	r2, r5
   13908:	2145      	movs	r1, #69	; 0x45
   1390a:	481f      	ldr	r0, [pc, #124]	; (13988 <cf_set+0xb0>)
   1390c:	f007 f8d2 	bl	1aab4 <printk>
   13910:	e7ee      	b.n	138f0 <cf_set+0x18>
	settings_name_next(name, &next);
   13912:	4628      	mov	r0, r5
   13914:	a901      	add	r1, sp, #4
   13916:	f007 fbec 	bl	1b0f2 <settings_name_next>
	if (!next) {
   1391a:	9801      	ldr	r0, [sp, #4]
   1391c:	b1a8      	cbz	r0, 1394a <cf_set+0x72>
		id = strtol(next, NULL, 10);
   1391e:	220a      	movs	r2, #10
   13920:	4621      	mov	r1, r4
   13922:	f008 fa3d 	bl	1bda0 <strtol>
   13926:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   13928:	4630      	mov	r0, r6
   1392a:	a902      	add	r1, sp, #8
   1392c:	f7ff fe0c 	bl	13548 <find_cf_cfg_by_addr>
	if (!cfg) {
   13930:	4605      	mov	r5, r0
   13932:	b988      	cbnz	r0, 13958 <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
   13934:	f7ff fda8 	bl	13488 <find_cf_cfg>
		if (!cfg) {
   13938:	4605      	mov	r5, r0
   1393a:	b940      	cbnz	r0, 1394e <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
   1393c:	2145      	movs	r1, #69	; 0x45
   1393e:	4813      	ldr	r0, [pc, #76]	; (1398c <cf_set+0xb4>)
   13940:	f007 f8b8 	bl	1aab4 <printk>
			return -ENOMEM;
   13944:	f06f 040b 	mvn.w	r4, #11
   13948:	e7d4      	b.n	138f4 <cf_set+0x1c>
		id = BT_ID_DEFAULT;
   1394a:	4626      	mov	r6, r4
   1394c:	e7ec      	b.n	13928 <cf_set+0x50>
		cfg->id = id;
   1394e:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   13952:	a902      	add	r1, sp, #8
   13954:	f009 fae9 	bl	1cf2a <bt_addr_le_copy>
	if (len_rd) {
   13958:	f1b9 0f00 	cmp.w	r9, #0
   1395c:	d00d      	beq.n	1397a <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1395e:	f105 0108 	add.w	r1, r5, #8
   13962:	2201      	movs	r2, #1
   13964:	4640      	mov	r0, r8
   13966:	47b8      	blx	r7
		if (len < 0) {
   13968:	1e05      	subs	r5, r0, #0
   1396a:	dac3      	bge.n	138f4 <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   1396c:	462a      	mov	r2, r5
   1396e:	2145      	movs	r1, #69	; 0x45
   13970:	4807      	ldr	r0, [pc, #28]	; (13990 <cf_set+0xb8>)
   13972:	f007 f89f 	bl	1aab4 <printk>
			return len;
   13976:	462c      	mov	r4, r5
   13978:	e7bc      	b.n	138f4 <cf_set+0x1c>
		clear_cf_cfg(cfg);
   1397a:	4628      	mov	r0, r5
   1397c:	f009 fb1b 	bl	1cfb6 <clear_cf_cfg>
   13980:	e7b8      	b.n	138f4 <cf_set+0x1c>
   13982:	bf00      	nop
   13984:	0002131c 	.word	0x0002131c
   13988:	00022413 	.word	0x00022413
   1398c:	0002247a 	.word	0x0002247a
   13990:	00022325 	.word	0x00022325

00013994 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   13994:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   13996:	6881      	ldr	r1, [r0, #8]
{
   13998:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1399a:	4a07      	ldr	r2, [pc, #28]	; (139b8 <remove_peer_from_attr+0x24>)
   1399c:	4291      	cmp	r1, r2
   1399e:	d109      	bne.n	139b4 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   139a0:	791a      	ldrb	r2, [r3, #4]
   139a2:	6819      	ldr	r1, [r3, #0]
   139a4:	68c0      	ldr	r0, [r0, #12]
   139a6:	f009 faa6 	bl	1cef6 <ccc_find_cfg>
	if (cfg) {
   139aa:	b118      	cbz	r0, 139b4 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   139ac:	220a      	movs	r2, #10
   139ae:	2100      	movs	r1, #0
   139b0:	f008 faef 	bl	1bf92 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   139b4:	2001      	movs	r0, #1
   139b6:	bd08      	pop	{r3, pc}
   139b8:	00013585 	.word	0x00013585

000139bc <ccc_load>:
{
   139bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   139be:	4b21      	ldr	r3, [pc, #132]	; (13a44 <ccc_load+0x88>)
{
   139c0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   139c2:	6882      	ldr	r2, [r0, #8]
   139c4:	429a      	cmp	r2, r3
   139c6:	d002      	beq.n	139ce <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   139c8:	2001      	movs	r0, #1
}
   139ca:	b002      	add	sp, #8
   139cc:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   139ce:	68a3      	ldr	r3, [r4, #8]
   139d0:	68c6      	ldr	r6, [r0, #12]
   139d2:	b94b      	cbnz	r3, 139e8 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   139d4:	4630      	mov	r0, r6
   139d6:	7922      	ldrb	r2, [r4, #4]
   139d8:	6821      	ldr	r1, [r4, #0]
   139da:	f009 fa8c 	bl	1cef6 <ccc_find_cfg>
	if (!cfg) {
   139de:	2800      	cmp	r0, #0
   139e0:	d0f2      	beq.n	139c8 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   139e2:	f009 faa5 	bl	1cf30 <clear_ccc_cfg>
   139e6:	e7ef      	b.n	139c8 <ccc_load+0xc>
	} else if (!load->count) {
   139e8:	68e0      	ldr	r0, [r4, #12]
   139ea:	2800      	cmp	r0, #0
   139ec:	d0ed      	beq.n	139ca <ccc_load+0xe>
	if (load->entry->handle != handle) {
   139ee:	881b      	ldrh	r3, [r3, #0]
   139f0:	4299      	cmp	r1, r3
   139f2:	d00a      	beq.n	13a0a <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   139f4:	d9e8      	bls.n	139c8 <ccc_load+0xc>
	load->count--;
   139f6:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   139f8:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   139fa:	3801      	subs	r0, #1
	load->entry++;
   139fc:	3304      	adds	r3, #4
	load->count--;
   139fe:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   13a00:	3800      	subs	r0, #0
   13a02:	bf18      	it	ne
   13a04:	2001      	movne	r0, #1
	load->entry++;
   13a06:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   13a08:	e7df      	b.n	139ca <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   13a0a:	4630      	mov	r0, r6
   13a0c:	7922      	ldrb	r2, [r4, #4]
   13a0e:	6821      	ldr	r1, [r4, #0]
   13a10:	f009 fa71 	bl	1cef6 <ccc_find_cfg>
	if (!cfg) {
   13a14:	4605      	mov	r5, r0
   13a16:	b980      	cbnz	r0, 13a3a <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   13a18:	9000      	str	r0, [sp, #0]
   13a1a:	4602      	mov	r2, r0
   13a1c:	f8cd 0003 	str.w	r0, [sp, #3]
   13a20:	4669      	mov	r1, sp
   13a22:	4630      	mov	r0, r6
   13a24:	f009 fa67 	bl	1cef6 <ccc_find_cfg>
		if (!cfg) {
   13a28:	4605      	mov	r5, r0
   13a2a:	2800      	cmp	r0, #0
   13a2c:	d0e3      	beq.n	139f6 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   13a2e:	6821      	ldr	r1, [r4, #0]
   13a30:	3001      	adds	r0, #1
   13a32:	f009 fa7a 	bl	1cf2a <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   13a36:	7923      	ldrb	r3, [r4, #4]
   13a38:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   13a3a:	68a3      	ldr	r3, [r4, #8]
   13a3c:	885b      	ldrh	r3, [r3, #2]
   13a3e:	812b      	strh	r3, [r5, #8]
   13a40:	e7d9      	b.n	139f6 <ccc_load+0x3a>
   13a42:	bf00      	nop
   13a44:	00013585 	.word	0x00013585

00013a48 <ccc_save>:
{
   13a48:	b538      	push	{r3, r4, r5, lr}
   13a4a:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a4c:	4b0b      	ldr	r3, [pc, #44]	; (13a7c <ccc_save+0x34>)
   13a4e:	6882      	ldr	r2, [r0, #8]
{
   13a50:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   13a52:	429a      	cmp	r2, r3
   13a54:	d10f      	bne.n	13a76 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   13a56:	7922      	ldrb	r2, [r4, #4]
   13a58:	6821      	ldr	r1, [r4, #0]
   13a5a:	68c0      	ldr	r0, [r0, #12]
   13a5c:	f009 fa4b 	bl	1cef6 <ccc_find_cfg>
	if (!cfg) {
   13a60:	b148      	cbz	r0, 13a76 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   13a62:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   13a66:	8901      	ldrh	r1, [r0, #8]
   13a68:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   13a6c:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   13a6e:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   13a70:	8151      	strh	r1, [r2, #10]
	save->count++;
   13a72:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   13a76:	2001      	movs	r0, #1
   13a78:	bd38      	pop	{r3, r4, r5, pc}
   13a7a:	bf00      	nop
   13a7c:	00013585 	.word	0x00013585

00013a80 <gatt_indicate>:
{
   13a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13a84:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
   13a86:	8a92      	ldrh	r2, [r2, #20]
{
   13a88:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   13a8a:	3202      	adds	r2, #2
   13a8c:	211d      	movs	r1, #29
{
   13a8e:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   13a90:	f7ff f8b6 	bl	12c00 <bt_att_create_pdu>
	if (!buf) {
   13a94:	4605      	mov	r5, r0
   13a96:	b1e8      	cbz	r0, 13ad4 <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
   13a98:	f100 0808 	add.w	r8, r0, #8
   13a9c:	2102      	movs	r1, #2
   13a9e:	4640      	mov	r0, r8
   13aa0:	f002 f8a8 	bl	15bf4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   13aa4:	4606      	mov	r6, r0
   13aa6:	8aa1      	ldrh	r1, [r4, #20]
   13aa8:	f826 9b02 	strh.w	r9, [r6], #2
   13aac:	4640      	mov	r0, r8
   13aae:	f002 f8a1 	bl	15bf4 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   13ab2:	4630      	mov	r0, r6
   13ab4:	8aa2      	ldrh	r2, [r4, #20]
   13ab6:	6921      	ldr	r1, [r4, #16]
   13ab8:	f008 fa40 	bl	1bf3c <memcpy>
	if (!params->func) {
   13abc:	68a3      	ldr	r3, [r4, #8]
   13abe:	b933      	cbnz	r3, 13ace <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
   13ac0:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   13ac2:	4629      	mov	r1, r5
   13ac4:	4638      	mov	r0, r7
}
   13ac6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   13aca:	f7ff bed3 	b.w	13874 <gatt_send.constprop.0>
   13ace:	4623      	mov	r3, r4
   13ad0:	4a04      	ldr	r2, [pc, #16]	; (13ae4 <gatt_indicate+0x64>)
   13ad2:	e7f6      	b.n	13ac2 <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
   13ad4:	2157      	movs	r1, #87	; 0x57
   13ad6:	4804      	ldr	r0, [pc, #16]	; (13ae8 <gatt_indicate+0x68>)
   13ad8:	f006 ffec 	bl	1aab4 <printk>
}
   13adc:	f06f 000b 	mvn.w	r0, #11
   13ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13ae4:	0001cdd7 	.word	0x0001cdd7
   13ae8:	000224a1 	.word	0x000224a1

00013aec <gatt_notify>:
{
   13aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13af0:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   13af2:	8992      	ldrh	r2, [r2, #12]
{
   13af4:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   13af6:	3202      	adds	r2, #2
   13af8:	211b      	movs	r1, #27
{
   13afa:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   13afc:	f7ff f880 	bl	12c00 <bt_att_create_pdu>
	if (!buf) {
   13b00:	4605      	mov	r5, r0
   13b02:	b1c8      	cbz	r0, 13b38 <gatt_notify+0x4c>
   13b04:	f100 0908 	add.w	r9, r0, #8
   13b08:	2102      	movs	r1, #2
   13b0a:	4648      	mov	r0, r9
   13b0c:	f002 f872 	bl	15bf4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   13b10:	4606      	mov	r6, r0
   13b12:	89a1      	ldrh	r1, [r4, #12]
   13b14:	f826 8b02 	strh.w	r8, [r6], #2
   13b18:	4648      	mov	r0, r9
   13b1a:	f002 f86b 	bl	15bf4 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   13b1e:	89a2      	ldrh	r2, [r4, #12]
   13b20:	68a1      	ldr	r1, [r4, #8]
   13b22:	4630      	mov	r0, r6
   13b24:	f008 fa0a 	bl	1bf3c <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   13b28:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   13b2c:	4629      	mov	r1, r5
   13b2e:	4638      	mov	r0, r7
}
   13b30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   13b34:	f7ff bba8 	b.w	13288 <bt_att_send>
		BT_WARN("No buffer available to send notification");
   13b38:	2157      	movs	r1, #87	; 0x57
   13b3a:	4803      	ldr	r0, [pc, #12]	; (13b48 <gatt_notify+0x5c>)
   13b3c:	f006 ffba 	bl	1aab4 <printk>
}
   13b40:	f06f 000b 	mvn.w	r0, #11
   13b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13b48:	000224cd 	.word	0x000224cd

00013b4c <notify_cb>:
{
   13b4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13b50:	4b38      	ldr	r3, [pc, #224]	; (13c34 <notify_cb+0xe8>)
{
   13b52:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13b54:	6882      	ldr	r2, [r0, #8]
{
   13b56:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13b58:	429a      	cmp	r2, r3
   13b5a:	d003      	beq.n	13b64 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   13b5c:	2001      	movs	r0, #1
}
   13b5e:	b003      	add	sp, #12
   13b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   13b64:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   13b68:	4b33      	ldr	r3, [pc, #204]	; (13c38 <notify_cb+0xec>)
   13b6a:	4599      	cmp	r9, r3
   13b6c:	d01a      	beq.n	13ba4 <notify_cb+0x58>
   13b6e:	f04f 0b00 	mov.w	fp, #0
   13b72:	f109 0701 	add.w	r7, r9, #1
   13b76:	f109 0a65 	add.w	sl, r9, #101	; 0x65
		if (cfg->value != data->type) {
   13b7a:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   13b7e:	89a3      	ldrh	r3, [r4, #12]
   13b80:	429a      	cmp	r2, r3
   13b82:	d10b      	bne.n	13b9c <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13b84:	4639      	mov	r1, r7
   13b86:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   13b8a:	f7fd feab 	bl	118e4 <bt_conn_lookup_addr_le>
		if (!conn) {
   13b8e:	4605      	mov	r5, r0
   13b90:	b120      	cbz	r0, 13b9c <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   13b92:	7a83      	ldrb	r3, [r0, #10]
   13b94:	2b07      	cmp	r3, #7
   13b96:	d029      	beq.n	13bec <notify_cb+0xa0>
			bt_conn_unref(conn);
   13b98:	f7fd fd82 	bl	116a0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13b9c:	370a      	adds	r7, #10
   13b9e:	4557      	cmp	r7, sl
   13ba0:	d1eb      	bne.n	13b7a <notify_cb+0x2e>
   13ba2:	e7db      	b.n	13b5c <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13ba4:	2600      	movs	r6, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   13ba6:	4637      	mov	r7, r6
   13ba8:	4d24      	ldr	r5, [pc, #144]	; (13c3c <notify_cb+0xf0>)
   13baa:	4669      	mov	r1, sp
   13bac:	4628      	mov	r0, r5
   13bae:	9700      	str	r7, [sp, #0]
   13bb0:	f8cd 7003 	str.w	r7, [sp, #3]
   13bb4:	f009 f97d 	bl	1ceb2 <bt_addr_le_cmp>
   13bb8:	b178      	cbz	r0, 13bda <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   13bba:	2207      	movs	r2, #7
   13bbc:	4629      	mov	r1, r5
   13bbe:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   13bc2:	f7fd fecf 	bl	11964 <bt_conn_lookup_state_le>
			if (!conn) {
   13bc6:	b970      	cbnz	r0, 13be6 <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   13bc8:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   13bca:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   13bcc:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   13bce:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   13bd2:	8853      	ldrh	r3, [r2, #2]
   13bd4:	8812      	ldrh	r2, [r2, #0]
   13bd6:	f7ff fdad 	bl	13734 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13bda:	3601      	adds	r6, #1
   13bdc:	2e14      	cmp	r6, #20
   13bde:	f105 050c 	add.w	r5, r5, #12
   13be2:	d1e2      	bne.n	13baa <notify_cb+0x5e>
   13be4:	e7c3      	b.n	13b6e <notify_cb+0x22>
			bt_conn_unref(conn);
   13be6:	f7fd fd5b 	bl	116a0 <bt_conn_unref>
   13bea:	e7f6      	b.n	13bda <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   13bec:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
   13bf0:	b123      	cbz	r3, 13bfc <notify_cb+0xb0>
   13bf2:	4641      	mov	r1, r8
   13bf4:	4798      	blx	r3
   13bf6:	b908      	cbnz	r0, 13bfc <notify_cb+0xb0>
			bt_conn_unref(conn);
   13bf8:	4628      	mov	r0, r5
   13bfa:	e7cd      	b.n	13b98 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   13bfc:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   13bfe:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   13c00:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   13c02:	88a1      	ldrh	r1, [r4, #4]
   13c04:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   13c06:	d10f      	bne.n	13c28 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   13c08:	f7ff ff3a 	bl	13a80 <gatt_indicate>
			if (err == 0) {
   13c0c:	4606      	mov	r6, r0
   13c0e:	b918      	cbnz	r0, 13c18 <notify_cb+0xcc>
				data->ind_params->_ref++;
   13c10:	6922      	ldr	r2, [r4, #16]
   13c12:	7d93      	ldrb	r3, [r2, #22]
   13c14:	3301      	adds	r3, #1
   13c16:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   13c18:	4628      	mov	r0, r5
   13c1a:	f7fd fd41 	bl	116a0 <bt_conn_unref>
		if (err < 0) {
   13c1e:	2e00      	cmp	r6, #0
   13c20:	db06      	blt.n	13c30 <notify_cb+0xe4>
		data->err = 0;
   13c22:	f8c4 b008 	str.w	fp, [r4, #8]
   13c26:	e7b9      	b.n	13b9c <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   13c28:	f7ff ff60 	bl	13aec <gatt_notify>
   13c2c:	4606      	mov	r6, r0
   13c2e:	e7f3      	b.n	13c18 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   13c30:	2000      	movs	r0, #0
   13c32:	e794      	b.n	13b5e <notify_cb+0x12>
   13c34:	00013585 	.word	0x00013585
   13c38:	2000847c 	.word	0x2000847c
   13c3c:	2000f1ab 	.word	0x2000f1ab

00013c40 <bt_gatt_clear_sc>:
{
   13c40:	b570      	push	{r4, r5, r6, lr}
   13c42:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   13c44:	f7ff fc42 	bl	134cc <find_sc_cfg>
	if (!cfg) {
   13c48:	4604      	mov	r4, r0
   13c4a:	b1e8      	cbz	r0, 13c88 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   13c4c:	4605      	mov	r5, r0
   13c4e:	f815 2b01 	ldrb.w	r2, [r5], #1
   13c52:	b1e2      	cbz	r2, 13c8e <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   13c54:	ae02      	add	r6, sp, #8
   13c56:	2104      	movs	r1, #4
   13c58:	4630      	mov	r0, r6
   13c5a:	f006 fe91 	bl	1a980 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   13c5e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   13c60:	4a0c      	ldr	r2, [pc, #48]	; (13c94 <bt_gatt_clear_sc+0x54>)
   13c62:	462b      	mov	r3, r5
   13c64:	2124      	movs	r1, #36	; 0x24
   13c66:	a803      	add	r0, sp, #12
   13c68:	f7fa fe0a 	bl	e880 <bt_settings_encode_key>
		err = settings_delete(key);
   13c6c:	a803      	add	r0, sp, #12
   13c6e:	f007 fa19 	bl	1b0a4 <settings_delete>
		if (err) {
   13c72:	4602      	mov	r2, r0
   13c74:	b118      	cbz	r0, 13c7e <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   13c76:	2145      	movs	r1, #69	; 0x45
   13c78:	4807      	ldr	r0, [pc, #28]	; (13c98 <bt_gatt_clear_sc+0x58>)
   13c7a:	f006 ff1b 	bl	1aab4 <printk>
	memset(cfg, 0, sizeof(*cfg));
   13c7e:	220c      	movs	r2, #12
   13c80:	2100      	movs	r1, #0
   13c82:	4620      	mov	r0, r4
   13c84:	f008 f985 	bl	1bf92 <memset>
}
   13c88:	2000      	movs	r0, #0
   13c8a:	b00c      	add	sp, #48	; 0x30
   13c8c:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   13c8e:	9200      	str	r2, [sp, #0]
   13c90:	e7e6      	b.n	13c60 <bt_gatt_clear_sc+0x20>
   13c92:	bf00      	nop
   13c94:	000226ed 	.word	0x000226ed
   13c98:	000224fb 	.word	0x000224fb

00013c9c <sc_clear>:
{
   13c9c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13c9e:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   13ca2:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13ca4:	4631      	mov	r1, r6
   13ca6:	7a00      	ldrb	r0, [r0, #8]
   13ca8:	f008 fb0f 	bl	1c2ca <bt_addr_le_is_bonded>
   13cac:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13cae:	4631      	mov	r1, r6
   13cb0:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13cb2:	b14d      	cbz	r5, 13cc8 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13cb4:	f7ff ffc4 	bl	13c40 <bt_gatt_clear_sc>
		if (err) {
   13cb8:	4602      	mov	r2, r0
   13cba:	b170      	cbz	r0, 13cda <sc_clear+0x3e>
}
   13cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   13cc0:	2145      	movs	r1, #69	; 0x45
   13cc2:	4806      	ldr	r0, [pc, #24]	; (13cdc <sc_clear+0x40>)
   13cc4:	f006 bef6 	b.w	1aab4 <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   13cc8:	f7ff fc00 	bl	134cc <find_sc_cfg>
		if (cfg) {
   13ccc:	b128      	cbz	r0, 13cda <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   13cce:	4629      	mov	r1, r5
}
   13cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   13cd4:	220c      	movs	r2, #12
   13cd6:	f008 b95c 	b.w	1bf92 <memset>
}
   13cda:	bd70      	pop	{r4, r5, r6, pc}
   13cdc:	0002251d 	.word	0x0002251d

00013ce0 <disconnected_cb>:
{
   13ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ce4:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13ce6:	4b26      	ldr	r3, [pc, #152]	; (13d80 <disconnected_cb+0xa0>)
   13ce8:	6882      	ldr	r2, [r0, #8]
{
   13cea:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13cec:	429a      	cmp	r2, r3
   13cee:	d130      	bne.n	13d52 <disconnected_cb+0x72>
	ccc = attr->user_data;
   13cf0:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   13cf2:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
   13cf6:	b363      	cbz	r3, 13d52 <disconnected_cb+0x72>
	value_used = false;
   13cf8:	f04f 0800 	mov.w	r8, #0
				if (ccc == &sc_ccc) {
   13cfc:	f8df b084 	ldr.w	fp, [pc, #132]	; 13d84 <disconnected_cb+0xa4>
   13d00:	1c6c      	adds	r4, r5, #1
   13d02:	f105 0a65 	add.w	sl, r5, #101	; 0x65
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13d06:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   13d0a:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   13d0e:	b19b      	cbz	r3, 13d38 <disconnected_cb+0x58>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13d10:	4622      	mov	r2, r4
   13d12:	4630      	mov	r0, r6
   13d14:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   13d18:	f008 fb6b 	bl	1c3f2 <bt_conn_is_peer_addr_le>
   13d1c:	b9e0      	cbnz	r0, 13d58 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   13d1e:	4621      	mov	r1, r4
   13d20:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   13d24:	f7fd fdde 	bl	118e4 <bt_conn_lookup_addr_le>
			if (tmp) {
   13d28:	b130      	cbz	r0, 13d38 <disconnected_cb+0x58>
				if (tmp->state == BT_CONN_CONNECTED) {
   13d2a:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
   13d2c:	2b07      	cmp	r3, #7
   13d2e:	bf08      	it	eq
   13d30:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   13d34:	f7fd fcb4 	bl	116a0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13d38:	340a      	adds	r4, #10
   13d3a:	45a2      	cmp	sl, r4
   13d3c:	d1e5      	bne.n	13d0a <disconnected_cb+0x2a>
	if (!value_used) {
   13d3e:	f1b8 0f00 	cmp.w	r8, #0
   13d42:	d106      	bne.n	13d52 <disconnected_cb+0x72>
		if (ccc->cfg_changed) {
   13d44:	6eab      	ldr	r3, [r5, #104]	; 0x68
		ccc->value = 0U;
   13d46:	f8a5 8064 	strh.w	r8, [r5, #100]	; 0x64
		if (ccc->cfg_changed) {
   13d4a:	b113      	cbz	r3, 13d52 <disconnected_cb+0x72>
			ccc->cfg_changed(attr, ccc->value);
   13d4c:	4641      	mov	r1, r8
   13d4e:	4638      	mov	r0, r7
   13d50:	4798      	blx	r3
}
   13d52:	2001      	movs	r0, #1
   13d54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13d58:	4649      	mov	r1, r9
   13d5a:	7a30      	ldrb	r0, [r6, #8]
   13d5c:	f008 fab5 	bl	1c2ca <bt_addr_le_is_bonded>
   13d60:	b940      	cbnz	r0, 13d74 <disconnected_cb+0x94>
				if (ccc == &sc_ccc) {
   13d62:	455d      	cmp	r5, fp
   13d64:	d102      	bne.n	13d6c <disconnected_cb+0x8c>
					sc_clear(conn);
   13d66:	4630      	mov	r0, r6
   13d68:	f7ff ff98 	bl	13c9c <sc_clear>
				clear_ccc_cfg(cfg);
   13d6c:	1e60      	subs	r0, r4, #1
   13d6e:	f009 f8df 	bl	1cf30 <clear_ccc_cfg>
   13d72:	e7e1      	b.n	13d38 <disconnected_cb+0x58>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   13d74:	4649      	mov	r1, r9
   13d76:	4620      	mov	r0, r4
   13d78:	f009 f8d7 	bl	1cf2a <bt_addr_le_copy>
   13d7c:	e7dc      	b.n	13d38 <disconnected_cb+0x58>
   13d7e:	bf00      	nop
   13d80:	00013585 	.word	0x00013585
   13d84:	2000847c 	.word	0x2000847c

00013d88 <sc_commit>:
{
   13d88:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13d8a:	490b      	ldr	r1, [pc, #44]	; (13db8 <sc_commit+0x30>)
   13d8c:	e8d1 3fef 	ldaex	r3, [r1]
   13d90:	f023 0302 	bic.w	r3, r3, #2
   13d94:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13d98:	2a00      	cmp	r2, #0
   13d9a:	d1f7      	bne.n	13d8c <sc_commit+0x4>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13d9c:	4608      	mov	r0, r1
   13d9e:	f009 f8e0 	bl	1cf62 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13da2:	07c3      	lsls	r3, r0, #31
   13da4:	d506      	bpl.n	13db4 <sc_commit+0x2c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13da6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13daa:	2300      	movs	r3, #0
   13dac:	4803      	ldr	r0, [pc, #12]	; (13dbc <sc_commit+0x34>)
   13dae:	3930      	subs	r1, #48	; 0x30
   13db0:	f005 ff0a 	bl	19bc8 <k_delayed_work_submit_to_queue>
}
   13db4:	2000      	movs	r0, #0
   13db6:	bd08      	pop	{r3, pc}
   13db8:	20009c68 	.word	0x20009c68
   13dbc:	2000a540 	.word	0x2000a540

00013dc0 <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13dc4:	4688      	mov	r8, r1
   13dc6:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13dc8:	2112      	movs	r1, #18
   13dca:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13dcc:	4606      	mov	r6, r0
   13dce:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13dd0:	f7fe ff16 	bl	12c00 <bt_att_create_pdu>
	if (!buf) {
   13dd4:	4604      	mov	r4, r0
   13dd6:	b1c0      	cbz	r0, 13e0a <gatt_write_ccc.constprop.0+0x4a>
   13dd8:	f100 0908 	add.w	r9, r0, #8
   13ddc:	2102      	movs	r1, #2
   13dde:	4648      	mov	r0, r9
   13de0:	f001 ff08 	bl	15bf4 <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
   13de4:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
   13de6:	f8a0 8000 	strh.w	r8, [r0]
   13dea:	4648      	mov	r0, r9
   13dec:	f009 fbf7 	bl	1d5de <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13df0:	2104      	movs	r1, #4
   13df2:	f105 0010 	add.w	r0, r5, #16
   13df6:	f009 f8a9 	bl	1cf4c <atomic_or>
	return gatt_send(conn, buf, func, params, NULL);
   13dfa:	462b      	mov	r3, r5
   13dfc:	4621      	mov	r1, r4
   13dfe:	4630      	mov	r0, r6
}
   13e00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
   13e04:	4a03      	ldr	r2, [pc, #12]	; (13e14 <gatt_write_ccc.constprop.0+0x54>)
   13e06:	f7ff bd35 	b.w	13874 <gatt_send.constprop.0>
}
   13e0a:	f06f 000b 	mvn.w	r0, #11
   13e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13e12:	bf00      	nop
   13e14:	0001d045 	.word	0x0001d045

00013e18 <sc_indicate_rsp>:
{
   13e18:	b510      	push	{r4, lr}
   13e1a:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13e1c:	4910      	ldr	r1, [pc, #64]	; (13e60 <sc_indicate_rsp+0x48>)
   13e1e:	e8d1 3fef 	ldaex	r3, [r1]
   13e22:	f023 0302 	bic.w	r3, r3, #2
   13e26:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13e2a:	2a00      	cmp	r2, #0
   13e2c:	d1f7      	bne.n	13e1e <sc_indicate_rsp+0x6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13e2e:	4608      	mov	r0, r1
   13e30:	f009 f897 	bl	1cf62 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13e34:	07c2      	lsls	r2, r0, #31
   13e36:	d505      	bpl.n	13e44 <sc_indicate_rsp+0x2c>
   13e38:	2200      	movs	r2, #0
   13e3a:	2300      	movs	r3, #0
   13e3c:	4809      	ldr	r0, [pc, #36]	; (13e64 <sc_indicate_rsp+0x4c>)
   13e3e:	3930      	subs	r1, #48	; 0x30
   13e40:	f005 fec2 	bl	19bc8 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   13e44:	4620      	mov	r0, r4
   13e46:	f7ff fb1f 	bl	13488 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   13e4a:	b140      	cbz	r0, 13e5e <sc_indicate_rsp+0x46>
   13e4c:	7a03      	ldrb	r3, [r0, #8]
   13e4e:	07db      	lsls	r3, r3, #31
   13e50:	d505      	bpl.n	13e5e <sc_indicate_rsp+0x46>
}
   13e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13e56:	2101      	movs	r1, #1
   13e58:	300c      	adds	r0, #12
   13e5a:	f009 b877 	b.w	1cf4c <atomic_or>
   13e5e:	bd10      	pop	{r4, pc}
   13e60:	20009c68 	.word	0x20009c68
   13e64:	2000a540 	.word	0x2000a540

00013e68 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13e68:	2201      	movs	r2, #1
{
   13e6a:	b570      	push	{r4, r5, r6, lr}
   13e6c:	4b26      	ldr	r3, [pc, #152]	; (13f08 <bt_gatt_init+0xa0>)
   13e6e:	e8d3 1fef 	ldaex	r1, [r3]
   13e72:	2900      	cmp	r1, #0
   13e74:	d103      	bne.n	13e7e <bt_gatt_init+0x16>
   13e76:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13e7a:	2800      	cmp	r0, #0
   13e7c:	d1f7      	bne.n	13e6e <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   13e7e:	d142      	bne.n	13f06 <bt_gatt_init+0x9e>
   13e80:	4b22      	ldr	r3, [pc, #136]	; (13f0c <bt_gatt_init+0xa4>)
   13e82:	e8d3 1fef 	ldaex	r1, [r3]
   13e86:	2900      	cmp	r1, #0
   13e88:	d103      	bne.n	13e92 <bt_gatt_init+0x2a>
   13e8a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13e8e:	2800      	cmp	r0, #0
   13e90:	d1f7      	bne.n	13e82 <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   13e92:	d034      	beq.n	13efe <bt_gatt_init+0x96>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13e94:	4c1e      	ldr	r4, [pc, #120]	; (13f10 <bt_gatt_init+0xa8>)
   13e96:	2230      	movs	r2, #48	; 0x30
   13e98:	2100      	movs	r1, #0
   13e9a:	4620      	mov	r0, r4
   13e9c:	f008 f879 	bl	1bf92 <memset>
   13ea0:	4b1c      	ldr	r3, [pc, #112]	; (13f14 <bt_gatt_init+0xac>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13ea2:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13ea4:	6063      	str	r3, [r4, #4]
   13ea6:	4c1c      	ldr	r4, [pc, #112]	; (13f18 <bt_gatt_init+0xb0>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13ea8:	2300      	movs	r3, #0
   13eaa:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13eae:	481b      	ldr	r0, [pc, #108]	; (13f1c <bt_gatt_init+0xb4>)
   13eb0:	f005 fe8a 	bl	19bc8 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13eb4:	2100      	movs	r1, #0
   13eb6:	f104 0020 	add.w	r0, r4, #32
   13eba:	2230      	movs	r2, #48	; 0x30
   13ebc:	f008 f869 	bl	1bf92 <memset>
   13ec0:	4b17      	ldr	r3, [pc, #92]	; (13f20 <bt_gatt_init+0xb8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13ec2:	f104 0050 	add.w	r0, r4, #80	; 0x50
   13ec6:	6263      	str	r3, [r4, #36]	; 0x24
   13ec8:	2102      	movs	r1, #2
}
   13eca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13ece:	f009 b83d 	b.w	1cf4c <atomic_or>
		last_static_handle += svc->attr_count;
   13ed2:	4a14      	ldr	r2, [pc, #80]	; (13f24 <bt_gatt_init+0xbc>)
   13ed4:	6863      	ldr	r3, [r4, #4]
   13ed6:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13ed8:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   13eda:	440b      	add	r3, r1
   13edc:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13ede:	42ac      	cmp	r4, r5
   13ee0:	d90a      	bls.n	13ef8 <bt_gatt_init+0x90>
   13ee2:	4631      	mov	r1, r6
   13ee4:	4810      	ldr	r0, [pc, #64]	; (13f28 <bt_gatt_init+0xc0>)
   13ee6:	f44f 6283 	mov.w	r2, #1048	; 0x418
   13eea:	f006 fde3 	bl	1aab4 <printk>
   13eee:	f44f 6183 	mov.w	r1, #1048	; 0x418
   13ef2:	4630      	mov	r0, r6
   13ef4:	f007 f884 	bl	1b000 <assert_post_action>
   13ef8:	42ac      	cmp	r4, r5
   13efa:	d3ea      	bcc.n	13ed2 <bt_gatt_init+0x6a>
   13efc:	e7ca      	b.n	13e94 <bt_gatt_init+0x2c>
   13efe:	4c0b      	ldr	r4, [pc, #44]	; (13f2c <bt_gatt_init+0xc4>)
   13f00:	4d0b      	ldr	r5, [pc, #44]	; (13f30 <bt_gatt_init+0xc8>)
   13f02:	4e0c      	ldr	r6, [pc, #48]	; (13f34 <bt_gatt_init+0xcc>)
   13f04:	e7eb      	b.n	13ede <bt_gatt_init+0x76>
}
   13f06:	bd70      	pop	{r4, r5, r6, pc}
   13f08:	2000ad14 	.word	0x2000ad14
   13f0c:	2000ae08 	.word	0x2000ae08
   13f10:	20009be8 	.word	0x20009be8
   13f14:	0001d33d 	.word	0x0001d33d
   13f18:	20009c18 	.word	0x20009c18
   13f1c:	2000a540 	.word	0x2000a540
   13f20:	000144f9 	.word	0x000144f9
   13f24:	2000f1a8 	.word	0x2000f1a8
   13f28:	0002003d 	.word	0x0002003d
   13f2c:	0001e818 	.word	0x0001e818
   13f30:	0001e848 	.word	0x0001e848
   13f34:	00022538 	.word	0x00022538

00013f38 <bt_gatt_attr_get_handle>:
{
   13f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   13f3c:	4604      	mov	r4, r0
   13f3e:	b910      	cbnz	r0, 13f46 <bt_gatt_attr_get_handle+0xe>
		return 0;
   13f40:	2000      	movs	r0, #0
}
   13f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   13f46:	8a00      	ldrh	r0, [r0, #16]
   13f48:	2800      	cmp	r0, #0
   13f4a:	d1fa      	bne.n	13f42 <bt_gatt_attr_get_handle+0xa>
	uint16_t handle = 1;
   13f4c:	f04f 0801 	mov.w	r8, #1
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13f50:	4d17      	ldr	r5, [pc, #92]	; (13fb0 <bt_gatt_attr_get_handle+0x78>)
   13f52:	4e18      	ldr	r6, [pc, #96]	; (13fb4 <bt_gatt_attr_get_handle+0x7c>)
   13f54:	4f18      	ldr	r7, [pc, #96]	; (13fb8 <bt_gatt_attr_get_handle+0x80>)
   13f56:	42b5      	cmp	r5, r6
   13f58:	d90a      	bls.n	13f70 <bt_gatt_attr_get_handle+0x38>
   13f5a:	4639      	mov	r1, r7
   13f5c:	4817      	ldr	r0, [pc, #92]	; (13fbc <bt_gatt_attr_get_handle+0x84>)
   13f5e:	f240 522d 	movw	r2, #1325	; 0x52d
   13f62:	f006 fda7 	bl	1aab4 <printk>
   13f66:	f240 512d 	movw	r1, #1325	; 0x52d
   13f6a:	4638      	mov	r0, r7
   13f6c:	f007 f848 	bl	1b000 <assert_post_action>
   13f70:	42b5      	cmp	r5, r6
   13f72:	d2e5      	bcs.n	13f40 <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13f74:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   13f78:	4564      	cmp	r4, ip
   13f7a:	d306      	bcc.n	13f8a <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13f7c:	f04f 0e14 	mov.w	lr, #20
   13f80:	fb0e c301 	mla	r3, lr, r1, ip
   13f84:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   13f86:	429c      	cmp	r4, r3
   13f88:	d910      	bls.n	13fac <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   13f8a:	eb08 0001 	add.w	r0, r8, r1
   13f8e:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13f90:	4680      	mov	r8, r0
   13f92:	3508      	adds	r5, #8
   13f94:	e7df      	b.n	13f56 <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   13f96:	fb0e c302 	mla	r3, lr, r2, ip
   13f9a:	429c      	cmp	r4, r3
   13f9c:	d0d1      	beq.n	13f42 <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   13f9e:	3201      	adds	r2, #1
   13fa0:	eb08 0302 	add.w	r3, r8, r2
   13fa4:	4291      	cmp	r1, r2
   13fa6:	b298      	uxth	r0, r3
   13fa8:	d1f5      	bne.n	13f96 <bt_gatt_attr_get_handle+0x5e>
   13faa:	e7f1      	b.n	13f90 <bt_gatt_attr_get_handle+0x58>
   13fac:	2200      	movs	r2, #0
   13fae:	e7f7      	b.n	13fa0 <bt_gatt_attr_get_handle+0x68>
   13fb0:	0001e818 	.word	0x0001e818
   13fb4:	0001e848 	.word	0x0001e848
   13fb8:	00022538 	.word	0x00022538
   13fbc:	0002003d 	.word	0x0002003d

00013fc0 <bt_gatt_foreach_attr_type>:
{
   13fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fc4:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   13fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   13fca:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   13fce:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   13fd0:	2d00      	cmp	r5, #0
   13fd2:	bf08      	it	eq
   13fd4:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   13fd6:	4b2b      	ldr	r3, [pc, #172]	; (14084 <bt_gatt_foreach_attr_type+0xc4>)
{
   13fd8:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   13fda:	881b      	ldrh	r3, [r3, #0]
{
   13fdc:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   13fde:	4283      	cmp	r3, r0
   13fe0:	d24b      	bcs.n	1407a <bt_gatt_foreach_attr_type+0xba>
}
   13fe2:	b003      	add	sp, #12
   13fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   13fe8:	6873      	ldr	r3, [r6, #4]
   13fea:	4423      	add	r3, r4
   13fec:	42bb      	cmp	r3, r7
   13fee:	d241      	bcs.n	14074 <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   13ff0:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13ff2:	3608      	adds	r6, #8
   13ff4:	4b24      	ldr	r3, [pc, #144]	; (14088 <bt_gatt_foreach_attr_type+0xc8>)
   13ff6:	429e      	cmp	r6, r3
   13ff8:	d90a      	bls.n	14010 <bt_gatt_foreach_attr_type+0x50>
   13ffa:	4659      	mov	r1, fp
   13ffc:	4823      	ldr	r0, [pc, #140]	; (1408c <bt_gatt_foreach_attr_type+0xcc>)
   13ffe:	f240 52f1 	movw	r2, #1521	; 0x5f1
   14002:	f006 fd57 	bl	1aab4 <printk>
   14006:	f240 51f1 	movw	r1, #1521	; 0x5f1
   1400a:	4658      	mov	r0, fp
   1400c:	f006 fff8 	bl	1b000 <assert_post_action>
   14010:	4b1d      	ldr	r3, [pc, #116]	; (14088 <bt_gatt_foreach_attr_type+0xc8>)
   14012:	429e      	cmp	r6, r3
   14014:	d3e8      	bcc.n	13fe8 <bt_gatt_foreach_attr_type+0x28>
   14016:	e7e4      	b.n	13fe2 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   14018:	4640      	mov	r0, r8
   1401a:	5889      	ldr	r1, [r1, r2]
   1401c:	9301      	str	r3, [sp, #4]
   1401e:	f008 f802 	bl	1c026 <bt_uuid_cmp>
   14022:	9b01      	ldr	r3, [sp, #4]
   14024:	b198      	cbz	r0, 1404e <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   14026:	3401      	adds	r4, #1
   14028:	f10a 0a01 	add.w	sl, sl, #1
   1402c:	b2a4      	uxth	r4, r4
   1402e:	6873      	ldr	r3, [r6, #4]
   14030:	4553      	cmp	r3, sl
   14032:	d9de      	bls.n	13ff2 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   14034:	9b00      	ldr	r3, [sp, #0]
   14036:	429c      	cmp	r4, r3
   14038:	d8d3      	bhi.n	13fe2 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1403a:	42bc      	cmp	r4, r7
   1403c:	d3f3      	bcc.n	14026 <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1403e:	2314      	movs	r3, #20
   14040:	fb03 f20a 	mul.w	r2, r3, sl
   14044:	6831      	ldr	r1, [r6, #0]
   14046:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   14048:	f1b8 0f00 	cmp.w	r8, #0
   1404c:	d1e4      	bne.n	14018 <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   1404e:	f1b9 0f00 	cmp.w	r9, #0
   14052:	d10b      	bne.n	1406c <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   14054:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   14056:	4618      	mov	r0, r3
	*num_matches -= 1;
   14058:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1405a:	4621      	mov	r1, r4
   1405c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1405e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14060:	4798      	blx	r3
	if (!*num_matches) {
   14062:	2d00      	cmp	r5, #0
   14064:	d0bd      	beq.n	13fe2 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   14066:	2800      	cmp	r0, #0
   14068:	d1dd      	bne.n	14026 <bt_gatt_foreach_attr_type+0x66>
   1406a:	e7ba      	b.n	13fe2 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1406c:	68da      	ldr	r2, [r3, #12]
   1406e:	4591      	cmp	r9, r2
   14070:	d1d9      	bne.n	14026 <bt_gatt_foreach_attr_type+0x66>
   14072:	e7ef      	b.n	14054 <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   14074:	f04f 0a00 	mov.w	sl, #0
   14078:	e7d9      	b.n	1402e <bt_gatt_foreach_attr_type+0x6e>
		uint16_t handle = 1;
   1407a:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1407c:	4e04      	ldr	r6, [pc, #16]	; (14090 <bt_gatt_foreach_attr_type+0xd0>)
   1407e:	f8df b014 	ldr.w	fp, [pc, #20]	; 14094 <bt_gatt_foreach_attr_type+0xd4>
   14082:	e7b7      	b.n	13ff4 <bt_gatt_foreach_attr_type+0x34>
   14084:	2000f1a8 	.word	0x2000f1a8
   14088:	0001e848 	.word	0x0001e848
   1408c:	0002003d 	.word	0x0002003d
   14090:	0001e818 	.word	0x0001e818
   14094:	00022538 	.word	0x00022538

00014098 <db_hash_gen>:
	uint8_t key[16] = {};
   14098:	2300      	movs	r3, #0
{
   1409a:	b530      	push	{r4, r5, lr}
   1409c:	b0c9      	sub	sp, #292	; 0x124
   1409e:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   140a0:	4669      	mov	r1, sp
   140a2:	aa1c      	add	r2, sp, #112	; 0x70
   140a4:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   140a6:	e9cd 3300 	strd	r3, r3, [sp]
   140aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   140ae:	f007 fb6e 	bl	1b78e <tc_cmac_setup>
   140b2:	b928      	cbnz	r0, 140c0 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   140b4:	2145      	movs	r1, #69	; 0x45
   140b6:	4812      	ldr	r0, [pc, #72]	; (14100 <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
   140b8:	f006 fcfc 	bl	1aab4 <printk>
}
   140bc:	b049      	add	sp, #292	; 0x124
   140be:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   140c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   140c4:	2001      	movs	r0, #1
   140c6:	4a0f      	ldr	r2, [pc, #60]	; (14104 <db_hash_gen+0x6c>)
   140c8:	ab04      	add	r3, sp, #16
   140ca:	f009 f92c 	bl	1d326 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   140ce:	480e      	ldr	r0, [pc, #56]	; (14108 <db_hash_gen+0x70>)
   140d0:	a904      	add	r1, sp, #16
   140d2:	f007 fbf2 	bl	1b8ba <tc_cmac_final>
   140d6:	b910      	cbnz	r0, 140de <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   140d8:	2145      	movs	r1, #69	; 0x45
   140da:	480c      	ldr	r0, [pc, #48]	; (1410c <db_hash_gen+0x74>)
   140dc:	e7ec      	b.n	140b8 <db_hash_gen+0x20>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   140de:	2208      	movs	r2, #8
   140e0:	4b09      	ldr	r3, [pc, #36]	; (14108 <db_hash_gen+0x70>)
   140e2:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   140e6:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   140e8:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   140ec:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   140ee:	f803 5b01 	strb.w	r5, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   140f2:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   140f4:	d1f7      	bne.n	140e6 <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   140f6:	2c00      	cmp	r4, #0
   140f8:	d0e0      	beq.n	140bc <db_hash_gen+0x24>
		db_hash_store();
   140fa:	f7ff f9af 	bl	1345c <db_hash_store>
   140fe:	e7dd      	b.n	140bc <db_hash_gen+0x24>
   14100:	00022568 	.word	0x00022568
   14104:	0001ce07 	.word	0x0001ce07
   14108:	2000f9b4 	.word	0x2000f9b4
   1410c:	00022586 	.word	0x00022586

00014110 <db_hash_commit>:
{
   14110:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
   14112:	4821      	ldr	r0, [pc, #132]	; (14198 <db_hash_commit+0x88>)
   14114:	f005 fdc8 	bl	19ca8 <k_delayed_work_cancel>
	if (!err) {
   14118:	b908      	cbnz	r0, 1411e <db_hash_commit+0xe>
		db_hash_gen(false);
   1411a:	f7ff ffbd 	bl	14098 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
   1411e:	2210      	movs	r2, #16
   14120:	491e      	ldr	r1, [pc, #120]	; (1419c <db_hash_commit+0x8c>)
   14122:	481f      	ldr	r0, [pc, #124]	; (141a0 <db_hash_commit+0x90>)
   14124:	f007 fef9 	bl	1bf1a <memcmp>
   14128:	b968      	cbnz	r0, 14146 <db_hash_commit+0x36>
		k_delayed_work_cancel(&gatt_sc.work);
   1412a:	481e      	ldr	r0, [pc, #120]	; (141a4 <db_hash_commit+0x94>)
   1412c:	f005 fdbc 	bl	19ca8 <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14130:	4b1d      	ldr	r3, [pc, #116]	; (141a8 <db_hash_commit+0x98>)
   14132:	e8d3 2fef 	ldaex	r2, [r3]
   14136:	f022 0201 	bic.w	r2, r2, #1
   1413a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1413e:	2900      	cmp	r1, #0
   14140:	d1f7      	bne.n	14132 <db_hash_commit+0x22>
}
   14142:	2000      	movs	r0, #0
   14144:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14146:	4c19      	ldr	r4, [pc, #100]	; (141ac <db_hash_commit+0x9c>)
   14148:	2101      	movs	r1, #1
   1414a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1414e:	f008 fefd 	bl	1cf4c <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   14152:	07c2      	lsls	r2, r0, #31
   14154:	d410      	bmi.n	14178 <db_hash_commit+0x68>
		gatt_sc.start = start;
   14156:	4b16      	ldr	r3, [pc, #88]	; (141b0 <db_hash_commit+0xa0>)
   14158:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1415a:	4813      	ldr	r0, [pc, #76]	; (141a8 <db_hash_commit+0x98>)
   1415c:	f008 ff01 	bl	1cf62 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   14160:	0783      	lsls	r3, r0, #30
   14162:	d406      	bmi.n	14172 <db_hash_commit+0x62>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   14164:	f44f 72a4 	mov.w	r2, #328	; 0x148
   14168:	2300      	movs	r3, #0
   1416a:	490e      	ldr	r1, [pc, #56]	; (141a4 <db_hash_commit+0x94>)
   1416c:	4811      	ldr	r0, [pc, #68]	; (141b4 <db_hash_commit+0xa4>)
   1416e:	f005 fd2b 	bl	19bc8 <k_delayed_work_submit_to_queue>
	db_hash_store();
   14172:	f7ff f973 	bl	1345c <db_hash_store>
	return 0;
   14176:	e7e4      	b.n	14142 <db_hash_commit+0x32>
	if (new_start >= *start && new_end <= *end) {
   14178:	8b23      	ldrh	r3, [r4, #24]
   1417a:	8b62      	ldrh	r2, [r4, #26]
   1417c:	2b01      	cmp	r3, #1
   1417e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14182:	d805      	bhi.n	14190 <db_hash_commit+0x80>
   14184:	429a      	cmp	r2, r3
   14186:	d0f4      	beq.n	14172 <db_hash_commit+0x62>
		*end = new_end;
   14188:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1418c:	8363      	strh	r3, [r4, #26]
   1418e:	e7e4      	b.n	1415a <db_hash_commit+0x4a>
	if (*end < new_end) {
   14190:	429a      	cmp	r2, r3
		*start = new_start;
   14192:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   14194:	d0e1      	beq.n	1415a <db_hash_commit+0x4a>
   14196:	e7f7      	b.n	14188 <db_hash_commit+0x78>
   14198:	20009be8 	.word	0x20009be8
   1419c:	2000f9b4 	.word	0x2000f9b4
   141a0:	2000f9c4 	.word	0x2000f9c4
   141a4:	20009c38 	.word	0x20009c38
   141a8:	20009c68 	.word	0x20009c68
   141ac:	20009c18 	.word	0x20009c18
   141b0:	ffff0001 	.word	0xffff0001
   141b4:	2000a540 	.word	0x2000a540

000141b8 <ccc_set_direct>:
{
   141b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   141bc:	b0b9      	sub	sp, #228	; 0xe4
   141be:	4688      	mov	r8, r1
   141c0:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   141c2:	492c      	ldr	r1, [pc, #176]	; (14274 <ccc_set_direct+0xbc>)
   141c4:	466a      	mov	r2, sp
   141c6:	9840      	ldr	r0, [sp, #256]	; 0x100
{
   141c8:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   141ca:	f006 ff6f 	bl	1b0ac <settings_name_steq>
   141ce:	b948      	cbnz	r0, 141e4 <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   141d0:	2145      	movs	r1, #69	; 0x45
   141d2:	4829      	ldr	r0, [pc, #164]	; (14278 <ccc_set_direct+0xc0>)
   141d4:	f006 fc6e 	bl	1aab4 <printk>
   141d8:	f06f 0515 	mvn.w	r5, #21
}
   141dc:	4628      	mov	r0, r5
   141de:	b039      	add	sp, #228	; 0xe4
   141e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   141e4:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   141e6:	a901      	add	r1, sp, #4
   141e8:	4620      	mov	r0, r4
   141ea:	f006 ff82 	bl	1b0f2 <settings_name_next>
		if (!name) {
   141ee:	b93c      	cbnz	r4, 14200 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   141f0:	2145      	movs	r1, #69	; 0x45
   141f2:	4822      	ldr	r0, [pc, #136]	; (1427c <ccc_set_direct+0xc4>)
   141f4:	f006 fc5e 	bl	1aab4 <printk>
			return -EINVAL;
   141f8:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   141fc:	4625      	mov	r5, r4
   141fe:	e7ed      	b.n	141dc <ccc_set_direct+0x24>
		} else if (!next) {
   14200:	9801      	ldr	r0, [sp, #4]
   14202:	b978      	cbnz	r0, 14224 <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
   14204:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   14208:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   1420c:	4649      	mov	r1, r9
   1420e:	4620      	mov	r0, r4
   14210:	f007 fee5 	bl	1bfde <bt_settings_decode_key>
		if (err) {
   14214:	4605      	mov	r5, r0
   14216:	b150      	cbz	r0, 1422e <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   14218:	4622      	mov	r2, r4
   1421a:	2145      	movs	r1, #69	; 0x45
   1421c:	4818      	ldr	r0, [pc, #96]	; (14280 <ccc_set_direct+0xc8>)
   1421e:	f006 fc49 	bl	1aab4 <printk>
   14222:	e7e9      	b.n	141f8 <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
   14224:	220a      	movs	r2, #10
   14226:	2100      	movs	r1, #0
   14228:	f007 fdba 	bl	1bda0 <strtol>
   1422c:	e7ea      	b.n	14204 <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
   1422e:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   14232:	f1b8 0f00 	cmp.w	r8, #0
   14236:	d019      	beq.n	1426c <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   14238:	f10d 0820 	add.w	r8, sp, #32
   1423c:	22c0      	movs	r2, #192	; 0xc0
   1423e:	4641      	mov	r1, r8
   14240:	4638      	mov	r0, r7
   14242:	47b0      	blx	r6
			if (len < 0) {
   14244:	1e04      	subs	r4, r0, #0
   14246:	da05      	bge.n	14254 <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
   14248:	4622      	mov	r2, r4
   1424a:	2145      	movs	r1, #69	; 0x45
   1424c:	480d      	ldr	r0, [pc, #52]	; (14284 <ccc_set_direct+0xcc>)
   1424e:	f006 fc31 	bl	1aab4 <printk>
				return len;
   14252:	e7d3      	b.n	141fc <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   14254:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   14256:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   1425a:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1425c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14260:	2001      	movs	r0, #1
   14262:	4a09      	ldr	r2, [pc, #36]	; (14288 <ccc_set_direct+0xd0>)
   14264:	ab04      	add	r3, sp, #16
   14266:	f009 f85e 	bl	1d326 <bt_gatt_foreach_attr>
	return 0;
   1426a:	e7b7      	b.n	141dc <ccc_set_direct+0x24>
			load.count = 0;
   1426c:	e9cd 0006 	strd	r0, r0, [sp, #24]
   14270:	e7f4      	b.n	1425c <ccc_set_direct+0xa4>
   14272:	bf00      	nop
   14274:	000225a4 	.word	0x000225a4
   14278:	000225ab 	.word	0x000225ab
   1427c:	0002131c 	.word	0x0002131c
   14280:	00022413 	.word	0x00022413
   14284:	00022325 	.word	0x00022325
   14288:	000139bd 	.word	0x000139bd

0001428c <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   1428c:	2300      	movs	r3, #0
{
   1428e:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   14290:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   14292:	f7ff fe51 	bl	13f38 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   14296:	1c41      	adds	r1, r0, #1
   14298:	b289      	uxth	r1, r1
   1429a:	4608      	mov	r0, r1
   1429c:	4a03      	ldr	r2, [pc, #12]	; (142ac <bt_gatt_attr_next+0x20>)
   1429e:	ab01      	add	r3, sp, #4
   142a0:	f009 f841 	bl	1d326 <bt_gatt_foreach_attr>
}
   142a4:	9801      	ldr	r0, [sp, #4]
   142a6:	b003      	add	sp, #12
   142a8:	f85d fb04 	ldr.w	pc, [sp], #4
   142ac:	0001cd9f 	.word	0x0001cd9f

000142b0 <bt_gatt_notify_cb>:
{
   142b0:	b530      	push	{r4, r5, lr}
   142b2:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   142b4:	460d      	mov	r5, r1
{
   142b6:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   142b8:	b951      	cbnz	r1, 142d0 <bt_gatt_notify_cb+0x20>
   142ba:	4940      	ldr	r1, [pc, #256]	; (143bc <bt_gatt_notify_cb+0x10c>)
   142bc:	4840      	ldr	r0, [pc, #256]	; (143c0 <bt_gatt_notify_cb+0x110>)
   142be:	f640 023d 	movw	r2, #2109	; 0x83d
   142c2:	f006 fbf7 	bl	1aab4 <printk>
   142c6:	f640 013d 	movw	r1, #2109	; 0x83d
   142ca:	483c      	ldr	r0, [pc, #240]	; (143bc <bt_gatt_notify_cb+0x10c>)
   142cc:	f006 fe98 	bl	1b000 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   142d0:	686b      	ldr	r3, [r5, #4]
   142d2:	b953      	cbnz	r3, 142ea <bt_gatt_notify_cb+0x3a>
   142d4:	4939      	ldr	r1, [pc, #228]	; (143bc <bt_gatt_notify_cb+0x10c>)
   142d6:	483a      	ldr	r0, [pc, #232]	; (143c0 <bt_gatt_notify_cb+0x110>)
   142d8:	f640 023e 	movw	r2, #2110	; 0x83e
   142dc:	f006 fbea 	bl	1aab4 <printk>
   142e0:	f640 013e 	movw	r1, #2110	; 0x83e
   142e4:	4835      	ldr	r0, [pc, #212]	; (143bc <bt_gatt_notify_cb+0x10c>)
   142e6:	f006 fe8b 	bl	1b000 <assert_post_action>
   142ea:	4836      	ldr	r0, [pc, #216]	; (143c4 <bt_gatt_notify_cb+0x114>)
   142ec:	f008 fe39 	bl	1cf62 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   142f0:	0782      	lsls	r2, r0, #30
   142f2:	d55d      	bpl.n	143b0 <bt_gatt_notify_cb+0x100>
	data.attr = params->attr;
   142f4:	6868      	ldr	r0, [r5, #4]
   142f6:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   142f8:	b114      	cbz	r4, 14300 <bt_gatt_notify_cb+0x50>
   142fa:	7aa3      	ldrb	r3, [r4, #10]
   142fc:	2b07      	cmp	r3, #7
   142fe:	d15a      	bne.n	143b6 <bt_gatt_notify_cb+0x106>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   14300:	f7ff fe1a 	bl	13f38 <bt_gatt_attr_get_handle>
   14304:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   14308:	b918      	cbnz	r0, 14312 <bt_gatt_notify_cb+0x62>
		return -ENOENT;
   1430a:	f06f 0001 	mvn.w	r0, #1
}
   1430e:	b00b      	add	sp, #44	; 0x2c
   14310:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   14312:	682a      	ldr	r2, [r5, #0]
   14314:	b9aa      	cbnz	r2, 14342 <bt_gatt_notify_cb+0x92>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   14316:	9b05      	ldr	r3, [sp, #20]
   14318:	a904      	add	r1, sp, #16
   1431a:	6818      	ldr	r0, [r3, #0]
   1431c:	2300      	movs	r3, #0
   1431e:	f88d 3010 	strb.w	r3, [sp, #16]
   14322:	f642 0303 	movw	r3, #10243	; 0x2803
   14326:	f8ad 3012 	strh.w	r3, [sp, #18]
   1432a:	f007 fe7c 	bl	1c026 <bt_uuid_cmp>
   1432e:	b1c0      	cbz	r0, 14362 <bt_gatt_notify_cb+0xb2>
		return gatt_notify(conn, data.handle, params);
   14330:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   14334:	b314      	cbz	r4, 1437c <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   14336:	4601      	mov	r1, r0
   14338:	462a      	mov	r2, r5
   1433a:	4620      	mov	r0, r4
   1433c:	f7ff fbd6 	bl	13aec <gatt_notify>
   14340:	e7e5      	b.n	1430e <bt_gatt_notify_cb+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14342:	a905      	add	r1, sp, #20
   14344:	9102      	str	r1, [sp, #8]
   14346:	4920      	ldr	r1, [pc, #128]	; (143c8 <bt_gatt_notify_cb+0x118>)
	found->attr = NULL;
   14348:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1434a:	9101      	str	r1, [sp, #4]
   1434c:	2101      	movs	r1, #1
   1434e:	9100      	str	r1, [sp, #0]
   14350:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   14354:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14356:	f7ff fe33 	bl	13fc0 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1435a:	9b05      	ldr	r3, [sp, #20]
   1435c:	2b00      	cmp	r3, #0
   1435e:	d1da      	bne.n	14316 <bt_gatt_notify_cb+0x66>
   14360:	e7d3      	b.n	1430a <bt_gatt_notify_cb+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   14362:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   14364:	68c3      	ldr	r3, [r0, #12]
   14366:	799b      	ldrb	r3, [r3, #6]
   14368:	06db      	lsls	r3, r3, #27
   1436a:	d402      	bmi.n	14372 <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   1436c:	f06f 0015 	mvn.w	r0, #21
   14370:	e7cd      	b.n	1430e <bt_gatt_notify_cb+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   14372:	f008 ff8a 	bl	1d28a <bt_gatt_attr_value_handle>
   14376:	f8ad 0018 	strh.w	r0, [sp, #24]
   1437a:	e7d9      	b.n	14330 <bt_gatt_notify_cb+0x80>
	data.err = -ENOTCONN;
   1437c:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14380:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   14384:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   14386:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14388:	f8ad 2012 	strh.w	r2, [sp, #18]
   1438c:	aa05      	add	r2, sp, #20
   1438e:	9202      	str	r2, [sp, #8]
   14390:	4a0e      	ldr	r2, [pc, #56]	; (143cc <bt_gatt_notify_cb+0x11c>)
	data.type = BT_GATT_CCC_NOTIFY;
   14392:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14396:	e9cd 3200 	strd	r3, r2, [sp]
   1439a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1439e:	4623      	mov	r3, r4
   143a0:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   143a2:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   143a4:	f88d 4010 	strb.w	r4, [sp, #16]
   143a8:	f7ff fe0a 	bl	13fc0 <bt_gatt_foreach_attr_type>
	return data.err;
   143ac:	9807      	ldr	r0, [sp, #28]
   143ae:	e7ae      	b.n	1430e <bt_gatt_notify_cb+0x5e>
		return -EAGAIN;
   143b0:	f06f 000a 	mvn.w	r0, #10
   143b4:	e7ab      	b.n	1430e <bt_gatt_notify_cb+0x5e>
		return -ENOTCONN;
   143b6:	f06f 0038 	mvn.w	r0, #56	; 0x38
   143ba:	e7a8      	b.n	1430e <bt_gatt_notify_cb+0x5e>
   143bc:	00022538 	.word	0x00022538
   143c0:	0002003d 	.word	0x0002003d
   143c4:	20008094 	.word	0x20008094
   143c8:	0001cdfb 	.word	0x0001cdfb
   143cc:	00013b4d 	.word	0x00013b4d

000143d0 <bt_gatt_indicate>:
{
   143d0:	b530      	push	{r4, r5, lr}
   143d2:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   143d4:	460c      	mov	r4, r1
{
   143d6:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   143d8:	b951      	cbnz	r1, 143f0 <bt_gatt_indicate+0x20>
   143da:	4942      	ldr	r1, [pc, #264]	; (144e4 <bt_gatt_indicate+0x114>)
   143dc:	4842      	ldr	r0, [pc, #264]	; (144e8 <bt_gatt_indicate+0x118>)
   143de:	f640 0289 	movw	r2, #2185	; 0x889
   143e2:	f006 fb67 	bl	1aab4 <printk>
   143e6:	f640 0189 	movw	r1, #2185	; 0x889
   143ea:	483e      	ldr	r0, [pc, #248]	; (144e4 <bt_gatt_indicate+0x114>)
   143ec:	f006 fe08 	bl	1b000 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   143f0:	6863      	ldr	r3, [r4, #4]
   143f2:	b953      	cbnz	r3, 1440a <bt_gatt_indicate+0x3a>
   143f4:	493b      	ldr	r1, [pc, #236]	; (144e4 <bt_gatt_indicate+0x114>)
   143f6:	483c      	ldr	r0, [pc, #240]	; (144e8 <bt_gatt_indicate+0x118>)
   143f8:	f640 028a 	movw	r2, #2186	; 0x88a
   143fc:	f006 fb5a 	bl	1aab4 <printk>
   14400:	f640 018a 	movw	r1, #2186	; 0x88a
   14404:	4837      	ldr	r0, [pc, #220]	; (144e4 <bt_gatt_indicate+0x114>)
   14406:	f006 fdfb 	bl	1b000 <assert_post_action>
   1440a:	4838      	ldr	r0, [pc, #224]	; (144ec <bt_gatt_indicate+0x11c>)
   1440c:	f008 fda9 	bl	1cf62 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14410:	0782      	lsls	r2, r0, #30
   14412:	d561      	bpl.n	144d8 <bt_gatt_indicate+0x108>
	data.attr = params->attr;
   14414:	6860      	ldr	r0, [r4, #4]
   14416:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   14418:	b115      	cbz	r5, 14420 <bt_gatt_indicate+0x50>
   1441a:	7aab      	ldrb	r3, [r5, #10]
   1441c:	2b07      	cmp	r3, #7
   1441e:	d15e      	bne.n	144de <bt_gatt_indicate+0x10e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   14420:	f7ff fd8a 	bl	13f38 <bt_gatt_attr_get_handle>
   14424:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   14428:	b918      	cbnz	r0, 14432 <bt_gatt_indicate+0x62>
		return -ENOENT;
   1442a:	f06f 0001 	mvn.w	r0, #1
}
   1442e:	b00b      	add	sp, #44	; 0x2c
   14430:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   14432:	6822      	ldr	r2, [r4, #0]
   14434:	b9ba      	cbnz	r2, 14466 <bt_gatt_indicate+0x96>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   14436:	9b05      	ldr	r3, [sp, #20]
   14438:	a904      	add	r1, sp, #16
   1443a:	6818      	ldr	r0, [r3, #0]
   1443c:	2300      	movs	r3, #0
   1443e:	f88d 3010 	strb.w	r3, [sp, #16]
   14442:	f642 0303 	movw	r3, #10243	; 0x2803
   14446:	f8ad 3012 	strh.w	r3, [sp, #18]
   1444a:	f007 fdec 	bl	1c026 <bt_uuid_cmp>
   1444e:	b1d0      	cbz	r0, 14486 <bt_gatt_indicate+0xb6>
		return gatt_indicate(conn, data.handle, params);
   14450:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   14454:	b325      	cbz	r5, 144a0 <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   14456:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   14458:	4601      	mov	r1, r0
   1445a:	4622      	mov	r2, r4
   1445c:	4628      	mov	r0, r5
		params->_ref = 1;
   1445e:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   14460:	f7ff fb0e 	bl	13a80 <gatt_indicate>
   14464:	e7e3      	b.n	1442e <bt_gatt_indicate+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14466:	a905      	add	r1, sp, #20
   14468:	9102      	str	r1, [sp, #8]
   1446a:	4921      	ldr	r1, [pc, #132]	; (144f0 <bt_gatt_indicate+0x120>)
	found->attr = NULL;
   1446c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1446e:	9101      	str	r1, [sp, #4]
   14470:	2101      	movs	r1, #1
   14472:	9100      	str	r1, [sp, #0]
   14474:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   14478:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1447a:	f7ff fda1 	bl	13fc0 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1447e:	9b05      	ldr	r3, [sp, #20]
   14480:	2b00      	cmp	r3, #0
   14482:	d1d8      	bne.n	14436 <bt_gatt_indicate+0x66>
   14484:	e7d1      	b.n	1442a <bt_gatt_indicate+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   14486:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   14488:	68c3      	ldr	r3, [r0, #12]
   1448a:	799b      	ldrb	r3, [r3, #6]
   1448c:	069b      	lsls	r3, r3, #26
   1448e:	d402      	bmi.n	14496 <bt_gatt_indicate+0xc6>
			return -EINVAL;
   14490:	f06f 0015 	mvn.w	r0, #21
   14494:	e7cb      	b.n	1442e <bt_gatt_indicate+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   14496:	f008 fef8 	bl	1d28a <bt_gatt_attr_value_handle>
   1449a:	f8ad 0018 	strh.w	r0, [sp, #24]
   1449e:	e7d7      	b.n	14450 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   144a0:	f06f 0338 	mvn.w	r3, #56	; 0x38
   144a4:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   144a6:	2302      	movs	r3, #2
   144a8:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   144ac:	f642 1302 	movw	r3, #10498	; 0x2902
   144b0:	f8ad 3012 	strh.w	r3, [sp, #18]
   144b4:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   144b6:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   144b8:	9302      	str	r3, [sp, #8]
   144ba:	4b0e      	ldr	r3, [pc, #56]	; (144f4 <bt_gatt_indicate+0x124>)
   144bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   144c0:	9301      	str	r3, [sp, #4]
   144c2:	2301      	movs	r3, #1
   144c4:	aa04      	add	r2, sp, #16
   144c6:	9300      	str	r3, [sp, #0]
   144c8:	462b      	mov	r3, r5
	data.ind_params = params;
   144ca:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   144cc:	f88d 5010 	strb.w	r5, [sp, #16]
   144d0:	f7ff fd76 	bl	13fc0 <bt_gatt_foreach_attr_type>
	return data.err;
   144d4:	9807      	ldr	r0, [sp, #28]
   144d6:	e7aa      	b.n	1442e <bt_gatt_indicate+0x5e>
		return -EAGAIN;
   144d8:	f06f 000a 	mvn.w	r0, #10
   144dc:	e7a7      	b.n	1442e <bt_gatt_indicate+0x5e>
		return -ENOTCONN;
   144de:	f06f 0038 	mvn.w	r0, #56	; 0x38
   144e2:	e7a4      	b.n	1442e <bt_gatt_indicate+0x5e>
   144e4:	00022538 	.word	0x00022538
   144e8:	0002003d 	.word	0x0002003d
   144ec:	20008094 	.word	0x20008094
   144f0:	0001cdfb 	.word	0x0001cdfb
   144f4:	00013b4d 	.word	0x00013b4d

000144f8 <sc_process>:
{
   144f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   144fa:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   144fe:	4604      	mov	r4, r0
   14500:	4628      	mov	r0, r5
   14502:	f008 fd2e 	bl	1cf62 <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   14506:	0783      	lsls	r3, r0, #30
   14508:	d50a      	bpl.n	14520 <sc_process+0x28>
   1450a:	491b      	ldr	r1, [pc, #108]	; (14578 <sc_process+0x80>)
   1450c:	481b      	ldr	r0, [pc, #108]	; (1457c <sc_process+0x84>)
   1450e:	f240 32ae 	movw	r2, #942	; 0x3ae
   14512:	f006 facf 	bl	1aab4 <printk>
   14516:	f240 31ae 	movw	r1, #942	; 0x3ae
   1451a:	4817      	ldr	r0, [pc, #92]	; (14578 <sc_process+0x80>)
   1451c:	f006 fd70 	bl	1b000 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   14520:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   14524:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   14528:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   1452c:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14530:	e8d5 3fef 	ldaex	r3, [r5]
   14534:	f023 0301 	bic.w	r3, r3, #1
   14538:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1453c:	2a00      	cmp	r2, #0
   1453e:	d1f7      	bne.n	14530 <sc_process+0x38>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   14540:	4b0f      	ldr	r3, [pc, #60]	; (14580 <sc_process+0x88>)
	sc->start = 0U;
   14542:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   14544:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   14548:	4b0e      	ldr	r3, [pc, #56]	; (14584 <sc_process+0x8c>)
	sc->start = 0U;
   1454a:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   1454e:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   14552:	ab01      	add	r3, sp, #4
   14554:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   14558:	2304      	movs	r3, #4
	sc->end = 0U;
   1455a:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1455e:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   14562:	f1a4 0120 	sub.w	r1, r4, #32
   14566:	f7ff ff33 	bl	143d0 <bt_gatt_indicate>
   1456a:	b918      	cbnz	r0, 14574 <sc_process+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1456c:	2102      	movs	r1, #2
   1456e:	4628      	mov	r0, r5
   14570:	f008 fcec 	bl	1cf4c <atomic_or>
}
   14574:	b003      	add	sp, #12
   14576:	bd30      	pop	{r4, r5, pc}
   14578:	00022538 	.word	0x00022538
   1457c:	0002003d 	.word	0x0002003d
   14580:	0001f048 	.word	0x0001f048
   14584:	00013e19 	.word	0x00013e19

00014588 <update_ccc>:
{
   14588:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1458c:	4b32      	ldr	r3, [pc, #200]	; (14658 <update_ccc+0xd0>)
   1458e:	6881      	ldr	r1, [r0, #8]
{
   14590:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   14592:	4299      	cmp	r1, r3
   14594:	d15c      	bne.n	14650 <update_ccc+0xc8>
	ccc = attr->user_data;
   14596:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
   14598:	6816      	ldr	r6, [r2, #0]
				BT_WARN("CCC %p not writable", attr);
   1459a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 1465c <update_ccc+0xd4>
   1459e:	1c7d      	adds	r5, r7, #1
   145a0:	f107 0865 	add.w	r8, r7, #101	; 0x65
		if (!cfg->value ||
   145a4:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   145a8:	b193      	cbz	r3, 145d0 <update_ccc+0x48>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   145aa:	462a      	mov	r2, r5
   145ac:	4630      	mov	r0, r6
   145ae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   145b2:	f007 ff1e 	bl	1c3f2 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   145b6:	b158      	cbz	r0, 145d0 <update_ccc+0x48>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   145b8:	222a      	movs	r2, #42	; 0x2a
   145ba:	4621      	mov	r1, r4
   145bc:	4630      	mov	r0, r6
   145be:	f008 fec0 	bl	1d342 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   145c2:	2803      	cmp	r0, #3
   145c4:	d108      	bne.n	145d8 <update_ccc+0x50>
				BT_WARN("CCC %p not writable", attr);
   145c6:	4622      	mov	r2, r4
   145c8:	2157      	movs	r1, #87	; 0x57
   145ca:	4648      	mov	r0, r9
   145cc:	f006 fa72 	bl	1aab4 <printk>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   145d0:	350a      	adds	r5, #10
   145d2:	4545      	cmp	r5, r8
   145d4:	d1e6      	bne.n	145a4 <update_ccc+0x1c>
   145d6:	e03b      	b.n	14650 <update_ccc+0xc8>
		gatt_ccc_changed(attr, ccc);
   145d8:	4639      	mov	r1, r7
   145da:	4620      	mov	r0, r4
   145dc:	f008 fbe2 	bl	1cda4 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   145e0:	4b1f      	ldr	r3, [pc, #124]	; (14660 <update_ccc+0xd8>)
   145e2:	429f      	cmp	r7, r3
   145e4:	d134      	bne.n	14650 <update_ccc+0xc8>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   145e6:	7a30      	ldrb	r0, [r6, #8]
   145e8:	f106 0188 	add.w	r1, r6, #136	; 0x88
   145ec:	f7fe ff6e 	bl	134cc <find_sc_cfg>
	if (!cfg) {
   145f0:	4604      	mov	r4, r0
   145f2:	b368      	cbz	r0, 14650 <update_ccc+0xc8>
	if (!(cfg->data.start || cfg->data.end)) {
   145f4:	8902      	ldrh	r2, [r0, #8]
   145f6:	8943      	ldrh	r3, [r0, #10]
   145f8:	ea52 0103 	orrs.w	r1, r2, r3
   145fc:	d028      	beq.n	14650 <update_ccc+0xc8>
	index = bt_conn_index(conn);
   145fe:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   14600:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   14604:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   14608:	f7fd fca2 	bl	11f50 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1460c:	2318      	movs	r3, #24
   1460e:	4915      	ldr	r1, [pc, #84]	; (14664 <update_ccc+0xdc>)
   14610:	4a15      	ldr	r2, [pc, #84]	; (14668 <update_ccc+0xe0>)
   14612:	fb03 1300 	mla	r3, r3, r0, r1
   14616:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   14618:	4a14      	ldr	r2, [pc, #80]	; (1466c <update_ccc+0xe4>)
   1461a:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1461c:	aa01      	add	r2, sp, #4
   1461e:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   14620:	2204      	movs	r2, #4
   14622:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   14624:	b203      	sxth	r3, r0
   14626:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1462a:	4630      	mov	r0, r6
   1462c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   14630:	f7ff fece 	bl	143d0 <bt_gatt_indicate>
   14634:	b118      	cbz	r0, 1463e <update_ccc+0xb6>
		BT_ERR("SC restore indication failed");
   14636:	2145      	movs	r1, #69	; 0x45
   14638:	480d      	ldr	r0, [pc, #52]	; (14670 <update_ccc+0xe8>)
   1463a:	f006 fa3b 	bl	1aab4 <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1463e:	2204      	movs	r2, #4
   14640:	2100      	movs	r1, #0
   14642:	f104 0008 	add.w	r0, r4, #8
   14646:	f007 fca4 	bl	1bf92 <memset>
		sc_store(cfg);
   1464a:	4620      	mov	r0, r4
   1464c:	f7ff f84a 	bl	136e4 <sc_store>
}
   14650:	2001      	movs	r0, #1
   14652:	b003      	add	sp, #12
   14654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14658:	00013585 	.word	0x00013585
   1465c:	000225bc 	.word	0x000225bc
   14660:	2000847c 	.word	0x2000847c
   14664:	2000ad18 	.word	0x2000ad18
   14668:	0001f048 	.word	0x0001f048
   1466c:	0001d241 	.word	0x0001d241
   14670:	000225d5 	.word	0x000225d5

00014674 <bt_gatt_is_subscribed>:
{
   14674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14676:	460c      	mov	r4, r1
   14678:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   1467a:	4606      	mov	r6, r0
   1467c:	b950      	cbnz	r0, 14694 <bt_gatt_is_subscribed+0x20>
   1467e:	4930      	ldr	r1, [pc, #192]	; (14740 <bt_gatt_is_subscribed+0xcc>)
   14680:	4830      	ldr	r0, [pc, #192]	; (14744 <bt_gatt_is_subscribed+0xd0>)
   14682:	f640 12b5 	movw	r2, #2485	; 0x9b5
   14686:	f006 fa15 	bl	1aab4 <printk>
   1468a:	f640 11b5 	movw	r1, #2485	; 0x9b5
   1468e:	482c      	ldr	r0, [pc, #176]	; (14740 <bt_gatt_is_subscribed+0xcc>)
   14690:	f006 fcb6 	bl	1b000 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   14694:	b954      	cbnz	r4, 146ac <bt_gatt_is_subscribed+0x38>
   14696:	492a      	ldr	r1, [pc, #168]	; (14740 <bt_gatt_is_subscribed+0xcc>)
   14698:	482a      	ldr	r0, [pc, #168]	; (14744 <bt_gatt_is_subscribed+0xd0>)
   1469a:	f640 12b6 	movw	r2, #2486	; 0x9b6
   1469e:	f006 fa09 	bl	1aab4 <printk>
   146a2:	f640 11b6 	movw	r1, #2486	; 0x9b6
   146a6:	4826      	ldr	r0, [pc, #152]	; (14740 <bt_gatt_is_subscribed+0xcc>)
   146a8:	f006 fcaa 	bl	1b000 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   146ac:	7ab3      	ldrb	r3, [r6, #10]
   146ae:	2b07      	cmp	r3, #7
   146b0:	d130      	bne.n	14714 <bt_gatt_is_subscribed+0xa0>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   146b2:	2300      	movs	r3, #0
   146b4:	f88d 3004 	strb.w	r3, [sp, #4]
   146b8:	f642 0303 	movw	r3, #10243	; 0x2803
   146bc:	6820      	ldr	r0, [r4, #0]
   146be:	a901      	add	r1, sp, #4
   146c0:	f8ad 3006 	strh.w	r3, [sp, #6]
   146c4:	f007 fcaf 	bl	1c026 <bt_uuid_cmp>
   146c8:	b940      	cbnz	r0, 146dc <bt_gatt_is_subscribed+0x68>
		if (!(chrc->properties &
   146ca:	68e3      	ldr	r3, [r4, #12]
   146cc:	799b      	ldrb	r3, [r3, #6]
   146ce:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   146d2:	d020      	beq.n	14716 <bt_gatt_is_subscribed+0xa2>
		attr = bt_gatt_attr_next(attr);
   146d4:	4620      	mov	r0, r4
   146d6:	f7ff fdd9 	bl	1428c <bt_gatt_attr_next>
   146da:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   146dc:	2300      	movs	r3, #0
   146de:	6820      	ldr	r0, [r4, #0]
   146e0:	f88d 3004 	strb.w	r3, [sp, #4]
   146e4:	f642 1302 	movw	r3, #10498	; 0x2902
   146e8:	a901      	add	r1, sp, #4
   146ea:	f8ad 3006 	strh.w	r3, [sp, #6]
   146ee:	f007 fc9a 	bl	1c026 <bt_uuid_cmp>
   146f2:	b118      	cbz	r0, 146fc <bt_gatt_is_subscribed+0x88>
		attr = bt_gatt_attr_next(attr);
   146f4:	4620      	mov	r0, r4
   146f6:	f7ff fdc9 	bl	1428c <bt_gatt_attr_next>
   146fa:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   146fc:	2500      	movs	r5, #0
   146fe:	f642 1302 	movw	r3, #10498	; 0x2902
   14702:	6820      	ldr	r0, [r4, #0]
   14704:	a901      	add	r1, sp, #4
   14706:	f88d 5004 	strb.w	r5, [sp, #4]
   1470a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1470e:	f007 fc8a 	bl	1c026 <bt_uuid_cmp>
   14712:	b110      	cbz	r0, 1471a <bt_gatt_is_subscribed+0xa6>
		return false;
   14714:	2000      	movs	r0, #0
}
   14716:	b003      	add	sp, #12
   14718:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   1471a:	68e5      	ldr	r5, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   1471c:	1c6c      	adds	r4, r5, #1
   1471e:	3565      	adds	r5, #101	; 0x65
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   14720:	4622      	mov	r2, r4
   14722:	4630      	mov	r0, r6
   14724:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   14728:	f007 fe63 	bl	1c3f2 <bt_conn_is_peer_addr_le>
   1472c:	b118      	cbz	r0, 14736 <bt_gatt_is_subscribed+0xc2>
   1472e:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   14732:	421f      	tst	r7, r3
   14734:	d1ef      	bne.n	14716 <bt_gatt_is_subscribed+0xa2>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   14736:	340a      	adds	r4, #10
   14738:	42ac      	cmp	r4, r5
   1473a:	d1f1      	bne.n	14720 <bt_gatt_is_subscribed+0xac>
   1473c:	e7ea      	b.n	14714 <bt_gatt_is_subscribed+0xa0>
   1473e:	bf00      	nop
   14740:	00022538 	.word	0x00022538
   14744:	0002003d 	.word	0x0002003d

00014748 <bt_gatt_discover>:
{
   14748:	b5f0      	push	{r4, r5, r6, r7, lr}
   1474a:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1474c:	4605      	mov	r5, r0
{
   1474e:	b085      	sub	sp, #20
	__ASSERT(conn, "invalid parameters\n");
   14750:	b950      	cbnz	r0, 14768 <bt_gatt_discover+0x20>
   14752:	4989      	ldr	r1, [pc, #548]	; (14978 <bt_gatt_discover+0x230>)
   14754:	4889      	ldr	r0, [pc, #548]	; (1497c <bt_gatt_discover+0x234>)
   14756:	f640 5277 	movw	r2, #3447	; 0xd77
   1475a:	f006 f9ab 	bl	1aab4 <printk>
   1475e:	f640 5177 	movw	r1, #3447	; 0xd77
   14762:	4885      	ldr	r0, [pc, #532]	; (14978 <bt_gatt_discover+0x230>)
   14764:	f006 fc4c 	bl	1b000 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   14768:	b10c      	cbz	r4, 1476e <bt_gatt_discover+0x26>
   1476a:	6863      	ldr	r3, [r4, #4]
   1476c:	b953      	cbnz	r3, 14784 <bt_gatt_discover+0x3c>
   1476e:	4982      	ldr	r1, [pc, #520]	; (14978 <bt_gatt_discover+0x230>)
   14770:	4882      	ldr	r0, [pc, #520]	; (1497c <bt_gatt_discover+0x234>)
   14772:	f640 5278 	movw	r2, #3448	; 0xd78
   14776:	f006 f99d 	bl	1aab4 <printk>
   1477a:	f640 5178 	movw	r1, #3448	; 0xd78
   1477e:	487e      	ldr	r0, [pc, #504]	; (14978 <bt_gatt_discover+0x230>)
   14780:	f006 fc3e 	bl	1b000 <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   14784:	8923      	ldrh	r3, [r4, #8]
   14786:	b10b      	cbz	r3, 1478c <bt_gatt_discover+0x44>
   14788:	89e3      	ldrh	r3, [r4, #14]
   1478a:	b953      	cbnz	r3, 147a2 <bt_gatt_discover+0x5a>
   1478c:	497a      	ldr	r1, [pc, #488]	; (14978 <bt_gatt_discover+0x230>)
   1478e:	487b      	ldr	r0, [pc, #492]	; (1497c <bt_gatt_discover+0x234>)
   14790:	f640 5279 	movw	r2, #3449	; 0xd79
   14794:	f006 f98e 	bl	1aab4 <printk>
   14798:	f640 5179 	movw	r1, #3449	; 0xd79
   1479c:	4876      	ldr	r0, [pc, #472]	; (14978 <bt_gatt_discover+0x230>)
   1479e:	f006 fc2f 	bl	1b000 <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   147a2:	8922      	ldrh	r2, [r4, #8]
   147a4:	89e3      	ldrh	r3, [r4, #14]
   147a6:	429a      	cmp	r2, r3
   147a8:	d90a      	bls.n	147c0 <bt_gatt_discover+0x78>
   147aa:	4973      	ldr	r1, [pc, #460]	; (14978 <bt_gatt_discover+0x230>)
   147ac:	4873      	ldr	r0, [pc, #460]	; (1497c <bt_gatt_discover+0x234>)
   147ae:	f640 527b 	movw	r2, #3451	; 0xd7b
   147b2:	f006 f97f 	bl	1aab4 <printk>
   147b6:	f640 517b 	movw	r1, #3451	; 0xd7b
   147ba:	486f      	ldr	r0, [pc, #444]	; (14978 <bt_gatt_discover+0x230>)
   147bc:	f006 fc20 	bl	1b000 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   147c0:	7aab      	ldrb	r3, [r5, #10]
   147c2:	2b07      	cmp	r3, #7
   147c4:	f040 80d5 	bne.w	14972 <bt_gatt_discover+0x22a>
	switch (params->type) {
   147c8:	7c22      	ldrb	r2, [r4, #16]
   147ca:	2a05      	cmp	r2, #5
   147cc:	f200 80cc 	bhi.w	14968 <bt_gatt_discover+0x220>
   147d0:	e8df f002 	tbb	[pc, r2]
   147d4:	64640303 	.word	0x64640303
   147d8:	b683      	.short	0xb683
		if (params->uuid) {
   147da:	6823      	ldr	r3, [r4, #0]
   147dc:	2b00      	cmp	r3, #0
   147de:	d03e      	beq.n	1485e <bt_gatt_discover+0x116>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
   147e0:	2206      	movs	r2, #6
   147e2:	4628      	mov	r0, r5
   147e4:	4611      	mov	r1, r2
   147e6:	f7fe fa0b 	bl	12c00 <bt_att_create_pdu>
	if (!buf) {
   147ea:	4606      	mov	r6, r0
   147ec:	b918      	cbnz	r0, 147f6 <bt_gatt_discover+0xae>
		return -ENOMEM;
   147ee:	f06f 000b 	mvn.w	r0, #11
}
   147f2:	b005      	add	sp, #20
   147f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   147f6:	f100 0708 	add.w	r7, r0, #8
   147fa:	2106      	movs	r1, #6
   147fc:	4638      	mov	r0, r7
   147fe:	f001 f9f9 	bl	15bf4 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14802:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
   14804:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14806:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   14808:	89e3      	ldrh	r3, [r4, #14]
   1480a:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1480c:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   1480e:	2b00      	cmp	r3, #0
   14810:	f642 0301 	movw	r3, #10241	; 0x2801
   14814:	bf08      	it	eq
   14816:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   1481a:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   1481c:	780a      	ldrb	r2, [r1, #0]
   1481e:	b15a      	cbz	r2, 14838 <bt_gatt_discover+0xf0>
   14820:	2a02      	cmp	r2, #2
   14822:	d016      	beq.n	14852 <bt_gatt_discover+0x10a>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   14824:	4856      	ldr	r0, [pc, #344]	; (14980 <bt_gatt_discover+0x238>)
   14826:	2145      	movs	r1, #69	; 0x45
   14828:	f006 f944 	bl	1aab4 <printk>
		net_buf_unref(buf);
   1482c:	4630      	mov	r0, r6
   1482e:	f001 f8cb 	bl	159c8 <net_buf_unref>
	return -EINVAL;
   14832:	f06f 0015 	mvn.w	r0, #21
   14836:	e7dc      	b.n	147f2 <bt_gatt_discover+0xaa>
	net_buf_simple_add_le16(&buf->b, val);
   14838:	4638      	mov	r0, r7
   1483a:	8849      	ldrh	r1, [r1, #2]
   1483c:	f008 fecf 	bl	1d5de <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
   14840:	4623      	mov	r3, r4
   14842:	4a50      	ldr	r2, [pc, #320]	; (14984 <bt_gatt_discover+0x23c>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14844:	4631      	mov	r1, r6
   14846:	4628      	mov	r0, r5
}
   14848:	b005      	add	sp, #20
   1484a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   1484e:	f7ff b811 	b.w	13874 <gatt_send.constprop.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14852:	2210      	movs	r2, #16
   14854:	4638      	mov	r0, r7
   14856:	3101      	adds	r1, #1
   14858:	f008 feae 	bl	1d5b8 <net_buf_simple_add_mem>
   1485c:	e7f0      	b.n	14840 <bt_gatt_discover+0xf8>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
   1485e:	2204      	movs	r2, #4
   14860:	2110      	movs	r1, #16
   14862:	4628      	mov	r0, r5
   14864:	f7fe f9cc 	bl	12c00 <bt_att_create_pdu>
	if (!buf) {
   14868:	4606      	mov	r6, r0
   1486a:	2800      	cmp	r0, #0
   1486c:	d0bf      	beq.n	147ee <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   1486e:	f100 0708 	add.w	r7, r0, #8
   14872:	2104      	movs	r1, #4
   14874:	4638      	mov	r0, r7
   14876:	f001 f9bd 	bl	15bf4 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1487a:	8923      	ldrh	r3, [r4, #8]
   1487c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   1487e:	89e3      	ldrh	r3, [r4, #14]
   14880:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   14882:	7c23      	ldrb	r3, [r4, #16]
   14884:	b93b      	cbnz	r3, 14896 <bt_gatt_discover+0x14e>
	net_buf_simple_add_le16(&buf->b, val);
   14886:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   1488a:	4638      	mov	r0, r7
   1488c:	f008 fea7 	bl	1d5de <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
   14890:	4623      	mov	r3, r4
   14892:	4a3d      	ldr	r2, [pc, #244]	; (14988 <bt_gatt_discover+0x240>)
   14894:	e7d6      	b.n	14844 <bt_gatt_discover+0xfc>
   14896:	f642 0101 	movw	r1, #10241	; 0x2801
   1489a:	e7f6      	b.n	1488a <bt_gatt_discover+0x142>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   1489c:	2204      	movs	r2, #4
   1489e:	2108      	movs	r1, #8
   148a0:	4628      	mov	r0, r5
   148a2:	f7fe f9ad 	bl	12c00 <bt_att_create_pdu>
	if (!buf) {
   148a6:	4606      	mov	r6, r0
   148a8:	2800      	cmp	r0, #0
   148aa:	d0a0      	beq.n	147ee <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   148ac:	f100 0708 	add.w	r7, r0, #8
   148b0:	2104      	movs	r1, #4
   148b2:	4638      	mov	r0, r7
   148b4:	f001 f99e 	bl	15bf4 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   148b8:	8923      	ldrh	r3, [r4, #8]
   148ba:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   148bc:	89e3      	ldrh	r3, [r4, #14]
   148be:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   148c0:	7c23      	ldrb	r3, [r4, #16]
	net_buf_simple_add_le16(&buf->b, val);
   148c2:	4638      	mov	r0, r7
   148c4:	2b02      	cmp	r3, #2
   148c6:	bf0c      	ite	eq
   148c8:	f642 0102 	movweq	r1, #10242	; 0x2802
   148cc:	f642 0103 	movwne	r1, #10243	; 0x2803
   148d0:	f008 fe85 	bl	1d5de <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
   148d4:	4623      	mov	r3, r4
   148d6:	4a2d      	ldr	r2, [pc, #180]	; (1498c <bt_gatt_discover+0x244>)
   148d8:	e7b4      	b.n	14844 <bt_gatt_discover+0xfc>
		if (params->uuid &&
   148da:	6820      	ldr	r0, [r4, #0]
   148dc:	b380      	cbz	r0, 14940 <bt_gatt_discover+0x1f8>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   148de:	2600      	movs	r6, #0
   148e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   148e4:	4669      	mov	r1, sp
   148e6:	f88d 6000 	strb.w	r6, [sp]
   148ea:	f8ad 3002 	strh.w	r3, [sp, #2]
   148ee:	f007 fb9a 	bl	1c026 <bt_uuid_cmp>
		if (params->uuid &&
   148f2:	2800      	cmp	r0, #0
   148f4:	d09d      	beq.n	14832 <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   148f6:	f642 0301 	movw	r3, #10241	; 0x2801
   148fa:	6820      	ldr	r0, [r4, #0]
   148fc:	a901      	add	r1, sp, #4
   148fe:	f88d 6004 	strb.w	r6, [sp, #4]
   14902:	f8ad 3006 	strh.w	r3, [sp, #6]
   14906:	f007 fb8e 	bl	1c026 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1490a:	2800      	cmp	r0, #0
   1490c:	d091      	beq.n	14832 <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1490e:	f642 0302 	movw	r3, #10242	; 0x2802
   14912:	6820      	ldr	r0, [r4, #0]
   14914:	a902      	add	r1, sp, #8
   14916:	f88d 6008 	strb.w	r6, [sp, #8]
   1491a:	f8ad 300a 	strh.w	r3, [sp, #10]
   1491e:	f007 fb82 	bl	1c026 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   14922:	2800      	cmp	r0, #0
   14924:	d085      	beq.n	14832 <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   14926:	f642 0303 	movw	r3, #10243	; 0x2803
   1492a:	6820      	ldr	r0, [r4, #0]
   1492c:	a903      	add	r1, sp, #12
   1492e:	f88d 600c 	strb.w	r6, [sp, #12]
   14932:	f8ad 300e 	strh.w	r3, [sp, #14]
   14936:	f007 fb76 	bl	1c026 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1493a:	2800      	cmp	r0, #0
   1493c:	f43f af79 	beq.w	14832 <bt_gatt_discover+0xea>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
   14940:	2204      	movs	r2, #4
   14942:	4628      	mov	r0, r5
   14944:	4611      	mov	r1, r2
   14946:	f7fe f95b 	bl	12c00 <bt_att_create_pdu>
	if (!buf) {
   1494a:	4606      	mov	r6, r0
   1494c:	2800      	cmp	r0, #0
   1494e:	f43f af4e 	beq.w	147ee <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   14952:	2104      	movs	r1, #4
   14954:	3008      	adds	r0, #8
   14956:	f001 f94d 	bl	15bf4 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1495a:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   1495c:	4a0c      	ldr	r2, [pc, #48]	; (14990 <bt_gatt_discover+0x248>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1495e:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   14960:	89e3      	ldrh	r3, [r4, #14]
   14962:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14964:	4623      	mov	r3, r4
   14966:	e76d      	b.n	14844 <bt_gatt_discover+0xfc>
		BT_ERR("Invalid discovery type: %u", params->type);
   14968:	2145      	movs	r1, #69	; 0x45
   1496a:	480a      	ldr	r0, [pc, #40]	; (14994 <bt_gatt_discover+0x24c>)
   1496c:	f006 f8a2 	bl	1aab4 <printk>
   14970:	e75f      	b.n	14832 <bt_gatt_discover+0xea>
		return -ENOTCONN;
   14972:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14976:	e73c      	b.n	147f2 <bt_gatt_discover+0xaa>
   14978:	00022538 	.word	0x00022538
   1497c:	0002003d 	.word	0x0002003d
   14980:	000225f7 	.word	0x000225f7
   14984:	0001d3c3 	.word	0x0001d3c3
   14988:	00014999 	.word	0x00014999
   1498c:	00014aa1 	.word	0x00014aa1
   14990:	00014d51 	.word	0x00014d51
   14994:	00022611 	.word	0x00022611

00014998 <gatt_read_group_rsp>:
{
   14998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1499c:	b08f      	sub	sp, #60	; 0x3c
   1499e:	4681      	mov	r9, r0
   149a0:	4617      	mov	r7, r2
   149a2:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
   149a4:	b131      	cbz	r1, 149b4 <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   149a6:	462a      	mov	r2, r5
   149a8:	2100      	movs	r1, #0
   149aa:	686b      	ldr	r3, [r5, #4]
}
   149ac:	b00f      	add	sp, #60	; 0x3c
   149ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   149b2:	4718      	bx	r3
	switch (rsp->len) {
   149b4:	7812      	ldrb	r2, [r2, #0]
   149b6:	2a06      	cmp	r2, #6
   149b8:	d00d      	beq.n	149d6 <gatt_read_group_rsp+0x3e>
   149ba:	2a14      	cmp	r2, #20
   149bc:	d021      	beq.n	14a02 <gatt_read_group_rsp+0x6a>
		BT_ERR("Invalid data len %u", rsp->len);
   149be:	2145      	movs	r1, #69	; 0x45
   149c0:	4836      	ldr	r0, [pc, #216]	; (14a9c <gatt_read_group_rsp+0x104>)
   149c2:	f006 f877 	bl	1aab4 <printk>
	params->func(conn, NULL, params);
   149c6:	462a      	mov	r2, r5
   149c8:	2100      	movs	r1, #0
   149ca:	4648      	mov	r0, r9
   149cc:	686b      	ldr	r3, [r5, #4]
   149ce:	4798      	blx	r3
}
   149d0:	b00f      	add	sp, #60	; 0x3c
   149d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   149d6:	f88d 1010 	strb.w	r1, [sp, #16]
	uint16_t start_handle, end_handle = 0U;
   149da:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   149dc:	3b01      	subs	r3, #1
   149de:	b29c      	uxth	r4, r3
   149e0:	f107 0801 	add.w	r8, r7, #1
   149e4:	783b      	ldrb	r3, [r7, #0]
   149e6:	42a3      	cmp	r3, r4
   149e8:	d90f      	bls.n	14a0a <gatt_read_group_rsp+0x72>
	if (length == 0U && end_handle) {
   149ea:	2c00      	cmp	r4, #0
   149ec:	d1eb      	bne.n	149c6 <gatt_read_group_rsp+0x2e>
   149ee:	2e00      	cmp	r6, #0
   149f0:	d0e9      	beq.n	149c6 <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   149f2:	462a      	mov	r2, r5
   149f4:	4631      	mov	r1, r6
   149f6:	4648      	mov	r0, r9
}
   149f8:	b00f      	add	sp, #60	; 0x3c
   149fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   149fe:	f008 bcc3 	b.w	1d388 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   14a02:	2202      	movs	r2, #2
   14a04:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   14a08:	e7e7      	b.n	149da <gatt_read_group_rsp+0x42>
		struct bt_gatt_attr attr = {};
   14a0a:	2214      	movs	r2, #20
   14a0c:	2100      	movs	r1, #0
   14a0e:	a809      	add	r0, sp, #36	; 0x24
   14a10:	f007 fabf 	bl	1bf92 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   14a14:	f8b8 a000 	ldrh.w	sl, [r8]
   14a18:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   14a1c:	2b00      	cmp	r3, #0
   14a1e:	d0d2      	beq.n	149c6 <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   14a20:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   14a24:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   14a28:	2e00      	cmp	r6, #0
   14a2a:	d0cc      	beq.n	149c6 <gatt_read_group_rsp+0x2e>
   14a2c:	42b3      	cmp	r3, r6
   14a2e:	d8ca      	bhi.n	149c6 <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   14a30:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14a34:	b323      	cbz	r3, 14a80 <gatt_read_group_rsp+0xe8>
   14a36:	2b02      	cmp	r3, #2
   14a38:	d02a      	beq.n	14a90 <gatt_read_group_rsp+0xf8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   14a3a:	f04f 0300 	mov.w	r3, #0
   14a3e:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   14a42:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14a44:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   14a46:	2b00      	cmp	r3, #0
   14a48:	f642 0301 	movw	r3, #10241	; 0x2801
   14a4c:	bf08      	it	eq
   14a4e:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   14a52:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   14a56:	ab04      	add	r3, sp, #16
   14a58:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   14a5a:	ab01      	add	r3, sp, #4
   14a5c:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   14a5e:	ab02      	add	r3, sp, #8
   14a60:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14a62:	4648      	mov	r0, r9
   14a64:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
   14a66:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
   14a6a:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14a6e:	a909      	add	r1, sp, #36	; 0x24
   14a70:	4798      	blx	r3
   14a72:	2800      	cmp	r0, #0
   14a74:	d0ac      	beq.n	149d0 <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14a76:	783a      	ldrb	r2, [r7, #0]
   14a78:	1aa4      	subs	r4, r4, r2
   14a7a:	b2a4      	uxth	r4, r4
   14a7c:	4490      	add	r8, r2
   14a7e:	e7b1      	b.n	149e4 <gatt_read_group_rsp+0x4c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   14a80:	2202      	movs	r2, #2
   14a82:	f108 0104 	add.w	r1, r8, #4
   14a86:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   14a8a:	f007 fa57 	bl	1bf3c <memcpy>
			break;
   14a8e:	e7d4      	b.n	14a3a <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   14a90:	2210      	movs	r2, #16
   14a92:	f108 0104 	add.w	r1, r8, #4
   14a96:	f10d 0011 	add.w	r0, sp, #17
   14a9a:	e7f6      	b.n	14a8a <gatt_read_group_rsp+0xf2>
   14a9c:	00022631 	.word	0x00022631

00014aa0 <gatt_read_type_rsp>:
{
   14aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14aa4:	b091      	sub	sp, #68	; 0x44
   14aa6:	4607      	mov	r7, r0
   14aa8:	4690      	mov	r8, r2
   14aaa:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	if (err) {
   14aac:	b131      	cbz	r1, 14abc <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   14aae:	462a      	mov	r2, r5
   14ab0:	2100      	movs	r1, #0
   14ab2:	686b      	ldr	r3, [r5, #4]
}
   14ab4:	b011      	add	sp, #68	; 0x44
   14ab6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   14aba:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14abc:	7c28      	ldrb	r0, [r5, #16]
	switch (rsp->len) {
   14abe:	7812      	ldrb	r2, [r2, #0]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14ac0:	2802      	cmp	r0, #2
   14ac2:	f040 8089 	bne.w	14bd8 <gatt_read_type_rsp+0x138>
	switch (rsp->len) {
   14ac6:	2a06      	cmp	r2, #6
   14ac8:	d01c      	beq.n	14b04 <gatt_read_type_rsp+0x64>
   14aca:	2a08      	cmp	r2, #8
   14acc:	f040 8088 	bne.w	14be0 <gatt_read_type_rsp+0x140>
		u.uuid.type = BT_UUID_TYPE_16;
   14ad0:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   14ad4:	2600      	movs	r6, #0
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14ad6:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   14ad8:	1e5c      	subs	r4, r3, #1
   14ada:	b2a4      	uxth	r4, r4
   14adc:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
   14ae0:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
   14ae4:	f898 3000 	ldrb.w	r3, [r8]
   14ae8:	42a3      	cmp	r3, r4
   14aea:	d90e      	bls.n	14b0a <gatt_read_type_rsp+0x6a>
	if (length == 0U && handle) {
   14aec:	2c00      	cmp	r4, #0
   14aee:	d17b      	bne.n	14be8 <gatt_read_type_rsp+0x148>
   14af0:	2e00      	cmp	r6, #0
   14af2:	d079      	beq.n	14be8 <gatt_read_type_rsp+0x148>
	gatt_discover_next(conn, handle, params);
   14af4:	462a      	mov	r2, r5
   14af6:	4631      	mov	r1, r6
   14af8:	4638      	mov	r0, r7
}
   14afa:	b011      	add	sp, #68	; 0x44
   14afc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   14b00:	f008 bc42 	b.w	1d388 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   14b04:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
   14b08:	e7e4      	b.n	14ad4 <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
   14b0a:	f8b9 3000 	ldrh.w	r3, [r9]
   14b0e:	b29e      	uxth	r6, r3
		if (!handle) {
   14b10:	2e00      	cmp	r6, #0
   14b12:	d069      	beq.n	14be8 <gatt_read_type_rsp+0x148>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   14b14:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   14b18:	f8ad 2014 	strh.w	r2, [sp, #20]
   14b1c:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   14b1e:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   14b22:	b291      	uxth	r1, r2
   14b24:	f8ad 2016 	strh.w	r2, [sp, #22]
		switch (u.uuid.type) {
   14b28:	f89d 2018 	ldrb.w	r2, [sp, #24]
   14b2c:	b182      	cbz	r2, 14b50 <gatt_read_type_rsp+0xb0>
   14b2e:	2a02      	cmp	r2, #2
   14b30:	d019      	beq.n	14b66 <gatt_read_type_rsp+0xc6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14b32:	6829      	ldr	r1, [r5, #0]
   14b34:	2900      	cmp	r1, #0
   14b36:	d036      	beq.n	14ba6 <gatt_read_type_rsp+0x106>
   14b38:	4650      	mov	r0, sl
   14b3a:	9301      	str	r3, [sp, #4]
   14b3c:	f007 fa73 	bl	1c026 <bt_uuid_cmp>
   14b40:	9b01      	ldr	r3, [sp, #4]
   14b42:	b380      	cbz	r0, 14ba6 <gatt_read_type_rsp+0x106>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14b44:	f898 2000 	ldrb.w	r2, [r8]
   14b48:	1aa4      	subs	r4, r4, r2
   14b4a:	b2a4      	uxth	r4, r4
   14b4c:	4491      	add	r9, r2
   14b4e:	e7c9      	b.n	14ae4 <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
   14b50:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   14b54:	f899 2006 	ldrb.w	r2, [r9, #6]
   14b58:	f899 1007 	ldrb.w	r1, [r9, #7]
   14b5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14b60:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
   14b64:	e7e5      	b.n	14b32 <gatt_read_type_rsp+0x92>
			params->_included.start_handle = value.start_handle;
   14b66:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   14b68:	81a9      	strh	r1, [r5, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14b6a:	4638      	mov	r0, r7
   14b6c:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
   14b6e:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14b70:	9201      	str	r2, [sp, #4]
   14b72:	f7fe f845 	bl	12c00 <bt_att_create_pdu>
	if (!buf) {
   14b76:	4604      	mov	r4, r0
   14b78:	b190      	cbz	r0, 14ba0 <gatt_read_type_rsp+0x100>
   14b7a:	9a01      	ldr	r2, [sp, #4]
   14b7c:	3008      	adds	r0, #8
   14b7e:	4611      	mov	r1, r2
   14b80:	f001 f838 	bl	15bf4 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14b84:	896b      	ldrh	r3, [r5, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   14b86:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14b88:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   14b8a:	4a49      	ldr	r2, [pc, #292]	; (14cb0 <gatt_read_type_rsp+0x210>)
   14b8c:	462b      	mov	r3, r5
   14b8e:	4638      	mov	r0, r7
   14b90:	f7fe fe70 	bl	13874 <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
   14b94:	b286      	uxth	r6, r0
	if (!handle) {
   14b96:	2e00      	cmp	r6, #0
   14b98:	d1ac      	bne.n	14af4 <gatt_read_type_rsp+0x54>
}
   14b9a:	b011      	add	sp, #68	; 0x44
   14b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   14ba0:	f06f 000b 	mvn.w	r0, #11
   14ba4:	e7f6      	b.n	14b94 <gatt_read_type_rsp+0xf4>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14ba6:	f642 0202 	movw	r2, #10242	; 0x2802
   14baa:	f8ad 200e 	strh.w	r2, [sp, #14]
   14bae:	aa03      	add	r2, sp, #12
   14bb0:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
   14bb4:	aa04      	add	r2, sp, #16
   14bb6:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
   14bb8:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14bbc:	462a      	mov	r2, r5
   14bbe:	4638      	mov	r0, r7
   14bc0:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14bc2:	f88d b00c 	strb.w	fp, [sp, #12]
   14bc6:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   14bca:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14bce:	a90b      	add	r1, sp, #44	; 0x2c
   14bd0:	4798      	blx	r3
   14bd2:	2800      	cmp	r0, #0
   14bd4:	d1b6      	bne.n	14b44 <gatt_read_type_rsp+0xa4>
   14bd6:	e7e0      	b.n	14b9a <gatt_read_type_rsp+0xfa>
	switch (rsp->len) {
   14bd8:	2a07      	cmp	r2, #7
   14bda:	d00b      	beq.n	14bf4 <gatt_read_type_rsp+0x154>
   14bdc:	2a15      	cmp	r2, #21
   14bde:	d02e      	beq.n	14c3e <gatt_read_type_rsp+0x19e>
		BT_ERR("Invalid data len %u", rsp->len);
   14be0:	2145      	movs	r1, #69	; 0x45
   14be2:	4834      	ldr	r0, [pc, #208]	; (14cb4 <gatt_read_type_rsp+0x214>)
   14be4:	f005 ff66 	bl	1aab4 <printk>
	params->func(conn, NULL, params);
   14be8:	462a      	mov	r2, r5
   14bea:	2100      	movs	r1, #0
   14bec:	4638      	mov	r0, r7
   14bee:	686b      	ldr	r3, [r5, #4]
   14bf0:	4798      	blx	r3
	if (!handle) {
   14bf2:	e7d2      	b.n	14b9a <gatt_read_type_rsp+0xfa>
		u.uuid.type = BT_UUID_TYPE_16;
   14bf4:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   14bf8:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   14bfa:	1e5c      	subs	r4, r3, #1
   14bfc:	b2a4      	uxth	r4, r4
   14bfe:	f108 0901 	add.w	r9, r8, #1
   14c02:	f10d 0a18 	add.w	sl, sp, #24
   14c06:	f898 3000 	ldrb.w	r3, [r8]
   14c0a:	42a3      	cmp	r3, r4
   14c0c:	f63f af6e 	bhi.w	14aec <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
   14c10:	f8b9 b000 	ldrh.w	fp, [r9]
   14c14:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   14c18:	2e00      	cmp	r6, #0
   14c1a:	d0e5      	beq.n	14be8 <gatt_read_type_rsp+0x148>
		switch (u.uuid.type) {
   14c1c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   14c20:	b18b      	cbz	r3, 14c46 <gatt_read_type_rsp+0x1a6>
   14c22:	2b02      	cmp	r3, #2
   14c24:	d018      	beq.n	14c58 <gatt_read_type_rsp+0x1b8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14c26:	6829      	ldr	r1, [r5, #0]
   14c28:	b1f1      	cbz	r1, 14c68 <gatt_read_type_rsp+0x1c8>
   14c2a:	4650      	mov	r0, sl
   14c2c:	f007 f9fb 	bl	1c026 <bt_uuid_cmp>
   14c30:	b1d0      	cbz	r0, 14c68 <gatt_read_type_rsp+0x1c8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14c32:	f898 2000 	ldrb.w	r2, [r8]
   14c36:	1aa4      	subs	r4, r4, r2
   14c38:	b2a4      	uxth	r4, r4
   14c3a:	4491      	add	r9, r2
   14c3c:	e7e3      	b.n	14c06 <gatt_read_type_rsp+0x166>
		u.uuid.type = BT_UUID_TYPE_128;
   14c3e:	2202      	movs	r2, #2
   14c40:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
   14c44:	e7d8      	b.n	14bf8 <gatt_read_type_rsp+0x158>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   14c46:	f899 3005 	ldrb.w	r3, [r9, #5]
   14c4a:	f899 2006 	ldrb.w	r2, [r9, #6]
   14c4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14c52:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
   14c56:	e7e6      	b.n	14c26 <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   14c58:	2210      	movs	r2, #16
   14c5a:	f109 0105 	add.w	r1, r9, #5
   14c5e:	f10d 0019 	add.w	r0, sp, #25
   14c62:	f007 f96b 	bl	1bf3c <memcpy>
			break;
   14c66:	e7de      	b.n	14c26 <gatt_read_type_rsp+0x186>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14c68:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   14c6c:	f899 3002 	ldrb.w	r3, [r9, #2]
   14c70:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14c74:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14c78:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14c7c:	2300      	movs	r3, #0
   14c7e:	f8ad 200e 	strh.w	r2, [sp, #14]
   14c82:	aa03      	add	r2, sp, #12
   14c84:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
   14c88:	aa04      	add	r2, sp, #16
   14c8a:	f88d 300c 	strb.w	r3, [sp, #12]
   14c8e:	930d      	str	r3, [sp, #52]	; 0x34
   14c90:	920e      	str	r2, [sp, #56]	; 0x38
   14c92:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14c96:	462a      	mov	r2, r5
   14c98:	4638      	mov	r0, r7
   14c9a:	686b      	ldr	r3, [r5, #4]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14c9c:	f8cd a010 	str.w	sl, [sp, #16]
		attr.handle = handle;
   14ca0:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14ca4:	a90b      	add	r1, sp, #44	; 0x2c
   14ca6:	4798      	blx	r3
   14ca8:	2800      	cmp	r0, #0
   14caa:	d1c2      	bne.n	14c32 <gatt_read_type_rsp+0x192>
   14cac:	e775      	b.n	14b9a <gatt_read_type_rsp+0xfa>
   14cae:	bf00      	nop
   14cb0:	00014cb9 	.word	0x00014cb9
   14cb4:	00022631 	.word	0x00022631

00014cb8 <read_included_uuid_cb>:
{
   14cb8:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
   14cba:	2b10      	cmp	r3, #16
{
   14cbc:	b08e      	sub	sp, #56	; 0x38
   14cbe:	4611      	mov	r1, r2
   14cc0:	4605      	mov	r5, r0
   14cc2:	461a      	mov	r2, r3
   14cc4:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   14cc6:	d00b      	beq.n	14ce0 <read_included_uuid_cb+0x28>
		BT_ERR("Invalid data len %u", length);
   14cc8:	2145      	movs	r1, #69	; 0x45
   14cca:	4820      	ldr	r0, [pc, #128]	; (14d4c <read_included_uuid_cb+0x94>)
   14ccc:	f005 fef2 	bl	1aab4 <printk>
		params->func(conn, NULL, params);
   14cd0:	4622      	mov	r2, r4
   14cd2:	2100      	movs	r1, #0
   14cd4:	4628      	mov	r0, r5
   14cd6:	6863      	ldr	r3, [r4, #4]
}
   14cd8:	b00e      	add	sp, #56	; 0x38
   14cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   14cde:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   14ce0:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   14ce2:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
   14ce4:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   14ce8:	89a3      	ldrh	r3, [r4, #12]
	memcpy(u.u128.val, pdu, length);
   14cea:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
   14cee:	f8ad 300e 	strh.w	r3, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   14cf2:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   14cf4:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   14cf6:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   14cfa:	f007 f91f 	bl	1bf3c <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14cfe:	6821      	ldr	r1, [r4, #0]
   14d00:	b9c9      	cbnz	r1, 14d36 <read_included_uuid_cb+0x7e>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14d02:	f642 0202 	movw	r2, #10242	; 0x2802
   14d06:	2300      	movs	r3, #0
   14d08:	f8ad 2006 	strh.w	r2, [sp, #6]
   14d0c:	aa01      	add	r2, sp, #4
   14d0e:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   14d12:	f88d 3004 	strb.w	r3, [sp, #4]
   14d16:	930b      	str	r3, [sp, #44]	; 0x2c
   14d18:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   14d1c:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14d1e:	aa02      	add	r2, sp, #8
   14d20:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   14d22:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14d26:	4622      	mov	r2, r4
   14d28:	4628      	mov	r0, r5
   14d2a:	6863      	ldr	r3, [r4, #4]
   14d2c:	a909      	add	r1, sp, #36	; 0x24
   14d2e:	4798      	blx	r3
   14d30:	b930      	cbnz	r0, 14d40 <read_included_uuid_cb+0x88>
}
   14d32:	b00e      	add	sp, #56	; 0x38
   14d34:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14d36:	4630      	mov	r0, r6
   14d38:	f007 f975 	bl	1c026 <bt_uuid_cmp>
   14d3c:	2800      	cmp	r0, #0
   14d3e:	d0e0      	beq.n	14d02 <read_included_uuid_cb+0x4a>
	gatt_discover_next(conn, params->start_handle, params);
   14d40:	4622      	mov	r2, r4
   14d42:	4628      	mov	r0, r5
   14d44:	8921      	ldrh	r1, [r4, #8]
   14d46:	f008 fb1f 	bl	1d388 <gatt_discover_next>
	return;
   14d4a:	e7f2      	b.n	14d32 <read_included_uuid_cb+0x7a>
   14d4c:	00022631 	.word	0x00022631

00014d50 <gatt_find_info_rsp>:
{
   14d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d54:	b08f      	sub	sp, #60	; 0x3c
   14d56:	4680      	mov	r8, r0
   14d58:	4614      	mov	r4, r2
   14d5a:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   14d5c:	b941      	cbnz	r1, 14d70 <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   14d5e:	7812      	ldrb	r2, [r2, #0]
   14d60:	2a01      	cmp	r2, #1
   14d62:	d00b      	beq.n	14d7c <gatt_find_info_rsp+0x2c>
   14d64:	2a02      	cmp	r2, #2
   14d66:	d022      	beq.n	14dae <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
   14d68:	2145      	movs	r1, #69	; 0x45
   14d6a:	484b      	ldr	r0, [pc, #300]	; (14e98 <gatt_find_info_rsp+0x148>)
   14d6c:	f005 fea2 	bl	1aab4 <printk>
	params->func(conn, NULL, params);
   14d70:	4632      	mov	r2, r6
   14d72:	2100      	movs	r1, #0
   14d74:	4640      	mov	r0, r8
   14d76:	6873      	ldr	r3, [r6, #4]
   14d78:	4798      	blx	r3
   14d7a:	e08a      	b.n	14e92 <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i16);
   14d7c:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
   14d80:	f88d 1010 	strb.w	r1, [sp, #16]
	length--;
   14d84:	3b01      	subs	r3, #1
   14d86:	b29b      	uxth	r3, r3
	if (length < len) {
   14d88:	4553      	cmp	r3, sl
   14d8a:	d3f1      	bcc.n	14d70 <gatt_find_info_rsp+0x20>
	bool skip = false;
   14d8c:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   14d90:	fbb3 f3fa 	udiv	r3, r3, sl
	uint16_t handle = 0U;
   14d94:	46cb      	mov	fp, r9
			skip = false;
   14d96:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
   14d98:	9300      	str	r3, [sp, #0]
   14d9a:	3401      	adds	r4, #1
   14d9c:	af04      	add	r7, sp, #16
   14d9e:	9b00      	ldr	r3, [sp, #0]
   14da0:	b953      	cbnz	r3, 14db8 <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
   14da2:	4632      	mov	r2, r6
   14da4:	4659      	mov	r1, fp
   14da6:	4640      	mov	r0, r8
   14da8:	f008 faee 	bl	1d388 <gatt_discover_next>
	return;
   14dac:	e071      	b.n	14e92 <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i128);
   14dae:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
   14db2:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   14db6:	e7e5      	b.n	14d84 <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
   14db8:	8823      	ldrh	r3, [r4, #0]
   14dba:	9301      	str	r3, [sp, #4]
   14dbc:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   14dc0:	f1b9 0f00 	cmp.w	r9, #0
   14dc4:	d151      	bne.n	14e6a <gatt_find_info_rsp+0x11a>
		switch (u.uuid.type) {
   14dc6:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14dca:	2b00      	cmp	r3, #0
   14dcc:	d03a      	beq.n	14e44 <gatt_find_info_rsp+0xf4>
   14dce:	2b02      	cmp	r3, #2
   14dd0:	d03f      	beq.n	14e52 <gatt_find_info_rsp+0x102>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14dd2:	6831      	ldr	r1, [r6, #0]
   14dd4:	2900      	cmp	r1, #0
   14dd6:	d143      	bne.n	14e60 <gatt_find_info_rsp+0x110>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   14dd8:	7c33      	ldrb	r3, [r6, #16]
   14dda:	2b04      	cmp	r3, #4
   14ddc:	d148      	bne.n	14e70 <gatt_find_info_rsp+0x120>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14dde:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   14de2:	4638      	mov	r0, r7
   14de4:	a902      	add	r1, sp, #8
   14de6:	f88d 5008 	strb.w	r5, [sp, #8]
   14dea:	f8ad 300a 	strh.w	r3, [sp, #10]
   14dee:	f007 f91a 	bl	1c026 <bt_uuid_cmp>
   14df2:	b310      	cbz	r0, 14e3a <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14df4:	f642 0301 	movw	r3, #10241	; 0x2801
   14df8:	4638      	mov	r0, r7
   14dfa:	a903      	add	r1, sp, #12
   14dfc:	f88d 500c 	strb.w	r5, [sp, #12]
   14e00:	f8ad 300e 	strh.w	r3, [sp, #14]
   14e04:	f007 f90f 	bl	1c026 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14e08:	b1b8      	cbz	r0, 14e3a <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   14e0a:	f642 0302 	movw	r3, #10242	; 0x2802
   14e0e:	4638      	mov	r0, r7
   14e10:	a909      	add	r1, sp, #36	; 0x24
   14e12:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   14e16:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   14e1a:	f007 f904 	bl	1c026 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   14e1e:	b160      	cbz	r0, 14e3a <gatt_find_info_rsp+0xea>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   14e20:	f642 0303 	movw	r3, #10243	; 0x2803
   14e24:	4638      	mov	r0, r7
   14e26:	a909      	add	r1, sp, #36	; 0x24
   14e28:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   14e2c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   14e30:	f007 f8f9 	bl	1c026 <bt_uuid_cmp>
   14e34:	b9e0      	cbnz	r0, 14e70 <gatt_find_info_rsp+0x120>
				skip = true;
   14e36:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   14e3a:	9b00      	ldr	r3, [sp, #0]
   14e3c:	4454      	add	r4, sl
   14e3e:	3b01      	subs	r3, #1
   14e40:	9300      	str	r3, [sp, #0]
   14e42:	e7ac      	b.n	14d9e <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   14e44:	78a3      	ldrb	r3, [r4, #2]
   14e46:	78e2      	ldrb	r2, [r4, #3]
   14e48:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14e4c:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   14e50:	e7bf      	b.n	14dd2 <gatt_find_info_rsp+0x82>
			memcpy(u.u128.val, info.i128->uuid, 16);
   14e52:	2210      	movs	r2, #16
   14e54:	1ca1      	adds	r1, r4, #2
   14e56:	f10d 0011 	add.w	r0, sp, #17
   14e5a:	f007 f86f 	bl	1bf3c <memcpy>
			break;
   14e5e:	e7b8      	b.n	14dd2 <gatt_find_info_rsp+0x82>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14e60:	4638      	mov	r0, r7
   14e62:	f007 f8e0 	bl	1c026 <bt_uuid_cmp>
   14e66:	2800      	cmp	r0, #0
   14e68:	d0b6      	beq.n	14dd8 <gatt_find_info_rsp+0x88>
			skip = false;
   14e6a:	f04f 0900 	mov.w	r9, #0
   14e6e:	e7e4      	b.n	14e3a <gatt_find_info_rsp+0xea>
		attr.handle = handle;
   14e70:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14e74:	4632      	mov	r2, r6
		attr.handle = handle;
   14e76:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14e7a:	4640      	mov	r0, r8
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14e7c:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   14e80:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14e84:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14e86:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14e8a:	a909      	add	r1, sp, #36	; 0x24
   14e8c:	4798      	blx	r3
   14e8e:	2800      	cmp	r0, #0
   14e90:	d1d3      	bne.n	14e3a <gatt_find_info_rsp+0xea>
}
   14e92:	b00f      	add	sp, #60	; 0x3c
   14e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e98:	0002264a 	.word	0x0002264a

00014e9c <bt_gatt_read>:
{
   14e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ea0:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   14ea2:	4605      	mov	r5, r0
   14ea4:	b950      	cbnz	r0, 14ebc <bt_gatt_read+0x20>
   14ea6:	4945      	ldr	r1, [pc, #276]	; (14fbc <bt_gatt_read+0x120>)
   14ea8:	4845      	ldr	r0, [pc, #276]	; (14fc0 <bt_gatt_read+0x124>)
   14eaa:	f640 62a6 	movw	r2, #3750	; 0xea6
   14eae:	f005 fe01 	bl	1aab4 <printk>
   14eb2:	f640 61a6 	movw	r1, #3750	; 0xea6
   14eb6:	4841      	ldr	r0, [pc, #260]	; (14fbc <bt_gatt_read+0x120>)
   14eb8:	f006 f8a2 	bl	1b000 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   14ebc:	b10c      	cbz	r4, 14ec2 <bt_gatt_read+0x26>
   14ebe:	6823      	ldr	r3, [r4, #0]
   14ec0:	b953      	cbnz	r3, 14ed8 <bt_gatt_read+0x3c>
   14ec2:	493e      	ldr	r1, [pc, #248]	; (14fbc <bt_gatt_read+0x120>)
   14ec4:	483e      	ldr	r0, [pc, #248]	; (14fc0 <bt_gatt_read+0x124>)
   14ec6:	f640 62a7 	movw	r2, #3751	; 0xea7
   14eca:	f005 fdf3 	bl	1aab4 <printk>
   14ece:	f640 61a7 	movw	r1, #3751	; 0xea7
   14ed2:	483a      	ldr	r0, [pc, #232]	; (14fbc <bt_gatt_read+0x120>)
   14ed4:	f006 f894 	bl	1b000 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14ed8:	7aab      	ldrb	r3, [r5, #10]
   14eda:	2b07      	cmp	r3, #7
   14edc:	d16a      	bne.n	14fb4 <bt_gatt_read+0x118>
	if (params->handle_count == 0) {
   14ede:	6862      	ldr	r2, [r4, #4]
   14ee0:	bb22      	cbnz	r2, 14f2c <bt_gatt_read+0x90>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   14ee2:	2204      	movs	r2, #4
   14ee4:	2108      	movs	r1, #8
   14ee6:	4628      	mov	r0, r5
   14ee8:	f7fd fe8a 	bl	12c00 <bt_att_create_pdu>
	if (!buf) {
   14eec:	4606      	mov	r6, r0
   14eee:	b918      	cbnz	r0, 14ef8 <bt_gatt_read+0x5c>
		return -ENOMEM;
   14ef0:	f06f 000b 	mvn.w	r0, #11
}
   14ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ef8:	f100 0708 	add.w	r7, r0, #8
   14efc:	2104      	movs	r1, #4
   14efe:	4638      	mov	r0, r7
   14f00:	f000 fe78 	bl	15bf4 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   14f04:	8923      	ldrh	r3, [r4, #8]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   14f06:	68e1      	ldr	r1, [r4, #12]
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   14f08:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
   14f0a:	8963      	ldrh	r3, [r4, #10]
   14f0c:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   14f0e:	780b      	ldrb	r3, [r1, #0]
   14f10:	b933      	cbnz	r3, 14f20 <bt_gatt_read+0x84>
	net_buf_simple_add_le16(&buf->b, val);
   14f12:	4638      	mov	r0, r7
   14f14:	8849      	ldrh	r1, [r1, #2]
   14f16:	f008 fb62 	bl	1d5de <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14f1a:	4623      	mov	r3, r4
   14f1c:	4a29      	ldr	r2, [pc, #164]	; (14fc4 <bt_gatt_read+0x128>)
   14f1e:	e01a      	b.n	14f56 <bt_gatt_read+0xba>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14f20:	2210      	movs	r2, #16
   14f22:	4638      	mov	r0, r7
   14f24:	3101      	adds	r1, #1
   14f26:	f008 fb47 	bl	1d5b8 <net_buf_simple_add_mem>
   14f2a:	e7f6      	b.n	14f1a <bt_gatt_read+0x7e>
	if (params->handle_count > 1) {
   14f2c:	2a01      	cmp	r2, #1
   14f2e:	d01f      	beq.n	14f70 <bt_gatt_read+0xd4>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_REQ,
   14f30:	210e      	movs	r1, #14
   14f32:	4628      	mov	r0, r5
   14f34:	0052      	lsls	r2, r2, #1
   14f36:	f7fd fe63 	bl	12c00 <bt_att_create_pdu>
	if (!buf) {
   14f3a:	4606      	mov	r6, r0
   14f3c:	2800      	cmp	r0, #0
   14f3e:	d0d7      	beq.n	14ef0 <bt_gatt_read+0x54>
   14f40:	2700      	movs	r7, #0
	net_buf_simple_add_le16(&buf->b, val);
   14f42:	f100 0808 	add.w	r8, r0, #8
	for (i = 0U; i < params->handle_count; i++) {
   14f46:	6862      	ldr	r2, [r4, #4]
   14f48:	b2fb      	uxtb	r3, r7
   14f4a:	429a      	cmp	r2, r3
   14f4c:	f107 0701 	add.w	r7, r7, #1
   14f50:	d807      	bhi.n	14f62 <bt_gatt_read+0xc6>
	return gatt_send(conn, buf, gatt_read_mult_rsp, params, NULL);
   14f52:	4623      	mov	r3, r4
   14f54:	4a1c      	ldr	r2, [pc, #112]	; (14fc8 <bt_gatt_read+0x12c>)
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14f56:	4631      	mov	r1, r6
   14f58:	4628      	mov	r0, r5
}
   14f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14f5e:	f7fe bc89 	b.w	13874 <gatt_send.constprop.0>
		net_buf_add_le16(buf, params->handles[i]);
   14f62:	68a2      	ldr	r2, [r4, #8]
   14f64:	4640      	mov	r0, r8
   14f66:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   14f6a:	f008 fb38 	bl	1d5de <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
   14f6e:	e7ea      	b.n	14f46 <bt_gatt_read+0xaa>
	if (params->single.offset) {
   14f70:	8963      	ldrh	r3, [r4, #10]
   14f72:	b183      	cbz	r3, 14f96 <bt_gatt_read+0xfa>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_BLOB_REQ, sizeof(*req));
   14f74:	2204      	movs	r2, #4
   14f76:	210c      	movs	r1, #12
   14f78:	4628      	mov	r0, r5
   14f7a:	f7fd fe41 	bl	12c00 <bt_att_create_pdu>
	if (!buf) {
   14f7e:	4606      	mov	r6, r0
   14f80:	2800      	cmp	r0, #0
   14f82:	d0b5      	beq.n	14ef0 <bt_gatt_read+0x54>
	return net_buf_simple_add(&buf->b, len);
   14f84:	2104      	movs	r1, #4
   14f86:	3008      	adds	r0, #8
   14f88:	f000 fe34 	bl	15bf4 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   14f8c:	8923      	ldrh	r3, [r4, #8]
   14f8e:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
   14f90:	8963      	ldrh	r3, [r4, #10]
   14f92:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14f94:	e7c1      	b.n	14f1a <bt_gatt_read+0x7e>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14f96:	2202      	movs	r2, #2
   14f98:	210a      	movs	r1, #10
   14f9a:	4628      	mov	r0, r5
   14f9c:	f7fd fe30 	bl	12c00 <bt_att_create_pdu>
	if (!buf) {
   14fa0:	4606      	mov	r6, r0
   14fa2:	2800      	cmp	r0, #0
   14fa4:	d0a4      	beq.n	14ef0 <bt_gatt_read+0x54>
   14fa6:	2102      	movs	r1, #2
   14fa8:	3008      	adds	r0, #8
   14faa:	f000 fe23 	bl	15bf4 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   14fae:	8923      	ldrh	r3, [r4, #8]
   14fb0:	8003      	strh	r3, [r0, #0]
   14fb2:	e7b2      	b.n	14f1a <bt_gatt_read+0x7e>
		return -ENOTCONN;
   14fb4:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14fb8:	e79c      	b.n	14ef4 <bt_gatt_read+0x58>
   14fba:	bf00      	nop
   14fbc:	00022538 	.word	0x00022538
   14fc0:	0002003d 	.word	0x0002003d
   14fc4:	00014fcd 	.word	0x00014fcd
   14fc8:	0001cf69 	.word	0x0001cf69

00014fcc <gatt_read_rsp>:
{
   14fcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14fd0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14fd2:	4606      	mov	r6, r0
   14fd4:	4690      	mov	r8, r2
   14fd6:	461d      	mov	r5, r3
	if (err || !length) {
   14fd8:	460f      	mov	r7, r1
   14fda:	b901      	cbnz	r1, 14fde <gatt_read_rsp+0x12>
   14fdc:	b953      	cbnz	r3, 14ff4 <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
   14fde:	2300      	movs	r3, #0
   14fe0:	4622      	mov	r2, r4
   14fe2:	4639      	mov	r1, r7
   14fe4:	930a      	str	r3, [sp, #40]	; 0x28
   14fe6:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14fe8:	4630      	mov	r0, r6
   14fea:	46ac      	mov	ip, r5
}
   14fec:	b003      	add	sp, #12
   14fee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14ff2:	4760      	bx	ip
	if (!params->handle_count) {
   14ff4:	6863      	ldr	r3, [r4, #4]
   14ff6:	2b00      	cmp	r3, #0
   14ff8:	d141      	bne.n	1507e <gatt_read_rsp+0xb2>
	for (length--, pdu = rsp->data; length;
   14ffa:	3d01      	subs	r5, #1
   14ffc:	b2ad      	uxth	r5, r5
   14ffe:	f102 0901 	add.w	r9, r2, #1
   15002:	b305      	cbz	r5, 15046 <gatt_read_rsp+0x7a>
		handle = sys_le16_to_cpu(data->handle);
   15004:	f8b9 2000 	ldrh.w	r2, [r9]
   15008:	b293      	uxth	r3, r2
		if (!handle) {
   1500a:	b933      	cbnz	r3, 1501a <gatt_read_rsp+0x4e>
			BT_ERR("Invalid handle");
   1500c:	2145      	movs	r1, #69	; 0x45
   1500e:	482c      	ldr	r0, [pc, #176]	; (150c0 <gatt_read_rsp+0xf4>)
}
   15010:	b003      	add	sp, #12
   15012:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("Invalid handle");
   15016:	f005 bd4d 	b.w	1aab4 <printk>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   1501a:	f898 3000 	ldrb.w	r3, [r8]
		params->by_uuid.start_handle = handle;
   1501e:	8122      	strh	r2, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   15020:	42ab      	cmp	r3, r5
   15022:	bf8c      	ite	hi
   15024:	1eab      	subhi	r3, r5, #2
   15026:	3b02      	subls	r3, #2
   15028:	b29b      	uxth	r3, r3
		if (params->func(conn, 0, params, data->value, len) ==
   1502a:	9300      	str	r3, [sp, #0]
   1502c:	4622      	mov	r2, r4
   1502e:	2100      	movs	r1, #0
   15030:	4630      	mov	r0, r6
   15032:	6827      	ldr	r7, [r4, #0]
   15034:	f109 0302 	add.w	r3, r9, #2
   15038:	47b8      	blx	r7
   1503a:	2800      	cmp	r0, #0
   1503c:	d03d      	beq.n	150ba <gatt_read_rsp+0xee>
		if (rsp->len > length) {
   1503e:	f898 1000 	ldrb.w	r1, [r8]
   15042:	428d      	cmp	r5, r1
   15044:	d20b      	bcs.n	1505e <gatt_read_rsp+0x92>
	if (bt_gatt_read(conn, params) < 0) {
   15046:	4621      	mov	r1, r4
   15048:	4630      	mov	r0, r6
   1504a:	f7ff ff27 	bl	14e9c <bt_gatt_read>
   1504e:	2800      	cmp	r0, #0
   15050:	da33      	bge.n	150ba <gatt_read_rsp+0xee>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   15052:	2300      	movs	r3, #0
   15054:	930a      	str	r3, [sp, #40]	; 0x28
   15056:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   15058:	4622      	mov	r2, r4
   1505a:	210e      	movs	r1, #14
   1505c:	e7c4      	b.n	14fe8 <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
   1505e:	8922      	ldrh	r2, [r4, #8]
   15060:	8960      	ldrh	r0, [r4, #10]
   15062:	4290      	cmp	r0, r2
   15064:	d105      	bne.n	15072 <gatt_read_rsp+0xa6>
			params->func(conn, 0, params, NULL, 0);
   15066:	2300      	movs	r3, #0
   15068:	930a      	str	r3, [sp, #40]	; 0x28
   1506a:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
   1506c:	4622      	mov	r2, r4
   1506e:	4619      	mov	r1, r3
   15070:	e7ba      	b.n	14fe8 <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
   15072:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   15074:	1a6d      	subs	r5, r5, r1
		params->by_uuid.start_handle++;
   15076:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   15078:	b2ad      	uxth	r5, r5
   1507a:	4489      	add	r9, r1
   1507c:	e7c1      	b.n	15002 <gatt_read_rsp+0x36>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
   1507e:	9500      	str	r5, [sp, #0]
   15080:	4613      	mov	r3, r2
   15082:	f8d4 c000 	ldr.w	ip, [r4]
   15086:	4622      	mov	r2, r4
   15088:	47e0      	blx	ip
   1508a:	b1b0      	cbz	r0, 150ba <gatt_read_rsp+0xee>
	if (length < (bt_att_get_mtu(conn) - 1)) {
   1508c:	4630      	mov	r0, r6
   1508e:	f007 fded 	bl	1cc6c <bt_att_get_mtu>
   15092:	3801      	subs	r0, #1
   15094:	4285      	cmp	r5, r0
   15096:	da03      	bge.n	150a0 <gatt_read_rsp+0xd4>
		params->func(conn, 0, params, NULL, 0);
   15098:	970a      	str	r7, [sp, #40]	; 0x28
   1509a:	463b      	mov	r3, r7
   1509c:	6825      	ldr	r5, [r4, #0]
   1509e:	e7e5      	b.n	1506c <gatt_read_rsp+0xa0>
	params->single.offset += length;
   150a0:	8963      	ldrh	r3, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   150a2:	4621      	mov	r1, r4
	params->single.offset += length;
   150a4:	441d      	add	r5, r3
	if (bt_gatt_read(conn, params) < 0) {
   150a6:	4630      	mov	r0, r6
	params->single.offset += length;
   150a8:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   150aa:	f7ff fef7 	bl	14e9c <bt_gatt_read>
   150ae:	2800      	cmp	r0, #0
   150b0:	da03      	bge.n	150ba <gatt_read_rsp+0xee>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   150b2:	970a      	str	r7, [sp, #40]	; 0x28
   150b4:	463b      	mov	r3, r7
   150b6:	6825      	ldr	r5, [r4, #0]
   150b8:	e7ce      	b.n	15058 <gatt_read_rsp+0x8c>
}
   150ba:	b003      	add	sp, #12
   150bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   150c0:	00022661 	.word	0x00022661

000150c4 <bt_gatt_subscribe>:
{
   150c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   150c6:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   150c8:	4606      	mov	r6, r0
   150ca:	b950      	cbnz	r0, 150e2 <bt_gatt_subscribe+0x1e>
   150cc:	4944      	ldr	r1, [pc, #272]	; (151e0 <bt_gatt_subscribe+0x11c>)
   150ce:	4845      	ldr	r0, [pc, #276]	; (151e4 <bt_gatt_subscribe+0x120>)
   150d0:	f640 72fb 	movw	r2, #4091	; 0xffb
   150d4:	f005 fcee 	bl	1aab4 <printk>
   150d8:	f640 71fb 	movw	r1, #4091	; 0xffb
   150dc:	4840      	ldr	r0, [pc, #256]	; (151e0 <bt_gatt_subscribe+0x11c>)
   150de:	f005 ff8f 	bl	1b000 <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   150e2:	b10d      	cbz	r5, 150e8 <bt_gatt_subscribe+0x24>
   150e4:	682b      	ldr	r3, [r5, #0]
   150e6:	b953      	cbnz	r3, 150fe <bt_gatt_subscribe+0x3a>
   150e8:	493d      	ldr	r1, [pc, #244]	; (151e0 <bt_gatt_subscribe+0x11c>)
   150ea:	483e      	ldr	r0, [pc, #248]	; (151e4 <bt_gatt_subscribe+0x120>)
   150ec:	f640 72fc 	movw	r2, #4092	; 0xffc
   150f0:	f005 fce0 	bl	1aab4 <printk>
   150f4:	f640 71fc 	movw	r1, #4092	; 0xffc
   150f8:	4839      	ldr	r0, [pc, #228]	; (151e0 <bt_gatt_subscribe+0x11c>)
   150fa:	f005 ff81 	bl	1b000 <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   150fe:	89ab      	ldrh	r3, [r5, #12]
   15100:	b953      	cbnz	r3, 15118 <bt_gatt_subscribe+0x54>
   15102:	4937      	ldr	r1, [pc, #220]	; (151e0 <bt_gatt_subscribe+0x11c>)
   15104:	4837      	ldr	r0, [pc, #220]	; (151e4 <bt_gatt_subscribe+0x120>)
   15106:	f640 72fd 	movw	r2, #4093	; 0xffd
   1510a:	f005 fcd3 	bl	1aab4 <printk>
   1510e:	f640 71fd 	movw	r1, #4093	; 0xffd
   15112:	4833      	ldr	r0, [pc, #204]	; (151e0 <bt_gatt_subscribe+0x11c>)
   15114:	f005 ff74 	bl	1b000 <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   15118:	896b      	ldrh	r3, [r5, #10]
   1511a:	b953      	cbnz	r3, 15132 <bt_gatt_subscribe+0x6e>
   1511c:	4930      	ldr	r1, [pc, #192]	; (151e0 <bt_gatt_subscribe+0x11c>)
   1511e:	4831      	ldr	r0, [pc, #196]	; (151e4 <bt_gatt_subscribe+0x120>)
   15120:	f241 0203 	movw	r2, #4099	; 0x1003
   15124:	f005 fcc6 	bl	1aab4 <printk>
   15128:	f241 0103 	movw	r1, #4099	; 0x1003
   1512c:	482c      	ldr	r0, [pc, #176]	; (151e0 <bt_gatt_subscribe+0x11c>)
   1512e:	f005 ff67 	bl	1b000 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   15132:	7ab3      	ldrb	r3, [r6, #10]
   15134:	2b07      	cmp	r3, #7
   15136:	d14b      	bne.n	151d0 <bt_gatt_subscribe+0x10c>
	sub = gatt_sub_find(conn);
   15138:	4630      	mov	r0, r6
   1513a:	f7fe f9e3 	bl	13504 <gatt_sub_find>
	if (!sub) {
   1513e:	4604      	mov	r4, r0
   15140:	b958      	cbnz	r0, 1515a <bt_gatt_subscribe+0x96>
		sub = gatt_sub_find(NULL);
   15142:	f7fe f9df 	bl	13504 <gatt_sub_find>
		if (sub) {
   15146:	4604      	mov	r4, r0
   15148:	2800      	cmp	r0, #0
   1514a:	d044      	beq.n	151d6 <bt_gatt_subscribe+0x112>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1514c:	f106 0188 	add.w	r1, r6, #136	; 0x88
   15150:	3001      	adds	r0, #1
   15152:	f007 feea 	bl	1cf2a <bt_addr_le_copy>
			sub->id = conn->id;
   15156:	7a33      	ldrb	r3, [r6, #8]
   15158:	7023      	strb	r3, [r4, #0]
	return list->head;
   1515a:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1515c:	b90a      	cbnz	r2, 15162 <bt_gatt_subscribe+0x9e>
   1515e:	4613      	mov	r3, r2
   15160:	e001      	b.n	15166 <bt_gatt_subscribe+0xa2>
   15162:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   15166:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   15168:	b97b      	cbnz	r3, 1518a <bt_gatt_subscribe+0xc6>
	if (!has_subscription) {
   1516a:	bb41      	cbnz	r1, 151be <bt_gatt_subscribe+0xfa>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
   1516c:	4630      	mov	r0, r6
   1516e:	462b      	mov	r3, r5
   15170:	89aa      	ldrh	r2, [r5, #12]
   15172:	8969      	ldrh	r1, [r5, #10]
   15174:	f7fe fe24 	bl	13dc0 <gatt_write_ccc.constprop.0>
		if (err) {
   15178:	4606      	mov	r6, r0
   1517a:	b300      	cbz	r0, 151be <bt_gatt_subscribe+0xfa>
	if (sys_slist_is_empty(&sub->list)) {
   1517c:	68a3      	ldr	r3, [r4, #8]
   1517e:	b913      	cbnz	r3, 15186 <bt_gatt_subscribe+0xc2>
   15180:	4620      	mov	r0, r4
   15182:	f007 ff0c 	bl	1cf9e <gatt_sub_remove.part.0>
}
   15186:	4630      	mov	r0, r6
   15188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   1518a:	42ab      	cmp	r3, r5
   1518c:	d106      	bne.n	1519c <bt_gatt_subscribe+0xd8>
	if (sys_slist_is_empty(&sub->list)) {
   1518e:	b912      	cbnz	r2, 15196 <bt_gatt_subscribe+0xd2>
   15190:	4620      	mov	r0, r4
   15192:	f007 ff04 	bl	1cf9e <gatt_sub_remove.part.0>
			return -EALREADY;
   15196:	f06f 0644 	mvn.w	r6, #68	; 0x44
   1519a:	e7f4      	b.n	15186 <bt_gatt_subscribe+0xc2>
		if (tmp->value_handle == params->value_handle &&
   1519c:	891f      	ldrh	r7, [r3, #8]
   1519e:	8928      	ldrh	r0, [r5, #8]
   151a0:	4287      	cmp	r7, r0
   151a2:	d104      	bne.n	151ae <bt_gatt_subscribe+0xea>
   151a4:	899f      	ldrh	r7, [r3, #12]
   151a6:	89a8      	ldrh	r0, [r5, #12]
			has_subscription = true;
   151a8:	4287      	cmp	r7, r0
   151aa:	bf28      	it	cs
   151ac:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   151ae:	f113 0f14 	cmn.w	r3, #20
   151b2:	d0da      	beq.n	1516a <bt_gatt_subscribe+0xa6>
	return node->next;
   151b4:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   151b6:	2b00      	cmp	r3, #0
   151b8:	d0d7      	beq.n	1516a <bt_gatt_subscribe+0xa6>
   151ba:	3b14      	subs	r3, #20
   151bc:	e7d4      	b.n	15168 <bt_gatt_subscribe+0xa4>
	parent->next = child;
   151be:	68a2      	ldr	r2, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   151c0:	68e6      	ldr	r6, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   151c2:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
   151c6:	616a      	str	r2, [r5, #20]
	list->head = node;
   151c8:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   151ca:	b93e      	cbnz	r6, 151dc <bt_gatt_subscribe+0x118>
	list->tail = node;
   151cc:	60e3      	str	r3, [r4, #12]
}
   151ce:	e7da      	b.n	15186 <bt_gatt_subscribe+0xc2>
		return -ENOTCONN;
   151d0:	f06f 0638 	mvn.w	r6, #56	; 0x38
   151d4:	e7d7      	b.n	15186 <bt_gatt_subscribe+0xc2>
		return -ENOMEM;
   151d6:	f06f 060b 	mvn.w	r6, #11
   151da:	e7d4      	b.n	15186 <bt_gatt_subscribe+0xc2>
	return 0;
   151dc:	2600      	movs	r6, #0
   151de:	e7d2      	b.n	15186 <bt_gatt_subscribe+0xc2>
   151e0:	00022538 	.word	0x00022538
   151e4:	0002003d 	.word	0x0002003d

000151e8 <bt_gatt_unsubscribe>:
{
   151e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151ec:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   151ee:	4607      	mov	r7, r0
   151f0:	b950      	cbnz	r0, 15208 <bt_gatt_unsubscribe+0x20>
   151f2:	4947      	ldr	r1, [pc, #284]	; (15310 <bt_gatt_unsubscribe+0x128>)
   151f4:	4847      	ldr	r0, [pc, #284]	; (15314 <bt_gatt_unsubscribe+0x12c>)
   151f6:	f241 025c 	movw	r2, #4188	; 0x105c
   151fa:	f005 fc5b 	bl	1aab4 <printk>
   151fe:	f241 015c 	movw	r1, #4188	; 0x105c
   15202:	4843      	ldr	r0, [pc, #268]	; (15310 <bt_gatt_unsubscribe+0x128>)
   15204:	f005 fefc 	bl	1b000 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   15208:	b956      	cbnz	r6, 15220 <bt_gatt_unsubscribe+0x38>
   1520a:	4941      	ldr	r1, [pc, #260]	; (15310 <bt_gatt_unsubscribe+0x128>)
   1520c:	4841      	ldr	r0, [pc, #260]	; (15314 <bt_gatt_unsubscribe+0x12c>)
   1520e:	f241 025d 	movw	r2, #4189	; 0x105d
   15212:	f005 fc4f 	bl	1aab4 <printk>
   15216:	f241 015d 	movw	r1, #4189	; 0x105d
   1521a:	483d      	ldr	r0, [pc, #244]	; (15310 <bt_gatt_unsubscribe+0x128>)
   1521c:	f005 fef0 	bl	1b000 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   15220:	7abb      	ldrb	r3, [r7, #10]
   15222:	2b07      	cmp	r3, #7
   15224:	d170      	bne.n	15308 <bt_gatt_unsubscribe+0x120>
	sub = gatt_sub_find(conn);
   15226:	4638      	mov	r0, r7
   15228:	f7fe f96c 	bl	13504 <gatt_sub_find>
	if (!sub) {
   1522c:	4680      	mov	r8, r0
   1522e:	b920      	cbnz	r0, 1523a <bt_gatt_unsubscribe+0x52>
		return -EINVAL;
   15230:	f06f 0015 	mvn.w	r0, #21
}
   15234:	b003      	add	sp, #12
   15236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   1523a:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1523c:	b1cc      	cbz	r4, 15272 <bt_gatt_unsubscribe+0x8a>
   1523e:	f1b4 0514 	subs.w	r5, r4, #20
   15242:	d018      	beq.n	15276 <bt_gatt_unsubscribe+0x8e>
	return node->next;
   15244:	6824      	ldr	r4, [r4, #0]
   15246:	b104      	cbz	r4, 1524a <bt_gatt_unsubscribe+0x62>
   15248:	3c14      	subs	r4, #20
   1524a:	f04f 0900 	mov.w	r9, #0
   1524e:	464b      	mov	r3, r9
   15250:	46ca      	mov	sl, r9
			if (atomic_test_bit(params->flags,
   15252:	f106 0b10 	add.w	fp, r6, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15256:	b985      	cbnz	r5, 1527a <bt_gatt_unsubscribe+0x92>
	if (!found) {
   15258:	2b00      	cmp	r3, #0
   1525a:	d0e9      	beq.n	15230 <bt_gatt_unsubscribe+0x48>
	if (has_subscription) {
   1525c:	f1ba 0f00 	cmp.w	sl, #0
   15260:	d047      	beq.n	152f2 <bt_gatt_unsubscribe+0x10a>
		params->notify(conn, params, NULL, 0);
   15262:	462b      	mov	r3, r5
   15264:	462a      	mov	r2, r5
   15266:	4631      	mov	r1, r6
   15268:	4638      	mov	r0, r7
   1526a:	6834      	ldr	r4, [r6, #0]
   1526c:	47a0      	blx	r4
		return 0;
   1526e:	4628      	mov	r0, r5
   15270:	e7e0      	b.n	15234 <bt_gatt_unsubscribe+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   15272:	4625      	mov	r5, r4
   15274:	e7e9      	b.n	1524a <bt_gatt_unsubscribe+0x62>
   15276:	462c      	mov	r4, r5
   15278:	e7e7      	b.n	1524a <bt_gatt_unsubscribe+0x62>
		if (params == tmp) {
   1527a:	42b5      	cmp	r5, r6
			sys_slist_remove(&sub->list, prev, &tmp->node);
   1527c:	f105 0114 	add.w	r1, r5, #20
		if (params == tmp) {
   15280:	d12b      	bne.n	152da <bt_gatt_unsubscribe+0xf2>
Z_GENLIST_REMOVE(slist, snode)
   15282:	696b      	ldr	r3, [r5, #20]
   15284:	f8d8 000c 	ldr.w	r0, [r8, #12]
   15288:	f1b9 0f00 	cmp.w	r9, #0
   1528c:	d11e      	bne.n	152cc <bt_gatt_unsubscribe+0xe4>
   1528e:	4281      	cmp	r1, r0
	list->head = node;
   15290:	f8c8 3008 	str.w	r3, [r8, #8]
Z_GENLIST_REMOVE(slist, snode)
   15294:	d101      	bne.n	1529a <bt_gatt_unsubscribe+0xb2>
	list->tail = node;
   15296:	f8c8 300c 	str.w	r3, [r8, #12]
	parent->next = child;
   1529a:	2300      	movs	r3, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1529c:	4658      	mov	r0, fp
   1529e:	616b      	str	r3, [r5, #20]
   152a0:	f007 fe5f 	bl	1cf62 <atomic_get>
			if (atomic_test_bit(params->flags,
   152a4:	0742      	lsls	r2, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   152a6:	f3c0 0380 	ubfx	r3, r0, #2, #1
   152aa:	d51e      	bpl.n	152ea <bt_gatt_unsubscribe+0x102>
	bt_att_req_cancel(conn, params);
   152ac:	4631      	mov	r1, r6
   152ae:	4638      	mov	r0, r7
   152b0:	9301      	str	r3, [sp, #4]
   152b2:	f7fe f88b 	bl	133cc <bt_att_req_cancel>
}
   152b6:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   152b8:	b1cc      	cbz	r4, 152ee <bt_gatt_unsubscribe+0x106>
Z_GENLIST_PEEK_NEXT(slist, snode)
   152ba:	f114 0114 	adds.w	r1, r4, #20
   152be:	d002      	beq.n	152c6 <bt_gatt_unsubscribe+0xde>
	return node->next;
   152c0:	6961      	ldr	r1, [r4, #20]
   152c2:	b101      	cbz	r1, 152c6 <bt_gatt_unsubscribe+0xde>
   152c4:	3914      	subs	r1, #20
   152c6:	4625      	mov	r5, r4
   152c8:	460c      	mov	r4, r1
   152ca:	e7c4      	b.n	15256 <bt_gatt_unsubscribe+0x6e>
Z_GENLIST_REMOVE(slist, snode)
   152cc:	4288      	cmp	r0, r1
	parent->next = child;
   152ce:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
   152d2:	bf08      	it	eq
   152d4:	f8c8 900c 	streq.w	r9, [r8, #12]
}
   152d8:	e7df      	b.n	1529a <bt_gatt_unsubscribe+0xb2>
		if (tmp->value_handle == params->value_handle) {
   152da:	892d      	ldrh	r5, [r5, #8]
   152dc:	8930      	ldrh	r0, [r6, #8]
			sys_slist_remove(&sub->list, prev, &tmp->node);
   152de:	4689      	mov	r9, r1
   152e0:	4285      	cmp	r5, r0
   152e2:	bf08      	it	eq
   152e4:	f04f 0a01 	moveq.w	sl, #1
   152e8:	e7e6      	b.n	152b8 <bt_gatt_unsubscribe+0xd0>
			found = true;
   152ea:	2301      	movs	r3, #1
   152ec:	e7e4      	b.n	152b8 <bt_gatt_unsubscribe+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   152ee:	4621      	mov	r1, r4
   152f0:	e7e9      	b.n	152c6 <bt_gatt_unsubscribe+0xde>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   152f2:	4633      	mov	r3, r6
   152f4:	4652      	mov	r2, sl
   152f6:	4638      	mov	r0, r7
   152f8:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   152fa:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   152fe:	b003      	add	sp, #12
   15300:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   15304:	f7fe bd5c 	b.w	13dc0 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   15308:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1530c:	e792      	b.n	15234 <bt_gatt_unsubscribe+0x4c>
   1530e:	bf00      	nop
   15310:	00022538 	.word	0x00022538
   15314:	0002003d 	.word	0x0002003d

00015318 <bt_gatt_mult_notification>:
{
   15318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1531c:	b085      	sub	sp, #20
   1531e:	4680      	mov	r8, r0
   15320:	460c      	mov	r4, r1
   15322:	4691      	mov	r9, r2
	sub = gatt_sub_find(conn);
   15324:	f7fe f8ee 	bl	13504 <gatt_sub_find>
	if (!sub) {
   15328:	4606      	mov	r6, r0
   1532a:	b1d0      	cbz	r0, 15362 <bt_gatt_mult_notification+0x4a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1532c:	464a      	mov	r2, r9
   1532e:	4621      	mov	r1, r4
   15330:	a801      	add	r0, sp, #4
   15332:	f008 f918 	bl	1d566 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   15336:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1533a:	2b04      	cmp	r3, #4
   1533c:	d911      	bls.n	15362 <bt_gatt_mult_notification+0x4a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1533e:	2104      	movs	r1, #4
   15340:	eb0d 0001 	add.w	r0, sp, r1
   15344:	f000 fc38 	bl	15bb8 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   15348:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   1534c:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   15350:	4605      	mov	r5, r0
		if (len > buf.len) {
   15352:	4553      	cmp	r3, sl
   15354:	d208      	bcs.n	15368 <bt_gatt_mult_notification+0x50>
			BT_ERR("Invalid data len %u > %u", len, length);
   15356:	464b      	mov	r3, r9
   15358:	4652      	mov	r2, sl
   1535a:	2145      	movs	r1, #69	; 0x45
   1535c:	4816      	ldr	r0, [pc, #88]	; (153b8 <bt_gatt_mult_notification+0xa0>)
   1535e:	f005 fba9 	bl	1aab4 <printk>
}
   15362:	b005      	add	sp, #20
   15364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   15368:	68b3      	ldr	r3, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1536a:	b303      	cbz	r3, 153ae <bt_gatt_mult_notification+0x96>
   1536c:	f1b3 0714 	subs.w	r7, r3, #20
   15370:	d01d      	beq.n	153ae <bt_gatt_mult_notification+0x96>
	return node->next;
   15372:	681c      	ldr	r4, [r3, #0]
   15374:	b104      	cbz	r4, 15378 <bt_gatt_mult_notification+0x60>
   15376:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   15378:	f835 bb04 	ldrh.w	fp, [r5], #4
			if (handle != params->value_handle) {
   1537c:	893b      	ldrh	r3, [r7, #8]
   1537e:	455b      	cmp	r3, fp
   15380:	d10b      	bne.n	1539a <bt_gatt_mult_notification+0x82>
			if (params->notify(conn, params, nfy->value, len) ==
   15382:	4653      	mov	r3, sl
   15384:	462a      	mov	r2, r5
   15386:	4639      	mov	r1, r7
   15388:	4640      	mov	r0, r8
   1538a:	f8d7 c000 	ldr.w	ip, [r7]
   1538e:	47e0      	blx	ip
   15390:	b918      	cbnz	r0, 1539a <bt_gatt_mult_notification+0x82>
				bt_gatt_unsubscribe(conn, params);
   15392:	4639      	mov	r1, r7
   15394:	4640      	mov	r0, r8
   15396:	f7ff ff27 	bl	151e8 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1539a:	b144      	cbz	r4, 153ae <bt_gatt_mult_notification+0x96>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1539c:	f114 0314 	adds.w	r3, r4, #20
   153a0:	d002      	beq.n	153a8 <bt_gatt_mult_notification+0x90>
	return node->next;
   153a2:	6963      	ldr	r3, [r4, #20]
   153a4:	b103      	cbz	r3, 153a8 <bt_gatt_mult_notification+0x90>
   153a6:	3b14      	subs	r3, #20
{
   153a8:	4627      	mov	r7, r4
   153aa:	461c      	mov	r4, r3
   153ac:	e7e6      	b.n	1537c <bt_gatt_mult_notification+0x64>
		net_buf_simple_pull_mem(&buf, len);
   153ae:	4651      	mov	r1, sl
   153b0:	a801      	add	r0, sp, #4
   153b2:	f000 fc01 	bl	15bb8 <net_buf_simple_pull_mem>
   153b6:	e7be      	b.n	15336 <bt_gatt_mult_notification+0x1e>
   153b8:	00022675 	.word	0x00022675

000153bc <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
   153bc:	2301      	movs	r3, #1
{
   153be:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   153c0:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   153c4:	b08e      	sub	sp, #56	; 0x38
   153c6:	4605      	mov	r5, r0
	data.conn = conn;
   153c8:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   153ca:	4631      	mov	r1, r6
   153cc:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   153ce:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   153d2:	f006 ff7a 	bl	1c2ca <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   153d6:	b190      	cbz	r0, 153fe <bt_gatt_connected+0x42>
		if (conn->id) {
   153d8:	7a2a      	ldrb	r2, [r5, #8]
   153da:	b30a      	cbz	r2, 15420 <bt_gatt_connected+0x64>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   153dc:	ac02      	add	r4, sp, #8
   153de:	2104      	movs	r1, #4
   153e0:	4620      	mov	r0, r4
   153e2:	f005 facd 	bl	1a980 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   153e6:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   153e8:	2124      	movs	r1, #36	; 0x24
   153ea:	4a19      	ldr	r2, [pc, #100]	; (15450 <bt_gatt_connected+0x94>)
   153ec:	a805      	add	r0, sp, #20
   153ee:	4633      	mov	r3, r6
   153f0:	f7f9 fa46 	bl	e880 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   153f4:	aa05      	add	r2, sp, #20
   153f6:	4610      	mov	r0, r2
   153f8:	4916      	ldr	r1, [pc, #88]	; (15454 <bt_gatt_connected+0x98>)
   153fa:	f7f6 fc5d 	bl	bcb8 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   153fe:	2001      	movs	r0, #1
   15400:	f64f 71ff 	movw	r1, #65535	; 0xffff
   15404:	4a14      	ldr	r2, [pc, #80]	; (15458 <bt_gatt_connected+0x9c>)
   15406:	ab03      	add	r3, sp, #12
   15408:	f007 ff8d 	bl	1d326 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1540c:	4628      	mov	r0, r5
   1540e:	f7fe f879 	bl	13504 <gatt_sub_find>
	if (!sub) {
   15412:	b118      	cbz	r0, 1541c <bt_gatt_connected+0x60>
	return list->head;
   15414:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   15416:	b10c      	cbz	r4, 1541c <bt_gatt_connected+0x60>
   15418:	3c14      	subs	r4, #20
   1541a:	b91c      	cbnz	r4, 15424 <bt_gatt_connected+0x68>
}
   1541c:	b00e      	add	sp, #56	; 0x38
   1541e:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   15420:	9200      	str	r2, [sp, #0]
   15422:	e7e1      	b.n	153e8 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   15424:	4631      	mov	r1, r6
   15426:	7a28      	ldrb	r0, [r5, #8]
   15428:	f006 ff4f 	bl	1c2ca <bt_addr_le_is_bonded>
   1542c:	b158      	cbz	r0, 15446 <bt_gatt_connected+0x8a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1542e:	f104 0010 	add.w	r0, r4, #16
   15432:	f007 fd96 	bl	1cf62 <atomic_get>
   15436:	0783      	lsls	r3, r0, #30
   15438:	d405      	bmi.n	15446 <bt_gatt_connected+0x8a>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
   1543a:	4623      	mov	r3, r4
   1543c:	4628      	mov	r0, r5
   1543e:	89a2      	ldrh	r2, [r4, #12]
   15440:	8961      	ldrh	r1, [r4, #10]
   15442:	f7fe fcbd 	bl	13dc0 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15446:	f114 0f14 	cmn.w	r4, #20
   1544a:	d0e7      	beq.n	1541c <bt_gatt_connected+0x60>
	return node->next;
   1544c:	6964      	ldr	r4, [r4, #20]
   1544e:	e7e2      	b.n	15416 <bt_gatt_connected+0x5a>
   15450:	000225a7 	.word	0x000225a7
   15454:	000141b9 	.word	0x000141b9
   15458:	00014589 	.word	0x00014589

0001545c <db_hash_read>:
{
   1545c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1545e:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   15460:	4810      	ldr	r0, [pc, #64]	; (154a4 <db_hash_read+0x48>)
{
   15462:	4615      	mov	r5, r2
   15464:	461f      	mov	r7, r3
   15466:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
   1546a:	f004 fc1d 	bl	19ca8 <k_delayed_work_cancel>
	if (!err) {
   1546e:	b910      	cbnz	r0, 15476 <db_hash_read+0x1a>
		db_hash_gen(true);
   15470:	2001      	movs	r0, #1
   15472:	f7fe fe11 	bl	14098 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   15476:	2101      	movs	r1, #1
   15478:	4620      	mov	r0, r4
   1547a:	f008 f81c 	bl	1d4b6 <bt_gatt_change_aware>
	if (offset > value_len) {
   1547e:	2e10      	cmp	r6, #16
   15480:	d80c      	bhi.n	1549c <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
   15482:	f1c6 0410 	rsb	r4, r6, #16
   15486:	42bc      	cmp	r4, r7
   15488:	bfa8      	it	ge
   1548a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1548c:	4906      	ldr	r1, [pc, #24]	; (154a8 <db_hash_read+0x4c>)
   1548e:	4622      	mov	r2, r4
   15490:	4628      	mov	r0, r5
   15492:	4431      	add	r1, r6
   15494:	f006 fd52 	bl	1bf3c <memcpy>
}
   15498:	4620      	mov	r0, r4
   1549a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1549c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   154a0:	e7fa      	b.n	15498 <db_hash_read+0x3c>
   154a2:	bf00      	nop
   154a4:	20009be8 	.word	0x20009be8
   154a8:	2000f9b4 	.word	0x2000f9b4

000154ac <bt_gatt_store_ccc>:
	save.count = 0;
   154ac:	2300      	movs	r3, #0
{
   154ae:	b570      	push	{r4, r5, r6, lr}
   154b0:	4604      	mov	r4, r0
   154b2:	b0c0      	sub	sp, #256	; 0x100
   154b4:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   154b6:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   154b8:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   154bc:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   154be:	f64f 71ff 	movw	r1, #65535	; 0xffff
   154c2:	2001      	movs	r0, #1
   154c4:	4a13      	ldr	r2, [pc, #76]	; (15514 <bt_gatt_store_ccc+0x68>)
   154c6:	ab0d      	add	r3, sp, #52	; 0x34
   154c8:	f007 ff2d 	bl	1d326 <bt_gatt_foreach_attr>
	if (id) {
   154cc:	b1ec      	cbz	r4, 1550a <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   154ce:	ae03      	add	r6, sp, #12
   154d0:	4622      	mov	r2, r4
   154d2:	2104      	movs	r1, #4
   154d4:	4630      	mov	r0, r6
   154d6:	f005 fa53 	bl	1a980 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   154da:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   154dc:	4a0e      	ldr	r2, [pc, #56]	; (15518 <bt_gatt_store_ccc+0x6c>)
   154de:	462b      	mov	r3, r5
   154e0:	2124      	movs	r1, #36	; 0x24
   154e2:	a804      	add	r0, sp, #16
   154e4:	f7f9 f9cc 	bl	e880 <bt_settings_encode_key>
	if (save.count) {
   154e8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   154ea:	b182      	cbz	r2, 1550e <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   154ec:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   154ee:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   154f0:	a804      	add	r0, sp, #16
   154f2:	f7f6 fb95 	bl	bc20 <settings_save_one>
	if (err) {
   154f6:	4604      	mov	r4, r0
   154f8:	b120      	cbz	r0, 15504 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   154fa:	4602      	mov	r2, r0
   154fc:	2145      	movs	r1, #69	; 0x45
   154fe:	4807      	ldr	r0, [pc, #28]	; (1551c <bt_gatt_store_ccc+0x70>)
   15500:	f005 fad8 	bl	1aab4 <printk>
}
   15504:	4620      	mov	r0, r4
   15506:	b040      	add	sp, #256	; 0x100
   15508:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1550a:	9400      	str	r4, [sp, #0]
   1550c:	e7e6      	b.n	154dc <bt_gatt_store_ccc+0x30>
		str = NULL;
   1550e:	4611      	mov	r1, r2
   15510:	e7ee      	b.n	154f0 <bt_gatt_store_ccc+0x44>
   15512:	bf00      	nop
   15514:	00013a49 	.word	0x00013a49
   15518:	000225a7 	.word	0x000225a7
   1551c:	00022693 	.word	0x00022693

00015520 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   15520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15524:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   15526:	4603      	mov	r3, r0
   15528:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1552c:	2001      	movs	r0, #1
{
   1552e:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   15530:	4a52      	ldr	r2, [pc, #328]	; (1567c <bt_gatt_disconnected+0x15c>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15532:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   15536:	f007 fef6 	bl	1d326 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1553a:	4629      	mov	r1, r5
   1553c:	7a20      	ldrb	r0, [r4, #8]
   1553e:	f006 fec4 	bl	1c2ca <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   15542:	b378      	cbz	r0, 155a4 <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   15544:	4629      	mov	r1, r5
   15546:	7a20      	ldrb	r0, [r4, #8]
   15548:	f7ff ffb0 	bl	154ac <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1554c:	4620      	mov	r0, r4
   1554e:	f7fd ff9b 	bl	13488 <find_cf_cfg>
	if (!cfg) {
   15552:	4606      	mov	r6, r0
   15554:	2800      	cmp	r0, #0
   15556:	d05e      	beq.n	15616 <bt_gatt_disconnected+0xf6>
		if (conn->id) {
   15558:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1555a:	3608      	adds	r6, #8
		if (conn->id) {
   1555c:	2a00      	cmp	r2, #0
   1555e:	d05c      	beq.n	1561a <bt_gatt_disconnected+0xfa>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   15560:	af02      	add	r7, sp, #8
   15562:	2104      	movs	r1, #4
   15564:	4638      	mov	r0, r7
   15566:	f005 fa0b 	bl	1a980 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1556a:	462b      	mov	r3, r5
   1556c:	9700      	str	r7, [sp, #0]
   1556e:	2124      	movs	r1, #36	; 0x24
   15570:	4a43      	ldr	r2, [pc, #268]	; (15680 <bt_gatt_disconnected+0x160>)
   15572:	a803      	add	r0, sp, #12
   15574:	f7f9 f984 	bl	e880 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   15578:	7a23      	ldrb	r3, [r4, #8]
   1557a:	2701      	movs	r7, #1
   1557c:	b93b      	cbnz	r3, 1558e <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   1557e:	2300      	movs	r3, #0
   15580:	2124      	movs	r1, #36	; 0x24
   15582:	9300      	str	r3, [sp, #0]
   15584:	4a3e      	ldr	r2, [pc, #248]	; (15680 <bt_gatt_disconnected+0x160>)
   15586:	462b      	mov	r3, r5
   15588:	a803      	add	r0, sp, #12
   1558a:	f7f9 f979 	bl	e880 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1558e:	463a      	mov	r2, r7
   15590:	4631      	mov	r1, r6
   15592:	a803      	add	r0, sp, #12
   15594:	f7f6 fb44 	bl	bc20 <settings_save_one>
	if (err) {
   15598:	4602      	mov	r2, r0
   1559a:	b118      	cbz	r0, 155a4 <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
   1559c:	2145      	movs	r1, #69	; 0x45
   1559e:	4839      	ldr	r0, [pc, #228]	; (15684 <bt_gatt_disconnected+0x164>)
   155a0:	f005 fa88 	bl	1aab4 <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   155a4:	4629      	mov	r1, r5
   155a6:	7a20      	ldrb	r0, [r4, #8]
   155a8:	f006 fe8f 	bl	1c2ca <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   155ac:	b150      	cbz	r0, 155c4 <bt_gatt_disconnected+0xa4>
		struct addr_with_id addr_with_id = {
   155ae:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   155b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   155b4:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   155b8:	2001      	movs	r0, #1
   155ba:	4a33      	ldr	r2, [pc, #204]	; (15688 <bt_gatt_disconnected+0x168>)
   155bc:	ab03      	add	r3, sp, #12
		struct addr_with_id addr_with_id = {
   155be:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   155c0:	f007 feb1 	bl	1d326 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   155c4:	4620      	mov	r0, r4
   155c6:	f7fd ff9d 	bl	13504 <gatt_sub_find>
	if (!sub) {
   155ca:	4607      	mov	r7, r0
   155cc:	b3b0      	cbz	r0, 1563c <bt_gatt_disconnected+0x11c>
	return list->head;
   155ce:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   155d0:	b3a3      	cbz	r3, 1563c <bt_gatt_disconnected+0x11c>
   155d2:	f1b3 0b14 	subs.w	fp, r3, #20
   155d6:	d031      	beq.n	1563c <bt_gatt_disconnected+0x11c>
	return node->next;
   155d8:	681e      	ldr	r6, [r3, #0]
   155da:	b106      	cbz	r6, 155de <bt_gatt_disconnected+0xbe>
   155dc:	3e14      	subs	r6, #20
   155de:	f04f 0800 	mov.w	r8, #0
			params->value = 0U;
   155e2:	46c2      	mov	sl, r8
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   155e4:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   155e8:	4629      	mov	r1, r5
   155ea:	7a20      	ldrb	r0, [r4, #8]
   155ec:	f006 fe6d 	bl	1c2ca <bt_addr_le_is_bonded>
   155f0:	b9a8      	cbnz	r0, 1561e <bt_gatt_disconnected+0xfe>
			gatt_sub_remove(conn, sub, prev, params);
   155f2:	465b      	mov	r3, fp
   155f4:	4642      	mov	r2, r8
   155f6:	4639      	mov	r1, r7
   155f8:	4620      	mov	r0, r4
			params->value = 0U;
   155fa:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   155fe:	f007 fcf3 	bl	1cfe8 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   15602:	b1de      	cbz	r6, 1563c <bt_gatt_disconnected+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   15604:	f116 0214 	adds.w	r2, r6, #20
   15608:	d002      	beq.n	15610 <bt_gatt_disconnected+0xf0>
	return node->next;
   1560a:	6972      	ldr	r2, [r6, #20]
   1560c:	b102      	cbz	r2, 15610 <bt_gatt_disconnected+0xf0>
   1560e:	3a14      	subs	r2, #20
   15610:	46b3      	mov	fp, r6
   15612:	4616      	mov	r6, r2
   15614:	e7e8      	b.n	155e8 <bt_gatt_disconnected+0xc8>
		len = 0;
   15616:	4607      	mov	r7, r0
   15618:	e7b1      	b.n	1557e <bt_gatt_disconnected+0x5e>
   1561a:	2701      	movs	r7, #1
   1561c:	e7af      	b.n	1557e <bt_gatt_disconnected+0x5e>
   1561e:	f10b 0010 	add.w	r0, fp, #16
   15622:	f007 fc9e 	bl	1cf62 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   15626:	07c3      	lsls	r3, r0, #31
   15628:	d4e3      	bmi.n	155f2 <bt_gatt_disconnected+0xd2>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   1562a:	787b      	ldrb	r3, [r7, #1]
   1562c:	b11b      	cbz	r3, 15636 <bt_gatt_disconnected+0x116>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1562e:	4629      	mov	r1, r5
   15630:	4648      	mov	r0, r9
   15632:	f007 fc7a 	bl	1cf2a <bt_addr_le_copy>
			prev = &params->node;
   15636:	f10b 0814 	add.w	r8, fp, #20
   1563a:	e7e2      	b.n	15602 <bt_gatt_disconnected+0xe2>
	cfg = find_cf_cfg(conn);
   1563c:	4620      	mov	r0, r4
   1563e:	f7fd ff23 	bl	13488 <find_cf_cfg>
	if (!cfg) {
   15642:	4606      	mov	r6, r0
   15644:	b1b8      	cbz	r0, 15676 <bt_gatt_disconnected+0x156>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   15646:	4629      	mov	r1, r5
   15648:	7a20      	ldrb	r0, [r4, #8]
   1564a:	f006 fe3e 	bl	1c2ca <bt_addr_le_is_bonded>
   1564e:	b928      	cbnz	r0, 1565c <bt_gatt_disconnected+0x13c>
		clear_cf_cfg(cfg);
   15650:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   15652:	b00d      	add	sp, #52	; 0x34
   15654:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   15658:	f007 bcad 	b.w	1cfb6 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1565c:	1c70      	adds	r0, r6, #1
   1565e:	4629      	mov	r1, r5
   15660:	f007 fc63 	bl	1cf2a <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15664:	360c      	adds	r6, #12
   15666:	e8d6 3fef 	ldaex	r3, [r6]
   1566a:	f023 0302 	bic.w	r3, r3, #2
   1566e:	e8c6 3fe2 	stlex	r2, r3, [r6]
   15672:	2a00      	cmp	r2, #0
   15674:	d1f7      	bne.n	15666 <bt_gatt_disconnected+0x146>
}
   15676:	b00d      	add	sp, #52	; 0x34
   15678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1567c:	00013ce1 	.word	0x00013ce1
   15680:	000226e7 	.word	0x000226e7
   15684:	000226b6 	.word	0x000226b6
   15688:	00013995 	.word	0x00013995

0001568c <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1568c:	b570      	push	{r4, r5, r6, lr}
   1568e:	4602      	mov	r2, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   15690:	2400      	movs	r4, #0
   15692:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   15694:	4b09      	ldr	r3, [pc, #36]	; (156bc <bt_smp_accept+0x30>)
   15696:	fb06 f504 	mul.w	r5, r6, r4
   1569a:	58e8      	ldr	r0, [r5, r3]
   1569c:	b148      	cbz	r0, 156b2 <bt_smp_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1569e:	3401      	adds	r4, #1
   156a0:	2c0a      	cmp	r4, #10
   156a2:	d1f8      	bne.n	15696 <bt_smp_accept+0xa>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   156a4:	4806      	ldr	r0, [pc, #24]	; (156c0 <bt_smp_accept+0x34>)
   156a6:	2145      	movs	r1, #69	; 0x45
   156a8:	f005 fa04 	bl	1aab4 <printk>
   156ac:	f06f 000b 	mvn.w	r0, #11
   156b0:	e003      	b.n	156ba <bt_smp_accept+0x2e>
		smp->chan.ops = &ops;
   156b2:	4a04      	ldr	r2, [pc, #16]	; (156c4 <bt_smp_accept+0x38>)
   156b4:	442b      	add	r3, r5
   156b6:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   156b8:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   156ba:	bd70      	pop	{r4, r5, r6, pc}
   156bc:	20009c70 	.word	0x20009c70
   156c0:	000226f8 	.word	0x000226f8
   156c4:	0001f14c 	.word	0x0001f14c

000156c8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   156c8:	222c      	movs	r2, #44	; 0x2c
   156ca:	4b02      	ldr	r3, [pc, #8]	; (156d4 <net_buf_pool_get+0xc>)
   156cc:	fb02 3000 	mla	r0, r2, r0, r3
   156d0:	4770      	bx	lr
   156d2:	bf00      	nop
   156d4:	200086a4 	.word	0x200086a4

000156d8 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   156d8:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   156da:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   156dc:	4b04      	ldr	r3, [pc, #16]	; (156f0 <net_buf_id+0x18>)
   156de:	fb01 3302 	mla	r3, r1, r2, r3
   156e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   156e4:	1ac0      	subs	r0, r0, r3
}
   156e6:	4b03      	ldr	r3, [pc, #12]	; (156f4 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   156e8:	10c0      	asrs	r0, r0, #3
}
   156ea:	4358      	muls	r0, r3
   156ec:	4770      	bx	lr
   156ee:	bf00      	nop
   156f0:	200086a4 	.word	0x200086a4
   156f4:	aaaaaaab 	.word	0xaaaaaaab

000156f8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   156f8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   156fa:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   156fc:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   156fe:	4b09      	ldr	r3, [pc, #36]	; (15724 <fixed_data_alloc+0x2c>)
   15700:	fb04 3302 	mla	r3, r4, r2, r3
   15704:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   15706:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   15708:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1570a:	6823      	ldr	r3, [r4, #0]
   1570c:	429a      	cmp	r2, r3
   1570e:	bf94      	ite	ls
   15710:	600a      	strls	r2, [r1, #0]
   15712:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   15714:	f7ff ffe0 	bl	156d8 <net_buf_id>
   15718:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1571c:	fb02 3000 	mla	r0, r2, r0, r3
   15720:	bd10      	pop	{r4, pc}
   15722:	bf00      	nop
   15724:	200086a4 	.word	0x200086a4

00015728 <net_buf_reset>:
{
   15728:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1572a:	7943      	ldrb	r3, [r0, #5]
{
   1572c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1572e:	b143      	cbz	r3, 15742 <net_buf_reset+0x1a>
   15730:	490c      	ldr	r1, [pc, #48]	; (15764 <net_buf_reset+0x3c>)
   15732:	480d      	ldr	r0, [pc, #52]	; (15768 <net_buf_reset+0x40>)
   15734:	224f      	movs	r2, #79	; 0x4f
   15736:	f005 f9bd 	bl	1aab4 <printk>
   1573a:	214f      	movs	r1, #79	; 0x4f
   1573c:	4809      	ldr	r0, [pc, #36]	; (15764 <net_buf_reset+0x3c>)
   1573e:	f005 fc5f 	bl	1b000 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   15742:	6823      	ldr	r3, [r4, #0]
   15744:	b143      	cbz	r3, 15758 <net_buf_reset+0x30>
   15746:	4907      	ldr	r1, [pc, #28]	; (15764 <net_buf_reset+0x3c>)
   15748:	4807      	ldr	r0, [pc, #28]	; (15768 <net_buf_reset+0x40>)
   1574a:	2250      	movs	r2, #80	; 0x50
   1574c:	f005 f9b2 	bl	1aab4 <printk>
   15750:	2150      	movs	r1, #80	; 0x50
   15752:	4804      	ldr	r0, [pc, #16]	; (15764 <net_buf_reset+0x3c>)
   15754:	f005 fc54 	bl	1b000 <assert_post_action>
	buf->len  = 0U;
   15758:	2300      	movs	r3, #0
   1575a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1575c:	6923      	ldr	r3, [r4, #16]
   1575e:	60a3      	str	r3, [r4, #8]
}
   15760:	bd10      	pop	{r4, pc}
   15762:	bf00      	nop
   15764:	00022729 	.word	0x00022729
   15768:	0002003d 	.word	0x0002003d

0001576c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1576c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15770:	4605      	mov	r5, r0
   15772:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   15774:	4610      	mov	r0, r2
   15776:	4619      	mov	r1, r3
{
   15778:	4691      	mov	r9, r2
   1577a:	4698      	mov	r8, r3
   1577c:	4617      	mov	r7, r2
   1577e:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   15780:	f008 fe2b 	bl	1e3da <z_timeout_end_calc>
   15784:	4682      	mov	sl, r0
   15786:	468b      	mov	fp, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   15788:	b945      	cbnz	r5, 1579c <net_buf_alloc_len+0x30>
   1578a:	494a      	ldr	r1, [pc, #296]	; (158b4 <net_buf_alloc_len+0x148>)
   1578c:	484a      	ldr	r0, [pc, #296]	; (158b8 <net_buf_alloc_len+0x14c>)
   1578e:	22ed      	movs	r2, #237	; 0xed
   15790:	f005 f990 	bl	1aab4 <printk>
   15794:	21ed      	movs	r1, #237	; 0xed
   15796:	4847      	ldr	r0, [pc, #284]	; (158b4 <net_buf_alloc_len+0x148>)
   15798:	f005 fc32 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   1579c:	f04f 0320 	mov.w	r3, #32
   157a0:	f3ef 8111 	mrs	r1, BASEPRI
   157a4:	f383 8811 	msr	BASEPRI, r3
   157a8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   157ac:	8beb      	ldrh	r3, [r5, #30]
   157ae:	2b00      	cmp	r3, #0
   157b0:	d055      	beq.n	1585e <net_buf_alloc_len+0xf2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   157b2:	8baa      	ldrh	r2, [r5, #28]
   157b4:	429a      	cmp	r2, r3
   157b6:	d93e      	bls.n	15836 <net_buf_alloc_len+0xca>
   157b8:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   157ba:	2200      	movs	r2, #0
   157bc:	2300      	movs	r3, #0
   157be:	4628      	mov	r0, r5
   157c0:	f002 ff34 	bl	1862c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   157c4:	9900      	ldr	r1, [sp, #0]
   157c6:	4604      	mov	r4, r0
   157c8:	2800      	cmp	r0, #0
   157ca:	d034      	beq.n	15836 <net_buf_alloc_len+0xca>
	__asm__ volatile(
   157cc:	f381 8811 	msr	BASEPRI, r1
   157d0:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   157d4:	9d01      	ldr	r5, [sp, #4]
   157d6:	2d00      	cmp	r5, #0
   157d8:	d069      	beq.n	158ae <net_buf_alloc_len+0x142>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   157da:	ea58 0309 	orrs.w	r3, r8, r9
   157de:	d00f      	beq.n	15800 <net_buf_alloc_len+0x94>
   157e0:	f1b8 3fff 	cmp.w	r8, #4294967295
   157e4:	bf08      	it	eq
   157e6:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   157ea:	d009      	beq.n	15800 <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   157ec:	f004 fd08 	bl	1a200 <z_tick_get>
   157f0:	ebba 0700 	subs.w	r7, sl, r0
   157f4:	eb6b 0601 	sbc.w	r6, fp, r1
   157f8:	2e00      	cmp	r6, #0
   157fa:	bfbc      	itt	lt
   157fc:	2700      	movlt	r7, #0
   157fe:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   15800:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15804:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   15806:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 158bc <net_buf_alloc_len+0x150>
   1580a:	463a      	mov	r2, r7
   1580c:	fb09 8303 	mla	r3, r9, r3, r8
   15810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15812:	4620      	mov	r0, r4
   15814:	681b      	ldr	r3, [r3, #0]
   15816:	a901      	add	r1, sp, #4
   15818:	f8d3 a000 	ldr.w	sl, [r3]
   1581c:	4633      	mov	r3, r6
   1581e:	47d0      	blx	sl
   15820:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   15822:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   15824:	bb58      	cbnz	r0, 1587e <net_buf_alloc_len+0x112>
	k_lifo_put(&pool->free, buf);
   15826:	79a0      	ldrb	r0, [r4, #6]
   15828:	4621      	mov	r1, r4
   1582a:	fb00 8009 	mla	r0, r0, r9, r8
   1582e:	f008 fd09 	bl	1e244 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   15832:	4634      	mov	r4, r6
}
   15834:	e01f      	b.n	15876 <net_buf_alloc_len+0x10a>
		uninit_count = pool->uninit_count--;
   15836:	8beb      	ldrh	r3, [r5, #30]
   15838:	1e5a      	subs	r2, r3, #1
   1583a:	83ea      	strh	r2, [r5, #30]
   1583c:	f381 8811 	msr	BASEPRI, r1
   15840:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   15844:	2018      	movs	r0, #24
   15846:	8bac      	ldrh	r4, [r5, #28]
   15848:	1ae3      	subs	r3, r4, r3
   1584a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1584c:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   15850:	481a      	ldr	r0, [pc, #104]	; (158bc <net_buf_alloc_len+0x150>)
   15852:	4b1b      	ldr	r3, [pc, #108]	; (158c0 <net_buf_alloc_len+0x154>)
   15854:	1a2d      	subs	r5, r5, r0
   15856:	10ad      	asrs	r5, r5, #2
   15858:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1585a:	71a5      	strb	r5, [r4, #6]
		goto success;
   1585c:	e7ba      	b.n	157d4 <net_buf_alloc_len+0x68>
   1585e:	f381 8811 	msr	BASEPRI, r1
   15862:	f3bf 8f6f 	isb	sy
   15866:	464a      	mov	r2, r9
   15868:	4643      	mov	r3, r8
   1586a:	4628      	mov	r0, r5
   1586c:	f002 fede 	bl	1862c <z_impl_k_queue_get>
	if (!buf) {
   15870:	4604      	mov	r4, r0
   15872:	2800      	cmp	r0, #0
   15874:	d1ae      	bne.n	157d4 <net_buf_alloc_len+0x68>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   15876:	4620      	mov	r0, r4
   15878:	b003      	add	sp, #12
   1587a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1587e:	9b01      	ldr	r3, [sp, #4]
   15880:	429d      	cmp	r5, r3
   15882:	d90a      	bls.n	1589a <net_buf_alloc_len+0x12e>
   15884:	490b      	ldr	r1, [pc, #44]	; (158b4 <net_buf_alloc_len+0x148>)
   15886:	480c      	ldr	r0, [pc, #48]	; (158b8 <net_buf_alloc_len+0x14c>)
   15888:	f240 124d 	movw	r2, #333	; 0x14d
   1588c:	f005 f912 	bl	1aab4 <printk>
   15890:	f240 114d 	movw	r1, #333	; 0x14d
   15894:	4807      	ldr	r0, [pc, #28]	; (158b4 <net_buf_alloc_len+0x148>)
   15896:	f005 fbb3 	bl	1b000 <assert_post_action>
	buf->frags = NULL;
   1589a:	2300      	movs	r3, #0
   1589c:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1589e:	2301      	movs	r3, #1
   158a0:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   158a2:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   158a4:	4620      	mov	r0, r4
	buf->size  = size;
   158a6:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   158a8:	f7ff ff3e 	bl	15728 <net_buf_reset>
	return buf;
   158ac:	e7e3      	b.n	15876 <net_buf_alloc_len+0x10a>
		buf->__buf = NULL;
   158ae:	6125      	str	r5, [r4, #16]
   158b0:	e7f3      	b.n	1589a <net_buf_alloc_len+0x12e>
   158b2:	bf00      	nop
   158b4:	00022729 	.word	0x00022729
   158b8:	0002003d 	.word	0x0002003d
   158bc:	200086a4 	.word	0x200086a4
   158c0:	ba2e8ba3 	.word	0xba2e8ba3

000158c4 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   158c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   158c8:	4606      	mov	r6, r0
   158ca:	f002 feaf 	bl	1862c <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   158ce:	4605      	mov	r5, r0
   158d0:	b140      	cbz	r0, 158e4 <net_buf_get+0x20>
   158d2:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   158d4:	4f11      	ldr	r7, [pc, #68]	; (1591c <net_buf_get+0x58>)
   158d6:	f8df 8048 	ldr.w	r8, [pc, #72]	; 15920 <net_buf_get+0x5c>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   158da:	7963      	ldrb	r3, [r4, #5]
   158dc:	f013 0301 	ands.w	r3, r3, #1
   158e0:	d103      	bne.n	158ea <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   158e2:	6023      	str	r3, [r4, #0]

	return buf;
}
   158e4:	4628      	mov	r0, r5
   158e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   158ea:	2200      	movs	r2, #0
   158ec:	2300      	movs	r3, #0
   158ee:	4630      	mov	r0, r6
   158f0:	f002 fe9c 	bl	1862c <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   158f4:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   158f6:	b950      	cbnz	r0, 1590e <net_buf_get+0x4a>
   158f8:	4639      	mov	r1, r7
   158fa:	4640      	mov	r0, r8
   158fc:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   15900:	f005 f8d8 	bl	1aab4 <printk>
   15904:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   15908:	4638      	mov	r0, r7
   1590a:	f005 fb79 	bl	1b000 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1590e:	7963      	ldrb	r3, [r4, #5]
   15910:	f023 0301 	bic.w	r3, r3, #1
   15914:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   15916:	6824      	ldr	r4, [r4, #0]
   15918:	e7df      	b.n	158da <net_buf_get+0x16>
   1591a:	bf00      	nop
   1591c:	00022729 	.word	0x00022729
   15920:	0002003d 	.word	0x0002003d

00015924 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   15924:	b538      	push	{r3, r4, r5, lr}
   15926:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   15928:	4604      	mov	r4, r0
   1592a:	b950      	cbnz	r0, 15942 <net_buf_simple_reserve+0x1e>
   1592c:	490d      	ldr	r1, [pc, #52]	; (15964 <net_buf_simple_reserve+0x40>)
   1592e:	480e      	ldr	r0, [pc, #56]	; (15968 <net_buf_simple_reserve+0x44>)
   15930:	f240 12bb 	movw	r2, #443	; 0x1bb
   15934:	f005 f8be 	bl	1aab4 <printk>
   15938:	f240 11bb 	movw	r1, #443	; 0x1bb
   1593c:	4809      	ldr	r0, [pc, #36]	; (15964 <net_buf_simple_reserve+0x40>)
   1593e:	f005 fb5f 	bl	1b000 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   15942:	88a3      	ldrh	r3, [r4, #4]
   15944:	b153      	cbz	r3, 1595c <net_buf_simple_reserve+0x38>
   15946:	4907      	ldr	r1, [pc, #28]	; (15964 <net_buf_simple_reserve+0x40>)
   15948:	4807      	ldr	r0, [pc, #28]	; (15968 <net_buf_simple_reserve+0x44>)
   1594a:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   1594e:	f005 f8b1 	bl	1aab4 <printk>
   15952:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   15956:	4803      	ldr	r0, [pc, #12]	; (15964 <net_buf_simple_reserve+0x40>)
   15958:	f005 fb52 	bl	1b000 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1595c:	68a3      	ldr	r3, [r4, #8]
   1595e:	442b      	add	r3, r5
   15960:	6023      	str	r3, [r4, #0]
}
   15962:	bd38      	pop	{r3, r4, r5, pc}
   15964:	00022729 	.word	0x00022729
   15968:	0002003d 	.word	0x0002003d

0001596c <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1596c:	b538      	push	{r3, r4, r5, lr}
   1596e:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   15970:	4605      	mov	r5, r0
   15972:	b950      	cbnz	r0, 1598a <net_buf_put+0x1e>
   15974:	4912      	ldr	r1, [pc, #72]	; (159c0 <net_buf_put+0x54>)
   15976:	4813      	ldr	r0, [pc, #76]	; (159c4 <net_buf_put+0x58>)
   15978:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1597c:	f005 f89a 	bl	1aab4 <printk>
   15980:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   15984:	480e      	ldr	r0, [pc, #56]	; (159c0 <net_buf_put+0x54>)
   15986:	f005 fb3b 	bl	1b000 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1598a:	b954      	cbnz	r4, 159a2 <net_buf_put+0x36>
   1598c:	490c      	ldr	r1, [pc, #48]	; (159c0 <net_buf_put+0x54>)
   1598e:	480d      	ldr	r0, [pc, #52]	; (159c4 <net_buf_put+0x58>)
   15990:	f240 12f9 	movw	r2, #505	; 0x1f9
   15994:	f005 f88e 	bl	1aab4 <printk>
   15998:	f240 11f9 	movw	r1, #505	; 0x1f9
   1599c:	4808      	ldr	r0, [pc, #32]	; (159c0 <net_buf_put+0x54>)
   1599e:	f005 fb2f 	bl	1b000 <assert_post_action>
{
   159a2:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   159a4:	6811      	ldr	r1, [r2, #0]
   159a6:	b929      	cbnz	r1, 159b4 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   159a8:	4621      	mov	r1, r4
   159aa:	4628      	mov	r0, r5
}
   159ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   159b0:	f002 bde8 	b.w	18584 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   159b4:	7953      	ldrb	r3, [r2, #5]
   159b6:	f043 0301 	orr.w	r3, r3, #1
   159ba:	7153      	strb	r3, [r2, #5]
   159bc:	460a      	mov	r2, r1
   159be:	e7f1      	b.n	159a4 <net_buf_put+0x38>
   159c0:	00022729 	.word	0x00022729
   159c4:	0002003d 	.word	0x0002003d

000159c8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   159c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   159cc:	4605      	mov	r5, r0
   159ce:	b328      	cbz	r0, 15a1c <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   159d0:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   159d2:	f04f 082c 	mov.w	r8, #44	; 0x2c
   159d6:	4e1b      	ldr	r6, [pc, #108]	; (15a44 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   159d8:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   159da:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   159dc:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   159de:	3b01      	subs	r3, #1
   159e0:	b2db      	uxtb	r3, r3
   159e2:	7123      	strb	r3, [r4, #4]
   159e4:	b9c3      	cbnz	r3, 15a18 <net_buf_unref+0x50>
		if (buf->__buf) {
   159e6:	6921      	ldr	r1, [r4, #16]
   159e8:	b159      	cbz	r1, 15a02 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   159ea:	7963      	ldrb	r3, [r4, #5]
   159ec:	079b      	lsls	r3, r3, #30
   159ee:	d407      	bmi.n	15a00 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   159f0:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   159f2:	4620      	mov	r0, r4
   159f4:	fb08 6303 	mla	r3, r8, r3, r6
   159f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   159fa:	681b      	ldr	r3, [r3, #0]
   159fc:	689b      	ldr	r3, [r3, #8]
   159fe:	4798      	blx	r3
			buf->__buf = NULL;
   15a00:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   15a02:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   15a04:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   15a06:	fb08 6300 	mla	r3, r8, r0, r6
   15a0a:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   15a0c:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   15a0e:	b193      	cbz	r3, 15a36 <net_buf_unref+0x6e>
			pool->destroy(buf);
   15a10:	4620      	mov	r0, r4
   15a12:	4798      	blx	r3
	while (buf) {
   15a14:	2d00      	cmp	r5, #0
   15a16:	d1df      	bne.n	159d8 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   15a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   15a1c:	490a      	ldr	r1, [pc, #40]	; (15a48 <net_buf_unref+0x80>)
   15a1e:	480b      	ldr	r0, [pc, #44]	; (15a4c <net_buf_unref+0x84>)
   15a20:	f44f 7202 	mov.w	r2, #520	; 0x208
   15a24:	f005 f846 	bl	1aab4 <printk>
}
   15a28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   15a2c:	f44f 7102 	mov.w	r1, #520	; 0x208
   15a30:	4805      	ldr	r0, [pc, #20]	; (15a48 <net_buf_unref+0x80>)
   15a32:	f005 bae5 	b.w	1b000 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   15a36:	4621      	mov	r1, r4
   15a38:	fb00 6008 	mla	r0, r0, r8, r6
   15a3c:	f008 fc02 	bl	1e244 <k_queue_prepend>
}
   15a40:	e7e8      	b.n	15a14 <net_buf_unref+0x4c>
   15a42:	bf00      	nop
   15a44:	200086a4 	.word	0x200086a4
   15a48:	00022729 	.word	0x00022729
   15a4c:	0002003d 	.word	0x0002003d

00015a50 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   15a50:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   15a52:	4604      	mov	r4, r0
   15a54:	b950      	cbnz	r0, 15a6c <net_buf_ref+0x1c>
   15a56:	4908      	ldr	r1, [pc, #32]	; (15a78 <net_buf_ref+0x28>)
   15a58:	4808      	ldr	r0, [pc, #32]	; (15a7c <net_buf_ref+0x2c>)
   15a5a:	f240 2237 	movw	r2, #567	; 0x237
   15a5e:	f005 f829 	bl	1aab4 <printk>
   15a62:	f240 2137 	movw	r1, #567	; 0x237
   15a66:	4804      	ldr	r0, [pc, #16]	; (15a78 <net_buf_ref+0x28>)
   15a68:	f005 faca 	bl	1b000 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   15a6c:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   15a6e:	4620      	mov	r0, r4
	buf->ref++;
   15a70:	3301      	adds	r3, #1
   15a72:	7123      	strb	r3, [r4, #4]
}
   15a74:	bd10      	pop	{r4, pc}
   15a76:	bf00      	nop
   15a78:	00022729 	.word	0x00022729
   15a7c:	0002003d 	.word	0x0002003d

00015a80 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   15a80:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   15a82:	4604      	mov	r4, r0
   15a84:	b950      	cbnz	r0, 15a9c <net_buf_frag_last+0x1c>
   15a86:	4908      	ldr	r1, [pc, #32]	; (15aa8 <net_buf_frag_last+0x28>)
   15a88:	4808      	ldr	r0, [pc, #32]	; (15aac <net_buf_frag_last+0x2c>)
   15a8a:	f44f 721d 	mov.w	r2, #628	; 0x274
   15a8e:	f005 f811 	bl	1aab4 <printk>
   15a92:	f44f 711d 	mov.w	r1, #628	; 0x274
   15a96:	4804      	ldr	r0, [pc, #16]	; (15aa8 <net_buf_frag_last+0x28>)
   15a98:	f005 fab2 	bl	1b000 <assert_post_action>

	while (buf->frags) {
   15a9c:	4620      	mov	r0, r4
   15a9e:	6824      	ldr	r4, [r4, #0]
   15aa0:	2c00      	cmp	r4, #0
   15aa2:	d1fb      	bne.n	15a9c <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   15aa4:	bd10      	pop	{r4, pc}
   15aa6:	bf00      	nop
   15aa8:	00022729 	.word	0x00022729
   15aac:	0002003d 	.word	0x0002003d

00015ab0 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   15ab0:	b538      	push	{r3, r4, r5, lr}
   15ab2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   15ab4:	4604      	mov	r4, r0
   15ab6:	b950      	cbnz	r0, 15ace <net_buf_frag_insert+0x1e>
   15ab8:	490f      	ldr	r1, [pc, #60]	; (15af8 <net_buf_frag_insert+0x48>)
   15aba:	4810      	ldr	r0, [pc, #64]	; (15afc <net_buf_frag_insert+0x4c>)
   15abc:	f240 227f 	movw	r2, #639	; 0x27f
   15ac0:	f004 fff8 	bl	1aab4 <printk>
   15ac4:	f240 217f 	movw	r1, #639	; 0x27f
   15ac8:	480b      	ldr	r0, [pc, #44]	; (15af8 <net_buf_frag_insert+0x48>)
   15aca:	f005 fa99 	bl	1b000 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   15ace:	b955      	cbnz	r5, 15ae6 <net_buf_frag_insert+0x36>
   15ad0:	4909      	ldr	r1, [pc, #36]	; (15af8 <net_buf_frag_insert+0x48>)
   15ad2:	480a      	ldr	r0, [pc, #40]	; (15afc <net_buf_frag_insert+0x4c>)
   15ad4:	f44f 7220 	mov.w	r2, #640	; 0x280
   15ad8:	f004 ffec 	bl	1aab4 <printk>
   15adc:	f44f 7120 	mov.w	r1, #640	; 0x280
   15ae0:	4805      	ldr	r0, [pc, #20]	; (15af8 <net_buf_frag_insert+0x48>)
   15ae2:	f005 fa8d 	bl	1b000 <assert_post_action>

	if (parent->frags) {
   15ae6:	6823      	ldr	r3, [r4, #0]
   15ae8:	b123      	cbz	r3, 15af4 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   15aea:	4628      	mov	r0, r5
   15aec:	f7ff ffc8 	bl	15a80 <net_buf_frag_last>
   15af0:	6823      	ldr	r3, [r4, #0]
   15af2:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   15af4:	6025      	str	r5, [r4, #0]
}
   15af6:	bd38      	pop	{r3, r4, r5, pc}
   15af8:	00022729 	.word	0x00022729
   15afc:	0002003d 	.word	0x0002003d

00015b00 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   15b00:	b538      	push	{r3, r4, r5, lr}
   15b02:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   15b04:	460d      	mov	r5, r1
   15b06:	b951      	cbnz	r1, 15b1e <net_buf_frag_add+0x1e>
   15b08:	490c      	ldr	r1, [pc, #48]	; (15b3c <net_buf_frag_add+0x3c>)
   15b0a:	480d      	ldr	r0, [pc, #52]	; (15b40 <net_buf_frag_add+0x40>)
   15b0c:	f240 228b 	movw	r2, #651	; 0x28b
   15b10:	f004 ffd0 	bl	1aab4 <printk>
   15b14:	f240 218b 	movw	r1, #651	; 0x28b
   15b18:	4808      	ldr	r0, [pc, #32]	; (15b3c <net_buf_frag_add+0x3c>)
   15b1a:	f005 fa71 	bl	1b000 <assert_post_action>

	if (!head) {
   15b1e:	b924      	cbnz	r4, 15b2a <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   15b20:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   15b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   15b26:	f7ff bf93 	b.w	15a50 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   15b2a:	4620      	mov	r0, r4
   15b2c:	f7ff ffa8 	bl	15a80 <net_buf_frag_last>
   15b30:	4629      	mov	r1, r5
   15b32:	f7ff ffbd 	bl	15ab0 <net_buf_frag_insert>
}
   15b36:	4620      	mov	r0, r4
   15b38:	bd38      	pop	{r3, r4, r5, pc}
   15b3a:	bf00      	nop
   15b3c:	00022729 	.word	0x00022729
   15b40:	0002003d 	.word	0x0002003d

00015b44 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   15b44:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   15b46:	6882      	ldr	r2, [r0, #8]
   15b48:	6803      	ldr	r3, [r0, #0]
{
   15b4a:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   15b4c:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   15b4e:	4299      	cmp	r1, r3
{
   15b50:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   15b52:	d90a      	bls.n	15b6a <net_buf_simple_push+0x26>
   15b54:	4908      	ldr	r1, [pc, #32]	; (15b78 <net_buf_simple_push+0x34>)
   15b56:	4809      	ldr	r0, [pc, #36]	; (15b7c <net_buf_simple_push+0x38>)
   15b58:	f240 4204 	movw	r2, #1028	; 0x404
   15b5c:	f004 ffaa 	bl	1aab4 <printk>
   15b60:	f240 4104 	movw	r1, #1028	; 0x404
   15b64:	4804      	ldr	r0, [pc, #16]	; (15b78 <net_buf_simple_push+0x34>)
   15b66:	f005 fa4b 	bl	1b000 <assert_post_action>
	buf->data -= len;
   15b6a:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   15b6c:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   15b6e:	1b40      	subs	r0, r0, r5
	buf->len += len;
   15b70:	440d      	add	r5, r1
	buf->data -= len;
   15b72:	6020      	str	r0, [r4, #0]
	buf->len += len;
   15b74:	80a5      	strh	r5, [r4, #4]
}
   15b76:	bd38      	pop	{r3, r4, r5, pc}
   15b78:	00022729 	.word	0x00022729
   15b7c:	0002003d 	.word	0x0002003d

00015b80 <net_buf_simple_pull>:
{
   15b80:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   15b82:	8883      	ldrh	r3, [r0, #4]
{
   15b84:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   15b86:	428b      	cmp	r3, r1
{
   15b88:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   15b8a:	d20a      	bcs.n	15ba2 <net_buf_simple_pull+0x22>
   15b8c:	4908      	ldr	r1, [pc, #32]	; (15bb0 <net_buf_simple_pull+0x30>)
   15b8e:	4809      	ldr	r0, [pc, #36]	; (15bb4 <net_buf_simple_pull+0x34>)
   15b90:	f240 4264 	movw	r2, #1124	; 0x464
   15b94:	f004 ff8e 	bl	1aab4 <printk>
   15b98:	f240 4164 	movw	r1, #1124	; 0x464
   15b9c:	4804      	ldr	r0, [pc, #16]	; (15bb0 <net_buf_simple_pull+0x30>)
   15b9e:	f005 fa2f 	bl	1b000 <assert_post_action>
	buf->len -= len;
   15ba2:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   15ba4:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   15ba6:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   15ba8:	4428      	add	r0, r5
	buf->len -= len;
   15baa:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   15bac:	6020      	str	r0, [r4, #0]
}
   15bae:	bd38      	pop	{r3, r4, r5, pc}
   15bb0:	00022729 	.word	0x00022729
   15bb4:	0002003d 	.word	0x0002003d

00015bb8 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   15bb8:	8883      	ldrh	r3, [r0, #4]
{
   15bba:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   15bbc:	428b      	cmp	r3, r1
{
   15bbe:	4604      	mov	r4, r0
   15bc0:	460d      	mov	r5, r1
	void *data = buf->data;
   15bc2:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   15bc4:	d20a      	bcs.n	15bdc <net_buf_simple_pull_mem+0x24>
   15bc6:	4909      	ldr	r1, [pc, #36]	; (15bec <net_buf_simple_pull_mem+0x34>)
   15bc8:	4809      	ldr	r0, [pc, #36]	; (15bf0 <net_buf_simple_pull_mem+0x38>)
   15bca:	f44f 628e 	mov.w	r2, #1136	; 0x470
   15bce:	f004 ff71 	bl	1aab4 <printk>
   15bd2:	f44f 618e 	mov.w	r1, #1136	; 0x470
   15bd6:	4805      	ldr	r0, [pc, #20]	; (15bec <net_buf_simple_pull_mem+0x34>)
   15bd8:	f005 fa12 	bl	1b000 <assert_post_action>
	buf->len -= len;
   15bdc:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   15bde:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   15be0:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   15be2:	4429      	add	r1, r5
}
   15be4:	4630      	mov	r0, r6
	buf->len -= len;
   15be6:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   15be8:	6021      	str	r1, [r4, #0]
}
   15bea:	bd70      	pop	{r4, r5, r6, pc}
   15bec:	00022729 	.word	0x00022729
   15bf0:	0002003d 	.word	0x0002003d

00015bf4 <net_buf_simple_add>:
{
   15bf4:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   15bf6:	6803      	ldr	r3, [r0, #0]
   15bf8:	8886      	ldrh	r6, [r0, #4]
   15bfa:	4604      	mov	r4, r0
   15bfc:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   15bfe:	f007 fcd3 	bl	1d5a8 <net_buf_simple_tailroom>
   15c02:	4288      	cmp	r0, r1
{
   15c04:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   15c06:	d20a      	bcs.n	15c1e <net_buf_simple_add+0x2a>
   15c08:	4907      	ldr	r1, [pc, #28]	; (15c28 <net_buf_simple_add+0x34>)
   15c0a:	4808      	ldr	r0, [pc, #32]	; (15c2c <net_buf_simple_add+0x38>)
   15c0c:	f240 3215 	movw	r2, #789	; 0x315
   15c10:	f004 ff50 	bl	1aab4 <printk>
   15c14:	f240 3115 	movw	r1, #789	; 0x315
   15c18:	4803      	ldr	r0, [pc, #12]	; (15c28 <net_buf_simple_add+0x34>)
   15c1a:	f005 f9f1 	bl	1b000 <assert_post_action>
	buf->len += len;
   15c1e:	88a1      	ldrh	r1, [r4, #4]
}
   15c20:	4630      	mov	r0, r6
	buf->len += len;
   15c22:	440d      	add	r5, r1
   15c24:	80a5      	strh	r5, [r4, #4]
}
   15c26:	bd70      	pop	{r4, r5, r6, pc}
   15c28:	00022729 	.word	0x00022729
   15c2c:	0002003d 	.word	0x0002003d

00015c30 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   15c30:	b570      	push	{r4, r5, r6, lr}
   15c32:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   15c34:	460c      	mov	r4, r1
	return port->data;
   15c36:	68c5      	ldr	r5, [r0, #12]
   15c38:	b941      	cbnz	r1, 15c4c <gpio_nrfx_manage_callback+0x1c>
   15c3a:	491e      	ldr	r1, [pc, #120]	; (15cb4 <gpio_nrfx_manage_callback+0x84>)
   15c3c:	481e      	ldr	r0, [pc, #120]	; (15cb8 <gpio_nrfx_manage_callback+0x88>)
   15c3e:	2224      	movs	r2, #36	; 0x24
   15c40:	f004 ff38 	bl	1aab4 <printk>
   15c44:	2124      	movs	r1, #36	; 0x24
   15c46:	481b      	ldr	r0, [pc, #108]	; (15cb4 <gpio_nrfx_manage_callback+0x84>)
   15c48:	f005 f9da 	bl	1b000 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   15c4c:	6863      	ldr	r3, [r4, #4]
   15c4e:	b943      	cbnz	r3, 15c62 <gpio_nrfx_manage_callback+0x32>
   15c50:	4918      	ldr	r1, [pc, #96]	; (15cb4 <gpio_nrfx_manage_callback+0x84>)
   15c52:	4819      	ldr	r0, [pc, #100]	; (15cb8 <gpio_nrfx_manage_callback+0x88>)
   15c54:	2225      	movs	r2, #37	; 0x25
   15c56:	f004 ff2d 	bl	1aab4 <printk>
   15c5a:	2125      	movs	r1, #37	; 0x25
   15c5c:	4815      	ldr	r0, [pc, #84]	; (15cb4 <gpio_nrfx_manage_callback+0x84>)
   15c5e:	f005 f9cf 	bl	1b000 <assert_post_action>
	return list->head;
   15c62:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   15c64:	b15b      	cbz	r3, 15c7e <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15c66:	2200      	movs	r2, #0
   15c68:	429c      	cmp	r4, r3
   15c6a:	d112      	bne.n	15c92 <gpio_nrfx_manage_callback+0x62>
	return node->next;
   15c6c:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   15c6e:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   15c70:	b952      	cbnz	r2, 15c88 <gpio_nrfx_manage_callback+0x58>
   15c72:	42a1      	cmp	r1, r4
	list->head = node;
   15c74:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   15c76:	d100      	bne.n	15c7a <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   15c78:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   15c7a:	2300      	movs	r3, #0
   15c7c:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   15c7e:	b96e      	cbnz	r6, 15c9c <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   15c80:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   15c82:	bd70      	pop	{r4, r5, r6, pc}
   15c84:	460b      	mov	r3, r1
   15c86:	e7ef      	b.n	15c68 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   15c88:	42a1      	cmp	r1, r4
	parent->next = child;
   15c8a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15c8c:	bf08      	it	eq
   15c8e:	60aa      	streq	r2, [r5, #8]
}
   15c90:	e7f3      	b.n	15c7a <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   15c92:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15c94:	461a      	mov	r2, r3
   15c96:	2900      	cmp	r1, #0
   15c98:	d1f4      	bne.n	15c84 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   15c9a:	b13e      	cbz	r6, 15cac <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   15c9c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   15c9e:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   15ca0:	6023      	str	r3, [r4, #0]
	list->head = node;
   15ca2:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   15ca4:	2800      	cmp	r0, #0
   15ca6:	d1eb      	bne.n	15c80 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   15ca8:	60ac      	str	r4, [r5, #8]
}
   15caa:	e7ea      	b.n	15c82 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   15cac:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   15cb0:	e7e7      	b.n	15c82 <gpio_nrfx_manage_callback+0x52>
   15cb2:	bf00      	nop
   15cb4:	00022755 	.word	0x00022755
   15cb8:	0002003d 	.word	0x0002003d

00015cbc <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15cbc:	6802      	ldr	r2, [r0, #0]
{
   15cbe:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   15cc0:	0953      	lsrs	r3, r2, #5
{
   15cc2:	4604      	mov	r4, r0
    switch (port)
   15cc4:	d029      	beq.n	15d1a <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   15cc6:	2b01      	cmp	r3, #1
   15cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15ccc:	bf18      	it	ne
   15cce:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   15cd0:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   15cd4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15cd6:	07db      	lsls	r3, r3, #31
   15cd8:	d40a      	bmi.n	15cf0 <nrf_gpio_pin_port_decode+0x34>
   15cda:	4912      	ldr	r1, [pc, #72]	; (15d24 <nrf_gpio_pin_port_decode+0x68>)
   15cdc:	4812      	ldr	r0, [pc, #72]	; (15d28 <nrf_gpio_pin_port_decode+0x6c>)
   15cde:	f240 221a 	movw	r2, #538	; 0x21a
   15ce2:	f004 fee7 	bl	1aab4 <printk>
   15ce6:	f240 211a 	movw	r1, #538	; 0x21a
   15cea:	480e      	ldr	r0, [pc, #56]	; (15d24 <nrf_gpio_pin_port_decode+0x68>)
   15cec:	f005 f988 	bl	1b000 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   15cf0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   15cf2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15cf6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   15cf8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15cfa:	d00c      	beq.n	15d16 <nrf_gpio_pin_port_decode+0x5a>
   15cfc:	2b01      	cmp	r3, #1
   15cfe:	d00f      	beq.n	15d20 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   15d00:	4908      	ldr	r1, [pc, #32]	; (15d24 <nrf_gpio_pin_port_decode+0x68>)
   15d02:	4809      	ldr	r0, [pc, #36]	; (15d28 <nrf_gpio_pin_port_decode+0x6c>)
   15d04:	f240 221f 	movw	r2, #543	; 0x21f
   15d08:	f004 fed4 	bl	1aab4 <printk>
   15d0c:	f240 211f 	movw	r1, #543	; 0x21f
   15d10:	4804      	ldr	r0, [pc, #16]	; (15d24 <nrf_gpio_pin_port_decode+0x68>)
   15d12:	f005 f975 	bl	1b000 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15d16:	4805      	ldr	r0, [pc, #20]	; (15d2c <nrf_gpio_pin_port_decode+0x70>)
}
   15d18:	bd10      	pop	{r4, pc}
    switch (port)
   15d1a:	f04f 33ff 	mov.w	r3, #4294967295
   15d1e:	e7d7      	b.n	15cd0 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   15d20:	4803      	ldr	r0, [pc, #12]	; (15d30 <nrf_gpio_pin_port_decode+0x74>)
   15d22:	e7f9      	b.n	15d18 <nrf_gpio_pin_port_decode+0x5c>
   15d24:	00022782 	.word	0x00022782
   15d28:	0002003d 	.word	0x0002003d
   15d2c:	40842500 	.word	0x40842500
   15d30:	40842800 	.word	0x40842800

00015d34 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   15d34:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   15d36:	4b09      	ldr	r3, [pc, #36]	; (15d5c <gpio_nrfx_init+0x28>)
   15d38:	781a      	ldrb	r2, [r3, #0]
   15d3a:	b96a      	cbnz	r2, 15d58 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   15d3c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15d3e:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   15d40:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   15d42:	2105      	movs	r1, #5
   15d44:	f7f7 ff86 	bl	dc54 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   15d48:	202f      	movs	r0, #47	; 0x2f
   15d4a:	f7f7 ff65 	bl	dc18 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   15d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15d52:	4b03      	ldr	r3, [pc, #12]	; (15d60 <gpio_nrfx_init+0x2c>)
   15d54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   15d58:	2000      	movs	r0, #0
   15d5a:	bd08      	pop	{r3, pc}
   15d5c:	2000f9d4 	.word	0x2000f9d4
   15d60:	4002f000 	.word	0x4002f000

00015d64 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15d64:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   15d68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15d6c:	4680      	mov	r8, r0
   15d6e:	460e      	mov	r6, r1
   15d70:	4617      	mov	r7, r2
   15d72:	4699      	mov	r9, r3
	return port->data;
   15d74:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   15d76:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15d7a:	f040 80ab 	bne.w	15ed4 <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15d7e:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15d80:	a801      	add	r0, sp, #4
   15d82:	7a1b      	ldrb	r3, [r3, #8]
   15d84:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   15d88:	9301      	str	r3, [sp, #4]
   15d8a:	f7ff ff97 	bl	15cbc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15d8e:	9b01      	ldr	r3, [sp, #4]
   15d90:	3380      	adds	r3, #128	; 0x80
   15d92:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15d96:	07d8      	lsls	r0, r3, #31
   15d98:	f100 80bb 	bmi.w	15f12 <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15d9c:	2101      	movs	r1, #1
   15d9e:	68e3      	ldr	r3, [r4, #12]
   15da0:	40b1      	lsls	r1, r6
   15da2:	4319      	orrs	r1, r3
   15da4:	60e1      	str	r1, [r4, #12]
   15da6:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15da8:	2000      	movs	r0, #0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15daa:	6963      	ldr	r3, [r4, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15dac:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15dae:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   15db2:	bf0c      	ite	eq
   15db4:	430b      	orreq	r3, r1
   15db6:	438b      	bicne	r3, r1
   15db8:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   15dba:	69a3      	ldr	r3, [r4, #24]
   15dbc:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   15dc0:	bf0c      	ite	eq
   15dc2:	430b      	orreq	r3, r1
   15dc4:	438b      	bicne	r3, r1
   15dc6:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15dc8:	6923      	ldr	r3, [r4, #16]
   15dca:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   15dce:	bf0c      	ite	eq
   15dd0:	4319      	orreq	r1, r3
   15dd2:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15dd6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15dda:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15ddc:	7a1b      	ldrb	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   15dde:	4a4e      	ldr	r2, [pc, #312]	; (15f18 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   15de0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   15de4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	return port->data;
   15de8:	f8d8 700c 	ldr.w	r7, [r8, #12]
   15dec:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15dee:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   15df2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   15df6:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   15dfa:	428d      	cmp	r5, r1
   15dfc:	d175      	bne.n	15eea <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   15dfe:	fa23 f100 	lsr.w	r1, r3, r0
   15e02:	07c9      	lsls	r1, r1, #31
   15e04:	d571      	bpl.n	15eea <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   15e06:	0083      	lsls	r3, r0, #2
   15e08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15e0c:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   15e10:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   15e14:	f021 0101 	bic.w	r1, r1, #1
   15e18:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   15e1c:	2301      	movs	r3, #1
   15e1e:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   15e20:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   15e24:	b2c0      	uxtb	r0, r0
   15e26:	f001 f9bf 	bl	171a8 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   15e2a:	4628      	mov	r0, r5
   15e2c:	2100      	movs	r1, #0
   15e2e:	f007 fbff 	bl	1d630 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   15e32:	68f8      	ldr	r0, [r7, #12]
   15e34:	40f0      	lsrs	r0, r6
   15e36:	f010 0001 	ands.w	r0, r0, #1
   15e3a:	d048      	beq.n	15ece <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   15e3c:	6978      	ldr	r0, [r7, #20]
   15e3e:	40f0      	lsrs	r0, r6
   15e40:	f010 0401 	ands.w	r4, r0, #1
   15e44:	d059      	beq.n	15efa <gpio_nrfx_pin_interrupt_configure+0x196>
			if (data->double_edge & BIT(pin)) {
   15e46:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   15e48:	a801      	add	r0, sp, #4
			if (data->double_edge & BIT(pin)) {
   15e4a:	40f3      	lsrs	r3, r6
   15e4c:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15e4e:	bf57      	itett	pl
   15e50:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   15e52:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15e54:	fa21 f606 	lsrpl.w	r6, r1, r6
   15e58:	f006 0601 	andpl.w	r6, r6, #1
   15e5c:	bf5c      	itt	pl
   15e5e:	f1c6 0602 	rsbpl	r6, r6, #2
   15e62:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   15e64:	f001 f9c0 	bl	171e8 <nrfx_gpiote_channel_alloc>
   15e68:	4b2c      	ldr	r3, [pc, #176]	; (15f1c <gpio_nrfx_pin_interrupt_configure+0x1b8>)
   15e6a:	4298      	cmp	r0, r3
   15e6c:	d142      	bne.n	15ef4 <gpio_nrfx_pin_interrupt_configure+0x190>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15e6e:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   15e70:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15e74:	022d      	lsls	r5, r5, #8
   15e76:	008b      	lsls	r3, r1, #2
   15e78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15e7c:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15e80:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15e84:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15e88:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   15e8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   15e90:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15e94:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15e98:	4315      	orrs	r5, r2
   15e9a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   15e9e:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   15ea2:	4b1f      	ldr	r3, [pc, #124]	; (15f20 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   15ea4:	008a      	lsls	r2, r1, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15ea6:	5098      	str	r0, [r3, r2]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   15ea8:	f89d 1004 	ldrb.w	r1, [sp, #4]
   15eac:	589b      	ldr	r3, [r3, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15eae:	008b      	lsls	r3, r1, #2
   15eb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15eb4:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   15eb8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15ebc:	f042 0201 	orr.w	r2, r2, #1
   15ec0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   15ec4:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   15ec6:	4a14      	ldr	r2, [pc, #80]	; (15f18 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   15ec8:	408b      	lsls	r3, r1
   15eca:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   15ece:	b003      	add	sp, #12
   15ed0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15ed4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   15ed8:	f47f af60 	bne.w	15d9c <gpio_nrfx_pin_interrupt_configure+0x38>
   15edc:	2101      	movs	r1, #1
   15ede:	fa01 f306 	lsl.w	r3, r1, r6
   15ee2:	68e1      	ldr	r1, [r4, #12]
   15ee4:	ea21 0103 	bic.w	r1, r1, r3
   15ee8:	e75c      	b.n	15da4 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15eea:	3001      	adds	r0, #1
   15eec:	2808      	cmp	r0, #8
   15eee:	f47f af7e 	bne.w	15dee <gpio_nrfx_pin_interrupt_configure+0x8a>
   15ef2:	e79a      	b.n	15e2a <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   15ef4:	f06f 0012 	mvn.w	r0, #18
   15ef8:	e7e9      	b.n	15ece <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15efa:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15efc:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15efe:	40f1      	lsrs	r1, r6
   15f00:	f001 0101 	and.w	r1, r1, #1
   15f04:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15f08:	b2c9      	uxtb	r1, r1
   15f0a:	f007 fb91 	bl	1d630 <nrf_gpio_cfg_sense_set>
	int res = 0;
   15f0e:	4620      	mov	r0, r4
   15f10:	e7dd      	b.n	15ece <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   15f12:	f06f 0022 	mvn.w	r0, #34	; 0x22
   15f16:	e7da      	b.n	15ece <gpio_nrfx_pin_interrupt_configure+0x16a>
   15f18:	4002f000 	.word	0x4002f000
   15f1c:	0bad0000 	.word	0x0bad0000
   15f20:	4002f100 	.word	0x4002f100

00015f24 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15f24:	4b2e      	ldr	r3, [pc, #184]	; (15fe0 <gpio_nrfx_config+0xbc>)
{
   15f26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15f28:	4c2e      	ldr	r4, [pc, #184]	; (15fe4 <gpio_nrfx_config+0xc0>)
   15f2a:	4013      	ands	r3, r2
   15f2c:	42a3      	cmp	r3, r4
	return port->config;
   15f2e:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15f30:	d044      	beq.n	15fbc <gpio_nrfx_config+0x98>
   15f32:	d80e      	bhi.n	15f52 <gpio_nrfx_config+0x2e>
   15f34:	2b06      	cmp	r3, #6
   15f36:	d043      	beq.n	15fc0 <gpio_nrfx_config+0x9c>
   15f38:	d806      	bhi.n	15f48 <gpio_nrfx_config+0x24>
   15f3a:	2b00      	cmp	r3, #0
   15f3c:	d040      	beq.n	15fc0 <gpio_nrfx_config+0x9c>
   15f3e:	2b02      	cmp	r3, #2
   15f40:	d040      	beq.n	15fc4 <gpio_nrfx_config+0xa0>
   15f42:	f06f 0015 	mvn.w	r0, #21
   15f46:	e037      	b.n	15fb8 <gpio_nrfx_config+0x94>
   15f48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15f4c:	d1f9      	bne.n	15f42 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   15f4e:	2401      	movs	r4, #1
   15f50:	e009      	b.n	15f66 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15f52:	4c25      	ldr	r4, [pc, #148]	; (15fe8 <gpio_nrfx_config+0xc4>)
   15f54:	42a3      	cmp	r3, r4
   15f56:	d037      	beq.n	15fc8 <gpio_nrfx_config+0xa4>
   15f58:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   15f5c:	d036      	beq.n	15fcc <gpio_nrfx_config+0xa8>
   15f5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   15f62:	d1ee      	bne.n	15f42 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   15f64:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   15f66:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15f68:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   15f6c:	bf4c      	ite	mi
   15f6e:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   15f70:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15f74:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15f78:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   15f7a:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15f7e:	d507      	bpl.n	15f90 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15f80:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15f82:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15f86:	d523      	bpl.n	15fd0 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   15f88:	2301      	movs	r3, #1
   15f8a:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   15f8c:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   15f90:	7a03      	ldrb	r3, [r0, #8]
   15f92:	f001 011f 	and.w	r1, r1, #31
   15f96:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15f9a:	a801      	add	r0, sp, #4
   15f9c:	9101      	str	r1, [sp, #4]
   15f9e:	f7ff fe8d 	bl	15cbc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15fa2:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   15fa4:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   15fa8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   15fac:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15fb0:	3280      	adds	r2, #128	; 0x80
   15fb2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   15fb6:	2000      	movs	r0, #0
}
   15fb8:	b003      	add	sp, #12
   15fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   15fbc:	2407      	movs	r4, #7
   15fbe:	e7d2      	b.n	15f66 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15fc0:	461c      	mov	r4, r3
   15fc2:	e7d0      	b.n	15f66 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   15fc4:	2404      	movs	r4, #4
   15fc6:	e7ce      	b.n	15f66 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   15fc8:	2405      	movs	r4, #5
   15fca:	e7cc      	b.n	15f66 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   15fcc:	2403      	movs	r4, #3
   15fce:	e7ca      	b.n	15f66 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   15fd0:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   15fd2:	bf42      	ittt	mi
   15fd4:	2301      	movmi	r3, #1
   15fd6:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   15fd8:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   15fdc:	e7d8      	b.n	15f90 <gpio_nrfx_config+0x6c>
   15fde:	bf00      	nop
   15fe0:	00f00006 	.word	0x00f00006
   15fe4:	00100006 	.word	0x00100006
   15fe8:	00400002 	.word	0x00400002

00015fec <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   15fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15ff0:	460f      	mov	r7, r1
   15ff2:	4616      	mov	r6, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15ff4:	4604      	mov	r4, r0
   15ff6:	b1e0      	cbz	r0, 16032 <gpio_fire_callbacks.isra.0+0x46>
	return node->next;
   15ff8:	6805      	ldr	r5, [r0, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   15ffa:	f8df 803c 	ldr.w	r8, [pc, #60]	; 16038 <gpio_fire_callbacks.isra.0+0x4c>
   15ffe:	f8df 903c 	ldr.w	r9, [pc, #60]	; 1603c <gpio_fire_callbacks.isra.0+0x50>
		if (cb->pin_mask & pins) {
   16002:	68a3      	ldr	r3, [r4, #8]
   16004:	421e      	tst	r6, r3
   16006:	d010      	beq.n	1602a <gpio_fire_callbacks.isra.0+0x3e>
			__ASSERT(cb->handler, "No callback handler!");
   16008:	6863      	ldr	r3, [r4, #4]
   1600a:	b943      	cbnz	r3, 1601e <gpio_fire_callbacks.isra.0+0x32>
   1600c:	4641      	mov	r1, r8
   1600e:	4648      	mov	r0, r9
   16010:	2245      	movs	r2, #69	; 0x45
   16012:	f004 fd4f 	bl	1aab4 <printk>
   16016:	2145      	movs	r1, #69	; 0x45
   16018:	4640      	mov	r0, r8
   1601a:	f004 fff1 	bl	1b000 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1601e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   16022:	4621      	mov	r1, r4
   16024:	4638      	mov	r0, r7
   16026:	4032      	ands	r2, r6
   16028:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1602a:	b115      	cbz	r5, 16032 <gpio_fire_callbacks.isra.0+0x46>
   1602c:	462c      	mov	r4, r5
   1602e:	682d      	ldr	r5, [r5, #0]
   16030:	e7e7      	b.n	16002 <gpio_fire_callbacks.isra.0+0x16>
		}
	}
}
   16032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16036:	bf00      	nop
   16038:	00022755 	.word	0x00022755
   1603c:	0002003d 	.word	0x0002003d

00016040 <gpiote_event_handler>:
{
   16040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   16042:	2600      	movs	r6, #0
   16044:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16048:	4d28      	ldr	r5, [pc, #160]	; (160ec <gpiote_event_handler+0xac>)
   1604a:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   1604e:	b15c      	cbz	r4, 16068 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   16050:	4827      	ldr	r0, [pc, #156]	; (160f0 <gpiote_event_handler+0xb0>)
   16052:	f007 fb26 	bl	1d6a2 <check_level_trigger_pins>
		fired_triggers[0] =
   16056:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   16058:	4826      	ldr	r0, [pc, #152]	; (160f4 <gpiote_event_handler+0xb4>)
   1605a:	f007 fb22 	bl	1d6a2 <check_level_trigger_pins>
		fired_triggers[1] =
   1605e:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   16060:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   16064:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   16068:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1606a:	2601      	movs	r6, #1
   1606c:	4694      	mov	ip, r2
{
   1606e:	4922      	ldr	r1, [pc, #136]	; (160f8 <gpiote_event_handler+0xb8>)
    return p_reg->INTENSET & mask;
   16070:	4d1e      	ldr	r5, [pc, #120]	; (160ec <gpiote_event_handler+0xac>)
   16072:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   16076:	fa06 f002 	lsl.w	r0, r6, r2
   1607a:	4218      	tst	r0, r3
   1607c:	d016      	beq.n	160ac <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1607e:	680b      	ldr	r3, [r1, #0]
   16080:	b1a3      	cbz	r3, 160ac <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   16082:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   16086:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1608a:	af02      	add	r7, sp, #8
   1608c:	f3c3 3040 	ubfx	r0, r3, #13, #1
   16090:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   16094:	f850 7c08 	ldr.w	r7, [r0, #-8]
   16098:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1609c:	fa06 f303 	lsl.w	r3, r6, r3
   160a0:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   160a2:	f8c1 c000 	str.w	ip, [r1]
   160a6:	f840 3c08 	str.w	r3, [r0, #-8]
   160aa:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   160ac:	3201      	adds	r2, #1
   160ae:	2a08      	cmp	r2, #8
   160b0:	f101 0104 	add.w	r1, r1, #4
   160b4:	d1dd      	bne.n	16072 <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   160b6:	9a00      	ldr	r2, [sp, #0]
   160b8:	b122      	cbz	r2, 160c4 <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   160ba:	4b10      	ldr	r3, [pc, #64]	; (160fc <gpiote_event_handler+0xbc>)
   160bc:	490c      	ldr	r1, [pc, #48]	; (160f0 <gpiote_event_handler+0xb0>)
   160be:	6858      	ldr	r0, [r3, #4]
   160c0:	f7ff ff94 	bl	15fec <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   160c4:	9a01      	ldr	r2, [sp, #4]
   160c6:	b122      	cbz	r2, 160d2 <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   160c8:	4b0d      	ldr	r3, [pc, #52]	; (16100 <gpiote_event_handler+0xc0>)
   160ca:	490a      	ldr	r1, [pc, #40]	; (160f4 <gpiote_event_handler+0xb4>)
   160cc:	6858      	ldr	r0, [r3, #4]
   160ce:	f7ff ff8d 	bl	15fec <gpio_fire_callbacks.isra.0>
	if (port_event) {
   160d2:	b144      	cbz	r4, 160e6 <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   160d4:	4806      	ldr	r0, [pc, #24]	; (160f0 <gpiote_event_handler+0xb0>)
   160d6:	f007 fabe 	bl	1d656 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   160da:	4806      	ldr	r0, [pc, #24]	; (160f4 <gpiote_event_handler+0xb4>)
}
   160dc:	b003      	add	sp, #12
   160de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   160e2:	f007 bab8 	b.w	1d656 <cfg_level_pins>
}
   160e6:	b003      	add	sp, #12
   160e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   160ea:	bf00      	nop
   160ec:	4002f000 	.word	0x4002f000
   160f0:	200085bc 	.word	0x200085bc
   160f4:	200085cc 	.word	0x200085cc
   160f8:	4002f100 	.word	0x4002f100
   160fc:	2000af4c 	.word	0x2000af4c
   16100:	2000af68 	.word	0x2000af68

00016104 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   16104:	4b02      	ldr	r3, [pc, #8]	; (16110 <vipm_nrf_1_register_callback+0xc>)
   16106:	6059      	str	r1, [r3, #4]
   16108:	645a      	str	r2, [r3, #68]	; 0x44
   1610a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   1610e:	4770      	bx	lr
   16110:	2000af8c 	.word	0x2000af8c

00016114 <vipm_nrf_0_set_enabled>:
   16114:	b508      	push	{r3, lr}
   16116:	2145      	movs	r1, #69	; 0x45
   16118:	4802      	ldr	r0, [pc, #8]	; (16124 <vipm_nrf_0_set_enabled+0x10>)
   1611a:	f004 fccb 	bl	1aab4 <printk>
   1611e:	f06f 0015 	mvn.w	r0, #21
   16122:	bd08      	pop	{r3, pc}
   16124:	000227c3 	.word	0x000227c3

00016128 <vipm_nrf_0_register_callback>:
   16128:	2157      	movs	r1, #87	; 0x57
   1612a:	4801      	ldr	r0, [pc, #4]	; (16130 <vipm_nrf_0_register_callback+0x8>)
   1612c:	f004 bcc2 	b.w	1aab4 <printk>
   16130:	000227e4 	.word	0x000227e4

00016134 <vipm_nrf_1_send>:
   16134:	b508      	push	{r3, lr}
   16136:	2145      	movs	r1, #69	; 0x45
   16138:	4802      	ldr	r0, [pc, #8]	; (16144 <vipm_nrf_1_send+0x10>)
   1613a:	f004 fcbb 	bl	1aab4 <printk>
   1613e:	f06f 0015 	mvn.w	r0, #21
   16142:	bd08      	pop	{r3, pc}
   16144:	0002281b 	.word	0x0002281b

00016148 <vipm_nrf_init>:
{
   16148:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
   1614a:	4d0b      	ldr	r5, [pc, #44]	; (16178 <vipm_nrf_init+0x30>)
   1614c:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
   16150:	b97c      	cbnz	r4, 16172 <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
   16152:	4a0a      	ldr	r2, [pc, #40]	; (1617c <vipm_nrf_init+0x34>)
   16154:	490a      	ldr	r1, [pc, #40]	; (16180 <vipm_nrf_init+0x38>)
   16156:	4620      	mov	r0, r4
   16158:	f001 f87e 	bl	17258 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
   1615c:	4622      	mov	r2, r4
   1615e:	2101      	movs	r1, #1
   16160:	202a      	movs	r0, #42	; 0x2a
   16162:	f7f7 fd77 	bl	dc54 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
   16166:	4807      	ldr	r0, [pc, #28]	; (16184 <vipm_nrf_init+0x3c>)
   16168:	f001 f89c 	bl	172a4 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
   1616c:	2301      	movs	r3, #1
   1616e:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
   16172:	2000      	movs	r0, #0
   16174:	bd38      	pop	{r3, r4, r5, pc}
   16176:	bf00      	nop
   16178:	2000af8c 	.word	0x2000af8c
   1617c:	2000af84 	.word	0x2000af84
   16180:	00016189 	.word	0x00016189
   16184:	0001f1b4 	.word	0x0001f1b4

00016188 <vipm_dispatcher>:
{
   16188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1618c:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   1618e:	4f17      	ldr	r7, [pc, #92]	; (161ec <vipm_dispatcher+0x64>)
   16190:	f8df 805c 	ldr.w	r8, [pc, #92]	; 161f0 <vipm_dispatcher+0x68>
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   16194:	4e17      	ldr	r6, [pc, #92]	; (161f4 <vipm_dispatcher+0x6c>)
	while (event_mask) {
   16196:	b90d      	cbnz	r5, 1619c <vipm_dispatcher+0x14>
}
   16198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1619c:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   161a0:	b30c      	cbz	r4, 161e6 <vipm_dispatcher+0x5e>
  {
    return 32U;
  }
  return __builtin_clz(value);
   161a2:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   161a6:	2b0f      	cmp	r3, #15
   161a8:	461c      	mov	r4, r3
   161aa:	dd08      	ble.n	161be <vipm_dispatcher+0x36>
   161ac:	4639      	mov	r1, r7
   161ae:	4640      	mov	r0, r8
   161b0:	2283      	movs	r2, #131	; 0x83
   161b2:	f004 fc7f 	bl	1aab4 <printk>
   161b6:	2183      	movs	r1, #131	; 0x83
   161b8:	4638      	mov	r0, r7
   161ba:	f004 ff21 	bl	1b000 <assert_post_action>
		event_mask &= ~BIT(event_idx);
   161be:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   161c0:	f856 9024 	ldr.w	r9, [r6, r4, lsl #2]
		event_mask &= ~BIT(event_idx);
   161c4:	40a3      	lsls	r3, r4
   161c6:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   161ca:	f1b9 0f00 	cmp.w	r9, #0
   161ce:	d0e2      	beq.n	16196 <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
   161d0:	2300      	movs	r3, #0
   161d2:	f104 0110 	add.w	r1, r4, #16
   161d6:	3420      	adds	r4, #32
   161d8:	461a      	mov	r2, r3
   161da:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   161de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   161e2:	47c8      	blx	r9
   161e4:	e7d7      	b.n	16196 <vipm_dispatcher+0xe>
    return 32U;
   161e6:	2420      	movs	r4, #32
   161e8:	e7e0      	b.n	161ac <vipm_dispatcher+0x24>
   161ea:	bf00      	nop
   161ec:	0002283c 	.word	0x0002283c
   161f0:	0002003d 	.word	0x0002003d
   161f4:	2000af8c 	.word	0x2000af8c

000161f8 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   161f8:	2a10      	cmp	r2, #16
   161fa:	b508      	push	{r3, lr}
   161fc:	d810      	bhi.n	16220 <vipm_nrf_0_send+0x28>
   161fe:	b11a      	cbz	r2, 16208 <vipm_nrf_0_send+0x10>
   16200:	2157      	movs	r1, #87	; 0x57
   16202:	4809      	ldr	r0, [pc, #36]	; (16228 <vipm_nrf_0_send+0x30>)
   16204:	f004 fc56 	bl	1aab4 <printk>
   16208:	9b02      	ldr	r3, [sp, #8]
   1620a:	2b00      	cmp	r3, #0
   1620c:	dd03      	ble.n	16216 <vipm_nrf_0_send+0x1e>
   1620e:	2157      	movs	r1, #87	; 0x57
   16210:	4806      	ldr	r0, [pc, #24]	; (1622c <vipm_nrf_0_send+0x34>)
   16212:	f004 fc4f 	bl	1aab4 <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16216:	2201      	movs	r2, #1
   16218:	2000      	movs	r0, #0
   1621a:	4b05      	ldr	r3, [pc, #20]	; (16230 <vipm_nrf_0_send+0x38>)
   1621c:	601a      	str	r2, [r3, #0]
   1621e:	bd08      	pop	{r3, pc}
   16220:	f06f 0015 	mvn.w	r0, #21
   16224:	e7fb      	b.n	1621e <vipm_nrf_0_send+0x26>
   16226:	bf00      	nop
   16228:	0002286a 	.word	0x0002286a
   1622c:	000228a3 	.word	0x000228a3
   16230:	4002a000 	.word	0x4002a000

00016234 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   16234:	6802      	ldr	r2, [r0, #0]
{
   16236:	b510      	push	{r4, lr}
    switch (port)
   16238:	0953      	lsrs	r3, r2, #5
{
   1623a:	4604      	mov	r4, r0
    switch (port)
   1623c:	d029      	beq.n	16292 <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   1623e:	2b01      	cmp	r3, #1
   16240:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16244:	bf18      	it	ne
   16246:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   16248:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1624c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1624e:	07db      	lsls	r3, r3, #31
   16250:	d40a      	bmi.n	16268 <nrf_gpio_pin_port_decode+0x34>
   16252:	4912      	ldr	r1, [pc, #72]	; (1629c <nrf_gpio_pin_port_decode+0x68>)
   16254:	4812      	ldr	r0, [pc, #72]	; (162a0 <nrf_gpio_pin_port_decode+0x6c>)
   16256:	f240 221a 	movw	r2, #538	; 0x21a
   1625a:	f004 fc2b 	bl	1aab4 <printk>
   1625e:	f240 211a 	movw	r1, #538	; 0x21a
   16262:	480e      	ldr	r0, [pc, #56]	; (1629c <nrf_gpio_pin_port_decode+0x68>)
   16264:	f004 fecc 	bl	1b000 <assert_post_action>
    uint32_t pin_number = *p_pin;
   16268:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   1626a:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1626e:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   16270:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   16272:	d00c      	beq.n	1628e <nrf_gpio_pin_port_decode+0x5a>
   16274:	2b01      	cmp	r3, #1
   16276:	d00f      	beq.n	16298 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   16278:	4908      	ldr	r1, [pc, #32]	; (1629c <nrf_gpio_pin_port_decode+0x68>)
   1627a:	4809      	ldr	r0, [pc, #36]	; (162a0 <nrf_gpio_pin_port_decode+0x6c>)
   1627c:	f240 221f 	movw	r2, #543	; 0x21f
   16280:	f004 fc18 	bl	1aab4 <printk>
   16284:	f240 211f 	movw	r1, #543	; 0x21f
   16288:	4804      	ldr	r0, [pc, #16]	; (1629c <nrf_gpio_pin_port_decode+0x68>)
   1628a:	f004 feb9 	bl	1b000 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1628e:	4805      	ldr	r0, [pc, #20]	; (162a4 <nrf_gpio_pin_port_decode+0x70>)
}
   16290:	bd10      	pop	{r4, pc}
    switch (port)
   16292:	f04f 33ff 	mov.w	r3, #4294967295
   16296:	e7d7      	b.n	16248 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   16298:	4803      	ldr	r0, [pc, #12]	; (162a8 <nrf_gpio_pin_port_decode+0x74>)
   1629a:	e7f9      	b.n	16290 <nrf_gpio_pin_port_decode+0x5c>
   1629c:	00022782 	.word	0x00022782
   162a0:	0002003d 	.word	0x0002003d
   162a4:	40842500 	.word	0x40842500
   162a8:	40842800 	.word	0x40842800

000162ac <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   162ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   162ae:	794b      	ldrb	r3, [r1, #5]
   162b0:	2b01      	cmp	r3, #1
   162b2:	d02b      	beq.n	1630c <uarte_nrfx_configure+0x60>
   162b4:	2b03      	cmp	r3, #3
   162b6:	d126      	bne.n	16306 <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   162b8:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   162ba:	798b      	ldrb	r3, [r1, #6]
   162bc:	2b03      	cmp	r3, #3
   162be:	d122      	bne.n	16306 <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   162c0:	79cd      	ldrb	r5, [r1, #7]
   162c2:	b125      	cbz	r5, 162ce <uarte_nrfx_configure+0x22>
   162c4:	2d01      	cmp	r5, #1
   162c6:	d11e      	bne.n	16306 <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   162c8:	6843      	ldr	r3, [r0, #4]
   162ca:	791b      	ldrb	r3, [r3, #4]
   162cc:	b1db      	cbz	r3, 16306 <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   162ce:	790a      	ldrb	r2, [r1, #4]
   162d0:	2a01      	cmp	r2, #1
   162d2:	d01d      	beq.n	16310 <uarte_nrfx_configure+0x64>
   162d4:	2a02      	cmp	r2, #2
   162d6:	d01f      	beq.n	16318 <uarte_nrfx_configure+0x6c>
   162d8:	b9aa      	cbnz	r2, 16306 <uarte_nrfx_configure+0x5a>
   162da:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   162dc:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   162de:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   162e0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   162e4:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   162e6:	d06e      	beq.n	163c6 <uarte_nrfx_configure+0x11a>
   162e8:	d833      	bhi.n	16352 <uarte_nrfx_configure+0xa6>
   162ea:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   162ee:	d06d      	beq.n	163cc <uarte_nrfx_configure+0x120>
   162f0:	d81c      	bhi.n	1632c <uarte_nrfx_configure+0x80>
   162f2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   162f6:	d06b      	beq.n	163d0 <uarte_nrfx_configure+0x124>
   162f8:	d810      	bhi.n	1631c <uarte_nrfx_configure+0x70>
   162fa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   162fe:	d06a      	beq.n	163d6 <uarte_nrfx_configure+0x12a>
   16300:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   16304:	d06a      	beq.n	163dc <uarte_nrfx_configure+0x130>
   16306:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1630a:	e05b      	b.n	163c4 <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
   1630c:	2700      	movs	r7, #0
   1630e:	e7d4      	b.n	162ba <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   16310:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   16314:	220e      	movs	r2, #14
   16316:	e7e1      	b.n	162dc <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   16318:	2400      	movs	r4, #0
   1631a:	e7fb      	b.n	16314 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
   1631c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   16320:	d05f      	beq.n	163e2 <uarte_nrfx_configure+0x136>
   16322:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   16326:	d1ee      	bne.n	16306 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   16328:	4b38      	ldr	r3, [pc, #224]	; (1640c <uarte_nrfx_configure+0x160>)
   1632a:	e03e      	b.n	163aa <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1632c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   16330:	d05a      	beq.n	163e8 <uarte_nrfx_configure+0x13c>
   16332:	d807      	bhi.n	16344 <uarte_nrfx_configure+0x98>
   16334:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   16338:	d058      	beq.n	163ec <uarte_nrfx_configure+0x140>
   1633a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1633e:	d1e2      	bne.n	16306 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   16340:	4b33      	ldr	r3, [pc, #204]	; (16410 <uarte_nrfx_configure+0x164>)
   16342:	e032      	b.n	163aa <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   16344:	f647 2c12 	movw	ip, #31250	; 0x7a12
   16348:	4563      	cmp	r3, ip
   1634a:	d1dc      	bne.n	16306 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1634c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   16350:	e02b      	b.n	163aa <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   16352:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   16356:	d04b      	beq.n	163f0 <uarte_nrfx_configure+0x144>
   16358:	d813      	bhi.n	16382 <uarte_nrfx_configure+0xd6>
   1635a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1635e:	d04a      	beq.n	163f6 <uarte_nrfx_configure+0x14a>
   16360:	d809      	bhi.n	16376 <uarte_nrfx_configure+0xca>
   16362:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   16366:	4563      	cmp	r3, ip
   16368:	d047      	beq.n	163fa <uarte_nrfx_configure+0x14e>
   1636a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1636e:	d1ca      	bne.n	16306 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   16370:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   16374:	e019      	b.n	163aa <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   16376:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1637a:	d1c4      	bne.n	16306 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1637c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   16380:	e013      	b.n	163aa <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   16382:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   16386:	d03b      	beq.n	16400 <uarte_nrfx_configure+0x154>
   16388:	d809      	bhi.n	1639e <uarte_nrfx_configure+0xf2>
   1638a:	f8df c088 	ldr.w	ip, [pc, #136]	; 16414 <uarte_nrfx_configure+0x168>
   1638e:	4563      	cmp	r3, ip
   16390:	d039      	beq.n	16406 <uarte_nrfx_configure+0x15a>
   16392:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   16396:	d1b6      	bne.n	16306 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   16398:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1639c:	e005      	b.n	163aa <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1639e:	f8df c078 	ldr.w	ip, [pc, #120]	; 16418 <uarte_nrfx_configure+0x16c>
   163a2:	4563      	cmp	r3, ip
   163a4:	d1af      	bne.n	16306 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   163a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   163aa:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   163ae:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   163b0:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   163b2:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   163b4:	4322      	orrs	r2, r4
   163b6:	3304      	adds	r3, #4
   163b8:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   163ba:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   163be:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   163c2:	2000      	movs	r0, #0
}
   163c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   163c6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   163ca:	e7ee      	b.n	163aa <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   163cc:	4b13      	ldr	r3, [pc, #76]	; (1641c <uarte_nrfx_configure+0x170>)
   163ce:	e7ec      	b.n	163aa <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   163d0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   163d4:	e7e9      	b.n	163aa <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
   163d6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   163da:	e7e6      	b.n	163aa <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   163dc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   163e0:	e7e3      	b.n	163aa <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   163e2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   163e6:	e7e0      	b.n	163aa <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   163e8:	4b0d      	ldr	r3, [pc, #52]	; (16420 <uarte_nrfx_configure+0x174>)
   163ea:	e7de      	b.n	163aa <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   163ec:	4b0d      	ldr	r3, [pc, #52]	; (16424 <uarte_nrfx_configure+0x178>)
   163ee:	e7dc      	b.n	163aa <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   163f0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   163f4:	e7d9      	b.n	163aa <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   163f6:	4b0c      	ldr	r3, [pc, #48]	; (16428 <uarte_nrfx_configure+0x17c>)
   163f8:	e7d7      	b.n	163aa <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   163fa:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   163fe:	e7d4      	b.n	163aa <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   16400:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   16404:	e7d1      	b.n	163aa <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   16406:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1640a:	e7ce      	b.n	163aa <uarte_nrfx_configure+0xfe>
   1640c:	0013b000 	.word	0x0013b000
   16410:	004ea000 	.word	0x004ea000
   16414:	0003d090 	.word	0x0003d090
   16418:	000f4240 	.word	0x000f4240
   1641c:	00275000 	.word	0x00275000
   16420:	0075c000 	.word	0x0075c000
   16424:	003af000 	.word	0x003af000
   16428:	013a9000 	.word	0x013a9000

0001642c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1642c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16430:	4606      	mov	r6, r0
   16432:	4688      	mov	r8, r1
	return dev->data;
   16434:	68c7      	ldr	r7, [r0, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   16436:	f007 ff62 	bl	1e2fe <k_is_in_isr>
   1643a:	b9b8      	cbnz	r0, 1646c <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   1643c:	4b28      	ldr	r3, [pc, #160]	; (164e0 <uarte_nrfx_poll_out+0xb4>)
   1643e:	781b      	ldrb	r3, [r3, #0]
   16440:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   16444:	6872      	ldr	r2, [r6, #4]
   16446:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   16448:	b193      	cbz	r3, 16470 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1644a:	f04f 0320 	mov.w	r3, #32
   1644e:	f3ef 8411 	mrs	r4, BASEPRI
   16452:	f383 8811 	msr	BASEPRI, r3
   16456:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1645a:	6870      	ldr	r0, [r6, #4]
   1645c:	f007 fa04 	bl	1d868 <is_tx_ready.isra.0>
   16460:	bb38      	cbnz	r0, 164b2 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   16462:	f384 8811 	msr	BASEPRI, r4
   16466:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1646a:	e7ee      	b.n	1644a <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1646c:	2301      	movs	r3, #1
   1646e:	e7e9      	b.n	16444 <uarte_nrfx_poll_out+0x18>
   16470:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   16472:	6870      	ldr	r0, [r6, #4]
   16474:	f007 f9f8 	bl	1d868 <is_tx_ready.isra.0>
   16478:	b970      	cbnz	r0, 16498 <uarte_nrfx_poll_out+0x6c>
   1647a:	2001      	movs	r0, #1
   1647c:	f007 fa94 	bl	1d9a8 <nrfx_busy_wait>
   16480:	3c01      	subs	r4, #1
   16482:	d1f6      	bne.n	16472 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   16484:	2100      	movs	r1, #0
   16486:	2021      	movs	r0, #33	; 0x21
   16488:	f003 f906 	bl	19698 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1648c:	e7f0      	b.n	16470 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1648e:	f384 8811 	msr	BASEPRI, r4
   16492:	f3bf 8f6f 	isb	sy
}
   16496:	e7f5      	b.n	16484 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   16498:	f04f 0320 	mov.w	r3, #32
   1649c:	f3ef 8411 	mrs	r4, BASEPRI
   164a0:	f383 8811 	msr	BASEPRI, r3
   164a4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   164a8:	6870      	ldr	r0, [r6, #4]
   164aa:	f007 f9dd 	bl	1d868 <is_tx_ready.isra.0>
   164ae:	2800      	cmp	r0, #0
   164b0:	d0ed      	beq.n	1648e <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   164b2:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   164b4:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   164b6:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   164ba:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   164be:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   164c2:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   164c6:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   164ca:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   164ce:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   164d2:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   164d4:	f384 8811 	msr	BASEPRI, r4
   164d8:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   164dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   164e0:	2000f9f6 	.word	0x2000f9f6

000164e4 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   164e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164e8:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   164ea:	f04f 0800 	mov.w	r8, #0
   164ee:	f04f 0914 	mov.w	r9, #20
   164f2:	2200      	movs	r2, #0
   164f4:	2101      	movs	r1, #1
   164f6:	2008      	movs	r0, #8
   164f8:	f7f7 fbac 	bl	dc54 <z_arm_irq_priority_set>
   164fc:	2008      	movs	r0, #8
   164fe:	f7f7 fb8b 	bl	dc18 <arch_irq_enable>
	return config->uarte_regs;
   16502:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   16504:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   16506:	681c      	ldr	r4, [r3, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16508:	2701      	movs	r7, #1
   1650a:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1650e:	a801      	add	r0, sp, #4
	data->dev = dev;
   16510:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   16512:	f8cd 9004 	str.w	r9, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16516:	f7ff fe8d 	bl	16234 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1651a:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1651c:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16520:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   16524:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16526:	a801      	add	r0, sp, #4
   16528:	f8cd 9004 	str.w	r9, [sp, #4]
   1652c:	f7ff fe82 	bl	16234 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16530:	f04f 0b16 	mov.w	fp, #22
   16534:	9b01      	ldr	r3, [sp, #4]
   16536:	3380      	adds	r3, #128	; 0x80
   16538:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1653c:	a801      	add	r0, sp, #4
   1653e:	f8cd b004 	str.w	fp, [sp, #4]
   16542:	f7ff fe77 	bl	16234 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16546:	9b01      	ldr	r3, [sp, #4]
   16548:	3380      	adds	r3, #128	; 0x80
   1654a:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   1654e:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   16552:	f04f 0915 	mov.w	r9, #21
   16556:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1655a:	a801      	add	r0, sp, #4
   1655c:	f8cd 9004 	str.w	r9, [sp, #4]
   16560:	f7ff fe68 	bl	16234 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16564:	9b01      	ldr	r3, [sp, #4]
   16566:	3380      	adds	r3, #128	; 0x80
   16568:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
   1656c:	f04f 0813 	mov.w	r8, #19
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16570:	a801      	add	r0, sp, #4
   16572:	f8cd 8004 	str.w	r8, [sp, #4]
   16576:	f7ff fe5d 	bl	16234 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1657a:	9b01      	ldr	r3, [sp, #4]
   1657c:	409f      	lsls	r7, r3
    p_reg->OUTSET = set_mask;
   1657e:	6087      	str	r7, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16580:	a801      	add	r0, sp, #4
   16582:	f8cd 8004 	str.w	r8, [sp, #4]
   16586:	f7ff fe55 	bl	16234 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1658a:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1658c:	68e9      	ldr	r1, [r5, #12]
   1658e:	3380      	adds	r3, #128	; 0x80
   16590:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
   16594:	3104      	adds	r1, #4
    p_reg->PSEL.RTS = pselrts;
   16596:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   1659a:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   1659c:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   165a0:	f7ff fe84 	bl	162ac <uarte_nrfx_configure>
	if (err) {
   165a4:	4607      	mov	r7, r0
   165a6:	b980      	cbnz	r0, 165ca <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   165a8:	686b      	ldr	r3, [r5, #4]
   165aa:	799b      	ldrb	r3, [r3, #6]
   165ac:	2b00      	cmp	r3, #0
   165ae:	d03a      	beq.n	16626 <uarte_0_init+0x142>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   165b0:	eb06 000b 	add.w	r0, r6, fp
   165b4:	f000 fddc 	bl	17170 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   165b8:	4b2b      	ldr	r3, [pc, #172]	; (16668 <uarte_0_init+0x184>)
   165ba:	4298      	cmp	r0, r3
   165bc:	d009      	beq.n	165d2 <uarte_0_init+0xee>
		LOG_ERR("Failed to allocate PPI Channel");
   165be:	2145      	movs	r1, #69	; 0x45
   165c0:	482a      	ldr	r0, [pc, #168]	; (1666c <uarte_0_init+0x188>)
   165c2:	f004 fa77 	bl	1aab4 <printk>
		return -EIO;
   165c6:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   165ca:	4638      	mov	r0, r7
   165cc:	b003      	add	sp, #12
   165ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   165d2:	f514 7990 	adds.w	r9, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   165d6:	f896 8016 	ldrb.w	r8, [r6, #22]
   165da:	d10a      	bne.n	165f2 <uarte_0_init+0x10e>
   165dc:	4924      	ldr	r1, [pc, #144]	; (16670 <uarte_0_init+0x18c>)
   165de:	4825      	ldr	r0, [pc, #148]	; (16674 <uarte_0_init+0x190>)
   165e0:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   165e4:	f004 fa66 	bl	1aab4 <printk>
   165e8:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   165ec:	4820      	ldr	r0, [pc, #128]	; (16670 <uarte_0_init+0x18c>)
   165ee:	f004 fd07 	bl	1b000 <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   165f2:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   165f6:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   165fa:	f8c9 8080 	str.w	r8, [r9, #128]	; 0x80
    NRFX_ASSERT(tep);
   165fe:	d10a      	bne.n	16616 <uarte_0_init+0x132>
   16600:	491b      	ldr	r1, [pc, #108]	; (16670 <uarte_0_init+0x18c>)
   16602:	481c      	ldr	r0, [pc, #112]	; (16674 <uarte_0_init+0x190>)
   16604:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   16608:	f004 fa54 	bl	1aab4 <printk>
   1660c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   16610:	4817      	ldr	r0, [pc, #92]	; (16670 <uarte_0_init+0x18c>)
   16612:	f004 fcf5 	bl	1b000 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   16616:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   16618:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
   1661c:	7db2      	ldrb	r2, [r6, #22]
   1661e:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   16620:	4a15      	ldr	r2, [pc, #84]	; (16678 <uarte_0_init+0x194>)
   16622:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   16626:	2308      	movs	r3, #8
   16628:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1662c:	2300      	movs	r3, #0
   1662e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   16632:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   16636:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1663a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1663e:	2301      	movs	r3, #1
   16640:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16644:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   16646:	686b      	ldr	r3, [r5, #4]
   16648:	799b      	ldrb	r3, [r3, #6]
   1664a:	b91b      	cbnz	r3, 16654 <uarte_0_init+0x170>
    p_reg->INTENSET = mask;
   1664c:	f44f 7380 	mov.w	r3, #256	; 0x100
   16650:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   16654:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   16656:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16658:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1665c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16660:	2301      	movs	r3, #1
   16662:	60a3      	str	r3, [r4, #8]
   16664:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   16666:	e7b0      	b.n	165ca <uarte_0_init+0xe6>
   16668:	0bad0000 	.word	0x0bad0000
   1666c:	000228e6 	.word	0x000228e6
   16670:	0002290a 	.word	0x0002290a
   16674:	0002003d 	.word	0x0002003d
   16678:	40017000 	.word	0x40017000

0001667c <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1667c:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   16680:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   16684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   16688:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   1668c:	4605      	mov	r5, r0
   1668e:	460e      	mov	r6, r1
   16690:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   16692:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   16696:	d14f      	bne.n	16738 <z_impl_gpio_pin_interrupt_configure+0xbc>
   16698:	492d      	ldr	r1, [pc, #180]	; (16750 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1669a:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   1669e:	482d      	ldr	r0, [pc, #180]	; (16754 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   166a0:	f004 fa08 	bl	1aab4 <printk>
   166a4:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   166a8:	4829      	ldr	r0, [pc, #164]	; (16750 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   166aa:	f004 fca9 	bl	1b000 <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   166ae:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   166b2:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   166b6:	d10a      	bne.n	166ce <z_impl_gpio_pin_interrupt_configure+0x52>
   166b8:	4925      	ldr	r1, [pc, #148]	; (16750 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   166ba:	4826      	ldr	r0, [pc, #152]	; (16754 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   166bc:	f240 12f1 	movw	r2, #497	; 0x1f1
   166c0:	f004 f9f8 	bl	1aab4 <printk>
   166c4:	f240 11f1 	movw	r1, #497	; 0x1f1
   166c8:	4821      	ldr	r0, [pc, #132]	; (16750 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   166ca:	f004 fc99 	bl	1b000 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   166ce:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   166d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   166d6:	d10a      	bne.n	166ee <z_impl_gpio_pin_interrupt_configure+0x72>
   166d8:	491d      	ldr	r1, [pc, #116]	; (16750 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   166da:	481e      	ldr	r0, [pc, #120]	; (16754 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   166dc:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   166e0:	f004 f9e8 	bl	1aab4 <printk>
   166e4:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   166e8:	4819      	ldr	r0, [pc, #100]	; (16750 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   166ea:	f004 fc89 	bl	1b000 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   166ee:	2701      	movs	r7, #1
   166f0:	f8da 3000 	ldr.w	r3, [sl]
   166f4:	40b7      	lsls	r7, r6
   166f6:	421f      	tst	r7, r3
   166f8:	d10a      	bne.n	16710 <z_impl_gpio_pin_interrupt_configure+0x94>
   166fa:	4915      	ldr	r1, [pc, #84]	; (16750 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   166fc:	4815      	ldr	r0, [pc, #84]	; (16754 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   166fe:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   16702:	f004 f9d7 	bl	1aab4 <printk>
   16706:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   1670a:	4811      	ldr	r0, [pc, #68]	; (16750 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1670c:	f004 fc78 	bl	1b000 <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   16710:	0423      	lsls	r3, r4, #16
   16712:	d505      	bpl.n	16720 <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   16714:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   16718:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1671a:	bf18      	it	ne
   1671c:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   16720:	f8d8 7018 	ldr.w	r7, [r8, #24]
   16724:	4631      	mov	r1, r6
   16726:	4628      	mov	r0, r5
   16728:	46bc      	mov	ip, r7
   1672a:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   1672e:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   16732:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   16736:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   16738:	2b00      	cmp	r3, #0
   1673a:	d1b8      	bne.n	166ae <z_impl_gpio_pin_interrupt_configure+0x32>
   1673c:	4904      	ldr	r1, [pc, #16]	; (16750 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1673e:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   16742:	4804      	ldr	r0, [pc, #16]	; (16754 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   16744:	f004 f9b6 	bl	1aab4 <printk>
   16748:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   1674c:	e7ac      	b.n	166a8 <z_impl_gpio_pin_interrupt_configure+0x2c>
   1674e:	bf00      	nop
   16750:	00022959 	.word	0x00022959
   16754:	0002003d 	.word	0x0002003d

00016758 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   16758:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1675a:	2501      	movs	r5, #1
   1675c:	6843      	ldr	r3, [r0, #4]
   1675e:	408d      	lsls	r5, r1
   16760:	681b      	ldr	r3, [r3, #0]
{
   16762:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16764:	421d      	tst	r5, r3
{
   16766:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16768:	d10a      	bne.n	16780 <gpio_pin_set_raw+0x28>
   1676a:	490b      	ldr	r1, [pc, #44]	; (16798 <gpio_pin_set_raw+0x40>)
   1676c:	480b      	ldr	r0, [pc, #44]	; (1679c <gpio_pin_set_raw+0x44>)
   1676e:	f44f 7270 	mov.w	r2, #960	; 0x3c0
   16772:	f004 f99f 	bl	1aab4 <printk>
   16776:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   1677a:	4807      	ldr	r0, [pc, #28]	; (16798 <gpio_pin_set_raw+0x40>)
   1677c:	f004 fc40 	bl	1b000 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   16780:	b136      	cbz	r6, 16790 <gpio_pin_set_raw+0x38>
	return api->port_set_bits_raw(port, pins);
   16782:	68a3      	ldr	r3, [r4, #8]
   16784:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   16786:	4629      	mov	r1, r5
   16788:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   1678a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   1678e:	4718      	bx	r3
   16790:	68a3      	ldr	r3, [r4, #8]
   16792:	691b      	ldr	r3, [r3, #16]
   16794:	e7f7      	b.n	16786 <gpio_pin_set_raw+0x2e>
   16796:	bf00      	nop
   16798:	00022959 	.word	0x00022959
   1679c:	0002003d 	.word	0x0002003d

000167a0 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   167a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   167a4:	4606      	mov	r6, r0
   167a6:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   167a8:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   167aa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 167f0 <dk_set_leds_state.part.0+0x50>
   167ae:	f8df 9044 	ldr.w	r9, [pc, #68]	; 167f4 <dk_set_leds_state.part.0+0x54>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   167b2:	fa26 f204 	lsr.w	r2, r6, r4
   167b6:	fa27 f304 	lsr.w	r3, r7, r4
   167ba:	4313      	orrs	r3, r2
   167bc:	07db      	lsls	r3, r3, #31
   167be:	d512      	bpl.n	167e6 <dk_set_leds_state.part.0+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
   167c0:	43d2      	mvns	r2, r2
   167c2:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   167c6:	7919      	ldrb	r1, [r3, #4]
   167c8:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   167cc:	f002 0201 	and.w	r2, r2, #1
   167d0:	f7ff ffc2 	bl	16758 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   167d4:	4605      	mov	r5, r0
   167d6:	b130      	cbz	r0, 167e6 <dk_set_leds_state.part.0+0x46>
				LOG_ERR("Cannot write LED gpio");
   167d8:	2145      	movs	r1, #69	; 0x45
   167da:	4807      	ldr	r0, [pc, #28]	; (167f8 <dk_set_leds_state.part.0+0x58>)
   167dc:	f004 f96a 	bl	1aab4 <printk>
			}
		}
	}

	return 0;
}
   167e0:	4628      	mov	r0, r5
   167e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   167e6:	3401      	adds	r4, #1
   167e8:	2c04      	cmp	r4, #4
   167ea:	d1e2      	bne.n	167b2 <dk_set_leds_state.part.0+0x12>
	return 0;
   167ec:	2500      	movs	r5, #0
   167ee:	e7f7      	b.n	167e0 <dk_set_leds_state.part.0+0x40>
   167f0:	0001f2d4 	.word	0x0001f2d4
   167f4:	2000b094 	.word	0x2000b094
   167f8:	00022983 	.word	0x00022983

000167fc <buttons_scan_fn>:
{
   167fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   16800:	2400      	movs	r4, #0
   16802:	4e6c      	ldr	r6, [pc, #432]	; (169b4 <buttons_scan_fn+0x1b8>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16804:	4625      	mov	r5, r4
{
   16806:	46b1      	mov	r9, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   16808:	4f6b      	ldr	r7, [pc, #428]	; (169b8 <buttons_scan_fn+0x1bc>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1680a:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 169bc <buttons_scan_fn+0x1c0>
   1680e:	f04f 0801 	mov.w	r8, #1
   16812:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   16816:	791b      	ldrb	r3, [r3, #4]
   16818:	f859 bb04 	ldr.w	fp, [r9], #4
   1681c:	fa08 f803 	lsl.w	r8, r8, r3
   16820:	f8db 3004 	ldr.w	r3, [fp, #4]
   16824:	681b      	ldr	r3, [r3, #0]
   16826:	ea18 0f03 	tst.w	r8, r3
   1682a:	d10a      	bne.n	16842 <buttons_scan_fn+0x46>
   1682c:	4651      	mov	r1, sl
   1682e:	4864      	ldr	r0, [pc, #400]	; (169c0 <buttons_scan_fn+0x1c4>)
   16830:	f44f 725e 	mov.w	r2, #888	; 0x378
   16834:	f004 f93e 	bl	1aab4 <printk>
   16838:	f44f 715e 	mov.w	r1, #888	; 0x378
   1683c:	4650      	mov	r0, sl
   1683e:	f004 fbdf 	bl	1b000 <assert_post_action>
	return api->port_get_raw(port, value);
   16842:	f8db 3008 	ldr.w	r3, [fp, #8]
   16846:	4658      	mov	r0, fp
   16848:	685b      	ldr	r3, [r3, #4]
   1684a:	a901      	add	r1, sp, #4
   1684c:	4798      	blx	r3
	if (ret == 0) {
   1684e:	2800      	cmp	r0, #0
   16850:	d16b      	bne.n	1692a <buttons_scan_fn+0x12e>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   16852:	9b01      	ldr	r3, [sp, #4]
   16854:	ea18 0f03 	tst.w	r8, r3
   16858:	d003      	beq.n	16862 <buttons_scan_fn+0x66>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1685a:	3501      	adds	r5, #1
   1685c:	2d04      	cmp	r5, #4
   1685e:	d1d6      	bne.n	1680e <buttons_scan_fn+0x12>
   16860:	e069      	b.n	16936 <buttons_scan_fn+0x13a>
			ret |= 1U << i;
   16862:	2301      	movs	r3, #1
   16864:	40ab      	lsls	r3, r5
   16866:	431c      	orrs	r4, r3
   16868:	e7f7      	b.n	1685a <buttons_scan_fn+0x5e>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1686a:	3d04      	subs	r5, #4
   1686c:	2d00      	cmp	r5, #0
   1686e:	f000 8087 	beq.w	16980 <buttons_scan_fn+0x184>
			handler->cb(button_state, has_changed);
   16872:	46aa      	mov	sl, r5
   16874:	f85a 3b04 	ldr.w	r3, [sl], #4
   16878:	4641      	mov	r1, r8
   1687a:	4620      	mov	r0, r4
   1687c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1687e:	f1ba 0f00 	cmp.w	sl, #0
   16882:	d07d      	beq.n	16980 <buttons_scan_fn+0x184>
	return node->next;
   16884:	686d      	ldr	r5, [r5, #4]
   16886:	e078      	b.n	1697a <buttons_scan_fn+0x17e>
		initial_run = false;
   16888:	2200      	movs	r2, #0
   1688a:	701a      	strb	r2, [r3, #0]
   1688c:	e07b      	b.n	16986 <buttons_scan_fn+0x18a>
	__asm__ volatile(
   1688e:	f04f 0320 	mov.w	r3, #32
   16892:	f3ef 8811 	mrs	r8, BASEPRI
   16896:	f383 8811 	msr	BASEPRI, r3
   1689a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1689e:	4849      	ldr	r0, [pc, #292]	; (169c4 <buttons_scan_fn+0x1c8>)
   168a0:	f003 f91c 	bl	19adc <z_spin_lock_valid>
   168a4:	b940      	cbnz	r0, 168b8 <buttons_scan_fn+0xbc>
   168a6:	4948      	ldr	r1, [pc, #288]	; (169c8 <buttons_scan_fn+0x1cc>)
   168a8:	4845      	ldr	r0, [pc, #276]	; (169c0 <buttons_scan_fn+0x1c4>)
   168aa:	227c      	movs	r2, #124	; 0x7c
   168ac:	f004 f902 	bl	1aab4 <printk>
   168b0:	217c      	movs	r1, #124	; 0x7c
   168b2:	4845      	ldr	r0, [pc, #276]	; (169c8 <buttons_scan_fn+0x1cc>)
   168b4:	f004 fba4 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   168b8:	4842      	ldr	r0, [pc, #264]	; (169c4 <buttons_scan_fn+0x1c8>)
   168ba:	f003 f92b 	bl	19b14 <z_spin_lock_set_owner>
		switch (state) {
   168be:	4b43      	ldr	r3, [pc, #268]	; (169cc <buttons_scan_fn+0x1d0>)
   168c0:	781a      	ldrb	r2, [r3, #0]
   168c2:	2a01      	cmp	r2, #1
   168c4:	d126      	bne.n	16914 <buttons_scan_fn+0x118>
			state = STATE_WAITING;
   168c6:	2200      	movs	r2, #0
   168c8:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   168ca:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   168ce:	f856 0b04 	ldr.w	r0, [r6], #4
   168d2:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   168d4:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   168d8:	f7ff fed0 	bl	1667c <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   168dc:	3401      	adds	r4, #1
   168de:	2c04      	cmp	r4, #4
   168e0:	4605      	mov	r5, r0
   168e2:	d001      	beq.n	168e8 <buttons_scan_fn+0xec>
   168e4:	2800      	cmp	r0, #0
   168e6:	d0f0      	beq.n	168ca <buttons_scan_fn+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   168e8:	4836      	ldr	r0, [pc, #216]	; (169c4 <buttons_scan_fn+0x1c8>)
   168ea:	f003 f905 	bl	19af8 <z_spin_unlock_valid>
   168ee:	b940      	cbnz	r0, 16902 <buttons_scan_fn+0x106>
   168f0:	4935      	ldr	r1, [pc, #212]	; (169c8 <buttons_scan_fn+0x1cc>)
   168f2:	4833      	ldr	r0, [pc, #204]	; (169c0 <buttons_scan_fn+0x1c4>)
   168f4:	22a7      	movs	r2, #167	; 0xa7
   168f6:	f004 f8dd 	bl	1aab4 <printk>
   168fa:	21a7      	movs	r1, #167	; 0xa7
   168fc:	4832      	ldr	r0, [pc, #200]	; (169c8 <buttons_scan_fn+0x1cc>)
   168fe:	f004 fb7f 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   16902:	f388 8811 	msr	BASEPRI, r8
   16906:	f3bf 8f6f 	isb	sy
		if (err) {
   1690a:	2d00      	cmp	r5, #0
   1690c:	d04f      	beq.n	169ae <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot enable callbacks");
   1690e:	2145      	movs	r1, #69	; 0x45
   16910:	482f      	ldr	r0, [pc, #188]	; (169d0 <buttons_scan_fn+0x1d4>)
   16912:	e047      	b.n	169a4 <buttons_scan_fn+0x1a8>
			__ASSERT_NO_MSG(false);
   16914:	22b4      	movs	r2, #180	; 0xb4
   16916:	492f      	ldr	r1, [pc, #188]	; (169d4 <buttons_scan_fn+0x1d8>)
   16918:	4829      	ldr	r0, [pc, #164]	; (169c0 <buttons_scan_fn+0x1c4>)
   1691a:	f004 f8cb 	bl	1aab4 <printk>
   1691e:	21b4      	movs	r1, #180	; 0xb4
   16920:	482c      	ldr	r0, [pc, #176]	; (169d4 <buttons_scan_fn+0x1d8>)
   16922:	f004 fb6d 	bl	1b000 <assert_post_action>
		int err = 0;
   16926:	2500      	movs	r5, #0
			break;
   16928:	e7de      	b.n	168e8 <buttons_scan_fn+0xec>
		if (val < 0) {
   1692a:	da96      	bge.n	1685a <buttons_scan_fn+0x5e>
			LOG_ERR("Cannot read gpio pin");
   1692c:	2145      	movs	r1, #69	; 0x45
   1692e:	482a      	ldr	r0, [pc, #168]	; (169d8 <buttons_scan_fn+0x1dc>)
   16930:	f004 f8c0 	bl	1aab4 <printk>
			return 0;
   16934:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16936:	4b29      	ldr	r3, [pc, #164]	; (169dc <buttons_scan_fn+0x1e0>)
   16938:	e8d3 2fef 	ldaex	r2, [r3]
   1693c:	e8c3 4fe1 	stlex	r1, r4, [r3]
   16940:	2900      	cmp	r1, #0
   16942:	d1f9      	bne.n	16938 <buttons_scan_fn+0x13c>
	if (!initial_run) {
   16944:	4b26      	ldr	r3, [pc, #152]	; (169e0 <buttons_scan_fn+0x1e4>)
   16946:	f8df 909c 	ldr.w	r9, [pc, #156]	; 169e4 <buttons_scan_fn+0x1e8>
   1694a:	781a      	ldrb	r2, [r3, #0]
   1694c:	2a00      	cmp	r2, #0
   1694e:	d19b      	bne.n	16888 <buttons_scan_fn+0x8c>
		if (button_scan != last_button_scan) {
   16950:	f8d9 3000 	ldr.w	r3, [r9]
   16954:	42a3      	cmp	r3, r4
   16956:	d016      	beq.n	16986 <buttons_scan_fn+0x18a>
			uint32_t has_changed = (button_scan ^ last_button_scan);
   16958:	ea83 0804 	eor.w	r8, r3, r4
	if (button_handler_cb != NULL) {
   1695c:	4b22      	ldr	r3, [pc, #136]	; (169e8 <buttons_scan_fn+0x1ec>)
   1695e:	681b      	ldr	r3, [r3, #0]
   16960:	b113      	cbz	r3, 16968 <buttons_scan_fn+0x16c>
		button_handler_cb(button_state, has_changed);
   16962:	4641      	mov	r1, r8
   16964:	4620      	mov	r0, r4
   16966:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   16968:	f04f 33ff 	mov.w	r3, #4294967295
   1696c:	f04f 32ff 	mov.w	r2, #4294967295
   16970:	481e      	ldr	r0, [pc, #120]	; (169ec <buttons_scan_fn+0x1f0>)
   16972:	f001 fc13 	bl	1819c <z_impl_k_mutex_lock>
	return list->head;
   16976:	4b1e      	ldr	r3, [pc, #120]	; (169f0 <buttons_scan_fn+0x1f4>)
   16978:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1697a:	2d00      	cmp	r5, #0
   1697c:	f47f af75 	bne.w	1686a <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   16980:	481a      	ldr	r0, [pc, #104]	; (169ec <buttons_scan_fn+0x1f0>)
   16982:	f001 fcd7 	bl	18334 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   16986:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   1698a:	2c00      	cmp	r4, #0
   1698c:	f43f af7f 	beq.w	1688e <buttons_scan_fn+0x92>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16990:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16994:	2300      	movs	r3, #0
   16996:	4917      	ldr	r1, [pc, #92]	; (169f4 <buttons_scan_fn+0x1f8>)
   16998:	4817      	ldr	r0, [pc, #92]	; (169f8 <buttons_scan_fn+0x1fc>)
   1699a:	f003 f915 	bl	19bc8 <k_delayed_work_submit_to_queue>
		if (err) {
   1699e:	b130      	cbz	r0, 169ae <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot add work to workqueue");
   169a0:	2145      	movs	r1, #69	; 0x45
   169a2:	4816      	ldr	r0, [pc, #88]	; (169fc <buttons_scan_fn+0x200>)
}
   169a4:	b003      	add	sp, #12
   169a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot enable callbacks");
   169aa:	f004 b883 	b.w	1aab4 <printk>
}
   169ae:	b003      	add	sp, #12
   169b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169b4:	2000b050 	.word	0x2000b050
   169b8:	0001f2b4 	.word	0x0001f2b4
   169bc:	00022959 	.word	0x00022959
   169c0:	0002003d 	.word	0x0002003d
   169c4:	2000b0a4 	.word	0x2000b0a4
   169c8:	00020077 	.word	0x00020077
   169cc:	2000f9f5 	.word	0x2000f9f5
   169d0:	00022a18 	.word	0x00022a18
   169d4:	000229da 	.word	0x000229da
   169d8:	0002299e 	.word	0x0002299e
   169dc:	2000b0a8 	.word	0x2000b0a8
   169e0:	2000856b 	.word	0x2000856b
   169e4:	2000b08c 	.word	0x2000b08c
   169e8:	2000b060 	.word	0x2000b060
   169ec:	2000b064 	.word	0x2000b064
   169f0:	2000b078 	.word	0x2000b078
   169f4:	2000a3f0 	.word	0x2000a3f0
   169f8:	2000a540 	.word	0x2000a540
   169fc:	000229b8 	.word	0x000229b8

00016a00 <button_pressed>:
{
   16a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   16a02:	f04f 0320 	mov.w	r3, #32
   16a06:	f3ef 8611 	mrs	r6, BASEPRI
   16a0a:	f383 8811 	msr	BASEPRI, r3
   16a0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16a12:	4827      	ldr	r0, [pc, #156]	; (16ab0 <button_pressed+0xb0>)
   16a14:	f003 f862 	bl	19adc <z_spin_lock_valid>
   16a18:	b940      	cbnz	r0, 16a2c <button_pressed+0x2c>
   16a1a:	4926      	ldr	r1, [pc, #152]	; (16ab4 <button_pressed+0xb4>)
   16a1c:	4826      	ldr	r0, [pc, #152]	; (16ab8 <button_pressed+0xb8>)
   16a1e:	227c      	movs	r2, #124	; 0x7c
   16a20:	f004 f848 	bl	1aab4 <printk>
   16a24:	217c      	movs	r1, #124	; 0x7c
   16a26:	4823      	ldr	r0, [pc, #140]	; (16ab4 <button_pressed+0xb4>)
   16a28:	f004 faea 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   16a2c:	4820      	ldr	r0, [pc, #128]	; (16ab0 <button_pressed+0xb0>)
   16a2e:	f003 f871 	bl	19b14 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   16a32:	2400      	movs	r4, #0
   16a34:	4d21      	ldr	r5, [pc, #132]	; (16abc <button_pressed+0xbc>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   16a36:	4f22      	ldr	r7, [pc, #136]	; (16ac0 <button_pressed+0xc0>)
   16a38:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   16a3c:	f855 0b04 	ldr.w	r0, [r5], #4
   16a40:	7919      	ldrb	r1, [r3, #4]
   16a42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   16a46:	3401      	adds	r4, #1
   16a48:	f7ff fe18 	bl	1667c <z_impl_gpio_pin_interrupt_configure>
   16a4c:	2c04      	cmp	r4, #4
   16a4e:	d006      	beq.n	16a5e <button_pressed+0x5e>
   16a50:	2800      	cmp	r0, #0
   16a52:	d0f1      	beq.n	16a38 <button_pressed+0x38>
		LOG_ERR("Cannot disable callbacks");
   16a54:	2145      	movs	r1, #69	; 0x45
   16a56:	481b      	ldr	r0, [pc, #108]	; (16ac4 <button_pressed+0xc4>)
   16a58:	f004 f82c 	bl	1aab4 <printk>
   16a5c:	e001      	b.n	16a62 <button_pressed+0x62>
	if (err) {
   16a5e:	2800      	cmp	r0, #0
   16a60:	d1f8      	bne.n	16a54 <button_pressed+0x54>
	switch (state) {
   16a62:	4b19      	ldr	r3, [pc, #100]	; (16ac8 <button_pressed+0xc8>)
   16a64:	781a      	ldrb	r2, [r3, #0]
   16a66:	b9ca      	cbnz	r2, 16a9c <button_pressed+0x9c>
		state = STATE_SCANNING;
   16a68:	2201      	movs	r2, #1
   16a6a:	4918      	ldr	r1, [pc, #96]	; (16acc <button_pressed+0xcc>)
   16a6c:	701a      	strb	r2, [r3, #0]
   16a6e:	4818      	ldr	r0, [pc, #96]	; (16ad0 <button_pressed+0xd0>)
   16a70:	2221      	movs	r2, #33	; 0x21
   16a72:	2300      	movs	r3, #0
   16a74:	f003 f8a8 	bl	19bc8 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16a78:	480d      	ldr	r0, [pc, #52]	; (16ab0 <button_pressed+0xb0>)
   16a7a:	f003 f83d 	bl	19af8 <z_spin_unlock_valid>
   16a7e:	b940      	cbnz	r0, 16a92 <button_pressed+0x92>
   16a80:	490c      	ldr	r1, [pc, #48]	; (16ab4 <button_pressed+0xb4>)
   16a82:	480d      	ldr	r0, [pc, #52]	; (16ab8 <button_pressed+0xb8>)
   16a84:	22a7      	movs	r2, #167	; 0xa7
   16a86:	f004 f815 	bl	1aab4 <printk>
   16a8a:	21a7      	movs	r1, #167	; 0xa7
   16a8c:	4809      	ldr	r0, [pc, #36]	; (16ab4 <button_pressed+0xb4>)
   16a8e:	f004 fab7 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   16a92:	f386 8811 	msr	BASEPRI, r6
   16a96:	f3bf 8f6f 	isb	sy
}
   16a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   16a9c:	22eb      	movs	r2, #235	; 0xeb
   16a9e:	490d      	ldr	r1, [pc, #52]	; (16ad4 <button_pressed+0xd4>)
   16aa0:	4805      	ldr	r0, [pc, #20]	; (16ab8 <button_pressed+0xb8>)
   16aa2:	f004 f807 	bl	1aab4 <printk>
   16aa6:	21eb      	movs	r1, #235	; 0xeb
   16aa8:	480a      	ldr	r0, [pc, #40]	; (16ad4 <button_pressed+0xd4>)
   16aaa:	f004 faa9 	bl	1b000 <assert_post_action>
		break;
   16aae:	e7e3      	b.n	16a78 <button_pressed+0x78>
   16ab0:	2000b0a4 	.word	0x2000b0a4
   16ab4:	00020077 	.word	0x00020077
   16ab8:	0002003d 	.word	0x0002003d
   16abc:	2000b050 	.word	0x2000b050
   16ac0:	0001f2b4 	.word	0x0001f2b4
   16ac4:	00022a35 	.word	0x00022a35
   16ac8:	2000f9f5 	.word	0x2000f9f5
   16acc:	2000a3f0 	.word	0x2000a3f0
   16ad0:	2000a540 	.word	0x2000a540
   16ad4:	000229da 	.word	0x000229da

00016ad8 <dk_leds_init>:
{
   16ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16adc:	2600      	movs	r6, #0
   16ade:	4d23      	ldr	r5, [pc, #140]	; (16b6c <dk_leds_init+0x94>)
   16ae0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 16b70 <dk_leds_init+0x98>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16ae4:	f8df a08c 	ldr.w	sl, [pc, #140]	; 16b74 <dk_leds_init+0x9c>
		led_devs[i] = device_get_binding(led_pins[i].port);
   16ae8:	6828      	ldr	r0, [r5, #0]
   16aea:	f001 f835 	bl	17b58 <z_impl_device_get_binding>
   16aee:	4604      	mov	r4, r0
   16af0:	f849 0b04 	str.w	r0, [r9], #4
		if (!led_devs[i]) {
   16af4:	b940      	cbnz	r0, 16b08 <dk_leds_init+0x30>
			LOG_ERR("Cannot bind gpio device");
   16af6:	2145      	movs	r1, #69	; 0x45
   16af8:	481f      	ldr	r0, [pc, #124]	; (16b78 <dk_leds_init+0xa0>)
   16afa:	f003 ffdb 	bl	1aab4 <printk>
			return -ENODEV;
   16afe:	f06f 0412 	mvn.w	r4, #18
}
   16b02:	4620      	mov	r0, r4
   16b04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b08:	2301      	movs	r3, #1
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   16b0a:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   16b0e:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16b10:	fa03 f80b 	lsl.w	r8, r3, fp
   16b14:	6843      	ldr	r3, [r0, #4]
   16b16:	681b      	ldr	r3, [r3, #0]
   16b18:	ea18 0f03 	tst.w	r8, r3
   16b1c:	d10a      	bne.n	16b34 <dk_leds_init+0x5c>
   16b1e:	4651      	mov	r1, sl
   16b20:	4816      	ldr	r0, [pc, #88]	; (16b7c <dk_leds_init+0xa4>)
   16b22:	f44f 7211 	mov.w	r2, #580	; 0x244
   16b26:	f003 ffc5 	bl	1aab4 <printk>
   16b2a:	f44f 7111 	mov.w	r1, #580	; 0x244
   16b2e:	4650      	mov	r0, sl
   16b30:	f004 fa66 	bl	1b000 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   16b34:	68a3      	ldr	r3, [r4, #8]
   16b36:	4620      	mov	r0, r4
   16b38:	f44f 7200 	mov.w	r2, #512	; 0x200
   16b3c:	4659      	mov	r1, fp
   16b3e:	681b      	ldr	r3, [r3, #0]
   16b40:	4798      	blx	r3
	if (ret != 0) {
   16b42:	4604      	mov	r4, r0
   16b44:	b968      	cbnz	r0, 16b62 <dk_leds_init+0x8a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   16b46:	683b      	ldr	r3, [r7, #0]
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16b48:	3601      	adds	r6, #1
   16b4a:	ea23 0308 	bic.w	r3, r3, r8
   16b4e:	2e04      	cmp	r6, #4
   16b50:	603b      	str	r3, [r7, #0]
   16b52:	f105 0508 	add.w	r5, r5, #8
   16b56:	d1c7      	bne.n	16ae8 <dk_leds_init+0x10>
}
   16b58:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b5c:	210f      	movs	r1, #15
   16b5e:	f7ff be1f 	b.w	167a0 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   16b62:	2145      	movs	r1, #69	; 0x45
   16b64:	4806      	ldr	r0, [pc, #24]	; (16b80 <dk_leds_init+0xa8>)
   16b66:	f003 ffa5 	bl	1aab4 <printk>
			return err;
   16b6a:	e7ca      	b.n	16b02 <dk_leds_init+0x2a>
   16b6c:	0001f2d4 	.word	0x0001f2d4
   16b70:	2000b094 	.word	0x2000b094
   16b74:	00022959 	.word	0x00022959
   16b78:	00022a53 	.word	0x00022a53
   16b7c:	0002003d 	.word	0x0002003d
   16b80:	00022a70 	.word	0x00022a70

00016b84 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16b84:	4b05      	ldr	r3, [pc, #20]	; (16b9c <dk_read_buttons+0x18>)
   16b86:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   16b8a:	b100      	cbz	r0, 16b8e <dk_read_buttons+0xa>
		*button_state = current_state;
   16b8c:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   16b8e:	4804      	ldr	r0, [pc, #16]	; (16ba0 <dk_read_buttons+0x1c>)
   16b90:	b111      	cbz	r1, 16b98 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   16b92:	6802      	ldr	r2, [r0, #0]
   16b94:	405a      	eors	r2, r3
   16b96:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   16b98:	6003      	str	r3, [r0, #0]
}
   16b9a:	4770      	bx	lr
   16b9c:	2000b0a8 	.word	0x2000b0a8
   16ba0:	2000b090 	.word	0x2000b090

00016ba4 <dk_buttons_init>:
	button_handler_cb = button_handler;
   16ba4:	4b4f      	ldr	r3, [pc, #316]	; (16ce4 <dk_buttons_init+0x140>)
{
   16ba6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   16baa:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   16bac:	4e4e      	ldr	r6, [pc, #312]	; (16ce8 <dk_buttons_init+0x144>)
   16bae:	484f      	ldr	r0, [pc, #316]	; (16cec <dk_buttons_init+0x148>)
   16bb0:	f007 fb1d 	bl	1e1ee <z_impl_k_mutex_init>
   16bb4:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16bb6:	2700      	movs	r7, #0
   16bb8:	4d4d      	ldr	r5, [pc, #308]	; (16cf0 <dk_buttons_init+0x14c>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16bba:	f8df a138 	ldr.w	sl, [pc, #312]	; 16cf4 <dk_buttons_init+0x150>
		button_devs[i] = device_get_binding(button_pins[i].port);
   16bbe:	6828      	ldr	r0, [r5, #0]
   16bc0:	f000 ffca 	bl	17b58 <z_impl_device_get_binding>
   16bc4:	4604      	mov	r4, r0
   16bc6:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   16bca:	b948      	cbnz	r0, 16be0 <dk_buttons_init+0x3c>
			LOG_ERR("Cannot bind gpio device");
   16bcc:	2145      	movs	r1, #69	; 0x45
   16bce:	484a      	ldr	r0, [pc, #296]	; (16cf8 <dk_buttons_init+0x154>)
   16bd0:	f003 ff70 	bl	1aab4 <printk>
			return -ENODEV;
   16bd4:	f06f 0412 	mvn.w	r4, #18
}
   16bd8:	4620      	mov	r0, r4
   16bda:	b003      	add	sp, #12
   16bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16be0:	2301      	movs	r3, #1
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   16be2:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   16be6:	f8d0 800c 	ldr.w	r8, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16bea:	fa03 f30b 	lsl.w	r3, r3, fp
   16bee:	9301      	str	r3, [sp, #4]
   16bf0:	6843      	ldr	r3, [r0, #4]
   16bf2:	9a01      	ldr	r2, [sp, #4]
   16bf4:	681b      	ldr	r3, [r3, #0]
   16bf6:	421a      	tst	r2, r3
   16bf8:	d10a      	bne.n	16c10 <dk_buttons_init+0x6c>
   16bfa:	4651      	mov	r1, sl
   16bfc:	483f      	ldr	r0, [pc, #252]	; (16cfc <dk_buttons_init+0x158>)
   16bfe:	f44f 7211 	mov.w	r2, #580	; 0x244
   16c02:	f003 ff57 	bl	1aab4 <printk>
   16c06:	f44f 7111 	mov.w	r1, #580	; 0x244
   16c0a:	4650      	mov	r0, sl
   16c0c:	f004 f9f8 	bl	1b000 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   16c10:	68a3      	ldr	r3, [r4, #8]
   16c12:	4620      	mov	r0, r4
   16c14:	f44f 7288 	mov.w	r2, #272	; 0x110
   16c18:	4659      	mov	r1, fp
   16c1a:	681b      	ldr	r3, [r3, #0]
   16c1c:	4798      	blx	r3
	if (ret != 0) {
   16c1e:	4604      	mov	r4, r0
   16c20:	bb08      	cbnz	r0, 16c66 <dk_buttons_init+0xc2>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   16c22:	f8d8 3000 	ldr.w	r3, [r8]
   16c26:	9a01      	ldr	r2, [sp, #4]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16c28:	3701      	adds	r7, #1
   16c2a:	ea23 0302 	bic.w	r3, r3, r2
   16c2e:	2f04      	cmp	r7, #4
   16c30:	f8c8 3000 	str.w	r3, [r8]
   16c34:	f105 0508 	add.w	r5, r5, #8
   16c38:	d1c1      	bne.n	16bbe <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16c3a:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   16c3c:	4680      	mov	r8, r0
		pin_mask |= BIT(button_pins[i].number);
   16c3e:	f04f 0a01 	mov.w	sl, #1
   16c42:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 16ce8 <dk_buttons_init+0x144>
		err = gpio_pin_interrupt_configure(button_devs[i],
   16c46:	4b2a      	ldr	r3, [pc, #168]	; (16cf0 <dk_buttons_init+0x14c>)
   16c48:	f859 0b04 	ldr.w	r0, [r9], #4
   16c4c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   16c50:	791f      	ldrb	r7, [r3, #4]
   16c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   16c56:	4639      	mov	r1, r7
   16c58:	f7ff fd10 	bl	1667c <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   16c5c:	4604      	mov	r4, r0
   16c5e:	b138      	cbz	r0, 16c70 <dk_buttons_init+0xcc>
			LOG_ERR("Cannot disable callbacks()");
   16c60:	2145      	movs	r1, #69	; 0x45
   16c62:	4827      	ldr	r0, [pc, #156]	; (16d00 <dk_buttons_init+0x15c>)
   16c64:	e001      	b.n	16c6a <dk_buttons_init+0xc6>
			LOG_ERR("Cannot configure button gpio");
   16c66:	2145      	movs	r1, #69	; 0x45
   16c68:	4826      	ldr	r0, [pc, #152]	; (16d04 <dk_buttons_init+0x160>)
		LOG_ERR("Cannot add work to workqueue");
   16c6a:	f003 ff23 	bl	1aab4 <printk>
		return err;
   16c6e:	e7b3      	b.n	16bd8 <dk_buttons_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16c70:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   16c72:	fa0a f707 	lsl.w	r7, sl, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16c76:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   16c78:	ea48 0807 	orr.w	r8, r8, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16c7c:	d1e3      	bne.n	16c46 <dk_buttons_init+0xa2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16c7e:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   16c80:	4f21      	ldr	r7, [pc, #132]	; (16d08 <dk_buttons_init+0x164>)
   16c82:	4b22      	ldr	r3, [pc, #136]	; (16d0c <dk_buttons_init+0x168>)
	callback->pin_mask = pin_mask;
   16c84:	e9c7 3801 	strd	r3, r8, [r7, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   16c88:	f856 0b04 	ldr.w	r0, [r6], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   16c8c:	6883      	ldr	r3, [r0, #8]
   16c8e:	69db      	ldr	r3, [r3, #28]
   16c90:	b13b      	cbz	r3, 16ca2 <dk_buttons_init+0xfe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   16c92:	2201      	movs	r2, #1
   16c94:	4639      	mov	r1, r7
   16c96:	4798      	blx	r3
		if (err) {
   16c98:	4604      	mov	r4, r0
   16c9a:	b128      	cbz	r0, 16ca8 <dk_buttons_init+0x104>
			LOG_ERR("Cannot add callback");
   16c9c:	2145      	movs	r1, #69	; 0x45
   16c9e:	481c      	ldr	r0, [pc, #112]	; (16d10 <dk_buttons_init+0x16c>)
   16ca0:	e7e3      	b.n	16c6a <dk_buttons_init+0xc6>
		return -ENOTSUP;
   16ca2:	f06f 0422 	mvn.w	r4, #34	; 0x22
   16ca6:	e7f9      	b.n	16c9c <dk_buttons_init+0xf8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16ca8:	3501      	adds	r5, #1
   16caa:	2d04      	cmp	r5, #4
   16cac:	d1ec      	bne.n	16c88 <dk_buttons_init+0xe4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   16cae:	4d19      	ldr	r5, [pc, #100]	; (16d14 <dk_buttons_init+0x170>)
   16cb0:	4601      	mov	r1, r0
   16cb2:	2230      	movs	r2, #48	; 0x30
   16cb4:	4628      	mov	r0, r5
   16cb6:	f005 f96c 	bl	1bf92 <memset>
	state = STATE_SCANNING;
   16cba:	2201      	movs	r2, #1
   16cbc:	4b16      	ldr	r3, [pc, #88]	; (16d18 <dk_buttons_init+0x174>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16cbe:	4629      	mov	r1, r5
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   16cc0:	606b      	str	r3, [r5, #4]
   16cc2:	4b16      	ldr	r3, [pc, #88]	; (16d1c <dk_buttons_init+0x178>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16cc4:	4816      	ldr	r0, [pc, #88]	; (16d20 <dk_buttons_init+0x17c>)
   16cc6:	701a      	strb	r2, [r3, #0]
   16cc8:	2200      	movs	r2, #0
   16cca:	2300      	movs	r3, #0
   16ccc:	f002 ff7c 	bl	19bc8 <k_delayed_work_submit_to_queue>
	if (err) {
   16cd0:	4604      	mov	r4, r0
   16cd2:	b110      	cbz	r0, 16cda <dk_buttons_init+0x136>
		LOG_ERR("Cannot add work to workqueue");
   16cd4:	2145      	movs	r1, #69	; 0x45
   16cd6:	4813      	ldr	r0, [pc, #76]	; (16d24 <dk_buttons_init+0x180>)
   16cd8:	e7c7      	b.n	16c6a <dk_buttons_init+0xc6>
	dk_read_buttons(NULL, NULL);
   16cda:	4601      	mov	r1, r0
   16cdc:	f7ff ff52 	bl	16b84 <dk_read_buttons>
	return 0;
   16ce0:	e77a      	b.n	16bd8 <dk_buttons_init+0x34>
   16ce2:	bf00      	nop
   16ce4:	2000b060 	.word	0x2000b060
   16ce8:	2000b050 	.word	0x2000b050
   16cec:	2000b064 	.word	0x2000b064
   16cf0:	0001f2b4 	.word	0x0001f2b4
   16cf4:	00022959 	.word	0x00022959
   16cf8:	00022a53 	.word	0x00022a53
   16cfc:	0002003d 	.word	0x0002003d
   16d00:	00022ab1 	.word	0x00022ab1
   16d04:	00022a8f 	.word	0x00022a8f
   16d08:	2000b080 	.word	0x2000b080
   16d0c:	00016a01 	.word	0x00016a01
   16d10:	00022ad1 	.word	0x00022ad1
   16d14:	2000a3f0 	.word	0x2000a3f0
   16d18:	000167fd 	.word	0x000167fd
   16d1c:	2000f9f5 	.word	0x2000f9f5
   16d20:	2000a540 	.word	0x2000a540
   16d24:	000229b8 	.word	0x000229b8

00016d28 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   16d28:	2804      	cmp	r0, #4
{
   16d2a:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   16d2c:	d907      	bls.n	16d3e <dk_set_led+0x16>
		LOG_ERR("LED index out of the range");
   16d2e:	2145      	movs	r1, #69	; 0x45
   16d30:	480d      	ldr	r0, [pc, #52]	; (16d68 <dk_set_led+0x40>)
   16d32:	f003 febf 	bl	1aab4 <printk>
   16d36:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   16d3a:	4620      	mov	r0, r4
   16d3c:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   16d3e:	fab1 f281 	clz	r2, r1
   16d42:	4b0a      	ldr	r3, [pc, #40]	; (16d6c <dk_set_led+0x44>)
   16d44:	0952      	lsrs	r2, r2, #5
   16d46:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   16d4a:	7919      	ldrb	r1, [r3, #4]
   16d4c:	4b08      	ldr	r3, [pc, #32]	; (16d70 <dk_set_led+0x48>)
   16d4e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   16d52:	f7ff fd01 	bl	16758 <gpio_pin_set_raw>
	if (err) {
   16d56:	4604      	mov	r4, r0
   16d58:	2800      	cmp	r0, #0
   16d5a:	d0ee      	beq.n	16d3a <dk_set_led+0x12>
		LOG_ERR("Cannot write LED gpio");
   16d5c:	2145      	movs	r1, #69	; 0x45
   16d5e:	4805      	ldr	r0, [pc, #20]	; (16d74 <dk_set_led+0x4c>)
   16d60:	f003 fea8 	bl	1aab4 <printk>
   16d64:	e7e9      	b.n	16d3a <dk_set_led+0x12>
   16d66:	bf00      	nop
   16d68:	00022aea 	.word	0x00022aea
   16d6c:	0001f2d4 	.word	0x0001f2d4
   16d70:	2000b094 	.word	0x2000b094
   16d74:	00022983 	.word	0x00022983

00016d78 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   16d78:	4803      	ldr	r0, [pc, #12]	; (16d88 <k_sys_fatal_error_handler+0x10>)
   16d7a:	2145      	movs	r1, #69	; 0x45
{
   16d7c:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   16d7e:	f003 fe99 	bl	1aab4 <printk>
	sys_arch_reboot(0);
   16d82:	2000      	movs	r0, #0
   16d84:	f7f7 fa64 	bl	e250 <sys_arch_reboot>

	CODE_UNREACHABLE;
   16d88:	00022b1e 	.word	0x00022b1e

00016d8c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   16d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16d90:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   16d92:	4c21      	ldr	r4, [pc, #132]	; (16e18 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   16d94:	4e21      	ldr	r6, [pc, #132]	; (16e1c <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16d96:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   16d9a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 16e20 <check_ext_api_requests+0x94>
{
   16d9e:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16da0:	45a8      	cmp	r8, r5
   16da2:	d803      	bhi.n	16dac <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   16da4:	2000      	movs	r0, #0
   16da6:	b005      	add	sp, #20
   16da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   16dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16dae:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   16db2:	681f      	ldr	r7, [r3, #0]
   16db4:	ab01      	add	r3, sp, #4
   16db6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   16dba:	220c      	movs	r2, #12
   16dbc:	4619      	mov	r1, r3
   16dbe:	4638      	mov	r0, r7
   16dc0:	f005 f8ab 	bl	1bf1a <memcmp>
   16dc4:	b990      	cbnz	r0, 16dec <check_ext_api_requests+0x60>
   16dc6:	b18f      	cbz	r7, 16dec <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   16dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   16dca:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   16dcc:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   16dce:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   16dd0:	4291      	cmp	r1, r2
   16dd2:	d10b      	bne.n	16dec <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   16dd4:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   16dd6:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   16dd8:	4291      	cmp	r1, r2
   16dda:	d807      	bhi.n	16dec <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   16ddc:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   16dde:	4291      	cmp	r1, r2
   16de0:	d904      	bls.n	16dec <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   16de2:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   16de4:	695b      	ldr	r3, [r3, #20]
   16de6:	ea32 0303 	bics.w	r3, r2, r3
   16dea:	d00a      	beq.n	16e02 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   16dec:	6a27      	ldr	r7, [r4, #32]
   16dee:	b167      	cbz	r7, 16e0a <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   16df0:	480c      	ldr	r0, [pc, #48]	; (16e24 <check_ext_api_requests+0x98>)
   16df2:	f003 fe5f 	bl	1aab4 <printk>
			k_panic();
   16df6:	4040      	eors	r0, r0
   16df8:	f380 8811 	msr	BASEPRI, r0
   16dfc:	f04f 0004 	mov.w	r0, #4
   16e00:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   16e02:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16e04:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   16e06:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16e08:	e7ca      	b.n	16da0 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   16e0a:	4648      	mov	r0, r9
   16e0c:	f003 fe52 	bl	1aab4 <printk>
			*ext_api_req->ext_api = NULL;
   16e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16e12:	601f      	str	r7, [r3, #0]
   16e14:	e7f5      	b.n	16e02 <check_ext_api_requests+0x76>
   16e16:	bf00      	nop
   16e18:	0000823c 	.word	0x0000823c
   16e1c:	0001ea00 	.word	0x0001ea00
   16e20:	00022b69 	.word	0x00022b69
   16e24:	00022b40 	.word	0x00022b40

00016e28 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   16e28:	4b04      	ldr	r3, [pc, #16]	; (16e3c <SystemCoreClockUpdate+0x14>)
   16e2a:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   16e2e:	4b04      	ldr	r3, [pc, #16]	; (16e40 <SystemCoreClockUpdate+0x18>)
   16e30:	f002 0203 	and.w	r2, r2, #3
   16e34:	40d3      	lsrs	r3, r2
   16e36:	4a03      	ldr	r2, [pc, #12]	; (16e44 <SystemCoreClockUpdate+0x1c>)
   16e38:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   16e3a:	4770      	bx	lr
   16e3c:	40005000 	.word	0x40005000
   16e40:	07a12000 	.word	0x07a12000
   16e44:	2000851c 	.word	0x2000851c

00016e48 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   16e48:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   16e4a:	4604      	mov	r4, r0
   16e4c:	b940      	cbnz	r0, 16e60 <nrfx_clock_init+0x18>
   16e4e:	4909      	ldr	r1, [pc, #36]	; (16e74 <nrfx_clock_init+0x2c>)
   16e50:	4809      	ldr	r0, [pc, #36]	; (16e78 <nrfx_clock_init+0x30>)
   16e52:	22b3      	movs	r2, #179	; 0xb3
   16e54:	f003 fe2e 	bl	1aab4 <printk>
   16e58:	21b3      	movs	r1, #179	; 0xb3
   16e5a:	4806      	ldr	r0, [pc, #24]	; (16e74 <nrfx_clock_init+0x2c>)
   16e5c:	f004 f8d0 	bl	1b000 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   16e60:	4b06      	ldr	r3, [pc, #24]	; (16e7c <nrfx_clock_init+0x34>)
   16e62:	791a      	ldrb	r2, [r3, #4]
   16e64:	b922      	cbnz	r2, 16e70 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   16e66:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   16e68:	4805      	ldr	r0, [pc, #20]	; (16e80 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   16e6a:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   16e6c:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16e6e:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   16e70:	4804      	ldr	r0, [pc, #16]	; (16e84 <nrfx_clock_init+0x3c>)
    return err_code;
   16e72:	e7fc      	b.n	16e6e <nrfx_clock_init+0x26>
   16e74:	00022b9c 	.word	0x00022b9c
   16e78:	0002003d 	.word	0x0002003d
   16e7c:	2000b0ac 	.word	0x2000b0ac
   16e80:	0bad0000 	.word	0x0bad0000
   16e84:	0bad000c 	.word	0x0bad000c

00016e88 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   16e88:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16e8a:	4b0d      	ldr	r3, [pc, #52]	; (16ec0 <nrfx_clock_enable+0x38>)
   16e8c:	791b      	ldrb	r3, [r3, #4]
   16e8e:	b943      	cbnz	r3, 16ea2 <nrfx_clock_enable+0x1a>
   16e90:	490c      	ldr	r1, [pc, #48]	; (16ec4 <nrfx_clock_enable+0x3c>)
   16e92:	480d      	ldr	r0, [pc, #52]	; (16ec8 <nrfx_clock_enable+0x40>)
   16e94:	22cc      	movs	r2, #204	; 0xcc
   16e96:	f003 fe0d 	bl	1aab4 <printk>
   16e9a:	21cc      	movs	r1, #204	; 0xcc
   16e9c:	4809      	ldr	r0, [pc, #36]	; (16ec4 <nrfx_clock_enable+0x3c>)
   16e9e:	f004 f8af 	bl	1b000 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   16ea2:	2005      	movs	r0, #5
   16ea4:	f7f6 fec8 	bl	dc38 <arch_irq_is_enabled>
   16ea8:	b910      	cbnz	r0, 16eb0 <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   16eaa:	2005      	movs	r0, #5
   16eac:	f7f6 feb4 	bl	dc18 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   16eb0:	2201      	movs	r2, #1
   16eb2:	4b06      	ldr	r3, [pc, #24]	; (16ecc <nrfx_clock_enable+0x44>)
   16eb4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   16eb8:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   16ebc:	bd08      	pop	{r3, pc}
   16ebe:	bf00      	nop
   16ec0:	2000b0ac 	.word	0x2000b0ac
   16ec4:	00022b9c 	.word	0x00022b9c
   16ec8:	0002003d 	.word	0x0002003d
   16ecc:	40005000 	.word	0x40005000

00016ed0 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16ed0:	4b30      	ldr	r3, [pc, #192]	; (16f94 <nrfx_clock_start+0xc4>)
{
   16ed2:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16ed4:	791b      	ldrb	r3, [r3, #4]
{
   16ed6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16ed8:	b953      	cbnz	r3, 16ef0 <nrfx_clock_start+0x20>
   16eda:	492f      	ldr	r1, [pc, #188]	; (16f98 <nrfx_clock_start+0xc8>)
   16edc:	482f      	ldr	r0, [pc, #188]	; (16f9c <nrfx_clock_start+0xcc>)
   16ede:	f44f 7284 	mov.w	r2, #264	; 0x108
   16ee2:	f003 fde7 	bl	1aab4 <printk>
   16ee6:	f44f 7184 	mov.w	r1, #264	; 0x108
   16eea:	482b      	ldr	r0, [pc, #172]	; (16f98 <nrfx_clock_start+0xc8>)
   16eec:	f004 f888 	bl	1b000 <assert_post_action>
    switch (domain)
   16ef0:	2c03      	cmp	r4, #3
   16ef2:	d842      	bhi.n	16f7a <nrfx_clock_start+0xaa>
   16ef4:	e8df f004 	tbb	[pc, r4]
   16ef8:	34271c02 	.word	0x34271c02
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16efc:	4b28      	ldr	r3, [pc, #160]	; (16fa0 <nrfx_clock_start+0xd0>)
   16efe:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16f02:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   16f06:	03c9      	lsls	r1, r1, #15
   16f08:	d510      	bpl.n	16f2c <nrfx_clock_start+0x5c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   16f0a:	f002 0203 	and.w	r2, r2, #3
   16f0e:	2a02      	cmp	r2, #2
   16f10:	d10c      	bne.n	16f2c <nrfx_clock_start+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16f12:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f16:	2200      	movs	r2, #0
   16f18:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16f1c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   16f20:	2202      	movs	r2, #2
   16f22:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f26:	2201      	movs	r2, #1
   16f28:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   16f2a:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   16f2c:	2201      	movs	r2, #1
   16f2e:	e7f0      	b.n	16f12 <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f30:	2200      	movs	r2, #0
   16f32:	4b1b      	ldr	r3, [pc, #108]	; (16fa0 <nrfx_clock_start+0xd0>)
   16f34:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   16f38:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   16f3c:	2201      	movs	r2, #1
   16f3e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f42:	601a      	str	r2, [r3, #0]
}
   16f44:	e7f1      	b.n	16f2a <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f46:	2200      	movs	r2, #0
   16f48:	4b15      	ldr	r3, [pc, #84]	; (16fa0 <nrfx_clock_start+0xd0>)
   16f4a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16f4e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   16f52:	f44f 7200 	mov.w	r2, #512	; 0x200
   16f56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f5a:	2201      	movs	r2, #1
   16f5c:	621a      	str	r2, [r3, #32]
}
   16f5e:	e7e4      	b.n	16f2a <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f60:	2200      	movs	r2, #0
   16f62:	4b0f      	ldr	r3, [pc, #60]	; (16fa0 <nrfx_clock_start+0xd0>)
   16f64:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16f68:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   16f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
   16f70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f74:	2201      	movs	r2, #1
   16f76:	619a      	str	r2, [r3, #24]
}
   16f78:	e7d7      	b.n	16f2a <nrfx_clock_start+0x5a>
            NRFX_ASSERT(0);
   16f7a:	4907      	ldr	r1, [pc, #28]	; (16f98 <nrfx_clock_start+0xc8>)
   16f7c:	4807      	ldr	r0, [pc, #28]	; (16f9c <nrfx_clock_start+0xcc>)
   16f7e:	f44f 729d 	mov.w	r2, #314	; 0x13a
   16f82:	f003 fd97 	bl	1aab4 <printk>
}
   16f86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   16f8a:	f44f 719d 	mov.w	r1, #314	; 0x13a
   16f8e:	4802      	ldr	r0, [pc, #8]	; (16f98 <nrfx_clock_start+0xc8>)
   16f90:	f004 b836 	b.w	1b000 <assert_post_action>
   16f94:	2000b0ac 	.word	0x2000b0ac
   16f98:	00022b9c 	.word	0x00022b9c
   16f9c:	0002003d 	.word	0x0002003d
   16fa0:	40005000 	.word	0x40005000

00016fa4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16fa4:	4b42      	ldr	r3, [pc, #264]	; (170b0 <nrfx_clock_stop+0x10c>)
{
   16fa6:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16fa8:	791b      	ldrb	r3, [r3, #4]
{
   16faa:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16fac:	b953      	cbnz	r3, 16fc4 <nrfx_clock_stop+0x20>
   16fae:	4941      	ldr	r1, [pc, #260]	; (170b4 <nrfx_clock_stop+0x110>)
   16fb0:	4841      	ldr	r0, [pc, #260]	; (170b8 <nrfx_clock_stop+0x114>)
   16fb2:	f240 1241 	movw	r2, #321	; 0x141
   16fb6:	f003 fd7d 	bl	1aab4 <printk>
   16fba:	f240 1141 	movw	r1, #321	; 0x141
   16fbe:	483d      	ldr	r0, [pc, #244]	; (170b4 <nrfx_clock_stop+0x110>)
   16fc0:	f004 f81e 	bl	1b000 <assert_post_action>
    switch (domain)
   16fc4:	2c03      	cmp	r4, #3
   16fc6:	d856      	bhi.n	17076 <nrfx_clock_stop+0xd2>
   16fc8:	e8df f004 	tbb	[pc, r4]
   16fcc:	483b2002 	.word	0x483b2002
    p_reg->INTENCLR = mask;
   16fd0:	2202      	movs	r2, #2
   16fd2:	4b3a      	ldr	r3, [pc, #232]	; (170bc <nrfx_clock_stop+0x118>)
   16fd4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16fd8:	2200      	movs	r2, #0
   16fda:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16fde:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16fe2:	2201      	movs	r2, #1
   16fe4:	60da      	str	r2, [r3, #12]
   16fe6:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   16fea:	4e34      	ldr	r6, [pc, #208]	; (170bc <nrfx_clock_stop+0x118>)
    switch (domain)
   16fec:	2c02      	cmp	r4, #2
   16fee:	d04f      	beq.n	17090 <nrfx_clock_stop+0xec>
   16ff0:	2c03      	cmp	r4, #3
   16ff2:	d050      	beq.n	17096 <nrfx_clock_stop+0xf2>
   16ff4:	2c00      	cmp	r4, #0
   16ff6:	d151      	bne.n	1709c <nrfx_clock_stop+0xf8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16ff8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   16ffc:	03db      	lsls	r3, r3, #15
   16ffe:	d51f      	bpl.n	17040 <nrfx_clock_stop+0x9c>
   17000:	2001      	movs	r0, #1
   17002:	f006 fcd1 	bl	1d9a8 <nrfx_busy_wait>
   17006:	3d01      	subs	r5, #1
   17008:	d1f0      	bne.n	16fec <nrfx_clock_stop+0x48>
   1700a:	e019      	b.n	17040 <nrfx_clock_stop+0x9c>
    p_reg->INTENCLR = mask;
   1700c:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1700e:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17010:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   17014:	4c29      	ldr	r4, [pc, #164]	; (170bc <nrfx_clock_stop+0x118>)
   17016:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1701a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1701e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17022:	6063      	str	r3, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   17024:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   17028:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1702c:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   17030:	03d2      	lsls	r2, r2, #15
   17032:	d505      	bpl.n	17040 <nrfx_clock_stop+0x9c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   17034:	b123      	cbz	r3, 17040 <nrfx_clock_stop+0x9c>
   17036:	2001      	movs	r0, #1
   17038:	f006 fcb6 	bl	1d9a8 <nrfx_busy_wait>
   1703c:	3d01      	subs	r5, #1
   1703e:	d1f1      	bne.n	17024 <nrfx_clock_stop+0x80>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   17040:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   17042:	f44f 7200 	mov.w	r2, #512	; 0x200
   17046:	4b1d      	ldr	r3, [pc, #116]	; (170bc <nrfx_clock_stop+0x118>)
   17048:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1704c:	2200      	movs	r2, #0
   1704e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   17052:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17056:	2201      	movs	r2, #1
   17058:	625a      	str	r2, [r3, #36]	; 0x24
}
   1705a:	e7c4      	b.n	16fe6 <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   1705c:	f44f 7280 	mov.w	r2, #256	; 0x100
   17060:	4b16      	ldr	r3, [pc, #88]	; (170bc <nrfx_clock_stop+0x118>)
   17062:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17066:	2200      	movs	r2, #0
   17068:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1706c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17070:	2201      	movs	r2, #1
   17072:	61da      	str	r2, [r3, #28]
}
   17074:	e7b7      	b.n	16fe6 <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   17076:	490f      	ldr	r1, [pc, #60]	; (170b4 <nrfx_clock_stop+0x110>)
   17078:	480f      	ldr	r0, [pc, #60]	; (170b8 <nrfx_clock_stop+0x114>)
   1707a:	f240 125d 	movw	r2, #349	; 0x15d
   1707e:	f003 fd19 	bl	1aab4 <printk>
   17082:	f240 115d 	movw	r1, #349	; 0x15d
   17086:	480b      	ldr	r0, [pc, #44]	; (170b4 <nrfx_clock_stop+0x110>)
}
   17088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
   1708c:	f003 bfb8 	b.w	1b000 <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   17090:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   17094:	e7b2      	b.n	16ffc <nrfx_clock_stop+0x58>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   17096:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   1709a:	e7af      	b.n	16ffc <nrfx_clock_stop+0x58>
            NRFX_ASSERT(0);
   1709c:	4908      	ldr	r1, [pc, #32]	; (170c0 <nrfx_clock_stop+0x11c>)
   1709e:	4806      	ldr	r0, [pc, #24]	; (170b8 <nrfx_clock_stop+0x114>)
   170a0:	f240 3242 	movw	r2, #834	; 0x342
   170a4:	f003 fd06 	bl	1aab4 <printk>
   170a8:	f240 3142 	movw	r1, #834	; 0x342
   170ac:	4804      	ldr	r0, [pc, #16]	; (170c0 <nrfx_clock_stop+0x11c>)
   170ae:	e7eb      	b.n	17088 <nrfx_clock_stop+0xe4>
   170b0:	2000b0ac 	.word	0x2000b0ac
   170b4:	00022b9c 	.word	0x00022b9c
   170b8:	0002003d 	.word	0x0002003d
   170bc:	40005000 	.word	0x40005000
   170c0:	00022bd9 	.word	0x00022bd9

000170c4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   170c4:	4b28      	ldr	r3, [pc, #160]	; (17168 <nrfx_power_clock_irq_handler+0xa4>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   170c6:	b510      	push	{r4, lr}
   170c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   170cc:	b152      	cbz	r2, 170e4 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   170ce:	2000      	movs	r0, #0
   170d0:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   170d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   170d8:	2201      	movs	r2, #1
   170da:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   170de:	4b23      	ldr	r3, [pc, #140]	; (1716c <nrfx_power_clock_irq_handler+0xa8>)
   170e0:	681b      	ldr	r3, [r3, #0]
   170e2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   170e4:	4b20      	ldr	r3, [pc, #128]	; (17168 <nrfx_power_clock_irq_handler+0xa4>)
   170e6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   170ea:	b18a      	cbz	r2, 17110 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   170ec:	2200      	movs	r2, #0
   170ee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   170f2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   170f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   170fa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   170fe:	f002 0203 	and.w	r2, r2, #3
   17102:	2a01      	cmp	r2, #1
   17104:	f04f 0102 	mov.w	r1, #2
   17108:	d126      	bne.n	17158 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1710a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1710e:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   17110:	4b15      	ldr	r3, [pc, #84]	; (17168 <nrfx_power_clock_irq_handler+0xa4>)
   17112:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   17116:	b162      	cbz	r2, 17132 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17118:	2200      	movs	r2, #0
   1711a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1711e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   17122:	f44f 7280 	mov.w	r2, #256	; 0x100
   17126:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1712a:	4b10      	ldr	r3, [pc, #64]	; (1716c <nrfx_power_clock_irq_handler+0xa8>)
   1712c:	2004      	movs	r0, #4
   1712e:	681b      	ldr	r3, [r3, #0]
   17130:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   17132:	4b0d      	ldr	r3, [pc, #52]	; (17168 <nrfx_power_clock_irq_handler+0xa4>)
   17134:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   17138:	b1aa      	cbz	r2, 17166 <nrfx_power_clock_irq_handler+0xa2>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1713a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1713e:	2200      	movs	r2, #0
   17140:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   17144:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   17148:	f44f 7200 	mov.w	r2, #512	; 0x200
   1714c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   17150:	4b06      	ldr	r3, [pc, #24]	; (1716c <nrfx_power_clock_irq_handler+0xa8>)
   17152:	2005      	movs	r0, #5
   17154:	681b      	ldr	r3, [r3, #0]
   17156:	4718      	bx	r3
   17158:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1715c:	4b03      	ldr	r3, [pc, #12]	; (1716c <nrfx_power_clock_irq_handler+0xa8>)
   1715e:	2001      	movs	r0, #1
   17160:	681b      	ldr	r3, [r3, #0]
   17162:	4798      	blx	r3
   17164:	e7d4      	b.n	17110 <nrfx_power_clock_irq_handler+0x4c>
}
   17166:	bd10      	pop	{r4, pc}
   17168:	40005000 	.word	0x40005000
   1716c:	2000b0ac 	.word	0x2000b0ac

00017170 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   17170:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   17172:	4c0a      	ldr	r4, [pc, #40]	; (1719c <nrfx_dppi_channel_alloc+0x2c>)
   17174:	6821      	ldr	r1, [r4, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   17176:	43ce      	mvns	r6, r1
   17178:	d00e      	beq.n	17198 <nrfx_dppi_channel_alloc+0x28>
   1717a:	2300      	movs	r3, #0
   1717c:	b2da      	uxtb	r2, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   1717e:	fa26 f502 	lsr.w	r5, r6, r2
   17182:	07ed      	lsls	r5, r5, #31
   17184:	f103 0301 	add.w	r3, r3, #1
   17188:	d5f8      	bpl.n	1717c <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   1718a:	2301      	movs	r3, #1
   1718c:	4093      	lsls	r3, r2
   1718e:	430b      	orrs	r3, r1
    *p_channel = channel;
   17190:	7002      	strb	r2, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   17192:	4803      	ldr	r0, [pc, #12]	; (171a0 <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   17194:	6023      	str	r3, [r4, #0]
}
   17196:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   17198:	4802      	ldr	r0, [pc, #8]	; (171a4 <nrfx_dppi_channel_alloc+0x34>)
   1719a:	e7fc      	b.n	17196 <nrfx_dppi_channel_alloc+0x26>
   1719c:	2000b0b4 	.word	0x2000b0b4
   171a0:	0bad0000 	.word	0x0bad0000
   171a4:	0bad0002 	.word	0x0bad0002

000171a8 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   171a8:	2301      	movs	r3, #1
   171aa:	fa03 f000 	lsl.w	r0, r3, r0
   171ae:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   171b0:	b193      	cbz	r3, 171d8 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   171b2:	f04f 0320 	mov.w	r3, #32
   171b6:	f3ef 8111 	mrs	r1, BASEPRI
   171ba:	f383 8811 	msr	BASEPRI, r3
   171be:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   171c2:	4a06      	ldr	r2, [pc, #24]	; (171dc <nrfx_gpiote_channel_free+0x34>)
   171c4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   171c6:	ea23 0000 	bic.w	r0, r3, r0
   171ca:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   171cc:	f381 8811 	msr	BASEPRI, r1
   171d0:	f3bf 8f6f 	isb	sy
   171d4:	4802      	ldr	r0, [pc, #8]	; (171e0 <nrfx_gpiote_channel_free+0x38>)
   171d6:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   171d8:	4802      	ldr	r0, [pc, #8]	; (171e4 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   171da:	4770      	bx	lr
   171dc:	2000b0b8 	.word	0x2000b0b8
   171e0:	0bad0000 	.word	0x0bad0000
   171e4:	0bad0004 	.word	0x0bad0004

000171e8 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   171e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   171ec:	22ff      	movs	r2, #255	; 0xff
{
   171ee:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   171f0:	2601      	movs	r6, #1
{
   171f2:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   171f4:	f8df e054 	ldr.w	lr, [pc, #84]	; 1724c <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   171f8:	4815      	ldr	r0, [pc, #84]	; (17250 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   171fa:	f8df 8058 	ldr.w	r8, [pc, #88]	; 17254 <nrfx_gpiote_channel_alloc+0x6c>
   171fe:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   17200:	f04f 0120 	mov.w	r1, #32
   17204:	f3ef 8c11 	mrs	ip, BASEPRI
   17208:	f381 8811 	msr	BASEPRI, r1
   1720c:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   17210:	fa22 f103 	lsr.w	r1, r2, r3
   17214:	07c9      	lsls	r1, r1, #31
   17216:	d50a      	bpl.n	1722e <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   17218:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   1721c:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   17220:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   17222:	bf01      	itttt	eq
   17224:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   17226:	4339      	orreq	r1, r7
   17228:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   1722c:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1722e:	f38c 8811 	msr	BASEPRI, ip
   17232:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   17236:	4540      	cmp	r0, r8
   17238:	d005      	beq.n	17246 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1723a:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1723e:	439a      	bics	r2, r3
   17240:	f104 0401 	add.w	r4, r4, #1
   17244:	d1db      	bne.n	171fe <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   17246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1724a:	bf00      	nop
   1724c:	2000b0b8 	.word	0x2000b0b8
   17250:	0bad0002 	.word	0x0bad0002
   17254:	0bad0000 	.word	0x0bad0000

00017258 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   17258:	b570      	push	{r4, r5, r6, lr}
   1725a:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   1725c:	460d      	mov	r5, r1
   1725e:	b941      	cbnz	r1, 17272 <nrfx_ipc_init+0x1a>
   17260:	490b      	ldr	r1, [pc, #44]	; (17290 <nrfx_ipc_init+0x38>)
   17262:	480c      	ldr	r0, [pc, #48]	; (17294 <nrfx_ipc_init+0x3c>)
   17264:	2232      	movs	r2, #50	; 0x32
   17266:	f003 fc25 	bl	1aab4 <printk>
   1726a:	2132      	movs	r1, #50	; 0x32
   1726c:	4808      	ldr	r0, [pc, #32]	; (17290 <nrfx_ipc_init+0x38>)
   1726e:	f003 fec7 	bl	1b000 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   17272:	4c09      	ldr	r4, [pc, #36]	; (17298 <nrfx_ipc_init+0x40>)
   17274:	7923      	ldrb	r3, [r4, #4]
   17276:	b943      	cbnz	r3, 1728a <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   17278:	202a      	movs	r0, #42	; 0x2a
   1727a:	f7f6 fccd 	bl	dc18 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1727e:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   17280:	4806      	ldr	r0, [pc, #24]	; (1729c <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   17282:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   17284:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   17286:	60a6      	str	r6, [r4, #8]
}
   17288:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1728a:	4805      	ldr	r0, [pc, #20]	; (172a0 <nrfx_ipc_init+0x48>)
   1728c:	e7fc      	b.n	17288 <nrfx_ipc_init+0x30>
   1728e:	bf00      	nop
   17290:	00022c0d 	.word	0x00022c0d
   17294:	0002003d 	.word	0x0002003d
   17298:	2000b118 	.word	0x2000b118
   1729c:	0bad0000 	.word	0x0bad0000
   172a0:	0bad000c 	.word	0x0bad000c

000172a4 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   172a4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   172a6:	4604      	mov	r4, r0
   172a8:	b940      	cbnz	r0, 172bc <nrfx_ipc_config_load+0x18>
   172aa:	4919      	ldr	r1, [pc, #100]	; (17310 <nrfx_ipc_config_load+0x6c>)
   172ac:	4819      	ldr	r0, [pc, #100]	; (17314 <nrfx_ipc_config_load+0x70>)
   172ae:	2244      	movs	r2, #68	; 0x44
   172b0:	f003 fc00 	bl	1aab4 <printk>
   172b4:	2144      	movs	r1, #68	; 0x44
   172b6:	4816      	ldr	r0, [pc, #88]	; (17310 <nrfx_ipc_config_load+0x6c>)
   172b8:	f003 fea2 	bl	1b000 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   172bc:	4b16      	ldr	r3, [pc, #88]	; (17318 <nrfx_ipc_config_load+0x74>)
   172be:	791b      	ldrb	r3, [r3, #4]
   172c0:	2b01      	cmp	r3, #1
   172c2:	d008      	beq.n	172d6 <nrfx_ipc_config_load+0x32>
   172c4:	4912      	ldr	r1, [pc, #72]	; (17310 <nrfx_ipc_config_load+0x6c>)
   172c6:	4813      	ldr	r0, [pc, #76]	; (17314 <nrfx_ipc_config_load+0x70>)
   172c8:	2245      	movs	r2, #69	; 0x45
   172ca:	f003 fbf3 	bl	1aab4 <printk>
   172ce:	2145      	movs	r1, #69	; 0x45
   172d0:	480f      	ldr	r0, [pc, #60]	; (17310 <nrfx_ipc_config_load+0x6c>)
   172d2:	f003 fe95 	bl	1b000 <assert_post_action>
{
   172d6:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   172d8:	4a10      	ldr	r2, [pc, #64]	; (1731c <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   172da:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   172de:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   172e2:	3301      	adds	r3, #1
   172e4:	2b10      	cmp	r3, #16
   172e6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   172ea:	d1f6      	bne.n	172da <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   172ec:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   172ee:	4a0b      	ldr	r2, [pc, #44]	; (1731c <nrfx_ipc_config_load+0x78>)
   172f0:	f104 0140 	add.w	r1, r4, #64	; 0x40
   172f4:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   172f8:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   172fc:	3301      	adds	r3, #1
   172fe:	2b10      	cmp	r3, #16
   17300:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   17304:	d1f6      	bne.n	172f4 <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   17306:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
   1730a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1730e:	bd38      	pop	{r3, r4, r5, pc}
   17310:	00022c0d 	.word	0x00022c0d
   17314:	0002003d 	.word	0x0002003d
   17318:	2000b118 	.word	0x2000b118
   1731c:	4002a000 	.word	0x4002a000

00017320 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   17320:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   17322:	4b0a      	ldr	r3, [pc, #40]	; (1734c <nrfx_ipc_receive_event_enable+0x2c>)
{
   17324:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   17326:	791b      	ldrb	r3, [r3, #4]
   17328:	2b01      	cmp	r3, #1
   1732a:	d008      	beq.n	1733e <nrfx_ipc_receive_event_enable+0x1e>
   1732c:	4908      	ldr	r1, [pc, #32]	; (17350 <nrfx_ipc_receive_event_enable+0x30>)
   1732e:	4809      	ldr	r0, [pc, #36]	; (17354 <nrfx_ipc_receive_event_enable+0x34>)
   17330:	226a      	movs	r2, #106	; 0x6a
   17332:	f003 fbbf 	bl	1aab4 <printk>
   17336:	216a      	movs	r1, #106	; 0x6a
   17338:	4805      	ldr	r0, [pc, #20]	; (17350 <nrfx_ipc_receive_event_enable+0x30>)
   1733a:	f003 fe61 	bl	1b000 <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1733e:	2301      	movs	r3, #1
   17340:	fa03 f404 	lsl.w	r4, r3, r4
   17344:	4b04      	ldr	r3, [pc, #16]	; (17358 <nrfx_ipc_receive_event_enable+0x38>)
   17346:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   1734a:	bd10      	pop	{r4, pc}
   1734c:	2000b118 	.word	0x2000b118
   17350:	00022c0d 	.word	0x00022c0d
   17354:	0002003d 	.word	0x0002003d
   17358:	4002a000 	.word	0x4002a000

0001735c <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   1735c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1735e:	4b0a      	ldr	r3, [pc, #40]	; (17388 <nrfx_ipc_receive_event_disable+0x2c>)
{
   17360:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   17362:	791b      	ldrb	r3, [r3, #4]
   17364:	2b01      	cmp	r3, #1
   17366:	d008      	beq.n	1737a <nrfx_ipc_receive_event_disable+0x1e>
   17368:	4908      	ldr	r1, [pc, #32]	; (1738c <nrfx_ipc_receive_event_disable+0x30>)
   1736a:	4809      	ldr	r0, [pc, #36]	; (17390 <nrfx_ipc_receive_event_disable+0x34>)
   1736c:	2270      	movs	r2, #112	; 0x70
   1736e:	f003 fba1 	bl	1aab4 <printk>
   17372:	2170      	movs	r1, #112	; 0x70
   17374:	4805      	ldr	r0, [pc, #20]	; (1738c <nrfx_ipc_receive_event_disable+0x30>)
   17376:	f003 fe43 	bl	1b000 <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   1737a:	2301      	movs	r3, #1
   1737c:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   17380:	4b04      	ldr	r3, [pc, #16]	; (17394 <nrfx_ipc_receive_event_disable+0x38>)
   17382:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   17386:	bd10      	pop	{r4, pc}
   17388:	2000b118 	.word	0x2000b118
   1738c:	00022c0d 	.word	0x00022c0d
   17390:	0002003d 	.word	0x0002003d
   17394:	4002a000 	.word	0x4002a000

00017398 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   17398:	4b15      	ldr	r3, [pc, #84]	; (173f0 <nrfx_ipc_irq_handler+0x58>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1739a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1739e:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   173a2:	4f14      	ldr	r7, [pc, #80]	; (173f4 <nrfx_ipc_irq_handler+0x5c>)
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   173a4:	4635      	mov	r5, r6
   173a6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 173f8 <nrfx_ipc_irq_handler+0x60>
    while (bitmask)
   173aa:	b935      	cbnz	r5, 173ba <nrfx_ipc_irq_handler+0x22>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   173ac:	4b13      	ldr	r3, [pc, #76]	; (173fc <nrfx_ipc_irq_handler+0x64>)
   173ae:	4630      	mov	r0, r6
}
   173b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   173b4:	681a      	ldr	r2, [r3, #0]
   173b6:	6899      	ldr	r1, [r3, #8]
   173b8:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   173ba:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   173be:	2301      	movs	r3, #1
  return __builtin_clz(value);
   173c0:	fab4 f484 	clz	r4, r4
   173c4:	40a3      	lsls	r3, r4
   173c6:	2c0f      	cmp	r4, #15
   173c8:	ea25 0503 	bic.w	r5, r5, r3
   173cc:	d90a      	bls.n	173e4 <nrfx_ipc_irq_handler+0x4c>
   173ce:	4639      	mov	r1, r7
   173d0:	4640      	mov	r0, r8
   173d2:	f240 12e5 	movw	r2, #485	; 0x1e5
   173d6:	f003 fb6d 	bl	1aab4 <printk>
   173da:	f240 11e5 	movw	r1, #485	; 0x1e5
   173de:	4638      	mov	r0, r7
   173e0:	f003 fe0e 	bl	1b000 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   173e4:	2200      	movs	r2, #0
   173e6:	4b06      	ldr	r3, [pc, #24]	; (17400 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   173e8:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   173ea:	511a      	str	r2, [r3, r4]
}
   173ec:	e7dd      	b.n	173aa <nrfx_ipc_irq_handler+0x12>
   173ee:	bf00      	nop
   173f0:	4002a000 	.word	0x4002a000
   173f4:	00022c48 	.word	0x00022c48
   173f8:	0002003d 	.word	0x0002003d
   173fc:	2000b118 	.word	0x2000b118
   17400:	4002a100 	.word	0x4002a100

00017404 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   17404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17408:	460e      	mov	r6, r1
   1740a:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1740c:	4d0c      	ldr	r5, [pc, #48]	; (17440 <metal_generic_dev_open+0x3c>)
   1740e:	f855 4f18 	ldr.w	r4, [r5, #24]!
   17412:	42ac      	cmp	r4, r5
   17414:	d103      	bne.n	1741e <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   17416:	f06f 0012 	mvn.w	r0, #18
   1741a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   1741e:	4631      	mov	r1, r6
   17420:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   17424:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   17428:	f004 fd5a 	bl	1bee0 <strcmp>
   1742c:	b930      	cbnz	r0, 1743c <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
   1742e:	4640      	mov	r0, r8
			*device = dev;
   17430:	f8c7 8000 	str.w	r8, [r7]
}
   17434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   17438:	f006 bb8f 	b.w	1db5a <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1743c:	6824      	ldr	r4, [r4, #0]
   1743e:	e7e8      	b.n	17412 <metal_generic_dev_open+0xe>
   17440:	2000b124 	.word	0x2000b124

00017444 <metal_bus_find>:
{
   17444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17448:	4607      	mov	r7, r0
   1744a:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   1744c:	4e0b      	ldr	r6, [pc, #44]	; (1747c <metal_bus_find+0x38>)
   1744e:	f856 4f08 	ldr.w	r4, [r6, #8]!
   17452:	42b4      	cmp	r4, r6
   17454:	d102      	bne.n	1745c <metal_bus_find+0x18>
	return -ENOENT;
   17456:	f06f 0001 	mvn.w	r0, #1
   1745a:	e00a      	b.n	17472 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   1745c:	4639      	mov	r1, r7
   1745e:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   17462:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   17466:	f004 fd3b 	bl	1bee0 <strcmp>
   1746a:	b920      	cbnz	r0, 17476 <metal_bus_find+0x32>
   1746c:	b11d      	cbz	r5, 17476 <metal_bus_find+0x32>
			*result = bus;
   1746e:	f8c5 8000 	str.w	r8, [r5]
}
   17472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   17476:	6824      	ldr	r4, [r4, #0]
   17478:	e7eb      	b.n	17452 <metal_bus_find+0xe>
   1747a:	bf00      	nop
   1747c:	2000b124 	.word	0x2000b124

00017480 <metal_bus_register>:
{
   17480:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   17482:	4604      	mov	r4, r0
   17484:	b910      	cbnz	r0, 1748c <metal_bus_register+0xc>
		return -EINVAL;
   17486:	f06f 0015 	mvn.w	r0, #21
}
   1748a:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   1748c:	6800      	ldr	r0, [r0, #0]
   1748e:	2800      	cmp	r0, #0
   17490:	d0f9      	beq.n	17486 <metal_bus_register+0x6>
   17492:	f004 fd15 	bl	1bec0 <strlen>
   17496:	2800      	cmp	r0, #0
   17498:	d0f5      	beq.n	17486 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   1749a:	2100      	movs	r1, #0
   1749c:	6820      	ldr	r0, [r4, #0]
   1749e:	f7ff ffd1 	bl	17444 <metal_bus_find>
   174a2:	b1c0      	cbz	r0, 174d6 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   174a4:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
   174a8:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
   174ac:	4b0c      	ldr	r3, [pc, #48]	; (174e0 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   174ae:	f104 0224 	add.w	r2, r4, #36	; 0x24
   174b2:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   174b4:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   174b8:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   174ba:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   174bc:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   174be:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   174c0:	781a      	ldrb	r2, [r3, #0]
   174c2:	2a06      	cmp	r2, #6
   174c4:	d905      	bls.n	174d2 <metal_bus_register+0x52>
   174c6:	685b      	ldr	r3, [r3, #4]
   174c8:	b143      	cbz	r3, 174dc <metal_bus_register+0x5c>
   174ca:	2007      	movs	r0, #7
   174cc:	6822      	ldr	r2, [r4, #0]
   174ce:	4905      	ldr	r1, [pc, #20]	; (174e4 <metal_bus_register+0x64>)
   174d0:	4798      	blx	r3
	return 0;
   174d2:	2000      	movs	r0, #0
   174d4:	e7d9      	b.n	1748a <metal_bus_register+0xa>
		return -EEXIST;
   174d6:	f06f 0010 	mvn.w	r0, #16
   174da:	e7d6      	b.n	1748a <metal_bus_register+0xa>
	return 0;
   174dc:	4618      	mov	r0, r3
   174de:	e7d4      	b.n	1748a <metal_bus_register+0xa>
   174e0:	2000b124 	.word	0x2000b124
   174e4:	00022c7a 	.word	0x00022c7a

000174e8 <metal_register_generic_device>:
{
   174e8:	b510      	push	{r4, lr}
   174ea:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   174ec:	6800      	ldr	r0, [r0, #0]
   174ee:	b910      	cbnz	r0, 174f6 <metal_register_generic_device+0xe>
		return -EINVAL;
   174f0:	f06f 0015 	mvn.w	r0, #21
}
   174f4:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   174f6:	f004 fce3 	bl	1bec0 <strlen>
   174fa:	2800      	cmp	r0, #0
   174fc:	d0f8      	beq.n	174f0 <metal_register_generic_device+0x8>
   174fe:	68a3      	ldr	r3, [r4, #8]
   17500:	2b01      	cmp	r3, #1
   17502:	d8f5      	bhi.n	174f0 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   17504:	4b06      	ldr	r3, [pc, #24]	; (17520 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   17506:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   1750a:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   1750c:	4b05      	ldr	r3, [pc, #20]	; (17524 <metal_register_generic_device+0x3c>)
   1750e:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   17510:	f103 0018 	add.w	r0, r3, #24
   17514:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   17516:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   17518:	61d9      	str	r1, [r3, #28]
	return 0;
   1751a:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   1751c:	6011      	str	r1, [r2, #0]
}
   1751e:	e7e9      	b.n	174f4 <metal_register_generic_device+0xc>
   17520:	20008520 	.word	0x20008520
   17524:	2000b124 	.word	0x2000b124

00017528 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   17528:	b538      	push	{r3, r4, r5, lr}
   1752a:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   1752c:	4c0d      	ldr	r4, [pc, #52]	; (17564 <metal_init+0x3c>)
   1752e:	2220      	movs	r2, #32
   17530:	4620      	mov	r0, r4
   17532:	2100      	movs	r1, #0
   17534:	f004 fd2d 	bl	1bf92 <memset>

	_metal.common.log_handler   = params->log_handler;
   17538:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   1753a:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   1753c:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   1753e:	4623      	mov	r3, r4
   17540:	792a      	ldrb	r2, [r5, #4]
   17542:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   17546:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   1754a:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   1754e:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   17552:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   17556:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   1755a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   1755e:	f000 b803 	b.w	17568 <metal_sys_init>
   17562:	bf00      	nop
   17564:	2000b124 	.word	0x2000b124

00017568 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   17568:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   1756a:	4802      	ldr	r0, [pc, #8]	; (17574 <metal_sys_init+0xc>)
   1756c:	f7ff ff88 	bl	17480 <metal_bus_register>
	return 0;
}
   17570:	2000      	movs	r0, #0
   17572:	bd08      	pop	{r3, pc}
   17574:	20008520 	.word	0x20008520

00017578 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   17578:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   1757a:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   1757c:	2b06      	cmp	r3, #6
{
   1757e:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   17580:	bf88      	it	hi
   17582:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   17584:	4b09      	ldr	r3, [pc, #36]	; (175ac <metal_zephyr_log_handler+0x34>)
{
   17586:	ac05      	add	r4, sp, #20
   17588:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   1758c:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   17590:	4807      	ldr	r0, [pc, #28]	; (175b0 <metal_zephyr_log_handler+0x38>)
   17592:	f003 fa8f 	bl	1aab4 <printk>

	va_start(args, format);
	vprintk(format, args);
   17596:	4621      	mov	r1, r4
   17598:	4628      	mov	r0, r5
	va_start(args, format);
   1759a:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   1759c:	f7f3 f9b8 	bl	a910 <vprintk>
	va_end(args);
}
   175a0:	b002      	add	sp, #8
   175a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   175a6:	b003      	add	sp, #12
   175a8:	4770      	bx	lr
   175aa:	bf00      	nop
   175ac:	0001f2f4 	.word	0x0001f2f4
   175b0:	000213b6 	.word	0x000213b6

000175b4 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   175b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175b8:	b087      	sub	sp, #28
   175ba:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   175bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   175be:	4605      	mov	r5, r0
	if (nvqs > num_vrings)
   175c0:	4293      	cmp	r3, r2
{
   175c2:	4616      	mov	r6, r2
	if (nvqs > num_vrings)
   175c4:	d349      	bcc.n	1765a <virtio_create_virtqueues+0xa6>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   175c6:	2400      	movs	r4, #0
		vring_info = &vdev->vrings_info[i];
   175c8:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   175cc:	42b4      	cmp	r4, r6
   175ce:	d103      	bne.n	175d8 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   175d0:	2000      	movs	r0, #0
}
   175d2:	b007      	add	sp, #28
   175d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   175d8:	fb0b f704 	mul.w	r7, fp, r4
   175dc:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
   175e0:	69aa      	ldr	r2, [r5, #24]
		vring_info = &vdev->vrings_info[i];
   175e2:	eb08 0c07 	add.w	ip, r8, r7
		vring_alloc = &vring_info->info;
   175e6:	f10c 0904 	add.w	r9, ip, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
   175ea:	bb02      	cbnz	r2, 1762e <virtio_create_virtqueues+0x7a>
			struct metal_io_region *io = vring_info->io;
   175ec:	f8dc 0014 	ldr.w	r0, [ip, #20]
			metal_io_block_set(io, offset, 0,
   175f0:	f8bc e00c 	ldrh.w	lr, [ip, #12]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   175f4:	f8dc 3004 	ldr.w	r3, [ip, #4]
   175f8:	6801      	ldr	r1, [r0, #0]
						      vring_alloc->align));
   175fa:	f8dc c008 	ldr.w	ip, [ip, #8]
   175fe:	1a59      	subs	r1, r3, r1
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   17600:	f10c 33ff 	add.w	r3, ip, #4294967295
   17604:	eb03 130e 	add.w	r3, r3, lr, lsl #4
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   17608:	f10e 0a03 	add.w	sl, lr, #3
	size = (size + align - 1) & ~(align - 1);
   1760c:	f1cc 0c00 	rsb	ip, ip, #0
   17610:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   17614:	ea03 030c 	and.w	r3, r3, ip
			metal_io_block_set(io, offset, 0,
   17618:	f8d0 c008 	ldr.w	ip, [r0, #8]
	size += sizeof(struct vring_used) +
   1761c:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
   17620:	4561      	cmp	r1, ip
   17622:	bf28      	it	cs
   17624:	f04f 31ff 	movcs.w	r1, #4294967295
   17628:	3306      	adds	r3, #6
   1762a:	f006 fa5d 	bl	1dae8 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1762e:	f858 3007 	ldr.w	r3, [r8, r7]
   17632:	9a05      	ldr	r2, [sp, #20]
   17634:	9302      	str	r3, [sp, #8]
   17636:	6a2b      	ldr	r3, [r5, #32]
   17638:	4628      	mov	r0, r5
   1763a:	6a1b      	ldr	r3, [r3, #32]
   1763c:	b2a1      	uxth	r1, r4
   1763e:	9301      	str	r3, [sp, #4]
   17640:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17642:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   17646:	9300      	str	r3, [sp, #0]
   17648:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   1764c:	464b      	mov	r3, r9
   1764e:	f006 faa1 	bl	1db94 <virtqueue_create>
		if (ret)
   17652:	2800      	cmp	r0, #0
   17654:	d1bd      	bne.n	175d2 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   17656:	3401      	adds	r4, #1
   17658:	e7b8      	b.n	175cc <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   1765a:	4801      	ldr	r0, [pc, #4]	; (17660 <virtio_create_virtqueues+0xac>)
   1765c:	e7b9      	b.n	175d2 <virtio_create_virtqueues+0x1e>
   1765e:	bf00      	nop
   17660:	fffff440 	.word	0xfffff440

00017664 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   17664:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   17666:	8944      	ldrh	r4, [r0, #10]
   17668:	428c      	cmp	r4, r1
   1766a:	d312      	bcc.n	17692 <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   1766c:	6a03      	ldr	r3, [r0, #32]
   1766e:	3c01      	subs	r4, #1
   17670:	885d      	ldrh	r5, [r3, #2]
   17672:	402c      	ands	r4, r5
   17674:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
   17678:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
   1767a:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   1767c:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   17680:	6a02      	ldr	r2, [r0, #32]
   17682:	8853      	ldrh	r3, [r2, #2]
   17684:	3301      	adds	r3, #1
   17686:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   17688:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   1768a:	3301      	adds	r3, #1
   1768c:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   1768e:	2000      	movs	r0, #0
}
   17690:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   17692:	4801      	ldr	r0, [pc, #4]	; (17698 <virtqueue_add_consumed_buffer+0x34>)
   17694:	e7fc      	b.n	17690 <virtqueue_add_consumed_buffer+0x2c>
   17696:	bf00      	nop
   17698:	fffff441 	.word	0xfffff441

0001769c <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
   1769c:	b4f0      	push	{r4, r5, r6, r7}
   1769e:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   176a0:	b148      	cbz	r0, 176b6 <rpmsg_send_offchannel_raw+0x1a>
   176a2:	6a00      	ldr	r0, [r0, #32]
   176a4:	b138      	cbz	r0, 176b6 <rpmsg_send_offchannel_raw+0x1a>
   176a6:	b133      	cbz	r3, 176b6 <rpmsg_send_offchannel_raw+0x1a>
   176a8:	3401      	adds	r4, #1
   176aa:	d004      	beq.n	176b6 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   176ac:	6f44      	ldr	r4, [r0, #116]	; 0x74
   176ae:	b114      	cbz	r4, 176b6 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   176b0:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
   176b2:	bcf0      	pop	{r4, r5, r6, r7}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   176b4:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   176b6:	4801      	ldr	r0, [pc, #4]	; (176bc <rpmsg_send_offchannel_raw+0x20>)
}
   176b8:	bcf0      	pop	{r4, r5, r6, r7}
   176ba:	4770      	bx	lr
   176bc:	fffff82d 	.word	0xfffff82d

000176c0 <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   176c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   176c4:	460e      	mov	r6, r1
   176c6:	4690      	mov	r8, r2
   176c8:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   176ca:	4605      	mov	r5, r0
   176cc:	2800      	cmp	r0, #0
   176ce:	d06a      	beq.n	177a6 <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   176d0:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   176d4:	4638      	mov	r0, r7
   176d6:	f006 fbef 	bl	1deb8 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   176da:	1c63      	adds	r3, r4, #1
   176dc:	d11a      	bne.n	17714 <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   176de:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   176e0:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   176e4:	095a      	lsrs	r2, r3, #5
   176e6:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   176ea:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   176ee:	f003 011f 	and.w	r1, r3, #31
   176f2:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   176f6:	07e4      	lsls	r4, r4, #31
   176f8:	d407      	bmi.n	1770a <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   176fa:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   176fe:	2301      	movs	r3, #1
   17700:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   17702:	4313      	orrs	r3, r2
   17704:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
   17708:	e01d      	b.n	17746 <rpmsg_create_ept+0x86>
	     bit++)
   1770a:	3301      	adds	r3, #1
	for (bit = start;
   1770c:	2b80      	cmp	r3, #128	; 0x80
   1770e:	d1e9      	bne.n	176e4 <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
   17710:	4c27      	ldr	r4, [pc, #156]	; (177b0 <rpmsg_create_ept+0xf0>)
   17712:	e044      	b.n	1779e <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   17714:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   17718:	d315      	bcc.n	17746 <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1771a:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1771e:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   17720:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   17724:	d83a      	bhi.n	1779c <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   17726:	0958      	lsrs	r0, r3, #5
   17728:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1772c:	f003 031f 	and.w	r3, r3, #31
   17730:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   17734:	07d2      	lsls	r2, r2, #31
   17736:	d4eb      	bmi.n	17710 <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   17738:	2201      	movs	r2, #1
   1773a:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1773e:	ea43 030c 	orr.w	r3, r3, ip
   17742:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   17746:	491b      	ldr	r1, [pc, #108]	; (177b4 <rpmsg_create_ept+0xf4>)
   17748:	2220      	movs	r2, #32
   1774a:	f1b8 0f00 	cmp.w	r8, #0
   1774e:	bf18      	it	ne
   17750:	4641      	movne	r1, r8
   17752:	4628      	mov	r0, r5
   17754:	f004 fba2 	bl	1be9c <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   17758:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
   1775a:	4629      	mov	r1, r5
   1775c:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
   1775e:	9b07      	ldr	r3, [sp, #28]
   17760:	4630      	mov	r0, r6
   17762:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   17764:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
   17766:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
   17768:	632b      	str	r3, [r5, #48]	; 0x30
   1776a:	f006 fc1f 	bl	1dfac <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   1776e:	4638      	mov	r0, r7
   17770:	f001 ffc8 	bl	19704 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   17774:	782c      	ldrb	r4, [r5, #0]
   17776:	b174      	cbz	r4, 17796 <rpmsg_create_ept+0xd6>
   17778:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   1777c:	b15c      	cbz	r4, 17796 <rpmsg_create_ept+0xd6>
   1777e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17780:	3301      	adds	r3, #1
   17782:	d112      	bne.n	177aa <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   17784:	2100      	movs	r1, #0
   17786:	4628      	mov	r0, r5
   17788:	f006 fbc7 	bl	1df1a <rpmsg_send_ns_message>

	if (status)
   1778c:	4604      	mov	r4, r0
   1778e:	b110      	cbz	r0, 17796 <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
   17790:	4628      	mov	r0, r5
   17792:	f006 fb97 	bl	1dec4 <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   17796:	4620      	mov	r0, r4
   17798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1779c:	4c06      	ldr	r4, [pc, #24]	; (177b8 <rpmsg_create_ept+0xf8>)
   1779e:	4638      	mov	r0, r7
   177a0:	f001 ffb0 	bl	19704 <z_impl_k_sem_give>
}
   177a4:	e7f7      	b.n	17796 <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
   177a6:	4c04      	ldr	r4, [pc, #16]	; (177b8 <rpmsg_create_ept+0xf8>)
   177a8:	e7f5      	b.n	17796 <rpmsg_create_ept+0xd6>
   177aa:	2400      	movs	r4, #0
   177ac:	e7f3      	b.n	17796 <rpmsg_create_ept+0xd6>
   177ae:	bf00      	nop
   177b0:	fffff829 	.word	0xfffff829
   177b4:	00022d9c 	.word	0x00022d9c
   177b8:	fffff82d 	.word	0xfffff82d

000177bc <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
   177bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177c0:	4605      	mov	r5, r0
   177c2:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   177c4:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
   177c6:	6a03      	ldr	r3, [r0, #32]
   177c8:	b08d      	sub	sp, #52	; 0x34
   177ca:	681b      	ldr	r3, [r3, #0]
   177cc:	4692      	mov	sl, r2
   177ce:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   177d2:	9103      	str	r1, [sp, #12]
   177d4:	4798      	blx	r3
	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
   177d6:	0743      	lsls	r3, r0, #29
   177d8:	d57b      	bpl.n	178d2 <rpmsg_virtio_send_offchannel_raw+0x116>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   177da:	f643 2398 	movw	r3, #15000	; 0x3a98
   177de:	2f00      	cmp	r7, #0
   177e0:	bf18      	it	ne
   177e2:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
   177e4:	f105 0858 	add.w	r8, r5, #88	; 0x58
   177e8:	4640      	mov	r0, r8
   177ea:	f006 fc03 	bl	1dff4 <__metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
   177ee:	4628      	mov	r0, r5
   177f0:	f006 fcc5 	bl	1e17e <_rpmsg_virtio_get_buffer_size>
		if (avail_size && size > avail_size) {
   177f4:	4681      	mov	r9, r0
   177f6:	b130      	cbz	r0, 17806 <rpmsg_virtio_send_offchannel_raw+0x4a>
   177f8:	42b0      	cmp	r0, r6
   177fa:	da04      	bge.n	17806 <rpmsg_virtio_send_offchannel_raw+0x4a>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   177fc:	4640      	mov	r0, r8
   177fe:	f006 fbf7 	bl	1dff0 <k_sem_give>
		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
			break;
		if (avail_size != 0)
			return RPMSG_ERR_BUFF_SIZE;
   17802:	4e42      	ldr	r6, [pc, #264]	; (1790c <rpmsg_virtio_send_offchannel_raw+0x150>)
   17804:	e061      	b.n	178ca <rpmsg_virtio_send_offchannel_raw+0x10e>
	return rvdev->vdev->role;
   17806:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   17808:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1780a:	b9f3      	cbnz	r3, 1784a <rpmsg_virtio_send_offchannel_raw+0x8e>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   1780c:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   17810:	f10d 0212 	add.w	r2, sp, #18
   17814:	a905      	add	r1, sp, #20
   17816:	f006 fa4d 	bl	1dcb4 <virtqueue_get_buffer>
		if (!data) {
   1781a:	4604      	mov	r4, r0
   1781c:	b948      	cbnz	r0, 17832 <rpmsg_virtio_send_offchannel_raw+0x76>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1781e:	f44f 7100 	mov.w	r1, #512	; 0x200
   17822:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
   17826:	f006 fcbd 	bl	1e1a4 <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
   1782a:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1782e:	4604      	mov	r4, r0
			*len = RPMSG_BUFFER_SIZE;
   17830:	9305      	str	r3, [sp, #20]
   17832:	4640      	mov	r0, r8
   17834:	f006 fbdc 	bl	1dff0 <k_sem_give>
		if (buffer || !tick_count)
   17838:	2c00      	cmp	r4, #0
   1783a:	d14e      	bne.n	178da <rpmsg_virtio_send_offchannel_raw+0x11e>
   1783c:	2f00      	cmp	r7, #0
   1783e:	d04a      	beq.n	178d6 <rpmsg_virtio_send_offchannel_raw+0x11a>
		if (avail_size != 0)
   17840:	f1b9 0f00 	cmp.w	r9, #0
   17844:	d1dd      	bne.n	17802 <rpmsg_virtio_send_offchannel_raw+0x46>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
   17846:	3f01      	subs	r7, #1
	while (1) {
   17848:	e7ce      	b.n	177e8 <rpmsg_virtio_send_offchannel_raw+0x2c>
	if (role == RPMSG_REMOTE) {
   1784a:	2b01      	cmp	r3, #1
   1784c:	d108      	bne.n	17860 <rpmsg_virtio_send_offchannel_raw+0xa4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   1784e:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   17852:	aa05      	add	r2, sp, #20
   17854:	f10d 0112 	add.w	r1, sp, #18
   17858:	f006 fa66 	bl	1dd28 <virtqueue_get_available_buffer>
   1785c:	4604      	mov	r4, r0
   1785e:	e7e8      	b.n	17832 <rpmsg_virtio_send_offchannel_raw+0x76>
	void *data = NULL;
   17860:	2400      	movs	r4, #0
   17862:	e7e6      	b.n	17832 <rpmsg_virtio_send_offchannel_raw+0x76>
   17864:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   17866:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
   17868:	f104 0110 	add.w	r1, r4, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1786c:	1ac9      	subs	r1, r1, r3
   1786e:	4281      	cmp	r1, r0
   17870:	bf28      	it	cs
   17872:	f04f 31ff 	movcs.w	r1, #4294967295
   17876:	4633      	mov	r3, r6
   17878:	465a      	mov	r2, fp
   1787a:	4638      	mov	r0, r7
   1787c:	f006 f8f9 	bl	1da72 <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
   17880:	4286      	cmp	r6, r0
   17882:	d000      	beq.n	17886 <rpmsg_virtio_send_offchannel_raw+0xca>
   17884:	e7fe      	b.n	17884 <rpmsg_virtio_send_offchannel_raw+0xc8>
   17886:	4640      	mov	r0, r8
   17888:	f006 fbb4 	bl	1dff4 <__metal_mutex_acquire>
   1788c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
   1788e:	9a05      	ldr	r2, [sp, #20]
   17890:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   17892:	b953      	cbnz	r3, 178aa <rpmsg_virtio_send_offchannel_raw+0xee>
		vqbuf.len = len;
   17894:	e9cd 4206 	strd	r4, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   17898:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1789c:	2201      	movs	r2, #1
   1789e:	9400      	str	r4, [sp, #0]
   178a0:	a906      	add	r1, sp, #24
   178a2:	f006 f9a7 	bl	1dbf4 <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   178a6:	b148      	cbz	r0, 178bc <rpmsg_virtio_send_offchannel_raw+0x100>
   178a8:	e7fe      	b.n	178a8 <rpmsg_virtio_send_offchannel_raw+0xec>
	if (role == RPMSG_REMOTE) {
   178aa:	2b01      	cmp	r3, #1
   178ac:	d106      	bne.n	178bc <rpmsg_virtio_send_offchannel_raw+0x100>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   178ae:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   178b2:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   178b6:	f7ff fed5 	bl	17664 <virtqueue_add_consumed_buffer>
   178ba:	e7f4      	b.n	178a6 <rpmsg_virtio_send_offchannel_raw+0xea>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   178bc:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   178c0:	f006 faac 	bl	1de1c <virtqueue_kick>
   178c4:	4640      	mov	r0, r8
   178c6:	f006 fb93 	bl	1dff0 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
   178ca:	4630      	mov	r0, r6
   178cc:	b00d      	add	sp, #52	; 0x34
   178ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
   178d2:	4e0f      	ldr	r6, [pc, #60]	; (17910 <rpmsg_virtio_send_offchannel_raw+0x154>)
   178d4:	e7f9      	b.n	178ca <rpmsg_virtio_send_offchannel_raw+0x10e>
		return RPMSG_ERR_NO_BUFF;
   178d6:	4e0f      	ldr	r6, [pc, #60]	; (17914 <rpmsg_virtio_send_offchannel_raw+0x158>)
   178d8:	e7f7      	b.n	178ca <rpmsg_virtio_send_offchannel_raw+0x10e>
	rp_hdr.src = src;
   178da:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   178dc:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
	rp_hdr.src = src;
   178e0:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
   178e2:	2300      	movs	r3, #0
   178e4:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   178e6:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   178e8:	1a61      	subs	r1, r4, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   178ea:	4281      	cmp	r1, r0
   178ec:	bf28      	it	cs
   178ee:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
   178f2:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   178f4:	4638      	mov	r0, r7
   178f6:	2310      	movs	r3, #16
   178f8:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
   178fa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
   178fe:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   17902:	f006 f8b6 	bl	1da72 <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   17906:	2810      	cmp	r0, #16
   17908:	d0ac      	beq.n	17864 <rpmsg_virtio_send_offchannel_raw+0xa8>
   1790a:	e7fe      	b.n	1790a <rpmsg_virtio_send_offchannel_raw+0x14e>
   1790c:	fffff82b 	.word	0xfffff82b
   17910:	fffff82c 	.word	0xfffff82c
   17914:	fffff82e 	.word	0xfffff82e

00017918 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
   17918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1791c:	460d      	mov	r5, r1
   1791e:	b088      	sub	sp, #32
   17920:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   17922:	2100      	movs	r1, #0
   17924:	227c      	movs	r2, #124	; 0x7c
{
   17926:	4604      	mov	r4, r0
   17928:	461e      	mov	r6, r3
   1792a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
   1792e:	f004 fb30 	bl	1bf92 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   17932:	2201      	movs	r2, #1
   17934:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17938:	4611      	mov	r1, r2
   1793a:	f006 fcd0 	bl	1e2de <z_impl_k_sem_init>
   1793e:	f8d5 8018 	ldr.w	r8, [r5, #24]
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   17942:	4b5d      	ldr	r3, [pc, #372]	; (17ab8 <rpmsg_init_vdev+0x1a0>)
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
   17944:	f1b8 0f01 	cmp.w	r8, #1
	rvdev->vdev = vdev;
   17948:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
   1794a:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   1794c:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1794e:	6763      	str	r3, [r4, #116]	; 0x74
	if (role == RPMSG_REMOTE) {
   17950:	d020      	beq.n	17994 <rpmsg_init_vdev+0x7c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   17952:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   17954:	6a03      	ldr	r3, [r0, #32]
   17956:	689b      	ldr	r3, [r3, #8]
   17958:	4798      	blx	r3
   1795a:	2300      	movs	r3, #0
   1795c:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1795e:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   17962:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   17964:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   17968:	f1b8 0f00 	cmp.w	r8, #0
   1796c:	d01e      	beq.n	179ac <rpmsg_init_vdev+0x94>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   1796e:	f1b8 0f01 	cmp.w	r8, #1
   17972:	d133      	bne.n	179dc <rpmsg_init_vdev+0xc4>
		vq_names[0] = "tx_vq";
   17974:	4b51      	ldr	r3, [pc, #324]	; (17abc <rpmsg_init_vdev+0x1a4>)
   17976:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
   17978:	4b51      	ldr	r3, [pc, #324]	; (17ac0 <rpmsg_init_vdev+0x1a8>)
   1797a:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
   1797c:	4b51      	ldr	r3, [pc, #324]	; (17ac4 <rpmsg_init_vdev+0x1ac>)
   1797e:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
   17980:	4b51      	ldr	r3, [pc, #324]	; (17ac8 <rpmsg_init_vdev+0x1b0>)
   17982:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   17984:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   17986:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   17988:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   1798a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   1798e:	e023      	b.n	179d8 <rpmsg_init_vdev+0xc0>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   17990:	0743      	lsls	r3, r0, #29
   17992:	d4de      	bmi.n	17952 <rpmsg_init_vdev+0x3a>
		status = rpmsg_virtio_get_status(rvdev);
   17994:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
   17996:	6a03      	ldr	r3, [r0, #32]
   17998:	681b      	ldr	r3, [r3, #0]
   1799a:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   1799c:	0642      	lsls	r2, r0, #25
   1799e:	d5f7      	bpl.n	17990 <rpmsg_init_vdev+0x78>
			rpmsg_virtio_set_status(rvdev, 0);
   179a0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   179a2:	2100      	movs	r1, #0
   179a4:	6a03      	ldr	r3, [r0, #32]
   179a6:	685b      	ldr	r3, [r3, #4]
   179a8:	4798      	blx	r3
}
   179aa:	e7f3      	b.n	17994 <rpmsg_init_vdev+0x7c>
		if (!shpool)
   179ac:	f1b9 0f00 	cmp.w	r9, #0
   179b0:	d07d      	beq.n	17aae <rpmsg_init_vdev+0x196>
		if (!shpool->size)
   179b2:	f8d9 3008 	ldr.w	r3, [r9, #8]
   179b6:	2b00      	cmp	r3, #0
   179b8:	d07b      	beq.n	17ab2 <rpmsg_init_vdev+0x19a>
		vq_names[0] = "rx_vq";
   179ba:	4b41      	ldr	r3, [pc, #260]	; (17ac0 <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
   179bc:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
   179c0:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
   179c2:	4b3e      	ldr	r3, [pc, #248]	; (17abc <rpmsg_init_vdev+0x1a4>)
   179c4:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
   179c6:	4b40      	ldr	r3, [pc, #256]	; (17ac8 <rpmsg_init_vdev+0x1b0>)
   179c8:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
   179ca:	4b3e      	ldr	r3, [pc, #248]	; (17ac4 <rpmsg_init_vdev+0x1ac>)
   179cc:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   179ce:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   179d0:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
   179d2:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   179d4:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   179d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   179dc:	ab04      	add	r3, sp, #16
   179de:	9300      	str	r3, [sp, #0]
   179e0:	2202      	movs	r2, #2
   179e2:	2100      	movs	r1, #0
   179e4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
   179e6:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
   179ea:	ab02      	add	r3, sp, #8
   179ec:	f7ff fde2 	bl	175b4 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   179f0:	4607      	mov	r7, r0
   179f2:	2800      	cmp	r0, #0
   179f4:	d157      	bne.n	17aa6 <rpmsg_init_vdev+0x18e>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
   179f6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   179fa:	f006 f9e9 	bl	1ddd0 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
   179fe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
   17a00:	681a      	ldr	r2, [r3, #0]
   17a02:	699b      	ldr	r3, [r3, #24]
   17a04:	6296      	str	r6, [r2, #40]	; 0x28
   17a06:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   17a08:	f1b8 0f00 	cmp.w	r8, #0
   17a0c:	d108      	bne.n	17a20 <rpmsg_init_vdev+0x108>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
   17a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   17a12:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
   17a14:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   17a16:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   17a1a:	895b      	ldrh	r3, [r3, #10]
   17a1c:	4553      	cmp	r3, sl
   17a1e:	d81f      	bhi.n	17a60 <rpmsg_init_vdev+0x148>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
   17a20:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   17a24:	e9c4 4400 	strd	r4, r4, [r4]
   17a28:	b18b      	cbz	r3, 17a4e <rpmsg_init_vdev+0x136>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
   17a2a:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   17a2e:	4927      	ldr	r1, [pc, #156]	; (17acc <rpmsg_init_vdev+0x1b4>)
   17a30:	2220      	movs	r2, #32
   17a32:	4628      	mov	r0, r5
   17a34:	f004 fa32 	bl	1be9c <strncpy>
	ept->addr = src;
   17a38:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
   17a3a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
   17a3e:	4b24      	ldr	r3, [pc, #144]	; (17ad0 <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
   17a40:	4629      	mov	r1, r5
   17a42:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
   17a44:	2300      	movs	r3, #0
   17a46:	4620      	mov	r0, r4
   17a48:	63a3      	str	r3, [r4, #56]	; 0x38
   17a4a:	f006 faaf 	bl	1dfac <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
   17a4e:	f1b8 0f00 	cmp.w	r8, #0
   17a52:	d128      	bne.n	17aa6 <rpmsg_init_vdev+0x18e>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   17a54:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   17a56:	2104      	movs	r1, #4
   17a58:	6a03      	ldr	r3, [r0, #32]
   17a5a:	685b      	ldr	r3, [r3, #4]
   17a5c:	4798      	blx	r3
}
   17a5e:	e022      	b.n	17aa6 <rpmsg_init_vdev+0x18e>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   17a60:	f44f 7100 	mov.w	r1, #512	; 0x200
   17a64:	4648      	mov	r0, r9
   17a66:	f006 fb9d 	bl	1e1a4 <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   17a6a:	4605      	mov	r5, r0
   17a6c:	b1c8      	cbz	r0, 17aa2 <rpmsg_init_vdev+0x18a>
   17a6e:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   17a70:	9006      	str	r0, [sp, #24]
   17a72:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   17a74:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   17a76:	f44f 7300 	mov.w	r3, #512	; 0x200
   17a7a:	4281      	cmp	r1, r0
   17a7c:	bf28      	it	cs
   17a7e:	f04f 31ff 	movcs.w	r1, #4294967295
   17a82:	2200      	movs	r2, #0
   17a84:	4630      	mov	r0, r6
   17a86:	f006 f82f 	bl	1dae8 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   17a8a:	2301      	movs	r3, #1
   17a8c:	2200      	movs	r2, #0
   17a8e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   17a92:	9500      	str	r5, [sp, #0]
   17a94:	a906      	add	r1, sp, #24
   17a96:	f006 f8ad 	bl	1dbf4 <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   17a9a:	b918      	cbnz	r0, 17aa4 <rpmsg_init_vdev+0x18c>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   17a9c:	f10a 0a01 	add.w	sl, sl, #1
   17aa0:	e7b9      	b.n	17a16 <rpmsg_init_vdev+0xfe>
				return RPMSG_ERR_NO_BUFF;
   17aa2:	480c      	ldr	r0, [pc, #48]	; (17ad4 <rpmsg_init_vdev+0x1bc>)
   17aa4:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
   17aa6:	4638      	mov	r0, r7
   17aa8:	b008      	add	sp, #32
   17aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
   17aae:	4f0a      	ldr	r7, [pc, #40]	; (17ad8 <rpmsg_init_vdev+0x1c0>)
   17ab0:	e7f9      	b.n	17aa6 <rpmsg_init_vdev+0x18e>
			return RPMSG_ERR_NO_BUFF;
   17ab2:	4f08      	ldr	r7, [pc, #32]	; (17ad4 <rpmsg_init_vdev+0x1bc>)
   17ab4:	e7f7      	b.n	17aa6 <rpmsg_init_vdev+0x18e>
   17ab6:	bf00      	nop
   17ab8:	000177bd 	.word	0x000177bd
   17abc:	00022d2b 	.word	0x00022d2b
   17ac0:	00022d25 	.word	0x00022d25
   17ac4:	0001dfef 	.word	0x0001dfef
   17ac8:	0001e0bf 	.word	0x0001e0bf
   17acc:	00022d31 	.word	0x00022d31
   17ad0:	0001e001 	.word	0x0001e001
   17ad4:	fffff82e 	.word	0xfffff82e
   17ad8:	fffff82d 	.word	0xfffff82d

00017adc <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   17adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17ade:	4b10      	ldr	r3, [pc, #64]	; (17b20 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   17ae0:	4f10      	ldr	r7, [pc, #64]	; (17b24 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17ae2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   17ae6:	3001      	adds	r0, #1
   17ae8:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   17aec:	42ae      	cmp	r6, r5
   17aee:	d800      	bhi.n	17af2 <z_sys_init_run_level+0x16>
		}
	}
}
   17af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   17af2:	e9d5 3400 	ldrd	r3, r4, [r5]
   17af6:	4620      	mov	r0, r4
   17af8:	4798      	blx	r3
   17afa:	b170      	cbz	r0, 17b1a <z_sys_init_run_level+0x3e>
   17afc:	b16c      	cbz	r4, 17b1a <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   17afe:	2301      	movs	r3, #1
				(dev - __device_start));
   17b00:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   17b02:	4a09      	ldr	r2, [pc, #36]	; (17b28 <z_sys_init_run_level+0x4c>)
   17b04:	1124      	asrs	r4, r4, #4
   17b06:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   17b08:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   17b0c:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   17b10:	fa03 f404 	lsl.w	r4, r3, r4
   17b14:	4304      	orrs	r4, r0
   17b16:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17b1a:	3508      	adds	r5, #8
   17b1c:	e7e6      	b.n	17aec <z_sys_init_run_level+0x10>
   17b1e:	bf00      	nop
   17b20:	0001f314 	.word	0x0001f314
   17b24:	2000856c 	.word	0x2000856c
   17b28:	200085dc 	.word	0x200085dc

00017b2c <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   17b2c:	4b08      	ldr	r3, [pc, #32]	; (17b50 <z_device_ready+0x24>)
   17b2e:	1ac0      	subs	r0, r0, r3
   17b30:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   17b32:	4b08      	ldr	r3, [pc, #32]	; (17b54 <z_device_ready+0x28>)
   17b34:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   17b36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   17b3a:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   17b3c:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   17b40:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   17b44:	4210      	tst	r0, r2
}
   17b46:	bf0c      	ite	eq
   17b48:	4618      	moveq	r0, r3
   17b4a:	2000      	movne	r0, #0
   17b4c:	4770      	bx	lr
   17b4e:	bf00      	nop
   17b50:	2000856c 	.word	0x2000856c
   17b54:	200085dc 	.word	0x200085dc

00017b58 <z_impl_device_get_binding>:
{
   17b58:	b570      	push	{r4, r5, r6, lr}
   17b5a:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   17b5c:	4c0f      	ldr	r4, [pc, #60]	; (17b9c <z_impl_device_get_binding+0x44>)
   17b5e:	4e10      	ldr	r6, [pc, #64]	; (17ba0 <z_impl_device_get_binding+0x48>)
   17b60:	42b4      	cmp	r4, r6
   17b62:	d104      	bne.n	17b6e <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   17b64:	4c0d      	ldr	r4, [pc, #52]	; (17b9c <z_impl_device_get_binding+0x44>)
   17b66:	42b4      	cmp	r4, r6
   17b68:	d10a      	bne.n	17b80 <z_impl_device_get_binding+0x28>
	return NULL;
   17b6a:	2400      	movs	r4, #0
   17b6c:	e014      	b.n	17b98 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   17b6e:	4620      	mov	r0, r4
   17b70:	f7ff ffdc 	bl	17b2c <z_device_ready>
   17b74:	b110      	cbz	r0, 17b7c <z_impl_device_get_binding+0x24>
   17b76:	6823      	ldr	r3, [r4, #0]
   17b78:	42ab      	cmp	r3, r5
   17b7a:	d00d      	beq.n	17b98 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   17b7c:	3410      	adds	r4, #16
   17b7e:	e7ef      	b.n	17b60 <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17b80:	4620      	mov	r0, r4
   17b82:	f7ff ffd3 	bl	17b2c <z_device_ready>
   17b86:	b908      	cbnz	r0, 17b8c <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   17b88:	3410      	adds	r4, #16
   17b8a:	e7ec      	b.n	17b66 <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17b8c:	4628      	mov	r0, r5
   17b8e:	6821      	ldr	r1, [r4, #0]
   17b90:	f004 f9a6 	bl	1bee0 <strcmp>
   17b94:	2800      	cmp	r0, #0
   17b96:	d1f7      	bne.n	17b88 <z_impl_device_get_binding+0x30>
}
   17b98:	4620      	mov	r0, r4
   17b9a:	bd70      	pop	{r4, r5, r6, pc}
   17b9c:	2000856c 	.word	0x2000856c
   17ba0:	200085dc 	.word	0x200085dc

00017ba4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   17ba4:	4b01      	ldr	r3, [pc, #4]	; (17bac <z_impl_z_errno+0x8>)
   17ba6:	6898      	ldr	r0, [r3, #8]
}
   17ba8:	3070      	adds	r0, #112	; 0x70
   17baa:	4770      	bx	lr
   17bac:	2000b14c 	.word	0x2000b14c

00017bb0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   17bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17bb2:	4604      	mov	r4, r0
   17bb4:	460e      	mov	r6, r1
	__asm__ volatile(
   17bb6:	f04f 0320 	mov.w	r3, #32
   17bba:	f3ef 8711 	mrs	r7, BASEPRI
   17bbe:	f383 8811 	msr	BASEPRI, r3
   17bc2:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   17bc6:	f001 fd97 	bl	196f8 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   17bca:	2200      	movs	r2, #0
   17bcc:	2c04      	cmp	r4, #4
   17bce:	bf98      	it	ls
   17bd0:	4b1d      	ldrls	r3, [pc, #116]	; (17c48 <z_fatal_error+0x98>)
   17bd2:	4605      	mov	r5, r0
	switch (reason) {
   17bd4:	bf94      	ite	ls
   17bd6:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   17bda:	4b1c      	ldrhi	r3, [pc, #112]	; (17c4c <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   17bdc:	9200      	str	r2, [sp, #0]
   17bde:	2145      	movs	r1, #69	; 0x45
   17be0:	4622      	mov	r2, r4
   17be2:	481b      	ldr	r0, [pc, #108]	; (17c50 <z_fatal_error+0xa0>)
   17be4:	f002 ff66 	bl	1aab4 <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   17be8:	b13e      	cbz	r6, 17bfa <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   17bea:	69f3      	ldr	r3, [r6, #28]
   17bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
   17bf0:	b11b      	cbz	r3, 17bfa <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   17bf2:	2145      	movs	r1, #69	; 0x45
   17bf4:	4817      	ldr	r0, [pc, #92]	; (17c54 <z_fatal_error+0xa4>)
   17bf6:	f002 ff5d 	bl	1aab4 <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   17bfa:	b135      	cbz	r5, 17c0a <z_fatal_error+0x5a>
   17bfc:	4628      	mov	r0, r5
   17bfe:	f006 fb8b 	bl	1e318 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   17c02:	4603      	mov	r3, r0
   17c04:	b108      	cbz	r0, 17c0a <z_fatal_error+0x5a>
   17c06:	7802      	ldrb	r2, [r0, #0]
   17c08:	b902      	cbnz	r2, 17c0c <z_fatal_error+0x5c>
		thread_name = "unknown";
   17c0a:	4b13      	ldr	r3, [pc, #76]	; (17c58 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   17c0c:	462a      	mov	r2, r5
   17c0e:	2145      	movs	r1, #69	; 0x45
   17c10:	4812      	ldr	r0, [pc, #72]	; (17c5c <z_fatal_error+0xac>)
   17c12:	f002 ff4f 	bl	1aab4 <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   17c16:	4631      	mov	r1, r6
   17c18:	4620      	mov	r0, r4
   17c1a:	f7ff f8ad 	bl	16d78 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   17c1e:	2c04      	cmp	r4, #4
   17c20:	d108      	bne.n	17c34 <z_fatal_error+0x84>
   17c22:	490f      	ldr	r1, [pc, #60]	; (17c60 <z_fatal_error+0xb0>)
   17c24:	480f      	ldr	r0, [pc, #60]	; (17c64 <z_fatal_error+0xb4>)
   17c26:	228e      	movs	r2, #142	; 0x8e
   17c28:	f002 ff44 	bl	1aab4 <printk>
   17c2c:	218e      	movs	r1, #142	; 0x8e
   17c2e:	480c      	ldr	r0, [pc, #48]	; (17c60 <z_fatal_error+0xb0>)
   17c30:	f003 f9e6 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   17c34:	f387 8811 	msr	BASEPRI, r7
   17c38:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   17c3c:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   17c3e:	b003      	add	sp, #12
   17c40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   17c44:	f7f6 bb22 	b.w	e28c <z_impl_k_thread_abort>
   17c48:	0001f32c 	.word	0x0001f32c
   17c4c:	00022d34 	.word	0x00022d34
   17c50:	00022d4a 	.word	0x00022d4a
   17c54:	00022d77 	.word	0x00022d77
   17c58:	00022d42 	.word	0x00022d42
   17c5c:	00022d9d 	.word	0x00022d9d
   17c60:	00022dba 	.word	0x00022dba
   17c64:	0002003d 	.word	0x0002003d

00017c68 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   17c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17c6a:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   17c6c:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   17c6e:	4e15      	ldr	r6, [pc, #84]	; (17cc4 <idle+0x5c>)
	__asm__ volatile(
   17c70:	f04f 0220 	mov.w	r2, #32
   17c74:	f3ef 8311 	mrs	r3, BASEPRI
   17c78:	f382 8811 	msr	BASEPRI, r2
   17c7c:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   17c80:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   17c82:	b188      	cbz	r0, 17ca8 <idle+0x40>
			cpu->pending_abort = NULL;
   17c84:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   17c86:	f383 8811 	msr	BASEPRI, r3
   17c8a:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   17c8e:	f001 f93b 	bl	18f08 <z_thread_single_abort>
	__asm__ volatile(
   17c92:	f04f 0320 	mov.w	r3, #32
   17c96:	f3ef 8011 	mrs	r0, BASEPRI
   17c9a:	f383 8811 	msr	BASEPRI, r3
   17c9e:	f3bf 8f6f 	isb	sy
   17ca2:	f006 fae2 	bl	1e26a <z_reschedule_irqlock>
			continue;
   17ca6:	e7e3      	b.n	17c70 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   17ca8:	f002 f998 	bl	19fdc <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   17cac:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   17cae:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   17cb0:	2802      	cmp	r0, #2
   17cb2:	bfd8      	it	le
   17cb4:	4608      	movle	r0, r1
   17cb6:	f002 f9c7 	bl	1a048 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   17cba:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   17cbc:	f7f6 f82c 	bl	dd18 <arch_cpu_idle>
}
   17cc0:	e7d6      	b.n	17c70 <idle+0x8>
   17cc2:	bf00      	nop
   17cc4:	2000b14c 	.word	0x2000b14c

00017cc8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   17cc8:	4802      	ldr	r0, [pc, #8]	; (17cd4 <z_bss_zero+0xc>)
   17cca:	4a03      	ldr	r2, [pc, #12]	; (17cd8 <z_bss_zero+0x10>)
   17ccc:	2100      	movs	r1, #0
   17cce:	1a12      	subs	r2, r2, r0
   17cd0:	f004 b95f 	b.w	1bf92 <memset>
   17cd4:	200087d8 	.word	0x200087d8
   17cd8:	2000f9f8 	.word	0x2000f9f8

00017cdc <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   17cdc:	2201      	movs	r2, #1
{
   17cde:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   17ce0:	4b09      	ldr	r3, [pc, #36]	; (17d08 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   17ce2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   17ce4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   17ce6:	f7ff fef9 	bl	17adc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   17cea:	f002 f819 	bl	19d20 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   17cee:	2003      	movs	r0, #3
   17cf0:	f7ff fef4 	bl	17adc <z_sys_init_run_level>

	z_init_static_threads();
   17cf4:	f001 fe76 	bl	199e4 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   17cf8:	f7f1 f9c6 	bl	9088 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   17cfc:	4a03      	ldr	r2, [pc, #12]	; (17d0c <bg_thread_main+0x30>)
   17cfe:	7b13      	ldrb	r3, [r2, #12]
   17d00:	f023 0301 	bic.w	r3, r3, #1
   17d04:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   17d06:	bd08      	pop	{r3, pc}
   17d08:	2000f9f6 	.word	0x2000f9f6
   17d0c:	2000a4b0 	.word	0x2000a4b0

00017d10 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   17d10:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   17d14:	4b34      	ldr	r3, [pc, #208]	; (17de8 <z_cstart+0xd8>)
   17d16:	b0ab      	sub	sp, #172	; 0xac
	uint32_t msp =
   17d18:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   17d1c:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   17d20:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17d24:	2400      	movs	r4, #0
   17d26:	23e0      	movs	r3, #224	; 0xe0
   17d28:	4d30      	ldr	r5, [pc, #192]	; (17dec <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17d2a:	f04f 0b01 	mov.w	fp, #1
   17d2e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   17d32:	77ec      	strb	r4, [r5, #31]
   17d34:	762c      	strb	r4, [r5, #24]
   17d36:	766c      	strb	r4, [r5, #25]
   17d38:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   17d3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   17d3c:	4e2c      	ldr	r6, [pc, #176]	; (17df0 <z_cstart+0xe0>)
   17d3e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   17d42:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   17d44:	f7f6 fa6a 	bl	e21c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   17d48:	f7f5 ffe0 	bl	dd0c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   17d4c:	f04f 33ff 	mov.w	r3, #4294967295
   17d50:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   17d52:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   17d54:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   17d58:	4d26      	ldr	r5, [pc, #152]	; (17df4 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   17d5a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   17d5e:	ab06      	add	r3, sp, #24
   17d60:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   17d62:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   17d64:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   17d68:	f7ff feb8 	bl	17adc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   17d6c:	2001      	movs	r0, #1
   17d6e:	f7ff feb5 	bl	17adc <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17d72:	f8df a084 	ldr.w	sl, [pc, #132]	; 17df8 <z_cstart+0xe8>
	z_sched_init();
   17d76:	f001 fb77 	bl	19468 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17d7a:	4b20      	ldr	r3, [pc, #128]	; (17dfc <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   17d7c:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   17d82:	491f      	ldr	r1, [pc, #124]	; (17e00 <z_cstart+0xf0>)
   17d84:	9305      	str	r3, [sp, #20]
   17d86:	4630      	mov	r0, r6
   17d88:	4653      	mov	r3, sl
   17d8a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   17d8e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   17d92:	9400      	str	r4, [sp, #0]
   17d94:	f001 fd74 	bl	19880 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17d98:	7b73      	ldrb	r3, [r6, #13]
   17d9a:	4680      	mov	r8, r0
   17d9c:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   17da0:	4630      	mov	r0, r6
   17da2:	7373      	strb	r3, [r6, #13]
   17da4:	f000 feec 	bl	18b80 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   17da8:	230f      	movs	r3, #15
   17daa:	4f16      	ldr	r7, [pc, #88]	; (17e04 <z_cstart+0xf4>)
   17dac:	f44f 72a0 	mov.w	r2, #320	; 0x140
   17db0:	e9cd 4302 	strd	r4, r3, [sp, #8]
   17db4:	4914      	ldr	r1, [pc, #80]	; (17e08 <z_cstart+0xf8>)
   17db6:	4b15      	ldr	r3, [pc, #84]	; (17e0c <z_cstart+0xfc>)
   17db8:	4638      	mov	r0, r7
   17dba:	e9cd b404 	strd	fp, r4, [sp, #16]
   17dbe:	e9cd 5400 	strd	r5, r4, [sp]
   17dc2:	f001 fd5d 	bl	19880 <z_setup_new_thread>
   17dc6:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17dc8:	4652      	mov	r2, sl
   17dca:	f023 0304 	bic.w	r3, r3, #4
   17dce:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   17dd0:	f105 031c 	add.w	r3, r5, #28
   17dd4:	4641      	mov	r1, r8
   17dd6:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   17dd8:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   17ddc:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   17dde:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   17de0:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17de4:	f7f5 ff78 	bl	dcd8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   17de8:	20013c50 	.word	0x20013c50
   17dec:	e000ed00 	.word	0xe000ed00
   17df0:	2000a4b0 	.word	0x2000a4b0
   17df4:	2000b14c 	.word	0x2000b14c
   17df8:	00017cdd 	.word	0x00017cdd
   17dfc:	00022e26 	.word	0x00022e26
   17e00:	20011b10 	.word	0x20011b10
   17e04:	2000a420 	.word	0x2000a420
   17e08:	20013b10 	.word	0x20013b10
   17e0c:	00017c69 	.word	0x00017c69

00017e10 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   17e10:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   17e12:	4c0c      	ldr	r4, [pc, #48]	; (17e44 <statics_init+0x34>)
   17e14:	4d0c      	ldr	r5, [pc, #48]	; (17e48 <statics_init+0x38>)
   17e16:	4e0d      	ldr	r6, [pc, #52]	; (17e4c <statics_init+0x3c>)
   17e18:	42ac      	cmp	r4, r5
   17e1a:	d908      	bls.n	17e2e <statics_init+0x1e>
   17e1c:	4631      	mov	r1, r6
   17e1e:	480c      	ldr	r0, [pc, #48]	; (17e50 <statics_init+0x40>)
   17e20:	2215      	movs	r2, #21
   17e22:	f002 fe47 	bl	1aab4 <printk>
   17e26:	2115      	movs	r1, #21
   17e28:	4630      	mov	r0, r6
   17e2a:	f003 f8e9 	bl	1b000 <assert_post_action>
   17e2e:	42ac      	cmp	r4, r5
   17e30:	d301      	bcc.n	17e36 <statics_init+0x26>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   17e32:	2000      	movs	r0, #0
   17e34:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   17e36:	4620      	mov	r0, r4
   17e38:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   17e3c:	f006 f9c7 	bl	1e1ce <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   17e40:	3418      	adds	r4, #24
   17e42:	e7e9      	b.n	17e18 <statics_init+0x8>
   17e44:	20008634 	.word	0x20008634
   17e48:	2000864c 	.word	0x2000864c
   17e4c:	00022e2e 	.word	0x00022e2e
   17e50:	0002003d 	.word	0x0002003d

00017e54 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   17e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e58:	b085      	sub	sp, #20
   17e5a:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   17e5e:	4606      	mov	r6, r0
   17e60:	468b      	mov	fp, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   17e62:	4648      	mov	r0, r9
   17e64:	4639      	mov	r1, r7
{
   17e66:	4690      	mov	r8, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   17e68:	f006 fab7 	bl	1e3da <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   17e6c:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   17e70:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17e74:	f04f 0320 	mov.w	r3, #32
   17e78:	f3ef 8411 	mrs	r4, BASEPRI
   17e7c:	f383 8811 	msr	BASEPRI, r3
   17e80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17e84:	4628      	mov	r0, r5
   17e86:	f001 fe29 	bl	19adc <z_spin_lock_valid>
   17e8a:	b940      	cbnz	r0, 17e9e <k_heap_aligned_alloc+0x4a>
   17e8c:	4932      	ldr	r1, [pc, #200]	; (17f58 <k_heap_aligned_alloc+0x104>)
   17e8e:	4833      	ldr	r0, [pc, #204]	; (17f5c <k_heap_aligned_alloc+0x108>)
   17e90:	227c      	movs	r2, #124	; 0x7c
   17e92:	f002 fe0f 	bl	1aab4 <printk>
   17e96:	217c      	movs	r1, #124	; 0x7c
   17e98:	482f      	ldr	r0, [pc, #188]	; (17f58 <k_heap_aligned_alloc+0x104>)
   17e9a:	f003 f8b1 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   17e9e:	4628      	mov	r0, r5
   17ea0:	f001 fe38 	bl	19b14 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17ea4:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   17ea8:	b15b      	cbz	r3, 17ec2 <k_heap_aligned_alloc+0x6e>
   17eaa:	ea59 0307 	orrs.w	r3, r9, r7
   17eae:	d008      	beq.n	17ec2 <k_heap_aligned_alloc+0x6e>
   17eb0:	492b      	ldr	r1, [pc, #172]	; (17f60 <k_heap_aligned_alloc+0x10c>)
   17eb2:	482a      	ldr	r0, [pc, #168]	; (17f5c <k_heap_aligned_alloc+0x108>)
   17eb4:	2224      	movs	r2, #36	; 0x24
   17eb6:	f002 fdfd 	bl	1aab4 <printk>
   17eba:	2124      	movs	r1, #36	; 0x24
   17ebc:	4828      	ldr	r0, [pc, #160]	; (17f60 <k_heap_aligned_alloc+0x10c>)
   17ebe:	f003 f89f 	bl	1b000 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17ec2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 17f58 <k_heap_aligned_alloc+0x104>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17ec6:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   17eca:	4642      	mov	r2, r8
   17ecc:	4659      	mov	r1, fp
   17ece:	4630      	mov	r0, r6
   17ed0:	f7f3 f816 	bl	af00 <sys_heap_aligned_alloc>
   17ed4:	4607      	mov	r7, r0
		now = z_tick_get();
   17ed6:	f002 f993 	bl	1a200 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   17eda:	b1a7      	cbz	r7, 17f06 <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17edc:	4628      	mov	r0, r5
   17ede:	f001 fe0b 	bl	19af8 <z_spin_unlock_valid>
   17ee2:	b940      	cbnz	r0, 17ef6 <k_heap_aligned_alloc+0xa2>
   17ee4:	491c      	ldr	r1, [pc, #112]	; (17f58 <k_heap_aligned_alloc+0x104>)
   17ee6:	481d      	ldr	r0, [pc, #116]	; (17f5c <k_heap_aligned_alloc+0x108>)
   17ee8:	22a7      	movs	r2, #167	; 0xa7
   17eea:	f002 fde3 	bl	1aab4 <printk>
   17eee:	21a7      	movs	r1, #167	; 0xa7
   17ef0:	4819      	ldr	r0, [pc, #100]	; (17f58 <k_heap_aligned_alloc+0x104>)
   17ef2:	f003 f885 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   17ef6:	f384 8811 	msr	BASEPRI, r4
   17efa:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   17efe:	4638      	mov	r0, r7
   17f00:	b005      	add	sp, #20
   17f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   17f06:	9b02      	ldr	r3, [sp, #8]
   17f08:	1a18      	subs	r0, r3, r0
   17f0a:	9b03      	ldr	r3, [sp, #12]
   17f0c:	eb63 0101 	sbc.w	r1, r3, r1
   17f10:	2801      	cmp	r0, #1
   17f12:	f171 0300 	sbcs.w	r3, r1, #0
   17f16:	dbe1      	blt.n	17edc <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17f18:	e9cd 0100 	strd	r0, r1, [sp]
   17f1c:	4652      	mov	r2, sl
   17f1e:	4621      	mov	r1, r4
   17f20:	4628      	mov	r0, r5
   17f22:	f001 f997 	bl	19254 <z_pend_curr>
	__asm__ volatile(
   17f26:	f04f 0320 	mov.w	r3, #32
   17f2a:	f3ef 8411 	mrs	r4, BASEPRI
   17f2e:	f383 8811 	msr	BASEPRI, r3
   17f32:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17f36:	4628      	mov	r0, r5
   17f38:	f001 fdd0 	bl	19adc <z_spin_lock_valid>
   17f3c:	b940      	cbnz	r0, 17f50 <k_heap_aligned_alloc+0xfc>
   17f3e:	4649      	mov	r1, r9
   17f40:	4806      	ldr	r0, [pc, #24]	; (17f5c <k_heap_aligned_alloc+0x108>)
   17f42:	227c      	movs	r2, #124	; 0x7c
   17f44:	f002 fdb6 	bl	1aab4 <printk>
   17f48:	217c      	movs	r1, #124	; 0x7c
   17f4a:	4648      	mov	r0, r9
   17f4c:	f003 f858 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   17f50:	4628      	mov	r0, r5
   17f52:	f001 fddf 	bl	19b14 <z_spin_lock_set_owner>
	return k;
   17f56:	e7b8      	b.n	17eca <k_heap_aligned_alloc+0x76>
   17f58:	00020077 	.word	0x00020077
   17f5c:	0002003d 	.word	0x0002003d
   17f60:	00022e2e 	.word	0x00022e2e

00017f64 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   17f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f66:	4604      	mov	r4, r0
   17f68:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   17f6a:	f100 0514 	add.w	r5, r0, #20
   17f6e:	f04f 0320 	mov.w	r3, #32
   17f72:	f3ef 8711 	mrs	r7, BASEPRI
   17f76:	f383 8811 	msr	BASEPRI, r3
   17f7a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17f7e:	4628      	mov	r0, r5
   17f80:	f001 fdac 	bl	19adc <z_spin_lock_valid>
   17f84:	b940      	cbnz	r0, 17f98 <k_heap_free+0x34>
   17f86:	4916      	ldr	r1, [pc, #88]	; (17fe0 <k_heap_free+0x7c>)
   17f88:	4816      	ldr	r0, [pc, #88]	; (17fe4 <k_heap_free+0x80>)
   17f8a:	227c      	movs	r2, #124	; 0x7c
   17f8c:	f002 fd92 	bl	1aab4 <printk>
   17f90:	217c      	movs	r1, #124	; 0x7c
   17f92:	4813      	ldr	r0, [pc, #76]	; (17fe0 <k_heap_free+0x7c>)
   17f94:	f003 f834 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   17f98:	4628      	mov	r0, r5
   17f9a:	f001 fdbb 	bl	19b14 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   17f9e:	4620      	mov	r0, r4
   17fa0:	4631      	mov	r1, r6
   17fa2:	f7f2 ff6b 	bl	ae7c <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   17fa6:	f104 000c 	add.w	r0, r4, #12
   17faa:	f006 f988 	bl	1e2be <z_unpend_all>
   17fae:	b128      	cbz	r0, 17fbc <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   17fb0:	4639      	mov	r1, r7
   17fb2:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   17fb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   17fb8:	f000 bc0e 	b.w	187d8 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17fbc:	4628      	mov	r0, r5
   17fbe:	f001 fd9b 	bl	19af8 <z_spin_unlock_valid>
   17fc2:	b940      	cbnz	r0, 17fd6 <k_heap_free+0x72>
   17fc4:	4906      	ldr	r1, [pc, #24]	; (17fe0 <k_heap_free+0x7c>)
   17fc6:	4807      	ldr	r0, [pc, #28]	; (17fe4 <k_heap_free+0x80>)
   17fc8:	22a7      	movs	r2, #167	; 0xa7
   17fca:	f002 fd73 	bl	1aab4 <printk>
   17fce:	21a7      	movs	r1, #167	; 0xa7
   17fd0:	4803      	ldr	r0, [pc, #12]	; (17fe0 <k_heap_free+0x7c>)
   17fd2:	f003 f815 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   17fd6:	f387 8811 	msr	BASEPRI, r7
   17fda:	f3bf 8f6f 	isb	sy
}
   17fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17fe0:	00020077 	.word	0x00020077
   17fe4:	0002003d 	.word	0x0002003d

00017fe8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   17fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17fea:	4c14      	ldr	r4, [pc, #80]	; (1803c <init_mem_slab_module+0x54>)
   17fec:	4d14      	ldr	r5, [pc, #80]	; (18040 <init_mem_slab_module+0x58>)
   17fee:	4e15      	ldr	r6, [pc, #84]	; (18044 <init_mem_slab_module+0x5c>)
   17ff0:	42ac      	cmp	r4, r5
   17ff2:	d908      	bls.n	18006 <init_mem_slab_module+0x1e>
   17ff4:	4631      	mov	r1, r6
   17ff6:	4814      	ldr	r0, [pc, #80]	; (18048 <init_mem_slab_module+0x60>)
   17ff8:	2242      	movs	r2, #66	; 0x42
   17ffa:	f002 fd5b 	bl	1aab4 <printk>
   17ffe:	2142      	movs	r1, #66	; 0x42
   18000:	4630      	mov	r0, r6
   18002:	f002 fffd 	bl	1b000 <assert_post_action>
   18006:	42ac      	cmp	r4, r5
   18008:	d301      	bcc.n	1800e <init_mem_slab_module+0x26>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1800a:	2000      	movs	r0, #0
	return rc;
}
   1800c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1800e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   18012:	ea42 0301 	orr.w	r3, r2, r1
   18016:	f013 0303 	ands.w	r3, r3, #3
   1801a:	d10b      	bne.n	18034 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   1801c:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   1801e:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   18020:	4283      	cmp	r3, r0
   18022:	d101      	bne.n	18028 <init_mem_slab_module+0x40>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   18024:	341c      	adds	r4, #28
   18026:	e7e3      	b.n	17ff0 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   18028:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1802a:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   1802c:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   1802e:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   18030:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   18032:	e7f5      	b.n	18020 <init_mem_slab_module+0x38>
	return rc;
   18034:	f06f 0015 	mvn.w	r0, #21
   18038:	e7e8      	b.n	1800c <init_mem_slab_module+0x24>
   1803a:	bf00      	nop
   1803c:	200085e0 	.word	0x200085e0
   18040:	20008634 	.word	0x20008634
   18044:	00022e50 	.word	0x00022e50
   18048:	0002003d 	.word	0x0002003d

0001804c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1804c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18050:	4604      	mov	r4, r0
   18052:	460d      	mov	r5, r1
   18054:	4617      	mov	r7, r2
   18056:	461e      	mov	r6, r3
	__asm__ volatile(
   18058:	f04f 0320 	mov.w	r3, #32
   1805c:	f3ef 8811 	mrs	r8, BASEPRI
   18060:	f383 8811 	msr	BASEPRI, r3
   18064:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18068:	4821      	ldr	r0, [pc, #132]	; (180f0 <k_mem_slab_alloc+0xa4>)
   1806a:	f001 fd37 	bl	19adc <z_spin_lock_valid>
   1806e:	b940      	cbnz	r0, 18082 <k_mem_slab_alloc+0x36>
   18070:	4920      	ldr	r1, [pc, #128]	; (180f4 <k_mem_slab_alloc+0xa8>)
   18072:	4821      	ldr	r0, [pc, #132]	; (180f8 <k_mem_slab_alloc+0xac>)
   18074:	227c      	movs	r2, #124	; 0x7c
   18076:	f002 fd1d 	bl	1aab4 <printk>
   1807a:	217c      	movs	r1, #124	; 0x7c
   1807c:	481d      	ldr	r0, [pc, #116]	; (180f4 <k_mem_slab_alloc+0xa8>)
   1807e:	f002 ffbf 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   18082:	481b      	ldr	r0, [pc, #108]	; (180f0 <k_mem_slab_alloc+0xa4>)
   18084:	f001 fd46 	bl	19b14 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   18088:	6963      	ldr	r3, [r4, #20]
   1808a:	b1c3      	cbz	r3, 180be <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   1808c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   1808e:	681b      	ldr	r3, [r3, #0]
   18090:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   18092:	69a3      	ldr	r3, [r4, #24]
   18094:	3301      	adds	r3, #1
   18096:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   18098:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1809a:	4815      	ldr	r0, [pc, #84]	; (180f0 <k_mem_slab_alloc+0xa4>)
   1809c:	f001 fd2c 	bl	19af8 <z_spin_unlock_valid>
   180a0:	b940      	cbnz	r0, 180b4 <k_mem_slab_alloc+0x68>
   180a2:	4914      	ldr	r1, [pc, #80]	; (180f4 <k_mem_slab_alloc+0xa8>)
   180a4:	4814      	ldr	r0, [pc, #80]	; (180f8 <k_mem_slab_alloc+0xac>)
   180a6:	22a7      	movs	r2, #167	; 0xa7
   180a8:	f002 fd04 	bl	1aab4 <printk>
   180ac:	21a7      	movs	r1, #167	; 0xa7
   180ae:	4811      	ldr	r0, [pc, #68]	; (180f4 <k_mem_slab_alloc+0xa8>)
   180b0:	f002 ffa6 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   180b4:	f388 8811 	msr	BASEPRI, r8
   180b8:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   180bc:	e013      	b.n	180e6 <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   180be:	ea57 0206 	orrs.w	r2, r7, r6
   180c2:	d103      	bne.n	180cc <k_mem_slab_alloc+0x80>
		result = -ENOMEM;
   180c4:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   180c8:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   180ca:	e7e6      	b.n	1809a <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   180cc:	4622      	mov	r2, r4
   180ce:	4641      	mov	r1, r8
   180d0:	e9cd 7600 	strd	r7, r6, [sp]
   180d4:	4806      	ldr	r0, [pc, #24]	; (180f0 <k_mem_slab_alloc+0xa4>)
   180d6:	f001 f8bd 	bl	19254 <z_pend_curr>
		if (result == 0) {
   180da:	4604      	mov	r4, r0
   180dc:	b918      	cbnz	r0, 180e6 <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   180de:	4b07      	ldr	r3, [pc, #28]	; (180fc <k_mem_slab_alloc+0xb0>)
   180e0:	689b      	ldr	r3, [r3, #8]
   180e2:	695b      	ldr	r3, [r3, #20]
   180e4:	602b      	str	r3, [r5, #0]
}
   180e6:	4620      	mov	r0, r4
   180e8:	b002      	add	sp, #8
   180ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   180ee:	bf00      	nop
   180f0:	2000b144 	.word	0x2000b144
   180f4:	00020077 	.word	0x00020077
   180f8:	0002003d 	.word	0x0002003d
   180fc:	2000b14c 	.word	0x2000b14c

00018100 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   18100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18102:	4604      	mov	r4, r0
   18104:	460d      	mov	r5, r1
	__asm__ volatile(
   18106:	f04f 0320 	mov.w	r3, #32
   1810a:	f3ef 8611 	mrs	r6, BASEPRI
   1810e:	f383 8811 	msr	BASEPRI, r3
   18112:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18116:	481e      	ldr	r0, [pc, #120]	; (18190 <k_mem_slab_free+0x90>)
   18118:	f001 fce0 	bl	19adc <z_spin_lock_valid>
   1811c:	b940      	cbnz	r0, 18130 <k_mem_slab_free+0x30>
   1811e:	491d      	ldr	r1, [pc, #116]	; (18194 <k_mem_slab_free+0x94>)
   18120:	481d      	ldr	r0, [pc, #116]	; (18198 <k_mem_slab_free+0x98>)
   18122:	227c      	movs	r2, #124	; 0x7c
   18124:	f002 fcc6 	bl	1aab4 <printk>
   18128:	217c      	movs	r1, #124	; 0x7c
   1812a:	481a      	ldr	r0, [pc, #104]	; (18194 <k_mem_slab_free+0x94>)
   1812c:	f002 ff68 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   18130:	4817      	ldr	r0, [pc, #92]	; (18190 <k_mem_slab_free+0x90>)
   18132:	f001 fcef 	bl	19b14 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   18136:	6967      	ldr	r7, [r4, #20]
   18138:	b97f      	cbnz	r7, 1815a <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1813a:	4620      	mov	r0, r4
   1813c:	f001 f92c 	bl	19398 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   18140:	b158      	cbz	r0, 1815a <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   18142:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   18144:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   18148:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1814a:	f000 fd19 	bl	18b80 <z_ready_thread>
			z_reschedule(&lock, key);
   1814e:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   18150:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   18154:	480e      	ldr	r0, [pc, #56]	; (18190 <k_mem_slab_free+0x90>)
   18156:	f000 bb3f 	b.w	187d8 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1815a:	682b      	ldr	r3, [r5, #0]
   1815c:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1815e:	480c      	ldr	r0, [pc, #48]	; (18190 <k_mem_slab_free+0x90>)
   18160:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   18162:	682b      	ldr	r3, [r5, #0]
   18164:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   18166:	69a3      	ldr	r3, [r4, #24]
   18168:	3b01      	subs	r3, #1
   1816a:	61a3      	str	r3, [r4, #24]
   1816c:	f001 fcc4 	bl	19af8 <z_spin_unlock_valid>
   18170:	b940      	cbnz	r0, 18184 <k_mem_slab_free+0x84>
   18172:	4908      	ldr	r1, [pc, #32]	; (18194 <k_mem_slab_free+0x94>)
   18174:	4808      	ldr	r0, [pc, #32]	; (18198 <k_mem_slab_free+0x98>)
   18176:	22a7      	movs	r2, #167	; 0xa7
   18178:	f002 fc9c 	bl	1aab4 <printk>
   1817c:	21a7      	movs	r1, #167	; 0xa7
   1817e:	4805      	ldr	r0, [pc, #20]	; (18194 <k_mem_slab_free+0x94>)
   18180:	f002 ff3e 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   18184:	f386 8811 	msr	BASEPRI, r6
   18188:	f3bf 8f6f 	isb	sy
}
   1818c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1818e:	bf00      	nop
   18190:	2000b144 	.word	0x2000b144
   18194:	00020077 	.word	0x00020077
   18198:	0002003d 	.word	0x0002003d

0001819c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1819c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   181a0:	4604      	mov	r4, r0
   181a2:	4617      	mov	r7, r2
   181a4:	461e      	mov	r6, r3
   181a6:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   181aa:	b143      	cbz	r3, 181be <z_impl_k_mutex_lock+0x22>
   181ac:	495c      	ldr	r1, [pc, #368]	; (18320 <z_impl_k_mutex_lock+0x184>)
   181ae:	485d      	ldr	r0, [pc, #372]	; (18324 <z_impl_k_mutex_lock+0x188>)
   181b0:	227d      	movs	r2, #125	; 0x7d
   181b2:	f002 fc7f 	bl	1aab4 <printk>
   181b6:	217d      	movs	r1, #125	; 0x7d
   181b8:	4859      	ldr	r0, [pc, #356]	; (18320 <z_impl_k_mutex_lock+0x184>)
   181ba:	f002 ff21 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   181be:	f04f 0320 	mov.w	r3, #32
   181c2:	f3ef 8811 	mrs	r8, BASEPRI
   181c6:	f383 8811 	msr	BASEPRI, r3
   181ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   181ce:	4856      	ldr	r0, [pc, #344]	; (18328 <z_impl_k_mutex_lock+0x18c>)
   181d0:	f001 fc84 	bl	19adc <z_spin_lock_valid>
   181d4:	b940      	cbnz	r0, 181e8 <z_impl_k_mutex_lock+0x4c>
   181d6:	4955      	ldr	r1, [pc, #340]	; (1832c <z_impl_k_mutex_lock+0x190>)
   181d8:	4852      	ldr	r0, [pc, #328]	; (18324 <z_impl_k_mutex_lock+0x188>)
   181da:	227c      	movs	r2, #124	; 0x7c
   181dc:	f002 fc6a 	bl	1aab4 <printk>
   181e0:	217c      	movs	r1, #124	; 0x7c
   181e2:	4852      	ldr	r0, [pc, #328]	; (1832c <z_impl_k_mutex_lock+0x190>)
   181e4:	f002 ff0c 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   181e8:	484f      	ldr	r0, [pc, #316]	; (18328 <z_impl_k_mutex_lock+0x18c>)
   181ea:	f001 fc93 	bl	19b14 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   181ee:	68e3      	ldr	r3, [r4, #12]
   181f0:	4a4f      	ldr	r2, [pc, #316]	; (18330 <z_impl_k_mutex_lock+0x194>)
   181f2:	b1d3      	cbz	r3, 1822a <z_impl_k_mutex_lock+0x8e>
   181f4:	68a0      	ldr	r0, [r4, #8]
   181f6:	6891      	ldr	r1, [r2, #8]
   181f8:	4288      	cmp	r0, r1
   181fa:	d033      	beq.n	18264 <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   181fc:	ea57 0306 	orrs.w	r3, r7, r6
   18200:	d132      	bne.n	18268 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18202:	4849      	ldr	r0, [pc, #292]	; (18328 <z_impl_k_mutex_lock+0x18c>)
   18204:	f001 fc78 	bl	19af8 <z_spin_unlock_valid>
   18208:	b940      	cbnz	r0, 1821c <z_impl_k_mutex_lock+0x80>
   1820a:	4948      	ldr	r1, [pc, #288]	; (1832c <z_impl_k_mutex_lock+0x190>)
   1820c:	4845      	ldr	r0, [pc, #276]	; (18324 <z_impl_k_mutex_lock+0x188>)
   1820e:	22a7      	movs	r2, #167	; 0xa7
   18210:	f002 fc50 	bl	1aab4 <printk>
   18214:	21a7      	movs	r1, #167	; 0xa7
   18216:	4845      	ldr	r0, [pc, #276]	; (1832c <z_impl_k_mutex_lock+0x190>)
   18218:	f002 fef2 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   1821c:	f388 8811 	msr	BASEPRI, r8
   18220:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   18224:	f06f 000f 	mvn.w	r0, #15
   18228:	e019      	b.n	1825e <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   1822a:	6891      	ldr	r1, [r2, #8]
   1822c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   18230:	3301      	adds	r3, #1
   18232:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   18234:	6893      	ldr	r3, [r2, #8]
   18236:	483c      	ldr	r0, [pc, #240]	; (18328 <z_impl_k_mutex_lock+0x18c>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   18238:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1823a:	60a3      	str	r3, [r4, #8]
   1823c:	f001 fc5c 	bl	19af8 <z_spin_unlock_valid>
   18240:	b940      	cbnz	r0, 18254 <z_impl_k_mutex_lock+0xb8>
   18242:	493a      	ldr	r1, [pc, #232]	; (1832c <z_impl_k_mutex_lock+0x190>)
   18244:	4837      	ldr	r0, [pc, #220]	; (18324 <z_impl_k_mutex_lock+0x188>)
   18246:	22a7      	movs	r2, #167	; 0xa7
   18248:	f002 fc34 	bl	1aab4 <printk>
   1824c:	21a7      	movs	r1, #167	; 0xa7
   1824e:	4837      	ldr	r0, [pc, #220]	; (1832c <z_impl_k_mutex_lock+0x190>)
   18250:	f002 fed6 	bl	1b000 <assert_post_action>
   18254:	f388 8811 	msr	BASEPRI, r8
   18258:	f3bf 8f6f 	isb	sy
		return 0;
   1825c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1825e:	b002      	add	sp, #8
   18260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   18264:	6921      	ldr	r1, [r4, #16]
   18266:	e7e3      	b.n	18230 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   18268:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1826c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   18270:	4299      	cmp	r1, r3
   18272:	bfa8      	it	ge
   18274:	4619      	movge	r1, r3
   18276:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1827a:	4299      	cmp	r1, r3
   1827c:	da3b      	bge.n	182f6 <z_impl_k_mutex_lock+0x15a>
		resched = adjust_owner_prio(mutex, new_prio);
   1827e:	f005 ffae 	bl	1e1de <adjust_owner_prio.isra.0>
   18282:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   18284:	4622      	mov	r2, r4
   18286:	4641      	mov	r1, r8
   18288:	e9cd 7600 	strd	r7, r6, [sp]
   1828c:	4826      	ldr	r0, [pc, #152]	; (18328 <z_impl_k_mutex_lock+0x18c>)
   1828e:	f000 ffe1 	bl	19254 <z_pend_curr>
	if (got_mutex == 0) {
   18292:	2800      	cmp	r0, #0
   18294:	d0e3      	beq.n	1825e <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   18296:	f04f 0320 	mov.w	r3, #32
   1829a:	f3ef 8611 	mrs	r6, BASEPRI
   1829e:	f383 8811 	msr	BASEPRI, r3
   182a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   182a6:	4820      	ldr	r0, [pc, #128]	; (18328 <z_impl_k_mutex_lock+0x18c>)
   182a8:	f001 fc18 	bl	19adc <z_spin_lock_valid>
   182ac:	b940      	cbnz	r0, 182c0 <z_impl_k_mutex_lock+0x124>
   182ae:	491f      	ldr	r1, [pc, #124]	; (1832c <z_impl_k_mutex_lock+0x190>)
   182b0:	481c      	ldr	r0, [pc, #112]	; (18324 <z_impl_k_mutex_lock+0x188>)
   182b2:	227c      	movs	r2, #124	; 0x7c
   182b4:	f002 fbfe 	bl	1aab4 <printk>
   182b8:	217c      	movs	r1, #124	; 0x7c
   182ba:	481c      	ldr	r0, [pc, #112]	; (1832c <z_impl_k_mutex_lock+0x190>)
   182bc:	f002 fea0 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   182c0:	4819      	ldr	r0, [pc, #100]	; (18328 <z_impl_k_mutex_lock+0x18c>)
   182c2:	f001 fc27 	bl	19b14 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   182c6:	6823      	ldr	r3, [r4, #0]
   182c8:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   182ca:	42a3      	cmp	r3, r4
   182cc:	d007      	beq.n	182de <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   182ce:	b133      	cbz	r3, 182de <z_impl_k_mutex_lock+0x142>
   182d0:	f993 300e 	ldrsb.w	r3, [r3, #14]
   182d4:	4299      	cmp	r1, r3
   182d6:	bfa8      	it	ge
   182d8:	4619      	movge	r1, r3
   182da:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   182de:	68a0      	ldr	r0, [r4, #8]
   182e0:	f005 ff7d 	bl	1e1de <adjust_owner_prio.isra.0>
   182e4:	b900      	cbnz	r0, 182e8 <z_impl_k_mutex_lock+0x14c>
	if (resched) {
   182e6:	b145      	cbz	r5, 182fa <z_impl_k_mutex_lock+0x15e>
		z_reschedule(&lock, key);
   182e8:	4631      	mov	r1, r6
   182ea:	480f      	ldr	r0, [pc, #60]	; (18328 <z_impl_k_mutex_lock+0x18c>)
   182ec:	f000 fa74 	bl	187d8 <z_reschedule>
	return -EAGAIN;
   182f0:	f06f 000a 	mvn.w	r0, #10
   182f4:	e7b3      	b.n	1825e <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   182f6:	2500      	movs	r5, #0
   182f8:	e7c4      	b.n	18284 <z_impl_k_mutex_lock+0xe8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   182fa:	480b      	ldr	r0, [pc, #44]	; (18328 <z_impl_k_mutex_lock+0x18c>)
   182fc:	f001 fbfc 	bl	19af8 <z_spin_unlock_valid>
   18300:	b940      	cbnz	r0, 18314 <z_impl_k_mutex_lock+0x178>
   18302:	490a      	ldr	r1, [pc, #40]	; (1832c <z_impl_k_mutex_lock+0x190>)
   18304:	4807      	ldr	r0, [pc, #28]	; (18324 <z_impl_k_mutex_lock+0x188>)
   18306:	22a7      	movs	r2, #167	; 0xa7
   18308:	f002 fbd4 	bl	1aab4 <printk>
   1830c:	21a7      	movs	r1, #167	; 0xa7
   1830e:	4807      	ldr	r0, [pc, #28]	; (1832c <z_impl_k_mutex_lock+0x190>)
   18310:	f002 fe76 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   18314:	f386 8811 	msr	BASEPRI, r6
   18318:	f3bf 8f6f 	isb	sy
   1831c:	e7e8      	b.n	182f0 <z_impl_k_mutex_lock+0x154>
   1831e:	bf00      	nop
   18320:	00022e75 	.word	0x00022e75
   18324:	0002003d 	.word	0x0002003d
   18328:	2000b148 	.word	0x2000b148
   1832c:	00020077 	.word	0x00020077
   18330:	2000b14c 	.word	0x2000b14c

00018334 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   18334:	b538      	push	{r3, r4, r5, lr}
   18336:	4604      	mov	r4, r0
   18338:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1833c:	b143      	cbz	r3, 18350 <z_impl_k_mutex_unlock+0x1c>
   1833e:	4946      	ldr	r1, [pc, #280]	; (18458 <z_impl_k_mutex_unlock+0x124>)
   18340:	4846      	ldr	r0, [pc, #280]	; (1845c <z_impl_k_mutex_unlock+0x128>)
   18342:	22d8      	movs	r2, #216	; 0xd8
   18344:	f002 fbb6 	bl	1aab4 <printk>
   18348:	21d8      	movs	r1, #216	; 0xd8
   1834a:	4843      	ldr	r0, [pc, #268]	; (18458 <z_impl_k_mutex_unlock+0x124>)
   1834c:	f002 fe58 	bl	1b000 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   18350:	68a3      	ldr	r3, [r4, #8]
   18352:	2b00      	cmp	r3, #0
   18354:	d079      	beq.n	1844a <z_impl_k_mutex_unlock+0x116>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   18356:	4d42      	ldr	r5, [pc, #264]	; (18460 <z_impl_k_mutex_unlock+0x12c>)
   18358:	68aa      	ldr	r2, [r5, #8]
   1835a:	4293      	cmp	r3, r2
   1835c:	d178      	bne.n	18450 <z_impl_k_mutex_unlock+0x11c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1835e:	68e3      	ldr	r3, [r4, #12]
   18360:	b943      	cbnz	r3, 18374 <z_impl_k_mutex_unlock+0x40>
   18362:	493d      	ldr	r1, [pc, #244]	; (18458 <z_impl_k_mutex_unlock+0x124>)
   18364:	483d      	ldr	r0, [pc, #244]	; (1845c <z_impl_k_mutex_unlock+0x128>)
   18366:	22ea      	movs	r2, #234	; 0xea
   18368:	f002 fba4 	bl	1aab4 <printk>
   1836c:	21ea      	movs	r1, #234	; 0xea
   1836e:	483a      	ldr	r0, [pc, #232]	; (18458 <z_impl_k_mutex_unlock+0x124>)
   18370:	f002 fe46 	bl	1b000 <assert_post_action>
   18374:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   18378:	b153      	cbz	r3, 18390 <z_impl_k_mutex_unlock+0x5c>
   1837a:	493a      	ldr	r1, [pc, #232]	; (18464 <z_impl_k_mutex_unlock+0x130>)
   1837c:	4837      	ldr	r0, [pc, #220]	; (1845c <z_impl_k_mutex_unlock+0x128>)
   1837e:	f44f 7289 	mov.w	r2, #274	; 0x112
   18382:	f002 fb97 	bl	1aab4 <printk>
   18386:	f44f 7189 	mov.w	r1, #274	; 0x112
   1838a:	4836      	ldr	r0, [pc, #216]	; (18464 <z_impl_k_mutex_unlock+0x130>)
   1838c:	f002 fe38 	bl	1b000 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   18390:	68ab      	ldr	r3, [r5, #8]
   18392:	7bdb      	ldrb	r3, [r3, #15]
   18394:	2b01      	cmp	r3, #1
   18396:	d10a      	bne.n	183ae <z_impl_k_mutex_unlock+0x7a>
   18398:	4932      	ldr	r1, [pc, #200]	; (18464 <z_impl_k_mutex_unlock+0x130>)
   1839a:	4830      	ldr	r0, [pc, #192]	; (1845c <z_impl_k_mutex_unlock+0x128>)
   1839c:	f240 1213 	movw	r2, #275	; 0x113
   183a0:	f002 fb88 	bl	1aab4 <printk>
   183a4:	f240 1113 	movw	r1, #275	; 0x113
   183a8:	482e      	ldr	r0, [pc, #184]	; (18464 <z_impl_k_mutex_unlock+0x130>)
   183aa:	f002 fe29 	bl	1b000 <assert_post_action>

	--_current->base.sched_locked;
   183ae:	68aa      	ldr	r2, [r5, #8]
   183b0:	7bd3      	ldrb	r3, [r2, #15]
   183b2:	3b01      	subs	r3, #1
   183b4:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   183b6:	68e3      	ldr	r3, [r4, #12]
   183b8:	2b01      	cmp	r3, #1
   183ba:	d005      	beq.n	183c8 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   183bc:	3b01      	subs	r3, #1
   183be:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   183c0:	f000 fb38 	bl	18a34 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   183c4:	2000      	movs	r0, #0
}
   183c6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   183c8:	f04f 0320 	mov.w	r3, #32
   183cc:	f3ef 8511 	mrs	r5, BASEPRI
   183d0:	f383 8811 	msr	BASEPRI, r3
   183d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   183d8:	4823      	ldr	r0, [pc, #140]	; (18468 <z_impl_k_mutex_unlock+0x134>)
   183da:	f001 fb7f 	bl	19adc <z_spin_lock_valid>
   183de:	b940      	cbnz	r0, 183f2 <z_impl_k_mutex_unlock+0xbe>
   183e0:	4922      	ldr	r1, [pc, #136]	; (1846c <z_impl_k_mutex_unlock+0x138>)
   183e2:	481e      	ldr	r0, [pc, #120]	; (1845c <z_impl_k_mutex_unlock+0x128>)
   183e4:	227c      	movs	r2, #124	; 0x7c
   183e6:	f002 fb65 	bl	1aab4 <printk>
   183ea:	217c      	movs	r1, #124	; 0x7c
   183ec:	481f      	ldr	r0, [pc, #124]	; (1846c <z_impl_k_mutex_unlock+0x138>)
   183ee:	f002 fe07 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   183f2:	481d      	ldr	r0, [pc, #116]	; (18468 <z_impl_k_mutex_unlock+0x134>)
   183f4:	f001 fb8e 	bl	19b14 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   183f8:	6921      	ldr	r1, [r4, #16]
   183fa:	68a0      	ldr	r0, [r4, #8]
   183fc:	f005 feef 	bl	1e1de <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   18400:	4620      	mov	r0, r4
   18402:	f000 ffc9 	bl	19398 <z_unpend_first_thread>
	mutex->owner = new_owner;
   18406:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   18408:	b160      	cbz	r0, 18424 <z_impl_k_mutex_unlock+0xf0>
		mutex->owner_orig_prio = new_owner->base.prio;
   1840a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1840e:	6122      	str	r2, [r4, #16]
   18410:	2200      	movs	r2, #0
   18412:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   18416:	f000 fbb3 	bl	18b80 <z_ready_thread>
		z_reschedule(&lock, key);
   1841a:	4629      	mov	r1, r5
   1841c:	4812      	ldr	r0, [pc, #72]	; (18468 <z_impl_k_mutex_unlock+0x134>)
   1841e:	f000 f9db 	bl	187d8 <z_reschedule>
   18422:	e7cd      	b.n	183c0 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   18424:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18426:	4810      	ldr	r0, [pc, #64]	; (18468 <z_impl_k_mutex_unlock+0x134>)
   18428:	f001 fb66 	bl	19af8 <z_spin_unlock_valid>
   1842c:	b940      	cbnz	r0, 18440 <z_impl_k_mutex_unlock+0x10c>
   1842e:	490f      	ldr	r1, [pc, #60]	; (1846c <z_impl_k_mutex_unlock+0x138>)
   18430:	480a      	ldr	r0, [pc, #40]	; (1845c <z_impl_k_mutex_unlock+0x128>)
   18432:	22a7      	movs	r2, #167	; 0xa7
   18434:	f002 fb3e 	bl	1aab4 <printk>
   18438:	21a7      	movs	r1, #167	; 0xa7
   1843a:	480c      	ldr	r0, [pc, #48]	; (1846c <z_impl_k_mutex_unlock+0x138>)
   1843c:	f002 fde0 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   18440:	f385 8811 	msr	BASEPRI, r5
   18444:	f3bf 8f6f 	isb	sy
   18448:	e7ba      	b.n	183c0 <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   1844a:	f06f 0015 	mvn.w	r0, #21
   1844e:	e7ba      	b.n	183c6 <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   18450:	f04f 30ff 	mov.w	r0, #4294967295
   18454:	e7b7      	b.n	183c6 <z_impl_k_mutex_unlock+0x92>
   18456:	bf00      	nop
   18458:	00022e75 	.word	0x00022e75
   1845c:	0002003d 	.word	0x0002003d
   18460:	2000b14c 	.word	0x2000b14c
   18464:	00022e97 	.word	0x00022e97
   18468:	2000b148 	.word	0x2000b148
   1846c:	00020077 	.word	0x00020077

00018470 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   18470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18474:	4604      	mov	r4, r0
   18476:	460d      	mov	r5, r1
   18478:	4690      	mov	r8, r2
   1847a:	4699      	mov	r9, r3
   1847c:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18480:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   18484:	f04f 0320 	mov.w	r3, #32
   18488:	f3ef 8711 	mrs	r7, BASEPRI
   1848c:	f383 8811 	msr	BASEPRI, r3
   18490:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18494:	4630      	mov	r0, r6
   18496:	f001 fb21 	bl	19adc <z_spin_lock_valid>
   1849a:	b940      	cbnz	r0, 184ae <queue_insert+0x3e>
   1849c:	4937      	ldr	r1, [pc, #220]	; (1857c <queue_insert+0x10c>)
   1849e:	4838      	ldr	r0, [pc, #224]	; (18580 <queue_insert+0x110>)
   184a0:	227c      	movs	r2, #124	; 0x7c
   184a2:	f002 fb07 	bl	1aab4 <printk>
   184a6:	217c      	movs	r1, #124	; 0x7c
   184a8:	4834      	ldr	r0, [pc, #208]	; (1857c <queue_insert+0x10c>)
   184aa:	f002 fda9 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   184ae:	4630      	mov	r0, r6
   184b0:	f001 fb30 	bl	19b14 <z_spin_lock_set_owner>

	if (is_append) {
   184b4:	f1ba 0f00 	cmp.w	sl, #0
   184b8:	d000      	beq.n	184bc <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   184ba:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   184bc:	f104 000c 	add.w	r0, r4, #12
   184c0:	f000 ff6a 	bl	19398 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   184c4:	b160      	cbz	r0, 184e0 <queue_insert+0x70>
   184c6:	2400      	movs	r4, #0
   184c8:	f8c0 8014 	str.w	r8, [r0, #20]
   184cc:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   184d0:	f000 fb56 	bl	18b80 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   184d4:	4630      	mov	r0, r6
   184d6:	4639      	mov	r1, r7
   184d8:	f000 f97e 	bl	187d8 <z_reschedule>
	return 0;
   184dc:	2000      	movs	r0, #0
   184de:	e019      	b.n	18514 <queue_insert+0xa4>
	if (alloc) {
   184e0:	f1b9 0f00 	cmp.w	r9, #0
   184e4:	d028      	beq.n	18538 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   184e6:	2108      	movs	r1, #8
   184e8:	f002 fa12 	bl	1a910 <z_thread_aligned_alloc>
		if (anode == NULL) {
   184ec:	b9a0      	cbnz	r0, 18518 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   184ee:	4630      	mov	r0, r6
   184f0:	f001 fb02 	bl	19af8 <z_spin_unlock_valid>
   184f4:	b940      	cbnz	r0, 18508 <queue_insert+0x98>
   184f6:	4921      	ldr	r1, [pc, #132]	; (1857c <queue_insert+0x10c>)
   184f8:	4821      	ldr	r0, [pc, #132]	; (18580 <queue_insert+0x110>)
   184fa:	22a7      	movs	r2, #167	; 0xa7
   184fc:	f002 fada 	bl	1aab4 <printk>
   18500:	21a7      	movs	r1, #167	; 0xa7
   18502:	481e      	ldr	r0, [pc, #120]	; (1857c <queue_insert+0x10c>)
   18504:	f002 fd7c 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   18508:	f387 8811 	msr	BASEPRI, r7
   1850c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   18510:	f06f 000b 	mvn.w	r0, #11
}
   18514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   18518:	2301      	movs	r3, #1
		anode->data = data;
   1851a:	f8c0 8004 	str.w	r8, [r0, #4]
   1851e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18520:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   18522:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   18526:	b95d      	cbnz	r5, 18540 <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   18528:	6823      	ldr	r3, [r4, #0]
   1852a:	4313      	orrs	r3, r2
   1852c:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1852e:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   18530:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   18532:	b973      	cbnz	r3, 18552 <queue_insert+0xe2>
	list->tail = node;
   18534:	6060      	str	r0, [r4, #4]
}
   18536:	e00c      	b.n	18552 <queue_insert+0xe2>
}
   18538:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1853a:	f8c8 9000 	str.w	r9, [r8]
}
   1853e:	e7ef      	b.n	18520 <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18540:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   18542:	f033 0303 	bics.w	r3, r3, #3
   18546:	d110      	bne.n	1856a <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   18548:	6002      	str	r2, [r0, #0]
	return list->tail;
   1854a:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1854c:	b93a      	cbnz	r2, 1855e <queue_insert+0xee>
	list->head = node;
   1854e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   18552:	2104      	movs	r1, #4
   18554:	f104 0014 	add.w	r0, r4, #20
   18558:	f005 ffb0 	bl	1e4bc <z_handle_obj_poll_events>
   1855c:	e7ba      	b.n	184d4 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1855e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   18560:	f003 0303 	and.w	r3, r3, #3
   18564:	4303      	orrs	r3, r0
   18566:	6013      	str	r3, [r2, #0]
   18568:	e7e4      	b.n	18534 <queue_insert+0xc4>
   1856a:	4313      	orrs	r3, r2
   1856c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1856e:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   18570:	f003 0303 	and.w	r3, r3, #3
   18574:	4303      	orrs	r3, r0
   18576:	602b      	str	r3, [r5, #0]
}
   18578:	e7eb      	b.n	18552 <queue_insert+0xe2>
   1857a:	bf00      	nop
   1857c:	00020077 	.word	0x00020077
   18580:	0002003d 	.word	0x0002003d

00018584 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   18584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18588:	4605      	mov	r5, r0
   1858a:	4616      	mov	r6, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   1858c:	460c      	mov	r4, r1
   1858e:	2900      	cmp	r1, #0
   18590:	d045      	beq.n	1861e <k_queue_append_list+0x9a>
   18592:	2a00      	cmp	r2, #0
   18594:	d043      	beq.n	1861e <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18596:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1859a:	f04f 0320 	mov.w	r3, #32
   1859e:	f3ef 8911 	mrs	r9, BASEPRI
   185a2:	f383 8811 	msr	BASEPRI, r3
   185a6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   185aa:	4638      	mov	r0, r7
   185ac:	f001 fa96 	bl	19adc <z_spin_lock_valid>
   185b0:	b940      	cbnz	r0, 185c4 <k_queue_append_list+0x40>
   185b2:	491c      	ldr	r1, [pc, #112]	; (18624 <k_queue_append_list+0xa0>)
   185b4:	481c      	ldr	r0, [pc, #112]	; (18628 <k_queue_append_list+0xa4>)
   185b6:	227c      	movs	r2, #124	; 0x7c
   185b8:	f002 fa7c 	bl	1aab4 <printk>
   185bc:	217c      	movs	r1, #124	; 0x7c
   185be:	4819      	ldr	r0, [pc, #100]	; (18624 <k_queue_append_list+0xa0>)
   185c0:	f002 fd1e 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   185c4:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   185c6:	f105 080c 	add.w	r8, r5, #12
   185ca:	f001 faa3 	bl	19b14 <z_spin_lock_set_owner>
   185ce:	4640      	mov	r0, r8
   185d0:	f000 fee2 	bl	19398 <z_unpend_first_thread>
   185d4:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   185d8:	b920      	cbnz	r0, 185e4 <k_queue_append_list+0x60>
	return list->tail;
   185da:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   185dc:	b9ca      	cbnz	r2, 18612 <k_queue_append_list+0x8e>
	list->head = node;
   185de:	602c      	str	r4, [r5, #0]
	list->tail = node;
   185e0:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   185e2:	e00a      	b.n	185fa <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   185e4:	6144      	str	r4, [r0, #20]
   185e6:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   185ea:	f000 fac9 	bl	18b80 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   185ee:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   185f0:	4640      	mov	r0, r8
   185f2:	f000 fed1 	bl	19398 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   185f6:	2c00      	cmp	r4, #0
   185f8:	d1ee      	bne.n	185d8 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   185fa:	2104      	movs	r1, #4
   185fc:	f105 0014 	add.w	r0, r5, #20
   18600:	f005 ff5c 	bl	1e4bc <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   18604:	4638      	mov	r0, r7
   18606:	4649      	mov	r1, r9
   18608:	f000 f8e6 	bl	187d8 <z_reschedule>
	return 0;
   1860c:	2000      	movs	r0, #0
}
   1860e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18612:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   18614:	f003 0303 	and.w	r3, r3, #3
   18618:	431c      	orrs	r4, r3
   1861a:	6014      	str	r4, [r2, #0]
}
   1861c:	e7e0      	b.n	185e0 <k_queue_append_list+0x5c>
		return -EINVAL;
   1861e:	f06f 0015 	mvn.w	r0, #21
   18622:	e7f4      	b.n	1860e <k_queue_append_list+0x8a>
   18624:	00020077 	.word	0x00020077
   18628:	0002003d 	.word	0x0002003d

0001862c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1862c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18630:	4605      	mov	r5, r0
   18632:	4690      	mov	r8, r2
   18634:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18636:	f100 0608 	add.w	r6, r0, #8
   1863a:	f04f 0320 	mov.w	r3, #32
   1863e:	f3ef 8911 	mrs	r9, BASEPRI
   18642:	f383 8811 	msr	BASEPRI, r3
   18646:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1864a:	4630      	mov	r0, r6
   1864c:	f001 fa46 	bl	19adc <z_spin_lock_valid>
   18650:	b940      	cbnz	r0, 18664 <z_impl_k_queue_get+0x38>
   18652:	4921      	ldr	r1, [pc, #132]	; (186d8 <z_impl_k_queue_get+0xac>)
   18654:	4821      	ldr	r0, [pc, #132]	; (186dc <z_impl_k_queue_get+0xb0>)
   18656:	227c      	movs	r2, #124	; 0x7c
   18658:	f002 fa2c 	bl	1aab4 <printk>
   1865c:	217c      	movs	r1, #124	; 0x7c
   1865e:	481e      	ldr	r0, [pc, #120]	; (186d8 <z_impl_k_queue_get+0xac>)
   18660:	f002 fcce 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   18664:	4630      	mov	r0, r6
   18666:	f001 fa55 	bl	19b14 <z_spin_lock_set_owner>
	return list->head;
   1866a:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1866c:	b314      	cbz	r4, 186b4 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1866e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18670:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18672:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18676:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   18678:	4620      	mov	r0, r4
   1867a:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   1867e:	602b      	str	r3, [r5, #0]
	list->tail = node;
   18680:	bf08      	it	eq
   18682:	606b      	streq	r3, [r5, #4]
   18684:	f005 fdba 	bl	1e1fc <z_queue_node_peek>
   18688:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1868a:	4630      	mov	r0, r6
   1868c:	f001 fa34 	bl	19af8 <z_spin_unlock_valid>
   18690:	b940      	cbnz	r0, 186a4 <z_impl_k_queue_get+0x78>
   18692:	4911      	ldr	r1, [pc, #68]	; (186d8 <z_impl_k_queue_get+0xac>)
   18694:	4811      	ldr	r0, [pc, #68]	; (186dc <z_impl_k_queue_get+0xb0>)
   18696:	22a7      	movs	r2, #167	; 0xa7
   18698:	f002 fa0c 	bl	1aab4 <printk>
   1869c:	21a7      	movs	r1, #167	; 0xa7
   1869e:	480e      	ldr	r0, [pc, #56]	; (186d8 <z_impl_k_queue_get+0xac>)
   186a0:	f002 fcae 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   186a4:	f389 8811 	msr	BASEPRI, r9
   186a8:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   186ac:	4620      	mov	r0, r4
   186ae:	b003      	add	sp, #12
   186b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   186b4:	ea58 0307 	orrs.w	r3, r8, r7
   186b8:	d0e7      	beq.n	1868a <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   186ba:	4649      	mov	r1, r9
   186bc:	4630      	mov	r0, r6
   186be:	e9cd 8700 	strd	r8, r7, [sp]
   186c2:	f105 020c 	add.w	r2, r5, #12
   186c6:	f000 fdc5 	bl	19254 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   186ca:	2800      	cmp	r0, #0
   186cc:	d1ee      	bne.n	186ac <z_impl_k_queue_get+0x80>
   186ce:	4b04      	ldr	r3, [pc, #16]	; (186e0 <z_impl_k_queue_get+0xb4>)
   186d0:	689b      	ldr	r3, [r3, #8]
   186d2:	695c      	ldr	r4, [r3, #20]
   186d4:	e7ea      	b.n	186ac <z_impl_k_queue_get+0x80>
   186d6:	bf00      	nop
   186d8:	00020077 	.word	0x00020077
   186dc:	0002003d 	.word	0x0002003d
   186e0:	2000b14c 	.word	0x2000b14c

000186e4 <pended_on>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   186e4:	6883      	ldr	r3, [r0, #8]
{
   186e6:	b510      	push	{r4, lr}
   186e8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   186ea:	b953      	cbnz	r3, 18702 <pended_on+0x1e>
   186ec:	4906      	ldr	r1, [pc, #24]	; (18708 <pended_on+0x24>)
   186ee:	4807      	ldr	r0, [pc, #28]	; (1870c <pended_on+0x28>)
   186f0:	f44f 7201 	mov.w	r2, #516	; 0x204
   186f4:	f002 f9de 	bl	1aab4 <printk>
   186f8:	f44f 7101 	mov.w	r1, #516	; 0x204
   186fc:	4802      	ldr	r0, [pc, #8]	; (18708 <pended_on+0x24>)
   186fe:	f002 fc7f 	bl	1b000 <assert_post_action>

	return thread->base.pended_on;
}
   18702:	68a0      	ldr	r0, [r4, #8]
   18704:	bd10      	pop	{r4, pc}
   18706:	bf00      	nop
   18708:	00022ec2 	.word	0x00022ec2
   1870c:	0002003d 	.word	0x0002003d

00018710 <z_reset_time_slice>:
{
   18710:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   18712:	4c08      	ldr	r4, [pc, #32]	; (18734 <z_reset_time_slice+0x24>)
   18714:	6823      	ldr	r3, [r4, #0]
   18716:	b15b      	cbz	r3, 18730 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   18718:	f7f3 ffca 	bl	c6b0 <z_clock_elapsed>
   1871c:	4603      	mov	r3, r0
   1871e:	6820      	ldr	r0, [r4, #0]
   18720:	4a05      	ldr	r2, [pc, #20]	; (18738 <z_reset_time_slice+0x28>)
   18722:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   18724:	2100      	movs	r1, #0
}
   18726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1872a:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1872c:	f001 bc8c 	b.w	1a048 <z_set_timeout_expiry>
}
   18730:	bd10      	pop	{r4, pc}
   18732:	bf00      	nop
   18734:	2000b18c 	.word	0x2000b18c
   18738:	2000b14c 	.word	0x2000b14c

0001873c <k_sched_time_slice_set>:
{
   1873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1873e:	4604      	mov	r4, r0
   18740:	460d      	mov	r5, r1
	__asm__ volatile(
   18742:	f04f 0320 	mov.w	r3, #32
   18746:	f3ef 8711 	mrs	r7, BASEPRI
   1874a:	f383 8811 	msr	BASEPRI, r3
   1874e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18752:	481b      	ldr	r0, [pc, #108]	; (187c0 <k_sched_time_slice_set+0x84>)
   18754:	f001 f9c2 	bl	19adc <z_spin_lock_valid>
   18758:	b940      	cbnz	r0, 1876c <k_sched_time_slice_set+0x30>
   1875a:	491a      	ldr	r1, [pc, #104]	; (187c4 <k_sched_time_slice_set+0x88>)
   1875c:	481a      	ldr	r0, [pc, #104]	; (187c8 <k_sched_time_slice_set+0x8c>)
   1875e:	227c      	movs	r2, #124	; 0x7c
   18760:	f002 f9a8 	bl	1aab4 <printk>
   18764:	217c      	movs	r1, #124	; 0x7c
   18766:	4817      	ldr	r0, [pc, #92]	; (187c4 <k_sched_time_slice_set+0x88>)
   18768:	f002 fc4a 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   1876c:	4814      	ldr	r0, [pc, #80]	; (187c0 <k_sched_time_slice_set+0x84>)
   1876e:	f001 f9d1 	bl	19b14 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   18772:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   18776:	2100      	movs	r1, #0
   18778:	f240 30e7 	movw	r0, #999	; 0x3e7
   1877c:	4b13      	ldr	r3, [pc, #76]	; (187cc <k_sched_time_slice_set+0x90>)
   1877e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18782:	6159      	str	r1, [r3, #20]
   18784:	2300      	movs	r3, #0
   18786:	fbe4 0106 	umlal	r0, r1, r4, r6
   1878a:	f7f0 f9cf 	bl	8b2c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1878e:	4b10      	ldr	r3, [pc, #64]	; (187d0 <k_sched_time_slice_set+0x94>)
   18790:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   18792:	4b10      	ldr	r3, [pc, #64]	; (187d4 <k_sched_time_slice_set+0x98>)
   18794:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   18796:	f7ff ffbb 	bl	18710 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1879a:	4809      	ldr	r0, [pc, #36]	; (187c0 <k_sched_time_slice_set+0x84>)
   1879c:	f001 f9ac 	bl	19af8 <z_spin_unlock_valid>
   187a0:	b940      	cbnz	r0, 187b4 <k_sched_time_slice_set+0x78>
   187a2:	4908      	ldr	r1, [pc, #32]	; (187c4 <k_sched_time_slice_set+0x88>)
   187a4:	4808      	ldr	r0, [pc, #32]	; (187c8 <k_sched_time_slice_set+0x8c>)
   187a6:	22a7      	movs	r2, #167	; 0xa7
   187a8:	f002 f984 	bl	1aab4 <printk>
   187ac:	21a7      	movs	r1, #167	; 0xa7
   187ae:	4805      	ldr	r0, [pc, #20]	; (187c4 <k_sched_time_slice_set+0x88>)
   187b0:	f002 fc26 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   187b4:	f387 8811 	msr	BASEPRI, r7
   187b8:	f3bf 8f6f 	isb	sy
}
   187bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   187be:	bf00      	nop
   187c0:	2000b184 	.word	0x2000b184
   187c4:	00020077 	.word	0x00020077
   187c8:	0002003d 	.word	0x0002003d
   187cc:	2000b14c 	.word	0x2000b14c
   187d0:	2000b18c 	.word	0x2000b18c
   187d4:	2000b188 	.word	0x2000b188

000187d8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   187d8:	b510      	push	{r4, lr}
   187da:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   187dc:	460c      	mov	r4, r1
   187de:	b9c1      	cbnz	r1, 18812 <z_reschedule+0x3a>
   187e0:	f3ef 8205 	mrs	r2, IPSR
   187e4:	b9aa      	cbnz	r2, 18812 <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   187e6:	4a14      	ldr	r2, [pc, #80]	; (18838 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   187e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
   187ea:	6892      	ldr	r2, [r2, #8]
   187ec:	4291      	cmp	r1, r2
   187ee:	d010      	beq.n	18812 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   187f0:	f001 f982 	bl	19af8 <z_spin_unlock_valid>
   187f4:	b940      	cbnz	r0, 18808 <z_reschedule+0x30>
   187f6:	4911      	ldr	r1, [pc, #68]	; (1883c <z_reschedule+0x64>)
   187f8:	4811      	ldr	r0, [pc, #68]	; (18840 <z_reschedule+0x68>)
   187fa:	22be      	movs	r2, #190	; 0xbe
   187fc:	f002 f95a 	bl	1aab4 <printk>
   18800:	21be      	movs	r1, #190	; 0xbe
   18802:	480e      	ldr	r0, [pc, #56]	; (1883c <z_reschedule+0x64>)
   18804:	f002 fbfc 	bl	1b000 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   18808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   1880c:	2000      	movs	r0, #0
   1880e:	f7f5 b9a9 	b.w	db64 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18812:	4618      	mov	r0, r3
   18814:	f001 f970 	bl	19af8 <z_spin_unlock_valid>
   18818:	b940      	cbnz	r0, 1882c <z_reschedule+0x54>
   1881a:	4908      	ldr	r1, [pc, #32]	; (1883c <z_reschedule+0x64>)
   1881c:	4808      	ldr	r0, [pc, #32]	; (18840 <z_reschedule+0x68>)
   1881e:	22a7      	movs	r2, #167	; 0xa7
   18820:	f002 f948 	bl	1aab4 <printk>
   18824:	21a7      	movs	r1, #167	; 0xa7
   18826:	4805      	ldr	r0, [pc, #20]	; (1883c <z_reschedule+0x64>)
   18828:	f002 fbea 	bl	1b000 <assert_post_action>
   1882c:	f384 8811 	msr	BASEPRI, r4
   18830:	f3bf 8f6f 	isb	sy
   18834:	bd10      	pop	{r4, pc}
   18836:	bf00      	nop
   18838:	2000b14c 	.word	0x2000b14c
   1883c:	00020077 	.word	0x00020077
   18840:	0002003d 	.word	0x0002003d

00018844 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   18844:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18846:	f04f 0320 	mov.w	r3, #32
   1884a:	f3ef 8511 	mrs	r5, BASEPRI
   1884e:	f383 8811 	msr	BASEPRI, r3
   18852:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18856:	4822      	ldr	r0, [pc, #136]	; (188e0 <k_sched_lock+0x9c>)
   18858:	f001 f940 	bl	19adc <z_spin_lock_valid>
   1885c:	b940      	cbnz	r0, 18870 <k_sched_lock+0x2c>
   1885e:	4921      	ldr	r1, [pc, #132]	; (188e4 <k_sched_lock+0xa0>)
   18860:	4821      	ldr	r0, [pc, #132]	; (188e8 <k_sched_lock+0xa4>)
   18862:	227c      	movs	r2, #124	; 0x7c
   18864:	f002 f926 	bl	1aab4 <printk>
   18868:	217c      	movs	r1, #124	; 0x7c
   1886a:	481e      	ldr	r0, [pc, #120]	; (188e4 <k_sched_lock+0xa0>)
   1886c:	f002 fbc8 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   18870:	481b      	ldr	r0, [pc, #108]	; (188e0 <k_sched_lock+0x9c>)
   18872:	f001 f94f 	bl	19b14 <z_spin_lock_set_owner>
   18876:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1887a:	b153      	cbz	r3, 18892 <k_sched_lock+0x4e>
   1887c:	491b      	ldr	r1, [pc, #108]	; (188ec <k_sched_lock+0xa8>)
   1887e:	481a      	ldr	r0, [pc, #104]	; (188e8 <k_sched_lock+0xa4>)
   18880:	f44f 7289 	mov.w	r2, #274	; 0x112
   18884:	f002 f916 	bl	1aab4 <printk>
   18888:	f44f 7189 	mov.w	r1, #274	; 0x112
   1888c:	4817      	ldr	r0, [pc, #92]	; (188ec <k_sched_lock+0xa8>)
   1888e:	f002 fbb7 	bl	1b000 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   18892:	4c17      	ldr	r4, [pc, #92]	; (188f0 <k_sched_lock+0xac>)
   18894:	68a3      	ldr	r3, [r4, #8]
   18896:	7bdb      	ldrb	r3, [r3, #15]
   18898:	2b01      	cmp	r3, #1
   1889a:	d10a      	bne.n	188b2 <k_sched_lock+0x6e>
   1889c:	4913      	ldr	r1, [pc, #76]	; (188ec <k_sched_lock+0xa8>)
   1889e:	4812      	ldr	r0, [pc, #72]	; (188e8 <k_sched_lock+0xa4>)
   188a0:	f240 1213 	movw	r2, #275	; 0x113
   188a4:	f002 f906 	bl	1aab4 <printk>
   188a8:	f240 1113 	movw	r1, #275	; 0x113
   188ac:	480f      	ldr	r0, [pc, #60]	; (188ec <k_sched_lock+0xa8>)
   188ae:	f002 fba7 	bl	1b000 <assert_post_action>
	--_current->base.sched_locked;
   188b2:	68a2      	ldr	r2, [r4, #8]
   188b4:	7bd3      	ldrb	r3, [r2, #15]
   188b6:	3b01      	subs	r3, #1
   188b8:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   188ba:	4809      	ldr	r0, [pc, #36]	; (188e0 <k_sched_lock+0x9c>)
   188bc:	f001 f91c 	bl	19af8 <z_spin_unlock_valid>
   188c0:	b940      	cbnz	r0, 188d4 <k_sched_lock+0x90>
   188c2:	4908      	ldr	r1, [pc, #32]	; (188e4 <k_sched_lock+0xa0>)
   188c4:	4808      	ldr	r0, [pc, #32]	; (188e8 <k_sched_lock+0xa4>)
   188c6:	22a7      	movs	r2, #167	; 0xa7
   188c8:	f002 f8f4 	bl	1aab4 <printk>
   188cc:	21a7      	movs	r1, #167	; 0xa7
   188ce:	4805      	ldr	r0, [pc, #20]	; (188e4 <k_sched_lock+0xa0>)
   188d0:	f002 fb96 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   188d4:	f385 8811 	msr	BASEPRI, r5
   188d8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   188dc:	bd38      	pop	{r3, r4, r5, pc}
   188de:	bf00      	nop
   188e0:	2000b184 	.word	0x2000b184
   188e4:	00020077 	.word	0x00020077
   188e8:	0002003d 	.word	0x0002003d
   188ec:	00022e97 	.word	0x00022e97
   188f0:	2000b14c 	.word	0x2000b14c

000188f4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   188f4:	4b11      	ldr	r3, [pc, #68]	; (1893c <z_priq_dumb_remove+0x48>)
{
   188f6:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   188f8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   188fc:	4282      	cmp	r2, r0
{
   188fe:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   18900:	d105      	bne.n	1890e <z_priq_dumb_remove+0x1a>
   18902:	689b      	ldr	r3, [r3, #8]
   18904:	428b      	cmp	r3, r1
   18906:	d102      	bne.n	1890e <z_priq_dumb_remove+0x1a>
   18908:	7b4b      	ldrb	r3, [r1, #13]
   1890a:	06db      	lsls	r3, r3, #27
   1890c:	d114      	bne.n	18938 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1890e:	4b0c      	ldr	r3, [pc, #48]	; (18940 <z_priq_dumb_remove+0x4c>)
   18910:	429c      	cmp	r4, r3
   18912:	d10a      	bne.n	1892a <z_priq_dumb_remove+0x36>
   18914:	490b      	ldr	r1, [pc, #44]	; (18944 <z_priq_dumb_remove+0x50>)
   18916:	480c      	ldr	r0, [pc, #48]	; (18948 <z_priq_dumb_remove+0x54>)
   18918:	f240 32da 	movw	r2, #986	; 0x3da
   1891c:	f002 f8ca 	bl	1aab4 <printk>
   18920:	f240 31da 	movw	r1, #986	; 0x3da
   18924:	4807      	ldr	r0, [pc, #28]	; (18944 <z_priq_dumb_remove+0x50>)
   18926:	f002 fb6b 	bl	1b000 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1892a:	e9d4 3200 	ldrd	r3, r2, [r4]
   1892e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   18930:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18932:	2300      	movs	r3, #0
	node->prev = NULL;
   18934:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   18938:	bd10      	pop	{r4, pc}
   1893a:	bf00      	nop
   1893c:	2000b14c 	.word	0x2000b14c
   18940:	2000a420 	.word	0x2000a420
   18944:	00022ec2 	.word	0x00022ec2
   18948:	0002003d 	.word	0x0002003d

0001894c <z_unpend_thread>:
{
   1894c:	b538      	push	{r3, r4, r5, lr}
   1894e:	4604      	mov	r4, r0
	__asm__ volatile(
   18950:	f04f 0320 	mov.w	r3, #32
   18954:	f3ef 8511 	mrs	r5, BASEPRI
   18958:	f383 8811 	msr	BASEPRI, r3
   1895c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18960:	4814      	ldr	r0, [pc, #80]	; (189b4 <z_unpend_thread+0x68>)
   18962:	f001 f8bb 	bl	19adc <z_spin_lock_valid>
   18966:	b940      	cbnz	r0, 1897a <z_unpend_thread+0x2e>
   18968:	4913      	ldr	r1, [pc, #76]	; (189b8 <z_unpend_thread+0x6c>)
   1896a:	4814      	ldr	r0, [pc, #80]	; (189bc <z_unpend_thread+0x70>)
   1896c:	227c      	movs	r2, #124	; 0x7c
   1896e:	f002 f8a1 	bl	1aab4 <printk>
   18972:	217c      	movs	r1, #124	; 0x7c
   18974:	4810      	ldr	r0, [pc, #64]	; (189b8 <z_unpend_thread+0x6c>)
   18976:	f002 fb43 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   1897a:	480e      	ldr	r0, [pc, #56]	; (189b4 <z_unpend_thread+0x68>)
   1897c:	f001 f8ca 	bl	19b14 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   18980:	4620      	mov	r0, r4
   18982:	f005 fc88 	bl	1e296 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18986:	480b      	ldr	r0, [pc, #44]	; (189b4 <z_unpend_thread+0x68>)
   18988:	f001 f8b6 	bl	19af8 <z_spin_unlock_valid>
   1898c:	b940      	cbnz	r0, 189a0 <z_unpend_thread+0x54>
   1898e:	490a      	ldr	r1, [pc, #40]	; (189b8 <z_unpend_thread+0x6c>)
   18990:	480a      	ldr	r0, [pc, #40]	; (189bc <z_unpend_thread+0x70>)
   18992:	22a7      	movs	r2, #167	; 0xa7
   18994:	f002 f88e 	bl	1aab4 <printk>
   18998:	21a7      	movs	r1, #167	; 0xa7
   1899a:	4807      	ldr	r0, [pc, #28]	; (189b8 <z_unpend_thread+0x6c>)
   1899c:	f002 fb30 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   189a0:	f385 8811 	msr	BASEPRI, r5
   189a4:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   189a8:	f104 0018 	add.w	r0, r4, #24
}
   189ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   189b0:	f001 bad8 	b.w	19f64 <z_abort_timeout>
   189b4:	2000b184 	.word	0x2000b184
   189b8:	00020077 	.word	0x00020077
   189bc:	0002003d 	.word	0x0002003d

000189c0 <update_cache>:
{
   189c0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current != NULL, "");
   189c2:	4c19      	ldr	r4, [pc, #100]	; (18a28 <update_cache+0x68>)
{
   189c4:	4602      	mov	r2, r0
	if (_current_cpu->pending_abort != NULL) {
   189c6:	6923      	ldr	r3, [r4, #16]
	__ASSERT(_current != NULL, "");
   189c8:	68a1      	ldr	r1, [r4, #8]
	if (_current_cpu->pending_abort != NULL) {
   189ca:	b143      	cbz	r3, 189de <update_cache+0x1e>
		return _current_cpu->idle_thread;
   189cc:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   189ce:	b1a8      	cbz	r0, 189fc <update_cache+0x3c>
		if (thread != _current) {
   189d0:	68a3      	ldr	r3, [r4, #8]
   189d2:	42ab      	cmp	r3, r5
   189d4:	d001      	beq.n	189da <update_cache+0x1a>
			z_reset_time_slice();
   189d6:	f7ff fe9b 	bl	18710 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   189da:	62a5      	str	r5, [r4, #40]	; 0x28
}
   189dc:	e023      	b.n	18a26 <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   189de:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   189e2:	f005 fc66 	bl	1e2b2 <z_priq_dumb_best>
   189e6:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   189e8:	7b4b      	ldrb	r3, [r1, #13]
   189ea:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   189ec:	bf44      	itt	mi
   189ee:	f043 0308 	orrmi.w	r3, r3, #8
   189f2:	734b      	strbmi	r3, [r1, #13]
	return thread ? thread : _current_cpu->idle_thread;
   189f4:	b905      	cbnz	r5, 189f8 <update_cache+0x38>
   189f6:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   189f8:	b152      	cbz	r2, 18a10 <update_cache+0x50>
   189fa:	e7e9      	b.n	189d0 <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   189fc:	b941      	cbnz	r1, 18a10 <update_cache+0x50>
   189fe:	490b      	ldr	r1, [pc, #44]	; (18a2c <update_cache+0x6c>)
   18a00:	480b      	ldr	r0, [pc, #44]	; (18a30 <update_cache+0x70>)
   18a02:	2283      	movs	r2, #131	; 0x83
   18a04:	f002 f856 	bl	1aab4 <printk>
   18a08:	2183      	movs	r1, #131	; 0x83
   18a0a:	4808      	ldr	r0, [pc, #32]	; (18a2c <update_cache+0x6c>)
   18a0c:	f002 faf8 	bl	1b000 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   18a10:	68a3      	ldr	r3, [r4, #8]
   18a12:	7b5a      	ldrb	r2, [r3, #13]
   18a14:	06d2      	lsls	r2, r2, #27
   18a16:	d1db      	bne.n	189d0 <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   18a18:	69aa      	ldr	r2, [r5, #24]
   18a1a:	2a00      	cmp	r2, #0
   18a1c:	d1d8      	bne.n	189d0 <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   18a1e:	89da      	ldrh	r2, [r3, #14]
   18a20:	2a7f      	cmp	r2, #127	; 0x7f
   18a22:	d9d5      	bls.n	189d0 <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   18a24:	62a3      	str	r3, [r4, #40]	; 0x28
}
   18a26:	bd38      	pop	{r3, r4, r5, pc}
   18a28:	2000b14c 	.word	0x2000b14c
   18a2c:	00022ec2 	.word	0x00022ec2
   18a30:	0002003d 	.word	0x0002003d

00018a34 <k_sched_unlock>:
{
   18a34:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18a36:	f04f 0320 	mov.w	r3, #32
   18a3a:	f3ef 8511 	mrs	r5, BASEPRI
   18a3e:	f383 8811 	msr	BASEPRI, r3
   18a42:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18a46:	4824      	ldr	r0, [pc, #144]	; (18ad8 <k_sched_unlock+0xa4>)
   18a48:	f001 f848 	bl	19adc <z_spin_lock_valid>
   18a4c:	b940      	cbnz	r0, 18a60 <k_sched_unlock+0x2c>
   18a4e:	4923      	ldr	r1, [pc, #140]	; (18adc <k_sched_unlock+0xa8>)
   18a50:	4823      	ldr	r0, [pc, #140]	; (18ae0 <k_sched_unlock+0xac>)
   18a52:	227c      	movs	r2, #124	; 0x7c
   18a54:	f002 f82e 	bl	1aab4 <printk>
   18a58:	217c      	movs	r1, #124	; 0x7c
   18a5a:	4820      	ldr	r0, [pc, #128]	; (18adc <k_sched_unlock+0xa8>)
   18a5c:	f002 fad0 	bl	1b000 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   18a60:	4c20      	ldr	r4, [pc, #128]	; (18ae4 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   18a62:	481d      	ldr	r0, [pc, #116]	; (18ad8 <k_sched_unlock+0xa4>)
   18a64:	f001 f856 	bl	19b14 <z_spin_lock_set_owner>
   18a68:	68a3      	ldr	r3, [r4, #8]
   18a6a:	7bdb      	ldrb	r3, [r3, #15]
   18a6c:	b953      	cbnz	r3, 18a84 <k_sched_unlock+0x50>
   18a6e:	491e      	ldr	r1, [pc, #120]	; (18ae8 <k_sched_unlock+0xb4>)
   18a70:	481b      	ldr	r0, [pc, #108]	; (18ae0 <k_sched_unlock+0xac>)
   18a72:	f44f 725d 	mov.w	r2, #884	; 0x374
   18a76:	f002 f81d 	bl	1aab4 <printk>
   18a7a:	f44f 715d 	mov.w	r1, #884	; 0x374
   18a7e:	481a      	ldr	r0, [pc, #104]	; (18ae8 <k_sched_unlock+0xb4>)
   18a80:	f002 fabe 	bl	1b000 <assert_post_action>
   18a84:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   18a88:	b153      	cbz	r3, 18aa0 <k_sched_unlock+0x6c>
   18a8a:	4917      	ldr	r1, [pc, #92]	; (18ae8 <k_sched_unlock+0xb4>)
   18a8c:	4814      	ldr	r0, [pc, #80]	; (18ae0 <k_sched_unlock+0xac>)
   18a8e:	f240 3275 	movw	r2, #885	; 0x375
   18a92:	f002 f80f 	bl	1aab4 <printk>
   18a96:	f240 3175 	movw	r1, #885	; 0x375
   18a9a:	4813      	ldr	r0, [pc, #76]	; (18ae8 <k_sched_unlock+0xb4>)
   18a9c:	f002 fab0 	bl	1b000 <assert_post_action>
		++_current->base.sched_locked;
   18aa0:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   18aa2:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   18aa4:	7bd3      	ldrb	r3, [r2, #15]
   18aa6:	3301      	adds	r3, #1
   18aa8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   18aaa:	f7ff ff89 	bl	189c0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18aae:	480a      	ldr	r0, [pc, #40]	; (18ad8 <k_sched_unlock+0xa4>)
   18ab0:	f001 f822 	bl	19af8 <z_spin_unlock_valid>
   18ab4:	b940      	cbnz	r0, 18ac8 <k_sched_unlock+0x94>
   18ab6:	4909      	ldr	r1, [pc, #36]	; (18adc <k_sched_unlock+0xa8>)
   18ab8:	4809      	ldr	r0, [pc, #36]	; (18ae0 <k_sched_unlock+0xac>)
   18aba:	22a7      	movs	r2, #167	; 0xa7
   18abc:	f001 fffa 	bl	1aab4 <printk>
   18ac0:	21a7      	movs	r1, #167	; 0xa7
   18ac2:	4806      	ldr	r0, [pc, #24]	; (18adc <k_sched_unlock+0xa8>)
   18ac4:	f002 fa9c 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   18ac8:	f385 8811 	msr	BASEPRI, r5
   18acc:	f3bf 8f6f 	isb	sy
}
   18ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   18ad4:	f005 bbd5 	b.w	1e282 <z_reschedule_unlocked>
   18ad8:	2000b184 	.word	0x2000b184
   18adc:	00020077 	.word	0x00020077
   18ae0:	0002003d 	.word	0x0002003d
   18ae4:	2000b14c 	.word	0x2000b14c
   18ae8:	00022ec2 	.word	0x00022ec2

00018aec <ready_thread>:
{
   18aec:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   18aee:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   18af2:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   18af4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   18af6:	7b43      	ldrb	r3, [r0, #13]
   18af8:	db39      	blt.n	18b6e <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18afa:	06db      	lsls	r3, r3, #27
   18afc:	d137      	bne.n	18b6e <ready_thread+0x82>
   18afe:	6983      	ldr	r3, [r0, #24]
   18b00:	2b00      	cmp	r3, #0
   18b02:	d134      	bne.n	18b6e <ready_thread+0x82>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18b04:	4b1a      	ldr	r3, [pc, #104]	; (18b70 <ready_thread+0x84>)
   18b06:	4298      	cmp	r0, r3
   18b08:	d10a      	bne.n	18b20 <ready_thread+0x34>
   18b0a:	491a      	ldr	r1, [pc, #104]	; (18b74 <ready_thread+0x88>)
   18b0c:	481a      	ldr	r0, [pc, #104]	; (18b78 <ready_thread+0x8c>)
   18b0e:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18b12:	f001 ffcf 	bl	1aab4 <printk>
   18b16:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18b1a:	4816      	ldr	r0, [pc, #88]	; (18b74 <ready_thread+0x88>)
   18b1c:	f002 fa70 	bl	1b000 <assert_post_action>
	return list->head == list;
   18b20:	4a16      	ldr	r2, [pc, #88]	; (18b7c <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b22:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   18b26:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b2a:	4283      	cmp	r3, r0
   18b2c:	d019      	beq.n	18b62 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18b2e:	b1c3      	cbz	r3, 18b62 <ready_thread+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   18b30:	f994 500e 	ldrsb.w	r5, [r4, #14]
   18b34:	f993 600e 	ldrsb.w	r6, [r3, #14]
   18b38:	42ae      	cmp	r6, r5
   18b3a:	dd0d      	ble.n	18b58 <ready_thread+0x6c>
	node->prev = successor->prev;
   18b3c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18b3e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   18b42:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18b44:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   18b46:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   18b48:	2000      	movs	r0, #0
   18b4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18b4e:	7363      	strb	r3, [r4, #13]
}
   18b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   18b54:	f7ff bf34 	b.w	189c0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18b58:	428b      	cmp	r3, r1
   18b5a:	d002      	beq.n	18b62 <ready_thread+0x76>
   18b5c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18b5e:	2b00      	cmp	r3, #0
   18b60:	d1e8      	bne.n	18b34 <ready_thread+0x48>
	node->prev = list->tail;
   18b62:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   18b66:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18b68:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18b6a:	6314      	str	r4, [r2, #48]	; 0x30
}
   18b6c:	e7eb      	b.n	18b46 <ready_thread+0x5a>
}
   18b6e:	bd70      	pop	{r4, r5, r6, pc}
   18b70:	2000a420 	.word	0x2000a420
   18b74:	00022ec2 	.word	0x00022ec2
   18b78:	0002003d 	.word	0x0002003d
   18b7c:	2000b14c 	.word	0x2000b14c

00018b80 <z_ready_thread>:
{
   18b80:	b538      	push	{r3, r4, r5, lr}
   18b82:	4604      	mov	r4, r0
	__asm__ volatile(
   18b84:	f04f 0320 	mov.w	r3, #32
   18b88:	f3ef 8511 	mrs	r5, BASEPRI
   18b8c:	f383 8811 	msr	BASEPRI, r3
   18b90:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18b94:	4812      	ldr	r0, [pc, #72]	; (18be0 <z_ready_thread+0x60>)
   18b96:	f000 ffa1 	bl	19adc <z_spin_lock_valid>
   18b9a:	b940      	cbnz	r0, 18bae <z_ready_thread+0x2e>
   18b9c:	4911      	ldr	r1, [pc, #68]	; (18be4 <z_ready_thread+0x64>)
   18b9e:	4812      	ldr	r0, [pc, #72]	; (18be8 <z_ready_thread+0x68>)
   18ba0:	227c      	movs	r2, #124	; 0x7c
   18ba2:	f001 ff87 	bl	1aab4 <printk>
   18ba6:	217c      	movs	r1, #124	; 0x7c
   18ba8:	480e      	ldr	r0, [pc, #56]	; (18be4 <z_ready_thread+0x64>)
   18baa:	f002 fa29 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   18bae:	480c      	ldr	r0, [pc, #48]	; (18be0 <z_ready_thread+0x60>)
   18bb0:	f000 ffb0 	bl	19b14 <z_spin_lock_set_owner>
		ready_thread(thread);
   18bb4:	4620      	mov	r0, r4
   18bb6:	f7ff ff99 	bl	18aec <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18bba:	4809      	ldr	r0, [pc, #36]	; (18be0 <z_ready_thread+0x60>)
   18bbc:	f000 ff9c 	bl	19af8 <z_spin_unlock_valid>
   18bc0:	b940      	cbnz	r0, 18bd4 <z_ready_thread+0x54>
   18bc2:	4908      	ldr	r1, [pc, #32]	; (18be4 <z_ready_thread+0x64>)
   18bc4:	4808      	ldr	r0, [pc, #32]	; (18be8 <z_ready_thread+0x68>)
   18bc6:	22a7      	movs	r2, #167	; 0xa7
   18bc8:	f001 ff74 	bl	1aab4 <printk>
   18bcc:	21a7      	movs	r1, #167	; 0xa7
   18bce:	4805      	ldr	r0, [pc, #20]	; (18be4 <z_ready_thread+0x64>)
   18bd0:	f002 fa16 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   18bd4:	f385 8811 	msr	BASEPRI, r5
   18bd8:	f3bf 8f6f 	isb	sy
}
   18bdc:	bd38      	pop	{r3, r4, r5, pc}
   18bde:	bf00      	nop
   18be0:	2000b184 	.word	0x2000b184
   18be4:	00020077 	.word	0x00020077
   18be8:	0002003d 	.word	0x0002003d

00018bec <z_sched_start>:
{
   18bec:	b538      	push	{r3, r4, r5, lr}
   18bee:	4604      	mov	r4, r0
	__asm__ volatile(
   18bf0:	f04f 0320 	mov.w	r3, #32
   18bf4:	f3ef 8511 	mrs	r5, BASEPRI
   18bf8:	f383 8811 	msr	BASEPRI, r3
   18bfc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18c00:	4818      	ldr	r0, [pc, #96]	; (18c64 <z_sched_start+0x78>)
   18c02:	f000 ff6b 	bl	19adc <z_spin_lock_valid>
   18c06:	b940      	cbnz	r0, 18c1a <z_sched_start+0x2e>
   18c08:	4917      	ldr	r1, [pc, #92]	; (18c68 <z_sched_start+0x7c>)
   18c0a:	4818      	ldr	r0, [pc, #96]	; (18c6c <z_sched_start+0x80>)
   18c0c:	227c      	movs	r2, #124	; 0x7c
   18c0e:	f001 ff51 	bl	1aab4 <printk>
   18c12:	217c      	movs	r1, #124	; 0x7c
   18c14:	4814      	ldr	r0, [pc, #80]	; (18c68 <z_sched_start+0x7c>)
   18c16:	f002 f9f3 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   18c1a:	4812      	ldr	r0, [pc, #72]	; (18c64 <z_sched_start+0x78>)
   18c1c:	f000 ff7a 	bl	19b14 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   18c20:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   18c22:	075a      	lsls	r2, r3, #29
   18c24:	d411      	bmi.n	18c4a <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18c26:	480f      	ldr	r0, [pc, #60]	; (18c64 <z_sched_start+0x78>)
   18c28:	f000 ff66 	bl	19af8 <z_spin_unlock_valid>
   18c2c:	b940      	cbnz	r0, 18c40 <z_sched_start+0x54>
   18c2e:	490e      	ldr	r1, [pc, #56]	; (18c68 <z_sched_start+0x7c>)
   18c30:	480e      	ldr	r0, [pc, #56]	; (18c6c <z_sched_start+0x80>)
   18c32:	22a7      	movs	r2, #167	; 0xa7
   18c34:	f001 ff3e 	bl	1aab4 <printk>
   18c38:	21a7      	movs	r1, #167	; 0xa7
   18c3a:	480b      	ldr	r0, [pc, #44]	; (18c68 <z_sched_start+0x7c>)
   18c3c:	f002 f9e0 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   18c40:	f385 8811 	msr	BASEPRI, r5
   18c44:	f3bf 8f6f 	isb	sy
}
   18c48:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18c4a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   18c4e:	4620      	mov	r0, r4
   18c50:	7363      	strb	r3, [r4, #13]
   18c52:	f7ff ff4b 	bl	18aec <ready_thread>
	z_reschedule(&sched_spinlock, key);
   18c56:	4629      	mov	r1, r5
}
   18c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   18c5c:	4801      	ldr	r0, [pc, #4]	; (18c64 <z_sched_start+0x78>)
   18c5e:	f7ff bdbb 	b.w	187d8 <z_reschedule>
   18c62:	bf00      	nop
   18c64:	2000b184 	.word	0x2000b184
   18c68:	00020077 	.word	0x00020077
   18c6c:	0002003d 	.word	0x0002003d

00018c70 <z_thread_timeout>:
{
   18c70:	b570      	push	{r4, r5, r6, lr}
   18c72:	4604      	mov	r4, r0
	__asm__ volatile(
   18c74:	f04f 0320 	mov.w	r3, #32
   18c78:	f3ef 8611 	mrs	r6, BASEPRI
   18c7c:	f383 8811 	msr	BASEPRI, r3
   18c80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18c84:	4819      	ldr	r0, [pc, #100]	; (18cec <z_thread_timeout+0x7c>)
   18c86:	f000 ff29 	bl	19adc <z_spin_lock_valid>
   18c8a:	b940      	cbnz	r0, 18c9e <z_thread_timeout+0x2e>
   18c8c:	4918      	ldr	r1, [pc, #96]	; (18cf0 <z_thread_timeout+0x80>)
   18c8e:	4819      	ldr	r0, [pc, #100]	; (18cf4 <z_thread_timeout+0x84>)
   18c90:	227c      	movs	r2, #124	; 0x7c
   18c92:	f001 ff0f 	bl	1aab4 <printk>
   18c96:	217c      	movs	r1, #124	; 0x7c
   18c98:	4815      	ldr	r0, [pc, #84]	; (18cf0 <z_thread_timeout+0x80>)
   18c9a:	f002 f9b1 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   18c9e:	4813      	ldr	r0, [pc, #76]	; (18cec <z_thread_timeout+0x7c>)
   18ca0:	f000 ff38 	bl	19b14 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   18ca4:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   18ca8:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   18cac:	b113      	cbz	r3, 18cb4 <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   18cae:	4628      	mov	r0, r5
   18cb0:	f005 faf1 	bl	1e296 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   18cb4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   18cb8:	4628      	mov	r0, r5
   18cba:	f023 0314 	bic.w	r3, r3, #20
   18cbe:	f804 3c0b 	strb.w	r3, [r4, #-11]
   18cc2:	f7ff ff13 	bl	18aec <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18cc6:	4809      	ldr	r0, [pc, #36]	; (18cec <z_thread_timeout+0x7c>)
   18cc8:	f000 ff16 	bl	19af8 <z_spin_unlock_valid>
   18ccc:	b940      	cbnz	r0, 18ce0 <z_thread_timeout+0x70>
   18cce:	4908      	ldr	r1, [pc, #32]	; (18cf0 <z_thread_timeout+0x80>)
   18cd0:	4808      	ldr	r0, [pc, #32]	; (18cf4 <z_thread_timeout+0x84>)
   18cd2:	22a7      	movs	r2, #167	; 0xa7
   18cd4:	f001 feee 	bl	1aab4 <printk>
   18cd8:	21a7      	movs	r1, #167	; 0xa7
   18cda:	4805      	ldr	r0, [pc, #20]	; (18cf0 <z_thread_timeout+0x80>)
   18cdc:	f002 f990 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   18ce0:	f386 8811 	msr	BASEPRI, r6
   18ce4:	f3bf 8f6f 	isb	sy
}
   18ce8:	bd70      	pop	{r4, r5, r6, pc}
   18cea:	bf00      	nop
   18cec:	2000b184 	.word	0x2000b184
   18cf0:	00020077 	.word	0x00020077
   18cf4:	0002003d 	.word	0x0002003d

00018cf8 <move_thread_to_end_of_prio_q>:
{
   18cf8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   18cfa:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   18cfe:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   18d00:	2b00      	cmp	r3, #0
   18d02:	da03      	bge.n	18d0c <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   18d04:	4601      	mov	r1, r0
   18d06:	481d      	ldr	r0, [pc, #116]	; (18d7c <move_thread_to_end_of_prio_q+0x84>)
   18d08:	f7ff fdf4 	bl	188f4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18d0c:	4b1c      	ldr	r3, [pc, #112]	; (18d80 <move_thread_to_end_of_prio_q+0x88>)
   18d0e:	429c      	cmp	r4, r3
   18d10:	d10a      	bne.n	18d28 <move_thread_to_end_of_prio_q+0x30>
   18d12:	491c      	ldr	r1, [pc, #112]	; (18d84 <move_thread_to_end_of_prio_q+0x8c>)
   18d14:	481c      	ldr	r0, [pc, #112]	; (18d88 <move_thread_to_end_of_prio_q+0x90>)
   18d16:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18d1a:	f001 fecb 	bl	1aab4 <printk>
   18d1e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18d22:	4818      	ldr	r0, [pc, #96]	; (18d84 <move_thread_to_end_of_prio_q+0x8c>)
   18d24:	f002 f96c 	bl	1b000 <assert_post_action>
	return list->head == list;
   18d28:	4a18      	ldr	r2, [pc, #96]	; (18d8c <move_thread_to_end_of_prio_q+0x94>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18d2a:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   18d2e:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18d32:	4283      	cmp	r3, r0
   18d34:	d01c      	beq.n	18d70 <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18d36:	b1db      	cbz	r3, 18d70 <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   18d38:	f994 500e 	ldrsb.w	r5, [r4, #14]
   18d3c:	f993 600e 	ldrsb.w	r6, [r3, #14]
   18d40:	42ae      	cmp	r6, r5
   18d42:	dd10      	ble.n	18d66 <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   18d44:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   18d46:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   18d4a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   18d4c:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   18d4e:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   18d50:	6890      	ldr	r0, [r2, #8]
   18d52:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18d56:	7363      	strb	r3, [r4, #13]
   18d58:	1b03      	subs	r3, r0, r4
   18d5a:	4258      	negs	r0, r3
   18d5c:	4158      	adcs	r0, r3
}
   18d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   18d62:	f7ff be2d 	b.w	189c0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18d66:	428b      	cmp	r3, r1
   18d68:	d002      	beq.n	18d70 <move_thread_to_end_of_prio_q+0x78>
   18d6a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18d6c:	2b00      	cmp	r3, #0
   18d6e:	d1e5      	bne.n	18d3c <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   18d70:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   18d74:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18d76:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18d78:	6314      	str	r4, [r2, #48]	; 0x30
}
   18d7a:	e7e8      	b.n	18d4e <move_thread_to_end_of_prio_q+0x56>
   18d7c:	2000b178 	.word	0x2000b178
   18d80:	2000a420 	.word	0x2000a420
   18d84:	00022ec2 	.word	0x00022ec2
   18d88:	0002003d 	.word	0x0002003d
   18d8c:	2000b14c 	.word	0x2000b14c

00018d90 <z_time_slice>:
{
   18d90:	b538      	push	{r3, r4, r5, lr}
   18d92:	4604      	mov	r4, r0
	__asm__ volatile(
   18d94:	f04f 0320 	mov.w	r3, #32
   18d98:	f3ef 8511 	mrs	r5, BASEPRI
   18d9c:	f383 8811 	msr	BASEPRI, r3
   18da0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18da4:	4824      	ldr	r0, [pc, #144]	; (18e38 <z_time_slice+0xa8>)
   18da6:	f000 fe99 	bl	19adc <z_spin_lock_valid>
   18daa:	b940      	cbnz	r0, 18dbe <z_time_slice+0x2e>
   18dac:	4923      	ldr	r1, [pc, #140]	; (18e3c <z_time_slice+0xac>)
   18dae:	4824      	ldr	r0, [pc, #144]	; (18e40 <z_time_slice+0xb0>)
   18db0:	227c      	movs	r2, #124	; 0x7c
   18db2:	f001 fe7f 	bl	1aab4 <printk>
   18db6:	217c      	movs	r1, #124	; 0x7c
   18db8:	4820      	ldr	r0, [pc, #128]	; (18e3c <z_time_slice+0xac>)
   18dba:	f002 f921 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   18dbe:	481e      	ldr	r0, [pc, #120]	; (18e38 <z_time_slice+0xa8>)
   18dc0:	f000 fea8 	bl	19b14 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   18dc4:	4b1f      	ldr	r3, [pc, #124]	; (18e44 <z_time_slice+0xb4>)
   18dc6:	4a20      	ldr	r2, [pc, #128]	; (18e48 <z_time_slice+0xb8>)
   18dc8:	6898      	ldr	r0, [r3, #8]
   18dca:	6811      	ldr	r1, [r2, #0]
   18dcc:	4288      	cmp	r0, r1
   18dce:	d113      	bne.n	18df8 <z_time_slice+0x68>
			z_reset_time_slice();
   18dd0:	f7ff fc9e 	bl	18710 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18dd4:	4818      	ldr	r0, [pc, #96]	; (18e38 <z_time_slice+0xa8>)
   18dd6:	f000 fe8f 	bl	19af8 <z_spin_unlock_valid>
   18dda:	b940      	cbnz	r0, 18dee <z_time_slice+0x5e>
   18ddc:	4917      	ldr	r1, [pc, #92]	; (18e3c <z_time_slice+0xac>)
   18dde:	4818      	ldr	r0, [pc, #96]	; (18e40 <z_time_slice+0xb0>)
   18de0:	22a7      	movs	r2, #167	; 0xa7
   18de2:	f001 fe67 	bl	1aab4 <printk>
   18de6:	21a7      	movs	r1, #167	; 0xa7
   18de8:	4814      	ldr	r0, [pc, #80]	; (18e3c <z_time_slice+0xac>)
   18dea:	f002 f909 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   18dee:	f385 8811 	msr	BASEPRI, r5
   18df2:	f3bf 8f6f 	isb	sy
}
   18df6:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   18df8:	2100      	movs	r1, #0
   18dfa:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   18dfc:	4a13      	ldr	r2, [pc, #76]	; (18e4c <z_time_slice+0xbc>)
   18dfe:	6812      	ldr	r2, [r2, #0]
   18e00:	b1ba      	cbz	r2, 18e32 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   18e02:	89c2      	ldrh	r2, [r0, #14]
   18e04:	2a7f      	cmp	r2, #127	; 0x7f
   18e06:	d814      	bhi.n	18e32 <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   18e08:	7b42      	ldrb	r2, [r0, #13]
   18e0a:	06d2      	lsls	r2, r2, #27
   18e0c:	d111      	bne.n	18e32 <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   18e0e:	4a10      	ldr	r2, [pc, #64]	; (18e50 <z_time_slice+0xc0>)
   18e10:	f990 100e 	ldrsb.w	r1, [r0, #14]
   18e14:	6812      	ldr	r2, [r2, #0]
   18e16:	4291      	cmp	r1, r2
   18e18:	db0b      	blt.n	18e32 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   18e1a:	4a0e      	ldr	r2, [pc, #56]	; (18e54 <z_time_slice+0xc4>)
   18e1c:	4290      	cmp	r0, r2
   18e1e:	d008      	beq.n	18e32 <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   18e20:	695a      	ldr	r2, [r3, #20]
   18e22:	42a2      	cmp	r2, r4
   18e24:	dc02      	bgt.n	18e2c <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   18e26:	f7ff ff67 	bl	18cf8 <move_thread_to_end_of_prio_q>
   18e2a:	e7d1      	b.n	18dd0 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   18e2c:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   18e2e:	615a      	str	r2, [r3, #20]
   18e30:	e7d0      	b.n	18dd4 <z_time_slice+0x44>
   18e32:	2200      	movs	r2, #0
   18e34:	e7fb      	b.n	18e2e <z_time_slice+0x9e>
   18e36:	bf00      	nop
   18e38:	2000b184 	.word	0x2000b184
   18e3c:	00020077 	.word	0x00020077
   18e40:	0002003d 	.word	0x0002003d
   18e44:	2000b14c 	.word	0x2000b14c
   18e48:	2000b180 	.word	0x2000b180
   18e4c:	2000b18c 	.word	0x2000b18c
   18e50:	2000b188 	.word	0x2000b188
   18e54:	2000a420 	.word	0x2000a420

00018e58 <z_impl_k_thread_suspend>:
{
   18e58:	b570      	push	{r4, r5, r6, lr}
   18e5a:	4604      	mov	r4, r0
   18e5c:	3018      	adds	r0, #24
   18e5e:	f001 f881 	bl	19f64 <z_abort_timeout>
	__asm__ volatile(
   18e62:	f04f 0320 	mov.w	r3, #32
   18e66:	f3ef 8611 	mrs	r6, BASEPRI
   18e6a:	f383 8811 	msr	BASEPRI, r3
   18e6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e72:	4820      	ldr	r0, [pc, #128]	; (18ef4 <z_impl_k_thread_suspend+0x9c>)
   18e74:	f000 fe32 	bl	19adc <z_spin_lock_valid>
   18e78:	b940      	cbnz	r0, 18e8c <z_impl_k_thread_suspend+0x34>
   18e7a:	491f      	ldr	r1, [pc, #124]	; (18ef8 <z_impl_k_thread_suspend+0xa0>)
   18e7c:	481f      	ldr	r0, [pc, #124]	; (18efc <z_impl_k_thread_suspend+0xa4>)
   18e7e:	227c      	movs	r2, #124	; 0x7c
   18e80:	f001 fe18 	bl	1aab4 <printk>
   18e84:	217c      	movs	r1, #124	; 0x7c
   18e86:	481c      	ldr	r0, [pc, #112]	; (18ef8 <z_impl_k_thread_suspend+0xa0>)
   18e88:	f002 f8ba 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   18e8c:	4819      	ldr	r0, [pc, #100]	; (18ef4 <z_impl_k_thread_suspend+0x9c>)
   18e8e:	f000 fe41 	bl	19b14 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   18e92:	f994 300d 	ldrsb.w	r3, [r4, #13]
   18e96:	2b00      	cmp	r3, #0
   18e98:	da07      	bge.n	18eaa <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   18e9a:	4621      	mov	r1, r4
   18e9c:	4818      	ldr	r0, [pc, #96]	; (18f00 <z_impl_k_thread_suspend+0xa8>)
   18e9e:	f7ff fd29 	bl	188f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18ea2:	7b63      	ldrb	r3, [r4, #13]
   18ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18ea8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   18eaa:	4d16      	ldr	r5, [pc, #88]	; (18f04 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18eac:	7b63      	ldrb	r3, [r4, #13]
   18eae:	68a8      	ldr	r0, [r5, #8]
   18eb0:	f043 0310 	orr.w	r3, r3, #16
   18eb4:	7363      	strb	r3, [r4, #13]
   18eb6:	1b03      	subs	r3, r0, r4
   18eb8:	4258      	negs	r0, r3
   18eba:	4158      	adcs	r0, r3
   18ebc:	f7ff fd80 	bl	189c0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ec0:	480c      	ldr	r0, [pc, #48]	; (18ef4 <z_impl_k_thread_suspend+0x9c>)
   18ec2:	f000 fe19 	bl	19af8 <z_spin_unlock_valid>
   18ec6:	b940      	cbnz	r0, 18eda <z_impl_k_thread_suspend+0x82>
   18ec8:	490b      	ldr	r1, [pc, #44]	; (18ef8 <z_impl_k_thread_suspend+0xa0>)
   18eca:	480c      	ldr	r0, [pc, #48]	; (18efc <z_impl_k_thread_suspend+0xa4>)
   18ecc:	22a7      	movs	r2, #167	; 0xa7
   18ece:	f001 fdf1 	bl	1aab4 <printk>
   18ed2:	21a7      	movs	r1, #167	; 0xa7
   18ed4:	4808      	ldr	r0, [pc, #32]	; (18ef8 <z_impl_k_thread_suspend+0xa0>)
   18ed6:	f002 f893 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   18eda:	f386 8811 	msr	BASEPRI, r6
   18ede:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   18ee2:	68ab      	ldr	r3, [r5, #8]
   18ee4:	42a3      	cmp	r3, r4
   18ee6:	d103      	bne.n	18ef0 <z_impl_k_thread_suspend+0x98>
}
   18ee8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   18eec:	f005 b9c9 	b.w	1e282 <z_reschedule_unlocked>
}
   18ef0:	bd70      	pop	{r4, r5, r6, pc}
   18ef2:	bf00      	nop
   18ef4:	2000b184 	.word	0x2000b184
   18ef8:	00020077 	.word	0x00020077
   18efc:	0002003d 	.word	0x0002003d
   18f00:	2000b178 	.word	0x2000b178
   18f04:	2000b14c 	.word	0x2000b14c

00018f08 <z_thread_single_abort>:
{
   18f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   18f0c:	7b03      	ldrb	r3, [r0, #12]
{
   18f0e:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   18f10:	07dd      	lsls	r5, r3, #31
   18f12:	d50a      	bpl.n	18f2a <z_thread_single_abort+0x22>
   18f14:	4976      	ldr	r1, [pc, #472]	; (190f0 <z_thread_single_abort+0x1e8>)
   18f16:	4877      	ldr	r0, [pc, #476]	; (190f4 <z_thread_single_abort+0x1ec>)
   18f18:	f240 220d 	movw	r2, #525	; 0x20d
   18f1c:	f001 fdca 	bl	1aab4 <printk>
   18f20:	f240 210d 	movw	r1, #525	; 0x20d
   18f24:	4872      	ldr	r0, [pc, #456]	; (190f0 <z_thread_single_abort+0x1e8>)
   18f26:	f002 f86b 	bl	1b000 <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   18f2a:	4e73      	ldr	r6, [pc, #460]	; (190f8 <z_thread_single_abort+0x1f0>)
   18f2c:	68b3      	ldr	r3, [r6, #8]
   18f2e:	42a3      	cmp	r3, r4
   18f30:	d10d      	bne.n	18f4e <z_thread_single_abort+0x46>
   18f32:	f3ef 8305 	mrs	r3, IPSR
   18f36:	b953      	cbnz	r3, 18f4e <z_thread_single_abort+0x46>
   18f38:	496d      	ldr	r1, [pc, #436]	; (190f0 <z_thread_single_abort+0x1e8>)
   18f3a:	486e      	ldr	r0, [pc, #440]	; (190f4 <z_thread_single_abort+0x1ec>)
   18f3c:	f240 220f 	movw	r2, #527	; 0x20f
   18f40:	f001 fdb8 	bl	1aab4 <printk>
   18f44:	f240 210f 	movw	r1, #527	; 0x20f
   18f48:	4869      	ldr	r0, [pc, #420]	; (190f0 <z_thread_single_abort+0x1e8>)
   18f4a:	f002 f859 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   18f4e:	f04f 0320 	mov.w	r3, #32
   18f52:	f3ef 8511 	mrs	r5, BASEPRI
   18f56:	f383 8811 	msr	BASEPRI, r3
   18f5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f5e:	4867      	ldr	r0, [pc, #412]	; (190fc <z_thread_single_abort+0x1f4>)
   18f60:	f000 fdbc 	bl	19adc <z_spin_lock_valid>
   18f64:	b940      	cbnz	r0, 18f78 <z_thread_single_abort+0x70>
   18f66:	4966      	ldr	r1, [pc, #408]	; (19100 <z_thread_single_abort+0x1f8>)
   18f68:	4862      	ldr	r0, [pc, #392]	; (190f4 <z_thread_single_abort+0x1ec>)
   18f6a:	227c      	movs	r2, #124	; 0x7c
   18f6c:	f001 fda2 	bl	1aab4 <printk>
   18f70:	217c      	movs	r1, #124	; 0x7c
   18f72:	4863      	ldr	r0, [pc, #396]	; (19100 <z_thread_single_abort+0x1f8>)
   18f74:	f002 f844 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   18f78:	4860      	ldr	r0, [pc, #384]	; (190fc <z_thread_single_abort+0x1f4>)
   18f7a:	f000 fdcb 	bl	19b14 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   18f7e:	7b63      	ldrb	r3, [r4, #13]
   18f80:	f013 0f28 	tst.w	r3, #40	; 0x28
   18f84:	d012      	beq.n	18fac <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18f86:	485d      	ldr	r0, [pc, #372]	; (190fc <z_thread_single_abort+0x1f4>)
   18f88:	f000 fdb6 	bl	19af8 <z_spin_unlock_valid>
   18f8c:	b940      	cbnz	r0, 18fa0 <z_thread_single_abort+0x98>
   18f8e:	495c      	ldr	r1, [pc, #368]	; (19100 <z_thread_single_abort+0x1f8>)
   18f90:	4858      	ldr	r0, [pc, #352]	; (190f4 <z_thread_single_abort+0x1ec>)
   18f92:	22a7      	movs	r2, #167	; 0xa7
   18f94:	f001 fd8e 	bl	1aab4 <printk>
   18f98:	21a7      	movs	r1, #167	; 0xa7
   18f9a:	4859      	ldr	r0, [pc, #356]	; (19100 <z_thread_single_abort+0x1f8>)
   18f9c:	f002 f830 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   18fa0:	f385 8811 	msr	BASEPRI, r5
   18fa4:	f3bf 8f6f 	isb	sy
}
   18fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   18fac:	f043 0320 	orr.w	r3, r3, #32
   18fb0:	4852      	ldr	r0, [pc, #328]	; (190fc <z_thread_single_abort+0x1f4>)
   18fb2:	7363      	strb	r3, [r4, #13]
   18fb4:	f000 fda0 	bl	19af8 <z_spin_unlock_valid>
   18fb8:	b940      	cbnz	r0, 18fcc <z_thread_single_abort+0xc4>
   18fba:	4951      	ldr	r1, [pc, #324]	; (19100 <z_thread_single_abort+0x1f8>)
   18fbc:	484d      	ldr	r0, [pc, #308]	; (190f4 <z_thread_single_abort+0x1ec>)
   18fbe:	22a7      	movs	r2, #167	; 0xa7
   18fc0:	f001 fd78 	bl	1aab4 <printk>
   18fc4:	21a7      	movs	r1, #167	; 0xa7
   18fc6:	484e      	ldr	r0, [pc, #312]	; (19100 <z_thread_single_abort+0x1f8>)
   18fc8:	f002 f81a 	bl	1b000 <assert_post_action>
   18fcc:	f385 8811 	msr	BASEPRI, r5
   18fd0:	f3bf 8f6f 	isb	sy
   18fd4:	f104 0018 	add.w	r0, r4, #24
   18fd8:	f000 ffc4 	bl	19f64 <z_abort_timeout>
	__asm__ volatile(
   18fdc:	f04f 0320 	mov.w	r3, #32
   18fe0:	f3ef 8711 	mrs	r7, BASEPRI
   18fe4:	f383 8811 	msr	BASEPRI, r3
   18fe8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18fec:	4843      	ldr	r0, [pc, #268]	; (190fc <z_thread_single_abort+0x1f4>)
   18fee:	f000 fd75 	bl	19adc <z_spin_lock_valid>
   18ff2:	b940      	cbnz	r0, 19006 <z_thread_single_abort+0xfe>
   18ff4:	4942      	ldr	r1, [pc, #264]	; (19100 <z_thread_single_abort+0x1f8>)
   18ff6:	483f      	ldr	r0, [pc, #252]	; (190f4 <z_thread_single_abort+0x1ec>)
   18ff8:	227c      	movs	r2, #124	; 0x7c
   18ffa:	f001 fd5b 	bl	1aab4 <printk>
   18ffe:	217c      	movs	r1, #124	; 0x7c
   19000:	483f      	ldr	r0, [pc, #252]	; (19100 <z_thread_single_abort+0x1f8>)
   19002:	f001 fffd 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   19006:	483d      	ldr	r0, [pc, #244]	; (190fc <z_thread_single_abort+0x1f4>)
   19008:	f000 fd84 	bl	19b14 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   1900c:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1900e:	06d8      	lsls	r0, r3, #27
   19010:	d116      	bne.n	19040 <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   19012:	69a2      	ldr	r2, [r4, #24]
   19014:	b9a2      	cbnz	r2, 19040 <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   19016:	0619      	lsls	r1, r3, #24
   19018:	d507      	bpl.n	1902a <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   1901a:	4621      	mov	r1, r4
   1901c:	4839      	ldr	r0, [pc, #228]	; (19104 <z_thread_single_abort+0x1fc>)
   1901e:	f7ff fc69 	bl	188f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   19022:	7b63      	ldrb	r3, [r4, #13]
   19024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19028:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1902a:	68b0      	ldr	r0, [r6, #8]
   1902c:	1b02      	subs	r2, r0, r4
   1902e:	4250      	negs	r0, r2
   19030:	4150      	adcs	r0, r2
   19032:	f7ff fcc5 	bl	189c0 <update_cache>
			waiter->base.pended_on = NULL;
   19036:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1903a:	f104 0930 	add.w	r9, r4, #48	; 0x30
   1903e:	e023      	b.n	19088 <z_thread_single_abort+0x180>
			if (z_is_thread_pending(thread)) {
   19040:	079b      	lsls	r3, r3, #30
   19042:	d5f8      	bpl.n	19036 <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   19044:	4620      	mov	r0, r4
   19046:	f7ff fb4d 	bl	186e4 <pended_on>
   1904a:	4621      	mov	r1, r4
   1904c:	f7ff fc52 	bl	188f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   19050:	7b63      	ldrb	r3, [r4, #13]
   19052:	f023 0302 	bic.w	r3, r3, #2
   19056:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   19058:	2300      	movs	r3, #0
   1905a:	60a3      	str	r3, [r4, #8]
   1905c:	e7eb      	b.n	19036 <z_thread_single_abort+0x12e>
   1905e:	f105 0018 	add.w	r0, r5, #24
   19062:	f000 ff7f 	bl	19f64 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   19066:	4628      	mov	r0, r5
   19068:	f7ff fb3c 	bl	186e4 <pended_on>
   1906c:	4629      	mov	r1, r5
   1906e:	f7ff fc41 	bl	188f4 <z_priq_dumb_remove>
   19072:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   19074:	4628      	mov	r0, r5
   19076:	f023 0302 	bic.w	r3, r3, #2
   1907a:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1907c:	f8c5 8008 	str.w	r8, [r5, #8]
   19080:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   19084:	f7ff fd32 	bl	18aec <ready_thread>
	return list->head == list;
   19088:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1908a:	454d      	cmp	r5, r9
   1908c:	d001      	beq.n	19092 <z_thread_single_abort+0x18a>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1908e:	2d00      	cmp	r5, #0
   19090:	d1e5      	bne.n	1905e <z_thread_single_abort+0x156>
		if (z_is_idle_thread_object(_current)) {
   19092:	68b2      	ldr	r2, [r6, #8]
   19094:	4b1c      	ldr	r3, [pc, #112]	; (19108 <z_thread_single_abort+0x200>)
   19096:	429a      	cmp	r2, r3
   19098:	d102      	bne.n	190a0 <z_thread_single_abort+0x198>
			update_cache(1);
   1909a:	2001      	movs	r0, #1
   1909c:	f7ff fc90 	bl	189c0 <update_cache>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   190a0:	2200      	movs	r2, #0
		thread->base.thread_state |= _THREAD_DEAD;
   190a2:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   190a4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   190a6:	f043 0308 	orr.w	r3, r3, #8
   190aa:	7363      	strb	r3, [r4, #13]
   190ac:	f104 0338 	add.w	r3, r4, #56	; 0x38
   190b0:	e8d3 1fef 	ldaex	r1, [r3]
   190b4:	e8c3 2fe0 	stlex	r0, r2, [r3]
   190b8:	2800      	cmp	r0, #0
   190ba:	d1f9      	bne.n	190b0 <z_thread_single_abort+0x1a8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   190bc:	480f      	ldr	r0, [pc, #60]	; (190fc <z_thread_single_abort+0x1f4>)
   190be:	f000 fd1b 	bl	19af8 <z_spin_unlock_valid>
   190c2:	b940      	cbnz	r0, 190d6 <z_thread_single_abort+0x1ce>
   190c4:	490e      	ldr	r1, [pc, #56]	; (19100 <z_thread_single_abort+0x1f8>)
   190c6:	480b      	ldr	r0, [pc, #44]	; (190f4 <z_thread_single_abort+0x1ec>)
   190c8:	22a7      	movs	r2, #167	; 0xa7
   190ca:	f001 fcf3 	bl	1aab4 <printk>
   190ce:	21a7      	movs	r1, #167	; 0xa7
   190d0:	480b      	ldr	r0, [pc, #44]	; (19100 <z_thread_single_abort+0x1f8>)
   190d2:	f001 ff95 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   190d6:	f387 8811 	msr	BASEPRI, r7
   190da:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   190de:	2d00      	cmp	r5, #0
   190e0:	f43f af62 	beq.w	18fa8 <z_thread_single_abort+0xa0>
		fn_abort(thread);
   190e4:	4620      	mov	r0, r4
   190e6:	462b      	mov	r3, r5
}
   190e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   190ec:	4718      	bx	r3
   190ee:	bf00      	nop
   190f0:	00022ec2 	.word	0x00022ec2
   190f4:	0002003d 	.word	0x0002003d
   190f8:	2000b14c 	.word	0x2000b14c
   190fc:	2000b184 	.word	0x2000b184
   19100:	00020077 	.word	0x00020077
   19104:	2000b178 	.word	0x2000b178
   19108:	2000a420 	.word	0x2000a420

0001910c <unready_thread>:
{
   1910c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1910e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   19112:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   19114:	2b00      	cmp	r3, #0
   19116:	da07      	bge.n	19128 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   19118:	4601      	mov	r1, r0
   1911a:	4808      	ldr	r0, [pc, #32]	; (1913c <unready_thread+0x30>)
   1911c:	f7ff fbea 	bl	188f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   19120:	7b63      	ldrb	r3, [r4, #13]
   19122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19126:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   19128:	4b05      	ldr	r3, [pc, #20]	; (19140 <unready_thread+0x34>)
   1912a:	6898      	ldr	r0, [r3, #8]
   1912c:	1b03      	subs	r3, r0, r4
   1912e:	4258      	negs	r0, r3
   19130:	4158      	adcs	r0, r3
}
   19132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   19136:	f7ff bc43 	b.w	189c0 <update_cache>
   1913a:	bf00      	nop
   1913c:	2000b178 	.word	0x2000b178
   19140:	2000b14c 	.word	0x2000b14c

00019144 <add_to_waitq_locked>:
{
   19144:	b538      	push	{r3, r4, r5, lr}
   19146:	4604      	mov	r4, r0
   19148:	460d      	mov	r5, r1
	unready_thread(thread);
   1914a:	f7ff ffdf 	bl	1910c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1914e:	7b63      	ldrb	r3, [r4, #13]
   19150:	f043 0302 	orr.w	r3, r3, #2
   19154:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   19156:	b1ed      	cbz	r5, 19194 <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   19158:	4b15      	ldr	r3, [pc, #84]	; (191b0 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   1915a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1915c:	429c      	cmp	r4, r3
   1915e:	d10a      	bne.n	19176 <add_to_waitq_locked+0x32>
   19160:	4914      	ldr	r1, [pc, #80]	; (191b4 <add_to_waitq_locked+0x70>)
   19162:	4815      	ldr	r0, [pc, #84]	; (191b8 <add_to_waitq_locked+0x74>)
   19164:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   19168:	f001 fca4 	bl	1aab4 <printk>
   1916c:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   19170:	4810      	ldr	r0, [pc, #64]	; (191b4 <add_to_waitq_locked+0x70>)
   19172:	f001 ff45 	bl	1b000 <assert_post_action>
	return list->head == list;
   19176:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19178:	429d      	cmp	r5, r3
   1917a:	d012      	beq.n	191a2 <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1917c:	b18b      	cbz	r3, 191a2 <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   1917e:	f994 200e 	ldrsb.w	r2, [r4, #14]
   19182:	f993 100e 	ldrsb.w	r1, [r3, #14]
   19186:	4291      	cmp	r1, r2
   19188:	dd05      	ble.n	19196 <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   1918a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1918c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   19190:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   19192:	605c      	str	r4, [r3, #4]
}
   19194:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   19196:	6869      	ldr	r1, [r5, #4]
   19198:	428b      	cmp	r3, r1
   1919a:	d002      	beq.n	191a2 <add_to_waitq_locked+0x5e>
   1919c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1919e:	2b00      	cmp	r3, #0
   191a0:	d1ef      	bne.n	19182 <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   191a2:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   191a4:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   191a6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   191a8:	686b      	ldr	r3, [r5, #4]
   191aa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   191ac:	606c      	str	r4, [r5, #4]
}
   191ae:	e7f1      	b.n	19194 <add_to_waitq_locked+0x50>
   191b0:	2000a420 	.word	0x2000a420
   191b4:	00022ec2 	.word	0x00022ec2
   191b8:	0002003d 	.word	0x0002003d

000191bc <pend>:
{
   191bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   191c0:	4604      	mov	r4, r0
   191c2:	4688      	mov	r8, r1
   191c4:	4616      	mov	r6, r2
   191c6:	461d      	mov	r5, r3
	__asm__ volatile(
   191c8:	f04f 0320 	mov.w	r3, #32
   191cc:	f3ef 8711 	mrs	r7, BASEPRI
   191d0:	f383 8811 	msr	BASEPRI, r3
   191d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   191d8:	481a      	ldr	r0, [pc, #104]	; (19244 <pend+0x88>)
   191da:	f000 fc7f 	bl	19adc <z_spin_lock_valid>
   191de:	b940      	cbnz	r0, 191f2 <pend+0x36>
   191e0:	4919      	ldr	r1, [pc, #100]	; (19248 <pend+0x8c>)
   191e2:	481a      	ldr	r0, [pc, #104]	; (1924c <pend+0x90>)
   191e4:	227c      	movs	r2, #124	; 0x7c
   191e6:	f001 fc65 	bl	1aab4 <printk>
   191ea:	217c      	movs	r1, #124	; 0x7c
   191ec:	4816      	ldr	r0, [pc, #88]	; (19248 <pend+0x8c>)
   191ee:	f001 ff07 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   191f2:	4814      	ldr	r0, [pc, #80]	; (19244 <pend+0x88>)
   191f4:	f000 fc8e 	bl	19b14 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   191f8:	4620      	mov	r0, r4
   191fa:	4641      	mov	r1, r8
   191fc:	f7ff ffa2 	bl	19144 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19200:	4810      	ldr	r0, [pc, #64]	; (19244 <pend+0x88>)
   19202:	f000 fc79 	bl	19af8 <z_spin_unlock_valid>
   19206:	b940      	cbnz	r0, 1921a <pend+0x5e>
   19208:	490f      	ldr	r1, [pc, #60]	; (19248 <pend+0x8c>)
   1920a:	4810      	ldr	r0, [pc, #64]	; (1924c <pend+0x90>)
   1920c:	22a7      	movs	r2, #167	; 0xa7
   1920e:	f001 fc51 	bl	1aab4 <printk>
   19212:	21a7      	movs	r1, #167	; 0xa7
   19214:	480c      	ldr	r0, [pc, #48]	; (19248 <pend+0x8c>)
   19216:	f001 fef3 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   1921a:	f387 8811 	msr	BASEPRI, r7
   1921e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19222:	f1b5 3fff 	cmp.w	r5, #4294967295
   19226:	bf08      	it	eq
   19228:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1922c:	d008      	beq.n	19240 <pend+0x84>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1922e:	4632      	mov	r2, r6
   19230:	462b      	mov	r3, r5
   19232:	f104 0018 	add.w	r0, r4, #24
   19236:	4906      	ldr	r1, [pc, #24]	; (19250 <pend+0x94>)
}
   19238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1923c:	f000 bde2 	b.w	19e04 <z_add_timeout>
   19240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19244:	2000b184 	.word	0x2000b184
   19248:	00020077 	.word	0x00020077
   1924c:	0002003d 	.word	0x0002003d
   19250:	00018c71 	.word	0x00018c71

00019254 <z_pend_curr>:
{
   19254:	b538      	push	{r3, r4, r5, lr}
   19256:	4605      	mov	r5, r0
	pending_current = _current;
   19258:	4b0d      	ldr	r3, [pc, #52]	; (19290 <z_pend_curr+0x3c>)
{
   1925a:	460c      	mov	r4, r1
	pending_current = _current;
   1925c:	6898      	ldr	r0, [r3, #8]
   1925e:	4b0d      	ldr	r3, [pc, #52]	; (19294 <z_pend_curr+0x40>)
{
   19260:	4611      	mov	r1, r2
	pending_current = _current;
   19262:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   19264:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   19268:	f7ff ffa8 	bl	191bc <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1926c:	4628      	mov	r0, r5
   1926e:	f000 fc43 	bl	19af8 <z_spin_unlock_valid>
   19272:	b940      	cbnz	r0, 19286 <z_pend_curr+0x32>
   19274:	4908      	ldr	r1, [pc, #32]	; (19298 <z_pend_curr+0x44>)
   19276:	4809      	ldr	r0, [pc, #36]	; (1929c <z_pend_curr+0x48>)
   19278:	22be      	movs	r2, #190	; 0xbe
   1927a:	f001 fc1b 	bl	1aab4 <printk>
   1927e:	21be      	movs	r1, #190	; 0xbe
   19280:	4805      	ldr	r0, [pc, #20]	; (19298 <z_pend_curr+0x44>)
   19282:	f001 febd 	bl	1b000 <assert_post_action>
   19286:	4620      	mov	r0, r4
}
   19288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1928c:	f7f4 bc6a 	b.w	db64 <arch_swap>
   19290:	2000b14c 	.word	0x2000b14c
   19294:	2000b180 	.word	0x2000b180
   19298:	00020077 	.word	0x00020077
   1929c:	0002003d 	.word	0x0002003d

000192a0 <z_set_prio>:
{
   192a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   192a2:	4604      	mov	r4, r0
   192a4:	460d      	mov	r5, r1
	__asm__ volatile(
   192a6:	f04f 0320 	mov.w	r3, #32
   192aa:	f3ef 8611 	mrs	r6, BASEPRI
   192ae:	f383 8811 	msr	BASEPRI, r3
   192b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   192b6:	4831      	ldr	r0, [pc, #196]	; (1937c <z_set_prio+0xdc>)
   192b8:	f000 fc10 	bl	19adc <z_spin_lock_valid>
   192bc:	b940      	cbnz	r0, 192d0 <z_set_prio+0x30>
   192be:	4930      	ldr	r1, [pc, #192]	; (19380 <z_set_prio+0xe0>)
   192c0:	4830      	ldr	r0, [pc, #192]	; (19384 <z_set_prio+0xe4>)
   192c2:	227c      	movs	r2, #124	; 0x7c
   192c4:	f001 fbf6 	bl	1aab4 <printk>
   192c8:	217c      	movs	r1, #124	; 0x7c
   192ca:	482d      	ldr	r0, [pc, #180]	; (19380 <z_set_prio+0xe0>)
   192cc:	f001 fe98 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   192d0:	482a      	ldr	r0, [pc, #168]	; (1937c <z_set_prio+0xdc>)
   192d2:	f000 fc1f 	bl	19b14 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   192d6:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   192d8:	b26d      	sxtb	r5, r5
   192da:	06db      	lsls	r3, r3, #27
   192dc:	d14a      	bne.n	19374 <z_set_prio+0xd4>
		if (need_sched) {
   192de:	69a3      	ldr	r3, [r4, #24]
   192e0:	2b00      	cmp	r3, #0
   192e2:	d147      	bne.n	19374 <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   192e4:	4621      	mov	r1, r4
   192e6:	4828      	ldr	r0, [pc, #160]	; (19388 <z_set_prio+0xe8>)
   192e8:	f7ff fb04 	bl	188f4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   192ec:	4b27      	ldr	r3, [pc, #156]	; (1938c <z_set_prio+0xec>)
				thread->base.prio = prio;
   192ee:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   192f0:	429c      	cmp	r4, r3
   192f2:	d10a      	bne.n	1930a <z_set_prio+0x6a>
   192f4:	4926      	ldr	r1, [pc, #152]	; (19390 <z_set_prio+0xf0>)
   192f6:	4823      	ldr	r0, [pc, #140]	; (19384 <z_set_prio+0xe4>)
   192f8:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   192fc:	f001 fbda 	bl	1aab4 <printk>
   19300:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   19304:	4822      	ldr	r0, [pc, #136]	; (19390 <z_set_prio+0xf0>)
   19306:	f001 fe7b 	bl	1b000 <assert_post_action>
	return list->head == list;
   1930a:	4a22      	ldr	r2, [pc, #136]	; (19394 <z_set_prio+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1930c:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   19310:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19314:	4283      	cmp	r3, r0
   19316:	d027      	beq.n	19368 <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19318:	b333      	cbz	r3, 19368 <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   1931a:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1931e:	f993 700e 	ldrsb.w	r7, [r3, #14]
   19322:	42af      	cmp	r7, r5
   19324:	dd1b      	ble.n	1935e <z_set_prio+0xbe>
	node->prev = successor->prev;
   19326:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19328:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1932c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1932e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   19330:	2001      	movs	r0, #1
   19332:	f7ff fb45 	bl	189c0 <update_cache>
   19336:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19338:	4810      	ldr	r0, [pc, #64]	; (1937c <z_set_prio+0xdc>)
   1933a:	f000 fbdd 	bl	19af8 <z_spin_unlock_valid>
   1933e:	b940      	cbnz	r0, 19352 <z_set_prio+0xb2>
   19340:	490f      	ldr	r1, [pc, #60]	; (19380 <z_set_prio+0xe0>)
   19342:	4810      	ldr	r0, [pc, #64]	; (19384 <z_set_prio+0xe4>)
   19344:	22a7      	movs	r2, #167	; 0xa7
   19346:	f001 fbb5 	bl	1aab4 <printk>
   1934a:	21a7      	movs	r1, #167	; 0xa7
   1934c:	480c      	ldr	r0, [pc, #48]	; (19380 <z_set_prio+0xe0>)
   1934e:	f001 fe57 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   19352:	f386 8811 	msr	BASEPRI, r6
   19356:	f3bf 8f6f 	isb	sy
}
   1935a:	4620      	mov	r0, r4
   1935c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1935e:	4299      	cmp	r1, r3
   19360:	d002      	beq.n	19368 <z_set_prio+0xc8>
   19362:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19364:	2b00      	cmp	r3, #0
   19366:	d1da      	bne.n	1931e <z_set_prio+0x7e>
	node->prev = list->tail;
   19368:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   1936c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1936e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19370:	6314      	str	r4, [r2, #48]	; 0x30
}
   19372:	e7dd      	b.n	19330 <z_set_prio+0x90>
			thread->base.prio = prio;
   19374:	73a5      	strb	r5, [r4, #14]
   19376:	2400      	movs	r4, #0
   19378:	e7de      	b.n	19338 <z_set_prio+0x98>
   1937a:	bf00      	nop
   1937c:	2000b184 	.word	0x2000b184
   19380:	00020077 	.word	0x00020077
   19384:	0002003d 	.word	0x0002003d
   19388:	2000b178 	.word	0x2000b178
   1938c:	2000a420 	.word	0x2000a420
   19390:	00022ec2 	.word	0x00022ec2
   19394:	2000b14c 	.word	0x2000b14c

00019398 <z_unpend_first_thread>:
{
   19398:	b538      	push	{r3, r4, r5, lr}
   1939a:	4604      	mov	r4, r0
	__asm__ volatile(
   1939c:	f04f 0320 	mov.w	r3, #32
   193a0:	f3ef 8511 	mrs	r5, BASEPRI
   193a4:	f383 8811 	msr	BASEPRI, r3
   193a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   193ac:	482b      	ldr	r0, [pc, #172]	; (1945c <z_unpend_first_thread+0xc4>)
   193ae:	f000 fb95 	bl	19adc <z_spin_lock_valid>
   193b2:	b940      	cbnz	r0, 193c6 <z_unpend_first_thread+0x2e>
   193b4:	492a      	ldr	r1, [pc, #168]	; (19460 <z_unpend_first_thread+0xc8>)
   193b6:	482b      	ldr	r0, [pc, #172]	; (19464 <z_unpend_first_thread+0xcc>)
   193b8:	227c      	movs	r2, #124	; 0x7c
   193ba:	f001 fb7b 	bl	1aab4 <printk>
   193be:	217c      	movs	r1, #124	; 0x7c
   193c0:	4827      	ldr	r0, [pc, #156]	; (19460 <z_unpend_first_thread+0xc8>)
   193c2:	f001 fe1d 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   193c6:	4825      	ldr	r0, [pc, #148]	; (1945c <z_unpend_first_thread+0xc4>)
   193c8:	f000 fba4 	bl	19b14 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   193cc:	4620      	mov	r0, r4
   193ce:	f004 ff70 	bl	1e2b2 <z_priq_dumb_best>
   193d2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   193d4:	4821      	ldr	r0, [pc, #132]	; (1945c <z_unpend_first_thread+0xc4>)
   193d6:	f000 fb8f 	bl	19af8 <z_spin_unlock_valid>
   193da:	b940      	cbnz	r0, 193ee <z_unpend_first_thread+0x56>
   193dc:	4920      	ldr	r1, [pc, #128]	; (19460 <z_unpend_first_thread+0xc8>)
   193de:	4821      	ldr	r0, [pc, #132]	; (19464 <z_unpend_first_thread+0xcc>)
   193e0:	22a7      	movs	r2, #167	; 0xa7
   193e2:	f001 fb67 	bl	1aab4 <printk>
   193e6:	21a7      	movs	r1, #167	; 0xa7
   193e8:	481d      	ldr	r0, [pc, #116]	; (19460 <z_unpend_first_thread+0xc8>)
   193ea:	f001 fe09 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   193ee:	f385 8811 	msr	BASEPRI, r5
   193f2:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   193f6:	b37c      	cbz	r4, 19458 <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   193f8:	f04f 0320 	mov.w	r3, #32
   193fc:	f3ef 8511 	mrs	r5, BASEPRI
   19400:	f383 8811 	msr	BASEPRI, r3
   19404:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19408:	4814      	ldr	r0, [pc, #80]	; (1945c <z_unpend_first_thread+0xc4>)
   1940a:	f000 fb67 	bl	19adc <z_spin_lock_valid>
   1940e:	b940      	cbnz	r0, 19422 <z_unpend_first_thread+0x8a>
   19410:	4913      	ldr	r1, [pc, #76]	; (19460 <z_unpend_first_thread+0xc8>)
   19412:	4814      	ldr	r0, [pc, #80]	; (19464 <z_unpend_first_thread+0xcc>)
   19414:	227c      	movs	r2, #124	; 0x7c
   19416:	f001 fb4d 	bl	1aab4 <printk>
   1941a:	217c      	movs	r1, #124	; 0x7c
   1941c:	4810      	ldr	r0, [pc, #64]	; (19460 <z_unpend_first_thread+0xc8>)
   1941e:	f001 fdef 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   19422:	480e      	ldr	r0, [pc, #56]	; (1945c <z_unpend_first_thread+0xc4>)
   19424:	f000 fb76 	bl	19b14 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   19428:	4620      	mov	r0, r4
   1942a:	f004 ff34 	bl	1e296 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1942e:	480b      	ldr	r0, [pc, #44]	; (1945c <z_unpend_first_thread+0xc4>)
   19430:	f000 fb62 	bl	19af8 <z_spin_unlock_valid>
   19434:	b940      	cbnz	r0, 19448 <z_unpend_first_thread+0xb0>
   19436:	490a      	ldr	r1, [pc, #40]	; (19460 <z_unpend_first_thread+0xc8>)
   19438:	480a      	ldr	r0, [pc, #40]	; (19464 <z_unpend_first_thread+0xcc>)
   1943a:	22a7      	movs	r2, #167	; 0xa7
   1943c:	f001 fb3a 	bl	1aab4 <printk>
   19440:	21a7      	movs	r1, #167	; 0xa7
   19442:	4807      	ldr	r0, [pc, #28]	; (19460 <z_unpend_first_thread+0xc8>)
   19444:	f001 fddc 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   19448:	f385 8811 	msr	BASEPRI, r5
   1944c:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   19450:	f104 0018 	add.w	r0, r4, #24
   19454:	f000 fd86 	bl	19f64 <z_abort_timeout>
}
   19458:	4620      	mov	r0, r4
   1945a:	bd38      	pop	{r3, r4, r5, pc}
   1945c:	2000b184 	.word	0x2000b184
   19460:	00020077 	.word	0x00020077
   19464:	0002003d 	.word	0x0002003d

00019468 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   19468:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1946a:	4b04      	ldr	r3, [pc, #16]	; (1947c <z_sched_init+0x14>)
   1946c:	4608      	mov	r0, r1
   1946e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   19472:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   19476:	f7ff b961 	b.w	1873c <k_sched_time_slice_set>
   1947a:	bf00      	nop
   1947c:	2000b14c 	.word	0x2000b14c

00019480 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   19480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19482:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   19486:	b153      	cbz	r3, 1949e <z_impl_k_yield+0x1e>
   19488:	493d      	ldr	r1, [pc, #244]	; (19580 <z_impl_k_yield+0x100>)
   1948a:	483e      	ldr	r0, [pc, #248]	; (19584 <z_impl_k_yield+0x104>)
   1948c:	f240 42cf 	movw	r2, #1231	; 0x4cf
   19490:	f001 fb10 	bl	1aab4 <printk>
   19494:	f240 41cf 	movw	r1, #1231	; 0x4cf
   19498:	4839      	ldr	r0, [pc, #228]	; (19580 <z_impl_k_yield+0x100>)
   1949a:	f001 fdb1 	bl	1b000 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   1949e:	4d3a      	ldr	r5, [pc, #232]	; (19588 <z_impl_k_yield+0x108>)
   194a0:	4f3a      	ldr	r7, [pc, #232]	; (1958c <z_impl_k_yield+0x10c>)
   194a2:	68ab      	ldr	r3, [r5, #8]
   194a4:	42bb      	cmp	r3, r7
   194a6:	d054      	beq.n	19552 <z_impl_k_yield+0xd2>
	__asm__ volatile(
   194a8:	f04f 0320 	mov.w	r3, #32
   194ac:	f3ef 8611 	mrs	r6, BASEPRI
   194b0:	f383 8811 	msr	BASEPRI, r3
   194b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   194b8:	4835      	ldr	r0, [pc, #212]	; (19590 <z_impl_k_yield+0x110>)
   194ba:	f000 fb0f 	bl	19adc <z_spin_lock_valid>
   194be:	b940      	cbnz	r0, 194d2 <z_impl_k_yield+0x52>
   194c0:	4934      	ldr	r1, [pc, #208]	; (19594 <z_impl_k_yield+0x114>)
   194c2:	4830      	ldr	r0, [pc, #192]	; (19584 <z_impl_k_yield+0x104>)
   194c4:	227c      	movs	r2, #124	; 0x7c
   194c6:	f001 faf5 	bl	1aab4 <printk>
   194ca:	217c      	movs	r1, #124	; 0x7c
   194cc:	4831      	ldr	r0, [pc, #196]	; (19594 <z_impl_k_yield+0x114>)
   194ce:	f001 fd97 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   194d2:	482f      	ldr	r0, [pc, #188]	; (19590 <z_impl_k_yield+0x110>)
   194d4:	f000 fb1e 	bl	19b14 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   194d8:	68a9      	ldr	r1, [r5, #8]
   194da:	482f      	ldr	r0, [pc, #188]	; (19598 <z_impl_k_yield+0x118>)
   194dc:	f7ff fa0a 	bl	188f4 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   194e0:	68ac      	ldr	r4, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   194e2:	42bc      	cmp	r4, r7
   194e4:	d10a      	bne.n	194fc <z_impl_k_yield+0x7c>
   194e6:	4926      	ldr	r1, [pc, #152]	; (19580 <z_impl_k_yield+0x100>)
   194e8:	4826      	ldr	r0, [pc, #152]	; (19584 <z_impl_k_yield+0x104>)
   194ea:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   194ee:	f001 fae1 	bl	1aab4 <printk>
   194f2:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   194f6:	4822      	ldr	r0, [pc, #136]	; (19580 <z_impl_k_yield+0x100>)
   194f8:	f001 fd82 	bl	1b000 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   194fc:	e9d5 320b 	ldrd	r3, r2, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19500:	4925      	ldr	r1, [pc, #148]	; (19598 <z_impl_k_yield+0x118>)
   19502:	428b      	cmp	r3, r1
   19504:	d036      	beq.n	19574 <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19506:	2b00      	cmp	r3, #0
   19508:	d034      	beq.n	19574 <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   1950a:	f994 000e 	ldrsb.w	r0, [r4, #14]
   1950e:	f993 700e 	ldrsb.w	r7, [r3, #14]
   19512:	4287      	cmp	r7, r0
   19514:	dd29      	ble.n	1956a <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   19516:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19518:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1951c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1951e:	605c      	str	r4, [r3, #4]
			z_mark_thread_as_queued(_current);
   19520:	68aa      	ldr	r2, [r5, #8]
			update_cache(1);
   19522:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   19524:	7b53      	ldrb	r3, [r2, #13]
   19526:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1952a:	7353      	strb	r3, [r2, #13]
   1952c:	f7ff fa48 	bl	189c0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19530:	4817      	ldr	r0, [pc, #92]	; (19590 <z_impl_k_yield+0x110>)
   19532:	f000 fae1 	bl	19af8 <z_spin_unlock_valid>
   19536:	b940      	cbnz	r0, 1954a <z_impl_k_yield+0xca>
   19538:	4916      	ldr	r1, [pc, #88]	; (19594 <z_impl_k_yield+0x114>)
   1953a:	4812      	ldr	r0, [pc, #72]	; (19584 <z_impl_k_yield+0x104>)
   1953c:	22a7      	movs	r2, #167	; 0xa7
   1953e:	f001 fab9 	bl	1aab4 <printk>
   19542:	21a7      	movs	r1, #167	; 0xa7
   19544:	4813      	ldr	r0, [pc, #76]	; (19594 <z_impl_k_yield+0x114>)
   19546:	f001 fd5b 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   1954a:	f386 8811 	msr	BASEPRI, r6
   1954e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   19552:	f04f 0320 	mov.w	r3, #32
   19556:	f3ef 8011 	mrs	r0, BASEPRI
   1955a:	f383 8811 	msr	BASEPRI, r3
   1955e:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   19562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   19566:	f7f4 bafd 	b.w	db64 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1956a:	4293      	cmp	r3, r2
   1956c:	d002      	beq.n	19574 <z_impl_k_yield+0xf4>
   1956e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19570:	2b00      	cmp	r3, #0
   19572:	d1cc      	bne.n	1950e <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   19574:	e9c4 1200 	strd	r1, r2, [r4]
	list->tail->next = node;
   19578:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1957a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1957c:	632c      	str	r4, [r5, #48]	; 0x30
}
   1957e:	e7cf      	b.n	19520 <z_impl_k_yield+0xa0>
   19580:	00022ec2 	.word	0x00022ec2
   19584:	0002003d 	.word	0x0002003d
   19588:	2000b14c 	.word	0x2000b14c
   1958c:	2000a420 	.word	0x2000a420
   19590:	2000b184 	.word	0x2000b184
   19594:	00020077 	.word	0x00020077
   19598:	2000b178 	.word	0x2000b178

0001959c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1959c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   195a0:	4605      	mov	r5, r0
   195a2:	460f      	mov	r7, r1
   195a4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   195a8:	b153      	cbz	r3, 195c0 <z_tick_sleep+0x24>
   195aa:	4934      	ldr	r1, [pc, #208]	; (1967c <z_tick_sleep+0xe0>)
   195ac:	4834      	ldr	r0, [pc, #208]	; (19680 <z_tick_sleep+0xe4>)
   195ae:	f240 42ed 	movw	r2, #1261	; 0x4ed
   195b2:	f001 fa7f 	bl	1aab4 <printk>
   195b6:	f240 41ed 	movw	r1, #1261	; 0x4ed
   195ba:	4830      	ldr	r0, [pc, #192]	; (1967c <z_tick_sleep+0xe0>)
   195bc:	f001 fd20 	bl	1b000 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   195c0:	ea55 0307 	orrs.w	r3, r5, r7
   195c4:	d104      	bne.n	195d0 <z_tick_sleep+0x34>
	z_impl_k_yield();
   195c6:	f7ff ff5b 	bl	19480 <z_impl_k_yield>
		k_yield();
		return 0;
   195ca:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   195cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   195d0:	f004 fefd 	bl	1e3ce <z_tick_get_32>
   195d4:	1944      	adds	r4, r0, r5
   195d6:	f04f 0320 	mov.w	r3, #32
   195da:	f3ef 8811 	mrs	r8, BASEPRI
   195de:	f383 8811 	msr	BASEPRI, r3
   195e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   195e6:	4827      	ldr	r0, [pc, #156]	; (19684 <z_tick_sleep+0xe8>)
   195e8:	f000 fa78 	bl	19adc <z_spin_lock_valid>
   195ec:	b940      	cbnz	r0, 19600 <z_tick_sleep+0x64>
   195ee:	4926      	ldr	r1, [pc, #152]	; (19688 <z_tick_sleep+0xec>)
   195f0:	4823      	ldr	r0, [pc, #140]	; (19680 <z_tick_sleep+0xe4>)
   195f2:	227c      	movs	r2, #124	; 0x7c
   195f4:	f001 fa5e 	bl	1aab4 <printk>
   195f8:	217c      	movs	r1, #124	; 0x7c
   195fa:	4823      	ldr	r0, [pc, #140]	; (19688 <z_tick_sleep+0xec>)
   195fc:	f001 fd00 	bl	1b000 <assert_post_action>
	pending_current = _current;
   19600:	4e22      	ldr	r6, [pc, #136]	; (1968c <z_tick_sleep+0xf0>)
	z_spin_lock_set_owner(l);
   19602:	4820      	ldr	r0, [pc, #128]	; (19684 <z_tick_sleep+0xe8>)
   19604:	f000 fa86 	bl	19b14 <z_spin_lock_set_owner>
   19608:	68b0      	ldr	r0, [r6, #8]
   1960a:	4b21      	ldr	r3, [pc, #132]	; (19690 <z_tick_sleep+0xf4>)
   1960c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1960e:	f7ff fd7d 	bl	1910c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   19612:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   19614:	462a      	mov	r2, r5
   19616:	463b      	mov	r3, r7
   19618:	3018      	adds	r0, #24
   1961a:	491e      	ldr	r1, [pc, #120]	; (19694 <z_tick_sleep+0xf8>)
   1961c:	f000 fbf2 	bl	19e04 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   19620:	68b2      	ldr	r2, [r6, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19622:	4818      	ldr	r0, [pc, #96]	; (19684 <z_tick_sleep+0xe8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   19624:	7b53      	ldrb	r3, [r2, #13]
   19626:	f043 0310 	orr.w	r3, r3, #16
   1962a:	7353      	strb	r3, [r2, #13]
   1962c:	f000 fa64 	bl	19af8 <z_spin_unlock_valid>
   19630:	b940      	cbnz	r0, 19644 <z_tick_sleep+0xa8>
   19632:	4915      	ldr	r1, [pc, #84]	; (19688 <z_tick_sleep+0xec>)
   19634:	4812      	ldr	r0, [pc, #72]	; (19680 <z_tick_sleep+0xe4>)
   19636:	22be      	movs	r2, #190	; 0xbe
   19638:	f001 fa3c 	bl	1aab4 <printk>
   1963c:	21be      	movs	r1, #190	; 0xbe
   1963e:	4812      	ldr	r0, [pc, #72]	; (19688 <z_tick_sleep+0xec>)
   19640:	f001 fcde 	bl	1b000 <assert_post_action>
   19644:	4640      	mov	r0, r8
   19646:	f7f4 fa8d 	bl	db64 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   1964a:	68b3      	ldr	r3, [r6, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1964c:	7b5b      	ldrb	r3, [r3, #13]
   1964e:	06db      	lsls	r3, r3, #27
   19650:	d50a      	bpl.n	19668 <z_tick_sleep+0xcc>
   19652:	490a      	ldr	r1, [pc, #40]	; (1967c <z_tick_sleep+0xe0>)
   19654:	480a      	ldr	r0, [pc, #40]	; (19680 <z_tick_sleep+0xe4>)
   19656:	f240 520b 	movw	r2, #1291	; 0x50b
   1965a:	f001 fa2b 	bl	1aab4 <printk>
   1965e:	f240 510b 	movw	r1, #1291	; 0x50b
   19662:	4806      	ldr	r0, [pc, #24]	; (1967c <z_tick_sleep+0xe0>)
   19664:	f001 fccc 	bl	1b000 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   19668:	f004 feb1 	bl	1e3ce <z_tick_get_32>
   1966c:	1a20      	subs	r0, r4, r0
   1966e:	eb63 0303 	sbc.w	r3, r3, r3
   19672:	2b00      	cmp	r3, #0
   19674:	bfb8      	it	lt
   19676:	2000      	movlt	r0, #0
   19678:	e7a8      	b.n	195cc <z_tick_sleep+0x30>
   1967a:	bf00      	nop
   1967c:	00022ec2 	.word	0x00022ec2
   19680:	0002003d 	.word	0x0002003d
   19684:	2000b184 	.word	0x2000b184
   19688:	00020077 	.word	0x00020077
   1968c:	2000b14c 	.word	0x2000b14c
   19690:	2000b180 	.word	0x2000b180
   19694:	00018c71 	.word	0x00018c71

00019698 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   19698:	b538      	push	{r3, r4, r5, lr}
   1969a:	4605      	mov	r5, r0
   1969c:	460c      	mov	r4, r1
   1969e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   196a2:	b153      	cbz	r3, 196ba <z_impl_k_sleep+0x22>
   196a4:	4911      	ldr	r1, [pc, #68]	; (196ec <z_impl_k_sleep+0x54>)
   196a6:	4812      	ldr	r0, [pc, #72]	; (196f0 <z_impl_k_sleep+0x58>)
   196a8:	f240 521a 	movw	r2, #1306	; 0x51a
   196ac:	f001 fa02 	bl	1aab4 <printk>
   196b0:	f240 511a 	movw	r1, #1306	; 0x51a
   196b4:	480d      	ldr	r0, [pc, #52]	; (196ec <z_impl_k_sleep+0x54>)
   196b6:	f001 fca3 	bl	1b000 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   196ba:	f1b4 3fff 	cmp.w	r4, #4294967295
   196be:	bf08      	it	eq
   196c0:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   196c4:	d106      	bne.n	196d4 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   196c6:	4b0b      	ldr	r3, [pc, #44]	; (196f4 <z_impl_k_sleep+0x5c>)
   196c8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   196ca:	f7ff fbc5 	bl	18e58 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   196ce:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   196d2:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   196d4:	4628      	mov	r0, r5
   196d6:	4621      	mov	r1, r4
   196d8:	f7ff ff60 	bl	1959c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   196dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   196e0:	fb80 0303 	smull	r0, r3, r0, r3
   196e4:	0bc0      	lsrs	r0, r0, #15
   196e6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   196ea:	e7f2      	b.n	196d2 <z_impl_k_sleep+0x3a>
   196ec:	00022ec2 	.word	0x00022ec2
   196f0:	0002003d 	.word	0x0002003d
   196f4:	2000b14c 	.word	0x2000b14c

000196f8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   196f8:	4b01      	ldr	r3, [pc, #4]	; (19700 <z_impl_k_current_get+0x8>)
   196fa:	6898      	ldr	r0, [r3, #8]
   196fc:	4770      	bx	lr
   196fe:	bf00      	nop
   19700:	2000b14c 	.word	0x2000b14c

00019704 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   19704:	b538      	push	{r3, r4, r5, lr}
   19706:	4604      	mov	r4, r0
   19708:	f04f 0320 	mov.w	r3, #32
   1970c:	f3ef 8511 	mrs	r5, BASEPRI
   19710:	f383 8811 	msr	BASEPRI, r3
   19714:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19718:	4815      	ldr	r0, [pc, #84]	; (19770 <z_impl_k_sem_give+0x6c>)
   1971a:	f000 f9df 	bl	19adc <z_spin_lock_valid>
   1971e:	b940      	cbnz	r0, 19732 <z_impl_k_sem_give+0x2e>
   19720:	4914      	ldr	r1, [pc, #80]	; (19774 <z_impl_k_sem_give+0x70>)
   19722:	4815      	ldr	r0, [pc, #84]	; (19778 <z_impl_k_sem_give+0x74>)
   19724:	227c      	movs	r2, #124	; 0x7c
   19726:	f001 f9c5 	bl	1aab4 <printk>
   1972a:	217c      	movs	r1, #124	; 0x7c
   1972c:	4811      	ldr	r0, [pc, #68]	; (19774 <z_impl_k_sem_give+0x70>)
   1972e:	f001 fc67 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   19732:	480f      	ldr	r0, [pc, #60]	; (19770 <z_impl_k_sem_give+0x6c>)
   19734:	f000 f9ee 	bl	19b14 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   19738:	4620      	mov	r0, r4
   1973a:	f7ff fe2d 	bl	19398 <z_unpend_first_thread>

	if (thread != NULL) {
   1973e:	b150      	cbz	r0, 19756 <z_impl_k_sem_give+0x52>
   19740:	2200      	movs	r2, #0
   19742:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   19746:	f7ff fa1b 	bl	18b80 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1974a:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1974c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   19750:	4807      	ldr	r0, [pc, #28]	; (19770 <z_impl_k_sem_give+0x6c>)
   19752:	f7ff b841 	b.w	187d8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   19756:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1975a:	429a      	cmp	r2, r3
   1975c:	bf18      	it	ne
   1975e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   19760:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   19762:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   19764:	f104 0010 	add.w	r0, r4, #16
   19768:	f004 fea8 	bl	1e4bc <z_handle_obj_poll_events>
}
   1976c:	e7ed      	b.n	1974a <z_impl_k_sem_give+0x46>
   1976e:	bf00      	nop
   19770:	2000b190 	.word	0x2000b190
   19774:	00020077 	.word	0x00020077
   19778:	0002003d 	.word	0x0002003d

0001977c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1977c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1977e:	4604      	mov	r4, r0
   19780:	4616      	mov	r6, r2
   19782:	461d      	mov	r5, r3
   19784:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   19788:	b15b      	cbz	r3, 197a2 <z_impl_k_sem_take+0x26>
   1978a:	ea52 0305 	orrs.w	r3, r2, r5
   1978e:	d008      	beq.n	197a2 <z_impl_k_sem_take+0x26>
   19790:	492b      	ldr	r1, [pc, #172]	; (19840 <z_impl_k_sem_take+0xc4>)
   19792:	482c      	ldr	r0, [pc, #176]	; (19844 <z_impl_k_sem_take+0xc8>)
   19794:	228c      	movs	r2, #140	; 0x8c
   19796:	f001 f98d 	bl	1aab4 <printk>
   1979a:	218c      	movs	r1, #140	; 0x8c
   1979c:	4828      	ldr	r0, [pc, #160]	; (19840 <z_impl_k_sem_take+0xc4>)
   1979e:	f001 fc2f 	bl	1b000 <assert_post_action>
   197a2:	f04f 0320 	mov.w	r3, #32
   197a6:	f3ef 8711 	mrs	r7, BASEPRI
   197aa:	f383 8811 	msr	BASEPRI, r3
   197ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   197b2:	4825      	ldr	r0, [pc, #148]	; (19848 <z_impl_k_sem_take+0xcc>)
   197b4:	f000 f992 	bl	19adc <z_spin_lock_valid>
   197b8:	b940      	cbnz	r0, 197cc <z_impl_k_sem_take+0x50>
   197ba:	4924      	ldr	r1, [pc, #144]	; (1984c <z_impl_k_sem_take+0xd0>)
   197bc:	4821      	ldr	r0, [pc, #132]	; (19844 <z_impl_k_sem_take+0xc8>)
   197be:	227c      	movs	r2, #124	; 0x7c
   197c0:	f001 f978 	bl	1aab4 <printk>
   197c4:	217c      	movs	r1, #124	; 0x7c
   197c6:	4821      	ldr	r0, [pc, #132]	; (1984c <z_impl_k_sem_take+0xd0>)
   197c8:	f001 fc1a 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   197cc:	481e      	ldr	r0, [pc, #120]	; (19848 <z_impl_k_sem_take+0xcc>)
   197ce:	f000 f9a1 	bl	19b14 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   197d2:	68a3      	ldr	r3, [r4, #8]
   197d4:	b1ab      	cbz	r3, 19802 <z_impl_k_sem_take+0x86>
		sem->count--;
   197d6:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   197d8:	481b      	ldr	r0, [pc, #108]	; (19848 <z_impl_k_sem_take+0xcc>)
   197da:	60a3      	str	r3, [r4, #8]
   197dc:	f000 f98c 	bl	19af8 <z_spin_unlock_valid>
   197e0:	b940      	cbnz	r0, 197f4 <z_impl_k_sem_take+0x78>
   197e2:	491a      	ldr	r1, [pc, #104]	; (1984c <z_impl_k_sem_take+0xd0>)
   197e4:	4817      	ldr	r0, [pc, #92]	; (19844 <z_impl_k_sem_take+0xc8>)
   197e6:	22a7      	movs	r2, #167	; 0xa7
   197e8:	f001 f964 	bl	1aab4 <printk>
   197ec:	21a7      	movs	r1, #167	; 0xa7
   197ee:	4817      	ldr	r0, [pc, #92]	; (1984c <z_impl_k_sem_take+0xd0>)
   197f0:	f001 fc06 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   197f4:	f387 8811 	msr	BASEPRI, r7
   197f8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   197fc:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   197fe:	b003      	add	sp, #12
   19800:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19802:	ea56 0305 	orrs.w	r3, r6, r5
   19806:	d113      	bne.n	19830 <z_impl_k_sem_take+0xb4>
   19808:	480f      	ldr	r0, [pc, #60]	; (19848 <z_impl_k_sem_take+0xcc>)
   1980a:	f000 f975 	bl	19af8 <z_spin_unlock_valid>
   1980e:	b940      	cbnz	r0, 19822 <z_impl_k_sem_take+0xa6>
   19810:	490e      	ldr	r1, [pc, #56]	; (1984c <z_impl_k_sem_take+0xd0>)
   19812:	480c      	ldr	r0, [pc, #48]	; (19844 <z_impl_k_sem_take+0xc8>)
   19814:	22a7      	movs	r2, #167	; 0xa7
   19816:	f001 f94d 	bl	1aab4 <printk>
   1981a:	21a7      	movs	r1, #167	; 0xa7
   1981c:	480b      	ldr	r0, [pc, #44]	; (1984c <z_impl_k_sem_take+0xd0>)
   1981e:	f001 fbef 	bl	1b000 <assert_post_action>
   19822:	f387 8811 	msr	BASEPRI, r7
   19826:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1982a:	f06f 000f 	mvn.w	r0, #15
   1982e:	e7e6      	b.n	197fe <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   19830:	4622      	mov	r2, r4
   19832:	4639      	mov	r1, r7
   19834:	e9cd 6500 	strd	r6, r5, [sp]
   19838:	4803      	ldr	r0, [pc, #12]	; (19848 <z_impl_k_sem_take+0xcc>)
   1983a:	f7ff fd0b 	bl	19254 <z_pend_curr>
	return ret;
   1983e:	e7de      	b.n	197fe <z_impl_k_sem_take+0x82>
   19840:	00022ee4 	.word	0x00022ee4
   19844:	0002003d 	.word	0x0002003d
   19848:	2000b190 	.word	0x2000b190
   1984c:	00020077 	.word	0x00020077

00019850 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   19850:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   19852:	4c08      	ldr	r4, [pc, #32]	; (19874 <k_sys_work_q_init+0x24>)
   19854:	f04f 33ff 	mov.w	r3, #4294967295
   19858:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1985c:	4620      	mov	r0, r4
   1985e:	4906      	ldr	r1, [pc, #24]	; (19878 <k_sys_work_q_init+0x28>)
   19860:	f000 f98c 	bl	19b7c <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   19864:	4905      	ldr	r1, [pc, #20]	; (1987c <k_sys_work_q_init+0x2c>)
   19866:	f104 0020 	add.w	r0, r4, #32
   1986a:	f004 fd52 	bl	1e312 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1986e:	2000      	movs	r0, #0
   19870:	bd10      	pop	{r4, pc}
   19872:	bf00      	nop
   19874:	2000a540 	.word	0x2000a540
   19878:	20014450 	.word	0x20014450
   1987c:	00022f04 	.word	0x00022f04

00019880 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   19880:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19884:	4604      	mov	r4, r0
   19886:	460f      	mov	r7, r1
   19888:	4698      	mov	r8, r3
   1988a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1988c:	4b2c      	ldr	r3, [pc, #176]	; (19940 <z_setup_new_thread+0xc0>)
   1988e:	4616      	mov	r6, r2
   19890:	f100 0238 	add.w	r2, r0, #56	; 0x38
   19894:	e8d2 1fef 	ldaex	r1, [r2]
   19898:	e8c2 3fe0 	stlex	r0, r3, [r2]
   1989c:	2800      	cmp	r0, #0
   1989e:	d1f9      	bne.n	19894 <z_setup_new_thread+0x14>
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   198a0:	4299      	cmp	r1, r3
   198a2:	d10a      	bne.n	198ba <z_setup_new_thread+0x3a>
   198a4:	4927      	ldr	r1, [pc, #156]	; (19944 <z_setup_new_thread+0xc4>)
   198a6:	4828      	ldr	r0, [pc, #160]	; (19948 <z_setup_new_thread+0xc8>)
   198a8:	f240 2223 	movw	r2, #547	; 0x223
   198ac:	f001 f902 	bl	1aab4 <printk>
   198b0:	f240 2123 	movw	r1, #547	; 0x223
   198b4:	4823      	ldr	r0, [pc, #140]	; (19944 <z_setup_new_thread+0xc4>)
   198b6:	f001 fba3 	bl	1b000 <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   198ba:	2d0f      	cmp	r5, #15
   198bc:	d12f      	bne.n	1991e <z_setup_new_thread+0x9e>
   198be:	4b23      	ldr	r3, [pc, #140]	; (1994c <z_setup_new_thread+0xcc>)
   198c0:	4598      	cmp	r8, r3
   198c2:	d130      	bne.n	19926 <z_setup_new_thread+0xa6>
	sys_dlist_init(&w->waitq);
   198c4:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   198c8:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   198cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   198ce:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   198d0:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   198d2:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   198d4:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   198d6:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   198d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   198da:	1df0      	adds	r0, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   198dc:	9302      	str	r3, [sp, #8]
   198de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   198e0:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   198e4:	9301      	str	r3, [sp, #4]
   198e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   198e8:	183e      	adds	r6, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   198ea:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   198ee:	9300      	str	r3, [sp, #0]
   198f0:	4632      	mov	r2, r6
   198f2:	4643      	mov	r3, r8
   198f4:	4639      	mov	r1, r7
   198f6:	4620      	mov	r0, r4
	node->prev = NULL;
   198f8:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->sched_locked = 0U;
   198fc:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   198fe:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19900:	f7f4 f9ce 	bl	dca0 <arch_new_thread>
	if (!_current) {
   19904:	4b12      	ldr	r3, [pc, #72]	; (19950 <z_setup_new_thread+0xd0>)
	new_thread->fn_abort = NULL;
   19906:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   1990a:	689b      	ldr	r3, [r3, #8]
   1990c:	b10b      	cbz	r3, 19912 <z_setup_new_thread+0x92>
	new_thread->resource_pool = _current->resource_pool;
   1990e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   19912:	4630      	mov	r0, r6
   19914:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   19918:	b004      	add	sp, #16
   1991a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1991e:	f105 0310 	add.w	r3, r5, #16
   19922:	2b1e      	cmp	r3, #30
   19924:	d9ce      	bls.n	198c4 <z_setup_new_thread+0x44>
   19926:	f240 2226 	movw	r2, #550	; 0x226
   1992a:	4906      	ldr	r1, [pc, #24]	; (19944 <z_setup_new_thread+0xc4>)
   1992c:	4806      	ldr	r0, [pc, #24]	; (19948 <z_setup_new_thread+0xc8>)
   1992e:	f001 f8c1 	bl	1aab4 <printk>
   19932:	f240 2126 	movw	r1, #550	; 0x226
   19936:	4803      	ldr	r0, [pc, #12]	; (19944 <z_setup_new_thread+0xc4>)
   19938:	f001 fb62 	bl	1b000 <assert_post_action>
   1993c:	e7c2      	b.n	198c4 <z_setup_new_thread+0x44>
   1993e:	bf00      	nop
   19940:	1337c0d3 	.word	0x1337c0d3
   19944:	00022f0d 	.word	0x00022f0d
   19948:	0002003d 	.word	0x0002003d
   1994c:	00017c69 	.word	0x00017c69
   19950:	2000b14c 	.word	0x2000b14c

00019954 <z_impl_k_thread_create>:
{
   19954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19958:	b087      	sub	sp, #28
   1995a:	4604      	mov	r4, r0
   1995c:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   19960:	460f      	mov	r7, r1
   19962:	4690      	mov	r8, r2
   19964:	4699      	mov	r9, r3
   19966:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1996a:	b153      	cbz	r3, 19982 <z_impl_k_thread_create+0x2e>
   1996c:	491a      	ldr	r1, [pc, #104]	; (199d8 <z_impl_k_thread_create+0x84>)
   1996e:	481b      	ldr	r0, [pc, #108]	; (199dc <z_impl_k_thread_create+0x88>)
   19970:	f240 228f 	movw	r2, #655	; 0x28f
   19974:	f001 f89e 	bl	1aab4 <printk>
   19978:	f240 218f 	movw	r1, #655	; 0x28f
   1997c:	4816      	ldr	r0, [pc, #88]	; (199d8 <z_impl_k_thread_create+0x84>)
   1997e:	f001 fb3f 	bl	1b000 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   19982:	2300      	movs	r3, #0
   19984:	9305      	str	r3, [sp, #20]
   19986:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19988:	4642      	mov	r2, r8
   1998a:	9304      	str	r3, [sp, #16]
   1998c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1998e:	4639      	mov	r1, r7
   19990:	9303      	str	r3, [sp, #12]
   19992:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19994:	4620      	mov	r0, r4
   19996:	9302      	str	r3, [sp, #8]
   19998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1999a:	9301      	str	r3, [sp, #4]
   1999c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1999e:	9300      	str	r3, [sp, #0]
   199a0:	464b      	mov	r3, r9
   199a2:	f7ff ff6d 	bl	19880 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   199a6:	f1b5 3fff 	cmp.w	r5, #4294967295
   199aa:	bf08      	it	eq
   199ac:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   199b0:	d005      	beq.n	199be <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   199b2:	ea55 0306 	orrs.w	r3, r5, r6
   199b6:	d106      	bne.n	199c6 <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   199b8:	4620      	mov	r0, r4
   199ba:	f7ff f917 	bl	18bec <z_sched_start>
}
   199be:	4620      	mov	r0, r4
   199c0:	b007      	add	sp, #28
   199c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   199c6:	4632      	mov	r2, r6
   199c8:	462b      	mov	r3, r5
   199ca:	4905      	ldr	r1, [pc, #20]	; (199e0 <z_impl_k_thread_create+0x8c>)
   199cc:	f104 0018 	add.w	r0, r4, #24
   199d0:	f000 fa18 	bl	19e04 <z_add_timeout>
   199d4:	e7f3      	b.n	199be <z_impl_k_thread_create+0x6a>
   199d6:	bf00      	nop
   199d8:	00022f0d 	.word	0x00022f0d
   199dc:	0002003d 	.word	0x0002003d
   199e0:	00018c71 	.word	0x00018c71

000199e4 <z_init_static_threads>:
{
   199e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   199e8:	4c37      	ldr	r4, [pc, #220]	; (19ac8 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   199ea:	4d38      	ldr	r5, [pc, #224]	; (19acc <z_init_static_threads+0xe8>)
   199ec:	4f38      	ldr	r7, [pc, #224]	; (19ad0 <z_init_static_threads+0xec>)
{
   199ee:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   199f0:	42ac      	cmp	r4, r5
   199f2:	4626      	mov	r6, r4
   199f4:	d90a      	bls.n	19a0c <z_init_static_threads+0x28>
   199f6:	4639      	mov	r1, r7
   199f8:	4836      	ldr	r0, [pc, #216]	; (19ad4 <z_init_static_threads+0xf0>)
   199fa:	f240 22fd 	movw	r2, #765	; 0x2fd
   199fe:	f001 f859 	bl	1aab4 <printk>
   19a02:	f240 21fd 	movw	r1, #765	; 0x2fd
   19a06:	4638      	mov	r0, r7
   19a08:	f001 fafa 	bl	1b000 <assert_post_action>
   19a0c:	42ae      	cmp	r6, r5
   19a0e:	f104 0430 	add.w	r4, r4, #48	; 0x30
   19a12:	d31b      	bcc.n	19a4c <z_init_static_threads+0x68>
	k_sched_lock();
   19a14:	f7fe ff16 	bl	18844 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   19a18:	4c2b      	ldr	r4, [pc, #172]	; (19ac8 <z_init_static_threads+0xe4>)
   19a1a:	4e2d      	ldr	r6, [pc, #180]	; (19ad0 <z_init_static_threads+0xec>)
   19a1c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 19ad4 <z_init_static_threads+0xf0>
   19a20:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 19ad8 <z_init_static_threads+0xf4>
   19a24:	42ac      	cmp	r4, r5
   19a26:	d90a      	bls.n	19a3e <z_init_static_threads+0x5a>
   19a28:	4631      	mov	r1, r6
   19a2a:	4640      	mov	r0, r8
   19a2c:	f44f 7247 	mov.w	r2, #796	; 0x31c
   19a30:	f001 f840 	bl	1aab4 <printk>
   19a34:	f44f 7147 	mov.w	r1, #796	; 0x31c
   19a38:	4630      	mov	r0, r6
   19a3a:	f001 fae1 	bl	1b000 <assert_post_action>
   19a3e:	42ac      	cmp	r4, r5
   19a40:	d320      	bcc.n	19a84 <z_init_static_threads+0xa0>
}
   19a42:	b007      	add	sp, #28
   19a44:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   19a48:	f7fe bff4 	b.w	18a34 <k_sched_unlock>
		z_setup_new_thread(
   19a4c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19a50:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   19a54:	9305      	str	r3, [sp, #20]
   19a56:	f854 3c10 	ldr.w	r3, [r4, #-16]
   19a5a:	9304      	str	r3, [sp, #16]
   19a5c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   19a60:	9303      	str	r3, [sp, #12]
   19a62:	f854 3c18 	ldr.w	r3, [r4, #-24]
   19a66:	9302      	str	r3, [sp, #8]
   19a68:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   19a6c:	9301      	str	r3, [sp, #4]
   19a6e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   19a72:	9300      	str	r3, [sp, #0]
   19a74:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   19a78:	f7ff ff02 	bl	19880 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   19a7c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   19a80:	665e      	str	r6, [r3, #100]	; 0x64
	_FOREACH_STATIC_THREAD(thread_data) {
   19a82:	e7b5      	b.n	199f0 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   19a84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   19a86:	1c5a      	adds	r2, r3, #1
   19a88:	d00f      	beq.n	19aaa <z_init_static_threads+0xc6>
   19a8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   19a8e:	f240 30e7 	movw	r0, #999	; 0x3e7
   19a92:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   19a94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19a98:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19a9c:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   19aa0:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19aa2:	d104      	bne.n	19aae <z_init_static_threads+0xca>
	z_sched_start(thread);
   19aa4:	4638      	mov	r0, r7
   19aa6:	f7ff f8a1 	bl	18bec <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   19aaa:	3430      	adds	r4, #48	; 0x30
   19aac:	e7ba      	b.n	19a24 <z_init_static_threads+0x40>
   19aae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19ab2:	2300      	movs	r3, #0
   19ab4:	f7ef f83a 	bl	8b2c <__aeabi_uldivmod>
   19ab8:	4602      	mov	r2, r0
   19aba:	460b      	mov	r3, r1
   19abc:	f107 0018 	add.w	r0, r7, #24
   19ac0:	4649      	mov	r1, r9
   19ac2:	f000 f99f 	bl	19e04 <z_add_timeout>
   19ac6:	e7f0      	b.n	19aaa <z_init_static_threads+0xc6>
   19ac8:	200085e0 	.word	0x200085e0
   19acc:	200085e0 	.word	0x200085e0
   19ad0:	00022f0d 	.word	0x00022f0d
   19ad4:	0002003d 	.word	0x0002003d
   19ad8:	00018c71 	.word	0x00018c71

00019adc <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   19adc:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   19ade:	b138      	cbz	r0, 19af0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   19ae0:	4b04      	ldr	r3, [pc, #16]	; (19af4 <z_spin_lock_valid+0x18>)
   19ae2:	f000 0003 	and.w	r0, r0, #3
   19ae6:	7e1b      	ldrb	r3, [r3, #24]
   19ae8:	1ac0      	subs	r0, r0, r3
   19aea:	bf18      	it	ne
   19aec:	2001      	movne	r0, #1
   19aee:	4770      	bx	lr
			return false;
		}
	}
	return true;
   19af0:	2001      	movs	r0, #1
}
   19af2:	4770      	bx	lr
   19af4:	2000b14c 	.word	0x2000b14c

00019af8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   19af8:	4905      	ldr	r1, [pc, #20]	; (19b10 <z_spin_unlock_valid+0x18>)
{
   19afa:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   19afc:	688a      	ldr	r2, [r1, #8]
   19afe:	7e08      	ldrb	r0, [r1, #24]
   19b00:	6819      	ldr	r1, [r3, #0]
   19b02:	4302      	orrs	r2, r0
   19b04:	2000      	movs	r0, #0
   19b06:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   19b08:	bf04      	itt	eq
   19b0a:	6018      	streq	r0, [r3, #0]
	return true;
   19b0c:	2001      	moveq	r0, #1
}
   19b0e:	4770      	bx	lr
   19b10:	2000b14c 	.word	0x2000b14c

00019b14 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   19b14:	4a02      	ldr	r2, [pc, #8]	; (19b20 <z_spin_lock_set_owner+0xc>)
   19b16:	7e11      	ldrb	r1, [r2, #24]
   19b18:	6893      	ldr	r3, [r2, #8]
   19b1a:	430b      	orrs	r3, r1
   19b1c:	6003      	str	r3, [r0, #0]
}
   19b1e:	4770      	bx	lr
   19b20:	2000b14c 	.word	0x2000b14c

00019b24 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   19b24:	b508      	push	{r3, lr}
	__asm__ volatile(
   19b26:	f04f 0320 	mov.w	r3, #32
   19b2a:	f3ef 8511 	mrs	r5, BASEPRI
   19b2e:	f383 8811 	msr	BASEPRI, r3
   19b32:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   19b36:	4c0e      	ldr	r4, [pc, #56]	; (19b70 <z_self_abort+0x4c>)
   19b38:	6923      	ldr	r3, [r4, #16]
   19b3a:	b143      	cbz	r3, 19b4e <z_self_abort+0x2a>
   19b3c:	490d      	ldr	r1, [pc, #52]	; (19b74 <z_self_abort+0x50>)
   19b3e:	480e      	ldr	r0, [pc, #56]	; (19b78 <z_self_abort+0x54>)
   19b40:	2228      	movs	r2, #40	; 0x28
   19b42:	f000 ffb7 	bl	1aab4 <printk>
   19b46:	2128      	movs	r1, #40	; 0x28
   19b48:	480a      	ldr	r0, [pc, #40]	; (19b74 <z_self_abort+0x50>)
   19b4a:	f001 fa59 	bl	1b000 <assert_post_action>
	cpu->pending_abort = _current;
   19b4e:	68a0      	ldr	r0, [r4, #8]
   19b50:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   19b52:	f7ff f981 	bl	18e58 <z_impl_k_thread_suspend>
   19b56:	4628      	mov	r0, r5
   19b58:	f7f4 f804 	bl	db64 <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   19b5c:	4905      	ldr	r1, [pc, #20]	; (19b74 <z_self_abort+0x50>)
   19b5e:	4806      	ldr	r0, [pc, #24]	; (19b78 <z_self_abort+0x54>)
   19b60:	2230      	movs	r2, #48	; 0x30
   19b62:	f000 ffa7 	bl	1aab4 <printk>
   19b66:	2130      	movs	r1, #48	; 0x30
   19b68:	4802      	ldr	r0, [pc, #8]	; (19b74 <z_self_abort+0x50>)
   19b6a:	f001 fa49 	bl	1b000 <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   19b6e:	bf00      	nop
   19b70:	2000b14c 	.word	0x2000b14c
   19b74:	00022f30 	.word	0x00022f30
   19b78:	0002003d 	.word	0x0002003d

00019b7c <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   19b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b80:	4604      	mov	r4, r0
   19b82:	b088      	sub	sp, #32
   19b84:	460d      	mov	r5, r1
   19b86:	4616      	mov	r6, r2
   19b88:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   19b8a:	f004 fb43 	bl	1e214 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   19b8e:	f104 0820 	add.w	r8, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19b92:	2200      	movs	r2, #0
   19b94:	2300      	movs	r3, #0
   19b96:	e9cd 7203 	strd	r7, r2, [sp, #12]
   19b9a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19b9e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   19ba2:	4629      	mov	r1, r5
   19ba4:	4632      	mov	r2, r6
   19ba6:	4640      	mov	r0, r8
   19ba8:	4b05      	ldr	r3, [pc, #20]	; (19bc0 <k_work_q_start+0x44>)
   19baa:	9400      	str	r4, [sp, #0]
   19bac:	f7ff fed2 	bl	19954 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   19bb0:	4640      	mov	r0, r8
   19bb2:	4904      	ldr	r1, [pc, #16]	; (19bc4 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   19bb4:	b008      	add	sp, #32
   19bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19bba:	f004 bbaa 	b.w	1e312 <z_impl_k_thread_name_set>
   19bbe:	bf00      	nop
   19bc0:	0000ae1d 	.word	0x0000ae1d
   19bc4:	00022f59 	.word	0x00022f59

00019bc8 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   19bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19bcc:	4606      	mov	r6, r0
   19bce:	460d      	mov	r5, r1
   19bd0:	4690      	mov	r8, r2
   19bd2:	461f      	mov	r7, r3
   19bd4:	f04f 0320 	mov.w	r3, #32
   19bd8:	f3ef 8911 	mrs	r9, BASEPRI
   19bdc:	f383 8811 	msr	BASEPRI, r3
   19be0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19be4:	482c      	ldr	r0, [pc, #176]	; (19c98 <k_delayed_work_submit_to_queue+0xd0>)
   19be6:	f7ff ff79 	bl	19adc <z_spin_lock_valid>
   19bea:	b940      	cbnz	r0, 19bfe <k_delayed_work_submit_to_queue+0x36>
   19bec:	492b      	ldr	r1, [pc, #172]	; (19c9c <k_delayed_work_submit_to_queue+0xd4>)
   19bee:	482c      	ldr	r0, [pc, #176]	; (19ca0 <k_delayed_work_submit_to_queue+0xd8>)
   19bf0:	227c      	movs	r2, #124	; 0x7c
   19bf2:	f000 ff5f 	bl	1aab4 <printk>
   19bf6:	217c      	movs	r1, #124	; 0x7c
   19bf8:	4828      	ldr	r0, [pc, #160]	; (19c9c <k_delayed_work_submit_to_queue+0xd4>)
   19bfa:	f001 fa01 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   19bfe:	4826      	ldr	r0, [pc, #152]	; (19c98 <k_delayed_work_submit_to_queue+0xd0>)
   19c00:	f7ff ff88 	bl	19b14 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   19c04:	6aab      	ldr	r3, [r5, #40]	; 0x28
   19c06:	b1e3      	cbz	r3, 19c42 <k_delayed_work_submit_to_queue+0x7a>
   19c08:	42b3      	cmp	r3, r6
   19c0a:	d142      	bne.n	19c92 <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   19c0c:	4628      	mov	r0, r5
   19c0e:	f004 fb9e 	bl	1e34e <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   19c12:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   19c16:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   19c18:	d015      	beq.n	19c46 <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   19c1a:	2800      	cmp	r0, #0
   19c1c:	da14      	bge.n	19c48 <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19c1e:	481e      	ldr	r0, [pc, #120]	; (19c98 <k_delayed_work_submit_to_queue+0xd0>)
   19c20:	f7ff ff6a 	bl	19af8 <z_spin_unlock_valid>
   19c24:	b940      	cbnz	r0, 19c38 <k_delayed_work_submit_to_queue+0x70>
   19c26:	491d      	ldr	r1, [pc, #116]	; (19c9c <k_delayed_work_submit_to_queue+0xd4>)
   19c28:	481d      	ldr	r0, [pc, #116]	; (19ca0 <k_delayed_work_submit_to_queue+0xd8>)
   19c2a:	22a7      	movs	r2, #167	; 0xa7
   19c2c:	f000 ff42 	bl	1aab4 <printk>
   19c30:	21a7      	movs	r1, #167	; 0xa7
   19c32:	481a      	ldr	r0, [pc, #104]	; (19c9c <k_delayed_work_submit_to_queue+0xd4>)
   19c34:	f001 f9e4 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   19c38:	f389 8811 	msr	BASEPRI, r9
   19c3c:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   19c40:	e01c      	b.n	19c7c <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   19c42:	2e00      	cmp	r6, #0
   19c44:	d0e2      	beq.n	19c0c <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   19c46:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19c48:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   19c4c:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19c4e:	d118      	bne.n	19c82 <k_delayed_work_submit_to_queue+0xba>
   19c50:	4811      	ldr	r0, [pc, #68]	; (19c98 <k_delayed_work_submit_to_queue+0xd0>)
   19c52:	f7ff ff51 	bl	19af8 <z_spin_unlock_valid>
   19c56:	b940      	cbnz	r0, 19c6a <k_delayed_work_submit_to_queue+0xa2>
   19c58:	4910      	ldr	r1, [pc, #64]	; (19c9c <k_delayed_work_submit_to_queue+0xd4>)
   19c5a:	4811      	ldr	r0, [pc, #68]	; (19ca0 <k_delayed_work_submit_to_queue+0xd8>)
   19c5c:	22a7      	movs	r2, #167	; 0xa7
   19c5e:	f000 ff29 	bl	1aab4 <printk>
   19c62:	21a7      	movs	r1, #167	; 0xa7
   19c64:	480d      	ldr	r0, [pc, #52]	; (19c9c <k_delayed_work_submit_to_queue+0xd4>)
   19c66:	f001 f9cb 	bl	1b000 <assert_post_action>
   19c6a:	f389 8811 	msr	BASEPRI, r9
   19c6e:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   19c72:	4629      	mov	r1, r5
   19c74:	4630      	mov	r0, r6
   19c76:	f004 fb51 	bl	1e31c <k_work_submit_to_queue>
		return 0;
   19c7a:	2400      	movs	r4, #0
}
   19c7c:	4620      	mov	r0, r4
   19c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   19c82:	4642      	mov	r2, r8
   19c84:	463b      	mov	r3, r7
   19c86:	4907      	ldr	r1, [pc, #28]	; (19ca4 <k_delayed_work_submit_to_queue+0xdc>)
   19c88:	f105 0010 	add.w	r0, r5, #16
   19c8c:	f000 f8ba 	bl	19e04 <z_add_timeout>
   19c90:	e7c5      	b.n	19c1e <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   19c92:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   19c96:	e7c2      	b.n	19c1e <k_delayed_work_submit_to_queue+0x56>
   19c98:	2000b194 	.word	0x2000b194
   19c9c:	00020077 	.word	0x00020077
   19ca0:	0002003d 	.word	0x0002003d
   19ca4:	0001e345 	.word	0x0001e345

00019ca8 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   19ca8:	b538      	push	{r3, r4, r5, lr}
   19caa:	4604      	mov	r4, r0
	__asm__ volatile(
   19cac:	f04f 0320 	mov.w	r3, #32
   19cb0:	f3ef 8511 	mrs	r5, BASEPRI
   19cb4:	f383 8811 	msr	BASEPRI, r3
   19cb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19cbc:	4815      	ldr	r0, [pc, #84]	; (19d14 <k_delayed_work_cancel+0x6c>)
   19cbe:	f7ff ff0d 	bl	19adc <z_spin_lock_valid>
   19cc2:	b940      	cbnz	r0, 19cd6 <k_delayed_work_cancel+0x2e>
   19cc4:	4914      	ldr	r1, [pc, #80]	; (19d18 <k_delayed_work_cancel+0x70>)
   19cc6:	4815      	ldr	r0, [pc, #84]	; (19d1c <k_delayed_work_cancel+0x74>)
   19cc8:	227c      	movs	r2, #124	; 0x7c
   19cca:	f000 fef3 	bl	1aab4 <printk>
   19cce:	217c      	movs	r1, #124	; 0x7c
   19cd0:	4811      	ldr	r0, [pc, #68]	; (19d18 <k_delayed_work_cancel+0x70>)
   19cd2:	f001 f995 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   19cd6:	480f      	ldr	r0, [pc, #60]	; (19d14 <k_delayed_work_cancel+0x6c>)
   19cd8:	f7ff ff1c 	bl	19b14 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   19cdc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19cde:	b1b3      	cbz	r3, 19d0e <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   19ce0:	4620      	mov	r0, r4
   19ce2:	f004 fb34 	bl	1e34e <work_cancel>
   19ce6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19ce8:	480a      	ldr	r0, [pc, #40]	; (19d14 <k_delayed_work_cancel+0x6c>)
   19cea:	f7ff ff05 	bl	19af8 <z_spin_unlock_valid>
   19cee:	b940      	cbnz	r0, 19d02 <k_delayed_work_cancel+0x5a>
   19cf0:	4909      	ldr	r1, [pc, #36]	; (19d18 <k_delayed_work_cancel+0x70>)
   19cf2:	480a      	ldr	r0, [pc, #40]	; (19d1c <k_delayed_work_cancel+0x74>)
   19cf4:	22a7      	movs	r2, #167	; 0xa7
   19cf6:	f000 fedd 	bl	1aab4 <printk>
   19cfa:	21a7      	movs	r1, #167	; 0xa7
   19cfc:	4806      	ldr	r0, [pc, #24]	; (19d18 <k_delayed_work_cancel+0x70>)
   19cfe:	f001 f97f 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   19d02:	f385 8811 	msr	BASEPRI, r5
   19d06:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   19d0a:	4620      	mov	r0, r4
   19d0c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   19d0e:	f06f 0415 	mvn.w	r4, #21
   19d12:	e7e9      	b.n	19ce8 <k_delayed_work_cancel+0x40>
   19d14:	2000b194 	.word	0x2000b194
   19d18:	00020077 	.word	0x00020077
   19d1c:	0002003d 	.word	0x0002003d

00019d20 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   19d20:	4a02      	ldr	r2, [pc, #8]	; (19d2c <boot_banner+0xc>)
   19d22:	4903      	ldr	r1, [pc, #12]	; (19d30 <boot_banner+0x10>)
   19d24:	4803      	ldr	r0, [pc, #12]	; (19d34 <boot_banner+0x14>)
   19d26:	f000 bec5 	b.w	1aab4 <printk>
   19d2a:	bf00      	nop
   19d2c:	00022d9c 	.word	0x00022d9c
   19d30:	00022f63 	.word	0x00022f63
   19d34:	00022f70 	.word	0x00022f70

00019d38 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   19d38:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   19d3a:	4806      	ldr	r0, [pc, #24]	; (19d54 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   19d3c:	4a06      	ldr	r2, [pc, #24]	; (19d58 <z_data_copy+0x20>)
   19d3e:	4907      	ldr	r1, [pc, #28]	; (19d5c <z_data_copy+0x24>)
   19d40:	1a12      	subs	r2, r2, r0
   19d42:	f002 f8fb 	bl	1bf3c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   19d46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   19d4a:	4a05      	ldr	r2, [pc, #20]	; (19d60 <z_data_copy+0x28>)
   19d4c:	4905      	ldr	r1, [pc, #20]	; (19d64 <z_data_copy+0x2c>)
   19d4e:	4806      	ldr	r0, [pc, #24]	; (19d68 <z_data_copy+0x30>)
   19d50:	f002 b8f4 	b.w	1bf3c <memcpy>
   19d54:	20008000 	.word	0x20008000
   19d58:	200087d8 	.word	0x200087d8
   19d5c:	00023004 	.word	0x00023004
   19d60:	00000000 	.word	0x00000000
   19d64:	00023004 	.word	0x00023004
   19d68:	20008000 	.word	0x20008000

00019d6c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   19d6c:	4b03      	ldr	r3, [pc, #12]	; (19d7c <elapsed+0x10>)
   19d6e:	681b      	ldr	r3, [r3, #0]
   19d70:	b90b      	cbnz	r3, 19d76 <elapsed+0xa>
   19d72:	f7f2 bc9d 	b.w	c6b0 <z_clock_elapsed>
}
   19d76:	2000      	movs	r0, #0
   19d78:	4770      	bx	lr
   19d7a:	bf00      	nop
   19d7c:	2000b198 	.word	0x2000b198

00019d80 <next_timeout>:
	return list->head == list;
   19d80:	4b11      	ldr	r3, [pc, #68]	; (19dc8 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   19d82:	b510      	push	{r4, lr}
   19d84:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19d86:	429c      	cmp	r4, r3
   19d88:	bf08      	it	eq
   19d8a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   19d8c:	f7ff ffee 	bl	19d6c <elapsed>
   19d90:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   19d92:	b16c      	cbz	r4, 19db0 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   19d94:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   19d98:	1ac0      	subs	r0, r0, r3
   19d9a:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   19d9e:	2801      	cmp	r0, #1
   19da0:	f173 0200 	sbcs.w	r2, r3, #0
   19da4:	db0d      	blt.n	19dc2 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   19da6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   19daa:	f173 0300 	sbcs.w	r3, r3, #0
   19dae:	db01      	blt.n	19db4 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   19db0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   19db4:	4b05      	ldr	r3, [pc, #20]	; (19dcc <next_timeout+0x4c>)
   19db6:	695b      	ldr	r3, [r3, #20]
   19db8:	b113      	cbz	r3, 19dc0 <next_timeout+0x40>
   19dba:	4298      	cmp	r0, r3
   19dbc:	bfa8      	it	ge
   19dbe:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   19dc0:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   19dc2:	2000      	movs	r0, #0
   19dc4:	e7f6      	b.n	19db4 <next_timeout+0x34>
   19dc6:	bf00      	nop
   19dc8:	2000854c 	.word	0x2000854c
   19dcc:	2000b14c 	.word	0x2000b14c

00019dd0 <remove_timeout>:
{
   19dd0:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   19dd2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19dd4:	b168      	cbz	r0, 19df2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   19dd6:	4a0a      	ldr	r2, [pc, #40]	; (19e00 <remove_timeout+0x30>)
   19dd8:	6852      	ldr	r2, [r2, #4]
   19dda:	4290      	cmp	r0, r2
   19ddc:	d009      	beq.n	19df2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   19dde:	b143      	cbz	r3, 19df2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   19de0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   19de4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   19de8:	1912      	adds	r2, r2, r4
   19dea:	eb41 0105 	adc.w	r1, r1, r5
   19dee:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   19df2:	6842      	ldr	r2, [r0, #4]
   19df4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   19df6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19df8:	2300      	movs	r3, #0
	node->prev = NULL;
   19dfa:	e9c0 3300 	strd	r3, r3, [r0]
}
   19dfe:	bd30      	pop	{r4, r5, pc}
   19e00:	2000854c 	.word	0x2000854c

00019e04 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19e04:	f1b3 3fff 	cmp.w	r3, #4294967295
   19e08:	bf08      	it	eq
   19e0a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   19e0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19e12:	4604      	mov	r4, r0
   19e14:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19e16:	f000 808c 	beq.w	19f32 <z_add_timeout+0x12e>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   19e1a:	f06f 0601 	mvn.w	r6, #1
   19e1e:	f04f 39ff 	mov.w	r9, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   19e22:	1c55      	adds	r5, r2, #1
   19e24:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   19e28:	1b73      	subs	r3, r6, r5
   19e2a:	eb69 0307 	sbc.w	r3, r9, r7
   19e2e:	2b00      	cmp	r3, #0
   19e30:	db0d      	blt.n	19e4e <z_add_timeout+0x4a>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   19e32:	f7ff ff9b 	bl	19d6c <elapsed>
   19e36:	4b44      	ldr	r3, [pc, #272]	; (19f48 <z_add_timeout+0x144>)
   19e38:	e9d3 2300 	ldrd	r2, r3, [r3]
   19e3c:	1ab6      	subs	r6, r6, r2
   19e3e:	eb69 0303 	sbc.w	r3, r9, r3
   19e42:	1b75      	subs	r5, r6, r5
   19e44:	eb63 0707 	sbc.w	r7, r3, r7
   19e48:	1a2d      	subs	r5, r5, r0
   19e4a:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   19e4e:	6823      	ldr	r3, [r4, #0]
   19e50:	b143      	cbz	r3, 19e64 <z_add_timeout+0x60>
   19e52:	493e      	ldr	r1, [pc, #248]	; (19f4c <z_add_timeout+0x148>)
   19e54:	483e      	ldr	r0, [pc, #248]	; (19f50 <z_add_timeout+0x14c>)
   19e56:	2268      	movs	r2, #104	; 0x68
   19e58:	f000 fe2c 	bl	1aab4 <printk>
   19e5c:	2168      	movs	r1, #104	; 0x68
   19e5e:	483b      	ldr	r0, [pc, #236]	; (19f4c <z_add_timeout+0x148>)
   19e60:	f001 f8ce 	bl	1b000 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   19e64:	2d01      	cmp	r5, #1
   19e66:	f177 0300 	sbcs.w	r3, r7, #0
   19e6a:	bfbc      	itt	lt
   19e6c:	2501      	movlt	r5, #1
   19e6e:	2700      	movlt	r7, #0
	to->fn = fn;
   19e70:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   19e74:	f04f 0320 	mov.w	r3, #32
   19e78:	f3ef 8611 	mrs	r6, BASEPRI
   19e7c:	f383 8811 	msr	BASEPRI, r3
   19e80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19e84:	4833      	ldr	r0, [pc, #204]	; (19f54 <z_add_timeout+0x150>)
   19e86:	f7ff fe29 	bl	19adc <z_spin_lock_valid>
   19e8a:	b940      	cbnz	r0, 19e9e <z_add_timeout+0x9a>
   19e8c:	4932      	ldr	r1, [pc, #200]	; (19f58 <z_add_timeout+0x154>)
   19e8e:	4830      	ldr	r0, [pc, #192]	; (19f50 <z_add_timeout+0x14c>)
   19e90:	227c      	movs	r2, #124	; 0x7c
   19e92:	f000 fe0f 	bl	1aab4 <printk>
   19e96:	217c      	movs	r1, #124	; 0x7c
   19e98:	482f      	ldr	r0, [pc, #188]	; (19f58 <z_add_timeout+0x154>)
   19e9a:	f001 f8b1 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   19e9e:	482d      	ldr	r0, [pc, #180]	; (19f54 <z_add_timeout+0x150>)
   19ea0:	f7ff fe38 	bl	19b14 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   19ea4:	f7ff ff62 	bl	19d6c <elapsed>
	return list->head == list;
   19ea8:	4a2c      	ldr	r2, [pc, #176]	; (19f5c <z_add_timeout+0x158>)
   19eaa:	1945      	adds	r5, r0, r5
   19eac:	6813      	ldr	r3, [r2, #0]
   19eae:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19eb2:	4293      	cmp	r3, r2
   19eb4:	e9c4 5704 	strd	r5, r7, [r4, #16]
   19eb8:	d002      	beq.n	19ec0 <z_add_timeout+0xbc>
	return (node == list->tail) ? NULL : node->next;
   19eba:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   19ebe:	b933      	cbnz	r3, 19ece <z_add_timeout+0xca>
	node->prev = list->tail;
   19ec0:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   19ec2:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
   19ec4:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   19ec6:	6853      	ldr	r3, [r2, #4]
   19ec8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19eca:	6054      	str	r4, [r2, #4]
}
   19ecc:	e011      	b.n	19ef2 <z_add_timeout+0xee>
			if (t->dticks > to->dticks) {
   19ece:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   19ed2:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   19ed6:	4281      	cmp	r1, r0
   19ed8:	eb75 0e07 	sbcs.w	lr, r5, r7
   19edc:	da2b      	bge.n	19f36 <z_add_timeout+0x132>
				t->dticks -= to->dticks;
   19ede:	1a41      	subs	r1, r0, r1
   19ee0:	eb67 0505 	sbc.w	r5, r7, r5
   19ee4:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   19ee8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   19eea:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   19eee:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   19ef0:	605c      	str	r4, [r3, #4]
	return list->head == list;
   19ef2:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19ef4:	4293      	cmp	r3, r2
   19ef6:	d00b      	beq.n	19f10 <z_add_timeout+0x10c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   19ef8:	429c      	cmp	r4, r3
   19efa:	d109      	bne.n	19f10 <z_add_timeout+0x10c>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   19efc:	f7ff ff40 	bl	19d80 <next_timeout>

			if (next_time == 0 ||
   19f00:	b118      	cbz	r0, 19f0a <z_add_timeout+0x106>
			    _current_cpu->slice_ticks != next_time) {
   19f02:	4b17      	ldr	r3, [pc, #92]	; (19f60 <z_add_timeout+0x15c>)
			if (next_time == 0 ||
   19f04:	695b      	ldr	r3, [r3, #20]
   19f06:	4283      	cmp	r3, r0
   19f08:	d002      	beq.n	19f10 <z_add_timeout+0x10c>
				z_clock_set_timeout(next_time, false);
   19f0a:	2100      	movs	r1, #0
   19f0c:	f7f2 fb9e 	bl	c64c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19f10:	4810      	ldr	r0, [pc, #64]	; (19f54 <z_add_timeout+0x150>)
   19f12:	f7ff fdf1 	bl	19af8 <z_spin_unlock_valid>
   19f16:	b940      	cbnz	r0, 19f2a <z_add_timeout+0x126>
   19f18:	490f      	ldr	r1, [pc, #60]	; (19f58 <z_add_timeout+0x154>)
   19f1a:	480d      	ldr	r0, [pc, #52]	; (19f50 <z_add_timeout+0x14c>)
   19f1c:	22a7      	movs	r2, #167	; 0xa7
   19f1e:	f000 fdc9 	bl	1aab4 <printk>
   19f22:	21a7      	movs	r1, #167	; 0xa7
   19f24:	480c      	ldr	r0, [pc, #48]	; (19f58 <z_add_timeout+0x154>)
   19f26:	f001 f86b 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   19f2a:	f386 8811 	msr	BASEPRI, r6
   19f2e:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   19f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   19f36:	1a09      	subs	r1, r1, r0
   19f38:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   19f3c:	4563      	cmp	r3, ip
   19f3e:	e9c4 1504 	strd	r1, r5, [r4, #16]
   19f42:	d0bd      	beq.n	19ec0 <z_add_timeout+0xbc>
   19f44:	681b      	ldr	r3, [r3, #0]
   19f46:	e7ba      	b.n	19ebe <z_add_timeout+0xba>
   19f48:	2000a5f0 	.word	0x2000a5f0
   19f4c:	00022f97 	.word	0x00022f97
   19f50:	0002003d 	.word	0x0002003d
   19f54:	2000b19c 	.word	0x2000b19c
   19f58:	00020077 	.word	0x00020077
   19f5c:	2000854c 	.word	0x2000854c
   19f60:	2000b14c 	.word	0x2000b14c

00019f64 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   19f64:	b538      	push	{r3, r4, r5, lr}
   19f66:	4604      	mov	r4, r0
	__asm__ volatile(
   19f68:	f04f 0320 	mov.w	r3, #32
   19f6c:	f3ef 8511 	mrs	r5, BASEPRI
   19f70:	f383 8811 	msr	BASEPRI, r3
   19f74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19f78:	4815      	ldr	r0, [pc, #84]	; (19fd0 <z_abort_timeout+0x6c>)
   19f7a:	f7ff fdaf 	bl	19adc <z_spin_lock_valid>
   19f7e:	b940      	cbnz	r0, 19f92 <z_abort_timeout+0x2e>
   19f80:	4914      	ldr	r1, [pc, #80]	; (19fd4 <z_abort_timeout+0x70>)
   19f82:	4815      	ldr	r0, [pc, #84]	; (19fd8 <z_abort_timeout+0x74>)
   19f84:	227c      	movs	r2, #124	; 0x7c
   19f86:	f000 fd95 	bl	1aab4 <printk>
   19f8a:	217c      	movs	r1, #124	; 0x7c
   19f8c:	4811      	ldr	r0, [pc, #68]	; (19fd4 <z_abort_timeout+0x70>)
   19f8e:	f001 f837 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   19f92:	480f      	ldr	r0, [pc, #60]	; (19fd0 <z_abort_timeout+0x6c>)
   19f94:	f7ff fdbe 	bl	19b14 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   19f98:	6823      	ldr	r3, [r4, #0]
   19f9a:	b1b3      	cbz	r3, 19fca <z_abort_timeout+0x66>
			remove_timeout(to);
   19f9c:	4620      	mov	r0, r4
   19f9e:	f7ff ff17 	bl	19dd0 <remove_timeout>
			ret = 0;
   19fa2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19fa4:	480a      	ldr	r0, [pc, #40]	; (19fd0 <z_abort_timeout+0x6c>)
   19fa6:	f7ff fda7 	bl	19af8 <z_spin_unlock_valid>
   19faa:	b940      	cbnz	r0, 19fbe <z_abort_timeout+0x5a>
   19fac:	4909      	ldr	r1, [pc, #36]	; (19fd4 <z_abort_timeout+0x70>)
   19fae:	480a      	ldr	r0, [pc, #40]	; (19fd8 <z_abort_timeout+0x74>)
   19fb0:	22a7      	movs	r2, #167	; 0xa7
   19fb2:	f000 fd7f 	bl	1aab4 <printk>
   19fb6:	21a7      	movs	r1, #167	; 0xa7
   19fb8:	4806      	ldr	r0, [pc, #24]	; (19fd4 <z_abort_timeout+0x70>)
   19fba:	f001 f821 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   19fbe:	f385 8811 	msr	BASEPRI, r5
   19fc2:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   19fc6:	4620      	mov	r0, r4
   19fc8:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   19fca:	f06f 0415 	mvn.w	r4, #21
   19fce:	e7e9      	b.n	19fa4 <z_abort_timeout+0x40>
   19fd0:	2000b19c 	.word	0x2000b19c
   19fd4:	00020077 	.word	0x00020077
   19fd8:	0002003d 	.word	0x0002003d

00019fdc <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   19fdc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   19fde:	f04f 0320 	mov.w	r3, #32
   19fe2:	f3ef 8511 	mrs	r5, BASEPRI
   19fe6:	f383 8811 	msr	BASEPRI, r3
   19fea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19fee:	4813      	ldr	r0, [pc, #76]	; (1a03c <z_get_next_timeout_expiry+0x60>)
   19ff0:	f7ff fd74 	bl	19adc <z_spin_lock_valid>
   19ff4:	b940      	cbnz	r0, 1a008 <z_get_next_timeout_expiry+0x2c>
   19ff6:	4912      	ldr	r1, [pc, #72]	; (1a040 <z_get_next_timeout_expiry+0x64>)
   19ff8:	4812      	ldr	r0, [pc, #72]	; (1a044 <z_get_next_timeout_expiry+0x68>)
   19ffa:	227c      	movs	r2, #124	; 0x7c
   19ffc:	f000 fd5a 	bl	1aab4 <printk>
   1a000:	217c      	movs	r1, #124	; 0x7c
   1a002:	480f      	ldr	r0, [pc, #60]	; (1a040 <z_get_next_timeout_expiry+0x64>)
   1a004:	f000 fffc 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a008:	480c      	ldr	r0, [pc, #48]	; (1a03c <z_get_next_timeout_expiry+0x60>)
   1a00a:	f7ff fd83 	bl	19b14 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   1a00e:	f7ff feb7 	bl	19d80 <next_timeout>
   1a012:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a014:	4809      	ldr	r0, [pc, #36]	; (1a03c <z_get_next_timeout_expiry+0x60>)
   1a016:	f7ff fd6f 	bl	19af8 <z_spin_unlock_valid>
   1a01a:	b940      	cbnz	r0, 1a02e <z_get_next_timeout_expiry+0x52>
   1a01c:	4908      	ldr	r1, [pc, #32]	; (1a040 <z_get_next_timeout_expiry+0x64>)
   1a01e:	4809      	ldr	r0, [pc, #36]	; (1a044 <z_get_next_timeout_expiry+0x68>)
   1a020:	22a7      	movs	r2, #167	; 0xa7
   1a022:	f000 fd47 	bl	1aab4 <printk>
   1a026:	21a7      	movs	r1, #167	; 0xa7
   1a028:	4805      	ldr	r0, [pc, #20]	; (1a040 <z_get_next_timeout_expiry+0x64>)
   1a02a:	f000 ffe9 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   1a02e:	f385 8811 	msr	BASEPRI, r5
   1a032:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   1a036:	4620      	mov	r0, r4
   1a038:	bd38      	pop	{r3, r4, r5, pc}
   1a03a:	bf00      	nop
   1a03c:	2000b19c 	.word	0x2000b19c
   1a040:	00020077 	.word	0x00020077
   1a044:	0002003d 	.word	0x0002003d

0001a048 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   1a048:	b570      	push	{r4, r5, r6, lr}
   1a04a:	4604      	mov	r4, r0
   1a04c:	460d      	mov	r5, r1
	__asm__ volatile(
   1a04e:	f04f 0320 	mov.w	r3, #32
   1a052:	f3ef 8611 	mrs	r6, BASEPRI
   1a056:	f383 8811 	msr	BASEPRI, r3
   1a05a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a05e:	4816      	ldr	r0, [pc, #88]	; (1a0b8 <z_set_timeout_expiry+0x70>)
   1a060:	f7ff fd3c 	bl	19adc <z_spin_lock_valid>
   1a064:	b940      	cbnz	r0, 1a078 <z_set_timeout_expiry+0x30>
   1a066:	4915      	ldr	r1, [pc, #84]	; (1a0bc <z_set_timeout_expiry+0x74>)
   1a068:	4815      	ldr	r0, [pc, #84]	; (1a0c0 <z_set_timeout_expiry+0x78>)
   1a06a:	227c      	movs	r2, #124	; 0x7c
   1a06c:	f000 fd22 	bl	1aab4 <printk>
   1a070:	217c      	movs	r1, #124	; 0x7c
   1a072:	4812      	ldr	r0, [pc, #72]	; (1a0bc <z_set_timeout_expiry+0x74>)
   1a074:	f000 ffc4 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a078:	480f      	ldr	r0, [pc, #60]	; (1a0b8 <z_set_timeout_expiry+0x70>)
   1a07a:	f7ff fd4b 	bl	19b14 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   1a07e:	f7ff fe7f 	bl	19d80 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1a082:	2801      	cmp	r0, #1
   1a084:	dd05      	ble.n	1a092 <z_set_timeout_expiry+0x4a>
   1a086:	42a0      	cmp	r0, r4
   1a088:	dd03      	ble.n	1a092 <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   1a08a:	4629      	mov	r1, r5
   1a08c:	4620      	mov	r0, r4
   1a08e:	f7f2 fadd 	bl	c64c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a092:	4809      	ldr	r0, [pc, #36]	; (1a0b8 <z_set_timeout_expiry+0x70>)
   1a094:	f7ff fd30 	bl	19af8 <z_spin_unlock_valid>
   1a098:	b940      	cbnz	r0, 1a0ac <z_set_timeout_expiry+0x64>
   1a09a:	4908      	ldr	r1, [pc, #32]	; (1a0bc <z_set_timeout_expiry+0x74>)
   1a09c:	4808      	ldr	r0, [pc, #32]	; (1a0c0 <z_set_timeout_expiry+0x78>)
   1a09e:	22a7      	movs	r2, #167	; 0xa7
   1a0a0:	f000 fd08 	bl	1aab4 <printk>
   1a0a4:	21a7      	movs	r1, #167	; 0xa7
   1a0a6:	4805      	ldr	r0, [pc, #20]	; (1a0bc <z_set_timeout_expiry+0x74>)
   1a0a8:	f000 ffaa 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   1a0ac:	f386 8811 	msr	BASEPRI, r6
   1a0b0:	f3bf 8f6f 	isb	sy
		}
	}
}
   1a0b4:	bd70      	pop	{r4, r5, r6, pc}
   1a0b6:	bf00      	nop
   1a0b8:	2000b19c 	.word	0x2000b19c
   1a0bc:	00020077 	.word	0x00020077
   1a0c0:	0002003d 	.word	0x0002003d

0001a0c4 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   1a0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a0c8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1a0ca:	f7fe fe61 	bl	18d90 <z_time_slice>
	__asm__ volatile(
   1a0ce:	f04f 0320 	mov.w	r3, #32
   1a0d2:	f3ef 8511 	mrs	r5, BASEPRI
   1a0d6:	f383 8811 	msr	BASEPRI, r3
   1a0da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a0de:	4842      	ldr	r0, [pc, #264]	; (1a1e8 <z_clock_announce+0x124>)
   1a0e0:	f7ff fcfc 	bl	19adc <z_spin_lock_valid>
   1a0e4:	b940      	cbnz	r0, 1a0f8 <z_clock_announce+0x34>
   1a0e6:	4941      	ldr	r1, [pc, #260]	; (1a1ec <z_clock_announce+0x128>)
   1a0e8:	4841      	ldr	r0, [pc, #260]	; (1a1f0 <z_clock_announce+0x12c>)
   1a0ea:	227c      	movs	r2, #124	; 0x7c
   1a0ec:	f000 fce2 	bl	1aab4 <printk>
   1a0f0:	217c      	movs	r1, #124	; 0x7c
   1a0f2:	483e      	ldr	r0, [pc, #248]	; (1a1ec <z_clock_announce+0x128>)
   1a0f4:	f000 ff84 	bl	1b000 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1a0f8:	4f3e      	ldr	r7, [pc, #248]	; (1a1f4 <z_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   1a0fa:	483b      	ldr	r0, [pc, #236]	; (1a1e8 <z_clock_announce+0x124>)
	return list->head == list;
   1a0fc:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 1a1f8 <z_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1a100:	4e3e      	ldr	r6, [pc, #248]	; (1a1fc <z_clock_announce+0x138>)
   1a102:	f7ff fd07 	bl	19b14 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   1a106:	603c      	str	r4, [r7, #0]
   1a108:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1a10c:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a10e:	4544      	cmp	r4, r8
   1a110:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   1a114:	e9d6 1e00 	ldrd	r1, lr, [r6]
   1a118:	d00b      	beq.n	1a132 <z_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1a11a:	b154      	cbz	r4, 1a132 <z_clock_announce+0x6e>
   1a11c:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   1a120:	429a      	cmp	r2, r3
   1a122:	eb70 090c 	sbcs.w	r9, r0, ip
   1a126:	da23      	bge.n	1a170 <z_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1a128:	1a9b      	subs	r3, r3, r2
   1a12a:	eb6c 0c00 	sbc.w	ip, ip, r0
   1a12e:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   1a132:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1a134:	1852      	adds	r2, r2, r1
   1a136:	eb4e 0000 	adc.w	r0, lr, r0
   1a13a:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   1a13e:	603c      	str	r4, [r7, #0]

	z_clock_set_timeout(next_timeout(), false);
   1a140:	f7ff fe1e 	bl	19d80 <next_timeout>
   1a144:	4621      	mov	r1, r4
   1a146:	f7f2 fa81 	bl	c64c <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a14a:	4827      	ldr	r0, [pc, #156]	; (1a1e8 <z_clock_announce+0x124>)
   1a14c:	f7ff fcd4 	bl	19af8 <z_spin_unlock_valid>
   1a150:	b940      	cbnz	r0, 1a164 <z_clock_announce+0xa0>
   1a152:	4926      	ldr	r1, [pc, #152]	; (1a1ec <z_clock_announce+0x128>)
   1a154:	4826      	ldr	r0, [pc, #152]	; (1a1f0 <z_clock_announce+0x12c>)
   1a156:	22a7      	movs	r2, #167	; 0xa7
   1a158:	f000 fcac 	bl	1aab4 <printk>
   1a15c:	21a7      	movs	r1, #167	; 0xa7
   1a15e:	4823      	ldr	r0, [pc, #140]	; (1a1ec <z_clock_announce+0x128>)
   1a160:	f000 ff4e 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   1a164:	f385 8811 	msr	BASEPRI, r5
   1a168:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1a16c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1a170:	1859      	adds	r1, r3, r1
   1a172:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   1a176:	1ad3      	subs	r3, r2, r3
   1a178:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   1a17a:	2200      	movs	r2, #0
   1a17c:	2300      	movs	r3, #0
		curr_tick += dt;
   1a17e:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   1a182:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1a186:	4620      	mov	r0, r4
   1a188:	f7ff fe22 	bl	19dd0 <remove_timeout>
   1a18c:	4816      	ldr	r0, [pc, #88]	; (1a1e8 <z_clock_announce+0x124>)
   1a18e:	f7ff fcb3 	bl	19af8 <z_spin_unlock_valid>
   1a192:	b940      	cbnz	r0, 1a1a6 <z_clock_announce+0xe2>
   1a194:	4915      	ldr	r1, [pc, #84]	; (1a1ec <z_clock_announce+0x128>)
   1a196:	4816      	ldr	r0, [pc, #88]	; (1a1f0 <z_clock_announce+0x12c>)
   1a198:	22a7      	movs	r2, #167	; 0xa7
   1a19a:	f000 fc8b 	bl	1aab4 <printk>
   1a19e:	21a7      	movs	r1, #167	; 0xa7
   1a1a0:	4812      	ldr	r0, [pc, #72]	; (1a1ec <z_clock_announce+0x128>)
   1a1a2:	f000 ff2d 	bl	1b000 <assert_post_action>
   1a1a6:	f385 8811 	msr	BASEPRI, r5
   1a1aa:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1a1ae:	4620      	mov	r0, r4
   1a1b0:	68a3      	ldr	r3, [r4, #8]
   1a1b2:	4798      	blx	r3
	__asm__ volatile(
   1a1b4:	f04f 0320 	mov.w	r3, #32
   1a1b8:	f3ef 8511 	mrs	r5, BASEPRI
   1a1bc:	f383 8811 	msr	BASEPRI, r3
   1a1c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a1c4:	4808      	ldr	r0, [pc, #32]	; (1a1e8 <z_clock_announce+0x124>)
   1a1c6:	f7ff fc89 	bl	19adc <z_spin_lock_valid>
   1a1ca:	b940      	cbnz	r0, 1a1de <z_clock_announce+0x11a>
   1a1cc:	4907      	ldr	r1, [pc, #28]	; (1a1ec <z_clock_announce+0x128>)
   1a1ce:	4808      	ldr	r0, [pc, #32]	; (1a1f0 <z_clock_announce+0x12c>)
   1a1d0:	227c      	movs	r2, #124	; 0x7c
   1a1d2:	f000 fc6f 	bl	1aab4 <printk>
   1a1d6:	217c      	movs	r1, #124	; 0x7c
   1a1d8:	4804      	ldr	r0, [pc, #16]	; (1a1ec <z_clock_announce+0x128>)
   1a1da:	f000 ff11 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a1de:	4802      	ldr	r0, [pc, #8]	; (1a1e8 <z_clock_announce+0x124>)
   1a1e0:	f7ff fc98 	bl	19b14 <z_spin_lock_set_owner>
	return k;
   1a1e4:	e790      	b.n	1a108 <z_clock_announce+0x44>
   1a1e6:	bf00      	nop
   1a1e8:	2000b19c 	.word	0x2000b19c
   1a1ec:	00020077 	.word	0x00020077
   1a1f0:	0002003d 	.word	0x0002003d
   1a1f4:	2000b198 	.word	0x2000b198
   1a1f8:	2000854c 	.word	0x2000854c
   1a1fc:	2000a5f0 	.word	0x2000a5f0

0001a200 <z_tick_get>:

int64_t z_tick_get(void)
{
   1a200:	b570      	push	{r4, r5, r6, lr}
   1a202:	f04f 0320 	mov.w	r3, #32
   1a206:	f3ef 8611 	mrs	r6, BASEPRI
   1a20a:	f383 8811 	msr	BASEPRI, r3
   1a20e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a212:	4816      	ldr	r0, [pc, #88]	; (1a26c <z_tick_get+0x6c>)
   1a214:	f7ff fc62 	bl	19adc <z_spin_lock_valid>
   1a218:	b940      	cbnz	r0, 1a22c <z_tick_get+0x2c>
   1a21a:	4915      	ldr	r1, [pc, #84]	; (1a270 <z_tick_get+0x70>)
   1a21c:	4815      	ldr	r0, [pc, #84]	; (1a274 <z_tick_get+0x74>)
   1a21e:	227c      	movs	r2, #124	; 0x7c
   1a220:	f000 fc48 	bl	1aab4 <printk>
   1a224:	217c      	movs	r1, #124	; 0x7c
   1a226:	4812      	ldr	r0, [pc, #72]	; (1a270 <z_tick_get+0x70>)
   1a228:	f000 feea 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a22c:	480f      	ldr	r0, [pc, #60]	; (1a26c <z_tick_get+0x6c>)
   1a22e:	f7ff fc71 	bl	19b14 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1a232:	f7f2 fa3d 	bl	c6b0 <z_clock_elapsed>
   1a236:	4b10      	ldr	r3, [pc, #64]	; (1a278 <z_tick_get+0x78>)
   1a238:	e9d3 4500 	ldrd	r4, r5, [r3]
   1a23c:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a23e:	480b      	ldr	r0, [pc, #44]	; (1a26c <z_tick_get+0x6c>)
   1a240:	f145 0500 	adc.w	r5, r5, #0
   1a244:	f7ff fc58 	bl	19af8 <z_spin_unlock_valid>
   1a248:	b940      	cbnz	r0, 1a25c <z_tick_get+0x5c>
   1a24a:	4909      	ldr	r1, [pc, #36]	; (1a270 <z_tick_get+0x70>)
   1a24c:	4809      	ldr	r0, [pc, #36]	; (1a274 <z_tick_get+0x74>)
   1a24e:	22a7      	movs	r2, #167	; 0xa7
   1a250:	f000 fc30 	bl	1aab4 <printk>
   1a254:	21a7      	movs	r1, #167	; 0xa7
   1a256:	4806      	ldr	r0, [pc, #24]	; (1a270 <z_tick_get+0x70>)
   1a258:	f000 fed2 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   1a25c:	f386 8811 	msr	BASEPRI, r6
   1a260:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1a264:	4620      	mov	r0, r4
   1a266:	4629      	mov	r1, r5
   1a268:	bd70      	pop	{r4, r5, r6, pc}
   1a26a:	bf00      	nop
   1a26c:	2000b19c 	.word	0x2000b19c
   1a270:	00020077 	.word	0x00020077
   1a274:	0002003d 	.word	0x0002003d
   1a278:	2000a5f0 	.word	0x2000a5f0

0001a27c <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   1a27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   1a280:	6884      	ldr	r4, [r0, #8]
{
   1a282:	4605      	mov	r5, r0
   1a284:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   1a286:	b1b4      	cbz	r4, 1a2b6 <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   1a288:	7863      	ldrb	r3, [r4, #1]
   1a28a:	2b01      	cmp	r3, #1
   1a28c:	d145      	bne.n	1a31a <signal_poll_event+0x9e>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   1a28e:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   1a292:	d10a      	bne.n	1a2aa <signal_poll_event+0x2e>
   1a294:	22e3      	movs	r2, #227	; 0xe3
   1a296:	492d      	ldr	r1, [pc, #180]	; (1a34c <signal_poll_event+0xd0>)
   1a298:	482d      	ldr	r0, [pc, #180]	; (1a350 <signal_poll_event+0xd4>)
   1a29a:	f000 fc0b 	bl	1aab4 <printk>
   1a29e:	21e3      	movs	r1, #227	; 0xe3
   1a2a0:	482a      	ldr	r0, [pc, #168]	; (1a34c <signal_poll_event+0xd0>)
   1a2a2:	f000 fead 	bl	1b000 <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   1a2a6:	7b7b      	ldrb	r3, [r7, #13]
   1a2a8:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
   1a2aa:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1a2ae:	f013 0302 	ands.w	r3, r3, #2
   1a2b2:	d10a      	bne.n	1a2ca <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   1a2b4:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   1a2b6:	2000      	movs	r0, #0
	event->state |= state;
   1a2b8:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   1a2ba:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   1a2bc:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1a2c0:	430e      	orrs	r6, r1
   1a2c2:	f366 3310 	bfi	r3, r6, #12, #5
   1a2c6:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   1a2c8:	e00b      	b.n	1a2e2 <signal_poll_event+0x66>
	if (z_is_thread_timeout_expired(thread)) {
   1a2ca:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   1a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
   1a2d2:	bf08      	it	eq
   1a2d4:	f112 0f02 	cmneq.w	r2, #2
   1a2d8:	d105      	bne.n	1a2e6 <signal_poll_event+0x6a>
		poller->is_polling = false;
   1a2da:	2300      	movs	r3, #0
		return -EAGAIN;
   1a2dc:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   1a2e0:	7023      	strb	r3, [r4, #0]
}
   1a2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   1a2e6:	4638      	mov	r0, r7
   1a2e8:	f7fe fb30 	bl	1894c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1a2ec:	2e08      	cmp	r6, #8
   1a2ee:	bf0c      	ite	eq
   1a2f0:	f06f 0303 	mvneq.w	r3, #3
   1a2f4:	2300      	movne	r3, #0
   1a2f6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1a2f8:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1a2fc:	06db      	lsls	r3, r3, #27
   1a2fe:	d104      	bne.n	1a30a <signal_poll_event+0x8e>
	if (!z_is_thread_ready(thread)) {
   1a300:	f854 8c54 	ldr.w	r8, [r4, #-84]
   1a304:	f1b8 0f00 	cmp.w	r8, #0
   1a308:	d001      	beq.n	1a30e <signal_poll_event+0x92>
		poller->is_polling = false;
   1a30a:	2300      	movs	r3, #0
   1a30c:	e7d2      	b.n	1a2b4 <signal_poll_event+0x38>
	z_ready_thread(thread);
   1a30e:	4638      	mov	r0, r7
   1a310:	f7fe fc36 	bl	18b80 <z_ready_thread>
		poller->is_polling = false;
   1a314:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   1a318:	e7cd      	b.n	1a2b6 <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   1a31a:	2b02      	cmp	r3, #2
   1a31c:	d1f5      	bne.n	1a30a <signal_poll_event+0x8e>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1a31e:	7823      	ldrb	r3, [r4, #0]
   1a320:	2b00      	cmp	r3, #0
   1a322:	d0c8      	beq.n	1a2b6 <signal_poll_event+0x3a>
   1a324:	f854 7c04 	ldr.w	r7, [r4, #-4]
   1a328:	b177      	cbz	r7, 1a348 <signal_poll_event+0xcc>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1a32a:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1a32e:	f1a4 0910 	sub.w	r9, r4, #16
   1a332:	f104 0010 	add.w	r0, r4, #16
   1a336:	f7ff fe15 	bl	19f64 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   1a33a:	4649      	mov	r1, r9
   1a33c:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1a33e:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   1a342:	f004 f875 	bl	1e430 <k_work_submit_to_queue>
   1a346:	e7e5      	b.n	1a314 <signal_poll_event+0x98>
		poller->is_polling = false;
   1a348:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1a34a:	e7b4      	b.n	1a2b6 <signal_poll_event+0x3a>
   1a34c:	00022fbb 	.word	0x00022fbb
   1a350:	0002003d 	.word	0x0002003d

0001a354 <register_events>:
{
   1a354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1a358:	2600      	movs	r6, #0
{
   1a35a:	4614      	mov	r4, r2
   1a35c:	4681      	mov	r9, r0
	int events_registered = 0;
   1a35e:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a360:	f8df a188 	ldr.w	sl, [pc, #392]	; 1a4ec <register_events+0x198>
   1a364:	4f62      	ldr	r7, [pc, #392]	; (1a4f0 <register_events+0x19c>)
   1a366:	4d63      	ldr	r5, [pc, #396]	; (1a4f4 <register_events+0x1a0>)
{
   1a368:	9100      	str	r1, [sp, #0]
   1a36a:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   1a36c:	9b00      	ldr	r3, [sp, #0]
   1a36e:	429e      	cmp	r6, r3
   1a370:	db03      	blt.n	1a37a <register_events+0x26>
}
   1a372:	4640      	mov	r0, r8
   1a374:	b003      	add	sp, #12
   1a376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   1a37a:	f04f 0220 	mov.w	r2, #32
   1a37e:	f3ef 8b11 	mrs	fp, BASEPRI
   1a382:	f382 8811 	msr	BASEPRI, r2
   1a386:	f3bf 8f6f 	isb	sy
   1a38a:	4650      	mov	r0, sl
   1a38c:	f7ff fba6 	bl	19adc <z_spin_lock_valid>
   1a390:	b940      	cbnz	r0, 1a3a4 <register_events+0x50>
   1a392:	4639      	mov	r1, r7
   1a394:	4628      	mov	r0, r5
   1a396:	227c      	movs	r2, #124	; 0x7c
   1a398:	f000 fb8c 	bl	1aab4 <printk>
   1a39c:	217c      	movs	r1, #124	; 0x7c
   1a39e:	4638      	mov	r0, r7
   1a3a0:	f000 fe2e 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a3a4:	4650      	mov	r0, sl
   1a3a6:	f7ff fbb5 	bl	19b14 <z_spin_lock_set_owner>
	switch (event->type) {
   1a3aa:	f899 200d 	ldrb.w	r2, [r9, #13]
   1a3ae:	f002 020f 	and.w	r2, r2, #15
   1a3b2:	2a04      	cmp	r2, #4
   1a3b4:	d848      	bhi.n	1a448 <register_events+0xf4>
   1a3b6:	e8df f002 	tbb	[pc, r2]
   1a3ba:	402f      	.short	0x402f
   1a3bc:	4703      	.short	0x4703
   1a3be:	2b          	.byte	0x2b
   1a3bf:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   1a3c0:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a3c4:	6892      	ldr	r2, [r2, #8]
   1a3c6:	b33a      	cbz	r2, 1a418 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1a3c8:	2102      	movs	r1, #2
	event->poller = NULL;
   1a3ca:	2000      	movs	r0, #0
	event->state |= state;
   1a3cc:	f8d9 200c 	ldr.w	r2, [r9, #12]
	event->poller = NULL;
   1a3d0:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   1a3d4:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   1a3d8:	ea41 010c 	orr.w	r1, r1, ip
   1a3dc:	f361 3210 	bfi	r2, r1, #12, #5
   1a3e0:	f8c9 200c 	str.w	r2, [r9, #12]
			poller->is_polling = false;
   1a3e4:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a3e6:	4650      	mov	r0, sl
   1a3e8:	f7ff fb86 	bl	19af8 <z_spin_unlock_valid>
   1a3ec:	b940      	cbnz	r0, 1a400 <register_events+0xac>
   1a3ee:	4639      	mov	r1, r7
   1a3f0:	4628      	mov	r0, r5
   1a3f2:	22a7      	movs	r2, #167	; 0xa7
   1a3f4:	f000 fb5e 	bl	1aab4 <printk>
   1a3f8:	21a7      	movs	r1, #167	; 0xa7
   1a3fa:	4638      	mov	r0, r7
   1a3fc:	f000 fe00 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   1a400:	f38b 8811 	msr	BASEPRI, fp
   1a404:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1a408:	3601      	adds	r6, #1
   1a40a:	f109 0914 	add.w	r9, r9, #20
   1a40e:	e7ad      	b.n	1a36c <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   1a410:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a414:	6812      	ldr	r2, [r2, #0]
   1a416:	bb0a      	cbnz	r2, 1a45c <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   1a418:	9b01      	ldr	r3, [sp, #4]
   1a41a:	2b00      	cmp	r3, #0
   1a41c:	d1e3      	bne.n	1a3e6 <register_events+0x92>
   1a41e:	7822      	ldrb	r2, [r4, #0]
   1a420:	2a00      	cmp	r2, #0
   1a422:	d0e0      	beq.n	1a3e6 <register_events+0x92>
	switch (event->type) {
   1a424:	f899 200d 	ldrb.w	r2, [r9, #13]
   1a428:	f002 020f 	and.w	r2, r2, #15
   1a42c:	2a04      	cmp	r2, #4
   1a42e:	d852      	bhi.n	1a4d6 <register_events+0x182>
   1a430:	e8df f002 	tbb	[pc, r2]
   1a434:	51164029 	.word	0x51164029
   1a438:	2e          	.byte	0x2e
   1a439:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1a43a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a43e:	6892      	ldr	r2, [r2, #8]
   1a440:	2a00      	cmp	r2, #0
   1a442:	d0e9      	beq.n	1a418 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   1a444:	2101      	movs	r1, #1
   1a446:	e7c0      	b.n	1a3ca <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1a448:	4628      	mov	r0, r5
   1a44a:	2254      	movs	r2, #84	; 0x54
   1a44c:	492a      	ldr	r1, [pc, #168]	; (1a4f8 <register_events+0x1a4>)
   1a44e:	f000 fb31 	bl	1aab4 <printk>
   1a452:	2154      	movs	r1, #84	; 0x54
   1a454:	4828      	ldr	r0, [pc, #160]	; (1a4f8 <register_events+0x1a4>)
   1a456:	f000 fdd3 	bl	1b000 <assert_post_action>
		break;
   1a45a:	e7dd      	b.n	1a418 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1a45c:	2104      	movs	r1, #4
   1a45e:	e7b4      	b.n	1a3ca <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1a460:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a464:	b942      	cbnz	r2, 1a478 <register_events+0x124>
   1a466:	4628      	mov	r0, r5
   1a468:	4923      	ldr	r1, [pc, #140]	; (1a4f8 <register_events+0x1a4>)
   1a46a:	227e      	movs	r2, #126	; 0x7e
   1a46c:	f000 fb22 	bl	1aab4 <printk>
   1a470:	217e      	movs	r1, #126	; 0x7e
   1a472:	4821      	ldr	r0, [pc, #132]	; (1a4f8 <register_events+0x1a4>)
   1a474:	f000 fdc4 	bl	1b000 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1a478:	4622      	mov	r2, r4
   1a47a:	4649      	mov	r1, r9
   1a47c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a480:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   1a482:	f003 ffe9 	bl	1e458 <add_event>
	event->poller = poller;
   1a486:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   1a48a:	f108 0801 	add.w	r8, r8, #1
   1a48e:	e7aa      	b.n	1a3e6 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1a490:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a494:	b942      	cbnz	r2, 1a4a8 <register_events+0x154>
   1a496:	4628      	mov	r0, r5
   1a498:	4917      	ldr	r1, [pc, #92]	; (1a4f8 <register_events+0x1a4>)
   1a49a:	2282      	movs	r2, #130	; 0x82
   1a49c:	f000 fb0a 	bl	1aab4 <printk>
   1a4a0:	2182      	movs	r1, #130	; 0x82
   1a4a2:	4815      	ldr	r0, [pc, #84]	; (1a4f8 <register_events+0x1a4>)
   1a4a4:	f000 fdac 	bl	1b000 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1a4a8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a4ac:	4622      	mov	r2, r4
   1a4ae:	4649      	mov	r1, r9
   1a4b0:	3014      	adds	r0, #20
   1a4b2:	e7e6      	b.n	1a482 <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a4b4:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a4b8:	b942      	cbnz	r2, 1a4cc <register_events+0x178>
   1a4ba:	4628      	mov	r0, r5
   1a4bc:	490e      	ldr	r1, [pc, #56]	; (1a4f8 <register_events+0x1a4>)
   1a4be:	2286      	movs	r2, #134	; 0x86
   1a4c0:	f000 faf8 	bl	1aab4 <printk>
   1a4c4:	2186      	movs	r1, #134	; 0x86
   1a4c6:	480c      	ldr	r0, [pc, #48]	; (1a4f8 <register_events+0x1a4>)
   1a4c8:	f000 fd9a 	bl	1b000 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   1a4cc:	4622      	mov	r2, r4
   1a4ce:	4649      	mov	r1, r9
   1a4d0:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a4d4:	e7d5      	b.n	1a482 <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   1a4d6:	4628      	mov	r0, r5
   1a4d8:	228d      	movs	r2, #141	; 0x8d
   1a4da:	4907      	ldr	r1, [pc, #28]	; (1a4f8 <register_events+0x1a4>)
   1a4dc:	f000 faea 	bl	1aab4 <printk>
   1a4e0:	218d      	movs	r1, #141	; 0x8d
   1a4e2:	4805      	ldr	r0, [pc, #20]	; (1a4f8 <register_events+0x1a4>)
   1a4e4:	f000 fd8c 	bl	1b000 <assert_post_action>
		break;
   1a4e8:	e7cd      	b.n	1a486 <register_events+0x132>
   1a4ea:	bf00      	nop
   1a4ec:	2000b1a0 	.word	0x2000b1a0
   1a4f0:	00020077 	.word	0x00020077
   1a4f4:	0002003d 	.word	0x0002003d
   1a4f8:	00022fbb 	.word	0x00022fbb

0001a4fc <clear_event_registrations>:
{
   1a4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a500:	2414      	movs	r4, #20
   1a502:	4617      	mov	r7, r2
	while (num_events--) {
   1a504:	460e      	mov	r6, r1
   1a506:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   1a50a:	4d3d      	ldr	r5, [pc, #244]	; (1a600 <clear_event_registrations+0x104>)
   1a50c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1a604 <clear_event_registrations+0x108>
   1a510:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1a608 <clear_event_registrations+0x10c>
	while (num_events--) {
   1a514:	b90e      	cbnz	r6, 1a51a <clear_event_registrations+0x1e>
}
   1a516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   1a51a:	2300      	movs	r3, #0
   1a51c:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1a520:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1a524:	f1a4 0a14 	sub.w	sl, r4, #20
   1a528:	f003 030f 	and.w	r3, r3, #15
   1a52c:	2b04      	cmp	r3, #4
   1a52e:	d831      	bhi.n	1a594 <clear_event_registrations+0x98>
   1a530:	e8df f003 	tbb	[pc, r3]
   1a534:	30032539 	.word	0x30032539
   1a538:	1a          	.byte	0x1a
   1a539:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1a53a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a53e:	b943      	cbnz	r3, 1a552 <clear_event_registrations+0x56>
   1a540:	4629      	mov	r1, r5
   1a542:	229d      	movs	r2, #157	; 0x9d
   1a544:	4640      	mov	r0, r8
   1a546:	f000 fab5 	bl	1aab4 <printk>
   1a54a:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a54c:	4628      	mov	r0, r5
   1a54e:	f000 fd57 	bl	1b000 <assert_post_action>
	return node->next != NULL;
   1a552:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1a556:	b333      	cbz	r3, 1a5a6 <clear_event_registrations+0xaa>
	node->prev->next = node->next;
   1a558:	f854 2c10 	ldr.w	r2, [r4, #-16]
   1a55c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a55e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a560:	2300      	movs	r3, #0
	node->prev = NULL;
   1a562:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   1a566:	e01e      	b.n	1a5a6 <clear_event_registrations+0xaa>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1a568:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a56c:	2b00      	cmp	r3, #0
   1a56e:	d1f0      	bne.n	1a552 <clear_event_registrations+0x56>
   1a570:	4629      	mov	r1, r5
   1a572:	22a1      	movs	r2, #161	; 0xa1
   1a574:	4640      	mov	r0, r8
   1a576:	f000 fa9d 	bl	1aab4 <printk>
   1a57a:	21a1      	movs	r1, #161	; 0xa1
   1a57c:	e7e6      	b.n	1a54c <clear_event_registrations+0x50>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a57e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a582:	2b00      	cmp	r3, #0
   1a584:	d1e5      	bne.n	1a552 <clear_event_registrations+0x56>
   1a586:	4629      	mov	r1, r5
   1a588:	22a5      	movs	r2, #165	; 0xa5
   1a58a:	4640      	mov	r0, r8
   1a58c:	f000 fa92 	bl	1aab4 <printk>
   1a590:	21a5      	movs	r1, #165	; 0xa5
   1a592:	e7db      	b.n	1a54c <clear_event_registrations+0x50>
		__ASSERT(false, "invalid event type\n");
   1a594:	4629      	mov	r1, r5
   1a596:	4640      	mov	r0, r8
   1a598:	22ac      	movs	r2, #172	; 0xac
   1a59a:	f000 fa8b 	bl	1aab4 <printk>
   1a59e:	21ac      	movs	r1, #172	; 0xac
   1a5a0:	4628      	mov	r0, r5
   1a5a2:	f000 fd2d 	bl	1b000 <assert_post_action>
   1a5a6:	4648      	mov	r0, r9
   1a5a8:	f7ff faa6 	bl	19af8 <z_spin_unlock_valid>
   1a5ac:	b940      	cbnz	r0, 1a5c0 <clear_event_registrations+0xc4>
   1a5ae:	4640      	mov	r0, r8
   1a5b0:	4916      	ldr	r1, [pc, #88]	; (1a60c <clear_event_registrations+0x110>)
   1a5b2:	22a7      	movs	r2, #167	; 0xa7
   1a5b4:	f000 fa7e 	bl	1aab4 <printk>
   1a5b8:	21a7      	movs	r1, #167	; 0xa7
   1a5ba:	4814      	ldr	r0, [pc, #80]	; (1a60c <clear_event_registrations+0x110>)
   1a5bc:	f000 fd20 	bl	1b000 <assert_post_action>
   1a5c0:	f387 8811 	msr	BASEPRI, r7
   1a5c4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a5c8:	f04f 0320 	mov.w	r3, #32
   1a5cc:	f3ef 8711 	mrs	r7, BASEPRI
   1a5d0:	f383 8811 	msr	BASEPRI, r3
   1a5d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a5d8:	4648      	mov	r0, r9
   1a5da:	f7ff fa7f 	bl	19adc <z_spin_lock_valid>
   1a5de:	b940      	cbnz	r0, 1a5f2 <clear_event_registrations+0xf6>
   1a5e0:	4640      	mov	r0, r8
   1a5e2:	490a      	ldr	r1, [pc, #40]	; (1a60c <clear_event_registrations+0x110>)
   1a5e4:	227c      	movs	r2, #124	; 0x7c
   1a5e6:	f000 fa65 	bl	1aab4 <printk>
   1a5ea:	217c      	movs	r1, #124	; 0x7c
   1a5ec:	4807      	ldr	r0, [pc, #28]	; (1a60c <clear_event_registrations+0x110>)
   1a5ee:	f000 fd07 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a5f2:	4648      	mov	r0, r9
   1a5f4:	f7ff fa8e 	bl	19b14 <z_spin_lock_set_owner>
	return k;
   1a5f8:	4654      	mov	r4, sl
   1a5fa:	3e01      	subs	r6, #1
   1a5fc:	e78a      	b.n	1a514 <clear_event_registrations+0x18>
   1a5fe:	bf00      	nop
   1a600:	00022fbb 	.word	0x00022fbb
   1a604:	0002003d 	.word	0x0002003d
   1a608:	2000b1a0 	.word	0x2000b1a0
   1a60c:	00020077 	.word	0x00020077

0001a610 <k_poll_event_init>:
{
   1a610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a612:	4605      	mov	r5, r0
   1a614:	460f      	mov	r7, r1
   1a616:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1a618:	4614      	mov	r4, r2
   1a61a:	b142      	cbz	r2, 1a62e <k_poll_event_init+0x1e>
   1a61c:	4915      	ldr	r1, [pc, #84]	; (1a674 <k_poll_event_init+0x64>)
   1a61e:	4816      	ldr	r0, [pc, #88]	; (1a678 <k_poll_event_init+0x68>)
   1a620:	222d      	movs	r2, #45	; 0x2d
   1a622:	f000 fa47 	bl	1aab4 <printk>
   1a626:	212d      	movs	r1, #45	; 0x2d
   1a628:	4812      	ldr	r0, [pc, #72]	; (1a674 <k_poll_event_init+0x64>)
   1a62a:	f000 fce9 	bl	1b000 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1a62e:	2f0f      	cmp	r7, #15
   1a630:	d908      	bls.n	1a644 <k_poll_event_init+0x34>
   1a632:	4910      	ldr	r1, [pc, #64]	; (1a674 <k_poll_event_init+0x64>)
   1a634:	4810      	ldr	r0, [pc, #64]	; (1a678 <k_poll_event_init+0x68>)
   1a636:	222f      	movs	r2, #47	; 0x2f
   1a638:	f000 fa3c 	bl	1aab4 <printk>
   1a63c:	212f      	movs	r1, #47	; 0x2f
   1a63e:	480d      	ldr	r0, [pc, #52]	; (1a674 <k_poll_event_init+0x64>)
   1a640:	f000 fcde 	bl	1b000 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   1a644:	b946      	cbnz	r6, 1a658 <k_poll_event_init+0x48>
   1a646:	490b      	ldr	r1, [pc, #44]	; (1a674 <k_poll_event_init+0x64>)
   1a648:	480b      	ldr	r0, [pc, #44]	; (1a678 <k_poll_event_init+0x68>)
   1a64a:	2230      	movs	r2, #48	; 0x30
   1a64c:	f000 fa32 	bl	1aab4 <printk>
   1a650:	2130      	movs	r1, #48	; 0x30
   1a652:	4808      	ldr	r0, [pc, #32]	; (1a674 <k_poll_event_init+0x64>)
   1a654:	f000 fcd4 	bl	1b000 <assert_post_action>
	event->poller = NULL;
   1a658:	2300      	movs	r3, #0
	event->type = type;
   1a65a:	0464      	lsls	r4, r4, #17
   1a65c:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   1a65e:	60ab      	str	r3, [r5, #8]
	event->type = type;
   1a660:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   1a664:	7b2b      	ldrb	r3, [r5, #12]
   1a666:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   1a66a:	433c      	orrs	r4, r7
   1a66c:	431c      	orrs	r4, r3
	event->obj = obj;
   1a66e:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   1a672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a674:	00022fbb 	.word	0x00022fbb
   1a678:	0002003d 	.word	0x0002003d

0001a67c <z_impl_k_poll>:
{
   1a67c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a680:	461d      	mov	r5, r3
	struct z_poller *poller = &_current->poller;
   1a682:	4b64      	ldr	r3, [pc, #400]	; (1a814 <z_impl_k_poll+0x198>)
{
   1a684:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   1a686:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
   1a688:	2301      	movs	r3, #1
{
   1a68a:	4688      	mov	r8, r1
   1a68c:	4616      	mov	r6, r2
   1a68e:	b085      	sub	sp, #20
	struct z_poller *poller = &_current->poller;
   1a690:	f107 096c 	add.w	r9, r7, #108	; 0x6c
	poller->is_polling = true;
   1a694:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	poller->mode = MODE_POLL;
   1a698:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   1a69c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1a6a0:	b153      	cbz	r3, 1a6b8 <z_impl_k_poll+0x3c>
   1a6a2:	495d      	ldr	r1, [pc, #372]	; (1a818 <z_impl_k_poll+0x19c>)
   1a6a4:	485d      	ldr	r0, [pc, #372]	; (1a81c <z_impl_k_poll+0x1a0>)
   1a6a6:	f44f 7282 	mov.w	r2, #260	; 0x104
   1a6aa:	f000 fa03 	bl	1aab4 <printk>
   1a6ae:	f44f 7182 	mov.w	r1, #260	; 0x104
   1a6b2:	4859      	ldr	r0, [pc, #356]	; (1a818 <z_impl_k_poll+0x19c>)
   1a6b4:	f000 fca4 	bl	1b000 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1a6b8:	b954      	cbnz	r4, 1a6d0 <z_impl_k_poll+0x54>
   1a6ba:	4957      	ldr	r1, [pc, #348]	; (1a818 <z_impl_k_poll+0x19c>)
   1a6bc:	4857      	ldr	r0, [pc, #348]	; (1a81c <z_impl_k_poll+0x1a0>)
   1a6be:	f240 1205 	movw	r2, #261	; 0x105
   1a6c2:	f000 f9f7 	bl	1aab4 <printk>
   1a6c6:	f240 1105 	movw	r1, #261	; 0x105
   1a6ca:	4853      	ldr	r0, [pc, #332]	; (1a818 <z_impl_k_poll+0x19c>)
   1a6cc:	f000 fc98 	bl	1b000 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1a6d0:	f1b8 0f00 	cmp.w	r8, #0
   1a6d4:	da0a      	bge.n	1a6ec <z_impl_k_poll+0x70>
   1a6d6:	4950      	ldr	r1, [pc, #320]	; (1a818 <z_impl_k_poll+0x19c>)
   1a6d8:	4850      	ldr	r0, [pc, #320]	; (1a81c <z_impl_k_poll+0x1a0>)
   1a6da:	f44f 7283 	mov.w	r2, #262	; 0x106
   1a6de:	f000 f9e9 	bl	1aab4 <printk>
   1a6e2:	f44f 7183 	mov.w	r1, #262	; 0x106
   1a6e6:	484c      	ldr	r0, [pc, #304]	; (1a818 <z_impl_k_poll+0x19c>)
   1a6e8:	f000 fc8a 	bl	1b000 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   1a6ec:	ea56 0305 	orrs.w	r3, r6, r5
   1a6f0:	bf0c      	ite	eq
   1a6f2:	2301      	moveq	r3, #1
   1a6f4:	2300      	movne	r3, #0
   1a6f6:	4641      	mov	r1, r8
   1a6f8:	464a      	mov	r2, r9
   1a6fa:	4620      	mov	r0, r4
   1a6fc:	f7ff fe2a 	bl	1a354 <register_events>
   1a700:	4680      	mov	r8, r0
   1a702:	f04f 0320 	mov.w	r3, #32
   1a706:	f3ef 8911 	mrs	r9, BASEPRI
   1a70a:	f383 8811 	msr	BASEPRI, r3
   1a70e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a712:	4843      	ldr	r0, [pc, #268]	; (1a820 <z_impl_k_poll+0x1a4>)
   1a714:	f7ff f9e2 	bl	19adc <z_spin_lock_valid>
   1a718:	b940      	cbnz	r0, 1a72c <z_impl_k_poll+0xb0>
   1a71a:	4942      	ldr	r1, [pc, #264]	; (1a824 <z_impl_k_poll+0x1a8>)
   1a71c:	483f      	ldr	r0, [pc, #252]	; (1a81c <z_impl_k_poll+0x1a0>)
   1a71e:	227c      	movs	r2, #124	; 0x7c
   1a720:	f000 f9c8 	bl	1aab4 <printk>
   1a724:	217c      	movs	r1, #124	; 0x7c
   1a726:	483f      	ldr	r0, [pc, #252]	; (1a824 <z_impl_k_poll+0x1a8>)
   1a728:	f000 fc6a 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a72c:	483c      	ldr	r0, [pc, #240]	; (1a820 <z_impl_k_poll+0x1a4>)
   1a72e:	f7ff f9f1 	bl	19b14 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   1a732:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   1a736:	b9d3      	cbnz	r3, 1a76e <z_impl_k_poll+0xf2>
		clear_event_registrations(events, events_registered, key);
   1a738:	4620      	mov	r0, r4
   1a73a:	464a      	mov	r2, r9
   1a73c:	4641      	mov	r1, r8
   1a73e:	f7ff fedd 	bl	1a4fc <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a742:	4837      	ldr	r0, [pc, #220]	; (1a820 <z_impl_k_poll+0x1a4>)
   1a744:	f7ff f9d8 	bl	19af8 <z_spin_unlock_valid>
   1a748:	b940      	cbnz	r0, 1a75c <z_impl_k_poll+0xe0>
   1a74a:	4936      	ldr	r1, [pc, #216]	; (1a824 <z_impl_k_poll+0x1a8>)
   1a74c:	4833      	ldr	r0, [pc, #204]	; (1a81c <z_impl_k_poll+0x1a0>)
   1a74e:	22a7      	movs	r2, #167	; 0xa7
   1a750:	f000 f9b0 	bl	1aab4 <printk>
   1a754:	21a7      	movs	r1, #167	; 0xa7
   1a756:	4833      	ldr	r0, [pc, #204]	; (1a824 <z_impl_k_poll+0x1a8>)
   1a758:	f000 fc52 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   1a75c:	f389 8811 	msr	BASEPRI, r9
   1a760:	f3bf 8f6f 	isb	sy
		return 0;
   1a764:	2500      	movs	r5, #0
}
   1a766:	4628      	mov	r0, r5
   1a768:	b005      	add	sp, #20
   1a76a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   1a76e:	2300      	movs	r3, #0
   1a770:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a774:	ea56 0305 	orrs.w	r3, r6, r5
   1a778:	d113      	bne.n	1a7a2 <z_impl_k_poll+0x126>
   1a77a:	4829      	ldr	r0, [pc, #164]	; (1a820 <z_impl_k_poll+0x1a4>)
   1a77c:	f7ff f9bc 	bl	19af8 <z_spin_unlock_valid>
   1a780:	b940      	cbnz	r0, 1a794 <z_impl_k_poll+0x118>
   1a782:	4928      	ldr	r1, [pc, #160]	; (1a824 <z_impl_k_poll+0x1a8>)
   1a784:	4825      	ldr	r0, [pc, #148]	; (1a81c <z_impl_k_poll+0x1a0>)
   1a786:	22a7      	movs	r2, #167	; 0xa7
   1a788:	f000 f994 	bl	1aab4 <printk>
   1a78c:	21a7      	movs	r1, #167	; 0xa7
   1a78e:	4825      	ldr	r0, [pc, #148]	; (1a824 <z_impl_k_poll+0x1a8>)
   1a790:	f000 fc36 	bl	1b000 <assert_post_action>
   1a794:	f389 8811 	msr	BASEPRI, r9
   1a798:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1a79c:	f06f 050a 	mvn.w	r5, #10
   1a7a0:	e7e1      	b.n	1a766 <z_impl_k_poll+0xea>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a7a2:	e9cd 6500 	strd	r6, r5, [sp]
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1a7a6:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a7a8:	4649      	mov	r1, r9
   1a7aa:	481d      	ldr	r0, [pc, #116]	; (1a820 <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1a7ac:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a7b0:	f7fe fd50 	bl	19254 <z_pend_curr>
   1a7b4:	4605      	mov	r5, r0
	__asm__ volatile(
   1a7b6:	f04f 0320 	mov.w	r3, #32
   1a7ba:	f3ef 8611 	mrs	r6, BASEPRI
   1a7be:	f383 8811 	msr	BASEPRI, r3
   1a7c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a7c6:	4816      	ldr	r0, [pc, #88]	; (1a820 <z_impl_k_poll+0x1a4>)
   1a7c8:	f7ff f988 	bl	19adc <z_spin_lock_valid>
   1a7cc:	b940      	cbnz	r0, 1a7e0 <z_impl_k_poll+0x164>
   1a7ce:	4915      	ldr	r1, [pc, #84]	; (1a824 <z_impl_k_poll+0x1a8>)
   1a7d0:	4812      	ldr	r0, [pc, #72]	; (1a81c <z_impl_k_poll+0x1a0>)
   1a7d2:	227c      	movs	r2, #124	; 0x7c
   1a7d4:	f000 f96e 	bl	1aab4 <printk>
   1a7d8:	217c      	movs	r1, #124	; 0x7c
   1a7da:	4812      	ldr	r0, [pc, #72]	; (1a824 <z_impl_k_poll+0x1a8>)
   1a7dc:	f000 fc10 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a7e0:	480f      	ldr	r0, [pc, #60]	; (1a820 <z_impl_k_poll+0x1a4>)
   1a7e2:	f7ff f997 	bl	19b14 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1a7e6:	4620      	mov	r0, r4
   1a7e8:	4632      	mov	r2, r6
   1a7ea:	4641      	mov	r1, r8
   1a7ec:	f7ff fe86 	bl	1a4fc <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a7f0:	480b      	ldr	r0, [pc, #44]	; (1a820 <z_impl_k_poll+0x1a4>)
   1a7f2:	f7ff f981 	bl	19af8 <z_spin_unlock_valid>
   1a7f6:	b940      	cbnz	r0, 1a80a <z_impl_k_poll+0x18e>
   1a7f8:	490a      	ldr	r1, [pc, #40]	; (1a824 <z_impl_k_poll+0x1a8>)
   1a7fa:	4808      	ldr	r0, [pc, #32]	; (1a81c <z_impl_k_poll+0x1a0>)
   1a7fc:	22a7      	movs	r2, #167	; 0xa7
   1a7fe:	f000 f959 	bl	1aab4 <printk>
   1a802:	21a7      	movs	r1, #167	; 0xa7
   1a804:	4807      	ldr	r0, [pc, #28]	; (1a824 <z_impl_k_poll+0x1a8>)
   1a806:	f000 fbfb 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   1a80a:	f386 8811 	msr	BASEPRI, r6
   1a80e:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1a812:	e7a8      	b.n	1a766 <z_impl_k_poll+0xea>
   1a814:	2000b14c 	.word	0x2000b14c
   1a818:	00022fbb 	.word	0x00022fbb
   1a81c:	0002003d 	.word	0x0002003d
   1a820:	2000b1a0 	.word	0x2000b1a0
   1a824:	00020077 	.word	0x00020077

0001a828 <z_impl_k_poll_signal_raise>:
{
   1a828:	b570      	push	{r4, r5, r6, lr}
   1a82a:	4604      	mov	r4, r0
   1a82c:	460d      	mov	r5, r1
	__asm__ volatile(
   1a82e:	f04f 0320 	mov.w	r3, #32
   1a832:	f3ef 8611 	mrs	r6, BASEPRI
   1a836:	f383 8811 	msr	BASEPRI, r3
   1a83a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a83e:	481c      	ldr	r0, [pc, #112]	; (1a8b0 <z_impl_k_poll_signal_raise+0x88>)
   1a840:	f7ff f94c 	bl	19adc <z_spin_lock_valid>
   1a844:	b940      	cbnz	r0, 1a858 <z_impl_k_poll_signal_raise+0x30>
   1a846:	491b      	ldr	r1, [pc, #108]	; (1a8b4 <z_impl_k_poll_signal_raise+0x8c>)
   1a848:	481b      	ldr	r0, [pc, #108]	; (1a8b8 <z_impl_k_poll_signal_raise+0x90>)
   1a84a:	227c      	movs	r2, #124	; 0x7c
   1a84c:	f000 f932 	bl	1aab4 <printk>
   1a850:	217c      	movs	r1, #124	; 0x7c
   1a852:	4818      	ldr	r0, [pc, #96]	; (1a8b4 <z_impl_k_poll_signal_raise+0x8c>)
   1a854:	f000 fbd4 	bl	1b000 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a858:	4815      	ldr	r0, [pc, #84]	; (1a8b0 <z_impl_k_poll_signal_raise+0x88>)
   1a85a:	f7ff f95b 	bl	19b14 <z_spin_lock_set_owner>
	signal->signaled = 1U;
   1a85e:	2101      	movs	r1, #1
	return list->head == list;
   1a860:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   1a862:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1a864:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   1a866:	60a1      	str	r1, [r4, #8]
   1a868:	d112      	bne.n	1a890 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a86a:	4811      	ldr	r0, [pc, #68]	; (1a8b0 <z_impl_k_poll_signal_raise+0x88>)
   1a86c:	f7ff f944 	bl	19af8 <z_spin_unlock_valid>
   1a870:	b940      	cbnz	r0, 1a884 <z_impl_k_poll_signal_raise+0x5c>
   1a872:	4910      	ldr	r1, [pc, #64]	; (1a8b4 <z_impl_k_poll_signal_raise+0x8c>)
   1a874:	4810      	ldr	r0, [pc, #64]	; (1a8b8 <z_impl_k_poll_signal_raise+0x90>)
   1a876:	22a7      	movs	r2, #167	; 0xa7
   1a878:	f000 f91c 	bl	1aab4 <printk>
   1a87c:	21a7      	movs	r1, #167	; 0xa7
   1a87e:	480d      	ldr	r0, [pc, #52]	; (1a8b4 <z_impl_k_poll_signal_raise+0x8c>)
   1a880:	f000 fbbe 	bl	1b000 <assert_post_action>
	__asm__ volatile(
   1a884:	f386 8811 	msr	BASEPRI, r6
   1a888:	f3bf 8f6f 	isb	sy
		return 0;
   1a88c:	2400      	movs	r4, #0
   1a88e:	e00d      	b.n	1a8ac <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   1a890:	e9d0 3200 	ldrd	r3, r2, [r0]
   1a894:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a896:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a898:	2300      	movs	r3, #0
	node->prev = NULL;
   1a89a:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1a89e:	f7ff fced 	bl	1a27c <signal_poll_event>
	z_reschedule(&lock, key);
   1a8a2:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1a8a4:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1a8a6:	4802      	ldr	r0, [pc, #8]	; (1a8b0 <z_impl_k_poll_signal_raise+0x88>)
   1a8a8:	f7fd ff96 	bl	187d8 <z_reschedule>
}
   1a8ac:	4620      	mov	r0, r4
   1a8ae:	bd70      	pop	{r4, r5, r6, pc}
   1a8b0:	2000b1a0 	.word	0x2000b1a0
   1a8b4:	00020077 	.word	0x00020077
   1a8b8:	0002003d 	.word	0x0002003d

0001a8bc <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   1a8bc:	2803      	cmp	r0, #3
{
   1a8be:	b538      	push	{r3, r4, r5, lr}
   1a8c0:	4604      	mov	r4, r0
   1a8c2:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   1a8c4:	d901      	bls.n	1a8ca <k_aligned_alloc+0xe>
   1a8c6:	0783      	lsls	r3, r0, #30
   1a8c8:	d008      	beq.n	1a8dc <k_aligned_alloc+0x20>
   1a8ca:	490e      	ldr	r1, [pc, #56]	; (1a904 <k_aligned_alloc+0x48>)
   1a8cc:	480e      	ldr	r0, [pc, #56]	; (1a908 <k_aligned_alloc+0x4c>)
   1a8ce:	223e      	movs	r2, #62	; 0x3e
   1a8d0:	f000 f8f0 	bl	1aab4 <printk>
   1a8d4:	213e      	movs	r1, #62	; 0x3e
   1a8d6:	480b      	ldr	r0, [pc, #44]	; (1a904 <k_aligned_alloc+0x48>)
   1a8d8:	f000 fb92 	bl	1b000 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   1a8dc:	1e63      	subs	r3, r4, #1
   1a8de:	4223      	tst	r3, r4
   1a8e0:	d008      	beq.n	1a8f4 <k_aligned_alloc+0x38>
   1a8e2:	4908      	ldr	r1, [pc, #32]	; (1a904 <k_aligned_alloc+0x48>)
   1a8e4:	4808      	ldr	r0, [pc, #32]	; (1a908 <k_aligned_alloc+0x4c>)
   1a8e6:	2242      	movs	r2, #66	; 0x42
   1a8e8:	f000 f8e4 	bl	1aab4 <printk>
   1a8ec:	2142      	movs	r1, #66	; 0x42
   1a8ee:	4805      	ldr	r0, [pc, #20]	; (1a904 <k_aligned_alloc+0x48>)
   1a8f0:	f000 fb86 	bl	1b000 <assert_post_action>
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1a8f4:	462a      	mov	r2, r5
   1a8f6:	4621      	mov	r1, r4
}
   1a8f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1a8fc:	4803      	ldr	r0, [pc, #12]	; (1a90c <k_aligned_alloc+0x50>)
   1a8fe:	f003 bdeb 	b.w	1e4d8 <z_heap_aligned_alloc>
   1a902:	bf00      	nop
   1a904:	00022fdc 	.word	0x00022fdc
   1a908:	0002003d 	.word	0x0002003d
   1a90c:	20008634 	.word	0x20008634

0001a910 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1a910:	b538      	push	{r3, r4, r5, lr}
   1a912:	4604      	mov	r4, r0
   1a914:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1a916:	f003 fcf2 	bl	1e2fe <k_is_in_isr>
   1a91a:	b958      	cbnz	r0, 1a934 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1a91c:	4b07      	ldr	r3, [pc, #28]	; (1a93c <z_thread_aligned_alloc+0x2c>)
   1a91e:	689b      	ldr	r3, [r3, #8]
   1a920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap) {
   1a924:	b143      	cbz	r3, 1a938 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   1a926:	462a      	mov	r2, r5
   1a928:	4621      	mov	r1, r4
   1a92a:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1a92c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1a930:	f003 bdd2 	b.w	1e4d8 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   1a934:	4b02      	ldr	r3, [pc, #8]	; (1a940 <z_thread_aligned_alloc+0x30>)
   1a936:	e7f6      	b.n	1a926 <z_thread_aligned_alloc+0x16>
}
   1a938:	bd38      	pop	{r3, r4, r5, pc}
   1a93a:	bf00      	nop
   1a93c:	2000b14c 	.word	0x2000b14c
   1a940:	20008634 	.word	0x20008634

0001a944 <_ZN13deviceManager12le_param_reqEP7bt_connP16bt_le_conn_param>:
}
   1a944:	2001      	movs	r0, #1
   1a946:	4770      	bx	lr

0001a948 <_ZN13deviceManager16le_param_updatedEP7bt_connttt>:
{}
   1a948:	4770      	bx	lr

0001a94a <_ZN13deviceManager10app_led_cbEb>:
{
   1a94a:	4601      	mov	r1, r0
    dk_set_led(USER_LED,led_state);
   1a94c:	2003      	movs	r0, #3
   1a94e:	f7fc b9eb 	b.w	16d28 <dk_set_led>

0001a952 <_ZN13deviceManager11deviceFoundEPK12bt_addr_le_tahP14net_buf_simple>:
	initScan();
   1a952:	f7ee bf5b 	b.w	980c <_ZN13deviceManager8initScanEv>

0001a956 <_ZN13deviceManager14checkAddressesEPcS0_>:

bool deviceManager::checkAddresses(char addr1[],char addr2[])
{
	uint8_t cnt = 0;
   1a956:	2300      	movs	r3, #0
{
   1a958:	b530      	push	{r4, r5, lr}
   1a95a:	1e42      	subs	r2, r0, #1
   1a95c:	3901      	subs	r1, #1
   1a95e:	3010      	adds	r0, #16
	bool retVal = false;
	for (uint8_t i = 0; i < 17; i++)
	{
		if (addr1[i] == addr2[i])
   1a960:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   1a964:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1a968:	42a5      	cmp	r5, r4
		{
			cnt++;
   1a96a:	bf04      	itt	eq
   1a96c:	3301      	addeq	r3, #1
   1a96e:	b2db      	uxtbeq	r3, r3
	for (uint8_t i = 0; i < 17; i++)
   1a970:	4282      	cmp	r2, r0
   1a972:	d1f5      	bne.n	1a960 <_ZN13deviceManager14checkAddressesEPcS0_+0xa>
	{
		cnt = 0;
		retVal = false;
	}
	return retVal;
}
   1a974:	3b11      	subs	r3, #17
   1a976:	4258      	negs	r0, r3
   1a978:	4158      	adcs	r0, r3
   1a97a:	bd30      	pop	{r4, r5, pc}

0001a97c <_ZL7on_sentP7bt_connPv>:
    const bt_addr_le_t * addr = bt_conn_get_dst(conn);
   1a97c:	f001 bd92 	b.w	1c4a4 <bt_conn_get_dst>

0001a980 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   1a980:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   1a982:	2364      	movs	r3, #100	; 0x64
{
   1a984:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   1a986:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   1a988:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1a98a:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   1a98e:	b111      	cbz	r1, 1a996 <u8_to_dec+0x16>
   1a990:	3d01      	subs	r5, #1
   1a992:	d101      	bne.n	1a998 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1a994:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   1a996:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   1a998:	fbb2 f7f3 	udiv	r7, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1a99c:	429a      	cmp	r2, r3
		digit = value / divisor;
   1a99e:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1a9a0:	d202      	bcs.n	1a9a8 <u8_to_dec+0x28>
   1a9a2:	2b01      	cmp	r3, #1
   1a9a4:	d000      	beq.n	1a9a8 <u8_to_dec+0x28>
   1a9a6:	b130      	cbz	r0, 1a9b6 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1a9a8:	3630      	adds	r6, #48	; 0x30
			buflen--;
   1a9aa:	3901      	subs	r1, #1
			num_digits++;
   1a9ac:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   1a9ae:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   1a9b2:	b2c9      	uxtb	r1, r1
			num_digits++;
   1a9b4:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   1a9b6:	fb03 2217 	mls	r2, r3, r7, r2
		divisor /= 10;
   1a9ba:	fbb3 f3fc 	udiv	r3, r3, ip
   1a9be:	b2d2      	uxtb	r2, r2
   1a9c0:	e7e5      	b.n	1a98e <u8_to_dec+0xe>

0001a9c2 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1a9c2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1a9c6:	b2db      	uxtb	r3, r3
   1a9c8:	2b09      	cmp	r3, #9
   1a9ca:	d802      	bhi.n	1a9d2 <char2hex+0x10>
		*x = c - '0';
   1a9cc:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1a9ce:	2000      	movs	r0, #0
   1a9d0:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1a9d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1a9d6:	2b05      	cmp	r3, #5
   1a9d8:	d802      	bhi.n	1a9e0 <char2hex+0x1e>
		*x = c - 'a' + 10;
   1a9da:	3857      	subs	r0, #87	; 0x57
   1a9dc:	7008      	strb	r0, [r1, #0]
   1a9de:	e7f6      	b.n	1a9ce <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1a9e0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1a9e4:	2b05      	cmp	r3, #5
   1a9e6:	d801      	bhi.n	1a9ec <char2hex+0x2a>
		*x = c - 'A' + 10;
   1a9e8:	3837      	subs	r0, #55	; 0x37
   1a9ea:	e7f7      	b.n	1a9dc <char2hex+0x1a>
		return -EINVAL;
   1a9ec:	f06f 0015 	mvn.w	r0, #21
}
   1a9f0:	4770      	bx	lr

0001a9f2 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1a9f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a9f4:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1a9f6:	f001 0001 	and.w	r0, r1, #1
   1a9fa:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1a9fe:	429d      	cmp	r5, r3
   1aa00:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1aa04:	d903      	bls.n	1aa0e <hex2bin+0x1c>
		return 0;
   1aa06:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1aa08:	4628      	mov	r0, r5
   1aa0a:	b003      	add	sp, #12
   1aa0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1aa0e:	b158      	cbz	r0, 1aa28 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1aa10:	7820      	ldrb	r0, [r4, #0]
   1aa12:	f10d 0107 	add.w	r1, sp, #7
   1aa16:	f7ff ffd4 	bl	1a9c2 <char2hex>
   1aa1a:	2800      	cmp	r0, #0
   1aa1c:	dbf3      	blt.n	1aa06 <hex2bin+0x14>
		buf[0] = dec;
   1aa1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   1aa22:	3401      	adds	r4, #1
		buf[0] = dec;
   1aa24:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1aa28:	3401      	adds	r4, #1
   1aa2a:	4416      	add	r6, r2
   1aa2c:	42b2      	cmp	r2, r6
   1aa2e:	d0eb      	beq.n	1aa08 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1aa30:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1aa34:	f10d 0107 	add.w	r1, sp, #7
   1aa38:	f7ff ffc3 	bl	1a9c2 <char2hex>
   1aa3c:	2800      	cmp	r0, #0
   1aa3e:	dbe2      	blt.n	1aa06 <hex2bin+0x14>
		buf[i] = dec << 4;
   1aa40:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1aa44:	011b      	lsls	r3, r3, #4
   1aa46:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1aa48:	f814 0b02 	ldrb.w	r0, [r4], #2
   1aa4c:	f7ff ffb9 	bl	1a9c2 <char2hex>
   1aa50:	2800      	cmp	r0, #0
   1aa52:	dbd8      	blt.n	1aa06 <hex2bin+0x14>
		buf[i] += dec;
   1aa54:	7813      	ldrb	r3, [r2, #0]
   1aa56:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1aa5a:	440b      	add	r3, r1
   1aa5c:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1aa60:	e7e4      	b.n	1aa2c <hex2bin+0x3a>

0001aa62 <sys_notify_validate>:
	if (notify == NULL) {
   1aa62:	4603      	mov	r3, r0
   1aa64:	b140      	cbz	r0, 1aa78 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1aa66:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1aa68:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1aa6c:	2a02      	cmp	r2, #2
   1aa6e:	d006      	beq.n	1aa7e <sys_notify_validate+0x1c>
   1aa70:	2a03      	cmp	r2, #3
   1aa72:	d004      	beq.n	1aa7e <sys_notify_validate+0x1c>
   1aa74:	2a01      	cmp	r2, #1
   1aa76:	d005      	beq.n	1aa84 <sys_notify_validate+0x22>
		return -EINVAL;
   1aa78:	f06f 0015 	mvn.w	r0, #21
}
   1aa7c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1aa7e:	681a      	ldr	r2, [r3, #0]
   1aa80:	2a00      	cmp	r2, #0
   1aa82:	d0f9      	beq.n	1aa78 <sys_notify_validate+0x16>
		notify->result = 0;
   1aa84:	2000      	movs	r0, #0
   1aa86:	6098      	str	r0, [r3, #8]
   1aa88:	4770      	bx	lr

0001aa8a <arch_printk_char_out>:
}
   1aa8a:	2000      	movs	r0, #0
   1aa8c:	4770      	bx	lr

0001aa8e <str_out>:
{
   1aa8e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1aa90:	688a      	ldr	r2, [r1, #8]
   1aa92:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1aa94:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1aa96:	b114      	cbz	r4, 1aa9e <str_out+0x10>
   1aa98:	684b      	ldr	r3, [r1, #4]
   1aa9a:	4293      	cmp	r3, r2
   1aa9c:	dc01      	bgt.n	1aaa2 <str_out+0x14>
		ctx->count++;
   1aa9e:	608d      	str	r5, [r1, #8]
}
   1aaa0:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1aaa2:	3b01      	subs	r3, #1
   1aaa4:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1aaa6:	bf08      	it	eq
   1aaa8:	2200      	moveq	r2, #0
   1aaaa:	608d      	str	r5, [r1, #8]
   1aaac:	bf0c      	ite	eq
   1aaae:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1aab0:	54a0      	strbne	r0, [r4, r2]
   1aab2:	e7f5      	b.n	1aaa0 <str_out+0x12>

0001aab4 <printk>:
{
   1aab4:	b40f      	push	{r0, r1, r2, r3}
   1aab6:	b507      	push	{r0, r1, r2, lr}
   1aab8:	a904      	add	r1, sp, #16
   1aaba:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1aabe:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1aac0:	f7ef ff26 	bl	a910 <vprintk>
}
   1aac4:	b003      	add	sp, #12
   1aac6:	f85d eb04 	ldr.w	lr, [sp], #4
   1aaca:	b004      	add	sp, #16
   1aacc:	4770      	bx	lr

0001aace <snprintk>:
{
   1aace:	b40c      	push	{r2, r3}
   1aad0:	b507      	push	{r0, r1, r2, lr}
   1aad2:	ab04      	add	r3, sp, #16
   1aad4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1aad8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1aada:	f7ef ff27 	bl	a92c <vsnprintk>
}
   1aade:	b003      	add	sp, #12
   1aae0:	f85d eb04 	ldr.w	lr, [sp], #4
   1aae4:	b002      	add	sp, #8
   1aae6:	4770      	bx	lr

0001aae8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1aae8:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1aaea:	f013 0307 	ands.w	r3, r3, #7
   1aaee:	d105      	bne.n	1aafc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1aaf0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1aaf2:	2b00      	cmp	r3, #0
   1aaf4:	bf0c      	ite	eq
   1aaf6:	2000      	moveq	r0, #0
   1aaf8:	2003      	movne	r0, #3
   1aafa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1aafc:	2b02      	cmp	r3, #2
   1aafe:	d105      	bne.n	1ab0c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1ab00:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   1ab02:	2b00      	cmp	r3, #0
   1ab04:	bf14      	ite	ne
   1ab06:	2000      	movne	r0, #0
   1ab08:	2004      	moveq	r0, #4
   1ab0a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1ab0c:	2b01      	cmp	r3, #1
   1ab0e:	d105      	bne.n	1ab1c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1ab10:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1ab12:	2b00      	cmp	r3, #0
   1ab14:	bf0c      	ite	eq
   1ab16:	2000      	moveq	r0, #0
   1ab18:	2005      	movne	r0, #5
   1ab1a:	4770      	bx	lr
	int evt = EVT_NOP;
   1ab1c:	2000      	movs	r0, #0
}
   1ab1e:	4770      	bx	lr

0001ab20 <notify_one>:
{
   1ab20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab24:	460d      	mov	r5, r1
   1ab26:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1ab28:	4619      	mov	r1, r3
   1ab2a:	1d28      	adds	r0, r5, #4
{
   1ab2c:	4690      	mov	r8, r2
   1ab2e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1ab30:	f7ef feb4 	bl	a89c <sys_notify_finalize>
	if (cb) {
   1ab34:	4604      	mov	r4, r0
   1ab36:	b138      	cbz	r0, 1ab48 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1ab38:	4633      	mov	r3, r6
   1ab3a:	4642      	mov	r2, r8
   1ab3c:	4629      	mov	r1, r5
   1ab3e:	4638      	mov	r0, r7
   1ab40:	46a4      	mov	ip, r4
}
   1ab42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1ab46:	4760      	bx	ip
}
   1ab48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ab4c <validate_args>:
{
   1ab4c:	b510      	push	{r4, lr}
   1ab4e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1ab50:	b140      	cbz	r0, 1ab64 <validate_args+0x18>
   1ab52:	b139      	cbz	r1, 1ab64 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1ab54:	1d08      	adds	r0, r1, #4
   1ab56:	f7ff ff84 	bl	1aa62 <sys_notify_validate>
	if ((rv == 0)
   1ab5a:	b928      	cbnz	r0, 1ab68 <validate_args+0x1c>
	    && ((cli->notify.flags
   1ab5c:	68a3      	ldr	r3, [r4, #8]
   1ab5e:	f033 0303 	bics.w	r3, r3, #3
   1ab62:	d001      	beq.n	1ab68 <validate_args+0x1c>
		rv = -EINVAL;
   1ab64:	f06f 0015 	mvn.w	r0, #21
}
   1ab68:	bd10      	pop	{r4, pc}

0001ab6a <onoff_manager_init>:
{
   1ab6a:	b538      	push	{r3, r4, r5, lr}
   1ab6c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1ab6e:	4605      	mov	r5, r0
   1ab70:	b158      	cbz	r0, 1ab8a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1ab72:	b151      	cbz	r1, 1ab8a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1ab74:	680b      	ldr	r3, [r1, #0]
   1ab76:	b143      	cbz	r3, 1ab8a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1ab78:	684b      	ldr	r3, [r1, #4]
   1ab7a:	b133      	cbz	r3, 1ab8a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1ab7c:	2220      	movs	r2, #32
   1ab7e:	2100      	movs	r1, #0
   1ab80:	f001 fa07 	bl	1bf92 <memset>
	return 0;
   1ab84:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1ab86:	612c      	str	r4, [r5, #16]
}
   1ab88:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1ab8a:	f06f 0015 	mvn.w	r0, #21
   1ab8e:	e7fb      	b.n	1ab88 <onoff_manager_init+0x1e>

0001ab90 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1ab90:	4604      	mov	r4, r0
   1ab92:	b508      	push	{r3, lr}
   1ab94:	4608      	mov	r0, r1
   1ab96:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1ab98:	461a      	mov	r2, r3
   1ab9a:	47a0      	blx	r4
	return z_impl_k_current_get();
   1ab9c:	f7fe fdac 	bl	196f8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1aba0:	f7f3 fb74 	bl	e28c <z_impl_k_thread_abort>

0001aba4 <chunk_field>:
	if (big_heap(h)) {
   1aba4:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1aba6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1abaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1abae:	bf2c      	ite	cs
   1abb0:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   1abb4:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   1abb8:	4770      	bx	lr

0001abba <chunk_set>:
	void *cmem = &buf[c];
   1abba:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1abbe:	6880      	ldr	r0, [r0, #8]
   1abc0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   1abc4:	bf2c      	ite	cs
   1abc6:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1abca:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   1abce:	4770      	bx	lr

0001abd0 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1abd0:	2201      	movs	r2, #1
{
   1abd2:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1abd4:	f7ff ffe6 	bl	1aba4 <chunk_field>
}
   1abd8:	40d0      	lsrs	r0, r2
   1abda:	bd08      	pop	{r3, pc}

0001abdc <set_chunk_used>:
	if (big_heap(h)) {
   1abdc:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1abde:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1abe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1abe6:	d308      	bcc.n	1abfa <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1abe8:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1abea:	b11a      	cbz	r2, 1abf4 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1abec:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1abf0:	604b      	str	r3, [r1, #4]
   1abf2:	4770      	bx	lr
   1abf4:	f023 0301 	bic.w	r3, r3, #1
   1abf8:	e7fa      	b.n	1abf0 <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1abfa:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   1abfc:	b11a      	cbz	r2, 1ac06 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1abfe:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1ac02:	804b      	strh	r3, [r1, #2]
}
   1ac04:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1ac06:	f023 0301 	bic.w	r3, r3, #1
   1ac0a:	e7fa      	b.n	1ac02 <set_chunk_used+0x26>

0001ac0c <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1ac0c:	0053      	lsls	r3, r2, #1
   1ac0e:	2201      	movs	r2, #1
   1ac10:	f7ff bfd3 	b.w	1abba <chunk_set>

0001ac14 <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
   1ac14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1ac18:	bf2c      	ite	cs
   1ac1a:	2008      	movcs	r0, #8
   1ac1c:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1ac1e:	3107      	adds	r1, #7
   1ac20:	4408      	add	r0, r1
}

static inline size_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
	return chunksz(chunk_header_bytes(h) + bytes);
}
   1ac22:	08c0      	lsrs	r0, r0, #3
   1ac24:	4770      	bx	lr

0001ac26 <bucket_idx.isra.0>:
static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
   1ac26:	b508      	push	{r3, lr}
   1ac28:	460b      	mov	r3, r1
   1ac2a:	2101      	movs	r1, #1
   1ac2c:	f7ff fff2 	bl	1ac14 <bytes_to_chunksz.isra.0>
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1ac30:	3301      	adds	r3, #1
   1ac32:	1a1b      	subs	r3, r3, r0
	return 31 - __builtin_clz(usable_sz);
   1ac34:	fab3 f083 	clz	r0, r3
}
   1ac38:	f1c0 001f 	rsb	r0, r0, #31
   1ac3c:	bd08      	pop	{r3, pc}

0001ac3e <free_list_remove_bidx>:
{
   1ac3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac42:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1ac44:	2203      	movs	r2, #3
   1ac46:	460e      	mov	r6, r1
   1ac48:	4604      	mov	r4, r0
   1ac4a:	f7ff ffab 	bl	1aba4 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1ac4e:	4286      	cmp	r6, r0
   1ac50:	4605      	mov	r5, r0
   1ac52:	f107 0804 	add.w	r8, r7, #4
   1ac56:	d10b      	bne.n	1ac70 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1ac58:	2301      	movs	r3, #1
   1ac5a:	fa03 f707 	lsl.w	r7, r3, r7
   1ac5e:	68e3      	ldr	r3, [r4, #12]
   1ac60:	ea23 0307 	bic.w	r3, r3, r7
   1ac64:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1ac66:	2300      	movs	r3, #0
   1ac68:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1ac6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1ac70:	4631      	mov	r1, r6
   1ac72:	2202      	movs	r2, #2
   1ac74:	4620      	mov	r0, r4
   1ac76:	f7ff ff95 	bl	1aba4 <chunk_field>
   1ac7a:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1ac7c:	462b      	mov	r3, r5
   1ac7e:	4601      	mov	r1, r0
   1ac80:	2203      	movs	r2, #3
   1ac82:	4620      	mov	r0, r4
		b->next = second;
   1ac84:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1ac88:	f7ff ff97 	bl	1abba <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1ac8c:	4633      	mov	r3, r6
   1ac8e:	4629      	mov	r1, r5
   1ac90:	4620      	mov	r0, r4
}
   1ac92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ac96:	2202      	movs	r2, #2
   1ac98:	f7ff bf8f 	b.w	1abba <chunk_set>

0001ac9c <free_list_remove>:
{
   1ac9c:	b570      	push	{r4, r5, r6, lr}
   1ac9e:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1aca0:	6886      	ldr	r6, [r0, #8]
   1aca2:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1aca4:	f7ff ff94 	bl	1abd0 <chunk_size>
   1aca8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1acac:	4601      	mov	r1, r0
   1acae:	d301      	bcc.n	1acb4 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1acb0:	2801      	cmp	r0, #1
   1acb2:	d009      	beq.n	1acc8 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1acb4:	4630      	mov	r0, r6
   1acb6:	f7ff ffb6 	bl	1ac26 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1acba:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1acbc:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1acbe:	4620      	mov	r0, r4
}
   1acc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   1acc4:	f7ff bfbb 	b.w	1ac3e <free_list_remove_bidx>
}
   1acc8:	bd70      	pop	{r4, r5, r6, pc}

0001acca <alloc_chunk>:
{
   1acca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1acce:	6886      	ldr	r6, [r0, #8]
   1acd0:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   1acd2:	4630      	mov	r0, r6
{
   1acd4:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1acd6:	f7ff ffa6 	bl	1ac26 <bucket_idx.isra.0>
	if (bi > bucket_idx(h, h->len)) {
   1acda:	4631      	mov	r1, r6
	int bi = bucket_idx(h, sz);
   1acdc:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1acde:	4630      	mov	r0, r6
   1ace0:	f7ff ffa1 	bl	1ac26 <bucket_idx.isra.0>
   1ace4:	42a8      	cmp	r0, r5
   1ace6:	da03      	bge.n	1acf0 <alloc_chunk+0x26>
		return 0;
   1ace8:	2600      	movs	r6, #0
}
   1acea:	4630      	mov	r0, r6
   1acec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1acf0:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1acf4:	f8da 9010 	ldr.w	r9, [sl, #16]
   1acf8:	f1b9 0f00 	cmp.w	r9, #0
   1acfc:	d019      	beq.n	1ad32 <alloc_chunk+0x68>
   1acfe:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1ad00:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1ad04:	4620      	mov	r0, r4
   1ad06:	4631      	mov	r1, r6
   1ad08:	f7ff ff62 	bl	1abd0 <chunk_size>
   1ad0c:	4540      	cmp	r0, r8
   1ad0e:	d305      	bcc.n	1ad1c <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   1ad10:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1ad12:	4631      	mov	r1, r6
   1ad14:	4620      	mov	r0, r4
   1ad16:	f7ff ff92 	bl	1ac3e <free_list_remove_bidx>
		return c;
   1ad1a:	e7e6      	b.n	1acea <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   1ad1c:	2203      	movs	r2, #3
   1ad1e:	4631      	mov	r1, r6
   1ad20:	4620      	mov	r0, r4
   1ad22:	f7ff ff3f 	bl	1aba4 <chunk_field>
		} while (--i && b->next != first);
   1ad26:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1ad28:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1ad2c:	d001      	beq.n	1ad32 <alloc_chunk+0x68>
   1ad2e:	4581      	cmp	r9, r0
   1ad30:	d1e6      	bne.n	1ad00 <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1ad32:	f04f 32ff 	mov.w	r2, #4294967295
   1ad36:	68e3      	ldr	r3, [r4, #12]
   1ad38:	3501      	adds	r5, #1
   1ad3a:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1ad3c:	401a      	ands	r2, r3
   1ad3e:	d0d3      	beq.n	1ace8 <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1ad40:	fa92 f2a2 	rbit	r2, r2
   1ad44:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1ad48:	1d13      	adds	r3, r2, #4
   1ad4a:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1ad4e:	e7e0      	b.n	1ad12 <alloc_chunk+0x48>

0001ad50 <split_chunks>:
{
   1ad50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad54:	4614      	mov	r4, r2
   1ad56:	460e      	mov	r6, r1
   1ad58:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   1ad5a:	f7ff ff39 	bl	1abd0 <chunk_size>
	size_t lsz = rc - lc;
   1ad5e:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1ad62:	1b37      	subs	r7, r6, r4
   1ad64:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1ad66:	4642      	mov	r2, r8
   1ad68:	4631      	mov	r1, r6
   1ad6a:	4628      	mov	r0, r5
   1ad6c:	f7ff ff4e 	bl	1ac0c <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1ad70:	463a      	mov	r2, r7
   1ad72:	4621      	mov	r1, r4
   1ad74:	4628      	mov	r0, r5
   1ad76:	f7ff ff49 	bl	1ac0c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ad7a:	4643      	mov	r3, r8
   1ad7c:	2200      	movs	r2, #0
   1ad7e:	4621      	mov	r1, r4
   1ad80:	4628      	mov	r0, r5
   1ad82:	f7ff ff1a 	bl	1abba <chunk_set>
	return c + chunk_size(h, c);
   1ad86:	4621      	mov	r1, r4
   1ad88:	4628      	mov	r0, r5
   1ad8a:	f7ff ff21 	bl	1abd0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ad8e:	463b      	mov	r3, r7
   1ad90:	1821      	adds	r1, r4, r0
   1ad92:	2200      	movs	r2, #0
   1ad94:	4628      	mov	r0, r5
}
   1ad96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ad9a:	f7ff bf0e 	b.w	1abba <chunk_set>

0001ad9e <merge_chunks>:
{
   1ad9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ada2:	4616      	mov	r6, r2
   1ada4:	4604      	mov	r4, r0
   1ada6:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1ada8:	f7ff ff12 	bl	1abd0 <chunk_size>
   1adac:	4631      	mov	r1, r6
   1adae:	4605      	mov	r5, r0
   1adb0:	4620      	mov	r0, r4
   1adb2:	f7ff ff0d 	bl	1abd0 <chunk_size>
   1adb6:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1adb8:	462a      	mov	r2, r5
   1adba:	4639      	mov	r1, r7
   1adbc:	4620      	mov	r0, r4
   1adbe:	f7ff ff25 	bl	1ac0c <set_chunk_size>
	return c + chunk_size(h, c);
   1adc2:	4631      	mov	r1, r6
   1adc4:	4620      	mov	r0, r4
   1adc6:	f7ff ff03 	bl	1abd0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1adca:	462b      	mov	r3, r5
   1adcc:	1831      	adds	r1, r6, r0
   1adce:	2200      	movs	r2, #0
   1add0:	4620      	mov	r0, r4
}
   1add2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1add6:	f7ff bef0 	b.w	1abba <chunk_set>

0001adda <free_list_add>:
{
   1adda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1adde:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1ade0:	6886      	ldr	r6, [r0, #8]
   1ade2:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1ade4:	f7ff fef4 	bl	1abd0 <chunk_size>
   1ade8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1adec:	4601      	mov	r1, r0
   1adee:	d301      	bcc.n	1adf4 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1adf0:	2801      	cmp	r0, #1
   1adf2:	d033      	beq.n	1ae5c <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1adf4:	4630      	mov	r0, r6
   1adf6:	f7ff ff16 	bl	1ac26 <bucket_idx.isra.0>
	if (b->next == 0U) {
   1adfa:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1adfe:	6916      	ldr	r6, [r2, #16]
   1ae00:	b99e      	cbnz	r6, 1ae2a <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1ae02:	2301      	movs	r3, #1
   1ae04:	fa03 f000 	lsl.w	r0, r3, r0
   1ae08:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1ae0a:	4629      	mov	r1, r5
   1ae0c:	4303      	orrs	r3, r0
   1ae0e:	60e3      	str	r3, [r4, #12]
   1ae10:	4620      	mov	r0, r4
		b->next = c;
   1ae12:	6115      	str	r5, [r2, #16]
   1ae14:	462b      	mov	r3, r5
   1ae16:	2202      	movs	r2, #2
   1ae18:	f7ff fecf 	bl	1abba <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1ae1c:	2203      	movs	r2, #3
   1ae1e:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1ae20:	4620      	mov	r0, r4
}
   1ae22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ae26:	f7ff bec8 	b.w	1abba <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1ae2a:	2202      	movs	r2, #2
   1ae2c:	4631      	mov	r1, r6
   1ae2e:	4620      	mov	r0, r4
   1ae30:	f7ff feb8 	bl	1aba4 <chunk_field>
   1ae34:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1ae36:	4603      	mov	r3, r0
   1ae38:	4629      	mov	r1, r5
   1ae3a:	4620      	mov	r0, r4
   1ae3c:	f7ff febd 	bl	1abba <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1ae40:	2203      	movs	r2, #3
   1ae42:	4633      	mov	r3, r6
   1ae44:	4629      	mov	r1, r5
   1ae46:	4620      	mov	r0, r4
   1ae48:	f7ff feb7 	bl	1abba <chunk_set>
   1ae4c:	4639      	mov	r1, r7
   1ae4e:	462b      	mov	r3, r5
   1ae50:	4620      	mov	r0, r4
   1ae52:	f7ff feb2 	bl	1abba <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1ae56:	2202      	movs	r2, #2
   1ae58:	4631      	mov	r1, r6
   1ae5a:	e7e1      	b.n	1ae20 <free_list_add+0x46>
   1ae5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ae60 <free_chunk>:
{
   1ae60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ae62:	460c      	mov	r4, r1
   1ae64:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1ae66:	f7ff feb3 	bl	1abd0 <chunk_size>
   1ae6a:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1ae6c:	2201      	movs	r2, #1
   1ae6e:	4631      	mov	r1, r6
   1ae70:	4628      	mov	r0, r5
   1ae72:	f7ff fe97 	bl	1aba4 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1ae76:	07c3      	lsls	r3, r0, #31
   1ae78:	d40c      	bmi.n	1ae94 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1ae7a:	4631      	mov	r1, r6
   1ae7c:	4628      	mov	r0, r5
   1ae7e:	f7ff ff0d 	bl	1ac9c <free_list_remove>
	return c + chunk_size(h, c);
   1ae82:	4621      	mov	r1, r4
   1ae84:	4628      	mov	r0, r5
   1ae86:	f7ff fea3 	bl	1abd0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1ae8a:	4621      	mov	r1, r4
   1ae8c:	1822      	adds	r2, r4, r0
   1ae8e:	4628      	mov	r0, r5
   1ae90:	f7ff ff85 	bl	1ad9e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1ae94:	2200      	movs	r2, #0
   1ae96:	4621      	mov	r1, r4
   1ae98:	4628      	mov	r0, r5
   1ae9a:	f7ff fe83 	bl	1aba4 <chunk_field>
   1ae9e:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1aea0:	2201      	movs	r2, #1
   1aea2:	4639      	mov	r1, r7
   1aea4:	4628      	mov	r0, r5
   1aea6:	f7ff fe7d 	bl	1aba4 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1aeaa:	ea10 0602 	ands.w	r6, r0, r2
   1aeae:	d113      	bne.n	1aed8 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1aeb0:	4639      	mov	r1, r7
   1aeb2:	4628      	mov	r0, r5
   1aeb4:	f7ff fef2 	bl	1ac9c <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1aeb8:	4621      	mov	r1, r4
   1aeba:	4632      	mov	r2, r6
   1aebc:	4628      	mov	r0, r5
   1aebe:	f7ff fe71 	bl	1aba4 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1aec2:	4622      	mov	r2, r4
   1aec4:	1a21      	subs	r1, r4, r0
   1aec6:	4628      	mov	r0, r5
   1aec8:	f7ff ff69 	bl	1ad9e <merge_chunks>
   1aecc:	4621      	mov	r1, r4
   1aece:	4632      	mov	r2, r6
   1aed0:	4628      	mov	r0, r5
   1aed2:	f7ff fe67 	bl	1aba4 <chunk_field>
   1aed6:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1aed8:	4621      	mov	r1, r4
   1aeda:	4628      	mov	r0, r5
}
   1aedc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1aee0:	f7ff bf7b 	b.w	1adda <free_list_add>

0001aee4 <sys_heap_alloc>:
{
   1aee4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1aee6:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1aee8:	b909      	cbnz	r1, 1aeee <sys_heap_alloc+0xa>
		return NULL;
   1aeea:	2000      	movs	r0, #0
}
   1aeec:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   1aeee:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1aef0:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
   1aef4:	d9f9      	bls.n	1aeea <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1aef6:	f7ff fe8d 	bl	1ac14 <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1aefa:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1aefc:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1aefe:	4630      	mov	r0, r6
   1af00:	f7ff fee3 	bl	1acca <alloc_chunk>
	if (c == 0U) {
   1af04:	4604      	mov	r4, r0
   1af06:	2800      	cmp	r0, #0
   1af08:	d0ef      	beq.n	1aeea <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1af0a:	4601      	mov	r1, r0
   1af0c:	4630      	mov	r0, r6
   1af0e:	f7ff fe5f 	bl	1abd0 <chunk_size>
   1af12:	42a8      	cmp	r0, r5
   1af14:	d909      	bls.n	1af2a <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
   1af16:	4425      	add	r5, r4
   1af18:	4621      	mov	r1, r4
   1af1a:	4630      	mov	r0, r6
   1af1c:	462a      	mov	r2, r5
   1af1e:	f7ff ff17 	bl	1ad50 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1af22:	4629      	mov	r1, r5
   1af24:	4630      	mov	r0, r6
   1af26:	f7ff ff58 	bl	1adda <free_list_add>
	set_chunk_used(h, c, true);
   1af2a:	4621      	mov	r1, r4
   1af2c:	4630      	mov	r0, r6
   1af2e:	2201      	movs	r2, #1
   1af30:	f7ff fe54 	bl	1abdc <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1af34:	68b3      	ldr	r3, [r6, #8]
   1af36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1af3a:	bf2c      	ite	cs
   1af3c:	2308      	movcs	r3, #8
   1af3e:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1af40:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1af44:	4420      	add	r0, r4
	return chunk_mem(h, c);
   1af46:	e7d1      	b.n	1aeec <sys_heap_alloc+0x8>

0001af48 <encode_uint>:
{
   1af48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af4c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1af4e:	78d3      	ldrb	r3, [r2, #3]
{
   1af50:	4680      	mov	r8, r0
	switch (specifier) {
   1af52:	2b6f      	cmp	r3, #111	; 0x6f
{
   1af54:	460f      	mov	r7, r1
   1af56:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1af58:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1af5c:	d029      	beq.n	1afb2 <encode_uint+0x6a>
   1af5e:	d824      	bhi.n	1afaa <encode_uint+0x62>
		return 16;
   1af60:	2b58      	cmp	r3, #88	; 0x58
   1af62:	bf14      	ite	ne
   1af64:	260a      	movne	r6, #10
   1af66:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1af68:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1af6c:	4632      	mov	r2, r6
   1af6e:	2300      	movs	r3, #0
   1af70:	4640      	mov	r0, r8
   1af72:	4639      	mov	r1, r7
   1af74:	f7ed fdda 	bl	8b2c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1af78:	2a09      	cmp	r2, #9
   1af7a:	b2d4      	uxtb	r4, r2
   1af7c:	d81e      	bhi.n	1afbc <encode_uint+0x74>
   1af7e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1af80:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1af82:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1af84:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1af88:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1af8c:	d301      	bcc.n	1af92 <encode_uint+0x4a>
   1af8e:	45d1      	cmp	r9, sl
   1af90:	d811      	bhi.n	1afb6 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1af92:	782b      	ldrb	r3, [r5, #0]
   1af94:	069b      	lsls	r3, r3, #26
   1af96:	d505      	bpl.n	1afa4 <encode_uint+0x5c>
		if (radix == 8) {
   1af98:	2e08      	cmp	r6, #8
   1af9a:	d115      	bne.n	1afc8 <encode_uint+0x80>
			conv->altform_0 = true;
   1af9c:	78ab      	ldrb	r3, [r5, #2]
   1af9e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1afa2:	70ab      	strb	r3, [r5, #2]
}
   1afa4:	4648      	mov	r0, r9
   1afa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1afaa:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1afae:	2b70      	cmp	r3, #112	; 0x70
   1afb0:	e7d7      	b.n	1af62 <encode_uint+0x1a>
	switch (specifier) {
   1afb2:	2608      	movs	r6, #8
   1afb4:	e7d8      	b.n	1af68 <encode_uint+0x20>
		value /= radix;
   1afb6:	4680      	mov	r8, r0
   1afb8:	460f      	mov	r7, r1
   1afba:	e7d7      	b.n	1af6c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1afbc:	f1bb 0f19 	cmp.w	fp, #25
   1afc0:	bf94      	ite	ls
   1afc2:	3437      	addls	r4, #55	; 0x37
   1afc4:	3457      	addhi	r4, #87	; 0x57
   1afc6:	e7db      	b.n	1af80 <encode_uint+0x38>
		} else if (radix == 16) {
   1afc8:	2e10      	cmp	r6, #16
   1afca:	d1eb      	bne.n	1afa4 <encode_uint+0x5c>
			conv->altform_0c = true;
   1afcc:	78ab      	ldrb	r3, [r5, #2]
   1afce:	f043 0310 	orr.w	r3, r3, #16
   1afd2:	e7e6      	b.n	1afa2 <encode_uint+0x5a>

0001afd4 <outs>:
{
   1afd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afd8:	4607      	mov	r7, r0
   1afda:	4688      	mov	r8, r1
   1afdc:	4615      	mov	r5, r2
   1afde:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1afe0:	4614      	mov	r4, r2
   1afe2:	42b4      	cmp	r4, r6
   1afe4:	eba4 0005 	sub.w	r0, r4, r5
   1afe8:	d302      	bcc.n	1aff0 <outs+0x1c>
   1afea:	b93e      	cbnz	r6, 1affc <outs+0x28>
   1afec:	7823      	ldrb	r3, [r4, #0]
   1afee:	b12b      	cbz	r3, 1affc <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1aff0:	4641      	mov	r1, r8
   1aff2:	f814 0b01 	ldrb.w	r0, [r4], #1
   1aff6:	47b8      	blx	r7
		if (rc < 0) {
   1aff8:	2800      	cmp	r0, #0
   1affa:	daf2      	bge.n	1afe2 <outs+0xe>
}
   1affc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b000 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1b000:	4040      	eors	r0, r0
   1b002:	f380 8811 	msr	BASEPRI, r0
   1b006:	f04f 0004 	mov.w	r0, #4
   1b00a:	df02      	svc	2
}
   1b00c:	4770      	bx	lr

0001b00e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1b00e:	4770      	bx	lr

0001b010 <nordicsemi_nrf53_init>:
	__asm__ volatile(
   1b010:	f04f 0320 	mov.w	r3, #32
   1b014:	f3ef 8111 	mrs	r1, BASEPRI
   1b018:	f383 8811 	msr	BASEPRI, r3
   1b01c:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1b020:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1b024:	2201      	movs	r2, #1
   1b026:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1b02a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   1b02e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   1b032:	f381 8811 	msr	BASEPRI, r1
   1b036:	f3bf 8f6f 	isb	sy
}
   1b03a:	2000      	movs	r0, #0
   1b03c:	4770      	bx	lr

0001b03e <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1b03e:	f002 bcb0 	b.w	1d9a2 <SystemInit>

0001b042 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1b042:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1b046:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1b04a:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1b04c:	4640      	mov	r0, r8
{
   1b04e:	461f      	mov	r7, r3
   1b050:	460c      	mov	r4, r1
   1b052:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1b054:	f000 ff34 	bl	1bec0 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1b058:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1b05c:	b280      	uxth	r0, r0
   1b05e:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1b062:	9300      	str	r3, [sp, #0]
   1b064:	4632      	mov	r2, r6
   1b066:	463b      	mov	r3, r7
   1b068:	4621      	mov	r1, r4
   1b06a:	4628      	mov	r0, r5
   1b06c:	f002 f8f6 	bl	1d25c <bt_gatt_attr_read>
}
   1b070:	b004      	add	sp, #16
   1b072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b076 <virtio_get_status>:
}
   1b076:	2004      	movs	r0, #4
   1b078:	4770      	bx	lr

0001b07a <virtio_get_features>:
}
   1b07a:	2001      	movs	r0, #1
   1b07c:	4770      	bx	lr

0001b07e <virtio_set_features>:
}
   1b07e:	4770      	bx	lr

0001b080 <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
   1b080:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
   1b082:	21b4      	movs	r1, #180	; 0xb4
   1b084:	2004      	movs	r0, #4
   1b086:	f7ff fc19 	bl	1a8bc <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1b08a:	4604      	mov	r4, r0
   1b08c:	b118      	cbz	r0, 1b096 <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
   1b08e:	22b4      	movs	r2, #180	; 0xb4
   1b090:	2100      	movs	r1, #0
   1b092:	f000 ff7e 	bl	1bf92 <memset>
	}

	return vqs;
}
   1b096:	4620      	mov	r0, r4
   1b098:	bd10      	pop	{r4, pc}

0001b09a <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1b09a:	f002 bf91 	b.w	1dfc0 <rpmsg_destroy_ept>

0001b09e <settings_load>:
	return settings_load_subtree(NULL);
   1b09e:	2000      	movs	r0, #0
   1b0a0:	f7f0 bde4 	b.w	bc6c <settings_load_subtree>

0001b0a4 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1b0a4:	2200      	movs	r2, #0
   1b0a6:	4611      	mov	r1, r2
   1b0a8:	f7f0 bdba 	b.w	bc20 <settings_save_one>

0001b0ac <settings_name_steq>:
{
   1b0ac:	4603      	mov	r3, r0
   1b0ae:	b530      	push	{r4, r5, lr}
   1b0b0:	4608      	mov	r0, r1
	if (next) {
   1b0b2:	b10a      	cbz	r2, 1b0b8 <settings_name_steq+0xc>
		*next = NULL;
   1b0b4:	2100      	movs	r1, #0
   1b0b6:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1b0b8:	b163      	cbz	r3, 1b0d4 <settings_name_steq+0x28>
   1b0ba:	b190      	cbz	r0, 1b0e2 <settings_name_steq+0x36>
   1b0bc:	1e41      	subs	r1, r0, #1
   1b0be:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1b0c0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1b0c4:	4604      	mov	r4, r0
   1b0c6:	f810 3b01 	ldrb.w	r3, [r0], #1
   1b0ca:	b15d      	cbz	r5, 1b0e4 <settings_name_steq+0x38>
   1b0cc:	429d      	cmp	r5, r3
   1b0ce:	d101      	bne.n	1b0d4 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1b0d0:	2d3d      	cmp	r5, #61	; 0x3d
   1b0d2:	d1f5      	bne.n	1b0c0 <settings_name_steq+0x14>
	return 0;
   1b0d4:	2000      	movs	r0, #0
   1b0d6:	e004      	b.n	1b0e2 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1b0d8:	2b3d      	cmp	r3, #61	; 0x3d
   1b0da:	d008      	beq.n	1b0ee <settings_name_steq+0x42>
   1b0dc:	fab3 f083 	clz	r0, r3
   1b0e0:	0940      	lsrs	r0, r0, #5
}
   1b0e2:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1b0e4:	2b2f      	cmp	r3, #47	; 0x2f
   1b0e6:	d1f7      	bne.n	1b0d8 <settings_name_steq+0x2c>
		if (next) {
   1b0e8:	b10a      	cbz	r2, 1b0ee <settings_name_steq+0x42>
			*next = name + 1;
   1b0ea:	3401      	adds	r4, #1
   1b0ec:	6014      	str	r4, [r2, #0]
		return 1;
   1b0ee:	2001      	movs	r0, #1
   1b0f0:	e7f7      	b.n	1b0e2 <settings_name_steq+0x36>

0001b0f2 <settings_name_next>:
{
   1b0f2:	4603      	mov	r3, r0
   1b0f4:	b530      	push	{r4, r5, lr}
	if (next) {
   1b0f6:	b109      	cbz	r1, 1b0fc <settings_name_next+0xa>
		*next = NULL;
   1b0f8:	2200      	movs	r2, #0
   1b0fa:	600a      	str	r2, [r1, #0]
	if (!name) {
   1b0fc:	b16b      	cbz	r3, 1b11a <settings_name_next+0x28>
   1b0fe:	461a      	mov	r2, r3
   1b100:	4614      	mov	r4, r2
   1b102:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1b104:	f812 5b01 	ldrb.w	r5, [r2], #1
   1b108:	b135      	cbz	r5, 1b118 <settings_name_next+0x26>
   1b10a:	2d3d      	cmp	r5, #61	; 0x3d
   1b10c:	d004      	beq.n	1b118 <settings_name_next+0x26>
   1b10e:	2d2f      	cmp	r5, #47	; 0x2f
   1b110:	d1f6      	bne.n	1b100 <settings_name_next+0xe>
		if (next) {
   1b112:	b109      	cbz	r1, 1b118 <settings_name_next+0x26>
			*next = name + 1;
   1b114:	3401      	adds	r4, #1
   1b116:	600c      	str	r4, [r1, #0]
}
   1b118:	bd30      	pop	{r4, r5, pc}
		return 0;
   1b11a:	4618      	mov	r0, r3
   1b11c:	e7fc      	b.n	1b118 <settings_name_next+0x26>

0001b11e <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   1b11e:	2000      	movs	r0, #0
   1b120:	4770      	bx	lr

0001b122 <set_on_state>:
	__asm__ volatile(
   1b122:	f04f 0320 	mov.w	r3, #32
   1b126:	f3ef 8211 	mrs	r2, BASEPRI
   1b12a:	f383 8811 	msr	BASEPRI, r3
   1b12e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1b132:	6803      	ldr	r3, [r0, #0]
   1b134:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1b138:	f043 0302 	orr.w	r3, r3, #2
   1b13c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1b13e:	f382 8811 	msr	BASEPRI, r2
   1b142:	f3bf 8f6f 	isb	sy
}
   1b146:	4770      	bx	lr

0001b148 <async_start>:
{
   1b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b14a:	9f06      	ldr	r7, [sp, #24]
   1b14c:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   1b14e:	68c4      	ldr	r4, [r0, #12]
	return &data->subsys[type];
   1b150:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1b152:	f04f 0020 	mov.w	r0, #32
   1b156:	f3ef 8c11 	mrs	ip, BASEPRI
   1b15a:	f380 8811 	msr	BASEPRI, r0
   1b15e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1b162:	260c      	movs	r6, #12
   1b164:	fb06 4601 	mla	r6, r6, r1, r4
   1b168:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1b16c:	f000 0e07 	and.w	lr, r0, #7
   1b170:	f1be 0f01 	cmp.w	lr, #1
   1b174:	d111      	bne.n	1b19a <async_start+0x52>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1b176:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
	int err = 0;
   1b17a:	2600      	movs	r6, #0
	__asm__ volatile(
   1b17c:	f38c 8811 	msr	BASEPRI, ip
   1b180:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1b184:	b93e      	cbnz	r6, 1b196 <async_start+0x4e>
	subdata->cb = cb;
   1b186:	200c      	movs	r0, #12
   1b188:	4341      	muls	r1, r0
   1b18a:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1b18c:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1b190:	686b      	ldr	r3, [r5, #4]
   1b192:	585b      	ldr	r3, [r3, r1]
   1b194:	4798      	blx	r3
}
   1b196:	4630      	mov	r0, r6
   1b198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1b19a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1b19e:	4287      	cmp	r7, r0
   1b1a0:	bf14      	ite	ne
   1b1a2:	f04f 36ff 	movne.w	r6, #4294967295
   1b1a6:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   1b1aa:	e7e7      	b.n	1b17c <async_start+0x34>

0001b1ac <api_start>:
{
   1b1ac:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1b1ae:	2480      	movs	r4, #128	; 0x80
   1b1b0:	9400      	str	r4, [sp, #0]
   1b1b2:	f7ff ffc9 	bl	1b148 <async_start>
}
   1b1b6:	b002      	add	sp, #8
   1b1b8:	bd10      	pop	{r4, pc}

0001b1ba <onoff_started_callback>:
	return &data->mgr[type];
   1b1ba:	68c0      	ldr	r0, [r0, #12]
   1b1bc:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1b1be:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1b1c2:	2100      	movs	r1, #0
   1b1c4:	4710      	bx	r2

0001b1c6 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1b1c6:	2003      	movs	r0, #3
   1b1c8:	f7fb be82 	b.w	16ed0 <nrfx_clock_start>

0001b1cc <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1b1cc:	2002      	movs	r0, #2
   1b1ce:	f7fb be7f 	b.w	16ed0 <nrfx_clock_start>

0001b1d2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1b1d2:	2000      	movs	r0, #0
   1b1d4:	f7fb be7c 	b.w	16ed0 <nrfx_clock_start>

0001b1d8 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1b1d8:	2003      	movs	r0, #3
   1b1da:	f7fb bee3 	b.w	16fa4 <nrfx_clock_stop>

0001b1de <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1b1de:	2002      	movs	r0, #2
   1b1e0:	f7fb bee0 	b.w	16fa4 <nrfx_clock_stop>

0001b1e4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1b1e4:	2000      	movs	r0, #0
   1b1e6:	f7fb bedd 	b.w	16fa4 <nrfx_clock_stop>

0001b1ea <api_stop>:
	return stop(dev, subsys, CTX_API);
   1b1ea:	2280      	movs	r2, #128	; 0x80
   1b1ec:	f7f0 be6e 	b.w	becc <stop>

0001b1f0 <blocking_start_callback>:
{
   1b1f0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1b1f2:	f7fe ba87 	b.w	19704 <z_impl_k_sem_give>

0001b1f6 <bt_rpmsg_open>:
{
   1b1f6:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   1b1f8:	f7f1 f968 	bl	c4cc <bt_rpmsg_platform_endpoint_is_bound>
   1b1fc:	b108      	cbz	r0, 1b202 <bt_rpmsg_open+0xc>
}
   1b1fe:	2000      	movs	r0, #0
   1b200:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   1b202:	2100      	movs	r1, #0
   1b204:	2021      	movs	r0, #33	; 0x21
   1b206:	f7fe fa47 	bl	19698 <z_impl_k_sleep>
   1b20a:	e7f5      	b.n	1b1f8 <bt_rpmsg_open+0x2>

0001b20c <endpoint_cb>:
{
   1b20c:	b508      	push	{r3, lr}
   1b20e:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   1b210:	4611      	mov	r1, r2
   1b212:	f7f1 f871 	bl	c2f8 <bt_rpmsg_rx>
}
   1b216:	2000      	movs	r0, #0
   1b218:	bd08      	pop	{r3, pc}

0001b21a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1b21a:	4770      	bx	lr

0001b21c <attr_find_by_handle>:
{
   1b21c:	b570      	push	{r4, r5, r6, lr}
   1b21e:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   1b220:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1b224:	b1a8      	cbz	r0, 1b252 <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   1b226:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   1b228:	3801      	subs	r0, #1
	while (upper >= lower) {
   1b22a:	4286      	cmp	r6, r0
   1b22c:	dd01      	ble.n	1b232 <attr_find_by_handle+0x16>
		return NULL;
   1b22e:	2000      	movs	r0, #0
   1b230:	e00f      	b.n	1b252 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   1b232:	1832      	adds	r2, r6, r0
   1b234:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1b238:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   1b23a:	1cd5      	adds	r5, r2, #3
   1b23c:	00eb      	lsls	r3, r5, #3
   1b23e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   1b242:	892d      	ldrh	r5, [r5, #8]
   1b244:	428d      	cmp	r5, r1
   1b246:	d201      	bcs.n	1b24c <attr_find_by_handle+0x30>
			lower = m + 1;
   1b248:	1c56      	adds	r6, r2, #1
   1b24a:	e7ee      	b.n	1b22a <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   1b24c:	d802      	bhi.n	1b254 <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   1b24e:	3304      	adds	r3, #4
   1b250:	18e0      	adds	r0, r4, r3
}
   1b252:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   1b254:	1e50      	subs	r0, r2, #1
   1b256:	e7e8      	b.n	1b22a <attr_find_by_handle+0xe>

0001b258 <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   1b258:	2300      	movs	r3, #0
{
   1b25a:	b510      	push	{r4, lr}
   1b25c:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   1b25e:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1b262:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   1b266:	b910      	cbnz	r0, 1b26e <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   1b268:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   1b26c:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b26e:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	return node->next;
   1b272:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b274:	4290      	cmp	r0, r2
	list->head = node;
   1b276:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   1b27a:	bf08      	it	eq
   1b27c:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   1b280:	f003 f948 	bl	1e514 <k_free>
   1b284:	e7ed      	b.n	1b262 <svc_attr_memory_release+0xa>

0001b286 <atomic_and>:
{
   1b286:	4603      	mov	r3, r0
}
   1b288:	e8d3 0fef 	ldaex	r0, [r3]
   1b28c:	ea00 0201 	and.w	r2, r0, r1
   1b290:	e8c3 2fec 	stlex	ip, r2, [r3]
   1b294:	f1bc 0f00 	cmp.w	ip, #0
   1b298:	d1f6      	bne.n	1b288 <atomic_and+0x2>
   1b29a:	4770      	bx	lr

0001b29c <discovery_complete_not_found>:
{
   1b29c:	b510      	push	{r4, lr}
   1b29e:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   1b2a0:	f7ff ffda 	bl	1b258 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b2a4:	f06f 0101 	mvn.w	r1, #1
   1b2a8:	f504 709c 	add.w	r0, r4, #312	; 0x138
   1b2ac:	f7ff ffeb 	bl	1b286 <atomic_and>
	if (dm->callback->service_not_found) {
   1b2b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1b2b4:	685b      	ldr	r3, [r3, #4]
   1b2b6:	b123      	cbz	r3, 1b2c2 <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   1b2b8:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   1b2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   1b2c0:	4718      	bx	r3
}
   1b2c2:	bd10      	pop	{r4, pc}

0001b2c4 <bt_gatt_dm_attr_service_val>:
{
   1b2c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1b2c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b2ca:	2400      	movs	r4, #0
{
   1b2cc:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1b2ce:	6801      	ldr	r1, [r0, #0]
   1b2d0:	4668      	mov	r0, sp
   1b2d2:	f88d 4000 	strb.w	r4, [sp]
   1b2d6:	f8ad 3002 	strh.w	r3, [sp, #2]
   1b2da:	f000 fea4 	bl	1c026 <bt_uuid_cmp>
   1b2de:	b918      	cbnz	r0, 1b2e8 <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   1b2e0:	6828      	ldr	r0, [r5, #0]
   1b2e2:	3808      	subs	r0, #8
}
   1b2e4:	b003      	add	sp, #12
   1b2e6:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   1b2e8:	f642 0301 	movw	r3, #10241	; 0x2801
   1b2ec:	6829      	ldr	r1, [r5, #0]
   1b2ee:	a801      	add	r0, sp, #4
   1b2f0:	f88d 4004 	strb.w	r4, [sp, #4]
   1b2f4:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b2f8:	f000 fe95 	bl	1c026 <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1b2fc:	2800      	cmp	r0, #0
   1b2fe:	d0ef      	beq.n	1b2e0 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   1b300:	4620      	mov	r0, r4
   1b302:	e7ef      	b.n	1b2e4 <bt_gatt_dm_attr_service_val+0x20>

0001b304 <bt_gatt_dm_attr_chrc_val>:
{
   1b304:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1b306:	f642 0303 	movw	r3, #10243	; 0x2803
   1b30a:	2400      	movs	r4, #0
{
   1b30c:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1b30e:	6801      	ldr	r1, [r0, #0]
   1b310:	a801      	add	r0, sp, #4
   1b312:	f88d 4004 	strb.w	r4, [sp, #4]
   1b316:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b31a:	f000 fe84 	bl	1c026 <bt_uuid_cmp>
   1b31e:	b918      	cbnz	r0, 1b328 <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   1b320:	6828      	ldr	r0, [r5, #0]
   1b322:	3808      	subs	r0, #8
}
   1b324:	b003      	add	sp, #12
   1b326:	bd30      	pop	{r4, r5, pc}
	return NULL;
   1b328:	4620      	mov	r0, r4
   1b32a:	e7fb      	b.n	1b324 <bt_gatt_dm_attr_chrc_val+0x20>

0001b32c <bt_gatt_dm_conn_get>:
}
   1b32c:	6800      	ldr	r0, [r0, #0]
   1b32e:	4770      	bx	lr

0001b330 <bt_gatt_dm_service_get>:
}
   1b330:	301c      	adds	r0, #28
   1b332:	4770      	bx	lr

0001b334 <bt_gatt_dm_char_next>:
{
   1b334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   1b336:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   1b33a:	b131      	cbz	r1, 1b34a <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   1b33c:	42a9      	cmp	r1, r5
   1b33e:	d203      	bcs.n	1b348 <bt_gatt_dm_char_next+0x14>
	return NULL;
   1b340:	2500      	movs	r5, #0
}
   1b342:	4628      	mov	r0, r5
   1b344:	b003      	add	sp, #12
   1b346:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b348:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1b34a:	2600      	movs	r6, #0
   1b34c:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   1b350:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   1b354:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1b358:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   1b35c:	3508      	adds	r5, #8
   1b35e:	42ac      	cmp	r4, r5
   1b360:	d9ee      	bls.n	1b340 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1b362:	6829      	ldr	r1, [r5, #0]
   1b364:	a801      	add	r0, sp, #4
   1b366:	f88d 6004 	strb.w	r6, [sp, #4]
   1b36a:	f8ad 7006 	strh.w	r7, [sp, #6]
   1b36e:	f000 fe5a 	bl	1c026 <bt_uuid_cmp>
   1b372:	2800      	cmp	r0, #0
   1b374:	d1f2      	bne.n	1b35c <bt_gatt_dm_char_next+0x28>
   1b376:	e7e4      	b.n	1b342 <bt_gatt_dm_char_next+0xe>

0001b378 <bt_gatt_dm_attr_next>:
{
   1b378:	4602      	mov	r2, r0
		prev = dm->attrs;
   1b37a:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   1b37e:	b111      	cbz	r1, 1b386 <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   1b380:	4299      	cmp	r1, r3
   1b382:	d30b      	bcc.n	1b39c <bt_gatt_dm_attr_next+0x24>
   1b384:	460b      	mov	r3, r1
		if (++prev < end) {
   1b386:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   1b38a:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   1b38e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1b392:	321c      	adds	r2, #28
	return NULL;
   1b394:	4290      	cmp	r0, r2
   1b396:	bf28      	it	cs
   1b398:	2000      	movcs	r0, #0
   1b39a:	4770      	bx	lr
   1b39c:	2000      	movs	r0, #0
}
   1b39e:	4770      	bx	lr

0001b3a0 <bt_gatt_dm_desc_next>:
{
   1b3a0:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   1b3a2:	f7ff ffe9 	bl	1b378 <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   1b3a6:	4604      	mov	r4, r0
   1b3a8:	b158      	cbz	r0, 1b3c2 <bt_gatt_dm_desc_next+0x22>
   1b3aa:	2300      	movs	r3, #0
   1b3ac:	f88d 3004 	strb.w	r3, [sp, #4]
   1b3b0:	f642 0303 	movw	r3, #10243	; 0x2803
   1b3b4:	6801      	ldr	r1, [r0, #0]
   1b3b6:	a801      	add	r0, sp, #4
   1b3b8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b3bc:	f000 fe33 	bl	1c026 <bt_uuid_cmp>
   1b3c0:	b900      	cbnz	r0, 1b3c4 <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   1b3c2:	2400      	movs	r4, #0
}
   1b3c4:	4620      	mov	r0, r4
   1b3c6:	b002      	add	sp, #8
   1b3c8:	bd10      	pop	{r4, pc}

0001b3ca <bt_gatt_dm_desc_by_uuid>:
{
   1b3ca:	b570      	push	{r4, r5, r6, lr}
   1b3cc:	4605      	mov	r5, r0
   1b3ce:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   1b3d0:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   1b3d2:	4621      	mov	r1, r4
   1b3d4:	4628      	mov	r0, r5
   1b3d6:	f7ff ffe3 	bl	1b3a0 <bt_gatt_dm_desc_next>
   1b3da:	4604      	mov	r4, r0
   1b3dc:	b128      	cbz	r0, 1b3ea <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   1b3de:	4630      	mov	r0, r6
   1b3e0:	6821      	ldr	r1, [r4, #0]
   1b3e2:	f000 fe20 	bl	1c026 <bt_uuid_cmp>
   1b3e6:	2800      	cmp	r0, #0
   1b3e8:	d1f3      	bne.n	1b3d2 <bt_gatt_dm_desc_by_uuid+0x8>
}
   1b3ea:	4620      	mov	r0, r4
   1b3ec:	bd70      	pop	{r4, r5, r6, pc}

0001b3ee <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   1b3ee:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1b3f0:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   1b3f4:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b3f6:	f06f 0102 	mvn.w	r1, #2
   1b3fa:	4628      	mov	r0, r5
   1b3fc:	f7ff ff43 	bl	1b286 <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1b400:	0783      	lsls	r3, r0, #30
   1b402:	d509      	bpl.n	1b418 <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   1b404:	4620      	mov	r0, r4
   1b406:	f7ff ff27 	bl	1b258 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b40a:	f06f 0101 	mvn.w	r1, #1
   1b40e:	4628      	mov	r0, r5
   1b410:	f7ff ff39 	bl	1b286 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   1b414:	2000      	movs	r0, #0
}
   1b416:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1b418:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1b41c:	e7fb      	b.n	1b416 <bt_gatt_dm_data_release+0x28>

0001b41e <bt_scan_stop>:
	return bt_le_scan_stop();
   1b41e:	f7f5 be0f 	b.w	11040 <bt_le_scan_stop>

0001b422 <bt_bas_conn>:
}
   1b422:	6800      	ldr	r0, [r0, #0]
   1b424:	4770      	bx	lr

0001b426 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1b426:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1b428:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1b42a:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1b42c:	bf9c      	itt	ls
   1b42e:	6880      	ldrls	r0, [r0, #8]
   1b430:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1b432:	3b01      	subs	r3, #1
   1b434:	1a98      	subs	r0, r3, r2
}
   1b436:	4770      	bx	lr

0001b438 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1b438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1b43c:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1b440:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1b442:	eba9 0804 	sub.w	r8, r9, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1b446:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1b448:	4590      	cmp	r8, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1b44a:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1b44c:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1b44e:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1b450:	d904      	bls.n	1b45c <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1b452:	f000 fd73 	bl	1bf3c <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1b456:	60ec      	str	r4, [r5, #12]
}
   1b458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1b45c:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1b45e:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1b462:	f000 fd6b 	bl	1bf3c <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1b466:	4622      	mov	r2, r4
   1b468:	6868      	ldr	r0, [r5, #4]
   1b46a:	eb07 0108 	add.w	r1, r7, r8
   1b46e:	e7f0      	b.n	1b452 <_WriteNoCheck+0x1a>

0001b470 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1b470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b474:	4606      	mov	r6, r0
   1b476:	4689      	mov	r9, r1
   1b478:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1b47a:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   1b47e:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1b480:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1b482:	68b3      	ldr	r3, [r6, #8]
    if (RdOff > WrOff) {
   1b484:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1b486:	bf28      	it	cs
   1b488:	18e4      	addcs	r4, r4, r3
   1b48a:	3c01      	subs	r4, #1
   1b48c:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1b48e:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1b490:	42bc      	cmp	r4, r7
   1b492:	bf28      	it	cs
   1b494:	463c      	movcs	r4, r7
   1b496:	4294      	cmp	r4, r2
   1b498:	bf28      	it	cs
   1b49a:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1b49c:	6870      	ldr	r0, [r6, #4]
   1b49e:	4649      	mov	r1, r9
   1b4a0:	4428      	add	r0, r5
   1b4a2:	4622      	mov	r2, r4
   1b4a4:	f000 fd4a 	bl	1bf3c <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1b4a8:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1b4aa:	4425      	add	r5, r4
      WrOff = 0u;
   1b4ac:	42ab      	cmp	r3, r5
   1b4ae:	bf08      	it	eq
   1b4b0:	2500      	moveq	r5, #0
  } while (NumBytes);
   1b4b2:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1b4b4:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1b4b6:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1b4b8:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1b4ba:	d1e1      	bne.n	1b480 <_WriteBlocking+0x10>
}
   1b4bc:	4640      	mov	r0, r8
   1b4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b4c2 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1b4c2:	f7f2 b97b 	b.w	d7bc <_DoInit>

0001b4c6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1b4c6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1b4c8:	f7ff fffb 	bl	1b4c2 <SEGGER_RTT_Init>

	return 0;
}
   1b4cc:	2000      	movs	r0, #0
   1b4ce:	bd08      	pop	{r3, pc}

0001b4d0 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1b4d0:	b538      	push	{r3, r4, r5, lr}
   1b4d2:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1b4d4:	42ab      	cmp	r3, r5
{
   1b4d6:	4611      	mov	r1, r2
   1b4d8:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1b4da:	d804      	bhi.n	1b4e6 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1b4dc:	461a      	mov	r2, r3
   1b4de:	f000 fd2d 	bl	1bf3c <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1b4e2:	4620      	mov	r0, r4
   1b4e4:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1b4e6:	2400      	movs	r4, #0
   1b4e8:	e7fb      	b.n	1b4e2 <_copy+0x12>

0001b4ea <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1b4ea:	f000 bd52 	b.w	1bf92 <memset>

0001b4ee <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1b4ee:	09c3      	lsrs	r3, r0, #7
   1b4f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b4f4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1b4f8:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1b4fc:	b2c0      	uxtb	r0, r0
   1b4fe:	4770      	bx	lr

0001b500 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1b500:	78cb      	ldrb	r3, [r1, #3]
   1b502:	7802      	ldrb	r2, [r0, #0]
   1b504:	4053      	eors	r3, r2
   1b506:	7003      	strb	r3, [r0, #0]
   1b508:	884b      	ldrh	r3, [r1, #2]
   1b50a:	7842      	ldrb	r2, [r0, #1]
   1b50c:	4053      	eors	r3, r2
   1b50e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1b510:	680a      	ldr	r2, [r1, #0]
   1b512:	7883      	ldrb	r3, [r0, #2]
   1b514:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b518:	7083      	strb	r3, [r0, #2]
   1b51a:	680a      	ldr	r2, [r1, #0]
   1b51c:	78c3      	ldrb	r3, [r0, #3]
   1b51e:	4053      	eors	r3, r2
   1b520:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1b522:	79cb      	ldrb	r3, [r1, #7]
   1b524:	7902      	ldrb	r2, [r0, #4]
   1b526:	4053      	eors	r3, r2
   1b528:	7103      	strb	r3, [r0, #4]
   1b52a:	88cb      	ldrh	r3, [r1, #6]
   1b52c:	7942      	ldrb	r2, [r0, #5]
   1b52e:	4053      	eors	r3, r2
   1b530:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1b532:	684a      	ldr	r2, [r1, #4]
   1b534:	7983      	ldrb	r3, [r0, #6]
   1b536:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b53a:	7183      	strb	r3, [r0, #6]
   1b53c:	684a      	ldr	r2, [r1, #4]
   1b53e:	79c3      	ldrb	r3, [r0, #7]
   1b540:	4053      	eors	r3, r2
   1b542:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1b544:	7acb      	ldrb	r3, [r1, #11]
   1b546:	7a02      	ldrb	r2, [r0, #8]
   1b548:	4053      	eors	r3, r2
   1b54a:	7203      	strb	r3, [r0, #8]
   1b54c:	7a42      	ldrb	r2, [r0, #9]
   1b54e:	894b      	ldrh	r3, [r1, #10]
   1b550:	4053      	eors	r3, r2
   1b552:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1b554:	688a      	ldr	r2, [r1, #8]
   1b556:	7a83      	ldrb	r3, [r0, #10]
   1b558:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b55c:	7283      	strb	r3, [r0, #10]
   1b55e:	688a      	ldr	r2, [r1, #8]
   1b560:	7ac3      	ldrb	r3, [r0, #11]
   1b562:	4053      	eors	r3, r2
   1b564:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1b566:	7bcb      	ldrb	r3, [r1, #15]
   1b568:	7b02      	ldrb	r2, [r0, #12]
   1b56a:	4053      	eors	r3, r2
   1b56c:	7303      	strb	r3, [r0, #12]
   1b56e:	89cb      	ldrh	r3, [r1, #14]
   1b570:	7b42      	ldrb	r2, [r0, #13]
   1b572:	4053      	eors	r3, r2
   1b574:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1b576:	68ca      	ldr	r2, [r1, #12]
   1b578:	7b83      	ldrb	r3, [r0, #14]
   1b57a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b57e:	7383      	strb	r3, [r0, #14]
   1b580:	68ca      	ldr	r2, [r1, #12]
   1b582:	7bc3      	ldrb	r3, [r0, #15]
   1b584:	4053      	eors	r3, r2
   1b586:	73c3      	strb	r3, [r0, #15]
}
   1b588:	4770      	bx	lr

0001b58a <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1b58a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b58c:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b58e:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b590:	f88d 2000 	strb.w	r2, [sp]
   1b594:	7942      	ldrb	r2, [r0, #5]
   1b596:	f88d 2001 	strb.w	r2, [sp, #1]
   1b59a:	7a82      	ldrb	r2, [r0, #10]
   1b59c:	f88d 2002 	strb.w	r2, [sp, #2]
   1b5a0:	7bc2      	ldrb	r2, [r0, #15]
   1b5a2:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1b5a6:	7902      	ldrb	r2, [r0, #4]
   1b5a8:	f88d 2004 	strb.w	r2, [sp, #4]
   1b5ac:	7a42      	ldrb	r2, [r0, #9]
   1b5ae:	f88d 2005 	strb.w	r2, [sp, #5]
   1b5b2:	7b82      	ldrb	r2, [r0, #14]
   1b5b4:	f88d 2006 	strb.w	r2, [sp, #6]
   1b5b8:	78c2      	ldrb	r2, [r0, #3]
   1b5ba:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1b5be:	7a02      	ldrb	r2, [r0, #8]
   1b5c0:	f88d 2008 	strb.w	r2, [sp, #8]
   1b5c4:	7b42      	ldrb	r2, [r0, #13]
   1b5c6:	f88d 2009 	strb.w	r2, [sp, #9]
   1b5ca:	7882      	ldrb	r2, [r0, #2]
   1b5cc:	f88d 200a 	strb.w	r2, [sp, #10]
   1b5d0:	79c2      	ldrb	r2, [r0, #7]
   1b5d2:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b5d6:	7b02      	ldrb	r2, [r0, #12]
   1b5d8:	f88d 200c 	strb.w	r2, [sp, #12]
   1b5dc:	7842      	ldrb	r2, [r0, #1]
   1b5de:	f88d 200d 	strb.w	r2, [sp, #13]
   1b5e2:	7982      	ldrb	r2, [r0, #6]
   1b5e4:	f88d 200e 	strb.w	r2, [sp, #14]
   1b5e8:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b5ec:	2310      	movs	r3, #16
   1b5ee:	466a      	mov	r2, sp
   1b5f0:	4619      	mov	r1, r3
   1b5f2:	f7ff ff6d 	bl	1b4d0 <_copy>
}
   1b5f6:	b005      	add	sp, #20
   1b5f8:	f85d fb04 	ldr.w	pc, [sp], #4

0001b5fc <mult_row_column>:
{
   1b5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b5fe:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b600:	7808      	ldrb	r0, [r1, #0]
{
   1b602:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b604:	f7ff ff73 	bl	1b4ee <_double_byte>
   1b608:	4605      	mov	r5, r0
   1b60a:	7860      	ldrb	r0, [r4, #1]
   1b60c:	f7ff ff6f 	bl	1b4ee <_double_byte>
   1b610:	78a2      	ldrb	r2, [r4, #2]
   1b612:	7863      	ldrb	r3, [r4, #1]
   1b614:	4053      	eors	r3, r2
   1b616:	78e2      	ldrb	r2, [r4, #3]
   1b618:	4053      	eors	r3, r2
   1b61a:	405d      	eors	r5, r3
   1b61c:	4045      	eors	r5, r0
   1b61e:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1b620:	7860      	ldrb	r0, [r4, #1]
   1b622:	7827      	ldrb	r7, [r4, #0]
   1b624:	f7ff ff63 	bl	1b4ee <_double_byte>
   1b628:	4605      	mov	r5, r0
   1b62a:	78a0      	ldrb	r0, [r4, #2]
   1b62c:	f7ff ff5f 	bl	1b4ee <_double_byte>
   1b630:	78a3      	ldrb	r3, [r4, #2]
   1b632:	405f      	eors	r7, r3
   1b634:	78e3      	ldrb	r3, [r4, #3]
   1b636:	405f      	eors	r7, r3
   1b638:	407d      	eors	r5, r7
   1b63a:	4045      	eors	r5, r0
   1b63c:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1b63e:	78a0      	ldrb	r0, [r4, #2]
   1b640:	7865      	ldrb	r5, [r4, #1]
   1b642:	7827      	ldrb	r7, [r4, #0]
   1b644:	f7ff ff53 	bl	1b4ee <_double_byte>
   1b648:	406f      	eors	r7, r5
   1b64a:	4605      	mov	r5, r0
   1b64c:	78e0      	ldrb	r0, [r4, #3]
   1b64e:	f7ff ff4e 	bl	1b4ee <_double_byte>
   1b652:	78e3      	ldrb	r3, [r4, #3]
   1b654:	405f      	eors	r7, r3
   1b656:	407d      	eors	r5, r7
   1b658:	4045      	eors	r5, r0
   1b65a:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1b65c:	7820      	ldrb	r0, [r4, #0]
   1b65e:	f7ff ff46 	bl	1b4ee <_double_byte>
   1b662:	7863      	ldrb	r3, [r4, #1]
   1b664:	7825      	ldrb	r5, [r4, #0]
   1b666:	405d      	eors	r5, r3
   1b668:	78a3      	ldrb	r3, [r4, #2]
   1b66a:	405d      	eors	r5, r3
   1b66c:	4045      	eors	r5, r0
   1b66e:	78e0      	ldrb	r0, [r4, #3]
   1b670:	f7ff ff3d 	bl	1b4ee <_double_byte>
   1b674:	b2ed      	uxtb	r5, r5
   1b676:	4045      	eors	r5, r0
   1b678:	70f5      	strb	r5, [r6, #3]
}
   1b67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b67c <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1b67c:	b570      	push	{r4, r5, r6, lr}
   1b67e:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1b680:	4605      	mov	r5, r0
{
   1b682:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1b684:	2800      	cmp	r0, #0
   1b686:	d049      	beq.n	1b71c <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1b688:	2900      	cmp	r1, #0
   1b68a:	d049      	beq.n	1b720 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1b68c:	2a00      	cmp	r2, #0
   1b68e:	d049      	beq.n	1b724 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1b690:	2310      	movs	r3, #16
   1b692:	460a      	mov	r2, r1
   1b694:	4668      	mov	r0, sp
   1b696:	4619      	mov	r1, r3
   1b698:	f7ff ff1a 	bl	1b4d0 <_copy>
	add_round_key(state, s->words);
   1b69c:	4621      	mov	r1, r4
   1b69e:	4668      	mov	r0, sp
   1b6a0:	f7ff ff2e 	bl	1b500 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1b6a4:	3410      	adds	r4, #16
   1b6a6:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1b6aa:	4668      	mov	r0, sp
   1b6ac:	f7f2 f8e6 	bl	d87c <sub_bytes>
		shift_rows(state);
   1b6b0:	4668      	mov	r0, sp
   1b6b2:	f7ff ff6a 	bl	1b58a <shift_rows>
	mult_row_column(t, s);
   1b6b6:	4669      	mov	r1, sp
   1b6b8:	a804      	add	r0, sp, #16
   1b6ba:	f7ff ff9f 	bl	1b5fc <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1b6be:	a901      	add	r1, sp, #4
   1b6c0:	a805      	add	r0, sp, #20
   1b6c2:	f7ff ff9b 	bl	1b5fc <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1b6c6:	a902      	add	r1, sp, #8
   1b6c8:	a806      	add	r0, sp, #24
   1b6ca:	f7ff ff97 	bl	1b5fc <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1b6ce:	a903      	add	r1, sp, #12
   1b6d0:	a807      	add	r0, sp, #28
   1b6d2:	f7ff ff93 	bl	1b5fc <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b6d6:	2310      	movs	r3, #16
   1b6d8:	4668      	mov	r0, sp
   1b6da:	4619      	mov	r1, r3
   1b6dc:	eb0d 0203 	add.w	r2, sp, r3
   1b6e0:	f7ff fef6 	bl	1b4d0 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1b6e4:	4621      	mov	r1, r4
   1b6e6:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1b6e8:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1b6ea:	f7ff ff09 	bl	1b500 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1b6ee:	42a6      	cmp	r6, r4
   1b6f0:	d1db      	bne.n	1b6aa <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1b6f2:	f7f2 f8c3 	bl	d87c <sub_bytes>
	shift_rows(state);
   1b6f6:	4668      	mov	r0, sp
   1b6f8:	f7ff ff47 	bl	1b58a <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1b6fc:	4631      	mov	r1, r6
   1b6fe:	4668      	mov	r0, sp
   1b700:	f7ff fefe 	bl	1b500 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1b704:	2310      	movs	r3, #16
   1b706:	466a      	mov	r2, sp
   1b708:	4619      	mov	r1, r3
   1b70a:	4628      	mov	r0, r5
   1b70c:	f7ff fee0 	bl	1b4d0 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1b710:	4668      	mov	r0, sp
   1b712:	2210      	movs	r2, #16
   1b714:	2100      	movs	r1, #0
   1b716:	f7ff fee8 	bl	1b4ea <_set>

	return TC_CRYPTO_SUCCESS;
   1b71a:	2001      	movs	r0, #1
}
   1b71c:	b008      	add	sp, #32
   1b71e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b720:	4608      	mov	r0, r1
   1b722:	e7fb      	b.n	1b71c <tc_aes_encrypt+0xa0>
   1b724:	4610      	mov	r0, r2
   1b726:	e7f9      	b.n	1b71c <tc_aes_encrypt+0xa0>

0001b728 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b728:	460a      	mov	r2, r1
{
   1b72a:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b72c:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1b730:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b732:	2b00      	cmp	r3, #0
   1b734:	bfb4      	ite	lt
   1b736:	2387      	movlt	r3, #135	; 0x87
   1b738:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1b73a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1b73e:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1b742:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1b744:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1b748:	d002      	beq.n	1b750 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1b74a:	7813      	ldrb	r3, [r2, #0]
   1b74c:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1b74e:	e7f4      	b.n	1b73a <gf_double+0x12>
	}
}
   1b750:	bd10      	pop	{r4, pc}

0001b752 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1b752:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1b754:	b120      	cbz	r0, 1b760 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1b756:	2258      	movs	r2, #88	; 0x58
   1b758:	2100      	movs	r1, #0
   1b75a:	f7ff fec6 	bl	1b4ea <_set>
   1b75e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1b760:	bd08      	pop	{r3, pc}

0001b762 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1b762:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b764:	4604      	mov	r4, r0
   1b766:	b188      	cbz	r0, 1b78c <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b768:	2210      	movs	r2, #16
   1b76a:	2100      	movs	r1, #0
   1b76c:	f7ff febd 	bl	1b4ea <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1b770:	2210      	movs	r2, #16
   1b772:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b776:	2100      	movs	r1, #0
   1b778:	f7ff feb7 	bl	1b4ea <_set>
	s->leftover_offset = 0;
   1b77c:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1b77e:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1b780:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1b782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1b786:	2001      	movs	r0, #1
   1b788:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1b78c:	bd10      	pop	{r4, pc}

0001b78e <tc_cmac_setup>:
{
   1b78e:	b570      	push	{r4, r5, r6, lr}
   1b790:	460d      	mov	r5, r1
   1b792:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1b794:	4604      	mov	r4, r0
   1b796:	b310      	cbz	r0, 1b7de <_flash_used+0x2>
   1b798:	b311      	cbz	r1, 1b7e0 <_flash_used+0x4>
	_set(s, 0, sizeof(*s));
   1b79a:	2258      	movs	r2, #88	; 0x58
   1b79c:	2100      	movs	r1, #0
   1b79e:	f7ff fea4 	bl	1b4ea <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1b7a2:	4629      	mov	r1, r5
   1b7a4:	4630      	mov	r0, r6
	s->sched = sched;
   1b7a6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1b7a8:	f7f2 f874 	bl	d894 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b7ac:	2210      	movs	r2, #16
   1b7ae:	2100      	movs	r1, #0
   1b7b0:	4620      	mov	r0, r4
   1b7b2:	f7ff fe9a 	bl	1b4ea <_set>
	gf_double (s->K1, s->iv);
   1b7b6:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b7ba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b7bc:	4621      	mov	r1, r4
   1b7be:	4620      	mov	r0, r4
   1b7c0:	f7ff ff5c 	bl	1b67c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1b7c4:	4621      	mov	r1, r4
   1b7c6:	4628      	mov	r0, r5
   1b7c8:	f7ff ffae 	bl	1b728 <gf_double>
	gf_double (s->K2, s->K1);
   1b7cc:	4629      	mov	r1, r5
   1b7ce:	f104 0020 	add.w	r0, r4, #32
   1b7d2:	f7ff ffa9 	bl	1b728 <gf_double>
	tc_cmac_init(s);
   1b7d6:	4620      	mov	r0, r4
   1b7d8:	f7ff ffc3 	bl	1b762 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1b7dc:	2001      	movs	r0, #1
}
   1b7de:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b7e0:	4608      	mov	r0, r1
   1b7e2:	e7fc      	b.n	1b7de <_flash_used+0x2>

0001b7e4 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1b7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b7e8:	460d      	mov	r5, r1
   1b7ea:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b7ec:	4604      	mov	r4, r0
   1b7ee:	2800      	cmp	r0, #0
   1b7f0:	d061      	beq.n	1b8b6 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1b7f2:	b912      	cbnz	r2, 1b7fa <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1b7f4:	2001      	movs	r0, #1
}
   1b7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1b7fa:	2900      	cmp	r1, #0
   1b7fc:	d05b      	beq.n	1b8b6 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1b7fe:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1b802:	ea53 0102 	orrs.w	r1, r3, r2
   1b806:	d056      	beq.n	1b8b6 <tc_cmac_update+0xd2>
	s->countdown--;
   1b808:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1b80a:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1b80e:	f142 32ff 	adc.w	r2, r2, #4294967295
   1b812:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1b816:	f1b8 0f00 	cmp.w	r8, #0
   1b81a:	d02a      	beq.n	1b872 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1b81c:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b820:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1b824:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b826:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1b828:	d208      	bcs.n	1b83c <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b82a:	462a      	mov	r2, r5
   1b82c:	4633      	mov	r3, r6
   1b82e:	4631      	mov	r1, r6
   1b830:	f7ff fe4e 	bl	1b4d0 <_copy>
			s->leftover_offset += data_length;
   1b834:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1b836:	4432      	add	r2, r6
   1b838:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1b83a:	e7db      	b.n	1b7f4 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1b83c:	463b      	mov	r3, r7
   1b83e:	462a      	mov	r2, r5
   1b840:	4639      	mov	r1, r7
   1b842:	f7ff fe45 	bl	1b4d0 <_copy>
		s->leftover_offset = 0;
   1b846:	2300      	movs	r3, #0
   1b848:	3e10      	subs	r6, #16
   1b84a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1b84c:	4446      	add	r6, r8
		data += remaining_space;
   1b84e:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b850:	1e63      	subs	r3, r4, #1
   1b852:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1b856:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b85a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b85e:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1b860:	ea82 0200 	eor.w	r2, r2, r0
   1b864:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b866:	d1f6      	bne.n	1b856 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b868:	4621      	mov	r1, r4
   1b86a:	4620      	mov	r0, r4
   1b86c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b86e:	f7ff ff05 	bl	1b67c <tc_aes_encrypt>
   1b872:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1b876:	2e10      	cmp	r6, #16
   1b878:	d80a      	bhi.n	1b890 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1b87a:	2e00      	cmp	r6, #0
   1b87c:	d0ba      	beq.n	1b7f4 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1b87e:	4633      	mov	r3, r6
   1b880:	462a      	mov	r2, r5
   1b882:	4631      	mov	r1, r6
   1b884:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b888:	f7ff fe22 	bl	1b4d0 <_copy>
		s->leftover_offset = data_length;
   1b88c:	6466      	str	r6, [r4, #68]	; 0x44
   1b88e:	e7b1      	b.n	1b7f4 <tc_cmac_update+0x10>
   1b890:	1e63      	subs	r3, r4, #1
   1b892:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1b894:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b898:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b89c:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1b89e:	ea82 0200 	eor.w	r2, r2, r0
   1b8a2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b8a4:	d1f6      	bne.n	1b894 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b8a6:	4621      	mov	r1, r4
   1b8a8:	4620      	mov	r0, r4
   1b8aa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b8ac:	f7ff fee6 	bl	1b67c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1b8b0:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1b8b2:	3e10      	subs	r6, #16
   1b8b4:	e7df      	b.n	1b876 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1b8b6:	2000      	movs	r0, #0
   1b8b8:	e79d      	b.n	1b7f6 <tc_cmac_update+0x12>

0001b8ba <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1b8ba:	b570      	push	{r4, r5, r6, lr}
   1b8bc:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1b8be:	4605      	mov	r5, r0
   1b8c0:	b1f0      	cbz	r0, 1b900 <tc_cmac_final+0x46>
   1b8c2:	b371      	cbz	r1, 1b922 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1b8c4:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1b8c6:	2a10      	cmp	r2, #16
   1b8c8:	d11b      	bne.n	1b902 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1b8ca:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b8cc:	1e63      	subs	r3, r4, #1
   1b8ce:	3901      	subs	r1, #1
   1b8d0:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b8d4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b8d8:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b8dc:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b8de:	ea82 0206 	eor.w	r2, r2, r6
   1b8e2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1b8e6:	ea82 0206 	eor.w	r2, r2, r6
   1b8ea:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b8ec:	d1f2      	bne.n	1b8d4 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1b8ee:	4621      	mov	r1, r4
   1b8f0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b8f2:	4628      	mov	r0, r5
   1b8f4:	f7ff fec2 	bl	1b67c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1b8f8:	4620      	mov	r0, r4
   1b8fa:	f7ff ff2a 	bl	1b752 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1b8fe:	2001      	movs	r0, #1
}
   1b900:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1b902:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1b906:	2100      	movs	r1, #0
   1b908:	f1c2 0210 	rsb	r2, r2, #16
   1b90c:	4420      	add	r0, r4
   1b90e:	f7ff fdec 	bl	1b4ea <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b912:	2280      	movs	r2, #128	; 0x80
   1b914:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1b916:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b91a:	4423      	add	r3, r4
   1b91c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1b920:	e7d4      	b.n	1b8cc <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1b922:	4608      	mov	r0, r1
   1b924:	e7ec      	b.n	1b900 <tc_cmac_final+0x46>

0001b926 <tc_sha256_update>:
{
   1b926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b928:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1b92a:	b110      	cbz	r0, 1b932 <tc_sha256_update+0xc>
   1b92c:	b1f9      	cbz	r1, 1b96e <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1b92e:	b90a      	cbnz	r2, 1b934 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1b930:	2001      	movs	r0, #1
}
   1b932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1b934:	2600      	movs	r6, #0
   1b936:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1b938:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   1b93c:	42a5      	cmp	r5, r4
   1b93e:	d0f7      	beq.n	1b930 <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   1b940:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1b942:	1c5a      	adds	r2, r3, #1
   1b944:	6682      	str	r2, [r0, #104]	; 0x68
   1b946:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b94a:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1b94c:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1b94e:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1b952:	d9f3      	bls.n	1b93c <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   1b954:	4639      	mov	r1, r7
   1b956:	f7f1 fff1 	bl	d93c <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1b95a:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1b95e:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1b962:	f142 0200 	adc.w	r2, r2, #0
   1b966:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1b96a:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1b96c:	e7e6      	b.n	1b93c <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   1b96e:	4608      	mov	r0, r1
   1b970:	e7df      	b.n	1b932 <tc_sha256_update+0xc>

0001b972 <tc_sha256_final>:
{
   1b972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b974:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1b976:	4605      	mov	r5, r0
   1b978:	2800      	cmp	r0, #0
   1b97a:	d055      	beq.n	1ba28 <tc_sha256_final+0xb6>
   1b97c:	2900      	cmp	r1, #0
   1b97e:	d054      	beq.n	1ba2a <tc_sha256_final+0xb8>
	s->bits_hashed += (s->leftover_offset << 3);
   1b980:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1b982:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1b986:	00d8      	lsls	r0, r3, #3
   1b988:	1812      	adds	r2, r2, r0
   1b98a:	f141 0100 	adc.w	r1, r1, #0
   1b98e:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b992:	2280      	movs	r2, #128	; 0x80
   1b994:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1b996:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b998:	4423      	add	r3, r4
   1b99a:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1b99c:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b9a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1b9a4:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1b9a8:	d90a      	bls.n	1b9c0 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1b9aa:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1b9ae:	4639      	mov	r1, r7
   1b9b0:	4430      	add	r0, r6
   1b9b2:	f7ff fd9a 	bl	1b4ea <_set>
		compress(s->iv, s->leftover);
   1b9b6:	4631      	mov	r1, r6
   1b9b8:	4620      	mov	r0, r4
   1b9ba:	f7f1 ffbf 	bl	d93c <compress>
		s->leftover_offset = 0;
   1b9be:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1b9c0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1b9c2:	2100      	movs	r1, #0
   1b9c4:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1b9c8:	4430      	add	r0, r6
   1b9ca:	f7ff fd8e 	bl	1b4ea <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1b9ce:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1b9d0:	4631      	mov	r1, r6
   1b9d2:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1b9d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1b9d6:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1b9d8:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1b9da:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1b9de:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1b9e2:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1b9e4:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   1b9e6:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1b9e8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1b9ec:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1b9f0:	f7f1 ffa4 	bl	d93c <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b9f4:	1f26      	subs	r6, r4, #4
   1b9f6:	1d2b      	adds	r3, r5, #4
   1b9f8:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1b9fc:	f856 2f04 	ldr.w	r2, [r6, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1ba00:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1ba02:	0e11      	lsrs	r1, r2, #24
   1ba04:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1ba08:	0c11      	lsrs	r1, r2, #16
   1ba0a:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1ba0e:	0a11      	lsrs	r1, r2, #8
   1ba10:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1ba14:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1ba18:	4283      	cmp	r3, r0
   1ba1a:	d1ef      	bne.n	1b9fc <tc_sha256_final+0x8a>
	_set(s, 0, sizeof(*s));
   1ba1c:	4620      	mov	r0, r4
   1ba1e:	2270      	movs	r2, #112	; 0x70
   1ba20:	2100      	movs	r1, #0
   1ba22:	f7ff fd62 	bl	1b4ea <_set>
	return TC_CRYPTO_SUCCESS;
   1ba26:	2001      	movs	r0, #1
}
   1ba28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1ba2a:	4608      	mov	r0, r1
   1ba2c:	e7fc      	b.n	1ba28 <tc_sha256_final+0xb6>

0001ba2e <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1ba2e:	b530      	push	{r4, r5, lr}
   1ba30:	1e43      	subs	r3, r0, #1
   1ba32:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1ba34:	42a9      	cmp	r1, r5
   1ba36:	d106      	bne.n	1ba46 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1ba38:	2136      	movs	r1, #54	; 0x36
   1ba3a:	245c      	movs	r4, #92	; 0x5c
   1ba3c:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1ba3e:	1a13      	subs	r3, r2, r0
   1ba40:	2b3f      	cmp	r3, #63	; 0x3f
   1ba42:	d90c      	bls.n	1ba5e <rekey+0x30>
	}
}
   1ba44:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1ba46:	780c      	ldrb	r4, [r1, #0]
   1ba48:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1ba4c:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1ba50:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ba54:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1ba58:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1ba5c:	e7ea      	b.n	1ba34 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1ba5e:	f802 1b01 	strb.w	r1, [r2], #1
   1ba62:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1ba66:	e7ea      	b.n	1ba3e <rekey+0x10>

0001ba68 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1ba68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ba6a:	460e      	mov	r6, r1
   1ba6c:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1ba6e:	4605      	mov	r5, r0
{
   1ba70:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1ba72:	b1b8      	cbz	r0, 1baa4 <tc_hmac_set_key+0x3c>
   1ba74:	b341      	cbz	r1, 1bac8 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1ba76:	b34a      	cbz	r2, 1bacc <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1ba78:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1ba7a:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1ba7e:	d813      	bhi.n	1baa8 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1ba80:	a810      	add	r0, sp, #64	; 0x40
   1ba82:	f7f2 f843 	bl	db0c <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1ba86:	4622      	mov	r2, r4
   1ba88:	4669      	mov	r1, sp
   1ba8a:	a810      	add	r0, sp, #64	; 0x40
   1ba8c:	f7ff ff4b 	bl	1b926 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1ba90:	a910      	add	r1, sp, #64	; 0x40
   1ba92:	a834      	add	r0, sp, #208	; 0xd0
   1ba94:	f7ff ff6d 	bl	1b972 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1ba98:	4622      	mov	r2, r4
   1ba9a:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1ba9c:	4638      	mov	r0, r7
   1ba9e:	f7ff ffc6 	bl	1ba2e <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1baa2:	2001      	movs	r0, #1
}
   1baa4:	b04d      	add	sp, #308	; 0x134
   1baa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1baa8:	f7f2 f830 	bl	db0c <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1baac:	4622      	mov	r2, r4
   1baae:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1bab0:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1bab4:	4628      	mov	r0, r5
   1bab6:	f7ff ff36 	bl	1b926 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1baba:	4629      	mov	r1, r5
   1babc:	4620      	mov	r0, r4
   1babe:	f7ff ff58 	bl	1b972 <tc_sha256_final>
		rekey(ctx->key,
   1bac2:	2220      	movs	r2, #32
   1bac4:	4621      	mov	r1, r4
   1bac6:	e7e9      	b.n	1ba9c <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1bac8:	4608      	mov	r0, r1
   1baca:	e7eb      	b.n	1baa4 <tc_hmac_set_key+0x3c>
   1bacc:	4610      	mov	r0, r2
   1bace:	e7e9      	b.n	1baa4 <tc_hmac_set_key+0x3c>

0001bad0 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1bad0:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1bad2:	4604      	mov	r4, r0
   1bad4:	b140      	cbz	r0, 1bae8 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1bad6:	f7f2 f819 	bl	db0c <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1bada:	2240      	movs	r2, #64	; 0x40
   1badc:	4620      	mov	r0, r4
   1bade:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1bae2:	f7ff ff20 	bl	1b926 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1bae6:	2001      	movs	r0, #1
}
   1bae8:	bd10      	pop	{r4, pc}

0001baea <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1baea:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1baec:	b110      	cbz	r0, 1baf4 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1baee:	f7ff ff1a 	bl	1b926 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1baf2:	2001      	movs	r0, #1
}
   1baf4:	bd08      	pop	{r3, pc}

0001baf6 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1baf6:	b570      	push	{r4, r5, r6, lr}
   1baf8:	460e      	mov	r6, r1
   1bafa:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1bafc:	4605      	mov	r5, r0
   1bafe:	b1f0      	cbz	r0, 1bb3e <tc_hmac_final+0x48>
   1bb00:	2920      	cmp	r1, #32
   1bb02:	d11c      	bne.n	1bb3e <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1bb04:	b1ea      	cbz	r2, 1bb42 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1bb06:	4611      	mov	r1, r2
   1bb08:	f7ff ff33 	bl	1b972 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1bb0c:	4620      	mov	r0, r4
   1bb0e:	f7f1 fffd 	bl	db0c <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1bb12:	2240      	movs	r2, #64	; 0x40
   1bb14:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1bb18:	4620      	mov	r0, r4
   1bb1a:	f7ff ff04 	bl	1b926 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1bb1e:	4632      	mov	r2, r6
   1bb20:	4629      	mov	r1, r5
   1bb22:	4620      	mov	r0, r4
   1bb24:	f7ff feff 	bl	1b926 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1bb28:	4621      	mov	r1, r4
   1bb2a:	4628      	mov	r0, r5
   1bb2c:	f7ff ff21 	bl	1b972 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1bb30:	4620      	mov	r0, r4
   1bb32:	22f0      	movs	r2, #240	; 0xf0
   1bb34:	2100      	movs	r1, #0
   1bb36:	f7ff fcd8 	bl	1b4ea <_set>

	return TC_CRYPTO_SUCCESS;
   1bb3a:	2001      	movs	r0, #1
}
   1bb3c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1bb3e:	2000      	movs	r0, #0
   1bb40:	e7fc      	b.n	1bb3c <tc_hmac_final+0x46>
   1bb42:	4610      	mov	r0, r2
   1bb44:	e7fa      	b.n	1bb3c <tc_hmac_final+0x46>

0001bb46 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1bb46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb4a:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1bb4c:	f04f 0b01 	mov.w	fp, #1
{
   1bb50:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1bb52:	2300      	movs	r3, #0
{
   1bb54:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bb56:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1bb5a:	4631      	mov	r1, r6
{
   1bb5c:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bb5e:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1bb60:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1bb64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1bb68:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bb6c:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bb70:	f7ff ff7a 	bl	1ba68 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1bb74:	4620      	mov	r0, r4
   1bb76:	f7ff ffab 	bl	1bad0 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bb7a:	2220      	movs	r2, #32
   1bb7c:	4629      	mov	r1, r5
   1bb7e:	4620      	mov	r0, r4
   1bb80:	f7ff ffb3 	bl	1baea <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1bb84:	465a      	mov	r2, fp
   1bb86:	4620      	mov	r0, r4
   1bb88:	f10d 0106 	add.w	r1, sp, #6
   1bb8c:	f7ff ffad 	bl	1baea <tc_hmac_update>

	if (data && datalen)
   1bb90:	f1b8 0f00 	cmp.w	r8, #0
   1bb94:	d007      	beq.n	1bba6 <update+0x60>
   1bb96:	f1b9 0f00 	cmp.w	r9, #0
   1bb9a:	d004      	beq.n	1bba6 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1bb9c:	464a      	mov	r2, r9
   1bb9e:	4641      	mov	r1, r8
   1bba0:	4620      	mov	r0, r4
   1bba2:	f7ff ffa2 	bl	1baea <tc_hmac_update>
	if (additional_data && additional_datalen)
   1bba6:	b13f      	cbz	r7, 1bbb8 <update+0x72>
   1bba8:	f1ba 0f00 	cmp.w	sl, #0
   1bbac:	d004      	beq.n	1bbb8 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1bbae:	4652      	mov	r2, sl
   1bbb0:	4639      	mov	r1, r7
   1bbb2:	4620      	mov	r0, r4
   1bbb4:	f7ff ff99 	bl	1baea <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1bbb8:	4622      	mov	r2, r4
   1bbba:	2120      	movs	r1, #32
   1bbbc:	4630      	mov	r0, r6
   1bbbe:	f7ff ff9a 	bl	1baf6 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bbc2:	2220      	movs	r2, #32
   1bbc4:	4631      	mov	r1, r6
   1bbc6:	4620      	mov	r0, r4
   1bbc8:	f7ff ff4e 	bl	1ba68 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1bbcc:	4620      	mov	r0, r4
   1bbce:	f7ff ff7f 	bl	1bad0 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bbd2:	2220      	movs	r2, #32
   1bbd4:	4629      	mov	r1, r5
   1bbd6:	4620      	mov	r0, r4
   1bbd8:	f7ff ff87 	bl	1baea <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1bbdc:	4622      	mov	r2, r4
   1bbde:	2120      	movs	r1, #32
   1bbe0:	4628      	mov	r0, r5
   1bbe2:	f7ff ff88 	bl	1baf6 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1bbe6:	f1b8 0f00 	cmp.w	r8, #0
   1bbea:	d03a      	beq.n	1bc62 <update+0x11c>
   1bbec:	f1b9 0f00 	cmp.w	r9, #0
   1bbf0:	d037      	beq.n	1bc62 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bbf2:	2220      	movs	r2, #32
   1bbf4:	4631      	mov	r1, r6
   1bbf6:	4620      	mov	r0, r4
   1bbf8:	f7ff ff36 	bl	1ba68 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1bbfc:	4620      	mov	r0, r4
   1bbfe:	f7ff ff67 	bl	1bad0 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bc02:	2220      	movs	r2, #32
   1bc04:	4629      	mov	r1, r5
   1bc06:	4620      	mov	r0, r4
   1bc08:	f7ff ff6f 	bl	1baea <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1bc0c:	2201      	movs	r2, #1
   1bc0e:	f10d 0107 	add.w	r1, sp, #7
   1bc12:	4620      	mov	r0, r4
   1bc14:	f7ff ff69 	bl	1baea <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1bc18:	464a      	mov	r2, r9
   1bc1a:	4641      	mov	r1, r8
   1bc1c:	4620      	mov	r0, r4
   1bc1e:	f7ff ff64 	bl	1baea <tc_hmac_update>
	if (additional_data && additional_datalen)
   1bc22:	b13f      	cbz	r7, 1bc34 <update+0xee>
   1bc24:	f1ba 0f00 	cmp.w	sl, #0
   1bc28:	d004      	beq.n	1bc34 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1bc2a:	4652      	mov	r2, sl
   1bc2c:	4639      	mov	r1, r7
   1bc2e:	4620      	mov	r0, r4
   1bc30:	f7ff ff5b 	bl	1baea <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1bc34:	4622      	mov	r2, r4
   1bc36:	2120      	movs	r1, #32
   1bc38:	4630      	mov	r0, r6
   1bc3a:	f7ff ff5c 	bl	1baf6 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bc3e:	2220      	movs	r2, #32
   1bc40:	4631      	mov	r1, r6
   1bc42:	4620      	mov	r0, r4
   1bc44:	f7ff ff10 	bl	1ba68 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1bc48:	4620      	mov	r0, r4
   1bc4a:	f7ff ff41 	bl	1bad0 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bc4e:	2220      	movs	r2, #32
   1bc50:	4629      	mov	r1, r5
   1bc52:	4620      	mov	r0, r4
   1bc54:	f7ff ff49 	bl	1baea <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1bc58:	4622      	mov	r2, r4
   1bc5a:	2120      	movs	r1, #32
   1bc5c:	4628      	mov	r0, r5
   1bc5e:	f7ff ff4a 	bl	1baf6 <tc_hmac_final>
}
   1bc62:	b003      	add	sp, #12
   1bc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001bc68 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1bc68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bc6a:	460c      	mov	r4, r1
   1bc6c:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1bc6e:	4605      	mov	r5, r0
   1bc70:	b1b0      	cbz	r0, 1bca0 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1bc72:	b1b9      	cbz	r1, 1bca4 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1bc74:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1bc76:	2220      	movs	r2, #32
   1bc78:	2100      	movs	r1, #0
   1bc7a:	30f0      	adds	r0, #240	; 0xf0
   1bc7c:	f7ff fc35 	bl	1b4ea <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1bc80:	2220      	movs	r2, #32
   1bc82:	2101      	movs	r1, #1
   1bc84:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1bc88:	f7ff fc2f 	bl	1b4ea <_set>
	update(prng, personalization, plen, 0, 0);
   1bc8c:	4628      	mov	r0, r5
   1bc8e:	4633      	mov	r3, r6
   1bc90:	463a      	mov	r2, r7
   1bc92:	4621      	mov	r1, r4
   1bc94:	9600      	str	r6, [sp, #0]
   1bc96:	f7ff ff56 	bl	1bb46 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1bc9a:	2001      	movs	r0, #1
	prng->countdown = 0;
   1bc9c:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1bca0:	b003      	add	sp, #12
   1bca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1bca4:	4608      	mov	r0, r1
   1bca6:	e7fb      	b.n	1bca0 <tc_hmac_prng_init+0x38>

0001bca8 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1bca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bcaa:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1bcac:	4605      	mov	r5, r0
   1bcae:	b180      	cbz	r0, 1bcd2 <tc_hmac_prng_reseed+0x2a>
   1bcb0:	b179      	cbz	r1, 1bcd2 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1bcb2:	2a1f      	cmp	r2, #31
   1bcb4:	d90d      	bls.n	1bcd2 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1bcb6:	b153      	cbz	r3, 1bcce <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1bcb8:	b16c      	cbz	r4, 1bcd6 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1bcba:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1bcbc:	f7ff ff43 	bl	1bb46 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1bcc0:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1bcc4:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1bcc6:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1bcca:	b003      	add	sp, #12
   1bccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1bcce:	9300      	str	r3, [sp, #0]
   1bcd0:	e7f4      	b.n	1bcbc <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1bcd2:	2000      	movs	r0, #0
   1bcd4:	e7f9      	b.n	1bcca <tc_hmac_prng_reseed+0x22>
   1bcd6:	4620      	mov	r0, r4
   1bcd8:	e7f7      	b.n	1bcca <tc_hmac_prng_reseed+0x22>

0001bcda <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1bcda:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1bcde:	460d      	mov	r5, r1
   1bce0:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1bce2:	4680      	mov	r8, r0
   1bce4:	b3d8      	cbz	r0, 1bd5e <tc_hmac_prng_generate+0x84>
   1bce6:	b3d2      	cbz	r2, 1bd5e <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1bce8:	1e4b      	subs	r3, r1, #1
   1bcea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1bcee:	d236      	bcs.n	1bd5e <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1bcf0:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1bcf4:	b3ab      	cbz	r3, 1bd62 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1bcf6:	3b01      	subs	r3, #1
   1bcf8:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bcfc:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bd00:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1bd04:	2220      	movs	r2, #32
   1bd06:	4649      	mov	r1, r9
   1bd08:	4620      	mov	r0, r4
   1bd0a:	f7ff fead 	bl	1ba68 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1bd0e:	4620      	mov	r0, r4
   1bd10:	f7ff fede 	bl	1bad0 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1bd14:	2220      	movs	r2, #32
   1bd16:	4639      	mov	r1, r7
   1bd18:	4620      	mov	r0, r4
   1bd1a:	f7ff fee6 	bl	1baea <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1bd1e:	4622      	mov	r2, r4
   1bd20:	2120      	movs	r1, #32
   1bd22:	4638      	mov	r0, r7
   1bd24:	f7ff fee7 	bl	1baf6 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1bd28:	2d20      	cmp	r5, #32
   1bd2a:	462e      	mov	r6, r5
   1bd2c:	bf28      	it	cs
   1bd2e:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1bd30:	4640      	mov	r0, r8
   1bd32:	4633      	mov	r3, r6
   1bd34:	463a      	mov	r2, r7
   1bd36:	4631      	mov	r1, r6
   1bd38:	f7ff fbca 	bl	1b4d0 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1bd3c:	2d20      	cmp	r5, #32
   1bd3e:	bf38      	it	cc
   1bd40:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1bd42:	3d20      	subs	r5, #32
		out += bufferlen;
   1bd44:	44b0      	add	r8, r6
	while (outlen != 0) {
   1bd46:	d1dd      	bne.n	1bd04 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1bd48:	4620      	mov	r0, r4
   1bd4a:	462b      	mov	r3, r5
   1bd4c:	462a      	mov	r2, r5
   1bd4e:	4629      	mov	r1, r5
   1bd50:	9500      	str	r5, [sp, #0]
   1bd52:	f7ff fef8 	bl	1bb46 <update>

	return TC_CRYPTO_SUCCESS;
   1bd56:	2001      	movs	r0, #1
}
   1bd58:	b003      	add	sp, #12
   1bd5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1bd5e:	2000      	movs	r0, #0
   1bd60:	e7fa      	b.n	1bd58 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1bd62:	f04f 30ff 	mov.w	r0, #4294967295
   1bd66:	e7f7      	b.n	1bd58 <tc_hmac_prng_generate+0x7e>

0001bd68 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1bd68:	2100      	movs	r1, #0
   1bd6a:	2001      	movs	r0, #1
   1bd6c:	f7f1 bfec 	b.w	dd48 <z_arm_fatal_error>

0001bd70 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1bd70:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1bd72:	f383 880b 	msr	PSPLIM, r3
}
   1bd76:	4770      	bx	lr

0001bd78 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1bd78:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1bd7a:	6800      	ldr	r0, [r0, #0]
   1bd7c:	f7f1 bfe4 	b.w	dd48 <z_arm_fatal_error>

0001bd80 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1bd80:	b508      	push	{r3, lr}
	handler();
   1bd82:	f7f2 f80f 	bl	dda4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1bd86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1bd8a:	f7f2 ba53 	b.w	e234 <z_arm_exc_exit>

0001bd8e <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1bd8e:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1bd92:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1bd96:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1bd98:	bf08      	it	eq
   1bd9a:	f06f 0015 	mvneq.w	r0, #21
   1bd9e:	4770      	bx	lr

0001bda0 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1bda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bda4:	4684      	mov	ip, r0
   1bda6:	4688      	mov	r8, r1
	register const char *s = nptr;
   1bda8:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1bdaa:	4621      	mov	r1, r4
   1bdac:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1bdb0:	2b20      	cmp	r3, #32
   1bdb2:	d0fa      	beq.n	1bdaa <strtol+0xa>
   1bdb4:	f1a3 0009 	sub.w	r0, r3, #9
   1bdb8:	2804      	cmp	r0, #4
   1bdba:	d9f6      	bls.n	1bdaa <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   1bdbc:	2b2d      	cmp	r3, #45	; 0x2d
   1bdbe:	d12d      	bne.n	1be1c <strtol+0x7c>
		neg = 1;
		c = *s++;
   1bdc0:	784b      	ldrb	r3, [r1, #1]
   1bdc2:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1bdc4:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1bdc6:	2a00      	cmp	r2, #0
   1bdc8:	d05a      	beq.n	1be80 <strtol+0xe0>
   1bdca:	2a10      	cmp	r2, #16
   1bdcc:	d109      	bne.n	1bde2 <strtol+0x42>
   1bdce:	2b30      	cmp	r3, #48	; 0x30
   1bdd0:	d107      	bne.n	1bde2 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1bdd2:	7823      	ldrb	r3, [r4, #0]
   1bdd4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1bdd8:	2b58      	cmp	r3, #88	; 0x58
   1bdda:	d14c      	bne.n	1be76 <strtol+0xd6>
		c = s[1];
		s += 2;
		base = 16;
   1bddc:	2210      	movs	r2, #16
		c = s[1];
   1bdde:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1bde0:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1bde2:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1bde4:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1bde8:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1bdea:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1bdee:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1bdf0:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1bdf4:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1bdf8:	2d09      	cmp	r5, #9
   1bdfa:	d815      	bhi.n	1be28 <strtol+0x88>
			c -= '0';
   1bdfc:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1bdfe:	429a      	cmp	r2, r3
   1be00:	dd22      	ble.n	1be48 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1be02:	1c75      	adds	r5, r6, #1
   1be04:	d007      	beq.n	1be16 <strtol+0x76>
   1be06:	4570      	cmp	r0, lr
   1be08:	d81b      	bhi.n	1be42 <strtol+0xa2>
   1be0a:	d101      	bne.n	1be10 <strtol+0x70>
   1be0c:	454b      	cmp	r3, r9
   1be0e:	dc18      	bgt.n	1be42 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
   1be10:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1be12:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1be16:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1be1a:	e7eb      	b.n	1bdf4 <strtol+0x54>
	} else if (c == '+') {
   1be1c:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1be1e:	bf04      	itt	eq
   1be20:	784b      	ldrbeq	r3, [r1, #1]
   1be22:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1be24:	2100      	movs	r1, #0
   1be26:	e7ce      	b.n	1bdc6 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1be28:	f043 0520 	orr.w	r5, r3, #32
   1be2c:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1be2e:	2d19      	cmp	r5, #25
   1be30:	d80a      	bhi.n	1be48 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1be32:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1be36:	2d1a      	cmp	r5, #26
   1be38:	bf34      	ite	cc
   1be3a:	2537      	movcc	r5, #55	; 0x37
   1be3c:	2557      	movcs	r5, #87	; 0x57
   1be3e:	1b5b      	subs	r3, r3, r5
   1be40:	e7dd      	b.n	1bdfe <strtol+0x5e>
			any = -1;
   1be42:	f04f 36ff 	mov.w	r6, #4294967295
   1be46:	e7e6      	b.n	1be16 <strtol+0x76>
		}
	}

	if (any < 0) {
   1be48:	1c73      	adds	r3, r6, #1
   1be4a:	d109      	bne.n	1be60 <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1be4c:	f7fb feaa 	bl	17ba4 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1be50:	2326      	movs	r3, #38	; 0x26
   1be52:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1be54:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1be56:	f1b8 0f00 	cmp.w	r8, #0
   1be5a:	d107      	bne.n	1be6c <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1be5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1be60:	b101      	cbz	r1, 1be64 <strtol+0xc4>
		acc = -acc;
   1be62:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1be64:	f1b8 0f00 	cmp.w	r8, #0
   1be68:	d0f8      	beq.n	1be5c <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   1be6a:	b10e      	cbz	r6, 1be70 <strtol+0xd0>
   1be6c:	f104 3cff 	add.w	ip, r4, #4294967295
   1be70:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1be74:	e7f2      	b.n	1be5c <strtol+0xbc>
	if (base == 0) {
   1be76:	2330      	movs	r3, #48	; 0x30
   1be78:	2a00      	cmp	r2, #0
   1be7a:	d1b2      	bne.n	1bde2 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1be7c:	2208      	movs	r2, #8
   1be7e:	e7b0      	b.n	1bde2 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1be80:	2b30      	cmp	r3, #48	; 0x30
   1be82:	d0a6      	beq.n	1bdd2 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1be84:	220a      	movs	r2, #10
   1be86:	e7ac      	b.n	1bde2 <strtol+0x42>

0001be88 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1be88:	4603      	mov	r3, r0
   1be8a:	3901      	subs	r1, #1
   1be8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1be90:	b90a      	cbnz	r2, 1be96 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1be92:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1be94:	4770      	bx	lr
		*d = *s;
   1be96:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1be9a:	e7f7      	b.n	1be8c <strcpy+0x4>

0001be9c <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1be9c:	b570      	push	{r4, r5, r6, lr}
   1be9e:	4605      	mov	r5, r0
   1bea0:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1bea2:	b142      	cbz	r2, 1beb6 <strncpy+0x1a>
   1bea4:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1bea8:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1beaa:	b92c      	cbnz	r4, 1beb8 <strncpy+0x1c>
   1beac:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1beae:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1beb2:	429a      	cmp	r2, r3
   1beb4:	d1fb      	bne.n	1beae <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1beb6:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1beb8:	4632      	mov	r2, r6
		*d = *s;
   1beba:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1bebe:	e7ef      	b.n	1bea0 <strncpy+0x4>

0001bec0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1bec0:	4603      	mov	r3, r0
	size_t n = 0;
   1bec2:	2000      	movs	r0, #0

	while (*s != '\0') {
   1bec4:	5c1a      	ldrb	r2, [r3, r0]
   1bec6:	b902      	cbnz	r2, 1beca <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1bec8:	4770      	bx	lr
		n++;
   1beca:	3001      	adds	r0, #1
   1becc:	e7fa      	b.n	1bec4 <strlen+0x4>

0001bece <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1bece:	4603      	mov	r3, r0
	size_t n = 0;
   1bed0:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1bed2:	5c1a      	ldrb	r2, [r3, r0]
   1bed4:	b10a      	cbz	r2, 1beda <strnlen+0xc>
   1bed6:	4288      	cmp	r0, r1
   1bed8:	d100      	bne.n	1bedc <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1beda:	4770      	bx	lr
		n++;
   1bedc:	3001      	adds	r0, #1
   1bede:	e7f8      	b.n	1bed2 <strnlen+0x4>

0001bee0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1bee0:	1e43      	subs	r3, r0, #1
   1bee2:	3901      	subs	r1, #1
   1bee4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1bee8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1beec:	4282      	cmp	r2, r0
   1beee:	d101      	bne.n	1bef4 <strcmp+0x14>
   1bef0:	2a00      	cmp	r2, #0
   1bef2:	d1f7      	bne.n	1bee4 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1bef4:	1a10      	subs	r0, r2, r0
   1bef6:	4770      	bx	lr

0001bef8 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1bef8:	b510      	push	{r4, lr}
   1befa:	3901      	subs	r1, #1
   1befc:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1befe:	4282      	cmp	r2, r0
   1bf00:	d009      	beq.n	1bf16 <strncmp+0x1e>
   1bf02:	7803      	ldrb	r3, [r0, #0]
   1bf04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1bf08:	42a3      	cmp	r3, r4
   1bf0a:	d100      	bne.n	1bf0e <strncmp+0x16>
   1bf0c:	b90b      	cbnz	r3, 1bf12 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1bf0e:	1b18      	subs	r0, r3, r4
   1bf10:	e002      	b.n	1bf18 <strncmp+0x20>
		s1++;
   1bf12:	3001      	adds	r0, #1
		n--;
   1bf14:	e7f3      	b.n	1befe <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   1bf16:	2000      	movs	r0, #0
}
   1bf18:	bd10      	pop	{r4, pc}

0001bf1a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1bf1a:	4603      	mov	r3, r0
   1bf1c:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1bf1e:	b15a      	cbz	r2, 1bf38 <memcmp+0x1e>
   1bf20:	3901      	subs	r1, #1
   1bf22:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1bf24:	f813 0b01 	ldrb.w	r0, [r3], #1
   1bf28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1bf2c:	42a3      	cmp	r3, r4
   1bf2e:	d001      	beq.n	1bf34 <memcmp+0x1a>
   1bf30:	4290      	cmp	r0, r2
   1bf32:	d0f7      	beq.n	1bf24 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1bf34:	1a80      	subs	r0, r0, r2
}
   1bf36:	bd10      	pop	{r4, pc}
		return 0;
   1bf38:	4610      	mov	r0, r2
   1bf3a:	e7fc      	b.n	1bf36 <memcmp+0x1c>

0001bf3c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1bf3c:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1bf3e:	ea81 0400 	eor.w	r4, r1, r0
   1bf42:	07a5      	lsls	r5, r4, #30
   1bf44:	4603      	mov	r3, r0
   1bf46:	d00b      	beq.n	1bf60 <memcpy+0x24>
   1bf48:	3b01      	subs	r3, #1
   1bf4a:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1bf4c:	4291      	cmp	r1, r2
   1bf4e:	d11b      	bne.n	1bf88 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1bf50:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1bf52:	2a00      	cmp	r2, #0
   1bf54:	d0fc      	beq.n	1bf50 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1bf56:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1bf5a:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1bf5c:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1bf60:	079c      	lsls	r4, r3, #30
   1bf62:	d1f6      	bne.n	1bf52 <memcpy+0x16>
   1bf64:	f022 0403 	bic.w	r4, r2, #3
   1bf68:	1f1d      	subs	r5, r3, #4
   1bf6a:	0896      	lsrs	r6, r2, #2
   1bf6c:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1bf6e:	42b9      	cmp	r1, r7
   1bf70:	d105      	bne.n	1bf7e <memcpy+0x42>
   1bf72:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
   1bf76:	4423      	add	r3, r4
   1bf78:	fb05 2206 	mla	r2, r5, r6, r2
   1bf7c:	e7e4      	b.n	1bf48 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1bf7e:	f851 cb04 	ldr.w	ip, [r1], #4
   1bf82:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1bf86:	e7f2      	b.n	1bf6e <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1bf88:	f811 4b01 	ldrb.w	r4, [r1], #1
   1bf8c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1bf90:	e7dc      	b.n	1bf4c <memcpy+0x10>

0001bf92 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1bf92:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1bf94:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
   1bf96:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1bf98:	07a3      	lsls	r3, r4, #30
   1bf9a:	d111      	bne.n	1bfc0 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1bf9c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   1bfa0:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1bfa4:	f022 0303 	bic.w	r3, r2, #3
   1bfa8:	0896      	lsrs	r6, r2, #2
   1bfaa:	4423      	add	r3, r4
   1bfac:	429c      	cmp	r4, r3
   1bfae:	d10d      	bne.n	1bfcc <memset+0x3a>
   1bfb0:	f06f 0403 	mvn.w	r4, #3
   1bfb4:	fb04 2206 	mla	r2, r4, r6, r2
   1bfb8:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1bfba:	4293      	cmp	r3, r2
   1bfbc:	d109      	bne.n	1bfd2 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1bfbe:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1bfc0:	2a00      	cmp	r2, #0
   1bfc2:	d0fc      	beq.n	1bfbe <memset+0x2c>
		*(d_byte++) = c_byte;
   1bfc4:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   1bfc8:	3a01      	subs	r2, #1
   1bfca:	e7e5      	b.n	1bf98 <memset+0x6>
		*(d_word++) = c_word;
   1bfcc:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   1bfd0:	e7ec      	b.n	1bfac <memset+0x1a>
		*(d_byte++) = c_byte;
   1bfd2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1bfd6:	e7f0      	b.n	1bfba <memset+0x28>

0001bfd8 <_stdout_hook_default>:
}
   1bfd8:	f04f 30ff 	mov.w	r0, #4294967295
   1bfdc:	4770      	bx	lr

0001bfde <bt_settings_decode_key>:
{
   1bfde:	b570      	push	{r4, r5, r6, lr}
   1bfe0:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1bfe2:	2100      	movs	r1, #0
{
   1bfe4:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1bfe6:	f7ff f884 	bl	1b0f2 <settings_name_next>
   1bfea:	280d      	cmp	r0, #13
   1bfec:	d118      	bne.n	1c020 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1bfee:	7b23      	ldrb	r3, [r4, #12]
   1bff0:	2b30      	cmp	r3, #48	; 0x30
   1bff2:	d111      	bne.n	1c018 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1bff4:	2300      	movs	r3, #0
   1bff6:	702b      	strb	r3, [r5, #0]
   1bff8:	f104 060c 	add.w	r6, r4, #12
   1bffc:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1bffe:	462a      	mov	r2, r5
   1c000:	4620      	mov	r0, r4
   1c002:	2301      	movs	r3, #1
   1c004:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   1c006:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1c008:	f7fe fcf3 	bl	1a9f2 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1c00c:	42b4      	cmp	r4, r6
   1c00e:	f105 35ff 	add.w	r5, r5, #4294967295
   1c012:	d1f4      	bne.n	1bffe <bt_settings_decode_key+0x20>
	return 0;
   1c014:	2000      	movs	r0, #0
}
   1c016:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1c018:	2b31      	cmp	r3, #49	; 0x31
   1c01a:	d101      	bne.n	1c020 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1c01c:	2301      	movs	r3, #1
   1c01e:	e7ea      	b.n	1bff6 <bt_settings_decode_key+0x18>
		return -EINVAL;
   1c020:	f06f 0015 	mvn.w	r0, #21
   1c024:	e7f7      	b.n	1c016 <bt_settings_decode_key+0x38>

0001c026 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1c026:	b510      	push	{r4, lr}
   1c028:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1c02a:	7801      	ldrb	r1, [r0, #0]
   1c02c:	7822      	ldrb	r2, [r4, #0]
{
   1c02e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1c030:	428a      	cmp	r2, r1
   1c032:	d00f      	beq.n	1c054 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1c034:	4669      	mov	r1, sp
   1c036:	f7f2 fca3 	bl	e980 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1c03a:	4620      	mov	r0, r4
   1c03c:	a905      	add	r1, sp, #20
   1c03e:	f7f2 fc9f 	bl	e980 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1c042:	2210      	movs	r2, #16
   1c044:	f10d 0115 	add.w	r1, sp, #21
   1c048:	f10d 0001 	add.w	r0, sp, #1
   1c04c:	f7ff ff65 	bl	1bf1a <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1c050:	b00a      	add	sp, #40	; 0x28
   1c052:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1c054:	2a01      	cmp	r2, #1
   1c056:	d006      	beq.n	1c066 <bt_uuid_cmp+0x40>
   1c058:	2a02      	cmp	r2, #2
   1c05a:	d007      	beq.n	1c06c <bt_uuid_cmp+0x46>
   1c05c:	b972      	cbnz	r2, 1c07c <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1c05e:	8840      	ldrh	r0, [r0, #2]
   1c060:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1c062:	1ac0      	subs	r0, r0, r3
   1c064:	e7f4      	b.n	1c050 <bt_uuid_cmp+0x2a>
   1c066:	6840      	ldr	r0, [r0, #4]
   1c068:	6863      	ldr	r3, [r4, #4]
   1c06a:	e7fa      	b.n	1c062 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1c06c:	2210      	movs	r2, #16
   1c06e:	1c61      	adds	r1, r4, #1
   1c070:	3001      	adds	r0, #1
}
   1c072:	b00a      	add	sp, #40	; 0x28
   1c074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1c078:	f7ff bf4f 	b.w	1bf1a <memcmp>
	switch (u1->type) {
   1c07c:	f06f 0015 	mvn.w	r0, #21
   1c080:	e7e6      	b.n	1c050 <bt_uuid_cmp+0x2a>

0001c082 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1c082:	2a04      	cmp	r2, #4
{
   1c084:	b510      	push	{r4, lr}
	switch (data_len) {
   1c086:	d00a      	beq.n	1c09e <bt_uuid_create+0x1c>
   1c088:	2a10      	cmp	r2, #16
   1c08a:	d00d      	beq.n	1c0a8 <bt_uuid_create+0x26>
   1c08c:	2a02      	cmp	r2, #2
   1c08e:	f04f 0300 	mov.w	r3, #0
   1c092:	d10f      	bne.n	1c0b4 <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1c094:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1c096:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1c098:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1c09a:	2001      	movs	r0, #1
}
   1c09c:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1c09e:	2301      	movs	r3, #1
   1c0a0:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1c0a2:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1c0a4:	6042      	str	r2, [r0, #4]
		break;
   1c0a6:	e7f8      	b.n	1c09a <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1c0a8:	2302      	movs	r3, #2
   1c0aa:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1c0ae:	f7ff ff45 	bl	1bf3c <memcpy>
		break;
   1c0b2:	e7f2      	b.n	1c09a <bt_uuid_create+0x18>
	switch (data_len) {
   1c0b4:	4618      	mov	r0, r3
   1c0b6:	e7f1      	b.n	1c09c <bt_uuid_create+0x1a>

0001c0b8 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1c0b8:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1c0ba:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1c0bc:	2106      	movs	r1, #6
{
   1c0be:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1c0c0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1c0c4:	f7f5 f850 	bl	11168 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1c0c8:	b918      	cbnz	r0, 1c0d2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1c0ca:	79a3      	ldrb	r3, [r4, #6]
   1c0cc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1c0d0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1c0d2:	bd10      	pop	{r4, pc}

0001c0d4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1c0d4:	280f      	cmp	r0, #15
   1c0d6:	d806      	bhi.n	1c0e6 <bt_hci_evt_get_flags+0x12>
   1c0d8:	280d      	cmp	r0, #13
   1c0da:	d80b      	bhi.n	1c0f4 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1c0dc:	2805      	cmp	r0, #5
   1c0de:	bf14      	ite	ne
   1c0e0:	2002      	movne	r0, #2
   1c0e2:	2003      	moveq	r0, #3
   1c0e4:	4770      	bx	lr
	switch (evt) {
   1c0e6:	2813      	cmp	r0, #19
   1c0e8:	d004      	beq.n	1c0f4 <bt_hci_evt_get_flags+0x20>
   1c0ea:	281a      	cmp	r0, #26
   1c0ec:	bf14      	ite	ne
   1c0ee:	2002      	movne	r0, #2
   1c0f0:	2001      	moveq	r0, #1
   1c0f2:	4770      	bx	lr
   1c0f4:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1c0f6:	4770      	bx	lr

0001c0f8 <get_adv_channel_map>:
{
   1c0f8:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1c0fa:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1c0fe:	bf0c      	ite	eq
   1c100:	2007      	moveq	r0, #7
   1c102:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1c104:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1c106:	bf48      	it	mi
   1c108:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1c10c:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1c10e:	bf48      	it	mi
   1c110:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1c114:	4770      	bx	lr

0001c116 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c116:	e8d0 0faf 	lda	r0, [r0]
}
   1c11a:	4770      	bx	lr

0001c11c <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1c11c:	2207      	movs	r2, #7
   1c11e:	f7ff bf0d 	b.w	1bf3c <memcpy>

0001c122 <atomic_or>:
{
   1c122:	4603      	mov	r3, r0
}
   1c124:	e8d3 0fef 	ldaex	r0, [r3]
   1c128:	ea40 0201 	orr.w	r2, r0, r1
   1c12c:	e8c3 2fec 	stlex	ip, r2, [r3]
   1c130:	f1bc 0f00 	cmp.w	ip, #0
   1c134:	d1f6      	bne.n	1c124 <atomic_or+0x2>
   1c136:	4770      	bx	lr

0001c138 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1c138:	2207      	movs	r2, #7
   1c13a:	f7ff beee 	b.w	1bf1a <memcmp>

0001c13e <atomic_and>:
{
   1c13e:	4603      	mov	r3, r0
}
   1c140:	e8d3 0fef 	ldaex	r0, [r3]
   1c144:	ea00 0201 	and.w	r2, r0, r1
   1c148:	e8c3 2fec 	stlex	ip, r2, [r3]
   1c14c:	f1bc 0f00 	cmp.w	ip, #0
   1c150:	d1f6      	bne.n	1c140 <atomic_and+0x2>
   1c152:	4770      	bx	lr

0001c154 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1c154:	460b      	mov	r3, r1
   1c156:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c158:	f001 041f 	and.w	r4, r1, #31
   1c15c:	2101      	movs	r1, #1

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c15e:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1c160:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c162:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   1c166:	b112      	cbz	r2, 1c16e <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1c168:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c16a:	f7ff bfda 	b.w	1c122 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c16e:	43c9      	mvns	r1, r1
}
   1c170:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c172:	f7ff bfe4 	b.w	1c13e <atomic_and>

0001c176 <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1c176:	f100 0210 	add.w	r2, r0, #16
{
   1c17a:	b508      	push	{r3, lr}
   1c17c:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c17e:	4610      	mov	r0, r2
   1c180:	f7ff ffc9 	bl	1c116 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1c184:	0640      	lsls	r0, r0, #25
   1c186:	d50a      	bpl.n	1c19e <adv_id_check_connectable_func+0x28>
   1c188:	4610      	mov	r0, r2
   1c18a:	f7ff ffc4 	bl	1c116 <atomic_get>
   1c18e:	05c2      	lsls	r2, r0, #23
   1c190:	d505      	bpl.n	1c19e <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   1c192:	781a      	ldrb	r2, [r3, #0]
   1c194:	780b      	ldrb	r3, [r1, #0]
   1c196:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   1c198:	bf1c      	itt	ne
   1c19a:	2301      	movne	r3, #1
   1c19c:	704b      	strbne	r3, [r1, #1]
}
   1c19e:	bd08      	pop	{r3, pc}

0001c1a0 <le_set_private_addr.constprop.0>:
static int le_set_private_addr(uint8_t id)
   1c1a0:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1c1a2:	2106      	movs	r1, #6
   1c1a4:	4668      	mov	r0, sp
   1c1a6:	f7f4 ffdf 	bl	11168 <bt_rand>
	if (err) {
   1c1aa:	b940      	cbnz	r0, 1c1be <le_set_private_addr.constprop.0+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1c1ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1c1b0:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1c1b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c1b6:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1c1ba:	f7f3 f8e9 	bl	f390 <set_random_address>
}
   1c1be:	b003      	add	sp, #12
   1c1c0:	f85d fb04 	ldr.w	pc, [sp], #4

0001c1c4 <bt_lookup_id_addr>:
}
   1c1c4:	4608      	mov	r0, r1
   1c1c6:	4770      	bx	lr

0001c1c8 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1c1c8:	f7f3 bb3a 	b.w	f840 <bt_le_create_conn_legacy>

0001c1cc <bt_hci_disconnect>:
{
   1c1cc:	b570      	push	{r4, r5, r6, lr}
   1c1ce:	4606      	mov	r6, r0
   1c1d0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1c1d2:	f240 4006 	movw	r0, #1030	; 0x406
   1c1d6:	2103      	movs	r1, #3
   1c1d8:	f7f3 f80e 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
   1c1dc:	4604      	mov	r4, r0
   1c1de:	b168      	cbz	r0, 1c1fc <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1c1e0:	2103      	movs	r1, #3
   1c1e2:	3008      	adds	r0, #8
   1c1e4:	f7f9 fd06 	bl	15bf4 <net_buf_simple_add>
	disconn->reason = reason;
   1c1e8:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1c1ea:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1c1ec:	4621      	mov	r1, r4
}
   1c1ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1c1f2:	2200      	movs	r2, #0
   1c1f4:	f240 4006 	movw	r0, #1030	; 0x406
   1c1f8:	f7f3 b848 	b.w	f28c <bt_hci_cmd_send_sync>
}
   1c1fc:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c200:	bd70      	pop	{r4, r5, r6, pc}

0001c202 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1c202:	8803      	ldrh	r3, [r0, #0]
   1c204:	8842      	ldrh	r2, [r0, #2]
{
   1c206:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1c208:	4293      	cmp	r3, r2
   1c20a:	d819      	bhi.n	1c240 <bt_le_conn_params_valid+0x3e>
   1c20c:	2b05      	cmp	r3, #5
   1c20e:	d917      	bls.n	1c240 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1c210:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1c214:	d814      	bhi.n	1c240 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1c216:	8883      	ldrh	r3, [r0, #4]
   1c218:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1c21c:	d210      	bcs.n	1c240 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1c21e:	f640 4476 	movw	r4, #3190	; 0xc76
   1c222:	88c0      	ldrh	r0, [r0, #6]
   1c224:	f1a0 010a 	sub.w	r1, r0, #10
   1c228:	b289      	uxth	r1, r1
   1c22a:	42a1      	cmp	r1, r4
   1c22c:	d808      	bhi.n	1c240 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1c22e:	3301      	adds	r3, #1
   1c230:	b29b      	uxth	r3, r3
   1c232:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1c234:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1c238:	bf34      	ite	cc
   1c23a:	2001      	movcc	r0, #1
   1c23c:	2000      	movcs	r0, #0
}
   1c23e:	bd10      	pop	{r4, pc}
		return false;
   1c240:	2000      	movs	r0, #0
   1c242:	e7fc      	b.n	1c23e <bt_le_conn_params_valid+0x3c>

0001c244 <bt_le_set_data_len>:
{
   1c244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c246:	4607      	mov	r7, r0
   1c248:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c24a:	f242 0022 	movw	r0, #8226	; 0x2022
   1c24e:	2106      	movs	r1, #6
{
   1c250:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c252:	f7f2 ffd1 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
   1c256:	4604      	mov	r4, r0
   1c258:	b170      	cbz	r0, 1c278 <bt_le_set_data_len+0x34>
   1c25a:	2106      	movs	r1, #6
   1c25c:	3008      	adds	r0, #8
   1c25e:	f7f9 fcc9 	bl	15bf4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c262:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c264:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c266:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1c268:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1c26a:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c26c:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1c270:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c274:	f7f3 bd06 	b.w	fc84 <bt_hci_cmd_send>
}
   1c278:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c27e <bt_le_set_phy>:
{
   1c27e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c282:	4680      	mov	r8, r0
   1c284:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c286:	f242 0032 	movw	r0, #8242	; 0x2032
   1c28a:	2107      	movs	r1, #7
{
   1c28c:	4616      	mov	r6, r2
   1c28e:	461d      	mov	r5, r3
   1c290:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c294:	f7f2 ffb0 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
   1c298:	4604      	mov	r4, r0
   1c29a:	b190      	cbz	r0, 1c2c2 <bt_le_set_phy+0x44>
   1c29c:	2107      	movs	r1, #7
   1c29e:	3008      	adds	r0, #8
   1c2a0:	f7f9 fca8 	bl	15bf4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c2a4:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1c2a8:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1c2aa:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1c2ac:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c2ae:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1c2b0:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1c2b4:	4621      	mov	r1, r4
}
   1c2b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1c2ba:	f242 0032 	movw	r0, #8242	; 0x2032
   1c2be:	f7f3 bce1 	b.w	fc84 <bt_hci_cmd_send>
}
   1c2c2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c2ca <bt_addr_le_is_bonded>:
}
   1c2ca:	2000      	movs	r0, #0
   1c2cc:	4770      	bx	lr

0001c2ce <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1c2ce:	6880      	ldr	r0, [r0, #8]
   1c2d0:	f7f4 bd54 	b.w	10d7c <enh_conn_complete>

0001c2d4 <le_legacy_conn_complete>:
{
   1c2d4:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1c2d6:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1c2d8:	6881      	ldr	r1, [r0, #8]
{
   1c2da:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1c2dc:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1c2de:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   1c2e0:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1c2e4:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1c2e8:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1c2ea:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1c2ee:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1c2f2:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1c2f6:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1c2fa:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1c2fe:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1c302:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1c306:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1c30a:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1c30e:	7b4b      	ldrb	r3, [r1, #13]
   1c310:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1c314:	f7ff ff02 	bl	1c11c <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   1c318:	4669      	mov	r1, sp
   1c31a:	2206      	movs	r2, #6
   1c31c:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1c320:	9400      	str	r4, [sp, #0]
   1c322:	f8ad 4004 	strh.w	r4, [sp, #4]
   1c326:	f7ff fe09 	bl	1bf3c <memcpy>
   1c32a:	2206      	movs	r2, #6
   1c32c:	4669      	mov	r1, sp
   1c32e:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1c332:	9400      	str	r4, [sp, #0]
   1c334:	f8ad 4004 	strh.w	r4, [sp, #4]
   1c338:	f7ff fe00 	bl	1bf3c <memcpy>
	enh_conn_complete(&enh);
   1c33c:	a802      	add	r0, sp, #8
   1c33e:	f7f4 fd1d 	bl	10d7c <enh_conn_complete>
}
   1c342:	b00a      	add	sp, #40	; 0x28
   1c344:	bd10      	pop	{r4, pc}

0001c346 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c346:	e8d0 0faf 	lda	r0, [r0]
}
   1c34a:	4770      	bx	lr

0001c34c <tx_notify>:
{
   1c34c:	b570      	push	{r4, r5, r6, lr}
   1c34e:	4604      	mov	r4, r0
	__asm__ volatile(
   1c350:	f04f 0220 	mov.w	r2, #32
   1c354:	f3ef 8311 	mrs	r3, BASEPRI
   1c358:	f382 8811 	msr	BASEPRI, r2
   1c35c:	f3bf 8f6f 	isb	sy
	return list->head;
   1c360:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1c362:	b920      	cbnz	r0, 1c36e <tx_notify+0x22>
	__asm__ volatile(
   1c364:	f383 8811 	msr	BASEPRI, r3
   1c368:	f3bf 8f6f 	isb	sy
}
   1c36c:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c36e:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1c370:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c372:	4288      	cmp	r0, r1
	list->tail = node;
   1c374:	bf08      	it	eq
   1c376:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1c378:	6222      	str	r2, [r4, #32]
   1c37a:	f383 8811 	msr	BASEPRI, r3
   1c37e:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1c382:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1c386:	f7f4 ff07 	bl	11198 <tx_free>
		cb(conn, user_data);
   1c38a:	4631      	mov	r1, r6
   1c38c:	4620      	mov	r0, r4
   1c38e:	47a8      	blx	r5
	while (1) {
   1c390:	e7de      	b.n	1c350 <tx_notify+0x4>

0001c392 <tx_complete_work>:
	tx_notify(conn);
   1c392:	3828      	subs	r0, #40	; 0x28
   1c394:	f7ff bfda 	b.w	1c34c <tx_notify>

0001c398 <bt_conn_new>:
{
   1c398:	b538      	push	{r3, r4, r5, lr}
   1c39a:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1c39c:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c39e:	2501      	movs	r5, #1
   1c3a0:	428b      	cmp	r3, r1
   1c3a2:	d102      	bne.n	1c3aa <bt_conn_new+0x12>
		return NULL;
   1c3a4:	2400      	movs	r4, #0
}
   1c3a6:	4620      	mov	r0, r4
   1c3a8:	bd38      	pop	{r3, r4, r5, pc}
   1c3aa:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1c3ae:	e8d2 0fef 	ldaex	r0, [r2]
   1c3b2:	2800      	cmp	r0, #0
   1c3b4:	d104      	bne.n	1c3c0 <bt_conn_new+0x28>
   1c3b6:	e8c2 5fec 	stlex	ip, r5, [r2]
   1c3ba:	f1bc 0f00 	cmp.w	ip, #0
   1c3be:	d1f6      	bne.n	1c3ae <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1c3c0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1c3c4:	d002      	beq.n	1c3cc <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   1c3c6:	4604      	mov	r4, r0
   1c3c8:	3301      	adds	r3, #1
   1c3ca:	e7e9      	b.n	1c3a0 <bt_conn_new+0x8>
	if (!conn) {
   1c3cc:	2c00      	cmp	r4, #0
   1c3ce:	d0ea      	beq.n	1c3a6 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1c3d0:	22b8      	movs	r2, #184	; 0xb8
   1c3d2:	2100      	movs	r1, #0
   1c3d4:	4620      	mov	r0, r4
   1c3d6:	f7ff fddc 	bl	1bf92 <memset>
	return conn;
   1c3da:	e7e4      	b.n	1c3a6 <bt_conn_new+0xe>

0001c3dc <bt_conn_get_security>:
}
   1c3dc:	2001      	movs	r0, #1
   1c3de:	4770      	bx	lr

0001c3e0 <bt_conn_reset_rx_state>:
{
   1c3e0:	b510      	push	{r4, lr}
   1c3e2:	4604      	mov	r4, r0
	if (!conn->rx) {
   1c3e4:	6900      	ldr	r0, [r0, #16]
   1c3e6:	b118      	cbz	r0, 1c3f0 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1c3e8:	f7f9 faee 	bl	159c8 <net_buf_unref>
	conn->rx = NULL;
   1c3ec:	2300      	movs	r3, #0
   1c3ee:	6123      	str	r3, [r4, #16]
}
   1c3f0:	bd10      	pop	{r4, pc}

0001c3f2 <bt_conn_is_peer_addr_le>:
{
   1c3f2:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1c3f4:	7a03      	ldrb	r3, [r0, #8]
{
   1c3f6:	4604      	mov	r4, r0
	if (id != conn->id) {
   1c3f8:	428b      	cmp	r3, r1
{
   1c3fa:	4615      	mov	r5, r2
	if (id != conn->id) {
   1c3fc:	d115      	bne.n	1c42a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1c3fe:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1c402:	2207      	movs	r2, #7
   1c404:	4628      	mov	r0, r5
   1c406:	f7ff fd88 	bl	1bf1a <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1c40a:	b180      	cbz	r0, 1c42e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1c40c:	78e3      	ldrb	r3, [r4, #3]
   1c40e:	2207      	movs	r2, #7
   1c410:	b943      	cbnz	r3, 1c424 <bt_conn_is_peer_addr_le+0x32>
   1c412:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1c416:	4628      	mov	r0, r5
   1c418:	f7ff fd7f 	bl	1bf1a <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1c41c:	fab0 f080 	clz	r0, r0
   1c420:	0940      	lsrs	r0, r0, #5
}
   1c422:	bd38      	pop	{r3, r4, r5, pc}
   1c424:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1c428:	e7f5      	b.n	1c416 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1c42a:	2000      	movs	r0, #0
   1c42c:	e7f9      	b.n	1c422 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1c42e:	2001      	movs	r0, #1
   1c430:	e7f7      	b.n	1c422 <bt_conn_is_peer_addr_le+0x30>

0001c432 <bt_conn_ref>:
{
   1c432:	4603      	mov	r3, r0
   1c434:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1c436:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1c43a:	4610      	mov	r0, r2
   1c43c:	f7ff ff83 	bl	1c346 <atomic_get>
		if (!old) {
   1c440:	b160      	cbz	r0, 1c45c <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1c442:	1c41      	adds	r1, r0, #1
   1c444:	e8d2 4fef 	ldaex	r4, [r2]
   1c448:	4284      	cmp	r4, r0
   1c44a:	d104      	bne.n	1c456 <bt_conn_ref+0x24>
   1c44c:	e8c2 1fec 	stlex	ip, r1, [r2]
   1c450:	f1bc 0f00 	cmp.w	ip, #0
   1c454:	d1f6      	bne.n	1c444 <bt_conn_ref+0x12>
   1c456:	d1f0      	bne.n	1c43a <bt_conn_ref+0x8>
}
   1c458:	4618      	mov	r0, r3
   1c45a:	bd10      	pop	{r4, pc}
			return NULL;
   1c45c:	4603      	mov	r3, r0
   1c45e:	e7fb      	b.n	1c458 <bt_conn_ref+0x26>

0001c460 <conn_lookup_handle>:
{
   1c460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c464:	4607      	mov	r7, r0
   1c466:	460e      	mov	r6, r1
   1c468:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1c46a:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c46c:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1c470:	42b4      	cmp	r4, r6
   1c472:	d103      	bne.n	1c47c <conn_lookup_handle+0x1c>
	return NULL;
   1c474:	2300      	movs	r3, #0
}
   1c476:	4618      	mov	r0, r3
   1c478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c47c:	fb09 7004 	mla	r0, r9, r4, r7
   1c480:	f7ff ffd7 	bl	1c432 <bt_conn_ref>
   1c484:	4603      	mov	r3, r0
		if (!conn) {
   1c486:	b158      	cbz	r0, 1c4a0 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1c488:	7a85      	ldrb	r5, [r0, #10]
   1c48a:	2d01      	cmp	r5, #1
   1c48c:	d002      	beq.n	1c494 <conn_lookup_handle+0x34>
   1c48e:	3d07      	subs	r5, #7
   1c490:	2d01      	cmp	r5, #1
   1c492:	d803      	bhi.n	1c49c <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1c494:	881a      	ldrh	r2, [r3, #0]
   1c496:	4542      	cmp	r2, r8
   1c498:	d0ed      	beq.n	1c476 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1c49a:	4618      	mov	r0, r3
   1c49c:	f7f5 f900 	bl	116a0 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1c4a0:	3401      	adds	r4, #1
   1c4a2:	e7e5      	b.n	1c470 <conn_lookup_handle+0x10>

0001c4a4 <bt_conn_get_dst>:
}
   1c4a4:	3088      	adds	r0, #136	; 0x88
   1c4a6:	4770      	bx	lr

0001c4a8 <bt_conn_le_conn_update>:
{
   1c4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c4aa:	4607      	mov	r7, r0
   1c4ac:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1c4ae:	f242 0013 	movw	r0, #8211	; 0x2013
   1c4b2:	210e      	movs	r1, #14
   1c4b4:	f7f2 fea0 	bl	f1f8 <bt_hci_cmd_create>
	if (!buf) {
   1c4b8:	4606      	mov	r6, r0
   1c4ba:	b1d0      	cbz	r0, 1c4f2 <bt_conn_le_conn_update+0x4a>
   1c4bc:	210e      	movs	r1, #14
   1c4be:	3008      	adds	r0, #8
   1c4c0:	f7f9 fb98 	bl	15bf4 <net_buf_simple_add>
   1c4c4:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1c4c6:	220e      	movs	r2, #14
   1c4c8:	2100      	movs	r1, #0
   1c4ca:	f7ff fd62 	bl	1bf92 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c4ce:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c4d0:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c4d2:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c4d4:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c4d6:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c4d8:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c4da:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c4dc:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c4e0:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1c4e2:	88ab      	ldrh	r3, [r5, #4]
   1c4e4:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1c4e6:	88eb      	ldrh	r3, [r5, #6]
   1c4e8:	8123      	strh	r3, [r4, #8]
}
   1c4ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c4ee:	f7f2 becd 	b.w	f28c <bt_hci_cmd_send_sync>
}
   1c4f2:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c4f8 <l2cap_connected>:
}
   1c4f8:	4770      	bx	lr

0001c4fa <l2cap_disconnected>:
   1c4fa:	4770      	bx	lr

0001c4fc <bt_l2cap_chan_remove>:
	return list->head;
   1c4fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1c4fe:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c500:	b17b      	cbz	r3, 1c522 <bt_l2cap_chan_remove+0x26>
   1c502:	2200      	movs	r2, #0
   1c504:	3b08      	subs	r3, #8
   1c506:	b163      	cbz	r3, 1c522 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1c508:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1c50a:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1c50e:	d10e      	bne.n	1c52e <bt_l2cap_chan_remove+0x32>
	return node->next;
   1c510:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1c512:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1c514:	b932      	cbnz	r2, 1c524 <bt_l2cap_chan_remove+0x28>
   1c516:	42ac      	cmp	r4, r5
	list->head = node;
   1c518:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1c51a:	d100      	bne.n	1c51e <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1c51c:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1c51e:	2200      	movs	r2, #0
   1c520:	609a      	str	r2, [r3, #8]
}
   1c522:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1c524:	42ac      	cmp	r4, r5
	parent->next = child;
   1c526:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1c528:	bf08      	it	eq
   1c52a:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1c52c:	e7f7      	b.n	1c51e <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c52e:	2c00      	cmp	r4, #0
   1c530:	d0f7      	beq.n	1c522 <bt_l2cap_chan_remove+0x26>
	return node->next;
   1c532:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c534:	2b00      	cmp	r3, #0
   1c536:	d0f4      	beq.n	1c522 <bt_l2cap_chan_remove+0x26>
   1c538:	4622      	mov	r2, r4
   1c53a:	3b08      	subs	r3, #8
   1c53c:	e7e3      	b.n	1c506 <bt_l2cap_chan_remove+0xa>

0001c53e <bt_l2cap_chan_del>:
{
   1c53e:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1c540:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1c544:	4604      	mov	r4, r0
	if (!chan->conn) {
   1c546:	b123      	cbz	r3, 1c552 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1c548:	686b      	ldr	r3, [r5, #4]
   1c54a:	b103      	cbz	r3, 1c54e <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1c54c:	4798      	blx	r3
	chan->conn = NULL;
   1c54e:	2300      	movs	r3, #0
   1c550:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1c552:	68e3      	ldr	r3, [r4, #12]
   1c554:	b10b      	cbz	r3, 1c55a <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1c556:	4620      	mov	r0, r4
   1c558:	4798      	blx	r3
	if (ops->released) {
   1c55a:	69eb      	ldr	r3, [r5, #28]
   1c55c:	b11b      	cbz	r3, 1c566 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1c55e:	4620      	mov	r0, r4
}
   1c560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1c564:	4718      	bx	r3
}
   1c566:	bd70      	pop	{r4, r5, r6, pc}

0001c568 <bt_l2cap_disconnected>:
	return list->head;
   1c568:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1c56a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c56c:	b18b      	cbz	r3, 1c592 <bt_l2cap_disconnected+0x2a>
   1c56e:	f1b3 0008 	subs.w	r0, r3, #8
   1c572:	d00e      	beq.n	1c592 <bt_l2cap_disconnected+0x2a>
	return node->next;
   1c574:	681c      	ldr	r4, [r3, #0]
   1c576:	b104      	cbz	r4, 1c57a <bt_l2cap_disconnected+0x12>
   1c578:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1c57a:	f7ff ffe0 	bl	1c53e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c57e:	b144      	cbz	r4, 1c592 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c580:	f114 0308 	adds.w	r3, r4, #8
   1c584:	d002      	beq.n	1c58c <bt_l2cap_disconnected+0x24>
	return node->next;
   1c586:	68a3      	ldr	r3, [r4, #8]
   1c588:	b103      	cbz	r3, 1c58c <bt_l2cap_disconnected+0x24>
   1c58a:	3b08      	subs	r3, #8
{
   1c58c:	4620      	mov	r0, r4
   1c58e:	461c      	mov	r4, r3
   1c590:	e7f3      	b.n	1c57a <bt_l2cap_disconnected+0x12>
}
   1c592:	bd10      	pop	{r4, pc}

0001c594 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1c594:	3104      	adds	r1, #4
   1c596:	f7f5 bc0f 	b.w	11db8 <bt_conn_create_pdu_timeout>

0001c59a <bt_l2cap_send_cb>:
{
   1c59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c59e:	4614      	mov	r4, r2
   1c5a0:	4605      	mov	r5, r0
   1c5a2:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1c5a4:	f102 0008 	add.w	r0, r2, #8
   1c5a8:	2104      	movs	r1, #4
   1c5aa:	461e      	mov	r6, r3
   1c5ac:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1c5b0:	f7f9 fac8 	bl	15b44 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c5b4:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c5b6:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c5b8:	3a04      	subs	r2, #4
   1c5ba:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   1c5bc:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c5be:	4632      	mov	r2, r6
   1c5c0:	4621      	mov	r1, r4
   1c5c2:	4628      	mov	r0, r5
}
   1c5c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c5c8:	f7f4 bfa8 	b.w	1151c <bt_conn_send_cb>

0001c5cc <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1c5cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c5ce:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1c5d0:	2202      	movs	r2, #2
   1c5d2:	2001      	movs	r0, #1
   1c5d4:	f7f5 fd42 	bl	1205c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1c5d8:	4604      	mov	r4, r0
   1c5da:	b160      	cbz	r0, 1c5f6 <l2cap_send_reject.constprop.0+0x2a>
	return net_buf_simple_add(&buf->b, len);
   1c5dc:	2102      	movs	r1, #2
   1c5de:	3008      	adds	r0, #8
   1c5e0:	f7f9 fb08 	bl	15bf4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1c5e4:	2300      	movs	r3, #0
   1c5e6:	4622      	mov	r2, r4
   1c5e8:	7003      	strb	r3, [r0, #0]
   1c5ea:	7043      	strb	r3, [r0, #1]
   1c5ec:	2105      	movs	r1, #5
   1c5ee:	4628      	mov	r0, r5
   1c5f0:	9300      	str	r3, [sp, #0]
   1c5f2:	f7ff ffd2 	bl	1c59a <bt_l2cap_send_cb>
}
   1c5f6:	b003      	add	sp, #12
   1c5f8:	bd30      	pop	{r4, r5, pc}

0001c5fa <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1c5fa:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c5fc:	b160      	cbz	r0, 1c618 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1c5fe:	3808      	subs	r0, #8
   1c600:	b900      	cbnz	r0, 1c604 <bt_l2cap_le_lookup_tx_cid+0xa>
   1c602:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1c604:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1c608:	428b      	cmp	r3, r1
   1c60a:	d005      	beq.n	1c618 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c60c:	f110 0308 	adds.w	r3, r0, #8
   1c610:	d001      	beq.n	1c616 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1c612:	6880      	ldr	r0, [r0, #8]
   1c614:	e7f2      	b.n	1c5fc <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1c616:	4618      	mov	r0, r3
}
   1c618:	4770      	bx	lr

0001c61a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1c61a:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c61c:	b160      	cbz	r0, 1c638 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1c61e:	3808      	subs	r0, #8
   1c620:	b900      	cbnz	r0, 1c624 <bt_l2cap_le_lookup_rx_cid+0xa>
   1c622:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1c624:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1c628:	428b      	cmp	r3, r1
   1c62a:	d005      	beq.n	1c638 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c62c:	f110 0308 	adds.w	r3, r0, #8
   1c630:	d001      	beq.n	1c636 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1c632:	6880      	ldr	r0, [r0, #8]
   1c634:	e7f2      	b.n	1c61c <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1c636:	4618      	mov	r0, r3
}
   1c638:	4770      	bx	lr

0001c63a <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1c63a:	4770      	bx	lr

0001c63c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1c63c:	4603      	mov	r3, r0
	return list->head;
   1c63e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1c640:	b128      	cbz	r0, 1c64e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c642:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1c644:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c646:	4288      	cmp	r0, r1
	list->head = node;
   1c648:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1c64a:	bf08      	it	eq
   1c64c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1c64e:	4770      	bx	lr

0001c650 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1c650:	4603      	mov	r3, r0
	size_t bytes = 0;
   1c652:	2000      	movs	r0, #0

	while (buf) {
   1c654:	b903      	cbnz	r3, 1c658 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1c656:	4770      	bx	lr
		bytes += buf->len;
   1c658:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1c65a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1c65c:	4410      	add	r0, r2
		buf = buf->frags;
   1c65e:	e7f9      	b.n	1c654 <net_buf_frags_len+0x4>

0001c660 <att_sent>:
	if (chan->ops->sent) {
   1c660:	684b      	ldr	r3, [r1, #4]
{
   1c662:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1c664:	695b      	ldr	r3, [r3, #20]
   1c666:	b103      	cbz	r3, 1c66a <att_sent+0xa>
		chan->ops->sent(chan);
   1c668:	4718      	bx	r3
}
   1c66a:	4770      	bx	lr

0001c66c <attr_read_type_cb>:
{
   1c66c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1c66e:	68d4      	ldr	r4, [r2, #12]
   1c670:	3102      	adds	r1, #2
   1c672:	7823      	ldrb	r3, [r4, #0]
   1c674:	b913      	cbnz	r3, 1c67c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1c676:	7021      	strb	r1, [r4, #0]
	return true;
   1c678:	2001      	movs	r0, #1
   1c67a:	e006      	b.n	1c68a <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1c67c:	428b      	cmp	r3, r1
   1c67e:	d0fb      	beq.n	1c678 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1c680:	8983      	ldrh	r3, [r0, #12]
   1c682:	3b02      	subs	r3, #2
   1c684:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1c686:	2000      	movs	r0, #0
   1c688:	6110      	str	r0, [r2, #16]
}
   1c68a:	bd10      	pop	{r4, pc}

0001c68c <att_prepare_write_req>:
}
   1c68c:	2006      	movs	r0, #6
   1c68e:	4770      	bx	lr

0001c690 <att_op_get_type>:
	switch (op) {
   1c690:	281e      	cmp	r0, #30
   1c692:	d816      	bhi.n	1c6c2 <att_op_get_type+0x32>
   1c694:	b308      	cbz	r0, 1c6da <att_op_get_type+0x4a>
   1c696:	1e43      	subs	r3, r0, #1
   1c698:	2b1d      	cmp	r3, #29
   1c69a:	d81e      	bhi.n	1c6da <att_op_get_type+0x4a>
   1c69c:	e8df f003 	tbb	[pc, r3]
   1c6a0:	23172317 	.word	0x23172317
   1c6a4:	23172317 	.word	0x23172317
   1c6a8:	23172317 	.word	0x23172317
   1c6ac:	23172317 	.word	0x23172317
   1c6b0:	1d172317 	.word	0x1d172317
   1c6b4:	2317231d 	.word	0x2317231d
   1c6b8:	1d191d17 	.word	0x1d191d17
   1c6bc:	0f1b      	.short	0x0f1b
   1c6be:	2004      	movs	r0, #4
   1c6c0:	4770      	bx	lr
   1c6c2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1c6c6:	2b52      	cmp	r3, #82	; 0x52
   1c6c8:	d107      	bne.n	1c6da <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1c6ca:	2000      	movs	r0, #0
}
   1c6cc:	4770      	bx	lr
		return ATT_RESPONSE;
   1c6ce:	2002      	movs	r0, #2
   1c6d0:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1c6d2:	2003      	movs	r0, #3
   1c6d4:	4770      	bx	lr
		return ATT_INDICATION;
   1c6d6:	2005      	movs	r0, #5
   1c6d8:	4770      	bx	lr
		return ATT_COMMAND;
   1c6da:	f010 0f40 	tst.w	r0, #64	; 0x40
   1c6de:	bf0c      	ite	eq
   1c6e0:	2006      	moveq	r0, #6
   1c6e2:	2000      	movne	r0, #0
   1c6e4:	4770      	bx	lr
		return ATT_REQUEST;
   1c6e6:	2001      	movs	r0, #1
   1c6e8:	4770      	bx	lr

0001c6ea <att_notify_mult>:
{
   1c6ea:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1c6ec:	6803      	ldr	r3, [r0, #0]
   1c6ee:	898a      	ldrh	r2, [r1, #12]
   1c6f0:	6818      	ldr	r0, [r3, #0]
   1c6f2:	6889      	ldr	r1, [r1, #8]
   1c6f4:	f7f8 fe10 	bl	15318 <bt_gatt_mult_notification>
}
   1c6f8:	2000      	movs	r0, #0
   1c6fa:	bd08      	pop	{r3, pc}

0001c6fc <att_notify>:
{
   1c6fc:	b538      	push	{r3, r4, r5, lr}
   1c6fe:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1c700:	f101 0008 	add.w	r0, r1, #8
   1c704:	460c      	mov	r4, r1
   1c706:	f000 ff43 	bl	1d590 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1c70a:	682d      	ldr	r5, [r5, #0]
   1c70c:	4601      	mov	r1, r0
   1c70e:	89a3      	ldrh	r3, [r4, #12]
   1c710:	6828      	ldr	r0, [r5, #0]
   1c712:	68a2      	ldr	r2, [r4, #8]
   1c714:	f000 fea4 	bl	1d460 <bt_gatt_notification>
}
   1c718:	2000      	movs	r0, #0
   1c71a:	bd38      	pop	{r3, r4, r5, pc}

0001c71c <bt_gatt_foreach_attr>:
{
   1c71c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c71e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c722:	2300      	movs	r3, #0
   1c724:	461a      	mov	r2, r3
   1c726:	9300      	str	r3, [sp, #0]
   1c728:	f7f7 fc4a 	bl	13fc0 <bt_gatt_foreach_attr_type>
}
   1c72c:	b005      	add	sp, #20
   1c72e:	f85d fb04 	ldr.w	pc, [sp], #4

0001c732 <find_info_cb>:
{
   1c732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1c734:	6893      	ldr	r3, [r2, #8]
{
   1c736:	4605      	mov	r5, r0
   1c738:	460e      	mov	r6, r1
   1c73a:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c73c:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1c73e:	b963      	cbnz	r3, 1c75a <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1c740:	6850      	ldr	r0, [r2, #4]
   1c742:	2101      	movs	r1, #1
   1c744:	3008      	adds	r0, #8
   1c746:	f7f9 fa55 	bl	15bf4 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c74a:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1c74c:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c74e:	781b      	ldrb	r3, [r3, #0]
   1c750:	2b00      	cmp	r3, #0
   1c752:	bf0c      	ite	eq
   1c754:	2301      	moveq	r3, #1
   1c756:	2302      	movne	r3, #2
   1c758:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1c75a:	68a3      	ldr	r3, [r4, #8]
   1c75c:	781b      	ldrb	r3, [r3, #0]
   1c75e:	2b01      	cmp	r3, #1
   1c760:	d003      	beq.n	1c76a <find_info_cb+0x38>
   1c762:	2b02      	cmp	r3, #2
   1c764:	d019      	beq.n	1c79a <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1c766:	2000      	movs	r0, #0
   1c768:	e016      	b.n	1c798 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1c76a:	682b      	ldr	r3, [r5, #0]
   1c76c:	781b      	ldrb	r3, [r3, #0]
   1c76e:	2b00      	cmp	r3, #0
   1c770:	d1f9      	bne.n	1c766 <find_info_cb+0x34>
   1c772:	6860      	ldr	r0, [r4, #4]
   1c774:	2104      	movs	r1, #4
   1c776:	3008      	adds	r0, #8
   1c778:	f7f9 fa3c 	bl	15bf4 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c77c:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1c77e:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c780:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   1c782:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c784:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1c786:	6863      	ldr	r3, [r4, #4]
   1c788:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1c78c:	899b      	ldrh	r3, [r3, #12]
   1c78e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c790:	2804      	cmp	r0, #4
   1c792:	bf94      	ite	ls
   1c794:	2000      	movls	r0, #0
   1c796:	2001      	movhi	r0, #1
}
   1c798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1c79a:	682b      	ldr	r3, [r5, #0]
   1c79c:	781b      	ldrb	r3, [r3, #0]
   1c79e:	2b02      	cmp	r3, #2
   1c7a0:	d1e1      	bne.n	1c766 <find_info_cb+0x34>
   1c7a2:	6860      	ldr	r0, [r4, #4]
   1c7a4:	2112      	movs	r1, #18
   1c7a6:	3008      	adds	r0, #8
   1c7a8:	f7f9 fa24 	bl	15bf4 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c7ac:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1c7ae:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c7b0:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1c7b2:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c7b6:	3101      	adds	r1, #1
   1c7b8:	f7ff fbc0 	bl	1bf3c <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1c7bc:	6863      	ldr	r3, [r4, #4]
   1c7be:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1c7c2:	899b      	ldrh	r3, [r3, #12]
   1c7c4:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c7c6:	2812      	cmp	r0, #18
   1c7c8:	e7e3      	b.n	1c792 <find_info_cb+0x60>

0001c7ca <attr_read_group_cb>:
	if (!data->rsp->len) {
   1c7ca:	68d0      	ldr	r0, [r2, #12]
   1c7cc:	3104      	adds	r1, #4
   1c7ce:	7803      	ldrb	r3, [r0, #0]
   1c7d0:	b913      	cbnz	r3, 1c7d8 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1c7d2:	7001      	strb	r1, [r0, #0]
	return true;
   1c7d4:	2001      	movs	r0, #1
}
   1c7d6:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1c7d8:	428b      	cmp	r3, r1
   1c7da:	d0fb      	beq.n	1c7d4 <attr_read_group_cb+0xa>
		data->group = NULL;
   1c7dc:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1c7de:	6891      	ldr	r1, [r2, #8]
   1c7e0:	898b      	ldrh	r3, [r1, #12]
   1c7e2:	3b04      	subs	r3, #4
   1c7e4:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1c7e6:	6110      	str	r0, [r2, #16]
		return false;
   1c7e8:	4770      	bx	lr

0001c7ea <write_cb>:
{
   1c7ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c7ec:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c7ee:	4601      	mov	r1, r0
{
   1c7f0:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c7f2:	222a      	movs	r2, #42	; 0x2a
   1c7f4:	6820      	ldr	r0, [r4, #0]
   1c7f6:	f000 fda4 	bl	1d342 <bt_gatt_check_perm>
   1c7fa:	4605      	mov	r5, r0
   1c7fc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1c7fe:	bb00      	cbnz	r0, 1c842 <write_cb+0x58>
	if (!data->req) {
   1c800:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1c802:	4631      	mov	r1, r6
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1c804:	2b00      	cmp	r3, #0
   1c806:	bf14      	ite	ne
   1c808:	2300      	movne	r3, #0
   1c80a:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1c80c:	9301      	str	r3, [sp, #4]
   1c80e:	8a63      	ldrh	r3, [r4, #18]
   1c810:	68b7      	ldr	r7, [r6, #8]
   1c812:	9300      	str	r3, [sp, #0]
   1c814:	68e2      	ldr	r2, [r4, #12]
   1c816:	8a23      	ldrh	r3, [r4, #16]
   1c818:	6820      	ldr	r0, [r4, #0]
   1c81a:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1c81c:	1e03      	subs	r3, r0, #0
   1c81e:	db05      	blt.n	1c82c <write_cb+0x42>
   1c820:	8a22      	ldrh	r2, [r4, #16]
   1c822:	4293      	cmp	r3, r2
   1c824:	d10b      	bne.n	1c83e <write_cb+0x54>
	data->err = 0U;
   1c826:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1c828:	2501      	movs	r5, #1
   1c82a:	e005      	b.n	1c838 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1c82c:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1c830:	d305      	bcc.n	1c83e <write_cb+0x54>
		return -err;
   1c832:	425b      	negs	r3, r3
   1c834:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1c836:	7523      	strb	r3, [r4, #20]
}
   1c838:	4628      	mov	r0, r5
   1c83a:	b003      	add	sp, #12
   1c83c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1c83e:	230e      	movs	r3, #14
   1c840:	e7f9      	b.n	1c836 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1c842:	2500      	movs	r5, #0
   1c844:	e7f8      	b.n	1c838 <write_cb+0x4e>

0001c846 <att_chan_read>:
{
   1c846:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c84a:	4680      	mov	r8, r0
   1c84c:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c84e:	4610      	mov	r0, r2
{
   1c850:	4699      	mov	r9, r3
   1c852:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c854:	f7ff fefc 	bl	1c650 <net_buf_frags_len>
   1c858:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
{
   1c85c:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c85e:	4283      	cmp	r3, r0
   1c860:	d97a      	bls.n	1c958 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1c862:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   1c866:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1c868:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1c86a:	f7f9 f909 	bl	15a80 <net_buf_frag_last>
	size_t len, total = 0;
   1c86e:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1c872:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c874:	4630      	mov	r0, r6
   1c876:	f7ff feeb 	bl	1c650 <net_buf_frags_len>
   1c87a:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1c87e:	f105 0708 	add.w	r7, r5, #8
   1c882:	1a24      	subs	r4, r4, r0
   1c884:	4638      	mov	r0, r7
   1c886:	f000 fe8f 	bl	1d5a8 <net_buf_simple_tailroom>
   1c88a:	4284      	cmp	r4, r0
   1c88c:	d211      	bcs.n	1c8b2 <att_chan_read+0x6c>
   1c88e:	4630      	mov	r0, r6
   1c890:	f7ff fede 	bl	1c650 <net_buf_frags_len>
   1c894:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c898:	1a24      	subs	r4, r4, r0
		if (!len) {
   1c89a:	bb34      	cbnz	r4, 1c8ea <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1c89c:	79b0      	ldrb	r0, [r6, #6]
   1c89e:	f7f8 ff13 	bl	156c8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1c8a2:	2200      	movs	r2, #0
   1c8a4:	2300      	movs	r3, #0
   1c8a6:	f000 fe59 	bl	1d55c <net_buf_alloc_fixed>
			if (!frag) {
   1c8aa:	4605      	mov	r5, r0
   1c8ac:	b930      	cbnz	r0, 1c8bc <att_chan_read+0x76>
	return total;
   1c8ae:	4657      	mov	r7, sl
   1c8b0:	e02c      	b.n	1c90c <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1c8b2:	4638      	mov	r0, r7
   1c8b4:	f000 fe78 	bl	1d5a8 <net_buf_simple_tailroom>
   1c8b8:	4604      	mov	r4, r0
   1c8ba:	e7ee      	b.n	1c89a <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1c8bc:	4601      	mov	r1, r0
   1c8be:	4630      	mov	r0, r6
   1c8c0:	f7f9 f91e 	bl	15b00 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c8c4:	4630      	mov	r0, r6
   1c8c6:	f7ff fec3 	bl	1c650 <net_buf_frags_len>
   1c8ca:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c8ce:	f105 0708 	add.w	r7, r5, #8
   1c8d2:	1a24      	subs	r4, r4, r0
   1c8d4:	4638      	mov	r0, r7
   1c8d6:	f000 fe67 	bl	1d5a8 <net_buf_simple_tailroom>
   1c8da:	4284      	cmp	r4, r0
   1c8dc:	d21a      	bcs.n	1c914 <att_chan_read+0xce>
   1c8de:	4630      	mov	r0, r6
   1c8e0:	f7ff feb6 	bl	1c650 <net_buf_frags_len>
   1c8e4:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c8e8:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1c8ea:	68a9      	ldr	r1, [r5, #8]
   1c8ec:	89aa      	ldrh	r2, [r5, #12]
   1c8ee:	f8db 7004 	ldr.w	r7, [fp, #4]
   1c8f2:	440a      	add	r2, r1
   1c8f4:	9803      	ldr	r0, [sp, #12]
   1c8f6:	4659      	mov	r1, fp
   1c8f8:	f8cd 9000 	str.w	r9, [sp]
   1c8fc:	b2a3      	uxth	r3, r4
   1c8fe:	47b8      	blx	r7
		if (read < 0) {
   1c900:	1e07      	subs	r7, r0, #0
   1c902:	da0c      	bge.n	1c91e <att_chan_read+0xd8>
				return total;
   1c904:	f1ba 0f00 	cmp.w	sl, #0
   1c908:	bf18      	it	ne
   1c90a:	4657      	movne	r7, sl
}
   1c90c:	4638      	mov	r0, r7
   1c90e:	b005      	add	sp, #20
   1c910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c914:	4638      	mov	r0, r7
   1c916:	f000 fe47 	bl	1d5a8 <net_buf_simple_tailroom>
   1c91a:	4604      	mov	r4, r0
   1c91c:	e7e5      	b.n	1c8ea <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1c91e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c920:	b993      	cbnz	r3, 1c948 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1c922:	4639      	mov	r1, r7
   1c924:	f105 0008 	add.w	r0, r5, #8
   1c928:	f7f9 f964 	bl	15bf4 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c92c:	4630      	mov	r0, r6
   1c92e:	f7ff fe8f 	bl	1c650 <net_buf_frags_len>
   1c932:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1c936:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c938:	4283      	cmp	r3, r0
		total += read;
   1c93a:	44ba      	add	sl, r7
		offset += read;
   1c93c:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c940:	d9b5      	bls.n	1c8ae <att_chan_read+0x68>
   1c942:	42a7      	cmp	r7, r4
   1c944:	d096      	beq.n	1c874 <att_chan_read+0x2e>
   1c946:	e7b2      	b.n	1c8ae <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1c948:	4639      	mov	r1, r7
   1c94a:	4628      	mov	r0, r5
   1c94c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c950:	4798      	blx	r3
   1c952:	2800      	cmp	r0, #0
   1c954:	d1e5      	bne.n	1c922 <att_chan_read+0xdc>
   1c956:	e7aa      	b.n	1c8ae <att_chan_read+0x68>
		return 0;
   1c958:	2700      	movs	r7, #0
   1c95a:	e7d7      	b.n	1c90c <att_chan_read+0xc6>

0001c95c <bt_att_chan_send>:
{
   1c95c:	b570      	push	{r4, r5, r6, lr}
   1c95e:	4604      	mov	r4, r0
   1c960:	460e      	mov	r6, r1
	if (!cb) {
   1c962:	4615      	mov	r5, r2
   1c964:	b132      	cbz	r2, 1c974 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1c966:	462a      	mov	r2, r5
   1c968:	4631      	mov	r1, r6
   1c96a:	4620      	mov	r0, r4
}
   1c96c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1c970:	f7f5 be98 	b.w	126a4 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1c974:	2200      	movs	r2, #0
   1c976:	2300      	movs	r3, #0
   1c978:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1c97c:	f7fc fefe 	bl	1977c <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1c980:	2800      	cmp	r0, #0
   1c982:	daf0      	bge.n	1c966 <bt_att_chan_send+0xa>
}
   1c984:	f06f 000a 	mvn.w	r0, #10
   1c988:	bd70      	pop	{r4, r5, r6, pc}

0001c98a <bt_att_chan_send_rsp>:
{
   1c98a:	b538      	push	{r3, r4, r5, lr}
   1c98c:	4604      	mov	r4, r0
   1c98e:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1c990:	f7ff ffe4 	bl	1c95c <bt_att_chan_send>
	if (err) {
   1c994:	b130      	cbz	r0, 1c9a4 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1c996:	4629      	mov	r1, r5
   1c998:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   1c99c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1c9a0:	f7f8 bfe4 	b.w	1596c <net_buf_put>
}
   1c9a4:	bd38      	pop	{r3, r4, r5, pc}

0001c9a6 <process_queue>:
{
   1c9a6:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1c9a8:	2200      	movs	r2, #0
{
   1c9aa:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1c9ac:	2300      	movs	r3, #0
   1c9ae:	4608      	mov	r0, r1
{
   1c9b0:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1c9b2:	f7f8 ff87 	bl	158c4 <net_buf_get>
	if (buf) {
   1c9b6:	4605      	mov	r5, r0
   1c9b8:	b160      	cbz	r0, 1c9d4 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1c9ba:	4601      	mov	r1, r0
   1c9bc:	2200      	movs	r2, #0
   1c9be:	4620      	mov	r0, r4
   1c9c0:	f7f5 fe70 	bl	126a4 <chan_send>
		if (err) {
   1c9c4:	4604      	mov	r4, r0
   1c9c6:	b118      	cbz	r0, 1c9d0 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1c9c8:	4629      	mov	r1, r5
   1c9ca:	4630      	mov	r0, r6
   1c9cc:	f001 fc3a 	bl	1e244 <k_queue_prepend>
}
   1c9d0:	4620      	mov	r0, r4
   1c9d2:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1c9d4:	f06f 0401 	mvn.w	r4, #1
   1c9d8:	e7fa      	b.n	1c9d0 <process_queue+0x2a>

0001c9da <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c9da:	2200      	movs	r2, #0
   1c9dc:	b510      	push	{r4, lr}
	return list->head;
   1c9de:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c9e0:	b153      	cbz	r3, 1c9f8 <sys_slist_find_and_remove.isra.0+0x1e>
   1c9e2:	428b      	cmp	r3, r1
   1c9e4:	d10e      	bne.n	1ca04 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1c9e6:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1c9e8:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c9ea:	b932      	cbnz	r2, 1c9fa <sys_slist_find_and_remove.isra.0+0x20>
   1c9ec:	42a1      	cmp	r1, r4
	list->head = node;
   1c9ee:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c9f0:	d100      	bne.n	1c9f4 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1c9f2:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1c9f4:	2300      	movs	r3, #0
   1c9f6:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c9f8:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1c9fa:	42a1      	cmp	r1, r4
	parent->next = child;
   1c9fc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1c9fe:	bf08      	it	eq
   1ca00:	6042      	streq	r2, [r0, #4]
}
   1ca02:	e7f7      	b.n	1c9f4 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1ca04:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ca06:	681b      	ldr	r3, [r3, #0]
   1ca08:	e7ea      	b.n	1c9e0 <sys_slist_find_and_remove.isra.0+0x6>

0001ca0a <att_exec_write_req>:
   1ca0a:	2006      	movs	r0, #6
   1ca0c:	4770      	bx	lr

0001ca0e <chan_req_send>:
{
   1ca0e:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ca10:	690e      	ldr	r6, [r1, #16]
{
   1ca12:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ca14:	4630      	mov	r0, r6
   1ca16:	f7ff fe1b 	bl	1c650 <net_buf_frags_len>
   1ca1a:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
{
   1ca1e:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ca20:	4283      	cmp	r3, r0
   1ca22:	d317      	bcc.n	1ca54 <chan_req_send+0x46>
	chan->req = req;
   1ca24:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   1ca28:	f106 0008 	add.w	r0, r6, #8
   1ca2c:	f000 fdb8 	bl	1d5a0 <net_buf_simple_headroom>
	state->len = buf->len;
   1ca30:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1ca32:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1ca34:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1ca36:	6920      	ldr	r0, [r4, #16]
   1ca38:	f7f9 f80a 	bl	15a50 <net_buf_ref>
   1ca3c:	2200      	movs	r2, #0
   1ca3e:	4601      	mov	r1, r0
   1ca40:	4628      	mov	r0, r5
   1ca42:	f7f5 fe2f 	bl	126a4 <chan_send>
	if (err) {
   1ca46:	4605      	mov	r5, r0
   1ca48:	b110      	cbz	r0, 1ca50 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1ca4a:	6920      	ldr	r0, [r4, #16]
   1ca4c:	f7f8 ffbc 	bl	159c8 <net_buf_unref>
}
   1ca50:	4628      	mov	r0, r5
   1ca52:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1ca54:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1ca58:	e7fa      	b.n	1ca50 <chan_req_send+0x42>

0001ca5a <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ca5a:	30c8      	adds	r0, #200	; 0xc8
   1ca5c:	e8d0 3fef 	ldaex	r3, [r0]
   1ca60:	f023 0301 	bic.w	r3, r3, #1
   1ca64:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1ca68:	2a00      	cmp	r2, #0
   1ca6a:	d1f7      	bne.n	1ca5c <chan_rsp_sent+0x2>
}
   1ca6c:	4770      	bx	lr

0001ca6e <chan_cfm_sent>:
   1ca6e:	30c8      	adds	r0, #200	; 0xc8
   1ca70:	e8d0 3fef 	ldaex	r3, [r0]
   1ca74:	f023 0302 	bic.w	r3, r3, #2
   1ca78:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1ca7c:	2a00      	cmp	r2, #0
   1ca7e:	d1f7      	bne.n	1ca70 <chan_cfm_sent+0x2>
}
   1ca80:	4770      	bx	lr

0001ca82 <read_cb>:
{
   1ca82:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ca86:	4606      	mov	r6, r0
	data->err = 0x00;
   1ca88:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   1ca8a:	f8d2 8000 	ldr.w	r8, [r2]
{
   1ca8e:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1ca90:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ca94:	4631      	mov	r1, r6
	data->err = 0x00;
   1ca96:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ca98:	2215      	movs	r2, #21
   1ca9a:	f000 fc52 	bl	1d342 <bt_gatt_check_perm>
   1ca9e:	4604      	mov	r4, r0
   1caa0:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1caa2:	b9a0      	cbnz	r0, 1cace <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1caa4:	e9cd 0000 	strd	r0, r0, [sp]
   1caa8:	88ab      	ldrh	r3, [r5, #4]
   1caaa:	4631      	mov	r1, r6
   1caac:	4640      	mov	r0, r8
   1caae:	68aa      	ldr	r2, [r5, #8]
   1cab0:	f7ff fec9 	bl	1c846 <att_chan_read>
	if (ret < 0) {
   1cab4:	1e03      	subs	r3, r0, #0
   1cab6:	da0c      	bge.n	1cad2 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1cab8:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1cabc:	bf32      	itee	cc
   1cabe:	230e      	movcc	r3, #14
		return -err;
   1cac0:	425b      	negcs	r3, r3
   1cac2:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   1cac4:	732b      	strb	r3, [r5, #12]
}
   1cac6:	4620      	mov	r0, r4
   1cac8:	b002      	add	sp, #8
   1caca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1cace:	463c      	mov	r4, r7
   1cad0:	e7f9      	b.n	1cac6 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1cad2:	2401      	movs	r4, #1
   1cad4:	e7f7      	b.n	1cac6 <read_cb+0x44>

0001cad6 <bt_att_sent>:
{
   1cad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1cad8:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
{
   1cadc:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1cade:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1cae2:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1cae6:	b10b      	cbz	r3, 1caec <bt_att_sent+0x16>
		chan->sent(chan);
   1cae8:	4638      	mov	r0, r7
   1caea:	4798      	blx	r3
   1caec:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1caf0:	e8d3 2fef 	ldaex	r2, [r3]
   1caf4:	f022 0210 	bic.w	r2, r2, #16
   1caf8:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1cafc:	2900      	cmp	r1, #0
   1cafe:	d1f7      	bne.n	1caf0 <bt_att_sent+0x1a>
	if (!att) {
   1cb00:	b335      	cbz	r5, 1cb50 <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1cb02:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1cb06:	b98b      	cbnz	r3, 1cb2c <bt_att_sent+0x56>
   1cb08:	686b      	ldr	r3, [r5, #4]
   1cb0a:	b17b      	cbz	r3, 1cb2c <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1cb0c:	1d28      	adds	r0, r5, #4
   1cb0e:	f7ff fd95 	bl	1c63c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1cb12:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1cb14:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1cb16:	4638      	mov	r0, r7
   1cb18:	f7ff ff79 	bl	1ca0e <chan_req_send>
   1cb1c:	2800      	cmp	r0, #0
   1cb1e:	da17      	bge.n	1cb50 <bt_att_sent+0x7a>
	parent->next = child;
   1cb20:	686b      	ldr	r3, [r5, #4]
   1cb22:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cb24:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1cb26:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1cb28:	b903      	cbnz	r3, 1cb2c <bt_att_sent+0x56>
	list->tail = node;
   1cb2a:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1cb2c:	4638      	mov	r0, r7
   1cb2e:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   1cb32:	f7ff ff38 	bl	1c9a6 <process_queue>
	if (!err) {
   1cb36:	b158      	cbz	r0, 1cb50 <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
   1cb38:	4638      	mov	r0, r7
   1cb3a:	f105 010c 	add.w	r1, r5, #12
   1cb3e:	f7ff ff32 	bl	1c9a6 <process_queue>
	if (!err) {
   1cb42:	b128      	cbz	r0, 1cb50 <bt_att_sent+0x7a>
	z_impl_k_sem_give(sem);
   1cb44:	f504 708c 	add.w	r0, r4, #280	; 0x118
}
   1cb48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1cb4c:	f7fc bdda 	b.w	19704 <z_impl_k_sem_give>
   1cb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cb52 <att_req_send_process>:
{
   1cb52:	b570      	push	{r4, r5, r6, lr}
   1cb54:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1cb56:	3004      	adds	r0, #4
   1cb58:	f7ff fd70 	bl	1c63c <sys_slist_get>
	if (!node) {
   1cb5c:	4606      	mov	r6, r0
   1cb5e:	b1c0      	cbz	r0, 1cb92 <att_req_send_process+0x40>
	return list->head;
   1cb60:	6aab      	ldr	r3, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cb62:	b153      	cbz	r3, 1cb7a <att_req_send_process+0x28>
   1cb64:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   1cb68:	d007      	beq.n	1cb7a <att_req_send_process+0x28>
	return node->next;
   1cb6a:	681c      	ldr	r4, [r3, #0]
   1cb6c:	b10c      	cbz	r4, 1cb72 <att_req_send_process+0x20>
   1cb6e:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		if (!chan->req) {
   1cb72:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1cb76:	b13b      	cbz	r3, 1cb88 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cb78:	b964      	cbnz	r4, 1cb94 <att_req_send_process+0x42>
	parent->next = child;
   1cb7a:	686b      	ldr	r3, [r5, #4]
   1cb7c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cb7e:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1cb80:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1cb82:	b933      	cbnz	r3, 1cb92 <att_req_send_process+0x40>
	list->tail = node;
   1cb84:	60ae      	str	r6, [r5, #8]
}
   1cb86:	e004      	b.n	1cb92 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1cb88:	4631      	mov	r1, r6
   1cb8a:	f7f5 fdf7 	bl	1277c <bt_att_chan_req_send>
   1cb8e:	2800      	cmp	r0, #0
   1cb90:	dbf2      	blt.n	1cb78 <att_req_send_process+0x26>
}
   1cb92:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cb94:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   1cb98:	d004      	beq.n	1cba4 <att_req_send_process+0x52>
	return node->next;
   1cb9a:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cb9e:	b10b      	cbz	r3, 1cba4 <att_req_send_process+0x52>
   1cba0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1cba4:	4620      	mov	r0, r4
   1cba6:	461c      	mov	r4, r3
   1cba8:	e7e3      	b.n	1cb72 <att_req_send_process+0x20>

0001cbaa <bt_att_status>:
{
   1cbaa:	b538      	push	{r3, r4, r5, lr}
   1cbac:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cbae:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1cbb2:	07db      	lsls	r3, r3, #31
   1cbb4:	d519      	bpl.n	1cbea <bt_att_status+0x40>
	if (!chan->att) {
   1cbb6:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1cbba:	b1b0      	cbz	r0, 1cbea <bt_att_status+0x40>
	if (chan->req) {
   1cbbc:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1cbc0:	b99b      	cbnz	r3, 1cbea <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1cbc2:	3004      	adds	r0, #4
   1cbc4:	f7ff fd3a 	bl	1c63c <sys_slist_get>
	if (!node) {
   1cbc8:	4604      	mov	r4, r0
   1cbca:	b170      	cbz	r0, 1cbea <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1cbcc:	4601      	mov	r1, r0
   1cbce:	f1a5 0008 	sub.w	r0, r5, #8
   1cbd2:	f7f5 fdd3 	bl	1277c <bt_att_chan_req_send>
   1cbd6:	2800      	cmp	r0, #0
   1cbd8:	da07      	bge.n	1cbea <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1cbda:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1cbde:	685a      	ldr	r2, [r3, #4]
   1cbe0:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cbe2:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1cbe4:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1cbe6:	b902      	cbnz	r2, 1cbea <bt_att_status+0x40>
	list->tail = node;
   1cbe8:	609c      	str	r4, [r3, #8]
}
   1cbea:	bd38      	pop	{r3, r4, r5, pc}

0001cbec <att_write_req>:
{
   1cbec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cbee:	460c      	mov	r4, r1
   1cbf0:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1cbf2:	f101 0008 	add.w	r0, r1, #8
   1cbf6:	f000 fccb 	bl	1d590 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1cbfa:	89a2      	ldrh	r2, [r4, #12]
   1cbfc:	4603      	mov	r3, r0
   1cbfe:	9201      	str	r2, [sp, #4]
   1cc00:	68a2      	ldr	r2, [r4, #8]
   1cc02:	2112      	movs	r1, #18
   1cc04:	9200      	str	r2, [sp, #0]
   1cc06:	4628      	mov	r0, r5
   1cc08:	2213      	movs	r2, #19
   1cc0a:	f7f5 ff95 	bl	12b38 <att_write_rsp.constprop.0>
}
   1cc0e:	b003      	add	sp, #12
   1cc10:	bd30      	pop	{r4, r5, pc}

0001cc12 <att_write_cmd>:
{
   1cc12:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cc14:	460c      	mov	r4, r1
   1cc16:	4605      	mov	r5, r0
   1cc18:	f101 0008 	add.w	r0, r1, #8
   1cc1c:	f000 fcb8 	bl	1d590 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1cc20:	89a2      	ldrh	r2, [r4, #12]
   1cc22:	4603      	mov	r3, r0
   1cc24:	9201      	str	r2, [sp, #4]
   1cc26:	68a2      	ldr	r2, [r4, #8]
   1cc28:	4628      	mov	r0, r5
   1cc2a:	9200      	str	r2, [sp, #0]
   1cc2c:	2200      	movs	r2, #0
   1cc2e:	4611      	mov	r1, r2
   1cc30:	f7f5 ff82 	bl	12b38 <att_write_rsp.constprop.0>
}
   1cc34:	b003      	add	sp, #12
   1cc36:	bd30      	pop	{r4, r5, pc}

0001cc38 <att_read_blob_req>:
{
   1cc38:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1cc3a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1cc3c:	210c      	movs	r1, #12
   1cc3e:	8813      	ldrh	r3, [r2, #0]
   1cc40:	8852      	ldrh	r2, [r2, #2]
   1cc42:	9200      	str	r2, [sp, #0]
   1cc44:	220d      	movs	r2, #13
   1cc46:	f7f6 f8d3 	bl	12df0 <att_read_rsp>
}
   1cc4a:	b003      	add	sp, #12
   1cc4c:	f85d fb04 	ldr.w	pc, [sp], #4

0001cc50 <att_read_req>:
{
   1cc50:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1cc52:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1cc54:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1cc56:	210a      	movs	r1, #10
   1cc58:	881b      	ldrh	r3, [r3, #0]
   1cc5a:	9200      	str	r2, [sp, #0]
   1cc5c:	220b      	movs	r2, #11
   1cc5e:	f7f6 f8c7 	bl	12df0 <att_read_rsp>
}
   1cc62:	b003      	add	sp, #12
   1cc64:	f85d fb04 	ldr.w	pc, [sp], #4

0001cc68 <bt_att_init>:
	bt_gatt_init();
   1cc68:	f7f7 b8fe 	b.w	13e68 <bt_gatt_init>

0001cc6c <bt_att_get_mtu>:
{
   1cc6c:	b508      	push	{r3, lr}
	att = att_get(conn);
   1cc6e:	f7f5 fb87 	bl	12380 <att_get>
	if (!att) {
   1cc72:	b1d8      	cbz	r0, 1ccac <bt_att_get_mtu+0x40>
	return list->head;
   1cc74:	6a80      	ldr	r0, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cc76:	b1c8      	cbz	r0, 1ccac <bt_att_get_mtu+0x40>
   1cc78:	f5b0 719e 	subs.w	r1, r0, #316	; 0x13c
   1cc7c:	d015      	beq.n	1ccaa <bt_att_get_mtu+0x3e>
	return node->next;
   1cc7e:	6803      	ldr	r3, [r0, #0]
   1cc80:	b10b      	cbz	r3, 1cc86 <bt_att_get_mtu+0x1a>
   1cc82:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1cc86:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   1cc88:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
   1cc8c:	4290      	cmp	r0, r2
   1cc8e:	bf38      	it	cc
   1cc90:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cc92:	b15b      	cbz	r3, 1ccac <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cc94:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   1cc98:	d004      	beq.n	1cca4 <bt_att_get_mtu+0x38>
	return node->next;
   1cc9a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   1cc9e:	b10a      	cbz	r2, 1cca4 <bt_att_get_mtu+0x38>
   1cca0:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   1cca4:	4619      	mov	r1, r3
   1cca6:	4613      	mov	r3, r2
   1cca8:	e7ee      	b.n	1cc88 <bt_att_get_mtu+0x1c>
		return 0;
   1ccaa:	4608      	mov	r0, r1
}
   1ccac:	bd08      	pop	{r3, pc}

0001ccae <att_req_destroy>:
{
   1ccae:	b510      	push	{r4, lr}
   1ccb0:	4604      	mov	r4, r0
	if (req->buf) {
   1ccb2:	6900      	ldr	r0, [r0, #16]
   1ccb4:	b108      	cbz	r0, 1ccba <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1ccb6:	f7f8 fe87 	bl	159c8 <net_buf_unref>
	if (req->destroy) {
   1ccba:	68a3      	ldr	r3, [r4, #8]
   1ccbc:	b10b      	cbz	r3, 1ccc2 <att_req_destroy+0x14>
		req->destroy(req);
   1ccbe:	4620      	mov	r0, r4
   1ccc0:	4798      	blx	r3
	bt_att_req_free(req);
   1ccc2:	4620      	mov	r0, r4
}
   1ccc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1ccc8:	f7f6 ba30 	b.w	1312c <bt_att_req_free>

0001cccc <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1cccc:	898a      	ldrh	r2, [r1, #12]
   1ccce:	2300      	movs	r3, #0
   1ccd0:	6889      	ldr	r1, [r1, #8]
   1ccd2:	f7f6 ba37 	b.w	13144 <att_handle_rsp>

0001ccd6 <att_handle_find_type_rsp>:
   1ccd6:	f7ff bff9 	b.w	1cccc <att_handle_find_info_rsp>

0001ccda <att_handle_read_type_rsp>:
   1ccda:	f7ff bff7 	b.w	1cccc <att_handle_find_info_rsp>

0001ccde <att_handle_read_rsp>:
   1ccde:	f7ff bff5 	b.w	1cccc <att_handle_find_info_rsp>

0001cce2 <att_handle_read_blob_rsp>:
   1cce2:	f7ff bff3 	b.w	1cccc <att_handle_find_info_rsp>

0001cce6 <att_handle_read_mult_rsp>:
   1cce6:	f7ff bff1 	b.w	1cccc <att_handle_find_info_rsp>

0001ccea <att_handle_read_group_rsp>:
   1ccea:	f7ff bfef 	b.w	1cccc <att_handle_find_info_rsp>

0001ccee <att_handle_write_rsp>:
   1ccee:	f7ff bfed 	b.w	1cccc <att_handle_find_info_rsp>

0001ccf2 <att_handle_prepare_write_rsp>:
   1ccf2:	f7ff bfeb 	b.w	1cccc <att_handle_find_info_rsp>

0001ccf6 <att_handle_exec_write_rsp>:
   1ccf6:	f7ff bfe9 	b.w	1cccc <att_handle_find_info_rsp>

0001ccfa <att_confirm>:
   1ccfa:	f7ff bfe7 	b.w	1cccc <att_handle_find_info_rsp>

0001ccfe <att_mtu_rsp>:
{
   1ccfe:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   1cd00:	6889      	ldr	r1, [r1, #8]
{
   1cd02:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1cd04:	880c      	ldrh	r4, [r1, #0]
{
   1cd06:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1cd08:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1cd0a:	bf89      	itett	hi
   1cd0c:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1cd0e:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1cd10:	f8a3 4052 	strhhi.w	r4, [r3, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1cd14:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1cd18:	bf99      	ittee	ls
   1cd1a:	2304      	movls	r3, #4
   1cd1c:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1cd1e:	2300      	movhi	r3, #0
   1cd20:	8992      	ldrhhi	r2, [r2, #12]
}
   1cd22:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1cd24:	f7f6 ba0e 	b.w	13144 <att_handle_rsp>

0001cd28 <att_chan_detach>:
{
   1cd28:	b538      	push	{r3, r4, r5, lr}
   1cd2a:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1cd2c:	6800      	ldr	r0, [r0, #0]
   1cd2e:	f504 719e 	add.w	r1, r4, #316	; 0x13c
   1cd32:	3028      	adds	r0, #40	; 0x28
   1cd34:	f7ff fe51 	bl	1c9da <sys_slist_find_and_remove.isra.0>
		k_sem_give(&chan->tx_sem);
   1cd38:	f504 7590 	add.w	r5, r4, #288	; 0x120
   1cd3c:	4628      	mov	r0, r5
   1cd3e:	f7fc fce1 	bl	19704 <z_impl_k_sem_give>
   1cd42:	4628      	mov	r0, r5
   1cd44:	f7fc fcde 	bl	19704 <z_impl_k_sem_give>
   1cd48:	4628      	mov	r0, r5
   1cd4a:	f7fc fcdb 	bl	19704 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1cd4e:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   1cd52:	2200      	movs	r2, #0
   1cd54:	2300      	movs	r3, #0
   1cd56:	4628      	mov	r0, r5
   1cd58:	f7f8 fdb4 	bl	158c4 <net_buf_get>
   1cd5c:	4602      	mov	r2, r0
   1cd5e:	b950      	cbnz	r0, 1cd76 <att_chan_detach+0x4e>
	if (chan->req) {
   1cd60:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1cd64:	b123      	cbz	r3, 1cd70 <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1cd66:	4601      	mov	r1, r0
   1cd68:	230e      	movs	r3, #14
   1cd6a:	4620      	mov	r0, r4
   1cd6c:	f7f6 f9ea 	bl	13144 <att_handle_rsp>
	chan->att = NULL;
   1cd70:	2300      	movs	r3, #0
   1cd72:	6023      	str	r3, [r4, #0]
}
   1cd74:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1cd76:	f7f8 fe27 	bl	159c8 <net_buf_unref>
   1cd7a:	e7ea      	b.n	1cd52 <att_chan_detach+0x2a>

0001cd7c <bt_att_disconnected>:
{
   1cd7c:	b538      	push	{r3, r4, r5, lr}
   1cd7e:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1cd80:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1cd84:	f7ff ffd0 	bl	1cd28 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1cd88:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1cd8a:	b93b      	cbnz	r3, 1cd9c <bt_att_disconnected+0x20>
	att_reset(att);
   1cd8c:	4628      	mov	r0, r5
   1cd8e:	f7f6 fa37 	bl	13200 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1cd92:	6820      	ldr	r0, [r4, #0]
}
   1cd94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1cd98:	f7f8 bbc2 	b.w	15520 <bt_gatt_disconnected>
}
   1cd9c:	bd38      	pop	{r3, r4, r5, pc}

0001cd9e <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1cd9e:	6010      	str	r0, [r2, #0]
}
   1cda0:	2000      	movs	r0, #0
   1cda2:	4770      	bx	lr

0001cda4 <gatt_ccc_changed>:
{
   1cda4:	460b      	mov	r3, r1
   1cda6:	460a      	mov	r2, r1
   1cda8:	b430      	push	{r4, r5}
   1cdaa:	f101 0464 	add.w	r4, r1, #100	; 0x64
	uint16_t value = 0x0000;
   1cdae:	2100      	movs	r1, #0
		if (ccc->cfg[i].value > value) {
   1cdb0:	8915      	ldrh	r5, [r2, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1cdb2:	320a      	adds	r2, #10
   1cdb4:	42a9      	cmp	r1, r5
   1cdb6:	bf38      	it	cc
   1cdb8:	4629      	movcc	r1, r5
   1cdba:	42a2      	cmp	r2, r4
   1cdbc:	d1f8      	bne.n	1cdb0 <gatt_ccc_changed+0xc>
	if (value != ccc->value) {
   1cdbe:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   1cdc2:	428a      	cmp	r2, r1
   1cdc4:	d005      	beq.n	1cdd2 <gatt_ccc_changed+0x2e>
		ccc->value = value;
   1cdc6:	f8a3 1064 	strh.w	r1, [r3, #100]	; 0x64
		if (ccc->cfg_changed) {
   1cdca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1cdcc:	b10b      	cbz	r3, 1cdd2 <gatt_ccc_changed+0x2e>
}
   1cdce:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   1cdd0:	4718      	bx	r3
}
   1cdd2:	bc30      	pop	{r4, r5}
   1cdd4:	4770      	bx	lr

0001cdd6 <gatt_indicate_rsp>:
{
   1cdd6:	b510      	push	{r4, lr}
   1cdd8:	9c02      	ldr	r4, [sp, #8]
   1cdda:	460a      	mov	r2, r1
	params->_ref--;
   1cddc:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
   1cdde:	4621      	mov	r1, r4
	params->_ref--;
   1cde0:	3b01      	subs	r3, #1
   1cde2:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1cde4:	68a3      	ldr	r3, [r4, #8]
   1cde6:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1cde8:	68e3      	ldr	r3, [r4, #12]
   1cdea:	b12b      	cbz	r3, 1cdf8 <gatt_indicate_rsp+0x22>
   1cdec:	7da2      	ldrb	r2, [r4, #22]
   1cdee:	b91a      	cbnz	r2, 1cdf8 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1cdf0:	4620      	mov	r0, r4
}
   1cdf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1cdf6:	4718      	bx	r3
}
   1cdf8:	bd10      	pop	{r4, pc}

0001cdfa <match_uuid>:
	data->attr = attr;
   1cdfa:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1cdfc:	8091      	strh	r1, [r2, #4]
}
   1cdfe:	2000      	movs	r0, #0
   1ce00:	4770      	bx	lr

0001ce02 <ccc_set_cb>:
}
   1ce02:	2000      	movs	r0, #0
   1ce04:	4770      	bx	lr

0001ce06 <gen_hash_m>:
{
   1ce06:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1ce08:	6807      	ldr	r7, [r0, #0]
{
   1ce0a:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1ce0c:	783d      	ldrb	r5, [r7, #0]
{
   1ce0e:	4614      	mov	r4, r2
   1ce10:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1ce12:	b10d      	cbz	r5, 1ce18 <gen_hash_m+0x12>
	switch (u16->val) {
   1ce14:	2501      	movs	r5, #1
   1ce16:	e014      	b.n	1ce42 <gen_hash_m+0x3c>
   1ce18:	887b      	ldrh	r3, [r7, #2]
   1ce1a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1ce1e:	d004      	beq.n	1ce2a <gen_hash_m+0x24>
   1ce20:	d812      	bhi.n	1ce48 <gen_hash_m+0x42>
   1ce22:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1ce26:	2b03      	cmp	r3, #3
   1ce28:	d8f4      	bhi.n	1ce14 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1ce2a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ce2e:	2202      	movs	r2, #2
   1ce30:	4620      	mov	r0, r4
   1ce32:	f10d 010e 	add.w	r1, sp, #14
   1ce36:	f7fe fcd5 	bl	1b7e4 <tc_cmac_update>
   1ce3a:	b9e0      	cbnz	r0, 1ce76 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1ce3c:	f06f 0315 	mvn.w	r3, #21
   1ce40:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1ce42:	4628      	mov	r0, r5
   1ce44:	b009      	add	sp, #36	; 0x24
   1ce46:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1ce48:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1ce4c:	33ff      	adds	r3, #255	; 0xff
   1ce4e:	b29b      	uxth	r3, r3
   1ce50:	2b04      	cmp	r3, #4
   1ce52:	d8df      	bhi.n	1ce14 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1ce54:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ce58:	2202      	movs	r2, #2
   1ce5a:	4620      	mov	r0, r4
   1ce5c:	f10d 010e 	add.w	r1, sp, #14
   1ce60:	f7fe fcc0 	bl	1b7e4 <tc_cmac_update>
   1ce64:	2800      	cmp	r0, #0
   1ce66:	d0e9      	beq.n	1ce3c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1ce68:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ce6a:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1ce6c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ce70:	f10d 010e 	add.w	r1, sp, #14
   1ce74:	e017      	b.n	1cea6 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1ce76:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ce78:	2202      	movs	r2, #2
   1ce7a:	4620      	mov	r0, r4
   1ce7c:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1ce80:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ce84:	f7fe fcae 	bl	1b7e4 <tc_cmac_update>
   1ce88:	2800      	cmp	r0, #0
   1ce8a:	d0d7      	beq.n	1ce3c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1ce8c:	2000      	movs	r0, #0
   1ce8e:	2310      	movs	r3, #16
   1ce90:	4631      	mov	r1, r6
   1ce92:	eb0d 0203 	add.w	r2, sp, r3
   1ce96:	6877      	ldr	r7, [r6, #4]
   1ce98:	9000      	str	r0, [sp, #0]
   1ce9a:	47b8      	blx	r7
		if (len < 0) {
   1ce9c:	1e02      	subs	r2, r0, #0
   1ce9e:	da01      	bge.n	1cea4 <gen_hash_m+0x9e>
			state->err = len;
   1cea0:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1cea2:	e7ce      	b.n	1ce42 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1cea4:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1cea6:	4620      	mov	r0, r4
   1cea8:	f7fe fc9c 	bl	1b7e4 <tc_cmac_update>
   1ceac:	2800      	cmp	r0, #0
   1ceae:	d1b1      	bne.n	1ce14 <gen_hash_m+0xe>
   1ceb0:	e7c4      	b.n	1ce3c <gen_hash_m+0x36>

0001ceb2 <bt_addr_le_cmp>:
   1ceb2:	2207      	movs	r2, #7
   1ceb4:	f7ff b831 	b.w	1bf1a <memcmp>

0001ceb8 <find_ccc_cfg>:
{
   1ceb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ceba:	4606      	mov	r6, r0
   1cebc:	1c4c      	adds	r4, r1, #1
   1cebe:	f101 0565 	add.w	r5, r1, #101	; 0x65
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1cec2:	1e67      	subs	r7, r4, #1
		if (conn) {
   1cec4:	b14e      	cbz	r6, 1ceda <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1cec6:	4622      	mov	r2, r4
   1cec8:	4630      	mov	r0, r6
   1ceca:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1cece:	f7ff fa90 	bl	1c3f2 <bt_conn_is_peer_addr_le>
   1ced2:	b158      	cbz	r0, 1ceec <find_ccc_cfg+0x34>
}
   1ced4:	4638      	mov	r0, r7
   1ced6:	b003      	add	sp, #12
   1ced8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ceda:	4669      	mov	r1, sp
   1cedc:	4620      	mov	r0, r4
   1cede:	9600      	str	r6, [sp, #0]
   1cee0:	f8cd 6003 	str.w	r6, [sp, #3]
   1cee4:	f7ff ffe5 	bl	1ceb2 <bt_addr_le_cmp>
   1cee8:	2800      	cmp	r0, #0
   1ceea:	d0f3      	beq.n	1ced4 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ceec:	340a      	adds	r4, #10
   1ceee:	42ac      	cmp	r4, r5
   1cef0:	d1e7      	bne.n	1cec2 <find_ccc_cfg+0xa>
	return NULL;
   1cef2:	2700      	movs	r7, #0
   1cef4:	e7ee      	b.n	1ced4 <find_ccc_cfg+0x1c>

0001cef6 <ccc_find_cfg>:
{
   1cef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cefa:	4604      	mov	r4, r0
   1cefc:	460f      	mov	r7, r1
   1cefe:	4690      	mov	r8, r2
   1cf00:	2500      	movs	r5, #0
   1cf02:	1c46      	adds	r6, r0, #1
		if (id == ccc->cfg[i].id &&
   1cf04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1cf08:	4543      	cmp	r3, r8
   1cf0a:	d107      	bne.n	1cf1c <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1cf0c:	4639      	mov	r1, r7
   1cf0e:	4630      	mov	r0, r6
   1cf10:	f7ff ffcf 	bl	1ceb2 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1cf14:	b910      	cbnz	r0, 1cf1c <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   1cf16:	1960      	adds	r0, r4, r5
}
   1cf18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1cf1c:	350a      	adds	r5, #10
   1cf1e:	2d64      	cmp	r5, #100	; 0x64
   1cf20:	f106 060a 	add.w	r6, r6, #10
   1cf24:	d1ee      	bne.n	1cf04 <ccc_find_cfg+0xe>
	return NULL;
   1cf26:	2000      	movs	r0, #0
   1cf28:	e7f6      	b.n	1cf18 <ccc_find_cfg+0x22>

0001cf2a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1cf2a:	2207      	movs	r2, #7
   1cf2c:	f7ff b806 	b.w	1bf3c <memcpy>

0001cf30 <clear_ccc_cfg>:
{
   1cf30:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1cf32:	2500      	movs	r5, #0
{
   1cf34:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1cf36:	4669      	mov	r1, sp
   1cf38:	3001      	adds	r0, #1
   1cf3a:	9500      	str	r5, [sp, #0]
   1cf3c:	f8cd 5003 	str.w	r5, [sp, #3]
   1cf40:	f7ff fff3 	bl	1cf2a <bt_addr_le_copy>
	cfg->id = 0U;
   1cf44:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1cf46:	8125      	strh	r5, [r4, #8]
}
   1cf48:	b003      	add	sp, #12
   1cf4a:	bd30      	pop	{r4, r5, pc}

0001cf4c <atomic_or>:
{
   1cf4c:	4603      	mov	r3, r0
}
   1cf4e:	e8d3 0fef 	ldaex	r0, [r3]
   1cf52:	ea40 0201 	orr.w	r2, r0, r1
   1cf56:	e8c3 2fec 	stlex	ip, r2, [r3]
   1cf5a:	f1bc 0f00 	cmp.w	ip, #0
   1cf5e:	d1f6      	bne.n	1cf4e <atomic_or+0x2>
   1cf60:	4770      	bx	lr

0001cf62 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cf62:	e8d0 0faf 	lda	r0, [r0]
}
   1cf66:	4770      	bx	lr

0001cf68 <gatt_read_mult_rsp>:
{
   1cf68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cf6a:	9d08      	ldr	r5, [sp, #32]
   1cf6c:	4606      	mov	r6, r0
	if (err || !length) {
   1cf6e:	460c      	mov	r4, r1
	params->func(conn, 0, params, pdu, length);
   1cf70:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   1cf72:	b901      	cbnz	r1, 1cf76 <gatt_read_mult_rsp+0xe>
   1cf74:	b94b      	cbnz	r3, 1cf8a <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   1cf76:	2300      	movs	r3, #0
   1cf78:	462a      	mov	r2, r5
   1cf7a:	4621      	mov	r1, r4
   1cf7c:	9308      	str	r3, [sp, #32]
	params->func(conn, 0, params, NULL, 0);
   1cf7e:	4630      	mov	r0, r6
   1cf80:	46bc      	mov	ip, r7
}
   1cf82:	b003      	add	sp, #12
   1cf84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   1cf88:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   1cf8a:	9300      	str	r3, [sp, #0]
   1cf8c:	4613      	mov	r3, r2
   1cf8e:	462a      	mov	r2, r5
   1cf90:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   1cf92:	9408      	str	r4, [sp, #32]
   1cf94:	4623      	mov	r3, r4
   1cf96:	462a      	mov	r2, r5
   1cf98:	4621      	mov	r1, r4
   1cf9a:	682f      	ldr	r7, [r5, #0]
   1cf9c:	e7ef      	b.n	1cf7e <gatt_read_mult_rsp+0x16>

0001cf9e <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1cf9e:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   1cfa0:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1cfa2:	3001      	adds	r0, #1
   1cfa4:	4669      	mov	r1, sp
   1cfa6:	9300      	str	r3, [sp, #0]
   1cfa8:	f8cd 3003 	str.w	r3, [sp, #3]
   1cfac:	f7ff ffbd 	bl	1cf2a <bt_addr_le_copy>
}
   1cfb0:	b003      	add	sp, #12
   1cfb2:	f85d fb04 	ldr.w	pc, [sp], #4

0001cfb6 <clear_cf_cfg>:
{
   1cfb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cfb8:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1cfba:	2500      	movs	r5, #0
   1cfbc:	4669      	mov	r1, sp
   1cfbe:	3001      	adds	r0, #1
   1cfc0:	9500      	str	r5, [sp, #0]
   1cfc2:	f8cd 5003 	str.w	r5, [sp, #3]
   1cfc6:	f7ff ffb0 	bl	1cf2a <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1cfca:	f104 0008 	add.w	r0, r4, #8
   1cfce:	2201      	movs	r2, #1
   1cfd0:	4629      	mov	r1, r5
   1cfd2:	f7fe ffde 	bl	1bf92 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1cfd6:	340c      	adds	r4, #12
   1cfd8:	e8d4 3fef 	ldaex	r3, [r4]
   1cfdc:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1cfe0:	2a00      	cmp	r2, #0
   1cfe2:	d1f9      	bne.n	1cfd8 <clear_cf_cfg+0x22>
}
   1cfe4:	b003      	add	sp, #12
   1cfe6:	bd30      	pop	{r4, r5, pc}

0001cfe8 <gatt_sub_remove>:
{
   1cfe8:	b570      	push	{r4, r5, r6, lr}
   1cfea:	460c      	mov	r4, r1
	if (params) {
   1cfec:	4619      	mov	r1, r3
   1cfee:	b16b      	cbz	r3, 1d00c <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1cff0:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   1cff4:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   1cff6:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   1cff8:	b97a      	cbnz	r2, 1d01a <gatt_sub_remove+0x32>
   1cffa:	42ae      	cmp	r6, r5
	list->head = node;
   1cffc:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1cffe:	d100      	bne.n	1d002 <gatt_sub_remove+0x1a>
	list->tail = node;
   1d000:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1d002:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1d004:	680d      	ldr	r5, [r1, #0]
   1d006:	461a      	mov	r2, r3
   1d008:	614b      	str	r3, [r1, #20]
   1d00a:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   1d00c:	68a3      	ldr	r3, [r4, #8]
   1d00e:	b94b      	cbnz	r3, 1d024 <gatt_sub_remove+0x3c>
   1d010:	4620      	mov	r0, r4
}
   1d012:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d016:	f7ff bfc2 	b.w	1cf9e <gatt_sub_remove.part.0>
Z_GENLIST_REMOVE(slist, snode)
   1d01a:	42ae      	cmp	r6, r5
	parent->next = child;
   1d01c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1d01e:	bf08      	it	eq
   1d020:	60e2      	streq	r2, [r4, #12]
}
   1d022:	e7ee      	b.n	1d002 <gatt_sub_remove+0x1a>
   1d024:	bd70      	pop	{r4, r5, r6, pc}

0001d026 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1d026:	2a02      	cmp	r2, #2
{
   1d028:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1d02a:	d108      	bne.n	1d03e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1d02c:	2300      	movs	r3, #0
   1d02e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1d032:	461a      	mov	r2, r3
   1d034:	7a00      	ldrb	r0, [r0, #8]
   1d036:	f7f6 fb7d 	bl	13734 <sc_save>
}
   1d03a:	2002      	movs	r0, #2
   1d03c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1d03e:	f7f6 fe2d 	bl	13c9c <sc_clear>
   1d042:	e7fa      	b.n	1d03a <sc_ccc_cfg_write+0x14>

0001d044 <gatt_write_ccc_rsp>:
{
   1d044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d048:	4606      	mov	r6, r0
   1d04a:	460d      	mov	r5, r1
   1d04c:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d04e:	f104 0310 	add.w	r3, r4, #16
   1d052:	e8d3 2fef 	ldaex	r2, [r3]
   1d056:	f022 0204 	bic.w	r2, r2, #4
   1d05a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d05e:	2900      	cmp	r1, #0
   1d060:	d1f7      	bne.n	1d052 <gatt_write_ccc_rsp+0xe>
	if (err) {
   1d062:	b1dd      	cbz	r5, 1d09c <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   1d064:	f7f6 fa4e 	bl	13504 <gatt_sub_find>
		if (!sub) {
   1d068:	4601      	mov	r1, r0
   1d06a:	b300      	cbz	r0, 1d0ae <gatt_write_ccc_rsp+0x6a>
	return list->head;
   1d06c:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d06e:	b143      	cbz	r3, 1d082 <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1d070:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1d072:	f104 0014 	add.w	r0, r4, #20
   1d076:	4283      	cmp	r3, r0
   1d078:	d10b      	bne.n	1d092 <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   1d07a:	4623      	mov	r3, r4
   1d07c:	4630      	mov	r0, r6
   1d07e:	f7ff ffb3 	bl	1cfe8 <gatt_sub_remove>
	if (params->write) {
   1d082:	6863      	ldr	r3, [r4, #4]
   1d084:	b19b      	cbz	r3, 1d0ae <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   1d086:	4629      	mov	r1, r5
   1d088:	4630      	mov	r0, r6
}
   1d08a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1d08e:	2200      	movs	r2, #0
   1d090:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d092:	2a00      	cmp	r2, #0
   1d094:	d0f5      	beq.n	1d082 <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1d096:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d098:	6812      	ldr	r2, [r2, #0]
   1d09a:	e7ec      	b.n	1d076 <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   1d09c:	89a3      	ldrh	r3, [r4, #12]
   1d09e:	2b00      	cmp	r3, #0
   1d0a0:	d1ef      	bne.n	1d082 <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   1d0a2:	462b      	mov	r3, r5
   1d0a4:	462a      	mov	r2, r5
   1d0a6:	4621      	mov	r1, r4
   1d0a8:	6827      	ldr	r7, [r4, #0]
   1d0aa:	47b8      	blx	r7
   1d0ac:	e7e9      	b.n	1d082 <gatt_write_ccc_rsp+0x3e>
}
   1d0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d0b2 <read_ppcp>:
{
   1d0b2:	b513      	push	{r0, r1, r4, lr}
   1d0b4:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1d0b6:	2218      	movs	r2, #24
   1d0b8:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1d0bc:	2228      	movs	r2, #40	; 0x28
   1d0be:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1d0c2:	2200      	movs	r2, #0
   1d0c4:	f8ad 2004 	strh.w	r2, [sp, #4]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1d0c8:	222a      	movs	r2, #42	; 0x2a
{
   1d0ca:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1d0ce:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1d0d2:	2908      	cmp	r1, #8
   1d0d4:	d80b      	bhi.n	1d0ee <read_ppcp+0x3c>
	len = MIN(buf_len, value_len - offset);
   1d0d6:	f1c1 0408 	rsb	r4, r1, #8
   1d0da:	429c      	cmp	r4, r3
   1d0dc:	bfa8      	it	ge
   1d0de:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d0e0:	4469      	add	r1, sp
   1d0e2:	4622      	mov	r2, r4
   1d0e4:	f7fe ff2a 	bl	1bf3c <memcpy>
}
   1d0e8:	4620      	mov	r0, r4
   1d0ea:	b002      	add	sp, #8
   1d0ec:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d0ee:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1d0f2:	e7f9      	b.n	1d0e8 <read_ppcp+0x36>

0001d0f4 <read_appearance>:
{
   1d0f4:	b513      	push	{r0, r1, r4, lr}
   1d0f6:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1d0f8:	2200      	movs	r2, #0
{
   1d0fa:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1d0fe:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1d102:	2902      	cmp	r1, #2
   1d104:	d80d      	bhi.n	1d122 <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   1d106:	f1c1 0402 	rsb	r4, r1, #2
   1d10a:	429c      	cmp	r4, r3
   1d10c:	bfa8      	it	ge
   1d10e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d110:	f10d 0306 	add.w	r3, sp, #6
   1d114:	4622      	mov	r2, r4
   1d116:	4419      	add	r1, r3
   1d118:	f7fe ff10 	bl	1bf3c <memcpy>
}
   1d11c:	4620      	mov	r0, r4
   1d11e:	b002      	add	sp, #8
   1d120:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d122:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1d126:	e7f9      	b.n	1d11c <read_appearance+0x28>

0001d128 <read_name>:
{
   1d128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d12c:	4698      	mov	r8, r3
   1d12e:	4615      	mov	r5, r2
   1d130:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1d134:	f7f3 fb70 	bl	10818 <bt_get_name>
   1d138:	4607      	mov	r7, r0
				 strlen(name));
   1d13a:	f7fe fec1 	bl	1bec0 <strlen>
	if (offset > value_len) {
   1d13e:	b283      	uxth	r3, r0
   1d140:	42b3      	cmp	r3, r6
   1d142:	d30c      	bcc.n	1d15e <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1d144:	1b9c      	subs	r4, r3, r6
   1d146:	4544      	cmp	r4, r8
   1d148:	bfa8      	it	ge
   1d14a:	4644      	movge	r4, r8
   1d14c:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1d14e:	4622      	mov	r2, r4
   1d150:	4628      	mov	r0, r5
   1d152:	19b9      	adds	r1, r7, r6
   1d154:	f7fe fef2 	bl	1bf3c <memcpy>
}
   1d158:	4620      	mov	r0, r4
   1d15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d15e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1d162:	e7f9      	b.n	1d158 <read_name+0x30>

0001d164 <cf_read>:
{
   1d164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d166:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1d168:	2300      	movs	r3, #0
{
   1d16a:	4615      	mov	r5, r2
   1d16c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1d170:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1d174:	f7f6 f988 	bl	13488 <find_cf_cfg>
	if (cfg) {
   1d178:	b128      	cbz	r0, 1d186 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1d17a:	f100 0108 	add.w	r1, r0, #8
   1d17e:	2201      	movs	r2, #1
   1d180:	a801      	add	r0, sp, #4
   1d182:	f7fe fedb 	bl	1bf3c <memcpy>
	if (offset > value_len) {
   1d186:	2e01      	cmp	r6, #1
   1d188:	d80d      	bhi.n	1d1a6 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1d18a:	f1c6 0401 	rsb	r4, r6, #1
   1d18e:	42bc      	cmp	r4, r7
   1d190:	bfa8      	it	ge
   1d192:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1d194:	ab01      	add	r3, sp, #4
   1d196:	4622      	mov	r2, r4
   1d198:	4628      	mov	r0, r5
   1d19a:	1999      	adds	r1, r3, r6
   1d19c:	f7fe fece 	bl	1bf3c <memcpy>
}
   1d1a0:	4620      	mov	r0, r4
   1d1a2:	b003      	add	sp, #12
   1d1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d1a6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1d1aa:	e7f9      	b.n	1d1a0 <cf_read+0x3c>

0001d1ac <bt_gatt_attr_read_service>:
{
   1d1ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1d1ae:	68c9      	ldr	r1, [r1, #12]
{
   1d1b0:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1d1b2:	780b      	ldrb	r3, [r1, #0]
{
   1d1b4:	4610      	mov	r0, r2
   1d1b6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1d1ba:	b993      	cbnz	r3, 1d1e2 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1d1bc:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   1d1be:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1d1c0:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1d1c4:	d819      	bhi.n	1d1fa <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1d1c6:	f1c5 0202 	rsb	r2, r5, #2
   1d1ca:	4294      	cmp	r4, r2
   1d1cc:	bfa8      	it	ge
   1d1ce:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1d1d0:	4622      	mov	r2, r4
   1d1d2:	f10d 0306 	add.w	r3, sp, #6
   1d1d6:	1959      	adds	r1, r3, r5
   1d1d8:	f7fe feb0 	bl	1bf3c <memcpy>
}
   1d1dc:	4620      	mov	r0, r4
   1d1de:	b003      	add	sp, #12
   1d1e0:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1d1e2:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1d1e4:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1d1e8:	d807      	bhi.n	1d1fa <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1d1ea:	f1c5 0210 	rsb	r2, r5, #16
   1d1ee:	4294      	cmp	r4, r2
   1d1f0:	bfa8      	it	ge
   1d1f2:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1d1f4:	4429      	add	r1, r5
   1d1f6:	4622      	mov	r2, r4
   1d1f8:	e7ee      	b.n	1d1d8 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d1fa:	f06f 0406 	mvn.w	r4, #6
   1d1fe:	e7ed      	b.n	1d1dc <bt_gatt_attr_read_service+0x30>

0001d200 <bt_gatt_attr_read_ccc>:
{
   1d200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1d202:	68c9      	ldr	r1, [r1, #12]
{
   1d204:	4615      	mov	r5, r2
   1d206:	461f      	mov	r7, r3
   1d208:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1d20c:	f7ff fe54 	bl	1ceb8 <find_ccc_cfg>
	if (cfg) {
   1d210:	b100      	cbz	r0, 1d214 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1d212:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1d214:	2e02      	cmp	r6, #2
   1d216:	f8ad 0006 	strh.w	r0, [sp, #6]
   1d21a:	d80e      	bhi.n	1d23a <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1d21c:	f1c6 0402 	rsb	r4, r6, #2
   1d220:	42bc      	cmp	r4, r7
   1d222:	bfa8      	it	ge
   1d224:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1d226:	f10d 0306 	add.w	r3, sp, #6
   1d22a:	4622      	mov	r2, r4
   1d22c:	4628      	mov	r0, r5
   1d22e:	1999      	adds	r1, r3, r6
   1d230:	f7fe fe84 	bl	1bf3c <memcpy>
}
   1d234:	4620      	mov	r0, r4
   1d236:	b003      	add	sp, #12
   1d238:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d23a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1d23e:	e7f9      	b.n	1d234 <bt_gatt_attr_read_ccc+0x34>

0001d240 <sc_restore_rsp>:
{
   1d240:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1d242:	f7f6 f921 	bl	13488 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1d246:	b140      	cbz	r0, 1d25a <sc_restore_rsp+0x1a>
   1d248:	7a03      	ldrb	r3, [r0, #8]
   1d24a:	07db      	lsls	r3, r3, #31
   1d24c:	d505      	bpl.n	1d25a <sc_restore_rsp+0x1a>
}
   1d24e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d252:	2101      	movs	r1, #1
   1d254:	300c      	adds	r0, #12
   1d256:	f7ff be79 	b.w	1cf4c <atomic_or>
   1d25a:	bd08      	pop	{r3, pc}

0001d25c <bt_gatt_attr_read>:
{
   1d25c:	b538      	push	{r3, r4, r5, lr}
   1d25e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1d262:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1d266:	4610      	mov	r0, r2
	if (offset > value_len) {
   1d268:	42a9      	cmp	r1, r5
   1d26a:	d80b      	bhi.n	1d284 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1d26c:	1a6d      	subs	r5, r5, r1
   1d26e:	429d      	cmp	r5, r3
   1d270:	bfa8      	it	ge
   1d272:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d274:	9b05      	ldr	r3, [sp, #20]
   1d276:	b2ad      	uxth	r5, r5
   1d278:	462a      	mov	r2, r5
   1d27a:	4419      	add	r1, r3
   1d27c:	f7fe fe5e 	bl	1bf3c <memcpy>
}
   1d280:	4628      	mov	r0, r5
   1d282:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d284:	f06f 0506 	mvn.w	r5, #6
   1d288:	e7fa      	b.n	1d280 <bt_gatt_attr_read+0x24>

0001d28a <bt_gatt_attr_value_handle>:
{
   1d28a:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d28c:	4604      	mov	r4, r0
   1d28e:	b910      	cbnz	r0, 1d296 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1d290:	2000      	movs	r0, #0
}
   1d292:	b002      	add	sp, #8
   1d294:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1d296:	2300      	movs	r3, #0
   1d298:	f88d 3004 	strb.w	r3, [sp, #4]
   1d29c:	f642 0303 	movw	r3, #10243	; 0x2803
   1d2a0:	6800      	ldr	r0, [r0, #0]
   1d2a2:	a901      	add	r1, sp, #4
   1d2a4:	f8ad 3006 	strh.w	r3, [sp, #6]
   1d2a8:	f7fe febd 	bl	1c026 <bt_uuid_cmp>
   1d2ac:	2800      	cmp	r0, #0
   1d2ae:	d1ef      	bne.n	1d290 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1d2b0:	68e3      	ldr	r3, [r4, #12]
   1d2b2:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1d2b4:	2800      	cmp	r0, #0
   1d2b6:	d1ec      	bne.n	1d292 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1d2b8:	4620      	mov	r0, r4
   1d2ba:	f7f6 fe3d 	bl	13f38 <bt_gatt_attr_get_handle>
   1d2be:	3001      	adds	r0, #1
   1d2c0:	b280      	uxth	r0, r0
	return handle;
   1d2c2:	e7e6      	b.n	1d292 <bt_gatt_attr_value_handle+0x8>

0001d2c4 <bt_gatt_attr_read_chrc>:
{
   1d2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1d2c6:	68cf      	ldr	r7, [r1, #12]
{
   1d2c8:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1d2ca:	79bb      	ldrb	r3, [r7, #6]
{
   1d2cc:	b087      	sub	sp, #28
   1d2ce:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1d2d0:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1d2d4:	4615      	mov	r5, r2
   1d2d6:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1d2da:	f7ff ffd6 	bl	1d28a <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d2de:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1d2e0:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d2e4:	780b      	ldrb	r3, [r1, #0]
   1d2e6:	b99b      	cbnz	r3, 1d310 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1d2e8:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   1d2ea:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1d2ec:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1d2f0:	42b1      	cmp	r1, r6
   1d2f2:	d315      	bcc.n	1d320 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1d2f4:	1b89      	subs	r1, r1, r6
   1d2f6:	42a1      	cmp	r1, r4
   1d2f8:	bfa8      	it	ge
   1d2fa:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1d2fc:	ab01      	add	r3, sp, #4
   1d2fe:	b28c      	uxth	r4, r1
   1d300:	4622      	mov	r2, r4
   1d302:	4628      	mov	r0, r5
   1d304:	1999      	adds	r1, r3, r6
   1d306:	f7fe fe19 	bl	1bf3c <memcpy>
}
   1d30a:	4620      	mov	r0, r4
   1d30c:	b007      	add	sp, #28
   1d30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1d310:	3101      	adds	r1, #1
   1d312:	2210      	movs	r2, #16
   1d314:	f10d 0007 	add.w	r0, sp, #7
   1d318:	f7fe fe10 	bl	1bf3c <memcpy>
		value_len += 16U;
   1d31c:	2113      	movs	r1, #19
   1d31e:	e7e7      	b.n	1d2f0 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d320:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1d324:	e7f1      	b.n	1d30a <bt_gatt_attr_read_chrc+0x46>

0001d326 <bt_gatt_foreach_attr>:
{
   1d326:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1d328:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1d32c:	2300      	movs	r3, #0
   1d32e:	461a      	mov	r2, r3
   1d330:	9300      	str	r3, [sp, #0]
   1d332:	f7f6 fe45 	bl	13fc0 <bt_gatt_foreach_attr_type>
}
   1d336:	b005      	add	sp, #20
   1d338:	f85d fb04 	ldr.w	pc, [sp], #4

0001d33c <db_hash_process>:
	db_hash_gen(true);
   1d33c:	2001      	movs	r0, #1
   1d33e:	f7f6 beab 	b.w	14098 <db_hash_gen>

0001d342 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1d342:	07d3      	lsls	r3, r2, #31
{
   1d344:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d346:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1d348:	d504      	bpl.n	1d354 <bt_gatt_check_perm+0x12>
   1d34a:	f014 0f15 	tst.w	r4, #21
   1d34e:	d017      	beq.n	1d380 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d350:	684b      	ldr	r3, [r1, #4]
   1d352:	b1ab      	cbz	r3, 1d380 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1d354:	0793      	lsls	r3, r2, #30
   1d356:	d504      	bpl.n	1d362 <bt_gatt_check_perm+0x20>
   1d358:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1d35c:	d012      	beq.n	1d384 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1d35e:	688b      	ldr	r3, [r1, #8]
   1d360:	b183      	cbz	r3, 1d384 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1d362:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1d364:	f014 0f30 	tst.w	r4, #48	; 0x30
   1d368:	d104      	bne.n	1d374 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1d36a:	f014 000c 	ands.w	r0, r4, #12
   1d36e:	bf18      	it	ne
   1d370:	200f      	movne	r0, #15
}
   1d372:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1d374:	f7ff f832 	bl	1c3dc <bt_conn_get_security>
   1d378:	2802      	cmp	r0, #2
   1d37a:	d8f6      	bhi.n	1d36a <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1d37c:	2005      	movs	r0, #5
   1d37e:	e7f8      	b.n	1d372 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1d380:	2002      	movs	r0, #2
   1d382:	e7f6      	b.n	1d372 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1d384:	2003      	movs	r0, #3
   1d386:	e7f4      	b.n	1d372 <bt_gatt_check_perm+0x30>

0001d388 <gatt_discover_next>:
{
   1d388:	b570      	push	{r4, r5, r6, lr}
   1d38a:	4605      	mov	r5, r0
   1d38c:	4614      	mov	r4, r2
	if (!last_handle)
   1d38e:	b929      	cbnz	r1, 1d39c <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   1d390:	4621      	mov	r1, r4
   1d392:	4628      	mov	r0, r5
   1d394:	f7f7 f9d8 	bl	14748 <bt_gatt_discover>
   1d398:	b928      	cbnz	r0, 1d3a6 <gatt_discover_next+0x1e>
}
   1d39a:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   1d39c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d3a0:	4291      	cmp	r1, r2
   1d3a2:	d107      	bne.n	1d3b4 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   1d3a4:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   1d3a6:	4622      	mov	r2, r4
   1d3a8:	4628      	mov	r0, r5
   1d3aa:	6863      	ldr	r3, [r4, #4]
   1d3ac:	2100      	movs	r1, #0
}
   1d3ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   1d3b2:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   1d3b4:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   1d3b6:	1c4b      	adds	r3, r1, #1
   1d3b8:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   1d3ba:	429a      	cmp	r2, r3
		params->start_handle++;
   1d3bc:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   1d3be:	d2e7      	bcs.n	1d390 <gatt_discover_next+0x8>
   1d3c0:	e7f1      	b.n	1d3a6 <gatt_discover_next+0x1e>

0001d3c2 <gatt_find_type_rsp>:
{
   1d3c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d3c6:	b088      	sub	sp, #32
   1d3c8:	4607      	mov	r7, r0
   1d3ca:	4614      	mov	r4, r2
   1d3cc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   1d3d0:	b911      	cbnz	r1, 1d3d8 <gatt_find_type_rsp+0x16>
   1d3d2:	f013 0803 	ands.w	r8, r3, #3
   1d3d6:	d008      	beq.n	1d3ea <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   1d3d8:	464a      	mov	r2, r9
   1d3da:	2100      	movs	r1, #0
   1d3dc:	4638      	mov	r0, r7
   1d3de:	f8d9 3004 	ldr.w	r3, [r9, #4]
}
   1d3e2:	b008      	add	sp, #32
   1d3e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   1d3e8:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1d3ea:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1d3ec:	f642 0a01 	movw	sl, #10241	; 0x2801
   1d3f0:	f3c3 0387 	ubfx	r3, r3, #2, #8
   1d3f4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   1d3f8:	42ac      	cmp	r4, r5
   1d3fa:	d107      	bne.n	1d40c <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   1d3fc:	464a      	mov	r2, r9
   1d3fe:	4641      	mov	r1, r8
   1d400:	4638      	mov	r0, r7
}
   1d402:	b008      	add	sp, #32
   1d404:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   1d408:	f7ff bfbe 	b.w	1d388 <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1d40c:	f899 1010 	ldrb.w	r1, [r9, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1d410:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1d412:	2900      	cmp	r1, #0
   1d414:	bf0c      	ite	eq
   1d416:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   1d41a:	4651      	movne	r1, sl
		value.end_handle = end_handle;
   1d41c:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1d420:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   1d424:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   1d428:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   1d42a:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1d42c:	ab01      	add	r3, sp, #4
   1d42e:	f8ad 1002 	strh.w	r1, [sp, #2]
   1d432:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   1d434:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d438:	4638      	mov	r0, r7
   1d43a:	464a      	mov	r2, r9
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1d43c:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d440:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1d444:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1d448:	f8cd d00c 	str.w	sp, [sp, #12]
   1d44c:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d450:	a903      	add	r1, sp, #12
   1d452:	4798      	blx	r3
   1d454:	3404      	adds	r4, #4
   1d456:	2800      	cmp	r0, #0
   1d458:	d1ce      	bne.n	1d3f8 <gatt_find_type_rsp+0x36>
}
   1d45a:	b008      	add	sp, #32
   1d45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d460 <bt_gatt_notification>:
{
   1d460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d464:	4607      	mov	r7, r0
   1d466:	4688      	mov	r8, r1
   1d468:	4691      	mov	r9, r2
   1d46a:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1d46c:	f7f6 f84a 	bl	13504 <gatt_sub_find>
	if (!sub) {
   1d470:	b1f8      	cbz	r0, 1d4b2 <bt_gatt_notification+0x52>
	return list->head;
   1d472:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1d474:	b1eb      	cbz	r3, 1d4b2 <bt_gatt_notification+0x52>
   1d476:	f1b3 0614 	subs.w	r6, r3, #20
   1d47a:	d01a      	beq.n	1d4b2 <bt_gatt_notification+0x52>
	return node->next;
   1d47c:	681c      	ldr	r4, [r3, #0]
   1d47e:	b104      	cbz	r4, 1d482 <bt_gatt_notification+0x22>
   1d480:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1d482:	8933      	ldrh	r3, [r6, #8]
   1d484:	4543      	cmp	r3, r8
   1d486:	d10a      	bne.n	1d49e <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1d488:	4653      	mov	r3, sl
   1d48a:	464a      	mov	r2, r9
   1d48c:	4631      	mov	r1, r6
   1d48e:	4638      	mov	r0, r7
   1d490:	6835      	ldr	r5, [r6, #0]
   1d492:	47a8      	blx	r5
   1d494:	b918      	cbnz	r0, 1d49e <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1d496:	4631      	mov	r1, r6
   1d498:	4638      	mov	r0, r7
   1d49a:	f7f7 fea5 	bl	151e8 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1d49e:	b144      	cbz	r4, 1d4b2 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d4a0:	f114 0514 	adds.w	r5, r4, #20
   1d4a4:	d002      	beq.n	1d4ac <bt_gatt_notification+0x4c>
	return node->next;
   1d4a6:	6965      	ldr	r5, [r4, #20]
   1d4a8:	b105      	cbz	r5, 1d4ac <bt_gatt_notification+0x4c>
   1d4aa:	3d14      	subs	r5, #20
{
   1d4ac:	4626      	mov	r6, r4
   1d4ae:	462c      	mov	r4, r5
   1d4b0:	e7e7      	b.n	1d482 <bt_gatt_notification+0x22>
}
   1d4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d4b6 <bt_gatt_change_aware>:
{
   1d4b6:	b510      	push	{r4, lr}
   1d4b8:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1d4ba:	f7f5 ffe5 	bl	13488 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1d4be:	b910      	cbnz	r0, 1d4c6 <bt_gatt_change_aware+0x10>
		return true;
   1d4c0:	2401      	movs	r4, #1
}
   1d4c2:	4620      	mov	r0, r4
   1d4c4:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1d4c6:	7a03      	ldrb	r3, [r0, #8]
   1d4c8:	07db      	lsls	r3, r3, #31
   1d4ca:	d5f9      	bpl.n	1d4c0 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1d4cc:	f100 030c 	add.w	r3, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1d4d0:	4618      	mov	r0, r3
   1d4d2:	f7ff fd46 	bl	1cf62 <atomic_get>
   1d4d6:	07c1      	lsls	r1, r0, #31
   1d4d8:	d4f2      	bmi.n	1d4c0 <bt_gatt_change_aware+0xa>
	if (!req) {
   1d4da:	2c00      	cmp	r4, #0
   1d4dc:	d0f1      	beq.n	1d4c2 <bt_gatt_change_aware+0xc>
   1d4de:	4618      	mov	r0, r3
   1d4e0:	f7ff fd3f 	bl	1cf62 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1d4e4:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d4e6:	f3c0 0440 	ubfx	r4, r0, #1, #1
   1d4ea:	d50c      	bpl.n	1d506 <bt_gatt_change_aware+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d4ec:	e8d3 2fef 	ldaex	r2, [r3]
   1d4f0:	f022 0202 	bic.w	r2, r2, #2
   1d4f4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d4f8:	2900      	cmp	r1, #0
   1d4fa:	d1f7      	bne.n	1d4ec <bt_gatt_change_aware+0x36>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d4fc:	2101      	movs	r1, #1
   1d4fe:	4618      	mov	r0, r3
   1d500:	f7ff fd24 	bl	1cf4c <atomic_or>
}
   1d504:	e7dd      	b.n	1d4c2 <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d506:	2102      	movs	r1, #2
   1d508:	e7f9      	b.n	1d4fe <bt_gatt_change_aware+0x48>

0001d50a <bt_smp_recv>:
{
   1d50a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1d50c:	2100      	movs	r1, #0
   1d50e:	f04f 32ff 	mov.w	r2, #4294967295
   1d512:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1d516:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1d518:	4608      	mov	r0, r1
   1d51a:	f7ff f83b 	bl	1c594 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   1d51e:	f100 0608 	add.w	r6, r0, #8
   1d522:	4604      	mov	r4, r0
   1d524:	2101      	movs	r1, #1
   1d526:	4630      	mov	r0, r6
   1d528:	f7f8 fb64 	bl	15bf4 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1d52c:	2505      	movs	r5, #5
   1d52e:	2101      	movs	r1, #1
   1d530:	7005      	strb	r5, [r0, #0]
   1d532:	4630      	mov	r0, r6
   1d534:	f7f8 fb5e 	bl	15bf4 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1d538:	7005      	strb	r5, [r0, #0]
   1d53a:	2500      	movs	r5, #0
   1d53c:	4622      	mov	r2, r4
   1d53e:	462b      	mov	r3, r5
   1d540:	2106      	movs	r1, #6
   1d542:	4638      	mov	r0, r7
   1d544:	9500      	str	r5, [sp, #0]
   1d546:	f7ff f828 	bl	1c59a <bt_l2cap_send_cb>
}
   1d54a:	4628      	mov	r0, r5
   1d54c:	b003      	add	sp, #12
   1d54e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d550 <bt_smp_sign>:
   1d550:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1d554:	4770      	bx	lr

0001d556 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1d556:	2000      	movs	r0, #0
   1d558:	4770      	bx	lr

0001d55a <fixed_data_unref>:
}
   1d55a:	4770      	bx	lr

0001d55c <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d55c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1d55e:	6849      	ldr	r1, [r1, #4]
   1d560:	6809      	ldr	r1, [r1, #0]
   1d562:	f7f8 b903 	b.w	1576c <net_buf_alloc_len>

0001d566 <net_buf_simple_init_with_data>:
	buf->size  = size;
   1d566:	b292      	uxth	r2, r2
	buf->__buf = data;
   1d568:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1d56a:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1d56c:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1d56e:	8082      	strh	r2, [r0, #4]
}
   1d570:	4770      	bx	lr

0001d572 <net_buf_simple_push_u8>:
{
   1d572:	b510      	push	{r4, lr}
   1d574:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   1d576:	2101      	movs	r1, #1
   1d578:	f7f8 fae4 	bl	15b44 <net_buf_simple_push>
	*data = val;
   1d57c:	7004      	strb	r4, [r0, #0]
}
   1d57e:	bd10      	pop	{r4, pc}

0001d580 <net_buf_simple_pull_u8>:
{
   1d580:	b510      	push	{r4, lr}
	val = buf->data[0];
   1d582:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1d584:	2101      	movs	r1, #1
	val = buf->data[0];
   1d586:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1d588:	f7f8 fafa 	bl	15b80 <net_buf_simple_pull>
}
   1d58c:	4620      	mov	r0, r4
   1d58e:	bd10      	pop	{r4, pc}

0001d590 <net_buf_simple_pull_le16>:
{
   1d590:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d592:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d594:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d596:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d598:	f7f8 faf2 	bl	15b80 <net_buf_simple_pull>
}
   1d59c:	4620      	mov	r0, r4
   1d59e:	bd10      	pop	{r4, pc}

0001d5a0 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1d5a0:	6802      	ldr	r2, [r0, #0]
   1d5a2:	6880      	ldr	r0, [r0, #8]
}
   1d5a4:	1a10      	subs	r0, r2, r0
   1d5a6:	4770      	bx	lr

0001d5a8 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1d5a8:	8883      	ldrh	r3, [r0, #4]
   1d5aa:	88c2      	ldrh	r2, [r0, #6]
   1d5ac:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1d5ae:	6803      	ldr	r3, [r0, #0]
   1d5b0:	6880      	ldr	r0, [r0, #8]
   1d5b2:	1a18      	subs	r0, r3, r0
}
   1d5b4:	1a10      	subs	r0, r2, r0
   1d5b6:	4770      	bx	lr

0001d5b8 <net_buf_simple_add_mem>:
{
   1d5b8:	b538      	push	{r3, r4, r5, lr}
   1d5ba:	460d      	mov	r5, r1
   1d5bc:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d5be:	4611      	mov	r1, r2
   1d5c0:	f7f8 fb18 	bl	15bf4 <net_buf_simple_add>
   1d5c4:	4622      	mov	r2, r4
   1d5c6:	4629      	mov	r1, r5
}
   1d5c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d5cc:	f7fe bcb6 	b.w	1bf3c <memcpy>

0001d5d0 <net_buf_simple_add_u8>:
{
   1d5d0:	b510      	push	{r4, lr}
   1d5d2:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   1d5d4:	2101      	movs	r1, #1
   1d5d6:	f7f8 fb0d 	bl	15bf4 <net_buf_simple_add>
	*u8 = val;
   1d5da:	7004      	strb	r4, [r0, #0]
}
   1d5dc:	bd10      	pop	{r4, pc}

0001d5de <net_buf_simple_add_le16>:
{
   1d5de:	b510      	push	{r4, lr}
   1d5e0:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1d5e2:	2102      	movs	r1, #2
   1d5e4:	f7f8 fb06 	bl	15bf4 <net_buf_simple_add>
	dst[0] = val;
   1d5e8:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1d5ea:	0a24      	lsrs	r4, r4, #8
   1d5ec:	7044      	strb	r4, [r0, #1]
}
   1d5ee:	bd10      	pop	{r4, pc}

0001d5f0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d5f0:	6843      	ldr	r3, [r0, #4]
}
   1d5f2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d5f4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1d5f6:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1d5f8:	600b      	str	r3, [r1, #0]
}
   1d5fa:	4770      	bx	lr

0001d5fc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d5fc:	6843      	ldr	r3, [r0, #4]
   1d5fe:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1d600:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1d602:	4042      	eors	r2, r0
   1d604:	400a      	ands	r2, r1
   1d606:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1d608:	605a      	str	r2, [r3, #4]
}
   1d60a:	2000      	movs	r0, #0
   1d60c:	4770      	bx	lr

0001d60e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d60e:	6843      	ldr	r3, [r0, #4]
}
   1d610:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d612:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1d614:	6099      	str	r1, [r3, #8]
}
   1d616:	4770      	bx	lr

0001d618 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d618:	6843      	ldr	r3, [r0, #4]
}
   1d61a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d61c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1d61e:	60d9      	str	r1, [r3, #12]
}
   1d620:	4770      	bx	lr

0001d622 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d622:	6843      	ldr	r3, [r0, #4]
}
   1d624:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d626:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1d628:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1d62a:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1d62c:	6053      	str	r3, [r2, #4]
}
   1d62e:	4770      	bx	lr

0001d630 <nrf_gpio_cfg_sense_set>:
{
   1d630:	b513      	push	{r0, r1, r4, lr}
   1d632:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d634:	a801      	add	r0, sp, #4
{
   1d636:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d638:	f7f8 fb40 	bl	15cbc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1d63c:	9b01      	ldr	r3, [sp, #4]
   1d63e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d642:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1d646:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1d64a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   1d64e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   1d652:	b002      	add	sp, #8
   1d654:	bd10      	pop	{r4, pc}

0001d656 <cfg_level_pins>:
{
   1d656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1d65a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1d65c:	2500      	movs	r5, #0
	return port->data;
   1d65e:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   1d660:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1d664:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1d666:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1d66a:	4313      	orrs	r3, r2
   1d66c:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1d670:	b90c      	cbnz	r4, 1d676 <cfg_level_pins+0x20>
}
   1d672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1d676:	4226      	tst	r6, r4
   1d678:	d010      	beq.n	1d69c <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d67a:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d67c:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d680:	40e9      	lsrs	r1, r5
   1d682:	f001 0101 	and.w	r1, r1, #1
   1d686:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d68a:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1d68e:	b2c9      	uxtb	r1, r1
   1d690:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1d694:	f7ff ffcc 	bl	1d630 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d698:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1d69c:	3501      	adds	r5, #1
		bit <<= 1;
   1d69e:	0076      	lsls	r6, r6, #1
   1d6a0:	e7e6      	b.n	1d670 <cfg_level_pins+0x1a>

0001d6a2 <check_level_trigger_pins>:
{
   1d6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1d6a6:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1d6a8:	2700      	movs	r7, #0
	return port->data;
   1d6aa:	68c3      	ldr	r3, [r0, #12]
	return port->config;
   1d6ac:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1d6b0:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1d6b2:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1d6b6:	430a      	orrs	r2, r1
   1d6b8:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1d6bc:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1d6c0:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1d6c2:	6915      	ldr	r5, [r2, #16]
   1d6c4:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1d6c6:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   1d6ca:	b914      	cbnz	r4, 1d6d2 <check_level_trigger_pins+0x30>
}
   1d6cc:	4628      	mov	r0, r5
   1d6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1d6d2:	4234      	tst	r4, r6
   1d6d4:	d00a      	beq.n	1d6ec <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d6d6:	f898 0008 	ldrb.w	r0, [r8, #8]
   1d6da:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1d6de:	2100      	movs	r1, #0
   1d6e0:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   1d6e4:	f7ff ffa4 	bl	1d630 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d6e8:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1d6ec:	3701      	adds	r7, #1
		bit <<= 1;
   1d6ee:	0076      	lsls	r6, r6, #1
   1d6f0:	e7eb      	b.n	1d6ca <check_level_trigger_pins+0x28>

0001d6f2 <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   1d6f2:	6883      	ldr	r3, [r0, #8]
   1d6f4:	689b      	ldr	r3, [r3, #8]
   1d6f6:	4718      	bx	r3

0001d6f8 <vipm_nrf_max_id_val_get>:
}
   1d6f8:	2000      	movs	r0, #0
   1d6fa:	4770      	bx	lr

0001d6fc <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   1d6fc:	b508      	push	{r3, lr}
   1d6fe:	b139      	cbz	r1, 1d710 <vipm_nrf_1_set_enabled+0x14>
   1d700:	202a      	movs	r0, #42	; 0x2a
   1d702:	f7f0 fa89 	bl	dc18 <arch_irq_enable>
   1d706:	2001      	movs	r0, #1
   1d708:	f7f9 fe0a 	bl	17320 <nrfx_ipc_receive_event_enable>
   1d70c:	2000      	movs	r0, #0
   1d70e:	bd08      	pop	{r3, pc}
   1d710:	2001      	movs	r0, #1
   1d712:	f7f9 fe23 	bl	1735c <nrfx_ipc_receive_event_disable>
   1d716:	e7f9      	b.n	1d70c <vipm_nrf_1_set_enabled+0x10>

0001d718 <uarte_nrfx_config_get>:
{
   1d718:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1d71a:	68c2      	ldr	r2, [r0, #12]
   1d71c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1d720:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1d724:	2000      	movs	r0, #0
   1d726:	4770      	bx	lr

0001d728 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1d728:	6843      	ldr	r3, [r0, #4]
   1d72a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d72c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d730:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1d734:	4770      	bx	lr

0001d736 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1d736:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1d738:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1d73a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d73c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d740:	b148      	cbz	r0, 1d756 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d742:	2000      	movs	r0, #0
	*c = data->rx_data;
   1d744:	7d52      	ldrb	r2, [r2, #21]
   1d746:	700a      	strb	r2, [r1, #0]
   1d748:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d74c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d750:	2201      	movs	r2, #1
   1d752:	601a      	str	r2, [r3, #0]
	return 0;
   1d754:	4770      	bx	lr
		return -1;
   1d756:	f04f 30ff 	mov.w	r0, #4294967295
}
   1d75a:	4770      	bx	lr

0001d75c <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   1d75c:	6843      	ldr	r3, [r0, #4]
{
   1d75e:	4602      	mov	r2, r0
	return config->uarte_regs;
   1d760:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d762:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d766:	b148      	cbz	r0, 1d77c <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d768:	2000      	movs	r0, #0
	return dev->data;
   1d76a:	68d2      	ldr	r2, [r2, #12]
   1d76c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d770:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d774:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1d776:	7d52      	ldrb	r2, [r2, #21]
   1d778:	700a      	strb	r2, [r1, #0]
   1d77a:	6018      	str	r0, [r3, #0]
}
   1d77c:	4770      	bx	lr

0001d77e <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1d77e:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1d780:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   1d782:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1d784:	f04f 0020 	mov.w	r0, #32
   1d788:	f3ef 8311 	mrs	r3, BASEPRI
   1d78c:	f380 8811 	msr	BASEPRI, r0
   1d790:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1d794:	2000      	movs	r0, #0
   1d796:	68c9      	ldr	r1, [r1, #12]
   1d798:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1d79a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1d79e:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1d7a2:	f383 8811 	msr	BASEPRI, r3
   1d7a6:	f3bf 8f6f 	isb	sy
}
   1d7aa:	4770      	bx	lr

0001d7ac <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1d7ac:	2201      	movs	r2, #1
   1d7ae:	68c3      	ldr	r3, [r0, #12]
   1d7b0:	68db      	ldr	r3, [r3, #12]
   1d7b2:	739a      	strb	r2, [r3, #14]
}
   1d7b4:	4770      	bx	lr

0001d7b6 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1d7b6:	68c3      	ldr	r3, [r0, #12]
   1d7b8:	68db      	ldr	r3, [r3, #12]
   1d7ba:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d7bc:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1d7c0:	b962      	cbnz	r2, 1d7dc <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1d7c2:	6842      	ldr	r2, [r0, #4]
   1d7c4:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d7c6:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1d7ca:	b140      	cbz	r0, 1d7de <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1d7cc:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   1d7d0:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1d7d4:	d003      	beq.n	1d7de <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d7d6:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   1d7d8:	6119      	str	r1, [r3, #16]
   1d7da:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d7dc:	2000      	movs	r0, #0
}
   1d7de:	4770      	bx	lr

0001d7e0 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1d7e0:	6843      	ldr	r3, [r0, #4]
   1d7e2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d7e4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1d7e8:	3800      	subs	r0, #0
   1d7ea:	bf18      	it	ne
   1d7ec:	2001      	movne	r0, #1
   1d7ee:	4770      	bx	lr

0001d7f0 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1d7f0:	2210      	movs	r2, #16
	return config->uarte_regs;
   1d7f2:	6843      	ldr	r3, [r0, #4]
   1d7f4:	681b      	ldr	r3, [r3, #0]
   1d7f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d7fa:	4770      	bx	lr

0001d7fc <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1d7fc:	2210      	movs	r2, #16
	return config->uarte_regs;
   1d7fe:	6843      	ldr	r3, [r0, #4]
   1d800:	681b      	ldr	r3, [r3, #0]
   1d802:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d806:	4770      	bx	lr

0001d808 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1d808:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1d80c:	6843      	ldr	r3, [r0, #4]
   1d80e:	681b      	ldr	r3, [r3, #0]
   1d810:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d814:	4770      	bx	lr

0001d816 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1d816:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1d81a:	6843      	ldr	r3, [r0, #4]
   1d81c:	681b      	ldr	r3, [r3, #0]
   1d81e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d822:	4770      	bx	lr

0001d824 <uarte_nrfx_irq_update>:
}
   1d824:	2001      	movs	r0, #1
   1d826:	4770      	bx	lr

0001d828 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1d828:	68c3      	ldr	r3, [r0, #12]
   1d82a:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1d82c:	e9c3 1200 	strd	r1, r2, [r3]
}
   1d830:	4770      	bx	lr

0001d832 <uarte_nrfx_irq_is_pending>:
{
   1d832:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1d834:	6843      	ldr	r3, [r0, #4]
{
   1d836:	4604      	mov	r4, r0
	return config->uarte_regs;
   1d838:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1d83a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1d83e:	025b      	lsls	r3, r3, #9
   1d840:	d405      	bmi.n	1d84e <uarte_nrfx_irq_is_pending+0x1c>
   1d842:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1d846:	f010 0010 	ands.w	r0, r0, #16
   1d84a:	d106      	bne.n	1d85a <uarte_nrfx_irq_is_pending+0x28>
}
   1d84c:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1d84e:	f7ff ffb2 	bl	1d7b6 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1d852:	2800      	cmp	r0, #0
   1d854:	d0f5      	beq.n	1d842 <uarte_nrfx_irq_is_pending+0x10>
		||
   1d856:	2001      	movs	r0, #1
   1d858:	e7f8      	b.n	1d84c <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1d85a:	4620      	mov	r0, r4
   1d85c:	f7ff ffc0 	bl	1d7e0 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1d860:	3800      	subs	r0, #0
   1d862:	bf18      	it	ne
   1d864:	2001      	movne	r0, #1
   1d866:	e7f1      	b.n	1d84c <uarte_nrfx_irq_is_pending+0x1a>

0001d868 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1d868:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1d86a:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d86c:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d870:	b938      	cbnz	r0, 1d882 <is_tx_ready.isra.0+0x1a>
   1d872:	799b      	ldrb	r3, [r3, #6]
   1d874:	b933      	cbnz	r3, 1d884 <is_tx_ready.isra.0+0x1c>
   1d876:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1d87a:	3800      	subs	r0, #0
   1d87c:	bf18      	it	ne
   1d87e:	2001      	movne	r0, #1
   1d880:	4770      	bx	lr
   1d882:	2001      	movs	r0, #1
}
   1d884:	4770      	bx	lr

0001d886 <uarte_nrfx_fifo_fill>:
{
   1d886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   1d888:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1d88a:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   1d88c:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   1d88e:	68f3      	ldr	r3, [r6, #12]
   1d890:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d892:	3310      	adds	r3, #16
   1d894:	4294      	cmp	r4, r2
   1d896:	bfa8      	it	ge
   1d898:	4614      	movge	r4, r2
   1d89a:	2201      	movs	r2, #1
   1d89c:	e8d3 7fef 	ldaex	r7, [r3]
   1d8a0:	2f00      	cmp	r7, #0
   1d8a2:	d104      	bne.n	1d8ae <uarte_nrfx_fifo_fill+0x28>
   1d8a4:	e8c3 2fec 	stlex	ip, r2, [r3]
   1d8a8:	f1bc 0f00 	cmp.w	ip, #0
   1d8ac:	d1f6      	bne.n	1d89c <uarte_nrfx_fifo_fill+0x16>
   1d8ae:	bf0c      	ite	eq
   1d8b0:	4613      	moveq	r3, r2
   1d8b2:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1d8b4:	d01d      	beq.n	1d8f2 <uarte_nrfx_fifo_fill+0x6c>
		return 0;
   1d8b6:	461c      	mov	r4, r3
}
   1d8b8:	4620      	mov	r0, r4
   1d8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1d8bc:	68f2      	ldr	r2, [r6, #12]
   1d8be:	5ccf      	ldrb	r7, [r1, r3]
   1d8c0:	6892      	ldr	r2, [r2, #8]
   1d8c2:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   1d8c4:	3301      	adds	r3, #1
   1d8c6:	42a3      	cmp	r3, r4
   1d8c8:	dbf8      	blt.n	1d8bc <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   1d8ca:	f04f 0320 	mov.w	r3, #32
   1d8ce:	f3ef 8111 	mrs	r1, BASEPRI
   1d8d2:	f383 8811 	msr	BASEPRI, r3
   1d8d6:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1d8da:	6840      	ldr	r0, [r0, #4]
   1d8dc:	f7ff ffc4 	bl	1d868 <is_tx_ready.isra.0>
   1d8e0:	68f3      	ldr	r3, [r6, #12]
   1d8e2:	b940      	cbnz	r0, 1d8f6 <uarte_nrfx_fifo_fill+0x70>
		len = 0;
   1d8e4:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   1d8e6:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   1d8e8:	f381 8811 	msr	BASEPRI, r1
   1d8ec:	f3bf 8f6f 	isb	sy
	return len;
   1d8f0:	e7e2      	b.n	1d8b8 <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   1d8f2:	2300      	movs	r3, #0
   1d8f4:	e7e7      	b.n	1d8c6 <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d8f6:	689b      	ldr	r3, [r3, #8]
   1d8f8:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d8fc:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   1d8fe:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d902:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   1d906:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   1d90a:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   1d90e:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d912:	2301      	movs	r3, #1
   1d914:	60ab      	str	r3, [r5, #8]
}
   1d916:	e7e7      	b.n	1d8e8 <uarte_nrfx_fifo_fill+0x62>

0001d918 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1d918:	6843      	ldr	r3, [r0, #4]
{
   1d91a:	b410      	push	{r4}
	return config->uarte_regs;
   1d91c:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1d91e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1d922:	05d2      	lsls	r2, r2, #23
   1d924:	d518      	bpl.n	1d958 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d926:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1d92a:	b1aa      	cbz	r2, 1d958 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1d92c:	f04f 0120 	mov.w	r1, #32
   1d930:	f3ef 8211 	mrs	r2, BASEPRI
   1d934:	f381 8811 	msr	BASEPRI, r1
   1d938:	f3bf 8f6f 	isb	sy
   1d93c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d940:	b131      	cbz	r1, 1d950 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d942:	2100      	movs	r1, #0
   1d944:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1d948:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d94c:	2101      	movs	r1, #1
   1d94e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1d950:	f382 8811 	msr	BASEPRI, r2
   1d954:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   1d958:	68c2      	ldr	r2, [r0, #12]
   1d95a:	68d2      	ldr	r2, [r2, #12]
   1d95c:	b15a      	cbz	r2, 1d976 <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d95e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1d962:	b151      	cbz	r1, 1d97a <uarte_nrfx_isr_int+0x62>
		data->int_driven->fifo_fill_lock = 0;
   1d964:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   1d966:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   1d968:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1d96a:	b134      	cbz	r4, 1d97a <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
   1d96c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1d970:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1d974:	7391      	strb	r1, [r2, #14]
}
   1d976:	bc10      	pop	{r4}
   1d978:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d97a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1d97e:	b121      	cbz	r1, 1d98a <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d980:	2100      	movs	r1, #0
   1d982:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1d986:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1d98a:	6813      	ldr	r3, [r2, #0]
   1d98c:	2b00      	cmp	r3, #0
   1d98e:	d0f2      	beq.n	1d976 <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1d990:	6851      	ldr	r1, [r2, #4]
}
   1d992:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1d994:	4718      	bx	r3

0001d996 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1d996:	2101      	movs	r1, #1
   1d998:	f7f9 b9c6 	b.w	16d28 <dk_set_led>

0001d99c <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1d99c:	2100      	movs	r1, #0
   1d99e:	f7f9 b9c3 	b.w	16d28 <dk_set_led>

0001d9a2 <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1d9a2:	f7f9 ba41 	b.w	16e28 <SystemCoreClockUpdate>

0001d9a6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1d9a6:	4700      	bx	r0

0001d9a8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1d9a8:	f000 bcaf 	b.w	1e30a <z_impl_k_busy_wait>

0001d9ac <metal_device_open>:
{
   1d9ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d9ae:	460c      	mov	r4, r1
   1d9b0:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1d9b2:	4606      	mov	r6, r0
   1d9b4:	b918      	cbnz	r0, 1d9be <metal_device_open+0x12>
		return -EINVAL;
   1d9b6:	f06f 0015 	mvn.w	r0, #21
}
   1d9ba:	b002      	add	sp, #8
   1d9bc:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1d9be:	f7fe fa7f 	bl	1bec0 <strlen>
   1d9c2:	2800      	cmp	r0, #0
   1d9c4:	d0f7      	beq.n	1d9b6 <metal_device_open+0xa>
   1d9c6:	2c00      	cmp	r4, #0
   1d9c8:	d0f5      	beq.n	1d9b6 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1d9ca:	4620      	mov	r0, r4
   1d9cc:	f7fe fa78 	bl	1bec0 <strlen>
   1d9d0:	2800      	cmp	r0, #0
   1d9d2:	d0f0      	beq.n	1d9b6 <metal_device_open+0xa>
   1d9d4:	2d00      	cmp	r5, #0
   1d9d6:	d0ee      	beq.n	1d9b6 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1d9d8:	4630      	mov	r0, r6
   1d9da:	a901      	add	r1, sp, #4
   1d9dc:	f7f9 fd32 	bl	17444 <metal_bus_find>
	if (error)
   1d9e0:	2800      	cmp	r0, #0
   1d9e2:	d1ea      	bne.n	1d9ba <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1d9e4:	9801      	ldr	r0, [sp, #4]
   1d9e6:	6883      	ldr	r3, [r0, #8]
   1d9e8:	b11b      	cbz	r3, 1d9f2 <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1d9ea:	462a      	mov	r2, r5
   1d9ec:	4621      	mov	r1, r4
   1d9ee:	4798      	blx	r3
	if (error)
   1d9f0:	e7e3      	b.n	1d9ba <metal_device_open+0xe>
		return -ENODEV;
   1d9f2:	f06f 0012 	mvn.w	r0, #18
   1d9f6:	e7e0      	b.n	1d9ba <metal_device_open+0xe>

0001d9f8 <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1d9f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d9fa:	6804      	ldr	r4, [r0, #0]
   1d9fc:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1d9fe:	1c66      	adds	r6, r4, #1
   1da00:	d00f      	beq.n	1da22 <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1da02:	42a9      	cmp	r1, r5
   1da04:	d232      	bcs.n	1da6c <metal_io_block_read+0x74>
		: NULL);
   1da06:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1da08:	185e      	adds	r6, r3, r1
   1da0a:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1da0c:	bf88      	it	hi
   1da0e:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1da10:	6a05      	ldr	r5, [r0, #32]
   1da12:	b155      	cbz	r5, 1da2a <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   1da14:	9300      	str	r3, [sp, #0]
   1da16:	2305      	movs	r3, #5
   1da18:	47a8      	blx	r5
   1da1a:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1da1c:	4618      	mov	r0, r3
   1da1e:	b002      	add	sp, #8
   1da20:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1da22:	42a9      	cmp	r1, r5
   1da24:	d222      	bcs.n	1da6c <metal_io_block_read+0x74>
   1da26:	2400      	movs	r4, #0
   1da28:	e7ee      	b.n	1da08 <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   1da2a:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1da2e:	4621      	mov	r1, r4
   1da30:	4618      	mov	r0, r3
   1da32:	2800      	cmp	r0, #0
   1da34:	d0f2      	beq.n	1da1c <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   1da36:	ea42 0401 	orr.w	r4, r2, r1
   1da3a:	07a4      	lsls	r4, r4, #30
   1da3c:	d10a      	bne.n	1da54 <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1da3e:	2803      	cmp	r0, #3
   1da40:	dc0e      	bgt.n	1da60 <metal_io_block_read+0x68>
   1da42:	3901      	subs	r1, #1
   1da44:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   1da46:	4282      	cmp	r2, r0
   1da48:	d0e8      	beq.n	1da1c <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   1da4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   1da4e:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1da52:	e7f8      	b.n	1da46 <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   1da54:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   1da58:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   1da5a:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   1da5e:	e7e8      	b.n	1da32 <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1da60:	f851 4b04 	ldr.w	r4, [r1], #4
   1da64:	3804      	subs	r0, #4
   1da66:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1da6a:	e7e8      	b.n	1da3e <metal_io_block_read+0x46>
		return -ERANGE;
   1da6c:	f06f 0325 	mvn.w	r3, #37	; 0x25
   1da70:	e7d4      	b.n	1da1c <metal_io_block_read+0x24>

0001da72 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1da72:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1da74:	6804      	ldr	r4, [r0, #0]
   1da76:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1da78:	1c66      	adds	r6, r4, #1
   1da7a:	d00e      	beq.n	1da9a <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1da7c:	42a9      	cmp	r1, r5
   1da7e:	d230      	bcs.n	1dae2 <metal_io_block_write+0x70>
		: NULL);
   1da80:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1da82:	185e      	adds	r6, r3, r1
   1da84:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1da86:	bf88      	it	hi
   1da88:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1da8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1da8c:	b94d      	cbnz	r5, 1daa2 <metal_io_block_write+0x30>
   1da8e:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   1da90:	b991      	cbnz	r1, 1dab8 <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   1da92:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1da96:	4618      	mov	r0, r3
   1da98:	e006      	b.n	1daa8 <metal_io_block_write+0x36>
	if (offset >= io->size)
   1da9a:	42a9      	cmp	r1, r5
   1da9c:	d221      	bcs.n	1dae2 <metal_io_block_write+0x70>
   1da9e:	2400      	movs	r4, #0
   1daa0:	e7ef      	b.n	1da82 <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   1daa2:	9300      	str	r3, [sp, #0]
   1daa4:	2305      	movs	r3, #5
   1daa6:	47a8      	blx	r5
	}
	return retlen;
}
   1daa8:	b002      	add	sp, #8
   1daaa:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1daac:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   1dab0:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1dab2:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   1dab6:	e7eb      	b.n	1da90 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   1dab8:	ea44 0002 	orr.w	r0, r4, r2
   1dabc:	0780      	lsls	r0, r0, #30
   1dabe:	d1f5      	bne.n	1daac <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1dac0:	2903      	cmp	r1, #3
   1dac2:	dc08      	bgt.n	1dad6 <metal_io_block_write+0x64>
   1dac4:	3a01      	subs	r2, #1
   1dac6:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   1dac8:	428c      	cmp	r4, r1
   1daca:	d0e2      	beq.n	1da92 <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   1dacc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   1dad0:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   1dad4:	e7f8      	b.n	1dac8 <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1dad6:	f852 0b04 	ldr.w	r0, [r2], #4
   1dada:	3904      	subs	r1, #4
   1dadc:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1dae0:	e7ee      	b.n	1dac0 <metal_io_block_write+0x4e>
		return -ERANGE;
   1dae2:	f06f 0025 	mvn.w	r0, #37	; 0x25
   1dae6:	e7df      	b.n	1daa8 <metal_io_block_write+0x36>

0001dae8 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1dae8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1daea:	6804      	ldr	r4, [r0, #0]
   1daec:	461d      	mov	r5, r3
		: NULL);
   1daee:	1c66      	adds	r6, r4, #1
	return (io->virt != METAL_BAD_VA && offset < io->size
   1daf0:	6883      	ldr	r3, [r0, #8]
		: NULL);
   1daf2:	d00e      	beq.n	1db12 <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1daf4:	4299      	cmp	r1, r3
   1daf6:	d22d      	bcs.n	1db54 <metal_io_block_set+0x6c>
		: NULL);
   1daf8:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1dafa:	186e      	adds	r6, r5, r1
   1dafc:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1dafe:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1db00:	bf88      	it	hi
   1db02:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1db04:	b186      	cbz	r6, 1db28 <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   1db06:	2305      	movs	r3, #5
   1db08:	9500      	str	r5, [sp, #0]
   1db0a:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1db0c:	4628      	mov	r0, r5
   1db0e:	b002      	add	sp, #8
   1db10:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1db12:	4299      	cmp	r1, r3
   1db14:	d21e      	bcs.n	1db54 <metal_io_block_set+0x6c>
   1db16:	2400      	movs	r4, #0
   1db18:	e7ef      	b.n	1dafa <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   1db1a:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1db1e:	3b01      	subs	r3, #1
   1db20:	b923      	cbnz	r3, 1db2c <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   1db22:	f3bf 8f5b 	dmb	ish
   1db26:	e7f1      	b.n	1db0c <metal_io_block_set+0x24>
   1db28:	462b      	mov	r3, r5
   1db2a:	e7f9      	b.n	1db20 <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1db2c:	07a1      	lsls	r1, r4, #30
   1db2e:	d1f4      	bne.n	1db1a <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1db30:	0611      	lsls	r1, r2, #24
   1db32:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1db36:	4311      	orrs	r1, r2
   1db38:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1db3c:	2b03      	cmp	r3, #3
   1db3e:	dc05      	bgt.n	1db4c <metal_io_block_set+0x64>
   1db40:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   1db42:	429c      	cmp	r4, r3
   1db44:	d0ed      	beq.n	1db22 <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   1db46:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   1db4a:	e7fa      	b.n	1db42 <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   1db4c:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1db50:	3b04      	subs	r3, #4
   1db52:	e7f3      	b.n	1db3c <metal_io_block_set+0x54>
		return -ERANGE;
   1db54:	f06f 0525 	mvn.w	r5, #37	; 0x25
   1db58:	e7d8      	b.n	1db0c <metal_io_block_set+0x24>

0001db5a <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1db5a:	2000      	movs	r0, #0
   1db5c:	4770      	bx	lr

0001db5e <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1db5e:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   1db60:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1db62:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1db64:	b984      	cbnz	r4, 1db88 <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   1db66:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   1db68:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   1db6a:	291f      	cmp	r1, #31
   1db6c:	bf98      	it	ls
   1db6e:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1db72:	b165      	cbz	r5, 1db8e <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   1db74:	6881      	ldr	r1, [r0, #8]
   1db76:	428b      	cmp	r3, r1
   1db78:	d209      	bcs.n	1db8e <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   1db7a:	6900      	ldr	r0, [r0, #16]
   1db7c:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   1db7e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1db82:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1db84:	bc30      	pop	{r4, r5}
   1db86:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1db88:	4623      	mov	r3, r4
}
   1db8a:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   1db8c:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1db8e:	f04f 30ff 	mov.w	r0, #4294967295
   1db92:	e7f7      	b.n	1db84 <metal_io_phys+0x26>

0001db94 <virtqueue_create>:
{
   1db94:	b570      	push	{r4, r5, r6, lr}
   1db96:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   1db98:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   1db9a:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   1db9c:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   1dba0:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   1dba2:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   1dba4:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1dba6:	1c96      	adds	r6, r2, #2
   1dba8:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1dbaa:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1dbae:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   1dbb2:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1dbb4:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   1dbb8:	1c6e      	adds	r6, r5, #1
   1dbba:	4433      	add	r3, r6
   1dbbc:	426d      	negs	r5, r5
   1dbbe:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1dbc0:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1dbc2:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   1dbc4:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   1dbc8:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1dbca:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1dbcc:	b96b      	cbnz	r3, 1dbea <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   1dbce:	3a01      	subs	r2, #1
   1dbd0:	4293      	cmp	r3, r2
   1dbd2:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   1dbd6:	db0a      	blt.n	1dbee <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1dbd8:	2300      	movs	r3, #0
			vr->desc[i].next = i + 1;
   1dbda:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1dbde:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1dbe2:	7393      	strb	r3, [r2, #14]
   1dbe4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1dbe8:	73d3      	strb	r3, [r2, #15]
}
   1dbea:	2000      	movs	r0, #0
   1dbec:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   1dbee:	3301      	adds	r3, #1
   1dbf0:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   1dbf2:	e7ed      	b.n	1dbd0 <virtqueue_create+0x3c>

0001dbf4 <virtqueue_add_buffer>:
{
   1dbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1dbf8:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   1dbfa:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   1dbfe:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1dc00:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1dc02:	46ba      	mov	sl, r7
{
   1dc04:	b085      	sub	sp, #20
	needed = readable + writable;
   1dc06:	18d6      	adds	r6, r2, r3
{
   1dc08:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1dc0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1dc0c:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   1dc10:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1dc12:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   1dc14:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1dc16:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1dc18:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   1dc1c:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1dc1e:	42be      	cmp	r6, r7
   1dc20:	dc19      	bgt.n	1dc56 <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   1dc22:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1dc24:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   1dc26:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1dc28:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   1dc2a:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1dc2c:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1dc2e:	1e51      	subs	r1, r2, #1
   1dc30:	885a      	ldrh	r2, [r3, #2]
}
   1dc32:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1dc34:	400a      	ands	r2, r1
   1dc36:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1dc3a:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   1dc3e:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   1dc42:	69e2      	ldr	r2, [r4, #28]
   1dc44:	8853      	ldrh	r3, [r2, #2]
   1dc46:	3301      	adds	r3, #1
   1dc48:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1dc4a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1dc4c:	3301      	adds	r3, #1
   1dc4e:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1dc50:	b005      	add	sp, #20
   1dc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1dc56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1dc58:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1dc5a:	f858 1c04 	ldr.w	r1, [r8, #-4]
   1dc5e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1dc62:	9302      	str	r3, [sp, #8]
   1dc64:	6803      	ldr	r3, [r0, #0]
   1dc66:	9203      	str	r2, [sp, #12]
   1dc68:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1dc6a:	6883      	ldr	r3, [r0, #8]
   1dc6c:	f108 0808 	add.w	r8, r8, #8
   1dc70:	4299      	cmp	r1, r3
   1dc72:	bf28      	it	cs
   1dc74:	f04f 31ff 	movcs.w	r1, #4294967295
   1dc78:	f7ff ff71 	bl	1db5e <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1dc7c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1dc80:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   1dc82:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   1dc86:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   1dc8a:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1dc8c:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1dc8e:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   1dc92:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   1dc94:	bfb6      	itet	lt
   1dc96:	2201      	movlt	r2, #1
		dp->flags = 0;
   1dc98:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   1dc9c:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   1dc9e:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   1dca0:	bfd8      	it	le
   1dca2:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1dca4:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   1dca8:	bfdc      	itt	le
   1dcaa:	f042 0202 	orrle.w	r2, r2, #2
   1dcae:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1dcb0:	89ed      	ldrh	r5, [r5, #14]
   1dcb2:	e7b4      	b.n	1dc1e <virtqueue_add_buffer+0x2a>

0001dcb4 <virtqueue_get_buffer>:
{
   1dcb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1dcb6:	b350      	cbz	r0, 1dd0e <virtqueue_get_buffer+0x5a>
   1dcb8:	6a05      	ldr	r5, [r0, #32]
   1dcba:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1dcbc:	886c      	ldrh	r4, [r5, #2]
   1dcbe:	429c      	cmp	r4, r3
   1dcc0:	d030      	beq.n	1dd24 <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1dcc2:	1c5c      	adds	r4, r3, #1
   1dcc4:	85c4      	strh	r4, [r0, #46]	; 0x2e
   1dcc6:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1dcc8:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1dccc:	3c01      	subs	r4, #1
   1dcce:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1dcd0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1dcd4:	686b      	ldr	r3, [r5, #4]
   1dcd6:	b29e      	uxth	r6, r3
	if (len)
   1dcd8:	b109      	cbz	r1, 1dcde <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1dcda:	68ad      	ldr	r5, [r5, #8]
   1dcdc:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1dcde:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1dce2:	b29b      	uxth	r3, r3
   1dce4:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1dce8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1dcec:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1dcee:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1dcf0:	442f      	add	r7, r5
	dxp->ndescs--;
   1dcf2:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1dcf4:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1dcf6:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1dcf8:	898d      	ldrh	r5, [r1, #12]
   1dcfa:	076f      	lsls	r7, r5, #29
   1dcfc:	d50e      	bpl.n	1dd1c <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1dcfe:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1dd00:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1dd02:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1dd04:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1dd06:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1dd08:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1dd0a:	b102      	cbz	r2, 1dd0e <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1dd0c:	8014      	strh	r4, [r2, #0]
}
   1dd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1dd10:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1dd12:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1dd14:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1dd16:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1dd1a:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1dd1c:	898d      	ldrh	r5, [r1, #12]
   1dd1e:	07ed      	lsls	r5, r5, #31
   1dd20:	d4f6      	bmi.n	1dd10 <virtqueue_get_buffer+0x5c>
   1dd22:	e7ec      	b.n	1dcfe <virtqueue_get_buffer+0x4a>
		return NULL;
   1dd24:	2000      	movs	r0, #0
   1dd26:	e7f2      	b.n	1dd0e <virtqueue_get_buffer+0x5a>

0001dd28 <virtqueue_get_available_buffer>:
{
   1dd28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1dd2c:	f3bf 8f5b 	dmb	ish
{
   1dd30:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1dd32:	69c2      	ldr	r2, [r0, #28]
{
   1dd34:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1dd36:	8853      	ldrh	r3, [r2, #2]
   1dd38:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   1dd3a:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1dd3c:	428b      	cmp	r3, r1
   1dd3e:	d045      	beq.n	1ddcc <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1dd40:	1c4b      	adds	r3, r1, #1
   1dd42:	8603      	strh	r3, [r0, #48]	; 0x30
   1dd44:	8943      	ldrh	r3, [r0, #10]
   1dd46:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
   1dd4a:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1dd4c:	400b      	ands	r3, r1
   1dd4e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1dd52:	889a      	ldrh	r2, [r3, #4]
   1dd54:	b293      	uxth	r3, r2
   1dd56:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1dd58:	6982      	ldr	r2, [r0, #24]
   1dd5a:	011b      	lsls	r3, r3, #4
   1dd5c:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   1dd60:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1dd64:	bb5b      	cbnz	r3, 1ddbe <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1dd66:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1dd6a:	1c62      	adds	r2, r4, #1
   1dd6c:	bf09      	itett	eq
   1dd6e:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   1dd72:	ea09 0404 	andne.w	r4, r9, r4
   1dd76:	681c      	ldreq	r4, [r3, #0]
   1dd78:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   1dd7c:	4621      	mov	r1, r4
   1dd7e:	4640      	mov	r0, r8
   1dd80:	f7ff feed 	bl	1db5e <metal_io_phys>
   1dd84:	4581      	cmp	r9, r0
   1dd86:	d009      	beq.n	1dd9c <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   1dd88:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1dd8c:	3301      	adds	r3, #1
   1dd8e:	441c      	add	r4, r3
		} while (offset < io->size);
   1dd90:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1dd94:	429c      	cmp	r4, r3
   1dd96:	d3f1      	bcc.n	1dd7c <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   1dd98:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1dd9c:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   1dda0:	1c43      	adds	r3, r0, #1
   1dda2:	d011      	beq.n	1ddc8 <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1dda4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1dda8:	42a3      	cmp	r3, r4
   1ddaa:	d90d      	bls.n	1ddc8 <virtqueue_get_available_buffer+0xa0>
		: NULL);
   1ddac:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   1ddae:	8832      	ldrh	r2, [r6, #0]
   1ddb0:	69ab      	ldr	r3, [r5, #24]
   1ddb2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1ddb6:	689b      	ldr	r3, [r3, #8]
   1ddb8:	603b      	str	r3, [r7, #0]
}
   1ddba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1ddbe:	4649      	mov	r1, r9
   1ddc0:	4640      	mov	r0, r8
   1ddc2:	4798      	blx	r3
   1ddc4:	4604      	mov	r4, r0
   1ddc6:	e7e9      	b.n	1dd9c <virtqueue_get_available_buffer+0x74>
		: NULL);
   1ddc8:	2000      	movs	r0, #0
   1ddca:	e7f0      	b.n	1ddae <virtqueue_get_available_buffer+0x86>
		return NULL;
   1ddcc:	2000      	movs	r0, #0
   1ddce:	e7f4      	b.n	1ddba <virtqueue_get_available_buffer+0x92>

0001ddd0 <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1ddd0:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1ddd2:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1ddd4:	6912      	ldr	r2, [r2, #16]
   1ddd6:	0092      	lsls	r2, r2, #2
   1ddd8:	d515      	bpl.n	1de06 <virtqueue_disable_cb+0x36>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1ddda:	b94b      	cbnz	r3, 1ddf0 <virtqueue_disable_cb+0x20>
			vring_used_event(&vq->vq_ring) =
   1dddc:	69c2      	ldr	r2, [r0, #28]
   1ddde:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1dde0:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1dde2:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   1dde4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1dde8:	1a1b      	subs	r3, r3, r0
   1ddea:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   1ddec:	8093      	strh	r3, [r2, #4]
   1ddee:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1ddf0:	2b01      	cmp	r3, #1
   1ddf2:	d10e      	bne.n	1de12 <virtqueue_disable_cb+0x42>
			vring_avail_event(&vq->vq_ring) =
   1ddf4:	6a02      	ldr	r2, [r0, #32]
   1ddf6:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1ddf8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1ddfa:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   1ddfc:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1de00:	1a1b      	subs	r3, r3, r0
   1de02:	3b01      	subs	r3, #1
   1de04:	e7f2      	b.n	1ddec <virtqueue_disable_cb+0x1c>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1de06:	b92b      	cbnz	r3, 1de14 <virtqueue_disable_cb+0x44>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1de08:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1de0a:	8813      	ldrh	r3, [r2, #0]
   1de0c:	f043 0301 	orr.w	r3, r3, #1
   1de10:	8013      	strh	r3, [r2, #0]
}
   1de12:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1de14:	2b01      	cmp	r3, #1
   1de16:	d1fc      	bne.n	1de12 <virtqueue_disable_cb+0x42>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1de18:	6a02      	ldr	r2, [r0, #32]
   1de1a:	e7f6      	b.n	1de0a <virtqueue_disable_cb+0x3a>

0001de1c <virtqueue_kick>:
{
   1de1c:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1de1e:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1de22:	6803      	ldr	r3, [r0, #0]
{
   1de24:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1de26:	691a      	ldr	r2, [r3, #16]
   1de28:	699b      	ldr	r3, [r3, #24]
   1de2a:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1de2e:	d019      	beq.n	1de64 <virtqueue_kick+0x48>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1de30:	b97b      	cbnz	r3, 1de52 <virtqueue_kick+0x36>
			new_idx = vq->vq_ring.avail->idx;
   1de32:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   1de34:	6a02      	ldr	r2, [r0, #32]
   1de36:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.avail->idx;
   1de38:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1de3a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   1de3e:	8892      	ldrh	r2, [r2, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1de40:	1a9b      	subs	r3, r3, r2
   1de42:	3b01      	subs	r3, #1
	if (vq_ring_must_notify(vq))
   1de44:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1de46:	b29b      	uxth	r3, r3
   1de48:	429a      	cmp	r2, r3
   1de4a:	d813      	bhi.n	1de74 <virtqueue_kick+0x58>
	vq->vq_queued_cnt = 0;
   1de4c:	2300      	movs	r3, #0
   1de4e:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1de50:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1de52:	2b01      	cmp	r3, #1
   1de54:	d1fa      	bne.n	1de4c <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1de56:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1de58:	69c2      	ldr	r2, [r0, #28]
   1de5a:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.used->idx;
   1de5c:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1de5e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1de62:	e7ec      	b.n	1de3e <virtqueue_kick+0x22>
						prev_idx) != 0;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1de64:	b963      	cbnz	r3, 1de80 <virtqueue_kick+0x64>
			return (vq->vq_ring.used->flags &
   1de66:	6a03      	ldr	r3, [r0, #32]
				VRING_USED_F_NO_NOTIFY) == 0;
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
			return (vq->vq_ring.avail->flags &
   1de68:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1de6a:	43db      	mvns	r3, r3
   1de6c:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1de70:	2b00      	cmp	r3, #0
   1de72:	d0eb      	beq.n	1de4c <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1de74:	6923      	ldr	r3, [r4, #16]
   1de76:	2b00      	cmp	r3, #0
   1de78:	d0e8      	beq.n	1de4c <virtqueue_kick+0x30>
		vq->notify(vq);
   1de7a:	4620      	mov	r0, r4
   1de7c:	4798      	blx	r3
   1de7e:	e7e5      	b.n	1de4c <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1de80:	2b01      	cmp	r3, #1
   1de82:	d1e3      	bne.n	1de4c <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1de84:	69c3      	ldr	r3, [r0, #28]
   1de86:	e7ef      	b.n	1de68 <virtqueue_kick+0x4c>

0001de88 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1de88:	69c2      	ldr	r2, [r0, #28]
   1de8a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   1de8c:	8853      	ldrh	r3, [r2, #2]
   1de8e:	428b      	cmp	r3, r1
   1de90:	d00a      	beq.n	1dea8 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1de92:	8943      	ldrh	r3, [r0, #10]
   1de94:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1de96:	400b      	ands	r3, r1
   1de98:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1de9c:	889a      	ldrh	r2, [r3, #4]
   1de9e:	6983      	ldr	r3, [r0, #24]
   1dea0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1dea4:	6898      	ldr	r0, [r3, #8]
	return len;
   1dea6:	4770      	bx	lr
		return 0;
   1dea8:	2000      	movs	r0, #0
}
   1deaa:	4770      	bx	lr

0001deac <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1deac:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1deb0:	68c3      	ldr	r3, [r0, #12]
   1deb2:	b103      	cbz	r3, 1deb6 <virtqueue_notification+0xa>
		vq->callback(vq);
   1deb4:	4718      	bx	r3
}
   1deb6:	4770      	bx	lr

0001deb8 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1deb8:	f04f 32ff 	mov.w	r2, #4294967295
   1debc:	f04f 33ff 	mov.w	r3, #4294967295
   1dec0:	f7fb bc5c 	b.w	1977c <z_impl_k_sem_take>

0001dec4 <rpmsg_unregister_endpoint>:
{
   1dec4:	b570      	push	{r4, r5, r6, lr}
   1dec6:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1dec8:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1deca:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1dece:	4630      	mov	r0, r6
   1ded0:	f7ff fff2 	bl	1deb8 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1ded4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ded6:	1c5a      	adds	r2, r3, #1
   1ded8:	d010      	beq.n	1defc <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1deda:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1dede:	2b7f      	cmp	r3, #127	; 0x7f
   1dee0:	d80c      	bhi.n	1defc <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1dee2:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1dee4:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1dee6:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1dee8:	f003 031f 	and.w	r3, r3, #31
   1deec:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1def0:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   1def4:	ea22 0203 	bic.w	r2, r2, r3
   1def8:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   1defc:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1df00:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1df04:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1df06:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1df08:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1df0c:	2300      	movs	r3, #0
   1df0e:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1df10:	4630      	mov	r0, r6
}
   1df12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1df16:	f7fb bbf5 	b.w	19704 <z_impl_k_sem_give>

0001df1a <rpmsg_send_ns_message>:
{
   1df1a:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   1df1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1df1e:	b08c      	sub	sp, #48	; 0x30
   1df20:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1df22:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1df24:	2220      	movs	r2, #32
   1df26:	4601      	mov	r1, r0
   1df28:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1df2a:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1df2c:	f7fd ffb6 	bl	1be9c <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1df30:	2328      	movs	r3, #40	; 0x28
   1df32:	2201      	movs	r2, #1
   1df34:	4620      	mov	r0, r4
   1df36:	e9cd 3200 	strd	r3, r2, [sp]
   1df3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1df3c:	2235      	movs	r2, #53	; 0x35
   1df3e:	ab02      	add	r3, sp, #8
   1df40:	f7f9 fbac 	bl	1769c <rpmsg_send_offchannel_raw>
}
   1df44:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1df48:	b00c      	add	sp, #48	; 0x30
   1df4a:	bd10      	pop	{r4, pc}

0001df4c <rpmsg_get_endpoint>:
{
   1df4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1df50:	4680      	mov	r8, r0
   1df52:	4689      	mov	r9, r1
   1df54:	4615      	mov	r5, r2
   1df56:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1df58:	6807      	ldr	r7, [r0, #0]
   1df5a:	45b8      	cmp	r8, r7
   1df5c:	d101      	bne.n	1df62 <rpmsg_get_endpoint+0x16>
	return NULL;
   1df5e:	2400      	movs	r4, #0
   1df60:	e021      	b.n	1dfa6 <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1df62:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1df64:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1df68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1df6a:	d006      	beq.n	1df7a <rpmsg_get_endpoint+0x2e>
   1df6c:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1df6e:	d01a      	beq.n	1dfa6 <rpmsg_get_endpoint+0x5a>
		if (name)
   1df70:	f1b9 0f00 	cmp.w	r9, #0
   1df74:	d106      	bne.n	1df84 <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   1df76:	683f      	ldr	r7, [r7, #0]
   1df78:	e7ef      	b.n	1df5a <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1df7a:	3301      	adds	r3, #1
   1df7c:	d1f8      	bne.n	1df70 <rpmsg_get_endpoint+0x24>
   1df7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1df80:	42b3      	cmp	r3, r6
   1df82:	e7f4      	b.n	1df6e <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   1df84:	2220      	movs	r2, #32
   1df86:	4649      	mov	r1, r9
   1df88:	4620      	mov	r0, r4
   1df8a:	f7fd ffb5 	bl	1bef8 <strncmp>
		if (!name || !name_match)
   1df8e:	2800      	cmp	r0, #0
   1df90:	d1f1      	bne.n	1df76 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1df92:	1c72      	adds	r2, r6, #1
   1df94:	d002      	beq.n	1df9c <rpmsg_get_endpoint+0x50>
   1df96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1df98:	42b3      	cmp	r3, r6
   1df9a:	d004      	beq.n	1dfa6 <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1df9c:	1c6b      	adds	r3, r5, #1
   1df9e:	d1ea      	bne.n	1df76 <rpmsg_get_endpoint+0x2a>
   1dfa0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1dfa2:	3301      	adds	r3, #1
   1dfa4:	d1e7      	bne.n	1df76 <rpmsg_get_endpoint+0x2a>
}
   1dfa6:	4620      	mov	r0, r4
   1dfa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001dfac <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   1dfac:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1dfae:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   1dfb2:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   1dfb6:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   1dfb8:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   1dfba:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   1dfbc:	6013      	str	r3, [r2, #0]
}
   1dfbe:	4770      	bx	lr

0001dfc0 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1dfc0:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   1dfc2:	4604      	mov	r4, r0
   1dfc4:	b190      	cbz	r0, 1dfec <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   1dfc6:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   1dfc8:	b183      	cbz	r3, 1dfec <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   1dfca:	7802      	ldrb	r2, [r0, #0]
   1dfcc:	b14a      	cbz	r2, 1dfe2 <rpmsg_destroy_ept+0x22>
   1dfce:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1dfd2:	b133      	cbz	r3, 1dfe2 <rpmsg_destroy_ept+0x22>
   1dfd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1dfd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1dfda:	d302      	bcc.n	1dfe2 <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1dfdc:	2101      	movs	r1, #1
   1dfde:	f7ff ff9c 	bl	1df1a <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1dfe2:	4620      	mov	r0, r4
}
   1dfe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1dfe8:	f7ff bf6c 	b.w	1dec4 <rpmsg_unregister_endpoint>
}
   1dfec:	bd10      	pop	{r4, pc}

0001dfee <rpmsg_virtio_tx_callback>:
}
   1dfee:	4770      	bx	lr

0001dff0 <k_sem_give>:
   1dff0:	f7fb bb88 	b.w	19704 <z_impl_k_sem_give>

0001dff4 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1dff4:	f04f 32ff 	mov.w	r2, #4294967295
   1dff8:	f04f 33ff 	mov.w	r3, #4294967295
   1dffc:	f7fb bbbe 	b.w	1977c <z_impl_k_sem_take>

0001e000 <rpmsg_virtio_ns_callback>:
{
   1e000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   1e004:	2a28      	cmp	r2, #40	; 0x28
{
   1e006:	4680      	mov	r8, r0
   1e008:	460e      	mov	r6, r1
   1e00a:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   1e00c:	d12b      	bne.n	1e066 <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   1e00e:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   1e010:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   1e012:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   1e016:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1e018:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1e01a:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1e01c:	1a71      	subs	r1, r6, r1
   1e01e:	42a1      	cmp	r1, r4
   1e020:	bf28      	it	cs
   1e022:	f04f 31ff 	movcs.w	r1, #4294967295
   1e026:	f7ff fce7 	bl	1d9f8 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1e02a:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   1e02e:	f8d6 9020 	ldr.w	r9, [r6, #32]
   1e032:	4638      	mov	r0, r7
   1e034:	f7ff ffde 	bl	1dff4 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1e038:	464b      	mov	r3, r9
   1e03a:	f04f 32ff 	mov.w	r2, #4294967295
   1e03e:	4669      	mov	r1, sp
   1e040:	4628      	mov	r0, r5
   1e042:	f7ff ff83 	bl	1df4c <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1e046:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1e048:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1e04a:	07db      	lsls	r3, r3, #31
   1e04c:	d50f      	bpl.n	1e06e <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   1e04e:	b110      	cbz	r0, 1e056 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1e050:	f04f 33ff 	mov.w	r3, #4294967295
   1e054:	6283      	str	r3, [r0, #40]	; 0x28
   1e056:	4638      	mov	r0, r7
   1e058:	f7ff ffca 	bl	1dff0 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1e05c:	b11c      	cbz	r4, 1e066 <rpmsg_virtio_ns_callback+0x66>
   1e05e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e060:	b10b      	cbz	r3, 1e066 <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   1e062:	4640      	mov	r0, r8
   1e064:	4798      	blx	r3
}
   1e066:	2000      	movs	r0, #0
   1e068:	b009      	add	sp, #36	; 0x24
   1e06a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   1e06e:	b950      	cbnz	r0, 1e086 <rpmsg_virtio_ns_callback+0x86>
   1e070:	4638      	mov	r0, r7
   1e072:	f7ff ffbd 	bl	1dff0 <k_sem_give>
			if (rdev->ns_bind_cb)
   1e076:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1e078:	2b00      	cmp	r3, #0
   1e07a:	d0f4      	beq.n	1e066 <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   1e07c:	464a      	mov	r2, r9
   1e07e:	4669      	mov	r1, sp
   1e080:	4628      	mov	r0, r5
   1e082:	4798      	blx	r3
   1e084:	e7ef      	b.n	1e066 <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   1e086:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   1e08a:	4638      	mov	r0, r7
   1e08c:	f7ff ffb0 	bl	1dff0 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1e090:	e7e9      	b.n	1e066 <rpmsg_virtio_ns_callback+0x66>

0001e092 <rpmsg_virtio_get_rx_buffer>:
{
   1e092:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1e094:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   1e096:	4613      	mov	r3, r2
   1e098:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   1e09a:	b925      	cbnz	r5, 1e0a6 <rpmsg_virtio_get_rx_buffer+0x14>
}
   1e09c:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1e09e:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1e0a2:	f7ff be07 	b.w	1dcb4 <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1e0a6:	2d01      	cmp	r5, #1
   1e0a8:	d106      	bne.n	1e0b8 <rpmsg_virtio_get_rx_buffer+0x26>
}
   1e0aa:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1e0ac:	460a      	mov	r2, r1
   1e0ae:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1e0b2:	4619      	mov	r1, r3
   1e0b4:	f7ff be38 	b.w	1dd28 <virtqueue_get_available_buffer>
}
   1e0b8:	2000      	movs	r0, #0
   1e0ba:	bc30      	pop	{r4, r5}
   1e0bc:	4770      	bx	lr

0001e0be <rpmsg_virtio_rx_callback>:
{
   1e0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1e0c2:	6803      	ldr	r3, [r0, #0]
{
   1e0c4:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1e0c6:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   1e0c8:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1e0cc:	4638      	mov	r0, r7
   1e0ce:	f7ff ff91 	bl	1dff4 <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1e0d2:	4630      	mov	r0, r6
   1e0d4:	f10d 020a 	add.w	r2, sp, #10
   1e0d8:	a903      	add	r1, sp, #12
   1e0da:	f7ff ffda 	bl	1e092 <rpmsg_virtio_get_rx_buffer>
   1e0de:	4604      	mov	r4, r0
   1e0e0:	4638      	mov	r0, r7
   1e0e2:	f7ff ff85 	bl	1dff0 <k_sem_give>
	while (rp_hdr) {
   1e0e6:	b914      	cbnz	r4, 1e0ee <rpmsg_virtio_rx_callback+0x30>
}
   1e0e8:	b006      	add	sp, #24
   1e0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e0ee:	4638      	mov	r0, r7
   1e0f0:	f7ff ff80 	bl	1dff4 <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1e0f4:	f04f 33ff 	mov.w	r3, #4294967295
   1e0f8:	2100      	movs	r1, #0
   1e0fa:	4630      	mov	r0, r6
   1e0fc:	6862      	ldr	r2, [r4, #4]
   1e0fe:	f7ff ff25 	bl	1df4c <rpmsg_get_endpoint>
   1e102:	4605      	mov	r5, r0
   1e104:	4638      	mov	r0, r7
   1e106:	f7ff ff73 	bl	1dff0 <k_sem_give>
		if (ept) {
   1e10a:	b185      	cbz	r5, 1e12e <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1e10c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
				ept->dest_addr = rp_hdr->src;
   1e10e:	6823      	ldr	r3, [r4, #0]
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1e110:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1e112:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   1e114:	bf08      	it	eq
   1e116:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1e118:	89a2      	ldrh	r2, [r4, #12]
   1e11a:	9100      	str	r1, [sp, #0]
   1e11c:	4628      	mov	r0, r5
   1e11e:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1e122:	f104 0110 	add.w	r1, r4, #16
   1e126:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   1e128:	2800      	cmp	r0, #0
   1e12a:	da00      	bge.n	1e12e <rpmsg_virtio_rx_callback+0x70>
   1e12c:	e7fe      	b.n	1e12c <rpmsg_virtio_rx_callback+0x6e>
   1e12e:	4638      	mov	r0, r7
   1e130:	f7ff ff60 	bl	1dff4 <__metal_mutex_acquire>
   1e134:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1e136:	9b03      	ldr	r3, [sp, #12]
   1e138:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   1e13a:	b9b2      	cbnz	r2, 1e16a <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1e13c:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1e13e:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1e142:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1e146:	2301      	movs	r3, #1
   1e148:	a904      	add	r1, sp, #16
   1e14a:	f7ff fd53 	bl	1dbf4 <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1e14e:	4630      	mov	r0, r6
   1e150:	f10d 020a 	add.w	r2, sp, #10
   1e154:	a903      	add	r1, sp, #12
   1e156:	f7ff ff9c 	bl	1e092 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1e15a:	4604      	mov	r4, r0
   1e15c:	2800      	cmp	r0, #0
   1e15e:	d1bf      	bne.n	1e0e0 <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   1e160:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1e164:	f7ff fe5a 	bl	1de1c <virtqueue_kick>
   1e168:	e7ba      	b.n	1e0e0 <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   1e16a:	2a01      	cmp	r2, #1
   1e16c:	d1ef      	bne.n	1e14e <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1e16e:	461a      	mov	r2, r3
   1e170:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1e174:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1e178:	f7f9 fa74 	bl	17664 <virtqueue_add_consumed_buffer>
   1e17c:	e7e7      	b.n	1e14e <rpmsg_virtio_rx_callback+0x90>

0001e17e <_rpmsg_virtio_get_buffer_size>:
{
   1e17e:	b508      	push	{r3, lr}
   1e180:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1e182:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1e184:	b14b      	cbz	r3, 1e19a <_rpmsg_virtio_get_buffer_size+0x1c>
	if (role == RPMSG_REMOTE) {
   1e186:	2b01      	cmp	r3, #1
   1e188:	d10a      	bne.n	1e1a0 <_rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1e18a:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   1e18e:	f7ff fe7b 	bl	1de88 <virtqueue_get_desc_size>
   1e192:	3810      	subs	r0, #16
   1e194:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1e198:	bd08      	pop	{r3, pc}
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
   1e19a:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
   1e19e:	e7fb      	b.n	1e198 <_rpmsg_virtio_get_buffer_size+0x1a>
	int length = 0;
   1e1a0:	2000      	movs	r0, #0
	return length;
   1e1a2:	e7f9      	b.n	1e198 <_rpmsg_virtio_get_buffer_size+0x1a>

0001e1a4 <rpmsg_virtio_shm_pool_get_buffer>:
{
   1e1a4:	4603      	mov	r3, r0
	if (shpool->avail < size)
   1e1a6:	6842      	ldr	r2, [r0, #4]
{
   1e1a8:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   1e1aa:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1e1ac:	bf29      	itett	cs
   1e1ae:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   1e1b0:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1e1b2:	1a84      	subcs	r4, r0, r2
   1e1b4:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   1e1b6:	bf22      	ittt	cs
   1e1b8:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1e1ba:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   1e1bc:	605a      	strcs	r2, [r3, #4]
}
   1e1be:	bd10      	pop	{r4, pc}

0001e1c0 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   1e1c0:	b110      	cbz	r0, 1e1c8 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   1e1c2:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1e1c6:	6001      	str	r1, [r0, #0]
}
   1e1c8:	4770      	bx	lr

0001e1ca <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   1e1ca:	f7fd b826 	b.w	1b21a <z_clock_idle_exit>

0001e1ce <k_heap_init>:
{
   1e1ce:	b410      	push	{r4}
   1e1d0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1e1d4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1e1d8:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1e1da:	f7ec bf03 	b.w	afe4 <sys_heap_init>

0001e1de <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1e1de:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1e1e2:	428b      	cmp	r3, r1
   1e1e4:	d001      	beq.n	1e1ea <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1e1e6:	f7fb b85b 	b.w	192a0 <z_set_prio>
}
   1e1ea:	2000      	movs	r0, #0
   1e1ec:	4770      	bx	lr

0001e1ee <z_impl_k_mutex_init>:
{
   1e1ee:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1e1f0:	2000      	movs	r0, #0
   1e1f2:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1e1f6:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1e1fa:	4770      	bx	lr

0001e1fc <z_queue_node_peek>:
{
   1e1fc:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1e1fe:	4604      	mov	r4, r0
   1e200:	b130      	cbz	r0, 1e210 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e202:	6802      	ldr	r2, [r0, #0]
   1e204:	0793      	lsls	r3, r2, #30
   1e206:	d003      	beq.n	1e210 <z_queue_node_peek+0x14>
		ret = anode->data;
   1e208:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1e20a:	b109      	cbz	r1, 1e210 <z_queue_node_peek+0x14>
			k_free(anode);
   1e20c:	f000 f982 	bl	1e514 <k_free>
}
   1e210:	4620      	mov	r0, r4
   1e212:	bd10      	pop	{r4, pc}

0001e214 <z_impl_k_queue_init>:
	list->head = NULL;
   1e214:	2300      	movs	r3, #0
	list->tail = NULL;
   1e216:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1e21a:	6083      	str	r3, [r0, #8]
   1e21c:	f100 030c 	add.w	r3, r0, #12
   1e220:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1e224:	f100 0314 	add.w	r3, r0, #20
   1e228:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   1e22c:	4770      	bx	lr

0001e22e <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1e22e:	2301      	movs	r3, #1
{
   1e230:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1e232:	9300      	str	r3, [sp, #0]
   1e234:	2300      	movs	r3, #0
{
   1e236:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1e238:	4619      	mov	r1, r3
   1e23a:	f7fa f919 	bl	18470 <queue_insert>
}
   1e23e:	b003      	add	sp, #12
   1e240:	f85d fb04 	ldr.w	pc, [sp], #4

0001e244 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1e244:	2300      	movs	r3, #0
{
   1e246:	b507      	push	{r0, r1, r2, lr}
   1e248:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1e24a:	9300      	str	r3, [sp, #0]
   1e24c:	4619      	mov	r1, r3
   1e24e:	f7fa f90f 	bl	18470 <queue_insert>
}
   1e252:	b003      	add	sp, #12
   1e254:	f85d fb04 	ldr.w	pc, [sp], #4

0001e258 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1e258:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1e25c:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1e260:	4298      	cmp	r0, r3
   1e262:	bfac      	ite	ge
   1e264:	2000      	movge	r0, #0
   1e266:	2001      	movlt	r0, #1
   1e268:	4770      	bx	lr

0001e26a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e26a:	4603      	mov	r3, r0
   1e26c:	b920      	cbnz	r0, 1e278 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e26e:	f3ef 8205 	mrs	r2, IPSR
   1e272:	b90a      	cbnz	r2, 1e278 <z_reschedule_irqlock+0xe>
   1e274:	f7ef bc76 	b.w	db64 <arch_swap>
   1e278:	f383 8811 	msr	BASEPRI, r3
   1e27c:	f3bf 8f6f 	isb	sy
}
   1e280:	4770      	bx	lr

0001e282 <z_reschedule_unlocked>:
	__asm__ volatile(
   1e282:	f04f 0320 	mov.w	r3, #32
   1e286:	f3ef 8011 	mrs	r0, BASEPRI
   1e28a:	f383 8811 	msr	BASEPRI, r3
   1e28e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1e292:	f7ff bfea 	b.w	1e26a <z_reschedule_irqlock>

0001e296 <unpend_thread_no_timeout>:
{
   1e296:	b510      	push	{r4, lr}
   1e298:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1e29a:	f7fa fa23 	bl	186e4 <pended_on>
   1e29e:	4621      	mov	r1, r4
   1e2a0:	f7fa fb28 	bl	188f4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e2a4:	7b63      	ldrb	r3, [r4, #13]
   1e2a6:	f023 0302 	bic.w	r3, r3, #2
   1e2aa:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1e2ac:	2300      	movs	r3, #0
   1e2ae:	60a3      	str	r3, [r4, #8]
}
   1e2b0:	bd10      	pop	{r4, pc}

0001e2b2 <z_priq_dumb_best>:
{
   1e2b2:	4603      	mov	r3, r0
	return list->head == list;
   1e2b4:	6800      	ldr	r0, [r0, #0]
}
   1e2b6:	4283      	cmp	r3, r0
   1e2b8:	bf08      	it	eq
   1e2ba:	2000      	moveq	r0, #0
   1e2bc:	4770      	bx	lr

0001e2be <z_unpend_all>:
{
   1e2be:	b538      	push	{r3, r4, r5, lr}
   1e2c0:	4605      	mov	r5, r0
	int need_sched = 0;
   1e2c2:	2000      	movs	r0, #0
   1e2c4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e2c6:	42a5      	cmp	r5, r4
   1e2c8:	d000      	beq.n	1e2cc <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1e2ca:	b904      	cbnz	r4, 1e2ce <z_unpend_all+0x10>
}
   1e2cc:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1e2ce:	4620      	mov	r0, r4
   1e2d0:	f7fa fb3c 	bl	1894c <z_unpend_thread>
		z_ready_thread(thread);
   1e2d4:	4620      	mov	r0, r4
   1e2d6:	f7fa fc53 	bl	18b80 <z_ready_thread>
		need_sched = 1;
   1e2da:	2001      	movs	r0, #1
   1e2dc:	e7f2      	b.n	1e2c4 <z_unpend_all+0x6>

0001e2de <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1e2de:	b15a      	cbz	r2, 1e2f8 <z_impl_k_sem_init+0x1a>
   1e2e0:	428a      	cmp	r2, r1
   1e2e2:	d309      	bcc.n	1e2f8 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1e2e4:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1e2e8:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1e2ec:	e9c0 0000 	strd	r0, r0, [r0]
   1e2f0:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1e2f4:	2000      	movs	r0, #0
   1e2f6:	4770      	bx	lr
		return -EINVAL;
   1e2f8:	f06f 0015 	mvn.w	r0, #21
}
   1e2fc:	4770      	bx	lr

0001e2fe <k_is_in_isr>:
   1e2fe:	f3ef 8005 	mrs	r0, IPSR
}
   1e302:	3800      	subs	r0, #0
   1e304:	bf18      	it	ne
   1e306:	2001      	movne	r0, #1
   1e308:	4770      	bx	lr

0001e30a <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1e30a:	b108      	cbz	r0, 1e310 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1e30c:	f7ed bab4 	b.w	b878 <arch_busy_wait>
}
   1e310:	4770      	bx	lr

0001e312 <z_impl_k_thread_name_set>:
}
   1e312:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1e316:	4770      	bx	lr

0001e318 <k_thread_name_get>:
}
   1e318:	2000      	movs	r0, #0
   1e31a:	4770      	bx	lr

0001e31c <k_work_submit_to_queue>:
{
   1e31c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e31e:	f101 0308 	add.w	r3, r1, #8
   1e322:	e8d3 2fef 	ldaex	r2, [r3]
   1e326:	f042 0c01 	orr.w	ip, r2, #1
   1e32a:	e8c3 cfee 	stlex	lr, ip, [r3]
   1e32e:	f1be 0f00 	cmp.w	lr, #0
   1e332:	d1f6      	bne.n	1e322 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1e334:	07d3      	lsls	r3, r2, #31
   1e336:	d403      	bmi.n	1e340 <k_work_submit_to_queue+0x24>
}
   1e338:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1e33c:	f7ff bf77 	b.w	1e22e <k_queue_append>
}
   1e340:	f85d fb04 	ldr.w	pc, [sp], #4

0001e344 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1e344:	f1a0 0110 	sub.w	r1, r0, #16
   1e348:	6980      	ldr	r0, [r0, #24]
   1e34a:	f7ff bfe7 	b.w	1e31c <k_work_submit_to_queue>

0001e34e <work_cancel>:
{
   1e34e:	b570      	push	{r4, r5, r6, lr}
   1e350:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1e352:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e356:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   1e35a:	07db      	lsls	r3, r3, #31
   1e35c:	d52f      	bpl.n	1e3be <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1e35e:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1e360:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   1e362:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1e364:	b913      	cbnz	r3, 1e36c <work_cancel+0x1e>
			return -EINVAL;
   1e366:	f06f 0015 	mvn.w	r0, #21
}
   1e36a:	bd70      	pop	{r4, r5, r6, pc}
   1e36c:	429c      	cmp	r4, r3
   1e36e:	d121      	bne.n	1e3b4 <work_cancel+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e370:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1e372:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e374:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   1e378:	b991      	cbnz	r1, 1e3a0 <work_cancel+0x52>
   1e37a:	42b4      	cmp	r4, r6
	list->head = node;
   1e37c:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1e37e:	d100      	bne.n	1e382 <work_cancel+0x34>
	list->tail = node;
   1e380:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e382:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e384:	f003 0303 	and.w	r3, r3, #3
   1e388:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1e38a:	2000      	movs	r0, #0
   1e38c:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e38e:	e8d5 3fef 	ldaex	r3, [r5]
   1e392:	f023 0301 	bic.w	r3, r3, #1
   1e396:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1e39a:	2a00      	cmp	r2, #0
   1e39c:	d0e5      	beq.n	1e36a <work_cancel+0x1c>
   1e39e:	e7f6      	b.n	1e38e <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1e3a0:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1e3a2:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1e3a4:	f003 0303 	and.w	r3, r3, #3
   1e3a8:	ea43 0300 	orr.w	r3, r3, r0
   1e3ac:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1e3ae:	bf08      	it	eq
   1e3b0:	6051      	streq	r1, [r2, #4]
}
   1e3b2:	e7e6      	b.n	1e382 <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1e3b4:	6818      	ldr	r0, [r3, #0]
   1e3b6:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1e3b8:	f020 0303 	bic.w	r3, r0, #3
   1e3bc:	e7d2      	b.n	1e364 <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   1e3be:	3010      	adds	r0, #16
   1e3c0:	f7fb fdd0 	bl	19f64 <z_abort_timeout>
		if (err) {
   1e3c4:	2800      	cmp	r0, #0
   1e3c6:	d0e0      	beq.n	1e38a <work_cancel+0x3c>
			return -EALREADY;
   1e3c8:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1e3cc:	e7cd      	b.n	1e36a <work_cancel+0x1c>

0001e3ce <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1e3ce:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1e3d0:	f7fb ff16 	bl	1a200 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1e3d4:	bd08      	pop	{r3, pc}

0001e3d6 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1e3d6:	f7fb bf13 	b.w	1a200 <z_tick_get>

0001e3da <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e3da:	f1b1 3fff 	cmp.w	r1, #4294967295
   1e3de:	bf08      	it	eq
   1e3e0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1e3e4:	b538      	push	{r3, r4, r5, lr}
   1e3e6:	4605      	mov	r5, r0
   1e3e8:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e3ea:	d01d      	beq.n	1e428 <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e3ec:	ea51 0300 	orrs.w	r3, r1, r0
   1e3f0:	d103      	bne.n	1e3fa <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   1e3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1e3f6:	f7fb bf03 	b.w	1a200 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1e3fa:	f06f 0301 	mvn.w	r3, #1
   1e3fe:	1a18      	subs	r0, r3, r0
   1e400:	f04f 33ff 	mov.w	r3, #4294967295
   1e404:	eb63 0101 	sbc.w	r1, r3, r1
   1e408:	2900      	cmp	r1, #0
   1e40a:	da0c      	bge.n	1e426 <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   1e40c:	f7fb fef8 	bl	1a200 <z_tick_get>
   1e410:	2d01      	cmp	r5, #1
   1e412:	4622      	mov	r2, r4
   1e414:	f174 0400 	sbcs.w	r4, r4, #0
   1e418:	462b      	mov	r3, r5
   1e41a:	bfbc      	itt	lt
   1e41c:	2301      	movlt	r3, #1
   1e41e:	2200      	movlt	r2, #0
   1e420:	1818      	adds	r0, r3, r0
   1e422:	eb41 0102 	adc.w	r1, r1, r2
}
   1e426:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1e428:	f04f 30ff 	mov.w	r0, #4294967295
   1e42c:	4601      	mov	r1, r0
   1e42e:	e7fa      	b.n	1e426 <z_timeout_end_calc+0x4c>

0001e430 <k_work_submit_to_queue>:
{
   1e430:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e432:	f101 0308 	add.w	r3, r1, #8
   1e436:	e8d3 2fef 	ldaex	r2, [r3]
   1e43a:	f042 0c01 	orr.w	ip, r2, #1
   1e43e:	e8c3 cfee 	stlex	lr, ip, [r3]
   1e442:	f1be 0f00 	cmp.w	lr, #0
   1e446:	d1f6      	bne.n	1e436 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1e448:	07d3      	lsls	r3, r2, #31
   1e44a:	d403      	bmi.n	1e454 <k_work_submit_to_queue+0x24>
}
   1e44c:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1e450:	f7ff beed 	b.w	1e22e <k_queue_append>
}
   1e454:	f85d fb04 	ldr.w	pc, [sp], #4

0001e458 <add_event>:
{
   1e458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e45a:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e45c:	e9d0 2300 	ldrd	r2, r3, [r0]
   1e460:	4290      	cmp	r0, r2
   1e462:	4604      	mov	r4, r0
   1e464:	460d      	mov	r5, r1
   1e466:	d106      	bne.n	1e476 <add_event+0x1e>
	node->prev = list->tail;
   1e468:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1e46a:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1e46c:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1e46e:	6863      	ldr	r3, [r4, #4]
   1e470:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1e472:	6065      	str	r5, [r4, #4]
}
   1e474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1e476:	2b00      	cmp	r3, #0
   1e478:	d0f6      	beq.n	1e468 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1e47a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e47c:	b100      	cbz	r0, 1e480 <add_event+0x28>
   1e47e:	386c      	subs	r0, #108	; 0x6c
   1e480:	b107      	cbz	r7, 1e484 <add_event+0x2c>
   1e482:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1e484:	4639      	mov	r1, r7
   1e486:	f7ff fee7 	bl	1e258 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1e48a:	2800      	cmp	r0, #0
   1e48c:	d1ec      	bne.n	1e468 <add_event+0x10>
	return list->head == list;
   1e48e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e490:	42b4      	cmp	r4, r6
   1e492:	d0e9      	beq.n	1e468 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e494:	2e00      	cmp	r6, #0
   1e496:	d0e7      	beq.n	1e468 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1e498:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e49a:	b101      	cbz	r1, 1e49e <add_event+0x46>
   1e49c:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1e49e:	4638      	mov	r0, r7
   1e4a0:	f7ff feda 	bl	1e258 <z_is_t1_higher_prio_than_t2>
   1e4a4:	b128      	cbz	r0, 1e4b2 <add_event+0x5a>
	node->prev = successor->prev;
   1e4a6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1e4a8:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1e4ac:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1e4ae:	6075      	str	r5, [r6, #4]
			return;
   1e4b0:	e7e0      	b.n	1e474 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1e4b2:	6863      	ldr	r3, [r4, #4]
   1e4b4:	429e      	cmp	r6, r3
   1e4b6:	d0d7      	beq.n	1e468 <add_event+0x10>
   1e4b8:	6836      	ldr	r6, [r6, #0]
   1e4ba:	e7eb      	b.n	1e494 <add_event+0x3c>

0001e4bc <z_handle_obj_poll_events>:
{
   1e4bc:	4603      	mov	r3, r0
	return list->head == list;
   1e4be:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1e4c0:	4283      	cmp	r3, r0
   1e4c2:	d008      	beq.n	1e4d6 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1e4c4:	e9d0 3200 	ldrd	r3, r2, [r0]
   1e4c8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1e4ca:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e4cc:	2300      	movs	r3, #0
	node->prev = NULL;
   1e4ce:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1e4d2:	f7fb bed3 	b.w	1a27c <signal_poll_event>
}
   1e4d6:	4770      	bx	lr

0001e4d8 <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1e4d8:	2904      	cmp	r1, #4
{
   1e4da:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1e4de:	460d      	mov	r5, r1
   1e4e0:	bf38      	it	cc
   1e4e2:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e4e4:	1952      	adds	r2, r2, r5
{
   1e4e6:	4606      	mov	r6, r0
   1e4e8:	d209      	bcs.n	1e4fe <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   1e4ea:	f04f 0800 	mov.w	r8, #0
   1e4ee:	f04f 0900 	mov.w	r9, #0
   1e4f2:	e9cd 8900 	strd	r8, r9, [sp]
   1e4f6:	f7f9 fcad 	bl	17e54 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1e4fa:	4604      	mov	r4, r0
   1e4fc:	b918      	cbnz	r0, 1e506 <z_heap_aligned_alloc+0x2e>
		return NULL;
   1e4fe:	2000      	movs	r0, #0
}
   1e500:	b002      	add	sp, #8
   1e502:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   1e506:	462a      	mov	r2, r5
   1e508:	21ff      	movs	r1, #255	; 0xff
   1e50a:	f7fd fd42 	bl	1bf92 <memset>
	*heap_ref = heap;
   1e50e:	6026      	str	r6, [r4, #0]
	return mem + excess;
   1e510:	1960      	adds	r0, r4, r5
   1e512:	e7f5      	b.n	1e500 <z_heap_aligned_alloc+0x28>

0001e514 <k_free>:
	if (ptr != NULL) {
   1e514:	b138      	cbz	r0, 1e526 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1e516:	1f03      	subs	r3, r0, #4
   1e518:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   1e51a:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1e51e:	1c42      	adds	r2, r0, #1
   1e520:	d0fa      	beq.n	1e518 <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   1e522:	f7f9 bd1f 	b.w	17f64 <k_heap_free>
}
   1e526:	4770      	bx	lr

0001e528 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1e528:	4770      	bx	lr
