
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	d0 ee 00 20 e9 d9 00 00 39 b9 01 00 19 da 00 00     ... ....9.......
    8010:	19 da 00 00 19 da 00 00 19 da 00 00 19 da 00 00     ................
	...
    802c:	b1 d7 00 00 19 da 00 00 00 00 00 00 55 d7 00 00     ............U...
    803c:	85 c0 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    8050:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    8060:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    8070:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    8080:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    8090:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    80a0:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    80b0:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    80c0:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    80d0:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    80e0:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    80f0:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    8100:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    8110:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    8120:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    8130:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    8140:	a9 d9 00 00 a9 d9 00 00 a9 d9 00 00 a9 d9 00 00     ................
    8150:	a9 d9 00 00                                         ....

00008154 <_vector_end>:
	...

00008200 <m_firmware_info>:
    8200:	de e6 1e 28 4c bb ce 8f 02 35 00 00 3c 00 00 00     ...(L....5..<...
    8210:	80 b3 01 00 01 00 00 00 00 80 00 00 00 80 00 00     ................
    8220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00008240 <__aeabi_drsub>:
    8240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    8244:	e002      	b.n	824c <__adddf3>
    8246:	bf00      	nop

00008248 <__aeabi_dsub>:
    8248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000824c <__adddf3>:
    824c:	b530      	push	{r4, r5, lr}
    824e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    8252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    8256:	ea94 0f05 	teq	r4, r5
    825a:	bf08      	it	eq
    825c:	ea90 0f02 	teqeq	r0, r2
    8260:	bf1f      	itttt	ne
    8262:	ea54 0c00 	orrsne.w	ip, r4, r0
    8266:	ea55 0c02 	orrsne.w	ip, r5, r2
    826a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    826e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8272:	f000 80e2 	beq.w	843a <__adddf3+0x1ee>
    8276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    827a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    827e:	bfb8      	it	lt
    8280:	426d      	neglt	r5, r5
    8282:	dd0c      	ble.n	829e <__adddf3+0x52>
    8284:	442c      	add	r4, r5
    8286:	ea80 0202 	eor.w	r2, r0, r2
    828a:	ea81 0303 	eor.w	r3, r1, r3
    828e:	ea82 0000 	eor.w	r0, r2, r0
    8292:	ea83 0101 	eor.w	r1, r3, r1
    8296:	ea80 0202 	eor.w	r2, r0, r2
    829a:	ea81 0303 	eor.w	r3, r1, r3
    829e:	2d36      	cmp	r5, #54	; 0x36
    82a0:	bf88      	it	hi
    82a2:	bd30      	pophi	{r4, r5, pc}
    82a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    82a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    82ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    82b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    82b4:	d002      	beq.n	82bc <__adddf3+0x70>
    82b6:	4240      	negs	r0, r0
    82b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    82bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    82c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    82c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    82c8:	d002      	beq.n	82d0 <__adddf3+0x84>
    82ca:	4252      	negs	r2, r2
    82cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    82d0:	ea94 0f05 	teq	r4, r5
    82d4:	f000 80a7 	beq.w	8426 <__adddf3+0x1da>
    82d8:	f1a4 0401 	sub.w	r4, r4, #1
    82dc:	f1d5 0e20 	rsbs	lr, r5, #32
    82e0:	db0d      	blt.n	82fe <__adddf3+0xb2>
    82e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    82e6:	fa22 f205 	lsr.w	r2, r2, r5
    82ea:	1880      	adds	r0, r0, r2
    82ec:	f141 0100 	adc.w	r1, r1, #0
    82f0:	fa03 f20e 	lsl.w	r2, r3, lr
    82f4:	1880      	adds	r0, r0, r2
    82f6:	fa43 f305 	asr.w	r3, r3, r5
    82fa:	4159      	adcs	r1, r3
    82fc:	e00e      	b.n	831c <__adddf3+0xd0>
    82fe:	f1a5 0520 	sub.w	r5, r5, #32
    8302:	f10e 0e20 	add.w	lr, lr, #32
    8306:	2a01      	cmp	r2, #1
    8308:	fa03 fc0e 	lsl.w	ip, r3, lr
    830c:	bf28      	it	cs
    830e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8312:	fa43 f305 	asr.w	r3, r3, r5
    8316:	18c0      	adds	r0, r0, r3
    8318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    831c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8320:	d507      	bpl.n	8332 <__adddf3+0xe6>
    8322:	f04f 0e00 	mov.w	lr, #0
    8326:	f1dc 0c00 	rsbs	ip, ip, #0
    832a:	eb7e 0000 	sbcs.w	r0, lr, r0
    832e:	eb6e 0101 	sbc.w	r1, lr, r1
    8332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    8336:	d31b      	bcc.n	8370 <__adddf3+0x124>
    8338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    833c:	d30c      	bcc.n	8358 <__adddf3+0x10c>
    833e:	0849      	lsrs	r1, r1, #1
    8340:	ea5f 0030 	movs.w	r0, r0, rrx
    8344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8348:	f104 0401 	add.w	r4, r4, #1
    834c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    8354:	f080 809a 	bcs.w	848c <__adddf3+0x240>
    8358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    835c:	bf08      	it	eq
    835e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8362:	f150 0000 	adcs.w	r0, r0, #0
    8366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    836a:	ea41 0105 	orr.w	r1, r1, r5
    836e:	bd30      	pop	{r4, r5, pc}
    8370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    8374:	4140      	adcs	r0, r0
    8376:	eb41 0101 	adc.w	r1, r1, r1
    837a:	3c01      	subs	r4, #1
    837c:	bf28      	it	cs
    837e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    8382:	d2e9      	bcs.n	8358 <__adddf3+0x10c>
    8384:	f091 0f00 	teq	r1, #0
    8388:	bf04      	itt	eq
    838a:	4601      	moveq	r1, r0
    838c:	2000      	moveq	r0, #0
    838e:	fab1 f381 	clz	r3, r1
    8392:	bf08      	it	eq
    8394:	3320      	addeq	r3, #32
    8396:	f1a3 030b 	sub.w	r3, r3, #11
    839a:	f1b3 0220 	subs.w	r2, r3, #32
    839e:	da0c      	bge.n	83ba <__adddf3+0x16e>
    83a0:	320c      	adds	r2, #12
    83a2:	dd08      	ble.n	83b6 <__adddf3+0x16a>
    83a4:	f102 0c14 	add.w	ip, r2, #20
    83a8:	f1c2 020c 	rsb	r2, r2, #12
    83ac:	fa01 f00c 	lsl.w	r0, r1, ip
    83b0:	fa21 f102 	lsr.w	r1, r1, r2
    83b4:	e00c      	b.n	83d0 <__adddf3+0x184>
    83b6:	f102 0214 	add.w	r2, r2, #20
    83ba:	bfd8      	it	le
    83bc:	f1c2 0c20 	rsble	ip, r2, #32
    83c0:	fa01 f102 	lsl.w	r1, r1, r2
    83c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    83c8:	bfdc      	itt	le
    83ca:	ea41 010c 	orrle.w	r1, r1, ip
    83ce:	4090      	lslle	r0, r2
    83d0:	1ae4      	subs	r4, r4, r3
    83d2:	bfa2      	ittt	ge
    83d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    83d8:	4329      	orrge	r1, r5
    83da:	bd30      	popge	{r4, r5, pc}
    83dc:	ea6f 0404 	mvn.w	r4, r4
    83e0:	3c1f      	subs	r4, #31
    83e2:	da1c      	bge.n	841e <__adddf3+0x1d2>
    83e4:	340c      	adds	r4, #12
    83e6:	dc0e      	bgt.n	8406 <__adddf3+0x1ba>
    83e8:	f104 0414 	add.w	r4, r4, #20
    83ec:	f1c4 0220 	rsb	r2, r4, #32
    83f0:	fa20 f004 	lsr.w	r0, r0, r4
    83f4:	fa01 f302 	lsl.w	r3, r1, r2
    83f8:	ea40 0003 	orr.w	r0, r0, r3
    83fc:	fa21 f304 	lsr.w	r3, r1, r4
    8400:	ea45 0103 	orr.w	r1, r5, r3
    8404:	bd30      	pop	{r4, r5, pc}
    8406:	f1c4 040c 	rsb	r4, r4, #12
    840a:	f1c4 0220 	rsb	r2, r4, #32
    840e:	fa20 f002 	lsr.w	r0, r0, r2
    8412:	fa01 f304 	lsl.w	r3, r1, r4
    8416:	ea40 0003 	orr.w	r0, r0, r3
    841a:	4629      	mov	r1, r5
    841c:	bd30      	pop	{r4, r5, pc}
    841e:	fa21 f004 	lsr.w	r0, r1, r4
    8422:	4629      	mov	r1, r5
    8424:	bd30      	pop	{r4, r5, pc}
    8426:	f094 0f00 	teq	r4, #0
    842a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    842e:	bf06      	itte	eq
    8430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    8434:	3401      	addeq	r4, #1
    8436:	3d01      	subne	r5, #1
    8438:	e74e      	b.n	82d8 <__adddf3+0x8c>
    843a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    843e:	bf18      	it	ne
    8440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8444:	d029      	beq.n	849a <__adddf3+0x24e>
    8446:	ea94 0f05 	teq	r4, r5
    844a:	bf08      	it	eq
    844c:	ea90 0f02 	teqeq	r0, r2
    8450:	d005      	beq.n	845e <__adddf3+0x212>
    8452:	ea54 0c00 	orrs.w	ip, r4, r0
    8456:	bf04      	itt	eq
    8458:	4619      	moveq	r1, r3
    845a:	4610      	moveq	r0, r2
    845c:	bd30      	pop	{r4, r5, pc}
    845e:	ea91 0f03 	teq	r1, r3
    8462:	bf1e      	ittt	ne
    8464:	2100      	movne	r1, #0
    8466:	2000      	movne	r0, #0
    8468:	bd30      	popne	{r4, r5, pc}
    846a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    846e:	d105      	bne.n	847c <__adddf3+0x230>
    8470:	0040      	lsls	r0, r0, #1
    8472:	4149      	adcs	r1, r1
    8474:	bf28      	it	cs
    8476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    847a:	bd30      	pop	{r4, r5, pc}
    847c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8480:	bf3c      	itt	cc
    8482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    8486:	bd30      	popcc	{r4, r5, pc}
    8488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    848c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8494:	f04f 0000 	mov.w	r0, #0
    8498:	bd30      	pop	{r4, r5, pc}
    849a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    849e:	bf1a      	itte	ne
    84a0:	4619      	movne	r1, r3
    84a2:	4610      	movne	r0, r2
    84a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    84a8:	bf1c      	itt	ne
    84aa:	460b      	movne	r3, r1
    84ac:	4602      	movne	r2, r0
    84ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    84b2:	bf06      	itte	eq
    84b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    84b8:	ea91 0f03 	teqeq	r1, r3
    84bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    84c0:	bd30      	pop	{r4, r5, pc}
    84c2:	bf00      	nop

000084c4 <__aeabi_ui2d>:
    84c4:	f090 0f00 	teq	r0, #0
    84c8:	bf04      	itt	eq
    84ca:	2100      	moveq	r1, #0
    84cc:	4770      	bxeq	lr
    84ce:	b530      	push	{r4, r5, lr}
    84d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84d8:	f04f 0500 	mov.w	r5, #0
    84dc:	f04f 0100 	mov.w	r1, #0
    84e0:	e750      	b.n	8384 <__adddf3+0x138>
    84e2:	bf00      	nop

000084e4 <__aeabi_i2d>:
    84e4:	f090 0f00 	teq	r0, #0
    84e8:	bf04      	itt	eq
    84ea:	2100      	moveq	r1, #0
    84ec:	4770      	bxeq	lr
    84ee:	b530      	push	{r4, r5, lr}
    84f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    84fc:	bf48      	it	mi
    84fe:	4240      	negmi	r0, r0
    8500:	f04f 0100 	mov.w	r1, #0
    8504:	e73e      	b.n	8384 <__adddf3+0x138>
    8506:	bf00      	nop

00008508 <__aeabi_f2d>:
    8508:	0042      	lsls	r2, r0, #1
    850a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    850e:	ea4f 0131 	mov.w	r1, r1, rrx
    8512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8516:	bf1f      	itttt	ne
    8518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    851c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8524:	4770      	bxne	lr
    8526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    852a:	bf08      	it	eq
    852c:	4770      	bxeq	lr
    852e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    8532:	bf04      	itt	eq
    8534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8538:	4770      	bxeq	lr
    853a:	b530      	push	{r4, r5, lr}
    853c:	f44f 7460 	mov.w	r4, #896	; 0x380
    8540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8548:	e71c      	b.n	8384 <__adddf3+0x138>
    854a:	bf00      	nop

0000854c <__aeabi_ul2d>:
    854c:	ea50 0201 	orrs.w	r2, r0, r1
    8550:	bf08      	it	eq
    8552:	4770      	bxeq	lr
    8554:	b530      	push	{r4, r5, lr}
    8556:	f04f 0500 	mov.w	r5, #0
    855a:	e00a      	b.n	8572 <__aeabi_l2d+0x16>

0000855c <__aeabi_l2d>:
    855c:	ea50 0201 	orrs.w	r2, r0, r1
    8560:	bf08      	it	eq
    8562:	4770      	bxeq	lr
    8564:	b530      	push	{r4, r5, lr}
    8566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    856a:	d502      	bpl.n	8572 <__aeabi_l2d+0x16>
    856c:	4240      	negs	r0, r0
    856e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    857a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    857e:	f43f aed8 	beq.w	8332 <__adddf3+0xe6>
    8582:	f04f 0203 	mov.w	r2, #3
    8586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    858a:	bf18      	it	ne
    858c:	3203      	addne	r2, #3
    858e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8592:	bf18      	it	ne
    8594:	3203      	addne	r2, #3
    8596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    859a:	f1c2 0320 	rsb	r3, r2, #32
    859e:	fa00 fc03 	lsl.w	ip, r0, r3
    85a2:	fa20 f002 	lsr.w	r0, r0, r2
    85a6:	fa01 fe03 	lsl.w	lr, r1, r3
    85aa:	ea40 000e 	orr.w	r0, r0, lr
    85ae:	fa21 f102 	lsr.w	r1, r1, r2
    85b2:	4414      	add	r4, r2
    85b4:	e6bd      	b.n	8332 <__adddf3+0xe6>
    85b6:	bf00      	nop

000085b8 <__aeabi_dmul>:
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    85be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    85c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    85c6:	bf1d      	ittte	ne
    85c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    85cc:	ea94 0f0c 	teqne	r4, ip
    85d0:	ea95 0f0c 	teqne	r5, ip
    85d4:	f000 f8de 	bleq	8794 <__aeabi_dmul+0x1dc>
    85d8:	442c      	add	r4, r5
    85da:	ea81 0603 	eor.w	r6, r1, r3
    85de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    85e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    85e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    85ea:	bf18      	it	ne
    85ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    85f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    85f8:	d038      	beq.n	866c <__aeabi_dmul+0xb4>
    85fa:	fba0 ce02 	umull	ip, lr, r0, r2
    85fe:	f04f 0500 	mov.w	r5, #0
    8602:	fbe1 e502 	umlal	lr, r5, r1, r2
    8606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    860a:	fbe0 e503 	umlal	lr, r5, r0, r3
    860e:	f04f 0600 	mov.w	r6, #0
    8612:	fbe1 5603 	umlal	r5, r6, r1, r3
    8616:	f09c 0f00 	teq	ip, #0
    861a:	bf18      	it	ne
    861c:	f04e 0e01 	orrne.w	lr, lr, #1
    8620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    862c:	d204      	bcs.n	8638 <__aeabi_dmul+0x80>
    862e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    8632:	416d      	adcs	r5, r5
    8634:	eb46 0606 	adc.w	r6, r6, r6
    8638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    863c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    8644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    864c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8650:	bf88      	it	hi
    8652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8656:	d81e      	bhi.n	8696 <__aeabi_dmul+0xde>
    8658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    865c:	bf08      	it	eq
    865e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    8662:	f150 0000 	adcs.w	r0, r0, #0
    8666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8670:	ea46 0101 	orr.w	r1, r6, r1
    8674:	ea40 0002 	orr.w	r0, r0, r2
    8678:	ea81 0103 	eor.w	r1, r1, r3
    867c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8680:	bfc2      	ittt	gt
    8682:	ebd4 050c 	rsbsgt	r5, r4, ip
    8686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    868a:	bd70      	popgt	{r4, r5, r6, pc}
    868c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8690:	f04f 0e00 	mov.w	lr, #0
    8694:	3c01      	subs	r4, #1
    8696:	f300 80ab 	bgt.w	87f0 <__aeabi_dmul+0x238>
    869a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    869e:	bfde      	ittt	le
    86a0:	2000      	movle	r0, #0
    86a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    86a6:	bd70      	pople	{r4, r5, r6, pc}
    86a8:	f1c4 0400 	rsb	r4, r4, #0
    86ac:	3c20      	subs	r4, #32
    86ae:	da35      	bge.n	871c <__aeabi_dmul+0x164>
    86b0:	340c      	adds	r4, #12
    86b2:	dc1b      	bgt.n	86ec <__aeabi_dmul+0x134>
    86b4:	f104 0414 	add.w	r4, r4, #20
    86b8:	f1c4 0520 	rsb	r5, r4, #32
    86bc:	fa00 f305 	lsl.w	r3, r0, r5
    86c0:	fa20 f004 	lsr.w	r0, r0, r4
    86c4:	fa01 f205 	lsl.w	r2, r1, r5
    86c8:	ea40 0002 	orr.w	r0, r0, r2
    86cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    86d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    86d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    86d8:	fa21 f604 	lsr.w	r6, r1, r4
    86dc:	eb42 0106 	adc.w	r1, r2, r6
    86e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    86e4:	bf08      	it	eq
    86e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    86ea:	bd70      	pop	{r4, r5, r6, pc}
    86ec:	f1c4 040c 	rsb	r4, r4, #12
    86f0:	f1c4 0520 	rsb	r5, r4, #32
    86f4:	fa00 f304 	lsl.w	r3, r0, r4
    86f8:	fa20 f005 	lsr.w	r0, r0, r5
    86fc:	fa01 f204 	lsl.w	r2, r1, r4
    8700:	ea40 0002 	orr.w	r0, r0, r2
    8704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    870c:	f141 0100 	adc.w	r1, r1, #0
    8710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8714:	bf08      	it	eq
    8716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    871a:	bd70      	pop	{r4, r5, r6, pc}
    871c:	f1c4 0520 	rsb	r5, r4, #32
    8720:	fa00 f205 	lsl.w	r2, r0, r5
    8724:	ea4e 0e02 	orr.w	lr, lr, r2
    8728:	fa20 f304 	lsr.w	r3, r0, r4
    872c:	fa01 f205 	lsl.w	r2, r1, r5
    8730:	ea43 0302 	orr.w	r3, r3, r2
    8734:	fa21 f004 	lsr.w	r0, r1, r4
    8738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    873c:	fa21 f204 	lsr.w	r2, r1, r4
    8740:	ea20 0002 	bic.w	r0, r0, r2
    8744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    874c:	bf08      	it	eq
    874e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8752:	bd70      	pop	{r4, r5, r6, pc}
    8754:	f094 0f00 	teq	r4, #0
    8758:	d10f      	bne.n	877a <__aeabi_dmul+0x1c2>
    875a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    875e:	0040      	lsls	r0, r0, #1
    8760:	eb41 0101 	adc.w	r1, r1, r1
    8764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8768:	bf08      	it	eq
    876a:	3c01      	subeq	r4, #1
    876c:	d0f7      	beq.n	875e <__aeabi_dmul+0x1a6>
    876e:	ea41 0106 	orr.w	r1, r1, r6
    8772:	f095 0f00 	teq	r5, #0
    8776:	bf18      	it	ne
    8778:	4770      	bxne	lr
    877a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    877e:	0052      	lsls	r2, r2, #1
    8780:	eb43 0303 	adc.w	r3, r3, r3
    8784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8788:	bf08      	it	eq
    878a:	3d01      	subeq	r5, #1
    878c:	d0f7      	beq.n	877e <__aeabi_dmul+0x1c6>
    878e:	ea43 0306 	orr.w	r3, r3, r6
    8792:	4770      	bx	lr
    8794:	ea94 0f0c 	teq	r4, ip
    8798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    879c:	bf18      	it	ne
    879e:	ea95 0f0c 	teqne	r5, ip
    87a2:	d00c      	beq.n	87be <__aeabi_dmul+0x206>
    87a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87a8:	bf18      	it	ne
    87aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87ae:	d1d1      	bne.n	8754 <__aeabi_dmul+0x19c>
    87b0:	ea81 0103 	eor.w	r1, r1, r3
    87b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87b8:	f04f 0000 	mov.w	r0, #0
    87bc:	bd70      	pop	{r4, r5, r6, pc}
    87be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87c2:	bf06      	itte	eq
    87c4:	4610      	moveq	r0, r2
    87c6:	4619      	moveq	r1, r3
    87c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87cc:	d019      	beq.n	8802 <__aeabi_dmul+0x24a>
    87ce:	ea94 0f0c 	teq	r4, ip
    87d2:	d102      	bne.n	87da <__aeabi_dmul+0x222>
    87d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    87d8:	d113      	bne.n	8802 <__aeabi_dmul+0x24a>
    87da:	ea95 0f0c 	teq	r5, ip
    87de:	d105      	bne.n	87ec <__aeabi_dmul+0x234>
    87e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    87e4:	bf1c      	itt	ne
    87e6:	4610      	movne	r0, r2
    87e8:	4619      	movne	r1, r3
    87ea:	d10a      	bne.n	8802 <__aeabi_dmul+0x24a>
    87ec:	ea81 0103 	eor.w	r1, r1, r3
    87f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    87f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    87fc:	f04f 0000 	mov.w	r0, #0
    8800:	bd70      	pop	{r4, r5, r6, pc}
    8802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    880a:	bd70      	pop	{r4, r5, r6, pc}

0000880c <__aeabi_ddiv>:
    880c:	b570      	push	{r4, r5, r6, lr}
    880e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    881a:	bf1d      	ittte	ne
    881c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8820:	ea94 0f0c 	teqne	r4, ip
    8824:	ea95 0f0c 	teqne	r5, ip
    8828:	f000 f8a7 	bleq	897a <__aeabi_ddiv+0x16e>
    882c:	eba4 0405 	sub.w	r4, r4, r5
    8830:	ea81 0e03 	eor.w	lr, r1, r3
    8834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8838:	ea4f 3101 	mov.w	r1, r1, lsl #12
    883c:	f000 8088 	beq.w	8950 <__aeabi_ddiv+0x144>
    8840:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    884c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8850:	ea4f 2202 	mov.w	r2, r2, lsl #8
    8854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    885c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    8864:	429d      	cmp	r5, r3
    8866:	bf08      	it	eq
    8868:	4296      	cmpeq	r6, r2
    886a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    886e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    8872:	d202      	bcs.n	887a <__aeabi_ddiv+0x6e>
    8874:	085b      	lsrs	r3, r3, #1
    8876:	ea4f 0232 	mov.w	r2, r2, rrx
    887a:	1ab6      	subs	r6, r6, r2
    887c:	eb65 0503 	sbc.w	r5, r5, r3
    8880:	085b      	lsrs	r3, r3, #1
    8882:	ea4f 0232 	mov.w	r2, r2, rrx
    8886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    888a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    888e:	ebb6 0e02 	subs.w	lr, r6, r2
    8892:	eb75 0e03 	sbcs.w	lr, r5, r3
    8896:	bf22      	ittt	cs
    8898:	1ab6      	subcs	r6, r6, r2
    889a:	4675      	movcs	r5, lr
    889c:	ea40 000c 	orrcs.w	r0, r0, ip
    88a0:	085b      	lsrs	r3, r3, #1
    88a2:	ea4f 0232 	mov.w	r2, r2, rrx
    88a6:	ebb6 0e02 	subs.w	lr, r6, r2
    88aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    88ae:	bf22      	ittt	cs
    88b0:	1ab6      	subcs	r6, r6, r2
    88b2:	4675      	movcs	r5, lr
    88b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    88b8:	085b      	lsrs	r3, r3, #1
    88ba:	ea4f 0232 	mov.w	r2, r2, rrx
    88be:	ebb6 0e02 	subs.w	lr, r6, r2
    88c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    88c6:	bf22      	ittt	cs
    88c8:	1ab6      	subcs	r6, r6, r2
    88ca:	4675      	movcs	r5, lr
    88cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    88d0:	085b      	lsrs	r3, r3, #1
    88d2:	ea4f 0232 	mov.w	r2, r2, rrx
    88d6:	ebb6 0e02 	subs.w	lr, r6, r2
    88da:	eb75 0e03 	sbcs.w	lr, r5, r3
    88de:	bf22      	ittt	cs
    88e0:	1ab6      	subcs	r6, r6, r2
    88e2:	4675      	movcs	r5, lr
    88e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    88e8:	ea55 0e06 	orrs.w	lr, r5, r6
    88ec:	d018      	beq.n	8920 <__aeabi_ddiv+0x114>
    88ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    88f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    88f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    88fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    88fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    890a:	d1c0      	bne.n	888e <__aeabi_ddiv+0x82>
    890c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8910:	d10b      	bne.n	892a <__aeabi_ddiv+0x11e>
    8912:	ea41 0100 	orr.w	r1, r1, r0
    8916:	f04f 0000 	mov.w	r0, #0
    891a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    891e:	e7b6      	b.n	888e <__aeabi_ddiv+0x82>
    8920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8924:	bf04      	itt	eq
    8926:	4301      	orreq	r1, r0
    8928:	2000      	moveq	r0, #0
    892a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    892e:	bf88      	it	hi
    8930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8934:	f63f aeaf 	bhi.w	8696 <__aeabi_dmul+0xde>
    8938:	ebb5 0c03 	subs.w	ip, r5, r3
    893c:	bf04      	itt	eq
    893e:	ebb6 0c02 	subseq.w	ip, r6, r2
    8942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8946:	f150 0000 	adcs.w	r0, r0, #0
    894a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    894e:	bd70      	pop	{r4, r5, r6, pc}
    8950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    8954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    895c:	bfc2      	ittt	gt
    895e:	ebd4 050c 	rsbsgt	r5, r4, ip
    8962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8966:	bd70      	popgt	{r4, r5, r6, pc}
    8968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    896c:	f04f 0e00 	mov.w	lr, #0
    8970:	3c01      	subs	r4, #1
    8972:	e690      	b.n	8696 <__aeabi_dmul+0xde>
    8974:	ea45 0e06 	orr.w	lr, r5, r6
    8978:	e68d      	b.n	8696 <__aeabi_dmul+0xde>
    897a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    897e:	ea94 0f0c 	teq	r4, ip
    8982:	bf08      	it	eq
    8984:	ea95 0f0c 	teqeq	r5, ip
    8988:	f43f af3b 	beq.w	8802 <__aeabi_dmul+0x24a>
    898c:	ea94 0f0c 	teq	r4, ip
    8990:	d10a      	bne.n	89a8 <__aeabi_ddiv+0x19c>
    8992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8996:	f47f af34 	bne.w	8802 <__aeabi_dmul+0x24a>
    899a:	ea95 0f0c 	teq	r5, ip
    899e:	f47f af25 	bne.w	87ec <__aeabi_dmul+0x234>
    89a2:	4610      	mov	r0, r2
    89a4:	4619      	mov	r1, r3
    89a6:	e72c      	b.n	8802 <__aeabi_dmul+0x24a>
    89a8:	ea95 0f0c 	teq	r5, ip
    89ac:	d106      	bne.n	89bc <__aeabi_ddiv+0x1b0>
    89ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    89b2:	f43f aefd 	beq.w	87b0 <__aeabi_dmul+0x1f8>
    89b6:	4610      	mov	r0, r2
    89b8:	4619      	mov	r1, r3
    89ba:	e722      	b.n	8802 <__aeabi_dmul+0x24a>
    89bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    89c0:	bf18      	it	ne
    89c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    89c6:	f47f aec5 	bne.w	8754 <__aeabi_dmul+0x19c>
    89ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    89ce:	f47f af0d 	bne.w	87ec <__aeabi_dmul+0x234>
    89d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    89d6:	f47f aeeb 	bne.w	87b0 <__aeabi_dmul+0x1f8>
    89da:	e712      	b.n	8802 <__aeabi_dmul+0x24a>

000089dc <__gedf2>:
    89dc:	f04f 3cff 	mov.w	ip, #4294967295
    89e0:	e006      	b.n	89f0 <__cmpdf2+0x4>
    89e2:	bf00      	nop

000089e4 <__ledf2>:
    89e4:	f04f 0c01 	mov.w	ip, #1
    89e8:	e002      	b.n	89f0 <__cmpdf2+0x4>
    89ea:	bf00      	nop

000089ec <__cmpdf2>:
    89ec:	f04f 0c01 	mov.w	ip, #1
    89f0:	f84d cd04 	str.w	ip, [sp, #-4]!
    89f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    89f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    89fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a00:	bf18      	it	ne
    8a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8a06:	d01b      	beq.n	8a40 <__cmpdf2+0x54>
    8a08:	b001      	add	sp, #4
    8a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8a0e:	bf0c      	ite	eq
    8a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8a14:	ea91 0f03 	teqne	r1, r3
    8a18:	bf02      	ittt	eq
    8a1a:	ea90 0f02 	teqeq	r0, r2
    8a1e:	2000      	moveq	r0, #0
    8a20:	4770      	bxeq	lr
    8a22:	f110 0f00 	cmn.w	r0, #0
    8a26:	ea91 0f03 	teq	r1, r3
    8a2a:	bf58      	it	pl
    8a2c:	4299      	cmppl	r1, r3
    8a2e:	bf08      	it	eq
    8a30:	4290      	cmpeq	r0, r2
    8a32:	bf2c      	ite	cs
    8a34:	17d8      	asrcs	r0, r3, #31
    8a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8a3a:	f040 0001 	orr.w	r0, r0, #1
    8a3e:	4770      	bx	lr
    8a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a48:	d102      	bne.n	8a50 <__cmpdf2+0x64>
    8a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8a4e:	d107      	bne.n	8a60 <__cmpdf2+0x74>
    8a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a58:	d1d6      	bne.n	8a08 <__cmpdf2+0x1c>
    8a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8a5e:	d0d3      	beq.n	8a08 <__cmpdf2+0x1c>
    8a60:	f85d 0b04 	ldr.w	r0, [sp], #4
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop

00008a68 <__aeabi_cdrcmple>:
    8a68:	4684      	mov	ip, r0
    8a6a:	4610      	mov	r0, r2
    8a6c:	4662      	mov	r2, ip
    8a6e:	468c      	mov	ip, r1
    8a70:	4619      	mov	r1, r3
    8a72:	4663      	mov	r3, ip
    8a74:	e000      	b.n	8a78 <__aeabi_cdcmpeq>
    8a76:	bf00      	nop

00008a78 <__aeabi_cdcmpeq>:
    8a78:	b501      	push	{r0, lr}
    8a7a:	f7ff ffb7 	bl	89ec <__cmpdf2>
    8a7e:	2800      	cmp	r0, #0
    8a80:	bf48      	it	mi
    8a82:	f110 0f00 	cmnmi.w	r0, #0
    8a86:	bd01      	pop	{r0, pc}

00008a88 <__aeabi_dcmpeq>:
    8a88:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a8c:	f7ff fff4 	bl	8a78 <__aeabi_cdcmpeq>
    8a90:	bf0c      	ite	eq
    8a92:	2001      	moveq	r0, #1
    8a94:	2000      	movne	r0, #0
    8a96:	f85d fb08 	ldr.w	pc, [sp], #8
    8a9a:	bf00      	nop

00008a9c <__aeabi_dcmplt>:
    8a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8aa0:	f7ff ffea 	bl	8a78 <__aeabi_cdcmpeq>
    8aa4:	bf34      	ite	cc
    8aa6:	2001      	movcc	r0, #1
    8aa8:	2000      	movcs	r0, #0
    8aaa:	f85d fb08 	ldr.w	pc, [sp], #8
    8aae:	bf00      	nop

00008ab0 <__aeabi_dcmple>:
    8ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ab4:	f7ff ffe0 	bl	8a78 <__aeabi_cdcmpeq>
    8ab8:	bf94      	ite	ls
    8aba:	2001      	movls	r0, #1
    8abc:	2000      	movhi	r0, #0
    8abe:	f85d fb08 	ldr.w	pc, [sp], #8
    8ac2:	bf00      	nop

00008ac4 <__aeabi_dcmpge>:
    8ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ac8:	f7ff ffce 	bl	8a68 <__aeabi_cdrcmple>
    8acc:	bf94      	ite	ls
    8ace:	2001      	movls	r0, #1
    8ad0:	2000      	movhi	r0, #0
    8ad2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ad6:	bf00      	nop

00008ad8 <__aeabi_dcmpgt>:
    8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8adc:	f7ff ffc4 	bl	8a68 <__aeabi_cdrcmple>
    8ae0:	bf34      	ite	cc
    8ae2:	2001      	movcc	r0, #1
    8ae4:	2000      	movcs	r0, #0
    8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
    8aea:	bf00      	nop

00008aec <__aeabi_d2uiz>:
    8aec:	004a      	lsls	r2, r1, #1
    8aee:	d211      	bcs.n	8b14 <__aeabi_d2uiz+0x28>
    8af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8af4:	d211      	bcs.n	8b1a <__aeabi_d2uiz+0x2e>
    8af6:	d50d      	bpl.n	8b14 <__aeabi_d2uiz+0x28>
    8af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b00:	d40e      	bmi.n	8b20 <__aeabi_d2uiz+0x34>
    8b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8b0e:	fa23 f002 	lsr.w	r0, r3, r2
    8b12:	4770      	bx	lr
    8b14:	f04f 0000 	mov.w	r0, #0
    8b18:	4770      	bx	lr
    8b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8b1e:	d102      	bne.n	8b26 <__aeabi_d2uiz+0x3a>
    8b20:	f04f 30ff 	mov.w	r0, #4294967295
    8b24:	4770      	bx	lr
    8b26:	f04f 0000 	mov.w	r0, #0
    8b2a:	4770      	bx	lr

00008b2c <__aeabi_uldivmod>:
    8b2c:	b953      	cbnz	r3, 8b44 <__aeabi_uldivmod+0x18>
    8b2e:	b94a      	cbnz	r2, 8b44 <__aeabi_uldivmod+0x18>
    8b30:	2900      	cmp	r1, #0
    8b32:	bf08      	it	eq
    8b34:	2800      	cmpeq	r0, #0
    8b36:	bf1c      	itt	ne
    8b38:	f04f 31ff 	movne.w	r1, #4294967295
    8b3c:	f04f 30ff 	movne.w	r0, #4294967295
    8b40:	f000 b980 	b.w	8e44 <__aeabi_idiv0>
    8b44:	f1ad 0c08 	sub.w	ip, sp, #8
    8b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8b4c:	f000 f806 	bl	8b5c <__udivmoddi4>
    8b50:	f8dd e004 	ldr.w	lr, [sp, #4]
    8b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8b58:	b004      	add	sp, #16
    8b5a:	4770      	bx	lr

00008b5c <__udivmoddi4>:
    8b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b60:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8b62:	460d      	mov	r5, r1
    8b64:	4604      	mov	r4, r0
    8b66:	460f      	mov	r7, r1
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d147      	bne.n	8bfc <__udivmoddi4+0xa0>
    8b6c:	428a      	cmp	r2, r1
    8b6e:	4694      	mov	ip, r2
    8b70:	d95f      	bls.n	8c32 <__udivmoddi4+0xd6>
    8b72:	fab2 f382 	clz	r3, r2
    8b76:	b143      	cbz	r3, 8b8a <__udivmoddi4+0x2e>
    8b78:	f1c3 0120 	rsb	r1, r3, #32
    8b7c:	409f      	lsls	r7, r3
    8b7e:	fa02 fc03 	lsl.w	ip, r2, r3
    8b82:	409c      	lsls	r4, r3
    8b84:	fa20 f101 	lsr.w	r1, r0, r1
    8b88:	430f      	orrs	r7, r1
    8b8a:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8b8e:	fa1f fe8c 	uxth.w	lr, ip
    8b92:	0c22      	lsrs	r2, r4, #16
    8b94:	fbb7 f1f5 	udiv	r1, r7, r5
    8b98:	fb05 7711 	mls	r7, r5, r1, r7
    8b9c:	fb01 f00e 	mul.w	r0, r1, lr
    8ba0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    8ba4:	4290      	cmp	r0, r2
    8ba6:	d908      	bls.n	8bba <__udivmoddi4+0x5e>
    8ba8:	eb1c 0202 	adds.w	r2, ip, r2
    8bac:	f101 37ff 	add.w	r7, r1, #4294967295
    8bb0:	d202      	bcs.n	8bb8 <__udivmoddi4+0x5c>
    8bb2:	4290      	cmp	r0, r2
    8bb4:	f200 8134 	bhi.w	8e20 <__udivmoddi4+0x2c4>
    8bb8:	4639      	mov	r1, r7
    8bba:	1a12      	subs	r2, r2, r0
    8bbc:	b2a4      	uxth	r4, r4
    8bbe:	fbb2 f0f5 	udiv	r0, r2, r5
    8bc2:	fb05 2210 	mls	r2, r5, r0, r2
    8bc6:	fb00 fe0e 	mul.w	lr, r0, lr
    8bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    8bce:	45a6      	cmp	lr, r4
    8bd0:	d908      	bls.n	8be4 <__udivmoddi4+0x88>
    8bd2:	eb1c 0404 	adds.w	r4, ip, r4
    8bd6:	f100 32ff 	add.w	r2, r0, #4294967295
    8bda:	d202      	bcs.n	8be2 <__udivmoddi4+0x86>
    8bdc:	45a6      	cmp	lr, r4
    8bde:	f200 8119 	bhi.w	8e14 <__udivmoddi4+0x2b8>
    8be2:	4610      	mov	r0, r2
    8be4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8be8:	eba4 040e 	sub.w	r4, r4, lr
    8bec:	2100      	movs	r1, #0
    8bee:	b11e      	cbz	r6, 8bf8 <__udivmoddi4+0x9c>
    8bf0:	40dc      	lsrs	r4, r3
    8bf2:	2300      	movs	r3, #0
    8bf4:	e9c6 4300 	strd	r4, r3, [r6]
    8bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bfc:	428b      	cmp	r3, r1
    8bfe:	d908      	bls.n	8c12 <__udivmoddi4+0xb6>
    8c00:	2e00      	cmp	r6, #0
    8c02:	f000 80fb 	beq.w	8dfc <__udivmoddi4+0x2a0>
    8c06:	2100      	movs	r1, #0
    8c08:	e9c6 0500 	strd	r0, r5, [r6]
    8c0c:	4608      	mov	r0, r1
    8c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c12:	fab3 f183 	clz	r1, r3
    8c16:	2900      	cmp	r1, #0
    8c18:	d14b      	bne.n	8cb2 <__udivmoddi4+0x156>
    8c1a:	42ab      	cmp	r3, r5
    8c1c:	f0c0 80f1 	bcc.w	8e02 <__udivmoddi4+0x2a6>
    8c20:	4282      	cmp	r2, r0
    8c22:	f240 80ee 	bls.w	8e02 <__udivmoddi4+0x2a6>
    8c26:	4608      	mov	r0, r1
    8c28:	2e00      	cmp	r6, #0
    8c2a:	d0e5      	beq.n	8bf8 <__udivmoddi4+0x9c>
    8c2c:	e9c6 4700 	strd	r4, r7, [r6]
    8c30:	e7e2      	b.n	8bf8 <__udivmoddi4+0x9c>
    8c32:	b902      	cbnz	r2, 8c36 <__udivmoddi4+0xda>
    8c34:	deff      	udf	#255	; 0xff
    8c36:	fab2 f382 	clz	r3, r2
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	f040 809d 	bne.w	8d7a <__udivmoddi4+0x21e>
    8c40:	1a8d      	subs	r5, r1, r2
    8c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8c46:	b297      	uxth	r7, r2
    8c48:	2101      	movs	r1, #1
    8c4a:	fbb5 f2fe 	udiv	r2, r5, lr
    8c4e:	fb0e 5012 	mls	r0, lr, r2, r5
    8c52:	0c25      	lsrs	r5, r4, #16
    8c54:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    8c58:	fb07 f002 	mul.w	r0, r7, r2
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d90f      	bls.n	8c80 <__udivmoddi4+0x124>
    8c60:	eb1c 0505 	adds.w	r5, ip, r5
    8c64:	f102 38ff 	add.w	r8, r2, #4294967295
    8c68:	bf2c      	ite	cs
    8c6a:	f04f 0901 	movcs.w	r9, #1
    8c6e:	f04f 0900 	movcc.w	r9, #0
    8c72:	42a8      	cmp	r0, r5
    8c74:	d903      	bls.n	8c7e <__udivmoddi4+0x122>
    8c76:	f1b9 0f00 	cmp.w	r9, #0
    8c7a:	f000 80ce 	beq.w	8e1a <__udivmoddi4+0x2be>
    8c7e:	4642      	mov	r2, r8
    8c80:	1a2d      	subs	r5, r5, r0
    8c82:	b2a4      	uxth	r4, r4
    8c84:	fbb5 f0fe 	udiv	r0, r5, lr
    8c88:	fb0e 5510 	mls	r5, lr, r0, r5
    8c8c:	fb00 f707 	mul.w	r7, r0, r7
    8c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    8c94:	42a7      	cmp	r7, r4
    8c96:	d908      	bls.n	8caa <__udivmoddi4+0x14e>
    8c98:	eb1c 0404 	adds.w	r4, ip, r4
    8c9c:	f100 35ff 	add.w	r5, r0, #4294967295
    8ca0:	d202      	bcs.n	8ca8 <__udivmoddi4+0x14c>
    8ca2:	42a7      	cmp	r7, r4
    8ca4:	f200 80b3 	bhi.w	8e0e <__udivmoddi4+0x2b2>
    8ca8:	4628      	mov	r0, r5
    8caa:	1be4      	subs	r4, r4, r7
    8cac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    8cb0:	e79d      	b.n	8bee <__udivmoddi4+0x92>
    8cb2:	f1c1 0720 	rsb	r7, r1, #32
    8cb6:	408b      	lsls	r3, r1
    8cb8:	fa05 f401 	lsl.w	r4, r5, r1
    8cbc:	fa22 fc07 	lsr.w	ip, r2, r7
    8cc0:	40fd      	lsrs	r5, r7
    8cc2:	408a      	lsls	r2, r1
    8cc4:	ea4c 0c03 	orr.w	ip, ip, r3
    8cc8:	fa20 f307 	lsr.w	r3, r0, r7
    8ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    8cd0:	431c      	orrs	r4, r3
    8cd2:	fa1f fe8c 	uxth.w	lr, ip
    8cd6:	fa00 f301 	lsl.w	r3, r0, r1
    8cda:	0c20      	lsrs	r0, r4, #16
    8cdc:	fbb5 f8f9 	udiv	r8, r5, r9
    8ce0:	fb09 5518 	mls	r5, r9, r8, r5
    8ce4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    8ce8:	fb08 f00e 	mul.w	r0, r8, lr
    8cec:	42a8      	cmp	r0, r5
    8cee:	d90f      	bls.n	8d10 <__udivmoddi4+0x1b4>
    8cf0:	eb1c 0505 	adds.w	r5, ip, r5
    8cf4:	f108 3aff 	add.w	sl, r8, #4294967295
    8cf8:	bf2c      	ite	cs
    8cfa:	f04f 0b01 	movcs.w	fp, #1
    8cfe:	f04f 0b00 	movcc.w	fp, #0
    8d02:	42a8      	cmp	r0, r5
    8d04:	d903      	bls.n	8d0e <__udivmoddi4+0x1b2>
    8d06:	f1bb 0f00 	cmp.w	fp, #0
    8d0a:	f000 808c 	beq.w	8e26 <__udivmoddi4+0x2ca>
    8d0e:	46d0      	mov	r8, sl
    8d10:	1a2d      	subs	r5, r5, r0
    8d12:	b2a4      	uxth	r4, r4
    8d14:	fbb5 f0f9 	udiv	r0, r5, r9
    8d18:	fb09 5510 	mls	r5, r9, r0, r5
    8d1c:	fb00 fe0e 	mul.w	lr, r0, lr
    8d20:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    8d24:	45ae      	cmp	lr, r5
    8d26:	d907      	bls.n	8d38 <__udivmoddi4+0x1dc>
    8d28:	eb1c 0505 	adds.w	r5, ip, r5
    8d2c:	f100 34ff 	add.w	r4, r0, #4294967295
    8d30:	d201      	bcs.n	8d36 <__udivmoddi4+0x1da>
    8d32:	45ae      	cmp	lr, r5
    8d34:	d87e      	bhi.n	8e34 <__udivmoddi4+0x2d8>
    8d36:	4620      	mov	r0, r4
    8d38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    8d3c:	eba5 050e 	sub.w	r5, r5, lr
    8d40:	fba0 9802 	umull	r9, r8, r0, r2
    8d44:	4545      	cmp	r5, r8
    8d46:	464c      	mov	r4, r9
    8d48:	46c6      	mov	lr, r8
    8d4a:	d302      	bcc.n	8d52 <__udivmoddi4+0x1f6>
    8d4c:	d106      	bne.n	8d5c <__udivmoddi4+0x200>
    8d4e:	454b      	cmp	r3, r9
    8d50:	d204      	bcs.n	8d5c <__udivmoddi4+0x200>
    8d52:	3801      	subs	r0, #1
    8d54:	ebb9 0402 	subs.w	r4, r9, r2
    8d58:	eb68 0e0c 	sbc.w	lr, r8, ip
    8d5c:	2e00      	cmp	r6, #0
    8d5e:	d06f      	beq.n	8e40 <__udivmoddi4+0x2e4>
    8d60:	1b1a      	subs	r2, r3, r4
    8d62:	eb65 050e 	sbc.w	r5, r5, lr
    8d66:	fa22 f301 	lsr.w	r3, r2, r1
    8d6a:	fa05 f707 	lsl.w	r7, r5, r7
    8d6e:	40cd      	lsrs	r5, r1
    8d70:	2100      	movs	r1, #0
    8d72:	431f      	orrs	r7, r3
    8d74:	e9c6 7500 	strd	r7, r5, [r6]
    8d78:	e73e      	b.n	8bf8 <__udivmoddi4+0x9c>
    8d7a:	fa02 fc03 	lsl.w	ip, r2, r3
    8d7e:	f1c3 0020 	rsb	r0, r3, #32
    8d82:	fa01 f203 	lsl.w	r2, r1, r3
    8d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    8d8a:	40c1      	lsrs	r1, r0
    8d8c:	fa24 f500 	lsr.w	r5, r4, r0
    8d90:	fa1f f78c 	uxth.w	r7, ip
    8d94:	409c      	lsls	r4, r3
    8d96:	4315      	orrs	r5, r2
    8d98:	fbb1 f0fe 	udiv	r0, r1, lr
    8d9c:	0c2a      	lsrs	r2, r5, #16
    8d9e:	fb0e 1110 	mls	r1, lr, r0, r1
    8da2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8da6:	fb00 f107 	mul.w	r1, r0, r7
    8daa:	4291      	cmp	r1, r2
    8dac:	d90e      	bls.n	8dcc <__udivmoddi4+0x270>
    8dae:	eb1c 0202 	adds.w	r2, ip, r2
    8db2:	f100 38ff 	add.w	r8, r0, #4294967295
    8db6:	bf2c      	ite	cs
    8db8:	f04f 0901 	movcs.w	r9, #1
    8dbc:	f04f 0900 	movcc.w	r9, #0
    8dc0:	4291      	cmp	r1, r2
    8dc2:	d902      	bls.n	8dca <__udivmoddi4+0x26e>
    8dc4:	f1b9 0f00 	cmp.w	r9, #0
    8dc8:	d031      	beq.n	8e2e <__udivmoddi4+0x2d2>
    8dca:	4640      	mov	r0, r8
    8dcc:	1a52      	subs	r2, r2, r1
    8dce:	b2ad      	uxth	r5, r5
    8dd0:	fbb2 f1fe 	udiv	r1, r2, lr
    8dd4:	fb0e 2211 	mls	r2, lr, r1, r2
    8dd8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    8ddc:	fb01 f207 	mul.w	r2, r1, r7
    8de0:	42aa      	cmp	r2, r5
    8de2:	d907      	bls.n	8df4 <__udivmoddi4+0x298>
    8de4:	eb1c 0505 	adds.w	r5, ip, r5
    8de8:	f101 38ff 	add.w	r8, r1, #4294967295
    8dec:	d201      	bcs.n	8df2 <__udivmoddi4+0x296>
    8dee:	42aa      	cmp	r2, r5
    8df0:	d823      	bhi.n	8e3a <__udivmoddi4+0x2de>
    8df2:	4641      	mov	r1, r8
    8df4:	1aad      	subs	r5, r5, r2
    8df6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8dfa:	e726      	b.n	8c4a <__udivmoddi4+0xee>
    8dfc:	4631      	mov	r1, r6
    8dfe:	4630      	mov	r0, r6
    8e00:	e6fa      	b.n	8bf8 <__udivmoddi4+0x9c>
    8e02:	1a84      	subs	r4, r0, r2
    8e04:	eb65 0303 	sbc.w	r3, r5, r3
    8e08:	2001      	movs	r0, #1
    8e0a:	461f      	mov	r7, r3
    8e0c:	e70c      	b.n	8c28 <__udivmoddi4+0xcc>
    8e0e:	4464      	add	r4, ip
    8e10:	3802      	subs	r0, #2
    8e12:	e74a      	b.n	8caa <__udivmoddi4+0x14e>
    8e14:	4464      	add	r4, ip
    8e16:	3802      	subs	r0, #2
    8e18:	e6e4      	b.n	8be4 <__udivmoddi4+0x88>
    8e1a:	3a02      	subs	r2, #2
    8e1c:	4465      	add	r5, ip
    8e1e:	e72f      	b.n	8c80 <__udivmoddi4+0x124>
    8e20:	3902      	subs	r1, #2
    8e22:	4462      	add	r2, ip
    8e24:	e6c9      	b.n	8bba <__udivmoddi4+0x5e>
    8e26:	f1a8 0802 	sub.w	r8, r8, #2
    8e2a:	4465      	add	r5, ip
    8e2c:	e770      	b.n	8d10 <__udivmoddi4+0x1b4>
    8e2e:	3802      	subs	r0, #2
    8e30:	4462      	add	r2, ip
    8e32:	e7cb      	b.n	8dcc <__udivmoddi4+0x270>
    8e34:	3802      	subs	r0, #2
    8e36:	4465      	add	r5, ip
    8e38:	e77e      	b.n	8d38 <__udivmoddi4+0x1dc>
    8e3a:	3902      	subs	r1, #2
    8e3c:	4465      	add	r5, ip
    8e3e:	e7d9      	b.n	8df4 <__udivmoddi4+0x298>
    8e40:	4631      	mov	r1, r6
    8e42:	e6d9      	b.n	8bf8 <__udivmoddi4+0x9c>

00008e44 <__aeabi_idiv0>:
    8e44:	4770      	bx	lr
    8e46:	bf00      	nop

00008e48 <_ZN7dataCSC9calcSpeedEv>:
    }

    return retVal;
}

uint16_t dataCSC::calcSpeed() {
    8e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e4c:	4605      	mov	r5, r0
    if (nbrRevSpeed < 0)
    {
        nbrRevSpeed = maxVal - oldSumRevSpeed + sumRevSpeed;
    }

    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e4e:	8900      	ldrh	r0, [r0, #8]
    8e50:	896b      	ldrh	r3, [r5, #10]
    8e52:	4298      	cmp	r0, r3
    8e54:	d047      	beq.n	8ee6 <_ZN7dataCSC9calcSpeedEv+0x9e>
    uint16_t nbrRevSpeed = sumRevSpeed - oldSumRevSpeed;
    8e56:	f8b5 a000 	ldrh.w	sl, [r5]
    8e5a:	f8b5 9002 	ldrh.w	r9, [r5, #2]
    8e5e:	ebaa 0409 	sub.w	r4, sl, r9
    8e62:	b2a4      	uxth	r4, r4
    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e64:	b1f4      	cbz	r4, 8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    {
        wheelCircumference = wheelDiameter;
        wheelCircumference = (wheelDiameter) * 3.1415;
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e66:	eba0 0803 	sub.w	r8, r0, r3
    8e6a:	4640      	mov	r0, r8
    8e6c:	f7ff fb3a 	bl	84e4 <__aeabi_i2d>
    8e70:	2200      	movs	r2, #0
    8e72:	4b21      	ldr	r3, [pc, #132]	; (8ef8 <_ZN7dataCSC9calcSpeedEv+0xb0>)
    8e74:	f7ff fba0 	bl	85b8 <__aeabi_dmul>
        double oldSpeed = speed;

        if (time < 0)
    8e78:	2200      	movs	r2, #0
    8e7a:	2300      	movs	r3, #0
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e7c:	4606      	mov	r6, r0
    8e7e:	460f      	mov	r7, r1
        if (time < 0)
    8e80:	f7ff fe0c 	bl	8a9c <__aeabi_dcmplt>
    8e84:	b138      	cbz	r0, 8e96 <_ZN7dataCSC9calcSpeedEv+0x4e>
        {
            time = (0xffff - oldLastEventSpeed + lastEventSpeed)/1024;
    8e86:	f508 407f 	add.w	r0, r8, #65280	; 0xff00
    8e8a:	30ff      	adds	r0, #255	; 0xff
    8e8c:	1280      	asrs	r0, r0, #10
    8e8e:	f7ff fb29 	bl	84e4 <__aeabi_i2d>
    8e92:	4606      	mov	r6, r0
    8e94:	460f      	mov	r7, r1
        }
        if (sumRevSpeed == oldSumRevSpeed)
    8e96:	45ca      	cmp	sl, r9
    8e98:	d107      	bne.n	8eaa <_ZN7dataCSC9calcSpeedEv+0x62>
        {
            return (uint16_t) oldSpeed;
    8e9a:	e9d5 010a 	ldrd	r0, r1, [r5, #40]	; 0x28
            //rpm_speed = time/nbrRevSpeed *60;
            //printk("rpm1%d\n",rpm_speed);
            rpm_speed = (nbrRevSpeed) * 60 / time;
            //printk("rpm2%d\n",rpm_speed);
            speed = rpm_speed * wheelCircumference;
            retVal = (uint16_t) (speed);
    8e9e:	f7ff fe25 	bl	8aec <__aeabi_d2uiz>
    8ea2:	b284      	uxth	r4, r0
            return retVal;
        }  
    }
    return 0;
    8ea4:	4620      	mov	r0, r4
    8ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eaa:	203c      	movs	r0, #60	; 0x3c
        wheelCircumference = wheelDiameter;
    8eac:	e9d5 8906 	ldrd	r8, r9, [r5, #24]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eb0:	4360      	muls	r0, r4
    8eb2:	f7ff fb17 	bl	84e4 <__aeabi_i2d>
    8eb6:	4632      	mov	r2, r6
    8eb8:	463b      	mov	r3, r7
    8eba:	f7ff fca7 	bl	880c <__aeabi_ddiv>
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ebe:	a30c      	add	r3, pc, #48	; (adr r3, 8ef0 <_ZN7dataCSC9calcSpeedEv+0xa8>)
    8ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8ec4:	4606      	mov	r6, r0
    8ec6:	460f      	mov	r7, r1
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ec8:	4640      	mov	r0, r8
    8eca:	4649      	mov	r1, r9
    8ecc:	f7ff fb74 	bl	85b8 <__aeabi_dmul>
    8ed0:	4602      	mov	r2, r0
    8ed2:	460b      	mov	r3, r1
            speed = rpm_speed * wheelCircumference;
    8ed4:	4630      	mov	r0, r6
    8ed6:	4639      	mov	r1, r7
    8ed8:	f7ff fb6e 	bl	85b8 <__aeabi_dmul>
    8edc:	4602      	mov	r2, r0
    8ede:	460b      	mov	r3, r1
    8ee0:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    8ee4:	e7db      	b.n	8e9e <_ZN7dataCSC9calcSpeedEv+0x56>
    return 0;
    8ee6:	2400      	movs	r4, #0
    8ee8:	e7dc      	b.n	8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    8eea:	bf00      	nop
    8eec:	f3af 8000 	nop.w
    8ef0:	c083126f 	.word	0xc083126f
    8ef4:	400921ca 	.word	0x400921ca
    8ef8:	3f500000 	.word	0x3f500000
    8efc:	00000000 	.word	0x00000000

00008f00 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth>:
{

    const uint8_t * buffer = (uint8_t *) buf;
    
    // len = 1 -> new diameter received - or diameter reset (when 0)
    if (len == 1)
    8f00:	2b01      	cmp	r3, #1
{
    8f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f06:	4607      	mov	r7, r0
    8f08:	4688      	mov	r8, r1
    8f0a:	4614      	mov	r4, r2
    8f0c:	461e      	mov	r6, r3
    if (len == 1)
    8f0e:	d125      	bne.n	8f5c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x5c>
    {
        diameter = (uint8_t ) *buffer;
    8f10:	7815      	ldrb	r5, [r2, #0]
    8f12:	4b4b      	ldr	r3, [pc, #300]	; (9040 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x140>)

        // check if last bit is '1', then add 0.5 to dia and convert it to cm
        if ((diameter & 0b10000000) == 0b10000000)
        {
            dia = (diameter + 0.5) * 2.54;
    8f14:	4628      	mov	r0, r5
        diameter = (uint8_t ) *buffer;
    8f16:	701d      	strb	r5, [r3, #0]
            dia = (diameter + 0.5) * 2.54;
    8f18:	f7ff fae4 	bl	84e4 <__aeabi_i2d>
        if ((diameter & 0b10000000) == 0b10000000)
    8f1c:	062b      	lsls	r3, r5, #24
    8f1e:	d503      	bpl.n	8f28 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x28>
            dia = (diameter + 0.5) * 2.54;
    8f20:	2200      	movs	r2, #0
    8f22:	4b48      	ldr	r3, [pc, #288]	; (9044 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x144>)
    8f24:	f7ff f992 	bl	824c <__adddf3>
        }
        else {
            dia = diameter * 2.54;
    8f28:	a343      	add	r3, pc, #268	; (adr r3, 9038 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x138>)
    8f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f2e:	f7ff fb43 	bl	85b8 <__aeabi_dmul>
    8f32:	4b45      	ldr	r3, [pc, #276]	; (9048 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x148>)
    8f34:	e9c3 0100 	strd	r0, r1, [r3]
        default:
            break;
        }
    }
    
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    8f38:	463a      	mov	r2, r7
    8f3a:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    8f3e:	4843      	ldr	r0, [pc, #268]	; (904c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x14c>)
    8f40:	f011 fb94 	bl	1a66c <printk>
    8f44:	2300      	movs	r3, #0
 
    for(uint8_t i = 0; i < len; i++){
        printk("%02X", buffer[i]);
    8f46:	4f42      	ldr	r7, [pc, #264]	; (9050 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x150>)
    for(uint8_t i = 0; i < len; i++){
    8f48:	1c5d      	adds	r5, r3, #1
    8f4a:	b2db      	uxtb	r3, r3
    8f4c:	42b3      	cmp	r3, r6
    8f4e:	da6c      	bge.n	902a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x12a>
        printk("%02X", buffer[i]);
    8f50:	5ce1      	ldrb	r1, [r4, r3]
    8f52:	4638      	mov	r0, r7
    8f54:	f011 fb8a 	bl	1a66c <printk>
    for(uint8_t i = 0; i < len; i++){
    8f58:	462b      	mov	r3, r5
    8f5a:	e7f5      	b.n	8f48 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x48>
    if (len == 19)
    8f5c:	2b13      	cmp	r3, #19
    8f5e:	d1eb      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
        nbrAddresses = (uint8_t) buffer[17];
    8f60:	7c53      	ldrb	r3, [r2, #17]
    8f62:	4a3c      	ldr	r2, [pc, #240]	; (9054 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x154>)
        infoSensors = (uint8_t) buffer[18];
    8f64:	7ca1      	ldrb	r1, [r4, #18]
        nbrAddresses = (uint8_t) buffer[17];
    8f66:	7013      	strb	r3, [r2, #0]
        infoSensors = (uint8_t) buffer[18];
    8f68:	4a3b      	ldr	r2, [pc, #236]	; (9058 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x158>)
        switch (nbrAddresses)
    8f6a:	2b02      	cmp	r3, #2
        infoSensors = (uint8_t) buffer[18];
    8f6c:	7011      	strb	r1, [r2, #0]
        switch (nbrAddresses)
    8f6e:	d00e      	beq.n	8f8e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x8e>
    8f70:	2b03      	cmp	r3, #3
    8f72:	d02e      	beq.n	8fd2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xd2>
    8f74:	2b01      	cmp	r3, #1
    8f76:	d1df      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8f78:	4a38      	ldr	r2, [pc, #224]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8f7a:	1e63      	subs	r3, r4, #1
    8f7c:	f104 0110 	add.w	r1, r4, #16
                uint8_t val = (uint8_t) buffer[i];
    8f80:	f813 0f01 	ldrb.w	r0, [r3, #1]!
            for (uint8_t i=0; i<17; i++)
    8f84:	4299      	cmp	r1, r3
                address1[i] = charToSave;
    8f86:	f802 0b01 	strb.w	r0, [r2], #1
            for (uint8_t i=0; i<17; i++)
    8f8a:	d1f9      	bne.n	8f80 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x80>
    8f8c:	e7d4      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8f8e:	4b34      	ldr	r3, [pc, #208]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8f90:	781d      	ldrb	r5, [r3, #0]
    8f92:	3501      	adds	r5, #1
    8f94:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8f96:	2d01      	cmp	r5, #1
            cntAddresses++;
    8f98:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8f9a:	d10a      	bne.n	8fb2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xb2>
    8f9c:	4a2f      	ldr	r2, [pc, #188]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8f9e:	1e63      	subs	r3, r4, #1
    8fa0:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fa4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fa8:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8faa:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fae:	d1f9      	bne.n	8fa4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xa4>
    8fb0:	e7c2      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    8fb2:	2d02      	cmp	r5, #2
    8fb4:	d1c0      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8fb6:	4a2b      	ldr	r2, [pc, #172]	; (9064 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    8fb8:	1e63      	subs	r3, r4, #1
    8fba:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fbe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fc2:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    8fc4:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fc8:	d1f9      	bne.n	8fbe <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xbe>
                cntAddresses = 0;
    8fca:	2200      	movs	r2, #0
    8fcc:	4b24      	ldr	r3, [pc, #144]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8fce:	701a      	strb	r2, [r3, #0]
    8fd0:	e7b2      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8fd2:	4b23      	ldr	r3, [pc, #140]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8fd4:	781d      	ldrb	r5, [r3, #0]
    8fd6:	3501      	adds	r5, #1
    8fd8:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8fda:	2d01      	cmp	r5, #1
            cntAddresses++;
    8fdc:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8fde:	d10a      	bne.n	8ff6 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xf6>
    8fe0:	4a1e      	ldr	r2, [pc, #120]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8fe2:	1e63      	subs	r3, r4, #1
    8fe4:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fe8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fec:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8fee:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8ff2:	d1f9      	bne.n	8fe8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xe8>
    8ff4:	e7a0      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    8ff6:	2d02      	cmp	r5, #2
    8ff8:	d10a      	bne.n	9010 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x110>
    8ffa:	4a1a      	ldr	r2, [pc, #104]	; (9064 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    8ffc:	1e63      	subs	r3, r4, #1
    8ffe:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9002:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9006:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    9008:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    900c:	d1f9      	bne.n	9002 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x102>
    900e:	e793      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            } else if (cntAddresses == 3)
    9010:	2d03      	cmp	r5, #3
    9012:	d191      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    9014:	4a14      	ldr	r2, [pc, #80]	; (9068 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x168>)
    9016:	1e63      	subs	r3, r4, #1
    9018:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    901c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9020:	428b      	cmp	r3, r1
                    address3[i] = charToSave;
    9022:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9026:	d1f9      	bne.n	901c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x11c>
    9028:	e7cf      	b.n	8fca <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xca>
    }
    printk("\n");
    902a:	4810      	ldr	r0, [pc, #64]	; (906c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x16c>)
    902c:	f011 fb1e 	bl	1a66c <printk>
 	return len;
}
    9030:	4630      	mov	r0, r6
    9032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9036:	bf00      	nop
    9038:	851eb852 	.word	0x851eb852
    903c:	400451eb 	.word	0x400451eb
    9040:	2000c4b2 	.word	0x2000c4b2
    9044:	3fe00000 	.word	0x3fe00000
    9048:	20008830 	.word	0x20008830
    904c:	0001f6d0 	.word	0x0001f6d0
    9050:	0001f6fc 	.word	0x0001f6fc
    9054:	2000c4b4 	.word	0x2000c4b4
    9058:	2000c4b3 	.word	0x2000c4b3
    905c:	2000c29e 	.word	0x2000c29e
    9060:	2000c2d1 	.word	0x2000c2d1
    9064:	2000c2af 	.word	0x2000c2af
    9068:	2000c2c0 	.word	0x2000c2c0
    906c:	00022920 	.word	0x00022920

00009070 <main>:
 */

#include "deviceManager.h"

void main(void)
{
    9070:	b500      	push	{lr}

	printk("Application start\n");
    9072:	4807      	ldr	r0, [pc, #28]	; (9090 <main+0x20>)
{
    9074:	b091      	sub	sp, #68	; 0x44
	printk("Application start\n");
    9076:	f011 faf9 	bl	1a66c <printk>

	// create a new device manager
	deviceManager dManager;
    907a:	4668      	mov	r0, sp
    907c:	f000 fa46 	bl	950c <_ZN13deviceManagerC1Ev>
	// start application as peripheral and central
	dManager.setDevice(true,true);
    9080:	2201      	movs	r2, #1
    9082:	4668      	mov	r0, sp
    9084:	4611      	mov	r1, r2
    9086:	f000 fcaf 	bl	99e8 <_ZN13deviceManager9setDeviceEbb>
    908a:	b011      	add	sp, #68	; 0x44
    908c:	f85d fb04 	ldr.w	pc, [sp], #4
    9090:	0001eff4 	.word	0x0001eff4

00009094 <_ZN13deviceManager13app_button_cbEv>:
    dk_set_led(USER_LED,led_state);
}

bool deviceManager::app_button_cb(void){
    return app_button_state;
}
    9094:	4b01      	ldr	r3, [pc, #4]	; (909c <_ZN13deviceManager13app_button_cbEv+0x8>)
    9096:	7818      	ldrb	r0, [r3, #0]
    9098:	4770      	bx	lr
    909a:	bf00      	nop
    909c:	2000c292 	.word	0x2000c292

000090a0 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv>:
}


void deviceManager::discovery_error_found(struct bt_conn *conn, int err, void *ctx)
{
	printk("The discovery procedure failed, err %d\n", err);
    90a0:	4801      	ldr	r0, [pc, #4]	; (90a8 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv+0x8>)
    90a2:	f011 bae3 	b.w	1a66c <printk>
    90a6:	bf00      	nop
    90a8:	0001f007 	.word	0x0001f007

000090ac <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv>:
}


void deviceManager::discoveryCompletedHR(struct bt_gatt_dm *dm, void *ctx) 
{
    90ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90ae:	4604      	mov	r4, r0
	const struct bt_gatt_dm_attr *gatt_desc;

	// subscribe CSC characteristic
	static struct bt_gatt_subscribe_params paramHR;

	struct bt_conn *conn = bt_gatt_dm_conn_get(dm);
    90b0:	f011 ff18 	bl	1aee4 <bt_gatt_dm_conn_get>
    90b4:	4607      	mov	r7, r0

	printk("The discovery procedure succeeded\n");
    90b6:	4821      	ldr	r0, [pc, #132]	; (913c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x90>)
    90b8:	f011 fad8 	bl	1a66c <printk>

	bt_gatt_dm_data_print(dm);

	/* Heart rate characteristic */
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_HRS_MEASUREMENT);
    90bc:	4620      	mov	r0, r4
    90be:	4920      	ldr	r1, [pc, #128]	; (9140 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x94>)
    90c0:	f003 faec 	bl	c69c <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    90c4:	4606      	mov	r6, r0
    90c6:	b920      	cbnz	r0, 90d2 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x26>
		printk("No heart rate measurement characteristic found\n");
    90c8:	481e      	ldr	r0, [pc, #120]	; (9144 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x98>)
	err = bt_gatt_dm_data_release(dm);
	if (err) {
		printk("Could not release the discovery data (err %d)\n", err);
	}
	subscriptionDone = true;
}
    90ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printk("No heart rate CCC descriptor found. "
    90ce:	f011 bacd 	b.w	1a66c <printk>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    90d2:	4601      	mov	r1, r0
    90d4:	4a1c      	ldr	r2, [pc, #112]	; (9148 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x9c>)
    90d6:	4620      	mov	r0, r4
    90d8:	f011 ff53 	bl	1af82 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    90dc:	b908      	cbnz	r0, 90e2 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x36>
		printk("No heat rate measurement characteristic value found\n");
    90de:	481b      	ldr	r0, [pc, #108]	; (914c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa0>)
    90e0:	e7f3      	b.n	90ca <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1e>
	paramHR.value_handle = gatt_desc->handle;
    90e2:	8883      	ldrh	r3, [r0, #4]
    90e4:	4d1a      	ldr	r5, [pc, #104]	; (9150 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa4>)
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    90e6:	4631      	mov	r1, r6
    90e8:	4620      	mov	r0, r4
    90ea:	4a1a      	ldr	r2, [pc, #104]	; (9154 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa8>)
	paramHR.value_handle = gatt_desc->handle;
    90ec:	812b      	strh	r3, [r5, #8]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    90ee:	f011 ff48 	bl	1af82 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    90f2:	b908      	cbnz	r0, 90f8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x4c>
		printk("No heart rate CCC descriptor found. "
    90f4:	4818      	ldr	r0, [pc, #96]	; (9158 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xac>)
    90f6:	e7e8      	b.n	90ca <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1e>
	paramHR.notify = notify_HR;
    90f8:	4b18      	ldr	r3, [pc, #96]	; (915c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xb0>)
	err = bt_gatt_subscribe(conn, &paramHR);
    90fa:	4629      	mov	r1, r5
	paramHR.notify = notify_HR;
    90fc:	602b      	str	r3, [r5, #0]
	paramHR.value = BT_GATT_CCC_NOTIFY;
    90fe:	2301      	movs	r3, #1
    9100:	81ab      	strh	r3, [r5, #12]
	paramHR.ccc_handle = gatt_desc->handle;
    9102:	8883      	ldrh	r3, [r0, #4]
	err = bt_gatt_subscribe(conn, &paramHR);
    9104:	4638      	mov	r0, r7
	paramHR.ccc_handle = gatt_desc->handle;
    9106:	816b      	strh	r3, [r5, #10]
	err = bt_gatt_subscribe(conn, &paramHR);
    9108:	f00b fdb8 	bl	14c7c <bt_gatt_subscribe>
	if (err && err != -EALREADY) {
    910c:	4601      	mov	r1, r0
    910e:	b188      	cbz	r0, 9134 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x88>
    9110:	f110 0f45 	cmn.w	r0, #69	; 0x45
    9114:	d00e      	beq.n	9134 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x88>
		printk("Subscribe failed (err %d)\n", err);
    9116:	4812      	ldr	r0, [pc, #72]	; (9160 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xb4>)
    9118:	f011 faa8 	bl	1a66c <printk>
	err = bt_gatt_dm_data_release(dm);
    911c:	4620      	mov	r0, r4
    911e:	f011 ff42 	bl	1afa6 <bt_gatt_dm_data_release>
	if (err) {
    9122:	4601      	mov	r1, r0
    9124:	b110      	cbz	r0, 912c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x80>
		printk("Could not release the discovery data (err %d)\n", err);
    9126:	480f      	ldr	r0, [pc, #60]	; (9164 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xb8>)
    9128:	f011 faa0 	bl	1a66c <printk>
	subscriptionDone = true;
    912c:	2201      	movs	r2, #1
    912e:	4b0e      	ldr	r3, [pc, #56]	; (9168 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xbc>)
    9130:	701a      	strb	r2, [r3, #0]
}
    9132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printk("[SUBSCRIBED]\n");
    9134:	480d      	ldr	r0, [pc, #52]	; (916c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xc0>)
    9136:	f011 fa99 	bl	1a66c <printk>
    913a:	e7ef      	b.n	911c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x70>
    913c:	0001f02f 	.word	0x0001f02f
    9140:	0001ef4c 	.word	0x0001ef4c
    9144:	0001f052 	.word	0x0001f052
    9148:	0001ef50 	.word	0x0001ef50
    914c:	0001f082 	.word	0x0001f082
    9150:	2000a630 	.word	0x2000a630
    9154:	0001ef54 	.word	0x0001ef54
    9158:	0001f0b7 	.word	0x0001f0b7
    915c:	000091a1 	.word	0x000091a1
    9160:	0001f110 	.word	0x0001f110
    9164:	0001f139 	.word	0x0001f139
    9168:	2000c293 	.word	0x2000c293
    916c:	0001f12b 	.word	0x0001f12b

00009170 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv>:
void deviceManager::discovery_service_not_found(struct bt_conn *conn, void *ctx) {
    9170:	b513      	push	{r0, r1, r4, lr}
    9172:	4604      	mov	r4, r0
	printk("Service not found!\n");
    9174:	4808      	ldr	r0, [pc, #32]	; (9198 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x28>)
    9176:	f011 fa79 	bl	1a66c <printk>
	error[0] = 10;
    917a:	230a      	movs	r3, #10
    917c:	f88d 3004 	strb.w	r3, [sp, #4]
	data_service_send(peripheralConn,error, sizeof(error));
    9180:	4b06      	ldr	r3, [pc, #24]	; (919c <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x2c>)
    9182:	2201      	movs	r2, #1
    9184:	6818      	ldr	r0, [r3, #0]
    9186:	a901      	add	r1, sp, #4
    9188:	f000 ff1e 	bl	9fc8 <_Z17data_service_sendP7bt_connPKht>
	bt_conn_disconnect(conn,-5);
    918c:	21fb      	movs	r1, #251	; 0xfb
    918e:	4620      	mov	r0, r4
    9190:	f008 fb1e 	bl	117d0 <bt_conn_disconnect>
}
    9194:	b002      	add	sp, #8
    9196:	bd10      	pop	{r4, pc}
    9198:	0001f168 	.word	0x0001f168
    919c:	2000a618 	.word	0x2000a618

000091a0 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
	return BT_GATT_ITER_CONTINUE;
}

uint8_t deviceManager::notify_HR(struct bt_conn *conn,
		struct bt_gatt_subscribe_params *params,
		const void *data, uint16_t length) {
    91a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    91a2:	461d      	mov	r5, r3
	static bool onceHeartRate = true;
	static bool onceBatt = true;
	static uint16_t cntNbrReceived = 0;		
	uint8_t dataToSend[2];
	uint8_t batteryLevelToSend[4];
	dataToSend[0] = TYPE_HEARTRATE;
    91a4:	2303      	movs	r3, #3
    91a6:	f88d 3000 	strb.w	r3, [sp]
	uint8_t err = 0;

	if (sensorInfos == 5 && onceHeartRate)
    91aa:	4b2d      	ldr	r3, [pc, #180]	; (9260 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xc0>)
		const void *data, uint16_t length) {
    91ac:	460e      	mov	r6, r1
	if (sensorInfos == 5 && onceHeartRate)
    91ae:	7818      	ldrb	r0, [r3, #0]
		const void *data, uint16_t length) {
    91b0:	4614      	mov	r4, r2
	if (sensorInfos == 5 && onceHeartRate)
    91b2:	2805      	cmp	r0, #5
    91b4:	d10e      	bne.n	91d4 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x34>
    91b6:	4b2b      	ldr	r3, [pc, #172]	; (9264 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xc4>)
    91b8:	781a      	ldrb	r2, [r3, #0]
    91ba:	b15a      	cbz	r2, 91d4 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x34>
	{
		onceHeartRate = false;
    91bc:	2200      	movs	r2, #0
    91be:	701a      	strb	r2, [r3, #0]
		initBatteryManager(sensorInfos);
    91c0:	f001 f8f4 	bl	a3ac <initBatteryManager>
		err = gatt_discover_battery_service(centralConnections[0]);	
    91c4:	4b28      	ldr	r3, [pc, #160]	; (9268 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xc8>)
    91c6:	6818      	ldr	r0, [r3, #0]
    91c8:	f001 f8c8 	bl	a35c <gatt_discover_battery_service>
		if (err)
    91cc:	b110      	cbz	r0, 91d4 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x34>
		{
			printk("Error\n");
    91ce:	4827      	ldr	r0, [pc, #156]	; (926c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xcc>)
    91d0:	f011 fa4c 	bl	1a66c <printk>
		}
		
	}

	// get battery level every few minutes
	if (onceBatt || cntNbrReceived == 300)
    91d4:	4926      	ldr	r1, [pc, #152]	; (9270 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    91d6:	4a27      	ldr	r2, [pc, #156]	; (9274 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    91d8:	780b      	ldrb	r3, [r1, #0]
    91da:	b91b      	cbnz	r3, 91e4 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x44>
    91dc:	8813      	ldrh	r3, [r2, #0]
    91de:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    91e2:	d11e      	bne.n	9222 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x82>
	{
		onceBatt = false;
    91e4:	2300      	movs	r3, #0
		cntNbrReceived = 0;
		deviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    91e6:	2003      	movs	r0, #3
		onceBatt = false;
    91e8:	700b      	strb	r3, [r1, #0]
		cntNbrReceived = 0;
    91ea:	8013      	strh	r3, [r2, #0]
		deviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    91ec:	f001 f90c 	bl	a408 <getBatteryLevel>
    91f0:	4b21      	ldr	r3, [pc, #132]	; (9278 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>)
		batteryLevelToSend[0] = TYPE_BATTERY;
    91f2:	2204      	movs	r2, #4
		deviceManager::data.battValue_heartRate = getBatteryLevel(TYPE_HEARTRATE);
    91f4:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
		batteryLevelToSend[1] = TYPE_HEARTRATE;
    91f8:	2303      	movs	r3, #3
    91fa:	f88d 3005 	strb.w	r3, [sp, #5]
		batteryLevelToSend[2] = deviceManager::data.battValue_heartRate;
		data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    91fe:	4b1f      	ldr	r3, [pc, #124]	; (927c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xdc>)
		batteryLevelToSend[2] = deviceManager::data.battValue_heartRate;
    9200:	f88d 0006 	strb.w	r0, [sp, #6]
		data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    9204:	eb0d 0102 	add.w	r1, sp, r2
    9208:	6818      	ldr	r0, [r3, #0]
		batteryLevelToSend[0] = TYPE_BATTERY;
    920a:	f88d 2004 	strb.w	r2, [sp, #4]
		data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    920e:	f000 fedb 	bl	9fc8 <_Z17data_service_sendP7bt_connPKht>
	else
	{
		cntNbrReceived++;
	}	
	
	if (!data) {
    9212:	b94c      	cbnz	r4, 9228 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x88>
		printk("[UNSUBSCRIBED]\n");
    9214:	481a      	ldr	r0, [pc, #104]	; (9280 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe0>)
    9216:	f011 fa29 	bl	1a66c <printk>
		params->value_handle = 0U;
		return BT_GATT_ITER_STOP;
    921a:	4620      	mov	r0, r4
		params->value_handle = 0U;
    921c:	8134      	strh	r4, [r6, #8]
	{
		printk("[NOTIFICATION] data %p length %u\n", data, length);
	}

	return BT_GATT_ITER_CONTINUE;
}
    921e:	b002      	add	sp, #8
    9220:	bd70      	pop	{r4, r5, r6, pc}
		cntNbrReceived++;
    9222:	3301      	adds	r3, #1
    9224:	8013      	strh	r3, [r2, #0]
    9226:	e7f4      	b.n	9212 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x72>
	if (length == 2) {
    9228:	2d02      	cmp	r5, #2
    922a:	d112      	bne.n	9252 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xb2>
		if (batterySubscriptionDone)
    922c:	4b15      	ldr	r3, [pc, #84]	; (9284 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe4>)
    922e:	781b      	ldrb	r3, [r3, #0]
    9230:	b16b      	cbz	r3, 924e <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xae>
			uint8_t hr_bpm = ((uint8_t *)data)[1];
    9232:	7861      	ldrb	r1, [r4, #1]
			deviceManager::data.heartRate = hr_bpm;
    9234:	4b10      	ldr	r3, [pc, #64]	; (9278 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>)
			printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    9236:	4814      	ldr	r0, [pc, #80]	; (9288 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe8>)
			deviceManager::data.heartRate = hr_bpm;
    9238:	7459      	strb	r1, [r3, #17]
			dataToSend[1] = hr_bpm;
    923a:	f88d 1001 	strb.w	r1, [sp, #1]
			printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    923e:	f011 fa15 	bl	1a66c <printk>
			data_service_send(peripheralConn,dataToSend,sizeof(dataToSend));
    9242:	4b0e      	ldr	r3, [pc, #56]	; (927c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xdc>)
    9244:	462a      	mov	r2, r5
    9246:	4669      	mov	r1, sp
    9248:	6818      	ldr	r0, [r3, #0]
    924a:	f000 febd 	bl	9fc8 <_Z17data_service_sendP7bt_connPKht>
	return BT_GATT_ITER_CONTINUE;
    924e:	2001      	movs	r0, #1
    9250:	e7e5      	b.n	921e <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7e>
		printk("[NOTIFICATION] data %p length %u\n", data, length);
    9252:	462a      	mov	r2, r5
    9254:	4621      	mov	r1, r4
    9256:	480d      	ldr	r0, [pc, #52]	; (928c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xec>)
    9258:	f011 fa08 	bl	1a66c <printk>
    925c:	e7f7      	b.n	924e <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xae>
    925e:	bf00      	nop
    9260:	2000c28e 	.word	0x2000c28e
    9264:	20008582 	.word	0x20008582
    9268:	2000a61c 	.word	0x2000a61c
    926c:	0001f17c 	.word	0x0001f17c
    9270:	20008583 	.word	0x20008583
    9274:	2000c164 	.word	0x2000c164
    9278:	200087f8 	.word	0x200087f8
    927c:	2000a618 	.word	0x2000a618
    9280:	0001f183 	.word	0x0001f183
    9284:	2000c295 	.word	0x2000c295
    9288:	0001f193 	.word	0x0001f193
    928c:	0001f1b5 	.word	0x0001f1b5

00009290 <_ZN13deviceManager13buttonChangedEjj>:
   	if (has_changed & USER_BUTTON) {
    9290:	07cb      	lsls	r3, r1, #31
void deviceManager::buttonChanged(uint32_t button_state, uint32_t has_changed){
    9292:	b510      	push	{r4, lr}
   	if (has_changed & USER_BUTTON) {
    9294:	d507      	bpl.n	92a6 <_ZN13deviceManager13buttonChangedEjj+0x16>
		bt_lbs_send_button_state(button_state);
    9296:	1e04      	subs	r4, r0, #0
    9298:	bf18      	it	ne
    929a:	2401      	movne	r4, #1
    929c:	4620      	mov	r0, r4
    929e:	f004 f847 	bl	d330 <bt_lbs_send_button_state>
		app_button_state = button_state ? true : false;
    92a2:	4b01      	ldr	r3, [pc, #4]	; (92a8 <_ZN13deviceManager13buttonChangedEjj+0x18>)
    92a4:	701c      	strb	r4, [r3, #0]
}
    92a6:	bd10      	pop	{r4, pc}
    92a8:	2000c292 	.word	0x2000c292

000092ac <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
			const void *data, uint16_t length) {
    92ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    92ae:	4611      	mov	r1, r2
	if (subscriptionDone)
    92b0:	4a67      	ldr	r2, [pc, #412]	; (9450 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a4>)
    92b2:	7812      	ldrb	r2, [r2, #0]
    92b4:	b32a      	cbz	r2, 9302 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x56>
		if (!batterySubscriptionDone)
    92b6:	4a67      	ldr	r2, [pc, #412]	; (9454 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a8>)
    92b8:	7810      	ldrb	r0, [r2, #0]
    92ba:	bb28      	cbnz	r0, 9308 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5c>
			if (cntBatterySubscriptions == nbrConnectionsCentral)
    92bc:	4c66      	ldr	r4, [pc, #408]	; (9458 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1ac>)
    92be:	4b67      	ldr	r3, [pc, #412]	; (945c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1b0>)
    92c0:	7821      	ldrb	r1, [r4, #0]
    92c2:	781b      	ldrb	r3, [r3, #0]
    92c4:	4299      	cmp	r1, r3
    92c6:	d102      	bne.n	92ce <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x22>
				batterySubscriptionDone = true;
    92c8:	2301      	movs	r3, #1
						cntNbrReceived2++;
    92ca:	7013      	strb	r3, [r2, #0]
    92cc:	e019      	b.n	9302 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x56>
				if (cnt2 == 0 || cnt2 == 7 || cnt2 == 14) 
    92ce:	4d64      	ldr	r5, [pc, #400]	; (9460 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1b4>)
    92d0:	782a      	ldrb	r2, [r5, #0]
    92d2:	2a0e      	cmp	r2, #14
    92d4:	d812      	bhi.n	92fc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x50>
    92d6:	f244 0381 	movw	r3, #16513	; 0x4081
    92da:	40d3      	lsrs	r3, r2
    92dc:	07db      	lsls	r3, r3, #31
    92de:	d50d      	bpl.n	92fc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x50>
					initBatteryManager(sensorInfos);
    92e0:	4b60      	ldr	r3, [pc, #384]	; (9464 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1b8>)
    92e2:	7818      	ldrb	r0, [r3, #0]
    92e4:	f001 f862 	bl	a3ac <initBatteryManager>
					err = gatt_discover_battery_service(centralConnections[cntBatterySubscriptions]);	
    92e8:	7822      	ldrb	r2, [r4, #0]
    92ea:	4b5f      	ldr	r3, [pc, #380]	; (9468 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1bc>)
    92ec:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    92f0:	f001 f834 	bl	a35c <gatt_discover_battery_service>
					if (err == 0)
    92f4:	b910      	cbnz	r0, 92fc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x50>
						cntBatterySubscriptions++;
    92f6:	7823      	ldrb	r3, [r4, #0]
    92f8:	3301      	adds	r3, #1
    92fa:	7023      	strb	r3, [r4, #0]
				cnt2++;
    92fc:	782b      	ldrb	r3, [r5, #0]
    92fe:	3301      	adds	r3, #1
    9300:	702b      	strb	r3, [r5, #0]
}
    9302:	2001      	movs	r0, #1
    9304:	b003      	add	sp, #12
    9306:	bd30      	pop	{r4, r5, pc}
			if (length > 0)
    9308:	2b00      	cmp	r3, #0
    930a:	d0fa      	beq.n	9302 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x56>
				deviceManager::data.saveData(data);
    930c:	4c57      	ldr	r4, [pc, #348]	; (946c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c0>)
    930e:	4620      	mov	r0, r4
    9310:	f000 fdd4 	bl	9ebc <_ZN7dataCSC8saveDataEPKv>
				if (getDiameter() != 0 && diameterSet == false)
    9314:	f000 fe82 	bl	a01c <_Z11getDiameterv>
    9318:	2200      	movs	r2, #0
    931a:	2300      	movs	r3, #0
    931c:	f7ff fbb4 	bl	8a88 <__aeabi_dcmpeq>
    9320:	2800      	cmp	r0, #0
    9322:	d146      	bne.n	93b2 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x106>
    9324:	4b52      	ldr	r3, [pc, #328]	; (9470 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c4>)
    9326:	781a      	ldrb	r2, [r3, #0]
    9328:	2a00      	cmp	r2, #0
    932a:	d142      	bne.n	93b2 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x106>
					diameterSet = true;
    932c:	2201      	movs	r2, #1
    932e:	701a      	strb	r2, [r3, #0]
					deviceManager::data.wheelDiameter = getDiameter();
    9330:	f000 fe74 	bl	a01c <_Z11getDiameterv>
    9334:	e9c4 0106 	strd	r0, r1, [r4, #24]
				if (deviceManager::data.type == TYPE_CSC_SPEED)
    9338:	7c25      	ldrb	r5, [r4, #16]
    933a:	2d01      	cmp	r5, #1
    933c:	d156      	bne.n	93ec <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x140>
					if (diameterSet)
    933e:	4b4c      	ldr	r3, [pc, #304]	; (9470 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c4>)
    9340:	781b      	ldrb	r3, [r3, #0]
    9342:	b1c3      	cbz	r3, 9376 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xca>
						uint16_t speed = deviceManager::data.calcSpeed();
    9344:	4849      	ldr	r0, [pc, #292]	; (946c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c0>)
    9346:	f7ff fd7f 	bl	8e48 <_ZN7dataCSC9calcSpeedEv>
						if (speed > 0)
    934a:	b1a0      	cbz	r0, 9376 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xca>
							dataToSend[1] = (uint8_t) (speed/100);	
    934c:	2164      	movs	r1, #100	; 0x64
    934e:	fbb0 f1f1 	udiv	r1, r0, r1
							dataToSend[0] = TYPE_CSC_SPEED;
    9352:	f88d 5000 	strb.w	r5, [sp]
							if (peripheralConn != nullptr)
    9356:	4d47      	ldr	r5, [pc, #284]	; (9474 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c8>)
							dataToSend[1] = (uint8_t) (speed/100);	
    9358:	b289      	uxth	r1, r1
							if (peripheralConn != nullptr)
    935a:	682b      	ldr	r3, [r5, #0]
							dataToSend[1] = (uint8_t) (speed/100);	
    935c:	f88d 1001 	strb.w	r1, [sp, #1]
							val_after_comma = (uint8_t) (speed);
    9360:	f88d 0002 	strb.w	r0, [sp, #2]
							if (peripheralConn != nullptr)
    9364:	b13b      	cbz	r3, 9376 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xca>
								printk("Speed: %d\n",speed/100);
    9366:	4844      	ldr	r0, [pc, #272]	; (9478 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1cc>)
    9368:	f011 f980 	bl	1a66c <printk>
								data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    936c:	2203      	movs	r2, #3
    936e:	4669      	mov	r1, sp
    9370:	6828      	ldr	r0, [r5, #0]
    9372:	f000 fe29 	bl	9fc8 <_Z17data_service_sendP7bt_connPKht>
					if (onceSpeed || cntNbrReceived1 == 50)
    9376:	4941      	ldr	r1, [pc, #260]	; (947c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1d0>)
    9378:	4841      	ldr	r0, [pc, #260]	; (9480 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1d4>)
    937a:	780b      	ldrb	r3, [r1, #0]
    937c:	b913      	cbnz	r3, 9384 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>
    937e:	7802      	ldrb	r2, [r0, #0]
    9380:	2a32      	cmp	r2, #50	; 0x32
    9382:	d125      	bne.n	93d0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x124>
						onceSpeed = false;
    9384:	2300      	movs	r3, #0
						cntNbrReceived1 = 0;
    9386:	7003      	strb	r3, [r0, #0]
						deviceManager::data.battValue_speed = getBatteryLevel(TYPE_CSC_SPEED);
    9388:	2001      	movs	r0, #1
						onceSpeed = false;
    938a:	700b      	strb	r3, [r1, #0]
						deviceManager::data.battValue_speed = getBatteryLevel(TYPE_CSC_SPEED);
    938c:	f001 f83c 	bl	a408 <getBatteryLevel>
						batteryLevelToSend[0] = TYPE_BATTERY;
    9390:	2204      	movs	r2, #4
						batteryLevelToSend[1] = TYPE_CSC_SPEED;
    9392:	2301      	movs	r3, #1
						deviceManager::data.battValue_speed = getBatteryLevel(TYPE_CSC_SPEED);
    9394:	f884 0020 	strb.w	r0, [r4, #32]
						batteryLevelToSend[0] = TYPE_BATTERY;
    9398:	f88d 2004 	strb.w	r2, [sp, #4]
						batteryLevelToSend[1] = TYPE_CSC_CADENCE;
    939c:	f88d 3005 	strb.w	r3, [sp, #5]
						data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    93a0:	4b34      	ldr	r3, [pc, #208]	; (9474 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c8>)
						batteryLevelToSend[2] = deviceManager::data.battValue_cadence;
    93a2:	f88d 0006 	strb.w	r0, [sp, #6]
						data_service_send(peripheralConn,batteryLevelToSend,sizeof(batteryLevelToSend));
    93a6:	eb0d 0102 	add.w	r1, sp, r2
    93aa:	6818      	ldr	r0, [r3, #0]
    93ac:	f000 fe0c 	bl	9fc8 <_Z17data_service_sendP7bt_connPKht>
    93b0:	e7a7      	b.n	9302 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x56>
				else if (getDiameter() == 0 && diameterSet == true)
    93b2:	f000 fe33 	bl	a01c <_Z11getDiameterv>
    93b6:	2200      	movs	r2, #0
    93b8:	2300      	movs	r3, #0
    93ba:	f7ff fb65 	bl	8a88 <__aeabi_dcmpeq>
    93be:	2800      	cmp	r0, #0
    93c0:	d0ba      	beq.n	9338 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x8c>
    93c2:	4b2b      	ldr	r3, [pc, #172]	; (9470 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c4>)
    93c4:	781a      	ldrb	r2, [r3, #0]
    93c6:	2a00      	cmp	r2, #0
    93c8:	d0b6      	beq.n	9338 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x8c>
					diameterSet = false;
    93ca:	2200      	movs	r2, #0
    93cc:	701a      	strb	r2, [r3, #0]
    93ce:	e7b3      	b.n	9338 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x8c>
					else if (waitCnt == 5)
    93d0:	492c      	ldr	r1, [pc, #176]	; (9484 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1d8>)
    93d2:	780b      	ldrb	r3, [r1, #0]
    93d4:	2b05      	cmp	r3, #5
						onceCadence = true;
    93d6:	bf05      	ittet	eq
    93d8:	2201      	moveq	r2, #1
    93da:	4b2b      	ldreq	r3, [pc, #172]	; (9488 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1dc>)
						cntNbrReceived1++;
    93dc:	3201      	addne	r2, #1
						onceCadence = true;
    93de:	701a      	strbeq	r2, [r3, #0]
						waitCnt++;
    93e0:	bf0e      	itee	eq
    93e2:	2306      	moveq	r3, #6
						waitCnt++;
    93e4:	3301      	addne	r3, #1
						cntNbrReceived1++;
    93e6:	7002      	strbne	r2, [r0, #0]
						waitCnt++;
    93e8:	700b      	strb	r3, [r1, #0]
    93ea:	e78a      	b.n	9302 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x56>
				else if (deviceManager::data.type == TYPE_CSC_CADENCE)
    93ec:	2d02      	cmp	r5, #2
    93ee:	d188      	bne.n	9302 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x56>
					if (diameterSet)
    93f0:	4b1f      	ldr	r3, [pc, #124]	; (9470 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c4>)
    93f2:	781b      	ldrb	r3, [r3, #0]
    93f4:	b1b3      	cbz	r3, 9424 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x178>
						uint16_t rpm = deviceManager::data.calcRPM();
    93f6:	481d      	ldr	r0, [pc, #116]	; (946c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c0>)
    93f8:	f000 fd82 	bl	9f00 <_ZN7dataCSC7calcRPMEv>
						if (rpm > 0)
    93fc:	4601      	mov	r1, r0
    93fe:	b188      	cbz	r0, 9424 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x178>
							dataToSend[0] = TYPE_CSC_CADENCE;	
    9400:	f88d 5000 	strb.w	r5, [sp]
							if (peripheralConn != nullptr)
    9404:	4d1b      	ldr	r5, [pc, #108]	; (9474 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1c8>)
							dataToSend[2] = (uint8_t) (rpm >> 8);	
    9406:	0a03      	lsrs	r3, r0, #8
    9408:	f88d 3002 	strb.w	r3, [sp, #2]
							if (peripheralConn != nullptr)
    940c:	682b      	ldr	r3, [r5, #0]
							dataToSend[1] = (uint8_t) rpm;
    940e:	f88d 0001 	strb.w	r0, [sp, #1]
							if (peripheralConn != nullptr)
    9412:	b13b      	cbz	r3, 9424 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x178>
								printk("Cadence rpm: %d\n",rpm);
    9414:	481d      	ldr	r0, [pc, #116]	; (948c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1e0>)
    9416:	f011 f929 	bl	1a66c <printk>
								data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    941a:	2203      	movs	r2, #3
    941c:	4669      	mov	r1, sp
    941e:	6828      	ldr	r0, [r5, #0]
    9420:	f000 fdd2 	bl	9fc8 <_Z17data_service_sendP7bt_connPKht>
					if (onceCadence || cntNbrReceived2 == 100)
    9424:	4918      	ldr	r1, [pc, #96]	; (9488 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1dc>)
    9426:	4a1a      	ldr	r2, [pc, #104]	; (9490 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1e4>)
    9428:	780b      	ldrb	r3, [r1, #0]
    942a:	b913      	cbnz	r3, 9432 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x186>
    942c:	7813      	ldrb	r3, [r2, #0]
    942e:	2b64      	cmp	r3, #100	; 0x64
    9430:	d10c      	bne.n	944c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a0>
						onceCadence = false;
    9432:	2300      	movs	r3, #0
						deviceManager::data.battValue_cadence = getBatteryLevel(TYPE_CSC_CADENCE);
    9434:	2002      	movs	r0, #2
						cntNbrReceived2 = 0;
    9436:	7013      	strb	r3, [r2, #0]
						onceCadence = false;
    9438:	700b      	strb	r3, [r1, #0]
						deviceManager::data.battValue_cadence = getBatteryLevel(TYPE_CSC_CADENCE);
    943a:	f000 ffe5 	bl	a408 <getBatteryLevel>
						batteryLevelToSend[0] = TYPE_BATTERY;
    943e:	2204      	movs	r2, #4
						batteryLevelToSend[1] = TYPE_CSC_CADENCE;
    9440:	2302      	movs	r3, #2
						deviceManager::data.battValue_cadence = getBatteryLevel(TYPE_CSC_CADENCE);
    9442:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
						batteryLevelToSend[0] = TYPE_BATTERY;
    9446:	f88d 2004 	strb.w	r2, [sp, #4]
						batteryLevelToSend[1] = TYPE_CSC_CADENCE;
    944a:	e7a7      	b.n	939c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xf0>
						cntNbrReceived2++;
    944c:	3301      	adds	r3, #1
    944e:	e73c      	b.n	92ca <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1e>
    9450:	2000c293 	.word	0x2000c293
    9454:	2000c295 	.word	0x2000c295
    9458:	2000c296 	.word	0x2000c296
    945c:	2000c294 	.word	0x2000c294
    9460:	2000c29b 	.word	0x2000c29b
    9464:	2000c28e 	.word	0x2000c28e
    9468:	2000a61c 	.word	0x2000a61c
    946c:	200087f8 	.word	0x200087f8
    9470:	2000c28d 	.word	0x2000c28d
    9474:	2000a618 	.word	0x2000a618
    9478:	0001f1d7 	.word	0x0001f1d7
    947c:	20008580 	.word	0x20008580
    9480:	2000c299 	.word	0x2000c299
    9484:	2000c29c 	.word	0x2000c29c
    9488:	2000c298 	.word	0x2000c298
    948c:	0001f1e2 	.word	0x0001f1e2
    9490:	2000c29a 	.word	0x2000c29a

00009494 <bt_addr_le_to_str.isra.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9494:	b5f0      	push	{r4, r5, r6, r7, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    9496:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9498:	b08b      	sub	sp, #44	; 0x2c
    949a:	4604      	mov	r4, r0
    949c:	460e      	mov	r6, r1
    949e:	4617      	mov	r7, r2
    94a0:	ad07      	add	r5, sp, #28
    94a2:	2b03      	cmp	r3, #3
    94a4:	d820      	bhi.n	94e8 <bt_addr_le_to_str.isra.0+0x54>
    94a6:	e8df f003 	tbb	[pc, r3]
    94aa:	1902      	.short	0x1902
    94ac:	1d1b      	.short	0x1d1b
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    94ae:	4911      	ldr	r1, [pc, #68]	; (94f4 <bt_addr_le_to_str.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    94b0:	4628      	mov	r0, r5
    94b2:	f012 fac5 	bl	1ba40 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    94b6:	7863      	ldrb	r3, [r4, #1]
    94b8:	4639      	mov	r1, r7
    94ba:	9304      	str	r3, [sp, #16]
    94bc:	78a3      	ldrb	r3, [r4, #2]
    94be:	4630      	mov	r0, r6
    94c0:	9303      	str	r3, [sp, #12]
    94c2:	78e3      	ldrb	r3, [r4, #3]
    94c4:	4a0c      	ldr	r2, [pc, #48]	; (94f8 <bt_addr_le_to_str.isra.0+0x64>)
    94c6:	9302      	str	r3, [sp, #8]
    94c8:	7923      	ldrb	r3, [r4, #4]
    94ca:	9505      	str	r5, [sp, #20]
    94cc:	9301      	str	r3, [sp, #4]
    94ce:	7963      	ldrb	r3, [r4, #5]
    94d0:	9300      	str	r3, [sp, #0]
    94d2:	79a3      	ldrb	r3, [r4, #6]
    94d4:	f011 f8d7 	bl	1a686 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    94d8:	b00b      	add	sp, #44	; 0x2c
    94da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    94dc:	4907      	ldr	r1, [pc, #28]	; (94fc <bt_addr_le_to_str.isra.0+0x68>)
    94de:	e7e7      	b.n	94b0 <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "public-id");
    94e0:	4907      	ldr	r1, [pc, #28]	; (9500 <bt_addr_le_to_str.isra.0+0x6c>)
    94e2:	e7e5      	b.n	94b0 <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "random-id");
    94e4:	4907      	ldr	r1, [pc, #28]	; (9504 <bt_addr_le_to_str.isra.0+0x70>)
    94e6:	e7e3      	b.n	94b0 <bt_addr_le_to_str.isra.0+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    94e8:	210a      	movs	r1, #10
    94ea:	4628      	mov	r0, r5
    94ec:	4a06      	ldr	r2, [pc, #24]	; (9508 <bt_addr_le_to_str.isra.0+0x74>)
    94ee:	f011 f8ca 	bl	1a686 <snprintk>
		break;
    94f2:	e7e0      	b.n	94b6 <bt_addr_le_to_str.isra.0+0x22>
    94f4:	0001f1f3 	.word	0x0001f1f3
    94f8:	0001f21c 	.word	0x0001f21c
    94fc:	0001f1fa 	.word	0x0001f1fa
    9500:	0001f201 	.word	0x0001f201
    9504:	0001f20b 	.word	0x0001f20b
    9508:	0001f215 	.word	0x0001f215

0000950c <_ZN13deviceManagerC1Ev>:
deviceManager::deviceManager(){
    950c:	b510      	push	{r4, lr}
    950e:	4604      	mov	r4, r0
    9510:	2214      	movs	r2, #20
    9512:	2100      	movs	r1, #0
    9514:	f012 fb19 	bl	1bb4a <memset>
    9518:	4b10      	ldr	r3, [pc, #64]	; (955c <_ZN13deviceManagerC1Ev+0x50>)
    951a:	4a11      	ldr	r2, [pc, #68]	; (9560 <_ZN13deviceManagerC1Ev+0x54>)
    951c:	6023      	str	r3, [r4, #0]
    951e:	4b11      	ldr	r3, [pc, #68]	; (9564 <_ZN13deviceManagerC1Ev+0x58>)
    9520:	e892 0003 	ldmia.w	r2, {r0, r1}
    9524:	6063      	str	r3, [r4, #4]
    9526:	4b10      	ldr	r3, [pc, #64]	; (9568 <_ZN13deviceManagerC1Ev+0x5c>)
    9528:	2224      	movs	r2, #36	; 0x24
    952a:	60a3      	str	r3, [r4, #8]
    952c:	4b0f      	ldr	r3, [pc, #60]	; (956c <_ZN13deviceManagerC1Ev+0x60>)
    952e:	60e3      	str	r3, [r4, #12]
    9530:	f104 0314 	add.w	r3, r4, #20
    9534:	e883 0003 	stmia.w	r3, {r0, r1}
    9538:	2100      	movs	r1, #0
    953a:	f104 001c 	add.w	r0, r4, #28
    953e:	f012 fb04 	bl	1bb4a <memset>
		centralConnections[i] = nullptr;
    9542:	2300      	movs	r3, #0
    9544:	4a0a      	ldr	r2, [pc, #40]	; (9570 <_ZN13deviceManagerC1Ev+0x64>)
}
    9546:	4620      	mov	r0, r4
		centralConnections[i] = nullptr;
    9548:	e9c2 3300 	strd	r3, r3, [r2]
    954c:	e9c2 3302 	strd	r3, r3, [r2, #8]
	connectedP = false;
    9550:	4a08      	ldr	r2, [pc, #32]	; (9574 <_ZN13deviceManagerC1Ev+0x68>)
    9552:	7013      	strb	r3, [r2, #0]
	connectedC = false;
    9554:	4a08      	ldr	r2, [pc, #32]	; (9578 <_ZN13deviceManagerC1Ev+0x6c>)
    9556:	7013      	strb	r3, [r2, #0]
}
    9558:	bd10      	pop	{r4, pc}
    955a:	bf00      	nop
    955c:	00009ab9 	.word	0x00009ab9
    9560:	0001e560 	.word	0x0001e560
    9564:	00009d01 	.word	0x00009d01
    9568:	0001a4fd 	.word	0x0001a4fd
    956c:	0001a501 	.word	0x0001a501
    9570:	2000a61c 	.word	0x2000a61c
    9574:	2000c28c 	.word	0x2000c28c
    9578:	2000c28b 	.word	0x2000c28b

0000957c <_ZN13deviceManager9getDeviceEv>:
    if(isCentral && isPeripheral){
    957c:	4a07      	ldr	r2, [pc, #28]	; (959c <_ZN13deviceManager9getDeviceEv+0x20>)
    957e:	4b08      	ldr	r3, [pc, #32]	; (95a0 <_ZN13deviceManager9getDeviceEv+0x24>)
    9580:	7812      	ldrb	r2, [r2, #0]
    9582:	781b      	ldrb	r3, [r3, #0]
    9584:	b122      	cbz	r2, 9590 <_ZN13deviceManager9getDeviceEv+0x14>
        return 1;
    9586:	2b00      	cmp	r3, #0
    9588:	bf14      	ite	ne
    958a:	2003      	movne	r0, #3
    958c:	2001      	moveq	r0, #1
    958e:	4770      	bx	lr
        return 0;
    9590:	2b00      	cmp	r3, #0
    9592:	bf14      	ite	ne
    9594:	2002      	movne	r0, #2
    9596:	2000      	moveq	r0, #0
}
    9598:	4770      	bx	lr
    959a:	bf00      	nop
    959c:	2000c297 	.word	0x2000c297
    95a0:	2000c28f 	.word	0x2000c28f

000095a4 <_ZN13deviceManager10initButtonEv>:
int deviceManager::initButton(){
    95a4:	b510      	push	{r4, lr}
    err = dk_buttons_init(buttonChanged);
    95a6:	4805      	ldr	r0, [pc, #20]	; (95bc <_ZN13deviceManager10initButtonEv+0x18>)
    95a8:	f00d f8d8 	bl	1675c <dk_buttons_init>
	if (err) {
    95ac:	4604      	mov	r4, r0
    95ae:	b118      	cbz	r0, 95b8 <_ZN13deviceManager10initButtonEv+0x14>
		printk("Cannot init buttons (err: %d)\n", err);
    95b0:	4601      	mov	r1, r0
    95b2:	4803      	ldr	r0, [pc, #12]	; (95c0 <_ZN13deviceManager10initButtonEv+0x1c>)
    95b4:	f011 f85a 	bl	1a66c <printk>
}
    95b8:	4620      	mov	r0, r4
    95ba:	bd10      	pop	{r4, pc}
    95bc:	00009291 	.word	0x00009291
    95c0:	0001f23f 	.word	0x0001f23f

000095c4 <_ZN13deviceManager16startAdvertisingEv>:
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    95c4:	2301      	movs	r3, #1
void deviceManager::startAdvertising() {
    95c6:	b507      	push	{r0, r1, r2, lr}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    95c8:	490b      	ldr	r1, [pc, #44]	; (95f8 <_ZN13deviceManager16startAdvertisingEv+0x34>)
    95ca:	9300      	str	r3, [sp, #0]
    95cc:	2202      	movs	r2, #2
    95ce:	4b0b      	ldr	r3, [pc, #44]	; (95fc <_ZN13deviceManager16startAdvertisingEv+0x38>)
    95d0:	480b      	ldr	r0, [pc, #44]	; (9600 <_ZN13deviceManager16startAdvertisingEv+0x3c>)
    95d2:	f007 f90f 	bl	107f4 <bt_le_adv_start>
	if (err) {
    95d6:	4601      	mov	r1, r0
    95d8:	b128      	cbz	r0, 95e6 <_ZN13deviceManager16startAdvertisingEv+0x22>
		printk("Advertising failed to start (err %d)\n", err);
    95da:	480a      	ldr	r0, [pc, #40]	; (9604 <_ZN13deviceManager16startAdvertisingEv+0x40>)
}
    95dc:	b003      	add	sp, #12
    95de:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Advertising failed to start (err %d)\n", err);
    95e2:	f011 b843 	b.w	1a66c <printk>
	printk("Advertising successfully started\n");
    95e6:	4808      	ldr	r0, [pc, #32]	; (9608 <_ZN13deviceManager16startAdvertisingEv+0x44>)
    95e8:	f011 f840 	bl	1a66c <printk>
	printk("Waiting for connection...\n");
    95ec:	4807      	ldr	r0, [pc, #28]	; (960c <_ZN13deviceManager16startAdvertisingEv+0x48>)
}
    95ee:	b003      	add	sp, #12
    95f0:	f85d eb04 	ldr.w	lr, [sp], #4
	printk("Waiting for connection...\n");
    95f4:	f011 b83a 	b.w	1a66c <printk>
    95f8:	0001e678 	.word	0x0001e678
    95fc:	0001e688 	.word	0x0001e688
    9600:	0001e5f8 	.word	0x0001e5f8
    9604:	0001f25e 	.word	0x0001f25e
    9608:	0001f284 	.word	0x0001f284
    960c:	0001f2a6 	.word	0x0001f2a6

00009610 <_ZN13deviceManager14initPeripheralEv>:
void deviceManager::initPeripheral(){
    9610:	b510      	push	{r4, lr}
    9612:	4604      	mov	r4, r0
    if(getDevice() == 3 || getDevice() == 2){
    9614:	f7ff ffb2 	bl	957c <_ZN13deviceManager9getDeviceEv>
    9618:	1e83      	subs	r3, r0, #2
    961a:	b2db      	uxtb	r3, r3
    961c:	2b01      	cmp	r3, #1
    961e:	d82d      	bhi.n	967c <_ZN13deviceManager14initPeripheralEv+0x6c>
        err = dk_leds_init();
    9620:	f00d f836 	bl	16690 <dk_leds_init>
        if (err) {
    9624:	4601      	mov	r1, r0
    9626:	b120      	cbz	r0, 9632 <_ZN13deviceManager14initPeripheralEv+0x22>
            printk("LEDs init failed (err %d)\n", err);
    9628:	4815      	ldr	r0, [pc, #84]	; (9680 <_ZN13deviceManager14initPeripheralEv+0x70>)
}
    962a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Button init failed (err %d)\n", err);
    962e:	f011 b81d 	b.w	1a66c <printk>
        err = initButton();
    9632:	f7ff ffb7 	bl	95a4 <_ZN13deviceManager10initButtonEv>
    9636:	4601      	mov	r1, r0
        if (err) {
    9638:	b108      	cbz	r0, 963e <_ZN13deviceManager14initPeripheralEv+0x2e>
            printk("Button init failed (err %d)\n", err);
    963a:	4812      	ldr	r0, [pc, #72]	; (9684 <_ZN13deviceManager14initPeripheralEv+0x74>)
    963c:	e7f5      	b.n	962a <_ZN13deviceManager14initPeripheralEv+0x1a>
        err = bt_enable(NULL);
    963e:	f006 fe3f 	bl	102c0 <bt_enable>
        if (err) {
    9642:	4601      	mov	r1, r0
    9644:	b108      	cbz	r0, 964a <_ZN13deviceManager14initPeripheralEv+0x3a>
            printk("Bluetooth init failed (err %d)\n", err);
    9646:	4810      	ldr	r0, [pc, #64]	; (9688 <_ZN13deviceManager14initPeripheralEv+0x78>)
    9648:	e7ef      	b.n	962a <_ZN13deviceManager14initPeripheralEv+0x1a>
        printk("Bluetooth initialized\n");
    964a:	4810      	ldr	r0, [pc, #64]	; (968c <_ZN13deviceManager14initPeripheralEv+0x7c>)
    964c:	f011 f80e 	bl	1a66c <printk>
		bt_conn_cb_register(&conn_callbacks);
    9650:	4620      	mov	r0, r4
    9652:	f007 fc93 	bl	10f7c <bt_conn_cb_register>
            settings_load();
    9656:	f011 fafe 	bl	1ac56 <settings_load>
        err = bt_lbs_init(&lbs_callbacs);
    965a:	f104 0014 	add.w	r0, r4, #20
    965e:	f003 fe5d 	bl	d31c <bt_lbs_init>
        if (err) {
    9662:	4601      	mov	r1, r0
    9664:	b108      	cbz	r0, 966a <_ZN13deviceManager14initPeripheralEv+0x5a>
			printk("Failed to init LBS (err:%d)\n", err);
    9666:	480a      	ldr	r0, [pc, #40]	; (9690 <_ZN13deviceManager14initPeripheralEv+0x80>)
    9668:	e7df      	b.n	962a <_ZN13deviceManager14initPeripheralEv+0x1a>
		err = data_service_init();
    966a:	f000 fc9b 	bl	9fa4 <_Z17data_service_initv>
		if (err) 
    966e:	4601      	mov	r1, r0
    9670:	2800      	cmp	r0, #0
    9672:	d1f8      	bne.n	9666 <_ZN13deviceManager14initPeripheralEv+0x56>
}
    9674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startAdvertising();
    9678:	f7ff bfa4 	b.w	95c4 <_ZN13deviceManager16startAdvertisingEv>
}
    967c:	bd10      	pop	{r4, pc}
    967e:	bf00      	nop
    9680:	0001f2c1 	.word	0x0001f2c1
    9684:	0001f2dc 	.word	0x0001f2dc
    9688:	0001f2f9 	.word	0x0001f2f9
    968c:	0001f319 	.word	0x0001f319
    9690:	0001f330 	.word	0x0001f330

00009694 <_ZN13deviceManager9startScanEv>:
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    9694:	2001      	movs	r0, #1
void deviceManager::startScan(){
    9696:	b508      	push	{r3, lr}
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    9698:	f003 fbd6 	bl	ce48 <bt_scan_start>
	if (err) {
    969c:	4601      	mov	r1, r0
    969e:	b110      	cbz	r0, 96a6 <_ZN13deviceManager9startScanEv+0x12>
		printk("Scanning failed to start, err %d\n", err);
    96a0:	4803      	ldr	r0, [pc, #12]	; (96b0 <_ZN13deviceManager9startScanEv+0x1c>)
    96a2:	f010 ffe3 	bl	1a66c <printk>
}
    96a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Scanning...\n");
    96aa:	4802      	ldr	r0, [pc, #8]	; (96b4 <_ZN13deviceManager9startScanEv+0x20>)
    96ac:	f010 bfde 	b.w	1a66c <printk>
    96b0:	0001f34d 	.word	0x0001f34d
    96b4:	0001f36f 	.word	0x0001f36f

000096b8 <_ZN13deviceManager8initScanEv>:
void deviceManager::initScan() {
    96b8:	b530      	push	{r4, r5, lr}
    96ba:	b089      	sub	sp, #36	; 0x24
	sensorInfos = getSensorInfos();
    96bc:	f000 fce4 	bl	a088 <_Z14getSensorInfosv>
    96c0:	4d2e      	ldr	r5, [pc, #184]	; (977c <_ZN13deviceManager8initScanEv+0xc4>)
	struct bt_le_scan_param scanParam = {
    96c2:	ab03      	add	r3, sp, #12
    96c4:	2214      	movs	r2, #20
    96c6:	2100      	movs	r1, #0
	sensorInfos = getSensorInfos();
    96c8:	7028      	strb	r0, [r5, #0]
    96ca:	4604      	mov	r4, r0
	struct bt_le_scan_param scanParam = {
    96cc:	4618      	mov	r0, r3
    96ce:	f012 fa3c 	bl	1bb4a <memset>
    96d2:	2201      	movs	r2, #1
    96d4:	f88d 200c 	strb.w	r2, [sp, #12]
    96d8:	9204      	str	r2, [sp, #16]
    96da:	4a29      	ldr	r2, [pc, #164]	; (9780 <_ZN13deviceManager8initScanEv+0xc8>)
	struct bt_scan_init_param scanInit = {
    96dc:	4929      	ldr	r1, [pc, #164]	; (9784 <_ZN13deviceManager8initScanEv+0xcc>)
	struct bt_le_scan_param scanParam = {
    96de:	9205      	str	r2, [sp, #20]
	struct bt_scan_init_param scanInit = {
    96e0:	2200      	movs	r2, #0
    96e2:	9102      	str	r1, [sp, #8]
    96e4:	9201      	str	r2, [sp, #4]
	};
    96e6:	9000      	str	r0, [sp, #0]
	if (sensorInfos != 0)
    96e8:	2c00      	cmp	r4, #0
    96ea:	d042      	beq.n	9772 <_ZN13deviceManager8initScanEv+0xba>
		if (once)
    96ec:	4b26      	ldr	r3, [pc, #152]	; (9788 <_ZN13deviceManager8initScanEv+0xd0>)
    96ee:	7819      	ldrb	r1, [r3, #0]
    96f0:	b141      	cbz	r1, 9704 <_ZN13deviceManager8initScanEv+0x4c>
			once = false;
    96f2:	701a      	strb	r2, [r3, #0]
			bt_le_scan_stop();
    96f4:	f007 fa80 	bl	10bf8 <bt_le_scan_stop>
			bt_scan_init(&scanInit);
    96f8:	4668      	mov	r0, sp
    96fa:	f003 fb73 	bl	cde4 <bt_scan_init>
			bt_scan_cb_register(&scan_cb);			
    96fe:	4823      	ldr	r0, [pc, #140]	; (978c <_ZN13deviceManager8initScanEv+0xd4>)
    9700:	f003 f998 	bl	ca34 <bt_scan_cb_register>
		bt_scan_filter_remove_all();
    9704:	f003 fa20 	bl	cb48 <bt_scan_filter_remove_all>
		switch (sensorInfos)
    9708:	782b      	ldrb	r3, [r5, #0]
    970a:	3b01      	subs	r3, #1
    970c:	2b04      	cmp	r3, #4
    970e:	d825      	bhi.n	975c <_ZN13deviceManager8initScanEv+0xa4>
    9710:	e8df f003 	tbb	[pc, r3]
    9714:	190f0d03 	.word	0x190f0d03
    9718:	22          	.byte	0x22
    9719:	00          	.byte	0x00
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    971a:	491d      	ldr	r1, [pc, #116]	; (9790 <_ZN13deviceManager8initScanEv+0xd8>)
    971c:	2003      	movs	r0, #3
    971e:	f003 f999 	bl	ca54 <bt_scan_filter_add>
				if (err) {
    9722:	b1d8      	cbz	r0, 975c <_ZN13deviceManager8initScanEv+0xa4>
					printk("Scanning filters cannot be set\n");
    9724:	481b      	ldr	r0, [pc, #108]	; (9794 <_ZN13deviceManager8initScanEv+0xdc>)
    9726:	f010 ffa1 	bl	1a66c <printk>
}
    972a:	b009      	add	sp, #36	; 0x24
    972c:	bd30      	pop	{r4, r5, pc}
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    972e:	491a      	ldr	r1, [pc, #104]	; (9798 <_ZN13deviceManager8initScanEv+0xe0>)
    9730:	e7f4      	b.n	971c <_ZN13deviceManager8initScanEv+0x64>
				if (nbrConnectionsCentral == 0 || nbrConnectionsCentral == 1)
    9732:	4b1a      	ldr	r3, [pc, #104]	; (979c <_ZN13deviceManager8initScanEv+0xe4>)
    9734:	781b      	ldrb	r3, [r3, #0]
    9736:	2b01      	cmp	r3, #1
    9738:	d801      	bhi.n	973e <_ZN13deviceManager8initScanEv+0x86>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    973a:	4919      	ldr	r1, [pc, #100]	; (97a0 <_ZN13deviceManager8initScanEv+0xe8>)
    973c:	e7ee      	b.n	971c <_ZN13deviceManager8initScanEv+0x64>
				else if (nbrConnectionsCentral == 2)
    973e:	2b02      	cmp	r3, #2
    9740:	d10c      	bne.n	975c <_ZN13deviceManager8initScanEv+0xa4>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    9742:	4918      	ldr	r1, [pc, #96]	; (97a4 <_ZN13deviceManager8initScanEv+0xec>)
    9744:	e7ea      	b.n	971c <_ZN13deviceManager8initScanEv+0x64>
				if (nbrConnectionsCentral == 0)
    9746:	4b15      	ldr	r3, [pc, #84]	; (979c <_ZN13deviceManager8initScanEv+0xe4>)
    9748:	781b      	ldrb	r3, [r3, #0]
    974a:	b90b      	cbnz	r3, 9750 <_ZN13deviceManager8initScanEv+0x98>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    974c:	4916      	ldr	r1, [pc, #88]	; (97a8 <_ZN13deviceManager8initScanEv+0xf0>)
    974e:	e7e5      	b.n	971c <_ZN13deviceManager8initScanEv+0x64>
				else if (nbrConnectionsCentral == 1)
    9750:	2b01      	cmp	r3, #1
    9752:	d103      	bne.n	975c <_ZN13deviceManager8initScanEv+0xa4>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    9754:	4915      	ldr	r1, [pc, #84]	; (97ac <_ZN13deviceManager8initScanEv+0xf4>)
    9756:	e7e1      	b.n	971c <_ZN13deviceManager8initScanEv+0x64>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_HRS);
    9758:	4915      	ldr	r1, [pc, #84]	; (97b0 <_ZN13deviceManager8initScanEv+0xf8>)
    975a:	e7df      	b.n	971c <_ZN13deviceManager8initScanEv+0x64>
		err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    975c:	2100      	movs	r1, #0
    975e:	2004      	movs	r0, #4
    9760:	f003 fa1e 	bl	cba0 <bt_scan_filter_enable>
		if (err) {
    9764:	b110      	cbz	r0, 976c <_ZN13deviceManager8initScanEv+0xb4>
			printk("Filters cannot be turned on\n");
    9766:	4813      	ldr	r0, [pc, #76]	; (97b4 <_ZN13deviceManager8initScanEv+0xfc>)
    9768:	f010 ff80 	bl	1a66c <printk>
		startScan();
    976c:	f7ff ff92 	bl	9694 <_ZN13deviceManager9startScanEv>
    9770:	e7db      	b.n	972a <_ZN13deviceManager8initScanEv+0x72>
		err = bt_le_scan_start(&scanParam, deviceFound);
    9772:	4911      	ldr	r1, [pc, #68]	; (97b8 <_ZN13deviceManager8initScanEv+0x100>)
    9774:	f007 f9dc 	bl	10b30 <bt_le_scan_start>
		if (err) {
    9778:	e7d7      	b.n	972a <_ZN13deviceManager8initScanEv+0x72>
    977a:	bf00      	nop
    977c:	2000c28e 	.word	0x2000c28e
    9780:	00300060 	.word	0x00300060
    9784:	0001ef14 	.word	0x0001ef14
    9788:	20008581 	.word	0x20008581
    978c:	20008170 	.word	0x20008170
    9790:	0001ef1c 	.word	0x0001ef1c
    9794:	0001f37c 	.word	0x0001f37c
    9798:	0001ef20 	.word	0x0001ef20
    979c:	2000c294 	.word	0x2000c294
    97a0:	0001ef24 	.word	0x0001ef24
    97a4:	0001ef28 	.word	0x0001ef28
    97a8:	0001ef2c 	.word	0x0001ef2c
    97ac:	0001ef30 	.word	0x0001ef30
    97b0:	0001ef34 	.word	0x0001ef34
    97b4:	0001f39c 	.word	0x0001f39c
    97b8:	0001a50b 	.word	0x0001a50b

000097bc <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv>:
void deviceManager::discoveryCompletedCSC(struct bt_gatt_dm *dm, void *ctx) {
    97bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!subscriptionDone)
    97be:	4e53      	ldr	r6, [pc, #332]	; (990c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x150>)
void deviceManager::discoveryCompletedCSC(struct bt_gatt_dm *dm, void *ctx) {
    97c0:	4604      	mov	r4, r0
	if (!subscriptionDone)
    97c2:	7833      	ldrb	r3, [r6, #0]
    97c4:	2b00      	cmp	r3, #0
    97c6:	d137      	bne.n	9838 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x7c>
		param.notify = onReceived;
    97c8:	4b51      	ldr	r3, [pc, #324]	; (9910 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x154>)
    97ca:	4f52      	ldr	r7, [pc, #328]	; (9914 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x158>)
		chrc = bt_gatt_dm_char_by_uuid(dm,BT_UUID_CSC_MEASUREMENT);
    97cc:	4952      	ldr	r1, [pc, #328]	; (9918 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x15c>)
		param.notify = onReceived;
    97ce:	603b      	str	r3, [r7, #0]
		chrc = bt_gatt_dm_char_by_uuid(dm,BT_UUID_CSC_MEASUREMENT);
    97d0:	f002 ff64 	bl	c69c <bt_gatt_dm_char_by_uuid>
		if (!chrc) {
    97d4:	4605      	mov	r5, r0
    97d6:	b970      	cbnz	r0, 97f6 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x3a>
			printk("Missing CSC measurement characteristic\n");
    97d8:	4850      	ldr	r0, [pc, #320]	; (991c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x160>)
			printk("Missing CSC measurement char CCC descriptor\n");
    97da:	f010 ff47 	bl	1a66c <printk>
			err = bt_gatt_dm_data_release(dm);
    97de:	4620      	mov	r0, r4
    97e0:	f011 fbe1 	bl	1afa6 <bt_gatt_dm_data_release>
			if (err) {
    97e4:	4601      	mov	r1, r0
    97e6:	2800      	cmp	r0, #0
    97e8:	d03f      	beq.n	986a <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xae>
				printk("Could not release discovery data, err: %d\n", err);
    97ea:	484d      	ldr	r0, [pc, #308]	; (9920 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x164>)
}
    97ec:	b003      	add	sp, #12
    97ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				printk("Could not release discovery data, err: %d\n", err);
    97f2:	f010 bf3b 	b.w	1a66c <printk>
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_CSC_MEASUREMENT);
    97f6:	4601      	mov	r1, r0
    97f8:	4a4a      	ldr	r2, [pc, #296]	; (9924 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x168>)
    97fa:	4620      	mov	r0, r4
    97fc:	f011 fbc1 	bl	1af82 <bt_gatt_dm_desc_by_uuid>
		if (!desc) {
    9800:	b908      	cbnz	r0, 9806 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x4a>
			printk("Missing CSC measurement char CCC descriptor\n");
    9802:	4849      	ldr	r0, [pc, #292]	; (9928 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x16c>)
    9804:	e7e9      	b.n	97da <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x1e>
		param.value_handle = desc->handle;
    9806:	8883      	ldrh	r3, [r0, #4]
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    9808:	4629      	mov	r1, r5
    980a:	4620      	mov	r0, r4
    980c:	4a47      	ldr	r2, [pc, #284]	; (992c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x170>)
		param.value_handle = desc->handle;
    980e:	813b      	strh	r3, [r7, #8]
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    9810:	f011 fbb7 	bl	1af82 <bt_gatt_dm_desc_by_uuid>
		if (!desc) {
    9814:	2800      	cmp	r0, #0
    9816:	d0f4      	beq.n	9802 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x46>
		param.ccc_handle = desc->handle;
    9818:	8883      	ldrh	r3, [r0, #4]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &param);
    981a:	4620      	mov	r0, r4
		param.ccc_handle = desc->handle;
    981c:	817b      	strh	r3, [r7, #10]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &param);
    981e:	f011 fb61 	bl	1aee4 <bt_gatt_dm_conn_get>
    9822:	4639      	mov	r1, r7
    9824:	f00b fa2a 	bl	14c7c <bt_gatt_subscribe>
		if (err) {
    9828:	4601      	mov	r1, r0
    982a:	b110      	cbz	r0, 9832 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x76>
			printk("Subscribtion failed (err %d)\n", err);
    982c:	4840      	ldr	r0, [pc, #256]	; (9930 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x174>)
    982e:	f010 ff1d 	bl	1a66c <printk>
		bt_gatt_dm_data_release(dm);
    9832:	4620      	mov	r0, r4
    9834:	f011 fbb7 	bl	1afa6 <bt_gatt_dm_data_release>
	switch (nbrConnectionsCentral)
    9838:	4b3e      	ldr	r3, [pc, #248]	; (9934 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x178>)
    983a:	781a      	ldrb	r2, [r3, #0]
    983c:	2a02      	cmp	r2, #2
    983e:	d030      	beq.n	98a2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xe6>
    9840:	2a03      	cmp	r2, #3
    9842:	d057      	beq.n	98f4 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x138>
    9844:	2a01      	cmp	r2, #1
    9846:	d110      	bne.n	986a <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xae>
		if (nbrAddresses == 1)
    9848:	4b3b      	ldr	r3, [pc, #236]	; (9938 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x17c>)
    984a:	781c      	ldrb	r4, [r3, #0]
    984c:	2c01      	cmp	r4, #1
    984e:	d10e      	bne.n	986e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xb2>
			connectedCode[0] = 14;
    9850:	230e      	movs	r3, #14
    9852:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9856:	4b39      	ldr	r3, [pc, #228]	; (993c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x180>)
    9858:	4622      	mov	r2, r4
    985a:	6818      	ldr	r0, [r3, #0]
    985c:	a901      	add	r1, sp, #4
    985e:	f000 fbb3 	bl	9fc8 <_Z17data_service_sendP7bt_connPKht>
			printk("Discovery completed\n");
    9862:	4837      	ldr	r0, [pc, #220]	; (9940 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x184>)
    9864:	f010 ff02 	bl	1a66c <printk>
			subscriptionDone = true;
    9868:	7034      	strb	r4, [r6, #0]
}
    986a:	b003      	add	sp, #12
    986c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (nbrAddresses == 2)	
    986e:	2c02      	cmp	r4, #2
    9870:	d10d      	bne.n	988e <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xd2>
			connectedCode[0] = 15;
    9872:	230f      	movs	r3, #15
    9874:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9878:	4b30      	ldr	r3, [pc, #192]	; (993c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x180>)
    987a:	a901      	add	r1, sp, #4
    987c:	6818      	ldr	r0, [r3, #0]
    987e:	f000 fba3 	bl	9fc8 <_Z17data_service_sendP7bt_connPKht>
			initScan();
    9882:	f7ff ff19 	bl	96b8 <_ZN13deviceManager8initScanEv>
			printk("First discovery completed\n");			
    9886:	482f      	ldr	r0, [pc, #188]	; (9944 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x188>)
    9888:	f010 fef0 	bl	1a66c <printk>
    988c:	e7ed      	b.n	986a <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xae>
		else if (nbrAddresses == 3)
    988e:	2c03      	cmp	r4, #3
    9890:	d1eb      	bne.n	986a <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xae>
			initScan();
    9892:	f7ff ff11 	bl	96b8 <_ZN13deviceManager8initScanEv>
			printk("First discovery completed\n");	
    9896:	482b      	ldr	r0, [pc, #172]	; (9944 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x188>)
}
    9898:	b003      	add	sp, #12
    989a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			printk("First discovery completed\n");	
    989e:	f010 bee5 	b.w	1a66c <printk>
		if (nbrAddresses == 2)
    98a2:	4b25      	ldr	r3, [pc, #148]	; (9938 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x17c>)
    98a4:	781b      	ldrb	r3, [r3, #0]
    98a6:	2b02      	cmp	r3, #2
    98a8:	d113      	bne.n	98d2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x116>
			connectedCode[0] = 16;
    98aa:	2310      	movs	r3, #16
    98ac:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn, connectedCode, sizeof(connectedCode));
    98b0:	4b22      	ldr	r3, [pc, #136]	; (993c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x180>)
    98b2:	2201      	movs	r2, #1
    98b4:	6818      	ldr	r0, [r3, #0]
    98b6:	a901      	add	r1, sp, #4
    98b8:	f000 fb86 	bl	9fc8 <_Z17data_service_sendP7bt_connPKht>
			printk("Second discovery completed\n");
    98bc:	4822      	ldr	r0, [pc, #136]	; (9948 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x18c>)
			printk("Third discovery completed\n");
    98be:	f010 fed5 	bl	1a66c <printk>
			dk_set_led_on(CON_STATUS_LED_CENTRAL);
    98c2:	2001      	movs	r0, #1
    98c4:	f013 fe43 	bl	1d54e <dk_set_led_on>
			connectedC = true;	
    98c8:	2301      	movs	r3, #1
    98ca:	4a20      	ldr	r2, [pc, #128]	; (994c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x190>)
			subscriptionDone = true;		
    98cc:	7033      	strb	r3, [r6, #0]
			connectedC = true;	
    98ce:	7013      	strb	r3, [r2, #0]
		break;
    98d0:	e7cb      	b.n	986a <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xae>
		else if (nbrAddresses == 3) 
    98d2:	2b03      	cmp	r3, #3
    98d4:	d1c9      	bne.n	986a <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xae>
			connectedCode[0] = 17;
    98d6:	2311      	movs	r3, #17
    98d8:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    98dc:	4b17      	ldr	r3, [pc, #92]	; (993c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x180>)
    98de:	2201      	movs	r2, #1
    98e0:	6818      	ldr	r0, [r3, #0]
    98e2:	a901      	add	r1, sp, #4
    98e4:	f000 fb70 	bl	9fc8 <_Z17data_service_sendP7bt_connPKht>
			printk("Second discovery completed\n");		
    98e8:	4817      	ldr	r0, [pc, #92]	; (9948 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x18c>)
    98ea:	f010 febf 	bl	1a66c <printk>
			initScan();
    98ee:	f7ff fee3 	bl	96b8 <_ZN13deviceManager8initScanEv>
    98f2:	e7ba      	b.n	986a <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xae>
			connectedCode[0] = 18;
    98f4:	2312      	movs	r3, #18
    98f6:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    98fa:	4b10      	ldr	r3, [pc, #64]	; (993c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x180>)
    98fc:	2201      	movs	r2, #1
    98fe:	6818      	ldr	r0, [r3, #0]
    9900:	a901      	add	r1, sp, #4
    9902:	f000 fb61 	bl	9fc8 <_Z17data_service_sendP7bt_connPKht>
			printk("Third discovery completed\n");
    9906:	4812      	ldr	r0, [pc, #72]	; (9950 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x194>)
    9908:	e7d9      	b.n	98be <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x102>
    990a:	bf00      	nop
    990c:	2000c293 	.word	0x2000c293
    9910:	000092ad 	.word	0x000092ad
    9914:	20008158 	.word	0x20008158
    9918:	0001ef40 	.word	0x0001ef40
    991c:	0001f3b9 	.word	0x0001f3b9
    9920:	0001f3e1 	.word	0x0001f3e1
    9924:	0001ef44 	.word	0x0001ef44
    9928:	0001f40c 	.word	0x0001f40c
    992c:	0001ef48 	.word	0x0001ef48
    9930:	0001f439 	.word	0x0001f439
    9934:	2000c294 	.word	0x2000c294
    9938:	2000c290 	.word	0x2000c290
    993c:	2000a618 	.word	0x2000a618
    9940:	0001f457 	.word	0x0001f457
    9944:	0001f46c 	.word	0x0001f46c
    9948:	0001f487 	.word	0x0001f487
    994c:	2000c28b 	.word	0x2000c28b
    9950:	0001f4a3 	.word	0x0001f4a3

00009954 <_ZN13deviceManager11initCentralEv>:
void deviceManager::initCentral(){
    9954:	b510      	push	{r4, lr}
    9956:	4604      	mov	r4, r0
	printk("Init Central\n");
    9958:	481c      	ldr	r0, [pc, #112]	; (99cc <_ZN13deviceManager11initCentralEv+0x78>)
    995a:	f010 fe87 	bl	1a66c <printk>
	if (getDevice() == 1 || getDevice() == 3)
    995e:	f7ff fe0d 	bl	957c <_ZN13deviceManager9getDeviceEv>
    9962:	2801      	cmp	r0, #1
    9964:	d00a      	beq.n	997c <_ZN13deviceManager11initCentralEv+0x28>
    9966:	2803      	cmp	r0, #3
    9968:	d12f      	bne.n	99ca <_ZN13deviceManager11initCentralEv+0x76>
		bt_conn_cb_register(&conn_callbacks);
    996a:	4620      	mov	r0, r4
    996c:	f007 fb06 	bl	10f7c <bt_conn_cb_register>
		initScan();
    9970:	f7ff fea2 	bl	96b8 <_ZN13deviceManager8initScanEv>
}
    9974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startScan();	
    9978:	f7ff be8c 	b.w	9694 <_ZN13deviceManager9startScanEv>
			err = bt_enable(nullptr);
    997c:	2000      	movs	r0, #0
    997e:	f006 fc9f 	bl	102c0 <bt_enable>
			if (err) {
    9982:	4601      	mov	r1, r0
    9984:	b120      	cbz	r0, 9990 <_ZN13deviceManager11initCentralEv+0x3c>
				printk("Bluetooth init failed (err %d)\n", err);
    9986:	4812      	ldr	r0, [pc, #72]	; (99d0 <_ZN13deviceManager11initCentralEv+0x7c>)
}
    9988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				printk("LEDs init failed (err %d)\n", err);
    998c:	f010 be6e 	b.w	1a66c <printk>
			printk("Bluetooth ready\n");
    9990:	4810      	ldr	r0, [pc, #64]	; (99d4 <_ZN13deviceManager11initCentralEv+0x80>)
    9992:	f010 fe6b 	bl	1a66c <printk>
			err = dk_leds_init();
    9996:	f00c fe7b 	bl	16690 <dk_leds_init>
			if (err) {
    999a:	4601      	mov	r1, r0
    999c:	b108      	cbz	r0, 99a2 <_ZN13deviceManager11initCentralEv+0x4e>
				printk("LEDs init failed (err %d)\n", err);
    999e:	480e      	ldr	r0, [pc, #56]	; (99d8 <_ZN13deviceManager11initCentralEv+0x84>)
    99a0:	e7f2      	b.n	9988 <_ZN13deviceManager11initCentralEv+0x34>
			err = initButton();
    99a2:	f7ff fdff 	bl	95a4 <_ZN13deviceManager10initButtonEv>
			if (err) {
    99a6:	4601      	mov	r1, r0
    99a8:	b108      	cbz	r0, 99ae <_ZN13deviceManager11initCentralEv+0x5a>
				printk("Button init failed (err %d)\n", err);
    99aa:	480c      	ldr	r0, [pc, #48]	; (99dc <_ZN13deviceManager11initCentralEv+0x88>)
    99ac:	e7ec      	b.n	9988 <_ZN13deviceManager11initCentralEv+0x34>
			err = bt_lbs_init(&lbs_callbacs);
    99ae:	f104 0014 	add.w	r0, r4, #20
    99b2:	f003 fcb3 	bl	d31c <bt_lbs_init>
			if (err) {
    99b6:	4601      	mov	r1, r0
    99b8:	b108      	cbz	r0, 99be <_ZN13deviceManager11initCentralEv+0x6a>
				printk("Failed to init LBS (err:%d)\n", err);
    99ba:	4809      	ldr	r0, [pc, #36]	; (99e0 <_ZN13deviceManager11initCentralEv+0x8c>)
    99bc:	e7e4      	b.n	9988 <_ZN13deviceManager11initCentralEv+0x34>
				settings_load();
    99be:	f011 f94a 	bl	1ac56 <settings_load>
				printk("Settings loaded\n");
    99c2:	4808      	ldr	r0, [pc, #32]	; (99e4 <_ZN13deviceManager11initCentralEv+0x90>)
    99c4:	f010 fe52 	bl	1a66c <printk>
    99c8:	e7cf      	b.n	996a <_ZN13deviceManager11initCentralEv+0x16>
}
    99ca:	bd10      	pop	{r4, pc}
    99cc:	0001f4be 	.word	0x0001f4be
    99d0:	0001f2f9 	.word	0x0001f2f9
    99d4:	0001f4cc 	.word	0x0001f4cc
    99d8:	0001f2c1 	.word	0x0001f2c1
    99dc:	0001f2dc 	.word	0x0001f2dc
    99e0:	0001f330 	.word	0x0001f330
    99e4:	0001f4dd 	.word	0x0001f4dd

000099e8 <_ZN13deviceManager9setDeviceEbb>:
void deviceManager::setDevice(bool c, bool p){
    99e8:	b410      	push	{r4}
    isPeripheral = p;
    99ea:	4c09      	ldr	r4, [pc, #36]	; (9a10 <_ZN13deviceManager9setDeviceEbb+0x28>)
void deviceManager::setDevice(bool c, bool p){
    99ec:	4603      	mov	r3, r0
    isPeripheral = p;
    99ee:	7022      	strb	r2, [r4, #0]
    isCentral = c;  
    99f0:	4c08      	ldr	r4, [pc, #32]	; (9a14 <_ZN13deviceManager9setDeviceEbb+0x2c>)
    99f2:	7021      	strb	r1, [r4, #0]
	if (isCentral == true && isPeripheral == true)
    99f4:	b139      	cbz	r1, 9a06 <_ZN13deviceManager9setDeviceEbb+0x1e>
    99f6:	b11a      	cbz	r2, 9a00 <_ZN13deviceManager9setDeviceEbb+0x18>
		initPeripheral();
    99f8:	4618      	mov	r0, r3
}
    99fa:	bc10      	pop	{r4}
		initPeripheral();
    99fc:	f7ff be08 	b.w	9610 <_ZN13deviceManager14initPeripheralEv>
}
    9a00:	bc10      	pop	{r4}
		initCentral();
    9a02:	f7ff bfa7 	b.w	9954 <_ZN13deviceManager11initCentralEv>
	else if (isCentral == false && isPeripheral == true)
    9a06:	2a00      	cmp	r2, #0
    9a08:	d1f6      	bne.n	99f8 <_ZN13deviceManager9setDeviceEbb+0x10>
}
    9a0a:	bc10      	pop	{r4}
    9a0c:	4770      	bx	lr
    9a0e:	bf00      	nop
    9a10:	2000c28f 	.word	0x2000c28f
    9a14:	2000c297 	.word	0x2000c297

00009a18 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info>:
void deviceManager::scanConnectionError(struct bt_scan_device_info *device_info) {
    9a18:	b508      	push	{r3, lr}
    printk("Connecting failed\n");
    9a1a:	4803      	ldr	r0, [pc, #12]	; (9a28 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info+0x10>)
    9a1c:	f010 fe26 	bl	1a66c <printk>
}
    9a20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	startScan();
    9a24:	f7ff be36 	b.w	9694 <_ZN13deviceManager9startScanEv>
    9a28:	0001f4ee 	.word	0x0001f4ee

00009a2c <_ZN13deviceManager11discoverCSCEv>:
{
    9a2c:	b510      	push	{r4, lr}
	printk("nbr connection: %d\n",nbrConnectionsCentral);
    9a2e:	4c0c      	ldr	r4, [pc, #48]	; (9a60 <_ZN13deviceManager11discoverCSCEv+0x34>)
    9a30:	480c      	ldr	r0, [pc, #48]	; (9a64 <_ZN13deviceManager11discoverCSCEv+0x38>)
    9a32:	7821      	ldrb	r1, [r4, #0]
    9a34:	f010 fe1a 	bl	1a66c <printk>
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb, NULL);
    9a38:	7820      	ldrb	r0, [r4, #0]
    9a3a:	4c0b      	ldr	r4, [pc, #44]	; (9a68 <_ZN13deviceManager11discoverCSCEv+0x3c>)
    9a3c:	3801      	subs	r0, #1
    9a3e:	490b      	ldr	r1, [pc, #44]	; (9a6c <_ZN13deviceManager11discoverCSCEv+0x40>)
    9a40:	2300      	movs	r3, #0
    9a42:	4a0b      	ldr	r2, [pc, #44]	; (9a70 <_ZN13deviceManager11discoverCSCEv+0x44>)
    9a44:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    9a48:	f002 fe54 	bl	c6f4 <bt_gatt_dm_start>
	if (err) 
    9a4c:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9a50:	d004      	beq.n	9a5c <_ZN13deviceManager11discoverCSCEv+0x30>
}
    9a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    9a56:	4807      	ldr	r0, [pc, #28]	; (9a74 <_ZN13deviceManager11discoverCSCEv+0x48>)
    9a58:	f010 be08 	b.w	1a66c <printk>
}
    9a5c:	bd10      	pop	{r4, pc}
    9a5e:	bf00      	nop
    9a60:	2000c294 	.word	0x2000c294
    9a64:	0001f501 	.word	0x0001f501
    9a68:	2000a61c 	.word	0x2000a61c
    9a6c:	0001ef38 	.word	0x0001ef38
    9a70:	20008140 	.word	0x20008140
    9a74:	0001f515 	.word	0x0001f515

00009a78 <_ZN13deviceManager10discoverHREv>:
{
    9a78:	b510      	push	{r4, lr}
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_HRS, &discovery_cb_HR, NULL);
    9a7a:	4b0a      	ldr	r3, [pc, #40]	; (9aa4 <_ZN13deviceManager10discoverHREv+0x2c>)
    9a7c:	4c0a      	ldr	r4, [pc, #40]	; (9aa8 <_ZN13deviceManager10discoverHREv+0x30>)
    9a7e:	7818      	ldrb	r0, [r3, #0]
    9a80:	490a      	ldr	r1, [pc, #40]	; (9aac <_ZN13deviceManager10discoverHREv+0x34>)
    9a82:	3801      	subs	r0, #1
    9a84:	2300      	movs	r3, #0
    9a86:	4a0a      	ldr	r2, [pc, #40]	; (9ab0 <_ZN13deviceManager10discoverHREv+0x38>)
    9a88:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    9a8c:	f002 fe32 	bl	c6f4 <bt_gatt_dm_start>
	if (err) 
    9a90:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9a94:	d004      	beq.n	9aa0 <_ZN13deviceManager10discoverHREv+0x28>
}
    9a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    9a9a:	4806      	ldr	r0, [pc, #24]	; (9ab4 <_ZN13deviceManager10discoverHREv+0x3c>)
    9a9c:	f010 bde6 	b.w	1a66c <printk>
}
    9aa0:	bd10      	pop	{r4, pc}
    9aa2:	bf00      	nop
    9aa4:	2000c294 	.word	0x2000c294
    9aa8:	2000a61c 	.word	0x2000a61c
    9aac:	0001ef3c 	.word	0x0001ef3c
    9ab0:	2000814c 	.word	0x2000814c
    9ab4:	0001f515 	.word	0x0001f515

00009ab8 <_ZN13deviceManager9connectedEP7bt_connh>:
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    9ab8:	b570      	push	{r4, r5, r6, lr}
    9aba:	b090      	sub	sp, #64	; 0x40
    9abc:	460c      	mov	r4, r1
	int error = bt_conn_get_info(conn,&info);
    9abe:	a901      	add	r1, sp, #4
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    9ac0:	4605      	mov	r5, r0
	int error = bt_conn_get_info(conn,&info);
    9ac2:	f007 fd5b 	bl	1157c <bt_conn_get_info>
	if (error)
    9ac6:	b120      	cbz	r0, 9ad2 <_ZN13deviceManager9connectedEP7bt_connh+0x1a>
		printk("Cannot get info of connection object\n");
    9ac8:	4831      	ldr	r0, [pc, #196]	; (9b90 <_ZN13deviceManager9connectedEP7bt_connh+0xd8>)
    9aca:	f010 fdcf 	bl	1a66c <printk>
}
    9ace:	b010      	add	sp, #64	; 0x40
    9ad0:	bd70      	pop	{r4, r5, r6, pc}
	if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9ad2:	f89d 6005 	ldrb.w	r6, [sp, #5]
    9ad6:	2e00      	cmp	r6, #0
    9ad8:	d136      	bne.n	9b48 <_ZN13deviceManager9connectedEP7bt_connh+0x90>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9ada:	4628      	mov	r0, r5
    9adc:	f012 fabe 	bl	1c05c <bt_conn_get_dst>
    9ae0:	221e      	movs	r2, #30
    9ae2:	a908      	add	r1, sp, #32
    9ae4:	f7ff fcd6 	bl	9494 <bt_addr_le_to_str.isra.0>
		if (err) {
    9ae8:	b13c      	cbz	r4, 9afa <_ZN13deviceManager9connectedEP7bt_connh+0x42>
			printk("Failed to connect to %s (%u)\n", addr, err);
    9aea:	4622      	mov	r2, r4
    9aec:	4829      	ldr	r0, [pc, #164]	; (9b94 <_ZN13deviceManager9connectedEP7bt_connh+0xdc>)
    9aee:	a908      	add	r1, sp, #32
    9af0:	f010 fdbc 	bl	1a66c <printk>
			startScan();
    9af4:	f7ff fdce 	bl	9694 <_ZN13deviceManager9startScanEv>
			return;
    9af8:	e7e9      	b.n	9ace <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		centralConnections[nbrConnectionsCentral] = bt_conn_ref(conn);;
    9afa:	4c27      	ldr	r4, [pc, #156]	; (9b98 <_ZN13deviceManager9connectedEP7bt_connh+0xe0>)
		printk("Connected: %s\n", addr);
    9afc:	a908      	add	r1, sp, #32
    9afe:	4827      	ldr	r0, [pc, #156]	; (9b9c <_ZN13deviceManager9connectedEP7bt_connh+0xe4>)
    9b00:	f010 fdb4 	bl	1a66c <printk>
		centralConnections[nbrConnectionsCentral] = bt_conn_ref(conn);;
    9b04:	4628      	mov	r0, r5
    9b06:	7826      	ldrb	r6, [r4, #0]
    9b08:	f012 fa6f 	bl	1bfea <bt_conn_ref>
    9b0c:	4b24      	ldr	r3, [pc, #144]	; (9ba0 <_ZN13deviceManager9connectedEP7bt_connh+0xe8>)
    9b0e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
		bt_conn_unref(conn);
    9b12:	4628      	mov	r0, r5
    9b14:	f007 fba0 	bl	11258 <bt_conn_unref>
			switch (sensorInfos)
    9b18:	4a22      	ldr	r2, [pc, #136]	; (9ba4 <_ZN13deviceManager9connectedEP7bt_connh+0xec>)
		nbrConnectionsCentral++;
    9b1a:	7823      	ldrb	r3, [r4, #0]
    9b1c:	7812      	ldrb	r2, [r2, #0]
    9b1e:	3301      	adds	r3, #1
    9b20:	b2db      	uxtb	r3, r3
    9b22:	3a01      	subs	r2, #1
    9b24:	7023      	strb	r3, [r4, #0]
			switch (sensorInfos)
    9b26:	2a04      	cmp	r2, #4
    9b28:	d8d1      	bhi.n	9ace <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9b2a:	e8df f002 	tbb	[pc, r2]
    9b2e:	0505      	.short	0x0505
    9b30:	0803      	.short	0x0803
    9b32:	0a          	.byte	0x0a
    9b33:	00          	.byte	0x00
				if (nbrConnectionsCentral <= 2)
    9b34:	2b02      	cmp	r3, #2
    9b36:	d804      	bhi.n	9b42 <_ZN13deviceManager9connectedEP7bt_connh+0x8a>
					discoverCSC();
    9b38:	f7ff ff78 	bl	9a2c <_ZN13deviceManager11discoverCSCEv>
    9b3c:	e7c7      	b.n	9ace <_ZN13deviceManager9connectedEP7bt_connh+0x16>
				if (nbrConnectionsCentral == 1)
    9b3e:	2b01      	cmp	r3, #1
    9b40:	d0fa      	beq.n	9b38 <_ZN13deviceManager9connectedEP7bt_connh+0x80>
				discoverHR();
    9b42:	f7ff ff99 	bl	9a78 <_ZN13deviceManager10discoverHREv>
				break;
    9b46:	e7c2      	b.n	9ace <_ZN13deviceManager9connectedEP7bt_connh+0x16>
	else if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9b48:	2e01      	cmp	r6, #1
    9b4a:	d1c0      	bne.n	9ace <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		if (err) {
    9b4c:	b124      	cbz	r4, 9b58 <_ZN13deviceManager9connectedEP7bt_connh+0xa0>
			printk("Connection failed (err %u)\n", err);
    9b4e:	4621      	mov	r1, r4
    9b50:	4815      	ldr	r0, [pc, #84]	; (9ba8 <_ZN13deviceManager9connectedEP7bt_connh+0xf0>)
    9b52:	f010 fd8b 	bl	1a66c <printk>
			return;
    9b56:	e7ba      	b.n	9ace <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		printk("Connected with application\n");
    9b58:	4814      	ldr	r0, [pc, #80]	; (9bac <_ZN13deviceManager9connectedEP7bt_connh+0xf4>)
    9b5a:	f010 fd87 	bl	1a66c <printk>
		connectedP = true;
    9b5e:	4b14      	ldr	r3, [pc, #80]	; (9bb0 <_ZN13deviceManager9connectedEP7bt_connh+0xf8>)
		peripheralConn = bt_conn_ref(conn);
    9b60:	4628      	mov	r0, r5
		connectedP = true;
    9b62:	701e      	strb	r6, [r3, #0]
		peripheralConn = bt_conn_ref(conn);
    9b64:	f012 fa41 	bl	1bfea <bt_conn_ref>
    9b68:	4b12      	ldr	r3, [pc, #72]	; (9bb4 <_ZN13deviceManager9connectedEP7bt_connh+0xfc>)
    9b6a:	6018      	str	r0, [r3, #0]
		bt_conn_unref(conn);
    9b6c:	4628      	mov	r0, r5
    9b6e:	f007 fb73 	bl	11258 <bt_conn_unref>
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);	
    9b72:	4620      	mov	r0, r4
    9b74:	f013 fceb 	bl	1d54e <dk_set_led_on>
		if (getDevice() == 3 && nbrConnectionsCentral == 0) 
    9b78:	f7ff fd00 	bl	957c <_ZN13deviceManager9getDeviceEv>
    9b7c:	2803      	cmp	r0, #3
    9b7e:	d1a6      	bne.n	9ace <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9b80:	4b05      	ldr	r3, [pc, #20]	; (9b98 <_ZN13deviceManager9connectedEP7bt_connh+0xe0>)
    9b82:	781b      	ldrb	r3, [r3, #0]
    9b84:	2b00      	cmp	r3, #0
    9b86:	d1a2      	bne.n	9ace <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			initScan();
    9b88:	f7ff fd96 	bl	96b8 <_ZN13deviceManager8initScanEv>
    9b8c:	e79f      	b.n	9ace <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    9b8e:	bf00      	nop
    9b90:	0001f540 	.word	0x0001f540
    9b94:	0001f566 	.word	0x0001f566
    9b98:	2000c294 	.word	0x2000c294
    9b9c:	0001f584 	.word	0x0001f584
    9ba0:	2000a61c 	.word	0x2000a61c
    9ba4:	2000c28e 	.word	0x2000c28e
    9ba8:	0001f593 	.word	0x0001f593
    9bac:	0001f5af 	.word	0x0001f5af
    9bb0:	2000c28c 	.word	0x2000c28c
    9bb4:	2000a618 	.word	0x2000a618

00009bb8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb>:
			      bool connectable) {
    9bb8:	b570      	push	{r4, r5, r6, lr}
    9bba:	b08e      	sub	sp, #56	; 0x38
    9bbc:	4605      	mov	r5, r0
	nbrAddresses = getNbrOfAddresses();
    9bbe:	f000 fa33 	bl	a028 <_Z17getNbrOfAddressesv>
    9bc2:	4b41      	ldr	r3, [pc, #260]	; (9cc8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x110>)
    9bc4:	4604      	mov	r4, r0
    9bc6:	4e41      	ldr	r6, [pc, #260]	; (9ccc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x114>)
    9bc8:	7018      	strb	r0, [r3, #0]
	if (nbrAddresses != 0)
    9bca:	2800      	cmp	r0, #0
    9bcc:	d045      	beq.n	9c5a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xa2>
		ready = true;
    9bce:	2101      	movs	r1, #1
		switch (nbrAddresses)
    9bd0:	2802      	cmp	r0, #2
		ready = true;
    9bd2:	7031      	strb	r1, [r6, #0]
		switch (nbrAddresses)
    9bd4:	d031      	beq.n	9c3a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x82>
    9bd6:	2803      	cmp	r0, #3
    9bd8:	d035      	beq.n	9c46 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x8e>
    9bda:	4288      	cmp	r0, r1
    9bdc:	d103      	bne.n	9be6 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
			getAddress(sensor1,1);
    9bde:	4601      	mov	r1, r0
    9be0:	483b      	ldr	r0, [pc, #236]	; (9cd0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
			getAddress(sensor2,2);
    9be2:	f000 fa27 	bl	a034 <_Z10getAddressPch>
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    9be6:	682b      	ldr	r3, [r5, #0]
    9be8:	221e      	movs	r2, #30
    9bea:	6818      	ldr	r0, [r3, #0]
    9bec:	a906      	add	r1, sp, #24
    9bee:	f7ff fc51 	bl	9494 <bt_addr_le_to_str.isra.0>
	bt_addr_le_to_str(device_info->recv_info->addr, addrShort, sizeof(addrShort));
    9bf2:	682b      	ldr	r3, [r5, #0]
    9bf4:	2212      	movs	r2, #18
    9bf6:	6818      	ldr	r0, [r3, #0]
    9bf8:	a901      	add	r1, sp, #4
    9bfa:	f7ff fc4b 	bl	9494 <bt_addr_le_to_str.isra.0>
	if (ready)
    9bfe:	7833      	ldrb	r3, [r6, #0]
    9c00:	2b00      	cmp	r3, #0
    9c02:	d03d      	beq.n	9c80 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc8>
		bt_scan_stop();
    9c04:	f011 f9e7 	bl	1afd6 <bt_scan_stop>
		if (checkAddresses(addrShort,sensor1) && once_sensor1)
    9c08:	4931      	ldr	r1, [pc, #196]	; (9cd0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9c0a:	a801      	add	r0, sp, #4
    9c0c:	f010 fc7f 	bl	1a50e <_ZN13deviceManager14checkAddressesEPcS0_>
    9c10:	b338      	cbz	r0, 9c62 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xaa>
    9c12:	4c30      	ldr	r4, [pc, #192]	; (9cd4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x11c>)
    9c14:	7823      	ldrb	r3, [r4, #0]
    9c16:	b323      	cbz	r3, 9c62 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xaa>
			printk("Correct sensor found\n");
    9c18:	482f      	ldr	r0, [pc, #188]	; (9cd8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9c1a:	f010 fd27 	bl	1a66c <printk>
			once_sensor1 = false;
    9c1e:	2300      	movs	r3, #0
    9c20:	7023      	strb	r3, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9c22:	4b2e      	ldr	r3, [pc, #184]	; (9cdc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9c24:	6828      	ldr	r0, [r5, #0]
    9c26:	781a      	ldrb	r2, [r3, #0]
    9c28:	4b2d      	ldr	r3, [pc, #180]	; (9ce0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9c2a:	492e      	ldr	r1, [pc, #184]	; (9ce4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    9c2c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9c30:	686a      	ldr	r2, [r5, #4]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9c32:	6800      	ldr	r0, [r0, #0]
    9c34:	f007 fcce 	bl	115d4 <bt_conn_le_create>
}
    9c38:	e022      	b.n	9c80 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc8>
			getAddress(sensor1,1);
    9c3a:	4825      	ldr	r0, [pc, #148]	; (9cd0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9c3c:	f000 f9fa 	bl	a034 <_Z10getAddressPch>
			getAddress(sensor2,2);
    9c40:	4621      	mov	r1, r4
    9c42:	4829      	ldr	r0, [pc, #164]	; (9ce8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9c44:	e7cd      	b.n	9be2 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2a>
			getAddress(sensor1,1);
    9c46:	4822      	ldr	r0, [pc, #136]	; (9cd0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9c48:	f000 f9f4 	bl	a034 <_Z10getAddressPch>
			getAddress(sensor2,2);
    9c4c:	2102      	movs	r1, #2
    9c4e:	4826      	ldr	r0, [pc, #152]	; (9ce8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9c50:	f000 f9f0 	bl	a034 <_Z10getAddressPch>
			getAddress(sensor3,3);
    9c54:	4621      	mov	r1, r4
    9c56:	4825      	ldr	r0, [pc, #148]	; (9cec <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9c58:	e7c3      	b.n	9be2 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2a>
		initScan();
    9c5a:	f7ff fd2d 	bl	96b8 <_ZN13deviceManager8initScanEv>
		ready = false;
    9c5e:	7034      	strb	r4, [r6, #0]
    9c60:	e7c1      	b.n	9be6 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
		else if (checkAddresses(addrShort,sensor2) && once_sensor2)
    9c62:	4921      	ldr	r1, [pc, #132]	; (9ce8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9c64:	a801      	add	r0, sp, #4
    9c66:	f010 fc52 	bl	1a50e <_ZN13deviceManager14checkAddressesEPcS0_>
    9c6a:	b110      	cbz	r0, 9c72 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xba>
    9c6c:	4c20      	ldr	r4, [pc, #128]	; (9cf0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x138>)
    9c6e:	7823      	ldrb	r3, [r4, #0]
    9c70:	b943      	cbnz	r3, 9c84 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xcc>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9c72:	491e      	ldr	r1, [pc, #120]	; (9cec <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9c74:	a801      	add	r0, sp, #4
    9c76:	f010 fc4a 	bl	1a50e <_ZN13deviceManager14checkAddressesEPcS0_>
    9c7a:	b988      	cbnz	r0, 9ca0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xe8>
			startScan();
    9c7c:	f7ff fd0a 	bl	9694 <_ZN13deviceManager9startScanEv>
}
    9c80:	b00e      	add	sp, #56	; 0x38
    9c82:	bd70      	pop	{r4, r5, r6, pc}
			printk("Correct sensor found\n");
    9c84:	4814      	ldr	r0, [pc, #80]	; (9cd8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9c86:	f010 fcf1 	bl	1a66c <printk>
			once_sensor2 = false;
    9c8a:	2300      	movs	r3, #0
    9c8c:	7023      	strb	r3, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9c8e:	4b13      	ldr	r3, [pc, #76]	; (9cdc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9c90:	6828      	ldr	r0, [r5, #0]
    9c92:	781a      	ldrb	r2, [r3, #0]
    9c94:	4b12      	ldr	r3, [pc, #72]	; (9ce0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9c96:	4917      	ldr	r1, [pc, #92]	; (9cf4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x13c>)
    9c98:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9c9c:	686a      	ldr	r2, [r5, #4]
    9c9e:	e7c8      	b.n	9c32 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x7a>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9ca0:	4c15      	ldr	r4, [pc, #84]	; (9cf8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    9ca2:	7823      	ldrb	r3, [r4, #0]
    9ca4:	2b00      	cmp	r3, #0
    9ca6:	d0e9      	beq.n	9c7c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc4>
			printk("Correct sensor found\n");
    9ca8:	480b      	ldr	r0, [pc, #44]	; (9cd8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9caa:	f010 fcdf 	bl	1a66c <printk>
			once_sensor3 = false;
    9cae:	2300      	movs	r3, #0
    9cb0:	7023      	strb	r3, [r4, #0]
			bt_scan_stop();
    9cb2:	f011 f990 	bl	1afd6 <bt_scan_stop>
			err = bt_conn_le_create(device_info->recv_info->addr,
    9cb6:	4b09      	ldr	r3, [pc, #36]	; (9cdc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9cb8:	6828      	ldr	r0, [r5, #0]
    9cba:	781a      	ldrb	r2, [r3, #0]
    9cbc:	4b08      	ldr	r3, [pc, #32]	; (9ce0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9cbe:	490f      	ldr	r1, [pc, #60]	; (9cfc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x144>)
    9cc0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9cc4:	686a      	ldr	r2, [r5, #4]
    9cc6:	e7b4      	b.n	9c32 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x7a>
    9cc8:	2000c290 	.word	0x2000c290
    9ccc:	2000c29d 	.word	0x2000c29d
    9cd0:	2000c258 	.word	0x2000c258
    9cd4:	2000857d 	.word	0x2000857d
    9cd8:	0001f5cb 	.word	0x0001f5cb
    9cdc:	2000c294 	.word	0x2000c294
    9ce0:	2000a61c 	.word	0x2000a61c
    9ce4:	0001e60c 	.word	0x0001e60c
    9ce8:	2000c269 	.word	0x2000c269
    9cec:	2000c27a 	.word	0x2000c27a
    9cf0:	2000857e 	.word	0x2000857e
    9cf4:	0001e61c 	.word	0x0001e61c
    9cf8:	2000857f 	.word	0x2000857f
    9cfc:	0001e62c 	.word	0x0001e62c

00009d00 <_ZN13deviceManager12disconnectedEP7bt_connh>:
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9d00:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d02:	b097      	sub	sp, #92	; 0x5c
    9d04:	460c      	mov	r4, r1
	int error = bt_conn_get_info(conn,&info);
    9d06:	a907      	add	r1, sp, #28
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9d08:	4606      	mov	r6, r0
	int error = bt_conn_get_info(conn,&info);
    9d0a:	f007 fc37 	bl	1157c <bt_conn_get_info>
	if (error)
    9d0e:	4605      	mov	r5, r0
    9d10:	b120      	cbz	r0, 9d1c <_ZN13deviceManager12disconnectedEP7bt_connh+0x1c>
		printk("Cannot get info of connection object\n");
    9d12:	4858      	ldr	r0, [pc, #352]	; (9e74 <_ZN13deviceManager12disconnectedEP7bt_connh+0x174>)
    9d14:	f010 fcaa 	bl	1a66c <printk>
}
    9d18:	b017      	add	sp, #92	; 0x5c
    9d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9d1c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    9d20:	2b01      	cmp	r3, #1
    9d22:	d10b      	bne.n	9d3c <_ZN13deviceManager12disconnectedEP7bt_connh+0x3c>
		printk("Disconnected from Application (reason %u)\n", reason);
    9d24:	4621      	mov	r1, r4
    9d26:	4854      	ldr	r0, [pc, #336]	; (9e78 <_ZN13deviceManager12disconnectedEP7bt_connh+0x178>)
    9d28:	f010 fca0 	bl	1a66c <printk>
		connectedP = false;
    9d2c:	4b53      	ldr	r3, [pc, #332]	; (9e7c <_ZN13deviceManager12disconnectedEP7bt_connh+0x17c>)
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9d2e:	4628      	mov	r0, r5
		connectedP = false;
    9d30:	701d      	strb	r5, [r3, #0]
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9d32:	f013 fc0f 	bl	1d554 <dk_set_led_off>
		startAdvertising();
    9d36:	f7ff fc45 	bl	95c4 <_ZN13deviceManager16startAdvertisingEv>
    9d3a:	e7ed      	b.n	9d18 <_ZN13deviceManager12disconnectedEP7bt_connh+0x18>
	else if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9d3c:	2b00      	cmp	r3, #0
    9d3e:	d1eb      	bne.n	9d18 <_ZN13deviceManager12disconnectedEP7bt_connh+0x18>
		if (reason == 8)
    9d40:	2c08      	cmp	r4, #8
			wasDisconnected = true;
    9d42:	bf04      	itt	eq
    9d44:	2201      	moveq	r2, #1
    9d46:	4b4e      	ldreq	r3, [pc, #312]	; (9e80 <_ZN13deviceManager12disconnectedEP7bt_connh+0x180>)
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9d48:	4630      	mov	r0, r6
			wasDisconnected = true;
    9d4a:	bf08      	it	eq
    9d4c:	701a      	strbeq	r2, [r3, #0]
		cntBatterySubscriptions--;
    9d4e:	4a4d      	ldr	r2, [pc, #308]	; (9e84 <_ZN13deviceManager12disconnectedEP7bt_connh+0x184>)
    9d50:	7813      	ldrb	r3, [r2, #0]
    9d52:	3b01      	subs	r3, #1
    9d54:	7013      	strb	r3, [r2, #0]
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9d56:	f012 f981 	bl	1c05c <bt_conn_get_dst>
    9d5a:	221e      	movs	r2, #30
    9d5c:	a90e      	add	r1, sp, #56	; 0x38
    9d5e:	f7ff fb99 	bl	9494 <bt_addr_le_to_str.isra.0>
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    9d62:	4622      	mov	r2, r4
		if (nbrConnectionsCentral == 0)
    9d64:	4c48      	ldr	r4, [pc, #288]	; (9e88 <_ZN13deviceManager12disconnectedEP7bt_connh+0x188>)
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    9d66:	4849      	ldr	r0, [pc, #292]	; (9e8c <_ZN13deviceManager12disconnectedEP7bt_connh+0x18c>)
    9d68:	a90e      	add	r1, sp, #56	; 0x38
    9d6a:	f010 fc7f 	bl	1a66c <printk>
		if (nbrConnectionsCentral == 0)
    9d6e:	7825      	ldrb	r5, [r4, #0]
    9d70:	b965      	cbnz	r5, 9d8c <_ZN13deviceManager12disconnectedEP7bt_connh+0x8c>
			connectedC = false;
    9d72:	4b47      	ldr	r3, [pc, #284]	; (9e90 <_ZN13deviceManager12disconnectedEP7bt_connh+0x190>)
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9d74:	2201      	movs	r2, #1
			connectedC = false;
    9d76:	701d      	strb	r5, [r3, #0]
			disconnectedCode[0] = 13;
    9d78:	230d      	movs	r3, #13
    9d7a:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9d7e:	4b45      	ldr	r3, [pc, #276]	; (9e94 <_ZN13deviceManager12disconnectedEP7bt_connh+0x194>)
    9d80:	a901      	add	r1, sp, #4
    9d82:	6818      	ldr	r0, [r3, #0]
    9d84:	f000 f920 	bl	9fc8 <_Z17data_service_sendP7bt_connPKht>
			subscriptionDone = false;
    9d88:	4b43      	ldr	r3, [pc, #268]	; (9e98 <_ZN13deviceManager12disconnectedEP7bt_connh+0x198>)
    9d8a:	701d      	strb	r5, [r3, #0]
		if (checkAddresses(addr,sensor1))
    9d8c:	4943      	ldr	r1, [pc, #268]	; (9e9c <_ZN13deviceManager12disconnectedEP7bt_connh+0x19c>)
    9d8e:	a80e      	add	r0, sp, #56	; 0x38
    9d90:	f010 fbbd 	bl	1a50e <_ZN13deviceManager14checkAddressesEPcS0_>
    9d94:	b1b0      	cbz	r0, 9dc4 <_ZN13deviceManager12disconnectedEP7bt_connh+0xc4>
			once_sensor1 = true;
    9d96:	2501      	movs	r5, #1
			subscriptionDone = false;
    9d98:	2200      	movs	r2, #0
			once_sensor1 = true;
    9d9a:	4b41      	ldr	r3, [pc, #260]	; (9ea0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a0>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9d9c:	4628      	mov	r0, r5
			once_sensor1 = true;
    9d9e:	701d      	strb	r5, [r3, #0]
			subscriptionDone = false;
    9da0:	4b3d      	ldr	r3, [pc, #244]	; (9e98 <_ZN13deviceManager12disconnectedEP7bt_connh+0x198>)
    9da2:	701a      	strb	r2, [r3, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9da4:	f013 fbd6 	bl	1d554 <dk_set_led_off>
			if (sensorInfos == 5)
    9da8:	4b3e      	ldr	r3, [pc, #248]	; (9ea4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a4>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9daa:	a901      	add	r1, sp, #4
			if (sensorInfos == 5)
    9dac:	781b      	ldrb	r3, [r3, #0]
    9dae:	2b05      	cmp	r3, #5
				disconnectedCode[0] = 12;
    9db0:	bf0c      	ite	eq
    9db2:	220c      	moveq	r2, #12
				disconnectedCode[0] = 11;
    9db4:	220b      	movne	r2, #11
    9db6:	4b37      	ldr	r3, [pc, #220]	; (9e94 <_ZN13deviceManager12disconnectedEP7bt_connh+0x194>)
    9db8:	f88d 2004 	strb.w	r2, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9dbc:	6818      	ldr	r0, [r3, #0]
    9dbe:	462a      	mov	r2, r5
    9dc0:	f000 f902 	bl	9fc8 <_Z17data_service_sendP7bt_connPKht>
		if (checkAddresses(addr,sensor2))
    9dc4:	4938      	ldr	r1, [pc, #224]	; (9ea8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a8>)
    9dc6:	a80e      	add	r0, sp, #56	; 0x38
    9dc8:	f010 fba1 	bl	1a50e <_ZN13deviceManager14checkAddressesEPcS0_>
    9dcc:	b1b8      	cbz	r0, 9dfe <_ZN13deviceManager12disconnectedEP7bt_connh+0xfe>
			once_sensor2 = true;
    9dce:	2501      	movs	r5, #1
			subscriptionDone = false;
    9dd0:	2200      	movs	r2, #0
			once_sensor2 = true;
    9dd2:	4b36      	ldr	r3, [pc, #216]	; (9eac <_ZN13deviceManager12disconnectedEP7bt_connh+0x1ac>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9dd4:	4628      	mov	r0, r5
			once_sensor2 = true;
    9dd6:	701d      	strb	r5, [r3, #0]
			subscriptionDone = false;
    9dd8:	4b2f      	ldr	r3, [pc, #188]	; (9e98 <_ZN13deviceManager12disconnectedEP7bt_connh+0x198>)
    9dda:	701a      	strb	r2, [r3, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9ddc:	f013 fbba 	bl	1d554 <dk_set_led_off>
			if (sensorInfos == 2 || sensorInfos == 3)
    9de0:	4b30      	ldr	r3, [pc, #192]	; (9ea4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a4>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9de2:	a901      	add	r1, sp, #4
			if (sensorInfos == 2 || sensorInfos == 3)
    9de4:	781b      	ldrb	r3, [r3, #0]
    9de6:	3b02      	subs	r3, #2
    9de8:	42ab      	cmp	r3, r5
				disconnectedCode[0] = 11;
    9dea:	bf94      	ite	ls
    9dec:	220b      	movls	r2, #11
				disconnectedCode[0] = 12;
    9dee:	220c      	movhi	r2, #12
    9df0:	4b28      	ldr	r3, [pc, #160]	; (9e94 <_ZN13deviceManager12disconnectedEP7bt_connh+0x194>)
    9df2:	f88d 2004 	strb.w	r2, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9df6:	6818      	ldr	r0, [r3, #0]
    9df8:	462a      	mov	r2, r5
    9dfa:	f000 f8e5 	bl	9fc8 <_Z17data_service_sendP7bt_connPKht>
		if (checkAddresses(addr,sensor3))
    9dfe:	492c      	ldr	r1, [pc, #176]	; (9eb0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1b0>)
    9e00:	a80e      	add	r0, sp, #56	; 0x38
    9e02:	f010 fb84 	bl	1a50e <_ZN13deviceManager14checkAddressesEPcS0_>
    9e06:	b188      	cbz	r0, 9e2c <_ZN13deviceManager12disconnectedEP7bt_connh+0x12c>
			subscriptionDone = false;
    9e08:	2200      	movs	r2, #0
			once_sensor3 = true;
    9e0a:	2501      	movs	r5, #1
			subscriptionDone = false;
    9e0c:	4b22      	ldr	r3, [pc, #136]	; (9e98 <_ZN13deviceManager12disconnectedEP7bt_connh+0x198>)
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9e0e:	4628      	mov	r0, r5
			subscriptionDone = false;
    9e10:	701a      	strb	r2, [r3, #0]
			once_sensor3 = true;
    9e12:	4b28      	ldr	r3, [pc, #160]	; (9eb4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1b4>)
    9e14:	701d      	strb	r5, [r3, #0]
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9e16:	f013 fb9d 	bl	1d554 <dk_set_led_off>
			disconnectedCode[0] = 12;
    9e1a:	230c      	movs	r3, #12
    9e1c:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9e20:	4b1c      	ldr	r3, [pc, #112]	; (9e94 <_ZN13deviceManager12disconnectedEP7bt_connh+0x194>)
    9e22:	462a      	mov	r2, r5
    9e24:	6818      	ldr	r0, [r3, #0]
    9e26:	a901      	add	r1, sp, #4
    9e28:	f000 f8ce 	bl	9fc8 <_Z17data_service_sendP7bt_connPKht>
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9e2c:	2600      	movs	r6, #0
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    9e2e:	4f22      	ldr	r7, [pc, #136]	; (9eb8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1b8>)
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    9e30:	7823      	ldrb	r3, [r4, #0]
    9e32:	b2f5      	uxtb	r5, r6
    9e34:	3b01      	subs	r3, #1
    9e36:	429d      	cmp	r5, r3
    9e38:	dc18      	bgt.n	9e6c <_ZN13deviceManager12disconnectedEP7bt_connh+0x16c>
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    9e3a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
    9e3e:	f012 f90d 	bl	1c05c <bt_conn_get_dst>
    9e42:	a902      	add	r1, sp, #8
    9e44:	2212      	movs	r2, #18
    9e46:	f7ff fb25 	bl	9494 <bt_addr_le_to_str.isra.0>
			if (checkAddresses(addr,addrToFind))
    9e4a:	a902      	add	r1, sp, #8
    9e4c:	a80e      	add	r0, sp, #56	; 0x38
    9e4e:	f010 fb5e 	bl	1a50e <_ZN13deviceManager14checkAddressesEPcS0_>
    9e52:	b148      	cbz	r0, 9e68 <_ZN13deviceManager12disconnectedEP7bt_connh+0x168>
				bt_conn_unref(centralConnections[i]);
    9e54:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
    9e58:	f007 f9fe 	bl	11258 <bt_conn_unref>
				centralConnections[i] = nullptr;
    9e5c:	2300      	movs	r3, #0
    9e5e:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
				nbrConnectionsCentral--;
    9e62:	7823      	ldrb	r3, [r4, #0]
    9e64:	3b01      	subs	r3, #1
    9e66:	7023      	strb	r3, [r4, #0]
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    9e68:	3601      	adds	r6, #1
    9e6a:	e7e1      	b.n	9e30 <_ZN13deviceManager12disconnectedEP7bt_connh+0x130>
		startScan();	
    9e6c:	f7ff fc12 	bl	9694 <_ZN13deviceManager9startScanEv>
    9e70:	e752      	b.n	9d18 <_ZN13deviceManager12disconnectedEP7bt_connh+0x18>
    9e72:	bf00      	nop
    9e74:	0001f540 	.word	0x0001f540
    9e78:	0001f5e1 	.word	0x0001f5e1
    9e7c:	2000c28c 	.word	0x2000c28c
    9e80:	2000c291 	.word	0x2000c291
    9e84:	2000c296 	.word	0x2000c296
    9e88:	2000c294 	.word	0x2000c294
    9e8c:	0001f60c 	.word	0x0001f60c
    9e90:	2000c28b 	.word	0x2000c28b
    9e94:	2000a618 	.word	0x2000a618
    9e98:	2000c293 	.word	0x2000c293
    9e9c:	2000c258 	.word	0x2000c258
    9ea0:	2000857d 	.word	0x2000857d
    9ea4:	2000c28e 	.word	0x2000c28e
    9ea8:	2000c269 	.word	0x2000c269
    9eac:	2000857e 	.word	0x2000857e
    9eb0:	2000c27a 	.word	0x2000c27a
    9eb4:	2000857f 	.word	0x2000857f
    9eb8:	2000a61c 	.word	0x2000a61c

00009ebc <_ZN7dataCSC8saveDataEPKv>:
    type = ((uint8_t*)data)[0];
    9ebc:	780b      	ldrb	r3, [r1, #0]
    switch (type)
    9ebe:	2b01      	cmp	r3, #1
    type = ((uint8_t*)data)[0];
    9ec0:	7403      	strb	r3, [r0, #16]
    switch (type)
    9ec2:	d004      	beq.n	9ece <_ZN7dataCSC8saveDataEPKv+0x12>
    9ec4:	2b02      	cmp	r3, #2
    9ec6:	d00d      	beq.n	9ee4 <_ZN7dataCSC8saveDataEPKv+0x28>
        printk("Unknown type\n");
    9ec8:	480c      	ldr	r0, [pc, #48]	; (9efc <_ZN7dataCSC8saveDataEPKv+0x40>)
    9eca:	f010 bbcf 	b.w	1a66c <printk>
        oldSumRevSpeed = sumRevSpeed;
    9ece:	8803      	ldrh	r3, [r0, #0]
    9ed0:	8043      	strh	r3, [r0, #2]
        oldLastEventSpeed = lastEventSpeed;
    9ed2:	8903      	ldrh	r3, [r0, #8]
    9ed4:	8143      	strh	r3, [r0, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    9ed6:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        sumRevSpeed = sys_get_le16(&((uint8_t*)data)[1]);
    9eda:	8003      	strh	r3, [r0, #0]
    9edc:	f8b1 3005 	ldrh.w	r3, [r1, #5]
		lastEventSpeed = sys_get_le16(&((uint8_t*)data)[5]);
    9ee0:	8103      	strh	r3, [r0, #8]
        break;
    9ee2:	4770      	bx	lr
        oldSumRevCadence = sumRevCadence;
    9ee4:	8883      	ldrh	r3, [r0, #4]
    9ee6:	80c3      	strh	r3, [r0, #6]
        oldLastEventCadence  = lastEventCadence;
    9ee8:	8983      	ldrh	r3, [r0, #12]
    9eea:	81c3      	strh	r3, [r0, #14]
    9eec:	f8b1 3001 	ldrh.w	r3, [r1, #1]
		sumRevCadence = sys_get_le16(&((uint8_t*)data)[1]);
    9ef0:	8083      	strh	r3, [r0, #4]
    9ef2:	f8b1 3003 	ldrh.w	r3, [r1, #3]
		lastEventCadence  = sys_get_le16(&((uint8_t*)data)[3]);
    9ef6:	8183      	strh	r3, [r0, #12]
}
    9ef8:	4770      	bx	lr
    9efa:	bf00      	nop
    9efc:	0001f64c 	.word	0x0001f64c

00009f00 <_ZN7dataCSC7calcRPMEv>:
uint16_t dataCSC::calcRPM() {
    9f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9f04:	8985      	ldrh	r5, [r0, #12]
    9f06:	89c3      	ldrh	r3, [r0, #14]
uint16_t dataCSC::calcRPM() {
    9f08:	4604      	mov	r4, r0
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9f0a:	429d      	cmp	r5, r3
    9f0c:	d02f      	beq.n	9f6e <_ZN7dataCSC7calcRPMEv+0x6e>
    uint16_t nbrRev = sumRevCadence-oldSumRevCadence;
    9f0e:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    9f12:	f8b0 9006 	ldrh.w	r9, [r0, #6]
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9f16:	45c8      	cmp	r8, r9
    9f18:	d029      	beq.n	9f6e <_ZN7dataCSC7calcRPMEv+0x6e>
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9f1a:	1aed      	subs	r5, r5, r3
    9f1c:	4628      	mov	r0, r5
    9f1e:	f7fe fae1 	bl	84e4 <__aeabi_i2d>
    9f22:	2200      	movs	r2, #0
    9f24:	4b13      	ldr	r3, [pc, #76]	; (9f74 <_ZN7dataCSC7calcRPMEv+0x74>)
    9f26:	f7fe fb47 	bl	85b8 <__aeabi_dmul>
        if (time < 0)
    9f2a:	2200      	movs	r2, #0
    9f2c:	2300      	movs	r3, #0
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9f2e:	4606      	mov	r6, r0
    9f30:	460f      	mov	r7, r1
        if (time < 0)
    9f32:	f7fe fdb3 	bl	8a9c <__aeabi_dcmplt>
    9f36:	b130      	cbz	r0, 9f46 <_ZN7dataCSC7calcRPMEv+0x46>
            time = 0xffff - oldLastEventCadence + lastEventCadence;
    9f38:	f505 407f 	add.w	r0, r5, #65280	; 0xff00
    9f3c:	30ff      	adds	r0, #255	; 0xff
    9f3e:	f7fe fad1 	bl	84e4 <__aeabi_i2d>
    9f42:	4606      	mov	r6, r0
    9f44:	460f      	mov	r7, r1
        rpm = (sumRevCadence - oldSumRevCadence) * 60 / time;
    9f46:	203c      	movs	r0, #60	; 0x3c
    9f48:	eba8 0809 	sub.w	r8, r8, r9
    9f4c:	fb00 f008 	mul.w	r0, r0, r8
    9f50:	f7fe fac8 	bl	84e4 <__aeabi_i2d>
    9f54:	4632      	mov	r2, r6
    9f56:	463b      	mov	r3, r7
    9f58:	f7fe fc58 	bl	880c <__aeabi_ddiv>
    9f5c:	4602      	mov	r2, r0
    9f5e:	460b      	mov	r3, r1
    9f60:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
        retVal = (uint16_t) rpm;
    9f64:	f7fe fdc2 	bl	8aec <__aeabi_d2uiz>
    9f68:	b280      	uxth	r0, r0
}
    9f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint16_t retVal = 0;
    9f6e:	2000      	movs	r0, #0
    9f70:	e7fb      	b.n	9f6a <_ZN7dataCSC7calcRPMEv+0x6a>
    9f72:	bf00      	nop
    9f74:	3f500000 	.word	0x3f500000

00009f78 <_Z15on_cccd_changedPK12bt_gatt_attrt>:
{
    ARG_UNUSED(attr);

    uint8_t notificationsCode[1];

    switch(value)
    9f78:	2901      	cmp	r1, #1
    9f7a:	d004      	beq.n	9f86 <_Z15on_cccd_changedPK12bt_gatt_attrt+0xe>
    9f7c:	2902      	cmp	r1, #2
    9f7e:	d005      	beq.n	9f8c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x14>
    9f80:	b931      	cbnz	r1, 9f90 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x18>
            printk("Notifications ON with Indications\n");
            break;

        case 0: 
            // Stop sending stuff
            printk("Notifications OFF\n");
    9f82:	4804      	ldr	r0, [pc, #16]	; (9f94 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x1c>)
    9f84:	e000      	b.n	9f88 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Notifications ON\n");
    9f86:	4804      	ldr	r0, [pc, #16]	; (9f98 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x20>)
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value\n");     
    9f88:	f010 bb70 	b.w	1a66c <printk>
            printk("Notifications ON with Indications\n");
    9f8c:	4803      	ldr	r0, [pc, #12]	; (9f9c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x24>)
    9f8e:	e7fb      	b.n	9f88 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Error, CCCD has been set to an invalid value\n");     
    9f90:	4803      	ldr	r0, [pc, #12]	; (9fa0 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x28>)
    9f92:	e7f9      	b.n	9f88 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
    9f94:	0001f68f 	.word	0x0001f68f
    9f98:	0001f65a 	.word	0x0001f65a
    9f9c:	0001f66c 	.word	0x0001f66c
    9fa0:	0001f6a2 	.word	0x0001f6a2

00009fa4 <_Z17data_service_initv>:
{
    9fa4:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
    9fa6:	22f0      	movs	r2, #240	; 0xf0
    9fa8:	2100      	movs	r1, #0
    9faa:	4805      	ldr	r0, [pc, #20]	; (9fc0 <_Z17data_service_initv+0x1c>)
    9fac:	f011 fdcd 	bl	1bb4a <memset>
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
    9fb0:	22f0      	movs	r2, #240	; 0xf0
    9fb2:	2100      	movs	r1, #0
    9fb4:	4803      	ldr	r0, [pc, #12]	; (9fc4 <_Z17data_service_initv+0x20>)
    9fb6:	f011 fdc8 	bl	1bb4a <memset>
}
    9fba:	2000      	movs	r0, #0
    9fbc:	bd08      	pop	{r3, pc}
    9fbe:	bf00      	nop
    9fc0:	2000c2d2 	.word	0x2000c2d2
    9fc4:	2000c3c2 	.word	0x2000c3c2

00009fc8 <_Z17data_service_sendP7bt_connPKht>:
     * to check whether notification has been enabled by the peer or not.
     * Attribute table: 0 = Service, 1 = Primary service, 2 = RX, 3 = TX, 4 = CCC.
     */
    const struct bt_gatt_attr *attr = &data_service.attrs[3]; 

    struct bt_gatt_notify_params params = 
    9fc8:	2300      	movs	r3, #0
{
    9fca:	b510      	push	{r4, lr}
    9fcc:	b086      	sub	sp, #24
    struct bt_gatt_notify_params params = 
    9fce:	9303      	str	r3, [sp, #12]
    9fd0:	9305      	str	r3, [sp, #20]
    9fd2:	4b0d      	ldr	r3, [pc, #52]	; (a008 <_Z17data_service_sendP7bt_connPKht+0x40>)
        .uuid   = BT_UUID_DATA_SERVICE_TX,
        .attr   = attr,
        .data   = data,
        .len    = len,
        .func   = on_sent
    };
    9fd4:	f8ad 200c 	strh.w	r2, [sp, #12]
    struct bt_gatt_notify_params params = 
    9fd8:	9300      	str	r3, [sp, #0]
    9fda:	4b0c      	ldr	r3, [pc, #48]	; (a00c <_Z17data_service_sendP7bt_connPKht+0x44>)

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9fdc:	2201      	movs	r2, #1
    struct bt_gatt_notify_params params = 
    9fde:	9304      	str	r3, [sp, #16]
    };
    9fe0:	4b0b      	ldr	r3, [pc, #44]	; (a010 <_Z17data_service_sendP7bt_connPKht+0x48>)
{
    9fe2:	4604      	mov	r4, r0
    };
    9fe4:	e9cd 3101 	strd	r3, r1, [sp, #4]
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9fe8:	4619      	mov	r1, r3
    9fea:	f00a f91f 	bl	1422c <bt_gatt_is_subscribed>
    9fee:	b148      	cbz	r0, a004 <_Z17data_service_sendP7bt_connPKht+0x3c>
    {
        // Send the notification
	    if(bt_gatt_notify_cb(conn, &params))
    9ff0:	4669      	mov	r1, sp
    9ff2:	4620      	mov	r0, r4
    9ff4:	f009 ff38 	bl	13e68 <bt_gatt_notify_cb>
    9ff8:	b110      	cbz	r0, a000 <_Z17data_service_sendP7bt_connPKht+0x38>
        {
            printk("Error, unable to send notification\n");
    9ffa:	4806      	ldr	r0, [pc, #24]	; (a014 <_Z17data_service_sendP7bt_connPKht+0x4c>)
        }
    }
    else
    {
        printk("Warning, notification not enabled on the selected attribute\n");
    9ffc:	f010 fb36 	bl	1a66c <printk>
    }
}
    a000:	b006      	add	sp, #24
    a002:	bd10      	pop	{r4, pc}
        printk("Warning, notification not enabled on the selected attribute\n");
    a004:	4804      	ldr	r0, [pc, #16]	; (a018 <_Z17data_service_sendP7bt_connPKht+0x50>)
    a006:	e7f9      	b.n	9ffc <_Z17data_service_sendP7bt_connPKht+0x34>
    a008:	0001f7b7 	.word	0x0001f7b7
    a00c:	0001a535 	.word	0x0001a535
    a010:	0001e6dc 	.word	0x0001e6dc
    a014:	0001f701 	.word	0x0001f701
    a018:	0001f725 	.word	0x0001f725

0000a01c <_Z11getDiameterv>:

// getter
double getDiameter() {
    return dia;
}
    a01c:	4b01      	ldr	r3, [pc, #4]	; (a024 <_Z11getDiameterv+0x8>)
    a01e:	e9d3 0100 	ldrd	r0, r1, [r3]
    a022:	4770      	bx	lr
    a024:	20008830 	.word	0x20008830

0000a028 <_Z17getNbrOfAddressesv>:

// getter
uint8_t getNbrOfAddresses() {
    return nbrAddresses;
}
    a028:	4b01      	ldr	r3, [pc, #4]	; (a030 <_Z17getNbrOfAddressesv+0x8>)
    a02a:	7818      	ldrb	r0, [r3, #0]
    a02c:	4770      	bx	lr
    a02e:	bf00      	nop
    a030:	2000c4b4 	.word	0x2000c4b4

0000a034 <_Z10getAddressPch>:

// getter
void getAddress(char* outArray, uint8_t nbr) {
    switch (nbr)
    a034:	2902      	cmp	r1, #2
    a036:	d00d      	beq.n	a054 <_Z10getAddressPch+0x20>
    a038:	2903      	cmp	r1, #3
    a03a:	d015      	beq.n	a068 <_Z10getAddressPch+0x34>
    a03c:	2901      	cmp	r1, #1
    a03e:	d11c      	bne.n	a07a <_Z10getAddressPch+0x46>
    a040:	4a0e      	ldr	r2, [pc, #56]	; (a07c <_Z10getAddressPch+0x48>)
    a042:	1e43      	subs	r3, r0, #1
    a044:	3010      	adds	r0, #16
    {
    case 1:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address1[i];
    a046:	f812 1b01 	ldrb.w	r1, [r2], #1
    a04a:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a04e:	4283      	cmp	r3, r0
    a050:	d1f9      	bne.n	a046 <_Z10getAddressPch+0x12>
    a052:	4770      	bx	lr
    a054:	4a0a      	ldr	r2, [pc, #40]	; (a080 <_Z10getAddressPch+0x4c>)
    a056:	1e43      	subs	r3, r0, #1
    a058:	3010      	adds	r0, #16
        }    
        break;
    case 2:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address2[i];
    a05a:	f812 1b01 	ldrb.w	r1, [r2], #1
    a05e:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a062:	4283      	cmp	r3, r0
    a064:	d1f9      	bne.n	a05a <_Z10getAddressPch+0x26>
    a066:	4770      	bx	lr
    a068:	4a06      	ldr	r2, [pc, #24]	; (a084 <_Z10getAddressPch+0x50>)
    a06a:	1e43      	subs	r3, r0, #1
    a06c:	3010      	adds	r0, #16
        }    
        break;
    case 3:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address3[i];
    a06e:	f812 1b01 	ldrb.w	r1, [r2], #1
    a072:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    a076:	4283      	cmp	r3, r0
    a078:	d1f9      	bne.n	a06e <_Z10getAddressPch+0x3a>
        break;
    
    default:
        break;
    }
}
    a07a:	4770      	bx	lr
    a07c:	2000c29e 	.word	0x2000c29e
    a080:	2000c2af 	.word	0x2000c2af
    a084:	2000c2c0 	.word	0x2000c2c0

0000a088 <_Z14getSensorInfosv>:

uint8_t getSensorInfos() {
    return infoSensors;
}
    a088:	4b01      	ldr	r3, [pc, #4]	; (a090 <_Z14getSensorInfosv+0x8>)
    a08a:	7818      	ldrb	r0, [r3, #0]
    a08c:	4770      	bx	lr
    a08e:	bf00      	nop
    a090:	2000c4b3 	.word	0x2000c4b3

0000a094 <discovery_error_found_cb>:

void discovery_error_found_cb(struct bt_conn *conn,
				     int err,
				     void *context)
{
	printk("The discovery procedure failed with %d\n", err);
    a094:	4801      	ldr	r0, [pc, #4]	; (a09c <discovery_error_found_cb+0x8>)
    a096:	f010 bae9 	b.w	1a66c <printk>
    a09a:	bf00      	nop
    a09c:	0001f7c8 	.word	0x0001f7c8

0000a0a0 <discovery_service_not_found_cb>:
	printk("The service could not be found during the discovery\n");
    a0a0:	4801      	ldr	r0, [pc, #4]	; (a0a8 <discovery_service_not_found_cb+0x8>)
    a0a2:	f010 bae3 	b.w	1a66c <printk>
    a0a6:	bf00      	nop
    a0a8:	0001f7f0 	.word	0x0001f7f0

0000a0ac <discovery_completed_cb>:
{
    a0ac:	b510      	push	{r4, lr}
    a0ae:	4604      	mov	r4, r0
	printk("The discovery procedure succeeded\n");
    a0b0:	4839      	ldr	r0, [pc, #228]	; (a198 <discovery_completed_cb+0xec>)
    a0b2:	f010 fadb 	bl	1a66c <printk>
	switch (cntDevices)
    a0b6:	4b39      	ldr	r3, [pc, #228]	; (a19c <discovery_completed_cb+0xf0>)
    a0b8:	781b      	ldrb	r3, [r3, #0]
    a0ba:	2b02      	cmp	r3, #2
    a0bc:	d02e      	beq.n	a11c <discovery_completed_cb+0x70>
    a0be:	2b03      	cmp	r3, #3
    a0c0:	d04a      	beq.n	a158 <discovery_completed_cb+0xac>
    a0c2:	2b01      	cmp	r3, #1
    a0c4:	d114      	bne.n	a0f0 <discovery_completed_cb+0x44>
		err = bt_bas_handles_assign(dm, &bas_speed);
    a0c6:	4936      	ldr	r1, [pc, #216]	; (a1a0 <discovery_completed_cb+0xf4>)
    a0c8:	4620      	mov	r0, r4
    a0ca:	f002 ffc7 	bl	d05c <bt_bas_handles_assign>
		if (err) 
    a0ce:	4601      	mov	r1, r0
    a0d0:	b110      	cbz	r0, a0d8 <discovery_completed_cb+0x2c>
			printk("Could not init BAS client object from speed sensor, error: %d\n", err);
    a0d2:	4834      	ldr	r0, [pc, #208]	; (a1a4 <discovery_completed_cb+0xf8>)
    a0d4:	f010 faca 	bl	1a66c <printk>
 * @retval true If notifications are supported.
 *              Otherwise, @c false is returned.
 */
static inline bool bt_bas_notify_supported(struct bt_bas_client *bas)
{
	return bas->notify;
    a0d8:	4831      	ldr	r0, [pc, #196]	; (a1a0 <discovery_completed_cb+0xf4>)
		if (bt_bas_notify_supported(&bas_speed))
    a0da:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a0de:	b193      	cbz	r3, a106 <discovery_completed_cb+0x5a>
			err = bt_bas_subscribe_battery_level(&bas_speed, notify_battery_level_cb_speed);
    a0e0:	4931      	ldr	r1, [pc, #196]	; (a1a8 <discovery_completed_cb+0xfc>)
    a0e2:	f003 f845 	bl	d170 <bt_bas_subscribe_battery_level>
			if (err) 
    a0e6:	4601      	mov	r1, r0
    a0e8:	b110      	cbz	r0, a0f0 <discovery_completed_cb+0x44>
				printk("Cannot subscribe to BAS value notification from speed sensor, (err: %d)\n", err);
    a0ea:	4830      	ldr	r0, [pc, #192]	; (a1ac <discovery_completed_cb+0x100>)
				printk("Cannot subscribe to BAS value notification from heart rate sensor, (err: %d)\n", err);
    a0ec:	f010 fabe 	bl	1a66c <printk>
	err = bt_gatt_dm_data_release(dm);
    a0f0:	4620      	mov	r0, r4
    a0f2:	f010 ff58 	bl	1afa6 <bt_gatt_dm_data_release>
	if (err) {
    a0f6:	4601      	mov	r1, r0
    a0f8:	2800      	cmp	r0, #0
    a0fa:	d04b      	beq.n	a194 <discovery_completed_cb+0xe8>
}
    a0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not release the discovery data, error "
    a100:	482b      	ldr	r0, [pc, #172]	; (a1b0 <discovery_completed_cb+0x104>)
    a102:	f010 bab3 	b.w	1a66c <printk>
			err = bt_bas_start_per_read_battery_level(&bas_speed, BAS_READ_VALUE_INTERVAL, notify_battery_level_cb_speed);
    a106:	f242 7110 	movw	r1, #10000	; 0x2710
    a10a:	4a27      	ldr	r2, [pc, #156]	; (a1a8 <discovery_completed_cb+0xfc>)
    a10c:	f003 f892 	bl	d234 <bt_bas_start_per_read_battery_level>
			if (err) 
    a110:	2800      	cmp	r0, #0
    a112:	d0ed      	beq.n	a0f0 <discovery_completed_cb+0x44>
				printk("Could not start periodic read of BAS value for speed sensor\n");
    a114:	4827      	ldr	r0, [pc, #156]	; (a1b4 <discovery_completed_cb+0x108>)
				printk("Could not start periodic read of BAS value for heart rate sensor\n");
    a116:	f010 faa9 	bl	1a66c <printk>
    a11a:	e7e9      	b.n	a0f0 <discovery_completed_cb+0x44>
		err = bt_bas_handles_assign(dm, &bas_cadence);
    a11c:	4926      	ldr	r1, [pc, #152]	; (a1b8 <discovery_completed_cb+0x10c>)
    a11e:	4620      	mov	r0, r4
    a120:	f002 ff9c 	bl	d05c <bt_bas_handles_assign>
		if (err) 
    a124:	4601      	mov	r1, r0
    a126:	b110      	cbz	r0, a12e <discovery_completed_cb+0x82>
			printk("Could not init BAS client object from cadence sensor, error: %d\n", err);
    a128:	4824      	ldr	r0, [pc, #144]	; (a1bc <discovery_completed_cb+0x110>)
    a12a:	f010 fa9f 	bl	1a66c <printk>
    a12e:	4822      	ldr	r0, [pc, #136]	; (a1b8 <discovery_completed_cb+0x10c>)
		if (bt_bas_notify_supported(&bas_cadence))
    a130:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a134:	b13b      	cbz	r3, a146 <discovery_completed_cb+0x9a>
			err = bt_bas_subscribe_battery_level(&bas_cadence, notify_battery_level_cb_cadence);
    a136:	4922      	ldr	r1, [pc, #136]	; (a1c0 <discovery_completed_cb+0x114>)
    a138:	f003 f81a 	bl	d170 <bt_bas_subscribe_battery_level>
			if (err) 
    a13c:	4601      	mov	r1, r0
    a13e:	2800      	cmp	r0, #0
    a140:	d0d6      	beq.n	a0f0 <discovery_completed_cb+0x44>
				printk("Cannot subscribe to BAS value notification from cadence sensor, (err: %d)\n", err);
    a142:	4820      	ldr	r0, [pc, #128]	; (a1c4 <discovery_completed_cb+0x118>)
    a144:	e7d2      	b.n	a0ec <discovery_completed_cb+0x40>
			err = bt_bas_start_per_read_battery_level(&bas_cadence, BAS_READ_VALUE_INTERVAL, notify_battery_level_cb_cadence);
    a146:	f242 7110 	movw	r1, #10000	; 0x2710
    a14a:	4a1d      	ldr	r2, [pc, #116]	; (a1c0 <discovery_completed_cb+0x114>)
    a14c:	f003 f872 	bl	d234 <bt_bas_start_per_read_battery_level>
			if (err) 
    a150:	2800      	cmp	r0, #0
    a152:	d0cd      	beq.n	a0f0 <discovery_completed_cb+0x44>
				printk("Could not start periodic read of BAS value for cadence sensor\n");
    a154:	481c      	ldr	r0, [pc, #112]	; (a1c8 <discovery_completed_cb+0x11c>)
    a156:	e7de      	b.n	a116 <discovery_completed_cb+0x6a>
		err = bt_bas_handles_assign(dm, &bas_heartRate);
    a158:	491c      	ldr	r1, [pc, #112]	; (a1cc <discovery_completed_cb+0x120>)
    a15a:	4620      	mov	r0, r4
    a15c:	f002 ff7e 	bl	d05c <bt_bas_handles_assign>
		if (err) 
    a160:	4601      	mov	r1, r0
    a162:	b110      	cbz	r0, a16a <discovery_completed_cb+0xbe>
			printk("Could not init BAS client object from heart rate sensor, error: %d\n", err);
    a164:	481a      	ldr	r0, [pc, #104]	; (a1d0 <discovery_completed_cb+0x124>)
    a166:	f010 fa81 	bl	1a66c <printk>
    a16a:	4818      	ldr	r0, [pc, #96]	; (a1cc <discovery_completed_cb+0x120>)
		if (bt_bas_notify_supported(&bas_heartRate))
    a16c:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a170:	b13b      	cbz	r3, a182 <discovery_completed_cb+0xd6>
			err = bt_bas_subscribe_battery_level(&bas_heartRate, notify_battery_level_cb_heartRate);
    a172:	4918      	ldr	r1, [pc, #96]	; (a1d4 <discovery_completed_cb+0x128>)
    a174:	f002 fffc 	bl	d170 <bt_bas_subscribe_battery_level>
			if (err) 
    a178:	4601      	mov	r1, r0
    a17a:	2800      	cmp	r0, #0
    a17c:	d0b8      	beq.n	a0f0 <discovery_completed_cb+0x44>
				printk("Cannot subscribe to BAS value notification from heart rate sensor, (err: %d)\n", err);
    a17e:	4816      	ldr	r0, [pc, #88]	; (a1d8 <discovery_completed_cb+0x12c>)
    a180:	e7b4      	b.n	a0ec <discovery_completed_cb+0x40>
			err = bt_bas_start_per_read_battery_level(&bas_heartRate, BAS_READ_VALUE_INTERVAL, notify_battery_level_cb_heartRate);
    a182:	f242 7110 	movw	r1, #10000	; 0x2710
    a186:	4a13      	ldr	r2, [pc, #76]	; (a1d4 <discovery_completed_cb+0x128>)
    a188:	f003 f854 	bl	d234 <bt_bas_start_per_read_battery_level>
			if (err) 
    a18c:	2800      	cmp	r0, #0
    a18e:	d0af      	beq.n	a0f0 <discovery_completed_cb+0x44>
				printk("Could not start periodic read of BAS value for heart rate sensor\n");
    a190:	4812      	ldr	r0, [pc, #72]	; (a1dc <discovery_completed_cb+0x130>)
    a192:	e7c0      	b.n	a116 <discovery_completed_cb+0x6a>
}
    a194:	bd10      	pop	{r4, pc}
    a196:	bf00      	nop
    a198:	0001f02f 	.word	0x0001f02f
    a19c:	2000c4b9 	.word	0x2000c4b9
    a1a0:	20008948 	.word	0x20008948
    a1a4:	0001f825 	.word	0x0001f825
    a1a8:	0000a2d9 	.word	0x0000a2d9
    a1ac:	0001f864 	.word	0x0001f864
    a1b0:	0001fa89 	.word	0x0001fa89
    a1b4:	0001f8ad 	.word	0x0001f8ad
    a1b8:	20008838 	.word	0x20008838
    a1bc:	0001f8ea 	.word	0x0001f8ea
    a1c0:	0000a299 	.word	0x0000a299
    a1c4:	0001f92b 	.word	0x0001f92b
    a1c8:	0001f976 	.word	0x0001f976
    a1cc:	200088c0 	.word	0x200088c0
    a1d0:	0001f9b5 	.word	0x0001f9b5
    a1d4:	0000a259 	.word	0x0000a259
    a1d8:	0001f9f9 	.word	0x0001f9f9
    a1dc:	0001fa47 	.word	0x0001fa47

0000a1e0 <bt_addr_le_to_str.constprop.0.isra.0>:
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a1e0:	b570      	push	{r4, r5, r6, lr}
	switch (addr->type) {
    a1e2:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    a1e4:	b08a      	sub	sp, #40	; 0x28
    a1e6:	4604      	mov	r4, r0
    a1e8:	460e      	mov	r6, r1
    a1ea:	ad07      	add	r5, sp, #28
    a1ec:	2b03      	cmp	r3, #3
    a1ee:	d820      	bhi.n	a232 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    a1f0:	e8df f003 	tbb	[pc, r3]
    a1f4:	1d1b1902 	.word	0x1d1b1902
		strcpy(type, "public");
    a1f8:	4911      	ldr	r1, [pc, #68]	; (a240 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		strcpy(type, "random");
    a1fa:	4628      	mov	r0, r5
    a1fc:	f011 fc20 	bl	1ba40 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    a200:	7863      	ldrb	r3, [r4, #1]
    a202:	211e      	movs	r1, #30
    a204:	9304      	str	r3, [sp, #16]
    a206:	78a3      	ldrb	r3, [r4, #2]
    a208:	4630      	mov	r0, r6
    a20a:	9303      	str	r3, [sp, #12]
    a20c:	78e3      	ldrb	r3, [r4, #3]
    a20e:	4a0d      	ldr	r2, [pc, #52]	; (a244 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    a210:	9302      	str	r3, [sp, #8]
    a212:	7923      	ldrb	r3, [r4, #4]
    a214:	9505      	str	r5, [sp, #20]
    a216:	9301      	str	r3, [sp, #4]
    a218:	7963      	ldrb	r3, [r4, #5]
    a21a:	9300      	str	r3, [sp, #0]
    a21c:	79a3      	ldrb	r3, [r4, #6]
    a21e:	f010 fa32 	bl	1a686 <snprintk>
}
    a222:	b00a      	add	sp, #40	; 0x28
    a224:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    a226:	4908      	ldr	r1, [pc, #32]	; (a248 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    a228:	e7e7      	b.n	a1fa <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    a22a:	4908      	ldr	r1, [pc, #32]	; (a24c <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    a22c:	e7e5      	b.n	a1fa <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    a22e:	4908      	ldr	r1, [pc, #32]	; (a250 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    a230:	e7e3      	b.n	a1fa <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    a232:	210a      	movs	r1, #10
    a234:	4628      	mov	r0, r5
    a236:	4a07      	ldr	r2, [pc, #28]	; (a254 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    a238:	f010 fa25 	bl	1a686 <snprintk>
		break;
    a23c:	e7e0      	b.n	a200 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    a23e:	bf00      	nop
    a240:	0001f1f3 	.word	0x0001f1f3
    a244:	0001f21c 	.word	0x0001f21c
    a248:	0001f1fa 	.word	0x0001f1fa
    a24c:	0001f201 	.word	0x0001f201
    a250:	0001f20b 	.word	0x0001f20b
    a254:	0001f215 	.word	0x0001f215

0000a258 <notify_battery_level_cb_heartRate>:
	batteryLevel_cadence = battery_level;
}

void notify_battery_level_cb_heartRate(struct bt_bas_client *bas,
				    uint8_t battery_level)
{
    a258:	b510      	push	{r4, lr}
    a25a:	460c      	mov	r4, r1
    a25c:	b088      	sub	sp, #32
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a25e:	f010 febc 	bl	1afda <bt_bas_conn>
    a262:	f011 fefb 	bl	1c05c <bt_conn_get_dst>
    a266:	4669      	mov	r1, sp
    a268:	f7ff ffba 	bl	a1e0 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (battery_level == BT_BAS_VAL_INVALID) {
    a26c:	2cff      	cmp	r4, #255	; 0xff
    a26e:	d107      	bne.n	a280 <notify_battery_level_cb_heartRate+0x28>
		printk("[%s] Battery notification aborted\n", addr);
    a270:	4669      	mov	r1, sp
    a272:	4806      	ldr	r0, [pc, #24]	; (a28c <notify_battery_level_cb_heartRate+0x34>)
    a274:	f010 f9fa 	bl	1a66c <printk>
	} else {
		printk("[%s] Battery notification: %"PRIu8"%%\n",
		       addr, battery_level);
	}

	batteryLevel_heartRate = battery_level;
    a278:	4b05      	ldr	r3, [pc, #20]	; (a290 <notify_battery_level_cb_heartRate+0x38>)
    a27a:	701c      	strb	r4, [r3, #0]
}
    a27c:	b008      	add	sp, #32
    a27e:	bd10      	pop	{r4, pc}
		printk("[%s] Battery notification: %"PRIu8"%%\n",
    a280:	4622      	mov	r2, r4
    a282:	4669      	mov	r1, sp
    a284:	4803      	ldr	r0, [pc, #12]	; (a294 <notify_battery_level_cb_heartRate+0x3c>)
    a286:	f010 f9f1 	bl	1a66c <printk>
    a28a:	e7f5      	b.n	a278 <notify_battery_level_cb_heartRate+0x20>
    a28c:	0001fabf 	.word	0x0001fabf
    a290:	2000c4b6 	.word	0x2000c4b6
    a294:	0001fae2 	.word	0x0001fae2

0000a298 <notify_battery_level_cb_cadence>:
{
    a298:	b510      	push	{r4, lr}
    a29a:	460c      	mov	r4, r1
    a29c:	b088      	sub	sp, #32
	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a29e:	f010 fe9c 	bl	1afda <bt_bas_conn>
    a2a2:	f011 fedb 	bl	1c05c <bt_conn_get_dst>
    a2a6:	4669      	mov	r1, sp
    a2a8:	f7ff ff9a 	bl	a1e0 <bt_addr_le_to_str.constprop.0.isra.0>
	if (battery_level == BT_BAS_VAL_INVALID) {
    a2ac:	2cff      	cmp	r4, #255	; 0xff
    a2ae:	d107      	bne.n	a2c0 <notify_battery_level_cb_cadence+0x28>
		printk("[%s] Battery notification aborted\n", addr);
    a2b0:	4669      	mov	r1, sp
    a2b2:	4806      	ldr	r0, [pc, #24]	; (a2cc <notify_battery_level_cb_cadence+0x34>)
    a2b4:	f010 f9da 	bl	1a66c <printk>
	batteryLevel_cadence = battery_level;
    a2b8:	4b05      	ldr	r3, [pc, #20]	; (a2d0 <notify_battery_level_cb_cadence+0x38>)
    a2ba:	701c      	strb	r4, [r3, #0]
}
    a2bc:	b008      	add	sp, #32
    a2be:	bd10      	pop	{r4, pc}
		printk("[%s] Battery notification: %"PRIu8"%%\n",
    a2c0:	4622      	mov	r2, r4
    a2c2:	4669      	mov	r1, sp
    a2c4:	4803      	ldr	r0, [pc, #12]	; (a2d4 <notify_battery_level_cb_cadence+0x3c>)
    a2c6:	f010 f9d1 	bl	1a66c <printk>
    a2ca:	e7f5      	b.n	a2b8 <notify_battery_level_cb_cadence+0x20>
    a2cc:	0001fabf 	.word	0x0001fabf
    a2d0:	2000c4b5 	.word	0x2000c4b5
    a2d4:	0001fae2 	.word	0x0001fae2

0000a2d8 <notify_battery_level_cb_speed>:
{
    a2d8:	b510      	push	{r4, lr}
    a2da:	460c      	mov	r4, r1
    a2dc:	b088      	sub	sp, #32
	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a2de:	f010 fe7c 	bl	1afda <bt_bas_conn>
    a2e2:	f011 febb 	bl	1c05c <bt_conn_get_dst>
    a2e6:	4669      	mov	r1, sp
    a2e8:	f7ff ff7a 	bl	a1e0 <bt_addr_le_to_str.constprop.0.isra.0>
	if (battery_level == BT_BAS_VAL_INVALID) {
    a2ec:	2cff      	cmp	r4, #255	; 0xff
    a2ee:	d107      	bne.n	a300 <notify_battery_level_cb_speed+0x28>
		printk("[%s] Battery notification aborted\n", addr);
    a2f0:	4669      	mov	r1, sp
    a2f2:	4806      	ldr	r0, [pc, #24]	; (a30c <notify_battery_level_cb_speed+0x34>)
    a2f4:	f010 f9ba 	bl	1a66c <printk>
	batteryLevel_speed = battery_level;
    a2f8:	4b05      	ldr	r3, [pc, #20]	; (a310 <notify_battery_level_cb_speed+0x38>)
    a2fa:	701c      	strb	r4, [r3, #0]
}
    a2fc:	b008      	add	sp, #32
    a2fe:	bd10      	pop	{r4, pc}
		printk("[%s] Battery notification: %"PRIu8"%%\n",
    a300:	4622      	mov	r2, r4
    a302:	4669      	mov	r1, sp
    a304:	4803      	ldr	r0, [pc, #12]	; (a314 <notify_battery_level_cb_speed+0x3c>)
    a306:	f010 f9b1 	bl	1a66c <printk>
    a30a:	e7f5      	b.n	a2f8 <notify_battery_level_cb_speed+0x20>
    a30c:	0001fabf 	.word	0x0001fabf
    a310:	2000c4b7 	.word	0x2000c4b7
    a314:	0001fae2 	.word	0x0001fae2

0000a318 <read_battery_level_cb_heartRate>:
}

void read_battery_level_cb_heartRate(struct bt_bas_client *bas,
				  uint8_t battery_level,
				  int err)
{
    a318:	b530      	push	{r4, r5, lr}
    a31a:	4615      	mov	r5, r2
    a31c:	b089      	sub	sp, #36	; 0x24
    a31e:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(bt_bas_conn(bas)),
    a320:	f010 fe5b 	bl	1afda <bt_bas_conn>
    a324:	f011 fe9a 	bl	1c05c <bt_conn_get_dst>
    a328:	4669      	mov	r1, sp
    a32a:	f7ff ff59 	bl	a1e0 <bt_addr_le_to_str.constprop.0.isra.0>
			  addr, sizeof(addr));
	if (err) {
    a32e:	b135      	cbz	r5, a33e <read_battery_level_cb_heartRate+0x26>
		printk("[%s] Battery read ERROR: %d\n", addr, err);
    a330:	462a      	mov	r2, r5
    a332:	4669      	mov	r1, sp
    a334:	4806      	ldr	r0, [pc, #24]	; (a350 <read_battery_level_cb_heartRate+0x38>)
    a336:	f010 f999 	bl	1a66c <printk>
		return;
	}

	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    batteryLevel_heartRate = battery_level;
}
    a33a:	b009      	add	sp, #36	; 0x24
    a33c:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Battery read: %"PRIu8"%%\n", addr, battery_level);
    a33e:	4622      	mov	r2, r4
    a340:	4669      	mov	r1, sp
    a342:	4804      	ldr	r0, [pc, #16]	; (a354 <read_battery_level_cb_heartRate+0x3c>)
    a344:	f010 f992 	bl	1a66c <printk>
    batteryLevel_heartRate = battery_level;
    a348:	4b03      	ldr	r3, [pc, #12]	; (a358 <read_battery_level_cb_heartRate+0x40>)
    a34a:	701c      	strb	r4, [r3, #0]
    a34c:	e7f5      	b.n	a33a <read_battery_level_cb_heartRate+0x22>
    a34e:	bf00      	nop
    a350:	0001fb03 	.word	0x0001fb03
    a354:	0001fb20 	.word	0x0001fb20
    a358:	2000c4b6 	.word	0x2000c4b6

0000a35c <gatt_discover_battery_service>:
{
    a35c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	cnt++;
    a35e:	4d0f      	ldr	r5, [pc, #60]	; (a39c <gatt_discover_battery_service+0x40>)
	err = bt_gatt_dm_start(conn, BT_UUID_BAS, &discovery_cb, NULL);
    a360:	f641 020f 	movw	r2, #6159	; 0x180f
	cnt++;
    a364:	782b      	ldrb	r3, [r5, #0]
	err = bt_gatt_dm_start(conn, BT_UUID_BAS, &discovery_cb, NULL);
    a366:	f8ad 2006 	strh.w	r2, [sp, #6]
	cnt++;
    a36a:	3301      	adds	r3, #1
    a36c:	702b      	strb	r3, [r5, #0]
	err = bt_gatt_dm_start(conn, BT_UUID_BAS, &discovery_cb, NULL);
    a36e:	2300      	movs	r3, #0
    a370:	4a0b      	ldr	r2, [pc, #44]	; (a3a0 <gatt_discover_battery_service+0x44>)
    a372:	a901      	add	r1, sp, #4
    a374:	f88d 3004 	strb.w	r3, [sp, #4]
    a378:	f002 f9bc 	bl	c6f4 <bt_gatt_dm_start>
	if (err) {
    a37c:	4604      	mov	r4, r0
    a37e:	b150      	cbz	r0, a396 <gatt_discover_battery_service+0x3a>
		printk("Could not start the discovery procedure, error "
    a380:	4601      	mov	r1, r0
    a382:	4808      	ldr	r0, [pc, #32]	; (a3a4 <gatt_discover_battery_service+0x48>)
    a384:	f010 f972 	bl	1a66c <printk>
		cnt--;
    a388:	782b      	ldrb	r3, [r5, #0]
		cntDevices--;
    a38a:	4a07      	ldr	r2, [pc, #28]	; (a3a8 <gatt_discover_battery_service+0x4c>)
		cnt--;
    a38c:	3b01      	subs	r3, #1
    a38e:	702b      	strb	r3, [r5, #0]
		cntDevices--;
    a390:	7813      	ldrb	r3, [r2, #0]
    a392:	3b01      	subs	r3, #1
    a394:	7013      	strb	r3, [r2, #0]
}
    a396:	b2e0      	uxtb	r0, r4
    a398:	b003      	add	sp, #12
    a39a:	bd30      	pop	{r4, r5, pc}
    a39c:	2000c4b8 	.word	0x2000c4b8
    a3a0:	200081fc 	.word	0x200081fc
    a3a4:	0001fb39 	.word	0x0001fb39
    a3a8:	2000c4b9 	.word	0x2000c4b9

0000a3ac <initBatteryManager>:

void initBatteryManager(uint8_t sensorInfos)
{
    a3ac:	b538      	push	{r3, r4, r5, lr}
    a3ae:	4605      	mov	r5, r0
	int err;
	cntDevices++;
    a3b0:	4c10      	ldr	r4, [pc, #64]	; (a3f4 <initBatteryManager+0x48>)
	printk("Initialize battery manager: # %d\n", cntDevices);
    a3b2:	4811      	ldr	r0, [pc, #68]	; (a3f8 <initBatteryManager+0x4c>)
	cntDevices++;
    a3b4:	7821      	ldrb	r1, [r4, #0]
    a3b6:	3101      	adds	r1, #1
    a3b8:	b2c9      	uxtb	r1, r1
    a3ba:	7021      	strb	r1, [r4, #0]
	printk("Initialize battery manager: # %d\n", cntDevices);
    a3bc:	f010 f956 	bl	1a66c <printk>

	if (sensorInfos == 4)
    a3c0:	2d04      	cmp	r5, #4
    a3c2:	d103      	bne.n	a3cc <initBatteryManager+0x20>
	{
		cntDevices = 2;
    a3c4:	2302      	movs	r3, #2
    a3c6:	7023      	strb	r3, [r4, #0]
	{
	case 1:
		bt_bas_client_init(&bas_speed);
		break;
	case 2:
		bt_bas_client_init(&bas_cadence);
    a3c8:	480c      	ldr	r0, [pc, #48]	; (a3fc <initBatteryManager+0x50>)
    a3ca:	e00f      	b.n	a3ec <initBatteryManager+0x40>
	else if (sensorInfos == 5)
    a3cc:	2d05      	cmp	r5, #5
    a3ce:	d103      	bne.n	a3d8 <initBatteryManager+0x2c>
		cntDevices = 3;
    a3d0:	2303      	movs	r3, #3
    a3d2:	7023      	strb	r3, [r4, #0]
		break;
	case 3:
		bt_bas_client_init(&bas_heartRate);
    a3d4:	480a      	ldr	r0, [pc, #40]	; (a400 <initBatteryManager+0x54>)
    a3d6:	e009      	b.n	a3ec <initBatteryManager+0x40>
	switch (cntDevices)
    a3d8:	7823      	ldrb	r3, [r4, #0]
    a3da:	2b01      	cmp	r3, #1
    a3dc:	d005      	beq.n	a3ea <initBatteryManager+0x3e>
    a3de:	b11b      	cbz	r3, a3e8 <initBatteryManager+0x3c>
    a3e0:	2b02      	cmp	r3, #2
    a3e2:	d0f1      	beq.n	a3c8 <initBatteryManager+0x1c>
    a3e4:	2b03      	cmp	r3, #3
    a3e6:	d0f5      	beq.n	a3d4 <initBatteryManager+0x28>
		break;
	default:
		break;
	}
}
    a3e8:	bd38      	pop	{r3, r4, r5, pc}
		bt_bas_client_init(&bas_speed);
    a3ea:	4806      	ldr	r0, [pc, #24]	; (a404 <initBatteryManager+0x58>)
}
    a3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_bas_client_init(&bas_heartRate);
    a3f0:	f002 be20 	b.w	d034 <bt_bas_client_init>
    a3f4:	2000c4b9 	.word	0x2000c4b9
    a3f8:	0001fb72 	.word	0x0001fb72
    a3fc:	20008838 	.word	0x20008838
    a400:	200088c0 	.word	0x200088c0
    a404:	20008948 	.word	0x20008948

0000a408 <getBatteryLevel>:

uint8_t getBatteryLevel(uint8_t nbrSensor) 
{
    int err = 0;

	switch (nbrSensor)
    a408:	2802      	cmp	r0, #2
{
    a40a:	b508      	push	{r3, lr}
	switch (nbrSensor)
    a40c:	d006      	beq.n	a41c <getBatteryLevel+0x14>
    a40e:	2803      	cmp	r0, #3
    a410:	d006      	beq.n	a420 <getBatteryLevel+0x18>
    a412:	2801      	cmp	r0, #1
    a414:	d10a      	bne.n	a42c <getBatteryLevel+0x24>
	{
	case 1:
		return batteryLevel_speed;
    a416:	4b06      	ldr	r3, [pc, #24]	; (a430 <getBatteryLevel+0x28>)
	case 2:
		return batteryLevel_cadence;
		break;
	case 3:
		bt_bas_read_battery_level(&bas_heartRate, read_battery_level_cb_heartRate);
		return batteryLevel_heartRate;
    a418:	7818      	ldrb	r0, [r3, #0]
	default:
		break;
	}

    return err;
}
    a41a:	bd08      	pop	{r3, pc}
		return batteryLevel_cadence;
    a41c:	4b05      	ldr	r3, [pc, #20]	; (a434 <getBatteryLevel+0x2c>)
    a41e:	e7fb      	b.n	a418 <getBatteryLevel+0x10>
		bt_bas_read_battery_level(&bas_heartRate, read_battery_level_cb_heartRate);
    a420:	4905      	ldr	r1, [pc, #20]	; (a438 <getBatteryLevel+0x30>)
    a422:	4806      	ldr	r0, [pc, #24]	; (a43c <getBatteryLevel+0x34>)
    a424:	f002 fede 	bl	d1e4 <bt_bas_read_battery_level>
		return batteryLevel_heartRate;
    a428:	4b05      	ldr	r3, [pc, #20]	; (a440 <getBatteryLevel+0x38>)
    a42a:	e7f5      	b.n	a418 <getBatteryLevel+0x10>
	switch (nbrSensor)
    a42c:	2000      	movs	r0, #0
    a42e:	e7f4      	b.n	a41a <getBatteryLevel+0x12>
    a430:	2000c4b7 	.word	0x2000c4b7
    a434:	2000c4b5 	.word	0x2000c4b5
    a438:	0000a319 	.word	0x0000a319
    a43c:	200088c0 	.word	0x200088c0
    a440:	2000c4b6 	.word	0x2000c4b6

0000a444 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    a444:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    a446:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    a448:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    a44c:	2b02      	cmp	r3, #2
{
    a44e:	4604      	mov	r4, r0
    a450:	460e      	mov	r6, r1
	notify->result = res;
    a452:	6081      	str	r1, [r0, #8]
	switch (method) {
    a454:	d010      	beq.n	a478 <sys_notify_finalize+0x34>
    a456:	2b03      	cmp	r3, #3
    a458:	d004      	beq.n	a464 <sys_notify_finalize+0x20>
    a45a:	2b01      	cmp	r3, #1
    a45c:	d10f      	bne.n	a47e <sys_notify_finalize+0x3a>
    a45e:	2500      	movs	r5, #0
    a460:	4628      	mov	r0, r5
    a462:	e001      	b.n	a468 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    a464:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    a466:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    a468:	2300      	movs	r3, #0
    a46a:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    a46c:	b110      	cbz	r0, a474 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    a46e:	4631      	mov	r1, r6
    a470:	f00f ffb6 	bl	1a3e0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    a474:	4628      	mov	r0, r5
    a476:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
    a478:	2500      	movs	r5, #0
		sig = notify->method.signal;
    a47a:	6800      	ldr	r0, [r0, #0]
		break;
    a47c:	e7f4      	b.n	a468 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    a47e:	2245      	movs	r2, #69	; 0x45
    a480:	4904      	ldr	r1, [pc, #16]	; (a494 <sys_notify_finalize+0x50>)
    a482:	4805      	ldr	r0, [pc, #20]	; (a498 <sys_notify_finalize+0x54>)
    a484:	f010 f8f2 	bl	1a66c <printk>
    a488:	2145      	movs	r1, #69	; 0x45
    a48a:	4802      	ldr	r0, [pc, #8]	; (a494 <sys_notify_finalize+0x50>)
    a48c:	f010 fb94 	bl	1abb8 <assert_post_action>
	sys_notify_generic_callback rv = 0;
    a490:	2500      	movs	r5, #0
    a492:	e7e8      	b.n	a466 <sys_notify_finalize+0x22>
    a494:	0001fb94 	.word	0x0001fb94
    a498:	0001fbb7 	.word	0x0001fbb7

0000a49c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    a49c:	680b      	ldr	r3, [r1, #0]
    a49e:	3301      	adds	r3, #1
    a4a0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    a4a2:	4b01      	ldr	r3, [pc, #4]	; (a4a8 <char_out+0xc>)
    a4a4:	681b      	ldr	r3, [r3, #0]
    a4a6:	4718      	bx	r3
    a4a8:	20008208 	.word	0x20008208

0000a4ac <__printk_hook_install>:
	_char_out = fn;
    a4ac:	4b01      	ldr	r3, [pc, #4]	; (a4b4 <__printk_hook_install+0x8>)
    a4ae:	6018      	str	r0, [r3, #0]
}
    a4b0:	4770      	bx	lr
    a4b2:	bf00      	nop
    a4b4:	20008208 	.word	0x20008208

0000a4b8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    a4b8:	b507      	push	{r0, r1, r2, lr}
    a4ba:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    a4bc:	2100      	movs	r1, #0
{
    a4be:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    a4c0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    a4c2:	4803      	ldr	r0, [pc, #12]	; (a4d0 <vprintk+0x18>)
    a4c4:	a901      	add	r1, sp, #4
    a4c6:	f000 fbe9 	bl	ac9c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    a4ca:	b003      	add	sp, #12
    a4cc:	f85d fb04 	ldr.w	pc, [sp], #4
    a4d0:	0000a49d 	.word	0x0000a49d

0000a4d4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    a4d4:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    a4d6:	2500      	movs	r5, #0
{
    a4d8:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    a4da:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    a4de:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    a4e0:	a901      	add	r1, sp, #4
    a4e2:	4805      	ldr	r0, [pc, #20]	; (a4f8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    a4e4:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    a4e6:	f000 fbd9 	bl	ac9c <cbvprintf>

	if (ctx.count < ctx.max) {
    a4ea:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    a4ee:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    a4f0:	bfb8      	it	lt
    a4f2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    a4f4:	b005      	add	sp, #20
    a4f6:	bd30      	pop	{r4, r5, pc}
    a4f8:	0001a647 	.word	0x0001a647

0000a4fc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    a4fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a500:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
    a504:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    a506:	f01a 0f08 	tst.w	sl, #8
{
    a50a:	4693      	mov	fp, r2
	if (processing) {
    a50c:	d01c      	beq.n	a548 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    a50e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    a510:	bf0c      	ite	eq
    a512:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    a516:	f04a 0a20 	orrne.w	sl, sl, #32
    a51a:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a51e:	f104 0014 	add.w	r0, r4, #20
    a522:	f00f f8c5 	bl	196b0 <z_spin_unlock_valid>
    a526:	b940      	cbnz	r0, a53a <process_event+0x3e>
    a528:	4992      	ldr	r1, [pc, #584]	; (a774 <process_event+0x278>)
    a52a:	4893      	ldr	r0, [pc, #588]	; (a778 <process_event+0x27c>)
    a52c:	22a7      	movs	r2, #167	; 0xa7
    a52e:	f010 f89d 	bl	1a66c <printk>
    a532:	21a7      	movs	r1, #167	; 0xa7
    a534:	488f      	ldr	r0, [pc, #572]	; (a774 <process_event+0x278>)
    a536:	f010 fb3f 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    a53a:	f38b 8811 	msr	BASEPRI, fp
    a53e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    a542:	b003      	add	sp, #12
    a544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    a548:	4f8c      	ldr	r7, [pc, #560]	; (a77c <process_event+0x280>)
    a54a:	f8df 822c 	ldr.w	r8, [pc, #556]	; a778 <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a54e:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    a552:	2902      	cmp	r1, #2
    a554:	d106      	bne.n	a564 <process_event+0x68>
			evt = process_recheck(mgr);
    a556:	4620      	mov	r0, r4
    a558:	f010 f8a2 	bl	1a6a0 <process_recheck>
		if (evt == EVT_NOP) {
    a55c:	2800      	cmp	r0, #0
    a55e:	d0de      	beq.n	a51e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    a560:	2801      	cmp	r0, #1
    a562:	d163      	bne.n	a62c <process_event+0x130>
			res = mgr->last_res;
    a564:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a568:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    a56a:	f1b9 0f00 	cmp.w	r9, #0
    a56e:	da19      	bge.n	a5a4 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    a570:	2600      	movs	r6, #0
		*clients = mgr->clients;
    a572:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a574:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    a578:	e9c4 6600 	strd	r6, r6, [r4]
    a57c:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    a580:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a582:	8ba3      	ldrh	r3, [r4, #28]
    a584:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    a588:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    a58a:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    a58c:	d003      	beq.n	a596 <process_event+0x9a>
		if (do_monitors
    a58e:	68a2      	ldr	r2, [r4, #8]
    a590:	2a00      	cmp	r2, #0
    a592:	f040 80f5 	bne.w	a780 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
    a596:	b915      	cbnz	r5, a59e <process_event+0xa2>
		    || (transit != NULL)) {
    a598:	2e00      	cmp	r6, #0
    a59a:	f000 812f 	beq.w	a7fc <process_event+0x300>
    a59e:	f04f 0a00 	mov.w	sl, #0
    a5a2:	e0ef      	b.n	a784 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a5a4:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    a5a8:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    a5aa:	2901      	cmp	r1, #1
    a5ac:	d820      	bhi.n	a5f0 <process_event+0xf4>
	list->head = NULL;
    a5ae:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a5b0:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    a5b4:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    a5b6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a5b8:	b29b      	uxth	r3, r3
	list->tail = NULL;
    a5ba:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    a5be:	d10a      	bne.n	a5d6 <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a5c0:	b13d      	cbz	r5, a5d2 <process_event+0xd6>
    a5c2:	4629      	mov	r1, r5
    a5c4:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    a5c6:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    a5c8:	3201      	adds	r2, #1
    a5ca:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a5cc:	2900      	cmp	r1, #0
    a5ce:	d1fa      	bne.n	a5c6 <process_event+0xca>
    a5d0:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a5d2:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    a5d6:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a5d8:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    a5da:	f010 f861 	bl	1a6a0 <process_recheck>
    a5de:	4606      	mov	r6, r0
    a5e0:	2800      	cmp	r0, #0
    a5e2:	d0ce      	beq.n	a582 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a5e4:	8ba3      	ldrh	r3, [r4, #28]
    a5e6:	f043 0320 	orr.w	r3, r3, #32
    a5ea:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    a5ec:	2600      	movs	r6, #0
    a5ee:	e7c8      	b.n	a582 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    a5f0:	2a04      	cmp	r2, #4
    a5f2:	d10d      	bne.n	a610 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a5f4:	f023 0307 	bic.w	r3, r3, #7
    a5f8:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    a5fa:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a5fc:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    a5fe:	f010 f84f 	bl	1a6a0 <process_recheck>
    a602:	4605      	mov	r5, r0
    a604:	b180      	cbz	r0, a628 <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a606:	f042 0220 	orr.w	r2, r2, #32
    a60a:	2500      	movs	r5, #0
    a60c:	83a2      	strh	r2, [r4, #28]
    a60e:	e7ed      	b.n	a5ec <process_event+0xf0>
		__ASSERT_NO_MSG(false);
    a610:	f240 1219 	movw	r2, #281	; 0x119
    a614:	4639      	mov	r1, r7
    a616:	4640      	mov	r0, r8
    a618:	f010 f828 	bl	1a66c <printk>
    a61c:	f240 1119 	movw	r1, #281	; 0x119
    a620:	4638      	mov	r0, r7
    a622:	f010 fac9 	bl	1abb8 <assert_post_action>
    a626:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    a628:	462e      	mov	r6, r5
    a62a:	e7aa      	b.n	a582 <process_event+0x86>
		} else if (evt == EVT_START) {
    a62c:	2803      	cmp	r0, #3
    a62e:	d131      	bne.n	a694 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    a630:	f1ba 0f00 	cmp.w	sl, #0
    a634:	d00a      	beq.n	a64c <process_event+0x150>
    a636:	4639      	mov	r1, r7
    a638:	4640      	mov	r0, r8
    a63a:	f44f 72aa 	mov.w	r2, #340	; 0x154
    a63e:	f010 f815 	bl	1a66c <printk>
    a642:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a646:	4638      	mov	r0, r7
    a648:	f010 fab6 	bl	1abb8 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a64c:	6823      	ldr	r3, [r4, #0]
    a64e:	b953      	cbnz	r3, a666 <process_event+0x16a>
    a650:	4639      	mov	r1, r7
    a652:	4640      	mov	r0, r8
    a654:	f240 1255 	movw	r2, #341	; 0x155
    a658:	f010 f808 	bl	1a66c <printk>
    a65c:	f240 1155 	movw	r1, #341	; 0x155
    a660:	4638      	mov	r0, r7
    a662:	f010 faa9 	bl	1abb8 <assert_post_action>
			transit = mgr->transitions->start;
    a666:	6923      	ldr	r3, [r4, #16]
    a668:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    a66a:	b956      	cbnz	r6, a682 <process_event+0x186>
    a66c:	4639      	mov	r1, r7
    a66e:	4640      	mov	r0, r8
    a670:	f44f 72ac 	mov.w	r2, #344	; 0x158
    a674:	f00f fffa 	bl	1a66c <printk>
    a678:	f44f 71ac 	mov.w	r1, #344	; 0x158
    a67c:	4638      	mov	r0, r7
    a67e:	f010 fa9b 	bl	1abb8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a682:	8ba3      	ldrh	r3, [r4, #28]
    a684:	f023 0307 	bic.w	r3, r3, #7
    a688:	f043 0306 	orr.w	r3, r3, #6
}
    a68c:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    a68e:	83a3      	strh	r3, [r4, #28]
		res = 0;
    a690:	46a9      	mov	r9, r5
}
    a692:	e776      	b.n	a582 <process_event+0x86>
		} else if (evt == EVT_STOP) {
    a694:	2804      	cmp	r0, #4
    a696:	d12e      	bne.n	a6f6 <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    a698:	f1ba 0f02 	cmp.w	sl, #2
    a69c:	d00a      	beq.n	a6b4 <process_event+0x1b8>
    a69e:	4639      	mov	r1, r7
    a6a0:	4640      	mov	r0, r8
    a6a2:	f240 125b 	movw	r2, #347	; 0x15b
    a6a6:	f00f ffe1 	bl	1a66c <printk>
    a6aa:	f240 115b 	movw	r1, #347	; 0x15b
    a6ae:	4638      	mov	r0, r7
    a6b0:	f010 fa82 	bl	1abb8 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    a6b4:	8be3      	ldrh	r3, [r4, #30]
    a6b6:	b153      	cbz	r3, a6ce <process_event+0x1d2>
    a6b8:	4639      	mov	r1, r7
    a6ba:	4640      	mov	r0, r8
    a6bc:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    a6c0:	f00f ffd4 	bl	1a66c <printk>
    a6c4:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    a6c8:	4638      	mov	r0, r7
    a6ca:	f010 fa75 	bl	1abb8 <assert_post_action>
			transit = mgr->transitions->stop;
    a6ce:	6923      	ldr	r3, [r4, #16]
    a6d0:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    a6d2:	b956      	cbnz	r6, a6ea <process_event+0x1ee>
    a6d4:	4639      	mov	r1, r7
    a6d6:	4640      	mov	r0, r8
    a6d8:	f240 125f 	movw	r2, #351	; 0x15f
    a6dc:	f00f ffc6 	bl	1a66c <printk>
    a6e0:	f240 115f 	movw	r1, #351	; 0x15f
    a6e4:	4638      	mov	r0, r7
    a6e6:	f010 fa67 	bl	1abb8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a6ea:	8ba3      	ldrh	r3, [r4, #28]
    a6ec:	f023 0307 	bic.w	r3, r3, #7
    a6f0:	f043 0304 	orr.w	r3, r3, #4
    a6f4:	e7ca      	b.n	a68c <process_event+0x190>
		} else if (evt == EVT_RESET) {
    a6f6:	2805      	cmp	r0, #5
    a6f8:	d12e      	bne.n	a758 <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a6fa:	f1ba 0f01 	cmp.w	sl, #1
    a6fe:	d00a      	beq.n	a716 <process_event+0x21a>
    a700:	4639      	mov	r1, r7
    a702:	4640      	mov	r0, r8
    a704:	f44f 72b1 	mov.w	r2, #354	; 0x162
    a708:	f00f ffb0 	bl	1a66c <printk>
    a70c:	f44f 71b1 	mov.w	r1, #354	; 0x162
    a710:	4638      	mov	r0, r7
    a712:	f010 fa51 	bl	1abb8 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a716:	6823      	ldr	r3, [r4, #0]
    a718:	b953      	cbnz	r3, a730 <process_event+0x234>
    a71a:	4639      	mov	r1, r7
    a71c:	4640      	mov	r0, r8
    a71e:	f240 1263 	movw	r2, #355	; 0x163
    a722:	f00f ffa3 	bl	1a66c <printk>
    a726:	f240 1163 	movw	r1, #355	; 0x163
    a72a:	4638      	mov	r0, r7
    a72c:	f010 fa44 	bl	1abb8 <assert_post_action>
			transit = mgr->transitions->reset;
    a730:	6923      	ldr	r3, [r4, #16]
    a732:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    a734:	b956      	cbnz	r6, a74c <process_event+0x250>
    a736:	4639      	mov	r1, r7
    a738:	4640      	mov	r0, r8
    a73a:	f44f 72b3 	mov.w	r2, #358	; 0x166
    a73e:	f00f ff95 	bl	1a66c <printk>
    a742:	f44f 71b3 	mov.w	r1, #358	; 0x166
    a746:	4638      	mov	r0, r7
    a748:	f010 fa36 	bl	1abb8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a74c:	8ba3      	ldrh	r3, [r4, #28]
    a74e:	f023 0307 	bic.w	r3, r3, #7
    a752:	f043 0305 	orr.w	r3, r3, #5
    a756:	e799      	b.n	a68c <process_event+0x190>
			__ASSERT_NO_MSG(false);
    a758:	2500      	movs	r5, #0
    a75a:	f240 1269 	movw	r2, #361	; 0x169
    a75e:	4639      	mov	r1, r7
    a760:	4640      	mov	r0, r8
    a762:	f00f ff83 	bl	1a66c <printk>
    a766:	f240 1169 	movw	r1, #361	; 0x169
    a76a:	4638      	mov	r0, r7
    a76c:	f010 fa24 	bl	1abb8 <assert_post_action>
		onoff_transition_fn transit = NULL;
    a770:	462e      	mov	r6, r5
    a772:	e78d      	b.n	a690 <process_event+0x194>
    a774:	0001fbf1 	.word	0x0001fbf1
    a778:	0001fbb7 	.word	0x0001fbb7
    a77c:	0001fbcf 	.word	0x0001fbcf
				   && !sys_slist_is_empty(&mgr->monitors);
    a780:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a784:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    a788:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    a78a:	f104 0314 	add.w	r3, r4, #20
    a78e:	4618      	mov	r0, r3
    a790:	9301      	str	r3, [sp, #4]
    a792:	f00e ff8d 	bl	196b0 <z_spin_unlock_valid>
    a796:	b940      	cbnz	r0, a7aa <process_event+0x2ae>
    a798:	4640      	mov	r0, r8
    a79a:	4931      	ldr	r1, [pc, #196]	; (a860 <process_event+0x364>)
    a79c:	22a7      	movs	r2, #167	; 0xa7
    a79e:	f00f ff65 	bl	1a66c <printk>
    a7a2:	21a7      	movs	r1, #167	; 0xa7
    a7a4:	482e      	ldr	r0, [pc, #184]	; (a860 <process_event+0x364>)
    a7a6:	f010 fa07 	bl	1abb8 <assert_post_action>
    a7aa:	f38b 8811 	msr	BASEPRI, fp
    a7ae:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    a7b2:	f1ba 0f00 	cmp.w	sl, #0
    a7b6:	d130      	bne.n	a81a <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
    a7b8:	2d00      	cmp	r5, #0
    a7ba:	d140      	bne.n	a83e <process_event+0x342>
			if (transit != NULL) {
    a7bc:	b116      	cbz	r6, a7c4 <process_event+0x2c8>
				transit(mgr, transition_complete);
    a7be:	4620      	mov	r0, r4
    a7c0:	4928      	ldr	r1, [pc, #160]	; (a864 <process_event+0x368>)
    a7c2:	47b0      	blx	r6
	__asm__ volatile(
    a7c4:	f04f 0320 	mov.w	r3, #32
    a7c8:	f3ef 8b11 	mrs	fp, BASEPRI
    a7cc:	f383 8811 	msr	BASEPRI, r3
    a7d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a7d4:	9801      	ldr	r0, [sp, #4]
    a7d6:	f00e ff5d 	bl	19694 <z_spin_lock_valid>
    a7da:	b940      	cbnz	r0, a7ee <process_event+0x2f2>
    a7dc:	4640      	mov	r0, r8
    a7de:	4920      	ldr	r1, [pc, #128]	; (a860 <process_event+0x364>)
    a7e0:	227c      	movs	r2, #124	; 0x7c
    a7e2:	f00f ff43 	bl	1a66c <printk>
    a7e6:	217c      	movs	r1, #124	; 0x7c
    a7e8:	481d      	ldr	r0, [pc, #116]	; (a860 <process_event+0x364>)
    a7ea:	f010 f9e5 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
    a7ee:	9801      	ldr	r0, [sp, #4]
    a7f0:	f00e ff6c 	bl	196cc <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    a7f4:	8ba3      	ldrh	r3, [r4, #28]
    a7f6:	f023 0308 	bic.w	r3, r3, #8
    a7fa:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    a7fc:	8ba3      	ldrh	r3, [r4, #28]
    a7fe:	06da      	lsls	r2, r3, #27
    a800:	d525      	bpl.n	a84e <process_event+0x352>
			evt = EVT_COMPLETE;
    a802:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a804:	f023 0310 	bic.w	r3, r3, #16
    a808:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    a80a:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    a80e:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    a812:	2900      	cmp	r1, #0
    a814:	f47f ae9d 	bne.w	a552 <process_event+0x56>
out:
    a818:	e681      	b.n	a51e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    a81a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a81c:	2900      	cmp	r1, #0
    a81e:	d0cb      	beq.n	a7b8 <process_event+0x2bc>
	return node->next;
    a820:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    a824:	464b      	mov	r3, r9
    a826:	4620      	mov	r0, r4
    a828:	f8d1 b004 	ldr.w	fp, [r1, #4]
    a82c:	9a00      	ldr	r2, [sp, #0]
    a82e:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a830:	f1ba 0f00 	cmp.w	sl, #0
    a834:	d0c0      	beq.n	a7b8 <process_event+0x2bc>
    a836:	4651      	mov	r1, sl
    a838:	f8da a000 	ldr.w	sl, [sl]
    a83c:	e7f2      	b.n	a824 <process_event+0x328>
    a83e:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    a840:	464b      	mov	r3, r9
    a842:	4620      	mov	r0, r4
    a844:	9a00      	ldr	r2, [sp, #0]
    a846:	682d      	ldr	r5, [r5, #0]
    a848:	f00f ff46 	bl	1a6d8 <notify_one>
    a84c:	e7b4      	b.n	a7b8 <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    a84e:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a852:	bf1e      	ittt	ne
    a854:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    a858:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a85a:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    a85c:	e7d5      	b.n	a80a <process_event+0x30e>
    a85e:	bf00      	nop
    a860:	0001fbf1 	.word	0x0001fbf1
    a864:	0000a869 	.word	0x0000a869

0000a868 <transition_complete>:
{
    a868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a86a:	4604      	mov	r4, r0
    a86c:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a86e:	f100 0614 	add.w	r6, r0, #20
    a872:	f04f 0320 	mov.w	r3, #32
    a876:	f3ef 8711 	mrs	r7, BASEPRI
    a87a:	f383 8811 	msr	BASEPRI, r3
    a87e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a882:	4630      	mov	r0, r6
    a884:	f00e ff06 	bl	19694 <z_spin_lock_valid>
    a888:	b940      	cbnz	r0, a89c <transition_complete+0x34>
    a88a:	490a      	ldr	r1, [pc, #40]	; (a8b4 <transition_complete+0x4c>)
    a88c:	480a      	ldr	r0, [pc, #40]	; (a8b8 <transition_complete+0x50>)
    a88e:	227c      	movs	r2, #124	; 0x7c
    a890:	f00f feec 	bl	1a66c <printk>
    a894:	217c      	movs	r1, #124	; 0x7c
    a896:	4807      	ldr	r0, [pc, #28]	; (a8b4 <transition_complete+0x4c>)
    a898:	f010 f98e 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
    a89c:	4630      	mov	r0, r6
    a89e:	f00e ff15 	bl	196cc <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
    a8a2:	463a      	mov	r2, r7
    a8a4:	4620      	mov	r0, r4
	mgr->last_res = res;
    a8a6:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    a8a8:	2101      	movs	r1, #1
}
    a8aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    a8ae:	f7ff be25 	b.w	a4fc <process_event>
    a8b2:	bf00      	nop
    a8b4:	0001fbf1 	.word	0x0001fbf1
    a8b8:	0001fbb7 	.word	0x0001fbb7

0000a8bc <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    a8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a8c0:	4604      	mov	r4, r0
    a8c2:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    a8c4:	f00f ff1e 	bl	1a704 <validate_args>

	if (rv < 0) {
    a8c8:	1e05      	subs	r5, r0, #0
    a8ca:	db54      	blt.n	a976 <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a8cc:	f104 0914 	add.w	r9, r4, #20
    a8d0:	f04f 0320 	mov.w	r3, #32
    a8d4:	f3ef 8a11 	mrs	sl, BASEPRI
    a8d8:	f383 8811 	msr	BASEPRI, r3
    a8dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a8e0:	4648      	mov	r0, r9
    a8e2:	f00e fed7 	bl	19694 <z_spin_lock_valid>
    a8e6:	b940      	cbnz	r0, a8fa <onoff_request+0x3e>
    a8e8:	4933      	ldr	r1, [pc, #204]	; (a9b8 <onoff_request+0xfc>)
    a8ea:	4834      	ldr	r0, [pc, #208]	; (a9bc <onoff_request+0x100>)
    a8ec:	227c      	movs	r2, #124	; 0x7c
    a8ee:	f00f febd 	bl	1a66c <printk>
    a8f2:	217c      	movs	r1, #124	; 0x7c
    a8f4:	4830      	ldr	r0, [pc, #192]	; (a9b8 <onoff_request+0xfc>)
    a8f6:	f010 f95f 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
    a8fa:	4648      	mov	r0, r9
    a8fc:	f00e fee6 	bl	196cc <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    a900:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a904:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a906:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    a908:	428b      	cmp	r3, r1
    a90a:	f002 0607 	and.w	r6, r2, #7
    a90e:	d04a      	beq.n	a9a6 <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    a910:	2e02      	cmp	r6, #2
    a912:	d11f      	bne.n	a954 <onoff_request+0x98>
	rv = state;
    a914:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
    a916:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
    a91a:	3301      	adds	r3, #1
    a91c:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a91e:	4648      	mov	r0, r9
    a920:	f00e fec6 	bl	196b0 <z_spin_unlock_valid>
    a924:	b940      	cbnz	r0, a938 <onoff_request+0x7c>
    a926:	4924      	ldr	r1, [pc, #144]	; (a9b8 <onoff_request+0xfc>)
    a928:	4824      	ldr	r0, [pc, #144]	; (a9bc <onoff_request+0x100>)
    a92a:	22a7      	movs	r2, #167	; 0xa7
    a92c:	f00f fe9e 	bl	1a66c <printk>
    a930:	21a7      	movs	r1, #167	; 0xa7
    a932:	4821      	ldr	r0, [pc, #132]	; (a9b8 <onoff_request+0xfc>)
    a934:	f010 f940 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
    a938:	f38a 8811 	msr	BASEPRI, sl
    a93c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    a940:	f1b8 0f00 	cmp.w	r8, #0
    a944:	d017      	beq.n	a976 <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    a946:	2300      	movs	r3, #0
    a948:	4632      	mov	r2, r6
    a94a:	4639      	mov	r1, r7
    a94c:	4620      	mov	r0, r4
    a94e:	f00f fec3 	bl	1a6d8 <notify_one>
    a952:	e010      	b.n	a976 <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    a954:	0793      	lsls	r3, r2, #30
    a956:	d001      	beq.n	a95c <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    a958:	2e06      	cmp	r6, #6
    a95a:	d10f      	bne.n	a97c <onoff_request+0xc0>
	parent->next = child;
    a95c:	2300      	movs	r3, #0
    a95e:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    a960:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    a962:	b9eb      	cbnz	r3, a9a0 <onoff_request+0xe4>
	list->head = node;
    a964:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    a968:	4635      	mov	r5, r6
    a96a:	b9f6      	cbnz	r6, a9aa <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    a96c:	4652      	mov	r2, sl
    a96e:	2102      	movs	r1, #2
    a970:	4620      	mov	r0, r4
    a972:	f7ff fdc3 	bl	a4fc <process_event>
		}
	}

	return rv;
}
    a976:	4628      	mov	r0, r5
    a978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    a97c:	2e05      	cmp	r6, #5
    a97e:	d017      	beq.n	a9b0 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a980:	2e01      	cmp	r6, #1
    a982:	d00a      	beq.n	a99a <onoff_request+0xde>
    a984:	490e      	ldr	r1, [pc, #56]	; (a9c0 <onoff_request+0x104>)
    a986:	480d      	ldr	r0, [pc, #52]	; (a9bc <onoff_request+0x100>)
    a988:	f240 12c5 	movw	r2, #453	; 0x1c5
    a98c:	f00f fe6e 	bl	1a66c <printk>
    a990:	f240 11c5 	movw	r1, #453	; 0x1c5
    a994:	480a      	ldr	r0, [pc, #40]	; (a9c0 <onoff_request+0x104>)
    a996:	f010 f90f 	bl	1abb8 <assert_post_action>
		rv = -EIO;
    a99a:	f06f 0504 	mvn.w	r5, #4
    a99e:	e004      	b.n	a9aa <onoff_request+0xee>
	parent->next = child;
    a9a0:	601f      	str	r7, [r3, #0]
	list->tail = node;
    a9a2:	6067      	str	r7, [r4, #4]
}
    a9a4:	e7e0      	b.n	a968 <onoff_request+0xac>
		rv = -EAGAIN;
    a9a6:	f06f 050a 	mvn.w	r5, #10
    a9aa:	f04f 0800 	mov.w	r8, #0
    a9ae:	e7b6      	b.n	a91e <onoff_request+0x62>
		rv = -ENOTSUP;
    a9b0:	f06f 0522 	mvn.w	r5, #34	; 0x22
    a9b4:	e7f9      	b.n	a9aa <onoff_request+0xee>
    a9b6:	bf00      	nop
    a9b8:	0001fbf1 	.word	0x0001fbf1
    a9bc:	0001fbb7 	.word	0x0001fbb7
    a9c0:	0001fbcf 	.word	0x0001fbcf

0000a9c4 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    a9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9c8:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    a9ca:	4e14      	ldr	r6, [pc, #80]	; (aa1c <z_work_q_main+0x58>)
    a9cc:	f8df 8050 	ldr.w	r8, [pc, #80]	; aa20 <z_work_q_main+0x5c>
	return z_impl_k_queue_get(queue, timeout);
    a9d0:	f04f 32ff 	mov.w	r2, #4294967295
    a9d4:	f04f 33ff 	mov.w	r3, #4294967295
    a9d8:	4628      	mov	r0, r5
    a9da:	f00d fc03 	bl	181e4 <z_impl_k_queue_get>
		if (work == NULL) {
    a9de:	4604      	mov	r4, r0
    a9e0:	2800      	cmp	r0, #0
    a9e2:	d0f5      	beq.n	a9d0 <z_work_q_main+0xc>
		handler = work->handler;
    a9e4:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    a9e6:	b947      	cbnz	r7, a9fa <z_work_q_main+0x36>
    a9e8:	4631      	mov	r1, r6
    a9ea:	4640      	mov	r0, r8
    a9ec:	221c      	movs	r2, #28
    a9ee:	f00f fe3d 	bl	1a66c <printk>
    a9f2:	211c      	movs	r1, #28
    a9f4:	4630      	mov	r0, r6
    a9f6:	f010 f8df 	bl	1abb8 <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a9fa:	f104 0308 	add.w	r3, r4, #8
    a9fe:	e8d3 2fef 	ldaex	r2, [r3]
    aa02:	f022 0101 	bic.w	r1, r2, #1
    aa06:	e8c3 1fe0 	stlex	r0, r1, [r3]
    aa0a:	2800      	cmp	r0, #0
    aa0c:	d1f7      	bne.n	a9fe <z_work_q_main+0x3a>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    aa0e:	07d3      	lsls	r3, r2, #31
    aa10:	d501      	bpl.n	aa16 <z_work_q_main+0x52>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    aa12:	4620      	mov	r0, r4
    aa14:	47b8      	blx	r7
	z_impl_k_yield();
    aa16:	f00e fb0f 	bl	19038 <z_impl_k_yield>
    aa1a:	e7d9      	b.n	a9d0 <z_work_q_main+0xc>
    aa1c:	0001fc17 	.word	0x0001fc17
    aa20:	0001fbb7 	.word	0x0001fbb7

0000aa24 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    aa24:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    aa26:	2900      	cmp	r1, #0
    aa28:	d039      	beq.n	aa9e <sys_heap_free+0x7a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    aa2a:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    aa2c:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    aa2e:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    aa30:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
    aa32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    aa36:	bf2c      	ite	cs
    aa38:	2408      	movcs	r4, #8
    aa3a:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    aa3c:	1b0c      	subs	r4, r1, r4
    aa3e:	1b64      	subs	r4, r4, r5
    aa40:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    aa42:	4621      	mov	r1, r4
    aa44:	f00f fe8a 	bl	1a75c <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    aa48:	07c3      	lsls	r3, r0, #31
    aa4a:	d408      	bmi.n	aa5e <sys_heap_free+0x3a>
    aa4c:	4914      	ldr	r1, [pc, #80]	; (aaa0 <sys_heap_free+0x7c>)
    aa4e:	4815      	ldr	r0, [pc, #84]	; (aaa4 <sys_heap_free+0x80>)
    aa50:	229a      	movs	r2, #154	; 0x9a
    aa52:	f00f fe0b 	bl	1a66c <printk>
    aa56:	219a      	movs	r1, #154	; 0x9a
    aa58:	4811      	ldr	r0, [pc, #68]	; (aaa0 <sys_heap_free+0x7c>)
    aa5a:	f010 f8ad 	bl	1abb8 <assert_post_action>
	return c + chunk_size(h, c);
    aa5e:	4621      	mov	r1, r4
    aa60:	4628      	mov	r0, r5
    aa62:	f00f fe91 	bl	1a788 <chunk_size>
    aa66:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    aa68:	4631      	mov	r1, r6
    aa6a:	2200      	movs	r2, #0
    aa6c:	4628      	mov	r0, r5
    aa6e:	f00f fe75 	bl	1a75c <chunk_field>
    aa72:	1a36      	subs	r6, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    aa74:	42b4      	cmp	r4, r6
    aa76:	d008      	beq.n	aa8a <sys_heap_free+0x66>
    aa78:	4909      	ldr	r1, [pc, #36]	; (aaa0 <sys_heap_free+0x7c>)
    aa7a:	480a      	ldr	r0, [pc, #40]	; (aaa4 <sys_heap_free+0x80>)
    aa7c:	22a2      	movs	r2, #162	; 0xa2
    aa7e:	f00f fdf5 	bl	1a66c <printk>
    aa82:	21a2      	movs	r1, #162	; 0xa2
    aa84:	4806      	ldr	r0, [pc, #24]	; (aaa0 <sys_heap_free+0x7c>)
    aa86:	f010 f897 	bl	1abb8 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    aa8a:	4621      	mov	r1, r4
    aa8c:	4628      	mov	r0, r5
    aa8e:	2200      	movs	r2, #0
    aa90:	f00f fe80 	bl	1a794 <set_chunk_used>
	free_chunk(h, c);
    aa94:	4621      	mov	r1, r4
}
    aa96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    aa9a:	f00f bfbd 	b.w	1aa18 <free_chunk>
}
    aa9e:	bd70      	pop	{r4, r5, r6, pc}
    aaa0:	0001fc3a 	.word	0x0001fc3a
    aaa4:	0001fbb7 	.word	0x0001fbb7

0000aaa8 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    aaa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    aaac:	f101 39ff 	add.w	r9, r1, #4294967295
    aab0:	ea19 0f01 	tst.w	r9, r1
{
    aab4:	4680      	mov	r8, r0
    aab6:	460f      	mov	r7, r1
    aab8:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    aaba:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    aabc:	d008      	beq.n	aad0 <sys_heap_aligned_alloc+0x28>
    aabe:	4931      	ldr	r1, [pc, #196]	; (ab84 <sys_heap_aligned_alloc+0xdc>)
    aac0:	4831      	ldr	r0, [pc, #196]	; (ab88 <sys_heap_aligned_alloc+0xe0>)
    aac2:	22fc      	movs	r2, #252	; 0xfc
    aac4:	f00f fdd2 	bl	1a66c <printk>
    aac8:	21fc      	movs	r1, #252	; 0xfc
    aaca:	482e      	ldr	r0, [pc, #184]	; (ab84 <sys_heap_aligned_alloc+0xdc>)
    aacc:	f010 f874 	bl	1abb8 <assert_post_action>
	return big_heap_chunks(h->len);
    aad0:	68a8      	ldr	r0, [r5, #8]
	return big_heap(h) ? 8 : 4;
    aad2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    aad6:	bf2c      	ite	cs
    aad8:	2308      	movcs	r3, #8
    aada:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    aadc:	429f      	cmp	r7, r3
    aade:	d805      	bhi.n	aaec <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    aae0:	4621      	mov	r1, r4
    aae2:	4640      	mov	r0, r8
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    aae4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return sys_heap_alloc(heap, bytes);
    aae8:	f00f bfd8 	b.w	1aa9c <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    aaec:	b91c      	cbnz	r4, aaf6 <sys_heap_aligned_alloc+0x4e>
		return NULL;
    aaee:	2600      	movs	r6, #0
}
    aaf0:	4630      	mov	r0, r6
    aaf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    aaf6:	ebb0 0fd4 	cmp.w	r0, r4, lsr #3
    aafa:	d9f8      	bls.n	aaee <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    aafc:	1939      	adds	r1, r7, r4
    aafe:	1ac9      	subs	r1, r1, r3
    ab00:	f00f fe64 	bl	1a7cc <bytes_to_chunksz.isra.0>
    ab04:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    ab06:	4628      	mov	r0, r5
    ab08:	f00f febb 	bl	1a882 <alloc_chunk>
	if (c0 == 0) {
    ab0c:	4680      	mov	r8, r0
    ab0e:	2800      	cmp	r0, #0
    ab10:	d0ed      	beq.n	aaee <sys_heap_aligned_alloc+0x46>
    ab12:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    ab14:	427f      	negs	r7, r7
    ab16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ab1a:	bf2c      	ite	cs
    ab1c:	2308      	movcs	r3, #8
    ab1e:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    ab20:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    ab24:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    ab26:	444e      	add	r6, r9
    ab28:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ab2a:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ab2c:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ab2e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ab30:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ab32:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    ab36:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    ab38:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ab3c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    ab40:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    ab44:	d208      	bcs.n	ab58 <sys_heap_aligned_alloc+0xb0>
		split_chunks(h, c0, c);
    ab46:	4601      	mov	r1, r0
    ab48:	463a      	mov	r2, r7
    ab4a:	4628      	mov	r0, r5
    ab4c:	f00f fedc 	bl	1a908 <split_chunks>
		free_list_add(h, c0);
    ab50:	4641      	mov	r1, r8
    ab52:	4628      	mov	r0, r5
    ab54:	f00f ff1d 	bl	1a992 <free_list_add>
	return c + chunk_size(h, c);
    ab58:	4639      	mov	r1, r7
    ab5a:	4628      	mov	r0, r5
    ab5c:	f00f fe14 	bl	1a788 <chunk_size>
    ab60:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    ab62:	4284      	cmp	r4, r0
    ab64:	d208      	bcs.n	ab78 <sys_heap_aligned_alloc+0xd0>
		split_chunks(h, c, c_end);
    ab66:	4639      	mov	r1, r7
    ab68:	4628      	mov	r0, r5
    ab6a:	4622      	mov	r2, r4
    ab6c:	f00f fecc 	bl	1a908 <split_chunks>
		free_list_add(h, c_end);
    ab70:	4621      	mov	r1, r4
    ab72:	4628      	mov	r0, r5
    ab74:	f00f ff0d 	bl	1a992 <free_list_add>
	set_chunk_used(h, c, true);
    ab78:	2201      	movs	r2, #1
    ab7a:	4639      	mov	r1, r7
    ab7c:	4628      	mov	r0, r5
    ab7e:	f00f fe09 	bl	1a794 <set_chunk_used>
	return mem;
    ab82:	e7b5      	b.n	aaf0 <sys_heap_aligned_alloc+0x48>
    ab84:	0001fc3a 	.word	0x0001fc3a
    ab88:	0001fbb7 	.word	0x0001fbb7

0000ab8c <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    ab8c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab92:	4607      	mov	r7, r0
    ab94:	460c      	mov	r4, r1
    ab96:	4616      	mov	r6, r2
    ab98:	d20e      	bcs.n	abb8 <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    ab9a:	2a04      	cmp	r2, #4
    ab9c:	d80a      	bhi.n	abb4 <sys_heap_init+0x28>
    ab9e:	493d      	ldr	r1, [pc, #244]	; (ac94 <sys_heap_init+0x108>)
    aba0:	483d      	ldr	r0, [pc, #244]	; (ac98 <sys_heap_init+0x10c>)
    aba2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    aba6:	f00f fd61 	bl	1a66c <printk>
    abaa:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    abae:	4839      	ldr	r0, [pc, #228]	; (ac94 <sys_heap_init+0x108>)
    abb0:	f010 f802 	bl	1abb8 <assert_post_action>
    abb4:	2204      	movs	r2, #4
    abb6:	e000      	b.n	abba <sys_heap_init+0x2e>
    abb8:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
    abba:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    abbc:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    abbe:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    abc0:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    abc4:	f024 0407 	bic.w	r4, r4, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    abc8:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    abca:	2c17      	cmp	r4, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    abcc:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    abd0:	d80a      	bhi.n	abe8 <sys_heap_init+0x5c>
    abd2:	4930      	ldr	r1, [pc, #192]	; (ac94 <sys_heap_init+0x108>)
    abd4:	4830      	ldr	r0, [pc, #192]	; (ac98 <sys_heap_init+0x10c>)
    abd6:	f240 1275 	movw	r2, #373	; 0x175
    abda:	f00f fd47 	bl	1a66c <printk>
    abde:	f240 1175 	movw	r1, #373	; 0x175
    abe2:	482c      	ldr	r0, [pc, #176]	; (ac94 <sys_heap_init+0x108>)
    abe4:	f00f ffe8 	bl	1abb8 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    abe8:	2300      	movs	r3, #0
    abea:	2200      	movs	r2, #0
	heap->heap = h;
    abec:	603d      	str	r5, [r7, #0]
	h->chunk0_hdr_area = 0;
    abee:	e9c5 2300 	strd	r2, r3, [r5]
	h->len = buf_sz;
	h->avail_buckets = 0;
    abf2:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    abf4:	4631      	mov	r1, r6
    abf6:	4630      	mov	r0, r6
	h->len = buf_sz;
    abf8:	60ae      	str	r6, [r5, #8]
	h->avail_buckets = 0;
    abfa:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    abfc:	f00f fdef 	bl	1a7de <bucket_idx.isra.0>
    ac00:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    ac02:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    ac04:	1c47      	adds	r7, r0, #1
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ac06:	4630      	mov	r0, r6
    ac08:	f00f fde0 	bl	1a7cc <bytes_to_chunksz.isra.0>
    ac0c:	341b      	adds	r4, #27
    ac0e:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    ac10:	4420      	add	r0, r4
    ac12:	42b0      	cmp	r0, r6
    ac14:	d30a      	bcc.n	ac2c <sys_heap_init+0xa0>
    ac16:	491f      	ldr	r1, [pc, #124]	; (ac94 <sys_heap_init+0x108>)
    ac18:	481f      	ldr	r0, [pc, #124]	; (ac98 <sys_heap_init+0x10c>)
    ac1a:	f240 1281 	movw	r2, #385	; 0x181
    ac1e:	f00f fd25 	bl	1a66c <printk>
    ac22:	f240 1181 	movw	r1, #385	; 0x181
    ac26:	481b      	ldr	r0, [pc, #108]	; (ac94 <sys_heap_init+0x108>)
    ac28:	f00f ffc6 	bl	1abb8 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    ac2c:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    ac2e:	4619      	mov	r1, r3
    ac30:	f105 0210 	add.w	r2, r5, #16
	for (int i = 0; i < nb_buckets; i++) {
    ac34:	42bb      	cmp	r3, r7
    ac36:	db28      	blt.n	ac8a <sys_heap_init+0xfe>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    ac38:	4622      	mov	r2, r4
    ac3a:	4628      	mov	r0, r5
    ac3c:	2100      	movs	r1, #0
    ac3e:	f00f fdc1 	bl	1a7c4 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    ac42:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
    ac44:	4628      	mov	r0, r5
    ac46:	2201      	movs	r2, #1
    ac48:	2100      	movs	r1, #0
    ac4a:	f00f fda3 	bl	1a794 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    ac4e:	463a      	mov	r2, r7
    ac50:	4621      	mov	r1, r4
    ac52:	f00f fdb7 	bl	1a7c4 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    ac56:	4623      	mov	r3, r4
    ac58:	2200      	movs	r2, #0
    ac5a:	4621      	mov	r1, r4
    ac5c:	4628      	mov	r0, r5
    ac5e:	f00f fd88 	bl	1a772 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    ac62:	4631      	mov	r1, r6
    ac64:	4628      	mov	r0, r5
    ac66:	f00f fdad 	bl	1a7c4 <set_chunk_size>
    ac6a:	463b      	mov	r3, r7
    ac6c:	4631      	mov	r1, r6
    ac6e:	4628      	mov	r0, r5
    ac70:	2200      	movs	r2, #0
    ac72:	f00f fd7e 	bl	1a772 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    ac76:	4631      	mov	r1, r6
    ac78:	4628      	mov	r0, r5
    ac7a:	2201      	movs	r2, #1
    ac7c:	f00f fd8a 	bl	1a794 <set_chunk_used>

	free_list_add(h, chunk0_size);
    ac80:	4621      	mov	r1, r4
}
    ac82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    ac86:	f00f be84 	b.w	1a992 <free_list_add>
		h->buckets[i].next = 0;
    ac8a:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    ac8e:	3301      	adds	r3, #1
    ac90:	e7d0      	b.n	ac34 <sys_heap_init+0xa8>
    ac92:	bf00      	nop
    ac94:	0001fc3a 	.word	0x0001fc3a
    ac98:	0001fbb7 	.word	0x0001fbb7

0000ac9c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    ac9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aca0:	468b      	mov	fp, r1
    aca2:	4692      	mov	sl, r2
    aca4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    aca6:	2500      	movs	r5, #0
{
    aca8:	b091      	sub	sp, #68	; 0x44
    acaa:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    acac:	f89a 0000 	ldrb.w	r0, [sl]
    acb0:	b908      	cbnz	r0, acb6 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    acb2:	4628      	mov	r0, r5
    acb4:	e35f      	b.n	b376 <cbvprintf+0x6da>
		if (*fp != '%') {
    acb6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    acb8:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    acbc:	d007      	beq.n	acce <cbvprintf+0x32>
			OUTC('%');
    acbe:	4659      	mov	r1, fp
    acc0:	9b02      	ldr	r3, [sp, #8]
    acc2:	4798      	blx	r3
    acc4:	2800      	cmp	r0, #0
    acc6:	f2c0 8356 	blt.w	b376 <cbvprintf+0x6da>
    acca:	3501      	adds	r5, #1
			break;
    accc:	e212      	b.n	b0f4 <cbvprintf+0x458>
		} state = {
    acce:	2218      	movs	r2, #24
    acd0:	2100      	movs	r1, #0
    acd2:	a80a      	add	r0, sp, #40	; 0x28
    acd4:	f010 ff39 	bl	1bb4a <memset>
	if (*sp == '%') {
    acd8:	f89a 3001 	ldrb.w	r3, [sl, #1]
    acdc:	2b25      	cmp	r3, #37	; 0x25
    acde:	d078      	beq.n	add2 <cbvprintf+0x136>
    ace0:	2200      	movs	r2, #0
    ace2:	4694      	mov	ip, r2
    ace4:	4696      	mov	lr, r2
    ace6:	4616      	mov	r6, r2
    ace8:	4610      	mov	r0, r2
    acea:	4639      	mov	r1, r7
		switch (*sp) {
    acec:	f817 3b01 	ldrb.w	r3, [r7], #1
    acf0:	2b2b      	cmp	r3, #43	; 0x2b
    acf2:	f000 809d 	beq.w	ae30 <cbvprintf+0x194>
    acf6:	f200 8094 	bhi.w	ae22 <cbvprintf+0x186>
    acfa:	2b20      	cmp	r3, #32
    acfc:	f000 809a 	beq.w	ae34 <cbvprintf+0x198>
    ad00:	2b23      	cmp	r3, #35	; 0x23
    ad02:	f000 809a 	beq.w	ae3a <cbvprintf+0x19e>
    ad06:	b128      	cbz	r0, ad14 <cbvprintf+0x78>
    ad08:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    ad0c:	f040 0004 	orr.w	r0, r0, #4
    ad10:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    ad14:	b12e      	cbz	r6, ad22 <cbvprintf+0x86>
    ad16:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    ad1a:	f040 0008 	orr.w	r0, r0, #8
    ad1e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    ad22:	f1be 0f00 	cmp.w	lr, #0
    ad26:	d005      	beq.n	ad34 <cbvprintf+0x98>
    ad28:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    ad2c:	f040 0010 	orr.w	r0, r0, #16
    ad30:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    ad34:	f1bc 0f00 	cmp.w	ip, #0
    ad38:	d005      	beq.n	ad46 <cbvprintf+0xaa>
    ad3a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    ad3e:	f040 0020 	orr.w	r0, r0, #32
    ad42:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    ad46:	b12a      	cbz	r2, ad54 <cbvprintf+0xb8>
    ad48:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    ad4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    ad50:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    ad54:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    ad58:	f002 0044 	and.w	r0, r2, #68	; 0x44
    ad5c:	2844      	cmp	r0, #68	; 0x44
    ad5e:	d103      	bne.n	ad68 <cbvprintf+0xcc>
		conv->flag_zero = false;
    ad60:	f36f 1286 	bfc	r2, #6, #1
    ad64:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    ad68:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    ad6c:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    ad6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ad72:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    ad76:	d17b      	bne.n	ae70 <cbvprintf+0x1d4>
		conv->width_star = true;
    ad78:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    ad7c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    ad7e:	f042 0201 	orr.w	r2, r2, #1
    ad82:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    ad86:	781a      	ldrb	r2, [r3, #0]
    ad88:	2a2e      	cmp	r2, #46	; 0x2e
    ad8a:	bf0c      	ite	eq
    ad8c:	2101      	moveq	r1, #1
    ad8e:	2100      	movne	r1, #0
    ad90:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    ad94:	f361 0241 	bfi	r2, r1, #1, #1
    ad98:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    ad9c:	d174      	bne.n	ae88 <cbvprintf+0x1ec>
	if (*sp == '*') {
    ad9e:	785a      	ldrb	r2, [r3, #1]
    ada0:	2a2a      	cmp	r2, #42	; 0x2a
    ada2:	d06a      	beq.n	ae7a <cbvprintf+0x1de>
	size_t val = 0;
    ada4:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    ada6:	260a      	movs	r6, #10
	++sp;
    ada8:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    adaa:	4618      	mov	r0, r3
    adac:	f810 2b01 	ldrb.w	r2, [r0], #1
    adb0:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    adb4:	2f09      	cmp	r7, #9
    adb6:	f240 808e 	bls.w	aed6 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    adba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    adbe:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    adc0:	f3c2 0040 	ubfx	r0, r2, #1, #1
    adc4:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    adc8:	f361 0241 	bfi	r2, r1, #1, #1
    adcc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    add0:	e05a      	b.n	ae88 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    add2:	f10a 0702 	add.w	r7, sl, #2
    add6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    adda:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    adde:	07d9      	lsls	r1, r3, #31
    ade0:	f140 8149 	bpl.w	b076 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    ade4:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    ade8:	f1b9 0f00 	cmp.w	r9, #0
    adec:	da07      	bge.n	adfe <cbvprintf+0x162>
				conv->flag_dash = true;
    adee:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    adf2:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    adf6:	f042 0204 	orr.w	r2, r2, #4
    adfa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    adfe:	075a      	lsls	r2, r3, #29
    ae00:	f140 8142 	bpl.w	b088 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    ae04:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    ae08:	f1b8 0f00 	cmp.w	r8, #0
    ae0c:	f280 8141 	bge.w	b092 <cbvprintf+0x3f6>
				conv->prec_present = false;
    ae10:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    ae14:	f36f 0341 	bfc	r3, #1, #1
    ae18:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    ae1c:	f04f 38ff 	mov.w	r8, #4294967295
    ae20:	e137      	b.n	b092 <cbvprintf+0x3f6>
		switch (*sp) {
    ae22:	2b2d      	cmp	r3, #45	; 0x2d
    ae24:	d00c      	beq.n	ae40 <cbvprintf+0x1a4>
    ae26:	2b30      	cmp	r3, #48	; 0x30
    ae28:	f47f af6d 	bne.w	ad06 <cbvprintf+0x6a>
			conv->flag_zero = true;
    ae2c:	2201      	movs	r2, #1
	} while (loop);
    ae2e:	e75c      	b.n	acea <cbvprintf+0x4e>
			conv->flag_plus = true;
    ae30:	2601      	movs	r6, #1
    ae32:	e75a      	b.n	acea <cbvprintf+0x4e>
			conv->flag_space = true;
    ae34:	f04f 0e01 	mov.w	lr, #1
    ae38:	e757      	b.n	acea <cbvprintf+0x4e>
			conv->flag_hash = true;
    ae3a:	f04f 0c01 	mov.w	ip, #1
    ae3e:	e754      	b.n	acea <cbvprintf+0x4e>
		switch (*sp) {
    ae40:	2001      	movs	r0, #1
    ae42:	e752      	b.n	acea <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    ae44:	4633      	mov	r3, r6
    ae46:	fb0c 0202 	mla	r2, ip, r2, r0
    ae4a:	3a30      	subs	r2, #48	; 0x30
    ae4c:	461e      	mov	r6, r3
    ae4e:	f816 0b01 	ldrb.w	r0, [r6], #1
    ae52:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    ae56:	2f09      	cmp	r7, #9
    ae58:	d9f4      	bls.n	ae44 <cbvprintf+0x1a8>
	if (sp != wp) {
    ae5a:	4299      	cmp	r1, r3
    ae5c:	d093      	beq.n	ad86 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    ae5e:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    ae62:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    ae64:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    ae66:	f362 0141 	bfi	r1, r2, #1, #1
    ae6a:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    ae6e:	e78a      	b.n	ad86 <cbvprintf+0xea>
    ae70:	460b      	mov	r3, r1
	size_t val = 0;
    ae72:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    ae74:	f04f 0c0a 	mov.w	ip, #10
    ae78:	e7e8      	b.n	ae4c <cbvprintf+0x1b0>
		conv->prec_star = true;
    ae7a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    ae7e:	3302      	adds	r3, #2
		conv->prec_star = true;
    ae80:	f042 0204 	orr.w	r2, r2, #4
    ae84:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    ae88:	461f      	mov	r7, r3
    ae8a:	f817 2b01 	ldrb.w	r2, [r7], #1
    ae8e:	2a6c      	cmp	r2, #108	; 0x6c
    ae90:	d041      	beq.n	af16 <cbvprintf+0x27a>
    ae92:	d825      	bhi.n	aee0 <cbvprintf+0x244>
    ae94:	2a68      	cmp	r2, #104	; 0x68
    ae96:	d02b      	beq.n	aef0 <cbvprintf+0x254>
    ae98:	2a6a      	cmp	r2, #106	; 0x6a
    ae9a:	d046      	beq.n	af2a <cbvprintf+0x28e>
    ae9c:	2a4c      	cmp	r2, #76	; 0x4c
    ae9e:	d04c      	beq.n	af3a <cbvprintf+0x29e>
    aea0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    aea2:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    aea6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    aeaa:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    aeac:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    aeb0:	f200 80d9 	bhi.w	b066 <cbvprintf+0x3ca>
    aeb4:	2a57      	cmp	r2, #87	; 0x57
    aeb6:	d84d      	bhi.n	af54 <cbvprintf+0x2b8>
    aeb8:	2a41      	cmp	r2, #65	; 0x41
    aeba:	d003      	beq.n	aec4 <cbvprintf+0x228>
    aebc:	3a45      	subs	r2, #69	; 0x45
    aebe:	2a02      	cmp	r2, #2
    aec0:	f200 80d1 	bhi.w	b066 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    aec4:	2204      	movs	r2, #4
    aec6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    aeca:	f362 0302 	bfi	r3, r2, #0, #3
    aece:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    aed2:	2301      	movs	r3, #1
			break;
    aed4:	e09e      	b.n	b014 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    aed6:	fb06 2101 	mla	r1, r6, r1, r2
    aeda:	4603      	mov	r3, r0
    aedc:	3930      	subs	r1, #48	; 0x30
    aede:	e764      	b.n	adaa <cbvprintf+0x10e>
	switch (*sp) {
    aee0:	2a74      	cmp	r2, #116	; 0x74
    aee2:	d026      	beq.n	af32 <cbvprintf+0x296>
    aee4:	2a7a      	cmp	r2, #122	; 0x7a
    aee6:	d1db      	bne.n	aea0 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    aee8:	2206      	movs	r2, #6
    aeea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    aeee:	e00d      	b.n	af0c <cbvprintf+0x270>
		if (*++sp == 'h') {
    aef0:	785a      	ldrb	r2, [r3, #1]
    aef2:	2a68      	cmp	r2, #104	; 0x68
    aef4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    aef8:	d106      	bne.n	af08 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    aefa:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    aefc:	f361 02c6 	bfi	r2, r1, #3, #4
    af00:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    af04:	1c9f      	adds	r7, r3, #2
    af06:	e7cc      	b.n	aea2 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    af08:	4613      	mov	r3, r2
    af0a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    af0c:	f362 03c6 	bfi	r3, r2, #3, #4
    af10:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    af14:	e7c5      	b.n	aea2 <cbvprintf+0x206>
		if (*++sp == 'l') {
    af16:	785a      	ldrb	r2, [r3, #1]
    af18:	2a6c      	cmp	r2, #108	; 0x6c
    af1a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    af1e:	d101      	bne.n	af24 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    af20:	2104      	movs	r1, #4
    af22:	e7eb      	b.n	aefc <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    af24:	4613      	mov	r3, r2
    af26:	2203      	movs	r2, #3
    af28:	e7f0      	b.n	af0c <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    af2a:	2205      	movs	r2, #5
    af2c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    af30:	e7ec      	b.n	af0c <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    af32:	2207      	movs	r2, #7
    af34:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    af38:	e7e8      	b.n	af0c <cbvprintf+0x270>
		conv->unsupported = true;
    af3a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    af3e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    af42:	f023 0302 	bic.w	r3, r3, #2
    af46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    af4a:	f043 0302 	orr.w	r3, r3, #2
    af4e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    af52:	e7a6      	b.n	aea2 <cbvprintf+0x206>
    af54:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    af58:	2920      	cmp	r1, #32
    af5a:	f200 8084 	bhi.w	b066 <cbvprintf+0x3ca>
    af5e:	a001      	add	r0, pc, #4	; (adr r0, af64 <cbvprintf+0x2c8>)
    af60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    af64:	0000b029 	.word	0x0000b029
    af68:	0000b067 	.word	0x0000b067
    af6c:	0000b067 	.word	0x0000b067
    af70:	0000b067 	.word	0x0000b067
    af74:	0000b067 	.word	0x0000b067
    af78:	0000b067 	.word	0x0000b067
    af7c:	0000b067 	.word	0x0000b067
    af80:	0000b067 	.word	0x0000b067
    af84:	0000b067 	.word	0x0000b067
    af88:	0000aec5 	.word	0x0000aec5
    af8c:	0000b067 	.word	0x0000b067
    af90:	0000b029 	.word	0x0000b029
    af94:	0000afe9 	.word	0x0000afe9
    af98:	0000aec5 	.word	0x0000aec5
    af9c:	0000aec5 	.word	0x0000aec5
    afa0:	0000aec5 	.word	0x0000aec5
    afa4:	0000b067 	.word	0x0000b067
    afa8:	0000afe9 	.word	0x0000afe9
    afac:	0000b067 	.word	0x0000b067
    afb0:	0000b067 	.word	0x0000b067
    afb4:	0000b067 	.word	0x0000b067
    afb8:	0000b067 	.word	0x0000b067
    afbc:	0000b031 	.word	0x0000b031
    afc0:	0000b029 	.word	0x0000b029
    afc4:	0000b04d 	.word	0x0000b04d
    afc8:	0000b067 	.word	0x0000b067
    afcc:	0000b067 	.word	0x0000b067
    afd0:	0000b04d 	.word	0x0000b04d
    afd4:	0000b067 	.word	0x0000b067
    afd8:	0000b029 	.word	0x0000b029
    afdc:	0000b067 	.word	0x0000b067
    afe0:	0000b067 	.word	0x0000b067
    afe4:	0000b029 	.word	0x0000b029
		conv->specifier_cat = SPECIFIER_SINT;
    afe8:	2001      	movs	r0, #1
    afea:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    afee:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    aff2:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    aff6:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    aff8:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    affc:	bf02      	ittt	eq
    affe:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    b002:	f041 0101 	orreq.w	r1, r1, #1
    b006:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    b00a:	2a63      	cmp	r2, #99	; 0x63
    b00c:	d131      	bne.n	b072 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    b00e:	3b00      	subs	r3, #0
    b010:	bf18      	it	ne
    b012:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    b014:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    b018:	f3c2 0140 	ubfx	r1, r2, #1, #1
    b01c:	430b      	orrs	r3, r1
    b01e:	f363 0241 	bfi	r2, r3, #1, #1
    b022:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    b026:	e6d8      	b.n	adda <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    b028:	2002      	movs	r0, #2
    b02a:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    b02e:	e7de      	b.n	afee <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    b030:	2103      	movs	r1, #3
    b032:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b036:	f003 0378 	and.w	r3, r3, #120	; 0x78
    b03a:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    b03e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    b042:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    b044:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    b048:	4143      	adcs	r3, r0
    b04a:	e7e3      	b.n	b014 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    b04c:	2103      	movs	r1, #3
    b04e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    b052:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    b056:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    b05a:	bf14      	ite	ne
    b05c:	2301      	movne	r3, #1
    b05e:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    b060:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    b064:	e7d6      	b.n	b014 <cbvprintf+0x378>
		conv->invalid = true;
    b066:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    b06a:	f043 0301 	orr.w	r3, r3, #1
    b06e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    b072:	2300      	movs	r3, #0
    b074:	e7ce      	b.n	b014 <cbvprintf+0x378>
		} else if (conv->width_present) {
    b076:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    b07a:	2a00      	cmp	r2, #0
		int width = -1;
    b07c:	bfac      	ite	ge
    b07e:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    b082:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    b086:	e6ba      	b.n	adfe <cbvprintf+0x162>
		} else if (conv->prec_present) {
    b088:	079b      	lsls	r3, r3, #30
    b08a:	f57f aec7 	bpl.w	ae1c <cbvprintf+0x180>
			precision = conv->prec_value;
    b08e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    b092:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    b094:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    b098:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    b09c:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    b0a0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    b0a4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    b0a6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    b0aa:	d138      	bne.n	b11e <cbvprintf+0x482>
			switch (length_mod) {
    b0ac:	1ecb      	subs	r3, r1, #3
    b0ae:	2b04      	cmp	r3, #4
    b0b0:	d822      	bhi.n	b0f8 <cbvprintf+0x45c>
    b0b2:	e8df f003 	tbb	[pc, r3]
    b0b6:	0903      	.short	0x0903
    b0b8:	2109      	.short	0x2109
    b0ba:	21          	.byte	0x21
    b0bb:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    b0bc:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    b0c0:	17da      	asrs	r2, r3, #31
    b0c2:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    b0c6:	e006      	b.n	b0d6 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    b0c8:	3407      	adds	r4, #7
    b0ca:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    b0ce:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    b0d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    b0d6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    b0da:	f013 0603 	ands.w	r6, r3, #3
    b0de:	d056      	beq.n	b18e <cbvprintf+0x4f2>
			OUTS(sp, fp);
    b0e0:	463b      	mov	r3, r7
    b0e2:	4652      	mov	r2, sl
    b0e4:	4659      	mov	r1, fp
    b0e6:	9802      	ldr	r0, [sp, #8]
    b0e8:	f00f fd50 	bl	1ab8c <outs>
    b0ec:	2800      	cmp	r0, #0
    b0ee:	f2c0 8142 	blt.w	b376 <cbvprintf+0x6da>
    b0f2:	4405      	add	r5, r0
			continue;
    b0f4:	46ba      	mov	sl, r7
    b0f6:	e5d9      	b.n	acac <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b0f8:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    b0fc:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    b0fe:	ea4f 72e3 	mov.w	r2, r3, asr #31
    b102:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    b106:	d105      	bne.n	b114 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    b108:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    b10c:	930a      	str	r3, [sp, #40]	; 0x28
    b10e:	2300      	movs	r3, #0
    b110:	930b      	str	r3, [sp, #44]	; 0x2c
    b112:	e7e0      	b.n	b0d6 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    b114:	2902      	cmp	r1, #2
    b116:	d1de      	bne.n	b0d6 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    b118:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    b11c:	e7d0      	b.n	b0c0 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    b11e:	2b02      	cmp	r3, #2
    b120:	d123      	bne.n	b16a <cbvprintf+0x4ce>
			switch (length_mod) {
    b122:	1ecb      	subs	r3, r1, #3
    b124:	2b04      	cmp	r3, #4
    b126:	d813      	bhi.n	b150 <cbvprintf+0x4b4>
    b128:	e8df f003 	tbb	[pc, r3]
    b12c:	120a0a03 	.word	0x120a0a03
    b130:	12          	.byte	0x12
    b131:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    b132:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    b134:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    b136:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    b138:	920a      	str	r2, [sp, #40]	; 0x28
    b13a:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    b13c:	4604      	mov	r4, r0
    b13e:	e7ca      	b.n	b0d6 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    b140:	1de0      	adds	r0, r4, #7
    b142:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    b146:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    b14a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    b14e:	e7f5      	b.n	b13c <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    b150:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    b154:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    b156:	930a      	str	r3, [sp, #40]	; 0x28
    b158:	f04f 0300 	mov.w	r3, #0
    b15c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    b15e:	d0d3      	beq.n	b108 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    b160:	2902      	cmp	r1, #2
    b162:	d1b8      	bne.n	b0d6 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    b164:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    b168:	e7d0      	b.n	b10c <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    b16a:	2b04      	cmp	r3, #4
    b16c:	d109      	bne.n	b182 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    b16e:	1de3      	adds	r3, r4, #7
    b170:	f023 0307 	bic.w	r3, r3, #7
    b174:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    b178:	e9d3 2300 	ldrd	r2, r3, [r3]
    b17c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    b180:	e7a9      	b.n	b0d6 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    b182:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    b184:	bf04      	itt	eq
    b186:	f854 3b04 	ldreq.w	r3, [r4], #4
    b18a:	930a      	streq	r3, [sp, #40]	; 0x28
    b18c:	e7a3      	b.n	b0d6 <cbvprintf+0x43a>
		switch (conv->specifier) {
    b18e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    b192:	2878      	cmp	r0, #120	; 0x78
    b194:	d8ae      	bhi.n	b0f4 <cbvprintf+0x458>
    b196:	2862      	cmp	r0, #98	; 0x62
    b198:	d822      	bhi.n	b1e0 <cbvprintf+0x544>
    b19a:	2825      	cmp	r0, #37	; 0x25
    b19c:	f43f ad8f 	beq.w	acbe <cbvprintf+0x22>
    b1a0:	2858      	cmp	r0, #88	; 0x58
    b1a2:	d1a7      	bne.n	b0f4 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    b1a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    b1a8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    b1ac:	9300      	str	r3, [sp, #0]
    b1ae:	aa0c      	add	r2, sp, #48	; 0x30
    b1b0:	ab04      	add	r3, sp, #16
    b1b2:	f00f fca5 	bl	1ab00 <encode_uint>
    b1b6:	4682      	mov	sl, r0
			if (precision >= 0) {
    b1b8:	f1b8 0f00 	cmp.w	r8, #0
    b1bc:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    b1c0:	db0c      	blt.n	b1dc <cbvprintf+0x540>
				conv->flag_zero = false;
    b1c2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    b1c6:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    b1ca:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    b1ce:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    b1d0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    b1d4:	d902      	bls.n	b1dc <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    b1d6:	eba8 0303 	sub.w	r3, r8, r3
    b1da:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    b1dc:	4680      	mov	r8, r0
    b1de:	e03d      	b.n	b25c <cbvprintf+0x5c0>
    b1e0:	3863      	subs	r0, #99	; 0x63
    b1e2:	2815      	cmp	r0, #21
    b1e4:	d886      	bhi.n	b0f4 <cbvprintf+0x458>
    b1e6:	a201      	add	r2, pc, #4	; (adr r2, b1ec <cbvprintf+0x550>)
    b1e8:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    b1ec:	0000b26d 	.word	0x0000b26d
    b1f0:	0000b2d1 	.word	0x0000b2d1
    b1f4:	0000b0f5 	.word	0x0000b0f5
    b1f8:	0000b0f5 	.word	0x0000b0f5
    b1fc:	0000b0f5 	.word	0x0000b0f5
    b200:	0000b0f5 	.word	0x0000b0f5
    b204:	0000b2d1 	.word	0x0000b2d1
    b208:	0000b0f5 	.word	0x0000b0f5
    b20c:	0000b0f5 	.word	0x0000b0f5
    b210:	0000b0f5 	.word	0x0000b0f5
    b214:	0000b0f5 	.word	0x0000b0f5
    b218:	0000b32b 	.word	0x0000b32b
    b21c:	0000b2f9 	.word	0x0000b2f9
    b220:	0000b2fd 	.word	0x0000b2fd
    b224:	0000b0f5 	.word	0x0000b0f5
    b228:	0000b0f5 	.word	0x0000b0f5
    b22c:	0000b245 	.word	0x0000b245
    b230:	0000b0f5 	.word	0x0000b0f5
    b234:	0000b2f9 	.word	0x0000b2f9
    b238:	0000b0f5 	.word	0x0000b0f5
    b23c:	0000b0f5 	.word	0x0000b0f5
    b240:	0000b2f9 	.word	0x0000b2f9
			if (precision >= 0) {
    b244:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    b248:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    b24c:	db0a      	blt.n	b264 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    b24e:	4641      	mov	r1, r8
    b250:	4650      	mov	r0, sl
    b252:	f010 fc18 	bl	1ba86 <strnlen>
		char sign = 0;
    b256:	2600      	movs	r6, #0
			bpe = bps + len;
    b258:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    b25c:	f1ba 0f00 	cmp.w	sl, #0
    b260:	d10c      	bne.n	b27c <cbvprintf+0x5e0>
    b262:	e747      	b.n	b0f4 <cbvprintf+0x458>
				len = strlen(bps);
    b264:	4650      	mov	r0, sl
    b266:	f010 fc07 	bl	1ba78 <strlen>
    b26a:	e7f4      	b.n	b256 <cbvprintf+0x5ba>
			break;
    b26c:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    b270:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    b274:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    b278:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    b27c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    b280:	b106      	cbz	r6, b284 <cbvprintf+0x5e8>
			nj_len += 1U;
    b282:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    b284:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    b288:	06d0      	lsls	r0, r2, #27
    b28a:	d568      	bpl.n	b35e <cbvprintf+0x6c2>
			nj_len += 2U;
    b28c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    b28e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    b290:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    b292:	bf48      	it	mi
    b294:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    b296:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    b298:	bf48      	it	mi
    b29a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    b29c:	f1b9 0f00 	cmp.w	r9, #0
    b2a0:	dd76      	ble.n	b390 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    b2a2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    b2a6:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    b2aa:	f3c2 0380 	ubfx	r3, r2, #2, #1
    b2ae:	9303      	str	r3, [sp, #12]
    b2b0:	0753      	lsls	r3, r2, #29
    b2b2:	d46d      	bmi.n	b390 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    b2b4:	0650      	lsls	r0, r2, #25
    b2b6:	d561      	bpl.n	b37c <cbvprintf+0x6e0>
					if (sign != 0) {
    b2b8:	b146      	cbz	r6, b2cc <cbvprintf+0x630>
						OUTC(sign);
    b2ba:	4659      	mov	r1, fp
    b2bc:	4630      	mov	r0, r6
    b2be:	9b02      	ldr	r3, [sp, #8]
    b2c0:	4798      	blx	r3
    b2c2:	2800      	cmp	r0, #0
    b2c4:	db57      	blt.n	b376 <cbvprintf+0x6da>
						sign = 0;
    b2c6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    b2c8:	3501      	adds	r5, #1
						sign = 0;
    b2ca:	461e      	mov	r6, r3
					pad = '0';
    b2cc:	2330      	movs	r3, #48	; 0x30
    b2ce:	e056      	b.n	b37e <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    b2d0:	071e      	lsls	r6, r3, #28
    b2d2:	d40f      	bmi.n	b2f4 <cbvprintf+0x658>
				sign = ' ';
    b2d4:	f013 0610 	ands.w	r6, r3, #16
    b2d8:	bf18      	it	ne
    b2da:	2620      	movne	r6, #32
			if (value->sint < 0) {
    b2dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    b2e0:	2b00      	cmp	r3, #0
    b2e2:	f6bf af5f 	bge.w	b1a4 <cbvprintf+0x508>
				value->uint = (uint_value_type)-value->sint;
    b2e6:	4252      	negs	r2, r2
    b2e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    b2ec:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    b2ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    b2f2:	e757      	b.n	b1a4 <cbvprintf+0x508>
				sign = '+';
    b2f4:	262b      	movs	r6, #43	; 0x2b
    b2f6:	e7f1      	b.n	b2dc <cbvprintf+0x640>
		switch (conv->specifier) {
    b2f8:	2600      	movs	r6, #0
    b2fa:	e753      	b.n	b1a4 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    b2fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    b2fe:	b340      	cbz	r0, b352 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b300:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    b304:	9300      	str	r3, [sp, #0]
    b306:	2100      	movs	r1, #0
    b308:	ab04      	add	r3, sp, #16
    b30a:	aa0c      	add	r2, sp, #48	; 0x30
    b30c:	f00f fbf8 	bl	1ab00 <encode_uint>
				conv->altform_0c = true;
    b310:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    b314:	4682      	mov	sl, r0
				conv->altform_0c = true;
    b316:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    b31a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    b31e:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    b322:	2600      	movs	r6, #0
				conv->altform_0c = true;
    b324:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    b328:	e746      	b.n	b1b8 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    b32a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    b32c:	2907      	cmp	r1, #7
    b32e:	f63f aee1 	bhi.w	b0f4 <cbvprintf+0x458>
    b332:	e8df f001 	tbb	[pc, r1]
    b336:	040c      	.short	0x040c
    b338:	08080c06 	.word	0x08080c06
    b33c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    b33e:	701d      	strb	r5, [r3, #0]
		break;
    b340:	e6d8      	b.n	b0f4 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    b342:	801d      	strh	r5, [r3, #0]
		break;
    b344:	e6d6      	b.n	b0f4 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    b346:	17ea      	asrs	r2, r5, #31
    b348:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    b34c:	e6d2      	b.n	b0f4 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    b34e:	601d      	str	r5, [r3, #0]
		break;
    b350:	e6d0      	b.n	b0f4 <cbvprintf+0x458>
			bps = "(nil)";
    b352:	f8df a0c8 	ldr.w	sl, [pc, #200]	; b41c <cbvprintf+0x780>
    b356:	4606      	mov	r6, r0
			bpe = bps + 5;
    b358:	f10a 0805 	add.w	r8, sl, #5
    b35c:	e78e      	b.n	b27c <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    b35e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    b360:	bf48      	it	mi
    b362:	3301      	addmi	r3, #1
    b364:	e793      	b.n	b28e <cbvprintf+0x5f2>
					OUTC(pad);
    b366:	4618      	mov	r0, r3
    b368:	9303      	str	r3, [sp, #12]
    b36a:	4659      	mov	r1, fp
    b36c:	9b02      	ldr	r3, [sp, #8]
    b36e:	4798      	blx	r3
    b370:	2800      	cmp	r0, #0
    b372:	9b03      	ldr	r3, [sp, #12]
    b374:	da04      	bge.n	b380 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    b376:	b011      	add	sp, #68	; 0x44
    b378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    b37c:	2320      	movs	r3, #32
    b37e:	444d      	add	r5, r9
    b380:	464a      	mov	r2, r9
				while (width-- > 0) {
    b382:	2a00      	cmp	r2, #0
    b384:	eba5 0109 	sub.w	r1, r5, r9
    b388:	f109 39ff 	add.w	r9, r9, #4294967295
    b38c:	dceb      	bgt.n	b366 <cbvprintf+0x6ca>
    b38e:	460d      	mov	r5, r1
		if (sign != 0) {
    b390:	b136      	cbz	r6, b3a0 <cbvprintf+0x704>
			OUTC(sign);
    b392:	4659      	mov	r1, fp
    b394:	4630      	mov	r0, r6
    b396:	9b02      	ldr	r3, [sp, #8]
    b398:	4798      	blx	r3
    b39a:	2800      	cmp	r0, #0
    b39c:	dbeb      	blt.n	b376 <cbvprintf+0x6da>
    b39e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    b3a0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b3a4:	06d9      	lsls	r1, r3, #27
    b3a6:	d401      	bmi.n	b3ac <cbvprintf+0x710>
    b3a8:	071a      	lsls	r2, r3, #28
    b3aa:	d506      	bpl.n	b3ba <cbvprintf+0x71e>
				OUTC('0');
    b3ac:	4659      	mov	r1, fp
    b3ae:	2030      	movs	r0, #48	; 0x30
    b3b0:	9b02      	ldr	r3, [sp, #8]
    b3b2:	4798      	blx	r3
    b3b4:	2800      	cmp	r0, #0
    b3b6:	dbde      	blt.n	b376 <cbvprintf+0x6da>
    b3b8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    b3ba:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    b3be:	06db      	lsls	r3, r3, #27
    b3c0:	d507      	bpl.n	b3d2 <cbvprintf+0x736>
				OUTC(conv->specifier);
    b3c2:	4659      	mov	r1, fp
    b3c4:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    b3c8:	9b02      	ldr	r3, [sp, #8]
    b3ca:	4798      	blx	r3
    b3cc:	2800      	cmp	r0, #0
    b3ce:	dbd2      	blt.n	b376 <cbvprintf+0x6da>
    b3d0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    b3d2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    b3d4:	442e      	add	r6, r5
    b3d6:	1b73      	subs	r3, r6, r5
    b3d8:	2b00      	cmp	r3, #0
    b3da:	dc16      	bgt.n	b40a <cbvprintf+0x76e>
			OUTS(bps, bpe);
    b3dc:	4643      	mov	r3, r8
    b3de:	4652      	mov	r2, sl
    b3e0:	4659      	mov	r1, fp
    b3e2:	9802      	ldr	r0, [sp, #8]
    b3e4:	f00f fbd2 	bl	1ab8c <outs>
    b3e8:	2800      	cmp	r0, #0
    b3ea:	dbc4      	blt.n	b376 <cbvprintf+0x6da>
    b3ec:	4405      	add	r5, r0
		while (width > 0) {
    b3ee:	44a9      	add	r9, r5
    b3f0:	eba9 0305 	sub.w	r3, r9, r5
    b3f4:	2b00      	cmp	r3, #0
    b3f6:	f77f ae7d 	ble.w	b0f4 <cbvprintf+0x458>
			OUTC(' ');
    b3fa:	4659      	mov	r1, fp
    b3fc:	2020      	movs	r0, #32
    b3fe:	9b02      	ldr	r3, [sp, #8]
    b400:	4798      	blx	r3
    b402:	2800      	cmp	r0, #0
    b404:	dbb7      	blt.n	b376 <cbvprintf+0x6da>
    b406:	3501      	adds	r5, #1
			--width;
    b408:	e7f2      	b.n	b3f0 <cbvprintf+0x754>
				OUTC('0');
    b40a:	4659      	mov	r1, fp
    b40c:	2030      	movs	r0, #48	; 0x30
    b40e:	9b02      	ldr	r3, [sp, #8]
    b410:	4798      	blx	r3
    b412:	2800      	cmp	r0, #0
    b414:	dbaf      	blt.n	b376 <cbvprintf+0x6da>
    b416:	3501      	adds	r5, #1
    b418:	e7dd      	b.n	b3d6 <cbvprintf+0x73a>
    b41a:	bf00      	nop
    b41c:	0001fc5b 	.word	0x0001fc5b

0000b420 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    b420:	b148      	cbz	r0, b436 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    b422:	4b05      	ldr	r3, [pc, #20]	; (b438 <arch_busy_wait+0x18>)
    b424:	681a      	ldr	r2, [r3, #0]
    b426:	4b05      	ldr	r3, [pc, #20]	; (b43c <arch_busy_wait+0x1c>)
    b428:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    b42c:	4b04      	ldr	r3, [pc, #16]	; (b440 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    b42e:	4350      	muls	r0, r2
    b430:	f043 0301 	orr.w	r3, r3, #1
    b434:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    b436:	4770      	bx	lr
    b438:	20008534 	.word	0x20008534
    b43c:	000f4240 	.word	0x000f4240
    b440:	0001e5f0 	.word	0x0001e5f0

0000b444 <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    b444:	4b01      	ldr	r3, [pc, #4]	; (b44c <virtio_set_status+0x8>)
    b446:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    b448:	4770      	bx	lr
    b44a:	bf00      	nop
    b44c:	20070000 	.word	0x20070000

0000b450 <init_status_flag>:
    b450:	2000      	movs	r0, #0
    b452:	4b01      	ldr	r3, [pc, #4]	; (b458 <init_status_flag+0x8>)
    b454:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    b456:	4770      	bx	lr
    b458:	20070000 	.word	0x20070000

0000b45c <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    b45c:	4b01      	ldr	r3, [pc, #4]	; (b464 <ipm_callback_process+0x8>)
    b45e:	6818      	ldr	r0, [r3, #0]
    b460:	f012 bb00 	b.w	1da64 <virtqueue_notification>
    b464:	2000a658 	.word	0x2000a658

0000b468 <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b468:	4b0a      	ldr	r3, [pc, #40]	; (b494 <virtio_notify+0x2c>)
{
    b46a:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    b46c:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    b46e:	2300      	movs	r3, #0
    b470:	6882      	ldr	r2, [r0, #8]
    b472:	9300      	str	r3, [sp, #0]
    b474:	6814      	ldr	r4, [r2, #0]
    b476:	4619      	mov	r1, r3
    b478:	461a      	mov	r2, r3
    b47a:	47a0      	blx	r4
	if (status != 0) {
    b47c:	4602      	mov	r2, r0
    b47e:	b130      	cbz	r0, b48e <virtio_notify+0x26>
		LOG_ERR("ipm_send failed to notify: %d", status);
    b480:	2145      	movs	r1, #69	; 0x45
    b482:	4805      	ldr	r0, [pc, #20]	; (b498 <virtio_notify+0x30>)
}
    b484:	b002      	add	sp, #8
    b486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    b48a:	f00f b8ef 	b.w	1a66c <printk>
}
    b48e:	b002      	add	sp, #8
    b490:	bd10      	pop	{r4, pc}
    b492:	bf00      	nop
    b494:	2000a648 	.word	0x2000a648
    b498:	0001fc8d 	.word	0x0001fc8d

0000b49c <ipm_callback>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b49c:	4907      	ldr	r1, [pc, #28]	; (b4bc <ipm_callback+0x20>)
    b49e:	e8d1 3fef 	ldaex	r3, [r1]
    b4a2:	f043 0201 	orr.w	r2, r3, #1
    b4a6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    b4aa:	2800      	cmp	r0, #0
    b4ac:	d1f7      	bne.n	b49e <ipm_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    b4ae:	07db      	lsls	r3, r3, #31
    b4b0:	d403      	bmi.n	b4ba <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    b4b2:	4803      	ldr	r0, [pc, #12]	; (b4c0 <ipm_callback+0x24>)
    b4b4:	3908      	subs	r1, #8
    b4b6:	f012 bc96 	b.w	1dde6 <k_queue_append>
}
    b4ba:	4770      	bx	lr
    b4bc:	2000a654 	.word	0x2000a654
    b4c0:	200089d0 	.word	0x200089d0

0000b4c4 <rpmsg_backend_init>:
{
    b4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b4c6:	4b47      	ldr	r3, [pc, #284]	; (b5e4 <rpmsg_backend_init+0x120>)
{
    b4c8:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b4ca:	ac02      	add	r4, sp, #8
{
    b4cc:	4606      	mov	r6, r0
    b4ce:	460d      	mov	r5, r1
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b4d0:	e893 0003 	ldmia.w	r3, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b4d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    b4d8:	e884 0003 	stmia.w	r4, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    b4dc:	f04f 33ff 	mov.w	r3, #4294967295
    b4e0:	4941      	ldr	r1, [pc, #260]	; (b5e8 <rpmsg_backend_init+0x124>)
    b4e2:	4842      	ldr	r0, [pc, #264]	; (b5ec <rpmsg_backend_init+0x128>)
    b4e4:	f00e f926 	bl	19734 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    b4e8:	4941      	ldr	r1, [pc, #260]	; (b5f0 <rpmsg_backend_init+0x12c>)
    b4ea:	4842      	ldr	r0, [pc, #264]	; (b5f4 <rpmsg_backend_init+0x130>)
    b4ec:	f012 fced 	bl	1deca <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b4f0:	2200      	movs	r2, #0
    b4f2:	4b41      	ldr	r3, [pc, #260]	; (b5f8 <rpmsg_backend_init+0x134>)
    b4f4:	4941      	ldr	r1, [pc, #260]	; (b5fc <rpmsg_backend_init+0x138>)
	err = metal_init(&metal_params);
    b4f6:	4620      	mov	r0, r4
    b4f8:	e9c3 1201 	strd	r1, r2, [r3, #4]
    b4fc:	601a      	str	r2, [r3, #0]
    b4fe:	f00b fdef 	bl	170e0 <metal_init>
	if (err) {
    b502:	4604      	mov	r4, r0
    b504:	b138      	cbz	r0, b516 <rpmsg_backend_init+0x52>
		LOG_ERR("metal_init: failed - error code %d", err);
    b506:	2145      	movs	r1, #69	; 0x45
    b508:	4602      	mov	r2, r0
    b50a:	483d      	ldr	r0, [pc, #244]	; (b600 <rpmsg_backend_init+0x13c>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b50c:	f00f f8ae 	bl	1a66c <printk>
}
    b510:	4620      	mov	r0, r4
    b512:	b005      	add	sp, #20
    b514:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    b516:	483b      	ldr	r0, [pc, #236]	; (b604 <rpmsg_backend_init+0x140>)
    b518:	f00b fdc2 	bl	170a0 <metal_register_generic_device>
	if (err) {
    b51c:	4604      	mov	r4, r0
    b51e:	b118      	cbz	r0, b528 <rpmsg_backend_init+0x64>
		LOG_ERR("Couldn't register shared memory device: %d", err);
    b520:	4602      	mov	r2, r0
    b522:	2145      	movs	r1, #69	; 0x45
    b524:	4838      	ldr	r0, [pc, #224]	; (b608 <rpmsg_backend_init+0x144>)
    b526:	e7f1      	b.n	b50c <rpmsg_backend_init+0x48>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    b528:	4938      	ldr	r1, [pc, #224]	; (b60c <rpmsg_backend_init+0x148>)
    b52a:	4839      	ldr	r0, [pc, #228]	; (b610 <rpmsg_backend_init+0x14c>)
    b52c:	aa01      	add	r2, sp, #4
    b52e:	f012 f819 	bl	1d564 <metal_device_open>
	if (err) {
    b532:	4604      	mov	r4, r0
    b534:	b118      	cbz	r0, b53e <rpmsg_backend_init+0x7a>
		LOG_ERR("metal_device_open failed: %d", err);
    b536:	4602      	mov	r2, r0
    b538:	2145      	movs	r1, #69	; 0x45
    b53a:	4836      	ldr	r0, [pc, #216]	; (b614 <rpmsg_backend_init+0x150>)
    b53c:	e7e6      	b.n	b50c <rpmsg_backend_init+0x48>
	*io = metal_device_io_region(device, 0);
    b53e:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    b540:	689a      	ldr	r2, [r3, #8]
    b542:	b92a      	cbnz	r2, b550 <rpmsg_backend_init+0x8c>
    b544:	6030      	str	r0, [r6, #0]
		LOG_ERR("metal_device_io_region failed to get region");
    b546:	2145      	movs	r1, #69	; 0x45
    b548:	4833      	ldr	r0, [pc, #204]	; (b618 <rpmsg_backend_init+0x154>)
    b54a:	f00f f88f 	bl	1a66c <printk>
		return err;
    b54e:	e7df      	b.n	b510 <rpmsg_backend_init+0x4c>
    b550:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    b552:	6033      	str	r3, [r6, #0]
	if (!*io) {
    b554:	2b00      	cmp	r3, #0
    b556:	d0f6      	beq.n	b546 <rpmsg_backend_init+0x82>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    b558:	4830      	ldr	r0, [pc, #192]	; (b61c <rpmsg_backend_init+0x158>)
    b55a:	f00c f8d9 	bl	17710 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    b55e:	4f30      	ldr	r7, [pc, #192]	; (b620 <rpmsg_backend_init+0x15c>)
    b560:	6038      	str	r0, [r7, #0]
    b562:	4830      	ldr	r0, [pc, #192]	; (b624 <rpmsg_backend_init+0x160>)
    b564:	f00c f8d4 	bl	17710 <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    b568:	683a      	ldr	r2, [r7, #0]
    b56a:	b932      	cbnz	r2, b57a <rpmsg_backend_init+0xb6>
		LOG_ERR("Could not get TX IPM device handle");
    b56c:	2145      	movs	r1, #69	; 0x45
    b56e:	482e      	ldr	r0, [pc, #184]	; (b628 <rpmsg_backend_init+0x164>)
		LOG_ERR("Could not get RX IPM device handle");
    b570:	f00f f87c 	bl	1a66c <printk>
		return -ENODEV;
    b574:	f06f 0412 	mvn.w	r4, #18
    b578:	e7ca      	b.n	b510 <rpmsg_backend_init+0x4c>
	if (!ipm_rx_handle) {
    b57a:	b910      	cbnz	r0, b582 <rpmsg_backend_init+0xbe>
		LOG_ERR("Could not get RX IPM device handle");
    b57c:	2145      	movs	r1, #69	; 0x45
    b57e:	482b      	ldr	r0, [pc, #172]	; (b62c <rpmsg_backend_init+0x168>)
    b580:	e7f6      	b.n	b570 <rpmsg_backend_init+0xac>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    b582:	6883      	ldr	r3, [r0, #8]
    b584:	4622      	mov	r2, r4
    b586:	685b      	ldr	r3, [r3, #4]
    b588:	4929      	ldr	r1, [pc, #164]	; (b630 <rpmsg_backend_init+0x16c>)
    b58a:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    b58c:	f00f fb54 	bl	1ac38 <virtqueue_allocate.constprop.0>
    b590:	4f28      	ldr	r7, [pc, #160]	; (b634 <rpmsg_backend_init+0x170>)
    b592:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    b594:	b930      	cbnz	r0, b5a4 <rpmsg_backend_init+0xe0>
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    b596:	2145      	movs	r1, #69	; 0x45
    b598:	4827      	ldr	r0, [pc, #156]	; (b638 <rpmsg_backend_init+0x174>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    b59a:	f00f f867 	bl	1a66c <printk>
		return -ENOMEM;
    b59e:	f06f 040b 	mvn.w	r4, #11
    b5a2:	e7b5      	b.n	b510 <rpmsg_backend_init+0x4c>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    b5a4:	f00f fb48 	bl	1ac38 <virtqueue_allocate.constprop.0>
    b5a8:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    b5aa:	b910      	cbnz	r0, b5b2 <rpmsg_backend_init+0xee>
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    b5ac:	2145      	movs	r1, #69	; 0x45
    b5ae:	4823      	ldr	r0, [pc, #140]	; (b63c <rpmsg_backend_init+0x178>)
    b5b0:	e7f3      	b.n	b59a <rpmsg_backend_init+0xd6>
	rvrings[0].io = *io;
    b5b2:	6832      	ldr	r2, [r6, #0]
    b5b4:	4b22      	ldr	r3, [pc, #136]	; (b640 <rpmsg_backend_init+0x17c>)
	rvrings[0].info.num_descs = VRING_SIZE;
    b5b6:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    b5b8:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    b5ba:	4a22      	ldr	r2, [pc, #136]	; (b644 <rpmsg_backend_init+0x180>)
	rvrings[0].vq = vq[0];
    b5bc:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    b5be:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b5c0:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    b5c2:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b5c4:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    b5c6:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    b5c8:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    b5ca:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b5cc:	4e1e      	ldr	r6, [pc, #120]	; (b648 <rpmsg_backend_init+0x184>)
	vdev->vrings_num = VRING_COUNT;
    b5ce:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    b5d0:	4a1e      	ldr	r2, [pc, #120]	; (b64c <rpmsg_backend_init+0x188>)
	rvrings[1].info.num_descs = VRING_SIZE;
    b5d2:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b5d4:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    b5d6:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    b5d8:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    b5da:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    b5dc:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    b5de:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    b5e0:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    b5e2:	e795      	b.n	b510 <rpmsg_backend_init+0x4c>
    b5e4:	0001e568 	.word	0x0001e568
    b5e8:	2000c9b8 	.word	0x2000c9b8
    b5ec:	200089d0 	.word	0x200089d0
    b5f0:	0001fcb0 	.word	0x0001fcb0
    b5f4:	200089f0 	.word	0x200089f0
    b5f8:	2000a64c 	.word	0x2000a64c
    b5fc:	0000b45d 	.word	0x0000b45d
    b600:	0001fcbb 	.word	0x0001fcbb
    b604:	2000824c 	.word	0x2000824c
    b608:	0001fce3 	.word	0x0001fce3
    b60c:	0001fd13 	.word	0x0001fd13
    b610:	0001fd1d 	.word	0x0001fd1d
    b614:	0001fd25 	.word	0x0001fd25
    b618:	0001fd47 	.word	0x0001fd47
    b61c:	0001fd78 	.word	0x0001fd78
    b620:	2000a648 	.word	0x2000a648
    b624:	0001fd7e 	.word	0x0001fd7e
    b628:	0001fd84 	.word	0x0001fd84
    b62c:	0001fdac 	.word	0x0001fdac
    b630:	0000b49d 	.word	0x0000b49d
    b634:	2000a658 	.word	0x2000a658
    b638:	0001fdd4 	.word	0x0001fdd4
    b63c:	0001fe02 	.word	0x0001fe02
    b640:	2000821c 	.word	0x2000821c
    b644:	2007fc00 	.word	0x2007fc00
    b648:	2007f800 	.word	0x2007f800
    b64c:	0001e77c 	.word	0x0001e77c

0000b650 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    b650:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    b654:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    b656:	4e1b      	ldr	r6, [pc, #108]	; (b6c4 <ns_bind_cb+0x74>)
{
    b658:	4607      	mov	r7, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    b65a:	6831      	ldr	r1, [r6, #0]
    b65c:	4628      	mov	r0, r5
{
    b65e:	4690      	mov	r8, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    b660:	f010 fa1a 	bl	1ba98 <strcmp>
    b664:	b168      	cbz	r0, b682 <ns_bind_cb+0x32>
    b666:	4628      	mov	r0, r5
    b668:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    b66a:	f010 fa15 	bl	1ba98 <strcmp>
    b66e:	b138      	cbz	r0, b680 <ns_bind_cb+0x30>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    b670:	462a      	mov	r2, r5
    b672:	2145      	movs	r1, #69	; 0x45
    b674:	4814      	ldr	r0, [pc, #80]	; (b6c8 <ns_bind_cb+0x78>)
}
    b676:	b004      	add	sp, #16
    b678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    b67c:	f00e bff6 	b.w	1a66c <printk>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b680:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    b682:	244c      	movs	r4, #76	; 0x4c
    b684:	4344      	muls	r4, r0
    b686:	4b11      	ldr	r3, [pc, #68]	; (b6cc <ns_bind_cb+0x7c>)
    b688:	f104 0008 	add.w	r0, r4, #8
    b68c:	9302      	str	r3, [sp, #8]
    b68e:	4434      	add	r4, r6
    b690:	6863      	ldr	r3, [r4, #4]
    b692:	462a      	mov	r2, r5
    b694:	e9cd 8300 	strd	r8, r3, [sp]
    b698:	4639      	mov	r1, r7
    b69a:	f04f 33ff 	mov.w	r3, #4294967295
    b69e:	4430      	add	r0, r6
    b6a0:	f00b fdea 	bl	17278 <rpmsg_create_ept>
			if (err != 0) {
    b6a4:	4603      	mov	r3, r0
    b6a6:	b138      	cbz	r0, b6b8 <ns_bind_cb+0x68>
				LOG_ERR("Creating remote endpoint %s"
    b6a8:	462a      	mov	r2, r5
    b6aa:	2145      	movs	r1, #69	; 0x45
    b6ac:	4808      	ldr	r0, [pc, #32]	; (b6d0 <ns_bind_cb+0x80>)
}
    b6ae:	b004      	add	sp, #16
    b6b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    b6b4:	f00e bfda 	b.w	1a66c <printk>
				endpoints[i].bound = true;
    b6b8:	2301      	movs	r3, #1
    b6ba:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    b6be:	b004      	add	sp, #16
    b6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b6c4:	2000a660 	.word	0x2000a660
    b6c8:	0001fe3e 	.word	0x0001fe3e
    b6cc:	0001ac53 	.word	0x0001ac53
    b6d0:	0001fe6d 	.word	0x0001fe6d

0000b6d4 <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    b6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    b6d6:	4d13      	ldr	r5, [pc, #76]	; (b724 <rpmsg_service_init+0x50>)
    b6d8:	4913      	ldr	r1, [pc, #76]	; (b728 <rpmsg_service_init+0x54>)
    b6da:	4628      	mov	r0, r5
    b6dc:	f7ff fef2 	bl	b4c4 <rpmsg_backend_init>
	if (err) {
    b6e0:	4604      	mov	r4, r0
    b6e2:	b138      	cbz	r0, b6f4 <rpmsg_service_init+0x20>
		LOG_ERR("RPMsg backend init failed with error %d", err);
    b6e4:	2145      	movs	r1, #69	; 0x45
    b6e6:	4602      	mov	r2, r0
    b6e8:	4810      	ldr	r0, [pc, #64]	; (b72c <rpmsg_service_init+0x58>)
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b6ea:	f00e ffbf 	bl	1a66c <printk>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    b6ee:	4620      	mov	r0, r4
    b6f0:	b003      	add	sp, #12
    b6f2:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    b6f4:	4c0e      	ldr	r4, [pc, #56]	; (b730 <rpmsg_service_init+0x5c>)
    b6f6:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    b6fa:	4620      	mov	r0, r4
    b6fc:	490d      	ldr	r1, [pc, #52]	; (b734 <rpmsg_service_init+0x60>)
    b6fe:	f012 fb3b 	bl	1dd78 <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    b702:	9400      	str	r4, [sp, #0]
    b704:	682b      	ldr	r3, [r5, #0]
    b706:	4a0c      	ldr	r2, [pc, #48]	; (b738 <rpmsg_service_init+0x64>)
    b708:	4907      	ldr	r1, [pc, #28]	; (b728 <rpmsg_service_init+0x54>)
    b70a:	480c      	ldr	r0, [pc, #48]	; (b73c <rpmsg_service_init+0x68>)
    b70c:	f00b fee0 	bl	174d0 <rpmsg_init_vdev>
	if (err) {
    b710:	4604      	mov	r4, r0
    b712:	b118      	cbz	r0, b71c <rpmsg_service_init+0x48>
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b714:	4602      	mov	r2, r0
    b716:	2145      	movs	r1, #69	; 0x45
    b718:	4809      	ldr	r0, [pc, #36]	; (b740 <rpmsg_service_init+0x6c>)
    b71a:	e7e6      	b.n	b6ea <rpmsg_service_init+0x16>
	ep_crt_started = true;
    b71c:	2201      	movs	r2, #1
    b71e:	4b09      	ldr	r3, [pc, #36]	; (b744 <rpmsg_service_init+0x70>)
    b720:	701a      	strb	r2, [r3, #0]
	return 0;
    b722:	e7e4      	b.n	b6ee <rpmsg_service_init+0x1a>
    b724:	2000a6f8 	.word	0x2000a6f8
    b728:	20008a80 	.word	0x20008a80
    b72c:	0001fea3 	.word	0x0001fea3
    b730:	2000a78c 	.word	0x2000a78c
    b734:	20070400 	.word	0x20070400
    b738:	0000b651 	.word	0x0000b651
    b73c:	2000a6fc 	.word	0x2000a6fc
    b740:	0001fed0 	.word	0x0001fed0
    b744:	2000c4ba 	.word	0x2000c4ba

0000b748 <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    b748:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    b74a:	4b0d      	ldr	r3, [pc, #52]	; (b780 <rpmsg_service_register_endpoint+0x38>)
{
    b74c:	4602      	mov	r2, r0
	if (ep_crt_started) {
    b74e:	781b      	ldrb	r3, [r3, #0]
    b750:	b993      	cbnz	r3, b778 <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    b752:	4c0c      	ldr	r4, [pc, #48]	; (b784 <rpmsg_service_register_endpoint+0x3c>)
    b754:	6820      	ldr	r0, [r4, #0]
    b756:	b148      	cbz	r0, b76c <rpmsg_service_register_endpoint+0x24>
    b758:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    b75a:	b133      	cbz	r3, b76a <rpmsg_service_register_endpoint+0x22>

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    b75c:	480a      	ldr	r0, [pc, #40]	; (b788 <rpmsg_service_register_endpoint+0x40>)
    b75e:	2145      	movs	r1, #69	; 0x45
    b760:	f00e ff84 	bl	1a66c <printk>

	return -ENOMEM;
    b764:	f06f 000b 	mvn.w	r0, #11
}
    b768:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b76a:	2001      	movs	r0, #1
			endpoints[i].name = name;
    b76c:	234c      	movs	r3, #76	; 0x4c
    b76e:	4343      	muls	r3, r0
    b770:	18e5      	adds	r5, r4, r3
    b772:	50e2      	str	r2, [r4, r3]
			endpoints[i].cb = cb;
    b774:	6069      	str	r1, [r5, #4]
			return i;
    b776:	e7f7      	b.n	b768 <rpmsg_service_register_endpoint+0x20>
		return -EINPROGRESS;
    b778:	f06f 0043 	mvn.w	r0, #67	; 0x43
    b77c:	e7f4      	b.n	b768 <rpmsg_service_register_endpoint+0x20>
    b77e:	bf00      	nop
    b780:	2000c4ba 	.word	0x2000c4ba
    b784:	2000a660 	.word	0x2000a660
    b788:	0001feef 	.word	0x0001feef

0000b78c <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    b78c:	224c      	movs	r2, #76	; 0x4c
    b78e:	4b03      	ldr	r3, [pc, #12]	; (b79c <rpmsg_service_endpoint_is_bound+0x10>)
    b790:	fb02 3300 	mla	r3, r2, r0, r3
    b794:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    b798:	4770      	bx	lr
    b79a:	bf00      	nop
    b79c:	2000a660 	.word	0x2000a660

0000b7a0 <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    b7a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    b7a2:	244c      	movs	r4, #76	; 0x4c
    b7a4:	460b      	mov	r3, r1
    b7a6:	2101      	movs	r1, #1
    b7a8:	4344      	muls	r4, r0
    b7aa:	e9cd 2100 	strd	r2, r1, [sp]
    b7ae:	4d05      	ldr	r5, [pc, #20]	; (b7c4 <rpmsg_service_send+0x24>)
    b7b0:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    b7b2:	3408      	adds	r4, #8
    b7b4:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    b7b8:	1928      	adds	r0, r5, r4
    b7ba:	f00b fd4b 	bl	17254 <rpmsg_send_offchannel_raw>
}
    b7be:	b003      	add	sp, #12
    b7c0:	bd30      	pop	{r4, r5, pc}
    b7c2:	bf00      	nop
    b7c4:	2000a660 	.word	0x2000a660

0000b7c8 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    b7c8:	4b10      	ldr	r3, [pc, #64]	; (b80c <settings_save_one+0x44>)
{
    b7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    b7ce:	681c      	ldr	r4, [r3, #0]
{
    b7d0:	4605      	mov	r5, r0
    b7d2:	460e      	mov	r6, r1
    b7d4:	4617      	mov	r7, r2
	if (!cs) {
    b7d6:	b1ac      	cbz	r4, b804 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    b7d8:	f04f 32ff 	mov.w	r2, #4294967295
    b7dc:	f04f 33ff 	mov.w	r3, #4294967295
    b7e0:	480b      	ldr	r0, [pc, #44]	; (b810 <settings_save_one+0x48>)
    b7e2:	f00c fab7 	bl	17d54 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    b7e6:	6863      	ldr	r3, [r4, #4]
    b7e8:	4632      	mov	r2, r6
    b7ea:	f8d3 8008 	ldr.w	r8, [r3, #8]
    b7ee:	4629      	mov	r1, r5
    b7f0:	463b      	mov	r3, r7
    b7f2:	4620      	mov	r0, r4
    b7f4:	47c0      	blx	r8
    b7f6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    b7f8:	4805      	ldr	r0, [pc, #20]	; (b810 <settings_save_one+0x48>)
    b7fa:	f00c fb77 	bl	17eec <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    b7fe:	4620      	mov	r0, r4
    b800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    b804:	f06f 0401 	mvn.w	r4, #1
    b808:	e7f9      	b.n	b7fe <settings_save_one+0x36>
    b80a:	bf00      	nop
    b80c:	2000a7a0 	.word	0x2000a7a0
    b810:	20008690 	.word	0x20008690

0000b814 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    b814:	2300      	movs	r3, #0
{
    b816:	b530      	push	{r4, r5, lr}
    b818:	b085      	sub	sp, #20
    b81a:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    b81c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    b820:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    b822:	f04f 33ff 	mov.w	r3, #4294967295
    b826:	f04f 32ff 	mov.w	r2, #4294967295
    b82a:	480b      	ldr	r0, [pc, #44]	; (b858 <settings_load_subtree+0x44>)
    b82c:	f00c fa92 	bl	17d54 <z_impl_k_mutex_lock>
	return list->head;
    b830:	4b0a      	ldr	r3, [pc, #40]	; (b85c <settings_load_subtree+0x48>)
    b832:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    b834:	b134      	cbz	r4, b844 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    b836:	6863      	ldr	r3, [r4, #4]
    b838:	4620      	mov	r0, r4
    b83a:	681b      	ldr	r3, [r3, #0]
    b83c:	a901      	add	r1, sp, #4
    b83e:	4798      	blx	r3
	return node->next;
    b840:	6824      	ldr	r4, [r4, #0]
    b842:	e7f7      	b.n	b834 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    b844:	4628      	mov	r0, r5
    b846:	f000 f83b 	bl	b8c0 <settings_commit_subtree>
    b84a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    b84c:	4802      	ldr	r0, [pc, #8]	; (b858 <settings_load_subtree+0x44>)
    b84e:	f00c fb4d 	bl	17eec <z_impl_k_mutex_unlock>
}
    b852:	4620      	mov	r0, r4
    b854:	b005      	add	sp, #20
    b856:	bd30      	pop	{r4, r5, pc}
    b858:	20008690 	.word	0x20008690
    b85c:	2000a798 	.word	0x2000a798

0000b860 <settings_load_subtree_direct>:
{
    b860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    b862:	e9cd 0101 	strd	r0, r1, [sp, #4]
    b866:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    b868:	f04f 33ff 	mov.w	r3, #4294967295
    b86c:	f04f 32ff 	mov.w	r2, #4294967295
    b870:	4809      	ldr	r0, [pc, #36]	; (b898 <settings_load_subtree_direct+0x38>)
    b872:	f00c fa6f 	bl	17d54 <z_impl_k_mutex_lock>
	return list->head;
    b876:	4b09      	ldr	r3, [pc, #36]	; (b89c <settings_load_subtree_direct+0x3c>)
    b878:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    b87a:	b134      	cbz	r4, b88a <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    b87c:	6863      	ldr	r3, [r4, #4]
    b87e:	4620      	mov	r0, r4
    b880:	681b      	ldr	r3, [r3, #0]
    b882:	a901      	add	r1, sp, #4
    b884:	4798      	blx	r3
	return node->next;
    b886:	6824      	ldr	r4, [r4, #0]
    b888:	e7f7      	b.n	b87a <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    b88a:	4803      	ldr	r0, [pc, #12]	; (b898 <settings_load_subtree_direct+0x38>)
    b88c:	f00c fb2e 	bl	17eec <z_impl_k_mutex_unlock>
}
    b890:	2000      	movs	r0, #0
    b892:	b004      	add	sp, #16
    b894:	bd10      	pop	{r4, pc}
    b896:	bf00      	nop
    b898:	20008690 	.word	0x20008690
    b89c:	2000a798 	.word	0x2000a798

0000b8a0 <settings_store_init>:
	list->head = NULL;
    b8a0:	2200      	movs	r2, #0
    b8a2:	4b02      	ldr	r3, [pc, #8]	; (b8ac <settings_store_init+0xc>)
	list->tail = NULL;
    b8a4:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    b8a8:	4770      	bx	lr
    b8aa:	bf00      	nop
    b8ac:	2000a798 	.word	0x2000a798

0000b8b0 <settings_init>:
	list->head = NULL;
    b8b0:	2200      	movs	r2, #0
    b8b2:	4b02      	ldr	r3, [pc, #8]	; (b8bc <settings_init+0xc>)
	list->tail = NULL;
    b8b4:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    b8b8:	f7ff bff2 	b.w	b8a0 <settings_store_init>
    b8bc:	2000a7a4 	.word	0x2000a7a4

0000b8c0 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    b8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8c4:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    b8c6:	2500      	movs	r5, #0

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    b8c8:	4c1f      	ldr	r4, [pc, #124]	; (b948 <settings_commit_subtree+0x88>)
    b8ca:	4f20      	ldr	r7, [pc, #128]	; (b94c <settings_commit_subtree+0x8c>)
    b8cc:	f8df 8080 	ldr.w	r8, [pc, #128]	; b950 <settings_commit_subtree+0x90>
    b8d0:	42bc      	cmp	r4, r7
    b8d2:	d908      	bls.n	b8e6 <settings_commit_subtree+0x26>
    b8d4:	4641      	mov	r1, r8
    b8d6:	481f      	ldr	r0, [pc, #124]	; (b954 <settings_commit_subtree+0x94>)
    b8d8:	22f4      	movs	r2, #244	; 0xf4
    b8da:	f00e fec7 	bl	1a66c <printk>
    b8de:	21f4      	movs	r1, #244	; 0xf4
    b8e0:	4640      	mov	r0, r8
    b8e2:	f00f f969 	bl	1abb8 <assert_post_action>
    b8e6:	42bc      	cmp	r4, r7
    b8e8:	d307      	bcc.n	b8fa <settings_commit_subtree+0x3a>
	return list->head;
    b8ea:	4b1b      	ldr	r3, [pc, #108]	; (b958 <settings_commit_subtree+0x98>)
    b8ec:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    b8ee:	b10c      	cbz	r4, b8f4 <settings_commit_subtree+0x34>
    b8f0:	3c14      	subs	r4, #20
    b8f2:	b9a4      	cbnz	r4, b91e <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    b8f4:	4628      	mov	r0, r5
    b8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b8fa:	b91e      	cbnz	r6, b904 <settings_commit_subtree+0x44>
		if (ch->h_commit) {
    b8fc:	68e3      	ldr	r3, [r4, #12]
    b8fe:	b94b      	cbnz	r3, b914 <settings_commit_subtree+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    b900:	3414      	adds	r4, #20
    b902:	e7e5      	b.n	b8d0 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b904:	2200      	movs	r2, #0
    b906:	4631      	mov	r1, r6
    b908:	6820      	ldr	r0, [r4, #0]
    b90a:	f00f f9ab 	bl	1ac64 <settings_name_steq>
    b90e:	2800      	cmp	r0, #0
    b910:	d1f4      	bne.n	b8fc <settings_commit_subtree+0x3c>
    b912:	e7f5      	b.n	b900 <settings_commit_subtree+0x40>
			rc2 = ch->h_commit();
    b914:	4798      	blx	r3
				rc = rc2;
    b916:	2d00      	cmp	r5, #0
    b918:	bf08      	it	eq
    b91a:	4605      	moveq	r5, r0
    b91c:	e7f0      	b.n	b900 <settings_commit_subtree+0x40>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b91e:	b936      	cbnz	r6, b92e <settings_commit_subtree+0x6e>
		if (ch->h_commit) {
    b920:	68e3      	ldr	r3, [r4, #12]
    b922:	b963      	cbnz	r3, b93e <settings_commit_subtree+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b924:	f114 0f14 	cmn.w	r4, #20
    b928:	d0e4      	beq.n	b8f4 <settings_commit_subtree+0x34>
	return node->next;
    b92a:	6964      	ldr	r4, [r4, #20]
    b92c:	e7df      	b.n	b8ee <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b92e:	2200      	movs	r2, #0
    b930:	4631      	mov	r1, r6
    b932:	6820      	ldr	r0, [r4, #0]
    b934:	f00f f996 	bl	1ac64 <settings_name_steq>
    b938:	2800      	cmp	r0, #0
    b93a:	d1f1      	bne.n	b920 <settings_commit_subtree+0x60>
    b93c:	e7f2      	b.n	b924 <settings_commit_subtree+0x64>
			rc2 = ch->h_commit();
    b93e:	4798      	blx	r3
				rc = rc2;
    b940:	2d00      	cmp	r5, #0
    b942:	bf08      	it	eq
    b944:	4605      	moveq	r5, r0
    b946:	e7ed      	b.n	b924 <settings_commit_subtree+0x64>
    b948:	0001e400 	.word	0x0001e400
    b94c:	0001e464 	.word	0x0001e464
    b950:	0001ff28 	.word	0x0001ff28
    b954:	0001fbb7 	.word	0x0001fbb7
    b958:	2000a7a4 	.word	0x2000a7a4

0000b95c <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    b95c:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    b95e:	4c06      	ldr	r4, [pc, #24]	; (b978 <settings_subsys_init+0x1c>)
    b960:	7823      	ldrb	r3, [r4, #0]
    b962:	b93b      	cbnz	r3, b974 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    b964:	f7ff ffa4 	bl	b8b0 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    b968:	f00f f9b5 	bl	1acd6 <settings_backend_init>

	if (!err) {
    b96c:	b908      	cbnz	r0, b972 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    b96e:	2301      	movs	r3, #1
    b970:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    b972:	bd10      	pop	{r4, pc}
		return 0;
    b974:	2000      	movs	r0, #0
    b976:	e7fc      	b.n	b972 <settings_subsys_init+0x16>
    b978:	2000c4bb 	.word	0x2000c4bb

0000b97c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    b97c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    b97e:	4c04      	ldr	r4, [pc, #16]	; (b990 <rtt_console_init+0x14>)
    b980:	4620      	mov	r0, r4
    b982:	f7fe fd93 	bl	a4ac <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    b986:	4620      	mov	r0, r4
    b988:	f002 fc86 	bl	e298 <__stdout_hook_install>

	return 0;
}
    b98c:	2000      	movs	r0, #0
    b98e:	bd10      	pop	{r4, pc}
    b990:	0000b995 	.word	0x0000b995

0000b994 <rtt_console_out>:
{
    b994:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b998:	4604      	mov	r4, r0
	char c = (char)character;
    b99a:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
    b99c:	f8df 8058 	ldr.w	r8, [pc, #88]	; b9f8 <rtt_console_out+0x64>
    b9a0:	4e16      	ldr	r6, [pc, #88]	; (b9fc <rtt_console_out+0x68>)
    b9a2:	f88d 0007 	strb.w	r0, [sp, #7]
    b9a6:	f04f 33ff 	mov.w	r3, #4294967295
    b9aa:	f04f 32ff 	mov.w	r2, #4294967295
    b9ae:	4640      	mov	r0, r8
    b9b0:	f00c f9d0 	bl	17d54 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    b9b4:	2201      	movs	r2, #1
    b9b6:	f10d 0107 	add.w	r1, sp, #7
    b9ba:	2000      	movs	r0, #0
    b9bc:	f001 fd0a 	bl	d3d4 <SEGGER_RTT_WriteNoLock>
    b9c0:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    b9c2:	4640      	mov	r0, r8
    b9c4:	f00c fa92 	bl	17eec <z_impl_k_mutex_unlock>
		if (cnt) {
    b9c8:	b12f      	cbz	r7, b9d6 <rtt_console_out+0x42>
			host_present = true;
    b9ca:	2301      	movs	r3, #1
    b9cc:	7033      	strb	r3, [r6, #0]
}
    b9ce:	4620      	mov	r0, r4
    b9d0:	b002      	add	sp, #8
    b9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    b9d6:	7833      	ldrb	r3, [r6, #0]
    b9d8:	2b00      	cmp	r3, #0
    b9da:	d0f8      	beq.n	b9ce <rtt_console_out+0x3a>
			if (max_cnt) {
    b9dc:	3d01      	subs	r5, #1
    b9de:	d008      	beq.n	b9f2 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    b9e0:	f012 fa69 	bl	1deb6 <k_is_in_isr>
    b9e4:	2800      	cmp	r0, #0
    b9e6:	d1de      	bne.n	b9a6 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    b9e8:	2100      	movs	r1, #0
    b9ea:	2042      	movs	r0, #66	; 0x42
    b9ec:	f00d fc30 	bl	19250 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    b9f0:	e7d9      	b.n	b9a6 <rtt_console_out+0x12>
				host_present = false;
    b9f2:	7035      	strb	r5, [r6, #0]
    b9f4:	e7eb      	b.n	b9ce <rtt_console_out+0x3a>
    b9f6:	bf00      	nop
    b9f8:	20008668 	.word	0x20008668
    b9fc:	2000c4bc 	.word	0x2000c4bc

0000ba00 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    ba00:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    ba02:	2340      	movs	r3, #64	; 0x40
{
    ba04:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    ba06:	490a      	ldr	r1, [pc, #40]	; (ba30 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    ba08:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    ba0a:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    ba0c:	1149      	asrs	r1, r1, #5
{
    ba0e:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    ba10:	4623      	mov	r3, r4
    ba12:	4a08      	ldr	r2, [pc, #32]	; (ba34 <onoff_start+0x34>)
    ba14:	4808      	ldr	r0, [pc, #32]	; (ba38 <onoff_start+0x38>)
    ba16:	f00f f973 	bl	1ad00 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    ba1a:	1e01      	subs	r1, r0, #0
    ba1c:	da05      	bge.n	ba2a <onoff_start+0x2a>
		notify(mgr, err);
    ba1e:	4628      	mov	r0, r5
    ba20:	4623      	mov	r3, r4
	}
}
    ba22:	b003      	add	sp, #12
    ba24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    ba28:	4718      	bx	r3
}
    ba2a:	b003      	add	sp, #12
    ba2c:	bd30      	pop	{r4, r5, pc}
    ba2e:	bf00      	nop
    ba30:	2000a7bc 	.word	0x2000a7bc
    ba34:	0001ad73 	.word	0x0001ad73
    ba38:	20008588 	.word	0x20008588

0000ba3c <get_status>:
{
    ba3c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    ba3e:	b2cc      	uxtb	r4, r1
    ba40:	2c03      	cmp	r4, #3
{
    ba42:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    ba44:	d908      	bls.n	ba58 <get_status+0x1c>
    ba46:	4909      	ldr	r1, [pc, #36]	; (ba6c <get_status+0x30>)
    ba48:	4809      	ldr	r0, [pc, #36]	; (ba70 <get_status+0x34>)
    ba4a:	227e      	movs	r2, #126	; 0x7e
    ba4c:	f00e fe0e 	bl	1a66c <printk>
    ba50:	217e      	movs	r1, #126	; 0x7e
    ba52:	4806      	ldr	r0, [pc, #24]	; (ba6c <get_status+0x30>)
    ba54:	f00f f8b0 	bl	1abb8 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    ba58:	230c      	movs	r3, #12
    ba5a:	68e9      	ldr	r1, [r5, #12]
    ba5c:	fb04 1403 	mla	r4, r4, r3, r1
    ba60:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    ba64:	f000 0007 	and.w	r0, r0, #7
    ba68:	bd38      	pop	{r3, r4, r5, pc}
    ba6a:	bf00      	nop
    ba6c:	0001ff60 	.word	0x0001ff60
    ba70:	0001fbb7 	.word	0x0001fbb7

0000ba74 <stop>:
{
    ba74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba76:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    ba78:	2c03      	cmp	r4, #3
{
    ba7a:	4605      	mov	r5, r0
    ba7c:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    ba7e:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    ba80:	d90a      	bls.n	ba98 <stop+0x24>
    ba82:	4919      	ldr	r1, [pc, #100]	; (bae8 <stop+0x74>)
    ba84:	4819      	ldr	r0, [pc, #100]	; (baec <stop+0x78>)
    ba86:	f240 1253 	movw	r2, #339	; 0x153
    ba8a:	f00e fdef 	bl	1a66c <printk>
    ba8e:	f240 1153 	movw	r1, #339	; 0x153
    ba92:	4815      	ldr	r0, [pc, #84]	; (bae8 <stop+0x74>)
    ba94:	f00f f890 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
    ba98:	f04f 0320 	mov.w	r3, #32
    ba9c:	f3ef 8111 	mrs	r1, BASEPRI
    baa0:	f383 8811 	msr	BASEPRI, r3
    baa4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    baa8:	220c      	movs	r2, #12
    baaa:	fb02 6304 	mla	r3, r2, r4, r6
    baae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    bab2:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    bab6:	d001      	beq.n	babc <stop+0x48>
    bab8:	429f      	cmp	r7, r3
    baba:	d112      	bne.n	bae2 <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    babc:	2301      	movs	r3, #1
	int err = 0;
    babe:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    bac0:	fb02 6604 	mla	r6, r2, r4, r6
    bac4:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
	__asm__ volatile(
    bac8:	f381 8811 	msr	BASEPRI, r1
    bacc:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    bad0:	b930      	cbnz	r0, bae0 <stop+0x6c>
	get_sub_config(dev, type)->stop();
    bad2:	230c      	movs	r3, #12
    bad4:	6869      	ldr	r1, [r5, #4]
    bad6:	fb03 1404 	mla	r4, r3, r4, r1
    bada:	6863      	ldr	r3, [r4, #4]
    badc:	4798      	blx	r3
	return 0;
    bade:	2000      	movs	r0, #0
}
    bae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    bae2:	f04f 30ff 	mov.w	r0, #4294967295
    bae6:	e7ef      	b.n	bac8 <stop+0x54>
    bae8:	0001ff60 	.word	0x0001ff60
    baec:	0001fbb7 	.word	0x0001fbb7

0000baf0 <onoff_stop>:
{
    baf0:	b570      	push	{r4, r5, r6, lr}
    baf2:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    baf4:	4906      	ldr	r1, [pc, #24]	; (bb10 <onoff_stop+0x20>)
{
    baf6:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    baf8:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    bafa:	1149      	asrs	r1, r1, #5
    bafc:	2240      	movs	r2, #64	; 0x40
    bafe:	4805      	ldr	r0, [pc, #20]	; (bb14 <onoff_stop+0x24>)
    bb00:	f7ff ffb8 	bl	ba74 <stop>
	notify(mgr, res);
    bb04:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    bb06:	4601      	mov	r1, r0
	notify(mgr, res);
    bb08:	4620      	mov	r0, r4
}
    bb0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    bb0e:	4718      	bx	r3
    bb10:	2000a7bc 	.word	0x2000a7bc
    bb14:	20008588 	.word	0x20008588

0000bb18 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    bb18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    bb1c:	2200      	movs	r2, #0
    bb1e:	2101      	movs	r1, #1
{
    bb20:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    bb22:	2005      	movs	r0, #5
    bb24:	f001 fe72 	bl	d80c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    bb28:	2005      	movs	r0, #5
    bb2a:	f001 fe51 	bl	d7d0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    bb2e:	4811      	ldr	r0, [pc, #68]	; (bb74 <clk_init+0x5c>)
    bb30:	f00a ff66 	bl	16a00 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    bb34:	4b10      	ldr	r3, [pc, #64]	; (bb78 <clk_init+0x60>)
    bb36:	4298      	cmp	r0, r3
    bb38:	d119      	bne.n	bb6e <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    bb3a:	f00a ff81 	bl	16a40 <nrfx_clock_enable>
    bb3e:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    bb40:	f04f 080c 	mov.w	r8, #12
    bb44:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    bb46:	f8df 9034 	ldr.w	r9, [pc, #52]	; bb7c <clk_init+0x64>
	struct nrf_clock_control_data *data = dev->data;
    bb4a:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    bb4c:	4649      	mov	r1, r9
    bb4e:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    bb52:	f00e fde6 	bl	1a722 <onoff_manager_init>
		if (err < 0) {
    bb56:	2800      	cmp	r0, #0
    bb58:	db07      	blt.n	bb6a <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    bb5a:	fb08 5504 	mla	r5, r8, r4, r5
	for (enum clock_control_nrf_type i = 0;
    bb5e:	3401      	adds	r4, #1
    bb60:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    bb62:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    bb66:	d1f0      	bne.n	bb4a <clk_init+0x32>
	}

	return 0;
    bb68:	2000      	movs	r0, #0
}
    bb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    bb6e:	f06f 0004 	mvn.w	r0, #4
    bb72:	e7fa      	b.n	bb6a <clk_init+0x52>
    bb74:	0000bbb9 	.word	0x0000bbb9
    bb78:	0bad0000 	.word	0x0bad0000
    bb7c:	0001e7e4 	.word	0x0001e7e4

0000bb80 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    bb80:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    bb82:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    bb84:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    bb86:	434b      	muls	r3, r1
    bb88:	4809      	ldr	r0, [pc, #36]	; (bbb0 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    bb8a:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    bb8c:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    bb8e:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    bb90:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    bb94:	4418      	add	r0, r3
	sub_data->cb = NULL;
    bb96:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    bb9a:	f00f f89e 	bl	1acda <set_on_state>
	if (callback) {
    bb9e:	b12d      	cbz	r5, bbac <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    bba0:	4632      	mov	r2, r6
    bba2:	462b      	mov	r3, r5
}
    bba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    bba8:	4802      	ldr	r0, [pc, #8]	; (bbb4 <clkstarted_handle.constprop.0+0x34>)
    bbaa:	4718      	bx	r3
}
    bbac:	bd70      	pop	{r4, r5, r6, pc}
    bbae:	bf00      	nop
    bbb0:	2000a7bc 	.word	0x2000a7bc
    bbb4:	20008588 	.word	0x20008588

0000bbb8 <clock_event_handler>:
{
    bbb8:	b508      	push	{r3, lr}
    bbba:	2805      	cmp	r0, #5
    bbbc:	d821      	bhi.n	bc02 <clock_event_handler+0x4a>
    bbbe:	e8df f000 	tbb	[pc, r0]
    bbc2:	1103      	.short	0x1103
    bbc4:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    bbc8:	4b13      	ldr	r3, [pc, #76]	; (bc18 <clock_event_handler+0x60>)
    bbca:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    bbce:	f010 0007 	ands.w	r0, r0, #7
    bbd2:	d11f      	bne.n	bc14 <clock_event_handler+0x5c>
}
    bbd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    bbd8:	f7ff bfd2 	b.w	bb80 <clkstarted_handle.constprop.0>
    bbdc:	2002      	movs	r0, #2
    bbde:	e7f9      	b.n	bbd4 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    bbe0:	2003      	movs	r0, #3
    bbe2:	e7f7      	b.n	bbd4 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    bbe4:	2001      	movs	r0, #1
    bbe6:	e7f5      	b.n	bbd4 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    bbe8:	490c      	ldr	r1, [pc, #48]	; (bc1c <clock_event_handler+0x64>)
    bbea:	f240 2266 	movw	r2, #614	; 0x266
    bbee:	480c      	ldr	r0, [pc, #48]	; (bc20 <clock_event_handler+0x68>)
    bbf0:	f00e fd3c 	bl	1a66c <printk>
    bbf4:	f240 2166 	movw	r1, #614	; 0x266
}
    bbf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    bbfc:	4807      	ldr	r0, [pc, #28]	; (bc1c <clock_event_handler+0x64>)
    bbfe:	f00e bfdb 	b.w	1abb8 <assert_post_action>
    bc02:	4906      	ldr	r1, [pc, #24]	; (bc1c <clock_event_handler+0x64>)
    bc04:	f240 226a 	movw	r2, #618	; 0x26a
    bc08:	4805      	ldr	r0, [pc, #20]	; (bc20 <clock_event_handler+0x68>)
    bc0a:	f00e fd2f 	bl	1a66c <printk>
    bc0e:	f240 216a 	movw	r1, #618	; 0x26a
    bc12:	e7f1      	b.n	bbf8 <clock_event_handler+0x40>
}
    bc14:	bd08      	pop	{r3, pc}
    bc16:	bf00      	nop
    bc18:	2000a7bc 	.word	0x2000a7bc
    bc1c:	0001ff60 	.word	0x0001ff60
    bc20:	0001fbb7 	.word	0x0001fbb7

0000bc24 <generic_hfclk_start>:
{
    bc24:	b508      	push	{r3, lr}
	__asm__ volatile(
    bc26:	f04f 0320 	mov.w	r3, #32
    bc2a:	f3ef 8111 	mrs	r1, BASEPRI
    bc2e:	f383 8811 	msr	BASEPRI, r3
    bc32:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    bc36:	4a11      	ldr	r2, [pc, #68]	; (bc7c <generic_hfclk_start+0x58>)
    bc38:	6813      	ldr	r3, [r2, #0]
    bc3a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    bc3e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    bc42:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    bc44:	d00b      	beq.n	bc5e <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    bc46:	4a0e      	ldr	r2, [pc, #56]	; (bc80 <generic_hfclk_start+0x5c>)
    bc48:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    bc4c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    bc50:	f013 0301 	ands.w	r3, r3, #1
    bc54:	d003      	beq.n	bc5e <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    bc56:	480b      	ldr	r0, [pc, #44]	; (bc84 <generic_hfclk_start+0x60>)
    bc58:	f00f f83f 	bl	1acda <set_on_state>
			already_started = true;
    bc5c:	2301      	movs	r3, #1
	__asm__ volatile(
    bc5e:	f381 8811 	msr	BASEPRI, r1
    bc62:	f3bf 8f6f 	isb	sy
	if (already_started) {
    bc66:	b123      	cbz	r3, bc72 <generic_hfclk_start+0x4e>
}
    bc68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    bc6c:	2000      	movs	r0, #0
    bc6e:	f7ff bf87 	b.w	bb80 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    bc72:	2001      	movs	r0, #1
}
    bc74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bc78:	f00a bf06 	b.w	16a88 <nrfx_clock_start>
    bc7c:	2000a86c 	.word	0x2000a86c
    bc80:	40005000 	.word	0x40005000
    bc84:	2000a844 	.word	0x2000a844

0000bc88 <api_blocking_start>:
{
    bc88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    bc8a:	2200      	movs	r2, #0
    bc8c:	2301      	movs	r3, #1
    bc8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    bc92:	ab04      	add	r3, sp, #16
    bc94:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    bc98:	4a09      	ldr	r2, [pc, #36]	; (bcc0 <api_blocking_start+0x38>)
    bc9a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    bc9c:	f8cd d000 	str.w	sp, [sp]
    bca0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    bca4:	f00f f85e 	bl	1ad64 <api_start>
	if (err < 0) {
    bca8:	2800      	cmp	r0, #0
    bcaa:	db05      	blt.n	bcb8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    bcac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    bcb0:	2300      	movs	r3, #0
    bcb2:	4668      	mov	r0, sp
    bcb4:	f00d fb3e 	bl	19334 <z_impl_k_sem_take>
}
    bcb8:	b007      	add	sp, #28
    bcba:	f85d fb04 	ldr.w	pc, [sp], #4
    bcbe:	bf00      	nop
    bcc0:	0001ada9 	.word	0x0001ada9

0000bcc4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bcc4:	4b07      	ldr	r3, [pc, #28]	; (bce4 <generic_hfclk_stop+0x20>)
    bcc6:	e8d3 2fef 	ldaex	r2, [r3]
    bcca:	f022 0102 	bic.w	r1, r2, #2
    bcce:	e8c3 1fe0 	stlex	r0, r1, [r3]
    bcd2:	2800      	cmp	r0, #0
    bcd4:	d1f7      	bne.n	bcc6 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    bcd6:	07d3      	lsls	r3, r2, #31
    bcd8:	d402      	bmi.n	bce0 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    bcda:	2001      	movs	r0, #1
    bcdc:	f00a bf3e 	b.w	16b5c <nrfx_clock_stop>
}
    bce0:	4770      	bx	lr
    bce2:	bf00      	nop
    bce4:	2000a86c 	.word	0x2000a86c

0000bce8 <z_nrf_clock_control_lf_on>:
{
    bce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bcec:	2201      	movs	r2, #1
    bcee:	4606      	mov	r6, r0
    bcf0:	4942      	ldr	r1, [pc, #264]	; (bdfc <z_nrf_clock_control_lf_on+0x114>)
    bcf2:	e8d1 3fef 	ldaex	r3, [r1]
    bcf6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    bcfa:	2800      	cmp	r0, #0
    bcfc:	d1f9      	bne.n	bcf2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    bcfe:	b99b      	cbnz	r3, bd28 <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    bd00:	493f      	ldr	r1, [pc, #252]	; (be00 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
    bd02:	4840      	ldr	r0, [pc, #256]	; (be04 <z_nrf_clock_control_lf_on+0x11c>)
    bd04:	604b      	str	r3, [r1, #4]
    bd06:	60cb      	str	r3, [r1, #12]
    bd08:	608a      	str	r2, [r1, #8]
    bd0a:	f7fe fdd7 	bl	a8bc <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    bd0e:	2800      	cmp	r0, #0
    bd10:	da0a      	bge.n	bd28 <z_nrf_clock_control_lf_on+0x40>
    bd12:	493d      	ldr	r1, [pc, #244]	; (be08 <z_nrf_clock_control_lf_on+0x120>)
    bd14:	483d      	ldr	r0, [pc, #244]	; (be0c <z_nrf_clock_control_lf_on+0x124>)
    bd16:	f240 2226 	movw	r2, #550	; 0x226
    bd1a:	f00e fca7 	bl	1a66c <printk>
    bd1e:	f240 2126 	movw	r1, #550	; 0x226
    bd22:	4839      	ldr	r0, [pc, #228]	; (be08 <z_nrf_clock_control_lf_on+0x120>)
    bd24:	f00e ff48 	bl	1abb8 <assert_post_action>
	switch (start_mode) {
    bd28:	b386      	cbz	r6, bd8c <z_nrf_clock_control_lf_on+0xa4>
    bd2a:	1e73      	subs	r3, r6, #1
    bd2c:	2b01      	cmp	r3, #1
    bd2e:	d852      	bhi.n	bdd6 <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    bd30:	2e01      	cmp	r6, #1
    bd32:	d106      	bne.n	bd42 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    bd34:	4b36      	ldr	r3, [pc, #216]	; (be10 <z_nrf_clock_control_lf_on+0x128>)
    bd36:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    bd3a:	f003 0303 	and.w	r3, r3, #3
    bd3e:	2b02      	cmp	r3, #2
    bd40:	d024      	beq.n	bd8c <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    bd42:	f012 f8b8 	bl	1deb6 <k_is_in_isr>
    bd46:	4604      	mov	r4, r0
    bd48:	b918      	cbnz	r0, bd52 <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
    bd4a:	4b32      	ldr	r3, [pc, #200]	; (be14 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
    bd4c:	781b      	ldrb	r3, [r3, #0]
    bd4e:	2b00      	cmp	r3, #0
    bd50:	d14e      	bne.n	bdf0 <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
    bd52:	f04f 0320 	mov.w	r3, #32
    bd56:	f3ef 8711 	mrs	r7, BASEPRI
    bd5a:	f383 8811 	msr	BASEPRI, r3
    bd5e:	f3bf 8f6f 	isb	sy
    bd62:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    bd64:	4d2a      	ldr	r5, [pc, #168]	; (be10 <z_nrf_clock_control_lf_on+0x128>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    bd66:	f8df 80b0 	ldr.w	r8, [pc, #176]	; be18 <z_nrf_clock_control_lf_on+0x130>
    bd6a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    bd6e:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    bd72:	03d2      	lsls	r2, r2, #15
    bd74:	d50c      	bpl.n	bd90 <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    bd76:	f003 0303 	and.w	r3, r3, #3
    bd7a:	2b02      	cmp	r3, #2
    bd7c:	d001      	beq.n	bd82 <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    bd7e:	2e01      	cmp	r6, #1
    bd80:	d106      	bne.n	bd90 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
    bd82:	b324      	cbz	r4, bdce <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
    bd84:	f387 8811 	msr	BASEPRI, r7
    bd88:	f3bf 8f6f 	isb	sy
}
    bd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    bd90:	b1c4      	cbz	r4, bdc4 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    bd92:	4638      	mov	r0, r7
    bd94:	f001 fdaa 	bl	d8ec <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    bd98:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    bd9c:	b2db      	uxtb	r3, r3
    bd9e:	2b01      	cmp	r3, #1
    bda0:	d1e3      	bne.n	bd6a <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    bda2:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    bda6:	2a00      	cmp	r2, #0
    bda8:	d0df      	beq.n	bd6a <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    bdaa:	2200      	movs	r2, #0
    bdac:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    bdb0:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    bdb4:	2202      	movs	r2, #2
    bdb6:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    bdba:	2220      	movs	r2, #32
    bdbc:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    bdc0:	60ab      	str	r3, [r5, #8]
}
    bdc2:	e7d2      	b.n	bd6a <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
    bdc4:	2100      	movs	r1, #0
    bdc6:	2021      	movs	r0, #33	; 0x21
    bdc8:	f00d fa42 	bl	19250 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    bdcc:	e7e4      	b.n	bd98 <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
    bdce:	2302      	movs	r3, #2
    bdd0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    bdd4:	e7da      	b.n	bd8c <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
    bdd6:	490c      	ldr	r1, [pc, #48]	; (be08 <z_nrf_clock_control_lf_on+0x120>)
    bdd8:	480c      	ldr	r0, [pc, #48]	; (be0c <z_nrf_clock_control_lf_on+0x124>)
    bdda:	f44f 720e 	mov.w	r2, #568	; 0x238
    bdde:	f00e fc45 	bl	1a66c <printk>
}
    bde2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    bde6:	f44f 710e 	mov.w	r1, #568	; 0x238
    bdea:	4807      	ldr	r0, [pc, #28]	; (be08 <z_nrf_clock_control_lf_on+0x120>)
    bdec:	f00e bee4 	b.w	1abb8 <assert_post_action>
    p_reg->INTENCLR = mask;
    bdf0:	2202      	movs	r2, #2
    bdf2:	4b07      	ldr	r3, [pc, #28]	; (be10 <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
    bdf4:	4607      	mov	r7, r0
    bdf6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    bdfa:	e7b3      	b.n	bd64 <z_nrf_clock_control_lf_on+0x7c>
    bdfc:	2000a870 	.word	0x2000a870
    be00:	2000a7ac 	.word	0x2000a7ac
    be04:	2000a7dc 	.word	0x2000a7dc
    be08:	0001ff60 	.word	0x0001ff60
    be0c:	0001fbb7 	.word	0x0001fbb7
    be10:	40005000 	.word	0x40005000
    be14:	2000c9b2 	.word	0x2000c9b2
    be18:	e000e100 	.word	0xe000e100

0000be1c <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    be1c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    be1e:	f000 f905 	bl	c02c <bt_rpmsg_platform_init>
	if (err < 0) {
    be22:	1e04      	subs	r4, r0, #0
    be24:	da06      	bge.n	be34 <bt_rpmsg_init+0x18>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    be26:	4622      	mov	r2, r4
    be28:	2145      	movs	r1, #69	; 0x45
    be2a:	4807      	ldr	r0, [pc, #28]	; (be48 <bt_rpmsg_init+0x2c>)
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    be2c:	f00e fc1e 	bl	1a66c <printk>
	}

	return err;
}
    be30:	4620      	mov	r0, r4
    be32:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    be34:	4805      	ldr	r0, [pc, #20]	; (be4c <bt_rpmsg_init+0x30>)
    be36:	f003 ffdd 	bl	fdf4 <bt_hci_driver_register>
	if (err < 0) {
    be3a:	1e04      	subs	r4, r0, #0
    be3c:	daf8      	bge.n	be30 <bt_rpmsg_init+0x14>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    be3e:	4622      	mov	r2, r4
    be40:	2145      	movs	r1, #69	; 0x45
    be42:	4803      	ldr	r0, [pc, #12]	; (be50 <bt_rpmsg_init+0x34>)
    be44:	e7f2      	b.n	be2c <bt_rpmsg_init+0x10>
    be46:	bf00      	nop
    be48:	0001ffd2 	.word	0x0001ffd2
    be4c:	0001e7f0 	.word	0x0001e7f0
    be50:	0001fffe 	.word	0x0001fffe

0000be54 <bt_rpmsg_send>:
{
    be54:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    be56:	7d02      	ldrb	r2, [r0, #20]
    be58:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    be5a:	2a02      	cmp	r2, #2
    be5c:	d00c      	beq.n	be78 <bt_rpmsg_send+0x24>
    be5e:	2a04      	cmp	r2, #4
    be60:	d009      	beq.n	be76 <bt_rpmsg_send+0x22>
    be62:	b1b2      	cbz	r2, be92 <bt_rpmsg_send+0x3e>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    be64:	2145      	movs	r1, #69	; 0x45
    be66:	480c      	ldr	r0, [pc, #48]	; (be98 <bt_rpmsg_send+0x44>)
		BT_ERR("Failed to send (err %d)", err);
    be68:	f00e fc00 	bl	1a66c <printk>
	net_buf_unref(buf);
    be6c:	4620      	mov	r0, r4
    be6e:	f009 fb87 	bl	15580 <net_buf_unref>
}
    be72:	2000      	movs	r0, #0
    be74:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    be76:	2205      	movs	r2, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    be78:	4611      	mov	r1, r2
    be7a:	f104 0008 	add.w	r0, r4, #8
    be7e:	f011 f954 	bl	1d12a <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    be82:	4620      	mov	r0, r4
    be84:	f000 f8ee 	bl	c064 <bt_rpmsg_platform_send>
	if (err < 0) {
    be88:	1e02      	subs	r2, r0, #0
    be8a:	daef      	bge.n	be6c <bt_rpmsg_send+0x18>
		BT_ERR("Failed to send (err %d)", err);
    be8c:	2145      	movs	r1, #69	; 0x45
    be8e:	4803      	ldr	r0, [pc, #12]	; (be9c <bt_rpmsg_send+0x48>)
    be90:	e7ea      	b.n	be68 <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
    be92:	2201      	movs	r2, #1
    be94:	e7f0      	b.n	be78 <bt_rpmsg_send+0x24>
    be96:	bf00      	nop
    be98:	0002002d 	.word	0x0002002d
    be9c:	00020042 	.word	0x00020042

0000bea0 <bt_rpmsg_rx>:
{
    bea0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    bea4:	4680      	mov	r8, r0
{
    bea6:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    bea8:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    beac:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    beae:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    beb0:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    beb4:	d009      	beq.n	beca <bt_rpmsg_rx+0x2a>
    beb6:	2805      	cmp	r0, #5
    beb8:	d074      	beq.n	bfa4 <bt_rpmsg_rx+0x104>
    beba:	2802      	cmp	r0, #2
    bebc:	f040 8099 	bne.w	bff2 <bt_rpmsg_rx+0x152>
	if (remaining < sizeof(hdr)) {
    bec0:	2b03      	cmp	r3, #3
    bec2:	d84a      	bhi.n	bf5a <bt_rpmsg_rx+0xba>
		BT_ERR("Not enough data for ACL header");
    bec4:	2145      	movs	r1, #69	; 0x45
    bec6:	484f      	ldr	r0, [pc, #316]	; (c004 <bt_rpmsg_rx+0x164>)
    bec8:	e003      	b.n	bed2 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    beca:	2b01      	cmp	r3, #1
    becc:	d806      	bhi.n	bedc <bt_rpmsg_rx+0x3c>
		BT_ERR("Not enough data for event header");
    bece:	2145      	movs	r1, #69	; 0x45
    bed0:	484d      	ldr	r0, [pc, #308]	; (c008 <bt_rpmsg_rx+0x168>)
}
    bed2:	b002      	add	sp, #8
    bed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Not enough data for ACL header");
    bed8:	f00e bbc8 	b.w	1a66c <printk>
	switch (evt_type) {
    bedc:	7873      	ldrb	r3, [r6, #1]
    bede:	2b3e      	cmp	r3, #62	; 0x3e
    bee0:	d117      	bne.n	bf12 <bt_rpmsg_rx+0x72>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    bee2:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    bee4:	2f02      	cmp	r7, #2
    bee6:	d016      	beq.n	bf16 <bt_rpmsg_rx+0x76>
    bee8:	f1a7 030d 	sub.w	r3, r7, #13
    beec:	425f      	negs	r7, r3
    beee:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    bef0:	2202      	movs	r2, #2
    bef2:	4641      	mov	r1, r8
    bef4:	a801      	add	r0, sp, #4
    bef6:	f00f fdfd 	bl	1baf4 <memcpy>
	if (remaining != hdr.len) {
    befa:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    befe:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    bf00:	429d      	cmp	r5, r3
    bf02:	d00a      	beq.n	bf1a <bt_rpmsg_rx+0x7a>
		BT_ERR("Event payload length is not correct");
    bf04:	2145      	movs	r1, #69	; 0x45
    bf06:	4841      	ldr	r0, [pc, #260]	; (c00c <bt_rpmsg_rx+0x16c>)
			BT_ERR("No available event buffers!");
    bf08:	f00e fbb0 	bl	1a66c <printk>
}
    bf0c:	b002      	add	sp, #8
    bf0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    bf12:	2700      	movs	r7, #0
    bf14:	e7ec      	b.n	bef0 <bt_rpmsg_rx+0x50>
			return true;
    bf16:	2701      	movs	r7, #1
    bf18:	e7ea      	b.n	bef0 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    bf1a:	2200      	movs	r2, #0
    bf1c:	2300      	movs	r3, #0
    bf1e:	4639      	mov	r1, r7
    bf20:	f89d 0004 	ldrb.w	r0, [sp, #4]
    bf24:	f002 fb90 	bl	e648 <bt_buf_get_evt>
	if (!buf) {
    bf28:	4604      	mov	r4, r0
    bf2a:	b920      	cbnz	r0, bf36 <bt_rpmsg_rx+0x96>
		if (discardable) {
    bf2c:	2f00      	cmp	r7, #0
    bf2e:	d1ed      	bne.n	bf0c <bt_rpmsg_rx+0x6c>
			BT_ERR("No available event buffers!");
    bf30:	2145      	movs	r1, #69	; 0x45
    bf32:	4837      	ldr	r0, [pc, #220]	; (c010 <bt_rpmsg_rx+0x170>)
    bf34:	e7e8      	b.n	bf08 <bt_rpmsg_rx+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    bf36:	f100 0708 	add.w	r7, r0, #8
    bf3a:	2202      	movs	r2, #2
    bf3c:	a901      	add	r1, sp, #4
    bf3e:	4638      	mov	r0, r7
    bf40:	f011 f916 	bl	1d170 <net_buf_simple_add_mem>
    bf44:	462a      	mov	r2, r5
    bf46:	1cf1      	adds	r1, r6, #3
    bf48:	4638      	mov	r0, r7
    bf4a:	f011 f911 	bl	1d170 <net_buf_simple_add_mem>
		bt_recv(buf);
    bf4e:	4620      	mov	r0, r4
}
    bf50:	b002      	add	sp, #8
    bf52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
    bf56:	f003 bf23 	b.w	fda0 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    bf5a:	2200      	movs	r2, #0
    bf5c:	2300      	movs	r3, #0
    bf5e:	2003      	movs	r0, #3
    bf60:	f002 fb20 	bl	e5a4 <bt_buf_get_rx>
	if (buf) {
    bf64:	4604      	mov	r4, r0
    bf66:	b1d0      	cbz	r0, bf9e <bt_rpmsg_rx+0xfe>
		memcpy((void *)&hdr, data, sizeof(hdr));
    bf68:	2204      	movs	r2, #4
    bf6a:	4641      	mov	r1, r8
    bf6c:	eb0d 0002 	add.w	r0, sp, r2
    bf70:	f00f fdc0 	bl	1baf4 <memcpy>
    bf74:	2204      	movs	r2, #4
    bf76:	f104 0708 	add.w	r7, r4, #8
    bf7a:	4638      	mov	r0, r7
    bf7c:	eb0d 0102 	add.w	r1, sp, r2
    bf80:	f011 f8f6 	bl	1d170 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    bf84:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    bf88:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    bf8a:	429d      	cmp	r5, r3
    bf8c:	d02e      	beq.n	bfec <bt_rpmsg_rx+0x14c>
		BT_ERR("ACL payload length is not correct");
    bf8e:	2145      	movs	r1, #69	; 0x45
    bf90:	4820      	ldr	r0, [pc, #128]	; (c014 <bt_rpmsg_rx+0x174>)
		BT_ERR("ISO payload length is not correct");
    bf92:	f00e fb6b 	bl	1a66c <printk>
		net_buf_unref(buf);
    bf96:	4620      	mov	r0, r4
    bf98:	f009 faf2 	bl	15580 <net_buf_unref>
	if (buf) {
    bf9c:	e7b6      	b.n	bf0c <bt_rpmsg_rx+0x6c>
		BT_ERR("No available ACL buffers!");
    bf9e:	2145      	movs	r1, #69	; 0x45
    bfa0:	481d      	ldr	r0, [pc, #116]	; (c018 <bt_rpmsg_rx+0x178>)
    bfa2:	e796      	b.n	bed2 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    bfa4:	2b03      	cmp	r3, #3
    bfa6:	d802      	bhi.n	bfae <bt_rpmsg_rx+0x10e>
		BT_ERR("Not enough data for ISO header");
    bfa8:	2145      	movs	r1, #69	; 0x45
    bfaa:	481c      	ldr	r0, [pc, #112]	; (c01c <bt_rpmsg_rx+0x17c>)
    bfac:	e791      	b.n	bed2 <bt_rpmsg_rx+0x32>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    bfae:	2200      	movs	r2, #0
    bfb0:	2300      	movs	r3, #0
    bfb2:	f002 faf7 	bl	e5a4 <bt_buf_get_rx>
	if (buf) {
    bfb6:	4604      	mov	r4, r0
    bfb8:	b1a8      	cbz	r0, bfe6 <bt_rpmsg_rx+0x146>
		memcpy((void *)&hdr, data, sizeof(hdr));
    bfba:	2204      	movs	r2, #4
    bfbc:	4641      	mov	r1, r8
    bfbe:	eb0d 0002 	add.w	r0, sp, r2
    bfc2:	f00f fd97 	bl	1baf4 <memcpy>
    bfc6:	2204      	movs	r2, #4
    bfc8:	f104 0708 	add.w	r7, r4, #8
    bfcc:	4638      	mov	r0, r7
    bfce:	eb0d 0102 	add.w	r1, sp, r2
    bfd2:	f011 f8cd 	bl	1d170 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    bfd6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    bfda:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    bfdc:	429d      	cmp	r5, r3
    bfde:	d005      	beq.n	bfec <bt_rpmsg_rx+0x14c>
		BT_ERR("ISO payload length is not correct");
    bfe0:	2145      	movs	r1, #69	; 0x45
    bfe2:	480f      	ldr	r0, [pc, #60]	; (c020 <bt_rpmsg_rx+0x180>)
    bfe4:	e7d5      	b.n	bf92 <bt_rpmsg_rx+0xf2>
		BT_ERR("No available ISO buffers!");
    bfe6:	2145      	movs	r1, #69	; 0x45
    bfe8:	480e      	ldr	r0, [pc, #56]	; (c024 <bt_rpmsg_rx+0x184>)
    bfea:	e772      	b.n	bed2 <bt_rpmsg_rx+0x32>
    bfec:	462a      	mov	r2, r5
    bfee:	1d71      	adds	r1, r6, #5
    bff0:	e7aa      	b.n	bf48 <bt_rpmsg_rx+0xa8>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    bff2:	4602      	mov	r2, r0
    bff4:	2145      	movs	r1, #69	; 0x45
    bff6:	480c      	ldr	r0, [pc, #48]	; (c028 <bt_rpmsg_rx+0x188>)
}
    bff8:	b002      	add	sp, #8
    bffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    bffe:	f00e bb35 	b.w	1a66c <printk>
    c002:	bf00      	nop
    c004:	000200cf 	.word	0x000200cf
    c008:	0002005f 	.word	0x0002005f
    c00c:	00020085 	.word	0x00020085
    c010:	000200ae 	.word	0x000200ae
    c014:	00020112 	.word	0x00020112
    c018:	000200f3 	.word	0x000200f3
    c01c:	00020139 	.word	0x00020139
    c020:	0002017c 	.word	0x0002017c
    c024:	0002015d 	.word	0x0002015d
    c028:	000201a3 	.word	0x000201a3

0000c02c <bt_rpmsg_platform_init>:

	return RPMSG_SUCCESS;
}

int bt_rpmsg_platform_init(void)
{
    c02c:	b508      	push	{r3, lr}
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    c02e:	4908      	ldr	r1, [pc, #32]	; (c050 <bt_rpmsg_platform_init+0x24>)
    c030:	4808      	ldr	r0, [pc, #32]	; (c054 <bt_rpmsg_platform_init+0x28>)
    c032:	f7ff fb89 	bl	b748 <rpmsg_service_register_endpoint>

	if (err < 0) {
    c036:	1e02      	subs	r2, r0, #0
    c038:	da05      	bge.n	c046 <bt_rpmsg_platform_init+0x1a>
		LOG_ERR("Registering endpoint failed with %d", err);
    c03a:	4807      	ldr	r0, [pc, #28]	; (c058 <bt_rpmsg_platform_init+0x2c>)
    c03c:	2145      	movs	r1, #69	; 0x45
    c03e:	f00e fb15 	bl	1a66c <printk>
		return RPMSG_ERR_INIT;
    c042:	4806      	ldr	r0, [pc, #24]	; (c05c <bt_rpmsg_platform_init+0x30>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    c044:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    c046:	4b06      	ldr	r3, [pc, #24]	; (c060 <bt_rpmsg_platform_init+0x34>)
	return RPMSG_SUCCESS;
    c048:	2000      	movs	r0, #0
	endpoint_id = err;
    c04a:	601a      	str	r2, [r3, #0]
	return RPMSG_SUCCESS;
    c04c:	e7fa      	b.n	c044 <bt_rpmsg_platform_init+0x18>
    c04e:	bf00      	nop
    c050:	0001adc5 	.word	0x0001adc5
    c054:	000201d0 	.word	0x000201d0
    c058:	000201db 	.word	0x000201db
    c05c:	fffff82a 	.word	0xfffff82a
    c060:	2000a874 	.word	0x2000a874

0000c064 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    c064:	4b02      	ldr	r3, [pc, #8]	; (c070 <bt_rpmsg_platform_send+0xc>)
    c066:	8982      	ldrh	r2, [r0, #12]
    c068:	6881      	ldr	r1, [r0, #8]
    c06a:	6818      	ldr	r0, [r3, #0]
    c06c:	f7ff bb98 	b.w	b7a0 <rpmsg_service_send>
    c070:	2000a874 	.word	0x2000a874

0000c074 <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    c074:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    c076:	4b02      	ldr	r3, [pc, #8]	; (c080 <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    c078:	6818      	ldr	r0, [r3, #0]
    c07a:	f7ff fb87 	bl	b78c <rpmsg_service_endpoint_is_bound>
}
    c07e:	bd08      	pop	{r3, pc}
    c080:	2000a874 	.word	0x2000a874

0000c084 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    c084:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    c086:	4c06      	ldr	r4, [pc, #24]	; (c0a0 <z_clock_isr+0x1c>)
    c088:	4806      	ldr	r0, [pc, #24]	; (c0a4 <z_clock_isr+0x20>)
    c08a:	4621      	mov	r1, r4
    c08c:	2217      	movs	r2, #23
    c08e:	f00e faed 	bl	1a66c <printk>
    c092:	4620      	mov	r0, r4
}
    c094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    c098:	2117      	movs	r1, #23
    c09a:	f00e bd8d 	b.w	1abb8 <assert_post_action>
    c09e:	bf00      	nop
    c0a0:	00020218 	.word	0x00020218
    c0a4:	0001fbb7 	.word	0x0001fbb7

0000c0a8 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    c0a8:	4a04      	ldr	r2, [pc, #16]	; (c0bc <sys_clock_timeout_handler+0x14>)
    c0aa:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c0ac:	1ac8      	subs	r0, r1, r3
    c0ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    c0b2:	4403      	add	r3, r0
    c0b4:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    c0b6:	f00d bde1 	b.w	19c7c <z_clock_announce>
    c0ba:	bf00      	nop
    c0bc:	2000a884 	.word	0x2000a884

0000c0c0 <set_absolute_alarm>:
{
    c0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c0c4:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c0c8:	f04f 0900 	mov.w	r9, #0
    c0cc:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    c0ce:	f100 0450 	add.w	r4, r0, #80	; 0x50
    c0d2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    c0d6:	00a4      	lsls	r4, r4, #2
    c0d8:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    c0dc:	b2a4      	uxth	r4, r4
    c0de:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    c0e2:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    c0e6:	f8df 806c 	ldr.w	r8, [pc, #108]	; c154 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    c0ea:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c0ee:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    c0f2:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    c0f4:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    c0f8:	eba3 030a 	sub.w	r3, r3, sl
    c0fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c100:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    c104:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    c106:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    c10a:	d102      	bne.n	c112 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    c10c:	2013      	movs	r0, #19
    c10e:	f011 fed8 	bl	1dec2 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    c112:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    c116:	1aab      	subs	r3, r5, r2
    c118:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    c11c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c120:	bf88      	it	hi
    c122:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c124:	f8c4 9000 	str.w	r9, [r4]
    c128:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    c12a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    c12e:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    c132:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    c136:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    c13a:	459a      	cmp	sl, r3
    c13c:	d006      	beq.n	c14c <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    c13e:	1aeb      	subs	r3, r5, r3
    c140:	3b02      	subs	r3, #2
    c142:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    c146:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    c14a:	d801      	bhi.n	c150 <set_absolute_alarm+0x90>
}
    c14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    c150:	462b      	mov	r3, r5
    c152:	e7cf      	b.n	c0f4 <set_absolute_alarm+0x34>
    c154:	40015000 	.word	0x40015000

0000c158 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    c158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c15a:	2500      	movs	r5, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c15c:	462f      	mov	r7, r5
    c15e:	4c10      	ldr	r4, [pc, #64]	; (c1a0 <rtc_nrf_isr+0x48>)
    c160:	6826      	ldr	r6, [r4, #0]
    return p_reg->INTENSET & mask;
    c162:	4b10      	ldr	r3, [pc, #64]	; (c1a4 <rtc_nrf_isr+0x4c>)
    c164:	b105      	cbz	r5, c168 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    c166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c168:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    c16c:	03d2      	lsls	r2, r2, #15
    c16e:	d5fa      	bpl.n	c166 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c170:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    c174:	2a00      	cmp	r2, #0
    c176:	d0f6      	beq.n	c166 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    c178:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    c17c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    c180:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c184:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    c188:	2501      	movs	r5, #1
    return p_reg->CC[ch];
    c18a:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
			if (handler) {
    c18e:	b126      	cbz	r6, c19a <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    c190:	2000      	movs	r0, #0
    c192:	6862      	ldr	r2, [r4, #4]
    c194:	6027      	str	r7, [r4, #0]
    c196:	47b0      	blx	r6
    c198:	e7e2      	b.n	c160 <rtc_nrf_isr+0x8>
    c19a:	6026      	str	r6, [r4, #0]
}
    c19c:	e7e3      	b.n	c166 <rtc_nrf_isr+0xe>
    c19e:	bf00      	nop
    c1a0:	2000a878 	.word	0x2000a878
    c1a4:	40015000 	.word	0x40015000

0000c1a8 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    c1a8:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    c1aa:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    c1ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    c1b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    c1b4:	4c0c      	ldr	r4, [pc, #48]	; (c1e8 <z_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    c1b6:	2101      	movs	r1, #1
    c1b8:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    c1bc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    c1c0:	4b0a      	ldr	r3, [pc, #40]	; (c1ec <z_clock_driver_init+0x44>)
    c1c2:	2015      	movs	r0, #21
    c1c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    c1c8:	462a      	mov	r2, r5
    c1ca:	f001 fb1f 	bl	d80c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    c1ce:	2015      	movs	r0, #21
    c1d0:	f001 fafe 	bl	d7d0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    c1d4:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    c1d6:	4a06      	ldr	r2, [pc, #24]	; (c1f0 <z_clock_driver_init+0x48>)
    c1d8:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    c1da:	2002      	movs	r0, #2
    c1dc:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    c1de:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    c1e0:	f7ff fd82 	bl	bce8 <z_nrf_clock_control_lf_on>

	return 0;
}
    c1e4:	4628      	mov	r0, r5
    c1e6:	bd38      	pop	{r3, r4, r5, pc}
    c1e8:	40015000 	.word	0x40015000
    c1ec:	e000e100 	.word	0xe000e100
    c1f0:	2000a880 	.word	0x2000a880

0000c1f4 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    c1f4:	4a13      	ldr	r2, [pc, #76]	; (c244 <z_clock_set_timeout+0x50>)
    c1f6:	f1b0 3fff 	cmp.w	r0, #4294967295
    c1fa:	bf14      	ite	ne
    c1fc:	4603      	movne	r3, r0
    c1fe:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c200:	3b01      	subs	r3, #1
    c202:	2b00      	cmp	r3, #0
    c204:	dd1c      	ble.n	c240 <z_clock_set_timeout+0x4c>
    c206:	4293      	cmp	r3, r2
    c208:	bfa8      	it	ge
    c20a:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    c20c:	4a0e      	ldr	r2, [pc, #56]	; (c248 <z_clock_set_timeout+0x54>)
    c20e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    c212:	4a0e      	ldr	r2, [pc, #56]	; (c24c <z_clock_set_timeout+0x58>)
    c214:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    c216:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    c218:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    c21c:	bf18      	it	ne
    c21e:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
    c220:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c224:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    c226:	480a      	ldr	r0, [pc, #40]	; (c250 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    c228:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    c22a:	4a0a      	ldr	r2, [pc, #40]	; (c254 <z_clock_set_timeout+0x60>)
    c22c:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    c22e:	2000      	movs	r0, #0
    c230:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    c232:	4a04      	ldr	r2, [pc, #16]	; (c244 <z_clock_set_timeout+0x50>)
    c234:	4293      	cmp	r3, r2
    c236:	bf94      	ite	ls
    c238:	18c9      	addls	r1, r1, r3
    c23a:	1889      	addhi	r1, r1, r2
    c23c:	f7ff bf40 	b.w	c0c0 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    c240:	2300      	movs	r3, #0
    c242:	e7e3      	b.n	c20c <z_clock_set_timeout+0x18>
    c244:	007fffff 	.word	0x007fffff
    c248:	40015000 	.word	0x40015000
    c24c:	2000a884 	.word	0x2000a884
    c250:	0000c0a9 	.word	0x0000c0a9
    c254:	2000a878 	.word	0x2000a878

0000c258 <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    c258:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    c25a:	f04f 0320 	mov.w	r3, #32
    c25e:	f3ef 8511 	mrs	r5, BASEPRI
    c262:	f383 8811 	msr	BASEPRI, r3
    c266:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c26a:	4815      	ldr	r0, [pc, #84]	; (c2c0 <z_clock_elapsed+0x68>)
    c26c:	f00d fa12 	bl	19694 <z_spin_lock_valid>
    c270:	b940      	cbnz	r0, c284 <z_clock_elapsed+0x2c>
    c272:	4914      	ldr	r1, [pc, #80]	; (c2c4 <z_clock_elapsed+0x6c>)
    c274:	4814      	ldr	r0, [pc, #80]	; (c2c8 <z_clock_elapsed+0x70>)
    c276:	227c      	movs	r2, #124	; 0x7c
    c278:	f00e f9f8 	bl	1a66c <printk>
    c27c:	217c      	movs	r1, #124	; 0x7c
    c27e:	4811      	ldr	r0, [pc, #68]	; (c2c4 <z_clock_elapsed+0x6c>)
    c280:	f00e fc9a 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
    c284:	480e      	ldr	r0, [pc, #56]	; (c2c0 <z_clock_elapsed+0x68>)
    c286:	f00d fa21 	bl	196cc <z_spin_lock_set_owner>
    c28a:	4b10      	ldr	r3, [pc, #64]	; (c2cc <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c28c:	480c      	ldr	r0, [pc, #48]	; (c2c0 <z_clock_elapsed+0x68>)
    c28e:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    c292:	4b0f      	ldr	r3, [pc, #60]	; (c2d0 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    c294:	681b      	ldr	r3, [r3, #0]
    c296:	1ae4      	subs	r4, r4, r3
    c298:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    c29c:	f00d fa08 	bl	196b0 <z_spin_unlock_valid>
    c2a0:	b940      	cbnz	r0, c2b4 <z_clock_elapsed+0x5c>
    c2a2:	4908      	ldr	r1, [pc, #32]	; (c2c4 <z_clock_elapsed+0x6c>)
    c2a4:	4808      	ldr	r0, [pc, #32]	; (c2c8 <z_clock_elapsed+0x70>)
    c2a6:	22a7      	movs	r2, #167	; 0xa7
    c2a8:	f00e f9e0 	bl	1a66c <printk>
    c2ac:	21a7      	movs	r1, #167	; 0xa7
    c2ae:	4805      	ldr	r0, [pc, #20]	; (c2c4 <z_clock_elapsed+0x6c>)
    c2b0:	f00e fc82 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
    c2b4:	f385 8811 	msr	BASEPRI, r5
    c2b8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    c2bc:	4620      	mov	r0, r4
    c2be:	bd38      	pop	{r3, r4, r5, pc}
    c2c0:	2000a888 	.word	0x2000a888
    c2c4:	0001fbf1 	.word	0x0001fbf1
    c2c8:	0001fbb7 	.word	0x0001fbb7
    c2cc:	40015000 	.word	0x40015000
    c2d0:	2000a884 	.word	0x2000a884

0000c2d4 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
    c2d4:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    c2d6:	1cc5      	adds	r5, r0, #3
    c2d8:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    c2dc:	2d74      	cmp	r5, #116	; 0x74
    c2de:	d908      	bls.n	c2f2 <user_data_alloc.constprop.0+0x1e>
    c2e0:	4917      	ldr	r1, [pc, #92]	; (c340 <user_data_alloc.constprop.0+0x6c>)
    c2e2:	4818      	ldr	r0, [pc, #96]	; (c344 <user_data_alloc.constprop.0+0x70>)
    c2e4:	2250      	movs	r2, #80	; 0x50
    c2e6:	f00e f9c1 	bl	1a66c <printk>
    c2ea:	2150      	movs	r1, #80	; 0x50
    c2ec:	4814      	ldr	r0, [pc, #80]	; (c340 <user_data_alloc.constprop.0+0x6c>)
    c2ee:	f00e fc63 	bl	1abb8 <assert_post_action>
	return list->head;
    c2f2:	4c15      	ldr	r4, [pc, #84]	; (c348 <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
    c2f4:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    c2f8:	b123      	cbz	r3, c304 <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    c2fa:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c2fe:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    c300:	2b74      	cmp	r3, #116	; 0x74
    c302:	d919      	bls.n	c338 <user_data_alloc.constprop.0+0x64>
	return k_aligned_alloc(sizeof(void *), size);
    c304:	2178      	movs	r1, #120	; 0x78
    c306:	2004      	movs	r0, #4
    c308:	f00e f8b4 	bl	1a474 <k_aligned_alloc>

		item = k_malloc(sizeof(struct data_chunk_item));

		if (!item) {
    c30c:	b178      	cbz	r0, c32e <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
    c30e:	2300      	movs	r3, #0
	return list->tail;
    c310:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	parent->next = child;
    c314:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    c316:	b95a      	cbnz	r2, c330 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
    c318:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
    c31c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
    c320:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    c324:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    c326:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    c328:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    c32a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

	return user_data_loc;
}
    c32e:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    c330:	6010      	str	r0, [r2, #0]
	list->tail = node;
    c332:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    c336:	e7f1      	b.n	c31c <user_data_alloc.constprop.0+0x48>
	return list->tail;
    c338:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    c33c:	e7f0      	b.n	c320 <user_data_alloc.constprop.0+0x4c>
    c33e:	bf00      	nop
    c340:	00020285 	.word	0x00020285
    c344:	0001fbb7 	.word	0x0001fbb7
    c348:	2000a88c 	.word	0x2000a88c

0000c34c <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c34c:	4808      	ldr	r0, [pc, #32]	; (c370 <discovery_complete.constprop.0+0x24>)
    c34e:	f500 739c 	add.w	r3, r0, #312	; 0x138
    c352:	e8d3 2fef 	ldaex	r2, [r3]
    c356:	f042 0202 	orr.w	r2, r2, #2
    c35a:	e8c3 2fe1 	stlex	r1, r2, [r3]
    c35e:	2900      	cmp	r1, #0
    c360:	d1f7      	bne.n	c352 <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    c362:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    c366:	681b      	ldr	r3, [r3, #0]
    c368:	b10b      	cbz	r3, c36e <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
    c36a:	6841      	ldr	r1, [r0, #4]
    c36c:	4718      	bx	r3
	}
}
    c36e:	4770      	bx	lr
    c370:	2000a88c 	.word	0x2000a88c

0000c374 <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c374:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    c376:	4c0b      	ldr	r4, [pc, #44]	; (c3a4 <discovery_complete_error.constprop.0+0x30>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    c378:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    c37a:	4620      	mov	r0, r4
    c37c:	f00e fd48 	bl	1ae10 <svc_attr_memory_release>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c380:	f06f 0101 	mvn.w	r1, #1
    c384:	f504 709c 	add.w	r0, r4, #312	; 0x138
    c388:	f00e fd59 	bl	1ae3e <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    c38c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    c390:	689b      	ldr	r3, [r3, #8]
    c392:	b12b      	cbz	r3, c3a0 <discovery_complete_error.constprop.0+0x2c>
		dm->callback->error_found(dm->conn, err, dm->context);
    c394:	4629      	mov	r1, r5
    c396:	6862      	ldr	r2, [r4, #4]
    c398:	6820      	ldr	r0, [r4, #0]
	}
}
    c39a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    c39e:	4718      	bx	r3
}
    c3a0:	bd70      	pop	{r4, r5, r6, pc}
    c3a2:	bf00      	nop
    c3a4:	2000a88c 	.word	0x2000a88c

0000c3a8 <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c3ac:	4c1f      	ldr	r4, [pc, #124]	; (c42c <attr_store.constprop.0+0x84>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c3ae:	4607      	mov	r7, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c3b0:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    c3b4:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    c3b6:	2b22      	cmp	r3, #34	; 0x22
    c3b8:	d907      	bls.n	c3ca <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
    c3ba:	2145      	movs	r1, #69	; 0x45
    c3bc:	481c      	ldr	r0, [pc, #112]	; (c430 <attr_store.constprop.0+0x88>)
    c3be:	f00e f955 	bl	1a66c <printk>
		return NULL;
    c3c2:	2500      	movs	r5, #0
}
    c3c4:	4628      	mov	r0, r5
    c3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    c3ca:	6803      	ldr	r3, [r0, #0]
    c3cc:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    c3ce:	2b02      	cmp	r3, #2
    c3d0:	d80d      	bhi.n	c3ee <attr_store.constprop.0+0x46>
    c3d2:	4a18      	ldr	r2, [pc, #96]	; (c434 <attr_store.constprop.0+0x8c>)
    c3d4:	f812 9003 	ldrb.w	r9, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    c3d8:	eb06 0009 	add.w	r0, r6, r9
    c3dc:	f7ff ff7a 	bl	c2d4 <user_data_alloc.constprop.0>
	if (!attr_data) {
    c3e0:	4605      	mov	r5, r0
    c3e2:	b958      	cbnz	r0, c3fc <attr_store.constprop.0+0x54>
		LOG_ERR("No space for attribute data.");
    c3e4:	2145      	movs	r1, #69	; 0x45
    c3e6:	4814      	ldr	r0, [pc, #80]	; (c438 <attr_store.constprop.0+0x90>)
    c3e8:	f00e f940 	bl	1a66c <printk>
		return NULL;
    c3ec:	e7ea      	b.n	c3c4 <attr_store.constprop.0+0x1c>
		LOG_ERR("Unsupported UUID type.");
    c3ee:	2145      	movs	r1, #69	; 0x45
    c3f0:	4812      	ldr	r0, [pc, #72]	; (c43c <attr_store.constprop.0+0x94>)
    c3f2:	f00e f93b 	bl	1a66c <printk>
    c3f6:	f04f 0900 	mov.w	r9, #0
    c3fa:	e7ed      	b.n	c3d8 <attr_store.constprop.0+0x30>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c3fc:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c400:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    c402:	1c5a      	adds	r2, r3, #1
    c404:	3303      	adds	r3, #3
    c406:	00db      	lsls	r3, r3, #3
    c408:	f103 0804 	add.w	r8, r3, #4
    c40c:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    c410:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    c412:	441c      	add	r4, r3
    c414:	8a3b      	ldrh	r3, [r7, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c416:	464a      	mov	r2, r9
	cur_attr->handle = attr->handle;
    c418:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    c41a:	7cbb      	ldrb	r3, [r7, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c41c:	6839      	ldr	r1, [r7, #0]
	cur_attr->perm = attr->perm;
    c41e:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    c420:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    c422:	f00f fb67 	bl	1baf4 <memcpy>
	return cur_attr;
    c426:	4645      	mov	r5, r8
    c428:	e7cc      	b.n	c3c4 <attr_store.constprop.0+0x1c>
    c42a:	bf00      	nop
    c42c:	2000a88c 	.word	0x2000a88c
    c430:	000202b0 	.word	0x000202b0
    c434:	0002047b 	.word	0x0002047b
    c438:	000202ed 	.word	0x000202ed
    c43c:	000202d1 	.word	0x000202d1

0000c440 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    c440:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    c442:	4604      	mov	r4, r0
    c444:	b930      	cbnz	r0, c454 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
    c446:	2145      	movs	r1, #69	; 0x45
    c448:	480c      	ldr	r0, [pc, #48]	; (c47c <uuid_store.constprop.0+0x3c>)
    c44a:	f00e f90f 	bl	1a66c <printk>
    c44e:	4625      	mov	r5, r4
}
    c450:	4628      	mov	r0, r5
    c452:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    c454:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    c456:	2b02      	cmp	r3, #2
    c458:	d80a      	bhi.n	c470 <uuid_store.constprop.0+0x30>
    c45a:	4a09      	ldr	r2, [pc, #36]	; (c480 <uuid_store.constprop.0+0x40>)
    c45c:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    c45e:	4630      	mov	r0, r6
    c460:	f7ff ff38 	bl	c2d4 <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    c464:	4632      	mov	r2, r6
    c466:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    c468:	4605      	mov	r5, r0
	memcpy(buffer, uuid, size);
    c46a:	f00f fb43 	bl	1baf4 <memcpy>
	return (struct bt_uuid *)buffer;
    c46e:	e7ef      	b.n	c450 <uuid_store.constprop.0+0x10>
		LOG_ERR("Unsupported UUID type.");
    c470:	2145      	movs	r1, #69	; 0x45
    c472:	4804      	ldr	r0, [pc, #16]	; (c484 <uuid_store.constprop.0+0x44>)
    c474:	f00e f8fa 	bl	1a66c <printk>
    c478:	2600      	movs	r6, #0
    c47a:	e7f0      	b.n	c45e <uuid_store.constprop.0+0x1e>
    c47c:	0002030f 	.word	0x0002030f
    c480:	0002047b 	.word	0x0002047b
    c484:	000202d1 	.word	0x000202d1

0000c488 <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    c488:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    c48c:	4e79      	ldr	r6, [pc, #484]	; (c674 <discovery_callback+0x1ec>)
{
    c48e:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
    c490:	6833      	ldr	r3, [r6, #0]
    c492:	4283      	cmp	r3, r0
    c494:	d008      	beq.n	c4a8 <discovery_callback+0x20>
		LOG_ERR("Unexpected conn object. Aborting.");
    c496:	4878      	ldr	r0, [pc, #480]	; (c678 <discovery_callback+0x1f0>)
    c498:	2145      	movs	r1, #69	; 0x45
    c49a:	f00e f8e7 	bl	1a66c <printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    c49e:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    c4a2:	f7ff ff67 	bl	c374 <discovery_complete_error.constprop.0>
    c4a6:	e031      	b.n	c50c <discovery_callback+0x84>
    c4a8:	7c13      	ldrb	r3, [r2, #16]
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    c4aa:	2b03      	cmp	r3, #3
    c4ac:	f000 80ae 	beq.w	c60c <discovery_callback+0x184>
    c4b0:	d80d      	bhi.n	c4ce <discovery_callback+0x46>
    c4b2:	2b02      	cmp	r3, #2
    c4b4:	d126      	bne.n	c504 <discovery_callback+0x7c>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
    c4b6:	f240 12b3 	movw	r2, #435	; 0x1b3
    c4ba:	4970      	ldr	r1, [pc, #448]	; (c67c <discovery_callback+0x1f4>)
    c4bc:	4870      	ldr	r0, [pc, #448]	; (c680 <discovery_callback+0x1f8>)
    c4be:	f00e f8d5 	bl	1a66c <printk>
    c4c2:	f240 11b3 	movw	r1, #435	; 0x1b3
    c4c6:	486d      	ldr	r0, [pc, #436]	; (c67c <discovery_callback+0x1f4>)
    c4c8:	f00e fb76 	bl	1abb8 <assert_post_action>
    c4cc:	e01e      	b.n	c50c <discovery_callback+0x84>
	switch (params->type) {
    c4ce:	2b05      	cmp	r3, #5
    c4d0:	d1f1      	bne.n	c4b6 <discovery_callback+0x2e>
	if (!attr) {
    c4d2:	2900      	cmp	r1, #0
    c4d4:	f040 8081 	bne.w	c5da <discovery_callback+0x152>
		if (dm->cur_attr_id > 1) {
    c4d8:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
    c4dc:	2b01      	cmp	r3, #1
    c4de:	d979      	bls.n	c5d4 <discovery_callback+0x14c>
				dm->attrs[0].handle + 1;
    c4e0:	8c33      	ldrh	r3, [r6, #32]
			int err = bt_gatt_discover(dm->conn,
    c4e2:	f106 0108 	add.w	r1, r6, #8
				dm->attrs[0].handle + 1;
    c4e6:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    c4e8:	8233      	strh	r3, [r6, #16]
			dm->discover_params.type =
    c4ea:	2303      	movs	r3, #3
    c4ec:	7633      	strb	r3, [r6, #24]
			int err = bt_gatt_discover(dm->conn,
    c4ee:	f007 ff07 	bl	14300 <bt_gatt_discover>
			if (err) {
    c4f2:	4604      	mov	r4, r0
    c4f4:	b150      	cbz	r0, c50c <discovery_callback+0x84>
				LOG_ERR("Characteristic discover failed,"
    c4f6:	4602      	mov	r2, r0
    c4f8:	2145      	movs	r1, #69	; 0x45
    c4fa:	4862      	ldr	r0, [pc, #392]	; (c684 <discovery_callback+0x1fc>)
    c4fc:	f00e f8b6 	bl	1a66c <printk>
				discovery_complete_error(dm, err);
    c500:	4620      	mov	r0, r4
    c502:	e7ce      	b.n	c4a2 <discovery_callback+0x1a>
	if (!attr) {
    c504:	b921      	cbnz	r1, c510 <discovery_callback+0x88>
		discovery_complete_not_found(dm);
    c506:	4630      	mov	r0, r6
    c508:	f00e fca4 	bl	1ae54 <discovery_complete_not_found>
		break;
	}

	return BT_GATT_ITER_STOP;
    c50c:	2400      	movs	r4, #0
    c50e:	e04a      	b.n	c5a6 <discovery_callback+0x11e>
	struct bt_gatt_service_val *service_val = attr->user_data;
    c510:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
    c514:	4628      	mov	r0, r5
    c516:	2108      	movs	r1, #8
    c518:	f7ff ff46 	bl	c3a8 <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    c51c:	2400      	movs	r4, #0
    c51e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    c522:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    c524:	4669      	mov	r1, sp
    c526:	6828      	ldr	r0, [r5, #0]
    c528:	f88d 4000 	strb.w	r4, [sp]
    c52c:	f8ad 3002 	strh.w	r3, [sp, #2]
    c530:	f00f fb55 	bl	1bbde <bt_uuid_cmp>
    c534:	b1a8      	cbz	r0, c562 <discovery_callback+0xda>
    c536:	f642 0301 	movw	r3, #10241	; 0x2801
    c53a:	6828      	ldr	r0, [r5, #0]
    c53c:	a901      	add	r1, sp, #4
    c53e:	f88d 4004 	strb.w	r4, [sp, #4]
    c542:	f8ad 3006 	strh.w	r3, [sp, #6]
    c546:	f00f fb4a 	bl	1bbde <bt_uuid_cmp>
    c54a:	b150      	cbz	r0, c562 <discovery_callback+0xda>
    c54c:	494b      	ldr	r1, [pc, #300]	; (c67c <discovery_callback+0x1f4>)
    c54e:	484c      	ldr	r0, [pc, #304]	; (c680 <discovery_callback+0x1f8>)
    c550:	f240 1217 	movw	r2, #279	; 0x117
    c554:	f00e f88a 	bl	1a66c <printk>
    c558:	f240 1117 	movw	r1, #279	; 0x117
    c55c:	4847      	ldr	r0, [pc, #284]	; (c67c <discovery_callback+0x1f4>)
    c55e:	f00e fb2b 	bl	1abb8 <assert_post_action>
	if (!cur_attr) {
    c562:	b937      	cbnz	r7, c572 <discovery_callback+0xea>
		LOG_ERR("Not enough memory for service attribute.");
    c564:	4848      	ldr	r0, [pc, #288]	; (c688 <discovery_callback+0x200>)
    c566:	2145      	movs	r1, #69	; 0x45
    c568:	f00e f880 	bl	1a66c <printk>
		discovery_complete_error(dm, -ENOMEM);
    c56c:	f06f 000b 	mvn.w	r0, #11
    c570:	e797      	b.n	c4a2 <discovery_callback+0x1a>
		bt_gatt_dm_attr_service_val(cur_attr);
    c572:	4638      	mov	r0, r7
    c574:	f00e fc82 	bl	1ae7c <bt_gatt_dm_attr_service_val>
    c578:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    c57a:	2208      	movs	r2, #8
    c57c:	4641      	mov	r1, r8
    c57e:	f00f fab9 	bl	1baf4 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    c582:	6828      	ldr	r0, [r5, #0]
    c584:	f7ff ff5c 	bl	c440 <uuid_store.constprop.0>
    c588:	4604      	mov	r4, r0
    c58a:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    c58c:	b930      	cbnz	r0, c59c <discovery_callback+0x114>
		LOG_ERR("Not enough memory for service attribute data.");
    c58e:	2145      	movs	r1, #69	; 0x45
    c590:	483e      	ldr	r0, [pc, #248]	; (c68c <discovery_callback+0x204>)
    c592:	f00e f86b 	bl	1a66c <printk>
		discovery_complete_error(dm, -ENOMEM);
    c596:	f06f 000b 	mvn.w	r0, #11
    c59a:	e058      	b.n	c64e <discovery_callback+0x1c6>
	if (cur_attr->handle == cur_service_val->end_handle) {
    c59c:	88bb      	ldrh	r3, [r7, #4]
    c59e:	88aa      	ldrh	r2, [r5, #4]
    c5a0:	4293      	cmp	r3, r2
    c5a2:	d104      	bne.n	c5ae <discovery_callback+0x126>
		return BT_GATT_ITER_CONTINUE;
    c5a4:	2401      	movs	r4, #1
}
    c5a6:	4620      	mov	r0, r4
    c5a8:	b002      	add	sp, #8
    c5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    c5ae:	2105      	movs	r1, #5
	dm->discover_params.uuid         = NULL;
    c5b0:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    c5b2:	7631      	strb	r1, [r6, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    c5b4:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    c5b6:	4936      	ldr	r1, [pc, #216]	; (c690 <discovery_callback+0x208>)
    c5b8:	6830      	ldr	r0, [r6, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    c5ba:	82f2      	strh	r2, [r6, #22]
	dm->discover_params.uuid         = NULL;
    c5bc:	60b4      	str	r4, [r6, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    c5be:	8233      	strh	r3, [r6, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    c5c0:	f007 fe9e 	bl	14300 <bt_gatt_discover>
	if (err) {
    c5c4:	4602      	mov	r2, r0
    c5c6:	2800      	cmp	r0, #0
    c5c8:	d0a0      	beq.n	c50c <discovery_callback+0x84>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    c5ca:	2145      	movs	r1, #69	; 0x45
    c5cc:	4831      	ldr	r0, [pc, #196]	; (c694 <discovery_callback+0x20c>)
		LOG_ERR("Not enough memory for next attribute descriptor"
    c5ce:	f00e f84d 	bl	1a66c <printk>
		discovery_complete_error(dm, -ENOMEM);
    c5d2:	e7e0      	b.n	c596 <discovery_callback+0x10e>
			discovery_complete(dm);
    c5d4:	f7ff feba 	bl	c34c <discovery_complete.constprop.0>
    c5d8:	e798      	b.n	c50c <discovery_callback+0x84>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    c5da:	2400      	movs	r4, #0
    c5dc:	f642 0303 	movw	r3, #10243	; 0x2803
    c5e0:	6828      	ldr	r0, [r5, #0]
    c5e2:	a901      	add	r1, sp, #4
    c5e4:	f88d 4004 	strb.w	r4, [sp, #4]
    c5e8:	f8ad 3006 	strh.w	r3, [sp, #6]
    c5ec:	f00f faf7 	bl	1bbde <bt_uuid_cmp>
    c5f0:	b950      	cbnz	r0, c608 <discovery_callback+0x180>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    c5f2:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    c5f4:	4628      	mov	r0, r5
    c5f6:	f7ff fed7 	bl	c3a8 <attr_store.constprop.0>
    c5fa:	4604      	mov	r4, r0
	if (!cur_attr) {
    c5fc:	2800      	cmp	r0, #0
    c5fe:	d1d1      	bne.n	c5a4 <discovery_callback+0x11c>
		LOG_ERR("Not enough memory for next attribute descriptor"
    c600:	2145      	movs	r1, #69	; 0x45
    c602:	8a2a      	ldrh	r2, [r5, #16]
    c604:	4824      	ldr	r0, [pc, #144]	; (c698 <discovery_callback+0x210>)
    c606:	e7e2      	b.n	c5ce <discovery_callback+0x146>
		cur_attr = attr_store(dm, attr, 0);
    c608:	4621      	mov	r1, r4
    c60a:	e7f3      	b.n	c5f4 <discovery_callback+0x16c>
	if (!attr) {
    c60c:	2900      	cmp	r1, #0
    c60e:	d0e1      	beq.n	c5d4 <discovery_callback+0x14c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    c610:	2300      	movs	r3, #0
    c612:	f88d 3004 	strb.w	r3, [sp, #4]
    c616:	f642 0303 	movw	r3, #10243	; 0x2803
    c61a:	6828      	ldr	r0, [r5, #0]
    c61c:	a901      	add	r1, sp, #4
    c61e:	f8ad 3006 	strh.w	r3, [sp, #6]
    c622:	f00f fadc 	bl	1bbde <bt_uuid_cmp>
    c626:	b150      	cbz	r0, c63e <discovery_callback+0x1b6>
    c628:	4914      	ldr	r1, [pc, #80]	; (c67c <discovery_callback+0x1f4>)
    c62a:	4815      	ldr	r0, [pc, #84]	; (c680 <discovery_callback+0x1f8>)
    c62c:	f44f 72c0 	mov.w	r2, #384	; 0x180
    c630:	f00e f81c 	bl	1a66c <printk>
    c634:	f44f 71c0 	mov.w	r1, #384	; 0x180
    c638:	4810      	ldr	r0, [pc, #64]	; (c67c <discovery_callback+0x1f4>)
    c63a:	f00e fabd 	bl	1abb8 <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    c63e:	8a29      	ldrh	r1, [r5, #16]
    c640:	480c      	ldr	r0, [pc, #48]	; (c674 <discovery_callback+0x1ec>)
    c642:	f00e fbc7 	bl	1add4 <attr_find_by_handle>
	if (!cur_attr) {
    c646:	4604      	mov	r4, r0
    c648:	b920      	cbnz	r0, c654 <discovery_callback+0x1cc>
		discovery_complete_error(dm, -ESRCH);
    c64a:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    c64e:	f7ff fe91 	bl	c374 <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    c652:	e7a8      	b.n	c5a6 <discovery_callback+0x11e>
	gatt_chrc = attr->user_data;
    c654:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    c656:	f00e fc31 	bl	1aebc <bt_gatt_dm_attr_chrc_val>
    c65a:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    c65c:	4621      	mov	r1, r4
    c65e:	2208      	movs	r2, #8
    c660:	f00f fa48 	bl	1baf4 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    c664:	6828      	ldr	r0, [r5, #0]
    c666:	f7ff feeb 	bl	c440 <uuid_store.constprop.0>
    c66a:	4604      	mov	r4, r0
    c66c:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    c66e:	2800      	cmp	r0, #0
    c670:	d198      	bne.n	c5a4 <discovery_callback+0x11c>
    c672:	e790      	b.n	c596 <discovery_callback+0x10e>
    c674:	2000a88c 	.word	0x2000a88c
    c678:	00020328 	.word	0x00020328
    c67c:	00020285 	.word	0x00020285
    c680:	0001fbb7 	.word	0x0001fbb7
    c684:	000203dc 	.word	0x000203dc
    c688:	0002034f 	.word	0x0002034f
    c68c:	0002037d 	.word	0x0002037d
    c690:	2000a894 	.word	0x2000a894
    c694:	000203b0 	.word	0x000203b0
    c698:	0002040c 	.word	0x0002040c

0000c69c <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    c69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c6a0:	4606      	mov	r6, r0
    c6a2:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    c6a4:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
    c6a6:	f8df 8044 	ldr.w	r8, [pc, #68]	; c6ec <bt_gatt_dm_char_by_uuid+0x50>
    c6aa:	f8df 9044 	ldr.w	r9, [pc, #68]	; c6f0 <bt_gatt_dm_char_by_uuid+0x54>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    c6ae:	4621      	mov	r1, r4
    c6b0:	4630      	mov	r0, r6
    c6b2:	f00e fc1b 	bl	1aeec <bt_gatt_dm_char_next>
    c6b6:	4604      	mov	r4, r0
    c6b8:	b1a0      	cbz	r0, c6e4 <bt_gatt_dm_char_by_uuid+0x48>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    c6ba:	f00e fbff 	bl	1aebc <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
    c6be:	4605      	mov	r5, r0
    c6c0:	b950      	cbnz	r0, c6d8 <bt_gatt_dm_char_by_uuid+0x3c>
    c6c2:	4641      	mov	r1, r8
    c6c4:	4648      	mov	r0, r9
    c6c6:	f240 12fb 	movw	r2, #507	; 0x1fb
    c6ca:	f00d ffcf 	bl	1a66c <printk>
    c6ce:	f240 11fb 	movw	r1, #507	; 0x1fb
    c6d2:	4640      	mov	r0, r8
    c6d4:	f00e fa70 	bl	1abb8 <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    c6d8:	4638      	mov	r0, r7
    c6da:	6829      	ldr	r1, [r5, #0]
    c6dc:	f00f fa7f 	bl	1bbde <bt_uuid_cmp>
    c6e0:	2800      	cmp	r0, #0
    c6e2:	d1e4      	bne.n	c6ae <bt_gatt_dm_char_by_uuid+0x12>
			return curr;
		}
	}

	return NULL;
}
    c6e4:	4620      	mov	r0, r4
    c6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c6ea:	bf00      	nop
    c6ec:	00020285 	.word	0x00020285
    c6f0:	0001fbb7 	.word	0x0001fbb7

0000c6f4 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    c6f4:	b570      	push	{r4, r5, r6, lr}
    c6f6:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    c6f8:	4608      	mov	r0, r1
    c6fa:	b119      	cbz	r1, c704 <bt_gatt_dm_start+0x10>
    c6fc:	7809      	ldrb	r1, [r1, #0]
    c6fe:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    c702:	d139      	bne.n	c778 <bt_gatt_dm_start+0x84>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    c704:	2a00      	cmp	r2, #0
    c706:	d037      	beq.n	c778 <bt_gatt_dm_start+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c708:	4c1e      	ldr	r4, [pc, #120]	; (c784 <bt_gatt_dm_start+0x90>)
    c70a:	f504 769c 	add.w	r6, r4, #312	; 0x138
    c70e:	e8d6 1fef 	ldaex	r1, [r6]
    c712:	f041 0c01 	orr.w	ip, r1, #1
    c716:	e8c6 cfee 	stlex	lr, ip, [r6]
    c71a:	f1be 0f00 	cmp.w	lr, #0
    c71e:	d1f6      	bne.n	c70e <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    c720:	f011 0101 	ands.w	r1, r1, #1
    c724:	d12b      	bne.n	c77e <bt_gatt_dm_start+0x8a>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    c726:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
    c72a:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    c72e:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    c732:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    c736:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    c73a:	b108      	cbz	r0, c740 <bt_gatt_dm_start+0x4c>
    c73c:	f7ff fe80 	bl	c440 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    c740:	4b11      	ldr	r3, [pc, #68]	; (c788 <bt_gatt_dm_start+0x94>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    c742:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
    c744:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    c746:	2301      	movs	r3, #1
    c748:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    c74a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c74e:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    c750:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
    c752:	4628      	mov	r0, r5
    c754:	490d      	ldr	r1, [pc, #52]	; (c78c <bt_gatt_dm_start+0x98>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    c756:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    c758:	f007 fdd2 	bl	14300 <bt_gatt_discover>
	if (err) {
    c75c:	4604      	mov	r4, r0
    c75e:	b148      	cbz	r0, c774 <bt_gatt_dm_start+0x80>
		LOG_ERR("Discover failed, error: %d.", err);
    c760:	4602      	mov	r2, r0
    c762:	2145      	movs	r1, #69	; 0x45
    c764:	480a      	ldr	r0, [pc, #40]	; (c790 <bt_gatt_dm_start+0x9c>)
    c766:	f00d ff81 	bl	1a66c <printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c76a:	f06f 0101 	mvn.w	r1, #1
    c76e:	4809      	ldr	r0, [pc, #36]	; (c794 <bt_gatt_dm_start+0xa0>)
    c770:	f00e fb65 	bl	1ae3e <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    c774:	4620      	mov	r0, r4
    c776:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    c778:	f06f 0415 	mvn.w	r4, #21
    c77c:	e7fa      	b.n	c774 <bt_gatt_dm_start+0x80>
		return -EALREADY;
    c77e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    c782:	e7f7      	b.n	c774 <bt_gatt_dm_start+0x80>
    c784:	2000a88c 	.word	0x2000a88c
    c788:	0000c489 	.word	0x0000c489
    c78c:	2000a894 	.word	0x2000a894
    c790:	0002044f 	.word	0x0002044f
    c794:	2000a9c4 	.word	0x2000a9c4

0000c798 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    c798:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    c79a:	4c06      	ldr	r4, [pc, #24]	; (c7b4 <scan_default_param_set+0x1c>)
{
    c79c:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    c79e:	ad01      	add	r5, sp, #4
    c7a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c7a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c7a4:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    c7a6:	4c04      	ldr	r4, [pc, #16]	; (c7b8 <scan_default_param_set+0x20>)
    c7a8:	ad01      	add	r5, sp, #4
    c7aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c7ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c7ae:	6026      	str	r6, [r4, #0]
}
    c7b0:	b006      	add	sp, #24
    c7b2:	bd70      	pop	{r4, r5, r6, pc}
    c7b4:	0001e570 	.word	0x0001e570
    c7b8:	2000aa38 	.word	0x2000aa38

0000c7bc <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
    c7bc:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
    c7c0:	4b02      	ldr	r3, [pc, #8]	; (c7cc <scan_default_conn_param_set+0x10>)
    c7c2:	4903      	ldr	r1, [pc, #12]	; (c7d0 <scan_default_conn_param_set+0x14>)
    c7c4:	e9c3 121d 	strd	r1, r2, [r3, #116]	; 0x74
}
    c7c8:	4770      	bx	lr
    c7ca:	bf00      	nop
    c7cc:	2000a9d8 	.word	0x2000a9d8
    c7d0:	00280018 	.word	0x00280018

0000c7d4 <uuid_check>:
{
    c7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_scan.scan_filters.uuid.enabled;
    c7d8:	4c29      	ldr	r4, [pc, #164]	; (c880 <uuid_check+0xac>)
{
    c7da:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    c7dc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
{
    c7e0:	4606      	mov	r6, r0
    c7e2:	9100      	str	r1, [sp, #0]
    c7e4:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    c7e6:	2b00      	cmp	r3, #0
    c7e8:	d03c      	beq.n	c864 <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
    c7ea:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
    c7ec:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
    c7ee:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    c7f0:	f894 b058 	ldrb.w	fp, [r4, #88]	; 0x58
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    c7f4:	f894 a050 	ldrb.w	sl, [r4, #80]	; 0x50
	uint8_t data_len = data->data_len;
    c7f8:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    c7fa:	4557      	cmp	r7, sl
    c7fc:	d30e      	bcc.n	c81c <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
    c7fe:	f886 5044 	strb.w	r5, [r6, #68]	; 0x44
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    c802:	f1bb 0f00 	cmp.w	fp, #0
    c806:	d02b      	beq.n	c860 <uuid_check+0x8c>
    c808:	45aa      	cmp	sl, r5
    c80a:	d12b      	bne.n	c864 <uuid_check+0x90>
			control->filter_match_cnt++;
    c80c:	7873      	ldrb	r3, [r6, #1]
    c80e:	3301      	adds	r3, #1
    c810:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
    c812:	2301      	movs	r3, #1
    c814:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
    c818:	70b3      	strb	r3, [r6, #2]
}
    c81a:	e023      	b.n	c864 <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c81c:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    c820:	9b00      	ldr	r3, [sp, #0]
    c822:	9a03      	ldr	r2, [sp, #12]
    c824:	685b      	ldr	r3, [r3, #4]
    c826:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    c828:	4b16      	ldr	r3, [pc, #88]	; (c884 <uuid_check+0xb0>)
    c82a:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c82e:	9b01      	ldr	r3, [sp, #4]
    c830:	4599      	cmp	r9, r3
    c832:	d305      	bcc.n	c840 <uuid_check+0x6c>
		} else if (all_filters_mode) {
    c834:	f1bb 0f00 	cmp.w	fp, #0
    c838:	d1e1      	bne.n	c7fe <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
    c83a:	3701      	adds	r7, #1
    c83c:	3418      	adds	r4, #24
    c83e:	e7dc      	b.n	c7fa <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    c840:	9b02      	ldr	r3, [sp, #8]
    c842:	4642      	mov	r2, r8
    c844:	eb03 0109 	add.w	r1, r3, r9
    c848:	a805      	add	r0, sp, #20
    c84a:	f00f f9f6 	bl	1bc3a <bt_uuid_create>
    c84e:	2800      	cmp	r0, #0
    c850:	d0f0      	beq.n	c834 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    c852:	68a1      	ldr	r1, [r4, #8]
    c854:	a805      	add	r0, sp, #20
    c856:	f00f f9c2 	bl	1bbde <bt_uuid_cmp>
    c85a:	b130      	cbz	r0, c86a <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c85c:	44c1      	add	r9, r8
    c85e:	e7e6      	b.n	c82e <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    c860:	2d00      	cmp	r5, #0
    c862:	d1d3      	bne.n	c80c <uuid_check+0x38>
}
    c864:	b00b      	add	sp, #44	; 0x2c
    c866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
    c86a:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    c86c:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
    c870:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    c872:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
    c874:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    c876:	f1bb 0f00 	cmp.w	fp, #0
    c87a:	d1de      	bne.n	c83a <uuid_check+0x66>
    c87c:	e7bf      	b.n	c7fe <uuid_check+0x2a>
    c87e:	bf00      	nop
    c880:	2000a9d8 	.word	0x2000a9d8
    c884:	0002048a 	.word	0x0002048a

0000c888 <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    c888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    c88c:	7803      	ldrb	r3, [r0, #0]
{
    c88e:	4605      	mov	r5, r0
	switch (data->type) {
    c890:	2b19      	cmp	r3, #25
{
    c892:	460c      	mov	r4, r1
	switch (data->type) {
    c894:	d812      	bhi.n	c8bc <adv_data_found+0x34>
    c896:	2b01      	cmp	r3, #1
    c898:	d912      	bls.n	c8c0 <adv_data_found+0x38>
    c89a:	3b02      	subs	r3, #2
    c89c:	2b17      	cmp	r3, #23
    c89e:	d80f      	bhi.n	c8c0 <adv_data_found+0x38>
    c8a0:	e8df f003 	tbb	[pc, r3]
    c8a4:	80807a7a 	.word	0x80807a7a
    c8a8:	11318282 	.word	0x11318282
    c8ac:	0e0e0e0e 	.word	0x0e0e0e0e
    c8b0:	0e0e0e0e 	.word	0x0e0e0e0e
    c8b4:	0e0e0e0e 	.word	0x0e0e0e0e
    c8b8:	560e0e0e 	.word	0x560e0e0e
    c8bc:	2bff      	cmp	r3, #255	; 0xff
    c8be:	d075      	beq.n	c9ac <adv_data_found+0x124>
	default:
		break;
	}

	return true;
}
    c8c0:	2001      	movs	r0, #1
    c8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_scan.scan_filters.name.enabled;
    c8c6:	4f4e      	ldr	r7, [pc, #312]	; (ca00 <adv_data_found+0x178>)
	if (is_name_filter_enabled()) {
    c8c8:	787b      	ldrb	r3, [r7, #1]
    c8ca:	2b00      	cmp	r3, #0
    c8cc:	d0f8      	beq.n	c8c0 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c8ce:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.name.cnt;
    c8d0:	f897 a000 	ldrb.w	sl, [r7]
	uint8_t data_len = data->data_len;
    c8d4:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    c8d8:	4556      	cmp	r6, sl
    c8da:	d2f1      	bcs.n	c8c0 <adv_data_found+0x38>
		if (adv_name_cmp(data->data,
    c8dc:	eb07 1946 	add.w	r9, r7, r6, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    c8e0:	4642      	mov	r2, r8
    c8e2:	4648      	mov	r0, r9
    c8e4:	6869      	ldr	r1, [r5, #4]
    c8e6:	f00f f8e3 	bl	1bab0 <strncmp>
		if (adv_name_cmp(data->data,
    c8ea:	b950      	cbnz	r0, c902 <adv_data_found+0x7a>
			control->filter_match_cnt++;
    c8ec:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    c8ee:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
    c8f2:	3301      	adds	r3, #1
    c8f4:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    c8f6:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    c8f8:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
    c8fc:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
    c8fe:	70a3      	strb	r3, [r4, #2]
    c900:	e7de      	b.n	c8c0 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c902:	3601      	adds	r6, #1
    c904:	e7e8      	b.n	c8d8 <adv_data_found+0x50>
	return bt_scan.scan_filters.short_name.enabled;
    c906:	4e3e      	ldr	r6, [pc, #248]	; (ca00 <adv_data_found+0x178>)
	if (is_short_name_filter_enabled()) {
    c908:	78f3      	ldrb	r3, [r6, #3]
    c90a:	2b00      	cmp	r3, #0
    c90c:	d0d8      	beq.n	c8c0 <adv_data_found+0x38>
	uint8_t data_len = data->data_len;
    c90e:	78b3      	ldrb	r3, [r6, #2]
    c910:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    c914:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    c918:	18f7      	adds	r7, r6, r3
    c91a:	42be      	cmp	r6, r7
    c91c:	d0d0      	beq.n	c8c0 <adv_data_found+0x38>
	if ((data_len >= short_name_min_len) &&
    c91e:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    c922:	4543      	cmp	r3, r8
    c924:	d812      	bhi.n	c94c <adv_data_found+0xc4>
    c926:	f106 0902 	add.w	r9, r6, #2
	    (strncmp(target_name, data, data_len) == 0)) {
    c92a:	4642      	mov	r2, r8
    c92c:	4648      	mov	r0, r9
    c92e:	6869      	ldr	r1, [r5, #4]
    c930:	f00f f8be 	bl	1bab0 <strncmp>
	if ((data_len >= short_name_min_len) &&
    c934:	b950      	cbnz	r0, c94c <adv_data_found+0xc4>
			control->filter_match_cnt++;
    c936:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.short_name.name =
    c938:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
			control->filter_match_cnt++;
    c93c:	3301      	adds	r3, #1
    c93e:	7063      	strb	r3, [r4, #1]
			control->filter_status.short_name.match = true;
    c940:	2301      	movs	r3, #1
			control->filter_status.short_name.len = data_len;
    c942:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
			control->filter_status.short_name.match = true;
    c946:	f884 3020 	strb.w	r3, [r4, #32]
			control->filter_match = true;
    c94a:	e7d8      	b.n	c8fe <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c94c:	3621      	adds	r6, #33	; 0x21
    c94e:	e7e4      	b.n	c91a <adv_data_found+0x92>
	return bt_scan.scan_filters.appearance.enabled;
    c950:	482b      	ldr	r0, [pc, #172]	; (ca00 <adv_data_found+0x178>)
	if (is_appearance_filter_enabled()) {
    c952:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
    c956:	2b00      	cmp	r3, #0
    c958:	d0b2      	beq.n	c8c0 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c95a:	2300      	movs	r3, #0
	const uint8_t counter =
    c95c:	f890 6054 	ldrb.w	r6, [r0, #84]	; 0x54
	uint8_t data_len = data->data_len;
    c960:	786f      	ldrb	r7, [r5, #1]
	for (size_t i = 0; i < counter; i++) {
    c962:	42b3      	cmp	r3, r6
    c964:	d2ac      	bcs.n	c8c0 <adv_data_found+0x38>
	if (data_len != sizeof(uint16_t)) {
    c966:	2f02      	cmp	r7, #2
    c968:	d114      	bne.n	c994 <adv_data_found+0x10c>
	if (decoded_appearance == *appearance) {
    c96a:	686a      	ldr	r2, [r5, #4]
    c96c:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    c970:	8812      	ldrh	r2, [r2, #0]
    c972:	f8b1 1054 	ldrh.w	r1, [r1, #84]	; 0x54
    c976:	ba52      	rev16	r2, r2
    c978:	b292      	uxth	r2, r2
    c97a:	4291      	cmp	r1, r2
    c97c:	d10a      	bne.n	c994 <adv_data_found+0x10c>
		if (find_appearance(data->data,
    c97e:	332a      	adds	r3, #42	; 0x2a
    c980:	eb00 0343 	add.w	r3, r0, r3, lsl #1
			control->filter_status.appearance.appearance =
    c984:	64e3      	str	r3, [r4, #76]	; 0x4c
			control->filter_match_cnt++;
    c986:	7863      	ldrb	r3, [r4, #1]
    c988:	3301      	adds	r3, #1
    c98a:	7063      	strb	r3, [r4, #1]
			control->filter_status.appearance.match = true;
    c98c:	2301      	movs	r3, #1
    c98e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
			control->filter_match = true;
    c992:	e7b4      	b.n	c8fe <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c994:	3301      	adds	r3, #1
    c996:	e7e4      	b.n	c962 <adv_data_found+0xda>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
    c998:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    c99a:	4629      	mov	r1, r5
    c99c:	4620      	mov	r0, r4
    c99e:	f7ff ff19 	bl	c7d4 <uuid_check>
		break;
    c9a2:	e78d      	b.n	c8c0 <adv_data_found+0x38>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
    c9a4:	2201      	movs	r2, #1
    c9a6:	e7f8      	b.n	c99a <adv_data_found+0x112>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    c9a8:	2202      	movs	r2, #2
    c9aa:	e7f6      	b.n	c99a <adv_data_found+0x112>
	return bt_scan.scan_filters.manufacturer_data.enabled;
    c9ac:	f8df 8050 	ldr.w	r8, [pc, #80]	; ca00 <adv_data_found+0x178>
	if (is_manufacturer_data_filter_enabled()) {
    c9b0:	f898 3057 	ldrb.w	r3, [r8, #87]	; 0x57
    c9b4:	2b00      	cmp	r3, #0
    c9b6:	d083      	beq.n	c8c0 <adv_data_found+0x38>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    c9b8:	4647      	mov	r7, r8
	for (size_t i = 0; i < counter; i++) {
    c9ba:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    c9bc:	f817 9f56 	ldrb.w	r9, [r7, #86]!
	for (size_t i = 0; i < counter; i++) {
    c9c0:	454e      	cmp	r6, r9
    c9c2:	f4bf af7d 	bcs.w	c8c0 <adv_data_found+0x38>
		if (adv_manufacturer_data_cmp(data->data,
    c9c6:	f897 2020 	ldrb.w	r2, [r7, #32]
	if (target_data_len > data_len) {
    c9ca:	786b      	ldrb	r3, [r5, #1]
    c9cc:	4293      	cmp	r3, r2
    c9ce:	d313      	bcc.n	c9f8 <adv_data_found+0x170>
	if (memcmp(target_data, data, target_data_len) != 0) {
    c9d0:	4638      	mov	r0, r7
    c9d2:	6869      	ldr	r1, [r5, #4]
    c9d4:	f00f f87d 	bl	1bad2 <memcmp>
    c9d8:	b970      	cbnz	r0, c9f8 <adv_data_found+0x170>
				md_filter->manufacturer_data[i].data_len;
    c9da:	eb06 1646 	add.w	r6, r6, r6, lsl #5
			control->filter_status.manufacturer_data.data =
    c9de:	6567      	str	r7, [r4, #84]	; 0x54
				md_filter->manufacturer_data[i].data_len;
    c9e0:	4446      	add	r6, r8
			control->filter_status.manufacturer_data.len =
    c9e2:	f896 3076 	ldrb.w	r3, [r6, #118]	; 0x76
    c9e6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
			control->filter_match_cnt++;
    c9ea:	7863      	ldrb	r3, [r4, #1]
    c9ec:	3301      	adds	r3, #1
    c9ee:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    c9f0:	2301      	movs	r3, #1
    c9f2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    c9f6:	e782      	b.n	c8fe <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c9f8:	3601      	adds	r6, #1
    c9fa:	3721      	adds	r7, #33	; 0x21
    c9fc:	e7e0      	b.n	c9c0 <adv_data_found+0x138>
    c9fe:	bf00      	nop
    ca00:	2000a9d8 	.word	0x2000a9d8

0000ca04 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    ca04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca06:	4605      	mov	r5, r0
    ca08:	460e      	mov	r6, r1
    ca0a:	4617      	mov	r7, r2
	return list->head;
    ca0c:	4b08      	ldr	r3, [pc, #32]	; (ca30 <notify_filter_matched.constprop.0+0x2c>)
    ca0e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    ca10:	b10c      	cbz	r4, ca16 <notify_filter_matched.constprop.0+0x12>
    ca12:	3c04      	subs	r4, #4
    ca14:	b904      	cbnz	r4, ca18 <notify_filter_matched.constprop.0+0x14>
}
    ca16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
    ca18:	6823      	ldr	r3, [r4, #0]
    ca1a:	681b      	ldr	r3, [r3, #0]
    ca1c:	b11b      	cbz	r3, ca26 <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
    ca1e:	463a      	mov	r2, r7
    ca20:	4631      	mov	r1, r6
    ca22:	4628      	mov	r0, r5
    ca24:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    ca26:	1d23      	adds	r3, r4, #4
    ca28:	d0f5      	beq.n	ca16 <notify_filter_matched.constprop.0+0x12>
	return node->next;
    ca2a:	6864      	ldr	r4, [r4, #4]
    ca2c:	e7f0      	b.n	ca10 <notify_filter_matched.constprop.0+0xc>
    ca2e:	bf00      	nop
    ca30:	2000aa54 	.word	0x2000aa54

0000ca34 <bt_scan_cb_register>:
	if (!cb) {
    ca34:	b150      	cbz	r0, ca4c <bt_scan_cb_register+0x18>
	parent->next = child;
    ca36:	2300      	movs	r3, #0
    ca38:	6043      	str	r3, [r0, #4]
	return list->tail;
    ca3a:	4b05      	ldr	r3, [pc, #20]	; (ca50 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    ca3c:	1d02      	adds	r2, r0, #4
    ca3e:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    ca40:	b911      	cbnz	r1, ca48 <bt_scan_cb_register+0x14>
	list->head = node;
    ca42:	e9c3 2200 	strd	r2, r2, [r3]
}
    ca46:	4770      	bx	lr
	parent->next = child;
    ca48:	600a      	str	r2, [r1, #0]
	list->tail = node;
    ca4a:	605a      	str	r2, [r3, #4]
}
    ca4c:	4770      	bx	lr
    ca4e:	bf00      	nop
    ca50:	2000aa54 	.word	0x2000aa54

0000ca54 <bt_scan_filter_add>:
{
    ca54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca58:	4604      	mov	r4, r0
	if (!data) {
    ca5a:	460d      	mov	r5, r1
    ca5c:	2900      	cmp	r1, #0
    ca5e:	d06a      	beq.n	cb36 <bt_scan_filter_add+0xe2>
	return z_impl_k_mutex_lock(mutex, timeout);
    ca60:	f04f 32ff 	mov.w	r2, #4294967295
    ca64:	f04f 33ff 	mov.w	r3, #4294967295
    ca68:	4834      	ldr	r0, [pc, #208]	; (cb3c <bt_scan_filter_add+0xe8>)
    ca6a:	f00b f973 	bl	17d54 <z_impl_k_mutex_lock>
	switch (type) {
    ca6e:	2c03      	cmp	r4, #3
    ca70:	d006      	beq.n	ca80 <bt_scan_filter_add+0x2c>
    ca72:	d902      	bls.n	ca7a <bt_scan_filter_add+0x26>
    ca74:	3c04      	subs	r4, #4
    ca76:	2c01      	cmp	r4, #1
    ca78:	d85a      	bhi.n	cb30 <bt_scan_filter_add+0xdc>
		return -ENOMEM;
    ca7a:	f06f 060b 	mvn.w	r6, #11
    ca7e:	e020      	b.n	cac2 <bt_scan_filter_add+0x6e>
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    ca80:	4f2f      	ldr	r7, [pc, #188]	; (cb40 <bt_scan_filter_add+0xec>)
    ca82:	f897 4050 	ldrb.w	r4, [r7, #80]	; 0x50
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    ca86:	2c02      	cmp	r4, #2
    ca88:	d8f7      	bhi.n	ca7a <bt_scan_filter_add+0x26>
    ca8a:	46b9      	mov	r9, r7
	for (size_t i = 0; i < counter; i++) {
    ca8c:	f04f 0800 	mov.w	r8, #0
    ca90:	45a0      	cmp	r8, r4
    ca92:	d31c      	bcc.n	cace <bt_scan_filter_add+0x7a>
	switch (uuid->type) {
    ca94:	782b      	ldrb	r3, [r5, #0]
    ca96:	2b01      	cmp	r3, #1
    ca98:	d026      	beq.n	cae8 <bt_scan_filter_add+0x94>
    ca9a:	2b02      	cmp	r3, #2
    ca9c:	d031      	beq.n	cb02 <bt_scan_filter_add+0xae>
    ca9e:	2b00      	cmp	r3, #0
    caa0:	d146      	bne.n	cb30 <bt_scan_filter_add+0xdc>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    caa2:	4b28      	ldr	r3, [pc, #160]	; (cb44 <bt_scan_filter_add+0xf0>)
    caa4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    caa8:	6828      	ldr	r0, [r5, #0]
    caaa:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    caae:	1d11      	adds	r1, r2, #4
    cab0:	6050      	str	r0, [r2, #4]
		uuid_filter[counter].uuid =
    cab2:	f843 1034 	str.w	r1, [r3, r4, lsl #3]
	return 0;
    cab6:	2600      	movs	r6, #0
	bt_scan.scan_filters.uuid.cnt++;
    cab8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    cabc:	3301      	adds	r3, #1
    cabe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
	return z_impl_k_mutex_unlock(mutex);
    cac2:	481e      	ldr	r0, [pc, #120]	; (cb3c <bt_scan_filter_add+0xe8>)
    cac4:	f00b fa12 	bl	17eec <z_impl_k_mutex_unlock>
}
    cac8:	4630      	mov	r0, r6
    caca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (bt_uuid_cmp(uuid_filter[i].uuid, uuid) == 0) {
    cace:	f8d9 0008 	ldr.w	r0, [r9, #8]
    cad2:	4629      	mov	r1, r5
    cad4:	f00f f883 	bl	1bbde <bt_uuid_cmp>
    cad8:	f109 0918 	add.w	r9, r9, #24
    cadc:	4606      	mov	r6, r0
    cade:	2800      	cmp	r0, #0
    cae0:	d0ef      	beq.n	cac2 <bt_scan_filter_add+0x6e>
	for (size_t i = 0; i < counter; i++) {
    cae2:	f108 0801 	add.w	r8, r8, #1
    cae6:	e7d3      	b.n	ca90 <bt_scan_filter_add+0x3c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    cae8:	4a16      	ldr	r2, [pc, #88]	; (cb44 <bt_scan_filter_add+0xf0>)
    caea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    caee:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
    caf2:	3304      	adds	r3, #4
    caf4:	e895 0003 	ldmia.w	r5, {r0, r1}
    caf8:	e883 0003 	stmia.w	r3, {r0, r1}
		uuid_filter[counter].uuid =
    cafc:	f842 3034 	str.w	r3, [r2, r4, lsl #3]
		break;
    cb00:	e7d9      	b.n	cab6 <bt_scan_filter_add+0x62>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    cb02:	4a10      	ldr	r2, [pc, #64]	; (cb44 <bt_scan_filter_add+0xf0>)
    cb04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    cb08:	00e6      	lsls	r6, r4, #3
    cb0a:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    cb0e:	3404      	adds	r4, #4
    cb10:	46a4      	mov	ip, r4
    cb12:	f105 0e10 	add.w	lr, r5, #16
    cb16:	4623      	mov	r3, r4
    cb18:	6828      	ldr	r0, [r5, #0]
    cb1a:	6869      	ldr	r1, [r5, #4]
    cb1c:	3508      	adds	r5, #8
    cb1e:	c303      	stmia	r3!, {r0, r1}
    cb20:	4575      	cmp	r5, lr
    cb22:	461c      	mov	r4, r3
    cb24:	d1f7      	bne.n	cb16 <bt_scan_filter_add+0xc2>
    cb26:	782b      	ldrb	r3, [r5, #0]
    cb28:	7023      	strb	r3, [r4, #0]
		uuid_filter[counter].uuid =
    cb2a:	f842 c006 	str.w	ip, [r2, r6]
		break;
    cb2e:	e7c2      	b.n	cab6 <bt_scan_filter_add+0x62>
		err = -EINVAL;
    cb30:	f06f 0615 	mvn.w	r6, #21
		break;
    cb34:	e7c5      	b.n	cac2 <bt_scan_filter_add+0x6e>
		return -EINVAL;
    cb36:	f06f 0615 	mvn.w	r6, #21
    cb3a:	e7c5      	b.n	cac8 <bt_scan_filter_add+0x74>
    cb3c:	2000867c 	.word	0x2000867c
    cb40:	2000a9d8 	.word	0x2000a9d8
    cb44:	2000a9e0 	.word	0x2000a9e0

0000cb48 <bt_scan_filter_remove_all>:
{
    cb48:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    cb4a:	4c0c      	ldr	r4, [pc, #48]	; (cb7c <bt_scan_filter_remove_all+0x34>)
    cb4c:	f04f 32ff 	mov.w	r2, #4294967295
    cb50:	f04f 33ff 	mov.w	r3, #4294967295
    cb54:	4620      	mov	r0, r4
    cb56:	f00b f8fd 	bl	17d54 <z_impl_k_mutex_lock>
	name_filter->cnt = 0;
    cb5a:	2200      	movs	r2, #0
    cb5c:	4b08      	ldr	r3, [pc, #32]	; (cb80 <bt_scan_filter_remove_all+0x38>)
    cb5e:	701a      	strb	r2, [r3, #0]
	short_name_filter->cnt = 0;
    cb60:	709a      	strb	r2, [r3, #2]
	addr_filter->cnt = 0;
    cb62:	711a      	strb	r2, [r3, #4]
	uuid_filter->cnt = 0;
    cb64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	appearance_filter->cnt = 0;
    cb68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	manufacturer_data_filter->cnt = 0;
    cb6c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	return z_impl_k_mutex_unlock(mutex);
    cb70:	4620      	mov	r0, r4
}
    cb72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cb76:	f00b b9b9 	b.w	17eec <z_impl_k_mutex_unlock>
    cb7a:	bf00      	nop
    cb7c:	2000867c 	.word	0x2000867c
    cb80:	2000a9d8 	.word	0x2000a9d8

0000cb84 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    cb84:	2200      	movs	r2, #0
    cb86:	4b05      	ldr	r3, [pc, #20]	; (cb9c <bt_scan_filter_disable+0x18>)
    cb88:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    cb8a:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    cb8c:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    cb8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	bt_scan.scan_filters.appearance.enabled = false;
    cb92:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    cb96:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
    cb9a:	4770      	bx	lr
    cb9c:	2000a9d8 	.word	0x2000a9d8

0000cba0 <bt_scan_filter_enable>:
{
    cba0:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    cba2:	0683      	lsls	r3, r0, #26
    cba4:	d025      	beq.n	cbf2 <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
    cba6:	f7ff ffed 	bl	cb84 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    cbaa:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    cbae:	bf18      	it	ne
    cbb0:	2201      	movne	r2, #1
    cbb2:	4b11      	ldr	r3, [pc, #68]	; (cbf8 <bt_scan_filter_enable+0x58>)
    cbb4:	bf18      	it	ne
    cbb6:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
    cbb8:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    cbba:	bf44      	itt	mi
    cbbc:	2201      	movmi	r2, #1
    cbbe:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    cbc0:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    cbc2:	bf44      	itt	mi
    cbc4:	2201      	movmi	r2, #1
    cbc6:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
    cbc8:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    cbca:	bf44      	itt	mi
    cbcc:	2201      	movmi	r2, #1
    cbce:	f883 2051 	strbmi.w	r2, [r3, #81]	; 0x51
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    cbd2:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    cbd4:	bf44      	itt	mi
    cbd6:	2201      	movmi	r2, #1
    cbd8:	f883 2055 	strbmi.w	r2, [r3, #85]	; 0x55
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    cbdc:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    cbde:	bf48      	it	mi
    cbe0:	2201      	movmi	r2, #1
	return 0;
    cbe2:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    cbe6:	bf48      	it	mi
    cbe8:	f883 2057 	strbmi.w	r2, [r3, #87]	; 0x57
	filters->all_mode = match_all;
    cbec:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
}
    cbf0:	bd08      	pop	{r3, pc}
		return -EINVAL;
    cbf2:	f06f 0015 	mvn.w	r0, #21
    cbf6:	e7fb      	b.n	cbf0 <bt_scan_filter_enable+0x50>
    cbf8:	2000a9d8 	.word	0x2000a9d8

0000cbfc <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    cbfc:	b570      	push	{r4, r5, r6, lr}
    cbfe:	460e      	mov	r6, r1
    cc00:	b086      	sub	sp, #24
    cc02:	4605      	mov	r5, r0
	bt_scan_stop();
    cc04:	f00e f9e7 	bl	1afd6 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    cc08:	4b18      	ldr	r3, [pc, #96]	; (cc6c <scan_connect_with_target.part.0+0x70>)
    cc0a:	ac02      	add	r4, sp, #8
    cc0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    cc0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    cc12:	4621      	mov	r1, r4
    cc14:	ab01      	add	r3, sp, #4
    cc16:	4630      	mov	r0, r6
    cc18:	4a15      	ldr	r2, [pc, #84]	; (cc70 <scan_connect_with_target.part.0+0x74>)
    cc1a:	f004 fcdb 	bl	115d4 <bt_conn_le_create>
	if (err) {
    cc1e:	4b15      	ldr	r3, [pc, #84]	; (cc74 <scan_connect_with_target.part.0+0x78>)
		notify_connecting_error(&control->device_info);
    cc20:	3508      	adds	r5, #8
	return list->head;
    cc22:	681c      	ldr	r4, [r3, #0]
	if (err) {
    cc24:	b168      	cbz	r0, cc42 <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cc26:	b10c      	cbz	r4, cc2c <scan_connect_with_target.part.0+0x30>
    cc28:	3c04      	subs	r4, #4
    cc2a:	b90c      	cbnz	r4, cc30 <scan_connect_with_target.part.0+0x34>
}
    cc2c:	b006      	add	sp, #24
    cc2e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
    cc30:	6823      	ldr	r3, [r4, #0]
    cc32:	689b      	ldr	r3, [r3, #8]
    cc34:	b10b      	cbz	r3, cc3a <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
    cc36:	4628      	mov	r0, r5
    cc38:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    cc3a:	1d22      	adds	r2, r4, #4
    cc3c:	d0f6      	beq.n	cc2c <scan_connect_with_target.part.0+0x30>
	return node->next;
    cc3e:	6864      	ldr	r4, [r4, #4]
    cc40:	e7f1      	b.n	cc26 <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cc42:	b91c      	cbnz	r4, cc4c <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
    cc44:	9801      	ldr	r0, [sp, #4]
    cc46:	f004 fb07 	bl	11258 <bt_conn_unref>
    cc4a:	e7ef      	b.n	cc2c <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
    cc4c:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cc4e:	3c04      	subs	r4, #4
    cc50:	2c00      	cmp	r4, #0
    cc52:	d0f7      	beq.n	cc44 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
    cc54:	6823      	ldr	r3, [r4, #0]
    cc56:	68db      	ldr	r3, [r3, #12]
    cc58:	b113      	cbz	r3, cc60 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
    cc5a:	4631      	mov	r1, r6
    cc5c:	4628      	mov	r0, r5
    cc5e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    cc60:	1d23      	adds	r3, r4, #4
    cc62:	d0ef      	beq.n	cc44 <scan_connect_with_target.part.0+0x48>
	return node->next;
    cc64:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cc66:	2c00      	cmp	r4, #0
    cc68:	d1f1      	bne.n	cc4e <scan_connect_with_target.part.0+0x52>
    cc6a:	e7eb      	b.n	cc44 <scan_connect_with_target.part.0+0x48>
    cc6c:	0001e584 	.word	0x0001e584
    cc70:	2000aa4c 	.word	0x2000aa4c
    cc74:	2000aa54 	.word	0x2000aa54

0000cc78 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
    cc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    cc7c:	4c54      	ldr	r4, [pc, #336]	; (cdd0 <scan_recv+0x158>)
{
    cc7e:	b099      	sub	sp, #100	; 0x64
	memset(&scan_control, 0, sizeof(scan_control));
    cc80:	225c      	movs	r2, #92	; 0x5c
{
    cc82:	4606      	mov	r6, r0
    cc84:	460d      	mov	r5, r1
	memset(&scan_control, 0, sizeof(scan_control));
    cc86:	a801      	add	r0, sp, #4
    cc88:	2100      	movs	r1, #0
    cc8a:	f00e ff5e 	bl	1bb4a <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    cc8e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
	return bt_scan.scan_filters.addr.enabled;
    cc92:	7962      	ldrb	r2, [r4, #5]
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    cc94:	f88d 3007 	strb.w	r3, [sp, #7]
	control->filter_cnt = 0;
    cc98:	2300      	movs	r3, #0
    cc9a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_addr_filter_enabled()) {
    cc9e:	b112      	cbz	r2, cca6 <scan_recv+0x2e>
		control->filter_cnt++;
    cca0:	2301      	movs	r3, #1
    cca2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_name_filter_enabled()) {
    cca6:	7863      	ldrb	r3, [r4, #1]
    cca8:	b123      	cbz	r3, ccb4 <scan_recv+0x3c>
		control->filter_cnt++;
    ccaa:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ccae:	3301      	adds	r3, #1
    ccb0:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_short_name_filter_enabled()) {
    ccb4:	78e3      	ldrb	r3, [r4, #3]
    ccb6:	b123      	cbz	r3, ccc2 <scan_recv+0x4a>
		control->filter_cnt++;
    ccb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ccbc:	3301      	adds	r3, #1
    ccbe:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_uuid_filter_enabled()) {
    ccc2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    ccc6:	b123      	cbz	r3, ccd2 <scan_recv+0x5a>
		control->filter_cnt++;
    ccc8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    cccc:	3301      	adds	r3, #1
    ccce:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_appearance_filter_enabled()) {
    ccd2:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
    ccd6:	b123      	cbz	r3, cce2 <scan_recv+0x6a>
		control->filter_cnt++;
    ccd8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ccdc:	3301      	adds	r3, #1
    ccde:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_manufacturer_data_filter_enabled()) {
    cce2:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
    cce6:	b123      	cbz	r3, ccf2 <scan_recv+0x7a>
		control->filter_cnt++;
    cce8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ccec:	3301      	adds	r3, #1
    ccee:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
    ccf2:	7a33      	ldrb	r3, [r6, #8]
    ccf4:	f003 0301 	and.w	r3, r3, #1
    ccf8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_addr_filter_enabled()) {
    ccfc:	b1ea      	cbz	r2, cd3a <scan_recv+0xc2>
	for (size_t i = 0; i < counter; i++) {
    ccfe:	f04f 0800 	mov.w	r8, #0

	/* Check the address filter. */
	check_addr(&scan_control, info->addr);
    cd02:	f8d6 a000 	ldr.w	sl, [r6]
	uint8_t counter = bt_scan.scan_filters.addr.cnt;
    cd06:	f894 9004 	ldrb.w	r9, [r4, #4]
	for (size_t i = 0; i < counter; i++) {
    cd0a:	4f32      	ldr	r7, [pc, #200]	; (cdd4 <scan_recv+0x15c>)
    cd0c:	45c8      	cmp	r8, r9
    cd0e:	d214      	bcs.n	cd3a <scan_recv+0xc2>
	return memcmp(a, b, sizeof(*a));
    cd10:	4639      	mov	r1, r7
    cd12:	2207      	movs	r2, #7
    cd14:	4650      	mov	r0, sl
    cd16:	f00e fedc 	bl	1bad2 <memcmp>
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
    cd1a:	46bb      	mov	fp, r7
    cd1c:	3707      	adds	r7, #7
    cd1e:	2800      	cmp	r0, #0
    cd20:	d13a      	bne.n	cd98 <scan_recv+0x120>
			control->filter_match_cnt++;
    cd22:	f89d 3005 	ldrb.w	r3, [sp, #5]
			control->filter_status.addr.addr = &addr[i];
    cd26:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
			control->filter_match_cnt++;
    cd2a:	3301      	adds	r3, #1
    cd2c:	f88d 3005 	strb.w	r3, [sp, #5]
			control->filter_status.addr.match = true;
    cd30:	2301      	movs	r3, #1
    cd32:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			control->filter_match = true;
    cd36:	f88d 3006 	strb.w	r3, [sp, #6]
	state->offset = net_buf_simple_headroom(buf);
    cd3a:	4628      	mov	r0, r5
    cd3c:	f010 fa0c 	bl	1d158 <net_buf_simple_headroom>
    cd40:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    cd42:	4925      	ldr	r1, [pc, #148]	; (cdd8 <scan_recv+0x160>)
    cd44:	4628      	mov	r0, r5
    cd46:	aa01      	add	r2, sp, #4
	state->len = buf->len;
    cd48:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    cd4c:	f002 fd3e 	bl	f7cc <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    cd50:	4b22      	ldr	r3, [pc, #136]	; (cddc <scan_recv+0x164>)
	buf->data = buf->__buf + state->offset;
    cd52:	68a8      	ldr	r0, [r5, #8]
	scan_control.device_info.adv_data = ad;
    cd54:	e9cd 3504 	strd	r3, r5, [sp, #16]
	if (control->all_mode &&
    cd58:	f89d 3007 	ldrb.w	r3, [sp, #7]
    cd5c:	fa10 f787 	uxtah	r7, r0, r7
    cd60:	602f      	str	r7, [r5, #0]
	buf->len = state->len;
    cd62:	f8a5 8004 	strh.w	r8, [r5, #4]
	scan_control.device_info.recv_info = info;
    cd66:	9603      	str	r6, [sp, #12]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
    cd68:	6835      	ldr	r5, [r6, #0]
	if (control->all_mode &&
    cd6a:	b1c3      	cbz	r3, cd9e <scan_recv+0x126>
    cd6c:	f89d 2005 	ldrb.w	r2, [sp, #5]
    cd70:	f89d 3004 	ldrb.w	r3, [sp, #4]
    cd74:	429a      	cmp	r2, r3
    cd76:	d116      	bne.n	cda6 <scan_recv+0x12e>
		notify_filter_matched(&control->device_info,
    cd78:	f89d 2008 	ldrb.w	r2, [sp, #8]
    cd7c:	a906      	add	r1, sp, #24
    cd7e:	a803      	add	r0, sp, #12
    cd80:	f7ff fe40 	bl	ca04 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    cd84:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
    cd88:	b11b      	cbz	r3, cd92 <scan_recv+0x11a>
    cd8a:	4629      	mov	r1, r5
    cd8c:	a801      	add	r0, sp, #4
    cd8e:	f7ff ff35 	bl	cbfc <scan_connect_with_target.part.0>
}
    cd92:	b019      	add	sp, #100	; 0x64
    cd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < counter; i++) {
    cd98:	f108 0801 	add.w	r8, r8, #1
    cd9c:	e7b6      	b.n	cd0c <scan_recv+0x94>
	else if ((!control->all_mode) && control->filter_match) {
    cd9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    cda2:	2b00      	cmp	r3, #0
    cda4:	d1e8      	bne.n	cd78 <scan_recv+0x100>
	return list->head;
    cda6:	4b0e      	ldr	r3, [pc, #56]	; (cde0 <scan_recv+0x168>)
    cda8:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cdaa:	2c00      	cmp	r4, #0
    cdac:	d0f1      	beq.n	cd92 <scan_recv+0x11a>
		notify_filter_no_match(&control->device_info,
    cdae:	f89d 5008 	ldrb.w	r5, [sp, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cdb2:	3c04      	subs	r4, #4
    cdb4:	2c00      	cmp	r4, #0
    cdb6:	d0ec      	beq.n	cd92 <scan_recv+0x11a>
		if (cb->cb_addr->filter_no_match) {
    cdb8:	6823      	ldr	r3, [r4, #0]
    cdba:	685b      	ldr	r3, [r3, #4]
    cdbc:	b113      	cbz	r3, cdc4 <scan_recv+0x14c>
			cb->cb_addr->filter_no_match(device_info, connectable);
    cdbe:	4629      	mov	r1, r5
    cdc0:	a803      	add	r0, sp, #12
    cdc2:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    cdc4:	1d23      	adds	r3, r4, #4
    cdc6:	d0e4      	beq.n	cd92 <scan_recv+0x11a>
	return node->next;
    cdc8:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    cdca:	2c00      	cmp	r4, #0
    cdcc:	d1f1      	bne.n	cdb2 <scan_recv+0x13a>
    cdce:	e7e0      	b.n	cd92 <scan_recv+0x11a>
    cdd0:	2000a9d8 	.word	0x2000a9d8
    cdd4:	2000a9dc 	.word	0x2000a9dc
    cdd8:	0000c889 	.word	0x0000c889
    cddc:	2000aa4c 	.word	0x2000aa4c
    cde0:	2000aa54 	.word	0x2000aa54

0000cde4 <bt_scan_init>:
{
    cde4:	b570      	push	{r4, r5, r6, lr}
    cde6:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    cde8:	4c14      	ldr	r4, [pc, #80]	; (ce3c <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
    cdea:	4815      	ldr	r0, [pc, #84]	; (ce40 <bt_scan_init+0x5c>)
    cdec:	f003 ff1a 	bl	10c24 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    cdf0:	225c      	movs	r2, #92	; 0x5c
    cdf2:	2100      	movs	r1, #0
    cdf4:	4620      	mov	r0, r4
    cdf6:	f00e fea8 	bl	1bb4a <memset>
	if (init) {
    cdfa:	b1be      	cbz	r6, ce2c <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
    cdfc:	7933      	ldrb	r3, [r6, #4]
		if (init->scan_param) {
    cdfe:	6835      	ldr	r5, [r6, #0]
		bt_scan.connect_if_match = init->connect_if_match;
    ce00:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (init->scan_param) {
    ce04:	b15d      	cbz	r5, ce1e <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
    ce06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ce08:	3460      	adds	r4, #96	; 0x60
    ce0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ce0c:	682b      	ldr	r3, [r5, #0]
    ce0e:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
    ce10:	68b2      	ldr	r2, [r6, #8]
    ce12:	b13a      	cbz	r2, ce24 <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
    ce14:	4b0b      	ldr	r3, [pc, #44]	; (ce44 <bt_scan_init+0x60>)
    ce16:	6810      	ldr	r0, [r2, #0]
    ce18:	6851      	ldr	r1, [r2, #4]
    ce1a:	c303      	stmia	r3!, {r0, r1}
}
    ce1c:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
    ce1e:	f7ff fcbb 	bl	c798 <scan_default_param_set>
    ce22:	e7f5      	b.n	ce10 <bt_scan_init+0x2c>
}
    ce24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
    ce28:	f7ff bcc8 	b.w	c7bc <scan_default_conn_param_set>
		scan_default_param_set();
    ce2c:	f7ff fcb4 	bl	c798 <scan_default_param_set>
		scan_default_conn_param_set();
    ce30:	f7ff fcc4 	bl	c7bc <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
    ce34:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
}
    ce38:	e7f0      	b.n	ce1c <bt_scan_init+0x38>
    ce3a:	bf00      	nop
    ce3c:	2000a9d8 	.word	0x2000a9d8
    ce40:	200082a4 	.word	0x200082a4
    ce44:	2000aa4c 	.word	0x2000aa4c

0000ce48 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    ce48:	b108      	cbz	r0, ce4e <bt_scan_start+0x6>
    ce4a:	2801      	cmp	r0, #1
    ce4c:	d106      	bne.n	ce5c <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    ce4e:	4b05      	ldr	r3, [pc, #20]	; (ce64 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    ce50:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    ce52:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    ce56:	4804      	ldr	r0, [pc, #16]	; (ce68 <bt_scan_start+0x20>)
    ce58:	f003 be6a 	b.w	10b30 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    ce5c:	f06f 0015 	mvn.w	r0, #21
    ce60:	4770      	bx	lr
    ce62:	bf00      	nop
    ce64:	2000a9d8 	.word	0x2000a9d8
    ce68:	2000aa38 	.word	0x2000aa38

0000ce6c <notify_process>:
 * @retval BT_GATT_ITER_CONTINUE Continue notification
 */
static uint8_t notify_process(struct bt_conn *conn,
			   struct bt_gatt_subscribe_params *params,
			   const void *data, uint16_t length)
{
    ce6c:	b570      	push	{r4, r5, r6, lr}
    ce6e:	460d      	mov	r5, r1
    ce70:	461c      	mov	r4, r3
	struct bt_bas_client *bas;
	uint8_t battery_level;
	const uint8_t *bdata = (uint8_t *)data;

	bas = CONTAINER_OF(params, struct bt_bas_client, notify_params);
    ce72:	1f0e      	subs	r6, r1, #4
	if (!data || !length) {
    ce74:	b102      	cbz	r2, ce78 <notify_process+0xc>
    ce76:	b953      	cbnz	r3, ce8e <notify_process+0x22>
		LOG_INF("Notifications disabled.");
    ce78:	2149      	movs	r1, #73	; 0x49
    ce7a:	480e      	ldr	r0, [pc, #56]	; (ceb4 <notify_process+0x48>)
		return BT_GATT_ITER_STOP;
	}

	battery_level = bdata[0];
	if (battery_level > BT_BAS_VAL_MAX) {
		LOG_ERR("Unexpected notification value.");
    ce7c:	f00d fbf6 	bl	1a66c <printk>
		if (bas->notify_cb) {
    ce80:	6f6b      	ldr	r3, [r5, #116]	; 0x74
    ce82:	b113      	cbz	r3, ce8a <notify_process+0x1e>
			bas->notify_cb(bas, BT_BAS_VAL_INVALID);
    ce84:	21ff      	movs	r1, #255	; 0xff
    ce86:	4630      	mov	r0, r6
    ce88:	4798      	blx	r3
		return BT_GATT_ITER_STOP;
    ce8a:	2000      	movs	r0, #0
	if (bas->notify_cb) {
		bas->notify_cb(bas, battery_level);
	}

	return BT_GATT_ITER_CONTINUE;
}
    ce8c:	bd70      	pop	{r4, r5, r6, pc}
	if (length != 1) {
    ce8e:	2b01      	cmp	r3, #1
    ce90:	d002      	beq.n	ce98 <notify_process+0x2c>
		LOG_ERR("Unexpected notification value size.");
    ce92:	2145      	movs	r1, #69	; 0x45
    ce94:	4808      	ldr	r0, [pc, #32]	; (ceb8 <notify_process+0x4c>)
    ce96:	e7f1      	b.n	ce7c <notify_process+0x10>
	battery_level = bdata[0];
    ce98:	7811      	ldrb	r1, [r2, #0]
	if (battery_level > BT_BAS_VAL_MAX) {
    ce9a:	2964      	cmp	r1, #100	; 0x64
    ce9c:	d902      	bls.n	cea4 <notify_process+0x38>
		LOG_ERR("Unexpected notification value.");
    ce9e:	2145      	movs	r1, #69	; 0x45
    cea0:	4806      	ldr	r0, [pc, #24]	; (cebc <notify_process+0x50>)
    cea2:	e7eb      	b.n	ce7c <notify_process+0x10>
	if (bas->notify_cb) {
    cea4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
	bas->battery_level = battery_level;
    cea6:	f885 1080 	strb.w	r1, [r5, #128]	; 0x80
	if (bas->notify_cb) {
    ceaa:	b10b      	cbz	r3, ceb0 <notify_process+0x44>
		bas->notify_cb(bas, battery_level);
    ceac:	4630      	mov	r0, r6
    ceae:	4798      	blx	r3
	return BT_GATT_ITER_CONTINUE;
    ceb0:	4620      	mov	r0, r4
    ceb2:	e7eb      	b.n	ce8c <notify_process+0x20>
    ceb4:	0002048d 	.word	0x0002048d
    ceb8:	000204aa 	.word	0x000204aa
    cebc:	000204d3 	.word	0x000204d3

0000cec0 <read_process>:
 * @retval BT_GATT_ITER_CONTINUE Continue notification
 */
static uint8_t read_process(struct bt_conn *conn, uint8_t err,
			     struct bt_gatt_read_params *params,
			     const void *data, uint16_t length)
{
    cec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t battery_level = BT_BAS_VAL_INVALID;
	const uint8_t *bdata = (uint8_t *)data;

	bas = CONTAINER_OF(params, struct bt_bas_client, read_params);

	if (!bas->read_cb) {
    cec2:	6e17      	ldr	r7, [r2, #96]	; 0x60
{
    cec4:	460d      	mov	r5, r1
    cec6:	4614      	mov	r4, r2
	bas = CONTAINER_OF(params, struct bt_bas_client, read_params);
    cec8:	f1a2 061c 	sub.w	r6, r2, #28
	if (!bas->read_cb) {
    cecc:	b937      	cbnz	r7, cedc <read_process+0x1c>
		LOG_ERR("No read callback present");
    cece:	2145      	movs	r1, #69	; 0x45
    ced0:	4814      	ldr	r0, [pc, #80]	; (cf24 <read_process+0x64>)
    ced2:	f00d fbcb 	bl	1a66c <printk>
			bas->battery_level = battery_level;
			bas->read_cb(bas, battery_level, err);
		}
	}

	bas->read_cb = NULL;
    ced6:	2000      	movs	r0, #0
    ced8:	6620      	str	r0, [r4, #96]	; 0x60

	return BT_GATT_ITER_STOP;
}
    ceda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else  if (err) {
    cedc:	b151      	cbz	r1, cef4 <read_process+0x34>
		LOG_ERR("Read value error: %d", err);
    cede:	460a      	mov	r2, r1
    cee0:	4811      	ldr	r0, [pc, #68]	; (cf28 <read_process+0x68>)
    cee2:	2145      	movs	r1, #69	; 0x45
    cee4:	f00d fbc2 	bl	1a66c <printk>
			bas->read_cb(bas, BT_BAS_VAL_INVALID, err);
    cee8:	462a      	mov	r2, r5
    ceea:	21ff      	movs	r1, #255	; 0xff
    ceec:	4630      	mov	r0, r6
    ceee:	6e23      	ldr	r3, [r4, #96]	; 0x60
    cef0:	4798      	blx	r3
    cef2:	e7f0      	b.n	ced6 <read_process+0x16>
	} else if (!data || length != 1) {
    cef4:	b11b      	cbz	r3, cefe <read_process+0x3e>
    cef6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    cefa:	2a01      	cmp	r2, #1
    cefc:	d005      	beq.n	cf0a <read_process+0x4a>
		bas->read_cb(bas,  battery_level, -EMSGSIZE);
    cefe:	f06f 0223 	mvn.w	r2, #35	; 0x23
    cf02:	21ff      	movs	r1, #255	; 0xff
			bas->read_cb(bas, battery_level, err);
    cf04:	4630      	mov	r0, r6
    cf06:	47b8      	blx	r7
    cf08:	e7e5      	b.n	ced6 <read_process+0x16>
		battery_level = bdata[0];
    cf0a:	7819      	ldrb	r1, [r3, #0]
		if (battery_level > BT_BAS_VAL_MAX) {
    cf0c:	2964      	cmp	r1, #100	; 0x64
    cf0e:	d904      	bls.n	cf1a <read_process+0x5a>
			LOG_ERR("Unexpected read value.");
    cf10:	2145      	movs	r1, #69	; 0x45
    cf12:	4806      	ldr	r0, [pc, #24]	; (cf2c <read_process+0x6c>)
    cf14:	f00d fbaa 	bl	1a66c <printk>
    cf18:	e7e6      	b.n	cee8 <read_process+0x28>
			bas->read_cb(bas, battery_level, err);
    cf1a:	462a      	mov	r2, r5
			bas->battery_level = battery_level;
    cf1c:	f884 1068 	strb.w	r1, [r4, #104]	; 0x68
			bas->read_cb(bas, battery_level, err);
    cf20:	e7f0      	b.n	cf04 <read_process+0x44>
    cf22:	bf00      	nop
    cf24:	000204f7 	.word	0x000204f7
    cf28:	00020515 	.word	0x00020515
    cf2c:	0002052f 	.word	0x0002052f

0000cf30 <bas_read_value_handler>:
 * @brief Periodic read workqueue handler.
 *
 * @param work Work instance.
 */
static void bas_read_value_handler(struct k_work *work)
{
    cf30:	4601      	mov	r1, r0
	struct bt_bas_client *bas;

	bas = CONTAINER_OF(work, struct bt_bas_client,
			     periodic_read.read_work);

	if (!bas->conn) {
    cf32:	f850 0c30 	ldr.w	r0, [r0, #-48]
{
    cf36:	b508      	push	{r3, lr}
	if (!bas->conn) {
    cf38:	b928      	cbnz	r0, cf46 <bas_read_value_handler+0x16>
	 */
	if (err) {
		LOG_ERR("Periodic Battery Level characteristic read error: %d",
			err);
	}
}
    cf3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("No connection object.");
    cf3e:	2145      	movs	r1, #69	; 0x45
    cf40:	480b      	ldr	r0, [pc, #44]	; (cf70 <bas_read_value_handler+0x40>)
    cf42:	f00d bb93 	b.w	1a66c <printk>
	bas->periodic_read.params.func = periodic_read_process;
    cf46:	4b0b      	ldr	r3, [pc, #44]	; (cf74 <bas_read_value_handler+0x44>)
	err = bt_gatt_read(bas->conn, &bas->periodic_read.params);
    cf48:	3130      	adds	r1, #48	; 0x30
	bas->periodic_read.params.func = periodic_read_process;
    cf4a:	600b      	str	r3, [r1, #0]
	bas->periodic_read.params.handle_count  = 1;
    cf4c:	2301      	movs	r3, #1
    cf4e:	604b      	str	r3, [r1, #4]
	bas->periodic_read.params.single.handle = bas->val_handle;
    cf50:	8c0b      	ldrh	r3, [r1, #32]
    cf52:	810b      	strh	r3, [r1, #8]
	bas->periodic_read.params.single.offset = 0;
    cf54:	2300      	movs	r3, #0
    cf56:	814b      	strh	r3, [r1, #10]
	err = bt_gatt_read(bas->conn, &bas->periodic_read.params);
    cf58:	f007 fd7c 	bl	14a54 <bt_gatt_read>
	if (err) {
    cf5c:	4602      	mov	r2, r0
    cf5e:	b128      	cbz	r0, cf6c <bas_read_value_handler+0x3c>
}
    cf60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Periodic Battery Level characteristic read error: %d",
    cf64:	2145      	movs	r1, #69	; 0x45
    cf66:	4804      	ldr	r0, [pc, #16]	; (cf78 <bas_read_value_handler+0x48>)
    cf68:	f00d bb80 	b.w	1a66c <printk>
}
    cf6c:	bd08      	pop	{r3, pc}
    cf6e:	bf00      	nop
    cf70:	0002054b 	.word	0x0002054b
    cf74:	0000cf7d 	.word	0x0000cf7d
    cf78:	00020566 	.word	0x00020566

0000cf7c <periodic_read_process>:
{
    cf7c:	b538      	push	{r3, r4, r5, lr}
    cf7e:	4614      	mov	r4, r2
	if (!bas->notify_cb) {
    cf80:	6992      	ldr	r2, [r2, #24]
    cf82:	b922      	cbnz	r2, cf8e <periodic_read_process+0x12>
		LOG_ERR("No notification callback present");
    cf84:	2145      	movs	r1, #69	; 0x45
    cf86:	4826      	ldr	r0, [pc, #152]	; (d020 <periodic_read_process+0xa4>)
		LOG_ERR("Unexpected read value size.");
    cf88:	f00d fb70 	bl	1a66c <printk>
    cf8c:	e005      	b.n	cf9a <periodic_read_process+0x1e>
	} else  if (err) {
    cf8e:	b359      	cbz	r1, cfe8 <periodic_read_process+0x6c>
		LOG_ERR("Read value error: %d", err);
    cf90:	460a      	mov	r2, r1
    cf92:	4824      	ldr	r0, [pc, #144]	; (d024 <periodic_read_process+0xa8>)
    cf94:	2145      	movs	r1, #69	; 0x45
    cf96:	f00d fb69 	bl	1a66c <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cf9a:	f104 0314 	add.w	r3, r4, #20
    cf9e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(&bas->periodic_read.process,
    cfa2:	079b      	lsls	r3, r3, #30
    cfa4:	d51e      	bpl.n	cfe4 <periodic_read_process+0x68>
		k_delayed_work_submit(&bas->periodic_read.read_work,
    cfa6:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
				      K_MSEC(atomic_get(
    cfaa:	3410      	adds	r4, #16
    cfac:	e8d4 3faf 	lda	r3, [r4]
    cfb0:	2b00      	cmp	r3, #0
    cfb2:	dd31      	ble.n	d018 <periodic_read_process+0x9c>
    cfb4:	e8d4 0faf 	lda	r0, [r4]
    cfb8:	17c1      	asrs	r1, r0, #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    cfba:	f240 33e7 	movw	r3, #999	; 0x3e7
    cfbe:	03c9      	lsls	r1, r1, #15
    cfc0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    cfc4:	03c0      	lsls	r0, r0, #15
    cfc6:	18c0      	adds	r0, r0, r3
    cfc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cfcc:	f04f 0300 	mov.w	r3, #0
    cfd0:	f141 0100 	adc.w	r1, r1, #0
    cfd4:	f7fb fdaa 	bl	8b2c <__aeabi_uldivmod>
    cfd8:	4602      	mov	r2, r0
    cfda:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    cfdc:	4812      	ldr	r0, [pc, #72]	; (d028 <periodic_read_process+0xac>)
    cfde:	4629      	mov	r1, r5
    cfe0:	f00c fbce 	bl	19780 <k_delayed_work_submit_to_queue>
}
    cfe4:	2000      	movs	r0, #0
    cfe6:	bd38      	pop	{r3, r4, r5, pc}
	} else if (!data || length != 1) {
    cfe8:	b11b      	cbz	r3, cff2 <periodic_read_process+0x76>
    cfea:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    cfee:	2901      	cmp	r1, #1
    cff0:	d002      	beq.n	cff8 <periodic_read_process+0x7c>
		LOG_ERR("Unexpected read value size.");
    cff2:	2145      	movs	r1, #69	; 0x45
    cff4:	480d      	ldr	r0, [pc, #52]	; (d02c <periodic_read_process+0xb0>)
    cff6:	e7c7      	b.n	cf88 <periodic_read_process+0xc>
		battery_level = bdata[0];
    cff8:	7819      	ldrb	r1, [r3, #0]
		if (battery_level > BT_BAS_VAL_MAX) {
    cffa:	2964      	cmp	r1, #100	; 0x64
    cffc:	d902      	bls.n	d004 <periodic_read_process+0x88>
			LOG_ERR("Unexpected read value.");
    cffe:	2145      	movs	r1, #69	; 0x45
    d000:	480b      	ldr	r0, [pc, #44]	; (d030 <periodic_read_process+0xb4>)
    d002:	e7c1      	b.n	cf88 <periodic_read_process+0xc>
		} else if (bas->battery_level != battery_level) {
    d004:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    d008:	428b      	cmp	r3, r1
    d00a:	d0c6      	beq.n	cf9a <periodic_read_process+0x1e>
			bas->battery_level = battery_level;
    d00c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
			bas->notify_cb(bas, battery_level);
    d010:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
    d014:	4790      	blx	r2
    d016:	e7c0      	b.n	cf9a <periodic_read_process+0x1e>
				      K_MSEC(atomic_get(
    d018:	2000      	movs	r0, #0
    d01a:	4601      	mov	r1, r0
    d01c:	e7cd      	b.n	cfba <periodic_read_process+0x3e>
    d01e:	bf00      	nop
    d020:	000205a0 	.word	0x000205a0
    d024:	00020515 	.word	0x00020515
    d028:	2000a560 	.word	0x2000a560
    d02c:	000205c6 	.word	0x000205c6
    d030:	0002052f 	.word	0x0002052f

0000d034 <bt_bas_client_init>:
	bas->notify = false;
}


void bt_bas_client_init(struct bt_bas_client *bas)
{
    d034:	b510      	push	{r4, lr}
	memset(bas, 0, sizeof(*bas));
    d036:	2288      	movs	r2, #136	; 0x88
    d038:	2100      	movs	r1, #0
{
    d03a:	4604      	mov	r4, r0
	memset(bas, 0, sizeof(*bas));
    d03c:	f00e fd85 	bl	1bb4a <memset>
	bas->battery_level = BT_BAS_VAL_INVALID;
    d040:	23ff      	movs	r3, #255	; 0xff
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    d042:	2230      	movs	r2, #48	; 0x30
    d044:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
    d048:	2100      	movs	r1, #0
    d04a:	18a0      	adds	r0, r4, r2
    d04c:	f00e fd7d 	bl	1bb4a <memset>
    d050:	4b01      	ldr	r3, [pc, #4]	; (d058 <bt_bas_client_init+0x24>)
    d052:	6363      	str	r3, [r4, #52]	; 0x34

	k_delayed_work_init(&bas->periodic_read.read_work,
			    bas_read_value_handler);
}
    d054:	bd10      	pop	{r4, pc}
    d056:	bf00      	nop
    d058:	0000cf31 	.word	0x0000cf31

0000d05c <bt_bas_handles_assign>:


int bt_bas_handles_assign(struct bt_gatt_dm *dm,
				 struct bt_bas_client *bas)
{
    d05c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d060:	460c      	mov	r4, r1
    d062:	4606      	mov	r6, r0
	const struct bt_gatt_dm_attr *gatt_service_attr =
			bt_gatt_dm_service_get(dm);
    d064:	f00d ff40 	bl	1aee8 <bt_gatt_dm_service_get>
	const struct bt_gatt_service_val *gatt_service =
			bt_gatt_dm_attr_service_val(gatt_service_attr);
    d068:	f00d ff08 	bl	1ae7c <bt_gatt_dm_attr_service_val>
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;
	const struct bt_gatt_chrc *chrc_val;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_BAS)) {
    d06c:	2300      	movs	r3, #0
    d06e:	6800      	ldr	r0, [r0, #0]
    d070:	f88d 300c 	strb.w	r3, [sp, #12]
    d074:	f641 030f 	movw	r3, #6159	; 0x180f
    d078:	a903      	add	r1, sp, #12
    d07a:	f8ad 300e 	strh.w	r3, [sp, #14]
    d07e:	f00e fdae 	bl	1bbde <bt_uuid_cmp>
    d082:	4605      	mov	r5, r0
    d084:	b128      	cbz	r0, d092 <bt_bas_handles_assign+0x36>
		return -ENOTSUP;
    d086:	f06f 0522 	mvn.w	r5, #34	; 0x22
	}

	/* Finally - save connection object */
	bas->conn = bt_gatt_dm_conn_get(dm);
	return 0;
}
    d08a:	4628      	mov	r0, r5
    d08c:	b004      	add	sp, #16
    d08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_delayed_work_cancel(&bas->periodic_read.read_work);
    d092:	f104 0030 	add.w	r0, r4, #48	; 0x30
    d096:	f00c fbe3 	bl	19860 <k_delayed_work_cancel>
	bas->battery_level = BT_BAS_VAL_INVALID;
    d09a:	23ff      	movs	r3, #255	; 0xff
    d09c:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_BAS_BATTERY_LEVEL);
    d0a0:	f642 2319 	movw	r3, #10777	; 0x2a19
    d0a4:	4630      	mov	r0, r6
	bas->read_cb = NULL;
    d0a6:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
	bas->conn = NULL;
    d0aa:	6025      	str	r5, [r4, #0]
	bas->val_handle = 0;
    d0ac:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	bas->notify = false;
    d0b0:	f884 5086 	strb.w	r5, [r4, #134]	; 0x86
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_BAS_BATTERY_LEVEL);
    d0b4:	a901      	add	r1, sp, #4
    d0b6:	f88d 5004 	strb.w	r5, [sp, #4]
    d0ba:	f8ad 3006 	strh.w	r3, [sp, #6]
    d0be:	f7ff faed 	bl	c69c <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    d0c2:	4607      	mov	r7, r0
    d0c4:	b930      	cbnz	r0, d0d4 <bt_bas_handles_assign+0x78>
		LOG_ERR("No battery level characteristic found.");
    d0c6:	2145      	movs	r1, #69	; 0x45
    d0c8:	4824      	ldr	r0, [pc, #144]	; (d15c <bt_bas_handles_assign+0x100>)
		LOG_ERR("No battery level characteristic value found.");
    d0ca:	f00d facf 	bl	1a66c <printk>
		return -EINVAL;
    d0ce:	f06f 0515 	mvn.w	r5, #21
    d0d2:	e7da      	b.n	d08a <bt_bas_handles_assign+0x2e>
	chrc_val = bt_gatt_dm_attr_chrc_val(gatt_chrc);
    d0d4:	f00d fef2 	bl	1aebc <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
    d0d8:	4680      	mov	r8, r0
    d0da:	b950      	cbnz	r0, d0f2 <bt_bas_handles_assign+0x96>
    d0dc:	4920      	ldr	r1, [pc, #128]	; (d160 <bt_bas_handles_assign+0x104>)
    d0de:	4821      	ldr	r0, [pc, #132]	; (d164 <bt_bas_handles_assign+0x108>)
    d0e0:	f44f 7285 	mov.w	r2, #266	; 0x10a
    d0e4:	f00d fac2 	bl	1a66c <printk>
    d0e8:	f44f 7185 	mov.w	r1, #266	; 0x10a
    d0ec:	481c      	ldr	r0, [pc, #112]	; (d160 <bt_bas_handles_assign+0x104>)
    d0ee:	f00d fd63 	bl	1abb8 <assert_post_action>
	bas->properties = chrc_val->properties;
    d0f2:	f898 3006 	ldrb.w	r3, [r8, #6]
					    BT_UUID_BAS_BATTERY_LEVEL);
    d0f6:	f04f 0800 	mov.w	r8, #0
	bas->properties = chrc_val->properties;
    d0fa:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
					    BT_UUID_BAS_BATTERY_LEVEL);
    d0fe:	f642 2319 	movw	r3, #10777	; 0x2a19
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    d102:	4639      	mov	r1, r7
    d104:	4630      	mov	r0, r6
    d106:	aa02      	add	r2, sp, #8
					    BT_UUID_BAS_BATTERY_LEVEL);
    d108:	f88d 8008 	strb.w	r8, [sp, #8]
    d10c:	f8ad 300a 	strh.w	r3, [sp, #10]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    d110:	f00d ff37 	bl	1af82 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    d114:	b910      	cbnz	r0, d11c <bt_bas_handles_assign+0xc0>
		LOG_ERR("No battery level characteristic value found.");
    d116:	2145      	movs	r1, #69	; 0x45
    d118:	4813      	ldr	r0, [pc, #76]	; (d168 <bt_bas_handles_assign+0x10c>)
    d11a:	e7d6      	b.n	d0ca <bt_bas_handles_assign+0x6e>
	bas->val_handle = gatt_desc->handle;
    d11c:	8883      	ldrh	r3, [r0, #4]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    d11e:	4639      	mov	r1, r7
	bas->val_handle = gatt_desc->handle;
    d120:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
    d124:	f642 1302 	movw	r3, #10498	; 0x2902
    d128:	4630      	mov	r0, r6
    d12a:	aa03      	add	r2, sp, #12
    d12c:	f88d 800c 	strb.w	r8, [sp, #12]
    d130:	f8ad 300e 	strh.w	r3, [sp, #14]
    d134:	f00d ff25 	bl	1af82 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    d138:	b940      	cbnz	r0, d14c <bt_bas_handles_assign+0xf0>
		LOG_INF("No battery CCC descriptor found. Battery service do not supported notification.");
    d13a:	2149      	movs	r1, #73	; 0x49
    d13c:	480b      	ldr	r0, [pc, #44]	; (d16c <bt_bas_handles_assign+0x110>)
    d13e:	f00d fa95 	bl	1a66c <printk>
	bas->conn = bt_gatt_dm_conn_get(dm);
    d142:	4630      	mov	r0, r6
    d144:	f00d fece 	bl	1aee4 <bt_gatt_dm_conn_get>
    d148:	6020      	str	r0, [r4, #0]
	return 0;
    d14a:	e79e      	b.n	d08a <bt_bas_handles_assign+0x2e>
		bas->notify = true;
    d14c:	2301      	movs	r3, #1
    d14e:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
		bas->ccc_handle = gatt_desc->handle;
    d152:	8883      	ldrh	r3, [r0, #4]
    d154:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
    d158:	e7f3      	b.n	d142 <bt_bas_handles_assign+0xe6>
    d15a:	bf00      	nop
    d15c:	000205e7 	.word	0x000205e7
    d160:	00020613 	.word	0x00020613
    d164:	0001fbb7 	.word	0x0001fbb7
    d168:	0002064a 	.word	0x0002064a
    d16c:	0002067c 	.word	0x0002067c

0000d170 <bt_bas_subscribe_battery_level>:

int bt_bas_subscribe_battery_level(struct bt_bas_client *bas,
				   bt_bas_notify_cb func)
{
    d170:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bas || !func) {
    d172:	4604      	mov	r4, r0
    d174:	b340      	cbz	r0, d1c8 <bt_bas_subscribe_battery_level+0x58>
    d176:	b339      	cbz	r1, d1c8 <bt_bas_subscribe_battery_level+0x58>
		return -EINVAL;
	}
	if (!bas->conn) {
    d178:	6803      	ldr	r3, [r0, #0]
    d17a:	b32b      	cbz	r3, d1c8 <bt_bas_subscribe_battery_level+0x58>
		return -EINVAL;
	}
	if (!(bas->properties & BT_GATT_CHRC_NOTIFY)) {
    d17c:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    d180:	06db      	lsls	r3, r3, #27
    d182:	d524      	bpl.n	d1ce <bt_bas_subscribe_battery_level+0x5e>
		return -ENOTSUP;
	}
	if (bas->notify_cb) {
    d184:	6f86      	ldr	r6, [r0, #120]	; 0x78
    d186:	bb2e      	cbnz	r6, d1d4 <bt_bas_subscribe_battery_level+0x64>
		return -EALREADY;
	}

	bas->notify_cb = func;

	bas->notify_params.notify = notify_process;
    d188:	4b14      	ldr	r3, [pc, #80]	; (d1dc <bt_bas_subscribe_battery_level+0x6c>)
	bas->notify_cb = func;
    d18a:	6781      	str	r1, [r0, #120]	; 0x78
	bas->notify_params.notify = notify_process;
    d18c:	6043      	str	r3, [r0, #4]
	bas->notify_params.value = BT_GATT_CCC_NOTIFY;
    d18e:	2301      	movs	r3, #1
    d190:	8203      	strh	r3, [r0, #16]
	bas->notify_params.value_handle = bas->val_handle;
    d192:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
    d196:	60c3      	str	r3, [r0, #12]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d198:	f100 0314 	add.w	r3, r0, #20
    d19c:	e8d3 2fef 	ldaex	r2, [r3]
    d1a0:	f042 0201 	orr.w	r2, r2, #1
    d1a4:	e8c3 2fe1 	stlex	r1, r2, [r3]
    d1a8:	2900      	cmp	r1, #0
    d1aa:	d1f7      	bne.n	d19c <bt_bas_subscribe_battery_level+0x2c>
		       BT_GATT_SUBSCRIBE_FLAG_VOLATILE);

	LOG_DBG("Subscribe: val: %u, ccc: %u",
		bas->notify_params.value_handle,
		bas->notify_params.ccc_handle);
	err = bt_gatt_subscribe(bas->conn, &bas->notify_params);
    d1ac:	6820      	ldr	r0, [r4, #0]
    d1ae:	1d21      	adds	r1, r4, #4
    d1b0:	f007 fd64 	bl	14c7c <bt_gatt_subscribe>
	if (err) {
    d1b4:	4605      	mov	r5, r0
    d1b6:	b128      	cbz	r0, d1c4 <bt_bas_subscribe_battery_level+0x54>
		LOG_ERR("Report notification subscribe error: %d.", err);
    d1b8:	4602      	mov	r2, r0
    d1ba:	2145      	movs	r1, #69	; 0x45
    d1bc:	4808      	ldr	r0, [pc, #32]	; (d1e0 <bt_bas_subscribe_battery_level+0x70>)
    d1be:	f00d fa55 	bl	1a66c <printk>
		bas->notify_cb = NULL;
    d1c2:	67a6      	str	r6, [r4, #120]	; 0x78
		return err;
	}
	LOG_DBG("Report subscribed.");
	return err;
}
    d1c4:	4628      	mov	r0, r5
    d1c6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    d1c8:	f06f 0515 	mvn.w	r5, #21
    d1cc:	e7fa      	b.n	d1c4 <bt_bas_subscribe_battery_level+0x54>
		return -ENOTSUP;
    d1ce:	f06f 0522 	mvn.w	r5, #34	; 0x22
    d1d2:	e7f7      	b.n	d1c4 <bt_bas_subscribe_battery_level+0x54>
		return -EALREADY;
    d1d4:	f06f 0544 	mvn.w	r5, #68	; 0x44
    d1d8:	e7f4      	b.n	d1c4 <bt_bas_subscribe_battery_level+0x54>
    d1da:	bf00      	nop
    d1dc:	0000ce6d 	.word	0x0000ce6d
    d1e0:	000206d1 	.word	0x000206d1

0000d1e4 <bt_bas_read_battery_level>:
	return bas->conn;
}


int bt_bas_read_battery_level(struct bt_bas_client *bas, bt_bas_read_cb func)
{
    d1e4:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bas || !func) {
    d1e6:	4604      	mov	r4, r0
    d1e8:	b1d0      	cbz	r0, d220 <bt_bas_read_battery_level+0x3c>
    d1ea:	b1c9      	cbz	r1, d220 <bt_bas_read_battery_level+0x3c>
		return -EINVAL;
	}
	if (!bas->conn) {
    d1ec:	6800      	ldr	r0, [r0, #0]
    d1ee:	b1b8      	cbz	r0, d220 <bt_bas_read_battery_level+0x3c>
		return -EINVAL;
	}
	if (bas->read_cb) {
    d1f0:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
    d1f2:	b9c6      	cbnz	r6, d226 <bt_bas_read_battery_level+0x42>
		return -EBUSY;
	}
	bas->read_cb = func;
	bas->read_params.func = read_process;
    d1f4:	4b0d      	ldr	r3, [pc, #52]	; (d22c <bt_bas_read_battery_level+0x48>)
	bas->read_cb = func;
    d1f6:	67e1      	str	r1, [r4, #124]	; 0x7c
	bas->read_params.func = read_process;
    d1f8:	61e3      	str	r3, [r4, #28]
	bas->read_params.handle_count  = 1;
    d1fa:	2301      	movs	r3, #1
    d1fc:	6223      	str	r3, [r4, #32]
	bas->read_params.single.handle = bas->val_handle;
    d1fe:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
	bas->read_params.single.offset = 0;
    d202:	84e6      	strh	r6, [r4, #38]	; 0x26
	bas->read_params.single.handle = bas->val_handle;
    d204:	84a3      	strh	r3, [r4, #36]	; 0x24

	err = bt_gatt_read(bas->conn, &bas->read_params);
    d206:	f104 011c 	add.w	r1, r4, #28
    d20a:	f007 fc23 	bl	14a54 <bt_gatt_read>
	if (err) {
    d20e:	4605      	mov	r5, r0
    d210:	b120      	cbz	r0, d21c <bt_bas_read_battery_level+0x38>
		printk("Error: %d\n",err);
    d212:	4601      	mov	r1, r0
    d214:	4806      	ldr	r0, [pc, #24]	; (d230 <bt_bas_read_battery_level+0x4c>)
    d216:	f00d fa29 	bl	1a66c <printk>
		bas->read_cb = NULL;
    d21a:	67e6      	str	r6, [r4, #124]	; 0x7c
		return err;
	}
	return 0;
}
    d21c:	4628      	mov	r0, r5
    d21e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    d220:	f06f 0515 	mvn.w	r5, #21
    d224:	e7fa      	b.n	d21c <bt_bas_read_battery_level+0x38>
		return -EBUSY;
    d226:	f06f 050f 	mvn.w	r5, #15
    d22a:	e7f7      	b.n	d21c <bt_bas_read_battery_level+0x38>
    d22c:	0000cec1 	.word	0x0000cec1
    d230:	000206ff 	.word	0x000206ff

0000d234 <bt_bas_start_per_read_battery_level>:


int bt_bas_start_per_read_battery_level(struct bt_bas_client *bas,
					int32_t interval,
					bt_bas_notify_cb func)
{
    d234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!bas || !func) {
    d236:	4605      	mov	r5, r0
    d238:	b380      	cbz	r0, d29c <bt_bas_start_per_read_battery_level+0x68>
    d23a:	b37a      	cbz	r2, d29c <bt_bas_start_per_read_battery_level+0x68>
		return -EINVAL;
	}

	if (bt_bas_notify_supported(bas)) {
    d23c:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    d240:	bb78      	cbnz	r0, d2a2 <bt_bas_start_per_read_battery_level+0x6e>
		return -ENOTSUP;
	}

	bas->notify_cb = func;
    d242:	67aa      	str	r2, [r5, #120]	; 0x78
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    d244:	f105 0370 	add.w	r3, r5, #112	; 0x70
    d248:	e8d3 2fef 	ldaex	r2, [r3]
    d24c:	e8c3 1fe4 	stlex	r4, r1, [r3]
    d250:	2c00      	cmp	r4, #0
    d252:	d1f9      	bne.n	d248 <bt_bas_start_per_read_battery_level+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d254:	f105 0374 	add.w	r3, r5, #116	; 0x74
    d258:	e8d3 4fef 	ldaex	r4, [r3]
    d25c:	f044 0202 	orr.w	r2, r4, #2
    d260:	e8c3 2fe6 	stlex	r6, r2, [r3]
    d264:	2e00      	cmp	r6, #0
    d266:	d1f7      	bne.n	d258 <bt_bas_start_per_read_battery_level+0x24>
	atomic_set(&bas->periodic_read.interval, interval);

	if (!atomic_test_and_set_bit(&bas->periodic_read.process,
    d268:	f014 0402 	ands.w	r4, r4, #2
    d26c:	d11c      	bne.n	d2a8 <bt_bas_start_per_read_battery_level+0x74>
				     BAS_PERIODIC_READ_PROC_BIT)) {
		k_delayed_work_submit(&bas->periodic_read.read_work,
				      K_MSEC(interval));
    d26e:	ea21 76e1 	bic.w	r6, r1, r1, asr #31
    d272:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    d276:	f240 30e7 	movw	r0, #999	; 0x3e7
    d27a:	4621      	mov	r1, r4
    d27c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d280:	2300      	movs	r3, #0
    d282:	fbc6 0107 	smlal	r0, r1, r6, r7
    d286:	f7fb fc51 	bl	8b2c <__aeabi_uldivmod>
    d28a:	4602      	mov	r2, r0
    d28c:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d28e:	4807      	ldr	r0, [pc, #28]	; (d2ac <bt_bas_start_per_read_battery_level+0x78>)
    d290:	f105 0130 	add.w	r1, r5, #48	; 0x30
    d294:	f00c fa74 	bl	19780 <k_delayed_work_submit_to_queue>
	}

	return 0;
}
    d298:	4620      	mov	r0, r4
    d29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
    d29c:	f06f 0415 	mvn.w	r4, #21
    d2a0:	e7fa      	b.n	d298 <bt_bas_start_per_read_battery_level+0x64>
		return -ENOTSUP;
    d2a2:	f06f 0422 	mvn.w	r4, #34	; 0x22
    d2a6:	e7f7      	b.n	d298 <bt_bas_start_per_read_battery_level+0x64>
	return 0;
    d2a8:	4604      	mov	r4, r0
    d2aa:	e7f5      	b.n	d298 <bt_bas_start_per_read_battery_level+0x64>
    d2ac:	2000a560 	.word	0x2000a560

0000d2b0 <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
    d2b0:	1e4b      	subs	r3, r1, #1
    d2b2:	4259      	negs	r1, r3
    d2b4:	4159      	adcs	r1, r3
    d2b6:	4b01      	ldr	r3, [pc, #4]	; (d2bc <lbslc_ccc_cfg_changed+0xc>)
    d2b8:	7019      	strb	r1, [r3, #0]
}
    d2ba:	4770      	bx	lr
    d2bc:	2000c4be 	.word	0x2000c4be

0000d2c0 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    d2c0:	b510      	push	{r4, lr}
    d2c2:	461c      	mov	r4, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.led_cb) {
    d2c4:	4b03      	ldr	r3, [pc, #12]	; (d2d4 <write_led+0x14>)
    d2c6:	681b      	ldr	r3, [r3, #0]
    d2c8:	b10b      	cbz	r3, d2ce <write_led+0xe>
		lbs_cb.led_cb(*(bool *)buf);
    d2ca:	7810      	ldrb	r0, [r2, #0]
    d2cc:	4798      	blx	r3
	}

	return len;
}
    d2ce:	4620      	mov	r0, r4
    d2d0:	bd10      	pop	{r4, pc}
    d2d2:	bf00      	nop
    d2d4:	2000aa5c 	.word	0x2000aa5c

0000d2d8 <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
    d2d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d2dc:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.button_cb) {
    d2de:	4b0d      	ldr	r3, [pc, #52]	; (d314 <read_button+0x3c>)
{
    d2e0:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    d2e2:	6858      	ldr	r0, [r3, #4]
{
    d2e4:	460c      	mov	r4, r1
    d2e6:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    d2e8:	b180      	cbz	r0, d30c <read_button+0x34>
	const char *value = attr->user_data;
    d2ea:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
    d2ee:	4780      	blx	r0
    d2f0:	4b09      	ldr	r3, [pc, #36]	; (d318 <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d2f2:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    d2f4:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    d2f6:	2301      	movs	r3, #1
    d2f8:	e9cd 8301 	strd	r8, r3, [sp, #4]
    d2fc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    d300:	4621      	mov	r1, r4
    d302:	9300      	str	r3, [sp, #0]
    d304:	4628      	mov	r0, r5
    d306:	463b      	mov	r3, r7
    d308:	f00f fd84 	bl	1ce14 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
    d30c:	b004      	add	sp, #16
    d30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d312:	bf00      	nop
    d314:	2000aa5c 	.word	0x2000aa5c
    d318:	2000c4bd 	.word	0x2000c4bd

0000d31c <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
    d31c:	b120      	cbz	r0, d328 <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
    d31e:	4b03      	ldr	r3, [pc, #12]	; (d32c <bt_lbs_init+0x10>)
    d320:	6802      	ldr	r2, [r0, #0]
    d322:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    d324:	6842      	ldr	r2, [r0, #4]
    d326:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    d328:	2000      	movs	r0, #0
    d32a:	4770      	bx	lr
    d32c:	2000aa5c 	.word	0x2000aa5c

0000d330 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
    d330:	b500      	push	{lr}
	if (!notify_enabled) {
    d332:	4b0e      	ldr	r3, [pc, #56]	; (d36c <bt_lbs_send_button_state+0x3c>)
{
    d334:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
    d336:	781b      	ldrb	r3, [r3, #0]
{
    d338:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
    d33c:	b19b      	cbz	r3, d366 <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    d33e:	2100      	movs	r1, #0
    d340:	2218      	movs	r2, #24
    d342:	a802      	add	r0, sp, #8
    d344:	f00e fc01 	bl	1bb4a <memset>

	params.attr = attr;
    d348:	4b09      	ldr	r3, [pc, #36]	; (d370 <bt_lbs_send_button_state+0x40>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    d34a:	2000      	movs	r0, #0
	params.attr = attr;
    d34c:	9303      	str	r3, [sp, #12]
	params.data = data;
    d34e:	f10d 0307 	add.w	r3, sp, #7
    d352:	9304      	str	r3, [sp, #16]
	params.len = len;
    d354:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    d356:	a902      	add	r1, sp, #8
	params.len = len;
    d358:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    d35c:	f006 fd84 	bl	13e68 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
    d360:	b009      	add	sp, #36	; 0x24
    d362:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    d366:	f06f 000c 	mvn.w	r0, #12
    d36a:	e7f9      	b.n	d360 <bt_lbs_send_button_state+0x30>
    d36c:	2000c4be 	.word	0x2000c4be
    d370:	0001e82c 	.word	0x0001e82c

0000d374 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d374:	2303      	movs	r3, #3
static void _DoInit(void) {
    d376:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d378:	4c10      	ldr	r4, [pc, #64]	; (d3bc <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    d37a:	4a11      	ldr	r2, [pc, #68]	; (d3c0 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    d37c:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d380:	4b10      	ldr	r3, [pc, #64]	; (d3c4 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    d382:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d384:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d386:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    d38a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    d38c:	4a0e      	ldr	r2, [pc, #56]	; (d3c8 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    d38e:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    d390:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    d392:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d394:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    d396:	490d      	ldr	r1, [pc, #52]	; (d3cc <_DoInit+0x58>)
    d398:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    d39a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    d39c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d39e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    d3a0:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    d3a2:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d3a4:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    d3a6:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    d3a8:	f00e fb4a 	bl	1ba40 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    d3ac:	4620      	mov	r0, r4
    d3ae:	4908      	ldr	r1, [pc, #32]	; (d3d0 <_DoInit+0x5c>)
    d3b0:	f00e fb46 	bl	1ba40 <strcpy>
  p->acID[6] = ' ';
    d3b4:	2320      	movs	r3, #32
    d3b6:	71a3      	strb	r3, [r4, #6]
}
    d3b8:	bd10      	pop	{r4, pc}
    d3ba:	bf00      	nop
    d3bc:	2000aa64 	.word	0x2000aa64
    d3c0:	00020771 	.word	0x00020771
    d3c4:	2000c4cf 	.word	0x2000c4cf
    d3c8:	2000c4bf 	.word	0x2000c4bf
    d3cc:	0002077a 	.word	0x0002077a
    d3d0:	0002077e 	.word	0x0002077e

0000d3d4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d3d4:	b570      	push	{r4, r5, r6, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d3d6:	2418      	movs	r4, #24
    d3d8:	fb00 4504 	mla	r5, r0, r4, r4
    d3dc:	4b14      	ldr	r3, [pc, #80]	; (d430 <SEGGER_RTT_WriteNoLock+0x5c>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d3de:	4616      	mov	r6, r2
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    d3e0:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    d3e2:	fb04 3300 	mla	r3, r4, r0, r3
    d3e6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    d3e8:	2c01      	cmp	r4, #1
    d3ea:	d00e      	beq.n	d40a <SEGGER_RTT_WriteNoLock+0x36>
    d3ec:	2c02      	cmp	r4, #2
    d3ee:	d018      	beq.n	d422 <SEGGER_RTT_WriteNoLock+0x4e>
    d3f0:	b9e4      	cbnz	r4, d42c <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    d3f2:	4628      	mov	r0, r5
    d3f4:	f00d fdf3 	bl	1afde <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    d3f8:	4286      	cmp	r6, r0
    d3fa:	d804      	bhi.n	d406 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    d3fc:	4632      	mov	r2, r6
    d3fe:	4628      	mov	r0, r5
    d400:	f00d fdf6 	bl	1aff0 <_WriteNoCheck>
    d404:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    d406:	4620      	mov	r0, r4
    d408:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    d40a:	4628      	mov	r0, r5
    d40c:	f00d fde7 	bl	1afde <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    d410:	4286      	cmp	r6, r0
    d412:	4634      	mov	r4, r6
    d414:	bf28      	it	cs
    d416:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    d418:	4628      	mov	r0, r5
    d41a:	4622      	mov	r2, r4
    d41c:	f00d fde8 	bl	1aff0 <_WriteNoCheck>
    break;
    d420:	e7f1      	b.n	d406 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d422:	4628      	mov	r0, r5
}
    d424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    d428:	f00d bdfe 	b.w	1b028 <_WriteBlocking>
  switch (pRing->Flags) {
    d42c:	2400      	movs	r4, #0
  return Status;
    d42e:	e7ea      	b.n	d406 <SEGGER_RTT_WriteNoLock+0x32>
    d430:	2000aa64 	.word	0x2000aa64

0000d434 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    d434:	4904      	ldr	r1, [pc, #16]	; (d448 <sub_bytes+0x14>)
    d436:	1e43      	subs	r3, r0, #1
    d438:	300f      	adds	r0, #15
    d43a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d43e:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    d440:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    d442:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    d444:	d1f9      	bne.n	d43a <sub_bytes+0x6>
	}
}
    d446:	4770      	bx	lr
    d448:	00020785 	.word	0x00020785

0000d44c <tc_aes128_set_encrypt_key>:
{
    d44c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d44e:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    d450:	4e26      	ldr	r6, [pc, #152]	; (d4ec <tc_aes128_set_encrypt_key+0xa0>)
{
    d452:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    d454:	ad01      	add	r5, sp, #4
{
    d456:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    d458:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d45a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d45c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d45e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d460:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    d464:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    d468:	4638      	mov	r0, r7
    d46a:	2f00      	cmp	r7, #0
    d46c:	d039      	beq.n	d4e2 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    d46e:	2c00      	cmp	r4, #0
    d470:	d039      	beq.n	d4e6 <tc_aes128_set_encrypt_key+0x9a>
    d472:	1f38      	subs	r0, r7, #4
    d474:	4602      	mov	r2, r0
    d476:	4621      	mov	r1, r4
    d478:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d47a:	784b      	ldrb	r3, [r1, #1]
    d47c:	780d      	ldrb	r5, [r1, #0]
    d47e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d480:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    d484:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    d486:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d488:	432b      	orrs	r3, r5
    d48a:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    d48e:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    d490:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    d494:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    d498:	d1ef      	bne.n	d47a <tc_aes128_set_encrypt_key+0x2e>
    d49a:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d49c:	4c14      	ldr	r4, [pc, #80]	; (d4f0 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    d49e:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    d4a0:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    d4a2:	d116      	bne.n	d4d2 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    d4a4:	f3c3 4207 	ubfx	r2, r3, #16, #8
    d4a8:	5ca5      	ldrb	r5, [r4, r2]
    d4aa:	0e1a      	lsrs	r2, r3, #24
    d4ac:	5ca2      	ldrb	r2, [r4, r2]
    d4ae:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    d4b2:	f3c3 2507 	ubfx	r5, r3, #8, #8
    d4b6:	5d65      	ldrb	r5, [r4, r5]
    d4b8:	b2db      	uxtb	r3, r3
    d4ba:	5ce3      	ldrb	r3, [r4, r3]
    d4bc:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    d4c0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    d4c4:	ad0c      	add	r5, sp, #48	; 0x30
    d4c6:	f021 0303 	bic.w	r3, r1, #3
    d4ca:	442b      	add	r3, r5
    d4cc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    d4d0:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    d4d2:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    d4d6:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    d4d8:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    d4da:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    d4dc:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    d4de:	d1de      	bne.n	d49e <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    d4e0:	2001      	movs	r0, #1
}
    d4e2:	b00d      	add	sp, #52	; 0x34
    d4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    d4e6:	4620      	mov	r0, r4
    d4e8:	e7fb      	b.n	d4e2 <tc_aes128_set_encrypt_key+0x96>
    d4ea:	bf00      	nop
    d4ec:	0001e594 	.word	0x0001e594
    d4f0:	00020785 	.word	0x00020785

0000d4f4 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    d4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d4f8:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d4fa:	6803      	ldr	r3, [r0, #0]
{
    d4fc:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d4fe:	9302      	str	r3, [sp, #8]
    d500:	6843      	ldr	r3, [r0, #4]
    d502:	f8df a1b8 	ldr.w	sl, [pc, #440]	; d6bc <compress+0x1c8>
    d506:	9303      	str	r3, [sp, #12]
    d508:	6883      	ldr	r3, [r0, #8]
    d50a:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    d50e:	9304      	str	r3, [sp, #16]
    d510:	68c3      	ldr	r3, [r0, #12]
    d512:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d514:	6903      	ldr	r3, [r0, #16]
    d516:	9306      	str	r3, [sp, #24]
    d518:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d51a:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    d51e:	9307      	str	r3, [sp, #28]
    d520:	6983      	ldr	r3, [r0, #24]
    d522:	9308      	str	r3, [sp, #32]
    d524:	69c3      	ldr	r3, [r0, #28]
    d526:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
    d52a:	4698      	mov	r8, r3
    d52c:	9309      	str	r3, [sp, #36]	; 0x24
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    d52e:	9b04      	ldr	r3, [sp, #16]
    d530:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    d532:	59cd      	ldr	r5, [r1, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    d534:	ab0c      	add	r3, sp, #48	; 0x30
    d536:	ba2d      	rev	r5, r5
    d538:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    d53a:	f85a 3b04 	ldr.w	r3, [sl], #4
	for (i = 0; i < 16; ++i) {
    d53e:	3704      	adds	r7, #4
    d540:	eb05 0903 	add.w	r9, r5, r3
	return (((a) >> n) | ((a) << (32 - n)));
    d544:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d548:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    d54c:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    d550:	444d      	add	r5, r9
    d552:	ea2b 0302 	bic.w	r3, fp, r2
    d556:	ea02 090c 	and.w	r9, r2, ip
    d55a:	ea83 0309 	eor.w	r3, r3, r9
    d55e:	442b      	add	r3, r5
		t2 = Sigma0(a) + Maj(a, b, c);
    d560:	9d00      	ldr	r5, [sp, #0]
    d562:	f8dd 9000 	ldr.w	r9, [sp]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d566:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    d568:	4075      	eors	r5, r6
	return (((a) >> n) | ((a) << (32 - n)));
    d56a:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d56e:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    d572:	4025      	ands	r5, r4
    d574:	ea06 0909 	and.w	r9, r6, r9
    d578:	ea85 0509 	eor.w	r5, r5, r9
    d57c:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    d580:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    d582:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    d584:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    d588:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    d58a:	f8dd e000 	ldr.w	lr, [sp]
    d58e:	46d8      	mov	r8, fp
    d590:	f040 8085 	bne.w	d69e <compress+0x1aa>
    d594:	f04f 0a10 	mov.w	sl, #16
    d598:	4949      	ldr	r1, [pc, #292]	; (d6c0 <compress+0x1cc>)
    d59a:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    d59c:	4651      	mov	r1, sl
    d59e:	f10a 0a01 	add.w	sl, sl, #1
    d5a2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d5a6:	f00a 070f 	and.w	r7, sl, #15
    d5aa:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d5ae:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d5b2:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    d5b6:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    d5ba:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    d5bc:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    d5c0:	f101 070e 	add.w	r7, r1, #14
    d5c4:	f007 070f 	and.w	r7, r7, #15
    d5c8:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    d5cc:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d5d0:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    d5d2:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    d5d6:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    d5da:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d5de:	f001 010f 	and.w	r1, r1, #15
    d5e2:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    d5e6:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    d5ea:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    d5ee:	f851 1c40 	ldr.w	r1, [r1, #-64]
    d5f2:	f859 ec40 	ldr.w	lr, [r9, #-64]
	for ( ; i < 64; ++i) {
    d5f6:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d5fa:	4471      	add	r1, lr
		s0 = sigma0(s0);
    d5fc:	f8dd e004 	ldr.w	lr, [sp, #4]
    d600:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    d604:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d608:	4441      	add	r1, r8
		s1 = sigma1(s1);
    d60a:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d60e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d610:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d612:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    d616:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    d61a:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    d61e:	ea05 0802 	and.w	r8, r5, r2
    d622:	970a      	str	r7, [sp, #40]	; 0x28
    d624:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    d628:	ea2c 0705 	bic.w	r7, ip, r5
    d62c:	ea87 0708 	eor.w	r7, r7, r8
    d630:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    d634:	444f      	add	r7, r9
    d636:	4477      	add	r7, lr
    d638:	4439      	add	r1, r7
    d63a:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
    d63c:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    d640:	ea84 0b06 	eor.w	fp, r4, r6
    d644:	ea0b 0b03 	and.w	fp, fp, r3
    d648:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    d64c:	ea04 0e06 	and.w	lr, r4, r6
		h = g; g = f; f = e; e = d + t1;
    d650:	f8dd 8000 	ldr.w	r8, [sp]
		t2 = Sigma0(a) + Maj(a, b, c);
    d654:	ea8b 0e0e 	eor.w	lr, fp, lr
    d658:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    d65c:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
    d65e:	4488      	add	r8, r1
		d = c; c = b; b = a; a = t1 + t2;
    d660:	46e3      	mov	fp, ip
    d662:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    d664:	9600      	str	r6, [sp, #0]
    d666:	d121      	bne.n	d6ac <compress+0x1b8>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    d668:	9f02      	ldr	r7, [sp, #8]
    d66a:	440f      	add	r7, r1
    d66c:	9903      	ldr	r1, [sp, #12]
    d66e:	6007      	str	r7, [r0, #0]
    d670:	4419      	add	r1, r3
    d672:	9b04      	ldr	r3, [sp, #16]
    d674:	6041      	str	r1, [r0, #4]
    d676:	4423      	add	r3, r4
    d678:	6083      	str	r3, [r0, #8]
    d67a:	9b05      	ldr	r3, [sp, #20]
    d67c:	4433      	add	r3, r6
    d67e:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    d680:	9b06      	ldr	r3, [sp, #24]
    d682:	4443      	add	r3, r8
    d684:	6103      	str	r3, [r0, #16]
    d686:	9b07      	ldr	r3, [sp, #28]
    d688:	442b      	add	r3, r5
    d68a:	6143      	str	r3, [r0, #20]
    d68c:	9b08      	ldr	r3, [sp, #32]
    d68e:	4413      	add	r3, r2
    d690:	6183      	str	r3, [r0, #24]
    d692:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d694:	4463      	add	r3, ip
    d696:	61c3      	str	r3, [r0, #28]
}
    d698:	b01d      	add	sp, #116	; 0x74
    d69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d69e:	46e3      	mov	fp, ip
    d6a0:	9600      	str	r6, [sp, #0]
    d6a2:	4694      	mov	ip, r2
    d6a4:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
    d6a6:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
    d6a8:	461c      	mov	r4, r3
    d6aa:	e742      	b.n	d532 <compress+0x3e>
    d6ac:	4694      	mov	ip, r2
    d6ae:	4626      	mov	r6, r4
    d6b0:	462a      	mov	r2, r5
    d6b2:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    d6b4:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    d6b6:	460b      	mov	r3, r1
    d6b8:	e770      	b.n	d59c <compress+0xa8>
    d6ba:	bf00      	nop
    d6bc:	0001e87c 	.word	0x0001e87c
    d6c0:	0001e8bc 	.word	0x0001e8bc

0000d6c4 <tc_sha256_init>:
{
    d6c4:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    d6c6:	4604      	mov	r4, r0
    d6c8:	b1c8      	cbz	r0, d6fe <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    d6ca:	2270      	movs	r2, #112	; 0x70
    d6cc:	2100      	movs	r1, #0
    d6ce:	f00d fce8 	bl	1b0a2 <_set>
	s->iv[1] = 0xbb67ae85;
    d6d2:	4b0b      	ldr	r3, [pc, #44]	; (d700 <tc_sha256_init+0x3c>)
    d6d4:	4a0b      	ldr	r2, [pc, #44]	; (d704 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    d6d6:	490c      	ldr	r1, [pc, #48]	; (d708 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    d6d8:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    d6dc:	4b0b      	ldr	r3, [pc, #44]	; (d70c <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    d6de:	480c      	ldr	r0, [pc, #48]	; (d710 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    d6e0:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    d6e4:	4b0b      	ldr	r3, [pc, #44]	; (d714 <tc_sha256_init+0x50>)
    d6e6:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    d6ea:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    d6ec:	4b0a      	ldr	r3, [pc, #40]	; (d718 <tc_sha256_init+0x54>)
    d6ee:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    d6f0:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    d6f4:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    d6f8:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    d6fc:	61e3      	str	r3, [r4, #28]
}
    d6fe:	bd10      	pop	{r4, pc}
    d700:	bb67ae85 	.word	0xbb67ae85
    d704:	6a09e667 	.word	0x6a09e667
    d708:	3c6ef372 	.word	0x3c6ef372
    d70c:	a54ff53a 	.word	0xa54ff53a
    d710:	510e527f 	.word	0x510e527f
    d714:	9b05688c 	.word	0x9b05688c
    d718:	1f83d9ab 	.word	0x1f83d9ab

0000d71c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    d71c:	4a0a      	ldr	r2, [pc, #40]	; (d748 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    d71e:	490b      	ldr	r1, [pc, #44]	; (d74c <arch_swap+0x30>)
	_current->arch.basepri = key;
    d720:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    d722:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    d724:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
    d728:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d72c:	4908      	ldr	r1, [pc, #32]	; (d750 <arch_swap+0x34>)
    d72e:	684b      	ldr	r3, [r1, #4]
    d730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d734:	604b      	str	r3, [r1, #4]
    d736:	2300      	movs	r3, #0
    d738:	f383 8811 	msr	BASEPRI, r3
    d73c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    d740:	6893      	ldr	r3, [r2, #8]
}
    d742:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    d746:	4770      	bx	lr
    d748:	2000b10c 	.word	0x2000b10c
    d74c:	0001eee8 	.word	0x0001eee8
    d750:	e000ed00 	.word	0xe000ed00

0000d754 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    d754:	4914      	ldr	r1, [pc, #80]	; (d7a8 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    d756:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    d758:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    d75c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    d75e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    d762:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d766:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d768:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    d76c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    d770:	4f0e      	ldr	r7, [pc, #56]	; (d7ac <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    d772:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    d776:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    d778:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    d77a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    d77c:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    d780:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    d782:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    d786:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    d78a:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    d78e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    d792:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    d796:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    d79a:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    d79c:	f00e f8c4 	bl	1b928 <configure_builtin_stack_guard>
    pop {r2, lr}
    d7a0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    d7a4:	4770      	bx	lr
    d7a6:	0000      	.short	0x0000
    ldr r1, =_kernel
    d7a8:	2000b10c 	.word	0x2000b10c
    ldr v4, =_SCS_ICSR
    d7ac:	e000ed04 	.word	0xe000ed04

0000d7b0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    d7b0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    d7b4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    d7b6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    d7ba:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    d7be:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    d7c0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    d7c4:	2902      	cmp	r1, #2
    beq _oops
    d7c6:	d0ff      	beq.n	d7c8 <_oops>

0000d7c8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    d7c8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    d7ca:	f00e f8b1 	bl	1b930 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    d7ce:	bd01      	pop	{r0, pc}

0000d7d0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    d7d0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    d7d2:	2b00      	cmp	r3, #0
    d7d4:	db08      	blt.n	d7e8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    d7d6:	2201      	movs	r2, #1
    d7d8:	f000 001f 	and.w	r0, r0, #31
    d7dc:	fa02 f000 	lsl.w	r0, r2, r0
    d7e0:	4a02      	ldr	r2, [pc, #8]	; (d7ec <arch_irq_enable+0x1c>)
    d7e2:	095b      	lsrs	r3, r3, #5
    d7e4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    d7e8:	4770      	bx	lr
    d7ea:	bf00      	nop
    d7ec:	e000e100 	.word	0xe000e100

0000d7f0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    d7f0:	4b05      	ldr	r3, [pc, #20]	; (d808 <arch_irq_is_enabled+0x18>)
    d7f2:	0942      	lsrs	r2, r0, #5
    d7f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    d7f8:	2301      	movs	r3, #1
    d7fa:	f000 001f 	and.w	r0, r0, #31
    d7fe:	fa03 f000 	lsl.w	r0, r3, r0
}
    d802:	4010      	ands	r0, r2
    d804:	4770      	bx	lr
    d806:	bf00      	nop
    d808:	e000e100 	.word	0xe000e100

0000d80c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    d80c:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    d80e:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    d810:	2c07      	cmp	r4, #7
{
    d812:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    d814:	d908      	bls.n	d828 <z_arm_irq_priority_set+0x1c>
    d816:	490d      	ldr	r1, [pc, #52]	; (d84c <z_arm_irq_priority_set+0x40>)
    d818:	480d      	ldr	r0, [pc, #52]	; (d850 <z_arm_irq_priority_set+0x44>)
    d81a:	225c      	movs	r2, #92	; 0x5c
    d81c:	f00c ff26 	bl	1a66c <printk>
    d820:	215c      	movs	r1, #92	; 0x5c
    d822:	480a      	ldr	r0, [pc, #40]	; (d84c <z_arm_irq_priority_set+0x40>)
    d824:	f00d f9c8 	bl	1abb8 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    d828:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    d82a:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d82c:	bfac      	ite	ge
    d82e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d832:	4b08      	ldrlt	r3, [pc, #32]	; (d854 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d834:	ea4f 1444 	mov.w	r4, r4, lsl #5
    d838:	b2e4      	uxtb	r4, r4
    d83a:	bfab      	itete	ge
    d83c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d840:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d844:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d848:	555c      	strblt	r4, [r3, r5]
}
    d84a:	bd38      	pop	{r3, r4, r5, pc}
    d84c:	00020885 	.word	0x00020885
    d850:	0001fbb7 	.word	0x0001fbb7
    d854:	e000ed14 	.word	0xe000ed14

0000d858 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    d858:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    d85c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    d85e:	490b      	ldr	r1, [pc, #44]	; (d88c <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    d860:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    d864:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    d866:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    d86a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    d86e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    d870:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    d874:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    d878:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    d87c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    d880:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    d882:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    d884:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    d886:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    d88a:	4770      	bx	lr
    d88c:	0001a749 	.word	0x0001a749

0000d890 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    d890:	4604      	mov	r4, r0
    d892:	b508      	push	{r3, lr}
    d894:	460e      	mov	r6, r1
    d896:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    d898:	f000 faf6 	bl	de88 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    d89c:	4b08      	ldr	r3, [pc, #32]	; (d8c0 <arch_switch_to_main_thread+0x30>)
    d89e:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    d8a0:	6f63      	ldr	r3, [r4, #116]	; 0x74
    d8a2:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    d8a6:	4628      	mov	r0, r5
    d8a8:	f386 8809 	msr	PSP, r6
    d8ac:	2100      	movs	r1, #0
    d8ae:	b663      	cpsie	if
    d8b0:	f381 8811 	msr	BASEPRI, r1
    d8b4:	f3bf 8f6f 	isb	sy
    d8b8:	2200      	movs	r2, #0
    d8ba:	2300      	movs	r3, #0
    d8bc:	f00c ff44 	bl	1a748 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    d8c0:	2000b10c 	.word	0x2000b10c

0000d8c4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    d8c4:	4901      	ldr	r1, [pc, #4]	; (d8cc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    d8c6:	2210      	movs	r2, #16
	str	r2, [r1]
    d8c8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    d8ca:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    d8cc:	e000ed10 	.word	0xe000ed10

0000d8d0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    d8d0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    d8d2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    d8d4:	f380 8811 	msr	BASEPRI, r0
	isb
    d8d8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    d8dc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    d8e0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    d8e2:	b662      	cpsie	i
	isb
    d8e4:	f3bf 8f6f 	isb	sy

	bx	lr
    d8e8:	4770      	bx	lr
    d8ea:	bf00      	nop

0000d8ec <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    d8ec:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    d8ee:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    d8f0:	f381 8811 	msr	BASEPRI, r1

	wfe
    d8f4:	bf20      	wfe

	msr	BASEPRI, r0
    d8f6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    d8fa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    d8fc:	4770      	bx	lr
    d8fe:	bf00      	nop

0000d900 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d900:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d902:	4605      	mov	r5, r0

	if (esf != NULL) {
    d904:	460c      	mov	r4, r1
    d906:	b1c9      	cbz	r1, d93c <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    d908:	688b      	ldr	r3, [r1, #8]
    d90a:	4810      	ldr	r0, [pc, #64]	; (d94c <z_arm_fatal_error+0x4c>)
    d90c:	9300      	str	r3, [sp, #0]
    d90e:	e9d1 2300 	ldrd	r2, r3, [r1]
    d912:	2145      	movs	r1, #69	; 0x45
    d914:	f00c feaa 	bl	1a66c <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    d918:	6963      	ldr	r3, [r4, #20]
    d91a:	2145      	movs	r1, #69	; 0x45
    d91c:	9300      	str	r3, [sp, #0]
    d91e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    d922:	480b      	ldr	r0, [pc, #44]	; (d950 <z_arm_fatal_error+0x50>)
    d924:	f00c fea2 	bl	1a66c <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    d928:	2145      	movs	r1, #69	; 0x45
    d92a:	69e2      	ldr	r2, [r4, #28]
    d92c:	4809      	ldr	r0, [pc, #36]	; (d954 <z_arm_fatal_error+0x54>)
    d92e:	f00c fe9d 	bl	1a66c <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    d932:	2145      	movs	r1, #69	; 0x45
    d934:	69a2      	ldr	r2, [r4, #24]
    d936:	4808      	ldr	r0, [pc, #32]	; (d958 <z_arm_fatal_error+0x58>)
    d938:	f00c fe98 	bl	1a66c <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    d93c:	4621      	mov	r1, r4
    d93e:	4628      	mov	r0, r5
}
    d940:	b003      	add	sp, #12
    d942:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    d946:	f009 bf0f 	b.w	17768 <z_fatal_error>
    d94a:	bf00      	nop
    d94c:	000208bb 	.word	0x000208bb
    d950:	000208ef 	.word	0x000208ef
    d954:	00020923 	.word	0x00020923
    d958:	00020937 	.word	0x00020937

0000d95c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    d95c:	bf30      	wfi
    b z_SysNmiOnReset
    d95e:	f7ff bffd 	b.w	d95c <z_SysNmiOnReset>
    d962:	bf00      	nop

0000d964 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d964:	4a0e      	ldr	r2, [pc, #56]	; (d9a0 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    d966:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    d968:	4b0e      	ldr	r3, [pc, #56]	; (d9a4 <z_arm_prep_c+0x40>)
    d96a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    d96e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    d970:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d974:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    d978:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    d97c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    d980:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    d984:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    d988:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    d98c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    d990:	f009 ff76 	bl	17880 <z_bss_zero>
	z_data_copy();
    d994:	f00b ffac 	bl	198f0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    d998:	f000 fa48 	bl	de2c <z_arm_interrupt_init>
	z_cstart();
    d99c:	f009 ff94 	bl	178c8 <z_cstart>
    d9a0:	00008000 	.word	0x00008000
    d9a4:	e000ed00 	.word	0xe000ed00

0000d9a8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    d9a8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    d9aa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    d9ac:	4a0b      	ldr	r2, [pc, #44]	; (d9dc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    d9ae:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    d9b0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    d9b2:	bf1e      	ittt	ne
	movne	r1, #0
    d9b4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    d9b6:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    d9b8:	f010 f9e3 	blne	1dd82 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    d9bc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    d9be:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    d9c2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    d9c6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    d9ca:	4905      	ldr	r1, [pc, #20]	; (d9e0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    d9cc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    d9ce:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    d9d0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    d9d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    d9d6:	4903      	ldr	r1, [pc, #12]	; (d9e4 <_isr_wrapper+0x3c>)
	bx r1
    d9d8:	4708      	bx	r1
    d9da:	0000      	.short	0x0000
	ldr r2, =_kernel
    d9dc:	2000b10c 	.word	0x2000b10c
	ldr r1, =_sw_isr_table
    d9e0:	0001e184 	.word	0x0001e184
	ldr r1, =z_arm_int_exit
    d9e4:	0000dded 	.word	0x0000dded

0000d9e8 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    d9e8:	f00d f905 	bl	1abf6 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    d9ec:	2020      	movs	r0, #32
    msr BASEPRI, r0
    d9ee:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    d9f2:	4808      	ldr	r0, [pc, #32]	; (da14 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    d9f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    d9f8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    d9fa:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    d9fe:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    da02:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    da04:	4308      	orrs	r0, r1
    msr CONTROL, r0
    da06:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    da0a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    da0e:	f7ff ffa9 	bl	d964 <z_arm_prep_c>
    da12:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    da14:	2000f010 	.word	0x2000f010

0000da18 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    da18:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    da1c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    da20:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    da22:	4672      	mov	r2, lr
	bl z_arm_fault
    da24:	f000 f91a 	bl	dc5c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    da28:	bd01      	pop	{r0, pc}
    da2a:	bf00      	nop

0000da2c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    da2c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    da2e:	4c21      	ldr	r4, [pc, #132]	; (dab4 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    da30:	2145      	movs	r1, #69	; 0x45
    da32:	4821      	ldr	r0, [pc, #132]	; (dab8 <usage_fault.constprop.0+0x8c>)
    da34:	f00c fe1a 	bl	1a66c <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    da38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    da3a:	019d      	lsls	r5, r3, #6
    da3c:	d503      	bpl.n	da46 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    da3e:	2145      	movs	r1, #69	; 0x45
    da40:	481e      	ldr	r0, [pc, #120]	; (dabc <usage_fault.constprop.0+0x90>)
    da42:	f00c fe13 	bl	1a66c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    da46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    da48:	01dc      	lsls	r4, r3, #7
    da4a:	d503      	bpl.n	da54 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    da4c:	2145      	movs	r1, #69	; 0x45
    da4e:	481c      	ldr	r0, [pc, #112]	; (dac0 <usage_fault.constprop.0+0x94>)
    da50:	f00c fe0c 	bl	1a66c <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    da54:	4d17      	ldr	r5, [pc, #92]	; (dab4 <usage_fault.constprop.0+0x88>)
    da56:	6aac      	ldr	r4, [r5, #40]	; 0x28
    da58:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    da5c:	d004      	beq.n	da68 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    da5e:	2145      	movs	r1, #69	; 0x45
    da60:	4818      	ldr	r0, [pc, #96]	; (dac4 <usage_fault.constprop.0+0x98>)
    da62:	f00c fe03 	bl	1a66c <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    da66:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    da68:	6aab      	ldr	r3, [r5, #40]	; 0x28
    da6a:	0318      	lsls	r0, r3, #12
    da6c:	d503      	bpl.n	da76 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    da6e:	2145      	movs	r1, #69	; 0x45
    da70:	4815      	ldr	r0, [pc, #84]	; (dac8 <usage_fault.constprop.0+0x9c>)
    da72:	f00c fdfb 	bl	1a66c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    da76:	4d0f      	ldr	r5, [pc, #60]	; (dab4 <usage_fault.constprop.0+0x88>)
    da78:	6aab      	ldr	r3, [r5, #40]	; 0x28
    da7a:	0359      	lsls	r1, r3, #13
    da7c:	d503      	bpl.n	da86 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    da7e:	2145      	movs	r1, #69	; 0x45
    da80:	4812      	ldr	r0, [pc, #72]	; (dacc <usage_fault.constprop.0+0xa0>)
    da82:	f00c fdf3 	bl	1a66c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    da86:	6aab      	ldr	r3, [r5, #40]	; 0x28
    da88:	039a      	lsls	r2, r3, #14
    da8a:	d503      	bpl.n	da94 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    da8c:	2145      	movs	r1, #69	; 0x45
    da8e:	4810      	ldr	r0, [pc, #64]	; (dad0 <usage_fault.constprop.0+0xa4>)
    da90:	f00c fdec 	bl	1a66c <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    da94:	4d07      	ldr	r5, [pc, #28]	; (dab4 <usage_fault.constprop.0+0x88>)
    da96:	6aab      	ldr	r3, [r5, #40]	; 0x28
    da98:	03db      	lsls	r3, r3, #15
    da9a:	d503      	bpl.n	daa4 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    da9c:	2145      	movs	r1, #69	; 0x45
    da9e:	480d      	ldr	r0, [pc, #52]	; (dad4 <usage_fault.constprop.0+0xa8>)
    daa0:	f00c fde4 	bl	1a66c <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    daa4:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    daa6:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    daa8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    daac:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    dab0:	62ab      	str	r3, [r5, #40]	; 0x28
}
    dab2:	bd38      	pop	{r3, r4, r5, pc}
    dab4:	e000ed00 	.word	0xe000ed00
    dab8:	0002096a 	.word	0x0002096a
    dabc:	00020987 	.word	0x00020987
    dac0:	0002099f 	.word	0x0002099f
    dac4:	000209be 	.word	0x000209be
    dac8:	000209ed 	.word	0x000209ed
    dacc:	00020a10 	.word	0x00020a10
    dad0:	00020a3a 	.word	0x00020a3a
    dad4:	00020a59 	.word	0x00020a59

0000dad8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dad8:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dada:	4c23      	ldr	r4, [pc, #140]	; (db68 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    dadc:	4606      	mov	r6, r0
    dade:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    dae0:	4822      	ldr	r0, [pc, #136]	; (db6c <bus_fault.constprop.0+0x94>)
    dae2:	2145      	movs	r1, #69	; 0x45
    dae4:	f00c fdc2 	bl	1a66c <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    dae8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    daea:	04d9      	lsls	r1, r3, #19
    daec:	d503      	bpl.n	daf6 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    daee:	2145      	movs	r1, #69	; 0x45
    daf0:	481f      	ldr	r0, [pc, #124]	; (db70 <bus_fault.constprop.0+0x98>)
    daf2:	f00c fdbb 	bl	1a66c <printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    daf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    daf8:	051a      	lsls	r2, r3, #20
    dafa:	d503      	bpl.n	db04 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    dafc:	2145      	movs	r1, #69	; 0x45
    dafe:	481d      	ldr	r0, [pc, #116]	; (db74 <bus_fault.constprop.0+0x9c>)
    db00:	f00c fdb4 	bl	1a66c <printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    db04:	4c18      	ldr	r4, [pc, #96]	; (db68 <bus_fault.constprop.0+0x90>)
    db06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db08:	059b      	lsls	r3, r3, #22
    db0a:	d510      	bpl.n	db2e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    db0c:	481a      	ldr	r0, [pc, #104]	; (db78 <bus_fault.constprop.0+0xa0>)
    db0e:	2145      	movs	r1, #69	; 0x45
    db10:	f00c fdac 	bl	1a66c <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    db14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    db16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db18:	0418      	lsls	r0, r3, #16
    db1a:	d508      	bpl.n	db2e <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    db1c:	2145      	movs	r1, #69	; 0x45
    db1e:	4817      	ldr	r0, [pc, #92]	; (db7c <bus_fault.constprop.0+0xa4>)
    db20:	f00c fda4 	bl	1a66c <printk>
			if (from_hard_fault) {
    db24:	b11e      	cbz	r6, db2e <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    db26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    db2c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    db2e:	4c0e      	ldr	r4, [pc, #56]	; (db68 <bus_fault.constprop.0+0x90>)
    db30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db32:	0559      	lsls	r1, r3, #21
    db34:	d503      	bpl.n	db3e <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    db36:	2145      	movs	r1, #69	; 0x45
    db38:	4811      	ldr	r0, [pc, #68]	; (db80 <bus_fault.constprop.0+0xa8>)
    db3a:	f00c fd97 	bl	1a66c <printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    db3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db40:	05da      	lsls	r2, r3, #23
    db42:	d50b      	bpl.n	db5c <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    db44:	2145      	movs	r1, #69	; 0x45
    db46:	480f      	ldr	r0, [pc, #60]	; (db84 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    db48:	f00c fd90 	bl	1a66c <printk>
	*recoverable = memory_fault_recoverable(esf);
    db4c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    db4e:	4a06      	ldr	r2, [pc, #24]	; (db68 <bus_fault.constprop.0+0x90>)
    db50:	6a93      	ldr	r3, [r2, #40]	; 0x28
    db52:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    db56:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    db58:	7028      	strb	r0, [r5, #0]
}
    db5a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    db5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db5e:	049b      	lsls	r3, r3, #18
    db60:	d5f4      	bpl.n	db4c <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    db62:	2145      	movs	r1, #69	; 0x45
    db64:	4808      	ldr	r0, [pc, #32]	; (db88 <bus_fault.constprop.0+0xb0>)
    db66:	e7ef      	b.n	db48 <bus_fault.constprop.0+0x70>
    db68:	e000ed00 	.word	0xe000ed00
    db6c:	00020a89 	.word	0x00020a89
    db70:	00020aa4 	.word	0x00020aa4
    db74:	00020aba 	.word	0x00020aba
    db78:	00020ad2 	.word	0x00020ad2
    db7c:	00020af0 	.word	0x00020af0
    db80:	00020b0a 	.word	0x00020b0a
    db84:	00020b2a 	.word	0x00020b2a
    db88:	00020b47 	.word	0x00020b47

0000db8c <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    db8c:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    db8e:	4c29      	ldr	r4, [pc, #164]	; (dc34 <mem_manage_fault.constprop.0+0xa8>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    db90:	4606      	mov	r6, r0
    db92:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    db94:	4828      	ldr	r0, [pc, #160]	; (dc38 <mem_manage_fault.constprop.0+0xac>)
    db96:	2145      	movs	r1, #69	; 0x45
    db98:	f00c fd68 	bl	1a66c <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    db9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    db9e:	06d8      	lsls	r0, r3, #27
    dba0:	d503      	bpl.n	dbaa <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    dba2:	2145      	movs	r1, #69	; 0x45
    dba4:	4825      	ldr	r0, [pc, #148]	; (dc3c <mem_manage_fault.constprop.0+0xb0>)
    dba6:	f00c fd61 	bl	1a66c <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    dbaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dbac:	0719      	lsls	r1, r3, #28
    dbae:	d503      	bpl.n	dbb8 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    dbb0:	2145      	movs	r1, #69	; 0x45
    dbb2:	4823      	ldr	r0, [pc, #140]	; (dc40 <mem_manage_fault.constprop.0+0xb4>)
    dbb4:	f00c fd5a 	bl	1a66c <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    dbb8:	4c1e      	ldr	r4, [pc, #120]	; (dc34 <mem_manage_fault.constprop.0+0xa8>)
    dbba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dbbc:	079a      	lsls	r2, r3, #30
    dbbe:	d510      	bpl.n	dbe2 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    dbc0:	2145      	movs	r1, #69	; 0x45
    dbc2:	4820      	ldr	r0, [pc, #128]	; (dc44 <mem_manage_fault.constprop.0+0xb8>)
    dbc4:	f00c fd52 	bl	1a66c <printk>
		uint32_t temp = SCB->MMFAR;
    dbc8:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    dbca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dbcc:	061b      	lsls	r3, r3, #24
    dbce:	d508      	bpl.n	dbe2 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    dbd0:	2145      	movs	r1, #69	; 0x45
    dbd2:	481d      	ldr	r0, [pc, #116]	; (dc48 <mem_manage_fault.constprop.0+0xbc>)
    dbd4:	f00c fd4a 	bl	1a66c <printk>
			if (from_hard_fault) {
    dbd8:	b11e      	cbz	r6, dbe2 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    dbda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dbdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    dbe0:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    dbe2:	4c14      	ldr	r4, [pc, #80]	; (dc34 <mem_manage_fault.constprop.0+0xa8>)
    dbe4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dbe6:	07d8      	lsls	r0, r3, #31
    dbe8:	d503      	bpl.n	dbf2 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    dbea:	2145      	movs	r1, #69	; 0x45
    dbec:	4817      	ldr	r0, [pc, #92]	; (dc4c <mem_manage_fault.constprop.0+0xc0>)
    dbee:	f00c fd3d 	bl	1a66c <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    dbf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dbf4:	0699      	lsls	r1, r3, #26
    dbf6:	d503      	bpl.n	dc00 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    dbf8:	2145      	movs	r1, #69	; 0x45
    dbfa:	4815      	ldr	r0, [pc, #84]	; (dc50 <mem_manage_fault.constprop.0+0xc4>)
    dbfc:	f00c fd36 	bl	1a66c <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    dc00:	4b0c      	ldr	r3, [pc, #48]	; (dc34 <mem_manage_fault.constprop.0+0xa8>)
    dc02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dc04:	06d2      	lsls	r2, r2, #27
    dc06:	d402      	bmi.n	dc0e <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    dc08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    dc0a:	079b      	lsls	r3, r3, #30
    dc0c:	d50a      	bpl.n	dc24 <mem_manage_fault.constprop.0+0x98>
	__ASSERT(0,
    dc0e:	4911      	ldr	r1, [pc, #68]	; (dc54 <mem_manage_fault.constprop.0+0xc8>)
    dc10:	4811      	ldr	r0, [pc, #68]	; (dc58 <mem_manage_fault.constprop.0+0xcc>)
    dc12:	f240 1247 	movw	r2, #327	; 0x147
    dc16:	f00c fd29 	bl	1a66c <printk>
    dc1a:	f240 1147 	movw	r1, #327	; 0x147
    dc1e:	480d      	ldr	r0, [pc, #52]	; (dc54 <mem_manage_fault.constprop.0+0xc8>)
    dc20:	f00c ffca 	bl	1abb8 <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    dc24:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    dc26:	4a03      	ldr	r2, [pc, #12]	; (dc34 <mem_manage_fault.constprop.0+0xa8>)
    dc28:	6a93      	ldr	r3, [r2, #40]	; 0x28
    dc2a:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    dc2e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    dc30:	7028      	strb	r0, [r5, #0]
}
    dc32:	bd70      	pop	{r4, r5, r6, pc}
    dc34:	e000ed00 	.word	0xe000ed00
    dc38:	00020b7b 	.word	0x00020b7b
    dc3c:	00020b96 	.word	0x00020b96
    dc40:	00020aba 	.word	0x00020aba
    dc44:	00020bce 	.word	0x00020bce
    dc48:	00020beb 	.word	0x00020beb
    dc4c:	00020c06 	.word	0x00020c06
    dc50:	00020b47 	.word	0x00020b47
    dc54:	00020c2a 	.word	0x00020c2a
    dc58:	0001fbb7 	.word	0x0001fbb7

0000dc5c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    dc5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dc60:	4b51      	ldr	r3, [pc, #324]	; (dda8 <z_arm_fault+0x14c>)
{
    dc62:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dc64:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    dc68:	4689      	mov	r9, r1
    dc6a:	4614      	mov	r4, r2
    dc6c:	2600      	movs	r6, #0
    dc6e:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    dc70:	f3c8 0708 	ubfx	r7, r8, #0, #9
    dc74:	f386 8811 	msr	BASEPRI, r6
    dc78:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    dc7c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    dc80:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    dc84:	d111      	bne.n	dcaa <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    dc86:	07d0      	lsls	r0, r2, #31
    dc88:	d40f      	bmi.n	dcaa <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    dc8a:	0651      	lsls	r1, r2, #25
    dc8c:	d403      	bmi.n	dc96 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    dc8e:	0722      	lsls	r2, r4, #28
    dc90:	d408      	bmi.n	dca4 <z_arm_fault+0x48>
			*nested_exc = true;
    dc92:	2601      	movs	r6, #1
    dc94:	e008      	b.n	dca8 <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    dc96:	2145      	movs	r1, #69	; 0x45
    dc98:	4844      	ldr	r0, [pc, #272]	; (ddac <z_arm_fault+0x150>)
    dc9a:	f00c fce7 	bl	1a66c <printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    dc9e:	f014 0404 	ands.w	r4, r4, #4
    dca2:	d000      	beq.n	dca6 <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)psp;
    dca4:	464d      	mov	r5, r9
	*nested_exc = false;
    dca6:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    dca8:	b95d      	cbnz	r5, dcc2 <z_arm_fault+0x66>
    dcaa:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    dcae:	4940      	ldr	r1, [pc, #256]	; (ddb0 <z_arm_fault+0x154>)
    dcb0:	4840      	ldr	r0, [pc, #256]	; (ddb4 <z_arm_fault+0x158>)
    dcb2:	f00c fcdb 	bl	1a66c <printk>
    dcb6:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    dcba:	483d      	ldr	r0, [pc, #244]	; (ddb0 <z_arm_fault+0x154>)
    dcbc:	f00c ff7c 	bl	1abb8 <assert_post_action>
    dcc0:	2500      	movs	r5, #0
	*recoverable = false;
    dcc2:	2400      	movs	r4, #0
    dcc4:	1efb      	subs	r3, r7, #3
    dcc6:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    dcca:	2b09      	cmp	r3, #9
    dccc:	d85a      	bhi.n	dd84 <z_arm_fault+0x128>
    dcce:	e8df f003 	tbb	[pc, r3]
    dcd2:	4e05      	.short	0x4e05
    dcd4:	59593252 	.word	0x59593252
    dcd8:	56595959 	.word	0x56595959
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    dcdc:	4f32      	ldr	r7, [pc, #200]	; (dda8 <z_arm_fault+0x14c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    dcde:	2145      	movs	r1, #69	; 0x45
    dce0:	4835      	ldr	r0, [pc, #212]	; (ddb8 <z_arm_fault+0x15c>)
    dce2:	f00c fcc3 	bl	1a66c <printk>
	*recoverable = false;
    dce6:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    dcea:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    dcec:	f014 0402 	ands.w	r4, r4, #2
    dcf0:	d005      	beq.n	dcfe <z_arm_fault+0xa2>
		PR_EXC("  Bus fault on vector table read");
    dcf2:	2145      	movs	r1, #69	; 0x45
    dcf4:	4831      	ldr	r0, [pc, #196]	; (ddbc <z_arm_fault+0x160>)
	PR_FAULT_INFO(
    dcf6:	f00c fcb9 	bl	1a66c <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    dcfa:	2400      	movs	r4, #0
}
    dcfc:	e01e      	b.n	dd3c <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    dcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dd00:	005b      	lsls	r3, r3, #1
    dd02:	d51b      	bpl.n	dd3c <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    dd04:	2145      	movs	r1, #69	; 0x45
    dd06:	482e      	ldr	r0, [pc, #184]	; (ddc0 <z_arm_fault+0x164>)
    dd08:	f00c fcb0 	bl	1a66c <printk>
		if (SCB_MMFSR != 0) {
    dd0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    dd10:	b12b      	cbz	r3, dd1e <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    dd12:	2001      	movs	r0, #1
    dd14:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    dd18:	f7ff ff38 	bl	db8c <mem_manage_fault.constprop.0>
    dd1c:	e00d      	b.n	dd3a <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    dd1e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    dd22:	b12b      	cbz	r3, dd30 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    dd24:	2001      	movs	r0, #1
    dd26:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    dd2a:	f7ff fed5 	bl	dad8 <bus_fault.constprop.0>
    dd2e:	e004      	b.n	dd3a <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    dd30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    dd32:	b29b      	uxth	r3, r3
    dd34:	b113      	cbz	r3, dd3c <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    dd36:	f7ff fe79 	bl	da2c <usage_fault.constprop.0>
    dd3a:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    dd3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    dd40:	b993      	cbnz	r3, dd68 <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    dd42:	2220      	movs	r2, #32
    dd44:	4629      	mov	r1, r5
    dd46:	a802      	add	r0, sp, #8
    dd48:	f00d fed4 	bl	1baf4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    dd4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dd4e:	b336      	cbz	r6, dd9e <z_arm_fault+0x142>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    dd50:	f3c3 0208 	ubfx	r2, r3, #0, #9
    dd54:	b922      	cbnz	r2, dd60 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    dd56:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    dd5a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    dd5e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    dd60:	4620      	mov	r0, r4
    dd62:	a902      	add	r1, sp, #8
    dd64:	f7ff fdcc 	bl	d900 <z_arm_fatal_error>
}
    dd68:	b00b      	add	sp, #44	; 0x2c
    dd6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    dd6e:	2000      	movs	r0, #0
    dd70:	f10d 0107 	add.w	r1, sp, #7
    dd74:	e7d0      	b.n	dd18 <z_arm_fault+0xbc>
		reason = bus_fault(esf, 0, recoverable);
    dd76:	2000      	movs	r0, #0
    dd78:	f10d 0107 	add.w	r1, sp, #7
    dd7c:	e7d5      	b.n	dd2a <z_arm_fault+0xce>
	PR_FAULT_INFO(
    dd7e:	2145      	movs	r1, #69	; 0x45
    dd80:	4810      	ldr	r0, [pc, #64]	; (ddc4 <z_arm_fault+0x168>)
    dd82:	e7b8      	b.n	dcf6 <z_arm_fault+0x9a>
	PR_FAULT_INFO("***** %s %d) *****",
    dd84:	4910      	ldr	r1, [pc, #64]	; (ddc8 <z_arm_fault+0x16c>)
    dd86:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    dd8a:	4a10      	ldr	r2, [pc, #64]	; (ddcc <z_arm_fault+0x170>)
    dd8c:	4810      	ldr	r0, [pc, #64]	; (ddd0 <z_arm_fault+0x174>)
    dd8e:	bf08      	it	eq
    dd90:	460a      	moveq	r2, r1
    dd92:	f1a7 0310 	sub.w	r3, r7, #16
    dd96:	2145      	movs	r1, #69	; 0x45
    dd98:	f00c fc68 	bl	1a66c <printk>
    dd9c:	e7ad      	b.n	dcfa <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    dd9e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    dda2:	f023 0301 	bic.w	r3, r3, #1
    dda6:	e7da      	b.n	dd5e <z_arm_fault+0x102>
    dda8:	e000ed00 	.word	0xe000ed00
    ddac:	00020c92 	.word	0x00020c92
    ddb0:	00020c2a 	.word	0x00020c2a
    ddb4:	0001fbb7 	.word	0x0001fbb7
    ddb8:	00020cba 	.word	0x00020cba
    ddbc:	00020cd6 	.word	0x00020cd6
    ddc0:	00020cfc 	.word	0x00020cfc
    ddc4:	00020d20 	.word	0x00020d20
    ddc8:	00020c64 	.word	0x00020c64
    ddcc:	00020c79 	.word	0x00020c79
    ddd0:	00020d5b 	.word	0x00020d5b

0000ddd4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    ddd4:	4b04      	ldr	r3, [pc, #16]	; (dde8 <z_arm_fault_init+0x14>)
    ddd6:	695a      	ldr	r2, [r3, #20]
    ddd8:	f042 0210 	orr.w	r2, r2, #16
    dddc:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    ddde:	695a      	ldr	r2, [r3, #20]
    dde0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    dde4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    dde6:	4770      	bx	lr
    dde8:	e000ed00 	.word	0xe000ed00

0000ddec <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    ddec:	4b04      	ldr	r3, [pc, #16]	; (de00 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    ddee:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    ddf0:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    ddf2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    ddf4:	d003      	beq.n	ddfe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    ddf6:	4903      	ldr	r1, [pc, #12]	; (de04 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    ddf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    ddfc:	600a      	str	r2, [r1, #0]

0000ddfe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    ddfe:	4770      	bx	lr
	ldr r3, =_kernel
    de00:	2000b10c 	.word	0x2000b10c
	ldr r1, =_SCS_ICSR
    de04:	e000ed04 	.word	0xe000ed04

0000de08 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    de08:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    de0c:	4905      	ldr	r1, [pc, #20]	; (de24 <sys_arch_reboot+0x1c>)
    de0e:	4b06      	ldr	r3, [pc, #24]	; (de28 <sys_arch_reboot+0x20>)
    de10:	68ca      	ldr	r2, [r1, #12]
    de12:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    de16:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    de18:	60cb      	str	r3, [r1, #12]
    de1a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    de1e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    de20:	e7fd      	b.n	de1e <sys_arch_reboot+0x16>
    de22:	bf00      	nop
    de24:	e000ed00 	.word	0xe000ed00
    de28:	05fa0004 	.word	0x05fa0004

0000de2c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    de2c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    de2e:	2120      	movs	r1, #32
    de30:	4803      	ldr	r0, [pc, #12]	; (de40 <z_arm_interrupt_init+0x14>)
    de32:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    de34:	3301      	adds	r3, #1
    de36:	2b45      	cmp	r3, #69	; 0x45
    de38:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    de3c:	d1f9      	bne.n	de32 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    de3e:	4770      	bx	lr
    de40:	e000e100 	.word	0xe000e100

0000de44 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    de44:	b508      	push	{r3, lr}
	if (_current == thread) {
    de46:	4b0e      	ldr	r3, [pc, #56]	; (de80 <z_impl_k_thread_abort+0x3c>)
    de48:	689b      	ldr	r3, [r3, #8]
    de4a:	4283      	cmp	r3, r0
    de4c:	d107      	bne.n	de5e <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    de4e:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    de52:	b193      	cbz	r3, de7a <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    de54:	4a0b      	ldr	r2, [pc, #44]	; (de84 <z_impl_k_thread_abort+0x40>)
    de56:	6853      	ldr	r3, [r2, #4]
    de58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    de5c:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    de5e:	f00a fe2f 	bl	18ac0 <z_thread_single_abort>
	__asm__ volatile(
    de62:	f04f 0320 	mov.w	r3, #32
    de66:	f3ef 8011 	mrs	r0, BASEPRI
    de6a:	f383 8811 	msr	BASEPRI, r3
    de6e:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    de72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    de76:	f00f bfd4 	b.w	1de22 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    de7a:	f00b fc2f 	bl	196dc <z_self_abort>
    de7e:	bf00      	nop
    de80:	2000b10c 	.word	0x2000b10c
    de84:	e000ed00 	.word	0xe000ed00

0000de88 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    de88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    de8a:	4c09      	ldr	r4, [pc, #36]	; (deb0 <z_arm_configure_static_mpu_regions+0x28>)
    de8c:	4a09      	ldr	r2, [pc, #36]	; (deb4 <z_arm_configure_static_mpu_regions+0x2c>)
    de8e:	4623      	mov	r3, r4
    de90:	2101      	movs	r1, #1
    de92:	4809      	ldr	r0, [pc, #36]	; (deb8 <z_arm_configure_static_mpu_regions+0x30>)
    de94:	f000 f976 	bl	e184 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    de98:	2300      	movs	r3, #0
    de9a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    de9c:	4b07      	ldr	r3, [pc, #28]	; (debc <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    de9e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    dea0:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    dea2:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    dea4:	9301      	str	r3, [sp, #4]
    dea6:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    dea8:	f000 f988 	bl	e1bc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    deac:	b004      	add	sp, #16
    deae:	bd10      	pop	{r4, pc}
    deb0:	20070000 	.word	0x20070000
    deb4:	20008000 	.word	0x20008000
    deb8:	0001e97c 	.word	0x0001e97c
    debc:	200087f8 	.word	0x200087f8

0000dec0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    dec0:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    dec2:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    dec4:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    dec6:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    deca:	f004 031f 	and.w	r3, r4, #31
    dece:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    ded0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    ded2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    ded4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    ded8:	4905      	ldr	r1, [pc, #20]	; (def0 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    deda:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    dede:	f043 0301 	orr.w	r3, r3, #1
    dee2:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    dee6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    deea:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    deee:	bd10      	pop	{r4, pc}
    def0:	e000ed00 	.word	0xe000ed00

0000def4 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    def4:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    def6:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    def8:	680c      	ldr	r4, [r1, #0]
{
    defa:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    defc:	890a      	ldrh	r2, [r1, #8]
    defe:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    df00:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    df02:	3b01      	subs	r3, #1
    df04:	f024 041f 	bic.w	r4, r4, #31
    df08:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    df0a:	f002 021f 	and.w	r2, r2, #31
    df0e:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    df12:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    df16:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    df18:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    df1a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    df1e:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    df20:	d909      	bls.n	df36 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    df22:	4602      	mov	r2, r0
    df24:	2145      	movs	r1, #69	; 0x45
    df26:	4806      	ldr	r0, [pc, #24]	; (df40 <mpu_configure_region+0x4c>)
    df28:	f00c fba0 	bl	1a66c <printk>
    df2c:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    df30:	4620      	mov	r0, r4
    df32:	b005      	add	sp, #20
    df34:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    df36:	4669      	mov	r1, sp
    df38:	f7ff ffc2 	bl	dec0 <region_init>
	return region_allocate_and_init(index,
    df3c:	e7f8      	b.n	df30 <mpu_configure_region+0x3c>
    df3e:	bf00      	nop
    df40:	00020d77 	.word	0x00020d77

0000df44 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    df44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    df48:	4689      	mov	r9, r1
    df4a:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    df4c:	4606      	mov	r6, r0
    df4e:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    df52:	4d59      	ldr	r5, [pc, #356]	; (e0b8 <mpu_configure_regions_and_partition.constprop.0+0x174>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    df54:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    df56:	45c8      	cmp	r8, r9
    df58:	da27      	bge.n	dfaa <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    df5a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    df5e:	f1ba 0f00 	cmp.w	sl, #0
    df62:	d045      	beq.n	dff0 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    df64:	f1ba 0f1f 	cmp.w	sl, #31
    df68:	d918      	bls.n	df9c <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    df6a:	f01a 0f1f 	tst.w	sl, #31
    df6e:	d115      	bne.n	df9c <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    df70:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    df74:	f01b 0f1f 	tst.w	fp, #31
    df78:	d110      	bne.n	df9c <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    df7a:	4658      	mov	r0, fp
    df7c:	f00d fce3 	bl	1b946 <arm_cmse_mpu_region_get>
    df80:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    df82:	eb0a 000b 	add.w	r0, sl, fp
    df86:	3801      	subs	r0, #1
    df88:	f00d fcdd 	bl	1b946 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    df8c:	4287      	cmp	r7, r0
    df8e:	d010      	beq.n	dfb2 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    df90:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    df94:	463a      	mov	r2, r7
    df96:	2145      	movs	r1, #69	; 0x45
    df98:	4848      	ldr	r0, [pc, #288]	; (e0bc <mpu_configure_regions_and_partition.constprop.0+0x178>)
    df9a:	e002      	b.n	dfa2 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    df9c:	4642      	mov	r2, r8
    df9e:	2145      	movs	r1, #69	; 0x45
    dfa0:	4847      	ldr	r0, [pc, #284]	; (e0c0 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    dfa2:	f00c fb63 	bl	1a66c <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    dfa6:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    dfaa:	4620      	mov	r0, r4
    dfac:	b005      	add	sp, #20
    dfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    dfb2:	f117 0f16 	cmn.w	r7, #22
    dfb6:	d0ed      	beq.n	df94 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    dfb8:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    dfba:	42bb      	cmp	r3, r7
    dfbc:	dbea      	blt.n	df94 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    dfbe:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    dfc2:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    dfc6:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    dfca:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    dfce:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    dfd2:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    dfd6:	e9d6 3200 	ldrd	r3, r2, [r6]
    dfda:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    dfdc:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    dfde:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    dfe2:	d11d      	bne.n	e020 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    dfe4:	45d3      	cmp	fp, sl
    dfe6:	d107      	bne.n	dff8 <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    dfe8:	4631      	mov	r1, r6
    dfea:	b2f8      	uxtb	r0, r7
    dfec:	f7ff ff82 	bl	def4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    dff0:	f108 0801 	add.w	r8, r8, #1
    dff4:	360c      	adds	r6, #12
    dff6:	e7ae      	b.n	df56 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    dff8:	4631      	mov	r1, r6
	MPU->RNR = index;
    dffa:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    dffe:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    e002:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e006:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    e00a:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    e00c:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    e010:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    e012:	f7ff ff6f 	bl	def4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e016:	f110 0f16 	cmn.w	r0, #22
    e01a:	d0c4      	beq.n	dfa6 <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    e01c:	1c44      	adds	r4, r0, #1
    e01e:	e7e7      	b.n	dff0 <mpu_configure_regions_and_partition.constprop.0+0xac>
				regions[i].start - 1);
    e020:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    e022:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    e024:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    e026:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    e02a:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    e02e:	d108      	bne.n	e042 <mpu_configure_regions_and_partition.constprop.0+0xfe>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e030:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e034:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e036:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e03a:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e03c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    e040:	e7e7      	b.n	e012 <mpu_configure_regions_and_partition.constprop.0+0xce>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e042:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    e046:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    e04a:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    e04c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    e050:	4631      	mov	r1, r6
    e052:	f7ff ff4f 	bl	def4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    e056:	f110 0f16 	cmn.w	r0, #22
    e05a:	d0a4      	beq.n	dfa6 <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    e05c:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e060:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    e064:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    e068:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    e06c:	f362 0304 	bfi	r3, r2, #0, #5
    e070:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e074:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    e078:	f89d 2008 	ldrb.w	r2, [sp, #8]
    e07c:	085b      	lsrs	r3, r3, #1
    e07e:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    e082:	e9d6 3100 	ldrd	r3, r1, [r6]
    e086:	440b      	add	r3, r1
    e088:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    e08a:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    e08e:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    e090:	445b      	add	r3, fp
    e092:	eba3 030a 	sub.w	r3, r3, sl
    e096:	b2c0      	uxtb	r0, r0
    e098:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    e09c:	2807      	cmp	r0, #7
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e09e:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    e0a2:	9303      	str	r3, [sp, #12]
    e0a4:	d903      	bls.n	e0ae <mpu_configure_regions_and_partition.constprop.0+0x16a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    e0a6:	4602      	mov	r2, r0
    e0a8:	2145      	movs	r1, #69	; 0x45
    e0aa:	4806      	ldr	r0, [pc, #24]	; (e0c4 <mpu_configure_regions_and_partition.constprop.0+0x180>)
    e0ac:	e779      	b.n	dfa2 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    e0ae:	4669      	mov	r1, sp
    e0b0:	f7ff ff06 	bl	dec0 <region_init>
    e0b4:	e7b2      	b.n	e01c <mpu_configure_regions_and_partition.constprop.0+0xd8>
    e0b6:	bf00      	nop
    e0b8:	e000ed00 	.word	0xe000ed00
    e0bc:	00020dca 	.word	0x00020dca
    e0c0:	00020da2 	.word	0x00020da2
    e0c4:	00020d77 	.word	0x00020d77

0000e0c8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    e0c8:	2205      	movs	r2, #5
    e0ca:	4b04      	ldr	r3, [pc, #16]	; (e0dc <arm_core_mpu_enable+0x14>)
    e0cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    e0d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    e0d4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    e0d8:	4770      	bx	lr
    e0da:	bf00      	nop
    e0dc:	e000ed00 	.word	0xe000ed00

0000e0e0 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    e0e0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    e0e4:	2200      	movs	r2, #0
    e0e6:	4b02      	ldr	r3, [pc, #8]	; (e0f0 <arm_core_mpu_disable+0x10>)
    e0e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    e0ec:	4770      	bx	lr
    e0ee:	bf00      	nop
    e0f0:	e000ed00 	.word	0xe000ed00

0000e0f4 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    e0f4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    e0f6:	4d1d      	ldr	r5, [pc, #116]	; (e16c <arm_mpu_init+0x78>)
    e0f8:	682c      	ldr	r4, [r5, #0]
    e0fa:	2c08      	cmp	r4, #8
    e0fc:	d90d      	bls.n	e11a <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    e0fe:	f240 123b 	movw	r2, #315	; 0x13b
    e102:	491b      	ldr	r1, [pc, #108]	; (e170 <arm_mpu_init+0x7c>)
    e104:	481b      	ldr	r0, [pc, #108]	; (e174 <arm_mpu_init+0x80>)
    e106:	f00c fab1 	bl	1a66c <printk>
    e10a:	4819      	ldr	r0, [pc, #100]	; (e170 <arm_mpu_init+0x7c>)
    e10c:	f240 113b 	movw	r1, #315	; 0x13b
    e110:	f00c fd52 	bl	1abb8 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    e114:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    e118:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e11a:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    e11c:	f7ff ffe0 	bl	e0e0 <arm_core_mpu_disable>
	MPU->MAIR0 =
    e120:	4b15      	ldr	r3, [pc, #84]	; (e178 <arm_mpu_init+0x84>)
    e122:	4a16      	ldr	r2, [pc, #88]	; (e17c <arm_mpu_init+0x88>)
    e124:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e128:	4284      	cmp	r4, r0
    e12a:	d117      	bne.n	e15c <arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
    e12c:	4b14      	ldr	r3, [pc, #80]	; (e180 <arm_mpu_init+0x8c>)
    e12e:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    e130:	f7ff ffca 	bl	e0c8 <arm_core_mpu_enable>
	__ASSERT(
    e134:	4b10      	ldr	r3, [pc, #64]	; (e178 <arm_mpu_init+0x84>)
    e136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    e13a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    e13e:	2b08      	cmp	r3, #8
    e140:	d00a      	beq.n	e158 <arm_mpu_init+0x64>
    e142:	490b      	ldr	r1, [pc, #44]	; (e170 <arm_mpu_init+0x7c>)
    e144:	480b      	ldr	r0, [pc, #44]	; (e174 <arm_mpu_init+0x80>)
    e146:	f44f 72b3 	mov.w	r2, #358	; 0x166
    e14a:	f00c fa8f 	bl	1a66c <printk>
    e14e:	f44f 71b3 	mov.w	r1, #358	; 0x166
    e152:	4807      	ldr	r0, [pc, #28]	; (e170 <arm_mpu_init+0x7c>)
    e154:	f00c fd30 	bl	1abb8 <assert_post_action>
	return 0;
    e158:	2000      	movs	r0, #0
    e15a:	e7dd      	b.n	e118 <arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    e15c:	6869      	ldr	r1, [r5, #4]
    e15e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    e162:	f7ff fead 	bl	dec0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    e166:	3001      	adds	r0, #1
    e168:	e7de      	b.n	e128 <arm_mpu_init+0x34>
    e16a:	bf00      	nop
    e16c:	0001e988 	.word	0x0001e988
    e170:	00020df2 	.word	0x00020df2
    e174:	0001fbb7 	.word	0x0001fbb7
    e178:	e000ed00 	.word	0xe000ed00
    e17c:	0044ffaa 	.word	0x0044ffaa
    e180:	2000c8cf 	.word	0x2000c8cf

0000e184 <arm_core_mpu_configure_static_mpu_regions>:
{
    e184:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    e186:	4c0a      	ldr	r4, [pc, #40]	; (e1b0 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    e188:	7822      	ldrb	r2, [r4, #0]
    e18a:	f7ff fedb 	bl	df44 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    e18e:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    e190:	3016      	adds	r0, #22
    e192:	d10c      	bne.n	e1ae <arm_core_mpu_configure_static_mpu_regions+0x2a>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e194:	4907      	ldr	r1, [pc, #28]	; (e1b4 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e196:	4808      	ldr	r0, [pc, #32]	; (e1b8 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    e198:	f44f 7282 	mov.w	r2, #260	; 0x104
    e19c:	f00c fa66 	bl	1a66c <printk>
}
    e1a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    e1a4:	f44f 7182 	mov.w	r1, #260	; 0x104
    e1a8:	4802      	ldr	r0, [pc, #8]	; (e1b4 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    e1aa:	f00c bd05 	b.w	1abb8 <assert_post_action>
}
    e1ae:	bd10      	pop	{r4, pc}
    e1b0:	2000c8cf 	.word	0x2000c8cf
    e1b4:	00020df2 	.word	0x00020df2
    e1b8:	0001fbb7 	.word	0x0001fbb7

0000e1bc <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    e1bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1c0:	4d30      	ldr	r5, [pc, #192]	; (e284 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    e1c2:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e1c4:	4606      	mov	r6, r0
    e1c6:	f04f 0800 	mov.w	r8, #0
    e1ca:	46ab      	mov	fp, r5
	MPU->RNR = index;
    e1cc:	4f2e      	ldr	r7, [pc, #184]	; (e288 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e1ce:	45d0      	cmp	r8, sl
    e1d0:	db02      	blt.n	e1d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    e1d2:	b003      	add	sp, #12
    e1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    e1d8:	f8d6 9004 	ldr.w	r9, [r6, #4]
    e1dc:	f1b9 0f00 	cmp.w	r9, #0
    e1e0:	d04a      	beq.n	e278 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    e1e2:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e1e4:	4608      	mov	r0, r1
    e1e6:	9101      	str	r1, [sp, #4]
    e1e8:	f00d fbad 	bl	1b946 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e1ec:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    e1ee:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    e1f0:	eb09 0001 	add.w	r0, r9, r1
    e1f4:	3801      	subs	r0, #1
    e1f6:	f00d fba6 	bl	1b946 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    e1fa:	4284      	cmp	r4, r0
    e1fc:	f04f 0214 	mov.w	r2, #20
    e200:	4b22      	ldr	r3, [pc, #136]	; (e28c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    e202:	d013      	beq.n	e22c <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    e204:	f06f 0315 	mvn.w	r3, #21
    e208:	fb02 f808 	mul.w	r8, r2, r8
    e20c:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e210:	f44f 728a 	mov.w	r2, #276	; 0x114
    e214:	491e      	ldr	r1, [pc, #120]	; (e290 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    e216:	481f      	ldr	r0, [pc, #124]	; (e294 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    e218:	f00c fa28 	bl	1a66c <printk>
    e21c:	f44f 718a 	mov.w	r1, #276	; 0x114
    e220:	481b      	ldr	r0, [pc, #108]	; (e290 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    e222:	b003      	add	sp, #12
    e224:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    e228:	f00c bcc6 	b.w	1abb8 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    e22c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    e230:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    e232:	d0ed      	beq.n	e210 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    e234:	7819      	ldrb	r1, [r3, #0]
    e236:	42a1      	cmp	r1, r4
    e238:	ddea      	ble.n	e210 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    e23a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    e23e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    e242:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    e246:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    e24a:	f100 0108 	add.w	r1, r0, #8
    e24e:	7b00      	ldrb	r0, [r0, #12]
    e250:	f364 0004 	bfi	r0, r4, #0, #5
    e254:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    e256:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    e25a:	790c      	ldrb	r4, [r1, #4]
    e25c:	0840      	lsrs	r0, r0, #1
    e25e:	f360 1447 	bfi	r4, r0, #5, #3
    e262:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    e264:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    e268:	f021 011f 	bic.w	r1, r1, #31
    e26c:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    e26e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    e272:	f021 011f 	bic.w	r1, r1, #31
    e276:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    e278:	f108 0801 	add.w	r8, r8, #1
    e27c:	3514      	adds	r5, #20
    e27e:	360c      	adds	r6, #12
    e280:	e7a5      	b.n	e1ce <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    e282:	bf00      	nop
    e284:	2000ab0c 	.word	0x2000ab0c
    e288:	e000ed00 	.word	0xe000ed00
    e28c:	2000c8cf 	.word	0x2000c8cf
    e290:	00020df2 	.word	0x00020df2
    e294:	0001fbb7 	.word	0x0001fbb7

0000e298 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    e298:	4b01      	ldr	r3, [pc, #4]	; (e2a0 <__stdout_hook_install+0x8>)
    e29a:	6018      	str	r0, [r3, #0]
}
    e29c:	4770      	bx	lr
    e29e:	bf00      	nop
    e2a0:	20008334 	.word	0x20008334

0000e2a4 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    e2a4:	2000      	movs	r0, #0
    e2a6:	4b02      	ldr	r3, [pc, #8]	; (e2b0 <remoteproc_mgr_boot+0xc>)
    e2a8:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    e2ac:	4770      	bx	lr
    e2ae:	bf00      	nop
    e2b0:	40005000 	.word	0x40005000

0000e2b4 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    e2b4:	4b0e      	ldr	r3, [pc, #56]	; (e2f0 <bt_hex_real+0x3c>)
    e2b6:	2940      	cmp	r1, #64	; 0x40
    e2b8:	bf28      	it	cs
    e2ba:	2140      	movcs	r1, #64	; 0x40
{
    e2bc:	b570      	push	{r4, r5, r6, lr}
    e2be:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    e2c0:	4c0c      	ldr	r4, [pc, #48]	; (e2f4 <bt_hex_real+0x40>)
    e2c2:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    e2c4:	42b0      	cmp	r0, r6
    e2c6:	f103 0302 	add.w	r3, r3, #2
    e2ca:	d104      	bne.n	e2d6 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    e2cc:	2300      	movs	r3, #0
    e2ce:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    e2d2:	4807      	ldr	r0, [pc, #28]	; (e2f0 <bt_hex_real+0x3c>)
    e2d4:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    e2d6:	7802      	ldrb	r2, [r0, #0]
    e2d8:	0912      	lsrs	r2, r2, #4
    e2da:	5ca2      	ldrb	r2, [r4, r2]
    e2dc:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    e2e0:	f810 2b01 	ldrb.w	r2, [r0], #1
    e2e4:	f002 020f 	and.w	r2, r2, #15
    e2e8:	5ca2      	ldrb	r2, [r4, r2]
    e2ea:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    e2ee:	e7e9      	b.n	e2c4 <bt_hex_real+0x10>
    e2f0:	2000c8ee 	.word	0x2000c8ee
    e2f4:	00020e5b 	.word	0x00020e5b

0000e2f8 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    e2f8:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    e2fa:	7803      	ldrb	r3, [r0, #0]
    e2fc:	b08b      	sub	sp, #44	; 0x2c
    e2fe:	4604      	mov	r4, r0
    e300:	ad07      	add	r5, sp, #28
    e302:	2b03      	cmp	r3, #3
    e304:	d821      	bhi.n	e34a <bt_addr_le_str_real+0x52>
    e306:	e8df f003 	tbb	[pc, r3]
    e30a:	1a02      	.short	0x1a02
    e30c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    e30e:	4912      	ldr	r1, [pc, #72]	; (e358 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    e310:	4628      	mov	r0, r5
    e312:	f00d fb95 	bl	1ba40 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e316:	7863      	ldrb	r3, [r4, #1]
    e318:	211e      	movs	r1, #30
    e31a:	9304      	str	r3, [sp, #16]
    e31c:	78a3      	ldrb	r3, [r4, #2]
    e31e:	4a0f      	ldr	r2, [pc, #60]	; (e35c <bt_addr_le_str_real+0x64>)
    e320:	9303      	str	r3, [sp, #12]
    e322:	78e3      	ldrb	r3, [r4, #3]
    e324:	9505      	str	r5, [sp, #20]
    e326:	9302      	str	r3, [sp, #8]
    e328:	7923      	ldrb	r3, [r4, #4]
    e32a:	480d      	ldr	r0, [pc, #52]	; (e360 <bt_addr_le_str_real+0x68>)
    e32c:	9301      	str	r3, [sp, #4]
    e32e:	7963      	ldrb	r3, [r4, #5]
    e330:	9300      	str	r3, [sp, #0]
    e332:	79a3      	ldrb	r3, [r4, #6]
    e334:	f00c f9a7 	bl	1a686 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    e338:	4809      	ldr	r0, [pc, #36]	; (e360 <bt_addr_le_str_real+0x68>)
    e33a:	b00b      	add	sp, #44	; 0x2c
    e33c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    e33e:	4909      	ldr	r1, [pc, #36]	; (e364 <bt_addr_le_str_real+0x6c>)
    e340:	e7e6      	b.n	e310 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    e342:	4909      	ldr	r1, [pc, #36]	; (e368 <bt_addr_le_str_real+0x70>)
    e344:	e7e4      	b.n	e310 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    e346:	4909      	ldr	r1, [pc, #36]	; (e36c <bt_addr_le_str_real+0x74>)
    e348:	e7e2      	b.n	e310 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e34a:	210a      	movs	r1, #10
    e34c:	4628      	mov	r0, r5
    e34e:	4a08      	ldr	r2, [pc, #32]	; (e370 <bt_addr_le_str_real+0x78>)
    e350:	f00c f999 	bl	1a686 <snprintk>
		break;
    e354:	e7df      	b.n	e316 <bt_addr_le_str_real+0x1e>
    e356:	bf00      	nop
    e358:	0001f1f3 	.word	0x0001f1f3
    e35c:	0001f21c 	.word	0x0001f21c
    e360:	2000c8d0 	.word	0x2000c8d0
    e364:	0001f1fa 	.word	0x0001f1fa
    e368:	0001f201 	.word	0x0001f201
    e36c:	0001f20b 	.word	0x0001f20b
    e370:	0001f215 	.word	0x0001f215

0000e374 <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    e374:	2149      	movs	r1, #73	; 0x49
{
    e376:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    e378:	4809      	ldr	r0, [pc, #36]	; (e3a0 <save_id+0x2c>)
    e37a:	f00c f977 	bl	1a66c <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    e37e:	4909      	ldr	r1, [pc, #36]	; (e3a4 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    e380:	4809      	ldr	r0, [pc, #36]	; (e3a8 <save_id+0x34>)
    e382:	79ca      	ldrb	r2, [r1, #7]
    e384:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    e388:	f7fd fa1e 	bl	b7c8 <settings_save_one>
	if (err) {
    e38c:	4602      	mov	r2, r0
    e38e:	b128      	cbz	r0, e39c <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    e390:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    e394:	2145      	movs	r1, #69	; 0x45
    e396:	4805      	ldr	r0, [pc, #20]	; (e3ac <save_id+0x38>)
    e398:	f00c b968 	b.w	1a66c <printk>
}
    e39c:	bd08      	pop	{r3, pc}
    e39e:	bf00      	nop
    e3a0:	00020e6c 	.word	0x00020e6c
    e3a4:	20008000 	.word	0x20008000
    e3a8:	00020e7b 	.word	0x00020e7b
    e3ac:	00020e81 	.word	0x00020e81

0000e3b0 <set>:
{
    e3b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e3b2:	4616      	mov	r6, r2
    e3b4:	461f      	mov	r7, r3
	if (!name) {
    e3b6:	4604      	mov	r4, r0
    e3b8:	b930      	cbnz	r0, e3c8 <set+0x18>
		BT_ERR("Insufficient number of arguments");
    e3ba:	2145      	movs	r1, #69	; 0x45
    e3bc:	4819      	ldr	r0, [pc, #100]	; (e424 <set+0x74>)
    e3be:	f00c f955 	bl	1a66c <printk>
	return -ENOENT;
    e3c2:	f06f 0401 	mvn.w	r4, #1
    e3c6:	e013      	b.n	e3f0 <set+0x40>
	len = settings_name_next(name, &next);
    e3c8:	a901      	add	r1, sp, #4
    e3ca:	f00c fc6e 	bl	1acaa <settings_name_next>
	if (!strncmp(name, "id", len)) {
    e3ce:	4916      	ldr	r1, [pc, #88]	; (e428 <set+0x78>)
	len = settings_name_next(name, &next);
    e3d0:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    e3d2:	4620      	mov	r0, r4
    e3d4:	f00d fb6c 	bl	1bab0 <strncmp>
    e3d8:	4604      	mov	r4, r0
    e3da:	2800      	cmp	r0, #0
    e3dc:	d1f1      	bne.n	e3c2 <set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e3de:	4d13      	ldr	r5, [pc, #76]	; (e42c <set+0x7c>)
    e3e0:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    e3e4:	075b      	lsls	r3, r3, #29
    e3e6:	d506      	bpl.n	e3f6 <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    e3e8:	2157      	movs	r1, #87	; 0x57
    e3ea:	4811      	ldr	r0, [pc, #68]	; (e430 <set+0x80>)
    e3ec:	f00c f93e 	bl	1a66c <printk>
}
    e3f0:	4620      	mov	r0, r4
    e3f2:	b003      	add	sp, #12
    e3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    e3f6:	3d94      	subs	r5, #148	; 0x94
    e3f8:	2207      	movs	r2, #7
    e3fa:	4629      	mov	r1, r5
    e3fc:	4638      	mov	r0, r7
    e3fe:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    e400:	2806      	cmp	r0, #6
    e402:	d80a      	bhi.n	e41a <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    e404:	2145      	movs	r1, #69	; 0x45
    e406:	480b      	ldr	r0, [pc, #44]	; (e434 <set+0x84>)
    e408:	f00c f930 	bl	1a66c <printk>
			(void)memset(bt_dev.id_addr, 0,
    e40c:	2207      	movs	r2, #7
    e40e:	4621      	mov	r1, r4
    e410:	4628      	mov	r0, r5
    e412:	f00d fb9a 	bl	1bb4a <memset>
			bt_dev.id_count = 0U;
    e416:	71ec      	strb	r4, [r5, #7]
    e418:	e7ea      	b.n	e3f0 <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    e41a:	2307      	movs	r3, #7
    e41c:	fbb0 f0f3 	udiv	r0, r0, r3
    e420:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    e422:	e7e5      	b.n	e3f0 <set+0x40>
    e424:	00020ea1 	.word	0x00020ea1
    e428:	0001f208 	.word	0x0001f208
    e42c:	20008094 	.word	0x20008094
    e430:	00020ec7 	.word	0x00020ec7
    e434:	00020ef0 	.word	0x00020ef0

0000e438 <bt_settings_encode_key>:
{
    e438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e43c:	b088      	sub	sp, #32
    e43e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    e442:	799c      	ldrb	r4, [r3, #6]
    e444:	795d      	ldrb	r5, [r3, #5]
    e446:	791e      	ldrb	r6, [r3, #4]
    e448:	78df      	ldrb	r7, [r3, #3]
    e44a:	f893 c002 	ldrb.w	ip, [r3, #2]
    e44e:	f893 e001 	ldrb.w	lr, [r3, #1]
    e452:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    e454:	f1b8 0f00 	cmp.w	r8, #0
    e458:	d00e      	beq.n	e478 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    e45a:	e9cd 3806 	strd	r3, r8, [sp, #24]
    e45e:	e9cd ce04 	strd	ip, lr, [sp, #16]
    e462:	4613      	mov	r3, r2
    e464:	e9cd 6702 	strd	r6, r7, [sp, #8]
    e468:	e9cd 4500 	strd	r4, r5, [sp]
    e46c:	4a08      	ldr	r2, [pc, #32]	; (e490 <bt_settings_encode_key+0x58>)
    e46e:	f00c f90a 	bl	1a686 <snprintk>
}
    e472:	b008      	add	sp, #32
    e474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    e478:	e9cd e305 	strd	lr, r3, [sp, #20]
    e47c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    e480:	4613      	mov	r3, r2
    e482:	e9cd 5601 	strd	r5, r6, [sp, #4]
    e486:	4a03      	ldr	r2, [pc, #12]	; (e494 <bt_settings_encode_key+0x5c>)
    e488:	9400      	str	r4, [sp, #0]
    e48a:	f00c f8fc 	bl	1a686 <snprintk>
}
    e48e:	e7f0      	b.n	e472 <bt_settings_encode_key+0x3a>
    e490:	00020f1a 	.word	0x00020f1a
    e494:	00020f3e 	.word	0x00020f3e

0000e498 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    e498:	4907      	ldr	r1, [pc, #28]	; (e4b8 <bt_settings_save_id+0x20>)
    e49a:	e8d1 3fef 	ldaex	r3, [r1]
    e49e:	f043 0201 	orr.w	r2, r3, #1
    e4a2:	e8c1 2fe0 	stlex	r0, r2, [r1]
    e4a6:	2800      	cmp	r0, #0
    e4a8:	d1f7      	bne.n	e49a <bt_settings_save_id+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    e4aa:	07db      	lsls	r3, r3, #31
    e4ac:	d403      	bmi.n	e4b6 <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    e4ae:	4803      	ldr	r0, [pc, #12]	; (e4bc <bt_settings_save_id+0x24>)
    e4b0:	3908      	subs	r1, #8
    e4b2:	f00f bc98 	b.w	1dde6 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    e4b6:	4770      	bx	lr
    e4b8:	20008340 	.word	0x20008340
    e4bc:	2000a560 	.word	0x2000a560

0000e4c0 <commit>:

static int commit(void)
{
    e4c0:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    e4c2:	4c13      	ldr	r4, [pc, #76]	; (e510 <commit+0x50>)
    e4c4:	79e3      	ldrb	r3, [r4, #7]
    e4c6:	b96b      	cbnz	r3, e4e4 <commit+0x24>
		bt_setup_public_id_addr();
    e4c8:	f001 ffc0 	bl	1044c <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    e4cc:	79e3      	ldrb	r3, [r4, #7]
    e4ce:	b94b      	cbnz	r3, e4e4 <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    e4d0:	f002 f84a 	bl	10568 <bt_setup_random_id_addr>
		if (err) {
    e4d4:	4604      	mov	r4, r0
    e4d6:	b128      	cbz	r0, e4e4 <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    e4d8:	2145      	movs	r1, #69	; 0x45
    e4da:	480e      	ldr	r0, [pc, #56]	; (e514 <commit+0x54>)
    e4dc:	f00c f8c6 	bl	1a66c <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    e4e0:	4620      	mov	r0, r4
    e4e2:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    e4e4:	4d0c      	ldr	r5, [pc, #48]	; (e518 <commit+0x58>)
    e4e6:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e4ea:	079b      	lsls	r3, r3, #30
    e4ec:	d401      	bmi.n	e4f2 <commit+0x32>
		bt_finalize_init();
    e4ee:	f001 fc95 	bl	fe1c <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    e4f2:	e8d5 4fef 	ldaex	r4, [r5]
    e4f6:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    e4fa:	e8c5 3fe2 	stlex	r2, r3, [r5]
    e4fe:	2a00      	cmp	r2, #0
    e500:	d1f7      	bne.n	e4f2 <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    e502:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    e506:	d0eb      	beq.n	e4e0 <commit+0x20>
		bt_settings_save_id();
    e508:	f7ff ffc6 	bl	e498 <bt_settings_save_id>
	return 0;
    e50c:	2400      	movs	r4, #0
    e50e:	e7e7      	b.n	e4e0 <commit+0x20>
    e510:	20008000 	.word	0x20008000
    e514:	00020f5f 	.word	0x00020f5f
    e518:	20008094 	.word	0x20008094

0000e51c <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    e51c:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    e51e:	f7fd fa1d 	bl	b95c <settings_subsys_init>
	if (err) {
    e522:	4604      	mov	r4, r0
    e524:	b120      	cbz	r0, e530 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    e526:	4602      	mov	r2, r0
    e528:	2145      	movs	r1, #69	; 0x45
    e52a:	4802      	ldr	r0, [pc, #8]	; (e534 <bt_settings_init+0x18>)
    e52c:	f00c f89e 	bl	1a66c <printk>
		return err;
	}

	return 0;
}
    e530:	4620      	mov	r0, r4
    e532:	bd10      	pop	{r4, pc}
    e534:	00020f88 	.word	0x00020f88

0000e538 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    e538:	4603      	mov	r3, r0
    e53a:	b430      	push	{r4, r5}
	switch (src->type) {
    e53c:	781a      	ldrb	r2, [r3, #0]
{
    e53e:	4608      	mov	r0, r1
	switch (src->type) {
    e540:	2a01      	cmp	r2, #1
    e542:	d013      	beq.n	e56c <uuid_to_uuid128+0x34>
    e544:	2a02      	cmp	r2, #2
    e546:	d026      	beq.n	e596 <uuid_to_uuid128+0x5e>
    e548:	b972      	cbnz	r2, e568 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    e54a:	4a15      	ldr	r2, [pc, #84]	; (e5a0 <uuid_to_uuid128+0x68>)
    e54c:	f102 0410 	add.w	r4, r2, #16
    e550:	f852 5b04 	ldr.w	r5, [r2], #4
    e554:	42a2      	cmp	r2, r4
    e556:	f841 5b04 	str.w	r5, [r1], #4
    e55a:	d1f9      	bne.n	e550 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    e55c:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    e55e:	7812      	ldrb	r2, [r2, #0]
    e560:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    e562:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    e564:	0a1b      	lsrs	r3, r3, #8
    e566:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    e568:	bc30      	pop	{r4, r5}
    e56a:	4770      	bx	lr
		*dst = uuid128_base;
    e56c:	4a0c      	ldr	r2, [pc, #48]	; (e5a0 <uuid_to_uuid128+0x68>)
    e56e:	f102 0410 	add.w	r4, r2, #16
    e572:	f852 5b04 	ldr.w	r5, [r2], #4
    e576:	42a2      	cmp	r2, r4
    e578:	f841 5b04 	str.w	r5, [r1], #4
    e57c:	d1f9      	bne.n	e572 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    e57e:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    e580:	7812      	ldrb	r2, [r2, #0]
    e582:	700a      	strb	r2, [r1, #0]
    e584:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    e588:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    e58a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e58c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    e58e:	0a1b      	lsrs	r3, r3, #8
    e590:	7382      	strb	r2, [r0, #14]
    e592:	7403      	strb	r3, [r0, #16]
}
    e594:	e7e8      	b.n	e568 <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    e596:	2211      	movs	r2, #17
}
    e598:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    e59a:	4619      	mov	r1, r3
    e59c:	f00d baaa 	b.w	1baf4 <memcpy>
    e5a0:	00020fc1 	.word	0x00020fc1

0000e5a4 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e5a4:	2801      	cmp	r0, #1
{
    e5a6:	b570      	push	{r4, r5, r6, lr}
    e5a8:	4605      	mov	r5, r0
    e5aa:	4616      	mov	r6, r2
    e5ac:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    e5ae:	d010      	beq.n	e5d2 <bt_buf_get_rx+0x2e>
    e5b0:	2803      	cmp	r0, #3
    e5b2:	d00a      	beq.n	e5ca <bt_buf_get_rx+0x26>
    e5b4:	2805      	cmp	r0, #5
    e5b6:	d008      	beq.n	e5ca <bt_buf_get_rx+0x26>
    e5b8:	490c      	ldr	r1, [pc, #48]	; (e5ec <bt_buf_get_rx+0x48>)
    e5ba:	480d      	ldr	r0, [pc, #52]	; (e5f0 <bt_buf_get_rx+0x4c>)
    e5bc:	2233      	movs	r2, #51	; 0x33
    e5be:	f00c f855 	bl	1a66c <printk>
    e5c2:	2133      	movs	r1, #51	; 0x33
    e5c4:	4809      	ldr	r0, [pc, #36]	; (e5ec <bt_buf_get_rx+0x48>)
    e5c6:	f00c faf7 	bl	1abb8 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    e5ca:	4632      	mov	r2, r6
    e5cc:	4623      	mov	r3, r4
    e5ce:	4809      	ldr	r0, [pc, #36]	; (e5f4 <bt_buf_get_rx+0x50>)
    e5d0:	e000      	b.n	e5d4 <bt_buf_get_rx+0x30>
    e5d2:	4809      	ldr	r0, [pc, #36]	; (e5f8 <bt_buf_get_rx+0x54>)
    e5d4:	f00e fd9e 	bl	1d114 <net_buf_alloc_fixed>
    e5d8:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    e5da:	b12c      	cbz	r4, e5e8 <bt_buf_get_rx+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
    e5dc:	2101      	movs	r1, #1
    e5de:	f104 0008 	add.w	r0, r4, #8
    e5e2:	f006 ff7b 	bl	154dc <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e5e6:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    e5e8:	4620      	mov	r0, r4
    e5ea:	bd70      	pop	{r4, r5, r6, pc}
    e5ec:	00020fd2 	.word	0x00020fd2
    e5f0:	0001fbb7 	.word	0x0001fbb7
    e5f4:	200086c0 	.word	0x200086c0
    e5f8:	2000879c 	.word	0x2000879c

0000e5fc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    e5fc:	4602      	mov	r2, r0
    e5fe:	460b      	mov	r3, r1
    e600:	b570      	push	{r4, r5, r6, lr}
    e602:	f04f 0120 	mov.w	r1, #32
    e606:	f3ef 8511 	mrs	r5, BASEPRI
    e60a:	f381 8811 	msr	BASEPRI, r1
    e60e:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    e612:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    e614:	490b      	ldr	r1, [pc, #44]	; (e644 <bt_buf_get_cmd_complete+0x48>)
    e616:	f8d1 40f8 	ldr.w	r4, [r1, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    e61a:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
	__asm__ volatile(
    e61e:	f385 8811 	msr	BASEPRI, r5
    e622:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    e626:	b924      	cbnz	r4, e632 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    e628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e62c:	2001      	movs	r0, #1
    e62e:	f7ff bfb9 	b.w	e5a4 <bt_buf_get_rx>
    e632:	2101      	movs	r1, #1
		buf->len = 0U;
    e634:	81a0      	strh	r0, [r4, #12]
    e636:	7521      	strb	r1, [r4, #20]
    e638:	f104 0008 	add.w	r0, r4, #8
    e63c:	f006 ff4e 	bl	154dc <net_buf_simple_reserve>
}
    e640:	4620      	mov	r0, r4
    e642:	bd70      	pop	{r4, r5, r6, pc}
    e644:	20008000 	.word	0x20008000

0000e648 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    e648:	b570      	push	{r4, r5, r6, lr}
    e64a:	4604      	mov	r4, r0
	switch (evt) {
    e64c:	2c0f      	cmp	r4, #15
{
    e64e:	460d      	mov	r5, r1
    e650:	4610      	mov	r0, r2
    e652:	4619      	mov	r1, r3
	switch (evt) {
    e654:	d805      	bhi.n	e662 <bt_buf_get_evt+0x1a>
    e656:	2c0d      	cmp	r4, #13
    e658:	d912      	bls.n	e680 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    e65a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    e65e:	f7ff bfcd 	b.w	e5fc <bt_buf_get_cmd_complete>
	switch (evt) {
    e662:	2c13      	cmp	r4, #19
    e664:	d10c      	bne.n	e680 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    e666:	480b      	ldr	r0, [pc, #44]	; (e694 <bt_buf_get_evt+0x4c>)
    e668:	f00e fd54 	bl	1d114 <net_buf_alloc_fixed>
			if (buf) {
    e66c:	4604      	mov	r4, r0
    e66e:	b128      	cbz	r0, e67c <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    e670:	2101      	movs	r1, #1
    e672:	3008      	adds	r0, #8
    e674:	f006 ff32 	bl	154dc <net_buf_simple_reserve>
    e678:	2301      	movs	r3, #1
    e67a:	7523      	strb	r3, [r4, #20]
}
    e67c:	4620      	mov	r0, r4
    e67e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    e680:	4602      	mov	r2, r0
    e682:	460b      	mov	r3, r1
		if (discardable) {
    e684:	b10d      	cbz	r5, e68a <bt_buf_get_evt+0x42>
    e686:	4804      	ldr	r0, [pc, #16]	; (e698 <bt_buf_get_evt+0x50>)
    e688:	e7ee      	b.n	e668 <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e68a:	2001      	movs	r0, #1
}
    e68c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    e690:	f7ff bf88 	b.w	e5a4 <bt_buf_get_rx>
    e694:	200087c8 	.word	0x200087c8
    e698:	20008718 	.word	0x20008718

0000e69c <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    e69c:	6883      	ldr	r3, [r0, #8]
    e69e:	2157      	movs	r1, #87	; 0x57
    e6a0:	781a      	ldrb	r2, [r3, #0]
    e6a2:	4801      	ldr	r0, [pc, #4]	; (e6a8 <hci_data_buf_overflow+0xc>)
    e6a4:	f00b bfe2 	b.w	1a66c <printk>
    e6a8:	00021008 	.word	0x00021008

0000e6ac <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    e6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e6ae:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    e6b0:	2500      	movs	r5, #0
    e6b2:	4f09      	ldr	r7, [pc, #36]	; (e6d8 <id_find+0x2c>)
    e6b4:	79fb      	ldrb	r3, [r7, #7]
    e6b6:	b2ec      	uxtb	r4, r5
    e6b8:	42a3      	cmp	r3, r4
    e6ba:	d802      	bhi.n	e6c2 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    e6bc:	f06f 0401 	mvn.w	r4, #1
    e6c0:	e008      	b.n	e6d4 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    e6c2:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    e6c6:	4630      	mov	r0, r6
    e6c8:	4439      	add	r1, r7
    e6ca:	f00d fb11 	bl	1bcf0 <bt_addr_le_cmp>
    e6ce:	3501      	adds	r5, #1
    e6d0:	2800      	cmp	r0, #0
    e6d2:	d1ef      	bne.n	e6b4 <id_find+0x8>
}
    e6d4:	4620      	mov	r0, r4
    e6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e6d8:	20008000 	.word	0x20008000

0000e6dc <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e6dc:	6843      	ldr	r3, [r0, #4]
{
    e6de:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e6e0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    e6e2:	0558      	lsls	r0, r3, #21
    e6e4:	d502      	bpl.n	e6ec <valid_adv_param+0x10>
		return false;
    e6e6:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    e6e8:	b003      	add	sp, #12
    e6ea:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e6ec:	6922      	ldr	r2, [r4, #16]
    e6ee:	b10a      	cbz	r2, e6f4 <valid_adv_param+0x18>
    e6f0:	07d9      	lsls	r1, r3, #31
    e6f2:	d5f8      	bpl.n	e6e6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    e6f4:	4d1a      	ldr	r5, [pc, #104]	; (e760 <valid_adv_param+0x84>)
    e6f6:	7820      	ldrb	r0, [r4, #0]
    e6f8:	79eb      	ldrb	r3, [r5, #7]
    e6fa:	4283      	cmp	r3, r0
    e6fc:	d9f3      	bls.n	e6e6 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    e6fe:	2300      	movs	r3, #0
    e700:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    e704:	4669      	mov	r1, sp
    e706:	4428      	add	r0, r5
    e708:	9300      	str	r3, [sp, #0]
    e70a:	f8cd 3003 	str.w	r3, [sp, #3]
    e70e:	f00d faef 	bl	1bcf0 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    e712:	2800      	cmp	r0, #0
    e714:	d0e7      	beq.n	e6e6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    e716:	6860      	ldr	r0, [r4, #4]
    e718:	07c2      	lsls	r2, r0, #31
    e71a:	d406      	bmi.n	e72a <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    e71c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    e720:	2b08      	cmp	r3, #8
    e722:	d802      	bhi.n	e72a <valid_adv_param+0x4e>
    e724:	68a3      	ldr	r3, [r4, #8]
    e726:	2b9f      	cmp	r3, #159	; 0x9f
    e728:	d9dd      	bls.n	e6e6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    e72a:	f010 0f30 	tst.w	r0, #48	; 0x30
    e72e:	d002      	beq.n	e736 <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    e730:	6923      	ldr	r3, [r4, #16]
    e732:	2b00      	cmp	r3, #0
    e734:	d0d7      	beq.n	e6e6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    e736:	06c3      	lsls	r3, r0, #27
    e738:	d401      	bmi.n	e73e <valid_adv_param+0x62>
    e73a:	6923      	ldr	r3, [r4, #16]
    e73c:	b943      	cbnz	r3, e750 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    e73e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    e742:	429a      	cmp	r2, r3
    e744:	d8cf      	bhi.n	e6e6 <valid_adv_param+0xa>
    e746:	2a1f      	cmp	r2, #31
    e748:	d9cd      	bls.n	e6e6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    e74a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    e74e:	d8ca      	bhi.n	e6e6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    e750:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    e754:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    e758:	bf18      	it	ne
    e75a:	2001      	movne	r0, #1
    e75c:	e7c4      	b.n	e6e8 <valid_adv_param+0xc>
    e75e:	bf00      	nop
    e760:	20008000 	.word	0x20008000

0000e764 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e764:	6883      	ldr	r3, [r0, #8]
{
    e766:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e768:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    e76a:	4620      	mov	r0, r4
    e76c:	f002 fd98 	bl	112a0 <bt_conn_lookup_handle>
	if (!conn) {
    e770:	b930      	cbnz	r0, e780 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e772:	4622      	mov	r2, r4
}
    e774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e778:	2145      	movs	r1, #69	; 0x45
    e77a:	4803      	ldr	r0, [pc, #12]	; (e788 <le_data_len_change+0x24>)
    e77c:	f00b bf76 	b.w	1a66c <printk>
}
    e780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    e784:	f002 bd68 	b.w	11258 <bt_conn_unref>
    e788:	00021035 	.word	0x00021035

0000e78c <hci_disconn_complete_prio>:
{
    e78c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    e78e:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    e790:	781a      	ldrb	r2, [r3, #0]
    e792:	b9aa      	cbnz	r2, e7c0 <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    e794:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    e798:	4628      	mov	r0, r5
    e79a:	f002 fd81 	bl	112a0 <bt_conn_lookup_handle>
	if (!conn) {
    e79e:	4604      	mov	r4, r0
    e7a0:	b930      	cbnz	r0, e7b0 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    e7a2:	462a      	mov	r2, r5
}
    e7a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    e7a8:	2145      	movs	r1, #69	; 0x45
    e7aa:	4806      	ldr	r0, [pc, #24]	; (e7c4 <hci_disconn_complete_prio+0x38>)
    e7ac:	f00b bf5e 	b.w	1a66c <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    e7b0:	2101      	movs	r1, #1
    e7b2:	f002 fd7d 	bl	112b0 <bt_conn_set_state>
	bt_conn_unref(conn);
    e7b6:	4620      	mov	r0, r4
}
    e7b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    e7bc:	f002 bd4c 	b.w	11258 <bt_conn_unref>
}
    e7c0:	bd38      	pop	{r3, r4, r5, pc}
    e7c2:	bf00      	nop
    e7c4:	0002105e 	.word	0x0002105e

0000e7c8 <hci_hardware_error>:
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    e7c8:	2101      	movs	r1, #1
{
    e7ca:	b508      	push	{r3, lr}
    e7cc:	3008      	adds	r0, #8
    e7ce:	f006 ffcf 	bl	15770 <net_buf_simple_pull_mem>
}
    e7d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    e7d6:	7802      	ldrb	r2, [r0, #0]
    e7d8:	2145      	movs	r1, #69	; 0x45
    e7da:	4801      	ldr	r0, [pc, #4]	; (e7e0 <hci_hardware_error+0x18>)
    e7dc:	f00b bf46 	b.w	1a66c <printk>
    e7e0:	00021089 	.word	0x00021089

0000e7e4 <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    e7e4:	8981      	ldrh	r1, [r0, #12]
{
    e7e6:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    e7e8:	6880      	ldr	r0, [r0, #8]
    e7ea:	f7ff fd63 	bl	e2b4 <bt_hex_real>
}
    e7ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    e7f2:	4602      	mov	r2, r0
    e7f4:	2157      	movs	r1, #87	; 0x57
    e7f6:	4801      	ldr	r0, [pc, #4]	; (e7fc <hci_vendor_event+0x18>)
    e7f8:	f00b bf38 	b.w	1a66c <printk>
    e7fc:	000210b0 	.word	0x000210b0

0000e800 <le_conn_update_complete>:
{
    e800:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    e802:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    e804:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    e808:	4630      	mov	r0, r6
    e80a:	f002 fd49 	bl	112a0 <bt_conn_lookup_handle>
	if (!conn) {
    e80e:	4604      	mov	r4, r0
    e810:	b938      	cbnz	r0, e822 <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e812:	4632      	mov	r2, r6
    e814:	2145      	movs	r1, #69	; 0x45
    e816:	4821      	ldr	r0, [pc, #132]	; (e89c <le_conn_update_complete+0x9c>)
}
    e818:	b002      	add	sp, #8
    e81a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    e81e:	f00b bf25 	b.w	1a66c <printk>
	if (!evt->status) {
    e822:	782b      	ldrb	r3, [r5, #0]
    e824:	b9cb      	cbnz	r3, e85a <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    e826:	792a      	ldrb	r2, [r5, #4]
    e828:	78eb      	ldrb	r3, [r5, #3]
    e82a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e82e:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    e832:	79aa      	ldrb	r2, [r5, #6]
    e834:	796b      	ldrb	r3, [r5, #5]
    e836:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e83a:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    e83e:	79eb      	ldrb	r3, [r5, #7]
    e840:	7a2a      	ldrb	r2, [r5, #8]
    e842:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e846:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    e84a:	f002 fb47 	bl	10edc <notify_le_param_updated>
	bt_conn_unref(conn);
    e84e:	4620      	mov	r0, r4
}
    e850:	b002      	add	sp, #8
    e852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    e856:	f002 bcff 	b.w	11258 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    e85a:	2b1a      	cmp	r3, #26
    e85c:	d1f7      	bne.n	e84e <le_conn_update_complete+0x4e>
    e85e:	78c3      	ldrb	r3, [r0, #3]
    e860:	2b01      	cmp	r3, #1
    e862:	d1f4      	bne.n	e84e <le_conn_update_complete+0x4e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    e864:	f44f 6180 	mov.w	r1, #1024	; 0x400
    e868:	3004      	adds	r0, #4
    e86a:	f00d fa36 	bl	1bcda <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    e86e:	0543      	lsls	r3, r0, #21
    e870:	d4ed      	bmi.n	e84e <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
    e872:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    e876:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    e878:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    e87c:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
		bt_l2cap_update_conn_param(conn, &param);
    e880:	4620      	mov	r0, r4
		param.interval_max = conn->le.interval_max;
    e882:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    e886:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    e88a:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
    e88e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    e892:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    e896:	f003 fb09 	bl	11eac <bt_l2cap_update_conn_param>
    e89a:	e7d8      	b.n	e84e <le_conn_update_complete+0x4e>
    e89c:	00021035 	.word	0x00021035

0000e8a0 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    e8a0:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    e8a2:	4c0c      	ldr	r4, [pc, #48]	; (e8d4 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    e8a4:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    e8a6:	2205      	movs	r2, #5
    e8a8:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    e8ac:	f002 fe36 	bl	1151c <bt_conn_lookup_state_le>
		if (!conn) {
    e8b0:	b970      	cbnz	r0, e8d0 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    e8b2:	4b09      	ldr	r3, [pc, #36]	; (e8d8 <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    e8b4:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    e8b6:	6818      	ldr	r0, [r3, #0]
    e8b8:	889a      	ldrh	r2, [r3, #4]
    e8ba:	799b      	ldrb	r3, [r3, #6]
    e8bc:	9000      	str	r0, [sp, #0]
    e8be:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    e8c2:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    e8c6:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    e8c8:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    e8cc:	f002 fe26 	bl	1151c <bt_conn_lookup_state_le>
}
    e8d0:	b002      	add	sp, #8
    e8d2:	bd10      	pop	{r4, pc}
    e8d4:	20008000 	.word	0x20008000
    e8d8:	0001e5e0 	.word	0x0001e5e0

0000e8dc <handle_event>:
{
    e8dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e8de:	4605      	mov	r5, r0
    e8e0:	4614      	mov	r4, r2
    e8e2:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    e8e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    e8e8:	7822      	ldrb	r2, [r4, #0]
    e8ea:	42aa      	cmp	r2, r5
    e8ec:	d010      	beq.n	e910 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    e8ee:	3408      	adds	r4, #8
    e8f0:	429c      	cmp	r4, r3
    e8f2:	d1f9      	bne.n	e8e8 <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    e8f4:	8984      	ldrh	r4, [r0, #12]
    e8f6:	6880      	ldr	r0, [r0, #8]
    e8f8:	4621      	mov	r1, r4
    e8fa:	f7ff fcdb 	bl	e2b4 <bt_hex_real>
    e8fe:	4623      	mov	r3, r4
    e900:	9000      	str	r0, [sp, #0]
    e902:	462a      	mov	r2, r5
    e904:	2157      	movs	r1, #87	; 0x57
    e906:	480b      	ldr	r0, [pc, #44]	; (e934 <handle_event+0x58>)
    e908:	f00b feb0 	bl	1a66c <printk>
}
    e90c:	b003      	add	sp, #12
    e90e:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    e910:	8982      	ldrh	r2, [r0, #12]
    e912:	7863      	ldrb	r3, [r4, #1]
    e914:	4293      	cmp	r3, r2
    e916:	d907      	bls.n	e928 <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    e918:	462b      	mov	r3, r5
    e91a:	2145      	movs	r1, #69	; 0x45
    e91c:	4806      	ldr	r0, [pc, #24]	; (e938 <handle_event+0x5c>)
}
    e91e:	b003      	add	sp, #12
    e920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    e924:	f00b bea2 	b.w	1a66c <printk>
		handler->handler(buf);
    e928:	6863      	ldr	r3, [r4, #4]
}
    e92a:	b003      	add	sp, #12
    e92c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    e930:	4718      	bx	r3
    e932:	bf00      	nop
    e934:	00021100 	.word	0x00021100
    e938:	000210d9 	.word	0x000210d9

0000e93c <hci_le_meta_event>:
{
    e93c:	b510      	push	{r4, lr}
    e93e:	2101      	movs	r1, #1
    e940:	4604      	mov	r4, r0
    e942:	3008      	adds	r0, #8
    e944:	f006 ff14 	bl	15770 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    e948:	4621      	mov	r1, r4
}
    e94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    e94e:	2308      	movs	r3, #8
    e950:	4a01      	ldr	r2, [pc, #4]	; (e958 <hci_le_meta_event+0x1c>)
    e952:	7800      	ldrb	r0, [r0, #0]
    e954:	f7ff bfc2 	b.w	e8dc <handle_event>
    e958:	0001e9f0 	.word	0x0001e9f0

0000e95c <id_create.constprop.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    e95c:	b530      	push	{r4, r5, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e95e:	4d18      	ldr	r5, [pc, #96]	; (e9c0 <id_create.constprop.0+0x64>)
    e960:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    e964:	460c      	mov	r4, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    e966:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e968:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    e96a:	b1b1      	cbz	r1, e99a <id_create.constprop.0+0x3e>
    e96c:	2300      	movs	r3, #0
    e96e:	4620      	mov	r0, r4
    e970:	a902      	add	r1, sp, #8
    e972:	9302      	str	r3, [sp, #8]
    e974:	f8cd 300b 	str.w	r3, [sp, #11]
    e978:	f00d f9ba 	bl	1bcf0 <bt_addr_le_cmp>
    e97c:	b168      	cbz	r0, e99a <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    e97e:	4621      	mov	r1, r4
    e980:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    e982:	f00d f9a7 	bl	1bcd4 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e986:	480f      	ldr	r0, [pc, #60]	; (e9c4 <id_create.constprop.0+0x68>)
    e988:	f00d f9a1 	bl	1bcce <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    e98c:	0783      	lsls	r3, r0, #30
    e98e:	d515      	bpl.n	e9bc <id_create.constprop.0+0x60>
}
    e990:	b005      	add	sp, #20
    e992:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		bt_settings_save_id();
    e996:	f7ff bd7f 	b.w	e498 <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    e99a:	4668      	mov	r0, sp
    e99c:	f00d f968 	bl	1bc70 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    e9a0:	4668      	mov	r0, sp
    e9a2:	f7ff fe83 	bl	e6ac <id_find>
    e9a6:	2800      	cmp	r0, #0
    e9a8:	daf7      	bge.n	e99a <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    e9aa:	4669      	mov	r1, sp
    e9ac:	4628      	mov	r0, r5
    e9ae:	f00d f991 	bl	1bcd4 <bt_addr_le_copy>
		if (addr) {
    e9b2:	2c00      	cmp	r4, #0
    e9b4:	d0e7      	beq.n	e986 <id_create.constprop.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    e9b6:	4629      	mov	r1, r5
    e9b8:	4620      	mov	r0, r4
    e9ba:	e7e2      	b.n	e982 <id_create.constprop.0+0x26>
}
    e9bc:	b005      	add	sp, #20
    e9be:	bd30      	pop	{r4, r5, pc}
    e9c0:	20008000 	.word	0x20008000
    e9c4:	20008094 	.word	0x20008094

0000e9c8 <hci_rx_thread>:
{
    e9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    e9cc:	4f40      	ldr	r7, [pc, #256]	; (ead0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    e9ce:	f8df 8104 	ldr.w	r8, [pc, #260]	; ead4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    e9d2:	4e41      	ldr	r6, [pc, #260]	; (ead8 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    e9d4:	f04f 32ff 	mov.w	r2, #4294967295
    e9d8:	f04f 33ff 	mov.w	r3, #4294967295
    e9dc:	4638      	mov	r0, r7
    e9de:	f006 fd4d 	bl	1547c <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    e9e2:	7d02      	ldrb	r2, [r0, #20]
    e9e4:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    e9e6:	2a01      	cmp	r2, #1
    e9e8:	d041      	beq.n	ea6e <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe>
    e9ea:	2a03      	cmp	r2, #3
    e9ec:	d16c      	bne.n	eac8 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x68>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    e9ee:	8983      	ldrh	r3, [r0, #12]
    e9f0:	2b03      	cmp	r3, #3
    e9f2:	d80b      	bhi.n	ea0c <hci_rx_thread+0x44>
    e9f4:	f240 42ac 	movw	r2, #1196	; 0x4ac
    e9f8:	4631      	mov	r1, r6
    e9fa:	4838      	ldr	r0, [pc, #224]	; (eadc <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7c>)
    e9fc:	f00b fe36 	bl	1a66c <printk>
    ea00:	4040      	eors	r0, r0
    ea02:	f380 8811 	msr	BASEPRI, r0
    ea06:	f04f 0003 	mov.w	r0, #3
    ea0a:	df02      	svc	2
    ea0c:	2104      	movs	r1, #4
    ea0e:	f104 0008 	add.w	r0, r4, #8
    ea12:	f006 fead 	bl	15770 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ea16:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    ea18:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    ea1a:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    ea1e:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    ea20:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    ea22:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    ea26:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    ea28:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    ea2a:	d007      	beq.n	ea3c <hci_rx_thread+0x74>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    ea2c:	2145      	movs	r1, #69	; 0x45
    ea2e:	482c      	ldr	r0, [pc, #176]	; (eae0 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x80>)
    ea30:	f00b fe1c 	bl	1a66c <printk>
			net_buf_unref(buf);
    ea34:	4620      	mov	r0, r4
    ea36:	f006 fda3 	bl	15580 <net_buf_unref>
			break;
    ea3a:	e015      	b.n	ea68 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    ea3c:	f002 fc30 	bl	112a0 <bt_conn_lookup_handle>
	if (!conn) {
    ea40:	4605      	mov	r5, r0
    ea42:	b928      	cbnz	r0, ea50 <hci_rx_thread+0x88>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    ea44:	2145      	movs	r1, #69	; 0x45
    ea46:	8ae2      	ldrh	r2, [r4, #22]
    ea48:	4826      	ldr	r0, [pc, #152]	; (eae4 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    ea4a:	f00b fe0f 	bl	1a66c <printk>
    ea4e:	e7f1      	b.n	ea34 <hci_rx_thread+0x6c>
	acl(buf)->index = bt_conn_index(conn);
    ea50:	f003 f85a 	bl	11b08 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    ea54:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    ea56:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    ea58:	ea4f 3219 	mov.w	r2, r9, lsr #12
    ea5c:	4628      	mov	r0, r5
    ea5e:	f002 fad5 	bl	1100c <bt_conn_recv>
	bt_conn_unref(conn);
    ea62:	4628      	mov	r0, r5
    ea64:	f002 fbf8 	bl	11258 <bt_conn_unref>
	z_impl_k_yield();
    ea68:	f00a fae6 	bl	19038 <z_impl_k_yield>
	while (1) {
    ea6c:	e7b2      	b.n	e9d4 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    ea6e:	8983      	ldrh	r3, [r0, #12]
    ea70:	2b01      	cmp	r3, #1
    ea72:	d80b      	bhi.n	ea8c <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c>
    ea74:	f241 32fb 	movw	r2, #5115	; 0x13fb
    ea78:	4631      	mov	r1, r6
    ea7a:	4818      	ldr	r0, [pc, #96]	; (eadc <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7c>)
    ea7c:	f00b fdf6 	bl	1a66c <printk>
    ea80:	4040      	eors	r0, r0
    ea82:	f380 8811 	msr	BASEPRI, r0
    ea86:	f04f 0003 	mov.w	r0, #3
    ea8a:	df02      	svc	2
    ea8c:	2102      	movs	r1, #2
    ea8e:	f104 0008 	add.w	r0, r4, #8
    ea92:	f006 fe6d 	bl	15770 <net_buf_simple_pull_mem>
    ea96:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    ea98:	7800      	ldrb	r0, [r0, #0]
    ea9a:	f00d f8f7 	bl	1bc8c <bt_hci_evt_get_flags>
    ea9e:	0783      	lsls	r3, r0, #30
    eaa0:	d40b      	bmi.n	eaba <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5a>
    eaa2:	f241 32ff 	movw	r2, #5119	; 0x13ff
    eaa6:	4631      	mov	r1, r6
    eaa8:	480c      	ldr	r0, [pc, #48]	; (eadc <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7c>)
    eaaa:	f00b fddf 	bl	1a66c <printk>
    eaae:	4040      	eors	r0, r0
    eab0:	f380 8811 	msr	BASEPRI, r0
    eab4:	f04f 0003 	mov.w	r0, #3
    eab8:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    eaba:	2304      	movs	r3, #4
    eabc:	4642      	mov	r2, r8
    eabe:	4621      	mov	r1, r4
    eac0:	7828      	ldrb	r0, [r5, #0]
    eac2:	f7ff ff0b 	bl	e8dc <handle_event>
	net_buf_unref(buf);
    eac6:	e7b5      	b.n	ea34 <hci_rx_thread+0x6c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    eac8:	2145      	movs	r1, #69	; 0x45
    eaca:	4807      	ldr	r0, [pc, #28]	; (eae8 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x88>)
    eacc:	e7bd      	b.n	ea4a <hci_rx_thread+0x82>
    eace:	bf00      	nop
    ead0:	200080fc 	.word	0x200080fc
    ead4:	0001ea40 	.word	0x0001ea40
    ead8:	00021127 	.word	0x00021127
    eadc:	0001fbb7 	.word	0x0001fbb7
    eae0:	0002115b 	.word	0x0002115b
    eae4:	00021184 	.word	0x00021184
    eae8:	000211ab 	.word	0x000211ab

0000eaec <hci_cmd_done>:
{
    eaec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    eaf0:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    eaf2:	7990      	ldrb	r0, [r2, #6]
{
    eaf4:	460f      	mov	r7, r1
    eaf6:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    eaf8:	f006 fbc2 	bl	15280 <net_buf_pool_get>
    eafc:	4d2a      	ldr	r5, [pc, #168]	; (eba8 <hci_cmd_done+0xbc>)
    eafe:	4285      	cmp	r5, r0
    eb00:	d00e      	beq.n	eb20 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    eb02:	79a4      	ldrb	r4, [r4, #6]
    eb04:	4620      	mov	r0, r4
    eb06:	f006 fbbb 	bl	15280 <net_buf_pool_get>
    eb0a:	4623      	mov	r3, r4
    eb0c:	e9cd 0500 	strd	r0, r5, [sp]
    eb10:	4632      	mov	r2, r6
    eb12:	2157      	movs	r1, #87	; 0x57
    eb14:	4825      	ldr	r0, [pc, #148]	; (ebac <hci_cmd_done+0xc0>)
    eb16:	f00b fda9 	bl	1a66c <printk>
}
    eb1a:	b002      	add	sp, #8
    eb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    eb20:	4620      	mov	r0, r4
    eb22:	f006 fbb5 	bl	15290 <net_buf_id>
    eb26:	f04f 080c 	mov.w	r8, #12
    eb2a:	4d21      	ldr	r5, [pc, #132]	; (ebb0 <hci_cmd_done+0xc4>)
    eb2c:	fb08 5000 	mla	r0, r8, r0, r5
    eb30:	8843      	ldrh	r3, [r0, #2]
    eb32:	42b3      	cmp	r3, r6
    eb34:	d00a      	beq.n	eb4c <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    eb36:	4620      	mov	r0, r4
    eb38:	f006 fbaa 	bl	15290 <net_buf_id>
    eb3c:	fb08 5000 	mla	r0, r8, r0, r5
    eb40:	4632      	mov	r2, r6
    eb42:	8843      	ldrh	r3, [r0, #2]
    eb44:	2157      	movs	r1, #87	; 0x57
    eb46:	481b      	ldr	r0, [pc, #108]	; (ebb4 <hci_cmd_done+0xc8>)
    eb48:	f00b fd90 	bl	1a66c <printk>
	if (cmd(buf)->state && !status) {
    eb4c:	4620      	mov	r0, r4
    eb4e:	f006 fb9f 	bl	15290 <net_buf_id>
    eb52:	260c      	movs	r6, #12
    eb54:	fb06 5000 	mla	r0, r6, r0, r5
    eb58:	6843      	ldr	r3, [r0, #4]
    eb5a:	b15b      	cbz	r3, eb74 <hci_cmd_done+0x88>
    eb5c:	b957      	cbnz	r7, eb74 <hci_cmd_done+0x88>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    eb5e:	4620      	mov	r0, r4
    eb60:	f006 fb96 	bl	15290 <net_buf_id>
    eb64:	fb06 5000 	mla	r0, r6, r0, r5
    eb68:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    eb6a:	7a1a      	ldrb	r2, [r3, #8]
    eb6c:	e9d3 0100 	ldrd	r0, r1, [r3]
    eb70:	f00d f8cc 	bl	1bd0c <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    eb74:	4620      	mov	r0, r4
    eb76:	f006 fb8b 	bl	15290 <net_buf_id>
    eb7a:	260c      	movs	r6, #12
    eb7c:	fb06 5000 	mla	r0, r6, r0, r5
    eb80:	6883      	ldr	r3, [r0, #8]
    eb82:	2b00      	cmp	r3, #0
    eb84:	d0c9      	beq.n	eb1a <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    eb86:	4620      	mov	r0, r4
    eb88:	f006 fb82 	bl	15290 <net_buf_id>
    eb8c:	4370      	muls	r0, r6
    eb8e:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    eb90:	4620      	mov	r0, r4
    eb92:	f006 fb7d 	bl	15290 <net_buf_id>
    eb96:	fb06 5500 	mla	r5, r6, r0, r5
    eb9a:	68a8      	ldr	r0, [r5, #8]
}
    eb9c:	b002      	add	sp, #8
    eb9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    eba2:	f00a bb8b 	b.w	192bc <z_impl_k_sem_give>
    eba6:	bf00      	nop
    eba8:	20008770 	.word	0x20008770
    ebac:	000211c4 	.word	0x000211c4
    ebb0:	2000ab20 	.word	0x2000ab20
    ebb4:	000211fe 	.word	0x000211fe

0000ebb8 <hci_cmd_status>:
{
    ebb8:	b538      	push	{r3, r4, r5, lr}
    ebba:	2104      	movs	r1, #4
    ebbc:	4604      	mov	r4, r0
    ebbe:	3008      	adds	r0, #8
    ebc0:	f006 fdd6 	bl	15770 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    ebc4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    ebc6:	7801      	ldrb	r1, [r0, #0]
    ebc8:	4622      	mov	r2, r4
    ebca:	8840      	ldrh	r0, [r0, #2]
    ebcc:	f7ff ff8e 	bl	eaec <hci_cmd_done>
	if (ncmd) {
    ebd0:	b125      	cbz	r5, ebdc <hci_cmd_status+0x24>
}
    ebd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ebd6:	4802      	ldr	r0, [pc, #8]	; (ebe0 <hci_cmd_status+0x28>)
    ebd8:	f00a bb70 	b.w	192bc <z_impl_k_sem_give>
    ebdc:	bd38      	pop	{r3, r4, r5, pc}
    ebde:	bf00      	nop
    ebe0:	200080e0 	.word	0x200080e0

0000ebe4 <hci_cmd_complete>:
{
    ebe4:	b538      	push	{r3, r4, r5, lr}
    ebe6:	2103      	movs	r1, #3
    ebe8:	4604      	mov	r4, r0
    ebea:	3008      	adds	r0, #8
    ebec:	f006 fdc0 	bl	15770 <net_buf_simple_pull_mem>
	status = buf->data[0];
    ebf0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    ebf2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    ebf4:	4622      	mov	r2, r4
    ebf6:	7819      	ldrb	r1, [r3, #0]
    ebf8:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    ebfc:	f7ff ff76 	bl	eaec <hci_cmd_done>
	if (ncmd) {
    ec00:	b125      	cbz	r5, ec0c <hci_cmd_complete+0x28>
}
    ec02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ec06:	4802      	ldr	r0, [pc, #8]	; (ec10 <hci_cmd_complete+0x2c>)
    ec08:	f00a bb58 	b.w	192bc <z_impl_k_sem_give>
    ec0c:	bd38      	pop	{r3, r4, r5, pc}
    ec0e:	bf00      	nop
    ec10:	200080e0 	.word	0x200080e0

0000ec14 <hci_num_completed_packets>:
{
    ec14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    ec18:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    ec1a:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    ec1c:	6887      	ldr	r7, [r0, #8]
    ec1e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; ecfc <hci_num_completed_packets+0xe8>
	for (i = 0; i < evt->num_handles; i++) {
    ec22:	783b      	ldrb	r3, [r7, #0]
    ec24:	429d      	cmp	r5, r3
    ec26:	db01      	blt.n	ec2c <hci_num_completed_packets+0x18>
}
    ec28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    ec2c:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    ec30:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    ec34:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    ec38:	4650      	mov	r0, sl
    ec3a:	f002 fb31 	bl	112a0 <bt_conn_lookup_handle>
		if (!conn) {
    ec3e:	4604      	mov	r4, r0
    ec40:	b1d0      	cbz	r0, ec78 <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    ec42:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    ec46:	b37e      	cbz	r6, eca8 <hci_num_completed_packets+0x94>
	__asm__ volatile(
    ec48:	f04f 0320 	mov.w	r3, #32
    ec4c:	f3ef 8211 	mrs	r2, BASEPRI
    ec50:	f383 8811 	msr	BASEPRI, r3
    ec54:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    ec58:	69e3      	ldr	r3, [r4, #28]
    ec5a:	b1a3      	cbz	r3, ec86 <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    ec5c:	3b01      	subs	r3, #1
    ec5e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    ec60:	f382 8811 	msr	BASEPRI, r2
    ec64:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    ec68:	4620      	mov	r0, r4
    ec6a:	f002 f933 	bl	10ed4 <bt_conn_get_pkts>
    ec6e:	3e01      	subs	r6, #1
    ec70:	f00a fb24 	bl	192bc <z_impl_k_sem_give>
    ec74:	b2b6      	uxth	r6, r6
    ec76:	e7e6      	b.n	ec46 <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    ec78:	4652      	mov	r2, sl
    ec7a:	2145      	movs	r1, #69	; 0x45
    ec7c:	4820      	ldr	r0, [pc, #128]	; (ed00 <hci_num_completed_packets+0xec>)
    ec7e:	f00b fcf5 	bl	1a66c <printk>
	for (i = 0; i < evt->num_handles; i++) {
    ec82:	3501      	adds	r5, #1
    ec84:	e7cd      	b.n	ec22 <hci_num_completed_packets+0xe>
	return list->head;
    ec86:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    ec88:	b12b      	cbz	r3, ec96 <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ec8a:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    ec8c:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ec8e:	428b      	cmp	r3, r1
	list->head = node;
    ec90:	6160      	str	r0, [r4, #20]
	list->tail = node;
    ec92:	bf08      	it	eq
    ec94:	61a0      	streq	r0, [r4, #24]
    ec96:	f382 8811 	msr	BASEPRI, r2
    ec9a:	f3bf 8f6f 	isb	sy
			if (!node) {
    ec9e:	b93b      	cbnz	r3, ecb0 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    eca0:	2145      	movs	r1, #69	; 0x45
    eca2:	4818      	ldr	r0, [pc, #96]	; (ed04 <hci_num_completed_packets+0xf0>)
    eca4:	f00b fce2 	bl	1a66c <printk>
		bt_conn_unref(conn);
    eca8:	4620      	mov	r0, r4
    ecaa:	f002 fad5 	bl	11258 <bt_conn_unref>
    ecae:	e7e8      	b.n	ec82 <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    ecb0:	f04f 0220 	mov.w	r2, #32
    ecb4:	f3ef 8111 	mrs	r1, BASEPRI
    ecb8:	f382 8811 	msr	BASEPRI, r2
    ecbc:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    ecc0:	68da      	ldr	r2, [r3, #12]
    ecc2:	61e2      	str	r2, [r4, #28]
	return list->tail;
    ecc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    ecc6:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    ecca:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    ecce:	b98a      	cbnz	r2, ecf4 <hci_num_completed_packets+0xe0>
	list->head = node;
    ecd0:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    ecd4:	f381 8811 	msr	BASEPRI, r1
    ecd8:	f3bf 8f6f 	isb	sy
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    ecdc:	2101      	movs	r1, #1
    ecde:	f104 0030 	add.w	r0, r4, #48	; 0x30
    ece2:	f00c fffa 	bl	1bcda <atomic_or>
    ece6:	07c3      	lsls	r3, r0, #31
    ece8:	d4be      	bmi.n	ec68 <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    ecea:	4651      	mov	r1, sl
    ecec:	4648      	mov	r0, r9
    ecee:	f00f f87a 	bl	1dde6 <k_queue_append>
    ecf2:	e7b9      	b.n	ec68 <hci_num_completed_packets+0x54>
	parent->next = child;
    ecf4:	6013      	str	r3, [r2, #0]
	list->tail = node;
    ecf6:	6263      	str	r3, [r4, #36]	; 0x24
}
    ecf8:	e7ec      	b.n	ecd4 <hci_num_completed_packets+0xc0>
    ecfa:	bf00      	nop
    ecfc:	2000a560 	.word	0x2000a560
    ed00:	00021236 	.word	0x00021236
    ed04:	00021257 	.word	0x00021257

0000ed08 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    ed08:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adv_id_check_data check_data = {
    ed0a:	7803      	ldrb	r3, [r0, #0]
{
    ed0c:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    ed0e:	f88d 3004 	strb.w	r3, [sp, #4]
    ed12:	2300      	movs	r3, #0
	func(&bt_dev.adv, data);
    ed14:	4c24      	ldr	r4, [pc, #144]	; (eda8 <le_adv_start_add_conn+0xa0>)
{
    ed16:	4605      	mov	r5, r0
    ed18:	460f      	mov	r7, r1
	func(&bt_dev.adv, data);
    ed1a:	f104 0018 	add.w	r0, r4, #24
    ed1e:	a901      	add	r1, sp, #4
	struct adv_id_check_data check_data = {
    ed20:	f88d 3005 	strb.w	r3, [sp, #5]
	func(&bt_dev.adv, data);
    ed24:	f00d f803 	bl	1bd2e <adv_id_check_connectable_func>
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
    ed28:	f89d 3005 	ldrb.w	r3, [sp, #5]
    ed2c:	bb93      	cbnz	r3, ed94 <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    ed2e:	462e      	mov	r6, r5
    ed30:	f816 2b09 	ldrb.w	r2, [r6], #9

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    ed34:	a902      	add	r1, sp, #8
    ed36:	4630      	mov	r0, r6
	bt_dev.adv_conn_id = adv->id;
    ed38:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    ed3c:	9302      	str	r3, [sp, #8]
    ed3e:	f8cd 300b 	str.w	r3, [sp, #11]
    ed42:	f00c ffd5 	bl	1bcf0 <bt_addr_le_cmp>
    ed46:	782a      	ldrb	r2, [r5, #0]
    ed48:	4604      	mov	r4, r0
    ed4a:	b9a8      	cbnz	r0, ed78 <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    ed4c:	4b17      	ldr	r3, [pc, #92]	; (edac <le_adv_start_add_conn+0xa4>)
    ed4e:	6818      	ldr	r0, [r3, #0]
    ed50:	8899      	ldrh	r1, [r3, #4]
    ed52:	799b      	ldrb	r3, [r3, #6]
    ed54:	9004      	str	r0, [sp, #16]
    ed56:	f8ad 1014 	strh.w	r1, [sp, #20]
    ed5a:	4610      	mov	r0, r2
    ed5c:	a904      	add	r1, sp, #16
    ed5e:	f88d 3016 	strb.w	r3, [sp, #22]
    ed62:	f002 fa4d 	bl	11200 <bt_conn_add_le>
		if (!conn) {
    ed66:	4605      	mov	r5, r0
    ed68:	b1d0      	cbz	r0, eda0 <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    ed6a:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    ed6c:	f002 faa0 	bl	112b0 <bt_conn_set_state>
	*out_conn = conn;
    ed70:	603d      	str	r5, [r7, #0]
	return 0;
}
    ed72:	4620      	mov	r0, r4
    ed74:	b007      	add	sp, #28
    ed76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    ed78:	4631      	mov	r1, r6
    ed7a:	4610      	mov	r0, r2
    ed7c:	f002 fbb2 	bl	114e4 <bt_conn_exists_le>
    ed80:	4604      	mov	r4, r0
    ed82:	b950      	cbnz	r0, ed9a <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    ed84:	7828      	ldrb	r0, [r5, #0]
    ed86:	4631      	mov	r1, r6
    ed88:	f002 fa3a 	bl	11200 <bt_conn_add_le>
	if (!conn) {
    ed8c:	4605      	mov	r5, r0
    ed8e:	b138      	cbz	r0, eda0 <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    ed90:	2105      	movs	r1, #5
    ed92:	e7eb      	b.n	ed6c <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    ed94:	f06f 0422 	mvn.w	r4, #34	; 0x22
    ed98:	e7eb      	b.n	ed72 <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    ed9a:	f06f 0415 	mvn.w	r4, #21
    ed9e:	e7e8      	b.n	ed72 <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    eda0:	f06f 040b 	mvn.w	r4, #11
    eda4:	e7e5      	b.n	ed72 <le_adv_start_add_conn+0x6a>
    eda6:	bf00      	nop
    eda8:	20008000 	.word	0x20008000
    edac:	0001e5e0 	.word	0x0001e5e0

0000edb0 <bt_hci_cmd_create>:
{
    edb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    edb4:	f04f 32ff 	mov.w	r2, #4294967295
    edb8:	4606      	mov	r6, r0
    edba:	f04f 33ff 	mov.w	r3, #4294967295
    edbe:	481d      	ldr	r0, [pc, #116]	; (ee34 <bt_hci_cmd_create+0x84>)
    edc0:	460f      	mov	r7, r1
    edc2:	f00e f9a7 	bl	1d114 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    edc6:	4604      	mov	r4, r0
    edc8:	b950      	cbnz	r0, ede0 <bt_hci_cmd_create+0x30>
    edca:	491b      	ldr	r1, [pc, #108]	; (ee38 <bt_hci_cmd_create+0x88>)
    edcc:	481b      	ldr	r0, [pc, #108]	; (ee3c <bt_hci_cmd_create+0x8c>)
    edce:	f44f 7281 	mov.w	r2, #258	; 0x102
    edd2:	f00b fc4b 	bl	1a66c <printk>
    edd6:	f44f 7181 	mov.w	r1, #258	; 0x102
    edda:	4817      	ldr	r0, [pc, #92]	; (ee38 <bt_hci_cmd_create+0x88>)
    eddc:	f00b feec 	bl	1abb8 <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    ede0:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    ede4:	f104 0a08 	add.w	sl, r4, #8
    ede8:	2101      	movs	r1, #1
    edea:	4650      	mov	r0, sl
    edec:	f006 fb76 	bl	154dc <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    edf0:	4620      	mov	r0, r4
    edf2:	f884 8014 	strb.w	r8, [r4, #20]
    edf6:	f006 fa4b 	bl	15290 <net_buf_id>
    edfa:	f04f 090c 	mov.w	r9, #12
    edfe:	4d10      	ldr	r5, [pc, #64]	; (ee40 <bt_hci_cmd_create+0x90>)
    ee00:	fb09 5000 	mla	r0, r9, r0, r5
    ee04:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    ee06:	4620      	mov	r0, r4
    ee08:	f006 fa42 	bl	15290 <net_buf_id>
    ee0c:	fb09 5000 	mla	r0, r9, r0, r5
    ee10:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    ee14:	4620      	mov	r0, r4
    ee16:	f006 fa3b 	bl	15290 <net_buf_id>
    ee1a:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    ee1e:	2103      	movs	r1, #3
    ee20:	4650      	mov	r0, sl
    ee22:	f8c5 8004 	str.w	r8, [r5, #4]
    ee26:	f006 fcc1 	bl	157ac <net_buf_simple_add>
	hdr->param_len = param_len;
    ee2a:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    ee2c:	8006      	strh	r6, [r0, #0]
}
    ee2e:	4620      	mov	r0, r4
    ee30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ee34:	20008770 	.word	0x20008770
    ee38:	00021127 	.word	0x00021127
    ee3c:	0001fbb7 	.word	0x0001fbb7
    ee40:	2000ab20 	.word	0x2000ab20

0000ee44 <bt_hci_cmd_send_sync>:
{
    ee44:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee46:	4607      	mov	r7, r0
    ee48:	4615      	mov	r5, r2
	if (!buf) {
    ee4a:	460c      	mov	r4, r1
{
    ee4c:	b087      	sub	sp, #28
	if (!buf) {
    ee4e:	b921      	cbnz	r1, ee5a <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    ee50:	f7ff ffae 	bl	edb0 <bt_hci_cmd_create>
		if (!buf) {
    ee54:	4604      	mov	r4, r0
    ee56:	2800      	cmp	r0, #0
    ee58:	d048      	beq.n	eeec <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    ee5a:	2201      	movs	r2, #1
    ee5c:	2100      	movs	r1, #0
    ee5e:	4668      	mov	r0, sp
    ee60:	f00f f819 	bl	1de96 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    ee64:	4620      	mov	r0, r4
    ee66:	f006 fa13 	bl	15290 <net_buf_id>
    ee6a:	230c      	movs	r3, #12
    ee6c:	4e21      	ldr	r6, [pc, #132]	; (eef4 <bt_hci_cmd_send_sync+0xb0>)
    ee6e:	fb03 6000 	mla	r0, r3, r0, r6
    ee72:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    ee76:	4620      	mov	r0, r4
    ee78:	f006 fbc6 	bl	15608 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    ee7c:	4621      	mov	r1, r4
    ee7e:	481e      	ldr	r0, [pc, #120]	; (eef8 <bt_hci_cmd_send_sync+0xb4>)
    ee80:	f006 fb50 	bl	15524 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    ee84:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    ee88:	2300      	movs	r3, #0
    ee8a:	4668      	mov	r0, sp
    ee8c:	f00a fa52 	bl	19334 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    ee90:	b158      	cbz	r0, eeaa <bt_hci_cmd_send_sync+0x66>
    ee92:	f240 124d 	movw	r2, #333	; 0x14d
    ee96:	4919      	ldr	r1, [pc, #100]	; (eefc <bt_hci_cmd_send_sync+0xb8>)
    ee98:	4819      	ldr	r0, [pc, #100]	; (ef00 <bt_hci_cmd_send_sync+0xbc>)
    ee9a:	f00b fbe7 	bl	1a66c <printk>
    ee9e:	4040      	eors	r0, r0
    eea0:	f380 8811 	msr	BASEPRI, r0
    eea4:	f04f 0003 	mov.w	r0, #3
    eea8:	df02      	svc	2
	status = cmd(buf)->status;
    eeaa:	4620      	mov	r0, r4
    eeac:	f006 f9f0 	bl	15290 <net_buf_id>
    eeb0:	230c      	movs	r3, #12
    eeb2:	4358      	muls	r0, r3
    eeb4:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    eeb6:	b186      	cbz	r6, eeda <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    eeb8:	4633      	mov	r3, r6
    eeba:	463a      	mov	r2, r7
    eebc:	2157      	movs	r1, #87	; 0x57
    eebe:	4811      	ldr	r0, [pc, #68]	; (ef04 <bt_hci_cmd_send_sync+0xc0>)
    eec0:	f00b fbd4 	bl	1a66c <printk>
		net_buf_unref(buf);
    eec4:	4620      	mov	r0, r4
    eec6:	f006 fb5b 	bl	15580 <net_buf_unref>
			return -EIO;
    eeca:	2e09      	cmp	r6, #9
    eecc:	bf0c      	ite	eq
    eece:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    eed2:	f06f 0004 	mvnne.w	r0, #4
}
    eed6:	b007      	add	sp, #28
    eed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    eeda:	b115      	cbz	r5, eee2 <bt_hci_cmd_send_sync+0x9e>
	return 0;
    eedc:	4630      	mov	r0, r6
		*rsp = buf;
    eede:	602c      	str	r4, [r5, #0]
    eee0:	e7f9      	b.n	eed6 <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    eee2:	4620      	mov	r0, r4
    eee4:	f006 fb4c 	bl	15580 <net_buf_unref>
	return 0;
    eee8:	4628      	mov	r0, r5
    eeea:	e7f4      	b.n	eed6 <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    eeec:	f06f 0036 	mvn.w	r0, #54	; 0x36
    eef0:	e7f1      	b.n	eed6 <bt_hci_cmd_send_sync+0x92>
    eef2:	bf00      	nop
    eef4:	2000ab20 	.word	0x2000ab20
    eef8:	20008118 	.word	0x20008118
    eefc:	00021127 	.word	0x00021127
    ef00:	0001fbb7 	.word	0x0001fbb7
    ef04:	00021273 	.word	0x00021273

0000ef08 <hci_le_read_max_data_len>:
{
    ef08:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ef0a:	4606      	mov	r6, r0
    ef0c:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    ef0e:	f242 002f 	movw	r0, #8239	; 0x202f
    ef12:	2100      	movs	r1, #0
    ef14:	aa01      	add	r2, sp, #4
    ef16:	f7ff ff95 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
    ef1a:	4604      	mov	r4, r0
    ef1c:	b130      	cbz	r0, ef2c <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    ef1e:	2145      	movs	r1, #69	; 0x45
    ef20:	4808      	ldr	r0, [pc, #32]	; (ef44 <hci_le_read_max_data_len+0x3c>)
    ef22:	f00b fba3 	bl	1a66c <printk>
}
    ef26:	4620      	mov	r0, r4
    ef28:	b002      	add	sp, #8
    ef2a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    ef2c:	9801      	ldr	r0, [sp, #4]
    ef2e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    ef30:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    ef34:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    ef36:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    ef3a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    ef3c:	f006 fb20 	bl	15580 <net_buf_unref>
	return 0;
    ef40:	e7f1      	b.n	ef26 <hci_le_read_max_data_len+0x1e>
    ef42:	bf00      	nop
    ef44:	00021294 	.word	0x00021294

0000ef48 <set_random_address>:
{
    ef48:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    ef4a:	4e15      	ldr	r6, [pc, #84]	; (efa0 <set_random_address+0x58>)
    ef4c:	2206      	movs	r2, #6
    ef4e:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    ef52:	4605      	mov	r5, r0
    ef54:	f00c fdbd 	bl	1bad2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    ef58:	4604      	mov	r4, r0
    ef5a:	b1e0      	cbz	r0, ef96 <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    ef5c:	2106      	movs	r1, #6
    ef5e:	f242 0005 	movw	r0, #8197	; 0x2005
    ef62:	f7ff ff25 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
    ef66:	4604      	mov	r4, r0
    ef68:	b1b8      	cbz	r0, ef9a <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ef6a:	2206      	movs	r2, #6
    ef6c:	4629      	mov	r1, r5
    ef6e:	3008      	adds	r0, #8
    ef70:	f00e f8fe 	bl	1d170 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    ef74:	4621      	mov	r1, r4
    ef76:	2200      	movs	r2, #0
    ef78:	f242 0005 	movw	r0, #8197	; 0x2005
    ef7c:	f7ff ff62 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
    ef80:	4604      	mov	r4, r0
    ef82:	b940      	cbnz	r0, ef96 <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    ef84:	2206      	movs	r2, #6
    ef86:	4629      	mov	r1, r5
    ef88:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    ef8c:	f00c fdb2 	bl	1baf4 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    ef90:	2301      	movs	r3, #1
    ef92:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    ef96:	4620      	mov	r0, r4
    ef98:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    ef9a:	f06f 0436 	mvn.w	r4, #54	; 0x36
    ef9e:	e7fa      	b.n	ef96 <set_random_address+0x4e>
    efa0:	20008000 	.word	0x20008000

0000efa4 <set_le_scan_enable_legacy>:
{
    efa4:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    efa6:	2102      	movs	r1, #2
{
    efa8:	4604      	mov	r4, r0
    efaa:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    efac:	f242 000c 	movw	r0, #8204	; 0x200c
    efb0:	f7ff fefe 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
    efb4:	4605      	mov	r5, r0
    efb6:	b348      	cbz	r0, f00c <set_le_scan_enable_legacy+0x68>
	return net_buf_simple_add(&buf->b, len);
    efb8:	2102      	movs	r1, #2
    efba:	3008      	adds	r0, #8
    efbc:	f006 fbf6 	bl	157ac <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    efc0:	2c01      	cmp	r4, #1
    efc2:	4603      	mov	r3, r0
    efc4:	d11f      	bne.n	f006 <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    efc6:	4813      	ldr	r0, [pc, #76]	; (f014 <set_le_scan_enable_legacy+0x70>)
    efc8:	f00c fe81 	bl	1bcce <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    efcc:	f3c0 2000 	ubfx	r0, r0, #8, #1
    efd0:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    efd2:	701c      	strb	r4, [r3, #0]
/* Initialize command state instance */
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
    efd4:	4b0f      	ldr	r3, [pc, #60]	; (f014 <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    efd6:	4628      	mov	r0, r5
    efd8:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    efda:	2305      	movs	r3, #5
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    efdc:	f004 0401 	and.w	r4, r4, #1
    efe0:	9302      	str	r3, [sp, #8]
    efe2:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    efe6:	f006 f953 	bl	15290 <net_buf_id>
    efea:	220c      	movs	r2, #12
    efec:	4b0a      	ldr	r3, [pc, #40]	; (f018 <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    efee:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    eff0:	fb02 3300 	mla	r3, r2, r0, r3
    eff4:	aa01      	add	r2, sp, #4
    eff6:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    eff8:	f242 000c 	movw	r0, #8204	; 0x200c
    effc:	2200      	movs	r2, #0
    effe:	f7ff ff21 	bl	ee44 <bt_hci_cmd_send_sync>
}
    f002:	b005      	add	sp, #20
    f004:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    f006:	2200      	movs	r2, #0
    f008:	7042      	strb	r2, [r0, #1]
    f00a:	e7e2      	b.n	efd2 <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    f00c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f010:	e7f7      	b.n	f002 <set_le_scan_enable_legacy+0x5e>
    f012:	bf00      	nop
    f014:	20008094 	.word	0x20008094
    f018:	2000ab20 	.word	0x2000ab20

0000f01c <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f01c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    f020:	4605      	mov	r5, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f022:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    f026:	460e      	mov	r6, r1
    f028:	4691      	mov	r9, r2
    f02a:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    f02c:	d02c      	beq.n	f088 <le_adv_set_random_addr.isra.0+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    f02e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; f110 <le_adv_set_random_addr.isra.0+0xf4>
    f032:	b12a      	cbz	r2, f040 <le_adv_set_random_addr.isra.0+0x24>
    f034:	068c      	lsls	r4, r1, #26
    f036:	d503      	bpl.n	f040 <le_adv_set_random_addr.isra.0+0x24>
    f038:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    f03c:	0658      	lsls	r0, r3, #25
    f03e:	d563      	bpl.n	f108 <le_adv_set_random_addr.isra.0+0xec>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f040:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f044:	f818 3003 	ldrb.w	r3, [r8, r3]
    f048:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    f04c:	2b01      	cmp	r3, #1
    f04e:	d009      	beq.n	f064 <le_adv_set_random_addr.isra.0+0x48>
			*own_addr_type = id_addr->type;
    f050:	ebaa 0505 	sub.w	r5, sl, r5
    f054:	f818 3005 	ldrb.w	r3, [r8, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f058:	f1b9 0f00 	cmp.w	r9, #0
    f05c:	d10f      	bne.n	f07e <le_adv_set_random_addr.isra.0+0x62>
	return 0;
    f05e:	2400      	movs	r4, #0
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f060:	703b      	strb	r3, [r7, #0]
    f062:	e008      	b.n	f076 <le_adv_set_random_addr.isra.0+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    f064:	2007      	movs	r0, #7
    f066:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f06a:	4440      	add	r0, r8
    f06c:	f7ff ff6c 	bl	ef48 <set_random_address>
				if (err) {
    f070:	4604      	mov	r4, r0
    f072:	2800      	cmp	r0, #0
    f074:	d0ec      	beq.n	f050 <le_adv_set_random_addr.isra.0+0x34>
}
    f076:	4620      	mov	r0, r4
    f078:	b002      	add	sp, #8
    f07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    f07e:	06b1      	lsls	r1, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    f080:	bf48      	it	mi
    f082:	f043 0302 	orrmi.w	r3, r3, #2
    f086:	e7ea      	b.n	f05e <le_adv_set_random_addr.isra.0+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    f088:	f011 0604 	ands.w	r6, r1, #4
    f08c:	d014      	beq.n	f0b8 <le_adv_set_random_addr.isra.0+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    f08e:	f8df 8080 	ldr.w	r8, [pc, #128]	; f110 <le_adv_set_random_addr.isra.0+0xf4>
    f092:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    f096:	f818 3003 	ldrb.w	r3, [r8, r3]
    f09a:	00ee      	lsls	r6, r5, #3
    f09c:	2b01      	cmp	r3, #1
    f09e:	d105      	bne.n	f0ac <le_adv_set_random_addr.isra.0+0x90>
				err = set_adv_random_address(adv, &id_addr->a);
    f0a0:	2007      	movs	r0, #7
    f0a2:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    f0a6:	4440      	add	r0, r8
    f0a8:	f7ff ff4e 	bl	ef48 <set_random_address>
			*own_addr_type = id_addr->type;
    f0ac:	1b75      	subs	r5, r6, r5
    f0ae:	f818 3005 	ldrb.w	r3, [r8, r5]
	int err = 0;
    f0b2:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    f0b4:	703b      	strb	r3, [r7, #0]
    f0b6:	e7de      	b.n	f076 <le_adv_set_random_addr.isra.0+0x5a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f0b8:	4816      	ldr	r0, [pc, #88]	; (f114 <le_adv_set_random_addr.isra.0+0xf8>)
    f0ba:	f00c fe08 	bl	1bcce <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    f0be:	0682      	lsls	r2, r0, #26
    f0c0:	d417      	bmi.n	f0f2 <le_adv_set_random_addr.isra.0+0xd6>
			bool scan_enabled = false;
    f0c2:	2500      	movs	r5, #0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    f0c4:	2106      	movs	r1, #6
    f0c6:	4668      	mov	r0, sp
    f0c8:	f001 fe2a 	bl	10d20 <bt_rand>
	if (err) {
    f0cc:	4604      	mov	r4, r0
    f0ce:	b948      	cbnz	r0, f0e4 <le_adv_set_random_addr.isra.0+0xc8>
	BT_ADDR_SET_NRPA(&nrpa);
    f0d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    f0d4:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    f0d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f0da:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    f0de:	f7ff ff33 	bl	ef48 <set_random_address>
    f0e2:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f0e4:	2001      	movs	r0, #1
    f0e6:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    f0e8:	2d00      	cmp	r5, #0
    f0ea:	d0c4      	beq.n	f076 <le_adv_set_random_addr.isra.0+0x5a>
	return set_le_scan_enable_legacy(enable);
    f0ec:	f7ff ff5a 	bl	efa4 <set_le_scan_enable_legacy>
		if (err) {
    f0f0:	e7c1      	b.n	f076 <le_adv_set_random_addr.isra.0+0x5a>
    f0f2:	4808      	ldr	r0, [pc, #32]	; (f114 <le_adv_set_random_addr.isra.0+0xf8>)
    f0f4:	f00c fdeb 	bl	1bcce <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f0f8:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    f0fa:	f3c0 15c0 	ubfx	r5, r0, #7, #1
    f0fe:	d5e0      	bpl.n	f0c2 <le_adv_set_random_addr.isra.0+0xa6>
	return set_le_scan_enable_legacy(enable);
    f100:	4630      	mov	r0, r6
    f102:	f7ff ff4f 	bl	efa4 <set_le_scan_enable_legacy>
    f106:	e7dd      	b.n	f0c4 <le_adv_set_random_addr.isra.0+0xa8>
			return -ENOTSUP;
    f108:	f06f 0422 	mvn.w	r4, #34	; 0x22
    f10c:	e7b3      	b.n	f076 <le_adv_set_random_addr.isra.0+0x5a>
    f10e:	bf00      	nop
    f110:	20008000 	.word	0x20008000
    f114:	20008094 	.word	0x20008094

0000f118 <hci_set_ad>:
{
    f118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f11c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f11e:	2120      	movs	r1, #32
{
    f120:	4682      	mov	sl, r0
    f122:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    f124:	f7ff fe44 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
    f128:	4606      	mov	r6, r0
    f12a:	2800      	cmp	r0, #0
    f12c:	d056      	beq.n	f1dc <hci_set_ad+0xc4>
    f12e:	2120      	movs	r1, #32
    f130:	3008      	adds	r0, #8
    f132:	f006 fb3b 	bl	157ac <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    f136:	2220      	movs	r2, #32
    f138:	4681      	mov	r9, r0
    f13a:	2100      	movs	r1, #0
    f13c:	f00c fd05 	bl	1bb4a <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f140:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	uint8_t set_data_len = 0;
    f144:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    f146:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    f14a:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    f14c:	2300      	movs	r3, #0
    f14e:	f8d4 8000 	ldr.w	r8, [r4]
    f152:	6862      	ldr	r2, [r4, #4]
    f154:	4293      	cmp	r3, r2
    f156:	d30d      	bcc.n	f174 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    f158:	9b00      	ldr	r3, [sp, #0]
    f15a:	3408      	adds	r4, #8
    f15c:	429c      	cmp	r4, r3
    f15e:	d1f5      	bne.n	f14c <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f160:	2200      	movs	r2, #0
    f162:	4631      	mov	r1, r6
    f164:	4650      	mov	r0, sl
	*data_len = set_data_len;
    f166:	f889 5000 	strb.w	r5, [r9]
}
    f16a:	b003      	add	sp, #12
    f16c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    f170:	f7ff be68 	b.w	ee44 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    f174:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    f178:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    f17a:	1881      	adds	r1, r0, r2
    f17c:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    f17e:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    f182:	d914      	bls.n	f1ae <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f184:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    f188:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    f18c:	d101      	bne.n	f192 <hci_set_ad+0x7a>
    f18e:	2a00      	cmp	r2, #0
    f190:	dc0b      	bgt.n	f1aa <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
    f192:	2145      	movs	r1, #69	; 0x45
    f194:	4813      	ldr	r0, [pc, #76]	; (f1e4 <hci_set_ad+0xcc>)
    f196:	f00b fa69 	bl	1a66c <printk>
		net_buf_unref(buf);
    f19a:	4630      	mov	r0, r6
    f19c:	f006 f9f0 	bl	15580 <net_buf_unref>
					return -EINVAL;
    f1a0:	f06f 0015 	mvn.w	r0, #21
}
    f1a4:	b003      	add	sp, #12
    f1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    f1aa:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    f1ae:	b2d7      	uxtb	r7, r2
    f1b0:	1c79      	adds	r1, r7, #1
    f1b2:	f80b 1005 	strb.w	r1, [fp, r5]
    f1b6:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    f1b8:	b2c9      	uxtb	r1, r1
    f1ba:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    f1be:	f8d8 1004 	ldr.w	r1, [r8, #4]
    f1c2:	fa5b f080 	uxtab	r0, fp, r0
    f1c6:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    f1c8:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    f1ca:	f00c fc93 	bl	1baf4 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    f1ce:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    f1d0:	443d      	add	r5, r7
    f1d2:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    f1d4:	3301      	adds	r3, #1
    f1d6:	f108 0808 	add.w	r8, r8, #8
    f1da:	e7ba      	b.n	f152 <hci_set_ad+0x3a>
		return -ENOBUFS;
    f1dc:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f1e0:	e7e0      	b.n	f1a4 <hci_set_ad+0x8c>
    f1e2:	bf00      	nop
    f1e4:	000212b9 	.word	0x000212b9

0000f1e8 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    f1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f1ec:	b087      	sub	sp, #28
    f1ee:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    f1f2:	4606      	mov	r6, r0
    f1f4:	460c      	mov	r4, r1
    f1f6:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    f1f8:	2100      	movs	r1, #0
    f1fa:	2210      	movs	r2, #16
    f1fc:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    f1fe:	461d      	mov	r5, r3
    f200:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    f204:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
    f208:	f00c fc9f 	bl	1bb4a <memset>
	if (use_name) {
    f20c:	f1b8 0f00 	cmp.w	r8, #0
    f210:	d00e      	beq.n	f230 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    f212:	bbb4      	cbnz	r4, f282 <le_adv_update.constprop.0+0x9a>
    f214:	2d00      	cmp	r5, #0
    f216:	d13f      	bne.n	f298 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    f218:	f8df b0b0 	ldr.w	fp, [pc, #176]	; f2cc <le_adv_update.constprop.0+0xe4>
    f21c:	4658      	mov	r0, fp
    f21e:	f00c fc2b 	bl	1ba78 <strlen>
    f222:	2309      	movs	r3, #9
    f224:	f88d 0001 	strb.w	r0, [sp, #1]
    f228:	f88d 3000 	strb.w	r3, [sp]
    f22c:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    f230:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    f234:	f1b8 0f00 	cmp.w	r8, #0
    f238:	d030      	beq.n	f29c <le_adv_update.constprop.0+0xb4>
    f23a:	f1ba 0f00 	cmp.w	sl, #0
    f23e:	d12d      	bne.n	f29c <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    f240:	2301      	movs	r3, #1
			d_len = 2;
    f242:	2202      	movs	r2, #2
			d[1].data = &data;
    f244:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    f248:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    f24a:	f242 0008 	movw	r0, #8200	; 0x2008
    f24e:	a902      	add	r1, sp, #8
    f250:	f7ff ff62 	bl	f118 <hci_set_ad>
		if (err) {
    f254:	4604      	mov	r4, r0
    f256:	b938      	cbnz	r0, f268 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    f258:	f1ba 0f00 	cmp.w	sl, #0
    f25c:	d120      	bne.n	f2a0 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f25e:	2104      	movs	r1, #4
    f260:	f106 0010 	add.w	r0, r6, #16
    f264:	f00c fd39 	bl	1bcda <atomic_or>
}
    f268:	4620      	mov	r0, r4
    f26a:	b007      	add	sp, #28
    f26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f270:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    f274:	3a08      	subs	r2, #8
    f276:	2a01      	cmp	r2, #1
    f278:	d925      	bls.n	f2c6 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f27a:	3301      	adds	r3, #1
    f27c:	429f      	cmp	r7, r3
    f27e:	d1f7      	bne.n	f270 <le_adv_update.constprop.0+0x88>
    f280:	e7c8      	b.n	f214 <le_adv_update.constprop.0+0x2c>
    f282:	2300      	movs	r3, #0
    f284:	e7fa      	b.n	f27c <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    f286:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    f28a:	3a08      	subs	r2, #8
    f28c:	2a01      	cmp	r2, #1
    f28e:	d91a      	bls.n	f2c6 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    f290:	3301      	adds	r3, #1
    f292:	4599      	cmp	r9, r3
    f294:	d1f7      	bne.n	f286 <le_adv_update.constprop.0+0x9e>
    f296:	e7bf      	b.n	f218 <le_adv_update.constprop.0+0x30>
    f298:	2300      	movs	r3, #0
    f29a:	e7fa      	b.n	f292 <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    f29c:	2201      	movs	r2, #1
    f29e:	e7d4      	b.n	f24a <le_adv_update.constprop.0+0x62>
		d[0].data = sd;
    f2a0:	2201      	movs	r2, #1
		d[0].len = sd_len;
    f2a2:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    f2a6:	f1b8 0f00 	cmp.w	r8, #0
    f2aa:	d003      	beq.n	f2b4 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    f2ac:	9205      	str	r2, [sp, #20]
			d_len = 2;
    f2ae:	2202      	movs	r2, #2
			d[1].data = &data;
    f2b0:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    f2b4:	f242 0009 	movw	r0, #8201	; 0x2009
    f2b8:	a902      	add	r1, sp, #8
    f2ba:	f7ff ff2d 	bl	f118 <hci_set_ad>
		if (err) {
    f2be:	2800      	cmp	r0, #0
    f2c0:	d0cd      	beq.n	f25e <le_adv_update.constprop.0+0x76>
    f2c2:	4604      	mov	r4, r0
    f2c4:	e7d0      	b.n	f268 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    f2c6:	f06f 0415 	mvn.w	r4, #21
    f2ca:	e7cd      	b.n	f268 <le_adv_update.constprop.0+0x80>
    f2cc:	0001f63a 	.word	0x0001f63a

0000f2d0 <set_le_adv_enable_legacy>:
{
    f2d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f2d2:	4606      	mov	r6, r0
    f2d4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    f2d6:	f242 000a 	movw	r0, #8202	; 0x200a
    f2da:	2101      	movs	r1, #1
    f2dc:	f7ff fd68 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
    f2e0:	4604      	mov	r4, r0
    f2e2:	b1e8      	cbz	r0, f320 <set_le_adv_enable_legacy+0x50>
	return net_buf_simple_add_u8(&buf->b, val);
    f2e4:	3008      	adds	r0, #8
	if (enable) {
    f2e6:	b1cd      	cbz	r5, f31c <set_le_adv_enable_legacy+0x4c>
    f2e8:	2101      	movs	r1, #1
    f2ea:	f00d ff4d 	bl	1d188 <net_buf_simple_add_u8>
    f2ee:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    f2f0:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    f2f2:	3610      	adds	r6, #16
    f2f4:	9302      	str	r3, [sp, #8]
	state->target = target;
    f2f6:	9601      	str	r6, [sp, #4]
	state->val = val;
    f2f8:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f2fc:	f005 ffc8 	bl	15290 <net_buf_id>
    f300:	220c      	movs	r2, #12
    f302:	4b09      	ldr	r3, [pc, #36]	; (f328 <set_le_adv_enable_legacy+0x58>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f304:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f306:	fb02 3300 	mla	r3, r2, r0, r3
    f30a:	aa01      	add	r2, sp, #4
    f30c:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    f30e:	f242 000a 	movw	r0, #8202	; 0x200a
    f312:	2200      	movs	r2, #0
    f314:	f7ff fd96 	bl	ee44 <bt_hci_cmd_send_sync>
}
    f318:	b004      	add	sp, #16
    f31a:	bd70      	pop	{r4, r5, r6, pc}
    f31c:	4629      	mov	r1, r5
    f31e:	e7e4      	b.n	f2ea <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    f320:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f324:	e7f8      	b.n	f318 <set_le_adv_enable_legacy+0x48>
    f326:	bf00      	nop
    f328:	2000ab20 	.word	0x2000ab20

0000f32c <start_le_scan_legacy>:
{
    f32c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f32e:	460e      	mov	r6, r1
    f330:	4605      	mov	r5, r0
    f332:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    f334:	2100      	movs	r1, #0
    f336:	2207      	movs	r2, #7
    f338:	4668      	mov	r0, sp
    f33a:	f00c fc06 	bl	1bb4a <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    f33e:	f8ad 6001 	strh.w	r6, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    f342:	4e26      	ldr	r6, [pc, #152]	; (f3dc <start_le_scan_legacy+0xb0>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f344:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    f346:	4630      	mov	r0, r6
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    f348:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    f34c:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    f350:	f88d 5000 	strb.w	r5, [sp]
	set_param.window = sys_cpu_to_le16(window);
    f354:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    f358:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f35c:	f00c fcb7 	bl	1bcce <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    f360:	0641      	lsls	r1, r0, #25
    f362:	d413      	bmi.n	f38c <start_le_scan_legacy+0x60>
			err = le_set_private_addr(BT_ID_DEFAULT);
    f364:	f00c fcf8 	bl	1bd58 <le_set_private_addr.constprop.0>
			if (err) {
    f368:	4604      	mov	r4, r0
    f36a:	b160      	cbz	r0, f386 <start_le_scan_legacy+0x5a>
				if (active_scan || !is_adv_using_rand_addr()) {
    f36c:	2d01      	cmp	r5, #1
    f36e:	d02e      	beq.n	f3ce <start_le_scan_legacy+0xa2>
    f370:	f106 0028 	add.w	r0, r6, #40	; 0x28
    f374:	f00c fcab 	bl	1bcce <atomic_get>
    f378:	0642      	lsls	r2, r0, #25
    f37a:	d528      	bpl.n	f3ce <start_le_scan_legacy+0xa2>
					BT_WARN("Ignoring failure to set "
    f37c:	4622      	mov	r2, r4
    f37e:	2157      	movs	r1, #87	; 0x57
    f380:	4817      	ldr	r0, [pc, #92]	; (f3e0 <start_le_scan_legacy+0xb4>)
    f382:	f00b f973 	bl	1a66c <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    f386:	2301      	movs	r3, #1
    f388:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    f38c:	2107      	movs	r1, #7
    f38e:	f242 000b 	movw	r0, #8203	; 0x200b
    f392:	f7ff fd0d 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
    f396:	4604      	mov	r4, r0
    f398:	b1e0      	cbz	r0, f3d4 <start_le_scan_legacy+0xa8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    f39a:	2207      	movs	r2, #7
    f39c:	4669      	mov	r1, sp
    f39e:	3008      	adds	r0, #8
    f3a0:	f00d fee6 	bl	1d170 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    f3a4:	4621      	mov	r1, r4
    f3a6:	2200      	movs	r2, #0
    f3a8:	f242 000b 	movw	r0, #8203	; 0x200b
    f3ac:	f7ff fd4a 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
    f3b0:	4604      	mov	r4, r0
    f3b2:	b960      	cbnz	r0, f3ce <start_le_scan_legacy+0xa2>
	return set_le_scan_enable_legacy(enable);
    f3b4:	2001      	movs	r0, #1
    f3b6:	f7ff fdf5 	bl	efa4 <set_le_scan_enable_legacy>
	if (err) {
    f3ba:	4604      	mov	r4, r0
    f3bc:	b938      	cbnz	r0, f3ce <start_le_scan_legacy+0xa2>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    f3be:	1e6b      	subs	r3, r5, #1
    f3c0:	425a      	negs	r2, r3
    f3c2:	f04f 0107 	mov.w	r1, #7
    f3c6:	4807      	ldr	r0, [pc, #28]	; (f3e4 <start_le_scan_legacy+0xb8>)
    f3c8:	415a      	adcs	r2, r3
    f3ca:	f00c fc9f 	bl	1bd0c <atomic_set_bit_to>
}
    f3ce:	4620      	mov	r0, r4
    f3d0:	b002      	add	sp, #8
    f3d2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    f3d4:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f3d8:	e7f9      	b.n	f3ce <start_le_scan_legacy+0xa2>
    f3da:	bf00      	nop
    f3dc:	20008000 	.word	0x20008000
    f3e0:	000212d7 	.word	0x000212d7
    f3e4:	20008094 	.word	0x20008094

0000f3e8 <bt_le_scan_random_addr_check>:
{
    f3e8:	b508      	push	{r3, lr}
    f3ea:	4802      	ldr	r0, [pc, #8]	; (f3f4 <bt_le_scan_random_addr_check+0xc>)
    f3ec:	f00c fc6f 	bl	1bcce <atomic_get>
}
    f3f0:	2001      	movs	r0, #1
    f3f2:	bd08      	pop	{r3, pc}
    f3f4:	20008028 	.word	0x20008028

0000f3f8 <bt_le_create_conn_legacy>:
{
    f3f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f3fc:	4f2b      	ldr	r7, [pc, #172]	; (f4ac <bt_le_create_conn_legacy+0xb4>)
{
    f3fe:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    f400:	783b      	ldrb	r3, [r7, #0]
    f402:	2b01      	cmp	r3, #1
    f404:	d00b      	beq.n	f41e <bt_le_create_conn_legacy+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f406:	2119      	movs	r1, #25
    f408:	f242 000d 	movw	r0, #8205	; 0x200d
		*own_addr_type = addr->type;
    f40c:	f897 8000 	ldrb.w	r8, [r7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    f410:	f7ff fcce 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
    f414:	4606      	mov	r6, r0
    f416:	b950      	cbnz	r0, f42e <bt_le_create_conn_legacy+0x36>
		return -ENOBUFS;
    f418:	f06f 0036 	mvn.w	r0, #54	; 0x36
    f41c:	e004      	b.n	f428 <bt_le_create_conn_legacy+0x30>
			err = set_random_address(&addr->a);
    f41e:	1c78      	adds	r0, r7, #1
    f420:	f7ff fd92 	bl	ef48 <set_random_address>
			if (err) {
    f424:	2800      	cmp	r0, #0
    f426:	d0ee      	beq.n	f406 <bt_le_create_conn_legacy+0xe>
}
    f428:	b004      	add	sp, #16
    f42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    f42e:	2119      	movs	r1, #25
    f430:	3008      	adds	r0, #8
    f432:	f006 f9bb 	bl	157ac <net_buf_simple_add>
    f436:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    f438:	2219      	movs	r2, #25
    f43a:	2100      	movs	r1, #0
    f43c:	f00c fb85 	bl	1bb4a <memset>
	cp->own_addr_type = own_addr_type;
    f440:	f884 800c 	strb.w	r8, [r4, #12]
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f444:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    f448:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f44c:	1d60      	adds	r0, r4, #5
    f44e:	f00c fc41 	bl	1bcd4 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    f452:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f456:	89bb      	ldrh	r3, [r7, #12]
	cmd(buf)->state = &state;
    f458:	4630      	mov	r0, r6
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    f45a:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    f45c:	89fb      	ldrh	r3, [r7, #14]
    f45e:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    f460:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    f464:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    f468:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    f46c:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    f470:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    f474:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    f478:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
    f47c:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    f480:	4b0b      	ldr	r3, [pc, #44]	; (f4b0 <bt_le_create_conn_legacy+0xb8>)
    f482:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f484:	230b      	movs	r3, #11
    f486:	9302      	str	r3, [sp, #8]
	state->val = val;
    f488:	2301      	movs	r3, #1
    f48a:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    f48e:	f005 feff 	bl	15290 <net_buf_id>
    f492:	220c      	movs	r2, #12
    f494:	4b07      	ldr	r3, [pc, #28]	; (f4b4 <bt_le_create_conn_legacy+0xbc>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f496:	4631      	mov	r1, r6
	cmd(buf)->state = &state;
    f498:	fb02 3300 	mla	r3, r2, r0, r3
    f49c:	aa01      	add	r2, sp, #4
    f49e:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    f4a0:	f242 000d 	movw	r0, #8205	; 0x200d
    f4a4:	4642      	mov	r2, r8
    f4a6:	f7ff fccd 	bl	ee44 <bt_hci_cmd_send_sync>
    f4aa:	e7bd      	b.n	f428 <bt_le_create_conn_legacy+0x30>
    f4ac:	20008000 	.word	0x20008000
    f4b0:	20008094 	.word	0x20008094
    f4b4:	2000ab20 	.word	0x2000ab20

0000f4b8 <bt_le_create_conn_cancel>:
{
    f4b8:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f4ba:	2100      	movs	r1, #0
{
    f4bc:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    f4be:	f242 000e 	movw	r0, #8206	; 0x200e
    f4c2:	f7ff fc75 	bl	edb0 <bt_hci_cmd_create>
	state->target = target;
    f4c6:	4b0c      	ldr	r3, [pc, #48]	; (f4f8 <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    f4c8:	2500      	movs	r5, #0
	state->target = target;
    f4ca:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    f4cc:	230b      	movs	r3, #11
    f4ce:	4604      	mov	r4, r0
    f4d0:	9302      	str	r3, [sp, #8]
	state->val = val;
    f4d2:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    f4d6:	f005 fedb 	bl	15290 <net_buf_id>
    f4da:	220c      	movs	r2, #12
    f4dc:	4b07      	ldr	r3, [pc, #28]	; (f4fc <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f4de:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    f4e0:	fb02 3300 	mla	r3, r2, r0, r3
    f4e4:	aa01      	add	r2, sp, #4
    f4e6:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    f4e8:	f242 000e 	movw	r0, #8206	; 0x200e
    f4ec:	462a      	mov	r2, r5
    f4ee:	f7ff fca9 	bl	ee44 <bt_hci_cmd_send_sync>
}
    f4f2:	b005      	add	sp, #20
    f4f4:	bd30      	pop	{r4, r5, pc}
    f4f6:	bf00      	nop
    f4f8:	20008094 	.word	0x20008094
    f4fc:	2000ab20 	.word	0x2000ab20

0000f500 <bt_le_scan_update>:
{
    f500:	b570      	push	{r4, r5, r6, lr}
    f502:	4606      	mov	r6, r0
    f504:	481c      	ldr	r0, [pc, #112]	; (f578 <bt_le_scan_update+0x78>)
    f506:	f00c fbe2 	bl	1bcce <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    f50a:	0641      	lsls	r1, r0, #25
    f50c:	f3c0 1380 	ubfx	r3, r0, #6, #1
    f510:	d501      	bpl.n	f516 <bt_le_scan_update+0x16>
			return 0;
    f512:	2000      	movs	r0, #0
    f514:	e02b      	b.n	f56e <bt_le_scan_update+0x6e>
    f516:	4818      	ldr	r0, [pc, #96]	; (f578 <bt_le_scan_update+0x78>)
    f518:	f00c fbd9 	bl	1bcce <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    f51c:	0682      	lsls	r2, r0, #26
    f51e:	d421      	bmi.n	f564 <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f520:	2100      	movs	r1, #0
    f522:	2206      	movs	r2, #6
    f524:	4608      	mov	r0, r1
    f526:	f001 fff9 	bl	1151c <bt_conn_lookup_state_le>
		if (conn) {
    f52a:	4604      	mov	r4, r0
    f52c:	bb00      	cbnz	r0, f570 <bt_le_scan_update+0x70>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    f52e:	2202      	movs	r2, #2
    f530:	4601      	mov	r1, r0
    f532:	f001 fff3 	bl	1151c <bt_conn_lookup_state_le>
		if (conn) {
    f536:	4605      	mov	r5, r0
    f538:	2800      	cmp	r0, #0
    f53a:	d0ea      	beq.n	f512 <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f53c:	f44f 7180 	mov.w	r1, #256	; 0x100
    f540:	480d      	ldr	r0, [pc, #52]	; (f578 <bt_le_scan_update+0x78>)
    f542:	f00c fbca 	bl	1bcda <atomic_or>
			bt_conn_unref(conn);
    f546:	4628      	mov	r0, r5
    f548:	f001 fe86 	bl	11258 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    f54c:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f54e:	4620      	mov	r0, r4
}
    f550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    f554:	bf15      	itete	ne
    f556:	2230      	movne	r2, #48	; 0x30
    f558:	2212      	moveq	r2, #18
    f55a:	2160      	movne	r1, #96	; 0x60
    f55c:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    f560:	f7ff bee4 	b.w	f32c <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    f564:	4618      	mov	r0, r3
    f566:	f7ff fd1d 	bl	efa4 <set_le_scan_enable_legacy>
		if (err) {
    f56a:	2800      	cmp	r0, #0
    f56c:	d0d8      	beq.n	f520 <bt_le_scan_update+0x20>
}
    f56e:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    f570:	f001 fe72 	bl	11258 <bt_conn_unref>
    f574:	e7cd      	b.n	f512 <bt_le_scan_update+0x12>
    f576:	bf00      	nop
    f578:	20008094 	.word	0x20008094

0000f57c <hci_disconn_complete>:
{
    f57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    f57e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    f580:	7835      	ldrb	r5, [r6, #0]
    f582:	bb45      	cbnz	r5, f5d6 <hci_disconn_complete+0x5a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f584:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    f588:	4638      	mov	r0, r7
    f58a:	f001 fe89 	bl	112a0 <bt_conn_lookup_handle>
	if (!conn) {
    f58e:	4604      	mov	r4, r0
    f590:	b930      	cbnz	r0, f5a0 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    f592:	463a      	mov	r2, r7
}
    f594:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    f598:	2145      	movs	r1, #69	; 0x45
    f59a:	480f      	ldr	r0, [pc, #60]	; (f5d8 <hci_disconn_complete+0x5c>)
    f59c:	f00b b866 	b.w	1a66c <printk>
	conn->err = evt->reason;
    f5a0:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f5a2:	4629      	mov	r1, r5
	conn->err = evt->reason;
    f5a4:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f5a6:	f001 fe83 	bl	112b0 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    f5aa:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    f5ac:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    f5ae:	2b01      	cmp	r3, #1
    f5b0:	d004      	beq.n	f5bc <hci_disconn_complete+0x40>
	bt_conn_unref(conn);
    f5b2:	4620      	mov	r0, r4
}
    f5b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    f5b8:	f001 be4e 	b.w	11258 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    f5bc:	1d20      	adds	r0, r4, #4
    f5be:	f00c fb86 	bl	1bcce <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    f5c2:	07c3      	lsls	r3, r0, #31
    f5c4:	d5f5      	bpl.n	f5b2 <hci_disconn_complete+0x36>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    f5c6:	4620      	mov	r0, r4
    f5c8:	2102      	movs	r1, #2
    f5ca:	f001 fe71 	bl	112b0 <bt_conn_set_state>
		bt_le_scan_update(false);
    f5ce:	4628      	mov	r0, r5
    f5d0:	f7ff ff96 	bl	f500 <bt_le_scan_update>
    f5d4:	e7ed      	b.n	f5b2 <hci_disconn_complete+0x36>
}
    f5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f5d8:	0002105e 	.word	0x0002105e

0000f5dc <le_adv_report>:
{
    f5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    f5e0:	f100 0708 	add.w	r7, r0, #8
    f5e4:	b08d      	sub	sp, #52	; 0x34
    f5e6:	4604      	mov	r4, r0
    f5e8:	4638      	mov	r0, r7
    f5ea:	f00d fda5 	bl	1d138 <net_buf_simple_pull_u8>
    f5ee:	f8df 81c8 	ldr.w	r8, [pc, #456]	; f7b8 <le_adv_report+0x1dc>
	if (scan_dev_found_cb) {
    f5f2:	f8df a1c8 	ldr.w	sl, [pc, #456]	; f7bc <le_adv_report+0x1e0>
    f5f6:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    f5f8:	9b01      	ldr	r3, [sp, #4]
    f5fa:	b913      	cbnz	r3, f602 <le_adv_report+0x26>
}
    f5fc:	b00d      	add	sp, #52	; 0x34
    f5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    f602:	89a3      	ldrh	r3, [r4, #12]
    f604:	2b08      	cmp	r3, #8
    f606:	d806      	bhi.n	f616 <le_adv_report+0x3a>
			BT_ERR("Unexpected end of buffer");
    f608:	2145      	movs	r1, #69	; 0x45
    f60a:	486d      	ldr	r0, [pc, #436]	; (f7c0 <le_adv_report+0x1e4>)
}
    f60c:	b00d      	add	sp, #52	; 0x34
    f60e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    f612:	f00b b82b 	b.w	1a66c <printk>
	return net_buf_simple_pull_mem(&buf->b, len);
    f616:	2109      	movs	r1, #9
    f618:	4638      	mov	r0, r7
    f61a:	f006 f8a9 	bl	15770 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    f61e:	237f      	movs	r3, #127	; 0x7f
    f620:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    f624:	7a03      	ldrb	r3, [r0, #8]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    f626:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    f628:	9300      	str	r3, [sp, #0]
    f62a:	18c3      	adds	r3, r0, r3
    f62c:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    f62e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.rssi = evt->data[evt->length];
    f632:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    f636:	23ff      	movs	r3, #255	; 0xff
    f638:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    f63c:	2300      	movs	r3, #0
    f63e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
    f642:	7802      	ldrb	r2, [r0, #0]
    f644:	4606      	mov	r6, r0
    f646:	2a04      	cmp	r2, #4
    f648:	bf98      	it	ls
    f64a:	4b5e      	ldrls	r3, [pc, #376]	; (f7c4 <le_adv_report+0x1e8>)
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    f64c:	f100 0901 	add.w	r9, r0, #1
    f650:	bf98      	it	ls
    f652:	5c9b      	ldrbls	r3, [r3, r2]
    f654:	4640      	mov	r0, r8
		adv_info.adv_type = evt->evt_type;
    f656:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		adv_info.adv_props = get_adv_props(evt->evt_type);
    f65a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    f65e:	f00c fb36 	bl	1bcce <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    f662:	0645      	lsls	r5, r0, #25
    f664:	d50d      	bpl.n	f682 <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    f666:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    f66a:	0758      	lsls	r0, r3, #29
    f66c:	d509      	bpl.n	f682 <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    f66e:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    f670:	4638      	mov	r0, r7
    f672:	3101      	adds	r1, #1
    f674:	f006 f860 	bl	15738 <net_buf_simple_pull>
    f678:	9b01      	ldr	r3, [sp, #4]
    f67a:	1e58      	subs	r0, r3, #1
    f67c:	b2c3      	uxtb	r3, r0
    f67e:	9301      	str	r3, [sp, #4]
    f680:	e7ba      	b.n	f5f8 <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    f682:	7873      	ldrb	r3, [r6, #1]
    f684:	1e9a      	subs	r2, r3, #2
    f686:	2a01      	cmp	r2, #1
    f688:	d84c      	bhi.n	f724 <le_adv_report+0x148>
		bt_addr_le_copy(&id_addr, addr);
    f68a:	4649      	mov	r1, r9
    f68c:	a804      	add	r0, sp, #16
    f68e:	f00c fb21 	bl	1bcd4 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    f692:	f89d 3010 	ldrb.w	r3, [sp, #16]
    f696:	3b02      	subs	r3, #2
    f698:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    f69c:	ab04      	add	r3, sp, #16
    f69e:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    f6a0:	f8da 3000 	ldr.w	r3, [sl]
    f6a4:	b1a3      	cbz	r3, f6d0 <le_adv_report+0xf4>
	state->offset = net_buf_simple_headroom(buf);
    f6a6:	4638      	mov	r0, r7
    f6a8:	f00d fd56 	bl	1d158 <net_buf_simple_headroom>
    f6ac:	4683      	mov	fp, r0
		buf->len = len;
    f6ae:	9b00      	ldr	r3, [sp, #0]
	state->len = buf->len;
    f6b0:	89a5      	ldrh	r5, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    f6b2:	a804      	add	r0, sp, #16
		buf->len = len;
    f6b4:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    f6b6:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    f6ba:	463b      	mov	r3, r7
    f6bc:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    f6c0:	f8da c000 	ldr.w	ip, [sl]
    f6c4:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    f6c6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    f6c8:	81a5      	strh	r5, [r4, #12]
	buf->data = buf->__buf + state->offset;
    f6ca:	fa10 f08b 	uxtah	r0, r0, fp
    f6ce:	60a0      	str	r0, [r4, #8]
	return list->head;
    f6d0:	4b3d      	ldr	r3, [pc, #244]	; (f7c8 <le_adv_report+0x1ec>)
    f6d2:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    f6d4:	2b00      	cmp	r3, #0
    f6d6:	d032      	beq.n	f73e <le_adv_report+0x162>
    f6d8:	f1b3 0208 	subs.w	r2, r3, #8
    f6dc:	d02f      	beq.n	f73e <le_adv_report+0x162>
	return node->next;
    f6de:	681d      	ldr	r5, [r3, #0]
    f6e0:	b105      	cbz	r5, f6e4 <le_adv_report+0x108>
    f6e2:	3d08      	subs	r5, #8
		if (listener->recv) {
    f6e4:	6813      	ldr	r3, [r2, #0]
    f6e6:	9203      	str	r2, [sp, #12]
    f6e8:	b193      	cbz	r3, f710 <le_adv_report+0x134>
	state->offset = net_buf_simple_headroom(buf);
    f6ea:	4638      	mov	r0, r7
    f6ec:	f00d fd34 	bl	1d158 <net_buf_simple_headroom>
    f6f0:	4683      	mov	fp, r0
	state->len = buf->len;
    f6f2:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    f6f4:	9a03      	ldr	r2, [sp, #12]
    f6f6:	9302      	str	r3, [sp, #8]
			buf->len = len;
    f6f8:	9b00      	ldr	r3, [sp, #0]
			listener->recv(info, &buf->b);
    f6fa:	a808      	add	r0, sp, #32
			buf->len = len;
    f6fc:	81a3      	strh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    f6fe:	4639      	mov	r1, r7
    f700:	6812      	ldr	r2, [r2, #0]
    f702:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    f704:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    f706:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    f708:	fa10 f08b 	uxtah	r0, r0, fp
    f70c:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    f70e:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    f710:	b1ad      	cbz	r5, f73e <le_adv_report+0x162>
Z_GENLIST_PEEK_NEXT(slist, snode)
    f712:	f115 0308 	adds.w	r3, r5, #8
    f716:	d002      	beq.n	f71e <le_adv_report+0x142>
	return node->next;
    f718:	68ab      	ldr	r3, [r5, #8]
    f71a:	b103      	cbz	r3, f71e <le_adv_report+0x142>
    f71c:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    f71e:	462a      	mov	r2, r5
    f720:	461d      	mov	r5, r3
    f722:	e7df      	b.n	f6e4 <le_adv_report+0x108>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    f724:	2bff      	cmp	r3, #255	; 0xff
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    f726:	bf0a      	itet	eq
    f728:	2300      	moveq	r3, #0
		bt_addr_le_copy(&id_addr,
    f72a:	4649      	movne	r1, r9
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    f72c:	a906      	addeq	r1, sp, #24
		bt_addr_le_copy(&id_addr,
    f72e:	a804      	add	r0, sp, #16
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    f730:	bf04      	itt	eq
    f732:	9306      	streq	r3, [sp, #24]
    f734:	f8cd 301b 	streq.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    f738:	f00c facc 	bl	1bcd4 <bt_addr_le_copy>
    f73c:	e7ae      	b.n	f69c <le_adv_report+0xc0>
    f73e:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    f740:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    f744:	f00c fac3 	bl	1bcce <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    f748:	0641      	lsls	r1, r0, #25
    f74a:	f3c0 1580 	ubfx	r5, r0, #6, #1
    f74e:	d48e      	bmi.n	f66e <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    f750:	07da      	lsls	r2, r3, #31
    f752:	d58c      	bpl.n	f66e <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    f754:	2202      	movs	r2, #2
    f756:	4628      	mov	r0, r5
    f758:	a904      	add	r1, sp, #16
    f75a:	f001 fedf 	bl	1151c <bt_conn_lookup_state_le>
	if (!conn) {
    f75e:	4683      	mov	fp, r0
    f760:	2800      	cmp	r0, #0
    f762:	d084      	beq.n	f66e <le_adv_report+0x92>
    f764:	4640      	mov	r0, r8
    f766:	f00c fab2 	bl	1bcce <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f76a:	0683      	lsls	r3, r0, #26
    f76c:	d410      	bmi.n	f790 <le_adv_report+0x1b4>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    f76e:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    f772:	4649      	mov	r1, r9
    f774:	f00c faae 	bl	1bcd4 <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    f778:	4658      	mov	r0, fp
    f77a:	f7ff fe3d 	bl	f3f8 <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    f77e:	b960      	cbnz	r0, f79a <le_adv_report+0x1be>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    f780:	4658      	mov	r0, fp
    f782:	2106      	movs	r1, #6
    f784:	f001 fd94 	bl	112b0 <bt_conn_set_state>
	bt_conn_unref(conn);
    f788:	4658      	mov	r0, fp
    f78a:	f001 fd65 	bl	11258 <bt_conn_unref>
	return;
    f78e:	e76e      	b.n	f66e <le_adv_report+0x92>
	return set_le_scan_enable_legacy(enable);
    f790:	4628      	mov	r0, r5
    f792:	f7ff fc07 	bl	efa4 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    f796:	2800      	cmp	r0, #0
    f798:	d0e9      	beq.n	f76e <le_adv_report+0x192>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    f79a:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f79c:	2100      	movs	r1, #0
    f79e:	4658      	mov	r0, fp
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    f7a0:	f88b 3009 	strb.w	r3, [fp, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    f7a4:	f001 fd84 	bl	112b0 <bt_conn_set_state>
	bt_conn_unref(conn);
    f7a8:	4658      	mov	r0, fp
    f7aa:	f001 fd55 	bl	11258 <bt_conn_unref>
	bt_le_scan_update(false);
    f7ae:	2000      	movs	r0, #0
    f7b0:	f7ff fea6 	bl	f500 <bt_le_scan_update>
    f7b4:	e75b      	b.n	f66e <le_adv_report+0x92>
    f7b6:	bf00      	nop
    f7b8:	20008094 	.word	0x20008094
    f7bc:	2000ab44 	.word	0x2000ab44
    f7c0:	00021312 	.word	0x00021312
    f7c4:	00021796 	.word	0x00021796
    f7c8:	2000ab3c 	.word	0x2000ab3c

0000f7cc <bt_data_parse>:
{
    f7cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f7ce:	4604      	mov	r4, r0
    f7d0:	460e      	mov	r6, r1
    f7d2:	4617      	mov	r7, r2
	while (ad->len > 1) {
    f7d4:	88a3      	ldrh	r3, [r4, #4]
    f7d6:	2b01      	cmp	r3, #1
    f7d8:	d801      	bhi.n	f7de <bt_data_parse+0x12>
}
    f7da:	b003      	add	sp, #12
    f7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
    f7de:	4620      	mov	r0, r4
    f7e0:	f00d fcaa 	bl	1d138 <net_buf_simple_pull_u8>
		if (len == 0U) {
    f7e4:	4605      	mov	r5, r0
    f7e6:	2800      	cmp	r0, #0
    f7e8:	d0f7      	beq.n	f7da <bt_data_parse+0xe>
		if (len > ad->len) {
    f7ea:	88a2      	ldrh	r2, [r4, #4]
    f7ec:	b283      	uxth	r3, r0
    f7ee:	429a      	cmp	r2, r3
    f7f0:	d206      	bcs.n	f800 <bt_data_parse+0x34>
			BT_WARN("Malformed data");
    f7f2:	2157      	movs	r1, #87	; 0x57
    f7f4:	480c      	ldr	r0, [pc, #48]	; (f828 <bt_data_parse+0x5c>)
}
    f7f6:	b003      	add	sp, #12
    f7f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Malformed data");
    f7fc:	f00a bf36 	b.w	1a66c <printk>
		data.type = net_buf_simple_pull_u8(ad);
    f800:	4620      	mov	r0, r4
    f802:	f00d fc99 	bl	1d138 <net_buf_simple_pull_u8>
		data.data = ad->data;
    f806:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    f808:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    f80c:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    f80e:	4639      	mov	r1, r7
    f810:	4668      	mov	r0, sp
		data.data_len = len - 1;
    f812:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    f816:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    f818:	47b0      	blx	r6
    f81a:	2800      	cmp	r0, #0
    f81c:	d0dd      	beq.n	f7da <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
    f81e:	4629      	mov	r1, r5
    f820:	4620      	mov	r0, r4
    f822:	f005 ff89 	bl	15738 <net_buf_simple_pull>
    f826:	e7d5      	b.n	f7d4 <bt_data_parse+0x8>
    f828:	00021330 	.word	0x00021330

0000f82c <bt_send>:
	return bt_dev.drv->send(buf);
    f82c:	4b02      	ldr	r3, [pc, #8]	; (f838 <bt_send+0xc>)
    f82e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    f832:	691b      	ldr	r3, [r3, #16]
    f834:	4718      	bx	r3
    f836:	bf00      	nop
    f838:	20008000 	.word	0x20008000

0000f83c <bt_hci_cmd_send>:
{
    f83c:	b538      	push	{r3, r4, r5, lr}
    f83e:	4605      	mov	r5, r0
	if (!buf) {
    f840:	460c      	mov	r4, r1
    f842:	b919      	cbnz	r1, f84c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    f844:	f7ff fab4 	bl	edb0 <bt_hci_cmd_create>
		if (!buf) {
    f848:	4604      	mov	r4, r0
    f84a:	b1c0      	cbz	r0, f87e <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    f84c:	f640 4335 	movw	r3, #3125	; 0xc35
    f850:	429d      	cmp	r5, r3
    f852:	d10e      	bne.n	f872 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    f854:	4620      	mov	r0, r4
    f856:	f7ff ffe9 	bl	f82c <bt_send>
		if (err) {
    f85a:	4605      	mov	r5, r0
    f85c:	b138      	cbz	r0, f86e <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    f85e:	4602      	mov	r2, r0
    f860:	2145      	movs	r1, #69	; 0x45
    f862:	4808      	ldr	r0, [pc, #32]	; (f884 <bt_hci_cmd_send+0x48>)
    f864:	f00a ff02 	bl	1a66c <printk>
			net_buf_unref(buf);
    f868:	4620      	mov	r0, r4
    f86a:	f005 fe89 	bl	15580 <net_buf_unref>
}
    f86e:	4628      	mov	r0, r5
    f870:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    f872:	4621      	mov	r1, r4
    f874:	4804      	ldr	r0, [pc, #16]	; (f888 <bt_hci_cmd_send+0x4c>)
    f876:	f005 fe55 	bl	15524 <net_buf_put>
	return 0;
    f87a:	2500      	movs	r5, #0
    f87c:	e7f7      	b.n	f86e <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    f87e:	f06f 0536 	mvn.w	r5, #54	; 0x36
    f882:	e7f4      	b.n	f86e <bt_hci_cmd_send+0x32>
    f884:	00021344 	.word	0x00021344
    f888:	20008118 	.word	0x20008118

0000f88c <bt_hci_host_num_completed_packets>:
{
    f88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f88e:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    f890:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    f892:	7980      	ldrb	r0, [r0, #6]
    f894:	f005 fcf4 	bl	15280 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    f898:	4621      	mov	r1, r4
    f89a:	f00e faaf 	bl	1ddfc <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    f89e:	4b24      	ldr	r3, [pc, #144]	; (f930 <bt_hci_host_num_completed_packets+0xa4>)
    f8a0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    f8a4:	069b      	lsls	r3, r3, #26
    f8a6:	d541      	bpl.n	f92c <bt_hci_host_num_completed_packets+0xa0>
	conn = bt_conn_lookup_index(acl(buf)->index);
    f8a8:	7d60      	ldrb	r0, [r4, #21]
    f8aa:	f002 f94d 	bl	11b48 <bt_conn_lookup_index>
	if (!conn) {
    f8ae:	4605      	mov	r5, r0
    f8b0:	b930      	cbnz	r0, f8c0 <bt_hci_host_num_completed_packets+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    f8b2:	7d62      	ldrb	r2, [r4, #21]
    f8b4:	2157      	movs	r1, #87	; 0x57
}
    f8b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    f8ba:	481e      	ldr	r0, [pc, #120]	; (f934 <bt_hci_host_num_completed_packets+0xa8>)
    f8bc:	f00a bed6 	b.w	1a66c <printk>
	if (!bt_conn_is_handle_valid(conn)) {
    f8c0:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    f8c2:	2b01      	cmp	r3, #1
    f8c4:	d002      	beq.n	f8cc <bt_hci_host_num_completed_packets+0x40>
    f8c6:	3b07      	subs	r3, #7
    f8c8:	2b01      	cmp	r3, #1
    f8ca:	d80f      	bhi.n	f8ec <bt_hci_host_num_completed_packets+0x60>
	bt_conn_unref(conn);
    f8cc:	4628      	mov	r0, r5
    f8ce:	f001 fcc3 	bl	11258 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    f8d2:	2105      	movs	r1, #5
    f8d4:	f640 4035 	movw	r0, #3125	; 0xc35
    f8d8:	f7ff fa6a 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
    f8dc:	4604      	mov	r4, r0
    f8de:	b970      	cbnz	r0, f8fe <bt_hci_host_num_completed_packets+0x72>
}
    f8e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    f8e4:	2145      	movs	r1, #69	; 0x45
    f8e6:	4814      	ldr	r0, [pc, #80]	; (f938 <bt_hci_host_num_completed_packets+0xac>)
    f8e8:	f00a bec0 	b.w	1a66c <printk>
		BT_WARN("Not reporting packet for non-connected conn");
    f8ec:	4813      	ldr	r0, [pc, #76]	; (f93c <bt_hci_host_num_completed_packets+0xb0>)
    f8ee:	2157      	movs	r1, #87	; 0x57
    f8f0:	f00a febc 	bl	1a66c <printk>
		bt_conn_unref(conn);
    f8f4:	4628      	mov	r0, r5
}
    f8f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    f8fa:	f001 bcad 	b.w	11258 <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    f8fe:	f100 0708 	add.w	r7, r0, #8
    f902:	2101      	movs	r1, #1
    f904:	4638      	mov	r0, r7
    f906:	f005 ff51 	bl	157ac <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    f90a:	2501      	movs	r5, #1
    f90c:	2104      	movs	r1, #4
    f90e:	7005      	strb	r5, [r0, #0]
    f910:	4638      	mov	r0, r7
    f912:	f005 ff4b 	bl	157ac <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    f916:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    f918:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    f91a:	7085      	strb	r5, [r0, #2]
    f91c:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    f91e:	4621      	mov	r1, r4
}
    f920:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    f924:	f640 4035 	movw	r0, #3125	; 0xc35
    f928:	f7ff bf88 	b.w	f83c <bt_hci_cmd_send>
}
    f92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f92e:	bf00      	nop
    f930:	20008000 	.word	0x20008000
    f934:	0002136b 	.word	0x0002136b
    f938:	000213ca 	.word	0x000213ca
    f93c:	00021399 	.word	0x00021399

0000f940 <conn_auto_initiate>:
{
    f940:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    f942:	7a83      	ldrb	r3, [r0, #10]
{
    f944:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    f946:	2b07      	cmp	r3, #7
    f948:	d15d      	bne.n	fa06 <conn_auto_initiate+0xc6>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    f94a:	1d06      	adds	r6, r0, #4
    f94c:	4630      	mov	r0, r6
    f94e:	f00c f9be 	bl	1bcce <atomic_get>
    f952:	0483      	lsls	r3, r0, #18
    f954:	d41b      	bmi.n	f98e <conn_auto_initiate+0x4e>
    f956:	78e3      	ldrb	r3, [r4, #3]
    f958:	b123      	cbz	r3, f964 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    f95a:	4b2c      	ldr	r3, [pc, #176]	; (fa0c <conn_auto_initiate+0xcc>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    f95c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    f960:	071d      	lsls	r5, r3, #28
    f962:	d514      	bpl.n	f98e <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    f964:	2102      	movs	r1, #2
    f966:	f242 0016 	movw	r0, #8214	; 0x2016
    f96a:	f7ff fa21 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
    f96e:	4605      	mov	r5, r0
    f970:	b168      	cbz	r0, f98e <conn_auto_initiate+0x4e>
    f972:	2102      	movs	r1, #2
    f974:	3008      	adds	r0, #8
    f976:	f005 ff19 	bl	157ac <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    f97a:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    f97c:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    f97e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    f980:	f242 0016 	movw	r0, #8214	; 0x2016
}
    f984:	b004      	add	sp, #16
    f986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    f98a:	f7ff bf57 	b.w	f83c <bt_hci_cmd_send>
    f98e:	4630      	mov	r0, r6
    f990:	f00c f99d 	bl	1bcce <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    f994:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    f998:	4d1c      	ldr	r5, [pc, #112]	; (fa0c <conn_auto_initiate+0xcc>)
    f99a:	f3c0 3100 	ubfx	r1, r0, #12, #1
    f99e:	d116      	bne.n	f9ce <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    f9a0:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    f9a4:	07d8      	lsls	r0, r3, #31
    f9a6:	d512      	bpl.n	f9ce <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    f9a8:	2302      	movs	r3, #2
    f9aa:	4620      	mov	r0, r4
    f9ac:	461a      	mov	r2, r3
    f9ae:	9100      	str	r1, [sp, #0]
    f9b0:	f00c fa41 	bl	1be36 <bt_le_set_phy>
		if (!err) {
    f9b4:	4602      	mov	r2, r0
    f9b6:	b930      	cbnz	r0, f9c6 <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f9b8:	2180      	movs	r1, #128	; 0x80
    f9ba:	4630      	mov	r0, r6
}
    f9bc:	b004      	add	sp, #16
    f9be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f9c2:	f00c b98a 	b.w	1bcda <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    f9c6:	2145      	movs	r1, #69	; 0x45
    f9c8:	4811      	ldr	r0, [pc, #68]	; (fa10 <conn_auto_initiate+0xd0>)
    f9ca:	f00a fe4f 	bl	1a66c <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    f9ce:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    f9d2:	069a      	lsls	r2, r3, #26
    f9d4:	d517      	bpl.n	fa06 <conn_auto_initiate+0xc6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    f9d6:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    f9da:	689b      	ldr	r3, [r3, #8]
    f9dc:	079b      	lsls	r3, r3, #30
    f9de:	d512      	bpl.n	fa06 <conn_auto_initiate+0xc6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    f9e0:	f10d 010e 	add.w	r1, sp, #14
    f9e4:	a803      	add	r0, sp, #12
    f9e6:	f7ff fa8f 	bl	ef08 <hci_le_read_max_data_len>
			if (!err) {
    f9ea:	b960      	cbnz	r0, fa06 <conn_auto_initiate+0xc6>
				err = bt_le_set_data_len(conn,
    f9ec:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    f9f0:	4620      	mov	r0, r4
    f9f2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    f9f6:	f00c fa01 	bl	1bdfc <bt_le_set_data_len>
				if (err) {
    f9fa:	4602      	mov	r2, r0
    f9fc:	b118      	cbz	r0, fa06 <conn_auto_initiate+0xc6>
					BT_ERR("Failed to set data len (%d)", err);
    f9fe:	2145      	movs	r1, #69	; 0x45
    fa00:	4804      	ldr	r0, [pc, #16]	; (fa14 <conn_auto_initiate+0xd4>)
    fa02:	f00a fe33 	bl	1a66c <printk>
}
    fa06:	b004      	add	sp, #16
    fa08:	bd70      	pop	{r4, r5, r6, pc}
    fa0a:	bf00      	nop
    fa0c:	20008000 	.word	0x20008000
    fa10:	000213f2 	.word	0x000213f2
    fa14:	00021411 	.word	0x00021411

0000fa18 <le_phy_update_complete>:
{
    fa18:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fa1a:	6883      	ldr	r3, [r0, #8]
    fa1c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    fa20:	4628      	mov	r0, r5
    fa22:	f001 fc3d 	bl	112a0 <bt_conn_lookup_handle>
	if (!conn) {
    fa26:	4604      	mov	r4, r0
    fa28:	b930      	cbnz	r0, fa38 <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fa2a:	462a      	mov	r2, r5
}
    fa2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fa30:	2145      	movs	r1, #69	; 0x45
    fa32:	480c      	ldr	r0, [pc, #48]	; (fa64 <le_phy_update_complete+0x4c>)
    fa34:	f00a be1a 	b.w	1a66c <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    fa38:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fa3a:	f06f 0180 	mvn.w	r1, #128	; 0x80
    fa3e:	4628      	mov	r0, r5
    fa40:	f00c f959 	bl	1bcf6 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    fa44:	0603      	lsls	r3, r0, #24
    fa46:	d507      	bpl.n	fa58 <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fa48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    fa4c:	4628      	mov	r0, r5
    fa4e:	f00c f944 	bl	1bcda <atomic_or>
		conn_auto_initiate(conn);
    fa52:	4620      	mov	r0, r4
    fa54:	f7ff ff74 	bl	f940 <conn_auto_initiate>
	bt_conn_unref(conn);
    fa58:	4620      	mov	r0, r4
}
    fa5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    fa5e:	f001 bbfb 	b.w	11258 <bt_conn_unref>
    fa62:	bf00      	nop
    fa64:	00021035 	.word	0x00021035

0000fa68 <le_remote_feat_complete>:
{
    fa68:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    fa6a:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    fa6c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    fa70:	4630      	mov	r0, r6
    fa72:	f001 fc15 	bl	112a0 <bt_conn_lookup_handle>
	if (!conn) {
    fa76:	4604      	mov	r4, r0
    fa78:	b930      	cbnz	r0, fa88 <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fa7a:	4632      	mov	r2, r6
}
    fa7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fa80:	2145      	movs	r1, #69	; 0x45
    fa82:	480b      	ldr	r0, [pc, #44]	; (fab0 <le_remote_feat_complete+0x48>)
    fa84:	f00a bdf2 	b.w	1a66c <printk>
	if (!evt->status) {
    fa88:	782b      	ldrb	r3, [r5, #0]
    fa8a:	b923      	cbnz	r3, fa96 <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    fa8c:	2208      	movs	r2, #8
    fa8e:	1ce9      	adds	r1, r5, #3
    fa90:	30ac      	adds	r0, #172	; 0xac
    fa92:	f00c f82f 	bl	1baf4 <memcpy>
    fa96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    fa9a:	1d20      	adds	r0, r4, #4
    fa9c:	f00c f91d 	bl	1bcda <atomic_or>
	conn_auto_initiate(conn);
    faa0:	4620      	mov	r0, r4
    faa2:	f7ff ff4d 	bl	f940 <conn_auto_initiate>
	bt_conn_unref(conn);
    faa6:	4620      	mov	r0, r4
}
    faa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    faac:	f001 bbd4 	b.w	11258 <bt_conn_unref>
    fab0:	00021035 	.word	0x00021035

0000fab4 <le_conn_param_neg_reply>:
{
    fab4:	b570      	push	{r4, r5, r6, lr}
    fab6:	4606      	mov	r6, r0
    fab8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    faba:	f242 0021 	movw	r0, #8225	; 0x2021
    fabe:	2103      	movs	r1, #3
    fac0:	f7ff f976 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
    fac4:	4604      	mov	r4, r0
    fac6:	b928      	cbnz	r0, fad4 <le_conn_param_neg_reply+0x20>
}
    fac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    facc:	2145      	movs	r1, #69	; 0x45
    face:	4808      	ldr	r0, [pc, #32]	; (faf0 <le_conn_param_neg_reply+0x3c>)
    fad0:	f00a bdcc 	b.w	1a66c <printk>
    fad4:	2103      	movs	r1, #3
    fad6:	3008      	adds	r0, #8
    fad8:	f005 fe68 	bl	157ac <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    fadc:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    fade:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    fae0:	4621      	mov	r1, r4
}
    fae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    fae6:	f242 0021 	movw	r0, #8225	; 0x2021
    faea:	f7ff bea7 	b.w	f83c <bt_hci_cmd_send>
    faee:	bf00      	nop
    faf0:	00021432 	.word	0x00021432

0000faf4 <le_conn_param_req>:
{
    faf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    faf6:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    faf8:	78d9      	ldrb	r1, [r3, #3]
    fafa:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    fafc:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    fafe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fb02:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    fb06:	7959      	ldrb	r1, [r3, #5]
    fb08:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    fb0a:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    fb0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fb10:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    fb14:	799a      	ldrb	r2, [r3, #6]
    fb16:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    fb18:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    fb1a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fb1e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    fb22:	7a1a      	ldrb	r2, [r3, #8]
    fb24:	7a5b      	ldrb	r3, [r3, #9]
    fb26:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    fb2a:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    fb2e:	f001 fbb7 	bl	112a0 <bt_conn_lookup_handle>
	if (!conn) {
    fb32:	4606      	mov	r6, r0
    fb34:	b950      	cbnz	r0, fb4c <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    fb36:	2145      	movs	r1, #69	; 0x45
    fb38:	481c      	ldr	r0, [pc, #112]	; (fbac <le_conn_param_req+0xb8>)
    fb3a:	4622      	mov	r2, r4
    fb3c:	f00a fd96 	bl	1a66c <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    fb40:	2102      	movs	r1, #2
    fb42:	4620      	mov	r0, r4
    fb44:	f7ff ffb6 	bl	fab4 <le_conn_param_neg_reply>
}
    fb48:	b003      	add	sp, #12
    fb4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    fb4c:	4669      	mov	r1, sp
    fb4e:	f001 f9f5 	bl	10f3c <le_param_req>
    fb52:	b938      	cbnz	r0, fb64 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    fb54:	211e      	movs	r1, #30
    fb56:	4620      	mov	r0, r4
    fb58:	f7ff ffac 	bl	fab4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    fb5c:	4630      	mov	r0, r6
    fb5e:	f001 fb7b 	bl	11258 <bt_conn_unref>
    fb62:	e7f1      	b.n	fb48 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    fb64:	210e      	movs	r1, #14
    fb66:	f242 0020 	movw	r0, #8224	; 0x2020
    fb6a:	f7ff f921 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
    fb6e:	4605      	mov	r5, r0
    fb70:	2800      	cmp	r0, #0
    fb72:	d0f3      	beq.n	fb5c <le_conn_param_req+0x68>
    fb74:	210e      	movs	r1, #14
    fb76:	3008      	adds	r0, #8
    fb78:	f005 fe18 	bl	157ac <net_buf_simple_add>
    fb7c:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    fb7e:	220e      	movs	r2, #14
    fb80:	2100      	movs	r1, #0
    fb82:	f00b ffe2 	bl	1bb4a <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    fb86:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    fb8a:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    fb8c:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    fb8e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    fb92:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    fb94:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    fb96:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    fb9a:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    fb9e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    fba0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    fba4:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    fba6:	f7ff fe49 	bl	f83c <bt_hci_cmd_send>
    fbaa:	e7d7      	b.n	fb5c <le_conn_param_req+0x68>
    fbac:	00021035 	.word	0x00021035

0000fbb0 <hci_tx_thread>:
{
    fbb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    fbb4:	f8df 8128 	ldr.w	r8, [pc, #296]	; fce0 <hci_tx_thread+0x130>
		BT_ASSERT(err == 0);
    fbb8:	f8df 9128 	ldr.w	r9, [pc, #296]	; fce4 <hci_tx_thread+0x134>
			ev_count += bt_conn_prepare_events(&events[1]);
    fbbc:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    fbc0:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    fbc4:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    fbc6:	f36f 3310 	bfc	r3, #12, #5
    fbca:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    fbce:	f001 fad7 	bl	11180 <bt_conn_prepare_events>
    fbd2:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    fbd4:	f04f 32ff 	mov.w	r2, #4294967295
    fbd8:	f04f 33ff 	mov.w	r3, #4294967295
    fbdc:	4631      	mov	r1, r6
    fbde:	4840      	ldr	r0, [pc, #256]	; (fce0 <hci_tx_thread+0x130>)
    fbe0:	f00a fb28 	bl	1a234 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    fbe4:	b158      	cbz	r0, fbfe <hci_tx_thread+0x4e>
    fbe6:	f241 4271 	movw	r2, #5233	; 0x1471
    fbea:	4649      	mov	r1, r9
    fbec:	483e      	ldr	r0, [pc, #248]	; (fce8 <hci_tx_thread+0x138>)
    fbee:	f00a fd3d 	bl	1a66c <printk>
    fbf2:	4040      	eors	r0, r0
    fbf4:	f380 8811 	msr	BASEPRI, r0
    fbf8:	f04f 0003 	mov.w	r0, #3
    fbfc:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    fbfe:	4d3b      	ldr	r5, [pc, #236]	; (fcec <hci_tx_thread+0x13c>)
{
    fc00:	4f37      	ldr	r7, [pc, #220]	; (fce0 <hci_tx_thread+0x130>)
    fc02:	f105 0be0 	add.w	fp, r5, #224	; 0xe0
	for (; count; ev++, count--) {
    fc06:	b916      	cbnz	r6, fc0e <hci_tx_thread+0x5e>
	z_impl_k_yield();
    fc08:	f009 fa16 	bl	19038 <z_impl_k_yield>
	while (1) {
    fc0c:	e7d8      	b.n	fbc0 <hci_tx_thread+0x10>
		switch (ev->state) {
    fc0e:	68fa      	ldr	r2, [r7, #12]
    fc10:	f3c2 3204 	ubfx	r2, r2, #12, #5
    fc14:	2a01      	cmp	r2, #1
    fc16:	d953      	bls.n	fcc0 <hci_tx_thread+0x110>
    fc18:	2a04      	cmp	r2, #4
    fc1a:	d15b      	bne.n	fcd4 <hci_tx_thread+0x124>
			if (ev->tag == BT_EVENT_CMD_TX) {
    fc1c:	7b3b      	ldrb	r3, [r7, #12]
    fc1e:	2b00      	cmp	r3, #0
    fc20:	d151      	bne.n	fcc6 <hci_tx_thread+0x116>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    fc22:	2200      	movs	r2, #0
    fc24:	2300      	movs	r3, #0
    fc26:	4832      	ldr	r0, [pc, #200]	; (fcf0 <hci_tx_thread+0x140>)
    fc28:	f005 fc28 	bl	1547c <net_buf_get>
	BT_ASSERT(buf);
    fc2c:	4604      	mov	r4, r0
    fc2e:	b958      	cbnz	r0, fc48 <hci_tx_thread+0x98>
    fc30:	f241 420e 	movw	r2, #5134	; 0x140e
    fc34:	4649      	mov	r1, r9
    fc36:	482c      	ldr	r0, [pc, #176]	; (fce8 <hci_tx_thread+0x138>)
    fc38:	f00a fd18 	bl	1a66c <printk>
    fc3c:	4040      	eors	r0, r0
    fc3e:	f380 8811 	msr	BASEPRI, r0
    fc42:	f04f 0003 	mov.w	r0, #3
    fc46:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    fc48:	f04f 33ff 	mov.w	r3, #4294967295
    fc4c:	f04f 32ff 	mov.w	r2, #4294967295
    fc50:	4658      	mov	r0, fp
    fc52:	f009 fb6f 	bl	19334 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    fc56:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    fc5a:	b153      	cbz	r3, fc72 <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
    fc5c:	2145      	movs	r1, #69	; 0x45
    fc5e:	4825      	ldr	r0, [pc, #148]	; (fcf4 <hci_tx_thread+0x144>)
    fc60:	f00a fd04 	bl	1a66c <printk>
		net_buf_unref(bt_dev.sent_cmd);
    fc64:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    fc68:	f005 fc8a 	bl	15580 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    fc6c:	2300      	movs	r3, #0
    fc6e:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    fc72:	4620      	mov	r0, r4
    fc74:	f005 fcc8 	bl	15608 <net_buf_ref>
    fc78:	f8c5 00f8 	str.w	r0, [r5, #248]	; 0xf8
	err = bt_send(buf);
    fc7c:	4620      	mov	r0, r4
    fc7e:	f7ff fdd5 	bl	f82c <bt_send>
	if (err) {
    fc82:	4602      	mov	r2, r0
    fc84:	b1e0      	cbz	r0, fcc0 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    fc86:	2145      	movs	r1, #69	; 0x45
    fc88:	481b      	ldr	r0, [pc, #108]	; (fcf8 <hci_tx_thread+0x148>)
    fc8a:	f00a fcef 	bl	1a66c <printk>
	z_impl_k_sem_give(sem);
    fc8e:	481b      	ldr	r0, [pc, #108]	; (fcfc <hci_tx_thread+0x14c>)
    fc90:	f009 fb14 	bl	192bc <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    fc94:	4620      	mov	r0, r4
    fc96:	f005 fafb 	bl	15290 <net_buf_id>
    fc9a:	220c      	movs	r2, #12
    fc9c:	4b18      	ldr	r3, [pc, #96]	; (fd00 <hci_tx_thread+0x150>)
    fc9e:	211f      	movs	r1, #31
    fca0:	fb02 3000 	mla	r0, r2, r0, r3
    fca4:	4622      	mov	r2, r4
    fca6:	8840      	ldrh	r0, [r0, #2]
    fca8:	f7fe ff20 	bl	eaec <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    fcac:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    fcb0:	f005 fc66 	bl	15580 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    fcb4:	2300      	movs	r3, #0
		net_buf_unref(buf);
    fcb6:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    fcb8:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
		net_buf_unref(buf);
    fcbc:	f005 fc60 	bl	15580 <net_buf_unref>
	for (; count; ev++, count--) {
    fcc0:	3714      	adds	r7, #20
    fcc2:	3e01      	subs	r6, #1
    fcc4:	e79f      	b.n	fc06 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    fcc6:	2b01      	cmp	r3, #1
    fcc8:	d1fa      	bne.n	fcc0 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    fcca:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
    fccc:	3834      	subs	r0, #52	; 0x34
    fcce:	f001 febb 	bl	11a48 <bt_conn_process_tx>
    fcd2:	e7f5      	b.n	fcc0 <hci_tx_thread+0x110>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    fcd4:	2157      	movs	r1, #87	; 0x57
    fcd6:	480b      	ldr	r0, [pc, #44]	; (fd04 <hci_tx_thread+0x154>)
    fcd8:	f00a fcc8 	bl	1a66c <printk>
    fcdc:	e7f0      	b.n	fcc0 <hci_tx_thread+0x110>
    fcde:	bf00      	nop
    fce0:	20008344 	.word	0x20008344
    fce4:	00021127 	.word	0x00021127
    fce8:	0001fbb7 	.word	0x0001fbb7
    fcec:	20008000 	.word	0x20008000
    fcf0:	20008118 	.word	0x20008118
    fcf4:	00021451 	.word	0x00021451
    fcf8:	00021344 	.word	0x00021344
    fcfc:	200080e0 	.word	0x200080e0
    fd00:	2000ab20 	.word	0x2000ab20
    fd04:	00021471 	.word	0x00021471

0000fd08 <hci_event_prio>:
{
    fd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd0c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    fd0e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    fd12:	4630      	mov	r0, r6
    fd14:	f00d fa20 	bl	1d158 <net_buf_simple_headroom>
	state->len = buf->len;
    fd18:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    fd1c:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    fd1e:	f1b8 0f01 	cmp.w	r8, #1
    fd22:	d80b      	bhi.n	fd3c <hci_event_prio+0x34>
    fd24:	f641 02ae 	movw	r2, #6318	; 0x18ae
    fd28:	491a      	ldr	r1, [pc, #104]	; (fd94 <hci_event_prio+0x8c>)
    fd2a:	481b      	ldr	r0, [pc, #108]	; (fd98 <hci_event_prio+0x90>)
    fd2c:	f00a fc9e 	bl	1a66c <printk>
    fd30:	4040      	eors	r0, r0
    fd32:	f380 8811 	msr	BASEPRI, r0
    fd36:	f04f 0003 	mov.w	r0, #3
    fd3a:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    fd3c:	4630      	mov	r0, r6
    fd3e:	2102      	movs	r1, #2
    fd40:	f005 fd16 	bl	15770 <net_buf_simple_pull_mem>
    fd44:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fd46:	7800      	ldrb	r0, [r0, #0]
    fd48:	f00b ffa0 	bl	1bc8c <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    fd4c:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fd4e:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    fd50:	d40b      	bmi.n	fd6a <hci_event_prio+0x62>
    fd52:	f641 02b2 	movw	r2, #6322	; 0x18b2
    fd56:	490f      	ldr	r1, [pc, #60]	; (fd94 <hci_event_prio+0x8c>)
    fd58:	480f      	ldr	r0, [pc, #60]	; (fd98 <hci_event_prio+0x90>)
    fd5a:	f00a fc87 	bl	1a66c <printk>
    fd5e:	4040      	eors	r0, r0
    fd60:	f380 8811 	msr	BASEPRI, r0
    fd64:	f04f 0003 	mov.w	r0, #3
    fd68:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    fd6a:	2305      	movs	r3, #5
    fd6c:	4621      	mov	r1, r4
    fd6e:	4a0b      	ldr	r2, [pc, #44]	; (fd9c <hci_event_prio+0x94>)
    fd70:	7838      	ldrb	r0, [r7, #0]
    fd72:	f7fe fdb3 	bl	e8dc <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    fd76:	07b3      	lsls	r3, r6, #30
    fd78:	d507      	bpl.n	fd8a <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
    fd7a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    fd7c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    fd80:	fa10 f585 	uxtah	r5, r0, r5
    fd84:	60a5      	str	r5, [r4, #8]
}
    fd86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    fd8a:	4620      	mov	r0, r4
}
    fd8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    fd90:	f005 bbf6 	b.w	15580 <net_buf_unref>
    fd94:	00021127 	.word	0x00021127
    fd98:	0001fbb7 	.word	0x0001fbb7
    fd9c:	0001ea60 	.word	0x0001ea60

0000fda0 <bt_recv>:
{
    fda0:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    fda2:	7d02      	ldrb	r2, [r0, #20]
    fda4:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
    fda6:	2a01      	cmp	r2, #1
    fda8:	d007      	beq.n	fdba <bt_recv+0x1a>
    fdaa:	2a03      	cmp	r2, #3
    fdac:	d113      	bne.n	fdd6 <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
    fdae:	480f      	ldr	r0, [pc, #60]	; (fdec <bt_recv+0x4c>)
    fdb0:	4629      	mov	r1, r5
    fdb2:	f005 fbb7 	bl	15524 <net_buf_put>
		return 0;
    fdb6:	2000      	movs	r0, #0
    fdb8:	e00c      	b.n	fdd4 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fdba:	6883      	ldr	r3, [r0, #8]
    fdbc:	7818      	ldrb	r0, [r3, #0]
    fdbe:	f00b ff65 	bl	1bc8c <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    fdc2:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    fdc4:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    fdc6:	d502      	bpl.n	fdce <bt_recv+0x2e>
			hci_event_prio(buf);
    fdc8:	4628      	mov	r0, r5
    fdca:	f7ff ff9d 	bl	fd08 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    fdce:	f014 0002 	ands.w	r0, r4, #2
    fdd2:	d1ec      	bne.n	fdae <bt_recv+0xe>
}
    fdd4:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    fdd6:	2145      	movs	r1, #69	; 0x45
    fdd8:	4805      	ldr	r0, [pc, #20]	; (fdf0 <bt_recv+0x50>)
    fdda:	f00a fc47 	bl	1a66c <printk>
		net_buf_unref(buf);
    fdde:	4628      	mov	r0, r5
    fde0:	f005 fbce 	bl	15580 <net_buf_unref>
		return -EINVAL;
    fde4:	f06f 0015 	mvn.w	r0, #21
    fde8:	e7f4      	b.n	fdd4 <bt_recv+0x34>
    fdea:	bf00      	nop
    fdec:	200080fc 	.word	0x200080fc
    fdf0:	00021497 	.word	0x00021497

0000fdf4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    fdf4:	4a08      	ldr	r2, [pc, #32]	; (fe18 <bt_hci_driver_register+0x24>)
{
    fdf6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    fdf8:	f8d2 0134 	ldr.w	r0, [r2, #308]	; 0x134
    fdfc:	b930      	cbnz	r0, fe0c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    fdfe:	68d9      	ldr	r1, [r3, #12]
    fe00:	b139      	cbz	r1, fe12 <bt_hci_driver_register+0x1e>
    fe02:	6919      	ldr	r1, [r3, #16]
    fe04:	b129      	cbz	r1, fe12 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    fe06:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	return 0;
    fe0a:	4770      	bx	lr
		return -EALREADY;
    fe0c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    fe10:	4770      	bx	lr
		return -EINVAL;
    fe12:	f06f 0015 	mvn.w	r0, #21
}
    fe16:	4770      	bx	lr
    fe18:	20008000 	.word	0x20008000

0000fe1c <bt_finalize_init>:
{
    fe1c:	b508      	push	{r3, lr}
    fe1e:	2102      	movs	r1, #2
    fe20:	4803      	ldr	r0, [pc, #12]	; (fe30 <bt_finalize_init+0x14>)
    fe22:	f00b ff5a 	bl	1bcda <atomic_or>
}
    fe26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    fe2a:	2000      	movs	r0, #0
    fe2c:	f7ff bb68 	b.w	f500 <bt_le_scan_update>
    fe30:	20008094 	.word	0x20008094

0000fe34 <bt_init>:
{
    fe34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    fe36:	4d60      	ldr	r5, [pc, #384]	; (ffb8 <bt_init+0x184>)
    fe38:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    fe3c:	6899      	ldr	r1, [r3, #8]
    fe3e:	f011 0101 	ands.w	r1, r1, #1
    fe42:	d11e      	bne.n	fe82 <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    fe44:	f640 4003 	movw	r0, #3075	; 0xc03
    fe48:	aa01      	add	r2, sp, #4
    fe4a:	f7fe fffb 	bl	ee44 <bt_hci_cmd_send_sync>
		if (err) {
    fe4e:	4604      	mov	r4, r0
    fe50:	2800      	cmp	r0, #0
    fe52:	f040 80ad 	bne.w	ffb0 <bt_init+0x17c>
	uint8_t status = buf->data[0];
    fe56:	9b01      	ldr	r3, [sp, #4]
    fe58:	689b      	ldr	r3, [r3, #8]
	if (status) {
    fe5a:	781b      	ldrb	r3, [r3, #0]
    fe5c:	b973      	cbnz	r3, fe7c <bt_init+0x48>
	scan_dev_found_cb = NULL;
    fe5e:	4a57      	ldr	r2, [pc, #348]	; (ffbc <bt_init+0x188>)
    fe60:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    fe62:	f105 0394 	add.w	r3, r5, #148	; 0x94
    fe66:	4618      	mov	r0, r3
    fe68:	f00b ff31 	bl	1bcce <atomic_get>
    fe6c:	f000 0005 	and.w	r0, r0, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    fe70:	e8d3 2fef 	ldaex	r2, [r3]
    fe74:	e8c3 0fe1 	stlex	r1, r0, [r3]
    fe78:	2900      	cmp	r1, #0
    fe7a:	d1f9      	bne.n	fe70 <bt_init+0x3c>
		net_buf_unref(rsp);
    fe7c:	9801      	ldr	r0, [sp, #4]
    fe7e:	f005 fb7f 	bl	15580 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    fe82:	2100      	movs	r1, #0
    fe84:	f241 0003 	movw	r0, #4099	; 0x1003
    fe88:	aa01      	add	r2, sp, #4
    fe8a:	f7fe ffdb 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
    fe8e:	4604      	mov	r4, r0
    fe90:	2800      	cmp	r0, #0
    fe92:	f040 808d 	bne.w	ffb0 <bt_init+0x17c>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    fe96:	9b01      	ldr	r3, [sp, #4]
    fe98:	2208      	movs	r2, #8
    fe9a:	6899      	ldr	r1, [r3, #8]
    fe9c:	4848      	ldr	r0, [pc, #288]	; (ffc0 <bt_init+0x18c>)
    fe9e:	3101      	adds	r1, #1
    fea0:	f00b fe28 	bl	1baf4 <memcpy>
	net_buf_unref(rsp);
    fea4:	9801      	ldr	r0, [sp, #4]
    fea6:	f005 fb6b 	bl	15580 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    feaa:	4621      	mov	r1, r4
    feac:	f241 0001 	movw	r0, #4097	; 0x1001
    feb0:	aa01      	add	r2, sp, #4
    feb2:	f7fe ffc7 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
    feb6:	4604      	mov	r4, r0
    feb8:	2800      	cmp	r0, #0
    feba:	d179      	bne.n	ffb0 <bt_init+0x17c>
	read_local_ver_complete(rsp);
    febc:	9801      	ldr	r0, [sp, #4]
    febe:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    fec0:	785a      	ldrb	r2, [r3, #1]
    fec2:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    fec6:	78d9      	ldrb	r1, [r3, #3]
    fec8:	789a      	ldrb	r2, [r3, #2]
    feca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fece:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    fed0:	791a      	ldrb	r2, [r3, #4]
    fed2:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    fed6:	7a19      	ldrb	r1, [r3, #8]
    fed8:	79da      	ldrb	r2, [r3, #7]
    feda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    fede:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    fee0:	795a      	ldrb	r2, [r3, #5]
    fee2:	799b      	ldrb	r3, [r3, #6]
    fee4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    fee8:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    feea:	f005 fb49 	bl	15580 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    feee:	4621      	mov	r1, r4
    fef0:	f241 0002 	movw	r0, #4098	; 0x1002
    fef4:	aa01      	add	r2, sp, #4
    fef6:	f7fe ffa5 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
    fefa:	4604      	mov	r4, r0
    fefc:	2800      	cmp	r0, #0
    fefe:	d157      	bne.n	ffb0 <bt_init+0x17c>
	memcpy(bt_dev.supported_commands, rp->commands,
    ff00:	9b01      	ldr	r3, [sp, #4]
    ff02:	2240      	movs	r2, #64	; 0x40
    ff04:	6899      	ldr	r1, [r3, #8]
    ff06:	482f      	ldr	r0, [pc, #188]	; (ffc4 <bt_init+0x190>)
    ff08:	3101      	adds	r1, #1
    ff0a:	f00b fdf3 	bl	1baf4 <memcpy>
	net_buf_unref(rsp);
    ff0e:	9801      	ldr	r0, [sp, #4]
    ff10:	f005 fb36 	bl	15580 <net_buf_unref>
		err = prng_init();
    ff14:	f000 fed6 	bl	10cc4 <prng_init>
		if (err) {
    ff18:	4604      	mov	r4, r0
    ff1a:	2800      	cmp	r0, #0
    ff1c:	d148      	bne.n	ffb0 <bt_init+0x17c>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    ff1e:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
    ff22:	069f      	lsls	r7, r3, #26
    ff24:	d40e      	bmi.n	ff44 <bt_init+0x110>
		BT_WARN("Controller to host flow control not supported");
    ff26:	2157      	movs	r1, #87	; 0x57
    ff28:	4827      	ldr	r0, [pc, #156]	; (ffc8 <bt_init+0x194>)
    ff2a:	f00a fb9f 	bl	1a66c <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
    ff2e:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    ff32:	065e      	lsls	r6, r3, #25
    ff34:	d44c      	bmi.n	ffd0 <bt_init+0x19c>
		BT_ERR("Non-LE capable controller detected!");
    ff36:	2145      	movs	r1, #69	; 0x45
    ff38:	4824      	ldr	r0, [pc, #144]	; (ffcc <bt_init+0x198>)
    ff3a:	f00a fb97 	bl	1a66c <printk>
		return -ENODEV;
    ff3e:	f06f 0412 	mvn.w	r4, #18
    ff42:	e035      	b.n	ffb0 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    ff44:	2107      	movs	r1, #7
    ff46:	f640 4033 	movw	r0, #3123	; 0xc33
    ff4a:	f7fe ff31 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
    ff4e:	4607      	mov	r7, r0
    ff50:	b910      	cbnz	r0, ff58 <bt_init+0x124>
		return -ENOBUFS;
    ff52:	f06f 0436 	mvn.w	r4, #54	; 0x36
    ff56:	e02b      	b.n	ffb0 <bt_init+0x17c>
	return net_buf_simple_add(&buf->b, len);
    ff58:	2107      	movs	r1, #7
    ff5a:	3008      	adds	r0, #8
    ff5c:	f005 fc26 	bl	157ac <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    ff60:	4621      	mov	r1, r4
    ff62:	2207      	movs	r2, #7
    ff64:	4606      	mov	r6, r0
    ff66:	f00b fdf0 	bl	1bb4a <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    ff6a:	231b      	movs	r3, #27
    ff6c:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    ff6e:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    ff70:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    ff72:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    ff74:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    ff76:	4639      	mov	r1, r7
    ff78:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    ff7c:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    ff7e:	f7fe ff61 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
    ff82:	4604      	mov	r4, r0
    ff84:	b9a0      	cbnz	r0, ffb0 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    ff86:	2101      	movs	r1, #1
    ff88:	f640 4031 	movw	r0, #3121	; 0xc31
    ff8c:	f7fe ff10 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
    ff90:	4606      	mov	r6, r0
    ff92:	2800      	cmp	r0, #0
    ff94:	d0dd      	beq.n	ff52 <bt_init+0x11e>
	return net_buf_simple_add_u8(&buf->b, val);
    ff96:	2101      	movs	r1, #1
    ff98:	3008      	adds	r0, #8
    ff9a:	f00d f8f5 	bl	1d188 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    ff9e:	4622      	mov	r2, r4
    ffa0:	4631      	mov	r1, r6
    ffa2:	f640 4031 	movw	r0, #3121	; 0xc31
    ffa6:	f7fe ff4d 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
    ffaa:	4604      	mov	r4, r0
    ffac:	2800      	cmp	r0, #0
    ffae:	d0be      	beq.n	ff2e <bt_init+0xfa>
}
    ffb0:	4620      	mov	r0, r4
    ffb2:	b003      	add	sp, #12
    ffb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffb6:	bf00      	nop
    ffb8:	20008000 	.word	0x20008000
    ffbc:	2000ab44 	.word	0x2000ab44
    ffc0:	2000803c 	.word	0x2000803c
    ffc4:	20008044 	.word	0x20008044
    ffc8:	000214b0 	.word	0x000214b0
    ffcc:	000214e3 	.word	0x000214e3
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    ffd0:	2100      	movs	r1, #0
    ffd2:	f242 0003 	movw	r0, #8195	; 0x2003
    ffd6:	aa01      	add	r2, sp, #4
    ffd8:	f7fe ff34 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
    ffdc:	4604      	mov	r4, r0
    ffde:	2800      	cmp	r0, #0
    ffe0:	d1e6      	bne.n	ffb0 <bt_init+0x17c>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    ffe2:	9b01      	ldr	r3, [sp, #4]
    ffe4:	2208      	movs	r2, #8
    ffe6:	6899      	ldr	r1, [r3, #8]
    ffe8:	48a6      	ldr	r0, [pc, #664]	; (10284 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x284>)
    ffea:	3101      	adds	r1, #1
    ffec:	f00b fd82 	bl	1baf4 <memcpy>
	net_buf_unref(rsp);
    fff0:	9801      	ldr	r0, [sp, #4]
    fff2:	f005 fac5 	bl	15580 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    fff6:	4621      	mov	r1, r4
    fff8:	f242 0002 	movw	r0, #8194	; 0x2002
    fffc:	aa01      	add	r2, sp, #4
    fffe:	f7fe ff21 	bl	ee44 <bt_hci_cmd_send_sync>
		if (err) {
   10002:	4604      	mov	r4, r0
   10004:	2800      	cmp	r0, #0
   10006:	d1d3      	bne.n	ffb0 <bt_init+0x17c>
		le_read_buffer_size_complete(rsp);
   10008:	9b01      	ldr	r3, [sp, #4]
   1000a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   1000c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   10010:	b291      	uxth	r1, r2
   10012:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
   10016:	b121      	cbz	r1, 10022 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x22>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   10018:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1001a:	489b      	ldr	r0, [pc, #620]	; (10288 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x288>)
   1001c:	4611      	mov	r1, r2
   1001e:	f00d ff3a 	bl	1de96 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   10022:	9801      	ldr	r0, [sp, #4]
   10024:	f005 faac 	bl	15580 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   10028:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
   1002c:	f016 0620 	ands.w	r6, r6, #32
   10030:	f000 80d4 	beq.w	101dc <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1dc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   10034:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   10038:	071c      	lsls	r4, r3, #28
   1003a:	d512      	bpl.n	10062 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x62>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1003c:	2100      	movs	r1, #0
   1003e:	f242 001c 	movw	r0, #8220	; 0x201c
   10042:	aa01      	add	r2, sp, #4
   10044:	f7fe fefe 	bl	ee44 <bt_hci_cmd_send_sync>
		if (err) {
   10048:	4604      	mov	r4, r0
   1004a:	2800      	cmp	r0, #0
   1004c:	d1b0      	bne.n	ffb0 <bt_init+0x17c>
		le_read_supp_states_complete(rsp);
   1004e:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10050:	6883      	ldr	r3, [r0, #8]
   10052:	f8d3 2001 	ldr.w	r2, [r3, #1]
   10056:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1005a:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
   1005e:	f005 fa8f 	bl	15580 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   10062:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
   10066:	0698      	lsls	r0, r3, #26
   10068:	d524      	bpl.n	100b4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xb4>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1006a:	4668      	mov	r0, sp
   1006c:	f10d 0102 	add.w	r1, sp, #2
   10070:	f7fe ff4a 	bl	ef08 <hci_le_read_max_data_len>
		if (err) {
   10074:	4604      	mov	r4, r0
   10076:	2800      	cmp	r0, #0
   10078:	d19a      	bne.n	ffb0 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1007a:	2104      	movs	r1, #4
   1007c:	f242 0024 	movw	r0, #8228	; 0x2024
   10080:	f7fe fe96 	bl	edb0 <bt_hci_cmd_create>
		if (!buf) {
   10084:	4606      	mov	r6, r0
   10086:	2800      	cmp	r0, #0
   10088:	f43f af63 	beq.w	ff52 <bt_init+0x11e>
	return net_buf_simple_add(&buf->b, len);
   1008c:	2104      	movs	r1, #4
   1008e:	3008      	adds	r0, #8
   10090:	f005 fb8c 	bl	157ac <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   10094:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   10098:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1009a:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1009c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   100a0:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   100a2:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   100a4:	f242 0024 	movw	r0, #8228	; 0x2024
   100a8:	f7fe fecc 	bl	ee44 <bt_hci_cmd_send_sync>
		if (err) {
   100ac:	4604      	mov	r4, r0
   100ae:	2800      	cmp	r0, #0
   100b0:	f47f af7e 	bne.w	ffb0 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   100b4:	2108      	movs	r1, #8
   100b6:	f242 0001 	movw	r0, #8193	; 0x2001
   100ba:	f7fe fe79 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
   100be:	4604      	mov	r4, r0
   100c0:	2800      	cmp	r0, #0
   100c2:	f43f af46 	beq.w	ff52 <bt_init+0x11e>
   100c6:	2108      	movs	r1, #8
   100c8:	4408      	add	r0, r1
   100ca:	f005 fb6f 	bl	157ac <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   100ce:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   100d2:	f012 0f02 	tst.w	r2, #2
   100d6:	bf14      	ite	ne
   100d8:	232f      	movne	r3, #47	; 0x2f
   100da:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   100dc:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   100de:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   100e2:	bf48      	it	mi
   100e4:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   100e8:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
   100ec:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   100f0:	bf18      	it	ne
   100f2:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   100f6:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   100f8:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   100fc:	4621      	mov	r1, r4
   100fe:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   10100:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   10102:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   10104:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   10106:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   10108:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1010a:	71c2      	strb	r2, [r0, #7]
   1010c:	f242 0001 	movw	r0, #8193	; 0x2001
   10110:	f7fe fe98 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
   10114:	4604      	mov	r4, r0
   10116:	2800      	cmp	r0, #0
   10118:	f47f af4a 	bne.w	ffb0 <bt_init+0x17c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1011c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   10120:	069a      	lsls	r2, r3, #26
   10122:	d41e      	bmi.n	10162 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x162>
	if (bt_dev.le.acl_mtu) {
   10124:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
   10128:	b9d9      	cbnz	r1, 10162 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x162>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   1012a:	f241 0005 	movw	r0, #4101	; 0x1005
   1012e:	aa01      	add	r2, sp, #4
   10130:	f7fe fe88 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
   10134:	4604      	mov	r4, r0
   10136:	2800      	cmp	r0, #0
   10138:	f47f af3a 	bne.w	ffb0 <bt_init+0x17c>
	if (bt_dev.le.acl_mtu) {
   1013c:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
   10140:	b963      	cbnz	r3, 1015c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x15c>
   10142:	9b01      	ldr	r3, [sp, #4]
   10144:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   10146:	785a      	ldrb	r2, [r3, #1]
   10148:	7899      	ldrb	r1, [r3, #2]
   1014a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1014e:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   10152:	889a      	ldrh	r2, [r3, #4]
   10154:	484c      	ldr	r0, [pc, #304]	; (10288 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x288>)
   10156:	4611      	mov	r1, r2
   10158:	f00d fe9d 	bl	1de96 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   1015c:	9801      	ldr	r0, [sp, #4]
   1015e:	f005 fa0f 	bl	15580 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   10162:	2108      	movs	r1, #8
   10164:	f640 4001 	movw	r0, #3073	; 0xc01
   10168:	f7fe fe22 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
   1016c:	4604      	mov	r4, r0
   1016e:	2800      	cmp	r0, #0
   10170:	f43f aeef 	beq.w	ff52 <bt_init+0x11e>
   10174:	2108      	movs	r1, #8
   10176:	4408      	add	r0, r1
   10178:	f005 fb18 	bl	157ac <net_buf_simple_add>
	dst[0] = val;
   1017c:	2310      	movs	r3, #16
   1017e:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   10180:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   10182:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   10184:	7043      	strb	r3, [r0, #1]
   10186:	2602      	movs	r6, #2
   10188:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1018a:	4621      	mov	r1, r4
	dst[0] = val;
   1018c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1018e:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   10190:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   10192:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   10194:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   10196:	71c3      	strb	r3, [r0, #7]
   10198:	f640 4001 	movw	r0, #3073	; 0xc01
   1019c:	f7fe fe52 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
   101a0:	4604      	mov	r4, r0
   101a2:	2800      	cmp	r0, #0
   101a4:	f47f af04 	bne.w	ffb0 <bt_init+0x17c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   101a8:	4601      	mov	r1, r0
   101aa:	aa01      	add	r2, sp, #4
   101ac:	f64f 4001 	movw	r0, #64513	; 0xfc01
   101b0:	f7fe fe48 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
   101b4:	4604      	mov	r4, r0
   101b6:	b360      	cbz	r0, 10212 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x212>
		BT_WARN("Vendor HCI extensions not available");
   101b8:	2157      	movs	r1, #87	; 0x57
   101ba:	4834      	ldr	r0, [pc, #208]	; (1028c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x28c>)
			BT_WARN("Failed to read supported vendor features");
   101bc:	f00a fa56 	bl	1a66c <printk>
		err = bt_conn_init();
   101c0:	f001 fcd0 	bl	11b64 <bt_conn_init>
		if (err) {
   101c4:	4604      	mov	r4, r0
   101c6:	2800      	cmp	r0, #0
   101c8:	f47f aef2 	bne.w	ffb0 <bt_init+0x17c>
		if (!bt_dev.id_count) {
   101cc:	79eb      	ldrb	r3, [r5, #7]
   101ce:	2b00      	cmp	r3, #0
   101d0:	d150      	bne.n	10274 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x274>
			BT_INFO("No ID address. App must call settings_load()");
   101d2:	2149      	movs	r1, #73	; 0x49
   101d4:	482e      	ldr	r0, [pc, #184]	; (10290 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x290>)
   101d6:	f00a fa49 	bl	1a66c <printk>
			return 0;
   101da:	e6e9      	b.n	ffb0 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   101dc:	2102      	movs	r1, #2
   101de:	f640 406d 	movw	r0, #3181	; 0xc6d
   101e2:	f7fe fde5 	bl	edb0 <bt_hci_cmd_create>
		if (!buf) {
   101e6:	4604      	mov	r4, r0
   101e8:	2800      	cmp	r0, #0
   101ea:	f43f aeb2 	beq.w	ff52 <bt_init+0x11e>
   101ee:	2102      	movs	r1, #2
   101f0:	3008      	adds	r0, #8
   101f2:	f005 fadb 	bl	157ac <net_buf_simple_add>
		cp_le->le = 0x01;
   101f6:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   101f8:	4621      	mov	r1, r4
		cp_le->le = 0x01;
   101fa:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   101fc:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   101fe:	4632      	mov	r2, r6
   10200:	f640 406d 	movw	r0, #3181	; 0xc6d
   10204:	f7fe fe1e 	bl	ee44 <bt_hci_cmd_send_sync>
		if (err) {
   10208:	4604      	mov	r4, r0
   1020a:	2800      	cmp	r0, #0
   1020c:	f43f af12 	beq.w	10034 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x34>
   10210:	e6ce      	b.n	ffb0 <bt_init+0x17c>
	net_buf_unref(rsp);
   10212:	9801      	ldr	r0, [sp, #4]
   10214:	f005 f9b4 	bl	15580 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   10218:	4621      	mov	r1, r4
   1021a:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1021e:	aa01      	add	r2, sp, #4
   10220:	f7fe fe10 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
   10224:	4604      	mov	r4, r0
   10226:	b110      	cbz	r0, 1022e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x22e>
		BT_WARN("Failed to read supported vendor commands");
   10228:	2157      	movs	r1, #87	; 0x57
   1022a:	481a      	ldr	r0, [pc, #104]	; (10294 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x294>)
   1022c:	e7c6      	b.n	101bc <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1bc>
	rp.cmds = (void *)rsp->data;
   1022e:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   10230:	4632      	mov	r2, r6
   10232:	6899      	ldr	r1, [r3, #8]
   10234:	4818      	ldr	r0, [pc, #96]	; (10298 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x298>)
   10236:	3101      	adds	r1, #1
   10238:	f00b fc5c 	bl	1baf4 <memcpy>
	net_buf_unref(rsp);
   1023c:	9801      	ldr	r0, [sp, #4]
   1023e:	f005 f99f 	bl	15580 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   10242:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
   10246:	075b      	lsls	r3, r3, #29
   10248:	d5ba      	bpl.n	101c0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1c0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1024a:	4621      	mov	r1, r4
   1024c:	f64f 4003 	movw	r0, #64515	; 0xfc03
   10250:	aa01      	add	r2, sp, #4
   10252:	f7fe fdf7 	bl	ee44 <bt_hci_cmd_send_sync>
		if (err) {
   10256:	b110      	cbz	r0, 1025e <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x25e>
			BT_WARN("Failed to read supported vendor features");
   10258:	2157      	movs	r1, #87	; 0x57
   1025a:	4810      	ldr	r0, [pc, #64]	; (1029c <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x29c>)
   1025c:	e7ae      	b.n	101bc <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1bc>
		memcpy(bt_dev.vs_features, rp.feat->features,
   1025e:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
   10260:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   10262:	480f      	ldr	r0, [pc, #60]	; (102a0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2a0>)
   10264:	6899      	ldr	r1, [r3, #8]
   10266:	4411      	add	r1, r2
   10268:	f00b fc44 	bl	1baf4 <memcpy>
		net_buf_unref(rsp);
   1026c:	9801      	ldr	r0, [sp, #4]
   1026e:	f005 f987 	bl	15580 <net_buf_unref>
   10272:	e7a5      	b.n	101c0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x1c0>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   10274:	2104      	movs	r1, #4
   10276:	480b      	ldr	r0, [pc, #44]	; (102a4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x2a4>)
   10278:	f00b fd2f 	bl	1bcda <atomic_or>
	bt_finalize_init();
   1027c:	f7ff fdce 	bl	fe1c <bt_finalize_init>
	return 0;
   10280:	e696      	b.n	ffb0 <bt_init+0x17c>
   10282:	bf00      	nop
   10284:	20008098 	.word	0x20008098
   10288:	200080c8 	.word	0x200080c8
   1028c:	0002150c 	.word	0x0002150c
   10290:	00021591 	.word	0x00021591
   10294:	00021535 	.word	0x00021535
   10298:	20008085 	.word	0x20008085
   1029c:	00021563 	.word	0x00021563
   102a0:	20008084 	.word	0x20008084
   102a4:	20008094 	.word	0x20008094

000102a8 <init_work>:
{
   102a8:	b510      	push	{r4, lr}
	err = bt_init();
   102aa:	f7ff fdc3 	bl	fe34 <bt_init>
	if (ready_cb) {
   102ae:	4b03      	ldr	r3, [pc, #12]	; (102bc <init_work+0x14>)
   102b0:	681b      	ldr	r3, [r3, #0]
   102b2:	b113      	cbz	r3, 102ba <init_work+0x12>
}
   102b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   102b8:	4718      	bx	r3
}
   102ba:	bd10      	pop	{r4, pc}
   102bc:	2000ab38 	.word	0x2000ab38

000102c0 <bt_enable>:
{
   102c0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
   102c4:	4d35      	ldr	r5, [pc, #212]	; (1039c <bt_enable+0xdc>)
{
   102c6:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   102c8:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
{
   102cc:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
   102ce:	b94b      	cbnz	r3, 102e4 <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
   102d0:	2145      	movs	r1, #69	; 0x45
   102d2:	4833      	ldr	r0, [pc, #204]	; (103a0 <bt_enable+0xe0>)
   102d4:	f00a f9ca 	bl	1a66c <printk>
		return -ENODEV;
   102d8:	f06f 0412 	mvn.w	r4, #18
}
   102dc:	4620      	mov	r0, r4
   102de:	b008      	add	sp, #32
   102e0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   102e4:	2101      	movs	r1, #1
   102e6:	f105 0094 	add.w	r0, r5, #148	; 0x94
   102ea:	f00b fcf6 	bl	1bcda <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   102ee:	07c2      	lsls	r2, r0, #31
   102f0:	d451      	bmi.n	10396 <bt_enable+0xd6>
		err = bt_settings_init();
   102f2:	f7fe f913 	bl	e51c <bt_settings_init>
		if (err) {
   102f6:	4604      	mov	r4, r0
   102f8:	2800      	cmp	r0, #0
   102fa:	d1ef      	bne.n	102dc <bt_enable+0x1c>
	ready_cb = cb;
   102fc:	4b29      	ldr	r3, [pc, #164]	; (103a4 <bt_enable+0xe4>)
   102fe:	f04f 0800 	mov.w	r8, #0
   10302:	f04f 0900 	mov.w	r9, #0
   10306:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10308:	f06f 0308 	mvn.w	r3, #8
   1030c:	e9cd 0000 	strd	r0, r0, [sp]
   10310:	e9cd 0302 	strd	r0, r3, [sp, #8]
   10314:	9004      	str	r0, [sp, #16]
   10316:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1031a:	e9cd 8906 	strd	r8, r9, [sp, #24]
   1031e:	4b22      	ldr	r3, [pc, #136]	; (103a8 <bt_enable+0xe8>)
   10320:	4922      	ldr	r1, [pc, #136]	; (103ac <bt_enable+0xec>)
   10322:	4823      	ldr	r0, [pc, #140]	; (103b0 <bt_enable+0xf0>)
   10324:	f009 f8f2 	bl	1950c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   10328:	4922      	ldr	r1, [pc, #136]	; (103b4 <bt_enable+0xf4>)
   1032a:	4821      	ldr	r0, [pc, #132]	; (103b0 <bt_enable+0xf0>)
   1032c:	f00d fdcd 	bl	1deca <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10330:	f06f 0307 	mvn.w	r3, #7
   10334:	f640 0298 	movw	r2, #2200	; 0x898
   10338:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1033c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   10340:	e9cd 4400 	strd	r4, r4, [sp]
   10344:	4b1c      	ldr	r3, [pc, #112]	; (103b8 <bt_enable+0xf8>)
   10346:	491d      	ldr	r1, [pc, #116]	; (103bc <bt_enable+0xfc>)
   10348:	9404      	str	r4, [sp, #16]
   1034a:	481d      	ldr	r0, [pc, #116]	; (103c0 <bt_enable+0x100>)
   1034c:	f009 f8de 	bl	1950c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   10350:	491c      	ldr	r1, [pc, #112]	; (103c4 <bt_enable+0x104>)
   10352:	481b      	ldr	r0, [pc, #108]	; (103c0 <bt_enable+0x100>)
   10354:	f00d fdb9 	bl	1deca <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   10358:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
   1035c:	68db      	ldr	r3, [r3, #12]
   1035e:	4798      	blx	r3
	if (err) {
   10360:	4604      	mov	r4, r0
   10362:	b128      	cbz	r0, 10370 <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
   10364:	4602      	mov	r2, r0
   10366:	2145      	movs	r1, #69	; 0x45
   10368:	4817      	ldr	r0, [pc, #92]	; (103c8 <bt_enable+0x108>)
   1036a:	f00a f97f 	bl	1a66c <printk>
		return err;
   1036e:	e7b5      	b.n	102dc <bt_enable+0x1c>
	if (!cb) {
   10370:	b926      	cbnz	r6, 1037c <bt_enable+0xbc>
}
   10372:	b008      	add	sp, #32
   10374:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
   10378:	f7ff bd5c 	b.w	fe34 <bt_init>
   1037c:	2101      	movs	r1, #1
   1037e:	f105 0090 	add.w	r0, r5, #144	; 0x90
   10382:	f00b fcaa 	bl	1bcda <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   10386:	07c3      	lsls	r3, r0, #31
   10388:	d4a8      	bmi.n	102dc <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
   1038a:	4810      	ldr	r0, [pc, #64]	; (103cc <bt_enable+0x10c>)
   1038c:	f105 0188 	add.w	r1, r5, #136	; 0x88
   10390:	f00d fd29 	bl	1dde6 <k_queue_append>
   10394:	e7a2      	b.n	102dc <bt_enable+0x1c>
		return -EALREADY;
   10396:	f06f 0444 	mvn.w	r4, #68	; 0x44
   1039a:	e79f      	b.n	102dc <bt_enable+0x1c>
   1039c:	20008000 	.word	0x20008000
   103a0:	000215c3 	.word	0x000215c3
   103a4:	2000ab38 	.word	0x2000ab38
   103a8:	0000fbb1 	.word	0x0000fbb1
   103ac:	2000da50 	.word	0x2000da50
   103b0:	20008b40 	.word	0x20008b40
   103b4:	000215e1 	.word	0x000215e1
   103b8:	0000e9c9 	.word	0x0000e9c9
   103bc:	2000d1b8 	.word	0x2000d1b8
   103c0:	20008ab0 	.word	0x20008ab0
   103c4:	000215e7 	.word	0x000215e7
   103c8:	000215ed 	.word	0x000215ed
   103cc:	2000a560 	.word	0x2000a560

000103d0 <bt_get_name>:
}
   103d0:	4800      	ldr	r0, [pc, #0]	; (103d4 <bt_get_name+0x4>)
   103d2:	4770      	bx	lr
   103d4:	0001f63a 	.word	0x0001f63a

000103d8 <bt_id_create>:
{
   103d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   103da:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   103dc:	4605      	mov	r5, r0
   103de:	b918      	cbnz	r0, 103e8 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   103e0:	b314      	cbz	r4, 10428 <bt_id_create+0x50>
		return -EINVAL;
   103e2:	f06f 0415 	mvn.w	r4, #21
   103e6:	e01c      	b.n	10422 <bt_id_create+0x4a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   103e8:	2300      	movs	r3, #0
   103ea:	4669      	mov	r1, sp
   103ec:	9300      	str	r3, [sp, #0]
   103ee:	f8cd 3003 	str.w	r3, [sp, #3]
   103f2:	f00b fc7d 	bl	1bcf0 <bt_addr_le_cmp>
   103f6:	2800      	cmp	r0, #0
   103f8:	d0f2      	beq.n	103e0 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   103fa:	782b      	ldrb	r3, [r5, #0]
   103fc:	2b01      	cmp	r3, #1
   103fe:	d104      	bne.n	1040a <bt_id_create+0x32>
   10400:	79ab      	ldrb	r3, [r5, #6]
   10402:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10406:	2bc0      	cmp	r3, #192	; 0xc0
   10408:	d004      	beq.n	10414 <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
   1040a:	2145      	movs	r1, #69	; 0x45
   1040c:	480d      	ldr	r0, [pc, #52]	; (10444 <bt_id_create+0x6c>)
   1040e:	f00a f92d 	bl	1a66c <printk>
			return -EINVAL;
   10412:	e7e6      	b.n	103e2 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   10414:	4628      	mov	r0, r5
   10416:	f7fe f949 	bl	e6ac <id_find>
   1041a:	2800      	cmp	r0, #0
   1041c:	dbe0      	blt.n	103e0 <bt_id_create+0x8>
			return -EALREADY;
   1041e:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
   10422:	4620      	mov	r0, r4
   10424:	b003      	add	sp, #12
   10426:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   10428:	4b07      	ldr	r3, [pc, #28]	; (10448 <bt_id_create+0x70>)
   1042a:	79dc      	ldrb	r4, [r3, #7]
   1042c:	2c01      	cmp	r4, #1
   1042e:	d006      	beq.n	1043e <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
   10430:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   10432:	4629      	mov	r1, r5
   10434:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   10436:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   10438:	f7fe fa90 	bl	e95c <id_create.constprop.0>
	return new_id;
   1043c:	e7f1      	b.n	10422 <bt_id_create+0x4a>
		return -ENOMEM;
   1043e:	f06f 040b 	mvn.w	r4, #11
   10442:	e7ee      	b.n	10422 <bt_id_create+0x4a>
   10444:	0002160e 	.word	0x0002160e
   10448:	20008000 	.word	0x20008000

0001044c <bt_setup_public_id_addr>:
{
   1044c:	b570      	push	{r4, r5, r6, lr}
   1044e:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   10450:	2100      	movs	r1, #0
   10452:	f241 0009 	movw	r0, #4105	; 0x1009
   10456:	aa01      	add	r2, sp, #4
   10458:	f7fe fcf4 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
   1045c:	4e1d      	ldr	r6, [pc, #116]	; (104d4 <bt_setup_public_id_addr+0x88>)
   1045e:	4604      	mov	r4, r0
   10460:	b138      	cbz	r0, 10472 <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
   10462:	2157      	movs	r1, #87	; 0x57
   10464:	481c      	ldr	r0, [pc, #112]	; (104d8 <bt_setup_public_id_addr+0x8c>)
   10466:	f00a f901 	bl	1a66c <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
   1046a:	2300      	movs	r3, #0
   1046c:	71f3      	strb	r3, [r6, #7]
}
   1046e:	b006      	add	sp, #24
   10470:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   10472:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   10474:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   10476:	689d      	ldr	r5, [r3, #8]
   10478:	a904      	add	r1, sp, #16
   1047a:	3501      	adds	r5, #1
   1047c:	9004      	str	r0, [sp, #16]
   1047e:	f8ad 0014 	strh.w	r0, [sp, #20]
   10482:	4628      	mov	r0, r5
   10484:	f00b fb25 	bl	1bad2 <memcmp>
   10488:	b918      	cbnz	r0, 10492 <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
   1048a:	9801      	ldr	r0, [sp, #4]
   1048c:	f005 f878 	bl	15580 <net_buf_unref>
   10490:	e7eb      	b.n	1046a <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   10492:	4b12      	ldr	r3, [pc, #72]	; (104dc <bt_setup_public_id_addr+0x90>)
   10494:	2206      	movs	r2, #6
   10496:	f8d3 0007 	ldr.w	r0, [r3, #7]
   1049a:	f8b3 300b 	ldrh.w	r3, [r3, #11]
   1049e:	9002      	str	r0, [sp, #8]
   104a0:	a902      	add	r1, sp, #8
   104a2:	4628      	mov	r0, r5
   104a4:	f8ad 300c 	strh.w	r3, [sp, #12]
   104a8:	f00b fb13 	bl	1bad2 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   104ac:	2800      	cmp	r0, #0
   104ae:	d0ec      	beq.n	1048a <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
   104b0:	4629      	mov	r1, r5
   104b2:	2206      	movs	r2, #6
   104b4:	f10d 0011 	add.w	r0, sp, #17
   104b8:	f00b fb1c 	bl	1baf4 <memcpy>
	net_buf_unref(rsp);
   104bc:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   104be:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
   104c2:	f005 f85d 	bl	15580 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   104c6:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   104c8:	4620      	mov	r0, r4
   104ca:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
   104cc:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   104ce:	f7fe fa45 	bl	e95c <id_create.constprop.0>
   104d2:	e7cc      	b.n	1046e <bt_setup_public_id_addr+0x22>
   104d4:	20008000 	.word	0x20008000
   104d8:	00021641 	.word	0x00021641
   104dc:	0001e5e0 	.word	0x0001e5e0

000104e0 <bt_read_static_addr>:
{
   104e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   104e4:	4b1c      	ldr	r3, [pc, #112]	; (10558 <bt_read_static_addr+0x78>)
{
   104e6:	4607      	mov	r7, r0
   104e8:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   104ec:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   104ee:	f014 0401 	ands.w	r4, r4, #1
   104f2:	d104      	bne.n	104fe <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
   104f4:	2157      	movs	r1, #87	; 0x57
   104f6:	4819      	ldr	r0, [pc, #100]	; (1055c <bt_read_static_addr+0x7c>)
		BT_WARN("No static addresses stored in controller");
   104f8:	f00a f8b8 	bl	1a66c <printk>
   104fc:	e00c      	b.n	10518 <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   104fe:	2100      	movs	r1, #0
   10500:	f64f 4009 	movw	r0, #64521	; 0xfc09
   10504:	aa01      	add	r2, sp, #4
   10506:	f7fe fc9d 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
   1050a:	4605      	mov	r5, r0
   1050c:	b140      	cbz	r0, 10520 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
   1050e:	2157      	movs	r1, #87	; 0x57
   10510:	4813      	ldr	r0, [pc, #76]	; (10560 <bt_read_static_addr+0x80>)
   10512:	f00a f8ab 	bl	1a66c <printk>
		return 0;
   10516:	2400      	movs	r4, #0
}
   10518:	4620      	mov	r0, r4
   1051a:	b002      	add	sp, #8
   1051c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10520:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
   10524:	9b01      	ldr	r3, [sp, #4]
   10526:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   10528:	785c      	ldrb	r4, [r3, #1]
   1052a:	42b4      	cmp	r4, r6
   1052c:	bf28      	it	cs
   1052e:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10530:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   10532:	42a5      	cmp	r5, r4
   10534:	db07      	blt.n	10546 <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
   10536:	9801      	ldr	r0, [sp, #4]
   10538:	f005 f822 	bl	15580 <net_buf_unref>
	if (!cnt) {
   1053c:	2c00      	cmp	r4, #0
   1053e:	d1eb      	bne.n	10518 <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
   10540:	2157      	movs	r1, #87	; 0x57
   10542:	4808      	ldr	r0, [pc, #32]	; (10564 <bt_read_static_addr+0x84>)
   10544:	e7d8      	b.n	104f8 <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   10546:	fb08 7005 	mla	r0, r8, r5, r7
   1054a:	2216      	movs	r2, #22
   1054c:	4631      	mov	r1, r6
   1054e:	f00b fad1 	bl	1baf4 <memcpy>
	for (i = 0; i < cnt; i++) {
   10552:	3501      	adds	r5, #1
   10554:	e7ed      	b.n	10532 <bt_read_static_addr+0x52>
   10556:	bf00      	nop
   10558:	20008000 	.word	0x20008000
   1055c:	00021664 	.word	0x00021664
   10560:	00021695 	.word	0x00021695
   10564:	000216ba 	.word	0x000216ba

00010568 <bt_setup_random_id_addr>:
{
   10568:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
   1056a:	4d15      	ldr	r5, [pc, #84]	; (105c0 <bt_setup_random_id_addr+0x58>)
{
   1056c:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   1056e:	79ec      	ldrb	r4, [r5, #7]
   10570:	b9f4      	cbnz	r4, 105b0 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   10572:	2101      	movs	r1, #1
   10574:	a802      	add	r0, sp, #8
   10576:	f7ff ffb3 	bl	104e0 <bt_read_static_addr>
   1057a:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
   1057c:	b1c0      	cbz	r0, 105b0 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1057e:	2716      	movs	r7, #22
   10580:	b2e6      	uxtb	r6, r4
   10582:	ab02      	add	r3, sp, #8
   10584:	2206      	movs	r2, #6
   10586:	fb07 3106 	mla	r1, r7, r6, r3
   1058a:	f10d 0001 	add.w	r0, sp, #1
   1058e:	f00b fab1 	bl	1baf4 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   10592:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
   10594:	4669      	mov	r1, sp
   10596:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   10598:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1059c:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
   1059e:	f7fe f9dd 	bl	e95c <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   105a2:	79ea      	ldrb	r2, [r5, #7]
   105a4:	b2e3      	uxtb	r3, r4
   105a6:	429a      	cmp	r2, r3
   105a8:	d8ea      	bhi.n	10580 <bt_setup_random_id_addr+0x18>
}
   105aa:	2000      	movs	r0, #0
   105ac:	b009      	add	sp, #36	; 0x24
   105ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   105b0:	2100      	movs	r1, #0
   105b2:	4608      	mov	r0, r1
}
   105b4:	b009      	add	sp, #36	; 0x24
   105b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   105ba:	f7ff bf0d 	b.w	103d8 <bt_id_create>
   105be:	bf00      	nop
   105c0:	20008000 	.word	0x20008000

000105c4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   105c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   105c8:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   105ca:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   105cc:	690d      	ldr	r5, [r1, #16]
{
   105ce:	b08f      	sub	sp, #60	; 0x3c
	bool dir_adv = (param->peer != NULL), scannable;
   105d0:	ebb5 0b03 	subs.w	fp, r5, r3
{
   105d4:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   105d6:	4884      	ldr	r0, [pc, #528]	; (107e8 <bt_le_adv_start_legacy+0x224>)
	bool dir_adv = (param->peer != NULL), scannable;
   105d8:	bf18      	it	ne
   105da:	f04f 0b01 	movne.w	fp, #1
	struct bt_conn *conn = NULL;
   105de:	9307      	str	r3, [sp, #28]
   105e0:	f00b fb75 	bl	1bcce <atomic_get>
{
   105e4:	4691      	mov	r9, r2
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   105e6:	0782      	lsls	r2, r0, #30
{
   105e8:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   105ea:	f140 80ef 	bpl.w	107cc <bt_le_adv_start_legacy+0x208>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   105ee:	4608      	mov	r0, r1
   105f0:	f7fe f874 	bl	e6dc <valid_adv_param>
   105f4:	4607      	mov	r7, r0
   105f6:	2800      	cmp	r0, #0
   105f8:	f000 80eb 	beq.w	107d2 <bt_le_adv_start_legacy+0x20e>
   105fc:	487a      	ldr	r0, [pc, #488]	; (107e8 <bt_le_adv_start_legacy+0x224>)
   105fe:	f00b fb66 	bl	1bcce <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
   10602:	0503      	lsls	r3, r0, #20
   10604:	d402      	bmi.n	1060c <bt_le_adv_start_legacy+0x48>
   10606:	4878      	ldr	r0, [pc, #480]	; (107e8 <bt_le_adv_start_legacy+0x224>)
   10608:	f00b fb61 	bl	1bcce <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1060c:	f106 0810 	add.w	r8, r6, #16
   10610:	4640      	mov	r0, r8
   10612:	f00b fb5c 	bl	1bcce <atomic_get>
   10616:	f3c0 1180 	ubfx	r1, r0, #6, #1
   1061a:	0640      	lsls	r0, r0, #25
   1061c:	f100 80dc 	bmi.w	107d8 <bt_le_adv_start_legacy+0x214>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   10620:	220f      	movs	r2, #15
   10622:	a80a      	add	r0, sp, #40	; 0x28
   10624:	9105      	str	r1, [sp, #20]
   10626:	f00b fa90 	bl	1bb4a <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1062a:	68a3      	ldr	r3, [r4, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
   1062c:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1062e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   10632:	68e3      	ldr	r3, [r4, #12]
   10634:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   10638:	f00b fb3a 	bl	1bcb0 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
   1063c:	7832      	ldrb	r2, [r6, #0]
   1063e:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   10640:	9905      	ldr	r1, [sp, #20]
	if (adv->id != param->id) {
   10642:	429a      	cmp	r2, r3
	set_param.channel_map  = get_adv_channel_map(param->options);
   10644:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
   10648:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   1064c:	d004      	beq.n	10658 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1064e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10652:	4865      	ldr	r0, [pc, #404]	; (107e8 <bt_le_adv_start_legacy+0x224>)
   10654:	f00b fb4f 	bl	1bcf6 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   10658:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;
   1065a:	4b64      	ldr	r3, [pc, #400]	; (107ec <bt_le_adv_start_legacy+0x228>)
	adv->id = param->id;
   1065c:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   1065e:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
   10662:	465a      	mov	r2, fp
   10664:	6861      	ldr	r1, [r4, #4]
   10666:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   1066a:	f7fe fcd7 	bl	f01c <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
   1066e:	4683      	mov	fp, r0
   10670:	2800      	cmp	r0, #0
   10672:	d169      	bne.n	10748 <bt_le_adv_start_legacy+0x184>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
   10674:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   10678:	2d00      	cmp	r5, #0
   1067a:	d042      	beq.n	10702 <bt_le_adv_start_legacy+0x13e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1067c:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   1067e:	f00b fb29 	bl	1bcd4 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   10682:	6860      	ldr	r0, [r4, #4]
   10684:	07c1      	lsls	r1, r0, #31
   10686:	d544      	bpl.n	10712 <bt_le_adv_start_legacy+0x14e>
		scannable = true;

		if (dir_adv) {
   10688:	2d00      	cmp	r5, #0
   1068a:	d03f      	beq.n	1070c <bt_le_adv_start_legacy+0x148>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   1068c:	f010 0f10 	tst.w	r0, #16
   10690:	bf14      	ite	ne
   10692:	2304      	movne	r3, #4
   10694:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   10696:	6921      	ldr	r1, [r4, #16]
   10698:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1069c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   106a0:	f00b fb18 	bl	1bcd4 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   106a4:	210f      	movs	r1, #15
   106a6:	f242 0006 	movw	r0, #8198	; 0x2006
   106aa:	f7fe fb81 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
   106ae:	4683      	mov	fp, r0
   106b0:	2800      	cmp	r0, #0
   106b2:	f000 8094 	beq.w	107de <bt_le_adv_start_legacy+0x21a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   106b6:	220f      	movs	r2, #15
   106b8:	a90a      	add	r1, sp, #40	; 0x28
   106ba:	3008      	adds	r0, #8
   106bc:	f00c fd58 	bl	1d170 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   106c0:	2200      	movs	r2, #0
   106c2:	4659      	mov	r1, fp
   106c4:	f242 0006 	movw	r0, #8198	; 0x2006
   106c8:	f7fe fbbc 	bl	ee44 <bt_hci_cmd_send_sync>
	if (err) {
   106cc:	2800      	cmp	r0, #0
   106ce:	f040 8089 	bne.w	107e4 <bt_le_adv_start_legacy+0x220>
		return err;
	}

	if (!dir_adv) {
   106d2:	b34d      	cbz	r5, 10728 <bt_le_adv_start_legacy+0x164>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   106d4:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   106d6:	07da      	lsls	r2, r3, #31
   106d8:	d43a      	bmi.n	10750 <bt_le_adv_start_legacy+0x18c>
	return set_le_adv_enable_legacy(adv, enable);
   106da:	2101      	movs	r1, #1
   106dc:	4630      	mov	r0, r6
   106de:	f7fe fdf7 	bl	f2d0 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   106e2:	4683      	mov	fp, r0
   106e4:	2800      	cmp	r0, #0
   106e6:	d06a      	beq.n	107be <bt_le_adv_start_legacy+0x1fa>
		BT_ERR("Failed to start advertiser");
   106e8:	4841      	ldr	r0, [pc, #260]	; (107f0 <bt_le_adv_start_legacy+0x22c>)
   106ea:	2145      	movs	r1, #69	; 0x45
   106ec:	f009 ffbe 	bl	1a66c <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   106f0:	9807      	ldr	r0, [sp, #28]
   106f2:	b348      	cbz	r0, 10748 <bt_le_adv_start_legacy+0x184>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   106f4:	2100      	movs	r1, #0
   106f6:	f000 fddb 	bl	112b0 <bt_conn_set_state>
			bt_conn_unref(conn);
   106fa:	9807      	ldr	r0, [sp, #28]
   106fc:	f000 fdac 	bl	11258 <bt_conn_unref>
   10700:	e022      	b.n	10748 <bt_le_adv_start_legacy+0x184>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   10702:	9508      	str	r5, [sp, #32]
   10704:	a908      	add	r1, sp, #32
   10706:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
   1070a:	e7b8      	b.n	1067e <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
   1070c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   10710:	e7c8      	b.n	106a4 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   10712:	9b18      	ldr	r3, [sp, #96]	; 0x60
   10714:	b933      	cbnz	r3, 10724 <bt_le_adv_start_legacy+0x160>
   10716:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   1071a:	f1c7 0303 	rsb	r3, r7, #3
   1071e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   10722:	e7bf      	b.n	106a4 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   10724:	2701      	movs	r7, #1
   10726:	e7f8      	b.n	1071a <bt_le_adv_start_legacy+0x156>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   10728:	6863      	ldr	r3, [r4, #4]
   1072a:	4652      	mov	r2, sl
   1072c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   10730:	e9cd 7301 	strd	r7, r3, [sp, #4]
   10734:	9b19      	ldr	r3, [sp, #100]	; 0x64
   10736:	4649      	mov	r1, r9
   10738:	9300      	str	r3, [sp, #0]
   1073a:	4630      	mov	r0, r6
   1073c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1073e:	f7fe fd53 	bl	f1e8 <le_adv_update.constprop.0>
		if (err) {
   10742:	4683      	mov	fp, r0
   10744:	2800      	cmp	r0, #0
   10746:	d0c5      	beq.n	106d4 <bt_le_adv_start_legacy+0x110>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   10748:	4658      	mov	r0, fp
   1074a:	b00f      	add	sp, #60	; 0x3c
   1074c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
   10750:	4630      	mov	r0, r6
   10752:	a907      	add	r1, sp, #28
   10754:	f7fe fad8 	bl	ed08 <le_adv_start_add_conn>
		if (err) {
   10758:	4683      	mov	fp, r0
   1075a:	2800      	cmp	r0, #0
   1075c:	d0bd      	beq.n	106da <bt_le_adv_start_legacy+0x116>
			if (err == -ENOMEM && !dir_adv &&
   1075e:	f110 0f0c 	cmn.w	r0, #12
   10762:	d1f1      	bne.n	10748 <bt_le_adv_start_legacy+0x184>
   10764:	2d00      	cmp	r5, #0
   10766:	d1ef      	bne.n	10748 <bt_le_adv_start_legacy+0x184>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   10768:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   1076a:	079b      	lsls	r3, r3, #30
   1076c:	d4ec      	bmi.n	10748 <bt_le_adv_start_legacy+0x184>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1076e:	6860      	ldr	r0, [r4, #4]
   10770:	f080 0002 	eor.w	r0, r0, #2
   10774:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   10778:	f00b 0201 	and.w	r2, fp, #1
   1077c:	210c      	movs	r1, #12
   1077e:	4640      	mov	r0, r8
   10780:	f00b fac4 	bl	1bd0c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   10784:	6862      	ldr	r2, [r4, #4]
   10786:	2107      	movs	r1, #7
   10788:	4640      	mov	r0, r8
   1078a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1078e:	f00b fabd 	bl	1bd0c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   10792:	6862      	ldr	r2, [r4, #4]
   10794:	2108      	movs	r1, #8
   10796:	4640      	mov	r0, r8
   10798:	f002 0201 	and.w	r2, r2, #1
   1079c:	f00b fab6 	bl	1bd0c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   107a0:	463a      	mov	r2, r7
   107a2:	2109      	movs	r1, #9
   107a4:	4640      	mov	r0, r8
   107a6:	f00b fab1 	bl	1bd0c <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   107aa:	6862      	ldr	r2, [r4, #4]
   107ac:	210b      	movs	r1, #11
   107ae:	4640      	mov	r0, r8
   107b0:	f3c2 0280 	ubfx	r2, r2, #2, #1
   107b4:	f00b faaa 	bl	1bd0c <atomic_set_bit_to>
	return 0;
   107b8:	f04f 0b00 	mov.w	fp, #0
   107bc:	e7c4      	b.n	10748 <bt_le_adv_start_legacy+0x184>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   107be:	9807      	ldr	r0, [sp, #28]
   107c0:	b108      	cbz	r0, 107c6 <bt_le_adv_start_legacy+0x202>
		bt_conn_unref(conn);
   107c2:	f000 fd49 	bl	11258 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   107c6:	2d00      	cmp	r5, #0
   107c8:	d1d6      	bne.n	10778 <bt_le_adv_start_legacy+0x1b4>
   107ca:	e7d0      	b.n	1076e <bt_le_adv_start_legacy+0x1aa>
		return -EAGAIN;
   107cc:	f06f 0b0a 	mvn.w	fp, #10
   107d0:	e7ba      	b.n	10748 <bt_le_adv_start_legacy+0x184>
		return -EINVAL;
   107d2:	f06f 0b15 	mvn.w	fp, #21
   107d6:	e7b7      	b.n	10748 <bt_le_adv_start_legacy+0x184>
		return -EALREADY;
   107d8:	f06f 0b44 	mvn.w	fp, #68	; 0x44
   107dc:	e7b4      	b.n	10748 <bt_le_adv_start_legacy+0x184>
		return -ENOBUFS;
   107de:	f06f 0b36 	mvn.w	fp, #54	; 0x36
   107e2:	e7b1      	b.n	10748 <bt_le_adv_start_legacy+0x184>
   107e4:	4683      	mov	fp, r0
   107e6:	e7af      	b.n	10748 <bt_le_adv_start_legacy+0x184>
   107e8:	20008094 	.word	0x20008094
   107ec:	20008000 	.word	0x20008000
   107f0:	000216e8 	.word	0x000216e8

000107f4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   107f4:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   107f6:	9c04      	ldr	r4, [sp, #16]
   107f8:	e9cd 3400 	strd	r3, r4, [sp]
   107fc:	4613      	mov	r3, r2
   107fe:	460a      	mov	r2, r1
   10800:	4601      	mov	r1, r0
   10802:	4802      	ldr	r0, [pc, #8]	; (1080c <bt_le_adv_start+0x18>)
   10804:	f7ff fede 	bl	105c4 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
   10808:	b002      	add	sp, #8
   1080a:	bd10      	pop	{r4, pc}
   1080c:	20008018 	.word	0x20008018

00010810 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   10810:	b530      	push	{r4, r5, lr}
   10812:	4c29      	ldr	r4, [pc, #164]	; (108b8 <bt_le_adv_stop+0xa8>)
   10814:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   10818:	b085      	sub	sp, #20
   1081a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1081e:	f00b fa6a 	bl	1bcf6 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10822:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10826:	f00b fa52 	bl	1bcce <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1082a:	0641      	lsls	r1, r0, #25
   1082c:	d403      	bmi.n	10836 <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
   1082e:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   10830:	4620      	mov	r0, r4
   10832:	b005      	add	sp, #20
   10834:	bd30      	pop	{r4, r5, pc}
   10836:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1083a:	f00b fa48 	bl	1bcce <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1083e:	05c2      	lsls	r2, r0, #23
   10840:	d521      	bpl.n	10886 <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   10842:	2300      	movs	r3, #0
   10844:	4669      	mov	r1, sp
   10846:	f104 0021 	add.w	r0, r4, #33	; 0x21
   1084a:	9300      	str	r3, [sp, #0]
   1084c:	f8cd 3003 	str.w	r3, [sp, #3]
   10850:	f00b fa4e 	bl	1bcf0 <bt_addr_le_cmp>
   10854:	7e25      	ldrb	r5, [r4, #24]
   10856:	bb58      	cbnz	r0, 108b0 <bt_le_adv_stop+0xa0>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   10858:	4b18      	ldr	r3, [pc, #96]	; (108bc <bt_le_adv_stop+0xac>)
   1085a:	a902      	add	r1, sp, #8
   1085c:	889a      	ldrh	r2, [r3, #4]
   1085e:	6818      	ldr	r0, [r3, #0]
   10860:	f8ad 200c 	strh.w	r2, [sp, #12]
   10864:	2204      	movs	r2, #4
   10866:	799b      	ldrb	r3, [r3, #6]
   10868:	9002      	str	r0, [sp, #8]
   1086a:	f88d 300e 	strb.w	r3, [sp, #14]
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1086e:	4628      	mov	r0, r5
   10870:	f000 fe54 	bl	1151c <bt_conn_lookup_state_le>
   10874:	4604      	mov	r4, r0
	if (conn) {
   10876:	b130      	cbz	r0, 10886 <bt_le_adv_stop+0x76>
		conn->err = status;
   10878:	2100      	movs	r1, #0
   1087a:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1087c:	f000 fd18 	bl	112b0 <bt_conn_set_state>
		bt_conn_unref(conn);
   10880:	4620      	mov	r0, r4
   10882:	f000 fce9 	bl	11258 <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
   10886:	2100      	movs	r1, #0
   10888:	480d      	ldr	r0, [pc, #52]	; (108c0 <bt_le_adv_stop+0xb0>)
   1088a:	f7fe fd21 	bl	f2d0 <set_le_adv_enable_legacy>
		if (err) {
   1088e:	4604      	mov	r4, r0
   10890:	2800      	cmp	r0, #0
   10892:	d1cd      	bne.n	10830 <bt_le_adv_stop+0x20>
   10894:	480b      	ldr	r0, [pc, #44]	; (108c4 <bt_le_adv_stop+0xb4>)
   10896:	f00b fa1a 	bl	1bcce <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1089a:	0683      	lsls	r3, r0, #26
   1089c:	d5c7      	bpl.n	1082e <bt_le_adv_stop+0x1e>
	return set_le_scan_enable_legacy(enable);
   1089e:	4620      	mov	r0, r4
   108a0:	f7fe fb80 	bl	efa4 <set_le_scan_enable_legacy>
			le_set_private_addr(BT_ID_DEFAULT);
   108a4:	f00b fa58 	bl	1bd58 <le_set_private_addr.constprop.0>
	return set_le_scan_enable_legacy(enable);
   108a8:	2001      	movs	r0, #1
   108aa:	f7fe fb7b 	bl	efa4 <set_le_scan_enable_legacy>
   108ae:	e7bf      	b.n	10830 <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   108b0:	2205      	movs	r2, #5
   108b2:	f104 0121 	add.w	r1, r4, #33	; 0x21
   108b6:	e7da      	b.n	1086e <bt_le_adv_stop+0x5e>
   108b8:	20008000 	.word	0x20008000
   108bc:	0001e5e0 	.word	0x0001e5e0
   108c0:	20008018 	.word	0x20008018
   108c4:	20008094 	.word	0x20008094

000108c8 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   108c8:	b513      	push	{r0, r1, r4, lr}
   108ca:	4818      	ldr	r0, [pc, #96]	; (1092c <bt_le_adv_resume+0x64>)
   108cc:	f00b f9ff 	bl	1bcce <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   108d0:	04c1      	lsls	r1, r0, #19
   108d2:	d529      	bpl.n	10928 <bt_le_adv_resume+0x60>
   108d4:	4815      	ldr	r0, [pc, #84]	; (1092c <bt_le_adv_resume+0x64>)
   108d6:	f00b f9fa 	bl	1bcce <atomic_get>
   108da:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   108dc:	f3c0 1480 	ubfx	r4, r0, #6, #1
   108e0:	d422      	bmi.n	10928 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   108e2:	4812      	ldr	r0, [pc, #72]	; (1092c <bt_le_adv_resume+0x64>)
   108e4:	f00b f9f3 	bl	1bcce <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   108e8:	05c3      	lsls	r3, r0, #23
   108ea:	d51d      	bpl.n	10928 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   108ec:	4810      	ldr	r0, [pc, #64]	; (10930 <bt_le_adv_resume+0x68>)
   108ee:	a901      	add	r1, sp, #4
   108f0:	f7fe fa0a 	bl	ed08 <le_adv_start_add_conn>
	if (err) {
   108f4:	b9c0      	cbnz	r0, 10928 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
   108f6:	2101      	movs	r1, #1
   108f8:	480d      	ldr	r0, [pc, #52]	; (10930 <bt_le_adv_resume+0x68>)
   108fa:	f7fe fce9 	bl	f2d0 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
   108fe:	b150      	cbz	r0, 10916 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10900:	4621      	mov	r1, r4
   10902:	9801      	ldr	r0, [sp, #4]
   10904:	f000 fcd4 	bl	112b0 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10908:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   1090c:	4807      	ldr	r0, [pc, #28]	; (1092c <bt_le_adv_resume+0x64>)
   1090e:	f00b f9f2 	bl	1bcf6 <atomic_and>
	return (old & mask) != 0;
   10912:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   10916:	9801      	ldr	r0, [sp, #4]
   10918:	f000 fc9e 	bl	11258 <bt_conn_unref>
	if (persist_paused) {
   1091c:	b124      	cbz	r4, 10928 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1091e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   10922:	4802      	ldr	r0, [pc, #8]	; (1092c <bt_le_adv_resume+0x64>)
   10924:	f00b f9d9 	bl	1bcda <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   10928:	b002      	add	sp, #8
   1092a:	bd10      	pop	{r4, pc}
   1092c:	20008028 	.word	0x20008028
   10930:	20008018 	.word	0x20008018

00010934 <enh_conn_complete>:
{
   10934:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
   10938:	7804      	ldrb	r4, [r0, #0]
{
   1093a:	4605      	mov	r5, r0
	if (evt->status) {
   1093c:	2c00      	cmp	r4, #0
   1093e:	d048      	beq.n	109d2 <enh_conn_complete+0x9e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10940:	2c3c      	cmp	r4, #60	; 0x3c
   10942:	d11a      	bne.n	1097a <enh_conn_complete+0x46>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10944:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10948:	4872      	ldr	r0, [pc, #456]	; (10b14 <enh_conn_complete+0x1e0>)
   1094a:	f00b f9d4 	bl	1bcf6 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   1094e:	2000      	movs	r0, #0
   10950:	f7fd ffa6 	bl	e8a0 <find_pending_connect.part.0>
		if (!conn) {
   10954:	4605      	mov	r5, r0
   10956:	b930      	cbnz	r0, 10966 <enh_conn_complete+0x32>
			BT_ERR("No pending slave connection");
   10958:	2145      	movs	r1, #69	; 0x45
   1095a:	486f      	ldr	r0, [pc, #444]	; (10b18 <enh_conn_complete+0x1e4>)
}
   1095c:	b004      	add	sp, #16
   1095e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
   10962:	f009 be83 	b.w	1a66c <printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   10966:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10968:	2100      	movs	r1, #0
   1096a:	f000 fca1 	bl	112b0 <bt_conn_set_state>
		bt_conn_unref(conn);
   1096e:	4628      	mov	r0, r5
}
   10970:	b004      	add	sp, #16
   10972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   10976:	f000 bc6f 	b.w	11258 <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1097a:	2c02      	cmp	r4, #2
   1097c:	d121      	bne.n	109c2 <enh_conn_complete+0x8e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   1097e:	2100      	movs	r1, #0
   10980:	2206      	movs	r2, #6
   10982:	4608      	mov	r0, r1
   10984:	f000 fdca 	bl	1151c <bt_conn_lookup_state_le>
	if (!conn) {
   10988:	4605      	mov	r5, r0
   1098a:	b948      	cbnz	r0, 109a0 <enh_conn_complete+0x6c>
		BT_ERR("No pending master connection");
   1098c:	2145      	movs	r1, #69	; 0x45
   1098e:	4863      	ldr	r0, [pc, #396]	; (10b1c <enh_conn_complete+0x1e8>)
   10990:	f009 fe6c 	bl	1a66c <printk>
			bt_le_scan_update(false);
   10994:	2000      	movs	r0, #0
   10996:	f7fe fdb3 	bl	f500 <bt_le_scan_update>
}
   1099a:	b004      	add	sp, #16
   1099c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   109a0:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   109a2:	2100      	movs	r1, #0
   109a4:	f000 fc84 	bl	112b0 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   109a8:	1d28      	adds	r0, r5, #4
   109aa:	f00b f990 	bl	1bcce <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   109ae:	07c2      	lsls	r2, r0, #31
   109b0:	d503      	bpl.n	109ba <enh_conn_complete+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   109b2:	4621      	mov	r1, r4
   109b4:	4628      	mov	r0, r5
   109b6:	f000 fc7b 	bl	112b0 <bt_conn_set_state>
	bt_conn_unref(conn);
   109ba:	4628      	mov	r0, r5
   109bc:	f000 fc4c 	bl	11258 <bt_conn_unref>
   109c0:	e7e8      	b.n	10994 <enh_conn_complete+0x60>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   109c2:	4622      	mov	r2, r4
   109c4:	2157      	movs	r1, #87	; 0x57
   109c6:	4856      	ldr	r0, [pc, #344]	; (10b20 <enh_conn_complete+0x1ec>)
}
   109c8:	b004      	add	sp, #16
   109ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   109ce:	f009 be4d 	b.w	1a66c <printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   109d2:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   109d4:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   109d8:	3b02      	subs	r3, #2
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   109da:	1d06      	adds	r6, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   109dc:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   109de:	4631      	mov	r1, r6
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   109e0:	fa1f f887 	uxth.w	r8, r7
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   109e4:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   109e6:	d834      	bhi.n	10a52 <enh_conn_complete+0x11e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   109e8:	f00b f974 	bl	1bcd4 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   109ec:	f89d 3008 	ldrb.w	r3, [sp, #8]
   109f0:	2206      	movs	r2, #6
   109f2:	3b02      	subs	r3, #2
   109f4:	f105 0111 	add.w	r1, r5, #17
   109f8:	f10d 0001 	add.w	r0, sp, #1
   109fc:	f88d 3008 	strb.w	r3, [sp, #8]
   10a00:	f00b f878 	bl	1baf4 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   10a04:	2301      	movs	r3, #1
   10a06:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
   10a0a:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
   10a0c:	bb40      	cbnz	r0, 10a60 <enh_conn_complete+0x12c>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   10a0e:	2206      	movs	r2, #6
   10a10:	a902      	add	r1, sp, #8
   10a12:	f000 fd83 	bl	1151c <bt_conn_lookup_state_le>
   10a16:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10a18:	78eb      	ldrb	r3, [r5, #3]
   10a1a:	2b01      	cmp	r3, #1
   10a1c:	d104      	bne.n	10a28 <enh_conn_complete+0xf4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10a1e:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10a22:	483c      	ldr	r0, [pc, #240]	; (10b14 <enh_conn_complete+0x1e0>)
   10a24:	f00b f967 	bl	1bcf6 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10a28:	78eb      	ldrb	r3, [r5, #3]
   10a2a:	b923      	cbnz	r3, 10a36 <enh_conn_complete+0x102>
   10a2c:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   10a30:	483c      	ldr	r0, [pc, #240]	; (10b24 <enh_conn_complete+0x1f0>)
   10a32:	f00b f960 	bl	1bcf6 <atomic_and>
	if (!conn) {
   10a36:	b9dc      	cbnz	r4, 10a70 <enh_conn_complete+0x13c>
		BT_ERR("No pending conn for peer %s",
   10a38:	4630      	mov	r0, r6
   10a3a:	f7fd fc5d 	bl	e2f8 <bt_addr_le_str_real>
   10a3e:	2145      	movs	r1, #69	; 0x45
   10a40:	4602      	mov	r2, r0
   10a42:	4839      	ldr	r0, [pc, #228]	; (10b28 <enh_conn_complete+0x1f4>)
   10a44:	f009 fe12 	bl	1a66c <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   10a48:	211f      	movs	r1, #31
   10a4a:	4640      	mov	r0, r8
   10a4c:	f00b f99a 	bl	1bd84 <bt_hci_disconnect>
		return;
   10a50:	e7a3      	b.n	1099a <enh_conn_complete+0x66>
		bt_addr_le_copy(&id_addr,
   10a52:	f00b f93f 	bl	1bcd4 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   10a56:	4631      	mov	r1, r6
   10a58:	4668      	mov	r0, sp
   10a5a:	f00b f93b 	bl	1bcd4 <bt_addr_le_copy>
   10a5e:	e7d4      	b.n	10a0a <enh_conn_complete+0xd6>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10a60:	2801      	cmp	r0, #1
   10a62:	d103      	bne.n	10a6c <enh_conn_complete+0x138>
   10a64:	a802      	add	r0, sp, #8
   10a66:	f7fd ff1b 	bl	e8a0 <find_pending_connect.part.0>
   10a6a:	e7d4      	b.n	10a16 <enh_conn_complete+0xe2>
	return NULL;
   10a6c:	2400      	movs	r4, #0
   10a6e:	e7d3      	b.n	10a18 <enh_conn_complete+0xe4>
	conn->handle = handle;
   10a70:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10a72:	a902      	add	r1, sp, #8
	conn->handle = handle;
   10a74:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10a78:	f00b f92c 	bl	1bcd4 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   10a7c:	7e2a      	ldrb	r2, [r5, #24]
   10a7e:	7deb      	ldrb	r3, [r5, #23]
   10a80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10a84:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   10a88:	7eaa      	ldrb	r2, [r5, #26]
   10a8a:	7e6b      	ldrb	r3, [r5, #25]
   10a8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10a90:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10a94:	7f2a      	ldrb	r2, [r5, #28]
   10a96:	7eeb      	ldrb	r3, [r5, #27]
   10a98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
   10a9c:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10a9e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   10aa2:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   10aa4:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10aa6:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   10aa8:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10aaa:	d113      	bne.n	10ad4 <enh_conn_complete+0x1a0>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   10aac:	4669      	mov	r1, sp
   10aae:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10ab2:	f00b f90f 	bl	1bcd4 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   10ab6:	7a21      	ldrb	r1, [r4, #8]
   10ab8:	4d1c      	ldr	r5, [pc, #112]	; (10b2c <enh_conn_complete+0x1f8>)
   10aba:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   10abe:	4429      	add	r1, r5
   10ac0:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10ac4:	f00b f906 	bl	1bcd4 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   10ac8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   10acc:	065b      	lsls	r3, r3, #25
   10ace:	d501      	bpl.n	10ad4 <enh_conn_complete+0x1a0>
			bt_le_adv_resume();
   10ad0:	f7ff fefa 	bl	108c8 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10ad4:	78e3      	ldrb	r3, [r4, #3]
   10ad6:	b96b      	cbnz	r3, 10af4 <enh_conn_complete+0x1c0>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   10ad8:	4669      	mov	r1, sp
   10ada:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10ade:	f00b f8f9 	bl	1bcd4 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   10ae2:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   10ae4:	4b11      	ldr	r3, [pc, #68]	; (10b2c <enh_conn_complete+0x1f8>)
					&bt_dev.id_addr[conn->id]);
   10ae6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   10aea:	4419      	add	r1, r3
   10aec:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10af0:	f00b f8f0 	bl	1bcd4 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   10af4:	2107      	movs	r1, #7
   10af6:	4620      	mov	r0, r4
   10af8:	f000 fbda 	bl	112b0 <bt_conn_set_state>
	conn_auto_initiate(conn);
   10afc:	4620      	mov	r0, r4
   10afe:	f7fe ff1f 	bl	f940 <conn_auto_initiate>
	bt_conn_unref(conn);
   10b02:	4620      	mov	r0, r4
   10b04:	f000 fba8 	bl	11258 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10b08:	78e3      	ldrb	r3, [r4, #3]
   10b0a:	2b00      	cmp	r3, #0
   10b0c:	f47f af45 	bne.w	1099a <enh_conn_complete+0x66>
   10b10:	e740      	b.n	10994 <enh_conn_complete+0x60>
   10b12:	bf00      	nop
   10b14:	20008028 	.word	0x20008028
   10b18:	00021708 	.word	0x00021708
   10b1c:	00021729 	.word	0x00021729
   10b20:	0002174b 	.word	0x0002174b
   10b24:	20008094 	.word	0x20008094
   10b28:	00021769 	.word	0x00021769
   10b2c:	20008000 	.word	0x20008000

00010b30 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   10b30:	b570      	push	{r4, r5, r6, lr}
   10b32:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10b34:	482e      	ldr	r0, [pc, #184]	; (10bf0 <bt_le_scan_start+0xc0>)
   10b36:	f00b f8ca 	bl	1bcce <atomic_get>
   10b3a:	460e      	mov	r6, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10b3c:	0781      	lsls	r1, r0, #30
   10b3e:	d554      	bpl.n	10bea <bt_le_scan_start+0xba>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   10b40:	782a      	ldrb	r2, [r5, #0]
   10b42:	2a01      	cmp	r2, #1
   10b44:	d903      	bls.n	10b4e <bt_le_scan_start+0x1e>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   10b46:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   10b4a:	4620      	mov	r0, r4
   10b4c:	bd70      	pop	{r4, r5, r6, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   10b4e:	686b      	ldr	r3, [r5, #4]
   10b50:	f033 030f 	bics.w	r3, r3, #15
   10b54:	d1f7      	bne.n	10b46 <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   10b56:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   10b5a:	8928      	ldrh	r0, [r5, #8]
   10b5c:	1f03      	subs	r3, r0, #4
   10b5e:	b29b      	uxth	r3, r3
   10b60:	42a3      	cmp	r3, r4
   10b62:	d8f0      	bhi.n	10b46 <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   10b64:	8969      	ldrh	r1, [r5, #10]
   10b66:	1f0b      	subs	r3, r1, #4
   10b68:	b29b      	uxth	r3, r3
   10b6a:	42a3      	cmp	r3, r4
   10b6c:	d8eb      	bhi.n	10b46 <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   10b6e:	4288      	cmp	r0, r1
   10b70:	d3e9      	bcc.n	10b46 <bt_le_scan_start+0x16>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10b72:	b94a      	cbnz	r2, 10b88 <bt_le_scan_start+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   10b74:	2140      	movs	r1, #64	; 0x40
   10b76:	481e      	ldr	r0, [pc, #120]	; (10bf0 <bt_le_scan_start+0xc0>)
   10b78:	f00b f8af 	bl	1bcda <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10b7c:	ea10 0301 	ands.w	r3, r0, r1
   10b80:	d007      	beq.n	10b92 <bt_le_scan_start+0x62>
		return -EALREADY;
   10b82:	f06f 0444 	mvn.w	r4, #68	; 0x44
   10b86:	e7e0      	b.n	10b4a <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10b88:	f7fe fc2e 	bl	f3e8 <bt_le_scan_random_addr_check>
   10b8c:	2800      	cmp	r0, #0
   10b8e:	d1f1      	bne.n	10b74 <bt_le_scan_start+0x44>
   10b90:	e7d9      	b.n	10b46 <bt_le_scan_start+0x16>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10b92:	4817      	ldr	r0, [pc, #92]	; (10bf0 <bt_le_scan_start+0xc0>)
   10b94:	f00b f89b 	bl	1bcce <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   10b98:	0682      	lsls	r2, r0, #26
   10b9a:	d50a      	bpl.n	10bb2 <bt_le_scan_start+0x82>
	return set_le_scan_enable_legacy(enable);
   10b9c:	4618      	mov	r0, r3
   10b9e:	f7fe fa01 	bl	efa4 <set_le_scan_enable_legacy>
		if (err) {
   10ba2:	4604      	mov	r4, r0
   10ba4:	b128      	cbz	r0, 10bb2 <bt_le_scan_start+0x82>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10ba6:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10baa:	4811      	ldr	r0, [pc, #68]	; (10bf0 <bt_le_scan_start+0xc0>)
   10bac:	f00b f8a3 	bl	1bcf6 <atomic_and>
		return err;
   10bb0:	e7cb      	b.n	10b4a <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   10bb2:	686a      	ldr	r2, [r5, #4]
   10bb4:	2108      	movs	r1, #8
   10bb6:	480e      	ldr	r0, [pc, #56]	; (10bf0 <bt_le_scan_start+0xc0>)
   10bb8:	f002 0201 	and.w	r2, r2, #1
   10bbc:	f00b f8a6 	bl	1bd0c <atomic_set_bit_to>
		if (param->timeout) {
   10bc0:	89ab      	ldrh	r3, [r5, #12]
   10bc2:	b13b      	cbz	r3, 10bd4 <bt_le_scan_start+0xa4>
   10bc4:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10bc8:	4809      	ldr	r0, [pc, #36]	; (10bf0 <bt_le_scan_start+0xc0>)
   10bca:	f00b f894 	bl	1bcf6 <atomic_and>
			return -ENOTSUP;
   10bce:	f06f 0422 	mvn.w	r4, #34	; 0x22
   10bd2:	e7ba      	b.n	10b4a <bt_le_scan_start+0x1a>
		err = start_le_scan_legacy(param->type, param->interval,
   10bd4:	896a      	ldrh	r2, [r5, #10]
   10bd6:	8929      	ldrh	r1, [r5, #8]
   10bd8:	7828      	ldrb	r0, [r5, #0]
   10bda:	f7fe fba7 	bl	f32c <start_le_scan_legacy>
	if (err) {
   10bde:	4604      	mov	r4, r0
   10be0:	2800      	cmp	r0, #0
   10be2:	d1e0      	bne.n	10ba6 <bt_le_scan_start+0x76>
	scan_dev_found_cb = cb;
   10be4:	4b03      	ldr	r3, [pc, #12]	; (10bf4 <bt_le_scan_start+0xc4>)
   10be6:	601e      	str	r6, [r3, #0]
	return 0;
   10be8:	e7af      	b.n	10b4a <bt_le_scan_start+0x1a>
		return -EAGAIN;
   10bea:	f06f 040a 	mvn.w	r4, #10
   10bee:	e7ac      	b.n	10b4a <bt_le_scan_start+0x1a>
   10bf0:	20008094 	.word	0x20008094
   10bf4:	2000ab44 	.word	0x2000ab44

00010bf8 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   10bf8:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   10bfa:	f06f 0140 	mvn.w	r1, #64	; 0x40
   10bfe:	4807      	ldr	r0, [pc, #28]	; (10c1c <bt_le_scan_stop+0x24>)
   10c00:	f00b f879 	bl	1bcf6 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10c04:	0643      	lsls	r3, r0, #25
   10c06:	d506      	bpl.n	10c16 <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   10c08:	2000      	movs	r0, #0
   10c0a:	4b05      	ldr	r3, [pc, #20]	; (10c20 <bt_le_scan_stop+0x28>)
   10c0c:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   10c0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   10c12:	f7fe bc75 	b.w	f500 <bt_le_scan_update>
}
   10c16:	f06f 0044 	mvn.w	r0, #68	; 0x44
   10c1a:	bd08      	pop	{r3, pc}
   10c1c:	20008094 	.word	0x20008094
   10c20:	2000ab44 	.word	0x2000ab44

00010c24 <bt_le_scan_cb_register>:
	parent->next = child;
   10c24:	2300      	movs	r3, #0
   10c26:	6083      	str	r3, [r0, #8]
	return list->tail;
   10c28:	4b05      	ldr	r3, [pc, #20]	; (10c40 <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   10c2a:	f100 0208 	add.w	r2, r0, #8
   10c2e:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   10c30:	b911      	cbnz	r1, 10c38 <bt_le_scan_cb_register+0x14>
	list->head = node;
   10c32:	e9c3 2200 	strd	r2, r2, [r3]
}
   10c36:	4770      	bx	lr
	parent->next = child;
   10c38:	600a      	str	r2, [r1, #0]
	list->tail = node;
   10c3a:	605a      	str	r2, [r3, #4]
}
   10c3c:	4770      	bx	lr
   10c3e:	bf00      	nop
   10c40:	2000ab3c 	.word	0x2000ab3c

00010c44 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   10c44:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c46:	b08d      	sub	sp, #52	; 0x34
   10c48:	ae04      	add	r6, sp, #16
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10c4a:	2700      	movs	r7, #0
   10c4c:	4635      	mov	r5, r6
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   10c4e:	2100      	movs	r1, #0
   10c50:	f242 0018 	movw	r0, #8216	; 0x2018
   10c54:	aa02      	add	r2, sp, #8
   10c56:	f7fe f8f5 	bl	ee44 <bt_hci_cmd_send_sync>
		if (ret) {
   10c5a:	4604      	mov	r4, r0
   10c5c:	bb58      	cbnz	r0, 10cb6 <prng_reseed.constprop.0+0x72>
			return ret;
		}

		rp = (void *)rsp->data;
   10c5e:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
   10c60:	2208      	movs	r2, #8
   10c62:	6899      	ldr	r1, [r3, #8]
   10c64:	4630      	mov	r0, r6
   10c66:	3101      	adds	r1, #1
   10c68:	f00a ff44 	bl	1baf4 <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10c6c:	3701      	adds	r7, #1

		net_buf_unref(rsp);
   10c6e:	9802      	ldr	r0, [sp, #8]
   10c70:	f004 fc86 	bl	15580 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10c74:	2f04      	cmp	r7, #4
   10c76:	f106 0608 	add.w	r6, r6, #8
   10c7a:	d1e8      	bne.n	10c4e <prng_reseed.constprop.0+0xa>
	return z_impl_k_uptime_ticks();
   10c7c:	f00d f987 	bl	1df8e <z_impl_k_uptime_ticks>
   10c80:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   10c84:	fba0 3206 	umull	r3, r2, r0, r6
   10c88:	fb06 2101 	mla	r1, r6, r1, r2
   10c8c:	0bdb      	lsrs	r3, r3, #15
   10c8e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   10c92:	0bc9      	lsrs	r1, r1, #15
	}

	extra = k_uptime_get();
   10c94:	e9cd 3102 	strd	r3, r1, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   10c98:	2308      	movs	r3, #8
   10c9a:	2220      	movs	r2, #32
   10c9c:	9300      	str	r3, [sp, #0]
   10c9e:	4629      	mov	r1, r5
   10ca0:	4806      	ldr	r0, [pc, #24]	; (10cbc <prng_reseed.constprop.0+0x78>)
   10ca2:	446b      	add	r3, sp
   10ca4:	f00a fddc 	bl	1b860 <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   10ca8:	b928      	cbnz	r0, 10cb6 <prng_reseed.constprop.0+0x72>
		BT_ERR("Failed to re-seed PRNG");
   10caa:	2145      	movs	r1, #69	; 0x45
   10cac:	4804      	ldr	r0, [pc, #16]	; (10cc0 <prng_reseed.constprop.0+0x7c>)
   10cae:	f009 fcdd 	bl	1a66c <printk>
		return -EIO;
   10cb2:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
   10cb6:	4620      	mov	r0, r4
   10cb8:	b00d      	add	sp, #52	; 0x34
   10cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10cbc:	20008bd0 	.word	0x20008bd0
   10cc0:	0002179b 	.word	0x0002179b

00010cc4 <prng_init>:

int prng_init(void)
{
   10cc4:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   10cc6:	4b13      	ldr	r3, [pc, #76]	; (10d14 <prng_init+0x50>)
   10cc8:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
   10ccc:	2b00      	cmp	r3, #0
   10cce:	da1d      	bge.n	10d0c <prng_init+0x48>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   10cd0:	2100      	movs	r1, #0
   10cd2:	f242 0018 	movw	r0, #8216	; 0x2018
   10cd6:	aa01      	add	r2, sp, #4
   10cd8:	f7fe f8b4 	bl	ee44 <bt_hci_cmd_send_sync>
	if (ret) {
   10cdc:	b988      	cbnz	r0, 10d02 <prng_init+0x3e>
		return ret;
	}

	rp = (void *)rsp->data;
   10cde:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   10ce0:	2208      	movs	r2, #8
   10ce2:	6899      	ldr	r1, [r3, #8]
   10ce4:	480c      	ldr	r0, [pc, #48]	; (10d18 <prng_init+0x54>)
   10ce6:	3101      	adds	r1, #1
   10ce8:	f00a fd9a 	bl	1b820 <tc_hmac_prng_init>
   10cec:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   10cee:	9801      	ldr	r0, [sp, #4]
   10cf0:	f004 fc46 	bl	15580 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   10cf4:	b93c      	cbnz	r4, 10d06 <prng_init+0x42>
		BT_ERR("Failed to initialize PRNG");
   10cf6:	4809      	ldr	r0, [pc, #36]	; (10d1c <prng_init+0x58>)
   10cf8:	2145      	movs	r1, #69	; 0x45
   10cfa:	f009 fcb7 	bl	1a66c <printk>
		return -EIO;
   10cfe:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   10d02:	b002      	add	sp, #8
   10d04:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   10d06:	f7ff ff9d 	bl	10c44 <prng_reseed.constprop.0>
   10d0a:	e7fa      	b.n	10d02 <prng_init+0x3e>
		return -ENOTSUP;
   10d0c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10d10:	e7f7      	b.n	10d02 <prng_init+0x3e>
   10d12:	bf00      	nop
   10d14:	20008000 	.word	0x20008000
   10d18:	20008bd0 	.word	0x20008bd0
   10d1c:	000217b7 	.word	0x000217b7

00010d20 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   10d20:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   10d22:	4a0a      	ldr	r2, [pc, #40]	; (10d4c <bt_rand+0x2c>)
{
   10d24:	4604      	mov	r4, r0
   10d26:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   10d28:	f00a fdb3 	bl	1b892 <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   10d2c:	1c43      	adds	r3, r0, #1
   10d2e:	d107      	bne.n	10d40 <bt_rand+0x20>
		ret = prng_reseed(&prng);
   10d30:	f7ff ff88 	bl	10c44 <prng_reseed.constprop.0>
		if (ret) {
   10d34:	b948      	cbnz	r0, 10d4a <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   10d36:	4629      	mov	r1, r5
   10d38:	4620      	mov	r0, r4
   10d3a:	4a04      	ldr	r2, [pc, #16]	; (10d4c <bt_rand+0x2c>)
   10d3c:	f00a fda9 	bl	1b892 <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   10d40:	2801      	cmp	r0, #1
   10d42:	bf14      	ite	ne
   10d44:	f06f 0004 	mvnne.w	r0, #4
   10d48:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   10d4a:	bd38      	pop	{r3, r4, r5, pc}
   10d4c:	20008bd0 	.word	0x20008bd0

00010d50 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   10d50:	2300      	movs	r3, #0
{
   10d52:	4601      	mov	r1, r0
	tx->user_data = NULL;
   10d54:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   10d58:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   10d5a:	4801      	ldr	r0, [pc, #4]	; (10d60 <tx_free+0x10>)
   10d5c:	f00d b843 	b.w	1dde6 <k_queue_append>
   10d60:	200086a4 	.word	0x200086a4

00010d64 <notify_connected>:
{
   10d64:	b538      	push	{r3, r4, r5, lr}
   10d66:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   10d68:	4b08      	ldr	r3, [pc, #32]	; (10d8c <notify_connected+0x28>)
   10d6a:	681d      	ldr	r5, [r3, #0]
			cb->connected(conn, conn->err);
   10d6c:	7a61      	ldrb	r1, [r4, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
   10d6e:	b92d      	cbnz	r5, 10d7c <notify_connected+0x18>
	if (!conn->err) {
   10d70:	b951      	cbnz	r1, 10d88 <notify_connected+0x24>
		bt_gatt_connected(conn);
   10d72:	4620      	mov	r0, r4
}
   10d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   10d78:	f004 b8fc 	b.w	14f74 <bt_gatt_connected>
		if (cb->connected) {
   10d7c:	682b      	ldr	r3, [r5, #0]
   10d7e:	b10b      	cbz	r3, 10d84 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   10d80:	4620      	mov	r0, r4
   10d82:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10d84:	692d      	ldr	r5, [r5, #16]
   10d86:	e7f1      	b.n	10d6c <notify_connected+0x8>
}
   10d88:	bd38      	pop	{r3, r4, r5, pc}
   10d8a:	bf00      	nop
   10d8c:	2000ab48 	.word	0x2000ab48

00010d90 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   10d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10d94:	4604      	mov	r4, r0
   10d96:	460e      	mov	r6, r1
   10d98:	4691      	mov	r9, r2
   10d9a:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   10d9c:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   10d9e:	f04f 33ff 	mov.w	r3, #4294967295
   10da2:	f04f 32ff 	mov.w	r2, #4294967295
   10da6:	4847      	ldr	r0, [pc, #284]	; (10ec4 <send_frag+0x134>)
   10da8:	f008 fac4 	bl	19334 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   10dac:	7aa3      	ldrb	r3, [r4, #10]
   10dae:	2b07      	cmp	r3, #7
   10db0:	d14b      	bne.n	10e4a <send_frag+0xba>
	__asm__ volatile(
   10db2:	f04f 0320 	mov.w	r3, #32
   10db6:	f3ef 8211 	mrs	r2, BASEPRI
   10dba:	f383 8811 	msr	BASEPRI, r3
   10dbe:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   10dc2:	69a3      	ldr	r3, [r4, #24]
   10dc4:	2d00      	cmp	r5, #0
   10dc6:	d052      	beq.n	10e6e <send_frag+0xde>
	parent->next = child;
   10dc8:	2100      	movs	r1, #0
   10dca:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   10dcc:	2b00      	cmp	r3, #0
   10dce:	d14b      	bne.n	10e68 <send_frag+0xd8>
	list->head = node;
   10dd0:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   10dd4:	f382 8811 	msr	BASEPRI, r2
   10dd8:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   10ddc:	2104      	movs	r1, #4
   10dde:	f106 0008 	add.w	r0, r6, #8
   10de2:	f004 fc8b 	bl	156fc <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   10de6:	8823      	ldrh	r3, [r4, #0]
   10de8:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   10dec:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   10df0:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   10df2:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   10df6:	3b04      	subs	r3, #4
   10df8:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   10dfa:	2302      	movs	r3, #2
	return bt_send(buf);
   10dfc:	4630      	mov	r0, r6
   10dfe:	7533      	strb	r3, [r6, #20]
   10e00:	f7fe fd14 	bl	f82c <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   10e04:	4602      	mov	r2, r0
   10e06:	2800      	cmp	r0, #0
   10e08:	d059      	beq.n	10ebe <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   10e0a:	2145      	movs	r1, #69	; 0x45
   10e0c:	482e      	ldr	r0, [pc, #184]	; (10ec8 <send_frag+0x138>)
   10e0e:	f009 fc2d 	bl	1a66c <printk>
	__asm__ volatile(
   10e12:	f04f 0320 	mov.w	r3, #32
   10e16:	f3ef 8911 	mrs	r9, BASEPRI
   10e1a:	f383 8811 	msr	BASEPRI, r3
   10e1e:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   10e22:	2d00      	cmp	r5, #0
   10e24:	d037      	beq.n	10e96 <send_frag+0x106>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10e26:	2200      	movs	r2, #0
	return list->head;
   10e28:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10e2a:	b153      	cbz	r3, 10e42 <send_frag+0xb2>
   10e2c:	429d      	cmp	r5, r3
   10e2e:	d12f      	bne.n	10e90 <send_frag+0x100>
	return node->next;
   10e30:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   10e32:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   10e34:	bb3a      	cbnz	r2, 10e86 <send_frag+0xf6>
   10e36:	42a9      	cmp	r1, r5
	list->head = node;
   10e38:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   10e3a:	d100      	bne.n	10e3e <send_frag+0xae>
	list->tail = node;
   10e3c:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   10e3e:	2300      	movs	r3, #0
   10e40:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   10e42:	f389 8811 	msr	BASEPRI, r9
   10e46:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   10e4a:	481e      	ldr	r0, [pc, #120]	; (10ec4 <send_frag+0x134>)
   10e4c:	f008 fa36 	bl	192bc <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   10e50:	b115      	cbz	r5, 10e58 <send_frag+0xc8>
		tx_free(tx);
   10e52:	4628      	mov	r0, r5
   10e54:	f7ff ff7c 	bl	10d50 <tx_free>
	}

	if (always_consume) {
   10e58:	b11f      	cbz	r7, 10e62 <send_frag+0xd2>
		net_buf_unref(buf);
   10e5a:	4630      	mov	r0, r6
   10e5c:	f004 fb90 	bl	15580 <net_buf_unref>
	}
	return false;
   10e60:	2700      	movs	r7, #0
}
   10e62:	4638      	mov	r0, r7
   10e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10e68:	601d      	str	r5, [r3, #0]
	list->tail = node;
   10e6a:	61a5      	str	r5, [r4, #24]
}
   10e6c:	e7b2      	b.n	10dd4 <send_frag+0x44>
		if (tail_tx) {
   10e6e:	b133      	cbz	r3, 10e7e <send_frag+0xee>
			pending_no_cb = &tail_tx->pending_no_cb;
   10e70:	f103 080c 	add.w	r8, r3, #12
   10e74:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   10e76:	3301      	adds	r3, #1
   10e78:	f8c8 3000 	str.w	r3, [r8]
   10e7c:	e7aa      	b.n	10dd4 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   10e7e:	69e3      	ldr	r3, [r4, #28]
   10e80:	f104 081c 	add.w	r8, r4, #28
   10e84:	e7f7      	b.n	10e76 <send_frag+0xe6>
Z_GENLIST_REMOVE(slist, snode)
   10e86:	42a9      	cmp	r1, r5
	parent->next = child;
   10e88:	6013      	str	r3, [r2, #0]
	list->tail = node;
   10e8a:	bf08      	it	eq
   10e8c:	61a2      	streq	r2, [r4, #24]
}
   10e8e:	e7d6      	b.n	10e3e <send_frag+0xae>
	return node->next;
   10e90:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10e92:	681b      	ldr	r3, [r3, #0]
   10e94:	e7c9      	b.n	10e2a <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   10e96:	f8d8 3000 	ldr.w	r3, [r8]
   10e9a:	b953      	cbnz	r3, 10eb2 <send_frag+0x122>
   10e9c:	490b      	ldr	r1, [pc, #44]	; (10ecc <send_frag+0x13c>)
   10e9e:	480c      	ldr	r0, [pc, #48]	; (10ed0 <send_frag+0x140>)
   10ea0:	f240 4292 	movw	r2, #1170	; 0x492
   10ea4:	f009 fbe2 	bl	1a66c <printk>
   10ea8:	f240 4192 	movw	r1, #1170	; 0x492
   10eac:	4807      	ldr	r0, [pc, #28]	; (10ecc <send_frag+0x13c>)
   10eae:	f009 fe83 	bl	1abb8 <assert_post_action>
			(*pending_no_cb)--;
   10eb2:	f8d8 3000 	ldr.w	r3, [r8]
   10eb6:	3b01      	subs	r3, #1
   10eb8:	f8c8 3000 	str.w	r3, [r8]
   10ebc:	e7c1      	b.n	10e42 <send_frag+0xb2>
	return true;
   10ebe:	2701      	movs	r7, #1
   10ec0:	e7cf      	b.n	10e62 <send_frag+0xd2>
   10ec2:	bf00      	nop
   10ec4:	200080c8 	.word	0x200080c8
   10ec8:	00021344 	.word	0x00021344
   10ecc:	000217e0 	.word	0x000217e0
   10ed0:	0001fbb7 	.word	0x0001fbb7

00010ed4 <bt_conn_get_pkts>:
}
   10ed4:	4800      	ldr	r0, [pc, #0]	; (10ed8 <bt_conn_get_pkts+0x4>)
   10ed6:	4770      	bx	lr
   10ed8:	200080c8 	.word	0x200080c8

00010edc <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   10edc:	1d03      	adds	r3, r0, #4
{
   10ede:	b570      	push	{r4, r5, r6, lr}
   10ee0:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10ee2:	4618      	mov	r0, r3
   10ee4:	f00b f80b 	bl	1befe <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   10ee8:	0582      	lsls	r2, r0, #22
   10eea:	d515      	bpl.n	10f18 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   10eec:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   10ef0:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   10ef4:	4291      	cmp	r1, r2
   10ef6:	d80f      	bhi.n	10f18 <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   10ef8:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   10efc:	4291      	cmp	r1, r2
   10efe:	d30b      	bcc.n	10f18 <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
   10f00:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   10f04:	4291      	cmp	r1, r2
   10f06:	d107      	bne.n	10f18 <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10f08:	e8d3 2fef 	ldaex	r2, [r3]
   10f0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   10f10:	e8c3 2fe1 	stlex	r1, r2, [r3]
   10f14:	2900      	cmp	r1, #0
   10f16:	d1f7      	bne.n	10f08 <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
   10f18:	4b07      	ldr	r3, [pc, #28]	; (10f38 <notify_le_param_updated+0x5c>)
   10f1a:	681d      	ldr	r5, [r3, #0]
   10f1c:	b905      	cbnz	r5, 10f20 <notify_le_param_updated+0x44>
}
   10f1e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   10f20:	68ee      	ldr	r6, [r5, #12]
   10f22:	b13e      	cbz	r6, 10f34 <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
   10f24:	4620      	mov	r0, r4
   10f26:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   10f2a:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   10f2e:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   10f32:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   10f34:	692d      	ldr	r5, [r5, #16]
   10f36:	e7f1      	b.n	10f1c <notify_le_param_updated+0x40>
   10f38:	2000ab48 	.word	0x2000ab48

00010f3c <le_param_req>:
{
   10f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f3e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   10f40:	4608      	mov	r0, r1
{
   10f42:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   10f44:	f00a ff39 	bl	1bdba <bt_le_conn_params_valid>
   10f48:	4604      	mov	r4, r0
   10f4a:	b910      	cbnz	r0, 10f52 <le_param_req+0x16>
		return false;
   10f4c:	2400      	movs	r4, #0
}
   10f4e:	4620      	mov	r0, r4
   10f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   10f52:	4b09      	ldr	r3, [pc, #36]	; (10f78 <le_param_req+0x3c>)
   10f54:	681e      	ldr	r6, [r3, #0]
   10f56:	2e00      	cmp	r6, #0
   10f58:	d0f9      	beq.n	10f4e <le_param_req+0x12>
		if (!cb->le_param_req) {
   10f5a:	68b3      	ldr	r3, [r6, #8]
   10f5c:	b90b      	cbnz	r3, 10f62 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   10f5e:	6936      	ldr	r6, [r6, #16]
   10f60:	e7f9      	b.n	10f56 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   10f62:	4629      	mov	r1, r5
   10f64:	4638      	mov	r0, r7
   10f66:	4798      	blx	r3
   10f68:	2800      	cmp	r0, #0
   10f6a:	d0ef      	beq.n	10f4c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   10f6c:	4628      	mov	r0, r5
   10f6e:	f00a ff24 	bl	1bdba <bt_le_conn_params_valid>
   10f72:	2800      	cmp	r0, #0
   10f74:	d1f3      	bne.n	10f5e <le_param_req+0x22>
   10f76:	e7e9      	b.n	10f4c <le_param_req+0x10>
   10f78:	2000ab48 	.word	0x2000ab48

00010f7c <bt_conn_cb_register>:
	cb->_next = callback_list;
   10f7c:	4b02      	ldr	r3, [pc, #8]	; (10f88 <bt_conn_cb_register+0xc>)
   10f7e:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   10f80:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   10f82:	6102      	str	r2, [r0, #16]
}
   10f84:	4770      	bx	lr
   10f86:	bf00      	nop
   10f88:	2000ab48 	.word	0x2000ab48

00010f8c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   10f8c:	b570      	push	{r4, r5, r6, lr}
   10f8e:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   10f90:	f100 0634 	add.w	r6, r0, #52	; 0x34
   10f94:	2200      	movs	r2, #0
   10f96:	2300      	movs	r3, #0
   10f98:	4630      	mov	r0, r6
   10f9a:	f004 fa6f 	bl	1547c <net_buf_get>
   10f9e:	4605      	mov	r5, r0
   10fa0:	bb28      	cbnz	r0, 10fee <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   10fa2:	6963      	ldr	r3, [r4, #20]
   10fa4:	b153      	cbz	r3, 10fbc <conn_cleanup+0x30>
   10fa6:	4916      	ldr	r1, [pc, #88]	; (11000 <conn_cleanup+0x74>)
   10fa8:	4816      	ldr	r0, [pc, #88]	; (11004 <conn_cleanup+0x78>)
   10faa:	f240 520c 	movw	r2, #1292	; 0x50c
   10fae:	f009 fb5d 	bl	1a66c <printk>
   10fb2:	f240 510c 	movw	r1, #1292	; 0x50c
   10fb6:	4812      	ldr	r0, [pc, #72]	; (11000 <conn_cleanup+0x74>)
   10fb8:	f009 fdfe 	bl	1abb8 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   10fbc:	69e3      	ldr	r3, [r4, #28]
   10fbe:	b153      	cbz	r3, 10fd6 <conn_cleanup+0x4a>
   10fc0:	490f      	ldr	r1, [pc, #60]	; (11000 <conn_cleanup+0x74>)
   10fc2:	4810      	ldr	r0, [pc, #64]	; (11004 <conn_cleanup+0x78>)
   10fc4:	f240 520d 	movw	r2, #1293	; 0x50d
   10fc8:	f009 fb50 	bl	1a66c <printk>
   10fcc:	f240 510d 	movw	r1, #1293	; 0x50d
   10fd0:	480b      	ldr	r0, [pc, #44]	; (11000 <conn_cleanup+0x74>)
   10fd2:	f009 fdf1 	bl	1abb8 <assert_post_action>

	bt_conn_reset_rx_state(conn);
   10fd6:	4620      	mov	r0, r4
   10fd8:	f00a ffde 	bl	1bf98 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   10fdc:	f104 0158 	add.w	r1, r4, #88	; 0x58
   10fe0:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   10fe2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10fe6:	2300      	movs	r3, #0
   10fe8:	4807      	ldr	r0, [pc, #28]	; (11008 <conn_cleanup+0x7c>)
   10fea:	f008 bbc9 	b.w	19780 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   10fee:	6968      	ldr	r0, [r5, #20]
   10ff0:	b108      	cbz	r0, 10ff6 <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
   10ff2:	f7ff fead 	bl	10d50 <tx_free>
		net_buf_unref(buf);
   10ff6:	4628      	mov	r0, r5
   10ff8:	f004 fac2 	bl	15580 <net_buf_unref>
   10ffc:	e7ca      	b.n	10f94 <conn_cleanup+0x8>
   10ffe:	bf00      	nop
   11000:	000217e0 	.word	0x000217e0
   11004:	0001fbb7 	.word	0x0001fbb7
   11008:	2000a560 	.word	0x2000a560

0001100c <bt_conn_recv>:
{
   1100c:	b570      	push	{r4, r5, r6, lr}
   1100e:	4616      	mov	r6, r2
   11010:	4604      	mov	r4, r0
   11012:	460d      	mov	r5, r1
	tx_notify(conn);
   11014:	f00a ff76 	bl	1bf04 <tx_notify>
	switch (flags) {
   11018:	2e01      	cmp	r6, #1
   1101a:	d01f      	beq.n	1105c <bt_conn_recv+0x50>
   1101c:	2e02      	cmp	r6, #2
   1101e:	d140      	bne.n	110a2 <bt_conn_recv+0x96>
		if (conn->rx) {
   11020:	6923      	ldr	r3, [r4, #16]
   11022:	b133      	cbz	r3, 11032 <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   11024:	4826      	ldr	r0, [pc, #152]	; (110c0 <bt_conn_recv+0xb4>)
   11026:	2145      	movs	r1, #69	; 0x45
   11028:	f009 fb20 	bl	1a66c <printk>
			bt_conn_reset_rx_state(conn);
   1102c:	4620      	mov	r0, r4
   1102e:	f00a ffb3 	bl	1bf98 <bt_conn_reset_rx_state>
		conn->rx = buf;
   11032:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   11034:	6921      	ldr	r1, [r4, #16]
   11036:	898a      	ldrh	r2, [r1, #12]
   11038:	2a01      	cmp	r2, #1
   1103a:	d93f      	bls.n	110bc <bt_conn_recv+0xb0>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1103c:	688b      	ldr	r3, [r1, #8]
   1103e:	881b      	ldrh	r3, [r3, #0]
   11040:	3304      	adds	r3, #4
   11042:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   11044:	429a      	cmp	r2, r3
   11046:	d339      	bcc.n	110bc <bt_conn_recv+0xb0>
	if (conn->rx->len > acl_total_len) {
   11048:	d931      	bls.n	110ae <bt_conn_recv+0xa2>
		BT_ERR("ACL len mismatch (%u > %u)",
   1104a:	481e      	ldr	r0, [pc, #120]	; (110c4 <bt_conn_recv+0xb8>)
   1104c:	2145      	movs	r1, #69	; 0x45
   1104e:	f009 fb0d 	bl	1a66c <printk>
		bt_conn_reset_rx_state(conn);
   11052:	4620      	mov	r0, r4
}
   11054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   11058:	f00a bf9e 	b.w	1bf98 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1105c:	6920      	ldr	r0, [r4, #16]
   1105e:	b938      	cbnz	r0, 11070 <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   11060:	2145      	movs	r1, #69	; 0x45
   11062:	4819      	ldr	r0, [pc, #100]	; (110c8 <bt_conn_recv+0xbc>)
			BT_ERR("Not enough buffer space for L2CAP data");
   11064:	f009 fb02 	bl	1a66c <printk>
			bt_conn_reset_rx_state(conn);
   11068:	4620      	mov	r0, r4
   1106a:	f00a ff95 	bl	1bf98 <bt_conn_reset_rx_state>
   1106e:	e001      	b.n	11074 <bt_conn_recv+0x68>
		if (!buf->len) {
   11070:	89ae      	ldrh	r6, [r5, #12]
   11072:	b926      	cbnz	r6, 1107e <bt_conn_recv+0x72>
			net_buf_unref(buf);
   11074:	4628      	mov	r0, r5
}
   11076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1107a:	f004 ba81 	b.w	15580 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1107e:	3008      	adds	r0, #8
   11080:	f00c f86e 	bl	1d160 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   11084:	4286      	cmp	r6, r0
   11086:	d902      	bls.n	1108e <bt_conn_recv+0x82>
			BT_ERR("Not enough buffer space for L2CAP data");
   11088:	2145      	movs	r1, #69	; 0x45
   1108a:	4810      	ldr	r0, [pc, #64]	; (110cc <bt_conn_recv+0xc0>)
   1108c:	e7ea      	b.n	11064 <bt_conn_recv+0x58>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1108e:	6920      	ldr	r0, [r4, #16]
   11090:	89aa      	ldrh	r2, [r5, #12]
   11092:	68a9      	ldr	r1, [r5, #8]
   11094:	3008      	adds	r0, #8
   11096:	f00c f86b 	bl	1d170 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1109a:	4628      	mov	r0, r5
   1109c:	f004 fa70 	bl	15580 <net_buf_unref>
		break;
   110a0:	e7c8      	b.n	11034 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   110a2:	4632      	mov	r2, r6
   110a4:	2145      	movs	r1, #69	; 0x45
   110a6:	480a      	ldr	r0, [pc, #40]	; (110d0 <bt_conn_recv+0xc4>)
   110a8:	f009 fae0 	bl	1a66c <printk>
		bt_conn_reset_rx_state(conn);
   110ac:	e7dc      	b.n	11068 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   110ae:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf);
   110b0:	4620      	mov	r0, r4
	conn->rx = NULL;
   110b2:	6123      	str	r3, [r4, #16]
}
   110b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   110b8:	f000 bed0 	b.w	11e5c <bt_l2cap_recv>
}
   110bc:	bd70      	pop	{r4, r5, r6, pc}
   110be:	bf00      	nop
   110c0:	00021810 	.word	0x00021810
   110c4:	000218a4 	.word	0x000218a4
   110c8:	00021832 	.word	0x00021832
   110cc:	00021855 	.word	0x00021855
   110d0:	00021881 	.word	0x00021881

000110d4 <bt_conn_send_cb>:
{
   110d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   110d8:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   110da:	7a83      	ldrb	r3, [r0, #10]
{
   110dc:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   110de:	2b07      	cmp	r3, #7
{
   110e0:	460d      	mov	r5, r1
   110e2:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   110e4:	d009      	beq.n	110fa <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
   110e6:	4821      	ldr	r0, [pc, #132]	; (1116c <bt_conn_send_cb+0x98>)
   110e8:	2145      	movs	r1, #69	; 0x45
   110ea:	f009 fabf 	bl	1a66c <printk>
		net_buf_unref(buf);
   110ee:	4628      	mov	r0, r5
   110f0:	f004 fa46 	bl	15580 <net_buf_unref>
			return -ENOTCONN;
   110f4:	f06f 0038 	mvn.w	r0, #56	; 0x38
   110f8:	e01a      	b.n	11130 <bt_conn_send_cb+0x5c>
	if (cb) {
   110fa:	2a00      	cmp	r2, #0
   110fc:	d034      	beq.n	11168 <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
   110fe:	f008 f8d7 	bl	192b0 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   11102:	4b1b      	ldr	r3, [pc, #108]	; (11170 <bt_conn_send_cb+0x9c>)
   11104:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   11106:	481b      	ldr	r0, [pc, #108]	; (11174 <bt_conn_send_cb+0xa0>)
   11108:	bf07      	ittee	eq
   1110a:	2200      	moveq	r2, #0
   1110c:	2300      	moveq	r3, #0
   1110e:	f04f 32ff 	movne.w	r2, #4294967295
   11112:	f04f 33ff 	movne.w	r3, #4294967295
   11116:	f007 f865 	bl	181e4 <z_impl_k_queue_get>
   1111a:	4604      	mov	r4, r0
		if (!tx) {
   1111c:	b950      	cbnz	r0, 11134 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
   1111e:	2145      	movs	r1, #69	; 0x45
   11120:	4815      	ldr	r0, [pc, #84]	; (11178 <bt_conn_send_cb+0xa4>)
   11122:	f009 faa3 	bl	1a66c <printk>
			net_buf_unref(buf);
   11126:	4628      	mov	r0, r5
   11128:	f004 fa2a 	bl	15580 <net_buf_unref>
			return -ENOBUFS;
   1112c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   11130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   11134:	7ab3      	ldrb	r3, [r6, #10]
   11136:	2b07      	cmp	r3, #7
   11138:	d00a      	beq.n	11150 <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
   1113a:	2157      	movs	r1, #87	; 0x57
   1113c:	480f      	ldr	r0, [pc, #60]	; (1117c <bt_conn_send_cb+0xa8>)
   1113e:	f009 fa95 	bl	1a66c <printk>
			net_buf_unref(buf);
   11142:	4628      	mov	r0, r5
   11144:	f004 fa1c 	bl	15580 <net_buf_unref>
			tx_free(tx);
   11148:	4620      	mov	r0, r4
   1114a:	f7ff fe01 	bl	10d50 <tx_free>
   1114e:	e7d1      	b.n	110f4 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
   11150:	2300      	movs	r3, #0
		tx->user_data = user_data;
   11152:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   11156:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   11158:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1115a:	f106 0034 	add.w	r0, r6, #52	; 0x34
   1115e:	4629      	mov	r1, r5
   11160:	f004 f9e0 	bl	15524 <net_buf_put>
	return 0;
   11164:	2000      	movs	r0, #0
   11166:	e7e3      	b.n	11130 <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
   11168:	614a      	str	r2, [r1, #20]
   1116a:	e7f6      	b.n	1115a <bt_conn_send_cb+0x86>
   1116c:	000218c4 	.word	0x000218c4
   11170:	2000a580 	.word	0x2000a580
   11174:	200086a4 	.word	0x200086a4
   11178:	000218d8 	.word	0x000218d8
   1117c:	000218fb 	.word	0x000218fb

00011180 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   11180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   11184:	2500      	movs	r5, #0
   11186:	4b1c      	ldr	r3, [pc, #112]	; (111f8 <bt_conn_prepare_events+0x78>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   11188:	462a      	mov	r2, r5
   1118a:	2101      	movs	r1, #1
{
   1118c:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   1118e:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   11190:	2601      	movs	r6, #1
   11192:	f009 f819 	bl	1a1c8 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   11196:	f04f 0914 	mov.w	r9, #20
   1119a:	4c18      	ldr	r4, [pc, #96]	; (111fc <bt_conn_prepare_events+0x7c>)
	if (!atomic_get(&conn->ref)) {
   1119c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
   111a0:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   111a4:	f00a feab 	bl	1befe <atomic_get>
   111a8:	b178      	cbz	r0, 111ca <bt_conn_prepare_events+0x4a>
	if (conn->state == BT_CONN_DISCONNECTED &&
   111aa:	7aa3      	ldrb	r3, [r4, #10]
   111ac:	b9ab      	cbnz	r3, 111da <bt_conn_prepare_events+0x5a>
   111ae:	1d23      	adds	r3, r4, #4
   111b0:	e8d3 2fef 	ldaex	r2, [r3]
   111b4:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   111b8:	e8c3 1fe0 	stlex	r0, r1, [r3]
   111bc:	2800      	cmp	r0, #0
   111be:	d1f7      	bne.n	111b0 <bt_conn_prepare_events+0x30>
   111c0:	0653      	lsls	r3, r2, #25
   111c2:	d50a      	bpl.n	111da <bt_conn_prepare_events+0x5a>
		conn_cleanup(conn);
   111c4:	4620      	mov	r0, r4
   111c6:	f7ff fee1 	bl	10f8c <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   111ca:	3501      	adds	r5, #1
   111cc:	2d0a      	cmp	r5, #10
   111ce:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   111d2:	d1e3      	bne.n	1119c <bt_conn_prepare_events+0x1c>
		}
	}
#endif

	return ev_count;
}
   111d4:	4630      	mov	r0, r6
   111d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   111da:	7aa3      	ldrb	r3, [r4, #10]
   111dc:	2b07      	cmp	r3, #7
   111de:	d1f4      	bne.n	111ca <bt_conn_prepare_events+0x4a>
	k_poll_event_init(&events[0],
   111e0:	f104 0334 	add.w	r3, r4, #52	; 0x34
   111e4:	2200      	movs	r2, #0
   111e6:	2104      	movs	r1, #4
   111e8:	4640      	mov	r0, r8
   111ea:	f008 ffed 	bl	1a1c8 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   111ee:	2301      	movs	r3, #1
   111f0:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   111f4:	441e      	add	r6, r3
   111f6:	e7e8      	b.n	111ca <bt_conn_prepare_events+0x4a>
   111f8:	20008434 	.word	0x20008434
   111fc:	20008d08 	.word	0x20008d08

00011200 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   11200:	b570      	push	{r4, r5, r6, lr}
   11202:	4606      	mov	r6, r0
   11204:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   11206:	4810      	ldr	r0, [pc, #64]	; (11248 <bt_conn_add_le+0x48>)
   11208:	210a      	movs	r1, #10
   1120a:	f00a fea1 	bl	1bf50 <bt_conn_new>
	if (!conn) {
   1120e:	4604      	mov	r4, r0
   11210:	b1b8      	cbz	r0, 11242 <bt_conn_add_le+0x42>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11212:	2230      	movs	r2, #48	; 0x30
   11214:	2100      	movs	r1, #0
   11216:	3058      	adds	r0, #88	; 0x58
   11218:	f00a fc97 	bl	1bb4a <memset>
   1121c:	4b0b      	ldr	r3, [pc, #44]	; (1124c <bt_conn_add_le+0x4c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1121e:	4a0c      	ldr	r2, [pc, #48]	; (11250 <bt_conn_add_le+0x50>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11220:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   11222:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   11224:	4629      	mov	r1, r5
   11226:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   1122a:	62a3      	str	r3, [r4, #40]	; 0x28
   1122c:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   1122e:	7226      	strb	r6, [r4, #8]
   11230:	f104 0088 	add.w	r0, r4, #136	; 0x88
   11234:	f00a fc5e 	bl	1baf4 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   11238:	2301      	movs	r3, #1
   1123a:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1123c:	4b05      	ldr	r3, [pc, #20]	; (11254 <bt_conn_add_le+0x54>)
   1123e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   11242:	4620      	mov	r0, r4
   11244:	bd70      	pop	{r4, r5, r6, pc}
   11246:	bf00      	nop
   11248:	20008d08 	.word	0x20008d08
   1124c:	000118b9 	.word	0x000118b9
   11250:	0001bf4b 	.word	0x0001bf4b
   11254:	00280018 	.word	0x00280018

00011258 <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   11258:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   1125a:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1125e:	e8d4 3fef 	ldaex	r3, [r4]
   11262:	1e5a      	subs	r2, r3, #1
   11264:	e8c4 2fe1 	stlex	r1, r2, [r4]
   11268:	2900      	cmp	r1, #0
   1126a:	d1f8      	bne.n	1125e <bt_conn_unref+0x6>

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   1126c:	2b00      	cmp	r3, #0
   1126e:	dc0a      	bgt.n	11286 <bt_conn_unref+0x2e>
   11270:	4909      	ldr	r1, [pc, #36]	; (11298 <bt_conn_unref+0x40>)
   11272:	480a      	ldr	r0, [pc, #40]	; (1129c <bt_conn_unref+0x44>)
   11274:	f240 7265 	movw	r2, #1893	; 0x765
   11278:	f009 f9f8 	bl	1a66c <printk>
   1127c:	f240 7165 	movw	r1, #1893	; 0x765
   11280:	4805      	ldr	r0, [pc, #20]	; (11298 <bt_conn_unref+0x40>)
   11282:	f009 fc99 	bl	1abb8 <assert_post_action>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
   11286:	4620      	mov	r0, r4
   11288:	f00a fe39 	bl	1befe <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1128c:	b918      	cbnz	r0, 11296 <bt_conn_unref+0x3e>
		bt_le_adv_resume();
	}
}
   1128e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   11292:	f7ff bb19 	b.w	108c8 <bt_le_adv_resume>
}
   11296:	bd10      	pop	{r4, pc}
   11298:	000217e0 	.word	0x000217e0
   1129c:	0001fbb7 	.word	0x0001fbb7

000112a0 <bt_conn_lookup_handle>:
{
   112a0:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   112a2:	210a      	movs	r1, #10
   112a4:	4801      	ldr	r0, [pc, #4]	; (112ac <bt_conn_lookup_handle+0xc>)
   112a6:	f00a beb7 	b.w	1c018 <conn_lookup_handle>
   112aa:	bf00      	nop
   112ac:	20008d08 	.word	0x20008d08

000112b0 <bt_conn_set_state>:
{
   112b0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   112b2:	7a85      	ldrb	r5, [r0, #10]
{
   112b4:	4604      	mov	r4, r0
	if (conn->state == state) {
   112b6:	428d      	cmp	r5, r1
{
   112b8:	460e      	mov	r6, r1
	if (conn->state == state) {
   112ba:	d10b      	bne.n	112d4 <bt_conn_set_state+0x24>
		BT_WARN("no transition %s", state2str(state));
   112bc:	2157      	movs	r1, #87	; 0x57
   112be:	2d08      	cmp	r5, #8
   112c0:	bf96      	itet	ls
   112c2:	4b6d      	ldrls	r3, [pc, #436]	; (11478 <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
   112c4:	4a6d      	ldrhi	r2, [pc, #436]	; (1147c <bt_conn_set_state+0x1cc>)
   112c6:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   112ca:	486d      	ldr	r0, [pc, #436]	; (11480 <bt_conn_set_state+0x1d0>)
}
   112cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   112d0:	f009 b9cc 	b.w	1a66c <printk>
	conn->state = state;
   112d4:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   112d6:	b165      	cbz	r5, 112f2 <bt_conn_set_state+0x42>
   112d8:	2d06      	cmp	r5, #6
   112da:	d00d      	beq.n	112f8 <bt_conn_set_state+0x48>
	switch (conn->state) {
   112dc:	7aa3      	ldrb	r3, [r4, #10]
   112de:	2b08      	cmp	r3, #8
   112e0:	f200 80c5 	bhi.w	1146e <bt_conn_set_state+0x1be>
   112e4:	e8df f003 	tbb	[pc, r3]
   112e8:	c7c70f4a 	.word	0xc7c70f4a
   112ec:	278ec7c7 	.word	0x278ec7c7
   112f0:	c7          	.byte	0xc7
   112f1:	00          	.byte	0x00
		bt_conn_ref(conn);
   112f2:	f00a fe7a 	bl	1bfea <bt_conn_ref>
		break;
   112f6:	e7f1      	b.n	112dc <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   112f8:	7883      	ldrb	r3, [r0, #2]
   112fa:	2b01      	cmp	r3, #1
   112fc:	d1ee      	bne.n	112dc <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->deferred_work);
   112fe:	3058      	adds	r0, #88	; 0x58
   11300:	f008 faae 	bl	19860 <k_delayed_work_cancel>
   11304:	e7ea      	b.n	112dc <bt_conn_set_state+0x2c>
		tx->pending_no_cb = 0U;
   11306:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   11308:	4d5e      	ldr	r5, [pc, #376]	; (11484 <bt_conn_set_state+0x1d4>)
	__asm__ volatile(
   1130a:	f04f 0320 	mov.w	r3, #32
   1130e:	f3ef 8211 	mrs	r2, BASEPRI
   11312:	f383 8811 	msr	BASEPRI, r3
   11316:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1131a:	69e3      	ldr	r3, [r4, #28]
   1131c:	2b00      	cmp	r3, #0
   1131e:	f000 8087 	beq.w	11430 <bt_conn_set_state+0x180>
			conn->pending_no_cb--;
   11322:	3b01      	subs	r3, #1
   11324:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   11326:	f382 8811 	msr	BASEPRI, r2
   1132a:	f3bf 8f6f 	isb	sy
   1132e:	4628      	mov	r0, r5
   11330:	f007 ffc4 	bl	192bc <z_impl_k_sem_give>
}
   11334:	e7e9      	b.n	1130a <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   11336:	78a3      	ldrb	r3, [r4, #2]
   11338:	2b04      	cmp	r3, #4
   1133a:	f000 809c 	beq.w	11476 <bt_conn_set_state+0x1c6>
	z_impl_k_queue_init(queue);
   1133e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11342:	f00c fd43 	bl	1ddcc <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
   11346:	2100      	movs	r1, #0
   11348:	484f      	ldr	r0, [pc, #316]	; (11488 <bt_conn_set_state+0x1d8>)
   1134a:	f009 f849 	bl	1a3e0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1134e:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
   11350:	4620      	mov	r0, r4
	list->tail = NULL;
   11352:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   11356:	f000 fc8f 	bl	11c78 <bt_l2cap_connected>
		notify_connected(conn);
   1135a:	4620      	mov	r0, r4
   1135c:	f7ff fd02 	bl	10d64 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11360:	78e3      	ldrb	r3, [r4, #3]
   11362:	2b01      	cmp	r3, #1
   11364:	f040 8087 	bne.w	11476 <bt_conn_set_state+0x1c6>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   11368:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1136c:	2300      	movs	r3, #0
   1136e:	f104 0158 	add.w	r1, r4, #88	; 0x58
   11372:	4846      	ldr	r0, [pc, #280]	; (1148c <bt_conn_set_state+0x1dc>)
}
   11374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11378:	f008 ba02 	b.w	19780 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1137c:	78a3      	ldrb	r3, [r4, #2]
   1137e:	2b04      	cmp	r3, #4
   11380:	d104      	bne.n	1138c <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   11382:	4620      	mov	r0, r4
}
   11384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   11388:	f7ff bf66 	b.w	11258 <bt_conn_unref>
		switch (old_state) {
   1138c:	2d08      	cmp	r5, #8
   1138e:	d872      	bhi.n	11476 <bt_conn_set_state+0x1c6>
   11390:	a301      	add	r3, pc, #4	; (adr r3, 11398 <bt_conn_set_state+0xe8>)
   11392:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   11396:	bf00      	nop
   11398:	000113fd 	.word	0x000113fd
   1139c:	000113bd 	.word	0x000113bd
   113a0:	000113ef 	.word	0x000113ef
   113a4:	00011383 	.word	0x00011383
   113a8:	00011383 	.word	0x00011383
   113ac:	000113ef 	.word	0x000113ef
   113b0:	000113ef 	.word	0x000113ef
   113b4:	000113fd 	.word	0x000113fd
   113b8:	000113fd 	.word	0x000113fd
			tx_notify(conn);
   113bc:	4620      	mov	r0, r4
   113be:	f00a fda1 	bl	1bf04 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   113c2:	78a3      	ldrb	r3, [r4, #2]
   113c4:	2b01      	cmp	r3, #1
   113c6:	d103      	bne.n	113d0 <bt_conn_set_state+0x120>
				k_delayed_work_cancel(&conn->deferred_work);
   113c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   113cc:	f008 fa48 	bl	19860 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   113d0:	3404      	adds	r4, #4
   113d2:	e8d4 3fef 	ldaex	r3, [r4]
   113d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   113da:	e8c4 3fe2 	stlex	r2, r3, [r4]
   113de:	2a00      	cmp	r2, #0
   113e0:	d1f7      	bne.n	113d2 <bt_conn_set_state+0x122>
}
   113e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   113e6:	2100      	movs	r1, #0
   113e8:	4827      	ldr	r0, [pc, #156]	; (11488 <bt_conn_set_state+0x1d8>)
   113ea:	f008 bff9 	b.w	1a3e0 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   113ee:	7a63      	ldrb	r3, [r4, #9]
   113f0:	2b00      	cmp	r3, #0
   113f2:	d0c6      	beq.n	11382 <bt_conn_set_state+0xd2>
				notify_connected(conn);
   113f4:	4620      	mov	r0, r4
   113f6:	f7ff fcb5 	bl	10d64 <notify_connected>
   113fa:	e7c2      	b.n	11382 <bt_conn_set_state+0xd2>
			BT_WARN("Invalid (%u) old state", state);
   113fc:	4632      	mov	r2, r6
   113fe:	2157      	movs	r1, #87	; 0x57
   11400:	4823      	ldr	r0, [pc, #140]	; (11490 <bt_conn_set_state+0x1e0>)
   11402:	e763      	b.n	112cc <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   11404:	78a3      	ldrb	r3, [r4, #2]
   11406:	2b01      	cmp	r3, #1
   11408:	d135      	bne.n	11476 <bt_conn_set_state+0x1c6>
				K_MSEC(10 * bt_dev.create_param.timeout));
   1140a:	4b22      	ldr	r3, [pc, #136]	; (11494 <bt_conn_set_state+0x1e4>)
   1140c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   11410:	8a9d      	ldrh	r5, [r3, #20]
   11412:	230a      	movs	r3, #10
   11414:	f240 30e7 	movw	r0, #999	; 0x3e7
   11418:	2100      	movs	r1, #0
   1141a:	435d      	muls	r5, r3
   1141c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11420:	2300      	movs	r3, #0
   11422:	fbc5 0106 	smlal	r0, r1, r5, r6
   11426:	f7f7 fb81 	bl	8b2c <__aeabi_uldivmod>
   1142a:	4602      	mov	r2, r0
   1142c:	460b      	mov	r3, r1
   1142e:	e79e      	b.n	1136e <bt_conn_set_state+0xbe>
	return list->head;
   11430:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   11432:	b128      	cbz	r0, 11440 <bt_conn_set_state+0x190>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11434:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   11436:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   11438:	4288      	cmp	r0, r1
	list->head = node;
   1143a:	6163      	str	r3, [r4, #20]
	list->tail = node;
   1143c:	bf08      	it	eq
   1143e:	61a3      	streq	r3, [r4, #24]
   11440:	f382 8811 	msr	BASEPRI, r2
   11444:	f3bf 8f6f 	isb	sy
		if (!node) {
   11448:	b1a8      	cbz	r0, 11476 <bt_conn_set_state+0x1c6>
	__asm__ volatile(
   1144a:	f04f 0220 	mov.w	r2, #32
   1144e:	f3ef 8311 	mrs	r3, BASEPRI
   11452:	f382 8811 	msr	BASEPRI, r2
   11456:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1145a:	68c2      	ldr	r2, [r0, #12]
   1145c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1145e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   11460:	f383 8811 	msr	BASEPRI, r3
   11464:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   11468:	f7ff fc72 	bl	10d50 <tx_free>
   1146c:	e75f      	b.n	1132e <bt_conn_set_state+0x7e>
		BT_WARN("no valid (%u) state was set", state);
   1146e:	4632      	mov	r2, r6
   11470:	2157      	movs	r1, #87	; 0x57
   11472:	4809      	ldr	r0, [pc, #36]	; (11498 <bt_conn_set_state+0x1e8>)
   11474:	e72a      	b.n	112cc <bt_conn_set_state+0x1c>
}
   11476:	bd70      	pop	{r4, r5, r6, pc}
   11478:	0001ea88 	.word	0x0001ea88
   1147c:	00021926 	.word	0x00021926
   11480:	00021930 	.word	0x00021930
   11484:	200080c8 	.word	0x200080c8
   11488:	20008434 	.word	0x20008434
   1148c:	2000a560 	.word	0x2000a560
   11490:	00021946 	.word	0x00021946
   11494:	20008000 	.word	0x20008000
   11498:	00021962 	.word	0x00021962

0001149c <bt_conn_lookup_addr_le>:
{
   1149c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   114a0:	4607      	mov	r7, r0
   114a2:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   114a4:	2500      	movs	r5, #0
   114a6:	4e0e      	ldr	r6, [pc, #56]	; (114e0 <bt_conn_lookup_addr_le+0x44>)
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   114a8:	4630      	mov	r0, r6
   114aa:	f00a fd9e 	bl	1bfea <bt_conn_ref>
		if (!conn) {
   114ae:	4604      	mov	r4, r0
   114b0:	b120      	cbz	r0, 114bc <bt_conn_lookup_addr_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   114b2:	7883      	ldrb	r3, [r0, #2]
   114b4:	2b01      	cmp	r3, #1
   114b6:	d00a      	beq.n	114ce <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
   114b8:	f7ff fece 	bl	11258 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   114bc:	3501      	adds	r5, #1
   114be:	2d0a      	cmp	r5, #10
   114c0:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   114c4:	d1f0      	bne.n	114a8 <bt_conn_lookup_addr_le+0xc>
	return NULL;
   114c6:	2400      	movs	r4, #0
}
   114c8:	4620      	mov	r0, r4
   114ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   114ce:	4642      	mov	r2, r8
   114d0:	4639      	mov	r1, r7
   114d2:	f00a fd6a 	bl	1bfaa <bt_conn_is_peer_addr_le>
   114d6:	2800      	cmp	r0, #0
   114d8:	d1f6      	bne.n	114c8 <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   114da:	4620      	mov	r0, r4
   114dc:	e7ec      	b.n	114b8 <bt_conn_lookup_addr_le+0x1c>
   114de:	bf00      	nop
   114e0:	20008d08 	.word	0x20008d08

000114e4 <bt_conn_exists_le>:
{
   114e4:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   114e6:	f7ff ffd9 	bl	1149c <bt_conn_lookup_addr_le>
	if (conn) {
   114ea:	4604      	mov	r4, r0
   114ec:	b170      	cbz	r0, 1150c <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   114ee:	7a83      	ldrb	r3, [r0, #10]
   114f0:	2157      	movs	r1, #87	; 0x57
   114f2:	2b08      	cmp	r3, #8
   114f4:	bf96      	itet	ls
   114f6:	4a06      	ldrls	r2, [pc, #24]	; (11510 <bt_conn_exists_le+0x2c>)
   114f8:	4a06      	ldrhi	r2, [pc, #24]	; (11514 <bt_conn_exists_le+0x30>)
   114fa:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   114fe:	4806      	ldr	r0, [pc, #24]	; (11518 <bt_conn_exists_le+0x34>)
   11500:	f009 f8b4 	bl	1a66c <printk>
		bt_conn_unref(conn);
   11504:	4620      	mov	r0, r4
   11506:	f7ff fea7 	bl	11258 <bt_conn_unref>
		return true;
   1150a:	2001      	movs	r0, #1
}
   1150c:	bd10      	pop	{r4, pc}
   1150e:	bf00      	nop
   11510:	0001ea88 	.word	0x0001ea88
   11514:	00021926 	.word	0x00021926
   11518:	00021983 	.word	0x00021983

0001151c <bt_conn_lookup_state_le>:
{
   1151c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11520:	4606      	mov	r6, r0
   11522:	460f      	mov	r7, r1
   11524:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11526:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11528:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   1152c:	f8df a048 	ldr.w	sl, [pc, #72]	; 11578 <bt_conn_lookup_state_le+0x5c>
   11530:	fb09 a005 	mla	r0, r9, r5, sl
   11534:	f00a fd59 	bl	1bfea <bt_conn_ref>
		if (!conn) {
   11538:	4604      	mov	r4, r0
   1153a:	b120      	cbz	r0, 11546 <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
   1153c:	7883      	ldrb	r3, [r0, #2]
   1153e:	2b01      	cmp	r3, #1
   11540:	d006      	beq.n	11550 <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
   11542:	f00a fd52 	bl	1bfea <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11546:	3501      	adds	r5, #1
   11548:	2d0a      	cmp	r5, #10
   1154a:	d1f1      	bne.n	11530 <bt_conn_lookup_state_le+0x14>
	return NULL;
   1154c:	2400      	movs	r4, #0
   1154e:	e00f      	b.n	11570 <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   11550:	b147      	cbz	r7, 11564 <bt_conn_lookup_state_le+0x48>
   11552:	463a      	mov	r2, r7
   11554:	4631      	mov	r1, r6
   11556:	f00a fd28 	bl	1bfaa <bt_conn_is_peer_addr_le>
   1155a:	b918      	cbnz	r0, 11564 <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
   1155c:	4620      	mov	r0, r4
   1155e:	f7ff fe7b 	bl	11258 <bt_conn_unref>
			continue;
   11562:	e7f0      	b.n	11546 <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
   11564:	7aa3      	ldrb	r3, [r4, #10]
   11566:	4543      	cmp	r3, r8
   11568:	d1f8      	bne.n	1155c <bt_conn_lookup_state_le+0x40>
   1156a:	7a23      	ldrb	r3, [r4, #8]
   1156c:	42b3      	cmp	r3, r6
   1156e:	d1f5      	bne.n	1155c <bt_conn_lookup_state_le+0x40>
}
   11570:	4620      	mov	r0, r4
   11572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11576:	bf00      	nop
   11578:	20008d08 	.word	0x20008d08

0001157c <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   1157c:	b510      	push	{r4, lr}
	info->type = conn->type;
   1157e:	7882      	ldrb	r2, [r0, #2]
   11580:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   11582:	78c4      	ldrb	r4, [r0, #3]
	info->id = conn->id;

	switch (conn->type) {
   11584:	2a01      	cmp	r2, #1
	info->role = conn->role;
   11586:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   11588:	7a03      	ldrb	r3, [r0, #8]
   1158a:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
   1158c:	d11c      	bne.n	115c8 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   1158e:	f100 0288 	add.w	r2, r0, #136	; 0x88
   11592:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   11594:	4a0e      	ldr	r2, [pc, #56]	; (115d0 <bt_conn_get_info+0x54>)
   11596:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1159a:	4413      	add	r3, r2
   1159c:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   1159e:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   115a2:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_MASTER) {
   115a6:	b964      	cbnz	r4, 115c2 <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
   115a8:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   115ac:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   115b0:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   115b2:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   115b6:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   115b8:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   115bc:	2000      	movs	r0, #0
		info->le.timeout = conn->le.timeout;
   115be:	830b      	strh	r3, [r1, #24]
		return 0;
#endif
	}

	return -EINVAL;
}
   115c0:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   115c2:	e9c1 2303 	strd	r2, r3, [r1, #12]
   115c6:	e7f1      	b.n	115ac <bt_conn_get_info+0x30>
	return -EINVAL;
   115c8:	f06f 0015 	mvn.w	r0, #21
   115cc:	e7f8      	b.n	115c0 <bt_conn_get_info+0x44>
   115ce:	bf00      	nop
   115d0:	20008000 	.word	0x20008000

000115d4 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   115d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   115d8:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   115da:	4844      	ldr	r0, [pc, #272]	; (116ec <bt_conn_le_create+0x118>)
   115dc:	f00a fc8f 	bl	1befe <atomic_get>
   115e0:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   115e2:	0781      	lsls	r1, r0, #30
{
   115e4:	4615      	mov	r5, r2
   115e6:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   115e8:	d576      	bpl.n	116d8 <bt_conn_le_create+0x104>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   115ea:	4610      	mov	r0, r2
   115ec:	f00a fbe5 	bl	1bdba <bt_le_conn_params_valid>
   115f0:	b928      	cbnz	r0, 115fe <bt_conn_le_create+0x2a>
		return -EINVAL;
   115f2:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   115f6:	4628      	mov	r0, r5
   115f8:	b002      	add	sp, #8
   115fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115fe:	483b      	ldr	r0, [pc, #236]	; (116ec <bt_conn_le_create+0x118>)
   11600:	f00a fc7d 	bl	1befe <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   11604:	0642      	lsls	r2, r0, #25
   11606:	d4f4      	bmi.n	115f2 <bt_conn_le_create+0x1e>
   11608:	4838      	ldr	r0, [pc, #224]	; (116ec <bt_conn_le_create+0x118>)
   1160a:	f00a fc78 	bl	1befe <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   1160e:	0503      	lsls	r3, r0, #20
   11610:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   11614:	d463      	bmi.n	116de <bt_conn_le_create+0x10a>
	if (!bt_le_scan_random_addr_check()) {
   11616:	f7fd fee7 	bl	f3e8 <bt_le_scan_random_addr_check>
   1161a:	2800      	cmp	r0, #0
   1161c:	d0e9      	beq.n	115f2 <bt_conn_le_create+0x1e>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   1161e:	4621      	mov	r1, r4
   11620:	4640      	mov	r0, r8
   11622:	f7ff ff5f 	bl	114e4 <bt_conn_exists_le>
   11626:	2800      	cmp	r0, #0
   11628:	d1e3      	bne.n	115f2 <bt_conn_le_create+0x1e>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   1162a:	7823      	ldrb	r3, [r4, #0]
   1162c:	3b02      	subs	r3, #2
   1162e:	2b01      	cmp	r3, #1
   11630:	d847      	bhi.n	116c2 <bt_conn_le_create+0xee>
   11632:	2207      	movs	r2, #7
   11634:	4621      	mov	r1, r4
   11636:	4668      	mov	r0, sp
   11638:	f00a fa5c 	bl	1baf4 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   1163c:	f89d 3000 	ldrb.w	r3, [sp]
   11640:	3b02      	subs	r3, #2
   11642:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   11646:	4669      	mov	r1, sp
   11648:	2000      	movs	r0, #0
   1164a:	f7ff fdd9 	bl	11200 <bt_conn_add_le>
	if (!conn) {
   1164e:	4604      	mov	r4, r0
   11650:	2800      	cmp	r0, #0
   11652:	d047      	beq.n	116e4 <bt_conn_le_create+0x110>
	conn->le.interval_min = param->interval_min;
   11654:	882b      	ldrh	r3, [r5, #0]
   11656:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   1165a:	886b      	ldrh	r3, [r5, #2]
   1165c:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   11660:	88ab      	ldrh	r3, [r5, #4]
   11662:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   11666:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
   11668:	4d21      	ldr	r5, [pc, #132]	; (116f0 <bt_conn_le_create+0x11c>)
	conn->le.timeout = param->timeout;
   1166a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   1166e:	f105 0c08 	add.w	ip, r5, #8
   11672:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   11676:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   1167a:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   1167c:	2b00      	cmp	r3, #0
   1167e:	bf08      	it	eq
   11680:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   11684:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   11686:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   11688:	b903      	cbnz	r3, 1168c <bt_conn_le_create+0xb8>
   1168a:	89ab      	ldrh	r3, [r5, #12]
   1168c:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   1168e:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   11690:	b903      	cbnz	r3, 11694 <bt_conn_le_create+0xc0>
   11692:	89eb      	ldrh	r3, [r5, #14]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   11694:	2106      	movs	r1, #6
   11696:	4620      	mov	r0, r4
	bt_dev.create_param.window_coded =
   11698:	826b      	strh	r3, [r5, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   1169a:	f7ff fe09 	bl	112b0 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   1169e:	4620      	mov	r0, r4
   116a0:	f00a fb6e 	bl	1bd80 <bt_le_create_conn>
	if (err) {
   116a4:	4605      	mov	r5, r0
   116a6:	b1a8      	cbz	r0, 116d4 <bt_conn_le_create+0x100>
		conn->err = 0;
   116a8:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   116aa:	4620      	mov	r0, r4
   116ac:	4631      	mov	r1, r6
		conn->err = 0;
   116ae:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   116b0:	f7ff fdfe 	bl	112b0 <bt_conn_set_state>
		bt_conn_unref(conn);
   116b4:	4620      	mov	r0, r4
   116b6:	f7ff fdcf 	bl	11258 <bt_conn_unref>
		bt_le_scan_update(false);
   116ba:	4630      	mov	r0, r6
   116bc:	f7fd ff20 	bl	f500 <bt_le_scan_update>
		return err;
   116c0:	e799      	b.n	115f6 <bt_conn_le_create+0x22>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   116c2:	4621      	mov	r1, r4
   116c4:	f00a fb5a 	bl	1bd7c <bt_lookup_id_addr>
   116c8:	2207      	movs	r2, #7
   116ca:	4601      	mov	r1, r0
   116cc:	4668      	mov	r0, sp
   116ce:	f00a fa11 	bl	1baf4 <memcpy>
}
   116d2:	e7b8      	b.n	11646 <bt_conn_le_create+0x72>
	*ret_conn = conn;
   116d4:	603c      	str	r4, [r7, #0]
	return 0;
   116d6:	e78e      	b.n	115f6 <bt_conn_le_create+0x22>
		return -EAGAIN;
   116d8:	f06f 050a 	mvn.w	r5, #10
   116dc:	e78b      	b.n	115f6 <bt_conn_le_create+0x22>
		return -EALREADY;
   116de:	f06f 0544 	mvn.w	r5, #68	; 0x44
   116e2:	e788      	b.n	115f6 <bt_conn_le_create+0x22>
		return -ENOMEM;
   116e4:	f06f 050b 	mvn.w	r5, #11
   116e8:	e785      	b.n	115f6 <bt_conn_le_create+0x22>
   116ea:	bf00      	nop
   116ec:	20008094 	.word	0x20008094
   116f0:	20008000 	.word	0x20008000

000116f4 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   116f4:	b570      	push	{r4, r5, r6, lr}
   116f6:	4606      	mov	r6, r0
   116f8:	4834      	ldr	r0, [pc, #208]	; (117cc <bt_le_set_auto_conn+0xd8>)
   116fa:	f00a fc00 	bl	1befe <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   116fe:	0780      	lsls	r0, r0, #30
{
   11700:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   11702:	d55c      	bpl.n	117be <bt_le_set_auto_conn+0xca>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   11704:	b929      	cbnz	r1, 11712 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
   11706:	f7fd fe6f 	bl	f3e8 <bt_le_scan_random_addr_check>
   1170a:	b940      	cbnz	r0, 1171e <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   1170c:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   11710:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   11712:	4608      	mov	r0, r1
   11714:	f00a fb51 	bl	1bdba <bt_le_conn_params_valid>
   11718:	2800      	cmp	r0, #0
   1171a:	d1f4      	bne.n	11706 <bt_le_set_auto_conn+0x12>
   1171c:	e7f6      	b.n	1170c <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   1171e:	4631      	mov	r1, r6
   11720:	2000      	movs	r0, #0
   11722:	f7ff febb 	bl	1149c <bt_conn_lookup_addr_le>
	if (!conn) {
   11726:	4604      	mov	r4, r0
   11728:	b928      	cbnz	r0, 11736 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   1172a:	4631      	mov	r1, r6
   1172c:	f7ff fd68 	bl	11200 <bt_conn_add_le>
		if (!conn) {
   11730:	4604      	mov	r4, r0
   11732:	2800      	cmp	r0, #0
   11734:	d046      	beq.n	117c4 <bt_le_set_auto_conn+0xd0>
		if (!atomic_test_and_set_bit(conn->flags,
   11736:	1d23      	adds	r3, r4, #4
	if (param) {
   11738:	b365      	cbz	r5, 11794 <bt_le_set_auto_conn+0xa0>
	conn->le.interval_min = param->interval_min;
   1173a:	882a      	ldrh	r2, [r5, #0]
   1173c:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   11740:	886a      	ldrh	r2, [r5, #2]
   11742:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   11746:	88aa      	ldrh	r2, [r5, #4]
   11748:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   1174c:	88ea      	ldrh	r2, [r5, #6]
   1174e:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11752:	e8d3 2fef 	ldaex	r2, [r3]
   11756:	f042 0101 	orr.w	r1, r2, #1
   1175a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1175e:	2800      	cmp	r0, #0
   11760:	d1f7      	bne.n	11752 <bt_le_set_auto_conn+0x5e>
		if (!atomic_test_and_set_bit(conn->flags,
   11762:	07d1      	lsls	r1, r2, #31
   11764:	d402      	bmi.n	1176c <bt_le_set_auto_conn+0x78>
			bt_conn_ref(conn);
   11766:	4620      	mov	r0, r4
   11768:	f00a fc3f 	bl	1bfea <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1176c:	7aa3      	ldrb	r3, [r4, #10]
   1176e:	b963      	cbnz	r3, 1178a <bt_le_set_auto_conn+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11770:	4816      	ldr	r0, [pc, #88]	; (117cc <bt_le_set_auto_conn+0xd8>)
   11772:	f00a fbc4 	bl	1befe <atomic_get>
   11776:	0783      	lsls	r3, r0, #30
   11778:	d507      	bpl.n	1178a <bt_le_set_auto_conn+0x96>
		if (param) {
   1177a:	b11d      	cbz	r5, 11784 <bt_le_set_auto_conn+0x90>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1177c:	2102      	movs	r1, #2
   1177e:	4620      	mov	r0, r4
   11780:	f7ff fd96 	bl	112b0 <bt_conn_set_state>
		bt_le_scan_update(false);
   11784:	2000      	movs	r0, #0
   11786:	f7fd febb 	bl	f500 <bt_le_scan_update>
	bt_conn_unref(conn);
   1178a:	4620      	mov	r0, r4
   1178c:	f7ff fd64 	bl	11258 <bt_conn_unref>
	return 0;
   11790:	2000      	movs	r0, #0
   11792:	e7bd      	b.n	11710 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11794:	e8d3 2fef 	ldaex	r2, [r3]
   11798:	f022 0101 	bic.w	r1, r2, #1
   1179c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   117a0:	2800      	cmp	r0, #0
   117a2:	d1f7      	bne.n	11794 <bt_le_set_auto_conn+0xa0>
		if (atomic_test_and_clear_bit(conn->flags,
   117a4:	07d2      	lsls	r2, r2, #31
   117a6:	d5e1      	bpl.n	1176c <bt_le_set_auto_conn+0x78>
			bt_conn_unref(conn);
   117a8:	4620      	mov	r0, r4
   117aa:	f7ff fd55 	bl	11258 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   117ae:	7aa3      	ldrb	r3, [r4, #10]
   117b0:	2b02      	cmp	r3, #2
   117b2:	d1db      	bne.n	1176c <bt_le_set_auto_conn+0x78>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   117b4:	4629      	mov	r1, r5
   117b6:	4620      	mov	r0, r4
   117b8:	f7ff fd7a 	bl	112b0 <bt_conn_set_state>
   117bc:	e7d6      	b.n	1176c <bt_le_set_auto_conn+0x78>
		return -EAGAIN;
   117be:	f06f 000a 	mvn.w	r0, #10
   117c2:	e7a5      	b.n	11710 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   117c4:	f06f 000b 	mvn.w	r0, #11
   117c8:	e7a2      	b.n	11710 <bt_le_set_auto_conn+0x1c>
   117ca:	bf00      	nop
   117cc:	20008094 	.word	0x20008094

000117d0 <bt_conn_disconnect>:
{
   117d0:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   117d2:	7883      	ldrb	r3, [r0, #2]
{
   117d4:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   117d6:	2b01      	cmp	r3, #1
{
   117d8:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   117da:	d103      	bne.n	117e4 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   117dc:	2100      	movs	r1, #0
   117de:	3088      	adds	r0, #136	; 0x88
   117e0:	f7ff ff88 	bl	116f4 <bt_le_set_auto_conn>
	switch (conn->state) {
   117e4:	7aa3      	ldrb	r3, [r4, #10]
   117e6:	3b02      	subs	r3, #2
   117e8:	2b06      	cmp	r3, #6
   117ea:	d805      	bhi.n	117f8 <bt_conn_disconnect+0x28>
   117ec:	e8df f003 	tbb	[pc, r3]
   117f0:	12040408 	.word	0x12040408
   117f4:	271f      	.short	0x271f
   117f6:	10          	.byte	0x10
   117f7:	00          	.byte	0x00
   117f8:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   117fc:	4628      	mov	r0, r5
   117fe:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11800:	4620      	mov	r0, r4
   11802:	2100      	movs	r1, #0
		conn->err = reason;
   11804:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11806:	f7ff fd53 	bl	112b0 <bt_conn_set_state>
			bt_le_scan_update(false);
   1180a:	2000      	movs	r0, #0
   1180c:	f7fd fe78 	bl	f500 <bt_le_scan_update>
		return 0;
   11810:	2500      	movs	r5, #0
   11812:	e7f3      	b.n	117fc <bt_conn_disconnect+0x2c>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
   11814:	2157      	movs	r1, #87	; 0x57
   11816:	4810      	ldr	r0, [pc, #64]	; (11858 <bt_conn_disconnect+0x88>)
   11818:	f008 ff28 	bl	1a66c <printk>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1181c:	4620      	mov	r0, r4
		conn->err = reason;
   1181e:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   11820:	2100      	movs	r1, #0
   11822:	f7ff fd45 	bl	112b0 <bt_conn_set_state>
}
   11826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   1182a:	f7fe bff1 	b.w	10810 <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->deferred_work);
   1182e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   11832:	f008 f815 	bl	19860 <k_delayed_work_cancel>
}
   11836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   1183a:	f7fd be3d 	b.w	f4b8 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   1183e:	4629      	mov	r1, r5
   11840:	8820      	ldrh	r0, [r4, #0]
   11842:	f00a fa9f 	bl	1bd84 <bt_hci_disconnect>
	if (err) {
   11846:	4605      	mov	r5, r0
   11848:	2800      	cmp	r0, #0
   1184a:	d1d7      	bne.n	117fc <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1184c:	2108      	movs	r1, #8
   1184e:	4620      	mov	r0, r4
   11850:	f7ff fd2e 	bl	112b0 <bt_conn_set_state>
	return 0;
   11854:	e7d2      	b.n	117fc <bt_conn_disconnect+0x2c>
   11856:	bf00      	nop
   11858:	000219ab 	.word	0x000219ab

0001185c <send_conn_le_param_update>:
{
   1185c:	b538      	push	{r3, r4, r5, lr}
   1185e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   11860:	4608      	mov	r0, r1
{
   11862:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   11864:	f00a faa9 	bl	1bdba <bt_le_conn_params_valid>
   11868:	b308      	cbz	r0, 118ae <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1186a:	4b12      	ldr	r3, [pc, #72]	; (118b4 <send_conn_le_param_update+0x58>)
   1186c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   11870:	0799      	lsls	r1, r3, #30
   11872:	d407      	bmi.n	11884 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   11874:	78e3      	ldrb	r3, [r4, #3]
   11876:	b173      	cbz	r3, 11896 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   11878:	4629      	mov	r1, r5
   1187a:	4620      	mov	r0, r4
}
   1187c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   11880:	f000 bb14 	b.w	11eac <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   11884:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   11888:	079a      	lsls	r2, r3, #30
   1188a:	d5f3      	bpl.n	11874 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1188c:	1d20      	adds	r0, r4, #4
   1188e:	f00a fb36 	bl	1befe <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   11892:	0543      	lsls	r3, r0, #21
   11894:	d4ee      	bmi.n	11874 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   11896:	4629      	mov	r1, r5
   11898:	4620      	mov	r0, r4
   1189a:	f00a fbe1 	bl	1c060 <bt_conn_le_conn_update>
		if (rc == 0) {
   1189e:	b928      	cbnz	r0, 118ac <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   118a0:	88ab      	ldrh	r3, [r5, #4]
   118a2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   118a6:	88eb      	ldrh	r3, [r5, #6]
   118a8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   118ac:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   118ae:	f06f 0015 	mvn.w	r0, #21
   118b2:	e7fb      	b.n	118ac <send_conn_le_param_update+0x50>
   118b4:	20008000 	.word	0x20008000

000118b8 <deferred_work>:
{
   118b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   118ba:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   118be:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   118c0:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   118c4:	b99b      	cbnz	r3, 118ee <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   118c6:	4630      	mov	r0, r6
   118c8:	f00a fc2a 	bl	1c120 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   118cc:	4b26      	ldr	r3, [pc, #152]	; (11968 <deferred_work+0xb0>)
   118ce:	681d      	ldr	r5, [r3, #0]
   118d0:	b92d      	cbnz	r5, 118de <deferred_work+0x26>
		bt_conn_unref(conn);
   118d2:	4630      	mov	r0, r6
}
   118d4:	b002      	add	sp, #8
   118d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   118da:	f7ff bcbd 	b.w	11258 <bt_conn_unref>
		if (cb->disconnected) {
   118de:	686b      	ldr	r3, [r5, #4]
   118e0:	b11b      	cbz	r3, 118ea <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   118e2:	4630      	mov	r0, r6
   118e4:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   118e8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   118ea:	692d      	ldr	r5, [r5, #16]
   118ec:	e7f0      	b.n	118d0 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   118ee:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   118f2:	2b01      	cmp	r3, #1
   118f4:	d12f      	bne.n	11956 <deferred_work+0x9e>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   118f6:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   118fa:	b923      	cbnz	r3, 11906 <deferred_work+0x4e>
}
   118fc:	b002      	add	sp, #8
   118fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
   11902:	f7fd bdd9 	b.w	f4b8 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   11906:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1190a:	e8d5 3fef 	ldaex	r3, [r5]
   1190e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   11912:	e8c5 2fe1 	stlex	r1, r2, [r5]
   11916:	2900      	cmp	r1, #0
   11918:	d1f7      	bne.n	1190a <deferred_work+0x52>
   1191a:	059b      	lsls	r3, r3, #22
   1191c:	d51d      	bpl.n	1195a <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1191e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   11922:	f8ad 3000 	strh.w	r3, [sp]
   11926:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   1192a:	f8ad 3002 	strh.w	r3, [sp, #2]
   1192e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   11932:	f8ad 3004 	strh.w	r3, [sp, #4]
   11936:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   1193a:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   1193e:	4669      	mov	r1, sp
   11940:	4630      	mov	r0, r6
   11942:	f7ff ff8b 	bl	1185c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11946:	e8d5 3fef 	ldaex	r3, [r5]
   1194a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1194e:	e8c5 3fe2 	stlex	r2, r3, [r5]
   11952:	2a00      	cmp	r2, #0
   11954:	d1f7      	bne.n	11946 <deferred_work+0x8e>
}
   11956:	b002      	add	sp, #8
   11958:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
   1195a:	466b      	mov	r3, sp
   1195c:	4a03      	ldr	r2, [pc, #12]	; (1196c <deferred_work+0xb4>)
   1195e:	6810      	ldr	r0, [r2, #0]
   11960:	6851      	ldr	r1, [r2, #4]
   11962:	c303      	stmia	r3!, {r0, r1}
   11964:	e7eb      	b.n	1193e <deferred_work+0x86>
   11966:	bf00      	nop
   11968:	2000ab48 	.word	0x2000ab48
   1196c:	0001e5d8 	.word	0x0001e5d8

00011970 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   11970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11972:	4604      	mov	r4, r0
   11974:	460d      	mov	r5, r1
   11976:	4617      	mov	r7, r2
   11978:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   1197a:	f00c fa9c 	bl	1deb6 <k_is_in_isr>
   1197e:	b150      	cbz	r0, 11996 <bt_conn_create_pdu_timeout+0x26>
   11980:	490f      	ldr	r1, [pc, #60]	; (119c0 <bt_conn_create_pdu_timeout+0x50>)
   11982:	4810      	ldr	r0, [pc, #64]	; (119c4 <bt_conn_create_pdu_timeout+0x54>)
   11984:	f640 12ee 	movw	r2, #2542	; 0x9ee
   11988:	f008 fe70 	bl	1a66c <printk>
   1198c:	f640 11ee 	movw	r1, #2542	; 0x9ee
   11990:	480b      	ldr	r0, [pc, #44]	; (119c0 <bt_conn_create_pdu_timeout+0x50>)
   11992:	f009 f911 	bl	1abb8 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   11996:	480c      	ldr	r0, [pc, #48]	; (119c8 <bt_conn_create_pdu_timeout+0x58>)
   11998:	463a      	mov	r2, r7
   1199a:	2c00      	cmp	r4, #0
   1199c:	bf18      	it	ne
   1199e:	4620      	movne	r0, r4
   119a0:	4633      	mov	r3, r6
   119a2:	f00b fbb7 	bl	1d114 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   119a6:	4604      	mov	r4, r0
   119a8:	b928      	cbnz	r0, 119b6 <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   119aa:	2157      	movs	r1, #87	; 0x57
   119ac:	4807      	ldr	r0, [pc, #28]	; (119cc <bt_conn_create_pdu_timeout+0x5c>)
   119ae:	f008 fe5d 	bl	1a66c <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   119b2:	4620      	mov	r0, r4
   119b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   119b6:	1d69      	adds	r1, r5, #5
   119b8:	3008      	adds	r0, #8
   119ba:	f003 fd8f 	bl	154dc <net_buf_simple_reserve>
	return buf;
   119be:	e7f8      	b.n	119b2 <bt_conn_create_pdu_timeout+0x42>
   119c0:	000217e0 	.word	0x000217e0
   119c4:	0001fbb7 	.word	0x0001fbb7
   119c8:	200086ec 	.word	0x200086ec
   119cc:	000219d7 	.word	0x000219d7

000119d0 <bt_conn_create_frag_timeout>:
{
   119d0:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   119d2:	4801      	ldr	r0, [pc, #4]	; (119d8 <bt_conn_create_frag_timeout+0x8>)
   119d4:	f7ff bfcc 	b.w	11970 <bt_conn_create_pdu_timeout>
   119d8:	20008744 	.word	0x20008744

000119dc <create_frag>:
{
   119dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   119e0:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   119e2:	f04f 33ff 	mov.w	r3, #4294967295
   119e6:	f04f 32ff 	mov.w	r2, #4294967295
   119ea:	2000      	movs	r0, #0
{
   119ec:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   119ee:	f7ff ffef 	bl	119d0 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   119f2:	7ab3      	ldrb	r3, [r6, #10]
		frag = bt_conn_create_frag(0);
   119f4:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   119f6:	2b07      	cmp	r3, #7
   119f8:	f04f 0600 	mov.w	r6, #0
   119fc:	d005      	beq.n	11a0a <create_frag+0x2e>
		net_buf_unref(frag);
   119fe:	f003 fdbf 	bl	15580 <net_buf_unref>
		return NULL;
   11a02:	4635      	mov	r5, r6
}
   11a04:	4628      	mov	r0, r5
   11a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   11a0a:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   11a0c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   11a10:	4e0c      	ldr	r6, [pc, #48]	; (11a44 <create_frag+0x68>)
   11a12:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11a14:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
   11a18:	f00b fba2 	bl	1d160 <net_buf_simple_tailroom>
   11a1c:	4580      	cmp	r8, r0
   11a1e:	d20c      	bcs.n	11a3a <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   11a20:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   11a24:	f854 1f08 	ldr.w	r1, [r4, #8]!
   11a28:	4632      	mov	r2, r6
   11a2a:	4638      	mov	r0, r7
   11a2c:	f00b fba0 	bl	1d170 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   11a30:	4631      	mov	r1, r6
   11a32:	4620      	mov	r0, r4
   11a34:	f003 fe80 	bl	15738 <net_buf_simple_pull>
   11a38:	e7e4      	b.n	11a04 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   11a3a:	4638      	mov	r0, r7
   11a3c:	f00b fb90 	bl	1d160 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   11a40:	b286      	uxth	r6, r0
   11a42:	e7ef      	b.n	11a24 <create_frag+0x48>
   11a44:	20008000 	.word	0x20008000

00011a48 <bt_conn_process_tx>:
{
   11a48:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   11a4a:	7a83      	ldrb	r3, [r0, #10]
{
   11a4c:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   11a4e:	b973      	cbnz	r3, 11a6e <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11a50:	1d03      	adds	r3, r0, #4
   11a52:	e8d3 2fef 	ldaex	r2, [r3]
   11a56:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   11a5a:	e8c3 1fe5 	stlex	r5, r1, [r3]
   11a5e:	2d00      	cmp	r5, #0
   11a60:	d1f7      	bne.n	11a52 <bt_conn_process_tx+0xa>
   11a62:	0653      	lsls	r3, r2, #25
   11a64:	d503      	bpl.n	11a6e <bt_conn_process_tx+0x26>
}
   11a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   11a6a:	f7ff ba8f 	b.w	10f8c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   11a6e:	2200      	movs	r2, #0
   11a70:	2300      	movs	r3, #0
   11a72:	f104 0034 	add.w	r0, r4, #52	; 0x34
   11a76:	f003 fd01 	bl	1547c <net_buf_get>
	BT_ASSERT(buf);
   11a7a:	4605      	mov	r5, r0
   11a7c:	b958      	cbnz	r0, 11a96 <bt_conn_process_tx+0x4e>
   11a7e:	f240 525f 	movw	r2, #1375	; 0x55f
   11a82:	491e      	ldr	r1, [pc, #120]	; (11afc <bt_conn_process_tx+0xb4>)
   11a84:	481e      	ldr	r0, [pc, #120]	; (11b00 <bt_conn_process_tx+0xb8>)
   11a86:	f008 fdf1 	bl	1a66c <printk>
   11a8a:	4040      	eors	r0, r0
   11a8c:	f380 8811 	msr	BASEPRI, r0
   11a90:	f04f 0003 	mov.w	r0, #3
   11a94:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   11a96:	4e1b      	ldr	r6, [pc, #108]	; (11b04 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   11a98:	89aa      	ldrh	r2, [r5, #12]
   11a9a:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11a9e:	429a      	cmp	r2, r3
   11aa0:	d807      	bhi.n	11ab2 <bt_conn_process_tx+0x6a>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   11aa2:	2300      	movs	r3, #0
   11aa4:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   11aa6:	4629      	mov	r1, r5
   11aa8:	4620      	mov	r0, r4
   11aaa:	f7ff f971 	bl	10d90 <send_frag>
	if (!send_buf(conn, buf)) {
   11aae:	b130      	cbz	r0, 11abe <bt_conn_process_tx+0x76>
}
   11ab0:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   11ab2:	4629      	mov	r1, r5
   11ab4:	4620      	mov	r0, r4
   11ab6:	f7ff ff91 	bl	119dc <create_frag>
	if (!frag) {
   11aba:	4601      	mov	r1, r0
   11abc:	b920      	cbnz	r0, 11ac8 <bt_conn_process_tx+0x80>
		net_buf_unref(buf);
   11abe:	4628      	mov	r0, r5
}
   11ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   11ac4:	f003 bd5c 	b.w	15580 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   11ac8:	2301      	movs	r3, #1
   11aca:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11acc:	4620      	mov	r0, r4
   11ace:	f7ff f95f 	bl	10d90 <send_frag>
   11ad2:	2800      	cmp	r0, #0
   11ad4:	d0f3      	beq.n	11abe <bt_conn_process_tx+0x76>
	while (buf->len > conn_mtu(conn)) {
   11ad6:	89aa      	ldrh	r2, [r5, #12]
   11ad8:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11adc:	429a      	cmp	r2, r3
   11ade:	d802      	bhi.n	11ae6 <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   11ae0:	2300      	movs	r3, #0
   11ae2:	2203      	movs	r2, #3
   11ae4:	e7df      	b.n	11aa6 <bt_conn_process_tx+0x5e>
		frag = create_frag(conn, buf);
   11ae6:	4629      	mov	r1, r5
   11ae8:	4620      	mov	r0, r4
   11aea:	f7ff ff77 	bl	119dc <create_frag>
		if (!frag) {
   11aee:	4601      	mov	r1, r0
   11af0:	2800      	cmp	r0, #0
   11af2:	d0e4      	beq.n	11abe <bt_conn_process_tx+0x76>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11af4:	2301      	movs	r3, #1
   11af6:	461a      	mov	r2, r3
   11af8:	e7e8      	b.n	11acc <bt_conn_process_tx+0x84>
   11afa:	bf00      	nop
   11afc:	000217e0 	.word	0x000217e0
   11b00:	0001fbb7 	.word	0x0001fbb7
   11b04:	20008000 	.word	0x20008000

00011b08 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   11b08:	4b0b      	ldr	r3, [pc, #44]	; (11b38 <bt_conn_index+0x30>)
{
   11b0a:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   11b0c:	1ac0      	subs	r0, r0, r3
   11b0e:	4b0b      	ldr	r3, [pc, #44]	; (11b3c <bt_conn_index+0x34>)
   11b10:	1184      	asrs	r4, r0, #6
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11b12:	f5b0 6fd8 	cmp.w	r0, #1728	; 0x6c0
		index = conn - acl_conns;
   11b16:	fb03 f404 	mul.w	r4, r3, r4
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   11b1a:	d90a      	bls.n	11b32 <bt_conn_index+0x2a>
   11b1c:	4908      	ldr	r1, [pc, #32]	; (11b40 <bt_conn_index+0x38>)
   11b1e:	4809      	ldr	r0, [pc, #36]	; (11b44 <bt_conn_index+0x3c>)
   11b20:	f640 2295 	movw	r2, #2709	; 0xa95
   11b24:	f008 fda2 	bl	1a66c <printk>
   11b28:	f640 2195 	movw	r1, #2709	; 0xa95
   11b2c:	4804      	ldr	r0, [pc, #16]	; (11b40 <bt_conn_index+0x38>)
   11b2e:	f009 f843 	bl	1abb8 <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   11b32:	b2e0      	uxtb	r0, r4
   11b34:	bd10      	pop	{r4, pc}
   11b36:	bf00      	nop
   11b38:	20008d08 	.word	0x20008d08
   11b3c:	aaaaaaab 	.word	0xaaaaaaab
   11b40:	000217e0 	.word	0x000217e0
   11b44:	0001fbb7 	.word	0x0001fbb7

00011b48 <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   11b48:	2809      	cmp	r0, #9
   11b4a:	d806      	bhi.n	11b5a <bt_conn_lookup_index+0x12>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   11b4c:	4b04      	ldr	r3, [pc, #16]	; (11b60 <bt_conn_lookup_index+0x18>)
   11b4e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11b52:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   11b56:	f00a ba48 	b.w	1bfea <bt_conn_ref>
}
   11b5a:	2000      	movs	r0, #0
   11b5c:	4770      	bx	lr
   11b5e:	bf00      	nop
   11b60:	20008d08 	.word	0x20008d08

00011b64 <bt_conn_init>:

int bt_conn_init(void)
{
   11b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   11b66:	4917      	ldr	r1, [pc, #92]	; (11bc4 <bt_conn_init+0x60>)
   11b68:	4817      	ldr	r0, [pc, #92]	; (11bc8 <bt_conn_init+0x64>)
   11b6a:	f00c f93c 	bl	1dde6 <k_queue_append>
   11b6e:	4917      	ldr	r1, [pc, #92]	; (11bcc <bt_conn_init+0x68>)
   11b70:	4815      	ldr	r0, [pc, #84]	; (11bc8 <bt_conn_init+0x64>)
   11b72:	f00c f938 	bl	1dde6 <k_queue_append>
   11b76:	4916      	ldr	r1, [pc, #88]	; (11bd0 <bt_conn_init+0x6c>)
   11b78:	4813      	ldr	r0, [pc, #76]	; (11bc8 <bt_conn_init+0x64>)
   11b7a:	f00c f934 	bl	1dde6 <k_queue_append>
	}

	bt_att_init();
   11b7e:	f00a fe4f 	bl	1c820 <bt_att_init>

	err = bt_smp_init();
   11b82:	f00b fac4 	bl	1d10e <bt_smp_init>
	if (err) {
   11b86:	4605      	mov	r5, r0
   11b88:	b9d0      	cbnz	r0, 11bc0 <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   11b8a:	f00a fb32 	bl	1c1f2 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11b8e:	462e      	mov	r6, r5
   11b90:	4f10      	ldr	r7, [pc, #64]	; (11bd4 <bt_conn_init+0x70>)
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11b92:	4638      	mov	r0, r7
   11b94:	f00a fa29 	bl	1bfea <bt_conn_ref>

			if (!conn) {
   11b98:	4604      	mov	r4, r0
   11b9a:	b160      	cbz	r0, 11bb6 <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11b9c:	3004      	adds	r0, #4
   11b9e:	f00a f9ae 	bl	1befe <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   11ba2:	07c3      	lsls	r3, r0, #31
   11ba4:	d504      	bpl.n	11bb0 <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11ba6:	2102      	movs	r1, #2
   11ba8:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   11baa:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11bac:	f7ff fb80 	bl	112b0 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   11bb0:	4620      	mov	r0, r4
   11bb2:	f7ff fb51 	bl	11258 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11bb6:	3601      	adds	r6, #1
   11bb8:	2e0a      	cmp	r6, #10
   11bba:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   11bbe:	d1e8      	bne.n	11b92 <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   11bc0:	4628      	mov	r0, r5
   11bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11bc4:	2000ab4c 	.word	0x2000ab4c
   11bc8:	200086a4 	.word	0x200086a4
   11bcc:	2000ab5c 	.word	0x2000ab5c
   11bd0:	2000ab6c 	.word	0x2000ab6c
   11bd4:	20008d08 	.word	0x20008d08

00011bd8 <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   11bd8:	b570      	push	{r4, r5, r6, lr}
   11bda:	4602      	mov	r2, r0
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   11bdc:	2400      	movs	r4, #0
   11bde:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   11be0:	4b09      	ldr	r3, [pc, #36]	; (11c08 <l2cap_accept+0x30>)
   11be2:	fb06 f504 	mul.w	r5, r6, r4
   11be6:	58e8      	ldr	r0, [r5, r3]
   11be8:	b148      	cbz	r0, 11bfe <l2cap_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   11bea:	3401      	adds	r4, #1
   11bec:	2c0a      	cmp	r4, #10
   11bee:	d1f8      	bne.n	11be2 <l2cap_accept+0xa>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   11bf0:	4806      	ldr	r0, [pc, #24]	; (11c0c <l2cap_accept+0x34>)
   11bf2:	2145      	movs	r1, #69	; 0x45
   11bf4:	f008 fd3a 	bl	1a66c <printk>
   11bf8:	f06f 000b 	mvn.w	r0, #11
   11bfc:	e003      	b.n	11c06 <l2cap_accept+0x2e>
		l2cap->chan.chan.ops = &ops;
   11bfe:	4a04      	ldr	r2, [pc, #16]	; (11c10 <l2cap_accept+0x38>)
   11c00:	442b      	add	r3, r5
   11c02:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   11c04:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   11c06:	bd70      	pop	{r4, r5, r6, pc}
   11c08:	20009488 	.word	0x20009488
   11c0c:	00021a6f 	.word	0x00021a6f
   11c10:	0001eacc 	.word	0x0001eacc

00011c14 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   11c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c16:	4605      	mov	r5, r0
   11c18:	460f      	mov	r7, r1
   11c1a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   11c1c:	2300      	movs	r3, #0
   11c1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11c22:	2104      	movs	r1, #4
   11c24:	2000      	movs	r0, #0
   11c26:	f7ff fea3 	bl	11970 <bt_conn_create_pdu_timeout>
	if (!buf) {
   11c2a:	4604      	mov	r4, r0
   11c2c:	b930      	cbnz	r0, 11c3c <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   11c2e:	462a      	mov	r2, r5
   11c30:	2145      	movs	r1, #69	; 0x45
   11c32:	4806      	ldr	r0, [pc, #24]	; (11c4c <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   11c34:	f008 fd1a 	bl	1a66c <printk>
}
   11c38:	4620      	mov	r0, r4
   11c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   11c3c:	2104      	movs	r1, #4
   11c3e:	3008      	adds	r0, #8
   11c40:	f003 fdb4 	bl	157ac <net_buf_simple_add>
	hdr->code = code;
   11c44:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   11c46:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   11c48:	8046      	strh	r6, [r0, #2]
	return buf;
   11c4a:	e7f5      	b.n	11c38 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   11c4c:	00021a9b 	.word	0x00021a9b

00011c50 <l2cap_rtx_timeout>:
{
   11c50:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   11c52:	4604      	mov	r4, r0
   11c54:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   11c58:	2145      	movs	r1, #69	; 0x45
   11c5a:	4622      	mov	r2, r4
   11c5c:	4805      	ldr	r0, [pc, #20]	; (11c74 <l2cap_rtx_timeout+0x24>)
   11c5e:	f008 fd05 	bl	1a66c <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
   11c62:	4628      	mov	r0, r5
   11c64:	4621      	mov	r1, r4
   11c66:	f00a fa25 	bl	1c0b4 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   11c6a:	4620      	mov	r0, r4
}
   11c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   11c70:	f00a ba41 	b.w	1c0f6 <bt_l2cap_chan_del>
   11c74:	00021ac8 	.word	0x00021ac8

00011c78 <bt_l2cap_connected>:
{
   11c78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11c7c:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11c7e:	4e2d      	ldr	r6, [pc, #180]	; (11d34 <bt_l2cap_connected+0xbc>)
   11c80:	4f2d      	ldr	r7, [pc, #180]	; (11d38 <bt_l2cap_connected+0xc0>)
   11c82:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 11d3c <bt_l2cap_connected+0xc4>
   11c86:	42be      	cmp	r6, r7
   11c88:	d90a      	bls.n	11ca0 <bt_l2cap_connected+0x28>
   11c8a:	4641      	mov	r1, r8
   11c8c:	482c      	ldr	r0, [pc, #176]	; (11d40 <bt_l2cap_connected+0xc8>)
   11c8e:	f240 1267 	movw	r2, #359	; 0x167
   11c92:	f008 fceb 	bl	1a66c <printk>
   11c96:	f240 1167 	movw	r1, #359	; 0x167
   11c9a:	4640      	mov	r0, r8
   11c9c:	f008 ff8c 	bl	1abb8 <assert_post_action>
   11ca0:	42be      	cmp	r6, r7
   11ca2:	d302      	bcc.n	11caa <bt_l2cap_connected+0x32>
}
   11ca4:	b003      	add	sp, #12
   11ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   11caa:	4628      	mov	r0, r5
   11cac:	6873      	ldr	r3, [r6, #4]
   11cae:	a901      	add	r1, sp, #4
   11cb0:	4798      	blx	r3
   11cb2:	2800      	cmp	r0, #0
   11cb4:	db38      	blt.n	11d28 <bt_l2cap_connected+0xb0>
		ch = BT_L2CAP_LE_CHAN(chan);
   11cb6:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   11cb8:	8833      	ldrh	r3, [r6, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11cba:	2230      	movs	r2, #48	; 0x30
   11cbc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   11cc0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   11cc4:	2100      	movs	r1, #0
   11cc6:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   11cca:	f8d6 9008 	ldr.w	r9, [r6, #8]
   11cce:	f009 ff3c 	bl	1bb4a <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11cd2:	2200      	movs	r2, #0
   11cd4:	4b1b      	ldr	r3, [pc, #108]	; (11d44 <bt_l2cap_connected+0xcc>)
   11cd6:	6163      	str	r3, [r4, #20]
   11cd8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11cdc:	e8d3 1fef 	ldaex	r1, [r3]
   11ce0:	e8c3 2fe0 	stlex	r0, r2, [r3]
   11ce4:	2800      	cmp	r0, #0
   11ce6:	d1f9      	bne.n	11cdc <bt_l2cap_connected+0x64>
	parent->next = child;
   11ce8:	60a2      	str	r2, [r4, #8]
	return list->tail;
   11cea:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   11cec:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
   11cf0:	b9e2      	cbnz	r2, 11d2c <bt_l2cap_connected+0xb4>
	list->head = node;
   11cf2:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
		if (chan->ops->connected) {
   11cf6:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   11cf8:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
   11cfa:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   11cfc:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   11d00:	681b      	ldr	r3, [r3, #0]
   11d02:	b103      	cbz	r3, 11d06 <bt_l2cap_connected+0x8e>
			chan->ops->connected(chan);
   11d04:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11d06:	9b01      	ldr	r3, [sp, #4]
   11d08:	3340      	adds	r3, #64	; 0x40
   11d0a:	e8d3 2fef 	ldaex	r2, [r3]
   11d0e:	f042 0201 	orr.w	r2, r2, #1
   11d12:	e8c3 2fe1 	stlex	r1, r2, [r3]
   11d16:	2900      	cmp	r1, #0
   11d18:	d1f7      	bne.n	11d0a <bt_l2cap_connected+0x92>
		if (chan->ops->status) {
   11d1a:	9801      	ldr	r0, [sp, #4]
   11d1c:	6843      	ldr	r3, [r0, #4]
   11d1e:	699b      	ldr	r3, [r3, #24]
   11d20:	b113      	cbz	r3, 11d28 <bt_l2cap_connected+0xb0>
			chan->ops->status(chan, chan->status);
   11d22:	f100 0140 	add.w	r1, r0, #64	; 0x40
   11d26:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11d28:	360c      	adds	r6, #12
   11d2a:	e7ac      	b.n	11c86 <bt_l2cap_connected+0xe>
	parent->next = child;
   11d2c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   11d2e:	656b      	str	r3, [r5, #84]	; 0x54
}
   11d30:	e7e1      	b.n	11cf6 <bt_l2cap_connected+0x7e>
   11d32:	bf00      	nop
   11d34:	0001e3ac 	.word	0x0001e3ac
   11d38:	0001e3d0 	.word	0x0001e3d0
   11d3c:	00021add 	.word	0x00021add
   11d40:	0001fbb7 	.word	0x0001fbb7
   11d44:	00011c51 	.word	0x00011c51

00011d48 <l2cap_recv>:
{
   11d48:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   11d4a:	898b      	ldrh	r3, [r1, #12]
{
   11d4c:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   11d4e:	2b03      	cmp	r3, #3
{
   11d50:	460d      	mov	r5, r1
   11d52:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   11d54:	d804      	bhi.n	11d60 <l2cap_recv+0x18>
		BT_ERR("Too small L2CAP signaling PDU");
   11d56:	2145      	movs	r1, #69	; 0x45
   11d58:	483a      	ldr	r0, [pc, #232]	; (11e44 <l2cap_recv+0xfc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   11d5a:	f008 fc87 	bl	1a66c <printk>
		return 0;
   11d5e:	e00d      	b.n	11d7c <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   11d60:	2104      	movs	r1, #4
   11d62:	f105 0008 	add.w	r0, r5, #8
   11d66:	f003 fd03 	bl	15770 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   11d6a:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   11d6c:	8843      	ldrh	r3, [r0, #2]
   11d6e:	4604      	mov	r4, r0
	if (buf->len != len) {
   11d70:	4293      	cmp	r3, r2
   11d72:	d006      	beq.n	11d82 <l2cap_recv+0x3a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   11d74:	2145      	movs	r1, #69	; 0x45
   11d76:	4834      	ldr	r0, [pc, #208]	; (11e48 <l2cap_recv+0x100>)
   11d78:	f008 fc78 	bl	1a66c <printk>
}
   11d7c:	2000      	movs	r0, #0
   11d7e:	b005      	add	sp, #20
   11d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   11d82:	7841      	ldrb	r1, [r0, #1]
   11d84:	b911      	cbnz	r1, 11d8c <l2cap_recv+0x44>
		BT_ERR("Invalid ident value in L2CAP PDU");
   11d86:	2145      	movs	r1, #69	; 0x45
   11d88:	4830      	ldr	r0, [pc, #192]	; (11e4c <l2cap_recv+0x104>)
   11d8a:	e7e6      	b.n	11d5a <l2cap_recv+0x12>
	switch (hdr->code) {
   11d8c:	7802      	ldrb	r2, [r0, #0]
   11d8e:	2a12      	cmp	r2, #18
   11d90:	d00f      	beq.n	11db2 <l2cap_recv+0x6a>
   11d92:	2a13      	cmp	r2, #19
   11d94:	d008      	beq.n	11da8 <l2cap_recv+0x60>
   11d96:	2a01      	cmp	r2, #1
   11d98:	d0f0      	beq.n	11d7c <l2cap_recv+0x34>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   11d9a:	2157      	movs	r1, #87	; 0x57
   11d9c:	482c      	ldr	r0, [pc, #176]	; (11e50 <l2cap_recv+0x108>)
   11d9e:	f008 fc65 	bl	1a66c <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   11da2:	7861      	ldrb	r1, [r4, #1]
   11da4:	6830      	ldr	r0, [r6, #0]
   11da6:	e00d      	b.n	11dc4 <l2cap_recv+0x7c>
	if (buf->len < sizeof(*rsp)) {
   11da8:	2b01      	cmp	r3, #1
   11daa:	d8e7      	bhi.n	11d7c <l2cap_recv+0x34>
		BT_ERR("Too small LE conn param rsp");
   11dac:	2145      	movs	r1, #69	; 0x45
   11dae:	4829      	ldr	r0, [pc, #164]	; (11e54 <l2cap_recv+0x10c>)
   11db0:	e7d3      	b.n	11d5a <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   11db2:	2b07      	cmp	r3, #7
   11db4:	d802      	bhi.n	11dbc <l2cap_recv+0x74>
		BT_ERR("Too small LE conn update param req");
   11db6:	2145      	movs	r1, #69	; 0x45
   11db8:	4827      	ldr	r0, [pc, #156]	; (11e58 <l2cap_recv+0x110>)
   11dba:	e7ce      	b.n	11d5a <l2cap_recv+0x12>
   11dbc:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   11dbe:	78e7      	ldrb	r7, [r4, #3]
   11dc0:	b11f      	cbz	r7, 11dca <l2cap_recv+0x82>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   11dc2:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   11dc4:	f00a f9de 	bl	1c184 <l2cap_send_reject.constprop.0>
		break;
   11dc8:	e7d8      	b.n	11d7c <l2cap_recv+0x34>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   11dca:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   11dcc:	7850      	ldrb	r0, [r2, #1]
   11dce:	7813      	ldrb	r3, [r2, #0]
   11dd0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11dd4:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   11dd8:	78d0      	ldrb	r0, [r2, #3]
   11dda:	7893      	ldrb	r3, [r2, #2]
   11ddc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11de0:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   11de4:	7950      	ldrb	r0, [r2, #5]
   11de6:	7913      	ldrb	r3, [r2, #4]
   11de8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11dec:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   11df0:	7993      	ldrb	r3, [r2, #6]
   11df2:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   11df4:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   11df6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   11dfa:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   11dfc:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   11e00:	f7ff ff08 	bl	11c14 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   11e04:	4605      	mov	r5, r0
   11e06:	2800      	cmp	r0, #0
   11e08:	d0b8      	beq.n	11d7c <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   11e0a:	a902      	add	r1, sp, #8
   11e0c:	4620      	mov	r0, r4
   11e0e:	f7ff f895 	bl	10f3c <le_param_req>
   11e12:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   11e14:	2102      	movs	r1, #2
   11e16:	f105 0008 	add.w	r0, r5, #8
   11e1a:	f003 fcc7 	bl	157ac <net_buf_simple_add>
	if (accepted) {
   11e1e:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   11e22:	b2db      	uxtb	r3, r3
   11e24:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   11e26:	462a      	mov	r2, r5
   11e28:	463b      	mov	r3, r7
   11e2a:	2105      	movs	r1, #5
   11e2c:	4620      	mov	r0, r4
   11e2e:	9700      	str	r7, [sp, #0]
   11e30:	f00a f98f 	bl	1c152 <bt_l2cap_send_cb>
	if (accepted) {
   11e34:	2e00      	cmp	r6, #0
   11e36:	d0a1      	beq.n	11d7c <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   11e38:	4620      	mov	r0, r4
   11e3a:	a902      	add	r1, sp, #8
   11e3c:	f00a f910 	bl	1c060 <bt_conn_le_conn_update>
   11e40:	e79c      	b.n	11d7c <l2cap_recv+0x34>
   11e42:	bf00      	nop
   11e44:	00021b0e 	.word	0x00021b0e
   11e48:	00021b31 	.word	0x00021b31
   11e4c:	00021b57 	.word	0x00021b57
   11e50:	00021bc6 	.word	0x00021bc6
   11e54:	00021b7d 	.word	0x00021b7d
   11e58:	00021b9e 	.word	0x00021b9e

00011e5c <bt_l2cap_recv>:
{
   11e5c:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   11e5e:	898b      	ldrh	r3, [r1, #12]
{
   11e60:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   11e62:	2b03      	cmp	r3, #3
{
   11e64:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   11e66:	d808      	bhi.n	11e7a <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   11e68:	2145      	movs	r1, #69	; 0x45
   11e6a:	480e      	ldr	r0, [pc, #56]	; (11ea4 <bt_l2cap_recv+0x48>)
   11e6c:	f008 fbfe 	bl	1a66c <printk>
	net_buf_unref(buf);
   11e70:	4620      	mov	r0, r4
}
   11e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   11e76:	f003 bb83 	b.w	15580 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   11e7a:	2104      	movs	r1, #4
   11e7c:	f104 0008 	add.w	r0, r4, #8
   11e80:	f003 fc76 	bl	15770 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   11e84:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   11e86:	4628      	mov	r0, r5
   11e88:	4611      	mov	r1, r2
   11e8a:	f00a f9a2 	bl	1c1d2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   11e8e:	b920      	cbnz	r0, 11e9a <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   11e90:	2157      	movs	r1, #87	; 0x57
   11e92:	4805      	ldr	r0, [pc, #20]	; (11ea8 <bt_l2cap_recv+0x4c>)
   11e94:	f008 fbea 	bl	1a66c <printk>
		net_buf_unref(buf);
   11e98:	e7ea      	b.n	11e70 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   11e9a:	6843      	ldr	r3, [r0, #4]
   11e9c:	4621      	mov	r1, r4
   11e9e:	691b      	ldr	r3, [r3, #16]
   11ea0:	4798      	blx	r3
   11ea2:	e7e5      	b.n	11e70 <bt_l2cap_recv+0x14>
   11ea4:	00021be9 	.word	0x00021be9
   11ea8:	00021c0b 	.word	0x00021c0b

00011eac <bt_l2cap_update_conn_param>:
{
   11eac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11eae:	460c      	mov	r4, r1
	ident++;
   11eb0:	4914      	ldr	r1, [pc, #80]	; (11f04 <bt_l2cap_update_conn_param+0x58>)
{
   11eb2:	4605      	mov	r5, r0
	ident++;
   11eb4:	780b      	ldrb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   11eb6:	2208      	movs	r2, #8
	ident++;
   11eb8:	3301      	adds	r3, #1
	if (!ident) {
   11eba:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   11ebe:	bf08      	it	eq
   11ec0:	2301      	moveq	r3, #1
   11ec2:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   11ec4:	2012      	movs	r0, #18
   11ec6:	7809      	ldrb	r1, [r1, #0]
   11ec8:	f7ff fea4 	bl	11c14 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   11ecc:	4606      	mov	r6, r0
   11ece:	b1b0      	cbz	r0, 11efe <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   11ed0:	2108      	movs	r1, #8
   11ed2:	4408      	add	r0, r1
   11ed4:	f003 fc6a 	bl	157ac <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   11ed8:	8822      	ldrh	r2, [r4, #0]
   11eda:	2105      	movs	r1, #5
   11edc:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   11ede:	8862      	ldrh	r2, [r4, #2]
   11ee0:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   11ee2:	88a2      	ldrh	r2, [r4, #4]
   11ee4:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   11ee6:	88e2      	ldrh	r2, [r4, #6]
   11ee8:	2400      	movs	r4, #0
   11eea:	80c2      	strh	r2, [r0, #6]
   11eec:	4623      	mov	r3, r4
   11eee:	4632      	mov	r2, r6
   11ef0:	4628      	mov	r0, r5
   11ef2:	9400      	str	r4, [sp, #0]
   11ef4:	f00a f92d 	bl	1c152 <bt_l2cap_send_cb>
	return 0;
   11ef8:	4620      	mov	r0, r4
}
   11efa:	b002      	add	sp, #8
   11efc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   11efe:	f06f 000b 	mvn.w	r0, #11
   11f02:	e7fa      	b.n	11efa <bt_l2cap_update_conn_param+0x4e>
   11f04:	2000c96f 	.word	0x2000c96f

00011f08 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   11f08:	4b02      	ldr	r3, [pc, #8]	; (11f14 <att_cfm_sent+0xc>)
   11f0a:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   11f0e:	f00a b983 	b.w	1c218 <att_sent>
   11f12:	bf00      	nop
   11f14:	0001c627 	.word	0x0001c627

00011f18 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   11f18:	4b02      	ldr	r3, [pc, #8]	; (11f24 <att_rsp_sent+0xc>)
   11f1a:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   11f1e:	f00a b97b 	b.w	1c218 <att_sent>
   11f22:	bf00      	nop
   11f24:	0001c613 	.word	0x0001c613

00011f28 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   11f28:	4b02      	ldr	r3, [pc, #8]	; (11f34 <att_req_sent+0xc>)
   11f2a:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   11f2e:	f00a b973 	b.w	1c218 <att_sent>
   11f32:	bf00      	nop
   11f34:	000120e5 	.word	0x000120e5

00011f38 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   11f38:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   11f3a:	7a83      	ldrb	r3, [r0, #10]
   11f3c:	2b07      	cmp	r3, #7
   11f3e:	d005      	beq.n	11f4c <att_get+0x14>
		BT_WARN("Not connected");
   11f40:	2157      	movs	r1, #87	; 0x57
   11f42:	480e      	ldr	r0, [pc, #56]	; (11f7c <att_get+0x44>)
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
   11f44:	f008 fb92 	bl	1a66c <printk>
		return NULL;
   11f48:	2400      	movs	r4, #0
   11f4a:	e008      	b.n	11f5e <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   11f4c:	2104      	movs	r1, #4
   11f4e:	f00a f940 	bl	1c1d2 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   11f52:	4604      	mov	r4, r0
   11f54:	b928      	cbnz	r0, 11f62 <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   11f56:	2145      	movs	r1, #69	; 0x45
   11f58:	4809      	ldr	r0, [pc, #36]	; (11f80 <att_get+0x48>)
   11f5a:	f008 fb87 	bl	1a66c <printk>
	}

	return att_chan->att;
}
   11f5e:	4620      	mov	r0, r4
   11f60:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11f62:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
   11f66:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   11f6a:	075b      	lsls	r3, r3, #29
   11f6c:	d502      	bpl.n	11f74 <att_get+0x3c>
		BT_WARN("ATT channel flagged as disconnected");
   11f6e:	2157      	movs	r1, #87	; 0x57
   11f70:	4804      	ldr	r0, [pc, #16]	; (11f84 <att_get+0x4c>)
   11f72:	e7e7      	b.n	11f44 <att_get+0xc>
	return att_chan->att;
   11f74:	f850 4c08 	ldr.w	r4, [r0, #-8]
   11f78:	e7f1      	b.n	11f5e <att_get+0x26>
   11f7a:	bf00      	nop
   11f7c:	00021c45 	.word	0x00021c45
   11f80:	00021c58 	.word	0x00021c58
   11f84:	00021c78 	.word	0x00021c78

00011f88 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   11f88:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   11f8a:	3808      	subs	r0, #8
   11f8c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   11f8e:	a901      	add	r1, sp, #4
   11f90:	4802      	ldr	r0, [pc, #8]	; (11f9c <bt_att_released+0x14>)
   11f92:	f005 fe91 	bl	17cb8 <k_mem_slab_free>
}
   11f96:	b003      	add	sp, #12
   11f98:	f85d fb04 	ldr.w	pc, [sp], #4
   11f9c:	20008618 	.word	0x20008618

00011fa0 <find_type_cb>:
{
   11fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11fa4:	f642 0301 	movw	r3, #10241	; 0x2801
   11fa8:	2500      	movs	r5, #0
{
   11faa:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   11fac:	f8d2 9000 	ldr.w	r9, [r2]
{
   11fb0:	4607      	mov	r7, r0
   11fb2:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11fb4:	6800      	ldr	r0, [r0, #0]
   11fb6:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   11fb8:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   11fbc:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11fbe:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   11fc2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   11fc6:	f009 fe0a 	bl	1bbde <bt_uuid_cmp>
   11fca:	2800      	cmp	r0, #0
   11fcc:	d060      	beq.n	12090 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   11fce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11fd2:	6838      	ldr	r0, [r7, #0]
   11fd4:	a90b      	add	r1, sp, #44	; 0x2c
   11fd6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   11fda:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   11fde:	f009 fdfe 	bl	1bbde <bt_uuid_cmp>
   11fe2:	b138      	cbz	r0, 11ff4 <find_type_cb+0x54>
		if (data->group &&
   11fe4:	68a3      	ldr	r3, [r4, #8]
   11fe6:	b11b      	cbz	r3, 11ff0 <find_type_cb+0x50>
   11fe8:	885a      	ldrh	r2, [r3, #2]
   11fea:	42b2      	cmp	r2, r6
   11fec:	d200      	bcs.n	11ff0 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   11fee:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   11ff0:	2001      	movs	r0, #1
   11ff2:	e009      	b.n	12008 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   11ff4:	6861      	ldr	r1, [r4, #4]
   11ff6:	4608      	mov	r0, r1
   11ff8:	f00a f906 	bl	1c208 <net_buf_frags_len>
   11ffc:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   12000:	1a1b      	subs	r3, r3, r0
   12002:	2b03      	cmp	r3, #3
   12004:	d803      	bhi.n	1200e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   12006:	2000      	movs	r0, #0
}
   12008:	b011      	add	sp, #68	; 0x44
   1200a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1200e:	4608      	mov	r0, r1
   12010:	f003 fb12 	bl	15638 <net_buf_frag_last>
   12014:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   12016:	6860      	ldr	r0, [r4, #4]
   12018:	f00a f8f6 	bl	1c208 <net_buf_frags_len>
   1201c:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   12020:	f105 0b08 	add.w	fp, r5, #8
   12024:	ebaa 0a00 	sub.w	sl, sl, r0
   12028:	4658      	mov	r0, fp
   1202a:	f00b f899 	bl	1d160 <net_buf_simple_tailroom>
   1202e:	4582      	cmp	sl, r0
   12030:	d231      	bcs.n	12096 <find_type_cb+0xf6>
   12032:	6860      	ldr	r0, [r4, #4]
   12034:	f00a f8e8 	bl	1c208 <net_buf_frags_len>
   12038:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1203c:	1a18      	subs	r0, r3, r0
	if (!len) {
   1203e:	b970      	cbnz	r0, 1205e <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   12040:	6863      	ldr	r3, [r4, #4]
   12042:	7998      	ldrb	r0, [r3, #6]
   12044:	f003 f91c 	bl	15280 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   12048:	2200      	movs	r2, #0
   1204a:	2300      	movs	r3, #0
   1204c:	f00b f862 	bl	1d114 <net_buf_alloc_fixed>
		if (!frag) {
   12050:	4605      	mov	r5, r0
   12052:	2800      	cmp	r0, #0
   12054:	d0d7      	beq.n	12006 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   12056:	4601      	mov	r1, r0
   12058:	6860      	ldr	r0, [r4, #4]
   1205a:	f003 fb2d 	bl	156b8 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1205e:	2300      	movs	r3, #0
   12060:	9300      	str	r3, [sp, #0]
   12062:	4639      	mov	r1, r7
   12064:	f8d7 9004 	ldr.w	r9, [r7, #4]
   12068:	2310      	movs	r3, #16
   1206a:	4640      	mov	r0, r8
   1206c:	aa02      	add	r2, sp, #8
   1206e:	47c8      	blx	r9
	if (read < 0) {
   12070:	1e07      	subs	r7, r0, #0
   12072:	db0d      	blt.n	12090 <find_type_cb+0xf0>
	if (read != data->value_len) {
   12074:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   12076:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   12078:	42ba      	cmp	r2, r7
   1207a:	d02b      	beq.n	120d4 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1207c:	4601      	mov	r1, r0
   1207e:	a80b      	add	r0, sp, #44	; 0x2c
   12080:	f009 fddb 	bl	1bc3a <bt_uuid_create>
   12084:	b958      	cbnz	r0, 1209e <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   12086:	2157      	movs	r1, #87	; 0x57
   12088:	7c22      	ldrb	r2, [r4, #16]
   1208a:	4814      	ldr	r0, [pc, #80]	; (120dc <find_type_cb+0x13c>)
			BT_WARN("Unable to create UUID: size %d", read);
   1208c:	f008 faee 	bl	1a66c <printk>
	data->group = NULL;
   12090:	2300      	movs	r3, #0
   12092:	60a3      	str	r3, [r4, #8]
   12094:	e7ac      	b.n	11ff0 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   12096:	4658      	mov	r0, fp
   12098:	f00b f862 	bl	1d160 <net_buf_simple_tailroom>
   1209c:	e7cf      	b.n	1203e <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1209e:	b2fa      	uxtb	r2, r7
   120a0:	a902      	add	r1, sp, #8
   120a2:	a806      	add	r0, sp, #24
   120a4:	f009 fdc9 	bl	1bc3a <bt_uuid_create>
   120a8:	b918      	cbnz	r0, 120b2 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   120aa:	463a      	mov	r2, r7
   120ac:	2157      	movs	r1, #87	; 0x57
   120ae:	480c      	ldr	r0, [pc, #48]	; (120e0 <find_type_cb+0x140>)
   120b0:	e7ec      	b.n	1208c <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   120b2:	a906      	add	r1, sp, #24
   120b4:	a80b      	add	r0, sp, #44	; 0x2c
   120b6:	f009 fd92 	bl	1bbde <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   120ba:	2800      	cmp	r0, #0
   120bc:	d1e8      	bne.n	12090 <find_type_cb+0xf0>
	data->err = 0x00;
   120be:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   120c0:	2104      	movs	r1, #4
   120c2:	7463      	strb	r3, [r4, #17]
   120c4:	f105 0008 	add.w	r0, r5, #8
   120c8:	f003 fb70 	bl	157ac <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   120cc:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   120ce:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   120d0:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   120d2:	e78d      	b.n	11ff0 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   120d4:	a902      	add	r1, sp, #8
   120d6:	f009 fcfc 	bl	1bad2 <memcmp>
   120da:	e7ee      	b.n	120ba <find_type_cb+0x11a>
   120dc:	00021ca1 	.word	0x00021ca1
   120e0:	00021cc5 	.word	0x00021cc5

000120e4 <chan_req_sent>:
	if (chan->req) {
   120e4:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   120e8:	b13b      	cbz	r3, 120fa <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   120ea:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
   120ee:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   120f2:	2300      	movs	r3, #0
   120f4:	4801      	ldr	r0, [pc, #4]	; (120fc <chan_req_sent+0x18>)
   120f6:	f007 bb43 	b.w	19780 <k_delayed_work_submit_to_queue>
}
   120fa:	4770      	bx	lr
   120fc:	2000a560 	.word	0x2000a560

00012100 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   12100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   12102:	2300      	movs	r3, #0
{
   12104:	4606      	mov	r6, r0
   12106:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   12108:	2200      	movs	r2, #0
   1210a:	4669      	mov	r1, sp
   1210c:	4823      	ldr	r0, [pc, #140]	; (1219c <bt_att_accept+0x9c>)
   1210e:	f005 fd79 	bl	17c04 <k_mem_slab_alloc>
   12112:	4604      	mov	r4, r0
   12114:	b148      	cbz	r0, 1212a <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   12116:	4632      	mov	r2, r6
   12118:	2145      	movs	r1, #69	; 0x45
   1211a:	4821      	ldr	r0, [pc, #132]	; (121a0 <bt_att_accept+0xa0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1211c:	f008 faa6 	bl	1a66c <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   12120:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   12124:	4620      	mov	r0, r4
   12126:	b003      	add	sp, #12
   12128:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   1212a:	4601      	mov	r1, r0
   1212c:	2230      	movs	r2, #48	; 0x30
   1212e:	9800      	ldr	r0, [sp, #0]
   12130:	f009 fd0b 	bl	1bb4a <memset>
	att->conn = conn;
   12134:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   12136:	2200      	movs	r2, #0
	list->head = NULL;
   12138:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   1213c:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   12140:	60ac      	str	r4, [r5, #8]
   12142:	2300      	movs	r3, #0
   12144:	4817      	ldr	r0, [pc, #92]	; (121a4 <bt_att_accept+0xa4>)
   12146:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   12148:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1214a:	f005 fd5b 	bl	17c04 <k_mem_slab_alloc>
   1214e:	4604      	mov	r4, r0
   12150:	b118      	cbz	r0, 1215a <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   12152:	2145      	movs	r1, #69	; 0x45
   12154:	682a      	ldr	r2, [r5, #0]
   12156:	4814      	ldr	r0, [pc, #80]	; (121a8 <bt_att_accept+0xa8>)
   12158:	e7e0      	b.n	1211c <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   1215a:	4601      	mov	r1, r0
   1215c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   12160:	9801      	ldr	r0, [sp, #4]
   12162:	f009 fcf2 	bl	1bb4a <memset>
	chan->chan.chan.ops = &ops;
   12166:	9801      	ldr	r0, [sp, #4]
   12168:	4b10      	ldr	r3, [pc, #64]	; (121ac <bt_att_accept+0xac>)
   1216a:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   1216c:	30d0      	adds	r0, #208	; 0xd0
   1216e:	f00b fe2d 	bl	1ddcc <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   12172:	9801      	ldr	r0, [sp, #4]
   12174:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
   12178:	2203      	movs	r2, #3
   1217a:	4611      	mov	r1, r2
   1217c:	f00b fe8b 	bl	1de96 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12180:	9b01      	ldr	r3, [sp, #4]
   12182:	33c8      	adds	r3, #200	; 0xc8
   12184:	e8d3 2fef 	ldaex	r2, [r3]
   12188:	e8c3 4fe1 	stlex	r1, r4, [r3]
   1218c:	2900      	cmp	r1, #0
   1218e:	d1f9      	bne.n	12184 <bt_att_accept+0x84>
	chan->att = att;
   12190:	9b01      	ldr	r3, [sp, #4]
   12192:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   12196:	603b      	str	r3, [r7, #0]
	return 0;
   12198:	e7c4      	b.n	12124 <bt_att_accept+0x24>
   1219a:	bf00      	nop
   1219c:	200085fc 	.word	0x200085fc
   121a0:	00021ce9 	.word	0x00021ce9
   121a4:	20008618 	.word	0x20008618
   121a8:	00021d13 	.word	0x00021d13
   121ac:	20008444 	.word	0x20008444

000121b0 <read_group_cb>:
{
   121b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   121b4:	f04f 0800 	mov.w	r8, #0
   121b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   121bc:	4605      	mov	r5, r0
   121be:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   121c0:	6800      	ldr	r0, [r0, #0]
   121c2:	a902      	add	r1, sp, #8
{
   121c4:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   121c6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   121c8:	f88d 8008 	strb.w	r8, [sp, #8]
   121cc:	f8ad 300a 	strh.w	r3, [sp, #10]
   121d0:	f009 fd05 	bl	1bbde <bt_uuid_cmp>
   121d4:	b1a0      	cbz	r0, 12200 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   121d6:	f642 0301 	movw	r3, #10241	; 0x2801
   121da:	6828      	ldr	r0, [r5, #0]
   121dc:	a903      	add	r1, sp, #12
   121de:	f88d 800c 	strb.w	r8, [sp, #12]
   121e2:	f8ad 300e 	strh.w	r3, [sp, #14]
   121e6:	f009 fcfa 	bl	1bbde <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   121ea:	b148      	cbz	r0, 12200 <read_group_cb+0x50>
		if (data->group &&
   121ec:	6923      	ldr	r3, [r4, #16]
   121ee:	b11b      	cbz	r3, 121f8 <read_group_cb+0x48>
   121f0:	885a      	ldrh	r2, [r3, #2]
   121f2:	42b2      	cmp	r2, r6
   121f4:	d200      	bcs.n	121f8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   121f6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   121f8:	2001      	movs	r0, #1
}
   121fa:	b004      	add	sp, #16
   121fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   12200:	6861      	ldr	r1, [r4, #4]
   12202:	6828      	ldr	r0, [r5, #0]
   12204:	f009 fceb 	bl	1bbde <bt_uuid_cmp>
   12208:	b110      	cbz	r0, 12210 <read_group_cb+0x60>
		data->group = NULL;
   1220a:	2300      	movs	r3, #0
   1220c:	6123      	str	r3, [r4, #16]
   1220e:	e7f3      	b.n	121f8 <read_group_cb+0x48>
	if (data->rsp->len &&
   12210:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   12212:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   12214:	781a      	ldrb	r2, [r3, #0]
   12216:	b13a      	cbz	r2, 12228 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   12218:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   1221c:	8981      	ldrh	r1, [r0, #12]
   1221e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   12220:	4293      	cmp	r3, r2
   12222:	da01      	bge.n	12228 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   12224:	2000      	movs	r0, #0
   12226:	e7e8      	b.n	121fa <read_group_cb+0x4a>
   12228:	2104      	movs	r1, #4
   1222a:	3008      	adds	r0, #8
   1222c:	f003 fabe 	bl	157ac <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   12230:	4b09      	ldr	r3, [pc, #36]	; (12258 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   12232:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   12234:	4629      	mov	r1, r5
	data->group->start_handle = sys_cpu_to_le16(handle);
   12236:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   12238:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1223a:	68a2      	ldr	r2, [r4, #8]
   1223c:	9300      	str	r3, [sp, #0]
   1223e:	4638      	mov	r0, r7
   12240:	2300      	movs	r3, #0
   12242:	9401      	str	r4, [sp, #4]
   12244:	f00a f8db 	bl	1c3fe <att_chan_read>
	if (read < 0) {
   12248:	2800      	cmp	r0, #0
   1224a:	dbeb      	blt.n	12224 <read_group_cb+0x74>
	if (!data->group) {
   1224c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1224e:	3800      	subs	r0, #0
   12250:	bf18      	it	ne
   12252:	2001      	movne	r0, #1
   12254:	e7d1      	b.n	121fa <read_group_cb+0x4a>
   12256:	bf00      	nop
   12258:	0001c383 	.word	0x0001c383

0001225c <chan_send>:
{
   1225c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12260:	688b      	ldr	r3, [r1, #8]
{
   12262:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12264:	781b      	ldrb	r3, [r3, #0]
{
   12266:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   12268:	2bd2      	cmp	r3, #210	; 0xd2
{
   1226a:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1226c:	d110      	bne.n	12290 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
   1226e:	6803      	ldr	r3, [r0, #0]
   12270:	6818      	ldr	r0, [r3, #0]
   12272:	f00a ff49 	bl	1d108 <bt_smp_sign>
		if (err) {
   12276:	4606      	mov	r6, r0
   12278:	b150      	cbz	r0, 12290 <chan_send+0x34>
			BT_ERR("Error signing data");
   1227a:	2145      	movs	r1, #69	; 0x45
   1227c:	4824      	ldr	r0, [pc, #144]	; (12310 <chan_send+0xb4>)
   1227e:	f008 f9f5 	bl	1a66c <printk>
		net_buf_unref(buf);
   12282:	4620      	mov	r0, r4
   12284:	f003 f97c 	bl	15580 <net_buf_unref>
}
   12288:	4630      	mov	r0, r6
   1228a:	b003      	add	sp, #12
   1228c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   12290:	f104 0008 	add.w	r0, r4, #8
   12294:	f00a ff60 	bl	1d158 <net_buf_simple_headroom>
	state->len = buf->len;
   12298:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1229c:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   1229e:	f1b9 0f00 	cmp.w	r9, #0
   122a2:	d10a      	bne.n	122ba <chan_send+0x5e>
	switch (att_op_get_type(buf->data[0])) {
   122a4:	68a3      	ldr	r3, [r4, #8]
   122a6:	7818      	ldrb	r0, [r3, #0]
   122a8:	f009 ffce 	bl	1c248 <att_op_get_type>
   122ac:	1e43      	subs	r3, r0, #1
   122ae:	b2db      	uxtb	r3, r3
   122b0:	2b04      	cmp	r3, #4
   122b2:	bf9c      	itt	ls
   122b4:	4a17      	ldrls	r2, [pc, #92]	; (12314 <chan_send+0xb8>)
   122b6:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   122ba:	682b      	ldr	r3, [r5, #0]
   122bc:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
   122be:	f8c5 9138 	str.w	r9, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   122c2:	681e      	ldr	r6, [r3, #0]
   122c4:	f003 f9a0 	bl	15608 <net_buf_ref>
   122c8:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
   122cc:	4b12      	ldr	r3, [pc, #72]	; (12318 <chan_send+0xbc>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   122ce:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   122d0:	4299      	cmp	r1, r3
   122d2:	d019      	beq.n	12308 <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
   122d4:	4b11      	ldr	r3, [pc, #68]	; (1231c <chan_send+0xc0>)
   122d6:	4299      	cmp	r1, r3
   122d8:	d018      	beq.n	1230c <chan_send+0xb0>
		return att_sent;
   122da:	f8df c044 	ldr.w	ip, [pc, #68]	; 12320 <chan_send+0xc4>
   122de:	4b11      	ldr	r3, [pc, #68]	; (12324 <chan_send+0xc8>)
   122e0:	4811      	ldr	r0, [pc, #68]	; (12328 <chan_send+0xcc>)
   122e2:	4561      	cmp	r1, ip
   122e4:	bf18      	it	ne
   122e6:	4603      	movne	r3, r0
				&chan->chan.chan);
   122e8:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   122ea:	4630      	mov	r0, r6
   122ec:	2104      	movs	r1, #4
   122ee:	9500      	str	r5, [sp, #0]
   122f0:	f009 ff2f 	bl	1c152 <bt_l2cap_send_cb>
	if (!err) {
   122f4:	4606      	mov	r6, r0
   122f6:	2800      	cmp	r0, #0
   122f8:	d0c3      	beq.n	12282 <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
   122fa:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   122fc:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   12300:	fa10 f787 	uxtah	r7, r0, r7
   12304:	60a7      	str	r7, [r4, #8]
}
   12306:	e7bf      	b.n	12288 <chan_send+0x2c>
		return att_rsp_sent;
   12308:	4b08      	ldr	r3, [pc, #32]	; (1232c <chan_send+0xd0>)
   1230a:	e7ed      	b.n	122e8 <chan_send+0x8c>
		return att_cfm_sent;
   1230c:	4b08      	ldr	r3, [pc, #32]	; (12330 <chan_send+0xd4>)
   1230e:	e7eb      	b.n	122e8 <chan_send+0x8c>
   12310:	00021d3d 	.word	0x00021d3d
   12314:	0001eaec 	.word	0x0001eaec
   12318:	0001c613 	.word	0x0001c613
   1231c:	0001c627 	.word	0x0001c627
   12320:	000120e5 	.word	0x000120e5
   12324:	00011f29 	.word	0x00011f29
   12328:	0001c219 	.word	0x0001c219
   1232c:	00011f19 	.word	0x00011f19
   12330:	00011f09 	.word	0x00011f09

00012334 <bt_att_chan_req_send>:
{
   12334:	b570      	push	{r4, r5, r6, lr}
   12336:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   12338:	4604      	mov	r4, r0
   1233a:	b950      	cbnz	r0, 12352 <bt_att_chan_req_send+0x1e>
   1233c:	4924      	ldr	r1, [pc, #144]	; (123d0 <bt_att_chan_req_send+0x9c>)
   1233e:	4825      	ldr	r0, [pc, #148]	; (123d4 <bt_att_chan_req_send+0xa0>)
   12340:	f240 224f 	movw	r2, #591	; 0x24f
   12344:	f008 f992 	bl	1a66c <printk>
   12348:	f240 214f 	movw	r1, #591	; 0x24f
   1234c:	4820      	ldr	r0, [pc, #128]	; (123d0 <bt_att_chan_req_send+0x9c>)
   1234e:	f008 fc33 	bl	1abb8 <assert_post_action>
	__ASSERT_NO_MSG(req);
   12352:	b955      	cbnz	r5, 1236a <bt_att_chan_req_send+0x36>
   12354:	491e      	ldr	r1, [pc, #120]	; (123d0 <bt_att_chan_req_send+0x9c>)
   12356:	481f      	ldr	r0, [pc, #124]	; (123d4 <bt_att_chan_req_send+0xa0>)
   12358:	f44f 7214 	mov.w	r2, #592	; 0x250
   1235c:	f008 f986 	bl	1a66c <printk>
   12360:	f44f 7114 	mov.w	r1, #592	; 0x250
   12364:	481a      	ldr	r0, [pc, #104]	; (123d0 <bt_att_chan_req_send+0x9c>)
   12366:	f008 fc27 	bl	1abb8 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   1236a:	686b      	ldr	r3, [r5, #4]
   1236c:	b953      	cbnz	r3, 12384 <bt_att_chan_req_send+0x50>
   1236e:	4918      	ldr	r1, [pc, #96]	; (123d0 <bt_att_chan_req_send+0x9c>)
   12370:	4818      	ldr	r0, [pc, #96]	; (123d4 <bt_att_chan_req_send+0xa0>)
   12372:	f240 2251 	movw	r2, #593	; 0x251
   12376:	f008 f979 	bl	1a66c <printk>
   1237a:	f240 2151 	movw	r1, #593	; 0x251
   1237e:	4814      	ldr	r0, [pc, #80]	; (123d0 <bt_att_chan_req_send+0x9c>)
   12380:	f008 fc1a 	bl	1abb8 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   12384:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   12388:	b153      	cbz	r3, 123a0 <bt_att_chan_req_send+0x6c>
   1238a:	4911      	ldr	r1, [pc, #68]	; (123d0 <bt_att_chan_req_send+0x9c>)
   1238c:	4811      	ldr	r0, [pc, #68]	; (123d4 <bt_att_chan_req_send+0xa0>)
   1238e:	f240 2252 	movw	r2, #594	; 0x252
   12392:	f008 f96b 	bl	1a66c <printk>
   12396:	f240 2152 	movw	r1, #594	; 0x252
   1239a:	480d      	ldr	r0, [pc, #52]	; (123d0 <bt_att_chan_req_send+0x9c>)
   1239c:	f008 fc0c 	bl	1abb8 <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   123a0:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
   123a4:	2200      	movs	r2, #0
   123a6:	2300      	movs	r3, #0
   123a8:	4630      	mov	r0, r6
   123aa:	f006 ffc3 	bl	19334 <z_impl_k_sem_take>
   123ae:	2800      	cmp	r0, #0
   123b0:	db0a      	blt.n	123c8 <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
   123b2:	4620      	mov	r0, r4
   123b4:	4629      	mov	r1, r5
   123b6:	f00a f906 	bl	1c5c6 <chan_req_send>
	if (err < 0) {
   123ba:	1e04      	subs	r4, r0, #0
   123bc:	da02      	bge.n	123c4 <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
   123be:	4630      	mov	r0, r6
   123c0:	f006 ff7c 	bl	192bc <z_impl_k_sem_give>
}
   123c4:	4620      	mov	r0, r4
   123c6:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   123c8:	f06f 040a 	mvn.w	r4, #10
   123cc:	e7fa      	b.n	123c4 <bt_att_chan_req_send+0x90>
   123ce:	bf00      	nop
   123d0:	00021d55 	.word	0x00021d55
   123d4:	0001fbb7 	.word	0x0001fbb7

000123d8 <read_type_cb>:
{
   123d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   123dc:	f8d2 8000 	ldr.w	r8, [r2]
{
   123e0:	4606      	mov	r6, r0
   123e2:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   123e4:	6800      	ldr	r0, [r0, #0]
   123e6:	6851      	ldr	r1, [r2, #4]
{
   123e8:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   123ea:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   123ee:	f009 fbf6 	bl	1bbde <bt_uuid_cmp>
   123f2:	4607      	mov	r7, r0
   123f4:	2800      	cmp	r0, #0
   123f6:	d13e      	bne.n	12476 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   123f8:	4628      	mov	r0, r5
   123fa:	2215      	movs	r2, #21
   123fc:	4631      	mov	r1, r6
   123fe:	f00a fd7c 	bl	1cefa <bt_gatt_check_perm>
   12402:	4605      	mov	r5, r0
   12404:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   12406:	b148      	cbz	r0, 1241c <read_type_cb+0x44>
		if (data->rsp->len) {
   12408:	68e3      	ldr	r3, [r4, #12]
   1240a:	781b      	ldrb	r3, [r3, #0]
   1240c:	b923      	cbnz	r3, 12418 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1240e:	2500      	movs	r5, #0
}
   12410:	4628      	mov	r0, r5
   12412:	b003      	add	sp, #12
   12414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   12418:	7527      	strb	r7, [r4, #20]
   1241a:	e7f8      	b.n	1240e <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1241c:	68a0      	ldr	r0, [r4, #8]
   1241e:	f003 f90b 	bl	15638 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   12422:	2102      	movs	r1, #2
   12424:	3008      	adds	r0, #8
   12426:	f003 f9c1 	bl	157ac <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1242a:	4b14      	ldr	r3, [pc, #80]	; (1247c <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1242c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1242e:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   12430:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   12434:	68a2      	ldr	r2, [r4, #8]
   12436:	9300      	str	r3, [sp, #0]
   12438:	4640      	mov	r0, r8
   1243a:	462b      	mov	r3, r5
   1243c:	9401      	str	r4, [sp, #4]
   1243e:	f009 ffde 	bl	1c3fe <att_chan_read>
	if (read < 0) {
   12442:	2800      	cmp	r0, #0
   12444:	da07      	bge.n	12456 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   12446:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1244a:	bf32      	itee	cc
   1244c:	200e      	movcc	r0, #14
		return -err;
   1244e:	4240      	negcs	r0, r0
   12450:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   12452:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   12454:	e7dc      	b.n	12410 <read_type_cb+0x38>
	if (!data->item) {
   12456:	6923      	ldr	r3, [r4, #16]
   12458:	2b00      	cmp	r3, #0
   1245a:	d0d8      	beq.n	1240e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1245c:	68a0      	ldr	r0, [r4, #8]
   1245e:	f009 fed3 	bl	1c208 <net_buf_frags_len>
   12462:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12466:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   12468:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1246a:	7818      	ldrb	r0, [r3, #0]
   1246c:	4285      	cmp	r5, r0
   1246e:	bf94      	ite	ls
   12470:	2500      	movls	r5, #0
   12472:	2501      	movhi	r5, #1
   12474:	e7cc      	b.n	12410 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   12476:	2501      	movs	r5, #1
   12478:	e7ca      	b.n	12410 <read_type_cb+0x38>
   1247a:	bf00      	nop
   1247c:	0001c225 	.word	0x0001c225

00012480 <bt_att_connected>:
{
   12480:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   12482:	2104      	movs	r1, #4
{
   12484:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   12486:	6800      	ldr	r0, [r0, #0]
   12488:	f009 fe93 	bl	1c1b2 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   1248c:	4605      	mov	r5, r0
   1248e:	b950      	cbnz	r0, 124a6 <bt_att_connected+0x26>
   12490:	4919      	ldr	r1, [pc, #100]	; (124f8 <bt_att_connected+0x78>)
   12492:	481a      	ldr	r0, [pc, #104]	; (124fc <bt_att_connected+0x7c>)
   12494:	f44f 6226 	mov.w	r2, #2656	; 0xa60
   12498:	f008 f8e8 	bl	1a66c <printk>
   1249c:	f44f 6126 	mov.w	r1, #2656	; 0xa60
   124a0:	4815      	ldr	r0, [pc, #84]	; (124f8 <bt_att_connected+0x78>)
   124a2:	f008 fb89 	bl	1abb8 <assert_post_action>
	struct bt_att *att = att_chan->att;
   124a6:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   124aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   124ac:	b91b      	cbnz	r3, 124b6 <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
   124ae:	f105 000c 	add.w	r0, r5, #12
   124b2:	f00b fc8b 	bl	1ddcc <z_impl_k_queue_init>
	parent->next = child;
   124b6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   124b8:	f504 739a 	add.w	r3, r4, #308	; 0x134
   124bc:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
   124c0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   124c2:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   124c4:	b902      	cbnz	r2, 124c8 <bt_att_connected+0x48>
	list->tail = node;
   124c6:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   124c8:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   124cc:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   124d0:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   124d2:	bf58      	it	pl
   124d4:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   124d6:	f04f 0230 	mov.w	r2, #48	; 0x30
   124da:	bf5c      	itt	pl
   124dc:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   124e0:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
   124e4:	2100      	movs	r1, #0
   124e6:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   124ea:	f009 fb2e 	bl	1bb4a <memset>
   124ee:	4b04      	ldr	r3, [pc, #16]	; (12500 <bt_att_connected+0x80>)
   124f0:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   124f4:	bd38      	pop	{r3, r4, r5, pc}
   124f6:	bf00      	nop
   124f8:	00021d55 	.word	0x00021d55
   124fc:	0001fbb7 	.word	0x0001fbb7
   12500:	00012e0d 	.word	0x00012e0d

00012504 <bt_att_chan_create_pdu>:
{
   12504:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   12506:	1c53      	adds	r3, r2, #1
   12508:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
{
   1250c:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1250e:	4293      	cmp	r3, r2
   12510:	d906      	bls.n	12520 <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   12512:	2157      	movs	r1, #87	; 0x57
   12514:	4813      	ldr	r0, [pc, #76]	; (12564 <bt_att_chan_create_pdu+0x60>)
   12516:	f008 f8a9 	bl	1a66c <printk>
		return NULL;
   1251a:	2400      	movs	r4, #0
}
   1251c:	4620      	mov	r0, r4
   1251e:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   12520:	4608      	mov	r0, r1
   12522:	f009 fe91 	bl	1c248 <att_op_get_type>
   12526:	2802      	cmp	r0, #2
   12528:	d001      	beq.n	1252e <bt_att_chan_create_pdu+0x2a>
   1252a:	2804      	cmp	r0, #4
   1252c:	d10e      	bne.n	1254c <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1252e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   12532:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   12534:	2100      	movs	r1, #0
   12536:	4608      	mov	r0, r1
   12538:	f009 fe08 	bl	1c14c <bt_l2cap_create_pdu_timeout>
   1253c:	4604      	mov	r4, r0
	if (!buf) {
   1253e:	b950      	cbnz	r0, 12556 <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   12540:	462a      	mov	r2, r5
   12542:	2145      	movs	r1, #69	; 0x45
   12544:	4808      	ldr	r0, [pc, #32]	; (12568 <bt_att_chan_create_pdu+0x64>)
   12546:	f008 f891 	bl	1a66c <printk>
		return NULL;
   1254a:	e7e7      	b.n	1251c <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
   1254c:	f04f 32ff 	mov.w	r2, #4294967295
   12550:	f04f 33ff 	mov.w	r3, #4294967295
   12554:	e7ee      	b.n	12534 <bt_att_chan_create_pdu+0x30>
   12556:	2101      	movs	r1, #1
   12558:	3008      	adds	r0, #8
   1255a:	f003 f927 	bl	157ac <net_buf_simple_add>
	hdr->code = op;
   1255e:	7005      	strb	r5, [r0, #0]
	return buf;
   12560:	e7dc      	b.n	1251c <bt_att_chan_create_pdu+0x18>
   12562:	bf00      	nop
   12564:	00021d84 	.word	0x00021d84
   12568:	00021a9b 	.word	0x00021a9b

0001256c <att_indicate>:
{
   1256c:	b570      	push	{r4, r5, r6, lr}
   1256e:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   12570:	f101 0008 	add.w	r0, r1, #8
   12574:	460d      	mov	r5, r1
   12576:	f00a fde7 	bl	1d148 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1257a:	6826      	ldr	r6, [r4, #0]
   1257c:	4601      	mov	r1, r0
   1257e:	89ab      	ldrh	r3, [r5, #12]
   12580:	68aa      	ldr	r2, [r5, #8]
   12582:	6830      	ldr	r0, [r6, #0]
   12584:	f00a fd48 	bl	1d018 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   12588:	211e      	movs	r1, #30
   1258a:	2200      	movs	r2, #0
   1258c:	4620      	mov	r0, r4
   1258e:	f7ff ffb9 	bl	12504 <bt_att_chan_create_pdu>
	if (!buf) {
   12592:	4601      	mov	r1, r0
   12594:	b118      	cbz	r0, 1259e <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   12596:	4620      	mov	r0, r4
   12598:	4a02      	ldr	r2, [pc, #8]	; (125a4 <att_indicate+0x38>)
   1259a:	f009 ffd2 	bl	1c542 <bt_att_chan_send_rsp>
}
   1259e:	2000      	movs	r0, #0
   125a0:	bd70      	pop	{r4, r5, r6, pc}
   125a2:	bf00      	nop
   125a4:	0001c627 	.word	0x0001c627

000125a8 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   125a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   125ac:	4688      	mov	r8, r1
   125ae:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   125b0:	2101      	movs	r1, #1
   125b2:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   125b4:	4605      	mov	r5, r0
   125b6:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   125b8:	f7ff ffa4 	bl	12504 <bt_att_chan_create_pdu>
	if (!buf) {
   125bc:	4604      	mov	r4, r0
   125be:	b178      	cbz	r0, 125e0 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   125c0:	2104      	movs	r1, #4
   125c2:	3008      	adds	r0, #8
   125c4:	f003 f8f2 	bl	157ac <net_buf_simple_add>
	rsp->request = req;
   125c8:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   125cc:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   125ce:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   125d2:	4621      	mov	r1, r4
   125d4:	4628      	mov	r0, r5
}
   125d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   125da:	4a02      	ldr	r2, [pc, #8]	; (125e4 <send_err_rsp.part.0+0x3c>)
   125dc:	f009 bfb1 	b.w	1c542 <bt_att_chan_send_rsp>
}
   125e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   125e4:	0001c613 	.word	0x0001c613

000125e8 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   125e8:	898b      	ldrh	r3, [r1, #12]
{
   125ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   125ee:	4604      	mov	r4, r0
   125f0:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   125f2:	b933      	cbnz	r3, 12602 <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   125f4:	2145      	movs	r1, #69	; 0x45
   125f6:	4838      	ldr	r0, [pc, #224]	; (126d8 <bt_att_recv+0xf0>)
			BT_WARN("Ignoring unexpected indication");
   125f8:	f008 f838 	bl	1a66c <printk>
}
   125fc:	2000      	movs	r0, #0
   125fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   12602:	2101      	movs	r1, #1
   12604:	f108 0008 	add.w	r0, r8, #8
   12608:	f003 f8b2 	bl	15770 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1260c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   12610:	4605      	mov	r5, r0
   12612:	2b00      	cmp	r3, #0
   12614:	d0f2      	beq.n	125fc <bt_att_recv+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   12616:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   12618:	7802      	ldrb	r2, [r0, #0]
   1261a:	4930      	ldr	r1, [pc, #192]	; (126dc <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1261c:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   12620:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
   12624:	4290      	cmp	r0, r2
   12626:	d114      	bne.n	12652 <bt_att_recv+0x6a>
		if (handler->type == ATT_REQUEST &&
   12628:	00d8      	lsls	r0, r3, #3
   1262a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1262e:	789f      	ldrb	r7, [r3, #2]
   12630:	2f01      	cmp	r7, #1
   12632:	d123      	bne.n	1267c <bt_att_recv+0x94>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12634:	34c0      	adds	r4, #192	; 0xc0
   12636:	e8d4 3fef 	ldaex	r3, [r4]
   1263a:	f043 0201 	orr.w	r2, r3, #1
   1263e:	e8c4 2fec 	stlex	ip, r2, [r4]
   12642:	f1bc 0f00 	cmp.w	ip, #0
   12646:	d1f6      	bne.n	12636 <bt_att_recv+0x4e>
   12648:	07da      	lsls	r2, r3, #31
   1264a:	d528      	bpl.n	1269e <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected request");
   1264c:	2157      	movs	r1, #87	; 0x57
   1264e:	4824      	ldr	r0, [pc, #144]	; (126e0 <bt_att_recv+0xf8>)
   12650:	e7d2      	b.n	125f8 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   12652:	3301      	adds	r3, #1
   12654:	2b1c      	cmp	r3, #28
   12656:	d1e3      	bne.n	12620 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   12658:	2157      	movs	r1, #87	; 0x57
   1265a:	4822      	ldr	r0, [pc, #136]	; (126e4 <bt_att_recv+0xfc>)
   1265c:	f008 f806 	bl	1a66c <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   12660:	7829      	ldrb	r1, [r5, #0]
   12662:	4608      	mov	r0, r1
   12664:	f009 fdf0 	bl	1c248 <att_op_get_type>
   12668:	2800      	cmp	r0, #0
   1266a:	d0c7      	beq.n	125fc <bt_att_recv+0x14>
	if (!req) {
   1266c:	2900      	cmp	r1, #0
   1266e:	d0c5      	beq.n	125fc <bt_att_recv+0x14>
   12670:	2306      	movs	r3, #6
   12672:	2200      	movs	r2, #0
   12674:	4630      	mov	r0, r6
   12676:	f7ff ff97 	bl	125a8 <send_err_rsp.part.0>
   1267a:	e7bf      	b.n	125fc <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   1267c:	2f05      	cmp	r7, #5
   1267e:	d10e      	bne.n	1269e <bt_att_recv+0xb6>
   12680:	34c0      	adds	r4, #192	; 0xc0
   12682:	e8d4 3fef 	ldaex	r3, [r4]
   12686:	f043 0202 	orr.w	r2, r3, #2
   1268a:	e8c4 2fec 	stlex	ip, r2, [r4]
   1268e:	f1bc 0f00 	cmp.w	ip, #0
   12692:	d1f6      	bne.n	12682 <bt_att_recv+0x9a>
   12694:	079b      	lsls	r3, r3, #30
   12696:	d502      	bpl.n	1269e <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected indication");
   12698:	2157      	movs	r1, #87	; 0x57
   1269a:	4813      	ldr	r0, [pc, #76]	; (126e8 <bt_att_recv+0x100>)
   1269c:	e7ac      	b.n	125f8 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   1269e:	180b      	adds	r3, r1, r0
   126a0:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   126a4:	7859      	ldrb	r1, [r3, #1]
   126a6:	4291      	cmp	r1, r2
   126a8:	d908      	bls.n	126bc <bt_att_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   126aa:	2145      	movs	r1, #69	; 0x45
   126ac:	782b      	ldrb	r3, [r5, #0]
   126ae:	480f      	ldr	r0, [pc, #60]	; (126ec <bt_att_recv+0x104>)
   126b0:	f007 ffdc 	bl	1a66c <printk>
	if (handler->type == ATT_REQUEST && err) {
   126b4:	2f01      	cmp	r7, #1
   126b6:	d1a1      	bne.n	125fc <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   126b8:	2304      	movs	r3, #4
   126ba:	e008      	b.n	126ce <bt_att_recv+0xe6>
		err = handler->func(att_chan, buf);
   126bc:	685b      	ldr	r3, [r3, #4]
   126be:	4641      	mov	r1, r8
   126c0:	4630      	mov	r0, r6
   126c2:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   126c4:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   126c6:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   126c8:	d198      	bne.n	125fc <bt_att_recv+0x14>
   126ca:	2800      	cmp	r0, #0
   126cc:	d096      	beq.n	125fc <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   126ce:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   126d0:	2900      	cmp	r1, #0
   126d2:	d093      	beq.n	125fc <bt_att_recv+0x14>
   126d4:	e7cd      	b.n	12672 <bt_att_recv+0x8a>
   126d6:	bf00      	nop
   126d8:	00021dae 	.word	0x00021dae
   126dc:	0001eb00 	.word	0x0001eb00
   126e0:	00021dce 	.word	0x00021dce
   126e4:	00021e37 	.word	0x00021e37
   126e8:	00021def 	.word	0x00021def
   126ec:	00021e13 	.word	0x00021e13

000126f0 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   126f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   126f4:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   126f6:	6803      	ldr	r3, [r0, #0]
   126f8:	460e      	mov	r6, r1
   126fa:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   126fc:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   126fe:	bf18      	it	ne
   12700:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12702:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12704:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   12706:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   12708:	f00a fcb1 	bl	1d06e <bt_gatt_change_aware>
   1270c:	2800      	cmp	r0, #0
   1270e:	d04b      	beq.n	127a8 <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   12710:	2f00      	cmp	r7, #0
   12712:	d04b      	beq.n	127ac <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   12714:	2218      	movs	r2, #24
   12716:	2100      	movs	r1, #0
   12718:	4668      	mov	r0, sp
   1271a:	f009 fa16 	bl	1bb4a <memset>
	if (rsp) {
   1271e:	f1b8 0f00 	cmp.w	r8, #0
   12722:	d122      	bne.n	1276a <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   12724:	682b      	ldr	r3, [r5, #0]
	data.offset = offset;
   12726:	f04f 0900 	mov.w	r9, #0
	data.conn = chan->att->conn;
   1272a:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1272c:	4639      	mov	r1, r7
	data.conn = chan->att->conn;
   1272e:	9300      	str	r3, [sp, #0]
	data.value = value;
   12730:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12732:	4638      	mov	r0, r7
	data.value = value;
   12734:	9303      	str	r3, [sp, #12]
	data.len = len;
   12736:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1273a:	4a1d      	ldr	r2, [pc, #116]	; (127b0 <att_write_rsp.constprop.0+0xc0>)
	data.len = len;
   1273c:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   12740:	2301      	movs	r3, #1
   12742:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12746:	466b      	mov	r3, sp
	data.req = req;
   12748:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   1274c:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   12750:	f009 fdc0 	bl	1c2d4 <bt_gatt_foreach_attr>
	if (data.err) {
   12754:	f89d 4014 	ldrb.w	r4, [sp, #20]
   12758:	b1f4      	cbz	r4, 12798 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   1275a:	f1b8 0f00 	cmp.w	r8, #0
   1275e:	d10e      	bne.n	1277e <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   12760:	2400      	movs	r4, #0
}
   12762:	4620      	mov	r0, r4
   12764:	b007      	add	sp, #28
   12766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1276a:	2200      	movs	r2, #0
   1276c:	4641      	mov	r1, r8
   1276e:	4628      	mov	r0, r5
   12770:	f7ff fec8 	bl	12504 <bt_att_chan_create_pdu>
   12774:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   12776:	2800      	cmp	r0, #0
   12778:	d1d4      	bne.n	12724 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   1277a:	240e      	movs	r4, #14
   1277c:	e7f1      	b.n	12762 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   1277e:	9801      	ldr	r0, [sp, #4]
   12780:	f002 fefe 	bl	15580 <net_buf_unref>
	if (!req) {
   12784:	2e00      	cmp	r6, #0
   12786:	d0eb      	beq.n	12760 <att_write_rsp.constprop.0+0x70>
   12788:	463a      	mov	r2, r7
   1278a:	4631      	mov	r1, r6
   1278c:	4628      	mov	r0, r5
   1278e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   12792:	f7ff ff09 	bl	125a8 <send_err_rsp.part.0>
   12796:	e7e3      	b.n	12760 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   12798:	9901      	ldr	r1, [sp, #4]
   1279a:	2900      	cmp	r1, #0
   1279c:	d0e0      	beq.n	12760 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1279e:	4628      	mov	r0, r5
   127a0:	4a04      	ldr	r2, [pc, #16]	; (127b4 <att_write_rsp.constprop.0+0xc4>)
   127a2:	f009 fece 	bl	1c542 <bt_att_chan_send_rsp>
   127a6:	e7dc      	b.n	12762 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   127a8:	2412      	movs	r4, #18
   127aa:	e7da      	b.n	12762 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   127ac:	2401      	movs	r4, #1
   127ae:	e7d8      	b.n	12762 <att_write_rsp.constprop.0+0x72>
   127b0:	0001c3a3 	.word	0x0001c3a3
   127b4:	0001c613 	.word	0x0001c613

000127b8 <bt_att_create_pdu>:
{
   127b8:	b570      	push	{r4, r5, r6, lr}
   127ba:	460e      	mov	r6, r1
   127bc:	4615      	mov	r5, r2
	att = att_get(conn);
   127be:	f7ff fbbb 	bl	11f38 <att_get>
	if (!att) {
   127c2:	b190      	cbz	r0, 127ea <bt_att_create_pdu+0x32>
	return list->head;
   127c4:	6a83      	ldr	r3, [r0, #40]	; 0x28
   127c6:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   127c8:	b15b      	cbz	r3, 127e2 <bt_att_create_pdu+0x2a>
   127ca:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   127ce:	d008      	beq.n	127e2 <bt_att_create_pdu+0x2a>
	return node->next;
   127d0:	681b      	ldr	r3, [r3, #0]
   127d2:	b10b      	cbz	r3, 127d8 <bt_att_create_pdu+0x20>
   127d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   127d8:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   127dc:	428a      	cmp	r2, r1
   127de:	d906      	bls.n	127ee <bt_att_create_pdu+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   127e0:	b95b      	cbnz	r3, 127fa <bt_att_create_pdu+0x42>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   127e2:	2157      	movs	r1, #87	; 0x57
   127e4:	480a      	ldr	r0, [pc, #40]	; (12810 <bt_att_create_pdu+0x58>)
   127e6:	f007 ff41 	bl	1a66c <printk>
}
   127ea:	2000      	movs	r0, #0
   127ec:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   127ee:	462a      	mov	r2, r5
   127f0:	4631      	mov	r1, r6
}
   127f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   127f6:	f7ff be85 	b.w	12504 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   127fa:	f513 749e 	adds.w	r4, r3, #316	; 0x13c
   127fe:	d004      	beq.n	1280a <bt_att_create_pdu+0x52>
	return node->next;
   12800:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12804:	b10c      	cbz	r4, 1280a <bt_att_create_pdu+0x52>
   12806:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
   1280a:	4618      	mov	r0, r3
   1280c:	4623      	mov	r3, r4
   1280e:	e7e3      	b.n	127d8 <bt_att_create_pdu+0x20>
   12810:	00021e56 	.word	0x00021e56

00012814 <att_read_group_req>:
{
   12814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12818:	898c      	ldrh	r4, [r1, #12]
{
   1281a:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   1281c:	3c04      	subs	r4, #4
   1281e:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12820:	2c02      	cmp	r4, #2
{
   12822:	4608      	mov	r0, r1
   12824:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12826:	d001      	beq.n	1282c <att_read_group_req+0x18>
   12828:	2c10      	cmp	r4, #16
   1282a:	d16f      	bne.n	1290c <att_read_group_req+0xf8>
   1282c:	2104      	movs	r1, #4
   1282e:	3008      	adds	r0, #8
   12830:	f002 ff9e 	bl	15770 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12834:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   12838:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1283a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1283c:	1d01      	adds	r1, r0, #4
   1283e:	4622      	mov	r2, r4
   12840:	4640      	mov	r0, r8
   12842:	f009 f9fa 	bl	1bc3a <bt_uuid_create>
   12846:	2800      	cmp	r0, #0
   12848:	d062      	beq.n	12910 <att_read_group_req+0xfc>
	if (!start || !end) {
   1284a:	2e00      	cmp	r6, #0
   1284c:	d03a      	beq.n	128c4 <att_read_group_req+0xb0>
   1284e:	2400      	movs	r4, #0
   12850:	2f00      	cmp	r7, #0
   12852:	d036      	beq.n	128c2 <att_read_group_req+0xae>
	if (start > end) {
   12854:	42be      	cmp	r6, r7
   12856:	d835      	bhi.n	128c4 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   12858:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1285c:	4640      	mov	r0, r8
   1285e:	a901      	add	r1, sp, #4
   12860:	f88d 4004 	strb.w	r4, [sp, #4]
   12864:	f8ad 3006 	strh.w	r3, [sp, #6]
   12868:	f009 f9b9 	bl	1bbde <bt_uuid_cmp>
   1286c:	2800      	cmp	r0, #0
   1286e:	d134      	bne.n	128da <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   12870:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12872:	2214      	movs	r2, #20
   12874:	2100      	movs	r1, #0
   12876:	a807      	add	r0, sp, #28
   12878:	f009 f967 	bl	1bb4a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1287c:	2201      	movs	r2, #1
   1287e:	2111      	movs	r1, #17
   12880:	4620      	mov	r0, r4
   12882:	f7ff ff99 	bl	127b8 <bt_att_create_pdu>
   12886:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   12888:	2800      	cmp	r0, #0
   1288a:	d041      	beq.n	12910 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   1288c:	2101      	movs	r1, #1
   1288e:	3008      	adds	r0, #8
	data.uuid = uuid;
   12890:	e9cd 5807 	strd	r5, r8, [sp, #28]
   12894:	f002 ff8a 	bl	157ac <net_buf_simple_add>
	data.rsp->len = 0U;
   12898:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1289c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1289e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   128a0:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   128a4:	4639      	mov	r1, r7
   128a6:	4630      	mov	r0, r6
   128a8:	4a1a      	ldr	r2, [pc, #104]	; (12914 <att_read_group_req+0x100>)
	data.group = NULL;
   128aa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   128ae:	f009 fd11 	bl	1c2d4 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   128b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   128b4:	781c      	ldrb	r4, [r3, #0]
   128b6:	bb1c      	cbnz	r4, 12900 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   128b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   128ba:	f002 fe61 	bl	15580 <net_buf_unref>
	if (!req) {
   128be:	230a      	movs	r3, #10
   128c0:	e018      	b.n	128f4 <att_read_group_req+0xe0>
			*err = 0U;
   128c2:	463e      	mov	r6, r7
	if (!req) {
   128c4:	2301      	movs	r3, #1
   128c6:	4632      	mov	r2, r6
   128c8:	2110      	movs	r1, #16
   128ca:	4628      	mov	r0, r5
   128cc:	f7ff fe6c 	bl	125a8 <send_err_rsp.part.0>
		return 0;
   128d0:	2400      	movs	r4, #0
}
   128d2:	4620      	mov	r0, r4
   128d4:	b00c      	add	sp, #48	; 0x30
   128d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   128da:	f642 0301 	movw	r3, #10241	; 0x2801
   128de:	4640      	mov	r0, r8
   128e0:	a907      	add	r1, sp, #28
   128e2:	f88d 401c 	strb.w	r4, [sp, #28]
   128e6:	f8ad 301e 	strh.w	r3, [sp, #30]
   128ea:	f009 f978 	bl	1bbde <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   128ee:	2800      	cmp	r0, #0
   128f0:	d0be      	beq.n	12870 <att_read_group_req+0x5c>
	if (!req) {
   128f2:	2310      	movs	r3, #16
   128f4:	4632      	mov	r2, r6
   128f6:	2110      	movs	r1, #16
   128f8:	4628      	mov	r0, r5
   128fa:	f7ff fe55 	bl	125a8 <send_err_rsp.part.0>
		return 0;
   128fe:	e7e8      	b.n	128d2 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12900:	4628      	mov	r0, r5
   12902:	4a05      	ldr	r2, [pc, #20]	; (12918 <att_read_group_req+0x104>)
   12904:	9909      	ldr	r1, [sp, #36]	; 0x24
   12906:	f009 fe1c 	bl	1c542 <bt_att_chan_send_rsp>
	return 0;
   1290a:	e7e1      	b.n	128d0 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   1290c:	2404      	movs	r4, #4
   1290e:	e7e0      	b.n	128d2 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   12910:	240e      	movs	r4, #14
   12912:	e7de      	b.n	128d2 <att_read_group_req+0xbe>
   12914:	000121b1 	.word	0x000121b1
   12918:	0001c613 	.word	0x0001c613

0001291c <att_read_mult_req>:
{
   1291c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   12920:	6886      	ldr	r6, [r0, #8]
{
   12922:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   12924:	2210      	movs	r2, #16
{
   12926:	4604      	mov	r4, r0
   12928:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   1292a:	4668      	mov	r0, sp
   1292c:	2100      	movs	r1, #0
   1292e:	f009 f90c 	bl	1bb4a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   12932:	2200      	movs	r2, #0
   12934:	210f      	movs	r1, #15
   12936:	4630      	mov	r0, r6
   12938:	f7ff ff3e 	bl	127b8 <bt_att_create_pdu>
   1293c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1293e:	b360      	cbz	r0, 1299a <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   12940:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12944:	f8df 9058 	ldr.w	r9, [pc, #88]	; 129a0 <att_read_mult_req+0x84>
	data.chan = chan;
   12948:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1294a:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   1294e:	89ab      	ldrh	r3, [r5, #12]
   12950:	2b01      	cmp	r3, #1
   12952:	d805      	bhi.n	12960 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12954:	4620      	mov	r0, r4
   12956:	4a13      	ldr	r2, [pc, #76]	; (129a4 <att_read_mult_req+0x88>)
   12958:	9902      	ldr	r1, [sp, #8]
   1295a:	f009 fdf2 	bl	1c542 <bt_att_chan_send_rsp>
   1295e:	e018      	b.n	12992 <att_read_mult_req+0x76>
   12960:	4638      	mov	r0, r7
   12962:	f00a fbf1 	bl	1d148 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12966:	466b      	mov	r3, sp
   12968:	464a      	mov	r2, r9
   1296a:	4601      	mov	r1, r0
   1296c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1296e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   12972:	f009 fcaf 	bl	1c2d4 <bt_gatt_foreach_attr>
		if (data.err) {
   12976:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1297a:	2b00      	cmp	r3, #0
   1297c:	d0e7      	beq.n	1294e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   1297e:	9802      	ldr	r0, [sp, #8]
   12980:	f002 fdfe 	bl	15580 <net_buf_unref>
	if (!req) {
   12984:	4632      	mov	r2, r6
   12986:	210e      	movs	r1, #14
   12988:	4620      	mov	r0, r4
   1298a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1298e:	f7ff fe0b 	bl	125a8 <send_err_rsp.part.0>
	return 0;
   12992:	2000      	movs	r0, #0
}
   12994:	b005      	add	sp, #20
   12996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   1299a:	200e      	movs	r0, #14
   1299c:	e7fa      	b.n	12994 <att_read_mult_req+0x78>
   1299e:	bf00      	nop
   129a0:	0001c63b 	.word	0x0001c63b
   129a4:	0001c613 	.word	0x0001c613

000129a8 <att_read_rsp>:
{
   129a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   129ac:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   129b0:	4605      	mov	r5, r0
   129b2:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   129b4:	4640      	mov	r0, r8
   129b6:	2101      	movs	r1, #1
{
   129b8:	4614      	mov	r4, r2
   129ba:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   129bc:	f00a fb57 	bl	1d06e <bt_gatt_change_aware>
   129c0:	b390      	cbz	r0, 12a28 <att_read_rsp+0x80>
	if (!handle) {
   129c2:	b39e      	cbz	r6, 12a2c <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   129c4:	2210      	movs	r2, #16
   129c6:	2100      	movs	r1, #0
   129c8:	4668      	mov	r0, sp
   129ca:	f009 f8be 	bl	1bb4a <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   129ce:	2200      	movs	r2, #0
   129d0:	4621      	mov	r1, r4
   129d2:	4640      	mov	r0, r8
   129d4:	f7ff fef0 	bl	127b8 <bt_att_create_pdu>
   129d8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   129da:	b348      	cbz	r0, 12a30 <att_read_rsp+0x88>
	data.offset = offset;
   129dc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   129e0:	4631      	mov	r1, r6
	data.offset = offset;
   129e2:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   129e6:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   129e8:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   129ea:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   129ee:	4a11      	ldr	r2, [pc, #68]	; (12a34 <att_read_rsp+0x8c>)
   129f0:	466b      	mov	r3, sp
	data.chan = chan;
   129f2:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   129f4:	f009 fc6e 	bl	1c2d4 <bt_gatt_foreach_attr>
	if (data.err) {
   129f8:	f89d 400c 	ldrb.w	r4, [sp, #12]
   129fc:	b174      	cbz	r4, 12a1c <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   129fe:	9802      	ldr	r0, [sp, #8]
   12a00:	f002 fdbe 	bl	15580 <net_buf_unref>
	if (!req) {
   12a04:	4632      	mov	r2, r6
   12a06:	4639      	mov	r1, r7
   12a08:	4628      	mov	r0, r5
   12a0a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   12a0e:	f7ff fdcb 	bl	125a8 <send_err_rsp.part.0>
		return 0;
   12a12:	2400      	movs	r4, #0
}
   12a14:	4620      	mov	r0, r4
   12a16:	b004      	add	sp, #16
   12a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12a1c:	4628      	mov	r0, r5
   12a1e:	4a06      	ldr	r2, [pc, #24]	; (12a38 <att_read_rsp+0x90>)
   12a20:	9902      	ldr	r1, [sp, #8]
   12a22:	f009 fd8e 	bl	1c542 <bt_att_chan_send_rsp>
	return 0;
   12a26:	e7f5      	b.n	12a14 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   12a28:	2412      	movs	r4, #18
   12a2a:	e7f3      	b.n	12a14 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   12a2c:	2401      	movs	r4, #1
   12a2e:	e7f1      	b.n	12a14 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12a30:	240e      	movs	r4, #14
   12a32:	e7ef      	b.n	12a14 <att_read_rsp+0x6c>
   12a34:	0001c63b 	.word	0x0001c63b
   12a38:	0001c613 	.word	0x0001c613

00012a3c <att_read_type_req>:
{
   12a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   12a40:	898c      	ldrh	r4, [r1, #12]
{
   12a42:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   12a44:	3c04      	subs	r4, #4
   12a46:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   12a48:	2c02      	cmp	r4, #2
{
   12a4a:	4608      	mov	r0, r1
   12a4c:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12a4e:	d001      	beq.n	12a54 <att_read_type_req+0x18>
   12a50:	2c10      	cmp	r4, #16
   12a52:	d150      	bne.n	12af6 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   12a54:	2104      	movs	r1, #4
   12a56:	3008      	adds	r0, #8
   12a58:	f002 fe8a 	bl	15770 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12a5c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   12a60:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12a62:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12a64:	1d01      	adds	r1, r0, #4
   12a66:	4622      	mov	r2, r4
   12a68:	4640      	mov	r0, r8
   12a6a:	f009 f8e6 	bl	1bc3a <bt_uuid_create>
   12a6e:	b188      	cbz	r0, 12a94 <att_read_type_req+0x58>
	if (!start || !end) {
   12a70:	b19e      	cbz	r6, 12a9a <att_read_type_req+0x5e>
   12a72:	b18f      	cbz	r7, 12a98 <att_read_type_req+0x5c>
	if (start > end) {
   12a74:	42b7      	cmp	r7, r6
   12a76:	d310      	bcc.n	12a9a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   12a78:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   12a7a:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12a7c:	2100      	movs	r1, #0
   12a7e:	eb0d 0002 	add.w	r0, sp, r2
   12a82:	f009 f862 	bl	1bb4a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   12a86:	2201      	movs	r2, #1
   12a88:	2109      	movs	r1, #9
   12a8a:	4620      	mov	r0, r4
   12a8c:	f7ff fe94 	bl	127b8 <bt_att_create_pdu>
   12a90:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   12a92:	b968      	cbnz	r0, 12ab0 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   12a94:	240e      	movs	r4, #14
   12a96:	e007      	b.n	12aa8 <att_read_type_req+0x6c>
			*err = 0U;
   12a98:	463e      	mov	r6, r7
	if (!req) {
   12a9a:	2301      	movs	r3, #1
   12a9c:	4632      	mov	r2, r6
   12a9e:	2108      	movs	r1, #8
   12aa0:	4628      	mov	r0, r5
   12aa2:	f7ff fd81 	bl	125a8 <send_err_rsp.part.0>
		return 0;
   12aa6:	2400      	movs	r4, #0
}
   12aa8:	4620      	mov	r0, r4
   12aaa:	b00c      	add	sp, #48	; 0x30
   12aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   12ab0:	2101      	movs	r1, #1
   12ab2:	3008      	adds	r0, #8
	data.uuid = uuid;
   12ab4:	e9cd 5806 	strd	r5, r8, [sp, #24]
   12ab8:	f002 fe78 	bl	157ac <net_buf_simple_add>
	data.rsp->len = 0U;
   12abc:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12ac0:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12ac2:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12ac4:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   12ac6:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12aca:	4a0c      	ldr	r2, [pc, #48]	; (12afc <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12acc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12ad0:	4630      	mov	r0, r6
   12ad2:	ab06      	add	r3, sp, #24
   12ad4:	f009 fbfe 	bl	1c2d4 <bt_gatt_foreach_attr>
	if (data.err) {
   12ad8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   12adc:	b12c      	cbz	r4, 12aea <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   12ade:	9808      	ldr	r0, [sp, #32]
   12ae0:	f002 fd4e 	bl	15580 <net_buf_unref>
	if (!req) {
   12ae4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   12ae8:	e7d8      	b.n	12a9c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12aea:	4628      	mov	r0, r5
   12aec:	4a04      	ldr	r2, [pc, #16]	; (12b00 <att_read_type_req+0xc4>)
   12aee:	9908      	ldr	r1, [sp, #32]
   12af0:	f009 fd27 	bl	1c542 <bt_att_chan_send_rsp>
	return 0;
   12af4:	e7d8      	b.n	12aa8 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   12af6:	2404      	movs	r4, #4
   12af8:	e7d6      	b.n	12aa8 <att_read_type_req+0x6c>
   12afa:	bf00      	nop
   12afc:	000123d9 	.word	0x000123d9
   12b00:	0001c613 	.word	0x0001c613

00012b04 <att_find_type_req>:
{
   12b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12b08:	4688      	mov	r8, r1
   12b0a:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   12b0c:	2106      	movs	r1, #6
   12b0e:	b086      	sub	sp, #24
   12b10:	f108 0008 	add.w	r0, r8, #8
   12b14:	f002 fe2c 	bl	15770 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   12b18:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   12b1a:	b317      	cbz	r7, 12b62 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   12b1c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   12b20:	f1b9 0f00 	cmp.w	r9, #0
   12b24:	d01c      	beq.n	12b60 <att_find_type_req+0x5c>
	if (start > end) {
   12b26:	454f      	cmp	r7, r9
   12b28:	d81b      	bhi.n	12b62 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   12b2a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12b2c:	2400      	movs	r4, #0
   12b2e:	f8ad 3002 	strh.w	r3, [sp, #2]
   12b32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   12b36:	4668      	mov	r0, sp
   12b38:	a901      	add	r1, sp, #4
	value = buf->data;
   12b3a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   12b3e:	f88d 4000 	strb.w	r4, [sp]
   12b42:	f88d 4004 	strb.w	r4, [sp, #4]
   12b46:	f8ad 3006 	strh.w	r3, [sp, #6]
   12b4a:	f009 f848 	bl	1bbde <bt_uuid_cmp>
   12b4e:	4606      	mov	r6, r0
   12b50:	b190      	cbz	r0, 12b78 <att_find_type_req+0x74>
	if (!req) {
   12b52:	230a      	movs	r3, #10
   12b54:	463a      	mov	r2, r7
   12b56:	2106      	movs	r1, #6
   12b58:	4628      	mov	r0, r5
   12b5a:	f7ff fd25 	bl	125a8 <send_err_rsp.part.0>
		return 0;
   12b5e:	e007      	b.n	12b70 <att_find_type_req+0x6c>
			*err = 0U;
   12b60:	464f      	mov	r7, r9
	if (!req) {
   12b62:	2301      	movs	r3, #1
   12b64:	463a      	mov	r2, r7
   12b66:	2106      	movs	r1, #6
   12b68:	4628      	mov	r0, r5
   12b6a:	f7ff fd1d 	bl	125a8 <send_err_rsp.part.0>
		return 0;
   12b6e:	2400      	movs	r4, #0
}
   12b70:	4620      	mov	r0, r4
   12b72:	b006      	add	sp, #24
   12b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12b78:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   12b7c:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12b80:	4601      	mov	r1, r0
   12b82:	2214      	movs	r2, #20
   12b84:	a801      	add	r0, sp, #4
   12b86:	f008 ffe0 	bl	1bb4a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   12b8a:	4632      	mov	r2, r6
   12b8c:	2107      	movs	r1, #7
   12b8e:	4640      	mov	r0, r8
   12b90:	f7ff fe12 	bl	127b8 <bt_att_create_pdu>
   12b94:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   12b96:	b1e0      	cbz	r0, 12bd2 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12b98:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12b9a:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12b9c:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12ba0:	4638      	mov	r0, r7
   12ba2:	4a0d      	ldr	r2, [pc, #52]	; (12bd8 <att_find_type_req+0xd4>)
   12ba4:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   12ba6:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   12baa:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   12bae:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12bb0:	f009 fb90 	bl	1c2d4 <bt_gatt_foreach_attr>
	if (data.err) {
   12bb4:	f89d 4015 	ldrb.w	r4, [sp, #21]
   12bb8:	b12c      	cbz	r4, 12bc6 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   12bba:	9802      	ldr	r0, [sp, #8]
   12bbc:	f002 fce0 	bl	15580 <net_buf_unref>
	if (!req) {
   12bc0:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12bc4:	e7ce      	b.n	12b64 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12bc6:	4628      	mov	r0, r5
   12bc8:	4a04      	ldr	r2, [pc, #16]	; (12bdc <att_find_type_req+0xd8>)
   12bca:	9902      	ldr	r1, [sp, #8]
   12bcc:	f009 fcb9 	bl	1c542 <bt_att_chan_send_rsp>
	return 0;
   12bd0:	e7ce      	b.n	12b70 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12bd2:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12bd4:	e7cc      	b.n	12b70 <att_find_type_req+0x6c>
   12bd6:	bf00      	nop
   12bd8:	00011fa1 	.word	0x00011fa1
   12bdc:	0001c613 	.word	0x0001c613

00012be0 <att_find_info_req>:
{
   12be0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   12be2:	688b      	ldr	r3, [r1, #8]
{
   12be4:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   12be6:	881e      	ldrh	r6, [r3, #0]
{
   12be8:	b085      	sub	sp, #20
	if (!start || !end) {
   12bea:	b19e      	cbz	r6, 12c14 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   12bec:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   12bee:	b184      	cbz	r4, 12c12 <att_find_info_req+0x32>
	if (start > end) {
   12bf0:	42b4      	cmp	r4, r6
   12bf2:	d30f      	bcc.n	12c14 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   12bf4:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   12bf6:	2210      	movs	r2, #16
   12bf8:	2100      	movs	r1, #0
   12bfa:	4668      	mov	r0, sp
   12bfc:	f008 ffa5 	bl	1bb4a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   12c00:	2200      	movs	r2, #0
   12c02:	2105      	movs	r1, #5
   12c04:	4638      	mov	r0, r7
   12c06:	f7ff fdd7 	bl	127b8 <bt_att_create_pdu>
   12c0a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   12c0c:	b958      	cbnz	r0, 12c26 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   12c0e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   12c10:	e007      	b.n	12c22 <att_find_info_req+0x42>
			*err = 0U;
   12c12:	4626      	mov	r6, r4
	if (!req) {
   12c14:	2301      	movs	r3, #1
   12c16:	4632      	mov	r2, r6
   12c18:	2104      	movs	r1, #4
   12c1a:	4628      	mov	r0, r5
   12c1c:	f7ff fcc4 	bl	125a8 <send_err_rsp.part.0>
	return 0;
   12c20:	2000      	movs	r0, #0
}
   12c22:	b005      	add	sp, #20
   12c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12c26:	4621      	mov	r1, r4
   12c28:	466b      	mov	r3, sp
   12c2a:	4630      	mov	r0, r6
   12c2c:	4a08      	ldr	r2, [pc, #32]	; (12c50 <att_find_info_req+0x70>)
	data.chan = chan;
   12c2e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   12c30:	f009 fb50 	bl	1c2d4 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   12c34:	9c02      	ldr	r4, [sp, #8]
   12c36:	b924      	cbnz	r4, 12c42 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   12c38:	9801      	ldr	r0, [sp, #4]
   12c3a:	f002 fca1 	bl	15580 <net_buf_unref>
	if (!req) {
   12c3e:	230a      	movs	r3, #10
   12c40:	e7e9      	b.n	12c16 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   12c42:	4628      	mov	r0, r5
   12c44:	4a03      	ldr	r2, [pc, #12]	; (12c54 <att_find_info_req+0x74>)
   12c46:	9901      	ldr	r1, [sp, #4]
   12c48:	f009 fc7b 	bl	1c542 <bt_att_chan_send_rsp>
   12c4c:	e7e8      	b.n	12c20 <att_find_info_req+0x40>
   12c4e:	bf00      	nop
   12c50:	0001c2eb 	.word	0x0001c2eb
   12c54:	0001c613 	.word	0x0001c613

00012c58 <att_mtu_req>:
{
   12c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   12c5a:	4603      	mov	r3, r0
   12c5c:	f853 2bc8 	ldr.w	r2, [r3], #200
{
   12c60:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   12c62:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12c64:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   12c68:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   12c6c:	071b      	lsls	r3, r3, #28
   12c6e:	d41b      	bmi.n	12ca8 <att_mtu_req+0x50>
	mtu_client = sys_le16_to_cpu(req->mtu);
   12c70:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   12c72:	881b      	ldrh	r3, [r3, #0]
   12c74:	2b16      	cmp	r3, #22
   12c76:	d919      	bls.n	12cac <att_mtu_req+0x54>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   12c78:	2202      	movs	r2, #2
   12c7a:	2103      	movs	r1, #3
   12c7c:	f7ff fd9c 	bl	127b8 <bt_att_create_pdu>
	if (!pdu) {
   12c80:	4606      	mov	r6, r0
   12c82:	b1a8      	cbz	r0, 12cb0 <att_mtu_req+0x58>
	return net_buf_simple_add(&buf->b, len);
   12c84:	2102      	movs	r1, #2
   12c86:	3008      	adds	r0, #8
   12c88:	f002 fd90 	bl	157ac <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   12c8c:	2717      	movs	r7, #23
   12c8e:	7044      	strb	r4, [r0, #1]
   12c90:	7007      	strb	r7, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   12c92:	4631      	mov	r1, r6
   12c94:	4628      	mov	r0, r5
   12c96:	4a07      	ldr	r2, [pc, #28]	; (12cb4 <att_mtu_req+0x5c>)
   12c98:	f009 fc53 	bl	1c542 <bt_att_chan_send_rsp>
	return 0;
   12c9c:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   12c9e:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   12ca2:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
}
   12ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   12ca8:	2006      	movs	r0, #6
   12caa:	e7fc      	b.n	12ca6 <att_mtu_req+0x4e>
		return BT_ATT_ERR_INVALID_PDU;
   12cac:	2004      	movs	r0, #4
   12cae:	e7fa      	b.n	12ca6 <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   12cb0:	200e      	movs	r0, #14
   12cb2:	e7f8      	b.n	12ca6 <att_mtu_req+0x4e>
   12cb4:	0001c613 	.word	0x0001c613

00012cb8 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   12cb8:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   12cba:	2400      	movs	r4, #0
{
   12cbc:	4602      	mov	r2, r0
   12cbe:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   12cc0:	4807      	ldr	r0, [pc, #28]	; (12ce0 <bt_att_req_alloc+0x28>)
   12cc2:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   12cc4:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   12cc6:	f004 ff9d 	bl	17c04 <k_mem_slab_alloc>
   12cca:	4601      	mov	r1, r0
   12ccc:	b930      	cbnz	r0, 12cdc <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   12cce:	2218      	movs	r2, #24
   12cd0:	9801      	ldr	r0, [sp, #4]
   12cd2:	f008 ff3a 	bl	1bb4a <memset>

	return req;
   12cd6:	9801      	ldr	r0, [sp, #4]
}
   12cd8:	b002      	add	sp, #8
   12cda:	bd10      	pop	{r4, pc}
		return NULL;
   12cdc:	4620      	mov	r0, r4
   12cde:	e7fb      	b.n	12cd8 <bt_att_req_alloc+0x20>
   12ce0:	20008634 	.word	0x20008634

00012ce4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   12ce4:	b507      	push	{r0, r1, r2, lr}
   12ce6:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   12ce8:	a901      	add	r1, sp, #4
   12cea:	4803      	ldr	r0, [pc, #12]	; (12cf8 <bt_att_req_free+0x14>)
   12cec:	f004 ffe4 	bl	17cb8 <k_mem_slab_free>
}
   12cf0:	b003      	add	sp, #12
   12cf2:	f85d fb04 	ldr.w	pc, [sp], #4
   12cf6:	bf00      	nop
   12cf8:	20008634 	.word	0x20008634

00012cfc <att_handle_rsp>:
{
   12cfc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12d00:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->timeout_work);
   12d02:	30f0      	adds	r0, #240	; 0xf0
{
   12d04:	460f      	mov	r7, r1
   12d06:	4690      	mov	r8, r2
   12d08:	461e      	mov	r6, r3
	k_delayed_work_cancel(&chan->timeout_work);
   12d0a:	f006 fda9 	bl	19860 <k_delayed_work_cancel>
	if (!chan->req) {
   12d0e:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
   12d12:	f04f 0a00 	mov.w	sl, #0
   12d16:	b99d      	cbnz	r5, 12d40 <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   12d18:	2157      	movs	r1, #87	; 0x57
   12d1a:	4818      	ldr	r0, [pc, #96]	; (12d7c <att_handle_rsp+0x80>)
   12d1c:	f007 fca6 	bl	1a66c <printk>
	att_req_send_process(chan->att);
   12d20:	6820      	ldr	r0, [r4, #0]
   12d22:	f009 fcf2 	bl	1c70a <att_req_send_process>
	if (func) {
   12d26:	b13d      	cbz	r5, 12d38 <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   12d28:	6820      	ldr	r0, [r4, #0]
   12d2a:	f8cd 9000 	str.w	r9, [sp]
   12d2e:	4643      	mov	r3, r8
   12d30:	463a      	mov	r2, r7
   12d32:	4631      	mov	r1, r6
   12d34:	6800      	ldr	r0, [r0, #0]
   12d36:	47a8      	blx	r5
}
   12d38:	2000      	movs	r0, #0
   12d3a:	b002      	add	sp, #8
   12d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   12d40:	4b0f      	ldr	r3, [pc, #60]	; (12d80 <att_handle_rsp+0x84>)
   12d42:	429d      	cmp	r5, r3
   12d44:	d103      	bne.n	12d4e <att_handle_rsp+0x52>
	bt_att_func_t func = NULL;
   12d46:	4655      	mov	r5, sl
		chan->req = NULL;
   12d48:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
		goto process;
   12d4c:	e7e8      	b.n	12d20 <att_handle_rsp+0x24>
	if (chan->req->buf) {
   12d4e:	6928      	ldr	r0, [r5, #16]
   12d50:	b128      	cbz	r0, 12d5e <att_handle_rsp+0x62>
		net_buf_unref(chan->req->buf);
   12d52:	f002 fc15 	bl	15580 <net_buf_unref>
		chan->req->buf = NULL;
   12d56:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   12d5a:	f8c3 a010 	str.w	sl, [r3, #16]
	chan->req->func = NULL;
   12d5e:	f04f 0a00 	mov.w	sl, #0
	func = chan->req->func;
   12d62:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   12d66:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   12d68:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   12d6c:	f8d0 9014 	ldr.w	r9, [r0, #20]
	att_req_destroy(chan->req);
   12d70:	f009 fd79 	bl	1c866 <att_req_destroy>
	chan->req = NULL;
   12d74:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
   12d78:	e7d2      	b.n	12d20 <att_handle_rsp+0x24>
   12d7a:	bf00      	nop
   12d7c:	00021e76 	.word	0x00021e76
   12d80:	2000ab7c 	.word	0x2000ab7c

00012d84 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   12d84:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
{
   12d88:	b430      	push	{r4, r5}
	if (!chan->req || chan->req == &cancel) {
   12d8a:	b18b      	cbz	r3, 12db0 <att_error_rsp+0x2c>
   12d8c:	4a09      	ldr	r2, [pc, #36]	; (12db4 <att_error_rsp+0x30>)
   12d8e:	4293      	cmp	r3, r2
   12d90:	d00e      	beq.n	12db0 <att_error_rsp+0x2c>
	if (chan->req->buf) {
   12d92:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
   12d94:	6889      	ldr	r1, [r1, #8]
	if (chan->req->buf) {
   12d96:	b12a      	cbz	r2, 12da4 <att_error_rsp+0x20>
	buf->data = buf->__buf + state->offset;
   12d98:	899d      	ldrh	r5, [r3, #12]
   12d9a:	89dc      	ldrh	r4, [r3, #14]
   12d9c:	6913      	ldr	r3, [r2, #16]
	buf->len = state->len;
   12d9e:	8194      	strh	r4, [r2, #12]
	buf->data = buf->__buf + state->offset;
   12da0:	442b      	add	r3, r5
   12da2:	6093      	str	r3, [r2, #8]
	err = rsp->error;
   12da4:	78cb      	ldrb	r3, [r1, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   12da6:	2200      	movs	r2, #0
}
   12da8:	bc30      	pop	{r4, r5}
	return att_handle_rsp(chan, NULL, 0, err);
   12daa:	4611      	mov	r1, r2
   12dac:	f7ff bfa6 	b.w	12cfc <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   12db0:	230e      	movs	r3, #14
   12db2:	e7f8      	b.n	12da6 <att_error_rsp+0x22>
   12db4:	2000ab7c 	.word	0x2000ab7c

00012db8 <att_reset>:
{
   12db8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12dba:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   12dbc:	9803      	ldr	r0, [sp, #12]
   12dbe:	2200      	movs	r2, #0
   12dc0:	2300      	movs	r3, #0
   12dc2:	300c      	adds	r0, #12
   12dc4:	f002 fb5a 	bl	1547c <net_buf_get>
   12dc8:	b948      	cbnz	r0, 12dde <att_reset+0x26>
	att->conn = NULL;
   12dca:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   12dcc:	6854      	ldr	r4, [r2, #4]
   12dce:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   12dd0:	b944      	cbnz	r4, 12de4 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   12dd2:	480d      	ldr	r0, [pc, #52]	; (12e08 <att_reset+0x50>)
   12dd4:	a903      	add	r1, sp, #12
   12dd6:	f004 ff6f 	bl	17cb8 <k_mem_slab_free>
}
   12dda:	b004      	add	sp, #16
   12ddc:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   12dde:	f002 fbcf 	bl	15580 <net_buf_unref>
   12de2:	e7eb      	b.n	12dbc <att_reset+0x4>
	return node->next;
   12de4:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
   12de6:	6866      	ldr	r6, [r4, #4]
   12de8:	b136      	cbz	r6, 12df8 <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   12dea:	6963      	ldr	r3, [r4, #20]
   12dec:	210e      	movs	r1, #14
   12dee:	9300      	str	r3, [sp, #0]
   12df0:	2300      	movs	r3, #0
   12df2:	461a      	mov	r2, r3
   12df4:	4618      	mov	r0, r3
   12df6:	47b0      	blx	r6
		att_req_destroy(req);
   12df8:	4620      	mov	r0, r4
   12dfa:	f009 fd34 	bl	1c866 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   12dfe:	2d00      	cmp	r5, #0
   12e00:	d0e7      	beq.n	12dd2 <att_reset+0x1a>
   12e02:	462c      	mov	r4, r5
   12e04:	682d      	ldr	r5, [r5, #0]
   12e06:	e7ee      	b.n	12de6 <att_reset+0x2e>
   12e08:	200085fc 	.word	0x200085fc

00012e0c <att_timeout>:
{
   12e0c:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
   12e0e:	4605      	mov	r5, r0
   12e10:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
   12e14:	2145      	movs	r1, #69	; 0x45
{
   12e16:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   12e18:	4808      	ldr	r0, [pc, #32]	; (12e3c <att_timeout+0x30>)
   12e1a:	f007 fc27 	bl	1a66c <printk>
	att_chan_detach(chan);
   12e1e:	4628      	mov	r0, r5
   12e20:	f009 fd5e 	bl	1c8e0 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   12e24:	6ab5      	ldr	r5, [r6, #40]	; 0x28
   12e26:	b945      	cbnz	r5, 12e3a <att_timeout+0x2e>
	att_reset(att);
   12e28:	4630      	mov	r0, r6
   12e2a:	f7ff ffc5 	bl	12db8 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   12e2e:	f854 0ce8 	ldr.w	r0, [r4, #-232]
   12e32:	f002 f951 	bl	150d8 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   12e36:	f844 5ce8 	str.w	r5, [r4, #-232]
}
   12e3a:	bd70      	pop	{r4, r5, r6, pc}
   12e3c:	00021e92 	.word	0x00021e92

00012e40 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   12e40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12e44:	460c      	mov	r4, r1
   12e46:	4617      	mov	r7, r2
   12e48:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   12e4a:	4605      	mov	r5, r0
   12e4c:	b950      	cbnz	r0, 12e64 <bt_att_send+0x24>
   12e4e:	492e      	ldr	r1, [pc, #184]	; (12f08 <bt_att_send+0xc8>)
   12e50:	482e      	ldr	r0, [pc, #184]	; (12f0c <bt_att_send+0xcc>)
   12e52:	f640 32ce 	movw	r2, #3022	; 0xbce
   12e56:	f007 fc09 	bl	1a66c <printk>
   12e5a:	f640 31ce 	movw	r1, #3022	; 0xbce
   12e5e:	482a      	ldr	r0, [pc, #168]	; (12f08 <bt_att_send+0xc8>)
   12e60:	f007 feaa 	bl	1abb8 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   12e64:	b954      	cbnz	r4, 12e7c <bt_att_send+0x3c>
   12e66:	4928      	ldr	r1, [pc, #160]	; (12f08 <bt_att_send+0xc8>)
   12e68:	4828      	ldr	r0, [pc, #160]	; (12f0c <bt_att_send+0xcc>)
   12e6a:	f640 32cf 	movw	r2, #3023	; 0xbcf
   12e6e:	f007 fbfd 	bl	1a66c <printk>
   12e72:	f640 31cf 	movw	r1, #3023	; 0xbcf
   12e76:	4824      	ldr	r0, [pc, #144]	; (12f08 <bt_att_send+0xc8>)
   12e78:	f007 fe9e 	bl	1abb8 <assert_post_action>

	att = att_get(conn);
   12e7c:	4628      	mov	r0, r5
   12e7e:	f7ff f85b 	bl	11f38 <att_get>
	if (!att) {
   12e82:	4606      	mov	r6, r0
   12e84:	b938      	cbnz	r0, 12e96 <bt_att_send+0x56>
		net_buf_unref(buf);
   12e86:	4620      	mov	r0, r4
   12e88:	f002 fb7a 	bl	15580 <net_buf_unref>
		return -ENOTCONN;
   12e8c:	f06f 0038 	mvn.w	r0, #56	; 0x38

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   12e90:	b002      	add	sp, #8
   12e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   12e96:	b147      	cbz	r7, 12eaa <bt_att_send+0x6a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   12e98:	463b      	mov	r3, r7
   12e9a:	4622      	mov	r2, r4
   12e9c:	2104      	movs	r1, #4
   12e9e:	4628      	mov	r0, r5
   12ea0:	f8cd 8000 	str.w	r8, [sp]
   12ea4:	f009 f955 	bl	1c152 <bt_l2cap_send_cb>
   12ea8:	e7f2      	b.n	12e90 <bt_att_send+0x50>
	net_buf_put(&att->tx_queue, buf);
   12eaa:	f100 070c 	add.w	r7, r0, #12
   12eae:	4621      	mov	r1, r4
   12eb0:	4638      	mov	r0, r7
   12eb2:	f002 fb37 	bl	15524 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   12eb6:	2200      	movs	r2, #0
   12eb8:	2300      	movs	r3, #0
   12eba:	4638      	mov	r0, r7
   12ebc:	f002 fade 	bl	1547c <net_buf_get>
	if (!buf) {
   12ec0:	4605      	mov	r5, r0
   12ec2:	b908      	cbnz	r0, 12ec8 <bt_att_send+0x88>
	return 0;
   12ec4:	2000      	movs	r0, #0
   12ec6:	e7e3      	b.n	12e90 <bt_att_send+0x50>
	return list->head;
   12ec8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12eca:	b1c3      	cbz	r3, 12efe <bt_att_send+0xbe>
   12ecc:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   12ed0:	d015      	beq.n	12efe <bt_att_send+0xbe>
	return node->next;
   12ed2:	681c      	ldr	r4, [r3, #0]
   12ed4:	b10c      	cbz	r4, 12eda <bt_att_send+0x9a>
   12ed6:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		err = bt_att_chan_send(chan, buf, NULL);
   12eda:	2200      	movs	r2, #0
   12edc:	4629      	mov	r1, r5
   12ede:	f009 fb19 	bl	1c514 <bt_att_chan_send>
		if (err >= 0) {
   12ee2:	2800      	cmp	r0, #0
   12ee4:	daee      	bge.n	12ec4 <bt_att_send+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12ee6:	b154      	cbz	r4, 12efe <bt_att_send+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12ee8:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   12eec:	d004      	beq.n	12ef8 <bt_att_send+0xb8>
	return node->next;
   12eee:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   12ef2:	b10b      	cbz	r3, 12ef8 <bt_att_send+0xb8>
   12ef4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   12ef8:	4620      	mov	r0, r4
   12efa:	461c      	mov	r4, r3
   12efc:	e7ed      	b.n	12eda <bt_att_send+0x9a>
		k_queue_prepend(&att->tx_queue._queue, buf);
   12efe:	4629      	mov	r1, r5
   12f00:	4638      	mov	r0, r7
   12f02:	f00a ff7b 	bl	1ddfc <k_queue_prepend>
   12f06:	e7dd      	b.n	12ec4 <bt_att_send+0x84>
   12f08:	00021d55 	.word	0x00021d55
   12f0c:	0001fbb7 	.word	0x0001fbb7

00012f10 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   12f10:	b538      	push	{r3, r4, r5, lr}
   12f12:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   12f14:	4605      	mov	r5, r0
   12f16:	b950      	cbnz	r0, 12f2e <bt_att_req_send+0x1e>
   12f18:	4918      	ldr	r1, [pc, #96]	; (12f7c <bt_att_req_send+0x6c>)
   12f1a:	4819      	ldr	r0, [pc, #100]	; (12f80 <bt_att_req_send+0x70>)
   12f1c:	f640 32eb 	movw	r2, #3051	; 0xbeb
   12f20:	f007 fba4 	bl	1a66c <printk>
   12f24:	f640 31eb 	movw	r1, #3051	; 0xbeb
   12f28:	4814      	ldr	r0, [pc, #80]	; (12f7c <bt_att_req_send+0x6c>)
   12f2a:	f007 fe45 	bl	1abb8 <assert_post_action>
	__ASSERT_NO_MSG(req);
   12f2e:	b954      	cbnz	r4, 12f46 <bt_att_req_send+0x36>
   12f30:	4912      	ldr	r1, [pc, #72]	; (12f7c <bt_att_req_send+0x6c>)
   12f32:	4813      	ldr	r0, [pc, #76]	; (12f80 <bt_att_req_send+0x70>)
   12f34:	f640 32ec 	movw	r2, #3052	; 0xbec
   12f38:	f007 fb98 	bl	1a66c <printk>
   12f3c:	f640 31ec 	movw	r1, #3052	; 0xbec
   12f40:	480e      	ldr	r0, [pc, #56]	; (12f7c <bt_att_req_send+0x6c>)
   12f42:	f007 fe39 	bl	1abb8 <assert_post_action>

	att = att_get(conn);
   12f46:	4628      	mov	r0, r5
   12f48:	f7fe fff6 	bl	11f38 <att_get>
	if (!att) {
   12f4c:	4605      	mov	r5, r0
   12f4e:	b930      	cbnz	r0, 12f5e <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
   12f50:	6920      	ldr	r0, [r4, #16]
   12f52:	f002 fb15 	bl	15580 <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
   12f56:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
   12f5a:	6125      	str	r5, [r4, #16]

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);

	return 0;
}
   12f5c:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   12f5e:	2300      	movs	r3, #0
   12f60:	6023      	str	r3, [r4, #0]
	return list->tail;
   12f62:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   12f64:	b933      	cbnz	r3, 12f74 <bt_att_req_send+0x64>
	list->head = node;
   12f66:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   12f6a:	4628      	mov	r0, r5
   12f6c:	f009 fbcd 	bl	1c70a <att_req_send_process>
	return 0;
   12f70:	2000      	movs	r0, #0
   12f72:	e7f3      	b.n	12f5c <bt_att_req_send+0x4c>
	parent->next = child;
   12f74:	601c      	str	r4, [r3, #0]
	list->tail = node;
   12f76:	6084      	str	r4, [r0, #8]
}
   12f78:	e7f7      	b.n	12f6a <bt_att_req_send+0x5a>
   12f7a:	bf00      	nop
   12f7c:	00021d55 	.word	0x00021d55
   12f80:	0001fbb7 	.word	0x0001fbb7

00012f84 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   12f84:	b510      	push	{r4, lr}
   12f86:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   12f88:	b350      	cbz	r0, 12fe0 <bt_att_req_cancel+0x5c>
   12f8a:	b349      	cbz	r1, 12fe0 <bt_att_req_cancel+0x5c>
		return;
	}

	att = att_get(conn);
   12f8c:	f7fe ffd4 	bl	11f38 <att_get>
	if (!att) {
   12f90:	b330      	cbz	r0, 12fe0 <bt_att_req_cancel+0x5c>
	return list->head;
   12f92:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12f94:	b15b      	cbz	r3, 12fae <bt_att_req_cancel+0x2a>
   12f96:	f5b3 719e 	subs.w	r1, r3, #316	; 0x13c
   12f9a:	d008      	beq.n	12fae <bt_att_req_cancel+0x2a>
	return node->next;
   12f9c:	681b      	ldr	r3, [r3, #0]
   12f9e:	b10b      	cbz	r3, 12fa4 <bt_att_req_cancel+0x20>
   12fa0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
	if (chan->req != req) {
   12fa4:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
   12fa8:	4294      	cmp	r4, r2
   12faa:	d006      	beq.n	12fba <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12fac:	b96b      	cbnz	r3, 12fca <bt_att_req_cancel+0x46>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   12fae:	3004      	adds	r0, #4
   12fb0:	4621      	mov	r1, r4
   12fb2:	f009 faee 	bl	1c592 <sys_slist_find_and_remove.isra.0>

	att_req_destroy(req);
   12fb6:	4620      	mov	r0, r4
   12fb8:	e003      	b.n	12fc2 <bt_att_req_cancel+0x3e>
	att_req_destroy(req);
   12fba:	4620      	mov	r0, r4
	chan->req = &cancel;
   12fbc:	4b09      	ldr	r3, [pc, #36]	; (12fe4 <bt_att_req_cancel+0x60>)
   12fbe:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
}
   12fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
   12fc6:	f009 bc4e 	b.w	1c866 <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12fca:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   12fce:	d004      	beq.n	12fda <bt_att_req_cancel+0x56>
	return node->next;
   12fd0:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12fd4:	b10a      	cbz	r2, 12fda <bt_att_req_cancel+0x56>
   12fd6:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   12fda:	4619      	mov	r1, r3
   12fdc:	4613      	mov	r3, r2
   12fde:	e7e1      	b.n	12fa4 <bt_att_req_cancel+0x20>
}
   12fe0:	bd10      	pop	{r4, pc}
   12fe2:	bf00      	nop
   12fe4:	2000ab7c 	.word	0x2000ab7c

00012fe8 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   12fe8:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   12fea:	4618      	mov	r0, r3
{
   12fec:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   12fee:	4907      	ldr	r1, [pc, #28]	; (1300c <db_hash_set+0x24>)
   12ff0:	2210      	movs	r2, #16
   12ff2:	47a0      	blx	r4
	if (len < 0) {
   12ff4:	1e04      	subs	r4, r0, #0
   12ff6:	da06      	bge.n	13006 <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   12ff8:	4622      	mov	r2, r4
   12ffa:	2145      	movs	r1, #69	; 0x45
   12ffc:	4804      	ldr	r0, [pc, #16]	; (13010 <db_hash_set+0x28>)
   12ffe:	f007 fb35 	bl	1a66c <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
   13002:	4620      	mov	r0, r4
   13004:	bd10      	pop	{r4, pc}
	return 0;
   13006:	2400      	movs	r4, #0
   13008:	e7fb      	b.n	13002 <db_hash_set+0x1a>
   1300a:	bf00      	nop
   1300c:	2000c980 	.word	0x2000c980
   13010:	00021eaa 	.word	0x00021eaa

00013014 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   13014:	2210      	movs	r2, #16
{
   13016:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   13018:	4906      	ldr	r1, [pc, #24]	; (13034 <db_hash_store+0x20>)
   1301a:	4807      	ldr	r0, [pc, #28]	; (13038 <db_hash_store+0x24>)
   1301c:	f7f8 fbd4 	bl	b7c8 <settings_save_one>
	if (err) {
   13020:	4602      	mov	r2, r0
   13022:	b128      	cbz	r0, 13030 <db_hash_store+0x1c>
}
   13024:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   13028:	2145      	movs	r1, #69	; 0x45
   1302a:	4804      	ldr	r0, [pc, #16]	; (1303c <db_hash_store+0x28>)
   1302c:	f007 bb1e 	b.w	1a66c <printk>
}
   13030:	bd08      	pop	{r3, pc}
   13032:	bf00      	nop
   13034:	2000c970 	.word	0x2000c970
   13038:	00021ed0 	.word	0x00021ed0
   1303c:	00021ed8 	.word	0x00021ed8

00013040 <find_cf_cfg>:
{
   13040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13042:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   13044:	2600      	movs	r6, #0
   13046:	4d0e      	ldr	r5, [pc, #56]	; (13080 <find_cf_cfg+0x40>)
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   13048:	462f      	mov	r7, r5
		if (!conn) {
   1304a:	1c6a      	adds	r2, r5, #1
   1304c:	b954      	cbnz	r4, 13064 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1304e:	4669      	mov	r1, sp
   13050:	4610      	mov	r0, r2
   13052:	9400      	str	r4, [sp, #0]
   13054:	f8cd 4003 	str.w	r4, [sp, #3]
   13058:	f009 fd07 	bl	1ca6a <bt_addr_le_cmp>
   1305c:	b940      	cbnz	r0, 13070 <find_cf_cfg+0x30>
}
   1305e:	4638      	mov	r0, r7
   13060:	b003      	add	sp, #12
   13062:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13064:	4620      	mov	r0, r4
   13066:	7829      	ldrb	r1, [r5, #0]
   13068:	f008 ff9f 	bl	1bfaa <bt_conn_is_peer_addr_le>
   1306c:	2800      	cmp	r0, #0
   1306e:	d1f6      	bne.n	1305e <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   13070:	3601      	adds	r6, #1
   13072:	2e14      	cmp	r6, #20
   13074:	f105 0510 	add.w	r5, r5, #16
   13078:	d1e6      	bne.n	13048 <find_cf_cfg+0x8>
	return NULL;
   1307a:	2700      	movs	r7, #0
   1307c:	e7ef      	b.n	1305e <find_cf_cfg+0x1e>
   1307e:	bf00      	nop
   13080:	2000ab94 	.word	0x2000ab94

00013084 <find_sc_cfg>:
{
   13084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13086:	4606      	mov	r6, r0
   13088:	460f      	mov	r7, r1
   1308a:	2400      	movs	r4, #0
   1308c:	4d09      	ldr	r5, [pc, #36]	; (130b4 <find_sc_cfg+0x30>)
		if (id == sc_cfg[i].id &&
   1308e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   13092:	42b3      	cmp	r3, r6
   13094:	d107      	bne.n	130a6 <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   13096:	4639      	mov	r1, r7
   13098:	4628      	mov	r0, r5
   1309a:	f009 fce6 	bl	1ca6a <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   1309e:	b910      	cbnz	r0, 130a6 <find_sc_cfg+0x22>
			return &sc_cfg[i];
   130a0:	4805      	ldr	r0, [pc, #20]	; (130b8 <find_sc_cfg+0x34>)
   130a2:	4420      	add	r0, r4
}
   130a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   130a6:	340c      	adds	r4, #12
   130a8:	2cf0      	cmp	r4, #240	; 0xf0
   130aa:	f105 050c 	add.w	r5, r5, #12
   130ae:	d1ee      	bne.n	1308e <find_sc_cfg+0xa>
	return NULL;
   130b0:	2000      	movs	r0, #0
   130b2:	e7f7      	b.n	130a4 <find_sc_cfg+0x20>
   130b4:	2000c169 	.word	0x2000c169
   130b8:	2000c168 	.word	0x2000c168

000130bc <gatt_sub_find>:
{
   130bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   130be:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   130c0:	2600      	movs	r6, #0
   130c2:	4d0e      	ldr	r5, [pc, #56]	; (130fc <gatt_sub_find+0x40>)
		struct gatt_sub *sub = &subscriptions[i];
   130c4:	462f      	mov	r7, r5
		if (!conn) {
   130c6:	1c6a      	adds	r2, r5, #1
   130c8:	b954      	cbnz	r4, 130e0 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   130ca:	4669      	mov	r1, sp
   130cc:	4610      	mov	r0, r2
   130ce:	9400      	str	r4, [sp, #0]
   130d0:	f8cd 4003 	str.w	r4, [sp, #3]
   130d4:	f009 fcc9 	bl	1ca6a <bt_addr_le_cmp>
   130d8:	b940      	cbnz	r0, 130ec <gatt_sub_find+0x30>
}
   130da:	4638      	mov	r0, r7
   130dc:	b003      	add	sp, #12
   130de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   130e0:	4620      	mov	r0, r4
   130e2:	7829      	ldrb	r1, [r5, #0]
   130e4:	f008 ff61 	bl	1bfaa <bt_conn_is_peer_addr_le>
   130e8:	2800      	cmp	r0, #0
   130ea:	d1f6      	bne.n	130da <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   130ec:	3601      	adds	r6, #1
   130ee:	2e14      	cmp	r6, #20
   130f0:	f105 0510 	add.w	r5, r5, #16
   130f4:	d1e6      	bne.n	130c4 <gatt_sub_find+0x8>
	return NULL;
   130f6:	2700      	movs	r7, #0
   130f8:	e7ef      	b.n	130da <gatt_sub_find+0x1e>
   130fa:	bf00      	nop
   130fc:	2000adcc 	.word	0x2000adcc

00013100 <find_cf_cfg_by_addr>:
{
   13100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13102:	4606      	mov	r6, r0
   13104:	460f      	mov	r7, r1
   13106:	2400      	movs	r4, #0
   13108:	4d0a      	ldr	r5, [pc, #40]	; (13134 <find_cf_cfg_by_addr+0x34>)
			if (id == cf_cfg[i].id &&
   1310a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1310e:	42b3      	cmp	r3, r6
   13110:	d107      	bne.n	13122 <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   13112:	4629      	mov	r1, r5
   13114:	4638      	mov	r0, r7
   13116:	f009 fca8 	bl	1ca6a <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   1311a:	b910      	cbnz	r0, 13122 <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   1311c:	4806      	ldr	r0, [pc, #24]	; (13138 <find_cf_cfg_by_addr+0x38>)
   1311e:	4420      	add	r0, r4
}
   13120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   13122:	3410      	adds	r4, #16
   13124:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
   13128:	f105 0510 	add.w	r5, r5, #16
   1312c:	d1ed      	bne.n	1310a <find_cf_cfg_by_addr+0xa>
	return NULL;
   1312e:	2000      	movs	r0, #0
   13130:	e7f6      	b.n	13120 <find_cf_cfg_by_addr+0x20>
   13132:	bf00      	nop
   13134:	2000ab95 	.word	0x2000ab95
   13138:	2000ab94 	.word	0x2000ab94

0001313c <bt_gatt_attr_write_ccc>:
{
   1313c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13140:	461f      	mov	r7, r3
   13142:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   13146:	4604      	mov	r4, r0
   13148:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1314a:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   1314e:	2b00      	cmp	r3, #0
   13150:	d141      	bne.n	131d6 <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   13152:	1e7b      	subs	r3, r7, #1
   13154:	2b01      	cmp	r3, #1
   13156:	d841      	bhi.n	131dc <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   13158:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1315a:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1315c:	4649      	mov	r1, r9
   1315e:	bf14      	ite	ne
   13160:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   13162:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   13164:	f009 fc84 	bl	1ca70 <find_ccc_cfg>
	if (!cfg) {
   13168:	4605      	mov	r5, r0
   1316a:	b9b0      	cbnz	r0, 1319a <bt_gatt_attr_write_ccc+0x5e>
		if (!value) {
   1316c:	b916      	cbnz	r6, 13174 <bt_gatt_attr_write_ccc+0x38>
			return len;
   1316e:	4638      	mov	r0, r7
}
   13170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   13174:	4649      	mov	r1, r9
   13176:	f009 fc7b 	bl	1ca70 <find_ccc_cfg>
		if (!cfg) {
   1317a:	4605      	mov	r5, r0
   1317c:	b930      	cbnz	r0, 1318c <bt_gatt_attr_write_ccc+0x50>
			BT_WARN("No space to store CCC cfg");
   1317e:	4819      	ldr	r0, [pc, #100]	; (131e4 <bt_gatt_attr_write_ccc+0xa8>)
   13180:	2157      	movs	r1, #87	; 0x57
   13182:	f007 fa73 	bl	1a66c <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   13186:	f06f 0010 	mvn.w	r0, #16
   1318a:	e7f1      	b.n	13170 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1318c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   13190:	3001      	adds	r0, #1
   13192:	f009 fca6 	bl	1cae2 <bt_addr_le_copy>
		cfg->id = conn->id;
   13196:	7a23      	ldrb	r3, [r4, #8]
   13198:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   1319a:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
   1319e:	b973      	cbnz	r3, 131be <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   131a0:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
	cfg->value = value;
   131a4:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   131a6:	42b3      	cmp	r3, r6
   131a8:	d003      	beq.n	131b2 <bt_gatt_attr_write_ccc+0x76>
		gatt_ccc_changed(attr, ccc);
   131aa:	4649      	mov	r1, r9
   131ac:	4640      	mov	r0, r8
   131ae:	f009 fbd5 	bl	1c95c <gatt_ccc_changed>
	if (!value) {
   131b2:	2e00      	cmp	r6, #0
   131b4:	d1db      	bne.n	1316e <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
   131b6:	4628      	mov	r0, r5
   131b8:	f009 fc96 	bl	1cae8 <clear_ccc_cfg>
   131bc:	e7d7      	b.n	1316e <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   131be:	4632      	mov	r2, r6
   131c0:	4641      	mov	r1, r8
   131c2:	4620      	mov	r0, r4
   131c4:	4798      	blx	r3
		if (write < 0) {
   131c6:	2800      	cmp	r0, #0
   131c8:	dbd2      	blt.n	13170 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   131ca:	1e44      	subs	r4, r0, #1
   131cc:	2c01      	cmp	r4, #1
   131ce:	d9e7      	bls.n	131a0 <bt_gatt_attr_write_ccc+0x64>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   131d0:	f06f 000d 	mvn.w	r0, #13
   131d4:	e7cc      	b.n	13170 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   131d6:	f06f 0006 	mvn.w	r0, #6
   131da:	e7c9      	b.n	13170 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   131dc:	f06f 000c 	mvn.w	r0, #12
   131e0:	e7c6      	b.n	13170 <bt_gatt_attr_write_ccc+0x34>
   131e2:	bf00      	nop
   131e4:	00021f03 	.word	0x00021f03

000131e8 <cf_write>:
{
   131e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   131ec:	461f      	mov	r7, r3
   131ee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   131f2:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
   131f4:	2b01      	cmp	r3, #1
{
   131f6:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   131f8:	d845      	bhi.n	13286 <cf_write+0x9e>
	if (offset + len > sizeof(cfg->data)) {
   131fa:	443b      	add	r3, r7
   131fc:	2b01      	cmp	r3, #1
   131fe:	463d      	mov	r5, r7
   13200:	dc44      	bgt.n	1328c <cf_write+0xa4>
	cfg = find_cf_cfg(conn);
   13202:	f7ff ff1d 	bl	13040 <find_cf_cfg>
	if (!cfg) {
   13206:	4604      	mov	r4, r0
   13208:	b918      	cbnz	r0, 13212 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   1320a:	f7ff ff19 	bl	13040 <find_cf_cfg>
	if (!cfg) {
   1320e:	4604      	mov	r4, r0
   13210:	b1d8      	cbz	r0, 1324a <cf_write+0x62>
   13212:	4632      	mov	r2, r6
   13214:	f104 0008 	add.w	r0, r4, #8
   13218:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   1321c:	4596      	cmp	lr, r2
   1321e:	d11d      	bne.n	1325c <cf_write+0x74>
	for (i = 0U; i < len && i < last_byte; i++) {
   13220:	b12f      	cbz	r7, 1322e <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   13222:	7833      	ldrb	r3, [r6, #0]
   13224:	7a22      	ldrb	r2, [r4, #8]
   13226:	f003 0307 	and.w	r3, r3, #7
   1322a:	4313      	orrs	r3, r2
   1322c:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1322e:	f108 0188 	add.w	r1, r8, #136	; 0x88
   13232:	1c60      	adds	r0, r4, #1
   13234:	f009 fc55 	bl	1cae2 <bt_addr_le_copy>
	cfg->id = conn->id;
   13238:	4620      	mov	r0, r4
   1323a:	f898 3008 	ldrb.w	r3, [r8, #8]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1323e:	2101      	movs	r1, #1
   13240:	f800 3b0c 	strb.w	r3, [r0], #12
   13244:	f009 fc5e 	bl	1cb04 <atomic_or>
}
   13248:	e005      	b.n	13256 <cf_write+0x6e>
		BT_WARN("No space to store Client Supported Features");
   1324a:	2157      	movs	r1, #87	; 0x57
   1324c:	4812      	ldr	r0, [pc, #72]	; (13298 <cf_write+0xb0>)
   1324e:	f007 fa0d 	bl	1a66c <printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   13252:	f06f 0510 	mvn.w	r5, #16
}
   13256:	4628      	mov	r0, r5
   13258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   1325c:	2300      	movs	r3, #0
   1325e:	f812 1b01 	ldrb.w	r1, [r2], #1
   13262:	f810 cb01 	ldrb.w	ip, [r0], #1
   13266:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
   1326a:	fa21 f903 	lsr.w	r9, r1, r3
   1326e:	f019 0f01 	tst.w	r9, #1
   13272:	d004      	beq.n	1327e <cf_write+0x96>
   13274:	fa2c f903 	lsr.w	r9, ip, r3
   13278:	f019 0f01 	tst.w	r9, #1
   1327c:	d109      	bne.n	13292 <cf_write+0xaa>
		for (bit = 0U; bit <= last_bit; bit++) {
   1327e:	3301      	adds	r3, #1
   13280:	2b03      	cmp	r3, #3
   13282:	d1f2      	bne.n	1326a <cf_write+0x82>
   13284:	e7ca      	b.n	1321c <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   13286:	f06f 0506 	mvn.w	r5, #6
   1328a:	e7e4      	b.n	13256 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1328c:	f06f 050c 	mvn.w	r5, #12
   13290:	e7e1      	b.n	13256 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   13292:	f06f 0512 	mvn.w	r5, #18
   13296:	e7de      	b.n	13256 <cf_write+0x6e>
   13298:	00021f22 	.word	0x00021f22

0001329c <sc_store>:
{
   1329c:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   1329e:	4605      	mov	r5, r0
   132a0:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   132a4:	4604      	mov	r4, r0
   132a6:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   132a8:	b1ca      	cbz	r2, 132de <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   132aa:	ae02      	add	r6, sp, #8
   132ac:	2104      	movs	r1, #4
   132ae:	4630      	mov	r0, r6
   132b0:	f007 f942 	bl	1a538 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   132b4:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   132b6:	462b      	mov	r3, r5
   132b8:	2124      	movs	r1, #36	; 0x24
   132ba:	4a0a      	ldr	r2, [pc, #40]	; (132e4 <sc_store+0x48>)
   132bc:	a803      	add	r0, sp, #12
   132be:	f7fb f8bb 	bl	e438 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   132c2:	2204      	movs	r2, #4
   132c4:	f104 0108 	add.w	r1, r4, #8
   132c8:	a803      	add	r0, sp, #12
   132ca:	f7f8 fa7d 	bl	b7c8 <settings_save_one>
	if (err) {
   132ce:	4602      	mov	r2, r0
   132d0:	b118      	cbz	r0, 132da <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   132d2:	2145      	movs	r1, #69	; 0x45
   132d4:	4804      	ldr	r0, [pc, #16]	; (132e8 <sc_store+0x4c>)
   132d6:	f007 f9c9 	bl	1a66c <printk>
}
   132da:	b00c      	add	sp, #48	; 0x30
   132dc:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   132de:	9200      	str	r2, [sp, #0]
   132e0:	e7e9      	b.n	132b6 <sc_store+0x1a>
   132e2:	bf00      	nop
   132e4:	00022272 	.word	0x00022272
   132e8:	00021f53 	.word	0x00021f53

000132ec <sc_save>:
{
   132ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   132f0:	4680      	mov	r8, r0
   132f2:	460f      	mov	r7, r1
   132f4:	4616      	mov	r6, r2
   132f6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   132f8:	f7ff fec4 	bl	13084 <find_sc_cfg>
	if (!cfg) {
   132fc:	4604      	mov	r4, r0
   132fe:	b998      	cbnz	r0, 13328 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   13300:	4669      	mov	r1, sp
   13302:	9000      	str	r0, [sp, #0]
   13304:	f8cd 0003 	str.w	r0, [sp, #3]
   13308:	f7ff febc 	bl	13084 <find_sc_cfg>
		if (!cfg) {
   1330c:	4604      	mov	r4, r0
   1330e:	b930      	cbnz	r0, 1331e <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   13310:	2145      	movs	r1, #69	; 0x45
   13312:	4813      	ldr	r0, [pc, #76]	; (13360 <sc_save+0x74>)
   13314:	f007 f9aa 	bl	1a66c <printk>
}
   13318:	b002      	add	sp, #8
   1331a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   1331e:	4639      	mov	r1, r7
		cfg->id = id;
   13320:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   13324:	f009 fbdd 	bl	1cae2 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   13328:	8922      	ldrh	r2, [r4, #8]
   1332a:	8963      	ldrh	r3, [r4, #10]
   1332c:	b97a      	cbnz	r2, 1334e <sc_save+0x62>
   1332e:	b983      	cbnz	r3, 13352 <sc_save+0x66>
		cfg->data.start = start;
   13330:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   13332:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   13334:	4621      	mov	r1, r4
   13336:	f811 0b01 	ldrb.w	r0, [r1], #1
   1333a:	f008 fda2 	bl	1be82 <bt_addr_le_is_bonded>
   1333e:	2800      	cmp	r0, #0
   13340:	d0ea      	beq.n	13318 <sc_save+0x2c>
		sc_store(cfg);
   13342:	4620      	mov	r0, r4
}
   13344:	b002      	add	sp, #8
   13346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1334a:	f7ff bfa7 	b.w	1329c <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1334e:	4296      	cmp	r6, r2
   13350:	d302      	bcc.n	13358 <sc_save+0x6c>
   13352:	429d      	cmp	r5, r3
   13354:	d8ed      	bhi.n	13332 <sc_save+0x46>
   13356:	e7df      	b.n	13318 <sc_save+0x2c>
	if (*end < new_end) {
   13358:	429d      	cmp	r5, r3
		*start = new_start;
   1335a:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1335c:	d9ea      	bls.n	13334 <sc_save+0x48>
   1335e:	e7e8      	b.n	13332 <sc_save+0x46>
   13360:	00021f74 	.word	0x00021f74

00013364 <sc_set>:
{
   13364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13368:	460e      	mov	r6, r1
   1336a:	4690      	mov	r8, r2
   1336c:	4699      	mov	r9, r3
	if (!name) {
   1336e:	4604      	mov	r4, r0
{
   13370:	b087      	sub	sp, #28
	if (!name) {
   13372:	b948      	cbnz	r0, 13388 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   13374:	2145      	movs	r1, #69	; 0x45
   13376:	4829      	ldr	r0, [pc, #164]	; (1341c <sc_set+0xb8>)
   13378:	f007 f978 	bl	1a66c <printk>
		return -EINVAL;
   1337c:	f06f 0515 	mvn.w	r5, #21
}
   13380:	4628      	mov	r0, r5
   13382:	b007      	add	sp, #28
   13384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   13388:	a902      	add	r1, sp, #8
   1338a:	f008 fc04 	bl	1bb96 <bt_settings_decode_key>
	if (err) {
   1338e:	4605      	mov	r5, r0
   13390:	b128      	cbz	r0, 1339e <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   13392:	4622      	mov	r2, r4
   13394:	2145      	movs	r1, #69	; 0x45
   13396:	4822      	ldr	r0, [pc, #136]	; (13420 <sc_set+0xbc>)
   13398:	f007 f968 	bl	1a66c <printk>
   1339c:	e7ee      	b.n	1337c <sc_set+0x18>
	settings_name_next(name, &next);
   1339e:	4620      	mov	r0, r4
   133a0:	a901      	add	r1, sp, #4
   133a2:	f007 fc82 	bl	1acaa <settings_name_next>
	if (!next) {
   133a6:	9801      	ldr	r0, [sp, #4]
   133a8:	b1d8      	cbz	r0, 133e2 <sc_set+0x7e>
		id = strtol(next, NULL, 10);
   133aa:	220a      	movs	r2, #10
   133ac:	4629      	mov	r1, r5
   133ae:	f008 fad3 	bl	1b958 <strtol>
   133b2:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   133b4:	4638      	mov	r0, r7
   133b6:	a902      	add	r1, sp, #8
   133b8:	f7ff fe64 	bl	13084 <find_sc_cfg>
	if (!cfg && len_rd) {
   133bc:	4604      	mov	r4, r0
   133be:	bb28      	cbnz	r0, 1340c <sc_set+0xa8>
   133c0:	2e00      	cmp	r6, #0
   133c2:	d0dd      	beq.n	13380 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   133c4:	a904      	add	r1, sp, #16
   133c6:	9004      	str	r0, [sp, #16]
   133c8:	f8cd 0013 	str.w	r0, [sp, #19]
   133cc:	f7ff fe5a 	bl	13084 <find_sc_cfg>
		if (!cfg) {
   133d0:	4604      	mov	r4, r0
   133d2:	b940      	cbnz	r0, 133e6 <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
   133d4:	2145      	movs	r1, #69	; 0x45
   133d6:	4813      	ldr	r0, [pc, #76]	; (13424 <sc_set+0xc0>)
   133d8:	f007 f948 	bl	1a66c <printk>
			return -ENOMEM;
   133dc:	f06f 050b 	mvn.w	r5, #11
   133e0:	e7ce      	b.n	13380 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
   133e2:	462f      	mov	r7, r5
   133e4:	e7e6      	b.n	133b4 <sc_set+0x50>
		cfg->id = id;
   133e6:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   133ea:	a902      	add	r1, sp, #8
   133ec:	f009 fb79 	bl	1cae2 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   133f0:	f104 0108 	add.w	r1, r4, #8
   133f4:	2204      	movs	r2, #4
   133f6:	4648      	mov	r0, r9
   133f8:	47c0      	blx	r8
		if (len < 0) {
   133fa:	1e04      	subs	r4, r0, #0
   133fc:	dac0      	bge.n	13380 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   133fe:	4622      	mov	r2, r4
   13400:	2145      	movs	r1, #69	; 0x45
   13402:	4809      	ldr	r0, [pc, #36]	; (13428 <sc_set+0xc4>)
   13404:	f007 f932 	bl	1a66c <printk>
			return len;
   13408:	4625      	mov	r5, r4
   1340a:	e7b9      	b.n	13380 <sc_set+0x1c>
	if (len_rd) {
   1340c:	2e00      	cmp	r6, #0
   1340e:	d1ef      	bne.n	133f0 <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
   13410:	220c      	movs	r2, #12
   13412:	4631      	mov	r1, r6
   13414:	f008 fb99 	bl	1bb4a <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   13418:	e7b2      	b.n	13380 <sc_set+0x1c>
   1341a:	bf00      	nop
   1341c:	00020ea1 	.word	0x00020ea1
   13420:	00021f98 	.word	0x00021f98
   13424:	00021fb9 	.word	0x00021fb9
   13428:	00021eaa 	.word	0x00021eaa

0001342c <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   1342c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13430:	4606      	mov	r6, r0
   13432:	4688      	mov	r8, r1
   13434:	4617      	mov	r7, r2
	if (params) {
   13436:	461c      	mov	r4, r3
   13438:	b31b      	cbz	r3, 13482 <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1343a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1343e:	2100      	movs	r1, #0
   13440:	f7ff fc3a 	bl	12cb8 <bt_att_req_alloc>
		if (!req) {
   13444:	4605      	mov	r5, r0
   13446:	b920      	cbnz	r0, 13452 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   13448:	f06f 040b 	mvn.w	r4, #11
}
   1344c:	4620      	mov	r0, r4
   1344e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   13452:	2300      	movs	r3, #0
		req->user_data = params;
   13454:	6144      	str	r4, [r0, #20]
		err = bt_att_req_send(conn, req);
   13456:	4601      	mov	r1, r0
		req->buf = buf;
   13458:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   1345c:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   1345e:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   13460:	4630      	mov	r0, r6
   13462:	f7ff fd55 	bl	12f10 <bt_att_req_send>
		if (err) {
   13466:	4604      	mov	r4, r0
   13468:	2800      	cmp	r0, #0
   1346a:	d0ef      	beq.n	1344c <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   1346c:	4628      	mov	r0, r5
   1346e:	f7ff fc39 	bl	12ce4 <bt_att_req_free>
	if (err) {
   13472:	2c00      	cmp	r4, #0
   13474:	d0ea      	beq.n	1344c <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
   13476:	4622      	mov	r2, r4
   13478:	2145      	movs	r1, #69	; 0x45
   1347a:	4804      	ldr	r0, [pc, #16]	; (1348c <gatt_send.constprop.0+0x60>)
   1347c:	f007 f8f6 	bl	1a66c <printk>
   13480:	e7e4      	b.n	1344c <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
   13482:	461a      	mov	r2, r3
   13484:	f7ff fcdc 	bl	12e40 <bt_att_send>
   13488:	4604      	mov	r4, r0
   1348a:	e7f2      	b.n	13472 <gatt_send.constprop.0+0x46>
   1348c:	00021fe0 	.word	0x00021fe0

00013490 <cf_set>:
{
   13490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13494:	4689      	mov	r9, r1
   13496:	4617      	mov	r7, r2
   13498:	4698      	mov	r8, r3
	if (!name) {
   1349a:	4605      	mov	r5, r0
{
   1349c:	b085      	sub	sp, #20
	if (!name) {
   1349e:	b948      	cbnz	r0, 134b4 <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
   134a0:	2145      	movs	r1, #69	; 0x45
   134a2:	4826      	ldr	r0, [pc, #152]	; (1353c <cf_set+0xac>)
   134a4:	f007 f8e2 	bl	1a66c <printk>
		return -EINVAL;
   134a8:	f06f 0415 	mvn.w	r4, #21
}
   134ac:	4620      	mov	r0, r4
   134ae:	b005      	add	sp, #20
   134b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   134b4:	a902      	add	r1, sp, #8
   134b6:	f008 fb6e 	bl	1bb96 <bt_settings_decode_key>
	if (err) {
   134ba:	4604      	mov	r4, r0
   134bc:	b128      	cbz	r0, 134ca <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   134be:	462a      	mov	r2, r5
   134c0:	2145      	movs	r1, #69	; 0x45
   134c2:	481f      	ldr	r0, [pc, #124]	; (13540 <cf_set+0xb0>)
   134c4:	f007 f8d2 	bl	1a66c <printk>
   134c8:	e7ee      	b.n	134a8 <cf_set+0x18>
	settings_name_next(name, &next);
   134ca:	4628      	mov	r0, r5
   134cc:	a901      	add	r1, sp, #4
   134ce:	f007 fbec 	bl	1acaa <settings_name_next>
	if (!next) {
   134d2:	9801      	ldr	r0, [sp, #4]
   134d4:	b1a8      	cbz	r0, 13502 <cf_set+0x72>
		id = strtol(next, NULL, 10);
   134d6:	220a      	movs	r2, #10
   134d8:	4621      	mov	r1, r4
   134da:	f008 fa3d 	bl	1b958 <strtol>
   134de:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   134e0:	4630      	mov	r0, r6
   134e2:	a902      	add	r1, sp, #8
   134e4:	f7ff fe0c 	bl	13100 <find_cf_cfg_by_addr>
	if (!cfg) {
   134e8:	4605      	mov	r5, r0
   134ea:	b988      	cbnz	r0, 13510 <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
   134ec:	f7ff fda8 	bl	13040 <find_cf_cfg>
		if (!cfg) {
   134f0:	4605      	mov	r5, r0
   134f2:	b940      	cbnz	r0, 13506 <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
   134f4:	2145      	movs	r1, #69	; 0x45
   134f6:	4813      	ldr	r0, [pc, #76]	; (13544 <cf_set+0xb4>)
   134f8:	f007 f8b8 	bl	1a66c <printk>
			return -ENOMEM;
   134fc:	f06f 040b 	mvn.w	r4, #11
   13500:	e7d4      	b.n	134ac <cf_set+0x1c>
		id = BT_ID_DEFAULT;
   13502:	4626      	mov	r6, r4
   13504:	e7ec      	b.n	134e0 <cf_set+0x50>
		cfg->id = id;
   13506:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1350a:	a902      	add	r1, sp, #8
   1350c:	f009 fae9 	bl	1cae2 <bt_addr_le_copy>
	if (len_rd) {
   13510:	f1b9 0f00 	cmp.w	r9, #0
   13514:	d00d      	beq.n	13532 <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   13516:	f105 0108 	add.w	r1, r5, #8
   1351a:	2201      	movs	r2, #1
   1351c:	4640      	mov	r0, r8
   1351e:	47b8      	blx	r7
		if (len < 0) {
   13520:	1e05      	subs	r5, r0, #0
   13522:	dac3      	bge.n	134ac <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   13524:	462a      	mov	r2, r5
   13526:	2145      	movs	r1, #69	; 0x45
   13528:	4807      	ldr	r0, [pc, #28]	; (13548 <cf_set+0xb8>)
   1352a:	f007 f89f 	bl	1a66c <printk>
			return len;
   1352e:	462c      	mov	r4, r5
   13530:	e7bc      	b.n	134ac <cf_set+0x1c>
		clear_cf_cfg(cfg);
   13532:	4628      	mov	r0, r5
   13534:	f009 fb1b 	bl	1cb6e <clear_cf_cfg>
   13538:	e7b8      	b.n	134ac <cf_set+0x1c>
   1353a:	bf00      	nop
   1353c:	00020ea1 	.word	0x00020ea1
   13540:	00021f98 	.word	0x00021f98
   13544:	00021fff 	.word	0x00021fff
   13548:	00021eaa 	.word	0x00021eaa

0001354c <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1354c:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1354e:	6881      	ldr	r1, [r0, #8]
{
   13550:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13552:	4a07      	ldr	r2, [pc, #28]	; (13570 <remove_peer_from_attr+0x24>)
   13554:	4291      	cmp	r1, r2
   13556:	d109      	bne.n	1356c <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   13558:	791a      	ldrb	r2, [r3, #4]
   1355a:	6819      	ldr	r1, [r3, #0]
   1355c:	68c0      	ldr	r0, [r0, #12]
   1355e:	f009 faa6 	bl	1caae <ccc_find_cfg>
	if (cfg) {
   13562:	b118      	cbz	r0, 1356c <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   13564:	220a      	movs	r2, #10
   13566:	2100      	movs	r1, #0
   13568:	f008 faef 	bl	1bb4a <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1356c:	2001      	movs	r0, #1
   1356e:	bd08      	pop	{r3, pc}
   13570:	0001313d 	.word	0x0001313d

00013574 <ccc_load>:
{
   13574:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13576:	4b21      	ldr	r3, [pc, #132]	; (135fc <ccc_load+0x88>)
{
   13578:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1357a:	6882      	ldr	r2, [r0, #8]
   1357c:	429a      	cmp	r2, r3
   1357e:	d002      	beq.n	13586 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   13580:	2001      	movs	r0, #1
}
   13582:	b002      	add	sp, #8
   13584:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   13586:	68a3      	ldr	r3, [r4, #8]
   13588:	68c6      	ldr	r6, [r0, #12]
   1358a:	b94b      	cbnz	r3, 135a0 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   1358c:	4630      	mov	r0, r6
   1358e:	7922      	ldrb	r2, [r4, #4]
   13590:	6821      	ldr	r1, [r4, #0]
   13592:	f009 fa8c 	bl	1caae <ccc_find_cfg>
	if (!cfg) {
   13596:	2800      	cmp	r0, #0
   13598:	d0f2      	beq.n	13580 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   1359a:	f009 faa5 	bl	1cae8 <clear_ccc_cfg>
   1359e:	e7ef      	b.n	13580 <ccc_load+0xc>
	} else if (!load->count) {
   135a0:	68e0      	ldr	r0, [r4, #12]
   135a2:	2800      	cmp	r0, #0
   135a4:	d0ed      	beq.n	13582 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   135a6:	881b      	ldrh	r3, [r3, #0]
   135a8:	4299      	cmp	r1, r3
   135aa:	d00a      	beq.n	135c2 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   135ac:	d9e8      	bls.n	13580 <ccc_load+0xc>
	load->count--;
   135ae:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   135b0:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   135b2:	3801      	subs	r0, #1
	load->entry++;
   135b4:	3304      	adds	r3, #4
	load->count--;
   135b6:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   135b8:	3800      	subs	r0, #0
   135ba:	bf18      	it	ne
   135bc:	2001      	movne	r0, #1
	load->entry++;
   135be:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   135c0:	e7df      	b.n	13582 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   135c2:	4630      	mov	r0, r6
   135c4:	7922      	ldrb	r2, [r4, #4]
   135c6:	6821      	ldr	r1, [r4, #0]
   135c8:	f009 fa71 	bl	1caae <ccc_find_cfg>
	if (!cfg) {
   135cc:	4605      	mov	r5, r0
   135ce:	b980      	cbnz	r0, 135f2 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   135d0:	9000      	str	r0, [sp, #0]
   135d2:	4602      	mov	r2, r0
   135d4:	f8cd 0003 	str.w	r0, [sp, #3]
   135d8:	4669      	mov	r1, sp
   135da:	4630      	mov	r0, r6
   135dc:	f009 fa67 	bl	1caae <ccc_find_cfg>
		if (!cfg) {
   135e0:	4605      	mov	r5, r0
   135e2:	2800      	cmp	r0, #0
   135e4:	d0e3      	beq.n	135ae <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   135e6:	6821      	ldr	r1, [r4, #0]
   135e8:	3001      	adds	r0, #1
   135ea:	f009 fa7a 	bl	1cae2 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   135ee:	7923      	ldrb	r3, [r4, #4]
   135f0:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   135f2:	68a3      	ldr	r3, [r4, #8]
   135f4:	885b      	ldrh	r3, [r3, #2]
   135f6:	812b      	strh	r3, [r5, #8]
   135f8:	e7d9      	b.n	135ae <ccc_load+0x3a>
   135fa:	bf00      	nop
   135fc:	0001313d 	.word	0x0001313d

00013600 <ccc_save>:
{
   13600:	b538      	push	{r3, r4, r5, lr}
   13602:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   13604:	4b0b      	ldr	r3, [pc, #44]	; (13634 <ccc_save+0x34>)
   13606:	6882      	ldr	r2, [r0, #8]
{
   13608:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1360a:	429a      	cmp	r2, r3
   1360c:	d10f      	bne.n	1362e <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1360e:	7922      	ldrb	r2, [r4, #4]
   13610:	6821      	ldr	r1, [r4, #0]
   13612:	68c0      	ldr	r0, [r0, #12]
   13614:	f009 fa4b 	bl	1caae <ccc_find_cfg>
	if (!cfg) {
   13618:	b148      	cbz	r0, 1362e <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1361a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   1361e:	8901      	ldrh	r1, [r0, #8]
   13620:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   13624:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   13626:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   13628:	8151      	strh	r1, [r2, #10]
	save->count++;
   1362a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1362e:	2001      	movs	r0, #1
   13630:	bd38      	pop	{r3, r4, r5, pc}
   13632:	bf00      	nop
   13634:	0001313d 	.word	0x0001313d

00013638 <gatt_indicate>:
{
   13638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1363c:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
   1363e:	8a92      	ldrh	r2, [r2, #20]
{
   13640:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   13642:	3202      	adds	r2, #2
   13644:	211d      	movs	r1, #29
{
   13646:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   13648:	f7ff f8b6 	bl	127b8 <bt_att_create_pdu>
	if (!buf) {
   1364c:	4605      	mov	r5, r0
   1364e:	b1e8      	cbz	r0, 1368c <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
   13650:	f100 0808 	add.w	r8, r0, #8
   13654:	2102      	movs	r1, #2
   13656:	4640      	mov	r0, r8
   13658:	f002 f8a8 	bl	157ac <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1365c:	4606      	mov	r6, r0
   1365e:	8aa1      	ldrh	r1, [r4, #20]
   13660:	f826 9b02 	strh.w	r9, [r6], #2
   13664:	4640      	mov	r0, r8
   13666:	f002 f8a1 	bl	157ac <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1366a:	4630      	mov	r0, r6
   1366c:	8aa2      	ldrh	r2, [r4, #20]
   1366e:	6921      	ldr	r1, [r4, #16]
   13670:	f008 fa40 	bl	1baf4 <memcpy>
	if (!params->func) {
   13674:	68a3      	ldr	r3, [r4, #8]
   13676:	b933      	cbnz	r3, 13686 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
   13678:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   1367a:	4629      	mov	r1, r5
   1367c:	4638      	mov	r0, r7
}
   1367e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   13682:	f7ff bed3 	b.w	1342c <gatt_send.constprop.0>
   13686:	4623      	mov	r3, r4
   13688:	4a04      	ldr	r2, [pc, #16]	; (1369c <gatt_indicate+0x64>)
   1368a:	e7f6      	b.n	1367a <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
   1368c:	2157      	movs	r1, #87	; 0x57
   1368e:	4804      	ldr	r0, [pc, #16]	; (136a0 <gatt_indicate+0x68>)
   13690:	f006 ffec 	bl	1a66c <printk>
}
   13694:	f06f 000b 	mvn.w	r0, #11
   13698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1369c:	0001c98f 	.word	0x0001c98f
   136a0:	00022026 	.word	0x00022026

000136a4 <gatt_notify>:
{
   136a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   136a8:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   136aa:	8992      	ldrh	r2, [r2, #12]
{
   136ac:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   136ae:	3202      	adds	r2, #2
   136b0:	211b      	movs	r1, #27
{
   136b2:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   136b4:	f7ff f880 	bl	127b8 <bt_att_create_pdu>
	if (!buf) {
   136b8:	4605      	mov	r5, r0
   136ba:	b1c8      	cbz	r0, 136f0 <gatt_notify+0x4c>
   136bc:	f100 0908 	add.w	r9, r0, #8
   136c0:	2102      	movs	r1, #2
   136c2:	4648      	mov	r0, r9
   136c4:	f002 f872 	bl	157ac <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   136c8:	4606      	mov	r6, r0
   136ca:	89a1      	ldrh	r1, [r4, #12]
   136cc:	f826 8b02 	strh.w	r8, [r6], #2
   136d0:	4648      	mov	r0, r9
   136d2:	f002 f86b 	bl	157ac <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   136d6:	89a2      	ldrh	r2, [r4, #12]
   136d8:	68a1      	ldr	r1, [r4, #8]
   136da:	4630      	mov	r0, r6
   136dc:	f008 fa0a 	bl	1baf4 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   136e0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   136e4:	4629      	mov	r1, r5
   136e6:	4638      	mov	r0, r7
}
   136e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   136ec:	f7ff bba8 	b.w	12e40 <bt_att_send>
		BT_WARN("No buffer available to send notification");
   136f0:	2157      	movs	r1, #87	; 0x57
   136f2:	4803      	ldr	r0, [pc, #12]	; (13700 <gatt_notify+0x5c>)
   136f4:	f006 ffba 	bl	1a66c <printk>
}
   136f8:	f06f 000b 	mvn.w	r0, #11
   136fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13700:	00022052 	.word	0x00022052

00013704 <notify_cb>:
{
   13704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   13708:	4b38      	ldr	r3, [pc, #224]	; (137ec <notify_cb+0xe8>)
{
   1370a:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1370c:	6882      	ldr	r2, [r0, #8]
{
   1370e:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   13710:	429a      	cmp	r2, r3
   13712:	d003      	beq.n	1371c <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   13714:	2001      	movs	r0, #1
}
   13716:	b003      	add	sp, #12
   13718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   1371c:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   13720:	4b33      	ldr	r3, [pc, #204]	; (137f0 <notify_cb+0xec>)
   13722:	4599      	cmp	r9, r3
   13724:	d01a      	beq.n	1375c <notify_cb+0x58>
   13726:	f04f 0b00 	mov.w	fp, #0
   1372a:	f109 0701 	add.w	r7, r9, #1
   1372e:	f109 0a65 	add.w	sl, r9, #101	; 0x65
		if (cfg->value != data->type) {
   13732:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   13736:	89a3      	ldrh	r3, [r4, #12]
   13738:	429a      	cmp	r2, r3
   1373a:	d10b      	bne.n	13754 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1373c:	4639      	mov	r1, r7
   1373e:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   13742:	f7fd feab 	bl	1149c <bt_conn_lookup_addr_le>
		if (!conn) {
   13746:	4605      	mov	r5, r0
   13748:	b120      	cbz	r0, 13754 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   1374a:	7a83      	ldrb	r3, [r0, #10]
   1374c:	2b07      	cmp	r3, #7
   1374e:	d029      	beq.n	137a4 <notify_cb+0xa0>
			bt_conn_unref(conn);
   13750:	f7fd fd82 	bl	11258 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13754:	370a      	adds	r7, #10
   13756:	4557      	cmp	r7, sl
   13758:	d1eb      	bne.n	13732 <notify_cb+0x2e>
   1375a:	e7db      	b.n	13714 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1375c:	2600      	movs	r6, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1375e:	4637      	mov	r7, r6
   13760:	4d24      	ldr	r5, [pc, #144]	; (137f4 <notify_cb+0xf0>)
   13762:	4669      	mov	r1, sp
   13764:	4628      	mov	r0, r5
   13766:	9700      	str	r7, [sp, #0]
   13768:	f8cd 7003 	str.w	r7, [sp, #3]
   1376c:	f009 f97d 	bl	1ca6a <bt_addr_le_cmp>
   13770:	b178      	cbz	r0, 13792 <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   13772:	2207      	movs	r2, #7
   13774:	4629      	mov	r1, r5
   13776:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1377a:	f7fd fecf 	bl	1151c <bt_conn_lookup_state_le>
			if (!conn) {
   1377e:	b970      	cbnz	r0, 1379e <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   13780:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   13782:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   13784:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   13786:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   1378a:	8853      	ldrh	r3, [r2, #2]
   1378c:	8812      	ldrh	r2, [r2, #0]
   1378e:	f7ff fdad 	bl	132ec <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   13792:	3601      	adds	r6, #1
   13794:	2e14      	cmp	r6, #20
   13796:	f105 050c 	add.w	r5, r5, #12
   1379a:	d1e2      	bne.n	13762 <notify_cb+0x5e>
   1379c:	e7c3      	b.n	13726 <notify_cb+0x22>
			bt_conn_unref(conn);
   1379e:	f7fd fd5b 	bl	11258 <bt_conn_unref>
   137a2:	e7f6      	b.n	13792 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   137a4:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
   137a8:	b123      	cbz	r3, 137b4 <notify_cb+0xb0>
   137aa:	4641      	mov	r1, r8
   137ac:	4798      	blx	r3
   137ae:	b908      	cbnz	r0, 137b4 <notify_cb+0xb0>
			bt_conn_unref(conn);
   137b0:	4628      	mov	r0, r5
   137b2:	e7cd      	b.n	13750 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   137b4:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   137b6:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   137b8:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   137ba:	88a1      	ldrh	r1, [r4, #4]
   137bc:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   137be:	d10f      	bne.n	137e0 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   137c0:	f7ff ff3a 	bl	13638 <gatt_indicate>
			if (err == 0) {
   137c4:	4606      	mov	r6, r0
   137c6:	b918      	cbnz	r0, 137d0 <notify_cb+0xcc>
				data->ind_params->_ref++;
   137c8:	6922      	ldr	r2, [r4, #16]
   137ca:	7d93      	ldrb	r3, [r2, #22]
   137cc:	3301      	adds	r3, #1
   137ce:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   137d0:	4628      	mov	r0, r5
   137d2:	f7fd fd41 	bl	11258 <bt_conn_unref>
		if (err < 0) {
   137d6:	2e00      	cmp	r6, #0
   137d8:	db06      	blt.n	137e8 <notify_cb+0xe4>
		data->err = 0;
   137da:	f8c4 b008 	str.w	fp, [r4, #8]
   137de:	e7b9      	b.n	13754 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   137e0:	f7ff ff60 	bl	136a4 <gatt_notify>
   137e4:	4606      	mov	r6, r0
   137e6:	e7f3      	b.n	137d0 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   137e8:	2000      	movs	r0, #0
   137ea:	e794      	b.n	13716 <notify_cb+0x12>
   137ec:	0001313d 	.word	0x0001313d
   137f0:	20008494 	.word	0x20008494
   137f4:	2000c169 	.word	0x2000c169

000137f8 <bt_gatt_clear_sc>:
{
   137f8:	b570      	push	{r4, r5, r6, lr}
   137fa:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   137fc:	f7ff fc42 	bl	13084 <find_sc_cfg>
	if (!cfg) {
   13800:	4604      	mov	r4, r0
   13802:	b1e8      	cbz	r0, 13840 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   13804:	4605      	mov	r5, r0
   13806:	f815 2b01 	ldrb.w	r2, [r5], #1
   1380a:	b1e2      	cbz	r2, 13846 <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1380c:	ae02      	add	r6, sp, #8
   1380e:	2104      	movs	r1, #4
   13810:	4630      	mov	r0, r6
   13812:	f006 fe91 	bl	1a538 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   13816:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   13818:	4a0c      	ldr	r2, [pc, #48]	; (1384c <bt_gatt_clear_sc+0x54>)
   1381a:	462b      	mov	r3, r5
   1381c:	2124      	movs	r1, #36	; 0x24
   1381e:	a803      	add	r0, sp, #12
   13820:	f7fa fe0a 	bl	e438 <bt_settings_encode_key>
		err = settings_delete(key);
   13824:	a803      	add	r0, sp, #12
   13826:	f007 fa19 	bl	1ac5c <settings_delete>
		if (err) {
   1382a:	4602      	mov	r2, r0
   1382c:	b118      	cbz	r0, 13836 <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   1382e:	2145      	movs	r1, #69	; 0x45
   13830:	4807      	ldr	r0, [pc, #28]	; (13850 <bt_gatt_clear_sc+0x58>)
   13832:	f006 ff1b 	bl	1a66c <printk>
	memset(cfg, 0, sizeof(*cfg));
   13836:	220c      	movs	r2, #12
   13838:	2100      	movs	r1, #0
   1383a:	4620      	mov	r0, r4
   1383c:	f008 f985 	bl	1bb4a <memset>
}
   13840:	2000      	movs	r0, #0
   13842:	b00c      	add	sp, #48	; 0x30
   13844:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   13846:	9200      	str	r2, [sp, #0]
   13848:	e7e6      	b.n	13818 <bt_gatt_clear_sc+0x20>
   1384a:	bf00      	nop
   1384c:	00022272 	.word	0x00022272
   13850:	00022080 	.word	0x00022080

00013854 <sc_clear>:
{
   13854:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13856:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1385a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1385c:	4631      	mov	r1, r6
   1385e:	7a00      	ldrb	r0, [r0, #8]
   13860:	f008 fb0f 	bl	1be82 <bt_addr_le_is_bonded>
   13864:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   13866:	4631      	mov	r1, r6
   13868:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1386a:	b14d      	cbz	r5, 13880 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1386c:	f7ff ffc4 	bl	137f8 <bt_gatt_clear_sc>
		if (err) {
   13870:	4602      	mov	r2, r0
   13872:	b170      	cbz	r0, 13892 <sc_clear+0x3e>
}
   13874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   13878:	2145      	movs	r1, #69	; 0x45
   1387a:	4806      	ldr	r0, [pc, #24]	; (13894 <sc_clear+0x40>)
   1387c:	f006 bef6 	b.w	1a66c <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   13880:	f7ff fc00 	bl	13084 <find_sc_cfg>
		if (cfg) {
   13884:	b128      	cbz	r0, 13892 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   13886:	4629      	mov	r1, r5
}
   13888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1388c:	220c      	movs	r2, #12
   1388e:	f008 b95c 	b.w	1bb4a <memset>
}
   13892:	bd70      	pop	{r4, r5, r6, pc}
   13894:	000220a2 	.word	0x000220a2

00013898 <disconnected_cb>:
{
   13898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1389c:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1389e:	4b26      	ldr	r3, [pc, #152]	; (13938 <disconnected_cb+0xa0>)
   138a0:	6882      	ldr	r2, [r0, #8]
{
   138a2:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   138a4:	429a      	cmp	r2, r3
   138a6:	d130      	bne.n	1390a <disconnected_cb+0x72>
	ccc = attr->user_data;
   138a8:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   138aa:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
   138ae:	b363      	cbz	r3, 1390a <disconnected_cb+0x72>
	value_used = false;
   138b0:	f04f 0800 	mov.w	r8, #0
				if (ccc == &sc_ccc) {
   138b4:	f8df b084 	ldr.w	fp, [pc, #132]	; 1393c <disconnected_cb+0xa4>
   138b8:	1c6c      	adds	r4, r5, #1
   138ba:	f105 0a65 	add.w	sl, r5, #101	; 0x65
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   138be:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   138c2:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   138c6:	b19b      	cbz	r3, 138f0 <disconnected_cb+0x58>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   138c8:	4622      	mov	r2, r4
   138ca:	4630      	mov	r0, r6
   138cc:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   138d0:	f008 fb6b 	bl	1bfaa <bt_conn_is_peer_addr_le>
   138d4:	b9e0      	cbnz	r0, 13910 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   138d6:	4621      	mov	r1, r4
   138d8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   138dc:	f7fd fdde 	bl	1149c <bt_conn_lookup_addr_le>
			if (tmp) {
   138e0:	b130      	cbz	r0, 138f0 <disconnected_cb+0x58>
				if (tmp->state == BT_CONN_CONNECTED) {
   138e2:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
   138e4:	2b07      	cmp	r3, #7
   138e6:	bf08      	it	eq
   138e8:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   138ec:	f7fd fcb4 	bl	11258 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   138f0:	340a      	adds	r4, #10
   138f2:	45a2      	cmp	sl, r4
   138f4:	d1e5      	bne.n	138c2 <disconnected_cb+0x2a>
	if (!value_used) {
   138f6:	f1b8 0f00 	cmp.w	r8, #0
   138fa:	d106      	bne.n	1390a <disconnected_cb+0x72>
		if (ccc->cfg_changed) {
   138fc:	6eab      	ldr	r3, [r5, #104]	; 0x68
		ccc->value = 0U;
   138fe:	f8a5 8064 	strh.w	r8, [r5, #100]	; 0x64
		if (ccc->cfg_changed) {
   13902:	b113      	cbz	r3, 1390a <disconnected_cb+0x72>
			ccc->cfg_changed(attr, ccc->value);
   13904:	4641      	mov	r1, r8
   13906:	4638      	mov	r0, r7
   13908:	4798      	blx	r3
}
   1390a:	2001      	movs	r0, #1
   1390c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   13910:	4649      	mov	r1, r9
   13912:	7a30      	ldrb	r0, [r6, #8]
   13914:	f008 fab5 	bl	1be82 <bt_addr_le_is_bonded>
   13918:	b940      	cbnz	r0, 1392c <disconnected_cb+0x94>
				if (ccc == &sc_ccc) {
   1391a:	455d      	cmp	r5, fp
   1391c:	d102      	bne.n	13924 <disconnected_cb+0x8c>
					sc_clear(conn);
   1391e:	4630      	mov	r0, r6
   13920:	f7ff ff98 	bl	13854 <sc_clear>
				clear_ccc_cfg(cfg);
   13924:	1e60      	subs	r0, r4, #1
   13926:	f009 f8df 	bl	1cae8 <clear_ccc_cfg>
   1392a:	e7e1      	b.n	138f0 <disconnected_cb+0x58>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1392c:	4649      	mov	r1, r9
   1392e:	4620      	mov	r0, r4
   13930:	f009 f8d7 	bl	1cae2 <bt_addr_le_copy>
   13934:	e7dc      	b.n	138f0 <disconnected_cb+0x58>
   13936:	bf00      	nop
   13938:	0001313d 	.word	0x0001313d
   1393c:	20008494 	.word	0x20008494

00013940 <sc_commit>:
{
   13940:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13942:	490b      	ldr	r1, [pc, #44]	; (13970 <sc_commit+0x30>)
   13944:	e8d1 3fef 	ldaex	r3, [r1]
   13948:	f023 0302 	bic.w	r3, r3, #2
   1394c:	e8c1 3fe2 	stlex	r2, r3, [r1]
   13950:	2a00      	cmp	r2, #0
   13952:	d1f7      	bne.n	13944 <sc_commit+0x4>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13954:	4608      	mov	r0, r1
   13956:	f009 f8e0 	bl	1cb1a <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1395a:	07c3      	lsls	r3, r0, #31
   1395c:	d506      	bpl.n	1396c <sc_commit+0x2c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1395e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13962:	2300      	movs	r3, #0
   13964:	4803      	ldr	r0, [pc, #12]	; (13974 <sc_commit+0x34>)
   13966:	3930      	subs	r1, #48	; 0x30
   13968:	f005 ff0a 	bl	19780 <k_delayed_work_submit_to_queue>
}
   1396c:	2000      	movs	r0, #0
   1396e:	bd08      	pop	{r3, pc}
   13970:	20009c88 	.word	0x20009c88
   13974:	2000a560 	.word	0x2000a560

00013978 <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1397c:	4688      	mov	r8, r1
   1397e:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13980:	2112      	movs	r1, #18
   13982:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   13984:	4606      	mov	r6, r0
   13986:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   13988:	f7fe ff16 	bl	127b8 <bt_att_create_pdu>
	if (!buf) {
   1398c:	4604      	mov	r4, r0
   1398e:	b1c0      	cbz	r0, 139c2 <gatt_write_ccc.constprop.0+0x4a>
   13990:	f100 0908 	add.w	r9, r0, #8
   13994:	2102      	movs	r1, #2
   13996:	4648      	mov	r0, r9
   13998:	f001 ff08 	bl	157ac <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
   1399c:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
   1399e:	f8a0 8000 	strh.w	r8, [r0]
   139a2:	4648      	mov	r0, r9
   139a4:	f009 fbf7 	bl	1d196 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   139a8:	2104      	movs	r1, #4
   139aa:	f105 0010 	add.w	r0, r5, #16
   139ae:	f009 f8a9 	bl	1cb04 <atomic_or>
	return gatt_send(conn, buf, func, params, NULL);
   139b2:	462b      	mov	r3, r5
   139b4:	4621      	mov	r1, r4
   139b6:	4630      	mov	r0, r6
}
   139b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
   139bc:	4a03      	ldr	r2, [pc, #12]	; (139cc <gatt_write_ccc.constprop.0+0x54>)
   139be:	f7ff bd35 	b.w	1342c <gatt_send.constprop.0>
}
   139c2:	f06f 000b 	mvn.w	r0, #11
   139c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   139ca:	bf00      	nop
   139cc:	0001cbfd 	.word	0x0001cbfd

000139d0 <sc_indicate_rsp>:
{
   139d0:	b510      	push	{r4, lr}
   139d2:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   139d4:	4910      	ldr	r1, [pc, #64]	; (13a18 <sc_indicate_rsp+0x48>)
   139d6:	e8d1 3fef 	ldaex	r3, [r1]
   139da:	f023 0302 	bic.w	r3, r3, #2
   139de:	e8c1 3fe2 	stlex	r2, r3, [r1]
   139e2:	2a00      	cmp	r2, #0
   139e4:	d1f7      	bne.n	139d6 <sc_indicate_rsp+0x6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   139e6:	4608      	mov	r0, r1
   139e8:	f009 f897 	bl	1cb1a <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   139ec:	07c2      	lsls	r2, r0, #31
   139ee:	d505      	bpl.n	139fc <sc_indicate_rsp+0x2c>
   139f0:	2200      	movs	r2, #0
   139f2:	2300      	movs	r3, #0
   139f4:	4809      	ldr	r0, [pc, #36]	; (13a1c <sc_indicate_rsp+0x4c>)
   139f6:	3930      	subs	r1, #48	; 0x30
   139f8:	f005 fec2 	bl	19780 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   139fc:	4620      	mov	r0, r4
   139fe:	f7ff fb1f 	bl	13040 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   13a02:	b140      	cbz	r0, 13a16 <sc_indicate_rsp+0x46>
   13a04:	7a03      	ldrb	r3, [r0, #8]
   13a06:	07db      	lsls	r3, r3, #31
   13a08:	d505      	bpl.n	13a16 <sc_indicate_rsp+0x46>
}
   13a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13a0e:	2101      	movs	r1, #1
   13a10:	300c      	adds	r0, #12
   13a12:	f009 b877 	b.w	1cb04 <atomic_or>
   13a16:	bd10      	pop	{r4, pc}
   13a18:	20009c88 	.word	0x20009c88
   13a1c:	2000a560 	.word	0x2000a560

00013a20 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13a20:	2201      	movs	r2, #1
{
   13a22:	b570      	push	{r4, r5, r6, lr}
   13a24:	4b26      	ldr	r3, [pc, #152]	; (13ac0 <bt_gatt_init+0xa0>)
   13a26:	e8d3 1fef 	ldaex	r1, [r3]
   13a2a:	2900      	cmp	r1, #0
   13a2c:	d103      	bne.n	13a36 <bt_gatt_init+0x16>
   13a2e:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13a32:	2800      	cmp	r0, #0
   13a34:	d1f7      	bne.n	13a26 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   13a36:	d142      	bne.n	13abe <bt_gatt_init+0x9e>
   13a38:	4b22      	ldr	r3, [pc, #136]	; (13ac4 <bt_gatt_init+0xa4>)
   13a3a:	e8d3 1fef 	ldaex	r1, [r3]
   13a3e:	2900      	cmp	r1, #0
   13a40:	d103      	bne.n	13a4a <bt_gatt_init+0x2a>
   13a42:	e8c3 2fe0 	stlex	r0, r2, [r3]
   13a46:	2800      	cmp	r0, #0
   13a48:	d1f7      	bne.n	13a3a <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   13a4a:	d034      	beq.n	13ab6 <bt_gatt_init+0x96>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13a4c:	4c1e      	ldr	r4, [pc, #120]	; (13ac8 <bt_gatt_init+0xa8>)
   13a4e:	2230      	movs	r2, #48	; 0x30
   13a50:	2100      	movs	r1, #0
   13a52:	4620      	mov	r0, r4
   13a54:	f008 f879 	bl	1bb4a <memset>
   13a58:	4b1c      	ldr	r3, [pc, #112]	; (13acc <bt_gatt_init+0xac>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13a5a:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13a5c:	6063      	str	r3, [r4, #4]
   13a5e:	4c1c      	ldr	r4, [pc, #112]	; (13ad0 <bt_gatt_init+0xb0>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13a60:	2300      	movs	r3, #0
   13a62:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13a66:	481b      	ldr	r0, [pc, #108]	; (13ad4 <bt_gatt_init+0xb4>)
   13a68:	f005 fe8a 	bl	19780 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   13a6c:	2100      	movs	r1, #0
   13a6e:	f104 0020 	add.w	r0, r4, #32
   13a72:	2230      	movs	r2, #48	; 0x30
   13a74:	f008 f869 	bl	1bb4a <memset>
   13a78:	4b17      	ldr	r3, [pc, #92]	; (13ad8 <bt_gatt_init+0xb8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13a7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   13a7e:	6263      	str	r3, [r4, #36]	; 0x24
   13a80:	2102      	movs	r1, #2
}
   13a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13a86:	f009 b83d 	b.w	1cb04 <atomic_or>
		last_static_handle += svc->attr_count;
   13a8a:	4a14      	ldr	r2, [pc, #80]	; (13adc <bt_gatt_init+0xbc>)
   13a8c:	6863      	ldr	r3, [r4, #4]
   13a8e:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13a90:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   13a92:	440b      	add	r3, r1
   13a94:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13a96:	42ac      	cmp	r4, r5
   13a98:	d90a      	bls.n	13ab0 <bt_gatt_init+0x90>
   13a9a:	4631      	mov	r1, r6
   13a9c:	4810      	ldr	r0, [pc, #64]	; (13ae0 <bt_gatt_init+0xc0>)
   13a9e:	f44f 6283 	mov.w	r2, #1048	; 0x418
   13aa2:	f006 fde3 	bl	1a66c <printk>
   13aa6:	f44f 6183 	mov.w	r1, #1048	; 0x418
   13aaa:	4630      	mov	r0, r6
   13aac:	f007 f884 	bl	1abb8 <assert_post_action>
   13ab0:	42ac      	cmp	r4, r5
   13ab2:	d3ea      	bcc.n	13a8a <bt_gatt_init+0x6a>
   13ab4:	e7ca      	b.n	13a4c <bt_gatt_init+0x2c>
   13ab6:	4c0b      	ldr	r4, [pc, #44]	; (13ae4 <bt_gatt_init+0xc4>)
   13ab8:	4d0b      	ldr	r5, [pc, #44]	; (13ae8 <bt_gatt_init+0xc8>)
   13aba:	4e0c      	ldr	r6, [pc, #48]	; (13aec <bt_gatt_init+0xcc>)
   13abc:	e7eb      	b.n	13a96 <bt_gatt_init+0x76>
}
   13abe:	bd70      	pop	{r4, r5, r6, pc}
   13ac0:	2000acd4 	.word	0x2000acd4
   13ac4:	2000adc8 	.word	0x2000adc8
   13ac8:	20009c08 	.word	0x20009c08
   13acc:	0001cef5 	.word	0x0001cef5
   13ad0:	20009c38 	.word	0x20009c38
   13ad4:	2000a560 	.word	0x2000a560
   13ad8:	000140b1 	.word	0x000140b1
   13adc:	2000c166 	.word	0x2000c166
   13ae0:	0001fbb7 	.word	0x0001fbb7
   13ae4:	0001e3d0 	.word	0x0001e3d0
   13ae8:	0001e400 	.word	0x0001e400
   13aec:	000220bd 	.word	0x000220bd

00013af0 <bt_gatt_attr_get_handle>:
{
   13af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   13af4:	4604      	mov	r4, r0
   13af6:	b910      	cbnz	r0, 13afe <bt_gatt_attr_get_handle+0xe>
		return 0;
   13af8:	2000      	movs	r0, #0
}
   13afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   13afe:	8a00      	ldrh	r0, [r0, #16]
   13b00:	2800      	cmp	r0, #0
   13b02:	d1fa      	bne.n	13afa <bt_gatt_attr_get_handle+0xa>
	uint16_t handle = 1;
   13b04:	f04f 0801 	mov.w	r8, #1
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13b08:	4d17      	ldr	r5, [pc, #92]	; (13b68 <bt_gatt_attr_get_handle+0x78>)
   13b0a:	4e18      	ldr	r6, [pc, #96]	; (13b6c <bt_gatt_attr_get_handle+0x7c>)
   13b0c:	4f18      	ldr	r7, [pc, #96]	; (13b70 <bt_gatt_attr_get_handle+0x80>)
   13b0e:	42b5      	cmp	r5, r6
   13b10:	d90a      	bls.n	13b28 <bt_gatt_attr_get_handle+0x38>
   13b12:	4639      	mov	r1, r7
   13b14:	4817      	ldr	r0, [pc, #92]	; (13b74 <bt_gatt_attr_get_handle+0x84>)
   13b16:	f240 522d 	movw	r2, #1325	; 0x52d
   13b1a:	f006 fda7 	bl	1a66c <printk>
   13b1e:	f240 512d 	movw	r1, #1325	; 0x52d
   13b22:	4638      	mov	r0, r7
   13b24:	f007 f848 	bl	1abb8 <assert_post_action>
   13b28:	42b5      	cmp	r5, r6
   13b2a:	d2e5      	bcs.n	13af8 <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13b2c:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   13b30:	4564      	cmp	r4, ip
   13b32:	d306      	bcc.n	13b42 <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   13b34:	f04f 0e14 	mov.w	lr, #20
   13b38:	fb0e c301 	mla	r3, lr, r1, ip
   13b3c:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   13b3e:	429c      	cmp	r4, r3
   13b40:	d910      	bls.n	13b64 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   13b42:	eb08 0001 	add.w	r0, r8, r1
   13b46:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13b48:	4680      	mov	r8, r0
   13b4a:	3508      	adds	r5, #8
   13b4c:	e7df      	b.n	13b0e <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   13b4e:	fb0e c302 	mla	r3, lr, r2, ip
   13b52:	429c      	cmp	r4, r3
   13b54:	d0d1      	beq.n	13afa <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   13b56:	3201      	adds	r2, #1
   13b58:	eb08 0302 	add.w	r3, r8, r2
   13b5c:	4291      	cmp	r1, r2
   13b5e:	b298      	uxth	r0, r3
   13b60:	d1f5      	bne.n	13b4e <bt_gatt_attr_get_handle+0x5e>
   13b62:	e7f1      	b.n	13b48 <bt_gatt_attr_get_handle+0x58>
   13b64:	2200      	movs	r2, #0
   13b66:	e7f7      	b.n	13b58 <bt_gatt_attr_get_handle+0x68>
   13b68:	0001e3d0 	.word	0x0001e3d0
   13b6c:	0001e400 	.word	0x0001e400
   13b70:	000220bd 	.word	0x000220bd
   13b74:	0001fbb7 	.word	0x0001fbb7

00013b78 <bt_gatt_foreach_attr_type>:
{
   13b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b7c:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   13b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   13b82:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   13b86:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   13b88:	2d00      	cmp	r5, #0
   13b8a:	bf08      	it	eq
   13b8c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   13b8e:	4b2b      	ldr	r3, [pc, #172]	; (13c3c <bt_gatt_foreach_attr_type+0xc4>)
{
   13b90:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   13b92:	881b      	ldrh	r3, [r3, #0]
{
   13b94:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   13b96:	4283      	cmp	r3, r0
   13b98:	d24b      	bcs.n	13c32 <bt_gatt_foreach_attr_type+0xba>
}
   13b9a:	b003      	add	sp, #12
   13b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   13ba0:	6873      	ldr	r3, [r6, #4]
   13ba2:	4423      	add	r3, r4
   13ba4:	42bb      	cmp	r3, r7
   13ba6:	d241      	bcs.n	13c2c <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   13ba8:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13baa:	3608      	adds	r6, #8
   13bac:	4b24      	ldr	r3, [pc, #144]	; (13c40 <bt_gatt_foreach_attr_type+0xc8>)
   13bae:	429e      	cmp	r6, r3
   13bb0:	d90a      	bls.n	13bc8 <bt_gatt_foreach_attr_type+0x50>
   13bb2:	4659      	mov	r1, fp
   13bb4:	4823      	ldr	r0, [pc, #140]	; (13c44 <bt_gatt_foreach_attr_type+0xcc>)
   13bb6:	f240 52f1 	movw	r2, #1521	; 0x5f1
   13bba:	f006 fd57 	bl	1a66c <printk>
   13bbe:	f240 51f1 	movw	r1, #1521	; 0x5f1
   13bc2:	4658      	mov	r0, fp
   13bc4:	f006 fff8 	bl	1abb8 <assert_post_action>
   13bc8:	4b1d      	ldr	r3, [pc, #116]	; (13c40 <bt_gatt_foreach_attr_type+0xc8>)
   13bca:	429e      	cmp	r6, r3
   13bcc:	d3e8      	bcc.n	13ba0 <bt_gatt_foreach_attr_type+0x28>
   13bce:	e7e4      	b.n	13b9a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   13bd0:	4640      	mov	r0, r8
   13bd2:	5889      	ldr	r1, [r1, r2]
   13bd4:	9301      	str	r3, [sp, #4]
   13bd6:	f008 f802 	bl	1bbde <bt_uuid_cmp>
   13bda:	9b01      	ldr	r3, [sp, #4]
   13bdc:	b198      	cbz	r0, 13c06 <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   13bde:	3401      	adds	r4, #1
   13be0:	f10a 0a01 	add.w	sl, sl, #1
   13be4:	b2a4      	uxth	r4, r4
   13be6:	6873      	ldr	r3, [r6, #4]
   13be8:	4553      	cmp	r3, sl
   13bea:	d9de      	bls.n	13baa <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   13bec:	9b00      	ldr	r3, [sp, #0]
   13bee:	429c      	cmp	r4, r3
   13bf0:	d8d3      	bhi.n	13b9a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   13bf2:	42bc      	cmp	r4, r7
   13bf4:	d3f3      	bcc.n	13bde <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13bf6:	2314      	movs	r3, #20
   13bf8:	fb03 f20a 	mul.w	r2, r3, sl
   13bfc:	6831      	ldr	r1, [r6, #0]
   13bfe:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   13c00:	f1b8 0f00 	cmp.w	r8, #0
   13c04:	d1e4      	bne.n	13bd0 <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   13c06:	f1b9 0f00 	cmp.w	r9, #0
   13c0a:	d10b      	bne.n	13c24 <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   13c0c:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   13c0e:	4618      	mov	r0, r3
	*num_matches -= 1;
   13c10:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   13c12:	4621      	mov	r1, r4
   13c14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   13c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   13c18:	4798      	blx	r3
	if (!*num_matches) {
   13c1a:	2d00      	cmp	r5, #0
   13c1c:	d0bd      	beq.n	13b9a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   13c1e:	2800      	cmp	r0, #0
   13c20:	d1dd      	bne.n	13bde <bt_gatt_foreach_attr_type+0x66>
   13c22:	e7ba      	b.n	13b9a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   13c24:	68da      	ldr	r2, [r3, #12]
   13c26:	4591      	cmp	r9, r2
   13c28:	d1d9      	bne.n	13bde <bt_gatt_foreach_attr_type+0x66>
   13c2a:	e7ef      	b.n	13c0c <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   13c2c:	f04f 0a00 	mov.w	sl, #0
   13c30:	e7d9      	b.n	13be6 <bt_gatt_foreach_attr_type+0x6e>
		uint16_t handle = 1;
   13c32:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   13c34:	4e04      	ldr	r6, [pc, #16]	; (13c48 <bt_gatt_foreach_attr_type+0xd0>)
   13c36:	f8df b014 	ldr.w	fp, [pc, #20]	; 13c4c <bt_gatt_foreach_attr_type+0xd4>
   13c3a:	e7b7      	b.n	13bac <bt_gatt_foreach_attr_type+0x34>
   13c3c:	2000c166 	.word	0x2000c166
   13c40:	0001e400 	.word	0x0001e400
   13c44:	0001fbb7 	.word	0x0001fbb7
   13c48:	0001e3d0 	.word	0x0001e3d0
   13c4c:	000220bd 	.word	0x000220bd

00013c50 <db_hash_gen>:
	uint8_t key[16] = {};
   13c50:	2300      	movs	r3, #0
{
   13c52:	b530      	push	{r4, r5, lr}
   13c54:	b0c9      	sub	sp, #292	; 0x124
   13c56:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13c58:	4669      	mov	r1, sp
   13c5a:	aa1c      	add	r2, sp, #112	; 0x70
   13c5c:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   13c5e:	e9cd 3300 	strd	r3, r3, [sp]
   13c62:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13c66:	f007 fb6e 	bl	1b346 <tc_cmac_setup>
   13c6a:	b928      	cbnz	r0, 13c78 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   13c6c:	2145      	movs	r1, #69	; 0x45
   13c6e:	4812      	ldr	r0, [pc, #72]	; (13cb8 <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
   13c70:	f006 fcfc 	bl	1a66c <printk>
}
   13c74:	b049      	add	sp, #292	; 0x124
   13c76:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   13c78:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13c7c:	2001      	movs	r0, #1
   13c7e:	4a0f      	ldr	r2, [pc, #60]	; (13cbc <db_hash_gen+0x6c>)
   13c80:	ab04      	add	r3, sp, #16
   13c82:	f009 f92c 	bl	1cede <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   13c86:	480e      	ldr	r0, [pc, #56]	; (13cc0 <db_hash_gen+0x70>)
   13c88:	a904      	add	r1, sp, #16
   13c8a:	f007 fbf2 	bl	1b472 <tc_cmac_final>
   13c8e:	b910      	cbnz	r0, 13c96 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   13c90:	2145      	movs	r1, #69	; 0x45
   13c92:	480c      	ldr	r0, [pc, #48]	; (13cc4 <db_hash_gen+0x74>)
   13c94:	e7ec      	b.n	13c70 <db_hash_gen+0x20>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   13c96:	2208      	movs	r2, #8
   13c98:	4b09      	ldr	r3, [pc, #36]	; (13cc0 <db_hash_gen+0x70>)
   13c9a:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   13c9e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13ca0:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   13ca4:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13ca6:	f803 5b01 	strb.w	r5, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   13caa:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   13cac:	d1f7      	bne.n	13c9e <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   13cae:	2c00      	cmp	r4, #0
   13cb0:	d0e0      	beq.n	13c74 <db_hash_gen+0x24>
		db_hash_store();
   13cb2:	f7ff f9af 	bl	13014 <db_hash_store>
   13cb6:	e7dd      	b.n	13c74 <db_hash_gen+0x24>
   13cb8:	000220ed 	.word	0x000220ed
   13cbc:	0001c9bf 	.word	0x0001c9bf
   13cc0:	2000c970 	.word	0x2000c970
   13cc4:	0002210b 	.word	0x0002210b

00013cc8 <db_hash_commit>:
{
   13cc8:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
   13cca:	4821      	ldr	r0, [pc, #132]	; (13d50 <db_hash_commit+0x88>)
   13ccc:	f005 fdc8 	bl	19860 <k_delayed_work_cancel>
	if (!err) {
   13cd0:	b908      	cbnz	r0, 13cd6 <db_hash_commit+0xe>
		db_hash_gen(false);
   13cd2:	f7ff ffbd 	bl	13c50 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
   13cd6:	2210      	movs	r2, #16
   13cd8:	491e      	ldr	r1, [pc, #120]	; (13d54 <db_hash_commit+0x8c>)
   13cda:	481f      	ldr	r0, [pc, #124]	; (13d58 <db_hash_commit+0x90>)
   13cdc:	f007 fef9 	bl	1bad2 <memcmp>
   13ce0:	b968      	cbnz	r0, 13cfe <db_hash_commit+0x36>
		k_delayed_work_cancel(&gatt_sc.work);
   13ce2:	481e      	ldr	r0, [pc, #120]	; (13d5c <db_hash_commit+0x94>)
   13ce4:	f005 fdbc 	bl	19860 <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13ce8:	4b1d      	ldr	r3, [pc, #116]	; (13d60 <db_hash_commit+0x98>)
   13cea:	e8d3 2fef 	ldaex	r2, [r3]
   13cee:	f022 0201 	bic.w	r2, r2, #1
   13cf2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   13cf6:	2900      	cmp	r1, #0
   13cf8:	d1f7      	bne.n	13cea <db_hash_commit+0x22>
}
   13cfa:	2000      	movs	r0, #0
   13cfc:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13cfe:	4c19      	ldr	r4, [pc, #100]	; (13d64 <db_hash_commit+0x9c>)
   13d00:	2101      	movs	r1, #1
   13d02:	f104 0050 	add.w	r0, r4, #80	; 0x50
   13d06:	f008 fefd 	bl	1cb04 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   13d0a:	07c2      	lsls	r2, r0, #31
   13d0c:	d410      	bmi.n	13d30 <db_hash_commit+0x68>
		gatt_sc.start = start;
   13d0e:	4b16      	ldr	r3, [pc, #88]	; (13d68 <db_hash_commit+0xa0>)
   13d10:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13d12:	4813      	ldr	r0, [pc, #76]	; (13d60 <db_hash_commit+0x98>)
   13d14:	f008 ff01 	bl	1cb1a <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   13d18:	0783      	lsls	r3, r0, #30
   13d1a:	d406      	bmi.n	13d2a <db_hash_commit+0x62>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13d1c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13d20:	2300      	movs	r3, #0
   13d22:	490e      	ldr	r1, [pc, #56]	; (13d5c <db_hash_commit+0x94>)
   13d24:	4811      	ldr	r0, [pc, #68]	; (13d6c <db_hash_commit+0xa4>)
   13d26:	f005 fd2b 	bl	19780 <k_delayed_work_submit_to_queue>
	db_hash_store();
   13d2a:	f7ff f973 	bl	13014 <db_hash_store>
	return 0;
   13d2e:	e7e4      	b.n	13cfa <db_hash_commit+0x32>
	if (new_start >= *start && new_end <= *end) {
   13d30:	8b23      	ldrh	r3, [r4, #24]
   13d32:	8b62      	ldrh	r2, [r4, #26]
   13d34:	2b01      	cmp	r3, #1
   13d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13d3a:	d805      	bhi.n	13d48 <db_hash_commit+0x80>
   13d3c:	429a      	cmp	r2, r3
   13d3e:	d0f4      	beq.n	13d2a <db_hash_commit+0x62>
		*end = new_end;
   13d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13d44:	8363      	strh	r3, [r4, #26]
   13d46:	e7e4      	b.n	13d12 <db_hash_commit+0x4a>
	if (*end < new_end) {
   13d48:	429a      	cmp	r2, r3
		*start = new_start;
   13d4a:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   13d4c:	d0e1      	beq.n	13d12 <db_hash_commit+0x4a>
   13d4e:	e7f7      	b.n	13d40 <db_hash_commit+0x78>
   13d50:	20009c08 	.word	0x20009c08
   13d54:	2000c970 	.word	0x2000c970
   13d58:	2000c980 	.word	0x2000c980
   13d5c:	20009c58 	.word	0x20009c58
   13d60:	20009c88 	.word	0x20009c88
   13d64:	20009c38 	.word	0x20009c38
   13d68:	ffff0001 	.word	0xffff0001
   13d6c:	2000a560 	.word	0x2000a560

00013d70 <ccc_set_direct>:
{
   13d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13d74:	b0b9      	sub	sp, #228	; 0xe4
   13d76:	4688      	mov	r8, r1
   13d78:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   13d7a:	492c      	ldr	r1, [pc, #176]	; (13e2c <ccc_set_direct+0xbc>)
   13d7c:	466a      	mov	r2, sp
   13d7e:	9840      	ldr	r0, [sp, #256]	; 0x100
{
   13d80:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   13d82:	f006 ff6f 	bl	1ac64 <settings_name_steq>
   13d86:	b948      	cbnz	r0, 13d9c <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   13d88:	2145      	movs	r1, #69	; 0x45
   13d8a:	4829      	ldr	r0, [pc, #164]	; (13e30 <ccc_set_direct+0xc0>)
   13d8c:	f006 fc6e 	bl	1a66c <printk>
   13d90:	f06f 0515 	mvn.w	r5, #21
}
   13d94:	4628      	mov	r0, r5
   13d96:	b039      	add	sp, #228	; 0xe4
   13d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   13d9c:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   13d9e:	a901      	add	r1, sp, #4
   13da0:	4620      	mov	r0, r4
   13da2:	f006 ff82 	bl	1acaa <settings_name_next>
		if (!name) {
   13da6:	b93c      	cbnz	r4, 13db8 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   13da8:	2145      	movs	r1, #69	; 0x45
   13daa:	4822      	ldr	r0, [pc, #136]	; (13e34 <ccc_set_direct+0xc4>)
   13dac:	f006 fc5e 	bl	1a66c <printk>
			return -EINVAL;
   13db0:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   13db4:	4625      	mov	r5, r4
   13db6:	e7ed      	b.n	13d94 <ccc_set_direct+0x24>
		} else if (!next) {
   13db8:	9801      	ldr	r0, [sp, #4]
   13dba:	b978      	cbnz	r0, 13ddc <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
   13dbc:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   13dc0:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   13dc4:	4649      	mov	r1, r9
   13dc6:	4620      	mov	r0, r4
   13dc8:	f007 fee5 	bl	1bb96 <bt_settings_decode_key>
		if (err) {
   13dcc:	4605      	mov	r5, r0
   13dce:	b150      	cbz	r0, 13de6 <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   13dd0:	4622      	mov	r2, r4
   13dd2:	2145      	movs	r1, #69	; 0x45
   13dd4:	4818      	ldr	r0, [pc, #96]	; (13e38 <ccc_set_direct+0xc8>)
   13dd6:	f006 fc49 	bl	1a66c <printk>
   13dda:	e7e9      	b.n	13db0 <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
   13ddc:	220a      	movs	r2, #10
   13dde:	2100      	movs	r1, #0
   13de0:	f007 fdba 	bl	1b958 <strtol>
   13de4:	e7ea      	b.n	13dbc <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
   13de6:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   13dea:	f1b8 0f00 	cmp.w	r8, #0
   13dee:	d019      	beq.n	13e24 <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   13df0:	f10d 0820 	add.w	r8, sp, #32
   13df4:	22c0      	movs	r2, #192	; 0xc0
   13df6:	4641      	mov	r1, r8
   13df8:	4638      	mov	r0, r7
   13dfa:	47b0      	blx	r6
			if (len < 0) {
   13dfc:	1e04      	subs	r4, r0, #0
   13dfe:	da05      	bge.n	13e0c <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
   13e00:	4622      	mov	r2, r4
   13e02:	2145      	movs	r1, #69	; 0x45
   13e04:	480d      	ldr	r0, [pc, #52]	; (13e3c <ccc_set_direct+0xcc>)
   13e06:	f006 fc31 	bl	1a66c <printk>
				return len;
   13e0a:	e7d3      	b.n	13db4 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   13e0c:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   13e0e:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   13e12:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   13e14:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13e18:	2001      	movs	r0, #1
   13e1a:	4a09      	ldr	r2, [pc, #36]	; (13e40 <ccc_set_direct+0xd0>)
   13e1c:	ab04      	add	r3, sp, #16
   13e1e:	f009 f85e 	bl	1cede <bt_gatt_foreach_attr>
	return 0;
   13e22:	e7b7      	b.n	13d94 <ccc_set_direct+0x24>
			load.count = 0;
   13e24:	e9cd 0006 	strd	r0, r0, [sp, #24]
   13e28:	e7f4      	b.n	13e14 <ccc_set_direct+0xa4>
   13e2a:	bf00      	nop
   13e2c:	00022129 	.word	0x00022129
   13e30:	00022130 	.word	0x00022130
   13e34:	00020ea1 	.word	0x00020ea1
   13e38:	00021f98 	.word	0x00021f98
   13e3c:	00021eaa 	.word	0x00021eaa
   13e40:	00013575 	.word	0x00013575

00013e44 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   13e44:	2300      	movs	r3, #0
{
   13e46:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   13e48:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   13e4a:	f7ff fe51 	bl	13af0 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   13e4e:	1c41      	adds	r1, r0, #1
   13e50:	b289      	uxth	r1, r1
   13e52:	4608      	mov	r0, r1
   13e54:	4a03      	ldr	r2, [pc, #12]	; (13e64 <bt_gatt_attr_next+0x20>)
   13e56:	ab01      	add	r3, sp, #4
   13e58:	f009 f841 	bl	1cede <bt_gatt_foreach_attr>
}
   13e5c:	9801      	ldr	r0, [sp, #4]
   13e5e:	b003      	add	sp, #12
   13e60:	f85d fb04 	ldr.w	pc, [sp], #4
   13e64:	0001c957 	.word	0x0001c957

00013e68 <bt_gatt_notify_cb>:
{
   13e68:	b530      	push	{r4, r5, lr}
   13e6a:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   13e6c:	460d      	mov	r5, r1
{
   13e6e:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   13e70:	b951      	cbnz	r1, 13e88 <bt_gatt_notify_cb+0x20>
   13e72:	4940      	ldr	r1, [pc, #256]	; (13f74 <bt_gatt_notify_cb+0x10c>)
   13e74:	4840      	ldr	r0, [pc, #256]	; (13f78 <bt_gatt_notify_cb+0x110>)
   13e76:	f640 023d 	movw	r2, #2109	; 0x83d
   13e7a:	f006 fbf7 	bl	1a66c <printk>
   13e7e:	f640 013d 	movw	r1, #2109	; 0x83d
   13e82:	483c      	ldr	r0, [pc, #240]	; (13f74 <bt_gatt_notify_cb+0x10c>)
   13e84:	f006 fe98 	bl	1abb8 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   13e88:	686b      	ldr	r3, [r5, #4]
   13e8a:	b953      	cbnz	r3, 13ea2 <bt_gatt_notify_cb+0x3a>
   13e8c:	4939      	ldr	r1, [pc, #228]	; (13f74 <bt_gatt_notify_cb+0x10c>)
   13e8e:	483a      	ldr	r0, [pc, #232]	; (13f78 <bt_gatt_notify_cb+0x110>)
   13e90:	f640 023e 	movw	r2, #2110	; 0x83e
   13e94:	f006 fbea 	bl	1a66c <printk>
   13e98:	f640 013e 	movw	r1, #2110	; 0x83e
   13e9c:	4835      	ldr	r0, [pc, #212]	; (13f74 <bt_gatt_notify_cb+0x10c>)
   13e9e:	f006 fe8b 	bl	1abb8 <assert_post_action>
   13ea2:	4836      	ldr	r0, [pc, #216]	; (13f7c <bt_gatt_notify_cb+0x114>)
   13ea4:	f008 fe39 	bl	1cb1a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13ea8:	0782      	lsls	r2, r0, #30
   13eaa:	d55d      	bpl.n	13f68 <bt_gatt_notify_cb+0x100>
	data.attr = params->attr;
   13eac:	6868      	ldr	r0, [r5, #4]
   13eae:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   13eb0:	b114      	cbz	r4, 13eb8 <bt_gatt_notify_cb+0x50>
   13eb2:	7aa3      	ldrb	r3, [r4, #10]
   13eb4:	2b07      	cmp	r3, #7
   13eb6:	d15a      	bne.n	13f6e <bt_gatt_notify_cb+0x106>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13eb8:	f7ff fe1a 	bl	13af0 <bt_gatt_attr_get_handle>
   13ebc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   13ec0:	b918      	cbnz	r0, 13eca <bt_gatt_notify_cb+0x62>
		return -ENOENT;
   13ec2:	f06f 0001 	mvn.w	r0, #1
}
   13ec6:	b00b      	add	sp, #44	; 0x2c
   13ec8:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   13eca:	682a      	ldr	r2, [r5, #0]
   13ecc:	b9aa      	cbnz	r2, 13efa <bt_gatt_notify_cb+0x92>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   13ece:	9b05      	ldr	r3, [sp, #20]
   13ed0:	a904      	add	r1, sp, #16
   13ed2:	6818      	ldr	r0, [r3, #0]
   13ed4:	2300      	movs	r3, #0
   13ed6:	f88d 3010 	strb.w	r3, [sp, #16]
   13eda:	f642 0303 	movw	r3, #10243	; 0x2803
   13ede:	f8ad 3012 	strh.w	r3, [sp, #18]
   13ee2:	f007 fe7c 	bl	1bbde <bt_uuid_cmp>
   13ee6:	b1c0      	cbz	r0, 13f1a <bt_gatt_notify_cb+0xb2>
		return gatt_notify(conn, data.handle, params);
   13ee8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   13eec:	b314      	cbz	r4, 13f34 <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   13eee:	4601      	mov	r1, r0
   13ef0:	462a      	mov	r2, r5
   13ef2:	4620      	mov	r0, r4
   13ef4:	f7ff fbd6 	bl	136a4 <gatt_notify>
   13ef8:	e7e5      	b.n	13ec6 <bt_gatt_notify_cb+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13efa:	a905      	add	r1, sp, #20
   13efc:	9102      	str	r1, [sp, #8]
   13efe:	4920      	ldr	r1, [pc, #128]	; (13f80 <bt_gatt_notify_cb+0x118>)
	found->attr = NULL;
   13f00:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13f02:	9101      	str	r1, [sp, #4]
   13f04:	2101      	movs	r1, #1
   13f06:	9100      	str	r1, [sp, #0]
   13f08:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   13f0c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   13f0e:	f7ff fe33 	bl	13b78 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   13f12:	9b05      	ldr	r3, [sp, #20]
   13f14:	2b00      	cmp	r3, #0
   13f16:	d1da      	bne.n	13ece <bt_gatt_notify_cb+0x66>
   13f18:	e7d3      	b.n	13ec2 <bt_gatt_notify_cb+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   13f1a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   13f1c:	68c3      	ldr	r3, [r0, #12]
   13f1e:	799b      	ldrb	r3, [r3, #6]
   13f20:	06db      	lsls	r3, r3, #27
   13f22:	d402      	bmi.n	13f2a <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   13f24:	f06f 0015 	mvn.w	r0, #21
   13f28:	e7cd      	b.n	13ec6 <bt_gatt_notify_cb+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   13f2a:	f008 ff8a 	bl	1ce42 <bt_gatt_attr_value_handle>
   13f2e:	f8ad 0018 	strh.w	r0, [sp, #24]
   13f32:	e7d9      	b.n	13ee8 <bt_gatt_notify_cb+0x80>
	data.err = -ENOTCONN;
   13f34:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13f38:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   13f3c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   13f3e:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13f40:	f8ad 2012 	strh.w	r2, [sp, #18]
   13f44:	aa05      	add	r2, sp, #20
   13f46:	9202      	str	r2, [sp, #8]
   13f48:	4a0e      	ldr	r2, [pc, #56]	; (13f84 <bt_gatt_notify_cb+0x11c>)
	data.type = BT_GATT_CCC_NOTIFY;
   13f4a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13f4e:	e9cd 3200 	strd	r3, r2, [sp]
   13f52:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13f56:	4623      	mov	r3, r4
   13f58:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   13f5a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13f5c:	f88d 4010 	strb.w	r4, [sp, #16]
   13f60:	f7ff fe0a 	bl	13b78 <bt_gatt_foreach_attr_type>
	return data.err;
   13f64:	9807      	ldr	r0, [sp, #28]
   13f66:	e7ae      	b.n	13ec6 <bt_gatt_notify_cb+0x5e>
		return -EAGAIN;
   13f68:	f06f 000a 	mvn.w	r0, #10
   13f6c:	e7ab      	b.n	13ec6 <bt_gatt_notify_cb+0x5e>
		return -ENOTCONN;
   13f6e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   13f72:	e7a8      	b.n	13ec6 <bt_gatt_notify_cb+0x5e>
   13f74:	000220bd 	.word	0x000220bd
   13f78:	0001fbb7 	.word	0x0001fbb7
   13f7c:	20008094 	.word	0x20008094
   13f80:	0001c9b3 	.word	0x0001c9b3
   13f84:	00013705 	.word	0x00013705

00013f88 <bt_gatt_indicate>:
{
   13f88:	b530      	push	{r4, r5, lr}
   13f8a:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   13f8c:	460c      	mov	r4, r1
{
   13f8e:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   13f90:	b951      	cbnz	r1, 13fa8 <bt_gatt_indicate+0x20>
   13f92:	4942      	ldr	r1, [pc, #264]	; (1409c <bt_gatt_indicate+0x114>)
   13f94:	4842      	ldr	r0, [pc, #264]	; (140a0 <bt_gatt_indicate+0x118>)
   13f96:	f640 0289 	movw	r2, #2185	; 0x889
   13f9a:	f006 fb67 	bl	1a66c <printk>
   13f9e:	f640 0189 	movw	r1, #2185	; 0x889
   13fa2:	483e      	ldr	r0, [pc, #248]	; (1409c <bt_gatt_indicate+0x114>)
   13fa4:	f006 fe08 	bl	1abb8 <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   13fa8:	6863      	ldr	r3, [r4, #4]
   13faa:	b953      	cbnz	r3, 13fc2 <bt_gatt_indicate+0x3a>
   13fac:	493b      	ldr	r1, [pc, #236]	; (1409c <bt_gatt_indicate+0x114>)
   13fae:	483c      	ldr	r0, [pc, #240]	; (140a0 <bt_gatt_indicate+0x118>)
   13fb0:	f640 028a 	movw	r2, #2186	; 0x88a
   13fb4:	f006 fb5a 	bl	1a66c <printk>
   13fb8:	f640 018a 	movw	r1, #2186	; 0x88a
   13fbc:	4837      	ldr	r0, [pc, #220]	; (1409c <bt_gatt_indicate+0x114>)
   13fbe:	f006 fdfb 	bl	1abb8 <assert_post_action>
   13fc2:	4838      	ldr	r0, [pc, #224]	; (140a4 <bt_gatt_indicate+0x11c>)
   13fc4:	f008 fda9 	bl	1cb1a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13fc8:	0782      	lsls	r2, r0, #30
   13fca:	d561      	bpl.n	14090 <bt_gatt_indicate+0x108>
	data.attr = params->attr;
   13fcc:	6860      	ldr	r0, [r4, #4]
   13fce:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   13fd0:	b115      	cbz	r5, 13fd8 <bt_gatt_indicate+0x50>
   13fd2:	7aab      	ldrb	r3, [r5, #10]
   13fd4:	2b07      	cmp	r3, #7
   13fd6:	d15e      	bne.n	14096 <bt_gatt_indicate+0x10e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13fd8:	f7ff fd8a 	bl	13af0 <bt_gatt_attr_get_handle>
   13fdc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   13fe0:	b918      	cbnz	r0, 13fea <bt_gatt_indicate+0x62>
		return -ENOENT;
   13fe2:	f06f 0001 	mvn.w	r0, #1
}
   13fe6:	b00b      	add	sp, #44	; 0x2c
   13fe8:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   13fea:	6822      	ldr	r2, [r4, #0]
   13fec:	b9ba      	cbnz	r2, 1401e <bt_gatt_indicate+0x96>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   13fee:	9b05      	ldr	r3, [sp, #20]
   13ff0:	a904      	add	r1, sp, #16
   13ff2:	6818      	ldr	r0, [r3, #0]
   13ff4:	2300      	movs	r3, #0
   13ff6:	f88d 3010 	strb.w	r3, [sp, #16]
   13ffa:	f642 0303 	movw	r3, #10243	; 0x2803
   13ffe:	f8ad 3012 	strh.w	r3, [sp, #18]
   14002:	f007 fdec 	bl	1bbde <bt_uuid_cmp>
   14006:	b1d0      	cbz	r0, 1403e <bt_gatt_indicate+0xb6>
		return gatt_indicate(conn, data.handle, params);
   14008:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1400c:	b325      	cbz	r5, 14058 <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   1400e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   14010:	4601      	mov	r1, r0
   14012:	4622      	mov	r2, r4
   14014:	4628      	mov	r0, r5
		params->_ref = 1;
   14016:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   14018:	f7ff fb0e 	bl	13638 <gatt_indicate>
   1401c:	e7e3      	b.n	13fe6 <bt_gatt_indicate+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1401e:	a905      	add	r1, sp, #20
   14020:	9102      	str	r1, [sp, #8]
   14022:	4921      	ldr	r1, [pc, #132]	; (140a8 <bt_gatt_indicate+0x120>)
	found->attr = NULL;
   14024:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14026:	9101      	str	r1, [sp, #4]
   14028:	2101      	movs	r1, #1
   1402a:	9100      	str	r1, [sp, #0]
   1402c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   14030:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   14032:	f7ff fda1 	bl	13b78 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   14036:	9b05      	ldr	r3, [sp, #20]
   14038:	2b00      	cmp	r3, #0
   1403a:	d1d8      	bne.n	13fee <bt_gatt_indicate+0x66>
   1403c:	e7d1      	b.n	13fe2 <bt_gatt_indicate+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1403e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   14040:	68c3      	ldr	r3, [r0, #12]
   14042:	799b      	ldrb	r3, [r3, #6]
   14044:	069b      	lsls	r3, r3, #26
   14046:	d402      	bmi.n	1404e <bt_gatt_indicate+0xc6>
			return -EINVAL;
   14048:	f06f 0015 	mvn.w	r0, #21
   1404c:	e7cb      	b.n	13fe6 <bt_gatt_indicate+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1404e:	f008 fef8 	bl	1ce42 <bt_gatt_attr_value_handle>
   14052:	f8ad 0018 	strh.w	r0, [sp, #24]
   14056:	e7d7      	b.n	14008 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   14058:	f06f 0338 	mvn.w	r3, #56	; 0x38
   1405c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1405e:	2302      	movs	r3, #2
   14060:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14064:	f642 1302 	movw	r3, #10498	; 0x2902
   14068:	f8ad 3012 	strh.w	r3, [sp, #18]
   1406c:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1406e:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14070:	9302      	str	r3, [sp, #8]
   14072:	4b0e      	ldr	r3, [pc, #56]	; (140ac <bt_gatt_indicate+0x124>)
   14074:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14078:	9301      	str	r3, [sp, #4]
   1407a:	2301      	movs	r3, #1
   1407c:	aa04      	add	r2, sp, #16
   1407e:	9300      	str	r3, [sp, #0]
   14080:	462b      	mov	r3, r5
	data.ind_params = params;
   14082:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   14084:	f88d 5010 	strb.w	r5, [sp, #16]
   14088:	f7ff fd76 	bl	13b78 <bt_gatt_foreach_attr_type>
	return data.err;
   1408c:	9807      	ldr	r0, [sp, #28]
   1408e:	e7aa      	b.n	13fe6 <bt_gatt_indicate+0x5e>
		return -EAGAIN;
   14090:	f06f 000a 	mvn.w	r0, #10
   14094:	e7a7      	b.n	13fe6 <bt_gatt_indicate+0x5e>
		return -ENOTCONN;
   14096:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1409a:	e7a4      	b.n	13fe6 <bt_gatt_indicate+0x5e>
   1409c:	000220bd 	.word	0x000220bd
   140a0:	0001fbb7 	.word	0x0001fbb7
   140a4:	20008094 	.word	0x20008094
   140a8:	0001c9b3 	.word	0x0001c9b3
   140ac:	00013705 	.word	0x00013705

000140b0 <sc_process>:
{
   140b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   140b2:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   140b6:	4604      	mov	r4, r0
   140b8:	4628      	mov	r0, r5
   140ba:	f008 fd2e 	bl	1cb1a <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   140be:	0783      	lsls	r3, r0, #30
   140c0:	d50a      	bpl.n	140d8 <sc_process+0x28>
   140c2:	491b      	ldr	r1, [pc, #108]	; (14130 <sc_process+0x80>)
   140c4:	481b      	ldr	r0, [pc, #108]	; (14134 <sc_process+0x84>)
   140c6:	f240 32ae 	movw	r2, #942	; 0x3ae
   140ca:	f006 facf 	bl	1a66c <printk>
   140ce:	f240 31ae 	movw	r1, #942	; 0x3ae
   140d2:	4817      	ldr	r0, [pc, #92]	; (14130 <sc_process+0x80>)
   140d4:	f006 fd70 	bl	1abb8 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   140d8:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   140dc:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   140e0:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   140e4:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   140e8:	e8d5 3fef 	ldaex	r3, [r5]
   140ec:	f023 0301 	bic.w	r3, r3, #1
   140f0:	e8c5 3fe2 	stlex	r2, r3, [r5]
   140f4:	2a00      	cmp	r2, #0
   140f6:	d1f7      	bne.n	140e8 <sc_process+0x38>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   140f8:	4b0f      	ldr	r3, [pc, #60]	; (14138 <sc_process+0x88>)
	sc->start = 0U;
   140fa:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   140fc:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   14100:	4b0e      	ldr	r3, [pc, #56]	; (1413c <sc_process+0x8c>)
	sc->start = 0U;
   14102:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   14106:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1410a:	ab01      	add	r3, sp, #4
   1410c:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   14110:	2304      	movs	r3, #4
	sc->end = 0U;
   14112:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   14116:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1411a:	f1a4 0120 	sub.w	r1, r4, #32
   1411e:	f7ff ff33 	bl	13f88 <bt_gatt_indicate>
   14122:	b918      	cbnz	r0, 1412c <sc_process+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14124:	2102      	movs	r1, #2
   14126:	4628      	mov	r0, r5
   14128:	f008 fcec 	bl	1cb04 <atomic_or>
}
   1412c:	b003      	add	sp, #12
   1412e:	bd30      	pop	{r4, r5, pc}
   14130:	000220bd 	.word	0x000220bd
   14134:	0001fbb7 	.word	0x0001fbb7
   14138:	0001ec08 	.word	0x0001ec08
   1413c:	000139d1 	.word	0x000139d1

00014140 <update_ccc>:
{
   14140:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   14144:	4b32      	ldr	r3, [pc, #200]	; (14210 <update_ccc+0xd0>)
   14146:	6881      	ldr	r1, [r0, #8]
{
   14148:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1414a:	4299      	cmp	r1, r3
   1414c:	d15c      	bne.n	14208 <update_ccc+0xc8>
	ccc = attr->user_data;
   1414e:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
   14150:	6816      	ldr	r6, [r2, #0]
				BT_WARN("CCC %p not writable", attr);
   14152:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 14214 <update_ccc+0xd4>
   14156:	1c7d      	adds	r5, r7, #1
   14158:	f107 0865 	add.w	r8, r7, #101	; 0x65
		if (!cfg->value ||
   1415c:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   14160:	b193      	cbz	r3, 14188 <update_ccc+0x48>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   14162:	462a      	mov	r2, r5
   14164:	4630      	mov	r0, r6
   14166:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1416a:	f007 ff1e 	bl	1bfaa <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1416e:	b158      	cbz	r0, 14188 <update_ccc+0x48>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   14170:	222a      	movs	r2, #42	; 0x2a
   14172:	4621      	mov	r1, r4
   14174:	4630      	mov	r0, r6
   14176:	f008 fec0 	bl	1cefa <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1417a:	2803      	cmp	r0, #3
   1417c:	d108      	bne.n	14190 <update_ccc+0x50>
				BT_WARN("CCC %p not writable", attr);
   1417e:	4622      	mov	r2, r4
   14180:	2157      	movs	r1, #87	; 0x57
   14182:	4648      	mov	r0, r9
   14184:	f006 fa72 	bl	1a66c <printk>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   14188:	350a      	adds	r5, #10
   1418a:	4545      	cmp	r5, r8
   1418c:	d1e6      	bne.n	1415c <update_ccc+0x1c>
   1418e:	e03b      	b.n	14208 <update_ccc+0xc8>
		gatt_ccc_changed(attr, ccc);
   14190:	4639      	mov	r1, r7
   14192:	4620      	mov	r0, r4
   14194:	f008 fbe2 	bl	1c95c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   14198:	4b1f      	ldr	r3, [pc, #124]	; (14218 <update_ccc+0xd8>)
   1419a:	429f      	cmp	r7, r3
   1419c:	d134      	bne.n	14208 <update_ccc+0xc8>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1419e:	7a30      	ldrb	r0, [r6, #8]
   141a0:	f106 0188 	add.w	r1, r6, #136	; 0x88
   141a4:	f7fe ff6e 	bl	13084 <find_sc_cfg>
	if (!cfg) {
   141a8:	4604      	mov	r4, r0
   141aa:	b368      	cbz	r0, 14208 <update_ccc+0xc8>
	if (!(cfg->data.start || cfg->data.end)) {
   141ac:	8902      	ldrh	r2, [r0, #8]
   141ae:	8943      	ldrh	r3, [r0, #10]
   141b0:	ea52 0103 	orrs.w	r1, r2, r3
   141b4:	d028      	beq.n	14208 <update_ccc+0xc8>
	index = bt_conn_index(conn);
   141b6:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   141b8:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   141bc:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   141c0:	f7fd fca2 	bl	11b08 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   141c4:	2318      	movs	r3, #24
   141c6:	4915      	ldr	r1, [pc, #84]	; (1421c <update_ccc+0xdc>)
   141c8:	4a15      	ldr	r2, [pc, #84]	; (14220 <update_ccc+0xe0>)
   141ca:	fb03 1300 	mla	r3, r3, r0, r1
   141ce:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   141d0:	4a14      	ldr	r2, [pc, #80]	; (14224 <update_ccc+0xe4>)
   141d2:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   141d4:	aa01      	add	r2, sp, #4
   141d6:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   141d8:	2204      	movs	r2, #4
   141da:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   141dc:	b203      	sxth	r3, r0
   141de:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   141e2:	4630      	mov	r0, r6
   141e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   141e8:	f7ff fece 	bl	13f88 <bt_gatt_indicate>
   141ec:	b118      	cbz	r0, 141f6 <update_ccc+0xb6>
		BT_ERR("SC restore indication failed");
   141ee:	2145      	movs	r1, #69	; 0x45
   141f0:	480d      	ldr	r0, [pc, #52]	; (14228 <update_ccc+0xe8>)
   141f2:	f006 fa3b 	bl	1a66c <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
   141f6:	2204      	movs	r2, #4
   141f8:	2100      	movs	r1, #0
   141fa:	f104 0008 	add.w	r0, r4, #8
   141fe:	f007 fca4 	bl	1bb4a <memset>
		sc_store(cfg);
   14202:	4620      	mov	r0, r4
   14204:	f7ff f84a 	bl	1329c <sc_store>
}
   14208:	2001      	movs	r0, #1
   1420a:	b003      	add	sp, #12
   1420c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14210:	0001313d 	.word	0x0001313d
   14214:	00022141 	.word	0x00022141
   14218:	20008494 	.word	0x20008494
   1421c:	2000acd8 	.word	0x2000acd8
   14220:	0001ec08 	.word	0x0001ec08
   14224:	0001cdf9 	.word	0x0001cdf9
   14228:	0002215a 	.word	0x0002215a

0001422c <bt_gatt_is_subscribed>:
{
   1422c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1422e:	460c      	mov	r4, r1
   14230:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   14232:	4606      	mov	r6, r0
   14234:	b950      	cbnz	r0, 1424c <bt_gatt_is_subscribed+0x20>
   14236:	4930      	ldr	r1, [pc, #192]	; (142f8 <bt_gatt_is_subscribed+0xcc>)
   14238:	4830      	ldr	r0, [pc, #192]	; (142fc <bt_gatt_is_subscribed+0xd0>)
   1423a:	f640 12b5 	movw	r2, #2485	; 0x9b5
   1423e:	f006 fa15 	bl	1a66c <printk>
   14242:	f640 11b5 	movw	r1, #2485	; 0x9b5
   14246:	482c      	ldr	r0, [pc, #176]	; (142f8 <bt_gatt_is_subscribed+0xcc>)
   14248:	f006 fcb6 	bl	1abb8 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   1424c:	b954      	cbnz	r4, 14264 <bt_gatt_is_subscribed+0x38>
   1424e:	492a      	ldr	r1, [pc, #168]	; (142f8 <bt_gatt_is_subscribed+0xcc>)
   14250:	482a      	ldr	r0, [pc, #168]	; (142fc <bt_gatt_is_subscribed+0xd0>)
   14252:	f640 12b6 	movw	r2, #2486	; 0x9b6
   14256:	f006 fa09 	bl	1a66c <printk>
   1425a:	f640 11b6 	movw	r1, #2486	; 0x9b6
   1425e:	4826      	ldr	r0, [pc, #152]	; (142f8 <bt_gatt_is_subscribed+0xcc>)
   14260:	f006 fcaa 	bl	1abb8 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14264:	7ab3      	ldrb	r3, [r6, #10]
   14266:	2b07      	cmp	r3, #7
   14268:	d130      	bne.n	142cc <bt_gatt_is_subscribed+0xa0>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1426a:	2300      	movs	r3, #0
   1426c:	f88d 3004 	strb.w	r3, [sp, #4]
   14270:	f642 0303 	movw	r3, #10243	; 0x2803
   14274:	6820      	ldr	r0, [r4, #0]
   14276:	a901      	add	r1, sp, #4
   14278:	f8ad 3006 	strh.w	r3, [sp, #6]
   1427c:	f007 fcaf 	bl	1bbde <bt_uuid_cmp>
   14280:	b940      	cbnz	r0, 14294 <bt_gatt_is_subscribed+0x68>
		if (!(chrc->properties &
   14282:	68e3      	ldr	r3, [r4, #12]
   14284:	799b      	ldrb	r3, [r3, #6]
   14286:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   1428a:	d020      	beq.n	142ce <bt_gatt_is_subscribed+0xa2>
		attr = bt_gatt_attr_next(attr);
   1428c:	4620      	mov	r0, r4
   1428e:	f7ff fdd9 	bl	13e44 <bt_gatt_attr_next>
   14292:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   14294:	2300      	movs	r3, #0
   14296:	6820      	ldr	r0, [r4, #0]
   14298:	f88d 3004 	strb.w	r3, [sp, #4]
   1429c:	f642 1302 	movw	r3, #10498	; 0x2902
   142a0:	a901      	add	r1, sp, #4
   142a2:	f8ad 3006 	strh.w	r3, [sp, #6]
   142a6:	f007 fc9a 	bl	1bbde <bt_uuid_cmp>
   142aa:	b118      	cbz	r0, 142b4 <bt_gatt_is_subscribed+0x88>
		attr = bt_gatt_attr_next(attr);
   142ac:	4620      	mov	r0, r4
   142ae:	f7ff fdc9 	bl	13e44 <bt_gatt_attr_next>
   142b2:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   142b4:	2500      	movs	r5, #0
   142b6:	f642 1302 	movw	r3, #10498	; 0x2902
   142ba:	6820      	ldr	r0, [r4, #0]
   142bc:	a901      	add	r1, sp, #4
   142be:	f88d 5004 	strb.w	r5, [sp, #4]
   142c2:	f8ad 3006 	strh.w	r3, [sp, #6]
   142c6:	f007 fc8a 	bl	1bbde <bt_uuid_cmp>
   142ca:	b110      	cbz	r0, 142d2 <bt_gatt_is_subscribed+0xa6>
		return false;
   142cc:	2000      	movs	r0, #0
}
   142ce:	b003      	add	sp, #12
   142d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   142d2:	68e5      	ldr	r5, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   142d4:	1c6c      	adds	r4, r5, #1
   142d6:	3565      	adds	r5, #101	; 0x65
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   142d8:	4622      	mov	r2, r4
   142da:	4630      	mov	r0, r6
   142dc:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   142e0:	f007 fe63 	bl	1bfaa <bt_conn_is_peer_addr_le>
   142e4:	b118      	cbz	r0, 142ee <bt_gatt_is_subscribed+0xc2>
   142e6:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   142ea:	421f      	tst	r7, r3
   142ec:	d1ef      	bne.n	142ce <bt_gatt_is_subscribed+0xa2>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   142ee:	340a      	adds	r4, #10
   142f0:	42ac      	cmp	r4, r5
   142f2:	d1f1      	bne.n	142d8 <bt_gatt_is_subscribed+0xac>
   142f4:	e7ea      	b.n	142cc <bt_gatt_is_subscribed+0xa0>
   142f6:	bf00      	nop
   142f8:	000220bd 	.word	0x000220bd
   142fc:	0001fbb7 	.word	0x0001fbb7

00014300 <bt_gatt_discover>:
{
   14300:	b5f0      	push	{r4, r5, r6, r7, lr}
   14302:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   14304:	4605      	mov	r5, r0
{
   14306:	b085      	sub	sp, #20
	__ASSERT(conn, "invalid parameters\n");
   14308:	b950      	cbnz	r0, 14320 <bt_gatt_discover+0x20>
   1430a:	4989      	ldr	r1, [pc, #548]	; (14530 <bt_gatt_discover+0x230>)
   1430c:	4889      	ldr	r0, [pc, #548]	; (14534 <bt_gatt_discover+0x234>)
   1430e:	f640 5277 	movw	r2, #3447	; 0xd77
   14312:	f006 f9ab 	bl	1a66c <printk>
   14316:	f640 5177 	movw	r1, #3447	; 0xd77
   1431a:	4885      	ldr	r0, [pc, #532]	; (14530 <bt_gatt_discover+0x230>)
   1431c:	f006 fc4c 	bl	1abb8 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   14320:	b10c      	cbz	r4, 14326 <bt_gatt_discover+0x26>
   14322:	6863      	ldr	r3, [r4, #4]
   14324:	b953      	cbnz	r3, 1433c <bt_gatt_discover+0x3c>
   14326:	4982      	ldr	r1, [pc, #520]	; (14530 <bt_gatt_discover+0x230>)
   14328:	4882      	ldr	r0, [pc, #520]	; (14534 <bt_gatt_discover+0x234>)
   1432a:	f640 5278 	movw	r2, #3448	; 0xd78
   1432e:	f006 f99d 	bl	1a66c <printk>
   14332:	f640 5178 	movw	r1, #3448	; 0xd78
   14336:	487e      	ldr	r0, [pc, #504]	; (14530 <bt_gatt_discover+0x230>)
   14338:	f006 fc3e 	bl	1abb8 <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   1433c:	8923      	ldrh	r3, [r4, #8]
   1433e:	b10b      	cbz	r3, 14344 <bt_gatt_discover+0x44>
   14340:	89e3      	ldrh	r3, [r4, #14]
   14342:	b953      	cbnz	r3, 1435a <bt_gatt_discover+0x5a>
   14344:	497a      	ldr	r1, [pc, #488]	; (14530 <bt_gatt_discover+0x230>)
   14346:	487b      	ldr	r0, [pc, #492]	; (14534 <bt_gatt_discover+0x234>)
   14348:	f640 5279 	movw	r2, #3449	; 0xd79
   1434c:	f006 f98e 	bl	1a66c <printk>
   14350:	f640 5179 	movw	r1, #3449	; 0xd79
   14354:	4876      	ldr	r0, [pc, #472]	; (14530 <bt_gatt_discover+0x230>)
   14356:	f006 fc2f 	bl	1abb8 <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   1435a:	8922      	ldrh	r2, [r4, #8]
   1435c:	89e3      	ldrh	r3, [r4, #14]
   1435e:	429a      	cmp	r2, r3
   14360:	d90a      	bls.n	14378 <bt_gatt_discover+0x78>
   14362:	4973      	ldr	r1, [pc, #460]	; (14530 <bt_gatt_discover+0x230>)
   14364:	4873      	ldr	r0, [pc, #460]	; (14534 <bt_gatt_discover+0x234>)
   14366:	f640 527b 	movw	r2, #3451	; 0xd7b
   1436a:	f006 f97f 	bl	1a66c <printk>
   1436e:	f640 517b 	movw	r1, #3451	; 0xd7b
   14372:	486f      	ldr	r0, [pc, #444]	; (14530 <bt_gatt_discover+0x230>)
   14374:	f006 fc20 	bl	1abb8 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14378:	7aab      	ldrb	r3, [r5, #10]
   1437a:	2b07      	cmp	r3, #7
   1437c:	f040 80d5 	bne.w	1452a <bt_gatt_discover+0x22a>
	switch (params->type) {
   14380:	7c22      	ldrb	r2, [r4, #16]
   14382:	2a05      	cmp	r2, #5
   14384:	f200 80cc 	bhi.w	14520 <bt_gatt_discover+0x220>
   14388:	e8df f002 	tbb	[pc, r2]
   1438c:	64640303 	.word	0x64640303
   14390:	b683      	.short	0xb683
		if (params->uuid) {
   14392:	6823      	ldr	r3, [r4, #0]
   14394:	2b00      	cmp	r3, #0
   14396:	d03e      	beq.n	14416 <bt_gatt_discover+0x116>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
   14398:	2206      	movs	r2, #6
   1439a:	4628      	mov	r0, r5
   1439c:	4611      	mov	r1, r2
   1439e:	f7fe fa0b 	bl	127b8 <bt_att_create_pdu>
	if (!buf) {
   143a2:	4606      	mov	r6, r0
   143a4:	b918      	cbnz	r0, 143ae <bt_gatt_discover+0xae>
		return -ENOMEM;
   143a6:	f06f 000b 	mvn.w	r0, #11
}
   143aa:	b005      	add	sp, #20
   143ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   143ae:	f100 0708 	add.w	r7, r0, #8
   143b2:	2106      	movs	r1, #6
   143b4:	4638      	mov	r0, r7
   143b6:	f001 f9f9 	bl	157ac <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   143ba:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
   143bc:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   143be:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   143c0:	89e3      	ldrh	r3, [r4, #14]
   143c2:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   143c4:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   143c6:	2b00      	cmp	r3, #0
   143c8:	f642 0301 	movw	r3, #10241	; 0x2801
   143cc:	bf08      	it	eq
   143ce:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   143d2:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   143d4:	780a      	ldrb	r2, [r1, #0]
   143d6:	b15a      	cbz	r2, 143f0 <bt_gatt_discover+0xf0>
   143d8:	2a02      	cmp	r2, #2
   143da:	d016      	beq.n	1440a <bt_gatt_discover+0x10a>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   143dc:	4856      	ldr	r0, [pc, #344]	; (14538 <bt_gatt_discover+0x238>)
   143de:	2145      	movs	r1, #69	; 0x45
   143e0:	f006 f944 	bl	1a66c <printk>
		net_buf_unref(buf);
   143e4:	4630      	mov	r0, r6
   143e6:	f001 f8cb 	bl	15580 <net_buf_unref>
	return -EINVAL;
   143ea:	f06f 0015 	mvn.w	r0, #21
   143ee:	e7dc      	b.n	143aa <bt_gatt_discover+0xaa>
	net_buf_simple_add_le16(&buf->b, val);
   143f0:	4638      	mov	r0, r7
   143f2:	8849      	ldrh	r1, [r1, #2]
   143f4:	f008 fecf 	bl	1d196 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
   143f8:	4623      	mov	r3, r4
   143fa:	4a50      	ldr	r2, [pc, #320]	; (1453c <bt_gatt_discover+0x23c>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   143fc:	4631      	mov	r1, r6
   143fe:	4628      	mov	r0, r5
}
   14400:	b005      	add	sp, #20
   14402:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14406:	f7ff b811 	b.w	1342c <gatt_send.constprop.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1440a:	2210      	movs	r2, #16
   1440c:	4638      	mov	r0, r7
   1440e:	3101      	adds	r1, #1
   14410:	f008 feae 	bl	1d170 <net_buf_simple_add_mem>
   14414:	e7f0      	b.n	143f8 <bt_gatt_discover+0xf8>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
   14416:	2204      	movs	r2, #4
   14418:	2110      	movs	r1, #16
   1441a:	4628      	mov	r0, r5
   1441c:	f7fe f9cc 	bl	127b8 <bt_att_create_pdu>
	if (!buf) {
   14420:	4606      	mov	r6, r0
   14422:	2800      	cmp	r0, #0
   14424:	d0bf      	beq.n	143a6 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   14426:	f100 0708 	add.w	r7, r0, #8
   1442a:	2104      	movs	r1, #4
   1442c:	4638      	mov	r0, r7
   1442e:	f001 f9bd 	bl	157ac <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14432:	8923      	ldrh	r3, [r4, #8]
   14434:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   14436:	89e3      	ldrh	r3, [r4, #14]
   14438:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1443a:	7c23      	ldrb	r3, [r4, #16]
   1443c:	b93b      	cbnz	r3, 1444e <bt_gatt_discover+0x14e>
	net_buf_simple_add_le16(&buf->b, val);
   1443e:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   14442:	4638      	mov	r0, r7
   14444:	f008 fea7 	bl	1d196 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
   14448:	4623      	mov	r3, r4
   1444a:	4a3d      	ldr	r2, [pc, #244]	; (14540 <bt_gatt_discover+0x240>)
   1444c:	e7d6      	b.n	143fc <bt_gatt_discover+0xfc>
   1444e:	f642 0101 	movw	r1, #10241	; 0x2801
   14452:	e7f6      	b.n	14442 <bt_gatt_discover+0x142>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   14454:	2204      	movs	r2, #4
   14456:	2108      	movs	r1, #8
   14458:	4628      	mov	r0, r5
   1445a:	f7fe f9ad 	bl	127b8 <bt_att_create_pdu>
	if (!buf) {
   1445e:	4606      	mov	r6, r0
   14460:	2800      	cmp	r0, #0
   14462:	d0a0      	beq.n	143a6 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   14464:	f100 0708 	add.w	r7, r0, #8
   14468:	2104      	movs	r1, #4
   1446a:	4638      	mov	r0, r7
   1446c:	f001 f99e 	bl	157ac <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14470:	8923      	ldrh	r3, [r4, #8]
   14472:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   14474:	89e3      	ldrh	r3, [r4, #14]
   14476:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14478:	7c23      	ldrb	r3, [r4, #16]
	net_buf_simple_add_le16(&buf->b, val);
   1447a:	4638      	mov	r0, r7
   1447c:	2b02      	cmp	r3, #2
   1447e:	bf0c      	ite	eq
   14480:	f642 0102 	movweq	r1, #10242	; 0x2802
   14484:	f642 0103 	movwne	r1, #10243	; 0x2803
   14488:	f008 fe85 	bl	1d196 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
   1448c:	4623      	mov	r3, r4
   1448e:	4a2d      	ldr	r2, [pc, #180]	; (14544 <bt_gatt_discover+0x244>)
   14490:	e7b4      	b.n	143fc <bt_gatt_discover+0xfc>
		if (params->uuid &&
   14492:	6820      	ldr	r0, [r4, #0]
   14494:	b380      	cbz	r0, 144f8 <bt_gatt_discover+0x1f8>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   14496:	2600      	movs	r6, #0
   14498:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1449c:	4669      	mov	r1, sp
   1449e:	f88d 6000 	strb.w	r6, [sp]
   144a2:	f8ad 3002 	strh.w	r3, [sp, #2]
   144a6:	f007 fb9a 	bl	1bbde <bt_uuid_cmp>
		if (params->uuid &&
   144aa:	2800      	cmp	r0, #0
   144ac:	d09d      	beq.n	143ea <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   144ae:	f642 0301 	movw	r3, #10241	; 0x2801
   144b2:	6820      	ldr	r0, [r4, #0]
   144b4:	a901      	add	r1, sp, #4
   144b6:	f88d 6004 	strb.w	r6, [sp, #4]
   144ba:	f8ad 3006 	strh.w	r3, [sp, #6]
   144be:	f007 fb8e 	bl	1bbde <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   144c2:	2800      	cmp	r0, #0
   144c4:	d091      	beq.n	143ea <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   144c6:	f642 0302 	movw	r3, #10242	; 0x2802
   144ca:	6820      	ldr	r0, [r4, #0]
   144cc:	a902      	add	r1, sp, #8
   144ce:	f88d 6008 	strb.w	r6, [sp, #8]
   144d2:	f8ad 300a 	strh.w	r3, [sp, #10]
   144d6:	f007 fb82 	bl	1bbde <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   144da:	2800      	cmp	r0, #0
   144dc:	d085      	beq.n	143ea <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   144de:	f642 0303 	movw	r3, #10243	; 0x2803
   144e2:	6820      	ldr	r0, [r4, #0]
   144e4:	a903      	add	r1, sp, #12
   144e6:	f88d 600c 	strb.w	r6, [sp, #12]
   144ea:	f8ad 300e 	strh.w	r3, [sp, #14]
   144ee:	f007 fb76 	bl	1bbde <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   144f2:	2800      	cmp	r0, #0
   144f4:	f43f af79 	beq.w	143ea <bt_gatt_discover+0xea>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
   144f8:	2204      	movs	r2, #4
   144fa:	4628      	mov	r0, r5
   144fc:	4611      	mov	r1, r2
   144fe:	f7fe f95b 	bl	127b8 <bt_att_create_pdu>
	if (!buf) {
   14502:	4606      	mov	r6, r0
   14504:	2800      	cmp	r0, #0
   14506:	f43f af4e 	beq.w	143a6 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   1450a:	2104      	movs	r1, #4
   1450c:	3008      	adds	r0, #8
   1450e:	f001 f94d 	bl	157ac <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14512:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   14514:	4a0c      	ldr	r2, [pc, #48]	; (14548 <bt_gatt_discover+0x248>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   14516:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   14518:	89e3      	ldrh	r3, [r4, #14]
   1451a:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   1451c:	4623      	mov	r3, r4
   1451e:	e76d      	b.n	143fc <bt_gatt_discover+0xfc>
		BT_ERR("Invalid discovery type: %u", params->type);
   14520:	2145      	movs	r1, #69	; 0x45
   14522:	480a      	ldr	r0, [pc, #40]	; (1454c <bt_gatt_discover+0x24c>)
   14524:	f006 f8a2 	bl	1a66c <printk>
   14528:	e75f      	b.n	143ea <bt_gatt_discover+0xea>
		return -ENOTCONN;
   1452a:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1452e:	e73c      	b.n	143aa <bt_gatt_discover+0xaa>
   14530:	000220bd 	.word	0x000220bd
   14534:	0001fbb7 	.word	0x0001fbb7
   14538:	0002217c 	.word	0x0002217c
   1453c:	0001cf7b 	.word	0x0001cf7b
   14540:	00014551 	.word	0x00014551
   14544:	00014659 	.word	0x00014659
   14548:	00014909 	.word	0x00014909
   1454c:	00022196 	.word	0x00022196

00014550 <gatt_read_group_rsp>:
{
   14550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14554:	b08f      	sub	sp, #60	; 0x3c
   14556:	4681      	mov	r9, r0
   14558:	4617      	mov	r7, r2
   1455a:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
   1455c:	b131      	cbz	r1, 1456c <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   1455e:	462a      	mov	r2, r5
   14560:	2100      	movs	r1, #0
   14562:	686b      	ldr	r3, [r5, #4]
}
   14564:	b00f      	add	sp, #60	; 0x3c
   14566:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   1456a:	4718      	bx	r3
	switch (rsp->len) {
   1456c:	7812      	ldrb	r2, [r2, #0]
   1456e:	2a06      	cmp	r2, #6
   14570:	d00d      	beq.n	1458e <gatt_read_group_rsp+0x3e>
   14572:	2a14      	cmp	r2, #20
   14574:	d021      	beq.n	145ba <gatt_read_group_rsp+0x6a>
		BT_ERR("Invalid data len %u", rsp->len);
   14576:	2145      	movs	r1, #69	; 0x45
   14578:	4836      	ldr	r0, [pc, #216]	; (14654 <gatt_read_group_rsp+0x104>)
   1457a:	f006 f877 	bl	1a66c <printk>
	params->func(conn, NULL, params);
   1457e:	462a      	mov	r2, r5
   14580:	2100      	movs	r1, #0
   14582:	4648      	mov	r0, r9
   14584:	686b      	ldr	r3, [r5, #4]
   14586:	4798      	blx	r3
}
   14588:	b00f      	add	sp, #60	; 0x3c
   1458a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   1458e:	f88d 1010 	strb.w	r1, [sp, #16]
	uint16_t start_handle, end_handle = 0U;
   14592:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   14594:	3b01      	subs	r3, #1
   14596:	b29c      	uxth	r4, r3
   14598:	f107 0801 	add.w	r8, r7, #1
   1459c:	783b      	ldrb	r3, [r7, #0]
   1459e:	42a3      	cmp	r3, r4
   145a0:	d90f      	bls.n	145c2 <gatt_read_group_rsp+0x72>
	if (length == 0U && end_handle) {
   145a2:	2c00      	cmp	r4, #0
   145a4:	d1eb      	bne.n	1457e <gatt_read_group_rsp+0x2e>
   145a6:	2e00      	cmp	r6, #0
   145a8:	d0e9      	beq.n	1457e <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   145aa:	462a      	mov	r2, r5
   145ac:	4631      	mov	r1, r6
   145ae:	4648      	mov	r0, r9
}
   145b0:	b00f      	add	sp, #60	; 0x3c
   145b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   145b6:	f008 bcc3 	b.w	1cf40 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   145ba:	2202      	movs	r2, #2
   145bc:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   145c0:	e7e7      	b.n	14592 <gatt_read_group_rsp+0x42>
		struct bt_gatt_attr attr = {};
   145c2:	2214      	movs	r2, #20
   145c4:	2100      	movs	r1, #0
   145c6:	a809      	add	r0, sp, #36	; 0x24
   145c8:	f007 fabf 	bl	1bb4a <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   145cc:	f8b8 a000 	ldrh.w	sl, [r8]
   145d0:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   145d4:	2b00      	cmp	r3, #0
   145d6:	d0d2      	beq.n	1457e <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   145d8:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   145dc:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   145e0:	2e00      	cmp	r6, #0
   145e2:	d0cc      	beq.n	1457e <gatt_read_group_rsp+0x2e>
   145e4:	42b3      	cmp	r3, r6
   145e6:	d8ca      	bhi.n	1457e <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   145e8:	f89d 3010 	ldrb.w	r3, [sp, #16]
   145ec:	b323      	cbz	r3, 14638 <gatt_read_group_rsp+0xe8>
   145ee:	2b02      	cmp	r3, #2
   145f0:	d02a      	beq.n	14648 <gatt_read_group_rsp+0xf8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   145f2:	f04f 0300 	mov.w	r3, #0
   145f6:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   145fa:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   145fc:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   145fe:	2b00      	cmp	r3, #0
   14600:	f642 0301 	movw	r3, #10241	; 0x2801
   14604:	bf08      	it	eq
   14606:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   1460a:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   1460e:	ab04      	add	r3, sp, #16
   14610:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   14612:	ab01      	add	r3, sp, #4
   14614:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   14616:	ab02      	add	r3, sp, #8
   14618:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1461a:	4648      	mov	r0, r9
   1461c:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
   1461e:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
   14622:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14626:	a909      	add	r1, sp, #36	; 0x24
   14628:	4798      	blx	r3
   1462a:	2800      	cmp	r0, #0
   1462c:	d0ac      	beq.n	14588 <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1462e:	783a      	ldrb	r2, [r7, #0]
   14630:	1aa4      	subs	r4, r4, r2
   14632:	b2a4      	uxth	r4, r4
   14634:	4490      	add	r8, r2
   14636:	e7b1      	b.n	1459c <gatt_read_group_rsp+0x4c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   14638:	2202      	movs	r2, #2
   1463a:	f108 0104 	add.w	r1, r8, #4
   1463e:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   14642:	f007 fa57 	bl	1baf4 <memcpy>
			break;
   14646:	e7d4      	b.n	145f2 <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   14648:	2210      	movs	r2, #16
   1464a:	f108 0104 	add.w	r1, r8, #4
   1464e:	f10d 0011 	add.w	r0, sp, #17
   14652:	e7f6      	b.n	14642 <gatt_read_group_rsp+0xf2>
   14654:	000221b6 	.word	0x000221b6

00014658 <gatt_read_type_rsp>:
{
   14658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1465c:	b091      	sub	sp, #68	; 0x44
   1465e:	4607      	mov	r7, r0
   14660:	4690      	mov	r8, r2
   14662:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	if (err) {
   14664:	b131      	cbz	r1, 14674 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   14666:	462a      	mov	r2, r5
   14668:	2100      	movs	r1, #0
   1466a:	686b      	ldr	r3, [r5, #4]
}
   1466c:	b011      	add	sp, #68	; 0x44
   1466e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   14672:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14674:	7c28      	ldrb	r0, [r5, #16]
	switch (rsp->len) {
   14676:	7812      	ldrb	r2, [r2, #0]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   14678:	2802      	cmp	r0, #2
   1467a:	f040 8089 	bne.w	14790 <gatt_read_type_rsp+0x138>
	switch (rsp->len) {
   1467e:	2a06      	cmp	r2, #6
   14680:	d01c      	beq.n	146bc <gatt_read_type_rsp+0x64>
   14682:	2a08      	cmp	r2, #8
   14684:	f040 8088 	bne.w	14798 <gatt_read_type_rsp+0x140>
		u.uuid.type = BT_UUID_TYPE_16;
   14688:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   1468c:	2600      	movs	r6, #0
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1468e:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   14690:	1e5c      	subs	r4, r3, #1
   14692:	b2a4      	uxth	r4, r4
   14694:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
   14698:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
   1469c:	f898 3000 	ldrb.w	r3, [r8]
   146a0:	42a3      	cmp	r3, r4
   146a2:	d90e      	bls.n	146c2 <gatt_read_type_rsp+0x6a>
	if (length == 0U && handle) {
   146a4:	2c00      	cmp	r4, #0
   146a6:	d17b      	bne.n	147a0 <gatt_read_type_rsp+0x148>
   146a8:	2e00      	cmp	r6, #0
   146aa:	d079      	beq.n	147a0 <gatt_read_type_rsp+0x148>
	gatt_discover_next(conn, handle, params);
   146ac:	462a      	mov	r2, r5
   146ae:	4631      	mov	r1, r6
   146b0:	4638      	mov	r0, r7
}
   146b2:	b011      	add	sp, #68	; 0x44
   146b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   146b8:	f008 bc42 	b.w	1cf40 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   146bc:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
   146c0:	e7e4      	b.n	1468c <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
   146c2:	f8b9 3000 	ldrh.w	r3, [r9]
   146c6:	b29e      	uxth	r6, r3
		if (!handle) {
   146c8:	2e00      	cmp	r6, #0
   146ca:	d069      	beq.n	147a0 <gatt_read_type_rsp+0x148>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   146cc:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   146d0:	f8ad 2014 	strh.w	r2, [sp, #20]
   146d4:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   146d6:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   146da:	b291      	uxth	r1, r2
   146dc:	f8ad 2016 	strh.w	r2, [sp, #22]
		switch (u.uuid.type) {
   146e0:	f89d 2018 	ldrb.w	r2, [sp, #24]
   146e4:	b182      	cbz	r2, 14708 <gatt_read_type_rsp+0xb0>
   146e6:	2a02      	cmp	r2, #2
   146e8:	d019      	beq.n	1471e <gatt_read_type_rsp+0xc6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   146ea:	6829      	ldr	r1, [r5, #0]
   146ec:	2900      	cmp	r1, #0
   146ee:	d036      	beq.n	1475e <gatt_read_type_rsp+0x106>
   146f0:	4650      	mov	r0, sl
   146f2:	9301      	str	r3, [sp, #4]
   146f4:	f007 fa73 	bl	1bbde <bt_uuid_cmp>
   146f8:	9b01      	ldr	r3, [sp, #4]
   146fa:	b380      	cbz	r0, 1475e <gatt_read_type_rsp+0x106>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   146fc:	f898 2000 	ldrb.w	r2, [r8]
   14700:	1aa4      	subs	r4, r4, r2
   14702:	b2a4      	uxth	r4, r4
   14704:	4491      	add	r9, r2
   14706:	e7c9      	b.n	1469c <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
   14708:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   1470c:	f899 2006 	ldrb.w	r2, [r9, #6]
   14710:	f899 1007 	ldrb.w	r1, [r9, #7]
   14714:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14718:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
   1471c:	e7e5      	b.n	146ea <gatt_read_type_rsp+0x92>
			params->_included.start_handle = value.start_handle;
   1471e:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   14720:	81a9      	strh	r1, [r5, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14722:	4638      	mov	r0, r7
   14724:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
   14726:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14728:	9201      	str	r2, [sp, #4]
   1472a:	f7fe f845 	bl	127b8 <bt_att_create_pdu>
	if (!buf) {
   1472e:	4604      	mov	r4, r0
   14730:	b190      	cbz	r0, 14758 <gatt_read_type_rsp+0x100>
   14732:	9a01      	ldr	r2, [sp, #4]
   14734:	3008      	adds	r0, #8
   14736:	4611      	mov	r1, r2
   14738:	f001 f838 	bl	157ac <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   1473c:	896b      	ldrh	r3, [r5, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   1473e:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   14740:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   14742:	4a49      	ldr	r2, [pc, #292]	; (14868 <gatt_read_type_rsp+0x210>)
   14744:	462b      	mov	r3, r5
   14746:	4638      	mov	r0, r7
   14748:	f7fe fe70 	bl	1342c <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
   1474c:	b286      	uxth	r6, r0
	if (!handle) {
   1474e:	2e00      	cmp	r6, #0
   14750:	d1ac      	bne.n	146ac <gatt_read_type_rsp+0x54>
}
   14752:	b011      	add	sp, #68	; 0x44
   14754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   14758:	f06f 000b 	mvn.w	r0, #11
   1475c:	e7f6      	b.n	1474c <gatt_read_type_rsp+0xf4>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1475e:	f642 0202 	movw	r2, #10242	; 0x2802
   14762:	f8ad 200e 	strh.w	r2, [sp, #14]
   14766:	aa03      	add	r2, sp, #12
   14768:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
   1476c:	aa04      	add	r2, sp, #16
   1476e:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
   14770:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14774:	462a      	mov	r2, r5
   14776:	4638      	mov	r0, r7
   14778:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1477a:	f88d b00c 	strb.w	fp, [sp, #12]
   1477e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   14782:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14786:	a90b      	add	r1, sp, #44	; 0x2c
   14788:	4798      	blx	r3
   1478a:	2800      	cmp	r0, #0
   1478c:	d1b6      	bne.n	146fc <gatt_read_type_rsp+0xa4>
   1478e:	e7e0      	b.n	14752 <gatt_read_type_rsp+0xfa>
	switch (rsp->len) {
   14790:	2a07      	cmp	r2, #7
   14792:	d00b      	beq.n	147ac <gatt_read_type_rsp+0x154>
   14794:	2a15      	cmp	r2, #21
   14796:	d02e      	beq.n	147f6 <gatt_read_type_rsp+0x19e>
		BT_ERR("Invalid data len %u", rsp->len);
   14798:	2145      	movs	r1, #69	; 0x45
   1479a:	4834      	ldr	r0, [pc, #208]	; (1486c <gatt_read_type_rsp+0x214>)
   1479c:	f005 ff66 	bl	1a66c <printk>
	params->func(conn, NULL, params);
   147a0:	462a      	mov	r2, r5
   147a2:	2100      	movs	r1, #0
   147a4:	4638      	mov	r0, r7
   147a6:	686b      	ldr	r3, [r5, #4]
   147a8:	4798      	blx	r3
	if (!handle) {
   147aa:	e7d2      	b.n	14752 <gatt_read_type_rsp+0xfa>
		u.uuid.type = BT_UUID_TYPE_16;
   147ac:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   147b0:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   147b2:	1e5c      	subs	r4, r3, #1
   147b4:	b2a4      	uxth	r4, r4
   147b6:	f108 0901 	add.w	r9, r8, #1
   147ba:	f10d 0a18 	add.w	sl, sp, #24
   147be:	f898 3000 	ldrb.w	r3, [r8]
   147c2:	42a3      	cmp	r3, r4
   147c4:	f63f af6e 	bhi.w	146a4 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
   147c8:	f8b9 b000 	ldrh.w	fp, [r9]
   147cc:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   147d0:	2e00      	cmp	r6, #0
   147d2:	d0e5      	beq.n	147a0 <gatt_read_type_rsp+0x148>
		switch (u.uuid.type) {
   147d4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   147d8:	b18b      	cbz	r3, 147fe <gatt_read_type_rsp+0x1a6>
   147da:	2b02      	cmp	r3, #2
   147dc:	d018      	beq.n	14810 <gatt_read_type_rsp+0x1b8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   147de:	6829      	ldr	r1, [r5, #0]
   147e0:	b1f1      	cbz	r1, 14820 <gatt_read_type_rsp+0x1c8>
   147e2:	4650      	mov	r0, sl
   147e4:	f007 f9fb 	bl	1bbde <bt_uuid_cmp>
   147e8:	b1d0      	cbz	r0, 14820 <gatt_read_type_rsp+0x1c8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   147ea:	f898 2000 	ldrb.w	r2, [r8]
   147ee:	1aa4      	subs	r4, r4, r2
   147f0:	b2a4      	uxth	r4, r4
   147f2:	4491      	add	r9, r2
   147f4:	e7e3      	b.n	147be <gatt_read_type_rsp+0x166>
		u.uuid.type = BT_UUID_TYPE_128;
   147f6:	2202      	movs	r2, #2
   147f8:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
   147fc:	e7d8      	b.n	147b0 <gatt_read_type_rsp+0x158>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   147fe:	f899 3005 	ldrb.w	r3, [r9, #5]
   14802:	f899 2006 	ldrb.w	r2, [r9, #6]
   14806:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1480a:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
   1480e:	e7e6      	b.n	147de <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   14810:	2210      	movs	r2, #16
   14812:	f109 0105 	add.w	r1, r9, #5
   14816:	f10d 0019 	add.w	r0, sp, #25
   1481a:	f007 f96b 	bl	1baf4 <memcpy>
			break;
   1481e:	e7de      	b.n	147de <gatt_read_type_rsp+0x186>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14820:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   14824:	f899 3002 	ldrb.w	r3, [r9, #2]
   14828:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1482c:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14830:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14834:	2300      	movs	r3, #0
   14836:	f8ad 200e 	strh.w	r2, [sp, #14]
   1483a:	aa03      	add	r2, sp, #12
   1483c:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
   14840:	aa04      	add	r2, sp, #16
   14842:	f88d 300c 	strb.w	r3, [sp, #12]
   14846:	930d      	str	r3, [sp, #52]	; 0x34
   14848:	920e      	str	r2, [sp, #56]	; 0x38
   1484a:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1484e:	462a      	mov	r2, r5
   14850:	4638      	mov	r0, r7
   14852:	686b      	ldr	r3, [r5, #4]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   14854:	f8cd a010 	str.w	sl, [sp, #16]
		attr.handle = handle;
   14858:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1485c:	a90b      	add	r1, sp, #44	; 0x2c
   1485e:	4798      	blx	r3
   14860:	2800      	cmp	r0, #0
   14862:	d1c2      	bne.n	147ea <gatt_read_type_rsp+0x192>
   14864:	e775      	b.n	14752 <gatt_read_type_rsp+0xfa>
   14866:	bf00      	nop
   14868:	00014871 	.word	0x00014871
   1486c:	000221b6 	.word	0x000221b6

00014870 <read_included_uuid_cb>:
{
   14870:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
   14872:	2b10      	cmp	r3, #16
{
   14874:	b08e      	sub	sp, #56	; 0x38
   14876:	4611      	mov	r1, r2
   14878:	4605      	mov	r5, r0
   1487a:	461a      	mov	r2, r3
   1487c:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   1487e:	d00b      	beq.n	14898 <read_included_uuid_cb+0x28>
		BT_ERR("Invalid data len %u", length);
   14880:	2145      	movs	r1, #69	; 0x45
   14882:	4820      	ldr	r0, [pc, #128]	; (14904 <read_included_uuid_cb+0x94>)
   14884:	f005 fef2 	bl	1a66c <printk>
		params->func(conn, NULL, params);
   14888:	4622      	mov	r2, r4
   1488a:	2100      	movs	r1, #0
   1488c:	4628      	mov	r0, r5
   1488e:	6863      	ldr	r3, [r4, #4]
}
   14890:	b00e      	add	sp, #56	; 0x38
   14892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   14896:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   14898:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   1489a:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
   1489c:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   148a0:	89a3      	ldrh	r3, [r4, #12]
	memcpy(u.u128.val, pdu, length);
   148a2:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
   148a6:	f8ad 300e 	strh.w	r3, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   148aa:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   148ac:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   148ae:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   148b2:	f007 f91f 	bl	1baf4 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   148b6:	6821      	ldr	r1, [r4, #0]
   148b8:	b9c9      	cbnz	r1, 148ee <read_included_uuid_cb+0x7e>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   148ba:	f642 0202 	movw	r2, #10242	; 0x2802
   148be:	2300      	movs	r3, #0
   148c0:	f8ad 2006 	strh.w	r2, [sp, #6]
   148c4:	aa01      	add	r2, sp, #4
   148c6:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   148ca:	f88d 3004 	strb.w	r3, [sp, #4]
   148ce:	930b      	str	r3, [sp, #44]	; 0x2c
   148d0:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   148d4:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   148d6:	aa02      	add	r2, sp, #8
   148d8:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   148da:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   148de:	4622      	mov	r2, r4
   148e0:	4628      	mov	r0, r5
   148e2:	6863      	ldr	r3, [r4, #4]
   148e4:	a909      	add	r1, sp, #36	; 0x24
   148e6:	4798      	blx	r3
   148e8:	b930      	cbnz	r0, 148f8 <read_included_uuid_cb+0x88>
}
   148ea:	b00e      	add	sp, #56	; 0x38
   148ec:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   148ee:	4630      	mov	r0, r6
   148f0:	f007 f975 	bl	1bbde <bt_uuid_cmp>
   148f4:	2800      	cmp	r0, #0
   148f6:	d0e0      	beq.n	148ba <read_included_uuid_cb+0x4a>
	gatt_discover_next(conn, params->start_handle, params);
   148f8:	4622      	mov	r2, r4
   148fa:	4628      	mov	r0, r5
   148fc:	8921      	ldrh	r1, [r4, #8]
   148fe:	f008 fb1f 	bl	1cf40 <gatt_discover_next>
	return;
   14902:	e7f2      	b.n	148ea <read_included_uuid_cb+0x7a>
   14904:	000221b6 	.word	0x000221b6

00014908 <gatt_find_info_rsp>:
{
   14908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1490c:	b08f      	sub	sp, #60	; 0x3c
   1490e:	4680      	mov	r8, r0
   14910:	4614      	mov	r4, r2
   14912:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   14914:	b941      	cbnz	r1, 14928 <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   14916:	7812      	ldrb	r2, [r2, #0]
   14918:	2a01      	cmp	r2, #1
   1491a:	d00b      	beq.n	14934 <gatt_find_info_rsp+0x2c>
   1491c:	2a02      	cmp	r2, #2
   1491e:	d022      	beq.n	14966 <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
   14920:	2145      	movs	r1, #69	; 0x45
   14922:	484b      	ldr	r0, [pc, #300]	; (14a50 <gatt_find_info_rsp+0x148>)
   14924:	f005 fea2 	bl	1a66c <printk>
	params->func(conn, NULL, params);
   14928:	4632      	mov	r2, r6
   1492a:	2100      	movs	r1, #0
   1492c:	4640      	mov	r0, r8
   1492e:	6873      	ldr	r3, [r6, #4]
   14930:	4798      	blx	r3
   14932:	e08a      	b.n	14a4a <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i16);
   14934:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
   14938:	f88d 1010 	strb.w	r1, [sp, #16]
	length--;
   1493c:	3b01      	subs	r3, #1
   1493e:	b29b      	uxth	r3, r3
	if (length < len) {
   14940:	4553      	cmp	r3, sl
   14942:	d3f1      	bcc.n	14928 <gatt_find_info_rsp+0x20>
	bool skip = false;
   14944:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   14948:	fbb3 f3fa 	udiv	r3, r3, sl
	uint16_t handle = 0U;
   1494c:	46cb      	mov	fp, r9
			skip = false;
   1494e:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
   14950:	9300      	str	r3, [sp, #0]
   14952:	3401      	adds	r4, #1
   14954:	af04      	add	r7, sp, #16
   14956:	9b00      	ldr	r3, [sp, #0]
   14958:	b953      	cbnz	r3, 14970 <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
   1495a:	4632      	mov	r2, r6
   1495c:	4659      	mov	r1, fp
   1495e:	4640      	mov	r0, r8
   14960:	f008 faee 	bl	1cf40 <gatt_discover_next>
	return;
   14964:	e071      	b.n	14a4a <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i128);
   14966:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
   1496a:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   1496e:	e7e5      	b.n	1493c <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
   14970:	8823      	ldrh	r3, [r4, #0]
   14972:	9301      	str	r3, [sp, #4]
   14974:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   14978:	f1b9 0f00 	cmp.w	r9, #0
   1497c:	d151      	bne.n	14a22 <gatt_find_info_rsp+0x11a>
		switch (u.uuid.type) {
   1497e:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14982:	2b00      	cmp	r3, #0
   14984:	d03a      	beq.n	149fc <gatt_find_info_rsp+0xf4>
   14986:	2b02      	cmp	r3, #2
   14988:	d03f      	beq.n	14a0a <gatt_find_info_rsp+0x102>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1498a:	6831      	ldr	r1, [r6, #0]
   1498c:	2900      	cmp	r1, #0
   1498e:	d143      	bne.n	14a18 <gatt_find_info_rsp+0x110>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   14990:	7c33      	ldrb	r3, [r6, #16]
   14992:	2b04      	cmp	r3, #4
   14994:	d148      	bne.n	14a28 <gatt_find_info_rsp+0x120>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   14996:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1499a:	4638      	mov	r0, r7
   1499c:	a902      	add	r1, sp, #8
   1499e:	f88d 5008 	strb.w	r5, [sp, #8]
   149a2:	f8ad 300a 	strh.w	r3, [sp, #10]
   149a6:	f007 f91a 	bl	1bbde <bt_uuid_cmp>
   149aa:	b310      	cbz	r0, 149f2 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   149ac:	f642 0301 	movw	r3, #10241	; 0x2801
   149b0:	4638      	mov	r0, r7
   149b2:	a903      	add	r1, sp, #12
   149b4:	f88d 500c 	strb.w	r5, [sp, #12]
   149b8:	f8ad 300e 	strh.w	r3, [sp, #14]
   149bc:	f007 f90f 	bl	1bbde <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   149c0:	b1b8      	cbz	r0, 149f2 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   149c2:	f642 0302 	movw	r3, #10242	; 0x2802
   149c6:	4638      	mov	r0, r7
   149c8:	a909      	add	r1, sp, #36	; 0x24
   149ca:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   149ce:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   149d2:	f007 f904 	bl	1bbde <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   149d6:	b160      	cbz	r0, 149f2 <gatt_find_info_rsp+0xea>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   149d8:	f642 0303 	movw	r3, #10243	; 0x2803
   149dc:	4638      	mov	r0, r7
   149de:	a909      	add	r1, sp, #36	; 0x24
   149e0:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   149e4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   149e8:	f007 f8f9 	bl	1bbde <bt_uuid_cmp>
   149ec:	b9e0      	cbnz	r0, 14a28 <gatt_find_info_rsp+0x120>
				skip = true;
   149ee:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   149f2:	9b00      	ldr	r3, [sp, #0]
   149f4:	4454      	add	r4, sl
   149f6:	3b01      	subs	r3, #1
   149f8:	9300      	str	r3, [sp, #0]
   149fa:	e7ac      	b.n	14956 <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   149fc:	78a3      	ldrb	r3, [r4, #2]
   149fe:	78e2      	ldrb	r2, [r4, #3]
   14a00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14a04:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   14a08:	e7bf      	b.n	1498a <gatt_find_info_rsp+0x82>
			memcpy(u.u128.val, info.i128->uuid, 16);
   14a0a:	2210      	movs	r2, #16
   14a0c:	1ca1      	adds	r1, r4, #2
   14a0e:	f10d 0011 	add.w	r0, sp, #17
   14a12:	f007 f86f 	bl	1baf4 <memcpy>
			break;
   14a16:	e7b8      	b.n	1498a <gatt_find_info_rsp+0x82>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   14a18:	4638      	mov	r0, r7
   14a1a:	f007 f8e0 	bl	1bbde <bt_uuid_cmp>
   14a1e:	2800      	cmp	r0, #0
   14a20:	d0b6      	beq.n	14990 <gatt_find_info_rsp+0x88>
			skip = false;
   14a22:	f04f 0900 	mov.w	r9, #0
   14a26:	e7e4      	b.n	149f2 <gatt_find_info_rsp+0xea>
		attr.handle = handle;
   14a28:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14a2c:	4632      	mov	r2, r6
		attr.handle = handle;
   14a2e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14a32:	4640      	mov	r0, r8
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14a34:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   14a38:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14a3c:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   14a3e:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   14a42:	a909      	add	r1, sp, #36	; 0x24
   14a44:	4798      	blx	r3
   14a46:	2800      	cmp	r0, #0
   14a48:	d1d3      	bne.n	149f2 <gatt_find_info_rsp+0xea>
}
   14a4a:	b00f      	add	sp, #60	; 0x3c
   14a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a50:	000221cf 	.word	0x000221cf

00014a54 <bt_gatt_read>:
{
   14a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14a58:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   14a5a:	4605      	mov	r5, r0
   14a5c:	b950      	cbnz	r0, 14a74 <bt_gatt_read+0x20>
   14a5e:	4945      	ldr	r1, [pc, #276]	; (14b74 <bt_gatt_read+0x120>)
   14a60:	4845      	ldr	r0, [pc, #276]	; (14b78 <bt_gatt_read+0x124>)
   14a62:	f640 62a6 	movw	r2, #3750	; 0xea6
   14a66:	f005 fe01 	bl	1a66c <printk>
   14a6a:	f640 61a6 	movw	r1, #3750	; 0xea6
   14a6e:	4841      	ldr	r0, [pc, #260]	; (14b74 <bt_gatt_read+0x120>)
   14a70:	f006 f8a2 	bl	1abb8 <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   14a74:	b10c      	cbz	r4, 14a7a <bt_gatt_read+0x26>
   14a76:	6823      	ldr	r3, [r4, #0]
   14a78:	b953      	cbnz	r3, 14a90 <bt_gatt_read+0x3c>
   14a7a:	493e      	ldr	r1, [pc, #248]	; (14b74 <bt_gatt_read+0x120>)
   14a7c:	483e      	ldr	r0, [pc, #248]	; (14b78 <bt_gatt_read+0x124>)
   14a7e:	f640 62a7 	movw	r2, #3751	; 0xea7
   14a82:	f005 fdf3 	bl	1a66c <printk>
   14a86:	f640 61a7 	movw	r1, #3751	; 0xea7
   14a8a:	483a      	ldr	r0, [pc, #232]	; (14b74 <bt_gatt_read+0x120>)
   14a8c:	f006 f894 	bl	1abb8 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14a90:	7aab      	ldrb	r3, [r5, #10]
   14a92:	2b07      	cmp	r3, #7
   14a94:	d16a      	bne.n	14b6c <bt_gatt_read+0x118>
	if (params->handle_count == 0) {
   14a96:	6862      	ldr	r2, [r4, #4]
   14a98:	bb22      	cbnz	r2, 14ae4 <bt_gatt_read+0x90>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   14a9a:	2204      	movs	r2, #4
   14a9c:	2108      	movs	r1, #8
   14a9e:	4628      	mov	r0, r5
   14aa0:	f7fd fe8a 	bl	127b8 <bt_att_create_pdu>
	if (!buf) {
   14aa4:	4606      	mov	r6, r0
   14aa6:	b918      	cbnz	r0, 14ab0 <bt_gatt_read+0x5c>
		return -ENOMEM;
   14aa8:	f06f 000b 	mvn.w	r0, #11
}
   14aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14ab0:	f100 0708 	add.w	r7, r0, #8
   14ab4:	2104      	movs	r1, #4
   14ab6:	4638      	mov	r0, r7
   14ab8:	f000 fe78 	bl	157ac <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   14abc:	8923      	ldrh	r3, [r4, #8]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   14abe:	68e1      	ldr	r1, [r4, #12]
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   14ac0:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
   14ac2:	8963      	ldrh	r3, [r4, #10]
   14ac4:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   14ac6:	780b      	ldrb	r3, [r1, #0]
   14ac8:	b933      	cbnz	r3, 14ad8 <bt_gatt_read+0x84>
	net_buf_simple_add_le16(&buf->b, val);
   14aca:	4638      	mov	r0, r7
   14acc:	8849      	ldrh	r1, [r1, #2]
   14ace:	f008 fb62 	bl	1d196 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14ad2:	4623      	mov	r3, r4
   14ad4:	4a29      	ldr	r2, [pc, #164]	; (14b7c <bt_gatt_read+0x128>)
   14ad6:	e01a      	b.n	14b0e <bt_gatt_read+0xba>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14ad8:	2210      	movs	r2, #16
   14ada:	4638      	mov	r0, r7
   14adc:	3101      	adds	r1, #1
   14ade:	f008 fb47 	bl	1d170 <net_buf_simple_add_mem>
   14ae2:	e7f6      	b.n	14ad2 <bt_gatt_read+0x7e>
	if (params->handle_count > 1) {
   14ae4:	2a01      	cmp	r2, #1
   14ae6:	d01f      	beq.n	14b28 <bt_gatt_read+0xd4>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_REQ,
   14ae8:	210e      	movs	r1, #14
   14aea:	4628      	mov	r0, r5
   14aec:	0052      	lsls	r2, r2, #1
   14aee:	f7fd fe63 	bl	127b8 <bt_att_create_pdu>
	if (!buf) {
   14af2:	4606      	mov	r6, r0
   14af4:	2800      	cmp	r0, #0
   14af6:	d0d7      	beq.n	14aa8 <bt_gatt_read+0x54>
   14af8:	2700      	movs	r7, #0
	net_buf_simple_add_le16(&buf->b, val);
   14afa:	f100 0808 	add.w	r8, r0, #8
	for (i = 0U; i < params->handle_count; i++) {
   14afe:	6862      	ldr	r2, [r4, #4]
   14b00:	b2fb      	uxtb	r3, r7
   14b02:	429a      	cmp	r2, r3
   14b04:	f107 0701 	add.w	r7, r7, #1
   14b08:	d807      	bhi.n	14b1a <bt_gatt_read+0xc6>
	return gatt_send(conn, buf, gatt_read_mult_rsp, params, NULL);
   14b0a:	4623      	mov	r3, r4
   14b0c:	4a1c      	ldr	r2, [pc, #112]	; (14b80 <bt_gatt_read+0x12c>)
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14b0e:	4631      	mov	r1, r6
   14b10:	4628      	mov	r0, r5
}
   14b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14b16:	f7fe bc89 	b.w	1342c <gatt_send.constprop.0>
		net_buf_add_le16(buf, params->handles[i]);
   14b1a:	68a2      	ldr	r2, [r4, #8]
   14b1c:	4640      	mov	r0, r8
   14b1e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   14b22:	f008 fb38 	bl	1d196 <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
   14b26:	e7ea      	b.n	14afe <bt_gatt_read+0xaa>
	if (params->single.offset) {
   14b28:	8963      	ldrh	r3, [r4, #10]
   14b2a:	b183      	cbz	r3, 14b4e <bt_gatt_read+0xfa>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_BLOB_REQ, sizeof(*req));
   14b2c:	2204      	movs	r2, #4
   14b2e:	210c      	movs	r1, #12
   14b30:	4628      	mov	r0, r5
   14b32:	f7fd fe41 	bl	127b8 <bt_att_create_pdu>
	if (!buf) {
   14b36:	4606      	mov	r6, r0
   14b38:	2800      	cmp	r0, #0
   14b3a:	d0b5      	beq.n	14aa8 <bt_gatt_read+0x54>
	return net_buf_simple_add(&buf->b, len);
   14b3c:	2104      	movs	r1, #4
   14b3e:	3008      	adds	r0, #8
   14b40:	f000 fe34 	bl	157ac <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   14b44:	8923      	ldrh	r3, [r4, #8]
   14b46:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
   14b48:	8963      	ldrh	r3, [r4, #10]
   14b4a:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
   14b4c:	e7c1      	b.n	14ad2 <bt_gatt_read+0x7e>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   14b4e:	2202      	movs	r2, #2
   14b50:	210a      	movs	r1, #10
   14b52:	4628      	mov	r0, r5
   14b54:	f7fd fe30 	bl	127b8 <bt_att_create_pdu>
	if (!buf) {
   14b58:	4606      	mov	r6, r0
   14b5a:	2800      	cmp	r0, #0
   14b5c:	d0a4      	beq.n	14aa8 <bt_gatt_read+0x54>
   14b5e:	2102      	movs	r1, #2
   14b60:	3008      	adds	r0, #8
   14b62:	f000 fe23 	bl	157ac <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   14b66:	8923      	ldrh	r3, [r4, #8]
   14b68:	8003      	strh	r3, [r0, #0]
   14b6a:	e7b2      	b.n	14ad2 <bt_gatt_read+0x7e>
		return -ENOTCONN;
   14b6c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14b70:	e79c      	b.n	14aac <bt_gatt_read+0x58>
   14b72:	bf00      	nop
   14b74:	000220bd 	.word	0x000220bd
   14b78:	0001fbb7 	.word	0x0001fbb7
   14b7c:	00014b85 	.word	0x00014b85
   14b80:	0001cb21 	.word	0x0001cb21

00014b84 <gatt_read_rsp>:
{
   14b84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14b88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   14b8a:	4606      	mov	r6, r0
   14b8c:	4690      	mov	r8, r2
   14b8e:	461d      	mov	r5, r3
	if (err || !length) {
   14b90:	460f      	mov	r7, r1
   14b92:	b901      	cbnz	r1, 14b96 <gatt_read_rsp+0x12>
   14b94:	b953      	cbnz	r3, 14bac <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
   14b96:	2300      	movs	r3, #0
   14b98:	4622      	mov	r2, r4
   14b9a:	4639      	mov	r1, r7
   14b9c:	930a      	str	r3, [sp, #40]	; 0x28
   14b9e:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14ba0:	4630      	mov	r0, r6
   14ba2:	46ac      	mov	ip, r5
}
   14ba4:	b003      	add	sp, #12
   14ba6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14baa:	4760      	bx	ip
	if (!params->handle_count) {
   14bac:	6863      	ldr	r3, [r4, #4]
   14bae:	2b00      	cmp	r3, #0
   14bb0:	d141      	bne.n	14c36 <gatt_read_rsp+0xb2>
	for (length--, pdu = rsp->data; length;
   14bb2:	3d01      	subs	r5, #1
   14bb4:	b2ad      	uxth	r5, r5
   14bb6:	f102 0901 	add.w	r9, r2, #1
   14bba:	b305      	cbz	r5, 14bfe <gatt_read_rsp+0x7a>
		handle = sys_le16_to_cpu(data->handle);
   14bbc:	f8b9 2000 	ldrh.w	r2, [r9]
   14bc0:	b293      	uxth	r3, r2
		if (!handle) {
   14bc2:	b933      	cbnz	r3, 14bd2 <gatt_read_rsp+0x4e>
			BT_ERR("Invalid handle");
   14bc4:	2145      	movs	r1, #69	; 0x45
   14bc6:	482c      	ldr	r0, [pc, #176]	; (14c78 <gatt_read_rsp+0xf4>)
}
   14bc8:	b003      	add	sp, #12
   14bca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("Invalid handle");
   14bce:	f005 bd4d 	b.w	1a66c <printk>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   14bd2:	f898 3000 	ldrb.w	r3, [r8]
		params->by_uuid.start_handle = handle;
   14bd6:	8122      	strh	r2, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   14bd8:	42ab      	cmp	r3, r5
   14bda:	bf8c      	ite	hi
   14bdc:	1eab      	subhi	r3, r5, #2
   14bde:	3b02      	subls	r3, #2
   14be0:	b29b      	uxth	r3, r3
		if (params->func(conn, 0, params, data->value, len) ==
   14be2:	9300      	str	r3, [sp, #0]
   14be4:	4622      	mov	r2, r4
   14be6:	2100      	movs	r1, #0
   14be8:	4630      	mov	r0, r6
   14bea:	6827      	ldr	r7, [r4, #0]
   14bec:	f109 0302 	add.w	r3, r9, #2
   14bf0:	47b8      	blx	r7
   14bf2:	2800      	cmp	r0, #0
   14bf4:	d03d      	beq.n	14c72 <gatt_read_rsp+0xee>
		if (rsp->len > length) {
   14bf6:	f898 1000 	ldrb.w	r1, [r8]
   14bfa:	428d      	cmp	r5, r1
   14bfc:	d20b      	bcs.n	14c16 <gatt_read_rsp+0x92>
	if (bt_gatt_read(conn, params) < 0) {
   14bfe:	4621      	mov	r1, r4
   14c00:	4630      	mov	r0, r6
   14c02:	f7ff ff27 	bl	14a54 <bt_gatt_read>
   14c06:	2800      	cmp	r0, #0
   14c08:	da33      	bge.n	14c72 <gatt_read_rsp+0xee>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14c0a:	2300      	movs	r3, #0
   14c0c:	930a      	str	r3, [sp, #40]	; 0x28
   14c0e:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14c10:	4622      	mov	r2, r4
   14c12:	210e      	movs	r1, #14
   14c14:	e7c4      	b.n	14ba0 <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
   14c16:	8922      	ldrh	r2, [r4, #8]
   14c18:	8960      	ldrh	r0, [r4, #10]
   14c1a:	4290      	cmp	r0, r2
   14c1c:	d105      	bne.n	14c2a <gatt_read_rsp+0xa6>
			params->func(conn, 0, params, NULL, 0);
   14c1e:	2300      	movs	r3, #0
   14c20:	930a      	str	r3, [sp, #40]	; 0x28
   14c22:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
   14c24:	4622      	mov	r2, r4
   14c26:	4619      	mov	r1, r3
   14c28:	e7ba      	b.n	14ba0 <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
   14c2a:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14c2c:	1a6d      	subs	r5, r5, r1
		params->by_uuid.start_handle++;
   14c2e:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   14c30:	b2ad      	uxth	r5, r5
   14c32:	4489      	add	r9, r1
   14c34:	e7c1      	b.n	14bba <gatt_read_rsp+0x36>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
   14c36:	9500      	str	r5, [sp, #0]
   14c38:	4613      	mov	r3, r2
   14c3a:	f8d4 c000 	ldr.w	ip, [r4]
   14c3e:	4622      	mov	r2, r4
   14c40:	47e0      	blx	ip
   14c42:	b1b0      	cbz	r0, 14c72 <gatt_read_rsp+0xee>
	if (length < (bt_att_get_mtu(conn) - 1)) {
   14c44:	4630      	mov	r0, r6
   14c46:	f007 fded 	bl	1c824 <bt_att_get_mtu>
   14c4a:	3801      	subs	r0, #1
   14c4c:	4285      	cmp	r5, r0
   14c4e:	da03      	bge.n	14c58 <gatt_read_rsp+0xd4>
		params->func(conn, 0, params, NULL, 0);
   14c50:	970a      	str	r7, [sp, #40]	; 0x28
   14c52:	463b      	mov	r3, r7
   14c54:	6825      	ldr	r5, [r4, #0]
   14c56:	e7e5      	b.n	14c24 <gatt_read_rsp+0xa0>
	params->single.offset += length;
   14c58:	8963      	ldrh	r3, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   14c5a:	4621      	mov	r1, r4
	params->single.offset += length;
   14c5c:	441d      	add	r5, r3
	if (bt_gatt_read(conn, params) < 0) {
   14c5e:	4630      	mov	r0, r6
	params->single.offset += length;
   14c60:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   14c62:	f7ff fef7 	bl	14a54 <bt_gatt_read>
   14c66:	2800      	cmp	r0, #0
   14c68:	da03      	bge.n	14c72 <gatt_read_rsp+0xee>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   14c6a:	970a      	str	r7, [sp, #40]	; 0x28
   14c6c:	463b      	mov	r3, r7
   14c6e:	6825      	ldr	r5, [r4, #0]
   14c70:	e7ce      	b.n	14c10 <gatt_read_rsp+0x8c>
}
   14c72:	b003      	add	sp, #12
   14c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14c78:	000221e6 	.word	0x000221e6

00014c7c <bt_gatt_subscribe>:
{
   14c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c7e:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   14c80:	4606      	mov	r6, r0
   14c82:	b950      	cbnz	r0, 14c9a <bt_gatt_subscribe+0x1e>
   14c84:	4944      	ldr	r1, [pc, #272]	; (14d98 <bt_gatt_subscribe+0x11c>)
   14c86:	4845      	ldr	r0, [pc, #276]	; (14d9c <bt_gatt_subscribe+0x120>)
   14c88:	f640 72fb 	movw	r2, #4091	; 0xffb
   14c8c:	f005 fcee 	bl	1a66c <printk>
   14c90:	f640 71fb 	movw	r1, #4091	; 0xffb
   14c94:	4840      	ldr	r0, [pc, #256]	; (14d98 <bt_gatt_subscribe+0x11c>)
   14c96:	f005 ff8f 	bl	1abb8 <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   14c9a:	b10d      	cbz	r5, 14ca0 <bt_gatt_subscribe+0x24>
   14c9c:	682b      	ldr	r3, [r5, #0]
   14c9e:	b953      	cbnz	r3, 14cb6 <bt_gatt_subscribe+0x3a>
   14ca0:	493d      	ldr	r1, [pc, #244]	; (14d98 <bt_gatt_subscribe+0x11c>)
   14ca2:	483e      	ldr	r0, [pc, #248]	; (14d9c <bt_gatt_subscribe+0x120>)
   14ca4:	f640 72fc 	movw	r2, #4092	; 0xffc
   14ca8:	f005 fce0 	bl	1a66c <printk>
   14cac:	f640 71fc 	movw	r1, #4092	; 0xffc
   14cb0:	4839      	ldr	r0, [pc, #228]	; (14d98 <bt_gatt_subscribe+0x11c>)
   14cb2:	f005 ff81 	bl	1abb8 <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   14cb6:	89ab      	ldrh	r3, [r5, #12]
   14cb8:	b953      	cbnz	r3, 14cd0 <bt_gatt_subscribe+0x54>
   14cba:	4937      	ldr	r1, [pc, #220]	; (14d98 <bt_gatt_subscribe+0x11c>)
   14cbc:	4837      	ldr	r0, [pc, #220]	; (14d9c <bt_gatt_subscribe+0x120>)
   14cbe:	f640 72fd 	movw	r2, #4093	; 0xffd
   14cc2:	f005 fcd3 	bl	1a66c <printk>
   14cc6:	f640 71fd 	movw	r1, #4093	; 0xffd
   14cca:	4833      	ldr	r0, [pc, #204]	; (14d98 <bt_gatt_subscribe+0x11c>)
   14ccc:	f005 ff74 	bl	1abb8 <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   14cd0:	896b      	ldrh	r3, [r5, #10]
   14cd2:	b953      	cbnz	r3, 14cea <bt_gatt_subscribe+0x6e>
   14cd4:	4930      	ldr	r1, [pc, #192]	; (14d98 <bt_gatt_subscribe+0x11c>)
   14cd6:	4831      	ldr	r0, [pc, #196]	; (14d9c <bt_gatt_subscribe+0x120>)
   14cd8:	f241 0203 	movw	r2, #4099	; 0x1003
   14cdc:	f005 fcc6 	bl	1a66c <printk>
   14ce0:	f241 0103 	movw	r1, #4099	; 0x1003
   14ce4:	482c      	ldr	r0, [pc, #176]	; (14d98 <bt_gatt_subscribe+0x11c>)
   14ce6:	f005 ff67 	bl	1abb8 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14cea:	7ab3      	ldrb	r3, [r6, #10]
   14cec:	2b07      	cmp	r3, #7
   14cee:	d14b      	bne.n	14d88 <bt_gatt_subscribe+0x10c>
	sub = gatt_sub_find(conn);
   14cf0:	4630      	mov	r0, r6
   14cf2:	f7fe f9e3 	bl	130bc <gatt_sub_find>
	if (!sub) {
   14cf6:	4604      	mov	r4, r0
   14cf8:	b958      	cbnz	r0, 14d12 <bt_gatt_subscribe+0x96>
		sub = gatt_sub_find(NULL);
   14cfa:	f7fe f9df 	bl	130bc <gatt_sub_find>
		if (sub) {
   14cfe:	4604      	mov	r4, r0
   14d00:	2800      	cmp	r0, #0
   14d02:	d044      	beq.n	14d8e <bt_gatt_subscribe+0x112>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   14d04:	f106 0188 	add.w	r1, r6, #136	; 0x88
   14d08:	3001      	adds	r0, #1
   14d0a:	f007 feea 	bl	1cae2 <bt_addr_le_copy>
			sub->id = conn->id;
   14d0e:	7a33      	ldrb	r3, [r6, #8]
   14d10:	7023      	strb	r3, [r4, #0]
	return list->head;
   14d12:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14d14:	b90a      	cbnz	r2, 14d1a <bt_gatt_subscribe+0x9e>
   14d16:	4613      	mov	r3, r2
   14d18:	e001      	b.n	14d1e <bt_gatt_subscribe+0xa2>
   14d1a:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   14d1e:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14d20:	b97b      	cbnz	r3, 14d42 <bt_gatt_subscribe+0xc6>
	if (!has_subscription) {
   14d22:	bb41      	cbnz	r1, 14d76 <bt_gatt_subscribe+0xfa>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
   14d24:	4630      	mov	r0, r6
   14d26:	462b      	mov	r3, r5
   14d28:	89aa      	ldrh	r2, [r5, #12]
   14d2a:	8969      	ldrh	r1, [r5, #10]
   14d2c:	f7fe fe24 	bl	13978 <gatt_write_ccc.constprop.0>
		if (err) {
   14d30:	4606      	mov	r6, r0
   14d32:	b300      	cbz	r0, 14d76 <bt_gatt_subscribe+0xfa>
	if (sys_slist_is_empty(&sub->list)) {
   14d34:	68a3      	ldr	r3, [r4, #8]
   14d36:	b913      	cbnz	r3, 14d3e <bt_gatt_subscribe+0xc2>
   14d38:	4620      	mov	r0, r4
   14d3a:	f007 ff0c 	bl	1cb56 <gatt_sub_remove.part.0>
}
   14d3e:	4630      	mov	r0, r6
   14d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   14d42:	42ab      	cmp	r3, r5
   14d44:	d106      	bne.n	14d54 <bt_gatt_subscribe+0xd8>
	if (sys_slist_is_empty(&sub->list)) {
   14d46:	b912      	cbnz	r2, 14d4e <bt_gatt_subscribe+0xd2>
   14d48:	4620      	mov	r0, r4
   14d4a:	f007 ff04 	bl	1cb56 <gatt_sub_remove.part.0>
			return -EALREADY;
   14d4e:	f06f 0644 	mvn.w	r6, #68	; 0x44
   14d52:	e7f4      	b.n	14d3e <bt_gatt_subscribe+0xc2>
		if (tmp->value_handle == params->value_handle &&
   14d54:	891f      	ldrh	r7, [r3, #8]
   14d56:	8928      	ldrh	r0, [r5, #8]
   14d58:	4287      	cmp	r7, r0
   14d5a:	d104      	bne.n	14d66 <bt_gatt_subscribe+0xea>
   14d5c:	899f      	ldrh	r7, [r3, #12]
   14d5e:	89a8      	ldrh	r0, [r5, #12]
			has_subscription = true;
   14d60:	4287      	cmp	r7, r0
   14d62:	bf28      	it	cs
   14d64:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   14d66:	f113 0f14 	cmn.w	r3, #20
   14d6a:	d0da      	beq.n	14d22 <bt_gatt_subscribe+0xa6>
	return node->next;
   14d6c:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   14d6e:	2b00      	cmp	r3, #0
   14d70:	d0d7      	beq.n	14d22 <bt_gatt_subscribe+0xa6>
   14d72:	3b14      	subs	r3, #20
   14d74:	e7d4      	b.n	14d20 <bt_gatt_subscribe+0xa4>
	parent->next = child;
   14d76:	68a2      	ldr	r2, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   14d78:	68e6      	ldr	r6, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   14d7a:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
   14d7e:	616a      	str	r2, [r5, #20]
	list->head = node;
   14d80:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   14d82:	b93e      	cbnz	r6, 14d94 <bt_gatt_subscribe+0x118>
	list->tail = node;
   14d84:	60e3      	str	r3, [r4, #12]
}
   14d86:	e7da      	b.n	14d3e <bt_gatt_subscribe+0xc2>
		return -ENOTCONN;
   14d88:	f06f 0638 	mvn.w	r6, #56	; 0x38
   14d8c:	e7d7      	b.n	14d3e <bt_gatt_subscribe+0xc2>
		return -ENOMEM;
   14d8e:	f06f 060b 	mvn.w	r6, #11
   14d92:	e7d4      	b.n	14d3e <bt_gatt_subscribe+0xc2>
	return 0;
   14d94:	2600      	movs	r6, #0
   14d96:	e7d2      	b.n	14d3e <bt_gatt_subscribe+0xc2>
   14d98:	000220bd 	.word	0x000220bd
   14d9c:	0001fbb7 	.word	0x0001fbb7

00014da0 <bt_gatt_unsubscribe>:
{
   14da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14da4:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   14da6:	4607      	mov	r7, r0
   14da8:	b950      	cbnz	r0, 14dc0 <bt_gatt_unsubscribe+0x20>
   14daa:	4947      	ldr	r1, [pc, #284]	; (14ec8 <bt_gatt_unsubscribe+0x128>)
   14dac:	4847      	ldr	r0, [pc, #284]	; (14ecc <bt_gatt_unsubscribe+0x12c>)
   14dae:	f241 025c 	movw	r2, #4188	; 0x105c
   14db2:	f005 fc5b 	bl	1a66c <printk>
   14db6:	f241 015c 	movw	r1, #4188	; 0x105c
   14dba:	4843      	ldr	r0, [pc, #268]	; (14ec8 <bt_gatt_unsubscribe+0x128>)
   14dbc:	f005 fefc 	bl	1abb8 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   14dc0:	b956      	cbnz	r6, 14dd8 <bt_gatt_unsubscribe+0x38>
   14dc2:	4941      	ldr	r1, [pc, #260]	; (14ec8 <bt_gatt_unsubscribe+0x128>)
   14dc4:	4841      	ldr	r0, [pc, #260]	; (14ecc <bt_gatt_unsubscribe+0x12c>)
   14dc6:	f241 025d 	movw	r2, #4189	; 0x105d
   14dca:	f005 fc4f 	bl	1a66c <printk>
   14dce:	f241 015d 	movw	r1, #4189	; 0x105d
   14dd2:	483d      	ldr	r0, [pc, #244]	; (14ec8 <bt_gatt_unsubscribe+0x128>)
   14dd4:	f005 fef0 	bl	1abb8 <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14dd8:	7abb      	ldrb	r3, [r7, #10]
   14dda:	2b07      	cmp	r3, #7
   14ddc:	d170      	bne.n	14ec0 <bt_gatt_unsubscribe+0x120>
	sub = gatt_sub_find(conn);
   14dde:	4638      	mov	r0, r7
   14de0:	f7fe f96c 	bl	130bc <gatt_sub_find>
	if (!sub) {
   14de4:	4680      	mov	r8, r0
   14de6:	b920      	cbnz	r0, 14df2 <bt_gatt_unsubscribe+0x52>
		return -EINVAL;
   14de8:	f06f 0015 	mvn.w	r0, #21
}
   14dec:	b003      	add	sp, #12
   14dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   14df2:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14df4:	b1cc      	cbz	r4, 14e2a <bt_gatt_unsubscribe+0x8a>
   14df6:	f1b4 0514 	subs.w	r5, r4, #20
   14dfa:	d018      	beq.n	14e2e <bt_gatt_unsubscribe+0x8e>
	return node->next;
   14dfc:	6824      	ldr	r4, [r4, #0]
   14dfe:	b104      	cbz	r4, 14e02 <bt_gatt_unsubscribe+0x62>
   14e00:	3c14      	subs	r4, #20
   14e02:	f04f 0900 	mov.w	r9, #0
   14e06:	464b      	mov	r3, r9
   14e08:	46ca      	mov	sl, r9
			if (atomic_test_bit(params->flags,
   14e0a:	f106 0b10 	add.w	fp, r6, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14e0e:	b985      	cbnz	r5, 14e32 <bt_gatt_unsubscribe+0x92>
	if (!found) {
   14e10:	2b00      	cmp	r3, #0
   14e12:	d0e9      	beq.n	14de8 <bt_gatt_unsubscribe+0x48>
	if (has_subscription) {
   14e14:	f1ba 0f00 	cmp.w	sl, #0
   14e18:	d047      	beq.n	14eaa <bt_gatt_unsubscribe+0x10a>
		params->notify(conn, params, NULL, 0);
   14e1a:	462b      	mov	r3, r5
   14e1c:	462a      	mov	r2, r5
   14e1e:	4631      	mov	r1, r6
   14e20:	4638      	mov	r0, r7
   14e22:	6834      	ldr	r4, [r6, #0]
   14e24:	47a0      	blx	r4
		return 0;
   14e26:	4628      	mov	r0, r5
   14e28:	e7e0      	b.n	14dec <bt_gatt_unsubscribe+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14e2a:	4625      	mov	r5, r4
   14e2c:	e7e9      	b.n	14e02 <bt_gatt_unsubscribe+0x62>
   14e2e:	462c      	mov	r4, r5
   14e30:	e7e7      	b.n	14e02 <bt_gatt_unsubscribe+0x62>
		if (params == tmp) {
   14e32:	42b5      	cmp	r5, r6
			sys_slist_remove(&sub->list, prev, &tmp->node);
   14e34:	f105 0114 	add.w	r1, r5, #20
		if (params == tmp) {
   14e38:	d12b      	bne.n	14e92 <bt_gatt_unsubscribe+0xf2>
Z_GENLIST_REMOVE(slist, snode)
   14e3a:	696b      	ldr	r3, [r5, #20]
   14e3c:	f8d8 000c 	ldr.w	r0, [r8, #12]
   14e40:	f1b9 0f00 	cmp.w	r9, #0
   14e44:	d11e      	bne.n	14e84 <bt_gatt_unsubscribe+0xe4>
   14e46:	4281      	cmp	r1, r0
	list->head = node;
   14e48:	f8c8 3008 	str.w	r3, [r8, #8]
Z_GENLIST_REMOVE(slist, snode)
   14e4c:	d101      	bne.n	14e52 <bt_gatt_unsubscribe+0xb2>
	list->tail = node;
   14e4e:	f8c8 300c 	str.w	r3, [r8, #12]
	parent->next = child;
   14e52:	2300      	movs	r3, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14e54:	4658      	mov	r0, fp
   14e56:	616b      	str	r3, [r5, #20]
   14e58:	f007 fe5f 	bl	1cb1a <atomic_get>
			if (atomic_test_bit(params->flags,
   14e5c:	0742      	lsls	r2, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14e5e:	f3c0 0380 	ubfx	r3, r0, #2, #1
   14e62:	d51e      	bpl.n	14ea2 <bt_gatt_unsubscribe+0x102>
	bt_att_req_cancel(conn, params);
   14e64:	4631      	mov	r1, r6
   14e66:	4638      	mov	r0, r7
   14e68:	9301      	str	r3, [sp, #4]
   14e6a:	f7fe f88b 	bl	12f84 <bt_att_req_cancel>
}
   14e6e:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14e70:	b1cc      	cbz	r4, 14ea6 <bt_gatt_unsubscribe+0x106>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14e72:	f114 0114 	adds.w	r1, r4, #20
   14e76:	d002      	beq.n	14e7e <bt_gatt_unsubscribe+0xde>
	return node->next;
   14e78:	6961      	ldr	r1, [r4, #20]
   14e7a:	b101      	cbz	r1, 14e7e <bt_gatt_unsubscribe+0xde>
   14e7c:	3914      	subs	r1, #20
   14e7e:	4625      	mov	r5, r4
   14e80:	460c      	mov	r4, r1
   14e82:	e7c4      	b.n	14e0e <bt_gatt_unsubscribe+0x6e>
Z_GENLIST_REMOVE(slist, snode)
   14e84:	4288      	cmp	r0, r1
	parent->next = child;
   14e86:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
   14e8a:	bf08      	it	eq
   14e8c:	f8c8 900c 	streq.w	r9, [r8, #12]
}
   14e90:	e7df      	b.n	14e52 <bt_gatt_unsubscribe+0xb2>
		if (tmp->value_handle == params->value_handle) {
   14e92:	892d      	ldrh	r5, [r5, #8]
   14e94:	8930      	ldrh	r0, [r6, #8]
			sys_slist_remove(&sub->list, prev, &tmp->node);
   14e96:	4689      	mov	r9, r1
   14e98:	4285      	cmp	r5, r0
   14e9a:	bf08      	it	eq
   14e9c:	f04f 0a01 	moveq.w	sl, #1
   14ea0:	e7e6      	b.n	14e70 <bt_gatt_unsubscribe+0xd0>
			found = true;
   14ea2:	2301      	movs	r3, #1
   14ea4:	e7e4      	b.n	14e70 <bt_gatt_unsubscribe+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14ea6:	4621      	mov	r1, r4
   14ea8:	e7e9      	b.n	14e7e <bt_gatt_unsubscribe+0xde>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   14eaa:	4633      	mov	r3, r6
   14eac:	4652      	mov	r2, sl
   14eae:	4638      	mov	r0, r7
   14eb0:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   14eb2:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   14eb6:	b003      	add	sp, #12
   14eb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   14ebc:	f7fe bd5c 	b.w	13978 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   14ec0:	f06f 0038 	mvn.w	r0, #56	; 0x38
   14ec4:	e792      	b.n	14dec <bt_gatt_unsubscribe+0x4c>
   14ec6:	bf00      	nop
   14ec8:	000220bd 	.word	0x000220bd
   14ecc:	0001fbb7 	.word	0x0001fbb7

00014ed0 <bt_gatt_mult_notification>:
{
   14ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ed4:	b085      	sub	sp, #20
   14ed6:	4680      	mov	r8, r0
   14ed8:	460c      	mov	r4, r1
   14eda:	4691      	mov	r9, r2
	sub = gatt_sub_find(conn);
   14edc:	f7fe f8ee 	bl	130bc <gatt_sub_find>
	if (!sub) {
   14ee0:	4606      	mov	r6, r0
   14ee2:	b1d0      	cbz	r0, 14f1a <bt_gatt_mult_notification+0x4a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   14ee4:	464a      	mov	r2, r9
   14ee6:	4621      	mov	r1, r4
   14ee8:	a801      	add	r0, sp, #4
   14eea:	f008 f918 	bl	1d11e <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   14eee:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   14ef2:	2b04      	cmp	r3, #4
   14ef4:	d911      	bls.n	14f1a <bt_gatt_mult_notification+0x4a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   14ef6:	2104      	movs	r1, #4
   14ef8:	eb0d 0001 	add.w	r0, sp, r1
   14efc:	f000 fc38 	bl	15770 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   14f00:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   14f04:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   14f08:	4605      	mov	r5, r0
		if (len > buf.len) {
   14f0a:	4553      	cmp	r3, sl
   14f0c:	d208      	bcs.n	14f20 <bt_gatt_mult_notification+0x50>
			BT_ERR("Invalid data len %u > %u", len, length);
   14f0e:	464b      	mov	r3, r9
   14f10:	4652      	mov	r2, sl
   14f12:	2145      	movs	r1, #69	; 0x45
   14f14:	4816      	ldr	r0, [pc, #88]	; (14f70 <bt_gatt_mult_notification+0xa0>)
   14f16:	f005 fba9 	bl	1a66c <printk>
}
   14f1a:	b005      	add	sp, #20
   14f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   14f20:	68b3      	ldr	r3, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   14f22:	b303      	cbz	r3, 14f66 <bt_gatt_mult_notification+0x96>
   14f24:	f1b3 0714 	subs.w	r7, r3, #20
   14f28:	d01d      	beq.n	14f66 <bt_gatt_mult_notification+0x96>
	return node->next;
   14f2a:	681c      	ldr	r4, [r3, #0]
   14f2c:	b104      	cbz	r4, 14f30 <bt_gatt_mult_notification+0x60>
   14f2e:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   14f30:	f835 bb04 	ldrh.w	fp, [r5], #4
			if (handle != params->value_handle) {
   14f34:	893b      	ldrh	r3, [r7, #8]
   14f36:	455b      	cmp	r3, fp
   14f38:	d10b      	bne.n	14f52 <bt_gatt_mult_notification+0x82>
			if (params->notify(conn, params, nfy->value, len) ==
   14f3a:	4653      	mov	r3, sl
   14f3c:	462a      	mov	r2, r5
   14f3e:	4639      	mov	r1, r7
   14f40:	4640      	mov	r0, r8
   14f42:	f8d7 c000 	ldr.w	ip, [r7]
   14f46:	47e0      	blx	ip
   14f48:	b918      	cbnz	r0, 14f52 <bt_gatt_mult_notification+0x82>
				bt_gatt_unsubscribe(conn, params);
   14f4a:	4639      	mov	r1, r7
   14f4c:	4640      	mov	r0, r8
   14f4e:	f7ff ff27 	bl	14da0 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   14f52:	b144      	cbz	r4, 14f66 <bt_gatt_mult_notification+0x96>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14f54:	f114 0314 	adds.w	r3, r4, #20
   14f58:	d002      	beq.n	14f60 <bt_gatt_mult_notification+0x90>
	return node->next;
   14f5a:	6963      	ldr	r3, [r4, #20]
   14f5c:	b103      	cbz	r3, 14f60 <bt_gatt_mult_notification+0x90>
   14f5e:	3b14      	subs	r3, #20
{
   14f60:	4627      	mov	r7, r4
   14f62:	461c      	mov	r4, r3
   14f64:	e7e6      	b.n	14f34 <bt_gatt_mult_notification+0x64>
		net_buf_simple_pull_mem(&buf, len);
   14f66:	4651      	mov	r1, sl
   14f68:	a801      	add	r0, sp, #4
   14f6a:	f000 fc01 	bl	15770 <net_buf_simple_pull_mem>
   14f6e:	e7be      	b.n	14eee <bt_gatt_mult_notification+0x1e>
   14f70:	000221fa 	.word	0x000221fa

00014f74 <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
   14f74:	2301      	movs	r3, #1
{
   14f76:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14f78:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   14f7c:	b08e      	sub	sp, #56	; 0x38
   14f7e:	4605      	mov	r5, r0
	data.conn = conn;
   14f80:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14f82:	4631      	mov	r1, r6
   14f84:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   14f86:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14f8a:	f006 ff7a 	bl	1be82 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   14f8e:	b190      	cbz	r0, 14fb6 <bt_gatt_connected+0x42>
		if (conn->id) {
   14f90:	7a2a      	ldrb	r2, [r5, #8]
   14f92:	b30a      	cbz	r2, 14fd8 <bt_gatt_connected+0x64>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   14f94:	ac02      	add	r4, sp, #8
   14f96:	2104      	movs	r1, #4
   14f98:	4620      	mov	r0, r4
   14f9a:	f005 facd 	bl	1a538 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   14f9e:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   14fa0:	2124      	movs	r1, #36	; 0x24
   14fa2:	4a19      	ldr	r2, [pc, #100]	; (15008 <bt_gatt_connected+0x94>)
   14fa4:	a805      	add	r0, sp, #20
   14fa6:	4633      	mov	r3, r6
   14fa8:	f7f9 fa46 	bl	e438 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   14fac:	aa05      	add	r2, sp, #20
   14fae:	4610      	mov	r0, r2
   14fb0:	4916      	ldr	r1, [pc, #88]	; (1500c <bt_gatt_connected+0x98>)
   14fb2:	f7f6 fc55 	bl	b860 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   14fb6:	2001      	movs	r0, #1
   14fb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14fbc:	4a14      	ldr	r2, [pc, #80]	; (15010 <bt_gatt_connected+0x9c>)
   14fbe:	ab03      	add	r3, sp, #12
   14fc0:	f007 ff8d 	bl	1cede <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   14fc4:	4628      	mov	r0, r5
   14fc6:	f7fe f879 	bl	130bc <gatt_sub_find>
	if (!sub) {
   14fca:	b118      	cbz	r0, 14fd4 <bt_gatt_connected+0x60>
	return list->head;
   14fcc:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   14fce:	b10c      	cbz	r4, 14fd4 <bt_gatt_connected+0x60>
   14fd0:	3c14      	subs	r4, #20
   14fd2:	b91c      	cbnz	r4, 14fdc <bt_gatt_connected+0x68>
}
   14fd4:	b00e      	add	sp, #56	; 0x38
   14fd6:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   14fd8:	9200      	str	r2, [sp, #0]
   14fda:	e7e1      	b.n	14fa0 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   14fdc:	4631      	mov	r1, r6
   14fde:	7a28      	ldrb	r0, [r5, #8]
   14fe0:	f006 ff4f 	bl	1be82 <bt_addr_le_is_bonded>
   14fe4:	b158      	cbz	r0, 14ffe <bt_gatt_connected+0x8a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14fe6:	f104 0010 	add.w	r0, r4, #16
   14fea:	f007 fd96 	bl	1cb1a <atomic_get>
   14fee:	0783      	lsls	r3, r0, #30
   14ff0:	d405      	bmi.n	14ffe <bt_gatt_connected+0x8a>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
   14ff2:	4623      	mov	r3, r4
   14ff4:	4628      	mov	r0, r5
   14ff6:	89a2      	ldrh	r2, [r4, #12]
   14ff8:	8961      	ldrh	r1, [r4, #10]
   14ffa:	f7fe fcbd 	bl	13978 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14ffe:	f114 0f14 	cmn.w	r4, #20
   15002:	d0e7      	beq.n	14fd4 <bt_gatt_connected+0x60>
	return node->next;
   15004:	6964      	ldr	r4, [r4, #20]
   15006:	e7e2      	b.n	14fce <bt_gatt_connected+0x5a>
   15008:	0002212c 	.word	0x0002212c
   1500c:	00013d71 	.word	0x00013d71
   15010:	00014141 	.word	0x00014141

00015014 <db_hash_read>:
{
   15014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15016:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   15018:	4810      	ldr	r0, [pc, #64]	; (1505c <db_hash_read+0x48>)
{
   1501a:	4615      	mov	r5, r2
   1501c:	461f      	mov	r7, r3
   1501e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
   15022:	f004 fc1d 	bl	19860 <k_delayed_work_cancel>
	if (!err) {
   15026:	b910      	cbnz	r0, 1502e <db_hash_read+0x1a>
		db_hash_gen(true);
   15028:	2001      	movs	r0, #1
   1502a:	f7fe fe11 	bl	13c50 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   1502e:	2101      	movs	r1, #1
   15030:	4620      	mov	r0, r4
   15032:	f008 f81c 	bl	1d06e <bt_gatt_change_aware>
	if (offset > value_len) {
   15036:	2e10      	cmp	r6, #16
   15038:	d80c      	bhi.n	15054 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
   1503a:	f1c6 0410 	rsb	r4, r6, #16
   1503e:	42bc      	cmp	r4, r7
   15040:	bfa8      	it	ge
   15042:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   15044:	4906      	ldr	r1, [pc, #24]	; (15060 <db_hash_read+0x4c>)
   15046:	4622      	mov	r2, r4
   15048:	4628      	mov	r0, r5
   1504a:	4431      	add	r1, r6
   1504c:	f006 fd52 	bl	1baf4 <memcpy>
}
   15050:	4620      	mov	r0, r4
   15052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   15054:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   15058:	e7fa      	b.n	15050 <db_hash_read+0x3c>
   1505a:	bf00      	nop
   1505c:	20009c08 	.word	0x20009c08
   15060:	2000c970 	.word	0x2000c970

00015064 <bt_gatt_store_ccc>:
	save.count = 0;
   15064:	2300      	movs	r3, #0
{
   15066:	b570      	push	{r4, r5, r6, lr}
   15068:	4604      	mov	r4, r0
   1506a:	b0c0      	sub	sp, #256	; 0x100
   1506c:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1506e:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   15070:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   15074:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   15076:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1507a:	2001      	movs	r0, #1
   1507c:	4a13      	ldr	r2, [pc, #76]	; (150cc <bt_gatt_store_ccc+0x68>)
   1507e:	ab0d      	add	r3, sp, #52	; 0x34
   15080:	f007 ff2d 	bl	1cede <bt_gatt_foreach_attr>
	if (id) {
   15084:	b1ec      	cbz	r4, 150c2 <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   15086:	ae03      	add	r6, sp, #12
   15088:	4622      	mov	r2, r4
   1508a:	2104      	movs	r1, #4
   1508c:	4630      	mov	r0, r6
   1508e:	f005 fa53 	bl	1a538 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   15092:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   15094:	4a0e      	ldr	r2, [pc, #56]	; (150d0 <bt_gatt_store_ccc+0x6c>)
   15096:	462b      	mov	r3, r5
   15098:	2124      	movs	r1, #36	; 0x24
   1509a:	a804      	add	r0, sp, #16
   1509c:	f7f9 f9cc 	bl	e438 <bt_settings_encode_key>
	if (save.count) {
   150a0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   150a2:	b182      	cbz	r2, 150c6 <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   150a4:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   150a6:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   150a8:	a804      	add	r0, sp, #16
   150aa:	f7f6 fb8d 	bl	b7c8 <settings_save_one>
	if (err) {
   150ae:	4604      	mov	r4, r0
   150b0:	b120      	cbz	r0, 150bc <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   150b2:	4602      	mov	r2, r0
   150b4:	2145      	movs	r1, #69	; 0x45
   150b6:	4807      	ldr	r0, [pc, #28]	; (150d4 <bt_gatt_store_ccc+0x70>)
   150b8:	f005 fad8 	bl	1a66c <printk>
}
   150bc:	4620      	mov	r0, r4
   150be:	b040      	add	sp, #256	; 0x100
   150c0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   150c2:	9400      	str	r4, [sp, #0]
   150c4:	e7e6      	b.n	15094 <bt_gatt_store_ccc+0x30>
		str = NULL;
   150c6:	4611      	mov	r1, r2
   150c8:	e7ee      	b.n	150a8 <bt_gatt_store_ccc+0x44>
   150ca:	bf00      	nop
   150cc:	00013601 	.word	0x00013601
   150d0:	0002212c 	.word	0x0002212c
   150d4:	00022218 	.word	0x00022218

000150d8 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   150d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150dc:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   150de:	4603      	mov	r3, r0
   150e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   150e4:	2001      	movs	r0, #1
{
   150e6:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   150e8:	4a52      	ldr	r2, [pc, #328]	; (15234 <bt_gatt_disconnected+0x15c>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   150ea:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   150ee:	f007 fef6 	bl	1cede <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   150f2:	4629      	mov	r1, r5
   150f4:	7a20      	ldrb	r0, [r4, #8]
   150f6:	f006 fec4 	bl	1be82 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   150fa:	b378      	cbz	r0, 1515c <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   150fc:	4629      	mov	r1, r5
   150fe:	7a20      	ldrb	r0, [r4, #8]
   15100:	f7ff ffb0 	bl	15064 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   15104:	4620      	mov	r0, r4
   15106:	f7fd ff9b 	bl	13040 <find_cf_cfg>
	if (!cfg) {
   1510a:	4606      	mov	r6, r0
   1510c:	2800      	cmp	r0, #0
   1510e:	d05e      	beq.n	151ce <bt_gatt_disconnected+0xf6>
		if (conn->id) {
   15110:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   15112:	3608      	adds	r6, #8
		if (conn->id) {
   15114:	2a00      	cmp	r2, #0
   15116:	d05c      	beq.n	151d2 <bt_gatt_disconnected+0xfa>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   15118:	af02      	add	r7, sp, #8
   1511a:	2104      	movs	r1, #4
   1511c:	4638      	mov	r0, r7
   1511e:	f005 fa0b 	bl	1a538 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   15122:	462b      	mov	r3, r5
   15124:	9700      	str	r7, [sp, #0]
   15126:	2124      	movs	r1, #36	; 0x24
   15128:	4a43      	ldr	r2, [pc, #268]	; (15238 <bt_gatt_disconnected+0x160>)
   1512a:	a803      	add	r0, sp, #12
   1512c:	f7f9 f984 	bl	e438 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   15130:	7a23      	ldrb	r3, [r4, #8]
   15132:	2701      	movs	r7, #1
   15134:	b93b      	cbnz	r3, 15146 <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   15136:	2300      	movs	r3, #0
   15138:	2124      	movs	r1, #36	; 0x24
   1513a:	9300      	str	r3, [sp, #0]
   1513c:	4a3e      	ldr	r2, [pc, #248]	; (15238 <bt_gatt_disconnected+0x160>)
   1513e:	462b      	mov	r3, r5
   15140:	a803      	add	r0, sp, #12
   15142:	f7f9 f979 	bl	e438 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   15146:	463a      	mov	r2, r7
   15148:	4631      	mov	r1, r6
   1514a:	a803      	add	r0, sp, #12
   1514c:	f7f6 fb3c 	bl	b7c8 <settings_save_one>
	if (err) {
   15150:	4602      	mov	r2, r0
   15152:	b118      	cbz	r0, 1515c <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
   15154:	2145      	movs	r1, #69	; 0x45
   15156:	4839      	ldr	r0, [pc, #228]	; (1523c <bt_gatt_disconnected+0x164>)
   15158:	f005 fa88 	bl	1a66c <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1515c:	4629      	mov	r1, r5
   1515e:	7a20      	ldrb	r0, [r4, #8]
   15160:	f006 fe8f 	bl	1be82 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   15164:	b150      	cbz	r0, 1517c <bt_gatt_disconnected+0xa4>
		struct addr_with_id addr_with_id = {
   15166:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   15168:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   1516c:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   15170:	2001      	movs	r0, #1
   15172:	4a33      	ldr	r2, [pc, #204]	; (15240 <bt_gatt_disconnected+0x168>)
   15174:	ab03      	add	r3, sp, #12
		struct addr_with_id addr_with_id = {
   15176:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   15178:	f007 feb1 	bl	1cede <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1517c:	4620      	mov	r0, r4
   1517e:	f7fd ff9d 	bl	130bc <gatt_sub_find>
	if (!sub) {
   15182:	4607      	mov	r7, r0
   15184:	b3b0      	cbz	r0, 151f4 <bt_gatt_disconnected+0x11c>
	return list->head;
   15186:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   15188:	b3a3      	cbz	r3, 151f4 <bt_gatt_disconnected+0x11c>
   1518a:	f1b3 0b14 	subs.w	fp, r3, #20
   1518e:	d031      	beq.n	151f4 <bt_gatt_disconnected+0x11c>
	return node->next;
   15190:	681e      	ldr	r6, [r3, #0]
   15192:	b106      	cbz	r6, 15196 <bt_gatt_disconnected+0xbe>
   15194:	3e14      	subs	r6, #20
   15196:	f04f 0800 	mov.w	r8, #0
			params->value = 0U;
   1519a:	46c2      	mov	sl, r8
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1519c:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   151a0:	4629      	mov	r1, r5
   151a2:	7a20      	ldrb	r0, [r4, #8]
   151a4:	f006 fe6d 	bl	1be82 <bt_addr_le_is_bonded>
   151a8:	b9a8      	cbnz	r0, 151d6 <bt_gatt_disconnected+0xfe>
			gatt_sub_remove(conn, sub, prev, params);
   151aa:	465b      	mov	r3, fp
   151ac:	4642      	mov	r2, r8
   151ae:	4639      	mov	r1, r7
   151b0:	4620      	mov	r0, r4
			params->value = 0U;
   151b2:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   151b6:	f007 fcf3 	bl	1cba0 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   151ba:	b1de      	cbz	r6, 151f4 <bt_gatt_disconnected+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   151bc:	f116 0214 	adds.w	r2, r6, #20
   151c0:	d002      	beq.n	151c8 <bt_gatt_disconnected+0xf0>
	return node->next;
   151c2:	6972      	ldr	r2, [r6, #20]
   151c4:	b102      	cbz	r2, 151c8 <bt_gatt_disconnected+0xf0>
   151c6:	3a14      	subs	r2, #20
   151c8:	46b3      	mov	fp, r6
   151ca:	4616      	mov	r6, r2
   151cc:	e7e8      	b.n	151a0 <bt_gatt_disconnected+0xc8>
		len = 0;
   151ce:	4607      	mov	r7, r0
   151d0:	e7b1      	b.n	15136 <bt_gatt_disconnected+0x5e>
   151d2:	2701      	movs	r7, #1
   151d4:	e7af      	b.n	15136 <bt_gatt_disconnected+0x5e>
   151d6:	f10b 0010 	add.w	r0, fp, #16
   151da:	f007 fc9e 	bl	1cb1a <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   151de:	07c3      	lsls	r3, r0, #31
   151e0:	d4e3      	bmi.n	151aa <bt_gatt_disconnected+0xd2>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   151e2:	787b      	ldrb	r3, [r7, #1]
   151e4:	b11b      	cbz	r3, 151ee <bt_gatt_disconnected+0x116>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   151e6:	4629      	mov	r1, r5
   151e8:	4648      	mov	r0, r9
   151ea:	f007 fc7a 	bl	1cae2 <bt_addr_le_copy>
			prev = &params->node;
   151ee:	f10b 0814 	add.w	r8, fp, #20
   151f2:	e7e2      	b.n	151ba <bt_gatt_disconnected+0xe2>
	cfg = find_cf_cfg(conn);
   151f4:	4620      	mov	r0, r4
   151f6:	f7fd ff23 	bl	13040 <find_cf_cfg>
	if (!cfg) {
   151fa:	4606      	mov	r6, r0
   151fc:	b1b8      	cbz	r0, 1522e <bt_gatt_disconnected+0x156>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   151fe:	4629      	mov	r1, r5
   15200:	7a20      	ldrb	r0, [r4, #8]
   15202:	f006 fe3e 	bl	1be82 <bt_addr_le_is_bonded>
   15206:	b928      	cbnz	r0, 15214 <bt_gatt_disconnected+0x13c>
		clear_cf_cfg(cfg);
   15208:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1520a:	b00d      	add	sp, #52	; 0x34
   1520c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   15210:	f007 bcad 	b.w	1cb6e <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   15214:	1c70      	adds	r0, r6, #1
   15216:	4629      	mov	r1, r5
   15218:	f007 fc63 	bl	1cae2 <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1521c:	360c      	adds	r6, #12
   1521e:	e8d6 3fef 	ldaex	r3, [r6]
   15222:	f023 0302 	bic.w	r3, r3, #2
   15226:	e8c6 3fe2 	stlex	r2, r3, [r6]
   1522a:	2a00      	cmp	r2, #0
   1522c:	d1f7      	bne.n	1521e <bt_gatt_disconnected+0x146>
}
   1522e:	b00d      	add	sp, #52	; 0x34
   15230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15234:	00013899 	.word	0x00013899
   15238:	0002226c 	.word	0x0002226c
   1523c:	0002223b 	.word	0x0002223b
   15240:	0001354d 	.word	0x0001354d

00015244 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   15244:	b570      	push	{r4, r5, r6, lr}
   15246:	4602      	mov	r2, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   15248:	2400      	movs	r4, #0
   1524a:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   1524c:	4b09      	ldr	r3, [pc, #36]	; (15274 <bt_smp_accept+0x30>)
   1524e:	fb06 f504 	mul.w	r5, r6, r4
   15252:	58e8      	ldr	r0, [r5, r3]
   15254:	b148      	cbz	r0, 1526a <bt_smp_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   15256:	3401      	adds	r4, #1
   15258:	2c0a      	cmp	r4, #10
   1525a:	d1f8      	bne.n	1524e <bt_smp_accept+0xa>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1525c:	4806      	ldr	r0, [pc, #24]	; (15278 <bt_smp_accept+0x34>)
   1525e:	2145      	movs	r1, #69	; 0x45
   15260:	f005 fa04 	bl	1a66c <printk>
   15264:	f06f 000b 	mvn.w	r0, #11
   15268:	e003      	b.n	15272 <bt_smp_accept+0x2e>
		smp->chan.ops = &ops;
   1526a:	4a04      	ldr	r2, [pc, #16]	; (1527c <bt_smp_accept+0x38>)
   1526c:	442b      	add	r3, r5
   1526e:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   15270:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   15272:	bd70      	pop	{r4, r5, r6, pc}
   15274:	20009c90 	.word	0x20009c90
   15278:	0002227d 	.word	0x0002227d
   1527c:	0001ed0c 	.word	0x0001ed0c

00015280 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   15280:	222c      	movs	r2, #44	; 0x2c
   15282:	4b02      	ldr	r3, [pc, #8]	; (1528c <net_buf_pool_get+0xc>)
   15284:	fb02 3000 	mla	r0, r2, r0, r3
   15288:	4770      	bx	lr
   1528a:	bf00      	nop
   1528c:	200086c0 	.word	0x200086c0

00015290 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   15290:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   15292:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   15294:	4b04      	ldr	r3, [pc, #16]	; (152a8 <net_buf_id+0x18>)
   15296:	fb01 3302 	mla	r3, r1, r2, r3
   1529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1529c:	1ac0      	subs	r0, r0, r3
}
   1529e:	4b03      	ldr	r3, [pc, #12]	; (152ac <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   152a0:	10c0      	asrs	r0, r0, #3
}
   152a2:	4358      	muls	r0, r3
   152a4:	4770      	bx	lr
   152a6:	bf00      	nop
   152a8:	200086c0 	.word	0x200086c0
   152ac:	aaaaaaab 	.word	0xaaaaaaab

000152b0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   152b0:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   152b2:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   152b4:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   152b6:	4b09      	ldr	r3, [pc, #36]	; (152dc <fixed_data_alloc+0x2c>)
   152b8:	fb04 3302 	mla	r3, r4, r2, r3
   152bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   152be:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   152c0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   152c2:	6823      	ldr	r3, [r4, #0]
   152c4:	429a      	cmp	r2, r3
   152c6:	bf94      	ite	ls
   152c8:	600a      	strls	r2, [r1, #0]
   152ca:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   152cc:	f7ff ffe0 	bl	15290 <net_buf_id>
   152d0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   152d4:	fb02 3000 	mla	r0, r2, r0, r3
   152d8:	bd10      	pop	{r4, pc}
   152da:	bf00      	nop
   152dc:	200086c0 	.word	0x200086c0

000152e0 <net_buf_reset>:
{
   152e0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   152e2:	7943      	ldrb	r3, [r0, #5]
{
   152e4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   152e6:	b143      	cbz	r3, 152fa <net_buf_reset+0x1a>
   152e8:	490c      	ldr	r1, [pc, #48]	; (1531c <net_buf_reset+0x3c>)
   152ea:	480d      	ldr	r0, [pc, #52]	; (15320 <net_buf_reset+0x40>)
   152ec:	224f      	movs	r2, #79	; 0x4f
   152ee:	f005 f9bd 	bl	1a66c <printk>
   152f2:	214f      	movs	r1, #79	; 0x4f
   152f4:	4809      	ldr	r0, [pc, #36]	; (1531c <net_buf_reset+0x3c>)
   152f6:	f005 fc5f 	bl	1abb8 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   152fa:	6823      	ldr	r3, [r4, #0]
   152fc:	b143      	cbz	r3, 15310 <net_buf_reset+0x30>
   152fe:	4907      	ldr	r1, [pc, #28]	; (1531c <net_buf_reset+0x3c>)
   15300:	4807      	ldr	r0, [pc, #28]	; (15320 <net_buf_reset+0x40>)
   15302:	2250      	movs	r2, #80	; 0x50
   15304:	f005 f9b2 	bl	1a66c <printk>
   15308:	2150      	movs	r1, #80	; 0x50
   1530a:	4804      	ldr	r0, [pc, #16]	; (1531c <net_buf_reset+0x3c>)
   1530c:	f005 fc54 	bl	1abb8 <assert_post_action>
	buf->len  = 0U;
   15310:	2300      	movs	r3, #0
   15312:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   15314:	6923      	ldr	r3, [r4, #16]
   15316:	60a3      	str	r3, [r4, #8]
}
   15318:	bd10      	pop	{r4, pc}
   1531a:	bf00      	nop
   1531c:	000222ae 	.word	0x000222ae
   15320:	0001fbb7 	.word	0x0001fbb7

00015324 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   15324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15328:	4605      	mov	r5, r0
   1532a:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1532c:	4610      	mov	r0, r2
   1532e:	4619      	mov	r1, r3
{
   15330:	4691      	mov	r9, r2
   15332:	4698      	mov	r8, r3
   15334:	4617      	mov	r7, r2
   15336:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   15338:	f008 fe2b 	bl	1df92 <z_timeout_end_calc>
   1533c:	4682      	mov	sl, r0
   1533e:	468b      	mov	fp, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   15340:	b945      	cbnz	r5, 15354 <net_buf_alloc_len+0x30>
   15342:	494a      	ldr	r1, [pc, #296]	; (1546c <net_buf_alloc_len+0x148>)
   15344:	484a      	ldr	r0, [pc, #296]	; (15470 <net_buf_alloc_len+0x14c>)
   15346:	22ed      	movs	r2, #237	; 0xed
   15348:	f005 f990 	bl	1a66c <printk>
   1534c:	21ed      	movs	r1, #237	; 0xed
   1534e:	4847      	ldr	r0, [pc, #284]	; (1546c <net_buf_alloc_len+0x148>)
   15350:	f005 fc32 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   15354:	f04f 0320 	mov.w	r3, #32
   15358:	f3ef 8111 	mrs	r1, BASEPRI
   1535c:	f383 8811 	msr	BASEPRI, r3
   15360:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   15364:	8beb      	ldrh	r3, [r5, #30]
   15366:	2b00      	cmp	r3, #0
   15368:	d055      	beq.n	15416 <net_buf_alloc_len+0xf2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1536a:	8baa      	ldrh	r2, [r5, #28]
   1536c:	429a      	cmp	r2, r3
   1536e:	d93e      	bls.n	153ee <net_buf_alloc_len+0xca>
   15370:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   15372:	2200      	movs	r2, #0
   15374:	2300      	movs	r3, #0
   15376:	4628      	mov	r0, r5
   15378:	f002 ff34 	bl	181e4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1537c:	9900      	ldr	r1, [sp, #0]
   1537e:	4604      	mov	r4, r0
   15380:	2800      	cmp	r0, #0
   15382:	d034      	beq.n	153ee <net_buf_alloc_len+0xca>
	__asm__ volatile(
   15384:	f381 8811 	msr	BASEPRI, r1
   15388:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1538c:	9d01      	ldr	r5, [sp, #4]
   1538e:	2d00      	cmp	r5, #0
   15390:	d069      	beq.n	15466 <net_buf_alloc_len+0x142>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   15392:	ea58 0309 	orrs.w	r3, r8, r9
   15396:	d00f      	beq.n	153b8 <net_buf_alloc_len+0x94>
   15398:	f1b8 3fff 	cmp.w	r8, #4294967295
   1539c:	bf08      	it	eq
   1539e:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   153a2:	d009      	beq.n	153b8 <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   153a4:	f004 fd08 	bl	19db8 <z_tick_get>
   153a8:	ebba 0700 	subs.w	r7, sl, r0
   153ac:	eb6b 0601 	sbc.w	r6, fp, r1
   153b0:	2e00      	cmp	r6, #0
   153b2:	bfbc      	itt	lt
   153b4:	2700      	movlt	r7, #0
   153b6:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   153b8:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   153bc:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   153be:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 15474 <net_buf_alloc_len+0x150>
   153c2:	463a      	mov	r2, r7
   153c4:	fb09 8303 	mla	r3, r9, r3, r8
   153c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   153ca:	4620      	mov	r0, r4
   153cc:	681b      	ldr	r3, [r3, #0]
   153ce:	a901      	add	r1, sp, #4
   153d0:	f8d3 a000 	ldr.w	sl, [r3]
   153d4:	4633      	mov	r3, r6
   153d6:	47d0      	blx	sl
   153d8:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   153da:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   153dc:	bb58      	cbnz	r0, 15436 <net_buf_alloc_len+0x112>
	k_lifo_put(&pool->free, buf);
   153de:	79a0      	ldrb	r0, [r4, #6]
   153e0:	4621      	mov	r1, r4
   153e2:	fb00 8009 	mla	r0, r0, r9, r8
   153e6:	f008 fd09 	bl	1ddfc <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   153ea:	4634      	mov	r4, r6
}
   153ec:	e01f      	b.n	1542e <net_buf_alloc_len+0x10a>
		uninit_count = pool->uninit_count--;
   153ee:	8beb      	ldrh	r3, [r5, #30]
   153f0:	1e5a      	subs	r2, r3, #1
   153f2:	83ea      	strh	r2, [r5, #30]
   153f4:	f381 8811 	msr	BASEPRI, r1
   153f8:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   153fc:	2018      	movs	r0, #24
   153fe:	8bac      	ldrh	r4, [r5, #28]
   15400:	1ae3      	subs	r3, r4, r3
   15402:	6aac      	ldr	r4, [r5, #40]	; 0x28
   15404:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   15408:	481a      	ldr	r0, [pc, #104]	; (15474 <net_buf_alloc_len+0x150>)
   1540a:	4b1b      	ldr	r3, [pc, #108]	; (15478 <net_buf_alloc_len+0x154>)
   1540c:	1a2d      	subs	r5, r5, r0
   1540e:	10ad      	asrs	r5, r5, #2
   15410:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   15412:	71a5      	strb	r5, [r4, #6]
		goto success;
   15414:	e7ba      	b.n	1538c <net_buf_alloc_len+0x68>
   15416:	f381 8811 	msr	BASEPRI, r1
   1541a:	f3bf 8f6f 	isb	sy
   1541e:	464a      	mov	r2, r9
   15420:	4643      	mov	r3, r8
   15422:	4628      	mov	r0, r5
   15424:	f002 fede 	bl	181e4 <z_impl_k_queue_get>
	if (!buf) {
   15428:	4604      	mov	r4, r0
   1542a:	2800      	cmp	r0, #0
   1542c:	d1ae      	bne.n	1538c <net_buf_alloc_len+0x68>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1542e:	4620      	mov	r0, r4
   15430:	b003      	add	sp, #12
   15432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   15436:	9b01      	ldr	r3, [sp, #4]
   15438:	429d      	cmp	r5, r3
   1543a:	d90a      	bls.n	15452 <net_buf_alloc_len+0x12e>
   1543c:	490b      	ldr	r1, [pc, #44]	; (1546c <net_buf_alloc_len+0x148>)
   1543e:	480c      	ldr	r0, [pc, #48]	; (15470 <net_buf_alloc_len+0x14c>)
   15440:	f240 124d 	movw	r2, #333	; 0x14d
   15444:	f005 f912 	bl	1a66c <printk>
   15448:	f240 114d 	movw	r1, #333	; 0x14d
   1544c:	4807      	ldr	r0, [pc, #28]	; (1546c <net_buf_alloc_len+0x148>)
   1544e:	f005 fbb3 	bl	1abb8 <assert_post_action>
	buf->frags = NULL;
   15452:	2300      	movs	r3, #0
   15454:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   15456:	2301      	movs	r3, #1
   15458:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1545a:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   1545c:	4620      	mov	r0, r4
	buf->size  = size;
   1545e:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   15460:	f7ff ff3e 	bl	152e0 <net_buf_reset>
	return buf;
   15464:	e7e3      	b.n	1542e <net_buf_alloc_len+0x10a>
		buf->__buf = NULL;
   15466:	6125      	str	r5, [r4, #16]
   15468:	e7f3      	b.n	15452 <net_buf_alloc_len+0x12e>
   1546a:	bf00      	nop
   1546c:	000222ae 	.word	0x000222ae
   15470:	0001fbb7 	.word	0x0001fbb7
   15474:	200086c0 	.word	0x200086c0
   15478:	ba2e8ba3 	.word	0xba2e8ba3

0001547c <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1547c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15480:	4606      	mov	r6, r0
   15482:	f002 feaf 	bl	181e4 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   15486:	4605      	mov	r5, r0
   15488:	b140      	cbz	r0, 1549c <net_buf_get+0x20>
   1548a:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1548c:	4f11      	ldr	r7, [pc, #68]	; (154d4 <net_buf_get+0x58>)
   1548e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 154d8 <net_buf_get+0x5c>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   15492:	7963      	ldrb	r3, [r4, #5]
   15494:	f013 0301 	ands.w	r3, r3, #1
   15498:	d103      	bne.n	154a2 <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1549a:	6023      	str	r3, [r4, #0]

	return buf;
}
   1549c:	4628      	mov	r0, r5
   1549e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   154a2:	2200      	movs	r2, #0
   154a4:	2300      	movs	r3, #0
   154a6:	4630      	mov	r0, r6
   154a8:	f002 fe9c 	bl	181e4 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   154ac:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   154ae:	b950      	cbnz	r0, 154c6 <net_buf_get+0x4a>
   154b0:	4639      	mov	r1, r7
   154b2:	4640      	mov	r0, r8
   154b4:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   154b8:	f005 f8d8 	bl	1a66c <printk>
   154bc:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   154c0:	4638      	mov	r0, r7
   154c2:	f005 fb79 	bl	1abb8 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   154c6:	7963      	ldrb	r3, [r4, #5]
   154c8:	f023 0301 	bic.w	r3, r3, #1
   154cc:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   154ce:	6824      	ldr	r4, [r4, #0]
   154d0:	e7df      	b.n	15492 <net_buf_get+0x16>
   154d2:	bf00      	nop
   154d4:	000222ae 	.word	0x000222ae
   154d8:	0001fbb7 	.word	0x0001fbb7

000154dc <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   154dc:	b538      	push	{r3, r4, r5, lr}
   154de:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   154e0:	4604      	mov	r4, r0
   154e2:	b950      	cbnz	r0, 154fa <net_buf_simple_reserve+0x1e>
   154e4:	490d      	ldr	r1, [pc, #52]	; (1551c <net_buf_simple_reserve+0x40>)
   154e6:	480e      	ldr	r0, [pc, #56]	; (15520 <net_buf_simple_reserve+0x44>)
   154e8:	f240 12bb 	movw	r2, #443	; 0x1bb
   154ec:	f005 f8be 	bl	1a66c <printk>
   154f0:	f240 11bb 	movw	r1, #443	; 0x1bb
   154f4:	4809      	ldr	r0, [pc, #36]	; (1551c <net_buf_simple_reserve+0x40>)
   154f6:	f005 fb5f 	bl	1abb8 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   154fa:	88a3      	ldrh	r3, [r4, #4]
   154fc:	b153      	cbz	r3, 15514 <net_buf_simple_reserve+0x38>
   154fe:	4907      	ldr	r1, [pc, #28]	; (1551c <net_buf_simple_reserve+0x40>)
   15500:	4807      	ldr	r0, [pc, #28]	; (15520 <net_buf_simple_reserve+0x44>)
   15502:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   15506:	f005 f8b1 	bl	1a66c <printk>
   1550a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   1550e:	4803      	ldr	r0, [pc, #12]	; (1551c <net_buf_simple_reserve+0x40>)
   15510:	f005 fb52 	bl	1abb8 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   15514:	68a3      	ldr	r3, [r4, #8]
   15516:	442b      	add	r3, r5
   15518:	6023      	str	r3, [r4, #0]
}
   1551a:	bd38      	pop	{r3, r4, r5, pc}
   1551c:	000222ae 	.word	0x000222ae
   15520:	0001fbb7 	.word	0x0001fbb7

00015524 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   15524:	b538      	push	{r3, r4, r5, lr}
   15526:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   15528:	4605      	mov	r5, r0
   1552a:	b950      	cbnz	r0, 15542 <net_buf_put+0x1e>
   1552c:	4912      	ldr	r1, [pc, #72]	; (15578 <net_buf_put+0x54>)
   1552e:	4813      	ldr	r0, [pc, #76]	; (1557c <net_buf_put+0x58>)
   15530:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   15534:	f005 f89a 	bl	1a66c <printk>
   15538:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   1553c:	480e      	ldr	r0, [pc, #56]	; (15578 <net_buf_put+0x54>)
   1553e:	f005 fb3b 	bl	1abb8 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   15542:	b954      	cbnz	r4, 1555a <net_buf_put+0x36>
   15544:	490c      	ldr	r1, [pc, #48]	; (15578 <net_buf_put+0x54>)
   15546:	480d      	ldr	r0, [pc, #52]	; (1557c <net_buf_put+0x58>)
   15548:	f240 12f9 	movw	r2, #505	; 0x1f9
   1554c:	f005 f88e 	bl	1a66c <printk>
   15550:	f240 11f9 	movw	r1, #505	; 0x1f9
   15554:	4808      	ldr	r0, [pc, #32]	; (15578 <net_buf_put+0x54>)
   15556:	f005 fb2f 	bl	1abb8 <assert_post_action>
{
   1555a:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1555c:	6811      	ldr	r1, [r2, #0]
   1555e:	b929      	cbnz	r1, 1556c <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   15560:	4621      	mov	r1, r4
   15562:	4628      	mov	r0, r5
}
   15564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   15568:	f002 bde8 	b.w	1813c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1556c:	7953      	ldrb	r3, [r2, #5]
   1556e:	f043 0301 	orr.w	r3, r3, #1
   15572:	7153      	strb	r3, [r2, #5]
   15574:	460a      	mov	r2, r1
   15576:	e7f1      	b.n	1555c <net_buf_put+0x38>
   15578:	000222ae 	.word	0x000222ae
   1557c:	0001fbb7 	.word	0x0001fbb7

00015580 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   15580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   15584:	4605      	mov	r5, r0
   15586:	b328      	cbz	r0, 155d4 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   15588:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1558a:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1558e:	4e1b      	ldr	r6, [pc, #108]	; (155fc <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   15590:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   15592:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   15594:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   15596:	3b01      	subs	r3, #1
   15598:	b2db      	uxtb	r3, r3
   1559a:	7123      	strb	r3, [r4, #4]
   1559c:	b9c3      	cbnz	r3, 155d0 <net_buf_unref+0x50>
		if (buf->__buf) {
   1559e:	6921      	ldr	r1, [r4, #16]
   155a0:	b159      	cbz	r1, 155ba <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   155a2:	7963      	ldrb	r3, [r4, #5]
   155a4:	079b      	lsls	r3, r3, #30
   155a6:	d407      	bmi.n	155b8 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   155a8:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   155aa:	4620      	mov	r0, r4
   155ac:	fb08 6303 	mla	r3, r8, r3, r6
   155b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   155b2:	681b      	ldr	r3, [r3, #0]
   155b4:	689b      	ldr	r3, [r3, #8]
   155b6:	4798      	blx	r3
			buf->__buf = NULL;
   155b8:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   155ba:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   155bc:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   155be:	fb08 6300 	mla	r3, r8, r0, r6
   155c2:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   155c4:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   155c6:	b193      	cbz	r3, 155ee <net_buf_unref+0x6e>
			pool->destroy(buf);
   155c8:	4620      	mov	r0, r4
   155ca:	4798      	blx	r3
	while (buf) {
   155cc:	2d00      	cmp	r5, #0
   155ce:	d1df      	bne.n	15590 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   155d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   155d4:	490a      	ldr	r1, [pc, #40]	; (15600 <net_buf_unref+0x80>)
   155d6:	480b      	ldr	r0, [pc, #44]	; (15604 <net_buf_unref+0x84>)
   155d8:	f44f 7202 	mov.w	r2, #520	; 0x208
   155dc:	f005 f846 	bl	1a66c <printk>
}
   155e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   155e4:	f44f 7102 	mov.w	r1, #520	; 0x208
   155e8:	4805      	ldr	r0, [pc, #20]	; (15600 <net_buf_unref+0x80>)
   155ea:	f005 bae5 	b.w	1abb8 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   155ee:	4621      	mov	r1, r4
   155f0:	fb00 6008 	mla	r0, r0, r8, r6
   155f4:	f008 fc02 	bl	1ddfc <k_queue_prepend>
}
   155f8:	e7e8      	b.n	155cc <net_buf_unref+0x4c>
   155fa:	bf00      	nop
   155fc:	200086c0 	.word	0x200086c0
   15600:	000222ae 	.word	0x000222ae
   15604:	0001fbb7 	.word	0x0001fbb7

00015608 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   15608:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1560a:	4604      	mov	r4, r0
   1560c:	b950      	cbnz	r0, 15624 <net_buf_ref+0x1c>
   1560e:	4908      	ldr	r1, [pc, #32]	; (15630 <net_buf_ref+0x28>)
   15610:	4808      	ldr	r0, [pc, #32]	; (15634 <net_buf_ref+0x2c>)
   15612:	f240 2237 	movw	r2, #567	; 0x237
   15616:	f005 f829 	bl	1a66c <printk>
   1561a:	f240 2137 	movw	r1, #567	; 0x237
   1561e:	4804      	ldr	r0, [pc, #16]	; (15630 <net_buf_ref+0x28>)
   15620:	f005 faca 	bl	1abb8 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   15624:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   15626:	4620      	mov	r0, r4
	buf->ref++;
   15628:	3301      	adds	r3, #1
   1562a:	7123      	strb	r3, [r4, #4]
}
   1562c:	bd10      	pop	{r4, pc}
   1562e:	bf00      	nop
   15630:	000222ae 	.word	0x000222ae
   15634:	0001fbb7 	.word	0x0001fbb7

00015638 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   15638:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   1563a:	4604      	mov	r4, r0
   1563c:	b950      	cbnz	r0, 15654 <net_buf_frag_last+0x1c>
   1563e:	4908      	ldr	r1, [pc, #32]	; (15660 <net_buf_frag_last+0x28>)
   15640:	4808      	ldr	r0, [pc, #32]	; (15664 <net_buf_frag_last+0x2c>)
   15642:	f44f 721d 	mov.w	r2, #628	; 0x274
   15646:	f005 f811 	bl	1a66c <printk>
   1564a:	f44f 711d 	mov.w	r1, #628	; 0x274
   1564e:	4804      	ldr	r0, [pc, #16]	; (15660 <net_buf_frag_last+0x28>)
   15650:	f005 fab2 	bl	1abb8 <assert_post_action>

	while (buf->frags) {
   15654:	4620      	mov	r0, r4
   15656:	6824      	ldr	r4, [r4, #0]
   15658:	2c00      	cmp	r4, #0
   1565a:	d1fb      	bne.n	15654 <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   1565c:	bd10      	pop	{r4, pc}
   1565e:	bf00      	nop
   15660:	000222ae 	.word	0x000222ae
   15664:	0001fbb7 	.word	0x0001fbb7

00015668 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   15668:	b538      	push	{r3, r4, r5, lr}
   1566a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1566c:	4604      	mov	r4, r0
   1566e:	b950      	cbnz	r0, 15686 <net_buf_frag_insert+0x1e>
   15670:	490f      	ldr	r1, [pc, #60]	; (156b0 <net_buf_frag_insert+0x48>)
   15672:	4810      	ldr	r0, [pc, #64]	; (156b4 <net_buf_frag_insert+0x4c>)
   15674:	f240 227f 	movw	r2, #639	; 0x27f
   15678:	f004 fff8 	bl	1a66c <printk>
   1567c:	f240 217f 	movw	r1, #639	; 0x27f
   15680:	480b      	ldr	r0, [pc, #44]	; (156b0 <net_buf_frag_insert+0x48>)
   15682:	f005 fa99 	bl	1abb8 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   15686:	b955      	cbnz	r5, 1569e <net_buf_frag_insert+0x36>
   15688:	4909      	ldr	r1, [pc, #36]	; (156b0 <net_buf_frag_insert+0x48>)
   1568a:	480a      	ldr	r0, [pc, #40]	; (156b4 <net_buf_frag_insert+0x4c>)
   1568c:	f44f 7220 	mov.w	r2, #640	; 0x280
   15690:	f004 ffec 	bl	1a66c <printk>
   15694:	f44f 7120 	mov.w	r1, #640	; 0x280
   15698:	4805      	ldr	r0, [pc, #20]	; (156b0 <net_buf_frag_insert+0x48>)
   1569a:	f005 fa8d 	bl	1abb8 <assert_post_action>

	if (parent->frags) {
   1569e:	6823      	ldr	r3, [r4, #0]
   156a0:	b123      	cbz	r3, 156ac <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   156a2:	4628      	mov	r0, r5
   156a4:	f7ff ffc8 	bl	15638 <net_buf_frag_last>
   156a8:	6823      	ldr	r3, [r4, #0]
   156aa:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   156ac:	6025      	str	r5, [r4, #0]
}
   156ae:	bd38      	pop	{r3, r4, r5, pc}
   156b0:	000222ae 	.word	0x000222ae
   156b4:	0001fbb7 	.word	0x0001fbb7

000156b8 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   156b8:	b538      	push	{r3, r4, r5, lr}
   156ba:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   156bc:	460d      	mov	r5, r1
   156be:	b951      	cbnz	r1, 156d6 <net_buf_frag_add+0x1e>
   156c0:	490c      	ldr	r1, [pc, #48]	; (156f4 <net_buf_frag_add+0x3c>)
   156c2:	480d      	ldr	r0, [pc, #52]	; (156f8 <net_buf_frag_add+0x40>)
   156c4:	f240 228b 	movw	r2, #651	; 0x28b
   156c8:	f004 ffd0 	bl	1a66c <printk>
   156cc:	f240 218b 	movw	r1, #651	; 0x28b
   156d0:	4808      	ldr	r0, [pc, #32]	; (156f4 <net_buf_frag_add+0x3c>)
   156d2:	f005 fa71 	bl	1abb8 <assert_post_action>

	if (!head) {
   156d6:	b924      	cbnz	r4, 156e2 <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   156d8:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   156da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   156de:	f7ff bf93 	b.w	15608 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   156e2:	4620      	mov	r0, r4
   156e4:	f7ff ffa8 	bl	15638 <net_buf_frag_last>
   156e8:	4629      	mov	r1, r5
   156ea:	f7ff ffbd 	bl	15668 <net_buf_frag_insert>
}
   156ee:	4620      	mov	r0, r4
   156f0:	bd38      	pop	{r3, r4, r5, pc}
   156f2:	bf00      	nop
   156f4:	000222ae 	.word	0x000222ae
   156f8:	0001fbb7 	.word	0x0001fbb7

000156fc <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   156fc:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   156fe:	6882      	ldr	r2, [r0, #8]
   15700:	6803      	ldr	r3, [r0, #0]
{
   15702:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   15704:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   15706:	4299      	cmp	r1, r3
{
   15708:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1570a:	d90a      	bls.n	15722 <net_buf_simple_push+0x26>
   1570c:	4908      	ldr	r1, [pc, #32]	; (15730 <net_buf_simple_push+0x34>)
   1570e:	4809      	ldr	r0, [pc, #36]	; (15734 <net_buf_simple_push+0x38>)
   15710:	f240 4204 	movw	r2, #1028	; 0x404
   15714:	f004 ffaa 	bl	1a66c <printk>
   15718:	f240 4104 	movw	r1, #1028	; 0x404
   1571c:	4804      	ldr	r0, [pc, #16]	; (15730 <net_buf_simple_push+0x34>)
   1571e:	f005 fa4b 	bl	1abb8 <assert_post_action>
	buf->data -= len;
   15722:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   15724:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   15726:	1b40      	subs	r0, r0, r5
	buf->len += len;
   15728:	440d      	add	r5, r1
	buf->data -= len;
   1572a:	6020      	str	r0, [r4, #0]
	buf->len += len;
   1572c:	80a5      	strh	r5, [r4, #4]
}
   1572e:	bd38      	pop	{r3, r4, r5, pc}
   15730:	000222ae 	.word	0x000222ae
   15734:	0001fbb7 	.word	0x0001fbb7

00015738 <net_buf_simple_pull>:
{
   15738:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1573a:	8883      	ldrh	r3, [r0, #4]
{
   1573c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1573e:	428b      	cmp	r3, r1
{
   15740:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   15742:	d20a      	bcs.n	1575a <net_buf_simple_pull+0x22>
   15744:	4908      	ldr	r1, [pc, #32]	; (15768 <net_buf_simple_pull+0x30>)
   15746:	4809      	ldr	r0, [pc, #36]	; (1576c <net_buf_simple_pull+0x34>)
   15748:	f240 4264 	movw	r2, #1124	; 0x464
   1574c:	f004 ff8e 	bl	1a66c <printk>
   15750:	f240 4164 	movw	r1, #1124	; 0x464
   15754:	4804      	ldr	r0, [pc, #16]	; (15768 <net_buf_simple_pull+0x30>)
   15756:	f005 fa2f 	bl	1abb8 <assert_post_action>
	buf->len -= len;
   1575a:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   1575c:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   1575e:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   15760:	4428      	add	r0, r5
	buf->len -= len;
   15762:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   15764:	6020      	str	r0, [r4, #0]
}
   15766:	bd38      	pop	{r3, r4, r5, pc}
   15768:	000222ae 	.word	0x000222ae
   1576c:	0001fbb7 	.word	0x0001fbb7

00015770 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   15770:	8883      	ldrh	r3, [r0, #4]
{
   15772:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   15774:	428b      	cmp	r3, r1
{
   15776:	4604      	mov	r4, r0
   15778:	460d      	mov	r5, r1
	void *data = buf->data;
   1577a:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1577c:	d20a      	bcs.n	15794 <net_buf_simple_pull_mem+0x24>
   1577e:	4909      	ldr	r1, [pc, #36]	; (157a4 <net_buf_simple_pull_mem+0x34>)
   15780:	4809      	ldr	r0, [pc, #36]	; (157a8 <net_buf_simple_pull_mem+0x38>)
   15782:	f44f 628e 	mov.w	r2, #1136	; 0x470
   15786:	f004 ff71 	bl	1a66c <printk>
   1578a:	f44f 618e 	mov.w	r1, #1136	; 0x470
   1578e:	4805      	ldr	r0, [pc, #20]	; (157a4 <net_buf_simple_pull_mem+0x34>)
   15790:	f005 fa12 	bl	1abb8 <assert_post_action>
	buf->len -= len;
   15794:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   15796:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   15798:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   1579a:	4429      	add	r1, r5
}
   1579c:	4630      	mov	r0, r6
	buf->len -= len;
   1579e:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   157a0:	6021      	str	r1, [r4, #0]
}
   157a2:	bd70      	pop	{r4, r5, r6, pc}
   157a4:	000222ae 	.word	0x000222ae
   157a8:	0001fbb7 	.word	0x0001fbb7

000157ac <net_buf_simple_add>:
{
   157ac:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   157ae:	6803      	ldr	r3, [r0, #0]
   157b0:	8886      	ldrh	r6, [r0, #4]
   157b2:	4604      	mov	r4, r0
   157b4:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   157b6:	f007 fcd3 	bl	1d160 <net_buf_simple_tailroom>
   157ba:	4288      	cmp	r0, r1
{
   157bc:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   157be:	d20a      	bcs.n	157d6 <net_buf_simple_add+0x2a>
   157c0:	4907      	ldr	r1, [pc, #28]	; (157e0 <net_buf_simple_add+0x34>)
   157c2:	4808      	ldr	r0, [pc, #32]	; (157e4 <net_buf_simple_add+0x38>)
   157c4:	f240 3215 	movw	r2, #789	; 0x315
   157c8:	f004 ff50 	bl	1a66c <printk>
   157cc:	f240 3115 	movw	r1, #789	; 0x315
   157d0:	4803      	ldr	r0, [pc, #12]	; (157e0 <net_buf_simple_add+0x34>)
   157d2:	f005 f9f1 	bl	1abb8 <assert_post_action>
	buf->len += len;
   157d6:	88a1      	ldrh	r1, [r4, #4]
}
   157d8:	4630      	mov	r0, r6
	buf->len += len;
   157da:	440d      	add	r5, r1
   157dc:	80a5      	strh	r5, [r4, #4]
}
   157de:	bd70      	pop	{r4, r5, r6, pc}
   157e0:	000222ae 	.word	0x000222ae
   157e4:	0001fbb7 	.word	0x0001fbb7

000157e8 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   157e8:	b570      	push	{r4, r5, r6, lr}
   157ea:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   157ec:	460c      	mov	r4, r1
	return port->data;
   157ee:	68c5      	ldr	r5, [r0, #12]
   157f0:	b941      	cbnz	r1, 15804 <gpio_nrfx_manage_callback+0x1c>
   157f2:	491e      	ldr	r1, [pc, #120]	; (1586c <gpio_nrfx_manage_callback+0x84>)
   157f4:	481e      	ldr	r0, [pc, #120]	; (15870 <gpio_nrfx_manage_callback+0x88>)
   157f6:	2224      	movs	r2, #36	; 0x24
   157f8:	f004 ff38 	bl	1a66c <printk>
   157fc:	2124      	movs	r1, #36	; 0x24
   157fe:	481b      	ldr	r0, [pc, #108]	; (1586c <gpio_nrfx_manage_callback+0x84>)
   15800:	f005 f9da 	bl	1abb8 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   15804:	6863      	ldr	r3, [r4, #4]
   15806:	b943      	cbnz	r3, 1581a <gpio_nrfx_manage_callback+0x32>
   15808:	4918      	ldr	r1, [pc, #96]	; (1586c <gpio_nrfx_manage_callback+0x84>)
   1580a:	4819      	ldr	r0, [pc, #100]	; (15870 <gpio_nrfx_manage_callback+0x88>)
   1580c:	2225      	movs	r2, #37	; 0x25
   1580e:	f004 ff2d 	bl	1a66c <printk>
   15812:	2125      	movs	r1, #37	; 0x25
   15814:	4815      	ldr	r0, [pc, #84]	; (1586c <gpio_nrfx_manage_callback+0x84>)
   15816:	f005 f9cf 	bl	1abb8 <assert_post_action>
	return list->head;
   1581a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1581c:	b15b      	cbz	r3, 15836 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1581e:	2200      	movs	r2, #0
   15820:	429c      	cmp	r4, r3
   15822:	d112      	bne.n	1584a <gpio_nrfx_manage_callback+0x62>
	return node->next;
   15824:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   15826:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   15828:	b952      	cbnz	r2, 15840 <gpio_nrfx_manage_callback+0x58>
   1582a:	42a1      	cmp	r1, r4
	list->head = node;
   1582c:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1582e:	d100      	bne.n	15832 <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   15830:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   15832:	2300      	movs	r3, #0
   15834:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   15836:	b96e      	cbnz	r6, 15854 <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   15838:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   1583a:	bd70      	pop	{r4, r5, r6, pc}
   1583c:	460b      	mov	r3, r1
   1583e:	e7ef      	b.n	15820 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   15840:	42a1      	cmp	r1, r4
	parent->next = child;
   15842:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15844:	bf08      	it	eq
   15846:	60aa      	streq	r2, [r5, #8]
}
   15848:	e7f3      	b.n	15832 <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   1584a:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1584c:	461a      	mov	r2, r3
   1584e:	2900      	cmp	r1, #0
   15850:	d1f4      	bne.n	1583c <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   15852:	b13e      	cbz	r6, 15864 <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   15854:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   15856:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   15858:	6023      	str	r3, [r4, #0]
	list->head = node;
   1585a:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1585c:	2800      	cmp	r0, #0
   1585e:	d1eb      	bne.n	15838 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   15860:	60ac      	str	r4, [r5, #8]
}
   15862:	e7ea      	b.n	1583a <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   15864:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   15868:	e7e7      	b.n	1583a <gpio_nrfx_manage_callback+0x52>
   1586a:	bf00      	nop
   1586c:	000222da 	.word	0x000222da
   15870:	0001fbb7 	.word	0x0001fbb7

00015874 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15874:	6802      	ldr	r2, [r0, #0]
{
   15876:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   15878:	0953      	lsrs	r3, r2, #5
{
   1587a:	4604      	mov	r4, r0
    switch (port)
   1587c:	d029      	beq.n	158d2 <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   1587e:	2b01      	cmp	r3, #1
   15880:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15884:	bf18      	it	ne
   15886:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   15888:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   1588c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1588e:	07db      	lsls	r3, r3, #31
   15890:	d40a      	bmi.n	158a8 <nrf_gpio_pin_port_decode+0x34>
   15892:	4912      	ldr	r1, [pc, #72]	; (158dc <nrf_gpio_pin_port_decode+0x68>)
   15894:	4812      	ldr	r0, [pc, #72]	; (158e0 <nrf_gpio_pin_port_decode+0x6c>)
   15896:	f240 221a 	movw	r2, #538	; 0x21a
   1589a:	f004 fee7 	bl	1a66c <printk>
   1589e:	f240 211a 	movw	r1, #538	; 0x21a
   158a2:	480e      	ldr	r0, [pc, #56]	; (158dc <nrf_gpio_pin_port_decode+0x68>)
   158a4:	f005 f988 	bl	1abb8 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   158a8:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   158aa:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   158ae:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   158b0:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   158b2:	d00c      	beq.n	158ce <nrf_gpio_pin_port_decode+0x5a>
   158b4:	2b01      	cmp	r3, #1
   158b6:	d00f      	beq.n	158d8 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   158b8:	4908      	ldr	r1, [pc, #32]	; (158dc <nrf_gpio_pin_port_decode+0x68>)
   158ba:	4809      	ldr	r0, [pc, #36]	; (158e0 <nrf_gpio_pin_port_decode+0x6c>)
   158bc:	f240 221f 	movw	r2, #543	; 0x21f
   158c0:	f004 fed4 	bl	1a66c <printk>
   158c4:	f240 211f 	movw	r1, #543	; 0x21f
   158c8:	4804      	ldr	r0, [pc, #16]	; (158dc <nrf_gpio_pin_port_decode+0x68>)
   158ca:	f005 f975 	bl	1abb8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   158ce:	4805      	ldr	r0, [pc, #20]	; (158e4 <nrf_gpio_pin_port_decode+0x70>)
}
   158d0:	bd10      	pop	{r4, pc}
    switch (port)
   158d2:	f04f 33ff 	mov.w	r3, #4294967295
   158d6:	e7d7      	b.n	15888 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   158d8:	4803      	ldr	r0, [pc, #12]	; (158e8 <nrf_gpio_pin_port_decode+0x74>)
   158da:	e7f9      	b.n	158d0 <nrf_gpio_pin_port_decode+0x5c>
   158dc:	00022307 	.word	0x00022307
   158e0:	0001fbb7 	.word	0x0001fbb7
   158e4:	40842500 	.word	0x40842500
   158e8:	40842800 	.word	0x40842800

000158ec <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   158ec:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   158ee:	4b09      	ldr	r3, [pc, #36]	; (15914 <gpio_nrfx_init+0x28>)
   158f0:	781a      	ldrb	r2, [r3, #0]
   158f2:	b96a      	cbnz	r2, 15910 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   158f4:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   158f6:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   158f8:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   158fa:	2105      	movs	r1, #5
   158fc:	f7f7 ff86 	bl	d80c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   15900:	202f      	movs	r0, #47	; 0x2f
   15902:	f7f7 ff65 	bl	d7d0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   15906:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1590a:	4b03      	ldr	r3, [pc, #12]	; (15918 <gpio_nrfx_init+0x2c>)
   1590c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   15910:	2000      	movs	r0, #0
   15912:	bd08      	pop	{r3, pc}
   15914:	2000c990 	.word	0x2000c990
   15918:	4002f000 	.word	0x4002f000

0001591c <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1591c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   15920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15924:	4680      	mov	r8, r0
   15926:	460e      	mov	r6, r1
   15928:	4617      	mov	r7, r2
   1592a:	4699      	mov	r9, r3
	return port->data;
   1592c:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   1592e:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   15932:	f040 80ab 	bne.w	15a8c <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   15936:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15938:	a801      	add	r0, sp, #4
   1593a:	7a1b      	ldrb	r3, [r3, #8]
   1593c:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   15940:	9301      	str	r3, [sp, #4]
   15942:	f7ff ff97 	bl	15874 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   15946:	9b01      	ldr	r3, [sp, #4]
   15948:	3380      	adds	r3, #128	; 0x80
   1594a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1594e:	07d8      	lsls	r0, r3, #31
   15950:	f100 80bb 	bmi.w	15aca <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15954:	2101      	movs	r1, #1
   15956:	68e3      	ldr	r3, [r4, #12]
   15958:	40b1      	lsls	r1, r6
   1595a:	4319      	orrs	r1, r3
   1595c:	60e1      	str	r1, [r4, #12]
   1595e:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15960:	2000      	movs	r0, #0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15962:	6963      	ldr	r3, [r4, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15964:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   15966:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   1596a:	bf0c      	ite	eq
   1596c:	430b      	orreq	r3, r1
   1596e:	438b      	bicne	r3, r1
   15970:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   15972:	69a3      	ldr	r3, [r4, #24]
   15974:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   15978:	bf0c      	ite	eq
   1597a:	430b      	orreq	r3, r1
   1597c:	438b      	bicne	r3, r1
   1597e:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15980:	6923      	ldr	r3, [r4, #16]
   15982:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   15986:	bf0c      	ite	eq
   15988:	4319      	orreq	r1, r3
   1598a:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1598e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   15992:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   15994:	7a1b      	ldrb	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   15996:	4a4e      	ldr	r2, [pc, #312]	; (15ad0 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   15998:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   1599c:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	return port->data;
   159a0:	f8d8 700c 	ldr.w	r7, [r8, #12]
   159a4:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   159a6:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   159aa:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   159ae:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   159b2:	428d      	cmp	r5, r1
   159b4:	d175      	bne.n	15aa2 <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   159b6:	fa23 f100 	lsr.w	r1, r3, r0
   159ba:	07c9      	lsls	r1, r1, #31
   159bc:	d571      	bpl.n	15aa2 <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   159be:	0083      	lsls	r3, r0, #2
   159c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   159c4:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   159c8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   159cc:	f021 0101 	bic.w	r1, r1, #1
   159d0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   159d4:	2301      	movs	r3, #1
   159d6:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   159d8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   159dc:	b2c0      	uxtb	r0, r0
   159de:	f001 f9bf 	bl	16d60 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   159e2:	4628      	mov	r0, r5
   159e4:	2100      	movs	r1, #0
   159e6:	f007 fbff 	bl	1d1e8 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   159ea:	68f8      	ldr	r0, [r7, #12]
   159ec:	40f0      	lsrs	r0, r6
   159ee:	f010 0001 	ands.w	r0, r0, #1
   159f2:	d048      	beq.n	15a86 <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   159f4:	6978      	ldr	r0, [r7, #20]
   159f6:	40f0      	lsrs	r0, r6
   159f8:	f010 0401 	ands.w	r4, r0, #1
   159fc:	d059      	beq.n	15ab2 <gpio_nrfx_pin_interrupt_configure+0x196>
			if (data->double_edge & BIT(pin)) {
   159fe:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   15a00:	a801      	add	r0, sp, #4
			if (data->double_edge & BIT(pin)) {
   15a02:	40f3      	lsrs	r3, r6
   15a04:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15a06:	bf57      	itett	pl
   15a08:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   15a0a:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   15a0c:	fa21 f606 	lsrpl.w	r6, r1, r6
   15a10:	f006 0601 	andpl.w	r6, r6, #1
   15a14:	bf5c      	itt	pl
   15a16:	f1c6 0602 	rsbpl	r6, r6, #2
   15a1a:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   15a1c:	f001 f9c0 	bl	16da0 <nrfx_gpiote_channel_alloc>
   15a20:	4b2c      	ldr	r3, [pc, #176]	; (15ad4 <gpio_nrfx_pin_interrupt_configure+0x1b8>)
   15a22:	4298      	cmp	r0, r3
   15a24:	d142      	bne.n	15aac <gpio_nrfx_pin_interrupt_configure+0x190>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15a26:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   15a28:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15a2c:	022d      	lsls	r5, r5, #8
   15a2e:	008b      	lsls	r3, r1, #2
   15a30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15a34:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15a38:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15a3c:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   15a40:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   15a44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   15a48:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   15a4c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15a50:	4315      	orrs	r5, r2
   15a52:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   15a56:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   15a5a:	4b1f      	ldr	r3, [pc, #124]	; (15ad8 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   15a5c:	008a      	lsls	r2, r1, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15a5e:	5098      	str	r0, [r3, r2]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   15a60:	f89d 1004 	ldrb.w	r1, [sp, #4]
   15a64:	589b      	ldr	r3, [r3, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   15a66:	008b      	lsls	r3, r1, #2
   15a68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15a6c:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   15a70:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   15a74:	f042 0201 	orr.w	r2, r2, #1
   15a78:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   15a7c:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   15a7e:	4a14      	ldr	r2, [pc, #80]	; (15ad0 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   15a80:	408b      	lsls	r3, r1
   15a82:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   15a86:	b003      	add	sp, #12
   15a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   15a8c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   15a90:	f47f af60 	bne.w	15954 <gpio_nrfx_pin_interrupt_configure+0x38>
   15a94:	2101      	movs	r1, #1
   15a96:	fa01 f306 	lsl.w	r3, r1, r6
   15a9a:	68e1      	ldr	r1, [r4, #12]
   15a9c:	ea21 0103 	bic.w	r1, r1, r3
   15aa0:	e75c      	b.n	1595c <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15aa2:	3001      	adds	r0, #1
   15aa4:	2808      	cmp	r0, #8
   15aa6:	f47f af7e 	bne.w	159a6 <gpio_nrfx_pin_interrupt_configure+0x8a>
   15aaa:	e79a      	b.n	159e2 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   15aac:	f06f 0012 	mvn.w	r0, #18
   15ab0:	e7e9      	b.n	15a86 <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15ab2:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15ab4:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   15ab6:	40f1      	lsrs	r1, r6
   15ab8:	f001 0101 	and.w	r1, r1, #1
   15abc:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   15ac0:	b2c9      	uxtb	r1, r1
   15ac2:	f007 fb91 	bl	1d1e8 <nrf_gpio_cfg_sense_set>
	int res = 0;
   15ac6:	4620      	mov	r0, r4
   15ac8:	e7dd      	b.n	15a86 <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   15aca:	f06f 0022 	mvn.w	r0, #34	; 0x22
   15ace:	e7da      	b.n	15a86 <gpio_nrfx_pin_interrupt_configure+0x16a>
   15ad0:	4002f000 	.word	0x4002f000
   15ad4:	0bad0000 	.word	0x0bad0000
   15ad8:	4002f100 	.word	0x4002f100

00015adc <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15adc:	4b2e      	ldr	r3, [pc, #184]	; (15b98 <gpio_nrfx_config+0xbc>)
{
   15ade:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15ae0:	4c2e      	ldr	r4, [pc, #184]	; (15b9c <gpio_nrfx_config+0xc0>)
   15ae2:	4013      	ands	r3, r2
   15ae4:	42a3      	cmp	r3, r4
	return port->config;
   15ae6:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15ae8:	d044      	beq.n	15b74 <gpio_nrfx_config+0x98>
   15aea:	d80e      	bhi.n	15b0a <gpio_nrfx_config+0x2e>
   15aec:	2b06      	cmp	r3, #6
   15aee:	d043      	beq.n	15b78 <gpio_nrfx_config+0x9c>
   15af0:	d806      	bhi.n	15b00 <gpio_nrfx_config+0x24>
   15af2:	2b00      	cmp	r3, #0
   15af4:	d040      	beq.n	15b78 <gpio_nrfx_config+0x9c>
   15af6:	2b02      	cmp	r3, #2
   15af8:	d040      	beq.n	15b7c <gpio_nrfx_config+0xa0>
   15afa:	f06f 0015 	mvn.w	r0, #21
   15afe:	e037      	b.n	15b70 <gpio_nrfx_config+0x94>
   15b00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   15b04:	d1f9      	bne.n	15afa <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   15b06:	2401      	movs	r4, #1
   15b08:	e009      	b.n	15b1e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15b0a:	4c25      	ldr	r4, [pc, #148]	; (15ba0 <gpio_nrfx_config+0xc4>)
   15b0c:	42a3      	cmp	r3, r4
   15b0e:	d037      	beq.n	15b80 <gpio_nrfx_config+0xa4>
   15b10:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   15b14:	d036      	beq.n	15b84 <gpio_nrfx_config+0xa8>
   15b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   15b1a:	d1ee      	bne.n	15afa <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   15b1c:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   15b1e:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15b20:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   15b24:	bf4c      	ite	mi
   15b26:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   15b28:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   15b2c:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15b30:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   15b32:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   15b36:	d507      	bpl.n	15b48 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15b38:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   15b3a:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   15b3e:	d523      	bpl.n	15b88 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   15b40:	2301      	movs	r3, #1
   15b42:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   15b44:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   15b48:	7a03      	ldrb	r3, [r0, #8]
   15b4a:	f001 011f 	and.w	r1, r1, #31
   15b4e:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15b52:	a801      	add	r0, sp, #4
   15b54:	9101      	str	r1, [sp, #4]
   15b56:	f7ff fe8d 	bl	15874 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15b5a:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   15b5c:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   15b60:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   15b64:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15b68:	3280      	adds	r2, #128	; 0x80
   15b6a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   15b6e:	2000      	movs	r0, #0
}
   15b70:	b003      	add	sp, #12
   15b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   15b74:	2407      	movs	r4, #7
   15b76:	e7d2      	b.n	15b1e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   15b78:	461c      	mov	r4, r3
   15b7a:	e7d0      	b.n	15b1e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   15b7c:	2404      	movs	r4, #4
   15b7e:	e7ce      	b.n	15b1e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   15b80:	2405      	movs	r4, #5
   15b82:	e7cc      	b.n	15b1e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   15b84:	2403      	movs	r4, #3
   15b86:	e7ca      	b.n	15b1e <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   15b88:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   15b8a:	bf42      	ittt	mi
   15b8c:	2301      	movmi	r3, #1
   15b8e:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   15b90:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   15b94:	e7d8      	b.n	15b48 <gpio_nrfx_config+0x6c>
   15b96:	bf00      	nop
   15b98:	00f00006 	.word	0x00f00006
   15b9c:	00100006 	.word	0x00100006
   15ba0:	00400002 	.word	0x00400002

00015ba4 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   15ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15ba8:	460f      	mov	r7, r1
   15baa:	4616      	mov	r6, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15bac:	4604      	mov	r4, r0
   15bae:	b1e0      	cbz	r0, 15bea <gpio_fire_callbacks.isra.0+0x46>
	return node->next;
   15bb0:	6805      	ldr	r5, [r0, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   15bb2:	f8df 803c 	ldr.w	r8, [pc, #60]	; 15bf0 <gpio_fire_callbacks.isra.0+0x4c>
   15bb6:	f8df 903c 	ldr.w	r9, [pc, #60]	; 15bf4 <gpio_fire_callbacks.isra.0+0x50>
		if (cb->pin_mask & pins) {
   15bba:	68a3      	ldr	r3, [r4, #8]
   15bbc:	421e      	tst	r6, r3
   15bbe:	d010      	beq.n	15be2 <gpio_fire_callbacks.isra.0+0x3e>
			__ASSERT(cb->handler, "No callback handler!");
   15bc0:	6863      	ldr	r3, [r4, #4]
   15bc2:	b943      	cbnz	r3, 15bd6 <gpio_fire_callbacks.isra.0+0x32>
   15bc4:	4641      	mov	r1, r8
   15bc6:	4648      	mov	r0, r9
   15bc8:	2245      	movs	r2, #69	; 0x45
   15bca:	f004 fd4f 	bl	1a66c <printk>
   15bce:	2145      	movs	r1, #69	; 0x45
   15bd0:	4640      	mov	r0, r8
   15bd2:	f004 fff1 	bl	1abb8 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   15bd6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   15bda:	4621      	mov	r1, r4
   15bdc:	4638      	mov	r0, r7
   15bde:	4032      	ands	r2, r6
   15be0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   15be2:	b115      	cbz	r5, 15bea <gpio_fire_callbacks.isra.0+0x46>
   15be4:	462c      	mov	r4, r5
   15be6:	682d      	ldr	r5, [r5, #0]
   15be8:	e7e7      	b.n	15bba <gpio_fire_callbacks.isra.0+0x16>
		}
	}
}
   15bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15bee:	bf00      	nop
   15bf0:	000222da 	.word	0x000222da
   15bf4:	0001fbb7 	.word	0x0001fbb7

00015bf8 <gpiote_event_handler>:
{
   15bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   15bfa:	2600      	movs	r6, #0
   15bfc:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15c00:	4d28      	ldr	r5, [pc, #160]	; (15ca4 <gpiote_event_handler+0xac>)
   15c02:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   15c06:	b15c      	cbz	r4, 15c20 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   15c08:	4827      	ldr	r0, [pc, #156]	; (15ca8 <gpiote_event_handler+0xb0>)
   15c0a:	f007 fb26 	bl	1d25a <check_level_trigger_pins>
		fired_triggers[0] =
   15c0e:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   15c10:	4826      	ldr	r0, [pc, #152]	; (15cac <gpiote_event_handler+0xb4>)
   15c12:	f007 fb22 	bl	1d25a <check_level_trigger_pins>
		fired_triggers[1] =
   15c16:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15c18:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   15c1c:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   15c20:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   15c22:	2601      	movs	r6, #1
   15c24:	4694      	mov	ip, r2
{
   15c26:	4922      	ldr	r1, [pc, #136]	; (15cb0 <gpiote_event_handler+0xb8>)
    return p_reg->INTENSET & mask;
   15c28:	4d1e      	ldr	r5, [pc, #120]	; (15ca4 <gpiote_event_handler+0xac>)
   15c2a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   15c2e:	fa06 f002 	lsl.w	r0, r6, r2
   15c32:	4218      	tst	r0, r3
   15c34:	d016      	beq.n	15c64 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15c36:	680b      	ldr	r3, [r1, #0]
   15c38:	b1a3      	cbz	r3, 15c64 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   15c3a:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   15c3e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   15c42:	af02      	add	r7, sp, #8
   15c44:	f3c3 3040 	ubfx	r0, r3, #13, #1
   15c48:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   15c4c:	f850 7c08 	ldr.w	r7, [r0, #-8]
   15c50:	f3c3 2304 	ubfx	r3, r3, #8, #5
   15c54:	fa06 f303 	lsl.w	r3, r6, r3
   15c58:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   15c5a:	f8c1 c000 	str.w	ip, [r1]
   15c5e:	f840 3c08 	str.w	r3, [r0, #-8]
   15c62:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   15c64:	3201      	adds	r2, #1
   15c66:	2a08      	cmp	r2, #8
   15c68:	f101 0104 	add.w	r1, r1, #4
   15c6c:	d1dd      	bne.n	15c2a <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   15c6e:	9a00      	ldr	r2, [sp, #0]
   15c70:	b122      	cbz	r2, 15c7c <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   15c72:	4b10      	ldr	r3, [pc, #64]	; (15cb4 <gpiote_event_handler+0xbc>)
   15c74:	490c      	ldr	r1, [pc, #48]	; (15ca8 <gpiote_event_handler+0xb0>)
   15c76:	6858      	ldr	r0, [r3, #4]
   15c78:	f7ff ff94 	bl	15ba4 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   15c7c:	9a01      	ldr	r2, [sp, #4]
   15c7e:	b122      	cbz	r2, 15c8a <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   15c80:	4b0d      	ldr	r3, [pc, #52]	; (15cb8 <gpiote_event_handler+0xc0>)
   15c82:	490a      	ldr	r1, [pc, #40]	; (15cac <gpiote_event_handler+0xb4>)
   15c84:	6858      	ldr	r0, [r3, #4]
   15c86:	f7ff ff8d 	bl	15ba4 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   15c8a:	b144      	cbz	r4, 15c9e <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   15c8c:	4806      	ldr	r0, [pc, #24]	; (15ca8 <gpiote_event_handler+0xb0>)
   15c8e:	f007 fabe 	bl	1d20e <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   15c92:	4806      	ldr	r0, [pc, #24]	; (15cac <gpiote_event_handler+0xb4>)
}
   15c94:	b003      	add	sp, #12
   15c96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   15c9a:	f007 bab8 	b.w	1d20e <cfg_level_pins>
}
   15c9e:	b003      	add	sp, #12
   15ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15ca2:	bf00      	nop
   15ca4:	4002f000 	.word	0x4002f000
   15ca8:	200085d8 	.word	0x200085d8
   15cac:	200085e8 	.word	0x200085e8
   15cb0:	4002f100 	.word	0x4002f100
   15cb4:	2000af0c 	.word	0x2000af0c
   15cb8:	2000af28 	.word	0x2000af28

00015cbc <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   15cbc:	4b02      	ldr	r3, [pc, #8]	; (15cc8 <vipm_nrf_1_register_callback+0xc>)
   15cbe:	6059      	str	r1, [r3, #4]
   15cc0:	645a      	str	r2, [r3, #68]	; 0x44
   15cc2:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   15cc6:	4770      	bx	lr
   15cc8:	2000af4c 	.word	0x2000af4c

00015ccc <vipm_nrf_0_set_enabled>:
   15ccc:	b508      	push	{r3, lr}
   15cce:	2145      	movs	r1, #69	; 0x45
   15cd0:	4802      	ldr	r0, [pc, #8]	; (15cdc <vipm_nrf_0_set_enabled+0x10>)
   15cd2:	f004 fccb 	bl	1a66c <printk>
   15cd6:	f06f 0015 	mvn.w	r0, #21
   15cda:	bd08      	pop	{r3, pc}
   15cdc:	00022348 	.word	0x00022348

00015ce0 <vipm_nrf_0_register_callback>:
   15ce0:	2157      	movs	r1, #87	; 0x57
   15ce2:	4801      	ldr	r0, [pc, #4]	; (15ce8 <vipm_nrf_0_register_callback+0x8>)
   15ce4:	f004 bcc2 	b.w	1a66c <printk>
   15ce8:	00022369 	.word	0x00022369

00015cec <vipm_nrf_1_send>:
   15cec:	b508      	push	{r3, lr}
   15cee:	2145      	movs	r1, #69	; 0x45
   15cf0:	4802      	ldr	r0, [pc, #8]	; (15cfc <vipm_nrf_1_send+0x10>)
   15cf2:	f004 fcbb 	bl	1a66c <printk>
   15cf6:	f06f 0015 	mvn.w	r0, #21
   15cfa:	bd08      	pop	{r3, pc}
   15cfc:	000223a0 	.word	0x000223a0

00015d00 <vipm_nrf_init>:
{
   15d00:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
   15d02:	4d0b      	ldr	r5, [pc, #44]	; (15d30 <vipm_nrf_init+0x30>)
   15d04:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
   15d08:	b97c      	cbnz	r4, 15d2a <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
   15d0a:	4a0a      	ldr	r2, [pc, #40]	; (15d34 <vipm_nrf_init+0x34>)
   15d0c:	490a      	ldr	r1, [pc, #40]	; (15d38 <vipm_nrf_init+0x38>)
   15d0e:	4620      	mov	r0, r4
   15d10:	f001 f87e 	bl	16e10 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
   15d14:	4622      	mov	r2, r4
   15d16:	2101      	movs	r1, #1
   15d18:	202a      	movs	r0, #42	; 0x2a
   15d1a:	f7f7 fd77 	bl	d80c <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
   15d1e:	4807      	ldr	r0, [pc, #28]	; (15d3c <vipm_nrf_init+0x3c>)
   15d20:	f001 f89c 	bl	16e5c <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
   15d24:	2301      	movs	r3, #1
   15d26:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
   15d2a:	2000      	movs	r0, #0
   15d2c:	bd38      	pop	{r3, r4, r5, pc}
   15d2e:	bf00      	nop
   15d30:	2000af4c 	.word	0x2000af4c
   15d34:	2000af44 	.word	0x2000af44
   15d38:	00015d41 	.word	0x00015d41
   15d3c:	0001ed74 	.word	0x0001ed74

00015d40 <vipm_dispatcher>:
{
   15d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15d44:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   15d46:	4f17      	ldr	r7, [pc, #92]	; (15da4 <vipm_dispatcher+0x64>)
   15d48:	f8df 805c 	ldr.w	r8, [pc, #92]	; 15da8 <vipm_dispatcher+0x68>
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   15d4c:	4e17      	ldr	r6, [pc, #92]	; (15dac <vipm_dispatcher+0x6c>)
	while (event_mask) {
   15d4e:	b90d      	cbnz	r5, 15d54 <vipm_dispatcher+0x14>
}
   15d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   15d54:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   15d58:	b30c      	cbz	r4, 15d9e <vipm_dispatcher+0x5e>
  {
    return 32U;
  }
  return __builtin_clz(value);
   15d5a:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   15d5e:	2b0f      	cmp	r3, #15
   15d60:	461c      	mov	r4, r3
   15d62:	dd08      	ble.n	15d76 <vipm_dispatcher+0x36>
   15d64:	4639      	mov	r1, r7
   15d66:	4640      	mov	r0, r8
   15d68:	2283      	movs	r2, #131	; 0x83
   15d6a:	f004 fc7f 	bl	1a66c <printk>
   15d6e:	2183      	movs	r1, #131	; 0x83
   15d70:	4638      	mov	r0, r7
   15d72:	f004 ff21 	bl	1abb8 <assert_post_action>
		event_mask &= ~BIT(event_idx);
   15d76:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   15d78:	f856 9024 	ldr.w	r9, [r6, r4, lsl #2]
		event_mask &= ~BIT(event_idx);
   15d7c:	40a3      	lsls	r3, r4
   15d7e:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   15d82:	f1b9 0f00 	cmp.w	r9, #0
   15d86:	d0e2      	beq.n	15d4e <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
   15d88:	2300      	movs	r3, #0
   15d8a:	f104 0110 	add.w	r1, r4, #16
   15d8e:	3420      	adds	r4, #32
   15d90:	461a      	mov	r2, r3
   15d92:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   15d96:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   15d9a:	47c8      	blx	r9
   15d9c:	e7d7      	b.n	15d4e <vipm_dispatcher+0xe>
    return 32U;
   15d9e:	2420      	movs	r4, #32
   15da0:	e7e0      	b.n	15d64 <vipm_dispatcher+0x24>
   15da2:	bf00      	nop
   15da4:	000223c1 	.word	0x000223c1
   15da8:	0001fbb7 	.word	0x0001fbb7
   15dac:	2000af4c 	.word	0x2000af4c

00015db0 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   15db0:	2a10      	cmp	r2, #16
   15db2:	b508      	push	{r3, lr}
   15db4:	d810      	bhi.n	15dd8 <vipm_nrf_0_send+0x28>
   15db6:	b11a      	cbz	r2, 15dc0 <vipm_nrf_0_send+0x10>
   15db8:	2157      	movs	r1, #87	; 0x57
   15dba:	4809      	ldr	r0, [pc, #36]	; (15de0 <vipm_nrf_0_send+0x30>)
   15dbc:	f004 fc56 	bl	1a66c <printk>
   15dc0:	9b02      	ldr	r3, [sp, #8]
   15dc2:	2b00      	cmp	r3, #0
   15dc4:	dd03      	ble.n	15dce <vipm_nrf_0_send+0x1e>
   15dc6:	2157      	movs	r1, #87	; 0x57
   15dc8:	4806      	ldr	r0, [pc, #24]	; (15de4 <vipm_nrf_0_send+0x34>)
   15dca:	f004 fc4f 	bl	1a66c <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15dce:	2201      	movs	r2, #1
   15dd0:	2000      	movs	r0, #0
   15dd2:	4b05      	ldr	r3, [pc, #20]	; (15de8 <vipm_nrf_0_send+0x38>)
   15dd4:	601a      	str	r2, [r3, #0]
   15dd6:	bd08      	pop	{r3, pc}
   15dd8:	f06f 0015 	mvn.w	r0, #21
   15ddc:	e7fb      	b.n	15dd6 <vipm_nrf_0_send+0x26>
   15dde:	bf00      	nop
   15de0:	000223ef 	.word	0x000223ef
   15de4:	00022428 	.word	0x00022428
   15de8:	4002a000 	.word	0x4002a000

00015dec <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15dec:	6802      	ldr	r2, [r0, #0]
{
   15dee:	b510      	push	{r4, lr}
    switch (port)
   15df0:	0953      	lsrs	r3, r2, #5
{
   15df2:	4604      	mov	r4, r0
    switch (port)
   15df4:	d029      	beq.n	15e4a <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   15df6:	2b01      	cmp	r3, #1
   15df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15dfc:	bf18      	it	ne
   15dfe:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   15e00:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   15e04:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15e06:	07db      	lsls	r3, r3, #31
   15e08:	d40a      	bmi.n	15e20 <nrf_gpio_pin_port_decode+0x34>
   15e0a:	4912      	ldr	r1, [pc, #72]	; (15e54 <nrf_gpio_pin_port_decode+0x68>)
   15e0c:	4812      	ldr	r0, [pc, #72]	; (15e58 <nrf_gpio_pin_port_decode+0x6c>)
   15e0e:	f240 221a 	movw	r2, #538	; 0x21a
   15e12:	f004 fc2b 	bl	1a66c <printk>
   15e16:	f240 211a 	movw	r1, #538	; 0x21a
   15e1a:	480e      	ldr	r0, [pc, #56]	; (15e54 <nrf_gpio_pin_port_decode+0x68>)
   15e1c:	f004 fecc 	bl	1abb8 <assert_post_action>
    uint32_t pin_number = *p_pin;
   15e20:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   15e22:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15e26:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   15e28:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15e2a:	d00c      	beq.n	15e46 <nrf_gpio_pin_port_decode+0x5a>
   15e2c:	2b01      	cmp	r3, #1
   15e2e:	d00f      	beq.n	15e50 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   15e30:	4908      	ldr	r1, [pc, #32]	; (15e54 <nrf_gpio_pin_port_decode+0x68>)
   15e32:	4809      	ldr	r0, [pc, #36]	; (15e58 <nrf_gpio_pin_port_decode+0x6c>)
   15e34:	f240 221f 	movw	r2, #543	; 0x21f
   15e38:	f004 fc18 	bl	1a66c <printk>
   15e3c:	f240 211f 	movw	r1, #543	; 0x21f
   15e40:	4804      	ldr	r0, [pc, #16]	; (15e54 <nrf_gpio_pin_port_decode+0x68>)
   15e42:	f004 feb9 	bl	1abb8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   15e46:	4805      	ldr	r0, [pc, #20]	; (15e5c <nrf_gpio_pin_port_decode+0x70>)
}
   15e48:	bd10      	pop	{r4, pc}
    switch (port)
   15e4a:	f04f 33ff 	mov.w	r3, #4294967295
   15e4e:	e7d7      	b.n	15e00 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   15e50:	4803      	ldr	r0, [pc, #12]	; (15e60 <nrf_gpio_pin_port_decode+0x74>)
   15e52:	e7f9      	b.n	15e48 <nrf_gpio_pin_port_decode+0x5c>
   15e54:	00022307 	.word	0x00022307
   15e58:	0001fbb7 	.word	0x0001fbb7
   15e5c:	40842500 	.word	0x40842500
   15e60:	40842800 	.word	0x40842800

00015e64 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   15e64:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   15e66:	794b      	ldrb	r3, [r1, #5]
   15e68:	2b01      	cmp	r3, #1
   15e6a:	d02b      	beq.n	15ec4 <uarte_nrfx_configure+0x60>
   15e6c:	2b03      	cmp	r3, #3
   15e6e:	d126      	bne.n	15ebe <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   15e70:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   15e72:	798b      	ldrb	r3, [r1, #6]
   15e74:	2b03      	cmp	r3, #3
   15e76:	d122      	bne.n	15ebe <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   15e78:	79cd      	ldrb	r5, [r1, #7]
   15e7a:	b125      	cbz	r5, 15e86 <uarte_nrfx_configure+0x22>
   15e7c:	2d01      	cmp	r5, #1
   15e7e:	d11e      	bne.n	15ebe <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   15e80:	6843      	ldr	r3, [r0, #4]
   15e82:	791b      	ldrb	r3, [r3, #4]
   15e84:	b1db      	cbz	r3, 15ebe <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   15e86:	790a      	ldrb	r2, [r1, #4]
   15e88:	2a01      	cmp	r2, #1
   15e8a:	d01d      	beq.n	15ec8 <uarte_nrfx_configure+0x64>
   15e8c:	2a02      	cmp	r2, #2
   15e8e:	d01f      	beq.n	15ed0 <uarte_nrfx_configure+0x6c>
   15e90:	b9aa      	cbnz	r2, 15ebe <uarte_nrfx_configure+0x5a>
   15e92:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   15e94:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   15e96:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   15e98:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   15e9c:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   15e9e:	d06e      	beq.n	15f7e <uarte_nrfx_configure+0x11a>
   15ea0:	d833      	bhi.n	15f0a <uarte_nrfx_configure+0xa6>
   15ea2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   15ea6:	d06d      	beq.n	15f84 <uarte_nrfx_configure+0x120>
   15ea8:	d81c      	bhi.n	15ee4 <uarte_nrfx_configure+0x80>
   15eaa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   15eae:	d06b      	beq.n	15f88 <uarte_nrfx_configure+0x124>
   15eb0:	d810      	bhi.n	15ed4 <uarte_nrfx_configure+0x70>
   15eb2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   15eb6:	d06a      	beq.n	15f8e <uarte_nrfx_configure+0x12a>
   15eb8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   15ebc:	d06a      	beq.n	15f94 <uarte_nrfx_configure+0x130>
   15ebe:	f06f 0022 	mvn.w	r0, #34	; 0x22
   15ec2:	e05b      	b.n	15f7c <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
   15ec4:	2700      	movs	r7, #0
   15ec6:	e7d4      	b.n	15e72 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   15ec8:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   15ecc:	220e      	movs	r2, #14
   15ece:	e7e1      	b.n	15e94 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   15ed0:	2400      	movs	r4, #0
   15ed2:	e7fb      	b.n	15ecc <uarte_nrfx_configure+0x68>
	switch (baudrate) {
   15ed4:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   15ed8:	d05f      	beq.n	15f9a <uarte_nrfx_configure+0x136>
   15eda:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   15ede:	d1ee      	bne.n	15ebe <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   15ee0:	4b38      	ldr	r3, [pc, #224]	; (15fc4 <uarte_nrfx_configure+0x160>)
   15ee2:	e03e      	b.n	15f62 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15ee4:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   15ee8:	d05a      	beq.n	15fa0 <uarte_nrfx_configure+0x13c>
   15eea:	d807      	bhi.n	15efc <uarte_nrfx_configure+0x98>
   15eec:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   15ef0:	d058      	beq.n	15fa4 <uarte_nrfx_configure+0x140>
   15ef2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   15ef6:	d1e2      	bne.n	15ebe <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   15ef8:	4b33      	ldr	r3, [pc, #204]	; (15fc8 <uarte_nrfx_configure+0x164>)
   15efa:	e032      	b.n	15f62 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15efc:	f647 2c12 	movw	ip, #31250	; 0x7a12
   15f00:	4563      	cmp	r3, ip
   15f02:	d1dc      	bne.n	15ebe <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   15f04:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   15f08:	e02b      	b.n	15f62 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15f0a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   15f0e:	d04b      	beq.n	15fa8 <uarte_nrfx_configure+0x144>
   15f10:	d813      	bhi.n	15f3a <uarte_nrfx_configure+0xd6>
   15f12:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   15f16:	d04a      	beq.n	15fae <uarte_nrfx_configure+0x14a>
   15f18:	d809      	bhi.n	15f2e <uarte_nrfx_configure+0xca>
   15f1a:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   15f1e:	4563      	cmp	r3, ip
   15f20:	d047      	beq.n	15fb2 <uarte_nrfx_configure+0x14e>
   15f22:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   15f26:	d1ca      	bne.n	15ebe <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   15f28:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   15f2c:	e019      	b.n	15f62 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15f2e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   15f32:	d1c4      	bne.n	15ebe <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   15f34:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   15f38:	e013      	b.n	15f62 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15f3a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   15f3e:	d03b      	beq.n	15fb8 <uarte_nrfx_configure+0x154>
   15f40:	d809      	bhi.n	15f56 <uarte_nrfx_configure+0xf2>
   15f42:	f8df c088 	ldr.w	ip, [pc, #136]	; 15fcc <uarte_nrfx_configure+0x168>
   15f46:	4563      	cmp	r3, ip
   15f48:	d039      	beq.n	15fbe <uarte_nrfx_configure+0x15a>
   15f4a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   15f4e:	d1b6      	bne.n	15ebe <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   15f50:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   15f54:	e005      	b.n	15f62 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15f56:	f8df c078 	ldr.w	ip, [pc, #120]	; 15fd0 <uarte_nrfx_configure+0x16c>
   15f5a:	4563      	cmp	r3, ip
   15f5c:	d1af      	bne.n	15ebe <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   15f5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   15f62:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   15f66:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   15f68:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   15f6a:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   15f6c:	4322      	orrs	r2, r4
   15f6e:	3304      	adds	r3, #4
   15f70:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   15f72:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   15f76:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   15f7a:	2000      	movs	r0, #0
}
   15f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   15f7e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   15f82:	e7ee      	b.n	15f62 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   15f84:	4b13      	ldr	r3, [pc, #76]	; (15fd4 <uarte_nrfx_configure+0x170>)
   15f86:	e7ec      	b.n	15f62 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   15f88:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   15f8c:	e7e9      	b.n	15f62 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
   15f8e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   15f92:	e7e6      	b.n	15f62 <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15f94:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   15f98:	e7e3      	b.n	15f62 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   15f9a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   15f9e:	e7e0      	b.n	15f62 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   15fa0:	4b0d      	ldr	r3, [pc, #52]	; (15fd8 <uarte_nrfx_configure+0x174>)
   15fa2:	e7de      	b.n	15f62 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   15fa4:	4b0d      	ldr	r3, [pc, #52]	; (15fdc <uarte_nrfx_configure+0x178>)
   15fa6:	e7dc      	b.n	15f62 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   15fa8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   15fac:	e7d9      	b.n	15f62 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   15fae:	4b0c      	ldr	r3, [pc, #48]	; (15fe0 <uarte_nrfx_configure+0x17c>)
   15fb0:	e7d7      	b.n	15f62 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   15fb2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   15fb6:	e7d4      	b.n	15f62 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   15fb8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   15fbc:	e7d1      	b.n	15f62 <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   15fbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   15fc2:	e7ce      	b.n	15f62 <uarte_nrfx_configure+0xfe>
   15fc4:	0013b000 	.word	0x0013b000
   15fc8:	004ea000 	.word	0x004ea000
   15fcc:	0003d090 	.word	0x0003d090
   15fd0:	000f4240 	.word	0x000f4240
   15fd4:	00275000 	.word	0x00275000
   15fd8:	0075c000 	.word	0x0075c000
   15fdc:	003af000 	.word	0x003af000
   15fe0:	013a9000 	.word	0x013a9000

00015fe4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   15fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15fe8:	4606      	mov	r6, r0
   15fea:	4688      	mov	r8, r1
	return dev->data;
   15fec:	68c7      	ldr	r7, [r0, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15fee:	f007 ff62 	bl	1deb6 <k_is_in_isr>
   15ff2:	b9b8      	cbnz	r0, 16024 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   15ff4:	4b28      	ldr	r3, [pc, #160]	; (16098 <uarte_nrfx_poll_out+0xb4>)
   15ff6:	781b      	ldrb	r3, [r3, #0]
   15ff8:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   15ffc:	6872      	ldr	r2, [r6, #4]
   15ffe:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   16000:	b193      	cbz	r3, 16028 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   16002:	f04f 0320 	mov.w	r3, #32
   16006:	f3ef 8411 	mrs	r4, BASEPRI
   1600a:	f383 8811 	msr	BASEPRI, r3
   1600e:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   16012:	6870      	ldr	r0, [r6, #4]
   16014:	f007 fa04 	bl	1d420 <is_tx_ready.isra.0>
   16018:	bb38      	cbnz	r0, 1606a <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1601a:	f384 8811 	msr	BASEPRI, r4
   1601e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   16022:	e7ee      	b.n	16002 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   16024:	2301      	movs	r3, #1
   16026:	e7e9      	b.n	15ffc <uarte_nrfx_poll_out+0x18>
   16028:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1602a:	6870      	ldr	r0, [r6, #4]
   1602c:	f007 f9f8 	bl	1d420 <is_tx_ready.isra.0>
   16030:	b970      	cbnz	r0, 16050 <uarte_nrfx_poll_out+0x6c>
   16032:	2001      	movs	r0, #1
   16034:	f007 fa94 	bl	1d560 <nrfx_busy_wait>
   16038:	3c01      	subs	r4, #1
   1603a:	d1f6      	bne.n	1602a <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   1603c:	2100      	movs	r1, #0
   1603e:	2021      	movs	r0, #33	; 0x21
   16040:	f003 f906 	bl	19250 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   16044:	e7f0      	b.n	16028 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   16046:	f384 8811 	msr	BASEPRI, r4
   1604a:	f3bf 8f6f 	isb	sy
}
   1604e:	e7f5      	b.n	1603c <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   16050:	f04f 0320 	mov.w	r3, #32
   16054:	f3ef 8411 	mrs	r4, BASEPRI
   16058:	f383 8811 	msr	BASEPRI, r3
   1605c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   16060:	6870      	ldr	r0, [r6, #4]
   16062:	f007 f9dd 	bl	1d420 <is_tx_ready.isra.0>
   16066:	2800      	cmp	r0, #0
   16068:	d0ed      	beq.n	16046 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1606a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1606c:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   1606e:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16072:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16076:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1607a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   1607e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   16082:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   16086:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1608a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   1608c:	f384 8811 	msr	BASEPRI, r4
   16090:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   16094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16098:	2000c9b2 	.word	0x2000c9b2

0001609c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1609c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160a0:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   160a2:	f04f 0800 	mov.w	r8, #0
   160a6:	f04f 0914 	mov.w	r9, #20
   160aa:	2200      	movs	r2, #0
   160ac:	2101      	movs	r1, #1
   160ae:	2008      	movs	r0, #8
   160b0:	f7f7 fbac 	bl	d80c <z_arm_irq_priority_set>
   160b4:	2008      	movs	r0, #8
   160b6:	f7f7 fb8b 	bl	d7d0 <arch_irq_enable>
	return config->uarte_regs;
   160ba:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   160bc:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   160be:	681c      	ldr	r4, [r3, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   160c0:	2701      	movs	r7, #1
   160c2:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   160c6:	a801      	add	r0, sp, #4
	data->dev = dev;
   160c8:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   160ca:	f8cd 9004 	str.w	r9, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   160ce:	f7ff fe8d 	bl	15dec <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   160d2:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   160d4:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   160d8:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   160dc:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   160de:	a801      	add	r0, sp, #4
   160e0:	f8cd 9004 	str.w	r9, [sp, #4]
   160e4:	f7ff fe82 	bl	15dec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   160e8:	f04f 0b16 	mov.w	fp, #22
   160ec:	9b01      	ldr	r3, [sp, #4]
   160ee:	3380      	adds	r3, #128	; 0x80
   160f0:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   160f4:	a801      	add	r0, sp, #4
   160f6:	f8cd b004 	str.w	fp, [sp, #4]
   160fa:	f7ff fe77 	bl	15dec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   160fe:	9b01      	ldr	r3, [sp, #4]
   16100:	3380      	adds	r3, #128	; 0x80
   16102:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   16106:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1610a:	f04f 0915 	mov.w	r9, #21
   1610e:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16112:	a801      	add	r0, sp, #4
   16114:	f8cd 9004 	str.w	r9, [sp, #4]
   16118:	f7ff fe68 	bl	15dec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1611c:	9b01      	ldr	r3, [sp, #4]
   1611e:	3380      	adds	r3, #128	; 0x80
   16120:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
   16124:	f04f 0813 	mov.w	r8, #19
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16128:	a801      	add	r0, sp, #4
   1612a:	f8cd 8004 	str.w	r8, [sp, #4]
   1612e:	f7ff fe5d 	bl	15dec <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   16132:	9b01      	ldr	r3, [sp, #4]
   16134:	409f      	lsls	r7, r3
    p_reg->OUTSET = set_mask;
   16136:	6087      	str	r7, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   16138:	a801      	add	r0, sp, #4
   1613a:	f8cd 8004 	str.w	r8, [sp, #4]
   1613e:	f7ff fe55 	bl	15dec <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   16142:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   16144:	68e9      	ldr	r1, [r5, #12]
   16146:	3380      	adds	r3, #128	; 0x80
   16148:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
   1614c:	3104      	adds	r1, #4
    p_reg->PSEL.RTS = pselrts;
   1614e:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   16152:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   16154:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   16158:	f7ff fe84 	bl	15e64 <uarte_nrfx_configure>
	if (err) {
   1615c:	4607      	mov	r7, r0
   1615e:	b980      	cbnz	r0, 16182 <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   16160:	686b      	ldr	r3, [r5, #4]
   16162:	799b      	ldrb	r3, [r3, #6]
   16164:	2b00      	cmp	r3, #0
   16166:	d03a      	beq.n	161de <uarte_0_init+0x142>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   16168:	eb06 000b 	add.w	r0, r6, fp
   1616c:	f000 fddc 	bl	16d28 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   16170:	4b2b      	ldr	r3, [pc, #172]	; (16220 <uarte_0_init+0x184>)
   16172:	4298      	cmp	r0, r3
   16174:	d009      	beq.n	1618a <uarte_0_init+0xee>
		LOG_ERR("Failed to allocate PPI Channel");
   16176:	2145      	movs	r1, #69	; 0x45
   16178:	482a      	ldr	r0, [pc, #168]	; (16224 <uarte_0_init+0x188>)
   1617a:	f004 fa77 	bl	1a66c <printk>
		return -EIO;
   1617e:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   16182:	4638      	mov	r0, r7
   16184:	b003      	add	sp, #12
   16186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   1618a:	f514 7990 	adds.w	r9, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1618e:	f896 8016 	ldrb.w	r8, [r6, #22]
   16192:	d10a      	bne.n	161aa <uarte_0_init+0x10e>
   16194:	4924      	ldr	r1, [pc, #144]	; (16228 <uarte_0_init+0x18c>)
   16196:	4825      	ldr	r0, [pc, #148]	; (1622c <uarte_0_init+0x190>)
   16198:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   1619c:	f004 fa66 	bl	1a66c <printk>
   161a0:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   161a4:	4820      	ldr	r0, [pc, #128]	; (16228 <uarte_0_init+0x18c>)
   161a6:	f004 fd07 	bl	1abb8 <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   161aa:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   161ae:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   161b2:	f8c9 8080 	str.w	r8, [r9, #128]	; 0x80
    NRFX_ASSERT(tep);
   161b6:	d10a      	bne.n	161ce <uarte_0_init+0x132>
   161b8:	491b      	ldr	r1, [pc, #108]	; (16228 <uarte_0_init+0x18c>)
   161ba:	481c      	ldr	r0, [pc, #112]	; (1622c <uarte_0_init+0x190>)
   161bc:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   161c0:	f004 fa54 	bl	1a66c <printk>
   161c4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   161c8:	4817      	ldr	r0, [pc, #92]	; (16228 <uarte_0_init+0x18c>)
   161ca:	f004 fcf5 	bl	1abb8 <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   161ce:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   161d0:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
   161d4:	7db2      	ldrb	r2, [r6, #22]
   161d6:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   161d8:	4a15      	ldr	r2, [pc, #84]	; (16230 <uarte_0_init+0x194>)
   161da:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   161de:	2308      	movs	r3, #8
   161e0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   161e4:	2300      	movs	r3, #0
   161e6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   161ea:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   161ee:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   161f2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   161f6:	2301      	movs	r3, #1
   161f8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   161fc:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   161fe:	686b      	ldr	r3, [r5, #4]
   16200:	799b      	ldrb	r3, [r3, #6]
   16202:	b91b      	cbnz	r3, 1620c <uarte_0_init+0x170>
    p_reg->INTENSET = mask;
   16204:	f44f 7380 	mov.w	r3, #256	; 0x100
   16208:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1620c:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1620e:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   16210:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   16214:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16218:	2301      	movs	r3, #1
   1621a:	60a3      	str	r3, [r4, #8]
   1621c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1621e:	e7b0      	b.n	16182 <uarte_0_init+0xe6>
   16220:	0bad0000 	.word	0x0bad0000
   16224:	0002246b 	.word	0x0002246b
   16228:	0002248f 	.word	0x0002248f
   1622c:	0001fbb7 	.word	0x0001fbb7
   16230:	40017000 	.word	0x40017000

00016234 <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   16234:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   16238:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   1623c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   16240:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   16244:	4605      	mov	r5, r0
   16246:	460e      	mov	r6, r1
   16248:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   1624a:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   1624e:	d14f      	bne.n	162f0 <z_impl_gpio_pin_interrupt_configure+0xbc>
   16250:	492d      	ldr	r1, [pc, #180]	; (16308 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16252:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   16256:	482d      	ldr	r0, [pc, #180]	; (1630c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   16258:	f004 fa08 	bl	1a66c <printk>
   1625c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   16260:	4829      	ldr	r0, [pc, #164]	; (16308 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16262:	f004 fca9 	bl	1abb8 <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   16266:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   1626a:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   1626e:	d10a      	bne.n	16286 <z_impl_gpio_pin_interrupt_configure+0x52>
   16270:	4925      	ldr	r1, [pc, #148]	; (16308 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16272:	4826      	ldr	r0, [pc, #152]	; (1630c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   16274:	f240 12f1 	movw	r2, #497	; 0x1f1
   16278:	f004 f9f8 	bl	1a66c <printk>
   1627c:	f240 11f1 	movw	r1, #497	; 0x1f1
   16280:	4821      	ldr	r0, [pc, #132]	; (16308 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16282:	f004 fc99 	bl	1abb8 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   16286:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   1628a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1628e:	d10a      	bne.n	162a6 <z_impl_gpio_pin_interrupt_configure+0x72>
   16290:	491d      	ldr	r1, [pc, #116]	; (16308 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   16292:	481e      	ldr	r0, [pc, #120]	; (1630c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   16294:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   16298:	f004 f9e8 	bl	1a66c <printk>
   1629c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   162a0:	4819      	ldr	r0, [pc, #100]	; (16308 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   162a2:	f004 fc89 	bl	1abb8 <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   162a6:	2701      	movs	r7, #1
   162a8:	f8da 3000 	ldr.w	r3, [sl]
   162ac:	40b7      	lsls	r7, r6
   162ae:	421f      	tst	r7, r3
   162b0:	d10a      	bne.n	162c8 <z_impl_gpio_pin_interrupt_configure+0x94>
   162b2:	4915      	ldr	r1, [pc, #84]	; (16308 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   162b4:	4815      	ldr	r0, [pc, #84]	; (1630c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   162b6:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   162ba:	f004 f9d7 	bl	1a66c <printk>
   162be:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   162c2:	4811      	ldr	r0, [pc, #68]	; (16308 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   162c4:	f004 fc78 	bl	1abb8 <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   162c8:	0423      	lsls	r3, r4, #16
   162ca:	d505      	bpl.n	162d8 <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   162cc:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   162d0:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   162d2:	bf18      	it	ne
   162d4:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   162d8:	f8d8 7018 	ldr.w	r7, [r8, #24]
   162dc:	4631      	mov	r1, r6
   162de:	4628      	mov	r0, r5
   162e0:	46bc      	mov	ip, r7
   162e2:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   162e6:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   162ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   162ee:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   162f0:	2b00      	cmp	r3, #0
   162f2:	d1b8      	bne.n	16266 <z_impl_gpio_pin_interrupt_configure+0x32>
   162f4:	4904      	ldr	r1, [pc, #16]	; (16308 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   162f6:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   162fa:	4804      	ldr	r0, [pc, #16]	; (1630c <z_impl_gpio_pin_interrupt_configure+0xd8>)
   162fc:	f004 f9b6 	bl	1a66c <printk>
   16300:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   16304:	e7ac      	b.n	16260 <z_impl_gpio_pin_interrupt_configure+0x2c>
   16306:	bf00      	nop
   16308:	000224de 	.word	0x000224de
   1630c:	0001fbb7 	.word	0x0001fbb7

00016310 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   16310:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16312:	2501      	movs	r5, #1
   16314:	6843      	ldr	r3, [r0, #4]
   16316:	408d      	lsls	r5, r1
   16318:	681b      	ldr	r3, [r3, #0]
{
   1631a:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1631c:	421d      	tst	r5, r3
{
   1631e:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16320:	d10a      	bne.n	16338 <gpio_pin_set_raw+0x28>
   16322:	490b      	ldr	r1, [pc, #44]	; (16350 <gpio_pin_set_raw+0x40>)
   16324:	480b      	ldr	r0, [pc, #44]	; (16354 <gpio_pin_set_raw+0x44>)
   16326:	f44f 7270 	mov.w	r2, #960	; 0x3c0
   1632a:	f004 f99f 	bl	1a66c <printk>
   1632e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   16332:	4807      	ldr	r0, [pc, #28]	; (16350 <gpio_pin_set_raw+0x40>)
   16334:	f004 fc40 	bl	1abb8 <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   16338:	b136      	cbz	r6, 16348 <gpio_pin_set_raw+0x38>
	return api->port_set_bits_raw(port, pins);
   1633a:	68a3      	ldr	r3, [r4, #8]
   1633c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1633e:	4629      	mov	r1, r5
   16340:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   16342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   16346:	4718      	bx	r3
   16348:	68a3      	ldr	r3, [r4, #8]
   1634a:	691b      	ldr	r3, [r3, #16]
   1634c:	e7f7      	b.n	1633e <gpio_pin_set_raw+0x2e>
   1634e:	bf00      	nop
   16350:	000224de 	.word	0x000224de
   16354:	0001fbb7 	.word	0x0001fbb7

00016358 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   16358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1635c:	4606      	mov	r6, r0
   1635e:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16360:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   16362:	f8df 8044 	ldr.w	r8, [pc, #68]	; 163a8 <dk_set_leds_state.part.0+0x50>
   16366:	f8df 9044 	ldr.w	r9, [pc, #68]	; 163ac <dk_set_leds_state.part.0+0x54>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   1636a:	fa26 f204 	lsr.w	r2, r6, r4
   1636e:	fa27 f304 	lsr.w	r3, r7, r4
   16372:	4313      	orrs	r3, r2
   16374:	07db      	lsls	r3, r3, #31
   16376:	d512      	bpl.n	1639e <dk_set_leds_state.part.0+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
   16378:	43d2      	mvns	r2, r2
   1637a:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1637e:	7919      	ldrb	r1, [r3, #4]
   16380:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   16384:	f002 0201 	and.w	r2, r2, #1
   16388:	f7ff ffc2 	bl	16310 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   1638c:	4605      	mov	r5, r0
   1638e:	b130      	cbz	r0, 1639e <dk_set_leds_state.part.0+0x46>
				LOG_ERR("Cannot write LED gpio");
   16390:	2145      	movs	r1, #69	; 0x45
   16392:	4807      	ldr	r0, [pc, #28]	; (163b0 <dk_set_leds_state.part.0+0x58>)
   16394:	f004 f96a 	bl	1a66c <printk>
			}
		}
	}

	return 0;
}
   16398:	4628      	mov	r0, r5
   1639a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   1639e:	3401      	adds	r4, #1
   163a0:	2c04      	cmp	r4, #4
   163a2:	d1e2      	bne.n	1636a <dk_set_leds_state.part.0+0x12>
	return 0;
   163a4:	2500      	movs	r5, #0
   163a6:	e7f7      	b.n	16398 <dk_set_leds_state.part.0+0x40>
   163a8:	0001ee94 	.word	0x0001ee94
   163ac:	2000b054 	.word	0x2000b054
   163b0:	00022508 	.word	0x00022508

000163b4 <buttons_scan_fn>:
{
   163b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   163b8:	2400      	movs	r4, #0
   163ba:	4e6c      	ldr	r6, [pc, #432]	; (1656c <buttons_scan_fn+0x1b8>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   163bc:	4625      	mov	r5, r4
{
   163be:	46b1      	mov	r9, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   163c0:	4f6b      	ldr	r7, [pc, #428]	; (16570 <buttons_scan_fn+0x1bc>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   163c2:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 16574 <buttons_scan_fn+0x1c0>
   163c6:	f04f 0801 	mov.w	r8, #1
   163ca:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   163ce:	791b      	ldrb	r3, [r3, #4]
   163d0:	f859 bb04 	ldr.w	fp, [r9], #4
   163d4:	fa08 f803 	lsl.w	r8, r8, r3
   163d8:	f8db 3004 	ldr.w	r3, [fp, #4]
   163dc:	681b      	ldr	r3, [r3, #0]
   163de:	ea18 0f03 	tst.w	r8, r3
   163e2:	d10a      	bne.n	163fa <buttons_scan_fn+0x46>
   163e4:	4651      	mov	r1, sl
   163e6:	4864      	ldr	r0, [pc, #400]	; (16578 <buttons_scan_fn+0x1c4>)
   163e8:	f44f 725e 	mov.w	r2, #888	; 0x378
   163ec:	f004 f93e 	bl	1a66c <printk>
   163f0:	f44f 715e 	mov.w	r1, #888	; 0x378
   163f4:	4650      	mov	r0, sl
   163f6:	f004 fbdf 	bl	1abb8 <assert_post_action>
	return api->port_get_raw(port, value);
   163fa:	f8db 3008 	ldr.w	r3, [fp, #8]
   163fe:	4658      	mov	r0, fp
   16400:	685b      	ldr	r3, [r3, #4]
   16402:	a901      	add	r1, sp, #4
   16404:	4798      	blx	r3
	if (ret == 0) {
   16406:	2800      	cmp	r0, #0
   16408:	d16b      	bne.n	164e2 <buttons_scan_fn+0x12e>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   1640a:	9b01      	ldr	r3, [sp, #4]
   1640c:	ea18 0f03 	tst.w	r8, r3
   16410:	d003      	beq.n	1641a <buttons_scan_fn+0x66>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16412:	3501      	adds	r5, #1
   16414:	2d04      	cmp	r5, #4
   16416:	d1d6      	bne.n	163c6 <buttons_scan_fn+0x12>
   16418:	e069      	b.n	164ee <buttons_scan_fn+0x13a>
			ret |= 1U << i;
   1641a:	2301      	movs	r3, #1
   1641c:	40ab      	lsls	r3, r5
   1641e:	431c      	orrs	r4, r3
   16420:	e7f7      	b.n	16412 <buttons_scan_fn+0x5e>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   16422:	3d04      	subs	r5, #4
   16424:	2d00      	cmp	r5, #0
   16426:	f000 8087 	beq.w	16538 <buttons_scan_fn+0x184>
			handler->cb(button_state, has_changed);
   1642a:	46aa      	mov	sl, r5
   1642c:	f85a 3b04 	ldr.w	r3, [sl], #4
   16430:	4641      	mov	r1, r8
   16432:	4620      	mov	r0, r4
   16434:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16436:	f1ba 0f00 	cmp.w	sl, #0
   1643a:	d07d      	beq.n	16538 <buttons_scan_fn+0x184>
	return node->next;
   1643c:	686d      	ldr	r5, [r5, #4]
   1643e:	e078      	b.n	16532 <buttons_scan_fn+0x17e>
		initial_run = false;
   16440:	2200      	movs	r2, #0
   16442:	701a      	strb	r2, [r3, #0]
   16444:	e07b      	b.n	1653e <buttons_scan_fn+0x18a>
	__asm__ volatile(
   16446:	f04f 0320 	mov.w	r3, #32
   1644a:	f3ef 8811 	mrs	r8, BASEPRI
   1644e:	f383 8811 	msr	BASEPRI, r3
   16452:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16456:	4849      	ldr	r0, [pc, #292]	; (1657c <buttons_scan_fn+0x1c8>)
   16458:	f003 f91c 	bl	19694 <z_spin_lock_valid>
   1645c:	b940      	cbnz	r0, 16470 <buttons_scan_fn+0xbc>
   1645e:	4948      	ldr	r1, [pc, #288]	; (16580 <buttons_scan_fn+0x1cc>)
   16460:	4845      	ldr	r0, [pc, #276]	; (16578 <buttons_scan_fn+0x1c4>)
   16462:	227c      	movs	r2, #124	; 0x7c
   16464:	f004 f902 	bl	1a66c <printk>
   16468:	217c      	movs	r1, #124	; 0x7c
   1646a:	4845      	ldr	r0, [pc, #276]	; (16580 <buttons_scan_fn+0x1cc>)
   1646c:	f004 fba4 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   16470:	4842      	ldr	r0, [pc, #264]	; (1657c <buttons_scan_fn+0x1c8>)
   16472:	f003 f92b 	bl	196cc <z_spin_lock_set_owner>
		switch (state) {
   16476:	4b43      	ldr	r3, [pc, #268]	; (16584 <buttons_scan_fn+0x1d0>)
   16478:	781a      	ldrb	r2, [r3, #0]
   1647a:	2a01      	cmp	r2, #1
   1647c:	d126      	bne.n	164cc <buttons_scan_fn+0x118>
			state = STATE_WAITING;
   1647e:	2200      	movs	r2, #0
   16480:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   16482:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   16486:	f856 0b04 	ldr.w	r0, [r6], #4
   1648a:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   1648c:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   16490:	f7ff fed0 	bl	16234 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   16494:	3401      	adds	r4, #1
   16496:	2c04      	cmp	r4, #4
   16498:	4605      	mov	r5, r0
   1649a:	d001      	beq.n	164a0 <buttons_scan_fn+0xec>
   1649c:	2800      	cmp	r0, #0
   1649e:	d0f0      	beq.n	16482 <buttons_scan_fn+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   164a0:	4836      	ldr	r0, [pc, #216]	; (1657c <buttons_scan_fn+0x1c8>)
   164a2:	f003 f905 	bl	196b0 <z_spin_unlock_valid>
   164a6:	b940      	cbnz	r0, 164ba <buttons_scan_fn+0x106>
   164a8:	4935      	ldr	r1, [pc, #212]	; (16580 <buttons_scan_fn+0x1cc>)
   164aa:	4833      	ldr	r0, [pc, #204]	; (16578 <buttons_scan_fn+0x1c4>)
   164ac:	22a7      	movs	r2, #167	; 0xa7
   164ae:	f004 f8dd 	bl	1a66c <printk>
   164b2:	21a7      	movs	r1, #167	; 0xa7
   164b4:	4832      	ldr	r0, [pc, #200]	; (16580 <buttons_scan_fn+0x1cc>)
   164b6:	f004 fb7f 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   164ba:	f388 8811 	msr	BASEPRI, r8
   164be:	f3bf 8f6f 	isb	sy
		if (err) {
   164c2:	2d00      	cmp	r5, #0
   164c4:	d04f      	beq.n	16566 <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot enable callbacks");
   164c6:	2145      	movs	r1, #69	; 0x45
   164c8:	482f      	ldr	r0, [pc, #188]	; (16588 <buttons_scan_fn+0x1d4>)
   164ca:	e047      	b.n	1655c <buttons_scan_fn+0x1a8>
			__ASSERT_NO_MSG(false);
   164cc:	22b4      	movs	r2, #180	; 0xb4
   164ce:	492f      	ldr	r1, [pc, #188]	; (1658c <buttons_scan_fn+0x1d8>)
   164d0:	4829      	ldr	r0, [pc, #164]	; (16578 <buttons_scan_fn+0x1c4>)
   164d2:	f004 f8cb 	bl	1a66c <printk>
   164d6:	21b4      	movs	r1, #180	; 0xb4
   164d8:	482c      	ldr	r0, [pc, #176]	; (1658c <buttons_scan_fn+0x1d8>)
   164da:	f004 fb6d 	bl	1abb8 <assert_post_action>
		int err = 0;
   164de:	2500      	movs	r5, #0
			break;
   164e0:	e7de      	b.n	164a0 <buttons_scan_fn+0xec>
		if (val < 0) {
   164e2:	da96      	bge.n	16412 <buttons_scan_fn+0x5e>
			LOG_ERR("Cannot read gpio pin");
   164e4:	2145      	movs	r1, #69	; 0x45
   164e6:	482a      	ldr	r0, [pc, #168]	; (16590 <buttons_scan_fn+0x1dc>)
   164e8:	f004 f8c0 	bl	1a66c <printk>
			return 0;
   164ec:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   164ee:	4b29      	ldr	r3, [pc, #164]	; (16594 <buttons_scan_fn+0x1e0>)
   164f0:	e8d3 2fef 	ldaex	r2, [r3]
   164f4:	e8c3 4fe1 	stlex	r1, r4, [r3]
   164f8:	2900      	cmp	r1, #0
   164fa:	d1f9      	bne.n	164f0 <buttons_scan_fn+0x13c>
	if (!initial_run) {
   164fc:	4b26      	ldr	r3, [pc, #152]	; (16598 <buttons_scan_fn+0x1e4>)
   164fe:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1659c <buttons_scan_fn+0x1e8>
   16502:	781a      	ldrb	r2, [r3, #0]
   16504:	2a00      	cmp	r2, #0
   16506:	d19b      	bne.n	16440 <buttons_scan_fn+0x8c>
		if (button_scan != last_button_scan) {
   16508:	f8d9 3000 	ldr.w	r3, [r9]
   1650c:	42a3      	cmp	r3, r4
   1650e:	d016      	beq.n	1653e <buttons_scan_fn+0x18a>
			uint32_t has_changed = (button_scan ^ last_button_scan);
   16510:	ea83 0804 	eor.w	r8, r3, r4
	if (button_handler_cb != NULL) {
   16514:	4b22      	ldr	r3, [pc, #136]	; (165a0 <buttons_scan_fn+0x1ec>)
   16516:	681b      	ldr	r3, [r3, #0]
   16518:	b113      	cbz	r3, 16520 <buttons_scan_fn+0x16c>
		button_handler_cb(button_state, has_changed);
   1651a:	4641      	mov	r1, r8
   1651c:	4620      	mov	r0, r4
   1651e:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   16520:	f04f 33ff 	mov.w	r3, #4294967295
   16524:	f04f 32ff 	mov.w	r2, #4294967295
   16528:	481e      	ldr	r0, [pc, #120]	; (165a4 <buttons_scan_fn+0x1f0>)
   1652a:	f001 fc13 	bl	17d54 <z_impl_k_mutex_lock>
	return list->head;
   1652e:	4b1e      	ldr	r3, [pc, #120]	; (165a8 <buttons_scan_fn+0x1f4>)
   16530:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   16532:	2d00      	cmp	r5, #0
   16534:	f47f af75 	bne.w	16422 <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   16538:	481a      	ldr	r0, [pc, #104]	; (165a4 <buttons_scan_fn+0x1f0>)
   1653a:	f001 fcd7 	bl	17eec <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1653e:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   16542:	2c00      	cmp	r4, #0
   16544:	f43f af7f 	beq.w	16446 <buttons_scan_fn+0x92>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16548:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1654c:	2300      	movs	r3, #0
   1654e:	4917      	ldr	r1, [pc, #92]	; (165ac <buttons_scan_fn+0x1f8>)
   16550:	4817      	ldr	r0, [pc, #92]	; (165b0 <buttons_scan_fn+0x1fc>)
   16552:	f003 f915 	bl	19780 <k_delayed_work_submit_to_queue>
		if (err) {
   16556:	b130      	cbz	r0, 16566 <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot add work to workqueue");
   16558:	2145      	movs	r1, #69	; 0x45
   1655a:	4816      	ldr	r0, [pc, #88]	; (165b4 <buttons_scan_fn+0x200>)
}
   1655c:	b003      	add	sp, #12
   1655e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot enable callbacks");
   16562:	f004 b883 	b.w	1a66c <printk>
}
   16566:	b003      	add	sp, #12
   16568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1656c:	2000b010 	.word	0x2000b010
   16570:	0001ee74 	.word	0x0001ee74
   16574:	000224de 	.word	0x000224de
   16578:	0001fbb7 	.word	0x0001fbb7
   1657c:	2000b064 	.word	0x2000b064
   16580:	0001fbf1 	.word	0x0001fbf1
   16584:	2000c9b1 	.word	0x2000c9b1
   16588:	0002259d 	.word	0x0002259d
   1658c:	0002255f 	.word	0x0002255f
   16590:	00022523 	.word	0x00022523
   16594:	2000b068 	.word	0x2000b068
   16598:	20008584 	.word	0x20008584
   1659c:	2000b04c 	.word	0x2000b04c
   165a0:	2000b020 	.word	0x2000b020
   165a4:	2000b024 	.word	0x2000b024
   165a8:	2000b038 	.word	0x2000b038
   165ac:	2000a410 	.word	0x2000a410
   165b0:	2000a560 	.word	0x2000a560
   165b4:	0002253d 	.word	0x0002253d

000165b8 <button_pressed>:
{
   165b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   165ba:	f04f 0320 	mov.w	r3, #32
   165be:	f3ef 8611 	mrs	r6, BASEPRI
   165c2:	f383 8811 	msr	BASEPRI, r3
   165c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   165ca:	4827      	ldr	r0, [pc, #156]	; (16668 <button_pressed+0xb0>)
   165cc:	f003 f862 	bl	19694 <z_spin_lock_valid>
   165d0:	b940      	cbnz	r0, 165e4 <button_pressed+0x2c>
   165d2:	4926      	ldr	r1, [pc, #152]	; (1666c <button_pressed+0xb4>)
   165d4:	4826      	ldr	r0, [pc, #152]	; (16670 <button_pressed+0xb8>)
   165d6:	227c      	movs	r2, #124	; 0x7c
   165d8:	f004 f848 	bl	1a66c <printk>
   165dc:	217c      	movs	r1, #124	; 0x7c
   165de:	4823      	ldr	r0, [pc, #140]	; (1666c <button_pressed+0xb4>)
   165e0:	f004 faea 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   165e4:	4820      	ldr	r0, [pc, #128]	; (16668 <button_pressed+0xb0>)
   165e6:	f003 f871 	bl	196cc <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   165ea:	2400      	movs	r4, #0
   165ec:	4d21      	ldr	r5, [pc, #132]	; (16674 <button_pressed+0xbc>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   165ee:	4f22      	ldr	r7, [pc, #136]	; (16678 <button_pressed+0xc0>)
   165f0:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   165f4:	f855 0b04 	ldr.w	r0, [r5], #4
   165f8:	7919      	ldrb	r1, [r3, #4]
   165fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   165fe:	3401      	adds	r4, #1
   16600:	f7ff fe18 	bl	16234 <z_impl_gpio_pin_interrupt_configure>
   16604:	2c04      	cmp	r4, #4
   16606:	d006      	beq.n	16616 <button_pressed+0x5e>
   16608:	2800      	cmp	r0, #0
   1660a:	d0f1      	beq.n	165f0 <button_pressed+0x38>
		LOG_ERR("Cannot disable callbacks");
   1660c:	2145      	movs	r1, #69	; 0x45
   1660e:	481b      	ldr	r0, [pc, #108]	; (1667c <button_pressed+0xc4>)
   16610:	f004 f82c 	bl	1a66c <printk>
   16614:	e001      	b.n	1661a <button_pressed+0x62>
	if (err) {
   16616:	2800      	cmp	r0, #0
   16618:	d1f8      	bne.n	1660c <button_pressed+0x54>
	switch (state) {
   1661a:	4b19      	ldr	r3, [pc, #100]	; (16680 <button_pressed+0xc8>)
   1661c:	781a      	ldrb	r2, [r3, #0]
   1661e:	b9ca      	cbnz	r2, 16654 <button_pressed+0x9c>
		state = STATE_SCANNING;
   16620:	2201      	movs	r2, #1
   16622:	4918      	ldr	r1, [pc, #96]	; (16684 <button_pressed+0xcc>)
   16624:	701a      	strb	r2, [r3, #0]
   16626:	4818      	ldr	r0, [pc, #96]	; (16688 <button_pressed+0xd0>)
   16628:	2221      	movs	r2, #33	; 0x21
   1662a:	2300      	movs	r3, #0
   1662c:	f003 f8a8 	bl	19780 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16630:	480d      	ldr	r0, [pc, #52]	; (16668 <button_pressed+0xb0>)
   16632:	f003 f83d 	bl	196b0 <z_spin_unlock_valid>
   16636:	b940      	cbnz	r0, 1664a <button_pressed+0x92>
   16638:	490c      	ldr	r1, [pc, #48]	; (1666c <button_pressed+0xb4>)
   1663a:	480d      	ldr	r0, [pc, #52]	; (16670 <button_pressed+0xb8>)
   1663c:	22a7      	movs	r2, #167	; 0xa7
   1663e:	f004 f815 	bl	1a66c <printk>
   16642:	21a7      	movs	r1, #167	; 0xa7
   16644:	4809      	ldr	r0, [pc, #36]	; (1666c <button_pressed+0xb4>)
   16646:	f004 fab7 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   1664a:	f386 8811 	msr	BASEPRI, r6
   1664e:	f3bf 8f6f 	isb	sy
}
   16652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   16654:	22eb      	movs	r2, #235	; 0xeb
   16656:	490d      	ldr	r1, [pc, #52]	; (1668c <button_pressed+0xd4>)
   16658:	4805      	ldr	r0, [pc, #20]	; (16670 <button_pressed+0xb8>)
   1665a:	f004 f807 	bl	1a66c <printk>
   1665e:	21eb      	movs	r1, #235	; 0xeb
   16660:	480a      	ldr	r0, [pc, #40]	; (1668c <button_pressed+0xd4>)
   16662:	f004 faa9 	bl	1abb8 <assert_post_action>
		break;
   16666:	e7e3      	b.n	16630 <button_pressed+0x78>
   16668:	2000b064 	.word	0x2000b064
   1666c:	0001fbf1 	.word	0x0001fbf1
   16670:	0001fbb7 	.word	0x0001fbb7
   16674:	2000b010 	.word	0x2000b010
   16678:	0001ee74 	.word	0x0001ee74
   1667c:	000225ba 	.word	0x000225ba
   16680:	2000c9b1 	.word	0x2000c9b1
   16684:	2000a410 	.word	0x2000a410
   16688:	2000a560 	.word	0x2000a560
   1668c:	0002255f 	.word	0x0002255f

00016690 <dk_leds_init>:
{
   16690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16694:	2600      	movs	r6, #0
   16696:	4d23      	ldr	r5, [pc, #140]	; (16724 <dk_leds_init+0x94>)
   16698:	f8df 908c 	ldr.w	r9, [pc, #140]	; 16728 <dk_leds_init+0x98>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1669c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1672c <dk_leds_init+0x9c>
		led_devs[i] = device_get_binding(led_pins[i].port);
   166a0:	6828      	ldr	r0, [r5, #0]
   166a2:	f001 f835 	bl	17710 <z_impl_device_get_binding>
   166a6:	4604      	mov	r4, r0
   166a8:	f849 0b04 	str.w	r0, [r9], #4
		if (!led_devs[i]) {
   166ac:	b940      	cbnz	r0, 166c0 <dk_leds_init+0x30>
			LOG_ERR("Cannot bind gpio device");
   166ae:	2145      	movs	r1, #69	; 0x45
   166b0:	481f      	ldr	r0, [pc, #124]	; (16730 <dk_leds_init+0xa0>)
   166b2:	f003 ffdb 	bl	1a66c <printk>
			return -ENODEV;
   166b6:	f06f 0412 	mvn.w	r4, #18
}
   166ba:	4620      	mov	r0, r4
   166bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166c0:	2301      	movs	r3, #1
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   166c2:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   166c6:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   166c8:	fa03 f80b 	lsl.w	r8, r3, fp
   166cc:	6843      	ldr	r3, [r0, #4]
   166ce:	681b      	ldr	r3, [r3, #0]
   166d0:	ea18 0f03 	tst.w	r8, r3
   166d4:	d10a      	bne.n	166ec <dk_leds_init+0x5c>
   166d6:	4651      	mov	r1, sl
   166d8:	4816      	ldr	r0, [pc, #88]	; (16734 <dk_leds_init+0xa4>)
   166da:	f44f 7211 	mov.w	r2, #580	; 0x244
   166de:	f003 ffc5 	bl	1a66c <printk>
   166e2:	f44f 7111 	mov.w	r1, #580	; 0x244
   166e6:	4650      	mov	r0, sl
   166e8:	f004 fa66 	bl	1abb8 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   166ec:	68a3      	ldr	r3, [r4, #8]
   166ee:	4620      	mov	r0, r4
   166f0:	f44f 7200 	mov.w	r2, #512	; 0x200
   166f4:	4659      	mov	r1, fp
   166f6:	681b      	ldr	r3, [r3, #0]
   166f8:	4798      	blx	r3
	if (ret != 0) {
   166fa:	4604      	mov	r4, r0
   166fc:	b968      	cbnz	r0, 1671a <dk_leds_init+0x8a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   166fe:	683b      	ldr	r3, [r7, #0]
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   16700:	3601      	adds	r6, #1
   16702:	ea23 0308 	bic.w	r3, r3, r8
   16706:	2e04      	cmp	r6, #4
   16708:	603b      	str	r3, [r7, #0]
   1670a:	f105 0508 	add.w	r5, r5, #8
   1670e:	d1c7      	bne.n	166a0 <dk_leds_init+0x10>
}
   16710:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16714:	210f      	movs	r1, #15
   16716:	f7ff be1f 	b.w	16358 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1671a:	2145      	movs	r1, #69	; 0x45
   1671c:	4806      	ldr	r0, [pc, #24]	; (16738 <dk_leds_init+0xa8>)
   1671e:	f003 ffa5 	bl	1a66c <printk>
			return err;
   16722:	e7ca      	b.n	166ba <dk_leds_init+0x2a>
   16724:	0001ee94 	.word	0x0001ee94
   16728:	2000b054 	.word	0x2000b054
   1672c:	000224de 	.word	0x000224de
   16730:	000225d8 	.word	0x000225d8
   16734:	0001fbb7 	.word	0x0001fbb7
   16738:	000225f5 	.word	0x000225f5

0001673c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1673c:	4b05      	ldr	r3, [pc, #20]	; (16754 <dk_read_buttons+0x18>)
   1673e:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   16742:	b100      	cbz	r0, 16746 <dk_read_buttons+0xa>
		*button_state = current_state;
   16744:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   16746:	4804      	ldr	r0, [pc, #16]	; (16758 <dk_read_buttons+0x1c>)
   16748:	b111      	cbz	r1, 16750 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   1674a:	6802      	ldr	r2, [r0, #0]
   1674c:	405a      	eors	r2, r3
   1674e:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   16750:	6003      	str	r3, [r0, #0]
}
   16752:	4770      	bx	lr
   16754:	2000b068 	.word	0x2000b068
   16758:	2000b050 	.word	0x2000b050

0001675c <dk_buttons_init>:
	button_handler_cb = button_handler;
   1675c:	4b4f      	ldr	r3, [pc, #316]	; (1689c <dk_buttons_init+0x140>)
{
   1675e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   16762:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   16764:	4e4e      	ldr	r6, [pc, #312]	; (168a0 <dk_buttons_init+0x144>)
   16766:	484f      	ldr	r0, [pc, #316]	; (168a4 <dk_buttons_init+0x148>)
   16768:	f007 fb1d 	bl	1dda6 <z_impl_k_mutex_init>
   1676c:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1676e:	2700      	movs	r7, #0
   16770:	4d4d      	ldr	r5, [pc, #308]	; (168a8 <dk_buttons_init+0x14c>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   16772:	f8df a138 	ldr.w	sl, [pc, #312]	; 168ac <dk_buttons_init+0x150>
		button_devs[i] = device_get_binding(button_pins[i].port);
   16776:	6828      	ldr	r0, [r5, #0]
   16778:	f000 ffca 	bl	17710 <z_impl_device_get_binding>
   1677c:	4604      	mov	r4, r0
   1677e:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   16782:	b948      	cbnz	r0, 16798 <dk_buttons_init+0x3c>
			LOG_ERR("Cannot bind gpio device");
   16784:	2145      	movs	r1, #69	; 0x45
   16786:	484a      	ldr	r0, [pc, #296]	; (168b0 <dk_buttons_init+0x154>)
   16788:	f003 ff70 	bl	1a66c <printk>
			return -ENODEV;
   1678c:	f06f 0412 	mvn.w	r4, #18
}
   16790:	4620      	mov	r0, r4
   16792:	b003      	add	sp, #12
   16794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16798:	2301      	movs	r3, #1
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   1679a:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   1679e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   167a2:	fa03 f30b 	lsl.w	r3, r3, fp
   167a6:	9301      	str	r3, [sp, #4]
   167a8:	6843      	ldr	r3, [r0, #4]
   167aa:	9a01      	ldr	r2, [sp, #4]
   167ac:	681b      	ldr	r3, [r3, #0]
   167ae:	421a      	tst	r2, r3
   167b0:	d10a      	bne.n	167c8 <dk_buttons_init+0x6c>
   167b2:	4651      	mov	r1, sl
   167b4:	483f      	ldr	r0, [pc, #252]	; (168b4 <dk_buttons_init+0x158>)
   167b6:	f44f 7211 	mov.w	r2, #580	; 0x244
   167ba:	f003 ff57 	bl	1a66c <printk>
   167be:	f44f 7111 	mov.w	r1, #580	; 0x244
   167c2:	4650      	mov	r0, sl
   167c4:	f004 f9f8 	bl	1abb8 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   167c8:	68a3      	ldr	r3, [r4, #8]
   167ca:	4620      	mov	r0, r4
   167cc:	f44f 7288 	mov.w	r2, #272	; 0x110
   167d0:	4659      	mov	r1, fp
   167d2:	681b      	ldr	r3, [r3, #0]
   167d4:	4798      	blx	r3
	if (ret != 0) {
   167d6:	4604      	mov	r4, r0
   167d8:	bb08      	cbnz	r0, 1681e <dk_buttons_init+0xc2>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   167da:	f8d8 3000 	ldr.w	r3, [r8]
   167de:	9a01      	ldr	r2, [sp, #4]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   167e0:	3701      	adds	r7, #1
   167e2:	ea23 0302 	bic.w	r3, r3, r2
   167e6:	2f04      	cmp	r7, #4
   167e8:	f8c8 3000 	str.w	r3, [r8]
   167ec:	f105 0508 	add.w	r5, r5, #8
   167f0:	d1c1      	bne.n	16776 <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   167f2:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   167f4:	4680      	mov	r8, r0
		pin_mask |= BIT(button_pins[i].number);
   167f6:	f04f 0a01 	mov.w	sl, #1
   167fa:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 168a0 <dk_buttons_init+0x144>
		err = gpio_pin_interrupt_configure(button_devs[i],
   167fe:	4b2a      	ldr	r3, [pc, #168]	; (168a8 <dk_buttons_init+0x14c>)
   16800:	f859 0b04 	ldr.w	r0, [r9], #4
   16804:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   16808:	791f      	ldrb	r7, [r3, #4]
   1680a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1680e:	4639      	mov	r1, r7
   16810:	f7ff fd10 	bl	16234 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   16814:	4604      	mov	r4, r0
   16816:	b138      	cbz	r0, 16828 <dk_buttons_init+0xcc>
			LOG_ERR("Cannot disable callbacks()");
   16818:	2145      	movs	r1, #69	; 0x45
   1681a:	4827      	ldr	r0, [pc, #156]	; (168b8 <dk_buttons_init+0x15c>)
   1681c:	e001      	b.n	16822 <dk_buttons_init+0xc6>
			LOG_ERR("Cannot configure button gpio");
   1681e:	2145      	movs	r1, #69	; 0x45
   16820:	4826      	ldr	r0, [pc, #152]	; (168bc <dk_buttons_init+0x160>)
		LOG_ERR("Cannot add work to workqueue");
   16822:	f003 ff23 	bl	1a66c <printk>
		return err;
   16826:	e7b3      	b.n	16790 <dk_buttons_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16828:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   1682a:	fa0a f707 	lsl.w	r7, sl, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1682e:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   16830:	ea48 0807 	orr.w	r8, r8, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16834:	d1e3      	bne.n	167fe <dk_buttons_init+0xa2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16836:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   16838:	4f21      	ldr	r7, [pc, #132]	; (168c0 <dk_buttons_init+0x164>)
   1683a:	4b22      	ldr	r3, [pc, #136]	; (168c4 <dk_buttons_init+0x168>)
	callback->pin_mask = pin_mask;
   1683c:	e9c7 3801 	strd	r3, r8, [r7, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   16840:	f856 0b04 	ldr.w	r0, [r6], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   16844:	6883      	ldr	r3, [r0, #8]
   16846:	69db      	ldr	r3, [r3, #28]
   16848:	b13b      	cbz	r3, 1685a <dk_buttons_init+0xfe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1684a:	2201      	movs	r2, #1
   1684c:	4639      	mov	r1, r7
   1684e:	4798      	blx	r3
		if (err) {
   16850:	4604      	mov	r4, r0
   16852:	b128      	cbz	r0, 16860 <dk_buttons_init+0x104>
			LOG_ERR("Cannot add callback");
   16854:	2145      	movs	r1, #69	; 0x45
   16856:	481c      	ldr	r0, [pc, #112]	; (168c8 <dk_buttons_init+0x16c>)
   16858:	e7e3      	b.n	16822 <dk_buttons_init+0xc6>
		return -ENOTSUP;
   1685a:	f06f 0422 	mvn.w	r4, #34	; 0x22
   1685e:	e7f9      	b.n	16854 <dk_buttons_init+0xf8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   16860:	3501      	adds	r5, #1
   16862:	2d04      	cmp	r5, #4
   16864:	d1ec      	bne.n	16840 <dk_buttons_init+0xe4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   16866:	4d19      	ldr	r5, [pc, #100]	; (168cc <dk_buttons_init+0x170>)
   16868:	4601      	mov	r1, r0
   1686a:	2230      	movs	r2, #48	; 0x30
   1686c:	4628      	mov	r0, r5
   1686e:	f005 f96c 	bl	1bb4a <memset>
	state = STATE_SCANNING;
   16872:	2201      	movs	r2, #1
   16874:	4b16      	ldr	r3, [pc, #88]	; (168d0 <dk_buttons_init+0x174>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   16876:	4629      	mov	r1, r5
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   16878:	606b      	str	r3, [r5, #4]
   1687a:	4b16      	ldr	r3, [pc, #88]	; (168d4 <dk_buttons_init+0x178>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1687c:	4816      	ldr	r0, [pc, #88]	; (168d8 <dk_buttons_init+0x17c>)
   1687e:	701a      	strb	r2, [r3, #0]
   16880:	2200      	movs	r2, #0
   16882:	2300      	movs	r3, #0
   16884:	f002 ff7c 	bl	19780 <k_delayed_work_submit_to_queue>
	if (err) {
   16888:	4604      	mov	r4, r0
   1688a:	b110      	cbz	r0, 16892 <dk_buttons_init+0x136>
		LOG_ERR("Cannot add work to workqueue");
   1688c:	2145      	movs	r1, #69	; 0x45
   1688e:	4813      	ldr	r0, [pc, #76]	; (168dc <dk_buttons_init+0x180>)
   16890:	e7c7      	b.n	16822 <dk_buttons_init+0xc6>
	dk_read_buttons(NULL, NULL);
   16892:	4601      	mov	r1, r0
   16894:	f7ff ff52 	bl	1673c <dk_read_buttons>
	return 0;
   16898:	e77a      	b.n	16790 <dk_buttons_init+0x34>
   1689a:	bf00      	nop
   1689c:	2000b020 	.word	0x2000b020
   168a0:	2000b010 	.word	0x2000b010
   168a4:	2000b024 	.word	0x2000b024
   168a8:	0001ee74 	.word	0x0001ee74
   168ac:	000224de 	.word	0x000224de
   168b0:	000225d8 	.word	0x000225d8
   168b4:	0001fbb7 	.word	0x0001fbb7
   168b8:	00022636 	.word	0x00022636
   168bc:	00022614 	.word	0x00022614
   168c0:	2000b040 	.word	0x2000b040
   168c4:	000165b9 	.word	0x000165b9
   168c8:	00022656 	.word	0x00022656
   168cc:	2000a410 	.word	0x2000a410
   168d0:	000163b5 	.word	0x000163b5
   168d4:	2000c9b1 	.word	0x2000c9b1
   168d8:	2000a560 	.word	0x2000a560
   168dc:	0002253d 	.word	0x0002253d

000168e0 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   168e0:	2804      	cmp	r0, #4
{
   168e2:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   168e4:	d907      	bls.n	168f6 <dk_set_led+0x16>
		LOG_ERR("LED index out of the range");
   168e6:	2145      	movs	r1, #69	; 0x45
   168e8:	480d      	ldr	r0, [pc, #52]	; (16920 <dk_set_led+0x40>)
   168ea:	f003 febf 	bl	1a66c <printk>
   168ee:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   168f2:	4620      	mov	r0, r4
   168f4:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   168f6:	fab1 f281 	clz	r2, r1
   168fa:	4b0a      	ldr	r3, [pc, #40]	; (16924 <dk_set_led+0x44>)
   168fc:	0952      	lsrs	r2, r2, #5
   168fe:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   16902:	7919      	ldrb	r1, [r3, #4]
   16904:	4b08      	ldr	r3, [pc, #32]	; (16928 <dk_set_led+0x48>)
   16906:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1690a:	f7ff fd01 	bl	16310 <gpio_pin_set_raw>
	if (err) {
   1690e:	4604      	mov	r4, r0
   16910:	2800      	cmp	r0, #0
   16912:	d0ee      	beq.n	168f2 <dk_set_led+0x12>
		LOG_ERR("Cannot write LED gpio");
   16914:	2145      	movs	r1, #69	; 0x45
   16916:	4805      	ldr	r0, [pc, #20]	; (1692c <dk_set_led+0x4c>)
   16918:	f003 fea8 	bl	1a66c <printk>
   1691c:	e7e9      	b.n	168f2 <dk_set_led+0x12>
   1691e:	bf00      	nop
   16920:	0002266f 	.word	0x0002266f
   16924:	0001ee94 	.word	0x0001ee94
   16928:	2000b054 	.word	0x2000b054
   1692c:	00022508 	.word	0x00022508

00016930 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   16930:	4803      	ldr	r0, [pc, #12]	; (16940 <k_sys_fatal_error_handler+0x10>)
   16932:	2145      	movs	r1, #69	; 0x45
{
   16934:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   16936:	f003 fe99 	bl	1a66c <printk>
	sys_arch_reboot(0);
   1693a:	2000      	movs	r0, #0
   1693c:	f7f7 fa64 	bl	de08 <sys_arch_reboot>

	CODE_UNREACHABLE;
   16940:	000226a3 	.word	0x000226a3

00016944 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   16944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16948:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   1694a:	4c21      	ldr	r4, [pc, #132]	; (169d0 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   1694c:	4e21      	ldr	r6, [pc, #132]	; (169d4 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1694e:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   16952:	f8df 9084 	ldr.w	r9, [pc, #132]	; 169d8 <check_ext_api_requests+0x94>
{
   16956:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16958:	45a8      	cmp	r8, r5
   1695a:	d803      	bhi.n	16964 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   1695c:	2000      	movs	r0, #0
   1695e:	b005      	add	sp, #20
   16960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   16964:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16966:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1696a:	681f      	ldr	r7, [r3, #0]
   1696c:	ab01      	add	r3, sp, #4
   1696e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   16972:	220c      	movs	r2, #12
   16974:	4619      	mov	r1, r3
   16976:	4638      	mov	r0, r7
   16978:	f005 f8ab 	bl	1bad2 <memcmp>
   1697c:	b990      	cbnz	r0, 169a4 <check_ext_api_requests+0x60>
   1697e:	b18f      	cbz	r7, 169a4 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   16980:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   16982:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   16984:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   16986:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   16988:	4291      	cmp	r1, r2
   1698a:	d10b      	bne.n	169a4 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   1698c:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   1698e:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   16990:	4291      	cmp	r1, r2
   16992:	d807      	bhi.n	169a4 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   16994:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   16996:	4291      	cmp	r1, r2
   16998:	d904      	bls.n	169a4 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   1699a:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1699c:	695b      	ldr	r3, [r3, #20]
   1699e:	ea32 0303 	bics.w	r3, r2, r3
   169a2:	d00a      	beq.n	169ba <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   169a4:	6a27      	ldr	r7, [r4, #32]
   169a6:	b167      	cbz	r7, 169c2 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   169a8:	480c      	ldr	r0, [pc, #48]	; (169dc <check_ext_api_requests+0x98>)
   169aa:	f003 fe5f 	bl	1a66c <printk>
			k_panic();
   169ae:	4040      	eors	r0, r0
   169b0:	f380 8811 	msr	BASEPRI, r0
   169b4:	f04f 0004 	mov.w	r0, #4
   169b8:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   169ba:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   169bc:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   169be:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   169c0:	e7ca      	b.n	16958 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   169c2:	4648      	mov	r0, r9
   169c4:	f003 fe52 	bl	1a66c <printk>
			*ext_api_req->ext_api = NULL;
   169c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   169ca:	601f      	str	r7, [r3, #0]
   169cc:	e7f5      	b.n	169ba <check_ext_api_requests+0x76>
   169ce:	bf00      	nop
   169d0:	0000823c 	.word	0x0000823c
   169d4:	0001e5c0 	.word	0x0001e5c0
   169d8:	000226ee 	.word	0x000226ee
   169dc:	000226c5 	.word	0x000226c5

000169e0 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   169e0:	4b04      	ldr	r3, [pc, #16]	; (169f4 <SystemCoreClockUpdate+0x14>)
   169e2:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   169e6:	4b04      	ldr	r3, [pc, #16]	; (169f8 <SystemCoreClockUpdate+0x18>)
   169e8:	f002 0203 	and.w	r2, r2, #3
   169ec:	40d3      	lsrs	r3, r2
   169ee:	4a03      	ldr	r2, [pc, #12]	; (169fc <SystemCoreClockUpdate+0x1c>)
   169f0:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   169f2:	4770      	bx	lr
   169f4:	40005000 	.word	0x40005000
   169f8:	07a12000 	.word	0x07a12000
   169fc:	20008534 	.word	0x20008534

00016a00 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   16a00:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   16a02:	4604      	mov	r4, r0
   16a04:	b940      	cbnz	r0, 16a18 <nrfx_clock_init+0x18>
   16a06:	4909      	ldr	r1, [pc, #36]	; (16a2c <nrfx_clock_init+0x2c>)
   16a08:	4809      	ldr	r0, [pc, #36]	; (16a30 <nrfx_clock_init+0x30>)
   16a0a:	22b3      	movs	r2, #179	; 0xb3
   16a0c:	f003 fe2e 	bl	1a66c <printk>
   16a10:	21b3      	movs	r1, #179	; 0xb3
   16a12:	4806      	ldr	r0, [pc, #24]	; (16a2c <nrfx_clock_init+0x2c>)
   16a14:	f004 f8d0 	bl	1abb8 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   16a18:	4b06      	ldr	r3, [pc, #24]	; (16a34 <nrfx_clock_init+0x34>)
   16a1a:	791a      	ldrb	r2, [r3, #4]
   16a1c:	b922      	cbnz	r2, 16a28 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   16a1e:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   16a20:	4805      	ldr	r0, [pc, #20]	; (16a38 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   16a22:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   16a24:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16a26:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   16a28:	4804      	ldr	r0, [pc, #16]	; (16a3c <nrfx_clock_init+0x3c>)
    return err_code;
   16a2a:	e7fc      	b.n	16a26 <nrfx_clock_init+0x26>
   16a2c:	00022721 	.word	0x00022721
   16a30:	0001fbb7 	.word	0x0001fbb7
   16a34:	2000b06c 	.word	0x2000b06c
   16a38:	0bad0000 	.word	0x0bad0000
   16a3c:	0bad000c 	.word	0x0bad000c

00016a40 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   16a40:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16a42:	4b0d      	ldr	r3, [pc, #52]	; (16a78 <nrfx_clock_enable+0x38>)
   16a44:	791b      	ldrb	r3, [r3, #4]
   16a46:	b943      	cbnz	r3, 16a5a <nrfx_clock_enable+0x1a>
   16a48:	490c      	ldr	r1, [pc, #48]	; (16a7c <nrfx_clock_enable+0x3c>)
   16a4a:	480d      	ldr	r0, [pc, #52]	; (16a80 <nrfx_clock_enable+0x40>)
   16a4c:	22cc      	movs	r2, #204	; 0xcc
   16a4e:	f003 fe0d 	bl	1a66c <printk>
   16a52:	21cc      	movs	r1, #204	; 0xcc
   16a54:	4809      	ldr	r0, [pc, #36]	; (16a7c <nrfx_clock_enable+0x3c>)
   16a56:	f004 f8af 	bl	1abb8 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   16a5a:	2005      	movs	r0, #5
   16a5c:	f7f6 fec8 	bl	d7f0 <arch_irq_is_enabled>
   16a60:	b910      	cbnz	r0, 16a68 <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   16a62:	2005      	movs	r0, #5
   16a64:	f7f6 feb4 	bl	d7d0 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   16a68:	2201      	movs	r2, #1
   16a6a:	4b06      	ldr	r3, [pc, #24]	; (16a84 <nrfx_clock_enable+0x44>)
   16a6c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   16a70:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   16a74:	bd08      	pop	{r3, pc}
   16a76:	bf00      	nop
   16a78:	2000b06c 	.word	0x2000b06c
   16a7c:	00022721 	.word	0x00022721
   16a80:	0001fbb7 	.word	0x0001fbb7
   16a84:	40005000 	.word	0x40005000

00016a88 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16a88:	4b30      	ldr	r3, [pc, #192]	; (16b4c <nrfx_clock_start+0xc4>)
{
   16a8a:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16a8c:	791b      	ldrb	r3, [r3, #4]
{
   16a8e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16a90:	b953      	cbnz	r3, 16aa8 <nrfx_clock_start+0x20>
   16a92:	492f      	ldr	r1, [pc, #188]	; (16b50 <nrfx_clock_start+0xc8>)
   16a94:	482f      	ldr	r0, [pc, #188]	; (16b54 <nrfx_clock_start+0xcc>)
   16a96:	f44f 7284 	mov.w	r2, #264	; 0x108
   16a9a:	f003 fde7 	bl	1a66c <printk>
   16a9e:	f44f 7184 	mov.w	r1, #264	; 0x108
   16aa2:	482b      	ldr	r0, [pc, #172]	; (16b50 <nrfx_clock_start+0xc8>)
   16aa4:	f004 f888 	bl	1abb8 <assert_post_action>
    switch (domain)
   16aa8:	2c03      	cmp	r4, #3
   16aaa:	d842      	bhi.n	16b32 <nrfx_clock_start+0xaa>
   16aac:	e8df f004 	tbb	[pc, r4]
   16ab0:	34271c02 	.word	0x34271c02
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16ab4:	4b28      	ldr	r3, [pc, #160]	; (16b58 <nrfx_clock_start+0xd0>)
   16ab6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16aba:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   16abe:	03c9      	lsls	r1, r1, #15
   16ac0:	d510      	bpl.n	16ae4 <nrfx_clock_start+0x5c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   16ac2:	f002 0203 	and.w	r2, r2, #3
   16ac6:	2a02      	cmp	r2, #2
   16ac8:	d10c      	bne.n	16ae4 <nrfx_clock_start+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16aca:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16ace:	2200      	movs	r2, #0
   16ad0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16ad4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   16ad8:	2202      	movs	r2, #2
   16ada:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16ade:	2201      	movs	r2, #1
   16ae0:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   16ae2:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   16ae4:	2201      	movs	r2, #1
   16ae6:	e7f0      	b.n	16aca <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16ae8:	2200      	movs	r2, #0
   16aea:	4b1b      	ldr	r3, [pc, #108]	; (16b58 <nrfx_clock_start+0xd0>)
   16aec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   16af0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   16af4:	2201      	movs	r2, #1
   16af6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16afa:	601a      	str	r2, [r3, #0]
}
   16afc:	e7f1      	b.n	16ae2 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16afe:	2200      	movs	r2, #0
   16b00:	4b15      	ldr	r3, [pc, #84]	; (16b58 <nrfx_clock_start+0xd0>)
   16b02:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16b06:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   16b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
   16b0e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16b12:	2201      	movs	r2, #1
   16b14:	621a      	str	r2, [r3, #32]
}
   16b16:	e7e4      	b.n	16ae2 <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16b18:	2200      	movs	r2, #0
   16b1a:	4b0f      	ldr	r3, [pc, #60]	; (16b58 <nrfx_clock_start+0xd0>)
   16b1c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16b20:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   16b24:	f44f 7280 	mov.w	r2, #256	; 0x100
   16b28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16b2c:	2201      	movs	r2, #1
   16b2e:	619a      	str	r2, [r3, #24]
}
   16b30:	e7d7      	b.n	16ae2 <nrfx_clock_start+0x5a>
            NRFX_ASSERT(0);
   16b32:	4907      	ldr	r1, [pc, #28]	; (16b50 <nrfx_clock_start+0xc8>)
   16b34:	4807      	ldr	r0, [pc, #28]	; (16b54 <nrfx_clock_start+0xcc>)
   16b36:	f44f 729d 	mov.w	r2, #314	; 0x13a
   16b3a:	f003 fd97 	bl	1a66c <printk>
}
   16b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   16b42:	f44f 719d 	mov.w	r1, #314	; 0x13a
   16b46:	4802      	ldr	r0, [pc, #8]	; (16b50 <nrfx_clock_start+0xc8>)
   16b48:	f004 b836 	b.w	1abb8 <assert_post_action>
   16b4c:	2000b06c 	.word	0x2000b06c
   16b50:	00022721 	.word	0x00022721
   16b54:	0001fbb7 	.word	0x0001fbb7
   16b58:	40005000 	.word	0x40005000

00016b5c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16b5c:	4b42      	ldr	r3, [pc, #264]	; (16c68 <nrfx_clock_stop+0x10c>)
{
   16b5e:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16b60:	791b      	ldrb	r3, [r3, #4]
{
   16b62:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   16b64:	b953      	cbnz	r3, 16b7c <nrfx_clock_stop+0x20>
   16b66:	4941      	ldr	r1, [pc, #260]	; (16c6c <nrfx_clock_stop+0x110>)
   16b68:	4841      	ldr	r0, [pc, #260]	; (16c70 <nrfx_clock_stop+0x114>)
   16b6a:	f240 1241 	movw	r2, #321	; 0x141
   16b6e:	f003 fd7d 	bl	1a66c <printk>
   16b72:	f240 1141 	movw	r1, #321	; 0x141
   16b76:	483d      	ldr	r0, [pc, #244]	; (16c6c <nrfx_clock_stop+0x110>)
   16b78:	f004 f81e 	bl	1abb8 <assert_post_action>
    switch (domain)
   16b7c:	2c03      	cmp	r4, #3
   16b7e:	d856      	bhi.n	16c2e <nrfx_clock_stop+0xd2>
   16b80:	e8df f004 	tbb	[pc, r4]
   16b84:	483b2002 	.word	0x483b2002
    p_reg->INTENCLR = mask;
   16b88:	2202      	movs	r2, #2
   16b8a:	4b3a      	ldr	r3, [pc, #232]	; (16c74 <nrfx_clock_stop+0x118>)
   16b8c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16b90:	2200      	movs	r2, #0
   16b92:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16b96:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16b9a:	2201      	movs	r2, #1
   16b9c:	60da      	str	r2, [r3, #12]
   16b9e:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   16ba2:	4e34      	ldr	r6, [pc, #208]	; (16c74 <nrfx_clock_stop+0x118>)
    switch (domain)
   16ba4:	2c02      	cmp	r4, #2
   16ba6:	d04f      	beq.n	16c48 <nrfx_clock_stop+0xec>
   16ba8:	2c03      	cmp	r4, #3
   16baa:	d050      	beq.n	16c4e <nrfx_clock_stop+0xf2>
   16bac:	2c00      	cmp	r4, #0
   16bae:	d151      	bne.n	16c54 <nrfx_clock_stop+0xf8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16bb0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   16bb4:	03db      	lsls	r3, r3, #15
   16bb6:	d51f      	bpl.n	16bf8 <nrfx_clock_stop+0x9c>
   16bb8:	2001      	movs	r0, #1
   16bba:	f006 fcd1 	bl	1d560 <nrfx_busy_wait>
   16bbe:	3d01      	subs	r5, #1
   16bc0:	d1f0      	bne.n	16ba4 <nrfx_clock_stop+0x48>
   16bc2:	e019      	b.n	16bf8 <nrfx_clock_stop+0x9c>
    p_reg->INTENCLR = mask;
   16bc4:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16bc6:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16bc8:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   16bcc:	4c29      	ldr	r4, [pc, #164]	; (16c74 <nrfx_clock_stop+0x118>)
   16bce:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16bd2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   16bd6:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16bda:	6063      	str	r3, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16bdc:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16be0:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16be4:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16be8:	03d2      	lsls	r2, r2, #15
   16bea:	d505      	bpl.n	16bf8 <nrfx_clock_stop+0x9c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   16bec:	b123      	cbz	r3, 16bf8 <nrfx_clock_stop+0x9c>
   16bee:	2001      	movs	r0, #1
   16bf0:	f006 fcb6 	bl	1d560 <nrfx_busy_wait>
   16bf4:	3d01      	subs	r5, #1
   16bf6:	d1f1      	bne.n	16bdc <nrfx_clock_stop+0x80>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   16bf8:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   16bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
   16bfe:	4b1d      	ldr	r3, [pc, #116]	; (16c74 <nrfx_clock_stop+0x118>)
   16c00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16c04:	2200      	movs	r2, #0
   16c06:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16c0a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16c0e:	2201      	movs	r2, #1
   16c10:	625a      	str	r2, [r3, #36]	; 0x24
}
   16c12:	e7c4      	b.n	16b9e <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   16c14:	f44f 7280 	mov.w	r2, #256	; 0x100
   16c18:	4b16      	ldr	r3, [pc, #88]	; (16c74 <nrfx_clock_stop+0x118>)
   16c1a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16c1e:	2200      	movs	r2, #0
   16c20:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16c24:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16c28:	2201      	movs	r2, #1
   16c2a:	61da      	str	r2, [r3, #28]
}
   16c2c:	e7b7      	b.n	16b9e <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   16c2e:	490f      	ldr	r1, [pc, #60]	; (16c6c <nrfx_clock_stop+0x110>)
   16c30:	480f      	ldr	r0, [pc, #60]	; (16c70 <nrfx_clock_stop+0x114>)
   16c32:	f240 125d 	movw	r2, #349	; 0x15d
   16c36:	f003 fd19 	bl	1a66c <printk>
   16c3a:	f240 115d 	movw	r1, #349	; 0x15d
   16c3e:	480b      	ldr	r0, [pc, #44]	; (16c6c <nrfx_clock_stop+0x110>)
}
   16c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
   16c44:	f003 bfb8 	b.w	1abb8 <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   16c48:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   16c4c:	e7b2      	b.n	16bb4 <nrfx_clock_stop+0x58>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   16c4e:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   16c52:	e7af      	b.n	16bb4 <nrfx_clock_stop+0x58>
            NRFX_ASSERT(0);
   16c54:	4908      	ldr	r1, [pc, #32]	; (16c78 <nrfx_clock_stop+0x11c>)
   16c56:	4806      	ldr	r0, [pc, #24]	; (16c70 <nrfx_clock_stop+0x114>)
   16c58:	f240 3242 	movw	r2, #834	; 0x342
   16c5c:	f003 fd06 	bl	1a66c <printk>
   16c60:	f240 3142 	movw	r1, #834	; 0x342
   16c64:	4804      	ldr	r0, [pc, #16]	; (16c78 <nrfx_clock_stop+0x11c>)
   16c66:	e7eb      	b.n	16c40 <nrfx_clock_stop+0xe4>
   16c68:	2000b06c 	.word	0x2000b06c
   16c6c:	00022721 	.word	0x00022721
   16c70:	0001fbb7 	.word	0x0001fbb7
   16c74:	40005000 	.word	0x40005000
   16c78:	0002275e 	.word	0x0002275e

00016c7c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16c7c:	4b28      	ldr	r3, [pc, #160]	; (16d20 <nrfx_power_clock_irq_handler+0xa4>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   16c7e:	b510      	push	{r4, lr}
   16c80:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   16c84:	b152      	cbz	r2, 16c9c <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16c86:	2000      	movs	r0, #0
   16c88:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   16c8c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   16c90:	2201      	movs	r2, #1
   16c92:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   16c96:	4b23      	ldr	r3, [pc, #140]	; (16d24 <nrfx_power_clock_irq_handler+0xa8>)
   16c98:	681b      	ldr	r3, [r3, #0]
   16c9a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16c9c:	4b20      	ldr	r3, [pc, #128]	; (16d20 <nrfx_power_clock_irq_handler+0xa4>)
   16c9e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   16ca2:	b18a      	cbz	r2, 16cc8 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16ca4:	2200      	movs	r2, #0
   16ca6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16caa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16cae:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16cb2:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   16cb6:	f002 0203 	and.w	r2, r2, #3
   16cba:	2a01      	cmp	r2, #1
   16cbc:	f04f 0102 	mov.w	r1, #2
   16cc0:	d126      	bne.n	16d10 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16cc2:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16cc6:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16cc8:	4b15      	ldr	r3, [pc, #84]	; (16d20 <nrfx_power_clock_irq_handler+0xa4>)
   16cca:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   16cce:	b162      	cbz	r2, 16cea <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16cd0:	2200      	movs	r2, #0
   16cd2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   16cd6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   16cda:	f44f 7280 	mov.w	r2, #256	; 0x100
   16cde:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   16ce2:	4b10      	ldr	r3, [pc, #64]	; (16d24 <nrfx_power_clock_irq_handler+0xa8>)
   16ce4:	2004      	movs	r0, #4
   16ce6:	681b      	ldr	r3, [r3, #0]
   16ce8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16cea:	4b0d      	ldr	r3, [pc, #52]	; (16d20 <nrfx_power_clock_irq_handler+0xa4>)
   16cec:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   16cf0:	b1aa      	cbz	r2, 16d1e <nrfx_power_clock_irq_handler+0xa2>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   16cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16cf6:	2200      	movs	r2, #0
   16cf8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16cfc:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   16d00:	f44f 7200 	mov.w	r2, #512	; 0x200
   16d04:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   16d08:	4b06      	ldr	r3, [pc, #24]	; (16d24 <nrfx_power_clock_irq_handler+0xa8>)
   16d0a:	2005      	movs	r0, #5
   16d0c:	681b      	ldr	r3, [r3, #0]
   16d0e:	4718      	bx	r3
   16d10:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   16d14:	4b03      	ldr	r3, [pc, #12]	; (16d24 <nrfx_power_clock_irq_handler+0xa8>)
   16d16:	2001      	movs	r0, #1
   16d18:	681b      	ldr	r3, [r3, #0]
   16d1a:	4798      	blx	r3
   16d1c:	e7d4      	b.n	16cc8 <nrfx_power_clock_irq_handler+0x4c>
}
   16d1e:	bd10      	pop	{r4, pc}
   16d20:	40005000 	.word	0x40005000
   16d24:	2000b06c 	.word	0x2000b06c

00016d28 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   16d28:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   16d2a:	4c0a      	ldr	r4, [pc, #40]	; (16d54 <nrfx_dppi_channel_alloc+0x2c>)
   16d2c:	6821      	ldr	r1, [r4, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   16d2e:	43ce      	mvns	r6, r1
   16d30:	d00e      	beq.n	16d50 <nrfx_dppi_channel_alloc+0x28>
   16d32:	2300      	movs	r3, #0
   16d34:	b2da      	uxtb	r2, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   16d36:	fa26 f502 	lsr.w	r5, r6, r2
   16d3a:	07ed      	lsls	r5, r5, #31
   16d3c:	f103 0301 	add.w	r3, r3, #1
   16d40:	d5f8      	bpl.n	16d34 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   16d42:	2301      	movs	r3, #1
   16d44:	4093      	lsls	r3, r2
   16d46:	430b      	orrs	r3, r1
    *p_channel = channel;
   16d48:	7002      	strb	r2, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   16d4a:	4803      	ldr	r0, [pc, #12]	; (16d58 <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   16d4c:	6023      	str	r3, [r4, #0]
}
   16d4e:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   16d50:	4802      	ldr	r0, [pc, #8]	; (16d5c <nrfx_dppi_channel_alloc+0x34>)
   16d52:	e7fc      	b.n	16d4e <nrfx_dppi_channel_alloc+0x26>
   16d54:	2000b074 	.word	0x2000b074
   16d58:	0bad0000 	.word	0x0bad0000
   16d5c:	0bad0002 	.word	0x0bad0002

00016d60 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   16d60:	2301      	movs	r3, #1
   16d62:	fa03 f000 	lsl.w	r0, r3, r0
   16d66:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   16d68:	b193      	cbz	r3, 16d90 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   16d6a:	f04f 0320 	mov.w	r3, #32
   16d6e:	f3ef 8111 	mrs	r1, BASEPRI
   16d72:	f383 8811 	msr	BASEPRI, r3
   16d76:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   16d7a:	4a06      	ldr	r2, [pc, #24]	; (16d94 <nrfx_gpiote_channel_free+0x34>)
   16d7c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   16d7e:	ea23 0000 	bic.w	r0, r3, r0
   16d82:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   16d84:	f381 8811 	msr	BASEPRI, r1
   16d88:	f3bf 8f6f 	isb	sy
   16d8c:	4802      	ldr	r0, [pc, #8]	; (16d98 <nrfx_gpiote_channel_free+0x38>)
   16d8e:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   16d90:	4802      	ldr	r0, [pc, #8]	; (16d9c <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16d92:	4770      	bx	lr
   16d94:	2000b078 	.word	0x2000b078
   16d98:	0bad0000 	.word	0x0bad0000
   16d9c:	0bad0004 	.word	0x0bad0004

00016da0 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   16da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   16da4:	22ff      	movs	r2, #255	; 0xff
{
   16da6:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   16da8:	2601      	movs	r6, #1
{
   16daa:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   16dac:	f8df e054 	ldr.w	lr, [pc, #84]	; 16e04 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   16db0:	4815      	ldr	r0, [pc, #84]	; (16e08 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   16db2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 16e0c <nrfx_gpiote_channel_alloc+0x6c>
   16db6:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   16db8:	f04f 0120 	mov.w	r1, #32
   16dbc:	f3ef 8c11 	mrs	ip, BASEPRI
   16dc0:	f381 8811 	msr	BASEPRI, r1
   16dc4:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   16dc8:	fa22 f103 	lsr.w	r1, r2, r3
   16dcc:	07c9      	lsls	r1, r1, #31
   16dce:	d50a      	bpl.n	16de6 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   16dd0:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   16dd4:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   16dd8:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   16dda:	bf01      	itttt	eq
   16ddc:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   16dde:	4339      	orreq	r1, r7
   16de0:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   16de4:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   16de6:	f38c 8811 	msr	BASEPRI, ip
   16dea:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   16dee:	4540      	cmp	r0, r8
   16df0:	d005      	beq.n	16dfe <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   16df2:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   16df6:	439a      	bics	r2, r3
   16df8:	f104 0401 	add.w	r4, r4, #1
   16dfc:	d1db      	bne.n	16db6 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16e02:	bf00      	nop
   16e04:	2000b078 	.word	0x2000b078
   16e08:	0bad0002 	.word	0x0bad0002
   16e0c:	0bad0000 	.word	0x0bad0000

00016e10 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   16e10:	b570      	push	{r4, r5, r6, lr}
   16e12:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   16e14:	460d      	mov	r5, r1
   16e16:	b941      	cbnz	r1, 16e2a <nrfx_ipc_init+0x1a>
   16e18:	490b      	ldr	r1, [pc, #44]	; (16e48 <nrfx_ipc_init+0x38>)
   16e1a:	480c      	ldr	r0, [pc, #48]	; (16e4c <nrfx_ipc_init+0x3c>)
   16e1c:	2232      	movs	r2, #50	; 0x32
   16e1e:	f003 fc25 	bl	1a66c <printk>
   16e22:	2132      	movs	r1, #50	; 0x32
   16e24:	4808      	ldr	r0, [pc, #32]	; (16e48 <nrfx_ipc_init+0x38>)
   16e26:	f003 fec7 	bl	1abb8 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   16e2a:	4c09      	ldr	r4, [pc, #36]	; (16e50 <nrfx_ipc_init+0x40>)
   16e2c:	7923      	ldrb	r3, [r4, #4]
   16e2e:	b943      	cbnz	r3, 16e42 <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   16e30:	202a      	movs	r0, #42	; 0x2a
   16e32:	f7f6 fccd 	bl	d7d0 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   16e36:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   16e38:	4806      	ldr	r0, [pc, #24]	; (16e54 <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   16e3a:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   16e3c:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   16e3e:	60a6      	str	r6, [r4, #8]
}
   16e40:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   16e42:	4805      	ldr	r0, [pc, #20]	; (16e58 <nrfx_ipc_init+0x48>)
   16e44:	e7fc      	b.n	16e40 <nrfx_ipc_init+0x30>
   16e46:	bf00      	nop
   16e48:	00022792 	.word	0x00022792
   16e4c:	0001fbb7 	.word	0x0001fbb7
   16e50:	2000b0d8 	.word	0x2000b0d8
   16e54:	0bad0000 	.word	0x0bad0000
   16e58:	0bad000c 	.word	0x0bad000c

00016e5c <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   16e5c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   16e5e:	4604      	mov	r4, r0
   16e60:	b940      	cbnz	r0, 16e74 <nrfx_ipc_config_load+0x18>
   16e62:	4919      	ldr	r1, [pc, #100]	; (16ec8 <nrfx_ipc_config_load+0x6c>)
   16e64:	4819      	ldr	r0, [pc, #100]	; (16ecc <nrfx_ipc_config_load+0x70>)
   16e66:	2244      	movs	r2, #68	; 0x44
   16e68:	f003 fc00 	bl	1a66c <printk>
   16e6c:	2144      	movs	r1, #68	; 0x44
   16e6e:	4816      	ldr	r0, [pc, #88]	; (16ec8 <nrfx_ipc_config_load+0x6c>)
   16e70:	f003 fea2 	bl	1abb8 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16e74:	4b16      	ldr	r3, [pc, #88]	; (16ed0 <nrfx_ipc_config_load+0x74>)
   16e76:	791b      	ldrb	r3, [r3, #4]
   16e78:	2b01      	cmp	r3, #1
   16e7a:	d008      	beq.n	16e8e <nrfx_ipc_config_load+0x32>
   16e7c:	4912      	ldr	r1, [pc, #72]	; (16ec8 <nrfx_ipc_config_load+0x6c>)
   16e7e:	4813      	ldr	r0, [pc, #76]	; (16ecc <nrfx_ipc_config_load+0x70>)
   16e80:	2245      	movs	r2, #69	; 0x45
   16e82:	f003 fbf3 	bl	1a66c <printk>
   16e86:	2145      	movs	r1, #69	; 0x45
   16e88:	480f      	ldr	r0, [pc, #60]	; (16ec8 <nrfx_ipc_config_load+0x6c>)
   16e8a:	f003 fe95 	bl	1abb8 <assert_post_action>
{
   16e8e:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   16e90:	4a10      	ldr	r2, [pc, #64]	; (16ed4 <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   16e92:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   16e96:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16e9a:	3301      	adds	r3, #1
   16e9c:	2b10      	cmp	r3, #16
   16e9e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   16ea2:	d1f6      	bne.n	16e92 <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   16ea4:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   16ea6:	4a0b      	ldr	r2, [pc, #44]	; (16ed4 <nrfx_ipc_config_load+0x78>)
   16ea8:	f104 0140 	add.w	r1, r4, #64	; 0x40
   16eac:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   16eb0:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16eb4:	3301      	adds	r3, #1
   16eb6:	2b10      	cmp	r3, #16
   16eb8:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   16ebc:	d1f6      	bne.n	16eac <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   16ebe:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
   16ec2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16ec6:	bd38      	pop	{r3, r4, r5, pc}
   16ec8:	00022792 	.word	0x00022792
   16ecc:	0001fbb7 	.word	0x0001fbb7
   16ed0:	2000b0d8 	.word	0x2000b0d8
   16ed4:	4002a000 	.word	0x4002a000

00016ed8 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   16ed8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16eda:	4b0a      	ldr	r3, [pc, #40]	; (16f04 <nrfx_ipc_receive_event_enable+0x2c>)
{
   16edc:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16ede:	791b      	ldrb	r3, [r3, #4]
   16ee0:	2b01      	cmp	r3, #1
   16ee2:	d008      	beq.n	16ef6 <nrfx_ipc_receive_event_enable+0x1e>
   16ee4:	4908      	ldr	r1, [pc, #32]	; (16f08 <nrfx_ipc_receive_event_enable+0x30>)
   16ee6:	4809      	ldr	r0, [pc, #36]	; (16f0c <nrfx_ipc_receive_event_enable+0x34>)
   16ee8:	226a      	movs	r2, #106	; 0x6a
   16eea:	f003 fbbf 	bl	1a66c <printk>
   16eee:	216a      	movs	r1, #106	; 0x6a
   16ef0:	4805      	ldr	r0, [pc, #20]	; (16f08 <nrfx_ipc_receive_event_enable+0x30>)
   16ef2:	f003 fe61 	bl	1abb8 <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   16ef6:	2301      	movs	r3, #1
   16ef8:	fa03 f404 	lsl.w	r4, r3, r4
   16efc:	4b04      	ldr	r3, [pc, #16]	; (16f10 <nrfx_ipc_receive_event_enable+0x38>)
   16efe:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   16f02:	bd10      	pop	{r4, pc}
   16f04:	2000b0d8 	.word	0x2000b0d8
   16f08:	00022792 	.word	0x00022792
   16f0c:	0001fbb7 	.word	0x0001fbb7
   16f10:	4002a000 	.word	0x4002a000

00016f14 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   16f14:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16f16:	4b0a      	ldr	r3, [pc, #40]	; (16f40 <nrfx_ipc_receive_event_disable+0x2c>)
{
   16f18:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16f1a:	791b      	ldrb	r3, [r3, #4]
   16f1c:	2b01      	cmp	r3, #1
   16f1e:	d008      	beq.n	16f32 <nrfx_ipc_receive_event_disable+0x1e>
   16f20:	4908      	ldr	r1, [pc, #32]	; (16f44 <nrfx_ipc_receive_event_disable+0x30>)
   16f22:	4809      	ldr	r0, [pc, #36]	; (16f48 <nrfx_ipc_receive_event_disable+0x34>)
   16f24:	2270      	movs	r2, #112	; 0x70
   16f26:	f003 fba1 	bl	1a66c <printk>
   16f2a:	2170      	movs	r1, #112	; 0x70
   16f2c:	4805      	ldr	r0, [pc, #20]	; (16f44 <nrfx_ipc_receive_event_disable+0x30>)
   16f2e:	f003 fe43 	bl	1abb8 <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   16f32:	2301      	movs	r3, #1
   16f34:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   16f38:	4b04      	ldr	r3, [pc, #16]	; (16f4c <nrfx_ipc_receive_event_disable+0x38>)
   16f3a:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   16f3e:	bd10      	pop	{r4, pc}
   16f40:	2000b0d8 	.word	0x2000b0d8
   16f44:	00022792 	.word	0x00022792
   16f48:	0001fbb7 	.word	0x0001fbb7
   16f4c:	4002a000 	.word	0x4002a000

00016f50 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   16f50:	4b15      	ldr	r3, [pc, #84]	; (16fa8 <nrfx_ipc_irq_handler+0x58>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   16f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f56:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   16f5a:	4f14      	ldr	r7, [pc, #80]	; (16fac <nrfx_ipc_irq_handler+0x5c>)
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   16f5c:	4635      	mov	r5, r6
   16f5e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 16fb0 <nrfx_ipc_irq_handler+0x60>
    while (bitmask)
   16f62:	b935      	cbnz	r5, 16f72 <nrfx_ipc_irq_handler+0x22>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   16f64:	4b13      	ldr	r3, [pc, #76]	; (16fb4 <nrfx_ipc_irq_handler+0x64>)
   16f66:	4630      	mov	r0, r6
}
   16f68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   16f6c:	681a      	ldr	r2, [r3, #0]
   16f6e:	6899      	ldr	r1, [r3, #8]
   16f70:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   16f72:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   16f76:	2301      	movs	r3, #1
  return __builtin_clz(value);
   16f78:	fab4 f484 	clz	r4, r4
   16f7c:	40a3      	lsls	r3, r4
   16f7e:	2c0f      	cmp	r4, #15
   16f80:	ea25 0503 	bic.w	r5, r5, r3
   16f84:	d90a      	bls.n	16f9c <nrfx_ipc_irq_handler+0x4c>
   16f86:	4639      	mov	r1, r7
   16f88:	4640      	mov	r0, r8
   16f8a:	f240 12e5 	movw	r2, #485	; 0x1e5
   16f8e:	f003 fb6d 	bl	1a66c <printk>
   16f92:	f240 11e5 	movw	r1, #485	; 0x1e5
   16f96:	4638      	mov	r0, r7
   16f98:	f003 fe0e 	bl	1abb8 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f9c:	2200      	movs	r2, #0
   16f9e:	4b06      	ldr	r3, [pc, #24]	; (16fb8 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   16fa0:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16fa2:	511a      	str	r2, [r3, r4]
}
   16fa4:	e7dd      	b.n	16f62 <nrfx_ipc_irq_handler+0x12>
   16fa6:	bf00      	nop
   16fa8:	4002a000 	.word	0x4002a000
   16fac:	000227cd 	.word	0x000227cd
   16fb0:	0001fbb7 	.word	0x0001fbb7
   16fb4:	2000b0d8 	.word	0x2000b0d8
   16fb8:	4002a100 	.word	0x4002a100

00016fbc <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   16fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16fc0:	460e      	mov	r6, r1
   16fc2:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   16fc4:	4d0c      	ldr	r5, [pc, #48]	; (16ff8 <metal_generic_dev_open+0x3c>)
   16fc6:	f855 4f18 	ldr.w	r4, [r5, #24]!
   16fca:	42ac      	cmp	r4, r5
   16fcc:	d103      	bne.n	16fd6 <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   16fce:	f06f 0012 	mvn.w	r0, #18
   16fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   16fd6:	4631      	mov	r1, r6
   16fd8:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   16fdc:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   16fe0:	f004 fd5a 	bl	1ba98 <strcmp>
   16fe4:	b930      	cbnz	r0, 16ff4 <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
   16fe6:	4640      	mov	r0, r8
			*device = dev;
   16fe8:	f8c7 8000 	str.w	r8, [r7]
}
   16fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   16ff0:	f006 bb8f 	b.w	1d712 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   16ff4:	6824      	ldr	r4, [r4, #0]
   16ff6:	e7e8      	b.n	16fca <metal_generic_dev_open+0xe>
   16ff8:	2000b0e4 	.word	0x2000b0e4

00016ffc <metal_bus_find>:
{
   16ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17000:	4607      	mov	r7, r0
   17002:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   17004:	4e0b      	ldr	r6, [pc, #44]	; (17034 <metal_bus_find+0x38>)
   17006:	f856 4f08 	ldr.w	r4, [r6, #8]!
   1700a:	42b4      	cmp	r4, r6
   1700c:	d102      	bne.n	17014 <metal_bus_find+0x18>
	return -ENOENT;
   1700e:	f06f 0001 	mvn.w	r0, #1
   17012:	e00a      	b.n	1702a <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   17014:	4639      	mov	r1, r7
   17016:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   1701a:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   1701e:	f004 fd3b 	bl	1ba98 <strcmp>
   17022:	b920      	cbnz	r0, 1702e <metal_bus_find+0x32>
   17024:	b11d      	cbz	r5, 1702e <metal_bus_find+0x32>
			*result = bus;
   17026:	f8c5 8000 	str.w	r8, [r5]
}
   1702a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   1702e:	6824      	ldr	r4, [r4, #0]
   17030:	e7eb      	b.n	1700a <metal_bus_find+0xe>
   17032:	bf00      	nop
   17034:	2000b0e4 	.word	0x2000b0e4

00017038 <metal_bus_register>:
{
   17038:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   1703a:	4604      	mov	r4, r0
   1703c:	b910      	cbnz	r0, 17044 <metal_bus_register+0xc>
		return -EINVAL;
   1703e:	f06f 0015 	mvn.w	r0, #21
}
   17042:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   17044:	6800      	ldr	r0, [r0, #0]
   17046:	2800      	cmp	r0, #0
   17048:	d0f9      	beq.n	1703e <metal_bus_register+0x6>
   1704a:	f004 fd15 	bl	1ba78 <strlen>
   1704e:	2800      	cmp	r0, #0
   17050:	d0f5      	beq.n	1703e <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   17052:	2100      	movs	r1, #0
   17054:	6820      	ldr	r0, [r4, #0]
   17056:	f7ff ffd1 	bl	16ffc <metal_bus_find>
   1705a:	b1c0      	cbz	r0, 1708e <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   1705c:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
   17060:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
   17064:	4b0c      	ldr	r3, [pc, #48]	; (17098 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   17066:	f104 0224 	add.w	r2, r4, #36	; 0x24
   1706a:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   1706c:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   17070:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   17072:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   17074:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   17076:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   17078:	781a      	ldrb	r2, [r3, #0]
   1707a:	2a06      	cmp	r2, #6
   1707c:	d905      	bls.n	1708a <metal_bus_register+0x52>
   1707e:	685b      	ldr	r3, [r3, #4]
   17080:	b143      	cbz	r3, 17094 <metal_bus_register+0x5c>
   17082:	2007      	movs	r0, #7
   17084:	6822      	ldr	r2, [r4, #0]
   17086:	4905      	ldr	r1, [pc, #20]	; (1709c <metal_bus_register+0x64>)
   17088:	4798      	blx	r3
	return 0;
   1708a:	2000      	movs	r0, #0
   1708c:	e7d9      	b.n	17042 <metal_bus_register+0xa>
		return -EEXIST;
   1708e:	f06f 0010 	mvn.w	r0, #16
   17092:	e7d6      	b.n	17042 <metal_bus_register+0xa>
	return 0;
   17094:	4618      	mov	r0, r3
   17096:	e7d4      	b.n	17042 <metal_bus_register+0xa>
   17098:	2000b0e4 	.word	0x2000b0e4
   1709c:	000227ff 	.word	0x000227ff

000170a0 <metal_register_generic_device>:
{
   170a0:	b510      	push	{r4, lr}
   170a2:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   170a4:	6800      	ldr	r0, [r0, #0]
   170a6:	b910      	cbnz	r0, 170ae <metal_register_generic_device+0xe>
		return -EINVAL;
   170a8:	f06f 0015 	mvn.w	r0, #21
}
   170ac:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   170ae:	f004 fce3 	bl	1ba78 <strlen>
   170b2:	2800      	cmp	r0, #0
   170b4:	d0f8      	beq.n	170a8 <metal_register_generic_device+0x8>
   170b6:	68a3      	ldr	r3, [r4, #8]
   170b8:	2b01      	cmp	r3, #1
   170ba:	d8f5      	bhi.n	170a8 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   170bc:	4b06      	ldr	r3, [pc, #24]	; (170d8 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   170be:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   170c2:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   170c4:	4b05      	ldr	r3, [pc, #20]	; (170dc <metal_register_generic_device+0x3c>)
   170c6:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   170c8:	f103 0018 	add.w	r0, r3, #24
   170cc:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   170ce:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   170d0:	61d9      	str	r1, [r3, #28]
	return 0;
   170d2:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   170d4:	6011      	str	r1, [r2, #0]
}
   170d6:	e7e9      	b.n	170ac <metal_register_generic_device+0xc>
   170d8:	20008538 	.word	0x20008538
   170dc:	2000b0e4 	.word	0x2000b0e4

000170e0 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   170e0:	b538      	push	{r3, r4, r5, lr}
   170e2:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   170e4:	4c0d      	ldr	r4, [pc, #52]	; (1711c <metal_init+0x3c>)
   170e6:	2220      	movs	r2, #32
   170e8:	4620      	mov	r0, r4
   170ea:	2100      	movs	r1, #0
   170ec:	f004 fd2d 	bl	1bb4a <memset>

	_metal.common.log_handler   = params->log_handler;
   170f0:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   170f2:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   170f4:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   170f6:	4623      	mov	r3, r4
   170f8:	792a      	ldrb	r2, [r5, #4]
   170fa:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   170fe:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   17102:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   17106:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   1710a:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   1710e:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   17112:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   17116:	f000 b803 	b.w	17120 <metal_sys_init>
   1711a:	bf00      	nop
   1711c:	2000b0e4 	.word	0x2000b0e4

00017120 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   17120:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   17122:	4802      	ldr	r0, [pc, #8]	; (1712c <metal_sys_init+0xc>)
   17124:	f7ff ff88 	bl	17038 <metal_bus_register>
	return 0;
}
   17128:	2000      	movs	r0, #0
   1712a:	bd08      	pop	{r3, pc}
   1712c:	20008538 	.word	0x20008538

00017130 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   17130:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   17132:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   17134:	2b06      	cmp	r3, #6
{
   17136:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   17138:	bf88      	it	hi
   1713a:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   1713c:	4b09      	ldr	r3, [pc, #36]	; (17164 <metal_zephyr_log_handler+0x34>)
{
   1713e:	ac05      	add	r4, sp, #20
   17140:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   17144:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   17148:	4807      	ldr	r0, [pc, #28]	; (17168 <metal_zephyr_log_handler+0x38>)
   1714a:	f003 fa8f 	bl	1a66c <printk>

	va_start(args, format);
	vprintk(format, args);
   1714e:	4621      	mov	r1, r4
   17150:	4628      	mov	r0, r5
	va_start(args, format);
   17152:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   17154:	f7f3 f9b0 	bl	a4b8 <vprintk>
	va_end(args);
}
   17158:	b002      	add	sp, #8
   1715a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1715e:	b003      	add	sp, #12
   17160:	4770      	bx	lr
   17162:	bf00      	nop
   17164:	0001eeb4 	.word	0x0001eeb4
   17168:	00020f3b 	.word	0x00020f3b

0001716c <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   1716c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17170:	b087      	sub	sp, #28
   17172:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   17174:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   17176:	4605      	mov	r5, r0
	if (nvqs > num_vrings)
   17178:	4293      	cmp	r3, r2
{
   1717a:	4616      	mov	r6, r2
	if (nvqs > num_vrings)
   1717c:	d349      	bcc.n	17212 <virtio_create_virtqueues+0xa6>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   1717e:	2400      	movs	r4, #0
		vring_info = &vdev->vrings_info[i];
   17180:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   17184:	42b4      	cmp	r4, r6
   17186:	d103      	bne.n	17190 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   17188:	2000      	movs	r0, #0
}
   1718a:	b007      	add	sp, #28
   1718c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   17190:	fb0b f704 	mul.w	r7, fp, r4
   17194:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
   17198:	69aa      	ldr	r2, [r5, #24]
		vring_info = &vdev->vrings_info[i];
   1719a:	eb08 0c07 	add.w	ip, r8, r7
		vring_alloc = &vring_info->info;
   1719e:	f10c 0904 	add.w	r9, ip, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
   171a2:	bb02      	cbnz	r2, 171e6 <virtio_create_virtqueues+0x7a>
			struct metal_io_region *io = vring_info->io;
   171a4:	f8dc 0014 	ldr.w	r0, [ip, #20]
			metal_io_block_set(io, offset, 0,
   171a8:	f8bc e00c 	ldrh.w	lr, [ip, #12]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   171ac:	f8dc 3004 	ldr.w	r3, [ip, #4]
   171b0:	6801      	ldr	r1, [r0, #0]
						      vring_alloc->align));
   171b2:	f8dc c008 	ldr.w	ip, [ip, #8]
   171b6:	1a59      	subs	r1, r3, r1
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   171b8:	f10c 33ff 	add.w	r3, ip, #4294967295
   171bc:	eb03 130e 	add.w	r3, r3, lr, lsl #4
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   171c0:	f10e 0a03 	add.w	sl, lr, #3
	size = (size + align - 1) & ~(align - 1);
   171c4:	f1cc 0c00 	rsb	ip, ip, #0
   171c8:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   171cc:	ea03 030c 	and.w	r3, r3, ip
			metal_io_block_set(io, offset, 0,
   171d0:	f8d0 c008 	ldr.w	ip, [r0, #8]
	size += sizeof(struct vring_used) +
   171d4:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
   171d8:	4561      	cmp	r1, ip
   171da:	bf28      	it	cs
   171dc:	f04f 31ff 	movcs.w	r1, #4294967295
   171e0:	3306      	adds	r3, #6
   171e2:	f006 fa5d 	bl	1d6a0 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   171e6:	f858 3007 	ldr.w	r3, [r8, r7]
   171ea:	9a05      	ldr	r2, [sp, #20]
   171ec:	9302      	str	r3, [sp, #8]
   171ee:	6a2b      	ldr	r3, [r5, #32]
   171f0:	4628      	mov	r0, r5
   171f2:	6a1b      	ldr	r3, [r3, #32]
   171f4:	b2a1      	uxth	r1, r4
   171f6:	9301      	str	r3, [sp, #4]
   171f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   171fa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   171fe:	9300      	str	r3, [sp, #0]
   17200:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   17204:	464b      	mov	r3, r9
   17206:	f006 faa1 	bl	1d74c <virtqueue_create>
		if (ret)
   1720a:	2800      	cmp	r0, #0
   1720c:	d1bd      	bne.n	1718a <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   1720e:	3401      	adds	r4, #1
   17210:	e7b8      	b.n	17184 <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   17212:	4801      	ldr	r0, [pc, #4]	; (17218 <virtio_create_virtqueues+0xac>)
   17214:	e7b9      	b.n	1718a <virtio_create_virtqueues+0x1e>
   17216:	bf00      	nop
   17218:	fffff440 	.word	0xfffff440

0001721c <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   1721c:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   1721e:	8944      	ldrh	r4, [r0, #10]
   17220:	428c      	cmp	r4, r1
   17222:	d312      	bcc.n	1724a <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   17224:	6a03      	ldr	r3, [r0, #32]
   17226:	3c01      	subs	r4, #1
   17228:	885d      	ldrh	r5, [r3, #2]
   1722a:	402c      	ands	r4, r5
   1722c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
   17230:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
   17232:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   17234:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   17238:	6a02      	ldr	r2, [r0, #32]
   1723a:	8853      	ldrh	r3, [r2, #2]
   1723c:	3301      	adds	r3, #1
   1723e:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   17240:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   17242:	3301      	adds	r3, #1
   17244:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   17246:	2000      	movs	r0, #0
}
   17248:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   1724a:	4801      	ldr	r0, [pc, #4]	; (17250 <virtqueue_add_consumed_buffer+0x34>)
   1724c:	e7fc      	b.n	17248 <virtqueue_add_consumed_buffer+0x2c>
   1724e:	bf00      	nop
   17250:	fffff441 	.word	0xfffff441

00017254 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
   17254:	b4f0      	push	{r4, r5, r6, r7}
   17256:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   17258:	b148      	cbz	r0, 1726e <rpmsg_send_offchannel_raw+0x1a>
   1725a:	6a00      	ldr	r0, [r0, #32]
   1725c:	b138      	cbz	r0, 1726e <rpmsg_send_offchannel_raw+0x1a>
   1725e:	b133      	cbz	r3, 1726e <rpmsg_send_offchannel_raw+0x1a>
   17260:	3401      	adds	r4, #1
   17262:	d004      	beq.n	1726e <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   17264:	6f44      	ldr	r4, [r0, #116]	; 0x74
   17266:	b114      	cbz	r4, 1726e <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   17268:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
   1726a:	bcf0      	pop	{r4, r5, r6, r7}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   1726c:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   1726e:	4801      	ldr	r0, [pc, #4]	; (17274 <rpmsg_send_offchannel_raw+0x20>)
}
   17270:	bcf0      	pop	{r4, r5, r6, r7}
   17272:	4770      	bx	lr
   17274:	fffff82d 	.word	0xfffff82d

00017278 <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   17278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1727c:	460e      	mov	r6, r1
   1727e:	4690      	mov	r8, r2
   17280:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   17282:	4605      	mov	r5, r0
   17284:	2800      	cmp	r0, #0
   17286:	d06a      	beq.n	1735e <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   17288:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   1728c:	4638      	mov	r0, r7
   1728e:	f006 fbef 	bl	1da70 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   17292:	1c63      	adds	r3, r4, #1
   17294:	d11a      	bne.n	172cc <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   17296:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   17298:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   1729c:	095a      	lsrs	r2, r3, #5
   1729e:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   172a2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   172a6:	f003 011f 	and.w	r1, r3, #31
   172aa:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   172ae:	07e4      	lsls	r4, r4, #31
   172b0:	d407      	bmi.n	172c2 <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   172b2:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   172b6:	2301      	movs	r3, #1
   172b8:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   172ba:	4313      	orrs	r3, r2
   172bc:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
   172c0:	e01d      	b.n	172fe <rpmsg_create_ept+0x86>
	     bit++)
   172c2:	3301      	adds	r3, #1
	for (bit = start;
   172c4:	2b80      	cmp	r3, #128	; 0x80
   172c6:	d1e9      	bne.n	1729c <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
   172c8:	4c27      	ldr	r4, [pc, #156]	; (17368 <rpmsg_create_ept+0xf0>)
   172ca:	e044      	b.n	17356 <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   172cc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   172d0:	d315      	bcc.n	172fe <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
   172d2:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
   172d6:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   172d8:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   172dc:	d83a      	bhi.n	17354 <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   172de:	0958      	lsrs	r0, r3, #5
   172e0:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   172e4:	f003 031f 	and.w	r3, r3, #31
   172e8:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   172ec:	07d2      	lsls	r2, r2, #31
   172ee:	d4eb      	bmi.n	172c8 <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   172f0:	2201      	movs	r2, #1
   172f2:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   172f6:	ea43 030c 	orr.w	r3, r3, ip
   172fa:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   172fe:	491b      	ldr	r1, [pc, #108]	; (1736c <rpmsg_create_ept+0xf4>)
   17300:	2220      	movs	r2, #32
   17302:	f1b8 0f00 	cmp.w	r8, #0
   17306:	bf18      	it	ne
   17308:	4641      	movne	r1, r8
   1730a:	4628      	mov	r0, r5
   1730c:	f004 fba2 	bl	1ba54 <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   17310:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
   17312:	4629      	mov	r1, r5
   17314:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
   17316:	9b07      	ldr	r3, [sp, #28]
   17318:	4630      	mov	r0, r6
   1731a:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   1731c:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
   1731e:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
   17320:	632b      	str	r3, [r5, #48]	; 0x30
   17322:	f006 fc1f 	bl	1db64 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   17326:	4638      	mov	r0, r7
   17328:	f001 ffc8 	bl	192bc <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   1732c:	782c      	ldrb	r4, [r5, #0]
   1732e:	b174      	cbz	r4, 1734e <rpmsg_create_ept+0xd6>
   17330:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   17334:	b15c      	cbz	r4, 1734e <rpmsg_create_ept+0xd6>
   17336:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17338:	3301      	adds	r3, #1
   1733a:	d112      	bne.n	17362 <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   1733c:	2100      	movs	r1, #0
   1733e:	4628      	mov	r0, r5
   17340:	f006 fbc7 	bl	1dad2 <rpmsg_send_ns_message>

	if (status)
   17344:	4604      	mov	r4, r0
   17346:	b110      	cbz	r0, 1734e <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
   17348:	4628      	mov	r0, r5
   1734a:	f006 fb97 	bl	1da7c <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   1734e:	4620      	mov	r0, r4
   17350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17354:	4c06      	ldr	r4, [pc, #24]	; (17370 <rpmsg_create_ept+0xf8>)
   17356:	4638      	mov	r0, r7
   17358:	f001 ffb0 	bl	192bc <z_impl_k_sem_give>
}
   1735c:	e7f7      	b.n	1734e <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
   1735e:	4c04      	ldr	r4, [pc, #16]	; (17370 <rpmsg_create_ept+0xf8>)
   17360:	e7f5      	b.n	1734e <rpmsg_create_ept+0xd6>
   17362:	2400      	movs	r4, #0
   17364:	e7f3      	b.n	1734e <rpmsg_create_ept+0xd6>
   17366:	bf00      	nop
   17368:	fffff829 	.word	0xfffff829
   1736c:	00022921 	.word	0x00022921
   17370:	fffff82d 	.word	0xfffff82d

00017374 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
   17374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17378:	4605      	mov	r5, r0
   1737a:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   1737c:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1737e:	6a03      	ldr	r3, [r0, #32]
   17380:	b08d      	sub	sp, #52	; 0x34
   17382:	681b      	ldr	r3, [r3, #0]
   17384:	4692      	mov	sl, r2
   17386:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   1738a:	9103      	str	r1, [sp, #12]
   1738c:	4798      	blx	r3
	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
   1738e:	0743      	lsls	r3, r0, #29
   17390:	d57b      	bpl.n	1748a <rpmsg_virtio_send_offchannel_raw+0x116>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   17392:	f643 2398 	movw	r3, #15000	; 0x3a98
   17396:	2f00      	cmp	r7, #0
   17398:	bf18      	it	ne
   1739a:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
   1739c:	f105 0858 	add.w	r8, r5, #88	; 0x58
   173a0:	4640      	mov	r0, r8
   173a2:	f006 fc03 	bl	1dbac <__metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
   173a6:	4628      	mov	r0, r5
   173a8:	f006 fcc5 	bl	1dd36 <_rpmsg_virtio_get_buffer_size>
		if (avail_size && size > avail_size) {
   173ac:	4681      	mov	r9, r0
   173ae:	b130      	cbz	r0, 173be <rpmsg_virtio_send_offchannel_raw+0x4a>
   173b0:	42b0      	cmp	r0, r6
   173b2:	da04      	bge.n	173be <rpmsg_virtio_send_offchannel_raw+0x4a>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   173b4:	4640      	mov	r0, r8
   173b6:	f006 fbf7 	bl	1dba8 <k_sem_give>
		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
			break;
		if (avail_size != 0)
			return RPMSG_ERR_BUFF_SIZE;
   173ba:	4e42      	ldr	r6, [pc, #264]	; (174c4 <rpmsg_virtio_send_offchannel_raw+0x150>)
   173bc:	e061      	b.n	17482 <rpmsg_virtio_send_offchannel_raw+0x10e>
	return rvdev->vdev->role;
   173be:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   173c0:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   173c2:	b9f3      	cbnz	r3, 17402 <rpmsg_virtio_send_offchannel_raw+0x8e>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   173c4:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   173c8:	f10d 0212 	add.w	r2, sp, #18
   173cc:	a905      	add	r1, sp, #20
   173ce:	f006 fa4d 	bl	1d86c <virtqueue_get_buffer>
		if (!data) {
   173d2:	4604      	mov	r4, r0
   173d4:	b948      	cbnz	r0, 173ea <rpmsg_virtio_send_offchannel_raw+0x76>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   173d6:	f44f 7100 	mov.w	r1, #512	; 0x200
   173da:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
   173de:	f006 fcbd 	bl	1dd5c <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
   173e2:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   173e6:	4604      	mov	r4, r0
			*len = RPMSG_BUFFER_SIZE;
   173e8:	9305      	str	r3, [sp, #20]
   173ea:	4640      	mov	r0, r8
   173ec:	f006 fbdc 	bl	1dba8 <k_sem_give>
		if (buffer || !tick_count)
   173f0:	2c00      	cmp	r4, #0
   173f2:	d14e      	bne.n	17492 <rpmsg_virtio_send_offchannel_raw+0x11e>
   173f4:	2f00      	cmp	r7, #0
   173f6:	d04a      	beq.n	1748e <rpmsg_virtio_send_offchannel_raw+0x11a>
		if (avail_size != 0)
   173f8:	f1b9 0f00 	cmp.w	r9, #0
   173fc:	d1dd      	bne.n	173ba <rpmsg_virtio_send_offchannel_raw+0x46>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
   173fe:	3f01      	subs	r7, #1
	while (1) {
   17400:	e7ce      	b.n	173a0 <rpmsg_virtio_send_offchannel_raw+0x2c>
	if (role == RPMSG_REMOTE) {
   17402:	2b01      	cmp	r3, #1
   17404:	d108      	bne.n	17418 <rpmsg_virtio_send_offchannel_raw+0xa4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   17406:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1740a:	aa05      	add	r2, sp, #20
   1740c:	f10d 0112 	add.w	r1, sp, #18
   17410:	f006 fa66 	bl	1d8e0 <virtqueue_get_available_buffer>
   17414:	4604      	mov	r4, r0
   17416:	e7e8      	b.n	173ea <rpmsg_virtio_send_offchannel_raw+0x76>
	void *data = NULL;
   17418:	2400      	movs	r4, #0
   1741a:	e7e6      	b.n	173ea <rpmsg_virtio_send_offchannel_raw+0x76>
   1741c:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1741e:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
   17420:	f104 0110 	add.w	r1, r4, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   17424:	1ac9      	subs	r1, r1, r3
   17426:	4281      	cmp	r1, r0
   17428:	bf28      	it	cs
   1742a:	f04f 31ff 	movcs.w	r1, #4294967295
   1742e:	4633      	mov	r3, r6
   17430:	465a      	mov	r2, fp
   17432:	4638      	mov	r0, r7
   17434:	f006 f8f9 	bl	1d62a <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
   17438:	4286      	cmp	r6, r0
   1743a:	d000      	beq.n	1743e <rpmsg_virtio_send_offchannel_raw+0xca>
   1743c:	e7fe      	b.n	1743c <rpmsg_virtio_send_offchannel_raw+0xc8>
   1743e:	4640      	mov	r0, r8
   17440:	f006 fbb4 	bl	1dbac <__metal_mutex_acquire>
   17444:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
   17446:	9a05      	ldr	r2, [sp, #20]
   17448:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1744a:	b953      	cbnz	r3, 17462 <rpmsg_virtio_send_offchannel_raw+0xee>
		vqbuf.len = len;
   1744c:	e9cd 4206 	strd	r4, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   17450:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   17454:	2201      	movs	r2, #1
   17456:	9400      	str	r4, [sp, #0]
   17458:	a906      	add	r1, sp, #24
   1745a:	f006 f9a7 	bl	1d7ac <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   1745e:	b148      	cbz	r0, 17474 <rpmsg_virtio_send_offchannel_raw+0x100>
   17460:	e7fe      	b.n	17460 <rpmsg_virtio_send_offchannel_raw+0xec>
	if (role == RPMSG_REMOTE) {
   17462:	2b01      	cmp	r3, #1
   17464:	d106      	bne.n	17474 <rpmsg_virtio_send_offchannel_raw+0x100>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   17466:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1746a:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   1746e:	f7ff fed5 	bl	1721c <virtqueue_add_consumed_buffer>
   17472:	e7f4      	b.n	1745e <rpmsg_virtio_send_offchannel_raw+0xea>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   17474:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   17478:	f006 faac 	bl	1d9d4 <virtqueue_kick>
   1747c:	4640      	mov	r0, r8
   1747e:	f006 fb93 	bl	1dba8 <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
   17482:	4630      	mov	r0, r6
   17484:	b00d      	add	sp, #52	; 0x34
   17486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
   1748a:	4e0f      	ldr	r6, [pc, #60]	; (174c8 <rpmsg_virtio_send_offchannel_raw+0x154>)
   1748c:	e7f9      	b.n	17482 <rpmsg_virtio_send_offchannel_raw+0x10e>
		return RPMSG_ERR_NO_BUFF;
   1748e:	4e0f      	ldr	r6, [pc, #60]	; (174cc <rpmsg_virtio_send_offchannel_raw+0x158>)
   17490:	e7f7      	b.n	17482 <rpmsg_virtio_send_offchannel_raw+0x10e>
	rp_hdr.src = src;
   17492:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   17494:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
	rp_hdr.src = src;
   17498:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
   1749a:	2300      	movs	r3, #0
   1749c:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1749e:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   174a0:	1a61      	subs	r1, r4, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   174a2:	4281      	cmp	r1, r0
   174a4:	bf28      	it	cs
   174a6:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
   174aa:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   174ac:	4638      	mov	r0, r7
   174ae:	2310      	movs	r3, #16
   174b0:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
   174b2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
   174b6:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   174ba:	f006 f8b6 	bl	1d62a <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   174be:	2810      	cmp	r0, #16
   174c0:	d0ac      	beq.n	1741c <rpmsg_virtio_send_offchannel_raw+0xa8>
   174c2:	e7fe      	b.n	174c2 <rpmsg_virtio_send_offchannel_raw+0x14e>
   174c4:	fffff82b 	.word	0xfffff82b
   174c8:	fffff82c 	.word	0xfffff82c
   174cc:	fffff82e 	.word	0xfffff82e

000174d0 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
   174d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   174d4:	460d      	mov	r5, r1
   174d6:	b088      	sub	sp, #32
   174d8:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   174da:	2100      	movs	r1, #0
   174dc:	227c      	movs	r2, #124	; 0x7c
{
   174de:	4604      	mov	r4, r0
   174e0:	461e      	mov	r6, r3
   174e2:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
   174e6:	f004 fb30 	bl	1bb4a <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   174ea:	2201      	movs	r2, #1
   174ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
   174f0:	4611      	mov	r1, r2
   174f2:	f006 fcd0 	bl	1de96 <z_impl_k_sem_init>
   174f6:	f8d5 8018 	ldr.w	r8, [r5, #24]
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   174fa:	4b5d      	ldr	r3, [pc, #372]	; (17670 <rpmsg_init_vdev+0x1a0>)
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
   174fc:	f1b8 0f01 	cmp.w	r8, #1
	rvdev->vdev = vdev;
   17500:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
   17502:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   17504:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   17506:	6763      	str	r3, [r4, #116]	; 0x74
	if (role == RPMSG_REMOTE) {
   17508:	d020      	beq.n	1754c <rpmsg_init_vdev+0x7c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1750a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   1750c:	6a03      	ldr	r3, [r0, #32]
   1750e:	689b      	ldr	r3, [r3, #8]
   17510:	4798      	blx	r3
   17512:	2300      	movs	r3, #0
   17514:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   17516:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   1751a:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1751c:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   17520:	f1b8 0f00 	cmp.w	r8, #0
   17524:	d01e      	beq.n	17564 <rpmsg_init_vdev+0x94>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   17526:	f1b8 0f01 	cmp.w	r8, #1
   1752a:	d133      	bne.n	17594 <rpmsg_init_vdev+0xc4>
		vq_names[0] = "tx_vq";
   1752c:	4b51      	ldr	r3, [pc, #324]	; (17674 <rpmsg_init_vdev+0x1a4>)
   1752e:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
   17530:	4b51      	ldr	r3, [pc, #324]	; (17678 <rpmsg_init_vdev+0x1a8>)
   17532:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
   17534:	4b51      	ldr	r3, [pc, #324]	; (1767c <rpmsg_init_vdev+0x1ac>)
   17536:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
   17538:	4b51      	ldr	r3, [pc, #324]	; (17680 <rpmsg_init_vdev+0x1b0>)
   1753a:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   1753c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1753e:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   17540:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   17542:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   17546:	e023      	b.n	17590 <rpmsg_init_vdev+0xc0>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   17548:	0743      	lsls	r3, r0, #29
   1754a:	d4de      	bmi.n	1750a <rpmsg_init_vdev+0x3a>
		status = rpmsg_virtio_get_status(rvdev);
   1754c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
   1754e:	6a03      	ldr	r3, [r0, #32]
   17550:	681b      	ldr	r3, [r3, #0]
   17552:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   17554:	0642      	lsls	r2, r0, #25
   17556:	d5f7      	bpl.n	17548 <rpmsg_init_vdev+0x78>
			rpmsg_virtio_set_status(rvdev, 0);
   17558:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1755a:	2100      	movs	r1, #0
   1755c:	6a03      	ldr	r3, [r0, #32]
   1755e:	685b      	ldr	r3, [r3, #4]
   17560:	4798      	blx	r3
}
   17562:	e7f3      	b.n	1754c <rpmsg_init_vdev+0x7c>
		if (!shpool)
   17564:	f1b9 0f00 	cmp.w	r9, #0
   17568:	d07d      	beq.n	17666 <rpmsg_init_vdev+0x196>
		if (!shpool->size)
   1756a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1756e:	2b00      	cmp	r3, #0
   17570:	d07b      	beq.n	1766a <rpmsg_init_vdev+0x19a>
		vq_names[0] = "rx_vq";
   17572:	4b41      	ldr	r3, [pc, #260]	; (17678 <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
   17574:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
   17578:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
   1757a:	4b3e      	ldr	r3, [pc, #248]	; (17674 <rpmsg_init_vdev+0x1a4>)
   1757c:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
   1757e:	4b40      	ldr	r3, [pc, #256]	; (17680 <rpmsg_init_vdev+0x1b0>)
   17580:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
   17582:	4b3e      	ldr	r3, [pc, #248]	; (1767c <rpmsg_init_vdev+0x1ac>)
   17584:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   17586:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   17588:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
   1758a:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   1758c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   17590:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   17594:	ab04      	add	r3, sp, #16
   17596:	9300      	str	r3, [sp, #0]
   17598:	2202      	movs	r2, #2
   1759a:	2100      	movs	r1, #0
   1759c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
   1759e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
   175a2:	ab02      	add	r3, sp, #8
   175a4:	f7ff fde2 	bl	1716c <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   175a8:	4607      	mov	r7, r0
   175aa:	2800      	cmp	r0, #0
   175ac:	d157      	bne.n	1765e <rpmsg_init_vdev+0x18e>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
   175ae:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   175b2:	f006 f9e9 	bl	1d988 <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
   175b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
   175b8:	681a      	ldr	r2, [r3, #0]
   175ba:	699b      	ldr	r3, [r3, #24]
   175bc:	6296      	str	r6, [r2, #40]	; 0x28
   175be:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   175c0:	f1b8 0f00 	cmp.w	r8, #0
   175c4:	d108      	bne.n	175d8 <rpmsg_init_vdev+0x108>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
   175c6:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   175ca:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
   175cc:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   175ce:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   175d2:	895b      	ldrh	r3, [r3, #10]
   175d4:	4553      	cmp	r3, sl
   175d6:	d81f      	bhi.n	17618 <rpmsg_init_vdev+0x148>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
   175d8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   175dc:	e9c4 4400 	strd	r4, r4, [r4]
   175e0:	b18b      	cbz	r3, 17606 <rpmsg_init_vdev+0x136>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
   175e2:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   175e6:	4927      	ldr	r1, [pc, #156]	; (17684 <rpmsg_init_vdev+0x1b4>)
   175e8:	2220      	movs	r2, #32
   175ea:	4628      	mov	r0, r5
   175ec:	f004 fa32 	bl	1ba54 <strncpy>
	ept->addr = src;
   175f0:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
   175f2:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
   175f6:	4b24      	ldr	r3, [pc, #144]	; (17688 <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
   175f8:	4629      	mov	r1, r5
   175fa:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
   175fc:	2300      	movs	r3, #0
   175fe:	4620      	mov	r0, r4
   17600:	63a3      	str	r3, [r4, #56]	; 0x38
   17602:	f006 faaf 	bl	1db64 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
   17606:	f1b8 0f00 	cmp.w	r8, #0
   1760a:	d128      	bne.n	1765e <rpmsg_init_vdev+0x18e>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   1760c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   1760e:	2104      	movs	r1, #4
   17610:	6a03      	ldr	r3, [r0, #32]
   17612:	685b      	ldr	r3, [r3, #4]
   17614:	4798      	blx	r3
}
   17616:	e022      	b.n	1765e <rpmsg_init_vdev+0x18e>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   17618:	f44f 7100 	mov.w	r1, #512	; 0x200
   1761c:	4648      	mov	r0, r9
   1761e:	f006 fb9d 	bl	1dd5c <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   17622:	4605      	mov	r5, r0
   17624:	b1c8      	cbz	r0, 1765a <rpmsg_init_vdev+0x18a>
   17626:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   17628:	9006      	str	r0, [sp, #24]
   1762a:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1762c:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   1762e:	f44f 7300 	mov.w	r3, #512	; 0x200
   17632:	4281      	cmp	r1, r0
   17634:	bf28      	it	cs
   17636:	f04f 31ff 	movcs.w	r1, #4294967295
   1763a:	2200      	movs	r2, #0
   1763c:	4630      	mov	r0, r6
   1763e:	f006 f82f 	bl	1d6a0 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   17642:	2301      	movs	r3, #1
   17644:	2200      	movs	r2, #0
   17646:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   1764a:	9500      	str	r5, [sp, #0]
   1764c:	a906      	add	r1, sp, #24
   1764e:	f006 f8ad 	bl	1d7ac <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   17652:	b918      	cbnz	r0, 1765c <rpmsg_init_vdev+0x18c>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   17654:	f10a 0a01 	add.w	sl, sl, #1
   17658:	e7b9      	b.n	175ce <rpmsg_init_vdev+0xfe>
				return RPMSG_ERR_NO_BUFF;
   1765a:	480c      	ldr	r0, [pc, #48]	; (1768c <rpmsg_init_vdev+0x1bc>)
   1765c:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
   1765e:	4638      	mov	r0, r7
   17660:	b008      	add	sp, #32
   17662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
   17666:	4f0a      	ldr	r7, [pc, #40]	; (17690 <rpmsg_init_vdev+0x1c0>)
   17668:	e7f9      	b.n	1765e <rpmsg_init_vdev+0x18e>
			return RPMSG_ERR_NO_BUFF;
   1766a:	4f08      	ldr	r7, [pc, #32]	; (1768c <rpmsg_init_vdev+0x1bc>)
   1766c:	e7f7      	b.n	1765e <rpmsg_init_vdev+0x18e>
   1766e:	bf00      	nop
   17670:	00017375 	.word	0x00017375
   17674:	000228b0 	.word	0x000228b0
   17678:	000228aa 	.word	0x000228aa
   1767c:	0001dba7 	.word	0x0001dba7
   17680:	0001dc77 	.word	0x0001dc77
   17684:	000228b6 	.word	0x000228b6
   17688:	0001dbb9 	.word	0x0001dbb9
   1768c:	fffff82e 	.word	0xfffff82e
   17690:	fffff82d 	.word	0xfffff82d

00017694 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   17694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   17696:	4b10      	ldr	r3, [pc, #64]	; (176d8 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   17698:	4f10      	ldr	r7, [pc, #64]	; (176dc <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1769a:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1769e:	3001      	adds	r0, #1
   176a0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   176a4:	42ae      	cmp	r6, r5
   176a6:	d800      	bhi.n	176aa <z_sys_init_run_level+0x16>
		}
	}
}
   176a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   176aa:	e9d5 3400 	ldrd	r3, r4, [r5]
   176ae:	4620      	mov	r0, r4
   176b0:	4798      	blx	r3
   176b2:	b170      	cbz	r0, 176d2 <z_sys_init_run_level+0x3e>
   176b4:	b16c      	cbz	r4, 176d2 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   176b6:	2301      	movs	r3, #1
				(dev - __device_start));
   176b8:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   176ba:	4a09      	ldr	r2, [pc, #36]	; (176e0 <z_sys_init_run_level+0x4c>)
   176bc:	1124      	asrs	r4, r4, #4
   176be:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   176c0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   176c4:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   176c8:	fa03 f404 	lsl.w	r4, r3, r4
   176cc:	4304      	orrs	r4, r0
   176ce:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   176d2:	3508      	adds	r5, #8
   176d4:	e7e6      	b.n	176a4 <z_sys_init_run_level+0x10>
   176d6:	bf00      	nop
   176d8:	0001eed4 	.word	0x0001eed4
   176dc:	20008588 	.word	0x20008588
   176e0:	200085f8 	.word	0x200085f8

000176e4 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   176e4:	4b08      	ldr	r3, [pc, #32]	; (17708 <z_device_ready+0x24>)
   176e6:	1ac0      	subs	r0, r0, r3
   176e8:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   176ea:	4b08      	ldr	r3, [pc, #32]	; (1770c <z_device_ready+0x28>)
   176ec:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   176ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   176f2:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   176f4:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   176f8:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   176fc:	4210      	tst	r0, r2
}
   176fe:	bf0c      	ite	eq
   17700:	4618      	moveq	r0, r3
   17702:	2000      	movne	r0, #0
   17704:	4770      	bx	lr
   17706:	bf00      	nop
   17708:	20008588 	.word	0x20008588
   1770c:	200085f8 	.word	0x200085f8

00017710 <z_impl_device_get_binding>:
{
   17710:	b570      	push	{r4, r5, r6, lr}
   17712:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   17714:	4c0f      	ldr	r4, [pc, #60]	; (17754 <z_impl_device_get_binding+0x44>)
   17716:	4e10      	ldr	r6, [pc, #64]	; (17758 <z_impl_device_get_binding+0x48>)
   17718:	42b4      	cmp	r4, r6
   1771a:	d104      	bne.n	17726 <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   1771c:	4c0d      	ldr	r4, [pc, #52]	; (17754 <z_impl_device_get_binding+0x44>)
   1771e:	42b4      	cmp	r4, r6
   17720:	d10a      	bne.n	17738 <z_impl_device_get_binding+0x28>
	return NULL;
   17722:	2400      	movs	r4, #0
   17724:	e014      	b.n	17750 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   17726:	4620      	mov	r0, r4
   17728:	f7ff ffdc 	bl	176e4 <z_device_ready>
   1772c:	b110      	cbz	r0, 17734 <z_impl_device_get_binding+0x24>
   1772e:	6823      	ldr	r3, [r4, #0]
   17730:	42ab      	cmp	r3, r5
   17732:	d00d      	beq.n	17750 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   17734:	3410      	adds	r4, #16
   17736:	e7ef      	b.n	17718 <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17738:	4620      	mov	r0, r4
   1773a:	f7ff ffd3 	bl	176e4 <z_device_ready>
   1773e:	b908      	cbnz	r0, 17744 <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   17740:	3410      	adds	r4, #16
   17742:	e7ec      	b.n	1771e <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   17744:	4628      	mov	r0, r5
   17746:	6821      	ldr	r1, [r4, #0]
   17748:	f004 f9a6 	bl	1ba98 <strcmp>
   1774c:	2800      	cmp	r0, #0
   1774e:	d1f7      	bne.n	17740 <z_impl_device_get_binding+0x30>
}
   17750:	4620      	mov	r0, r4
   17752:	bd70      	pop	{r4, r5, r6, pc}
   17754:	20008588 	.word	0x20008588
   17758:	200085f8 	.word	0x200085f8

0001775c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1775c:	4b01      	ldr	r3, [pc, #4]	; (17764 <z_impl_z_errno+0x8>)
   1775e:	6898      	ldr	r0, [r3, #8]
}
   17760:	3070      	adds	r0, #112	; 0x70
   17762:	4770      	bx	lr
   17764:	2000b10c 	.word	0x2000b10c

00017768 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   17768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1776a:	4604      	mov	r4, r0
   1776c:	460e      	mov	r6, r1
	__asm__ volatile(
   1776e:	f04f 0320 	mov.w	r3, #32
   17772:	f3ef 8711 	mrs	r7, BASEPRI
   17776:	f383 8811 	msr	BASEPRI, r3
   1777a:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1777e:	f001 fd97 	bl	192b0 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   17782:	2200      	movs	r2, #0
   17784:	2c04      	cmp	r4, #4
   17786:	bf98      	it	ls
   17788:	4b1d      	ldrls	r3, [pc, #116]	; (17800 <z_fatal_error+0x98>)
   1778a:	4605      	mov	r5, r0
	switch (reason) {
   1778c:	bf94      	ite	ls
   1778e:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   17792:	4b1c      	ldrhi	r3, [pc, #112]	; (17804 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   17794:	9200      	str	r2, [sp, #0]
   17796:	2145      	movs	r1, #69	; 0x45
   17798:	4622      	mov	r2, r4
   1779a:	481b      	ldr	r0, [pc, #108]	; (17808 <z_fatal_error+0xa0>)
   1779c:	f002 ff66 	bl	1a66c <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   177a0:	b13e      	cbz	r6, 177b2 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   177a2:	69f3      	ldr	r3, [r6, #28]
   177a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   177a8:	b11b      	cbz	r3, 177b2 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   177aa:	2145      	movs	r1, #69	; 0x45
   177ac:	4817      	ldr	r0, [pc, #92]	; (1780c <z_fatal_error+0xa4>)
   177ae:	f002 ff5d 	bl	1a66c <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   177b2:	b135      	cbz	r5, 177c2 <z_fatal_error+0x5a>
   177b4:	4628      	mov	r0, r5
   177b6:	f006 fb8b 	bl	1ded0 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   177ba:	4603      	mov	r3, r0
   177bc:	b108      	cbz	r0, 177c2 <z_fatal_error+0x5a>
   177be:	7802      	ldrb	r2, [r0, #0]
   177c0:	b902      	cbnz	r2, 177c4 <z_fatal_error+0x5c>
		thread_name = "unknown";
   177c2:	4b13      	ldr	r3, [pc, #76]	; (17810 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   177c4:	462a      	mov	r2, r5
   177c6:	2145      	movs	r1, #69	; 0x45
   177c8:	4812      	ldr	r0, [pc, #72]	; (17814 <z_fatal_error+0xac>)
   177ca:	f002 ff4f 	bl	1a66c <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   177ce:	4631      	mov	r1, r6
   177d0:	4620      	mov	r0, r4
   177d2:	f7ff f8ad 	bl	16930 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   177d6:	2c04      	cmp	r4, #4
   177d8:	d108      	bne.n	177ec <z_fatal_error+0x84>
   177da:	490f      	ldr	r1, [pc, #60]	; (17818 <z_fatal_error+0xb0>)
   177dc:	480f      	ldr	r0, [pc, #60]	; (1781c <z_fatal_error+0xb4>)
   177de:	228e      	movs	r2, #142	; 0x8e
   177e0:	f002 ff44 	bl	1a66c <printk>
   177e4:	218e      	movs	r1, #142	; 0x8e
   177e6:	480c      	ldr	r0, [pc, #48]	; (17818 <z_fatal_error+0xb0>)
   177e8:	f003 f9e6 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   177ec:	f387 8811 	msr	BASEPRI, r7
   177f0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   177f4:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   177f6:	b003      	add	sp, #12
   177f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   177fc:	f7f6 bb22 	b.w	de44 <z_impl_k_thread_abort>
   17800:	0001eeec 	.word	0x0001eeec
   17804:	000228b9 	.word	0x000228b9
   17808:	000228cf 	.word	0x000228cf
   1780c:	000228fc 	.word	0x000228fc
   17810:	000228c7 	.word	0x000228c7
   17814:	00022922 	.word	0x00022922
   17818:	0002293f 	.word	0x0002293f
   1781c:	0001fbb7 	.word	0x0001fbb7

00017820 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   17820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17822:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   17824:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   17826:	4e15      	ldr	r6, [pc, #84]	; (1787c <idle+0x5c>)
	__asm__ volatile(
   17828:	f04f 0220 	mov.w	r2, #32
   1782c:	f3ef 8311 	mrs	r3, BASEPRI
   17830:	f382 8811 	msr	BASEPRI, r2
   17834:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   17838:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1783a:	b188      	cbz	r0, 17860 <idle+0x40>
			cpu->pending_abort = NULL;
   1783c:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   1783e:	f383 8811 	msr	BASEPRI, r3
   17842:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   17846:	f001 f93b 	bl	18ac0 <z_thread_single_abort>
	__asm__ volatile(
   1784a:	f04f 0320 	mov.w	r3, #32
   1784e:	f3ef 8011 	mrs	r0, BASEPRI
   17852:	f383 8811 	msr	BASEPRI, r3
   17856:	f3bf 8f6f 	isb	sy
   1785a:	f006 fae2 	bl	1de22 <z_reschedule_irqlock>
			continue;
   1785e:	e7e3      	b.n	17828 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   17860:	f002 f998 	bl	19b94 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   17864:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   17866:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   17868:	2802      	cmp	r0, #2
   1786a:	bfd8      	it	le
   1786c:	4608      	movle	r0, r1
   1786e:	f002 f9c7 	bl	19c00 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   17872:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   17874:	f7f6 f82c 	bl	d8d0 <arch_cpu_idle>
}
   17878:	e7d6      	b.n	17828 <idle+0x8>
   1787a:	bf00      	nop
   1787c:	2000b10c 	.word	0x2000b10c

00017880 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   17880:	4802      	ldr	r0, [pc, #8]	; (1788c <z_bss_zero+0xc>)
   17882:	4a03      	ldr	r2, [pc, #12]	; (17890 <z_bss_zero+0x10>)
   17884:	2100      	movs	r1, #0
   17886:	1a12      	subs	r2, r2, r0
   17888:	f004 b95f 	b.w	1bb4a <memset>
   1788c:	200087f8 	.word	0x200087f8
   17890:	2000c9b4 	.word	0x2000c9b4

00017894 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   17894:	2201      	movs	r2, #1
{
   17896:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   17898:	4b09      	ldr	r3, [pc, #36]	; (178c0 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1789a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1789c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1789e:	f7ff fef9 	bl	17694 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   178a2:	f002 f819 	bl	198d8 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   178a6:	2003      	movs	r0, #3
   178a8:	f7ff fef4 	bl	17694 <z_sys_init_run_level>

	z_init_static_threads();
   178ac:	f001 fe76 	bl	1959c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   178b0:	f7f1 fbde 	bl	9070 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   178b4:	4a03      	ldr	r2, [pc, #12]	; (178c4 <bg_thread_main+0x30>)
   178b6:	7b13      	ldrb	r3, [r2, #12]
   178b8:	f023 0301 	bic.w	r3, r3, #1
   178bc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   178be:	bd08      	pop	{r3, pc}
   178c0:	2000c9b2 	.word	0x2000c9b2
   178c4:	2000a4d0 	.word	0x2000a4d0

000178c8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   178c8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   178cc:	4b34      	ldr	r3, [pc, #208]	; (179a0 <z_cstart+0xd8>)
   178ce:	b0ab      	sub	sp, #172	; 0xac
	uint32_t msp =
   178d0:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   178d4:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   178d8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   178dc:	2400      	movs	r4, #0
   178de:	23e0      	movs	r3, #224	; 0xe0
   178e0:	4d30      	ldr	r5, [pc, #192]	; (179a4 <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   178e2:	f04f 0b01 	mov.w	fp, #1
   178e6:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   178ea:	77ec      	strb	r4, [r5, #31]
   178ec:	762c      	strb	r4, [r5, #24]
   178ee:	766c      	strb	r4, [r5, #25]
   178f0:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   178f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   178f4:	4e2c      	ldr	r6, [pc, #176]	; (179a8 <z_cstart+0xe0>)
   178f6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   178fa:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   178fc:	f7f6 fa6a 	bl	ddd4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   17900:	f7f5 ffe0 	bl	d8c4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   17904:	f04f 33ff 	mov.w	r3, #4294967295
   17908:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1790a:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1790c:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   17910:	4d26      	ldr	r5, [pc, #152]	; (179ac <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   17912:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   17916:	ab06      	add	r3, sp, #24
   17918:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1791a:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1791c:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   17920:	f7ff feb8 	bl	17694 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   17924:	2001      	movs	r0, #1
   17926:	f7ff feb5 	bl	17694 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1792a:	f8df a084 	ldr.w	sl, [pc, #132]	; 179b0 <z_cstart+0xe8>
	z_sched_init();
   1792e:	f001 fb77 	bl	19020 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17932:	4b20      	ldr	r3, [pc, #128]	; (179b4 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   17934:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   17936:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1793a:	491f      	ldr	r1, [pc, #124]	; (179b8 <z_cstart+0xf0>)
   1793c:	9305      	str	r3, [sp, #20]
   1793e:	4630      	mov	r0, r6
   17940:	4653      	mov	r3, sl
   17942:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   17946:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1794a:	9400      	str	r4, [sp, #0]
   1794c:	f001 fd74 	bl	19438 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17950:	7b73      	ldrb	r3, [r6, #13]
   17952:	4680      	mov	r8, r0
   17954:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   17958:	4630      	mov	r0, r6
   1795a:	7373      	strb	r3, [r6, #13]
   1795c:	f000 feec 	bl	18738 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   17960:	230f      	movs	r3, #15
   17962:	4f16      	ldr	r7, [pc, #88]	; (179bc <z_cstart+0xf4>)
   17964:	f44f 72a0 	mov.w	r2, #320	; 0x140
   17968:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1796c:	4914      	ldr	r1, [pc, #80]	; (179c0 <z_cstart+0xf8>)
   1796e:	4b15      	ldr	r3, [pc, #84]	; (179c4 <z_cstart+0xfc>)
   17970:	4638      	mov	r0, r7
   17972:	e9cd b404 	strd	fp, r4, [sp, #16]
   17976:	e9cd 5400 	strd	r5, r4, [sp]
   1797a:	f001 fd5d 	bl	19438 <z_setup_new_thread>
   1797e:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   17980:	4652      	mov	r2, sl
   17982:	f023 0304 	bic.w	r3, r3, #4
   17986:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   17988:	f105 031c 	add.w	r3, r5, #28
   1798c:	4641      	mov	r1, r8
   1798e:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   17990:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   17994:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   17996:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   17998:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1799c:	f7f5 ff78 	bl	d890 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   179a0:	2000f010 	.word	0x2000f010
   179a4:	e000ed00 	.word	0xe000ed00
   179a8:	2000a4d0 	.word	0x2000a4d0
   179ac:	2000b10c 	.word	0x2000b10c
   179b0:	00017895 	.word	0x00017895
   179b4:	000229ab 	.word	0x000229ab
   179b8:	2000ead0 	.word	0x2000ead0
   179bc:	2000a440 	.word	0x2000a440
   179c0:	2000eed0 	.word	0x2000eed0
   179c4:	00017821 	.word	0x00017821

000179c8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   179c8:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   179ca:	4c0c      	ldr	r4, [pc, #48]	; (179fc <statics_init+0x34>)
   179cc:	4d0c      	ldr	r5, [pc, #48]	; (17a00 <statics_init+0x38>)
   179ce:	4e0d      	ldr	r6, [pc, #52]	; (17a04 <statics_init+0x3c>)
   179d0:	42ac      	cmp	r4, r5
   179d2:	d908      	bls.n	179e6 <statics_init+0x1e>
   179d4:	4631      	mov	r1, r6
   179d6:	480c      	ldr	r0, [pc, #48]	; (17a08 <statics_init+0x40>)
   179d8:	2215      	movs	r2, #21
   179da:	f002 fe47 	bl	1a66c <printk>
   179de:	2115      	movs	r1, #21
   179e0:	4630      	mov	r0, r6
   179e2:	f003 f8e9 	bl	1abb8 <assert_post_action>
   179e6:	42ac      	cmp	r4, r5
   179e8:	d301      	bcc.n	179ee <statics_init+0x26>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   179ea:	2000      	movs	r0, #0
   179ec:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   179ee:	4620      	mov	r0, r4
   179f0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   179f4:	f006 f9c7 	bl	1dd86 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   179f8:	3418      	adds	r4, #24
   179fa:	e7e9      	b.n	179d0 <statics_init+0x8>
   179fc:	20008650 	.word	0x20008650
   17a00:	20008668 	.word	0x20008668
   17a04:	000229b3 	.word	0x000229b3
   17a08:	0001fbb7 	.word	0x0001fbb7

00017a0c <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   17a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a10:	b085      	sub	sp, #20
   17a12:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   17a16:	4606      	mov	r6, r0
   17a18:	468b      	mov	fp, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   17a1a:	4648      	mov	r0, r9
   17a1c:	4639      	mov	r1, r7
{
   17a1e:	4690      	mov	r8, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   17a20:	f006 fab7 	bl	1df92 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   17a24:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   17a28:	e9cd 0102 	strd	r0, r1, [sp, #8]
   17a2c:	f04f 0320 	mov.w	r3, #32
   17a30:	f3ef 8411 	mrs	r4, BASEPRI
   17a34:	f383 8811 	msr	BASEPRI, r3
   17a38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17a3c:	4628      	mov	r0, r5
   17a3e:	f001 fe29 	bl	19694 <z_spin_lock_valid>
   17a42:	b940      	cbnz	r0, 17a56 <k_heap_aligned_alloc+0x4a>
   17a44:	4932      	ldr	r1, [pc, #200]	; (17b10 <k_heap_aligned_alloc+0x104>)
   17a46:	4833      	ldr	r0, [pc, #204]	; (17b14 <k_heap_aligned_alloc+0x108>)
   17a48:	227c      	movs	r2, #124	; 0x7c
   17a4a:	f002 fe0f 	bl	1a66c <printk>
   17a4e:	217c      	movs	r1, #124	; 0x7c
   17a50:	482f      	ldr	r0, [pc, #188]	; (17b10 <k_heap_aligned_alloc+0x104>)
   17a52:	f003 f8b1 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17a56:	4628      	mov	r0, r5
   17a58:	f001 fe38 	bl	196cc <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17a5c:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   17a60:	b15b      	cbz	r3, 17a7a <k_heap_aligned_alloc+0x6e>
   17a62:	ea59 0307 	orrs.w	r3, r9, r7
   17a66:	d008      	beq.n	17a7a <k_heap_aligned_alloc+0x6e>
   17a68:	492b      	ldr	r1, [pc, #172]	; (17b18 <k_heap_aligned_alloc+0x10c>)
   17a6a:	482a      	ldr	r0, [pc, #168]	; (17b14 <k_heap_aligned_alloc+0x108>)
   17a6c:	2224      	movs	r2, #36	; 0x24
   17a6e:	f002 fdfd 	bl	1a66c <printk>
   17a72:	2124      	movs	r1, #36	; 0x24
   17a74:	4828      	ldr	r0, [pc, #160]	; (17b18 <k_heap_aligned_alloc+0x10c>)
   17a76:	f003 f89f 	bl	1abb8 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17a7a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 17b10 <k_heap_aligned_alloc+0x104>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17a7e:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   17a82:	4642      	mov	r2, r8
   17a84:	4659      	mov	r1, fp
   17a86:	4630      	mov	r0, r6
   17a88:	f7f3 f80e 	bl	aaa8 <sys_heap_aligned_alloc>
   17a8c:	4607      	mov	r7, r0
		now = z_tick_get();
   17a8e:	f002 f993 	bl	19db8 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   17a92:	b1a7      	cbz	r7, 17abe <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17a94:	4628      	mov	r0, r5
   17a96:	f001 fe0b 	bl	196b0 <z_spin_unlock_valid>
   17a9a:	b940      	cbnz	r0, 17aae <k_heap_aligned_alloc+0xa2>
   17a9c:	491c      	ldr	r1, [pc, #112]	; (17b10 <k_heap_aligned_alloc+0x104>)
   17a9e:	481d      	ldr	r0, [pc, #116]	; (17b14 <k_heap_aligned_alloc+0x108>)
   17aa0:	22a7      	movs	r2, #167	; 0xa7
   17aa2:	f002 fde3 	bl	1a66c <printk>
   17aa6:	21a7      	movs	r1, #167	; 0xa7
   17aa8:	4819      	ldr	r0, [pc, #100]	; (17b10 <k_heap_aligned_alloc+0x104>)
   17aaa:	f003 f885 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   17aae:	f384 8811 	msr	BASEPRI, r4
   17ab2:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   17ab6:	4638      	mov	r0, r7
   17ab8:	b005      	add	sp, #20
   17aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   17abe:	9b02      	ldr	r3, [sp, #8]
   17ac0:	1a18      	subs	r0, r3, r0
   17ac2:	9b03      	ldr	r3, [sp, #12]
   17ac4:	eb63 0101 	sbc.w	r1, r3, r1
   17ac8:	2801      	cmp	r0, #1
   17aca:	f171 0300 	sbcs.w	r3, r1, #0
   17ace:	dbe1      	blt.n	17a94 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   17ad0:	e9cd 0100 	strd	r0, r1, [sp]
   17ad4:	4652      	mov	r2, sl
   17ad6:	4621      	mov	r1, r4
   17ad8:	4628      	mov	r0, r5
   17ada:	f001 f997 	bl	18e0c <z_pend_curr>
	__asm__ volatile(
   17ade:	f04f 0320 	mov.w	r3, #32
   17ae2:	f3ef 8411 	mrs	r4, BASEPRI
   17ae6:	f383 8811 	msr	BASEPRI, r3
   17aea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17aee:	4628      	mov	r0, r5
   17af0:	f001 fdd0 	bl	19694 <z_spin_lock_valid>
   17af4:	b940      	cbnz	r0, 17b08 <k_heap_aligned_alloc+0xfc>
   17af6:	4649      	mov	r1, r9
   17af8:	4806      	ldr	r0, [pc, #24]	; (17b14 <k_heap_aligned_alloc+0x108>)
   17afa:	227c      	movs	r2, #124	; 0x7c
   17afc:	f002 fdb6 	bl	1a66c <printk>
   17b00:	217c      	movs	r1, #124	; 0x7c
   17b02:	4648      	mov	r0, r9
   17b04:	f003 f858 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17b08:	4628      	mov	r0, r5
   17b0a:	f001 fddf 	bl	196cc <z_spin_lock_set_owner>
	return k;
   17b0e:	e7b8      	b.n	17a82 <k_heap_aligned_alloc+0x76>
   17b10:	0001fbf1 	.word	0x0001fbf1
   17b14:	0001fbb7 	.word	0x0001fbb7
   17b18:	000229b3 	.word	0x000229b3

00017b1c <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   17b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17b1e:	4604      	mov	r4, r0
   17b20:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   17b22:	f100 0514 	add.w	r5, r0, #20
   17b26:	f04f 0320 	mov.w	r3, #32
   17b2a:	f3ef 8711 	mrs	r7, BASEPRI
   17b2e:	f383 8811 	msr	BASEPRI, r3
   17b32:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17b36:	4628      	mov	r0, r5
   17b38:	f001 fdac 	bl	19694 <z_spin_lock_valid>
   17b3c:	b940      	cbnz	r0, 17b50 <k_heap_free+0x34>
   17b3e:	4916      	ldr	r1, [pc, #88]	; (17b98 <k_heap_free+0x7c>)
   17b40:	4816      	ldr	r0, [pc, #88]	; (17b9c <k_heap_free+0x80>)
   17b42:	227c      	movs	r2, #124	; 0x7c
   17b44:	f002 fd92 	bl	1a66c <printk>
   17b48:	217c      	movs	r1, #124	; 0x7c
   17b4a:	4813      	ldr	r0, [pc, #76]	; (17b98 <k_heap_free+0x7c>)
   17b4c:	f003 f834 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17b50:	4628      	mov	r0, r5
   17b52:	f001 fdbb 	bl	196cc <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   17b56:	4620      	mov	r0, r4
   17b58:	4631      	mov	r1, r6
   17b5a:	f7f2 ff63 	bl	aa24 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   17b5e:	f104 000c 	add.w	r0, r4, #12
   17b62:	f006 f988 	bl	1de76 <z_unpend_all>
   17b66:	b128      	cbz	r0, 17b74 <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   17b68:	4639      	mov	r1, r7
   17b6a:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   17b6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   17b70:	f000 bc0e 	b.w	18390 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17b74:	4628      	mov	r0, r5
   17b76:	f001 fd9b 	bl	196b0 <z_spin_unlock_valid>
   17b7a:	b940      	cbnz	r0, 17b8e <k_heap_free+0x72>
   17b7c:	4906      	ldr	r1, [pc, #24]	; (17b98 <k_heap_free+0x7c>)
   17b7e:	4807      	ldr	r0, [pc, #28]	; (17b9c <k_heap_free+0x80>)
   17b80:	22a7      	movs	r2, #167	; 0xa7
   17b82:	f002 fd73 	bl	1a66c <printk>
   17b86:	21a7      	movs	r1, #167	; 0xa7
   17b88:	4803      	ldr	r0, [pc, #12]	; (17b98 <k_heap_free+0x7c>)
   17b8a:	f003 f815 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   17b8e:	f387 8811 	msr	BASEPRI, r7
   17b92:	f3bf 8f6f 	isb	sy
}
   17b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17b98:	0001fbf1 	.word	0x0001fbf1
   17b9c:	0001fbb7 	.word	0x0001fbb7

00017ba0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   17ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17ba2:	4c14      	ldr	r4, [pc, #80]	; (17bf4 <init_mem_slab_module+0x54>)
   17ba4:	4d14      	ldr	r5, [pc, #80]	; (17bf8 <init_mem_slab_module+0x58>)
   17ba6:	4e15      	ldr	r6, [pc, #84]	; (17bfc <init_mem_slab_module+0x5c>)
   17ba8:	42ac      	cmp	r4, r5
   17baa:	d908      	bls.n	17bbe <init_mem_slab_module+0x1e>
   17bac:	4631      	mov	r1, r6
   17bae:	4814      	ldr	r0, [pc, #80]	; (17c00 <init_mem_slab_module+0x60>)
   17bb0:	2242      	movs	r2, #66	; 0x42
   17bb2:	f002 fd5b 	bl	1a66c <printk>
   17bb6:	2142      	movs	r1, #66	; 0x42
   17bb8:	4630      	mov	r0, r6
   17bba:	f002 fffd 	bl	1abb8 <assert_post_action>
   17bbe:	42ac      	cmp	r4, r5
   17bc0:	d301      	bcc.n	17bc6 <init_mem_slab_module+0x26>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   17bc2:	2000      	movs	r0, #0
	return rc;
}
   17bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   17bc6:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   17bca:	ea42 0301 	orr.w	r3, r2, r1
   17bce:	f013 0303 	ands.w	r3, r3, #3
   17bd2:	d10b      	bne.n	17bec <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   17bd4:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   17bd6:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   17bd8:	4283      	cmp	r3, r0
   17bda:	d101      	bne.n	17be0 <init_mem_slab_module+0x40>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   17bdc:	341c      	adds	r4, #28
   17bde:	e7e3      	b.n	17ba8 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   17be0:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   17be2:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   17be4:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   17be6:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   17be8:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   17bea:	e7f5      	b.n	17bd8 <init_mem_slab_module+0x38>
	return rc;
   17bec:	f06f 0015 	mvn.w	r0, #21
   17bf0:	e7e8      	b.n	17bc4 <init_mem_slab_module+0x24>
   17bf2:	bf00      	nop
   17bf4:	200085fc 	.word	0x200085fc
   17bf8:	20008650 	.word	0x20008650
   17bfc:	000229d5 	.word	0x000229d5
   17c00:	0001fbb7 	.word	0x0001fbb7

00017c04 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   17c04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17c08:	4604      	mov	r4, r0
   17c0a:	460d      	mov	r5, r1
   17c0c:	4617      	mov	r7, r2
   17c0e:	461e      	mov	r6, r3
	__asm__ volatile(
   17c10:	f04f 0320 	mov.w	r3, #32
   17c14:	f3ef 8811 	mrs	r8, BASEPRI
   17c18:	f383 8811 	msr	BASEPRI, r3
   17c1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17c20:	4821      	ldr	r0, [pc, #132]	; (17ca8 <k_mem_slab_alloc+0xa4>)
   17c22:	f001 fd37 	bl	19694 <z_spin_lock_valid>
   17c26:	b940      	cbnz	r0, 17c3a <k_mem_slab_alloc+0x36>
   17c28:	4920      	ldr	r1, [pc, #128]	; (17cac <k_mem_slab_alloc+0xa8>)
   17c2a:	4821      	ldr	r0, [pc, #132]	; (17cb0 <k_mem_slab_alloc+0xac>)
   17c2c:	227c      	movs	r2, #124	; 0x7c
   17c2e:	f002 fd1d 	bl	1a66c <printk>
   17c32:	217c      	movs	r1, #124	; 0x7c
   17c34:	481d      	ldr	r0, [pc, #116]	; (17cac <k_mem_slab_alloc+0xa8>)
   17c36:	f002 ffbf 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17c3a:	481b      	ldr	r0, [pc, #108]	; (17ca8 <k_mem_slab_alloc+0xa4>)
   17c3c:	f001 fd46 	bl	196cc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   17c40:	6963      	ldr	r3, [r4, #20]
   17c42:	b1c3      	cbz	r3, 17c76 <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   17c44:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   17c46:	681b      	ldr	r3, [r3, #0]
   17c48:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   17c4a:	69a3      	ldr	r3, [r4, #24]
   17c4c:	3301      	adds	r3, #1
   17c4e:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   17c50:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17c52:	4815      	ldr	r0, [pc, #84]	; (17ca8 <k_mem_slab_alloc+0xa4>)
   17c54:	f001 fd2c 	bl	196b0 <z_spin_unlock_valid>
   17c58:	b940      	cbnz	r0, 17c6c <k_mem_slab_alloc+0x68>
   17c5a:	4914      	ldr	r1, [pc, #80]	; (17cac <k_mem_slab_alloc+0xa8>)
   17c5c:	4814      	ldr	r0, [pc, #80]	; (17cb0 <k_mem_slab_alloc+0xac>)
   17c5e:	22a7      	movs	r2, #167	; 0xa7
   17c60:	f002 fd04 	bl	1a66c <printk>
   17c64:	21a7      	movs	r1, #167	; 0xa7
   17c66:	4811      	ldr	r0, [pc, #68]	; (17cac <k_mem_slab_alloc+0xa8>)
   17c68:	f002 ffa6 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   17c6c:	f388 8811 	msr	BASEPRI, r8
   17c70:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   17c74:	e013      	b.n	17c9e <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   17c76:	ea57 0206 	orrs.w	r2, r7, r6
   17c7a:	d103      	bne.n	17c84 <k_mem_slab_alloc+0x80>
		result = -ENOMEM;
   17c7c:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   17c80:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   17c82:	e7e6      	b.n	17c52 <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   17c84:	4622      	mov	r2, r4
   17c86:	4641      	mov	r1, r8
   17c88:	e9cd 7600 	strd	r7, r6, [sp]
   17c8c:	4806      	ldr	r0, [pc, #24]	; (17ca8 <k_mem_slab_alloc+0xa4>)
   17c8e:	f001 f8bd 	bl	18e0c <z_pend_curr>
		if (result == 0) {
   17c92:	4604      	mov	r4, r0
   17c94:	b918      	cbnz	r0, 17c9e <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   17c96:	4b07      	ldr	r3, [pc, #28]	; (17cb4 <k_mem_slab_alloc+0xb0>)
   17c98:	689b      	ldr	r3, [r3, #8]
   17c9a:	695b      	ldr	r3, [r3, #20]
   17c9c:	602b      	str	r3, [r5, #0]
}
   17c9e:	4620      	mov	r0, r4
   17ca0:	b002      	add	sp, #8
   17ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17ca6:	bf00      	nop
   17ca8:	2000b104 	.word	0x2000b104
   17cac:	0001fbf1 	.word	0x0001fbf1
   17cb0:	0001fbb7 	.word	0x0001fbb7
   17cb4:	2000b10c 	.word	0x2000b10c

00017cb8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   17cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17cba:	4604      	mov	r4, r0
   17cbc:	460d      	mov	r5, r1
	__asm__ volatile(
   17cbe:	f04f 0320 	mov.w	r3, #32
   17cc2:	f3ef 8611 	mrs	r6, BASEPRI
   17cc6:	f383 8811 	msr	BASEPRI, r3
   17cca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17cce:	481e      	ldr	r0, [pc, #120]	; (17d48 <k_mem_slab_free+0x90>)
   17cd0:	f001 fce0 	bl	19694 <z_spin_lock_valid>
   17cd4:	b940      	cbnz	r0, 17ce8 <k_mem_slab_free+0x30>
   17cd6:	491d      	ldr	r1, [pc, #116]	; (17d4c <k_mem_slab_free+0x94>)
   17cd8:	481d      	ldr	r0, [pc, #116]	; (17d50 <k_mem_slab_free+0x98>)
   17cda:	227c      	movs	r2, #124	; 0x7c
   17cdc:	f002 fcc6 	bl	1a66c <printk>
   17ce0:	217c      	movs	r1, #124	; 0x7c
   17ce2:	481a      	ldr	r0, [pc, #104]	; (17d4c <k_mem_slab_free+0x94>)
   17ce4:	f002 ff68 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17ce8:	4817      	ldr	r0, [pc, #92]	; (17d48 <k_mem_slab_free+0x90>)
   17cea:	f001 fcef 	bl	196cc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   17cee:	6967      	ldr	r7, [r4, #20]
   17cf0:	b97f      	cbnz	r7, 17d12 <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   17cf2:	4620      	mov	r0, r4
   17cf4:	f001 f92c 	bl	18f50 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   17cf8:	b158      	cbz	r0, 17d12 <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   17cfa:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   17cfc:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   17d00:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   17d02:	f000 fd19 	bl	18738 <z_ready_thread>
			z_reschedule(&lock, key);
   17d06:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   17d08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   17d0c:	480e      	ldr	r0, [pc, #56]	; (17d48 <k_mem_slab_free+0x90>)
   17d0e:	f000 bb3f 	b.w	18390 <z_reschedule>
	**(char ***) mem = slab->free_list;
   17d12:	682b      	ldr	r3, [r5, #0]
   17d14:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17d16:	480c      	ldr	r0, [pc, #48]	; (17d48 <k_mem_slab_free+0x90>)
   17d18:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   17d1a:	682b      	ldr	r3, [r5, #0]
   17d1c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   17d1e:	69a3      	ldr	r3, [r4, #24]
   17d20:	3b01      	subs	r3, #1
   17d22:	61a3      	str	r3, [r4, #24]
   17d24:	f001 fcc4 	bl	196b0 <z_spin_unlock_valid>
   17d28:	b940      	cbnz	r0, 17d3c <k_mem_slab_free+0x84>
   17d2a:	4908      	ldr	r1, [pc, #32]	; (17d4c <k_mem_slab_free+0x94>)
   17d2c:	4808      	ldr	r0, [pc, #32]	; (17d50 <k_mem_slab_free+0x98>)
   17d2e:	22a7      	movs	r2, #167	; 0xa7
   17d30:	f002 fc9c 	bl	1a66c <printk>
   17d34:	21a7      	movs	r1, #167	; 0xa7
   17d36:	4805      	ldr	r0, [pc, #20]	; (17d4c <k_mem_slab_free+0x94>)
   17d38:	f002 ff3e 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   17d3c:	f386 8811 	msr	BASEPRI, r6
   17d40:	f3bf 8f6f 	isb	sy
}
   17d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17d46:	bf00      	nop
   17d48:	2000b104 	.word	0x2000b104
   17d4c:	0001fbf1 	.word	0x0001fbf1
   17d50:	0001fbb7 	.word	0x0001fbb7

00017d54 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   17d54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17d58:	4604      	mov	r4, r0
   17d5a:	4617      	mov	r7, r2
   17d5c:	461e      	mov	r6, r3
   17d5e:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   17d62:	b143      	cbz	r3, 17d76 <z_impl_k_mutex_lock+0x22>
   17d64:	495c      	ldr	r1, [pc, #368]	; (17ed8 <z_impl_k_mutex_lock+0x184>)
   17d66:	485d      	ldr	r0, [pc, #372]	; (17edc <z_impl_k_mutex_lock+0x188>)
   17d68:	227d      	movs	r2, #125	; 0x7d
   17d6a:	f002 fc7f 	bl	1a66c <printk>
   17d6e:	217d      	movs	r1, #125	; 0x7d
   17d70:	4859      	ldr	r0, [pc, #356]	; (17ed8 <z_impl_k_mutex_lock+0x184>)
   17d72:	f002 ff21 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   17d76:	f04f 0320 	mov.w	r3, #32
   17d7a:	f3ef 8811 	mrs	r8, BASEPRI
   17d7e:	f383 8811 	msr	BASEPRI, r3
   17d82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17d86:	4856      	ldr	r0, [pc, #344]	; (17ee0 <z_impl_k_mutex_lock+0x18c>)
   17d88:	f001 fc84 	bl	19694 <z_spin_lock_valid>
   17d8c:	b940      	cbnz	r0, 17da0 <z_impl_k_mutex_lock+0x4c>
   17d8e:	4955      	ldr	r1, [pc, #340]	; (17ee4 <z_impl_k_mutex_lock+0x190>)
   17d90:	4852      	ldr	r0, [pc, #328]	; (17edc <z_impl_k_mutex_lock+0x188>)
   17d92:	227c      	movs	r2, #124	; 0x7c
   17d94:	f002 fc6a 	bl	1a66c <printk>
   17d98:	217c      	movs	r1, #124	; 0x7c
   17d9a:	4852      	ldr	r0, [pc, #328]	; (17ee4 <z_impl_k_mutex_lock+0x190>)
   17d9c:	f002 ff0c 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17da0:	484f      	ldr	r0, [pc, #316]	; (17ee0 <z_impl_k_mutex_lock+0x18c>)
   17da2:	f001 fc93 	bl	196cc <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   17da6:	68e3      	ldr	r3, [r4, #12]
   17da8:	4a4f      	ldr	r2, [pc, #316]	; (17ee8 <z_impl_k_mutex_lock+0x194>)
   17daa:	b1d3      	cbz	r3, 17de2 <z_impl_k_mutex_lock+0x8e>
   17dac:	68a0      	ldr	r0, [r4, #8]
   17dae:	6891      	ldr	r1, [r2, #8]
   17db0:	4288      	cmp	r0, r1
   17db2:	d033      	beq.n	17e1c <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   17db4:	ea57 0306 	orrs.w	r3, r7, r6
   17db8:	d132      	bne.n	17e20 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17dba:	4849      	ldr	r0, [pc, #292]	; (17ee0 <z_impl_k_mutex_lock+0x18c>)
   17dbc:	f001 fc78 	bl	196b0 <z_spin_unlock_valid>
   17dc0:	b940      	cbnz	r0, 17dd4 <z_impl_k_mutex_lock+0x80>
   17dc2:	4948      	ldr	r1, [pc, #288]	; (17ee4 <z_impl_k_mutex_lock+0x190>)
   17dc4:	4845      	ldr	r0, [pc, #276]	; (17edc <z_impl_k_mutex_lock+0x188>)
   17dc6:	22a7      	movs	r2, #167	; 0xa7
   17dc8:	f002 fc50 	bl	1a66c <printk>
   17dcc:	21a7      	movs	r1, #167	; 0xa7
   17dce:	4845      	ldr	r0, [pc, #276]	; (17ee4 <z_impl_k_mutex_lock+0x190>)
   17dd0:	f002 fef2 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   17dd4:	f388 8811 	msr	BASEPRI, r8
   17dd8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   17ddc:	f06f 000f 	mvn.w	r0, #15
   17de0:	e019      	b.n	17e16 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   17de2:	6891      	ldr	r1, [r2, #8]
   17de4:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   17de8:	3301      	adds	r3, #1
   17dea:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   17dec:	6893      	ldr	r3, [r2, #8]
   17dee:	483c      	ldr	r0, [pc, #240]	; (17ee0 <z_impl_k_mutex_lock+0x18c>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   17df0:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   17df2:	60a3      	str	r3, [r4, #8]
   17df4:	f001 fc5c 	bl	196b0 <z_spin_unlock_valid>
   17df8:	b940      	cbnz	r0, 17e0c <z_impl_k_mutex_lock+0xb8>
   17dfa:	493a      	ldr	r1, [pc, #232]	; (17ee4 <z_impl_k_mutex_lock+0x190>)
   17dfc:	4837      	ldr	r0, [pc, #220]	; (17edc <z_impl_k_mutex_lock+0x188>)
   17dfe:	22a7      	movs	r2, #167	; 0xa7
   17e00:	f002 fc34 	bl	1a66c <printk>
   17e04:	21a7      	movs	r1, #167	; 0xa7
   17e06:	4837      	ldr	r0, [pc, #220]	; (17ee4 <z_impl_k_mutex_lock+0x190>)
   17e08:	f002 fed6 	bl	1abb8 <assert_post_action>
   17e0c:	f388 8811 	msr	BASEPRI, r8
   17e10:	f3bf 8f6f 	isb	sy
		return 0;
   17e14:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   17e16:	b002      	add	sp, #8
   17e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   17e1c:	6921      	ldr	r1, [r4, #16]
   17e1e:	e7e3      	b.n	17de8 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   17e20:	f990 300e 	ldrsb.w	r3, [r0, #14]
   17e24:	f991 100e 	ldrsb.w	r1, [r1, #14]
   17e28:	4299      	cmp	r1, r3
   17e2a:	bfa8      	it	ge
   17e2c:	4619      	movge	r1, r3
   17e2e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   17e32:	4299      	cmp	r1, r3
   17e34:	da3b      	bge.n	17eae <z_impl_k_mutex_lock+0x15a>
		resched = adjust_owner_prio(mutex, new_prio);
   17e36:	f005 ffae 	bl	1dd96 <adjust_owner_prio.isra.0>
   17e3a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   17e3c:	4622      	mov	r2, r4
   17e3e:	4641      	mov	r1, r8
   17e40:	e9cd 7600 	strd	r7, r6, [sp]
   17e44:	4826      	ldr	r0, [pc, #152]	; (17ee0 <z_impl_k_mutex_lock+0x18c>)
   17e46:	f000 ffe1 	bl	18e0c <z_pend_curr>
	if (got_mutex == 0) {
   17e4a:	2800      	cmp	r0, #0
   17e4c:	d0e3      	beq.n	17e16 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   17e4e:	f04f 0320 	mov.w	r3, #32
   17e52:	f3ef 8611 	mrs	r6, BASEPRI
   17e56:	f383 8811 	msr	BASEPRI, r3
   17e5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17e5e:	4820      	ldr	r0, [pc, #128]	; (17ee0 <z_impl_k_mutex_lock+0x18c>)
   17e60:	f001 fc18 	bl	19694 <z_spin_lock_valid>
   17e64:	b940      	cbnz	r0, 17e78 <z_impl_k_mutex_lock+0x124>
   17e66:	491f      	ldr	r1, [pc, #124]	; (17ee4 <z_impl_k_mutex_lock+0x190>)
   17e68:	481c      	ldr	r0, [pc, #112]	; (17edc <z_impl_k_mutex_lock+0x188>)
   17e6a:	227c      	movs	r2, #124	; 0x7c
   17e6c:	f002 fbfe 	bl	1a66c <printk>
   17e70:	217c      	movs	r1, #124	; 0x7c
   17e72:	481c      	ldr	r0, [pc, #112]	; (17ee4 <z_impl_k_mutex_lock+0x190>)
   17e74:	f002 fea0 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17e78:	4819      	ldr	r0, [pc, #100]	; (17ee0 <z_impl_k_mutex_lock+0x18c>)
   17e7a:	f001 fc27 	bl	196cc <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   17e7e:	6823      	ldr	r3, [r4, #0]
   17e80:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17e82:	42a3      	cmp	r3, r4
   17e84:	d007      	beq.n	17e96 <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   17e86:	b133      	cbz	r3, 17e96 <z_impl_k_mutex_lock+0x142>
   17e88:	f993 300e 	ldrsb.w	r3, [r3, #14]
   17e8c:	4299      	cmp	r1, r3
   17e8e:	bfa8      	it	ge
   17e90:	4619      	movge	r1, r3
   17e92:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   17e96:	68a0      	ldr	r0, [r4, #8]
   17e98:	f005 ff7d 	bl	1dd96 <adjust_owner_prio.isra.0>
   17e9c:	b900      	cbnz	r0, 17ea0 <z_impl_k_mutex_lock+0x14c>
	if (resched) {
   17e9e:	b145      	cbz	r5, 17eb2 <z_impl_k_mutex_lock+0x15e>
		z_reschedule(&lock, key);
   17ea0:	4631      	mov	r1, r6
   17ea2:	480f      	ldr	r0, [pc, #60]	; (17ee0 <z_impl_k_mutex_lock+0x18c>)
   17ea4:	f000 fa74 	bl	18390 <z_reschedule>
	return -EAGAIN;
   17ea8:	f06f 000a 	mvn.w	r0, #10
   17eac:	e7b3      	b.n	17e16 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   17eae:	2500      	movs	r5, #0
   17eb0:	e7c4      	b.n	17e3c <z_impl_k_mutex_lock+0xe8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17eb2:	480b      	ldr	r0, [pc, #44]	; (17ee0 <z_impl_k_mutex_lock+0x18c>)
   17eb4:	f001 fbfc 	bl	196b0 <z_spin_unlock_valid>
   17eb8:	b940      	cbnz	r0, 17ecc <z_impl_k_mutex_lock+0x178>
   17eba:	490a      	ldr	r1, [pc, #40]	; (17ee4 <z_impl_k_mutex_lock+0x190>)
   17ebc:	4807      	ldr	r0, [pc, #28]	; (17edc <z_impl_k_mutex_lock+0x188>)
   17ebe:	22a7      	movs	r2, #167	; 0xa7
   17ec0:	f002 fbd4 	bl	1a66c <printk>
   17ec4:	21a7      	movs	r1, #167	; 0xa7
   17ec6:	4807      	ldr	r0, [pc, #28]	; (17ee4 <z_impl_k_mutex_lock+0x190>)
   17ec8:	f002 fe76 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   17ecc:	f386 8811 	msr	BASEPRI, r6
   17ed0:	f3bf 8f6f 	isb	sy
   17ed4:	e7e8      	b.n	17ea8 <z_impl_k_mutex_lock+0x154>
   17ed6:	bf00      	nop
   17ed8:	000229fa 	.word	0x000229fa
   17edc:	0001fbb7 	.word	0x0001fbb7
   17ee0:	2000b108 	.word	0x2000b108
   17ee4:	0001fbf1 	.word	0x0001fbf1
   17ee8:	2000b10c 	.word	0x2000b10c

00017eec <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   17eec:	b538      	push	{r3, r4, r5, lr}
   17eee:	4604      	mov	r4, r0
   17ef0:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   17ef4:	b143      	cbz	r3, 17f08 <z_impl_k_mutex_unlock+0x1c>
   17ef6:	4946      	ldr	r1, [pc, #280]	; (18010 <z_impl_k_mutex_unlock+0x124>)
   17ef8:	4846      	ldr	r0, [pc, #280]	; (18014 <z_impl_k_mutex_unlock+0x128>)
   17efa:	22d8      	movs	r2, #216	; 0xd8
   17efc:	f002 fbb6 	bl	1a66c <printk>
   17f00:	21d8      	movs	r1, #216	; 0xd8
   17f02:	4843      	ldr	r0, [pc, #268]	; (18010 <z_impl_k_mutex_unlock+0x124>)
   17f04:	f002 fe58 	bl	1abb8 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   17f08:	68a3      	ldr	r3, [r4, #8]
   17f0a:	2b00      	cmp	r3, #0
   17f0c:	d079      	beq.n	18002 <z_impl_k_mutex_unlock+0x116>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   17f0e:	4d42      	ldr	r5, [pc, #264]	; (18018 <z_impl_k_mutex_unlock+0x12c>)
   17f10:	68aa      	ldr	r2, [r5, #8]
   17f12:	4293      	cmp	r3, r2
   17f14:	d178      	bne.n	18008 <z_impl_k_mutex_unlock+0x11c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   17f16:	68e3      	ldr	r3, [r4, #12]
   17f18:	b943      	cbnz	r3, 17f2c <z_impl_k_mutex_unlock+0x40>
   17f1a:	493d      	ldr	r1, [pc, #244]	; (18010 <z_impl_k_mutex_unlock+0x124>)
   17f1c:	483d      	ldr	r0, [pc, #244]	; (18014 <z_impl_k_mutex_unlock+0x128>)
   17f1e:	22ea      	movs	r2, #234	; 0xea
   17f20:	f002 fba4 	bl	1a66c <printk>
   17f24:	21ea      	movs	r1, #234	; 0xea
   17f26:	483a      	ldr	r0, [pc, #232]	; (18010 <z_impl_k_mutex_unlock+0x124>)
   17f28:	f002 fe46 	bl	1abb8 <assert_post_action>
   17f2c:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   17f30:	b153      	cbz	r3, 17f48 <z_impl_k_mutex_unlock+0x5c>
   17f32:	493a      	ldr	r1, [pc, #232]	; (1801c <z_impl_k_mutex_unlock+0x130>)
   17f34:	4837      	ldr	r0, [pc, #220]	; (18014 <z_impl_k_mutex_unlock+0x128>)
   17f36:	f44f 7289 	mov.w	r2, #274	; 0x112
   17f3a:	f002 fb97 	bl	1a66c <printk>
   17f3e:	f44f 7189 	mov.w	r1, #274	; 0x112
   17f42:	4836      	ldr	r0, [pc, #216]	; (1801c <z_impl_k_mutex_unlock+0x130>)
   17f44:	f002 fe38 	bl	1abb8 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   17f48:	68ab      	ldr	r3, [r5, #8]
   17f4a:	7bdb      	ldrb	r3, [r3, #15]
   17f4c:	2b01      	cmp	r3, #1
   17f4e:	d10a      	bne.n	17f66 <z_impl_k_mutex_unlock+0x7a>
   17f50:	4932      	ldr	r1, [pc, #200]	; (1801c <z_impl_k_mutex_unlock+0x130>)
   17f52:	4830      	ldr	r0, [pc, #192]	; (18014 <z_impl_k_mutex_unlock+0x128>)
   17f54:	f240 1213 	movw	r2, #275	; 0x113
   17f58:	f002 fb88 	bl	1a66c <printk>
   17f5c:	f240 1113 	movw	r1, #275	; 0x113
   17f60:	482e      	ldr	r0, [pc, #184]	; (1801c <z_impl_k_mutex_unlock+0x130>)
   17f62:	f002 fe29 	bl	1abb8 <assert_post_action>

	--_current->base.sched_locked;
   17f66:	68aa      	ldr	r2, [r5, #8]
   17f68:	7bd3      	ldrb	r3, [r2, #15]
   17f6a:	3b01      	subs	r3, #1
   17f6c:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   17f6e:	68e3      	ldr	r3, [r4, #12]
   17f70:	2b01      	cmp	r3, #1
   17f72:	d005      	beq.n	17f80 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   17f74:	3b01      	subs	r3, #1
   17f76:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   17f78:	f000 fb38 	bl	185ec <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   17f7c:	2000      	movs	r0, #0
}
   17f7e:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   17f80:	f04f 0320 	mov.w	r3, #32
   17f84:	f3ef 8511 	mrs	r5, BASEPRI
   17f88:	f383 8811 	msr	BASEPRI, r3
   17f8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17f90:	4823      	ldr	r0, [pc, #140]	; (18020 <z_impl_k_mutex_unlock+0x134>)
   17f92:	f001 fb7f 	bl	19694 <z_spin_lock_valid>
   17f96:	b940      	cbnz	r0, 17faa <z_impl_k_mutex_unlock+0xbe>
   17f98:	4922      	ldr	r1, [pc, #136]	; (18024 <z_impl_k_mutex_unlock+0x138>)
   17f9a:	481e      	ldr	r0, [pc, #120]	; (18014 <z_impl_k_mutex_unlock+0x128>)
   17f9c:	227c      	movs	r2, #124	; 0x7c
   17f9e:	f002 fb65 	bl	1a66c <printk>
   17fa2:	217c      	movs	r1, #124	; 0x7c
   17fa4:	481f      	ldr	r0, [pc, #124]	; (18024 <z_impl_k_mutex_unlock+0x138>)
   17fa6:	f002 fe07 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   17faa:	481d      	ldr	r0, [pc, #116]	; (18020 <z_impl_k_mutex_unlock+0x134>)
   17fac:	f001 fb8e 	bl	196cc <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   17fb0:	6921      	ldr	r1, [r4, #16]
   17fb2:	68a0      	ldr	r0, [r4, #8]
   17fb4:	f005 feef 	bl	1dd96 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   17fb8:	4620      	mov	r0, r4
   17fba:	f000 ffc9 	bl	18f50 <z_unpend_first_thread>
	mutex->owner = new_owner;
   17fbe:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   17fc0:	b160      	cbz	r0, 17fdc <z_impl_k_mutex_unlock+0xf0>
		mutex->owner_orig_prio = new_owner->base.prio;
   17fc2:	f990 200e 	ldrsb.w	r2, [r0, #14]
   17fc6:	6122      	str	r2, [r4, #16]
   17fc8:	2200      	movs	r2, #0
   17fca:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   17fce:	f000 fbb3 	bl	18738 <z_ready_thread>
		z_reschedule(&lock, key);
   17fd2:	4629      	mov	r1, r5
   17fd4:	4812      	ldr	r0, [pc, #72]	; (18020 <z_impl_k_mutex_unlock+0x134>)
   17fd6:	f000 f9db 	bl	18390 <z_reschedule>
   17fda:	e7cd      	b.n	17f78 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   17fdc:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17fde:	4810      	ldr	r0, [pc, #64]	; (18020 <z_impl_k_mutex_unlock+0x134>)
   17fe0:	f001 fb66 	bl	196b0 <z_spin_unlock_valid>
   17fe4:	b940      	cbnz	r0, 17ff8 <z_impl_k_mutex_unlock+0x10c>
   17fe6:	490f      	ldr	r1, [pc, #60]	; (18024 <z_impl_k_mutex_unlock+0x138>)
   17fe8:	480a      	ldr	r0, [pc, #40]	; (18014 <z_impl_k_mutex_unlock+0x128>)
   17fea:	22a7      	movs	r2, #167	; 0xa7
   17fec:	f002 fb3e 	bl	1a66c <printk>
   17ff0:	21a7      	movs	r1, #167	; 0xa7
   17ff2:	480c      	ldr	r0, [pc, #48]	; (18024 <z_impl_k_mutex_unlock+0x138>)
   17ff4:	f002 fde0 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   17ff8:	f385 8811 	msr	BASEPRI, r5
   17ffc:	f3bf 8f6f 	isb	sy
   18000:	e7ba      	b.n	17f78 <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   18002:	f06f 0015 	mvn.w	r0, #21
   18006:	e7ba      	b.n	17f7e <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   18008:	f04f 30ff 	mov.w	r0, #4294967295
   1800c:	e7b7      	b.n	17f7e <z_impl_k_mutex_unlock+0x92>
   1800e:	bf00      	nop
   18010:	000229fa 	.word	0x000229fa
   18014:	0001fbb7 	.word	0x0001fbb7
   18018:	2000b10c 	.word	0x2000b10c
   1801c:	00022a1c 	.word	0x00022a1c
   18020:	2000b108 	.word	0x2000b108
   18024:	0001fbf1 	.word	0x0001fbf1

00018028 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   18028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1802c:	4604      	mov	r4, r0
   1802e:	460d      	mov	r5, r1
   18030:	4690      	mov	r8, r2
   18032:	4699      	mov	r9, r3
   18034:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18038:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1803c:	f04f 0320 	mov.w	r3, #32
   18040:	f3ef 8711 	mrs	r7, BASEPRI
   18044:	f383 8811 	msr	BASEPRI, r3
   18048:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1804c:	4630      	mov	r0, r6
   1804e:	f001 fb21 	bl	19694 <z_spin_lock_valid>
   18052:	b940      	cbnz	r0, 18066 <queue_insert+0x3e>
   18054:	4937      	ldr	r1, [pc, #220]	; (18134 <queue_insert+0x10c>)
   18056:	4838      	ldr	r0, [pc, #224]	; (18138 <queue_insert+0x110>)
   18058:	227c      	movs	r2, #124	; 0x7c
   1805a:	f002 fb07 	bl	1a66c <printk>
   1805e:	217c      	movs	r1, #124	; 0x7c
   18060:	4834      	ldr	r0, [pc, #208]	; (18134 <queue_insert+0x10c>)
   18062:	f002 fda9 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18066:	4630      	mov	r0, r6
   18068:	f001 fb30 	bl	196cc <z_spin_lock_set_owner>

	if (is_append) {
   1806c:	f1ba 0f00 	cmp.w	sl, #0
   18070:	d000      	beq.n	18074 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   18072:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   18074:	f104 000c 	add.w	r0, r4, #12
   18078:	f000 ff6a 	bl	18f50 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   1807c:	b160      	cbz	r0, 18098 <queue_insert+0x70>
   1807e:	2400      	movs	r4, #0
   18080:	f8c0 8014 	str.w	r8, [r0, #20]
   18084:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   18088:	f000 fb56 	bl	18738 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   1808c:	4630      	mov	r0, r6
   1808e:	4639      	mov	r1, r7
   18090:	f000 f97e 	bl	18390 <z_reschedule>
	return 0;
   18094:	2000      	movs	r0, #0
   18096:	e019      	b.n	180cc <queue_insert+0xa4>
	if (alloc) {
   18098:	f1b9 0f00 	cmp.w	r9, #0
   1809c:	d028      	beq.n	180f0 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   1809e:	2108      	movs	r1, #8
   180a0:	f002 fa12 	bl	1a4c8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   180a4:	b9a0      	cbnz	r0, 180d0 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   180a6:	4630      	mov	r0, r6
   180a8:	f001 fb02 	bl	196b0 <z_spin_unlock_valid>
   180ac:	b940      	cbnz	r0, 180c0 <queue_insert+0x98>
   180ae:	4921      	ldr	r1, [pc, #132]	; (18134 <queue_insert+0x10c>)
   180b0:	4821      	ldr	r0, [pc, #132]	; (18138 <queue_insert+0x110>)
   180b2:	22a7      	movs	r2, #167	; 0xa7
   180b4:	f002 fada 	bl	1a66c <printk>
   180b8:	21a7      	movs	r1, #167	; 0xa7
   180ba:	481e      	ldr	r0, [pc, #120]	; (18134 <queue_insert+0x10c>)
   180bc:	f002 fd7c 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   180c0:	f387 8811 	msr	BASEPRI, r7
   180c4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   180c8:	f06f 000b 	mvn.w	r0, #11
}
   180cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   180d0:	2301      	movs	r3, #1
		anode->data = data;
   180d2:	f8c0 8004 	str.w	r8, [r0, #4]
   180d6:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   180d8:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   180da:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   180de:	b95d      	cbnz	r5, 180f8 <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   180e0:	6823      	ldr	r3, [r4, #0]
   180e2:	4313      	orrs	r3, r2
   180e4:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   180e6:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   180e8:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   180ea:	b973      	cbnz	r3, 1810a <queue_insert+0xe2>
	list->tail = node;
   180ec:	6060      	str	r0, [r4, #4]
}
   180ee:	e00c      	b.n	1810a <queue_insert+0xe2>
}
   180f0:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   180f2:	f8c8 9000 	str.w	r9, [r8]
}
   180f6:	e7ef      	b.n	180d8 <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   180f8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   180fa:	f033 0303 	bics.w	r3, r3, #3
   180fe:	d110      	bne.n	18122 <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   18100:	6002      	str	r2, [r0, #0]
	return list->tail;
   18102:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   18104:	b93a      	cbnz	r2, 18116 <queue_insert+0xee>
	list->head = node;
   18106:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1810a:	2104      	movs	r1, #4
   1810c:	f104 0014 	add.w	r0, r4, #20
   18110:	f005 ffb0 	bl	1e074 <z_handle_obj_poll_events>
   18114:	e7ba      	b.n	1808c <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18116:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   18118:	f003 0303 	and.w	r3, r3, #3
   1811c:	4303      	orrs	r3, r0
   1811e:	6013      	str	r3, [r2, #0]
   18120:	e7e4      	b.n	180ec <queue_insert+0xc4>
   18122:	4313      	orrs	r3, r2
   18124:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   18126:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   18128:	f003 0303 	and.w	r3, r3, #3
   1812c:	4303      	orrs	r3, r0
   1812e:	602b      	str	r3, [r5, #0]
}
   18130:	e7eb      	b.n	1810a <queue_insert+0xe2>
   18132:	bf00      	nop
   18134:	0001fbf1 	.word	0x0001fbf1
   18138:	0001fbb7 	.word	0x0001fbb7

0001813c <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   1813c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18140:	4605      	mov	r5, r0
   18142:	4616      	mov	r6, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   18144:	460c      	mov	r4, r1
   18146:	2900      	cmp	r1, #0
   18148:	d045      	beq.n	181d6 <k_queue_append_list+0x9a>
   1814a:	2a00      	cmp	r2, #0
   1814c:	d043      	beq.n	181d6 <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1814e:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   18152:	f04f 0320 	mov.w	r3, #32
   18156:	f3ef 8911 	mrs	r9, BASEPRI
   1815a:	f383 8811 	msr	BASEPRI, r3
   1815e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18162:	4638      	mov	r0, r7
   18164:	f001 fa96 	bl	19694 <z_spin_lock_valid>
   18168:	b940      	cbnz	r0, 1817c <k_queue_append_list+0x40>
   1816a:	491c      	ldr	r1, [pc, #112]	; (181dc <k_queue_append_list+0xa0>)
   1816c:	481c      	ldr	r0, [pc, #112]	; (181e0 <k_queue_append_list+0xa4>)
   1816e:	227c      	movs	r2, #124	; 0x7c
   18170:	f002 fa7c 	bl	1a66c <printk>
   18174:	217c      	movs	r1, #124	; 0x7c
   18176:	4819      	ldr	r0, [pc, #100]	; (181dc <k_queue_append_list+0xa0>)
   18178:	f002 fd1e 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1817c:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   1817e:	f105 080c 	add.w	r8, r5, #12
   18182:	f001 faa3 	bl	196cc <z_spin_lock_set_owner>
   18186:	4640      	mov	r0, r8
   18188:	f000 fee2 	bl	18f50 <z_unpend_first_thread>
   1818c:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   18190:	b920      	cbnz	r0, 1819c <k_queue_append_list+0x60>
	return list->tail;
   18192:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   18194:	b9ca      	cbnz	r2, 181ca <k_queue_append_list+0x8e>
	list->head = node;
   18196:	602c      	str	r4, [r5, #0]
	list->tail = node;
   18198:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1819a:	e00a      	b.n	181b2 <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   1819c:	6144      	str	r4, [r0, #20]
   1819e:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   181a2:	f000 fac9 	bl	18738 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   181a6:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   181a8:	4640      	mov	r0, r8
   181aa:	f000 fed1 	bl	18f50 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   181ae:	2c00      	cmp	r4, #0
   181b0:	d1ee      	bne.n	18190 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   181b2:	2104      	movs	r1, #4
   181b4:	f105 0014 	add.w	r0, r5, #20
   181b8:	f005 ff5c 	bl	1e074 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   181bc:	4638      	mov	r0, r7
   181be:	4649      	mov	r1, r9
   181c0:	f000 f8e6 	bl	18390 <z_reschedule>
	return 0;
   181c4:	2000      	movs	r0, #0
}
   181c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   181ca:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   181cc:	f003 0303 	and.w	r3, r3, #3
   181d0:	431c      	orrs	r4, r3
   181d2:	6014      	str	r4, [r2, #0]
}
   181d4:	e7e0      	b.n	18198 <k_queue_append_list+0x5c>
		return -EINVAL;
   181d6:	f06f 0015 	mvn.w	r0, #21
   181da:	e7f4      	b.n	181c6 <k_queue_append_list+0x8a>
   181dc:	0001fbf1 	.word	0x0001fbf1
   181e0:	0001fbb7 	.word	0x0001fbb7

000181e4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   181e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   181e8:	4605      	mov	r5, r0
   181ea:	4690      	mov	r8, r2
   181ec:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   181ee:	f100 0608 	add.w	r6, r0, #8
   181f2:	f04f 0320 	mov.w	r3, #32
   181f6:	f3ef 8911 	mrs	r9, BASEPRI
   181fa:	f383 8811 	msr	BASEPRI, r3
   181fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18202:	4630      	mov	r0, r6
   18204:	f001 fa46 	bl	19694 <z_spin_lock_valid>
   18208:	b940      	cbnz	r0, 1821c <z_impl_k_queue_get+0x38>
   1820a:	4921      	ldr	r1, [pc, #132]	; (18290 <z_impl_k_queue_get+0xac>)
   1820c:	4821      	ldr	r0, [pc, #132]	; (18294 <z_impl_k_queue_get+0xb0>)
   1820e:	227c      	movs	r2, #124	; 0x7c
   18210:	f002 fa2c 	bl	1a66c <printk>
   18214:	217c      	movs	r1, #124	; 0x7c
   18216:	481e      	ldr	r0, [pc, #120]	; (18290 <z_impl_k_queue_get+0xac>)
   18218:	f002 fcce 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1821c:	4630      	mov	r0, r6
   1821e:	f001 fa55 	bl	196cc <z_spin_lock_set_owner>
	return list->head;
   18222:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   18224:	b314      	cbz	r4, 1826c <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18226:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18228:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1822a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1822e:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   18230:	4620      	mov	r0, r4
   18232:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   18236:	602b      	str	r3, [r5, #0]
	list->tail = node;
   18238:	bf08      	it	eq
   1823a:	606b      	streq	r3, [r5, #4]
   1823c:	f005 fdba 	bl	1ddb4 <z_queue_node_peek>
   18240:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18242:	4630      	mov	r0, r6
   18244:	f001 fa34 	bl	196b0 <z_spin_unlock_valid>
   18248:	b940      	cbnz	r0, 1825c <z_impl_k_queue_get+0x78>
   1824a:	4911      	ldr	r1, [pc, #68]	; (18290 <z_impl_k_queue_get+0xac>)
   1824c:	4811      	ldr	r0, [pc, #68]	; (18294 <z_impl_k_queue_get+0xb0>)
   1824e:	22a7      	movs	r2, #167	; 0xa7
   18250:	f002 fa0c 	bl	1a66c <printk>
   18254:	21a7      	movs	r1, #167	; 0xa7
   18256:	480e      	ldr	r0, [pc, #56]	; (18290 <z_impl_k_queue_get+0xac>)
   18258:	f002 fcae 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   1825c:	f389 8811 	msr	BASEPRI, r9
   18260:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   18264:	4620      	mov	r0, r4
   18266:	b003      	add	sp, #12
   18268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1826c:	ea58 0307 	orrs.w	r3, r8, r7
   18270:	d0e7      	beq.n	18242 <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   18272:	4649      	mov	r1, r9
   18274:	4630      	mov	r0, r6
   18276:	e9cd 8700 	strd	r8, r7, [sp]
   1827a:	f105 020c 	add.w	r2, r5, #12
   1827e:	f000 fdc5 	bl	18e0c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   18282:	2800      	cmp	r0, #0
   18284:	d1ee      	bne.n	18264 <z_impl_k_queue_get+0x80>
   18286:	4b04      	ldr	r3, [pc, #16]	; (18298 <z_impl_k_queue_get+0xb4>)
   18288:	689b      	ldr	r3, [r3, #8]
   1828a:	695c      	ldr	r4, [r3, #20]
   1828c:	e7ea      	b.n	18264 <z_impl_k_queue_get+0x80>
   1828e:	bf00      	nop
   18290:	0001fbf1 	.word	0x0001fbf1
   18294:	0001fbb7 	.word	0x0001fbb7
   18298:	2000b10c 	.word	0x2000b10c

0001829c <pended_on>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   1829c:	6883      	ldr	r3, [r0, #8]
{
   1829e:	b510      	push	{r4, lr}
   182a0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   182a2:	b953      	cbnz	r3, 182ba <pended_on+0x1e>
   182a4:	4906      	ldr	r1, [pc, #24]	; (182c0 <pended_on+0x24>)
   182a6:	4807      	ldr	r0, [pc, #28]	; (182c4 <pended_on+0x28>)
   182a8:	f44f 7201 	mov.w	r2, #516	; 0x204
   182ac:	f002 f9de 	bl	1a66c <printk>
   182b0:	f44f 7101 	mov.w	r1, #516	; 0x204
   182b4:	4802      	ldr	r0, [pc, #8]	; (182c0 <pended_on+0x24>)
   182b6:	f002 fc7f 	bl	1abb8 <assert_post_action>

	return thread->base.pended_on;
}
   182ba:	68a0      	ldr	r0, [r4, #8]
   182bc:	bd10      	pop	{r4, pc}
   182be:	bf00      	nop
   182c0:	00022a47 	.word	0x00022a47
   182c4:	0001fbb7 	.word	0x0001fbb7

000182c8 <z_reset_time_slice>:
{
   182c8:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   182ca:	4c08      	ldr	r4, [pc, #32]	; (182ec <z_reset_time_slice+0x24>)
   182cc:	6823      	ldr	r3, [r4, #0]
   182ce:	b15b      	cbz	r3, 182e8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   182d0:	f7f3 ffc2 	bl	c258 <z_clock_elapsed>
   182d4:	4603      	mov	r3, r0
   182d6:	6820      	ldr	r0, [r4, #0]
   182d8:	4a05      	ldr	r2, [pc, #20]	; (182f0 <z_reset_time_slice+0x28>)
   182da:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   182dc:	2100      	movs	r1, #0
}
   182de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   182e2:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   182e4:	f001 bc8c 	b.w	19c00 <z_set_timeout_expiry>
}
   182e8:	bd10      	pop	{r4, pc}
   182ea:	bf00      	nop
   182ec:	2000b14c 	.word	0x2000b14c
   182f0:	2000b10c 	.word	0x2000b10c

000182f4 <k_sched_time_slice_set>:
{
   182f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   182f6:	4604      	mov	r4, r0
   182f8:	460d      	mov	r5, r1
	__asm__ volatile(
   182fa:	f04f 0320 	mov.w	r3, #32
   182fe:	f3ef 8711 	mrs	r7, BASEPRI
   18302:	f383 8811 	msr	BASEPRI, r3
   18306:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1830a:	481b      	ldr	r0, [pc, #108]	; (18378 <k_sched_time_slice_set+0x84>)
   1830c:	f001 f9c2 	bl	19694 <z_spin_lock_valid>
   18310:	b940      	cbnz	r0, 18324 <k_sched_time_slice_set+0x30>
   18312:	491a      	ldr	r1, [pc, #104]	; (1837c <k_sched_time_slice_set+0x88>)
   18314:	481a      	ldr	r0, [pc, #104]	; (18380 <k_sched_time_slice_set+0x8c>)
   18316:	227c      	movs	r2, #124	; 0x7c
   18318:	f002 f9a8 	bl	1a66c <printk>
   1831c:	217c      	movs	r1, #124	; 0x7c
   1831e:	4817      	ldr	r0, [pc, #92]	; (1837c <k_sched_time_slice_set+0x88>)
   18320:	f002 fc4a 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18324:	4814      	ldr	r0, [pc, #80]	; (18378 <k_sched_time_slice_set+0x84>)
   18326:	f001 f9d1 	bl	196cc <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1832a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   1832e:	2100      	movs	r1, #0
   18330:	f240 30e7 	movw	r0, #999	; 0x3e7
   18334:	4b13      	ldr	r3, [pc, #76]	; (18384 <k_sched_time_slice_set+0x90>)
   18336:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1833a:	6159      	str	r1, [r3, #20]
   1833c:	2300      	movs	r3, #0
   1833e:	fbe4 0106 	umlal	r0, r1, r4, r6
   18342:	f7f0 fbf3 	bl	8b2c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   18346:	4b10      	ldr	r3, [pc, #64]	; (18388 <k_sched_time_slice_set+0x94>)
   18348:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1834a:	4b10      	ldr	r3, [pc, #64]	; (1838c <k_sched_time_slice_set+0x98>)
   1834c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1834e:	f7ff ffbb 	bl	182c8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18352:	4809      	ldr	r0, [pc, #36]	; (18378 <k_sched_time_slice_set+0x84>)
   18354:	f001 f9ac 	bl	196b0 <z_spin_unlock_valid>
   18358:	b940      	cbnz	r0, 1836c <k_sched_time_slice_set+0x78>
   1835a:	4908      	ldr	r1, [pc, #32]	; (1837c <k_sched_time_slice_set+0x88>)
   1835c:	4808      	ldr	r0, [pc, #32]	; (18380 <k_sched_time_slice_set+0x8c>)
   1835e:	22a7      	movs	r2, #167	; 0xa7
   18360:	f002 f984 	bl	1a66c <printk>
   18364:	21a7      	movs	r1, #167	; 0xa7
   18366:	4805      	ldr	r0, [pc, #20]	; (1837c <k_sched_time_slice_set+0x88>)
   18368:	f002 fc26 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   1836c:	f387 8811 	msr	BASEPRI, r7
   18370:	f3bf 8f6f 	isb	sy
}
   18374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18376:	bf00      	nop
   18378:	2000b144 	.word	0x2000b144
   1837c:	0001fbf1 	.word	0x0001fbf1
   18380:	0001fbb7 	.word	0x0001fbb7
   18384:	2000b10c 	.word	0x2000b10c
   18388:	2000b14c 	.word	0x2000b14c
   1838c:	2000b148 	.word	0x2000b148

00018390 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   18390:	b510      	push	{r4, lr}
   18392:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18394:	460c      	mov	r4, r1
   18396:	b9c1      	cbnz	r1, 183ca <z_reschedule+0x3a>
   18398:	f3ef 8205 	mrs	r2, IPSR
   1839c:	b9aa      	cbnz	r2, 183ca <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   1839e:	4a14      	ldr	r2, [pc, #80]	; (183f0 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   183a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
   183a2:	6892      	ldr	r2, [r2, #8]
   183a4:	4291      	cmp	r1, r2
   183a6:	d010      	beq.n	183ca <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   183a8:	f001 f982 	bl	196b0 <z_spin_unlock_valid>
   183ac:	b940      	cbnz	r0, 183c0 <z_reschedule+0x30>
   183ae:	4911      	ldr	r1, [pc, #68]	; (183f4 <z_reschedule+0x64>)
   183b0:	4811      	ldr	r0, [pc, #68]	; (183f8 <z_reschedule+0x68>)
   183b2:	22be      	movs	r2, #190	; 0xbe
   183b4:	f002 f95a 	bl	1a66c <printk>
   183b8:	21be      	movs	r1, #190	; 0xbe
   183ba:	480e      	ldr	r0, [pc, #56]	; (183f4 <z_reschedule+0x64>)
   183bc:	f002 fbfc 	bl	1abb8 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   183c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   183c4:	2000      	movs	r0, #0
   183c6:	f7f5 b9a9 	b.w	d71c <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   183ca:	4618      	mov	r0, r3
   183cc:	f001 f970 	bl	196b0 <z_spin_unlock_valid>
   183d0:	b940      	cbnz	r0, 183e4 <z_reschedule+0x54>
   183d2:	4908      	ldr	r1, [pc, #32]	; (183f4 <z_reschedule+0x64>)
   183d4:	4808      	ldr	r0, [pc, #32]	; (183f8 <z_reschedule+0x68>)
   183d6:	22a7      	movs	r2, #167	; 0xa7
   183d8:	f002 f948 	bl	1a66c <printk>
   183dc:	21a7      	movs	r1, #167	; 0xa7
   183de:	4805      	ldr	r0, [pc, #20]	; (183f4 <z_reschedule+0x64>)
   183e0:	f002 fbea 	bl	1abb8 <assert_post_action>
   183e4:	f384 8811 	msr	BASEPRI, r4
   183e8:	f3bf 8f6f 	isb	sy
   183ec:	bd10      	pop	{r4, pc}
   183ee:	bf00      	nop
   183f0:	2000b10c 	.word	0x2000b10c
   183f4:	0001fbf1 	.word	0x0001fbf1
   183f8:	0001fbb7 	.word	0x0001fbb7

000183fc <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   183fc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   183fe:	f04f 0320 	mov.w	r3, #32
   18402:	f3ef 8511 	mrs	r5, BASEPRI
   18406:	f383 8811 	msr	BASEPRI, r3
   1840a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1840e:	4822      	ldr	r0, [pc, #136]	; (18498 <k_sched_lock+0x9c>)
   18410:	f001 f940 	bl	19694 <z_spin_lock_valid>
   18414:	b940      	cbnz	r0, 18428 <k_sched_lock+0x2c>
   18416:	4921      	ldr	r1, [pc, #132]	; (1849c <k_sched_lock+0xa0>)
   18418:	4821      	ldr	r0, [pc, #132]	; (184a0 <k_sched_lock+0xa4>)
   1841a:	227c      	movs	r2, #124	; 0x7c
   1841c:	f002 f926 	bl	1a66c <printk>
   18420:	217c      	movs	r1, #124	; 0x7c
   18422:	481e      	ldr	r0, [pc, #120]	; (1849c <k_sched_lock+0xa0>)
   18424:	f002 fbc8 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18428:	481b      	ldr	r0, [pc, #108]	; (18498 <k_sched_lock+0x9c>)
   1842a:	f001 f94f 	bl	196cc <z_spin_lock_set_owner>
   1842e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   18432:	b153      	cbz	r3, 1844a <k_sched_lock+0x4e>
   18434:	491b      	ldr	r1, [pc, #108]	; (184a4 <k_sched_lock+0xa8>)
   18436:	481a      	ldr	r0, [pc, #104]	; (184a0 <k_sched_lock+0xa4>)
   18438:	f44f 7289 	mov.w	r2, #274	; 0x112
   1843c:	f002 f916 	bl	1a66c <printk>
   18440:	f44f 7189 	mov.w	r1, #274	; 0x112
   18444:	4817      	ldr	r0, [pc, #92]	; (184a4 <k_sched_lock+0xa8>)
   18446:	f002 fbb7 	bl	1abb8 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   1844a:	4c17      	ldr	r4, [pc, #92]	; (184a8 <k_sched_lock+0xac>)
   1844c:	68a3      	ldr	r3, [r4, #8]
   1844e:	7bdb      	ldrb	r3, [r3, #15]
   18450:	2b01      	cmp	r3, #1
   18452:	d10a      	bne.n	1846a <k_sched_lock+0x6e>
   18454:	4913      	ldr	r1, [pc, #76]	; (184a4 <k_sched_lock+0xa8>)
   18456:	4812      	ldr	r0, [pc, #72]	; (184a0 <k_sched_lock+0xa4>)
   18458:	f240 1213 	movw	r2, #275	; 0x113
   1845c:	f002 f906 	bl	1a66c <printk>
   18460:	f240 1113 	movw	r1, #275	; 0x113
   18464:	480f      	ldr	r0, [pc, #60]	; (184a4 <k_sched_lock+0xa8>)
   18466:	f002 fba7 	bl	1abb8 <assert_post_action>
	--_current->base.sched_locked;
   1846a:	68a2      	ldr	r2, [r4, #8]
   1846c:	7bd3      	ldrb	r3, [r2, #15]
   1846e:	3b01      	subs	r3, #1
   18470:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18472:	4809      	ldr	r0, [pc, #36]	; (18498 <k_sched_lock+0x9c>)
   18474:	f001 f91c 	bl	196b0 <z_spin_unlock_valid>
   18478:	b940      	cbnz	r0, 1848c <k_sched_lock+0x90>
   1847a:	4908      	ldr	r1, [pc, #32]	; (1849c <k_sched_lock+0xa0>)
   1847c:	4808      	ldr	r0, [pc, #32]	; (184a0 <k_sched_lock+0xa4>)
   1847e:	22a7      	movs	r2, #167	; 0xa7
   18480:	f002 f8f4 	bl	1a66c <printk>
   18484:	21a7      	movs	r1, #167	; 0xa7
   18486:	4805      	ldr	r0, [pc, #20]	; (1849c <k_sched_lock+0xa0>)
   18488:	f002 fb96 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   1848c:	f385 8811 	msr	BASEPRI, r5
   18490:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   18494:	bd38      	pop	{r3, r4, r5, pc}
   18496:	bf00      	nop
   18498:	2000b144 	.word	0x2000b144
   1849c:	0001fbf1 	.word	0x0001fbf1
   184a0:	0001fbb7 	.word	0x0001fbb7
   184a4:	00022a1c 	.word	0x00022a1c
   184a8:	2000b10c 	.word	0x2000b10c

000184ac <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   184ac:	4b11      	ldr	r3, [pc, #68]	; (184f4 <z_priq_dumb_remove+0x48>)
{
   184ae:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   184b0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   184b4:	4282      	cmp	r2, r0
{
   184b6:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   184b8:	d105      	bne.n	184c6 <z_priq_dumb_remove+0x1a>
   184ba:	689b      	ldr	r3, [r3, #8]
   184bc:	428b      	cmp	r3, r1
   184be:	d102      	bne.n	184c6 <z_priq_dumb_remove+0x1a>
   184c0:	7b4b      	ldrb	r3, [r1, #13]
   184c2:	06db      	lsls	r3, r3, #27
   184c4:	d114      	bne.n	184f0 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   184c6:	4b0c      	ldr	r3, [pc, #48]	; (184f8 <z_priq_dumb_remove+0x4c>)
   184c8:	429c      	cmp	r4, r3
   184ca:	d10a      	bne.n	184e2 <z_priq_dumb_remove+0x36>
   184cc:	490b      	ldr	r1, [pc, #44]	; (184fc <z_priq_dumb_remove+0x50>)
   184ce:	480c      	ldr	r0, [pc, #48]	; (18500 <z_priq_dumb_remove+0x54>)
   184d0:	f240 32da 	movw	r2, #986	; 0x3da
   184d4:	f002 f8ca 	bl	1a66c <printk>
   184d8:	f240 31da 	movw	r1, #986	; 0x3da
   184dc:	4807      	ldr	r0, [pc, #28]	; (184fc <z_priq_dumb_remove+0x50>)
   184de:	f002 fb6b 	bl	1abb8 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   184e2:	e9d4 3200 	ldrd	r3, r2, [r4]
   184e6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   184e8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   184ea:	2300      	movs	r3, #0
	node->prev = NULL;
   184ec:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   184f0:	bd10      	pop	{r4, pc}
   184f2:	bf00      	nop
   184f4:	2000b10c 	.word	0x2000b10c
   184f8:	2000a440 	.word	0x2000a440
   184fc:	00022a47 	.word	0x00022a47
   18500:	0001fbb7 	.word	0x0001fbb7

00018504 <z_unpend_thread>:
{
   18504:	b538      	push	{r3, r4, r5, lr}
   18506:	4604      	mov	r4, r0
	__asm__ volatile(
   18508:	f04f 0320 	mov.w	r3, #32
   1850c:	f3ef 8511 	mrs	r5, BASEPRI
   18510:	f383 8811 	msr	BASEPRI, r3
   18514:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18518:	4814      	ldr	r0, [pc, #80]	; (1856c <z_unpend_thread+0x68>)
   1851a:	f001 f8bb 	bl	19694 <z_spin_lock_valid>
   1851e:	b940      	cbnz	r0, 18532 <z_unpend_thread+0x2e>
   18520:	4913      	ldr	r1, [pc, #76]	; (18570 <z_unpend_thread+0x6c>)
   18522:	4814      	ldr	r0, [pc, #80]	; (18574 <z_unpend_thread+0x70>)
   18524:	227c      	movs	r2, #124	; 0x7c
   18526:	f002 f8a1 	bl	1a66c <printk>
   1852a:	217c      	movs	r1, #124	; 0x7c
   1852c:	4810      	ldr	r0, [pc, #64]	; (18570 <z_unpend_thread+0x6c>)
   1852e:	f002 fb43 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18532:	480e      	ldr	r0, [pc, #56]	; (1856c <z_unpend_thread+0x68>)
   18534:	f001 f8ca 	bl	196cc <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   18538:	4620      	mov	r0, r4
   1853a:	f005 fc88 	bl	1de4e <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1853e:	480b      	ldr	r0, [pc, #44]	; (1856c <z_unpend_thread+0x68>)
   18540:	f001 f8b6 	bl	196b0 <z_spin_unlock_valid>
   18544:	b940      	cbnz	r0, 18558 <z_unpend_thread+0x54>
   18546:	490a      	ldr	r1, [pc, #40]	; (18570 <z_unpend_thread+0x6c>)
   18548:	480a      	ldr	r0, [pc, #40]	; (18574 <z_unpend_thread+0x70>)
   1854a:	22a7      	movs	r2, #167	; 0xa7
   1854c:	f002 f88e 	bl	1a66c <printk>
   18550:	21a7      	movs	r1, #167	; 0xa7
   18552:	4807      	ldr	r0, [pc, #28]	; (18570 <z_unpend_thread+0x6c>)
   18554:	f002 fb30 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   18558:	f385 8811 	msr	BASEPRI, r5
   1855c:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   18560:	f104 0018 	add.w	r0, r4, #24
}
   18564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18568:	f001 bad8 	b.w	19b1c <z_abort_timeout>
   1856c:	2000b144 	.word	0x2000b144
   18570:	0001fbf1 	.word	0x0001fbf1
   18574:	0001fbb7 	.word	0x0001fbb7

00018578 <update_cache>:
{
   18578:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current != NULL, "");
   1857a:	4c19      	ldr	r4, [pc, #100]	; (185e0 <update_cache+0x68>)
{
   1857c:	4602      	mov	r2, r0
	if (_current_cpu->pending_abort != NULL) {
   1857e:	6923      	ldr	r3, [r4, #16]
	__ASSERT(_current != NULL, "");
   18580:	68a1      	ldr	r1, [r4, #8]
	if (_current_cpu->pending_abort != NULL) {
   18582:	b143      	cbz	r3, 18596 <update_cache+0x1e>
		return _current_cpu->idle_thread;
   18584:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   18586:	b1a8      	cbz	r0, 185b4 <update_cache+0x3c>
		if (thread != _current) {
   18588:	68a3      	ldr	r3, [r4, #8]
   1858a:	42ab      	cmp	r3, r5
   1858c:	d001      	beq.n	18592 <update_cache+0x1a>
			z_reset_time_slice();
   1858e:	f7ff fe9b 	bl	182c8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   18592:	62a5      	str	r5, [r4, #40]	; 0x28
}
   18594:	e023      	b.n	185de <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   18596:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1859a:	f005 fc66 	bl	1de6a <z_priq_dumb_best>
   1859e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   185a0:	7b4b      	ldrb	r3, [r1, #13]
   185a2:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   185a4:	bf44      	itt	mi
   185a6:	f043 0308 	orrmi.w	r3, r3, #8
   185aa:	734b      	strbmi	r3, [r1, #13]
	return thread ? thread : _current_cpu->idle_thread;
   185ac:	b905      	cbnz	r5, 185b0 <update_cache+0x38>
   185ae:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   185b0:	b152      	cbz	r2, 185c8 <update_cache+0x50>
   185b2:	e7e9      	b.n	18588 <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   185b4:	b941      	cbnz	r1, 185c8 <update_cache+0x50>
   185b6:	490b      	ldr	r1, [pc, #44]	; (185e4 <update_cache+0x6c>)
   185b8:	480b      	ldr	r0, [pc, #44]	; (185e8 <update_cache+0x70>)
   185ba:	2283      	movs	r2, #131	; 0x83
   185bc:	f002 f856 	bl	1a66c <printk>
   185c0:	2183      	movs	r1, #131	; 0x83
   185c2:	4808      	ldr	r0, [pc, #32]	; (185e4 <update_cache+0x6c>)
   185c4:	f002 faf8 	bl	1abb8 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   185c8:	68a3      	ldr	r3, [r4, #8]
   185ca:	7b5a      	ldrb	r2, [r3, #13]
   185cc:	06d2      	lsls	r2, r2, #27
   185ce:	d1db      	bne.n	18588 <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   185d0:	69aa      	ldr	r2, [r5, #24]
   185d2:	2a00      	cmp	r2, #0
   185d4:	d1d8      	bne.n	18588 <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   185d6:	89da      	ldrh	r2, [r3, #14]
   185d8:	2a7f      	cmp	r2, #127	; 0x7f
   185da:	d9d5      	bls.n	18588 <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   185dc:	62a3      	str	r3, [r4, #40]	; 0x28
}
   185de:	bd38      	pop	{r3, r4, r5, pc}
   185e0:	2000b10c 	.word	0x2000b10c
   185e4:	00022a47 	.word	0x00022a47
   185e8:	0001fbb7 	.word	0x0001fbb7

000185ec <k_sched_unlock>:
{
   185ec:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   185ee:	f04f 0320 	mov.w	r3, #32
   185f2:	f3ef 8511 	mrs	r5, BASEPRI
   185f6:	f383 8811 	msr	BASEPRI, r3
   185fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   185fe:	4824      	ldr	r0, [pc, #144]	; (18690 <k_sched_unlock+0xa4>)
   18600:	f001 f848 	bl	19694 <z_spin_lock_valid>
   18604:	b940      	cbnz	r0, 18618 <k_sched_unlock+0x2c>
   18606:	4923      	ldr	r1, [pc, #140]	; (18694 <k_sched_unlock+0xa8>)
   18608:	4823      	ldr	r0, [pc, #140]	; (18698 <k_sched_unlock+0xac>)
   1860a:	227c      	movs	r2, #124	; 0x7c
   1860c:	f002 f82e 	bl	1a66c <printk>
   18610:	217c      	movs	r1, #124	; 0x7c
   18612:	4820      	ldr	r0, [pc, #128]	; (18694 <k_sched_unlock+0xa8>)
   18614:	f002 fad0 	bl	1abb8 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   18618:	4c20      	ldr	r4, [pc, #128]	; (1869c <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   1861a:	481d      	ldr	r0, [pc, #116]	; (18690 <k_sched_unlock+0xa4>)
   1861c:	f001 f856 	bl	196cc <z_spin_lock_set_owner>
   18620:	68a3      	ldr	r3, [r4, #8]
   18622:	7bdb      	ldrb	r3, [r3, #15]
   18624:	b953      	cbnz	r3, 1863c <k_sched_unlock+0x50>
   18626:	491e      	ldr	r1, [pc, #120]	; (186a0 <k_sched_unlock+0xb4>)
   18628:	481b      	ldr	r0, [pc, #108]	; (18698 <k_sched_unlock+0xac>)
   1862a:	f44f 725d 	mov.w	r2, #884	; 0x374
   1862e:	f002 f81d 	bl	1a66c <printk>
   18632:	f44f 715d 	mov.w	r1, #884	; 0x374
   18636:	481a      	ldr	r0, [pc, #104]	; (186a0 <k_sched_unlock+0xb4>)
   18638:	f002 fabe 	bl	1abb8 <assert_post_action>
   1863c:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   18640:	b153      	cbz	r3, 18658 <k_sched_unlock+0x6c>
   18642:	4917      	ldr	r1, [pc, #92]	; (186a0 <k_sched_unlock+0xb4>)
   18644:	4814      	ldr	r0, [pc, #80]	; (18698 <k_sched_unlock+0xac>)
   18646:	f240 3275 	movw	r2, #885	; 0x375
   1864a:	f002 f80f 	bl	1a66c <printk>
   1864e:	f240 3175 	movw	r1, #885	; 0x375
   18652:	4813      	ldr	r0, [pc, #76]	; (186a0 <k_sched_unlock+0xb4>)
   18654:	f002 fab0 	bl	1abb8 <assert_post_action>
		++_current->base.sched_locked;
   18658:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   1865a:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   1865c:	7bd3      	ldrb	r3, [r2, #15]
   1865e:	3301      	adds	r3, #1
   18660:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   18662:	f7ff ff89 	bl	18578 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18666:	480a      	ldr	r0, [pc, #40]	; (18690 <k_sched_unlock+0xa4>)
   18668:	f001 f822 	bl	196b0 <z_spin_unlock_valid>
   1866c:	b940      	cbnz	r0, 18680 <k_sched_unlock+0x94>
   1866e:	4909      	ldr	r1, [pc, #36]	; (18694 <k_sched_unlock+0xa8>)
   18670:	4809      	ldr	r0, [pc, #36]	; (18698 <k_sched_unlock+0xac>)
   18672:	22a7      	movs	r2, #167	; 0xa7
   18674:	f001 fffa 	bl	1a66c <printk>
   18678:	21a7      	movs	r1, #167	; 0xa7
   1867a:	4806      	ldr	r0, [pc, #24]	; (18694 <k_sched_unlock+0xa8>)
   1867c:	f002 fa9c 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   18680:	f385 8811 	msr	BASEPRI, r5
   18684:	f3bf 8f6f 	isb	sy
}
   18688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   1868c:	f005 bbd5 	b.w	1de3a <z_reschedule_unlocked>
   18690:	2000b144 	.word	0x2000b144
   18694:	0001fbf1 	.word	0x0001fbf1
   18698:	0001fbb7 	.word	0x0001fbb7
   1869c:	2000b10c 	.word	0x2000b10c
   186a0:	00022a47 	.word	0x00022a47

000186a4 <ready_thread>:
{
   186a4:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   186a6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   186aa:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   186ac:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   186ae:	7b43      	ldrb	r3, [r0, #13]
   186b0:	db39      	blt.n	18726 <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   186b2:	06db      	lsls	r3, r3, #27
   186b4:	d137      	bne.n	18726 <ready_thread+0x82>
   186b6:	6983      	ldr	r3, [r0, #24]
   186b8:	2b00      	cmp	r3, #0
   186ba:	d134      	bne.n	18726 <ready_thread+0x82>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   186bc:	4b1a      	ldr	r3, [pc, #104]	; (18728 <ready_thread+0x84>)
   186be:	4298      	cmp	r0, r3
   186c0:	d10a      	bne.n	186d8 <ready_thread+0x34>
   186c2:	491a      	ldr	r1, [pc, #104]	; (1872c <ready_thread+0x88>)
   186c4:	481a      	ldr	r0, [pc, #104]	; (18730 <ready_thread+0x8c>)
   186c6:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   186ca:	f001 ffcf 	bl	1a66c <printk>
   186ce:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   186d2:	4816      	ldr	r0, [pc, #88]	; (1872c <ready_thread+0x88>)
   186d4:	f002 fa70 	bl	1abb8 <assert_post_action>
	return list->head == list;
   186d8:	4a16      	ldr	r2, [pc, #88]	; (18734 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   186da:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   186de:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   186e2:	4283      	cmp	r3, r0
   186e4:	d019      	beq.n	1871a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   186e6:	b1c3      	cbz	r3, 1871a <ready_thread+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   186e8:	f994 500e 	ldrsb.w	r5, [r4, #14]
   186ec:	f993 600e 	ldrsb.w	r6, [r3, #14]
   186f0:	42ae      	cmp	r6, r5
   186f2:	dd0d      	ble.n	18710 <ready_thread+0x6c>
	node->prev = successor->prev;
   186f4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   186f6:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   186fa:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   186fc:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   186fe:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   18700:	2000      	movs	r0, #0
   18702:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18706:	7363      	strb	r3, [r4, #13]
}
   18708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   1870c:	f7ff bf34 	b.w	18578 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18710:	428b      	cmp	r3, r1
   18712:	d002      	beq.n	1871a <ready_thread+0x76>
   18714:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18716:	2b00      	cmp	r3, #0
   18718:	d1e8      	bne.n	186ec <ready_thread+0x48>
	node->prev = list->tail;
   1871a:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   1871e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18720:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18722:	6314      	str	r4, [r2, #48]	; 0x30
}
   18724:	e7eb      	b.n	186fe <ready_thread+0x5a>
}
   18726:	bd70      	pop	{r4, r5, r6, pc}
   18728:	2000a440 	.word	0x2000a440
   1872c:	00022a47 	.word	0x00022a47
   18730:	0001fbb7 	.word	0x0001fbb7
   18734:	2000b10c 	.word	0x2000b10c

00018738 <z_ready_thread>:
{
   18738:	b538      	push	{r3, r4, r5, lr}
   1873a:	4604      	mov	r4, r0
	__asm__ volatile(
   1873c:	f04f 0320 	mov.w	r3, #32
   18740:	f3ef 8511 	mrs	r5, BASEPRI
   18744:	f383 8811 	msr	BASEPRI, r3
   18748:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1874c:	4812      	ldr	r0, [pc, #72]	; (18798 <z_ready_thread+0x60>)
   1874e:	f000 ffa1 	bl	19694 <z_spin_lock_valid>
   18752:	b940      	cbnz	r0, 18766 <z_ready_thread+0x2e>
   18754:	4911      	ldr	r1, [pc, #68]	; (1879c <z_ready_thread+0x64>)
   18756:	4812      	ldr	r0, [pc, #72]	; (187a0 <z_ready_thread+0x68>)
   18758:	227c      	movs	r2, #124	; 0x7c
   1875a:	f001 ff87 	bl	1a66c <printk>
   1875e:	217c      	movs	r1, #124	; 0x7c
   18760:	480e      	ldr	r0, [pc, #56]	; (1879c <z_ready_thread+0x64>)
   18762:	f002 fa29 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18766:	480c      	ldr	r0, [pc, #48]	; (18798 <z_ready_thread+0x60>)
   18768:	f000 ffb0 	bl	196cc <z_spin_lock_set_owner>
		ready_thread(thread);
   1876c:	4620      	mov	r0, r4
   1876e:	f7ff ff99 	bl	186a4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18772:	4809      	ldr	r0, [pc, #36]	; (18798 <z_ready_thread+0x60>)
   18774:	f000 ff9c 	bl	196b0 <z_spin_unlock_valid>
   18778:	b940      	cbnz	r0, 1878c <z_ready_thread+0x54>
   1877a:	4908      	ldr	r1, [pc, #32]	; (1879c <z_ready_thread+0x64>)
   1877c:	4808      	ldr	r0, [pc, #32]	; (187a0 <z_ready_thread+0x68>)
   1877e:	22a7      	movs	r2, #167	; 0xa7
   18780:	f001 ff74 	bl	1a66c <printk>
   18784:	21a7      	movs	r1, #167	; 0xa7
   18786:	4805      	ldr	r0, [pc, #20]	; (1879c <z_ready_thread+0x64>)
   18788:	f002 fa16 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   1878c:	f385 8811 	msr	BASEPRI, r5
   18790:	f3bf 8f6f 	isb	sy
}
   18794:	bd38      	pop	{r3, r4, r5, pc}
   18796:	bf00      	nop
   18798:	2000b144 	.word	0x2000b144
   1879c:	0001fbf1 	.word	0x0001fbf1
   187a0:	0001fbb7 	.word	0x0001fbb7

000187a4 <z_sched_start>:
{
   187a4:	b538      	push	{r3, r4, r5, lr}
   187a6:	4604      	mov	r4, r0
	__asm__ volatile(
   187a8:	f04f 0320 	mov.w	r3, #32
   187ac:	f3ef 8511 	mrs	r5, BASEPRI
   187b0:	f383 8811 	msr	BASEPRI, r3
   187b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   187b8:	4818      	ldr	r0, [pc, #96]	; (1881c <z_sched_start+0x78>)
   187ba:	f000 ff6b 	bl	19694 <z_spin_lock_valid>
   187be:	b940      	cbnz	r0, 187d2 <z_sched_start+0x2e>
   187c0:	4917      	ldr	r1, [pc, #92]	; (18820 <z_sched_start+0x7c>)
   187c2:	4818      	ldr	r0, [pc, #96]	; (18824 <z_sched_start+0x80>)
   187c4:	227c      	movs	r2, #124	; 0x7c
   187c6:	f001 ff51 	bl	1a66c <printk>
   187ca:	217c      	movs	r1, #124	; 0x7c
   187cc:	4814      	ldr	r0, [pc, #80]	; (18820 <z_sched_start+0x7c>)
   187ce:	f002 f9f3 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   187d2:	4812      	ldr	r0, [pc, #72]	; (1881c <z_sched_start+0x78>)
   187d4:	f000 ff7a 	bl	196cc <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   187d8:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   187da:	075a      	lsls	r2, r3, #29
   187dc:	d411      	bmi.n	18802 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   187de:	480f      	ldr	r0, [pc, #60]	; (1881c <z_sched_start+0x78>)
   187e0:	f000 ff66 	bl	196b0 <z_spin_unlock_valid>
   187e4:	b940      	cbnz	r0, 187f8 <z_sched_start+0x54>
   187e6:	490e      	ldr	r1, [pc, #56]	; (18820 <z_sched_start+0x7c>)
   187e8:	480e      	ldr	r0, [pc, #56]	; (18824 <z_sched_start+0x80>)
   187ea:	22a7      	movs	r2, #167	; 0xa7
   187ec:	f001 ff3e 	bl	1a66c <printk>
   187f0:	21a7      	movs	r1, #167	; 0xa7
   187f2:	480b      	ldr	r0, [pc, #44]	; (18820 <z_sched_start+0x7c>)
   187f4:	f002 f9e0 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   187f8:	f385 8811 	msr	BASEPRI, r5
   187fc:	f3bf 8f6f 	isb	sy
}
   18800:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18802:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   18806:	4620      	mov	r0, r4
   18808:	7363      	strb	r3, [r4, #13]
   1880a:	f7ff ff4b 	bl	186a4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1880e:	4629      	mov	r1, r5
}
   18810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   18814:	4801      	ldr	r0, [pc, #4]	; (1881c <z_sched_start+0x78>)
   18816:	f7ff bdbb 	b.w	18390 <z_reschedule>
   1881a:	bf00      	nop
   1881c:	2000b144 	.word	0x2000b144
   18820:	0001fbf1 	.word	0x0001fbf1
   18824:	0001fbb7 	.word	0x0001fbb7

00018828 <z_thread_timeout>:
{
   18828:	b570      	push	{r4, r5, r6, lr}
   1882a:	4604      	mov	r4, r0
	__asm__ volatile(
   1882c:	f04f 0320 	mov.w	r3, #32
   18830:	f3ef 8611 	mrs	r6, BASEPRI
   18834:	f383 8811 	msr	BASEPRI, r3
   18838:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1883c:	4819      	ldr	r0, [pc, #100]	; (188a4 <z_thread_timeout+0x7c>)
   1883e:	f000 ff29 	bl	19694 <z_spin_lock_valid>
   18842:	b940      	cbnz	r0, 18856 <z_thread_timeout+0x2e>
   18844:	4918      	ldr	r1, [pc, #96]	; (188a8 <z_thread_timeout+0x80>)
   18846:	4819      	ldr	r0, [pc, #100]	; (188ac <z_thread_timeout+0x84>)
   18848:	227c      	movs	r2, #124	; 0x7c
   1884a:	f001 ff0f 	bl	1a66c <printk>
   1884e:	217c      	movs	r1, #124	; 0x7c
   18850:	4815      	ldr	r0, [pc, #84]	; (188a8 <z_thread_timeout+0x80>)
   18852:	f002 f9b1 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18856:	4813      	ldr	r0, [pc, #76]	; (188a4 <z_thread_timeout+0x7c>)
   18858:	f000 ff38 	bl	196cc <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   1885c:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   18860:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   18864:	b113      	cbz	r3, 1886c <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   18866:	4628      	mov	r0, r5
   18868:	f005 faf1 	bl	1de4e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1886c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   18870:	4628      	mov	r0, r5
   18872:	f023 0314 	bic.w	r3, r3, #20
   18876:	f804 3c0b 	strb.w	r3, [r4, #-11]
   1887a:	f7ff ff13 	bl	186a4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1887e:	4809      	ldr	r0, [pc, #36]	; (188a4 <z_thread_timeout+0x7c>)
   18880:	f000 ff16 	bl	196b0 <z_spin_unlock_valid>
   18884:	b940      	cbnz	r0, 18898 <z_thread_timeout+0x70>
   18886:	4908      	ldr	r1, [pc, #32]	; (188a8 <z_thread_timeout+0x80>)
   18888:	4808      	ldr	r0, [pc, #32]	; (188ac <z_thread_timeout+0x84>)
   1888a:	22a7      	movs	r2, #167	; 0xa7
   1888c:	f001 feee 	bl	1a66c <printk>
   18890:	21a7      	movs	r1, #167	; 0xa7
   18892:	4805      	ldr	r0, [pc, #20]	; (188a8 <z_thread_timeout+0x80>)
   18894:	f002 f990 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   18898:	f386 8811 	msr	BASEPRI, r6
   1889c:	f3bf 8f6f 	isb	sy
}
   188a0:	bd70      	pop	{r4, r5, r6, pc}
   188a2:	bf00      	nop
   188a4:	2000b144 	.word	0x2000b144
   188a8:	0001fbf1 	.word	0x0001fbf1
   188ac:	0001fbb7 	.word	0x0001fbb7

000188b0 <move_thread_to_end_of_prio_q>:
{
   188b0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   188b2:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   188b6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   188b8:	2b00      	cmp	r3, #0
   188ba:	da03      	bge.n	188c4 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   188bc:	4601      	mov	r1, r0
   188be:	481d      	ldr	r0, [pc, #116]	; (18934 <move_thread_to_end_of_prio_q+0x84>)
   188c0:	f7ff fdf4 	bl	184ac <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   188c4:	4b1c      	ldr	r3, [pc, #112]	; (18938 <move_thread_to_end_of_prio_q+0x88>)
   188c6:	429c      	cmp	r4, r3
   188c8:	d10a      	bne.n	188e0 <move_thread_to_end_of_prio_q+0x30>
   188ca:	491c      	ldr	r1, [pc, #112]	; (1893c <move_thread_to_end_of_prio_q+0x8c>)
   188cc:	481c      	ldr	r0, [pc, #112]	; (18940 <move_thread_to_end_of_prio_q+0x90>)
   188ce:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   188d2:	f001 fecb 	bl	1a66c <printk>
   188d6:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   188da:	4818      	ldr	r0, [pc, #96]	; (1893c <move_thread_to_end_of_prio_q+0x8c>)
   188dc:	f002 f96c 	bl	1abb8 <assert_post_action>
	return list->head == list;
   188e0:	4a18      	ldr	r2, [pc, #96]	; (18944 <move_thread_to_end_of_prio_q+0x94>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   188e2:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   188e6:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   188ea:	4283      	cmp	r3, r0
   188ec:	d01c      	beq.n	18928 <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   188ee:	b1db      	cbz	r3, 18928 <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   188f0:	f994 500e 	ldrsb.w	r5, [r4, #14]
   188f4:	f993 600e 	ldrsb.w	r6, [r3, #14]
   188f8:	42ae      	cmp	r6, r5
   188fa:	dd10      	ble.n	1891e <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   188fc:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   188fe:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   18902:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   18904:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   18906:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   18908:	6890      	ldr	r0, [r2, #8]
   1890a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1890e:	7363      	strb	r3, [r4, #13]
   18910:	1b03      	subs	r3, r0, r4
   18912:	4258      	negs	r0, r3
   18914:	4158      	adcs	r0, r3
}
   18916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1891a:	f7ff be2d 	b.w	18578 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1891e:	428b      	cmp	r3, r1
   18920:	d002      	beq.n	18928 <move_thread_to_end_of_prio_q+0x78>
   18922:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18924:	2b00      	cmp	r3, #0
   18926:	d1e5      	bne.n	188f4 <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   18928:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   1892c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1892e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18930:	6314      	str	r4, [r2, #48]	; 0x30
}
   18932:	e7e8      	b.n	18906 <move_thread_to_end_of_prio_q+0x56>
   18934:	2000b138 	.word	0x2000b138
   18938:	2000a440 	.word	0x2000a440
   1893c:	00022a47 	.word	0x00022a47
   18940:	0001fbb7 	.word	0x0001fbb7
   18944:	2000b10c 	.word	0x2000b10c

00018948 <z_time_slice>:
{
   18948:	b538      	push	{r3, r4, r5, lr}
   1894a:	4604      	mov	r4, r0
	__asm__ volatile(
   1894c:	f04f 0320 	mov.w	r3, #32
   18950:	f3ef 8511 	mrs	r5, BASEPRI
   18954:	f383 8811 	msr	BASEPRI, r3
   18958:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1895c:	4824      	ldr	r0, [pc, #144]	; (189f0 <z_time_slice+0xa8>)
   1895e:	f000 fe99 	bl	19694 <z_spin_lock_valid>
   18962:	b940      	cbnz	r0, 18976 <z_time_slice+0x2e>
   18964:	4923      	ldr	r1, [pc, #140]	; (189f4 <z_time_slice+0xac>)
   18966:	4824      	ldr	r0, [pc, #144]	; (189f8 <z_time_slice+0xb0>)
   18968:	227c      	movs	r2, #124	; 0x7c
   1896a:	f001 fe7f 	bl	1a66c <printk>
   1896e:	217c      	movs	r1, #124	; 0x7c
   18970:	4820      	ldr	r0, [pc, #128]	; (189f4 <z_time_slice+0xac>)
   18972:	f002 f921 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18976:	481e      	ldr	r0, [pc, #120]	; (189f0 <z_time_slice+0xa8>)
   18978:	f000 fea8 	bl	196cc <z_spin_lock_set_owner>
	if (pending_current == _current) {
   1897c:	4b1f      	ldr	r3, [pc, #124]	; (189fc <z_time_slice+0xb4>)
   1897e:	4a20      	ldr	r2, [pc, #128]	; (18a00 <z_time_slice+0xb8>)
   18980:	6898      	ldr	r0, [r3, #8]
   18982:	6811      	ldr	r1, [r2, #0]
   18984:	4288      	cmp	r0, r1
   18986:	d113      	bne.n	189b0 <z_time_slice+0x68>
			z_reset_time_slice();
   18988:	f7ff fc9e 	bl	182c8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1898c:	4818      	ldr	r0, [pc, #96]	; (189f0 <z_time_slice+0xa8>)
   1898e:	f000 fe8f 	bl	196b0 <z_spin_unlock_valid>
   18992:	b940      	cbnz	r0, 189a6 <z_time_slice+0x5e>
   18994:	4917      	ldr	r1, [pc, #92]	; (189f4 <z_time_slice+0xac>)
   18996:	4818      	ldr	r0, [pc, #96]	; (189f8 <z_time_slice+0xb0>)
   18998:	22a7      	movs	r2, #167	; 0xa7
   1899a:	f001 fe67 	bl	1a66c <printk>
   1899e:	21a7      	movs	r1, #167	; 0xa7
   189a0:	4814      	ldr	r0, [pc, #80]	; (189f4 <z_time_slice+0xac>)
   189a2:	f002 f909 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   189a6:	f385 8811 	msr	BASEPRI, r5
   189aa:	f3bf 8f6f 	isb	sy
}
   189ae:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   189b0:	2100      	movs	r1, #0
   189b2:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   189b4:	4a13      	ldr	r2, [pc, #76]	; (18a04 <z_time_slice+0xbc>)
   189b6:	6812      	ldr	r2, [r2, #0]
   189b8:	b1ba      	cbz	r2, 189ea <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   189ba:	89c2      	ldrh	r2, [r0, #14]
   189bc:	2a7f      	cmp	r2, #127	; 0x7f
   189be:	d814      	bhi.n	189ea <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   189c0:	7b42      	ldrb	r2, [r0, #13]
   189c2:	06d2      	lsls	r2, r2, #27
   189c4:	d111      	bne.n	189ea <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   189c6:	4a10      	ldr	r2, [pc, #64]	; (18a08 <z_time_slice+0xc0>)
   189c8:	f990 100e 	ldrsb.w	r1, [r0, #14]
   189cc:	6812      	ldr	r2, [r2, #0]
   189ce:	4291      	cmp	r1, r2
   189d0:	db0b      	blt.n	189ea <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   189d2:	4a0e      	ldr	r2, [pc, #56]	; (18a0c <z_time_slice+0xc4>)
   189d4:	4290      	cmp	r0, r2
   189d6:	d008      	beq.n	189ea <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   189d8:	695a      	ldr	r2, [r3, #20]
   189da:	42a2      	cmp	r2, r4
   189dc:	dc02      	bgt.n	189e4 <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   189de:	f7ff ff67 	bl	188b0 <move_thread_to_end_of_prio_q>
   189e2:	e7d1      	b.n	18988 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   189e4:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   189e6:	615a      	str	r2, [r3, #20]
   189e8:	e7d0      	b.n	1898c <z_time_slice+0x44>
   189ea:	2200      	movs	r2, #0
   189ec:	e7fb      	b.n	189e6 <z_time_slice+0x9e>
   189ee:	bf00      	nop
   189f0:	2000b144 	.word	0x2000b144
   189f4:	0001fbf1 	.word	0x0001fbf1
   189f8:	0001fbb7 	.word	0x0001fbb7
   189fc:	2000b10c 	.word	0x2000b10c
   18a00:	2000b140 	.word	0x2000b140
   18a04:	2000b14c 	.word	0x2000b14c
   18a08:	2000b148 	.word	0x2000b148
   18a0c:	2000a440 	.word	0x2000a440

00018a10 <z_impl_k_thread_suspend>:
{
   18a10:	b570      	push	{r4, r5, r6, lr}
   18a12:	4604      	mov	r4, r0
   18a14:	3018      	adds	r0, #24
   18a16:	f001 f881 	bl	19b1c <z_abort_timeout>
	__asm__ volatile(
   18a1a:	f04f 0320 	mov.w	r3, #32
   18a1e:	f3ef 8611 	mrs	r6, BASEPRI
   18a22:	f383 8811 	msr	BASEPRI, r3
   18a26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18a2a:	4820      	ldr	r0, [pc, #128]	; (18aac <z_impl_k_thread_suspend+0x9c>)
   18a2c:	f000 fe32 	bl	19694 <z_spin_lock_valid>
   18a30:	b940      	cbnz	r0, 18a44 <z_impl_k_thread_suspend+0x34>
   18a32:	491f      	ldr	r1, [pc, #124]	; (18ab0 <z_impl_k_thread_suspend+0xa0>)
   18a34:	481f      	ldr	r0, [pc, #124]	; (18ab4 <z_impl_k_thread_suspend+0xa4>)
   18a36:	227c      	movs	r2, #124	; 0x7c
   18a38:	f001 fe18 	bl	1a66c <printk>
   18a3c:	217c      	movs	r1, #124	; 0x7c
   18a3e:	481c      	ldr	r0, [pc, #112]	; (18ab0 <z_impl_k_thread_suspend+0xa0>)
   18a40:	f002 f8ba 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18a44:	4819      	ldr	r0, [pc, #100]	; (18aac <z_impl_k_thread_suspend+0x9c>)
   18a46:	f000 fe41 	bl	196cc <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   18a4a:	f994 300d 	ldrsb.w	r3, [r4, #13]
   18a4e:	2b00      	cmp	r3, #0
   18a50:	da07      	bge.n	18a62 <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   18a52:	4621      	mov	r1, r4
   18a54:	4818      	ldr	r0, [pc, #96]	; (18ab8 <z_impl_k_thread_suspend+0xa8>)
   18a56:	f7ff fd29 	bl	184ac <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18a5a:	7b63      	ldrb	r3, [r4, #13]
   18a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18a60:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   18a62:	4d16      	ldr	r5, [pc, #88]	; (18abc <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18a64:	7b63      	ldrb	r3, [r4, #13]
   18a66:	68a8      	ldr	r0, [r5, #8]
   18a68:	f043 0310 	orr.w	r3, r3, #16
   18a6c:	7363      	strb	r3, [r4, #13]
   18a6e:	1b03      	subs	r3, r0, r4
   18a70:	4258      	negs	r0, r3
   18a72:	4158      	adcs	r0, r3
   18a74:	f7ff fd80 	bl	18578 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18a78:	480c      	ldr	r0, [pc, #48]	; (18aac <z_impl_k_thread_suspend+0x9c>)
   18a7a:	f000 fe19 	bl	196b0 <z_spin_unlock_valid>
   18a7e:	b940      	cbnz	r0, 18a92 <z_impl_k_thread_suspend+0x82>
   18a80:	490b      	ldr	r1, [pc, #44]	; (18ab0 <z_impl_k_thread_suspend+0xa0>)
   18a82:	480c      	ldr	r0, [pc, #48]	; (18ab4 <z_impl_k_thread_suspend+0xa4>)
   18a84:	22a7      	movs	r2, #167	; 0xa7
   18a86:	f001 fdf1 	bl	1a66c <printk>
   18a8a:	21a7      	movs	r1, #167	; 0xa7
   18a8c:	4808      	ldr	r0, [pc, #32]	; (18ab0 <z_impl_k_thread_suspend+0xa0>)
   18a8e:	f002 f893 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   18a92:	f386 8811 	msr	BASEPRI, r6
   18a96:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   18a9a:	68ab      	ldr	r3, [r5, #8]
   18a9c:	42a3      	cmp	r3, r4
   18a9e:	d103      	bne.n	18aa8 <z_impl_k_thread_suspend+0x98>
}
   18aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   18aa4:	f005 b9c9 	b.w	1de3a <z_reschedule_unlocked>
}
   18aa8:	bd70      	pop	{r4, r5, r6, pc}
   18aaa:	bf00      	nop
   18aac:	2000b144 	.word	0x2000b144
   18ab0:	0001fbf1 	.word	0x0001fbf1
   18ab4:	0001fbb7 	.word	0x0001fbb7
   18ab8:	2000b138 	.word	0x2000b138
   18abc:	2000b10c 	.word	0x2000b10c

00018ac0 <z_thread_single_abort>:
{
   18ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   18ac4:	7b03      	ldrb	r3, [r0, #12]
{
   18ac6:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   18ac8:	07dd      	lsls	r5, r3, #31
   18aca:	d50a      	bpl.n	18ae2 <z_thread_single_abort+0x22>
   18acc:	4976      	ldr	r1, [pc, #472]	; (18ca8 <z_thread_single_abort+0x1e8>)
   18ace:	4877      	ldr	r0, [pc, #476]	; (18cac <z_thread_single_abort+0x1ec>)
   18ad0:	f240 220d 	movw	r2, #525	; 0x20d
   18ad4:	f001 fdca 	bl	1a66c <printk>
   18ad8:	f240 210d 	movw	r1, #525	; 0x20d
   18adc:	4872      	ldr	r0, [pc, #456]	; (18ca8 <z_thread_single_abort+0x1e8>)
   18ade:	f002 f86b 	bl	1abb8 <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   18ae2:	4e73      	ldr	r6, [pc, #460]	; (18cb0 <z_thread_single_abort+0x1f0>)
   18ae4:	68b3      	ldr	r3, [r6, #8]
   18ae6:	42a3      	cmp	r3, r4
   18ae8:	d10d      	bne.n	18b06 <z_thread_single_abort+0x46>
   18aea:	f3ef 8305 	mrs	r3, IPSR
   18aee:	b953      	cbnz	r3, 18b06 <z_thread_single_abort+0x46>
   18af0:	496d      	ldr	r1, [pc, #436]	; (18ca8 <z_thread_single_abort+0x1e8>)
   18af2:	486e      	ldr	r0, [pc, #440]	; (18cac <z_thread_single_abort+0x1ec>)
   18af4:	f240 220f 	movw	r2, #527	; 0x20f
   18af8:	f001 fdb8 	bl	1a66c <printk>
   18afc:	f240 210f 	movw	r1, #527	; 0x20f
   18b00:	4869      	ldr	r0, [pc, #420]	; (18ca8 <z_thread_single_abort+0x1e8>)
   18b02:	f002 f859 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   18b06:	f04f 0320 	mov.w	r3, #32
   18b0a:	f3ef 8511 	mrs	r5, BASEPRI
   18b0e:	f383 8811 	msr	BASEPRI, r3
   18b12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18b16:	4867      	ldr	r0, [pc, #412]	; (18cb4 <z_thread_single_abort+0x1f4>)
   18b18:	f000 fdbc 	bl	19694 <z_spin_lock_valid>
   18b1c:	b940      	cbnz	r0, 18b30 <z_thread_single_abort+0x70>
   18b1e:	4966      	ldr	r1, [pc, #408]	; (18cb8 <z_thread_single_abort+0x1f8>)
   18b20:	4862      	ldr	r0, [pc, #392]	; (18cac <z_thread_single_abort+0x1ec>)
   18b22:	227c      	movs	r2, #124	; 0x7c
   18b24:	f001 fda2 	bl	1a66c <printk>
   18b28:	217c      	movs	r1, #124	; 0x7c
   18b2a:	4863      	ldr	r0, [pc, #396]	; (18cb8 <z_thread_single_abort+0x1f8>)
   18b2c:	f002 f844 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18b30:	4860      	ldr	r0, [pc, #384]	; (18cb4 <z_thread_single_abort+0x1f4>)
   18b32:	f000 fdcb 	bl	196cc <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   18b36:	7b63      	ldrb	r3, [r4, #13]
   18b38:	f013 0f28 	tst.w	r3, #40	; 0x28
   18b3c:	d012      	beq.n	18b64 <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18b3e:	485d      	ldr	r0, [pc, #372]	; (18cb4 <z_thread_single_abort+0x1f4>)
   18b40:	f000 fdb6 	bl	196b0 <z_spin_unlock_valid>
   18b44:	b940      	cbnz	r0, 18b58 <z_thread_single_abort+0x98>
   18b46:	495c      	ldr	r1, [pc, #368]	; (18cb8 <z_thread_single_abort+0x1f8>)
   18b48:	4858      	ldr	r0, [pc, #352]	; (18cac <z_thread_single_abort+0x1ec>)
   18b4a:	22a7      	movs	r2, #167	; 0xa7
   18b4c:	f001 fd8e 	bl	1a66c <printk>
   18b50:	21a7      	movs	r1, #167	; 0xa7
   18b52:	4859      	ldr	r0, [pc, #356]	; (18cb8 <z_thread_single_abort+0x1f8>)
   18b54:	f002 f830 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   18b58:	f385 8811 	msr	BASEPRI, r5
   18b5c:	f3bf 8f6f 	isb	sy
}
   18b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   18b64:	f043 0320 	orr.w	r3, r3, #32
   18b68:	4852      	ldr	r0, [pc, #328]	; (18cb4 <z_thread_single_abort+0x1f4>)
   18b6a:	7363      	strb	r3, [r4, #13]
   18b6c:	f000 fda0 	bl	196b0 <z_spin_unlock_valid>
   18b70:	b940      	cbnz	r0, 18b84 <z_thread_single_abort+0xc4>
   18b72:	4951      	ldr	r1, [pc, #324]	; (18cb8 <z_thread_single_abort+0x1f8>)
   18b74:	484d      	ldr	r0, [pc, #308]	; (18cac <z_thread_single_abort+0x1ec>)
   18b76:	22a7      	movs	r2, #167	; 0xa7
   18b78:	f001 fd78 	bl	1a66c <printk>
   18b7c:	21a7      	movs	r1, #167	; 0xa7
   18b7e:	484e      	ldr	r0, [pc, #312]	; (18cb8 <z_thread_single_abort+0x1f8>)
   18b80:	f002 f81a 	bl	1abb8 <assert_post_action>
   18b84:	f385 8811 	msr	BASEPRI, r5
   18b88:	f3bf 8f6f 	isb	sy
   18b8c:	f104 0018 	add.w	r0, r4, #24
   18b90:	f000 ffc4 	bl	19b1c <z_abort_timeout>
	__asm__ volatile(
   18b94:	f04f 0320 	mov.w	r3, #32
   18b98:	f3ef 8711 	mrs	r7, BASEPRI
   18b9c:	f383 8811 	msr	BASEPRI, r3
   18ba0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18ba4:	4843      	ldr	r0, [pc, #268]	; (18cb4 <z_thread_single_abort+0x1f4>)
   18ba6:	f000 fd75 	bl	19694 <z_spin_lock_valid>
   18baa:	b940      	cbnz	r0, 18bbe <z_thread_single_abort+0xfe>
   18bac:	4942      	ldr	r1, [pc, #264]	; (18cb8 <z_thread_single_abort+0x1f8>)
   18bae:	483f      	ldr	r0, [pc, #252]	; (18cac <z_thread_single_abort+0x1ec>)
   18bb0:	227c      	movs	r2, #124	; 0x7c
   18bb2:	f001 fd5b 	bl	1a66c <printk>
   18bb6:	217c      	movs	r1, #124	; 0x7c
   18bb8:	483f      	ldr	r0, [pc, #252]	; (18cb8 <z_thread_single_abort+0x1f8>)
   18bba:	f001 fffd 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18bbe:	483d      	ldr	r0, [pc, #244]	; (18cb4 <z_thread_single_abort+0x1f4>)
   18bc0:	f000 fd84 	bl	196cc <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   18bc4:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18bc6:	06d8      	lsls	r0, r3, #27
   18bc8:	d116      	bne.n	18bf8 <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   18bca:	69a2      	ldr	r2, [r4, #24]
   18bcc:	b9a2      	cbnz	r2, 18bf8 <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   18bce:	0619      	lsls	r1, r3, #24
   18bd0:	d507      	bpl.n	18be2 <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   18bd2:	4621      	mov	r1, r4
   18bd4:	4839      	ldr	r0, [pc, #228]	; (18cbc <z_thread_single_abort+0x1fc>)
   18bd6:	f7ff fc69 	bl	184ac <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18bda:	7b63      	ldrb	r3, [r4, #13]
   18bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18be0:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   18be2:	68b0      	ldr	r0, [r6, #8]
   18be4:	1b02      	subs	r2, r0, r4
   18be6:	4250      	negs	r0, r2
   18be8:	4150      	adcs	r0, r2
   18bea:	f7ff fcc5 	bl	18578 <update_cache>
			waiter->base.pended_on = NULL;
   18bee:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   18bf2:	f104 0930 	add.w	r9, r4, #48	; 0x30
   18bf6:	e023      	b.n	18c40 <z_thread_single_abort+0x180>
			if (z_is_thread_pending(thread)) {
   18bf8:	079b      	lsls	r3, r3, #30
   18bfa:	d5f8      	bpl.n	18bee <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   18bfc:	4620      	mov	r0, r4
   18bfe:	f7ff fb4d 	bl	1829c <pended_on>
   18c02:	4621      	mov	r1, r4
   18c04:	f7ff fc52 	bl	184ac <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   18c08:	7b63      	ldrb	r3, [r4, #13]
   18c0a:	f023 0302 	bic.w	r3, r3, #2
   18c0e:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   18c10:	2300      	movs	r3, #0
   18c12:	60a3      	str	r3, [r4, #8]
   18c14:	e7eb      	b.n	18bee <z_thread_single_abort+0x12e>
   18c16:	f105 0018 	add.w	r0, r5, #24
   18c1a:	f000 ff7f 	bl	19b1c <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   18c1e:	4628      	mov	r0, r5
   18c20:	f7ff fb3c 	bl	1829c <pended_on>
   18c24:	4629      	mov	r1, r5
   18c26:	f7ff fc41 	bl	184ac <z_priq_dumb_remove>
   18c2a:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   18c2c:	4628      	mov	r0, r5
   18c2e:	f023 0302 	bic.w	r3, r3, #2
   18c32:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   18c34:	f8c5 8008 	str.w	r8, [r5, #8]
   18c38:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   18c3c:	f7ff fd32 	bl	186a4 <ready_thread>
	return list->head == list;
   18c40:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18c42:	454d      	cmp	r5, r9
   18c44:	d001      	beq.n	18c4a <z_thread_single_abort+0x18a>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   18c46:	2d00      	cmp	r5, #0
   18c48:	d1e5      	bne.n	18c16 <z_thread_single_abort+0x156>
		if (z_is_idle_thread_object(_current)) {
   18c4a:	68b2      	ldr	r2, [r6, #8]
   18c4c:	4b1c      	ldr	r3, [pc, #112]	; (18cc0 <z_thread_single_abort+0x200>)
   18c4e:	429a      	cmp	r2, r3
   18c50:	d102      	bne.n	18c58 <z_thread_single_abort+0x198>
			update_cache(1);
   18c52:	2001      	movs	r0, #1
   18c54:	f7ff fc90 	bl	18578 <update_cache>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18c58:	2200      	movs	r2, #0
		thread->base.thread_state |= _THREAD_DEAD;
   18c5a:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   18c5c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   18c5e:	f043 0308 	orr.w	r3, r3, #8
   18c62:	7363      	strb	r3, [r4, #13]
   18c64:	f104 0338 	add.w	r3, r4, #56	; 0x38
   18c68:	e8d3 1fef 	ldaex	r1, [r3]
   18c6c:	e8c3 2fe0 	stlex	r0, r2, [r3]
   18c70:	2800      	cmp	r0, #0
   18c72:	d1f9      	bne.n	18c68 <z_thread_single_abort+0x1a8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18c74:	480f      	ldr	r0, [pc, #60]	; (18cb4 <z_thread_single_abort+0x1f4>)
   18c76:	f000 fd1b 	bl	196b0 <z_spin_unlock_valid>
   18c7a:	b940      	cbnz	r0, 18c8e <z_thread_single_abort+0x1ce>
   18c7c:	490e      	ldr	r1, [pc, #56]	; (18cb8 <z_thread_single_abort+0x1f8>)
   18c7e:	480b      	ldr	r0, [pc, #44]	; (18cac <z_thread_single_abort+0x1ec>)
   18c80:	22a7      	movs	r2, #167	; 0xa7
   18c82:	f001 fcf3 	bl	1a66c <printk>
   18c86:	21a7      	movs	r1, #167	; 0xa7
   18c88:	480b      	ldr	r0, [pc, #44]	; (18cb8 <z_thread_single_abort+0x1f8>)
   18c8a:	f001 ff95 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   18c8e:	f387 8811 	msr	BASEPRI, r7
   18c92:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   18c96:	2d00      	cmp	r5, #0
   18c98:	f43f af62 	beq.w	18b60 <z_thread_single_abort+0xa0>
		fn_abort(thread);
   18c9c:	4620      	mov	r0, r4
   18c9e:	462b      	mov	r3, r5
}
   18ca0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   18ca4:	4718      	bx	r3
   18ca6:	bf00      	nop
   18ca8:	00022a47 	.word	0x00022a47
   18cac:	0001fbb7 	.word	0x0001fbb7
   18cb0:	2000b10c 	.word	0x2000b10c
   18cb4:	2000b144 	.word	0x2000b144
   18cb8:	0001fbf1 	.word	0x0001fbf1
   18cbc:	2000b138 	.word	0x2000b138
   18cc0:	2000a440 	.word	0x2000a440

00018cc4 <unready_thread>:
{
   18cc4:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   18cc6:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   18cca:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   18ccc:	2b00      	cmp	r3, #0
   18cce:	da07      	bge.n	18ce0 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   18cd0:	4601      	mov	r1, r0
   18cd2:	4808      	ldr	r0, [pc, #32]	; (18cf4 <unready_thread+0x30>)
   18cd4:	f7ff fbea 	bl	184ac <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18cd8:	7b63      	ldrb	r3, [r4, #13]
   18cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18cde:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   18ce0:	4b05      	ldr	r3, [pc, #20]	; (18cf8 <unready_thread+0x34>)
   18ce2:	6898      	ldr	r0, [r3, #8]
   18ce4:	1b03      	subs	r3, r0, r4
   18ce6:	4258      	negs	r0, r3
   18ce8:	4158      	adcs	r0, r3
}
   18cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   18cee:	f7ff bc43 	b.w	18578 <update_cache>
   18cf2:	bf00      	nop
   18cf4:	2000b138 	.word	0x2000b138
   18cf8:	2000b10c 	.word	0x2000b10c

00018cfc <add_to_waitq_locked>:
{
   18cfc:	b538      	push	{r3, r4, r5, lr}
   18cfe:	4604      	mov	r4, r0
   18d00:	460d      	mov	r5, r1
	unready_thread(thread);
   18d02:	f7ff ffdf 	bl	18cc4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   18d06:	7b63      	ldrb	r3, [r4, #13]
   18d08:	f043 0302 	orr.w	r3, r3, #2
   18d0c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   18d0e:	b1ed      	cbz	r5, 18d4c <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18d10:	4b15      	ldr	r3, [pc, #84]	; (18d68 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   18d12:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18d14:	429c      	cmp	r4, r3
   18d16:	d10a      	bne.n	18d2e <add_to_waitq_locked+0x32>
   18d18:	4914      	ldr	r1, [pc, #80]	; (18d6c <add_to_waitq_locked+0x70>)
   18d1a:	4815      	ldr	r0, [pc, #84]	; (18d70 <add_to_waitq_locked+0x74>)
   18d1c:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18d20:	f001 fca4 	bl	1a66c <printk>
   18d24:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18d28:	4810      	ldr	r0, [pc, #64]	; (18d6c <add_to_waitq_locked+0x70>)
   18d2a:	f001 ff45 	bl	1abb8 <assert_post_action>
	return list->head == list;
   18d2e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18d30:	429d      	cmp	r5, r3
   18d32:	d012      	beq.n	18d5a <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18d34:	b18b      	cbz	r3, 18d5a <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   18d36:	f994 200e 	ldrsb.w	r2, [r4, #14]
   18d3a:	f993 100e 	ldrsb.w	r1, [r3, #14]
   18d3e:	4291      	cmp	r1, r2
   18d40:	dd05      	ble.n	18d4e <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   18d42:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18d44:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   18d48:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18d4a:	605c      	str	r4, [r3, #4]
}
   18d4c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   18d4e:	6869      	ldr	r1, [r5, #4]
   18d50:	428b      	cmp	r3, r1
   18d52:	d002      	beq.n	18d5a <add_to_waitq_locked+0x5e>
   18d54:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18d56:	2b00      	cmp	r3, #0
   18d58:	d1ef      	bne.n	18d3a <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   18d5a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   18d5c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   18d5e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18d60:	686b      	ldr	r3, [r5, #4]
   18d62:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18d64:	606c      	str	r4, [r5, #4]
}
   18d66:	e7f1      	b.n	18d4c <add_to_waitq_locked+0x50>
   18d68:	2000a440 	.word	0x2000a440
   18d6c:	00022a47 	.word	0x00022a47
   18d70:	0001fbb7 	.word	0x0001fbb7

00018d74 <pend>:
{
   18d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18d78:	4604      	mov	r4, r0
   18d7a:	4688      	mov	r8, r1
   18d7c:	4616      	mov	r6, r2
   18d7e:	461d      	mov	r5, r3
	__asm__ volatile(
   18d80:	f04f 0320 	mov.w	r3, #32
   18d84:	f3ef 8711 	mrs	r7, BASEPRI
   18d88:	f383 8811 	msr	BASEPRI, r3
   18d8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18d90:	481a      	ldr	r0, [pc, #104]	; (18dfc <pend+0x88>)
   18d92:	f000 fc7f 	bl	19694 <z_spin_lock_valid>
   18d96:	b940      	cbnz	r0, 18daa <pend+0x36>
   18d98:	4919      	ldr	r1, [pc, #100]	; (18e00 <pend+0x8c>)
   18d9a:	481a      	ldr	r0, [pc, #104]	; (18e04 <pend+0x90>)
   18d9c:	227c      	movs	r2, #124	; 0x7c
   18d9e:	f001 fc65 	bl	1a66c <printk>
   18da2:	217c      	movs	r1, #124	; 0x7c
   18da4:	4816      	ldr	r0, [pc, #88]	; (18e00 <pend+0x8c>)
   18da6:	f001 ff07 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18daa:	4814      	ldr	r0, [pc, #80]	; (18dfc <pend+0x88>)
   18dac:	f000 fc8e 	bl	196cc <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   18db0:	4620      	mov	r0, r4
   18db2:	4641      	mov	r1, r8
   18db4:	f7ff ffa2 	bl	18cfc <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18db8:	4810      	ldr	r0, [pc, #64]	; (18dfc <pend+0x88>)
   18dba:	f000 fc79 	bl	196b0 <z_spin_unlock_valid>
   18dbe:	b940      	cbnz	r0, 18dd2 <pend+0x5e>
   18dc0:	490f      	ldr	r1, [pc, #60]	; (18e00 <pend+0x8c>)
   18dc2:	4810      	ldr	r0, [pc, #64]	; (18e04 <pend+0x90>)
   18dc4:	22a7      	movs	r2, #167	; 0xa7
   18dc6:	f001 fc51 	bl	1a66c <printk>
   18dca:	21a7      	movs	r1, #167	; 0xa7
   18dcc:	480c      	ldr	r0, [pc, #48]	; (18e00 <pend+0x8c>)
   18dce:	f001 fef3 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   18dd2:	f387 8811 	msr	BASEPRI, r7
   18dd6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18dda:	f1b5 3fff 	cmp.w	r5, #4294967295
   18dde:	bf08      	it	eq
   18de0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   18de4:	d008      	beq.n	18df8 <pend+0x84>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   18de6:	4632      	mov	r2, r6
   18de8:	462b      	mov	r3, r5
   18dea:	f104 0018 	add.w	r0, r4, #24
   18dee:	4906      	ldr	r1, [pc, #24]	; (18e08 <pend+0x94>)
}
   18df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18df4:	f000 bde2 	b.w	199bc <z_add_timeout>
   18df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18dfc:	2000b144 	.word	0x2000b144
   18e00:	0001fbf1 	.word	0x0001fbf1
   18e04:	0001fbb7 	.word	0x0001fbb7
   18e08:	00018829 	.word	0x00018829

00018e0c <z_pend_curr>:
{
   18e0c:	b538      	push	{r3, r4, r5, lr}
   18e0e:	4605      	mov	r5, r0
	pending_current = _current;
   18e10:	4b0d      	ldr	r3, [pc, #52]	; (18e48 <z_pend_curr+0x3c>)
{
   18e12:	460c      	mov	r4, r1
	pending_current = _current;
   18e14:	6898      	ldr	r0, [r3, #8]
   18e16:	4b0d      	ldr	r3, [pc, #52]	; (18e4c <z_pend_curr+0x40>)
{
   18e18:	4611      	mov	r1, r2
	pending_current = _current;
   18e1a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   18e1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   18e20:	f7ff ffa8 	bl	18d74 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18e24:	4628      	mov	r0, r5
   18e26:	f000 fc43 	bl	196b0 <z_spin_unlock_valid>
   18e2a:	b940      	cbnz	r0, 18e3e <z_pend_curr+0x32>
   18e2c:	4908      	ldr	r1, [pc, #32]	; (18e50 <z_pend_curr+0x44>)
   18e2e:	4809      	ldr	r0, [pc, #36]	; (18e54 <z_pend_curr+0x48>)
   18e30:	22be      	movs	r2, #190	; 0xbe
   18e32:	f001 fc1b 	bl	1a66c <printk>
   18e36:	21be      	movs	r1, #190	; 0xbe
   18e38:	4805      	ldr	r0, [pc, #20]	; (18e50 <z_pend_curr+0x44>)
   18e3a:	f001 febd 	bl	1abb8 <assert_post_action>
   18e3e:	4620      	mov	r0, r4
}
   18e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18e44:	f7f4 bc6a 	b.w	d71c <arch_swap>
   18e48:	2000b10c 	.word	0x2000b10c
   18e4c:	2000b140 	.word	0x2000b140
   18e50:	0001fbf1 	.word	0x0001fbf1
   18e54:	0001fbb7 	.word	0x0001fbb7

00018e58 <z_set_prio>:
{
   18e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18e5a:	4604      	mov	r4, r0
   18e5c:	460d      	mov	r5, r1
	__asm__ volatile(
   18e5e:	f04f 0320 	mov.w	r3, #32
   18e62:	f3ef 8611 	mrs	r6, BASEPRI
   18e66:	f383 8811 	msr	BASEPRI, r3
   18e6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18e6e:	4831      	ldr	r0, [pc, #196]	; (18f34 <z_set_prio+0xdc>)
   18e70:	f000 fc10 	bl	19694 <z_spin_lock_valid>
   18e74:	b940      	cbnz	r0, 18e88 <z_set_prio+0x30>
   18e76:	4930      	ldr	r1, [pc, #192]	; (18f38 <z_set_prio+0xe0>)
   18e78:	4830      	ldr	r0, [pc, #192]	; (18f3c <z_set_prio+0xe4>)
   18e7a:	227c      	movs	r2, #124	; 0x7c
   18e7c:	f001 fbf6 	bl	1a66c <printk>
   18e80:	217c      	movs	r1, #124	; 0x7c
   18e82:	482d      	ldr	r0, [pc, #180]	; (18f38 <z_set_prio+0xe0>)
   18e84:	f001 fe98 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18e88:	482a      	ldr	r0, [pc, #168]	; (18f34 <z_set_prio+0xdc>)
   18e8a:	f000 fc1f 	bl	196cc <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18e8e:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   18e90:	b26d      	sxtb	r5, r5
   18e92:	06db      	lsls	r3, r3, #27
   18e94:	d14a      	bne.n	18f2c <z_set_prio+0xd4>
		if (need_sched) {
   18e96:	69a3      	ldr	r3, [r4, #24]
   18e98:	2b00      	cmp	r3, #0
   18e9a:	d147      	bne.n	18f2c <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   18e9c:	4621      	mov	r1, r4
   18e9e:	4828      	ldr	r0, [pc, #160]	; (18f40 <z_set_prio+0xe8>)
   18ea0:	f7ff fb04 	bl	184ac <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18ea4:	4b27      	ldr	r3, [pc, #156]	; (18f44 <z_set_prio+0xec>)
				thread->base.prio = prio;
   18ea6:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18ea8:	429c      	cmp	r4, r3
   18eaa:	d10a      	bne.n	18ec2 <z_set_prio+0x6a>
   18eac:	4926      	ldr	r1, [pc, #152]	; (18f48 <z_set_prio+0xf0>)
   18eae:	4823      	ldr	r0, [pc, #140]	; (18f3c <z_set_prio+0xe4>)
   18eb0:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   18eb4:	f001 fbda 	bl	1a66c <printk>
   18eb8:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18ebc:	4822      	ldr	r0, [pc, #136]	; (18f48 <z_set_prio+0xf0>)
   18ebe:	f001 fe7b 	bl	1abb8 <assert_post_action>
	return list->head == list;
   18ec2:	4a22      	ldr	r2, [pc, #136]	; (18f4c <z_set_prio+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18ec4:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   18ec8:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18ecc:	4283      	cmp	r3, r0
   18ece:	d027      	beq.n	18f20 <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18ed0:	b333      	cbz	r3, 18f20 <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   18ed2:	f994 500e 	ldrsb.w	r5, [r4, #14]
   18ed6:	f993 700e 	ldrsb.w	r7, [r3, #14]
   18eda:	42af      	cmp	r7, r5
   18edc:	dd1b      	ble.n	18f16 <z_set_prio+0xbe>
	node->prev = successor->prev;
   18ede:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18ee0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   18ee4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   18ee6:	605c      	str	r4, [r3, #4]
			update_cache(1);
   18ee8:	2001      	movs	r0, #1
   18eea:	f7ff fb45 	bl	18578 <update_cache>
   18eee:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ef0:	4810      	ldr	r0, [pc, #64]	; (18f34 <z_set_prio+0xdc>)
   18ef2:	f000 fbdd 	bl	196b0 <z_spin_unlock_valid>
   18ef6:	b940      	cbnz	r0, 18f0a <z_set_prio+0xb2>
   18ef8:	490f      	ldr	r1, [pc, #60]	; (18f38 <z_set_prio+0xe0>)
   18efa:	4810      	ldr	r0, [pc, #64]	; (18f3c <z_set_prio+0xe4>)
   18efc:	22a7      	movs	r2, #167	; 0xa7
   18efe:	f001 fbb5 	bl	1a66c <printk>
   18f02:	21a7      	movs	r1, #167	; 0xa7
   18f04:	480c      	ldr	r0, [pc, #48]	; (18f38 <z_set_prio+0xe0>)
   18f06:	f001 fe57 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   18f0a:	f386 8811 	msr	BASEPRI, r6
   18f0e:	f3bf 8f6f 	isb	sy
}
   18f12:	4620      	mov	r0, r4
   18f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   18f16:	4299      	cmp	r1, r3
   18f18:	d002      	beq.n	18f20 <z_set_prio+0xc8>
   18f1a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18f1c:	2b00      	cmp	r3, #0
   18f1e:	d1da      	bne.n	18ed6 <z_set_prio+0x7e>
	node->prev = list->tail;
   18f20:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   18f24:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18f26:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18f28:	6314      	str	r4, [r2, #48]	; 0x30
}
   18f2a:	e7dd      	b.n	18ee8 <z_set_prio+0x90>
			thread->base.prio = prio;
   18f2c:	73a5      	strb	r5, [r4, #14]
   18f2e:	2400      	movs	r4, #0
   18f30:	e7de      	b.n	18ef0 <z_set_prio+0x98>
   18f32:	bf00      	nop
   18f34:	2000b144 	.word	0x2000b144
   18f38:	0001fbf1 	.word	0x0001fbf1
   18f3c:	0001fbb7 	.word	0x0001fbb7
   18f40:	2000b138 	.word	0x2000b138
   18f44:	2000a440 	.word	0x2000a440
   18f48:	00022a47 	.word	0x00022a47
   18f4c:	2000b10c 	.word	0x2000b10c

00018f50 <z_unpend_first_thread>:
{
   18f50:	b538      	push	{r3, r4, r5, lr}
   18f52:	4604      	mov	r4, r0
	__asm__ volatile(
   18f54:	f04f 0320 	mov.w	r3, #32
   18f58:	f3ef 8511 	mrs	r5, BASEPRI
   18f5c:	f383 8811 	msr	BASEPRI, r3
   18f60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f64:	482b      	ldr	r0, [pc, #172]	; (19014 <z_unpend_first_thread+0xc4>)
   18f66:	f000 fb95 	bl	19694 <z_spin_lock_valid>
   18f6a:	b940      	cbnz	r0, 18f7e <z_unpend_first_thread+0x2e>
   18f6c:	492a      	ldr	r1, [pc, #168]	; (19018 <z_unpend_first_thread+0xc8>)
   18f6e:	482b      	ldr	r0, [pc, #172]	; (1901c <z_unpend_first_thread+0xcc>)
   18f70:	227c      	movs	r2, #124	; 0x7c
   18f72:	f001 fb7b 	bl	1a66c <printk>
   18f76:	217c      	movs	r1, #124	; 0x7c
   18f78:	4827      	ldr	r0, [pc, #156]	; (19018 <z_unpend_first_thread+0xc8>)
   18f7a:	f001 fe1d 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18f7e:	4825      	ldr	r0, [pc, #148]	; (19014 <z_unpend_first_thread+0xc4>)
   18f80:	f000 fba4 	bl	196cc <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   18f84:	4620      	mov	r0, r4
   18f86:	f004 ff70 	bl	1de6a <z_priq_dumb_best>
   18f8a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18f8c:	4821      	ldr	r0, [pc, #132]	; (19014 <z_unpend_first_thread+0xc4>)
   18f8e:	f000 fb8f 	bl	196b0 <z_spin_unlock_valid>
   18f92:	b940      	cbnz	r0, 18fa6 <z_unpend_first_thread+0x56>
   18f94:	4920      	ldr	r1, [pc, #128]	; (19018 <z_unpend_first_thread+0xc8>)
   18f96:	4821      	ldr	r0, [pc, #132]	; (1901c <z_unpend_first_thread+0xcc>)
   18f98:	22a7      	movs	r2, #167	; 0xa7
   18f9a:	f001 fb67 	bl	1a66c <printk>
   18f9e:	21a7      	movs	r1, #167	; 0xa7
   18fa0:	481d      	ldr	r0, [pc, #116]	; (19018 <z_unpend_first_thread+0xc8>)
   18fa2:	f001 fe09 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   18fa6:	f385 8811 	msr	BASEPRI, r5
   18faa:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   18fae:	b37c      	cbz	r4, 19010 <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   18fb0:	f04f 0320 	mov.w	r3, #32
   18fb4:	f3ef 8511 	mrs	r5, BASEPRI
   18fb8:	f383 8811 	msr	BASEPRI, r3
   18fbc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18fc0:	4814      	ldr	r0, [pc, #80]	; (19014 <z_unpend_first_thread+0xc4>)
   18fc2:	f000 fb67 	bl	19694 <z_spin_lock_valid>
   18fc6:	b940      	cbnz	r0, 18fda <z_unpend_first_thread+0x8a>
   18fc8:	4913      	ldr	r1, [pc, #76]	; (19018 <z_unpend_first_thread+0xc8>)
   18fca:	4814      	ldr	r0, [pc, #80]	; (1901c <z_unpend_first_thread+0xcc>)
   18fcc:	227c      	movs	r2, #124	; 0x7c
   18fce:	f001 fb4d 	bl	1a66c <printk>
   18fd2:	217c      	movs	r1, #124	; 0x7c
   18fd4:	4810      	ldr	r0, [pc, #64]	; (19018 <z_unpend_first_thread+0xc8>)
   18fd6:	f001 fdef 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   18fda:	480e      	ldr	r0, [pc, #56]	; (19014 <z_unpend_first_thread+0xc4>)
   18fdc:	f000 fb76 	bl	196cc <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   18fe0:	4620      	mov	r0, r4
   18fe2:	f004 ff34 	bl	1de4e <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18fe6:	480b      	ldr	r0, [pc, #44]	; (19014 <z_unpend_first_thread+0xc4>)
   18fe8:	f000 fb62 	bl	196b0 <z_spin_unlock_valid>
   18fec:	b940      	cbnz	r0, 19000 <z_unpend_first_thread+0xb0>
   18fee:	490a      	ldr	r1, [pc, #40]	; (19018 <z_unpend_first_thread+0xc8>)
   18ff0:	480a      	ldr	r0, [pc, #40]	; (1901c <z_unpend_first_thread+0xcc>)
   18ff2:	22a7      	movs	r2, #167	; 0xa7
   18ff4:	f001 fb3a 	bl	1a66c <printk>
   18ff8:	21a7      	movs	r1, #167	; 0xa7
   18ffa:	4807      	ldr	r0, [pc, #28]	; (19018 <z_unpend_first_thread+0xc8>)
   18ffc:	f001 fddc 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   19000:	f385 8811 	msr	BASEPRI, r5
   19004:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   19008:	f104 0018 	add.w	r0, r4, #24
   1900c:	f000 fd86 	bl	19b1c <z_abort_timeout>
}
   19010:	4620      	mov	r0, r4
   19012:	bd38      	pop	{r3, r4, r5, pc}
   19014:	2000b144 	.word	0x2000b144
   19018:	0001fbf1 	.word	0x0001fbf1
   1901c:	0001fbb7 	.word	0x0001fbb7

00019020 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   19020:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   19022:	4b04      	ldr	r3, [pc, #16]	; (19034 <z_sched_init+0x14>)
   19024:	4608      	mov	r0, r1
   19026:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1902a:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1902e:	f7ff b961 	b.w	182f4 <k_sched_time_slice_set>
   19032:	bf00      	nop
   19034:	2000b10c 	.word	0x2000b10c

00019038 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   19038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1903a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1903e:	b153      	cbz	r3, 19056 <z_impl_k_yield+0x1e>
   19040:	493d      	ldr	r1, [pc, #244]	; (19138 <z_impl_k_yield+0x100>)
   19042:	483e      	ldr	r0, [pc, #248]	; (1913c <z_impl_k_yield+0x104>)
   19044:	f240 42cf 	movw	r2, #1231	; 0x4cf
   19048:	f001 fb10 	bl	1a66c <printk>
   1904c:	f240 41cf 	movw	r1, #1231	; 0x4cf
   19050:	4839      	ldr	r0, [pc, #228]	; (19138 <z_impl_k_yield+0x100>)
   19052:	f001 fdb1 	bl	1abb8 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   19056:	4d3a      	ldr	r5, [pc, #232]	; (19140 <z_impl_k_yield+0x108>)
   19058:	4f3a      	ldr	r7, [pc, #232]	; (19144 <z_impl_k_yield+0x10c>)
   1905a:	68ab      	ldr	r3, [r5, #8]
   1905c:	42bb      	cmp	r3, r7
   1905e:	d054      	beq.n	1910a <z_impl_k_yield+0xd2>
	__asm__ volatile(
   19060:	f04f 0320 	mov.w	r3, #32
   19064:	f3ef 8611 	mrs	r6, BASEPRI
   19068:	f383 8811 	msr	BASEPRI, r3
   1906c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19070:	4835      	ldr	r0, [pc, #212]	; (19148 <z_impl_k_yield+0x110>)
   19072:	f000 fb0f 	bl	19694 <z_spin_lock_valid>
   19076:	b940      	cbnz	r0, 1908a <z_impl_k_yield+0x52>
   19078:	4934      	ldr	r1, [pc, #208]	; (1914c <z_impl_k_yield+0x114>)
   1907a:	4830      	ldr	r0, [pc, #192]	; (1913c <z_impl_k_yield+0x104>)
   1907c:	227c      	movs	r2, #124	; 0x7c
   1907e:	f001 faf5 	bl	1a66c <printk>
   19082:	217c      	movs	r1, #124	; 0x7c
   19084:	4831      	ldr	r0, [pc, #196]	; (1914c <z_impl_k_yield+0x114>)
   19086:	f001 fd97 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1908a:	482f      	ldr	r0, [pc, #188]	; (19148 <z_impl_k_yield+0x110>)
   1908c:	f000 fb1e 	bl	196cc <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   19090:	68a9      	ldr	r1, [r5, #8]
   19092:	482f      	ldr	r0, [pc, #188]	; (19150 <z_impl_k_yield+0x118>)
   19094:	f7ff fa0a 	bl	184ac <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   19098:	68ac      	ldr	r4, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1909a:	42bc      	cmp	r4, r7
   1909c:	d10a      	bne.n	190b4 <z_impl_k_yield+0x7c>
   1909e:	4926      	ldr	r1, [pc, #152]	; (19138 <z_impl_k_yield+0x100>)
   190a0:	4826      	ldr	r0, [pc, #152]	; (1913c <z_impl_k_yield+0x104>)
   190a2:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   190a6:	f001 fae1 	bl	1a66c <printk>
   190aa:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   190ae:	4822      	ldr	r0, [pc, #136]	; (19138 <z_impl_k_yield+0x100>)
   190b0:	f001 fd82 	bl	1abb8 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   190b4:	e9d5 320b 	ldrd	r3, r2, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   190b8:	4925      	ldr	r1, [pc, #148]	; (19150 <z_impl_k_yield+0x118>)
   190ba:	428b      	cmp	r3, r1
   190bc:	d036      	beq.n	1912c <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   190be:	2b00      	cmp	r3, #0
   190c0:	d034      	beq.n	1912c <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   190c2:	f994 000e 	ldrsb.w	r0, [r4, #14]
   190c6:	f993 700e 	ldrsb.w	r7, [r3, #14]
   190ca:	4287      	cmp	r7, r0
   190cc:	dd29      	ble.n	19122 <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   190ce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   190d0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   190d4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   190d6:	605c      	str	r4, [r3, #4]
			z_mark_thread_as_queued(_current);
   190d8:	68aa      	ldr	r2, [r5, #8]
			update_cache(1);
   190da:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   190dc:	7b53      	ldrb	r3, [r2, #13]
   190de:	f063 037f 	orn	r3, r3, #127	; 0x7f
   190e2:	7353      	strb	r3, [r2, #13]
   190e4:	f7ff fa48 	bl	18578 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   190e8:	4817      	ldr	r0, [pc, #92]	; (19148 <z_impl_k_yield+0x110>)
   190ea:	f000 fae1 	bl	196b0 <z_spin_unlock_valid>
   190ee:	b940      	cbnz	r0, 19102 <z_impl_k_yield+0xca>
   190f0:	4916      	ldr	r1, [pc, #88]	; (1914c <z_impl_k_yield+0x114>)
   190f2:	4812      	ldr	r0, [pc, #72]	; (1913c <z_impl_k_yield+0x104>)
   190f4:	22a7      	movs	r2, #167	; 0xa7
   190f6:	f001 fab9 	bl	1a66c <printk>
   190fa:	21a7      	movs	r1, #167	; 0xa7
   190fc:	4813      	ldr	r0, [pc, #76]	; (1914c <z_impl_k_yield+0x114>)
   190fe:	f001 fd5b 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   19102:	f386 8811 	msr	BASEPRI, r6
   19106:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1910a:	f04f 0320 	mov.w	r3, #32
   1910e:	f3ef 8011 	mrs	r0, BASEPRI
   19112:	f383 8811 	msr	BASEPRI, r3
   19116:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   1911a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1911e:	f7f4 bafd 	b.w	d71c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   19122:	4293      	cmp	r3, r2
   19124:	d002      	beq.n	1912c <z_impl_k_yield+0xf4>
   19126:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19128:	2b00      	cmp	r3, #0
   1912a:	d1cc      	bne.n	190c6 <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   1912c:	e9c4 1200 	strd	r1, r2, [r4]
	list->tail->next = node;
   19130:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   19132:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19134:	632c      	str	r4, [r5, #48]	; 0x30
}
   19136:	e7cf      	b.n	190d8 <z_impl_k_yield+0xa0>
   19138:	00022a47 	.word	0x00022a47
   1913c:	0001fbb7 	.word	0x0001fbb7
   19140:	2000b10c 	.word	0x2000b10c
   19144:	2000a440 	.word	0x2000a440
   19148:	2000b144 	.word	0x2000b144
   1914c:	0001fbf1 	.word	0x0001fbf1
   19150:	2000b138 	.word	0x2000b138

00019154 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   19154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19158:	4605      	mov	r5, r0
   1915a:	460f      	mov	r7, r1
   1915c:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   19160:	b153      	cbz	r3, 19178 <z_tick_sleep+0x24>
   19162:	4934      	ldr	r1, [pc, #208]	; (19234 <z_tick_sleep+0xe0>)
   19164:	4834      	ldr	r0, [pc, #208]	; (19238 <z_tick_sleep+0xe4>)
   19166:	f240 42ed 	movw	r2, #1261	; 0x4ed
   1916a:	f001 fa7f 	bl	1a66c <printk>
   1916e:	f240 41ed 	movw	r1, #1261	; 0x4ed
   19172:	4830      	ldr	r0, [pc, #192]	; (19234 <z_tick_sleep+0xe0>)
   19174:	f001 fd20 	bl	1abb8 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   19178:	ea55 0307 	orrs.w	r3, r5, r7
   1917c:	d104      	bne.n	19188 <z_tick_sleep+0x34>
	z_impl_k_yield();
   1917e:	f7ff ff5b 	bl	19038 <z_impl_k_yield>
		k_yield();
		return 0;
   19182:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   19184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   19188:	f004 fefd 	bl	1df86 <z_tick_get_32>
   1918c:	1944      	adds	r4, r0, r5
   1918e:	f04f 0320 	mov.w	r3, #32
   19192:	f3ef 8811 	mrs	r8, BASEPRI
   19196:	f383 8811 	msr	BASEPRI, r3
   1919a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1919e:	4827      	ldr	r0, [pc, #156]	; (1923c <z_tick_sleep+0xe8>)
   191a0:	f000 fa78 	bl	19694 <z_spin_lock_valid>
   191a4:	b940      	cbnz	r0, 191b8 <z_tick_sleep+0x64>
   191a6:	4926      	ldr	r1, [pc, #152]	; (19240 <z_tick_sleep+0xec>)
   191a8:	4823      	ldr	r0, [pc, #140]	; (19238 <z_tick_sleep+0xe4>)
   191aa:	227c      	movs	r2, #124	; 0x7c
   191ac:	f001 fa5e 	bl	1a66c <printk>
   191b0:	217c      	movs	r1, #124	; 0x7c
   191b2:	4823      	ldr	r0, [pc, #140]	; (19240 <z_tick_sleep+0xec>)
   191b4:	f001 fd00 	bl	1abb8 <assert_post_action>
	pending_current = _current;
   191b8:	4e22      	ldr	r6, [pc, #136]	; (19244 <z_tick_sleep+0xf0>)
	z_spin_lock_set_owner(l);
   191ba:	4820      	ldr	r0, [pc, #128]	; (1923c <z_tick_sleep+0xe8>)
   191bc:	f000 fa86 	bl	196cc <z_spin_lock_set_owner>
   191c0:	68b0      	ldr	r0, [r6, #8]
   191c2:	4b21      	ldr	r3, [pc, #132]	; (19248 <z_tick_sleep+0xf4>)
   191c4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   191c6:	f7ff fd7d 	bl	18cc4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   191ca:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   191cc:	462a      	mov	r2, r5
   191ce:	463b      	mov	r3, r7
   191d0:	3018      	adds	r0, #24
   191d2:	491e      	ldr	r1, [pc, #120]	; (1924c <z_tick_sleep+0xf8>)
   191d4:	f000 fbf2 	bl	199bc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   191d8:	68b2      	ldr	r2, [r6, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   191da:	4818      	ldr	r0, [pc, #96]	; (1923c <z_tick_sleep+0xe8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   191dc:	7b53      	ldrb	r3, [r2, #13]
   191de:	f043 0310 	orr.w	r3, r3, #16
   191e2:	7353      	strb	r3, [r2, #13]
   191e4:	f000 fa64 	bl	196b0 <z_spin_unlock_valid>
   191e8:	b940      	cbnz	r0, 191fc <z_tick_sleep+0xa8>
   191ea:	4915      	ldr	r1, [pc, #84]	; (19240 <z_tick_sleep+0xec>)
   191ec:	4812      	ldr	r0, [pc, #72]	; (19238 <z_tick_sleep+0xe4>)
   191ee:	22be      	movs	r2, #190	; 0xbe
   191f0:	f001 fa3c 	bl	1a66c <printk>
   191f4:	21be      	movs	r1, #190	; 0xbe
   191f6:	4812      	ldr	r0, [pc, #72]	; (19240 <z_tick_sleep+0xec>)
   191f8:	f001 fcde 	bl	1abb8 <assert_post_action>
   191fc:	4640      	mov	r0, r8
   191fe:	f7f4 fa8d 	bl	d71c <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   19202:	68b3      	ldr	r3, [r6, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   19204:	7b5b      	ldrb	r3, [r3, #13]
   19206:	06db      	lsls	r3, r3, #27
   19208:	d50a      	bpl.n	19220 <z_tick_sleep+0xcc>
   1920a:	490a      	ldr	r1, [pc, #40]	; (19234 <z_tick_sleep+0xe0>)
   1920c:	480a      	ldr	r0, [pc, #40]	; (19238 <z_tick_sleep+0xe4>)
   1920e:	f240 520b 	movw	r2, #1291	; 0x50b
   19212:	f001 fa2b 	bl	1a66c <printk>
   19216:	f240 510b 	movw	r1, #1291	; 0x50b
   1921a:	4806      	ldr	r0, [pc, #24]	; (19234 <z_tick_sleep+0xe0>)
   1921c:	f001 fccc 	bl	1abb8 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   19220:	f004 feb1 	bl	1df86 <z_tick_get_32>
   19224:	1a20      	subs	r0, r4, r0
   19226:	eb63 0303 	sbc.w	r3, r3, r3
   1922a:	2b00      	cmp	r3, #0
   1922c:	bfb8      	it	lt
   1922e:	2000      	movlt	r0, #0
   19230:	e7a8      	b.n	19184 <z_tick_sleep+0x30>
   19232:	bf00      	nop
   19234:	00022a47 	.word	0x00022a47
   19238:	0001fbb7 	.word	0x0001fbb7
   1923c:	2000b144 	.word	0x2000b144
   19240:	0001fbf1 	.word	0x0001fbf1
   19244:	2000b10c 	.word	0x2000b10c
   19248:	2000b140 	.word	0x2000b140
   1924c:	00018829 	.word	0x00018829

00019250 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   19250:	b538      	push	{r3, r4, r5, lr}
   19252:	4605      	mov	r5, r0
   19254:	460c      	mov	r4, r1
   19256:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1925a:	b153      	cbz	r3, 19272 <z_impl_k_sleep+0x22>
   1925c:	4911      	ldr	r1, [pc, #68]	; (192a4 <z_impl_k_sleep+0x54>)
   1925e:	4812      	ldr	r0, [pc, #72]	; (192a8 <z_impl_k_sleep+0x58>)
   19260:	f240 521a 	movw	r2, #1306	; 0x51a
   19264:	f001 fa02 	bl	1a66c <printk>
   19268:	f240 511a 	movw	r1, #1306	; 0x51a
   1926c:	480d      	ldr	r0, [pc, #52]	; (192a4 <z_impl_k_sleep+0x54>)
   1926e:	f001 fca3 	bl	1abb8 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19272:	f1b4 3fff 	cmp.w	r4, #4294967295
   19276:	bf08      	it	eq
   19278:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1927c:	d106      	bne.n	1928c <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   1927e:	4b0b      	ldr	r3, [pc, #44]	; (192ac <z_impl_k_sleep+0x5c>)
   19280:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   19282:	f7ff fbc5 	bl	18a10 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   19286:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1928a:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   1928c:	4628      	mov	r0, r5
   1928e:	4621      	mov	r1, r4
   19290:	f7ff ff60 	bl	19154 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   19294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19298:	fb80 0303 	smull	r0, r3, r0, r3
   1929c:	0bc0      	lsrs	r0, r0, #15
   1929e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   192a2:	e7f2      	b.n	1928a <z_impl_k_sleep+0x3a>
   192a4:	00022a47 	.word	0x00022a47
   192a8:	0001fbb7 	.word	0x0001fbb7
   192ac:	2000b10c 	.word	0x2000b10c

000192b0 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   192b0:	4b01      	ldr	r3, [pc, #4]	; (192b8 <z_impl_k_current_get+0x8>)
   192b2:	6898      	ldr	r0, [r3, #8]
   192b4:	4770      	bx	lr
   192b6:	bf00      	nop
   192b8:	2000b10c 	.word	0x2000b10c

000192bc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   192bc:	b538      	push	{r3, r4, r5, lr}
   192be:	4604      	mov	r4, r0
   192c0:	f04f 0320 	mov.w	r3, #32
   192c4:	f3ef 8511 	mrs	r5, BASEPRI
   192c8:	f383 8811 	msr	BASEPRI, r3
   192cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   192d0:	4815      	ldr	r0, [pc, #84]	; (19328 <z_impl_k_sem_give+0x6c>)
   192d2:	f000 f9df 	bl	19694 <z_spin_lock_valid>
   192d6:	b940      	cbnz	r0, 192ea <z_impl_k_sem_give+0x2e>
   192d8:	4914      	ldr	r1, [pc, #80]	; (1932c <z_impl_k_sem_give+0x70>)
   192da:	4815      	ldr	r0, [pc, #84]	; (19330 <z_impl_k_sem_give+0x74>)
   192dc:	227c      	movs	r2, #124	; 0x7c
   192de:	f001 f9c5 	bl	1a66c <printk>
   192e2:	217c      	movs	r1, #124	; 0x7c
   192e4:	4811      	ldr	r0, [pc, #68]	; (1932c <z_impl_k_sem_give+0x70>)
   192e6:	f001 fc67 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   192ea:	480f      	ldr	r0, [pc, #60]	; (19328 <z_impl_k_sem_give+0x6c>)
   192ec:	f000 f9ee 	bl	196cc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   192f0:	4620      	mov	r0, r4
   192f2:	f7ff fe2d 	bl	18f50 <z_unpend_first_thread>

	if (thread != NULL) {
   192f6:	b150      	cbz	r0, 1930e <z_impl_k_sem_give+0x52>
   192f8:	2200      	movs	r2, #0
   192fa:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   192fe:	f7ff fa1b 	bl	18738 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   19302:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   19304:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   19308:	4807      	ldr	r0, [pc, #28]	; (19328 <z_impl_k_sem_give+0x6c>)
   1930a:	f7ff b841 	b.w	18390 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1930e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   19312:	429a      	cmp	r2, r3
   19314:	bf18      	it	ne
   19316:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   19318:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1931a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1931c:	f104 0010 	add.w	r0, r4, #16
   19320:	f004 fea8 	bl	1e074 <z_handle_obj_poll_events>
}
   19324:	e7ed      	b.n	19302 <z_impl_k_sem_give+0x46>
   19326:	bf00      	nop
   19328:	2000b150 	.word	0x2000b150
   1932c:	0001fbf1 	.word	0x0001fbf1
   19330:	0001fbb7 	.word	0x0001fbb7

00019334 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   19334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19336:	4604      	mov	r4, r0
   19338:	4616      	mov	r6, r2
   1933a:	461d      	mov	r5, r3
   1933c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   19340:	b15b      	cbz	r3, 1935a <z_impl_k_sem_take+0x26>
   19342:	ea52 0305 	orrs.w	r3, r2, r5
   19346:	d008      	beq.n	1935a <z_impl_k_sem_take+0x26>
   19348:	492b      	ldr	r1, [pc, #172]	; (193f8 <z_impl_k_sem_take+0xc4>)
   1934a:	482c      	ldr	r0, [pc, #176]	; (193fc <z_impl_k_sem_take+0xc8>)
   1934c:	228c      	movs	r2, #140	; 0x8c
   1934e:	f001 f98d 	bl	1a66c <printk>
   19352:	218c      	movs	r1, #140	; 0x8c
   19354:	4828      	ldr	r0, [pc, #160]	; (193f8 <z_impl_k_sem_take+0xc4>)
   19356:	f001 fc2f 	bl	1abb8 <assert_post_action>
   1935a:	f04f 0320 	mov.w	r3, #32
   1935e:	f3ef 8711 	mrs	r7, BASEPRI
   19362:	f383 8811 	msr	BASEPRI, r3
   19366:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1936a:	4825      	ldr	r0, [pc, #148]	; (19400 <z_impl_k_sem_take+0xcc>)
   1936c:	f000 f992 	bl	19694 <z_spin_lock_valid>
   19370:	b940      	cbnz	r0, 19384 <z_impl_k_sem_take+0x50>
   19372:	4924      	ldr	r1, [pc, #144]	; (19404 <z_impl_k_sem_take+0xd0>)
   19374:	4821      	ldr	r0, [pc, #132]	; (193fc <z_impl_k_sem_take+0xc8>)
   19376:	227c      	movs	r2, #124	; 0x7c
   19378:	f001 f978 	bl	1a66c <printk>
   1937c:	217c      	movs	r1, #124	; 0x7c
   1937e:	4821      	ldr	r0, [pc, #132]	; (19404 <z_impl_k_sem_take+0xd0>)
   19380:	f001 fc1a 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   19384:	481e      	ldr	r0, [pc, #120]	; (19400 <z_impl_k_sem_take+0xcc>)
   19386:	f000 f9a1 	bl	196cc <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1938a:	68a3      	ldr	r3, [r4, #8]
   1938c:	b1ab      	cbz	r3, 193ba <z_impl_k_sem_take+0x86>
		sem->count--;
   1938e:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19390:	481b      	ldr	r0, [pc, #108]	; (19400 <z_impl_k_sem_take+0xcc>)
   19392:	60a3      	str	r3, [r4, #8]
   19394:	f000 f98c 	bl	196b0 <z_spin_unlock_valid>
   19398:	b940      	cbnz	r0, 193ac <z_impl_k_sem_take+0x78>
   1939a:	491a      	ldr	r1, [pc, #104]	; (19404 <z_impl_k_sem_take+0xd0>)
   1939c:	4817      	ldr	r0, [pc, #92]	; (193fc <z_impl_k_sem_take+0xc8>)
   1939e:	22a7      	movs	r2, #167	; 0xa7
   193a0:	f001 f964 	bl	1a66c <printk>
   193a4:	21a7      	movs	r1, #167	; 0xa7
   193a6:	4817      	ldr	r0, [pc, #92]	; (19404 <z_impl_k_sem_take+0xd0>)
   193a8:	f001 fc06 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   193ac:	f387 8811 	msr	BASEPRI, r7
   193b0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   193b4:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   193b6:	b003      	add	sp, #12
   193b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   193ba:	ea56 0305 	orrs.w	r3, r6, r5
   193be:	d113      	bne.n	193e8 <z_impl_k_sem_take+0xb4>
   193c0:	480f      	ldr	r0, [pc, #60]	; (19400 <z_impl_k_sem_take+0xcc>)
   193c2:	f000 f975 	bl	196b0 <z_spin_unlock_valid>
   193c6:	b940      	cbnz	r0, 193da <z_impl_k_sem_take+0xa6>
   193c8:	490e      	ldr	r1, [pc, #56]	; (19404 <z_impl_k_sem_take+0xd0>)
   193ca:	480c      	ldr	r0, [pc, #48]	; (193fc <z_impl_k_sem_take+0xc8>)
   193cc:	22a7      	movs	r2, #167	; 0xa7
   193ce:	f001 f94d 	bl	1a66c <printk>
   193d2:	21a7      	movs	r1, #167	; 0xa7
   193d4:	480b      	ldr	r0, [pc, #44]	; (19404 <z_impl_k_sem_take+0xd0>)
   193d6:	f001 fbef 	bl	1abb8 <assert_post_action>
   193da:	f387 8811 	msr	BASEPRI, r7
   193de:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   193e2:	f06f 000f 	mvn.w	r0, #15
   193e6:	e7e6      	b.n	193b6 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   193e8:	4622      	mov	r2, r4
   193ea:	4639      	mov	r1, r7
   193ec:	e9cd 6500 	strd	r6, r5, [sp]
   193f0:	4803      	ldr	r0, [pc, #12]	; (19400 <z_impl_k_sem_take+0xcc>)
   193f2:	f7ff fd0b 	bl	18e0c <z_pend_curr>
	return ret;
   193f6:	e7de      	b.n	193b6 <z_impl_k_sem_take+0x82>
   193f8:	00022a69 	.word	0x00022a69
   193fc:	0001fbb7 	.word	0x0001fbb7
   19400:	2000b150 	.word	0x2000b150
   19404:	0001fbf1 	.word	0x0001fbf1

00019408 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   19408:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1940a:	4c08      	ldr	r4, [pc, #32]	; (1942c <k_sys_work_q_init+0x24>)
   1940c:	f04f 33ff 	mov.w	r3, #4294967295
   19410:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19414:	4620      	mov	r0, r4
   19416:	4906      	ldr	r1, [pc, #24]	; (19430 <k_sys_work_q_init+0x28>)
   19418:	f000 f98c 	bl	19734 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1941c:	4905      	ldr	r1, [pc, #20]	; (19434 <k_sys_work_q_init+0x2c>)
   1941e:	f104 0020 	add.w	r0, r4, #32
   19422:	f004 fd52 	bl	1deca <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   19426:	2000      	movs	r0, #0
   19428:	bd10      	pop	{r4, pc}
   1942a:	bf00      	nop
   1942c:	2000a560 	.word	0x2000a560
   19430:	2000f810 	.word	0x2000f810
   19434:	00022a89 	.word	0x00022a89

00019438 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   19438:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1943c:	4604      	mov	r4, r0
   1943e:	460f      	mov	r7, r1
   19440:	4698      	mov	r8, r3
   19442:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   19444:	4b2c      	ldr	r3, [pc, #176]	; (194f8 <z_setup_new_thread+0xc0>)
   19446:	4616      	mov	r6, r2
   19448:	f100 0238 	add.w	r2, r0, #56	; 0x38
   1944c:	e8d2 1fef 	ldaex	r1, [r2]
   19450:	e8c2 3fe0 	stlex	r0, r3, [r2]
   19454:	2800      	cmp	r0, #0
   19456:	d1f9      	bne.n	1944c <z_setup_new_thread+0x14>
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   19458:	4299      	cmp	r1, r3
   1945a:	d10a      	bne.n	19472 <z_setup_new_thread+0x3a>
   1945c:	4927      	ldr	r1, [pc, #156]	; (194fc <z_setup_new_thread+0xc4>)
   1945e:	4828      	ldr	r0, [pc, #160]	; (19500 <z_setup_new_thread+0xc8>)
   19460:	f240 2223 	movw	r2, #547	; 0x223
   19464:	f001 f902 	bl	1a66c <printk>
   19468:	f240 2123 	movw	r1, #547	; 0x223
   1946c:	4823      	ldr	r0, [pc, #140]	; (194fc <z_setup_new_thread+0xc4>)
   1946e:	f001 fba3 	bl	1abb8 <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   19472:	2d0f      	cmp	r5, #15
   19474:	d12f      	bne.n	194d6 <z_setup_new_thread+0x9e>
   19476:	4b23      	ldr	r3, [pc, #140]	; (19504 <z_setup_new_thread+0xcc>)
   19478:	4598      	cmp	r8, r3
   1947a:	d130      	bne.n	194de <z_setup_new_thread+0xa6>
	sys_dlist_init(&w->waitq);
   1947c:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   19480:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   19484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   19486:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   19488:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1948a:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   1948c:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   1948e:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19492:	1df0      	adds	r0, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19494:	9302      	str	r3, [sp, #8]
   19496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19498:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1949c:	9301      	str	r3, [sp, #4]
   1949e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   194a0:	183e      	adds	r6, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   194a2:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   194a6:	9300      	str	r3, [sp, #0]
   194a8:	4632      	mov	r2, r6
   194aa:	4643      	mov	r3, r8
   194ac:	4639      	mov	r1, r7
   194ae:	4620      	mov	r0, r4
	node->prev = NULL;
   194b0:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->sched_locked = 0U;
   194b4:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   194b6:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   194b8:	f7f4 f9ce 	bl	d858 <arch_new_thread>
	if (!_current) {
   194bc:	4b12      	ldr	r3, [pc, #72]	; (19508 <z_setup_new_thread+0xd0>)
	new_thread->fn_abort = NULL;
   194be:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   194c2:	689b      	ldr	r3, [r3, #8]
   194c4:	b10b      	cbz	r3, 194ca <z_setup_new_thread+0x92>
	new_thread->resource_pool = _current->resource_pool;
   194c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   194ca:	4630      	mov	r0, r6
   194cc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   194d0:	b004      	add	sp, #16
   194d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   194d6:	f105 0310 	add.w	r3, r5, #16
   194da:	2b1e      	cmp	r3, #30
   194dc:	d9ce      	bls.n	1947c <z_setup_new_thread+0x44>
   194de:	f240 2226 	movw	r2, #550	; 0x226
   194e2:	4906      	ldr	r1, [pc, #24]	; (194fc <z_setup_new_thread+0xc4>)
   194e4:	4806      	ldr	r0, [pc, #24]	; (19500 <z_setup_new_thread+0xc8>)
   194e6:	f001 f8c1 	bl	1a66c <printk>
   194ea:	f240 2126 	movw	r1, #550	; 0x226
   194ee:	4803      	ldr	r0, [pc, #12]	; (194fc <z_setup_new_thread+0xc4>)
   194f0:	f001 fb62 	bl	1abb8 <assert_post_action>
   194f4:	e7c2      	b.n	1947c <z_setup_new_thread+0x44>
   194f6:	bf00      	nop
   194f8:	1337c0d3 	.word	0x1337c0d3
   194fc:	00022a92 	.word	0x00022a92
   19500:	0001fbb7 	.word	0x0001fbb7
   19504:	00017821 	.word	0x00017821
   19508:	2000b10c 	.word	0x2000b10c

0001950c <z_impl_k_thread_create>:
{
   1950c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19510:	b087      	sub	sp, #28
   19512:	4604      	mov	r4, r0
   19514:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   19518:	460f      	mov	r7, r1
   1951a:	4690      	mov	r8, r2
   1951c:	4699      	mov	r9, r3
   1951e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   19522:	b153      	cbz	r3, 1953a <z_impl_k_thread_create+0x2e>
   19524:	491a      	ldr	r1, [pc, #104]	; (19590 <z_impl_k_thread_create+0x84>)
   19526:	481b      	ldr	r0, [pc, #108]	; (19594 <z_impl_k_thread_create+0x88>)
   19528:	f240 228f 	movw	r2, #655	; 0x28f
   1952c:	f001 f89e 	bl	1a66c <printk>
   19530:	f240 218f 	movw	r1, #655	; 0x28f
   19534:	4816      	ldr	r0, [pc, #88]	; (19590 <z_impl_k_thread_create+0x84>)
   19536:	f001 fb3f 	bl	1abb8 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1953a:	2300      	movs	r3, #0
   1953c:	9305      	str	r3, [sp, #20]
   1953e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19540:	4642      	mov	r2, r8
   19542:	9304      	str	r3, [sp, #16]
   19544:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19546:	4639      	mov	r1, r7
   19548:	9303      	str	r3, [sp, #12]
   1954a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1954c:	4620      	mov	r0, r4
   1954e:	9302      	str	r3, [sp, #8]
   19550:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19552:	9301      	str	r3, [sp, #4]
   19554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19556:	9300      	str	r3, [sp, #0]
   19558:	464b      	mov	r3, r9
   1955a:	f7ff ff6d 	bl	19438 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1955e:	f1b5 3fff 	cmp.w	r5, #4294967295
   19562:	bf08      	it	eq
   19564:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   19568:	d005      	beq.n	19576 <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1956a:	ea55 0306 	orrs.w	r3, r5, r6
   1956e:	d106      	bne.n	1957e <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   19570:	4620      	mov	r0, r4
   19572:	f7ff f917 	bl	187a4 <z_sched_start>
}
   19576:	4620      	mov	r0, r4
   19578:	b007      	add	sp, #28
   1957a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1957e:	4632      	mov	r2, r6
   19580:	462b      	mov	r3, r5
   19582:	4905      	ldr	r1, [pc, #20]	; (19598 <z_impl_k_thread_create+0x8c>)
   19584:	f104 0018 	add.w	r0, r4, #24
   19588:	f000 fa18 	bl	199bc <z_add_timeout>
   1958c:	e7f3      	b.n	19576 <z_impl_k_thread_create+0x6a>
   1958e:	bf00      	nop
   19590:	00022a92 	.word	0x00022a92
   19594:	0001fbb7 	.word	0x0001fbb7
   19598:	00018829 	.word	0x00018829

0001959c <z_init_static_threads>:
{
   1959c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   195a0:	4c37      	ldr	r4, [pc, #220]	; (19680 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   195a2:	4d38      	ldr	r5, [pc, #224]	; (19684 <z_init_static_threads+0xe8>)
   195a4:	4f38      	ldr	r7, [pc, #224]	; (19688 <z_init_static_threads+0xec>)
{
   195a6:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   195a8:	42ac      	cmp	r4, r5
   195aa:	4626      	mov	r6, r4
   195ac:	d90a      	bls.n	195c4 <z_init_static_threads+0x28>
   195ae:	4639      	mov	r1, r7
   195b0:	4836      	ldr	r0, [pc, #216]	; (1968c <z_init_static_threads+0xf0>)
   195b2:	f240 22fd 	movw	r2, #765	; 0x2fd
   195b6:	f001 f859 	bl	1a66c <printk>
   195ba:	f240 21fd 	movw	r1, #765	; 0x2fd
   195be:	4638      	mov	r0, r7
   195c0:	f001 fafa 	bl	1abb8 <assert_post_action>
   195c4:	42ae      	cmp	r6, r5
   195c6:	f104 0430 	add.w	r4, r4, #48	; 0x30
   195ca:	d31b      	bcc.n	19604 <z_init_static_threads+0x68>
	k_sched_lock();
   195cc:	f7fe ff16 	bl	183fc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   195d0:	4c2b      	ldr	r4, [pc, #172]	; (19680 <z_init_static_threads+0xe4>)
   195d2:	4e2d      	ldr	r6, [pc, #180]	; (19688 <z_init_static_threads+0xec>)
   195d4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1968c <z_init_static_threads+0xf0>
   195d8:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 19690 <z_init_static_threads+0xf4>
   195dc:	42ac      	cmp	r4, r5
   195de:	d90a      	bls.n	195f6 <z_init_static_threads+0x5a>
   195e0:	4631      	mov	r1, r6
   195e2:	4640      	mov	r0, r8
   195e4:	f44f 7247 	mov.w	r2, #796	; 0x31c
   195e8:	f001 f840 	bl	1a66c <printk>
   195ec:	f44f 7147 	mov.w	r1, #796	; 0x31c
   195f0:	4630      	mov	r0, r6
   195f2:	f001 fae1 	bl	1abb8 <assert_post_action>
   195f6:	42ac      	cmp	r4, r5
   195f8:	d320      	bcc.n	1963c <z_init_static_threads+0xa0>
}
   195fa:	b007      	add	sp, #28
   195fc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   19600:	f7fe bff4 	b.w	185ec <k_sched_unlock>
		z_setup_new_thread(
   19604:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19608:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1960c:	9305      	str	r3, [sp, #20]
   1960e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   19612:	9304      	str	r3, [sp, #16]
   19614:	f854 3c14 	ldr.w	r3, [r4, #-20]
   19618:	9303      	str	r3, [sp, #12]
   1961a:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1961e:	9302      	str	r3, [sp, #8]
   19620:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   19624:	9301      	str	r3, [sp, #4]
   19626:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1962a:	9300      	str	r3, [sp, #0]
   1962c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   19630:	f7ff ff02 	bl	19438 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   19634:	f854 3c30 	ldr.w	r3, [r4, #-48]
   19638:	665e      	str	r6, [r3, #100]	; 0x64
	_FOREACH_STATIC_THREAD(thread_data) {
   1963a:	e7b5      	b.n	195a8 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1963c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1963e:	1c5a      	adds	r2, r3, #1
   19640:	d00f      	beq.n	19662 <z_init_static_threads+0xc6>
   19642:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   19646:	f240 30e7 	movw	r0, #999	; 0x3e7
   1964a:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   1964c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19650:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19654:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   19658:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1965a:	d104      	bne.n	19666 <z_init_static_threads+0xca>
	z_sched_start(thread);
   1965c:	4638      	mov	r0, r7
   1965e:	f7ff f8a1 	bl	187a4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   19662:	3430      	adds	r4, #48	; 0x30
   19664:	e7ba      	b.n	195dc <z_init_static_threads+0x40>
   19666:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1966a:	2300      	movs	r3, #0
   1966c:	f7ef fa5e 	bl	8b2c <__aeabi_uldivmod>
   19670:	4602      	mov	r2, r0
   19672:	460b      	mov	r3, r1
   19674:	f107 0018 	add.w	r0, r7, #24
   19678:	4649      	mov	r1, r9
   1967a:	f000 f99f 	bl	199bc <z_add_timeout>
   1967e:	e7f0      	b.n	19662 <z_init_static_threads+0xc6>
   19680:	200085fc 	.word	0x200085fc
   19684:	200085fc 	.word	0x200085fc
   19688:	00022a92 	.word	0x00022a92
   1968c:	0001fbb7 	.word	0x0001fbb7
   19690:	00018829 	.word	0x00018829

00019694 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   19694:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   19696:	b138      	cbz	r0, 196a8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   19698:	4b04      	ldr	r3, [pc, #16]	; (196ac <z_spin_lock_valid+0x18>)
   1969a:	f000 0003 	and.w	r0, r0, #3
   1969e:	7e1b      	ldrb	r3, [r3, #24]
   196a0:	1ac0      	subs	r0, r0, r3
   196a2:	bf18      	it	ne
   196a4:	2001      	movne	r0, #1
   196a6:	4770      	bx	lr
			return false;
		}
	}
	return true;
   196a8:	2001      	movs	r0, #1
}
   196aa:	4770      	bx	lr
   196ac:	2000b10c 	.word	0x2000b10c

000196b0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   196b0:	4905      	ldr	r1, [pc, #20]	; (196c8 <z_spin_unlock_valid+0x18>)
{
   196b2:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   196b4:	688a      	ldr	r2, [r1, #8]
   196b6:	7e08      	ldrb	r0, [r1, #24]
   196b8:	6819      	ldr	r1, [r3, #0]
   196ba:	4302      	orrs	r2, r0
   196bc:	2000      	movs	r0, #0
   196be:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   196c0:	bf04      	itt	eq
   196c2:	6018      	streq	r0, [r3, #0]
	return true;
   196c4:	2001      	moveq	r0, #1
}
   196c6:	4770      	bx	lr
   196c8:	2000b10c 	.word	0x2000b10c

000196cc <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   196cc:	4a02      	ldr	r2, [pc, #8]	; (196d8 <z_spin_lock_set_owner+0xc>)
   196ce:	7e11      	ldrb	r1, [r2, #24]
   196d0:	6893      	ldr	r3, [r2, #8]
   196d2:	430b      	orrs	r3, r1
   196d4:	6003      	str	r3, [r0, #0]
}
   196d6:	4770      	bx	lr
   196d8:	2000b10c 	.word	0x2000b10c

000196dc <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   196dc:	b508      	push	{r3, lr}
	__asm__ volatile(
   196de:	f04f 0320 	mov.w	r3, #32
   196e2:	f3ef 8511 	mrs	r5, BASEPRI
   196e6:	f383 8811 	msr	BASEPRI, r3
   196ea:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   196ee:	4c0e      	ldr	r4, [pc, #56]	; (19728 <z_self_abort+0x4c>)
   196f0:	6923      	ldr	r3, [r4, #16]
   196f2:	b143      	cbz	r3, 19706 <z_self_abort+0x2a>
   196f4:	490d      	ldr	r1, [pc, #52]	; (1972c <z_self_abort+0x50>)
   196f6:	480e      	ldr	r0, [pc, #56]	; (19730 <z_self_abort+0x54>)
   196f8:	2228      	movs	r2, #40	; 0x28
   196fa:	f000 ffb7 	bl	1a66c <printk>
   196fe:	2128      	movs	r1, #40	; 0x28
   19700:	480a      	ldr	r0, [pc, #40]	; (1972c <z_self_abort+0x50>)
   19702:	f001 fa59 	bl	1abb8 <assert_post_action>
	cpu->pending_abort = _current;
   19706:	68a0      	ldr	r0, [r4, #8]
   19708:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   1970a:	f7ff f981 	bl	18a10 <z_impl_k_thread_suspend>
   1970e:	4628      	mov	r0, r5
   19710:	f7f4 f804 	bl	d71c <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   19714:	4905      	ldr	r1, [pc, #20]	; (1972c <z_self_abort+0x50>)
   19716:	4806      	ldr	r0, [pc, #24]	; (19730 <z_self_abort+0x54>)
   19718:	2230      	movs	r2, #48	; 0x30
   1971a:	f000 ffa7 	bl	1a66c <printk>
   1971e:	2130      	movs	r1, #48	; 0x30
   19720:	4802      	ldr	r0, [pc, #8]	; (1972c <z_self_abort+0x50>)
   19722:	f001 fa49 	bl	1abb8 <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   19726:	bf00      	nop
   19728:	2000b10c 	.word	0x2000b10c
   1972c:	00022ab5 	.word	0x00022ab5
   19730:	0001fbb7 	.word	0x0001fbb7

00019734 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   19734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19738:	4604      	mov	r4, r0
   1973a:	b088      	sub	sp, #32
   1973c:	460d      	mov	r5, r1
   1973e:	4616      	mov	r6, r2
   19740:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   19742:	f004 fb43 	bl	1ddcc <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   19746:	f104 0820 	add.w	r8, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1974a:	2200      	movs	r2, #0
   1974c:	2300      	movs	r3, #0
   1974e:	e9cd 7203 	strd	r7, r2, [sp, #12]
   19752:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19756:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1975a:	4629      	mov	r1, r5
   1975c:	4632      	mov	r2, r6
   1975e:	4640      	mov	r0, r8
   19760:	4b05      	ldr	r3, [pc, #20]	; (19778 <k_work_q_start+0x44>)
   19762:	9400      	str	r4, [sp, #0]
   19764:	f7ff fed2 	bl	1950c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   19768:	4640      	mov	r0, r8
   1976a:	4904      	ldr	r1, [pc, #16]	; (1977c <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1976c:	b008      	add	sp, #32
   1976e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19772:	f004 bbaa 	b.w	1deca <z_impl_k_thread_name_set>
   19776:	bf00      	nop
   19778:	0000a9c5 	.word	0x0000a9c5
   1977c:	00022ade 	.word	0x00022ade

00019780 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   19780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19784:	4606      	mov	r6, r0
   19786:	460d      	mov	r5, r1
   19788:	4690      	mov	r8, r2
   1978a:	461f      	mov	r7, r3
   1978c:	f04f 0320 	mov.w	r3, #32
   19790:	f3ef 8911 	mrs	r9, BASEPRI
   19794:	f383 8811 	msr	BASEPRI, r3
   19798:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1979c:	482c      	ldr	r0, [pc, #176]	; (19850 <k_delayed_work_submit_to_queue+0xd0>)
   1979e:	f7ff ff79 	bl	19694 <z_spin_lock_valid>
   197a2:	b940      	cbnz	r0, 197b6 <k_delayed_work_submit_to_queue+0x36>
   197a4:	492b      	ldr	r1, [pc, #172]	; (19854 <k_delayed_work_submit_to_queue+0xd4>)
   197a6:	482c      	ldr	r0, [pc, #176]	; (19858 <k_delayed_work_submit_to_queue+0xd8>)
   197a8:	227c      	movs	r2, #124	; 0x7c
   197aa:	f000 ff5f 	bl	1a66c <printk>
   197ae:	217c      	movs	r1, #124	; 0x7c
   197b0:	4828      	ldr	r0, [pc, #160]	; (19854 <k_delayed_work_submit_to_queue+0xd4>)
   197b2:	f001 fa01 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   197b6:	4826      	ldr	r0, [pc, #152]	; (19850 <k_delayed_work_submit_to_queue+0xd0>)
   197b8:	f7ff ff88 	bl	196cc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   197bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   197be:	b1e3      	cbz	r3, 197fa <k_delayed_work_submit_to_queue+0x7a>
   197c0:	42b3      	cmp	r3, r6
   197c2:	d142      	bne.n	1984a <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   197c4:	4628      	mov	r0, r5
   197c6:	f004 fb9e 	bl	1df06 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   197ca:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   197ce:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   197d0:	d015      	beq.n	197fe <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   197d2:	2800      	cmp	r0, #0
   197d4:	da14      	bge.n	19800 <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   197d6:	481e      	ldr	r0, [pc, #120]	; (19850 <k_delayed_work_submit_to_queue+0xd0>)
   197d8:	f7ff ff6a 	bl	196b0 <z_spin_unlock_valid>
   197dc:	b940      	cbnz	r0, 197f0 <k_delayed_work_submit_to_queue+0x70>
   197de:	491d      	ldr	r1, [pc, #116]	; (19854 <k_delayed_work_submit_to_queue+0xd4>)
   197e0:	481d      	ldr	r0, [pc, #116]	; (19858 <k_delayed_work_submit_to_queue+0xd8>)
   197e2:	22a7      	movs	r2, #167	; 0xa7
   197e4:	f000 ff42 	bl	1a66c <printk>
   197e8:	21a7      	movs	r1, #167	; 0xa7
   197ea:	481a      	ldr	r0, [pc, #104]	; (19854 <k_delayed_work_submit_to_queue+0xd4>)
   197ec:	f001 f9e4 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   197f0:	f389 8811 	msr	BASEPRI, r9
   197f4:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   197f8:	e01c      	b.n	19834 <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   197fa:	2e00      	cmp	r6, #0
   197fc:	d0e2      	beq.n	197c4 <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   197fe:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19800:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   19804:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19806:	d118      	bne.n	1983a <k_delayed_work_submit_to_queue+0xba>
   19808:	4811      	ldr	r0, [pc, #68]	; (19850 <k_delayed_work_submit_to_queue+0xd0>)
   1980a:	f7ff ff51 	bl	196b0 <z_spin_unlock_valid>
   1980e:	b940      	cbnz	r0, 19822 <k_delayed_work_submit_to_queue+0xa2>
   19810:	4910      	ldr	r1, [pc, #64]	; (19854 <k_delayed_work_submit_to_queue+0xd4>)
   19812:	4811      	ldr	r0, [pc, #68]	; (19858 <k_delayed_work_submit_to_queue+0xd8>)
   19814:	22a7      	movs	r2, #167	; 0xa7
   19816:	f000 ff29 	bl	1a66c <printk>
   1981a:	21a7      	movs	r1, #167	; 0xa7
   1981c:	480d      	ldr	r0, [pc, #52]	; (19854 <k_delayed_work_submit_to_queue+0xd4>)
   1981e:	f001 f9cb 	bl	1abb8 <assert_post_action>
   19822:	f389 8811 	msr	BASEPRI, r9
   19826:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1982a:	4629      	mov	r1, r5
   1982c:	4630      	mov	r0, r6
   1982e:	f004 fb51 	bl	1ded4 <k_work_submit_to_queue>
		return 0;
   19832:	2400      	movs	r4, #0
}
   19834:	4620      	mov	r0, r4
   19836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1983a:	4642      	mov	r2, r8
   1983c:	463b      	mov	r3, r7
   1983e:	4907      	ldr	r1, [pc, #28]	; (1985c <k_delayed_work_submit_to_queue+0xdc>)
   19840:	f105 0010 	add.w	r0, r5, #16
   19844:	f000 f8ba 	bl	199bc <z_add_timeout>
   19848:	e7c5      	b.n	197d6 <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   1984a:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1984e:	e7c2      	b.n	197d6 <k_delayed_work_submit_to_queue+0x56>
   19850:	2000b154 	.word	0x2000b154
   19854:	0001fbf1 	.word	0x0001fbf1
   19858:	0001fbb7 	.word	0x0001fbb7
   1985c:	0001defd 	.word	0x0001defd

00019860 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   19860:	b538      	push	{r3, r4, r5, lr}
   19862:	4604      	mov	r4, r0
	__asm__ volatile(
   19864:	f04f 0320 	mov.w	r3, #32
   19868:	f3ef 8511 	mrs	r5, BASEPRI
   1986c:	f383 8811 	msr	BASEPRI, r3
   19870:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19874:	4815      	ldr	r0, [pc, #84]	; (198cc <k_delayed_work_cancel+0x6c>)
   19876:	f7ff ff0d 	bl	19694 <z_spin_lock_valid>
   1987a:	b940      	cbnz	r0, 1988e <k_delayed_work_cancel+0x2e>
   1987c:	4914      	ldr	r1, [pc, #80]	; (198d0 <k_delayed_work_cancel+0x70>)
   1987e:	4815      	ldr	r0, [pc, #84]	; (198d4 <k_delayed_work_cancel+0x74>)
   19880:	227c      	movs	r2, #124	; 0x7c
   19882:	f000 fef3 	bl	1a66c <printk>
   19886:	217c      	movs	r1, #124	; 0x7c
   19888:	4811      	ldr	r0, [pc, #68]	; (198d0 <k_delayed_work_cancel+0x70>)
   1988a:	f001 f995 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1988e:	480f      	ldr	r0, [pc, #60]	; (198cc <k_delayed_work_cancel+0x6c>)
   19890:	f7ff ff1c 	bl	196cc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   19894:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   19896:	b1b3      	cbz	r3, 198c6 <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   19898:	4620      	mov	r0, r4
   1989a:	f004 fb34 	bl	1df06 <work_cancel>
   1989e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   198a0:	480a      	ldr	r0, [pc, #40]	; (198cc <k_delayed_work_cancel+0x6c>)
   198a2:	f7ff ff05 	bl	196b0 <z_spin_unlock_valid>
   198a6:	b940      	cbnz	r0, 198ba <k_delayed_work_cancel+0x5a>
   198a8:	4909      	ldr	r1, [pc, #36]	; (198d0 <k_delayed_work_cancel+0x70>)
   198aa:	480a      	ldr	r0, [pc, #40]	; (198d4 <k_delayed_work_cancel+0x74>)
   198ac:	22a7      	movs	r2, #167	; 0xa7
   198ae:	f000 fedd 	bl	1a66c <printk>
   198b2:	21a7      	movs	r1, #167	; 0xa7
   198b4:	4806      	ldr	r0, [pc, #24]	; (198d0 <k_delayed_work_cancel+0x70>)
   198b6:	f001 f97f 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   198ba:	f385 8811 	msr	BASEPRI, r5
   198be:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   198c2:	4620      	mov	r0, r4
   198c4:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   198c6:	f06f 0415 	mvn.w	r4, #21
   198ca:	e7e9      	b.n	198a0 <k_delayed_work_cancel+0x40>
   198cc:	2000b154 	.word	0x2000b154
   198d0:	0001fbf1 	.word	0x0001fbf1
   198d4:	0001fbb7 	.word	0x0001fbb7

000198d8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   198d8:	4a02      	ldr	r2, [pc, #8]	; (198e4 <boot_banner+0xc>)
   198da:	4903      	ldr	r1, [pc, #12]	; (198e8 <boot_banner+0x10>)
   198dc:	4803      	ldr	r0, [pc, #12]	; (198ec <boot_banner+0x14>)
   198de:	f000 bec5 	b.w	1a66c <printk>
   198e2:	bf00      	nop
   198e4:	00022921 	.word	0x00022921
   198e8:	00022ae8 	.word	0x00022ae8
   198ec:	00022af5 	.word	0x00022af5

000198f0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   198f0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   198f2:	4806      	ldr	r0, [pc, #24]	; (1990c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   198f4:	4a06      	ldr	r2, [pc, #24]	; (19910 <z_data_copy+0x20>)
   198f6:	4907      	ldr	r1, [pc, #28]	; (19914 <z_data_copy+0x24>)
   198f8:	1a12      	subs	r2, r2, r0
   198fa:	f002 f8fb 	bl	1baf4 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   198fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   19902:	4a05      	ldr	r2, [pc, #20]	; (19918 <z_data_copy+0x28>)
   19904:	4905      	ldr	r1, [pc, #20]	; (1991c <z_data_copy+0x2c>)
   19906:	4806      	ldr	r0, [pc, #24]	; (19920 <z_data_copy+0x30>)
   19908:	f002 b8f4 	b.w	1baf4 <memcpy>
   1990c:	20008000 	.word	0x20008000
   19910:	200087f4 	.word	0x200087f4
   19914:	00022b8c 	.word	0x00022b8c
   19918:	00000000 	.word	0x00000000
   1991c:	00022b8c 	.word	0x00022b8c
   19920:	20008000 	.word	0x20008000

00019924 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   19924:	4b03      	ldr	r3, [pc, #12]	; (19934 <elapsed+0x10>)
   19926:	681b      	ldr	r3, [r3, #0]
   19928:	b90b      	cbnz	r3, 1992e <elapsed+0xa>
   1992a:	f7f2 bc95 	b.w	c258 <z_clock_elapsed>
}
   1992e:	2000      	movs	r0, #0
   19930:	4770      	bx	lr
   19932:	bf00      	nop
   19934:	2000b158 	.word	0x2000b158

00019938 <next_timeout>:
	return list->head == list;
   19938:	4b11      	ldr	r3, [pc, #68]	; (19980 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   1993a:	b510      	push	{r4, lr}
   1993c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1993e:	429c      	cmp	r4, r3
   19940:	bf08      	it	eq
   19942:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   19944:	f7ff ffee 	bl	19924 <elapsed>
   19948:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1994a:	b16c      	cbz	r4, 19968 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1994c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   19950:	1ac0      	subs	r0, r0, r3
   19952:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   19956:	2801      	cmp	r0, #1
   19958:	f173 0200 	sbcs.w	r2, r3, #0
   1995c:	db0d      	blt.n	1997a <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1995e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   19962:	f173 0300 	sbcs.w	r3, r3, #0
   19966:	db01      	blt.n	1996c <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   19968:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1996c:	4b05      	ldr	r3, [pc, #20]	; (19984 <next_timeout+0x4c>)
   1996e:	695b      	ldr	r3, [r3, #20]
   19970:	b113      	cbz	r3, 19978 <next_timeout+0x40>
   19972:	4298      	cmp	r0, r3
   19974:	bfa8      	it	ge
   19976:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   19978:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1997a:	2000      	movs	r0, #0
   1997c:	e7f6      	b.n	1996c <next_timeout+0x34>
   1997e:	bf00      	nop
   19980:	20008564 	.word	0x20008564
   19984:	2000b10c 	.word	0x2000b10c

00019988 <remove_timeout>:
{
   19988:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1998a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1998c:	b168      	cbz	r0, 199aa <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1998e:	4a0a      	ldr	r2, [pc, #40]	; (199b8 <remove_timeout+0x30>)
   19990:	6852      	ldr	r2, [r2, #4]
   19992:	4290      	cmp	r0, r2
   19994:	d009      	beq.n	199aa <remove_timeout+0x22>
	if (next(t) != NULL) {
   19996:	b143      	cbz	r3, 199aa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   19998:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1999c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   199a0:	1912      	adds	r2, r2, r4
   199a2:	eb41 0105 	adc.w	r1, r1, r5
   199a6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   199aa:	6842      	ldr	r2, [r0, #4]
   199ac:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   199ae:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   199b0:	2300      	movs	r3, #0
	node->prev = NULL;
   199b2:	e9c0 3300 	strd	r3, r3, [r0]
}
   199b6:	bd30      	pop	{r4, r5, pc}
   199b8:	20008564 	.word	0x20008564

000199bc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   199bc:	f1b3 3fff 	cmp.w	r3, #4294967295
   199c0:	bf08      	it	eq
   199c2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   199c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   199ca:	4604      	mov	r4, r0
   199cc:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   199ce:	f000 808c 	beq.w	19aea <z_add_timeout+0x12e>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   199d2:	f06f 0601 	mvn.w	r6, #1
   199d6:	f04f 39ff 	mov.w	r9, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   199da:	1c55      	adds	r5, r2, #1
   199dc:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   199e0:	1b73      	subs	r3, r6, r5
   199e2:	eb69 0307 	sbc.w	r3, r9, r7
   199e6:	2b00      	cmp	r3, #0
   199e8:	db0d      	blt.n	19a06 <z_add_timeout+0x4a>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   199ea:	f7ff ff9b 	bl	19924 <elapsed>
   199ee:	4b44      	ldr	r3, [pc, #272]	; (19b00 <z_add_timeout+0x144>)
   199f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   199f4:	1ab6      	subs	r6, r6, r2
   199f6:	eb69 0303 	sbc.w	r3, r9, r3
   199fa:	1b75      	subs	r5, r6, r5
   199fc:	eb63 0707 	sbc.w	r7, r3, r7
   19a00:	1a2d      	subs	r5, r5, r0
   19a02:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   19a06:	6823      	ldr	r3, [r4, #0]
   19a08:	b143      	cbz	r3, 19a1c <z_add_timeout+0x60>
   19a0a:	493e      	ldr	r1, [pc, #248]	; (19b04 <z_add_timeout+0x148>)
   19a0c:	483e      	ldr	r0, [pc, #248]	; (19b08 <z_add_timeout+0x14c>)
   19a0e:	2268      	movs	r2, #104	; 0x68
   19a10:	f000 fe2c 	bl	1a66c <printk>
   19a14:	2168      	movs	r1, #104	; 0x68
   19a16:	483b      	ldr	r0, [pc, #236]	; (19b04 <z_add_timeout+0x148>)
   19a18:	f001 f8ce 	bl	1abb8 <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   19a1c:	2d01      	cmp	r5, #1
   19a1e:	f177 0300 	sbcs.w	r3, r7, #0
   19a22:	bfbc      	itt	lt
   19a24:	2501      	movlt	r5, #1
   19a26:	2700      	movlt	r7, #0
	to->fn = fn;
   19a28:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   19a2c:	f04f 0320 	mov.w	r3, #32
   19a30:	f3ef 8611 	mrs	r6, BASEPRI
   19a34:	f383 8811 	msr	BASEPRI, r3
   19a38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19a3c:	4833      	ldr	r0, [pc, #204]	; (19b0c <z_add_timeout+0x150>)
   19a3e:	f7ff fe29 	bl	19694 <z_spin_lock_valid>
   19a42:	b940      	cbnz	r0, 19a56 <z_add_timeout+0x9a>
   19a44:	4932      	ldr	r1, [pc, #200]	; (19b10 <z_add_timeout+0x154>)
   19a46:	4830      	ldr	r0, [pc, #192]	; (19b08 <z_add_timeout+0x14c>)
   19a48:	227c      	movs	r2, #124	; 0x7c
   19a4a:	f000 fe0f 	bl	1a66c <printk>
   19a4e:	217c      	movs	r1, #124	; 0x7c
   19a50:	482f      	ldr	r0, [pc, #188]	; (19b10 <z_add_timeout+0x154>)
   19a52:	f001 f8b1 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   19a56:	482d      	ldr	r0, [pc, #180]	; (19b0c <z_add_timeout+0x150>)
   19a58:	f7ff fe38 	bl	196cc <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   19a5c:	f7ff ff62 	bl	19924 <elapsed>
	return list->head == list;
   19a60:	4a2c      	ldr	r2, [pc, #176]	; (19b14 <z_add_timeout+0x158>)
   19a62:	1945      	adds	r5, r0, r5
   19a64:	6813      	ldr	r3, [r2, #0]
   19a66:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19a6a:	4293      	cmp	r3, r2
   19a6c:	e9c4 5704 	strd	r5, r7, [r4, #16]
   19a70:	d002      	beq.n	19a78 <z_add_timeout+0xbc>
	return (node == list->tail) ? NULL : node->next;
   19a72:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   19a76:	b933      	cbnz	r3, 19a86 <z_add_timeout+0xca>
	node->prev = list->tail;
   19a78:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   19a7a:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
   19a7c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   19a7e:	6853      	ldr	r3, [r2, #4]
   19a80:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19a82:	6054      	str	r4, [r2, #4]
}
   19a84:	e011      	b.n	19aaa <z_add_timeout+0xee>
			if (t->dticks > to->dticks) {
   19a86:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   19a8a:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   19a8e:	4281      	cmp	r1, r0
   19a90:	eb75 0e07 	sbcs.w	lr, r5, r7
   19a94:	da2b      	bge.n	19aee <z_add_timeout+0x132>
				t->dticks -= to->dticks;
   19a96:	1a41      	subs	r1, r0, r1
   19a98:	eb67 0505 	sbc.w	r5, r7, r5
   19a9c:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   19aa0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   19aa2:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   19aa6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   19aa8:	605c      	str	r4, [r3, #4]
	return list->head == list;
   19aaa:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19aac:	4293      	cmp	r3, r2
   19aae:	d00b      	beq.n	19ac8 <z_add_timeout+0x10c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   19ab0:	429c      	cmp	r4, r3
   19ab2:	d109      	bne.n	19ac8 <z_add_timeout+0x10c>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   19ab4:	f7ff ff40 	bl	19938 <next_timeout>

			if (next_time == 0 ||
   19ab8:	b118      	cbz	r0, 19ac2 <z_add_timeout+0x106>
			    _current_cpu->slice_ticks != next_time) {
   19aba:	4b17      	ldr	r3, [pc, #92]	; (19b18 <z_add_timeout+0x15c>)
			if (next_time == 0 ||
   19abc:	695b      	ldr	r3, [r3, #20]
   19abe:	4283      	cmp	r3, r0
   19ac0:	d002      	beq.n	19ac8 <z_add_timeout+0x10c>
				z_clock_set_timeout(next_time, false);
   19ac2:	2100      	movs	r1, #0
   19ac4:	f7f2 fb96 	bl	c1f4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19ac8:	4810      	ldr	r0, [pc, #64]	; (19b0c <z_add_timeout+0x150>)
   19aca:	f7ff fdf1 	bl	196b0 <z_spin_unlock_valid>
   19ace:	b940      	cbnz	r0, 19ae2 <z_add_timeout+0x126>
   19ad0:	490f      	ldr	r1, [pc, #60]	; (19b10 <z_add_timeout+0x154>)
   19ad2:	480d      	ldr	r0, [pc, #52]	; (19b08 <z_add_timeout+0x14c>)
   19ad4:	22a7      	movs	r2, #167	; 0xa7
   19ad6:	f000 fdc9 	bl	1a66c <printk>
   19ada:	21a7      	movs	r1, #167	; 0xa7
   19adc:	480c      	ldr	r0, [pc, #48]	; (19b10 <z_add_timeout+0x154>)
   19ade:	f001 f86b 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   19ae2:	f386 8811 	msr	BASEPRI, r6
   19ae6:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   19aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   19aee:	1a09      	subs	r1, r1, r0
   19af0:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   19af4:	4563      	cmp	r3, ip
   19af6:	e9c4 1504 	strd	r1, r5, [r4, #16]
   19afa:	d0bd      	beq.n	19a78 <z_add_timeout+0xbc>
   19afc:	681b      	ldr	r3, [r3, #0]
   19afe:	e7ba      	b.n	19a76 <z_add_timeout+0xba>
   19b00:	2000a610 	.word	0x2000a610
   19b04:	00022b1c 	.word	0x00022b1c
   19b08:	0001fbb7 	.word	0x0001fbb7
   19b0c:	2000b15c 	.word	0x2000b15c
   19b10:	0001fbf1 	.word	0x0001fbf1
   19b14:	20008564 	.word	0x20008564
   19b18:	2000b10c 	.word	0x2000b10c

00019b1c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   19b1c:	b538      	push	{r3, r4, r5, lr}
   19b1e:	4604      	mov	r4, r0
	__asm__ volatile(
   19b20:	f04f 0320 	mov.w	r3, #32
   19b24:	f3ef 8511 	mrs	r5, BASEPRI
   19b28:	f383 8811 	msr	BASEPRI, r3
   19b2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19b30:	4815      	ldr	r0, [pc, #84]	; (19b88 <z_abort_timeout+0x6c>)
   19b32:	f7ff fdaf 	bl	19694 <z_spin_lock_valid>
   19b36:	b940      	cbnz	r0, 19b4a <z_abort_timeout+0x2e>
   19b38:	4914      	ldr	r1, [pc, #80]	; (19b8c <z_abort_timeout+0x70>)
   19b3a:	4815      	ldr	r0, [pc, #84]	; (19b90 <z_abort_timeout+0x74>)
   19b3c:	227c      	movs	r2, #124	; 0x7c
   19b3e:	f000 fd95 	bl	1a66c <printk>
   19b42:	217c      	movs	r1, #124	; 0x7c
   19b44:	4811      	ldr	r0, [pc, #68]	; (19b8c <z_abort_timeout+0x70>)
   19b46:	f001 f837 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   19b4a:	480f      	ldr	r0, [pc, #60]	; (19b88 <z_abort_timeout+0x6c>)
   19b4c:	f7ff fdbe 	bl	196cc <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   19b50:	6823      	ldr	r3, [r4, #0]
   19b52:	b1b3      	cbz	r3, 19b82 <z_abort_timeout+0x66>
			remove_timeout(to);
   19b54:	4620      	mov	r0, r4
   19b56:	f7ff ff17 	bl	19988 <remove_timeout>
			ret = 0;
   19b5a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19b5c:	480a      	ldr	r0, [pc, #40]	; (19b88 <z_abort_timeout+0x6c>)
   19b5e:	f7ff fda7 	bl	196b0 <z_spin_unlock_valid>
   19b62:	b940      	cbnz	r0, 19b76 <z_abort_timeout+0x5a>
   19b64:	4909      	ldr	r1, [pc, #36]	; (19b8c <z_abort_timeout+0x70>)
   19b66:	480a      	ldr	r0, [pc, #40]	; (19b90 <z_abort_timeout+0x74>)
   19b68:	22a7      	movs	r2, #167	; 0xa7
   19b6a:	f000 fd7f 	bl	1a66c <printk>
   19b6e:	21a7      	movs	r1, #167	; 0xa7
   19b70:	4806      	ldr	r0, [pc, #24]	; (19b8c <z_abort_timeout+0x70>)
   19b72:	f001 f821 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   19b76:	f385 8811 	msr	BASEPRI, r5
   19b7a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   19b7e:	4620      	mov	r0, r4
   19b80:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   19b82:	f06f 0415 	mvn.w	r4, #21
   19b86:	e7e9      	b.n	19b5c <z_abort_timeout+0x40>
   19b88:	2000b15c 	.word	0x2000b15c
   19b8c:	0001fbf1 	.word	0x0001fbf1
   19b90:	0001fbb7 	.word	0x0001fbb7

00019b94 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   19b94:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   19b96:	f04f 0320 	mov.w	r3, #32
   19b9a:	f3ef 8511 	mrs	r5, BASEPRI
   19b9e:	f383 8811 	msr	BASEPRI, r3
   19ba2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19ba6:	4813      	ldr	r0, [pc, #76]	; (19bf4 <z_get_next_timeout_expiry+0x60>)
   19ba8:	f7ff fd74 	bl	19694 <z_spin_lock_valid>
   19bac:	b940      	cbnz	r0, 19bc0 <z_get_next_timeout_expiry+0x2c>
   19bae:	4912      	ldr	r1, [pc, #72]	; (19bf8 <z_get_next_timeout_expiry+0x64>)
   19bb0:	4812      	ldr	r0, [pc, #72]	; (19bfc <z_get_next_timeout_expiry+0x68>)
   19bb2:	227c      	movs	r2, #124	; 0x7c
   19bb4:	f000 fd5a 	bl	1a66c <printk>
   19bb8:	217c      	movs	r1, #124	; 0x7c
   19bba:	480f      	ldr	r0, [pc, #60]	; (19bf8 <z_get_next_timeout_expiry+0x64>)
   19bbc:	f000 fffc 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   19bc0:	480c      	ldr	r0, [pc, #48]	; (19bf4 <z_get_next_timeout_expiry+0x60>)
   19bc2:	f7ff fd83 	bl	196cc <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   19bc6:	f7ff feb7 	bl	19938 <next_timeout>
   19bca:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19bcc:	4809      	ldr	r0, [pc, #36]	; (19bf4 <z_get_next_timeout_expiry+0x60>)
   19bce:	f7ff fd6f 	bl	196b0 <z_spin_unlock_valid>
   19bd2:	b940      	cbnz	r0, 19be6 <z_get_next_timeout_expiry+0x52>
   19bd4:	4908      	ldr	r1, [pc, #32]	; (19bf8 <z_get_next_timeout_expiry+0x64>)
   19bd6:	4809      	ldr	r0, [pc, #36]	; (19bfc <z_get_next_timeout_expiry+0x68>)
   19bd8:	22a7      	movs	r2, #167	; 0xa7
   19bda:	f000 fd47 	bl	1a66c <printk>
   19bde:	21a7      	movs	r1, #167	; 0xa7
   19be0:	4805      	ldr	r0, [pc, #20]	; (19bf8 <z_get_next_timeout_expiry+0x64>)
   19be2:	f000 ffe9 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   19be6:	f385 8811 	msr	BASEPRI, r5
   19bea:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   19bee:	4620      	mov	r0, r4
   19bf0:	bd38      	pop	{r3, r4, r5, pc}
   19bf2:	bf00      	nop
   19bf4:	2000b15c 	.word	0x2000b15c
   19bf8:	0001fbf1 	.word	0x0001fbf1
   19bfc:	0001fbb7 	.word	0x0001fbb7

00019c00 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   19c00:	b570      	push	{r4, r5, r6, lr}
   19c02:	4604      	mov	r4, r0
   19c04:	460d      	mov	r5, r1
	__asm__ volatile(
   19c06:	f04f 0320 	mov.w	r3, #32
   19c0a:	f3ef 8611 	mrs	r6, BASEPRI
   19c0e:	f383 8811 	msr	BASEPRI, r3
   19c12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19c16:	4816      	ldr	r0, [pc, #88]	; (19c70 <z_set_timeout_expiry+0x70>)
   19c18:	f7ff fd3c 	bl	19694 <z_spin_lock_valid>
   19c1c:	b940      	cbnz	r0, 19c30 <z_set_timeout_expiry+0x30>
   19c1e:	4915      	ldr	r1, [pc, #84]	; (19c74 <z_set_timeout_expiry+0x74>)
   19c20:	4815      	ldr	r0, [pc, #84]	; (19c78 <z_set_timeout_expiry+0x78>)
   19c22:	227c      	movs	r2, #124	; 0x7c
   19c24:	f000 fd22 	bl	1a66c <printk>
   19c28:	217c      	movs	r1, #124	; 0x7c
   19c2a:	4812      	ldr	r0, [pc, #72]	; (19c74 <z_set_timeout_expiry+0x74>)
   19c2c:	f000 ffc4 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   19c30:	480f      	ldr	r0, [pc, #60]	; (19c70 <z_set_timeout_expiry+0x70>)
   19c32:	f7ff fd4b 	bl	196cc <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   19c36:	f7ff fe7f 	bl	19938 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   19c3a:	2801      	cmp	r0, #1
   19c3c:	dd05      	ble.n	19c4a <z_set_timeout_expiry+0x4a>
   19c3e:	42a0      	cmp	r0, r4
   19c40:	dd03      	ble.n	19c4a <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   19c42:	4629      	mov	r1, r5
   19c44:	4620      	mov	r0, r4
   19c46:	f7f2 fad5 	bl	c1f4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19c4a:	4809      	ldr	r0, [pc, #36]	; (19c70 <z_set_timeout_expiry+0x70>)
   19c4c:	f7ff fd30 	bl	196b0 <z_spin_unlock_valid>
   19c50:	b940      	cbnz	r0, 19c64 <z_set_timeout_expiry+0x64>
   19c52:	4908      	ldr	r1, [pc, #32]	; (19c74 <z_set_timeout_expiry+0x74>)
   19c54:	4808      	ldr	r0, [pc, #32]	; (19c78 <z_set_timeout_expiry+0x78>)
   19c56:	22a7      	movs	r2, #167	; 0xa7
   19c58:	f000 fd08 	bl	1a66c <printk>
   19c5c:	21a7      	movs	r1, #167	; 0xa7
   19c5e:	4805      	ldr	r0, [pc, #20]	; (19c74 <z_set_timeout_expiry+0x74>)
   19c60:	f000 ffaa 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   19c64:	f386 8811 	msr	BASEPRI, r6
   19c68:	f3bf 8f6f 	isb	sy
		}
	}
}
   19c6c:	bd70      	pop	{r4, r5, r6, pc}
   19c6e:	bf00      	nop
   19c70:	2000b15c 	.word	0x2000b15c
   19c74:	0001fbf1 	.word	0x0001fbf1
   19c78:	0001fbb7 	.word	0x0001fbb7

00019c7c <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   19c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19c80:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   19c82:	f7fe fe61 	bl	18948 <z_time_slice>
	__asm__ volatile(
   19c86:	f04f 0320 	mov.w	r3, #32
   19c8a:	f3ef 8511 	mrs	r5, BASEPRI
   19c8e:	f383 8811 	msr	BASEPRI, r3
   19c92:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19c96:	4842      	ldr	r0, [pc, #264]	; (19da0 <z_clock_announce+0x124>)
   19c98:	f7ff fcfc 	bl	19694 <z_spin_lock_valid>
   19c9c:	b940      	cbnz	r0, 19cb0 <z_clock_announce+0x34>
   19c9e:	4941      	ldr	r1, [pc, #260]	; (19da4 <z_clock_announce+0x128>)
   19ca0:	4841      	ldr	r0, [pc, #260]	; (19da8 <z_clock_announce+0x12c>)
   19ca2:	227c      	movs	r2, #124	; 0x7c
   19ca4:	f000 fce2 	bl	1a66c <printk>
   19ca8:	217c      	movs	r1, #124	; 0x7c
   19caa:	483e      	ldr	r0, [pc, #248]	; (19da4 <z_clock_announce+0x128>)
   19cac:	f000 ff84 	bl	1abb8 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   19cb0:	4f3e      	ldr	r7, [pc, #248]	; (19dac <z_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   19cb2:	483b      	ldr	r0, [pc, #236]	; (19da0 <z_clock_announce+0x124>)
	return list->head == list;
   19cb4:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 19db0 <z_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   19cb8:	4e3e      	ldr	r6, [pc, #248]	; (19db4 <z_clock_announce+0x138>)
   19cba:	f7ff fd07 	bl	196cc <z_spin_lock_set_owner>
	announce_remaining = ticks;
   19cbe:	603c      	str	r4, [r7, #0]
   19cc0:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   19cc4:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19cc6:	4544      	cmp	r4, r8
   19cc8:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   19ccc:	e9d6 1e00 	ldrd	r1, lr, [r6]
   19cd0:	d00b      	beq.n	19cea <z_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   19cd2:	b154      	cbz	r4, 19cea <z_clock_announce+0x6e>
   19cd4:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   19cd8:	429a      	cmp	r2, r3
   19cda:	eb70 090c 	sbcs.w	r9, r0, ip
   19cde:	da23      	bge.n	19d28 <z_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   19ce0:	1a9b      	subs	r3, r3, r2
   19ce2:	eb6c 0c00 	sbc.w	ip, ip, r0
   19ce6:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   19cea:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   19cec:	1852      	adds	r2, r2, r1
   19cee:	eb4e 0000 	adc.w	r0, lr, r0
   19cf2:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   19cf6:	603c      	str	r4, [r7, #0]

	z_clock_set_timeout(next_timeout(), false);
   19cf8:	f7ff fe1e 	bl	19938 <next_timeout>
   19cfc:	4621      	mov	r1, r4
   19cfe:	f7f2 fa79 	bl	c1f4 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19d02:	4827      	ldr	r0, [pc, #156]	; (19da0 <z_clock_announce+0x124>)
   19d04:	f7ff fcd4 	bl	196b0 <z_spin_unlock_valid>
   19d08:	b940      	cbnz	r0, 19d1c <z_clock_announce+0xa0>
   19d0a:	4926      	ldr	r1, [pc, #152]	; (19da4 <z_clock_announce+0x128>)
   19d0c:	4826      	ldr	r0, [pc, #152]	; (19da8 <z_clock_announce+0x12c>)
   19d0e:	22a7      	movs	r2, #167	; 0xa7
   19d10:	f000 fcac 	bl	1a66c <printk>
   19d14:	21a7      	movs	r1, #167	; 0xa7
   19d16:	4823      	ldr	r0, [pc, #140]	; (19da4 <z_clock_announce+0x128>)
   19d18:	f000 ff4e 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   19d1c:	f385 8811 	msr	BASEPRI, r5
   19d20:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   19d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   19d28:	1859      	adds	r1, r3, r1
   19d2a:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   19d2e:	1ad3      	subs	r3, r2, r3
   19d30:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   19d32:	2200      	movs	r2, #0
   19d34:	2300      	movs	r3, #0
		curr_tick += dt;
   19d36:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   19d3a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   19d3e:	4620      	mov	r0, r4
   19d40:	f7ff fe22 	bl	19988 <remove_timeout>
   19d44:	4816      	ldr	r0, [pc, #88]	; (19da0 <z_clock_announce+0x124>)
   19d46:	f7ff fcb3 	bl	196b0 <z_spin_unlock_valid>
   19d4a:	b940      	cbnz	r0, 19d5e <z_clock_announce+0xe2>
   19d4c:	4915      	ldr	r1, [pc, #84]	; (19da4 <z_clock_announce+0x128>)
   19d4e:	4816      	ldr	r0, [pc, #88]	; (19da8 <z_clock_announce+0x12c>)
   19d50:	22a7      	movs	r2, #167	; 0xa7
   19d52:	f000 fc8b 	bl	1a66c <printk>
   19d56:	21a7      	movs	r1, #167	; 0xa7
   19d58:	4812      	ldr	r0, [pc, #72]	; (19da4 <z_clock_announce+0x128>)
   19d5a:	f000 ff2d 	bl	1abb8 <assert_post_action>
   19d5e:	f385 8811 	msr	BASEPRI, r5
   19d62:	f3bf 8f6f 	isb	sy
		t->fn(t);
   19d66:	4620      	mov	r0, r4
   19d68:	68a3      	ldr	r3, [r4, #8]
   19d6a:	4798      	blx	r3
	__asm__ volatile(
   19d6c:	f04f 0320 	mov.w	r3, #32
   19d70:	f3ef 8511 	mrs	r5, BASEPRI
   19d74:	f383 8811 	msr	BASEPRI, r3
   19d78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19d7c:	4808      	ldr	r0, [pc, #32]	; (19da0 <z_clock_announce+0x124>)
   19d7e:	f7ff fc89 	bl	19694 <z_spin_lock_valid>
   19d82:	b940      	cbnz	r0, 19d96 <z_clock_announce+0x11a>
   19d84:	4907      	ldr	r1, [pc, #28]	; (19da4 <z_clock_announce+0x128>)
   19d86:	4808      	ldr	r0, [pc, #32]	; (19da8 <z_clock_announce+0x12c>)
   19d88:	227c      	movs	r2, #124	; 0x7c
   19d8a:	f000 fc6f 	bl	1a66c <printk>
   19d8e:	217c      	movs	r1, #124	; 0x7c
   19d90:	4804      	ldr	r0, [pc, #16]	; (19da4 <z_clock_announce+0x128>)
   19d92:	f000 ff11 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   19d96:	4802      	ldr	r0, [pc, #8]	; (19da0 <z_clock_announce+0x124>)
   19d98:	f7ff fc98 	bl	196cc <z_spin_lock_set_owner>
	return k;
   19d9c:	e790      	b.n	19cc0 <z_clock_announce+0x44>
   19d9e:	bf00      	nop
   19da0:	2000b15c 	.word	0x2000b15c
   19da4:	0001fbf1 	.word	0x0001fbf1
   19da8:	0001fbb7 	.word	0x0001fbb7
   19dac:	2000b158 	.word	0x2000b158
   19db0:	20008564 	.word	0x20008564
   19db4:	2000a610 	.word	0x2000a610

00019db8 <z_tick_get>:

int64_t z_tick_get(void)
{
   19db8:	b570      	push	{r4, r5, r6, lr}
   19dba:	f04f 0320 	mov.w	r3, #32
   19dbe:	f3ef 8611 	mrs	r6, BASEPRI
   19dc2:	f383 8811 	msr	BASEPRI, r3
   19dc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19dca:	4816      	ldr	r0, [pc, #88]	; (19e24 <z_tick_get+0x6c>)
   19dcc:	f7ff fc62 	bl	19694 <z_spin_lock_valid>
   19dd0:	b940      	cbnz	r0, 19de4 <z_tick_get+0x2c>
   19dd2:	4915      	ldr	r1, [pc, #84]	; (19e28 <z_tick_get+0x70>)
   19dd4:	4815      	ldr	r0, [pc, #84]	; (19e2c <z_tick_get+0x74>)
   19dd6:	227c      	movs	r2, #124	; 0x7c
   19dd8:	f000 fc48 	bl	1a66c <printk>
   19ddc:	217c      	movs	r1, #124	; 0x7c
   19dde:	4812      	ldr	r0, [pc, #72]	; (19e28 <z_tick_get+0x70>)
   19de0:	f000 feea 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   19de4:	480f      	ldr	r0, [pc, #60]	; (19e24 <z_tick_get+0x6c>)
   19de6:	f7ff fc71 	bl	196cc <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   19dea:	f7f2 fa35 	bl	c258 <z_clock_elapsed>
   19dee:	4b10      	ldr	r3, [pc, #64]	; (19e30 <z_tick_get+0x78>)
   19df0:	e9d3 4500 	ldrd	r4, r5, [r3]
   19df4:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19df6:	480b      	ldr	r0, [pc, #44]	; (19e24 <z_tick_get+0x6c>)
   19df8:	f145 0500 	adc.w	r5, r5, #0
   19dfc:	f7ff fc58 	bl	196b0 <z_spin_unlock_valid>
   19e00:	b940      	cbnz	r0, 19e14 <z_tick_get+0x5c>
   19e02:	4909      	ldr	r1, [pc, #36]	; (19e28 <z_tick_get+0x70>)
   19e04:	4809      	ldr	r0, [pc, #36]	; (19e2c <z_tick_get+0x74>)
   19e06:	22a7      	movs	r2, #167	; 0xa7
   19e08:	f000 fc30 	bl	1a66c <printk>
   19e0c:	21a7      	movs	r1, #167	; 0xa7
   19e0e:	4806      	ldr	r0, [pc, #24]	; (19e28 <z_tick_get+0x70>)
   19e10:	f000 fed2 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   19e14:	f386 8811 	msr	BASEPRI, r6
   19e18:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   19e1c:	4620      	mov	r0, r4
   19e1e:	4629      	mov	r1, r5
   19e20:	bd70      	pop	{r4, r5, r6, pc}
   19e22:	bf00      	nop
   19e24:	2000b15c 	.word	0x2000b15c
   19e28:	0001fbf1 	.word	0x0001fbf1
   19e2c:	0001fbb7 	.word	0x0001fbb7
   19e30:	2000a610 	.word	0x2000a610

00019e34 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   19e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   19e38:	6884      	ldr	r4, [r0, #8]
{
   19e3a:	4605      	mov	r5, r0
   19e3c:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   19e3e:	b1b4      	cbz	r4, 19e6e <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   19e40:	7863      	ldrb	r3, [r4, #1]
   19e42:	2b01      	cmp	r3, #1
   19e44:	d145      	bne.n	19ed2 <signal_poll_event+0x9e>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   19e46:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   19e4a:	d10a      	bne.n	19e62 <signal_poll_event+0x2e>
   19e4c:	22e3      	movs	r2, #227	; 0xe3
   19e4e:	492d      	ldr	r1, [pc, #180]	; (19f04 <signal_poll_event+0xd0>)
   19e50:	482d      	ldr	r0, [pc, #180]	; (19f08 <signal_poll_event+0xd4>)
   19e52:	f000 fc0b 	bl	1a66c <printk>
   19e56:	21e3      	movs	r1, #227	; 0xe3
   19e58:	482a      	ldr	r0, [pc, #168]	; (19f04 <signal_poll_event+0xd0>)
   19e5a:	f000 fead 	bl	1abb8 <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   19e5e:	7b7b      	ldrb	r3, [r7, #13]
   19e60:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
   19e62:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   19e66:	f013 0302 	ands.w	r3, r3, #2
   19e6a:	d10a      	bne.n	19e82 <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   19e6c:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   19e6e:	2000      	movs	r0, #0
	event->state |= state;
   19e70:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   19e72:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   19e74:	f3c3 3104 	ubfx	r1, r3, #12, #5
   19e78:	430e      	orrs	r6, r1
   19e7a:	f366 3310 	bfi	r3, r6, #12, #5
   19e7e:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   19e80:	e00b      	b.n	19e9a <signal_poll_event+0x66>
	if (z_is_thread_timeout_expired(thread)) {
   19e82:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   19e86:	f1b3 3fff 	cmp.w	r3, #4294967295
   19e8a:	bf08      	it	eq
   19e8c:	f112 0f02 	cmneq.w	r2, #2
   19e90:	d105      	bne.n	19e9e <signal_poll_event+0x6a>
		poller->is_polling = false;
   19e92:	2300      	movs	r3, #0
		return -EAGAIN;
   19e94:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   19e98:	7023      	strb	r3, [r4, #0]
}
   19e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   19e9e:	4638      	mov	r0, r7
   19ea0:	f7fe fb30 	bl	18504 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   19ea4:	2e08      	cmp	r6, #8
   19ea6:	bf0c      	ite	eq
   19ea8:	f06f 0303 	mvneq.w	r3, #3
   19eac:	2300      	movne	r3, #0
   19eae:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19eb0:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   19eb4:	06db      	lsls	r3, r3, #27
   19eb6:	d104      	bne.n	19ec2 <signal_poll_event+0x8e>
	if (!z_is_thread_ready(thread)) {
   19eb8:	f854 8c54 	ldr.w	r8, [r4, #-84]
   19ebc:	f1b8 0f00 	cmp.w	r8, #0
   19ec0:	d001      	beq.n	19ec6 <signal_poll_event+0x92>
		poller->is_polling = false;
   19ec2:	2300      	movs	r3, #0
   19ec4:	e7d2      	b.n	19e6c <signal_poll_event+0x38>
	z_ready_thread(thread);
   19ec6:	4638      	mov	r0, r7
   19ec8:	f7fe fc36 	bl	18738 <z_ready_thread>
		poller->is_polling = false;
   19ecc:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   19ed0:	e7cd      	b.n	19e6e <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   19ed2:	2b02      	cmp	r3, #2
   19ed4:	d1f5      	bne.n	19ec2 <signal_poll_event+0x8e>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   19ed6:	7823      	ldrb	r3, [r4, #0]
   19ed8:	2b00      	cmp	r3, #0
   19eda:	d0c8      	beq.n	19e6e <signal_poll_event+0x3a>
   19edc:	f854 7c04 	ldr.w	r7, [r4, #-4]
   19ee0:	b177      	cbz	r7, 19f00 <signal_poll_event+0xcc>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   19ee2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   19ee6:	f1a4 0910 	sub.w	r9, r4, #16
   19eea:	f104 0010 	add.w	r0, r4, #16
   19eee:	f7ff fe15 	bl	19b1c <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   19ef2:	4649      	mov	r1, r9
   19ef4:	4638      	mov	r0, r7
		twork->poll_result = 0;
   19ef6:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   19efa:	f004 f875 	bl	1dfe8 <k_work_submit_to_queue>
   19efe:	e7e5      	b.n	19ecc <signal_poll_event+0x98>
		poller->is_polling = false;
   19f00:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   19f02:	e7b4      	b.n	19e6e <signal_poll_event+0x3a>
   19f04:	00022b40 	.word	0x00022b40
   19f08:	0001fbb7 	.word	0x0001fbb7

00019f0c <register_events>:
{
   19f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   19f10:	2600      	movs	r6, #0
{
   19f12:	4614      	mov	r4, r2
   19f14:	4681      	mov	r9, r0
	int events_registered = 0;
   19f16:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19f18:	f8df a188 	ldr.w	sl, [pc, #392]	; 1a0a4 <register_events+0x198>
   19f1c:	4f62      	ldr	r7, [pc, #392]	; (1a0a8 <register_events+0x19c>)
   19f1e:	4d63      	ldr	r5, [pc, #396]	; (1a0ac <register_events+0x1a0>)
{
   19f20:	9100      	str	r1, [sp, #0]
   19f22:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   19f24:	9b00      	ldr	r3, [sp, #0]
   19f26:	429e      	cmp	r6, r3
   19f28:	db03      	blt.n	19f32 <register_events+0x26>
}
   19f2a:	4640      	mov	r0, r8
   19f2c:	b003      	add	sp, #12
   19f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   19f32:	f04f 0220 	mov.w	r2, #32
   19f36:	f3ef 8b11 	mrs	fp, BASEPRI
   19f3a:	f382 8811 	msr	BASEPRI, r2
   19f3e:	f3bf 8f6f 	isb	sy
   19f42:	4650      	mov	r0, sl
   19f44:	f7ff fba6 	bl	19694 <z_spin_lock_valid>
   19f48:	b940      	cbnz	r0, 19f5c <register_events+0x50>
   19f4a:	4639      	mov	r1, r7
   19f4c:	4628      	mov	r0, r5
   19f4e:	227c      	movs	r2, #124	; 0x7c
   19f50:	f000 fb8c 	bl	1a66c <printk>
   19f54:	217c      	movs	r1, #124	; 0x7c
   19f56:	4638      	mov	r0, r7
   19f58:	f000 fe2e 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   19f5c:	4650      	mov	r0, sl
   19f5e:	f7ff fbb5 	bl	196cc <z_spin_lock_set_owner>
	switch (event->type) {
   19f62:	f899 200d 	ldrb.w	r2, [r9, #13]
   19f66:	f002 020f 	and.w	r2, r2, #15
   19f6a:	2a04      	cmp	r2, #4
   19f6c:	d848      	bhi.n	1a000 <register_events+0xf4>
   19f6e:	e8df f002 	tbb	[pc, r2]
   19f72:	402f      	.short	0x402f
   19f74:	4703      	.short	0x4703
   19f76:	2b          	.byte	0x2b
   19f77:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   19f78:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19f7c:	6892      	ldr	r2, [r2, #8]
   19f7e:	b33a      	cbz	r2, 19fd0 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   19f80:	2102      	movs	r1, #2
	event->poller = NULL;
   19f82:	2000      	movs	r0, #0
	event->state |= state;
   19f84:	f8d9 200c 	ldr.w	r2, [r9, #12]
	event->poller = NULL;
   19f88:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   19f8c:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   19f90:	ea41 010c 	orr.w	r1, r1, ip
   19f94:	f361 3210 	bfi	r2, r1, #12, #5
   19f98:	f8c9 200c 	str.w	r2, [r9, #12]
			poller->is_polling = false;
   19f9c:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19f9e:	4650      	mov	r0, sl
   19fa0:	f7ff fb86 	bl	196b0 <z_spin_unlock_valid>
   19fa4:	b940      	cbnz	r0, 19fb8 <register_events+0xac>
   19fa6:	4639      	mov	r1, r7
   19fa8:	4628      	mov	r0, r5
   19faa:	22a7      	movs	r2, #167	; 0xa7
   19fac:	f000 fb5e 	bl	1a66c <printk>
   19fb0:	21a7      	movs	r1, #167	; 0xa7
   19fb2:	4638      	mov	r0, r7
   19fb4:	f000 fe00 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   19fb8:	f38b 8811 	msr	BASEPRI, fp
   19fbc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   19fc0:	3601      	adds	r6, #1
   19fc2:	f109 0914 	add.w	r9, r9, #20
   19fc6:	e7ad      	b.n	19f24 <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   19fc8:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19fcc:	6812      	ldr	r2, [r2, #0]
   19fce:	bb0a      	cbnz	r2, 1a014 <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   19fd0:	9b01      	ldr	r3, [sp, #4]
   19fd2:	2b00      	cmp	r3, #0
   19fd4:	d1e3      	bne.n	19f9e <register_events+0x92>
   19fd6:	7822      	ldrb	r2, [r4, #0]
   19fd8:	2a00      	cmp	r2, #0
   19fda:	d0e0      	beq.n	19f9e <register_events+0x92>
	switch (event->type) {
   19fdc:	f899 200d 	ldrb.w	r2, [r9, #13]
   19fe0:	f002 020f 	and.w	r2, r2, #15
   19fe4:	2a04      	cmp	r2, #4
   19fe6:	d852      	bhi.n	1a08e <register_events+0x182>
   19fe8:	e8df f002 	tbb	[pc, r2]
   19fec:	51164029 	.word	0x51164029
   19ff0:	2e          	.byte	0x2e
   19ff1:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   19ff2:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19ff6:	6892      	ldr	r2, [r2, #8]
   19ff8:	2a00      	cmp	r2, #0
   19ffa:	d0e9      	beq.n	19fd0 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   19ffc:	2101      	movs	r1, #1
   19ffe:	e7c0      	b.n	19f82 <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   1a000:	4628      	mov	r0, r5
   1a002:	2254      	movs	r2, #84	; 0x54
   1a004:	492a      	ldr	r1, [pc, #168]	; (1a0b0 <register_events+0x1a4>)
   1a006:	f000 fb31 	bl	1a66c <printk>
   1a00a:	2154      	movs	r1, #84	; 0x54
   1a00c:	4828      	ldr	r0, [pc, #160]	; (1a0b0 <register_events+0x1a4>)
   1a00e:	f000 fdd3 	bl	1abb8 <assert_post_action>
		break;
   1a012:	e7dd      	b.n	19fd0 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1a014:	2104      	movs	r1, #4
   1a016:	e7b4      	b.n	19f82 <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1a018:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a01c:	b942      	cbnz	r2, 1a030 <register_events+0x124>
   1a01e:	4628      	mov	r0, r5
   1a020:	4923      	ldr	r1, [pc, #140]	; (1a0b0 <register_events+0x1a4>)
   1a022:	227e      	movs	r2, #126	; 0x7e
   1a024:	f000 fb22 	bl	1a66c <printk>
   1a028:	217e      	movs	r1, #126	; 0x7e
   1a02a:	4821      	ldr	r0, [pc, #132]	; (1a0b0 <register_events+0x1a4>)
   1a02c:	f000 fdc4 	bl	1abb8 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   1a030:	4622      	mov	r2, r4
   1a032:	4649      	mov	r1, r9
   1a034:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a038:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   1a03a:	f003 ffe9 	bl	1e010 <add_event>
	event->poller = poller;
   1a03e:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   1a042:	f108 0801 	add.w	r8, r8, #1
   1a046:	e7aa      	b.n	19f9e <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1a048:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a04c:	b942      	cbnz	r2, 1a060 <register_events+0x154>
   1a04e:	4628      	mov	r0, r5
   1a050:	4917      	ldr	r1, [pc, #92]	; (1a0b0 <register_events+0x1a4>)
   1a052:	2282      	movs	r2, #130	; 0x82
   1a054:	f000 fb0a 	bl	1a66c <printk>
   1a058:	2182      	movs	r1, #130	; 0x82
   1a05a:	4815      	ldr	r0, [pc, #84]	; (1a0b0 <register_events+0x1a4>)
   1a05c:	f000 fdac 	bl	1abb8 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   1a060:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a064:	4622      	mov	r2, r4
   1a066:	4649      	mov	r1, r9
   1a068:	3014      	adds	r0, #20
   1a06a:	e7e6      	b.n	1a03a <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a06c:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1a070:	b942      	cbnz	r2, 1a084 <register_events+0x178>
   1a072:	4628      	mov	r0, r5
   1a074:	490e      	ldr	r1, [pc, #56]	; (1a0b0 <register_events+0x1a4>)
   1a076:	2286      	movs	r2, #134	; 0x86
   1a078:	f000 faf8 	bl	1a66c <printk>
   1a07c:	2186      	movs	r1, #134	; 0x86
   1a07e:	480c      	ldr	r0, [pc, #48]	; (1a0b0 <register_events+0x1a4>)
   1a080:	f000 fd9a 	bl	1abb8 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   1a084:	4622      	mov	r2, r4
   1a086:	4649      	mov	r1, r9
   1a088:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1a08c:	e7d5      	b.n	1a03a <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   1a08e:	4628      	mov	r0, r5
   1a090:	228d      	movs	r2, #141	; 0x8d
   1a092:	4907      	ldr	r1, [pc, #28]	; (1a0b0 <register_events+0x1a4>)
   1a094:	f000 faea 	bl	1a66c <printk>
   1a098:	218d      	movs	r1, #141	; 0x8d
   1a09a:	4805      	ldr	r0, [pc, #20]	; (1a0b0 <register_events+0x1a4>)
   1a09c:	f000 fd8c 	bl	1abb8 <assert_post_action>
		break;
   1a0a0:	e7cd      	b.n	1a03e <register_events+0x132>
   1a0a2:	bf00      	nop
   1a0a4:	2000b160 	.word	0x2000b160
   1a0a8:	0001fbf1 	.word	0x0001fbf1
   1a0ac:	0001fbb7 	.word	0x0001fbb7
   1a0b0:	00022b40 	.word	0x00022b40

0001a0b4 <clear_event_registrations>:
{
   1a0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a0b8:	2414      	movs	r4, #20
   1a0ba:	4617      	mov	r7, r2
	while (num_events--) {
   1a0bc:	460e      	mov	r6, r1
   1a0be:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   1a0c2:	4d3d      	ldr	r5, [pc, #244]	; (1a1b8 <clear_event_registrations+0x104>)
   1a0c4:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1a1bc <clear_event_registrations+0x108>
   1a0c8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1a1c0 <clear_event_registrations+0x10c>
	while (num_events--) {
   1a0cc:	b90e      	cbnz	r6, 1a0d2 <clear_event_registrations+0x1e>
}
   1a0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   1a0d2:	2300      	movs	r3, #0
   1a0d4:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   1a0d8:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   1a0dc:	f1a4 0a14 	sub.w	sl, r4, #20
   1a0e0:	f003 030f 	and.w	r3, r3, #15
   1a0e4:	2b04      	cmp	r3, #4
   1a0e6:	d831      	bhi.n	1a14c <clear_event_registrations+0x98>
   1a0e8:	e8df f003 	tbb	[pc, r3]
   1a0ec:	30032539 	.word	0x30032539
   1a0f0:	1a          	.byte	0x1a
   1a0f1:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1a0f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a0f6:	b943      	cbnz	r3, 1a10a <clear_event_registrations+0x56>
   1a0f8:	4629      	mov	r1, r5
   1a0fa:	229d      	movs	r2, #157	; 0x9d
   1a0fc:	4640      	mov	r0, r8
   1a0fe:	f000 fab5 	bl	1a66c <printk>
   1a102:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a104:	4628      	mov	r0, r5
   1a106:	f000 fd57 	bl	1abb8 <assert_post_action>
	return node->next != NULL;
   1a10a:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1a10e:	b333      	cbz	r3, 1a15e <clear_event_registrations+0xaa>
	node->prev->next = node->next;
   1a110:	f854 2c10 	ldr.w	r2, [r4, #-16]
   1a114:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a116:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a118:	2300      	movs	r3, #0
	node->prev = NULL;
   1a11a:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   1a11e:	e01e      	b.n	1a15e <clear_event_registrations+0xaa>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   1a120:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a124:	2b00      	cmp	r3, #0
   1a126:	d1f0      	bne.n	1a10a <clear_event_registrations+0x56>
   1a128:	4629      	mov	r1, r5
   1a12a:	22a1      	movs	r2, #161	; 0xa1
   1a12c:	4640      	mov	r0, r8
   1a12e:	f000 fa9d 	bl	1a66c <printk>
   1a132:	21a1      	movs	r1, #161	; 0xa1
   1a134:	e7e6      	b.n	1a104 <clear_event_registrations+0x50>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1a136:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a13a:	2b00      	cmp	r3, #0
   1a13c:	d1e5      	bne.n	1a10a <clear_event_registrations+0x56>
   1a13e:	4629      	mov	r1, r5
   1a140:	22a5      	movs	r2, #165	; 0xa5
   1a142:	4640      	mov	r0, r8
   1a144:	f000 fa92 	bl	1a66c <printk>
   1a148:	21a5      	movs	r1, #165	; 0xa5
   1a14a:	e7db      	b.n	1a104 <clear_event_registrations+0x50>
		__ASSERT(false, "invalid event type\n");
   1a14c:	4629      	mov	r1, r5
   1a14e:	4640      	mov	r0, r8
   1a150:	22ac      	movs	r2, #172	; 0xac
   1a152:	f000 fa8b 	bl	1a66c <printk>
   1a156:	21ac      	movs	r1, #172	; 0xac
   1a158:	4628      	mov	r0, r5
   1a15a:	f000 fd2d 	bl	1abb8 <assert_post_action>
   1a15e:	4648      	mov	r0, r9
   1a160:	f7ff faa6 	bl	196b0 <z_spin_unlock_valid>
   1a164:	b940      	cbnz	r0, 1a178 <clear_event_registrations+0xc4>
   1a166:	4640      	mov	r0, r8
   1a168:	4916      	ldr	r1, [pc, #88]	; (1a1c4 <clear_event_registrations+0x110>)
   1a16a:	22a7      	movs	r2, #167	; 0xa7
   1a16c:	f000 fa7e 	bl	1a66c <printk>
   1a170:	21a7      	movs	r1, #167	; 0xa7
   1a172:	4814      	ldr	r0, [pc, #80]	; (1a1c4 <clear_event_registrations+0x110>)
   1a174:	f000 fd20 	bl	1abb8 <assert_post_action>
   1a178:	f387 8811 	msr	BASEPRI, r7
   1a17c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a180:	f04f 0320 	mov.w	r3, #32
   1a184:	f3ef 8711 	mrs	r7, BASEPRI
   1a188:	f383 8811 	msr	BASEPRI, r3
   1a18c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a190:	4648      	mov	r0, r9
   1a192:	f7ff fa7f 	bl	19694 <z_spin_lock_valid>
   1a196:	b940      	cbnz	r0, 1a1aa <clear_event_registrations+0xf6>
   1a198:	4640      	mov	r0, r8
   1a19a:	490a      	ldr	r1, [pc, #40]	; (1a1c4 <clear_event_registrations+0x110>)
   1a19c:	227c      	movs	r2, #124	; 0x7c
   1a19e:	f000 fa65 	bl	1a66c <printk>
   1a1a2:	217c      	movs	r1, #124	; 0x7c
   1a1a4:	4807      	ldr	r0, [pc, #28]	; (1a1c4 <clear_event_registrations+0x110>)
   1a1a6:	f000 fd07 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a1aa:	4648      	mov	r0, r9
   1a1ac:	f7ff fa8e 	bl	196cc <z_spin_lock_set_owner>
	return k;
   1a1b0:	4654      	mov	r4, sl
   1a1b2:	3e01      	subs	r6, #1
   1a1b4:	e78a      	b.n	1a0cc <clear_event_registrations+0x18>
   1a1b6:	bf00      	nop
   1a1b8:	00022b40 	.word	0x00022b40
   1a1bc:	0001fbb7 	.word	0x0001fbb7
   1a1c0:	2000b160 	.word	0x2000b160
   1a1c4:	0001fbf1 	.word	0x0001fbf1

0001a1c8 <k_poll_event_init>:
{
   1a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a1ca:	4605      	mov	r5, r0
   1a1cc:	460f      	mov	r7, r1
   1a1ce:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   1a1d0:	4614      	mov	r4, r2
   1a1d2:	b142      	cbz	r2, 1a1e6 <k_poll_event_init+0x1e>
   1a1d4:	4915      	ldr	r1, [pc, #84]	; (1a22c <k_poll_event_init+0x64>)
   1a1d6:	4816      	ldr	r0, [pc, #88]	; (1a230 <k_poll_event_init+0x68>)
   1a1d8:	222d      	movs	r2, #45	; 0x2d
   1a1da:	f000 fa47 	bl	1a66c <printk>
   1a1de:	212d      	movs	r1, #45	; 0x2d
   1a1e0:	4812      	ldr	r0, [pc, #72]	; (1a22c <k_poll_event_init+0x64>)
   1a1e2:	f000 fce9 	bl	1abb8 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1a1e6:	2f0f      	cmp	r7, #15
   1a1e8:	d908      	bls.n	1a1fc <k_poll_event_init+0x34>
   1a1ea:	4910      	ldr	r1, [pc, #64]	; (1a22c <k_poll_event_init+0x64>)
   1a1ec:	4810      	ldr	r0, [pc, #64]	; (1a230 <k_poll_event_init+0x68>)
   1a1ee:	222f      	movs	r2, #47	; 0x2f
   1a1f0:	f000 fa3c 	bl	1a66c <printk>
   1a1f4:	212f      	movs	r1, #47	; 0x2f
   1a1f6:	480d      	ldr	r0, [pc, #52]	; (1a22c <k_poll_event_init+0x64>)
   1a1f8:	f000 fcde 	bl	1abb8 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   1a1fc:	b946      	cbnz	r6, 1a210 <k_poll_event_init+0x48>
   1a1fe:	490b      	ldr	r1, [pc, #44]	; (1a22c <k_poll_event_init+0x64>)
   1a200:	480b      	ldr	r0, [pc, #44]	; (1a230 <k_poll_event_init+0x68>)
   1a202:	2230      	movs	r2, #48	; 0x30
   1a204:	f000 fa32 	bl	1a66c <printk>
   1a208:	2130      	movs	r1, #48	; 0x30
   1a20a:	4808      	ldr	r0, [pc, #32]	; (1a22c <k_poll_event_init+0x64>)
   1a20c:	f000 fcd4 	bl	1abb8 <assert_post_action>
	event->poller = NULL;
   1a210:	2300      	movs	r3, #0
	event->type = type;
   1a212:	0464      	lsls	r4, r4, #17
   1a214:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   1a216:	60ab      	str	r3, [r5, #8]
	event->type = type;
   1a218:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   1a21c:	7b2b      	ldrb	r3, [r5, #12]
   1a21e:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   1a222:	433c      	orrs	r4, r7
   1a224:	431c      	orrs	r4, r3
	event->obj = obj;
   1a226:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   1a22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a22c:	00022b40 	.word	0x00022b40
   1a230:	0001fbb7 	.word	0x0001fbb7

0001a234 <z_impl_k_poll>:
{
   1a234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a238:	461d      	mov	r5, r3
	struct z_poller *poller = &_current->poller;
   1a23a:	4b64      	ldr	r3, [pc, #400]	; (1a3cc <z_impl_k_poll+0x198>)
{
   1a23c:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   1a23e:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
   1a240:	2301      	movs	r3, #1
{
   1a242:	4688      	mov	r8, r1
   1a244:	4616      	mov	r6, r2
   1a246:	b085      	sub	sp, #20
	struct z_poller *poller = &_current->poller;
   1a248:	f107 096c 	add.w	r9, r7, #108	; 0x6c
	poller->is_polling = true;
   1a24c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	poller->mode = MODE_POLL;
   1a250:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   1a254:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   1a258:	b153      	cbz	r3, 1a270 <z_impl_k_poll+0x3c>
   1a25a:	495d      	ldr	r1, [pc, #372]	; (1a3d0 <z_impl_k_poll+0x19c>)
   1a25c:	485d      	ldr	r0, [pc, #372]	; (1a3d4 <z_impl_k_poll+0x1a0>)
   1a25e:	f44f 7282 	mov.w	r2, #260	; 0x104
   1a262:	f000 fa03 	bl	1a66c <printk>
   1a266:	f44f 7182 	mov.w	r1, #260	; 0x104
   1a26a:	4859      	ldr	r0, [pc, #356]	; (1a3d0 <z_impl_k_poll+0x19c>)
   1a26c:	f000 fca4 	bl	1abb8 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   1a270:	b954      	cbnz	r4, 1a288 <z_impl_k_poll+0x54>
   1a272:	4957      	ldr	r1, [pc, #348]	; (1a3d0 <z_impl_k_poll+0x19c>)
   1a274:	4857      	ldr	r0, [pc, #348]	; (1a3d4 <z_impl_k_poll+0x1a0>)
   1a276:	f240 1205 	movw	r2, #261	; 0x105
   1a27a:	f000 f9f7 	bl	1a66c <printk>
   1a27e:	f240 1105 	movw	r1, #261	; 0x105
   1a282:	4853      	ldr	r0, [pc, #332]	; (1a3d0 <z_impl_k_poll+0x19c>)
   1a284:	f000 fc98 	bl	1abb8 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   1a288:	f1b8 0f00 	cmp.w	r8, #0
   1a28c:	da0a      	bge.n	1a2a4 <z_impl_k_poll+0x70>
   1a28e:	4950      	ldr	r1, [pc, #320]	; (1a3d0 <z_impl_k_poll+0x19c>)
   1a290:	4850      	ldr	r0, [pc, #320]	; (1a3d4 <z_impl_k_poll+0x1a0>)
   1a292:	f44f 7283 	mov.w	r2, #262	; 0x106
   1a296:	f000 f9e9 	bl	1a66c <printk>
   1a29a:	f44f 7183 	mov.w	r1, #262	; 0x106
   1a29e:	484c      	ldr	r0, [pc, #304]	; (1a3d0 <z_impl_k_poll+0x19c>)
   1a2a0:	f000 fc8a 	bl	1abb8 <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   1a2a4:	ea56 0305 	orrs.w	r3, r6, r5
   1a2a8:	bf0c      	ite	eq
   1a2aa:	2301      	moveq	r3, #1
   1a2ac:	2300      	movne	r3, #0
   1a2ae:	4641      	mov	r1, r8
   1a2b0:	464a      	mov	r2, r9
   1a2b2:	4620      	mov	r0, r4
   1a2b4:	f7ff fe2a 	bl	19f0c <register_events>
   1a2b8:	4680      	mov	r8, r0
   1a2ba:	f04f 0320 	mov.w	r3, #32
   1a2be:	f3ef 8911 	mrs	r9, BASEPRI
   1a2c2:	f383 8811 	msr	BASEPRI, r3
   1a2c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a2ca:	4843      	ldr	r0, [pc, #268]	; (1a3d8 <z_impl_k_poll+0x1a4>)
   1a2cc:	f7ff f9e2 	bl	19694 <z_spin_lock_valid>
   1a2d0:	b940      	cbnz	r0, 1a2e4 <z_impl_k_poll+0xb0>
   1a2d2:	4942      	ldr	r1, [pc, #264]	; (1a3dc <z_impl_k_poll+0x1a8>)
   1a2d4:	483f      	ldr	r0, [pc, #252]	; (1a3d4 <z_impl_k_poll+0x1a0>)
   1a2d6:	227c      	movs	r2, #124	; 0x7c
   1a2d8:	f000 f9c8 	bl	1a66c <printk>
   1a2dc:	217c      	movs	r1, #124	; 0x7c
   1a2de:	483f      	ldr	r0, [pc, #252]	; (1a3dc <z_impl_k_poll+0x1a8>)
   1a2e0:	f000 fc6a 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a2e4:	483c      	ldr	r0, [pc, #240]	; (1a3d8 <z_impl_k_poll+0x1a4>)
   1a2e6:	f7ff f9f1 	bl	196cc <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   1a2ea:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   1a2ee:	b9d3      	cbnz	r3, 1a326 <z_impl_k_poll+0xf2>
		clear_event_registrations(events, events_registered, key);
   1a2f0:	4620      	mov	r0, r4
   1a2f2:	464a      	mov	r2, r9
   1a2f4:	4641      	mov	r1, r8
   1a2f6:	f7ff fedd 	bl	1a0b4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a2fa:	4837      	ldr	r0, [pc, #220]	; (1a3d8 <z_impl_k_poll+0x1a4>)
   1a2fc:	f7ff f9d8 	bl	196b0 <z_spin_unlock_valid>
   1a300:	b940      	cbnz	r0, 1a314 <z_impl_k_poll+0xe0>
   1a302:	4936      	ldr	r1, [pc, #216]	; (1a3dc <z_impl_k_poll+0x1a8>)
   1a304:	4833      	ldr	r0, [pc, #204]	; (1a3d4 <z_impl_k_poll+0x1a0>)
   1a306:	22a7      	movs	r2, #167	; 0xa7
   1a308:	f000 f9b0 	bl	1a66c <printk>
   1a30c:	21a7      	movs	r1, #167	; 0xa7
   1a30e:	4833      	ldr	r0, [pc, #204]	; (1a3dc <z_impl_k_poll+0x1a8>)
   1a310:	f000 fc52 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   1a314:	f389 8811 	msr	BASEPRI, r9
   1a318:	f3bf 8f6f 	isb	sy
		return 0;
   1a31c:	2500      	movs	r5, #0
}
   1a31e:	4628      	mov	r0, r5
   1a320:	b005      	add	sp, #20
   1a322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   1a326:	2300      	movs	r3, #0
   1a328:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a32c:	ea56 0305 	orrs.w	r3, r6, r5
   1a330:	d113      	bne.n	1a35a <z_impl_k_poll+0x126>
   1a332:	4829      	ldr	r0, [pc, #164]	; (1a3d8 <z_impl_k_poll+0x1a4>)
   1a334:	f7ff f9bc 	bl	196b0 <z_spin_unlock_valid>
   1a338:	b940      	cbnz	r0, 1a34c <z_impl_k_poll+0x118>
   1a33a:	4928      	ldr	r1, [pc, #160]	; (1a3dc <z_impl_k_poll+0x1a8>)
   1a33c:	4825      	ldr	r0, [pc, #148]	; (1a3d4 <z_impl_k_poll+0x1a0>)
   1a33e:	22a7      	movs	r2, #167	; 0xa7
   1a340:	f000 f994 	bl	1a66c <printk>
   1a344:	21a7      	movs	r1, #167	; 0xa7
   1a346:	4825      	ldr	r0, [pc, #148]	; (1a3dc <z_impl_k_poll+0x1a8>)
   1a348:	f000 fc36 	bl	1abb8 <assert_post_action>
   1a34c:	f389 8811 	msr	BASEPRI, r9
   1a350:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1a354:	f06f 050a 	mvn.w	r5, #10
   1a358:	e7e1      	b.n	1a31e <z_impl_k_poll+0xea>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a35a:	e9cd 6500 	strd	r6, r5, [sp]
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1a35e:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a360:	4649      	mov	r1, r9
   1a362:	481d      	ldr	r0, [pc, #116]	; (1a3d8 <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1a364:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1a368:	f7fe fd50 	bl	18e0c <z_pend_curr>
   1a36c:	4605      	mov	r5, r0
	__asm__ volatile(
   1a36e:	f04f 0320 	mov.w	r3, #32
   1a372:	f3ef 8611 	mrs	r6, BASEPRI
   1a376:	f383 8811 	msr	BASEPRI, r3
   1a37a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a37e:	4816      	ldr	r0, [pc, #88]	; (1a3d8 <z_impl_k_poll+0x1a4>)
   1a380:	f7ff f988 	bl	19694 <z_spin_lock_valid>
   1a384:	b940      	cbnz	r0, 1a398 <z_impl_k_poll+0x164>
   1a386:	4915      	ldr	r1, [pc, #84]	; (1a3dc <z_impl_k_poll+0x1a8>)
   1a388:	4812      	ldr	r0, [pc, #72]	; (1a3d4 <z_impl_k_poll+0x1a0>)
   1a38a:	227c      	movs	r2, #124	; 0x7c
   1a38c:	f000 f96e 	bl	1a66c <printk>
   1a390:	217c      	movs	r1, #124	; 0x7c
   1a392:	4812      	ldr	r0, [pc, #72]	; (1a3dc <z_impl_k_poll+0x1a8>)
   1a394:	f000 fc10 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a398:	480f      	ldr	r0, [pc, #60]	; (1a3d8 <z_impl_k_poll+0x1a4>)
   1a39a:	f7ff f997 	bl	196cc <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   1a39e:	4620      	mov	r0, r4
   1a3a0:	4632      	mov	r2, r6
   1a3a2:	4641      	mov	r1, r8
   1a3a4:	f7ff fe86 	bl	1a0b4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a3a8:	480b      	ldr	r0, [pc, #44]	; (1a3d8 <z_impl_k_poll+0x1a4>)
   1a3aa:	f7ff f981 	bl	196b0 <z_spin_unlock_valid>
   1a3ae:	b940      	cbnz	r0, 1a3c2 <z_impl_k_poll+0x18e>
   1a3b0:	490a      	ldr	r1, [pc, #40]	; (1a3dc <z_impl_k_poll+0x1a8>)
   1a3b2:	4808      	ldr	r0, [pc, #32]	; (1a3d4 <z_impl_k_poll+0x1a0>)
   1a3b4:	22a7      	movs	r2, #167	; 0xa7
   1a3b6:	f000 f959 	bl	1a66c <printk>
   1a3ba:	21a7      	movs	r1, #167	; 0xa7
   1a3bc:	4807      	ldr	r0, [pc, #28]	; (1a3dc <z_impl_k_poll+0x1a8>)
   1a3be:	f000 fbfb 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   1a3c2:	f386 8811 	msr	BASEPRI, r6
   1a3c6:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1a3ca:	e7a8      	b.n	1a31e <z_impl_k_poll+0xea>
   1a3cc:	2000b10c 	.word	0x2000b10c
   1a3d0:	00022b40 	.word	0x00022b40
   1a3d4:	0001fbb7 	.word	0x0001fbb7
   1a3d8:	2000b160 	.word	0x2000b160
   1a3dc:	0001fbf1 	.word	0x0001fbf1

0001a3e0 <z_impl_k_poll_signal_raise>:
{
   1a3e0:	b570      	push	{r4, r5, r6, lr}
   1a3e2:	4604      	mov	r4, r0
   1a3e4:	460d      	mov	r5, r1
	__asm__ volatile(
   1a3e6:	f04f 0320 	mov.w	r3, #32
   1a3ea:	f3ef 8611 	mrs	r6, BASEPRI
   1a3ee:	f383 8811 	msr	BASEPRI, r3
   1a3f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1a3f6:	481c      	ldr	r0, [pc, #112]	; (1a468 <z_impl_k_poll_signal_raise+0x88>)
   1a3f8:	f7ff f94c 	bl	19694 <z_spin_lock_valid>
   1a3fc:	b940      	cbnz	r0, 1a410 <z_impl_k_poll_signal_raise+0x30>
   1a3fe:	491b      	ldr	r1, [pc, #108]	; (1a46c <z_impl_k_poll_signal_raise+0x8c>)
   1a400:	481b      	ldr	r0, [pc, #108]	; (1a470 <z_impl_k_poll_signal_raise+0x90>)
   1a402:	227c      	movs	r2, #124	; 0x7c
   1a404:	f000 f932 	bl	1a66c <printk>
   1a408:	217c      	movs	r1, #124	; 0x7c
   1a40a:	4818      	ldr	r0, [pc, #96]	; (1a46c <z_impl_k_poll_signal_raise+0x8c>)
   1a40c:	f000 fbd4 	bl	1abb8 <assert_post_action>
	z_spin_lock_set_owner(l);
   1a410:	4815      	ldr	r0, [pc, #84]	; (1a468 <z_impl_k_poll_signal_raise+0x88>)
   1a412:	f7ff f95b 	bl	196cc <z_spin_lock_set_owner>
	signal->signaled = 1U;
   1a416:	2101      	movs	r1, #1
	return list->head == list;
   1a418:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   1a41a:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1a41c:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   1a41e:	60a1      	str	r1, [r4, #8]
   1a420:	d112      	bne.n	1a448 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1a422:	4811      	ldr	r0, [pc, #68]	; (1a468 <z_impl_k_poll_signal_raise+0x88>)
   1a424:	f7ff f944 	bl	196b0 <z_spin_unlock_valid>
   1a428:	b940      	cbnz	r0, 1a43c <z_impl_k_poll_signal_raise+0x5c>
   1a42a:	4910      	ldr	r1, [pc, #64]	; (1a46c <z_impl_k_poll_signal_raise+0x8c>)
   1a42c:	4810      	ldr	r0, [pc, #64]	; (1a470 <z_impl_k_poll_signal_raise+0x90>)
   1a42e:	22a7      	movs	r2, #167	; 0xa7
   1a430:	f000 f91c 	bl	1a66c <printk>
   1a434:	21a7      	movs	r1, #167	; 0xa7
   1a436:	480d      	ldr	r0, [pc, #52]	; (1a46c <z_impl_k_poll_signal_raise+0x8c>)
   1a438:	f000 fbbe 	bl	1abb8 <assert_post_action>
	__asm__ volatile(
   1a43c:	f386 8811 	msr	BASEPRI, r6
   1a440:	f3bf 8f6f 	isb	sy
		return 0;
   1a444:	2400      	movs	r4, #0
   1a446:	e00d      	b.n	1a464 <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   1a448:	e9d0 3200 	ldrd	r3, r2, [r0]
   1a44c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a44e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a450:	2300      	movs	r3, #0
	node->prev = NULL;
   1a452:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1a456:	f7ff fced 	bl	19e34 <signal_poll_event>
	z_reschedule(&lock, key);
   1a45a:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1a45c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1a45e:	4802      	ldr	r0, [pc, #8]	; (1a468 <z_impl_k_poll_signal_raise+0x88>)
   1a460:	f7fd ff96 	bl	18390 <z_reschedule>
}
   1a464:	4620      	mov	r0, r4
   1a466:	bd70      	pop	{r4, r5, r6, pc}
   1a468:	2000b160 	.word	0x2000b160
   1a46c:	0001fbf1 	.word	0x0001fbf1
   1a470:	0001fbb7 	.word	0x0001fbb7

0001a474 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   1a474:	2803      	cmp	r0, #3
{
   1a476:	b538      	push	{r3, r4, r5, lr}
   1a478:	4604      	mov	r4, r0
   1a47a:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   1a47c:	d901      	bls.n	1a482 <k_aligned_alloc+0xe>
   1a47e:	0783      	lsls	r3, r0, #30
   1a480:	d008      	beq.n	1a494 <k_aligned_alloc+0x20>
   1a482:	490e      	ldr	r1, [pc, #56]	; (1a4bc <k_aligned_alloc+0x48>)
   1a484:	480e      	ldr	r0, [pc, #56]	; (1a4c0 <k_aligned_alloc+0x4c>)
   1a486:	223e      	movs	r2, #62	; 0x3e
   1a488:	f000 f8f0 	bl	1a66c <printk>
   1a48c:	213e      	movs	r1, #62	; 0x3e
   1a48e:	480b      	ldr	r0, [pc, #44]	; (1a4bc <k_aligned_alloc+0x48>)
   1a490:	f000 fb92 	bl	1abb8 <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   1a494:	1e63      	subs	r3, r4, #1
   1a496:	4223      	tst	r3, r4
   1a498:	d008      	beq.n	1a4ac <k_aligned_alloc+0x38>
   1a49a:	4908      	ldr	r1, [pc, #32]	; (1a4bc <k_aligned_alloc+0x48>)
   1a49c:	4808      	ldr	r0, [pc, #32]	; (1a4c0 <k_aligned_alloc+0x4c>)
   1a49e:	2242      	movs	r2, #66	; 0x42
   1a4a0:	f000 f8e4 	bl	1a66c <printk>
   1a4a4:	2142      	movs	r1, #66	; 0x42
   1a4a6:	4805      	ldr	r0, [pc, #20]	; (1a4bc <k_aligned_alloc+0x48>)
   1a4a8:	f000 fb86 	bl	1abb8 <assert_post_action>
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1a4ac:	462a      	mov	r2, r5
   1a4ae:	4621      	mov	r1, r4
}
   1a4b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1a4b4:	4803      	ldr	r0, [pc, #12]	; (1a4c4 <k_aligned_alloc+0x50>)
   1a4b6:	f003 bdeb 	b.w	1e090 <z_heap_aligned_alloc>
   1a4ba:	bf00      	nop
   1a4bc:	00022b61 	.word	0x00022b61
   1a4c0:	0001fbb7 	.word	0x0001fbb7
   1a4c4:	20008650 	.word	0x20008650

0001a4c8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1a4c8:	b538      	push	{r3, r4, r5, lr}
   1a4ca:	4604      	mov	r4, r0
   1a4cc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1a4ce:	f003 fcf2 	bl	1deb6 <k_is_in_isr>
   1a4d2:	b958      	cbnz	r0, 1a4ec <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1a4d4:	4b07      	ldr	r3, [pc, #28]	; (1a4f4 <z_thread_aligned_alloc+0x2c>)
   1a4d6:	689b      	ldr	r3, [r3, #8]
   1a4d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap) {
   1a4dc:	b143      	cbz	r3, 1a4f0 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   1a4de:	462a      	mov	r2, r5
   1a4e0:	4621      	mov	r1, r4
   1a4e2:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1a4e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1a4e8:	f003 bdd2 	b.w	1e090 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   1a4ec:	4b02      	ldr	r3, [pc, #8]	; (1a4f8 <z_thread_aligned_alloc+0x30>)
   1a4ee:	e7f6      	b.n	1a4de <z_thread_aligned_alloc+0x16>
}
   1a4f0:	bd38      	pop	{r3, r4, r5, pc}
   1a4f2:	bf00      	nop
   1a4f4:	2000b10c 	.word	0x2000b10c
   1a4f8:	20008650 	.word	0x20008650

0001a4fc <_ZN13deviceManager12le_param_reqEP7bt_connP16bt_le_conn_param>:
}
   1a4fc:	2001      	movs	r0, #1
   1a4fe:	4770      	bx	lr

0001a500 <_ZN13deviceManager16le_param_updatedEP7bt_connttt>:
}
   1a500:	4770      	bx	lr

0001a502 <_ZN13deviceManager10app_led_cbEb>:
void deviceManager::app_led_cb(bool led_state){
   1a502:	4601      	mov	r1, r0
    dk_set_led(USER_LED,led_state);
   1a504:	2003      	movs	r0, #3
   1a506:	f7fc b9eb 	b.w	168e0 <dk_set_led>

0001a50a <_ZN13deviceManager11deviceFoundEPK12bt_addr_le_tahP14net_buf_simple>:
	initScan();
   1a50a:	f7ef b8d5 	b.w	96b8 <_ZN13deviceManager8initScanEv>

0001a50e <_ZN13deviceManager14checkAddressesEPcS0_>:

bool deviceManager::checkAddresses(char addr1[],char addr2[])
{
	uint8_t cnt = 0;
   1a50e:	2300      	movs	r3, #0
{
   1a510:	b530      	push	{r4, r5, lr}
   1a512:	1e42      	subs	r2, r0, #1
   1a514:	3901      	subs	r1, #1
   1a516:	3010      	adds	r0, #16
	bool retVal = false;
	for (uint8_t i = 0; i < 17; i++)
	{
		if (addr1[i] == addr2[i])
   1a518:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   1a51c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1a520:	42a5      	cmp	r5, r4
		{
			cnt++;
   1a522:	bf04      	itt	eq
   1a524:	3301      	addeq	r3, #1
   1a526:	b2db      	uxtbeq	r3, r3
	for (uint8_t i = 0; i < 17; i++)
   1a528:	4282      	cmp	r2, r0
   1a52a:	d1f5      	bne.n	1a518 <_ZN13deviceManager14checkAddressesEPcS0_+0xa>
	{
		cnt = 0;
		retVal = false;
	}
	return retVal;
}
   1a52c:	3b11      	subs	r3, #17
   1a52e:	4258      	negs	r0, r3
   1a530:	4158      	adcs	r0, r3
   1a532:	bd30      	pop	{r4, r5, pc}

0001a534 <_ZL7on_sentP7bt_connPv>:
    const bt_addr_le_t * addr = bt_conn_get_dst(conn);
   1a534:	f001 bd92 	b.w	1c05c <bt_conn_get_dst>

0001a538 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   1a538:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   1a53a:	2364      	movs	r3, #100	; 0x64
{
   1a53c:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   1a53e:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   1a540:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1a542:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   1a546:	b111      	cbz	r1, 1a54e <u8_to_dec+0x16>
   1a548:	3d01      	subs	r5, #1
   1a54a:	d101      	bne.n	1a550 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1a54c:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   1a54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   1a550:	fbb2 f7f3 	udiv	r7, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1a554:	429a      	cmp	r2, r3
		digit = value / divisor;
   1a556:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1a558:	d202      	bcs.n	1a560 <u8_to_dec+0x28>
   1a55a:	2b01      	cmp	r3, #1
   1a55c:	d000      	beq.n	1a560 <u8_to_dec+0x28>
   1a55e:	b130      	cbz	r0, 1a56e <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1a560:	3630      	adds	r6, #48	; 0x30
			buflen--;
   1a562:	3901      	subs	r1, #1
			num_digits++;
   1a564:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   1a566:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   1a56a:	b2c9      	uxtb	r1, r1
			num_digits++;
   1a56c:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   1a56e:	fb03 2217 	mls	r2, r3, r7, r2
		divisor /= 10;
   1a572:	fbb3 f3fc 	udiv	r3, r3, ip
   1a576:	b2d2      	uxtb	r2, r2
   1a578:	e7e5      	b.n	1a546 <u8_to_dec+0xe>

0001a57a <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1a57a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1a57e:	b2db      	uxtb	r3, r3
   1a580:	2b09      	cmp	r3, #9
   1a582:	d802      	bhi.n	1a58a <char2hex+0x10>
		*x = c - '0';
   1a584:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1a586:	2000      	movs	r0, #0
   1a588:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1a58a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1a58e:	2b05      	cmp	r3, #5
   1a590:	d802      	bhi.n	1a598 <char2hex+0x1e>
		*x = c - 'a' + 10;
   1a592:	3857      	subs	r0, #87	; 0x57
   1a594:	7008      	strb	r0, [r1, #0]
   1a596:	e7f6      	b.n	1a586 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1a598:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1a59c:	2b05      	cmp	r3, #5
   1a59e:	d801      	bhi.n	1a5a4 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1a5a0:	3837      	subs	r0, #55	; 0x37
   1a5a2:	e7f7      	b.n	1a594 <char2hex+0x1a>
		return -EINVAL;
   1a5a4:	f06f 0015 	mvn.w	r0, #21
}
   1a5a8:	4770      	bx	lr

0001a5aa <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1a5aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a5ac:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1a5ae:	f001 0001 	and.w	r0, r1, #1
   1a5b2:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1a5b6:	429d      	cmp	r5, r3
   1a5b8:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1a5bc:	d903      	bls.n	1a5c6 <hex2bin+0x1c>
		return 0;
   1a5be:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1a5c0:	4628      	mov	r0, r5
   1a5c2:	b003      	add	sp, #12
   1a5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1a5c6:	b158      	cbz	r0, 1a5e0 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1a5c8:	7820      	ldrb	r0, [r4, #0]
   1a5ca:	f10d 0107 	add.w	r1, sp, #7
   1a5ce:	f7ff ffd4 	bl	1a57a <char2hex>
   1a5d2:	2800      	cmp	r0, #0
   1a5d4:	dbf3      	blt.n	1a5be <hex2bin+0x14>
		buf[0] = dec;
   1a5d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   1a5da:	3401      	adds	r4, #1
		buf[0] = dec;
   1a5dc:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1a5e0:	3401      	adds	r4, #1
   1a5e2:	4416      	add	r6, r2
   1a5e4:	42b2      	cmp	r2, r6
   1a5e6:	d0eb      	beq.n	1a5c0 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1a5e8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1a5ec:	f10d 0107 	add.w	r1, sp, #7
   1a5f0:	f7ff ffc3 	bl	1a57a <char2hex>
   1a5f4:	2800      	cmp	r0, #0
   1a5f6:	dbe2      	blt.n	1a5be <hex2bin+0x14>
		buf[i] = dec << 4;
   1a5f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a5fc:	011b      	lsls	r3, r3, #4
   1a5fe:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1a600:	f814 0b02 	ldrb.w	r0, [r4], #2
   1a604:	f7ff ffb9 	bl	1a57a <char2hex>
   1a608:	2800      	cmp	r0, #0
   1a60a:	dbd8      	blt.n	1a5be <hex2bin+0x14>
		buf[i] += dec;
   1a60c:	7813      	ldrb	r3, [r2, #0]
   1a60e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1a612:	440b      	add	r3, r1
   1a614:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1a618:	e7e4      	b.n	1a5e4 <hex2bin+0x3a>

0001a61a <sys_notify_validate>:
	if (notify == NULL) {
   1a61a:	4603      	mov	r3, r0
   1a61c:	b140      	cbz	r0, 1a630 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1a61e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1a620:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   1a624:	2a02      	cmp	r2, #2
   1a626:	d006      	beq.n	1a636 <sys_notify_validate+0x1c>
   1a628:	2a03      	cmp	r2, #3
   1a62a:	d004      	beq.n	1a636 <sys_notify_validate+0x1c>
   1a62c:	2a01      	cmp	r2, #1
   1a62e:	d005      	beq.n	1a63c <sys_notify_validate+0x22>
		return -EINVAL;
   1a630:	f06f 0015 	mvn.w	r0, #21
}
   1a634:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1a636:	681a      	ldr	r2, [r3, #0]
   1a638:	2a00      	cmp	r2, #0
   1a63a:	d0f9      	beq.n	1a630 <sys_notify_validate+0x16>
		notify->result = 0;
   1a63c:	2000      	movs	r0, #0
   1a63e:	6098      	str	r0, [r3, #8]
   1a640:	4770      	bx	lr

0001a642 <arch_printk_char_out>:
}
   1a642:	2000      	movs	r0, #0
   1a644:	4770      	bx	lr

0001a646 <str_out>:
{
   1a646:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1a648:	688a      	ldr	r2, [r1, #8]
   1a64a:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1a64c:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1a64e:	b114      	cbz	r4, 1a656 <str_out+0x10>
   1a650:	684b      	ldr	r3, [r1, #4]
   1a652:	4293      	cmp	r3, r2
   1a654:	dc01      	bgt.n	1a65a <str_out+0x14>
		ctx->count++;
   1a656:	608d      	str	r5, [r1, #8]
}
   1a658:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1a65a:	3b01      	subs	r3, #1
   1a65c:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1a65e:	bf08      	it	eq
   1a660:	2200      	moveq	r2, #0
   1a662:	608d      	str	r5, [r1, #8]
   1a664:	bf0c      	ite	eq
   1a666:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1a668:	54a0      	strbne	r0, [r4, r2]
   1a66a:	e7f5      	b.n	1a658 <str_out+0x12>

0001a66c <printk>:
{
   1a66c:	b40f      	push	{r0, r1, r2, r3}
   1a66e:	b507      	push	{r0, r1, r2, lr}
   1a670:	a904      	add	r1, sp, #16
   1a672:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1a676:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1a678:	f7ef ff1e 	bl	a4b8 <vprintk>
}
   1a67c:	b003      	add	sp, #12
   1a67e:	f85d eb04 	ldr.w	lr, [sp], #4
   1a682:	b004      	add	sp, #16
   1a684:	4770      	bx	lr

0001a686 <snprintk>:
{
   1a686:	b40c      	push	{r2, r3}
   1a688:	b507      	push	{r0, r1, r2, lr}
   1a68a:	ab04      	add	r3, sp, #16
   1a68c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1a690:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1a692:	f7ef ff1f 	bl	a4d4 <vsnprintk>
}
   1a696:	b003      	add	sp, #12
   1a698:	f85d eb04 	ldr.w	lr, [sp], #4
   1a69c:	b002      	add	sp, #8
   1a69e:	4770      	bx	lr

0001a6a0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1a6a0:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   1a6a2:	f013 0307 	ands.w	r3, r3, #7
   1a6a6:	d105      	bne.n	1a6b4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1a6a8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1a6aa:	2b00      	cmp	r3, #0
   1a6ac:	bf0c      	ite	eq
   1a6ae:	2000      	moveq	r0, #0
   1a6b0:	2003      	movne	r0, #3
   1a6b2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1a6b4:	2b02      	cmp	r3, #2
   1a6b6:	d105      	bne.n	1a6c4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1a6b8:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   1a6ba:	2b00      	cmp	r3, #0
   1a6bc:	bf14      	ite	ne
   1a6be:	2000      	movne	r0, #0
   1a6c0:	2004      	moveq	r0, #4
   1a6c2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1a6c4:	2b01      	cmp	r3, #1
   1a6c6:	d105      	bne.n	1a6d4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1a6c8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1a6ca:	2b00      	cmp	r3, #0
   1a6cc:	bf0c      	ite	eq
   1a6ce:	2000      	moveq	r0, #0
   1a6d0:	2005      	movne	r0, #5
   1a6d2:	4770      	bx	lr
	int evt = EVT_NOP;
   1a6d4:	2000      	movs	r0, #0
}
   1a6d6:	4770      	bx	lr

0001a6d8 <notify_one>:
{
   1a6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a6dc:	460d      	mov	r5, r1
   1a6de:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a6e0:	4619      	mov	r1, r3
   1a6e2:	1d28      	adds	r0, r5, #4
{
   1a6e4:	4690      	mov	r8, r2
   1a6e6:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1a6e8:	f7ef feac 	bl	a444 <sys_notify_finalize>
	if (cb) {
   1a6ec:	4604      	mov	r4, r0
   1a6ee:	b138      	cbz	r0, 1a700 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1a6f0:	4633      	mov	r3, r6
   1a6f2:	4642      	mov	r2, r8
   1a6f4:	4629      	mov	r1, r5
   1a6f6:	4638      	mov	r0, r7
   1a6f8:	46a4      	mov	ip, r4
}
   1a6fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1a6fe:	4760      	bx	ip
}
   1a700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a704 <validate_args>:
{
   1a704:	b510      	push	{r4, lr}
   1a706:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1a708:	b140      	cbz	r0, 1a71c <validate_args+0x18>
   1a70a:	b139      	cbz	r1, 1a71c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1a70c:	1d08      	adds	r0, r1, #4
   1a70e:	f7ff ff84 	bl	1a61a <sys_notify_validate>
	if ((rv == 0)
   1a712:	b928      	cbnz	r0, 1a720 <validate_args+0x1c>
	    && ((cli->notify.flags
   1a714:	68a3      	ldr	r3, [r4, #8]
   1a716:	f033 0303 	bics.w	r3, r3, #3
   1a71a:	d001      	beq.n	1a720 <validate_args+0x1c>
		rv = -EINVAL;
   1a71c:	f06f 0015 	mvn.w	r0, #21
}
   1a720:	bd10      	pop	{r4, pc}

0001a722 <onoff_manager_init>:
{
   1a722:	b538      	push	{r3, r4, r5, lr}
   1a724:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1a726:	4605      	mov	r5, r0
   1a728:	b158      	cbz	r0, 1a742 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1a72a:	b151      	cbz	r1, 1a742 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1a72c:	680b      	ldr	r3, [r1, #0]
   1a72e:	b143      	cbz	r3, 1a742 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1a730:	684b      	ldr	r3, [r1, #4]
   1a732:	b133      	cbz	r3, 1a742 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1a734:	2220      	movs	r2, #32
   1a736:	2100      	movs	r1, #0
   1a738:	f001 fa07 	bl	1bb4a <memset>
	return 0;
   1a73c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1a73e:	612c      	str	r4, [r5, #16]
}
   1a740:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a742:	f06f 0015 	mvn.w	r0, #21
   1a746:	e7fb      	b.n	1a740 <onoff_manager_init+0x1e>

0001a748 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1a748:	4604      	mov	r4, r0
   1a74a:	b508      	push	{r3, lr}
   1a74c:	4608      	mov	r0, r1
   1a74e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1a750:	461a      	mov	r2, r3
   1a752:	47a0      	blx	r4
	return z_impl_k_current_get();
   1a754:	f7fe fdac 	bl	192b0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1a758:	f7f3 fb74 	bl	de44 <z_impl_k_thread_abort>

0001a75c <chunk_field>:
	if (big_heap(h)) {
   1a75c:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1a75e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1a762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1a766:	bf2c      	ite	cs
   1a768:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   1a76c:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   1a770:	4770      	bx	lr

0001a772 <chunk_set>:
	void *cmem = &buf[c];
   1a772:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1a776:	6880      	ldr	r0, [r0, #8]
   1a778:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   1a77c:	bf2c      	ite	cs
   1a77e:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1a782:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   1a786:	4770      	bx	lr

0001a788 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1a788:	2201      	movs	r2, #1
{
   1a78a:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1a78c:	f7ff ffe6 	bl	1a75c <chunk_field>
}
   1a790:	40d0      	lsrs	r0, r2
   1a792:	bd08      	pop	{r3, pc}

0001a794 <set_chunk_used>:
	if (big_heap(h)) {
   1a794:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1a796:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1a79a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a79e:	d308      	bcc.n	1a7b2 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a7a0:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1a7a2:	b11a      	cbz	r2, 1a7ac <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a7a4:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a7a8:	604b      	str	r3, [r1, #4]
   1a7aa:	4770      	bx	lr
   1a7ac:	f023 0301 	bic.w	r3, r3, #1
   1a7b0:	e7fa      	b.n	1a7a8 <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a7b2:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   1a7b4:	b11a      	cbz	r2, 1a7be <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a7b6:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a7ba:	804b      	strh	r3, [r1, #2]
}
   1a7bc:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a7be:	f023 0301 	bic.w	r3, r3, #1
   1a7c2:	e7fa      	b.n	1a7ba <set_chunk_used+0x26>

0001a7c4 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1a7c4:	0053      	lsls	r3, r2, #1
   1a7c6:	2201      	movs	r2, #1
   1a7c8:	f7ff bfd3 	b.w	1a772 <chunk_set>

0001a7cc <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
   1a7cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1a7d0:	bf2c      	ite	cs
   1a7d2:	2008      	movcs	r0, #8
   1a7d4:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1a7d6:	3107      	adds	r1, #7
   1a7d8:	4408      	add	r0, r1
}

static inline size_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
	return chunksz(chunk_header_bytes(h) + bytes);
}
   1a7da:	08c0      	lsrs	r0, r0, #3
   1a7dc:	4770      	bx	lr

0001a7de <bucket_idx.isra.0>:
static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
   1a7de:	b508      	push	{r3, lr}
   1a7e0:	460b      	mov	r3, r1
   1a7e2:	2101      	movs	r1, #1
   1a7e4:	f7ff fff2 	bl	1a7cc <bytes_to_chunksz.isra.0>
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1a7e8:	3301      	adds	r3, #1
   1a7ea:	1a1b      	subs	r3, r3, r0
	return 31 - __builtin_clz(usable_sz);
   1a7ec:	fab3 f083 	clz	r0, r3
}
   1a7f0:	f1c0 001f 	rsb	r0, r0, #31
   1a7f4:	bd08      	pop	{r3, pc}

0001a7f6 <free_list_remove_bidx>:
{
   1a7f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a7fa:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1a7fc:	2203      	movs	r2, #3
   1a7fe:	460e      	mov	r6, r1
   1a800:	4604      	mov	r4, r0
   1a802:	f7ff ffab 	bl	1a75c <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1a806:	4286      	cmp	r6, r0
   1a808:	4605      	mov	r5, r0
   1a80a:	f107 0804 	add.w	r8, r7, #4
   1a80e:	d10b      	bne.n	1a828 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1a810:	2301      	movs	r3, #1
   1a812:	fa03 f707 	lsl.w	r7, r3, r7
   1a816:	68e3      	ldr	r3, [r4, #12]
   1a818:	ea23 0307 	bic.w	r3, r3, r7
   1a81c:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1a81e:	2300      	movs	r3, #0
   1a820:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1a824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1a828:	4631      	mov	r1, r6
   1a82a:	2202      	movs	r2, #2
   1a82c:	4620      	mov	r0, r4
   1a82e:	f7ff ff95 	bl	1a75c <chunk_field>
   1a832:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1a834:	462b      	mov	r3, r5
   1a836:	4601      	mov	r1, r0
   1a838:	2203      	movs	r2, #3
   1a83a:	4620      	mov	r0, r4
		b->next = second;
   1a83c:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1a840:	f7ff ff97 	bl	1a772 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1a844:	4633      	mov	r3, r6
   1a846:	4629      	mov	r1, r5
   1a848:	4620      	mov	r0, r4
}
   1a84a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a84e:	2202      	movs	r2, #2
   1a850:	f7ff bf8f 	b.w	1a772 <chunk_set>

0001a854 <free_list_remove>:
{
   1a854:	b570      	push	{r4, r5, r6, lr}
   1a856:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1a858:	6886      	ldr	r6, [r0, #8]
   1a85a:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1a85c:	f7ff ff94 	bl	1a788 <chunk_size>
   1a860:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1a864:	4601      	mov	r1, r0
   1a866:	d301      	bcc.n	1a86c <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1a868:	2801      	cmp	r0, #1
   1a86a:	d009      	beq.n	1a880 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1a86c:	4630      	mov	r0, r6
   1a86e:	f7ff ffb6 	bl	1a7de <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1a872:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1a874:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1a876:	4620      	mov	r0, r4
}
   1a878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   1a87c:	f7ff bfbb 	b.w	1a7f6 <free_list_remove_bidx>
}
   1a880:	bd70      	pop	{r4, r5, r6, pc}

0001a882 <alloc_chunk>:
{
   1a882:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a886:	6886      	ldr	r6, [r0, #8]
   1a888:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   1a88a:	4630      	mov	r0, r6
{
   1a88c:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1a88e:	f7ff ffa6 	bl	1a7de <bucket_idx.isra.0>
	if (bi > bucket_idx(h, h->len)) {
   1a892:	4631      	mov	r1, r6
	int bi = bucket_idx(h, sz);
   1a894:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1a896:	4630      	mov	r0, r6
   1a898:	f7ff ffa1 	bl	1a7de <bucket_idx.isra.0>
   1a89c:	42a8      	cmp	r0, r5
   1a89e:	da03      	bge.n	1a8a8 <alloc_chunk+0x26>
		return 0;
   1a8a0:	2600      	movs	r6, #0
}
   1a8a2:	4630      	mov	r0, r6
   1a8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1a8a8:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1a8ac:	f8da 9010 	ldr.w	r9, [sl, #16]
   1a8b0:	f1b9 0f00 	cmp.w	r9, #0
   1a8b4:	d019      	beq.n	1a8ea <alloc_chunk+0x68>
   1a8b6:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1a8b8:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1a8bc:	4620      	mov	r0, r4
   1a8be:	4631      	mov	r1, r6
   1a8c0:	f7ff ff62 	bl	1a788 <chunk_size>
   1a8c4:	4540      	cmp	r0, r8
   1a8c6:	d305      	bcc.n	1a8d4 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   1a8c8:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1a8ca:	4631      	mov	r1, r6
   1a8cc:	4620      	mov	r0, r4
   1a8ce:	f7ff ff92 	bl	1a7f6 <free_list_remove_bidx>
		return c;
   1a8d2:	e7e6      	b.n	1a8a2 <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   1a8d4:	2203      	movs	r2, #3
   1a8d6:	4631      	mov	r1, r6
   1a8d8:	4620      	mov	r0, r4
   1a8da:	f7ff ff3f 	bl	1a75c <chunk_field>
		} while (--i && b->next != first);
   1a8de:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1a8e0:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1a8e4:	d001      	beq.n	1a8ea <alloc_chunk+0x68>
   1a8e6:	4581      	cmp	r9, r0
   1a8e8:	d1e6      	bne.n	1a8b8 <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1a8ea:	f04f 32ff 	mov.w	r2, #4294967295
   1a8ee:	68e3      	ldr	r3, [r4, #12]
   1a8f0:	3501      	adds	r5, #1
   1a8f2:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1a8f4:	401a      	ands	r2, r3
   1a8f6:	d0d3      	beq.n	1a8a0 <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1a8f8:	fa92 f2a2 	rbit	r2, r2
   1a8fc:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1a900:	1d13      	adds	r3, r2, #4
   1a902:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1a906:	e7e0      	b.n	1a8ca <alloc_chunk+0x48>

0001a908 <split_chunks>:
{
   1a908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a90c:	4614      	mov	r4, r2
   1a90e:	460e      	mov	r6, r1
   1a910:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   1a912:	f7ff ff39 	bl	1a788 <chunk_size>
	size_t lsz = rc - lc;
   1a916:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1a91a:	1b37      	subs	r7, r6, r4
   1a91c:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1a91e:	4642      	mov	r2, r8
   1a920:	4631      	mov	r1, r6
   1a922:	4628      	mov	r0, r5
   1a924:	f7ff ff4e 	bl	1a7c4 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1a928:	463a      	mov	r2, r7
   1a92a:	4621      	mov	r1, r4
   1a92c:	4628      	mov	r0, r5
   1a92e:	f7ff ff49 	bl	1a7c4 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1a932:	4643      	mov	r3, r8
   1a934:	2200      	movs	r2, #0
   1a936:	4621      	mov	r1, r4
   1a938:	4628      	mov	r0, r5
   1a93a:	f7ff ff1a 	bl	1a772 <chunk_set>
	return c + chunk_size(h, c);
   1a93e:	4621      	mov	r1, r4
   1a940:	4628      	mov	r0, r5
   1a942:	f7ff ff21 	bl	1a788 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1a946:	463b      	mov	r3, r7
   1a948:	1821      	adds	r1, r4, r0
   1a94a:	2200      	movs	r2, #0
   1a94c:	4628      	mov	r0, r5
}
   1a94e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a952:	f7ff bf0e 	b.w	1a772 <chunk_set>

0001a956 <merge_chunks>:
{
   1a956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a95a:	4616      	mov	r6, r2
   1a95c:	4604      	mov	r4, r0
   1a95e:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1a960:	f7ff ff12 	bl	1a788 <chunk_size>
   1a964:	4631      	mov	r1, r6
   1a966:	4605      	mov	r5, r0
   1a968:	4620      	mov	r0, r4
   1a96a:	f7ff ff0d 	bl	1a788 <chunk_size>
   1a96e:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1a970:	462a      	mov	r2, r5
   1a972:	4639      	mov	r1, r7
   1a974:	4620      	mov	r0, r4
   1a976:	f7ff ff25 	bl	1a7c4 <set_chunk_size>
	return c + chunk_size(h, c);
   1a97a:	4631      	mov	r1, r6
   1a97c:	4620      	mov	r0, r4
   1a97e:	f7ff ff03 	bl	1a788 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1a982:	462b      	mov	r3, r5
   1a984:	1831      	adds	r1, r6, r0
   1a986:	2200      	movs	r2, #0
   1a988:	4620      	mov	r0, r4
}
   1a98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a98e:	f7ff bef0 	b.w	1a772 <chunk_set>

0001a992 <free_list_add>:
{
   1a992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a996:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   1a998:	6886      	ldr	r6, [r0, #8]
   1a99a:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1a99c:	f7ff fef4 	bl	1a788 <chunk_size>
   1a9a0:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1a9a4:	4601      	mov	r1, r0
   1a9a6:	d301      	bcc.n	1a9ac <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1a9a8:	2801      	cmp	r0, #1
   1a9aa:	d033      	beq.n	1aa14 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1a9ac:	4630      	mov	r0, r6
   1a9ae:	f7ff ff16 	bl	1a7de <bucket_idx.isra.0>
	if (b->next == 0U) {
   1a9b2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1a9b6:	6916      	ldr	r6, [r2, #16]
   1a9b8:	b99e      	cbnz	r6, 1a9e2 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1a9ba:	2301      	movs	r3, #1
   1a9bc:	fa03 f000 	lsl.w	r0, r3, r0
   1a9c0:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1a9c2:	4629      	mov	r1, r5
   1a9c4:	4303      	orrs	r3, r0
   1a9c6:	60e3      	str	r3, [r4, #12]
   1a9c8:	4620      	mov	r0, r4
		b->next = c;
   1a9ca:	6115      	str	r5, [r2, #16]
   1a9cc:	462b      	mov	r3, r5
   1a9ce:	2202      	movs	r2, #2
   1a9d0:	f7ff fecf 	bl	1a772 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1a9d4:	2203      	movs	r2, #3
   1a9d6:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1a9d8:	4620      	mov	r0, r4
}
   1a9da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a9de:	f7ff bec8 	b.w	1a772 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1a9e2:	2202      	movs	r2, #2
   1a9e4:	4631      	mov	r1, r6
   1a9e6:	4620      	mov	r0, r4
   1a9e8:	f7ff feb8 	bl	1a75c <chunk_field>
   1a9ec:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1a9ee:	4603      	mov	r3, r0
   1a9f0:	4629      	mov	r1, r5
   1a9f2:	4620      	mov	r0, r4
   1a9f4:	f7ff febd 	bl	1a772 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1a9f8:	2203      	movs	r2, #3
   1a9fa:	4633      	mov	r3, r6
   1a9fc:	4629      	mov	r1, r5
   1a9fe:	4620      	mov	r0, r4
   1aa00:	f7ff feb7 	bl	1a772 <chunk_set>
   1aa04:	4639      	mov	r1, r7
   1aa06:	462b      	mov	r3, r5
   1aa08:	4620      	mov	r0, r4
   1aa0a:	f7ff feb2 	bl	1a772 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1aa0e:	2202      	movs	r2, #2
   1aa10:	4631      	mov	r1, r6
   1aa12:	e7e1      	b.n	1a9d8 <free_list_add+0x46>
   1aa14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001aa18 <free_chunk>:
{
   1aa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa1a:	460c      	mov	r4, r1
   1aa1c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1aa1e:	f7ff feb3 	bl	1a788 <chunk_size>
   1aa22:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1aa24:	2201      	movs	r2, #1
   1aa26:	4631      	mov	r1, r6
   1aa28:	4628      	mov	r0, r5
   1aa2a:	f7ff fe97 	bl	1a75c <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1aa2e:	07c3      	lsls	r3, r0, #31
   1aa30:	d40c      	bmi.n	1aa4c <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1aa32:	4631      	mov	r1, r6
   1aa34:	4628      	mov	r0, r5
   1aa36:	f7ff ff0d 	bl	1a854 <free_list_remove>
	return c + chunk_size(h, c);
   1aa3a:	4621      	mov	r1, r4
   1aa3c:	4628      	mov	r0, r5
   1aa3e:	f7ff fea3 	bl	1a788 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1aa42:	4621      	mov	r1, r4
   1aa44:	1822      	adds	r2, r4, r0
   1aa46:	4628      	mov	r0, r5
   1aa48:	f7ff ff85 	bl	1a956 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1aa4c:	2200      	movs	r2, #0
   1aa4e:	4621      	mov	r1, r4
   1aa50:	4628      	mov	r0, r5
   1aa52:	f7ff fe83 	bl	1a75c <chunk_field>
   1aa56:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1aa58:	2201      	movs	r2, #1
   1aa5a:	4639      	mov	r1, r7
   1aa5c:	4628      	mov	r0, r5
   1aa5e:	f7ff fe7d 	bl	1a75c <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1aa62:	ea10 0602 	ands.w	r6, r0, r2
   1aa66:	d113      	bne.n	1aa90 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1aa68:	4639      	mov	r1, r7
   1aa6a:	4628      	mov	r0, r5
   1aa6c:	f7ff fef2 	bl	1a854 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1aa70:	4621      	mov	r1, r4
   1aa72:	4632      	mov	r2, r6
   1aa74:	4628      	mov	r0, r5
   1aa76:	f7ff fe71 	bl	1a75c <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1aa7a:	4622      	mov	r2, r4
   1aa7c:	1a21      	subs	r1, r4, r0
   1aa7e:	4628      	mov	r0, r5
   1aa80:	f7ff ff69 	bl	1a956 <merge_chunks>
   1aa84:	4621      	mov	r1, r4
   1aa86:	4632      	mov	r2, r6
   1aa88:	4628      	mov	r0, r5
   1aa8a:	f7ff fe67 	bl	1a75c <chunk_field>
   1aa8e:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1aa90:	4621      	mov	r1, r4
   1aa92:	4628      	mov	r0, r5
}
   1aa94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1aa98:	f7ff bf7b 	b.w	1a992 <free_list_add>

0001aa9c <sys_heap_alloc>:
{
   1aa9c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1aa9e:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1aaa0:	b909      	cbnz	r1, 1aaa6 <sys_heap_alloc+0xa>
		return NULL;
   1aaa2:	2000      	movs	r0, #0
}
   1aaa4:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   1aaa6:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1aaa8:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
   1aaac:	d9f9      	bls.n	1aaa2 <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1aaae:	f7ff fe8d 	bl	1a7cc <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1aab2:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   1aab4:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1aab6:	4630      	mov	r0, r6
   1aab8:	f7ff fee3 	bl	1a882 <alloc_chunk>
	if (c == 0U) {
   1aabc:	4604      	mov	r4, r0
   1aabe:	2800      	cmp	r0, #0
   1aac0:	d0ef      	beq.n	1aaa2 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1aac2:	4601      	mov	r1, r0
   1aac4:	4630      	mov	r0, r6
   1aac6:	f7ff fe5f 	bl	1a788 <chunk_size>
   1aaca:	42a8      	cmp	r0, r5
   1aacc:	d909      	bls.n	1aae2 <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
   1aace:	4425      	add	r5, r4
   1aad0:	4621      	mov	r1, r4
   1aad2:	4630      	mov	r0, r6
   1aad4:	462a      	mov	r2, r5
   1aad6:	f7ff ff17 	bl	1a908 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1aada:	4629      	mov	r1, r5
   1aadc:	4630      	mov	r0, r6
   1aade:	f7ff ff58 	bl	1a992 <free_list_add>
	set_chunk_used(h, c, true);
   1aae2:	4621      	mov	r1, r4
   1aae4:	4630      	mov	r0, r6
   1aae6:	2201      	movs	r2, #1
   1aae8:	f7ff fe54 	bl	1a794 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1aaec:	68b3      	ldr	r3, [r6, #8]
   1aaee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1aaf2:	bf2c      	ite	cs
   1aaf4:	2308      	movcs	r3, #8
   1aaf6:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1aaf8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1aafc:	4420      	add	r0, r4
	return chunk_mem(h, c);
   1aafe:	e7d1      	b.n	1aaa4 <sys_heap_alloc+0x8>

0001ab00 <encode_uint>:
{
   1ab00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab04:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1ab06:	78d3      	ldrb	r3, [r2, #3]
{
   1ab08:	4680      	mov	r8, r0
	switch (specifier) {
   1ab0a:	2b6f      	cmp	r3, #111	; 0x6f
{
   1ab0c:	460f      	mov	r7, r1
   1ab0e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1ab10:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1ab14:	d029      	beq.n	1ab6a <encode_uint+0x6a>
   1ab16:	d824      	bhi.n	1ab62 <encode_uint+0x62>
		return 16;
   1ab18:	2b58      	cmp	r3, #88	; 0x58
   1ab1a:	bf14      	ite	ne
   1ab1c:	260a      	movne	r6, #10
   1ab1e:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1ab20:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1ab24:	4632      	mov	r2, r6
   1ab26:	2300      	movs	r3, #0
   1ab28:	4640      	mov	r0, r8
   1ab2a:	4639      	mov	r1, r7
   1ab2c:	f7ed fffe 	bl	8b2c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ab30:	2a09      	cmp	r2, #9
   1ab32:	b2d4      	uxtb	r4, r2
   1ab34:	d81e      	bhi.n	1ab74 <encode_uint+0x74>
   1ab36:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1ab38:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ab3a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1ab3c:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ab40:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1ab44:	d301      	bcc.n	1ab4a <encode_uint+0x4a>
   1ab46:	45d1      	cmp	r9, sl
   1ab48:	d811      	bhi.n	1ab6e <encode_uint+0x6e>
	if (conv->flag_hash) {
   1ab4a:	782b      	ldrb	r3, [r5, #0]
   1ab4c:	069b      	lsls	r3, r3, #26
   1ab4e:	d505      	bpl.n	1ab5c <encode_uint+0x5c>
		if (radix == 8) {
   1ab50:	2e08      	cmp	r6, #8
   1ab52:	d115      	bne.n	1ab80 <encode_uint+0x80>
			conv->altform_0 = true;
   1ab54:	78ab      	ldrb	r3, [r5, #2]
   1ab56:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1ab5a:	70ab      	strb	r3, [r5, #2]
}
   1ab5c:	4648      	mov	r0, r9
   1ab5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1ab62:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1ab66:	2b70      	cmp	r3, #112	; 0x70
   1ab68:	e7d7      	b.n	1ab1a <encode_uint+0x1a>
	switch (specifier) {
   1ab6a:	2608      	movs	r6, #8
   1ab6c:	e7d8      	b.n	1ab20 <encode_uint+0x20>
		value /= radix;
   1ab6e:	4680      	mov	r8, r0
   1ab70:	460f      	mov	r7, r1
   1ab72:	e7d7      	b.n	1ab24 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1ab74:	f1bb 0f19 	cmp.w	fp, #25
   1ab78:	bf94      	ite	ls
   1ab7a:	3437      	addls	r4, #55	; 0x37
   1ab7c:	3457      	addhi	r4, #87	; 0x57
   1ab7e:	e7db      	b.n	1ab38 <encode_uint+0x38>
		} else if (radix == 16) {
   1ab80:	2e10      	cmp	r6, #16
   1ab82:	d1eb      	bne.n	1ab5c <encode_uint+0x5c>
			conv->altform_0c = true;
   1ab84:	78ab      	ldrb	r3, [r5, #2]
   1ab86:	f043 0310 	orr.w	r3, r3, #16
   1ab8a:	e7e6      	b.n	1ab5a <encode_uint+0x5a>

0001ab8c <outs>:
{
   1ab8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab90:	4607      	mov	r7, r0
   1ab92:	4688      	mov	r8, r1
   1ab94:	4615      	mov	r5, r2
   1ab96:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1ab98:	4614      	mov	r4, r2
   1ab9a:	42b4      	cmp	r4, r6
   1ab9c:	eba4 0005 	sub.w	r0, r4, r5
   1aba0:	d302      	bcc.n	1aba8 <outs+0x1c>
   1aba2:	b93e      	cbnz	r6, 1abb4 <outs+0x28>
   1aba4:	7823      	ldrb	r3, [r4, #0]
   1aba6:	b12b      	cbz	r3, 1abb4 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1aba8:	4641      	mov	r1, r8
   1abaa:	f814 0b01 	ldrb.w	r0, [r4], #1
   1abae:	47b8      	blx	r7
		if (rc < 0) {
   1abb0:	2800      	cmp	r0, #0
   1abb2:	daf2      	bge.n	1ab9a <outs+0xe>
}
   1abb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001abb8 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   1abb8:	4040      	eors	r0, r0
   1abba:	f380 8811 	msr	BASEPRI, r0
   1abbe:	f04f 0004 	mov.w	r0, #4
   1abc2:	df02      	svc	2
}
   1abc4:	4770      	bx	lr

0001abc6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1abc6:	4770      	bx	lr

0001abc8 <nordicsemi_nrf53_init>:
	__asm__ volatile(
   1abc8:	f04f 0320 	mov.w	r3, #32
   1abcc:	f3ef 8111 	mrs	r1, BASEPRI
   1abd0:	f383 8811 	msr	BASEPRI, r3
   1abd4:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   1abd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1abdc:	2201      	movs	r2, #1
   1abde:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   1abe2:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   1abe6:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   1abea:	f381 8811 	msr	BASEPRI, r1
   1abee:	f3bf 8f6f 	isb	sy
}
   1abf2:	2000      	movs	r0, #0
   1abf4:	4770      	bx	lr

0001abf6 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1abf6:	f002 bcb0 	b.w	1d55a <SystemInit>

0001abfa <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   1abfa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1abfe:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1ac02:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1ac04:	4640      	mov	r0, r8
{
   1ac06:	461f      	mov	r7, r3
   1ac08:	460c      	mov	r4, r1
   1ac0a:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1ac0c:	f000 ff34 	bl	1ba78 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1ac10:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1ac14:	b280      	uxth	r0, r0
   1ac16:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1ac1a:	9300      	str	r3, [sp, #0]
   1ac1c:	4632      	mov	r2, r6
   1ac1e:	463b      	mov	r3, r7
   1ac20:	4621      	mov	r1, r4
   1ac22:	4628      	mov	r0, r5
   1ac24:	f002 f8f6 	bl	1ce14 <bt_gatt_attr_read>
}
   1ac28:	b004      	add	sp, #16
   1ac2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ac2e <virtio_get_status>:
}
   1ac2e:	2004      	movs	r0, #4
   1ac30:	4770      	bx	lr

0001ac32 <virtio_get_features>:
}
   1ac32:	2001      	movs	r0, #1
   1ac34:	4770      	bx	lr

0001ac36 <virtio_set_features>:
}
   1ac36:	4770      	bx	lr

0001ac38 <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
   1ac38:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
   1ac3a:	21b4      	movs	r1, #180	; 0xb4
   1ac3c:	2004      	movs	r0, #4
   1ac3e:	f7ff fc19 	bl	1a474 <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   1ac42:	4604      	mov	r4, r0
   1ac44:	b118      	cbz	r0, 1ac4e <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
   1ac46:	22b4      	movs	r2, #180	; 0xb4
   1ac48:	2100      	movs	r1, #0
   1ac4a:	f000 ff7e 	bl	1bb4a <memset>
	}

	return vqs;
}
   1ac4e:	4620      	mov	r0, r4
   1ac50:	bd10      	pop	{r4, pc}

0001ac52 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   1ac52:	f002 bf91 	b.w	1db78 <rpmsg_destroy_ept>

0001ac56 <settings_load>:
	return settings_load_subtree(NULL);
   1ac56:	2000      	movs	r0, #0
   1ac58:	f7f0 bddc 	b.w	b814 <settings_load_subtree>

0001ac5c <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1ac5c:	2200      	movs	r2, #0
   1ac5e:	4611      	mov	r1, r2
   1ac60:	f7f0 bdb2 	b.w	b7c8 <settings_save_one>

0001ac64 <settings_name_steq>:
{
   1ac64:	4603      	mov	r3, r0
   1ac66:	b530      	push	{r4, r5, lr}
   1ac68:	4608      	mov	r0, r1
	if (next) {
   1ac6a:	b10a      	cbz	r2, 1ac70 <settings_name_steq+0xc>
		*next = NULL;
   1ac6c:	2100      	movs	r1, #0
   1ac6e:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1ac70:	b163      	cbz	r3, 1ac8c <settings_name_steq+0x28>
   1ac72:	b190      	cbz	r0, 1ac9a <settings_name_steq+0x36>
   1ac74:	1e41      	subs	r1, r0, #1
   1ac76:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1ac78:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1ac7c:	4604      	mov	r4, r0
   1ac7e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1ac82:	b15d      	cbz	r5, 1ac9c <settings_name_steq+0x38>
   1ac84:	429d      	cmp	r5, r3
   1ac86:	d101      	bne.n	1ac8c <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1ac88:	2d3d      	cmp	r5, #61	; 0x3d
   1ac8a:	d1f5      	bne.n	1ac78 <settings_name_steq+0x14>
	return 0;
   1ac8c:	2000      	movs	r0, #0
   1ac8e:	e004      	b.n	1ac9a <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1ac90:	2b3d      	cmp	r3, #61	; 0x3d
   1ac92:	d008      	beq.n	1aca6 <settings_name_steq+0x42>
   1ac94:	fab3 f083 	clz	r0, r3
   1ac98:	0940      	lsrs	r0, r0, #5
}
   1ac9a:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1ac9c:	2b2f      	cmp	r3, #47	; 0x2f
   1ac9e:	d1f7      	bne.n	1ac90 <settings_name_steq+0x2c>
		if (next) {
   1aca0:	b10a      	cbz	r2, 1aca6 <settings_name_steq+0x42>
			*next = name + 1;
   1aca2:	3401      	adds	r4, #1
   1aca4:	6014      	str	r4, [r2, #0]
		return 1;
   1aca6:	2001      	movs	r0, #1
   1aca8:	e7f7      	b.n	1ac9a <settings_name_steq+0x36>

0001acaa <settings_name_next>:
{
   1acaa:	4603      	mov	r3, r0
   1acac:	b530      	push	{r4, r5, lr}
	if (next) {
   1acae:	b109      	cbz	r1, 1acb4 <settings_name_next+0xa>
		*next = NULL;
   1acb0:	2200      	movs	r2, #0
   1acb2:	600a      	str	r2, [r1, #0]
	if (!name) {
   1acb4:	b16b      	cbz	r3, 1acd2 <settings_name_next+0x28>
   1acb6:	461a      	mov	r2, r3
   1acb8:	4614      	mov	r4, r2
   1acba:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1acbc:	f812 5b01 	ldrb.w	r5, [r2], #1
   1acc0:	b135      	cbz	r5, 1acd0 <settings_name_next+0x26>
   1acc2:	2d3d      	cmp	r5, #61	; 0x3d
   1acc4:	d004      	beq.n	1acd0 <settings_name_next+0x26>
   1acc6:	2d2f      	cmp	r5, #47	; 0x2f
   1acc8:	d1f6      	bne.n	1acb8 <settings_name_next+0xe>
		if (next) {
   1acca:	b109      	cbz	r1, 1acd0 <settings_name_next+0x26>
			*next = name + 1;
   1accc:	3401      	adds	r4, #1
   1acce:	600c      	str	r4, [r1, #0]
}
   1acd0:	bd30      	pop	{r4, r5, pc}
		return 0;
   1acd2:	4618      	mov	r0, r3
   1acd4:	e7fc      	b.n	1acd0 <settings_name_next+0x26>

0001acd6 <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   1acd6:	2000      	movs	r0, #0
   1acd8:	4770      	bx	lr

0001acda <set_on_state>:
	__asm__ volatile(
   1acda:	f04f 0320 	mov.w	r3, #32
   1acde:	f3ef 8211 	mrs	r2, BASEPRI
   1ace2:	f383 8811 	msr	BASEPRI, r3
   1ace6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1acea:	6803      	ldr	r3, [r0, #0]
   1acec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1acf0:	f043 0302 	orr.w	r3, r3, #2
   1acf4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1acf6:	f382 8811 	msr	BASEPRI, r2
   1acfa:	f3bf 8f6f 	isb	sy
}
   1acfe:	4770      	bx	lr

0001ad00 <async_start>:
{
   1ad00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad02:	9f06      	ldr	r7, [sp, #24]
   1ad04:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   1ad06:	68c4      	ldr	r4, [r0, #12]
	return &data->subsys[type];
   1ad08:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1ad0a:	f04f 0020 	mov.w	r0, #32
   1ad0e:	f3ef 8c11 	mrs	ip, BASEPRI
   1ad12:	f380 8811 	msr	BASEPRI, r0
   1ad16:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1ad1a:	260c      	movs	r6, #12
   1ad1c:	fb06 4601 	mla	r6, r6, r1, r4
   1ad20:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1ad24:	f000 0e07 	and.w	lr, r0, #7
   1ad28:	f1be 0f01 	cmp.w	lr, #1
   1ad2c:	d111      	bne.n	1ad52 <async_start+0x52>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1ad2e:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
	int err = 0;
   1ad32:	2600      	movs	r6, #0
	__asm__ volatile(
   1ad34:	f38c 8811 	msr	BASEPRI, ip
   1ad38:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1ad3c:	b93e      	cbnz	r6, 1ad4e <async_start+0x4e>
	subdata->cb = cb;
   1ad3e:	200c      	movs	r0, #12
   1ad40:	4341      	muls	r1, r0
   1ad42:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1ad44:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1ad48:	686b      	ldr	r3, [r5, #4]
   1ad4a:	585b      	ldr	r3, [r3, r1]
   1ad4c:	4798      	blx	r3
}
   1ad4e:	4630      	mov	r0, r6
   1ad50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1ad52:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1ad56:	4287      	cmp	r7, r0
   1ad58:	bf14      	ite	ne
   1ad5a:	f04f 36ff 	movne.w	r6, #4294967295
   1ad5e:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   1ad62:	e7e7      	b.n	1ad34 <async_start+0x34>

0001ad64 <api_start>:
{
   1ad64:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1ad66:	2480      	movs	r4, #128	; 0x80
   1ad68:	9400      	str	r4, [sp, #0]
   1ad6a:	f7ff ffc9 	bl	1ad00 <async_start>
}
   1ad6e:	b002      	add	sp, #8
   1ad70:	bd10      	pop	{r4, pc}

0001ad72 <onoff_started_callback>:
	return &data->mgr[type];
   1ad72:	68c0      	ldr	r0, [r0, #12]
   1ad74:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1ad76:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1ad7a:	2100      	movs	r1, #0
   1ad7c:	4710      	bx	r2

0001ad7e <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1ad7e:	2003      	movs	r0, #3
   1ad80:	f7fb be82 	b.w	16a88 <nrfx_clock_start>

0001ad84 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1ad84:	2002      	movs	r0, #2
   1ad86:	f7fb be7f 	b.w	16a88 <nrfx_clock_start>

0001ad8a <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1ad8a:	2000      	movs	r0, #0
   1ad8c:	f7fb be7c 	b.w	16a88 <nrfx_clock_start>

0001ad90 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1ad90:	2003      	movs	r0, #3
   1ad92:	f7fb bee3 	b.w	16b5c <nrfx_clock_stop>

0001ad96 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1ad96:	2002      	movs	r0, #2
   1ad98:	f7fb bee0 	b.w	16b5c <nrfx_clock_stop>

0001ad9c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1ad9c:	2000      	movs	r0, #0
   1ad9e:	f7fb bedd 	b.w	16b5c <nrfx_clock_stop>

0001ada2 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1ada2:	2280      	movs	r2, #128	; 0x80
   1ada4:	f7f0 be66 	b.w	ba74 <stop>

0001ada8 <blocking_start_callback>:
{
   1ada8:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1adaa:	f7fe ba87 	b.w	192bc <z_impl_k_sem_give>

0001adae <bt_rpmsg_open>:
{
   1adae:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   1adb0:	f7f1 f960 	bl	c074 <bt_rpmsg_platform_endpoint_is_bound>
   1adb4:	b108      	cbz	r0, 1adba <bt_rpmsg_open+0xc>
}
   1adb6:	2000      	movs	r0, #0
   1adb8:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   1adba:	2100      	movs	r1, #0
   1adbc:	2021      	movs	r0, #33	; 0x21
   1adbe:	f7fe fa47 	bl	19250 <z_impl_k_sleep>
   1adc2:	e7f5      	b.n	1adb0 <bt_rpmsg_open+0x2>

0001adc4 <endpoint_cb>:
{
   1adc4:	b508      	push	{r3, lr}
   1adc6:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   1adc8:	4611      	mov	r1, r2
   1adca:	f7f1 f869 	bl	bea0 <bt_rpmsg_rx>
}
   1adce:	2000      	movs	r0, #0
   1add0:	bd08      	pop	{r3, pc}

0001add2 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1add2:	4770      	bx	lr

0001add4 <attr_find_by_handle>:
{
   1add4:	b570      	push	{r4, r5, r6, lr}
   1add6:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   1add8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1addc:	b1a8      	cbz	r0, 1ae0a <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   1adde:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   1ade0:	3801      	subs	r0, #1
	while (upper >= lower) {
   1ade2:	4286      	cmp	r6, r0
   1ade4:	dd01      	ble.n	1adea <attr_find_by_handle+0x16>
		return NULL;
   1ade6:	2000      	movs	r0, #0
   1ade8:	e00f      	b.n	1ae0a <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   1adea:	1832      	adds	r2, r6, r0
   1adec:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1adf0:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   1adf2:	1cd5      	adds	r5, r2, #3
   1adf4:	00eb      	lsls	r3, r5, #3
   1adf6:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   1adfa:	892d      	ldrh	r5, [r5, #8]
   1adfc:	428d      	cmp	r5, r1
   1adfe:	d201      	bcs.n	1ae04 <attr_find_by_handle+0x30>
			lower = m + 1;
   1ae00:	1c56      	adds	r6, r2, #1
   1ae02:	e7ee      	b.n	1ade2 <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   1ae04:	d802      	bhi.n	1ae0c <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   1ae06:	3304      	adds	r3, #4
   1ae08:	18e0      	adds	r0, r4, r3
}
   1ae0a:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   1ae0c:	1e50      	subs	r0, r2, #1
   1ae0e:	e7e8      	b.n	1ade2 <attr_find_by_handle+0xe>

0001ae10 <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   1ae10:	2300      	movs	r3, #0
{
   1ae12:	b510      	push	{r4, lr}
   1ae14:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   1ae16:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1ae1a:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   1ae1e:	b910      	cbnz	r0, 1ae26 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   1ae20:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   1ae24:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ae26:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	return node->next;
   1ae2a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ae2c:	4290      	cmp	r0, r2
	list->head = node;
   1ae2e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   1ae32:	bf08      	it	eq
   1ae34:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   1ae38:	f003 f948 	bl	1e0cc <k_free>
   1ae3c:	e7ed      	b.n	1ae1a <svc_attr_memory_release+0xa>

0001ae3e <atomic_and>:
{
   1ae3e:	4603      	mov	r3, r0
}
   1ae40:	e8d3 0fef 	ldaex	r0, [r3]
   1ae44:	ea00 0201 	and.w	r2, r0, r1
   1ae48:	e8c3 2fec 	stlex	ip, r2, [r3]
   1ae4c:	f1bc 0f00 	cmp.w	ip, #0
   1ae50:	d1f6      	bne.n	1ae40 <atomic_and+0x2>
   1ae52:	4770      	bx	lr

0001ae54 <discovery_complete_not_found>:
{
   1ae54:	b510      	push	{r4, lr}
   1ae56:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   1ae58:	f7ff ffda 	bl	1ae10 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ae5c:	f06f 0101 	mvn.w	r1, #1
   1ae60:	f504 709c 	add.w	r0, r4, #312	; 0x138
   1ae64:	f7ff ffeb 	bl	1ae3e <atomic_and>
	if (dm->callback->service_not_found) {
   1ae68:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1ae6c:	685b      	ldr	r3, [r3, #4]
   1ae6e:	b123      	cbz	r3, 1ae7a <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   1ae70:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   1ae74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   1ae78:	4718      	bx	r3
}
   1ae7a:	bd10      	pop	{r4, pc}

0001ae7c <bt_gatt_dm_attr_service_val>:
{
   1ae7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1ae7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ae82:	2400      	movs	r4, #0
{
   1ae84:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1ae86:	6801      	ldr	r1, [r0, #0]
   1ae88:	4668      	mov	r0, sp
   1ae8a:	f88d 4000 	strb.w	r4, [sp]
   1ae8e:	f8ad 3002 	strh.w	r3, [sp, #2]
   1ae92:	f000 fea4 	bl	1bbde <bt_uuid_cmp>
   1ae96:	b918      	cbnz	r0, 1aea0 <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   1ae98:	6828      	ldr	r0, [r5, #0]
   1ae9a:	3808      	subs	r0, #8
}
   1ae9c:	b003      	add	sp, #12
   1ae9e:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   1aea0:	f642 0301 	movw	r3, #10241	; 0x2801
   1aea4:	6829      	ldr	r1, [r5, #0]
   1aea6:	a801      	add	r0, sp, #4
   1aea8:	f88d 4004 	strb.w	r4, [sp, #4]
   1aeac:	f8ad 3006 	strh.w	r3, [sp, #6]
   1aeb0:	f000 fe95 	bl	1bbde <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1aeb4:	2800      	cmp	r0, #0
   1aeb6:	d0ef      	beq.n	1ae98 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   1aeb8:	4620      	mov	r0, r4
   1aeba:	e7ef      	b.n	1ae9c <bt_gatt_dm_attr_service_val+0x20>

0001aebc <bt_gatt_dm_attr_chrc_val>:
{
   1aebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1aebe:	f642 0303 	movw	r3, #10243	; 0x2803
   1aec2:	2400      	movs	r4, #0
{
   1aec4:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1aec6:	6801      	ldr	r1, [r0, #0]
   1aec8:	a801      	add	r0, sp, #4
   1aeca:	f88d 4004 	strb.w	r4, [sp, #4]
   1aece:	f8ad 3006 	strh.w	r3, [sp, #6]
   1aed2:	f000 fe84 	bl	1bbde <bt_uuid_cmp>
   1aed6:	b918      	cbnz	r0, 1aee0 <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   1aed8:	6828      	ldr	r0, [r5, #0]
   1aeda:	3808      	subs	r0, #8
}
   1aedc:	b003      	add	sp, #12
   1aede:	bd30      	pop	{r4, r5, pc}
	return NULL;
   1aee0:	4620      	mov	r0, r4
   1aee2:	e7fb      	b.n	1aedc <bt_gatt_dm_attr_chrc_val+0x20>

0001aee4 <bt_gatt_dm_conn_get>:
}
   1aee4:	6800      	ldr	r0, [r0, #0]
   1aee6:	4770      	bx	lr

0001aee8 <bt_gatt_dm_service_get>:
}
   1aee8:	301c      	adds	r0, #28
   1aeea:	4770      	bx	lr

0001aeec <bt_gatt_dm_char_next>:
{
   1aeec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   1aeee:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   1aef2:	b131      	cbz	r1, 1af02 <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   1aef4:	42a9      	cmp	r1, r5
   1aef6:	d203      	bcs.n	1af00 <bt_gatt_dm_char_next+0x14>
	return NULL;
   1aef8:	2500      	movs	r5, #0
}
   1aefa:	4628      	mov	r0, r5
   1aefc:	b003      	add	sp, #12
   1aefe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1af00:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1af02:	2600      	movs	r6, #0
   1af04:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   1af08:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   1af0c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1af10:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   1af14:	3508      	adds	r5, #8
   1af16:	42ac      	cmp	r4, r5
   1af18:	d9ee      	bls.n	1aef8 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1af1a:	6829      	ldr	r1, [r5, #0]
   1af1c:	a801      	add	r0, sp, #4
   1af1e:	f88d 6004 	strb.w	r6, [sp, #4]
   1af22:	f8ad 7006 	strh.w	r7, [sp, #6]
   1af26:	f000 fe5a 	bl	1bbde <bt_uuid_cmp>
   1af2a:	2800      	cmp	r0, #0
   1af2c:	d1f2      	bne.n	1af14 <bt_gatt_dm_char_next+0x28>
   1af2e:	e7e4      	b.n	1aefa <bt_gatt_dm_char_next+0xe>

0001af30 <bt_gatt_dm_attr_next>:
{
   1af30:	4602      	mov	r2, r0
		prev = dm->attrs;
   1af32:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   1af36:	b111      	cbz	r1, 1af3e <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   1af38:	4299      	cmp	r1, r3
   1af3a:	d30b      	bcc.n	1af54 <bt_gatt_dm_attr_next+0x24>
   1af3c:	460b      	mov	r3, r1
		if (++prev < end) {
   1af3e:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   1af42:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   1af46:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1af4a:	321c      	adds	r2, #28
	return NULL;
   1af4c:	4290      	cmp	r0, r2
   1af4e:	bf28      	it	cs
   1af50:	2000      	movcs	r0, #0
   1af52:	4770      	bx	lr
   1af54:	2000      	movs	r0, #0
}
   1af56:	4770      	bx	lr

0001af58 <bt_gatt_dm_desc_next>:
{
   1af58:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   1af5a:	f7ff ffe9 	bl	1af30 <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   1af5e:	4604      	mov	r4, r0
   1af60:	b158      	cbz	r0, 1af7a <bt_gatt_dm_desc_next+0x22>
   1af62:	2300      	movs	r3, #0
   1af64:	f88d 3004 	strb.w	r3, [sp, #4]
   1af68:	f642 0303 	movw	r3, #10243	; 0x2803
   1af6c:	6801      	ldr	r1, [r0, #0]
   1af6e:	a801      	add	r0, sp, #4
   1af70:	f8ad 3006 	strh.w	r3, [sp, #6]
   1af74:	f000 fe33 	bl	1bbde <bt_uuid_cmp>
   1af78:	b900      	cbnz	r0, 1af7c <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   1af7a:	2400      	movs	r4, #0
}
   1af7c:	4620      	mov	r0, r4
   1af7e:	b002      	add	sp, #8
   1af80:	bd10      	pop	{r4, pc}

0001af82 <bt_gatt_dm_desc_by_uuid>:
{
   1af82:	b570      	push	{r4, r5, r6, lr}
   1af84:	4605      	mov	r5, r0
   1af86:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   1af88:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   1af8a:	4621      	mov	r1, r4
   1af8c:	4628      	mov	r0, r5
   1af8e:	f7ff ffe3 	bl	1af58 <bt_gatt_dm_desc_next>
   1af92:	4604      	mov	r4, r0
   1af94:	b128      	cbz	r0, 1afa2 <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   1af96:	4630      	mov	r0, r6
   1af98:	6821      	ldr	r1, [r4, #0]
   1af9a:	f000 fe20 	bl	1bbde <bt_uuid_cmp>
   1af9e:	2800      	cmp	r0, #0
   1afa0:	d1f3      	bne.n	1af8a <bt_gatt_dm_desc_by_uuid+0x8>
}
   1afa2:	4620      	mov	r0, r4
   1afa4:	bd70      	pop	{r4, r5, r6, pc}

0001afa6 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   1afa6:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1afa8:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   1afac:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1afae:	f06f 0102 	mvn.w	r1, #2
   1afb2:	4628      	mov	r0, r5
   1afb4:	f7ff ff43 	bl	1ae3e <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1afb8:	0783      	lsls	r3, r0, #30
   1afba:	d509      	bpl.n	1afd0 <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   1afbc:	4620      	mov	r0, r4
   1afbe:	f7ff ff27 	bl	1ae10 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1afc2:	f06f 0101 	mvn.w	r1, #1
   1afc6:	4628      	mov	r0, r5
   1afc8:	f7ff ff39 	bl	1ae3e <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   1afcc:	2000      	movs	r0, #0
}
   1afce:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1afd0:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1afd4:	e7fb      	b.n	1afce <bt_gatt_dm_data_release+0x28>

0001afd6 <bt_scan_stop>:
	return bt_le_scan_stop();
   1afd6:	f7f5 be0f 	b.w	10bf8 <bt_le_scan_stop>

0001afda <bt_bas_conn>:
}
   1afda:	6800      	ldr	r0, [r0, #0]
   1afdc:	4770      	bx	lr

0001afde <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1afde:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1afe0:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1afe2:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1afe4:	bf9c      	itt	ls
   1afe6:	6880      	ldrls	r0, [r0, #8]
   1afe8:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1afea:	3b01      	subs	r3, #1
   1afec:	1a98      	subs	r0, r3, r2
}
   1afee:	4770      	bx	lr

0001aff0 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1aff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1aff4:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1aff8:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1affa:	eba9 0804 	sub.w	r8, r9, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1affe:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1b000:	4590      	cmp	r8, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1b002:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1b004:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1b006:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1b008:	d904      	bls.n	1b014 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1b00a:	f000 fd73 	bl	1baf4 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1b00e:	60ec      	str	r4, [r5, #12]
}
   1b010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1b014:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1b016:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1b01a:	f000 fd6b 	bl	1baf4 <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1b01e:	4622      	mov	r2, r4
   1b020:	6868      	ldr	r0, [r5, #4]
   1b022:	eb07 0108 	add.w	r1, r7, r8
   1b026:	e7f0      	b.n	1b00a <_WriteNoCheck+0x1a>

0001b028 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1b028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b02c:	4606      	mov	r6, r0
   1b02e:	4689      	mov	r9, r1
   1b030:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1b032:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   1b036:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1b038:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1b03a:	68b3      	ldr	r3, [r6, #8]
    if (RdOff > WrOff) {
   1b03c:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1b03e:	bf28      	it	cs
   1b040:	18e4      	addcs	r4, r4, r3
   1b042:	3c01      	subs	r4, #1
   1b044:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1b046:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1b048:	42bc      	cmp	r4, r7
   1b04a:	bf28      	it	cs
   1b04c:	463c      	movcs	r4, r7
   1b04e:	4294      	cmp	r4, r2
   1b050:	bf28      	it	cs
   1b052:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1b054:	6870      	ldr	r0, [r6, #4]
   1b056:	4649      	mov	r1, r9
   1b058:	4428      	add	r0, r5
   1b05a:	4622      	mov	r2, r4
   1b05c:	f000 fd4a 	bl	1baf4 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1b060:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1b062:	4425      	add	r5, r4
      WrOff = 0u;
   1b064:	42ab      	cmp	r3, r5
   1b066:	bf08      	it	eq
   1b068:	2500      	moveq	r5, #0
  } while (NumBytes);
   1b06a:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1b06c:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1b06e:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1b070:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1b072:	d1e1      	bne.n	1b038 <_WriteBlocking+0x10>
}
   1b074:	4640      	mov	r0, r8
   1b076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b07a <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1b07a:	f7f2 b97b 	b.w	d374 <_DoInit>

0001b07e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1b07e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1b080:	f7ff fffb 	bl	1b07a <SEGGER_RTT_Init>

	return 0;
}
   1b084:	2000      	movs	r0, #0
   1b086:	bd08      	pop	{r3, pc}

0001b088 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1b088:	b538      	push	{r3, r4, r5, lr}
   1b08a:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1b08c:	42ab      	cmp	r3, r5
{
   1b08e:	4611      	mov	r1, r2
   1b090:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1b092:	d804      	bhi.n	1b09e <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1b094:	461a      	mov	r2, r3
   1b096:	f000 fd2d 	bl	1baf4 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1b09a:	4620      	mov	r0, r4
   1b09c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1b09e:	2400      	movs	r4, #0
   1b0a0:	e7fb      	b.n	1b09a <_copy+0x12>

0001b0a2 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1b0a2:	f000 bd52 	b.w	1bb4a <memset>

0001b0a6 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1b0a6:	09c3      	lsrs	r3, r0, #7
   1b0a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b0ac:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1b0b0:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1b0b4:	b2c0      	uxtb	r0, r0
   1b0b6:	4770      	bx	lr

0001b0b8 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1b0b8:	78cb      	ldrb	r3, [r1, #3]
   1b0ba:	7802      	ldrb	r2, [r0, #0]
   1b0bc:	4053      	eors	r3, r2
   1b0be:	7003      	strb	r3, [r0, #0]
   1b0c0:	884b      	ldrh	r3, [r1, #2]
   1b0c2:	7842      	ldrb	r2, [r0, #1]
   1b0c4:	4053      	eors	r3, r2
   1b0c6:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1b0c8:	680a      	ldr	r2, [r1, #0]
   1b0ca:	7883      	ldrb	r3, [r0, #2]
   1b0cc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b0d0:	7083      	strb	r3, [r0, #2]
   1b0d2:	680a      	ldr	r2, [r1, #0]
   1b0d4:	78c3      	ldrb	r3, [r0, #3]
   1b0d6:	4053      	eors	r3, r2
   1b0d8:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1b0da:	79cb      	ldrb	r3, [r1, #7]
   1b0dc:	7902      	ldrb	r2, [r0, #4]
   1b0de:	4053      	eors	r3, r2
   1b0e0:	7103      	strb	r3, [r0, #4]
   1b0e2:	88cb      	ldrh	r3, [r1, #6]
   1b0e4:	7942      	ldrb	r2, [r0, #5]
   1b0e6:	4053      	eors	r3, r2
   1b0e8:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1b0ea:	684a      	ldr	r2, [r1, #4]
   1b0ec:	7983      	ldrb	r3, [r0, #6]
   1b0ee:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b0f2:	7183      	strb	r3, [r0, #6]
   1b0f4:	684a      	ldr	r2, [r1, #4]
   1b0f6:	79c3      	ldrb	r3, [r0, #7]
   1b0f8:	4053      	eors	r3, r2
   1b0fa:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1b0fc:	7acb      	ldrb	r3, [r1, #11]
   1b0fe:	7a02      	ldrb	r2, [r0, #8]
   1b100:	4053      	eors	r3, r2
   1b102:	7203      	strb	r3, [r0, #8]
   1b104:	7a42      	ldrb	r2, [r0, #9]
   1b106:	894b      	ldrh	r3, [r1, #10]
   1b108:	4053      	eors	r3, r2
   1b10a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1b10c:	688a      	ldr	r2, [r1, #8]
   1b10e:	7a83      	ldrb	r3, [r0, #10]
   1b110:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b114:	7283      	strb	r3, [r0, #10]
   1b116:	688a      	ldr	r2, [r1, #8]
   1b118:	7ac3      	ldrb	r3, [r0, #11]
   1b11a:	4053      	eors	r3, r2
   1b11c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1b11e:	7bcb      	ldrb	r3, [r1, #15]
   1b120:	7b02      	ldrb	r2, [r0, #12]
   1b122:	4053      	eors	r3, r2
   1b124:	7303      	strb	r3, [r0, #12]
   1b126:	89cb      	ldrh	r3, [r1, #14]
   1b128:	7b42      	ldrb	r2, [r0, #13]
   1b12a:	4053      	eors	r3, r2
   1b12c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1b12e:	68ca      	ldr	r2, [r1, #12]
   1b130:	7b83      	ldrb	r3, [r0, #14]
   1b132:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b136:	7383      	strb	r3, [r0, #14]
   1b138:	68ca      	ldr	r2, [r1, #12]
   1b13a:	7bc3      	ldrb	r3, [r0, #15]
   1b13c:	4053      	eors	r3, r2
   1b13e:	73c3      	strb	r3, [r0, #15]
}
   1b140:	4770      	bx	lr

0001b142 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1b142:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b144:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b146:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b148:	f88d 2000 	strb.w	r2, [sp]
   1b14c:	7942      	ldrb	r2, [r0, #5]
   1b14e:	f88d 2001 	strb.w	r2, [sp, #1]
   1b152:	7a82      	ldrb	r2, [r0, #10]
   1b154:	f88d 2002 	strb.w	r2, [sp, #2]
   1b158:	7bc2      	ldrb	r2, [r0, #15]
   1b15a:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1b15e:	7902      	ldrb	r2, [r0, #4]
   1b160:	f88d 2004 	strb.w	r2, [sp, #4]
   1b164:	7a42      	ldrb	r2, [r0, #9]
   1b166:	f88d 2005 	strb.w	r2, [sp, #5]
   1b16a:	7b82      	ldrb	r2, [r0, #14]
   1b16c:	f88d 2006 	strb.w	r2, [sp, #6]
   1b170:	78c2      	ldrb	r2, [r0, #3]
   1b172:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1b176:	7a02      	ldrb	r2, [r0, #8]
   1b178:	f88d 2008 	strb.w	r2, [sp, #8]
   1b17c:	7b42      	ldrb	r2, [r0, #13]
   1b17e:	f88d 2009 	strb.w	r2, [sp, #9]
   1b182:	7882      	ldrb	r2, [r0, #2]
   1b184:	f88d 200a 	strb.w	r2, [sp, #10]
   1b188:	79c2      	ldrb	r2, [r0, #7]
   1b18a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b18e:	7b02      	ldrb	r2, [r0, #12]
   1b190:	f88d 200c 	strb.w	r2, [sp, #12]
   1b194:	7842      	ldrb	r2, [r0, #1]
   1b196:	f88d 200d 	strb.w	r2, [sp, #13]
   1b19a:	7982      	ldrb	r2, [r0, #6]
   1b19c:	f88d 200e 	strb.w	r2, [sp, #14]
   1b1a0:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b1a4:	2310      	movs	r3, #16
   1b1a6:	466a      	mov	r2, sp
   1b1a8:	4619      	mov	r1, r3
   1b1aa:	f7ff ff6d 	bl	1b088 <_copy>
}
   1b1ae:	b005      	add	sp, #20
   1b1b0:	f85d fb04 	ldr.w	pc, [sp], #4

0001b1b4 <mult_row_column>:
{
   1b1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b1b6:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b1b8:	7808      	ldrb	r0, [r1, #0]
{
   1b1ba:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b1bc:	f7ff ff73 	bl	1b0a6 <_double_byte>
   1b1c0:	4605      	mov	r5, r0
   1b1c2:	7860      	ldrb	r0, [r4, #1]
   1b1c4:	f7ff ff6f 	bl	1b0a6 <_double_byte>
   1b1c8:	78a2      	ldrb	r2, [r4, #2]
   1b1ca:	7863      	ldrb	r3, [r4, #1]
   1b1cc:	4053      	eors	r3, r2
   1b1ce:	78e2      	ldrb	r2, [r4, #3]
   1b1d0:	4053      	eors	r3, r2
   1b1d2:	405d      	eors	r5, r3
   1b1d4:	4045      	eors	r5, r0
   1b1d6:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1b1d8:	7860      	ldrb	r0, [r4, #1]
   1b1da:	7827      	ldrb	r7, [r4, #0]
   1b1dc:	f7ff ff63 	bl	1b0a6 <_double_byte>
   1b1e0:	4605      	mov	r5, r0
   1b1e2:	78a0      	ldrb	r0, [r4, #2]
   1b1e4:	f7ff ff5f 	bl	1b0a6 <_double_byte>
   1b1e8:	78a3      	ldrb	r3, [r4, #2]
   1b1ea:	405f      	eors	r7, r3
   1b1ec:	78e3      	ldrb	r3, [r4, #3]
   1b1ee:	405f      	eors	r7, r3
   1b1f0:	407d      	eors	r5, r7
   1b1f2:	4045      	eors	r5, r0
   1b1f4:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1b1f6:	78a0      	ldrb	r0, [r4, #2]
   1b1f8:	7865      	ldrb	r5, [r4, #1]
   1b1fa:	7827      	ldrb	r7, [r4, #0]
   1b1fc:	f7ff ff53 	bl	1b0a6 <_double_byte>
   1b200:	406f      	eors	r7, r5
   1b202:	4605      	mov	r5, r0
   1b204:	78e0      	ldrb	r0, [r4, #3]
   1b206:	f7ff ff4e 	bl	1b0a6 <_double_byte>
   1b20a:	78e3      	ldrb	r3, [r4, #3]
   1b20c:	405f      	eors	r7, r3
   1b20e:	407d      	eors	r5, r7
   1b210:	4045      	eors	r5, r0
   1b212:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1b214:	7820      	ldrb	r0, [r4, #0]
   1b216:	f7ff ff46 	bl	1b0a6 <_double_byte>
   1b21a:	7863      	ldrb	r3, [r4, #1]
   1b21c:	7825      	ldrb	r5, [r4, #0]
   1b21e:	405d      	eors	r5, r3
   1b220:	78a3      	ldrb	r3, [r4, #2]
   1b222:	405d      	eors	r5, r3
   1b224:	4045      	eors	r5, r0
   1b226:	78e0      	ldrb	r0, [r4, #3]
   1b228:	f7ff ff3d 	bl	1b0a6 <_double_byte>
   1b22c:	b2ed      	uxtb	r5, r5
   1b22e:	4045      	eors	r5, r0
   1b230:	70f5      	strb	r5, [r6, #3]
}
   1b232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b234 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1b234:	b570      	push	{r4, r5, r6, lr}
   1b236:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1b238:	4605      	mov	r5, r0
{
   1b23a:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1b23c:	2800      	cmp	r0, #0
   1b23e:	d049      	beq.n	1b2d4 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1b240:	2900      	cmp	r1, #0
   1b242:	d049      	beq.n	1b2d8 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1b244:	2a00      	cmp	r2, #0
   1b246:	d049      	beq.n	1b2dc <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1b248:	2310      	movs	r3, #16
   1b24a:	460a      	mov	r2, r1
   1b24c:	4668      	mov	r0, sp
   1b24e:	4619      	mov	r1, r3
   1b250:	f7ff ff1a 	bl	1b088 <_copy>
	add_round_key(state, s->words);
   1b254:	4621      	mov	r1, r4
   1b256:	4668      	mov	r0, sp
   1b258:	f7ff ff2e 	bl	1b0b8 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1b25c:	3410      	adds	r4, #16
   1b25e:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1b262:	4668      	mov	r0, sp
   1b264:	f7f2 f8e6 	bl	d434 <sub_bytes>
		shift_rows(state);
   1b268:	4668      	mov	r0, sp
   1b26a:	f7ff ff6a 	bl	1b142 <shift_rows>
	mult_row_column(t, s);
   1b26e:	4669      	mov	r1, sp
   1b270:	a804      	add	r0, sp, #16
   1b272:	f7ff ff9f 	bl	1b1b4 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1b276:	a901      	add	r1, sp, #4
   1b278:	a805      	add	r0, sp, #20
   1b27a:	f7ff ff9b 	bl	1b1b4 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1b27e:	a902      	add	r1, sp, #8
   1b280:	a806      	add	r0, sp, #24
   1b282:	f7ff ff97 	bl	1b1b4 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1b286:	a903      	add	r1, sp, #12
   1b288:	a807      	add	r0, sp, #28
   1b28a:	f7ff ff93 	bl	1b1b4 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b28e:	2310      	movs	r3, #16
   1b290:	4668      	mov	r0, sp
   1b292:	4619      	mov	r1, r3
   1b294:	eb0d 0203 	add.w	r2, sp, r3
   1b298:	f7ff fef6 	bl	1b088 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1b29c:	4621      	mov	r1, r4
   1b29e:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1b2a0:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1b2a2:	f7ff ff09 	bl	1b0b8 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1b2a6:	42a6      	cmp	r6, r4
   1b2a8:	d1db      	bne.n	1b262 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1b2aa:	f7f2 f8c3 	bl	d434 <sub_bytes>
	shift_rows(state);
   1b2ae:	4668      	mov	r0, sp
   1b2b0:	f7ff ff47 	bl	1b142 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1b2b4:	4631      	mov	r1, r6
   1b2b6:	4668      	mov	r0, sp
   1b2b8:	f7ff fefe 	bl	1b0b8 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1b2bc:	2310      	movs	r3, #16
   1b2be:	466a      	mov	r2, sp
   1b2c0:	4619      	mov	r1, r3
   1b2c2:	4628      	mov	r0, r5
   1b2c4:	f7ff fee0 	bl	1b088 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1b2c8:	4668      	mov	r0, sp
   1b2ca:	2210      	movs	r2, #16
   1b2cc:	2100      	movs	r1, #0
   1b2ce:	f7ff fee8 	bl	1b0a2 <_set>

	return TC_CRYPTO_SUCCESS;
   1b2d2:	2001      	movs	r0, #1
}
   1b2d4:	b008      	add	sp, #32
   1b2d6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b2d8:	4608      	mov	r0, r1
   1b2da:	e7fb      	b.n	1b2d4 <tc_aes_encrypt+0xa0>
   1b2dc:	4610      	mov	r0, r2
   1b2de:	e7f9      	b.n	1b2d4 <tc_aes_encrypt+0xa0>

0001b2e0 <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b2e0:	460a      	mov	r2, r1
{
   1b2e2:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b2e4:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1b2e8:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b2ea:	2b00      	cmp	r3, #0
   1b2ec:	bfb4      	ite	lt
   1b2ee:	2387      	movlt	r3, #135	; 0x87
   1b2f0:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1b2f2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1b2f6:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1b2fa:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1b2fc:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1b300:	d002      	beq.n	1b308 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1b302:	7813      	ldrb	r3, [r2, #0]
   1b304:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1b306:	e7f4      	b.n	1b2f2 <gf_double+0x12>
	}
}
   1b308:	bd10      	pop	{r4, pc}

0001b30a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1b30a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1b30c:	b120      	cbz	r0, 1b318 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1b30e:	2258      	movs	r2, #88	; 0x58
   1b310:	2100      	movs	r1, #0
   1b312:	f7ff fec6 	bl	1b0a2 <_set>
   1b316:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1b318:	bd08      	pop	{r3, pc}

0001b31a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1b31a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b31c:	4604      	mov	r4, r0
   1b31e:	b188      	cbz	r0, 1b344 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b320:	2210      	movs	r2, #16
   1b322:	2100      	movs	r1, #0
   1b324:	f7ff febd 	bl	1b0a2 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1b328:	2210      	movs	r2, #16
   1b32a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b32e:	2100      	movs	r1, #0
   1b330:	f7ff feb7 	bl	1b0a2 <_set>
	s->leftover_offset = 0;
   1b334:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1b336:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1b338:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1b33a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1b33e:	2001      	movs	r0, #1
   1b340:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1b344:	bd10      	pop	{r4, pc}

0001b346 <tc_cmac_setup>:
{
   1b346:	b570      	push	{r4, r5, r6, lr}
   1b348:	460d      	mov	r5, r1
   1b34a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1b34c:	4604      	mov	r4, r0
   1b34e:	b310      	cbz	r0, 1b396 <_flash_used+0x16>
   1b350:	b311      	cbz	r1, 1b398 <_flash_used+0x18>
	_set(s, 0, sizeof(*s));
   1b352:	2258      	movs	r2, #88	; 0x58
   1b354:	2100      	movs	r1, #0
   1b356:	f7ff fea4 	bl	1b0a2 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1b35a:	4629      	mov	r1, r5
   1b35c:	4630      	mov	r0, r6
	s->sched = sched;
   1b35e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1b360:	f7f2 f874 	bl	d44c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b364:	2210      	movs	r2, #16
   1b366:	2100      	movs	r1, #0
   1b368:	4620      	mov	r0, r4
   1b36a:	f7ff fe9a 	bl	1b0a2 <_set>
	gf_double (s->K1, s->iv);
   1b36e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b372:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b374:	4621      	mov	r1, r4
   1b376:	4620      	mov	r0, r4
   1b378:	f7ff ff5c 	bl	1b234 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1b37c:	4621      	mov	r1, r4
   1b37e:	4628      	mov	r0, r5
   1b380:	f7ff ffae 	bl	1b2e0 <gf_double>
	gf_double (s->K2, s->K1);
   1b384:	4629      	mov	r1, r5
   1b386:	f104 0020 	add.w	r0, r4, #32
   1b38a:	f7ff ffa9 	bl	1b2e0 <gf_double>
	tc_cmac_init(s);
   1b38e:	4620      	mov	r0, r4
   1b390:	f7ff ffc3 	bl	1b31a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1b394:	2001      	movs	r0, #1
}
   1b396:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b398:	4608      	mov	r0, r1
   1b39a:	e7fc      	b.n	1b396 <_flash_used+0x16>

0001b39c <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1b39c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b3a0:	460d      	mov	r5, r1
   1b3a2:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b3a4:	4604      	mov	r4, r0
   1b3a6:	2800      	cmp	r0, #0
   1b3a8:	d061      	beq.n	1b46e <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1b3aa:	b912      	cbnz	r2, 1b3b2 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1b3ac:	2001      	movs	r0, #1
}
   1b3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1b3b2:	2900      	cmp	r1, #0
   1b3b4:	d05b      	beq.n	1b46e <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1b3b6:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1b3ba:	ea53 0102 	orrs.w	r1, r3, r2
   1b3be:	d056      	beq.n	1b46e <tc_cmac_update+0xd2>
	s->countdown--;
   1b3c0:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1b3c2:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1b3c6:	f142 32ff 	adc.w	r2, r2, #4294967295
   1b3ca:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1b3ce:	f1b8 0f00 	cmp.w	r8, #0
   1b3d2:	d02a      	beq.n	1b42a <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1b3d4:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b3d8:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1b3dc:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b3de:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1b3e0:	d208      	bcs.n	1b3f4 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b3e2:	462a      	mov	r2, r5
   1b3e4:	4633      	mov	r3, r6
   1b3e6:	4631      	mov	r1, r6
   1b3e8:	f7ff fe4e 	bl	1b088 <_copy>
			s->leftover_offset += data_length;
   1b3ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1b3ee:	4432      	add	r2, r6
   1b3f0:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1b3f2:	e7db      	b.n	1b3ac <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1b3f4:	463b      	mov	r3, r7
   1b3f6:	462a      	mov	r2, r5
   1b3f8:	4639      	mov	r1, r7
   1b3fa:	f7ff fe45 	bl	1b088 <_copy>
		s->leftover_offset = 0;
   1b3fe:	2300      	movs	r3, #0
   1b400:	3e10      	subs	r6, #16
   1b402:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1b404:	4446      	add	r6, r8
		data += remaining_space;
   1b406:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b408:	1e63      	subs	r3, r4, #1
   1b40a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1b40e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b412:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b416:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1b418:	ea82 0200 	eor.w	r2, r2, r0
   1b41c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b41e:	d1f6      	bne.n	1b40e <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b420:	4621      	mov	r1, r4
   1b422:	4620      	mov	r0, r4
   1b424:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b426:	f7ff ff05 	bl	1b234 <tc_aes_encrypt>
   1b42a:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1b42e:	2e10      	cmp	r6, #16
   1b430:	d80a      	bhi.n	1b448 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1b432:	2e00      	cmp	r6, #0
   1b434:	d0ba      	beq.n	1b3ac <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1b436:	4633      	mov	r3, r6
   1b438:	462a      	mov	r2, r5
   1b43a:	4631      	mov	r1, r6
   1b43c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b440:	f7ff fe22 	bl	1b088 <_copy>
		s->leftover_offset = data_length;
   1b444:	6466      	str	r6, [r4, #68]	; 0x44
   1b446:	e7b1      	b.n	1b3ac <tc_cmac_update+0x10>
   1b448:	1e63      	subs	r3, r4, #1
   1b44a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1b44c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b450:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b454:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1b456:	ea82 0200 	eor.w	r2, r2, r0
   1b45a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b45c:	d1f6      	bne.n	1b44c <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b45e:	4621      	mov	r1, r4
   1b460:	4620      	mov	r0, r4
   1b462:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b464:	f7ff fee6 	bl	1b234 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1b468:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1b46a:	3e10      	subs	r6, #16
   1b46c:	e7df      	b.n	1b42e <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1b46e:	2000      	movs	r0, #0
   1b470:	e79d      	b.n	1b3ae <tc_cmac_update+0x12>

0001b472 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1b472:	b570      	push	{r4, r5, r6, lr}
   1b474:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1b476:	4605      	mov	r5, r0
   1b478:	b1f0      	cbz	r0, 1b4b8 <tc_cmac_final+0x46>
   1b47a:	b371      	cbz	r1, 1b4da <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1b47c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1b47e:	2a10      	cmp	r2, #16
   1b480:	d11b      	bne.n	1b4ba <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1b482:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b484:	1e63      	subs	r3, r4, #1
   1b486:	3901      	subs	r1, #1
   1b488:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b48c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b490:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b494:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b496:	ea82 0206 	eor.w	r2, r2, r6
   1b49a:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1b49e:	ea82 0206 	eor.w	r2, r2, r6
   1b4a2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b4a4:	d1f2      	bne.n	1b48c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1b4a6:	4621      	mov	r1, r4
   1b4a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b4aa:	4628      	mov	r0, r5
   1b4ac:	f7ff fec2 	bl	1b234 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1b4b0:	4620      	mov	r0, r4
   1b4b2:	f7ff ff2a 	bl	1b30a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1b4b6:	2001      	movs	r0, #1
}
   1b4b8:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1b4ba:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1b4be:	2100      	movs	r1, #0
   1b4c0:	f1c2 0210 	rsb	r2, r2, #16
   1b4c4:	4420      	add	r0, r4
   1b4c6:	f7ff fdec 	bl	1b0a2 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b4ca:	2280      	movs	r2, #128	; 0x80
   1b4cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1b4ce:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b4d2:	4423      	add	r3, r4
   1b4d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1b4d8:	e7d4      	b.n	1b484 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1b4da:	4608      	mov	r0, r1
   1b4dc:	e7ec      	b.n	1b4b8 <tc_cmac_final+0x46>

0001b4de <tc_sha256_update>:
{
   1b4de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b4e0:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1b4e2:	b110      	cbz	r0, 1b4ea <tc_sha256_update+0xc>
   1b4e4:	b1f9      	cbz	r1, 1b526 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1b4e6:	b90a      	cbnz	r2, 1b4ec <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1b4e8:	2001      	movs	r0, #1
}
   1b4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1b4ec:	2600      	movs	r6, #0
   1b4ee:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1b4f0:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   1b4f4:	42a5      	cmp	r5, r4
   1b4f6:	d0f7      	beq.n	1b4e8 <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   1b4f8:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1b4fa:	1c5a      	adds	r2, r3, #1
   1b4fc:	6682      	str	r2, [r0, #104]	; 0x68
   1b4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   1b502:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1b504:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1b506:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1b50a:	d9f3      	bls.n	1b4f4 <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   1b50c:	4639      	mov	r1, r7
   1b50e:	f7f1 fff1 	bl	d4f4 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1b512:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1b516:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1b51a:	f142 0200 	adc.w	r2, r2, #0
   1b51e:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1b522:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1b524:	e7e6      	b.n	1b4f4 <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   1b526:	4608      	mov	r0, r1
   1b528:	e7df      	b.n	1b4ea <tc_sha256_update+0xc>

0001b52a <tc_sha256_final>:
{
   1b52a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b52c:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1b52e:	4605      	mov	r5, r0
   1b530:	2800      	cmp	r0, #0
   1b532:	d055      	beq.n	1b5e0 <tc_sha256_final+0xb6>
   1b534:	2900      	cmp	r1, #0
   1b536:	d054      	beq.n	1b5e2 <tc_sha256_final+0xb8>
	s->bits_hashed += (s->leftover_offset << 3);
   1b538:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1b53a:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1b53e:	00d8      	lsls	r0, r3, #3
   1b540:	1812      	adds	r2, r2, r0
   1b542:	f141 0100 	adc.w	r1, r1, #0
   1b546:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b54a:	2280      	movs	r2, #128	; 0x80
   1b54c:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1b54e:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b550:	4423      	add	r3, r4
   1b552:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1b554:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1b558:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1b55c:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1b560:	d90a      	bls.n	1b578 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1b562:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1b566:	4639      	mov	r1, r7
   1b568:	4430      	add	r0, r6
   1b56a:	f7ff fd9a 	bl	1b0a2 <_set>
		compress(s->iv, s->leftover);
   1b56e:	4631      	mov	r1, r6
   1b570:	4620      	mov	r0, r4
   1b572:	f7f1 ffbf 	bl	d4f4 <compress>
		s->leftover_offset = 0;
   1b576:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1b578:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1b57a:	2100      	movs	r1, #0
   1b57c:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1b580:	4430      	add	r0, r6
   1b582:	f7ff fd8e 	bl	1b0a2 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1b586:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1b588:	4631      	mov	r1, r6
   1b58a:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1b58c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1b58e:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1b590:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1b592:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1b596:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1b59a:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1b59c:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   1b59e:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1b5a0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1b5a4:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1b5a8:	f7f1 ffa4 	bl	d4f4 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b5ac:	1f26      	subs	r6, r4, #4
   1b5ae:	1d2b      	adds	r3, r5, #4
   1b5b0:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1b5b4:	f856 2f04 	ldr.w	r2, [r6, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b5b8:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1b5ba:	0e11      	lsrs	r1, r2, #24
   1b5bc:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1b5c0:	0c11      	lsrs	r1, r2, #16
   1b5c2:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1b5c6:	0a11      	lsrs	r1, r2, #8
   1b5c8:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1b5cc:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1b5d0:	4283      	cmp	r3, r0
   1b5d2:	d1ef      	bne.n	1b5b4 <tc_sha256_final+0x8a>
	_set(s, 0, sizeof(*s));
   1b5d4:	4620      	mov	r0, r4
   1b5d6:	2270      	movs	r2, #112	; 0x70
   1b5d8:	2100      	movs	r1, #0
   1b5da:	f7ff fd62 	bl	1b0a2 <_set>
	return TC_CRYPTO_SUCCESS;
   1b5de:	2001      	movs	r0, #1
}
   1b5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1b5e2:	4608      	mov	r0, r1
   1b5e4:	e7fc      	b.n	1b5e0 <tc_sha256_final+0xb6>

0001b5e6 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1b5e6:	b530      	push	{r4, r5, lr}
   1b5e8:	1e43      	subs	r3, r0, #1
   1b5ea:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1b5ec:	42a9      	cmp	r1, r5
   1b5ee:	d106      	bne.n	1b5fe <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1b5f0:	2136      	movs	r1, #54	; 0x36
   1b5f2:	245c      	movs	r4, #92	; 0x5c
   1b5f4:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1b5f6:	1a13      	subs	r3, r2, r0
   1b5f8:	2b3f      	cmp	r3, #63	; 0x3f
   1b5fa:	d90c      	bls.n	1b616 <rekey+0x30>
	}
}
   1b5fc:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1b5fe:	780c      	ldrb	r4, [r1, #0]
   1b600:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1b604:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1b608:	f811 4b01 	ldrb.w	r4, [r1], #1
   1b60c:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1b610:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1b614:	e7ea      	b.n	1b5ec <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1b616:	f802 1b01 	strb.w	r1, [r2], #1
   1b61a:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1b61e:	e7ea      	b.n	1b5f6 <rekey+0x10>

0001b620 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1b620:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b622:	460e      	mov	r6, r1
   1b624:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1b626:	4605      	mov	r5, r0
{
   1b628:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1b62a:	b1b8      	cbz	r0, 1b65c <tc_hmac_set_key+0x3c>
   1b62c:	b341      	cbz	r1, 1b680 <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1b62e:	b34a      	cbz	r2, 1b684 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1b630:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1b632:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1b636:	d813      	bhi.n	1b660 <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1b638:	a810      	add	r0, sp, #64	; 0x40
   1b63a:	f7f2 f843 	bl	d6c4 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1b63e:	4622      	mov	r2, r4
   1b640:	4669      	mov	r1, sp
   1b642:	a810      	add	r0, sp, #64	; 0x40
   1b644:	f7ff ff4b 	bl	1b4de <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1b648:	a910      	add	r1, sp, #64	; 0x40
   1b64a:	a834      	add	r0, sp, #208	; 0xd0
   1b64c:	f7ff ff6d 	bl	1b52a <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1b650:	4622      	mov	r2, r4
   1b652:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1b654:	4638      	mov	r0, r7
   1b656:	f7ff ffc6 	bl	1b5e6 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1b65a:	2001      	movs	r0, #1
}
   1b65c:	b04d      	add	sp, #308	; 0x134
   1b65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1b660:	f7f2 f830 	bl	d6c4 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1b664:	4622      	mov	r2, r4
   1b666:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1b668:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1b66c:	4628      	mov	r0, r5
   1b66e:	f7ff ff36 	bl	1b4de <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1b672:	4629      	mov	r1, r5
   1b674:	4620      	mov	r0, r4
   1b676:	f7ff ff58 	bl	1b52a <tc_sha256_final>
		rekey(ctx->key,
   1b67a:	2220      	movs	r2, #32
   1b67c:	4621      	mov	r1, r4
   1b67e:	e7e9      	b.n	1b654 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1b680:	4608      	mov	r0, r1
   1b682:	e7eb      	b.n	1b65c <tc_hmac_set_key+0x3c>
   1b684:	4610      	mov	r0, r2
   1b686:	e7e9      	b.n	1b65c <tc_hmac_set_key+0x3c>

0001b688 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1b688:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1b68a:	4604      	mov	r4, r0
   1b68c:	b140      	cbz	r0, 1b6a0 <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1b68e:	f7f2 f819 	bl	d6c4 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1b692:	2240      	movs	r2, #64	; 0x40
   1b694:	4620      	mov	r0, r4
   1b696:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1b69a:	f7ff ff20 	bl	1b4de <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1b69e:	2001      	movs	r0, #1
}
   1b6a0:	bd10      	pop	{r4, pc}

0001b6a2 <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1b6a2:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1b6a4:	b110      	cbz	r0, 1b6ac <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1b6a6:	f7ff ff1a 	bl	1b4de <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1b6aa:	2001      	movs	r0, #1
}
   1b6ac:	bd08      	pop	{r3, pc}

0001b6ae <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1b6ae:	b570      	push	{r4, r5, r6, lr}
   1b6b0:	460e      	mov	r6, r1
   1b6b2:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1b6b4:	4605      	mov	r5, r0
   1b6b6:	b1f0      	cbz	r0, 1b6f6 <tc_hmac_final+0x48>
   1b6b8:	2920      	cmp	r1, #32
   1b6ba:	d11c      	bne.n	1b6f6 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1b6bc:	b1ea      	cbz	r2, 1b6fa <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1b6be:	4611      	mov	r1, r2
   1b6c0:	f7ff ff33 	bl	1b52a <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1b6c4:	4620      	mov	r0, r4
   1b6c6:	f7f1 fffd 	bl	d6c4 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1b6ca:	2240      	movs	r2, #64	; 0x40
   1b6cc:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1b6d0:	4620      	mov	r0, r4
   1b6d2:	f7ff ff04 	bl	1b4de <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1b6d6:	4632      	mov	r2, r6
   1b6d8:	4629      	mov	r1, r5
   1b6da:	4620      	mov	r0, r4
   1b6dc:	f7ff feff 	bl	1b4de <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1b6e0:	4621      	mov	r1, r4
   1b6e2:	4628      	mov	r0, r5
   1b6e4:	f7ff ff21 	bl	1b52a <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1b6e8:	4620      	mov	r0, r4
   1b6ea:	22f0      	movs	r2, #240	; 0xf0
   1b6ec:	2100      	movs	r1, #0
   1b6ee:	f7ff fcd8 	bl	1b0a2 <_set>

	return TC_CRYPTO_SUCCESS;
   1b6f2:	2001      	movs	r0, #1
}
   1b6f4:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b6f6:	2000      	movs	r0, #0
   1b6f8:	e7fc      	b.n	1b6f4 <tc_hmac_final+0x46>
   1b6fa:	4610      	mov	r0, r2
   1b6fc:	e7fa      	b.n	1b6f4 <tc_hmac_final+0x46>

0001b6fe <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1b6fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b702:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1b704:	f04f 0b01 	mov.w	fp, #1
{
   1b708:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1b70a:	2300      	movs	r3, #0
{
   1b70c:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b70e:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1b712:	4631      	mov	r1, r6
{
   1b714:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b716:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1b718:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1b71c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1b720:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b724:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b728:	f7ff ff7a 	bl	1b620 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1b72c:	4620      	mov	r0, r4
   1b72e:	f7ff ffab 	bl	1b688 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b732:	2220      	movs	r2, #32
   1b734:	4629      	mov	r1, r5
   1b736:	4620      	mov	r0, r4
   1b738:	f7ff ffb3 	bl	1b6a2 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1b73c:	465a      	mov	r2, fp
   1b73e:	4620      	mov	r0, r4
   1b740:	f10d 0106 	add.w	r1, sp, #6
   1b744:	f7ff ffad 	bl	1b6a2 <tc_hmac_update>

	if (data && datalen)
   1b748:	f1b8 0f00 	cmp.w	r8, #0
   1b74c:	d007      	beq.n	1b75e <update+0x60>
   1b74e:	f1b9 0f00 	cmp.w	r9, #0
   1b752:	d004      	beq.n	1b75e <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1b754:	464a      	mov	r2, r9
   1b756:	4641      	mov	r1, r8
   1b758:	4620      	mov	r0, r4
   1b75a:	f7ff ffa2 	bl	1b6a2 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1b75e:	b13f      	cbz	r7, 1b770 <update+0x72>
   1b760:	f1ba 0f00 	cmp.w	sl, #0
   1b764:	d004      	beq.n	1b770 <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1b766:	4652      	mov	r2, sl
   1b768:	4639      	mov	r1, r7
   1b76a:	4620      	mov	r0, r4
   1b76c:	f7ff ff99 	bl	1b6a2 <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1b770:	4622      	mov	r2, r4
   1b772:	2120      	movs	r1, #32
   1b774:	4630      	mov	r0, r6
   1b776:	f7ff ff9a 	bl	1b6ae <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b77a:	2220      	movs	r2, #32
   1b77c:	4631      	mov	r1, r6
   1b77e:	4620      	mov	r0, r4
   1b780:	f7ff ff4e 	bl	1b620 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1b784:	4620      	mov	r0, r4
   1b786:	f7ff ff7f 	bl	1b688 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b78a:	2220      	movs	r2, #32
   1b78c:	4629      	mov	r1, r5
   1b78e:	4620      	mov	r0, r4
   1b790:	f7ff ff87 	bl	1b6a2 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1b794:	4622      	mov	r2, r4
   1b796:	2120      	movs	r1, #32
   1b798:	4628      	mov	r0, r5
   1b79a:	f7ff ff88 	bl	1b6ae <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1b79e:	f1b8 0f00 	cmp.w	r8, #0
   1b7a2:	d03a      	beq.n	1b81a <update+0x11c>
   1b7a4:	f1b9 0f00 	cmp.w	r9, #0
   1b7a8:	d037      	beq.n	1b81a <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b7aa:	2220      	movs	r2, #32
   1b7ac:	4631      	mov	r1, r6
   1b7ae:	4620      	mov	r0, r4
   1b7b0:	f7ff ff36 	bl	1b620 <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1b7b4:	4620      	mov	r0, r4
   1b7b6:	f7ff ff67 	bl	1b688 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b7ba:	2220      	movs	r2, #32
   1b7bc:	4629      	mov	r1, r5
   1b7be:	4620      	mov	r0, r4
   1b7c0:	f7ff ff6f 	bl	1b6a2 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1b7c4:	2201      	movs	r2, #1
   1b7c6:	f10d 0107 	add.w	r1, sp, #7
   1b7ca:	4620      	mov	r0, r4
   1b7cc:	f7ff ff69 	bl	1b6a2 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1b7d0:	464a      	mov	r2, r9
   1b7d2:	4641      	mov	r1, r8
   1b7d4:	4620      	mov	r0, r4
   1b7d6:	f7ff ff64 	bl	1b6a2 <tc_hmac_update>
	if (additional_data && additional_datalen)
   1b7da:	b13f      	cbz	r7, 1b7ec <update+0xee>
   1b7dc:	f1ba 0f00 	cmp.w	sl, #0
   1b7e0:	d004      	beq.n	1b7ec <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1b7e2:	4652      	mov	r2, sl
   1b7e4:	4639      	mov	r1, r7
   1b7e6:	4620      	mov	r0, r4
   1b7e8:	f7ff ff5b 	bl	1b6a2 <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1b7ec:	4622      	mov	r2, r4
   1b7ee:	2120      	movs	r1, #32
   1b7f0:	4630      	mov	r0, r6
   1b7f2:	f7ff ff5c 	bl	1b6ae <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b7f6:	2220      	movs	r2, #32
   1b7f8:	4631      	mov	r1, r6
   1b7fa:	4620      	mov	r0, r4
   1b7fc:	f7ff ff10 	bl	1b620 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1b800:	4620      	mov	r0, r4
   1b802:	f7ff ff41 	bl	1b688 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b806:	2220      	movs	r2, #32
   1b808:	4629      	mov	r1, r5
   1b80a:	4620      	mov	r0, r4
   1b80c:	f7ff ff49 	bl	1b6a2 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1b810:	4622      	mov	r2, r4
   1b812:	2120      	movs	r1, #32
   1b814:	4628      	mov	r0, r5
   1b816:	f7ff ff4a 	bl	1b6ae <tc_hmac_final>
}
   1b81a:	b003      	add	sp, #12
   1b81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b820 <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1b820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b822:	460c      	mov	r4, r1
   1b824:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1b826:	4605      	mov	r5, r0
   1b828:	b1b0      	cbz	r0, 1b858 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1b82a:	b1b9      	cbz	r1, 1b85c <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1b82c:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1b82e:	2220      	movs	r2, #32
   1b830:	2100      	movs	r1, #0
   1b832:	30f0      	adds	r0, #240	; 0xf0
   1b834:	f7ff fc35 	bl	1b0a2 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1b838:	2220      	movs	r2, #32
   1b83a:	2101      	movs	r1, #1
   1b83c:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1b840:	f7ff fc2f 	bl	1b0a2 <_set>
	update(prng, personalization, plen, 0, 0);
   1b844:	4628      	mov	r0, r5
   1b846:	4633      	mov	r3, r6
   1b848:	463a      	mov	r2, r7
   1b84a:	4621      	mov	r1, r4
   1b84c:	9600      	str	r6, [sp, #0]
   1b84e:	f7ff ff56 	bl	1b6fe <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1b852:	2001      	movs	r0, #1
	prng->countdown = 0;
   1b854:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1b858:	b003      	add	sp, #12
   1b85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1b85c:	4608      	mov	r0, r1
   1b85e:	e7fb      	b.n	1b858 <tc_hmac_prng_init+0x38>

0001b860 <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1b860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b862:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1b864:	4605      	mov	r5, r0
   1b866:	b180      	cbz	r0, 1b88a <tc_hmac_prng_reseed+0x2a>
   1b868:	b179      	cbz	r1, 1b88a <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1b86a:	2a1f      	cmp	r2, #31
   1b86c:	d90d      	bls.n	1b88a <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1b86e:	b153      	cbz	r3, 1b886 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1b870:	b16c      	cbz	r4, 1b88e <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1b872:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1b874:	f7ff ff43 	bl	1b6fe <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1b878:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1b87c:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1b87e:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1b882:	b003      	add	sp, #12
   1b884:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1b886:	9300      	str	r3, [sp, #0]
   1b888:	e7f4      	b.n	1b874 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1b88a:	2000      	movs	r0, #0
   1b88c:	e7f9      	b.n	1b882 <tc_hmac_prng_reseed+0x22>
   1b88e:	4620      	mov	r0, r4
   1b890:	e7f7      	b.n	1b882 <tc_hmac_prng_reseed+0x22>

0001b892 <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1b892:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1b896:	460d      	mov	r5, r1
   1b898:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1b89a:	4680      	mov	r8, r0
   1b89c:	b3d8      	cbz	r0, 1b916 <tc_hmac_prng_generate+0x84>
   1b89e:	b3d2      	cbz	r2, 1b916 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1b8a0:	1e4b      	subs	r3, r1, #1
   1b8a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1b8a6:	d236      	bcs.n	1b916 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1b8a8:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1b8ac:	b3ab      	cbz	r3, 1b91a <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1b8ae:	3b01      	subs	r3, #1
   1b8b0:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b8b4:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b8b8:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1b8bc:	2220      	movs	r2, #32
   1b8be:	4649      	mov	r1, r9
   1b8c0:	4620      	mov	r0, r4
   1b8c2:	f7ff fead 	bl	1b620 <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1b8c6:	4620      	mov	r0, r4
   1b8c8:	f7ff fede 	bl	1b688 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1b8cc:	2220      	movs	r2, #32
   1b8ce:	4639      	mov	r1, r7
   1b8d0:	4620      	mov	r0, r4
   1b8d2:	f7ff fee6 	bl	1b6a2 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1b8d6:	4622      	mov	r2, r4
   1b8d8:	2120      	movs	r1, #32
   1b8da:	4638      	mov	r0, r7
   1b8dc:	f7ff fee7 	bl	1b6ae <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1b8e0:	2d20      	cmp	r5, #32
   1b8e2:	462e      	mov	r6, r5
   1b8e4:	bf28      	it	cs
   1b8e6:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1b8e8:	4640      	mov	r0, r8
   1b8ea:	4633      	mov	r3, r6
   1b8ec:	463a      	mov	r2, r7
   1b8ee:	4631      	mov	r1, r6
   1b8f0:	f7ff fbca 	bl	1b088 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1b8f4:	2d20      	cmp	r5, #32
   1b8f6:	bf38      	it	cc
   1b8f8:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1b8fa:	3d20      	subs	r5, #32
		out += bufferlen;
   1b8fc:	44b0      	add	r8, r6
	while (outlen != 0) {
   1b8fe:	d1dd      	bne.n	1b8bc <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1b900:	4620      	mov	r0, r4
   1b902:	462b      	mov	r3, r5
   1b904:	462a      	mov	r2, r5
   1b906:	4629      	mov	r1, r5
   1b908:	9500      	str	r5, [sp, #0]
   1b90a:	f7ff fef8 	bl	1b6fe <update>

	return TC_CRYPTO_SUCCESS;
   1b90e:	2001      	movs	r0, #1
}
   1b910:	b003      	add	sp, #12
   1b912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1b916:	2000      	movs	r0, #0
   1b918:	e7fa      	b.n	1b910 <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1b91a:	f04f 30ff 	mov.w	r0, #4294967295
   1b91e:	e7f7      	b.n	1b910 <tc_hmac_prng_generate+0x7e>

0001b920 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1b920:	2100      	movs	r1, #0
   1b922:	2001      	movs	r0, #1
   1b924:	f7f1 bfec 	b.w	d900 <z_arm_fatal_error>

0001b928 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1b928:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1b92a:	f383 880b 	msr	PSPLIM, r3
}
   1b92e:	4770      	bx	lr

0001b930 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1b930:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1b932:	6800      	ldr	r0, [r0, #0]
   1b934:	f7f1 bfe4 	b.w	d900 <z_arm_fatal_error>

0001b938 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1b938:	b508      	push	{r3, lr}
	handler();
   1b93a:	f7f2 f80f 	bl	d95c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1b93e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1b942:	f7f2 ba53 	b.w	ddec <z_arm_exc_exit>

0001b946 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1b946:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1b94a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1b94e:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1b950:	bf08      	it	eq
   1b952:	f06f 0015 	mvneq.w	r0, #21
   1b956:	4770      	bx	lr

0001b958 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1b958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b95c:	4684      	mov	ip, r0
   1b95e:	4688      	mov	r8, r1
	register const char *s = nptr;
   1b960:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1b962:	4621      	mov	r1, r4
   1b964:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1b968:	2b20      	cmp	r3, #32
   1b96a:	d0fa      	beq.n	1b962 <strtol+0xa>
   1b96c:	f1a3 0009 	sub.w	r0, r3, #9
   1b970:	2804      	cmp	r0, #4
   1b972:	d9f6      	bls.n	1b962 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   1b974:	2b2d      	cmp	r3, #45	; 0x2d
   1b976:	d12d      	bne.n	1b9d4 <strtol+0x7c>
		neg = 1;
		c = *s++;
   1b978:	784b      	ldrb	r3, [r1, #1]
   1b97a:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1b97c:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1b97e:	2a00      	cmp	r2, #0
   1b980:	d05a      	beq.n	1ba38 <strtol+0xe0>
   1b982:	2a10      	cmp	r2, #16
   1b984:	d109      	bne.n	1b99a <strtol+0x42>
   1b986:	2b30      	cmp	r3, #48	; 0x30
   1b988:	d107      	bne.n	1b99a <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1b98a:	7823      	ldrb	r3, [r4, #0]
   1b98c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1b990:	2b58      	cmp	r3, #88	; 0x58
   1b992:	d14c      	bne.n	1ba2e <strtol+0xd6>
		c = s[1];
		s += 2;
		base = 16;
   1b994:	2210      	movs	r2, #16
		c = s[1];
   1b996:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1b998:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1b99a:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1b99c:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1b9a0:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1b9a2:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1b9a6:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1b9a8:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1b9ac:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1b9b0:	2d09      	cmp	r5, #9
   1b9b2:	d815      	bhi.n	1b9e0 <strtol+0x88>
			c -= '0';
   1b9b4:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1b9b6:	429a      	cmp	r2, r3
   1b9b8:	dd22      	ble.n	1ba00 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1b9ba:	1c75      	adds	r5, r6, #1
   1b9bc:	d007      	beq.n	1b9ce <strtol+0x76>
   1b9be:	4570      	cmp	r0, lr
   1b9c0:	d81b      	bhi.n	1b9fa <strtol+0xa2>
   1b9c2:	d101      	bne.n	1b9c8 <strtol+0x70>
   1b9c4:	454b      	cmp	r3, r9
   1b9c6:	dc18      	bgt.n	1b9fa <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
   1b9c8:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1b9ca:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1b9ce:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1b9d2:	e7eb      	b.n	1b9ac <strtol+0x54>
	} else if (c == '+') {
   1b9d4:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1b9d6:	bf04      	itt	eq
   1b9d8:	784b      	ldrbeq	r3, [r1, #1]
   1b9da:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1b9dc:	2100      	movs	r1, #0
   1b9de:	e7ce      	b.n	1b97e <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1b9e0:	f043 0520 	orr.w	r5, r3, #32
   1b9e4:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1b9e6:	2d19      	cmp	r5, #25
   1b9e8:	d80a      	bhi.n	1ba00 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1b9ea:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1b9ee:	2d1a      	cmp	r5, #26
   1b9f0:	bf34      	ite	cc
   1b9f2:	2537      	movcc	r5, #55	; 0x37
   1b9f4:	2557      	movcs	r5, #87	; 0x57
   1b9f6:	1b5b      	subs	r3, r3, r5
   1b9f8:	e7dd      	b.n	1b9b6 <strtol+0x5e>
			any = -1;
   1b9fa:	f04f 36ff 	mov.w	r6, #4294967295
   1b9fe:	e7e6      	b.n	1b9ce <strtol+0x76>
		}
	}

	if (any < 0) {
   1ba00:	1c73      	adds	r3, r6, #1
   1ba02:	d109      	bne.n	1ba18 <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1ba04:	f7fb feaa 	bl	1775c <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1ba08:	2326      	movs	r3, #38	; 0x26
   1ba0a:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1ba0c:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1ba0e:	f1b8 0f00 	cmp.w	r8, #0
   1ba12:	d107      	bne.n	1ba24 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1ba14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1ba18:	b101      	cbz	r1, 1ba1c <strtol+0xc4>
		acc = -acc;
   1ba1a:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1ba1c:	f1b8 0f00 	cmp.w	r8, #0
   1ba20:	d0f8      	beq.n	1ba14 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   1ba22:	b10e      	cbz	r6, 1ba28 <strtol+0xd0>
   1ba24:	f104 3cff 	add.w	ip, r4, #4294967295
   1ba28:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1ba2c:	e7f2      	b.n	1ba14 <strtol+0xbc>
	if (base == 0) {
   1ba2e:	2330      	movs	r3, #48	; 0x30
   1ba30:	2a00      	cmp	r2, #0
   1ba32:	d1b2      	bne.n	1b99a <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1ba34:	2208      	movs	r2, #8
   1ba36:	e7b0      	b.n	1b99a <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1ba38:	2b30      	cmp	r3, #48	; 0x30
   1ba3a:	d0a6      	beq.n	1b98a <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1ba3c:	220a      	movs	r2, #10
   1ba3e:	e7ac      	b.n	1b99a <strtol+0x42>

0001ba40 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1ba40:	4603      	mov	r3, r0
   1ba42:	3901      	subs	r1, #1
   1ba44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1ba48:	b90a      	cbnz	r2, 1ba4e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1ba4a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1ba4c:	4770      	bx	lr
		*d = *s;
   1ba4e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1ba52:	e7f7      	b.n	1ba44 <strcpy+0x4>

0001ba54 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1ba54:	b570      	push	{r4, r5, r6, lr}
   1ba56:	4605      	mov	r5, r0
   1ba58:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1ba5a:	b142      	cbz	r2, 1ba6e <strncpy+0x1a>
   1ba5c:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1ba60:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1ba62:	b92c      	cbnz	r4, 1ba70 <strncpy+0x1c>
   1ba64:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1ba66:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1ba6a:	429a      	cmp	r2, r3
   1ba6c:	d1fb      	bne.n	1ba66 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1ba6e:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1ba70:	4632      	mov	r2, r6
		*d = *s;
   1ba72:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1ba76:	e7ef      	b.n	1ba58 <strncpy+0x4>

0001ba78 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1ba78:	4603      	mov	r3, r0
	size_t n = 0;
   1ba7a:	2000      	movs	r0, #0

	while (*s != '\0') {
   1ba7c:	5c1a      	ldrb	r2, [r3, r0]
   1ba7e:	b902      	cbnz	r2, 1ba82 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1ba80:	4770      	bx	lr
		n++;
   1ba82:	3001      	adds	r0, #1
   1ba84:	e7fa      	b.n	1ba7c <strlen+0x4>

0001ba86 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1ba86:	4603      	mov	r3, r0
	size_t n = 0;
   1ba88:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1ba8a:	5c1a      	ldrb	r2, [r3, r0]
   1ba8c:	b10a      	cbz	r2, 1ba92 <strnlen+0xc>
   1ba8e:	4288      	cmp	r0, r1
   1ba90:	d100      	bne.n	1ba94 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1ba92:	4770      	bx	lr
		n++;
   1ba94:	3001      	adds	r0, #1
   1ba96:	e7f8      	b.n	1ba8a <strnlen+0x4>

0001ba98 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1ba98:	1e43      	subs	r3, r0, #1
   1ba9a:	3901      	subs	r1, #1
   1ba9c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1baa0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1baa4:	4282      	cmp	r2, r0
   1baa6:	d101      	bne.n	1baac <strcmp+0x14>
   1baa8:	2a00      	cmp	r2, #0
   1baaa:	d1f7      	bne.n	1ba9c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1baac:	1a10      	subs	r0, r2, r0
   1baae:	4770      	bx	lr

0001bab0 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1bab0:	b510      	push	{r4, lr}
   1bab2:	3901      	subs	r1, #1
   1bab4:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1bab6:	4282      	cmp	r2, r0
   1bab8:	d009      	beq.n	1bace <strncmp+0x1e>
   1baba:	7803      	ldrb	r3, [r0, #0]
   1babc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1bac0:	42a3      	cmp	r3, r4
   1bac2:	d100      	bne.n	1bac6 <strncmp+0x16>
   1bac4:	b90b      	cbnz	r3, 1baca <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1bac6:	1b18      	subs	r0, r3, r4
   1bac8:	e002      	b.n	1bad0 <strncmp+0x20>
		s1++;
   1baca:	3001      	adds	r0, #1
		n--;
   1bacc:	e7f3      	b.n	1bab6 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   1bace:	2000      	movs	r0, #0
}
   1bad0:	bd10      	pop	{r4, pc}

0001bad2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1bad2:	4603      	mov	r3, r0
   1bad4:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1bad6:	b15a      	cbz	r2, 1baf0 <memcmp+0x1e>
   1bad8:	3901      	subs	r1, #1
   1bada:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1badc:	f813 0b01 	ldrb.w	r0, [r3], #1
   1bae0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1bae4:	42a3      	cmp	r3, r4
   1bae6:	d001      	beq.n	1baec <memcmp+0x1a>
   1bae8:	4290      	cmp	r0, r2
   1baea:	d0f7      	beq.n	1badc <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1baec:	1a80      	subs	r0, r0, r2
}
   1baee:	bd10      	pop	{r4, pc}
		return 0;
   1baf0:	4610      	mov	r0, r2
   1baf2:	e7fc      	b.n	1baee <memcmp+0x1c>

0001baf4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1baf4:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1baf6:	ea81 0400 	eor.w	r4, r1, r0
   1bafa:	07a5      	lsls	r5, r4, #30
   1bafc:	4603      	mov	r3, r0
   1bafe:	d00b      	beq.n	1bb18 <memcpy+0x24>
   1bb00:	3b01      	subs	r3, #1
   1bb02:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1bb04:	4291      	cmp	r1, r2
   1bb06:	d11b      	bne.n	1bb40 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1bb08:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1bb0a:	2a00      	cmp	r2, #0
   1bb0c:	d0fc      	beq.n	1bb08 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1bb0e:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1bb12:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1bb14:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1bb18:	079c      	lsls	r4, r3, #30
   1bb1a:	d1f6      	bne.n	1bb0a <memcpy+0x16>
   1bb1c:	f022 0403 	bic.w	r4, r2, #3
   1bb20:	1f1d      	subs	r5, r3, #4
   1bb22:	0896      	lsrs	r6, r2, #2
   1bb24:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1bb26:	42b9      	cmp	r1, r7
   1bb28:	d105      	bne.n	1bb36 <memcpy+0x42>
   1bb2a:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
   1bb2e:	4423      	add	r3, r4
   1bb30:	fb05 2206 	mla	r2, r5, r6, r2
   1bb34:	e7e4      	b.n	1bb00 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1bb36:	f851 cb04 	ldr.w	ip, [r1], #4
   1bb3a:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1bb3e:	e7f2      	b.n	1bb26 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1bb40:	f811 4b01 	ldrb.w	r4, [r1], #1
   1bb44:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1bb48:	e7dc      	b.n	1bb04 <memcpy+0x10>

0001bb4a <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1bb4a:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1bb4c:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
   1bb4e:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1bb50:	07a3      	lsls	r3, r4, #30
   1bb52:	d111      	bne.n	1bb78 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1bb54:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   1bb58:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1bb5c:	f022 0303 	bic.w	r3, r2, #3
   1bb60:	0896      	lsrs	r6, r2, #2
   1bb62:	4423      	add	r3, r4
   1bb64:	429c      	cmp	r4, r3
   1bb66:	d10d      	bne.n	1bb84 <memset+0x3a>
   1bb68:	f06f 0403 	mvn.w	r4, #3
   1bb6c:	fb04 2206 	mla	r2, r4, r6, r2
   1bb70:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1bb72:	4293      	cmp	r3, r2
   1bb74:	d109      	bne.n	1bb8a <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1bb76:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1bb78:	2a00      	cmp	r2, #0
   1bb7a:	d0fc      	beq.n	1bb76 <memset+0x2c>
		*(d_byte++) = c_byte;
   1bb7c:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   1bb80:	3a01      	subs	r2, #1
   1bb82:	e7e5      	b.n	1bb50 <memset+0x6>
		*(d_word++) = c_word;
   1bb84:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   1bb88:	e7ec      	b.n	1bb64 <memset+0x1a>
		*(d_byte++) = c_byte;
   1bb8a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1bb8e:	e7f0      	b.n	1bb72 <memset+0x28>

0001bb90 <_stdout_hook_default>:
}
   1bb90:	f04f 30ff 	mov.w	r0, #4294967295
   1bb94:	4770      	bx	lr

0001bb96 <bt_settings_decode_key>:
{
   1bb96:	b570      	push	{r4, r5, r6, lr}
   1bb98:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1bb9a:	2100      	movs	r1, #0
{
   1bb9c:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1bb9e:	f7ff f884 	bl	1acaa <settings_name_next>
   1bba2:	280d      	cmp	r0, #13
   1bba4:	d118      	bne.n	1bbd8 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1bba6:	7b23      	ldrb	r3, [r4, #12]
   1bba8:	2b30      	cmp	r3, #48	; 0x30
   1bbaa:	d111      	bne.n	1bbd0 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1bbac:	2300      	movs	r3, #0
   1bbae:	702b      	strb	r3, [r5, #0]
   1bbb0:	f104 060c 	add.w	r6, r4, #12
   1bbb4:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1bbb6:	462a      	mov	r2, r5
   1bbb8:	4620      	mov	r0, r4
   1bbba:	2301      	movs	r3, #1
   1bbbc:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   1bbbe:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1bbc0:	f7fe fcf3 	bl	1a5aa <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1bbc4:	42b4      	cmp	r4, r6
   1bbc6:	f105 35ff 	add.w	r5, r5, #4294967295
   1bbca:	d1f4      	bne.n	1bbb6 <bt_settings_decode_key+0x20>
	return 0;
   1bbcc:	2000      	movs	r0, #0
}
   1bbce:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1bbd0:	2b31      	cmp	r3, #49	; 0x31
   1bbd2:	d101      	bne.n	1bbd8 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1bbd4:	2301      	movs	r3, #1
   1bbd6:	e7ea      	b.n	1bbae <bt_settings_decode_key+0x18>
		return -EINVAL;
   1bbd8:	f06f 0015 	mvn.w	r0, #21
   1bbdc:	e7f7      	b.n	1bbce <bt_settings_decode_key+0x38>

0001bbde <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1bbde:	b510      	push	{r4, lr}
   1bbe0:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1bbe2:	7801      	ldrb	r1, [r0, #0]
   1bbe4:	7822      	ldrb	r2, [r4, #0]
{
   1bbe6:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1bbe8:	428a      	cmp	r2, r1
   1bbea:	d00f      	beq.n	1bc0c <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1bbec:	4669      	mov	r1, sp
   1bbee:	f7f2 fca3 	bl	e538 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1bbf2:	4620      	mov	r0, r4
   1bbf4:	a905      	add	r1, sp, #20
   1bbf6:	f7f2 fc9f 	bl	e538 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1bbfa:	2210      	movs	r2, #16
   1bbfc:	f10d 0115 	add.w	r1, sp, #21
   1bc00:	f10d 0001 	add.w	r0, sp, #1
   1bc04:	f7ff ff65 	bl	1bad2 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1bc08:	b00a      	add	sp, #40	; 0x28
   1bc0a:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1bc0c:	2a01      	cmp	r2, #1
   1bc0e:	d006      	beq.n	1bc1e <bt_uuid_cmp+0x40>
   1bc10:	2a02      	cmp	r2, #2
   1bc12:	d007      	beq.n	1bc24 <bt_uuid_cmp+0x46>
   1bc14:	b972      	cbnz	r2, 1bc34 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1bc16:	8840      	ldrh	r0, [r0, #2]
   1bc18:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1bc1a:	1ac0      	subs	r0, r0, r3
   1bc1c:	e7f4      	b.n	1bc08 <bt_uuid_cmp+0x2a>
   1bc1e:	6840      	ldr	r0, [r0, #4]
   1bc20:	6863      	ldr	r3, [r4, #4]
   1bc22:	e7fa      	b.n	1bc1a <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1bc24:	2210      	movs	r2, #16
   1bc26:	1c61      	adds	r1, r4, #1
   1bc28:	3001      	adds	r0, #1
}
   1bc2a:	b00a      	add	sp, #40	; 0x28
   1bc2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1bc30:	f7ff bf4f 	b.w	1bad2 <memcmp>
	switch (u1->type) {
   1bc34:	f06f 0015 	mvn.w	r0, #21
   1bc38:	e7e6      	b.n	1bc08 <bt_uuid_cmp+0x2a>

0001bc3a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1bc3a:	2a04      	cmp	r2, #4
{
   1bc3c:	b510      	push	{r4, lr}
	switch (data_len) {
   1bc3e:	d00a      	beq.n	1bc56 <bt_uuid_create+0x1c>
   1bc40:	2a10      	cmp	r2, #16
   1bc42:	d00d      	beq.n	1bc60 <bt_uuid_create+0x26>
   1bc44:	2a02      	cmp	r2, #2
   1bc46:	f04f 0300 	mov.w	r3, #0
   1bc4a:	d10f      	bne.n	1bc6c <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1bc4c:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1bc4e:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1bc50:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1bc52:	2001      	movs	r0, #1
}
   1bc54:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1bc56:	2301      	movs	r3, #1
   1bc58:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1bc5a:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1bc5c:	6042      	str	r2, [r0, #4]
		break;
   1bc5e:	e7f8      	b.n	1bc52 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1bc60:	2302      	movs	r3, #2
   1bc62:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1bc66:	f7ff ff45 	bl	1baf4 <memcpy>
		break;
   1bc6a:	e7f2      	b.n	1bc52 <bt_uuid_create+0x18>
	switch (data_len) {
   1bc6c:	4618      	mov	r0, r3
   1bc6e:	e7f1      	b.n	1bc54 <bt_uuid_create+0x1a>

0001bc70 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1bc70:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1bc72:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1bc74:	2106      	movs	r1, #6
{
   1bc76:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1bc78:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1bc7c:	f7f5 f850 	bl	10d20 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1bc80:	b918      	cbnz	r0, 1bc8a <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1bc82:	79a3      	ldrb	r3, [r4, #6]
   1bc84:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1bc88:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1bc8a:	bd10      	pop	{r4, pc}

0001bc8c <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1bc8c:	280f      	cmp	r0, #15
   1bc8e:	d806      	bhi.n	1bc9e <bt_hci_evt_get_flags+0x12>
   1bc90:	280d      	cmp	r0, #13
   1bc92:	d80b      	bhi.n	1bcac <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1bc94:	2805      	cmp	r0, #5
   1bc96:	bf14      	ite	ne
   1bc98:	2002      	movne	r0, #2
   1bc9a:	2003      	moveq	r0, #3
   1bc9c:	4770      	bx	lr
	switch (evt) {
   1bc9e:	2813      	cmp	r0, #19
   1bca0:	d004      	beq.n	1bcac <bt_hci_evt_get_flags+0x20>
   1bca2:	281a      	cmp	r0, #26
   1bca4:	bf14      	ite	ne
   1bca6:	2002      	movne	r0, #2
   1bca8:	2001      	moveq	r0, #1
   1bcaa:	4770      	bx	lr
   1bcac:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1bcae:	4770      	bx	lr

0001bcb0 <get_adv_channel_map>:
{
   1bcb0:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1bcb2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1bcb6:	bf0c      	ite	eq
   1bcb8:	2007      	moveq	r0, #7
   1bcba:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1bcbc:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1bcbe:	bf48      	it	mi
   1bcc0:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1bcc4:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1bcc6:	bf48      	it	mi
   1bcc8:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1bccc:	4770      	bx	lr

0001bcce <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bcce:	e8d0 0faf 	lda	r0, [r0]
}
   1bcd2:	4770      	bx	lr

0001bcd4 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1bcd4:	2207      	movs	r2, #7
   1bcd6:	f7ff bf0d 	b.w	1baf4 <memcpy>

0001bcda <atomic_or>:
{
   1bcda:	4603      	mov	r3, r0
}
   1bcdc:	e8d3 0fef 	ldaex	r0, [r3]
   1bce0:	ea40 0201 	orr.w	r2, r0, r1
   1bce4:	e8c3 2fec 	stlex	ip, r2, [r3]
   1bce8:	f1bc 0f00 	cmp.w	ip, #0
   1bcec:	d1f6      	bne.n	1bcdc <atomic_or+0x2>
   1bcee:	4770      	bx	lr

0001bcf0 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1bcf0:	2207      	movs	r2, #7
   1bcf2:	f7ff beee 	b.w	1bad2 <memcmp>

0001bcf6 <atomic_and>:
{
   1bcf6:	4603      	mov	r3, r0
}
   1bcf8:	e8d3 0fef 	ldaex	r0, [r3]
   1bcfc:	ea00 0201 	and.w	r2, r0, r1
   1bd00:	e8c3 2fec 	stlex	ip, r2, [r3]
   1bd04:	f1bc 0f00 	cmp.w	ip, #0
   1bd08:	d1f6      	bne.n	1bcf8 <atomic_and+0x2>
   1bd0a:	4770      	bx	lr

0001bd0c <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1bd0c:	460b      	mov	r3, r1
   1bd0e:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bd10:	f001 041f 	and.w	r4, r1, #31
   1bd14:	2101      	movs	r1, #1

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bd16:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1bd18:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bd1a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   1bd1e:	b112      	cbz	r2, 1bd26 <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1bd20:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1bd22:	f7ff bfda 	b.w	1bcda <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bd26:	43c9      	mvns	r1, r1
}
   1bd28:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1bd2a:	f7ff bfe4 	b.w	1bcf6 <atomic_and>

0001bd2e <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1bd2e:	f100 0210 	add.w	r2, r0, #16
{
   1bd32:	b508      	push	{r3, lr}
   1bd34:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1bd36:	4610      	mov	r0, r2
   1bd38:	f7ff ffc9 	bl	1bcce <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1bd3c:	0640      	lsls	r0, r0, #25
   1bd3e:	d50a      	bpl.n	1bd56 <adv_id_check_connectable_func+0x28>
   1bd40:	4610      	mov	r0, r2
   1bd42:	f7ff ffc4 	bl	1bcce <atomic_get>
   1bd46:	05c2      	lsls	r2, r0, #23
   1bd48:	d505      	bpl.n	1bd56 <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   1bd4a:	781a      	ldrb	r2, [r3, #0]
   1bd4c:	780b      	ldrb	r3, [r1, #0]
   1bd4e:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   1bd50:	bf1c      	itt	ne
   1bd52:	2301      	movne	r3, #1
   1bd54:	704b      	strbne	r3, [r1, #1]
}
   1bd56:	bd08      	pop	{r3, pc}

0001bd58 <le_set_private_addr.constprop.0>:
static int le_set_private_addr(uint8_t id)
   1bd58:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1bd5a:	2106      	movs	r1, #6
   1bd5c:	4668      	mov	r0, sp
   1bd5e:	f7f4 ffdf 	bl	10d20 <bt_rand>
	if (err) {
   1bd62:	b940      	cbnz	r0, 1bd76 <le_set_private_addr.constprop.0+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1bd64:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1bd68:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1bd6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1bd6e:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1bd72:	f7f3 f8e9 	bl	ef48 <set_random_address>
}
   1bd76:	b003      	add	sp, #12
   1bd78:	f85d fb04 	ldr.w	pc, [sp], #4

0001bd7c <bt_lookup_id_addr>:
}
   1bd7c:	4608      	mov	r0, r1
   1bd7e:	4770      	bx	lr

0001bd80 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1bd80:	f7f3 bb3a 	b.w	f3f8 <bt_le_create_conn_legacy>

0001bd84 <bt_hci_disconnect>:
{
   1bd84:	b570      	push	{r4, r5, r6, lr}
   1bd86:	4606      	mov	r6, r0
   1bd88:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1bd8a:	f240 4006 	movw	r0, #1030	; 0x406
   1bd8e:	2103      	movs	r1, #3
   1bd90:	f7f3 f80e 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
   1bd94:	4604      	mov	r4, r0
   1bd96:	b168      	cbz	r0, 1bdb4 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1bd98:	2103      	movs	r1, #3
   1bd9a:	3008      	adds	r0, #8
   1bd9c:	f7f9 fd06 	bl	157ac <net_buf_simple_add>
	disconn->reason = reason;
   1bda0:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1bda2:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1bda4:	4621      	mov	r1, r4
}
   1bda6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1bdaa:	2200      	movs	r2, #0
   1bdac:	f240 4006 	movw	r0, #1030	; 0x406
   1bdb0:	f7f3 b848 	b.w	ee44 <bt_hci_cmd_send_sync>
}
   1bdb4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1bdb8:	bd70      	pop	{r4, r5, r6, pc}

0001bdba <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1bdba:	8803      	ldrh	r3, [r0, #0]
   1bdbc:	8842      	ldrh	r2, [r0, #2]
{
   1bdbe:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1bdc0:	4293      	cmp	r3, r2
   1bdc2:	d819      	bhi.n	1bdf8 <bt_le_conn_params_valid+0x3e>
   1bdc4:	2b05      	cmp	r3, #5
   1bdc6:	d917      	bls.n	1bdf8 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1bdc8:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1bdcc:	d814      	bhi.n	1bdf8 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1bdce:	8883      	ldrh	r3, [r0, #4]
   1bdd0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1bdd4:	d210      	bcs.n	1bdf8 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1bdd6:	f640 4476 	movw	r4, #3190	; 0xc76
   1bdda:	88c0      	ldrh	r0, [r0, #6]
   1bddc:	f1a0 010a 	sub.w	r1, r0, #10
   1bde0:	b289      	uxth	r1, r1
   1bde2:	42a1      	cmp	r1, r4
   1bde4:	d808      	bhi.n	1bdf8 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1bde6:	3301      	adds	r3, #1
   1bde8:	b29b      	uxth	r3, r3
   1bdea:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1bdec:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1bdf0:	bf34      	ite	cc
   1bdf2:	2001      	movcc	r0, #1
   1bdf4:	2000      	movcs	r0, #0
}
   1bdf6:	bd10      	pop	{r4, pc}
		return false;
   1bdf8:	2000      	movs	r0, #0
   1bdfa:	e7fc      	b.n	1bdf6 <bt_le_conn_params_valid+0x3c>

0001bdfc <bt_le_set_data_len>:
{
   1bdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bdfe:	4607      	mov	r7, r0
   1be00:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1be02:	f242 0022 	movw	r0, #8226	; 0x2022
   1be06:	2106      	movs	r1, #6
{
   1be08:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1be0a:	f7f2 ffd1 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
   1be0e:	4604      	mov	r4, r0
   1be10:	b170      	cbz	r0, 1be30 <bt_le_set_data_len+0x34>
   1be12:	2106      	movs	r1, #6
   1be14:	3008      	adds	r0, #8
   1be16:	f7f9 fcc9 	bl	157ac <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1be1a:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1be1c:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   1be1e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1be20:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1be22:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1be24:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1be28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1be2c:	f7f3 bd06 	b.w	f83c <bt_hci_cmd_send>
}
   1be30:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1be34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001be36 <bt_le_set_phy>:
{
   1be36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1be3a:	4680      	mov	r8, r0
   1be3c:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1be3e:	f242 0032 	movw	r0, #8242	; 0x2032
   1be42:	2107      	movs	r1, #7
{
   1be44:	4616      	mov	r6, r2
   1be46:	461d      	mov	r5, r3
   1be48:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1be4c:	f7f2 ffb0 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
   1be50:	4604      	mov	r4, r0
   1be52:	b190      	cbz	r0, 1be7a <bt_le_set_phy+0x44>
   1be54:	2107      	movs	r1, #7
   1be56:	3008      	adds	r0, #8
   1be58:	f7f9 fca8 	bl	157ac <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1be5c:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1be60:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1be62:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1be64:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1be66:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1be68:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1be6c:	4621      	mov	r1, r4
}
   1be6e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1be72:	f242 0032 	movw	r0, #8242	; 0x2032
   1be76:	f7f3 bce1 	b.w	f83c <bt_hci_cmd_send>
}
   1be7a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1be7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001be82 <bt_addr_le_is_bonded>:
}
   1be82:	2000      	movs	r0, #0
   1be84:	4770      	bx	lr

0001be86 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1be86:	6880      	ldr	r0, [r0, #8]
   1be88:	f7f4 bd54 	b.w	10934 <enh_conn_complete>

0001be8c <le_legacy_conn_complete>:
{
   1be8c:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1be8e:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1be90:	6881      	ldr	r1, [r0, #8]
{
   1be92:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1be94:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1be96:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   1be98:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1be9c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1bea0:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1bea2:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1bea6:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1beaa:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1beae:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1beb2:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1beb6:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1beba:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1bebe:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1bec2:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1bec6:	7b4b      	ldrb	r3, [r1, #13]
   1bec8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1becc:	f7ff ff02 	bl	1bcd4 <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   1bed0:	4669      	mov	r1, sp
   1bed2:	2206      	movs	r2, #6
   1bed4:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1bed8:	9400      	str	r4, [sp, #0]
   1beda:	f8ad 4004 	strh.w	r4, [sp, #4]
   1bede:	f7ff fe09 	bl	1baf4 <memcpy>
   1bee2:	2206      	movs	r2, #6
   1bee4:	4669      	mov	r1, sp
   1bee6:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1beea:	9400      	str	r4, [sp, #0]
   1beec:	f8ad 4004 	strh.w	r4, [sp, #4]
   1bef0:	f7ff fe00 	bl	1baf4 <memcpy>
	enh_conn_complete(&enh);
   1bef4:	a802      	add	r0, sp, #8
   1bef6:	f7f4 fd1d 	bl	10934 <enh_conn_complete>
}
   1befa:	b00a      	add	sp, #40	; 0x28
   1befc:	bd10      	pop	{r4, pc}

0001befe <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1befe:	e8d0 0faf 	lda	r0, [r0]
}
   1bf02:	4770      	bx	lr

0001bf04 <tx_notify>:
{
   1bf04:	b570      	push	{r4, r5, r6, lr}
   1bf06:	4604      	mov	r4, r0
	__asm__ volatile(
   1bf08:	f04f 0220 	mov.w	r2, #32
   1bf0c:	f3ef 8311 	mrs	r3, BASEPRI
   1bf10:	f382 8811 	msr	BASEPRI, r2
   1bf14:	f3bf 8f6f 	isb	sy
	return list->head;
   1bf18:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1bf1a:	b920      	cbnz	r0, 1bf26 <tx_notify+0x22>
	__asm__ volatile(
   1bf1c:	f383 8811 	msr	BASEPRI, r3
   1bf20:	f3bf 8f6f 	isb	sy
}
   1bf24:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bf26:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1bf28:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bf2a:	4288      	cmp	r0, r1
	list->tail = node;
   1bf2c:	bf08      	it	eq
   1bf2e:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1bf30:	6222      	str	r2, [r4, #32]
   1bf32:	f383 8811 	msr	BASEPRI, r3
   1bf36:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1bf3a:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1bf3e:	f7f4 ff07 	bl	10d50 <tx_free>
		cb(conn, user_data);
   1bf42:	4631      	mov	r1, r6
   1bf44:	4620      	mov	r0, r4
   1bf46:	47a8      	blx	r5
	while (1) {
   1bf48:	e7de      	b.n	1bf08 <tx_notify+0x4>

0001bf4a <tx_complete_work>:
	tx_notify(conn);
   1bf4a:	3828      	subs	r0, #40	; 0x28
   1bf4c:	f7ff bfda 	b.w	1bf04 <tx_notify>

0001bf50 <bt_conn_new>:
{
   1bf50:	b538      	push	{r3, r4, r5, lr}
   1bf52:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1bf54:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1bf56:	2501      	movs	r5, #1
   1bf58:	428b      	cmp	r3, r1
   1bf5a:	d102      	bne.n	1bf62 <bt_conn_new+0x12>
		return NULL;
   1bf5c:	2400      	movs	r4, #0
}
   1bf5e:	4620      	mov	r0, r4
   1bf60:	bd38      	pop	{r3, r4, r5, pc}
   1bf62:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1bf66:	e8d2 0fef 	ldaex	r0, [r2]
   1bf6a:	2800      	cmp	r0, #0
   1bf6c:	d104      	bne.n	1bf78 <bt_conn_new+0x28>
   1bf6e:	e8c2 5fec 	stlex	ip, r5, [r2]
   1bf72:	f1bc 0f00 	cmp.w	ip, #0
   1bf76:	d1f6      	bne.n	1bf66 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1bf78:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1bf7c:	d002      	beq.n	1bf84 <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   1bf7e:	4604      	mov	r4, r0
   1bf80:	3301      	adds	r3, #1
   1bf82:	e7e9      	b.n	1bf58 <bt_conn_new+0x8>
	if (!conn) {
   1bf84:	2c00      	cmp	r4, #0
   1bf86:	d0ea      	beq.n	1bf5e <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1bf88:	22b8      	movs	r2, #184	; 0xb8
   1bf8a:	2100      	movs	r1, #0
   1bf8c:	4620      	mov	r0, r4
   1bf8e:	f7ff fddc 	bl	1bb4a <memset>
	return conn;
   1bf92:	e7e4      	b.n	1bf5e <bt_conn_new+0xe>

0001bf94 <bt_conn_get_security>:
}
   1bf94:	2001      	movs	r0, #1
   1bf96:	4770      	bx	lr

0001bf98 <bt_conn_reset_rx_state>:
{
   1bf98:	b510      	push	{r4, lr}
   1bf9a:	4604      	mov	r4, r0
	if (!conn->rx) {
   1bf9c:	6900      	ldr	r0, [r0, #16]
   1bf9e:	b118      	cbz	r0, 1bfa8 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1bfa0:	f7f9 faee 	bl	15580 <net_buf_unref>
	conn->rx = NULL;
   1bfa4:	2300      	movs	r3, #0
   1bfa6:	6123      	str	r3, [r4, #16]
}
   1bfa8:	bd10      	pop	{r4, pc}

0001bfaa <bt_conn_is_peer_addr_le>:
{
   1bfaa:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1bfac:	7a03      	ldrb	r3, [r0, #8]
{
   1bfae:	4604      	mov	r4, r0
	if (id != conn->id) {
   1bfb0:	428b      	cmp	r3, r1
{
   1bfb2:	4615      	mov	r5, r2
	if (id != conn->id) {
   1bfb4:	d115      	bne.n	1bfe2 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1bfb6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1bfba:	2207      	movs	r2, #7
   1bfbc:	4628      	mov	r0, r5
   1bfbe:	f7ff fd88 	bl	1bad2 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1bfc2:	b180      	cbz	r0, 1bfe6 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1bfc4:	78e3      	ldrb	r3, [r4, #3]
   1bfc6:	2207      	movs	r2, #7
   1bfc8:	b943      	cbnz	r3, 1bfdc <bt_conn_is_peer_addr_le+0x32>
   1bfca:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1bfce:	4628      	mov	r0, r5
   1bfd0:	f7ff fd7f 	bl	1bad2 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1bfd4:	fab0 f080 	clz	r0, r0
   1bfd8:	0940      	lsrs	r0, r0, #5
}
   1bfda:	bd38      	pop	{r3, r4, r5, pc}
   1bfdc:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1bfe0:	e7f5      	b.n	1bfce <bt_conn_is_peer_addr_le+0x24>
		return false;
   1bfe2:	2000      	movs	r0, #0
   1bfe4:	e7f9      	b.n	1bfda <bt_conn_is_peer_addr_le+0x30>
		return true;
   1bfe6:	2001      	movs	r0, #1
   1bfe8:	e7f7      	b.n	1bfda <bt_conn_is_peer_addr_le+0x30>

0001bfea <bt_conn_ref>:
{
   1bfea:	4603      	mov	r3, r0
   1bfec:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1bfee:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1bff2:	4610      	mov	r0, r2
   1bff4:	f7ff ff83 	bl	1befe <atomic_get>
		if (!old) {
   1bff8:	b160      	cbz	r0, 1c014 <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1bffa:	1c41      	adds	r1, r0, #1
   1bffc:	e8d2 4fef 	ldaex	r4, [r2]
   1c000:	4284      	cmp	r4, r0
   1c002:	d104      	bne.n	1c00e <bt_conn_ref+0x24>
   1c004:	e8c2 1fec 	stlex	ip, r1, [r2]
   1c008:	f1bc 0f00 	cmp.w	ip, #0
   1c00c:	d1f6      	bne.n	1bffc <bt_conn_ref+0x12>
   1c00e:	d1f0      	bne.n	1bff2 <bt_conn_ref+0x8>
}
   1c010:	4618      	mov	r0, r3
   1c012:	bd10      	pop	{r4, pc}
			return NULL;
   1c014:	4603      	mov	r3, r0
   1c016:	e7fb      	b.n	1c010 <bt_conn_ref+0x26>

0001c018 <conn_lookup_handle>:
{
   1c018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c01c:	4607      	mov	r7, r0
   1c01e:	460e      	mov	r6, r1
   1c020:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1c022:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c024:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1c028:	42b4      	cmp	r4, r6
   1c02a:	d103      	bne.n	1c034 <conn_lookup_handle+0x1c>
	return NULL;
   1c02c:	2300      	movs	r3, #0
}
   1c02e:	4618      	mov	r0, r3
   1c030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1c034:	fb09 7004 	mla	r0, r9, r4, r7
   1c038:	f7ff ffd7 	bl	1bfea <bt_conn_ref>
   1c03c:	4603      	mov	r3, r0
		if (!conn) {
   1c03e:	b158      	cbz	r0, 1c058 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1c040:	7a85      	ldrb	r5, [r0, #10]
   1c042:	2d01      	cmp	r5, #1
   1c044:	d002      	beq.n	1c04c <conn_lookup_handle+0x34>
   1c046:	3d07      	subs	r5, #7
   1c048:	2d01      	cmp	r5, #1
   1c04a:	d803      	bhi.n	1c054 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1c04c:	881a      	ldrh	r2, [r3, #0]
   1c04e:	4542      	cmp	r2, r8
   1c050:	d0ed      	beq.n	1c02e <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1c052:	4618      	mov	r0, r3
   1c054:	f7f5 f900 	bl	11258 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1c058:	3401      	adds	r4, #1
   1c05a:	e7e5      	b.n	1c028 <conn_lookup_handle+0x10>

0001c05c <bt_conn_get_dst>:
}
   1c05c:	3088      	adds	r0, #136	; 0x88
   1c05e:	4770      	bx	lr

0001c060 <bt_conn_le_conn_update>:
{
   1c060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c062:	4607      	mov	r7, r0
   1c064:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1c066:	f242 0013 	movw	r0, #8211	; 0x2013
   1c06a:	210e      	movs	r1, #14
   1c06c:	f7f2 fea0 	bl	edb0 <bt_hci_cmd_create>
	if (!buf) {
   1c070:	4606      	mov	r6, r0
   1c072:	b1d0      	cbz	r0, 1c0aa <bt_conn_le_conn_update+0x4a>
   1c074:	210e      	movs	r1, #14
   1c076:	3008      	adds	r0, #8
   1c078:	f7f9 fb98 	bl	157ac <net_buf_simple_add>
   1c07c:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1c07e:	220e      	movs	r2, #14
   1c080:	2100      	movs	r1, #0
   1c082:	f7ff fd62 	bl	1bb4a <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c086:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c088:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c08a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c08c:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c08e:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c090:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c092:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c094:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c098:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1c09a:	88ab      	ldrh	r3, [r5, #4]
   1c09c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1c09e:	88eb      	ldrh	r3, [r5, #6]
   1c0a0:	8123      	strh	r3, [r4, #8]
}
   1c0a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c0a6:	f7f2 becd 	b.w	ee44 <bt_hci_cmd_send_sync>
}
   1c0aa:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c0ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c0b0 <l2cap_connected>:
}
   1c0b0:	4770      	bx	lr

0001c0b2 <l2cap_disconnected>:
   1c0b2:	4770      	bx	lr

0001c0b4 <bt_l2cap_chan_remove>:
	return list->head;
   1c0b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1c0b6:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c0b8:	b17b      	cbz	r3, 1c0da <bt_l2cap_chan_remove+0x26>
   1c0ba:	2200      	movs	r2, #0
   1c0bc:	3b08      	subs	r3, #8
   1c0be:	b163      	cbz	r3, 1c0da <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1c0c0:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1c0c2:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1c0c6:	d10e      	bne.n	1c0e6 <bt_l2cap_chan_remove+0x32>
	return node->next;
   1c0c8:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1c0ca:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1c0cc:	b932      	cbnz	r2, 1c0dc <bt_l2cap_chan_remove+0x28>
   1c0ce:	42ac      	cmp	r4, r5
	list->head = node;
   1c0d0:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1c0d2:	d100      	bne.n	1c0d6 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1c0d4:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1c0d6:	2200      	movs	r2, #0
   1c0d8:	609a      	str	r2, [r3, #8]
}
   1c0da:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1c0dc:	42ac      	cmp	r4, r5
	parent->next = child;
   1c0de:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1c0e0:	bf08      	it	eq
   1c0e2:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1c0e4:	e7f7      	b.n	1c0d6 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c0e6:	2c00      	cmp	r4, #0
   1c0e8:	d0f7      	beq.n	1c0da <bt_l2cap_chan_remove+0x26>
	return node->next;
   1c0ea:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c0ec:	2b00      	cmp	r3, #0
   1c0ee:	d0f4      	beq.n	1c0da <bt_l2cap_chan_remove+0x26>
   1c0f0:	4622      	mov	r2, r4
   1c0f2:	3b08      	subs	r3, #8
   1c0f4:	e7e3      	b.n	1c0be <bt_l2cap_chan_remove+0xa>

0001c0f6 <bt_l2cap_chan_del>:
{
   1c0f6:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1c0f8:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1c0fc:	4604      	mov	r4, r0
	if (!chan->conn) {
   1c0fe:	b123      	cbz	r3, 1c10a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1c100:	686b      	ldr	r3, [r5, #4]
   1c102:	b103      	cbz	r3, 1c106 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1c104:	4798      	blx	r3
	chan->conn = NULL;
   1c106:	2300      	movs	r3, #0
   1c108:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1c10a:	68e3      	ldr	r3, [r4, #12]
   1c10c:	b10b      	cbz	r3, 1c112 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1c10e:	4620      	mov	r0, r4
   1c110:	4798      	blx	r3
	if (ops->released) {
   1c112:	69eb      	ldr	r3, [r5, #28]
   1c114:	b11b      	cbz	r3, 1c11e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1c116:	4620      	mov	r0, r4
}
   1c118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1c11c:	4718      	bx	r3
}
   1c11e:	bd70      	pop	{r4, r5, r6, pc}

0001c120 <bt_l2cap_disconnected>:
	return list->head;
   1c120:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1c122:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c124:	b18b      	cbz	r3, 1c14a <bt_l2cap_disconnected+0x2a>
   1c126:	f1b3 0008 	subs.w	r0, r3, #8
   1c12a:	d00e      	beq.n	1c14a <bt_l2cap_disconnected+0x2a>
	return node->next;
   1c12c:	681c      	ldr	r4, [r3, #0]
   1c12e:	b104      	cbz	r4, 1c132 <bt_l2cap_disconnected+0x12>
   1c130:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1c132:	f7ff ffe0 	bl	1c0f6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c136:	b144      	cbz	r4, 1c14a <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c138:	f114 0308 	adds.w	r3, r4, #8
   1c13c:	d002      	beq.n	1c144 <bt_l2cap_disconnected+0x24>
	return node->next;
   1c13e:	68a3      	ldr	r3, [r4, #8]
   1c140:	b103      	cbz	r3, 1c144 <bt_l2cap_disconnected+0x24>
   1c142:	3b08      	subs	r3, #8
{
   1c144:	4620      	mov	r0, r4
   1c146:	461c      	mov	r4, r3
   1c148:	e7f3      	b.n	1c132 <bt_l2cap_disconnected+0x12>
}
   1c14a:	bd10      	pop	{r4, pc}

0001c14c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1c14c:	3104      	adds	r1, #4
   1c14e:	f7f5 bc0f 	b.w	11970 <bt_conn_create_pdu_timeout>

0001c152 <bt_l2cap_send_cb>:
{
   1c152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c156:	4614      	mov	r4, r2
   1c158:	4605      	mov	r5, r0
   1c15a:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1c15c:	f102 0008 	add.w	r0, r2, #8
   1c160:	2104      	movs	r1, #4
   1c162:	461e      	mov	r6, r3
   1c164:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1c168:	f7f9 fac8 	bl	156fc <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c16c:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c16e:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c170:	3a04      	subs	r2, #4
   1c172:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   1c174:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c176:	4632      	mov	r2, r6
   1c178:	4621      	mov	r1, r4
   1c17a:	4628      	mov	r0, r5
}
   1c17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c180:	f7f4 bfa8 	b.w	110d4 <bt_conn_send_cb>

0001c184 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1c184:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c186:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1c188:	2202      	movs	r2, #2
   1c18a:	2001      	movs	r0, #1
   1c18c:	f7f5 fd42 	bl	11c14 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1c190:	4604      	mov	r4, r0
   1c192:	b160      	cbz	r0, 1c1ae <l2cap_send_reject.constprop.0+0x2a>
	return net_buf_simple_add(&buf->b, len);
   1c194:	2102      	movs	r1, #2
   1c196:	3008      	adds	r0, #8
   1c198:	f7f9 fb08 	bl	157ac <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1c19c:	2300      	movs	r3, #0
   1c19e:	4622      	mov	r2, r4
   1c1a0:	7003      	strb	r3, [r0, #0]
   1c1a2:	7043      	strb	r3, [r0, #1]
   1c1a4:	2105      	movs	r1, #5
   1c1a6:	4628      	mov	r0, r5
   1c1a8:	9300      	str	r3, [sp, #0]
   1c1aa:	f7ff ffd2 	bl	1c152 <bt_l2cap_send_cb>
}
   1c1ae:	b003      	add	sp, #12
   1c1b0:	bd30      	pop	{r4, r5, pc}

0001c1b2 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1c1b2:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c1b4:	b160      	cbz	r0, 1c1d0 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1c1b6:	3808      	subs	r0, #8
   1c1b8:	b900      	cbnz	r0, 1c1bc <bt_l2cap_le_lookup_tx_cid+0xa>
   1c1ba:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1c1bc:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1c1c0:	428b      	cmp	r3, r1
   1c1c2:	d005      	beq.n	1c1d0 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c1c4:	f110 0308 	adds.w	r3, r0, #8
   1c1c8:	d001      	beq.n	1c1ce <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1c1ca:	6880      	ldr	r0, [r0, #8]
   1c1cc:	e7f2      	b.n	1c1b4 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1c1ce:	4618      	mov	r0, r3
}
   1c1d0:	4770      	bx	lr

0001c1d2 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1c1d2:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c1d4:	b160      	cbz	r0, 1c1f0 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1c1d6:	3808      	subs	r0, #8
   1c1d8:	b900      	cbnz	r0, 1c1dc <bt_l2cap_le_lookup_rx_cid+0xa>
   1c1da:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1c1dc:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1c1e0:	428b      	cmp	r3, r1
   1c1e2:	d005      	beq.n	1c1f0 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c1e4:	f110 0308 	adds.w	r3, r0, #8
   1c1e8:	d001      	beq.n	1c1ee <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1c1ea:	6880      	ldr	r0, [r0, #8]
   1c1ec:	e7f2      	b.n	1c1d4 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1c1ee:	4618      	mov	r0, r3
}
   1c1f0:	4770      	bx	lr

0001c1f2 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1c1f2:	4770      	bx	lr

0001c1f4 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1c1f4:	4603      	mov	r3, r0
	return list->head;
   1c1f6:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1c1f8:	b128      	cbz	r0, 1c206 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c1fa:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1c1fc:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c1fe:	4288      	cmp	r0, r1
	list->head = node;
   1c200:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1c202:	bf08      	it	eq
   1c204:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1c206:	4770      	bx	lr

0001c208 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1c208:	4603      	mov	r3, r0
	size_t bytes = 0;
   1c20a:	2000      	movs	r0, #0

	while (buf) {
   1c20c:	b903      	cbnz	r3, 1c210 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1c20e:	4770      	bx	lr
		bytes += buf->len;
   1c210:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1c212:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1c214:	4410      	add	r0, r2
		buf = buf->frags;
   1c216:	e7f9      	b.n	1c20c <net_buf_frags_len+0x4>

0001c218 <att_sent>:
	if (chan->ops->sent) {
   1c218:	684b      	ldr	r3, [r1, #4]
{
   1c21a:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1c21c:	695b      	ldr	r3, [r3, #20]
   1c21e:	b103      	cbz	r3, 1c222 <att_sent+0xa>
		chan->ops->sent(chan);
   1c220:	4718      	bx	r3
}
   1c222:	4770      	bx	lr

0001c224 <attr_read_type_cb>:
{
   1c224:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1c226:	68d4      	ldr	r4, [r2, #12]
   1c228:	3102      	adds	r1, #2
   1c22a:	7823      	ldrb	r3, [r4, #0]
   1c22c:	b913      	cbnz	r3, 1c234 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1c22e:	7021      	strb	r1, [r4, #0]
	return true;
   1c230:	2001      	movs	r0, #1
   1c232:	e006      	b.n	1c242 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1c234:	428b      	cmp	r3, r1
   1c236:	d0fb      	beq.n	1c230 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1c238:	8983      	ldrh	r3, [r0, #12]
   1c23a:	3b02      	subs	r3, #2
   1c23c:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1c23e:	2000      	movs	r0, #0
   1c240:	6110      	str	r0, [r2, #16]
}
   1c242:	bd10      	pop	{r4, pc}

0001c244 <att_prepare_write_req>:
}
   1c244:	2006      	movs	r0, #6
   1c246:	4770      	bx	lr

0001c248 <att_op_get_type>:
	switch (op) {
   1c248:	281e      	cmp	r0, #30
   1c24a:	d816      	bhi.n	1c27a <att_op_get_type+0x32>
   1c24c:	b308      	cbz	r0, 1c292 <att_op_get_type+0x4a>
   1c24e:	1e43      	subs	r3, r0, #1
   1c250:	2b1d      	cmp	r3, #29
   1c252:	d81e      	bhi.n	1c292 <att_op_get_type+0x4a>
   1c254:	e8df f003 	tbb	[pc, r3]
   1c258:	23172317 	.word	0x23172317
   1c25c:	23172317 	.word	0x23172317
   1c260:	23172317 	.word	0x23172317
   1c264:	23172317 	.word	0x23172317
   1c268:	1d172317 	.word	0x1d172317
   1c26c:	2317231d 	.word	0x2317231d
   1c270:	1d191d17 	.word	0x1d191d17
   1c274:	0f1b      	.short	0x0f1b
   1c276:	2004      	movs	r0, #4
   1c278:	4770      	bx	lr
   1c27a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1c27e:	2b52      	cmp	r3, #82	; 0x52
   1c280:	d107      	bne.n	1c292 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1c282:	2000      	movs	r0, #0
}
   1c284:	4770      	bx	lr
		return ATT_RESPONSE;
   1c286:	2002      	movs	r0, #2
   1c288:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1c28a:	2003      	movs	r0, #3
   1c28c:	4770      	bx	lr
		return ATT_INDICATION;
   1c28e:	2005      	movs	r0, #5
   1c290:	4770      	bx	lr
		return ATT_COMMAND;
   1c292:	f010 0f40 	tst.w	r0, #64	; 0x40
   1c296:	bf0c      	ite	eq
   1c298:	2006      	moveq	r0, #6
   1c29a:	2000      	movne	r0, #0
   1c29c:	4770      	bx	lr
		return ATT_REQUEST;
   1c29e:	2001      	movs	r0, #1
   1c2a0:	4770      	bx	lr

0001c2a2 <att_notify_mult>:
{
   1c2a2:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1c2a4:	6803      	ldr	r3, [r0, #0]
   1c2a6:	898a      	ldrh	r2, [r1, #12]
   1c2a8:	6818      	ldr	r0, [r3, #0]
   1c2aa:	6889      	ldr	r1, [r1, #8]
   1c2ac:	f7f8 fe10 	bl	14ed0 <bt_gatt_mult_notification>
}
   1c2b0:	2000      	movs	r0, #0
   1c2b2:	bd08      	pop	{r3, pc}

0001c2b4 <att_notify>:
{
   1c2b4:	b538      	push	{r3, r4, r5, lr}
   1c2b6:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1c2b8:	f101 0008 	add.w	r0, r1, #8
   1c2bc:	460c      	mov	r4, r1
   1c2be:	f000 ff43 	bl	1d148 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1c2c2:	682d      	ldr	r5, [r5, #0]
   1c2c4:	4601      	mov	r1, r0
   1c2c6:	89a3      	ldrh	r3, [r4, #12]
   1c2c8:	6828      	ldr	r0, [r5, #0]
   1c2ca:	68a2      	ldr	r2, [r4, #8]
   1c2cc:	f000 fea4 	bl	1d018 <bt_gatt_notification>
}
   1c2d0:	2000      	movs	r0, #0
   1c2d2:	bd38      	pop	{r3, r4, r5, pc}

0001c2d4 <bt_gatt_foreach_attr>:
{
   1c2d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c2d6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c2da:	2300      	movs	r3, #0
   1c2dc:	461a      	mov	r2, r3
   1c2de:	9300      	str	r3, [sp, #0]
   1c2e0:	f7f7 fc4a 	bl	13b78 <bt_gatt_foreach_attr_type>
}
   1c2e4:	b005      	add	sp, #20
   1c2e6:	f85d fb04 	ldr.w	pc, [sp], #4

0001c2ea <find_info_cb>:
{
   1c2ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1c2ec:	6893      	ldr	r3, [r2, #8]
{
   1c2ee:	4605      	mov	r5, r0
   1c2f0:	460e      	mov	r6, r1
   1c2f2:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1c2f4:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1c2f6:	b963      	cbnz	r3, 1c312 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1c2f8:	6850      	ldr	r0, [r2, #4]
   1c2fa:	2101      	movs	r1, #1
   1c2fc:	3008      	adds	r0, #8
   1c2fe:	f7f9 fa55 	bl	157ac <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c302:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1c304:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1c306:	781b      	ldrb	r3, [r3, #0]
   1c308:	2b00      	cmp	r3, #0
   1c30a:	bf0c      	ite	eq
   1c30c:	2301      	moveq	r3, #1
   1c30e:	2302      	movne	r3, #2
   1c310:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1c312:	68a3      	ldr	r3, [r4, #8]
   1c314:	781b      	ldrb	r3, [r3, #0]
   1c316:	2b01      	cmp	r3, #1
   1c318:	d003      	beq.n	1c322 <find_info_cb+0x38>
   1c31a:	2b02      	cmp	r3, #2
   1c31c:	d019      	beq.n	1c352 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1c31e:	2000      	movs	r0, #0
   1c320:	e016      	b.n	1c350 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1c322:	682b      	ldr	r3, [r5, #0]
   1c324:	781b      	ldrb	r3, [r3, #0]
   1c326:	2b00      	cmp	r3, #0
   1c328:	d1f9      	bne.n	1c31e <find_info_cb+0x34>
   1c32a:	6860      	ldr	r0, [r4, #4]
   1c32c:	2104      	movs	r1, #4
   1c32e:	3008      	adds	r0, #8
   1c330:	f7f9 fa3c 	bl	157ac <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c334:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1c336:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c338:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   1c33a:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1c33c:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1c33e:	6863      	ldr	r3, [r4, #4]
   1c340:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1c344:	899b      	ldrh	r3, [r3, #12]
   1c346:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c348:	2804      	cmp	r0, #4
   1c34a:	bf94      	ite	ls
   1c34c:	2000      	movls	r0, #0
   1c34e:	2001      	movhi	r0, #1
}
   1c350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1c352:	682b      	ldr	r3, [r5, #0]
   1c354:	781b      	ldrb	r3, [r3, #0]
   1c356:	2b02      	cmp	r3, #2
   1c358:	d1e1      	bne.n	1c31e <find_info_cb+0x34>
   1c35a:	6860      	ldr	r0, [r4, #4]
   1c35c:	2112      	movs	r1, #18
   1c35e:	3008      	adds	r0, #8
   1c360:	f7f9 fa24 	bl	157ac <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c364:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1c366:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c368:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1c36a:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1c36e:	3101      	adds	r1, #1
   1c370:	f7ff fbc0 	bl	1baf4 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1c374:	6863      	ldr	r3, [r4, #4]
   1c376:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1c37a:	899b      	ldrh	r3, [r3, #12]
   1c37c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1c37e:	2812      	cmp	r0, #18
   1c380:	e7e3      	b.n	1c34a <find_info_cb+0x60>

0001c382 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1c382:	68d0      	ldr	r0, [r2, #12]
   1c384:	3104      	adds	r1, #4
   1c386:	7803      	ldrb	r3, [r0, #0]
   1c388:	b913      	cbnz	r3, 1c390 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1c38a:	7001      	strb	r1, [r0, #0]
	return true;
   1c38c:	2001      	movs	r0, #1
}
   1c38e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1c390:	428b      	cmp	r3, r1
   1c392:	d0fb      	beq.n	1c38c <attr_read_group_cb+0xa>
		data->group = NULL;
   1c394:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1c396:	6891      	ldr	r1, [r2, #8]
   1c398:	898b      	ldrh	r3, [r1, #12]
   1c39a:	3b04      	subs	r3, #4
   1c39c:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1c39e:	6110      	str	r0, [r2, #16]
		return false;
   1c3a0:	4770      	bx	lr

0001c3a2 <write_cb>:
{
   1c3a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c3a4:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c3a6:	4601      	mov	r1, r0
{
   1c3a8:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1c3aa:	222a      	movs	r2, #42	; 0x2a
   1c3ac:	6820      	ldr	r0, [r4, #0]
   1c3ae:	f000 fda4 	bl	1cefa <bt_gatt_check_perm>
   1c3b2:	4605      	mov	r5, r0
   1c3b4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1c3b6:	bb00      	cbnz	r0, 1c3fa <write_cb+0x58>
	if (!data->req) {
   1c3b8:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1c3ba:	4631      	mov	r1, r6
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1c3bc:	2b00      	cmp	r3, #0
   1c3be:	bf14      	ite	ne
   1c3c0:	2300      	movne	r3, #0
   1c3c2:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1c3c4:	9301      	str	r3, [sp, #4]
   1c3c6:	8a63      	ldrh	r3, [r4, #18]
   1c3c8:	68b7      	ldr	r7, [r6, #8]
   1c3ca:	9300      	str	r3, [sp, #0]
   1c3cc:	68e2      	ldr	r2, [r4, #12]
   1c3ce:	8a23      	ldrh	r3, [r4, #16]
   1c3d0:	6820      	ldr	r0, [r4, #0]
   1c3d2:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1c3d4:	1e03      	subs	r3, r0, #0
   1c3d6:	db05      	blt.n	1c3e4 <write_cb+0x42>
   1c3d8:	8a22      	ldrh	r2, [r4, #16]
   1c3da:	4293      	cmp	r3, r2
   1c3dc:	d10b      	bne.n	1c3f6 <write_cb+0x54>
	data->err = 0U;
   1c3de:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1c3e0:	2501      	movs	r5, #1
   1c3e2:	e005      	b.n	1c3f0 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1c3e4:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1c3e8:	d305      	bcc.n	1c3f6 <write_cb+0x54>
		return -err;
   1c3ea:	425b      	negs	r3, r3
   1c3ec:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1c3ee:	7523      	strb	r3, [r4, #20]
}
   1c3f0:	4628      	mov	r0, r5
   1c3f2:	b003      	add	sp, #12
   1c3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1c3f6:	230e      	movs	r3, #14
   1c3f8:	e7f9      	b.n	1c3ee <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1c3fa:	2500      	movs	r5, #0
   1c3fc:	e7f8      	b.n	1c3f0 <write_cb+0x4e>

0001c3fe <att_chan_read>:
{
   1c3fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c402:	4680      	mov	r8, r0
   1c404:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c406:	4610      	mov	r0, r2
{
   1c408:	4699      	mov	r9, r3
   1c40a:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c40c:	f7ff fefc 	bl	1c208 <net_buf_frags_len>
   1c410:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
{
   1c414:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1c416:	4283      	cmp	r3, r0
   1c418:	d97a      	bls.n	1c510 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1c41a:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   1c41e:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1c420:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1c422:	f7f9 f909 	bl	15638 <net_buf_frag_last>
	size_t len, total = 0;
   1c426:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1c42a:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c42c:	4630      	mov	r0, r6
   1c42e:	f7ff feeb 	bl	1c208 <net_buf_frags_len>
   1c432:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1c436:	f105 0708 	add.w	r7, r5, #8
   1c43a:	1a24      	subs	r4, r4, r0
   1c43c:	4638      	mov	r0, r7
   1c43e:	f000 fe8f 	bl	1d160 <net_buf_simple_tailroom>
   1c442:	4284      	cmp	r4, r0
   1c444:	d211      	bcs.n	1c46a <att_chan_read+0x6c>
   1c446:	4630      	mov	r0, r6
   1c448:	f7ff fede 	bl	1c208 <net_buf_frags_len>
   1c44c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c450:	1a24      	subs	r4, r4, r0
		if (!len) {
   1c452:	bb34      	cbnz	r4, 1c4a2 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1c454:	79b0      	ldrb	r0, [r6, #6]
   1c456:	f7f8 ff13 	bl	15280 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1c45a:	2200      	movs	r2, #0
   1c45c:	2300      	movs	r3, #0
   1c45e:	f000 fe59 	bl	1d114 <net_buf_alloc_fixed>
			if (!frag) {
   1c462:	4605      	mov	r5, r0
   1c464:	b930      	cbnz	r0, 1c474 <att_chan_read+0x76>
	return total;
   1c466:	4657      	mov	r7, sl
   1c468:	e02c      	b.n	1c4c4 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1c46a:	4638      	mov	r0, r7
   1c46c:	f000 fe78 	bl	1d160 <net_buf_simple_tailroom>
   1c470:	4604      	mov	r4, r0
   1c472:	e7ee      	b.n	1c452 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1c474:	4601      	mov	r1, r0
   1c476:	4630      	mov	r0, r6
   1c478:	f7f9 f91e 	bl	156b8 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1c47c:	4630      	mov	r0, r6
   1c47e:	f7ff fec3 	bl	1c208 <net_buf_frags_len>
   1c482:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c486:	f105 0708 	add.w	r7, r5, #8
   1c48a:	1a24      	subs	r4, r4, r0
   1c48c:	4638      	mov	r0, r7
   1c48e:	f000 fe67 	bl	1d160 <net_buf_simple_tailroom>
   1c492:	4284      	cmp	r4, r0
   1c494:	d21a      	bcs.n	1c4cc <att_chan_read+0xce>
   1c496:	4630      	mov	r0, r6
   1c498:	f7ff feb6 	bl	1c208 <net_buf_frags_len>
   1c49c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1c4a0:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1c4a2:	68a9      	ldr	r1, [r5, #8]
   1c4a4:	89aa      	ldrh	r2, [r5, #12]
   1c4a6:	f8db 7004 	ldr.w	r7, [fp, #4]
   1c4aa:	440a      	add	r2, r1
   1c4ac:	9803      	ldr	r0, [sp, #12]
   1c4ae:	4659      	mov	r1, fp
   1c4b0:	f8cd 9000 	str.w	r9, [sp]
   1c4b4:	b2a3      	uxth	r3, r4
   1c4b6:	47b8      	blx	r7
		if (read < 0) {
   1c4b8:	1e07      	subs	r7, r0, #0
   1c4ba:	da0c      	bge.n	1c4d6 <att_chan_read+0xd8>
				return total;
   1c4bc:	f1ba 0f00 	cmp.w	sl, #0
   1c4c0:	bf18      	it	ne
   1c4c2:	4657      	movne	r7, sl
}
   1c4c4:	4638      	mov	r0, r7
   1c4c6:	b005      	add	sp, #20
   1c4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4cc:	4638      	mov	r0, r7
   1c4ce:	f000 fe47 	bl	1d160 <net_buf_simple_tailroom>
   1c4d2:	4604      	mov	r4, r0
   1c4d4:	e7e5      	b.n	1c4a2 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1c4d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c4d8:	b993      	cbnz	r3, 1c500 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1c4da:	4639      	mov	r1, r7
   1c4dc:	f105 0008 	add.w	r0, r5, #8
   1c4e0:	f7f9 f964 	bl	157ac <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c4e4:	4630      	mov	r0, r6
   1c4e6:	f7ff fe8f 	bl	1c208 <net_buf_frags_len>
   1c4ea:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1c4ee:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c4f0:	4283      	cmp	r3, r0
		total += read;
   1c4f2:	44ba      	add	sl, r7
		offset += read;
   1c4f4:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1c4f8:	d9b5      	bls.n	1c466 <att_chan_read+0x68>
   1c4fa:	42a7      	cmp	r7, r4
   1c4fc:	d096      	beq.n	1c42c <att_chan_read+0x2e>
   1c4fe:	e7b2      	b.n	1c466 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1c500:	4639      	mov	r1, r7
   1c502:	4628      	mov	r0, r5
   1c504:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1c506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c508:	4798      	blx	r3
   1c50a:	2800      	cmp	r0, #0
   1c50c:	d1e5      	bne.n	1c4da <att_chan_read+0xdc>
   1c50e:	e7aa      	b.n	1c466 <att_chan_read+0x68>
		return 0;
   1c510:	2700      	movs	r7, #0
   1c512:	e7d7      	b.n	1c4c4 <att_chan_read+0xc6>

0001c514 <bt_att_chan_send>:
{
   1c514:	b570      	push	{r4, r5, r6, lr}
   1c516:	4604      	mov	r4, r0
   1c518:	460e      	mov	r6, r1
	if (!cb) {
   1c51a:	4615      	mov	r5, r2
   1c51c:	b132      	cbz	r2, 1c52c <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1c51e:	462a      	mov	r2, r5
   1c520:	4631      	mov	r1, r6
   1c522:	4620      	mov	r0, r4
}
   1c524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1c528:	f7f5 be98 	b.w	1225c <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1c52c:	2200      	movs	r2, #0
   1c52e:	2300      	movs	r3, #0
   1c530:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1c534:	f7fc fefe 	bl	19334 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1c538:	2800      	cmp	r0, #0
   1c53a:	daf0      	bge.n	1c51e <bt_att_chan_send+0xa>
}
   1c53c:	f06f 000a 	mvn.w	r0, #10
   1c540:	bd70      	pop	{r4, r5, r6, pc}

0001c542 <bt_att_chan_send_rsp>:
{
   1c542:	b538      	push	{r3, r4, r5, lr}
   1c544:	4604      	mov	r4, r0
   1c546:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1c548:	f7ff ffe4 	bl	1c514 <bt_att_chan_send>
	if (err) {
   1c54c:	b130      	cbz	r0, 1c55c <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1c54e:	4629      	mov	r1, r5
   1c550:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   1c554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1c558:	f7f8 bfe4 	b.w	15524 <net_buf_put>
}
   1c55c:	bd38      	pop	{r3, r4, r5, pc}

0001c55e <process_queue>:
{
   1c55e:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1c560:	2200      	movs	r2, #0
{
   1c562:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1c564:	2300      	movs	r3, #0
   1c566:	4608      	mov	r0, r1
{
   1c568:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1c56a:	f7f8 ff87 	bl	1547c <net_buf_get>
	if (buf) {
   1c56e:	4605      	mov	r5, r0
   1c570:	b160      	cbz	r0, 1c58c <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1c572:	4601      	mov	r1, r0
   1c574:	2200      	movs	r2, #0
   1c576:	4620      	mov	r0, r4
   1c578:	f7f5 fe70 	bl	1225c <chan_send>
		if (err) {
   1c57c:	4604      	mov	r4, r0
   1c57e:	b118      	cbz	r0, 1c588 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1c580:	4629      	mov	r1, r5
   1c582:	4630      	mov	r0, r6
   1c584:	f001 fc3a 	bl	1ddfc <k_queue_prepend>
}
   1c588:	4620      	mov	r0, r4
   1c58a:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1c58c:	f06f 0401 	mvn.w	r4, #1
   1c590:	e7fa      	b.n	1c588 <process_queue+0x2a>

0001c592 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c592:	2200      	movs	r2, #0
   1c594:	b510      	push	{r4, lr}
	return list->head;
   1c596:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c598:	b153      	cbz	r3, 1c5b0 <sys_slist_find_and_remove.isra.0+0x1e>
   1c59a:	428b      	cmp	r3, r1
   1c59c:	d10e      	bne.n	1c5bc <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1c59e:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1c5a0:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c5a2:	b932      	cbnz	r2, 1c5b2 <sys_slist_find_and_remove.isra.0+0x20>
   1c5a4:	42a1      	cmp	r1, r4
	list->head = node;
   1c5a6:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c5a8:	d100      	bne.n	1c5ac <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1c5aa:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1c5ac:	2300      	movs	r3, #0
   1c5ae:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c5b0:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1c5b2:	42a1      	cmp	r1, r4
	parent->next = child;
   1c5b4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1c5b6:	bf08      	it	eq
   1c5b8:	6042      	streq	r2, [r0, #4]
}
   1c5ba:	e7f7      	b.n	1c5ac <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1c5bc:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c5be:	681b      	ldr	r3, [r3, #0]
   1c5c0:	e7ea      	b.n	1c598 <sys_slist_find_and_remove.isra.0+0x6>

0001c5c2 <att_exec_write_req>:
   1c5c2:	2006      	movs	r0, #6
   1c5c4:	4770      	bx	lr

0001c5c6 <chan_req_send>:
{
   1c5c6:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c5c8:	690e      	ldr	r6, [r1, #16]
{
   1c5ca:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c5cc:	4630      	mov	r0, r6
   1c5ce:	f7ff fe1b 	bl	1c208 <net_buf_frags_len>
   1c5d2:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
{
   1c5d6:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1c5d8:	4283      	cmp	r3, r0
   1c5da:	d317      	bcc.n	1c60c <chan_req_send+0x46>
	chan->req = req;
   1c5dc:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   1c5e0:	f106 0008 	add.w	r0, r6, #8
   1c5e4:	f000 fdb8 	bl	1d158 <net_buf_simple_headroom>
	state->len = buf->len;
   1c5e8:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1c5ea:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1c5ec:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1c5ee:	6920      	ldr	r0, [r4, #16]
   1c5f0:	f7f9 f80a 	bl	15608 <net_buf_ref>
   1c5f4:	2200      	movs	r2, #0
   1c5f6:	4601      	mov	r1, r0
   1c5f8:	4628      	mov	r0, r5
   1c5fa:	f7f5 fe2f 	bl	1225c <chan_send>
	if (err) {
   1c5fe:	4605      	mov	r5, r0
   1c600:	b110      	cbz	r0, 1c608 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1c602:	6920      	ldr	r0, [r4, #16]
   1c604:	f7f8 ffbc 	bl	15580 <net_buf_unref>
}
   1c608:	4628      	mov	r0, r5
   1c60a:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1c60c:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1c610:	e7fa      	b.n	1c608 <chan_req_send+0x42>

0001c612 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c612:	30c8      	adds	r0, #200	; 0xc8
   1c614:	e8d0 3fef 	ldaex	r3, [r0]
   1c618:	f023 0301 	bic.w	r3, r3, #1
   1c61c:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c620:	2a00      	cmp	r2, #0
   1c622:	d1f7      	bne.n	1c614 <chan_rsp_sent+0x2>
}
   1c624:	4770      	bx	lr

0001c626 <chan_cfm_sent>:
   1c626:	30c8      	adds	r0, #200	; 0xc8
   1c628:	e8d0 3fef 	ldaex	r3, [r0]
   1c62c:	f023 0302 	bic.w	r3, r3, #2
   1c630:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1c634:	2a00      	cmp	r2, #0
   1c636:	d1f7      	bne.n	1c628 <chan_cfm_sent+0x2>
}
   1c638:	4770      	bx	lr

0001c63a <read_cb>:
{
   1c63a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c63e:	4606      	mov	r6, r0
	data->err = 0x00;
   1c640:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   1c642:	f8d2 8000 	ldr.w	r8, [r2]
{
   1c646:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1c648:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c64c:	4631      	mov	r1, r6
	data->err = 0x00;
   1c64e:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1c650:	2215      	movs	r2, #21
   1c652:	f000 fc52 	bl	1cefa <bt_gatt_check_perm>
   1c656:	4604      	mov	r4, r0
   1c658:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1c65a:	b9a0      	cbnz	r0, 1c686 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1c65c:	e9cd 0000 	strd	r0, r0, [sp]
   1c660:	88ab      	ldrh	r3, [r5, #4]
   1c662:	4631      	mov	r1, r6
   1c664:	4640      	mov	r0, r8
   1c666:	68aa      	ldr	r2, [r5, #8]
   1c668:	f7ff fec9 	bl	1c3fe <att_chan_read>
	if (ret < 0) {
   1c66c:	1e03      	subs	r3, r0, #0
   1c66e:	da0c      	bge.n	1c68a <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1c670:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1c674:	bf32      	itee	cc
   1c676:	230e      	movcc	r3, #14
		return -err;
   1c678:	425b      	negcs	r3, r3
   1c67a:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   1c67c:	732b      	strb	r3, [r5, #12]
}
   1c67e:	4620      	mov	r0, r4
   1c680:	b002      	add	sp, #8
   1c682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1c686:	463c      	mov	r4, r7
   1c688:	e7f9      	b.n	1c67e <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1c68a:	2401      	movs	r4, #1
   1c68c:	e7f7      	b.n	1c67e <read_cb+0x44>

0001c68e <bt_att_sent>:
{
   1c68e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1c690:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
{
   1c694:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1c696:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1c69a:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1c69e:	b10b      	cbz	r3, 1c6a4 <bt_att_sent+0x16>
		chan->sent(chan);
   1c6a0:	4638      	mov	r0, r7
   1c6a2:	4798      	blx	r3
   1c6a4:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1c6a8:	e8d3 2fef 	ldaex	r2, [r3]
   1c6ac:	f022 0210 	bic.w	r2, r2, #16
   1c6b0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c6b4:	2900      	cmp	r1, #0
   1c6b6:	d1f7      	bne.n	1c6a8 <bt_att_sent+0x1a>
	if (!att) {
   1c6b8:	b335      	cbz	r5, 1c708 <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1c6ba:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1c6be:	b98b      	cbnz	r3, 1c6e4 <bt_att_sent+0x56>
   1c6c0:	686b      	ldr	r3, [r5, #4]
   1c6c2:	b17b      	cbz	r3, 1c6e4 <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1c6c4:	1d28      	adds	r0, r5, #4
   1c6c6:	f7ff fd95 	bl	1c1f4 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c6ca:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1c6cc:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c6ce:	4638      	mov	r0, r7
   1c6d0:	f7ff ff79 	bl	1c5c6 <chan_req_send>
   1c6d4:	2800      	cmp	r0, #0
   1c6d6:	da17      	bge.n	1c708 <bt_att_sent+0x7a>
	parent->next = child;
   1c6d8:	686b      	ldr	r3, [r5, #4]
   1c6da:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c6dc:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1c6de:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c6e0:	b903      	cbnz	r3, 1c6e4 <bt_att_sent+0x56>
	list->tail = node;
   1c6e2:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1c6e4:	4638      	mov	r0, r7
   1c6e6:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   1c6ea:	f7ff ff38 	bl	1c55e <process_queue>
	if (!err) {
   1c6ee:	b158      	cbz	r0, 1c708 <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
   1c6f0:	4638      	mov	r0, r7
   1c6f2:	f105 010c 	add.w	r1, r5, #12
   1c6f6:	f7ff ff32 	bl	1c55e <process_queue>
	if (!err) {
   1c6fa:	b128      	cbz	r0, 1c708 <bt_att_sent+0x7a>
	z_impl_k_sem_give(sem);
   1c6fc:	f504 708c 	add.w	r0, r4, #280	; 0x118
}
   1c700:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1c704:	f7fc bdda 	b.w	192bc <z_impl_k_sem_give>
   1c708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c70a <att_req_send_process>:
{
   1c70a:	b570      	push	{r4, r5, r6, lr}
   1c70c:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1c70e:	3004      	adds	r0, #4
   1c710:	f7ff fd70 	bl	1c1f4 <sys_slist_get>
	if (!node) {
   1c714:	4606      	mov	r6, r0
   1c716:	b1c0      	cbz	r0, 1c74a <att_req_send_process+0x40>
	return list->head;
   1c718:	6aab      	ldr	r3, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c71a:	b153      	cbz	r3, 1c732 <att_req_send_process+0x28>
   1c71c:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   1c720:	d007      	beq.n	1c732 <att_req_send_process+0x28>
	return node->next;
   1c722:	681c      	ldr	r4, [r3, #0]
   1c724:	b10c      	cbz	r4, 1c72a <att_req_send_process+0x20>
   1c726:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		if (!chan->req) {
   1c72a:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1c72e:	b13b      	cbz	r3, 1c740 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c730:	b964      	cbnz	r4, 1c74c <att_req_send_process+0x42>
	parent->next = child;
   1c732:	686b      	ldr	r3, [r5, #4]
   1c734:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c736:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1c738:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c73a:	b933      	cbnz	r3, 1c74a <att_req_send_process+0x40>
	list->tail = node;
   1c73c:	60ae      	str	r6, [r5, #8]
}
   1c73e:	e004      	b.n	1c74a <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c740:	4631      	mov	r1, r6
   1c742:	f7f5 fdf7 	bl	12334 <bt_att_chan_req_send>
   1c746:	2800      	cmp	r0, #0
   1c748:	dbf2      	blt.n	1c730 <att_req_send_process+0x26>
}
   1c74a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c74c:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   1c750:	d004      	beq.n	1c75c <att_req_send_process+0x52>
	return node->next;
   1c752:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c756:	b10b      	cbz	r3, 1c75c <att_req_send_process+0x52>
   1c758:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1c75c:	4620      	mov	r0, r4
   1c75e:	461c      	mov	r4, r3
   1c760:	e7e3      	b.n	1c72a <att_req_send_process+0x20>

0001c762 <bt_att_status>:
{
   1c762:	b538      	push	{r3, r4, r5, lr}
   1c764:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c766:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1c76a:	07db      	lsls	r3, r3, #31
   1c76c:	d519      	bpl.n	1c7a2 <bt_att_status+0x40>
	if (!chan->att) {
   1c76e:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1c772:	b1b0      	cbz	r0, 1c7a2 <bt_att_status+0x40>
	if (chan->req) {
   1c774:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1c778:	b99b      	cbnz	r3, 1c7a2 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1c77a:	3004      	adds	r0, #4
   1c77c:	f7ff fd3a 	bl	1c1f4 <sys_slist_get>
	if (!node) {
   1c780:	4604      	mov	r4, r0
   1c782:	b170      	cbz	r0, 1c7a2 <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1c784:	4601      	mov	r1, r0
   1c786:	f1a5 0008 	sub.w	r0, r5, #8
   1c78a:	f7f5 fdd3 	bl	12334 <bt_att_chan_req_send>
   1c78e:	2800      	cmp	r0, #0
   1c790:	da07      	bge.n	1c7a2 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1c792:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1c796:	685a      	ldr	r2, [r3, #4]
   1c798:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c79a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1c79c:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c79e:	b902      	cbnz	r2, 1c7a2 <bt_att_status+0x40>
	list->tail = node;
   1c7a0:	609c      	str	r4, [r3, #8]
}
   1c7a2:	bd38      	pop	{r3, r4, r5, pc}

0001c7a4 <att_write_req>:
{
   1c7a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c7a6:	460c      	mov	r4, r1
   1c7a8:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1c7aa:	f101 0008 	add.w	r0, r1, #8
   1c7ae:	f000 fccb 	bl	1d148 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1c7b2:	89a2      	ldrh	r2, [r4, #12]
   1c7b4:	4603      	mov	r3, r0
   1c7b6:	9201      	str	r2, [sp, #4]
   1c7b8:	68a2      	ldr	r2, [r4, #8]
   1c7ba:	2112      	movs	r1, #18
   1c7bc:	9200      	str	r2, [sp, #0]
   1c7be:	4628      	mov	r0, r5
   1c7c0:	2213      	movs	r2, #19
   1c7c2:	f7f5 ff95 	bl	126f0 <att_write_rsp.constprop.0>
}
   1c7c6:	b003      	add	sp, #12
   1c7c8:	bd30      	pop	{r4, r5, pc}

0001c7ca <att_write_cmd>:
{
   1c7ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c7cc:	460c      	mov	r4, r1
   1c7ce:	4605      	mov	r5, r0
   1c7d0:	f101 0008 	add.w	r0, r1, #8
   1c7d4:	f000 fcb8 	bl	1d148 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1c7d8:	89a2      	ldrh	r2, [r4, #12]
   1c7da:	4603      	mov	r3, r0
   1c7dc:	9201      	str	r2, [sp, #4]
   1c7de:	68a2      	ldr	r2, [r4, #8]
   1c7e0:	4628      	mov	r0, r5
   1c7e2:	9200      	str	r2, [sp, #0]
   1c7e4:	2200      	movs	r2, #0
   1c7e6:	4611      	mov	r1, r2
   1c7e8:	f7f5 ff82 	bl	126f0 <att_write_rsp.constprop.0>
}
   1c7ec:	b003      	add	sp, #12
   1c7ee:	bd30      	pop	{r4, r5, pc}

0001c7f0 <att_read_blob_req>:
{
   1c7f0:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1c7f2:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1c7f4:	210c      	movs	r1, #12
   1c7f6:	8813      	ldrh	r3, [r2, #0]
   1c7f8:	8852      	ldrh	r2, [r2, #2]
   1c7fa:	9200      	str	r2, [sp, #0]
   1c7fc:	220d      	movs	r2, #13
   1c7fe:	f7f6 f8d3 	bl	129a8 <att_read_rsp>
}
   1c802:	b003      	add	sp, #12
   1c804:	f85d fb04 	ldr.w	pc, [sp], #4

0001c808 <att_read_req>:
{
   1c808:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1c80a:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1c80c:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1c80e:	210a      	movs	r1, #10
   1c810:	881b      	ldrh	r3, [r3, #0]
   1c812:	9200      	str	r2, [sp, #0]
   1c814:	220b      	movs	r2, #11
   1c816:	f7f6 f8c7 	bl	129a8 <att_read_rsp>
}
   1c81a:	b003      	add	sp, #12
   1c81c:	f85d fb04 	ldr.w	pc, [sp], #4

0001c820 <bt_att_init>:
	bt_gatt_init();
   1c820:	f7f7 b8fe 	b.w	13a20 <bt_gatt_init>

0001c824 <bt_att_get_mtu>:
{
   1c824:	b508      	push	{r3, lr}
	att = att_get(conn);
   1c826:	f7f5 fb87 	bl	11f38 <att_get>
	if (!att) {
   1c82a:	b1d8      	cbz	r0, 1c864 <bt_att_get_mtu+0x40>
	return list->head;
   1c82c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c82e:	b1c8      	cbz	r0, 1c864 <bt_att_get_mtu+0x40>
   1c830:	f5b0 719e 	subs.w	r1, r0, #316	; 0x13c
   1c834:	d015      	beq.n	1c862 <bt_att_get_mtu+0x3e>
	return node->next;
   1c836:	6803      	ldr	r3, [r0, #0]
   1c838:	b10b      	cbz	r3, 1c83e <bt_att_get_mtu+0x1a>
   1c83a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1c83e:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   1c840:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
   1c844:	4290      	cmp	r0, r2
   1c846:	bf38      	it	cc
   1c848:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c84a:	b15b      	cbz	r3, 1c864 <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c84c:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   1c850:	d004      	beq.n	1c85c <bt_att_get_mtu+0x38>
	return node->next;
   1c852:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   1c856:	b10a      	cbz	r2, 1c85c <bt_att_get_mtu+0x38>
   1c858:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   1c85c:	4619      	mov	r1, r3
   1c85e:	4613      	mov	r3, r2
   1c860:	e7ee      	b.n	1c840 <bt_att_get_mtu+0x1c>
		return 0;
   1c862:	4608      	mov	r0, r1
}
   1c864:	bd08      	pop	{r3, pc}

0001c866 <att_req_destroy>:
{
   1c866:	b510      	push	{r4, lr}
   1c868:	4604      	mov	r4, r0
	if (req->buf) {
   1c86a:	6900      	ldr	r0, [r0, #16]
   1c86c:	b108      	cbz	r0, 1c872 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1c86e:	f7f8 fe87 	bl	15580 <net_buf_unref>
	if (req->destroy) {
   1c872:	68a3      	ldr	r3, [r4, #8]
   1c874:	b10b      	cbz	r3, 1c87a <att_req_destroy+0x14>
		req->destroy(req);
   1c876:	4620      	mov	r0, r4
   1c878:	4798      	blx	r3
	bt_att_req_free(req);
   1c87a:	4620      	mov	r0, r4
}
   1c87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1c880:	f7f6 ba30 	b.w	12ce4 <bt_att_req_free>

0001c884 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1c884:	898a      	ldrh	r2, [r1, #12]
   1c886:	2300      	movs	r3, #0
   1c888:	6889      	ldr	r1, [r1, #8]
   1c88a:	f7f6 ba37 	b.w	12cfc <att_handle_rsp>

0001c88e <att_handle_find_type_rsp>:
   1c88e:	f7ff bff9 	b.w	1c884 <att_handle_find_info_rsp>

0001c892 <att_handle_read_type_rsp>:
   1c892:	f7ff bff7 	b.w	1c884 <att_handle_find_info_rsp>

0001c896 <att_handle_read_rsp>:
   1c896:	f7ff bff5 	b.w	1c884 <att_handle_find_info_rsp>

0001c89a <att_handle_read_blob_rsp>:
   1c89a:	f7ff bff3 	b.w	1c884 <att_handle_find_info_rsp>

0001c89e <att_handle_read_mult_rsp>:
   1c89e:	f7ff bff1 	b.w	1c884 <att_handle_find_info_rsp>

0001c8a2 <att_handle_read_group_rsp>:
   1c8a2:	f7ff bfef 	b.w	1c884 <att_handle_find_info_rsp>

0001c8a6 <att_handle_write_rsp>:
   1c8a6:	f7ff bfed 	b.w	1c884 <att_handle_find_info_rsp>

0001c8aa <att_handle_prepare_write_rsp>:
   1c8aa:	f7ff bfeb 	b.w	1c884 <att_handle_find_info_rsp>

0001c8ae <att_handle_exec_write_rsp>:
   1c8ae:	f7ff bfe9 	b.w	1c884 <att_handle_find_info_rsp>

0001c8b2 <att_confirm>:
   1c8b2:	f7ff bfe7 	b.w	1c884 <att_handle_find_info_rsp>

0001c8b6 <att_mtu_rsp>:
{
   1c8b6:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   1c8b8:	6889      	ldr	r1, [r1, #8]
{
   1c8ba:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1c8bc:	880c      	ldrh	r4, [r1, #0]
{
   1c8be:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1c8c0:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1c8c2:	bf89      	itett	hi
   1c8c4:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1c8c6:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1c8c8:	f8a3 4052 	strhhi.w	r4, [r3, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1c8cc:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1c8d0:	bf99      	ittee	ls
   1c8d2:	2304      	movls	r3, #4
   1c8d4:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1c8d6:	2300      	movhi	r3, #0
   1c8d8:	8992      	ldrhhi	r2, [r2, #12]
}
   1c8da:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1c8dc:	f7f6 ba0e 	b.w	12cfc <att_handle_rsp>

0001c8e0 <att_chan_detach>:
{
   1c8e0:	b538      	push	{r3, r4, r5, lr}
   1c8e2:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1c8e4:	6800      	ldr	r0, [r0, #0]
   1c8e6:	f504 719e 	add.w	r1, r4, #316	; 0x13c
   1c8ea:	3028      	adds	r0, #40	; 0x28
   1c8ec:	f7ff fe51 	bl	1c592 <sys_slist_find_and_remove.isra.0>
		k_sem_give(&chan->tx_sem);
   1c8f0:	f504 7590 	add.w	r5, r4, #288	; 0x120
   1c8f4:	4628      	mov	r0, r5
   1c8f6:	f7fc fce1 	bl	192bc <z_impl_k_sem_give>
   1c8fa:	4628      	mov	r0, r5
   1c8fc:	f7fc fcde 	bl	192bc <z_impl_k_sem_give>
   1c900:	4628      	mov	r0, r5
   1c902:	f7fc fcdb 	bl	192bc <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1c906:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   1c90a:	2200      	movs	r2, #0
   1c90c:	2300      	movs	r3, #0
   1c90e:	4628      	mov	r0, r5
   1c910:	f7f8 fdb4 	bl	1547c <net_buf_get>
   1c914:	4602      	mov	r2, r0
   1c916:	b950      	cbnz	r0, 1c92e <att_chan_detach+0x4e>
	if (chan->req) {
   1c918:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1c91c:	b123      	cbz	r3, 1c928 <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1c91e:	4601      	mov	r1, r0
   1c920:	230e      	movs	r3, #14
   1c922:	4620      	mov	r0, r4
   1c924:	f7f6 f9ea 	bl	12cfc <att_handle_rsp>
	chan->att = NULL;
   1c928:	2300      	movs	r3, #0
   1c92a:	6023      	str	r3, [r4, #0]
}
   1c92c:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1c92e:	f7f8 fe27 	bl	15580 <net_buf_unref>
   1c932:	e7ea      	b.n	1c90a <att_chan_detach+0x2a>

0001c934 <bt_att_disconnected>:
{
   1c934:	b538      	push	{r3, r4, r5, lr}
   1c936:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1c938:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1c93c:	f7ff ffd0 	bl	1c8e0 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1c940:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c942:	b93b      	cbnz	r3, 1c954 <bt_att_disconnected+0x20>
	att_reset(att);
   1c944:	4628      	mov	r0, r5
   1c946:	f7f6 fa37 	bl	12db8 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1c94a:	6820      	ldr	r0, [r4, #0]
}
   1c94c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1c950:	f7f8 bbc2 	b.w	150d8 <bt_gatt_disconnected>
}
   1c954:	bd38      	pop	{r3, r4, r5, pc}

0001c956 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1c956:	6010      	str	r0, [r2, #0]
}
   1c958:	2000      	movs	r0, #0
   1c95a:	4770      	bx	lr

0001c95c <gatt_ccc_changed>:
{
   1c95c:	460b      	mov	r3, r1
   1c95e:	460a      	mov	r2, r1
   1c960:	b430      	push	{r4, r5}
   1c962:	f101 0464 	add.w	r4, r1, #100	; 0x64
	uint16_t value = 0x0000;
   1c966:	2100      	movs	r1, #0
		if (ccc->cfg[i].value > value) {
   1c968:	8915      	ldrh	r5, [r2, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1c96a:	320a      	adds	r2, #10
   1c96c:	42a9      	cmp	r1, r5
   1c96e:	bf38      	it	cc
   1c970:	4629      	movcc	r1, r5
   1c972:	42a2      	cmp	r2, r4
   1c974:	d1f8      	bne.n	1c968 <gatt_ccc_changed+0xc>
	if (value != ccc->value) {
   1c976:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   1c97a:	428a      	cmp	r2, r1
   1c97c:	d005      	beq.n	1c98a <gatt_ccc_changed+0x2e>
		ccc->value = value;
   1c97e:	f8a3 1064 	strh.w	r1, [r3, #100]	; 0x64
		if (ccc->cfg_changed) {
   1c982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1c984:	b10b      	cbz	r3, 1c98a <gatt_ccc_changed+0x2e>
}
   1c986:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   1c988:	4718      	bx	r3
}
   1c98a:	bc30      	pop	{r4, r5}
   1c98c:	4770      	bx	lr

0001c98e <gatt_indicate_rsp>:
{
   1c98e:	b510      	push	{r4, lr}
   1c990:	9c02      	ldr	r4, [sp, #8]
   1c992:	460a      	mov	r2, r1
	params->_ref--;
   1c994:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
   1c996:	4621      	mov	r1, r4
	params->_ref--;
   1c998:	3b01      	subs	r3, #1
   1c99a:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1c99c:	68a3      	ldr	r3, [r4, #8]
   1c99e:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1c9a0:	68e3      	ldr	r3, [r4, #12]
   1c9a2:	b12b      	cbz	r3, 1c9b0 <gatt_indicate_rsp+0x22>
   1c9a4:	7da2      	ldrb	r2, [r4, #22]
   1c9a6:	b91a      	cbnz	r2, 1c9b0 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1c9a8:	4620      	mov	r0, r4
}
   1c9aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1c9ae:	4718      	bx	r3
}
   1c9b0:	bd10      	pop	{r4, pc}

0001c9b2 <match_uuid>:
	data->attr = attr;
   1c9b2:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1c9b4:	8091      	strh	r1, [r2, #4]
}
   1c9b6:	2000      	movs	r0, #0
   1c9b8:	4770      	bx	lr

0001c9ba <ccc_set_cb>:
}
   1c9ba:	2000      	movs	r0, #0
   1c9bc:	4770      	bx	lr

0001c9be <gen_hash_m>:
{
   1c9be:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1c9c0:	6807      	ldr	r7, [r0, #0]
{
   1c9c2:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1c9c4:	783d      	ldrb	r5, [r7, #0]
{
   1c9c6:	4614      	mov	r4, r2
   1c9c8:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1c9ca:	b10d      	cbz	r5, 1c9d0 <gen_hash_m+0x12>
	switch (u16->val) {
   1c9cc:	2501      	movs	r5, #1
   1c9ce:	e014      	b.n	1c9fa <gen_hash_m+0x3c>
   1c9d0:	887b      	ldrh	r3, [r7, #2]
   1c9d2:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1c9d6:	d004      	beq.n	1c9e2 <gen_hash_m+0x24>
   1c9d8:	d812      	bhi.n	1ca00 <gen_hash_m+0x42>
   1c9da:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1c9de:	2b03      	cmp	r3, #3
   1c9e0:	d8f4      	bhi.n	1c9cc <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1c9e2:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1c9e6:	2202      	movs	r2, #2
   1c9e8:	4620      	mov	r0, r4
   1c9ea:	f10d 010e 	add.w	r1, sp, #14
   1c9ee:	f7fe fcd5 	bl	1b39c <tc_cmac_update>
   1c9f2:	b9e0      	cbnz	r0, 1ca2e <gen_hash_m+0x70>
			state->err = -EINVAL;
   1c9f4:	f06f 0315 	mvn.w	r3, #21
   1c9f8:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1c9fa:	4628      	mov	r0, r5
   1c9fc:	b009      	add	sp, #36	; 0x24
   1c9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1ca00:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1ca04:	33ff      	adds	r3, #255	; 0xff
   1ca06:	b29b      	uxth	r3, r3
   1ca08:	2b04      	cmp	r3, #4
   1ca0a:	d8df      	bhi.n	1c9cc <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1ca0c:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ca10:	2202      	movs	r2, #2
   1ca12:	4620      	mov	r0, r4
   1ca14:	f10d 010e 	add.w	r1, sp, #14
   1ca18:	f7fe fcc0 	bl	1b39c <tc_cmac_update>
   1ca1c:	2800      	cmp	r0, #0
   1ca1e:	d0e9      	beq.n	1c9f4 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1ca20:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ca22:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1ca24:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ca28:	f10d 010e 	add.w	r1, sp, #14
   1ca2c:	e017      	b.n	1ca5e <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1ca2e:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ca30:	2202      	movs	r2, #2
   1ca32:	4620      	mov	r0, r4
   1ca34:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1ca38:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ca3c:	f7fe fcae 	bl	1b39c <tc_cmac_update>
   1ca40:	2800      	cmp	r0, #0
   1ca42:	d0d7      	beq.n	1c9f4 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1ca44:	2000      	movs	r0, #0
   1ca46:	2310      	movs	r3, #16
   1ca48:	4631      	mov	r1, r6
   1ca4a:	eb0d 0203 	add.w	r2, sp, r3
   1ca4e:	6877      	ldr	r7, [r6, #4]
   1ca50:	9000      	str	r0, [sp, #0]
   1ca52:	47b8      	blx	r7
		if (len < 0) {
   1ca54:	1e02      	subs	r2, r0, #0
   1ca56:	da01      	bge.n	1ca5c <gen_hash_m+0x9e>
			state->err = len;
   1ca58:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1ca5a:	e7ce      	b.n	1c9fa <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1ca5c:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ca5e:	4620      	mov	r0, r4
   1ca60:	f7fe fc9c 	bl	1b39c <tc_cmac_update>
   1ca64:	2800      	cmp	r0, #0
   1ca66:	d1b1      	bne.n	1c9cc <gen_hash_m+0xe>
   1ca68:	e7c4      	b.n	1c9f4 <gen_hash_m+0x36>

0001ca6a <bt_addr_le_cmp>:
   1ca6a:	2207      	movs	r2, #7
   1ca6c:	f7ff b831 	b.w	1bad2 <memcmp>

0001ca70 <find_ccc_cfg>:
{
   1ca70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ca72:	4606      	mov	r6, r0
   1ca74:	1c4c      	adds	r4, r1, #1
   1ca76:	f101 0565 	add.w	r5, r1, #101	; 0x65
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1ca7a:	1e67      	subs	r7, r4, #1
		if (conn) {
   1ca7c:	b14e      	cbz	r6, 1ca92 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1ca7e:	4622      	mov	r2, r4
   1ca80:	4630      	mov	r0, r6
   1ca82:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1ca86:	f7ff fa90 	bl	1bfaa <bt_conn_is_peer_addr_le>
   1ca8a:	b158      	cbz	r0, 1caa4 <find_ccc_cfg+0x34>
}
   1ca8c:	4638      	mov	r0, r7
   1ca8e:	b003      	add	sp, #12
   1ca90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ca92:	4669      	mov	r1, sp
   1ca94:	4620      	mov	r0, r4
   1ca96:	9600      	str	r6, [sp, #0]
   1ca98:	f8cd 6003 	str.w	r6, [sp, #3]
   1ca9c:	f7ff ffe5 	bl	1ca6a <bt_addr_le_cmp>
   1caa0:	2800      	cmp	r0, #0
   1caa2:	d0f3      	beq.n	1ca8c <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1caa4:	340a      	adds	r4, #10
   1caa6:	42ac      	cmp	r4, r5
   1caa8:	d1e7      	bne.n	1ca7a <find_ccc_cfg+0xa>
	return NULL;
   1caaa:	2700      	movs	r7, #0
   1caac:	e7ee      	b.n	1ca8c <find_ccc_cfg+0x1c>

0001caae <ccc_find_cfg>:
{
   1caae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cab2:	4604      	mov	r4, r0
   1cab4:	460f      	mov	r7, r1
   1cab6:	4690      	mov	r8, r2
   1cab8:	2500      	movs	r5, #0
   1caba:	1c46      	adds	r6, r0, #1
		if (id == ccc->cfg[i].id &&
   1cabc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1cac0:	4543      	cmp	r3, r8
   1cac2:	d107      	bne.n	1cad4 <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1cac4:	4639      	mov	r1, r7
   1cac6:	4630      	mov	r0, r6
   1cac8:	f7ff ffcf 	bl	1ca6a <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1cacc:	b910      	cbnz	r0, 1cad4 <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   1cace:	1960      	adds	r0, r4, r5
}
   1cad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1cad4:	350a      	adds	r5, #10
   1cad6:	2d64      	cmp	r5, #100	; 0x64
   1cad8:	f106 060a 	add.w	r6, r6, #10
   1cadc:	d1ee      	bne.n	1cabc <ccc_find_cfg+0xe>
	return NULL;
   1cade:	2000      	movs	r0, #0
   1cae0:	e7f6      	b.n	1cad0 <ccc_find_cfg+0x22>

0001cae2 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1cae2:	2207      	movs	r2, #7
   1cae4:	f7ff b806 	b.w	1baf4 <memcpy>

0001cae8 <clear_ccc_cfg>:
{
   1cae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1caea:	2500      	movs	r5, #0
{
   1caec:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1caee:	4669      	mov	r1, sp
   1caf0:	3001      	adds	r0, #1
   1caf2:	9500      	str	r5, [sp, #0]
   1caf4:	f8cd 5003 	str.w	r5, [sp, #3]
   1caf8:	f7ff fff3 	bl	1cae2 <bt_addr_le_copy>
	cfg->id = 0U;
   1cafc:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1cafe:	8125      	strh	r5, [r4, #8]
}
   1cb00:	b003      	add	sp, #12
   1cb02:	bd30      	pop	{r4, r5, pc}

0001cb04 <atomic_or>:
{
   1cb04:	4603      	mov	r3, r0
}
   1cb06:	e8d3 0fef 	ldaex	r0, [r3]
   1cb0a:	ea40 0201 	orr.w	r2, r0, r1
   1cb0e:	e8c3 2fec 	stlex	ip, r2, [r3]
   1cb12:	f1bc 0f00 	cmp.w	ip, #0
   1cb16:	d1f6      	bne.n	1cb06 <atomic_or+0x2>
   1cb18:	4770      	bx	lr

0001cb1a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cb1a:	e8d0 0faf 	lda	r0, [r0]
}
   1cb1e:	4770      	bx	lr

0001cb20 <gatt_read_mult_rsp>:
{
   1cb20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cb22:	9d08      	ldr	r5, [sp, #32]
   1cb24:	4606      	mov	r6, r0
	if (err || !length) {
   1cb26:	460c      	mov	r4, r1
	params->func(conn, 0, params, pdu, length);
   1cb28:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   1cb2a:	b901      	cbnz	r1, 1cb2e <gatt_read_mult_rsp+0xe>
   1cb2c:	b94b      	cbnz	r3, 1cb42 <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   1cb2e:	2300      	movs	r3, #0
   1cb30:	462a      	mov	r2, r5
   1cb32:	4621      	mov	r1, r4
   1cb34:	9308      	str	r3, [sp, #32]
	params->func(conn, 0, params, NULL, 0);
   1cb36:	4630      	mov	r0, r6
   1cb38:	46bc      	mov	ip, r7
}
   1cb3a:	b003      	add	sp, #12
   1cb3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   1cb40:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   1cb42:	9300      	str	r3, [sp, #0]
   1cb44:	4613      	mov	r3, r2
   1cb46:	462a      	mov	r2, r5
   1cb48:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   1cb4a:	9408      	str	r4, [sp, #32]
   1cb4c:	4623      	mov	r3, r4
   1cb4e:	462a      	mov	r2, r5
   1cb50:	4621      	mov	r1, r4
   1cb52:	682f      	ldr	r7, [r5, #0]
   1cb54:	e7ef      	b.n	1cb36 <gatt_read_mult_rsp+0x16>

0001cb56 <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1cb56:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   1cb58:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1cb5a:	3001      	adds	r0, #1
   1cb5c:	4669      	mov	r1, sp
   1cb5e:	9300      	str	r3, [sp, #0]
   1cb60:	f8cd 3003 	str.w	r3, [sp, #3]
   1cb64:	f7ff ffbd 	bl	1cae2 <bt_addr_le_copy>
}
   1cb68:	b003      	add	sp, #12
   1cb6a:	f85d fb04 	ldr.w	pc, [sp], #4

0001cb6e <clear_cf_cfg>:
{
   1cb6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cb70:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1cb72:	2500      	movs	r5, #0
   1cb74:	4669      	mov	r1, sp
   1cb76:	3001      	adds	r0, #1
   1cb78:	9500      	str	r5, [sp, #0]
   1cb7a:	f8cd 5003 	str.w	r5, [sp, #3]
   1cb7e:	f7ff ffb0 	bl	1cae2 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1cb82:	f104 0008 	add.w	r0, r4, #8
   1cb86:	2201      	movs	r2, #1
   1cb88:	4629      	mov	r1, r5
   1cb8a:	f7fe ffde 	bl	1bb4a <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1cb8e:	340c      	adds	r4, #12
   1cb90:	e8d4 3fef 	ldaex	r3, [r4]
   1cb94:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1cb98:	2a00      	cmp	r2, #0
   1cb9a:	d1f9      	bne.n	1cb90 <clear_cf_cfg+0x22>
}
   1cb9c:	b003      	add	sp, #12
   1cb9e:	bd30      	pop	{r4, r5, pc}

0001cba0 <gatt_sub_remove>:
{
   1cba0:	b570      	push	{r4, r5, r6, lr}
   1cba2:	460c      	mov	r4, r1
	if (params) {
   1cba4:	4619      	mov	r1, r3
   1cba6:	b16b      	cbz	r3, 1cbc4 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1cba8:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   1cbac:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   1cbae:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   1cbb0:	b97a      	cbnz	r2, 1cbd2 <gatt_sub_remove+0x32>
   1cbb2:	42ae      	cmp	r6, r5
	list->head = node;
   1cbb4:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1cbb6:	d100      	bne.n	1cbba <gatt_sub_remove+0x1a>
	list->tail = node;
   1cbb8:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1cbba:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1cbbc:	680d      	ldr	r5, [r1, #0]
   1cbbe:	461a      	mov	r2, r3
   1cbc0:	614b      	str	r3, [r1, #20]
   1cbc2:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   1cbc4:	68a3      	ldr	r3, [r4, #8]
   1cbc6:	b94b      	cbnz	r3, 1cbdc <gatt_sub_remove+0x3c>
   1cbc8:	4620      	mov	r0, r4
}
   1cbca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cbce:	f7ff bfc2 	b.w	1cb56 <gatt_sub_remove.part.0>
Z_GENLIST_REMOVE(slist, snode)
   1cbd2:	42ae      	cmp	r6, r5
	parent->next = child;
   1cbd4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1cbd6:	bf08      	it	eq
   1cbd8:	60e2      	streq	r2, [r4, #12]
}
   1cbda:	e7ee      	b.n	1cbba <gatt_sub_remove+0x1a>
   1cbdc:	bd70      	pop	{r4, r5, r6, pc}

0001cbde <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1cbde:	2a02      	cmp	r2, #2
{
   1cbe0:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1cbe2:	d108      	bne.n	1cbf6 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1cbe4:	2300      	movs	r3, #0
   1cbe6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1cbea:	461a      	mov	r2, r3
   1cbec:	7a00      	ldrb	r0, [r0, #8]
   1cbee:	f7f6 fb7d 	bl	132ec <sc_save>
}
   1cbf2:	2002      	movs	r0, #2
   1cbf4:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1cbf6:	f7f6 fe2d 	bl	13854 <sc_clear>
   1cbfa:	e7fa      	b.n	1cbf2 <sc_ccc_cfg_write+0x14>

0001cbfc <gatt_write_ccc_rsp>:
{
   1cbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cc00:	4606      	mov	r6, r0
   1cc02:	460d      	mov	r5, r1
   1cc04:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cc06:	f104 0310 	add.w	r3, r4, #16
   1cc0a:	e8d3 2fef 	ldaex	r2, [r3]
   1cc0e:	f022 0204 	bic.w	r2, r2, #4
   1cc12:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1cc16:	2900      	cmp	r1, #0
   1cc18:	d1f7      	bne.n	1cc0a <gatt_write_ccc_rsp+0xe>
	if (err) {
   1cc1a:	b1dd      	cbz	r5, 1cc54 <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   1cc1c:	f7f6 fa4e 	bl	130bc <gatt_sub_find>
		if (!sub) {
   1cc20:	4601      	mov	r1, r0
   1cc22:	b300      	cbz	r0, 1cc66 <gatt_write_ccc_rsp+0x6a>
	return list->head;
   1cc24:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cc26:	b143      	cbz	r3, 1cc3a <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1cc28:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1cc2a:	f104 0014 	add.w	r0, r4, #20
   1cc2e:	4283      	cmp	r3, r0
   1cc30:	d10b      	bne.n	1cc4a <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   1cc32:	4623      	mov	r3, r4
   1cc34:	4630      	mov	r0, r6
   1cc36:	f7ff ffb3 	bl	1cba0 <gatt_sub_remove>
	if (params->write) {
   1cc3a:	6863      	ldr	r3, [r4, #4]
   1cc3c:	b19b      	cbz	r3, 1cc66 <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   1cc3e:	4629      	mov	r1, r5
   1cc40:	4630      	mov	r0, r6
}
   1cc42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1cc46:	2200      	movs	r2, #0
   1cc48:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cc4a:	2a00      	cmp	r2, #0
   1cc4c:	d0f5      	beq.n	1cc3a <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1cc4e:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cc50:	6812      	ldr	r2, [r2, #0]
   1cc52:	e7ec      	b.n	1cc2e <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   1cc54:	89a3      	ldrh	r3, [r4, #12]
   1cc56:	2b00      	cmp	r3, #0
   1cc58:	d1ef      	bne.n	1cc3a <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   1cc5a:	462b      	mov	r3, r5
   1cc5c:	462a      	mov	r2, r5
   1cc5e:	4621      	mov	r1, r4
   1cc60:	6827      	ldr	r7, [r4, #0]
   1cc62:	47b8      	blx	r7
   1cc64:	e7e9      	b.n	1cc3a <gatt_write_ccc_rsp+0x3e>
}
   1cc66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cc6a <read_ppcp>:
{
   1cc6a:	b513      	push	{r0, r1, r4, lr}
   1cc6c:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1cc6e:	2218      	movs	r2, #24
   1cc70:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1cc74:	2228      	movs	r2, #40	; 0x28
   1cc76:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1cc7a:	2200      	movs	r2, #0
   1cc7c:	f8ad 2004 	strh.w	r2, [sp, #4]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1cc80:	222a      	movs	r2, #42	; 0x2a
{
   1cc82:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1cc86:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1cc8a:	2908      	cmp	r1, #8
   1cc8c:	d80b      	bhi.n	1cca6 <read_ppcp+0x3c>
	len = MIN(buf_len, value_len - offset);
   1cc8e:	f1c1 0408 	rsb	r4, r1, #8
   1cc92:	429c      	cmp	r4, r3
   1cc94:	bfa8      	it	ge
   1cc96:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1cc98:	4469      	add	r1, sp
   1cc9a:	4622      	mov	r2, r4
   1cc9c:	f7fe ff2a 	bl	1baf4 <memcpy>
}
   1cca0:	4620      	mov	r0, r4
   1cca2:	b002      	add	sp, #8
   1cca4:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cca6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1ccaa:	e7f9      	b.n	1cca0 <read_ppcp+0x36>

0001ccac <read_appearance>:
{
   1ccac:	b513      	push	{r0, r1, r4, lr}
   1ccae:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1ccb0:	2200      	movs	r2, #0
{
   1ccb2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1ccb6:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1ccba:	2902      	cmp	r1, #2
   1ccbc:	d80d      	bhi.n	1ccda <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   1ccbe:	f1c1 0402 	rsb	r4, r1, #2
   1ccc2:	429c      	cmp	r4, r3
   1ccc4:	bfa8      	it	ge
   1ccc6:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1ccc8:	f10d 0306 	add.w	r3, sp, #6
   1cccc:	4622      	mov	r2, r4
   1ccce:	4419      	add	r1, r3
   1ccd0:	f7fe ff10 	bl	1baf4 <memcpy>
}
   1ccd4:	4620      	mov	r0, r4
   1ccd6:	b002      	add	sp, #8
   1ccd8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ccda:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1ccde:	e7f9      	b.n	1ccd4 <read_appearance+0x28>

0001cce0 <read_name>:
{
   1cce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cce4:	4698      	mov	r8, r3
   1cce6:	4615      	mov	r5, r2
   1cce8:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1ccec:	f7f3 fb70 	bl	103d0 <bt_get_name>
   1ccf0:	4607      	mov	r7, r0
				 strlen(name));
   1ccf2:	f7fe fec1 	bl	1ba78 <strlen>
	if (offset > value_len) {
   1ccf6:	b283      	uxth	r3, r0
   1ccf8:	42b3      	cmp	r3, r6
   1ccfa:	d30c      	bcc.n	1cd16 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1ccfc:	1b9c      	subs	r4, r3, r6
   1ccfe:	4544      	cmp	r4, r8
   1cd00:	bfa8      	it	ge
   1cd02:	4644      	movge	r4, r8
   1cd04:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1cd06:	4622      	mov	r2, r4
   1cd08:	4628      	mov	r0, r5
   1cd0a:	19b9      	adds	r1, r7, r6
   1cd0c:	f7fe fef2 	bl	1baf4 <memcpy>
}
   1cd10:	4620      	mov	r0, r4
   1cd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cd16:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1cd1a:	e7f9      	b.n	1cd10 <read_name+0x30>

0001cd1c <cf_read>:
{
   1cd1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cd1e:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1cd20:	2300      	movs	r3, #0
{
   1cd22:	4615      	mov	r5, r2
   1cd24:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1cd28:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1cd2c:	f7f6 f988 	bl	13040 <find_cf_cfg>
	if (cfg) {
   1cd30:	b128      	cbz	r0, 1cd3e <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1cd32:	f100 0108 	add.w	r1, r0, #8
   1cd36:	2201      	movs	r2, #1
   1cd38:	a801      	add	r0, sp, #4
   1cd3a:	f7fe fedb 	bl	1baf4 <memcpy>
	if (offset > value_len) {
   1cd3e:	2e01      	cmp	r6, #1
   1cd40:	d80d      	bhi.n	1cd5e <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1cd42:	f1c6 0401 	rsb	r4, r6, #1
   1cd46:	42bc      	cmp	r4, r7
   1cd48:	bfa8      	it	ge
   1cd4a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1cd4c:	ab01      	add	r3, sp, #4
   1cd4e:	4622      	mov	r2, r4
   1cd50:	4628      	mov	r0, r5
   1cd52:	1999      	adds	r1, r3, r6
   1cd54:	f7fe fece 	bl	1baf4 <memcpy>
}
   1cd58:	4620      	mov	r0, r4
   1cd5a:	b003      	add	sp, #12
   1cd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cd5e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1cd62:	e7f9      	b.n	1cd58 <cf_read+0x3c>

0001cd64 <bt_gatt_attr_read_service>:
{
   1cd64:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1cd66:	68c9      	ldr	r1, [r1, #12]
{
   1cd68:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1cd6a:	780b      	ldrb	r3, [r1, #0]
{
   1cd6c:	4610      	mov	r0, r2
   1cd6e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1cd72:	b993      	cbnz	r3, 1cd9a <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1cd74:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   1cd76:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1cd78:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1cd7c:	d819      	bhi.n	1cdb2 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1cd7e:	f1c5 0202 	rsb	r2, r5, #2
   1cd82:	4294      	cmp	r4, r2
   1cd84:	bfa8      	it	ge
   1cd86:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1cd88:	4622      	mov	r2, r4
   1cd8a:	f10d 0306 	add.w	r3, sp, #6
   1cd8e:	1959      	adds	r1, r3, r5
   1cd90:	f7fe feb0 	bl	1baf4 <memcpy>
}
   1cd94:	4620      	mov	r0, r4
   1cd96:	b003      	add	sp, #12
   1cd98:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1cd9a:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1cd9c:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1cda0:	d807      	bhi.n	1cdb2 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1cda2:	f1c5 0210 	rsb	r2, r5, #16
   1cda6:	4294      	cmp	r4, r2
   1cda8:	bfa8      	it	ge
   1cdaa:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1cdac:	4429      	add	r1, r5
   1cdae:	4622      	mov	r2, r4
   1cdb0:	e7ee      	b.n	1cd90 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cdb2:	f06f 0406 	mvn.w	r4, #6
   1cdb6:	e7ed      	b.n	1cd94 <bt_gatt_attr_read_service+0x30>

0001cdb8 <bt_gatt_attr_read_ccc>:
{
   1cdb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1cdba:	68c9      	ldr	r1, [r1, #12]
{
   1cdbc:	4615      	mov	r5, r2
   1cdbe:	461f      	mov	r7, r3
   1cdc0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1cdc4:	f7ff fe54 	bl	1ca70 <find_ccc_cfg>
	if (cfg) {
   1cdc8:	b100      	cbz	r0, 1cdcc <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1cdca:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1cdcc:	2e02      	cmp	r6, #2
   1cdce:	f8ad 0006 	strh.w	r0, [sp, #6]
   1cdd2:	d80e      	bhi.n	1cdf2 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1cdd4:	f1c6 0402 	rsb	r4, r6, #2
   1cdd8:	42bc      	cmp	r4, r7
   1cdda:	bfa8      	it	ge
   1cddc:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1cdde:	f10d 0306 	add.w	r3, sp, #6
   1cde2:	4622      	mov	r2, r4
   1cde4:	4628      	mov	r0, r5
   1cde6:	1999      	adds	r1, r3, r6
   1cde8:	f7fe fe84 	bl	1baf4 <memcpy>
}
   1cdec:	4620      	mov	r0, r4
   1cdee:	b003      	add	sp, #12
   1cdf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cdf2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1cdf6:	e7f9      	b.n	1cdec <bt_gatt_attr_read_ccc+0x34>

0001cdf8 <sc_restore_rsp>:
{
   1cdf8:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1cdfa:	f7f6 f921 	bl	13040 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1cdfe:	b140      	cbz	r0, 1ce12 <sc_restore_rsp+0x1a>
   1ce00:	7a03      	ldrb	r3, [r0, #8]
   1ce02:	07db      	lsls	r3, r3, #31
   1ce04:	d505      	bpl.n	1ce12 <sc_restore_rsp+0x1a>
}
   1ce06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ce0a:	2101      	movs	r1, #1
   1ce0c:	300c      	adds	r0, #12
   1ce0e:	f7ff be79 	b.w	1cb04 <atomic_or>
   1ce12:	bd08      	pop	{r3, pc}

0001ce14 <bt_gatt_attr_read>:
{
   1ce14:	b538      	push	{r3, r4, r5, lr}
   1ce16:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1ce1a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1ce1e:	4610      	mov	r0, r2
	if (offset > value_len) {
   1ce20:	42a9      	cmp	r1, r5
   1ce22:	d80b      	bhi.n	1ce3c <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1ce24:	1a6d      	subs	r5, r5, r1
   1ce26:	429d      	cmp	r5, r3
   1ce28:	bfa8      	it	ge
   1ce2a:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1ce2c:	9b05      	ldr	r3, [sp, #20]
   1ce2e:	b2ad      	uxth	r5, r5
   1ce30:	462a      	mov	r2, r5
   1ce32:	4419      	add	r1, r3
   1ce34:	f7fe fe5e 	bl	1baf4 <memcpy>
}
   1ce38:	4628      	mov	r0, r5
   1ce3a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ce3c:	f06f 0506 	mvn.w	r5, #6
   1ce40:	e7fa      	b.n	1ce38 <bt_gatt_attr_read+0x24>

0001ce42 <bt_gatt_attr_value_handle>:
{
   1ce42:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1ce44:	4604      	mov	r4, r0
   1ce46:	b910      	cbnz	r0, 1ce4e <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1ce48:	2000      	movs	r0, #0
}
   1ce4a:	b002      	add	sp, #8
   1ce4c:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1ce4e:	2300      	movs	r3, #0
   1ce50:	f88d 3004 	strb.w	r3, [sp, #4]
   1ce54:	f642 0303 	movw	r3, #10243	; 0x2803
   1ce58:	6800      	ldr	r0, [r0, #0]
   1ce5a:	a901      	add	r1, sp, #4
   1ce5c:	f8ad 3006 	strh.w	r3, [sp, #6]
   1ce60:	f7fe febd 	bl	1bbde <bt_uuid_cmp>
   1ce64:	2800      	cmp	r0, #0
   1ce66:	d1ef      	bne.n	1ce48 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1ce68:	68e3      	ldr	r3, [r4, #12]
   1ce6a:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1ce6c:	2800      	cmp	r0, #0
   1ce6e:	d1ec      	bne.n	1ce4a <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1ce70:	4620      	mov	r0, r4
   1ce72:	f7f6 fe3d 	bl	13af0 <bt_gatt_attr_get_handle>
   1ce76:	3001      	adds	r0, #1
   1ce78:	b280      	uxth	r0, r0
	return handle;
   1ce7a:	e7e6      	b.n	1ce4a <bt_gatt_attr_value_handle+0x8>

0001ce7c <bt_gatt_attr_read_chrc>:
{
   1ce7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1ce7e:	68cf      	ldr	r7, [r1, #12]
{
   1ce80:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1ce82:	79bb      	ldrb	r3, [r7, #6]
{
   1ce84:	b087      	sub	sp, #28
   1ce86:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1ce88:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1ce8c:	4615      	mov	r5, r2
   1ce8e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1ce92:	f7ff ffd6 	bl	1ce42 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1ce96:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1ce98:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1ce9c:	780b      	ldrb	r3, [r1, #0]
   1ce9e:	b99b      	cbnz	r3, 1cec8 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1cea0:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   1cea2:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1cea4:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1cea8:	42b1      	cmp	r1, r6
   1ceaa:	d315      	bcc.n	1ced8 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1ceac:	1b89      	subs	r1, r1, r6
   1ceae:	42a1      	cmp	r1, r4
   1ceb0:	bfa8      	it	ge
   1ceb2:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1ceb4:	ab01      	add	r3, sp, #4
   1ceb6:	b28c      	uxth	r4, r1
   1ceb8:	4622      	mov	r2, r4
   1ceba:	4628      	mov	r0, r5
   1cebc:	1999      	adds	r1, r3, r6
   1cebe:	f7fe fe19 	bl	1baf4 <memcpy>
}
   1cec2:	4620      	mov	r0, r4
   1cec4:	b007      	add	sp, #28
   1cec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1cec8:	3101      	adds	r1, #1
   1ceca:	2210      	movs	r2, #16
   1cecc:	f10d 0007 	add.w	r0, sp, #7
   1ced0:	f7fe fe10 	bl	1baf4 <memcpy>
		value_len += 16U;
   1ced4:	2113      	movs	r1, #19
   1ced6:	e7e7      	b.n	1cea8 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ced8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1cedc:	e7f1      	b.n	1cec2 <bt_gatt_attr_read_chrc+0x46>

0001cede <bt_gatt_foreach_attr>:
{
   1cede:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1cee0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1cee4:	2300      	movs	r3, #0
   1cee6:	461a      	mov	r2, r3
   1cee8:	9300      	str	r3, [sp, #0]
   1ceea:	f7f6 fe45 	bl	13b78 <bt_gatt_foreach_attr_type>
}
   1ceee:	b005      	add	sp, #20
   1cef0:	f85d fb04 	ldr.w	pc, [sp], #4

0001cef4 <db_hash_process>:
	db_hash_gen(true);
   1cef4:	2001      	movs	r0, #1
   1cef6:	f7f6 beab 	b.w	13c50 <db_hash_gen>

0001cefa <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1cefa:	07d3      	lsls	r3, r2, #31
{
   1cefc:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1cefe:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1cf00:	d504      	bpl.n	1cf0c <bt_gatt_check_perm+0x12>
   1cf02:	f014 0f15 	tst.w	r4, #21
   1cf06:	d017      	beq.n	1cf38 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1cf08:	684b      	ldr	r3, [r1, #4]
   1cf0a:	b1ab      	cbz	r3, 1cf38 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1cf0c:	0793      	lsls	r3, r2, #30
   1cf0e:	d504      	bpl.n	1cf1a <bt_gatt_check_perm+0x20>
   1cf10:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1cf14:	d012      	beq.n	1cf3c <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1cf16:	688b      	ldr	r3, [r1, #8]
   1cf18:	b183      	cbz	r3, 1cf3c <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1cf1a:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1cf1c:	f014 0f30 	tst.w	r4, #48	; 0x30
   1cf20:	d104      	bne.n	1cf2c <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1cf22:	f014 000c 	ands.w	r0, r4, #12
   1cf26:	bf18      	it	ne
   1cf28:	200f      	movne	r0, #15
}
   1cf2a:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1cf2c:	f7ff f832 	bl	1bf94 <bt_conn_get_security>
   1cf30:	2802      	cmp	r0, #2
   1cf32:	d8f6      	bhi.n	1cf22 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1cf34:	2005      	movs	r0, #5
   1cf36:	e7f8      	b.n	1cf2a <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1cf38:	2002      	movs	r0, #2
   1cf3a:	e7f6      	b.n	1cf2a <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1cf3c:	2003      	movs	r0, #3
   1cf3e:	e7f4      	b.n	1cf2a <bt_gatt_check_perm+0x30>

0001cf40 <gatt_discover_next>:
{
   1cf40:	b570      	push	{r4, r5, r6, lr}
   1cf42:	4605      	mov	r5, r0
   1cf44:	4614      	mov	r4, r2
	if (!last_handle)
   1cf46:	b929      	cbnz	r1, 1cf54 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   1cf48:	4621      	mov	r1, r4
   1cf4a:	4628      	mov	r0, r5
   1cf4c:	f7f7 f9d8 	bl	14300 <bt_gatt_discover>
   1cf50:	b928      	cbnz	r0, 1cf5e <gatt_discover_next+0x1e>
}
   1cf52:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   1cf54:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1cf58:	4291      	cmp	r1, r2
   1cf5a:	d107      	bne.n	1cf6c <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   1cf5c:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   1cf5e:	4622      	mov	r2, r4
   1cf60:	4628      	mov	r0, r5
   1cf62:	6863      	ldr	r3, [r4, #4]
   1cf64:	2100      	movs	r1, #0
}
   1cf66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   1cf6a:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   1cf6c:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   1cf6e:	1c4b      	adds	r3, r1, #1
   1cf70:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   1cf72:	429a      	cmp	r2, r3
		params->start_handle++;
   1cf74:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   1cf76:	d2e7      	bcs.n	1cf48 <gatt_discover_next+0x8>
   1cf78:	e7f1      	b.n	1cf5e <gatt_discover_next+0x1e>

0001cf7a <gatt_find_type_rsp>:
{
   1cf7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cf7e:	b088      	sub	sp, #32
   1cf80:	4607      	mov	r7, r0
   1cf82:	4614      	mov	r4, r2
   1cf84:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   1cf88:	b911      	cbnz	r1, 1cf90 <gatt_find_type_rsp+0x16>
   1cf8a:	f013 0803 	ands.w	r8, r3, #3
   1cf8e:	d008      	beq.n	1cfa2 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   1cf90:	464a      	mov	r2, r9
   1cf92:	2100      	movs	r1, #0
   1cf94:	4638      	mov	r0, r7
   1cf96:	f8d9 3004 	ldr.w	r3, [r9, #4]
}
   1cf9a:	b008      	add	sp, #32
   1cf9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   1cfa0:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1cfa2:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1cfa4:	f642 0a01 	movw	sl, #10241	; 0x2801
   1cfa8:	f3c3 0387 	ubfx	r3, r3, #2, #8
   1cfac:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   1cfb0:	42ac      	cmp	r4, r5
   1cfb2:	d107      	bne.n	1cfc4 <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   1cfb4:	464a      	mov	r2, r9
   1cfb6:	4641      	mov	r1, r8
   1cfb8:	4638      	mov	r0, r7
}
   1cfba:	b008      	add	sp, #32
   1cfbc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   1cfc0:	f7ff bfbe 	b.w	1cf40 <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1cfc4:	f899 1010 	ldrb.w	r1, [r9, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1cfc8:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1cfca:	2900      	cmp	r1, #0
   1cfcc:	bf0c      	ite	eq
   1cfce:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   1cfd2:	4651      	movne	r1, sl
		value.end_handle = end_handle;
   1cfd4:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1cfd8:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   1cfdc:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   1cfe0:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   1cfe2:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1cfe4:	ab01      	add	r3, sp, #4
   1cfe6:	f8ad 1002 	strh.w	r1, [sp, #2]
   1cfea:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   1cfec:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1cff0:	4638      	mov	r0, r7
   1cff2:	464a      	mov	r2, r9
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1cff4:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1cff8:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1cffc:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1d000:	f8cd d00c 	str.w	sp, [sp, #12]
   1d004:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d008:	a903      	add	r1, sp, #12
   1d00a:	4798      	blx	r3
   1d00c:	3404      	adds	r4, #4
   1d00e:	2800      	cmp	r0, #0
   1d010:	d1ce      	bne.n	1cfb0 <gatt_find_type_rsp+0x36>
}
   1d012:	b008      	add	sp, #32
   1d014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d018 <bt_gatt_notification>:
{
   1d018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d01c:	4607      	mov	r7, r0
   1d01e:	4688      	mov	r8, r1
   1d020:	4691      	mov	r9, r2
   1d022:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1d024:	f7f6 f84a 	bl	130bc <gatt_sub_find>
	if (!sub) {
   1d028:	b1f8      	cbz	r0, 1d06a <bt_gatt_notification+0x52>
	return list->head;
   1d02a:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1d02c:	b1eb      	cbz	r3, 1d06a <bt_gatt_notification+0x52>
   1d02e:	f1b3 0614 	subs.w	r6, r3, #20
   1d032:	d01a      	beq.n	1d06a <bt_gatt_notification+0x52>
	return node->next;
   1d034:	681c      	ldr	r4, [r3, #0]
   1d036:	b104      	cbz	r4, 1d03a <bt_gatt_notification+0x22>
   1d038:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1d03a:	8933      	ldrh	r3, [r6, #8]
   1d03c:	4543      	cmp	r3, r8
   1d03e:	d10a      	bne.n	1d056 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1d040:	4653      	mov	r3, sl
   1d042:	464a      	mov	r2, r9
   1d044:	4631      	mov	r1, r6
   1d046:	4638      	mov	r0, r7
   1d048:	6835      	ldr	r5, [r6, #0]
   1d04a:	47a8      	blx	r5
   1d04c:	b918      	cbnz	r0, 1d056 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1d04e:	4631      	mov	r1, r6
   1d050:	4638      	mov	r0, r7
   1d052:	f7f7 fea5 	bl	14da0 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1d056:	b144      	cbz	r4, 1d06a <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d058:	f114 0514 	adds.w	r5, r4, #20
   1d05c:	d002      	beq.n	1d064 <bt_gatt_notification+0x4c>
	return node->next;
   1d05e:	6965      	ldr	r5, [r4, #20]
   1d060:	b105      	cbz	r5, 1d064 <bt_gatt_notification+0x4c>
   1d062:	3d14      	subs	r5, #20
{
   1d064:	4626      	mov	r6, r4
   1d066:	462c      	mov	r4, r5
   1d068:	e7e7      	b.n	1d03a <bt_gatt_notification+0x22>
}
   1d06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d06e <bt_gatt_change_aware>:
{
   1d06e:	b510      	push	{r4, lr}
   1d070:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1d072:	f7f5 ffe5 	bl	13040 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1d076:	b910      	cbnz	r0, 1d07e <bt_gatt_change_aware+0x10>
		return true;
   1d078:	2401      	movs	r4, #1
}
   1d07a:	4620      	mov	r0, r4
   1d07c:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1d07e:	7a03      	ldrb	r3, [r0, #8]
   1d080:	07db      	lsls	r3, r3, #31
   1d082:	d5f9      	bpl.n	1d078 <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1d084:	f100 030c 	add.w	r3, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1d088:	4618      	mov	r0, r3
   1d08a:	f7ff fd46 	bl	1cb1a <atomic_get>
   1d08e:	07c1      	lsls	r1, r0, #31
   1d090:	d4f2      	bmi.n	1d078 <bt_gatt_change_aware+0xa>
	if (!req) {
   1d092:	2c00      	cmp	r4, #0
   1d094:	d0f1      	beq.n	1d07a <bt_gatt_change_aware+0xc>
   1d096:	4618      	mov	r0, r3
   1d098:	f7ff fd3f 	bl	1cb1a <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1d09c:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1d09e:	f3c0 0440 	ubfx	r4, r0, #1, #1
   1d0a2:	d50c      	bpl.n	1d0be <bt_gatt_change_aware+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d0a4:	e8d3 2fef 	ldaex	r2, [r3]
   1d0a8:	f022 0202 	bic.w	r2, r2, #2
   1d0ac:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1d0b0:	2900      	cmp	r1, #0
   1d0b2:	d1f7      	bne.n	1d0a4 <bt_gatt_change_aware+0x36>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d0b4:	2101      	movs	r1, #1
   1d0b6:	4618      	mov	r0, r3
   1d0b8:	f7ff fd24 	bl	1cb04 <atomic_or>
}
   1d0bc:	e7dd      	b.n	1d07a <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1d0be:	2102      	movs	r1, #2
   1d0c0:	e7f9      	b.n	1d0b6 <bt_gatt_change_aware+0x48>

0001d0c2 <bt_smp_recv>:
{
   1d0c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1d0c4:	2100      	movs	r1, #0
   1d0c6:	f04f 32ff 	mov.w	r2, #4294967295
   1d0ca:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1d0ce:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1d0d0:	4608      	mov	r0, r1
   1d0d2:	f7ff f83b 	bl	1c14c <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   1d0d6:	f100 0608 	add.w	r6, r0, #8
   1d0da:	4604      	mov	r4, r0
   1d0dc:	2101      	movs	r1, #1
   1d0de:	4630      	mov	r0, r6
   1d0e0:	f7f8 fb64 	bl	157ac <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1d0e4:	2505      	movs	r5, #5
   1d0e6:	2101      	movs	r1, #1
   1d0e8:	7005      	strb	r5, [r0, #0]
   1d0ea:	4630      	mov	r0, r6
   1d0ec:	f7f8 fb5e 	bl	157ac <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1d0f0:	7005      	strb	r5, [r0, #0]
   1d0f2:	2500      	movs	r5, #0
   1d0f4:	4622      	mov	r2, r4
   1d0f6:	462b      	mov	r3, r5
   1d0f8:	2106      	movs	r1, #6
   1d0fa:	4638      	mov	r0, r7
   1d0fc:	9500      	str	r5, [sp, #0]
   1d0fe:	f7ff f828 	bl	1c152 <bt_l2cap_send_cb>
}
   1d102:	4628      	mov	r0, r5
   1d104:	b003      	add	sp, #12
   1d106:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d108 <bt_smp_sign>:
   1d108:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1d10c:	4770      	bx	lr

0001d10e <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1d10e:	2000      	movs	r0, #0
   1d110:	4770      	bx	lr

0001d112 <fixed_data_unref>:
}
   1d112:	4770      	bx	lr

0001d114 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d114:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1d116:	6849      	ldr	r1, [r1, #4]
   1d118:	6809      	ldr	r1, [r1, #0]
   1d11a:	f7f8 b903 	b.w	15324 <net_buf_alloc_len>

0001d11e <net_buf_simple_init_with_data>:
	buf->size  = size;
   1d11e:	b292      	uxth	r2, r2
	buf->__buf = data;
   1d120:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1d122:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1d124:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1d126:	8082      	strh	r2, [r0, #4]
}
   1d128:	4770      	bx	lr

0001d12a <net_buf_simple_push_u8>:
{
   1d12a:	b510      	push	{r4, lr}
   1d12c:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   1d12e:	2101      	movs	r1, #1
   1d130:	f7f8 fae4 	bl	156fc <net_buf_simple_push>
	*data = val;
   1d134:	7004      	strb	r4, [r0, #0]
}
   1d136:	bd10      	pop	{r4, pc}

0001d138 <net_buf_simple_pull_u8>:
{
   1d138:	b510      	push	{r4, lr}
	val = buf->data[0];
   1d13a:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1d13c:	2101      	movs	r1, #1
	val = buf->data[0];
   1d13e:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1d140:	f7f8 fafa 	bl	15738 <net_buf_simple_pull>
}
   1d144:	4620      	mov	r0, r4
   1d146:	bd10      	pop	{r4, pc}

0001d148 <net_buf_simple_pull_le16>:
{
   1d148:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d14a:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d14c:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1d14e:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1d150:	f7f8 faf2 	bl	15738 <net_buf_simple_pull>
}
   1d154:	4620      	mov	r0, r4
   1d156:	bd10      	pop	{r4, pc}

0001d158 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1d158:	6802      	ldr	r2, [r0, #0]
   1d15a:	6880      	ldr	r0, [r0, #8]
}
   1d15c:	1a10      	subs	r0, r2, r0
   1d15e:	4770      	bx	lr

0001d160 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1d160:	8883      	ldrh	r3, [r0, #4]
   1d162:	88c2      	ldrh	r2, [r0, #6]
   1d164:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1d166:	6803      	ldr	r3, [r0, #0]
   1d168:	6880      	ldr	r0, [r0, #8]
   1d16a:	1a18      	subs	r0, r3, r0
}
   1d16c:	1a10      	subs	r0, r2, r0
   1d16e:	4770      	bx	lr

0001d170 <net_buf_simple_add_mem>:
{
   1d170:	b538      	push	{r3, r4, r5, lr}
   1d172:	460d      	mov	r5, r1
   1d174:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d176:	4611      	mov	r1, r2
   1d178:	f7f8 fb18 	bl	157ac <net_buf_simple_add>
   1d17c:	4622      	mov	r2, r4
   1d17e:	4629      	mov	r1, r5
}
   1d180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1d184:	f7fe bcb6 	b.w	1baf4 <memcpy>

0001d188 <net_buf_simple_add_u8>:
{
   1d188:	b510      	push	{r4, lr}
   1d18a:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   1d18c:	2101      	movs	r1, #1
   1d18e:	f7f8 fb0d 	bl	157ac <net_buf_simple_add>
	*u8 = val;
   1d192:	7004      	strb	r4, [r0, #0]
}
   1d194:	bd10      	pop	{r4, pc}

0001d196 <net_buf_simple_add_le16>:
{
   1d196:	b510      	push	{r4, lr}
   1d198:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1d19a:	2102      	movs	r1, #2
   1d19c:	f7f8 fb06 	bl	157ac <net_buf_simple_add>
	dst[0] = val;
   1d1a0:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1d1a2:	0a24      	lsrs	r4, r4, #8
   1d1a4:	7044      	strb	r4, [r0, #1]
}
   1d1a6:	bd10      	pop	{r4, pc}

0001d1a8 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d1a8:	6843      	ldr	r3, [r0, #4]
}
   1d1aa:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d1ac:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1d1ae:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1d1b0:	600b      	str	r3, [r1, #0]
}
   1d1b2:	4770      	bx	lr

0001d1b4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d1b4:	6843      	ldr	r3, [r0, #4]
   1d1b6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1d1b8:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1d1ba:	4042      	eors	r2, r0
   1d1bc:	400a      	ands	r2, r1
   1d1be:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1d1c0:	605a      	str	r2, [r3, #4]
}
   1d1c2:	2000      	movs	r0, #0
   1d1c4:	4770      	bx	lr

0001d1c6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d1c6:	6843      	ldr	r3, [r0, #4]
}
   1d1c8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d1ca:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1d1cc:	6099      	str	r1, [r3, #8]
}
   1d1ce:	4770      	bx	lr

0001d1d0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d1d0:	6843      	ldr	r3, [r0, #4]
}
   1d1d2:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d1d4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1d1d6:	60d9      	str	r1, [r3, #12]
}
   1d1d8:	4770      	bx	lr

0001d1da <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d1da:	6843      	ldr	r3, [r0, #4]
}
   1d1dc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d1de:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1d1e0:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1d1e2:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1d1e4:	6053      	str	r3, [r2, #4]
}
   1d1e6:	4770      	bx	lr

0001d1e8 <nrf_gpio_cfg_sense_set>:
{
   1d1e8:	b513      	push	{r0, r1, r4, lr}
   1d1ea:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d1ec:	a801      	add	r0, sp, #4
{
   1d1ee:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d1f0:	f7f8 fb40 	bl	15874 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1d1f4:	9b01      	ldr	r3, [sp, #4]
   1d1f6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1d1fa:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1d1fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1d202:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   1d206:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   1d20a:	b002      	add	sp, #8
   1d20c:	bd10      	pop	{r4, pc}

0001d20e <cfg_level_pins>:
{
   1d20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1d212:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1d214:	2500      	movs	r5, #0
	return port->data;
   1d216:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   1d218:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1d21c:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1d21e:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1d222:	4313      	orrs	r3, r2
   1d224:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1d228:	b90c      	cbnz	r4, 1d22e <cfg_level_pins+0x20>
}
   1d22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1d22e:	4226      	tst	r6, r4
   1d230:	d010      	beq.n	1d254 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d232:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d234:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d238:	40e9      	lsrs	r1, r5
   1d23a:	f001 0101 	and.w	r1, r1, #1
   1d23e:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d242:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1d246:	b2c9      	uxtb	r1, r1
   1d248:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1d24c:	f7ff ffcc 	bl	1d1e8 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d250:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1d254:	3501      	adds	r5, #1
		bit <<= 1;
   1d256:	0076      	lsls	r6, r6, #1
   1d258:	e7e6      	b.n	1d228 <cfg_level_pins+0x1a>

0001d25a <check_level_trigger_pins>:
{
   1d25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1d25e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1d260:	2700      	movs	r7, #0
	return port->data;
   1d262:	68c3      	ldr	r3, [r0, #12]
	return port->config;
   1d264:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1d268:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1d26a:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1d26e:	430a      	orrs	r2, r1
   1d270:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1d274:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1d278:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1d27a:	6915      	ldr	r5, [r2, #16]
   1d27c:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1d27e:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   1d282:	b914      	cbnz	r4, 1d28a <check_level_trigger_pins+0x30>
}
   1d284:	4628      	mov	r0, r5
   1d286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1d28a:	4234      	tst	r4, r6
   1d28c:	d00a      	beq.n	1d2a4 <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d28e:	f898 0008 	ldrb.w	r0, [r8, #8]
   1d292:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1d296:	2100      	movs	r1, #0
   1d298:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   1d29c:	f7ff ffa4 	bl	1d1e8 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1d2a0:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1d2a4:	3701      	adds	r7, #1
		bit <<= 1;
   1d2a6:	0076      	lsls	r6, r6, #1
   1d2a8:	e7eb      	b.n	1d282 <check_level_trigger_pins+0x28>

0001d2aa <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   1d2aa:	6883      	ldr	r3, [r0, #8]
   1d2ac:	689b      	ldr	r3, [r3, #8]
   1d2ae:	4718      	bx	r3

0001d2b0 <vipm_nrf_max_id_val_get>:
}
   1d2b0:	2000      	movs	r0, #0
   1d2b2:	4770      	bx	lr

0001d2b4 <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   1d2b4:	b508      	push	{r3, lr}
   1d2b6:	b139      	cbz	r1, 1d2c8 <vipm_nrf_1_set_enabled+0x14>
   1d2b8:	202a      	movs	r0, #42	; 0x2a
   1d2ba:	f7f0 fa89 	bl	d7d0 <arch_irq_enable>
   1d2be:	2001      	movs	r0, #1
   1d2c0:	f7f9 fe0a 	bl	16ed8 <nrfx_ipc_receive_event_enable>
   1d2c4:	2000      	movs	r0, #0
   1d2c6:	bd08      	pop	{r3, pc}
   1d2c8:	2001      	movs	r0, #1
   1d2ca:	f7f9 fe23 	bl	16f14 <nrfx_ipc_receive_event_disable>
   1d2ce:	e7f9      	b.n	1d2c4 <vipm_nrf_1_set_enabled+0x10>

0001d2d0 <uarte_nrfx_config_get>:
{
   1d2d0:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1d2d2:	68c2      	ldr	r2, [r0, #12]
   1d2d4:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1d2d8:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1d2dc:	2000      	movs	r0, #0
   1d2de:	4770      	bx	lr

0001d2e0 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1d2e0:	6843      	ldr	r3, [r0, #4]
   1d2e2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d2e4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d2e8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1d2ec:	4770      	bx	lr

0001d2ee <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1d2ee:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1d2f0:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1d2f2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d2f4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d2f8:	b148      	cbz	r0, 1d30e <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d2fa:	2000      	movs	r0, #0
	*c = data->rx_data;
   1d2fc:	7d52      	ldrb	r2, [r2, #21]
   1d2fe:	700a      	strb	r2, [r1, #0]
   1d300:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d304:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d308:	2201      	movs	r2, #1
   1d30a:	601a      	str	r2, [r3, #0]
	return 0;
   1d30c:	4770      	bx	lr
		return -1;
   1d30e:	f04f 30ff 	mov.w	r0, #4294967295
}
   1d312:	4770      	bx	lr

0001d314 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   1d314:	6843      	ldr	r3, [r0, #4]
{
   1d316:	4602      	mov	r2, r0
	return config->uarte_regs;
   1d318:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d31a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d31e:	b148      	cbz	r0, 1d334 <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d320:	2000      	movs	r0, #0
	return dev->data;
   1d322:	68d2      	ldr	r2, [r2, #12]
   1d324:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d328:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d32c:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1d32e:	7d52      	ldrb	r2, [r2, #21]
   1d330:	700a      	strb	r2, [r1, #0]
   1d332:	6018      	str	r0, [r3, #0]
}
   1d334:	4770      	bx	lr

0001d336 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1d336:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1d338:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   1d33a:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1d33c:	f04f 0020 	mov.w	r0, #32
   1d340:	f3ef 8311 	mrs	r3, BASEPRI
   1d344:	f380 8811 	msr	BASEPRI, r0
   1d348:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1d34c:	2000      	movs	r0, #0
   1d34e:	68c9      	ldr	r1, [r1, #12]
   1d350:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1d352:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1d356:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1d35a:	f383 8811 	msr	BASEPRI, r3
   1d35e:	f3bf 8f6f 	isb	sy
}
   1d362:	4770      	bx	lr

0001d364 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1d364:	2201      	movs	r2, #1
   1d366:	68c3      	ldr	r3, [r0, #12]
   1d368:	68db      	ldr	r3, [r3, #12]
   1d36a:	739a      	strb	r2, [r3, #14]
}
   1d36c:	4770      	bx	lr

0001d36e <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1d36e:	68c3      	ldr	r3, [r0, #12]
   1d370:	68db      	ldr	r3, [r3, #12]
   1d372:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d374:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1d378:	b962      	cbnz	r2, 1d394 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1d37a:	6842      	ldr	r2, [r0, #4]
   1d37c:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d37e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1d382:	b140      	cbz	r0, 1d396 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1d384:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   1d388:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1d38c:	d003      	beq.n	1d396 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d38e:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   1d390:	6119      	str	r1, [r3, #16]
   1d392:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1d394:	2000      	movs	r0, #0
}
   1d396:	4770      	bx	lr

0001d398 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1d398:	6843      	ldr	r3, [r0, #4]
   1d39a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d39c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1d3a0:	3800      	subs	r0, #0
   1d3a2:	bf18      	it	ne
   1d3a4:	2001      	movne	r0, #1
   1d3a6:	4770      	bx	lr

0001d3a8 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1d3a8:	2210      	movs	r2, #16
	return config->uarte_regs;
   1d3aa:	6843      	ldr	r3, [r0, #4]
   1d3ac:	681b      	ldr	r3, [r3, #0]
   1d3ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d3b2:	4770      	bx	lr

0001d3b4 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1d3b4:	2210      	movs	r2, #16
	return config->uarte_regs;
   1d3b6:	6843      	ldr	r3, [r0, #4]
   1d3b8:	681b      	ldr	r3, [r3, #0]
   1d3ba:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d3be:	4770      	bx	lr

0001d3c0 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1d3c0:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1d3c4:	6843      	ldr	r3, [r0, #4]
   1d3c6:	681b      	ldr	r3, [r3, #0]
   1d3c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d3cc:	4770      	bx	lr

0001d3ce <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1d3ce:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1d3d2:	6843      	ldr	r3, [r0, #4]
   1d3d4:	681b      	ldr	r3, [r3, #0]
   1d3d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1d3da:	4770      	bx	lr

0001d3dc <uarte_nrfx_irq_update>:
}
   1d3dc:	2001      	movs	r0, #1
   1d3de:	4770      	bx	lr

0001d3e0 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1d3e0:	68c3      	ldr	r3, [r0, #12]
   1d3e2:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1d3e4:	e9c3 1200 	strd	r1, r2, [r3]
}
   1d3e8:	4770      	bx	lr

0001d3ea <uarte_nrfx_irq_is_pending>:
{
   1d3ea:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1d3ec:	6843      	ldr	r3, [r0, #4]
{
   1d3ee:	4604      	mov	r4, r0
	return config->uarte_regs;
   1d3f0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1d3f2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1d3f6:	025b      	lsls	r3, r3, #9
   1d3f8:	d405      	bmi.n	1d406 <uarte_nrfx_irq_is_pending+0x1c>
   1d3fa:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1d3fe:	f010 0010 	ands.w	r0, r0, #16
   1d402:	d106      	bne.n	1d412 <uarte_nrfx_irq_is_pending+0x28>
}
   1d404:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1d406:	f7ff ffb2 	bl	1d36e <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1d40a:	2800      	cmp	r0, #0
   1d40c:	d0f5      	beq.n	1d3fa <uarte_nrfx_irq_is_pending+0x10>
		||
   1d40e:	2001      	movs	r0, #1
   1d410:	e7f8      	b.n	1d404 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1d412:	4620      	mov	r0, r4
   1d414:	f7ff ffc0 	bl	1d398 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1d418:	3800      	subs	r0, #0
   1d41a:	bf18      	it	ne
   1d41c:	2001      	movne	r0, #1
   1d41e:	e7f1      	b.n	1d404 <uarte_nrfx_irq_is_pending+0x1a>

0001d420 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1d420:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1d422:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d424:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d428:	b938      	cbnz	r0, 1d43a <is_tx_ready.isra.0+0x1a>
   1d42a:	799b      	ldrb	r3, [r3, #6]
   1d42c:	b933      	cbnz	r3, 1d43c <is_tx_ready.isra.0+0x1c>
   1d42e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1d432:	3800      	subs	r0, #0
   1d434:	bf18      	it	ne
   1d436:	2001      	movne	r0, #1
   1d438:	4770      	bx	lr
   1d43a:	2001      	movs	r0, #1
}
   1d43c:	4770      	bx	lr

0001d43e <uarte_nrfx_fifo_fill>:
{
   1d43e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   1d440:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1d442:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   1d444:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   1d446:	68f3      	ldr	r3, [r6, #12]
   1d448:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d44a:	3310      	adds	r3, #16
   1d44c:	4294      	cmp	r4, r2
   1d44e:	bfa8      	it	ge
   1d450:	4614      	movge	r4, r2
   1d452:	2201      	movs	r2, #1
   1d454:	e8d3 7fef 	ldaex	r7, [r3]
   1d458:	2f00      	cmp	r7, #0
   1d45a:	d104      	bne.n	1d466 <uarte_nrfx_fifo_fill+0x28>
   1d45c:	e8c3 2fec 	stlex	ip, r2, [r3]
   1d460:	f1bc 0f00 	cmp.w	ip, #0
   1d464:	d1f6      	bne.n	1d454 <uarte_nrfx_fifo_fill+0x16>
   1d466:	bf0c      	ite	eq
   1d468:	4613      	moveq	r3, r2
   1d46a:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1d46c:	d01d      	beq.n	1d4aa <uarte_nrfx_fifo_fill+0x6c>
		return 0;
   1d46e:	461c      	mov	r4, r3
}
   1d470:	4620      	mov	r0, r4
   1d472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1d474:	68f2      	ldr	r2, [r6, #12]
   1d476:	5ccf      	ldrb	r7, [r1, r3]
   1d478:	6892      	ldr	r2, [r2, #8]
   1d47a:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   1d47c:	3301      	adds	r3, #1
   1d47e:	42a3      	cmp	r3, r4
   1d480:	dbf8      	blt.n	1d474 <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   1d482:	f04f 0320 	mov.w	r3, #32
   1d486:	f3ef 8111 	mrs	r1, BASEPRI
   1d48a:	f383 8811 	msr	BASEPRI, r3
   1d48e:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1d492:	6840      	ldr	r0, [r0, #4]
   1d494:	f7ff ffc4 	bl	1d420 <is_tx_ready.isra.0>
   1d498:	68f3      	ldr	r3, [r6, #12]
   1d49a:	b940      	cbnz	r0, 1d4ae <uarte_nrfx_fifo_fill+0x70>
		len = 0;
   1d49c:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   1d49e:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   1d4a0:	f381 8811 	msr	BASEPRI, r1
   1d4a4:	f3bf 8f6f 	isb	sy
	return len;
   1d4a8:	e7e2      	b.n	1d470 <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   1d4aa:	2300      	movs	r3, #0
   1d4ac:	e7e7      	b.n	1d47e <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d4ae:	689b      	ldr	r3, [r3, #8]
   1d4b0:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d4b4:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   1d4b6:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d4ba:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   1d4be:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   1d4c2:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   1d4c6:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d4ca:	2301      	movs	r3, #1
   1d4cc:	60ab      	str	r3, [r5, #8]
}
   1d4ce:	e7e7      	b.n	1d4a0 <uarte_nrfx_fifo_fill+0x62>

0001d4d0 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1d4d0:	6843      	ldr	r3, [r0, #4]
{
   1d4d2:	b410      	push	{r4}
	return config->uarte_regs;
   1d4d4:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1d4d6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1d4da:	05d2      	lsls	r2, r2, #23
   1d4dc:	d518      	bpl.n	1d510 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d4de:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1d4e2:	b1aa      	cbz	r2, 1d510 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1d4e4:	f04f 0120 	mov.w	r1, #32
   1d4e8:	f3ef 8211 	mrs	r2, BASEPRI
   1d4ec:	f381 8811 	msr	BASEPRI, r1
   1d4f0:	f3bf 8f6f 	isb	sy
   1d4f4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d4f8:	b131      	cbz	r1, 1d508 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d4fa:	2100      	movs	r1, #0
   1d4fc:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1d500:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d504:	2101      	movs	r1, #1
   1d506:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1d508:	f382 8811 	msr	BASEPRI, r2
   1d50c:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   1d510:	68c2      	ldr	r2, [r0, #12]
   1d512:	68d2      	ldr	r2, [r2, #12]
   1d514:	b15a      	cbz	r2, 1d52e <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d516:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1d51a:	b151      	cbz	r1, 1d532 <uarte_nrfx_isr_int+0x62>
		data->int_driven->fifo_fill_lock = 0;
   1d51c:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   1d51e:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   1d520:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1d522:	b134      	cbz	r4, 1d532 <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
   1d524:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1d528:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1d52c:	7391      	strb	r1, [r2, #14]
}
   1d52e:	bc10      	pop	{r4}
   1d530:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d532:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1d536:	b121      	cbz	r1, 1d542 <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d538:	2100      	movs	r1, #0
   1d53a:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1d53e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1d542:	6813      	ldr	r3, [r2, #0]
   1d544:	2b00      	cmp	r3, #0
   1d546:	d0f2      	beq.n	1d52e <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1d548:	6851      	ldr	r1, [r2, #4]
}
   1d54a:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1d54c:	4718      	bx	r3

0001d54e <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1d54e:	2101      	movs	r1, #1
   1d550:	f7f9 b9c6 	b.w	168e0 <dk_set_led>

0001d554 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1d554:	2100      	movs	r1, #0
   1d556:	f7f9 b9c3 	b.w	168e0 <dk_set_led>

0001d55a <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1d55a:	f7f9 ba41 	b.w	169e0 <SystemCoreClockUpdate>

0001d55e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1d55e:	4700      	bx	r0

0001d560 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1d560:	f000 bcaf 	b.w	1dec2 <z_impl_k_busy_wait>

0001d564 <metal_device_open>:
{
   1d564:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d566:	460c      	mov	r4, r1
   1d568:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1d56a:	4606      	mov	r6, r0
   1d56c:	b918      	cbnz	r0, 1d576 <metal_device_open+0x12>
		return -EINVAL;
   1d56e:	f06f 0015 	mvn.w	r0, #21
}
   1d572:	b002      	add	sp, #8
   1d574:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1d576:	f7fe fa7f 	bl	1ba78 <strlen>
   1d57a:	2800      	cmp	r0, #0
   1d57c:	d0f7      	beq.n	1d56e <metal_device_open+0xa>
   1d57e:	2c00      	cmp	r4, #0
   1d580:	d0f5      	beq.n	1d56e <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1d582:	4620      	mov	r0, r4
   1d584:	f7fe fa78 	bl	1ba78 <strlen>
   1d588:	2800      	cmp	r0, #0
   1d58a:	d0f0      	beq.n	1d56e <metal_device_open+0xa>
   1d58c:	2d00      	cmp	r5, #0
   1d58e:	d0ee      	beq.n	1d56e <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1d590:	4630      	mov	r0, r6
   1d592:	a901      	add	r1, sp, #4
   1d594:	f7f9 fd32 	bl	16ffc <metal_bus_find>
	if (error)
   1d598:	2800      	cmp	r0, #0
   1d59a:	d1ea      	bne.n	1d572 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1d59c:	9801      	ldr	r0, [sp, #4]
   1d59e:	6883      	ldr	r3, [r0, #8]
   1d5a0:	b11b      	cbz	r3, 1d5aa <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1d5a2:	462a      	mov	r2, r5
   1d5a4:	4621      	mov	r1, r4
   1d5a6:	4798      	blx	r3
	if (error)
   1d5a8:	e7e3      	b.n	1d572 <metal_device_open+0xe>
		return -ENODEV;
   1d5aa:	f06f 0012 	mvn.w	r0, #18
   1d5ae:	e7e0      	b.n	1d572 <metal_device_open+0xe>

0001d5b0 <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1d5b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d5b2:	6804      	ldr	r4, [r0, #0]
   1d5b4:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1d5b6:	1c66      	adds	r6, r4, #1
   1d5b8:	d00f      	beq.n	1d5da <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d5ba:	42a9      	cmp	r1, r5
   1d5bc:	d232      	bcs.n	1d624 <metal_io_block_read+0x74>
		: NULL);
   1d5be:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1d5c0:	185e      	adds	r6, r3, r1
   1d5c2:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1d5c4:	bf88      	it	hi
   1d5c6:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1d5c8:	6a05      	ldr	r5, [r0, #32]
   1d5ca:	b155      	cbz	r5, 1d5e2 <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   1d5cc:	9300      	str	r3, [sp, #0]
   1d5ce:	2305      	movs	r3, #5
   1d5d0:	47a8      	blx	r5
   1d5d2:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1d5d4:	4618      	mov	r0, r3
   1d5d6:	b002      	add	sp, #8
   1d5d8:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1d5da:	42a9      	cmp	r1, r5
   1d5dc:	d222      	bcs.n	1d624 <metal_io_block_read+0x74>
   1d5de:	2400      	movs	r4, #0
   1d5e0:	e7ee      	b.n	1d5c0 <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   1d5e2:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1d5e6:	4621      	mov	r1, r4
   1d5e8:	4618      	mov	r0, r3
   1d5ea:	2800      	cmp	r0, #0
   1d5ec:	d0f2      	beq.n	1d5d4 <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   1d5ee:	ea42 0401 	orr.w	r4, r2, r1
   1d5f2:	07a4      	lsls	r4, r4, #30
   1d5f4:	d10a      	bne.n	1d60c <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1d5f6:	2803      	cmp	r0, #3
   1d5f8:	dc0e      	bgt.n	1d618 <metal_io_block_read+0x68>
   1d5fa:	3901      	subs	r1, #1
   1d5fc:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   1d5fe:	4282      	cmp	r2, r0
   1d600:	d0e8      	beq.n	1d5d4 <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   1d602:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   1d606:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1d60a:	e7f8      	b.n	1d5fe <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   1d60c:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   1d610:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   1d612:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   1d616:	e7e8      	b.n	1d5ea <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1d618:	f851 4b04 	ldr.w	r4, [r1], #4
   1d61c:	3804      	subs	r0, #4
   1d61e:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1d622:	e7e8      	b.n	1d5f6 <metal_io_block_read+0x46>
		return -ERANGE;
   1d624:	f06f 0325 	mvn.w	r3, #37	; 0x25
   1d628:	e7d4      	b.n	1d5d4 <metal_io_block_read+0x24>

0001d62a <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1d62a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d62c:	6804      	ldr	r4, [r0, #0]
   1d62e:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1d630:	1c66      	adds	r6, r4, #1
   1d632:	d00e      	beq.n	1d652 <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d634:	42a9      	cmp	r1, r5
   1d636:	d230      	bcs.n	1d69a <metal_io_block_write+0x70>
		: NULL);
   1d638:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1d63a:	185e      	adds	r6, r3, r1
   1d63c:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1d63e:	bf88      	it	hi
   1d640:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1d642:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1d644:	b94d      	cbnz	r5, 1d65a <metal_io_block_write+0x30>
   1d646:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   1d648:	b991      	cbnz	r1, 1d670 <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   1d64a:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1d64e:	4618      	mov	r0, r3
   1d650:	e006      	b.n	1d660 <metal_io_block_write+0x36>
	if (offset >= io->size)
   1d652:	42a9      	cmp	r1, r5
   1d654:	d221      	bcs.n	1d69a <metal_io_block_write+0x70>
   1d656:	2400      	movs	r4, #0
   1d658:	e7ef      	b.n	1d63a <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   1d65a:	9300      	str	r3, [sp, #0]
   1d65c:	2305      	movs	r3, #5
   1d65e:	47a8      	blx	r5
	}
	return retlen;
}
   1d660:	b002      	add	sp, #8
   1d662:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1d664:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   1d668:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1d66a:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   1d66e:	e7eb      	b.n	1d648 <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   1d670:	ea44 0002 	orr.w	r0, r4, r2
   1d674:	0780      	lsls	r0, r0, #30
   1d676:	d1f5      	bne.n	1d664 <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d678:	2903      	cmp	r1, #3
   1d67a:	dc08      	bgt.n	1d68e <metal_io_block_write+0x64>
   1d67c:	3a01      	subs	r2, #1
   1d67e:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   1d680:	428c      	cmp	r4, r1
   1d682:	d0e2      	beq.n	1d64a <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   1d684:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   1d688:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   1d68c:	e7f8      	b.n	1d680 <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1d68e:	f852 0b04 	ldr.w	r0, [r2], #4
   1d692:	3904      	subs	r1, #4
   1d694:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d698:	e7ee      	b.n	1d678 <metal_io_block_write+0x4e>
		return -ERANGE;
   1d69a:	f06f 0025 	mvn.w	r0, #37	; 0x25
   1d69e:	e7df      	b.n	1d660 <metal_io_block_write+0x36>

0001d6a0 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1d6a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d6a2:	6804      	ldr	r4, [r0, #0]
   1d6a4:	461d      	mov	r5, r3
		: NULL);
   1d6a6:	1c66      	adds	r6, r4, #1
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d6a8:	6883      	ldr	r3, [r0, #8]
		: NULL);
   1d6aa:	d00e      	beq.n	1d6ca <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d6ac:	4299      	cmp	r1, r3
   1d6ae:	d22d      	bcs.n	1d70c <metal_io_block_set+0x6c>
		: NULL);
   1d6b0:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1d6b2:	186e      	adds	r6, r5, r1
   1d6b4:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1d6b6:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1d6b8:	bf88      	it	hi
   1d6ba:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1d6bc:	b186      	cbz	r6, 1d6e0 <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   1d6be:	2305      	movs	r3, #5
   1d6c0:	9500      	str	r5, [sp, #0]
   1d6c2:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1d6c4:	4628      	mov	r0, r5
   1d6c6:	b002      	add	sp, #8
   1d6c8:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1d6ca:	4299      	cmp	r1, r3
   1d6cc:	d21e      	bcs.n	1d70c <metal_io_block_set+0x6c>
   1d6ce:	2400      	movs	r4, #0
   1d6d0:	e7ef      	b.n	1d6b2 <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   1d6d2:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1d6d6:	3b01      	subs	r3, #1
   1d6d8:	b923      	cbnz	r3, 1d6e4 <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   1d6da:	f3bf 8f5b 	dmb	ish
   1d6de:	e7f1      	b.n	1d6c4 <metal_io_block_set+0x24>
   1d6e0:	462b      	mov	r3, r5
   1d6e2:	e7f9      	b.n	1d6d8 <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1d6e4:	07a1      	lsls	r1, r4, #30
   1d6e6:	d1f4      	bne.n	1d6d2 <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1d6e8:	0611      	lsls	r1, r2, #24
   1d6ea:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1d6ee:	4311      	orrs	r1, r2
   1d6f0:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d6f4:	2b03      	cmp	r3, #3
   1d6f6:	dc05      	bgt.n	1d704 <metal_io_block_set+0x64>
   1d6f8:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   1d6fa:	429c      	cmp	r4, r3
   1d6fc:	d0ed      	beq.n	1d6da <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   1d6fe:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   1d702:	e7fa      	b.n	1d6fa <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   1d704:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1d708:	3b04      	subs	r3, #4
   1d70a:	e7f3      	b.n	1d6f4 <metal_io_block_set+0x54>
		return -ERANGE;
   1d70c:	f06f 0525 	mvn.w	r5, #37	; 0x25
   1d710:	e7d8      	b.n	1d6c4 <metal_io_block_set+0x24>

0001d712 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1d712:	2000      	movs	r0, #0
   1d714:	4770      	bx	lr

0001d716 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1d716:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   1d718:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1d71a:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1d71c:	b984      	cbnz	r4, 1d740 <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   1d71e:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   1d720:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   1d722:	291f      	cmp	r1, #31
   1d724:	bf98      	it	ls
   1d726:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1d72a:	b165      	cbz	r5, 1d746 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   1d72c:	6881      	ldr	r1, [r0, #8]
   1d72e:	428b      	cmp	r3, r1
   1d730:	d209      	bcs.n	1d746 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   1d732:	6900      	ldr	r0, [r0, #16]
   1d734:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   1d736:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1d73a:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1d73c:	bc30      	pop	{r4, r5}
   1d73e:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1d740:	4623      	mov	r3, r4
}
   1d742:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   1d744:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1d746:	f04f 30ff 	mov.w	r0, #4294967295
   1d74a:	e7f7      	b.n	1d73c <metal_io_phys+0x26>

0001d74c <virtqueue_create>:
{
   1d74c:	b570      	push	{r4, r5, r6, lr}
   1d74e:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   1d750:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   1d752:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   1d754:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   1d758:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   1d75a:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   1d75c:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1d75e:	1c96      	adds	r6, r2, #2
   1d760:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1d762:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1d766:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   1d76a:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1d76c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   1d770:	1c6e      	adds	r6, r5, #1
   1d772:	4433      	add	r3, r6
   1d774:	426d      	negs	r5, r5
   1d776:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1d778:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d77a:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   1d77c:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   1d780:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1d782:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d784:	b96b      	cbnz	r3, 1d7a2 <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   1d786:	3a01      	subs	r2, #1
   1d788:	4293      	cmp	r3, r2
   1d78a:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   1d78e:	db0a      	blt.n	1d7a6 <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1d790:	2300      	movs	r3, #0
			vr->desc[i].next = i + 1;
   1d792:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1d796:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1d79a:	7393      	strb	r3, [r2, #14]
   1d79c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d7a0:	73d3      	strb	r3, [r2, #15]
}
   1d7a2:	2000      	movs	r0, #0
   1d7a4:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   1d7a6:	3301      	adds	r3, #1
   1d7a8:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   1d7aa:	e7ed      	b.n	1d788 <virtqueue_create+0x3c>

0001d7ac <virtqueue_add_buffer>:
{
   1d7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d7b0:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   1d7b2:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   1d7b6:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d7b8:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1d7ba:	46ba      	mov	sl, r7
{
   1d7bc:	b085      	sub	sp, #20
	needed = readable + writable;
   1d7be:	18d6      	adds	r6, r2, r3
{
   1d7c0:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1d7c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d7c4:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   1d7c8:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1d7ca:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   1d7cc:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1d7ce:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d7d0:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   1d7d4:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d7d6:	42be      	cmp	r6, r7
   1d7d8:	dc19      	bgt.n	1d80e <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   1d7da:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1d7dc:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   1d7de:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1d7e0:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   1d7e2:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1d7e4:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1d7e6:	1e51      	subs	r1, r2, #1
   1d7e8:	885a      	ldrh	r2, [r3, #2]
}
   1d7ea:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1d7ec:	400a      	ands	r2, r1
   1d7ee:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1d7f2:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   1d7f6:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   1d7fa:	69e2      	ldr	r2, [r4, #28]
   1d7fc:	8853      	ldrh	r3, [r2, #2]
   1d7fe:	3301      	adds	r3, #1
   1d800:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1d802:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1d804:	3301      	adds	r3, #1
   1d806:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1d808:	b005      	add	sp, #20
   1d80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1d80e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1d810:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1d812:	f858 1c04 	ldr.w	r1, [r8, #-4]
   1d816:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1d81a:	9302      	str	r3, [sp, #8]
   1d81c:	6803      	ldr	r3, [r0, #0]
   1d81e:	9203      	str	r2, [sp, #12]
   1d820:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1d822:	6883      	ldr	r3, [r0, #8]
   1d824:	f108 0808 	add.w	r8, r8, #8
   1d828:	4299      	cmp	r1, r3
   1d82a:	bf28      	it	cs
   1d82c:	f04f 31ff 	movcs.w	r1, #4294967295
   1d830:	f7ff ff71 	bl	1d716 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1d834:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1d838:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   1d83a:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   1d83e:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   1d842:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1d844:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1d846:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   1d84a:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   1d84c:	bfb6      	itet	lt
   1d84e:	2201      	movlt	r2, #1
		dp->flags = 0;
   1d850:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   1d854:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   1d856:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   1d858:	bfd8      	it	le
   1d85a:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d85c:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   1d860:	bfdc      	itt	le
   1d862:	f042 0202 	orrle.w	r2, r2, #2
   1d866:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1d868:	89ed      	ldrh	r5, [r5, #14]
   1d86a:	e7b4      	b.n	1d7d6 <virtqueue_add_buffer+0x2a>

0001d86c <virtqueue_get_buffer>:
{
   1d86c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1d86e:	b350      	cbz	r0, 1d8c6 <virtqueue_get_buffer+0x5a>
   1d870:	6a05      	ldr	r5, [r0, #32]
   1d872:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1d874:	886c      	ldrh	r4, [r5, #2]
   1d876:	429c      	cmp	r4, r3
   1d878:	d030      	beq.n	1d8dc <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1d87a:	1c5c      	adds	r4, r3, #1
   1d87c:	85c4      	strh	r4, [r0, #46]	; 0x2e
   1d87e:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1d880:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1d884:	3c01      	subs	r4, #1
   1d886:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1d888:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1d88c:	686b      	ldr	r3, [r5, #4]
   1d88e:	b29e      	uxth	r6, r3
	if (len)
   1d890:	b109      	cbz	r1, 1d896 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1d892:	68ad      	ldr	r5, [r5, #8]
   1d894:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1d896:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1d89a:	b29b      	uxth	r3, r3
   1d89c:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1d8a0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1d8a4:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1d8a6:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1d8a8:	442f      	add	r7, r5
	dxp->ndescs--;
   1d8aa:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1d8ac:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1d8ae:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1d8b0:	898d      	ldrh	r5, [r1, #12]
   1d8b2:	076f      	lsls	r7, r5, #29
   1d8b4:	d50e      	bpl.n	1d8d4 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1d8b6:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1d8b8:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1d8ba:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1d8bc:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1d8be:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1d8c0:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1d8c2:	b102      	cbz	r2, 1d8c6 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1d8c4:	8014      	strh	r4, [r2, #0]
}
   1d8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1d8c8:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1d8ca:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1d8cc:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1d8ce:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1d8d2:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1d8d4:	898d      	ldrh	r5, [r1, #12]
   1d8d6:	07ed      	lsls	r5, r5, #31
   1d8d8:	d4f6      	bmi.n	1d8c8 <virtqueue_get_buffer+0x5c>
   1d8da:	e7ec      	b.n	1d8b6 <virtqueue_get_buffer+0x4a>
		return NULL;
   1d8dc:	2000      	movs	r0, #0
   1d8de:	e7f2      	b.n	1d8c6 <virtqueue_get_buffer+0x5a>

0001d8e0 <virtqueue_get_available_buffer>:
{
   1d8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1d8e4:	f3bf 8f5b 	dmb	ish
{
   1d8e8:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1d8ea:	69c2      	ldr	r2, [r0, #28]
{
   1d8ec:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1d8ee:	8853      	ldrh	r3, [r2, #2]
   1d8f0:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   1d8f2:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1d8f4:	428b      	cmp	r3, r1
   1d8f6:	d045      	beq.n	1d984 <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1d8f8:	1c4b      	adds	r3, r1, #1
   1d8fa:	8603      	strh	r3, [r0, #48]	; 0x30
   1d8fc:	8943      	ldrh	r3, [r0, #10]
   1d8fe:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
   1d902:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1d904:	400b      	ands	r3, r1
   1d906:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1d90a:	889a      	ldrh	r2, [r3, #4]
   1d90c:	b293      	uxth	r3, r2
   1d90e:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1d910:	6982      	ldr	r2, [r0, #24]
   1d912:	011b      	lsls	r3, r3, #4
   1d914:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   1d918:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1d91c:	bb5b      	cbnz	r3, 1d976 <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1d91e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1d922:	1c62      	adds	r2, r4, #1
   1d924:	bf09      	itett	eq
   1d926:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   1d92a:	ea09 0404 	andne.w	r4, r9, r4
   1d92e:	681c      	ldreq	r4, [r3, #0]
   1d930:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   1d934:	4621      	mov	r1, r4
   1d936:	4640      	mov	r0, r8
   1d938:	f7ff feed 	bl	1d716 <metal_io_phys>
   1d93c:	4581      	cmp	r9, r0
   1d93e:	d009      	beq.n	1d954 <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   1d940:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1d944:	3301      	adds	r3, #1
   1d946:	441c      	add	r4, r3
		} while (offset < io->size);
   1d948:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1d94c:	429c      	cmp	r4, r3
   1d94e:	d3f1      	bcc.n	1d934 <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   1d950:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d954:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   1d958:	1c43      	adds	r3, r0, #1
   1d95a:	d011      	beq.n	1d980 <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1d95c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1d960:	42a3      	cmp	r3, r4
   1d962:	d90d      	bls.n	1d980 <virtqueue_get_available_buffer+0xa0>
		: NULL);
   1d964:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   1d966:	8832      	ldrh	r2, [r6, #0]
   1d968:	69ab      	ldr	r3, [r5, #24]
   1d96a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1d96e:	689b      	ldr	r3, [r3, #8]
   1d970:	603b      	str	r3, [r7, #0]
}
   1d972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1d976:	4649      	mov	r1, r9
   1d978:	4640      	mov	r0, r8
   1d97a:	4798      	blx	r3
   1d97c:	4604      	mov	r4, r0
   1d97e:	e7e9      	b.n	1d954 <virtqueue_get_available_buffer+0x74>
		: NULL);
   1d980:	2000      	movs	r0, #0
   1d982:	e7f0      	b.n	1d966 <virtqueue_get_available_buffer+0x86>
		return NULL;
   1d984:	2000      	movs	r0, #0
   1d986:	e7f4      	b.n	1d972 <virtqueue_get_available_buffer+0x92>

0001d988 <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1d988:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d98a:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1d98c:	6912      	ldr	r2, [r2, #16]
   1d98e:	0092      	lsls	r2, r2, #2
   1d990:	d515      	bpl.n	1d9be <virtqueue_disable_cb+0x36>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d992:	b94b      	cbnz	r3, 1d9a8 <virtqueue_disable_cb+0x20>
			vring_used_event(&vq->vq_ring) =
   1d994:	69c2      	ldr	r2, [r0, #28]
   1d996:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1d998:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1d99a:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   1d99c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1d9a0:	1a1b      	subs	r3, r3, r0
   1d9a2:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   1d9a4:	8093      	strh	r3, [r2, #4]
   1d9a6:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1d9a8:	2b01      	cmp	r3, #1
   1d9aa:	d10e      	bne.n	1d9ca <virtqueue_disable_cb+0x42>
			vring_avail_event(&vq->vq_ring) =
   1d9ac:	6a02      	ldr	r2, [r0, #32]
   1d9ae:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1d9b0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1d9b2:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   1d9b4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1d9b8:	1a1b      	subs	r3, r3, r0
   1d9ba:	3b01      	subs	r3, #1
   1d9bc:	e7f2      	b.n	1d9a4 <virtqueue_disable_cb+0x1c>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1d9be:	b92b      	cbnz	r3, 1d9cc <virtqueue_disable_cb+0x44>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1d9c0:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1d9c2:	8813      	ldrh	r3, [r2, #0]
   1d9c4:	f043 0301 	orr.w	r3, r3, #1
   1d9c8:	8013      	strh	r3, [r2, #0]
}
   1d9ca:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1d9cc:	2b01      	cmp	r3, #1
   1d9ce:	d1fc      	bne.n	1d9ca <virtqueue_disable_cb+0x42>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1d9d0:	6a02      	ldr	r2, [r0, #32]
   1d9d2:	e7f6      	b.n	1d9c2 <virtqueue_disable_cb+0x3a>

0001d9d4 <virtqueue_kick>:
{
   1d9d4:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1d9d6:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1d9da:	6803      	ldr	r3, [r0, #0]
{
   1d9dc:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1d9de:	691a      	ldr	r2, [r3, #16]
   1d9e0:	699b      	ldr	r3, [r3, #24]
   1d9e2:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1d9e6:	d019      	beq.n	1da1c <virtqueue_kick+0x48>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1d9e8:	b97b      	cbnz	r3, 1da0a <virtqueue_kick+0x36>
			new_idx = vq->vq_ring.avail->idx;
   1d9ea:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   1d9ec:	6a02      	ldr	r2, [r0, #32]
   1d9ee:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.avail->idx;
   1d9f0:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1d9f2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   1d9f6:	8892      	ldrh	r2, [r2, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1d9f8:	1a9b      	subs	r3, r3, r2
   1d9fa:	3b01      	subs	r3, #1
	if (vq_ring_must_notify(vq))
   1d9fc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1d9fe:	b29b      	uxth	r3, r3
   1da00:	429a      	cmp	r2, r3
   1da02:	d813      	bhi.n	1da2c <virtqueue_kick+0x58>
	vq->vq_queued_cnt = 0;
   1da04:	2300      	movs	r3, #0
   1da06:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1da08:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1da0a:	2b01      	cmp	r3, #1
   1da0c:	d1fa      	bne.n	1da04 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1da0e:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1da10:	69c2      	ldr	r2, [r0, #28]
   1da12:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.used->idx;
   1da14:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1da16:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1da1a:	e7ec      	b.n	1d9f6 <virtqueue_kick+0x22>
						prev_idx) != 0;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1da1c:	b963      	cbnz	r3, 1da38 <virtqueue_kick+0x64>
			return (vq->vq_ring.used->flags &
   1da1e:	6a03      	ldr	r3, [r0, #32]
				VRING_USED_F_NO_NOTIFY) == 0;
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
			return (vq->vq_ring.avail->flags &
   1da20:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1da22:	43db      	mvns	r3, r3
   1da24:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1da28:	2b00      	cmp	r3, #0
   1da2a:	d0eb      	beq.n	1da04 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1da2c:	6923      	ldr	r3, [r4, #16]
   1da2e:	2b00      	cmp	r3, #0
   1da30:	d0e8      	beq.n	1da04 <virtqueue_kick+0x30>
		vq->notify(vq);
   1da32:	4620      	mov	r0, r4
   1da34:	4798      	blx	r3
   1da36:	e7e5      	b.n	1da04 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1da38:	2b01      	cmp	r3, #1
   1da3a:	d1e3      	bne.n	1da04 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1da3c:	69c3      	ldr	r3, [r0, #28]
   1da3e:	e7ef      	b.n	1da20 <virtqueue_kick+0x4c>

0001da40 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1da40:	69c2      	ldr	r2, [r0, #28]
   1da42:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   1da44:	8853      	ldrh	r3, [r2, #2]
   1da46:	428b      	cmp	r3, r1
   1da48:	d00a      	beq.n	1da60 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1da4a:	8943      	ldrh	r3, [r0, #10]
   1da4c:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1da4e:	400b      	ands	r3, r1
   1da50:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1da54:	889a      	ldrh	r2, [r3, #4]
   1da56:	6983      	ldr	r3, [r0, #24]
   1da58:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1da5c:	6898      	ldr	r0, [r3, #8]
	return len;
   1da5e:	4770      	bx	lr
		return 0;
   1da60:	2000      	movs	r0, #0
}
   1da62:	4770      	bx	lr

0001da64 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1da64:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1da68:	68c3      	ldr	r3, [r0, #12]
   1da6a:	b103      	cbz	r3, 1da6e <virtqueue_notification+0xa>
		vq->callback(vq);
   1da6c:	4718      	bx	r3
}
   1da6e:	4770      	bx	lr

0001da70 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1da70:	f04f 32ff 	mov.w	r2, #4294967295
   1da74:	f04f 33ff 	mov.w	r3, #4294967295
   1da78:	f7fb bc5c 	b.w	19334 <z_impl_k_sem_take>

0001da7c <rpmsg_unregister_endpoint>:
{
   1da7c:	b570      	push	{r4, r5, r6, lr}
   1da7e:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1da80:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1da82:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1da86:	4630      	mov	r0, r6
   1da88:	f7ff fff2 	bl	1da70 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1da8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1da8e:	1c5a      	adds	r2, r3, #1
   1da90:	d010      	beq.n	1dab4 <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1da92:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1da96:	2b7f      	cmp	r3, #127	; 0x7f
   1da98:	d80c      	bhi.n	1dab4 <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1da9a:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1da9c:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1da9e:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1daa0:	f003 031f 	and.w	r3, r3, #31
   1daa4:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1daa8:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   1daac:	ea22 0203 	bic.w	r2, r2, r3
   1dab0:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   1dab4:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1dab8:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1dabc:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1dabe:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1dac0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1dac4:	2300      	movs	r3, #0
   1dac6:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1dac8:	4630      	mov	r0, r6
}
   1daca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1dace:	f7fb bbf5 	b.w	192bc <z_impl_k_sem_give>

0001dad2 <rpmsg_send_ns_message>:
{
   1dad2:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   1dad4:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1dad6:	b08c      	sub	sp, #48	; 0x30
   1dad8:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1dada:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1dadc:	2220      	movs	r2, #32
   1dade:	4601      	mov	r1, r0
   1dae0:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1dae2:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1dae4:	f7fd ffb6 	bl	1ba54 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1dae8:	2328      	movs	r3, #40	; 0x28
   1daea:	2201      	movs	r2, #1
   1daec:	4620      	mov	r0, r4
   1daee:	e9cd 3200 	strd	r3, r2, [sp]
   1daf2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1daf4:	2235      	movs	r2, #53	; 0x35
   1daf6:	ab02      	add	r3, sp, #8
   1daf8:	f7f9 fbac 	bl	17254 <rpmsg_send_offchannel_raw>
}
   1dafc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1db00:	b00c      	add	sp, #48	; 0x30
   1db02:	bd10      	pop	{r4, pc}

0001db04 <rpmsg_get_endpoint>:
{
   1db04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1db08:	4680      	mov	r8, r0
   1db0a:	4689      	mov	r9, r1
   1db0c:	4615      	mov	r5, r2
   1db0e:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1db10:	6807      	ldr	r7, [r0, #0]
   1db12:	45b8      	cmp	r8, r7
   1db14:	d101      	bne.n	1db1a <rpmsg_get_endpoint+0x16>
	return NULL;
   1db16:	2400      	movs	r4, #0
   1db18:	e021      	b.n	1db5e <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1db1a:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1db1c:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1db20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1db22:	d006      	beq.n	1db32 <rpmsg_get_endpoint+0x2e>
   1db24:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1db26:	d01a      	beq.n	1db5e <rpmsg_get_endpoint+0x5a>
		if (name)
   1db28:	f1b9 0f00 	cmp.w	r9, #0
   1db2c:	d106      	bne.n	1db3c <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   1db2e:	683f      	ldr	r7, [r7, #0]
   1db30:	e7ef      	b.n	1db12 <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1db32:	3301      	adds	r3, #1
   1db34:	d1f8      	bne.n	1db28 <rpmsg_get_endpoint+0x24>
   1db36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1db38:	42b3      	cmp	r3, r6
   1db3a:	e7f4      	b.n	1db26 <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   1db3c:	2220      	movs	r2, #32
   1db3e:	4649      	mov	r1, r9
   1db40:	4620      	mov	r0, r4
   1db42:	f7fd ffb5 	bl	1bab0 <strncmp>
		if (!name || !name_match)
   1db46:	2800      	cmp	r0, #0
   1db48:	d1f1      	bne.n	1db2e <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1db4a:	1c72      	adds	r2, r6, #1
   1db4c:	d002      	beq.n	1db54 <rpmsg_get_endpoint+0x50>
   1db4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1db50:	42b3      	cmp	r3, r6
   1db52:	d004      	beq.n	1db5e <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1db54:	1c6b      	adds	r3, r5, #1
   1db56:	d1ea      	bne.n	1db2e <rpmsg_get_endpoint+0x2a>
   1db58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1db5a:	3301      	adds	r3, #1
   1db5c:	d1e7      	bne.n	1db2e <rpmsg_get_endpoint+0x2a>
}
   1db5e:	4620      	mov	r0, r4
   1db60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001db64 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   1db64:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1db66:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   1db6a:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   1db6e:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   1db70:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   1db72:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   1db74:	6013      	str	r3, [r2, #0]
}
   1db76:	4770      	bx	lr

0001db78 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1db78:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   1db7a:	4604      	mov	r4, r0
   1db7c:	b190      	cbz	r0, 1dba4 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   1db7e:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   1db80:	b183      	cbz	r3, 1dba4 <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   1db82:	7802      	ldrb	r2, [r0, #0]
   1db84:	b14a      	cbz	r2, 1db9a <rpmsg_destroy_ept+0x22>
   1db86:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1db8a:	b133      	cbz	r3, 1db9a <rpmsg_destroy_ept+0x22>
   1db8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1db8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1db92:	d302      	bcc.n	1db9a <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1db94:	2101      	movs	r1, #1
   1db96:	f7ff ff9c 	bl	1dad2 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1db9a:	4620      	mov	r0, r4
}
   1db9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1dba0:	f7ff bf6c 	b.w	1da7c <rpmsg_unregister_endpoint>
}
   1dba4:	bd10      	pop	{r4, pc}

0001dba6 <rpmsg_virtio_tx_callback>:
}
   1dba6:	4770      	bx	lr

0001dba8 <k_sem_give>:
   1dba8:	f7fb bb88 	b.w	192bc <z_impl_k_sem_give>

0001dbac <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1dbac:	f04f 32ff 	mov.w	r2, #4294967295
   1dbb0:	f04f 33ff 	mov.w	r3, #4294967295
   1dbb4:	f7fb bbbe 	b.w	19334 <z_impl_k_sem_take>

0001dbb8 <rpmsg_virtio_ns_callback>:
{
   1dbb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   1dbbc:	2a28      	cmp	r2, #40	; 0x28
{
   1dbbe:	4680      	mov	r8, r0
   1dbc0:	460e      	mov	r6, r1
   1dbc2:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   1dbc4:	d12b      	bne.n	1dc1e <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   1dbc6:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   1dbc8:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   1dbca:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   1dbce:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1dbd0:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1dbd2:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1dbd4:	1a71      	subs	r1, r6, r1
   1dbd6:	42a1      	cmp	r1, r4
   1dbd8:	bf28      	it	cs
   1dbda:	f04f 31ff 	movcs.w	r1, #4294967295
   1dbde:	f7ff fce7 	bl	1d5b0 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1dbe2:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   1dbe6:	f8d6 9020 	ldr.w	r9, [r6, #32]
   1dbea:	4638      	mov	r0, r7
   1dbec:	f7ff ffde 	bl	1dbac <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1dbf0:	464b      	mov	r3, r9
   1dbf2:	f04f 32ff 	mov.w	r2, #4294967295
   1dbf6:	4669      	mov	r1, sp
   1dbf8:	4628      	mov	r0, r5
   1dbfa:	f7ff ff83 	bl	1db04 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1dbfe:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1dc00:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1dc02:	07db      	lsls	r3, r3, #31
   1dc04:	d50f      	bpl.n	1dc26 <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   1dc06:	b110      	cbz	r0, 1dc0e <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1dc08:	f04f 33ff 	mov.w	r3, #4294967295
   1dc0c:	6283      	str	r3, [r0, #40]	; 0x28
   1dc0e:	4638      	mov	r0, r7
   1dc10:	f7ff ffca 	bl	1dba8 <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1dc14:	b11c      	cbz	r4, 1dc1e <rpmsg_virtio_ns_callback+0x66>
   1dc16:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1dc18:	b10b      	cbz	r3, 1dc1e <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   1dc1a:	4640      	mov	r0, r8
   1dc1c:	4798      	blx	r3
}
   1dc1e:	2000      	movs	r0, #0
   1dc20:	b009      	add	sp, #36	; 0x24
   1dc22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   1dc26:	b950      	cbnz	r0, 1dc3e <rpmsg_virtio_ns_callback+0x86>
   1dc28:	4638      	mov	r0, r7
   1dc2a:	f7ff ffbd 	bl	1dba8 <k_sem_give>
			if (rdev->ns_bind_cb)
   1dc2e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1dc30:	2b00      	cmp	r3, #0
   1dc32:	d0f4      	beq.n	1dc1e <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   1dc34:	464a      	mov	r2, r9
   1dc36:	4669      	mov	r1, sp
   1dc38:	4628      	mov	r0, r5
   1dc3a:	4798      	blx	r3
   1dc3c:	e7ef      	b.n	1dc1e <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   1dc3e:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   1dc42:	4638      	mov	r0, r7
   1dc44:	f7ff ffb0 	bl	1dba8 <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1dc48:	e7e9      	b.n	1dc1e <rpmsg_virtio_ns_callback+0x66>

0001dc4a <rpmsg_virtio_get_rx_buffer>:
{
   1dc4a:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1dc4c:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   1dc4e:	4613      	mov	r3, r2
   1dc50:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   1dc52:	b925      	cbnz	r5, 1dc5e <rpmsg_virtio_get_rx_buffer+0x14>
}
   1dc54:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1dc56:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1dc5a:	f7ff be07 	b.w	1d86c <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1dc5e:	2d01      	cmp	r5, #1
   1dc60:	d106      	bne.n	1dc70 <rpmsg_virtio_get_rx_buffer+0x26>
}
   1dc62:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1dc64:	460a      	mov	r2, r1
   1dc66:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1dc6a:	4619      	mov	r1, r3
   1dc6c:	f7ff be38 	b.w	1d8e0 <virtqueue_get_available_buffer>
}
   1dc70:	2000      	movs	r0, #0
   1dc72:	bc30      	pop	{r4, r5}
   1dc74:	4770      	bx	lr

0001dc76 <rpmsg_virtio_rx_callback>:
{
   1dc76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1dc7a:	6803      	ldr	r3, [r0, #0]
{
   1dc7c:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1dc7e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   1dc80:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1dc84:	4638      	mov	r0, r7
   1dc86:	f7ff ff91 	bl	1dbac <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1dc8a:	4630      	mov	r0, r6
   1dc8c:	f10d 020a 	add.w	r2, sp, #10
   1dc90:	a903      	add	r1, sp, #12
   1dc92:	f7ff ffda 	bl	1dc4a <rpmsg_virtio_get_rx_buffer>
   1dc96:	4604      	mov	r4, r0
   1dc98:	4638      	mov	r0, r7
   1dc9a:	f7ff ff85 	bl	1dba8 <k_sem_give>
	while (rp_hdr) {
   1dc9e:	b914      	cbnz	r4, 1dca6 <rpmsg_virtio_rx_callback+0x30>
}
   1dca0:	b006      	add	sp, #24
   1dca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dca6:	4638      	mov	r0, r7
   1dca8:	f7ff ff80 	bl	1dbac <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1dcac:	f04f 33ff 	mov.w	r3, #4294967295
   1dcb0:	2100      	movs	r1, #0
   1dcb2:	4630      	mov	r0, r6
   1dcb4:	6862      	ldr	r2, [r4, #4]
   1dcb6:	f7ff ff25 	bl	1db04 <rpmsg_get_endpoint>
   1dcba:	4605      	mov	r5, r0
   1dcbc:	4638      	mov	r0, r7
   1dcbe:	f7ff ff73 	bl	1dba8 <k_sem_give>
		if (ept) {
   1dcc2:	b185      	cbz	r5, 1dce6 <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1dcc4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
				ept->dest_addr = rp_hdr->src;
   1dcc6:	6823      	ldr	r3, [r4, #0]
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1dcc8:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1dcca:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   1dccc:	bf08      	it	eq
   1dcce:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1dcd0:	89a2      	ldrh	r2, [r4, #12]
   1dcd2:	9100      	str	r1, [sp, #0]
   1dcd4:	4628      	mov	r0, r5
   1dcd6:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1dcda:	f104 0110 	add.w	r1, r4, #16
   1dcde:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   1dce0:	2800      	cmp	r0, #0
   1dce2:	da00      	bge.n	1dce6 <rpmsg_virtio_rx_callback+0x70>
   1dce4:	e7fe      	b.n	1dce4 <rpmsg_virtio_rx_callback+0x6e>
   1dce6:	4638      	mov	r0, r7
   1dce8:	f7ff ff60 	bl	1dbac <__metal_mutex_acquire>
   1dcec:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1dcee:	9b03      	ldr	r3, [sp, #12]
   1dcf0:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   1dcf2:	b9b2      	cbnz	r2, 1dd22 <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1dcf4:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1dcf6:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1dcfa:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1dcfe:	2301      	movs	r3, #1
   1dd00:	a904      	add	r1, sp, #16
   1dd02:	f7ff fd53 	bl	1d7ac <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1dd06:	4630      	mov	r0, r6
   1dd08:	f10d 020a 	add.w	r2, sp, #10
   1dd0c:	a903      	add	r1, sp, #12
   1dd0e:	f7ff ff9c 	bl	1dc4a <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1dd12:	4604      	mov	r4, r0
   1dd14:	2800      	cmp	r0, #0
   1dd16:	d1bf      	bne.n	1dc98 <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   1dd18:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1dd1c:	f7ff fe5a 	bl	1d9d4 <virtqueue_kick>
   1dd20:	e7ba      	b.n	1dc98 <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   1dd22:	2a01      	cmp	r2, #1
   1dd24:	d1ef      	bne.n	1dd06 <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1dd26:	461a      	mov	r2, r3
   1dd28:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1dd2c:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1dd30:	f7f9 fa74 	bl	1721c <virtqueue_add_consumed_buffer>
   1dd34:	e7e7      	b.n	1dd06 <rpmsg_virtio_rx_callback+0x90>

0001dd36 <_rpmsg_virtio_get_buffer_size>:
{
   1dd36:	b508      	push	{r3, lr}
   1dd38:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1dd3a:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1dd3c:	b14b      	cbz	r3, 1dd52 <_rpmsg_virtio_get_buffer_size+0x1c>
	if (role == RPMSG_REMOTE) {
   1dd3e:	2b01      	cmp	r3, #1
   1dd40:	d10a      	bne.n	1dd58 <_rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1dd42:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   1dd46:	f7ff fe7b 	bl	1da40 <virtqueue_get_desc_size>
   1dd4a:	3810      	subs	r0, #16
   1dd4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1dd50:	bd08      	pop	{r3, pc}
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
   1dd52:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
   1dd56:	e7fb      	b.n	1dd50 <_rpmsg_virtio_get_buffer_size+0x1a>
	int length = 0;
   1dd58:	2000      	movs	r0, #0
	return length;
   1dd5a:	e7f9      	b.n	1dd50 <_rpmsg_virtio_get_buffer_size+0x1a>

0001dd5c <rpmsg_virtio_shm_pool_get_buffer>:
{
   1dd5c:	4603      	mov	r3, r0
	if (shpool->avail < size)
   1dd5e:	6842      	ldr	r2, [r0, #4]
{
   1dd60:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   1dd62:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1dd64:	bf29      	itett	cs
   1dd66:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   1dd68:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1dd6a:	1a84      	subcs	r4, r0, r2
   1dd6c:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   1dd6e:	bf22      	ittt	cs
   1dd70:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1dd72:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   1dd74:	605a      	strcs	r2, [r3, #4]
}
   1dd76:	bd10      	pop	{r4, pc}

0001dd78 <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   1dd78:	b110      	cbz	r0, 1dd80 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   1dd7a:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1dd7e:	6001      	str	r1, [r0, #0]
}
   1dd80:	4770      	bx	lr

0001dd82 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   1dd82:	f7fd b826 	b.w	1add2 <z_clock_idle_exit>

0001dd86 <k_heap_init>:
{
   1dd86:	b410      	push	{r4}
   1dd88:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1dd8c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1dd90:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1dd92:	f7ec befb 	b.w	ab8c <sys_heap_init>

0001dd96 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1dd96:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1dd9a:	428b      	cmp	r3, r1
   1dd9c:	d001      	beq.n	1dda2 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1dd9e:	f7fb b85b 	b.w	18e58 <z_set_prio>
}
   1dda2:	2000      	movs	r0, #0
   1dda4:	4770      	bx	lr

0001dda6 <z_impl_k_mutex_init>:
{
   1dda6:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1dda8:	2000      	movs	r0, #0
   1ddaa:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1ddae:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1ddb2:	4770      	bx	lr

0001ddb4 <z_queue_node_peek>:
{
   1ddb4:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1ddb6:	4604      	mov	r4, r0
   1ddb8:	b130      	cbz	r0, 1ddc8 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ddba:	6802      	ldr	r2, [r0, #0]
   1ddbc:	0793      	lsls	r3, r2, #30
   1ddbe:	d003      	beq.n	1ddc8 <z_queue_node_peek+0x14>
		ret = anode->data;
   1ddc0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1ddc2:	b109      	cbz	r1, 1ddc8 <z_queue_node_peek+0x14>
			k_free(anode);
   1ddc4:	f000 f982 	bl	1e0cc <k_free>
}
   1ddc8:	4620      	mov	r0, r4
   1ddca:	bd10      	pop	{r4, pc}

0001ddcc <z_impl_k_queue_init>:
	list->head = NULL;
   1ddcc:	2300      	movs	r3, #0
	list->tail = NULL;
   1ddce:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1ddd2:	6083      	str	r3, [r0, #8]
   1ddd4:	f100 030c 	add.w	r3, r0, #12
   1ddd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1dddc:	f100 0314 	add.w	r3, r0, #20
   1dde0:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   1dde4:	4770      	bx	lr

0001dde6 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1dde6:	2301      	movs	r3, #1
{
   1dde8:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1ddea:	9300      	str	r3, [sp, #0]
   1ddec:	2300      	movs	r3, #0
{
   1ddee:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1ddf0:	4619      	mov	r1, r3
   1ddf2:	f7fa f919 	bl	18028 <queue_insert>
}
   1ddf6:	b003      	add	sp, #12
   1ddf8:	f85d fb04 	ldr.w	pc, [sp], #4

0001ddfc <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1ddfc:	2300      	movs	r3, #0
{
   1ddfe:	b507      	push	{r0, r1, r2, lr}
   1de00:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1de02:	9300      	str	r3, [sp, #0]
   1de04:	4619      	mov	r1, r3
   1de06:	f7fa f90f 	bl	18028 <queue_insert>
}
   1de0a:	b003      	add	sp, #12
   1de0c:	f85d fb04 	ldr.w	pc, [sp], #4

0001de10 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1de10:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1de14:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1de18:	4298      	cmp	r0, r3
   1de1a:	bfac      	ite	ge
   1de1c:	2000      	movge	r0, #0
   1de1e:	2001      	movlt	r0, #1
   1de20:	4770      	bx	lr

0001de22 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1de22:	4603      	mov	r3, r0
   1de24:	b920      	cbnz	r0, 1de30 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1de26:	f3ef 8205 	mrs	r2, IPSR
   1de2a:	b90a      	cbnz	r2, 1de30 <z_reschedule_irqlock+0xe>
   1de2c:	f7ef bc76 	b.w	d71c <arch_swap>
   1de30:	f383 8811 	msr	BASEPRI, r3
   1de34:	f3bf 8f6f 	isb	sy
}
   1de38:	4770      	bx	lr

0001de3a <z_reschedule_unlocked>:
	__asm__ volatile(
   1de3a:	f04f 0320 	mov.w	r3, #32
   1de3e:	f3ef 8011 	mrs	r0, BASEPRI
   1de42:	f383 8811 	msr	BASEPRI, r3
   1de46:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1de4a:	f7ff bfea 	b.w	1de22 <z_reschedule_irqlock>

0001de4e <unpend_thread_no_timeout>:
{
   1de4e:	b510      	push	{r4, lr}
   1de50:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1de52:	f7fa fa23 	bl	1829c <pended_on>
   1de56:	4621      	mov	r1, r4
   1de58:	f7fa fb28 	bl	184ac <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1de5c:	7b63      	ldrb	r3, [r4, #13]
   1de5e:	f023 0302 	bic.w	r3, r3, #2
   1de62:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1de64:	2300      	movs	r3, #0
   1de66:	60a3      	str	r3, [r4, #8]
}
   1de68:	bd10      	pop	{r4, pc}

0001de6a <z_priq_dumb_best>:
{
   1de6a:	4603      	mov	r3, r0
	return list->head == list;
   1de6c:	6800      	ldr	r0, [r0, #0]
}
   1de6e:	4283      	cmp	r3, r0
   1de70:	bf08      	it	eq
   1de72:	2000      	moveq	r0, #0
   1de74:	4770      	bx	lr

0001de76 <z_unpend_all>:
{
   1de76:	b538      	push	{r3, r4, r5, lr}
   1de78:	4605      	mov	r5, r0
	int need_sched = 0;
   1de7a:	2000      	movs	r0, #0
   1de7c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1de7e:	42a5      	cmp	r5, r4
   1de80:	d000      	beq.n	1de84 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1de82:	b904      	cbnz	r4, 1de86 <z_unpend_all+0x10>
}
   1de84:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1de86:	4620      	mov	r0, r4
   1de88:	f7fa fb3c 	bl	18504 <z_unpend_thread>
		z_ready_thread(thread);
   1de8c:	4620      	mov	r0, r4
   1de8e:	f7fa fc53 	bl	18738 <z_ready_thread>
		need_sched = 1;
   1de92:	2001      	movs	r0, #1
   1de94:	e7f2      	b.n	1de7c <z_unpend_all+0x6>

0001de96 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1de96:	b15a      	cbz	r2, 1deb0 <z_impl_k_sem_init+0x1a>
   1de98:	428a      	cmp	r2, r1
   1de9a:	d309      	bcc.n	1deb0 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1de9c:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1dea0:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1dea4:	e9c0 0000 	strd	r0, r0, [r0]
   1dea8:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1deac:	2000      	movs	r0, #0
   1deae:	4770      	bx	lr
		return -EINVAL;
   1deb0:	f06f 0015 	mvn.w	r0, #21
}
   1deb4:	4770      	bx	lr

0001deb6 <k_is_in_isr>:
   1deb6:	f3ef 8005 	mrs	r0, IPSR
}
   1deba:	3800      	subs	r0, #0
   1debc:	bf18      	it	ne
   1debe:	2001      	movne	r0, #1
   1dec0:	4770      	bx	lr

0001dec2 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1dec2:	b108      	cbz	r0, 1dec8 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1dec4:	f7ed baac 	b.w	b420 <arch_busy_wait>
}
   1dec8:	4770      	bx	lr

0001deca <z_impl_k_thread_name_set>:
}
   1deca:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1dece:	4770      	bx	lr

0001ded0 <k_thread_name_get>:
}
   1ded0:	2000      	movs	r0, #0
   1ded2:	4770      	bx	lr

0001ded4 <k_work_submit_to_queue>:
{
   1ded4:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ded6:	f101 0308 	add.w	r3, r1, #8
   1deda:	e8d3 2fef 	ldaex	r2, [r3]
   1dede:	f042 0c01 	orr.w	ip, r2, #1
   1dee2:	e8c3 cfee 	stlex	lr, ip, [r3]
   1dee6:	f1be 0f00 	cmp.w	lr, #0
   1deea:	d1f6      	bne.n	1deda <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1deec:	07d3      	lsls	r3, r2, #31
   1deee:	d403      	bmi.n	1def8 <k_work_submit_to_queue+0x24>
}
   1def0:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1def4:	f7ff bf77 	b.w	1dde6 <k_queue_append>
}
   1def8:	f85d fb04 	ldr.w	pc, [sp], #4

0001defc <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1defc:	f1a0 0110 	sub.w	r1, r0, #16
   1df00:	6980      	ldr	r0, [r0, #24]
   1df02:	f7ff bfe7 	b.w	1ded4 <k_work_submit_to_queue>

0001df06 <work_cancel>:
{
   1df06:	b570      	push	{r4, r5, r6, lr}
   1df08:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1df0a:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1df0e:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   1df12:	07db      	lsls	r3, r3, #31
   1df14:	d52f      	bpl.n	1df76 <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1df16:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1df18:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   1df1a:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1df1c:	b913      	cbnz	r3, 1df24 <work_cancel+0x1e>
			return -EINVAL;
   1df1e:	f06f 0015 	mvn.w	r0, #21
}
   1df22:	bd70      	pop	{r4, r5, r6, pc}
   1df24:	429c      	cmp	r4, r3
   1df26:	d121      	bne.n	1df6c <work_cancel+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1df28:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1df2a:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1df2c:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   1df30:	b991      	cbnz	r1, 1df58 <work_cancel+0x52>
   1df32:	42b4      	cmp	r4, r6
	list->head = node;
   1df34:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1df36:	d100      	bne.n	1df3a <work_cancel+0x34>
	list->tail = node;
   1df38:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1df3a:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1df3c:	f003 0303 	and.w	r3, r3, #3
   1df40:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1df42:	2000      	movs	r0, #0
   1df44:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1df46:	e8d5 3fef 	ldaex	r3, [r5]
   1df4a:	f023 0301 	bic.w	r3, r3, #1
   1df4e:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1df52:	2a00      	cmp	r2, #0
   1df54:	d0e5      	beq.n	1df22 <work_cancel+0x1c>
   1df56:	e7f6      	b.n	1df46 <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1df58:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1df5a:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1df5c:	f003 0303 	and.w	r3, r3, #3
   1df60:	ea43 0300 	orr.w	r3, r3, r0
   1df64:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1df66:	bf08      	it	eq
   1df68:	6051      	streq	r1, [r2, #4]
}
   1df6a:	e7e6      	b.n	1df3a <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1df6c:	6818      	ldr	r0, [r3, #0]
   1df6e:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1df70:	f020 0303 	bic.w	r3, r0, #3
   1df74:	e7d2      	b.n	1df1c <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   1df76:	3010      	adds	r0, #16
   1df78:	f7fb fdd0 	bl	19b1c <z_abort_timeout>
		if (err) {
   1df7c:	2800      	cmp	r0, #0
   1df7e:	d0e0      	beq.n	1df42 <work_cancel+0x3c>
			return -EALREADY;
   1df80:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1df84:	e7cd      	b.n	1df22 <work_cancel+0x1c>

0001df86 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1df86:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1df88:	f7fb ff16 	bl	19db8 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1df8c:	bd08      	pop	{r3, pc}

0001df8e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1df8e:	f7fb bf13 	b.w	19db8 <z_tick_get>

0001df92 <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1df92:	f1b1 3fff 	cmp.w	r1, #4294967295
   1df96:	bf08      	it	eq
   1df98:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1df9c:	b538      	push	{r3, r4, r5, lr}
   1df9e:	4605      	mov	r5, r0
   1dfa0:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1dfa2:	d01d      	beq.n	1dfe0 <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1dfa4:	ea51 0300 	orrs.w	r3, r1, r0
   1dfa8:	d103      	bne.n	1dfb2 <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   1dfaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1dfae:	f7fb bf03 	b.w	19db8 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1dfb2:	f06f 0301 	mvn.w	r3, #1
   1dfb6:	1a18      	subs	r0, r3, r0
   1dfb8:	f04f 33ff 	mov.w	r3, #4294967295
   1dfbc:	eb63 0101 	sbc.w	r1, r3, r1
   1dfc0:	2900      	cmp	r1, #0
   1dfc2:	da0c      	bge.n	1dfde <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   1dfc4:	f7fb fef8 	bl	19db8 <z_tick_get>
   1dfc8:	2d01      	cmp	r5, #1
   1dfca:	4622      	mov	r2, r4
   1dfcc:	f174 0400 	sbcs.w	r4, r4, #0
   1dfd0:	462b      	mov	r3, r5
   1dfd2:	bfbc      	itt	lt
   1dfd4:	2301      	movlt	r3, #1
   1dfd6:	2200      	movlt	r2, #0
   1dfd8:	1818      	adds	r0, r3, r0
   1dfda:	eb41 0102 	adc.w	r1, r1, r2
}
   1dfde:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1dfe0:	f04f 30ff 	mov.w	r0, #4294967295
   1dfe4:	4601      	mov	r1, r0
   1dfe6:	e7fa      	b.n	1dfde <z_timeout_end_calc+0x4c>

0001dfe8 <k_work_submit_to_queue>:
{
   1dfe8:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dfea:	f101 0308 	add.w	r3, r1, #8
   1dfee:	e8d3 2fef 	ldaex	r2, [r3]
   1dff2:	f042 0c01 	orr.w	ip, r2, #1
   1dff6:	e8c3 cfee 	stlex	lr, ip, [r3]
   1dffa:	f1be 0f00 	cmp.w	lr, #0
   1dffe:	d1f6      	bne.n	1dfee <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1e000:	07d3      	lsls	r3, r2, #31
   1e002:	d403      	bmi.n	1e00c <k_work_submit_to_queue+0x24>
}
   1e004:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1e008:	f7ff beed 	b.w	1dde6 <k_queue_append>
}
   1e00c:	f85d fb04 	ldr.w	pc, [sp], #4

0001e010 <add_event>:
{
   1e010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e012:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1e014:	e9d0 2300 	ldrd	r2, r3, [r0]
   1e018:	4290      	cmp	r0, r2
   1e01a:	4604      	mov	r4, r0
   1e01c:	460d      	mov	r5, r1
   1e01e:	d106      	bne.n	1e02e <add_event+0x1e>
	node->prev = list->tail;
   1e020:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1e022:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1e024:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1e026:	6863      	ldr	r3, [r4, #4]
   1e028:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1e02a:	6065      	str	r5, [r4, #4]
}
   1e02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1e02e:	2b00      	cmp	r3, #0
   1e030:	d0f6      	beq.n	1e020 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1e032:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e034:	b100      	cbz	r0, 1e038 <add_event+0x28>
   1e036:	386c      	subs	r0, #108	; 0x6c
   1e038:	b107      	cbz	r7, 1e03c <add_event+0x2c>
   1e03a:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1e03c:	4639      	mov	r1, r7
   1e03e:	f7ff fee7 	bl	1de10 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1e042:	2800      	cmp	r0, #0
   1e044:	d1ec      	bne.n	1e020 <add_event+0x10>
	return list->head == list;
   1e046:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e048:	42b4      	cmp	r4, r6
   1e04a:	d0e9      	beq.n	1e020 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1e04c:	2e00      	cmp	r6, #0
   1e04e:	d0e7      	beq.n	1e020 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1e050:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e052:	b101      	cbz	r1, 1e056 <add_event+0x46>
   1e054:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1e056:	4638      	mov	r0, r7
   1e058:	f7ff feda 	bl	1de10 <z_is_t1_higher_prio_than_t2>
   1e05c:	b128      	cbz	r0, 1e06a <add_event+0x5a>
	node->prev = successor->prev;
   1e05e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1e060:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1e064:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1e066:	6075      	str	r5, [r6, #4]
			return;
   1e068:	e7e0      	b.n	1e02c <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1e06a:	6863      	ldr	r3, [r4, #4]
   1e06c:	429e      	cmp	r6, r3
   1e06e:	d0d7      	beq.n	1e020 <add_event+0x10>
   1e070:	6836      	ldr	r6, [r6, #0]
   1e072:	e7eb      	b.n	1e04c <add_event+0x3c>

0001e074 <z_handle_obj_poll_events>:
{
   1e074:	4603      	mov	r3, r0
	return list->head == list;
   1e076:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1e078:	4283      	cmp	r3, r0
   1e07a:	d008      	beq.n	1e08e <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1e07c:	e9d0 3200 	ldrd	r3, r2, [r0]
   1e080:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1e082:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e084:	2300      	movs	r3, #0
	node->prev = NULL;
   1e086:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1e08a:	f7fb bed3 	b.w	19e34 <signal_poll_event>
}
   1e08e:	4770      	bx	lr

0001e090 <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1e090:	2904      	cmp	r1, #4
{
   1e092:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1e096:	460d      	mov	r5, r1
   1e098:	bf38      	it	cc
   1e09a:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e09c:	1952      	adds	r2, r2, r5
{
   1e09e:	4606      	mov	r6, r0
   1e0a0:	d209      	bcs.n	1e0b6 <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   1e0a2:	f04f 0800 	mov.w	r8, #0
   1e0a6:	f04f 0900 	mov.w	r9, #0
   1e0aa:	e9cd 8900 	strd	r8, r9, [sp]
   1e0ae:	f7f9 fcad 	bl	17a0c <k_heap_aligned_alloc>
	if (mem == NULL) {
   1e0b2:	4604      	mov	r4, r0
   1e0b4:	b918      	cbnz	r0, 1e0be <z_heap_aligned_alloc+0x2e>
		return NULL;
   1e0b6:	2000      	movs	r0, #0
}
   1e0b8:	b002      	add	sp, #8
   1e0ba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   1e0be:	462a      	mov	r2, r5
   1e0c0:	21ff      	movs	r1, #255	; 0xff
   1e0c2:	f7fd fd42 	bl	1bb4a <memset>
	*heap_ref = heap;
   1e0c6:	6026      	str	r6, [r4, #0]
	return mem + excess;
   1e0c8:	1960      	adds	r0, r4, r5
   1e0ca:	e7f5      	b.n	1e0b8 <z_heap_aligned_alloc+0x28>

0001e0cc <k_free>:
	if (ptr != NULL) {
   1e0cc:	b138      	cbz	r0, 1e0de <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1e0ce:	1f03      	subs	r3, r0, #4
   1e0d0:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   1e0d2:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1e0d6:	1c42      	adds	r2, r0, #1
   1e0d8:	d0fa      	beq.n	1e0d0 <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   1e0da:	f7f9 bd1f 	b.w	17b1c <k_heap_free>
}
   1e0de:	4770      	bx	lr

0001e0e0 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1e0e0:	4770      	bx	lr
