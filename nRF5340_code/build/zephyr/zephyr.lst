
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00008000 <_vector_table>:
    8000:	28 eb 00 20 9d cf 00 00 b3 ac 01 00 cd cf 00 00     (.. ............
    8010:	cd cf 00 00 cd cf 00 00 cd cf 00 00 cd cf 00 00     ................
	...
    802c:	65 cd 00 00 cd cf 00 00 00 00 00 00 09 cd 00 00     e...............
    803c:	c9 ba 00 00                                         ....

00008040 <_irq_vector_table>:
    8040:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    8050:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    8060:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    8070:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    8080:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    8090:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    80a0:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    80b0:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    80c0:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    80d0:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    80e0:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    80f0:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    8100:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    8110:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    8120:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    8130:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    8140:	5d cf 00 00 5d cf 00 00 5d cf 00 00 5d cf 00 00     ]...]...]...]...
    8150:	5d cf 00 00                                         ]...

00008154 <_vector_end>:
	...

00008200 <m_firmware_info>:
    8200:	de e6 1e 28 4c bb ce 8f 02 35 00 00 3c 00 00 00     ...(L....5..<...
    8210:	fc 9f 01 00 01 00 00 00 00 80 00 00 00 80 00 00     ................
    8220:	ff ff 02 91 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

Disassembly of section text:

00008240 <__aeabi_drsub>:
    8240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    8244:	e002      	b.n	824c <__adddf3>
    8246:	bf00      	nop

00008248 <__aeabi_dsub>:
    8248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000824c <__adddf3>:
    824c:	b530      	push	{r4, r5, lr}
    824e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    8252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    8256:	ea94 0f05 	teq	r4, r5
    825a:	bf08      	it	eq
    825c:	ea90 0f02 	teqeq	r0, r2
    8260:	bf1f      	itttt	ne
    8262:	ea54 0c00 	orrsne.w	ip, r4, r0
    8266:	ea55 0c02 	orrsne.w	ip, r5, r2
    826a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    826e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8272:	f000 80e2 	beq.w	843a <__adddf3+0x1ee>
    8276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    827a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    827e:	bfb8      	it	lt
    8280:	426d      	neglt	r5, r5
    8282:	dd0c      	ble.n	829e <__adddf3+0x52>
    8284:	442c      	add	r4, r5
    8286:	ea80 0202 	eor.w	r2, r0, r2
    828a:	ea81 0303 	eor.w	r3, r1, r3
    828e:	ea82 0000 	eor.w	r0, r2, r0
    8292:	ea83 0101 	eor.w	r1, r3, r1
    8296:	ea80 0202 	eor.w	r2, r0, r2
    829a:	ea81 0303 	eor.w	r3, r1, r3
    829e:	2d36      	cmp	r5, #54	; 0x36
    82a0:	bf88      	it	hi
    82a2:	bd30      	pophi	{r4, r5, pc}
    82a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    82a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    82ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    82b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    82b4:	d002      	beq.n	82bc <__adddf3+0x70>
    82b6:	4240      	negs	r0, r0
    82b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    82bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    82c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    82c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    82c8:	d002      	beq.n	82d0 <__adddf3+0x84>
    82ca:	4252      	negs	r2, r2
    82cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    82d0:	ea94 0f05 	teq	r4, r5
    82d4:	f000 80a7 	beq.w	8426 <__adddf3+0x1da>
    82d8:	f1a4 0401 	sub.w	r4, r4, #1
    82dc:	f1d5 0e20 	rsbs	lr, r5, #32
    82e0:	db0d      	blt.n	82fe <__adddf3+0xb2>
    82e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    82e6:	fa22 f205 	lsr.w	r2, r2, r5
    82ea:	1880      	adds	r0, r0, r2
    82ec:	f141 0100 	adc.w	r1, r1, #0
    82f0:	fa03 f20e 	lsl.w	r2, r3, lr
    82f4:	1880      	adds	r0, r0, r2
    82f6:	fa43 f305 	asr.w	r3, r3, r5
    82fa:	4159      	adcs	r1, r3
    82fc:	e00e      	b.n	831c <__adddf3+0xd0>
    82fe:	f1a5 0520 	sub.w	r5, r5, #32
    8302:	f10e 0e20 	add.w	lr, lr, #32
    8306:	2a01      	cmp	r2, #1
    8308:	fa03 fc0e 	lsl.w	ip, r3, lr
    830c:	bf28      	it	cs
    830e:	f04c 0c02 	orrcs.w	ip, ip, #2
    8312:	fa43 f305 	asr.w	r3, r3, r5
    8316:	18c0      	adds	r0, r0, r3
    8318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    831c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8320:	d507      	bpl.n	8332 <__adddf3+0xe6>
    8322:	f04f 0e00 	mov.w	lr, #0
    8326:	f1dc 0c00 	rsbs	ip, ip, #0
    832a:	eb7e 0000 	sbcs.w	r0, lr, r0
    832e:	eb6e 0101 	sbc.w	r1, lr, r1
    8332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    8336:	d31b      	bcc.n	8370 <__adddf3+0x124>
    8338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    833c:	d30c      	bcc.n	8358 <__adddf3+0x10c>
    833e:	0849      	lsrs	r1, r1, #1
    8340:	ea5f 0030 	movs.w	r0, r0, rrx
    8344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    8348:	f104 0401 	add.w	r4, r4, #1
    834c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    8350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    8354:	f080 809a 	bcs.w	848c <__adddf3+0x240>
    8358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    835c:	bf08      	it	eq
    835e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8362:	f150 0000 	adcs.w	r0, r0, #0
    8366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    836a:	ea41 0105 	orr.w	r1, r1, r5
    836e:	bd30      	pop	{r4, r5, pc}
    8370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    8374:	4140      	adcs	r0, r0
    8376:	eb41 0101 	adc.w	r1, r1, r1
    837a:	3c01      	subs	r4, #1
    837c:	bf28      	it	cs
    837e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    8382:	d2e9      	bcs.n	8358 <__adddf3+0x10c>
    8384:	f091 0f00 	teq	r1, #0
    8388:	bf04      	itt	eq
    838a:	4601      	moveq	r1, r0
    838c:	2000      	moveq	r0, #0
    838e:	fab1 f381 	clz	r3, r1
    8392:	bf08      	it	eq
    8394:	3320      	addeq	r3, #32
    8396:	f1a3 030b 	sub.w	r3, r3, #11
    839a:	f1b3 0220 	subs.w	r2, r3, #32
    839e:	da0c      	bge.n	83ba <__adddf3+0x16e>
    83a0:	320c      	adds	r2, #12
    83a2:	dd08      	ble.n	83b6 <__adddf3+0x16a>
    83a4:	f102 0c14 	add.w	ip, r2, #20
    83a8:	f1c2 020c 	rsb	r2, r2, #12
    83ac:	fa01 f00c 	lsl.w	r0, r1, ip
    83b0:	fa21 f102 	lsr.w	r1, r1, r2
    83b4:	e00c      	b.n	83d0 <__adddf3+0x184>
    83b6:	f102 0214 	add.w	r2, r2, #20
    83ba:	bfd8      	it	le
    83bc:	f1c2 0c20 	rsble	ip, r2, #32
    83c0:	fa01 f102 	lsl.w	r1, r1, r2
    83c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    83c8:	bfdc      	itt	le
    83ca:	ea41 010c 	orrle.w	r1, r1, ip
    83ce:	4090      	lslle	r0, r2
    83d0:	1ae4      	subs	r4, r4, r3
    83d2:	bfa2      	ittt	ge
    83d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    83d8:	4329      	orrge	r1, r5
    83da:	bd30      	popge	{r4, r5, pc}
    83dc:	ea6f 0404 	mvn.w	r4, r4
    83e0:	3c1f      	subs	r4, #31
    83e2:	da1c      	bge.n	841e <__adddf3+0x1d2>
    83e4:	340c      	adds	r4, #12
    83e6:	dc0e      	bgt.n	8406 <__adddf3+0x1ba>
    83e8:	f104 0414 	add.w	r4, r4, #20
    83ec:	f1c4 0220 	rsb	r2, r4, #32
    83f0:	fa20 f004 	lsr.w	r0, r0, r4
    83f4:	fa01 f302 	lsl.w	r3, r1, r2
    83f8:	ea40 0003 	orr.w	r0, r0, r3
    83fc:	fa21 f304 	lsr.w	r3, r1, r4
    8400:	ea45 0103 	orr.w	r1, r5, r3
    8404:	bd30      	pop	{r4, r5, pc}
    8406:	f1c4 040c 	rsb	r4, r4, #12
    840a:	f1c4 0220 	rsb	r2, r4, #32
    840e:	fa20 f002 	lsr.w	r0, r0, r2
    8412:	fa01 f304 	lsl.w	r3, r1, r4
    8416:	ea40 0003 	orr.w	r0, r0, r3
    841a:	4629      	mov	r1, r5
    841c:	bd30      	pop	{r4, r5, pc}
    841e:	fa21 f004 	lsr.w	r0, r1, r4
    8422:	4629      	mov	r1, r5
    8424:	bd30      	pop	{r4, r5, pc}
    8426:	f094 0f00 	teq	r4, #0
    842a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    842e:	bf06      	itte	eq
    8430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    8434:	3401      	addeq	r4, #1
    8436:	3d01      	subne	r5, #1
    8438:	e74e      	b.n	82d8 <__adddf3+0x8c>
    843a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    843e:	bf18      	it	ne
    8440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    8444:	d029      	beq.n	849a <__adddf3+0x24e>
    8446:	ea94 0f05 	teq	r4, r5
    844a:	bf08      	it	eq
    844c:	ea90 0f02 	teqeq	r0, r2
    8450:	d005      	beq.n	845e <__adddf3+0x212>
    8452:	ea54 0c00 	orrs.w	ip, r4, r0
    8456:	bf04      	itt	eq
    8458:	4619      	moveq	r1, r3
    845a:	4610      	moveq	r0, r2
    845c:	bd30      	pop	{r4, r5, pc}
    845e:	ea91 0f03 	teq	r1, r3
    8462:	bf1e      	ittt	ne
    8464:	2100      	movne	r1, #0
    8466:	2000      	movne	r0, #0
    8468:	bd30      	popne	{r4, r5, pc}
    846a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    846e:	d105      	bne.n	847c <__adddf3+0x230>
    8470:	0040      	lsls	r0, r0, #1
    8472:	4149      	adcs	r1, r1
    8474:	bf28      	it	cs
    8476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    847a:	bd30      	pop	{r4, r5, pc}
    847c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8480:	bf3c      	itt	cc
    8482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    8486:	bd30      	popcc	{r4, r5, pc}
    8488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    848c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8494:	f04f 0000 	mov.w	r0, #0
    8498:	bd30      	pop	{r4, r5, pc}
    849a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    849e:	bf1a      	itte	ne
    84a0:	4619      	movne	r1, r3
    84a2:	4610      	movne	r0, r2
    84a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    84a8:	bf1c      	itt	ne
    84aa:	460b      	movne	r3, r1
    84ac:	4602      	movne	r2, r0
    84ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    84b2:	bf06      	itte	eq
    84b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    84b8:	ea91 0f03 	teqeq	r1, r3
    84bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    84c0:	bd30      	pop	{r4, r5, pc}
    84c2:	bf00      	nop

000084c4 <__aeabi_ui2d>:
    84c4:	f090 0f00 	teq	r0, #0
    84c8:	bf04      	itt	eq
    84ca:	2100      	moveq	r1, #0
    84cc:	4770      	bxeq	lr
    84ce:	b530      	push	{r4, r5, lr}
    84d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84d8:	f04f 0500 	mov.w	r5, #0
    84dc:	f04f 0100 	mov.w	r1, #0
    84e0:	e750      	b.n	8384 <__adddf3+0x138>
    84e2:	bf00      	nop

000084e4 <__aeabi_i2d>:
    84e4:	f090 0f00 	teq	r0, #0
    84e8:	bf04      	itt	eq
    84ea:	2100      	moveq	r1, #0
    84ec:	4770      	bxeq	lr
    84ee:	b530      	push	{r4, r5, lr}
    84f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    84f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    84f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    84fc:	bf48      	it	mi
    84fe:	4240      	negmi	r0, r0
    8500:	f04f 0100 	mov.w	r1, #0
    8504:	e73e      	b.n	8384 <__adddf3+0x138>
    8506:	bf00      	nop

00008508 <__aeabi_f2d>:
    8508:	0042      	lsls	r2, r0, #1
    850a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    850e:	ea4f 0131 	mov.w	r1, r1, rrx
    8512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    8516:	bf1f      	itttt	ne
    8518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    851c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    8520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    8524:	4770      	bxne	lr
    8526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    852a:	bf08      	it	eq
    852c:	4770      	bxeq	lr
    852e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    8532:	bf04      	itt	eq
    8534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    8538:	4770      	bxeq	lr
    853a:	b530      	push	{r4, r5, lr}
    853c:	f44f 7460 	mov.w	r4, #896	; 0x380
    8540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8548:	e71c      	b.n	8384 <__adddf3+0x138>
    854a:	bf00      	nop

0000854c <__aeabi_ul2d>:
    854c:	ea50 0201 	orrs.w	r2, r0, r1
    8550:	bf08      	it	eq
    8552:	4770      	bxeq	lr
    8554:	b530      	push	{r4, r5, lr}
    8556:	f04f 0500 	mov.w	r5, #0
    855a:	e00a      	b.n	8572 <__aeabi_l2d+0x16>

0000855c <__aeabi_l2d>:
    855c:	ea50 0201 	orrs.w	r2, r0, r1
    8560:	bf08      	it	eq
    8562:	4770      	bxeq	lr
    8564:	b530      	push	{r4, r5, lr}
    8566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    856a:	d502      	bpl.n	8572 <__aeabi_l2d+0x16>
    856c:	4240      	negs	r0, r0
    856e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    857a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    857e:	f43f aed8 	beq.w	8332 <__adddf3+0xe6>
    8582:	f04f 0203 	mov.w	r2, #3
    8586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    858a:	bf18      	it	ne
    858c:	3203      	addne	r2, #3
    858e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8592:	bf18      	it	ne
    8594:	3203      	addne	r2, #3
    8596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    859a:	f1c2 0320 	rsb	r3, r2, #32
    859e:	fa00 fc03 	lsl.w	ip, r0, r3
    85a2:	fa20 f002 	lsr.w	r0, r0, r2
    85a6:	fa01 fe03 	lsl.w	lr, r1, r3
    85aa:	ea40 000e 	orr.w	r0, r0, lr
    85ae:	fa21 f102 	lsr.w	r1, r1, r2
    85b2:	4414      	add	r4, r2
    85b4:	e6bd      	b.n	8332 <__adddf3+0xe6>
    85b6:	bf00      	nop

000085b8 <__aeabi_dmul>:
    85b8:	b570      	push	{r4, r5, r6, lr}
    85ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
    85be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    85c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    85c6:	bf1d      	ittte	ne
    85c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    85cc:	ea94 0f0c 	teqne	r4, ip
    85d0:	ea95 0f0c 	teqne	r5, ip
    85d4:	f000 f8de 	bleq	8794 <__aeabi_dmul+0x1dc>
    85d8:	442c      	add	r4, r5
    85da:	ea81 0603 	eor.w	r6, r1, r3
    85de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    85e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    85e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    85ea:	bf18      	it	ne
    85ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    85f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    85f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    85f8:	d038      	beq.n	866c <__aeabi_dmul+0xb4>
    85fa:	fba0 ce02 	umull	ip, lr, r0, r2
    85fe:	f04f 0500 	mov.w	r5, #0
    8602:	fbe1 e502 	umlal	lr, r5, r1, r2
    8606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    860a:	fbe0 e503 	umlal	lr, r5, r0, r3
    860e:	f04f 0600 	mov.w	r6, #0
    8612:	fbe1 5603 	umlal	r5, r6, r1, r3
    8616:	f09c 0f00 	teq	ip, #0
    861a:	bf18      	it	ne
    861c:	f04e 0e01 	orrne.w	lr, lr, #1
    8620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    862c:	d204      	bcs.n	8638 <__aeabi_dmul+0x80>
    862e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    8632:	416d      	adcs	r5, r5
    8634:	eb46 0606 	adc.w	r6, r6, r6
    8638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    863c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    8644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    864c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8650:	bf88      	it	hi
    8652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8656:	d81e      	bhi.n	8696 <__aeabi_dmul+0xde>
    8658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    865c:	bf08      	it	eq
    865e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    8662:	f150 0000 	adcs.w	r0, r0, #0
    8666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    866a:	bd70      	pop	{r4, r5, r6, pc}
    866c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8670:	ea46 0101 	orr.w	r1, r6, r1
    8674:	ea40 0002 	orr.w	r0, r0, r2
    8678:	ea81 0103 	eor.w	r1, r1, r3
    867c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8680:	bfc2      	ittt	gt
    8682:	ebd4 050c 	rsbsgt	r5, r4, ip
    8686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    868a:	bd70      	popgt	{r4, r5, r6, pc}
    868c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8690:	f04f 0e00 	mov.w	lr, #0
    8694:	3c01      	subs	r4, #1
    8696:	f300 80ab 	bgt.w	87f0 <__aeabi_dmul+0x238>
    869a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    869e:	bfde      	ittt	le
    86a0:	2000      	movle	r0, #0
    86a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    86a6:	bd70      	pople	{r4, r5, r6, pc}
    86a8:	f1c4 0400 	rsb	r4, r4, #0
    86ac:	3c20      	subs	r4, #32
    86ae:	da35      	bge.n	871c <__aeabi_dmul+0x164>
    86b0:	340c      	adds	r4, #12
    86b2:	dc1b      	bgt.n	86ec <__aeabi_dmul+0x134>
    86b4:	f104 0414 	add.w	r4, r4, #20
    86b8:	f1c4 0520 	rsb	r5, r4, #32
    86bc:	fa00 f305 	lsl.w	r3, r0, r5
    86c0:	fa20 f004 	lsr.w	r0, r0, r4
    86c4:	fa01 f205 	lsl.w	r2, r1, r5
    86c8:	ea40 0002 	orr.w	r0, r0, r2
    86cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    86d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    86d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    86d8:	fa21 f604 	lsr.w	r6, r1, r4
    86dc:	eb42 0106 	adc.w	r1, r2, r6
    86e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    86e4:	bf08      	it	eq
    86e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    86ea:	bd70      	pop	{r4, r5, r6, pc}
    86ec:	f1c4 040c 	rsb	r4, r4, #12
    86f0:	f1c4 0520 	rsb	r5, r4, #32
    86f4:	fa00 f304 	lsl.w	r3, r0, r4
    86f8:	fa20 f005 	lsr.w	r0, r0, r5
    86fc:	fa01 f204 	lsl.w	r2, r1, r4
    8700:	ea40 0002 	orr.w	r0, r0, r2
    8704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    870c:	f141 0100 	adc.w	r1, r1, #0
    8710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8714:	bf08      	it	eq
    8716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    871a:	bd70      	pop	{r4, r5, r6, pc}
    871c:	f1c4 0520 	rsb	r5, r4, #32
    8720:	fa00 f205 	lsl.w	r2, r0, r5
    8724:	ea4e 0e02 	orr.w	lr, lr, r2
    8728:	fa20 f304 	lsr.w	r3, r0, r4
    872c:	fa01 f205 	lsl.w	r2, r1, r5
    8730:	ea43 0302 	orr.w	r3, r3, r2
    8734:	fa21 f004 	lsr.w	r0, r1, r4
    8738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    873c:	fa21 f204 	lsr.w	r2, r1, r4
    8740:	ea20 0002 	bic.w	r0, r0, r2
    8744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    874c:	bf08      	it	eq
    874e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8752:	bd70      	pop	{r4, r5, r6, pc}
    8754:	f094 0f00 	teq	r4, #0
    8758:	d10f      	bne.n	877a <__aeabi_dmul+0x1c2>
    875a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    875e:	0040      	lsls	r0, r0, #1
    8760:	eb41 0101 	adc.w	r1, r1, r1
    8764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8768:	bf08      	it	eq
    876a:	3c01      	subeq	r4, #1
    876c:	d0f7      	beq.n	875e <__aeabi_dmul+0x1a6>
    876e:	ea41 0106 	orr.w	r1, r1, r6
    8772:	f095 0f00 	teq	r5, #0
    8776:	bf18      	it	ne
    8778:	4770      	bxne	lr
    877a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    877e:	0052      	lsls	r2, r2, #1
    8780:	eb43 0303 	adc.w	r3, r3, r3
    8784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8788:	bf08      	it	eq
    878a:	3d01      	subeq	r5, #1
    878c:	d0f7      	beq.n	877e <__aeabi_dmul+0x1c6>
    878e:	ea43 0306 	orr.w	r3, r3, r6
    8792:	4770      	bx	lr
    8794:	ea94 0f0c 	teq	r4, ip
    8798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    879c:	bf18      	it	ne
    879e:	ea95 0f0c 	teqne	r5, ip
    87a2:	d00c      	beq.n	87be <__aeabi_dmul+0x206>
    87a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87a8:	bf18      	it	ne
    87aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87ae:	d1d1      	bne.n	8754 <__aeabi_dmul+0x19c>
    87b0:	ea81 0103 	eor.w	r1, r1, r3
    87b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87b8:	f04f 0000 	mov.w	r0, #0
    87bc:	bd70      	pop	{r4, r5, r6, pc}
    87be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    87c2:	bf06      	itte	eq
    87c4:	4610      	moveq	r0, r2
    87c6:	4619      	moveq	r1, r3
    87c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    87cc:	d019      	beq.n	8802 <__aeabi_dmul+0x24a>
    87ce:	ea94 0f0c 	teq	r4, ip
    87d2:	d102      	bne.n	87da <__aeabi_dmul+0x222>
    87d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    87d8:	d113      	bne.n	8802 <__aeabi_dmul+0x24a>
    87da:	ea95 0f0c 	teq	r5, ip
    87de:	d105      	bne.n	87ec <__aeabi_dmul+0x234>
    87e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    87e4:	bf1c      	itt	ne
    87e6:	4610      	movne	r0, r2
    87e8:	4619      	movne	r1, r3
    87ea:	d10a      	bne.n	8802 <__aeabi_dmul+0x24a>
    87ec:	ea81 0103 	eor.w	r1, r1, r3
    87f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    87f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    87f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    87fc:	f04f 0000 	mov.w	r0, #0
    8800:	bd70      	pop	{r4, r5, r6, pc}
    8802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    880a:	bd70      	pop	{r4, r5, r6, pc}

0000880c <__aeabi_ddiv>:
    880c:	b570      	push	{r4, r5, r6, lr}
    880e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    881a:	bf1d      	ittte	ne
    881c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8820:	ea94 0f0c 	teqne	r4, ip
    8824:	ea95 0f0c 	teqne	r5, ip
    8828:	f000 f8a7 	bleq	897a <__aeabi_ddiv+0x16e>
    882c:	eba4 0405 	sub.w	r4, r4, r5
    8830:	ea81 0e03 	eor.w	lr, r1, r3
    8834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8838:	ea4f 3101 	mov.w	r1, r1, lsl #12
    883c:	f000 8088 	beq.w	8950 <__aeabi_ddiv+0x144>
    8840:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    884c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8850:	ea4f 2202 	mov.w	r2, r2, lsl #8
    8854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    885c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    8864:	429d      	cmp	r5, r3
    8866:	bf08      	it	eq
    8868:	4296      	cmpeq	r6, r2
    886a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    886e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    8872:	d202      	bcs.n	887a <__aeabi_ddiv+0x6e>
    8874:	085b      	lsrs	r3, r3, #1
    8876:	ea4f 0232 	mov.w	r2, r2, rrx
    887a:	1ab6      	subs	r6, r6, r2
    887c:	eb65 0503 	sbc.w	r5, r5, r3
    8880:	085b      	lsrs	r3, r3, #1
    8882:	ea4f 0232 	mov.w	r2, r2, rrx
    8886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    888a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    888e:	ebb6 0e02 	subs.w	lr, r6, r2
    8892:	eb75 0e03 	sbcs.w	lr, r5, r3
    8896:	bf22      	ittt	cs
    8898:	1ab6      	subcs	r6, r6, r2
    889a:	4675      	movcs	r5, lr
    889c:	ea40 000c 	orrcs.w	r0, r0, ip
    88a0:	085b      	lsrs	r3, r3, #1
    88a2:	ea4f 0232 	mov.w	r2, r2, rrx
    88a6:	ebb6 0e02 	subs.w	lr, r6, r2
    88aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    88ae:	bf22      	ittt	cs
    88b0:	1ab6      	subcs	r6, r6, r2
    88b2:	4675      	movcs	r5, lr
    88b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    88b8:	085b      	lsrs	r3, r3, #1
    88ba:	ea4f 0232 	mov.w	r2, r2, rrx
    88be:	ebb6 0e02 	subs.w	lr, r6, r2
    88c2:	eb75 0e03 	sbcs.w	lr, r5, r3
    88c6:	bf22      	ittt	cs
    88c8:	1ab6      	subcs	r6, r6, r2
    88ca:	4675      	movcs	r5, lr
    88cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    88d0:	085b      	lsrs	r3, r3, #1
    88d2:	ea4f 0232 	mov.w	r2, r2, rrx
    88d6:	ebb6 0e02 	subs.w	lr, r6, r2
    88da:	eb75 0e03 	sbcs.w	lr, r5, r3
    88de:	bf22      	ittt	cs
    88e0:	1ab6      	subcs	r6, r6, r2
    88e2:	4675      	movcs	r5, lr
    88e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    88e8:	ea55 0e06 	orrs.w	lr, r5, r6
    88ec:	d018      	beq.n	8920 <__aeabi_ddiv+0x114>
    88ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
    88f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    88f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    88fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    88fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    890a:	d1c0      	bne.n	888e <__aeabi_ddiv+0x82>
    890c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8910:	d10b      	bne.n	892a <__aeabi_ddiv+0x11e>
    8912:	ea41 0100 	orr.w	r1, r1, r0
    8916:	f04f 0000 	mov.w	r0, #0
    891a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    891e:	e7b6      	b.n	888e <__aeabi_ddiv+0x82>
    8920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8924:	bf04      	itt	eq
    8926:	4301      	orreq	r1, r0
    8928:	2000      	moveq	r0, #0
    892a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    892e:	bf88      	it	hi
    8930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8934:	f63f aeaf 	bhi.w	8696 <__aeabi_dmul+0xde>
    8938:	ebb5 0c03 	subs.w	ip, r5, r3
    893c:	bf04      	itt	eq
    893e:	ebb6 0c02 	subseq.w	ip, r6, r2
    8942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8946:	f150 0000 	adcs.w	r0, r0, #0
    894a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    894e:	bd70      	pop	{r4, r5, r6, pc}
    8950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    8954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    895c:	bfc2      	ittt	gt
    895e:	ebd4 050c 	rsbsgt	r5, r4, ip
    8962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8966:	bd70      	popgt	{r4, r5, r6, pc}
    8968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    896c:	f04f 0e00 	mov.w	lr, #0
    8970:	3c01      	subs	r4, #1
    8972:	e690      	b.n	8696 <__aeabi_dmul+0xde>
    8974:	ea45 0e06 	orr.w	lr, r5, r6
    8978:	e68d      	b.n	8696 <__aeabi_dmul+0xde>
    897a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    897e:	ea94 0f0c 	teq	r4, ip
    8982:	bf08      	it	eq
    8984:	ea95 0f0c 	teqeq	r5, ip
    8988:	f43f af3b 	beq.w	8802 <__aeabi_dmul+0x24a>
    898c:	ea94 0f0c 	teq	r4, ip
    8990:	d10a      	bne.n	89a8 <__aeabi_ddiv+0x19c>
    8992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8996:	f47f af34 	bne.w	8802 <__aeabi_dmul+0x24a>
    899a:	ea95 0f0c 	teq	r5, ip
    899e:	f47f af25 	bne.w	87ec <__aeabi_dmul+0x234>
    89a2:	4610      	mov	r0, r2
    89a4:	4619      	mov	r1, r3
    89a6:	e72c      	b.n	8802 <__aeabi_dmul+0x24a>
    89a8:	ea95 0f0c 	teq	r5, ip
    89ac:	d106      	bne.n	89bc <__aeabi_ddiv+0x1b0>
    89ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    89b2:	f43f aefd 	beq.w	87b0 <__aeabi_dmul+0x1f8>
    89b6:	4610      	mov	r0, r2
    89b8:	4619      	mov	r1, r3
    89ba:	e722      	b.n	8802 <__aeabi_dmul+0x24a>
    89bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    89c0:	bf18      	it	ne
    89c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    89c6:	f47f aec5 	bne.w	8754 <__aeabi_dmul+0x19c>
    89ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    89ce:	f47f af0d 	bne.w	87ec <__aeabi_dmul+0x234>
    89d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    89d6:	f47f aeeb 	bne.w	87b0 <__aeabi_dmul+0x1f8>
    89da:	e712      	b.n	8802 <__aeabi_dmul+0x24a>

000089dc <__gedf2>:
    89dc:	f04f 3cff 	mov.w	ip, #4294967295
    89e0:	e006      	b.n	89f0 <__cmpdf2+0x4>
    89e2:	bf00      	nop

000089e4 <__ledf2>:
    89e4:	f04f 0c01 	mov.w	ip, #1
    89e8:	e002      	b.n	89f0 <__cmpdf2+0x4>
    89ea:	bf00      	nop

000089ec <__cmpdf2>:
    89ec:	f04f 0c01 	mov.w	ip, #1
    89f0:	f84d cd04 	str.w	ip, [sp, #-4]!
    89f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    89f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    89fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a00:	bf18      	it	ne
    8a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8a06:	d01b      	beq.n	8a40 <__cmpdf2+0x54>
    8a08:	b001      	add	sp, #4
    8a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8a0e:	bf0c      	ite	eq
    8a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8a14:	ea91 0f03 	teqne	r1, r3
    8a18:	bf02      	ittt	eq
    8a1a:	ea90 0f02 	teqeq	r0, r2
    8a1e:	2000      	moveq	r0, #0
    8a20:	4770      	bxeq	lr
    8a22:	f110 0f00 	cmn.w	r0, #0
    8a26:	ea91 0f03 	teq	r1, r3
    8a2a:	bf58      	it	pl
    8a2c:	4299      	cmppl	r1, r3
    8a2e:	bf08      	it	eq
    8a30:	4290      	cmpeq	r0, r2
    8a32:	bf2c      	ite	cs
    8a34:	17d8      	asrcs	r0, r3, #31
    8a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8a3a:	f040 0001 	orr.w	r0, r0, #1
    8a3e:	4770      	bx	lr
    8a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a48:	d102      	bne.n	8a50 <__cmpdf2+0x64>
    8a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8a4e:	d107      	bne.n	8a60 <__cmpdf2+0x74>
    8a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8a58:	d1d6      	bne.n	8a08 <__cmpdf2+0x1c>
    8a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8a5e:	d0d3      	beq.n	8a08 <__cmpdf2+0x1c>
    8a60:	f85d 0b04 	ldr.w	r0, [sp], #4
    8a64:	4770      	bx	lr
    8a66:	bf00      	nop

00008a68 <__aeabi_cdrcmple>:
    8a68:	4684      	mov	ip, r0
    8a6a:	4610      	mov	r0, r2
    8a6c:	4662      	mov	r2, ip
    8a6e:	468c      	mov	ip, r1
    8a70:	4619      	mov	r1, r3
    8a72:	4663      	mov	r3, ip
    8a74:	e000      	b.n	8a78 <__aeabi_cdcmpeq>
    8a76:	bf00      	nop

00008a78 <__aeabi_cdcmpeq>:
    8a78:	b501      	push	{r0, lr}
    8a7a:	f7ff ffb7 	bl	89ec <__cmpdf2>
    8a7e:	2800      	cmp	r0, #0
    8a80:	bf48      	it	mi
    8a82:	f110 0f00 	cmnmi.w	r0, #0
    8a86:	bd01      	pop	{r0, pc}

00008a88 <__aeabi_dcmpeq>:
    8a88:	f84d ed08 	str.w	lr, [sp, #-8]!
    8a8c:	f7ff fff4 	bl	8a78 <__aeabi_cdcmpeq>
    8a90:	bf0c      	ite	eq
    8a92:	2001      	moveq	r0, #1
    8a94:	2000      	movne	r0, #0
    8a96:	f85d fb08 	ldr.w	pc, [sp], #8
    8a9a:	bf00      	nop

00008a9c <__aeabi_dcmplt>:
    8a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8aa0:	f7ff ffea 	bl	8a78 <__aeabi_cdcmpeq>
    8aa4:	bf34      	ite	cc
    8aa6:	2001      	movcc	r0, #1
    8aa8:	2000      	movcs	r0, #0
    8aaa:	f85d fb08 	ldr.w	pc, [sp], #8
    8aae:	bf00      	nop

00008ab0 <__aeabi_dcmple>:
    8ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ab4:	f7ff ffe0 	bl	8a78 <__aeabi_cdcmpeq>
    8ab8:	bf94      	ite	ls
    8aba:	2001      	movls	r0, #1
    8abc:	2000      	movhi	r0, #0
    8abe:	f85d fb08 	ldr.w	pc, [sp], #8
    8ac2:	bf00      	nop

00008ac4 <__aeabi_dcmpge>:
    8ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
    8ac8:	f7ff ffce 	bl	8a68 <__aeabi_cdrcmple>
    8acc:	bf94      	ite	ls
    8ace:	2001      	movls	r0, #1
    8ad0:	2000      	movhi	r0, #0
    8ad2:	f85d fb08 	ldr.w	pc, [sp], #8
    8ad6:	bf00      	nop

00008ad8 <__aeabi_dcmpgt>:
    8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
    8adc:	f7ff ffc4 	bl	8a68 <__aeabi_cdrcmple>
    8ae0:	bf34      	ite	cc
    8ae2:	2001      	movcc	r0, #1
    8ae4:	2000      	movcs	r0, #0
    8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
    8aea:	bf00      	nop

00008aec <__aeabi_d2uiz>:
    8aec:	004a      	lsls	r2, r1, #1
    8aee:	d211      	bcs.n	8b14 <__aeabi_d2uiz+0x28>
    8af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8af4:	d211      	bcs.n	8b1a <__aeabi_d2uiz+0x2e>
    8af6:	d50d      	bpl.n	8b14 <__aeabi_d2uiz+0x28>
    8af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8b00:	d40e      	bmi.n	8b20 <__aeabi_d2uiz+0x34>
    8b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    8b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8b0e:	fa23 f002 	lsr.w	r0, r3, r2
    8b12:	4770      	bx	lr
    8b14:	f04f 0000 	mov.w	r0, #0
    8b18:	4770      	bx	lr
    8b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    8b1e:	d102      	bne.n	8b26 <__aeabi_d2uiz+0x3a>
    8b20:	f04f 30ff 	mov.w	r0, #4294967295
    8b24:	4770      	bx	lr
    8b26:	f04f 0000 	mov.w	r0, #0
    8b2a:	4770      	bx	lr

00008b2c <__aeabi_uldivmod>:
    8b2c:	b953      	cbnz	r3, 8b44 <__aeabi_uldivmod+0x18>
    8b2e:	b94a      	cbnz	r2, 8b44 <__aeabi_uldivmod+0x18>
    8b30:	2900      	cmp	r1, #0
    8b32:	bf08      	it	eq
    8b34:	2800      	cmpeq	r0, #0
    8b36:	bf1c      	itt	ne
    8b38:	f04f 31ff 	movne.w	r1, #4294967295
    8b3c:	f04f 30ff 	movne.w	r0, #4294967295
    8b40:	f000 b980 	b.w	8e44 <__aeabi_idiv0>
    8b44:	f1ad 0c08 	sub.w	ip, sp, #8
    8b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    8b4c:	f000 f806 	bl	8b5c <__udivmoddi4>
    8b50:	f8dd e004 	ldr.w	lr, [sp, #4]
    8b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    8b58:	b004      	add	sp, #16
    8b5a:	4770      	bx	lr

00008b5c <__udivmoddi4>:
    8b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b60:	9e09      	ldr	r6, [sp, #36]	; 0x24
    8b62:	460d      	mov	r5, r1
    8b64:	4604      	mov	r4, r0
    8b66:	460f      	mov	r7, r1
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d147      	bne.n	8bfc <__udivmoddi4+0xa0>
    8b6c:	428a      	cmp	r2, r1
    8b6e:	4694      	mov	ip, r2
    8b70:	d95f      	bls.n	8c32 <__udivmoddi4+0xd6>
    8b72:	fab2 f382 	clz	r3, r2
    8b76:	b143      	cbz	r3, 8b8a <__udivmoddi4+0x2e>
    8b78:	f1c3 0120 	rsb	r1, r3, #32
    8b7c:	409f      	lsls	r7, r3
    8b7e:	fa02 fc03 	lsl.w	ip, r2, r3
    8b82:	409c      	lsls	r4, r3
    8b84:	fa20 f101 	lsr.w	r1, r0, r1
    8b88:	430f      	orrs	r7, r1
    8b8a:	ea4f 451c 	mov.w	r5, ip, lsr #16
    8b8e:	fa1f fe8c 	uxth.w	lr, ip
    8b92:	0c22      	lsrs	r2, r4, #16
    8b94:	fbb7 f1f5 	udiv	r1, r7, r5
    8b98:	fb05 7711 	mls	r7, r5, r1, r7
    8b9c:	fb01 f00e 	mul.w	r0, r1, lr
    8ba0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
    8ba4:	4290      	cmp	r0, r2
    8ba6:	d908      	bls.n	8bba <__udivmoddi4+0x5e>
    8ba8:	eb1c 0202 	adds.w	r2, ip, r2
    8bac:	f101 37ff 	add.w	r7, r1, #4294967295
    8bb0:	d202      	bcs.n	8bb8 <__udivmoddi4+0x5c>
    8bb2:	4290      	cmp	r0, r2
    8bb4:	f200 8134 	bhi.w	8e20 <__udivmoddi4+0x2c4>
    8bb8:	4639      	mov	r1, r7
    8bba:	1a12      	subs	r2, r2, r0
    8bbc:	b2a4      	uxth	r4, r4
    8bbe:	fbb2 f0f5 	udiv	r0, r2, r5
    8bc2:	fb05 2210 	mls	r2, r5, r0, r2
    8bc6:	fb00 fe0e 	mul.w	lr, r0, lr
    8bca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    8bce:	45a6      	cmp	lr, r4
    8bd0:	d908      	bls.n	8be4 <__udivmoddi4+0x88>
    8bd2:	eb1c 0404 	adds.w	r4, ip, r4
    8bd6:	f100 32ff 	add.w	r2, r0, #4294967295
    8bda:	d202      	bcs.n	8be2 <__udivmoddi4+0x86>
    8bdc:	45a6      	cmp	lr, r4
    8bde:	f200 8119 	bhi.w	8e14 <__udivmoddi4+0x2b8>
    8be2:	4610      	mov	r0, r2
    8be4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
    8be8:	eba4 040e 	sub.w	r4, r4, lr
    8bec:	2100      	movs	r1, #0
    8bee:	b11e      	cbz	r6, 8bf8 <__udivmoddi4+0x9c>
    8bf0:	40dc      	lsrs	r4, r3
    8bf2:	2300      	movs	r3, #0
    8bf4:	e9c6 4300 	strd	r4, r3, [r6]
    8bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8bfc:	428b      	cmp	r3, r1
    8bfe:	d908      	bls.n	8c12 <__udivmoddi4+0xb6>
    8c00:	2e00      	cmp	r6, #0
    8c02:	f000 80fb 	beq.w	8dfc <__udivmoddi4+0x2a0>
    8c06:	2100      	movs	r1, #0
    8c08:	e9c6 0500 	strd	r0, r5, [r6]
    8c0c:	4608      	mov	r0, r1
    8c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c12:	fab3 f183 	clz	r1, r3
    8c16:	2900      	cmp	r1, #0
    8c18:	d14b      	bne.n	8cb2 <__udivmoddi4+0x156>
    8c1a:	42ab      	cmp	r3, r5
    8c1c:	f0c0 80f1 	bcc.w	8e02 <__udivmoddi4+0x2a6>
    8c20:	4282      	cmp	r2, r0
    8c22:	f240 80ee 	bls.w	8e02 <__udivmoddi4+0x2a6>
    8c26:	4608      	mov	r0, r1
    8c28:	2e00      	cmp	r6, #0
    8c2a:	d0e5      	beq.n	8bf8 <__udivmoddi4+0x9c>
    8c2c:	e9c6 4700 	strd	r4, r7, [r6]
    8c30:	e7e2      	b.n	8bf8 <__udivmoddi4+0x9c>
    8c32:	b902      	cbnz	r2, 8c36 <__udivmoddi4+0xda>
    8c34:	deff      	udf	#255	; 0xff
    8c36:	fab2 f382 	clz	r3, r2
    8c3a:	2b00      	cmp	r3, #0
    8c3c:	f040 809d 	bne.w	8d7a <__udivmoddi4+0x21e>
    8c40:	1a8d      	subs	r5, r1, r2
    8c42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    8c46:	b297      	uxth	r7, r2
    8c48:	2101      	movs	r1, #1
    8c4a:	fbb5 f2fe 	udiv	r2, r5, lr
    8c4e:	fb0e 5012 	mls	r0, lr, r2, r5
    8c52:	0c25      	lsrs	r5, r4, #16
    8c54:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    8c58:	fb07 f002 	mul.w	r0, r7, r2
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d90f      	bls.n	8c80 <__udivmoddi4+0x124>
    8c60:	eb1c 0505 	adds.w	r5, ip, r5
    8c64:	f102 38ff 	add.w	r8, r2, #4294967295
    8c68:	bf2c      	ite	cs
    8c6a:	f04f 0901 	movcs.w	r9, #1
    8c6e:	f04f 0900 	movcc.w	r9, #0
    8c72:	42a8      	cmp	r0, r5
    8c74:	d903      	bls.n	8c7e <__udivmoddi4+0x122>
    8c76:	f1b9 0f00 	cmp.w	r9, #0
    8c7a:	f000 80ce 	beq.w	8e1a <__udivmoddi4+0x2be>
    8c7e:	4642      	mov	r2, r8
    8c80:	1a2d      	subs	r5, r5, r0
    8c82:	b2a4      	uxth	r4, r4
    8c84:	fbb5 f0fe 	udiv	r0, r5, lr
    8c88:	fb0e 5510 	mls	r5, lr, r0, r5
    8c8c:	fb00 f707 	mul.w	r7, r0, r7
    8c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    8c94:	42a7      	cmp	r7, r4
    8c96:	d908      	bls.n	8caa <__udivmoddi4+0x14e>
    8c98:	eb1c 0404 	adds.w	r4, ip, r4
    8c9c:	f100 35ff 	add.w	r5, r0, #4294967295
    8ca0:	d202      	bcs.n	8ca8 <__udivmoddi4+0x14c>
    8ca2:	42a7      	cmp	r7, r4
    8ca4:	f200 80b3 	bhi.w	8e0e <__udivmoddi4+0x2b2>
    8ca8:	4628      	mov	r0, r5
    8caa:	1be4      	subs	r4, r4, r7
    8cac:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    8cb0:	e79d      	b.n	8bee <__udivmoddi4+0x92>
    8cb2:	f1c1 0720 	rsb	r7, r1, #32
    8cb6:	408b      	lsls	r3, r1
    8cb8:	fa05 f401 	lsl.w	r4, r5, r1
    8cbc:	fa22 fc07 	lsr.w	ip, r2, r7
    8cc0:	40fd      	lsrs	r5, r7
    8cc2:	408a      	lsls	r2, r1
    8cc4:	ea4c 0c03 	orr.w	ip, ip, r3
    8cc8:	fa20 f307 	lsr.w	r3, r0, r7
    8ccc:	ea4f 491c 	mov.w	r9, ip, lsr #16
    8cd0:	431c      	orrs	r4, r3
    8cd2:	fa1f fe8c 	uxth.w	lr, ip
    8cd6:	fa00 f301 	lsl.w	r3, r0, r1
    8cda:	0c20      	lsrs	r0, r4, #16
    8cdc:	fbb5 f8f9 	udiv	r8, r5, r9
    8ce0:	fb09 5518 	mls	r5, r9, r8, r5
    8ce4:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    8ce8:	fb08 f00e 	mul.w	r0, r8, lr
    8cec:	42a8      	cmp	r0, r5
    8cee:	d90f      	bls.n	8d10 <__udivmoddi4+0x1b4>
    8cf0:	eb1c 0505 	adds.w	r5, ip, r5
    8cf4:	f108 3aff 	add.w	sl, r8, #4294967295
    8cf8:	bf2c      	ite	cs
    8cfa:	f04f 0b01 	movcs.w	fp, #1
    8cfe:	f04f 0b00 	movcc.w	fp, #0
    8d02:	42a8      	cmp	r0, r5
    8d04:	d903      	bls.n	8d0e <__udivmoddi4+0x1b2>
    8d06:	f1bb 0f00 	cmp.w	fp, #0
    8d0a:	f000 808c 	beq.w	8e26 <__udivmoddi4+0x2ca>
    8d0e:	46d0      	mov	r8, sl
    8d10:	1a2d      	subs	r5, r5, r0
    8d12:	b2a4      	uxth	r4, r4
    8d14:	fbb5 f0f9 	udiv	r0, r5, r9
    8d18:	fb09 5510 	mls	r5, r9, r0, r5
    8d1c:	fb00 fe0e 	mul.w	lr, r0, lr
    8d20:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    8d24:	45ae      	cmp	lr, r5
    8d26:	d907      	bls.n	8d38 <__udivmoddi4+0x1dc>
    8d28:	eb1c 0505 	adds.w	r5, ip, r5
    8d2c:	f100 34ff 	add.w	r4, r0, #4294967295
    8d30:	d201      	bcs.n	8d36 <__udivmoddi4+0x1da>
    8d32:	45ae      	cmp	lr, r5
    8d34:	d87e      	bhi.n	8e34 <__udivmoddi4+0x2d8>
    8d36:	4620      	mov	r0, r4
    8d38:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    8d3c:	eba5 050e 	sub.w	r5, r5, lr
    8d40:	fba0 9802 	umull	r9, r8, r0, r2
    8d44:	4545      	cmp	r5, r8
    8d46:	464c      	mov	r4, r9
    8d48:	46c6      	mov	lr, r8
    8d4a:	d302      	bcc.n	8d52 <__udivmoddi4+0x1f6>
    8d4c:	d106      	bne.n	8d5c <__udivmoddi4+0x200>
    8d4e:	454b      	cmp	r3, r9
    8d50:	d204      	bcs.n	8d5c <__udivmoddi4+0x200>
    8d52:	3801      	subs	r0, #1
    8d54:	ebb9 0402 	subs.w	r4, r9, r2
    8d58:	eb68 0e0c 	sbc.w	lr, r8, ip
    8d5c:	2e00      	cmp	r6, #0
    8d5e:	d06f      	beq.n	8e40 <__udivmoddi4+0x2e4>
    8d60:	1b1a      	subs	r2, r3, r4
    8d62:	eb65 050e 	sbc.w	r5, r5, lr
    8d66:	fa22 f301 	lsr.w	r3, r2, r1
    8d6a:	fa05 f707 	lsl.w	r7, r5, r7
    8d6e:	40cd      	lsrs	r5, r1
    8d70:	2100      	movs	r1, #0
    8d72:	431f      	orrs	r7, r3
    8d74:	e9c6 7500 	strd	r7, r5, [r6]
    8d78:	e73e      	b.n	8bf8 <__udivmoddi4+0x9c>
    8d7a:	fa02 fc03 	lsl.w	ip, r2, r3
    8d7e:	f1c3 0020 	rsb	r0, r3, #32
    8d82:	fa01 f203 	lsl.w	r2, r1, r3
    8d86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
    8d8a:	40c1      	lsrs	r1, r0
    8d8c:	fa24 f500 	lsr.w	r5, r4, r0
    8d90:	fa1f f78c 	uxth.w	r7, ip
    8d94:	409c      	lsls	r4, r3
    8d96:	4315      	orrs	r5, r2
    8d98:	fbb1 f0fe 	udiv	r0, r1, lr
    8d9c:	0c2a      	lsrs	r2, r5, #16
    8d9e:	fb0e 1110 	mls	r1, lr, r0, r1
    8da2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    8da6:	fb00 f107 	mul.w	r1, r0, r7
    8daa:	4291      	cmp	r1, r2
    8dac:	d90e      	bls.n	8dcc <__udivmoddi4+0x270>
    8dae:	eb1c 0202 	adds.w	r2, ip, r2
    8db2:	f100 38ff 	add.w	r8, r0, #4294967295
    8db6:	bf2c      	ite	cs
    8db8:	f04f 0901 	movcs.w	r9, #1
    8dbc:	f04f 0900 	movcc.w	r9, #0
    8dc0:	4291      	cmp	r1, r2
    8dc2:	d902      	bls.n	8dca <__udivmoddi4+0x26e>
    8dc4:	f1b9 0f00 	cmp.w	r9, #0
    8dc8:	d031      	beq.n	8e2e <__udivmoddi4+0x2d2>
    8dca:	4640      	mov	r0, r8
    8dcc:	1a52      	subs	r2, r2, r1
    8dce:	b2ad      	uxth	r5, r5
    8dd0:	fbb2 f1fe 	udiv	r1, r2, lr
    8dd4:	fb0e 2211 	mls	r2, lr, r1, r2
    8dd8:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    8ddc:	fb01 f207 	mul.w	r2, r1, r7
    8de0:	42aa      	cmp	r2, r5
    8de2:	d907      	bls.n	8df4 <__udivmoddi4+0x298>
    8de4:	eb1c 0505 	adds.w	r5, ip, r5
    8de8:	f101 38ff 	add.w	r8, r1, #4294967295
    8dec:	d201      	bcs.n	8df2 <__udivmoddi4+0x296>
    8dee:	42aa      	cmp	r2, r5
    8df0:	d823      	bhi.n	8e3a <__udivmoddi4+0x2de>
    8df2:	4641      	mov	r1, r8
    8df4:	1aad      	subs	r5, r5, r2
    8df6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    8dfa:	e726      	b.n	8c4a <__udivmoddi4+0xee>
    8dfc:	4631      	mov	r1, r6
    8dfe:	4630      	mov	r0, r6
    8e00:	e6fa      	b.n	8bf8 <__udivmoddi4+0x9c>
    8e02:	1a84      	subs	r4, r0, r2
    8e04:	eb65 0303 	sbc.w	r3, r5, r3
    8e08:	2001      	movs	r0, #1
    8e0a:	461f      	mov	r7, r3
    8e0c:	e70c      	b.n	8c28 <__udivmoddi4+0xcc>
    8e0e:	4464      	add	r4, ip
    8e10:	3802      	subs	r0, #2
    8e12:	e74a      	b.n	8caa <__udivmoddi4+0x14e>
    8e14:	4464      	add	r4, ip
    8e16:	3802      	subs	r0, #2
    8e18:	e6e4      	b.n	8be4 <__udivmoddi4+0x88>
    8e1a:	3a02      	subs	r2, #2
    8e1c:	4465      	add	r5, ip
    8e1e:	e72f      	b.n	8c80 <__udivmoddi4+0x124>
    8e20:	3902      	subs	r1, #2
    8e22:	4462      	add	r2, ip
    8e24:	e6c9      	b.n	8bba <__udivmoddi4+0x5e>
    8e26:	f1a8 0802 	sub.w	r8, r8, #2
    8e2a:	4465      	add	r5, ip
    8e2c:	e770      	b.n	8d10 <__udivmoddi4+0x1b4>
    8e2e:	3802      	subs	r0, #2
    8e30:	4462      	add	r2, ip
    8e32:	e7cb      	b.n	8dcc <__udivmoddi4+0x270>
    8e34:	3802      	subs	r0, #2
    8e36:	4465      	add	r5, ip
    8e38:	e77e      	b.n	8d38 <__udivmoddi4+0x1dc>
    8e3a:	3902      	subs	r1, #2
    8e3c:	4465      	add	r5, ip
    8e3e:	e7d9      	b.n	8df4 <__udivmoddi4+0x298>
    8e40:	4631      	mov	r1, r6
    8e42:	e6d9      	b.n	8bf8 <__udivmoddi4+0x9c>

00008e44 <__aeabi_idiv0>:
    8e44:	4770      	bx	lr
    8e46:	bf00      	nop

00008e48 <_ZN7dataCSC9calcSpeedEv>:
    }

    return retVal;
}

uint16_t dataCSC::calcSpeed() {
    8e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e4c:	4605      	mov	r5, r0
    if (nbrRevSpeed < 0)
    {
        nbrRevSpeed = maxVal - oldSumRevSpeed + sumRevSpeed;
    }

    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e4e:	8900      	ldrh	r0, [r0, #8]
    8e50:	896b      	ldrh	r3, [r5, #10]
    8e52:	4298      	cmp	r0, r3
    8e54:	d047      	beq.n	8ee6 <_ZN7dataCSC9calcSpeedEv+0x9e>
    uint16_t nbrRevSpeed = sumRevSpeed - oldSumRevSpeed;
    8e56:	f8b5 a000 	ldrh.w	sl, [r5]
    8e5a:	f8b5 9002 	ldrh.w	r9, [r5, #2]
    8e5e:	ebaa 0409 	sub.w	r4, sl, r9
    8e62:	b2a4      	uxth	r4, r4
    if ((lastEventSpeed != oldLastEventSpeed) && nbrRevSpeed > 0)
    8e64:	b1f4      	cbz	r4, 8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    {
        wheelCircumference = wheelDiameter;
        wheelCircumference = (wheelDiameter) * 3.1415;
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e66:	eba0 0803 	sub.w	r8, r0, r3
    8e6a:	4640      	mov	r0, r8
    8e6c:	f7ff fb3a 	bl	84e4 <__aeabi_i2d>
    8e70:	2200      	movs	r2, #0
    8e72:	4b21      	ldr	r3, [pc, #132]	; (8ef8 <_ZN7dataCSC9calcSpeedEv+0xb0>)
    8e74:	f7ff fba0 	bl	85b8 <__aeabi_dmul>
        double oldSpeed = speed;

        if (time < 0)
    8e78:	2200      	movs	r2, #0
    8e7a:	2300      	movs	r3, #0
        double time = (lastEventSpeed - oldLastEventSpeed)/1024.0;
    8e7c:	4606      	mov	r6, r0
    8e7e:	460f      	mov	r7, r1
        if (time < 0)
    8e80:	f7ff fe0c 	bl	8a9c <__aeabi_dcmplt>
    8e84:	b138      	cbz	r0, 8e96 <_ZN7dataCSC9calcSpeedEv+0x4e>
        {
            time = (0xffff - oldLastEventSpeed + lastEventSpeed)/1024;
    8e86:	f508 407f 	add.w	r0, r8, #65280	; 0xff00
    8e8a:	30ff      	adds	r0, #255	; 0xff
    8e8c:	1280      	asrs	r0, r0, #10
    8e8e:	f7ff fb29 	bl	84e4 <__aeabi_i2d>
    8e92:	4606      	mov	r6, r0
    8e94:	460f      	mov	r7, r1
        }
        if (sumRevSpeed == oldSumRevSpeed)
    8e96:	45ca      	cmp	sl, r9
    8e98:	d107      	bne.n	8eaa <_ZN7dataCSC9calcSpeedEv+0x62>
        {
            return (uint16_t) oldSpeed;
    8e9a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
            //rpm_speed = time/nbrRevSpeed *60;
            //printk("rpm1%d\n",rpm_speed);
            rpm_speed = (nbrRevSpeed) * 60 / time;
            //printk("rpm2%d\n",rpm_speed);
            speed = rpm_speed * wheelCircumference;
            retVal = (uint16_t) (speed);
    8e9e:	f7ff fe25 	bl	8aec <__aeabi_d2uiz>
    8ea2:	b284      	uxth	r4, r0
            return retVal;
        }  
    }
    return 0;
    8ea4:	4620      	mov	r0, r4
    8ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eaa:	203c      	movs	r0, #60	; 0x3c
        wheelCircumference = wheelDiameter;
    8eac:	e9d5 8906 	ldrd	r8, r9, [r5, #24]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8eb0:	4360      	muls	r0, r4
    8eb2:	f7ff fb17 	bl	84e4 <__aeabi_i2d>
    8eb6:	4632      	mov	r2, r6
    8eb8:	463b      	mov	r3, r7
    8eba:	f7ff fca7 	bl	880c <__aeabi_ddiv>
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ebe:	a30c      	add	r3, pc, #48	; (adr r3, 8ef0 <_ZN7dataCSC9calcSpeedEv+0xa8>)
    8ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
            rpm_speed = (nbrRevSpeed) * 60 / time;
    8ec4:	4606      	mov	r6, r0
    8ec6:	460f      	mov	r7, r1
        wheelCircumference = (wheelDiameter) * 3.1415;
    8ec8:	4640      	mov	r0, r8
    8eca:	4649      	mov	r1, r9
    8ecc:	f7ff fb74 	bl	85b8 <__aeabi_dmul>
    8ed0:	4602      	mov	r2, r0
    8ed2:	460b      	mov	r3, r1
            speed = rpm_speed * wheelCircumference;
    8ed4:	4630      	mov	r0, r6
    8ed6:	4639      	mov	r1, r7
    8ed8:	f7ff fb6e 	bl	85b8 <__aeabi_dmul>
    8edc:	4602      	mov	r2, r0
    8ede:	460b      	mov	r3, r1
    8ee0:	e9c5 2308 	strd	r2, r3, [r5, #32]
    8ee4:	e7db      	b.n	8e9e <_ZN7dataCSC9calcSpeedEv+0x56>
    return 0;
    8ee6:	2400      	movs	r4, #0
    8ee8:	e7dc      	b.n	8ea4 <_ZN7dataCSC9calcSpeedEv+0x5c>
    8eea:	bf00      	nop
    8eec:	f3af 8000 	nop.w
    8ef0:	c083126f 	.word	0xc083126f
    8ef4:	400921ca 	.word	0x400921ca
    8ef8:	3f500000 	.word	0x3f500000
    8efc:	00000000 	.word	0x00000000

00008f00 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth>:
{

    const uint8_t * buffer = (uint8_t *) buf;
    
    // len = 1 -> new diameter received - or diameter reset (when 0)
    if (len == 1)
    8f00:	2b01      	cmp	r3, #1
{
    8f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f06:	4607      	mov	r7, r0
    8f08:	4688      	mov	r8, r1
    8f0a:	4614      	mov	r4, r2
    8f0c:	461e      	mov	r6, r3
    if (len == 1)
    8f0e:	d125      	bne.n	8f5c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x5c>
    {
        diameter = (uint8_t ) *buffer;
    8f10:	7815      	ldrb	r5, [r2, #0]
    8f12:	4b4b      	ldr	r3, [pc, #300]	; (9040 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x140>)

        // check if last bit is '1', then add 0.5 to dia and convert it to cm
        if ((diameter & 0b10000000) == 0b10000000)
        {
            dia = (diameter + 0.5) * 2.54;
    8f14:	4628      	mov	r0, r5
        diameter = (uint8_t ) *buffer;
    8f16:	701d      	strb	r5, [r3, #0]
            dia = (diameter + 0.5) * 2.54;
    8f18:	f7ff fae4 	bl	84e4 <__aeabi_i2d>
        if ((diameter & 0b10000000) == 0b10000000)
    8f1c:	062b      	lsls	r3, r5, #24
    8f1e:	d503      	bpl.n	8f28 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x28>
            dia = (diameter + 0.5) * 2.54;
    8f20:	2200      	movs	r2, #0
    8f22:	4b48      	ldr	r3, [pc, #288]	; (9044 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x144>)
    8f24:	f7ff f992 	bl	824c <__adddf3>
        }
        else {
            dia = diameter * 2.54;
    8f28:	a343      	add	r3, pc, #268	; (adr r3, 9038 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x138>)
    8f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    8f2e:	f7ff fb43 	bl	85b8 <__aeabi_dmul>
    8f32:	4b45      	ldr	r3, [pc, #276]	; (9048 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x148>)
    8f34:	e9c3 0100 	strd	r0, r1, [r3]
        default:
            break;
        }
    }
    
	printk("Received data, handle %d, conn %p, data: 0x", attr->handle, conn);
    8f38:	463a      	mov	r2, r7
    8f3a:	f8b8 1010 	ldrh.w	r1, [r8, #16]
    8f3e:	4843      	ldr	r0, [pc, #268]	; (904c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x14c>)
    8f40:	f010 fd55 	bl	199ee <printk>
    8f44:	2300      	movs	r3, #0
 
    for(uint8_t i = 0; i < len; i++){
        printk("%02X", buffer[i]);
    8f46:	4f42      	ldr	r7, [pc, #264]	; (9050 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x150>)
    for(uint8_t i = 0; i < len; i++){
    8f48:	1c5d      	adds	r5, r3, #1
    8f4a:	b2db      	uxtb	r3, r3
    8f4c:	42b3      	cmp	r3, r6
    8f4e:	da6c      	bge.n	902a <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x12a>
        printk("%02X", buffer[i]);
    8f50:	5ce1      	ldrb	r1, [r4, r3]
    8f52:	4638      	mov	r0, r7
    8f54:	f010 fd4b 	bl	199ee <printk>
    for(uint8_t i = 0; i < len; i++){
    8f58:	462b      	mov	r3, r5
    8f5a:	e7f5      	b.n	8f48 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x48>
    if (len == 19)
    8f5c:	2b13      	cmp	r3, #19
    8f5e:	d1eb      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
        nbrAddresses = (uint8_t) buffer[17];
    8f60:	7c53      	ldrb	r3, [r2, #17]
    8f62:	4a3c      	ldr	r2, [pc, #240]	; (9054 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x154>)
        infoSensors = (uint8_t) buffer[18];
    8f64:	7ca1      	ldrb	r1, [r4, #18]
        nbrAddresses = (uint8_t) buffer[17];
    8f66:	7013      	strb	r3, [r2, #0]
        infoSensors = (uint8_t) buffer[18];
    8f68:	4a3b      	ldr	r2, [pc, #236]	; (9058 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x158>)
        switch (nbrAddresses)
    8f6a:	2b02      	cmp	r3, #2
        infoSensors = (uint8_t) buffer[18];
    8f6c:	7011      	strb	r1, [r2, #0]
        switch (nbrAddresses)
    8f6e:	d00e      	beq.n	8f8e <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x8e>
    8f70:	2b03      	cmp	r3, #3
    8f72:	d02e      	beq.n	8fd2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xd2>
    8f74:	2b01      	cmp	r3, #1
    8f76:	d1df      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8f78:	4a38      	ldr	r2, [pc, #224]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8f7a:	1e63      	subs	r3, r4, #1
    8f7c:	f104 0110 	add.w	r1, r4, #16
                uint8_t val = (uint8_t) buffer[i];
    8f80:	f813 0f01 	ldrb.w	r0, [r3, #1]!
            for (uint8_t i=0; i<17; i++)
    8f84:	4299      	cmp	r1, r3
                address1[i] = charToSave;
    8f86:	f802 0b01 	strb.w	r0, [r2], #1
            for (uint8_t i=0; i<17; i++)
    8f8a:	d1f9      	bne.n	8f80 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x80>
    8f8c:	e7d4      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8f8e:	4b34      	ldr	r3, [pc, #208]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8f90:	781d      	ldrb	r5, [r3, #0]
    8f92:	3501      	adds	r5, #1
    8f94:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8f96:	2d01      	cmp	r5, #1
            cntAddresses++;
    8f98:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8f9a:	d10a      	bne.n	8fb2 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xb2>
    8f9c:	4a2f      	ldr	r2, [pc, #188]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8f9e:	1e63      	subs	r3, r4, #1
    8fa0:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fa4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fa8:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8faa:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fae:	d1f9      	bne.n	8fa4 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xa4>
    8fb0:	e7c2      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    8fb2:	2d02      	cmp	r5, #2
    8fb4:	d1c0      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    8fb6:	4a2b      	ldr	r2, [pc, #172]	; (9064 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    8fb8:	1e63      	subs	r3, r4, #1
    8fba:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fbe:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fc2:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    8fc4:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8fc8:	d1f9      	bne.n	8fbe <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xbe>
                cntAddresses = 0;
    8fca:	2200      	movs	r2, #0
    8fcc:	4b24      	ldr	r3, [pc, #144]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8fce:	701a      	strb	r2, [r3, #0]
    8fd0:	e7b2      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            cntAddresses++;
    8fd2:	4b23      	ldr	r3, [pc, #140]	; (9060 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x160>)
    8fd4:	781d      	ldrb	r5, [r3, #0]
    8fd6:	3501      	adds	r5, #1
    8fd8:	b2ed      	uxtb	r5, r5
            if (cntAddresses == 1)
    8fda:	2d01      	cmp	r5, #1
            cntAddresses++;
    8fdc:	701d      	strb	r5, [r3, #0]
            if (cntAddresses == 1)
    8fde:	d10a      	bne.n	8ff6 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xf6>
    8fe0:	4a1e      	ldr	r2, [pc, #120]	; (905c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x15c>)
    8fe2:	1e63      	subs	r3, r4, #1
    8fe4:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    8fe8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    8fec:	428b      	cmp	r3, r1
                    address1[i] = charToSave;
    8fee:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    8ff2:	d1f9      	bne.n	8fe8 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xe8>
    8ff4:	e7a0      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            else if (cntAddresses == 2)
    8ff6:	2d02      	cmp	r5, #2
    8ff8:	d10a      	bne.n	9010 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x110>
    8ffa:	4a1a      	ldr	r2, [pc, #104]	; (9064 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x164>)
    8ffc:	1e63      	subs	r3, r4, #1
    8ffe:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    9002:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9006:	428b      	cmp	r3, r1
                    address2[i] = charToSave;
    9008:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    900c:	d1f9      	bne.n	9002 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x102>
    900e:	e793      	b.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
            } else if (cntAddresses == 3)
    9010:	2d03      	cmp	r5, #3
    9012:	d191      	bne.n	8f38 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x38>
    9014:	4a14      	ldr	r2, [pc, #80]	; (9068 <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x168>)
    9016:	1e63      	subs	r3, r4, #1
    9018:	f104 0110 	add.w	r1, r4, #16
                    uint8_t val = (uint8_t) buffer[i];
    901c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
                for (uint8_t i=0; i<17; i++)
    9020:	428b      	cmp	r3, r1
                    address3[i] = charToSave;
    9022:	f802 0b01 	strb.w	r0, [r2], #1
                for (uint8_t i=0; i<17; i++)
    9026:	d1f9      	bne.n	901c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x11c>
    9028:	e7cf      	b.n	8fca <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0xca>
    }
    printk("\n");
    902a:	4810      	ldr	r0, [pc, #64]	; (906c <_ZL10on_receiveP7bt_connPK12bt_gatt_attrPKvtth+0x16c>)
    902c:	f010 fcdf 	bl	199ee <printk>
 	return len;
}
    9030:	4630      	mov	r0, r6
    9032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9036:	bf00      	nop
    9038:	851eb852 	.word	0x851eb852
    903c:	400451eb 	.word	0x400451eb
    9040:	2000c110 	.word	0x2000c110
    9044:	3fe00000 	.word	0x3fe00000
    9048:	20008818 	.word	0x20008818
    904c:	0001e9bc 	.word	0x0001e9bc
    9050:	0001e9e8 	.word	0x0001e9e8
    9054:	2000c112 	.word	0x2000c112
    9058:	2000c111 	.word	0x2000c111
    905c:	2000befc 	.word	0x2000befc
    9060:	2000bf2f 	.word	0x2000bf2f
    9064:	2000bf0d 	.word	0x2000bf0d
    9068:	2000bf1e 	.word	0x2000bf1e
    906c:	000215af 	.word	0x000215af

00009070 <main>:
#include <bluetooth/services/bas_client.h>

//static struct bt_bas_client bas;

void main(void)
{
    9070:	b500      	push	{lr}
	printk("Application start\n");
    9072:	4807      	ldr	r0, [pc, #28]	; (9090 <main+0x20>)
{
    9074:	b091      	sub	sp, #68	; 0x44
	printk("Application start\n");
    9076:	f010 fcba 	bl	199ee <printk>

	//bt_bas_client_init(&bas);


	// create a new device manager
	deviceManager dManager;
    907a:	4668      	mov	r0, sp
    907c:	f000 f97c 	bl	9378 <_ZN13deviceManagerC1Ev>
	// start application as peripheral and central
	dManager.setDevice(true,true);
    9080:	2201      	movs	r2, #1
    9082:	4668      	mov	r0, sp
    9084:	4611      	mov	r1, r2
    9086:	f000 fbcf 	bl	9828 <_ZN13deviceManager9setDeviceEbb>
    908a:	b011      	add	sp, #68	; 0x44
    908c:	f85d fb04 	ldr.w	pc, [sp], #4
    9090:	0001e2f4 	.word	0x0001e2f4

00009094 <_ZN13deviceManager13app_button_cbEv>:
    dk_set_led(USER_LED,led_state);
}

bool deviceManager::app_button_cb(void){
    return app_button_state;
}
    9094:	4b01      	ldr	r3, [pc, #4]	; (909c <_ZN13deviceManager13app_button_cbEv+0x8>)
    9096:	7818      	ldrb	r0, [r3, #0]
    9098:	4770      	bx	lr
    909a:	bf00      	nop
    909c:	2000bef7 	.word	0x2000bef7

000090a0 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv>:
}


void deviceManager::discovery_error_found(struct bt_conn *conn, int err, void *ctx)
{
	printk("The discovery procedure failed, err %d\n", err);
    90a0:	4801      	ldr	r0, [pc, #4]	; (90a8 <_ZN13deviceManager21discovery_error_foundEP7bt_conniPv+0x8>)
    90a2:	f010 bca4 	b.w	199ee <printk>
    90a6:	bf00      	nop
    90a8:	0001e307 	.word	0x0001e307

000090ac <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
	return BT_GATT_ITER_CONTINUE;
}

uint8_t deviceManager::notify_HR(struct bt_conn *conn,
		struct bt_gatt_subscribe_params *params,
		const void *data, uint16_t length) {
    90ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    90ae:	461d      	mov	r5, r3

	uint8_t dataToSend[2];
	dataToSend[0] = HEARTRATE;
    90b0:	2303      	movs	r3, #3
		const void *data, uint16_t length) {
    90b2:	460e      	mov	r6, r1
	if (!data) {
    90b4:	4614      	mov	r4, r2
	dataToSend[0] = HEARTRATE;
    90b6:	f88d 3004 	strb.w	r3, [sp, #4]
	if (!data) {
    90ba:	b932      	cbnz	r2, 90ca <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1e>
		printk("[UNSUBSCRIBED]\n");
    90bc:	480f      	ldr	r0, [pc, #60]	; (90fc <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x50>)
    90be:	f010 fc96 	bl	199ee <printk>
		params->value_handle = 0U;
		return BT_GATT_ITER_STOP;
    90c2:	4620      	mov	r0, r4
		params->value_handle = 0U;
    90c4:	8134      	strh	r4, [r6, #8]
	} else {
		printk("[NOTIFICATION] data %p length %u\n", data, length);
	}

	return BT_GATT_ITER_CONTINUE;
}
    90c6:	b002      	add	sp, #8
    90c8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 2) {
    90ca:	2d02      	cmp	r5, #2
    90cc:	d10f      	bne.n	90ee <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x42>
		uint8_t hr_bpm = ((uint8_t *)data)[1];
    90ce:	7851      	ldrb	r1, [r2, #1]
		deviceManager::data.heartRate = hr_bpm;
    90d0:	4b0b      	ldr	r3, [pc, #44]	; (9100 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x54>)
		printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    90d2:	480c      	ldr	r0, [pc, #48]	; (9104 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x58>)
		deviceManager::data.heartRate = hr_bpm;
    90d4:	7459      	strb	r1, [r3, #17]
		dataToSend[1] = hr_bpm;
    90d6:	f88d 1005 	strb.w	r1, [sp, #5]
		printk("[NOTIFICATION] Heart Rate %u bpm\n", hr_bpm);
    90da:	f010 fc88 	bl	199ee <printk>
		data_service_send(peripheralConn,dataToSend,sizeof(dataToSend));
    90de:	4b0a      	ldr	r3, [pc, #40]	; (9108 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x5c>)
    90e0:	462a      	mov	r2, r5
    90e2:	6818      	ldr	r0, [r3, #0]
    90e4:	a901      	add	r1, sp, #4
    90e6:	f000 fe69 	bl	9dbc <_Z17data_service_sendP7bt_connPKht>
	return BT_GATT_ITER_CONTINUE;
    90ea:	2001      	movs	r0, #1
    90ec:	e7eb      	b.n	90c6 <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x1a>
		printk("[NOTIFICATION] data %p length %u\n", data, length);
    90ee:	462a      	mov	r2, r5
    90f0:	4621      	mov	r1, r4
    90f2:	4806      	ldr	r0, [pc, #24]	; (910c <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x60>)
    90f4:	f010 fc7b 	bl	199ee <printk>
    90f8:	e7f7      	b.n	90ea <_ZN13deviceManager9notify_HREP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x3e>
    90fa:	bf00      	nop
    90fc:	0001e32f 	.word	0x0001e32f
    9100:	200087e8 	.word	0x200087e8
    9104:	0001e33f 	.word	0x0001e33f
    9108:	2000a468 	.word	0x2000a468
    910c:	0001e361 	.word	0x0001e361

00009110 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv>:
{
    9110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9112:	4604      	mov	r4, r0
	struct bt_conn *conn = bt_gatt_dm_conn_get(dm);
    9114:	f011 f8a7 	bl	1a266 <bt_gatt_dm_conn_get>
    9118:	4607      	mov	r7, r0
	printk("The discovery procedure succeeded\n");
    911a:	4821      	ldr	r0, [pc, #132]	; (91a0 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x90>)
    911c:	f010 fc67 	bl	199ee <printk>
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_HRS_MEASUREMENT);
    9120:	4620      	mov	r0, r4
    9122:	4920      	ldr	r1, [pc, #128]	; (91a4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x94>)
    9124:	f002 ffdc 	bl	c0e0 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
    9128:	4606      	mov	r6, r0
    912a:	b920      	cbnz	r0, 9136 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x26>
		printk("No heart rate measurement characteristic found");
    912c:	481e      	ldr	r0, [pc, #120]	; (91a8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x98>)
}
    912e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printk("No heat rate measurement characteristic value found");
    9132:	f010 bc5c 	b.w	199ee <printk>
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    9136:	4601      	mov	r1, r0
    9138:	4a1c      	ldr	r2, [pc, #112]	; (91ac <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x9c>)
    913a:	4620      	mov	r0, r4
    913c:	f011 f8e0 	bl	1a300 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    9140:	b908      	cbnz	r0, 9146 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x36>
		printk("No heat rate measurement characteristic value found");
    9142:	481b      	ldr	r0, [pc, #108]	; (91b0 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa0>)
    9144:	e7f3      	b.n	912e <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1e>
	paramHR.value_handle = gatt_desc->handle;
    9146:	8883      	ldrh	r3, [r0, #4]
    9148:	4d1a      	ldr	r5, [pc, #104]	; (91b4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa4>)
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    914a:	4631      	mov	r1, r6
    914c:	4620      	mov	r0, r4
    914e:	4a1a      	ldr	r2, [pc, #104]	; (91b8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xa8>)
	paramHR.value_handle = gatt_desc->handle;
    9150:	812b      	strh	r3, [r5, #8]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
    9152:	f011 f8d5 	bl	1a300 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
    9156:	b908      	cbnz	r0, 915c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x4c>
		printk("No heart rate CCC descriptor found. "
    9158:	4818      	ldr	r0, [pc, #96]	; (91bc <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xac>)
    915a:	e7e8      	b.n	912e <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x1e>
	paramHR.notify = notify_HR;
    915c:	4b18      	ldr	r3, [pc, #96]	; (91c0 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xb0>)
	err = bt_gatt_subscribe(conn, &paramHR);
    915e:	4629      	mov	r1, r5
	paramHR.notify = notify_HR;
    9160:	602b      	str	r3, [r5, #0]
	paramHR.value = BT_GATT_CCC_NOTIFY;
    9162:	2301      	movs	r3, #1
    9164:	81ab      	strh	r3, [r5, #12]
	paramHR.ccc_handle = gatt_desc->handle;
    9166:	8883      	ldrh	r3, [r0, #4]
	err = bt_gatt_subscribe(conn, &paramHR);
    9168:	4638      	mov	r0, r7
	paramHR.ccc_handle = gatt_desc->handle;
    916a:	816b      	strh	r3, [r5, #10]
	err = bt_gatt_subscribe(conn, &paramHR);
    916c:	f00a ff4a 	bl	14004 <bt_gatt_subscribe>
	if (err && err != -EALREADY) {
    9170:	4601      	mov	r1, r0
    9172:	b178      	cbz	r0, 9194 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x84>
    9174:	f110 0f45 	cmn.w	r0, #69	; 0x45
    9178:	d00c      	beq.n	9194 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x84>
		printk("Subscribe failed (err %d)\n", err);
    917a:	4812      	ldr	r0, [pc, #72]	; (91c4 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xb4>)
    917c:	f010 fc37 	bl	199ee <printk>
	err = bt_gatt_dm_data_release(dm);
    9180:	4620      	mov	r0, r4
    9182:	f011 f8cf 	bl	1a324 <bt_gatt_dm_data_release>
	if (err) {
    9186:	4601      	mov	r1, r0
    9188:	b140      	cbz	r0, 919c <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x8c>
}
    918a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printk("Could not release the discovery data (err %d)\n", err);
    918e:	480e      	ldr	r0, [pc, #56]	; (91c8 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xb8>)
    9190:	f010 bc2d 	b.w	199ee <printk>
		printk("[SUBSCRIBED]\n");
    9194:	480d      	ldr	r0, [pc, #52]	; (91cc <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0xbc>)
    9196:	f010 fc2a 	bl	199ee <printk>
    919a:	e7f1      	b.n	9180 <_ZN13deviceManager20discoveryCompletedHREP10bt_gatt_dmPv+0x70>
}
    919c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    919e:	bf00      	nop
    91a0:	0001e383 	.word	0x0001e383
    91a4:	0001e24c 	.word	0x0001e24c
    91a8:	0001e3a6 	.word	0x0001e3a6
    91ac:	0001e250 	.word	0x0001e250
    91b0:	0001e3d5 	.word	0x0001e3d5
    91b4:	2000a480 	.word	0x2000a480
    91b8:	0001e254 	.word	0x0001e254
    91bc:	0001e409 	.word	0x0001e409
    91c0:	000090ad 	.word	0x000090ad
    91c4:	0001e460 	.word	0x0001e460
    91c8:	0001e489 	.word	0x0001e489
    91cc:	0001e47b 	.word	0x0001e47b

000091d0 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv>:
void deviceManager::discovery_service_not_found(struct bt_conn *conn, void *ctx) {
    91d0:	b513      	push	{r0, r1, r4, lr}
    91d2:	4604      	mov	r4, r0
	printk("Service not found!\n");
    91d4:	4808      	ldr	r0, [pc, #32]	; (91f8 <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x28>)
    91d6:	f010 fc0a 	bl	199ee <printk>
	error[0] = 10;
    91da:	230a      	movs	r3, #10
    91dc:	f88d 3004 	strb.w	r3, [sp, #4]
	data_service_send(peripheralConn,error, sizeof(error));
    91e0:	4b06      	ldr	r3, [pc, #24]	; (91fc <_ZN13deviceManager27discovery_service_not_foundEP7bt_connPv+0x2c>)
    91e2:	2201      	movs	r2, #1
    91e4:	6818      	ldr	r0, [r3, #0]
    91e6:	a901      	add	r1, sp, #4
    91e8:	f000 fde8 	bl	9dbc <_Z17data_service_sendP7bt_connPKht>
	bt_conn_disconnect(conn,-5);
    91ec:	21fb      	movs	r1, #251	; 0xfb
    91ee:	4620      	mov	r0, r4
    91f0:	f007 fdc8 	bl	10d84 <bt_conn_disconnect>
}
    91f4:	b002      	add	sp, #8
    91f6:	bd10      	pop	{r4, pc}
    91f8:	0001e4b8 	.word	0x0001e4b8
    91fc:	2000a468 	.word	0x2000a468

00009200 <_ZN13deviceManager13buttonChangedEjj>:
   	if (has_changed & USER_BUTTON) {
    9200:	07cb      	lsls	r3, r1, #31
void deviceManager::buttonChanged(uint32_t button_state, uint32_t has_changed){
    9202:	b510      	push	{r4, lr}
   	if (has_changed & USER_BUTTON) {
    9204:	d507      	bpl.n	9216 <_ZN13deviceManager13buttonChangedEjj+0x16>
		bt_lbs_send_button_state(button_state);
    9206:	1e04      	subs	r4, r0, #0
    9208:	bf18      	it	ne
    920a:	2401      	movne	r4, #1
    920c:	4620      	mov	r0, r4
    920e:	f003 fb69 	bl	c8e4 <bt_lbs_send_button_state>
		app_button_state = button_state ? true : false;
    9212:	4b01      	ldr	r3, [pc, #4]	; (9218 <_ZN13deviceManager13buttonChangedEjj+0x18>)
    9214:	701c      	strb	r4, [r3, #0]
}
    9216:	bd10      	pop	{r4, pc}
    9218:	2000bef7 	.word	0x2000bef7

0000921c <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt>:
			const void *data, uint16_t length) {
    921c:	b513      	push	{r0, r1, r4, lr}
    921e:	4611      	mov	r1, r2
	if (subscriptionDone)
    9220:	4a31      	ldr	r2, [pc, #196]	; (92e8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xcc>)
    9222:	7812      	ldrb	r2, [r2, #0]
    9224:	2a00      	cmp	r2, #0
    9226:	d034      	beq.n	9292 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
		if (length > 0)
    9228:	2b00      	cmp	r3, #0
    922a:	d032      	beq.n	9292 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
			deviceManager::data.saveData(data);
    922c:	4c2f      	ldr	r4, [pc, #188]	; (92ec <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    922e:	4620      	mov	r0, r4
    9230:	f000 fd3e 	bl	9cb0 <_ZN7dataCSC8saveDataEPKv>
			if (getDiameter() != 0 && diameterSet == false)
    9234:	f000 fdec 	bl	9e10 <_Z11getDiameterv>
    9238:	2200      	movs	r2, #0
    923a:	2300      	movs	r3, #0
    923c:	f7ff fc24 	bl	8a88 <__aeabi_dcmpeq>
    9240:	bb50      	cbnz	r0, 9298 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7c>
    9242:	4b2b      	ldr	r3, [pc, #172]	; (92f0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    9244:	781a      	ldrb	r2, [r3, #0]
    9246:	bb3a      	cbnz	r2, 9298 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x7c>
				diameterSet = true;
    9248:	2201      	movs	r2, #1
    924a:	701a      	strb	r2, [r3, #0]
				deviceManager::data.wheelDiameter = getDiameter();
    924c:	f000 fde0 	bl	9e10 <_Z11getDiameterv>
    9250:	e9c4 0106 	strd	r0, r1, [r4, #24]
			if (deviceManager::data.type == CSC_SPEED)
    9254:	7c24      	ldrb	r4, [r4, #16]
    9256:	2c01      	cmp	r4, #1
    9258:	d12d      	bne.n	92b6 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x9a>
				if (diameterSet)
    925a:	4b25      	ldr	r3, [pc, #148]	; (92f0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    925c:	781b      	ldrb	r3, [r3, #0]
    925e:	b1c3      	cbz	r3, 9292 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
					uint16_t speed = deviceManager::data.calcSpeed();
    9260:	4822      	ldr	r0, [pc, #136]	; (92ec <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    9262:	f7ff fdf1 	bl	8e48 <_ZN7dataCSC9calcSpeedEv>
					if (speed > 0)
    9266:	b1a0      	cbz	r0, 9292 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
						dataToSend[1] = (uint8_t) (speed/100);	
    9268:	2164      	movs	r1, #100	; 0x64
    926a:	fbb0 f1f1 	udiv	r1, r0, r1
						dataToSend[0] = CSC_SPEED;
    926e:	f88d 4004 	strb.w	r4, [sp, #4]
						if (peripheralConn != nullptr)
    9272:	4c20      	ldr	r4, [pc, #128]	; (92f4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>)
						dataToSend[1] = (uint8_t) (speed/100);	
    9274:	b289      	uxth	r1, r1
						if (peripheralConn != nullptr)
    9276:	6823      	ldr	r3, [r4, #0]
						dataToSend[1] = (uint8_t) (speed/100);	
    9278:	f88d 1005 	strb.w	r1, [sp, #5]
						val_after_comma = (uint8_t) (speed);
    927c:	f88d 0006 	strb.w	r0, [sp, #6]
						if (peripheralConn != nullptr)
    9280:	b13b      	cbz	r3, 9292 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
							printk("Speed: %d\n",speed/100);
    9282:	481d      	ldr	r0, [pc, #116]	; (92f8 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xdc>)
							printk("Cadence rpm: %d\n",rpm);
    9284:	f010 fbb3 	bl	199ee <printk>
							data_service_send(peripheralConn,dataToSend, sizeof(dataToSend));
    9288:	2203      	movs	r2, #3
    928a:	6820      	ldr	r0, [r4, #0]
    928c:	a901      	add	r1, sp, #4
    928e:	f000 fd95 	bl	9dbc <_Z17data_service_sendP7bt_connPKht>
}
    9292:	2001      	movs	r0, #1
    9294:	b002      	add	sp, #8
    9296:	bd10      	pop	{r4, pc}
			else if (getDiameter() == 0 && diameterSet == true)
    9298:	f000 fdba 	bl	9e10 <_Z11getDiameterv>
    929c:	2200      	movs	r2, #0
    929e:	2300      	movs	r3, #0
    92a0:	f7ff fbf2 	bl	8a88 <__aeabi_dcmpeq>
    92a4:	2800      	cmp	r0, #0
    92a6:	d0d5      	beq.n	9254 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
    92a8:	4b11      	ldr	r3, [pc, #68]	; (92f0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    92aa:	781a      	ldrb	r2, [r3, #0]
    92ac:	2a00      	cmp	r2, #0
    92ae:	d0d1      	beq.n	9254 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
				diameterSet = false;
    92b0:	2200      	movs	r2, #0
    92b2:	701a      	strb	r2, [r3, #0]
    92b4:	e7ce      	b.n	9254 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x38>
			else if (deviceManager::data.type == CSC_CADENCE)
    92b6:	2c02      	cmp	r4, #2
    92b8:	d1eb      	bne.n	9292 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
				if (diameterSet)
    92ba:	4b0d      	ldr	r3, [pc, #52]	; (92f0 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd4>)
    92bc:	781b      	ldrb	r3, [r3, #0]
    92be:	2b00      	cmp	r3, #0
    92c0:	d0e7      	beq.n	9292 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
					uint16_t rpm = deviceManager::data.calcRPM();
    92c2:	480a      	ldr	r0, [pc, #40]	; (92ec <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd0>)
    92c4:	f000 fd16 	bl	9cf4 <_ZN7dataCSC7calcRPMEv>
					if (rpm > 0)
    92c8:	4601      	mov	r1, r0
    92ca:	2800      	cmp	r0, #0
    92cc:	d0e1      	beq.n	9292 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
						dataToSend[0] = CSC_CADENCE;	
    92ce:	f88d 4004 	strb.w	r4, [sp, #4]
						if (peripheralConn != nullptr)
    92d2:	4c08      	ldr	r4, [pc, #32]	; (92f4 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xd8>)
						dataToSend[2] = (uint8_t) (rpm >> 8);	
    92d4:	0a03      	lsrs	r3, r0, #8
    92d6:	f88d 3006 	strb.w	r3, [sp, #6]
						if (peripheralConn != nullptr)
    92da:	6823      	ldr	r3, [r4, #0]
						dataToSend[1] = (uint8_t) rpm;
    92dc:	f88d 0005 	strb.w	r0, [sp, #5]
						if (peripheralConn != nullptr)
    92e0:	2b00      	cmp	r3, #0
    92e2:	d0d6      	beq.n	9292 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x76>
							printk("Cadence rpm: %d\n",rpm);
    92e4:	4805      	ldr	r0, [pc, #20]	; (92fc <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0xe0>)
    92e6:	e7cd      	b.n	9284 <_ZN13deviceManager10onReceivedEP7bt_connP24bt_gatt_subscribe_paramsPKvt+0x68>
    92e8:	2000bef8 	.word	0x2000bef8
    92ec:	200087e8 	.word	0x200087e8
    92f0:	2000bef3 	.word	0x2000bef3
    92f4:	2000a468 	.word	0x2000a468
    92f8:	0001e4cc 	.word	0x0001e4cc
    92fc:	0001e4d7 	.word	0x0001e4d7

00009300 <bt_addr_le_to_str.isra.0>:
 * @param len Length of data to be copied to user string buffer. Refer to
 * BT_ADDR_LE_STR_LEN about recommended value.
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9300:	b5f0      	push	{r4, r5, r6, r7, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    9302:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    9304:	b08b      	sub	sp, #44	; 0x2c
    9306:	4604      	mov	r4, r0
    9308:	460e      	mov	r6, r1
    930a:	4617      	mov	r7, r2
    930c:	ad07      	add	r5, sp, #28
    930e:	2b03      	cmp	r3, #3
    9310:	d820      	bhi.n	9354 <bt_addr_le_to_str.isra.0+0x54>
    9312:	e8df f003 	tbb	[pc, r3]
    9316:	1902      	.short	0x1902
    9318:	1d1b      	.short	0x1d1b
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    931a:	4911      	ldr	r1, [pc, #68]	; (9360 <bt_addr_le_to_str.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    931c:	4628      	mov	r0, r5
    931e:	f011 fd4c 	bl	1adba <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    9322:	7863      	ldrb	r3, [r4, #1]
    9324:	4639      	mov	r1, r7
    9326:	9304      	str	r3, [sp, #16]
    9328:	78a3      	ldrb	r3, [r4, #2]
    932a:	4630      	mov	r0, r6
    932c:	9303      	str	r3, [sp, #12]
    932e:	78e3      	ldrb	r3, [r4, #3]
    9330:	4a0c      	ldr	r2, [pc, #48]	; (9364 <bt_addr_le_to_str.isra.0+0x64>)
    9332:	9302      	str	r3, [sp, #8]
    9334:	7923      	ldrb	r3, [r4, #4]
    9336:	9505      	str	r5, [sp, #20]
    9338:	9301      	str	r3, [sp, #4]
    933a:	7963      	ldrb	r3, [r4, #5]
    933c:	9300      	str	r3, [sp, #0]
    933e:	79a3      	ldrb	r3, [r4, #6]
    9340:	f010 fb62 	bl	19a08 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    9344:	b00b      	add	sp, #44	; 0x2c
    9346:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    9348:	4907      	ldr	r1, [pc, #28]	; (9368 <bt_addr_le_to_str.isra.0+0x68>)
    934a:	e7e7      	b.n	931c <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "public-id");
    934c:	4907      	ldr	r1, [pc, #28]	; (936c <bt_addr_le_to_str.isra.0+0x6c>)
    934e:	e7e5      	b.n	931c <bt_addr_le_to_str.isra.0+0x1c>
		strcpy(type, "random-id");
    9350:	4907      	ldr	r1, [pc, #28]	; (9370 <bt_addr_le_to_str.isra.0+0x70>)
    9352:	e7e3      	b.n	931c <bt_addr_le_to_str.isra.0+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    9354:	210a      	movs	r1, #10
    9356:	4628      	mov	r0, r5
    9358:	4a06      	ldr	r2, [pc, #24]	; (9374 <bt_addr_le_to_str.isra.0+0x74>)
    935a:	f010 fb55 	bl	19a08 <snprintk>
		break;
    935e:	e7e0      	b.n	9322 <bt_addr_le_to_str.isra.0+0x22>
    9360:	0001e4e8 	.word	0x0001e4e8
    9364:	0001e511 	.word	0x0001e511
    9368:	0001e4ef 	.word	0x0001e4ef
    936c:	0001e4f6 	.word	0x0001e4f6
    9370:	0001e500 	.word	0x0001e500
    9374:	0001e50a 	.word	0x0001e50a

00009378 <_ZN13deviceManagerC1Ev>:
deviceManager::deviceManager(){
    9378:	b510      	push	{r4, lr}
    937a:	4604      	mov	r4, r0
    937c:	2214      	movs	r2, #20
    937e:	2100      	movs	r1, #0
    9380:	f011 fda0 	bl	1aec4 <memset>
    9384:	4b0e      	ldr	r3, [pc, #56]	; (93c0 <_ZN13deviceManagerC1Ev+0x48>)
    9386:	4a0f      	ldr	r2, [pc, #60]	; (93c4 <_ZN13deviceManagerC1Ev+0x4c>)
    9388:	6023      	str	r3, [r4, #0]
    938a:	4b0f      	ldr	r3, [pc, #60]	; (93c8 <_ZN13deviceManagerC1Ev+0x50>)
    938c:	e892 0003 	ldmia.w	r2, {r0, r1}
    9390:	6063      	str	r3, [r4, #4]
    9392:	f104 0314 	add.w	r3, r4, #20
    9396:	e883 0003 	stmia.w	r3, {r0, r1}
    939a:	2224      	movs	r2, #36	; 0x24
    939c:	2100      	movs	r1, #0
    939e:	f104 001c 	add.w	r0, r4, #28
    93a2:	f011 fd8f 	bl	1aec4 <memset>
		centralConnections[i] = nullptr;
    93a6:	2300      	movs	r3, #0
    93a8:	4a08      	ldr	r2, [pc, #32]	; (93cc <_ZN13deviceManagerC1Ev+0x54>)
}
    93aa:	4620      	mov	r0, r4
		centralConnections[i] = nullptr;
    93ac:	e9c2 3300 	strd	r3, r3, [r2]
    93b0:	e9c2 3302 	strd	r3, r3, [r2, #8]
	connectedP = false;
    93b4:	4a06      	ldr	r2, [pc, #24]	; (93d0 <_ZN13deviceManagerC1Ev+0x58>)
    93b6:	7013      	strb	r3, [r2, #0]
	connectedC = false;
    93b8:	4a06      	ldr	r2, [pc, #24]	; (93d4 <_ZN13deviceManagerC1Ev+0x5c>)
    93ba:	7013      	strb	r3, [r2, #0]
}
    93bc:	bd10      	pop	{r4, pc}
    93be:	bf00      	nop
    93c0:	000098ed 	.word	0x000098ed
    93c4:	0001d860 	.word	0x0001d860
    93c8:	00009b29 	.word	0x00009b29
    93cc:	2000a46c 	.word	0x2000a46c
    93d0:	2000bef2 	.word	0x2000bef2
    93d4:	2000bef1 	.word	0x2000bef1

000093d8 <_ZN13deviceManager9getDeviceEv>:
    if(isCentral && isPeripheral){
    93d8:	4a07      	ldr	r2, [pc, #28]	; (93f8 <_ZN13deviceManager9getDeviceEv+0x20>)
    93da:	4b08      	ldr	r3, [pc, #32]	; (93fc <_ZN13deviceManager9getDeviceEv+0x24>)
    93dc:	7812      	ldrb	r2, [r2, #0]
    93de:	781b      	ldrb	r3, [r3, #0]
    93e0:	b122      	cbz	r2, 93ec <_ZN13deviceManager9getDeviceEv+0x14>
        return 1;
    93e2:	2b00      	cmp	r3, #0
    93e4:	bf14      	ite	ne
    93e6:	2003      	movne	r0, #3
    93e8:	2001      	moveq	r0, #1
    93ea:	4770      	bx	lr
        return 0;
    93ec:	2b00      	cmp	r3, #0
    93ee:	bf14      	ite	ne
    93f0:	2002      	movne	r0, #2
    93f2:	2000      	moveq	r0, #0
}
    93f4:	4770      	bx	lr
    93f6:	bf00      	nop
    93f8:	2000befa 	.word	0x2000befa
    93fc:	2000bef5 	.word	0x2000bef5

00009400 <_ZN13deviceManager10initButtonEv>:
int deviceManager::initButton(){
    9400:	b510      	push	{r4, lr}
    err = dk_buttons_init(buttonChanged);
    9402:	4805      	ldr	r0, [pc, #20]	; (9418 <_ZN13deviceManager10initButtonEv+0x18>)
    9404:	f00c fb6e 	bl	15ae4 <dk_buttons_init>
	if (err) {
    9408:	4604      	mov	r4, r0
    940a:	b118      	cbz	r0, 9414 <_ZN13deviceManager10initButtonEv+0x14>
		printk("Cannot init buttons (err: %d)\n", err);
    940c:	4601      	mov	r1, r0
    940e:	4803      	ldr	r0, [pc, #12]	; (941c <_ZN13deviceManager10initButtonEv+0x1c>)
    9410:	f010 faed 	bl	199ee <printk>
}
    9414:	4620      	mov	r0, r4
    9416:	bd10      	pop	{r4, pc}
    9418:	00009201 	.word	0x00009201
    941c:	0001e534 	.word	0x0001e534

00009420 <_ZN13deviceManager16startAdvertisingEv>:
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    9420:	2301      	movs	r3, #1
void deviceManager::startAdvertising() {
    9422:	b507      	push	{r0, r1, r2, lr}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
    9424:	490b      	ldr	r1, [pc, #44]	; (9454 <_ZN13deviceManager16startAdvertisingEv+0x34>)
    9426:	9300      	str	r3, [sp, #0]
    9428:	2202      	movs	r2, #2
    942a:	4b0b      	ldr	r3, [pc, #44]	; (9458 <_ZN13deviceManager16startAdvertisingEv+0x38>)
    942c:	480b      	ldr	r0, [pc, #44]	; (945c <_ZN13deviceManager16startAdvertisingEv+0x3c>)
    942e:	f006 fcbb 	bl	fda8 <bt_le_adv_start>
	if (err) {
    9432:	4601      	mov	r1, r0
    9434:	b128      	cbz	r0, 9442 <_ZN13deviceManager16startAdvertisingEv+0x22>
		printk("Advertising failed to start (err %d)\n", err);
    9436:	480a      	ldr	r0, [pc, #40]	; (9460 <_ZN13deviceManager16startAdvertisingEv+0x40>)
}
    9438:	b003      	add	sp, #12
    943a:	f85d eb04 	ldr.w	lr, [sp], #4
		printk("Advertising failed to start (err %d)\n", err);
    943e:	f010 bad6 	b.w	199ee <printk>
	printk("Advertising successfully started\n");
    9442:	4808      	ldr	r0, [pc, #32]	; (9464 <_ZN13deviceManager16startAdvertisingEv+0x44>)
    9444:	f010 fad3 	bl	199ee <printk>
	printk("Waiting for connection...\n");
    9448:	4807      	ldr	r0, [pc, #28]	; (9468 <_ZN13deviceManager16startAdvertisingEv+0x48>)
}
    944a:	b003      	add	sp, #12
    944c:	f85d eb04 	ldr.w	lr, [sp], #4
	printk("Waiting for connection...\n");
    9450:	f010 bacd 	b.w	199ee <printk>
    9454:	0001d978 	.word	0x0001d978
    9458:	0001d988 	.word	0x0001d988
    945c:	0001d8f8 	.word	0x0001d8f8
    9460:	0001e553 	.word	0x0001e553
    9464:	0001e579 	.word	0x0001e579
    9468:	0001e59b 	.word	0x0001e59b

0000946c <_ZN13deviceManager14initPeripheralEv>:
void deviceManager::initPeripheral(){
    946c:	b510      	push	{r4, lr}
    946e:	4604      	mov	r4, r0
    if(getDevice() == 3 || getDevice() == 2){
    9470:	f7ff ffb2 	bl	93d8 <_ZN13deviceManager9getDeviceEv>
    9474:	1e83      	subs	r3, r0, #2
    9476:	b2db      	uxtb	r3, r3
    9478:	2b01      	cmp	r3, #1
    947a:	d82d      	bhi.n	94d8 <_ZN13deviceManager14initPeripheralEv+0x6c>
        err = dk_leds_init();
    947c:	f00c facc 	bl	15a18 <dk_leds_init>
        if (err) {
    9480:	4601      	mov	r1, r0
    9482:	b120      	cbz	r0, 948e <_ZN13deviceManager14initPeripheralEv+0x22>
            printk("LEDs init failed (err %d)\n", err);
    9484:	4815      	ldr	r0, [pc, #84]	; (94dc <_ZN13deviceManager14initPeripheralEv+0x70>)
}
    9486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Button init failed (err %d)\n", err);
    948a:	f010 bab0 	b.w	199ee <printk>
        err = initButton();
    948e:	f7ff ffb7 	bl	9400 <_ZN13deviceManager10initButtonEv>
    9492:	4601      	mov	r1, r0
        if (err) {
    9494:	b108      	cbz	r0, 949a <_ZN13deviceManager14initPeripheralEv+0x2e>
            printk("Button init failed (err %d)\n", err);
    9496:	4812      	ldr	r0, [pc, #72]	; (94e0 <_ZN13deviceManager14initPeripheralEv+0x74>)
    9498:	e7f5      	b.n	9486 <_ZN13deviceManager14initPeripheralEv+0x1a>
        err = bt_enable(NULL);
    949a:	f006 f9eb 	bl	f874 <bt_enable>
        if (err) {
    949e:	4601      	mov	r1, r0
    94a0:	b108      	cbz	r0, 94a6 <_ZN13deviceManager14initPeripheralEv+0x3a>
            printk("Bluetooth init failed (err %d)\n", err);
    94a2:	4810      	ldr	r0, [pc, #64]	; (94e4 <_ZN13deviceManager14initPeripheralEv+0x78>)
    94a4:	e7ef      	b.n	9486 <_ZN13deviceManager14initPeripheralEv+0x1a>
        printk("Bluetooth initialized\n");
    94a6:	4810      	ldr	r0, [pc, #64]	; (94e8 <_ZN13deviceManager14initPeripheralEv+0x7c>)
    94a8:	f010 faa1 	bl	199ee <printk>
		bt_conn_cb_register(&conn_callbacks);
    94ac:	4620      	mov	r0, r4
    94ae:	f007 f83f 	bl	10530 <bt_conn_cb_register>
            settings_load();
    94b2:	f010 fd91 	bl	19fd8 <settings_load>
        err = bt_lbs_init(&lbs_callbacs);
    94b6:	f104 0014 	add.w	r0, r4, #20
    94ba:	f003 fa09 	bl	c8d0 <bt_lbs_init>
        if (err) {
    94be:	4601      	mov	r1, r0
    94c0:	b108      	cbz	r0, 94c6 <_ZN13deviceManager14initPeripheralEv+0x5a>
			printk("Failed to init LBS (err:%d)\n", err);
    94c2:	480a      	ldr	r0, [pc, #40]	; (94ec <_ZN13deviceManager14initPeripheralEv+0x80>)
    94c4:	e7df      	b.n	9486 <_ZN13deviceManager14initPeripheralEv+0x1a>
		err = data_service_init();
    94c6:	f000 fc67 	bl	9d98 <_Z17data_service_initv>
		if (err) 
    94ca:	4601      	mov	r1, r0
    94cc:	2800      	cmp	r0, #0
    94ce:	d1f8      	bne.n	94c2 <_ZN13deviceManager14initPeripheralEv+0x56>
}
    94d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startAdvertising();
    94d4:	f7ff bfa4 	b.w	9420 <_ZN13deviceManager16startAdvertisingEv>
}
    94d8:	bd10      	pop	{r4, pc}
    94da:	bf00      	nop
    94dc:	0001e5b6 	.word	0x0001e5b6
    94e0:	0001e5d1 	.word	0x0001e5d1
    94e4:	0001e5ee 	.word	0x0001e5ee
    94e8:	0001e60e 	.word	0x0001e60e
    94ec:	0001e625 	.word	0x0001e625

000094f0 <_ZN13deviceManager9startScanEv>:
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    94f0:	2001      	movs	r0, #1
void deviceManager::startScan(){
    94f2:	b508      	push	{r3, lr}
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    94f4:	f003 f9a4 	bl	c840 <bt_scan_start>
	if (err) {
    94f8:	4601      	mov	r1, r0
    94fa:	b110      	cbz	r0, 9502 <_ZN13deviceManager9startScanEv+0x12>
		printk("Scanning failed to start, err %d\n", err);
    94fc:	4803      	ldr	r0, [pc, #12]	; (950c <_ZN13deviceManager9startScanEv+0x1c>)
    94fe:	f010 fa76 	bl	199ee <printk>
}
    9502:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Scanning...\n");
    9506:	4802      	ldr	r0, [pc, #8]	; (9510 <_ZN13deviceManager9startScanEv+0x20>)
    9508:	f010 ba71 	b.w	199ee <printk>
    950c:	0001e642 	.word	0x0001e642
    9510:	0001e664 	.word	0x0001e664

00009514 <_ZN13deviceManager8initScanEv>:
void deviceManager::initScan() {
    9514:	b530      	push	{r4, r5, lr}
    9516:	b089      	sub	sp, #36	; 0x24
	sensorInfos = getSensorInfos();
    9518:	f000 fcb0 	bl	9e7c <_Z14getSensorInfosv>
    951c:	4d2e      	ldr	r5, [pc, #184]	; (95d8 <_ZN13deviceManager8initScanEv+0xc4>)
	struct bt_le_scan_param scanParam = {
    951e:	ab03      	add	r3, sp, #12
    9520:	2214      	movs	r2, #20
    9522:	2100      	movs	r1, #0
	sensorInfos = getSensorInfos();
    9524:	7028      	strb	r0, [r5, #0]
    9526:	4604      	mov	r4, r0
	struct bt_le_scan_param scanParam = {
    9528:	4618      	mov	r0, r3
    952a:	f011 fccb 	bl	1aec4 <memset>
    952e:	2201      	movs	r2, #1
    9530:	f88d 200c 	strb.w	r2, [sp, #12]
    9534:	9204      	str	r2, [sp, #16]
    9536:	4a29      	ldr	r2, [pc, #164]	; (95dc <_ZN13deviceManager8initScanEv+0xc8>)
	struct bt_scan_init_param scanInit = {
    9538:	4929      	ldr	r1, [pc, #164]	; (95e0 <_ZN13deviceManager8initScanEv+0xcc>)
	struct bt_le_scan_param scanParam = {
    953a:	9205      	str	r2, [sp, #20]
	struct bt_scan_init_param scanInit = {
    953c:	2200      	movs	r2, #0
    953e:	9102      	str	r1, [sp, #8]
    9540:	9201      	str	r2, [sp, #4]
	};
    9542:	9000      	str	r0, [sp, #0]
	if (sensorInfos != 0)
    9544:	2c00      	cmp	r4, #0
    9546:	d042      	beq.n	95ce <_ZN13deviceManager8initScanEv+0xba>
		if (once)
    9548:	4b26      	ldr	r3, [pc, #152]	; (95e4 <_ZN13deviceManager8initScanEv+0xd0>)
    954a:	7819      	ldrb	r1, [r3, #0]
    954c:	b141      	cbz	r1, 9560 <_ZN13deviceManager8initScanEv+0x4c>
			once = false;
    954e:	701a      	strb	r2, [r3, #0]
			bt_le_scan_stop();
    9550:	f006 fe2c 	bl	101ac <bt_le_scan_stop>
			bt_scan_init(&scanInit);
    9554:	4668      	mov	r0, sp
    9556:	f003 f941 	bl	c7dc <bt_scan_init>
			bt_scan_cb_register(&scan_cb);			
    955a:	4823      	ldr	r0, [pc, #140]	; (95e8 <_ZN13deviceManager8initScanEv+0xd4>)
    955c:	f002 ff8a 	bl	c474 <bt_scan_cb_register>
		bt_scan_filter_remove_all();
    9560:	f002 ffee 	bl	c540 <bt_scan_filter_remove_all>
		switch (sensorInfos)
    9564:	782b      	ldrb	r3, [r5, #0]
    9566:	3b01      	subs	r3, #1
    9568:	2b04      	cmp	r3, #4
    956a:	d825      	bhi.n	95b8 <_ZN13deviceManager8initScanEv+0xa4>
    956c:	e8df f003 	tbb	[pc, r3]
    9570:	190f0d03 	.word	0x190f0d03
    9574:	22          	.byte	0x22
    9575:	00          	.byte	0x00
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9576:	491d      	ldr	r1, [pc, #116]	; (95ec <_ZN13deviceManager8initScanEv+0xd8>)
    9578:	2003      	movs	r0, #3
    957a:	f002 ff8b 	bl	c494 <bt_scan_filter_add>
				if (err) {
    957e:	b1d8      	cbz	r0, 95b8 <_ZN13deviceManager8initScanEv+0xa4>
					printk("Scanning filters cannot be set\n");
    9580:	481b      	ldr	r0, [pc, #108]	; (95f0 <_ZN13deviceManager8initScanEv+0xdc>)
    9582:	f010 fa34 	bl	199ee <printk>
}
    9586:	b009      	add	sp, #36	; 0x24
    9588:	bd30      	pop	{r4, r5, pc}
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    958a:	491a      	ldr	r1, [pc, #104]	; (95f4 <_ZN13deviceManager8initScanEv+0xe0>)
    958c:	e7f4      	b.n	9578 <_ZN13deviceManager8initScanEv+0x64>
				if (nbrConnectionsCentral == 0 || nbrConnectionsCentral == 1)
    958e:	4b1a      	ldr	r3, [pc, #104]	; (95f8 <_ZN13deviceManager8initScanEv+0xe4>)
    9590:	781b      	ldrb	r3, [r3, #0]
    9592:	2b01      	cmp	r3, #1
    9594:	d801      	bhi.n	959a <_ZN13deviceManager8initScanEv+0x86>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    9596:	4919      	ldr	r1, [pc, #100]	; (95fc <_ZN13deviceManager8initScanEv+0xe8>)
    9598:	e7ee      	b.n	9578 <_ZN13deviceManager8initScanEv+0x64>
				else if (nbrConnectionsCentral == 2)
    959a:	2b02      	cmp	r3, #2
    959c:	d10c      	bne.n	95b8 <_ZN13deviceManager8initScanEv+0xa4>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_DIS);
    959e:	4918      	ldr	r1, [pc, #96]	; (9600 <_ZN13deviceManager8initScanEv+0xec>)
    95a0:	e7ea      	b.n	9578 <_ZN13deviceManager8initScanEv+0x64>
				if (nbrConnectionsCentral == 0)
    95a2:	4b15      	ldr	r3, [pc, #84]	; (95f8 <_ZN13deviceManager8initScanEv+0xe4>)
    95a4:	781b      	ldrb	r3, [r3, #0]
    95a6:	b90b      	cbnz	r3, 95ac <_ZN13deviceManager8initScanEv+0x98>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_CSC);
    95a8:	4916      	ldr	r1, [pc, #88]	; (9604 <_ZN13deviceManager8initScanEv+0xf0>)
    95aa:	e7e5      	b.n	9578 <_ZN13deviceManager8initScanEv+0x64>
				else if (nbrConnectionsCentral == 1)
    95ac:	2b01      	cmp	r3, #1
    95ae:	d103      	bne.n	95b8 <_ZN13deviceManager8initScanEv+0xa4>
					err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_DIS);
    95b0:	4915      	ldr	r1, [pc, #84]	; (9608 <_ZN13deviceManager8initScanEv+0xf4>)
    95b2:	e7e1      	b.n	9578 <_ZN13deviceManager8initScanEv+0x64>
				err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_DIS);
    95b4:	4915      	ldr	r1, [pc, #84]	; (960c <_ZN13deviceManager8initScanEv+0xf8>)
    95b6:	e7df      	b.n	9578 <_ZN13deviceManager8initScanEv+0x64>
		err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    95b8:	2100      	movs	r1, #0
    95ba:	2004      	movs	r0, #4
    95bc:	f002 ffec 	bl	c598 <bt_scan_filter_enable>
		if (err) {
    95c0:	b110      	cbz	r0, 95c8 <_ZN13deviceManager8initScanEv+0xb4>
			printk("Filters cannot be turned on\n");
    95c2:	4813      	ldr	r0, [pc, #76]	; (9610 <_ZN13deviceManager8initScanEv+0xfc>)
    95c4:	f010 fa13 	bl	199ee <printk>
		startScan();
    95c8:	f7ff ff92 	bl	94f0 <_ZN13deviceManager9startScanEv>
    95cc:	e7db      	b.n	9586 <_ZN13deviceManager8initScanEv+0x72>
		err = bt_le_scan_start(&scanParam, deviceFound);
    95ce:	4911      	ldr	r1, [pc, #68]	; (9614 <_ZN13deviceManager8initScanEv+0x100>)
    95d0:	f006 fd88 	bl	100e4 <bt_le_scan_start>
		if (err) {
    95d4:	e7d7      	b.n	9586 <_ZN13deviceManager8initScanEv+0x72>
    95d6:	bf00      	nop
    95d8:	2000bef4 	.word	0x2000bef4
    95dc:	00300060 	.word	0x00300060
    95e0:	0001e214 	.word	0x0001e214
    95e4:	20008574 	.word	0x20008574
    95e8:	20008170 	.word	0x20008170
    95ec:	0001e21c 	.word	0x0001e21c
    95f0:	0001e671 	.word	0x0001e671
    95f4:	0001e220 	.word	0x0001e220
    95f8:	2000bef9 	.word	0x2000bef9
    95fc:	0001e224 	.word	0x0001e224
    9600:	0001e228 	.word	0x0001e228
    9604:	0001e22c 	.word	0x0001e22c
    9608:	0001e230 	.word	0x0001e230
    960c:	0001e234 	.word	0x0001e234
    9610:	0001e691 	.word	0x0001e691
    9614:	0001988d 	.word	0x0001988d

00009618 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv>:
void deviceManager::discoveryCompletedCSC(struct bt_gatt_dm *dm, void *ctx) {
    9618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!subscriptionDone)
    961a:	4e4d      	ldr	r6, [pc, #308]	; (9750 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x138>)
void deviceManager::discoveryCompletedCSC(struct bt_gatt_dm *dm, void *ctx) {
    961c:	4604      	mov	r4, r0
	if (!subscriptionDone)
    961e:	7833      	ldrb	r3, [r6, #0]
    9620:	2b00      	cmp	r3, #0
    9622:	d135      	bne.n	9690 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x78>
		chrc = bt_gatt_dm_char_by_uuid(dm,BT_UUID_CSC_MEASUREMENT);
    9624:	494b      	ldr	r1, [pc, #300]	; (9754 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x13c>)
    9626:	f002 fd5b 	bl	c0e0 <bt_gatt_dm_char_by_uuid>
		if (!chrc) {
    962a:	4605      	mov	r5, r0
    962c:	b970      	cbnz	r0, 964c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x34>
			printk("Missing CSC measurement characteristic\n");
    962e:	484a      	ldr	r0, [pc, #296]	; (9758 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x140>)
			printk("Missing CSC measurement char CCC descriptor\n");
    9630:	f010 f9dd 	bl	199ee <printk>
			err = bt_gatt_dm_data_release(dm);
    9634:	4620      	mov	r0, r4
    9636:	f010 fe75 	bl	1a324 <bt_gatt_dm_data_release>
			if (err) {
    963a:	4601      	mov	r1, r0
    963c:	2800      	cmp	r0, #0
    963e:	d040      	beq.n	96c2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
				printk("Could not release discovery data, err: %d\n", err);
    9640:	4846      	ldr	r0, [pc, #280]	; (975c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x144>)
}
    9642:	b003      	add	sp, #12
    9644:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				printk("Could not release discovery data, err: %d\n", err);
    9648:	f010 b9d1 	b.w	199ee <printk>
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_CSC_MEASUREMENT);
    964c:	4601      	mov	r1, r0
    964e:	4a44      	ldr	r2, [pc, #272]	; (9760 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x148>)
    9650:	4620      	mov	r0, r4
    9652:	f010 fe55 	bl	1a300 <bt_gatt_dm_desc_by_uuid>
		if (!desc) {
    9656:	b908      	cbnz	r0, 965c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x44>
			printk("Missing CSC measurement char CCC descriptor\n");
    9658:	4842      	ldr	r0, [pc, #264]	; (9764 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x14c>)
    965a:	e7e9      	b.n	9630 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x18>
		param.value_handle = desc->handle;
    965c:	8883      	ldrh	r3, [r0, #4]
    965e:	4f42      	ldr	r7, [pc, #264]	; (9768 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x150>)
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    9660:	4629      	mov	r1, r5
    9662:	4620      	mov	r0, r4
    9664:	4a41      	ldr	r2, [pc, #260]	; (976c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x154>)
		param.value_handle = desc->handle;
    9666:	813b      	strh	r3, [r7, #8]
		desc = bt_gatt_dm_desc_by_uuid(dm, chrc, BT_UUID_GATT_CCC);
    9668:	f010 fe4a 	bl	1a300 <bt_gatt_dm_desc_by_uuid>
		if (!desc) {
    966c:	2800      	cmp	r0, #0
    966e:	d0f3      	beq.n	9658 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x40>
		param.ccc_handle = desc->handle;
    9670:	8883      	ldrh	r3, [r0, #4]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &param);
    9672:	4620      	mov	r0, r4
		param.ccc_handle = desc->handle;
    9674:	817b      	strh	r3, [r7, #10]
		err = bt_gatt_subscribe(bt_gatt_dm_conn_get(dm), &param);
    9676:	f010 fdf6 	bl	1a266 <bt_gatt_dm_conn_get>
    967a:	4639      	mov	r1, r7
    967c:	f00a fcc2 	bl	14004 <bt_gatt_subscribe>
		if (err) {
    9680:	4601      	mov	r1, r0
    9682:	b110      	cbz	r0, 968a <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x72>
			printk("Subscribtion failed (err %d)\n", err);
    9684:	483a      	ldr	r0, [pc, #232]	; (9770 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x158>)
    9686:	f010 f9b2 	bl	199ee <printk>
		bt_gatt_dm_data_release(dm);
    968a:	4620      	mov	r0, r4
    968c:	f010 fe4a 	bl	1a324 <bt_gatt_dm_data_release>
	switch (nbrConnectionsCentral)
    9690:	4b38      	ldr	r3, [pc, #224]	; (9774 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x15c>)
    9692:	781a      	ldrb	r2, [r3, #0]
    9694:	2a02      	cmp	r2, #2
    9696:	d026      	beq.n	96e6 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xce>
    9698:	2a03      	cmp	r2, #3
    969a:	d04d      	beq.n	9738 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x120>
    969c:	2a01      	cmp	r2, #1
    969e:	d110      	bne.n	96c2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
		if (nbrAddresses == 1)
    96a0:	4b35      	ldr	r3, [pc, #212]	; (9778 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x160>)
    96a2:	781c      	ldrb	r4, [r3, #0]
    96a4:	2c01      	cmp	r4, #1
    96a6:	d10e      	bne.n	96c6 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xae>
			connectedCode[0] = 14;
    96a8:	230e      	movs	r3, #14
    96aa:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    96ae:	4b33      	ldr	r3, [pc, #204]	; (977c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x164>)
    96b0:	4622      	mov	r2, r4
    96b2:	6818      	ldr	r0, [r3, #0]
    96b4:	a901      	add	r1, sp, #4
    96b6:	f000 fb81 	bl	9dbc <_Z17data_service_sendP7bt_connPKht>
			printk("Discovery completed\n");
    96ba:	4831      	ldr	r0, [pc, #196]	; (9780 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x168>)
    96bc:	f010 f997 	bl	199ee <printk>
			subscriptionDone = true;
    96c0:	7034      	strb	r4, [r6, #0]
}
    96c2:	b003      	add	sp, #12
    96c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if (nbrAddresses == 2)	
    96c6:	2c02      	cmp	r4, #2
    96c8:	d1fb      	bne.n	96c2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
			connectedCode[0] = 15;
    96ca:	230f      	movs	r3, #15
    96cc:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    96d0:	4b2a      	ldr	r3, [pc, #168]	; (977c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x164>)
    96d2:	a901      	add	r1, sp, #4
    96d4:	6818      	ldr	r0, [r3, #0]
    96d6:	f000 fb71 	bl	9dbc <_Z17data_service_sendP7bt_connPKht>
			initScan();
    96da:	f7ff ff1b 	bl	9514 <_ZN13deviceManager8initScanEv>
			printk("First discovery completed\n");			
    96de:	4829      	ldr	r0, [pc, #164]	; (9784 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x16c>)
    96e0:	f010 f985 	bl	199ee <printk>
    96e4:	e7ed      	b.n	96c2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
		if (nbrAddresses == 2)
    96e6:	4b24      	ldr	r3, [pc, #144]	; (9778 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x160>)
    96e8:	781b      	ldrb	r3, [r3, #0]
    96ea:	2b02      	cmp	r3, #2
    96ec:	d113      	bne.n	9716 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xfe>
			connectedCode[0] = 16;
    96ee:	2310      	movs	r3, #16
    96f0:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn, connectedCode, sizeof(connectedCode));
    96f4:	4b21      	ldr	r3, [pc, #132]	; (977c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x164>)
    96f6:	2201      	movs	r2, #1
    96f8:	6818      	ldr	r0, [r3, #0]
    96fa:	a901      	add	r1, sp, #4
    96fc:	f000 fb5e 	bl	9dbc <_Z17data_service_sendP7bt_connPKht>
			printk("Second discovery completed\n");
    9700:	4821      	ldr	r0, [pc, #132]	; (9788 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x170>)
			printk("Third discovery completed\n");
    9702:	f010 f974 	bl	199ee <printk>
			dk_set_led_on(CON_STATUS_LED_CENTRAL);
    9706:	2001      	movs	r0, #1
    9708:	f013 f8a2 	bl	1c850 <dk_set_led_on>
			connectedC = true;	
    970c:	2301      	movs	r3, #1
    970e:	4a1f      	ldr	r2, [pc, #124]	; (978c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x174>)
			subscriptionDone = true;		
    9710:	7033      	strb	r3, [r6, #0]
			connectedC = true;	
    9712:	7013      	strb	r3, [r2, #0]
		break;
    9714:	e7d5      	b.n	96c2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
		else if (nbrAddresses == 3) 
    9716:	2b03      	cmp	r3, #3
    9718:	d1d3      	bne.n	96c2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
			connectedCode[0] = 17;
    971a:	2311      	movs	r3, #17
    971c:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    9720:	4b16      	ldr	r3, [pc, #88]	; (977c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x164>)
    9722:	2201      	movs	r2, #1
    9724:	6818      	ldr	r0, [r3, #0]
    9726:	a901      	add	r1, sp, #4
    9728:	f000 fb48 	bl	9dbc <_Z17data_service_sendP7bt_connPKht>
			printk("Second discovery completed\n");		
    972c:	4816      	ldr	r0, [pc, #88]	; (9788 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x170>)
    972e:	f010 f95e 	bl	199ee <printk>
			initScan();
    9732:	f7ff feef 	bl	9514 <_ZN13deviceManager8initScanEv>
    9736:	e7c4      	b.n	96c2 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xaa>
			connectedCode[0] = 18;
    9738:	2312      	movs	r3, #18
    973a:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,connectedCode, sizeof(connectedCode));
    973e:	4b0f      	ldr	r3, [pc, #60]	; (977c <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x164>)
    9740:	2201      	movs	r2, #1
    9742:	6818      	ldr	r0, [r3, #0]
    9744:	a901      	add	r1, sp, #4
    9746:	f000 fb39 	bl	9dbc <_Z17data_service_sendP7bt_connPKht>
			printk("Third discovery completed\n");
    974a:	4811      	ldr	r0, [pc, #68]	; (9790 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0x178>)
    974c:	e7d9      	b.n	9702 <_ZN13deviceManager21discoveryCompletedCSCEP10bt_gatt_dmPv+0xea>
    974e:	bf00      	nop
    9750:	2000bef8 	.word	0x2000bef8
    9754:	0001e240 	.word	0x0001e240
    9758:	0001e6ae 	.word	0x0001e6ae
    975c:	0001e6d6 	.word	0x0001e6d6
    9760:	0001e244 	.word	0x0001e244
    9764:	0001e701 	.word	0x0001e701
    9768:	20008158 	.word	0x20008158
    976c:	0001e248 	.word	0x0001e248
    9770:	0001e72e 	.word	0x0001e72e
    9774:	2000bef9 	.word	0x2000bef9
    9778:	2000bef6 	.word	0x2000bef6
    977c:	2000a468 	.word	0x2000a468
    9780:	0001e74c 	.word	0x0001e74c
    9784:	0001e761 	.word	0x0001e761
    9788:	0001e77c 	.word	0x0001e77c
    978c:	2000bef1 	.word	0x2000bef1
    9790:	0001e798 	.word	0x0001e798

00009794 <_ZN13deviceManager11initCentralEv>:
void deviceManager::initCentral(){
    9794:	b510      	push	{r4, lr}
    9796:	4604      	mov	r4, r0
	printk("Init Central\n");
    9798:	481c      	ldr	r0, [pc, #112]	; (980c <_ZN13deviceManager11initCentralEv+0x78>)
    979a:	f010 f928 	bl	199ee <printk>
	if (getDevice() == 1 || getDevice() == 3)
    979e:	f7ff fe1b 	bl	93d8 <_ZN13deviceManager9getDeviceEv>
    97a2:	2801      	cmp	r0, #1
    97a4:	d00a      	beq.n	97bc <_ZN13deviceManager11initCentralEv+0x28>
    97a6:	2803      	cmp	r0, #3
    97a8:	d12f      	bne.n	980a <_ZN13deviceManager11initCentralEv+0x76>
		bt_conn_cb_register(&conn_callbacks);
    97aa:	4620      	mov	r0, r4
    97ac:	f006 fec0 	bl	10530 <bt_conn_cb_register>
		initScan();
    97b0:	f7ff feb0 	bl	9514 <_ZN13deviceManager8initScanEv>
}
    97b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		startScan();	
    97b8:	f7ff be9a 	b.w	94f0 <_ZN13deviceManager9startScanEv>
			err = bt_enable(nullptr);
    97bc:	2000      	movs	r0, #0
    97be:	f006 f859 	bl	f874 <bt_enable>
			if (err) {
    97c2:	4601      	mov	r1, r0
    97c4:	b120      	cbz	r0, 97d0 <_ZN13deviceManager11initCentralEv+0x3c>
				printk("Bluetooth init failed (err %d)\n", err);
    97c6:	4812      	ldr	r0, [pc, #72]	; (9810 <_ZN13deviceManager11initCentralEv+0x7c>)
}
    97c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				printk("LEDs init failed (err %d)\n", err);
    97cc:	f010 b90f 	b.w	199ee <printk>
			printk("Bluetooth ready\n");
    97d0:	4810      	ldr	r0, [pc, #64]	; (9814 <_ZN13deviceManager11initCentralEv+0x80>)
    97d2:	f010 f90c 	bl	199ee <printk>
			err = dk_leds_init();
    97d6:	f00c f91f 	bl	15a18 <dk_leds_init>
			if (err) {
    97da:	4601      	mov	r1, r0
    97dc:	b108      	cbz	r0, 97e2 <_ZN13deviceManager11initCentralEv+0x4e>
				printk("LEDs init failed (err %d)\n", err);
    97de:	480e      	ldr	r0, [pc, #56]	; (9818 <_ZN13deviceManager11initCentralEv+0x84>)
    97e0:	e7f2      	b.n	97c8 <_ZN13deviceManager11initCentralEv+0x34>
			err = initButton();
    97e2:	f7ff fe0d 	bl	9400 <_ZN13deviceManager10initButtonEv>
			if (err) {
    97e6:	4601      	mov	r1, r0
    97e8:	b108      	cbz	r0, 97ee <_ZN13deviceManager11initCentralEv+0x5a>
				printk("Button init failed (err %d)\n", err);
    97ea:	480c      	ldr	r0, [pc, #48]	; (981c <_ZN13deviceManager11initCentralEv+0x88>)
    97ec:	e7ec      	b.n	97c8 <_ZN13deviceManager11initCentralEv+0x34>
			err = bt_lbs_init(&lbs_callbacs);
    97ee:	f104 0014 	add.w	r0, r4, #20
    97f2:	f003 f86d 	bl	c8d0 <bt_lbs_init>
			if (err) {
    97f6:	4601      	mov	r1, r0
    97f8:	b108      	cbz	r0, 97fe <_ZN13deviceManager11initCentralEv+0x6a>
				printk("Failed to init LBS (err:%d)\n", err);
    97fa:	4809      	ldr	r0, [pc, #36]	; (9820 <_ZN13deviceManager11initCentralEv+0x8c>)
    97fc:	e7e4      	b.n	97c8 <_ZN13deviceManager11initCentralEv+0x34>
				settings_load();
    97fe:	f010 fbeb 	bl	19fd8 <settings_load>
				printk("Settings loaded\n");
    9802:	4808      	ldr	r0, [pc, #32]	; (9824 <_ZN13deviceManager11initCentralEv+0x90>)
    9804:	f010 f8f3 	bl	199ee <printk>
    9808:	e7cf      	b.n	97aa <_ZN13deviceManager11initCentralEv+0x16>
}
    980a:	bd10      	pop	{r4, pc}
    980c:	0001e7b3 	.word	0x0001e7b3
    9810:	0001e5ee 	.word	0x0001e5ee
    9814:	0001e7c1 	.word	0x0001e7c1
    9818:	0001e5b6 	.word	0x0001e5b6
    981c:	0001e5d1 	.word	0x0001e5d1
    9820:	0001e625 	.word	0x0001e625
    9824:	0001e7d2 	.word	0x0001e7d2

00009828 <_ZN13deviceManager9setDeviceEbb>:
void deviceManager::setDevice(bool c, bool p){
    9828:	b410      	push	{r4}
    isPeripheral = p;
    982a:	4c09      	ldr	r4, [pc, #36]	; (9850 <_ZN13deviceManager9setDeviceEbb+0x28>)
void deviceManager::setDevice(bool c, bool p){
    982c:	4603      	mov	r3, r0
    isPeripheral = p;
    982e:	7022      	strb	r2, [r4, #0]
    isCentral = c;  
    9830:	4c08      	ldr	r4, [pc, #32]	; (9854 <_ZN13deviceManager9setDeviceEbb+0x2c>)
    9832:	7021      	strb	r1, [r4, #0]
	if (isCentral == true && isPeripheral == true)
    9834:	b139      	cbz	r1, 9846 <_ZN13deviceManager9setDeviceEbb+0x1e>
    9836:	b11a      	cbz	r2, 9840 <_ZN13deviceManager9setDeviceEbb+0x18>
		initPeripheral();
    9838:	4618      	mov	r0, r3
}
    983a:	bc10      	pop	{r4}
		initPeripheral();
    983c:	f7ff be16 	b.w	946c <_ZN13deviceManager14initPeripheralEv>
}
    9840:	bc10      	pop	{r4}
		initCentral();
    9842:	f7ff bfa7 	b.w	9794 <_ZN13deviceManager11initCentralEv>
	else if (isCentral == false && isPeripheral == true)
    9846:	2a00      	cmp	r2, #0
    9848:	d1f6      	bne.n	9838 <_ZN13deviceManager9setDeviceEbb+0x10>
}
    984a:	bc10      	pop	{r4}
    984c:	4770      	bx	lr
    984e:	bf00      	nop
    9850:	2000bef5 	.word	0x2000bef5
    9854:	2000befa 	.word	0x2000befa

00009858 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info>:
void deviceManager::scanConnectionError(struct bt_scan_device_info *device_info) {
    9858:	b508      	push	{r3, lr}
    printk("Connecting failed\n");
    985a:	4803      	ldr	r0, [pc, #12]	; (9868 <_ZN13deviceManager19scanConnectionErrorEP19bt_scan_device_info+0x10>)
    985c:	f010 f8c7 	bl	199ee <printk>
}
    9860:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	startScan();
    9864:	f7ff be44 	b.w	94f0 <_ZN13deviceManager9startScanEv>
    9868:	0001e7e3 	.word	0x0001e7e3

0000986c <_ZN13deviceManager11discoverCSCEv>:
{
    986c:	b510      	push	{r4, lr}
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_CSC, &discovery_cb, NULL);
    986e:	4b0a      	ldr	r3, [pc, #40]	; (9898 <_ZN13deviceManager11discoverCSCEv+0x2c>)
    9870:	4c0a      	ldr	r4, [pc, #40]	; (989c <_ZN13deviceManager11discoverCSCEv+0x30>)
    9872:	7818      	ldrb	r0, [r3, #0]
    9874:	490a      	ldr	r1, [pc, #40]	; (98a0 <_ZN13deviceManager11discoverCSCEv+0x34>)
    9876:	3801      	subs	r0, #1
    9878:	2300      	movs	r3, #0
    987a:	4a0a      	ldr	r2, [pc, #40]	; (98a4 <_ZN13deviceManager11discoverCSCEv+0x38>)
    987c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    9880:	f002 fc5a 	bl	c138 <bt_gatt_dm_start>
	if (err) 
    9884:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    9888:	d004      	beq.n	9894 <_ZN13deviceManager11discoverCSCEv+0x28>
}
    988a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    988e:	4806      	ldr	r0, [pc, #24]	; (98a8 <_ZN13deviceManager11discoverCSCEv+0x3c>)
    9890:	f010 b8ad 	b.w	199ee <printk>
}
    9894:	bd10      	pop	{r4, pc}
    9896:	bf00      	nop
    9898:	2000bef9 	.word	0x2000bef9
    989c:	2000a46c 	.word	0x2000a46c
    98a0:	0001e238 	.word	0x0001e238
    98a4:	20008140 	.word	0x20008140
    98a8:	0001e7f6 	.word	0x0001e7f6

000098ac <_ZN13deviceManager10discoverHREv>:
{
    98ac:	b510      	push	{r4, lr}
	uint8_t err = bt_gatt_dm_start(centralConnections[nbrConnectionsCentral-1], BT_UUID_DIS, &discovery_cb_HR, NULL);
    98ae:	4b0a      	ldr	r3, [pc, #40]	; (98d8 <_ZN13deviceManager10discoverHREv+0x2c>)
    98b0:	4c0a      	ldr	r4, [pc, #40]	; (98dc <_ZN13deviceManager10discoverHREv+0x30>)
    98b2:	7818      	ldrb	r0, [r3, #0]
    98b4:	490a      	ldr	r1, [pc, #40]	; (98e0 <_ZN13deviceManager10discoverHREv+0x34>)
    98b6:	3801      	subs	r0, #1
    98b8:	2300      	movs	r3, #0
    98ba:	4a0a      	ldr	r2, [pc, #40]	; (98e4 <_ZN13deviceManager10discoverHREv+0x38>)
    98bc:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
    98c0:	f002 fc3a 	bl	c138 <bt_gatt_dm_start>
	if (err) 
    98c4:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
    98c8:	d004      	beq.n	98d4 <_ZN13deviceManager10discoverHREv+0x28>
}
    98ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not start service discovery, err %d\n", err);
    98ce:	4806      	ldr	r0, [pc, #24]	; (98e8 <_ZN13deviceManager10discoverHREv+0x3c>)
    98d0:	f010 b88d 	b.w	199ee <printk>
}
    98d4:	bd10      	pop	{r4, pc}
    98d6:	bf00      	nop
    98d8:	2000bef9 	.word	0x2000bef9
    98dc:	2000a46c 	.word	0x2000a46c
    98e0:	0001e23c 	.word	0x0001e23c
    98e4:	2000814c 	.word	0x2000814c
    98e8:	0001e7f6 	.word	0x0001e7f6

000098ec <_ZN13deviceManager9connectedEP7bt_connh>:
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    98ec:	b570      	push	{r4, r5, r6, lr}
    98ee:	b090      	sub	sp, #64	; 0x40
    98f0:	460c      	mov	r4, r1
	int error = bt_conn_get_info(conn,&info);
    98f2:	a901      	add	r1, sp, #4
void deviceManager::connected(struct bt_conn *conn, uint8_t err) {
    98f4:	4605      	mov	r5, r0
	int error = bt_conn_get_info(conn,&info);
    98f6:	f007 f91b 	bl	10b30 <bt_conn_get_info>
	if (error)
    98fa:	b120      	cbz	r0, 9906 <_ZN13deviceManager9connectedEP7bt_connh+0x1a>
		printk("Cannot get info of connection object\n");
    98fc:	482e      	ldr	r0, [pc, #184]	; (99b8 <_ZN13deviceManager9connectedEP7bt_connh+0xcc>)
    98fe:	f010 f876 	bl	199ee <printk>
}
    9902:	b010      	add	sp, #64	; 0x40
    9904:	bd70      	pop	{r4, r5, r6, pc}
	if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9906:	f89d 6005 	ldrb.w	r6, [sp, #5]
    990a:	2e00      	cmp	r6, #0
    990c:	d136      	bne.n	997c <_ZN13deviceManager9connectedEP7bt_connh+0x90>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    990e:	4628      	mov	r0, r5
    9910:	f011 fd61 	bl	1b3d6 <bt_conn_get_dst>
    9914:	221e      	movs	r2, #30
    9916:	a908      	add	r1, sp, #32
    9918:	f7ff fcf2 	bl	9300 <bt_addr_le_to_str.isra.0>
		if (err) {
    991c:	b13c      	cbz	r4, 992e <_ZN13deviceManager9connectedEP7bt_connh+0x42>
			printk("Failed to connect to %s (%u)\n", addr, err);
    991e:	4622      	mov	r2, r4
    9920:	4826      	ldr	r0, [pc, #152]	; (99bc <_ZN13deviceManager9connectedEP7bt_connh+0xd0>)
    9922:	a908      	add	r1, sp, #32
    9924:	f010 f863 	bl	199ee <printk>
			startScan();
    9928:	f7ff fde2 	bl	94f0 <_ZN13deviceManager9startScanEv>
			return;
    992c:	e7e9      	b.n	9902 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		centralConnections[nbrConnectionsCentral] = bt_conn_ref(conn);
    992e:	4c24      	ldr	r4, [pc, #144]	; (99c0 <_ZN13deviceManager9connectedEP7bt_connh+0xd4>)
		printk("Connected: %s\n", addr);
    9930:	a908      	add	r1, sp, #32
    9932:	4824      	ldr	r0, [pc, #144]	; (99c4 <_ZN13deviceManager9connectedEP7bt_connh+0xd8>)
    9934:	f010 f85b 	bl	199ee <printk>
		centralConnections[nbrConnectionsCentral] = bt_conn_ref(conn);
    9938:	4628      	mov	r0, r5
    993a:	7826      	ldrb	r6, [r4, #0]
    993c:	f011 fd12 	bl	1b364 <bt_conn_ref>
    9940:	4b21      	ldr	r3, [pc, #132]	; (99c8 <_ZN13deviceManager9connectedEP7bt_connh+0xdc>)
    9942:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
		bt_conn_unref(conn);
    9946:	4628      	mov	r0, r5
    9948:	f006 ff60 	bl	1080c <bt_conn_unref>
		switch (sensorInfos)
    994c:	4a1f      	ldr	r2, [pc, #124]	; (99cc <_ZN13deviceManager9connectedEP7bt_connh+0xe0>)
		nbrConnectionsCentral++;
    994e:	7823      	ldrb	r3, [r4, #0]
    9950:	7812      	ldrb	r2, [r2, #0]
    9952:	3301      	adds	r3, #1
    9954:	b2db      	uxtb	r3, r3
    9956:	3a01      	subs	r2, #1
    9958:	7023      	strb	r3, [r4, #0]
		switch (sensorInfos)
    995a:	2a04      	cmp	r2, #4
    995c:	d8d1      	bhi.n	9902 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    995e:	e8df f002 	tbb	[pc, r2]
    9962:	0505      	.short	0x0505
    9964:	0803      	.short	0x0803
    9966:	0a          	.byte	0x0a
    9967:	00          	.byte	0x00
			if (nbrConnectionsCentral <= 2)
    9968:	2b02      	cmp	r3, #2
    996a:	d804      	bhi.n	9976 <_ZN13deviceManager9connectedEP7bt_connh+0x8a>
				discoverCSC();
    996c:	f7ff ff7e 	bl	986c <_ZN13deviceManager11discoverCSCEv>
    9970:	e7c7      	b.n	9902 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			if (nbrConnectionsCentral == 1)
    9972:	2b01      	cmp	r3, #1
    9974:	d0fa      	beq.n	996c <_ZN13deviceManager9connectedEP7bt_connh+0x80>
			discoverHR();
    9976:	f7ff ff99 	bl	98ac <_ZN13deviceManager10discoverHREv>
			break;
    997a:	e7c2      	b.n	9902 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
	else if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    997c:	2e01      	cmp	r6, #1
    997e:	d1c0      	bne.n	9902 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		if (err) {
    9980:	b124      	cbz	r4, 998c <_ZN13deviceManager9connectedEP7bt_connh+0xa0>
			printk("Connection failed (err %u)\n", err);
    9982:	4621      	mov	r1, r4
    9984:	4812      	ldr	r0, [pc, #72]	; (99d0 <_ZN13deviceManager9connectedEP7bt_connh+0xe4>)
    9986:	f010 f832 	bl	199ee <printk>
			return;
    998a:	e7ba      	b.n	9902 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
		printk("Connected\n");
    998c:	4811      	ldr	r0, [pc, #68]	; (99d4 <_ZN13deviceManager9connectedEP7bt_connh+0xe8>)
    998e:	f010 f82e 	bl	199ee <printk>
		connectedP = true;
    9992:	4b11      	ldr	r3, [pc, #68]	; (99d8 <_ZN13deviceManager9connectedEP7bt_connh+0xec>)
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);	
    9994:	4620      	mov	r0, r4
		connectedP = true;
    9996:	701e      	strb	r6, [r3, #0]
		peripheralConn = conn;
    9998:	4b10      	ldr	r3, [pc, #64]	; (99dc <_ZN13deviceManager9connectedEP7bt_connh+0xf0>)
    999a:	601d      	str	r5, [r3, #0]
		dk_set_led_on(CON_STATUS_LED_PERIPHERAL);	
    999c:	f012 ff58 	bl	1c850 <dk_set_led_on>
		if (getDevice() == 3 && nbrConnectionsCentral == 0) 
    99a0:	f7ff fd1a 	bl	93d8 <_ZN13deviceManager9getDeviceEv>
    99a4:	2803      	cmp	r0, #3
    99a6:	d1ac      	bne.n	9902 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    99a8:	4b05      	ldr	r3, [pc, #20]	; (99c0 <_ZN13deviceManager9connectedEP7bt_connh+0xd4>)
    99aa:	781b      	ldrb	r3, [r3, #0]
    99ac:	2b00      	cmp	r3, #0
    99ae:	d1a8      	bne.n	9902 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
			initScan();
    99b0:	f7ff fdb0 	bl	9514 <_ZN13deviceManager8initScanEv>
    99b4:	e7a5      	b.n	9902 <_ZN13deviceManager9connectedEP7bt_connh+0x16>
    99b6:	bf00      	nop
    99b8:	0001e821 	.word	0x0001e821
    99bc:	0001e847 	.word	0x0001e847
    99c0:	2000bef9 	.word	0x2000bef9
    99c4:	0001e865 	.word	0x0001e865
    99c8:	2000a46c 	.word	0x2000a46c
    99cc:	2000bef4 	.word	0x2000bef4
    99d0:	0001e874 	.word	0x0001e874
    99d4:	0001e890 	.word	0x0001e890
    99d8:	2000bef2 	.word	0x2000bef2
    99dc:	2000a468 	.word	0x2000a468

000099e0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb>:
			      bool connectable) {
    99e0:	b570      	push	{r4, r5, r6, lr}
    99e2:	b08e      	sub	sp, #56	; 0x38
    99e4:	4605      	mov	r5, r0
	nbrAddresses = getNbrOfAddresses();
    99e6:	f000 fa19 	bl	9e1c <_Z17getNbrOfAddressesv>
    99ea:	4b41      	ldr	r3, [pc, #260]	; (9af0 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x110>)
    99ec:	4604      	mov	r4, r0
    99ee:	4e41      	ldr	r6, [pc, #260]	; (9af4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x114>)
    99f0:	7018      	strb	r0, [r3, #0]
	if (nbrAddresses != 0)
    99f2:	2800      	cmp	r0, #0
    99f4:	d045      	beq.n	9a82 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xa2>
		ready = true;
    99f6:	2101      	movs	r1, #1
		switch (nbrAddresses)
    99f8:	2802      	cmp	r0, #2
		ready = true;
    99fa:	7031      	strb	r1, [r6, #0]
		switch (nbrAddresses)
    99fc:	d031      	beq.n	9a62 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x82>
    99fe:	2803      	cmp	r0, #3
    9a00:	d035      	beq.n	9a6e <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x8e>
    9a02:	4288      	cmp	r0, r1
    9a04:	d103      	bne.n	9a0e <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
			getAddress(sensor1,1);
    9a06:	4601      	mov	r1, r0
    9a08:	483b      	ldr	r0, [pc, #236]	; (9af8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
			getAddress(sensor2,2);
    9a0a:	f000 fa0d 	bl	9e28 <_Z10getAddressPch>
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    9a0e:	682b      	ldr	r3, [r5, #0]
    9a10:	221e      	movs	r2, #30
    9a12:	6818      	ldr	r0, [r3, #0]
    9a14:	a906      	add	r1, sp, #24
    9a16:	f7ff fc73 	bl	9300 <bt_addr_le_to_str.isra.0>
	bt_addr_le_to_str(device_info->recv_info->addr, addrShort, sizeof(addrShort));
    9a1a:	682b      	ldr	r3, [r5, #0]
    9a1c:	2212      	movs	r2, #18
    9a1e:	6818      	ldr	r0, [r3, #0]
    9a20:	a901      	add	r1, sp, #4
    9a22:	f7ff fc6d 	bl	9300 <bt_addr_le_to_str.isra.0>
	if (ready)
    9a26:	7833      	ldrb	r3, [r6, #0]
    9a28:	2b00      	cmp	r3, #0
    9a2a:	d03d      	beq.n	9aa8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc8>
		bt_scan_stop();
    9a2c:	f010 fc92 	bl	1a354 <bt_scan_stop>
		if (checkAddresses(addrShort,sensor1) && once_sensor1)
    9a30:	4931      	ldr	r1, [pc, #196]	; (9af8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9a32:	a801      	add	r0, sp, #4
    9a34:	f00f ff2c 	bl	19890 <_ZN13deviceManager14checkAddressesEPcS0_>
    9a38:	b338      	cbz	r0, 9a8a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xaa>
    9a3a:	4c30      	ldr	r4, [pc, #192]	; (9afc <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x11c>)
    9a3c:	7823      	ldrb	r3, [r4, #0]
    9a3e:	b323      	cbz	r3, 9a8a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xaa>
			printk("Correct sensor found\n");
    9a40:	482f      	ldr	r0, [pc, #188]	; (9b00 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9a42:	f00f ffd4 	bl	199ee <printk>
			once_sensor1 = false;
    9a46:	2300      	movs	r3, #0
    9a48:	7023      	strb	r3, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9a4a:	4b2e      	ldr	r3, [pc, #184]	; (9b04 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9a4c:	6828      	ldr	r0, [r5, #0]
    9a4e:	781a      	ldrb	r2, [r3, #0]
    9a50:	4b2d      	ldr	r3, [pc, #180]	; (9b08 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9a52:	492e      	ldr	r1, [pc, #184]	; (9b0c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x12c>)
    9a54:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9a58:	686a      	ldr	r2, [r5, #4]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9a5a:	6800      	ldr	r0, [r0, #0]
    9a5c:	f007 f894 	bl	10b88 <bt_conn_le_create>
}
    9a60:	e022      	b.n	9aa8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc8>
			getAddress(sensor1,1);
    9a62:	4825      	ldr	r0, [pc, #148]	; (9af8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9a64:	f000 f9e0 	bl	9e28 <_Z10getAddressPch>
			getAddress(sensor2,2);
    9a68:	4621      	mov	r1, r4
    9a6a:	4829      	ldr	r0, [pc, #164]	; (9b10 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9a6c:	e7cd      	b.n	9a0a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2a>
			getAddress(sensor1,1);
    9a6e:	4822      	ldr	r0, [pc, #136]	; (9af8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x118>)
    9a70:	f000 f9da 	bl	9e28 <_Z10getAddressPch>
			getAddress(sensor2,2);
    9a74:	2102      	movs	r1, #2
    9a76:	4826      	ldr	r0, [pc, #152]	; (9b10 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9a78:	f000 f9d6 	bl	9e28 <_Z10getAddressPch>
			getAddress(sensor3,3);
    9a7c:	4621      	mov	r1, r4
    9a7e:	4825      	ldr	r0, [pc, #148]	; (9b14 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9a80:	e7c3      	b.n	9a0a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2a>
		initScan();
    9a82:	f7ff fd47 	bl	9514 <_ZN13deviceManager8initScanEv>
		ready = false;
    9a86:	7034      	strb	r4, [r6, #0]
    9a88:	e7c1      	b.n	9a0e <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x2e>
		else if (checkAddresses(addrShort,sensor2) && once_sensor2)
    9a8a:	4921      	ldr	r1, [pc, #132]	; (9b10 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x130>)
    9a8c:	a801      	add	r0, sp, #4
    9a8e:	f00f feff 	bl	19890 <_ZN13deviceManager14checkAddressesEPcS0_>
    9a92:	b110      	cbz	r0, 9a9a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xba>
    9a94:	4c20      	ldr	r4, [pc, #128]	; (9b18 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x138>)
    9a96:	7823      	ldrb	r3, [r4, #0]
    9a98:	b943      	cbnz	r3, 9aac <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xcc>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9a9a:	491e      	ldr	r1, [pc, #120]	; (9b14 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x134>)
    9a9c:	a801      	add	r0, sp, #4
    9a9e:	f00f fef7 	bl	19890 <_ZN13deviceManager14checkAddressesEPcS0_>
    9aa2:	b988      	cbnz	r0, 9ac8 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xe8>
			startScan();
    9aa4:	f7ff fd24 	bl	94f0 <_ZN13deviceManager9startScanEv>
}
    9aa8:	b00e      	add	sp, #56	; 0x38
    9aaa:	bd70      	pop	{r4, r5, r6, pc}
			printk("Correct sensor found\n");
    9aac:	4814      	ldr	r0, [pc, #80]	; (9b00 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9aae:	f00f ff9e 	bl	199ee <printk>
			once_sensor2 = false;
    9ab2:	2300      	movs	r3, #0
    9ab4:	7023      	strb	r3, [r4, #0]
			err = bt_conn_le_create(device_info->recv_info->addr,
    9ab6:	4b13      	ldr	r3, [pc, #76]	; (9b04 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9ab8:	6828      	ldr	r0, [r5, #0]
    9aba:	781a      	ldrb	r2, [r3, #0]
    9abc:	4b12      	ldr	r3, [pc, #72]	; (9b08 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9abe:	4917      	ldr	r1, [pc, #92]	; (9b1c <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x13c>)
    9ac0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9ac4:	686a      	ldr	r2, [r5, #4]
    9ac6:	e7c8      	b.n	9a5a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x7a>
		else if (checkAddresses(addrShort,sensor3) && once_sensor3)
    9ac8:	4c15      	ldr	r4, [pc, #84]	; (9b20 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x140>)
    9aca:	7823      	ldrb	r3, [r4, #0]
    9acc:	2b00      	cmp	r3, #0
    9ace:	d0e9      	beq.n	9aa4 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0xc4>
			printk("Correct sensor found\n");
    9ad0:	480b      	ldr	r0, [pc, #44]	; (9b00 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x120>)
    9ad2:	f00f ff8c 	bl	199ee <printk>
			once_sensor3 = false;
    9ad6:	2300      	movs	r3, #0
    9ad8:	7023      	strb	r3, [r4, #0]
			bt_scan_stop();
    9ada:	f010 fc3b 	bl	1a354 <bt_scan_stop>
			err = bt_conn_le_create(device_info->recv_info->addr,
    9ade:	4b09      	ldr	r3, [pc, #36]	; (9b04 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x124>)
    9ae0:	6828      	ldr	r0, [r5, #0]
    9ae2:	781a      	ldrb	r2, [r3, #0]
    9ae4:	4b08      	ldr	r3, [pc, #32]	; (9b08 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x128>)
    9ae6:	490f      	ldr	r1, [pc, #60]	; (9b24 <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x144>)
    9ae8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    9aec:	686a      	ldr	r2, [r5, #4]
    9aee:	e7b4      	b.n	9a5a <_ZN13deviceManager15scanFilterMatchEP19bt_scan_device_infoP20bt_scan_filter_matchb+0x7a>
    9af0:	2000bef6 	.word	0x2000bef6
    9af4:	2000befb 	.word	0x2000befb
    9af8:	2000bebe 	.word	0x2000bebe
    9afc:	20008571 	.word	0x20008571
    9b00:	0001e89b 	.word	0x0001e89b
    9b04:	2000bef9 	.word	0x2000bef9
    9b08:	2000a46c 	.word	0x2000a46c
    9b0c:	0001d90c 	.word	0x0001d90c
    9b10:	2000becf 	.word	0x2000becf
    9b14:	2000bee0 	.word	0x2000bee0
    9b18:	20008572 	.word	0x20008572
    9b1c:	0001d91c 	.word	0x0001d91c
    9b20:	20008573 	.word	0x20008573
    9b24:	0001d92c 	.word	0x0001d92c

00009b28 <_ZN13deviceManager12disconnectedEP7bt_connh>:
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b2c:	b096      	sub	sp, #88	; 0x58
    9b2e:	460e      	mov	r6, r1
	int error = bt_conn_get_info(conn,&info);
    9b30:	a907      	add	r1, sp, #28
void deviceManager::disconnected(struct bt_conn *conn, uint8_t reason) {
    9b32:	4607      	mov	r7, r0
	int error = bt_conn_get_info(conn,&info);
    9b34:	f006 fffc 	bl	10b30 <bt_conn_get_info>
	if (error)
    9b38:	4605      	mov	r5, r0
    9b3a:	b128      	cbz	r0, 9b48 <_ZN13deviceManager12disconnectedEP7bt_connh+0x20>
		printk("Cannot get info of connection object\n");
    9b3c:	484c      	ldr	r0, [pc, #304]	; (9c70 <_ZN13deviceManager12disconnectedEP7bt_connh+0x148>)
    9b3e:	f00f ff56 	bl	199ee <printk>
}
    9b42:	b016      	add	sp, #88	; 0x58
    9b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (info.role == BT_CONN_ROLE_SLAVE)	// slave -> peripheral role
    9b48:	f89d 401d 	ldrb.w	r4, [sp, #29]
    9b4c:	2c01      	cmp	r4, #1
    9b4e:	d10b      	bne.n	9b68 <_ZN13deviceManager12disconnectedEP7bt_connh+0x40>
		printk("Disconnected from Application (reason %u)\n", reason);
    9b50:	4631      	mov	r1, r6
    9b52:	4848      	ldr	r0, [pc, #288]	; (9c74 <_ZN13deviceManager12disconnectedEP7bt_connh+0x14c>)
    9b54:	f00f ff4b 	bl	199ee <printk>
		connectedP = false;
    9b58:	4b47      	ldr	r3, [pc, #284]	; (9c78 <_ZN13deviceManager12disconnectedEP7bt_connh+0x150>)
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9b5a:	4628      	mov	r0, r5
		connectedP = false;
    9b5c:	701d      	strb	r5, [r3, #0]
		dk_set_led_off(CON_STATUS_LED_PERIPHERAL);
    9b5e:	f012 fe7a 	bl	1c856 <dk_set_led_off>
		startAdvertising();
    9b62:	f7ff fc5d 	bl	9420 <_ZN13deviceManager16startAdvertisingEv>
    9b66:	e7ec      	b.n	9b42 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
	else if (info.role == BT_CONN_ROLE_MASTER)	// master -> central role
    9b68:	2c00      	cmp	r4, #0
    9b6a:	d1ea      	bne.n	9b42 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
		bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    9b6c:	4638      	mov	r0, r7
    9b6e:	f011 fc32 	bl	1b3d6 <bt_conn_get_dst>
    9b72:	221e      	movs	r2, #30
    9b74:	a90e      	add	r1, sp, #56	; 0x38
    9b76:	f7ff fbc3 	bl	9300 <bt_addr_le_to_str.isra.0>
		printk("Disconnected from Sensor: %s (reason 0x%02x)\n", addr, reason);
    9b7a:	4632      	mov	r2, r6
    9b7c:	483f      	ldr	r0, [pc, #252]	; (9c7c <_ZN13deviceManager12disconnectedEP7bt_connh+0x154>)
    9b7e:	a90e      	add	r1, sp, #56	; 0x38
    9b80:	f00f ff35 	bl	199ee <printk>
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    9b84:	4d3e      	ldr	r5, [pc, #248]	; (9c80 <_ZN13deviceManager12disconnectedEP7bt_connh+0x158>)
			printk("Nbr connections central:%d\n", nbrConnectionsCentral);
    9b86:	4f3f      	ldr	r7, [pc, #252]	; (9c84 <_ZN13deviceManager12disconnectedEP7bt_connh+0x15c>)
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    9b88:	4e3f      	ldr	r6, [pc, #252]	; (9c88 <_ZN13deviceManager12disconnectedEP7bt_connh+0x160>)
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    9b8a:	7829      	ldrb	r1, [r5, #0]
    9b8c:	fa5f f884 	uxtb.w	r8, r4
    9b90:	1e4b      	subs	r3, r1, #1
    9b92:	4598      	cmp	r8, r3
    9b94:	dc1f      	bgt.n	9bd6 <_ZN13deviceManager12disconnectedEP7bt_connh+0xae>
			printk("Nbr connections central:%d\n", nbrConnectionsCentral);
    9b96:	4638      	mov	r0, r7
    9b98:	f00f ff29 	bl	199ee <printk>
			bt_addr_le_to_str(bt_conn_get_dst(centralConnections[i]), addrToFind, sizeof(addrToFind));
    9b9c:	f856 0028 	ldr.w	r0, [r6, r8, lsl #2]
    9ba0:	f011 fc19 	bl	1b3d6 <bt_conn_get_dst>
    9ba4:	a902      	add	r1, sp, #8
    9ba6:	2212      	movs	r2, #18
    9ba8:	f7ff fbaa 	bl	9300 <bt_addr_le_to_str.isra.0>
			if (checkAddresses(addr,addrToFind))
    9bac:	a902      	add	r1, sp, #8
    9bae:	a80e      	add	r0, sp, #56	; 0x38
    9bb0:	f00f fe6e 	bl	19890 <_ZN13deviceManager14checkAddressesEPcS0_>
    9bb4:	b168      	cbz	r0, 9bd2 <_ZN13deviceManager12disconnectedEP7bt_connh+0xaa>
				bt_conn_unref(centralConnections[i]);
    9bb6:	f856 0028 	ldr.w	r0, [r6, r8, lsl #2]
    9bba:	f006 fe27 	bl	1080c <bt_conn_unref>
				centralConnections[i] = nullptr;
    9bbe:	2300      	movs	r3, #0
				nbrConnectionsCentral--;
    9bc0:	7829      	ldrb	r1, [r5, #0]
				printk("Nbr connections central:%d\n", nbrConnectionsCentral);
    9bc2:	4638      	mov	r0, r7
				nbrConnectionsCentral--;
    9bc4:	3901      	subs	r1, #1
    9bc6:	b2c9      	uxtb	r1, r1
				centralConnections[i] = nullptr;
    9bc8:	f846 3028 	str.w	r3, [r6, r8, lsl #2]
				nbrConnectionsCentral--;
    9bcc:	7029      	strb	r1, [r5, #0]
				printk("Nbr connections central:%d\n", nbrConnectionsCentral);
    9bce:	f00f ff0e 	bl	199ee <printk>
		for (uint8_t i = 0; i <= nbrConnectionsCentral-1; i++)
    9bd2:	3401      	adds	r4, #1
    9bd4:	e7d9      	b.n	9b8a <_ZN13deviceManager12disconnectedEP7bt_connh+0x62>
		if (nbrConnectionsCentral == 0)
    9bd6:	b969      	cbnz	r1, 9bf4 <_ZN13deviceManager12disconnectedEP7bt_connh+0xcc>
			connectedC = false;
    9bd8:	4b2c      	ldr	r3, [pc, #176]	; (9c8c <_ZN13deviceManager12disconnectedEP7bt_connh+0x164>)
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9bda:	2201      	movs	r2, #1
			connectedC = false;
    9bdc:	7019      	strb	r1, [r3, #0]
			disconnectedCode[0] = 13;
    9bde:	230d      	movs	r3, #13
    9be0:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9be4:	4b2a      	ldr	r3, [pc, #168]	; (9c90 <_ZN13deviceManager12disconnectedEP7bt_connh+0x168>)
    9be6:	a901      	add	r1, sp, #4
    9be8:	6818      	ldr	r0, [r3, #0]
    9bea:	f000 f8e7 	bl	9dbc <_Z17data_service_sendP7bt_connPKht>
			dk_set_led_off(CON_STATUS_LED_CENTRAL);
    9bee:	2001      	movs	r0, #1
    9bf0:	f012 fe31 	bl	1c856 <dk_set_led_off>
		if (checkAddresses(addr,sensor1))
    9bf4:	4927      	ldr	r1, [pc, #156]	; (9c94 <_ZN13deviceManager12disconnectedEP7bt_connh+0x16c>)
    9bf6:	a80e      	add	r0, sp, #56	; 0x38
    9bf8:	f00f fe4a 	bl	19890 <_ZN13deviceManager14checkAddressesEPcS0_>
    9bfc:	b178      	cbz	r0, 9c1e <_ZN13deviceManager12disconnectedEP7bt_connh+0xf6>
			once_sensor1 = true;
    9bfe:	2201      	movs	r2, #1
    9c00:	4b25      	ldr	r3, [pc, #148]	; (9c98 <_ZN13deviceManager12disconnectedEP7bt_connh+0x170>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9c02:	a901      	add	r1, sp, #4
			once_sensor1 = true;
    9c04:	701a      	strb	r2, [r3, #0]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9c06:	4b22      	ldr	r3, [pc, #136]	; (9c90 <_ZN13deviceManager12disconnectedEP7bt_connh+0x168>)
    9c08:	6818      	ldr	r0, [r3, #0]
			if (sensorInfos == 5)
    9c0a:	4b24      	ldr	r3, [pc, #144]	; (9c9c <_ZN13deviceManager12disconnectedEP7bt_connh+0x174>)
    9c0c:	781b      	ldrb	r3, [r3, #0]
    9c0e:	2b05      	cmp	r3, #5
				disconnectedCode[0] = 12;
    9c10:	bf0c      	ite	eq
    9c12:	230c      	moveq	r3, #12
				disconnectedCode[0] = 11;
    9c14:	230b      	movne	r3, #11
    9c16:	f88d 3004 	strb.w	r3, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9c1a:	f000 f8cf 	bl	9dbc <_Z17data_service_sendP7bt_connPKht>
		if (checkAddresses(addr,sensor2))
    9c1e:	4920      	ldr	r1, [pc, #128]	; (9ca0 <_ZN13deviceManager12disconnectedEP7bt_connh+0x178>)
    9c20:	a80e      	add	r0, sp, #56	; 0x38
    9c22:	f00f fe35 	bl	19890 <_ZN13deviceManager14checkAddressesEPcS0_>
    9c26:	b180      	cbz	r0, 9c4a <_ZN13deviceManager12disconnectedEP7bt_connh+0x122>
			once_sensor2 = true;
    9c28:	2201      	movs	r2, #1
    9c2a:	4b1e      	ldr	r3, [pc, #120]	; (9ca4 <_ZN13deviceManager12disconnectedEP7bt_connh+0x17c>)
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9c2c:	a901      	add	r1, sp, #4
			once_sensor2 = true;
    9c2e:	701a      	strb	r2, [r3, #0]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9c30:	4b17      	ldr	r3, [pc, #92]	; (9c90 <_ZN13deviceManager12disconnectedEP7bt_connh+0x168>)
    9c32:	6818      	ldr	r0, [r3, #0]
			if (sensorInfos == 2 || sensorInfos == 3)
    9c34:	4b19      	ldr	r3, [pc, #100]	; (9c9c <_ZN13deviceManager12disconnectedEP7bt_connh+0x174>)
    9c36:	781b      	ldrb	r3, [r3, #0]
    9c38:	3b02      	subs	r3, #2
    9c3a:	4293      	cmp	r3, r2
				disconnectedCode[0] = 11;
    9c3c:	bf94      	ite	ls
    9c3e:	230b      	movls	r3, #11
				disconnectedCode[0] = 12;
    9c40:	230c      	movhi	r3, #12
    9c42:	f88d 3004 	strb.w	r3, [sp, #4]
				data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9c46:	f000 f8b9 	bl	9dbc <_Z17data_service_sendP7bt_connPKht>
		if (checkAddresses(addr,sensor3))
    9c4a:	4917      	ldr	r1, [pc, #92]	; (9ca8 <_ZN13deviceManager12disconnectedEP7bt_connh+0x180>)
    9c4c:	a80e      	add	r0, sp, #56	; 0x38
    9c4e:	f00f fe1f 	bl	19890 <_ZN13deviceManager14checkAddressesEPcS0_>
    9c52:	b150      	cbz	r0, 9c6a <_ZN13deviceManager12disconnectedEP7bt_connh+0x142>
			once_sensor3 = true;
    9c54:	2201      	movs	r2, #1
    9c56:	4b15      	ldr	r3, [pc, #84]	; (9cac <_ZN13deviceManager12disconnectedEP7bt_connh+0x184>)
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9c58:	a901      	add	r1, sp, #4
			once_sensor3 = true;
    9c5a:	701a      	strb	r2, [r3, #0]
			disconnectedCode[0] = 12;
    9c5c:	230c      	movs	r3, #12
    9c5e:	f88d 3004 	strb.w	r3, [sp, #4]
			data_service_send(peripheralConn,disconnectedCode, sizeof(disconnectedCode));
    9c62:	4b0b      	ldr	r3, [pc, #44]	; (9c90 <_ZN13deviceManager12disconnectedEP7bt_connh+0x168>)
    9c64:	6818      	ldr	r0, [r3, #0]
    9c66:	f000 f8a9 	bl	9dbc <_Z17data_service_sendP7bt_connPKht>
		startScan();	
    9c6a:	f7ff fc41 	bl	94f0 <_ZN13deviceManager9startScanEv>
    9c6e:	e768      	b.n	9b42 <_ZN13deviceManager12disconnectedEP7bt_connh+0x1a>
    9c70:	0001e821 	.word	0x0001e821
    9c74:	0001e8b1 	.word	0x0001e8b1
    9c78:	2000bef2 	.word	0x2000bef2
    9c7c:	0001e8dc 	.word	0x0001e8dc
    9c80:	2000bef9 	.word	0x2000bef9
    9c84:	0001e90a 	.word	0x0001e90a
    9c88:	2000a46c 	.word	0x2000a46c
    9c8c:	2000bef1 	.word	0x2000bef1
    9c90:	2000a468 	.word	0x2000a468
    9c94:	2000bebe 	.word	0x2000bebe
    9c98:	20008571 	.word	0x20008571
    9c9c:	2000bef4 	.word	0x2000bef4
    9ca0:	2000becf 	.word	0x2000becf
    9ca4:	20008572 	.word	0x20008572
    9ca8:	2000bee0 	.word	0x2000bee0
    9cac:	20008573 	.word	0x20008573

00009cb0 <_ZN7dataCSC8saveDataEPKv>:
    type = ((uint8_t*)data)[0];
    9cb0:	780b      	ldrb	r3, [r1, #0]
    switch (type)
    9cb2:	2b01      	cmp	r3, #1
    type = ((uint8_t*)data)[0];
    9cb4:	7403      	strb	r3, [r0, #16]
    switch (type)
    9cb6:	d004      	beq.n	9cc2 <_ZN7dataCSC8saveDataEPKv+0x12>
    9cb8:	2b02      	cmp	r3, #2
    9cba:	d00d      	beq.n	9cd8 <_ZN7dataCSC8saveDataEPKv+0x28>
        printk("Unknown type\n");
    9cbc:	480c      	ldr	r0, [pc, #48]	; (9cf0 <_ZN7dataCSC8saveDataEPKv+0x40>)
    9cbe:	f00f be96 	b.w	199ee <printk>
        oldSumRevSpeed = sumRevSpeed;
    9cc2:	8803      	ldrh	r3, [r0, #0]
    9cc4:	8043      	strh	r3, [r0, #2]
        oldLastEventSpeed = lastEventSpeed;
    9cc6:	8903      	ldrh	r3, [r0, #8]
    9cc8:	8143      	strh	r3, [r0, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    9cca:	f8b1 3001 	ldrh.w	r3, [r1, #1]
        sumRevSpeed = sys_get_le16(&((uint8_t*)data)[1]);
    9cce:	8003      	strh	r3, [r0, #0]
    9cd0:	f8b1 3005 	ldrh.w	r3, [r1, #5]
		lastEventSpeed = sys_get_le16(&((uint8_t*)data)[5]);
    9cd4:	8103      	strh	r3, [r0, #8]
        break;
    9cd6:	4770      	bx	lr
        oldSumRevCadence = sumRevCadence;
    9cd8:	8883      	ldrh	r3, [r0, #4]
    9cda:	80c3      	strh	r3, [r0, #6]
        oldLastEventCadence  = lastEventCadence;
    9cdc:	8983      	ldrh	r3, [r0, #12]
    9cde:	81c3      	strh	r3, [r0, #14]
    9ce0:	f8b1 3001 	ldrh.w	r3, [r1, #1]
		sumRevCadence = sys_get_le16(&((uint8_t*)data)[1]);
    9ce4:	8083      	strh	r3, [r0, #4]
    9ce6:	f8b1 3003 	ldrh.w	r3, [r1, #3]
		lastEventCadence  = sys_get_le16(&((uint8_t*)data)[3]);
    9cea:	8183      	strh	r3, [r0, #12]
}
    9cec:	4770      	bx	lr
    9cee:	bf00      	nop
    9cf0:	0001e938 	.word	0x0001e938

00009cf4 <_ZN7dataCSC7calcRPMEv>:
uint16_t dataCSC::calcRPM() {
    9cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9cf8:	8985      	ldrh	r5, [r0, #12]
    9cfa:	89c3      	ldrh	r3, [r0, #14]
uint16_t dataCSC::calcRPM() {
    9cfc:	4604      	mov	r4, r0
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9cfe:	429d      	cmp	r5, r3
    9d00:	d02f      	beq.n	9d62 <_ZN7dataCSC7calcRPMEv+0x6e>
    uint16_t nbrRev = sumRevCadence-oldSumRevCadence;
    9d02:	f8b0 8004 	ldrh.w	r8, [r0, #4]
    9d06:	f8b0 9006 	ldrh.w	r9, [r0, #6]
    if ((lastEventCadence != oldLastEventCadence) && (nbrRev))
    9d0a:	45c8      	cmp	r8, r9
    9d0c:	d029      	beq.n	9d62 <_ZN7dataCSC7calcRPMEv+0x6e>
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9d0e:	1aed      	subs	r5, r5, r3
    9d10:	4628      	mov	r0, r5
    9d12:	f7fe fbe7 	bl	84e4 <__aeabi_i2d>
    9d16:	2200      	movs	r2, #0
    9d18:	4b13      	ldr	r3, [pc, #76]	; (9d68 <_ZN7dataCSC7calcRPMEv+0x74>)
    9d1a:	f7fe fc4d 	bl	85b8 <__aeabi_dmul>
        if (time < 0)
    9d1e:	2200      	movs	r2, #0
    9d20:	2300      	movs	r3, #0
        double time = (lastEventCadence - oldLastEventCadence)/1024.0;
    9d22:	4606      	mov	r6, r0
    9d24:	460f      	mov	r7, r1
        if (time < 0)
    9d26:	f7fe feb9 	bl	8a9c <__aeabi_dcmplt>
    9d2a:	b130      	cbz	r0, 9d3a <_ZN7dataCSC7calcRPMEv+0x46>
            time = 0xffff - oldLastEventCadence + lastEventCadence;
    9d2c:	f505 407f 	add.w	r0, r5, #65280	; 0xff00
    9d30:	30ff      	adds	r0, #255	; 0xff
    9d32:	f7fe fbd7 	bl	84e4 <__aeabi_i2d>
    9d36:	4606      	mov	r6, r0
    9d38:	460f      	mov	r7, r1
        rpm = (sumRevCadence - oldSumRevCadence) * 60 / time;
    9d3a:	203c      	movs	r0, #60	; 0x3c
    9d3c:	eba8 0809 	sub.w	r8, r8, r9
    9d40:	fb00 f008 	mul.w	r0, r0, r8
    9d44:	f7fe fbce 	bl	84e4 <__aeabi_i2d>
    9d48:	4632      	mov	r2, r6
    9d4a:	463b      	mov	r3, r7
    9d4c:	f7fe fd5e 	bl	880c <__aeabi_ddiv>
    9d50:	4602      	mov	r2, r0
    9d52:	460b      	mov	r3, r1
    9d54:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
        retVal = (uint16_t) rpm;
    9d58:	f7fe fec8 	bl	8aec <__aeabi_d2uiz>
    9d5c:	b280      	uxth	r0, r0
}
    9d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint16_t retVal = 0;
    9d62:	2000      	movs	r0, #0
    9d64:	e7fb      	b.n	9d5e <_ZN7dataCSC7calcRPMEv+0x6a>
    9d66:	bf00      	nop
    9d68:	3f500000 	.word	0x3f500000

00009d6c <_Z15on_cccd_changedPK12bt_gatt_attrt>:

/* This function is called whenever the CCCD register has been changed by the client*/
void on_cccd_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
    ARG_UNUSED(attr);
    switch(value)
    9d6c:	2901      	cmp	r1, #1
    9d6e:	d004      	beq.n	9d7a <_Z15on_cccd_changedPK12bt_gatt_attrt+0xe>
    9d70:	2902      	cmp	r1, #2
    9d72:	d005      	beq.n	9d80 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x14>
    9d74:	b931      	cbnz	r1, 9d84 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x18>
            printk("Notifications ON with Indications\n");
            break;

        case 0: 
            // Stop sending stuff
            printk("Notifications OFF\n");
    9d76:	4804      	ldr	r0, [pc, #16]	; (9d88 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x1c>)
    9d78:	e000      	b.n	9d7c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Notifications ON\n");
    9d7a:	4804      	ldr	r0, [pc, #16]	; (9d8c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x20>)
            break;
        
        default: 
            printk("Error, CCCD has been set to an invalid value\n");     
    9d7c:	f00f be37 	b.w	199ee <printk>
            printk("Notifications ON with Indications\n");
    9d80:	4803      	ldr	r0, [pc, #12]	; (9d90 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x24>)
    9d82:	e7fb      	b.n	9d7c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
            printk("Error, CCCD has been set to an invalid value\n");     
    9d84:	4803      	ldr	r0, [pc, #12]	; (9d94 <_Z15on_cccd_changedPK12bt_gatt_attrt+0x28>)
    9d86:	e7f9      	b.n	9d7c <_Z15on_cccd_changedPK12bt_gatt_attrt+0x10>
    9d88:	0001e97b 	.word	0x0001e97b
    9d8c:	0001e946 	.word	0x0001e946
    9d90:	0001e958 	.word	0x0001e958
    9d94:	0001e98e 	.word	0x0001e98e

00009d98 <_Z17data_service_initv>:
{
    9d98:	b508      	push	{r3, lr}
    memset(&data_rx, 0, MAX_TRANSMIT_SIZE);
    9d9a:	22f0      	movs	r2, #240	; 0xf0
    9d9c:	2100      	movs	r1, #0
    9d9e:	4805      	ldr	r0, [pc, #20]	; (9db4 <_Z17data_service_initv+0x1c>)
    9da0:	f011 f890 	bl	1aec4 <memset>
    memset(&data_tx, 0, MAX_TRANSMIT_SIZE);
    9da4:	22f0      	movs	r2, #240	; 0xf0
    9da6:	2100      	movs	r1, #0
    9da8:	4803      	ldr	r0, [pc, #12]	; (9db8 <_Z17data_service_initv+0x20>)
    9daa:	f011 f88b 	bl	1aec4 <memset>
}
    9dae:	2000      	movs	r0, #0
    9db0:	bd08      	pop	{r3, pc}
    9db2:	bf00      	nop
    9db4:	2000bf30 	.word	0x2000bf30
    9db8:	2000c020 	.word	0x2000c020

00009dbc <_Z17data_service_sendP7bt_connPKht>:
     * to check whether notification has been enabled by the peer or not.
     * Attribute table: 0 = Service, 1 = Primary service, 2 = RX, 3 = TX, 4 = CCC.
     */
    const struct bt_gatt_attr *attr = &data_service.attrs[3]; 

    struct bt_gatt_notify_params params = 
    9dbc:	2300      	movs	r3, #0
{
    9dbe:	b510      	push	{r4, lr}
    9dc0:	b086      	sub	sp, #24
    struct bt_gatt_notify_params params = 
    9dc2:	9303      	str	r3, [sp, #12]
    9dc4:	9305      	str	r3, [sp, #20]
    9dc6:	4b0d      	ldr	r3, [pc, #52]	; (9dfc <_Z17data_service_sendP7bt_connPKht+0x40>)
        .uuid   = BT_UUID_DATA_SERVICE_TX,
        .attr   = attr,
        .data   = data,
        .len    = len,
        .func   = on_sent
    };
    9dc8:	f8ad 200c 	strh.w	r2, [sp, #12]
    struct bt_gatt_notify_params params = 
    9dcc:	9300      	str	r3, [sp, #0]
    9dce:	4b0c      	ldr	r3, [pc, #48]	; (9e00 <_Z17data_service_sendP7bt_connPKht+0x44>)

    // Check whether notifications are enabled or not
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9dd0:	2201      	movs	r2, #1
    struct bt_gatt_notify_params params = 
    9dd2:	9304      	str	r3, [sp, #16]
    };
    9dd4:	4b0b      	ldr	r3, [pc, #44]	; (9e04 <_Z17data_service_sendP7bt_connPKht+0x48>)
{
    9dd6:	4604      	mov	r4, r0
    };
    9dd8:	e9cd 3101 	strd	r3, r1, [sp, #4]
    if(bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) 
    9ddc:	4619      	mov	r1, r3
    9dde:	f009 fcfd 	bl	137dc <bt_gatt_is_subscribed>
    9de2:	b148      	cbz	r0, 9df8 <_Z17data_service_sendP7bt_connPKht+0x3c>
    {
        // Send the notification
	    if(bt_gatt_notify_cb(conn, &params))
    9de4:	4669      	mov	r1, sp
    9de6:	4620      	mov	r0, r4
    9de8:	f009 fb16 	bl	13418 <bt_gatt_notify_cb>
    9dec:	b110      	cbz	r0, 9df4 <_Z17data_service_sendP7bt_connPKht+0x38>
        {
            printk("Error, unable to send notification\n");
    9dee:	4806      	ldr	r0, [pc, #24]	; (9e08 <_Z17data_service_sendP7bt_connPKht+0x4c>)
        }
    }
    else
    {
        printk("Warning, notification not enabled on the selected attribute\n");
    9df0:	f00f fdfd 	bl	199ee <printk>
    }
}
    9df4:	b006      	add	sp, #24
    9df6:	bd10      	pop	{r4, pc}
        printk("Warning, notification not enabled on the selected attribute\n");
    9df8:	4804      	ldr	r0, [pc, #16]	; (9e0c <_Z17data_service_sendP7bt_connPKht+0x50>)
    9dfa:	e7f9      	b.n	9df0 <_Z17data_service_sendP7bt_connPKht+0x34>
    9dfc:	0001eaa3 	.word	0x0001eaa3
    9e00:	000198b7 	.word	0x000198b7
    9e04:	0001d9dc 	.word	0x0001d9dc
    9e08:	0001e9ed 	.word	0x0001e9ed
    9e0c:	0001ea11 	.word	0x0001ea11

00009e10 <_Z11getDiameterv>:

// getter
double getDiameter() {
    return dia;
}
    9e10:	4b01      	ldr	r3, [pc, #4]	; (9e18 <_Z11getDiameterv+0x8>)
    9e12:	e9d3 0100 	ldrd	r0, r1, [r3]
    9e16:	4770      	bx	lr
    9e18:	20008818 	.word	0x20008818

00009e1c <_Z17getNbrOfAddressesv>:

// getter
uint8_t getNbrOfAddresses() {
    return nbrAddresses;
}
    9e1c:	4b01      	ldr	r3, [pc, #4]	; (9e24 <_Z17getNbrOfAddressesv+0x8>)
    9e1e:	7818      	ldrb	r0, [r3, #0]
    9e20:	4770      	bx	lr
    9e22:	bf00      	nop
    9e24:	2000c112 	.word	0x2000c112

00009e28 <_Z10getAddressPch>:

// getter
void getAddress(char* outArray, uint8_t nbr) {
    switch (nbr)
    9e28:	2902      	cmp	r1, #2
    9e2a:	d00d      	beq.n	9e48 <_Z10getAddressPch+0x20>
    9e2c:	2903      	cmp	r1, #3
    9e2e:	d015      	beq.n	9e5c <_Z10getAddressPch+0x34>
    9e30:	2901      	cmp	r1, #1
    9e32:	d11c      	bne.n	9e6e <_Z10getAddressPch+0x46>
    9e34:	4a0e      	ldr	r2, [pc, #56]	; (9e70 <_Z10getAddressPch+0x48>)
    9e36:	1e43      	subs	r3, r0, #1
    9e38:	3010      	adds	r0, #16
    {
    case 1:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address1[i];
    9e3a:	f812 1b01 	ldrb.w	r1, [r2], #1
    9e3e:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    9e42:	4283      	cmp	r3, r0
    9e44:	d1f9      	bne.n	9e3a <_Z10getAddressPch+0x12>
    9e46:	4770      	bx	lr
    9e48:	4a0a      	ldr	r2, [pc, #40]	; (9e74 <_Z10getAddressPch+0x4c>)
    9e4a:	1e43      	subs	r3, r0, #1
    9e4c:	3010      	adds	r0, #16
        }    
        break;
    case 2:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address2[i];
    9e4e:	f812 1b01 	ldrb.w	r1, [r2], #1
    9e52:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    9e56:	4283      	cmp	r3, r0
    9e58:	d1f9      	bne.n	9e4e <_Z10getAddressPch+0x26>
    9e5a:	4770      	bx	lr
    9e5c:	4a06      	ldr	r2, [pc, #24]	; (9e78 <_Z10getAddressPch+0x50>)
    9e5e:	1e43      	subs	r3, r0, #1
    9e60:	3010      	adds	r0, #16
        }    
        break;
    case 3:
        for (uint8_t i=0; i<17; i++)
        {
            outArray[i] = address3[i];
    9e62:	f812 1b01 	ldrb.w	r1, [r2], #1
    9e66:	f803 1f01 	strb.w	r1, [r3, #1]!
        for (uint8_t i=0; i<17; i++)
    9e6a:	4283      	cmp	r3, r0
    9e6c:	d1f9      	bne.n	9e62 <_Z10getAddressPch+0x3a>
        break;
    
    default:
        break;
    }
}
    9e6e:	4770      	bx	lr
    9e70:	2000befc 	.word	0x2000befc
    9e74:	2000bf0d 	.word	0x2000bf0d
    9e78:	2000bf1e 	.word	0x2000bf1e

00009e7c <_Z14getSensorInfosv>:

uint8_t getSensorInfos() {
    return infoSensors;
}
    9e7c:	4b01      	ldr	r3, [pc, #4]	; (9e84 <_Z14getSensorInfosv+0x8>)
    9e7e:	7818      	ldrb	r0, [r3, #0]
    9e80:	4770      	bx	lr
    9e82:	bf00      	nop
    9e84:	2000c111 	.word	0x2000c111

00009e88 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9e88:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    9e8a:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
    9e8c:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    9e90:	2b02      	cmp	r3, #2
{
    9e92:	4604      	mov	r4, r0
    9e94:	460e      	mov	r6, r1
	notify->result = res;
    9e96:	6081      	str	r1, [r0, #8]
	switch (method) {
    9e98:	d010      	beq.n	9ebc <sys_notify_finalize+0x34>
    9e9a:	2b03      	cmp	r3, #3
    9e9c:	d004      	beq.n	9ea8 <sys_notify_finalize+0x20>
    9e9e:	2b01      	cmp	r3, #1
    9ea0:	d10f      	bne.n	9ec2 <sys_notify_finalize+0x3a>
    9ea2:	2500      	movs	r5, #0
    9ea4:	4628      	mov	r0, r5
    9ea6:	e001      	b.n	9eac <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    9ea8:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    9eaa:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    9eac:	2300      	movs	r3, #0
    9eae:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    9eb0:	b110      	cbz	r0, 9eb8 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    9eb2:	4631      	mov	r1, r6
    9eb4:	f00f fc58 	bl	19768 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9eb8:	4628      	mov	r0, r5
    9eba:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
    9ebc:	2500      	movs	r5, #0
		sig = notify->method.signal;
    9ebe:	6800      	ldr	r0, [r0, #0]
		break;
    9ec0:	e7f4      	b.n	9eac <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    9ec2:	2245      	movs	r2, #69	; 0x45
    9ec4:	4904      	ldr	r1, [pc, #16]	; (9ed8 <sys_notify_finalize+0x50>)
    9ec6:	4805      	ldr	r0, [pc, #20]	; (9edc <sys_notify_finalize+0x54>)
    9ec8:	f00f fd91 	bl	199ee <printk>
    9ecc:	2145      	movs	r1, #69	; 0x45
    9ece:	4802      	ldr	r0, [pc, #8]	; (9ed8 <sys_notify_finalize+0x50>)
    9ed0:	f010 f833 	bl	19f3a <assert_post_action>
	sys_notify_generic_callback rv = 0;
    9ed4:	2500      	movs	r5, #0
    9ed6:	e7e8      	b.n	9eaa <sys_notify_finalize+0x22>
    9ed8:	0001eab4 	.word	0x0001eab4
    9edc:	0001ead7 	.word	0x0001ead7

00009ee0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    9ee0:	680b      	ldr	r3, [r1, #0]
    9ee2:	3301      	adds	r3, #1
    9ee4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    9ee6:	4b01      	ldr	r3, [pc, #4]	; (9eec <char_out+0xc>)
    9ee8:	681b      	ldr	r3, [r3, #0]
    9eea:	4718      	bx	r3
    9eec:	200081fc 	.word	0x200081fc

00009ef0 <__printk_hook_install>:
	_char_out = fn;
    9ef0:	4b01      	ldr	r3, [pc, #4]	; (9ef8 <__printk_hook_install+0x8>)
    9ef2:	6018      	str	r0, [r3, #0]
}
    9ef4:	4770      	bx	lr
    9ef6:	bf00      	nop
    9ef8:	200081fc 	.word	0x200081fc

00009efc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    9efc:	b507      	push	{r0, r1, r2, lr}
    9efe:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    9f00:	2100      	movs	r1, #0
{
    9f02:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    9f04:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    9f06:	4803      	ldr	r0, [pc, #12]	; (9f14 <vprintk+0x18>)
    9f08:	a901      	add	r1, sp, #4
    9f0a:	f000 fbe9 	bl	a6e0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    9f0e:	b003      	add	sp, #12
    9f10:	f85d fb04 	ldr.w	pc, [sp], #4
    9f14:	00009ee1 	.word	0x00009ee1

00009f18 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    9f18:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
    9f1a:	2500      	movs	r5, #0
{
    9f1c:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    9f1e:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    9f22:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
    9f24:	a901      	add	r1, sp, #4
    9f26:	4805      	ldr	r0, [pc, #20]	; (9f3c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    9f28:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    9f2a:	f000 fbd9 	bl	a6e0 <cbvprintf>

	if (ctx.count < ctx.max) {
    9f2e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    9f32:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    9f34:	bfb8      	it	lt
    9f36:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    9f38:	b005      	add	sp, #20
    9f3a:	bd30      	pop	{r4, r5, pc}
    9f3c:	000199c9 	.word	0x000199c9

00009f40 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    9f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9f44:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
    9f48:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    9f4a:	f01a 0f08 	tst.w	sl, #8
{
    9f4e:	4693      	mov	fp, r2
	if (processing) {
    9f50:	d01c      	beq.n	9f8c <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
    9f52:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    9f54:	bf0c      	ite	eq
    9f56:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    9f5a:	f04a 0a20 	orrne.w	sl, sl, #32
    9f5e:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    9f62:	f104 0014 	add.w	r0, r4, #20
    9f66:	f00e fd67 	bl	18a38 <z_spin_unlock_valid>
    9f6a:	b940      	cbnz	r0, 9f7e <process_event+0x3e>
    9f6c:	4992      	ldr	r1, [pc, #584]	; (a1b8 <process_event+0x278>)
    9f6e:	4893      	ldr	r0, [pc, #588]	; (a1bc <process_event+0x27c>)
    9f70:	22a7      	movs	r2, #167	; 0xa7
    9f72:	f00f fd3c 	bl	199ee <printk>
    9f76:	21a7      	movs	r1, #167	; 0xa7
    9f78:	488f      	ldr	r0, [pc, #572]	; (a1b8 <process_event+0x278>)
    9f7a:	f00f ffde 	bl	19f3a <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    9f7e:	f38b 8811 	msr	BASEPRI, fp
    9f82:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    9f86:	b003      	add	sp, #12
    9f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    9f8c:	4f8c      	ldr	r7, [pc, #560]	; (a1c0 <process_event+0x280>)
    9f8e:	f8df 822c 	ldr.w	r8, [pc, #556]	; a1bc <process_event+0x27c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9f92:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
    9f96:	2902      	cmp	r1, #2
    9f98:	d106      	bne.n	9fa8 <process_event+0x68>
			evt = process_recheck(mgr);
    9f9a:	4620      	mov	r0, r4
    9f9c:	f00f fd41 	bl	19a22 <process_recheck>
		if (evt == EVT_NOP) {
    9fa0:	2800      	cmp	r0, #0
    9fa2:	d0de      	beq.n	9f62 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    9fa4:	2801      	cmp	r0, #1
    9fa6:	d163      	bne.n	a070 <process_event+0x130>
			res = mgr->last_res;
    9fa8:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9fac:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    9fae:	f1b9 0f00 	cmp.w	r9, #0
    9fb2:	da19      	bge.n	9fe8 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    9fb4:	2600      	movs	r6, #0
		*clients = mgr->clients;
    9fb6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9fb8:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    9fbc:	e9c4 6600 	strd	r6, r6, [r4]
    9fc0:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    9fc4:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9fc6:	8ba3      	ldrh	r3, [r4, #28]
    9fc8:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    9fcc:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    9fce:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
    9fd0:	d003      	beq.n	9fda <process_event+0x9a>
		if (do_monitors
    9fd2:	68a2      	ldr	r2, [r4, #8]
    9fd4:	2a00      	cmp	r2, #0
    9fd6:	f040 80f5 	bne.w	a1c4 <process_event+0x284>
		    || !sys_slist_is_empty(&clients)
    9fda:	b915      	cbnz	r5, 9fe2 <process_event+0xa2>
		    || (transit != NULL)) {
    9fdc:	2e00      	cmp	r6, #0
    9fde:	f000 812f 	beq.w	a240 <process_event+0x300>
    9fe2:	f04f 0a00 	mov.w	sl, #0
    9fe6:	e0ef      	b.n	a1c8 <process_event+0x288>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9fe8:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    9fec:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    9fee:	2901      	cmp	r1, #1
    9ff0:	d820      	bhi.n	a034 <process_event+0xf4>
	list->head = NULL;
    9ff2:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9ff4:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    9ff8:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    9ffa:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    9ffc:	b29b      	uxth	r3, r3
	list->tail = NULL;
    9ffe:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    a002:	d10a      	bne.n	a01a <process_event+0xda>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a004:	b13d      	cbz	r5, a016 <process_event+0xd6>
    a006:	4629      	mov	r1, r5
    a008:	8be2      	ldrh	r2, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    a00a:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    a00c:	3201      	adds	r2, #1
    a00e:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    a010:	2900      	cmp	r1, #0
    a012:	d1fa      	bne.n	a00a <process_event+0xca>
    a014:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a016:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
    a01a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a01c:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    a01e:	f00f fd00 	bl	19a22 <process_recheck>
    a022:	4606      	mov	r6, r0
    a024:	2800      	cmp	r0, #0
    a026:	d0ce      	beq.n	9fc6 <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a028:	8ba3      	ldrh	r3, [r4, #28]
    a02a:	f043 0320 	orr.w	r3, r3, #32
    a02e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    a030:	2600      	movs	r6, #0
    a032:	e7c8      	b.n	9fc6 <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
    a034:	2a04      	cmp	r2, #4
    a036:	d10d      	bne.n	a054 <process_event+0x114>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a038:	f023 0307 	bic.w	r3, r3, #7
    a03c:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
    a03e:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    a040:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    a042:	f00f fcee 	bl	19a22 <process_recheck>
    a046:	4605      	mov	r5, r0
    a048:	b180      	cbz	r0, a06c <process_event+0x12c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    a04a:	f042 0220 	orr.w	r2, r2, #32
    a04e:	2500      	movs	r5, #0
    a050:	83a2      	strh	r2, [r4, #28]
    a052:	e7ed      	b.n	a030 <process_event+0xf0>
		__ASSERT_NO_MSG(false);
    a054:	f240 1219 	movw	r2, #281	; 0x119
    a058:	4639      	mov	r1, r7
    a05a:	4640      	mov	r0, r8
    a05c:	f00f fcc7 	bl	199ee <printk>
    a060:	f240 1119 	movw	r1, #281	; 0x119
    a064:	4638      	mov	r0, r7
    a066:	f00f ff68 	bl	19f3a <assert_post_action>
    a06a:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    a06c:	462e      	mov	r6, r5
    a06e:	e7aa      	b.n	9fc6 <process_event+0x86>
		} else if (evt == EVT_START) {
    a070:	2803      	cmp	r0, #3
    a072:	d131      	bne.n	a0d8 <process_event+0x198>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    a074:	f1ba 0f00 	cmp.w	sl, #0
    a078:	d00a      	beq.n	a090 <process_event+0x150>
    a07a:	4639      	mov	r1, r7
    a07c:	4640      	mov	r0, r8
    a07e:	f44f 72aa 	mov.w	r2, #340	; 0x154
    a082:	f00f fcb4 	bl	199ee <printk>
    a086:	f44f 71aa 	mov.w	r1, #340	; 0x154
    a08a:	4638      	mov	r0, r7
    a08c:	f00f ff55 	bl	19f3a <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a090:	6823      	ldr	r3, [r4, #0]
    a092:	b953      	cbnz	r3, a0aa <process_event+0x16a>
    a094:	4639      	mov	r1, r7
    a096:	4640      	mov	r0, r8
    a098:	f240 1255 	movw	r2, #341	; 0x155
    a09c:	f00f fca7 	bl	199ee <printk>
    a0a0:	f240 1155 	movw	r1, #341	; 0x155
    a0a4:	4638      	mov	r0, r7
    a0a6:	f00f ff48 	bl	19f3a <assert_post_action>
			transit = mgr->transitions->start;
    a0aa:	6923      	ldr	r3, [r4, #16]
    a0ac:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    a0ae:	b956      	cbnz	r6, a0c6 <process_event+0x186>
    a0b0:	4639      	mov	r1, r7
    a0b2:	4640      	mov	r0, r8
    a0b4:	f44f 72ac 	mov.w	r2, #344	; 0x158
    a0b8:	f00f fc99 	bl	199ee <printk>
    a0bc:	f44f 71ac 	mov.w	r1, #344	; 0x158
    a0c0:	4638      	mov	r0, r7
    a0c2:	f00f ff3a 	bl	19f3a <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a0c6:	8ba3      	ldrh	r3, [r4, #28]
    a0c8:	f023 0307 	bic.w	r3, r3, #7
    a0cc:	f043 0306 	orr.w	r3, r3, #6
}
    a0d0:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    a0d2:	83a3      	strh	r3, [r4, #28]
		res = 0;
    a0d4:	46a9      	mov	r9, r5
}
    a0d6:	e776      	b.n	9fc6 <process_event+0x86>
		} else if (evt == EVT_STOP) {
    a0d8:	2804      	cmp	r0, #4
    a0da:	d12e      	bne.n	a13a <process_event+0x1fa>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    a0dc:	f1ba 0f02 	cmp.w	sl, #2
    a0e0:	d00a      	beq.n	a0f8 <process_event+0x1b8>
    a0e2:	4639      	mov	r1, r7
    a0e4:	4640      	mov	r0, r8
    a0e6:	f240 125b 	movw	r2, #347	; 0x15b
    a0ea:	f00f fc80 	bl	199ee <printk>
    a0ee:	f240 115b 	movw	r1, #347	; 0x15b
    a0f2:	4638      	mov	r0, r7
    a0f4:	f00f ff21 	bl	19f3a <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    a0f8:	8be3      	ldrh	r3, [r4, #30]
    a0fa:	b153      	cbz	r3, a112 <process_event+0x1d2>
    a0fc:	4639      	mov	r1, r7
    a0fe:	4640      	mov	r0, r8
    a100:	f44f 72ae 	mov.w	r2, #348	; 0x15c
    a104:	f00f fc73 	bl	199ee <printk>
    a108:	f44f 71ae 	mov.w	r1, #348	; 0x15c
    a10c:	4638      	mov	r0, r7
    a10e:	f00f ff14 	bl	19f3a <assert_post_action>
			transit = mgr->transitions->stop;
    a112:	6923      	ldr	r3, [r4, #16]
    a114:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    a116:	b956      	cbnz	r6, a12e <process_event+0x1ee>
    a118:	4639      	mov	r1, r7
    a11a:	4640      	mov	r0, r8
    a11c:	f240 125f 	movw	r2, #351	; 0x15f
    a120:	f00f fc65 	bl	199ee <printk>
    a124:	f240 115f 	movw	r1, #351	; 0x15f
    a128:	4638      	mov	r0, r7
    a12a:	f00f ff06 	bl	19f3a <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a12e:	8ba3      	ldrh	r3, [r4, #28]
    a130:	f023 0307 	bic.w	r3, r3, #7
    a134:	f043 0304 	orr.w	r3, r3, #4
    a138:	e7ca      	b.n	a0d0 <process_event+0x190>
		} else if (evt == EVT_RESET) {
    a13a:	2805      	cmp	r0, #5
    a13c:	d12e      	bne.n	a19c <process_event+0x25c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a13e:	f1ba 0f01 	cmp.w	sl, #1
    a142:	d00a      	beq.n	a15a <process_event+0x21a>
    a144:	4639      	mov	r1, r7
    a146:	4640      	mov	r0, r8
    a148:	f44f 72b1 	mov.w	r2, #354	; 0x162
    a14c:	f00f fc4f 	bl	199ee <printk>
    a150:	f44f 71b1 	mov.w	r1, #354	; 0x162
    a154:	4638      	mov	r0, r7
    a156:	f00f fef0 	bl	19f3a <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    a15a:	6823      	ldr	r3, [r4, #0]
    a15c:	b953      	cbnz	r3, a174 <process_event+0x234>
    a15e:	4639      	mov	r1, r7
    a160:	4640      	mov	r0, r8
    a162:	f240 1263 	movw	r2, #355	; 0x163
    a166:	f00f fc42 	bl	199ee <printk>
    a16a:	f240 1163 	movw	r1, #355	; 0x163
    a16e:	4638      	mov	r0, r7
    a170:	f00f fee3 	bl	19f3a <assert_post_action>
			transit = mgr->transitions->reset;
    a174:	6923      	ldr	r3, [r4, #16]
    a176:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    a178:	b956      	cbnz	r6, a190 <process_event+0x250>
    a17a:	4639      	mov	r1, r7
    a17c:	4640      	mov	r0, r8
    a17e:	f44f 72b3 	mov.w	r2, #358	; 0x166
    a182:	f00f fc34 	bl	199ee <printk>
    a186:	f44f 71b3 	mov.w	r1, #358	; 0x166
    a18a:	4638      	mov	r0, r7
    a18c:	f00f fed5 	bl	19f3a <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    a190:	8ba3      	ldrh	r3, [r4, #28]
    a192:	f023 0307 	bic.w	r3, r3, #7
    a196:	f043 0305 	orr.w	r3, r3, #5
    a19a:	e799      	b.n	a0d0 <process_event+0x190>
			__ASSERT_NO_MSG(false);
    a19c:	2500      	movs	r5, #0
    a19e:	f240 1269 	movw	r2, #361	; 0x169
    a1a2:	4639      	mov	r1, r7
    a1a4:	4640      	mov	r0, r8
    a1a6:	f00f fc22 	bl	199ee <printk>
    a1aa:	f240 1169 	movw	r1, #361	; 0x169
    a1ae:	4638      	mov	r0, r7
    a1b0:	f00f fec3 	bl	19f3a <assert_post_action>
		onoff_transition_fn transit = NULL;
    a1b4:	462e      	mov	r6, r5
    a1b6:	e78d      	b.n	a0d4 <process_event+0x194>
    a1b8:	0001eb11 	.word	0x0001eb11
    a1bc:	0001ead7 	.word	0x0001ead7
    a1c0:	0001eaef 	.word	0x0001eaef
				   && !sys_slist_is_empty(&mgr->monitors);
    a1c4:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    a1c8:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    a1cc:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
    a1ce:	f104 0314 	add.w	r3, r4, #20
    a1d2:	4618      	mov	r0, r3
    a1d4:	9301      	str	r3, [sp, #4]
    a1d6:	f00e fc2f 	bl	18a38 <z_spin_unlock_valid>
    a1da:	b940      	cbnz	r0, a1ee <process_event+0x2ae>
    a1dc:	4640      	mov	r0, r8
    a1de:	4931      	ldr	r1, [pc, #196]	; (a2a4 <process_event+0x364>)
    a1e0:	22a7      	movs	r2, #167	; 0xa7
    a1e2:	f00f fc04 	bl	199ee <printk>
    a1e6:	21a7      	movs	r1, #167	; 0xa7
    a1e8:	482e      	ldr	r0, [pc, #184]	; (a2a4 <process_event+0x364>)
    a1ea:	f00f fea6 	bl	19f3a <assert_post_action>
    a1ee:	f38b 8811 	msr	BASEPRI, fp
    a1f2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    a1f6:	f1ba 0f00 	cmp.w	sl, #0
    a1fa:	d130      	bne.n	a25e <process_event+0x31e>
	while (!sys_slist_is_empty(list)) {
    a1fc:	2d00      	cmp	r5, #0
    a1fe:	d140      	bne.n	a282 <process_event+0x342>
			if (transit != NULL) {
    a200:	b116      	cbz	r6, a208 <process_event+0x2c8>
				transit(mgr, transition_complete);
    a202:	4620      	mov	r0, r4
    a204:	4928      	ldr	r1, [pc, #160]	; (a2a8 <process_event+0x368>)
    a206:	47b0      	blx	r6
	__asm__ volatile(
    a208:	f04f 0320 	mov.w	r3, #32
    a20c:	f3ef 8b11 	mrs	fp, BASEPRI
    a210:	f383 8811 	msr	BASEPRI, r3
    a214:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a218:	9801      	ldr	r0, [sp, #4]
    a21a:	f00e fbff 	bl	18a1c <z_spin_lock_valid>
    a21e:	b940      	cbnz	r0, a232 <process_event+0x2f2>
    a220:	4640      	mov	r0, r8
    a222:	4920      	ldr	r1, [pc, #128]	; (a2a4 <process_event+0x364>)
    a224:	227c      	movs	r2, #124	; 0x7c
    a226:	f00f fbe2 	bl	199ee <printk>
    a22a:	217c      	movs	r1, #124	; 0x7c
    a22c:	481d      	ldr	r0, [pc, #116]	; (a2a4 <process_event+0x364>)
    a22e:	f00f fe84 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
    a232:	9801      	ldr	r0, [sp, #4]
    a234:	f00e fc0e 	bl	18a54 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    a238:	8ba3      	ldrh	r3, [r4, #28]
    a23a:	f023 0308 	bic.w	r3, r3, #8
    a23e:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    a240:	8ba3      	ldrh	r3, [r4, #28]
    a242:	06da      	lsls	r2, r3, #27
    a244:	d525      	bpl.n	a292 <process_event+0x352>
			evt = EVT_COMPLETE;
    a246:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    a248:	f023 0310 	bic.w	r3, r3, #16
    a24c:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
    a24e:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
    a252:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
    a256:	2900      	cmp	r1, #0
    a258:	f47f ae9d 	bne.w	9f96 <process_event+0x56>
out:
    a25c:	e681      	b.n	9f62 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    a25e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a260:	2900      	cmp	r1, #0
    a262:	d0cb      	beq.n	a1fc <process_event+0x2bc>
	return node->next;
    a264:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    a268:	464b      	mov	r3, r9
    a26a:	4620      	mov	r0, r4
    a26c:	f8d1 b004 	ldr.w	fp, [r1, #4]
    a270:	9a00      	ldr	r2, [sp, #0]
    a272:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    a274:	f1ba 0f00 	cmp.w	sl, #0
    a278:	d0c0      	beq.n	a1fc <process_event+0x2bc>
    a27a:	4651      	mov	r1, sl
    a27c:	f8da a000 	ldr.w	sl, [sl]
    a280:	e7f2      	b.n	a268 <process_event+0x328>
    a282:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    a284:	464b      	mov	r3, r9
    a286:	4620      	mov	r0, r4
    a288:	9a00      	ldr	r2, [sp, #0]
    a28a:	682d      	ldr	r5, [r5, #0]
    a28c:	f00f fbe5 	bl	19a5a <notify_one>
    a290:	e7b4      	b.n	a1fc <process_event+0x2bc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    a292:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a296:	bf1e      	ittt	ne
    a298:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    a29c:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    a29e:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    a2a0:	e7d5      	b.n	a24e <process_event+0x30e>
    a2a2:	bf00      	nop
    a2a4:	0001eb11 	.word	0x0001eb11
    a2a8:	0000a2ad 	.word	0x0000a2ad

0000a2ac <transition_complete>:
{
    a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a2ae:	4604      	mov	r4, r0
    a2b0:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a2b2:	f100 0614 	add.w	r6, r0, #20
    a2b6:	f04f 0320 	mov.w	r3, #32
    a2ba:	f3ef 8711 	mrs	r7, BASEPRI
    a2be:	f383 8811 	msr	BASEPRI, r3
    a2c2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a2c6:	4630      	mov	r0, r6
    a2c8:	f00e fba8 	bl	18a1c <z_spin_lock_valid>
    a2cc:	b940      	cbnz	r0, a2e0 <transition_complete+0x34>
    a2ce:	490a      	ldr	r1, [pc, #40]	; (a2f8 <transition_complete+0x4c>)
    a2d0:	480a      	ldr	r0, [pc, #40]	; (a2fc <transition_complete+0x50>)
    a2d2:	227c      	movs	r2, #124	; 0x7c
    a2d4:	f00f fb8b 	bl	199ee <printk>
    a2d8:	217c      	movs	r1, #124	; 0x7c
    a2da:	4807      	ldr	r0, [pc, #28]	; (a2f8 <transition_complete+0x4c>)
    a2dc:	f00f fe2d 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
    a2e0:	4630      	mov	r0, r6
    a2e2:	f00e fbb7 	bl	18a54 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
    a2e6:	463a      	mov	r2, r7
    a2e8:	4620      	mov	r0, r4
	mgr->last_res = res;
    a2ea:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    a2ec:	2101      	movs	r1, #1
}
    a2ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    a2f2:	f7ff be25 	b.w	9f40 <process_event>
    a2f6:	bf00      	nop
    a2f8:	0001eb11 	.word	0x0001eb11
    a2fc:	0001ead7 	.word	0x0001ead7

0000a300 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    a300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a304:	4604      	mov	r4, r0
    a306:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    a308:	f00f fbbd 	bl	19a86 <validate_args>

	if (rv < 0) {
    a30c:	1e05      	subs	r5, r0, #0
    a30e:	db54      	blt.n	a3ba <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    a310:	f104 0914 	add.w	r9, r4, #20
    a314:	f04f 0320 	mov.w	r3, #32
    a318:	f3ef 8a11 	mrs	sl, BASEPRI
    a31c:	f383 8811 	msr	BASEPRI, r3
    a320:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    a324:	4648      	mov	r0, r9
    a326:	f00e fb79 	bl	18a1c <z_spin_lock_valid>
    a32a:	b940      	cbnz	r0, a33e <onoff_request+0x3e>
    a32c:	4933      	ldr	r1, [pc, #204]	; (a3fc <onoff_request+0xfc>)
    a32e:	4834      	ldr	r0, [pc, #208]	; (a400 <onoff_request+0x100>)
    a330:	227c      	movs	r2, #124	; 0x7c
    a332:	f00f fb5c 	bl	199ee <printk>
    a336:	217c      	movs	r1, #124	; 0x7c
    a338:	4830      	ldr	r0, [pc, #192]	; (a3fc <onoff_request+0xfc>)
    a33a:	f00f fdfe 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
    a33e:	4648      	mov	r0, r9
    a340:	f00e fb88 	bl	18a54 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    a344:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a348:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a34a:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    a34c:	428b      	cmp	r3, r1
    a34e:	f002 0607 	and.w	r6, r2, #7
    a352:	d04a      	beq.n	a3ea <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    a354:	2e02      	cmp	r6, #2
    a356:	d11f      	bne.n	a398 <onoff_request+0x98>
	rv = state;
    a358:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
    a35a:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
    a35e:	3301      	adds	r3, #1
    a360:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    a362:	4648      	mov	r0, r9
    a364:	f00e fb68 	bl	18a38 <z_spin_unlock_valid>
    a368:	b940      	cbnz	r0, a37c <onoff_request+0x7c>
    a36a:	4924      	ldr	r1, [pc, #144]	; (a3fc <onoff_request+0xfc>)
    a36c:	4824      	ldr	r0, [pc, #144]	; (a400 <onoff_request+0x100>)
    a36e:	22a7      	movs	r2, #167	; 0xa7
    a370:	f00f fb3d 	bl	199ee <printk>
    a374:	21a7      	movs	r1, #167	; 0xa7
    a376:	4821      	ldr	r0, [pc, #132]	; (a3fc <onoff_request+0xfc>)
    a378:	f00f fddf 	bl	19f3a <assert_post_action>
	__asm__ volatile(
    a37c:	f38a 8811 	msr	BASEPRI, sl
    a380:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    a384:	f1b8 0f00 	cmp.w	r8, #0
    a388:	d017      	beq.n	a3ba <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
    a38a:	2300      	movs	r3, #0
    a38c:	4632      	mov	r2, r6
    a38e:	4639      	mov	r1, r7
    a390:	4620      	mov	r0, r4
    a392:	f00f fb62 	bl	19a5a <notify_one>
    a396:	e010      	b.n	a3ba <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
    a398:	0793      	lsls	r3, r2, #30
    a39a:	d001      	beq.n	a3a0 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
    a39c:	2e06      	cmp	r6, #6
    a39e:	d10f      	bne.n	a3c0 <onoff_request+0xc0>
	parent->next = child;
    a3a0:	2300      	movs	r3, #0
    a3a2:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    a3a4:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    a3a6:	b9eb      	cbnz	r3, a3e4 <onoff_request+0xe4>
	list->head = node;
    a3a8:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    a3ac:	4635      	mov	r5, r6
    a3ae:	b9f6      	cbnz	r6, a3ee <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
    a3b0:	4652      	mov	r2, sl
    a3b2:	2102      	movs	r1, #2
    a3b4:	4620      	mov	r0, r4
    a3b6:	f7ff fdc3 	bl	9f40 <process_event>
		}
	}

	return rv;
}
    a3ba:	4628      	mov	r0, r5
    a3bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    a3c0:	2e05      	cmp	r6, #5
    a3c2:	d017      	beq.n	a3f4 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    a3c4:	2e01      	cmp	r6, #1
    a3c6:	d00a      	beq.n	a3de <onoff_request+0xde>
    a3c8:	490e      	ldr	r1, [pc, #56]	; (a404 <onoff_request+0x104>)
    a3ca:	480d      	ldr	r0, [pc, #52]	; (a400 <onoff_request+0x100>)
    a3cc:	f240 12c5 	movw	r2, #453	; 0x1c5
    a3d0:	f00f fb0d 	bl	199ee <printk>
    a3d4:	f240 11c5 	movw	r1, #453	; 0x1c5
    a3d8:	480a      	ldr	r0, [pc, #40]	; (a404 <onoff_request+0x104>)
    a3da:	f00f fdae 	bl	19f3a <assert_post_action>
		rv = -EIO;
    a3de:	f06f 0504 	mvn.w	r5, #4
    a3e2:	e004      	b.n	a3ee <onoff_request+0xee>
	parent->next = child;
    a3e4:	601f      	str	r7, [r3, #0]
	list->tail = node;
    a3e6:	6067      	str	r7, [r4, #4]
}
    a3e8:	e7e0      	b.n	a3ac <onoff_request+0xac>
		rv = -EAGAIN;
    a3ea:	f06f 050a 	mvn.w	r5, #10
    a3ee:	f04f 0800 	mov.w	r8, #0
    a3f2:	e7b6      	b.n	a362 <onoff_request+0x62>
		rv = -ENOTSUP;
    a3f4:	f06f 0522 	mvn.w	r5, #34	; 0x22
    a3f8:	e7f9      	b.n	a3ee <onoff_request+0xee>
    a3fa:	bf00      	nop
    a3fc:	0001eb11 	.word	0x0001eb11
    a400:	0001ead7 	.word	0x0001ead7
    a404:	0001eaef 	.word	0x0001eaef

0000a408 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
    a408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a40c:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
    a40e:	4e14      	ldr	r6, [pc, #80]	; (a460 <z_work_q_main+0x58>)
    a410:	f8df 8050 	ldr.w	r8, [pc, #80]	; a464 <z_work_q_main+0x5c>
	return z_impl_k_queue_get(queue, timeout);
    a414:	f04f 32ff 	mov.w	r2, #4294967295
    a418:	f04f 33ff 	mov.w	r3, #4294967295
    a41c:	4628      	mov	r0, r5
    a41e:	f00d f8a5 	bl	1756c <z_impl_k_queue_get>
		if (work == NULL) {
    a422:	4604      	mov	r4, r0
    a424:	2800      	cmp	r0, #0
    a426:	d0f5      	beq.n	a414 <z_work_q_main+0xc>
		handler = work->handler;
    a428:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
    a42a:	b947      	cbnz	r7, a43e <z_work_q_main+0x36>
    a42c:	4631      	mov	r1, r6
    a42e:	4640      	mov	r0, r8
    a430:	221c      	movs	r2, #28
    a432:	f00f fadc 	bl	199ee <printk>
    a436:	211c      	movs	r1, #28
    a438:	4630      	mov	r0, r6
    a43a:	f00f fd7e 	bl	19f3a <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a43e:	f104 0308 	add.w	r3, r4, #8
    a442:	e8d3 2fef 	ldaex	r2, [r3]
    a446:	f022 0101 	bic.w	r1, r2, #1
    a44a:	e8c3 1fe0 	stlex	r0, r1, [r3]
    a44e:	2800      	cmp	r0, #0
    a450:	d1f7      	bne.n	a442 <z_work_q_main+0x3a>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
    a452:	07d3      	lsls	r3, r2, #31
    a454:	d501      	bpl.n	a45a <z_work_q_main+0x52>
					      K_WORK_STATE_PENDING)) {
			handler(work);
    a456:	4620      	mov	r0, r4
    a458:	47b8      	blx	r7
	z_impl_k_yield();
    a45a:	f00d ffb1 	bl	183c0 <z_impl_k_yield>
    a45e:	e7d9      	b.n	a414 <z_work_q_main+0xc>
    a460:	0001eb37 	.word	0x0001eb37
    a464:	0001ead7 	.word	0x0001ead7

0000a468 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
    a468:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
    a46a:	2900      	cmp	r1, #0
    a46c:	d039      	beq.n	a4e2 <sys_heap_free+0x7a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
    a46e:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a470:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    a472:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a474:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
    a476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a47a:	bf2c      	ite	cs
    a47c:	2408      	movcs	r4, #8
    a47e:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a480:	1b0c      	subs	r4, r1, r4
    a482:	1b64      	subs	r4, r4, r5
    a484:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a486:	4621      	mov	r1, r4
    a488:	f00f fb29 	bl	19ade <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
    a48c:	07c3      	lsls	r3, r0, #31
    a48e:	d408      	bmi.n	a4a2 <sys_heap_free+0x3a>
    a490:	4914      	ldr	r1, [pc, #80]	; (a4e4 <sys_heap_free+0x7c>)
    a492:	4815      	ldr	r0, [pc, #84]	; (a4e8 <sys_heap_free+0x80>)
    a494:	229a      	movs	r2, #154	; 0x9a
    a496:	f00f faaa 	bl	199ee <printk>
    a49a:	219a      	movs	r1, #154	; 0x9a
    a49c:	4811      	ldr	r0, [pc, #68]	; (a4e4 <sys_heap_free+0x7c>)
    a49e:	f00f fd4c 	bl	19f3a <assert_post_action>
	return c + chunk_size(h, c);
    a4a2:	4621      	mov	r1, r4
    a4a4:	4628      	mov	r0, r5
    a4a6:	f00f fb30 	bl	19b0a <chunk_size>
    a4aa:	1826      	adds	r6, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
    a4ac:	4631      	mov	r1, r6
    a4ae:	2200      	movs	r2, #0
    a4b0:	4628      	mov	r0, r5
    a4b2:	f00f fb14 	bl	19ade <chunk_field>
    a4b6:	1a36      	subs	r6, r6, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
    a4b8:	42b4      	cmp	r4, r6
    a4ba:	d008      	beq.n	a4ce <sys_heap_free+0x66>
    a4bc:	4909      	ldr	r1, [pc, #36]	; (a4e4 <sys_heap_free+0x7c>)
    a4be:	480a      	ldr	r0, [pc, #40]	; (a4e8 <sys_heap_free+0x80>)
    a4c0:	22a2      	movs	r2, #162	; 0xa2
    a4c2:	f00f fa94 	bl	199ee <printk>
    a4c6:	21a2      	movs	r1, #162	; 0xa2
    a4c8:	4806      	ldr	r0, [pc, #24]	; (a4e4 <sys_heap_free+0x7c>)
    a4ca:	f00f fd36 	bl	19f3a <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
    a4ce:	4621      	mov	r1, r4
    a4d0:	4628      	mov	r0, r5
    a4d2:	2200      	movs	r2, #0
    a4d4:	f00f fb1f 	bl	19b16 <set_chunk_used>
	free_chunk(h, c);
    a4d8:	4621      	mov	r1, r4
}
    a4da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
    a4de:	f00f bc5c 	b.w	19d9a <free_chunk>
}
    a4e2:	bd70      	pop	{r4, r5, r6, pc}
    a4e4:	0001eb5a 	.word	0x0001eb5a
    a4e8:	0001ead7 	.word	0x0001ead7

0000a4ec <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    a4ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    a4f0:	f101 39ff 	add.w	r9, r1, #4294967295
    a4f4:	ea19 0f01 	tst.w	r9, r1
{
    a4f8:	4680      	mov	r8, r0
    a4fa:	460f      	mov	r7, r1
    a4fc:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    a4fe:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
    a500:	d008      	beq.n	a514 <sys_heap_aligned_alloc+0x28>
    a502:	4931      	ldr	r1, [pc, #196]	; (a5c8 <sys_heap_aligned_alloc+0xdc>)
    a504:	4831      	ldr	r0, [pc, #196]	; (a5cc <sys_heap_aligned_alloc+0xe0>)
    a506:	22fc      	movs	r2, #252	; 0xfc
    a508:	f00f fa71 	bl	199ee <printk>
    a50c:	21fc      	movs	r1, #252	; 0xfc
    a50e:	482e      	ldr	r0, [pc, #184]	; (a5c8 <sys_heap_aligned_alloc+0xdc>)
    a510:	f00f fd13 	bl	19f3a <assert_post_action>
	return big_heap_chunks(h->len);
    a514:	68a8      	ldr	r0, [r5, #8]
	return big_heap(h) ? 8 : 4;
    a516:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    a51a:	bf2c      	ite	cs
    a51c:	2308      	movcs	r3, #8
    a51e:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
    a520:	429f      	cmp	r7, r3
    a522:	d805      	bhi.n	a530 <sys_heap_aligned_alloc+0x44>
		return sys_heap_alloc(heap, bytes);
    a524:	4621      	mov	r1, r4
    a526:	4640      	mov	r0, r8
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    a528:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return sys_heap_alloc(heap, bytes);
    a52c:	f00f bc77 	b.w	19e1e <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
    a530:	b91c      	cbnz	r4, a53a <sys_heap_aligned_alloc+0x4e>
		return NULL;
    a532:	2600      	movs	r6, #0
}
    a534:	4630      	mov	r0, r6
    a536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
    a53a:	ebb0 0fd4 	cmp.w	r0, r4, lsr #3
    a53e:	d9f8      	bls.n	a532 <sys_heap_aligned_alloc+0x46>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
    a540:	1939      	adds	r1, r7, r4
    a542:	1ac9      	subs	r1, r1, r3
    a544:	f00f fb03 	bl	19b4e <bytes_to_chunksz.isra.0>
    a548:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    a54a:	4628      	mov	r0, r5
    a54c:	f00f fb5a 	bl	19c04 <alloc_chunk>
	if (c0 == 0) {
    a550:	4680      	mov	r8, r0
    a552:	2800      	cmp	r0, #0
    a554:	d0ed      	beq.n	a532 <sys_heap_aligned_alloc+0x46>
    a556:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    a558:	427f      	negs	r7, r7
    a55a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a55e:	bf2c      	ite	cs
    a560:	2308      	movcs	r3, #8
    a562:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    a564:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
    a568:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
    a56a:	444e      	add	r6, r9
    a56c:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a56e:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a570:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a572:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a574:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a576:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    a57a:	1b64      	subs	r4, r4, r5
	if (c > c0) {
    a57c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a580:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    a584:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    a588:	d208      	bcs.n	a59c <sys_heap_aligned_alloc+0xb0>
		split_chunks(h, c0, c);
    a58a:	4601      	mov	r1, r0
    a58c:	463a      	mov	r2, r7
    a58e:	4628      	mov	r0, r5
    a590:	f00f fb7b 	bl	19c8a <split_chunks>
		free_list_add(h, c0);
    a594:	4641      	mov	r1, r8
    a596:	4628      	mov	r0, r5
    a598:	f00f fbbc 	bl	19d14 <free_list_add>
	return c + chunk_size(h, c);
    a59c:	4639      	mov	r1, r7
    a59e:	4628      	mov	r0, r5
    a5a0:	f00f fab3 	bl	19b0a <chunk_size>
    a5a4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    a5a6:	4284      	cmp	r4, r0
    a5a8:	d208      	bcs.n	a5bc <sys_heap_aligned_alloc+0xd0>
		split_chunks(h, c, c_end);
    a5aa:	4639      	mov	r1, r7
    a5ac:	4628      	mov	r0, r5
    a5ae:	4622      	mov	r2, r4
    a5b0:	f00f fb6b 	bl	19c8a <split_chunks>
		free_list_add(h, c_end);
    a5b4:	4621      	mov	r1, r4
    a5b6:	4628      	mov	r0, r5
    a5b8:	f00f fbac 	bl	19d14 <free_list_add>
	set_chunk_used(h, c, true);
    a5bc:	2201      	movs	r2, #1
    a5be:	4639      	mov	r1, r7
    a5c0:	4628      	mov	r0, r5
    a5c2:	f00f faa8 	bl	19b16 <set_chunk_used>
	return mem;
    a5c6:	e7b5      	b.n	a534 <sys_heap_aligned_alloc+0x48>
    a5c8:	0001eb5a 	.word	0x0001eb5a
    a5cc:	0001ead7 	.word	0x0001ead7

0000a5d0 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
    a5d0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5d6:	4607      	mov	r7, r0
    a5d8:	460c      	mov	r4, r1
    a5da:	4616      	mov	r6, r2
    a5dc:	d20e      	bcs.n	a5fc <sys_heap_init+0x2c>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    a5de:	2a04      	cmp	r2, #4
    a5e0:	d80a      	bhi.n	a5f8 <sys_heap_init+0x28>
    a5e2:	493d      	ldr	r1, [pc, #244]	; (a6d8 <sys_heap_init+0x108>)
    a5e4:	483d      	ldr	r0, [pc, #244]	; (a6dc <sys_heap_init+0x10c>)
    a5e6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    a5ea:	f00f fa00 	bl	199ee <printk>
    a5ee:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    a5f2:	4839      	ldr	r0, [pc, #228]	; (a6d8 <sys_heap_init+0x108>)
    a5f4:	f00f fca1 	bl	19f3a <assert_post_action>
    a5f8:	2204      	movs	r2, #4
    a5fa:	e000      	b.n	a5fe <sys_heap_init+0x2e>
    a5fc:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
    a5fe:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a600:	1de5      	adds	r5, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a602:	4434      	add	r4, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a604:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a608:	f024 0407 	bic.w	r4, r4, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    a60c:	1b64      	subs	r4, r4, r5

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    a60e:	2c17      	cmp	r4, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    a610:	ea4f 06d4 	mov.w	r6, r4, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    a614:	d80a      	bhi.n	a62c <sys_heap_init+0x5c>
    a616:	4930      	ldr	r1, [pc, #192]	; (a6d8 <sys_heap_init+0x108>)
    a618:	4830      	ldr	r0, [pc, #192]	; (a6dc <sys_heap_init+0x10c>)
    a61a:	f240 1275 	movw	r2, #373	; 0x175
    a61e:	f00f f9e6 	bl	199ee <printk>
    a622:	f240 1175 	movw	r1, #373	; 0x175
    a626:	482c      	ldr	r0, [pc, #176]	; (a6d8 <sys_heap_init+0x108>)
    a628:	f00f fc87 	bl	19f3a <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    a62c:	2300      	movs	r3, #0
    a62e:	2200      	movs	r2, #0
	heap->heap = h;
    a630:	603d      	str	r5, [r7, #0]
	h->chunk0_hdr_area = 0;
    a632:	e9c5 2300 	strd	r2, r3, [r5]
	h->len = buf_sz;
	h->avail_buckets = 0;
    a636:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a638:	4631      	mov	r1, r6
    a63a:	4630      	mov	r0, r6
	h->len = buf_sz;
    a63c:	60ae      	str	r6, [r5, #8]
	h->avail_buckets = 0;
    a63e:	60eb      	str	r3, [r5, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a640:	f00f fa8e 	bl	19b60 <bucket_idx.isra.0>
    a644:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    a646:	0084      	lsls	r4, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    a648:	1c47      	adds	r7, r0, #1
}

static inline size_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a64a:	4630      	mov	r0, r6
    a64c:	f00f fa7f 	bl	19b4e <bytes_to_chunksz.isra.0>
    a650:	341b      	adds	r4, #27
    a652:	08e4      	lsrs	r4, r4, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
    a654:	4420      	add	r0, r4
    a656:	42b0      	cmp	r0, r6
    a658:	d30a      	bcc.n	a670 <sys_heap_init+0xa0>
    a65a:	491f      	ldr	r1, [pc, #124]	; (a6d8 <sys_heap_init+0x108>)
    a65c:	481f      	ldr	r0, [pc, #124]	; (a6dc <sys_heap_init+0x10c>)
    a65e:	f240 1281 	movw	r2, #385	; 0x181
    a662:	f00f f9c4 	bl	199ee <printk>
    a666:	f240 1181 	movw	r1, #385	; 0x181
    a66a:	481b      	ldr	r0, [pc, #108]	; (a6d8 <sys_heap_init+0x108>)
    a66c:	f00f fc65 	bl	19f3a <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
    a670:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    a672:	4619      	mov	r1, r3
    a674:	f105 0210 	add.w	r2, r5, #16
	for (int i = 0; i < nb_buckets; i++) {
    a678:	42bb      	cmp	r3, r7
    a67a:	db28      	blt.n	a6ce <sys_heap_init+0xfe>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    a67c:	4622      	mov	r2, r4
    a67e:	4628      	mov	r0, r5
    a680:	2100      	movs	r1, #0
    a682:	f00f fa60 	bl	19b46 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    a686:	1b37      	subs	r7, r6, r4
	set_chunk_used(h, 0, true);
    a688:	4628      	mov	r0, r5
    a68a:	2201      	movs	r2, #1
    a68c:	2100      	movs	r1, #0
    a68e:	f00f fa42 	bl	19b16 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    a692:	463a      	mov	r2, r7
    a694:	4621      	mov	r1, r4
    a696:	f00f fa56 	bl	19b46 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    a69a:	4623      	mov	r3, r4
    a69c:	2200      	movs	r2, #0
    a69e:	4621      	mov	r1, r4
    a6a0:	4628      	mov	r0, r5
    a6a2:	f00f fa27 	bl	19af4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    a6a6:	4631      	mov	r1, r6
    a6a8:	4628      	mov	r0, r5
    a6aa:	f00f fa4c 	bl	19b46 <set_chunk_size>
    a6ae:	463b      	mov	r3, r7
    a6b0:	4631      	mov	r1, r6
    a6b2:	4628      	mov	r0, r5
    a6b4:	2200      	movs	r2, #0
    a6b6:	f00f fa1d 	bl	19af4 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    a6ba:	4631      	mov	r1, r6
    a6bc:	4628      	mov	r0, r5
    a6be:	2201      	movs	r2, #1
    a6c0:	f00f fa29 	bl	19b16 <set_chunk_used>

	free_list_add(h, chunk0_size);
    a6c4:	4621      	mov	r1, r4
}
    a6c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    a6ca:	f00f bb23 	b.w	19d14 <free_list_add>
		h->buckets[i].next = 0;
    a6ce:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    a6d2:	3301      	adds	r3, #1
    a6d4:	e7d0      	b.n	a678 <sys_heap_init+0xa8>
    a6d6:	bf00      	nop
    a6d8:	0001eb5a 	.word	0x0001eb5a
    a6dc:	0001ead7 	.word	0x0001ead7

0000a6e0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6e4:	468b      	mov	fp, r1
    a6e6:	4692      	mov	sl, r2
    a6e8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    a6ea:	2500      	movs	r5, #0
{
    a6ec:	b091      	sub	sp, #68	; 0x44
    a6ee:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    a6f0:	f89a 0000 	ldrb.w	r0, [sl]
    a6f4:	b908      	cbnz	r0, a6fa <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    a6f6:	4628      	mov	r0, r5
    a6f8:	e35f      	b.n	adba <cbvprintf+0x6da>
		if (*fp != '%') {
    a6fa:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    a6fc:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    a700:	d007      	beq.n	a712 <cbvprintf+0x32>
			OUTC('%');
    a702:	4659      	mov	r1, fp
    a704:	9b02      	ldr	r3, [sp, #8]
    a706:	4798      	blx	r3
    a708:	2800      	cmp	r0, #0
    a70a:	f2c0 8356 	blt.w	adba <cbvprintf+0x6da>
    a70e:	3501      	adds	r5, #1
			break;
    a710:	e212      	b.n	ab38 <cbvprintf+0x458>
		} state = {
    a712:	2218      	movs	r2, #24
    a714:	2100      	movs	r1, #0
    a716:	a80a      	add	r0, sp, #40	; 0x28
    a718:	f010 fbd4 	bl	1aec4 <memset>
	if (*sp == '%') {
    a71c:	f89a 3001 	ldrb.w	r3, [sl, #1]
    a720:	2b25      	cmp	r3, #37	; 0x25
    a722:	d078      	beq.n	a816 <cbvprintf+0x136>
    a724:	2200      	movs	r2, #0
    a726:	4694      	mov	ip, r2
    a728:	4696      	mov	lr, r2
    a72a:	4616      	mov	r6, r2
    a72c:	4610      	mov	r0, r2
    a72e:	4639      	mov	r1, r7
		switch (*sp) {
    a730:	f817 3b01 	ldrb.w	r3, [r7], #1
    a734:	2b2b      	cmp	r3, #43	; 0x2b
    a736:	f000 809d 	beq.w	a874 <cbvprintf+0x194>
    a73a:	f200 8094 	bhi.w	a866 <cbvprintf+0x186>
    a73e:	2b20      	cmp	r3, #32
    a740:	f000 809a 	beq.w	a878 <cbvprintf+0x198>
    a744:	2b23      	cmp	r3, #35	; 0x23
    a746:	f000 809a 	beq.w	a87e <cbvprintf+0x19e>
    a74a:	b128      	cbz	r0, a758 <cbvprintf+0x78>
    a74c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a750:	f040 0004 	orr.w	r0, r0, #4
    a754:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a758:	b12e      	cbz	r6, a766 <cbvprintf+0x86>
    a75a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a75e:	f040 0008 	orr.w	r0, r0, #8
    a762:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a766:	f1be 0f00 	cmp.w	lr, #0
    a76a:	d005      	beq.n	a778 <cbvprintf+0x98>
    a76c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a770:	f040 0010 	orr.w	r0, r0, #16
    a774:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a778:	f1bc 0f00 	cmp.w	ip, #0
    a77c:	d005      	beq.n	a78a <cbvprintf+0xaa>
    a77e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    a782:	f040 0020 	orr.w	r0, r0, #32
    a786:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    a78a:	b12a      	cbz	r2, a798 <cbvprintf+0xb8>
    a78c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    a790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    a794:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    a798:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    a79c:	f002 0044 	and.w	r0, r2, #68	; 0x44
    a7a0:	2844      	cmp	r0, #68	; 0x44
    a7a2:	d103      	bne.n	a7ac <cbvprintf+0xcc>
		conv->flag_zero = false;
    a7a4:	f36f 1286 	bfc	r2, #6, #1
    a7a8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    a7ac:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    a7b0:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    a7b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    a7b6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    a7ba:	d17b      	bne.n	a8b4 <cbvprintf+0x1d4>
		conv->width_star = true;
    a7bc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
    a7c0:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    a7c2:	f042 0201 	orr.w	r2, r2, #1
    a7c6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    a7ca:	781a      	ldrb	r2, [r3, #0]
    a7cc:	2a2e      	cmp	r2, #46	; 0x2e
    a7ce:	bf0c      	ite	eq
    a7d0:	2101      	moveq	r1, #1
    a7d2:	2100      	movne	r1, #0
    a7d4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    a7d8:	f361 0241 	bfi	r2, r1, #1, #1
    a7dc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    a7e0:	d174      	bne.n	a8cc <cbvprintf+0x1ec>
	if (*sp == '*') {
    a7e2:	785a      	ldrb	r2, [r3, #1]
    a7e4:	2a2a      	cmp	r2, #42	; 0x2a
    a7e6:	d06a      	beq.n	a8be <cbvprintf+0x1de>
	size_t val = 0;
    a7e8:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    a7ea:	260a      	movs	r6, #10
	++sp;
    a7ec:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    a7ee:	4618      	mov	r0, r3
    a7f0:	f810 2b01 	ldrb.w	r2, [r0], #1
    a7f4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a7f8:	2f09      	cmp	r7, #9
    a7fa:	f240 808e 	bls.w	a91a <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    a7fe:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    a802:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    a804:	f3c2 0040 	ubfx	r0, r2, #1, #1
    a808:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    a80c:	f361 0241 	bfi	r2, r1, #1, #1
    a810:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    a814:	e05a      	b.n	a8cc <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    a816:	f10a 0702 	add.w	r7, sl, #2
    a81a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    a81e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a822:	07d9      	lsls	r1, r3, #31
    a824:	f140 8149 	bpl.w	aaba <cbvprintf+0x3da>
			width = va_arg(ap, int);
    a828:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    a82c:	f1b9 0f00 	cmp.w	r9, #0
    a830:	da07      	bge.n	a842 <cbvprintf+0x162>
				conv->flag_dash = true;
    a832:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
    a836:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
    a83a:	f042 0204 	orr.w	r2, r2, #4
    a83e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
    a842:	075a      	lsls	r2, r3, #29
    a844:	f140 8142 	bpl.w	aacc <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    a848:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    a84c:	f1b8 0f00 	cmp.w	r8, #0
    a850:	f280 8141 	bge.w	aad6 <cbvprintf+0x3f6>
				conv->prec_present = false;
    a854:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a858:	f36f 0341 	bfc	r3, #1, #1
    a85c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    a860:	f04f 38ff 	mov.w	r8, #4294967295
    a864:	e137      	b.n	aad6 <cbvprintf+0x3f6>
		switch (*sp) {
    a866:	2b2d      	cmp	r3, #45	; 0x2d
    a868:	d00c      	beq.n	a884 <cbvprintf+0x1a4>
    a86a:	2b30      	cmp	r3, #48	; 0x30
    a86c:	f47f af6d 	bne.w	a74a <cbvprintf+0x6a>
			conv->flag_zero = true;
    a870:	2201      	movs	r2, #1
	} while (loop);
    a872:	e75c      	b.n	a72e <cbvprintf+0x4e>
			conv->flag_plus = true;
    a874:	2601      	movs	r6, #1
    a876:	e75a      	b.n	a72e <cbvprintf+0x4e>
			conv->flag_space = true;
    a878:	f04f 0e01 	mov.w	lr, #1
    a87c:	e757      	b.n	a72e <cbvprintf+0x4e>
			conv->flag_hash = true;
    a87e:	f04f 0c01 	mov.w	ip, #1
    a882:	e754      	b.n	a72e <cbvprintf+0x4e>
		switch (*sp) {
    a884:	2001      	movs	r0, #1
    a886:	e752      	b.n	a72e <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    a888:	4633      	mov	r3, r6
    a88a:	fb0c 0202 	mla	r2, ip, r2, r0
    a88e:	3a30      	subs	r2, #48	; 0x30
    a890:	461e      	mov	r6, r3
    a892:	f816 0b01 	ldrb.w	r0, [r6], #1
    a896:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    a89a:	2f09      	cmp	r7, #9
    a89c:	d9f4      	bls.n	a888 <cbvprintf+0x1a8>
	if (sp != wp) {
    a89e:	4299      	cmp	r1, r3
    a8a0:	d093      	beq.n	a7ca <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    a8a2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    a8a6:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    a8a8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    a8aa:	f362 0141 	bfi	r1, r2, #1, #1
    a8ae:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    a8b2:	e78a      	b.n	a7ca <cbvprintf+0xea>
    a8b4:	460b      	mov	r3, r1
	size_t val = 0;
    a8b6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    a8b8:	f04f 0c0a 	mov.w	ip, #10
    a8bc:	e7e8      	b.n	a890 <cbvprintf+0x1b0>
		conv->prec_star = true;
    a8be:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    a8c2:	3302      	adds	r3, #2
		conv->prec_star = true;
    a8c4:	f042 0204 	orr.w	r2, r2, #4
    a8c8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
    a8cc:	461f      	mov	r7, r3
    a8ce:	f817 2b01 	ldrb.w	r2, [r7], #1
    a8d2:	2a6c      	cmp	r2, #108	; 0x6c
    a8d4:	d041      	beq.n	a95a <cbvprintf+0x27a>
    a8d6:	d825      	bhi.n	a924 <cbvprintf+0x244>
    a8d8:	2a68      	cmp	r2, #104	; 0x68
    a8da:	d02b      	beq.n	a934 <cbvprintf+0x254>
    a8dc:	2a6a      	cmp	r2, #106	; 0x6a
    a8de:	d046      	beq.n	a96e <cbvprintf+0x28e>
    a8e0:	2a4c      	cmp	r2, #76	; 0x4c
    a8e2:	d04c      	beq.n	a97e <cbvprintf+0x29e>
    a8e4:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    a8e6:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    a8ea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
    a8ee:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    a8f0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    a8f4:	f200 80d9 	bhi.w	aaaa <cbvprintf+0x3ca>
    a8f8:	2a57      	cmp	r2, #87	; 0x57
    a8fa:	d84d      	bhi.n	a998 <cbvprintf+0x2b8>
    a8fc:	2a41      	cmp	r2, #65	; 0x41
    a8fe:	d003      	beq.n	a908 <cbvprintf+0x228>
    a900:	3a45      	subs	r2, #69	; 0x45
    a902:	2a02      	cmp	r2, #2
    a904:	f200 80d1 	bhi.w	aaaa <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    a908:	2204      	movs	r2, #4
    a90a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    a90e:	f362 0302 	bfi	r3, r2, #0, #3
    a912:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    a916:	2301      	movs	r3, #1
			break;
    a918:	e09e      	b.n	aa58 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    a91a:	fb06 2101 	mla	r1, r6, r1, r2
    a91e:	4603      	mov	r3, r0
    a920:	3930      	subs	r1, #48	; 0x30
    a922:	e764      	b.n	a7ee <cbvprintf+0x10e>
	switch (*sp) {
    a924:	2a74      	cmp	r2, #116	; 0x74
    a926:	d026      	beq.n	a976 <cbvprintf+0x296>
    a928:	2a7a      	cmp	r2, #122	; 0x7a
    a92a:	d1db      	bne.n	a8e4 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    a92c:	2206      	movs	r2, #6
    a92e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a932:	e00d      	b.n	a950 <cbvprintf+0x270>
		if (*++sp == 'h') {
    a934:	785a      	ldrb	r2, [r3, #1]
    a936:	2a68      	cmp	r2, #104	; 0x68
    a938:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    a93c:	d106      	bne.n	a94c <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    a93e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    a940:	f361 02c6 	bfi	r2, r1, #3, #4
    a944:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    a948:	1c9f      	adds	r7, r3, #2
    a94a:	e7cc      	b.n	a8e6 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    a94c:	4613      	mov	r3, r2
    a94e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    a950:	f362 03c6 	bfi	r3, r2, #3, #4
    a954:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    a958:	e7c5      	b.n	a8e6 <cbvprintf+0x206>
		if (*++sp == 'l') {
    a95a:	785a      	ldrb	r2, [r3, #1]
    a95c:	2a6c      	cmp	r2, #108	; 0x6c
    a95e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    a962:	d101      	bne.n	a968 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    a964:	2104      	movs	r1, #4
    a966:	e7eb      	b.n	a940 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    a968:	4613      	mov	r3, r2
    a96a:	2203      	movs	r2, #3
    a96c:	e7f0      	b.n	a950 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    a96e:	2205      	movs	r2, #5
    a970:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a974:	e7ec      	b.n	a950 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    a976:	2207      	movs	r2, #7
    a978:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    a97c:	e7e8      	b.n	a950 <cbvprintf+0x270>
		conv->unsupported = true;
    a97e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    a982:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    a986:	f023 0302 	bic.w	r3, r3, #2
    a98a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    a98e:	f043 0302 	orr.w	r3, r3, #2
    a992:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    a996:	e7a6      	b.n	a8e6 <cbvprintf+0x206>
    a998:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    a99c:	2920      	cmp	r1, #32
    a99e:	f200 8084 	bhi.w	aaaa <cbvprintf+0x3ca>
    a9a2:	a001      	add	r0, pc, #4	; (adr r0, a9a8 <cbvprintf+0x2c8>)
    a9a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    a9a8:	0000aa6d 	.word	0x0000aa6d
    a9ac:	0000aaab 	.word	0x0000aaab
    a9b0:	0000aaab 	.word	0x0000aaab
    a9b4:	0000aaab 	.word	0x0000aaab
    a9b8:	0000aaab 	.word	0x0000aaab
    a9bc:	0000aaab 	.word	0x0000aaab
    a9c0:	0000aaab 	.word	0x0000aaab
    a9c4:	0000aaab 	.word	0x0000aaab
    a9c8:	0000aaab 	.word	0x0000aaab
    a9cc:	0000a909 	.word	0x0000a909
    a9d0:	0000aaab 	.word	0x0000aaab
    a9d4:	0000aa6d 	.word	0x0000aa6d
    a9d8:	0000aa2d 	.word	0x0000aa2d
    a9dc:	0000a909 	.word	0x0000a909
    a9e0:	0000a909 	.word	0x0000a909
    a9e4:	0000a909 	.word	0x0000a909
    a9e8:	0000aaab 	.word	0x0000aaab
    a9ec:	0000aa2d 	.word	0x0000aa2d
    a9f0:	0000aaab 	.word	0x0000aaab
    a9f4:	0000aaab 	.word	0x0000aaab
    a9f8:	0000aaab 	.word	0x0000aaab
    a9fc:	0000aaab 	.word	0x0000aaab
    aa00:	0000aa75 	.word	0x0000aa75
    aa04:	0000aa6d 	.word	0x0000aa6d
    aa08:	0000aa91 	.word	0x0000aa91
    aa0c:	0000aaab 	.word	0x0000aaab
    aa10:	0000aaab 	.word	0x0000aaab
    aa14:	0000aa91 	.word	0x0000aa91
    aa18:	0000aaab 	.word	0x0000aaab
    aa1c:	0000aa6d 	.word	0x0000aa6d
    aa20:	0000aaab 	.word	0x0000aaab
    aa24:	0000aaab 	.word	0x0000aaab
    aa28:	0000aa6d 	.word	0x0000aa6d
		conv->specifier_cat = SPECIFIER_SINT;
    aa2c:	2001      	movs	r0, #1
    aa2e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    aa32:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    aa36:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    aa3a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    aa3c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    aa40:	bf02      	ittt	eq
    aa42:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    aa46:	f041 0101 	orreq.w	r1, r1, #1
    aa4a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    aa4e:	2a63      	cmp	r2, #99	; 0x63
    aa50:	d131      	bne.n	aab6 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    aa52:	3b00      	subs	r3, #0
    aa54:	bf18      	it	ne
    aa56:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    aa58:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    aa5c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    aa60:	430b      	orrs	r3, r1
    aa62:	f363 0241 	bfi	r2, r3, #1, #1
    aa66:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    aa6a:	e6d8      	b.n	a81e <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    aa6c:	2002      	movs	r0, #2
    aa6e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    aa72:	e7de      	b.n	aa32 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    aa74:	2103      	movs	r1, #3
    aa76:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    aa7a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    aa7e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    aa82:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    aa86:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    aa88:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    aa8c:	4143      	adcs	r3, r0
    aa8e:	e7e3      	b.n	aa58 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    aa90:	2103      	movs	r1, #3
    aa92:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    aa96:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    aa9a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    aa9e:	bf14      	ite	ne
    aaa0:	2301      	movne	r3, #1
    aaa2:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
    aaa4:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    aaa8:	e7d6      	b.n	aa58 <cbvprintf+0x378>
		conv->invalid = true;
    aaaa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    aaae:	f043 0301 	orr.w	r3, r3, #1
    aab2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    aab6:	2300      	movs	r3, #0
    aab8:	e7ce      	b.n	aa58 <cbvprintf+0x378>
		} else if (conv->width_present) {
    aaba:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    aabe:	2a00      	cmp	r2, #0
		int width = -1;
    aac0:	bfac      	ite	ge
    aac2:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
    aac6:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
    aaca:	e6ba      	b.n	a842 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    aacc:	079b      	lsls	r3, r3, #30
    aace:	f57f aec7 	bpl.w	a860 <cbvprintf+0x180>
			precision = conv->prec_value;
    aad2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
    aad6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    aad8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    aadc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
    aae0:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
    aae4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    aae8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    aaea:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    aaee:	d138      	bne.n	ab62 <cbvprintf+0x482>
			switch (length_mod) {
    aaf0:	1ecb      	subs	r3, r1, #3
    aaf2:	2b04      	cmp	r3, #4
    aaf4:	d822      	bhi.n	ab3c <cbvprintf+0x45c>
    aaf6:	e8df f003 	tbb	[pc, r3]
    aafa:	0903      	.short	0x0903
    aafc:	2109      	.short	0x2109
    aafe:	21          	.byte	0x21
    aaff:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    ab00:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    ab04:	17da      	asrs	r2, r3, #31
    ab06:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    ab0a:	e006      	b.n	ab1a <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    ab0c:	3407      	adds	r4, #7
    ab0e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    ab12:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    ab16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    ab1a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    ab1e:	f013 0603 	ands.w	r6, r3, #3
    ab22:	d056      	beq.n	abd2 <cbvprintf+0x4f2>
			OUTS(sp, fp);
    ab24:	463b      	mov	r3, r7
    ab26:	4652      	mov	r2, sl
    ab28:	4659      	mov	r1, fp
    ab2a:	9802      	ldr	r0, [sp, #8]
    ab2c:	f00f f9ef 	bl	19f0e <outs>
    ab30:	2800      	cmp	r0, #0
    ab32:	f2c0 8142 	blt.w	adba <cbvprintf+0x6da>
    ab36:	4405      	add	r5, r0
			continue;
    ab38:	46ba      	mov	sl, r7
    ab3a:	e5d9      	b.n	a6f0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ab3c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    ab40:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    ab42:	ea4f 72e3 	mov.w	r2, r3, asr #31
    ab46:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    ab4a:	d105      	bne.n	ab58 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    ab4c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    ab50:	930a      	str	r3, [sp, #40]	; 0x28
    ab52:	2300      	movs	r3, #0
    ab54:	930b      	str	r3, [sp, #44]	; 0x2c
    ab56:	e7e0      	b.n	ab1a <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    ab58:	2902      	cmp	r1, #2
    ab5a:	d1de      	bne.n	ab1a <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    ab5c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    ab60:	e7d0      	b.n	ab04 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    ab62:	2b02      	cmp	r3, #2
    ab64:	d123      	bne.n	abae <cbvprintf+0x4ce>
			switch (length_mod) {
    ab66:	1ecb      	subs	r3, r1, #3
    ab68:	2b04      	cmp	r3, #4
    ab6a:	d813      	bhi.n	ab94 <cbvprintf+0x4b4>
    ab6c:	e8df f003 	tbb	[pc, r3]
    ab70:	120a0a03 	.word	0x120a0a03
    ab74:	12          	.byte	0x12
    ab75:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
    ab76:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
    ab78:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
    ab7a:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    ab7c:	920a      	str	r2, [sp, #40]	; 0x28
    ab7e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    ab80:	4604      	mov	r4, r0
    ab82:	e7ca      	b.n	ab1a <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    ab84:	1de0      	adds	r0, r4, #7
    ab86:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    ab8a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    ab8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    ab92:	e7f5      	b.n	ab80 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    ab94:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    ab98:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    ab9a:	930a      	str	r3, [sp, #40]	; 0x28
    ab9c:	f04f 0300 	mov.w	r3, #0
    aba0:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    aba2:	d0d3      	beq.n	ab4c <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    aba4:	2902      	cmp	r1, #2
    aba6:	d1b8      	bne.n	ab1a <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    aba8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    abac:	e7d0      	b.n	ab50 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    abae:	2b04      	cmp	r3, #4
    abb0:	d109      	bne.n	abc6 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    abb2:	1de3      	adds	r3, r4, #7
    abb4:	f023 0307 	bic.w	r3, r3, #7
    abb8:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    abbc:	e9d3 2300 	ldrd	r2, r3, [r3]
    abc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    abc4:	e7a9      	b.n	ab1a <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    abc6:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    abc8:	bf04      	itt	eq
    abca:	f854 3b04 	ldreq.w	r3, [r4], #4
    abce:	930a      	streq	r3, [sp, #40]	; 0x28
    abd0:	e7a3      	b.n	ab1a <cbvprintf+0x43a>
		switch (conv->specifier) {
    abd2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    abd6:	2878      	cmp	r0, #120	; 0x78
    abd8:	d8ae      	bhi.n	ab38 <cbvprintf+0x458>
    abda:	2862      	cmp	r0, #98	; 0x62
    abdc:	d822      	bhi.n	ac24 <cbvprintf+0x544>
    abde:	2825      	cmp	r0, #37	; 0x25
    abe0:	f43f ad8f 	beq.w	a702 <cbvprintf+0x22>
    abe4:	2858      	cmp	r0, #88	; 0x58
    abe6:	d1a7      	bne.n	ab38 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    abe8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    abec:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    abf0:	9300      	str	r3, [sp, #0]
    abf2:	aa0c      	add	r2, sp, #48	; 0x30
    abf4:	ab04      	add	r3, sp, #16
    abf6:	f00f f944 	bl	19e82 <encode_uint>
    abfa:	4682      	mov	sl, r0
			if (precision >= 0) {
    abfc:	f1b8 0f00 	cmp.w	r8, #0
    ac00:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    ac04:	db0c      	blt.n	ac20 <cbvprintf+0x540>
				conv->flag_zero = false;
    ac06:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    ac0a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    ac0e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    ac12:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    ac14:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    ac18:	d902      	bls.n	ac20 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    ac1a:	eba8 0303 	sub.w	r3, r8, r3
    ac1e:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    ac20:	4680      	mov	r8, r0
    ac22:	e03d      	b.n	aca0 <cbvprintf+0x5c0>
    ac24:	3863      	subs	r0, #99	; 0x63
    ac26:	2815      	cmp	r0, #21
    ac28:	d886      	bhi.n	ab38 <cbvprintf+0x458>
    ac2a:	a201      	add	r2, pc, #4	; (adr r2, ac30 <cbvprintf+0x550>)
    ac2c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    ac30:	0000acb1 	.word	0x0000acb1
    ac34:	0000ad15 	.word	0x0000ad15
    ac38:	0000ab39 	.word	0x0000ab39
    ac3c:	0000ab39 	.word	0x0000ab39
    ac40:	0000ab39 	.word	0x0000ab39
    ac44:	0000ab39 	.word	0x0000ab39
    ac48:	0000ad15 	.word	0x0000ad15
    ac4c:	0000ab39 	.word	0x0000ab39
    ac50:	0000ab39 	.word	0x0000ab39
    ac54:	0000ab39 	.word	0x0000ab39
    ac58:	0000ab39 	.word	0x0000ab39
    ac5c:	0000ad6f 	.word	0x0000ad6f
    ac60:	0000ad3d 	.word	0x0000ad3d
    ac64:	0000ad41 	.word	0x0000ad41
    ac68:	0000ab39 	.word	0x0000ab39
    ac6c:	0000ab39 	.word	0x0000ab39
    ac70:	0000ac89 	.word	0x0000ac89
    ac74:	0000ab39 	.word	0x0000ab39
    ac78:	0000ad3d 	.word	0x0000ad3d
    ac7c:	0000ab39 	.word	0x0000ab39
    ac80:	0000ab39 	.word	0x0000ab39
    ac84:	0000ad3d 	.word	0x0000ad3d
			if (precision >= 0) {
    ac88:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    ac8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    ac90:	db0a      	blt.n	aca8 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    ac92:	4641      	mov	r1, r8
    ac94:	4650      	mov	r0, sl
    ac96:	f010 f8b3 	bl	1ae00 <strnlen>
		char sign = 0;
    ac9a:	2600      	movs	r6, #0
			bpe = bps + len;
    ac9c:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    aca0:	f1ba 0f00 	cmp.w	sl, #0
    aca4:	d10c      	bne.n	acc0 <cbvprintf+0x5e0>
    aca6:	e747      	b.n	ab38 <cbvprintf+0x458>
				len = strlen(bps);
    aca8:	4650      	mov	r0, sl
    acaa:	f010 f8a2 	bl	1adf2 <strlen>
    acae:	e7f4      	b.n	ac9a <cbvprintf+0x5ba>
			break;
    acb0:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    acb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
    acb4:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    acb8:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
    acbc:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    acc0:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    acc4:	b106      	cbz	r6, acc8 <cbvprintf+0x5e8>
			nj_len += 1U;
    acc6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    acc8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    accc:	06d0      	lsls	r0, r2, #27
    acce:	d568      	bpl.n	ada2 <cbvprintf+0x6c2>
			nj_len += 2U;
    acd0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    acd2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    acd4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    acd6:	bf48      	it	mi
    acd8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    acda:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    acdc:	bf48      	it	mi
    acde:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    ace0:	f1b9 0f00 	cmp.w	r9, #0
    ace4:	dd76      	ble.n	add4 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    ace6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    acea:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    acee:	f3c2 0380 	ubfx	r3, r2, #2, #1
    acf2:	9303      	str	r3, [sp, #12]
    acf4:	0753      	lsls	r3, r2, #29
    acf6:	d46d      	bmi.n	add4 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    acf8:	0650      	lsls	r0, r2, #25
    acfa:	d561      	bpl.n	adc0 <cbvprintf+0x6e0>
					if (sign != 0) {
    acfc:	b146      	cbz	r6, ad10 <cbvprintf+0x630>
						OUTC(sign);
    acfe:	4659      	mov	r1, fp
    ad00:	4630      	mov	r0, r6
    ad02:	9b02      	ldr	r3, [sp, #8]
    ad04:	4798      	blx	r3
    ad06:	2800      	cmp	r0, #0
    ad08:	db57      	blt.n	adba <cbvprintf+0x6da>
						sign = 0;
    ad0a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    ad0c:	3501      	adds	r5, #1
						sign = 0;
    ad0e:	461e      	mov	r6, r3
					pad = '0';
    ad10:	2330      	movs	r3, #48	; 0x30
    ad12:	e056      	b.n	adc2 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    ad14:	071e      	lsls	r6, r3, #28
    ad16:	d40f      	bmi.n	ad38 <cbvprintf+0x658>
				sign = ' ';
    ad18:	f013 0610 	ands.w	r6, r3, #16
    ad1c:	bf18      	it	ne
    ad1e:	2620      	movne	r6, #32
			if (value->sint < 0) {
    ad20:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    ad24:	2b00      	cmp	r3, #0
    ad26:	f6bf af5f 	bge.w	abe8 <cbvprintf+0x508>
				value->uint = (uint_value_type)-value->sint;
    ad2a:	4252      	negs	r2, r2
    ad2c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    ad30:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
    ad32:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    ad36:	e757      	b.n	abe8 <cbvprintf+0x508>
				sign = '+';
    ad38:	262b      	movs	r6, #43	; 0x2b
    ad3a:	e7f1      	b.n	ad20 <cbvprintf+0x640>
		switch (conv->specifier) {
    ad3c:	2600      	movs	r6, #0
    ad3e:	e753      	b.n	abe8 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    ad40:	980a      	ldr	r0, [sp, #40]	; 0x28
    ad42:	b340      	cbz	r0, ad96 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ad44:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    ad48:	9300      	str	r3, [sp, #0]
    ad4a:	2100      	movs	r1, #0
    ad4c:	ab04      	add	r3, sp, #16
    ad4e:	aa0c      	add	r2, sp, #48	; 0x30
    ad50:	f00f f897 	bl	19e82 <encode_uint>
				conv->altform_0c = true;
    ad54:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    ad58:	4682      	mov	sl, r0
				conv->altform_0c = true;
    ad5a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    ad5e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    ad62:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    ad66:	2600      	movs	r6, #0
				conv->altform_0c = true;
    ad68:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    ad6c:	e746      	b.n	abfc <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    ad6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    ad70:	2907      	cmp	r1, #7
    ad72:	f63f aee1 	bhi.w	ab38 <cbvprintf+0x458>
    ad76:	e8df f001 	tbb	[pc, r1]
    ad7a:	040c      	.short	0x040c
    ad7c:	08080c06 	.word	0x08080c06
    ad80:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    ad82:	701d      	strb	r5, [r3, #0]
		break;
    ad84:	e6d8      	b.n	ab38 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    ad86:	801d      	strh	r5, [r3, #0]
		break;
    ad88:	e6d6      	b.n	ab38 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    ad8a:	17ea      	asrs	r2, r5, #31
    ad8c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    ad90:	e6d2      	b.n	ab38 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    ad92:	601d      	str	r5, [r3, #0]
		break;
    ad94:	e6d0      	b.n	ab38 <cbvprintf+0x458>
			bps = "(nil)";
    ad96:	f8df a0c8 	ldr.w	sl, [pc, #200]	; ae60 <cbvprintf+0x780>
    ad9a:	4606      	mov	r6, r0
			bpe = bps + 5;
    ad9c:	f10a 0805 	add.w	r8, sl, #5
    ada0:	e78e      	b.n	acc0 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    ada2:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    ada4:	bf48      	it	mi
    ada6:	3301      	addmi	r3, #1
    ada8:	e793      	b.n	acd2 <cbvprintf+0x5f2>
					OUTC(pad);
    adaa:	4618      	mov	r0, r3
    adac:	9303      	str	r3, [sp, #12]
    adae:	4659      	mov	r1, fp
    adb0:	9b02      	ldr	r3, [sp, #8]
    adb2:	4798      	blx	r3
    adb4:	2800      	cmp	r0, #0
    adb6:	9b03      	ldr	r3, [sp, #12]
    adb8:	da04      	bge.n	adc4 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    adba:	b011      	add	sp, #68	; 0x44
    adbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    adc0:	2320      	movs	r3, #32
    adc2:	444d      	add	r5, r9
    adc4:	464a      	mov	r2, r9
				while (width-- > 0) {
    adc6:	2a00      	cmp	r2, #0
    adc8:	eba5 0109 	sub.w	r1, r5, r9
    adcc:	f109 39ff 	add.w	r9, r9, #4294967295
    add0:	dceb      	bgt.n	adaa <cbvprintf+0x6ca>
    add2:	460d      	mov	r5, r1
		if (sign != 0) {
    add4:	b136      	cbz	r6, ade4 <cbvprintf+0x704>
			OUTC(sign);
    add6:	4659      	mov	r1, fp
    add8:	4630      	mov	r0, r6
    adda:	9b02      	ldr	r3, [sp, #8]
    addc:	4798      	blx	r3
    adde:	2800      	cmp	r0, #0
    ade0:	dbeb      	blt.n	adba <cbvprintf+0x6da>
    ade2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    ade4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    ade8:	06d9      	lsls	r1, r3, #27
    adea:	d401      	bmi.n	adf0 <cbvprintf+0x710>
    adec:	071a      	lsls	r2, r3, #28
    adee:	d506      	bpl.n	adfe <cbvprintf+0x71e>
				OUTC('0');
    adf0:	4659      	mov	r1, fp
    adf2:	2030      	movs	r0, #48	; 0x30
    adf4:	9b02      	ldr	r3, [sp, #8]
    adf6:	4798      	blx	r3
    adf8:	2800      	cmp	r0, #0
    adfa:	dbde      	blt.n	adba <cbvprintf+0x6da>
    adfc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    adfe:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    ae02:	06db      	lsls	r3, r3, #27
    ae04:	d507      	bpl.n	ae16 <cbvprintf+0x736>
				OUTC(conv->specifier);
    ae06:	4659      	mov	r1, fp
    ae08:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ae0c:	9b02      	ldr	r3, [sp, #8]
    ae0e:	4798      	blx	r3
    ae10:	2800      	cmp	r0, #0
    ae12:	dbd2      	blt.n	adba <cbvprintf+0x6da>
    ae14:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    ae16:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    ae18:	442e      	add	r6, r5
    ae1a:	1b73      	subs	r3, r6, r5
    ae1c:	2b00      	cmp	r3, #0
    ae1e:	dc16      	bgt.n	ae4e <cbvprintf+0x76e>
			OUTS(bps, bpe);
    ae20:	4643      	mov	r3, r8
    ae22:	4652      	mov	r2, sl
    ae24:	4659      	mov	r1, fp
    ae26:	9802      	ldr	r0, [sp, #8]
    ae28:	f00f f871 	bl	19f0e <outs>
    ae2c:	2800      	cmp	r0, #0
    ae2e:	dbc4      	blt.n	adba <cbvprintf+0x6da>
    ae30:	4405      	add	r5, r0
		while (width > 0) {
    ae32:	44a9      	add	r9, r5
    ae34:	eba9 0305 	sub.w	r3, r9, r5
    ae38:	2b00      	cmp	r3, #0
    ae3a:	f77f ae7d 	ble.w	ab38 <cbvprintf+0x458>
			OUTC(' ');
    ae3e:	4659      	mov	r1, fp
    ae40:	2020      	movs	r0, #32
    ae42:	9b02      	ldr	r3, [sp, #8]
    ae44:	4798      	blx	r3
    ae46:	2800      	cmp	r0, #0
    ae48:	dbb7      	blt.n	adba <cbvprintf+0x6da>
    ae4a:	3501      	adds	r5, #1
			--width;
    ae4c:	e7f2      	b.n	ae34 <cbvprintf+0x754>
				OUTC('0');
    ae4e:	4659      	mov	r1, fp
    ae50:	2030      	movs	r0, #48	; 0x30
    ae52:	9b02      	ldr	r3, [sp, #8]
    ae54:	4798      	blx	r3
    ae56:	2800      	cmp	r0, #0
    ae58:	dbaf      	blt.n	adba <cbvprintf+0x6da>
    ae5a:	3501      	adds	r5, #1
    ae5c:	e7dd      	b.n	ae1a <cbvprintf+0x73a>
    ae5e:	bf00      	nop
    ae60:	0001eb7b 	.word	0x0001eb7b

0000ae64 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    ae64:	b148      	cbz	r0, ae7a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    ae66:	4b05      	ldr	r3, [pc, #20]	; (ae7c <arch_busy_wait+0x18>)
    ae68:	681a      	ldr	r2, [r3, #0]
    ae6a:	4b05      	ldr	r3, [pc, #20]	; (ae80 <arch_busy_wait+0x1c>)
    ae6c:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    ae70:	4b04      	ldr	r3, [pc, #16]	; (ae84 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
    ae72:	4350      	muls	r0, r2
    ae74:	f043 0301 	orr.w	r3, r3, #1
    ae78:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    ae7a:	4770      	bx	lr
    ae7c:	20008528 	.word	0x20008528
    ae80:	000f4240 	.word	0x000f4240
    ae84:	0001d8f0 	.word	0x0001d8f0

0000ae88 <virtio_set_status>:
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
    ae88:	4b01      	ldr	r3, [pc, #4]	; (ae90 <virtio_set_status+0x8>)
    ae8a:	7019      	strb	r1, [r3, #0]
}

static void virtio_set_status(struct virtio_device *vdev, unsigned char status)
{
	sys_write8(status, VDEV_STATUS_ADDR);
}
    ae8c:	4770      	bx	lr
    ae8e:	bf00      	nop
    ae90:	20070000 	.word	0x20070000

0000ae94 <init_status_flag>:
    ae94:	2000      	movs	r0, #0
    ae96:	4b01      	ldr	r3, [pc, #4]	; (ae9c <init_status_flag+0x8>)
    ae98:	7018      	strb	r0, [r3, #0]
int init_status_flag(const struct device *arg)
{
	virtio_set_status(NULL, 0);

	return 0;
}
    ae9a:	4770      	bx	lr
    ae9c:	20070000 	.word	0x20070000

0000aea0 <ipm_callback_process>:
	virtqueue_notification(vq[VIRTQUEUE_ID]);
    aea0:	4b01      	ldr	r3, [pc, #4]	; (aea8 <ipm_callback_process+0x8>)
    aea2:	6818      	ldr	r0, [r3, #0]
    aea4:	f011 bf5f 	b.w	1cd66 <virtqueue_notification>
    aea8:	2000a4a8 	.word	0x2000a4a8

0000aeac <virtio_notify>:
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    aeac:	4b0a      	ldr	r3, [pc, #40]	; (aed8 <virtio_notify+0x2c>)
{
    aeae:	b513      	push	{r0, r1, r4, lr}
	status = ipm_send(ipm_tx_handle, 0, 0, NULL, 0);
    aeb0:	6818      	ldr	r0, [r3, #0]
				  const void *data, int size)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->send(ipmdev, wait, id, data, size);
    aeb2:	2300      	movs	r3, #0
    aeb4:	6882      	ldr	r2, [r0, #8]
    aeb6:	9300      	str	r3, [sp, #0]
    aeb8:	6814      	ldr	r4, [r2, #0]
    aeba:	4619      	mov	r1, r3
    aebc:	461a      	mov	r2, r3
    aebe:	47a0      	blx	r4
	if (status != 0) {
    aec0:	4602      	mov	r2, r0
    aec2:	b130      	cbz	r0, aed2 <virtio_notify+0x26>
		LOG_ERR("ipm_send failed to notify: %d", status);
    aec4:	2145      	movs	r1, #69	; 0x45
    aec6:	4805      	ldr	r0, [pc, #20]	; (aedc <virtio_notify+0x30>)
}
    aec8:	b002      	add	sp, #8
    aeca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("ipm_send failed to notify: %d", status);
    aece:	f00e bd8e 	b.w	199ee <printk>
}
    aed2:	b002      	add	sp, #8
    aed4:	bd10      	pop	{r4, pc}
    aed6:	bf00      	nop
    aed8:	2000a498 	.word	0x2000a498
    aedc:	0001ebad 	.word	0x0001ebad

0000aee0 <ipm_callback>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    aee0:	4907      	ldr	r1, [pc, #28]	; (af00 <ipm_callback+0x20>)
    aee2:	e8d1 3fef 	ldaex	r3, [r1]
    aee6:	f043 0201 	orr.w	r2, r3, #1
    aeea:	e8c1 2fe0 	stlex	r0, r2, [r1]
    aeee:	2800      	cmp	r0, #0
    aef0:	d1f7      	bne.n	aee2 <ipm_callback+0x2>
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    aef2:	07db      	lsls	r3, r3, #31
    aef4:	d403      	bmi.n	aefe <ipm_callback+0x1e>
		k_queue_append(&work_q->queue, work);
    aef6:	4803      	ldr	r0, [pc, #12]	; (af04 <ipm_callback+0x24>)
    aef8:	3908      	subs	r1, #8
    aefa:	f012 b8f5 	b.w	1d0e8 <k_queue_append>
}
    aefe:	4770      	bx	lr
    af00:	2000a4a4 	.word	0x2000a4a4
    af04:	20008820 	.word	0x20008820

0000af08 <rpmsg_backend_init>:
{
    af08:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    af0a:	4b47      	ldr	r3, [pc, #284]	; (b028 <rpmsg_backend_init+0x120>)
{
    af0c:	b085      	sub	sp, #20
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    af0e:	ac02      	add	r4, sp, #8
{
    af10:	4606      	mov	r6, r0
    af12:	460d      	mov	r5, r1
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    af14:	e893 0003 	ldmia.w	r3, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    af18:	f44f 6200 	mov.w	r2, #2048	; 0x800
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
    af1c:	e884 0003 	stmia.w	r4, {r0, r1}
	k_work_q_start(&ipm_work_q, ipm_stack_area,
    af20:	f04f 33ff 	mov.w	r3, #4294967295
    af24:	4941      	ldr	r1, [pc, #260]	; (b02c <rpmsg_backend_init+0x124>)
    af26:	4842      	ldr	r0, [pc, #264]	; (b030 <rpmsg_backend_init+0x128>)
    af28:	f00d fdc8 	bl	18abc <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
    af2c:	4941      	ldr	r1, [pc, #260]	; (b034 <rpmsg_backend_init+0x12c>)
    af2e:	4842      	ldr	r0, [pc, #264]	; (b038 <rpmsg_backend_init+0x130>)
    af30:	f012 f94c 	bl	1d1cc <z_impl_k_thread_name_set>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    af34:	2200      	movs	r2, #0
    af36:	4b41      	ldr	r3, [pc, #260]	; (b03c <rpmsg_backend_init+0x134>)
    af38:	4941      	ldr	r1, [pc, #260]	; (b040 <rpmsg_backend_init+0x138>)
	err = metal_init(&metal_params);
    af3a:	4620      	mov	r0, r4
    af3c:	e9c3 1201 	strd	r1, r2, [r3, #4]
    af40:	601a      	str	r2, [r3, #0]
    af42:	f00b fa91 	bl	16468 <metal_init>
	if (err) {
    af46:	4604      	mov	r4, r0
    af48:	b138      	cbz	r0, af5a <rpmsg_backend_init+0x52>
		LOG_ERR("metal_init: failed - error code %d", err);
    af4a:	2145      	movs	r1, #69	; 0x45
    af4c:	4602      	mov	r2, r0
    af4e:	483d      	ldr	r0, [pc, #244]	; (b044 <rpmsg_backend_init+0x13c>)
		LOG_ERR("Couldn't register shared memory device: %d", err);
    af50:	f00e fd4d 	bl	199ee <printk>
}
    af54:	4620      	mov	r0, r4
    af56:	b005      	add	sp, #20
    af58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = metal_register_generic_device(&shm_device);
    af5a:	483b      	ldr	r0, [pc, #236]	; (b048 <rpmsg_backend_init+0x140>)
    af5c:	f00b fa64 	bl	16428 <metal_register_generic_device>
	if (err) {
    af60:	4604      	mov	r4, r0
    af62:	b118      	cbz	r0, af6c <rpmsg_backend_init+0x64>
		LOG_ERR("Couldn't register shared memory device: %d", err);
    af64:	4602      	mov	r2, r0
    af66:	2145      	movs	r1, #69	; 0x45
    af68:	4838      	ldr	r0, [pc, #224]	; (b04c <rpmsg_backend_init+0x144>)
    af6a:	e7f1      	b.n	af50 <rpmsg_backend_init+0x48>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
    af6c:	4938      	ldr	r1, [pc, #224]	; (b050 <rpmsg_backend_init+0x148>)
    af6e:	4839      	ldr	r0, [pc, #228]	; (b054 <rpmsg_backend_init+0x14c>)
    af70:	aa01      	add	r2, sp, #4
    af72:	f011 fc78 	bl	1c866 <metal_device_open>
	if (err) {
    af76:	4604      	mov	r4, r0
    af78:	b118      	cbz	r0, af82 <rpmsg_backend_init+0x7a>
		LOG_ERR("metal_device_open failed: %d", err);
    af7a:	4602      	mov	r2, r0
    af7c:	2145      	movs	r1, #69	; 0x45
    af7e:	4836      	ldr	r0, [pc, #216]	; (b058 <rpmsg_backend_init+0x150>)
    af80:	e7e6      	b.n	af50 <rpmsg_backend_init+0x48>
	*io = metal_device_io_region(device, 0);
    af82:	9b01      	ldr	r3, [sp, #4]
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
		? &device->regions[index]
		: NULL);
    af84:	689a      	ldr	r2, [r3, #8]
    af86:	b92a      	cbnz	r2, af94 <rpmsg_backend_init+0x8c>
    af88:	6030      	str	r0, [r6, #0]
		LOG_ERR("metal_device_io_region failed to get region");
    af8a:	2145      	movs	r1, #69	; 0x45
    af8c:	4833      	ldr	r0, [pc, #204]	; (b05c <rpmsg_backend_init+0x154>)
    af8e:	f00e fd2e 	bl	199ee <printk>
		return err;
    af92:	e7df      	b.n	af54 <rpmsg_backend_init+0x4c>
    af94:	330c      	adds	r3, #12
	*io = metal_device_io_region(device, 0);
    af96:	6033      	str	r3, [r6, #0]
	if (!*io) {
    af98:	2b00      	cmp	r3, #0
    af9a:	d0f6      	beq.n	af8a <rpmsg_backend_init+0x82>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    af9c:	4830      	ldr	r0, [pc, #192]	; (b060 <rpmsg_backend_init+0x158>)
    af9e:	f00b fd7b 	bl	16a98 <z_impl_device_get_binding>
	ipm_tx_handle = device_get_binding(CONFIG_RPMSG_SERVICE_IPM_TX_NAME);
    afa2:	4f30      	ldr	r7, [pc, #192]	; (b064 <rpmsg_backend_init+0x15c>)
    afa4:	6038      	str	r0, [r7, #0]
    afa6:	4830      	ldr	r0, [pc, #192]	; (b068 <rpmsg_backend_init+0x160>)
    afa8:	f00b fd76 	bl	16a98 <z_impl_device_get_binding>
	if (!ipm_tx_handle) {
    afac:	683a      	ldr	r2, [r7, #0]
    afae:	b932      	cbnz	r2, afbe <rpmsg_backend_init+0xb6>
		LOG_ERR("Could not get TX IPM device handle");
    afb0:	2145      	movs	r1, #69	; 0x45
    afb2:	482e      	ldr	r0, [pc, #184]	; (b06c <rpmsg_backend_init+0x164>)
		LOG_ERR("Could not get RX IPM device handle");
    afb4:	f00e fd1b 	bl	199ee <printk>
		return -ENODEV;
    afb8:	f06f 0412 	mvn.w	r4, #18
    afbc:	e7ca      	b.n	af54 <rpmsg_backend_init+0x4c>
	if (!ipm_rx_handle) {
    afbe:	b910      	cbnz	r0, afc6 <rpmsg_backend_init+0xbe>
		LOG_ERR("Could not get RX IPM device handle");
    afc0:	2145      	movs	r1, #69	; 0x45
    afc2:	482b      	ldr	r0, [pc, #172]	; (b070 <rpmsg_backend_init+0x168>)
    afc4:	e7f6      	b.n	afb4 <rpmsg_backend_init+0xac>
					 ipm_callback_t cb, void *user_data)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	api->register_callback(ipmdev, cb, user_data);
    afc6:	6883      	ldr	r3, [r0, #8]
    afc8:	4622      	mov	r2, r4
    afca:	685b      	ldr	r3, [r3, #4]
    afcc:	4929      	ldr	r1, [pc, #164]	; (b074 <rpmsg_backend_init+0x16c>)
    afce:	4798      	blx	r3
	vq[0] = virtqueue_allocate(VRING_SIZE);
    afd0:	f00e fff3 	bl	19fba <virtqueue_allocate.constprop.0>
    afd4:	4f28      	ldr	r7, [pc, #160]	; (b078 <rpmsg_backend_init+0x170>)
    afd6:	6038      	str	r0, [r7, #0]
	if (!vq[0]) {
    afd8:	b930      	cbnz	r0, afe8 <rpmsg_backend_init+0xe0>
		LOG_ERR("virtqueue_allocate failed to alloc vq[0]");
    afda:	2145      	movs	r1, #69	; 0x45
    afdc:	4827      	ldr	r0, [pc, #156]	; (b07c <rpmsg_backend_init+0x174>)
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    afde:	f00e fd06 	bl	199ee <printk>
		return -ENOMEM;
    afe2:	f06f 040b 	mvn.w	r4, #11
    afe6:	e7b5      	b.n	af54 <rpmsg_backend_init+0x4c>
	vq[1] = virtqueue_allocate(VRING_SIZE);
    afe8:	f00e ffe7 	bl	19fba <virtqueue_allocate.constprop.0>
    afec:	6078      	str	r0, [r7, #4]
	if (!vq[1]) {
    afee:	b910      	cbnz	r0, aff6 <rpmsg_backend_init+0xee>
		LOG_ERR("virtqueue_allocate failed to alloc vq[1]");
    aff0:	2145      	movs	r1, #69	; 0x45
    aff2:	4823      	ldr	r0, [pc, #140]	; (b080 <rpmsg_backend_init+0x178>)
    aff4:	e7f3      	b.n	afde <rpmsg_backend_init+0xd6>
	rvrings[0].io = *io;
    aff6:	6832      	ldr	r2, [r6, #0]
    aff8:	4b22      	ldr	r3, [pc, #136]	; (b084 <rpmsg_backend_init+0x17c>)
	rvrings[0].info.num_descs = VRING_SIZE;
    affa:	2110      	movs	r1, #16
	rvrings[0].io = *io;
    affc:	615a      	str	r2, [r3, #20]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    affe:	4a22      	ldr	r2, [pc, #136]	; (b088 <rpmsg_backend_init+0x180>)
	rvrings[0].vq = vq[0];
    b000:	683f      	ldr	r7, [r7, #0]
	rvrings[0].info.vaddr = (void *)VRING_TX_ADDRESS;
    b002:	605a      	str	r2, [r3, #4]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b004:	2204      	movs	r2, #4
	rvrings[1].io = *io;
    b006:	6836      	ldr	r6, [r6, #0]
	rvrings[0].info.align = VRING_ALIGNMENT;
    b008:	609a      	str	r2, [r3, #8]
	rvrings[1].info.align = VRING_ALIGNMENT;
    b00a:	621a      	str	r2, [r3, #32]
	vdev->vrings_num = VRING_COUNT;
    b00c:	2202      	movs	r2, #2
	rvrings[1].io = *io;
    b00e:	62de      	str	r6, [r3, #44]	; 0x2c
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b010:	4e1e      	ldr	r6, [pc, #120]	; (b08c <rpmsg_backend_init+0x184>)
	vdev->vrings_num = VRING_COUNT;
    b012:	62aa      	str	r2, [r5, #40]	; 0x28
	vdev->func = &dispatch;
    b014:	4a1e      	ldr	r2, [pc, #120]	; (b090 <rpmsg_backend_init+0x188>)
	rvrings[1].info.num_descs = VRING_SIZE;
    b016:	8499      	strh	r1, [r3, #36]	; 0x24
	rvrings[1].info.vaddr = (void *)VRING_RX_ADDRESS;
    b018:	61de      	str	r6, [r3, #28]
	rvrings[1].vq = vq[1];
    b01a:	6198      	str	r0, [r3, #24]
	rvrings[0].info.num_descs = VRING_SIZE;
    b01c:	8199      	strh	r1, [r3, #12]
	rvrings[0].vq = vq[0];
    b01e:	601f      	str	r7, [r3, #0]
	vdev->role = RPMSG_ROLE;
    b020:	61ac      	str	r4, [r5, #24]
	vdev->func = &dispatch;
    b022:	622a      	str	r2, [r5, #32]
	vdev->vrings_info = &rvrings[0];
    b024:	62eb      	str	r3, [r5, #44]	; 0x2c
	return 0;
    b026:	e795      	b.n	af54 <rpmsg_backend_init+0x4c>
    b028:	0001d868 	.word	0x0001d868
    b02c:	2000c610 	.word	0x2000c610
    b030:	20008820 	.word	0x20008820
    b034:	0001ebd0 	.word	0x0001ebd0
    b038:	20008840 	.word	0x20008840
    b03c:	2000a49c 	.word	0x2000a49c
    b040:	0000aea1 	.word	0x0000aea1
    b044:	0001ebdb 	.word	0x0001ebdb
    b048:	20008240 	.word	0x20008240
    b04c:	0001ec03 	.word	0x0001ec03
    b050:	0001ec33 	.word	0x0001ec33
    b054:	0001ec3d 	.word	0x0001ec3d
    b058:	0001ec45 	.word	0x0001ec45
    b05c:	0001ec67 	.word	0x0001ec67
    b060:	0001ec98 	.word	0x0001ec98
    b064:	2000a498 	.word	0x2000a498
    b068:	0001ec9e 	.word	0x0001ec9e
    b06c:	0001eca4 	.word	0x0001eca4
    b070:	0001eccc 	.word	0x0001eccc
    b074:	0000aee1 	.word	0x0000aee1
    b078:	2000a4a8 	.word	0x2000a4a8
    b07c:	0001ecf4 	.word	0x0001ecf4
    b080:	0001ed22 	.word	0x0001ed22
    b084:	20008210 	.word	0x20008210
    b088:	2007fc00 	.word	0x2007fc00
    b08c:	2007f800 	.word	0x2007f800
    b090:	0001da7c 	.word	0x0001da7c

0000b094 <ns_bind_cb>:
#if MASTER

static void ns_bind_cb(struct rpmsg_device *rdev,
					const char *name,
					uint32_t dest)
{
    b094:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    b098:	460d      	mov	r5, r1
	int err;

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (strcmp(name, endpoints[i].name) == 0) {
    b09a:	4e1b      	ldr	r6, [pc, #108]	; (b108 <ns_bind_cb+0x74>)
{
    b09c:	4607      	mov	r7, r0
		if (strcmp(name, endpoints[i].name) == 0) {
    b09e:	6831      	ldr	r1, [r6, #0]
    b0a0:	4628      	mov	r0, r5
{
    b0a2:	4690      	mov	r8, r2
		if (strcmp(name, endpoints[i].name) == 0) {
    b0a4:	f00f feb5 	bl	1ae12 <strcmp>
    b0a8:	b168      	cbz	r0, b0c6 <ns_bind_cb+0x32>
    b0aa:	4628      	mov	r0, r5
    b0ac:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
    b0ae:	f00f feb0 	bl	1ae12 <strcmp>
    b0b2:	b138      	cbz	r0, b0c4 <ns_bind_cb+0x30>

			return;
		}
	}

	LOG_ERR("Remote endpoint %s not registered locally", name);
    b0b4:	462a      	mov	r2, r5
    b0b6:	2145      	movs	r1, #69	; 0x45
    b0b8:	4814      	ldr	r0, [pc, #80]	; (b10c <ns_bind_cb+0x78>)
}
    b0ba:	b004      	add	sp, #16
    b0bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_ERR("Remote endpoint %s not registered locally", name);
    b0c0:	f00e bc95 	b.w	199ee <printk>
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b0c4:	2001      	movs	r0, #1
			err = rpmsg_create_ept(&endpoints[i].ep,
    b0c6:	244c      	movs	r4, #76	; 0x4c
    b0c8:	4344      	muls	r4, r0
    b0ca:	4b11      	ldr	r3, [pc, #68]	; (b110 <ns_bind_cb+0x7c>)
    b0cc:	f104 0008 	add.w	r0, r4, #8
    b0d0:	9302      	str	r3, [sp, #8]
    b0d2:	4434      	add	r4, r6
    b0d4:	6863      	ldr	r3, [r4, #4]
    b0d6:	462a      	mov	r2, r5
    b0d8:	e9cd 8300 	strd	r8, r3, [sp]
    b0dc:	4639      	mov	r1, r7
    b0de:	f04f 33ff 	mov.w	r3, #4294967295
    b0e2:	4430      	add	r0, r6
    b0e4:	f00b fa8c 	bl	16600 <rpmsg_create_ept>
			if (err != 0) {
    b0e8:	4603      	mov	r3, r0
    b0ea:	b138      	cbz	r0, b0fc <ns_bind_cb+0x68>
				LOG_ERR("Creating remote endpoint %s"
    b0ec:	462a      	mov	r2, r5
    b0ee:	2145      	movs	r1, #69	; 0x45
    b0f0:	4808      	ldr	r0, [pc, #32]	; (b114 <ns_bind_cb+0x80>)
}
    b0f2:	b004      	add	sp, #16
    b0f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				LOG_ERR("Creating remote endpoint %s"
    b0f8:	f00e bc79 	b.w	199ee <printk>
				endpoints[i].bound = true;
    b0fc:	2301      	movs	r3, #1
    b0fe:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
    b102:	b004      	add	sp, #16
    b104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b108:	2000a4b0 	.word	0x2000a4b0
    b10c:	0001ed5e 	.word	0x0001ed5e
    b110:	00019fd5 	.word	0x00019fd5
    b114:	0001ed8d 	.word	0x0001ed8d

0000b118 <rpmsg_service_init>:

#endif

static int rpmsg_service_init(const struct device *dev)
{
    b118:	b537      	push	{r0, r1, r2, r4, r5, lr}

	(void)dev;

	LOG_DBG("RPMsg service initialization start");

	err = rpmsg_backend_init(&io, &vdev);
    b11a:	4d13      	ldr	r5, [pc, #76]	; (b168 <rpmsg_service_init+0x50>)
    b11c:	4913      	ldr	r1, [pc, #76]	; (b16c <rpmsg_service_init+0x54>)
    b11e:	4628      	mov	r0, r5
    b120:	f7ff fef2 	bl	af08 <rpmsg_backend_init>
	if (err) {
    b124:	4604      	mov	r4, r0
    b126:	b138      	cbz	r0, b138 <rpmsg_service_init+0x20>
		LOG_ERR("RPMsg backend init failed with error %d", err);
    b128:	2145      	movs	r1, #69	; 0x45
    b12a:	4602      	mov	r2, r0
    b12c:	4810      	ldr	r0, [pc, #64]	; (b170 <rpmsg_service_init+0x58>)
#else
	err = rpmsg_init_vdev(&rvdev, &vdev, NULL, io, NULL);
#endif

	if (err) {
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b12e:	f00e fc5e 	bl	199ee <printk>
#endif

	LOG_DBG("RPMsg service initialized");

	return 0;
}
    b132:	4620      	mov	r0, r4
    b134:	b003      	add	sp, #12
    b136:	bd30      	pop	{r4, r5, pc}
	rpmsg_virtio_init_shm_pool(&shpool, (void *)SHM_START_ADDR, SHM_SIZE);
    b138:	4c0e      	ldr	r4, [pc, #56]	; (b174 <rpmsg_service_init+0x5c>)
    b13a:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
    b13e:	4620      	mov	r0, r4
    b140:	490d      	ldr	r1, [pc, #52]	; (b178 <rpmsg_service_init+0x60>)
    b142:	f011 ff9a 	bl	1d07a <rpmsg_virtio_init_shm_pool>
	err = rpmsg_init_vdev(&rvdev, &vdev, ns_bind_cb, io, &shpool);
    b146:	9400      	str	r4, [sp, #0]
    b148:	682b      	ldr	r3, [r5, #0]
    b14a:	4a0c      	ldr	r2, [pc, #48]	; (b17c <rpmsg_service_init+0x64>)
    b14c:	4907      	ldr	r1, [pc, #28]	; (b16c <rpmsg_service_init+0x54>)
    b14e:	480c      	ldr	r0, [pc, #48]	; (b180 <rpmsg_service_init+0x68>)
    b150:	f00b fb82 	bl	16858 <rpmsg_init_vdev>
	if (err) {
    b154:	4604      	mov	r4, r0
    b156:	b118      	cbz	r0, b160 <rpmsg_service_init+0x48>
		LOG_ERR("rpmsg_init_vdev failed %d", err);
    b158:	4602      	mov	r2, r0
    b15a:	2145      	movs	r1, #69	; 0x45
    b15c:	4809      	ldr	r0, [pc, #36]	; (b184 <rpmsg_service_init+0x6c>)
    b15e:	e7e6      	b.n	b12e <rpmsg_service_init+0x16>
	ep_crt_started = true;
    b160:	2201      	movs	r2, #1
    b162:	4b09      	ldr	r3, [pc, #36]	; (b188 <rpmsg_service_init+0x70>)
    b164:	701a      	strb	r2, [r3, #0]
	return 0;
    b166:	e7e4      	b.n	b132 <rpmsg_service_init+0x1a>
    b168:	2000a548 	.word	0x2000a548
    b16c:	200088d0 	.word	0x200088d0
    b170:	0001edc3 	.word	0x0001edc3
    b174:	2000a5dc 	.word	0x2000a5dc
    b178:	20070400 	.word	0x20070400
    b17c:	0000b095 	.word	0x0000b095
    b180:	2000a54c 	.word	0x2000a54c
    b184:	0001edf0 	.word	0x0001edf0
    b188:	2000c113 	.word	0x2000c113

0000b18c <rpmsg_service_register_endpoint>:

int rpmsg_service_register_endpoint(const char *name, rpmsg_ept_cb cb)
{
    b18c:	b538      	push	{r3, r4, r5, lr}
	if (ep_crt_started) {
    b18e:	4b0d      	ldr	r3, [pc, #52]	; (b1c4 <rpmsg_service_register_endpoint+0x38>)
{
    b190:	4602      	mov	r2, r0
	if (ep_crt_started) {
    b192:	781b      	ldrb	r3, [r3, #0]
    b194:	b993      	cbnz	r3, b1bc <rpmsg_service_register_endpoint+0x30>
		return -EINPROGRESS;
	}

	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
		if (!endpoints[i].name) {
    b196:	4c0c      	ldr	r4, [pc, #48]	; (b1c8 <rpmsg_service_register_endpoint+0x3c>)
    b198:	6820      	ldr	r0, [r4, #0]
    b19a:	b148      	cbz	r0, b1b0 <rpmsg_service_register_endpoint+0x24>
    b19c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    b19e:	b133      	cbz	r3, b1ae <rpmsg_service_register_endpoint+0x22>

			return i;
		}
	}

	LOG_ERR("No free slots to register endpoint %s", name);
    b1a0:	480a      	ldr	r0, [pc, #40]	; (b1cc <rpmsg_service_register_endpoint+0x40>)
    b1a2:	2145      	movs	r1, #69	; 0x45
    b1a4:	f00e fc23 	bl	199ee <printk>

	return -ENOMEM;
    b1a8:	f06f 000b 	mvn.w	r0, #11
}
    b1ac:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < CONFIG_RPMSG_SERVICE_NUM_ENDPOINTS; ++i) {
    b1ae:	2001      	movs	r0, #1
			endpoints[i].name = name;
    b1b0:	234c      	movs	r3, #76	; 0x4c
    b1b2:	4343      	muls	r3, r0
    b1b4:	18e5      	adds	r5, r4, r3
    b1b6:	50e2      	str	r2, [r4, r3]
			endpoints[i].cb = cb;
    b1b8:	6069      	str	r1, [r5, #4]
			return i;
    b1ba:	e7f7      	b.n	b1ac <rpmsg_service_register_endpoint+0x20>
		return -EINPROGRESS;
    b1bc:	f06f 0043 	mvn.w	r0, #67	; 0x43
    b1c0:	e7f4      	b.n	b1ac <rpmsg_service_register_endpoint+0x20>
    b1c2:	bf00      	nop
    b1c4:	2000c113 	.word	0x2000c113
    b1c8:	2000a4b0 	.word	0x2000a4b0
    b1cc:	0001ee0f 	.word	0x0001ee0f

0000b1d0 <rpmsg_service_endpoint_is_bound>:

bool rpmsg_service_endpoint_is_bound(int endpoint_id)
{
	return endpoints[endpoint_id].bound;
    b1d0:	224c      	movs	r2, #76	; 0x4c
    b1d2:	4b03      	ldr	r3, [pc, #12]	; (b1e0 <rpmsg_service_endpoint_is_bound+0x10>)
    b1d4:	fb02 3300 	mla	r3, r2, r0, r3
    b1d8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
}
    b1dc:	4770      	bx	lr
    b1de:	bf00      	nop
    b1e0:	2000a4b0 	.word	0x2000a4b0

0000b1e4 <rpmsg_service_send>:

int rpmsg_service_send(int endpoint_id, const void *data, size_t len)
{
    b1e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
    b1e6:	244c      	movs	r4, #76	; 0x4c
    b1e8:	460b      	mov	r3, r1
    b1ea:	2101      	movs	r1, #1
    b1ec:	4344      	muls	r4, r0
    b1ee:	e9cd 2100 	strd	r2, r1, [sp]
    b1f2:	4d05      	ldr	r5, [pc, #20]	; (b208 <rpmsg_service_send+0x24>)
    b1f4:	1928      	adds	r0, r5, r4
	return rpmsg_send(&endpoints[endpoint_id].ep, data, len);
    b1f6:	3408      	adds	r4, #8
    b1f8:	e9d0 120b 	ldrd	r1, r2, [r0, #44]	; 0x2c
    b1fc:	1928      	adds	r0, r5, r4
    b1fe:	f00b f9ed 	bl	165dc <rpmsg_send_offchannel_raw>
}
    b202:	b003      	add	sp, #12
    b204:	bd30      	pop	{r4, r5, pc}
    b206:	bf00      	nop
    b208:	2000a4b0 	.word	0x2000a4b0

0000b20c <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    b20c:	4b10      	ldr	r3, [pc, #64]	; (b250 <settings_save_one+0x44>)
{
    b20e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    b212:	681c      	ldr	r4, [r3, #0]
{
    b214:	4605      	mov	r5, r0
    b216:	460e      	mov	r6, r1
    b218:	4617      	mov	r7, r2
	if (!cs) {
    b21a:	b1ac      	cbz	r4, b248 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    b21c:	f04f 32ff 	mov.w	r2, #4294967295
    b220:	f04f 33ff 	mov.w	r3, #4294967295
    b224:	480b      	ldr	r0, [pc, #44]	; (b254 <settings_save_one+0x48>)
    b226:	f00b ff59 	bl	170dc <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    b22a:	6863      	ldr	r3, [r4, #4]
    b22c:	4632      	mov	r2, r6
    b22e:	f8d3 8008 	ldr.w	r8, [r3, #8]
    b232:	4629      	mov	r1, r5
    b234:	463b      	mov	r3, r7
    b236:	4620      	mov	r0, r4
    b238:	47c0      	blx	r8
    b23a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    b23c:	4805      	ldr	r0, [pc, #20]	; (b254 <settings_save_one+0x48>)
    b23e:	f00c f819 	bl	17274 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    b242:	4620      	mov	r0, r4
    b244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    b248:	f06f 0401 	mvn.w	r4, #1
    b24c:	e7f9      	b.n	b242 <settings_save_one+0x36>
    b24e:	bf00      	nop
    b250:	2000a5f0 	.word	0x2000a5f0
    b254:	20008680 	.word	0x20008680

0000b258 <settings_load_subtree>:
	const struct settings_load_arg arg = {
    b258:	2300      	movs	r3, #0
{
    b25a:	b530      	push	{r4, r5, lr}
    b25c:	b085      	sub	sp, #20
    b25e:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    b260:	e9cd 3302 	strd	r3, r3, [sp, #8]
    b264:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    b266:	f04f 33ff 	mov.w	r3, #4294967295
    b26a:	f04f 32ff 	mov.w	r2, #4294967295
    b26e:	480b      	ldr	r0, [pc, #44]	; (b29c <settings_load_subtree+0x44>)
    b270:	f00b ff34 	bl	170dc <z_impl_k_mutex_lock>
	return list->head;
    b274:	4b0a      	ldr	r3, [pc, #40]	; (b2a0 <settings_load_subtree+0x48>)
    b276:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    b278:	b134      	cbz	r4, b288 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    b27a:	6863      	ldr	r3, [r4, #4]
    b27c:	4620      	mov	r0, r4
    b27e:	681b      	ldr	r3, [r3, #0]
    b280:	a901      	add	r1, sp, #4
    b282:	4798      	blx	r3
	return node->next;
    b284:	6824      	ldr	r4, [r4, #0]
    b286:	e7f7      	b.n	b278 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    b288:	4628      	mov	r0, r5
    b28a:	f000 f83b 	bl	b304 <settings_commit_subtree>
    b28e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    b290:	4802      	ldr	r0, [pc, #8]	; (b29c <settings_load_subtree+0x44>)
    b292:	f00b ffef 	bl	17274 <z_impl_k_mutex_unlock>
}
    b296:	4620      	mov	r0, r4
    b298:	b005      	add	sp, #20
    b29a:	bd30      	pop	{r4, r5, pc}
    b29c:	20008680 	.word	0x20008680
    b2a0:	2000a5e8 	.word	0x2000a5e8

0000b2a4 <settings_load_subtree_direct>:
{
    b2a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    b2a6:	e9cd 0101 	strd	r0, r1, [sp, #4]
    b2aa:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    b2ac:	f04f 33ff 	mov.w	r3, #4294967295
    b2b0:	f04f 32ff 	mov.w	r2, #4294967295
    b2b4:	4809      	ldr	r0, [pc, #36]	; (b2dc <settings_load_subtree_direct+0x38>)
    b2b6:	f00b ff11 	bl	170dc <z_impl_k_mutex_lock>
	return list->head;
    b2ba:	4b09      	ldr	r3, [pc, #36]	; (b2e0 <settings_load_subtree_direct+0x3c>)
    b2bc:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    b2be:	b134      	cbz	r4, b2ce <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    b2c0:	6863      	ldr	r3, [r4, #4]
    b2c2:	4620      	mov	r0, r4
    b2c4:	681b      	ldr	r3, [r3, #0]
    b2c6:	a901      	add	r1, sp, #4
    b2c8:	4798      	blx	r3
	return node->next;
    b2ca:	6824      	ldr	r4, [r4, #0]
    b2cc:	e7f7      	b.n	b2be <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    b2ce:	4803      	ldr	r0, [pc, #12]	; (b2dc <settings_load_subtree_direct+0x38>)
    b2d0:	f00b ffd0 	bl	17274 <z_impl_k_mutex_unlock>
}
    b2d4:	2000      	movs	r0, #0
    b2d6:	b004      	add	sp, #16
    b2d8:	bd10      	pop	{r4, pc}
    b2da:	bf00      	nop
    b2dc:	20008680 	.word	0x20008680
    b2e0:	2000a5e8 	.word	0x2000a5e8

0000b2e4 <settings_store_init>:
	list->head = NULL;
    b2e4:	2200      	movs	r2, #0
    b2e6:	4b02      	ldr	r3, [pc, #8]	; (b2f0 <settings_store_init+0xc>)
	list->tail = NULL;
    b2e8:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    b2ec:	4770      	bx	lr
    b2ee:	bf00      	nop
    b2f0:	2000a5e8 	.word	0x2000a5e8

0000b2f4 <settings_init>:
	list->head = NULL;
    b2f4:	2200      	movs	r2, #0
    b2f6:	4b02      	ldr	r3, [pc, #8]	; (b300 <settings_init+0xc>)
	list->tail = NULL;
    b2f8:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    b2fc:	f7ff bff2 	b.w	b2e4 <settings_store_init>
    b300:	2000a5f4 	.word	0x2000a5f4

0000b304 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    b304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b308:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
    b30a:	2500      	movs	r5, #0

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    b30c:	4c1f      	ldr	r4, [pc, #124]	; (b38c <settings_commit_subtree+0x88>)
    b30e:	4f20      	ldr	r7, [pc, #128]	; (b390 <settings_commit_subtree+0x8c>)
    b310:	f8df 8080 	ldr.w	r8, [pc, #128]	; b394 <settings_commit_subtree+0x90>
    b314:	42bc      	cmp	r4, r7
    b316:	d908      	bls.n	b32a <settings_commit_subtree+0x26>
    b318:	4641      	mov	r1, r8
    b31a:	481f      	ldr	r0, [pc, #124]	; (b398 <settings_commit_subtree+0x94>)
    b31c:	22f4      	movs	r2, #244	; 0xf4
    b31e:	f00e fb66 	bl	199ee <printk>
    b322:	21f4      	movs	r1, #244	; 0xf4
    b324:	4640      	mov	r0, r8
    b326:	f00e fe08 	bl	19f3a <assert_post_action>
    b32a:	42bc      	cmp	r4, r7
    b32c:	d307      	bcc.n	b33e <settings_commit_subtree+0x3a>
	return list->head;
    b32e:	4b1b      	ldr	r3, [pc, #108]	; (b39c <settings_commit_subtree+0x98>)
    b330:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    b332:	b10c      	cbz	r4, b338 <settings_commit_subtree+0x34>
    b334:	3c14      	subs	r4, #20
    b336:	b9a4      	cbnz	r4, b362 <settings_commit_subtree+0x5e>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    b338:	4628      	mov	r0, r5
    b33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b33e:	b91e      	cbnz	r6, b348 <settings_commit_subtree+0x44>
		if (ch->h_commit) {
    b340:	68e3      	ldr	r3, [r4, #12]
    b342:	b94b      	cbnz	r3, b358 <settings_commit_subtree+0x54>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    b344:	3414      	adds	r4, #20
    b346:	e7e5      	b.n	b314 <settings_commit_subtree+0x10>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b348:	2200      	movs	r2, #0
    b34a:	4631      	mov	r1, r6
    b34c:	6820      	ldr	r0, [r4, #0]
    b34e:	f00e fe4a 	bl	19fe6 <settings_name_steq>
    b352:	2800      	cmp	r0, #0
    b354:	d1f4      	bne.n	b340 <settings_commit_subtree+0x3c>
    b356:	e7f5      	b.n	b344 <settings_commit_subtree+0x40>
			rc2 = ch->h_commit();
    b358:	4798      	blx	r3
				rc = rc2;
    b35a:	2d00      	cmp	r5, #0
    b35c:	bf08      	it	eq
    b35e:	4605      	moveq	r5, r0
    b360:	e7f0      	b.n	b344 <settings_commit_subtree+0x40>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b362:	b936      	cbnz	r6, b372 <settings_commit_subtree+0x6e>
		if (ch->h_commit) {
    b364:	68e3      	ldr	r3, [r4, #12]
    b366:	b963      	cbnz	r3, b382 <settings_commit_subtree+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b368:	f114 0f14 	cmn.w	r4, #20
    b36c:	d0e4      	beq.n	b338 <settings_commit_subtree+0x34>
	return node->next;
    b36e:	6964      	ldr	r4, [r4, #20]
    b370:	e7df      	b.n	b332 <settings_commit_subtree+0x2e>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    b372:	2200      	movs	r2, #0
    b374:	4631      	mov	r1, r6
    b376:	6820      	ldr	r0, [r4, #0]
    b378:	f00e fe35 	bl	19fe6 <settings_name_steq>
    b37c:	2800      	cmp	r0, #0
    b37e:	d1f1      	bne.n	b364 <settings_commit_subtree+0x60>
    b380:	e7f2      	b.n	b368 <settings_commit_subtree+0x64>
			rc2 = ch->h_commit();
    b382:	4798      	blx	r3
				rc = rc2;
    b384:	2d00      	cmp	r5, #0
    b386:	bf08      	it	eq
    b388:	4605      	moveq	r5, r0
    b38a:	e7ed      	b.n	b368 <settings_commit_subtree+0x64>
    b38c:	0001d700 	.word	0x0001d700
    b390:	0001d764 	.word	0x0001d764
    b394:	0001ee48 	.word	0x0001ee48
    b398:	0001ead7 	.word	0x0001ead7
    b39c:	2000a5f4 	.word	0x2000a5f4

0000b3a0 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    b3a0:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    b3a2:	4c06      	ldr	r4, [pc, #24]	; (b3bc <settings_subsys_init+0x1c>)
    b3a4:	7823      	ldrb	r3, [r4, #0]
    b3a6:	b93b      	cbnz	r3, b3b8 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    b3a8:	f7ff ffa4 	bl	b2f4 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    b3ac:	f00e fe54 	bl	1a058 <settings_backend_init>

	if (!err) {
    b3b0:	b908      	cbnz	r0, b3b6 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    b3b2:	2301      	movs	r3, #1
    b3b4:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    b3b6:	bd10      	pop	{r4, pc}
		return 0;
    b3b8:	2000      	movs	r0, #0
    b3ba:	e7fc      	b.n	b3b6 <settings_subsys_init+0x16>
    b3bc:	2000c114 	.word	0x2000c114

0000b3c0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    b3c0:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    b3c2:	4c04      	ldr	r4, [pc, #16]	; (b3d4 <rtt_console_init+0x14>)
    b3c4:	4620      	mov	r0, r4
    b3c6:	f7fe fd93 	bl	9ef0 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    b3ca:	4620      	mov	r0, r4
    b3cc:	f002 fa3e 	bl	d84c <__stdout_hook_install>

	return 0;
}
    b3d0:	2000      	movs	r0, #0
    b3d2:	bd10      	pop	{r4, pc}
    b3d4:	0000b3d9 	.word	0x0000b3d9

0000b3d8 <rtt_console_out>:
{
    b3d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b3dc:	4604      	mov	r4, r0
	char c = (char)character;
    b3de:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
    b3e0:	f8df 8058 	ldr.w	r8, [pc, #88]	; b43c <rtt_console_out+0x64>
    b3e4:	4e16      	ldr	r6, [pc, #88]	; (b440 <rtt_console_out+0x68>)
    b3e6:	f88d 0007 	strb.w	r0, [sp, #7]
    b3ea:	f04f 33ff 	mov.w	r3, #4294967295
    b3ee:	f04f 32ff 	mov.w	r2, #4294967295
    b3f2:	4640      	mov	r0, r8
    b3f4:	f00b fe72 	bl	170dc <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    b3f8:	2201      	movs	r2, #1
    b3fa:	f10d 0107 	add.w	r1, sp, #7
    b3fe:	2000      	movs	r0, #0
    b400:	f001 fac2 	bl	c988 <SEGGER_RTT_WriteNoLock>
    b404:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    b406:	4640      	mov	r0, r8
    b408:	f00b ff34 	bl	17274 <z_impl_k_mutex_unlock>
		if (cnt) {
    b40c:	b12f      	cbz	r7, b41a <rtt_console_out+0x42>
			host_present = true;
    b40e:	2301      	movs	r3, #1
    b410:	7033      	strb	r3, [r6, #0]
}
    b412:	4620      	mov	r0, r4
    b414:	b002      	add	sp, #8
    b416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    b41a:	7833      	ldrb	r3, [r6, #0]
    b41c:	2b00      	cmp	r3, #0
    b41e:	d0f8      	beq.n	b412 <rtt_console_out+0x3a>
			if (max_cnt) {
    b420:	3d01      	subs	r5, #1
    b422:	d008      	beq.n	b436 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
    b424:	f011 fec8 	bl	1d1b8 <k_is_in_isr>
    b428:	2800      	cmp	r0, #0
    b42a:	d1de      	bne.n	b3ea <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    b42c:	2100      	movs	r1, #0
    b42e:	2042      	movs	r0, #66	; 0x42
    b430:	f00d f8d2 	bl	185d8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    b434:	e7d9      	b.n	b3ea <rtt_console_out+0x12>
				host_present = false;
    b436:	7035      	strb	r5, [r6, #0]
    b438:	e7eb      	b.n	b412 <rtt_console_out+0x3a>
    b43a:	bf00      	nop
    b43c:	20008658 	.word	0x20008658
    b440:	2000c115 	.word	0x2000c115

0000b444 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    b444:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b446:	2340      	movs	r3, #64	; 0x40
{
    b448:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    b44a:	490a      	ldr	r1, [pc, #40]	; (b474 <onoff_start+0x30>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b44c:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    b44e:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b450:	1149      	asrs	r1, r1, #5
{
    b452:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    b454:	4623      	mov	r3, r4
    b456:	4a08      	ldr	r2, [pc, #32]	; (b478 <onoff_start+0x34>)
    b458:	4808      	ldr	r0, [pc, #32]	; (b47c <onoff_start+0x38>)
    b45a:	f00e fe12 	bl	1a082 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    b45e:	1e01      	subs	r1, r0, #0
    b460:	da05      	bge.n	b46e <onoff_start+0x2a>
		notify(mgr, err);
    b462:	4628      	mov	r0, r5
    b464:	4623      	mov	r3, r4
	}
}
    b466:	b003      	add	sp, #12
    b468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    b46c:	4718      	bx	r3
}
    b46e:	b003      	add	sp, #12
    b470:	bd30      	pop	{r4, r5, pc}
    b472:	bf00      	nop
    b474:	2000a60c 	.word	0x2000a60c
    b478:	0001a0f5 	.word	0x0001a0f5
    b47c:	20008578 	.word	0x20008578

0000b480 <get_status>:
{
    b480:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b482:	b2cc      	uxtb	r4, r1
    b484:	2c03      	cmp	r4, #3
{
    b486:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b488:	d908      	bls.n	b49c <get_status+0x1c>
    b48a:	4909      	ldr	r1, [pc, #36]	; (b4b0 <get_status+0x30>)
    b48c:	4809      	ldr	r0, [pc, #36]	; (b4b4 <get_status+0x34>)
    b48e:	227e      	movs	r2, #126	; 0x7e
    b490:	f00e faad 	bl	199ee <printk>
    b494:	217e      	movs	r1, #126	; 0x7e
    b496:	4806      	ldr	r0, [pc, #24]	; (b4b0 <get_status+0x30>)
    b498:	f00e fd4f 	bl	19f3a <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    b49c:	230c      	movs	r3, #12
    b49e:	68e9      	ldr	r1, [r5, #12]
    b4a0:	fb04 1403 	mla	r4, r4, r3, r1
    b4a4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
}
    b4a8:	f000 0007 	and.w	r0, r0, #7
    b4ac:	bd38      	pop	{r3, r4, r5, pc}
    b4ae:	bf00      	nop
    b4b0:	0001ee80 	.word	0x0001ee80
    b4b4:	0001ead7 	.word	0x0001ead7

0000b4b8 <stop>:
{
    b4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4ba:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b4bc:	2c03      	cmp	r4, #3
{
    b4be:	4605      	mov	r5, r0
    b4c0:	4617      	mov	r7, r2
	struct nrf_clock_control_data *data = dev->data;
    b4c2:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    b4c4:	d90a      	bls.n	b4dc <stop+0x24>
    b4c6:	4919      	ldr	r1, [pc, #100]	; (b52c <stop+0x74>)
    b4c8:	4819      	ldr	r0, [pc, #100]	; (b530 <stop+0x78>)
    b4ca:	f240 1253 	movw	r2, #339	; 0x153
    b4ce:	f00e fa8e 	bl	199ee <printk>
    b4d2:	f240 1153 	movw	r1, #339	; 0x153
    b4d6:	4815      	ldr	r0, [pc, #84]	; (b52c <stop+0x74>)
    b4d8:	f00e fd2f 	bl	19f3a <assert_post_action>
	__asm__ volatile(
    b4dc:	f04f 0320 	mov.w	r3, #32
    b4e0:	f3ef 8111 	mrs	r1, BASEPRI
    b4e4:	f383 8811 	msr	BASEPRI, r3
    b4e8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    b4ec:	220c      	movs	r2, #12
    b4ee:	fb02 6304 	mla	r3, r2, r4, r6
    b4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    b4f6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    b4fa:	d001      	beq.n	b500 <stop+0x48>
    b4fc:	429f      	cmp	r7, r3
    b4fe:	d112      	bne.n	b526 <stop+0x6e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b500:	2301      	movs	r3, #1
	int err = 0;
    b502:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    b504:	fb02 6604 	mla	r6, r2, r4, r6
    b508:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
	__asm__ volatile(
    b50c:	f381 8811 	msr	BASEPRI, r1
    b510:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    b514:	b930      	cbnz	r0, b524 <stop+0x6c>
	get_sub_config(dev, type)->stop();
    b516:	230c      	movs	r3, #12
    b518:	6869      	ldr	r1, [r5, #4]
    b51a:	fb03 1404 	mla	r4, r3, r4, r1
    b51e:	6863      	ldr	r3, [r4, #4]
    b520:	4798      	blx	r3
	return 0;
    b522:	2000      	movs	r0, #0
}
    b524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    b526:	f04f 30ff 	mov.w	r0, #4294967295
    b52a:	e7ef      	b.n	b50c <stop+0x54>
    b52c:	0001ee80 	.word	0x0001ee80
    b530:	0001ead7 	.word	0x0001ead7

0000b534 <onoff_stop>:
{
    b534:	b570      	push	{r4, r5, r6, lr}
    b536:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    b538:	4906      	ldr	r1, [pc, #24]	; (b554 <onoff_stop+0x20>)
{
    b53a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    b53c:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    b53e:	1149      	asrs	r1, r1, #5
    b540:	2240      	movs	r2, #64	; 0x40
    b542:	4805      	ldr	r0, [pc, #20]	; (b558 <onoff_stop+0x24>)
    b544:	f7ff ffb8 	bl	b4b8 <stop>
	notify(mgr, res);
    b548:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    b54a:	4601      	mov	r1, r0
	notify(mgr, res);
    b54c:	4620      	mov	r0, r4
}
    b54e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    b552:	4718      	bx	r3
    b554:	2000a60c 	.word	0x2000a60c
    b558:	20008578 	.word	0x20008578

0000b55c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    b55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    b560:	2200      	movs	r2, #0
    b562:	2101      	movs	r1, #1
{
    b564:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    b566:	2005      	movs	r0, #5
    b568:	f001 fc2a 	bl	cdc0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    b56c:	2005      	movs	r0, #5
    b56e:	f001 fc09 	bl	cd84 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    b572:	4811      	ldr	r0, [pc, #68]	; (b5b8 <clk_init+0x5c>)
    b574:	f00a fc08 	bl	15d88 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    b578:	4b10      	ldr	r3, [pc, #64]	; (b5bc <clk_init+0x60>)
    b57a:	4298      	cmp	r0, r3
    b57c:	d119      	bne.n	b5b2 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    b57e:	f00a fc23 	bl	15dc8 <nrfx_clock_enable>
    b582:	2400      	movs	r4, #0
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b584:	f04f 080c 	mov.w	r8, #12
    b588:	2701      	movs	r7, #1
		err = onoff_manager_init(get_onoff_manager(dev, i),
    b58a:	f8df 9034 	ldr.w	r9, [pc, #52]	; b5c0 <clk_init+0x64>
	struct nrf_clock_control_data *data = dev->data;
    b58e:	68f5      	ldr	r5, [r6, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    b590:	4649      	mov	r1, r9
    b592:	eb05 1044 	add.w	r0, r5, r4, lsl #5
    b596:	f00e fa85 	bl	19aa4 <onoff_manager_init>
		if (err < 0) {
    b59a:	2800      	cmp	r0, #0
    b59c:	db07      	blt.n	b5ae <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b59e:	fb08 5504 	mla	r5, r8, r4, r5
	for (enum clock_control_nrf_type i = 0;
    b5a2:	3401      	adds	r4, #1
    b5a4:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    b5a6:	f8c5 7088 	str.w	r7, [r5, #136]	; 0x88
	for (enum clock_control_nrf_type i = 0;
    b5aa:	d1f0      	bne.n	b58e <clk_init+0x32>
	}

	return 0;
    b5ac:	2000      	movs	r0, #0
}
    b5ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    b5b2:	f06f 0004 	mvn.w	r0, #4
    b5b6:	e7fa      	b.n	b5ae <clk_init+0x52>
    b5b8:	0000b5fd 	.word	0x0000b5fd
    b5bc:	0bad0000 	.word	0x0bad0000
    b5c0:	0001dae4 	.word	0x0001dae4

0000b5c4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    b5c4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    b5c6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    b5c8:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    b5ca:	434b      	muls	r3, r1
    b5cc:	4809      	ldr	r0, [pc, #36]	; (b5f4 <clkstarted_handle.constprop.0+0x30>)
static void clkstarted_handle(const struct device *dev,
    b5ce:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    b5d0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    b5d2:	3388      	adds	r3, #136	; 0x88
	void *user_data = sub_data->user_data;
    b5d4:	e9d4 5620 	ldrd	r5, r6, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    b5d8:	4418      	add	r0, r3
	sub_data->cb = NULL;
    b5da:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	set_on_state(&sub_data->flags);
    b5de:	f00e fd3d 	bl	1a05c <set_on_state>
	if (callback) {
    b5e2:	b12d      	cbz	r5, b5f0 <clkstarted_handle.constprop.0+0x2c>
		callback(dev, (clock_control_subsys_t)type, user_data);
    b5e4:	4632      	mov	r2, r6
    b5e6:	462b      	mov	r3, r5
}
    b5e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    b5ec:	4802      	ldr	r0, [pc, #8]	; (b5f8 <clkstarted_handle.constprop.0+0x34>)
    b5ee:	4718      	bx	r3
}
    b5f0:	bd70      	pop	{r4, r5, r6, pc}
    b5f2:	bf00      	nop
    b5f4:	2000a60c 	.word	0x2000a60c
    b5f8:	20008578 	.word	0x20008578

0000b5fc <clock_event_handler>:
{
    b5fc:	b508      	push	{r3, lr}
    b5fe:	2805      	cmp	r0, #5
    b600:	d821      	bhi.n	b646 <clock_event_handler+0x4a>
    b602:	e8df f000 	tbb	[pc, r0]
    b606:	1103      	.short	0x1103
    b608:	0d0f1320 	.word	0x0d0f1320
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    b60c:	4b13      	ldr	r3, [pc, #76]	; (b65c <clock_event_handler+0x60>)
    b60e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    b612:	f010 0007 	ands.w	r0, r0, #7
    b616:	d11f      	bne.n	b658 <clock_event_handler+0x5c>
}
    b618:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    b61c:	f7ff bfd2 	b.w	b5c4 <clkstarted_handle.constprop.0>
    b620:	2002      	movs	r0, #2
    b622:	e7f9      	b.n	b618 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    b624:	2003      	movs	r0, #3
    b626:	e7f7      	b.n	b618 <clock_event_handler+0x1c>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    b628:	2001      	movs	r0, #1
    b62a:	e7f5      	b.n	b618 <clock_event_handler+0x1c>
			__ASSERT_NO_MSG(false);
    b62c:	490c      	ldr	r1, [pc, #48]	; (b660 <clock_event_handler+0x64>)
    b62e:	f240 2266 	movw	r2, #614	; 0x266
    b632:	480c      	ldr	r0, [pc, #48]	; (b664 <clock_event_handler+0x68>)
    b634:	f00e f9db 	bl	199ee <printk>
    b638:	f240 2166 	movw	r1, #614	; 0x266
}
    b63c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    b640:	4807      	ldr	r0, [pc, #28]	; (b660 <clock_event_handler+0x64>)
    b642:	f00e bc7a 	b.w	19f3a <assert_post_action>
    b646:	4906      	ldr	r1, [pc, #24]	; (b660 <clock_event_handler+0x64>)
    b648:	f240 226a 	movw	r2, #618	; 0x26a
    b64c:	4805      	ldr	r0, [pc, #20]	; (b664 <clock_event_handler+0x68>)
    b64e:	f00e f9ce 	bl	199ee <printk>
    b652:	f240 216a 	movw	r1, #618	; 0x26a
    b656:	e7f1      	b.n	b63c <clock_event_handler+0x40>
}
    b658:	bd08      	pop	{r3, pc}
    b65a:	bf00      	nop
    b65c:	2000a60c 	.word	0x2000a60c
    b660:	0001ee80 	.word	0x0001ee80
    b664:	0001ead7 	.word	0x0001ead7

0000b668 <generic_hfclk_start>:
{
    b668:	b508      	push	{r3, lr}
	__asm__ volatile(
    b66a:	f04f 0320 	mov.w	r3, #32
    b66e:	f3ef 8111 	mrs	r1, BASEPRI
    b672:	f383 8811 	msr	BASEPRI, r3
    b676:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    b67a:	4a11      	ldr	r2, [pc, #68]	; (b6c0 <generic_hfclk_start+0x58>)
    b67c:	6813      	ldr	r3, [r2, #0]
    b67e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    b682:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    b686:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    b688:	d00b      	beq.n	b6a2 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    b68a:	4a0e      	ldr	r2, [pc, #56]	; (b6c4 <generic_hfclk_start+0x5c>)
    b68c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b690:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    b694:	f013 0301 	ands.w	r3, r3, #1
    b698:	d003      	beq.n	b6a2 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
    b69a:	480b      	ldr	r0, [pc, #44]	; (b6c8 <generic_hfclk_start+0x60>)
    b69c:	f00e fcde 	bl	1a05c <set_on_state>
			already_started = true;
    b6a0:	2301      	movs	r3, #1
	__asm__ volatile(
    b6a2:	f381 8811 	msr	BASEPRI, r1
    b6a6:	f3bf 8f6f 	isb	sy
	if (already_started) {
    b6aa:	b123      	cbz	r3, b6b6 <generic_hfclk_start+0x4e>
}
    b6ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    b6b0:	2000      	movs	r0, #0
    b6b2:	f7ff bf87 	b.w	b5c4 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    b6b6:	2001      	movs	r0, #1
}
    b6b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b6bc:	f00a bba8 	b.w	15e10 <nrfx_clock_start>
    b6c0:	2000a6bc 	.word	0x2000a6bc
    b6c4:	40005000 	.word	0x40005000
    b6c8:	2000a694 	.word	0x2000a694

0000b6cc <api_blocking_start>:
{
    b6cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    b6ce:	2200      	movs	r2, #0
    b6d0:	2301      	movs	r3, #1
    b6d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    b6d6:	ab04      	add	r3, sp, #16
    b6d8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    b6dc:	4a09      	ldr	r2, [pc, #36]	; (b704 <api_blocking_start+0x38>)
    b6de:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    b6e0:	f8cd d000 	str.w	sp, [sp]
    b6e4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    b6e8:	f00e fcfd 	bl	1a0e6 <api_start>
	if (err < 0) {
    b6ec:	2800      	cmp	r0, #0
    b6ee:	db05      	blt.n	b6fc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    b6f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    b6f4:	2300      	movs	r3, #0
    b6f6:	4668      	mov	r0, sp
    b6f8:	f00c ffe0 	bl	186bc <z_impl_k_sem_take>
}
    b6fc:	b007      	add	sp, #28
    b6fe:	f85d fb04 	ldr.w	pc, [sp], #4
    b702:	bf00      	nop
    b704:	0001a12b 	.word	0x0001a12b

0000b708 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b708:	4b07      	ldr	r3, [pc, #28]	; (b728 <generic_hfclk_stop+0x20>)
    b70a:	e8d3 2fef 	ldaex	r2, [r3]
    b70e:	f022 0102 	bic.w	r1, r2, #2
    b712:	e8c3 1fe0 	stlex	r0, r1, [r3]
    b716:	2800      	cmp	r0, #0
    b718:	d1f7      	bne.n	b70a <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    b71a:	07d3      	lsls	r3, r2, #31
    b71c:	d402      	bmi.n	b724 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    b71e:	2001      	movs	r0, #1
    b720:	f00a bbe0 	b.w	15ee4 <nrfx_clock_stop>
}
    b724:	4770      	bx	lr
    b726:	bf00      	nop
    b728:	2000a6bc 	.word	0x2000a6bc

0000b72c <z_nrf_clock_control_lf_on>:
{
    b72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b730:	2201      	movs	r2, #1
    b732:	4606      	mov	r6, r0
    b734:	4942      	ldr	r1, [pc, #264]	; (b840 <z_nrf_clock_control_lf_on+0x114>)
    b736:	e8d1 3fef 	ldaex	r3, [r1]
    b73a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    b73e:	2800      	cmp	r0, #0
    b740:	d1f9      	bne.n	b736 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    b742:	b99b      	cbnz	r3, b76c <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    b744:	493f      	ldr	r1, [pc, #252]	; (b844 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
    b746:	4840      	ldr	r0, [pc, #256]	; (b848 <z_nrf_clock_control_lf_on+0x11c>)
    b748:	604b      	str	r3, [r1, #4]
    b74a:	60cb      	str	r3, [r1, #12]
    b74c:	608a      	str	r2, [r1, #8]
    b74e:	f7fe fdd7 	bl	a300 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    b752:	2800      	cmp	r0, #0
    b754:	da0a      	bge.n	b76c <z_nrf_clock_control_lf_on+0x40>
    b756:	493d      	ldr	r1, [pc, #244]	; (b84c <z_nrf_clock_control_lf_on+0x120>)
    b758:	483d      	ldr	r0, [pc, #244]	; (b850 <z_nrf_clock_control_lf_on+0x124>)
    b75a:	f240 2226 	movw	r2, #550	; 0x226
    b75e:	f00e f946 	bl	199ee <printk>
    b762:	f240 2126 	movw	r1, #550	; 0x226
    b766:	4839      	ldr	r0, [pc, #228]	; (b84c <z_nrf_clock_control_lf_on+0x120>)
    b768:	f00e fbe7 	bl	19f3a <assert_post_action>
	switch (start_mode) {
    b76c:	b386      	cbz	r6, b7d0 <z_nrf_clock_control_lf_on+0xa4>
    b76e:	1e73      	subs	r3, r6, #1
    b770:	2b01      	cmp	r3, #1
    b772:	d852      	bhi.n	b81a <z_nrf_clock_control_lf_on+0xee>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    b774:	2e01      	cmp	r6, #1
    b776:	d106      	bne.n	b786 <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    b778:	4b36      	ldr	r3, [pc, #216]	; (b854 <z_nrf_clock_control_lf_on+0x128>)
    b77a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    b77e:	f003 0303 	and.w	r3, r3, #3
    b782:	2b02      	cmp	r3, #2
    b784:	d024      	beq.n	b7d0 <z_nrf_clock_control_lf_on+0xa4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    b786:	f011 fd17 	bl	1d1b8 <k_is_in_isr>
    b78a:	4604      	mov	r4, r0
    b78c:	b918      	cbnz	r0, b796 <z_nrf_clock_control_lf_on+0x6a>
	return !z_sys_post_kernel;
    b78e:	4b32      	ldr	r3, [pc, #200]	; (b858 <z_nrf_clock_control_lf_on+0x12c>)
	int key = isr_mode ? irq_lock() : 0;
    b790:	781b      	ldrb	r3, [r3, #0]
    b792:	2b00      	cmp	r3, #0
    b794:	d14e      	bne.n	b834 <z_nrf_clock_control_lf_on+0x108>
	__asm__ volatile(
    b796:	f04f 0320 	mov.w	r3, #32
    b79a:	f3ef 8711 	mrs	r7, BASEPRI
    b79e:	f383 8811 	msr	BASEPRI, r3
    b7a2:	f3bf 8f6f 	isb	sy
    b7a6:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b7a8:	4d2a      	ldr	r5, [pc, #168]	; (b854 <z_nrf_clock_control_lf_on+0x128>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b7aa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; b85c <z_nrf_clock_control_lf_on+0x130>
    b7ae:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b7b2:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    b7b6:	03d2      	lsls	r2, r2, #15
    b7b8:	d50c      	bpl.n	b7d4 <z_nrf_clock_control_lf_on+0xa8>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    b7ba:	f003 0303 	and.w	r3, r3, #3
    b7be:	2b02      	cmp	r3, #2
    b7c0:	d001      	beq.n	b7c6 <z_nrf_clock_control_lf_on+0x9a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    b7c2:	2e01      	cmp	r6, #1
    b7c4:	d106      	bne.n	b7d4 <z_nrf_clock_control_lf_on+0xa8>
	if (isr_mode) {
    b7c6:	b324      	cbz	r4, b812 <z_nrf_clock_control_lf_on+0xe6>
	__asm__ volatile(
    b7c8:	f387 8811 	msr	BASEPRI, r7
    b7cc:	f3bf 8f6f 	isb	sy
}
    b7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    b7d4:	b1c4      	cbz	r4, b808 <z_nrf_clock_control_lf_on+0xdc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    b7d6:	4638      	mov	r0, r7
    b7d8:	f001 fb62 	bl	cea0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    b7dc:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    b7e0:	b2db      	uxtb	r3, r3
    b7e2:	2b01      	cmp	r3, #1
    b7e4:	d1e3      	bne.n	b7ae <z_nrf_clock_control_lf_on+0x82>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    b7e6:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    b7ea:	2a00      	cmp	r2, #0
    b7ec:	d0df      	beq.n	b7ae <z_nrf_clock_control_lf_on+0x82>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b7ee:	2200      	movs	r2, #0
    b7f0:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    b7f4:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    b7f8:	2202      	movs	r2, #2
    b7fa:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    b7fe:	2220      	movs	r2, #32
    b800:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b804:	60ab      	str	r3, [r5, #8]
}
    b806:	e7d2      	b.n	b7ae <z_nrf_clock_control_lf_on+0x82>
	return z_impl_k_sleep(timeout);
    b808:	2100      	movs	r1, #0
    b80a:	2021      	movs	r0, #33	; 0x21
    b80c:	f00c fee4 	bl	185d8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    b810:	e7e4      	b.n	b7dc <z_nrf_clock_control_lf_on+0xb0>
    p_reg->INTENSET = mask;
    b812:	2302      	movs	r3, #2
    b814:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
    b818:	e7da      	b.n	b7d0 <z_nrf_clock_control_lf_on+0xa4>
		__ASSERT_NO_MSG(false);
    b81a:	490c      	ldr	r1, [pc, #48]	; (b84c <z_nrf_clock_control_lf_on+0x120>)
    b81c:	480c      	ldr	r0, [pc, #48]	; (b850 <z_nrf_clock_control_lf_on+0x124>)
    b81e:	f44f 720e 	mov.w	r2, #568	; 0x238
    b822:	f00e f8e4 	bl	199ee <printk>
}
    b826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    b82a:	f44f 710e 	mov.w	r1, #568	; 0x238
    b82e:	4807      	ldr	r0, [pc, #28]	; (b84c <z_nrf_clock_control_lf_on+0x120>)
    b830:	f00e bb83 	b.w	19f3a <assert_post_action>
    p_reg->INTENCLR = mask;
    b834:	2202      	movs	r2, #2
    b836:	4b07      	ldr	r3, [pc, #28]	; (b854 <z_nrf_clock_control_lf_on+0x128>)
	int key = isr_mode ? irq_lock() : 0;
    b838:	4607      	mov	r7, r0
    b83a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    b83e:	e7b3      	b.n	b7a8 <z_nrf_clock_control_lf_on+0x7c>
    b840:	2000a6c0 	.word	0x2000a6c0
    b844:	2000a5fc 	.word	0x2000a5fc
    b848:	2000a62c 	.word	0x2000a62c
    b84c:	0001ee80 	.word	0x0001ee80
    b850:	0001ead7 	.word	0x0001ead7
    b854:	40005000 	.word	0x40005000
    b858:	2000c60b 	.word	0x2000c60b
    b85c:	e000e100 	.word	0xe000e100

0000b860 <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
    b860:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);

	int err;

	err = bt_rpmsg_platform_init();
    b862:	f000 f905 	bl	ba70 <bt_rpmsg_platform_init>
	if (err < 0) {
    b866:	1e04      	subs	r4, r0, #0
    b868:	da06      	bge.n	b878 <bt_rpmsg_init+0x18>
		BT_ERR("Failed to initialize BT RPMSG (err %d)", err);
    b86a:	4622      	mov	r2, r4
    b86c:	2145      	movs	r1, #69	; 0x45
    b86e:	4807      	ldr	r0, [pc, #28]	; (b88c <bt_rpmsg_init+0x2c>)
		return err;
	}

	err = bt_hci_driver_register(&drv);
	if (err < 0) {
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    b870:	f00e f8bd 	bl	199ee <printk>
	}

	return err;
}
    b874:	4620      	mov	r0, r4
    b876:	bd10      	pop	{r4, pc}
	err = bt_hci_driver_register(&drv);
    b878:	4805      	ldr	r0, [pc, #20]	; (b890 <bt_rpmsg_init+0x30>)
    b87a:	f003 fd95 	bl	f3a8 <bt_hci_driver_register>
	if (err < 0) {
    b87e:	1e04      	subs	r4, r0, #0
    b880:	daf8      	bge.n	b874 <bt_rpmsg_init+0x14>
		BT_ERR("Failed to register BT HIC driver (err %d)", err);
    b882:	4622      	mov	r2, r4
    b884:	2145      	movs	r1, #69	; 0x45
    b886:	4803      	ldr	r0, [pc, #12]	; (b894 <bt_rpmsg_init+0x34>)
    b888:	e7f2      	b.n	b870 <bt_rpmsg_init+0x10>
    b88a:	bf00      	nop
    b88c:	0001eef2 	.word	0x0001eef2
    b890:	0001daf0 	.word	0x0001daf0
    b894:	0001ef1e 	.word	0x0001ef1e

0000b898 <bt_rpmsg_send>:
{
    b898:	b510      	push	{r4, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    b89a:	7d02      	ldrb	r2, [r0, #20]
    b89c:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    b89e:	2a02      	cmp	r2, #2
    b8a0:	d00c      	beq.n	b8bc <bt_rpmsg_send+0x24>
    b8a2:	2a04      	cmp	r2, #4
    b8a4:	d009      	beq.n	b8ba <bt_rpmsg_send+0x22>
    b8a6:	b1b2      	cbz	r2, b8d6 <bt_rpmsg_send+0x3e>
		BT_ERR("Unknown type %u", bt_buf_get_type(buf));
    b8a8:	2145      	movs	r1, #69	; 0x45
    b8aa:	480c      	ldr	r0, [pc, #48]	; (b8dc <bt_rpmsg_send+0x44>)
		BT_ERR("Failed to send (err %d)", err);
    b8ac:	f00e f89f 	bl	199ee <printk>
	net_buf_unref(buf);
    b8b0:	4620      	mov	r0, r4
    b8b2:	f009 f829 	bl	14908 <net_buf_unref>
}
    b8b6:	2000      	movs	r0, #0
    b8b8:	bd10      	pop	{r4, pc}
		pkt_indicator = RPMSG_ISO;
    b8ba:	2205      	movs	r2, #5
 * @param buf Buffer to update.
 * @param val 8-bit value to be pushed to the buffer.
 */
static inline void net_buf_push_u8(struct net_buf *buf, uint8_t val)
{
	net_buf_simple_push_u8(&buf->b, val);
    b8bc:	4611      	mov	r1, r2
    b8be:	f104 0008 	add.w	r0, r4, #8
    b8c2:	f010 fdb3 	bl	1c42c <net_buf_simple_push_u8>
	err = bt_rpmsg_platform_send(buf);
    b8c6:	4620      	mov	r0, r4
    b8c8:	f000 f8ee 	bl	baa8 <bt_rpmsg_platform_send>
	if (err < 0) {
    b8cc:	1e02      	subs	r2, r0, #0
    b8ce:	daef      	bge.n	b8b0 <bt_rpmsg_send+0x18>
		BT_ERR("Failed to send (err %d)", err);
    b8d0:	2145      	movs	r1, #69	; 0x45
    b8d2:	4803      	ldr	r0, [pc, #12]	; (b8e0 <bt_rpmsg_send+0x48>)
    b8d4:	e7ea      	b.n	b8ac <bt_rpmsg_send+0x14>
	switch (bt_buf_get_type(buf)) {
    b8d6:	2201      	movs	r2, #1
    b8d8:	e7f0      	b.n	b8bc <bt_rpmsg_send+0x24>
    b8da:	bf00      	nop
    b8dc:	0001ef4d 	.word	0x0001ef4d
    b8e0:	0001ef62 	.word	0x0001ef62

0000b8e4 <bt_rpmsg_rx>:
{
    b8e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	pkt_indicator = *data++;
    b8e8:	4680      	mov	r8, r0
{
    b8ea:	4606      	mov	r6, r0
	pkt_indicator = *data++;
    b8ec:	f818 0b01 	ldrb.w	r0, [r8], #1
{
    b8f0:	460d      	mov	r5, r1
	switch (pkt_indicator) {
    b8f2:	2804      	cmp	r0, #4
	remaining -= sizeof(pkt_indicator);
    b8f4:	f101 33ff 	add.w	r3, r1, #4294967295
	switch (pkt_indicator) {
    b8f8:	d009      	beq.n	b90e <bt_rpmsg_rx+0x2a>
    b8fa:	2805      	cmp	r0, #5
    b8fc:	d074      	beq.n	b9e8 <bt_rpmsg_rx+0x104>
    b8fe:	2802      	cmp	r0, #2
    b900:	f040 8099 	bne.w	ba36 <bt_rpmsg_rx+0x152>
	if (remaining < sizeof(hdr)) {
    b904:	2b03      	cmp	r3, #3
    b906:	d84a      	bhi.n	b99e <bt_rpmsg_rx+0xba>
		BT_ERR("Not enough data for ACL header");
    b908:	2145      	movs	r1, #69	; 0x45
    b90a:	484f      	ldr	r0, [pc, #316]	; (ba48 <bt_rpmsg_rx+0x164>)
    b90c:	e003      	b.n	b916 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    b90e:	2b01      	cmp	r3, #1
    b910:	d806      	bhi.n	b920 <bt_rpmsg_rx+0x3c>
		BT_ERR("Not enough data for event header");
    b912:	2145      	movs	r1, #69	; 0x45
    b914:	484d      	ldr	r0, [pc, #308]	; (ba4c <bt_rpmsg_rx+0x168>)
}
    b916:	b002      	add	sp, #8
    b918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Not enough data for ACL header");
    b91c:	f00e b867 	b.w	199ee <printk>
	switch (evt_type) {
    b920:	7873      	ldrb	r3, [r6, #1]
    b922:	2b3e      	cmp	r3, #62	; 0x3e
    b924:	d117      	bne.n	b956 <bt_rpmsg_rx+0x72>
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
    b926:	78f7      	ldrb	r7, [r6, #3]
		switch (subevt_type) {
    b928:	2f02      	cmp	r7, #2
    b92a:	d016      	beq.n	b95a <bt_rpmsg_rx+0x76>
    b92c:	f1a7 030d 	sub.w	r3, r7, #13
    b930:	425f      	negs	r7, r3
    b932:	415f      	adcs	r7, r3
	memcpy((void *)&hdr, data, sizeof(hdr));
    b934:	2202      	movs	r2, #2
    b936:	4641      	mov	r1, r8
    b938:	a801      	add	r0, sp, #4
    b93a:	f00f fa98 	bl	1ae6e <memcpy>
	if (remaining != hdr.len) {
    b93e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	remaining -= sizeof(hdr);
    b942:	3d03      	subs	r5, #3
	if (remaining != hdr.len) {
    b944:	429d      	cmp	r5, r3
    b946:	d00a      	beq.n	b95e <bt_rpmsg_rx+0x7a>
		BT_ERR("Event payload length is not correct");
    b948:	2145      	movs	r1, #69	; 0x45
    b94a:	4841      	ldr	r0, [pc, #260]	; (ba50 <bt_rpmsg_rx+0x16c>)
			BT_ERR("No available event buffers!");
    b94c:	f00e f84f 	bl	199ee <printk>
}
    b950:	b002      	add	sp, #8
    b952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    b956:	2700      	movs	r7, #0
    b958:	e7ec      	b.n	b934 <bt_rpmsg_rx+0x50>
			return true;
    b95a:	2701      	movs	r7, #1
    b95c:	e7ea      	b.n	b934 <bt_rpmsg_rx+0x50>
	buf = bt_buf_get_evt(hdr.evt, discardable, K_NO_WAIT);
    b95e:	2200      	movs	r2, #0
    b960:	2300      	movs	r3, #0
    b962:	4639      	mov	r1, r7
    b964:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b968:	f002 f948 	bl	dbfc <bt_buf_get_evt>
	if (!buf) {
    b96c:	4604      	mov	r4, r0
    b96e:	b920      	cbnz	r0, b97a <bt_rpmsg_rx+0x96>
		if (discardable) {
    b970:	2f00      	cmp	r7, #0
    b972:	d1ed      	bne.n	b950 <bt_rpmsg_rx+0x6c>
			BT_ERR("No available event buffers!");
    b974:	2145      	movs	r1, #69	; 0x45
    b976:	4837      	ldr	r0, [pc, #220]	; (ba54 <bt_rpmsg_rx+0x170>)
    b978:	e7e8      	b.n	b94c <bt_rpmsg_rx+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b97a:	f100 0708 	add.w	r7, r0, #8
    b97e:	2202      	movs	r2, #2
    b980:	a901      	add	r1, sp, #4
    b982:	4638      	mov	r0, r7
    b984:	f010 fd75 	bl	1c472 <net_buf_simple_add_mem>
    b988:	462a      	mov	r2, r5
    b98a:	1cf1      	adds	r1, r6, #3
    b98c:	4638      	mov	r0, r7
    b98e:	f010 fd70 	bl	1c472 <net_buf_simple_add_mem>
		bt_recv(buf);
    b992:	4620      	mov	r0, r4
}
    b994:	b002      	add	sp, #8
    b996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv(buf);
    b99a:	f003 bcdb 	b.w	f354 <bt_recv>
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
    b99e:	2200      	movs	r2, #0
    b9a0:	2300      	movs	r3, #0
    b9a2:	2003      	movs	r0, #3
    b9a4:	f002 f8d8 	bl	db58 <bt_buf_get_rx>
	if (buf) {
    b9a8:	4604      	mov	r4, r0
    b9aa:	b1d0      	cbz	r0, b9e2 <bt_rpmsg_rx+0xfe>
		memcpy((void *)&hdr, data, sizeof(hdr));
    b9ac:	2204      	movs	r2, #4
    b9ae:	4641      	mov	r1, r8
    b9b0:	eb0d 0002 	add.w	r0, sp, r2
    b9b4:	f00f fa5b 	bl	1ae6e <memcpy>
    b9b8:	2204      	movs	r2, #4
    b9ba:	f104 0708 	add.w	r7, r4, #8
    b9be:	4638      	mov	r0, r7
    b9c0:	eb0d 0102 	add.w	r1, sp, r2
    b9c4:	f010 fd55 	bl	1c472 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    b9c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    b9cc:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    b9ce:	429d      	cmp	r5, r3
    b9d0:	d02e      	beq.n	ba30 <bt_rpmsg_rx+0x14c>
		BT_ERR("ACL payload length is not correct");
    b9d2:	2145      	movs	r1, #69	; 0x45
    b9d4:	4820      	ldr	r0, [pc, #128]	; (ba58 <bt_rpmsg_rx+0x174>)
		BT_ERR("ISO payload length is not correct");
    b9d6:	f00e f80a 	bl	199ee <printk>
		net_buf_unref(buf);
    b9da:	4620      	mov	r0, r4
    b9dc:	f008 ff94 	bl	14908 <net_buf_unref>
	if (buf) {
    b9e0:	e7b6      	b.n	b950 <bt_rpmsg_rx+0x6c>
		BT_ERR("No available ACL buffers!");
    b9e2:	2145      	movs	r1, #69	; 0x45
    b9e4:	481d      	ldr	r0, [pc, #116]	; (ba5c <bt_rpmsg_rx+0x178>)
    b9e6:	e796      	b.n	b916 <bt_rpmsg_rx+0x32>
	if (remaining < sizeof(hdr)) {
    b9e8:	2b03      	cmp	r3, #3
    b9ea:	d802      	bhi.n	b9f2 <bt_rpmsg_rx+0x10e>
		BT_ERR("Not enough data for ISO header");
    b9ec:	2145      	movs	r1, #69	; 0x45
    b9ee:	481c      	ldr	r0, [pc, #112]	; (ba60 <bt_rpmsg_rx+0x17c>)
    b9f0:	e791      	b.n	b916 <bt_rpmsg_rx+0x32>
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
    b9f2:	2200      	movs	r2, #0
    b9f4:	2300      	movs	r3, #0
    b9f6:	f002 f8af 	bl	db58 <bt_buf_get_rx>
	if (buf) {
    b9fa:	4604      	mov	r4, r0
    b9fc:	b1a8      	cbz	r0, ba2a <bt_rpmsg_rx+0x146>
		memcpy((void *)&hdr, data, sizeof(hdr));
    b9fe:	2204      	movs	r2, #4
    ba00:	4641      	mov	r1, r8
    ba02:	eb0d 0002 	add.w	r0, sp, r2
    ba06:	f00f fa32 	bl	1ae6e <memcpy>
    ba0a:	2204      	movs	r2, #4
    ba0c:	f104 0708 	add.w	r7, r4, #8
    ba10:	4638      	mov	r0, r7
    ba12:	eb0d 0102 	add.w	r1, sp, r2
    ba16:	f010 fd2c 	bl	1c472 <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    ba1a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		remaining -= sizeof(hdr);
    ba1e:	3d05      	subs	r5, #5
	if (remaining != sys_le16_to_cpu(hdr.len)) {
    ba20:	429d      	cmp	r5, r3
    ba22:	d005      	beq.n	ba30 <bt_rpmsg_rx+0x14c>
		BT_ERR("ISO payload length is not correct");
    ba24:	2145      	movs	r1, #69	; 0x45
    ba26:	480f      	ldr	r0, [pc, #60]	; (ba64 <bt_rpmsg_rx+0x180>)
    ba28:	e7d5      	b.n	b9d6 <bt_rpmsg_rx+0xf2>
		BT_ERR("No available ISO buffers!");
    ba2a:	2145      	movs	r1, #69	; 0x45
    ba2c:	480e      	ldr	r0, [pc, #56]	; (ba68 <bt_rpmsg_rx+0x184>)
    ba2e:	e772      	b.n	b916 <bt_rpmsg_rx+0x32>
    ba30:	462a      	mov	r2, r5
    ba32:	1d71      	adds	r1, r6, #5
    ba34:	e7aa      	b.n	b98c <bt_rpmsg_rx+0xa8>
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    ba36:	4602      	mov	r2, r0
    ba38:	2145      	movs	r1, #69	; 0x45
    ba3a:	480c      	ldr	r0, [pc, #48]	; (ba6c <bt_rpmsg_rx+0x188>)
}
    ba3c:	b002      	add	sp, #8
    ba3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_ERR("Unknown HCI type %u", pkt_indicator);
    ba42:	f00d bfd4 	b.w	199ee <printk>
    ba46:	bf00      	nop
    ba48:	0001efef 	.word	0x0001efef
    ba4c:	0001ef7f 	.word	0x0001ef7f
    ba50:	0001efa5 	.word	0x0001efa5
    ba54:	0001efce 	.word	0x0001efce
    ba58:	0001f032 	.word	0x0001f032
    ba5c:	0001f013 	.word	0x0001f013
    ba60:	0001f059 	.word	0x0001f059
    ba64:	0001f09c 	.word	0x0001f09c
    ba68:	0001f07d 	.word	0x0001f07d
    ba6c:	0001f0c3 	.word	0x0001f0c3

0000ba70 <bt_rpmsg_platform_init>:

	return RPMSG_SUCCESS;
}

int bt_rpmsg_platform_init(void)
{
    ba70:	b508      	push	{r3, lr}
	int err;

	err = rpmsg_service_register_endpoint("nrf_bt_hci", endpoint_cb);
    ba72:	4908      	ldr	r1, [pc, #32]	; (ba94 <bt_rpmsg_platform_init+0x24>)
    ba74:	4808      	ldr	r0, [pc, #32]	; (ba98 <bt_rpmsg_platform_init+0x28>)
    ba76:	f7ff fb89 	bl	b18c <rpmsg_service_register_endpoint>

	if (err < 0) {
    ba7a:	1e02      	subs	r2, r0, #0
    ba7c:	da05      	bge.n	ba8a <bt_rpmsg_platform_init+0x1a>
		LOG_ERR("Registering endpoint failed with %d", err);
    ba7e:	4807      	ldr	r0, [pc, #28]	; (ba9c <bt_rpmsg_platform_init+0x2c>)
    ba80:	2145      	movs	r1, #69	; 0x45
    ba82:	f00d ffb4 	bl	199ee <printk>
		return RPMSG_ERR_INIT;
    ba86:	4806      	ldr	r0, [pc, #24]	; (baa0 <bt_rpmsg_platform_init+0x30>)
	}

	endpoint_id = err;

	return RPMSG_SUCCESS;
}
    ba88:	bd08      	pop	{r3, pc}
	endpoint_id = err;
    ba8a:	4b06      	ldr	r3, [pc, #24]	; (baa4 <bt_rpmsg_platform_init+0x34>)
	return RPMSG_SUCCESS;
    ba8c:	2000      	movs	r0, #0
	endpoint_id = err;
    ba8e:	601a      	str	r2, [r3, #0]
	return RPMSG_SUCCESS;
    ba90:	e7fa      	b.n	ba88 <bt_rpmsg_platform_init+0x18>
    ba92:	bf00      	nop
    ba94:	0001a147 	.word	0x0001a147
    ba98:	0001f0f0 	.word	0x0001f0f0
    ba9c:	0001f0fb 	.word	0x0001f0fb
    baa0:	fffff82a 	.word	0xfffff82a
    baa4:	2000a6c4 	.word	0x2000a6c4

0000baa8 <bt_rpmsg_platform_send>:

int bt_rpmsg_platform_send(struct net_buf *buf)
{
	return rpmsg_service_send(endpoint_id, buf->data, buf->len);
    baa8:	4b02      	ldr	r3, [pc, #8]	; (bab4 <bt_rpmsg_platform_send+0xc>)
    baaa:	8982      	ldrh	r2, [r0, #12]
    baac:	6881      	ldr	r1, [r0, #8]
    baae:	6818      	ldr	r0, [r3, #0]
    bab0:	f7ff bb98 	b.w	b1e4 <rpmsg_service_send>
    bab4:	2000a6c4 	.word	0x2000a6c4

0000bab8 <bt_rpmsg_platform_endpoint_is_bound>:
}

int bt_rpmsg_platform_endpoint_is_bound(void)
{
    bab8:	b508      	push	{r3, lr}
	return rpmsg_service_endpoint_is_bound(endpoint_id);
    baba:	4b02      	ldr	r3, [pc, #8]	; (bac4 <bt_rpmsg_platform_endpoint_is_bound+0xc>)
    babc:	6818      	ldr	r0, [r3, #0]
    babe:	f7ff fb87 	bl	b1d0 <rpmsg_service_endpoint_is_bound>
}
    bac2:	bd08      	pop	{r3, pc}
    bac4:	2000a6c4 	.word	0x2000a6c4

0000bac8 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
    bac8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    baca:	4c06      	ldr	r4, [pc, #24]	; (bae4 <z_clock_isr+0x1c>)
    bacc:	4806      	ldr	r0, [pc, #24]	; (bae8 <z_clock_isr+0x20>)
    bace:	4621      	mov	r1, r4
    bad0:	2217      	movs	r2, #23
    bad2:	f00d ff8c 	bl	199ee <printk>
    bad6:	4620      	mov	r0, r4
}
    bad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    badc:	2117      	movs	r1, #23
    bade:	f00e ba2c 	b.w	19f3a <assert_post_action>
    bae2:	bf00      	nop
    bae4:	0001f138 	.word	0x0001f138
    bae8:	0001ead7 	.word	0x0001ead7

0000baec <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    baec:	4a04      	ldr	r2, [pc, #16]	; (bb00 <sys_clock_timeout_handler+0x14>)
    baee:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    baf0:	1ac8      	subs	r0, r1, r3
    baf2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    baf6:	4403      	add	r3, r0
    baf8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    bafa:	f00d ba83 	b.w	19004 <z_clock_announce>
    bafe:	bf00      	nop
    bb00:	2000a6d4 	.word	0x2000a6d4

0000bb04 <set_absolute_alarm>:
{
    bb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    bb08:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bb0c:	f04f 0900 	mov.w	r9, #0
    bb10:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    bb12:	f100 0450 	add.w	r4, r0, #80	; 0x50
    bb16:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
    bb1a:	00a4      	lsls	r4, r4, #2
    bb1c:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
    bb20:	b2a4      	uxth	r4, r4
    bb22:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
    bb26:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    bb2a:	f8df 806c 	ldr.w	r8, [pc, #108]	; bb98 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    bb2e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bb32:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    bb36:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    bb38:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    bb3c:	eba3 030a 	sub.w	r3, r3, sl
    bb40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    bb44:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    bb48:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    bb4a:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    bb4e:	d102      	bne.n	bb56 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    bb50:	2013      	movs	r0, #19
    bb52:	f011 fb37 	bl	1d1c4 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    bb56:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    bb5a:	1aab      	subs	r3, r5, r2
    bb5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    bb60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    bb64:	bf88      	it	hi
    bb66:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bb68:	f8c4 9000 	str.w	r9, [r4]
    bb6c:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    bb6e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    bb72:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    bb76:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    bb7a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    bb7e:	459a      	cmp	sl, r3
    bb80:	d006      	beq.n	bb90 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    bb82:	1aeb      	subs	r3, r5, r3
    bb84:	3b02      	subs	r3, #2
    bb86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    bb8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    bb8e:	d801      	bhi.n	bb94 <set_absolute_alarm+0x90>
}
    bb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    bb94:	462b      	mov	r3, r5
    bb96:	e7cf      	b.n	bb38 <set_absolute_alarm+0x34>
    bb98:	40015000 	.word	0x40015000

0000bb9c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    bb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    bb9e:	2500      	movs	r5, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bba0:	462f      	mov	r7, r5
    bba2:	4c10      	ldr	r4, [pc, #64]	; (bbe4 <rtc_nrf_isr+0x48>)
    bba4:	6826      	ldr	r6, [r4, #0]
    return p_reg->INTENSET & mask;
    bba6:	4b10      	ldr	r3, [pc, #64]	; (bbe8 <rtc_nrf_isr+0x4c>)
    bba8:	b105      	cbz	r5, bbac <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    bbaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bbac:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    bbb0:	03d2      	lsls	r2, r2, #15
    bbb2:	d5fa      	bpl.n	bbaa <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    bbb4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    bbb8:	2a00      	cmp	r2, #0
    bbba:	d0f6      	beq.n	bbaa <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    bbbc:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    bbc0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    bbc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    bbc8:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    bbcc:	2501      	movs	r5, #1
    return p_reg->CC[ch];
    bbce:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
			if (handler) {
    bbd2:	b126      	cbz	r6, bbde <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    bbd4:	2000      	movs	r0, #0
    bbd6:	6862      	ldr	r2, [r4, #4]
    bbd8:	6027      	str	r7, [r4, #0]
    bbda:	47b0      	blx	r6
    bbdc:	e7e2      	b.n	bba4 <rtc_nrf_isr+0x8>
    bbde:	6026      	str	r6, [r4, #0]
}
    bbe0:	e7e3      	b.n	bbaa <rtc_nrf_isr+0xe>
    bbe2:	bf00      	nop
    bbe4:	2000a6c8 	.word	0x2000a6c8
    bbe8:	40015000 	.word	0x40015000

0000bbec <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    bbec:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    bbee:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    bbf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    bbf4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    bbf8:	4c0c      	ldr	r4, [pc, #48]	; (bc2c <z_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    bbfa:	2101      	movs	r1, #1
    bbfc:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    bc00:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    bc04:	4b0a      	ldr	r3, [pc, #40]	; (bc30 <z_clock_driver_init+0x44>)
    bc06:	2015      	movs	r0, #21
    bc08:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    bc0c:	462a      	mov	r2, r5
    bc0e:	f001 f8d7 	bl	cdc0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    bc12:	2015      	movs	r0, #21
    bc14:	f001 f8b6 	bl	cd84 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    bc18:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    bc1a:	4a06      	ldr	r2, [pc, #24]	; (bc34 <z_clock_driver_init+0x48>)
    bc1c:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    bc1e:	2002      	movs	r0, #2
    bc20:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    bc22:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    bc24:	f7ff fd82 	bl	b72c <z_nrf_clock_control_lf_on>

	return 0;
}
    bc28:	4628      	mov	r0, r5
    bc2a:	bd38      	pop	{r3, r4, r5, pc}
    bc2c:	40015000 	.word	0x40015000
    bc30:	e000e100 	.word	0xe000e100
    bc34:	2000a6d0 	.word	0x2000a6d0

0000bc38 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    bc38:	4a13      	ldr	r2, [pc, #76]	; (bc88 <z_clock_set_timeout+0x50>)
    bc3a:	f1b0 3fff 	cmp.w	r0, #4294967295
    bc3e:	bf14      	ite	ne
    bc40:	4603      	movne	r3, r0
    bc42:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    bc44:	3b01      	subs	r3, #1
    bc46:	2b00      	cmp	r3, #0
    bc48:	dd1c      	ble.n	bc84 <z_clock_set_timeout+0x4c>
    bc4a:	4293      	cmp	r3, r2
    bc4c:	bfa8      	it	ge
    bc4e:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    bc50:	4a0e      	ldr	r2, [pc, #56]	; (bc8c <z_clock_set_timeout+0x54>)
    bc52:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    bc56:	4a0e      	ldr	r2, [pc, #56]	; (bc90 <z_clock_set_timeout+0x58>)
    bc58:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    bc5a:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    bc5c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    bc60:	bf18      	it	ne
    bc62:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
    bc64:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    bc68:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    bc6a:	480a      	ldr	r0, [pc, #40]	; (bc94 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    bc6c:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    bc6e:	4a0a      	ldr	r2, [pc, #40]	; (bc98 <z_clock_set_timeout+0x60>)
    bc70:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    bc72:	2000      	movs	r0, #0
    bc74:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    bc76:	4a04      	ldr	r2, [pc, #16]	; (bc88 <z_clock_set_timeout+0x50>)
    bc78:	4293      	cmp	r3, r2
    bc7a:	bf94      	ite	ls
    bc7c:	18c9      	addls	r1, r1, r3
    bc7e:	1889      	addhi	r1, r1, r2
    bc80:	f7ff bf40 	b.w	bb04 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    bc84:	2300      	movs	r3, #0
    bc86:	e7e3      	b.n	bc50 <z_clock_set_timeout+0x18>
    bc88:	007fffff 	.word	0x007fffff
    bc8c:	40015000 	.word	0x40015000
    bc90:	2000a6d4 	.word	0x2000a6d4
    bc94:	0000baed 	.word	0x0000baed
    bc98:	2000a6c8 	.word	0x2000a6c8

0000bc9c <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
    bc9c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    bc9e:	f04f 0320 	mov.w	r3, #32
    bca2:	f3ef 8511 	mrs	r5, BASEPRI
    bca6:	f383 8811 	msr	BASEPRI, r3
    bcaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bcae:	4815      	ldr	r0, [pc, #84]	; (bd04 <z_clock_elapsed+0x68>)
    bcb0:	f00c feb4 	bl	18a1c <z_spin_lock_valid>
    bcb4:	b940      	cbnz	r0, bcc8 <z_clock_elapsed+0x2c>
    bcb6:	4914      	ldr	r1, [pc, #80]	; (bd08 <z_clock_elapsed+0x6c>)
    bcb8:	4814      	ldr	r0, [pc, #80]	; (bd0c <z_clock_elapsed+0x70>)
    bcba:	227c      	movs	r2, #124	; 0x7c
    bcbc:	f00d fe97 	bl	199ee <printk>
    bcc0:	217c      	movs	r1, #124	; 0x7c
    bcc2:	4811      	ldr	r0, [pc, #68]	; (bd08 <z_clock_elapsed+0x6c>)
    bcc4:	f00e f939 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
    bcc8:	480e      	ldr	r0, [pc, #56]	; (bd04 <z_clock_elapsed+0x68>)
    bcca:	f00c fec3 	bl	18a54 <z_spin_lock_set_owner>
    bcce:	4b10      	ldr	r3, [pc, #64]	; (bd10 <z_clock_elapsed+0x74>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bcd0:	480c      	ldr	r0, [pc, #48]	; (bd04 <z_clock_elapsed+0x68>)
    bcd2:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    bcd6:	4b0f      	ldr	r3, [pc, #60]	; (bd14 <z_clock_elapsed+0x78>)
	return (a - b) & COUNTER_MAX;
    bcd8:	681b      	ldr	r3, [r3, #0]
    bcda:	1ae4      	subs	r4, r4, r3
    bcdc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    bce0:	f00c feaa 	bl	18a38 <z_spin_unlock_valid>
    bce4:	b940      	cbnz	r0, bcf8 <z_clock_elapsed+0x5c>
    bce6:	4908      	ldr	r1, [pc, #32]	; (bd08 <z_clock_elapsed+0x6c>)
    bce8:	4808      	ldr	r0, [pc, #32]	; (bd0c <z_clock_elapsed+0x70>)
    bcea:	22a7      	movs	r2, #167	; 0xa7
    bcec:	f00d fe7f 	bl	199ee <printk>
    bcf0:	21a7      	movs	r1, #167	; 0xa7
    bcf2:	4805      	ldr	r0, [pc, #20]	; (bd08 <z_clock_elapsed+0x6c>)
    bcf4:	f00e f921 	bl	19f3a <assert_post_action>
	__asm__ volatile(
    bcf8:	f385 8811 	msr	BASEPRI, r5
    bcfc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    bd00:	4620      	mov	r0, r4
    bd02:	bd38      	pop	{r3, r4, r5, pc}
    bd04:	2000a6d8 	.word	0x2000a6d8
    bd08:	0001eb11 	.word	0x0001eb11
    bd0c:	0001ead7 	.word	0x0001ead7
    bd10:	40015000 	.word	0x40015000
    bd14:	2000a6d4 	.word	0x2000a6d4

0000bd18 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
    bd18:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = (len + DATA_ALIGN - 1) & ~(DATA_ALIGN - 1);
    bd1a:	1cc5      	adds	r5, r0, #3
    bd1c:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
    bd20:	2d74      	cmp	r5, #116	; 0x74
    bd22:	d908      	bls.n	bd36 <user_data_alloc.constprop.0+0x1e>
    bd24:	4917      	ldr	r1, [pc, #92]	; (bd84 <user_data_alloc.constprop.0+0x6c>)
    bd26:	4818      	ldr	r0, [pc, #96]	; (bd88 <user_data_alloc.constprop.0+0x70>)
    bd28:	2250      	movs	r2, #80	; 0x50
    bd2a:	f00d fe60 	bl	199ee <printk>
    bd2e:	2150      	movs	r1, #80	; 0x50
    bd30:	4814      	ldr	r0, [pc, #80]	; (bd84 <user_data_alloc.constprop.0+0x6c>)
    bd32:	f00e f902 	bl	19f3a <assert_post_action>
	return list->head;
    bd36:	4c15      	ldr	r4, [pc, #84]	; (bd8c <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
    bd38:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
    bd3c:	b123      	cbz	r3, bd48 <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
    bd3e:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    bd42:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
    bd44:	2b74      	cmp	r3, #116	; 0x74
    bd46:	d919      	bls.n	bd7c <user_data_alloc.constprop.0+0x64>
	return k_aligned_alloc(sizeof(void *), size);
    bd48:	2178      	movs	r1, #120	; 0x78
    bd4a:	2004      	movs	r0, #4
    bd4c:	f00d fd56 	bl	197fc <k_aligned_alloc>

		item = k_malloc(sizeof(struct data_chunk_item));

		if (!item) {
    bd50:	b178      	cbz	r0, bd72 <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
    bd52:	2300      	movs	r3, #0
	return list->tail;
    bd54:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	parent->next = child;
    bd58:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    bd5a:	b95a      	cbnz	r2, bd74 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
    bd5c:	e9c4 004f 	strd	r0, r0, [r4, #316]	; 0x13c
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
    bd60:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
    bd64:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
    bd68:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
    bd6a:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
    bd6c:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
    bd6e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144

	return user_data_loc;
}
    bd72:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
    bd74:	6010      	str	r0, [r2, #0]
	list->tail = node;
    bd76:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
}
    bd7a:	e7f1      	b.n	bd60 <user_data_alloc.constprop.0+0x48>
	return list->tail;
    bd7c:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    bd80:	e7f0      	b.n	bd64 <user_data_alloc.constprop.0+0x4c>
    bd82:	bf00      	nop
    bd84:	0001f1a5 	.word	0x0001f1a5
    bd88:	0001ead7 	.word	0x0001ead7
    bd8c:	2000a6dc 	.word	0x2000a6dc

0000bd90 <discovery_complete.constprop.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bd90:	4808      	ldr	r0, [pc, #32]	; (bdb4 <discovery_complete.constprop.0+0x24>)
    bd92:	f500 739c 	add.w	r3, r0, #312	; 0x138
    bd96:	e8d3 2fef 	ldaex	r2, [r3]
    bd9a:	f042 0202 	orr.w	r2, r2, #2
    bd9e:	e8c3 2fe1 	stlex	r1, r2, [r3]
    bda2:	2900      	cmp	r1, #0
    bda4:	d1f7      	bne.n	bd96 <discovery_complete.constprop.0+0x6>

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
    bda6:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
    bdaa:	681b      	ldr	r3, [r3, #0]
    bdac:	b10b      	cbz	r3, bdb2 <discovery_complete.constprop.0+0x22>
		dm->callback->completed(dm, dm->context);
    bdae:	6841      	ldr	r1, [r0, #4]
    bdb0:	4718      	bx	r3
	}
}
    bdb2:	4770      	bx	lr
    bdb4:	2000a6dc 	.word	0x2000a6dc

0000bdb8 <discovery_complete_error.constprop.0>:
	if (dm->callback->service_not_found) {
		dm->callback->service_not_found(dm->conn, dm->context);
	}
}

static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    bdb8:	b570      	push	{r4, r5, r6, lr}
{
	svc_attr_memory_release(dm);
    bdba:	4c0b      	ldr	r4, [pc, #44]	; (bde8 <discovery_complete_error.constprop.0+0x30>)
static void discovery_complete_error(struct bt_gatt_dm *dm, int err)
    bdbc:	4605      	mov	r5, r0
	svc_attr_memory_release(dm);
    bdbe:	4620      	mov	r0, r4
    bdc0:	f00e f9e7 	bl	1a192 <svc_attr_memory_release>
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bdc4:	f06f 0101 	mvn.w	r1, #1
    bdc8:	f504 709c 	add.w	r0, r4, #312	; 0x138
    bdcc:	f00e f9f8 	bl	1a1c0 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	if (dm->callback->error_found) {
    bdd0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    bdd4:	689b      	ldr	r3, [r3, #8]
    bdd6:	b12b      	cbz	r3, bde4 <discovery_complete_error.constprop.0+0x2c>
		dm->callback->error_found(dm->conn, err, dm->context);
    bdd8:	4629      	mov	r1, r5
    bdda:	6862      	ldr	r2, [r4, #4]
    bddc:	6820      	ldr	r0, [r4, #0]
	}
}
    bdde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
    bde2:	4718      	bx	r3
}
    bde4:	bd70      	pop	{r4, r5, r6, pc}
    bde6:	bf00      	nop
    bde8:	2000a6dc 	.word	0x2000a6dc

0000bdec <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    bdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    bdf0:	4c1f      	ldr	r4, [pc, #124]	; (be70 <attr_store.constprop.0+0x84>)
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    bdf2:	4607      	mov	r7, r0
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    bdf4:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
    bdf8:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
    bdfa:	2b22      	cmp	r3, #34	; 0x22
    bdfc:	d907      	bls.n	be0e <attr_store.constprop.0+0x22>
		LOG_ERR("No space for new attribute.");
    bdfe:	2145      	movs	r1, #69	; 0x45
    be00:	481c      	ldr	r0, [pc, #112]	; (be74 <attr_store.constprop.0+0x88>)
    be02:	f00d fdf4 	bl	199ee <printk>
		return NULL;
    be06:	2500      	movs	r5, #0
}
    be08:	4628      	mov	r0, r5
    be0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
    be0e:	6803      	ldr	r3, [r0, #0]
    be10:	781b      	ldrb	r3, [r3, #0]
	switch (uuid->type) {
    be12:	2b02      	cmp	r3, #2
    be14:	d80d      	bhi.n	be32 <attr_store.constprop.0+0x46>
    be16:	4a18      	ldr	r2, [pc, #96]	; (be78 <attr_store.constprop.0+0x8c>)
    be18:	f812 9003 	ldrb.w	r9, [r2, r3]
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
    be1c:	eb06 0009 	add.w	r0, r6, r9
    be20:	f7ff ff7a 	bl	bd18 <user_data_alloc.constprop.0>
	if (!attr_data) {
    be24:	4605      	mov	r5, r0
    be26:	b958      	cbnz	r0, be40 <attr_store.constprop.0+0x54>
		LOG_ERR("No space for attribute data.");
    be28:	2145      	movs	r1, #69	; 0x45
    be2a:	4814      	ldr	r0, [pc, #80]	; (be7c <attr_store.constprop.0+0x90>)
    be2c:	f00d fddf 	bl	199ee <printk>
		return NULL;
    be30:	e7ea      	b.n	be08 <attr_store.constprop.0+0x1c>
		LOG_ERR("Unsupported UUID type.");
    be32:	2145      	movs	r1, #69	; 0x45
    be34:	4812      	ldr	r0, [pc, #72]	; (be80 <attr_store.constprop.0+0x94>)
    be36:	f00d fdda 	bl	199ee <printk>
    be3a:	f04f 0900 	mov.w	r9, #0
    be3e:	e7ed      	b.n	be1c <attr_store.constprop.0+0x30>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    be40:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    be44:	4430      	add	r0, r6
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
    be46:	1c5a      	adds	r2, r3, #1
    be48:	3303      	adds	r3, #3
    be4a:	00db      	lsls	r3, r3, #3
    be4c:	f103 0804 	add.w	r8, r3, #4
    be50:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
    be54:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
    be56:	441c      	add	r4, r3
    be58:	8a3b      	ldrh	r3, [r7, #16]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    be5a:	464a      	mov	r2, r9
	cur_attr->handle = attr->handle;
    be5c:	8123      	strh	r3, [r4, #8]
	cur_attr->perm = attr->perm;
    be5e:	7cbb      	ldrb	r3, [r7, #18]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    be60:	6839      	ldr	r1, [r7, #0]
	cur_attr->perm = attr->perm;
    be62:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
    be64:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
    be66:	f00f f802 	bl	1ae6e <memcpy>
	return cur_attr;
    be6a:	4645      	mov	r5, r8
    be6c:	e7cc      	b.n	be08 <attr_store.constprop.0+0x1c>
    be6e:	bf00      	nop
    be70:	2000a6dc 	.word	0x2000a6dc
    be74:	0001f1d0 	.word	0x0001f1d0
    be78:	0001f39b 	.word	0x0001f39b
    be7c:	0001f20d 	.word	0x0001f20d
    be80:	0001f1f1 	.word	0x0001f1f1

0000be84 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
    be84:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
    be86:	4604      	mov	r4, r0
    be88:	b930      	cbnz	r0, be98 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
    be8a:	2145      	movs	r1, #69	; 0x45
    be8c:	480c      	ldr	r0, [pc, #48]	; (bec0 <uuid_store.constprop.0+0x3c>)
    be8e:	f00d fdae 	bl	199ee <printk>
    be92:	4625      	mov	r5, r4
}
    be94:	4628      	mov	r0, r5
    be96:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
    be98:	7803      	ldrb	r3, [r0, #0]
	switch (uuid->type) {
    be9a:	2b02      	cmp	r3, #2
    be9c:	d80a      	bhi.n	beb4 <uuid_store.constprop.0+0x30>
    be9e:	4a09      	ldr	r2, [pc, #36]	; (bec4 <uuid_store.constprop.0+0x40>)
    bea0:	5cd6      	ldrb	r6, [r2, r3]
	void *buffer = user_data_alloc(dm, size);
    bea2:	4630      	mov	r0, r6
    bea4:	f7ff ff38 	bl	bd18 <user_data_alloc.constprop.0>
	memcpy(buffer, uuid, size);
    bea8:	4632      	mov	r2, r6
    beaa:	4621      	mov	r1, r4
	void *buffer = user_data_alloc(dm, size);
    beac:	4605      	mov	r5, r0
	memcpy(buffer, uuid, size);
    beae:	f00e ffde 	bl	1ae6e <memcpy>
	return (struct bt_uuid *)buffer;
    beb2:	e7ef      	b.n	be94 <uuid_store.constprop.0+0x10>
		LOG_ERR("Unsupported UUID type.");
    beb4:	2145      	movs	r1, #69	; 0x45
    beb6:	4804      	ldr	r0, [pc, #16]	; (bec8 <uuid_store.constprop.0+0x44>)
    beb8:	f00d fd99 	bl	199ee <printk>
    bebc:	2600      	movs	r6, #0
    bebe:	e7f0      	b.n	bea2 <uuid_store.constprop.0+0x1e>
    bec0:	0001f22f 	.word	0x0001f22f
    bec4:	0001f39b 	.word	0x0001f39b
    bec8:	0001f1f1 	.word	0x0001f1f1

0000becc <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
    becc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
    bed0:	4e79      	ldr	r6, [pc, #484]	; (c0b8 <discovery_callback+0x1ec>)
{
    bed2:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
    bed4:	6833      	ldr	r3, [r6, #0]
    bed6:	4283      	cmp	r3, r0
    bed8:	d008      	beq.n	beec <discovery_callback+0x20>
		LOG_ERR("Unexpected conn object. Aborting.");
    beda:	4878      	ldr	r0, [pc, #480]	; (c0bc <discovery_callback+0x1f0>)
    bedc:	2145      	movs	r1, #69	; 0x45
    bede:	f00d fd86 	bl	199ee <printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
    bee2:	f06f 000d 	mvn.w	r0, #13
				discovery_complete_error(dm, err);
    bee6:	f7ff ff67 	bl	bdb8 <discovery_complete_error.constprop.0>
    beea:	e031      	b.n	bf50 <discovery_callback+0x84>
    beec:	7c13      	ldrb	r3, [r2, #16]
		return BT_GATT_ITER_STOP;
	}

	switch (params->type) {
    beee:	2b03      	cmp	r3, #3
    bef0:	f000 80ae 	beq.w	c050 <discovery_callback+0x184>
    bef4:	d80d      	bhi.n	bf12 <discovery_callback+0x46>
    bef6:	2b02      	cmp	r3, #2
    bef8:	d126      	bne.n	bf48 <discovery_callback+0x7c>
		return discovery_process_characteristic(&bt_gatt_dm_inst,
							attr,
							params);
	default:
		/* This should not be possible */
		__ASSERT(false, "Unknown param type.");
    befa:	f240 12b3 	movw	r2, #435	; 0x1b3
    befe:	4970      	ldr	r1, [pc, #448]	; (c0c0 <discovery_callback+0x1f4>)
    bf00:	4870      	ldr	r0, [pc, #448]	; (c0c4 <discovery_callback+0x1f8>)
    bf02:	f00d fd74 	bl	199ee <printk>
    bf06:	f240 11b3 	movw	r1, #435	; 0x1b3
    bf0a:	486d      	ldr	r0, [pc, #436]	; (c0c0 <discovery_callback+0x1f4>)
    bf0c:	f00e f815 	bl	19f3a <assert_post_action>
    bf10:	e01e      	b.n	bf50 <discovery_callback+0x84>
	switch (params->type) {
    bf12:	2b05      	cmp	r3, #5
    bf14:	d1f1      	bne.n	befa <discovery_callback+0x2e>
	if (!attr) {
    bf16:	2900      	cmp	r1, #0
    bf18:	f040 8081 	bne.w	c01e <discovery_callback+0x152>
		if (dm->cur_attr_id > 1) {
    bf1c:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
    bf20:	2b01      	cmp	r3, #1
    bf22:	d979      	bls.n	c018 <discovery_callback+0x14c>
				dm->attrs[0].handle + 1;
    bf24:	8c33      	ldrh	r3, [r6, #32]
			int err = bt_gatt_discover(dm->conn,
    bf26:	f106 0108 	add.w	r1, r6, #8
				dm->attrs[0].handle + 1;
    bf2a:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
    bf2c:	8233      	strh	r3, [r6, #16]
			dm->discover_params.type =
    bf2e:	2303      	movs	r3, #3
    bf30:	7633      	strb	r3, [r6, #24]
			int err = bt_gatt_discover(dm->conn,
    bf32:	f007 fcbd 	bl	138b0 <bt_gatt_discover>
			if (err) {
    bf36:	4604      	mov	r4, r0
    bf38:	b150      	cbz	r0, bf50 <discovery_callback+0x84>
				LOG_ERR("Characteristic discover failed,"
    bf3a:	4602      	mov	r2, r0
    bf3c:	2145      	movs	r1, #69	; 0x45
    bf3e:	4862      	ldr	r0, [pc, #392]	; (c0c8 <discovery_callback+0x1fc>)
    bf40:	f00d fd55 	bl	199ee <printk>
				discovery_complete_error(dm, err);
    bf44:	4620      	mov	r0, r4
    bf46:	e7ce      	b.n	bee6 <discovery_callback+0x1a>
	if (!attr) {
    bf48:	b921      	cbnz	r1, bf54 <discovery_callback+0x88>
		discovery_complete_not_found(dm);
    bf4a:	4630      	mov	r0, r6
    bf4c:	f00e f943 	bl	1a1d6 <discovery_complete_not_found>
		break;
	}

	return BT_GATT_ITER_STOP;
    bf50:	2400      	movs	r4, #0
    bf52:	e04a      	b.n	bfea <discovery_callback+0x11e>
	struct bt_gatt_service_val *service_val = attr->user_data;
    bf54:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
    bf58:	4628      	mov	r0, r5
    bf5a:	2108      	movs	r1, #8
    bf5c:	f7ff ff46 	bl	bdec <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    bf60:	2400      	movs	r4, #0
    bf62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
		attr_store(dm, attr, sizeof(*service_val));
    bf66:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
    bf68:	4669      	mov	r1, sp
    bf6a:	6828      	ldr	r0, [r5, #0]
    bf6c:	f88d 4000 	strb.w	r4, [sp]
    bf70:	f8ad 3002 	strh.w	r3, [sp, #2]
    bf74:	f00e fff0 	bl	1af58 <bt_uuid_cmp>
    bf78:	b1a8      	cbz	r0, bfa6 <discovery_callback+0xda>
    bf7a:	f642 0301 	movw	r3, #10241	; 0x2801
    bf7e:	6828      	ldr	r0, [r5, #0]
    bf80:	a901      	add	r1, sp, #4
    bf82:	f88d 4004 	strb.w	r4, [sp, #4]
    bf86:	f8ad 3006 	strh.w	r3, [sp, #6]
    bf8a:	f00e ffe5 	bl	1af58 <bt_uuid_cmp>
    bf8e:	b150      	cbz	r0, bfa6 <discovery_callback+0xda>
    bf90:	494b      	ldr	r1, [pc, #300]	; (c0c0 <discovery_callback+0x1f4>)
    bf92:	484c      	ldr	r0, [pc, #304]	; (c0c4 <discovery_callback+0x1f8>)
    bf94:	f240 1217 	movw	r2, #279	; 0x117
    bf98:	f00d fd29 	bl	199ee <printk>
    bf9c:	f240 1117 	movw	r1, #279	; 0x117
    bfa0:	4847      	ldr	r0, [pc, #284]	; (c0c0 <discovery_callback+0x1f4>)
    bfa2:	f00d ffca 	bl	19f3a <assert_post_action>
	if (!cur_attr) {
    bfa6:	b937      	cbnz	r7, bfb6 <discovery_callback+0xea>
		LOG_ERR("Not enough memory for service attribute.");
    bfa8:	4848      	ldr	r0, [pc, #288]	; (c0cc <discovery_callback+0x200>)
    bfaa:	2145      	movs	r1, #69	; 0x45
    bfac:	f00d fd1f 	bl	199ee <printk>
		discovery_complete_error(dm, -ENOMEM);
    bfb0:	f06f 000b 	mvn.w	r0, #11
    bfb4:	e797      	b.n	bee6 <discovery_callback+0x1a>
		bt_gatt_dm_attr_service_val(cur_attr);
    bfb6:	4638      	mov	r0, r7
    bfb8:	f00e f921 	bl	1a1fe <bt_gatt_dm_attr_service_val>
    bfbc:	4605      	mov	r5, r0
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
    bfbe:	2208      	movs	r2, #8
    bfc0:	4641      	mov	r1, r8
    bfc2:	f00e ff54 	bl	1ae6e <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
    bfc6:	6828      	ldr	r0, [r5, #0]
    bfc8:	f7ff ff5c 	bl	be84 <uuid_store.constprop.0>
    bfcc:	4604      	mov	r4, r0
    bfce:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
    bfd0:	b930      	cbnz	r0, bfe0 <discovery_callback+0x114>
		LOG_ERR("Not enough memory for service attribute data.");
    bfd2:	2145      	movs	r1, #69	; 0x45
    bfd4:	483e      	ldr	r0, [pc, #248]	; (c0d0 <discovery_callback+0x204>)
    bfd6:	f00d fd0a 	bl	199ee <printk>
		discovery_complete_error(dm, -ENOMEM);
    bfda:	f06f 000b 	mvn.w	r0, #11
    bfde:	e058      	b.n	c092 <discovery_callback+0x1c6>
	if (cur_attr->handle == cur_service_val->end_handle) {
    bfe0:	88bb      	ldrh	r3, [r7, #4]
    bfe2:	88aa      	ldrh	r2, [r5, #4]
    bfe4:	4293      	cmp	r3, r2
    bfe6:	d104      	bne.n	bff2 <discovery_callback+0x126>
		return BT_GATT_ITER_CONTINUE;
    bfe8:	2401      	movs	r4, #1
}
    bfea:	4620      	mov	r0, r4
    bfec:	b002      	add	sp, #8
    bfee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    bff2:	2105      	movs	r1, #5
	dm->discover_params.uuid         = NULL;
    bff4:	2400      	movs	r4, #0
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
    bff6:	7631      	strb	r1, [r6, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    bff8:	3301      	adds	r3, #1
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    bffa:	4936      	ldr	r1, [pc, #216]	; (c0d4 <discovery_callback+0x208>)
    bffc:	6830      	ldr	r0, [r6, #0]
	dm->discover_params.end_handle   = cur_service_val->end_handle;
    bffe:	82f2      	strh	r2, [r6, #22]
	dm->discover_params.uuid         = NULL;
    c000:	60b4      	str	r4, [r6, #8]
	dm->discover_params.start_handle = cur_attr->handle + 1;
    c002:	8233      	strh	r3, [r6, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
    c004:	f007 fc54 	bl	138b0 <bt_gatt_discover>
	if (err) {
    c008:	4602      	mov	r2, r0
    c00a:	2800      	cmp	r0, #0
    c00c:	d0a0      	beq.n	bf50 <discovery_callback+0x84>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
    c00e:	2145      	movs	r1, #69	; 0x45
    c010:	4831      	ldr	r0, [pc, #196]	; (c0d8 <discovery_callback+0x20c>)
		LOG_ERR("Not enough memory for next attribute descriptor"
    c012:	f00d fcec 	bl	199ee <printk>
		discovery_complete_error(dm, -ENOMEM);
    c016:	e7e0      	b.n	bfda <discovery_callback+0x10e>
			discovery_complete(dm);
    c018:	f7ff feba 	bl	bd90 <discovery_complete.constprop.0>
    c01c:	e798      	b.n	bf50 <discovery_callback+0x84>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
    c01e:	2400      	movs	r4, #0
    c020:	f642 0303 	movw	r3, #10243	; 0x2803
    c024:	6828      	ldr	r0, [r5, #0]
    c026:	a901      	add	r1, sp, #4
    c028:	f88d 4004 	strb.w	r4, [sp, #4]
    c02c:	f8ad 3006 	strh.w	r3, [sp, #6]
    c030:	f00e ff92 	bl	1af58 <bt_uuid_cmp>
    c034:	b950      	cbnz	r0, c04c <discovery_callback+0x180>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
    c036:	2108      	movs	r1, #8
		cur_attr = attr_store(dm, attr, 0);
    c038:	4628      	mov	r0, r5
    c03a:	f7ff fed7 	bl	bdec <attr_store.constprop.0>
    c03e:	4604      	mov	r4, r0
	if (!cur_attr) {
    c040:	2800      	cmp	r0, #0
    c042:	d1d1      	bne.n	bfe8 <discovery_callback+0x11c>
		LOG_ERR("Not enough memory for next attribute descriptor"
    c044:	2145      	movs	r1, #69	; 0x45
    c046:	8a2a      	ldrh	r2, [r5, #16]
    c048:	4824      	ldr	r0, [pc, #144]	; (c0dc <discovery_callback+0x210>)
    c04a:	e7e2      	b.n	c012 <discovery_callback+0x146>
		cur_attr = attr_store(dm, attr, 0);
    c04c:	4621      	mov	r1, r4
    c04e:	e7f3      	b.n	c038 <discovery_callback+0x16c>
	if (!attr) {
    c050:	2900      	cmp	r1, #0
    c052:	d0e1      	beq.n	c018 <discovery_callback+0x14c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
    c054:	2300      	movs	r3, #0
    c056:	f88d 3004 	strb.w	r3, [sp, #4]
    c05a:	f642 0303 	movw	r3, #10243	; 0x2803
    c05e:	6828      	ldr	r0, [r5, #0]
    c060:	a901      	add	r1, sp, #4
    c062:	f8ad 3006 	strh.w	r3, [sp, #6]
    c066:	f00e ff77 	bl	1af58 <bt_uuid_cmp>
    c06a:	b150      	cbz	r0, c082 <discovery_callback+0x1b6>
    c06c:	4914      	ldr	r1, [pc, #80]	; (c0c0 <discovery_callback+0x1f4>)
    c06e:	4815      	ldr	r0, [pc, #84]	; (c0c4 <discovery_callback+0x1f8>)
    c070:	f44f 72c0 	mov.w	r2, #384	; 0x180
    c074:	f00d fcbb 	bl	199ee <printk>
    c078:	f44f 71c0 	mov.w	r1, #384	; 0x180
    c07c:	4810      	ldr	r0, [pc, #64]	; (c0c0 <discovery_callback+0x1f4>)
    c07e:	f00d ff5c 	bl	19f3a <assert_post_action>
	cur_attr = attr_find_by_handle(dm, attr->handle);
    c082:	8a29      	ldrh	r1, [r5, #16]
    c084:	480c      	ldr	r0, [pc, #48]	; (c0b8 <discovery_callback+0x1ec>)
    c086:	f00e f866 	bl	1a156 <attr_find_by_handle>
	if (!cur_attr) {
    c08a:	4604      	mov	r4, r0
    c08c:	b920      	cbnz	r0, c098 <discovery_callback+0x1cc>
		discovery_complete_error(dm, -ESRCH);
    c08e:	f06f 0002 	mvn.w	r0, #2
		discovery_complete_error(dm, -ENOMEM);
    c092:	f7ff fe91 	bl	bdb8 <discovery_complete_error.constprop.0>
		return BT_GATT_ITER_STOP;
    c096:	e7a8      	b.n	bfea <discovery_callback+0x11e>
	gatt_chrc = attr->user_data;
    c098:	68ec      	ldr	r4, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
    c09a:	f00e f8d0 	bl	1a23e <bt_gatt_dm_attr_chrc_val>
    c09e:	4605      	mov	r5, r0
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
    c0a0:	4621      	mov	r1, r4
    c0a2:	2208      	movs	r2, #8
    c0a4:	f00e fee3 	bl	1ae6e <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
    c0a8:	6828      	ldr	r0, [r5, #0]
    c0aa:	f7ff feeb 	bl	be84 <uuid_store.constprop.0>
    c0ae:	4604      	mov	r4, r0
    c0b0:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
    c0b2:	2800      	cmp	r0, #0
    c0b4:	d198      	bne.n	bfe8 <discovery_callback+0x11c>
    c0b6:	e790      	b.n	bfda <discovery_callback+0x10e>
    c0b8:	2000a6dc 	.word	0x2000a6dc
    c0bc:	0001f248 	.word	0x0001f248
    c0c0:	0001f1a5 	.word	0x0001f1a5
    c0c4:	0001ead7 	.word	0x0001ead7
    c0c8:	0001f2fc 	.word	0x0001f2fc
    c0cc:	0001f26f 	.word	0x0001f26f
    c0d0:	0001f29d 	.word	0x0001f29d
    c0d4:	2000a6e4 	.word	0x2000a6e4
    c0d8:	0001f2d0 	.word	0x0001f2d0
    c0dc:	0001f32c 	.word	0x0001f32c

0000c0e0 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
    c0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c0e4:	4606      	mov	r6, r0
    c0e6:	460f      	mov	r7, r1
	const struct bt_gatt_dm_attr *curr = NULL;
    c0e8:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);

		__ASSERT_NO_MSG(chrc != NULL);
    c0ea:	f8df 8044 	ldr.w	r8, [pc, #68]	; c130 <bt_gatt_dm_char_by_uuid+0x50>
    c0ee:	f8df 9044 	ldr.w	r9, [pc, #68]	; c134 <bt_gatt_dm_char_by_uuid+0x54>
	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
    c0f2:	4621      	mov	r1, r4
    c0f4:	4630      	mov	r0, r6
    c0f6:	f00e f8b8 	bl	1a26a <bt_gatt_dm_char_next>
    c0fa:	4604      	mov	r4, r0
    c0fc:	b1a0      	cbz	r0, c128 <bt_gatt_dm_char_by_uuid+0x48>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
    c0fe:	f00e f89e 	bl	1a23e <bt_gatt_dm_attr_chrc_val>
		__ASSERT_NO_MSG(chrc != NULL);
    c102:	4605      	mov	r5, r0
    c104:	b950      	cbnz	r0, c11c <bt_gatt_dm_char_by_uuid+0x3c>
    c106:	4641      	mov	r1, r8
    c108:	4648      	mov	r0, r9
    c10a:	f240 12fb 	movw	r2, #507	; 0x1fb
    c10e:	f00d fc6e 	bl	199ee <printk>
    c112:	f240 11fb 	movw	r1, #507	; 0x1fb
    c116:	4640      	mov	r0, r8
    c118:	f00d ff0f 	bl	19f3a <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
    c11c:	4638      	mov	r0, r7
    c11e:	6829      	ldr	r1, [r5, #0]
    c120:	f00e ff1a 	bl	1af58 <bt_uuid_cmp>
    c124:	2800      	cmp	r0, #0
    c126:	d1e4      	bne.n	c0f2 <bt_gatt_dm_char_by_uuid+0x12>
			return curr;
		}
	}

	return NULL;
}
    c128:	4620      	mov	r0, r4
    c12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c12e:	bf00      	nop
    c130:	0001f1a5 	.word	0x0001f1a5
    c134:	0001ead7 	.word	0x0001ead7

0000c138 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
    c138:	b570      	push	{r4, r5, r6, lr}
    c13a:	4605      	mov	r5, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
    c13c:	4608      	mov	r0, r1
    c13e:	b119      	cbz	r1, c148 <bt_gatt_dm_start+0x10>
    c140:	7809      	ldrb	r1, [r1, #0]
    c142:	f011 0ffd 	tst.w	r1, #253	; 0xfd
    c146:	d139      	bne.n	c1bc <bt_gatt_dm_start+0x84>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
    c148:	2a00      	cmp	r2, #0
    c14a:	d037      	beq.n	c1bc <bt_gatt_dm_start+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c14c:	4c1e      	ldr	r4, [pc, #120]	; (c1c8 <bt_gatt_dm_start+0x90>)
    c14e:	f504 769c 	add.w	r6, r4, #312	; 0x138
    c152:	e8d6 1fef 	ldaex	r1, [r6]
    c156:	f041 0c01 	orr.w	ip, r1, #1
    c15a:	e8c6 cfee 	stlex	lr, ip, [r6]
    c15e:	f1be 0f00 	cmp.w	lr, #0
    c162:	d1f6      	bne.n	c152 <bt_gatt_dm_start+0x1a>
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
    c164:	f011 0101 	ands.w	r1, r1, #1
    c168:	d12b      	bne.n	c1c2 <bt_gatt_dm_start+0x8a>
		return -EALREADY;
	}

	dm->conn = conn;
	dm->context = context;
    c16a:	e9c4 5300 	strd	r5, r3, [r4]
	list->tail = NULL;
    c16e:	e9c4 114f 	strd	r1, r1, [r4, #316]	; 0x13c
	dm->callback = cb;
    c172:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
	dm->cur_attr_id = 0;
    c176:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
    c17a:	f8c4 1144 	str.w	r1, [r4, #324]	; 0x144

	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    c17e:	b108      	cbz	r0, c184 <bt_gatt_dm_start+0x4c>
    c180:	f7ff fe80 	bl	be84 <uuid_store.constprop.0>
	dm->discover_params.func = discovery_callback;
    c184:	4b11      	ldr	r3, [pc, #68]	; (c1cc <bt_gatt_dm_start+0x94>)
	dm->discover_params.uuid = svc_uuid ? uuid_store(dm, svc_uuid) : NULL;
    c186:	60a0      	str	r0, [r4, #8]
	dm->discover_params.func = discovery_callback;
    c188:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
    c18a:	2301      	movs	r3, #1
    c18c:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
    c18e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c192:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    c194:	2300      	movs	r3, #0

	err = bt_gatt_discover(conn, &dm->discover_params);
    c196:	4628      	mov	r0, r5
    c198:	490d      	ldr	r1, [pc, #52]	; (c1d0 <bt_gatt_dm_start+0x98>)
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    c19a:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
    c19c:	f007 fb88 	bl	138b0 <bt_gatt_discover>
	if (err) {
    c1a0:	4604      	mov	r4, r0
    c1a2:	b148      	cbz	r0, c1b8 <bt_gatt_dm_start+0x80>
		LOG_ERR("Discover failed, error: %d.", err);
    c1a4:	4602      	mov	r2, r0
    c1a6:	2145      	movs	r1, #69	; 0x45
    c1a8:	480a      	ldr	r0, [pc, #40]	; (c1d4 <bt_gatt_dm_start+0x9c>)
    c1aa:	f00d fc20 	bl	199ee <printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c1ae:	f06f 0101 	mvn.w	r1, #1
    c1b2:	4809      	ldr	r0, [pc, #36]	; (c1d8 <bt_gatt_dm_start+0xa0>)
    c1b4:	f00e f804 	bl	1a1c0 <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
    c1b8:	4620      	mov	r0, r4
    c1ba:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    c1bc:	f06f 0415 	mvn.w	r4, #21
    c1c0:	e7fa      	b.n	c1b8 <bt_gatt_dm_start+0x80>
		return -EALREADY;
    c1c2:	f06f 0444 	mvn.w	r4, #68	; 0x44
    c1c6:	e7f7      	b.n	c1b8 <bt_gatt_dm_start+0x80>
    c1c8:	2000a6dc 	.word	0x2000a6dc
    c1cc:	0000becd 	.word	0x0000becd
    c1d0:	2000a6e4 	.word	0x2000a6e4
    c1d4:	0001f36f 	.word	0x0001f36f
    c1d8:	2000a814 	.word	0x2000a814

0000c1dc <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
    c1dc:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    c1de:	4c06      	ldr	r4, [pc, #24]	; (c1f8 <scan_default_param_set+0x1c>)
{
    c1e0:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
    c1e2:	ad01      	add	r5, sp, #4
    c1e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c1e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c1e8:	6826      	ldr	r6, [r4, #0]

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
    c1ea:	4c04      	ldr	r4, [pc, #16]	; (c1fc <scan_default_param_set+0x20>)
    c1ec:	ad01      	add	r5, sp, #4
    c1ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c1f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c1f2:	6026      	str	r6, [r4, #0]
}
    c1f4:	b006      	add	sp, #24
    c1f6:	bd70      	pop	{r4, r5, r6, pc}
    c1f8:	0001d870 	.word	0x0001d870
    c1fc:	2000a858 	.word	0x2000a858

0000c200 <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
    c200:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
    c204:	4b02      	ldr	r3, [pc, #8]	; (c210 <scan_default_conn_param_set+0x10>)
    c206:	4903      	ldr	r1, [pc, #12]	; (c214 <scan_default_conn_param_set+0x14>)
    c208:	e9c3 1211 	strd	r1, r2, [r3, #68]	; 0x44
}
    c20c:	4770      	bx	lr
    c20e:	bf00      	nop
    c210:	2000a828 	.word	0x2000a828
    c214:	00280018 	.word	0x00280018

0000c218 <uuid_check>:
{
    c218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_scan.scan_filters.uuid.enabled;
    c21c:	4c29      	ldr	r4, [pc, #164]	; (c2c4 <uuid_check+0xac>)
{
    c21e:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
    c220:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
{
    c224:	4606      	mov	r6, r0
    c226:	9100      	str	r1, [sp, #0]
    c228:	9203      	str	r2, [sp, #12]
	if (is_uuid_filter_enabled()) {
    c22a:	2b00      	cmp	r3, #0
    c22c:	d03c      	beq.n	c2a8 <uuid_check+0x90>
	for (size_t i = 0; i < counter; i++) {
    c22e:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
    c230:	463d      	mov	r5, r7
	uint8_t data_len = data->data_len;
    c232:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
    c234:	f894 b028 	ldrb.w	fp, [r4, #40]	; 0x28
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    c238:	f894 a020 	ldrb.w	sl, [r4, #32]
	uint8_t data_len = data->data_len;
    c23c:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
    c23e:	4557      	cmp	r7, sl
    c240:	d30e      	bcc.n	c260 <uuid_check+0x48>
	control->filter_status.uuid.count = uuid_match_cnt;
    c242:	f886 503c 	strb.w	r5, [r6, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
    c246:	f1bb 0f00 	cmp.w	fp, #0
    c24a:	d02b      	beq.n	c2a4 <uuid_check+0x8c>
    c24c:	45aa      	cmp	sl, r5
    c24e:	d12b      	bne.n	c2a8 <uuid_check+0x90>
			control->filter_match_cnt++;
    c250:	7873      	ldrb	r3, [r6, #1]
    c252:	3301      	adds	r3, #1
    c254:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
    c256:	2301      	movs	r3, #1
    c258:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
    c25c:	70b3      	strb	r3, [r6, #2]
}
    c25e:	e023      	b.n	c2a8 <uuid_check+0x90>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c260:	f04f 0900 	mov.w	r9, #0
		if (find_uuid(data->data, data_len, uuid_type,
    c264:	9b00      	ldr	r3, [sp, #0]
    c266:	9a03      	ldr	r2, [sp, #12]
    c268:	685b      	ldr	r3, [r3, #4]
    c26a:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
    c26c:	4b16      	ldr	r3, [pc, #88]	; (c2c8 <uuid_check+0xb0>)
    c26e:	f813 8002 	ldrb.w	r8, [r3, r2]
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c272:	9b01      	ldr	r3, [sp, #4]
    c274:	4599      	cmp	r9, r3
    c276:	d305      	bcc.n	c284 <uuid_check+0x6c>
		} else if (all_filters_mode) {
    c278:	f1bb 0f00 	cmp.w	fp, #0
    c27c:	d1e1      	bne.n	c242 <uuid_check+0x2a>
	for (size_t i = 0; i < counter; i++) {
    c27e:	3701      	adds	r7, #1
    c280:	3418      	adds	r4, #24
    c282:	e7dc      	b.n	c23e <uuid_check+0x26>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
    c284:	9b02      	ldr	r3, [sp, #8]
    c286:	4642      	mov	r2, r8
    c288:	eb03 0109 	add.w	r1, r3, r9
    c28c:	a805      	add	r0, sp, #20
    c28e:	f00e fe91 	bl	1afb4 <bt_uuid_create>
    c292:	2800      	cmp	r0, #0
    c294:	d0f0      	beq.n	c278 <uuid_check+0x60>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
    c296:	68a1      	ldr	r1, [r4, #8]
    c298:	a805      	add	r0, sp, #20
    c29a:	f00e fe5d 	bl	1af58 <bt_uuid_cmp>
    c29e:	b130      	cbz	r0, c2ae <uuid_check+0x96>
	for (size_t i = 0; i < data_len; i += uuid_len) {
    c2a0:	44c1      	add	r9, r8
    c2a2:	e7e6      	b.n	c272 <uuid_check+0x5a>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
    c2a4:	2d00      	cmp	r5, #0
    c2a6:	d1d3      	bne.n	c250 <uuid_check+0x38>
}
    c2a8:	b00b      	add	sp, #44	; 0x2c
    c2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uuid_filter->uuid[i].uuid;
    c2ae:	68a1      	ldr	r1, [r4, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    c2b0:	eb06 0285 	add.w	r2, r6, r5, lsl #2
			uuid_match_cnt++;
    c2b4:	3501      	adds	r5, #1
			control->filter_status.uuid.uuid[uuid_match_cnt] =
    c2b6:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
    c2b8:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
    c2ba:	f1bb 0f00 	cmp.w	fp, #0
    c2be:	d1de      	bne.n	c27e <uuid_check+0x66>
    c2c0:	e7bf      	b.n	c242 <uuid_check+0x2a>
    c2c2:	bf00      	nop
    c2c4:	2000a828 	.word	0x2000a828
    c2c8:	0001f3aa 	.word	0x0001f3aa

0000c2cc <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
    c2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
    c2d0:	7803      	ldrb	r3, [r0, #0]
{
    c2d2:	4605      	mov	r5, r0
	switch (data->type) {
    c2d4:	2b19      	cmp	r3, #25
{
    c2d6:	460c      	mov	r4, r1
	switch (data->type) {
    c2d8:	d812      	bhi.n	c300 <adv_data_found+0x34>
    c2da:	2b01      	cmp	r3, #1
    c2dc:	d912      	bls.n	c304 <adv_data_found+0x38>
    c2de:	3b02      	subs	r3, #2
    c2e0:	2b17      	cmp	r3, #23
    c2e2:	d80f      	bhi.n	c304 <adv_data_found+0x38>
    c2e4:	e8df f003 	tbb	[pc, r3]
    c2e8:	7f7f7979 	.word	0x7f7f7979
    c2ec:	11318181 	.word	0x11318181
    c2f0:	0e0e0e0e 	.word	0x0e0e0e0e
    c2f4:	0e0e0e0e 	.word	0x0e0e0e0e
    c2f8:	0e0e0e0e 	.word	0x0e0e0e0e
    c2fc:	560e0e0e 	.word	0x560e0e0e
    c300:	2bff      	cmp	r3, #255	; 0xff
    c302:	d074      	beq.n	c3ee <adv_data_found+0x122>
	default:
		break;
	}

	return true;
}
    c304:	2001      	movs	r0, #1
    c306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return bt_scan.scan_filters.name.enabled;
    c30a:	4f4d      	ldr	r7, [pc, #308]	; (c440 <adv_data_found+0x174>)
	if (is_name_filter_enabled()) {
    c30c:	787b      	ldrb	r3, [r7, #1]
    c30e:	2b00      	cmp	r3, #0
    c310:	d0f8      	beq.n	c304 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c312:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.name.cnt;
    c314:	f897 a000 	ldrb.w	sl, [r7]
	uint8_t data_len = data->data_len;
    c318:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    c31c:	4556      	cmp	r6, sl
    c31e:	d2f1      	bcs.n	c304 <adv_data_found+0x38>
		if (adv_name_cmp(data->data,
    c320:	eb07 1946 	add.w	r9, r7, r6, lsl #5
	return strncmp(target_name, data, data_len) == 0;
    c324:	4642      	mov	r2, r8
    c326:	4648      	mov	r0, r9
    c328:	6869      	ldr	r1, [r5, #4]
    c32a:	f00e fd7e 	bl	1ae2a <strncmp>
		if (adv_name_cmp(data->data,
    c32e:	b950      	cbnz	r0, c346 <adv_data_found+0x7a>
			control->filter_match_cnt++;
    c330:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
    c332:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
    c336:	3301      	adds	r3, #1
    c338:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
    c33a:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
    c33c:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
    c340:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
    c342:	70a3      	strb	r3, [r4, #2]
    c344:	e7de      	b.n	c304 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c346:	3601      	adds	r6, #1
    c348:	e7e8      	b.n	c31c <adv_data_found+0x50>
	return bt_scan.scan_filters.short_name.enabled;
    c34a:	4e3d      	ldr	r6, [pc, #244]	; (c440 <adv_data_found+0x174>)
	if (is_short_name_filter_enabled()) {
    c34c:	78f3      	ldrb	r3, [r6, #3]
    c34e:	2b00      	cmp	r3, #0
    c350:	d0d8      	beq.n	c304 <adv_data_found+0x38>
	uint8_t data_len = data->data_len;
    c352:	78b3      	ldrb	r3, [r6, #2]
    c354:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
    c358:	eb03 1343 	add.w	r3, r3, r3, lsl #5
    c35c:	18f7      	adds	r7, r6, r3
    c35e:	42be      	cmp	r6, r7
    c360:	d0d0      	beq.n	c304 <adv_data_found+0x38>
	if ((data_len >= short_name_min_len) &&
    c362:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
    c366:	4543      	cmp	r3, r8
    c368:	d812      	bhi.n	c390 <adv_data_found+0xc4>
    c36a:	f106 0902 	add.w	r9, r6, #2
	    (strncmp(target_name, data, data_len) == 0)) {
    c36e:	4642      	mov	r2, r8
    c370:	4648      	mov	r0, r9
    c372:	6869      	ldr	r1, [r5, #4]
    c374:	f00e fd59 	bl	1ae2a <strncmp>
	if ((data_len >= short_name_min_len) &&
    c378:	b950      	cbnz	r0, c390 <adv_data_found+0xc4>
			control->filter_match_cnt++;
    c37a:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.short_name.name =
    c37c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
			control->filter_match_cnt++;
    c380:	3301      	adds	r3, #1
    c382:	7063      	strb	r3, [r4, #1]
			control->filter_status.short_name.match = true;
    c384:	2301      	movs	r3, #1
			control->filter_status.short_name.len = data_len;
    c386:	f884 8028 	strb.w	r8, [r4, #40]	; 0x28
			control->filter_status.short_name.match = true;
    c38a:	f884 3020 	strb.w	r3, [r4, #32]
			control->filter_match = true;
    c38e:	e7d8      	b.n	c342 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c390:	3621      	adds	r6, #33	; 0x21
    c392:	e7e4      	b.n	c35e <adv_data_found+0x92>
	return bt_scan.scan_filters.appearance.enabled;
    c394:	482a      	ldr	r0, [pc, #168]	; (c440 <adv_data_found+0x174>)
	if (is_appearance_filter_enabled()) {
    c396:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
    c39a:	2b00      	cmp	r3, #0
    c39c:	d0b2      	beq.n	c304 <adv_data_found+0x38>
	for (size_t i = 0; i < counter; i++) {
    c39e:	2300      	movs	r3, #0
	const uint8_t counter =
    c3a0:	f890 6024 	ldrb.w	r6, [r0, #36]	; 0x24
	uint8_t data_len = data->data_len;
    c3a4:	786f      	ldrb	r7, [r5, #1]
	for (size_t i = 0; i < counter; i++) {
    c3a6:	42b3      	cmp	r3, r6
    c3a8:	d2ac      	bcs.n	c304 <adv_data_found+0x38>
	if (data_len != sizeof(uint16_t)) {
    c3aa:	2f02      	cmp	r7, #2
    c3ac:	d113      	bne.n	c3d6 <adv_data_found+0x10a>
	if (decoded_appearance == *appearance) {
    c3ae:	686a      	ldr	r2, [r5, #4]
    c3b0:	eb00 0143 	add.w	r1, r0, r3, lsl #1
    c3b4:	8812      	ldrh	r2, [r2, #0]
    c3b6:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    c3b8:	ba52      	rev16	r2, r2
    c3ba:	b292      	uxth	r2, r2
    c3bc:	4291      	cmp	r1, r2
    c3be:	d10a      	bne.n	c3d6 <adv_data_found+0x10a>
		if (find_appearance(data->data,
    c3c0:	3312      	adds	r3, #18
    c3c2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
			control->filter_status.appearance.appearance =
    c3c6:	6463      	str	r3, [r4, #68]	; 0x44
			control->filter_match_cnt++;
    c3c8:	7863      	ldrb	r3, [r4, #1]
    c3ca:	3301      	adds	r3, #1
    c3cc:	7063      	strb	r3, [r4, #1]
			control->filter_status.appearance.match = true;
    c3ce:	2301      	movs	r3, #1
    c3d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			control->filter_match = true;
    c3d4:	e7b5      	b.n	c342 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c3d6:	3301      	adds	r3, #1
    c3d8:	e7e5      	b.n	c3a6 <adv_data_found+0xda>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
    c3da:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    c3dc:	4629      	mov	r1, r5
    c3de:	4620      	mov	r0, r4
    c3e0:	f7ff ff1a 	bl	c218 <uuid_check>
		break;
    c3e4:	e78e      	b.n	c304 <adv_data_found+0x38>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
    c3e6:	2201      	movs	r2, #1
    c3e8:	e7f8      	b.n	c3dc <adv_data_found+0x110>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
    c3ea:	2202      	movs	r2, #2
    c3ec:	e7f6      	b.n	c3dc <adv_data_found+0x110>
	return bt_scan.scan_filters.manufacturer_data.enabled;
    c3ee:	f8df 8050 	ldr.w	r8, [pc, #80]	; c440 <adv_data_found+0x174>
	if (is_manufacturer_data_filter_enabled()) {
    c3f2:	f898 3027 	ldrb.w	r3, [r8, #39]	; 0x27
    c3f6:	2b00      	cmp	r3, #0
    c3f8:	d084      	beq.n	c304 <adv_data_found+0x38>
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    c3fa:	4647      	mov	r7, r8
	for (size_t i = 0; i < counter; i++) {
    c3fc:	2600      	movs	r6, #0
	uint8_t counter = bt_scan.scan_filters.manufacturer_data.cnt;
    c3fe:	f817 9f26 	ldrb.w	r9, [r7, #38]!
	for (size_t i = 0; i < counter; i++) {
    c402:	454e      	cmp	r6, r9
    c404:	f4bf af7e 	bcs.w	c304 <adv_data_found+0x38>
		if (adv_manufacturer_data_cmp(data->data,
    c408:	f897 2020 	ldrb.w	r2, [r7, #32]
	if (target_data_len > data_len) {
    c40c:	786b      	ldrb	r3, [r5, #1]
    c40e:	4293      	cmp	r3, r2
    c410:	d313      	bcc.n	c43a <adv_data_found+0x16e>
	if (memcmp(target_data, data, target_data_len) != 0) {
    c412:	4638      	mov	r0, r7
    c414:	6869      	ldr	r1, [r5, #4]
    c416:	f00e fd19 	bl	1ae4c <memcmp>
    c41a:	b970      	cbnz	r0, c43a <adv_data_found+0x16e>
				md_filter->manufacturer_data[i].data_len;
    c41c:	eb06 1646 	add.w	r6, r6, r6, lsl #5
			control->filter_status.manufacturer_data.data =
    c420:	64e7      	str	r7, [r4, #76]	; 0x4c
				md_filter->manufacturer_data[i].data_len;
    c422:	4446      	add	r6, r8
			control->filter_status.manufacturer_data.len =
    c424:	f896 3046 	ldrb.w	r3, [r6, #70]	; 0x46
    c428:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			control->filter_match_cnt++;
    c42c:	7863      	ldrb	r3, [r4, #1]
    c42e:	3301      	adds	r3, #1
    c430:	7063      	strb	r3, [r4, #1]
			control->filter_status.manufacturer_data.match = true;
    c432:	2301      	movs	r3, #1
    c434:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    c438:	e783      	b.n	c342 <adv_data_found+0x76>
	for (size_t i = 0; i < counter; i++) {
    c43a:	3601      	adds	r6, #1
    c43c:	3721      	adds	r7, #33	; 0x21
    c43e:	e7e0      	b.n	c402 <adv_data_found+0x136>
    c440:	2000a828 	.word	0x2000a828

0000c444 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
    c444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c446:	4605      	mov	r5, r0
    c448:	460e      	mov	r6, r1
    c44a:	4617      	mov	r7, r2
	return list->head;
    c44c:	4b08      	ldr	r3, [pc, #32]	; (c470 <notify_filter_matched.constprop.0+0x2c>)
    c44e:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c450:	b10c      	cbz	r4, c456 <notify_filter_matched.constprop.0+0x12>
    c452:	3c04      	subs	r4, #4
    c454:	b904      	cbnz	r4, c458 <notify_filter_matched.constprop.0+0x14>
}
    c456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
    c458:	6823      	ldr	r3, [r4, #0]
    c45a:	681b      	ldr	r3, [r3, #0]
    c45c:	b11b      	cbz	r3, c466 <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
    c45e:	463a      	mov	r2, r7
    c460:	4631      	mov	r1, r6
    c462:	4628      	mov	r0, r5
    c464:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c466:	1d23      	adds	r3, r4, #4
    c468:	d0f5      	beq.n	c456 <notify_filter_matched.constprop.0+0x12>
	return node->next;
    c46a:	6864      	ldr	r4, [r4, #4]
    c46c:	e7f0      	b.n	c450 <notify_filter_matched.constprop.0+0xc>
    c46e:	bf00      	nop
    c470:	2000a874 	.word	0x2000a874

0000c474 <bt_scan_cb_register>:
	if (!cb) {
    c474:	b150      	cbz	r0, c48c <bt_scan_cb_register+0x18>
	parent->next = child;
    c476:	2300      	movs	r3, #0
    c478:	6043      	str	r3, [r0, #4]
	return list->tail;
    c47a:	4b05      	ldr	r3, [pc, #20]	; (c490 <bt_scan_cb_register+0x1c>)
	sys_slist_append(&callback_list, &cb->node);
    c47c:	1d02      	adds	r2, r0, #4
    c47e:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
    c480:	b911      	cbnz	r1, c488 <bt_scan_cb_register+0x14>
	list->head = node;
    c482:	e9c3 2200 	strd	r2, r2, [r3]
}
    c486:	4770      	bx	lr
	parent->next = child;
    c488:	600a      	str	r2, [r1, #0]
	list->tail = node;
    c48a:	605a      	str	r2, [r3, #4]
}
    c48c:	4770      	bx	lr
    c48e:	bf00      	nop
    c490:	2000a874 	.word	0x2000a874

0000c494 <bt_scan_filter_add>:
{
    c494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c496:	4605      	mov	r5, r0
	if (!data) {
    c498:	460c      	mov	r4, r1
    c49a:	2900      	cmp	r1, #0
    c49c:	d048      	beq.n	c530 <bt_scan_filter_add+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
    c49e:	f04f 32ff 	mov.w	r2, #4294967295
    c4a2:	f04f 33ff 	mov.w	r3, #4294967295
    c4a6:	4824      	ldr	r0, [pc, #144]	; (c538 <bt_scan_filter_add+0xa4>)
    c4a8:	f00a fe18 	bl	170dc <z_impl_k_mutex_lock>
	switch (type) {
    c4ac:	2d03      	cmp	r5, #3
    c4ae:	d00c      	beq.n	c4ca <bt_scan_filter_add+0x36>
    c4b0:	d938      	bls.n	c524 <bt_scan_filter_add+0x90>
    c4b2:	3d04      	subs	r5, #4
		err = -EINVAL;
    c4b4:	2d01      	cmp	r5, #1
    c4b6:	bf94      	ite	ls
    c4b8:	f06f 040b 	mvnls.w	r4, #11
    c4bc:	f06f 0415 	mvnhi.w	r4, #21
	return z_impl_k_mutex_unlock(mutex);
    c4c0:	481d      	ldr	r0, [pc, #116]	; (c538 <bt_scan_filter_add+0xa4>)
    c4c2:	f00a fed7 	bl	17274 <z_impl_k_mutex_unlock>
}
    c4c6:	4620      	mov	r0, r4
    c4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
    c4ca:	4a1c      	ldr	r2, [pc, #112]	; (c53c <bt_scan_filter_add+0xa8>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
    c4cc:	f892 3020 	ldrb.w	r3, [r2, #32]
    c4d0:	bb43      	cbnz	r3, c524 <bt_scan_filter_add+0x90>
	switch (uuid->type) {
    c4d2:	7823      	ldrb	r3, [r4, #0]
    c4d4:	2b01      	cmp	r3, #1
    c4d6:	d00c      	beq.n	c4f2 <bt_scan_filter_add+0x5e>
    c4d8:	2b02      	cmp	r3, #2
    c4da:	d011      	beq.n	c500 <bt_scan_filter_add+0x6c>
    c4dc:	bb2b      	cbnz	r3, c52a <bt_scan_filter_add+0x96>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
    c4de:	6820      	ldr	r0, [r4, #0]
    c4e0:	f102 030c 	add.w	r3, r2, #12
    c4e4:	60d0      	str	r0, [r2, #12]
		uuid_filter[counter].uuid =
    c4e6:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
    c4e8:	2301      	movs	r3, #1
	return 0;
    c4ea:	2400      	movs	r4, #0
	bt_scan.scan_filters.uuid.cnt++;
    c4ec:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
    c4f0:	e7e6      	b.n	c4c0 <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
    c4f2:	f102 030c 	add.w	r3, r2, #12
    c4f6:	e894 0003 	ldmia.w	r4, {r0, r1}
    c4fa:	e883 0003 	stmia.w	r3, {r0, r1}
    c4fe:	e7f2      	b.n	c4e6 <bt_scan_filter_add+0x52>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
    c500:	4623      	mov	r3, r4
    c502:	f102 040c 	add.w	r4, r2, #12
    c506:	4626      	mov	r6, r4
    c508:	f103 0710 	add.w	r7, r3, #16
    c50c:	4625      	mov	r5, r4
    c50e:	6818      	ldr	r0, [r3, #0]
    c510:	6859      	ldr	r1, [r3, #4]
    c512:	3308      	adds	r3, #8
    c514:	c503      	stmia	r5!, {r0, r1}
    c516:	42bb      	cmp	r3, r7
    c518:	462c      	mov	r4, r5
    c51a:	d1f7      	bne.n	c50c <bt_scan_filter_add+0x78>
    c51c:	781b      	ldrb	r3, [r3, #0]
    c51e:	702b      	strb	r3, [r5, #0]
		uuid_filter[counter].uuid =
    c520:	6096      	str	r6, [r2, #8]
		break;
    c522:	e7e1      	b.n	c4e8 <bt_scan_filter_add+0x54>
		return -ENOMEM;
    c524:	f06f 040b 	mvn.w	r4, #11
    c528:	e7ca      	b.n	c4c0 <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
    c52a:	f06f 0415 	mvn.w	r4, #21
    c52e:	e7c7      	b.n	c4c0 <bt_scan_filter_add+0x2c>
		return -EINVAL;
    c530:	f06f 0415 	mvn.w	r4, #21
    c534:	e7c7      	b.n	c4c6 <bt_scan_filter_add+0x32>
    c536:	bf00      	nop
    c538:	2000866c 	.word	0x2000866c
    c53c:	2000a828 	.word	0x2000a828

0000c540 <bt_scan_filter_remove_all>:
{
    c540:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    c542:	4c0c      	ldr	r4, [pc, #48]	; (c574 <bt_scan_filter_remove_all+0x34>)
    c544:	f04f 32ff 	mov.w	r2, #4294967295
    c548:	f04f 33ff 	mov.w	r3, #4294967295
    c54c:	4620      	mov	r0, r4
    c54e:	f00a fdc5 	bl	170dc <z_impl_k_mutex_lock>
	name_filter->cnt = 0;
    c552:	2200      	movs	r2, #0
    c554:	4b08      	ldr	r3, [pc, #32]	; (c578 <bt_scan_filter_remove_all+0x38>)
    c556:	701a      	strb	r2, [r3, #0]
	short_name_filter->cnt = 0;
    c558:	709a      	strb	r2, [r3, #2]
	addr_filter->cnt = 0;
    c55a:	711a      	strb	r2, [r3, #4]
	uuid_filter->cnt = 0;
    c55c:	f883 2020 	strb.w	r2, [r3, #32]
	appearance_filter->cnt = 0;
    c560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	manufacturer_data_filter->cnt = 0;
    c564:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	return z_impl_k_mutex_unlock(mutex);
    c568:	4620      	mov	r0, r4
}
    c56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c56e:	f00a be81 	b.w	17274 <z_impl_k_mutex_unlock>
    c572:	bf00      	nop
    c574:	2000866c 	.word	0x2000866c
    c578:	2000a828 	.word	0x2000a828

0000c57c <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
    c57c:	2200      	movs	r2, #0
    c57e:	4b05      	ldr	r3, [pc, #20]	; (c594 <bt_scan_filter_disable+0x18>)
    c580:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
    c582:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
    c584:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
    c586:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
    c58a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
    c58e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
    c592:	4770      	bx	lr
    c594:	2000a828 	.word	0x2000a828

0000c598 <bt_scan_filter_enable>:
{
    c598:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
    c59a:	0683      	lsls	r3, r0, #26
    c59c:	d025      	beq.n	c5ea <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
    c59e:	f7ff ffed 	bl	c57c <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
    c5a2:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
    c5a6:	bf18      	it	ne
    c5a8:	2201      	movne	r2, #1
    c5aa:	4b11      	ldr	r3, [pc, #68]	; (c5f0 <bt_scan_filter_enable+0x58>)
    c5ac:	bf18      	it	ne
    c5ae:	715a      	strbne	r2, [r3, #5]
	if (mode & BT_SCAN_NAME_FILTER) {
    c5b0:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
    c5b2:	bf44      	itt	mi
    c5b4:	2201      	movmi	r2, #1
    c5b6:	705a      	strbmi	r2, [r3, #1]
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
    c5b8:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
    c5ba:	bf44      	itt	mi
    c5bc:	2201      	movmi	r2, #1
    c5be:	70da      	strbmi	r2, [r3, #3]
	if (mode & BT_SCAN_UUID_FILTER) {
    c5c0:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
    c5c2:	bf44      	itt	mi
    c5c4:	2201      	movmi	r2, #1
    c5c6:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
    c5ca:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
    c5cc:	bf44      	itt	mi
    c5ce:	2201      	movmi	r2, #1
    c5d0:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
    c5d4:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
    c5d6:	bf48      	it	mi
    c5d8:	2201      	movmi	r2, #1
	return 0;
    c5da:	f04f 0000 	mov.w	r0, #0
		filters->manufacturer_data.enabled = true;
    c5de:	bf48      	it	mi
    c5e0:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	filters->all_mode = match_all;
    c5e4:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
}
    c5e8:	bd08      	pop	{r3, pc}
		return -EINVAL;
    c5ea:	f06f 0015 	mvn.w	r0, #21
    c5ee:	e7fb      	b.n	c5e8 <bt_scan_filter_enable+0x50>
    c5f0:	2000a828 	.word	0x2000a828

0000c5f4 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
    c5f4:	b570      	push	{r4, r5, r6, lr}
    c5f6:	460e      	mov	r6, r1
    c5f8:	b086      	sub	sp, #24
    c5fa:	4605      	mov	r5, r0
	bt_scan_stop();
    c5fc:	f00d feaa 	bl	1a354 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
    c600:	4b18      	ldr	r3, [pc, #96]	; (c664 <scan_connect_with_target.part.0+0x70>)
    c602:	ac02      	add	r4, sp, #8
    c604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    c606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
    c60a:	4621      	mov	r1, r4
    c60c:	ab01      	add	r3, sp, #4
    c60e:	4630      	mov	r0, r6
    c610:	4a15      	ldr	r2, [pc, #84]	; (c668 <scan_connect_with_target.part.0+0x74>)
    c612:	f004 fab9 	bl	10b88 <bt_conn_le_create>
	if (err) {
    c616:	4b15      	ldr	r3, [pc, #84]	; (c66c <scan_connect_with_target.part.0+0x78>)
		notify_connecting_error(&control->device_info);
    c618:	3508      	adds	r5, #8
	return list->head;
    c61a:	681c      	ldr	r4, [r3, #0]
	if (err) {
    c61c:	b168      	cbz	r0, c63a <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c61e:	b10c      	cbz	r4, c624 <scan_connect_with_target.part.0+0x30>
    c620:	3c04      	subs	r4, #4
    c622:	b90c      	cbnz	r4, c628 <scan_connect_with_target.part.0+0x34>
}
    c624:	b006      	add	sp, #24
    c626:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
    c628:	6823      	ldr	r3, [r4, #0]
    c62a:	689b      	ldr	r3, [r3, #8]
    c62c:	b10b      	cbz	r3, c632 <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
    c62e:	4628      	mov	r0, r5
    c630:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c632:	1d22      	adds	r2, r4, #4
    c634:	d0f6      	beq.n	c624 <scan_connect_with_target.part.0+0x30>
	return node->next;
    c636:	6864      	ldr	r4, [r4, #4]
    c638:	e7f1      	b.n	c61e <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c63a:	b91c      	cbnz	r4, c644 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
    c63c:	9801      	ldr	r0, [sp, #4]
    c63e:	f004 f8e5 	bl	1080c <bt_conn_unref>
    c642:	e7ef      	b.n	c624 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
    c644:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c646:	3c04      	subs	r4, #4
    c648:	2c00      	cmp	r4, #0
    c64a:	d0f7      	beq.n	c63c <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
    c64c:	6823      	ldr	r3, [r4, #0]
    c64e:	68db      	ldr	r3, [r3, #12]
    c650:	b113      	cbz	r3, c658 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
    c652:	4631      	mov	r1, r6
    c654:	4628      	mov	r0, r5
    c656:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c658:	1d23      	adds	r3, r4, #4
    c65a:	d0ef      	beq.n	c63c <scan_connect_with_target.part.0+0x48>
	return node->next;
    c65c:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c65e:	2c00      	cmp	r4, #0
    c660:	d1f1      	bne.n	c646 <scan_connect_with_target.part.0+0x52>
    c662:	e7eb      	b.n	c63c <scan_connect_with_target.part.0+0x48>
    c664:	0001d884 	.word	0x0001d884
    c668:	2000a86c 	.word	0x2000a86c
    c66c:	2000a874 	.word	0x2000a874

0000c670 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
    c670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    c674:	4c54      	ldr	r4, [pc, #336]	; (c7c8 <scan_recv+0x158>)
{
    c676:	b097      	sub	sp, #92	; 0x5c
	memset(&scan_control, 0, sizeof(scan_control));
    c678:	2254      	movs	r2, #84	; 0x54
{
    c67a:	4606      	mov	r6, r0
    c67c:	460d      	mov	r5, r1
	memset(&scan_control, 0, sizeof(scan_control));
    c67e:	a801      	add	r0, sp, #4
    c680:	2100      	movs	r1, #0
    c682:	f00e fc1f 	bl	1aec4 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    c686:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	return bt_scan.scan_filters.addr.enabled;
    c68a:	7962      	ldrb	r2, [r4, #5]
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
    c68c:	f88d 3007 	strb.w	r3, [sp, #7]
	control->filter_cnt = 0;
    c690:	2300      	movs	r3, #0
    c692:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_addr_filter_enabled()) {
    c696:	b112      	cbz	r2, c69e <scan_recv+0x2e>
		control->filter_cnt++;
    c698:	2301      	movs	r3, #1
    c69a:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_name_filter_enabled()) {
    c69e:	7863      	ldrb	r3, [r4, #1]
    c6a0:	b123      	cbz	r3, c6ac <scan_recv+0x3c>
		control->filter_cnt++;
    c6a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c6a6:	3301      	adds	r3, #1
    c6a8:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_short_name_filter_enabled()) {
    c6ac:	78e3      	ldrb	r3, [r4, #3]
    c6ae:	b123      	cbz	r3, c6ba <scan_recv+0x4a>
		control->filter_cnt++;
    c6b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c6b4:	3301      	adds	r3, #1
    c6b6:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_uuid_filter_enabled()) {
    c6ba:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    c6be:	b123      	cbz	r3, c6ca <scan_recv+0x5a>
		control->filter_cnt++;
    c6c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c6c4:	3301      	adds	r3, #1
    c6c6:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_appearance_filter_enabled()) {
    c6ca:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    c6ce:	b123      	cbz	r3, c6da <scan_recv+0x6a>
		control->filter_cnt++;
    c6d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c6d4:	3301      	adds	r3, #1
    c6d6:	f88d 3004 	strb.w	r3, [sp, #4]
	if (is_manufacturer_data_filter_enabled()) {
    c6da:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    c6de:	b123      	cbz	r3, c6ea <scan_recv+0x7a>
		control->filter_cnt++;
    c6e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c6e4:	3301      	adds	r3, #1
    c6e6:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
    c6ea:	7a33      	ldrb	r3, [r6, #8]
    c6ec:	f003 0301 	and.w	r3, r3, #1
    c6f0:	f88d 3008 	strb.w	r3, [sp, #8]
	if (is_addr_filter_enabled()) {
    c6f4:	b1ea      	cbz	r2, c732 <scan_recv+0xc2>
	for (size_t i = 0; i < counter; i++) {
    c6f6:	f04f 0800 	mov.w	r8, #0

	/* Check the address filter. */
	check_addr(&scan_control, info->addr);
    c6fa:	f8d6 a000 	ldr.w	sl, [r6]
	uint8_t counter = bt_scan.scan_filters.addr.cnt;
    c6fe:	f894 9004 	ldrb.w	r9, [r4, #4]
	for (size_t i = 0; i < counter; i++) {
    c702:	4f32      	ldr	r7, [pc, #200]	; (c7cc <scan_recv+0x15c>)
    c704:	45c8      	cmp	r8, r9
    c706:	d214      	bcs.n	c732 <scan_recv+0xc2>
	return memcmp(a, b, sizeof(*a));
    c708:	4639      	mov	r1, r7
    c70a:	2207      	movs	r2, #7
    c70c:	4650      	mov	r0, sl
    c70e:	f00e fb9d 	bl	1ae4c <memcmp>
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
    c712:	46bb      	mov	fp, r7
    c714:	3707      	adds	r7, #7
    c716:	2800      	cmp	r0, #0
    c718:	d13a      	bne.n	c790 <scan_recv+0x120>
			control->filter_match_cnt++;
    c71a:	f89d 3005 	ldrb.w	r3, [sp, #5]
			control->filter_status.addr.addr = &addr[i];
    c71e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
			control->filter_match_cnt++;
    c722:	3301      	adds	r3, #1
    c724:	f88d 3005 	strb.w	r3, [sp, #5]
			control->filter_status.addr.match = true;
    c728:	2301      	movs	r3, #1
    c72a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			control->filter_match = true;
    c72e:	f88d 3006 	strb.w	r3, [sp, #6]
	state->offset = net_buf_simple_headroom(buf);
    c732:	4628      	mov	r0, r5
    c734:	f00f fe91 	bl	1c45a <net_buf_simple_headroom>
    c738:	4607      	mov	r7, r0

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
    c73a:	4925      	ldr	r1, [pc, #148]	; (c7d0 <scan_recv+0x160>)
    c73c:	4628      	mov	r0, r5
    c73e:	aa01      	add	r2, sp, #4
	state->len = buf->len;
    c740:	f8b5 8004 	ldrh.w	r8, [r5, #4]
    c744:	f002 fb1c 	bl	ed80 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
    c748:	4b22      	ldr	r3, [pc, #136]	; (c7d4 <scan_recv+0x164>)
	buf->data = buf->__buf + state->offset;
    c74a:	68a8      	ldr	r0, [r5, #8]
	scan_control.device_info.adv_data = ad;
    c74c:	e9cd 3504 	strd	r3, r5, [sp, #16]
	if (control->all_mode &&
    c750:	f89d 3007 	ldrb.w	r3, [sp, #7]
    c754:	fa10 f787 	uxtah	r7, r0, r7
    c758:	602f      	str	r7, [r5, #0]
	buf->len = state->len;
    c75a:	f8a5 8004 	strh.w	r8, [r5, #4]
	scan_control.device_info.recv_info = info;
    c75e:	9603      	str	r6, [sp, #12]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
    c760:	6835      	ldr	r5, [r6, #0]
	if (control->all_mode &&
    c762:	b1c3      	cbz	r3, c796 <scan_recv+0x126>
    c764:	f89d 2005 	ldrb.w	r2, [sp, #5]
    c768:	f89d 3004 	ldrb.w	r3, [sp, #4]
    c76c:	429a      	cmp	r2, r3
    c76e:	d116      	bne.n	c79e <scan_recv+0x12e>
		notify_filter_matched(&control->device_info,
    c770:	f89d 2008 	ldrb.w	r2, [sp, #8]
    c774:	a906      	add	r1, sp, #24
    c776:	a803      	add	r0, sp, #12
    c778:	f7ff fe64 	bl	c444 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
    c77c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    c780:	b11b      	cbz	r3, c78a <scan_recv+0x11a>
    c782:	4629      	mov	r1, r5
    c784:	a801      	add	r0, sp, #4
    c786:	f7ff ff35 	bl	c5f4 <scan_connect_with_target.part.0>
}
    c78a:	b017      	add	sp, #92	; 0x5c
    c78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < counter; i++) {
    c790:	f108 0801 	add.w	r8, r8, #1
    c794:	e7b6      	b.n	c704 <scan_recv+0x94>
	else if ((!control->all_mode) && control->filter_match) {
    c796:	f89d 3006 	ldrb.w	r3, [sp, #6]
    c79a:	2b00      	cmp	r3, #0
    c79c:	d1e8      	bne.n	c770 <scan_recv+0x100>
	return list->head;
    c79e:	4b0e      	ldr	r3, [pc, #56]	; (c7d8 <scan_recv+0x168>)
    c7a0:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c7a2:	2c00      	cmp	r4, #0
    c7a4:	d0f1      	beq.n	c78a <scan_recv+0x11a>
		notify_filter_no_match(&control->device_info,
    c7a6:	f89d 5008 	ldrb.w	r5, [sp, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c7aa:	3c04      	subs	r4, #4
    c7ac:	2c00      	cmp	r4, #0
    c7ae:	d0ec      	beq.n	c78a <scan_recv+0x11a>
		if (cb->cb_addr->filter_no_match) {
    c7b0:	6823      	ldr	r3, [r4, #0]
    c7b2:	685b      	ldr	r3, [r3, #4]
    c7b4:	b113      	cbz	r3, c7bc <scan_recv+0x14c>
			cb->cb_addr->filter_no_match(device_info, connectable);
    c7b6:	4629      	mov	r1, r5
    c7b8:	a803      	add	r0, sp, #12
    c7ba:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    c7bc:	1d23      	adds	r3, r4, #4
    c7be:	d0e4      	beq.n	c78a <scan_recv+0x11a>
	return node->next;
    c7c0:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    c7c2:	2c00      	cmp	r4, #0
    c7c4:	d1f1      	bne.n	c7aa <scan_recv+0x13a>
    c7c6:	e7e0      	b.n	c78a <scan_recv+0x11a>
    c7c8:	2000a828 	.word	0x2000a828
    c7cc:	2000a82c 	.word	0x2000a82c
    c7d0:	0000c2cd 	.word	0x0000c2cd
    c7d4:	2000a86c 	.word	0x2000a86c
    c7d8:	2000a874 	.word	0x2000a874

0000c7dc <bt_scan_init>:
{
    c7dc:	b570      	push	{r4, r5, r6, lr}
    c7de:	4606      	mov	r6, r0
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    c7e0:	4c14      	ldr	r4, [pc, #80]	; (c834 <bt_scan_init+0x58>)
	bt_le_scan_cb_register(&scan_cb);
    c7e2:	4815      	ldr	r0, [pc, #84]	; (c838 <bt_scan_init+0x5c>)
    c7e4:	f003 fcf8 	bl	101d8 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
    c7e8:	222c      	movs	r2, #44	; 0x2c
    c7ea:	2100      	movs	r1, #0
    c7ec:	4620      	mov	r0, r4
    c7ee:	f00e fb69 	bl	1aec4 <memset>
	if (init) {
    c7f2:	b1be      	cbz	r6, c824 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
    c7f4:	7933      	ldrb	r3, [r6, #4]
		if (init->scan_param) {
    c7f6:	6835      	ldr	r5, [r6, #0]
		bt_scan.connect_if_match = init->connect_if_match;
    c7f8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
    c7fc:	b15d      	cbz	r5, c816 <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
    c7fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    c800:	3430      	adds	r4, #48	; 0x30
    c802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c804:	682b      	ldr	r3, [r5, #0]
    c806:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
    c808:	68b2      	ldr	r2, [r6, #8]
    c80a:	b13a      	cbz	r2, c81c <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
    c80c:	4b0b      	ldr	r3, [pc, #44]	; (c83c <bt_scan_init+0x60>)
    c80e:	6810      	ldr	r0, [r2, #0]
    c810:	6851      	ldr	r1, [r2, #4]
    c812:	c303      	stmia	r3!, {r0, r1}
}
    c814:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
    c816:	f7ff fce1 	bl	c1dc <scan_default_param_set>
    c81a:	e7f5      	b.n	c808 <bt_scan_init+0x2c>
}
    c81c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
    c820:	f7ff bcee 	b.w	c200 <scan_default_conn_param_set>
		scan_default_param_set();
    c824:	f7ff fcda 	bl	c1dc <scan_default_param_set>
		scan_default_conn_param_set();
    c828:	f7ff fcea 	bl	c200 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
    c82c:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
    c830:	e7f0      	b.n	c814 <bt_scan_init+0x38>
    c832:	bf00      	nop
    c834:	2000a828 	.word	0x2000a828
    c838:	20008298 	.word	0x20008298
    c83c:	2000a86c 	.word	0x2000a86c

0000c840 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
    c840:	b108      	cbz	r0, c846 <bt_scan_start+0x6>
    c842:	2801      	cmp	r0, #1
    c844:	d106      	bne.n	c854 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    c846:	4b05      	ldr	r3, [pc, #20]	; (c85c <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    c848:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
    c84a:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
    c84e:	4804      	ldr	r0, [pc, #16]	; (c860 <bt_scan_start+0x20>)
    c850:	f003 bc48 	b.w	100e4 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
    c854:	f06f 0015 	mvn.w	r0, #21
    c858:	4770      	bx	lr
    c85a:	bf00      	nop
    c85c:	2000a828 	.word	0x2000a828
    c860:	2000a858 	.word	0x2000a858

0000c864 <lbslc_ccc_cfg_changed>:
static struct bt_lbs_cb       lbs_cb;

static void lbslc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	notify_enabled = (value == BT_GATT_CCC_NOTIFY);
    c864:	1e4b      	subs	r3, r1, #1
    c866:	4259      	negs	r1, r3
    c868:	4159      	adcs	r1, r3
    c86a:	4b01      	ldr	r3, [pc, #4]	; (c870 <lbslc_ccc_cfg_changed+0xc>)
    c86c:	7019      	strb	r1, [r3, #0]
}
    c86e:	4770      	bx	lr
    c870:	2000c117 	.word	0x2000c117

0000c874 <write_led>:

static ssize_t write_led(struct bt_conn *conn,
			 const struct bt_gatt_attr *attr,
			 const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
    c874:	b510      	push	{r4, lr}
    c876:	461c      	mov	r4, r3
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.led_cb) {
    c878:	4b03      	ldr	r3, [pc, #12]	; (c888 <write_led+0x14>)
    c87a:	681b      	ldr	r3, [r3, #0]
    c87c:	b10b      	cbz	r3, c882 <write_led+0xe>
		lbs_cb.led_cb(*(bool *)buf);
    c87e:	7810      	ldrb	r0, [r2, #0]
    c880:	4798      	blx	r3
	}

	return len;
}
    c882:	4620      	mov	r0, r4
    c884:	bd10      	pop	{r4, pc}
    c886:	bf00      	nop
    c888:	2000a87c 	.word	0x2000a87c

0000c88c <read_button>:
static ssize_t read_button(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr,
			  void *buf,
			  uint16_t len,
			  uint16_t offset)
{
    c88c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    c890:	461f      	mov	r7, r3
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, conn);

	if (lbs_cb.button_cb) {
    c892:	4b0d      	ldr	r3, [pc, #52]	; (c8c8 <read_button+0x3c>)
{
    c894:	4605      	mov	r5, r0
	if (lbs_cb.button_cb) {
    c896:	6858      	ldr	r0, [r3, #4]
{
    c898:	460c      	mov	r4, r1
    c89a:	4616      	mov	r6, r2
	if (lbs_cb.button_cb) {
    c89c:	b180      	cbz	r0, c8c0 <read_button+0x34>
	const char *value = attr->user_data;
    c89e:	f8d1 800c 	ldr.w	r8, [r1, #12]
		button_state = lbs_cb.button_cb();
    c8a2:	4780      	blx	r0
    c8a4:	4b09      	ldr	r3, [pc, #36]	; (c8cc <read_button+0x40>)
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    c8a6:	4632      	mov	r2, r6
		button_state = lbs_cb.button_cb();
    c8a8:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    c8aa:	2301      	movs	r3, #1
    c8ac:	e9cd 8301 	strd	r8, r3, [sp, #4]
    c8b0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    c8b4:	4621      	mov	r1, r4
    c8b6:	9300      	str	r3, [sp, #0]
    c8b8:	4628      	mov	r0, r5
    c8ba:	463b      	mov	r3, r7
    c8bc:	f00f fc2b 	bl	1c116 <bt_gatt_attr_read>
					 sizeof(*value));
	}

	return 0;
}
    c8c0:	b004      	add	sp, #16
    c8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8c6:	bf00      	nop
    c8c8:	2000a87c 	.word	0x2000a87c
    c8cc:	2000c116 	.word	0x2000c116

0000c8d0 <bt_lbs_init>:
			       NULL, write_led, NULL),
);

int bt_lbs_init(struct bt_lbs_cb *callbacks)
{
	if (callbacks) {
    c8d0:	b120      	cbz	r0, c8dc <bt_lbs_init+0xc>
		lbs_cb.led_cb    = callbacks->led_cb;
    c8d2:	4b03      	ldr	r3, [pc, #12]	; (c8e0 <bt_lbs_init+0x10>)
    c8d4:	6802      	ldr	r2, [r0, #0]
    c8d6:	601a      	str	r2, [r3, #0]
		lbs_cb.button_cb = callbacks->button_cb;
    c8d8:	6842      	ldr	r2, [r0, #4]
    c8da:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
    c8dc:	2000      	movs	r0, #0
    c8de:	4770      	bx	lr
    c8e0:	2000a87c 	.word	0x2000a87c

0000c8e4 <bt_lbs_send_button_state>:

int bt_lbs_send_button_state(bool button_state)
{
    c8e4:	b500      	push	{lr}
	if (!notify_enabled) {
    c8e6:	4b0e      	ldr	r3, [pc, #56]	; (c920 <bt_lbs_send_button_state+0x3c>)
{
    c8e8:	b089      	sub	sp, #36	; 0x24
	if (!notify_enabled) {
    c8ea:	781b      	ldrb	r3, [r3, #0]
{
    c8ec:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!notify_enabled) {
    c8f0:	b19b      	cbz	r3, c91a <bt_lbs_send_button_state+0x36>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    c8f2:	2100      	movs	r1, #0
    c8f4:	2218      	movs	r2, #24
    c8f6:	a802      	add	r0, sp, #8
    c8f8:	f00e fae4 	bl	1aec4 <memset>

	params.attr = attr;
    c8fc:	4b09      	ldr	r3, [pc, #36]	; (c924 <bt_lbs_send_button_state+0x40>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    c8fe:	2000      	movs	r0, #0
	params.attr = attr;
    c900:	9303      	str	r3, [sp, #12]
	params.data = data;
    c902:	f10d 0307 	add.w	r3, sp, #7
    c906:	9304      	str	r3, [sp, #16]
	params.len = len;
    c908:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    c90a:	a902      	add	r1, sp, #8
	params.len = len;
    c90c:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    c910:	f006 fd82 	bl	13418 <bt_gatt_notify_cb>
	}

	return bt_gatt_notify(NULL, &lbs_svc.attrs[2],
			      &button_state,
			      sizeof(button_state));
}
    c914:	b009      	add	sp, #36	; 0x24
    c916:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
    c91a:	f06f 000c 	mvn.w	r0, #12
    c91e:	e7f9      	b.n	c914 <bt_lbs_send_button_state+0x30>
    c920:	2000c117 	.word	0x2000c117
    c924:	0001db2c 	.word	0x0001db2c

0000c928 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    c928:	2303      	movs	r3, #3
static void _DoInit(void) {
    c92a:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    c92c:	4c10      	ldr	r4, [pc, #64]	; (c970 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    c92e:	4a11      	ldr	r2, [pc, #68]	; (c974 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    c930:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    c934:	4b10      	ldr	r3, [pc, #64]	; (c978 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    c936:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    c938:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    c93a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    c93e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    c940:	4a0e      	ldr	r2, [pc, #56]	; (c97c <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    c942:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    c944:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    c946:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    c948:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    c94a:	490d      	ldr	r1, [pc, #52]	; (c980 <_DoInit+0x58>)
    c94c:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    c94e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    c950:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    c952:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    c954:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    c956:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    c958:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    c95a:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    c95c:	f00e fa2d 	bl	1adba <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    c960:	4620      	mov	r0, r4
    c962:	4908      	ldr	r1, [pc, #32]	; (c984 <_DoInit+0x5c>)
    c964:	f00e fa29 	bl	1adba <strcpy>
  p->acID[6] = ' ';
    c968:	2320      	movs	r3, #32
    c96a:	71a3      	strb	r3, [r4, #6]
}
    c96c:	bd10      	pop	{r4, pc}
    c96e:	bf00      	nop
    c970:	2000a884 	.word	0x2000a884
    c974:	0001f414 	.word	0x0001f414
    c978:	2000c128 	.word	0x2000c128
    c97c:	2000c118 	.word	0x2000c118
    c980:	0001f41d 	.word	0x0001f41d
    c984:	0001f421 	.word	0x0001f421

0000c988 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    c988:	b570      	push	{r4, r5, r6, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    c98a:	2418      	movs	r4, #24
    c98c:	fb00 4504 	mla	r5, r0, r4, r4
    c990:	4b14      	ldr	r3, [pc, #80]	; (c9e4 <SEGGER_RTT_WriteNoLock+0x5c>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    c992:	4616      	mov	r6, r2
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
    c994:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    c996:	fb04 3300 	mla	r3, r4, r0, r3
    c99a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    c99c:	2c01      	cmp	r4, #1
    c99e:	d00e      	beq.n	c9be <SEGGER_RTT_WriteNoLock+0x36>
    c9a0:	2c02      	cmp	r4, #2
    c9a2:	d018      	beq.n	c9d6 <SEGGER_RTT_WriteNoLock+0x4e>
    c9a4:	b9e4      	cbnz	r4, c9e0 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    c9a6:	4628      	mov	r0, r5
    c9a8:	f00d fcd6 	bl	1a358 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    c9ac:	4286      	cmp	r6, r0
    c9ae:	d804      	bhi.n	c9ba <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    c9b0:	4632      	mov	r2, r6
    c9b2:	4628      	mov	r0, r5
    c9b4:	f00d fcd9 	bl	1a36a <_WriteNoCheck>
    c9b8:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    c9ba:	4620      	mov	r0, r4
    c9bc:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    c9be:	4628      	mov	r0, r5
    c9c0:	f00d fcca 	bl	1a358 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    c9c4:	4286      	cmp	r6, r0
    c9c6:	4634      	mov	r4, r6
    c9c8:	bf28      	it	cs
    c9ca:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    c9cc:	4628      	mov	r0, r5
    c9ce:	4622      	mov	r2, r4
    c9d0:	f00d fccb 	bl	1a36a <_WriteNoCheck>
    break;
    c9d4:	e7f1      	b.n	c9ba <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    c9d6:	4628      	mov	r0, r5
}
    c9d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    c9dc:	f00d bce1 	b.w	1a3a2 <_WriteBlocking>
  switch (pRing->Flags) {
    c9e0:	2400      	movs	r4, #0
  return Status;
    c9e2:	e7ea      	b.n	c9ba <SEGGER_RTT_WriteNoLock+0x32>
    c9e4:	2000a884 	.word	0x2000a884

0000c9e8 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    c9e8:	4904      	ldr	r1, [pc, #16]	; (c9fc <sub_bytes+0x14>)
    c9ea:	1e43      	subs	r3, r0, #1
    c9ec:	300f      	adds	r0, #15
    c9ee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    c9f2:	5c8a      	ldrb	r2, [r1, r2]
	for (i = 0; i < (Nb * Nk); ++i) {
    c9f4:	4283      	cmp	r3, r0
		s[i] = sbox[s[i]];
    c9f6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    c9f8:	d1f9      	bne.n	c9ee <sub_bytes+0x6>
	}
}
    c9fa:	4770      	bx	lr
    c9fc:	0001f428 	.word	0x0001f428

0000ca00 <tc_aes128_set_encrypt_key>:
{
    ca00:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca02:	4607      	mov	r7, r0
	const unsigned int rconst[11] = {
    ca04:	4e26      	ldr	r6, [pc, #152]	; (caa0 <tc_aes128_set_encrypt_key+0xa0>)
{
    ca06:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    ca08:	ad01      	add	r5, sp, #4
{
    ca0a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    ca0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    ca0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    ca10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    ca12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    ca14:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    ca18:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    ca1c:	4638      	mov	r0, r7
    ca1e:	2f00      	cmp	r7, #0
    ca20:	d039      	beq.n	ca96 <tc_aes128_set_encrypt_key+0x96>
	} else if (k == (const uint8_t *) 0) {
    ca22:	2c00      	cmp	r4, #0
    ca24:	d039      	beq.n	ca9a <tc_aes128_set_encrypt_key+0x9a>
    ca26:	1f38      	subs	r0, r7, #4
    ca28:	4602      	mov	r2, r0
    ca2a:	4621      	mov	r1, r4
    ca2c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    ca2e:	784b      	ldrb	r3, [r1, #1]
    ca30:	780d      	ldrb	r5, [r1, #0]
    ca32:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    ca34:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    ca38:	78cd      	ldrb	r5, [r1, #3]
	for (i = 0; i < Nk; ++i) {
    ca3a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    ca3c:	432b      	orrs	r3, r5
    ca3e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
	for (i = 0; i < Nk; ++i) {
    ca42:	428c      	cmp	r4, r1
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    ca44:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    ca48:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    ca4c:	d1ef      	bne.n	ca2e <tc_aes128_set_encrypt_key+0x2e>
    ca4e:	2104      	movs	r1, #4
			t = subword(rotword(t)) ^ rconst[i/Nk];
    ca50:	4c14      	ldr	r4, [pc, #80]	; (caa4 <tc_aes128_set_encrypt_key+0xa4>)
		if ((i % Nk) == 0) {
    ca52:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    ca54:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    ca56:	d116      	bne.n	ca86 <tc_aes128_set_encrypt_key+0x86>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    ca58:	f3c3 4207 	ubfx	r2, r3, #16, #8
    ca5c:	5ca5      	ldrb	r5, [r4, r2]
    ca5e:	0e1a      	lsrs	r2, r3, #24
    ca60:	5ca2      	ldrb	r2, [r4, r2]
    ca62:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    ca66:	f3c3 2507 	ubfx	r5, r3, #8, #8
    ca6a:	5d65      	ldrb	r5, [r4, r5]
    ca6c:	b2db      	uxtb	r3, r3
    ca6e:	5ce3      	ldrb	r3, [r4, r3]
    ca70:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    ca74:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    ca78:	ad0c      	add	r5, sp, #48	; 0x30
    ca7a:	f021 0303 	bic.w	r3, r1, #3
    ca7e:	442b      	add	r3, r5
    ca80:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    ca84:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    ca86:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    ca8a:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    ca8c:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    ca8e:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    ca90:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    ca92:	d1de      	bne.n	ca52 <tc_aes128_set_encrypt_key+0x52>
	return TC_CRYPTO_SUCCESS;
    ca94:	2001      	movs	r0, #1
}
    ca96:	b00d      	add	sp, #52	; 0x34
    ca98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    ca9a:	4620      	mov	r0, r4
    ca9c:	e7fb      	b.n	ca96 <tc_aes128_set_encrypt_key+0x96>
    ca9e:	bf00      	nop
    caa0:	0001d894 	.word	0x0001d894
    caa4:	0001f428 	.word	0x0001f428

0000caa8 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
    caa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    caac:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    caae:	6803      	ldr	r3, [r0, #0]
{
    cab0:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    cab2:	9302      	str	r3, [sp, #8]
    cab4:	6843      	ldr	r3, [r0, #4]
    cab6:	f8df a1b8 	ldr.w	sl, [pc, #440]	; cc70 <compress+0x1c8>
    caba:	9303      	str	r3, [sp, #12]
    cabc:	6883      	ldr	r3, [r0, #8]
    cabe:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
    cac2:	9304      	str	r3, [sp, #16]
    cac4:	68c3      	ldr	r3, [r0, #12]
    cac6:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    cac8:	6903      	ldr	r3, [r0, #16]
    caca:	9306      	str	r3, [sp, #24]
    cacc:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    cace:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
    cad2:	9307      	str	r3, [sp, #28]
    cad4:	6983      	ldr	r3, [r0, #24]
    cad6:	9308      	str	r3, [sp, #32]
    cad8:	69c3      	ldr	r3, [r0, #28]
    cada:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
    cade:	4698      	mov	r8, r3
    cae0:	9309      	str	r3, [sp, #36]	; 0x24
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
    cae2:	9b04      	ldr	r3, [sp, #16]
    cae4:	9300      	str	r3, [sp, #0]
	n = (((unsigned int)(*((*c)++))) << 24);
    cae6:	59cd      	ldr	r5, [r1, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
    cae8:	ab0c      	add	r3, sp, #48	; 0x30
    caea:	ba2d      	rev	r5, r5
    caec:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
    caee:	f85a 3b04 	ldr.w	r3, [sl], #4
	for (i = 0; i < 16; ++i) {
    caf2:	3704      	adds	r7, #4
    caf4:	eb05 0903 	add.w	r9, r5, r3
	return (((a) >> n) | ((a) << (32 - n)));
    caf8:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cafc:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
    cb00:	ea85 6572 	eor.w	r5, r5, r2, ror #25
    cb04:	444d      	add	r5, r9
    cb06:	ea2b 0302 	bic.w	r3, fp, r2
    cb0a:	ea02 090c 	and.w	r9, r2, ip
    cb0e:	ea83 0309 	eor.w	r3, r3, r9
    cb12:	442b      	add	r3, r5
		t2 = Sigma0(a) + Maj(a, b, c);
    cb14:	9d00      	ldr	r5, [sp, #0]
    cb16:	f8dd 9000 	ldr.w	r9, [sp]
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cb1a:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
    cb1c:	4075      	eors	r5, r6
	return (((a) >> n) | ((a) << (32 - n)));
    cb1e:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    cb22:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    cb26:	4025      	ands	r5, r4
    cb28:	ea06 0909 	and.w	r9, r6, r9
    cb2c:	ea85 0509 	eor.w	r5, r5, r9
    cb30:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
    cb34:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
    cb36:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
    cb38:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
    cb3c:	4443      	add	r3, r8
	for (i = 0; i < 16; ++i) {
    cb3e:	f8dd e000 	ldr.w	lr, [sp]
    cb42:	46d8      	mov	r8, fp
    cb44:	f040 8085 	bne.w	cc52 <compress+0x1aa>
    cb48:	f04f 0a10 	mov.w	sl, #16
    cb4c:	4949      	ldr	r1, [pc, #292]	; (cc74 <compress+0x1cc>)
    cb4e:	910a      	str	r1, [sp, #40]	; 0x28
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
    cb50:	4651      	mov	r1, sl
    cb52:	f10a 0a01 	add.w	sl, sl, #1
    cb56:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    cb5a:	f00a 070f 	and.w	r7, sl, #15
    cb5e:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    cb62:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cb66:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
    cb6a:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
    cb6e:	9701      	str	r7, [sp, #4]
		s0 = sigma0(s0);
    cb70:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
    cb74:	f101 070e 	add.w	r7, r1, #14
    cb78:	f007 070f 	and.w	r7, r7, #15
    cb7c:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
    cb80:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cb84:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
    cb86:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = sigma1(s1);
    cb8a:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
    cb8e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cb92:	f001 010f 	and.w	r1, r1, #15
    cb96:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
    cb9a:	eb0e 0989 	add.w	r9, lr, r9, lsl #2
    cb9e:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
    cba2:	f851 1c40 	ldr.w	r1, [r1, #-64]
    cba6:	f859 ec40 	ldr.w	lr, [r9, #-64]
	for ( ; i < 64; ++i) {
    cbaa:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cbae:	4471      	add	r1, lr
		s0 = sigma0(s0);
    cbb0:	f8dd e004 	ldr.w	lr, [sp, #4]
    cbb4:	ea88 08de 	eor.w	r8, r8, lr, lsr #3
		s1 = sigma1(s1);
    cbb8:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cbbc:	4441      	add	r1, r8
		s1 = sigma1(s1);
    cbbe:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cbc2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cbc4:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cbc6:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
    cbca:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
    cbce:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
    cbd2:	ea05 0802 	and.w	r8, r5, r2
    cbd6:	970a      	str	r7, [sp, #40]	; 0x28
    cbd8:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
    cbdc:	ea2c 0705 	bic.w	r7, ip, r5
    cbe0:	ea87 0708 	eor.w	r7, r7, r8
    cbe4:	ea89 6975 	eor.w	r9, r9, r5, ror #25
    cbe8:	444f      	add	r7, r9
    cbea:	4477      	add	r7, lr
    cbec:	4439      	add	r1, r7
    cbee:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
    cbf0:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
    cbf4:	ea84 0b06 	eor.w	fp, r4, r6
    cbf8:	ea0b 0b03 	and.w	fp, fp, r3
    cbfc:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
    cc00:	ea04 0e06 	and.w	lr, r4, r6
		h = g; g = f; f = e; e = d + t1;
    cc04:	f8dd 8000 	ldr.w	r8, [sp]
		t2 = Sigma0(a) + Maj(a, b, c);
    cc08:	ea8b 0e0e 	eor.w	lr, fp, lr
    cc0c:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
    cc10:	4477      	add	r7, lr
		h = g; g = f; f = e; e = d + t1;
    cc12:	4488      	add	r8, r1
		d = c; c = b; b = a; a = t1 + t2;
    cc14:	46e3      	mov	fp, ip
    cc16:	4439      	add	r1, r7
	for ( ; i < 64; ++i) {
    cc18:	9600      	str	r6, [sp, #0]
    cc1a:	d121      	bne.n	cc60 <compress+0x1b8>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
    cc1c:	9f02      	ldr	r7, [sp, #8]
    cc1e:	440f      	add	r7, r1
    cc20:	9903      	ldr	r1, [sp, #12]
    cc22:	6007      	str	r7, [r0, #0]
    cc24:	4419      	add	r1, r3
    cc26:	9b04      	ldr	r3, [sp, #16]
    cc28:	6041      	str	r1, [r0, #4]
    cc2a:	4423      	add	r3, r4
    cc2c:	6083      	str	r3, [r0, #8]
    cc2e:	9b05      	ldr	r3, [sp, #20]
    cc30:	4433      	add	r3, r6
    cc32:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
    cc34:	9b06      	ldr	r3, [sp, #24]
    cc36:	4443      	add	r3, r8
    cc38:	6103      	str	r3, [r0, #16]
    cc3a:	9b07      	ldr	r3, [sp, #28]
    cc3c:	442b      	add	r3, r5
    cc3e:	6143      	str	r3, [r0, #20]
    cc40:	9b08      	ldr	r3, [sp, #32]
    cc42:	4413      	add	r3, r2
    cc44:	6183      	str	r3, [r0, #24]
    cc46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc48:	4463      	add	r3, ip
    cc4a:	61c3      	str	r3, [r0, #28]
}
    cc4c:	b01d      	add	sp, #116	; 0x74
    cc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc52:	46e3      	mov	fp, ip
    cc54:	9600      	str	r6, [sp, #0]
    cc56:	4694      	mov	ip, r2
    cc58:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
    cc5a:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
    cc5c:	461c      	mov	r4, r3
    cc5e:	e742      	b.n	cae6 <compress+0x3e>
    cc60:	4694      	mov	ip, r2
    cc62:	4626      	mov	r6, r4
    cc64:	462a      	mov	r2, r5
    cc66:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
    cc68:	4645      	mov	r5, r8
		d = c; c = b; b = a; a = t1 + t2;
    cc6a:	460b      	mov	r3, r1
    cc6c:	e770      	b.n	cb50 <compress+0xa8>
    cc6e:	bf00      	nop
    cc70:	0001db7c 	.word	0x0001db7c
    cc74:	0001dbbc 	.word	0x0001dbbc

0000cc78 <tc_sha256_init>:
{
    cc78:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
    cc7a:	4604      	mov	r4, r0
    cc7c:	b1c8      	cbz	r0, ccb2 <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
    cc7e:	2270      	movs	r2, #112	; 0x70
    cc80:	2100      	movs	r1, #0
    cc82:	f00d fbcb 	bl	1a41c <_set>
	s->iv[1] = 0xbb67ae85;
    cc86:	4b0b      	ldr	r3, [pc, #44]	; (ccb4 <tc_sha256_init+0x3c>)
    cc88:	4a0b      	ldr	r2, [pc, #44]	; (ccb8 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
    cc8a:	490c      	ldr	r1, [pc, #48]	; (ccbc <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
    cc8c:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
    cc90:	4b0b      	ldr	r3, [pc, #44]	; (ccc0 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
    cc92:	480c      	ldr	r0, [pc, #48]	; (ccc4 <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
    cc94:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
    cc98:	4b0b      	ldr	r3, [pc, #44]	; (ccc8 <tc_sha256_init+0x50>)
    cc9a:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
    cc9e:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
    cca0:	4b0a      	ldr	r3, [pc, #40]	; (cccc <tc_sha256_init+0x54>)
    cca2:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
    cca4:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    cca8:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    ccac:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
    ccb0:	61e3      	str	r3, [r4, #28]
}
    ccb2:	bd10      	pop	{r4, pc}
    ccb4:	bb67ae85 	.word	0xbb67ae85
    ccb8:	6a09e667 	.word	0x6a09e667
    ccbc:	3c6ef372 	.word	0x3c6ef372
    ccc0:	a54ff53a 	.word	0xa54ff53a
    ccc4:	510e527f 	.word	0x510e527f
    ccc8:	9b05688c 	.word	0x9b05688c
    cccc:	1f83d9ab 	.word	0x1f83d9ab

0000ccd0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    ccd0:	4a0a      	ldr	r2, [pc, #40]	; (ccfc <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    ccd2:	490b      	ldr	r1, [pc, #44]	; (cd00 <arch_swap+0x30>)
	_current->arch.basepri = key;
    ccd4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    ccd6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    ccd8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
    ccdc:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    cce0:	4908      	ldr	r1, [pc, #32]	; (cd04 <arch_swap+0x34>)
    cce2:	684b      	ldr	r3, [r1, #4]
    cce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    cce8:	604b      	str	r3, [r1, #4]
    ccea:	2300      	movs	r3, #0
    ccec:	f383 8811 	msr	BASEPRI, r3
    ccf0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    ccf4:	6893      	ldr	r3, [r2, #8]
}
    ccf6:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
    ccfa:	4770      	bx	lr
    ccfc:	2000adec 	.word	0x2000adec
    cd00:	0001e1e8 	.word	0x0001e1e8
    cd04:	e000ed00 	.word	0xe000ed00

0000cd08 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    cd08:	4914      	ldr	r1, [pc, #80]	; (cd5c <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    cd0a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    cd0c:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
    cd10:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    cd12:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    cd16:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    cd1a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    cd1c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    cd20:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    cd24:	4f0e      	ldr	r7, [pc, #56]	; (cd60 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    cd26:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    cd2a:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    cd2c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    cd2e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    cd30:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
    cd34:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    cd36:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    cd3a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    cd3e:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
    cd42:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    cd46:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    cd4a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    cd4e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    cd50:	f00d ffa7 	bl	1aca2 <configure_builtin_stack_guard>
    pop {r2, lr}
    cd54:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    cd58:	4770      	bx	lr
    cd5a:	0000      	.short	0x0000
    ldr r1, =_kernel
    cd5c:	2000adec 	.word	0x2000adec
    ldr v4, =_SCS_ICSR
    cd60:	e000ed04 	.word	0xe000ed04

0000cd64 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    cd64:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    cd68:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    cd6a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    cd6e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    cd72:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    cd74:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    cd78:	2902      	cmp	r1, #2
    beq _oops
    cd7a:	d0ff      	beq.n	cd7c <_oops>

0000cd7c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    cd7c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    cd7e:	f00d ff94 	bl	1acaa <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    cd82:	bd01      	pop	{r0, pc}

0000cd84 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    cd84:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    cd86:	2b00      	cmp	r3, #0
    cd88:	db08      	blt.n	cd9c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    cd8a:	2201      	movs	r2, #1
    cd8c:	f000 001f 	and.w	r0, r0, #31
    cd90:	fa02 f000 	lsl.w	r0, r2, r0
    cd94:	4a02      	ldr	r2, [pc, #8]	; (cda0 <arch_irq_enable+0x1c>)
    cd96:	095b      	lsrs	r3, r3, #5
    cd98:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    cd9c:	4770      	bx	lr
    cd9e:	bf00      	nop
    cda0:	e000e100 	.word	0xe000e100

0000cda4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    cda4:	4b05      	ldr	r3, [pc, #20]	; (cdbc <arch_irq_is_enabled+0x18>)
    cda6:	0942      	lsrs	r2, r0, #5
    cda8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    cdac:	2301      	movs	r3, #1
    cdae:	f000 001f 	and.w	r0, r0, #31
    cdb2:	fa03 f000 	lsl.w	r0, r3, r0
}
    cdb6:	4010      	ands	r0, r2
    cdb8:	4770      	bx	lr
    cdba:	bf00      	nop
    cdbc:	e000e100 	.word	0xe000e100

0000cdc0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    cdc0:	b538      	push	{r3, r4, r5, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
    cdc2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    cdc4:	2c07      	cmp	r4, #7
{
    cdc6:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    cdc8:	d908      	bls.n	cddc <z_arm_irq_priority_set+0x1c>
    cdca:	490d      	ldr	r1, [pc, #52]	; (ce00 <z_arm_irq_priority_set+0x40>)
    cdcc:	480d      	ldr	r0, [pc, #52]	; (ce04 <z_arm_irq_priority_set+0x44>)
    cdce:	225c      	movs	r2, #92	; 0x5c
    cdd0:	f00c fe0d 	bl	199ee <printk>
    cdd4:	215c      	movs	r1, #92	; 0x5c
    cdd6:	480a      	ldr	r0, [pc, #40]	; (ce00 <z_arm_irq_priority_set+0x40>)
    cdd8:	f00d f8af 	bl	19f3a <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    cddc:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    cdde:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cde0:	bfac      	ite	ge
    cde2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cde6:	4b08      	ldrlt	r3, [pc, #32]	; (ce08 <z_arm_irq_priority_set+0x48>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cde8:	ea4f 1444 	mov.w	r4, r4, lsl #5
    cdec:	b2e4      	uxtb	r4, r4
    cdee:	bfab      	itete	ge
    cdf0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cdf4:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cdf8:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    cdfc:	555c      	strblt	r4, [r3, r5]
}
    cdfe:	bd38      	pop	{r3, r4, r5, pc}
    ce00:	0001f528 	.word	0x0001f528
    ce04:	0001ead7 	.word	0x0001ead7
    ce08:	e000ed14 	.word	0xe000ed14

0000ce0c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    ce0c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    ce10:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    ce12:	490b      	ldr	r1, [pc, #44]	; (ce40 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    ce14:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    ce18:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    ce1a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    ce1e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    ce22:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    ce24:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    ce28:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    ce2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    ce30:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    ce34:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    ce36:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    ce38:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
    ce3a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    ce3e:	4770      	bx	lr
    ce40:	00019acb 	.word	0x00019acb

0000ce44 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    ce44:	4604      	mov	r4, r0
    ce46:	b508      	push	{r3, lr}
    ce48:	460e      	mov	r6, r1
    ce4a:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    ce4c:	f000 faf6 	bl	d43c <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    ce50:	4b08      	ldr	r3, [pc, #32]	; (ce74 <arch_switch_to_main_thread+0x30>)
    ce52:	609c      	str	r4, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    ce54:	6f63      	ldr	r3, [r4, #116]	; 0x74
    ce56:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    ce5a:	4628      	mov	r0, r5
    ce5c:	f386 8809 	msr	PSP, r6
    ce60:	2100      	movs	r1, #0
    ce62:	b663      	cpsie	if
    ce64:	f381 8811 	msr	BASEPRI, r1
    ce68:	f3bf 8f6f 	isb	sy
    ce6c:	2200      	movs	r2, #0
    ce6e:	2300      	movs	r3, #0
    ce70:	f00c fe2b 	bl	19aca <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    ce74:	2000adec 	.word	0x2000adec

0000ce78 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    ce78:	4901      	ldr	r1, [pc, #4]	; (ce80 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    ce7a:	2210      	movs	r2, #16
	str	r2, [r1]
    ce7c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    ce7e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    ce80:	e000ed10 	.word	0xe000ed10

0000ce84 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    ce84:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    ce86:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    ce88:	f380 8811 	msr	BASEPRI, r0
	isb
    ce8c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    ce90:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    ce94:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    ce96:	b662      	cpsie	i
	isb
    ce98:	f3bf 8f6f 	isb	sy

	bx	lr
    ce9c:	4770      	bx	lr
    ce9e:	bf00      	nop

0000cea0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    cea0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    cea2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    cea4:	f381 8811 	msr	BASEPRI, r1

	wfe
    cea8:	bf20      	wfe

	msr	BASEPRI, r0
    ceaa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    ceae:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    ceb0:	4770      	bx	lr
    ceb2:	bf00      	nop

0000ceb4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    ceb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ceb6:	4605      	mov	r5, r0

	if (esf != NULL) {
    ceb8:	460c      	mov	r4, r1
    ceba:	b1c9      	cbz	r1, cef0 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    cebc:	688b      	ldr	r3, [r1, #8]
    cebe:	4810      	ldr	r0, [pc, #64]	; (cf00 <z_arm_fatal_error+0x4c>)
    cec0:	9300      	str	r3, [sp, #0]
    cec2:	e9d1 2300 	ldrd	r2, r3, [r1]
    cec6:	2145      	movs	r1, #69	; 0x45
    cec8:	f00c fd91 	bl	199ee <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    cecc:	6963      	ldr	r3, [r4, #20]
    cece:	2145      	movs	r1, #69	; 0x45
    ced0:	9300      	str	r3, [sp, #0]
    ced2:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    ced6:	480b      	ldr	r0, [pc, #44]	; (cf04 <z_arm_fatal_error+0x50>)
    ced8:	f00c fd89 	bl	199ee <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    cedc:	2145      	movs	r1, #69	; 0x45
    cede:	69e2      	ldr	r2, [r4, #28]
    cee0:	4809      	ldr	r0, [pc, #36]	; (cf08 <z_arm_fatal_error+0x54>)
    cee2:	f00c fd84 	bl	199ee <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    cee6:	2145      	movs	r1, #69	; 0x45
    cee8:	69a2      	ldr	r2, [r4, #24]
    ceea:	4808      	ldr	r0, [pc, #32]	; (cf0c <z_arm_fatal_error+0x58>)
    ceec:	f00c fd7f 	bl	199ee <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    cef0:	4621      	mov	r1, r4
    cef2:	4628      	mov	r0, r5
}
    cef4:	b003      	add	sp, #12
    cef6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    cefa:	f009 bdf9 	b.w	16af0 <z_fatal_error>
    cefe:	bf00      	nop
    cf00:	0001f55e 	.word	0x0001f55e
    cf04:	0001f592 	.word	0x0001f592
    cf08:	0001f5c6 	.word	0x0001f5c6
    cf0c:	0001f5da 	.word	0x0001f5da

0000cf10 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    cf10:	bf30      	wfi
    b z_SysNmiOnReset
    cf12:	f7ff bffd 	b.w	cf10 <z_SysNmiOnReset>
    cf16:	bf00      	nop

0000cf18 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    cf18:	4a0e      	ldr	r2, [pc, #56]	; (cf54 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    cf1a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    cf1c:	4b0e      	ldr	r3, [pc, #56]	; (cf58 <z_arm_prep_c+0x40>)
    cf1e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    cf22:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    cf24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    cf28:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    cf2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    cf30:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    cf34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    cf38:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    cf3c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    cf40:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    cf44:	f009 fe60 	bl	16c08 <z_bss_zero>
	z_data_copy();
    cf48:	f00b fe96 	bl	18c78 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    cf4c:	f000 fa48 	bl	d3e0 <z_arm_interrupt_init>
	z_cstart();
    cf50:	f009 fe7e 	bl	16c50 <z_cstart>
    cf54:	00008000 	.word	0x00008000
    cf58:	e000ed00 	.word	0xe000ed00

0000cf5c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    cf5c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    cf5e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    cf60:	4a0b      	ldr	r2, [pc, #44]	; (cf90 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    cf62:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    cf64:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    cf66:	bf1e      	ittt	ne
	movne	r1, #0
    cf68:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    cf6a:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    cf6c:	f010 f88a 	blne	1d084 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    cf70:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    cf72:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    cf76:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    cf7a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    cf7e:	4905      	ldr	r1, [pc, #20]	; (cf94 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    cf80:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    cf82:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    cf84:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    cf86:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    cf8a:	4903      	ldr	r1, [pc, #12]	; (cf98 <_isr_wrapper+0x3c>)
	bx r1
    cf8c:	4708      	bx	r1
    cf8e:	0000      	.short	0x0000
	ldr r2, =_kernel
    cf90:	2000adec 	.word	0x2000adec
	ldr r1, =_sw_isr_table
    cf94:	0001d484 	.word	0x0001d484
	ldr r1, =z_arm_int_exit
    cf98:	0000d3a1 	.word	0x0000d3a1

0000cf9c <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    cf9c:	f00c ffec 	bl	19f78 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    cfa0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    cfa2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    cfa6:	4808      	ldr	r0, [pc, #32]	; (cfc8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    cfa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    cfac:	1840      	adds	r0, r0, r1
    msr PSP, r0
    cfae:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    cfb2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    cfb6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    cfb8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    cfba:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    cfbe:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    cfc2:	f7ff ffa9 	bl	cf18 <z_arm_prep_c>
    cfc6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    cfc8:	2000ec68 	.word	0x2000ec68

0000cfcc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    cfcc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    cfd0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    cfd4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    cfd6:	4672      	mov	r2, lr
	bl z_arm_fault
    cfd8:	f000 f91a 	bl	d210 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    cfdc:	bd01      	pop	{r0, pc}
    cfde:	bf00      	nop

0000cfe0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    cfe0:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    cfe2:	4c21      	ldr	r4, [pc, #132]	; (d068 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    cfe4:	2145      	movs	r1, #69	; 0x45
    cfe6:	4821      	ldr	r0, [pc, #132]	; (d06c <usage_fault.constprop.0+0x8c>)
    cfe8:	f00c fd01 	bl	199ee <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    cfec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cfee:	019d      	lsls	r5, r3, #6
    cff0:	d503      	bpl.n	cffa <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    cff2:	2145      	movs	r1, #69	; 0x45
    cff4:	481e      	ldr	r0, [pc, #120]	; (d070 <usage_fault.constprop.0+0x90>)
    cff6:	f00c fcfa 	bl	199ee <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    cffa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cffc:	01dc      	lsls	r4, r3, #7
    cffe:	d503      	bpl.n	d008 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    d000:	2145      	movs	r1, #69	; 0x45
    d002:	481c      	ldr	r0, [pc, #112]	; (d074 <usage_fault.constprop.0+0x94>)
    d004:	f00c fcf3 	bl	199ee <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    d008:	4d17      	ldr	r5, [pc, #92]	; (d068 <usage_fault.constprop.0+0x88>)
    d00a:	6aac      	ldr	r4, [r5, #40]	; 0x28
    d00c:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    d010:	d004      	beq.n	d01c <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    d012:	2145      	movs	r1, #69	; 0x45
    d014:	4818      	ldr	r0, [pc, #96]	; (d078 <usage_fault.constprop.0+0x98>)
    d016:	f00c fcea 	bl	199ee <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    d01a:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    d01c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d01e:	0318      	lsls	r0, r3, #12
    d020:	d503      	bpl.n	d02a <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    d022:	2145      	movs	r1, #69	; 0x45
    d024:	4815      	ldr	r0, [pc, #84]	; (d07c <usage_fault.constprop.0+0x9c>)
    d026:	f00c fce2 	bl	199ee <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    d02a:	4d0f      	ldr	r5, [pc, #60]	; (d068 <usage_fault.constprop.0+0x88>)
    d02c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d02e:	0359      	lsls	r1, r3, #13
    d030:	d503      	bpl.n	d03a <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    d032:	2145      	movs	r1, #69	; 0x45
    d034:	4812      	ldr	r0, [pc, #72]	; (d080 <usage_fault.constprop.0+0xa0>)
    d036:	f00c fcda 	bl	199ee <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    d03a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d03c:	039a      	lsls	r2, r3, #14
    d03e:	d503      	bpl.n	d048 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    d040:	2145      	movs	r1, #69	; 0x45
    d042:	4810      	ldr	r0, [pc, #64]	; (d084 <usage_fault.constprop.0+0xa4>)
    d044:	f00c fcd3 	bl	199ee <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    d048:	4d07      	ldr	r5, [pc, #28]	; (d068 <usage_fault.constprop.0+0x88>)
    d04a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d04c:	03db      	lsls	r3, r3, #15
    d04e:	d503      	bpl.n	d058 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    d050:	2145      	movs	r1, #69	; 0x45
    d052:	480d      	ldr	r0, [pc, #52]	; (d088 <usage_fault.constprop.0+0xa8>)
    d054:	f00c fccb 	bl	199ee <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d058:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    d05a:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    d05c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    d060:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    d064:	62ab      	str	r3, [r5, #40]	; 0x28
}
    d066:	bd38      	pop	{r3, r4, r5, pc}
    d068:	e000ed00 	.word	0xe000ed00
    d06c:	0001f60d 	.word	0x0001f60d
    d070:	0001f62a 	.word	0x0001f62a
    d074:	0001f642 	.word	0x0001f642
    d078:	0001f661 	.word	0x0001f661
    d07c:	0001f690 	.word	0x0001f690
    d080:	0001f6b3 	.word	0x0001f6b3
    d084:	0001f6dd 	.word	0x0001f6dd
    d088:	0001f6fc 	.word	0x0001f6fc

0000d08c <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    d08c:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d08e:	4c23      	ldr	r4, [pc, #140]	; (d11c <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    d090:	4606      	mov	r6, r0
    d092:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    d094:	4822      	ldr	r0, [pc, #136]	; (d120 <bus_fault.constprop.0+0x94>)
    d096:	2145      	movs	r1, #69	; 0x45
    d098:	f00c fca9 	bl	199ee <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    d09c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d09e:	04d9      	lsls	r1, r3, #19
    d0a0:	d503      	bpl.n	d0aa <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    d0a2:	2145      	movs	r1, #69	; 0x45
    d0a4:	481f      	ldr	r0, [pc, #124]	; (d124 <bus_fault.constprop.0+0x98>)
    d0a6:	f00c fca2 	bl	199ee <printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    d0aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d0ac:	051a      	lsls	r2, r3, #20
    d0ae:	d503      	bpl.n	d0b8 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    d0b0:	2145      	movs	r1, #69	; 0x45
    d0b2:	481d      	ldr	r0, [pc, #116]	; (d128 <bus_fault.constprop.0+0x9c>)
    d0b4:	f00c fc9b 	bl	199ee <printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    d0b8:	4c18      	ldr	r4, [pc, #96]	; (d11c <bus_fault.constprop.0+0x90>)
    d0ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d0bc:	059b      	lsls	r3, r3, #22
    d0be:	d510      	bpl.n	d0e2 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    d0c0:	481a      	ldr	r0, [pc, #104]	; (d12c <bus_fault.constprop.0+0xa0>)
    d0c2:	2145      	movs	r1, #69	; 0x45
    d0c4:	f00c fc93 	bl	199ee <printk>
		STORE_xFAR(bfar, SCB->BFAR);
    d0c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    d0ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d0cc:	0418      	lsls	r0, r3, #16
    d0ce:	d508      	bpl.n	d0e2 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    d0d0:	2145      	movs	r1, #69	; 0x45
    d0d2:	4817      	ldr	r0, [pc, #92]	; (d130 <bus_fault.constprop.0+0xa4>)
    d0d4:	f00c fc8b 	bl	199ee <printk>
			if (from_hard_fault) {
    d0d8:	b11e      	cbz	r6, d0e2 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    d0da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d0dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    d0e0:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    d0e2:	4c0e      	ldr	r4, [pc, #56]	; (d11c <bus_fault.constprop.0+0x90>)
    d0e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d0e6:	0559      	lsls	r1, r3, #21
    d0e8:	d503      	bpl.n	d0f2 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    d0ea:	2145      	movs	r1, #69	; 0x45
    d0ec:	4811      	ldr	r0, [pc, #68]	; (d134 <bus_fault.constprop.0+0xa8>)
    d0ee:	f00c fc7e 	bl	199ee <printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    d0f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d0f4:	05da      	lsls	r2, r3, #23
    d0f6:	d50b      	bpl.n	d110 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    d0f8:	2145      	movs	r1, #69	; 0x45
    d0fa:	480f      	ldr	r0, [pc, #60]	; (d138 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    d0fc:	f00c fc77 	bl	199ee <printk>
	*recoverable = memory_fault_recoverable(esf);
    d100:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    d102:	4a06      	ldr	r2, [pc, #24]	; (d11c <bus_fault.constprop.0+0x90>)
    d104:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d106:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    d10a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    d10c:	7028      	strb	r0, [r5, #0]
}
    d10e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    d110:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d112:	049b      	lsls	r3, r3, #18
    d114:	d5f4      	bpl.n	d100 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    d116:	2145      	movs	r1, #69	; 0x45
    d118:	4808      	ldr	r0, [pc, #32]	; (d13c <bus_fault.constprop.0+0xb0>)
    d11a:	e7ef      	b.n	d0fc <bus_fault.constprop.0+0x70>
    d11c:	e000ed00 	.word	0xe000ed00
    d120:	0001f72c 	.word	0x0001f72c
    d124:	0001f747 	.word	0x0001f747
    d128:	0001f75d 	.word	0x0001f75d
    d12c:	0001f775 	.word	0x0001f775
    d130:	0001f793 	.word	0x0001f793
    d134:	0001f7ad 	.word	0x0001f7ad
    d138:	0001f7cd 	.word	0x0001f7cd
    d13c:	0001f7ea 	.word	0x0001f7ea

0000d140 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    d140:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d142:	4c29      	ldr	r4, [pc, #164]	; (d1e8 <mem_manage_fault.constprop.0+0xa8>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    d144:	4606      	mov	r6, r0
    d146:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    d148:	4828      	ldr	r0, [pc, #160]	; (d1ec <mem_manage_fault.constprop.0+0xac>)
    d14a:	2145      	movs	r1, #69	; 0x45
    d14c:	f00c fc4f 	bl	199ee <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    d150:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d152:	06d8      	lsls	r0, r3, #27
    d154:	d503      	bpl.n	d15e <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    d156:	2145      	movs	r1, #69	; 0x45
    d158:	4825      	ldr	r0, [pc, #148]	; (d1f0 <mem_manage_fault.constprop.0+0xb0>)
    d15a:	f00c fc48 	bl	199ee <printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    d15e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d160:	0719      	lsls	r1, r3, #28
    d162:	d503      	bpl.n	d16c <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    d164:	2145      	movs	r1, #69	; 0x45
    d166:	4823      	ldr	r0, [pc, #140]	; (d1f4 <mem_manage_fault.constprop.0+0xb4>)
    d168:	f00c fc41 	bl	199ee <printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    d16c:	4c1e      	ldr	r4, [pc, #120]	; (d1e8 <mem_manage_fault.constprop.0+0xa8>)
    d16e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d170:	079a      	lsls	r2, r3, #30
    d172:	d510      	bpl.n	d196 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    d174:	2145      	movs	r1, #69	; 0x45
    d176:	4820      	ldr	r0, [pc, #128]	; (d1f8 <mem_manage_fault.constprop.0+0xb8>)
    d178:	f00c fc39 	bl	199ee <printk>
		uint32_t temp = SCB->MMFAR;
    d17c:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    d17e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d180:	061b      	lsls	r3, r3, #24
    d182:	d508      	bpl.n	d196 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    d184:	2145      	movs	r1, #69	; 0x45
    d186:	481d      	ldr	r0, [pc, #116]	; (d1fc <mem_manage_fault.constprop.0+0xbc>)
    d188:	f00c fc31 	bl	199ee <printk>
			if (from_hard_fault) {
    d18c:	b11e      	cbz	r6, d196 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    d18e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    d194:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    d196:	4c14      	ldr	r4, [pc, #80]	; (d1e8 <mem_manage_fault.constprop.0+0xa8>)
    d198:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d19a:	07d8      	lsls	r0, r3, #31
    d19c:	d503      	bpl.n	d1a6 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    d19e:	2145      	movs	r1, #69	; 0x45
    d1a0:	4817      	ldr	r0, [pc, #92]	; (d200 <mem_manage_fault.constprop.0+0xc0>)
    d1a2:	f00c fc24 	bl	199ee <printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    d1a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d1a8:	0699      	lsls	r1, r3, #26
    d1aa:	d503      	bpl.n	d1b4 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    d1ac:	2145      	movs	r1, #69	; 0x45
    d1ae:	4815      	ldr	r0, [pc, #84]	; (d204 <mem_manage_fault.constprop.0+0xc4>)
    d1b0:	f00c fc1d 	bl	199ee <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    d1b4:	4b0c      	ldr	r3, [pc, #48]	; (d1e8 <mem_manage_fault.constprop.0+0xa8>)
    d1b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d1b8:	06d2      	lsls	r2, r2, #27
    d1ba:	d402      	bmi.n	d1c2 <mem_manage_fault.constprop.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    d1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    d1be:	079b      	lsls	r3, r3, #30
    d1c0:	d50a      	bpl.n	d1d8 <mem_manage_fault.constprop.0+0x98>
	__ASSERT(0,
    d1c2:	4911      	ldr	r1, [pc, #68]	; (d208 <mem_manage_fault.constprop.0+0xc8>)
    d1c4:	4811      	ldr	r0, [pc, #68]	; (d20c <mem_manage_fault.constprop.0+0xcc>)
    d1c6:	f240 1247 	movw	r2, #327	; 0x147
    d1ca:	f00c fc10 	bl	199ee <printk>
    d1ce:	f240 1147 	movw	r1, #327	; 0x147
    d1d2:	480d      	ldr	r0, [pc, #52]	; (d208 <mem_manage_fault.constprop.0+0xc8>)
    d1d4:	f00c feb1 	bl	19f3a <assert_post_action>
	*recoverable = memory_fault_recoverable(esf);
    d1d8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    d1da:	4a03      	ldr	r2, [pc, #12]	; (d1e8 <mem_manage_fault.constprop.0+0xa8>)
    d1dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    d1de:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    d1e2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    d1e4:	7028      	strb	r0, [r5, #0]
}
    d1e6:	bd70      	pop	{r4, r5, r6, pc}
    d1e8:	e000ed00 	.word	0xe000ed00
    d1ec:	0001f81e 	.word	0x0001f81e
    d1f0:	0001f839 	.word	0x0001f839
    d1f4:	0001f75d 	.word	0x0001f75d
    d1f8:	0001f871 	.word	0x0001f871
    d1fc:	0001f88e 	.word	0x0001f88e
    d200:	0001f8a9 	.word	0x0001f8a9
    d204:	0001f7ea 	.word	0x0001f7ea
    d208:	0001f8cd 	.word	0x0001f8cd
    d20c:	0001ead7 	.word	0x0001ead7

0000d210 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    d210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d214:	4b51      	ldr	r3, [pc, #324]	; (d35c <z_arm_fault+0x14c>)
{
    d216:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d218:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    d21c:	4689      	mov	r9, r1
    d21e:	4614      	mov	r4, r2
    d220:	2600      	movs	r6, #0
    d222:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    d224:	f3c8 0708 	ubfx	r7, r8, #0, #9
    d228:	f386 8811 	msr	BASEPRI, r6
    d22c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    d230:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    d234:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    d238:	d111      	bne.n	d25e <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
    d23a:	07d0      	lsls	r0, r2, #31
    d23c:	d40f      	bmi.n	d25e <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    d23e:	0651      	lsls	r1, r2, #25
    d240:	d403      	bmi.n	d24a <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    d242:	0722      	lsls	r2, r4, #28
    d244:	d408      	bmi.n	d258 <z_arm_fault+0x48>
			*nested_exc = true;
    d246:	2601      	movs	r6, #1
    d248:	e008      	b.n	d25c <z_arm_fault+0x4c>
		PR_FAULT_INFO("Exception occurred in Secure State");
    d24a:	2145      	movs	r1, #69	; 0x45
    d24c:	4844      	ldr	r0, [pc, #272]	; (d360 <z_arm_fault+0x150>)
    d24e:	f00c fbce 	bl	199ee <printk>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    d252:	f014 0404 	ands.w	r4, r4, #4
    d256:	d000      	beq.n	d25a <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)psp;
    d258:	464d      	mov	r5, r9
	*nested_exc = false;
    d25a:	2600      	movs	r6, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    d25c:	b95d      	cbnz	r5, d276 <z_arm_fault+0x66>
    d25e:	f44f 7271 	mov.w	r2, #964	; 0x3c4
    d262:	4940      	ldr	r1, [pc, #256]	; (d364 <z_arm_fault+0x154>)
    d264:	4840      	ldr	r0, [pc, #256]	; (d368 <z_arm_fault+0x158>)
    d266:	f00c fbc2 	bl	199ee <printk>
    d26a:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    d26e:	483d      	ldr	r0, [pc, #244]	; (d364 <z_arm_fault+0x154>)
    d270:	f00c fe63 	bl	19f3a <assert_post_action>
    d274:	2500      	movs	r5, #0
	*recoverable = false;
    d276:	2400      	movs	r4, #0
    d278:	1efb      	subs	r3, r7, #3
    d27a:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
    d27e:	2b09      	cmp	r3, #9
    d280:	d85a      	bhi.n	d338 <z_arm_fault+0x128>
    d282:	e8df f003 	tbb	[pc, r3]
    d286:	4e05      	.short	0x4e05
    d288:	59593252 	.word	0x59593252
    d28c:	56595959 	.word	0x56595959
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d290:	4f32      	ldr	r7, [pc, #200]	; (d35c <z_arm_fault+0x14c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    d292:	2145      	movs	r1, #69	; 0x45
    d294:	4835      	ldr	r0, [pc, #212]	; (d36c <z_arm_fault+0x15c>)
    d296:	f00c fbaa 	bl	199ee <printk>
	*recoverable = false;
    d29a:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    d29e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    d2a0:	f014 0402 	ands.w	r4, r4, #2
    d2a4:	d005      	beq.n	d2b2 <z_arm_fault+0xa2>
		PR_EXC("  Bus fault on vector table read");
    d2a6:	2145      	movs	r1, #69	; 0x45
    d2a8:	4831      	ldr	r0, [pc, #196]	; (d370 <z_arm_fault+0x160>)
	PR_FAULT_INFO(
    d2aa:	f00c fba0 	bl	199ee <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    d2ae:	2400      	movs	r4, #0
}
    d2b0:	e01e      	b.n	d2f0 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    d2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2b4:	005b      	lsls	r3, r3, #1
    d2b6:	d51b      	bpl.n	d2f0 <z_arm_fault+0xe0>
		PR_EXC("  Fault escalation (see below)");
    d2b8:	2145      	movs	r1, #69	; 0x45
    d2ba:	482e      	ldr	r0, [pc, #184]	; (d374 <z_arm_fault+0x164>)
    d2bc:	f00c fb97 	bl	199ee <printk>
		if (SCB_MMFSR != 0) {
    d2c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    d2c4:	b12b      	cbz	r3, d2d2 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    d2c6:	2001      	movs	r0, #1
    d2c8:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    d2cc:	f7ff ff38 	bl	d140 <mem_manage_fault.constprop.0>
    d2d0:	e00d      	b.n	d2ee <z_arm_fault+0xde>
		} else if (SCB_BFSR != 0) {
    d2d2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    d2d6:	b12b      	cbz	r3, d2e4 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    d2d8:	2001      	movs	r0, #1
    d2da:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    d2de:	f7ff fed5 	bl	d08c <bus_fault.constprop.0>
    d2e2:	e004      	b.n	d2ee <z_arm_fault+0xde>
		} else if (SCB_UFSR != 0) {
    d2e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    d2e6:	b29b      	uxth	r3, r3
    d2e8:	b113      	cbz	r3, d2f0 <z_arm_fault+0xe0>
			reason = usage_fault(esf);
    d2ea:	f7ff fe79 	bl	cfe0 <usage_fault.constprop.0>
    d2ee:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    d2f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    d2f4:	b993      	cbnz	r3, d31c <z_arm_fault+0x10c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    d2f6:	2220      	movs	r2, #32
    d2f8:	4629      	mov	r1, r5
    d2fa:	a802      	add	r0, sp, #8
    d2fc:	f00d fdb7 	bl	1ae6e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    d300:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d302:	b336      	cbz	r6, d352 <z_arm_fault+0x142>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    d304:	f3c3 0208 	ubfx	r2, r3, #0, #9
    d308:	b922      	cbnz	r2, d314 <z_arm_fault+0x104>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    d30a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    d30e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d312:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    d314:	4620      	mov	r0, r4
    d316:	a902      	add	r1, sp, #8
    d318:	f7ff fdcc 	bl	ceb4 <z_arm_fatal_error>
}
    d31c:	b00b      	add	sp, #44	; 0x2c
    d31e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    d322:	2000      	movs	r0, #0
    d324:	f10d 0107 	add.w	r1, sp, #7
    d328:	e7d0      	b.n	d2cc <z_arm_fault+0xbc>
		reason = bus_fault(esf, 0, recoverable);
    d32a:	2000      	movs	r0, #0
    d32c:	f10d 0107 	add.w	r1, sp, #7
    d330:	e7d5      	b.n	d2de <z_arm_fault+0xce>
	PR_FAULT_INFO(
    d332:	2145      	movs	r1, #69	; 0x45
    d334:	4810      	ldr	r0, [pc, #64]	; (d378 <z_arm_fault+0x168>)
    d336:	e7b8      	b.n	d2aa <z_arm_fault+0x9a>
	PR_FAULT_INFO("***** %s %d) *****",
    d338:	4910      	ldr	r1, [pc, #64]	; (d37c <z_arm_fault+0x16c>)
    d33a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    d33e:	4a10      	ldr	r2, [pc, #64]	; (d380 <z_arm_fault+0x170>)
    d340:	4810      	ldr	r0, [pc, #64]	; (d384 <z_arm_fault+0x174>)
    d342:	bf08      	it	eq
    d344:	460a      	moveq	r2, r1
    d346:	f1a7 0310 	sub.w	r3, r7, #16
    d34a:	2145      	movs	r1, #69	; 0x45
    d34c:	f00c fb4f 	bl	199ee <printk>
    d350:	e7ad      	b.n	d2ae <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    d352:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    d356:	f023 0301 	bic.w	r3, r3, #1
    d35a:	e7da      	b.n	d312 <z_arm_fault+0x102>
    d35c:	e000ed00 	.word	0xe000ed00
    d360:	0001f935 	.word	0x0001f935
    d364:	0001f8cd 	.word	0x0001f8cd
    d368:	0001ead7 	.word	0x0001ead7
    d36c:	0001f95d 	.word	0x0001f95d
    d370:	0001f979 	.word	0x0001f979
    d374:	0001f99f 	.word	0x0001f99f
    d378:	0001f9c3 	.word	0x0001f9c3
    d37c:	0001f907 	.word	0x0001f907
    d380:	0001f91c 	.word	0x0001f91c
    d384:	0001f9fe 	.word	0x0001f9fe

0000d388 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    d388:	4b04      	ldr	r3, [pc, #16]	; (d39c <z_arm_fault_init+0x14>)
    d38a:	695a      	ldr	r2, [r3, #20]
    d38c:	f042 0210 	orr.w	r2, r2, #16
    d390:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    d392:	695a      	ldr	r2, [r3, #20]
    d394:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    d398:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    d39a:	4770      	bx	lr
    d39c:	e000ed00 	.word	0xe000ed00

0000d3a0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    d3a0:	4b04      	ldr	r3, [pc, #16]	; (d3b4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    d3a2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    d3a4:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    d3a6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    d3a8:	d003      	beq.n	d3b2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    d3aa:	4903      	ldr	r1, [pc, #12]	; (d3b8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    d3ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    d3b0:	600a      	str	r2, [r1, #0]

0000d3b2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    d3b2:	4770      	bx	lr
	ldr r3, =_kernel
    d3b4:	2000adec 	.word	0x2000adec
	ldr r1, =_SCS_ICSR
    d3b8:	e000ed04 	.word	0xe000ed04

0000d3bc <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    d3bc:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    d3c0:	4905      	ldr	r1, [pc, #20]	; (d3d8 <sys_arch_reboot+0x1c>)
    d3c2:	4b06      	ldr	r3, [pc, #24]	; (d3dc <sys_arch_reboot+0x20>)
    d3c4:	68ca      	ldr	r2, [r1, #12]
    d3c6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    d3ca:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    d3cc:	60cb      	str	r3, [r1, #12]
    d3ce:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    d3d2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    d3d4:	e7fd      	b.n	d3d2 <sys_arch_reboot+0x16>
    d3d6:	bf00      	nop
    d3d8:	e000ed00 	.word	0xe000ed00
    d3dc:	05fa0004 	.word	0x05fa0004

0000d3e0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    d3e0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    d3e2:	2120      	movs	r1, #32
    d3e4:	4803      	ldr	r0, [pc, #12]	; (d3f4 <z_arm_interrupt_init+0x14>)
    d3e6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    d3e8:	3301      	adds	r3, #1
    d3ea:	2b45      	cmp	r3, #69	; 0x45
    d3ec:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    d3f0:	d1f9      	bne.n	d3e6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    d3f2:	4770      	bx	lr
    d3f4:	e000e100 	.word	0xe000e100

0000d3f8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    d3f8:	b508      	push	{r3, lr}
	if (_current == thread) {
    d3fa:	4b0e      	ldr	r3, [pc, #56]	; (d434 <z_impl_k_thread_abort+0x3c>)
    d3fc:	689b      	ldr	r3, [r3, #8]
    d3fe:	4283      	cmp	r3, r0
    d400:	d107      	bne.n	d412 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d402:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    d406:	b193      	cbz	r3, d42e <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    d408:	4a0b      	ldr	r2, [pc, #44]	; (d438 <z_impl_k_thread_abort+0x40>)
    d40a:	6853      	ldr	r3, [r2, #4]
    d40c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d410:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    d412:	f00a fd19 	bl	17e48 <z_thread_single_abort>
	__asm__ volatile(
    d416:	f04f 0320 	mov.w	r3, #32
    d41a:	f3ef 8011 	mrs	r0, BASEPRI
    d41e:	f383 8811 	msr	BASEPRI, r3
    d422:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    d426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    d42a:	f00f be7b 	b.w	1d124 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    d42e:	f00b fb19 	bl	18a64 <z_self_abort>
    d432:	bf00      	nop
    d434:	2000adec 	.word	0x2000adec
    d438:	e000ed00 	.word	0xe000ed00

0000d43c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    d43c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    d43e:	4c09      	ldr	r4, [pc, #36]	; (d464 <z_arm_configure_static_mpu_regions+0x28>)
    d440:	4a09      	ldr	r2, [pc, #36]	; (d468 <z_arm_configure_static_mpu_regions+0x2c>)
    d442:	4623      	mov	r3, r4
    d444:	2101      	movs	r1, #1
    d446:	4809      	ldr	r0, [pc, #36]	; (d46c <z_arm_configure_static_mpu_regions+0x30>)
    d448:	f000 f976 	bl	d738 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d44c:	2300      	movs	r3, #0
    d44e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    d450:	4b07      	ldr	r3, [pc, #28]	; (d470 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d452:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    d454:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d456:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    d458:	9301      	str	r3, [sp, #4]
    d45a:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    d45c:	f000 f988 	bl	d770 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    d460:	b004      	add	sp, #16
    d462:	bd10      	pop	{r4, pc}
    d464:	20070000 	.word	0x20070000
    d468:	20008000 	.word	0x20008000
    d46c:	0001dc7c 	.word	0x0001dc7c
    d470:	200087e8 	.word	0x200087e8

0000d474 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    d474:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d476:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    d478:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    d47a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    d47e:	f004 031f 	and.w	r3, r4, #31
    d482:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d484:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d486:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    d488:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    d48c:	4905      	ldr	r1, [pc, #20]	; (d4a4 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    d48e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    d492:	f043 0301 	orr.w	r3, r3, #1
    d496:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    d49a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    d49e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    d4a2:	bd10      	pop	{r4, pc}
    d4a4:	e000ed00 	.word	0xe000ed00

0000d4a8 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    d4a8:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    d4aa:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    d4ac:	680c      	ldr	r4, [r1, #0]
{
    d4ae:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    d4b0:	890a      	ldrh	r2, [r1, #8]
    d4b2:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
    d4b4:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d4b6:	3b01      	subs	r3, #1
    d4b8:	f024 041f 	bic.w	r4, r4, #31
    d4bc:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    d4be:	f002 021f 	and.w	r2, r2, #31
    d4c2:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d4c6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    d4ca:	2807      	cmp	r0, #7
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d4cc:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    d4ce:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    d4d2:	9303      	str	r3, [sp, #12]
	if (index > (get_num_regions() - 1U)) {
    d4d4:	d909      	bls.n	d4ea <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d4d6:	4602      	mov	r2, r0
    d4d8:	2145      	movs	r1, #69	; 0x45
    d4da:	4806      	ldr	r0, [pc, #24]	; (d4f4 <mpu_configure_region+0x4c>)
    d4dc:	f00c fa87 	bl	199ee <printk>
    d4e0:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    d4e4:	4620      	mov	r0, r4
    d4e6:	b005      	add	sp, #20
    d4e8:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    d4ea:	4669      	mov	r1, sp
    d4ec:	f7ff ffc2 	bl	d474 <region_init>
	return region_allocate_and_init(index,
    d4f0:	e7f8      	b.n	d4e4 <mpu_configure_region+0x3c>
    d4f2:	bf00      	nop
    d4f4:	0001fa1a 	.word	0x0001fa1a

0000d4f8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4fc:	4689      	mov	r9, r1
    d4fe:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    d500:	4606      	mov	r6, r0
    d502:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    d506:	4d59      	ldr	r5, [pc, #356]	; (d66c <mpu_configure_regions_and_partition.constprop.0+0x174>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    d508:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    d50a:	45c8      	cmp	r8, r9
    d50c:	da27      	bge.n	d55e <mpu_configure_regions_and_partition.constprop.0+0x66>
		if (regions[i].size == 0U) {
    d50e:	f8d6 a004 	ldr.w	sl, [r6, #4]
    d512:	f1ba 0f00 	cmp.w	sl, #0
    d516:	d045      	beq.n	d5a4 <mpu_configure_regions_and_partition.constprop.0+0xac>
		&&
    d518:	f1ba 0f1f 	cmp.w	sl, #31
    d51c:	d918      	bls.n	d550 <mpu_configure_regions_and_partition.constprop.0+0x58>
		&&
    d51e:	f01a 0f1f 	tst.w	sl, #31
    d522:	d115      	bne.n	d550 <mpu_configure_regions_and_partition.constprop.0+0x58>
		((part->start &
    d524:	f8d6 b000 	ldr.w	fp, [r6]
		&&
    d528:	f01b 0f1f 	tst.w	fp, #31
    d52c:	d110      	bne.n	d550 <mpu_configure_regions_and_partition.constprop.0+0x58>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d52e:	4658      	mov	r0, fp
    d530:	f00d fbc6 	bl	1acc0 <arm_cmse_mpu_region_get>
    d534:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d536:	eb0a 000b 	add.w	r0, sl, fp
    d53a:	3801      	subs	r0, #1
    d53c:	f00d fbc0 	bl	1acc0 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d540:	4287      	cmp	r7, r0
    d542:	d010      	beq.n	d566 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	return -EINVAL;
    d544:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    d548:	463a      	mov	r2, r7
    d54a:	2145      	movs	r1, #69	; 0x45
    d54c:	4848      	ldr	r0, [pc, #288]	; (d670 <mpu_configure_regions_and_partition.constprop.0+0x178>)
    d54e:	e002      	b.n	d556 <mpu_configure_regions_and_partition.constprop.0+0x5e>
			LOG_ERR("Partition %u: sanity check failed.", i);
    d550:	4642      	mov	r2, r8
    d552:	2145      	movs	r1, #69	; 0x45
    d554:	4847      	ldr	r0, [pc, #284]	; (d674 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d556:	f00c fa4a 	bl	199ee <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    d55a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    d55e:	4620      	mov	r0, r4
    d560:	b005      	add	sp, #20
    d562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    d566:	f117 0f16 	cmn.w	r7, #22
    d56a:	d0ed      	beq.n	d548 <mpu_configure_regions_and_partition.constprop.0+0x50>
			(u_reg_index > (reg_index - 1))) {
    d56c:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    d56e:	42bb      	cmp	r3, r7
    d570:	dbea      	blt.n	d548 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = index;
    d572:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    d576:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    d57a:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d57e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    d582:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    d586:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d58a:	e9d6 3200 	ldrd	r3, r2, [r6]
    d58e:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    d590:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    d592:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    d596:	d11d      	bne.n	d5d4 <mpu_configure_regions_and_partition.constprop.0+0xdc>
    d598:	45d3      	cmp	fp, sl
    d59a:	d107      	bne.n	d5ac <mpu_configure_regions_and_partition.constprop.0+0xb4>
			mpu_configure_region(u_reg_index, &regions[i]);
    d59c:	4631      	mov	r1, r6
    d59e:	b2f8      	uxtb	r0, r7
    d5a0:	f7ff ff82 	bl	d4a8 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    d5a4:	f108 0801 	add.w	r8, r8, #1
    d5a8:	360c      	adds	r6, #12
    d5aa:	e7ae      	b.n	d50a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    d5ac:	4631      	mov	r1, r6
	MPU->RNR = index;
    d5ae:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d5b2:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    d5b6:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d5ba:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    d5be:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    d5c0:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    d5c4:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    d5c6:	f7ff ff6f 	bl	d4a8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d5ca:	f110 0f16 	cmn.w	r0, #22
    d5ce:	d0c4      	beq.n	d55a <mpu_configure_regions_and_partition.constprop.0+0x62>
			reg_index++;
    d5d0:	1c44      	adds	r4, r0, #1
    d5d2:	e7e7      	b.n	d5a4 <mpu_configure_regions_and_partition.constprop.0+0xac>
				regions[i].start - 1);
    d5d4:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    d5d6:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
    d5d8:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    d5da:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    d5de:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    d5e2:	d108      	bne.n	d5f6 <mpu_configure_regions_and_partition.constprop.0+0xfe>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d5e4:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d5e8:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d5ea:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    d5ee:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d5f0:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    d5f4:	e7e7      	b.n	d5c6 <mpu_configure_regions_and_partition.constprop.0+0xce>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d5f6:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    d5fa:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    d5fe:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    d600:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    d604:	4631      	mov	r1, r6
    d606:	f7ff ff4f 	bl	d4a8 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    d60a:	f110 0f16 	cmn.w	r0, #22
    d60e:	d0a4      	beq.n	d55a <mpu_configure_regions_and_partition.constprop.0+0x62>
	MPU->RNR = index;
    d610:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    d614:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    d618:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    d61c:	f10b 3bff 	add.w	fp, fp, #4294967295
	attr->rbar = MPU->RBAR &
    d620:	f362 0304 	bfi	r3, r2, #0, #5
    d624:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d628:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d62c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    d630:	085b      	lsrs	r3, r3, #1
    d632:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
    d636:	e9d6 3100 	ldrd	r3, r1, [r6]
    d63a:	440b      	add	r3, r1
    d63c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    d63e:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    d642:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    d644:	445b      	add	r3, fp
    d646:	eba3 030a 	sub.w	r3, r3, sl
    d64a:	b2c0      	uxtb	r0, r0
    d64c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    d650:	2807      	cmp	r0, #7
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d652:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
    d656:	9303      	str	r3, [sp, #12]
    d658:	d903      	bls.n	d662 <mpu_configure_regions_and_partition.constprop.0+0x16a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    d65a:	4602      	mov	r2, r0
    d65c:	2145      	movs	r1, #69	; 0x45
    d65e:	4806      	ldr	r0, [pc, #24]	; (d678 <mpu_configure_regions_and_partition.constprop.0+0x180>)
    d660:	e779      	b.n	d556 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	region_init(index, region_conf);
    d662:	4669      	mov	r1, sp
    d664:	f7ff ff06 	bl	d474 <region_init>
    d668:	e7b2      	b.n	d5d0 <mpu_configure_regions_and_partition.constprop.0+0xd8>
    d66a:	bf00      	nop
    d66c:	e000ed00 	.word	0xe000ed00
    d670:	0001fa6d 	.word	0x0001fa6d
    d674:	0001fa45 	.word	0x0001fa45
    d678:	0001fa1a 	.word	0x0001fa1a

0000d67c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    d67c:	2205      	movs	r2, #5
    d67e:	4b04      	ldr	r3, [pc, #16]	; (d690 <arm_core_mpu_enable+0x14>)
    d680:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    d684:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    d688:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    d68c:	4770      	bx	lr
    d68e:	bf00      	nop
    d690:	e000ed00 	.word	0xe000ed00

0000d694 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    d694:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    d698:	2200      	movs	r2, #0
    d69a:	4b02      	ldr	r3, [pc, #8]	; (d6a4 <arm_core_mpu_disable+0x10>)
    d69c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    d6a0:	4770      	bx	lr
    d6a2:	bf00      	nop
    d6a4:	e000ed00 	.word	0xe000ed00

0000d6a8 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    d6a8:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    d6aa:	4d1d      	ldr	r5, [pc, #116]	; (d720 <arm_mpu_init+0x78>)
    d6ac:	682c      	ldr	r4, [r5, #0]
    d6ae:	2c08      	cmp	r4, #8
    d6b0:	d90d      	bls.n	d6ce <arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    d6b2:	f240 123b 	movw	r2, #315	; 0x13b
    d6b6:	491b      	ldr	r1, [pc, #108]	; (d724 <arm_mpu_init+0x7c>)
    d6b8:	481b      	ldr	r0, [pc, #108]	; (d728 <arm_mpu_init+0x80>)
    d6ba:	f00c f998 	bl	199ee <printk>
    d6be:	4819      	ldr	r0, [pc, #100]	; (d724 <arm_mpu_init+0x7c>)
    d6c0:	f240 113b 	movw	r1, #315	; 0x13b
    d6c4:	f00c fc39 	bl	19f3a <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    d6c8:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
    d6cc:	bd38      	pop	{r3, r4, r5, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d6ce:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    d6d0:	f7ff ffe0 	bl	d694 <arm_core_mpu_disable>
	MPU->MAIR0 =
    d6d4:	4b15      	ldr	r3, [pc, #84]	; (d72c <arm_mpu_init+0x84>)
    d6d6:	4a16      	ldr	r2, [pc, #88]	; (d730 <arm_mpu_init+0x88>)
    d6d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d6dc:	4284      	cmp	r4, r0
    d6de:	d117      	bne.n	d710 <arm_mpu_init+0x68>
	static_regions_num = mpu_config.num_regions;
    d6e0:	4b14      	ldr	r3, [pc, #80]	; (d734 <arm_mpu_init+0x8c>)
    d6e2:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    d6e4:	f7ff ffca 	bl	d67c <arm_core_mpu_enable>
	__ASSERT(
    d6e8:	4b10      	ldr	r3, [pc, #64]	; (d72c <arm_mpu_init+0x84>)
    d6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d6ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
    d6f2:	2b08      	cmp	r3, #8
    d6f4:	d00a      	beq.n	d70c <arm_mpu_init+0x64>
    d6f6:	490b      	ldr	r1, [pc, #44]	; (d724 <arm_mpu_init+0x7c>)
    d6f8:	480b      	ldr	r0, [pc, #44]	; (d728 <arm_mpu_init+0x80>)
    d6fa:	f44f 72b3 	mov.w	r2, #358	; 0x166
    d6fe:	f00c f976 	bl	199ee <printk>
    d702:	f44f 71b3 	mov.w	r1, #358	; 0x166
    d706:	4807      	ldr	r0, [pc, #28]	; (d724 <arm_mpu_init+0x7c>)
    d708:	f00c fc17 	bl	19f3a <assert_post_action>
	return 0;
    d70c:	2000      	movs	r0, #0
    d70e:	e7dd      	b.n	d6cc <arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    d710:	6869      	ldr	r1, [r5, #4]
    d712:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    d716:	f7ff fead 	bl	d474 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    d71a:	3001      	adds	r0, #1
    d71c:	e7de      	b.n	d6dc <arm_mpu_init+0x34>
    d71e:	bf00      	nop
    d720:	0001dc88 	.word	0x0001dc88
    d724:	0001fa95 	.word	0x0001fa95
    d728:	0001ead7 	.word	0x0001ead7
    d72c:	e000ed00 	.word	0xe000ed00
    d730:	0044ffaa 	.word	0x0044ffaa
    d734:	2000c528 	.word	0x2000c528

0000d738 <arm_core_mpu_configure_static_mpu_regions>:
{
    d738:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    d73a:	4c0a      	ldr	r4, [pc, #40]	; (d764 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    d73c:	7822      	ldrb	r2, [r4, #0]
    d73e:	f7ff fedb 	bl	d4f8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    d742:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    d744:	3016      	adds	r0, #22
    d746:	d10c      	bne.n	d762 <arm_core_mpu_configure_static_mpu_regions+0x2a>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    d748:	4907      	ldr	r1, [pc, #28]	; (d768 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    d74a:	4808      	ldr	r0, [pc, #32]	; (d76c <arm_core_mpu_configure_static_mpu_regions+0x34>)
    d74c:	f44f 7282 	mov.w	r2, #260	; 0x104
    d750:	f00c f94d 	bl	199ee <printk>
}
    d754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    d758:	f44f 7182 	mov.w	r1, #260	; 0x104
    d75c:	4802      	ldr	r0, [pc, #8]	; (d768 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    d75e:	f00c bbec 	b.w	19f3a <assert_post_action>
}
    d762:	bd10      	pop	{r4, pc}
    d764:	2000c528 	.word	0x2000c528
    d768:	0001fa95 	.word	0x0001fa95
    d76c:	0001ead7 	.word	0x0001ead7

0000d770 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    d770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d774:	4d30      	ldr	r5, [pc, #192]	; (d838 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    d776:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d778:	4606      	mov	r6, r0
    d77a:	f04f 0800 	mov.w	r8, #0
    d77e:	46ab      	mov	fp, r5
	MPU->RNR = index;
    d780:	4f2e      	ldr	r7, [pc, #184]	; (d83c <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d782:	45d0      	cmp	r8, sl
    d784:	db02      	blt.n	d78c <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
    d786:	b003      	add	sp, #12
    d788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    d78c:	f8d6 9004 	ldr.w	r9, [r6, #4]
    d790:	f1b9 0f00 	cmp.w	r9, #0
    d794:	d04a      	beq.n	d82c <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    d796:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d798:	4608      	mov	r0, r1
    d79a:	9101      	str	r1, [sp, #4]
    d79c:	f00d fa90 	bl	1acc0 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d7a0:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    d7a2:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    d7a4:	eb09 0001 	add.w	r0, r9, r1
    d7a8:	3801      	subs	r0, #1
    d7aa:	f00d fa89 	bl	1acc0 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    d7ae:	4284      	cmp	r4, r0
    d7b0:	f04f 0214 	mov.w	r2, #20
    d7b4:	4b22      	ldr	r3, [pc, #136]	; (d840 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
    d7b6:	d013      	beq.n	d7e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    d7b8:	f06f 0315 	mvn.w	r3, #21
    d7bc:	fb02 f808 	mul.w	r8, r2, r8
    d7c0:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    d7c4:	f44f 728a 	mov.w	r2, #276	; 0x114
    d7c8:	491e      	ldr	r1, [pc, #120]	; (d844 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
    d7ca:	481f      	ldr	r0, [pc, #124]	; (d848 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
    d7cc:	f00c f90f 	bl	199ee <printk>
    d7d0:	f44f 718a 	mov.w	r1, #276	; 0x114
    d7d4:	481b      	ldr	r0, [pc, #108]	; (d844 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
}
    d7d6:	b003      	add	sp, #12
    d7d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    d7dc:	f00c bbad 	b.w	19f3a <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    d7e0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    d7e4:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    d7e6:	d0ed      	beq.n	d7c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    d7e8:	7819      	ldrb	r1, [r3, #0]
    d7ea:	42a1      	cmp	r1, r4
    d7ec:	ddea      	ble.n	d7c4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    d7ee:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    d7f2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    d7f6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    d7fa:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    d7fe:	f100 0108 	add.w	r1, r0, #8
    d802:	7b00      	ldrb	r0, [r0, #12]
    d804:	f364 0004 	bfi	r0, r4, #0, #5
    d808:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    d80a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    d80e:	790c      	ldrb	r4, [r1, #4]
    d810:	0840      	lsrs	r0, r0, #1
    d812:	f360 1447 	bfi	r4, r0, #5, #3
    d816:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    d818:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    d81c:	f021 011f 	bic.w	r1, r1, #31
    d820:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    d822:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    d826:	f021 011f 	bic.w	r1, r1, #31
    d82a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    d82c:	f108 0801 	add.w	r8, r8, #1
    d830:	3514      	adds	r5, #20
    d832:	360c      	adds	r6, #12
    d834:	e7a5      	b.n	d782 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    d836:	bf00      	nop
    d838:	2000a92c 	.word	0x2000a92c
    d83c:	e000ed00 	.word	0xe000ed00
    d840:	2000c528 	.word	0x2000c528
    d844:	0001fa95 	.word	0x0001fa95
    d848:	0001ead7 	.word	0x0001ead7

0000d84c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    d84c:	4b01      	ldr	r3, [pc, #4]	; (d854 <__stdout_hook_install+0x8>)
    d84e:	6018      	str	r0, [r3, #0]
}
    d850:	4770      	bx	lr
    d852:	bf00      	nop
    d854:	20008328 	.word	0x20008328

0000d858 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
    d858:	2000      	movs	r0, #0
    d85a:	4b02      	ldr	r3, [pc, #8]	; (d864 <remoteproc_mgr_boot+0xc>)
    d85c:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
    d860:	4770      	bx	lr
    d862:	bf00      	nop
    d864:	40005000 	.word	0x40005000

0000d868 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    d868:	4b0e      	ldr	r3, [pc, #56]	; (d8a4 <bt_hex_real+0x3c>)
    d86a:	2940      	cmp	r1, #64	; 0x40
    d86c:	bf28      	it	cs
    d86e:	2140      	movcs	r1, #64	; 0x40
{
    d870:	b570      	push	{r4, r5, r6, lr}
    d872:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    d874:	4c0c      	ldr	r4, [pc, #48]	; (d8a8 <bt_hex_real+0x40>)
    d876:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
    d878:	42b0      	cmp	r0, r6
    d87a:	f103 0302 	add.w	r3, r3, #2
    d87e:	d104      	bne.n	d88a <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    d880:	2300      	movs	r3, #0
    d882:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    d886:	4807      	ldr	r0, [pc, #28]	; (d8a4 <bt_hex_real+0x3c>)
    d888:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    d88a:	7802      	ldrb	r2, [r0, #0]
    d88c:	0912      	lsrs	r2, r2, #4
    d88e:	5ca2      	ldrb	r2, [r4, r2]
    d890:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    d894:	f810 2b01 	ldrb.w	r2, [r0], #1
    d898:	f002 020f 	and.w	r2, r2, #15
    d89c:	5ca2      	ldrb	r2, [r4, r2]
    d89e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    d8a2:	e7e9      	b.n	d878 <bt_hex_real+0x10>
    d8a4:	2000c547 	.word	0x2000c547
    d8a8:	0001fafe 	.word	0x0001fafe

0000d8ac <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    d8ac:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    d8ae:	7803      	ldrb	r3, [r0, #0]
    d8b0:	b08b      	sub	sp, #44	; 0x2c
    d8b2:	4604      	mov	r4, r0
    d8b4:	ad07      	add	r5, sp, #28
    d8b6:	2b03      	cmp	r3, #3
    d8b8:	d821      	bhi.n	d8fe <bt_addr_le_str_real+0x52>
    d8ba:	e8df f003 	tbb	[pc, r3]
    d8be:	1a02      	.short	0x1a02
    d8c0:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    d8c2:	4912      	ldr	r1, [pc, #72]	; (d90c <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    d8c4:	4628      	mov	r0, r5
    d8c6:	f00d fa78 	bl	1adba <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    d8ca:	7863      	ldrb	r3, [r4, #1]
    d8cc:	211e      	movs	r1, #30
    d8ce:	9304      	str	r3, [sp, #16]
    d8d0:	78a3      	ldrb	r3, [r4, #2]
    d8d2:	4a0f      	ldr	r2, [pc, #60]	; (d910 <bt_addr_le_str_real+0x64>)
    d8d4:	9303      	str	r3, [sp, #12]
    d8d6:	78e3      	ldrb	r3, [r4, #3]
    d8d8:	9505      	str	r5, [sp, #20]
    d8da:	9302      	str	r3, [sp, #8]
    d8dc:	7923      	ldrb	r3, [r4, #4]
    d8de:	480d      	ldr	r0, [pc, #52]	; (d914 <bt_addr_le_str_real+0x68>)
    d8e0:	9301      	str	r3, [sp, #4]
    d8e2:	7963      	ldrb	r3, [r4, #5]
    d8e4:	9300      	str	r3, [sp, #0]
    d8e6:	79a3      	ldrb	r3, [r4, #6]
    d8e8:	f00c f88e 	bl	19a08 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    d8ec:	4809      	ldr	r0, [pc, #36]	; (d914 <bt_addr_le_str_real+0x68>)
    d8ee:	b00b      	add	sp, #44	; 0x2c
    d8f0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    d8f2:	4909      	ldr	r1, [pc, #36]	; (d918 <bt_addr_le_str_real+0x6c>)
    d8f4:	e7e6      	b.n	d8c4 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    d8f6:	4909      	ldr	r1, [pc, #36]	; (d91c <bt_addr_le_str_real+0x70>)
    d8f8:	e7e4      	b.n	d8c4 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    d8fa:	4909      	ldr	r1, [pc, #36]	; (d920 <bt_addr_le_str_real+0x74>)
    d8fc:	e7e2      	b.n	d8c4 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    d8fe:	210a      	movs	r1, #10
    d900:	4628      	mov	r0, r5
    d902:	4a08      	ldr	r2, [pc, #32]	; (d924 <bt_addr_le_str_real+0x78>)
    d904:	f00c f880 	bl	19a08 <snprintk>
		break;
    d908:	e7df      	b.n	d8ca <bt_addr_le_str_real+0x1e>
    d90a:	bf00      	nop
    d90c:	0001e4e8 	.word	0x0001e4e8
    d910:	0001e511 	.word	0x0001e511
    d914:	2000c529 	.word	0x2000c529
    d918:	0001e4ef 	.word	0x0001e4ef
    d91c:	0001e4f6 	.word	0x0001e4f6
    d920:	0001e500 	.word	0x0001e500
    d924:	0001e50a 	.word	0x0001e50a

0000d928 <save_id>:
#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
	int err;
	BT_INFO("Saving ID");
    d928:	2149      	movs	r1, #73	; 0x49
{
    d92a:	b508      	push	{r3, lr}
	BT_INFO("Saving ID");
    d92c:	4809      	ldr	r0, [pc, #36]	; (d954 <save_id+0x2c>)
    d92e:	f00c f85e 	bl	199ee <printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    d932:	4909      	ldr	r1, [pc, #36]	; (d958 <save_id+0x30>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    d934:	4809      	ldr	r0, [pc, #36]	; (d95c <save_id+0x34>)
    d936:	79ca      	ldrb	r2, [r1, #7]
    d938:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    d93c:	f7fd fc66 	bl	b20c <settings_save_one>
	if (err) {
    d940:	4602      	mov	r2, r0
    d942:	b128      	cbz	r0, d950 <save_id+0x28>
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    d944:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    d948:	2145      	movs	r1, #69	; 0x45
    d94a:	4805      	ldr	r0, [pc, #20]	; (d960 <save_id+0x38>)
    d94c:	f00c b84f 	b.w	199ee <printk>
}
    d950:	bd08      	pop	{r3, pc}
    d952:	bf00      	nop
    d954:	0001fb0f 	.word	0x0001fb0f
    d958:	20008000 	.word	0x20008000
    d95c:	0001fb1e 	.word	0x0001fb1e
    d960:	0001fb24 	.word	0x0001fb24

0000d964 <set>:
{
    d964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d966:	4616      	mov	r6, r2
    d968:	461f      	mov	r7, r3
	if (!name) {
    d96a:	4604      	mov	r4, r0
    d96c:	b930      	cbnz	r0, d97c <set+0x18>
		BT_ERR("Insufficient number of arguments");
    d96e:	2145      	movs	r1, #69	; 0x45
    d970:	4819      	ldr	r0, [pc, #100]	; (d9d8 <set+0x74>)
    d972:	f00c f83c 	bl	199ee <printk>
	return -ENOENT;
    d976:	f06f 0401 	mvn.w	r4, #1
    d97a:	e013      	b.n	d9a4 <set+0x40>
	len = settings_name_next(name, &next);
    d97c:	a901      	add	r1, sp, #4
    d97e:	f00c fb55 	bl	1a02c <settings_name_next>
	if (!strncmp(name, "id", len)) {
    d982:	4916      	ldr	r1, [pc, #88]	; (d9dc <set+0x78>)
	len = settings_name_next(name, &next);
    d984:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
    d986:	4620      	mov	r0, r4
    d988:	f00d fa4f 	bl	1ae2a <strncmp>
    d98c:	4604      	mov	r4, r0
    d98e:	2800      	cmp	r0, #0
    d990:	d1f1      	bne.n	d976 <set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d992:	4d13      	ldr	r5, [pc, #76]	; (d9e0 <set+0x7c>)
    d994:	e8d5 3faf 	lda	r3, [r5]
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    d998:	075b      	lsls	r3, r3, #29
    d99a:	d506      	bpl.n	d9aa <set+0x46>
			BT_WARN("Ignoring identities stored in flash");
    d99c:	2157      	movs	r1, #87	; 0x57
    d99e:	4811      	ldr	r0, [pc, #68]	; (d9e4 <set+0x80>)
    d9a0:	f00c f825 	bl	199ee <printk>
}
    d9a4:	4620      	mov	r0, r4
    d9a6:	b003      	add	sp, #12
    d9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    d9aa:	3d94      	subs	r5, #148	; 0x94
    d9ac:	2207      	movs	r2, #7
    d9ae:	4629      	mov	r1, r5
    d9b0:	4638      	mov	r0, r7
    d9b2:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    d9b4:	2806      	cmp	r0, #6
    d9b6:	d80a      	bhi.n	d9ce <set+0x6a>
				BT_ERR("Invalid length ID address in storage");
    d9b8:	2145      	movs	r1, #69	; 0x45
    d9ba:	480b      	ldr	r0, [pc, #44]	; (d9e8 <set+0x84>)
    d9bc:	f00c f817 	bl	199ee <printk>
			(void)memset(bt_dev.id_addr, 0,
    d9c0:	2207      	movs	r2, #7
    d9c2:	4621      	mov	r1, r4
    d9c4:	4628      	mov	r0, r5
    d9c6:	f00d fa7d 	bl	1aec4 <memset>
			bt_dev.id_count = 0U;
    d9ca:	71ec      	strb	r4, [r5, #7]
    d9cc:	e7ea      	b.n	d9a4 <set+0x40>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    d9ce:	2307      	movs	r3, #7
    d9d0:	fbb0 f0f3 	udiv	r0, r0, r3
    d9d4:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    d9d6:	e7e5      	b.n	d9a4 <set+0x40>
    d9d8:	0001fb44 	.word	0x0001fb44
    d9dc:	0001e4fd 	.word	0x0001e4fd
    d9e0:	20008094 	.word	0x20008094
    d9e4:	0001fb6a 	.word	0x0001fb6a
    d9e8:	0001fb93 	.word	0x0001fb93

0000d9ec <bt_settings_encode_key>:
{
    d9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9f0:	b088      	sub	sp, #32
    d9f2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    d9f6:	799c      	ldrb	r4, [r3, #6]
    d9f8:	795d      	ldrb	r5, [r3, #5]
    d9fa:	791e      	ldrb	r6, [r3, #4]
    d9fc:	78df      	ldrb	r7, [r3, #3]
    d9fe:	f893 c002 	ldrb.w	ip, [r3, #2]
    da02:	f893 e001 	ldrb.w	lr, [r3, #1]
    da06:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    da08:	f1b8 0f00 	cmp.w	r8, #0
    da0c:	d00e      	beq.n	da2c <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    da0e:	e9cd 3806 	strd	r3, r8, [sp, #24]
    da12:	e9cd ce04 	strd	ip, lr, [sp, #16]
    da16:	4613      	mov	r3, r2
    da18:	e9cd 6702 	strd	r6, r7, [sp, #8]
    da1c:	e9cd 4500 	strd	r4, r5, [sp]
    da20:	4a08      	ldr	r2, [pc, #32]	; (da44 <bt_settings_encode_key+0x58>)
    da22:	f00b fff1 	bl	19a08 <snprintk>
}
    da26:	b008      	add	sp, #32
    da28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    da2c:	e9cd e305 	strd	lr, r3, [sp, #20]
    da30:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    da34:	4613      	mov	r3, r2
    da36:	e9cd 5601 	strd	r5, r6, [sp, #4]
    da3a:	4a03      	ldr	r2, [pc, #12]	; (da48 <bt_settings_encode_key+0x5c>)
    da3c:	9400      	str	r4, [sp, #0]
    da3e:	f00b ffe3 	bl	19a08 <snprintk>
}
    da42:	e7f0      	b.n	da26 <bt_settings_encode_key+0x3a>
    da44:	0001fbbd 	.word	0x0001fbbd
    da48:	0001fbe1 	.word	0x0001fbe1

0000da4c <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    da4c:	4907      	ldr	r1, [pc, #28]	; (da6c <bt_settings_save_id+0x20>)
    da4e:	e8d1 3fef 	ldaex	r3, [r1]
    da52:	f043 0201 	orr.w	r2, r3, #1
    da56:	e8c1 2fe0 	stlex	r0, r2, [r1]
    da5a:	2800      	cmp	r0, #0
    da5c:	d1f7      	bne.n	da4e <bt_settings_save_id+0x2>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    da5e:	07db      	lsls	r3, r3, #31
    da60:	d403      	bmi.n	da6a <bt_settings_save_id+0x1e>
		k_queue_append(&work_q->queue, work);
    da62:	4803      	ldr	r0, [pc, #12]	; (da70 <bt_settings_save_id+0x24>)
    da64:	3908      	subs	r1, #8
    da66:	f00f bb3f 	b.w	1d0e8 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    da6a:	4770      	bx	lr
    da6c:	20008334 	.word	0x20008334
    da70:	2000a3b0 	.word	0x2000a3b0

0000da74 <commit>:

static int commit(void)
{
    da74:	b538      	push	{r3, r4, r5, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    da76:	4c13      	ldr	r4, [pc, #76]	; (dac4 <commit+0x50>)
    da78:	79e3      	ldrb	r3, [r4, #7]
    da7a:	b96b      	cbnz	r3, da98 <commit+0x24>
		bt_setup_public_id_addr();
    da7c:	f001 ffc0 	bl	fa00 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    da80:	79e3      	ldrb	r3, [r4, #7]
    da82:	b94b      	cbnz	r3, da98 <commit+0x24>
		int err;

		err = bt_setup_random_id_addr();
    da84:	f002 f84a 	bl	fb1c <bt_setup_random_id_addr>
		if (err) {
    da88:	4604      	mov	r4, r0
    da8a:	b128      	cbz	r0, da98 <commit+0x24>
			BT_ERR("Unable to setup an identity address");
    da8c:	2145      	movs	r1, #69	; 0x45
    da8e:	480e      	ldr	r0, [pc, #56]	; (dac8 <commit+0x54>)
    da90:	f00b ffad 	bl	199ee <printk>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    da94:	4620      	mov	r0, r4
    da96:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    da98:	4d0c      	ldr	r5, [pc, #48]	; (dacc <commit+0x58>)
    da9a:	e8d5 3faf 	lda	r3, [r5]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    da9e:	079b      	lsls	r3, r3, #30
    daa0:	d401      	bmi.n	daa6 <commit+0x32>
		bt_finalize_init();
    daa2:	f001 fc95 	bl	f3d0 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    daa6:	e8d5 4fef 	ldaex	r4, [r5]
    daaa:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    daae:	e8c5 3fe2 	stlex	r2, r3, [r5]
    dab2:	2a00      	cmp	r2, #0
    dab4:	d1f7      	bne.n	daa6 <commit+0x32>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    dab6:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    daba:	d0eb      	beq.n	da94 <commit+0x20>
		bt_settings_save_id();
    dabc:	f7ff ffc6 	bl	da4c <bt_settings_save_id>
	return 0;
    dac0:	2400      	movs	r4, #0
    dac2:	e7e7      	b.n	da94 <commit+0x20>
    dac4:	20008000 	.word	0x20008000
    dac8:	0001fc02 	.word	0x0001fc02
    dacc:	20008094 	.word	0x20008094

0000dad0 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    dad0:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    dad2:	f7fd fc65 	bl	b3a0 <settings_subsys_init>
	if (err) {
    dad6:	4604      	mov	r4, r0
    dad8:	b120      	cbz	r0, dae4 <bt_settings_init+0x14>
		BT_ERR("settings_subsys_init failed (err %d)", err);
    dada:	4602      	mov	r2, r0
    dadc:	2145      	movs	r1, #69	; 0x45
    dade:	4802      	ldr	r0, [pc, #8]	; (dae8 <bt_settings_init+0x18>)
    dae0:	f00b ff85 	bl	199ee <printk>
		return err;
	}

	return 0;
}
    dae4:	4620      	mov	r0, r4
    dae6:	bd10      	pop	{r4, pc}
    dae8:	0001fc2b 	.word	0x0001fc2b

0000daec <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    daec:	4603      	mov	r3, r0
    daee:	b430      	push	{r4, r5}
	switch (src->type) {
    daf0:	781a      	ldrb	r2, [r3, #0]
{
    daf2:	4608      	mov	r0, r1
	switch (src->type) {
    daf4:	2a01      	cmp	r2, #1
    daf6:	d013      	beq.n	db20 <uuid_to_uuid128+0x34>
    daf8:	2a02      	cmp	r2, #2
    dafa:	d026      	beq.n	db4a <uuid_to_uuid128+0x5e>
    dafc:	b972      	cbnz	r2, db1c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    dafe:	4a15      	ldr	r2, [pc, #84]	; (db54 <uuid_to_uuid128+0x68>)
    db00:	f102 0410 	add.w	r4, r2, #16
    db04:	f852 5b04 	ldr.w	r5, [r2], #4
    db08:	42a2      	cmp	r2, r4
    db0a:	f841 5b04 	str.w	r5, [r1], #4
    db0e:	d1f9      	bne.n	db04 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    db10:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    db12:	7812      	ldrb	r2, [r2, #0]
    db14:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    db16:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    db18:	0a1b      	lsrs	r3, r3, #8
    db1a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    db1c:	bc30      	pop	{r4, r5}
    db1e:	4770      	bx	lr
		*dst = uuid128_base;
    db20:	4a0c      	ldr	r2, [pc, #48]	; (db54 <uuid_to_uuid128+0x68>)
    db22:	f102 0410 	add.w	r4, r2, #16
    db26:	f852 5b04 	ldr.w	r5, [r2], #4
    db2a:	42a2      	cmp	r2, r4
    db2c:	f841 5b04 	str.w	r5, [r1], #4
    db30:	d1f9      	bne.n	db26 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    db32:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    db34:	7812      	ldrb	r2, [r2, #0]
    db36:	700a      	strb	r2, [r1, #0]
    db38:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    db3c:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    db3e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    db40:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    db42:	0a1b      	lsrs	r3, r3, #8
    db44:	7382      	strb	r2, [r0, #14]
    db46:	7403      	strb	r3, [r0, #16]
}
    db48:	e7e8      	b.n	db1c <uuid_to_uuid128+0x30>
		memcpy(dst, src, sizeof(*dst));
    db4a:	2211      	movs	r2, #17
}
    db4c:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    db4e:	4619      	mov	r1, r3
    db50:	f00d b98d 	b.w	1ae6e <memcpy>
    db54:	0001fc64 	.word	0x0001fc64

0000db58 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    db58:	2801      	cmp	r0, #1
{
    db5a:	b570      	push	{r4, r5, r6, lr}
    db5c:	4605      	mov	r5, r0
    db5e:	4616      	mov	r6, r2
    db60:	461c      	mov	r4, r3
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
    db62:	d010      	beq.n	db86 <bt_buf_get_rx+0x2e>
    db64:	2803      	cmp	r0, #3
    db66:	d00a      	beq.n	db7e <bt_buf_get_rx+0x26>
    db68:	2805      	cmp	r0, #5
    db6a:	d008      	beq.n	db7e <bt_buf_get_rx+0x26>
    db6c:	490c      	ldr	r1, [pc, #48]	; (dba0 <bt_buf_get_rx+0x48>)
    db6e:	480d      	ldr	r0, [pc, #52]	; (dba4 <bt_buf_get_rx+0x4c>)
    db70:	2233      	movs	r2, #51	; 0x33
    db72:	f00b ff3c 	bl	199ee <printk>
    db76:	2133      	movs	r1, #51	; 0x33
    db78:	4809      	ldr	r0, [pc, #36]	; (dba0 <bt_buf_get_rx+0x48>)
    db7a:	f00c f9de 	bl	19f3a <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
    db7e:	4632      	mov	r2, r6
    db80:	4623      	mov	r3, r4
    db82:	4809      	ldr	r0, [pc, #36]	; (dba8 <bt_buf_get_rx+0x50>)
    db84:	e000      	b.n	db88 <bt_buf_get_rx+0x30>
    db86:	4809      	ldr	r0, [pc, #36]	; (dbac <bt_buf_get_rx+0x54>)
    db88:	f00e fc45 	bl	1c416 <net_buf_alloc_fixed>
    db8c:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    db8e:	b12c      	cbz	r4, db9c <bt_buf_get_rx+0x44>
	net_buf_simple_reserve(&buf->b, reserve);
    db90:	2101      	movs	r1, #1
    db92:	f104 0008 	add.w	r0, r4, #8
    db96:	f006 fe65 	bl	14864 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    db9a:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    db9c:	4620      	mov	r0, r4
    db9e:	bd70      	pop	{r4, r5, r6, pc}
    dba0:	0001fc75 	.word	0x0001fc75
    dba4:	0001ead7 	.word	0x0001ead7
    dba8:	200086b0 	.word	0x200086b0
    dbac:	2000878c 	.word	0x2000878c

0000dbb0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    dbb0:	4602      	mov	r2, r0
    dbb2:	460b      	mov	r3, r1
    dbb4:	b570      	push	{r4, r5, r6, lr}
    dbb6:	f04f 0120 	mov.w	r1, #32
    dbba:	f3ef 8511 	mrs	r5, BASEPRI
    dbbe:	f381 8811 	msr	BASEPRI, r1
    dbc2:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
    dbc6:	2000      	movs	r0, #0
	buf = bt_dev.sent_cmd;
    dbc8:	490b      	ldr	r1, [pc, #44]	; (dbf8 <bt_buf_get_cmd_complete+0x48>)
    dbca:	f8d1 40f8 	ldr.w	r4, [r1, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    dbce:	f8c1 00f8 	str.w	r0, [r1, #248]	; 0xf8
	__asm__ volatile(
    dbd2:	f385 8811 	msr	BASEPRI, r5
    dbd6:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    dbda:	b924      	cbnz	r4, dbe6 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    dbdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    dbe0:	2001      	movs	r0, #1
    dbe2:	f7ff bfb9 	b.w	db58 <bt_buf_get_rx>
    dbe6:	2101      	movs	r1, #1
		buf->len = 0U;
    dbe8:	81a0      	strh	r0, [r4, #12]
    dbea:	7521      	strb	r1, [r4, #20]
    dbec:	f104 0008 	add.w	r0, r4, #8
    dbf0:	f006 fe38 	bl	14864 <net_buf_simple_reserve>
}
    dbf4:	4620      	mov	r0, r4
    dbf6:	bd70      	pop	{r4, r5, r6, pc}
    dbf8:	20008000 	.word	0x20008000

0000dbfc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    dbfc:	b570      	push	{r4, r5, r6, lr}
    dbfe:	4604      	mov	r4, r0
	switch (evt) {
    dc00:	2c0f      	cmp	r4, #15
{
    dc02:	460d      	mov	r5, r1
    dc04:	4610      	mov	r0, r2
    dc06:	4619      	mov	r1, r3
	switch (evt) {
    dc08:	d805      	bhi.n	dc16 <bt_buf_get_evt+0x1a>
    dc0a:	2c0d      	cmp	r4, #13
    dc0c:	d912      	bls.n	dc34 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    dc0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    dc12:	f7ff bfcd 	b.w	dbb0 <bt_buf_get_cmd_complete>
	switch (evt) {
    dc16:	2c13      	cmp	r4, #19
    dc18:	d10c      	bne.n	dc34 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    dc1a:	480b      	ldr	r0, [pc, #44]	; (dc48 <bt_buf_get_evt+0x4c>)
    dc1c:	f00e fbfb 	bl	1c416 <net_buf_alloc_fixed>
			if (buf) {
    dc20:	4604      	mov	r4, r0
    dc22:	b128      	cbz	r0, dc30 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    dc24:	2101      	movs	r1, #1
    dc26:	3008      	adds	r0, #8
    dc28:	f006 fe1c 	bl	14864 <net_buf_simple_reserve>
    dc2c:	2301      	movs	r3, #1
    dc2e:	7523      	strb	r3, [r4, #20]
}
    dc30:	4620      	mov	r0, r4
    dc32:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    dc34:	4602      	mov	r2, r0
    dc36:	460b      	mov	r3, r1
		if (discardable) {
    dc38:	b10d      	cbz	r5, dc3e <bt_buf_get_evt+0x42>
    dc3a:	4804      	ldr	r0, [pc, #16]	; (dc4c <bt_buf_get_evt+0x50>)
    dc3c:	e7ee      	b.n	dc1c <bt_buf_get_evt+0x20>
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    dc3e:	2001      	movs	r0, #1
}
    dc40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    dc44:	f7ff bf88 	b.w	db58 <bt_buf_get_rx>
    dc48:	200087b8 	.word	0x200087b8
    dc4c:	20008708 	.word	0x20008708

0000dc50 <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    dc50:	6883      	ldr	r3, [r0, #8]
    dc52:	2157      	movs	r1, #87	; 0x57
    dc54:	781a      	ldrb	r2, [r3, #0]
    dc56:	4801      	ldr	r0, [pc, #4]	; (dc5c <hci_data_buf_overflow+0xc>)
    dc58:	f00b bec9 	b.w	199ee <printk>
    dc5c:	0001fcab 	.word	0x0001fcab

0000dc60 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    dc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc62:	4606      	mov	r6, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    dc64:	2500      	movs	r5, #0
    dc66:	4f09      	ldr	r7, [pc, #36]	; (dc8c <id_find+0x2c>)
    dc68:	79fb      	ldrb	r3, [r7, #7]
    dc6a:	b2ec      	uxtb	r4, r5
    dc6c:	42a3      	cmp	r3, r4
    dc6e:	d802      	bhi.n	dc76 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    dc70:	f06f 0401 	mvn.w	r4, #1
    dc74:	e008      	b.n	dc88 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    dc76:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    dc7a:	4630      	mov	r0, r6
    dc7c:	4439      	add	r1, r7
    dc7e:	f00d f9f4 	bl	1b06a <bt_addr_le_cmp>
    dc82:	3501      	adds	r5, #1
    dc84:	2800      	cmp	r0, #0
    dc86:	d1ef      	bne.n	dc68 <id_find+0x8>
}
    dc88:	4620      	mov	r0, r4
    dc8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dc8c:	20008000 	.word	0x20008000

0000dc90 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    dc90:	6843      	ldr	r3, [r0, #4]
{
    dc92:	b537      	push	{r0, r1, r2, r4, r5, lr}
    dc94:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    dc96:	0558      	lsls	r0, r3, #21
    dc98:	d502      	bpl.n	dca0 <valid_adv_param+0x10>
		return false;
    dc9a:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    dc9c:	b003      	add	sp, #12
    dc9e:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    dca0:	6922      	ldr	r2, [r4, #16]
    dca2:	b10a      	cbz	r2, dca8 <valid_adv_param+0x18>
    dca4:	07d9      	lsls	r1, r3, #31
    dca6:	d5f8      	bpl.n	dc9a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    dca8:	4d1a      	ldr	r5, [pc, #104]	; (dd14 <valid_adv_param+0x84>)
    dcaa:	7820      	ldrb	r0, [r4, #0]
    dcac:	79eb      	ldrb	r3, [r5, #7]
    dcae:	4283      	cmp	r3, r0
    dcb0:	d9f3      	bls.n	dc9a <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    dcb2:	2300      	movs	r3, #0
    dcb4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    dcb8:	4669      	mov	r1, sp
    dcba:	4428      	add	r0, r5
    dcbc:	9300      	str	r3, [sp, #0]
    dcbe:	f8cd 3003 	str.w	r3, [sp, #3]
    dcc2:	f00d f9d2 	bl	1b06a <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    dcc6:	2800      	cmp	r0, #0
    dcc8:	d0e7      	beq.n	dc9a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    dcca:	6860      	ldr	r0, [r4, #4]
    dccc:	07c2      	lsls	r2, r0, #31
    dcce:	d406      	bmi.n	dcde <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    dcd0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    dcd4:	2b08      	cmp	r3, #8
    dcd6:	d802      	bhi.n	dcde <valid_adv_param+0x4e>
    dcd8:	68a3      	ldr	r3, [r4, #8]
    dcda:	2b9f      	cmp	r3, #159	; 0x9f
    dcdc:	d9dd      	bls.n	dc9a <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    dcde:	f010 0f30 	tst.w	r0, #48	; 0x30
    dce2:	d002      	beq.n	dcea <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    dce4:	6923      	ldr	r3, [r4, #16]
    dce6:	2b00      	cmp	r3, #0
    dce8:	d0d7      	beq.n	dc9a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    dcea:	06c3      	lsls	r3, r0, #27
    dcec:	d401      	bmi.n	dcf2 <valid_adv_param+0x62>
    dcee:	6923      	ldr	r3, [r4, #16]
    dcf0:	b943      	cbnz	r3, dd04 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    dcf2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    dcf6:	429a      	cmp	r2, r3
    dcf8:	d8cf      	bhi.n	dc9a <valid_adv_param+0xa>
    dcfa:	2a1f      	cmp	r2, #31
    dcfc:	d9cd      	bls.n	dc9a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    dcfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    dd02:	d8ca      	bhi.n	dc9a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    dd04:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    dd08:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    dd0c:	bf18      	it	ne
    dd0e:	2001      	movne	r0, #1
    dd10:	e7c4      	b.n	dc9c <valid_adv_param+0xc>
    dd12:	bf00      	nop
    dd14:	20008000 	.word	0x20008000

0000dd18 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dd18:	6883      	ldr	r3, [r0, #8]
{
    dd1a:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dd1c:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    dd1e:	4620      	mov	r0, r4
    dd20:	f002 fd98 	bl	10854 <bt_conn_lookup_handle>
	if (!conn) {
    dd24:	b930      	cbnz	r0, dd34 <le_data_len_change+0x1c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    dd26:	4622      	mov	r2, r4
}
    dd28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    dd2c:	2145      	movs	r1, #69	; 0x45
    dd2e:	4803      	ldr	r0, [pc, #12]	; (dd3c <le_data_len_change+0x24>)
    dd30:	f00b be5d 	b.w	199ee <printk>
}
    dd34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    dd38:	f002 bd68 	b.w	1080c <bt_conn_unref>
    dd3c:	0001fcd8 	.word	0x0001fcd8

0000dd40 <hci_disconn_complete_prio>:
{
    dd40:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    dd42:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    dd44:	781a      	ldrb	r2, [r3, #0]
    dd46:	b9aa      	cbnz	r2, dd74 <hci_disconn_complete_prio+0x34>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    dd48:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    dd4c:	4628      	mov	r0, r5
    dd4e:	f002 fd81 	bl	10854 <bt_conn_lookup_handle>
	if (!conn) {
    dd52:	4604      	mov	r4, r0
    dd54:	b930      	cbnz	r0, dd64 <hci_disconn_complete_prio+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    dd56:	462a      	mov	r2, r5
}
    dd58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    dd5c:	2145      	movs	r1, #69	; 0x45
    dd5e:	4806      	ldr	r0, [pc, #24]	; (dd78 <hci_disconn_complete_prio+0x38>)
    dd60:	f00b be45 	b.w	199ee <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    dd64:	2101      	movs	r1, #1
    dd66:	f002 fd7d 	bl	10864 <bt_conn_set_state>
	bt_conn_unref(conn);
    dd6a:	4620      	mov	r0, r4
}
    dd6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    dd70:	f002 bd4c 	b.w	1080c <bt_conn_unref>
}
    dd74:	bd38      	pop	{r3, r4, r5, pc}
    dd76:	bf00      	nop
    dd78:	0001fd01 	.word	0x0001fd01

0000dd7c <hci_hardware_error>:
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    dd7c:	2101      	movs	r1, #1
{
    dd7e:	b508      	push	{r3, lr}
    dd80:	3008      	adds	r0, #8
    dd82:	f006 feb9 	bl	14af8 <net_buf_simple_pull_mem>
}
    dd86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    dd8a:	7802      	ldrb	r2, [r0, #0]
    dd8c:	2145      	movs	r1, #69	; 0x45
    dd8e:	4801      	ldr	r0, [pc, #4]	; (dd94 <hci_hardware_error+0x18>)
    dd90:	f00b be2d 	b.w	199ee <printk>
    dd94:	0001fd2c 	.word	0x0001fd2c

0000dd98 <hci_vendor_event>:
		BT_WARN("Unhandled vendor-specific event: %s",
    dd98:	8981      	ldrh	r1, [r0, #12]
{
    dd9a:	b508      	push	{r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    dd9c:	6880      	ldr	r0, [r0, #8]
    dd9e:	f7ff fd63 	bl	d868 <bt_hex_real>
}
    dda2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    dda6:	4602      	mov	r2, r0
    dda8:	2157      	movs	r1, #87	; 0x57
    ddaa:	4801      	ldr	r0, [pc, #4]	; (ddb0 <hci_vendor_event+0x18>)
    ddac:	f00b be1f 	b.w	199ee <printk>
    ddb0:	0001fd53 	.word	0x0001fd53

0000ddb4 <le_conn_update_complete>:
{
    ddb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    ddb6:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    ddb8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    ddbc:	4630      	mov	r0, r6
    ddbe:	f002 fd49 	bl	10854 <bt_conn_lookup_handle>
	if (!conn) {
    ddc2:	4604      	mov	r4, r0
    ddc4:	b938      	cbnz	r0, ddd6 <le_conn_update_complete+0x22>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ddc6:	4632      	mov	r2, r6
    ddc8:	2145      	movs	r1, #69	; 0x45
    ddca:	4821      	ldr	r0, [pc, #132]	; (de50 <le_conn_update_complete+0x9c>)
}
    ddcc:	b002      	add	sp, #8
    ddce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    ddd2:	f00b be0c 	b.w	199ee <printk>
	if (!evt->status) {
    ddd6:	782b      	ldrb	r3, [r5, #0]
    ddd8:	b9cb      	cbnz	r3, de0e <le_conn_update_complete+0x5a>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    ddda:	792a      	ldrb	r2, [r5, #4]
    dddc:	78eb      	ldrb	r3, [r5, #3]
    ddde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dde2:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    dde6:	79aa      	ldrb	r2, [r5, #6]
    dde8:	796b      	ldrb	r3, [r5, #5]
    ddea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ddee:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    ddf2:	79eb      	ldrb	r3, [r5, #7]
    ddf4:	7a2a      	ldrb	r2, [r5, #8]
    ddf6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ddfa:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    ddfe:	f002 fb47 	bl	10490 <notify_le_param_updated>
	bt_conn_unref(conn);
    de02:	4620      	mov	r0, r4
}
    de04:	b002      	add	sp, #8
    de06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    de0a:	f002 bcff 	b.w	1080c <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    de0e:	2b1a      	cmp	r3, #26
    de10:	d1f7      	bne.n	de02 <le_conn_update_complete+0x4e>
    de12:	78c3      	ldrb	r3, [r0, #3]
    de14:	2b01      	cmp	r3, #1
    de16:	d1f4      	bne.n	de02 <le_conn_update_complete+0x4e>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    de18:	f44f 6180 	mov.w	r1, #1024	; 0x400
    de1c:	3004      	adds	r0, #4
    de1e:	f00d f919 	bl	1b054 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    de22:	0543      	lsls	r3, r0, #21
    de24:	d4ed      	bmi.n	de02 <le_conn_update_complete+0x4e>
		param.interval_min = conn->le.interval_min;
    de26:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
		bt_l2cap_update_conn_param(conn, &param);
    de2a:	4669      	mov	r1, sp
		param.interval_min = conn->le.interval_min;
    de2c:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    de30:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
		bt_l2cap_update_conn_param(conn, &param);
    de34:	4620      	mov	r0, r4
		param.interval_max = conn->le.interval_max;
    de36:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    de3a:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    de3e:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
    de42:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    de46:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    de4a:	f003 fb09 	bl	11460 <bt_l2cap_update_conn_param>
    de4e:	e7d8      	b.n	de02 <le_conn_update_complete+0x4e>
    de50:	0001fcd8 	.word	0x0001fcd8

0000de54 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    de54:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    de56:	4c0c      	ldr	r4, [pc, #48]	; (de88 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    de58:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    de5a:	2205      	movs	r2, #5
    de5c:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    de60:	f002 fe36 	bl	10ad0 <bt_conn_lookup_state_le>
		if (!conn) {
    de64:	b970      	cbnz	r0, de84 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    de66:	4b09      	ldr	r3, [pc, #36]	; (de8c <find_pending_connect.part.0+0x38>)
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    de68:	4669      	mov	r1, sp
						       BT_ADDR_LE_NONE,
    de6a:	6818      	ldr	r0, [r3, #0]
    de6c:	889a      	ldrh	r2, [r3, #4]
    de6e:	799b      	ldrb	r3, [r3, #6]
    de70:	9000      	str	r0, [sp, #0]
    de72:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    de76:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    de7a:	2204      	movs	r2, #4
						       BT_ADDR_LE_NONE,
    de7c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    de80:	f002 fe26 	bl	10ad0 <bt_conn_lookup_state_le>
}
    de84:	b002      	add	sp, #8
    de86:	bd10      	pop	{r4, pc}
    de88:	20008000 	.word	0x20008000
    de8c:	0001d8e0 	.word	0x0001d8e0

0000de90 <handle_event>:
{
    de90:	b537      	push	{r0, r1, r2, r4, r5, lr}
    de92:	4605      	mov	r5, r0
    de94:	4614      	mov	r4, r2
    de96:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    de98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    de9c:	7822      	ldrb	r2, [r4, #0]
    de9e:	42aa      	cmp	r2, r5
    dea0:	d010      	beq.n	dec4 <handle_event+0x34>
	for (i = 0; i < num_handlers; i++) {
    dea2:	3408      	adds	r4, #8
    dea4:	429c      	cmp	r4, r3
    dea6:	d1f9      	bne.n	de9c <handle_event+0xc>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    dea8:	8984      	ldrh	r4, [r0, #12]
    deaa:	6880      	ldr	r0, [r0, #8]
    deac:	4621      	mov	r1, r4
    deae:	f7ff fcdb 	bl	d868 <bt_hex_real>
    deb2:	4623      	mov	r3, r4
    deb4:	9000      	str	r0, [sp, #0]
    deb6:	462a      	mov	r2, r5
    deb8:	2157      	movs	r1, #87	; 0x57
    deba:	480b      	ldr	r0, [pc, #44]	; (dee8 <handle_event+0x58>)
    debc:	f00b fd97 	bl	199ee <printk>
}
    dec0:	b003      	add	sp, #12
    dec2:	bd30      	pop	{r4, r5, pc}
		if (buf->len < handler->min_len) {
    dec4:	8982      	ldrh	r2, [r0, #12]
    dec6:	7863      	ldrb	r3, [r4, #1]
    dec8:	4293      	cmp	r3, r2
    deca:	d907      	bls.n	dedc <handle_event+0x4c>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    decc:	462b      	mov	r3, r5
    dece:	2145      	movs	r1, #69	; 0x45
    ded0:	4806      	ldr	r0, [pc, #24]	; (deec <handle_event+0x5c>)
}
    ded2:	b003      	add	sp, #12
    ded4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    ded8:	f00b bd89 	b.w	199ee <printk>
		handler->handler(buf);
    dedc:	6863      	ldr	r3, [r4, #4]
}
    dede:	b003      	add	sp, #12
    dee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
    dee4:	4718      	bx	r3
    dee6:	bf00      	nop
    dee8:	0001fda3 	.word	0x0001fda3
    deec:	0001fd7c 	.word	0x0001fd7c

0000def0 <hci_le_meta_event>:
{
    def0:	b510      	push	{r4, lr}
    def2:	2101      	movs	r1, #1
    def4:	4604      	mov	r4, r0
    def6:	3008      	adds	r0, #8
    def8:	f006 fdfe 	bl	14af8 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    defc:	4621      	mov	r1, r4
}
    defe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    df02:	2308      	movs	r3, #8
    df04:	4a01      	ldr	r2, [pc, #4]	; (df0c <hci_le_meta_event+0x1c>)
    df06:	7800      	ldrb	r0, [r0, #0]
    df08:	f7ff bfc2 	b.w	de90 <handle_event>
    df0c:	0001dcf0 	.word	0x0001dcf0

0000df10 <id_create.constprop.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    df10:	b530      	push	{r4, r5, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    df12:	4d18      	ldr	r5, [pc, #96]	; (df74 <id_create.constprop.0+0x64>)
    df14:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    df18:	460c      	mov	r4, r1
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    df1a:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    df1c:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    df1e:	b1b1      	cbz	r1, df4e <id_create.constprop.0+0x3e>
    df20:	2300      	movs	r3, #0
    df22:	4620      	mov	r0, r4
    df24:	a902      	add	r1, sp, #8
    df26:	9302      	str	r3, [sp, #8]
    df28:	f8cd 300b 	str.w	r3, [sp, #11]
    df2c:	f00d f89d 	bl	1b06a <bt_addr_le_cmp>
    df30:	b168      	cbz	r0, df4e <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    df32:	4621      	mov	r1, r4
    df34:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    df36:	f00d f88a 	bl	1b04e <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    df3a:	480f      	ldr	r0, [pc, #60]	; (df78 <id_create.constprop.0+0x68>)
    df3c:	f00d f884 	bl	1b048 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    df40:	0783      	lsls	r3, r0, #30
    df42:	d515      	bpl.n	df70 <id_create.constprop.0+0x60>
}
    df44:	b005      	add	sp, #20
    df46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		bt_settings_save_id();
    df4a:	f7ff bd7f 	b.w	da4c <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    df4e:	4668      	mov	r0, sp
    df50:	f00d f84b 	bl	1afea <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    df54:	4668      	mov	r0, sp
    df56:	f7ff fe83 	bl	dc60 <id_find>
    df5a:	2800      	cmp	r0, #0
    df5c:	daf7      	bge.n	df4e <id_create.constprop.0+0x3e>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    df5e:	4669      	mov	r1, sp
    df60:	4628      	mov	r0, r5
    df62:	f00d f874 	bl	1b04e <bt_addr_le_copy>
		if (addr) {
    df66:	2c00      	cmp	r4, #0
    df68:	d0e7      	beq.n	df3a <id_create.constprop.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    df6a:	4629      	mov	r1, r5
    df6c:	4620      	mov	r0, r4
    df6e:	e7e2      	b.n	df36 <id_create.constprop.0+0x26>
}
    df70:	b005      	add	sp, #20
    df72:	bd30      	pop	{r4, r5, pc}
    df74:	20008000 	.word	0x20008000
    df78:	20008094 	.word	0x20008094

0000df7c <hci_rx_thread>:
{
    df7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    df80:	4f40      	ldr	r7, [pc, #256]	; (e084 <hci_rx_thread+0x108>)
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    df82:	f8df 8104 	ldr.w	r8, [pc, #260]	; e088 <hci_rx_thread+0x10c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    df86:	4e41      	ldr	r6, [pc, #260]	; (e08c <hci_rx_thread+0x110>)
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
    df88:	f04f 32ff 	mov.w	r2, #4294967295
    df8c:	f04f 33ff 	mov.w	r3, #4294967295
    df90:	4638      	mov	r0, r7
    df92:	f006 fc37 	bl	14804 <net_buf_get>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    df96:	7d02      	ldrb	r2, [r0, #20]
    df98:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
    df9a:	2a01      	cmp	r2, #1
    df9c:	d041      	beq.n	e022 <hci_rx_thread+0xa6>
    df9e:	2a03      	cmp	r2, #3
    dfa0:	d16c      	bne.n	e07c <hci_rx_thread+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    dfa2:	8983      	ldrh	r3, [r0, #12]
    dfa4:	2b03      	cmp	r3, #3
    dfa6:	d80b      	bhi.n	dfc0 <hci_rx_thread+0x44>
    dfa8:	f240 42ac 	movw	r2, #1196	; 0x4ac
    dfac:	4631      	mov	r1, r6
    dfae:	4838      	ldr	r0, [pc, #224]	; (e090 <hci_rx_thread+0x114>)
    dfb0:	f00b fd1d 	bl	199ee <printk>
    dfb4:	4040      	eors	r0, r0
    dfb6:	f380 8811 	msr	BASEPRI, r0
    dfba:	f04f 0003 	mov.w	r0, #3
    dfbe:	df02      	svc	2
    dfc0:	2104      	movs	r1, #4
    dfc2:	f104 0008 	add.w	r0, r4, #8
    dfc6:	f006 fd97 	bl	14af8 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    dfca:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    dfcc:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    dfce:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    dfd2:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    dfd4:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    dfd6:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
    dfda:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
    dfdc:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    dfde:	d007      	beq.n	dff0 <hci_rx_thread+0x74>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    dfe0:	2145      	movs	r1, #69	; 0x45
    dfe2:	482c      	ldr	r0, [pc, #176]	; (e094 <hci_rx_thread+0x118>)
    dfe4:	f00b fd03 	bl	199ee <printk>
			net_buf_unref(buf);
    dfe8:	4620      	mov	r0, r4
    dfea:	f006 fc8d 	bl	14908 <net_buf_unref>
			break;
    dfee:	e015      	b.n	e01c <hci_rx_thread+0xa0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    dff0:	f002 fc30 	bl	10854 <bt_conn_lookup_handle>
	if (!conn) {
    dff4:	4605      	mov	r5, r0
    dff6:	b928      	cbnz	r0, e004 <hci_rx_thread+0x88>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    dff8:	2145      	movs	r1, #69	; 0x45
    dffa:	8ae2      	ldrh	r2, [r4, #22]
    dffc:	4826      	ldr	r0, [pc, #152]	; (e098 <hci_rx_thread+0x11c>)
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    dffe:	f00b fcf6 	bl	199ee <printk>
    e002:	e7f1      	b.n	dfe8 <hci_rx_thread+0x6c>
	acl(buf)->index = bt_conn_index(conn);
    e004:	f003 f85a 	bl	110bc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    e008:	4621      	mov	r1, r4
	acl(buf)->index = bt_conn_index(conn);
    e00a:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    e00c:	ea4f 3219 	mov.w	r2, r9, lsr #12
    e010:	4628      	mov	r0, r5
    e012:	f002 fad5 	bl	105c0 <bt_conn_recv>
	bt_conn_unref(conn);
    e016:	4628      	mov	r0, r5
    e018:	f002 fbf8 	bl	1080c <bt_conn_unref>
	z_impl_k_yield();
    e01c:	f00a f9d0 	bl	183c0 <z_impl_k_yield>
	while (1) {
    e020:	e7b2      	b.n	df88 <hci_rx_thread+0xc>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    e022:	8983      	ldrh	r3, [r0, #12]
    e024:	2b01      	cmp	r3, #1
    e026:	d80b      	bhi.n	e040 <hci_rx_thread+0xc4>
    e028:	f241 32fb 	movw	r2, #5115	; 0x13fb
    e02c:	4631      	mov	r1, r6
    e02e:	4818      	ldr	r0, [pc, #96]	; (e090 <hci_rx_thread+0x114>)
    e030:	f00b fcdd 	bl	199ee <printk>
    e034:	4040      	eors	r0, r0
    e036:	f380 8811 	msr	BASEPRI, r0
    e03a:	f04f 0003 	mov.w	r0, #3
    e03e:	df02      	svc	2
    e040:	2102      	movs	r1, #2
    e042:	f104 0008 	add.w	r0, r4, #8
    e046:	f006 fd57 	bl	14af8 <net_buf_simple_pull_mem>
    e04a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    e04c:	7800      	ldrb	r0, [r0, #0]
    e04e:	f00c ffda 	bl	1b006 <bt_hci_evt_get_flags>
    e052:	0783      	lsls	r3, r0, #30
    e054:	d40b      	bmi.n	e06e <hci_rx_thread+0xf2>
    e056:	f241 32ff 	movw	r2, #5119	; 0x13ff
    e05a:	4631      	mov	r1, r6
    e05c:	480c      	ldr	r0, [pc, #48]	; (e090 <hci_rx_thread+0x114>)
    e05e:	f00b fcc6 	bl	199ee <printk>
    e062:	4040      	eors	r0, r0
    e064:	f380 8811 	msr	BASEPRI, r0
    e068:	f04f 0003 	mov.w	r0, #3
    e06c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    e06e:	2304      	movs	r3, #4
    e070:	4642      	mov	r2, r8
    e072:	4621      	mov	r1, r4
    e074:	7828      	ldrb	r0, [r5, #0]
    e076:	f7ff ff0b 	bl	de90 <handle_event>
	net_buf_unref(buf);
    e07a:	e7b5      	b.n	dfe8 <hci_rx_thread+0x6c>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
    e07c:	2145      	movs	r1, #69	; 0x45
    e07e:	4807      	ldr	r0, [pc, #28]	; (e09c <hci_rx_thread+0x120>)
    e080:	e7bd      	b.n	dffe <hci_rx_thread+0x82>
    e082:	bf00      	nop
    e084:	200080fc 	.word	0x200080fc
    e088:	0001dd40 	.word	0x0001dd40
    e08c:	0001fdca 	.word	0x0001fdca
    e090:	0001ead7 	.word	0x0001ead7
    e094:	0001fdfe 	.word	0x0001fdfe
    e098:	0001fe27 	.word	0x0001fe27
    e09c:	0001fe4e 	.word	0x0001fe4e

0000e0a0 <hci_cmd_done>:
{
    e0a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    e0a4:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e0a6:	7990      	ldrb	r0, [r2, #6]
{
    e0a8:	460f      	mov	r7, r1
    e0aa:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    e0ac:	f006 faac 	bl	14608 <net_buf_pool_get>
    e0b0:	4d2a      	ldr	r5, [pc, #168]	; (e15c <hci_cmd_done+0xbc>)
    e0b2:	4285      	cmp	r5, r0
    e0b4:	d00e      	beq.n	e0d4 <hci_cmd_done+0x34>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    e0b6:	79a4      	ldrb	r4, [r4, #6]
    e0b8:	4620      	mov	r0, r4
    e0ba:	f006 faa5 	bl	14608 <net_buf_pool_get>
    e0be:	4623      	mov	r3, r4
    e0c0:	e9cd 0500 	strd	r0, r5, [sp]
    e0c4:	4632      	mov	r2, r6
    e0c6:	2157      	movs	r1, #87	; 0x57
    e0c8:	4825      	ldr	r0, [pc, #148]	; (e160 <hci_cmd_done+0xc0>)
    e0ca:	f00b fc90 	bl	199ee <printk>
}
    e0ce:	b002      	add	sp, #8
    e0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
    e0d4:	4620      	mov	r0, r4
    e0d6:	f006 fa9f 	bl	14618 <net_buf_id>
    e0da:	f04f 080c 	mov.w	r8, #12
    e0de:	4d21      	ldr	r5, [pc, #132]	; (e164 <hci_cmd_done+0xc4>)
    e0e0:	fb08 5000 	mla	r0, r8, r0, r5
    e0e4:	8843      	ldrh	r3, [r0, #2]
    e0e6:	42b3      	cmp	r3, r6
    e0e8:	d00a      	beq.n	e100 <hci_cmd_done+0x60>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    e0ea:	4620      	mov	r0, r4
    e0ec:	f006 fa94 	bl	14618 <net_buf_id>
    e0f0:	fb08 5000 	mla	r0, r8, r0, r5
    e0f4:	4632      	mov	r2, r6
    e0f6:	8843      	ldrh	r3, [r0, #2]
    e0f8:	2157      	movs	r1, #87	; 0x57
    e0fa:	481b      	ldr	r0, [pc, #108]	; (e168 <hci_cmd_done+0xc8>)
    e0fc:	f00b fc77 	bl	199ee <printk>
	if (cmd(buf)->state && !status) {
    e100:	4620      	mov	r0, r4
    e102:	f006 fa89 	bl	14618 <net_buf_id>
    e106:	260c      	movs	r6, #12
    e108:	fb06 5000 	mla	r0, r6, r0, r5
    e10c:	6843      	ldr	r3, [r0, #4]
    e10e:	b15b      	cbz	r3, e128 <hci_cmd_done+0x88>
    e110:	b957      	cbnz	r7, e128 <hci_cmd_done+0x88>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    e112:	4620      	mov	r0, r4
    e114:	f006 fa80 	bl	14618 <net_buf_id>
    e118:	fb06 5000 	mla	r0, r6, r0, r5
    e11c:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    e11e:	7a1a      	ldrb	r2, [r3, #8]
    e120:	e9d3 0100 	ldrd	r0, r1, [r3]
    e124:	f00c ffaf 	bl	1b086 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    e128:	4620      	mov	r0, r4
    e12a:	f006 fa75 	bl	14618 <net_buf_id>
    e12e:	260c      	movs	r6, #12
    e130:	fb06 5000 	mla	r0, r6, r0, r5
    e134:	6883      	ldr	r3, [r0, #8]
    e136:	2b00      	cmp	r3, #0
    e138:	d0c9      	beq.n	e0ce <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
    e13a:	4620      	mov	r0, r4
    e13c:	f006 fa6c 	bl	14618 <net_buf_id>
    e140:	4370      	muls	r0, r6
    e142:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    e144:	4620      	mov	r0, r4
    e146:	f006 fa67 	bl	14618 <net_buf_id>
    e14a:	fb06 5500 	mla	r5, r6, r0, r5
    e14e:	68a8      	ldr	r0, [r5, #8]
}
    e150:	b002      	add	sp, #8
    e152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
    e156:	f00a ba75 	b.w	18644 <z_impl_k_sem_give>
    e15a:	bf00      	nop
    e15c:	20008760 	.word	0x20008760
    e160:	0001fe67 	.word	0x0001fe67
    e164:	2000a940 	.word	0x2000a940
    e168:	0001fea1 	.word	0x0001fea1

0000e16c <hci_cmd_status>:
{
    e16c:	b538      	push	{r3, r4, r5, lr}
    e16e:	2104      	movs	r1, #4
    e170:	4604      	mov	r4, r0
    e172:	3008      	adds	r0, #8
    e174:	f006 fcc0 	bl	14af8 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    e178:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    e17a:	7801      	ldrb	r1, [r0, #0]
    e17c:	4622      	mov	r2, r4
    e17e:	8840      	ldrh	r0, [r0, #2]
    e180:	f7ff ff8e 	bl	e0a0 <hci_cmd_done>
	if (ncmd) {
    e184:	b125      	cbz	r5, e190 <hci_cmd_status+0x24>
}
    e186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e18a:	4802      	ldr	r0, [pc, #8]	; (e194 <hci_cmd_status+0x28>)
    e18c:	f00a ba5a 	b.w	18644 <z_impl_k_sem_give>
    e190:	bd38      	pop	{r3, r4, r5, pc}
    e192:	bf00      	nop
    e194:	200080e0 	.word	0x200080e0

0000e198 <hci_cmd_complete>:
{
    e198:	b538      	push	{r3, r4, r5, lr}
    e19a:	2103      	movs	r1, #3
    e19c:	4604      	mov	r4, r0
    e19e:	3008      	adds	r0, #8
    e1a0:	f006 fcaa 	bl	14af8 <net_buf_simple_pull_mem>
	status = buf->data[0];
    e1a4:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    e1a6:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    e1a8:	4622      	mov	r2, r4
    e1aa:	7819      	ldrb	r1, [r3, #0]
    e1ac:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    e1b0:	f7ff ff76 	bl	e0a0 <hci_cmd_done>
	if (ncmd) {
    e1b4:	b125      	cbz	r5, e1c0 <hci_cmd_complete+0x28>
}
    e1b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    e1ba:	4802      	ldr	r0, [pc, #8]	; (e1c4 <hci_cmd_complete+0x2c>)
    e1bc:	f00a ba42 	b.w	18644 <z_impl_k_sem_give>
    e1c0:	bd38      	pop	{r3, r4, r5, pc}
    e1c2:	bf00      	nop
    e1c4:	200080e0 	.word	0x200080e0

0000e1c8 <hci_num_completed_packets>:
{
    e1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    e1cc:	2500      	movs	r5, #0
			tx->pending_no_cb = 0U;
    e1ce:	46a8      	mov	r8, r5
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    e1d0:	6887      	ldr	r7, [r0, #8]
    e1d2:	f8df 90dc 	ldr.w	r9, [pc, #220]	; e2b0 <hci_num_completed_packets+0xe8>
	for (i = 0; i < evt->num_handles; i++) {
    e1d6:	783b      	ldrb	r3, [r7, #0]
    e1d8:	429d      	cmp	r5, r3
    e1da:	db01      	blt.n	e1e0 <hci_num_completed_packets+0x18>
}
    e1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    e1e0:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    e1e4:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    e1e8:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    e1ec:	4650      	mov	r0, sl
    e1ee:	f002 fb31 	bl	10854 <bt_conn_lookup_handle>
		if (!conn) {
    e1f2:	4604      	mov	r4, r0
    e1f4:	b1d0      	cbz	r0, e22c <hci_num_completed_packets+0x64>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    e1f6:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    e1fa:	b37e      	cbz	r6, e25c <hci_num_completed_packets+0x94>
	__asm__ volatile(
    e1fc:	f04f 0320 	mov.w	r3, #32
    e200:	f3ef 8211 	mrs	r2, BASEPRI
    e204:	f383 8811 	msr	BASEPRI, r3
    e208:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    e20c:	69e3      	ldr	r3, [r4, #28]
    e20e:	b1a3      	cbz	r3, e23a <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
    e210:	3b01      	subs	r3, #1
    e212:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    e214:	f382 8811 	msr	BASEPRI, r2
    e218:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    e21c:	4620      	mov	r0, r4
    e21e:	f002 f933 	bl	10488 <bt_conn_get_pkts>
    e222:	3e01      	subs	r6, #1
    e224:	f00a fa0e 	bl	18644 <z_impl_k_sem_give>
    e228:	b2b6      	uxth	r6, r6
    e22a:	e7e6      	b.n	e1fa <hci_num_completed_packets+0x32>
			BT_ERR("No connection for handle %u", handle);
    e22c:	4652      	mov	r2, sl
    e22e:	2145      	movs	r1, #69	; 0x45
    e230:	4820      	ldr	r0, [pc, #128]	; (e2b4 <hci_num_completed_packets+0xec>)
    e232:	f00b fbdc 	bl	199ee <printk>
	for (i = 0; i < evt->num_handles; i++) {
    e236:	3501      	adds	r5, #1
    e238:	e7cd      	b.n	e1d6 <hci_num_completed_packets+0xe>
	return list->head;
    e23a:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    e23c:	b12b      	cbz	r3, e24a <hci_num_completed_packets+0x82>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e23e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    e240:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e242:	428b      	cmp	r3, r1
	list->head = node;
    e244:	6160      	str	r0, [r4, #20]
	list->tail = node;
    e246:	bf08      	it	eq
    e248:	61a0      	streq	r0, [r4, #24]
    e24a:	f382 8811 	msr	BASEPRI, r2
    e24e:	f3bf 8f6f 	isb	sy
			if (!node) {
    e252:	b93b      	cbnz	r3, e264 <hci_num_completed_packets+0x9c>
				BT_ERR("packets count mismatch");
    e254:	2145      	movs	r1, #69	; 0x45
    e256:	4818      	ldr	r0, [pc, #96]	; (e2b8 <hci_num_completed_packets+0xf0>)
    e258:	f00b fbc9 	bl	199ee <printk>
		bt_conn_unref(conn);
    e25c:	4620      	mov	r0, r4
    e25e:	f002 fad5 	bl	1080c <bt_conn_unref>
    e262:	e7e8      	b.n	e236 <hci_num_completed_packets+0x6e>
	__asm__ volatile(
    e264:	f04f 0220 	mov.w	r2, #32
    e268:	f3ef 8111 	mrs	r1, BASEPRI
    e26c:	f382 8811 	msr	BASEPRI, r2
    e270:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    e274:	68da      	ldr	r2, [r3, #12]
    e276:	61e2      	str	r2, [r4, #28]
	return list->tail;
    e278:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    e27a:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    e27e:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    e282:	b98a      	cbnz	r2, e2a8 <hci_num_completed_packets+0xe0>
	list->head = node;
    e284:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    e288:	f381 8811 	msr	BASEPRI, r1
    e28c:	f3bf 8f6f 	isb	sy
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    e290:	2101      	movs	r1, #1
    e292:	f104 0030 	add.w	r0, r4, #48	; 0x30
    e296:	f00c fedd 	bl	1b054 <atomic_or>
    e29a:	07c3      	lsls	r3, r0, #31
    e29c:	d4be      	bmi.n	e21c <hci_num_completed_packets+0x54>
		k_queue_append(&work_q->queue, work);
    e29e:	4651      	mov	r1, sl
    e2a0:	4648      	mov	r0, r9
    e2a2:	f00e ff21 	bl	1d0e8 <k_queue_append>
    e2a6:	e7b9      	b.n	e21c <hci_num_completed_packets+0x54>
	parent->next = child;
    e2a8:	6013      	str	r3, [r2, #0]
	list->tail = node;
    e2aa:	6263      	str	r3, [r4, #36]	; 0x24
}
    e2ac:	e7ec      	b.n	e288 <hci_num_completed_packets+0xc0>
    e2ae:	bf00      	nop
    e2b0:	2000a3b0 	.word	0x2000a3b0
    e2b4:	0001fed9 	.word	0x0001fed9
    e2b8:	0001fefa 	.word	0x0001fefa

0000e2bc <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    e2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct adv_id_check_data check_data = {
    e2be:	7803      	ldrb	r3, [r0, #0]
{
    e2c0:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    e2c2:	f88d 3004 	strb.w	r3, [sp, #4]
    e2c6:	2300      	movs	r3, #0
	func(&bt_dev.adv, data);
    e2c8:	4c24      	ldr	r4, [pc, #144]	; (e35c <le_adv_start_add_conn+0xa0>)
{
    e2ca:	4605      	mov	r5, r0
    e2cc:	460f      	mov	r7, r1
	func(&bt_dev.adv, data);
    e2ce:	f104 0018 	add.w	r0, r4, #24
    e2d2:	a901      	add	r1, sp, #4
	struct adv_id_check_data check_data = {
    e2d4:	f88d 3005 	strb.w	r3, [sp, #5]
	func(&bt_dev.adv, data);
    e2d8:	f00c fee6 	bl	1b0a8 <adv_id_check_connectable_func>
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
    e2dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    e2e0:	bb93      	cbnz	r3, e348 <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    e2e2:	462e      	mov	r6, r5
    e2e4:	f816 2b09 	ldrb.w	r2, [r6], #9

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    e2e8:	a902      	add	r1, sp, #8
    e2ea:	4630      	mov	r0, r6
	bt_dev.adv_conn_id = adv->id;
    e2ec:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    e2f0:	9302      	str	r3, [sp, #8]
    e2f2:	f8cd 300b 	str.w	r3, [sp, #11]
    e2f6:	f00c feb8 	bl	1b06a <bt_addr_le_cmp>
    e2fa:	782a      	ldrb	r2, [r5, #0]
    e2fc:	4604      	mov	r4, r0
    e2fe:	b9a8      	cbnz	r0, e32c <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    e300:	4b17      	ldr	r3, [pc, #92]	; (e360 <le_adv_start_add_conn+0xa4>)
    e302:	6818      	ldr	r0, [r3, #0]
    e304:	8899      	ldrh	r1, [r3, #4]
    e306:	799b      	ldrb	r3, [r3, #6]
    e308:	9004      	str	r0, [sp, #16]
    e30a:	f8ad 1014 	strh.w	r1, [sp, #20]
    e30e:	4610      	mov	r0, r2
    e310:	a904      	add	r1, sp, #16
    e312:	f88d 3016 	strb.w	r3, [sp, #22]
    e316:	f002 fa4d 	bl	107b4 <bt_conn_add_le>
		if (!conn) {
    e31a:	4605      	mov	r5, r0
    e31c:	b1d0      	cbz	r0, e354 <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    e31e:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    e320:	f002 faa0 	bl	10864 <bt_conn_set_state>
	*out_conn = conn;
    e324:	603d      	str	r5, [r7, #0]
	return 0;
}
    e326:	4620      	mov	r0, r4
    e328:	b007      	add	sp, #28
    e32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    e32c:	4631      	mov	r1, r6
    e32e:	4610      	mov	r0, r2
    e330:	f002 fbb2 	bl	10a98 <bt_conn_exists_le>
    e334:	4604      	mov	r4, r0
    e336:	b950      	cbnz	r0, e34e <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    e338:	7828      	ldrb	r0, [r5, #0]
    e33a:	4631      	mov	r1, r6
    e33c:	f002 fa3a 	bl	107b4 <bt_conn_add_le>
	if (!conn) {
    e340:	4605      	mov	r5, r0
    e342:	b138      	cbz	r0, e354 <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    e344:	2105      	movs	r1, #5
    e346:	e7eb      	b.n	e320 <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    e348:	f06f 0422 	mvn.w	r4, #34	; 0x22
    e34c:	e7eb      	b.n	e326 <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    e34e:	f06f 0415 	mvn.w	r4, #21
    e352:	e7e8      	b.n	e326 <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    e354:	f06f 040b 	mvn.w	r4, #11
    e358:	e7e5      	b.n	e326 <le_adv_start_add_conn+0x6a>
    e35a:	bf00      	nop
    e35c:	20008000 	.word	0x20008000
    e360:	0001d8e0 	.word	0x0001d8e0

0000e364 <bt_hci_cmd_create>:
{
    e364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    e368:	f04f 32ff 	mov.w	r2, #4294967295
    e36c:	4606      	mov	r6, r0
    e36e:	f04f 33ff 	mov.w	r3, #4294967295
    e372:	481d      	ldr	r0, [pc, #116]	; (e3e8 <bt_hci_cmd_create+0x84>)
    e374:	460f      	mov	r7, r1
    e376:	f00e f84e 	bl	1c416 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
    e37a:	4604      	mov	r4, r0
    e37c:	b950      	cbnz	r0, e394 <bt_hci_cmd_create+0x30>
    e37e:	491b      	ldr	r1, [pc, #108]	; (e3ec <bt_hci_cmd_create+0x88>)
    e380:	481b      	ldr	r0, [pc, #108]	; (e3f0 <bt_hci_cmd_create+0x8c>)
    e382:	f44f 7281 	mov.w	r2, #258	; 0x102
    e386:	f00b fb32 	bl	199ee <printk>
    e38a:	f44f 7181 	mov.w	r1, #258	; 0x102
    e38e:	4817      	ldr	r0, [pc, #92]	; (e3ec <bt_hci_cmd_create+0x88>)
    e390:	f00b fdd3 	bl	19f3a <assert_post_action>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    e394:	f04f 0800 	mov.w	r8, #0
	net_buf_simple_reserve(&buf->b, reserve);
    e398:	f104 0a08 	add.w	sl, r4, #8
    e39c:	2101      	movs	r1, #1
    e39e:	4650      	mov	r0, sl
    e3a0:	f006 fa60 	bl	14864 <net_buf_simple_reserve>
	cmd(buf)->opcode = opcode;
    e3a4:	4620      	mov	r0, r4
    e3a6:	f884 8014 	strb.w	r8, [r4, #20]
    e3aa:	f006 f935 	bl	14618 <net_buf_id>
    e3ae:	f04f 090c 	mov.w	r9, #12
    e3b2:	4d10      	ldr	r5, [pc, #64]	; (e3f4 <bt_hci_cmd_create+0x90>)
    e3b4:	fb09 5000 	mla	r0, r9, r0, r5
    e3b8:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    e3ba:	4620      	mov	r0, r4
    e3bc:	f006 f92c 	bl	14618 <net_buf_id>
    e3c0:	fb09 5000 	mla	r0, r9, r0, r5
    e3c4:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    e3c8:	4620      	mov	r0, r4
    e3ca:	f006 f925 	bl	14618 <net_buf_id>
    e3ce:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    e3d2:	2103      	movs	r1, #3
    e3d4:	4650      	mov	r0, sl
    e3d6:	f8c5 8004 	str.w	r8, [r5, #4]
    e3da:	f006 fbab 	bl	14b34 <net_buf_simple_add>
	hdr->param_len = param_len;
    e3de:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    e3e0:	8006      	strh	r6, [r0, #0]
}
    e3e2:	4620      	mov	r0, r4
    e3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e3e8:	20008760 	.word	0x20008760
    e3ec:	0001fdca 	.word	0x0001fdca
    e3f0:	0001ead7 	.word	0x0001ead7
    e3f4:	2000a940 	.word	0x2000a940

0000e3f8 <bt_hci_cmd_send_sync>:
{
    e3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3fa:	4607      	mov	r7, r0
    e3fc:	4615      	mov	r5, r2
	if (!buf) {
    e3fe:	460c      	mov	r4, r1
{
    e400:	b087      	sub	sp, #28
	if (!buf) {
    e402:	b921      	cbnz	r1, e40e <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
    e404:	f7ff ffae 	bl	e364 <bt_hci_cmd_create>
		if (!buf) {
    e408:	4604      	mov	r4, r0
    e40a:	2800      	cmp	r0, #0
    e40c:	d048      	beq.n	e4a0 <bt_hci_cmd_send_sync+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e40e:	2201      	movs	r2, #1
    e410:	2100      	movs	r1, #0
    e412:	4668      	mov	r0, sp
    e414:	f00e fec0 	bl	1d198 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    e418:	4620      	mov	r0, r4
    e41a:	f006 f8fd 	bl	14618 <net_buf_id>
    e41e:	230c      	movs	r3, #12
    e420:	4e21      	ldr	r6, [pc, #132]	; (e4a8 <bt_hci_cmd_send_sync+0xb0>)
    e422:	fb03 6000 	mla	r0, r3, r0, r6
    e426:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    e42a:	4620      	mov	r0, r4
    e42c:	f006 fab0 	bl	14990 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    e430:	4621      	mov	r1, r4
    e432:	481e      	ldr	r0, [pc, #120]	; (e4ac <bt_hci_cmd_send_sync+0xb4>)
    e434:	f006 fa3a 	bl	148ac <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    e438:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    e43c:	2300      	movs	r3, #0
    e43e:	4668      	mov	r0, sp
    e440:	f00a f93c 	bl	186bc <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    e444:	b158      	cbz	r0, e45e <bt_hci_cmd_send_sync+0x66>
    e446:	f240 124d 	movw	r2, #333	; 0x14d
    e44a:	4919      	ldr	r1, [pc, #100]	; (e4b0 <bt_hci_cmd_send_sync+0xb8>)
    e44c:	4819      	ldr	r0, [pc, #100]	; (e4b4 <bt_hci_cmd_send_sync+0xbc>)
    e44e:	f00b face 	bl	199ee <printk>
    e452:	4040      	eors	r0, r0
    e454:	f380 8811 	msr	BASEPRI, r0
    e458:	f04f 0003 	mov.w	r0, #3
    e45c:	df02      	svc	2
	status = cmd(buf)->status;
    e45e:	4620      	mov	r0, r4
    e460:	f006 f8da 	bl	14618 <net_buf_id>
    e464:	230c      	movs	r3, #12
    e466:	4358      	muls	r0, r3
    e468:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
    e46a:	b186      	cbz	r6, e48e <bt_hci_cmd_send_sync+0x96>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    e46c:	4633      	mov	r3, r6
    e46e:	463a      	mov	r2, r7
    e470:	2157      	movs	r1, #87	; 0x57
    e472:	4811      	ldr	r0, [pc, #68]	; (e4b8 <bt_hci_cmd_send_sync+0xc0>)
    e474:	f00b fabb 	bl	199ee <printk>
		net_buf_unref(buf);
    e478:	4620      	mov	r0, r4
    e47a:	f006 fa45 	bl	14908 <net_buf_unref>
			return -EIO;
    e47e:	2e09      	cmp	r6, #9
    e480:	bf0c      	ite	eq
    e482:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    e486:	f06f 0004 	mvnne.w	r0, #4
}
    e48a:	b007      	add	sp, #28
    e48c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    e48e:	b115      	cbz	r5, e496 <bt_hci_cmd_send_sync+0x9e>
	return 0;
    e490:	4630      	mov	r0, r6
		*rsp = buf;
    e492:	602c      	str	r4, [r5, #0]
    e494:	e7f9      	b.n	e48a <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
    e496:	4620      	mov	r0, r4
    e498:	f006 fa36 	bl	14908 <net_buf_unref>
	return 0;
    e49c:	4628      	mov	r0, r5
    e49e:	e7f4      	b.n	e48a <bt_hci_cmd_send_sync+0x92>
			return -ENOBUFS;
    e4a0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e4a4:	e7f1      	b.n	e48a <bt_hci_cmd_send_sync+0x92>
    e4a6:	bf00      	nop
    e4a8:	2000a940 	.word	0x2000a940
    e4ac:	20008118 	.word	0x20008118
    e4b0:	0001fdca 	.word	0x0001fdca
    e4b4:	0001ead7 	.word	0x0001ead7
    e4b8:	0001ff16 	.word	0x0001ff16

0000e4bc <hci_le_read_max_data_len>:
{
    e4bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e4be:	4606      	mov	r6, r0
    e4c0:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    e4c2:	f242 002f 	movw	r0, #8239	; 0x202f
    e4c6:	2100      	movs	r1, #0
    e4c8:	aa01      	add	r2, sp, #4
    e4ca:	f7ff ff95 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    e4ce:	4604      	mov	r4, r0
    e4d0:	b130      	cbz	r0, e4e0 <hci_le_read_max_data_len+0x24>
		BT_ERR("Failed to read DLE max data len");
    e4d2:	2145      	movs	r1, #69	; 0x45
    e4d4:	4808      	ldr	r0, [pc, #32]	; (e4f8 <hci_le_read_max_data_len+0x3c>)
    e4d6:	f00b fa8a 	bl	199ee <printk>
}
    e4da:	4620      	mov	r0, r4
    e4dc:	b002      	add	sp, #8
    e4de:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    e4e0:	9801      	ldr	r0, [sp, #4]
    e4e2:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    e4e4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    e4e8:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    e4ea:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    e4ee:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    e4f0:	f006 fa0a 	bl	14908 <net_buf_unref>
	return 0;
    e4f4:	e7f1      	b.n	e4da <hci_le_read_max_data_len+0x1e>
    e4f6:	bf00      	nop
    e4f8:	0001ff37 	.word	0x0001ff37

0000e4fc <set_random_address>:
{
    e4fc:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    e4fe:	4e15      	ldr	r6, [pc, #84]	; (e554 <set_random_address+0x58>)
    e500:	2206      	movs	r2, #6
    e502:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    e506:	4605      	mov	r5, r0
    e508:	f00c fca0 	bl	1ae4c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    e50c:	4604      	mov	r4, r0
    e50e:	b1e0      	cbz	r0, e54a <set_random_address+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    e510:	2106      	movs	r1, #6
    e512:	f242 0005 	movw	r0, #8197	; 0x2005
    e516:	f7ff ff25 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
    e51a:	4604      	mov	r4, r0
    e51c:	b1b8      	cbz	r0, e54e <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e51e:	2206      	movs	r2, #6
    e520:	4629      	mov	r1, r5
    e522:	3008      	adds	r0, #8
    e524:	f00d ffa5 	bl	1c472 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    e528:	4621      	mov	r1, r4
    e52a:	2200      	movs	r2, #0
    e52c:	f242 0005 	movw	r0, #8197	; 0x2005
    e530:	f7ff ff62 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    e534:	4604      	mov	r4, r0
    e536:	b940      	cbnz	r0, e54a <set_random_address+0x4e>
	memcpy(dst, src, sizeof(*dst));
    e538:	2206      	movs	r2, #6
    e53a:	4629      	mov	r1, r5
    e53c:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    e540:	f00c fc95 	bl	1ae6e <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    e544:	2301      	movs	r3, #1
    e546:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    e54a:	4620      	mov	r0, r4
    e54c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    e54e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    e552:	e7fa      	b.n	e54a <set_random_address+0x4e>
    e554:	20008000 	.word	0x20008000

0000e558 <set_le_scan_enable_legacy>:
{
    e558:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    e55a:	2102      	movs	r1, #2
{
    e55c:	4604      	mov	r4, r0
    e55e:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    e560:	f242 000c 	movw	r0, #8204	; 0x200c
    e564:	f7ff fefe 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
    e568:	4605      	mov	r5, r0
    e56a:	b348      	cbz	r0, e5c0 <set_le_scan_enable_legacy+0x68>
	return net_buf_simple_add(&buf->b, len);
    e56c:	2102      	movs	r1, #2
    e56e:	3008      	adds	r0, #8
    e570:	f006 fae0 	bl	14b34 <net_buf_simple_add>
	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    e574:	2c01      	cmp	r4, #1
    e576:	4603      	mov	r3, r0
    e578:	d11f      	bne.n	e5ba <set_le_scan_enable_legacy+0x62>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e57a:	4813      	ldr	r0, [pc, #76]	; (e5c8 <set_le_scan_enable_legacy+0x70>)
    e57c:	f00c fd64 	bl	1b048 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e580:	f3c0 2000 	ubfx	r0, r0, #8, #1
    e584:	7058      	strb	r0, [r3, #1]
	cp->enable = enable;
    e586:	701c      	strb	r4, [r3, #0]
/* Initialize command state instance */
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
    e588:	4b0f      	ldr	r3, [pc, #60]	; (e5c8 <set_le_scan_enable_legacy+0x70>)
	cmd(buf)->state = &state;
    e58a:	4628      	mov	r0, r5
    e58c:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    e58e:	2305      	movs	r3, #5
	bt_hci_cmd_state_set_init(&state, bt_dev.flags, BT_DEV_SCANNING,
    e590:	f004 0401 	and.w	r4, r4, #1
    e594:	9302      	str	r3, [sp, #8]
    e596:	f88d 400c 	strb.w	r4, [sp, #12]
	cmd(buf)->state = &state;
    e59a:	f006 f83d 	bl	14618 <net_buf_id>
    e59e:	220c      	movs	r2, #12
    e5a0:	4b0a      	ldr	r3, [pc, #40]	; (e5cc <set_le_scan_enable_legacy+0x74>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    e5a2:	4629      	mov	r1, r5
	cmd(buf)->state = &state;
    e5a4:	fb02 3300 	mla	r3, r2, r0, r3
    e5a8:	aa01      	add	r2, sp, #4
    e5aa:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    e5ac:	f242 000c 	movw	r0, #8204	; 0x200c
    e5b0:	2200      	movs	r2, #0
    e5b2:	f7ff ff21 	bl	e3f8 <bt_hci_cmd_send_sync>
}
    e5b6:	b005      	add	sp, #20
    e5b8:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    e5ba:	2200      	movs	r2, #0
    e5bc:	7042      	strb	r2, [r0, #1]
    e5be:	e7e2      	b.n	e586 <set_le_scan_enable_legacy+0x2e>
		return -ENOBUFS;
    e5c0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e5c4:	e7f7      	b.n	e5b6 <set_le_scan_enable_legacy+0x5e>
    e5c6:	bf00      	nop
    e5c8:	20008094 	.word	0x20008094
    e5cc:	2000a940 	.word	0x2000a940

0000e5d0 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    e5d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    e5d4:	4605      	mov	r5, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e5d6:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    e5da:	460e      	mov	r6, r1
    e5dc:	4691      	mov	r9, r2
    e5de:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    e5e0:	d02c      	beq.n	e63c <le_adv_set_random_addr.isra.0+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    e5e2:	f8df 80e0 	ldr.w	r8, [pc, #224]	; e6c4 <le_adv_set_random_addr.isra.0+0xf4>
    e5e6:	b12a      	cbz	r2, e5f4 <le_adv_set_random_addr.isra.0+0x24>
    e5e8:	068c      	lsls	r4, r1, #26
    e5ea:	d503      	bpl.n	e5f4 <le_adv_set_random_addr.isra.0+0x24>
    e5ec:	f898 3098 	ldrb.w	r3, [r8, #152]	; 0x98
    e5f0:	0658      	lsls	r0, r3, #25
    e5f2:	d563      	bpl.n	e6bc <le_adv_set_random_addr.isra.0+0xec>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e5f4:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    e5f8:	f818 3003 	ldrb.w	r3, [r8, r3]
    e5fc:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
    e600:	2b01      	cmp	r3, #1
    e602:	d009      	beq.n	e618 <le_adv_set_random_addr.isra.0+0x48>
			*own_addr_type = id_addr->type;
    e604:	ebaa 0505 	sub.w	r5, sl, r5
    e608:	f818 3005 	ldrb.w	r3, [r8, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e60c:	f1b9 0f00 	cmp.w	r9, #0
    e610:	d10f      	bne.n	e632 <le_adv_set_random_addr.isra.0+0x62>
	return 0;
    e612:	2400      	movs	r4, #0
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    e614:	703b      	strb	r3, [r7, #0]
    e616:	e008      	b.n	e62a <le_adv_set_random_addr.isra.0+0x5a>
				err = set_adv_random_address(adv, &id_addr->a);
    e618:	2007      	movs	r0, #7
    e61a:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    e61e:	4440      	add	r0, r8
    e620:	f7ff ff6c 	bl	e4fc <set_random_address>
				if (err) {
    e624:	4604      	mov	r4, r0
    e626:	2800      	cmp	r0, #0
    e628:	d0ec      	beq.n	e604 <le_adv_set_random_addr.isra.0+0x34>
}
    e62a:	4620      	mov	r0, r4
    e62c:	b002      	add	sp, #8
    e62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    e632:	06b1      	lsls	r1, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    e634:	bf48      	it	mi
    e636:	f043 0302 	orrmi.w	r3, r3, #2
    e63a:	e7ea      	b.n	e612 <le_adv_set_random_addr.isra.0+0x42>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    e63c:	f011 0604 	ands.w	r6, r1, #4
    e640:	d014      	beq.n	e66c <le_adv_set_random_addr.isra.0+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    e642:	f8df 8080 	ldr.w	r8, [pc, #128]	; e6c4 <le_adv_set_random_addr.isra.0+0xf4>
    e646:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    e64a:	f818 3003 	ldrb.w	r3, [r8, r3]
    e64e:	00ee      	lsls	r6, r5, #3
    e650:	2b01      	cmp	r3, #1
    e652:	d105      	bne.n	e660 <le_adv_set_random_addr.isra.0+0x90>
				err = set_adv_random_address(adv, &id_addr->a);
    e654:	2007      	movs	r0, #7
    e656:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    e65a:	4440      	add	r0, r8
    e65c:	f7ff ff4e 	bl	e4fc <set_random_address>
			*own_addr_type = id_addr->type;
    e660:	1b75      	subs	r5, r6, r5
    e662:	f818 3005 	ldrb.w	r3, [r8, r5]
	int err = 0;
    e666:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    e668:	703b      	strb	r3, [r7, #0]
    e66a:	e7de      	b.n	e62a <le_adv_set_random_addr.isra.0+0x5a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e66c:	4816      	ldr	r0, [pc, #88]	; (e6c8 <le_adv_set_random_addr.isra.0+0xf8>)
    e66e:	f00c fceb 	bl	1b048 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    e672:	0682      	lsls	r2, r0, #26
    e674:	d417      	bmi.n	e6a6 <le_adv_set_random_addr.isra.0+0xd6>
			bool scan_enabled = false;
    e676:	2500      	movs	r5, #0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    e678:	2106      	movs	r1, #6
    e67a:	4668      	mov	r0, sp
    e67c:	f001 fe2a 	bl	102d4 <bt_rand>
	if (err) {
    e680:	4604      	mov	r4, r0
    e682:	b948      	cbnz	r0, e698 <le_adv_set_random_addr.isra.0+0xc8>
	BT_ADDR_SET_NRPA(&nrpa);
    e684:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    e688:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    e68a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    e68e:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    e692:	f7ff ff33 	bl	e4fc <set_random_address>
    e696:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    e698:	2001      	movs	r0, #1
    e69a:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    e69c:	2d00      	cmp	r5, #0
    e69e:	d0c4      	beq.n	e62a <le_adv_set_random_addr.isra.0+0x5a>
	return set_le_scan_enable_legacy(enable);
    e6a0:	f7ff ff5a 	bl	e558 <set_le_scan_enable_legacy>
		if (err) {
    e6a4:	e7c1      	b.n	e62a <le_adv_set_random_addr.isra.0+0x5a>
    e6a6:	4808      	ldr	r0, [pc, #32]	; (e6c8 <le_adv_set_random_addr.isra.0+0xf8>)
    e6a8:	f00c fcce 	bl	1b048 <atomic_get>
			    atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    e6ac:	0603      	lsls	r3, r0, #24
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    e6ae:	f3c0 15c0 	ubfx	r5, r0, #7, #1
    e6b2:	d5e0      	bpl.n	e676 <le_adv_set_random_addr.isra.0+0xa6>
	return set_le_scan_enable_legacy(enable);
    e6b4:	4630      	mov	r0, r6
    e6b6:	f7ff ff4f 	bl	e558 <set_le_scan_enable_legacy>
    e6ba:	e7dd      	b.n	e678 <le_adv_set_random_addr.isra.0+0xa8>
			return -ENOTSUP;
    e6bc:	f06f 0422 	mvn.w	r4, #34	; 0x22
    e6c0:	e7b3      	b.n	e62a <le_adv_set_random_addr.isra.0+0x5a>
    e6c2:	bf00      	nop
    e6c4:	20008000 	.word	0x20008000
    e6c8:	20008094 	.word	0x20008094

0000e6cc <hci_set_ad>:
{
    e6cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6d0:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    e6d2:	2120      	movs	r1, #32
{
    e6d4:	4682      	mov	sl, r0
    e6d6:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    e6d8:	f7ff fe44 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
    e6dc:	4606      	mov	r6, r0
    e6de:	2800      	cmp	r0, #0
    e6e0:	d056      	beq.n	e790 <hci_set_ad+0xc4>
    e6e2:	2120      	movs	r1, #32
    e6e4:	3008      	adds	r0, #8
    e6e6:	f006 fa25 	bl	14b34 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    e6ea:	2220      	movs	r2, #32
    e6ec:	4681      	mov	r9, r0
    e6ee:	2100      	movs	r1, #0
    e6f0:	f00c fbe8 	bl	1aec4 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    e6f4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
	uint8_t set_data_len = 0;
    e6f8:	2500      	movs	r5, #0
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    e6fa:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    e6fe:	9300      	str	r3, [sp, #0]
		for (size_t j = 0; j < ad[i].len; j++) {
    e700:	2300      	movs	r3, #0
    e702:	f8d4 8000 	ldr.w	r8, [r4]
    e706:	6862      	ldr	r2, [r4, #4]
    e708:	4293      	cmp	r3, r2
    e70a:	d30d      	bcc.n	e728 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    e70c:	9b00      	ldr	r3, [sp, #0]
    e70e:	3408      	adds	r4, #8
    e710:	429c      	cmp	r4, r3
    e712:	d1f5      	bne.n	e700 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    e714:	2200      	movs	r2, #0
    e716:	4631      	mov	r1, r6
    e718:	4650      	mov	r0, sl
	*data_len = set_data_len;
    e71a:	f889 5000 	strb.w	r5, [r9]
}
    e71e:	b003      	add	sp, #12
    e720:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    e724:	f7ff be68 	b.w	e3f8 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    e728:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    e72c:	1ca8      	adds	r0, r5, #2
			if ((set_data_len + len + 2) > set_data_len_max) {
    e72e:	1881      	adds	r1, r0, r2
    e730:	291f      	cmp	r1, #31
			uint8_t type = data[j].type;
    e732:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    e736:	d914      	bls.n	e762 <hci_set_ad+0x96>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    e738:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    e73c:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    e740:	d101      	bne.n	e746 <hci_set_ad+0x7a>
    e742:	2a00      	cmp	r2, #0
    e744:	dc0b      	bgt.n	e75e <hci_set_ad+0x92>
					BT_ERR("Too big advertising data");
    e746:	2145      	movs	r1, #69	; 0x45
    e748:	4813      	ldr	r0, [pc, #76]	; (e798 <hci_set_ad+0xcc>)
    e74a:	f00b f950 	bl	199ee <printk>
		net_buf_unref(buf);
    e74e:	4630      	mov	r0, r6
    e750:	f006 f8da 	bl	14908 <net_buf_unref>
					return -EINVAL;
    e754:	f06f 0015 	mvn.w	r0, #21
}
    e758:	b003      	add	sp, #12
    e75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    e75e:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    e762:	b2d7      	uxtb	r7, r2
    e764:	1c79      	adds	r1, r7, #1
    e766:	f80b 1005 	strb.w	r1, [fp, r5]
    e76a:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    e76c:	b2c9      	uxtb	r1, r1
    e76e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    e772:	f8d8 1004 	ldr.w	r1, [r8, #4]
    e776:	fa5b f080 	uxtab	r0, fp, r0
    e77a:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    e77c:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    e77e:	f00c fb76 	bl	1ae6e <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    e782:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    e784:	443d      	add	r5, r7
    e786:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    e788:	3301      	adds	r3, #1
    e78a:	f108 0808 	add.w	r8, r8, #8
    e78e:	e7ba      	b.n	e706 <hci_set_ad+0x3a>
		return -ENOBUFS;
    e790:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e794:	e7e0      	b.n	e758 <hci_set_ad+0x8c>
    e796:	bf00      	nop
    e798:	0001ff5c 	.word	0x0001ff5c

0000e79c <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    e79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7a0:	b087      	sub	sp, #28
    e7a2:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    e7a6:	4606      	mov	r6, r0
    e7a8:	460c      	mov	r4, r1
    e7aa:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    e7ac:	2100      	movs	r1, #0
    e7ae:	2210      	movs	r2, #16
    e7b0:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    e7b2:	461d      	mov	r5, r3
    e7b4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    e7b8:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
	struct bt_ad d[2] = {};
    e7bc:	f00c fb82 	bl	1aec4 <memset>
	if (use_name) {
    e7c0:	f1b8 0f00 	cmp.w	r8, #0
    e7c4:	d00e      	beq.n	e7e4 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    e7c6:	bbb4      	cbnz	r4, e836 <le_adv_update.constprop.0+0x9a>
    e7c8:	2d00      	cmp	r5, #0
    e7ca:	d13f      	bne.n	e84c <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    e7cc:	f8df b0b0 	ldr.w	fp, [pc, #176]	; e880 <le_adv_update.constprop.0+0xe4>
    e7d0:	4658      	mov	r0, fp
    e7d2:	f00c fb0e 	bl	1adf2 <strlen>
    e7d6:	2309      	movs	r3, #9
    e7d8:	f88d 0001 	strb.w	r0, [sp, #1]
    e7dc:	f88d 3000 	strb.w	r3, [sp]
    e7e0:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    e7e4:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    e7e8:	f1b8 0f00 	cmp.w	r8, #0
    e7ec:	d030      	beq.n	e850 <le_adv_update.constprop.0+0xb4>
    e7ee:	f1ba 0f00 	cmp.w	sl, #0
    e7f2:	d12d      	bne.n	e850 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    e7f4:	2301      	movs	r3, #1
			d_len = 2;
    e7f6:	2202      	movs	r2, #2
			d[1].data = &data;
    e7f8:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    e7fc:	9305      	str	r3, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    e7fe:	f242 0008 	movw	r0, #8200	; 0x2008
    e802:	a902      	add	r1, sp, #8
    e804:	f7ff ff62 	bl	e6cc <hci_set_ad>
		if (err) {
    e808:	4604      	mov	r4, r0
    e80a:	b938      	cbnz	r0, e81c <le_adv_update.constprop.0+0x80>
	if (scannable) {
    e80c:	f1ba 0f00 	cmp.w	sl, #0
    e810:	d120      	bne.n	e854 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e812:	2104      	movs	r1, #4
    e814:	f106 0010 	add.w	r0, r6, #16
    e818:	f00c fc1c 	bl	1b054 <atomic_or>
}
    e81c:	4620      	mov	r0, r4
    e81e:	b007      	add	sp, #28
    e820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    e824:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    e828:	3a08      	subs	r2, #8
    e82a:	2a01      	cmp	r2, #1
    e82c:	d925      	bls.n	e87a <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    e82e:	3301      	adds	r3, #1
    e830:	429f      	cmp	r7, r3
    e832:	d1f7      	bne.n	e824 <le_adv_update.constprop.0+0x88>
    e834:	e7c8      	b.n	e7c8 <le_adv_update.constprop.0+0x2c>
    e836:	2300      	movs	r3, #0
    e838:	e7fa      	b.n	e830 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    e83a:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    e83e:	3a08      	subs	r2, #8
    e840:	2a01      	cmp	r2, #1
    e842:	d91a      	bls.n	e87a <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    e844:	3301      	adds	r3, #1
    e846:	4599      	cmp	r9, r3
    e848:	d1f7      	bne.n	e83a <le_adv_update.constprop.0+0x9e>
    e84a:	e7bf      	b.n	e7cc <le_adv_update.constprop.0+0x30>
    e84c:	2300      	movs	r3, #0
    e84e:	e7fa      	b.n	e846 <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    e850:	2201      	movs	r2, #1
    e852:	e7d4      	b.n	e7fe <le_adv_update.constprop.0+0x62>
		d[0].data = sd;
    e854:	2201      	movs	r2, #1
		d[0].len = sd_len;
    e856:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    e85a:	f1b8 0f00 	cmp.w	r8, #0
    e85e:	d003      	beq.n	e868 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    e860:	9205      	str	r2, [sp, #20]
			d_len = 2;
    e862:	2202      	movs	r2, #2
			d[1].data = &data;
    e864:	f8cd d010 	str.w	sp, [sp, #16]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    e868:	f242 0009 	movw	r0, #8201	; 0x2009
    e86c:	a902      	add	r1, sp, #8
    e86e:	f7ff ff2d 	bl	e6cc <hci_set_ad>
		if (err) {
    e872:	2800      	cmp	r0, #0
    e874:	d0cd      	beq.n	e812 <le_adv_update.constprop.0+0x76>
    e876:	4604      	mov	r4, r0
    e878:	e7d0      	b.n	e81c <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    e87a:	f06f 0415 	mvn.w	r4, #21
    e87e:	e7cd      	b.n	e81c <le_adv_update.constprop.0+0x80>
    e880:	0001e926 	.word	0x0001e926

0000e884 <set_le_adv_enable_legacy>:
{
    e884:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    e886:	4606      	mov	r6, r0
    e888:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    e88a:	f242 000a 	movw	r0, #8202	; 0x200a
    e88e:	2101      	movs	r1, #1
    e890:	f7ff fd68 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
    e894:	4604      	mov	r4, r0
    e896:	b1e8      	cbz	r0, e8d4 <set_le_adv_enable_legacy+0x50>
	return net_buf_simple_add_u8(&buf->b, val);
    e898:	3008      	adds	r0, #8
	if (enable) {
    e89a:	b1cd      	cbz	r5, e8d0 <set_le_adv_enable_legacy+0x4c>
    e89c:	2101      	movs	r1, #1
    e89e:	f00d fdf4 	bl	1c48a <net_buf_simple_add_u8>
    e8a2:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    e8a4:	4620      	mov	r0, r4
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    e8a6:	3610      	adds	r6, #16
    e8a8:	9302      	str	r3, [sp, #8]
	state->target = target;
    e8aa:	9601      	str	r6, [sp, #4]
	state->val = val;
    e8ac:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    e8b0:	f005 feb2 	bl	14618 <net_buf_id>
    e8b4:	220c      	movs	r2, #12
    e8b6:	4b09      	ldr	r3, [pc, #36]	; (e8dc <set_le_adv_enable_legacy+0x58>)
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    e8b8:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    e8ba:	fb02 3300 	mla	r3, r2, r0, r3
    e8be:	aa01      	add	r2, sp, #4
    e8c0:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    e8c2:	f242 000a 	movw	r0, #8202	; 0x200a
    e8c6:	2200      	movs	r2, #0
    e8c8:	f7ff fd96 	bl	e3f8 <bt_hci_cmd_send_sync>
}
    e8cc:	b004      	add	sp, #16
    e8ce:	bd70      	pop	{r4, r5, r6, pc}
    e8d0:	4629      	mov	r1, r5
    e8d2:	e7e4      	b.n	e89e <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    e8d4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e8d8:	e7f8      	b.n	e8cc <set_le_adv_enable_legacy+0x48>
    e8da:	bf00      	nop
    e8dc:	2000a940 	.word	0x2000a940

0000e8e0 <start_le_scan_legacy>:
{
    e8e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e8e2:	460e      	mov	r6, r1
    e8e4:	4605      	mov	r5, r0
    e8e6:	4614      	mov	r4, r2
	(void)memset(&set_param, 0, sizeof(set_param));
    e8e8:	2100      	movs	r1, #0
    e8ea:	2207      	movs	r2, #7
    e8ec:	4668      	mov	r0, sp
    e8ee:	f00c fae9 	bl	1aec4 <memset>
	set_param.interval = sys_cpu_to_le16(interval);
    e8f2:	f8ad 6001 	strh.w	r6, [sp, #1]
		*own_addr_type = bt_dev.id_addr[0].type;
    e8f6:	4e26      	ldr	r6, [pc, #152]	; (e990 <start_le_scan_legacy+0xb0>)
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    e8f8:	2300      	movs	r3, #0
		*own_addr_type = bt_dev.id_addr[0].type;
    e8fa:	4630      	mov	r0, r6
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_NO_WHITELIST;
    e8fc:	f88d 3006 	strb.w	r3, [sp, #6]
		*own_addr_type = bt_dev.id_addr[0].type;
    e900:	f810 3b28 	ldrb.w	r3, [r0], #40
	set_param.scan_type = scan_type;
    e904:	f88d 5000 	strb.w	r5, [sp]
	set_param.window = sys_cpu_to_le16(window);
    e908:	f8ad 4003 	strh.w	r4, [sp, #3]
		*own_addr_type = bt_dev.id_addr[0].type;
    e90c:	f88d 3005 	strb.w	r3, [sp, #5]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    e910:	f00c fb9a 	bl	1b048 <atomic_get>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    e914:	0641      	lsls	r1, r0, #25
    e916:	d413      	bmi.n	e940 <start_le_scan_legacy+0x60>
			err = le_set_private_addr(BT_ID_DEFAULT);
    e918:	f00c fbdb 	bl	1b0d2 <le_set_private_addr.constprop.0>
			if (err) {
    e91c:	4604      	mov	r4, r0
    e91e:	b160      	cbz	r0, e93a <start_le_scan_legacy+0x5a>
				if (active_scan || !is_adv_using_rand_addr()) {
    e920:	2d01      	cmp	r5, #1
    e922:	d02e      	beq.n	e982 <start_le_scan_legacy+0xa2>
    e924:	f106 0028 	add.w	r0, r6, #40	; 0x28
    e928:	f00c fb8e 	bl	1b048 <atomic_get>
    e92c:	0642      	lsls	r2, r0, #25
    e92e:	d528      	bpl.n	e982 <start_le_scan_legacy+0xa2>
					BT_WARN("Ignoring failure to set "
    e930:	4622      	mov	r2, r4
    e932:	2157      	movs	r1, #87	; 0x57
    e934:	4817      	ldr	r0, [pc, #92]	; (e994 <start_le_scan_legacy+0xb4>)
    e936:	f00b f85a 	bl	199ee <printk>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    e93a:	2301      	movs	r3, #1
    e93c:	f88d 3005 	strb.w	r3, [sp, #5]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    e940:	2107      	movs	r1, #7
    e942:	f242 000b 	movw	r0, #8203	; 0x200b
    e946:	f7ff fd0d 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
    e94a:	4604      	mov	r4, r0
    e94c:	b1e0      	cbz	r0, e988 <start_le_scan_legacy+0xa8>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    e94e:	2207      	movs	r2, #7
    e950:	4669      	mov	r1, sp
    e952:	3008      	adds	r0, #8
    e954:	f00d fd8d 	bl	1c472 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    e958:	4621      	mov	r1, r4
    e95a:	2200      	movs	r2, #0
    e95c:	f242 000b 	movw	r0, #8203	; 0x200b
    e960:	f7ff fd4a 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    e964:	4604      	mov	r4, r0
    e966:	b960      	cbnz	r0, e982 <start_le_scan_legacy+0xa2>
	return set_le_scan_enable_legacy(enable);
    e968:	2001      	movs	r0, #1
    e96a:	f7ff fdf5 	bl	e558 <set_le_scan_enable_legacy>
	if (err) {
    e96e:	4604      	mov	r4, r0
    e970:	b938      	cbnz	r0, e982 <start_le_scan_legacy+0xa2>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);
    e972:	1e6b      	subs	r3, r5, #1
    e974:	425a      	negs	r2, r3
    e976:	f04f 0107 	mov.w	r1, #7
    e97a:	4807      	ldr	r0, [pc, #28]	; (e998 <start_le_scan_legacy+0xb8>)
    e97c:	415a      	adcs	r2, r3
    e97e:	f00c fb82 	bl	1b086 <atomic_set_bit_to>
}
    e982:	4620      	mov	r0, r4
    e984:	b002      	add	sp, #8
    e986:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    e988:	f06f 0436 	mvn.w	r4, #54	; 0x36
    e98c:	e7f9      	b.n	e982 <start_le_scan_legacy+0xa2>
    e98e:	bf00      	nop
    e990:	20008000 	.word	0x20008000
    e994:	0001ff7a 	.word	0x0001ff7a
    e998:	20008094 	.word	0x20008094

0000e99c <bt_le_scan_random_addr_check>:
{
    e99c:	b508      	push	{r3, lr}
    e99e:	4802      	ldr	r0, [pc, #8]	; (e9a8 <bt_le_scan_random_addr_check+0xc>)
    e9a0:	f00c fb52 	bl	1b048 <atomic_get>
}
    e9a4:	2001      	movs	r0, #1
    e9a6:	bd08      	pop	{r3, pc}
    e9a8:	20008028 	.word	0x20008028

0000e9ac <bt_le_create_conn_legacy>:
{
    e9ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		if (addr->type == BT_ADDR_LE_RANDOM) {
    e9b0:	4f2b      	ldr	r7, [pc, #172]	; (ea60 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1>)
{
    e9b2:	4605      	mov	r5, r0
		if (addr->type == BT_ADDR_LE_RANDOM) {
    e9b4:	783b      	ldrb	r3, [r7, #0]
    e9b6:	2b01      	cmp	r3, #1
    e9b8:	d00b      	beq.n	e9d2 <bt_le_create_conn_legacy+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    e9ba:	2119      	movs	r1, #25
    e9bc:	f242 000d 	movw	r0, #8205	; 0x200d
		*own_addr_type = addr->type;
    e9c0:	f897 8000 	ldrb.w	r8, [r7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    e9c4:	f7ff fcce 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
    e9c8:	4606      	mov	r6, r0
    e9ca:	b950      	cbnz	r0, e9e2 <bt_le_create_conn_legacy+0x36>
		return -ENOBUFS;
    e9cc:	f06f 0036 	mvn.w	r0, #54	; 0x36
    e9d0:	e004      	b.n	e9dc <bt_le_create_conn_legacy+0x30>
			err = set_random_address(&addr->a);
    e9d2:	1c78      	adds	r0, r7, #1
    e9d4:	f7ff fd92 	bl	e4fc <set_random_address>
			if (err) {
    e9d8:	2800      	cmp	r0, #0
    e9da:	d0ee      	beq.n	e9ba <bt_le_create_conn_legacy+0xe>
}
    e9dc:	b004      	add	sp, #16
    e9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    e9e2:	2119      	movs	r1, #25
    e9e4:	3008      	adds	r0, #8
    e9e6:	f006 f8a5 	bl	14b34 <net_buf_simple_add>
    e9ea:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    e9ec:	2219      	movs	r2, #25
    e9ee:	2100      	movs	r1, #0
    e9f0:	f00c fa68 	bl	1aec4 <memset>
	cp->own_addr_type = own_addr_type;
    e9f4:	f884 800c 	strb.w	r8, [r4, #12]
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    e9f8:	f04f 0800 	mov.w	r8, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    e9fc:	f105 0188 	add.w	r1, r5, #136	; 0x88
    ea00:	1d60      	adds	r0, r4, #5
    ea02:	f00c fb24 	bl	1b04e <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_DIRECT;
    ea06:	f884 8004 	strb.w	r8, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    ea0a:	89bb      	ldrh	r3, [r7, #12]
	cmd(buf)->state = &state;
    ea0c:	4630      	mov	r0, r6
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    ea0e:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    ea10:	89fb      	ldrh	r3, [r7, #14]
    ea12:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    ea14:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    ea18:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    ea1c:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    ea20:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    ea24:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    ea28:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    ea2c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
    ea30:	f8a4 3013 	strh.w	r3, [r4, #19]
	state->target = target;
    ea34:	4b0b      	ldr	r3, [pc, #44]	; (ea64 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4>)
    ea36:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    ea38:	230b      	movs	r3, #11
    ea3a:	9302      	str	r3, [sp, #8]
	state->val = val;
    ea3c:	2301      	movs	r3, #1
    ea3e:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = &state;
    ea42:	f005 fde9 	bl	14618 <net_buf_id>
    ea46:	220c      	movs	r2, #12
    ea48:	4b07      	ldr	r3, [pc, #28]	; (ea68 <CONFIG_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x8>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    ea4a:	4631      	mov	r1, r6
	cmd(buf)->state = &state;
    ea4c:	fb02 3300 	mla	r3, r2, r0, r3
    ea50:	aa01      	add	r2, sp, #4
    ea52:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    ea54:	f242 000d 	movw	r0, #8205	; 0x200d
    ea58:	4642      	mov	r2, r8
    ea5a:	f7ff fccd 	bl	e3f8 <bt_hci_cmd_send_sync>
    ea5e:	e7bd      	b.n	e9dc <bt_le_create_conn_legacy+0x30>
    ea60:	20008000 	.word	0x20008000
    ea64:	20008094 	.word	0x20008094
    ea68:	2000a940 	.word	0x2000a940

0000ea6c <bt_le_create_conn_cancel>:
{
    ea6c:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    ea6e:	2100      	movs	r1, #0
{
    ea70:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    ea72:	f242 000e 	movw	r0, #8206	; 0x200e
    ea76:	f7ff fc75 	bl	e364 <bt_hci_cmd_create>
	state->target = target;
    ea7a:	4b0c      	ldr	r3, [pc, #48]	; (eaac <bt_le_create_conn_cancel+0x40>)
	state->val = val;
    ea7c:	2500      	movs	r5, #0
	state->target = target;
    ea7e:	9301      	str	r3, [sp, #4]
	state->bit = bit;
    ea80:	230b      	movs	r3, #11
    ea82:	4604      	mov	r4, r0
    ea84:	9302      	str	r3, [sp, #8]
	state->val = val;
    ea86:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    ea8a:	f005 fdc5 	bl	14618 <net_buf_id>
    ea8e:	220c      	movs	r2, #12
    ea90:	4b07      	ldr	r3, [pc, #28]	; (eab0 <bt_le_create_conn_cancel+0x44>)
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    ea92:	4621      	mov	r1, r4
	cmd(buf)->state = &state;
    ea94:	fb02 3300 	mla	r3, r2, r0, r3
    ea98:	aa01      	add	r2, sp, #4
    ea9a:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    ea9c:	f242 000e 	movw	r0, #8206	; 0x200e
    eaa0:	462a      	mov	r2, r5
    eaa2:	f7ff fca9 	bl	e3f8 <bt_hci_cmd_send_sync>
}
    eaa6:	b005      	add	sp, #20
    eaa8:	bd30      	pop	{r4, r5, pc}
    eaaa:	bf00      	nop
    eaac:	20008094 	.word	0x20008094
    eab0:	2000a940 	.word	0x2000a940

0000eab4 <bt_le_scan_update>:
{
    eab4:	b570      	push	{r4, r5, r6, lr}
    eab6:	4606      	mov	r6, r0
    eab8:	481c      	ldr	r0, [pc, #112]	; (eb2c <bt_le_scan_update+0x78>)
    eaba:	f00c fac5 	bl	1b048 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    eabe:	0641      	lsls	r1, r0, #25
    eac0:	f3c0 1380 	ubfx	r3, r0, #6, #1
    eac4:	d501      	bpl.n	eaca <bt_le_scan_update+0x16>
			return 0;
    eac6:	2000      	movs	r0, #0
    eac8:	e02b      	b.n	eb22 <bt_le_scan_update+0x6e>
    eaca:	4818      	ldr	r0, [pc, #96]	; (eb2c <bt_le_scan_update+0x78>)
    eacc:	f00c fabc 	bl	1b048 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    ead0:	0682      	lsls	r2, r0, #26
    ead2:	d421      	bmi.n	eb18 <bt_le_scan_update+0x64>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    ead4:	2100      	movs	r1, #0
    ead6:	2206      	movs	r2, #6
    ead8:	4608      	mov	r0, r1
    eada:	f001 fff9 	bl	10ad0 <bt_conn_lookup_state_le>
		if (conn) {
    eade:	4604      	mov	r4, r0
    eae0:	bb00      	cbnz	r0, eb24 <bt_le_scan_update+0x70>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    eae2:	2202      	movs	r2, #2
    eae4:	4601      	mov	r1, r0
    eae6:	f001 fff3 	bl	10ad0 <bt_conn_lookup_state_le>
		if (conn) {
    eaea:	4605      	mov	r5, r0
    eaec:	2800      	cmp	r0, #0
    eaee:	d0ea      	beq.n	eac6 <bt_le_scan_update+0x12>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    eaf0:	f44f 7180 	mov.w	r1, #256	; 0x100
    eaf4:	480d      	ldr	r0, [pc, #52]	; (eb2c <bt_le_scan_update+0x78>)
    eaf6:	f00c faad 	bl	1b054 <atomic_or>
			bt_conn_unref(conn);
    eafa:	4628      	mov	r0, r5
    eafc:	f001 fe86 	bl	1080c <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    eb00:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    eb02:	4620      	mov	r0, r4
}
    eb04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    eb08:	bf15      	itete	ne
    eb0a:	2230      	movne	r2, #48	; 0x30
    eb0c:	2212      	moveq	r2, #18
    eb0e:	2160      	movne	r1, #96	; 0x60
    eb10:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    eb14:	f7ff bee4 	b.w	e8e0 <start_le_scan_legacy>
	return set_le_scan_enable_legacy(enable);
    eb18:	4618      	mov	r0, r3
    eb1a:	f7ff fd1d 	bl	e558 <set_le_scan_enable_legacy>
		if (err) {
    eb1e:	2800      	cmp	r0, #0
    eb20:	d0d8      	beq.n	ead4 <bt_le_scan_update+0x20>
}
    eb22:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
    eb24:	f001 fe72 	bl	1080c <bt_conn_unref>
    eb28:	e7cd      	b.n	eac6 <bt_le_scan_update+0x12>
    eb2a:	bf00      	nop
    eb2c:	20008094 	.word	0x20008094

0000eb30 <hci_disconn_complete>:
{
    eb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    eb32:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    eb34:	7835      	ldrb	r5, [r6, #0]
    eb36:	bb45      	cbnz	r5, eb8a <hci_disconn_complete+0x5a>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    eb38:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    eb3c:	4638      	mov	r0, r7
    eb3e:	f001 fe89 	bl	10854 <bt_conn_lookup_handle>
	if (!conn) {
    eb42:	4604      	mov	r4, r0
    eb44:	b930      	cbnz	r0, eb54 <hci_disconn_complete+0x24>
		BT_ERR("Unable to look up conn with handle %u", handle);
    eb46:	463a      	mov	r2, r7
}
    eb48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    eb4c:	2145      	movs	r1, #69	; 0x45
    eb4e:	480f      	ldr	r0, [pc, #60]	; (eb8c <hci_disconn_complete+0x5c>)
    eb50:	f00a bf4d 	b.w	199ee <printk>
	conn->err = evt->reason;
    eb54:	78f3      	ldrb	r3, [r6, #3]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    eb56:	4629      	mov	r1, r5
	conn->err = evt->reason;
    eb58:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    eb5a:	f001 fe83 	bl	10864 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    eb5e:	78a3      	ldrb	r3, [r4, #2]
	conn->handle = 0U;
    eb60:	8025      	strh	r5, [r4, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    eb62:	2b01      	cmp	r3, #1
    eb64:	d004      	beq.n	eb70 <hci_disconn_complete+0x40>
	bt_conn_unref(conn);
    eb66:	4620      	mov	r0, r4
}
    eb68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    eb6c:	f001 be4e 	b.w	1080c <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    eb70:	1d20      	adds	r0, r4, #4
    eb72:	f00c fa69 	bl	1b048 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    eb76:	07c3      	lsls	r3, r0, #31
    eb78:	d5f5      	bpl.n	eb66 <hci_disconn_complete+0x36>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    eb7a:	4620      	mov	r0, r4
    eb7c:	2102      	movs	r1, #2
    eb7e:	f001 fe71 	bl	10864 <bt_conn_set_state>
		bt_le_scan_update(false);
    eb82:	4628      	mov	r0, r5
    eb84:	f7ff ff96 	bl	eab4 <bt_le_scan_update>
    eb88:	e7ed      	b.n	eb66 <hci_disconn_complete+0x36>
}
    eb8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb8c:	0001fd01 	.word	0x0001fd01

0000eb90 <le_adv_report>:
{
    eb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    eb94:	f100 0708 	add.w	r7, r0, #8
    eb98:	b08d      	sub	sp, #52	; 0x34
    eb9a:	4604      	mov	r4, r0
    eb9c:	4638      	mov	r0, r7
    eb9e:	f00d fc4c 	bl	1c43a <net_buf_simple_pull_u8>
    eba2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; ed6c <le_adv_report+0x1dc>
	if (scan_dev_found_cb) {
    eba6:	f8df a1c8 	ldr.w	sl, [pc, #456]	; ed70 <le_adv_report+0x1e0>
    ebaa:	9001      	str	r0, [sp, #4]
	while (num_reports--) {
    ebac:	9b01      	ldr	r3, [sp, #4]
    ebae:	b913      	cbnz	r3, ebb6 <le_adv_report+0x26>
}
    ebb0:	b00d      	add	sp, #52	; 0x34
    ebb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
    ebb6:	89a3      	ldrh	r3, [r4, #12]
    ebb8:	2b08      	cmp	r3, #8
    ebba:	d806      	bhi.n	ebca <le_adv_report+0x3a>
			BT_ERR("Unexpected end of buffer");
    ebbc:	2145      	movs	r1, #69	; 0x45
    ebbe:	486d      	ldr	r0, [pc, #436]	; (ed74 <le_adv_report+0x1e4>)
}
    ebc0:	b00d      	add	sp, #52	; 0x34
    ebc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unexpected end of buffer");
    ebc6:	f00a bf12 	b.w	199ee <printk>
	return net_buf_simple_pull_mem(&buf->b, len);
    ebca:	2109      	movs	r1, #9
    ebcc:	4638      	mov	r0, r7
    ebce:	f005 ff93 	bl	14af8 <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    ebd2:	237f      	movs	r3, #127	; 0x7f
    ebd4:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    ebd8:	7a03      	ldrb	r3, [r0, #8]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    ebda:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    ebdc:	9300      	str	r3, [sp, #0]
    ebde:	18c3      	adds	r3, r0, r3
    ebe0:	7a5b      	ldrb	r3, [r3, #9]
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    ebe2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.rssi = evt->data[evt->length];
    ebe6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    ebea:	23ff      	movs	r3, #255	; 0xff
    ebec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    ebf0:	2300      	movs	r3, #0
    ebf2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.adv_type = evt->evt_type;
    ebf6:	7802      	ldrb	r2, [r0, #0]
    ebf8:	4606      	mov	r6, r0
    ebfa:	2a04      	cmp	r2, #4
    ebfc:	bf98      	it	ls
    ebfe:	4b5e      	ldrls	r3, [pc, #376]	; (ed78 <le_adv_report+0x1e8>)
		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
    ec00:	f100 0901 	add.w	r9, r0, #1
    ec04:	bf98      	it	ls
    ec06:	5c9b      	ldrbls	r3, [r3, r2]
    ec08:	4640      	mov	r0, r8
		adv_info.adv_type = evt->evt_type;
    ec0a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
		adv_info.adv_props = get_adv_props(evt->evt_type);
    ec0e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
    ec12:	f00c fa19 	bl	1b048 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    ec16:	0645      	lsls	r5, r0, #25
    ec18:	d50d      	bpl.n	ec36 <le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    ec1a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ec1e:	0758      	lsls	r0, r3, #29
    ec20:	d509      	bpl.n	ec36 <le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    ec22:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
    ec24:	4638      	mov	r0, r7
    ec26:	3101      	adds	r1, #1
    ec28:	f005 ff4a 	bl	14ac0 <net_buf_simple_pull>
    ec2c:	9b01      	ldr	r3, [sp, #4]
    ec2e:	1e58      	subs	r0, r3, #1
    ec30:	b2c3      	uxtb	r3, r0
    ec32:	9301      	str	r3, [sp, #4]
    ec34:	e7ba      	b.n	ebac <le_adv_report+0x1c>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    ec36:	7873      	ldrb	r3, [r6, #1]
    ec38:	1e9a      	subs	r2, r3, #2
    ec3a:	2a01      	cmp	r2, #1
    ec3c:	d84c      	bhi.n	ecd8 <le_adv_report+0x148>
		bt_addr_le_copy(&id_addr, addr);
    ec3e:	4649      	mov	r1, r9
    ec40:	a804      	add	r0, sp, #16
    ec42:	f00c fa04 	bl	1b04e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    ec46:	f89d 3010 	ldrb.w	r3, [sp, #16]
    ec4a:	3b02      	subs	r3, #2
    ec4c:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    ec50:	ab04      	add	r3, sp, #16
    ec52:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    ec54:	f8da 3000 	ldr.w	r3, [sl]
    ec58:	b1a3      	cbz	r3, ec84 <le_adv_report+0xf4>
	state->offset = net_buf_simple_headroom(buf);
    ec5a:	4638      	mov	r0, r7
    ec5c:	f00d fbfd 	bl	1c45a <net_buf_simple_headroom>
    ec60:	4683      	mov	fp, r0
		buf->len = len;
    ec62:	9b00      	ldr	r3, [sp, #0]
	state->len = buf->len;
    ec64:	89a5      	ldrh	r5, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    ec66:	a804      	add	r0, sp, #16
		buf->len = len;
    ec68:	81a3      	strh	r3, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
    ec6a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    ec6e:	463b      	mov	r3, r7
    ec70:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    ec74:	f8da c000 	ldr.w	ip, [sl]
    ec78:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    ec7a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    ec7c:	81a5      	strh	r5, [r4, #12]
	buf->data = buf->__buf + state->offset;
    ec7e:	fa10 f08b 	uxtah	r0, r0, fp
    ec82:	60a0      	str	r0, [r4, #8]
	return list->head;
    ec84:	4b3d      	ldr	r3, [pc, #244]	; (ed7c <le_adv_report+0x1ec>)
    ec86:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    ec88:	2b00      	cmp	r3, #0
    ec8a:	d032      	beq.n	ecf2 <le_adv_report+0x162>
    ec8c:	f1b3 0208 	subs.w	r2, r3, #8
    ec90:	d02f      	beq.n	ecf2 <le_adv_report+0x162>
	return node->next;
    ec92:	681d      	ldr	r5, [r3, #0]
    ec94:	b105      	cbz	r5, ec98 <le_adv_report+0x108>
    ec96:	3d08      	subs	r5, #8
		if (listener->recv) {
    ec98:	6813      	ldr	r3, [r2, #0]
    ec9a:	9203      	str	r2, [sp, #12]
    ec9c:	b193      	cbz	r3, ecc4 <le_adv_report+0x134>
	state->offset = net_buf_simple_headroom(buf);
    ec9e:	4638      	mov	r0, r7
    eca0:	f00d fbdb 	bl	1c45a <net_buf_simple_headroom>
    eca4:	4683      	mov	fp, r0
	state->len = buf->len;
    eca6:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    eca8:	9a03      	ldr	r2, [sp, #12]
    ecaa:	9302      	str	r3, [sp, #8]
			buf->len = len;
    ecac:	9b00      	ldr	r3, [sp, #0]
			listener->recv(info, &buf->b);
    ecae:	a808      	add	r0, sp, #32
			buf->len = len;
    ecb0:	81a3      	strh	r3, [r4, #12]
			listener->recv(info, &buf->b);
    ecb2:	4639      	mov	r1, r7
    ecb4:	6812      	ldr	r2, [r2, #0]
    ecb6:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    ecb8:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    ecba:	9b02      	ldr	r3, [sp, #8]
	buf->data = buf->__buf + state->offset;
    ecbc:	fa10 f08b 	uxtah	r0, r0, fp
    ecc0:	60a0      	str	r0, [r4, #8]
	buf->len = state->len;
    ecc2:	81a3      	strh	r3, [r4, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    ecc4:	b1ad      	cbz	r5, ecf2 <le_adv_report+0x162>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ecc6:	f115 0308 	adds.w	r3, r5, #8
    ecca:	d002      	beq.n	ecd2 <le_adv_report+0x142>
	return node->next;
    eccc:	68ab      	ldr	r3, [r5, #8]
    ecce:	b103      	cbz	r3, ecd2 <le_adv_report+0x142>
    ecd0:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    ecd2:	462a      	mov	r2, r5
    ecd4:	461d      	mov	r5, r3
    ecd6:	e7df      	b.n	ec98 <le_adv_report+0x108>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    ecd8:	2bff      	cmp	r3, #255	; 0xff
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    ecda:	bf0a      	itet	eq
    ecdc:	2300      	moveq	r3, #0
		bt_addr_le_copy(&id_addr,
    ecde:	4649      	movne	r1, r9
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    ece0:	a906      	addeq	r1, sp, #24
		bt_addr_le_copy(&id_addr,
    ece2:	a804      	add	r0, sp, #16
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    ece4:	bf04      	itt	eq
    ece6:	9306      	streq	r3, [sp, #24]
    ece8:	f8cd 301b 	streq.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    ecec:	f00c f9af 	bl	1b04e <bt_addr_le_copy>
    ecf0:	e7ae      	b.n	ec50 <le_adv_report+0xc0>
    ecf2:	4640      	mov	r0, r8
	check_pending_conn(&id_addr, addr, info->adv_props);
    ecf4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ecf8:	f00c f9a6 	bl	1b048 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    ecfc:	0641      	lsls	r1, r0, #25
    ecfe:	f3c0 1580 	ubfx	r5, r0, #6, #1
    ed02:	d48e      	bmi.n	ec22 <le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    ed04:	07da      	lsls	r2, r3, #31
    ed06:	d58c      	bpl.n	ec22 <le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    ed08:	2202      	movs	r2, #2
    ed0a:	4628      	mov	r0, r5
    ed0c:	a904      	add	r1, sp, #16
    ed0e:	f001 fedf 	bl	10ad0 <bt_conn_lookup_state_le>
	if (!conn) {
    ed12:	4683      	mov	fp, r0
    ed14:	2800      	cmp	r0, #0
    ed16:	d084      	beq.n	ec22 <le_adv_report+0x92>
    ed18:	4640      	mov	r0, r8
    ed1a:	f00c f995 	bl	1b048 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    ed1e:	0683      	lsls	r3, r0, #26
    ed20:	d410      	bmi.n	ed44 <le_adv_report+0x1b4>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    ed22:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    ed26:	4649      	mov	r1, r9
    ed28:	f00c f991 	bl	1b04e <bt_addr_le_copy>
	return bt_le_create_conn_legacy(conn);
    ed2c:	4658      	mov	r0, fp
    ed2e:	f7ff fe3d 	bl	e9ac <bt_le_create_conn_legacy>
	if (bt_le_create_conn(conn)) {
    ed32:	b960      	cbnz	r0, ed4e <le_adv_report+0x1be>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    ed34:	4658      	mov	r0, fp
    ed36:	2106      	movs	r1, #6
    ed38:	f001 fd94 	bl	10864 <bt_conn_set_state>
	bt_conn_unref(conn);
    ed3c:	4658      	mov	r0, fp
    ed3e:	f001 fd65 	bl	1080c <bt_conn_unref>
	return;
    ed42:	e76e      	b.n	ec22 <le_adv_report+0x92>
	return set_le_scan_enable_legacy(enable);
    ed44:	4628      	mov	r0, r5
    ed46:	f7ff fc07 	bl	e558 <set_le_scan_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    ed4a:	2800      	cmp	r0, #0
    ed4c:	d0e9      	beq.n	ed22 <le_adv_report+0x192>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    ed4e:	231f      	movs	r3, #31
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ed50:	2100      	movs	r1, #0
    ed52:	4658      	mov	r0, fp
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    ed54:	f88b 3009 	strb.w	r3, [fp, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ed58:	f001 fd84 	bl	10864 <bt_conn_set_state>
	bt_conn_unref(conn);
    ed5c:	4658      	mov	r0, fp
    ed5e:	f001 fd55 	bl	1080c <bt_conn_unref>
	bt_le_scan_update(false);
    ed62:	2000      	movs	r0, #0
    ed64:	f7ff fea6 	bl	eab4 <bt_le_scan_update>
    ed68:	e75b      	b.n	ec22 <le_adv_report+0x92>
    ed6a:	bf00      	nop
    ed6c:	20008094 	.word	0x20008094
    ed70:	2000a964 	.word	0x2000a964
    ed74:	0001ffb5 	.word	0x0001ffb5
    ed78:	00020439 	.word	0x00020439
    ed7c:	2000a95c 	.word	0x2000a95c

0000ed80 <bt_data_parse>:
{
    ed80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ed82:	4604      	mov	r4, r0
    ed84:	460e      	mov	r6, r1
    ed86:	4617      	mov	r7, r2
	while (ad->len > 1) {
    ed88:	88a3      	ldrh	r3, [r4, #4]
    ed8a:	2b01      	cmp	r3, #1
    ed8c:	d801      	bhi.n	ed92 <bt_data_parse+0x12>
}
    ed8e:	b003      	add	sp, #12
    ed90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
    ed92:	4620      	mov	r0, r4
    ed94:	f00d fb51 	bl	1c43a <net_buf_simple_pull_u8>
		if (len == 0U) {
    ed98:	4605      	mov	r5, r0
    ed9a:	2800      	cmp	r0, #0
    ed9c:	d0f7      	beq.n	ed8e <bt_data_parse+0xe>
		if (len > ad->len) {
    ed9e:	88a2      	ldrh	r2, [r4, #4]
    eda0:	b283      	uxth	r3, r0
    eda2:	429a      	cmp	r2, r3
    eda4:	d206      	bcs.n	edb4 <bt_data_parse+0x34>
			BT_WARN("Malformed data");
    eda6:	2157      	movs	r1, #87	; 0x57
    eda8:	480c      	ldr	r0, [pc, #48]	; (eddc <bt_data_parse+0x5c>)
}
    edaa:	b003      	add	sp, #12
    edac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			BT_WARN("Malformed data");
    edb0:	f00a be1d 	b.w	199ee <printk>
		data.type = net_buf_simple_pull_u8(ad);
    edb4:	4620      	mov	r0, r4
    edb6:	f00d fb40 	bl	1c43a <net_buf_simple_pull_u8>
		data.data = ad->data;
    edba:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
    edbc:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
    edc0:	3d01      	subs	r5, #1
		if (!func(&data, user_data)) {
    edc2:	4639      	mov	r1, r7
    edc4:	4668      	mov	r0, sp
		data.data_len = len - 1;
    edc6:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
    edca:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
    edcc:	47b0      	blx	r6
    edce:	2800      	cmp	r0, #0
    edd0:	d0dd      	beq.n	ed8e <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
    edd2:	4629      	mov	r1, r5
    edd4:	4620      	mov	r0, r4
    edd6:	f005 fe73 	bl	14ac0 <net_buf_simple_pull>
    edda:	e7d5      	b.n	ed88 <bt_data_parse+0x8>
    eddc:	0001ffd3 	.word	0x0001ffd3

0000ede0 <bt_send>:
	return bt_dev.drv->send(buf);
    ede0:	4b02      	ldr	r3, [pc, #8]	; (edec <bt_send+0xc>)
    ede2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    ede6:	691b      	ldr	r3, [r3, #16]
    ede8:	4718      	bx	r3
    edea:	bf00      	nop
    edec:	20008000 	.word	0x20008000

0000edf0 <bt_hci_cmd_send>:
{
    edf0:	b538      	push	{r3, r4, r5, lr}
    edf2:	4605      	mov	r5, r0
	if (!buf) {
    edf4:	460c      	mov	r4, r1
    edf6:	b919      	cbnz	r1, ee00 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    edf8:	f7ff fab4 	bl	e364 <bt_hci_cmd_create>
		if (!buf) {
    edfc:	4604      	mov	r4, r0
    edfe:	b1c0      	cbz	r0, ee32 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    ee00:	f640 4335 	movw	r3, #3125	; 0xc35
    ee04:	429d      	cmp	r5, r3
    ee06:	d10e      	bne.n	ee26 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
    ee08:	4620      	mov	r0, r4
    ee0a:	f7ff ffe9 	bl	ede0 <bt_send>
		if (err) {
    ee0e:	4605      	mov	r5, r0
    ee10:	b138      	cbz	r0, ee22 <bt_hci_cmd_send+0x32>
			BT_ERR("Unable to send to driver (err %d)", err);
    ee12:	4602      	mov	r2, r0
    ee14:	2145      	movs	r1, #69	; 0x45
    ee16:	4808      	ldr	r0, [pc, #32]	; (ee38 <bt_hci_cmd_send+0x48>)
    ee18:	f00a fde9 	bl	199ee <printk>
			net_buf_unref(buf);
    ee1c:	4620      	mov	r0, r4
    ee1e:	f005 fd73 	bl	14908 <net_buf_unref>
}
    ee22:	4628      	mov	r0, r5
    ee24:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    ee26:	4621      	mov	r1, r4
    ee28:	4804      	ldr	r0, [pc, #16]	; (ee3c <bt_hci_cmd_send+0x4c>)
    ee2a:	f005 fd3f 	bl	148ac <net_buf_put>
	return 0;
    ee2e:	2500      	movs	r5, #0
    ee30:	e7f7      	b.n	ee22 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
    ee32:	f06f 0536 	mvn.w	r5, #54	; 0x36
    ee36:	e7f4      	b.n	ee22 <bt_hci_cmd_send+0x32>
    ee38:	0001ffe7 	.word	0x0001ffe7
    ee3c:	20008118 	.word	0x20008118

0000ee40 <bt_hci_host_num_completed_packets>:
{
    ee40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ee42:	4604      	mov	r4, r0
	uint16_t handle = acl(buf)->handle;
    ee44:	8ac6      	ldrh	r6, [r0, #22]
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    ee46:	7980      	ldrb	r0, [r0, #6]
    ee48:	f005 fbde 	bl	14608 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
    ee4c:	4621      	mov	r1, r4
    ee4e:	f00e f956 	bl	1d0fe <k_queue_prepend>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    ee52:	4b24      	ldr	r3, [pc, #144]	; (eee4 <bt_hci_host_num_completed_packets+0xa4>)
    ee54:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    ee58:	069b      	lsls	r3, r3, #26
    ee5a:	d541      	bpl.n	eee0 <bt_hci_host_num_completed_packets+0xa0>
	conn = bt_conn_lookup_index(acl(buf)->index);
    ee5c:	7d60      	ldrb	r0, [r4, #21]
    ee5e:	f002 f94d 	bl	110fc <bt_conn_lookup_index>
	if (!conn) {
    ee62:	4605      	mov	r5, r0
    ee64:	b930      	cbnz	r0, ee74 <bt_hci_host_num_completed_packets+0x34>
		BT_WARN("Unable to look up conn with index 0x%02x",
    ee66:	7d62      	ldrb	r2, [r4, #21]
    ee68:	2157      	movs	r1, #87	; 0x57
}
    ee6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_WARN("Unable to look up conn with index 0x%02x",
    ee6e:	481e      	ldr	r0, [pc, #120]	; (eee8 <bt_hci_host_num_completed_packets+0xa8>)
    ee70:	f00a bdbd 	b.w	199ee <printk>
	if (!bt_conn_is_handle_valid(conn)) {
    ee74:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
    ee76:	2b01      	cmp	r3, #1
    ee78:	d002      	beq.n	ee80 <bt_hci_host_num_completed_packets+0x40>
    ee7a:	3b07      	subs	r3, #7
    ee7c:	2b01      	cmp	r3, #1
    ee7e:	d80f      	bhi.n	eea0 <bt_hci_host_num_completed_packets+0x60>
	bt_conn_unref(conn);
    ee80:	4628      	mov	r0, r5
    ee82:	f001 fcc3 	bl	1080c <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
    ee86:	2105      	movs	r1, #5
    ee88:	f640 4035 	movw	r0, #3125	; 0xc35
    ee8c:	f7ff fa6a 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
    ee90:	4604      	mov	r4, r0
    ee92:	b970      	cbnz	r0, eeb2 <bt_hci_host_num_completed_packets+0x72>
}
    ee94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to allocate new HCI command");
    ee98:	2145      	movs	r1, #69	; 0x45
    ee9a:	4814      	ldr	r0, [pc, #80]	; (eeec <bt_hci_host_num_completed_packets+0xac>)
    ee9c:	f00a bda7 	b.w	199ee <printk>
		BT_WARN("Not reporting packet for non-connected conn");
    eea0:	4813      	ldr	r0, [pc, #76]	; (eef0 <bt_hci_host_num_completed_packets+0xb0>)
    eea2:	2157      	movs	r1, #87	; 0x57
    eea4:	f00a fda3 	bl	199ee <printk>
		bt_conn_unref(conn);
    eea8:	4628      	mov	r0, r5
}
    eeaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    eeae:	f001 bcad 	b.w	1080c <bt_conn_unref>
	return net_buf_simple_add(&buf->b, len);
    eeb2:	f100 0708 	add.w	r7, r0, #8
    eeb6:	2101      	movs	r1, #1
    eeb8:	4638      	mov	r0, r7
    eeba:	f005 fe3b 	bl	14b34 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
    eebe:	2501      	movs	r5, #1
    eec0:	2104      	movs	r1, #4
    eec2:	7005      	strb	r5, [r0, #0]
    eec4:	4638      	mov	r0, r7
    eec6:	f005 fe35 	bl	14b34 <net_buf_simple_add>
	hc->count  = sys_cpu_to_le16(1);
    eeca:	2300      	movs	r3, #0
	hc->handle = sys_cpu_to_le16(handle);
    eecc:	8006      	strh	r6, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
    eece:	7085      	strb	r5, [r0, #2]
    eed0:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    eed2:	4621      	mov	r1, r4
}
    eed4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
    eed8:	f640 4035 	movw	r0, #3125	; 0xc35
    eedc:	f7ff bf88 	b.w	edf0 <bt_hci_cmd_send>
}
    eee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eee2:	bf00      	nop
    eee4:	20008000 	.word	0x20008000
    eee8:	0002000e 	.word	0x0002000e
    eeec:	0002006d 	.word	0x0002006d
    eef0:	0002003c 	.word	0x0002003c

0000eef4 <conn_auto_initiate>:
{
    eef4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    eef6:	7a83      	ldrb	r3, [r0, #10]
{
    eef8:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    eefa:	2b07      	cmp	r3, #7
    eefc:	d15d      	bne.n	efba <conn_auto_initiate+0xc6>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    eefe:	1d06      	adds	r6, r0, #4
    ef00:	4630      	mov	r0, r6
    ef02:	f00c f8a1 	bl	1b048 <atomic_get>
    ef06:	0483      	lsls	r3, r0, #18
    ef08:	d41b      	bmi.n	ef42 <conn_auto_initiate+0x4e>
    ef0a:	78e3      	ldrb	r3, [r4, #3]
    ef0c:	b123      	cbz	r3, ef18 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    ef0e:	4b2c      	ldr	r3, [pc, #176]	; (efc0 <conn_auto_initiate+0xcc>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    ef10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    ef14:	071d      	lsls	r5, r3, #28
    ef16:	d514      	bpl.n	ef42 <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    ef18:	2102      	movs	r1, #2
    ef1a:	f242 0016 	movw	r0, #8214	; 0x2016
    ef1e:	f7ff fa21 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
    ef22:	4605      	mov	r5, r0
    ef24:	b168      	cbz	r0, ef42 <conn_auto_initiate+0x4e>
    ef26:	2102      	movs	r1, #2
    ef28:	3008      	adds	r0, #8
    ef2a:	f005 fe03 	bl	14b34 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    ef2e:	8823      	ldrh	r3, [r4, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    ef30:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(conn->handle);
    ef32:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    ef34:	f242 0016 	movw	r0, #8214	; 0x2016
}
    ef38:	b004      	add	sp, #16
    ef3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    ef3e:	f7ff bf57 	b.w	edf0 <bt_hci_cmd_send>
    ef42:	4630      	mov	r0, r6
    ef44:	f00c f880 	bl	1b048 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    ef48:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    ef4c:	4d1c      	ldr	r5, [pc, #112]	; (efc0 <conn_auto_initiate+0xcc>)
    ef4e:	f3c0 3100 	ubfx	r1, r0, #12, #1
    ef52:	d116      	bne.n	ef82 <conn_auto_initiate+0x8e>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    ef54:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    ef58:	07d8      	lsls	r0, r3, #31
    ef5a:	d512      	bpl.n	ef82 <conn_auto_initiate+0x8e>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    ef5c:	2302      	movs	r3, #2
    ef5e:	4620      	mov	r0, r4
    ef60:	461a      	mov	r2, r3
    ef62:	9100      	str	r1, [sp, #0]
    ef64:	f00c f924 	bl	1b1b0 <bt_le_set_phy>
		if (!err) {
    ef68:	4602      	mov	r2, r0
    ef6a:	b930      	cbnz	r0, ef7a <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ef6c:	2180      	movs	r1, #128	; 0x80
    ef6e:	4630      	mov	r0, r6
}
    ef70:	b004      	add	sp, #16
    ef72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef76:	f00c b86d 	b.w	1b054 <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    ef7a:	2145      	movs	r1, #69	; 0x45
    ef7c:	4811      	ldr	r0, [pc, #68]	; (efc4 <conn_auto_initiate+0xd0>)
    ef7e:	f00a fd36 	bl	199ee <printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    ef82:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    ef86:	069a      	lsls	r2, r3, #26
    ef88:	d517      	bpl.n	efba <conn_auto_initiate+0xc6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    ef8a:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    ef8e:	689b      	ldr	r3, [r3, #8]
    ef90:	079b      	lsls	r3, r3, #30
    ef92:	d512      	bpl.n	efba <conn_auto_initiate+0xc6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    ef94:	f10d 010e 	add.w	r1, sp, #14
    ef98:	a803      	add	r0, sp, #12
    ef9a:	f7ff fa8f 	bl	e4bc <hci_le_read_max_data_len>
			if (!err) {
    ef9e:	b960      	cbnz	r0, efba <conn_auto_initiate+0xc6>
				err = bt_le_set_data_len(conn,
    efa0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    efa4:	4620      	mov	r0, r4
    efa6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    efaa:	f00c f8e4 	bl	1b176 <bt_le_set_data_len>
				if (err) {
    efae:	4602      	mov	r2, r0
    efb0:	b118      	cbz	r0, efba <conn_auto_initiate+0xc6>
					BT_ERR("Failed to set data len (%d)", err);
    efb2:	2145      	movs	r1, #69	; 0x45
    efb4:	4804      	ldr	r0, [pc, #16]	; (efc8 <conn_auto_initiate+0xd4>)
    efb6:	f00a fd1a 	bl	199ee <printk>
}
    efba:	b004      	add	sp, #16
    efbc:	bd70      	pop	{r4, r5, r6, pc}
    efbe:	bf00      	nop
    efc0:	20008000 	.word	0x20008000
    efc4:	00020095 	.word	0x00020095
    efc8:	000200b4 	.word	0x000200b4

0000efcc <le_phy_update_complete>:
{
    efcc:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    efce:	6883      	ldr	r3, [r0, #8]
    efd0:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    efd4:	4628      	mov	r0, r5
    efd6:	f001 fc3d 	bl	10854 <bt_conn_lookup_handle>
	if (!conn) {
    efda:	4604      	mov	r4, r0
    efdc:	b930      	cbnz	r0, efec <le_phy_update_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    efde:	462a      	mov	r2, r5
}
    efe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    efe4:	2145      	movs	r1, #69	; 0x45
    efe6:	480c      	ldr	r0, [pc, #48]	; (f018 <le_phy_update_complete+0x4c>)
    efe8:	f00a bd01 	b.w	199ee <printk>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    efec:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    efee:	f06f 0180 	mvn.w	r1, #128	; 0x80
    eff2:	4628      	mov	r0, r5
    eff4:	f00c f83c 	bl	1b070 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    eff8:	0603      	lsls	r3, r0, #24
    effa:	d507      	bpl.n	f00c <le_phy_update_complete+0x40>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    effc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    f000:	4628      	mov	r0, r5
    f002:	f00c f827 	bl	1b054 <atomic_or>
		conn_auto_initiate(conn);
    f006:	4620      	mov	r0, r4
    f008:	f7ff ff74 	bl	eef4 <conn_auto_initiate>
	bt_conn_unref(conn);
    f00c:	4620      	mov	r0, r4
}
    f00e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    f012:	f001 bbfb 	b.w	1080c <bt_conn_unref>
    f016:	bf00      	nop
    f018:	0001fcd8 	.word	0x0001fcd8

0000f01c <le_remote_feat_complete>:
{
    f01c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    f01e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    f020:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    f024:	4630      	mov	r0, r6
    f026:	f001 fc15 	bl	10854 <bt_conn_lookup_handle>
	if (!conn) {
    f02a:	4604      	mov	r4, r0
    f02c:	b930      	cbnz	r0, f03c <le_remote_feat_complete+0x20>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    f02e:	4632      	mov	r2, r6
}
    f030:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    f034:	2145      	movs	r1, #69	; 0x45
    f036:	480b      	ldr	r0, [pc, #44]	; (f064 <le_remote_feat_complete+0x48>)
    f038:	f00a bcd9 	b.w	199ee <printk>
	if (!evt->status) {
    f03c:	782b      	ldrb	r3, [r5, #0]
    f03e:	b923      	cbnz	r3, f04a <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
    f040:	2208      	movs	r2, #8
    f042:	1ce9      	adds	r1, r5, #3
    f044:	30ac      	adds	r0, #172	; 0xac
    f046:	f00b ff12 	bl	1ae6e <memcpy>
    f04a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    f04e:	1d20      	adds	r0, r4, #4
    f050:	f00c f800 	bl	1b054 <atomic_or>
	conn_auto_initiate(conn);
    f054:	4620      	mov	r0, r4
    f056:	f7ff ff4d 	bl	eef4 <conn_auto_initiate>
	bt_conn_unref(conn);
    f05a:	4620      	mov	r0, r4
}
    f05c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    f060:	f001 bbd4 	b.w	1080c <bt_conn_unref>
    f064:	0001fcd8 	.word	0x0001fcd8

0000f068 <le_conn_param_neg_reply>:
{
    f068:	b570      	push	{r4, r5, r6, lr}
    f06a:	4606      	mov	r6, r0
    f06c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    f06e:	f242 0021 	movw	r0, #8225	; 0x2021
    f072:	2103      	movs	r1, #3
    f074:	f7ff f976 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
    f078:	4604      	mov	r4, r0
    f07a:	b928      	cbnz	r0, f088 <le_conn_param_neg_reply+0x20>
}
    f07c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    f080:	2145      	movs	r1, #69	; 0x45
    f082:	4808      	ldr	r0, [pc, #32]	; (f0a4 <le_conn_param_neg_reply+0x3c>)
    f084:	f00a bcb3 	b.w	199ee <printk>
    f088:	2103      	movs	r1, #3
    f08a:	3008      	adds	r0, #8
    f08c:	f005 fd52 	bl	14b34 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    f090:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    f092:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    f094:	4621      	mov	r1, r4
}
    f096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    f09a:	f242 0021 	movw	r0, #8225	; 0x2021
    f09e:	f7ff bea7 	b.w	edf0 <bt_hci_cmd_send>
    f0a2:	bf00      	nop
    f0a4:	000200d5 	.word	0x000200d5

0000f0a8 <le_conn_param_req>:
{
    f0a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    f0aa:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    f0ac:	78d9      	ldrb	r1, [r3, #3]
    f0ae:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    f0b0:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    f0b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f0b6:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    f0ba:	7959      	ldrb	r1, [r3, #5]
    f0bc:	791a      	ldrb	r2, [r3, #4]
	handle = sys_le16_to_cpu(evt->handle);
    f0be:	b2bc      	uxth	r4, r7
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    f0c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f0c4:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    f0c8:	799a      	ldrb	r2, [r3, #6]
    f0ca:	79d9      	ldrb	r1, [r3, #7]
	conn = bt_conn_lookup_handle(handle);
    f0cc:	4620      	mov	r0, r4
	param.latency = sys_le16_to_cpu(evt->latency);
    f0ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f0d2:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    f0d6:	7a1a      	ldrb	r2, [r3, #8]
    f0d8:	7a5b      	ldrb	r3, [r3, #9]
    f0da:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f0de:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    f0e2:	f001 fbb7 	bl	10854 <bt_conn_lookup_handle>
	if (!conn) {
    f0e6:	4606      	mov	r6, r0
    f0e8:	b950      	cbnz	r0, f100 <le_conn_param_req+0x58>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    f0ea:	2145      	movs	r1, #69	; 0x45
    f0ec:	481c      	ldr	r0, [pc, #112]	; (f160 <le_conn_param_req+0xb8>)
    f0ee:	4622      	mov	r2, r4
    f0f0:	f00a fc7d 	bl	199ee <printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    f0f4:	2102      	movs	r1, #2
    f0f6:	4620      	mov	r0, r4
    f0f8:	f7ff ffb6 	bl	f068 <le_conn_param_neg_reply>
}
    f0fc:	b003      	add	sp, #12
    f0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    f100:	4669      	mov	r1, sp
    f102:	f001 f9f5 	bl	104f0 <le_param_req>
    f106:	b938      	cbnz	r0, f118 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    f108:	211e      	movs	r1, #30
    f10a:	4620      	mov	r0, r4
    f10c:	f7ff ffac 	bl	f068 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    f110:	4630      	mov	r0, r6
    f112:	f001 fb7b 	bl	1080c <bt_conn_unref>
    f116:	e7f1      	b.n	f0fc <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    f118:	210e      	movs	r1, #14
    f11a:	f242 0020 	movw	r0, #8224	; 0x2020
    f11e:	f7ff f921 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
    f122:	4605      	mov	r5, r0
    f124:	2800      	cmp	r0, #0
    f126:	d0f3      	beq.n	f110 <le_conn_param_req+0x68>
    f128:	210e      	movs	r1, #14
    f12a:	3008      	adds	r0, #8
    f12c:	f005 fd02 	bl	14b34 <net_buf_simple_add>
    f130:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    f132:	220e      	movs	r2, #14
    f134:	2100      	movs	r1, #0
    f136:	f00b fec5 	bl	1aec4 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    f13a:	f8bd 3000 	ldrh.w	r3, [sp]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    f13e:	4629      	mov	r1, r5
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    f140:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    f142:	f8bd 3002 	ldrh.w	r3, [sp, #2]
	cp->handle = sys_cpu_to_le16(handle);
    f146:	8027      	strh	r7, [r4, #0]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    f148:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    f14a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    f14e:	f242 0020 	movw	r0, #8224	; 0x2020
	cp->latency = sys_cpu_to_le16(param->latency);
    f152:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    f154:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f158:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    f15a:	f7ff fe49 	bl	edf0 <bt_hci_cmd_send>
    f15e:	e7d7      	b.n	f110 <le_conn_param_req+0x68>
    f160:	0001fcd8 	.word	0x0001fcd8

0000f164 <hci_tx_thread>:
{
    f164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    f168:	f8df 8128 	ldr.w	r8, [pc, #296]	; f294 <hci_tx_thread+0x130>
		BT_ASSERT(err == 0);
    f16c:	f8df 9128 	ldr.w	r9, [pc, #296]	; f298 <hci_tx_thread+0x134>
			ev_count += bt_conn_prepare_events(&events[1]);
    f170:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    f174:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    f178:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    f17a:	f36f 3310 	bfc	r3, #12, #5
    f17e:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    f182:	f001 fad7 	bl	10734 <bt_conn_prepare_events>
    f186:	1c46      	adds	r6, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
    f188:	f04f 32ff 	mov.w	r2, #4294967295
    f18c:	f04f 33ff 	mov.w	r3, #4294967295
    f190:	4631      	mov	r1, r6
    f192:	4840      	ldr	r0, [pc, #256]	; (f294 <hci_tx_thread+0x130>)
    f194:	f00a fa12 	bl	195bc <z_impl_k_poll>
		BT_ASSERT(err == 0);
    f198:	b158      	cbz	r0, f1b2 <hci_tx_thread+0x4e>
    f19a:	f241 4271 	movw	r2, #5233	; 0x1471
    f19e:	4649      	mov	r1, r9
    f1a0:	483e      	ldr	r0, [pc, #248]	; (f29c <hci_tx_thread+0x138>)
    f1a2:	f00a fc24 	bl	199ee <printk>
    f1a6:	4040      	eors	r0, r0
    f1a8:	f380 8811 	msr	BASEPRI, r0
    f1ac:	f04f 0003 	mov.w	r0, #3
    f1b0:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    f1b2:	4d3b      	ldr	r5, [pc, #236]	; (f2a0 <hci_tx_thread+0x13c>)
{
    f1b4:	4f37      	ldr	r7, [pc, #220]	; (f294 <hci_tx_thread+0x130>)
    f1b6:	f105 0be0 	add.w	fp, r5, #224	; 0xe0
	for (; count; ev++, count--) {
    f1ba:	b916      	cbnz	r6, f1c2 <hci_tx_thread+0x5e>
	z_impl_k_yield();
    f1bc:	f009 f900 	bl	183c0 <z_impl_k_yield>
	while (1) {
    f1c0:	e7d8      	b.n	f174 <hci_tx_thread+0x10>
		switch (ev->state) {
    f1c2:	68fa      	ldr	r2, [r7, #12]
    f1c4:	f3c2 3204 	ubfx	r2, r2, #12, #5
    f1c8:	2a01      	cmp	r2, #1
    f1ca:	d953      	bls.n	f274 <hci_tx_thread+0x110>
    f1cc:	2a04      	cmp	r2, #4
    f1ce:	d15b      	bne.n	f288 <hci_tx_thread+0x124>
			if (ev->tag == BT_EVENT_CMD_TX) {
    f1d0:	7b3b      	ldrb	r3, [r7, #12]
    f1d2:	2b00      	cmp	r3, #0
    f1d4:	d151      	bne.n	f27a <hci_tx_thread+0x116>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    f1d6:	2200      	movs	r2, #0
    f1d8:	2300      	movs	r3, #0
    f1da:	4832      	ldr	r0, [pc, #200]	; (f2a4 <hci_tx_thread+0x140>)
    f1dc:	f005 fb12 	bl	14804 <net_buf_get>
	BT_ASSERT(buf);
    f1e0:	4604      	mov	r4, r0
    f1e2:	b958      	cbnz	r0, f1fc <hci_tx_thread+0x98>
    f1e4:	f241 420e 	movw	r2, #5134	; 0x140e
    f1e8:	4649      	mov	r1, r9
    f1ea:	482c      	ldr	r0, [pc, #176]	; (f29c <hci_tx_thread+0x138>)
    f1ec:	f00a fbff 	bl	199ee <printk>
    f1f0:	4040      	eors	r0, r0
    f1f2:	f380 8811 	msr	BASEPRI, r0
    f1f6:	f04f 0003 	mov.w	r0, #3
    f1fa:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    f1fc:	f04f 33ff 	mov.w	r3, #4294967295
    f200:	f04f 32ff 	mov.w	r2, #4294967295
    f204:	4658      	mov	r0, fp
    f206:	f009 fa59 	bl	186bc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    f20a:	f8d5 30f8 	ldr.w	r3, [r5, #248]	; 0xf8
    f20e:	b153      	cbz	r3, f226 <hci_tx_thread+0xc2>
		BT_ERR("Uncleared pending sent_cmd");
    f210:	2145      	movs	r1, #69	; 0x45
    f212:	4825      	ldr	r0, [pc, #148]	; (f2a8 <hci_tx_thread+0x144>)
    f214:	f00a fbeb 	bl	199ee <printk>
		net_buf_unref(bt_dev.sent_cmd);
    f218:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    f21c:	f005 fb74 	bl	14908 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    f220:	2300      	movs	r3, #0
    f222:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    f226:	4620      	mov	r0, r4
    f228:	f005 fbb2 	bl	14990 <net_buf_ref>
    f22c:	f8c5 00f8 	str.w	r0, [r5, #248]	; 0xf8
	err = bt_send(buf);
    f230:	4620      	mov	r0, r4
    f232:	f7ff fdd5 	bl	ede0 <bt_send>
	if (err) {
    f236:	4602      	mov	r2, r0
    f238:	b1e0      	cbz	r0, f274 <hci_tx_thread+0x110>
		BT_ERR("Unable to send to driver (err %d)", err);
    f23a:	2145      	movs	r1, #69	; 0x45
    f23c:	481b      	ldr	r0, [pc, #108]	; (f2ac <hci_tx_thread+0x148>)
    f23e:	f00a fbd6 	bl	199ee <printk>
	z_impl_k_sem_give(sem);
    f242:	481b      	ldr	r0, [pc, #108]	; (f2b0 <hci_tx_thread+0x14c>)
    f244:	f009 f9fe 	bl	18644 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    f248:	4620      	mov	r0, r4
    f24a:	f005 f9e5 	bl	14618 <net_buf_id>
    f24e:	220c      	movs	r2, #12
    f250:	4b18      	ldr	r3, [pc, #96]	; (f2b4 <hci_tx_thread+0x150>)
    f252:	211f      	movs	r1, #31
    f254:	fb02 3000 	mla	r0, r2, r0, r3
    f258:	4622      	mov	r2, r4
    f25a:	8840      	ldrh	r0, [r0, #2]
    f25c:	f7fe ff20 	bl	e0a0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    f260:	f8d5 00f8 	ldr.w	r0, [r5, #248]	; 0xf8
    f264:	f005 fb50 	bl	14908 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    f268:	2300      	movs	r3, #0
		net_buf_unref(buf);
    f26a:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    f26c:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
		net_buf_unref(buf);
    f270:	f005 fb4a 	bl	14908 <net_buf_unref>
	for (; count; ev++, count--) {
    f274:	3714      	adds	r7, #20
    f276:	3e01      	subs	r6, #1
    f278:	e79f      	b.n	f1ba <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    f27a:	2b01      	cmp	r3, #1
    f27c:	d1fa      	bne.n	f274 <hci_tx_thread+0x110>
					conn = CONTAINER_OF(ev->fifo,
    f27e:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
    f280:	3834      	subs	r0, #52	; 0x34
    f282:	f001 febb 	bl	10ffc <bt_conn_process_tx>
    f286:	e7f5      	b.n	f274 <hci_tx_thread+0x110>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    f288:	2157      	movs	r1, #87	; 0x57
    f28a:	480b      	ldr	r0, [pc, #44]	; (f2b8 <hci_tx_thread+0x154>)
    f28c:	f00a fbaf 	bl	199ee <printk>
    f290:	e7f0      	b.n	f274 <hci_tx_thread+0x110>
    f292:	bf00      	nop
    f294:	20008338 	.word	0x20008338
    f298:	0001fdca 	.word	0x0001fdca
    f29c:	0001ead7 	.word	0x0001ead7
    f2a0:	20008000 	.word	0x20008000
    f2a4:	20008118 	.word	0x20008118
    f2a8:	000200f4 	.word	0x000200f4
    f2ac:	0001ffe7 	.word	0x0001ffe7
    f2b0:	200080e0 	.word	0x200080e0
    f2b4:	2000a940 	.word	0x2000a940
    f2b8:	00020114 	.word	0x00020114

0000f2bc <hci_event_prio>:
{
    f2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2c0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    f2c2:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    f2c6:	4630      	mov	r0, r6
    f2c8:	f00d f8c7 	bl	1c45a <net_buf_simple_headroom>
	state->len = buf->len;
    f2cc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    f2d0:	4605      	mov	r5, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    f2d2:	f1b8 0f01 	cmp.w	r8, #1
    f2d6:	d80b      	bhi.n	f2f0 <hci_event_prio+0x34>
    f2d8:	f641 02ae 	movw	r2, #6318	; 0x18ae
    f2dc:	491a      	ldr	r1, [pc, #104]	; (f348 <hci_event_prio+0x8c>)
    f2de:	481b      	ldr	r0, [pc, #108]	; (f34c <hci_event_prio+0x90>)
    f2e0:	f00a fb85 	bl	199ee <printk>
    f2e4:	4040      	eors	r0, r0
    f2e6:	f380 8811 	msr	BASEPRI, r0
    f2ea:	f04f 0003 	mov.w	r0, #3
    f2ee:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    f2f0:	4630      	mov	r0, r6
    f2f2:	2102      	movs	r1, #2
    f2f4:	f005 fc00 	bl	14af8 <net_buf_simple_pull_mem>
    f2f8:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f2fa:	7800      	ldrb	r0, [r0, #0]
    f2fc:	f00b fe83 	bl	1b006 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    f300:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f302:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    f304:	d40b      	bmi.n	f31e <hci_event_prio+0x62>
    f306:	f641 02b2 	movw	r2, #6322	; 0x18b2
    f30a:	490f      	ldr	r1, [pc, #60]	; (f348 <hci_event_prio+0x8c>)
    f30c:	480f      	ldr	r0, [pc, #60]	; (f34c <hci_event_prio+0x90>)
    f30e:	f00a fb6e 	bl	199ee <printk>
    f312:	4040      	eors	r0, r0
    f314:	f380 8811 	msr	BASEPRI, r0
    f318:	f04f 0003 	mov.w	r0, #3
    f31c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    f31e:	2305      	movs	r3, #5
    f320:	4621      	mov	r1, r4
    f322:	4a0b      	ldr	r2, [pc, #44]	; (f350 <hci_event_prio+0x94>)
    f324:	7838      	ldrb	r0, [r7, #0]
    f326:	f7fe fdb3 	bl	de90 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    f32a:	07b3      	lsls	r3, r6, #30
    f32c:	d507      	bpl.n	f33e <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
    f32e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    f330:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    f334:	fa10 f585 	uxtah	r5, r0, r5
    f338:	60a5      	str	r5, [r4, #8]
}
    f33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    f33e:	4620      	mov	r0, r4
}
    f340:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    f344:	f005 bae0 	b.w	14908 <net_buf_unref>
    f348:	0001fdca 	.word	0x0001fdca
    f34c:	0001ead7 	.word	0x0001ead7
    f350:	0001dd60 	.word	0x0001dd60

0000f354 <bt_recv>:
{
    f354:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    f356:	7d02      	ldrb	r2, [r0, #20]
    f358:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
    f35a:	2a01      	cmp	r2, #1
    f35c:	d007      	beq.n	f36e <bt_recv+0x1a>
    f35e:	2a03      	cmp	r2, #3
    f360:	d113      	bne.n	f38a <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
    f362:	480f      	ldr	r0, [pc, #60]	; (f3a0 <bt_recv+0x4c>)
    f364:	4629      	mov	r1, r5
    f366:	f005 faa1 	bl	148ac <net_buf_put>
		return 0;
    f36a:	2000      	movs	r0, #0
    f36c:	e00c      	b.n	f388 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f36e:	6883      	ldr	r3, [r0, #8]
    f370:	7818      	ldrb	r0, [r3, #0]
    f372:	f00b fe48 	bl	1b006 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    f376:	07c3      	lsls	r3, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
    f378:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
    f37a:	d502      	bpl.n	f382 <bt_recv+0x2e>
			hci_event_prio(buf);
    f37c:	4628      	mov	r0, r5
    f37e:	f7ff ff9d 	bl	f2bc <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    f382:	f014 0002 	ands.w	r0, r4, #2
    f386:	d1ec      	bne.n	f362 <bt_recv+0xe>
}
    f388:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    f38a:	2145      	movs	r1, #69	; 0x45
    f38c:	4805      	ldr	r0, [pc, #20]	; (f3a4 <bt_recv+0x50>)
    f38e:	f00a fb2e 	bl	199ee <printk>
		net_buf_unref(buf);
    f392:	4628      	mov	r0, r5
    f394:	f005 fab8 	bl	14908 <net_buf_unref>
		return -EINVAL;
    f398:	f06f 0015 	mvn.w	r0, #21
    f39c:	e7f4      	b.n	f388 <bt_recv+0x34>
    f39e:	bf00      	nop
    f3a0:	200080fc 	.word	0x200080fc
    f3a4:	0002013a 	.word	0x0002013a

0000f3a8 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    f3a8:	4a08      	ldr	r2, [pc, #32]	; (f3cc <bt_hci_driver_register+0x24>)
{
    f3aa:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    f3ac:	f8d2 0134 	ldr.w	r0, [r2, #308]	; 0x134
    f3b0:	b930      	cbnz	r0, f3c0 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    f3b2:	68d9      	ldr	r1, [r3, #12]
    f3b4:	b139      	cbz	r1, f3c6 <bt_hci_driver_register+0x1e>
    f3b6:	6919      	ldr	r1, [r3, #16]
    f3b8:	b129      	cbz	r1, f3c6 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    f3ba:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	return 0;
    f3be:	4770      	bx	lr
		return -EALREADY;
    f3c0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    f3c4:	4770      	bx	lr
		return -EINVAL;
    f3c6:	f06f 0015 	mvn.w	r0, #21
}
    f3ca:	4770      	bx	lr
    f3cc:	20008000 	.word	0x20008000

0000f3d0 <bt_finalize_init>:
{
    f3d0:	b508      	push	{r3, lr}
    f3d2:	2102      	movs	r1, #2
    f3d4:	4803      	ldr	r0, [pc, #12]	; (f3e4 <bt_finalize_init+0x14>)
    f3d6:	f00b fe3d 	bl	1b054 <atomic_or>
}
    f3da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    f3de:	2000      	movs	r0, #0
    f3e0:	f7ff bb68 	b.w	eab4 <bt_le_scan_update>
    f3e4:	20008094 	.word	0x20008094

0000f3e8 <bt_init>:
{
    f3e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    f3ea:	4d60      	ldr	r5, [pc, #384]	; (f56c <bt_init+0x184>)
    f3ec:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    f3f0:	6899      	ldr	r1, [r3, #8]
    f3f2:	f011 0101 	ands.w	r1, r1, #1
    f3f6:	d11e      	bne.n	f436 <bt_init+0x4e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    f3f8:	f640 4003 	movw	r0, #3075	; 0xc03
    f3fc:	aa01      	add	r2, sp, #4
    f3fe:	f7fe fffb 	bl	e3f8 <bt_hci_cmd_send_sync>
		if (err) {
    f402:	4604      	mov	r4, r0
    f404:	2800      	cmp	r0, #0
    f406:	f040 80ad 	bne.w	f564 <bt_init+0x17c>
	uint8_t status = buf->data[0];
    f40a:	9b01      	ldr	r3, [sp, #4]
    f40c:	689b      	ldr	r3, [r3, #8]
	if (status) {
    f40e:	781b      	ldrb	r3, [r3, #0]
    f410:	b973      	cbnz	r3, f430 <bt_init+0x48>
	scan_dev_found_cb = NULL;
    f412:	4a57      	ldr	r2, [pc, #348]	; (f570 <bt_init+0x188>)
    f414:	6013      	str	r3, [r2, #0]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    f416:	f105 0394 	add.w	r3, r5, #148	; 0x94
    f41a:	4618      	mov	r0, r3
    f41c:	f00b fe14 	bl	1b048 <atomic_get>
    f420:	f000 0005 	and.w	r0, r0, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    f424:	e8d3 2fef 	ldaex	r2, [r3]
    f428:	e8c3 0fe1 	stlex	r1, r0, [r3]
    f42c:	2900      	cmp	r1, #0
    f42e:	d1f9      	bne.n	f424 <bt_init+0x3c>
		net_buf_unref(rsp);
    f430:	9801      	ldr	r0, [sp, #4]
    f432:	f005 fa69 	bl	14908 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    f436:	2100      	movs	r1, #0
    f438:	f241 0003 	movw	r0, #4099	; 0x1003
    f43c:	aa01      	add	r2, sp, #4
    f43e:	f7fe ffdb 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    f442:	4604      	mov	r4, r0
    f444:	2800      	cmp	r0, #0
    f446:	f040 808d 	bne.w	f564 <bt_init+0x17c>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    f44a:	9b01      	ldr	r3, [sp, #4]
    f44c:	2208      	movs	r2, #8
    f44e:	6899      	ldr	r1, [r3, #8]
    f450:	4848      	ldr	r0, [pc, #288]	; (f574 <bt_init+0x18c>)
    f452:	3101      	adds	r1, #1
    f454:	f00b fd0b 	bl	1ae6e <memcpy>
	net_buf_unref(rsp);
    f458:	9801      	ldr	r0, [sp, #4]
    f45a:	f005 fa55 	bl	14908 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    f45e:	4621      	mov	r1, r4
    f460:	f241 0001 	movw	r0, #4097	; 0x1001
    f464:	aa01      	add	r2, sp, #4
    f466:	f7fe ffc7 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    f46a:	4604      	mov	r4, r0
    f46c:	2800      	cmp	r0, #0
    f46e:	d179      	bne.n	f564 <bt_init+0x17c>
	read_local_ver_complete(rsp);
    f470:	9801      	ldr	r0, [sp, #4]
    f472:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    f474:	785a      	ldrb	r2, [r3, #1]
    f476:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    f47a:	78d9      	ldrb	r1, [r3, #3]
    f47c:	789a      	ldrb	r2, [r3, #2]
    f47e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f482:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    f484:	791a      	ldrb	r2, [r3, #4]
    f486:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    f48a:	7a19      	ldrb	r1, [r3, #8]
    f48c:	79da      	ldrb	r2, [r3, #7]
    f48e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f492:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    f494:	795a      	ldrb	r2, [r3, #5]
    f496:	799b      	ldrb	r3, [r3, #6]
    f498:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    f49c:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    f49e:	f005 fa33 	bl	14908 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    f4a2:	4621      	mov	r1, r4
    f4a4:	f241 0002 	movw	r0, #4098	; 0x1002
    f4a8:	aa01      	add	r2, sp, #4
    f4aa:	f7fe ffa5 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    f4ae:	4604      	mov	r4, r0
    f4b0:	2800      	cmp	r0, #0
    f4b2:	d157      	bne.n	f564 <bt_init+0x17c>
	memcpy(bt_dev.supported_commands, rp->commands,
    f4b4:	9b01      	ldr	r3, [sp, #4]
    f4b6:	2240      	movs	r2, #64	; 0x40
    f4b8:	6899      	ldr	r1, [r3, #8]
    f4ba:	482f      	ldr	r0, [pc, #188]	; (f578 <bt_init+0x190>)
    f4bc:	3101      	adds	r1, #1
    f4be:	f00b fcd6 	bl	1ae6e <memcpy>
	net_buf_unref(rsp);
    f4c2:	9801      	ldr	r0, [sp, #4]
    f4c4:	f005 fa20 	bl	14908 <net_buf_unref>
		err = prng_init();
    f4c8:	f000 fed6 	bl	10278 <prng_init>
		if (err) {
    f4cc:	4604      	mov	r4, r0
    f4ce:	2800      	cmp	r0, #0
    f4d0:	d148      	bne.n	f564 <bt_init+0x17c>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
    f4d2:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
    f4d6:	069f      	lsls	r7, r3, #26
    f4d8:	d40e      	bmi.n	f4f8 <bt_init+0x110>
		BT_WARN("Controller to host flow control not supported");
    f4da:	2157      	movs	r1, #87	; 0x57
    f4dc:	4827      	ldr	r0, [pc, #156]	; (f57c <bt_init+0x194>)
    f4de:	f00a fa86 	bl	199ee <printk>
	if (!BT_FEAT_LE(bt_dev.features)) {
    f4e2:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    f4e6:	065e      	lsls	r6, r3, #25
    f4e8:	d44c      	bmi.n	f584 <bt_init+0x19c>
		BT_ERR("Non-LE capable controller detected!");
    f4ea:	2145      	movs	r1, #69	; 0x45
    f4ec:	4824      	ldr	r0, [pc, #144]	; (f580 <bt_init+0x198>)
    f4ee:	f00a fa7e 	bl	199ee <printk>
		return -ENODEV;
    f4f2:	f06f 0412 	mvn.w	r4, #18
    f4f6:	e035      	b.n	f564 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
    f4f8:	2107      	movs	r1, #7
    f4fa:	f640 4033 	movw	r0, #3123	; 0xc33
    f4fe:	f7fe ff31 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
    f502:	4607      	mov	r7, r0
    f504:	b910      	cbnz	r0, f50c <bt_init+0x124>
		return -ENOBUFS;
    f506:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f50a:	e02b      	b.n	f564 <bt_init+0x17c>
	return net_buf_simple_add(&buf->b, len);
    f50c:	2107      	movs	r1, #7
    f50e:	3008      	adds	r0, #8
    f510:	f005 fb10 	bl	14b34 <net_buf_simple_add>
	(void)memset(hbs, 0, sizeof(*hbs));
    f514:	4621      	mov	r1, r4
    f516:	2207      	movs	r2, #7
    f518:	4606      	mov	r6, r0
    f51a:	f00b fcd3 	bl	1aec4 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    f51e:	231b      	movs	r3, #27
    f520:	7033      	strb	r3, [r6, #0]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    f522:	2306      	movs	r3, #6
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f524:	4622      	mov	r2, r4
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_L2CAP_RX_MTU +
    f526:	7074      	strb	r4, [r6, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    f528:	7134      	strb	r4, [r6, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f52a:	4639      	mov	r1, r7
    f52c:	f640 4033 	movw	r0, #3123	; 0xc33
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_ACL_RX_COUNT);
    f530:	70f3      	strb	r3, [r6, #3]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
    f532:	f7fe ff61 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    f536:	4604      	mov	r4, r0
    f538:	b9a0      	cbnz	r0, f564 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
    f53a:	2101      	movs	r1, #1
    f53c:	f640 4031 	movw	r0, #3121	; 0xc31
    f540:	f7fe ff10 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
    f544:	4606      	mov	r6, r0
    f546:	2800      	cmp	r0, #0
    f548:	d0dd      	beq.n	f506 <bt_init+0x11e>
	return net_buf_simple_add_u8(&buf->b, val);
    f54a:	2101      	movs	r1, #1
    f54c:	3008      	adds	r0, #8
    f54e:	f00c ff9c 	bl	1c48a <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
    f552:	4622      	mov	r2, r4
    f554:	4631      	mov	r1, r6
    f556:	f640 4031 	movw	r0, #3121	; 0xc31
    f55a:	f7fe ff4d 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    f55e:	4604      	mov	r4, r0
    f560:	2800      	cmp	r0, #0
    f562:	d0be      	beq.n	f4e2 <bt_init+0xfa>
}
    f564:	4620      	mov	r0, r4
    f566:	b003      	add	sp, #12
    f568:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f56a:	bf00      	nop
    f56c:	20008000 	.word	0x20008000
    f570:	2000a964 	.word	0x2000a964
    f574:	2000803c 	.word	0x2000803c
    f578:	20008044 	.word	0x20008044
    f57c:	00020153 	.word	0x00020153
    f580:	00020186 	.word	0x00020186
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    f584:	2100      	movs	r1, #0
    f586:	f242 0003 	movw	r0, #8195	; 0x2003
    f58a:	aa01      	add	r2, sp, #4
    f58c:	f7fe ff34 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    f590:	4604      	mov	r4, r0
    f592:	2800      	cmp	r0, #0
    f594:	d1e6      	bne.n	f564 <bt_init+0x17c>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    f596:	9b01      	ldr	r3, [sp, #4]
    f598:	2208      	movs	r2, #8
    f59a:	6899      	ldr	r1, [r3, #8]
    f59c:	48a6      	ldr	r0, [pc, #664]	; (f838 <bt_init+0x450>)
    f59e:	3101      	adds	r1, #1
    f5a0:	f00b fc65 	bl	1ae6e <memcpy>
	net_buf_unref(rsp);
    f5a4:	9801      	ldr	r0, [sp, #4]
    f5a6:	f005 f9af 	bl	14908 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    f5aa:	4621      	mov	r1, r4
    f5ac:	f242 0002 	movw	r0, #8194	; 0x2002
    f5b0:	aa01      	add	r2, sp, #4
    f5b2:	f7fe ff21 	bl	e3f8 <bt_hci_cmd_send_sync>
		if (err) {
    f5b6:	4604      	mov	r4, r0
    f5b8:	2800      	cmp	r0, #0
    f5ba:	d1d3      	bne.n	f564 <bt_init+0x17c>
		le_read_buffer_size_complete(rsp);
    f5bc:	9b01      	ldr	r3, [sp, #4]
    f5be:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    f5c0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    f5c4:	b291      	uxth	r1, r2
    f5c6:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	if (!bt_dev.le.acl_mtu) {
    f5ca:	b121      	cbz	r1, f5d6 <bt_init+0x1ee>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    f5cc:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    f5ce:	489b      	ldr	r0, [pc, #620]	; (f83c <bt_init+0x454>)
    f5d0:	4611      	mov	r1, r2
    f5d2:	f00d fde1 	bl	1d198 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    f5d6:	9801      	ldr	r0, [sp, #4]
    f5d8:	f005 f996 	bl	14908 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f5dc:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    f5e0:	f016 0620 	ands.w	r6, r6, #32
    f5e4:	f000 80d4 	beq.w	f790 <bt_init+0x3a8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    f5e8:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    f5ec:	071c      	lsls	r4, r3, #28
    f5ee:	d512      	bpl.n	f616 <bt_init+0x22e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    f5f0:	2100      	movs	r1, #0
    f5f2:	f242 001c 	movw	r0, #8220	; 0x201c
    f5f6:	aa01      	add	r2, sp, #4
    f5f8:	f7fe fefe 	bl	e3f8 <bt_hci_cmd_send_sync>
		if (err) {
    f5fc:	4604      	mov	r4, r0
    f5fe:	2800      	cmp	r0, #0
    f600:	d1b0      	bne.n	f564 <bt_init+0x17c>
		le_read_supp_states_complete(rsp);
    f602:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    f604:	6883      	ldr	r3, [r0, #8]
    f606:	f8d3 2001 	ldr.w	r2, [r3, #1]
    f60a:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    f60e:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    f612:	f005 f979 	bl	14908 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    f616:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    f61a:	0698      	lsls	r0, r3, #26
    f61c:	d524      	bpl.n	f668 <bt_init+0x280>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    f61e:	4668      	mov	r0, sp
    f620:	f10d 0102 	add.w	r1, sp, #2
    f624:	f7fe ff4a 	bl	e4bc <hci_le_read_max_data_len>
		if (err) {
    f628:	4604      	mov	r4, r0
    f62a:	2800      	cmp	r0, #0
    f62c:	d19a      	bne.n	f564 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f62e:	2104      	movs	r1, #4
    f630:	f242 0024 	movw	r0, #8228	; 0x2024
    f634:	f7fe fe96 	bl	e364 <bt_hci_cmd_create>
		if (!buf) {
    f638:	4606      	mov	r6, r0
    f63a:	2800      	cmp	r0, #0
    f63c:	f43f af63 	beq.w	f506 <bt_init+0x11e>
	return net_buf_simple_add(&buf->b, len);
    f640:	2104      	movs	r1, #4
    f642:	3008      	adds	r0, #8
    f644:	f005 fa76 	bl	14b34 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f648:	f8bd 3000 	ldrh.w	r3, [sp]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f64c:	4622      	mov	r2, r4
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    f64e:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    f650:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f654:	4631      	mov	r1, r6
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    f656:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    f658:	f242 0024 	movw	r0, #8228	; 0x2024
    f65c:	f7fe fecc 	bl	e3f8 <bt_hci_cmd_send_sync>
		if (err) {
    f660:	4604      	mov	r4, r0
    f662:	2800      	cmp	r0, #0
    f664:	f47f af7e 	bne.w	f564 <bt_init+0x17c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    f668:	2108      	movs	r1, #8
    f66a:	f242 0001 	movw	r0, #8193	; 0x2001
    f66e:	f7fe fe79 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
    f672:	4604      	mov	r4, r0
    f674:	2800      	cmp	r0, #0
    f676:	f43f af46 	beq.w	f506 <bt_init+0x11e>
    f67a:	2108      	movs	r1, #8
    f67c:	4408      	add	r0, r1
    f67e:	f005 fa59 	bl	14b34 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    f682:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    f686:	f012 0f02 	tst.w	r2, #2
    f68a:	bf14      	ite	ne
    f68c:	232f      	movne	r3, #47	; 0x2f
    f68e:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    f690:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f692:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    f696:	bf48      	it	mi
    f698:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    f69c:	f012 0f09 	tst.w	r2, #9
	dst[0] = val;
    f6a0:	f04f 0200 	mov.w	r2, #0
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    f6a4:	bf18      	it	ne
    f6a6:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
    f6aa:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    f6ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    f6b0:	4621      	mov	r1, r4
    f6b2:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    f6b4:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    f6b6:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    f6b8:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    f6ba:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    f6bc:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    f6be:	71c2      	strb	r2, [r0, #7]
    f6c0:	f242 0001 	movw	r0, #8193	; 0x2001
    f6c4:	f7fe fe98 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    f6c8:	4604      	mov	r4, r0
    f6ca:	2800      	cmp	r0, #0
    f6cc:	f47f af4a 	bne.w	f564 <bt_init+0x17c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    f6d0:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    f6d4:	069a      	lsls	r2, r3, #26
    f6d6:	d41e      	bmi.n	f716 <bt_init+0x32e>
	if (bt_dev.le.acl_mtu) {
    f6d8:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    f6dc:	b9d9      	cbnz	r1, f716 <bt_init+0x32e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    f6de:	f241 0005 	movw	r0, #4101	; 0x1005
    f6e2:	aa01      	add	r2, sp, #4
    f6e4:	f7fe fe88 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    f6e8:	4604      	mov	r4, r0
    f6ea:	2800      	cmp	r0, #0
    f6ec:	f47f af3a 	bne.w	f564 <bt_init+0x17c>
	if (bt_dev.le.acl_mtu) {
    f6f0:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    f6f4:	b963      	cbnz	r3, f710 <bt_init+0x328>
    f6f6:	9b01      	ldr	r3, [sp, #4]
    f6f8:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    f6fa:	785a      	ldrb	r2, [r3, #1]
    f6fc:	7899      	ldrb	r1, [r3, #2]
    f6fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    f702:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    f706:	889a      	ldrh	r2, [r3, #4]
    f708:	484c      	ldr	r0, [pc, #304]	; (f83c <bt_init+0x454>)
    f70a:	4611      	mov	r1, r2
    f70c:	f00d fd44 	bl	1d198 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    f710:	9801      	ldr	r0, [sp, #4]
    f712:	f005 f8f9 	bl	14908 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    f716:	2108      	movs	r1, #8
    f718:	f640 4001 	movw	r0, #3073	; 0xc01
    f71c:	f7fe fe22 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
    f720:	4604      	mov	r4, r0
    f722:	2800      	cmp	r0, #0
    f724:	f43f aeef 	beq.w	f506 <bt_init+0x11e>
    f728:	2108      	movs	r1, #8
    f72a:	4408      	add	r0, r1
    f72c:	f005 fa02 	bl	14b34 <net_buf_simple_add>
	dst[0] = val;
    f730:	2310      	movs	r3, #16
    f732:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    f734:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
    f736:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    f738:	7043      	strb	r3, [r0, #1]
    f73a:	2602      	movs	r6, #2
    f73c:	2320      	movs	r3, #32
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    f73e:	4621      	mov	r1, r4
	dst[0] = val;
    f740:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    f742:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
    f744:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    f746:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    f748:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    f74a:	71c3      	strb	r3, [r0, #7]
    f74c:	f640 4001 	movw	r0, #3073	; 0xc01
    f750:	f7fe fe52 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    f754:	4604      	mov	r4, r0
    f756:	2800      	cmp	r0, #0
    f758:	f47f af04 	bne.w	f564 <bt_init+0x17c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    f75c:	4601      	mov	r1, r0
    f75e:	aa01      	add	r2, sp, #4
    f760:	f64f 4001 	movw	r0, #64513	; 0xfc01
    f764:	f7fe fe48 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    f768:	4604      	mov	r4, r0
    f76a:	b360      	cbz	r0, f7c6 <bt_init+0x3de>
		BT_WARN("Vendor HCI extensions not available");
    f76c:	2157      	movs	r1, #87	; 0x57
    f76e:	4834      	ldr	r0, [pc, #208]	; (f840 <bt_init+0x458>)
			BT_WARN("Failed to read supported vendor features");
    f770:	f00a f93d 	bl	199ee <printk>
		err = bt_conn_init();
    f774:	f001 fcd0 	bl	11118 <bt_conn_init>
		if (err) {
    f778:	4604      	mov	r4, r0
    f77a:	2800      	cmp	r0, #0
    f77c:	f47f aef2 	bne.w	f564 <bt_init+0x17c>
		if (!bt_dev.id_count) {
    f780:	79eb      	ldrb	r3, [r5, #7]
    f782:	2b00      	cmp	r3, #0
    f784:	d150      	bne.n	f828 <bt_init+0x440>
			BT_INFO("No ID address. App must call settings_load()");
    f786:	2149      	movs	r1, #73	; 0x49
    f788:	482e      	ldr	r0, [pc, #184]	; (f844 <bt_init+0x45c>)
    f78a:	f00a f930 	bl	199ee <printk>
			return 0;
    f78e:	e6e9      	b.n	f564 <bt_init+0x17c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    f790:	2102      	movs	r1, #2
    f792:	f640 406d 	movw	r0, #3181	; 0xc6d
    f796:	f7fe fde5 	bl	e364 <bt_hci_cmd_create>
		if (!buf) {
    f79a:	4604      	mov	r4, r0
    f79c:	2800      	cmp	r0, #0
    f79e:	f43f aeb2 	beq.w	f506 <bt_init+0x11e>
    f7a2:	2102      	movs	r1, #2
    f7a4:	3008      	adds	r0, #8
    f7a6:	f005 f9c5 	bl	14b34 <net_buf_simple_add>
		cp_le->le = 0x01;
    f7aa:	2301      	movs	r3, #1
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f7ac:	4621      	mov	r1, r4
		cp_le->le = 0x01;
    f7ae:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    f7b0:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    f7b2:	4632      	mov	r2, r6
    f7b4:	f640 406d 	movw	r0, #3181	; 0xc6d
    f7b8:	f7fe fe1e 	bl	e3f8 <bt_hci_cmd_send_sync>
		if (err) {
    f7bc:	4604      	mov	r4, r0
    f7be:	2800      	cmp	r0, #0
    f7c0:	f43f af12 	beq.w	f5e8 <bt_init+0x200>
    f7c4:	e6ce      	b.n	f564 <bt_init+0x17c>
	net_buf_unref(rsp);
    f7c6:	9801      	ldr	r0, [sp, #4]
    f7c8:	f005 f89e 	bl	14908 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    f7cc:	4621      	mov	r1, r4
    f7ce:	f64f 4002 	movw	r0, #64514	; 0xfc02
    f7d2:	aa01      	add	r2, sp, #4
    f7d4:	f7fe fe10 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    f7d8:	4604      	mov	r4, r0
    f7da:	b110      	cbz	r0, f7e2 <bt_init+0x3fa>
		BT_WARN("Failed to read supported vendor commands");
    f7dc:	2157      	movs	r1, #87	; 0x57
    f7de:	481a      	ldr	r0, [pc, #104]	; (f848 <bt_init+0x460>)
    f7e0:	e7c6      	b.n	f770 <bt_init+0x388>
	rp.cmds = (void *)rsp->data;
    f7e2:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    f7e4:	4632      	mov	r2, r6
    f7e6:	6899      	ldr	r1, [r3, #8]
    f7e8:	4818      	ldr	r0, [pc, #96]	; (f84c <bt_init+0x464>)
    f7ea:	3101      	adds	r1, #1
    f7ec:	f00b fb3f 	bl	1ae6e <memcpy>
	net_buf_unref(rsp);
    f7f0:	9801      	ldr	r0, [sp, #4]
    f7f2:	f005 f889 	bl	14908 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    f7f6:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    f7fa:	075b      	lsls	r3, r3, #29
    f7fc:	d5ba      	bpl.n	f774 <bt_init+0x38c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    f7fe:	4621      	mov	r1, r4
    f800:	f64f 4003 	movw	r0, #64515	; 0xfc03
    f804:	aa01      	add	r2, sp, #4
    f806:	f7fe fdf7 	bl	e3f8 <bt_hci_cmd_send_sync>
		if (err) {
    f80a:	b110      	cbz	r0, f812 <bt_init+0x42a>
			BT_WARN("Failed to read supported vendor features");
    f80c:	2157      	movs	r1, #87	; 0x57
    f80e:	4810      	ldr	r0, [pc, #64]	; (f850 <bt_init+0x468>)
    f810:	e7ae      	b.n	f770 <bt_init+0x388>
		memcpy(bt_dev.vs_features, rp.feat->features,
    f812:	2201      	movs	r2, #1
		rp.feat = (void *)rsp->data;
    f814:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    f816:	480f      	ldr	r0, [pc, #60]	; (f854 <bt_init+0x46c>)
    f818:	6899      	ldr	r1, [r3, #8]
    f81a:	4411      	add	r1, r2
    f81c:	f00b fb27 	bl	1ae6e <memcpy>
		net_buf_unref(rsp);
    f820:	9801      	ldr	r0, [sp, #4]
    f822:	f005 f871 	bl	14908 <net_buf_unref>
    f826:	e7a5      	b.n	f774 <bt_init+0x38c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    f828:	2104      	movs	r1, #4
    f82a:	480b      	ldr	r0, [pc, #44]	; (f858 <bt_init+0x470>)
    f82c:	f00b fc12 	bl	1b054 <atomic_or>
	bt_finalize_init();
    f830:	f7ff fdce 	bl	f3d0 <bt_finalize_init>
	return 0;
    f834:	e696      	b.n	f564 <bt_init+0x17c>
    f836:	bf00      	nop
    f838:	20008098 	.word	0x20008098
    f83c:	200080c8 	.word	0x200080c8
    f840:	000201af 	.word	0x000201af
    f844:	00020234 	.word	0x00020234
    f848:	000201d8 	.word	0x000201d8
    f84c:	20008085 	.word	0x20008085
    f850:	00020206 	.word	0x00020206
    f854:	20008084 	.word	0x20008084
    f858:	20008094 	.word	0x20008094

0000f85c <init_work>:
{
    f85c:	b510      	push	{r4, lr}
	err = bt_init();
    f85e:	f7ff fdc3 	bl	f3e8 <bt_init>
	if (ready_cb) {
    f862:	4b03      	ldr	r3, [pc, #12]	; (f870 <init_work+0x14>)
    f864:	681b      	ldr	r3, [r3, #0]
    f866:	b113      	cbz	r3, f86e <init_work+0x12>
}
    f868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    f86c:	4718      	bx	r3
}
    f86e:	bd10      	pop	{r4, pc}
    f870:	2000a958 	.word	0x2000a958

0000f874 <bt_enable>:
{
    f874:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	if (!bt_dev.drv) {
    f878:	4d35      	ldr	r5, [pc, #212]	; (f950 <bt_enable+0xdc>)
{
    f87a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    f87c:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
{
    f880:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
    f882:	b94b      	cbnz	r3, f898 <bt_enable+0x24>
		BT_ERR("No HCI driver registered");
    f884:	2145      	movs	r1, #69	; 0x45
    f886:	4833      	ldr	r0, [pc, #204]	; (f954 <bt_enable+0xe0>)
    f888:	f00a f8b1 	bl	199ee <printk>
		return -ENODEV;
    f88c:	f06f 0412 	mvn.w	r4, #18
}
    f890:	4620      	mov	r0, r4
    f892:	b008      	add	sp, #32
    f894:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    f898:	2101      	movs	r1, #1
    f89a:	f105 0094 	add.w	r0, r5, #148	; 0x94
    f89e:	f00b fbd9 	bl	1b054 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    f8a2:	07c2      	lsls	r2, r0, #31
    f8a4:	d451      	bmi.n	f94a <bt_enable+0xd6>
		err = bt_settings_init();
    f8a6:	f7fe f913 	bl	dad0 <bt_settings_init>
		if (err) {
    f8aa:	4604      	mov	r4, r0
    f8ac:	2800      	cmp	r0, #0
    f8ae:	d1ef      	bne.n	f890 <bt_enable+0x1c>
	ready_cb = cb;
    f8b0:	4b29      	ldr	r3, [pc, #164]	; (f958 <bt_enable+0xe4>)
    f8b2:	f04f 0800 	mov.w	r8, #0
    f8b6:	f04f 0900 	mov.w	r9, #0
    f8ba:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f8bc:	f06f 0308 	mvn.w	r3, #8
    f8c0:	e9cd 0000 	strd	r0, r0, [sp]
    f8c4:	e9cd 0302 	strd	r0, r3, [sp, #8]
    f8c8:	9004      	str	r0, [sp, #16]
    f8ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f8ce:	e9cd 8906 	strd	r8, r9, [sp, #24]
    f8d2:	4b22      	ldr	r3, [pc, #136]	; (f95c <bt_enable+0xe8>)
    f8d4:	4922      	ldr	r1, [pc, #136]	; (f960 <bt_enable+0xec>)
    f8d6:	4823      	ldr	r0, [pc, #140]	; (f964 <bt_enable+0xf0>)
    f8d8:	f008 ffdc 	bl	18894 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    f8dc:	4922      	ldr	r1, [pc, #136]	; (f968 <bt_enable+0xf4>)
    f8de:	4821      	ldr	r0, [pc, #132]	; (f964 <bt_enable+0xf0>)
    f8e0:	f00d fc74 	bl	1d1cc <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    f8e4:	f06f 0307 	mvn.w	r3, #7
    f8e8:	f640 0298 	movw	r2, #2200	; 0x898
    f8ec:	e9cd 4302 	strd	r4, r3, [sp, #8]
    f8f0:	e9cd 8906 	strd	r8, r9, [sp, #24]
    f8f4:	e9cd 4400 	strd	r4, r4, [sp]
    f8f8:	4b1c      	ldr	r3, [pc, #112]	; (f96c <bt_enable+0xf8>)
    f8fa:	491d      	ldr	r1, [pc, #116]	; (f970 <bt_enable+0xfc>)
    f8fc:	9404      	str	r4, [sp, #16]
    f8fe:	481d      	ldr	r0, [pc, #116]	; (f974 <bt_enable+0x100>)
    f900:	f008 ffc8 	bl	18894 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    f904:	491c      	ldr	r1, [pc, #112]	; (f978 <bt_enable+0x104>)
    f906:	481b      	ldr	r0, [pc, #108]	; (f974 <bt_enable+0x100>)
    f908:	f00d fc60 	bl	1d1cc <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    f90c:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
    f910:	68db      	ldr	r3, [r3, #12]
    f912:	4798      	blx	r3
	if (err) {
    f914:	4604      	mov	r4, r0
    f916:	b128      	cbz	r0, f924 <bt_enable+0xb0>
		BT_ERR("HCI driver open failed (%d)", err);
    f918:	4602      	mov	r2, r0
    f91a:	2145      	movs	r1, #69	; 0x45
    f91c:	4817      	ldr	r0, [pc, #92]	; (f97c <bt_enable+0x108>)
    f91e:	f00a f866 	bl	199ee <printk>
		return err;
    f922:	e7b5      	b.n	f890 <bt_enable+0x1c>
	if (!cb) {
    f924:	b926      	cbnz	r6, f930 <bt_enable+0xbc>
}
    f926:	b008      	add	sp, #32
    f928:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		return bt_init();
    f92c:	f7ff bd5c 	b.w	f3e8 <bt_init>
    f930:	2101      	movs	r1, #1
    f932:	f105 0090 	add.w	r0, r5, #144	; 0x90
    f936:	f00b fb8d 	bl	1b054 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    f93a:	07c3      	lsls	r3, r0, #31
    f93c:	d4a8      	bmi.n	f890 <bt_enable+0x1c>
		k_queue_append(&work_q->queue, work);
    f93e:	4810      	ldr	r0, [pc, #64]	; (f980 <bt_enable+0x10c>)
    f940:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f944:	f00d fbd0 	bl	1d0e8 <k_queue_append>
    f948:	e7a2      	b.n	f890 <bt_enable+0x1c>
		return -EALREADY;
    f94a:	f06f 0444 	mvn.w	r4, #68	; 0x44
    f94e:	e79f      	b.n	f890 <bt_enable+0x1c>
    f950:	20008000 	.word	0x20008000
    f954:	00020266 	.word	0x00020266
    f958:	2000a958 	.word	0x2000a958
    f95c:	0000f165 	.word	0x0000f165
    f960:	2000d6a8 	.word	0x2000d6a8
    f964:	20008990 	.word	0x20008990
    f968:	00020284 	.word	0x00020284
    f96c:	0000df7d 	.word	0x0000df7d
    f970:	2000ce10 	.word	0x2000ce10
    f974:	20008900 	.word	0x20008900
    f978:	0002028a 	.word	0x0002028a
    f97c:	00020290 	.word	0x00020290
    f980:	2000a3b0 	.word	0x2000a3b0

0000f984 <bt_get_name>:
}
    f984:	4800      	ldr	r0, [pc, #0]	; (f988 <bt_get_name+0x4>)
    f986:	4770      	bx	lr
    f988:	0001e926 	.word	0x0001e926

0000f98c <bt_id_create>:
{
    f98c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f98e:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    f990:	4605      	mov	r5, r0
    f992:	b918      	cbnz	r0, f99c <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    f994:	b314      	cbz	r4, f9dc <bt_id_create+0x50>
		return -EINVAL;
    f996:	f06f 0415 	mvn.w	r4, #21
    f99a:	e01c      	b.n	f9d6 <bt_id_create+0x4a>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    f99c:	2300      	movs	r3, #0
    f99e:	4669      	mov	r1, sp
    f9a0:	9300      	str	r3, [sp, #0]
    f9a2:	f8cd 3003 	str.w	r3, [sp, #3]
    f9a6:	f00b fb60 	bl	1b06a <bt_addr_le_cmp>
    f9aa:	2800      	cmp	r0, #0
    f9ac:	d0f2      	beq.n	f994 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    f9ae:	782b      	ldrb	r3, [r5, #0]
    f9b0:	2b01      	cmp	r3, #1
    f9b2:	d104      	bne.n	f9be <bt_id_create+0x32>
    f9b4:	79ab      	ldrb	r3, [r5, #6]
    f9b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    f9ba:	2bc0      	cmp	r3, #192	; 0xc0
    f9bc:	d004      	beq.n	f9c8 <bt_id_create+0x3c>
			BT_ERR("Only static random identity address supported");
    f9be:	2145      	movs	r1, #69	; 0x45
    f9c0:	480d      	ldr	r0, [pc, #52]	; (f9f8 <bt_id_create+0x6c>)
    f9c2:	f00a f814 	bl	199ee <printk>
			return -EINVAL;
    f9c6:	e7e6      	b.n	f996 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    f9c8:	4628      	mov	r0, r5
    f9ca:	f7fe f949 	bl	dc60 <id_find>
    f9ce:	2800      	cmp	r0, #0
    f9d0:	dbe0      	blt.n	f994 <bt_id_create+0x8>
			return -EALREADY;
    f9d2:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    f9d6:	4620      	mov	r0, r4
    f9d8:	b003      	add	sp, #12
    f9da:	bd30      	pop	{r4, r5, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    f9dc:	4b07      	ldr	r3, [pc, #28]	; (f9fc <bt_id_create+0x70>)
    f9de:	79dc      	ldrb	r4, [r3, #7]
    f9e0:	2c01      	cmp	r4, #1
    f9e2:	d006      	beq.n	f9f2 <bt_id_create+0x66>
	new_id = bt_dev.id_count++;
    f9e4:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
    f9e6:	4629      	mov	r1, r5
    f9e8:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    f9ea:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    f9ec:	f7fe fa90 	bl	df10 <id_create.constprop.0>
	return new_id;
    f9f0:	e7f1      	b.n	f9d6 <bt_id_create+0x4a>
		return -ENOMEM;
    f9f2:	f06f 040b 	mvn.w	r4, #11
    f9f6:	e7ee      	b.n	f9d6 <bt_id_create+0x4a>
    f9f8:	000202b1 	.word	0x000202b1
    f9fc:	20008000 	.word	0x20008000

0000fa00 <bt_setup_public_id_addr>:
{
    fa00:	b570      	push	{r4, r5, r6, lr}
    fa02:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    fa04:	2100      	movs	r1, #0
    fa06:	f241 0009 	movw	r0, #4105	; 0x1009
    fa0a:	aa01      	add	r2, sp, #4
    fa0c:	f7fe fcf4 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    fa10:	4e1d      	ldr	r6, [pc, #116]	; (fa88 <bt_setup_public_id_addr+0x88>)
    fa12:	4604      	mov	r4, r0
    fa14:	b138      	cbz	r0, fa26 <bt_setup_public_id_addr+0x26>
		BT_WARN("Failed to read public address");
    fa16:	2157      	movs	r1, #87	; 0x57
    fa18:	481c      	ldr	r0, [pc, #112]	; (fa8c <bt_setup_public_id_addr+0x8c>)
    fa1a:	f009 ffe8 	bl	199ee <printk>
	bt_dev.id_count = bt_read_public_addr(&addr);
    fa1e:	2300      	movs	r3, #0
    fa20:	71f3      	strb	r3, [r6, #7]
}
    fa22:	b006      	add	sp, #24
    fa24:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    fa26:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
    fa28:	2206      	movs	r2, #6
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    fa2a:	689d      	ldr	r5, [r3, #8]
    fa2c:	a904      	add	r1, sp, #16
    fa2e:	3501      	adds	r5, #1
    fa30:	9004      	str	r0, [sp, #16]
    fa32:	f8ad 0014 	strh.w	r0, [sp, #20]
    fa36:	4628      	mov	r0, r5
    fa38:	f00b fa08 	bl	1ae4c <memcmp>
    fa3c:	b918      	cbnz	r0, fa46 <bt_setup_public_id_addr+0x46>
		net_buf_unref(rsp);
    fa3e:	9801      	ldr	r0, [sp, #4]
    fa40:	f004 ff62 	bl	14908 <net_buf_unref>
    fa44:	e7eb      	b.n	fa1e <bt_setup_public_id_addr+0x1e>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    fa46:	4b12      	ldr	r3, [pc, #72]	; (fa90 <bt_setup_public_id_addr+0x90>)
    fa48:	2206      	movs	r2, #6
    fa4a:	f8d3 0007 	ldr.w	r0, [r3, #7]
    fa4e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
    fa52:	9002      	str	r0, [sp, #8]
    fa54:	a902      	add	r1, sp, #8
    fa56:	4628      	mov	r0, r5
    fa58:	f8ad 300c 	strh.w	r3, [sp, #12]
    fa5c:	f00b f9f6 	bl	1ae4c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    fa60:	2800      	cmp	r0, #0
    fa62:	d0ec      	beq.n	fa3e <bt_setup_public_id_addr+0x3e>
	memcpy(dst, src, sizeof(*dst));
    fa64:	4629      	mov	r1, r5
    fa66:	2206      	movs	r2, #6
    fa68:	f10d 0011 	add.w	r0, sp, #17
    fa6c:	f00b f9ff 	bl	1ae6e <memcpy>
	net_buf_unref(rsp);
    fa70:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    fa72:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    fa76:	f004 ff47 	bl	14908 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    fa7a:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    fa7c:	4620      	mov	r0, r4
    fa7e:	a904      	add	r1, sp, #16
	bt_dev.id_count = bt_read_public_addr(&addr);
    fa80:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    fa82:	f7fe fa45 	bl	df10 <id_create.constprop.0>
    fa86:	e7cc      	b.n	fa22 <bt_setup_public_id_addr+0x22>
    fa88:	20008000 	.word	0x20008000
    fa8c:	000202e4 	.word	0x000202e4
    fa90:	0001d8e0 	.word	0x0001d8e0

0000fa94 <bt_read_static_addr>:
{
    fa94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    fa98:	4b1c      	ldr	r3, [pc, #112]	; (fb0c <bt_read_static_addr+0x78>)
{
    fa9a:	4607      	mov	r7, r0
    fa9c:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    faa0:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    faa2:	f014 0401 	ands.w	r4, r4, #1
    faa6:	d104      	bne.n	fab2 <bt_read_static_addr+0x1e>
		BT_WARN("Read Static Addresses command not available");
    faa8:	2157      	movs	r1, #87	; 0x57
    faaa:	4819      	ldr	r0, [pc, #100]	; (fb10 <bt_read_static_addr+0x7c>)
		BT_WARN("No static addresses stored in controller");
    faac:	f009 ff9f 	bl	199ee <printk>
    fab0:	e00c      	b.n	facc <bt_read_static_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    fab2:	2100      	movs	r1, #0
    fab4:	f64f 4009 	movw	r0, #64521	; 0xfc09
    fab8:	aa01      	add	r2, sp, #4
    faba:	f7fe fc9d 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    fabe:	4605      	mov	r5, r0
    fac0:	b140      	cbz	r0, fad4 <bt_read_static_addr+0x40>
		BT_WARN("Failed to read static addresses");
    fac2:	2157      	movs	r1, #87	; 0x57
    fac4:	4813      	ldr	r0, [pc, #76]	; (fb14 <bt_read_static_addr+0x80>)
    fac6:	f009 ff92 	bl	199ee <printk>
		return 0;
    faca:	2400      	movs	r4, #0
}
    facc:	4620      	mov	r0, r4
    face:	b002      	add	sp, #8
    fad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    fad4:	f04f 0816 	mov.w	r8, #22
	rp = (void *)rsp->data;
    fad8:	9b01      	ldr	r3, [sp, #4]
    fada:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    fadc:	785c      	ldrb	r4, [r3, #1]
    fade:	42b4      	cmp	r4, r6
    fae0:	bf28      	it	cs
    fae2:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    fae4:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    fae6:	42a5      	cmp	r5, r4
    fae8:	db07      	blt.n	fafa <bt_read_static_addr+0x66>
	net_buf_unref(rsp);
    faea:	9801      	ldr	r0, [sp, #4]
    faec:	f004 ff0c 	bl	14908 <net_buf_unref>
	if (!cnt) {
    faf0:	2c00      	cmp	r4, #0
    faf2:	d1eb      	bne.n	facc <bt_read_static_addr+0x38>
		BT_WARN("No static addresses stored in controller");
    faf4:	2157      	movs	r1, #87	; 0x57
    faf6:	4808      	ldr	r0, [pc, #32]	; (fb18 <bt_read_static_addr+0x84>)
    faf8:	e7d8      	b.n	faac <bt_read_static_addr+0x18>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    fafa:	fb08 7005 	mla	r0, r8, r5, r7
    fafe:	2216      	movs	r2, #22
    fb00:	4631      	mov	r1, r6
    fb02:	f00b f9b4 	bl	1ae6e <memcpy>
	for (i = 0; i < cnt; i++) {
    fb06:	3501      	adds	r5, #1
    fb08:	e7ed      	b.n	fae6 <bt_read_static_addr+0x52>
    fb0a:	bf00      	nop
    fb0c:	20008000 	.word	0x20008000
    fb10:	00020307 	.word	0x00020307
    fb14:	00020338 	.word	0x00020338
    fb18:	0002035d 	.word	0x0002035d

0000fb1c <bt_setup_random_id_addr>:
{
    fb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.id_count) {
    fb1e:	4d15      	ldr	r5, [pc, #84]	; (fb74 <bt_setup_random_id_addr+0x58>)
{
    fb20:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    fb22:	79ec      	ldrb	r4, [r5, #7]
    fb24:	b9f4      	cbnz	r4, fb64 <bt_setup_random_id_addr+0x48>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    fb26:	2101      	movs	r1, #1
    fb28:	a802      	add	r0, sp, #8
    fb2a:	f7ff ffb3 	bl	fa94 <bt_read_static_addr>
    fb2e:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    fb30:	b1c0      	cbz	r0, fb64 <bt_setup_random_id_addr+0x48>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    fb32:	2716      	movs	r7, #22
    fb34:	b2e6      	uxtb	r6, r4
    fb36:	ab02      	add	r3, sp, #8
    fb38:	2206      	movs	r2, #6
    fb3a:	fb07 3106 	mla	r1, r7, r6, r3
    fb3e:	f10d 0001 	add.w	r0, sp, #1
    fb42:	f00b f994 	bl	1ae6e <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    fb46:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    fb48:	4669      	mov	r1, sp
    fb4a:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    fb4c:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    fb50:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
    fb52:	f7fe f9dd 	bl	df10 <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    fb56:	79ea      	ldrb	r2, [r5, #7]
    fb58:	b2e3      	uxtb	r3, r4
    fb5a:	429a      	cmp	r2, r3
    fb5c:	d8ea      	bhi.n	fb34 <bt_setup_random_id_addr+0x18>
}
    fb5e:	2000      	movs	r0, #0
    fb60:	b009      	add	sp, #36	; 0x24
    fb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    fb64:	2100      	movs	r1, #0
    fb66:	4608      	mov	r0, r1
}
    fb68:	b009      	add	sp, #36	; 0x24
    fb6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    fb6e:	f7ff bf0d 	b.w	f98c <bt_id_create>
    fb72:	bf00      	nop
    fb74:	20008000 	.word	0x20008000

0000fb78 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    fb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb7c:	469a      	mov	sl, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
    fb7e:	2300      	movs	r3, #0
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    fb80:	690d      	ldr	r5, [r1, #16]
{
    fb82:	b08f      	sub	sp, #60	; 0x3c
	bool dir_adv = (param->peer != NULL), scannable;
    fb84:	ebb5 0b03 	subs.w	fp, r5, r3
{
    fb88:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fb8a:	4884      	ldr	r0, [pc, #528]	; (fd9c <bt_le_adv_start_legacy+0x224>)
	bool dir_adv = (param->peer != NULL), scannable;
    fb8c:	bf18      	it	ne
    fb8e:	f04f 0b01 	movne.w	fp, #1
	struct bt_conn *conn = NULL;
    fb92:	9307      	str	r3, [sp, #28]
    fb94:	f00b fa58 	bl	1b048 <atomic_get>
{
    fb98:	4691      	mov	r9, r2
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fb9a:	0782      	lsls	r2, r0, #30
{
    fb9c:	460c      	mov	r4, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    fb9e:	f140 80ef 	bpl.w	fd80 <bt_le_adv_start_legacy+0x208>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    fba2:	4608      	mov	r0, r1
    fba4:	f7fe f874 	bl	dc90 <valid_adv_param>
    fba8:	4607      	mov	r7, r0
    fbaa:	2800      	cmp	r0, #0
    fbac:	f000 80eb 	beq.w	fd86 <bt_le_adv_start_legacy+0x20e>
    fbb0:	487a      	ldr	r0, [pc, #488]	; (fd9c <bt_le_adv_start_legacy+0x224>)
    fbb2:	f00b fa49 	bl	1b048 <atomic_get>
	if (!IS_ENABLED(CONFIG_BT_OBSERVER) ||
    fbb6:	0503      	lsls	r3, r0, #20
    fbb8:	d402      	bmi.n	fbc0 <bt_le_adv_start_legacy+0x48>
    fbba:	4878      	ldr	r0, [pc, #480]	; (fd9c <bt_le_adv_start_legacy+0x224>)
    fbbc:	f00b fa44 	bl	1b048 <atomic_get>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    fbc0:	f106 0810 	add.w	r8, r6, #16
    fbc4:	4640      	mov	r0, r8
    fbc6:	f00b fa3f 	bl	1b048 <atomic_get>
    fbca:	f3c0 1180 	ubfx	r1, r0, #6, #1
    fbce:	0640      	lsls	r0, r0, #25
    fbd0:	f100 80dc 	bmi.w	fd8c <bt_le_adv_start_legacy+0x214>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    fbd4:	220f      	movs	r2, #15
    fbd6:	a80a      	add	r0, sp, #40	; 0x28
    fbd8:	9105      	str	r1, [sp, #20]
    fbda:	f00b f973 	bl	1aec4 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    fbde:	68a3      	ldr	r3, [r4, #8]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    fbe0:	6860      	ldr	r0, [r4, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    fbe2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    fbe6:	68e3      	ldr	r3, [r4, #12]
    fbe8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    fbec:	f00b fa1d 	bl	1b02a <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    fbf0:	7832      	ldrb	r2, [r6, #0]
    fbf2:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    fbf4:	9905      	ldr	r1, [sp, #20]
	if (adv->id != param->id) {
    fbf6:	429a      	cmp	r2, r3
	set_param.channel_map  = get_adv_channel_map(param->options);
    fbf8:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	set_param.filter_policy = get_filter_policy(param->options);
    fbfc:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    fc00:	d004      	beq.n	fc0c <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fc02:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    fc06:	4865      	ldr	r0, [pc, #404]	; (fd9c <bt_le_adv_start_legacy+0x224>)
    fc08:	f00b fa32 	bl	1b070 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
    fc0c:	7820      	ldrb	r0, [r4, #0]
	bt_dev.adv_conn_id = adv->id;
    fc0e:	4b64      	ldr	r3, [pc, #400]	; (fda0 <bt_le_adv_start_legacy+0x228>)
	adv->id = param->id;
    fc10:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    fc12:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    fc16:	465a      	mov	r2, fp
    fc18:	6861      	ldr	r1, [r4, #4]
    fc1a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    fc1e:	f7fe fcd7 	bl	e5d0 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    fc22:	4683      	mov	fp, r0
    fc24:	2800      	cmp	r0, #0
    fc26:	d169      	bne.n	fcfc <bt_le_adv_start_legacy+0x184>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
    fc28:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    fc2c:	2d00      	cmp	r5, #0
    fc2e:	d042      	beq.n	fcb6 <bt_le_adv_start_legacy+0x13e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    fc30:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    fc32:	f00b fa0c 	bl	1b04e <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    fc36:	6860      	ldr	r0, [r4, #4]
    fc38:	07c1      	lsls	r1, r0, #31
    fc3a:	d544      	bpl.n	fcc6 <bt_le_adv_start_legacy+0x14e>
		scannable = true;

		if (dir_adv) {
    fc3c:	2d00      	cmp	r5, #0
    fc3e:	d03f      	beq.n	fcc0 <bt_le_adv_start_legacy+0x148>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    fc40:	f010 0f10 	tst.w	r0, #16
    fc44:	bf14      	ite	ne
    fc46:	2304      	movne	r3, #4
    fc48:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    fc4a:	6921      	ldr	r1, [r4, #16]
    fc4c:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    fc50:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    fc54:	f00b f9fb 	bl	1b04e <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    fc58:	210f      	movs	r1, #15
    fc5a:	f242 0006 	movw	r0, #8198	; 0x2006
    fc5e:	f7fe fb81 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
    fc62:	4683      	mov	fp, r0
    fc64:	2800      	cmp	r0, #0
    fc66:	f000 8094 	beq.w	fd92 <bt_le_adv_start_legacy+0x21a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    fc6a:	220f      	movs	r2, #15
    fc6c:	a90a      	add	r1, sp, #40	; 0x28
    fc6e:	3008      	adds	r0, #8
    fc70:	f00c fbff 	bl	1c472 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    fc74:	2200      	movs	r2, #0
    fc76:	4659      	mov	r1, fp
    fc78:	f242 0006 	movw	r0, #8198	; 0x2006
    fc7c:	f7fe fbbc 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (err) {
    fc80:	2800      	cmp	r0, #0
    fc82:	f040 8089 	bne.w	fd98 <bt_le_adv_start_legacy+0x220>
		return err;
	}

	if (!dir_adv) {
    fc86:	b34d      	cbz	r5, fcdc <bt_le_adv_start_legacy+0x164>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    fc88:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fc8a:	07da      	lsls	r2, r3, #31
    fc8c:	d43a      	bmi.n	fd04 <bt_le_adv_start_legacy+0x18c>
	return set_le_adv_enable_legacy(adv, enable);
    fc8e:	2101      	movs	r1, #1
    fc90:	4630      	mov	r0, r6
    fc92:	f7fe fdf7 	bl	e884 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    fc96:	4683      	mov	fp, r0
    fc98:	2800      	cmp	r0, #0
    fc9a:	d06a      	beq.n	fd72 <bt_le_adv_start_legacy+0x1fa>
		BT_ERR("Failed to start advertiser");
    fc9c:	4841      	ldr	r0, [pc, #260]	; (fda4 <bt_le_adv_start_legacy+0x22c>)
    fc9e:	2145      	movs	r1, #69	; 0x45
    fca0:	f009 fea5 	bl	199ee <printk>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    fca4:	9807      	ldr	r0, [sp, #28]
    fca6:	b348      	cbz	r0, fcfc <bt_le_adv_start_legacy+0x184>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fca8:	2100      	movs	r1, #0
    fcaa:	f000 fddb 	bl	10864 <bt_conn_set_state>
			bt_conn_unref(conn);
    fcae:	9807      	ldr	r0, [sp, #28]
    fcb0:	f000 fdac 	bl	1080c <bt_conn_unref>
    fcb4:	e022      	b.n	fcfc <bt_le_adv_start_legacy+0x184>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    fcb6:	9508      	str	r5, [sp, #32]
    fcb8:	a908      	add	r1, sp, #32
    fcba:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
    fcbe:	e7b8      	b.n	fc32 <bt_le_adv_start_legacy+0xba>
			set_param.type = BT_HCI_ADV_IND;
    fcc0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    fcc4:	e7c8      	b.n	fc58 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    fcc6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    fcc8:	b933      	cbnz	r3, fcd8 <bt_le_adv_start_legacy+0x160>
    fcca:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    fcce:	f1c7 0303 	rsb	r3, r7, #3
    fcd2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    fcd6:	e7bf      	b.n	fc58 <bt_le_adv_start_legacy+0xe0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    fcd8:	2701      	movs	r7, #1
    fcda:	e7f8      	b.n	fcce <bt_le_adv_start_legacy+0x156>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    fcdc:	6863      	ldr	r3, [r4, #4]
    fcde:	4652      	mov	r2, sl
    fce0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    fce4:	e9cd 7301 	strd	r7, r3, [sp, #4]
    fce8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    fcea:	4649      	mov	r1, r9
    fcec:	9300      	str	r3, [sp, #0]
    fcee:	4630      	mov	r0, r6
    fcf0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    fcf2:	f7fe fd53 	bl	e79c <le_adv_update.constprop.0>
		if (err) {
    fcf6:	4683      	mov	fp, r0
    fcf8:	2800      	cmp	r0, #0
    fcfa:	d0c5      	beq.n	fc88 <bt_le_adv_start_legacy+0x110>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    fcfc:	4658      	mov	r0, fp
    fcfe:	b00f      	add	sp, #60	; 0x3c
    fd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    fd04:	4630      	mov	r0, r6
    fd06:	a907      	add	r1, sp, #28
    fd08:	f7fe fad8 	bl	e2bc <le_adv_start_add_conn>
		if (err) {
    fd0c:	4683      	mov	fp, r0
    fd0e:	2800      	cmp	r0, #0
    fd10:	d0bd      	beq.n	fc8e <bt_le_adv_start_legacy+0x116>
			if (err == -ENOMEM && !dir_adv &&
    fd12:	f110 0f0c 	cmn.w	r0, #12
    fd16:	d1f1      	bne.n	fcfc <bt_le_adv_start_legacy+0x184>
    fd18:	2d00      	cmp	r5, #0
    fd1a:	d1ef      	bne.n	fcfc <bt_le_adv_start_legacy+0x184>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    fd1c:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    fd1e:	079b      	lsls	r3, r3, #30
    fd20:	d4ec      	bmi.n	fcfc <bt_le_adv_start_legacy+0x184>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    fd22:	6860      	ldr	r0, [r4, #4]
    fd24:	f080 0002 	eor.w	r0, r0, #2
    fd28:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    fd2c:	f00b 0201 	and.w	r2, fp, #1
    fd30:	210c      	movs	r1, #12
    fd32:	4640      	mov	r0, r8
    fd34:	f00b f9a7 	bl	1b086 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    fd38:	6862      	ldr	r2, [r4, #4]
    fd3a:	2107      	movs	r1, #7
    fd3c:	4640      	mov	r0, r8
    fd3e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    fd42:	f00b f9a0 	bl	1b086 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    fd46:	6862      	ldr	r2, [r4, #4]
    fd48:	2108      	movs	r1, #8
    fd4a:	4640      	mov	r0, r8
    fd4c:	f002 0201 	and.w	r2, r2, #1
    fd50:	f00b f999 	bl	1b086 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    fd54:	463a      	mov	r2, r7
    fd56:	2109      	movs	r1, #9
    fd58:	4640      	mov	r0, r8
    fd5a:	f00b f994 	bl	1b086 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    fd5e:	6862      	ldr	r2, [r4, #4]
    fd60:	210b      	movs	r1, #11
    fd62:	4640      	mov	r0, r8
    fd64:	f3c2 0280 	ubfx	r2, r2, #2, #1
    fd68:	f00b f98d 	bl	1b086 <atomic_set_bit_to>
	return 0;
    fd6c:	f04f 0b00 	mov.w	fp, #0
    fd70:	e7c4      	b.n	fcfc <bt_le_adv_start_legacy+0x184>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    fd72:	9807      	ldr	r0, [sp, #28]
    fd74:	b108      	cbz	r0, fd7a <bt_le_adv_start_legacy+0x202>
		bt_conn_unref(conn);
    fd76:	f000 fd49 	bl	1080c <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    fd7a:	2d00      	cmp	r5, #0
    fd7c:	d1d6      	bne.n	fd2c <bt_le_adv_start_legacy+0x1b4>
    fd7e:	e7d0      	b.n	fd22 <bt_le_adv_start_legacy+0x1aa>
		return -EAGAIN;
    fd80:	f06f 0b0a 	mvn.w	fp, #10
    fd84:	e7ba      	b.n	fcfc <bt_le_adv_start_legacy+0x184>
		return -EINVAL;
    fd86:	f06f 0b15 	mvn.w	fp, #21
    fd8a:	e7b7      	b.n	fcfc <bt_le_adv_start_legacy+0x184>
		return -EALREADY;
    fd8c:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    fd90:	e7b4      	b.n	fcfc <bt_le_adv_start_legacy+0x184>
		return -ENOBUFS;
    fd92:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    fd96:	e7b1      	b.n	fcfc <bt_le_adv_start_legacy+0x184>
    fd98:	4683      	mov	fp, r0
    fd9a:	e7af      	b.n	fcfc <bt_le_adv_start_legacy+0x184>
    fd9c:	20008094 	.word	0x20008094
    fda0:	20008000 	.word	0x20008000
    fda4:	0002038b 	.word	0x0002038b

0000fda8 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    fda8:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    fdaa:	9c04      	ldr	r4, [sp, #16]
    fdac:	e9cd 3400 	strd	r3, r4, [sp]
    fdb0:	4613      	mov	r3, r2
    fdb2:	460a      	mov	r2, r1
    fdb4:	4601      	mov	r1, r0
    fdb6:	4802      	ldr	r0, [pc, #8]	; (fdc0 <bt_le_adv_start+0x18>)
    fdb8:	f7ff fede 	bl	fb78 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    fdbc:	b002      	add	sp, #8
    fdbe:	bd10      	pop	{r4, pc}
    fdc0:	20008018 	.word	0x20008018

0000fdc4 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    fdc4:	b530      	push	{r4, r5, lr}
    fdc6:	4c29      	ldr	r4, [pc, #164]	; (fe6c <bt_le_adv_stop+0xa8>)
    fdc8:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    fdcc:	b085      	sub	sp, #20
    fdce:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fdd2:	f00b f94d 	bl	1b070 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fdd6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fdda:	f00b f935 	bl	1b048 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    fdde:	0641      	lsls	r1, r0, #25
    fde0:	d403      	bmi.n	fdea <bt_le_adv_stop+0x26>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		adv_delete_legacy();
		return 0;
    fde2:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    fde4:	4620      	mov	r0, r4
    fde6:	b005      	add	sp, #20
    fde8:	bd30      	pop	{r4, r5, pc}
    fdea:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fdee:	f00b f92b 	bl	1b048 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fdf2:	05c2      	lsls	r2, r0, #23
    fdf4:	d521      	bpl.n	fe3a <bt_le_adv_stop+0x76>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    fdf6:	2300      	movs	r3, #0
    fdf8:	4669      	mov	r1, sp
    fdfa:	f104 0021 	add.w	r0, r4, #33	; 0x21
    fdfe:	9300      	str	r3, [sp, #0]
    fe00:	f8cd 3003 	str.w	r3, [sp, #3]
    fe04:	f00b f931 	bl	1b06a <bt_addr_le_cmp>
    fe08:	7e25      	ldrb	r5, [r4, #24]
    fe0a:	bb58      	cbnz	r0, fe64 <bt_le_adv_stop+0xa0>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    fe0c:	4b18      	ldr	r3, [pc, #96]	; (fe70 <bt_le_adv_stop+0xac>)
    fe0e:	a902      	add	r1, sp, #8
    fe10:	889a      	ldrh	r2, [r3, #4]
    fe12:	6818      	ldr	r0, [r3, #0]
    fe14:	f8ad 200c 	strh.w	r2, [sp, #12]
    fe18:	2204      	movs	r2, #4
    fe1a:	799b      	ldrb	r3, [r3, #6]
    fe1c:	9002      	str	r0, [sp, #8]
    fe1e:	f88d 300e 	strb.w	r3, [sp, #14]
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    fe22:	4628      	mov	r0, r5
    fe24:	f000 fe54 	bl	10ad0 <bt_conn_lookup_state_le>
    fe28:	4604      	mov	r4, r0
	if (conn) {
    fe2a:	b130      	cbz	r0, fe3a <bt_le_adv_stop+0x76>
		conn->err = status;
    fe2c:	2100      	movs	r1, #0
    fe2e:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    fe30:	f000 fd18 	bl	10864 <bt_conn_set_state>
		bt_conn_unref(conn);
    fe34:	4620      	mov	r0, r4
    fe36:	f000 fce9 	bl	1080c <bt_conn_unref>
		err = set_le_adv_enable_legacy(adv, false);
    fe3a:	2100      	movs	r1, #0
    fe3c:	480d      	ldr	r0, [pc, #52]	; (fe74 <bt_le_adv_stop+0xb0>)
    fe3e:	f7fe fd21 	bl	e884 <set_le_adv_enable_legacy>
		if (err) {
    fe42:	4604      	mov	r4, r0
    fe44:	2800      	cmp	r0, #0
    fe46:	d1cd      	bne.n	fde4 <bt_le_adv_stop+0x20>
    fe48:	480b      	ldr	r0, [pc, #44]	; (fe78 <bt_le_adv_stop+0xb4>)
    fe4a:	f00b f8fd 	bl	1b048 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    fe4e:	0683      	lsls	r3, r0, #26
    fe50:	d5c7      	bpl.n	fde2 <bt_le_adv_stop+0x1e>
	return set_le_scan_enable_legacy(enable);
    fe52:	4620      	mov	r0, r4
    fe54:	f7fe fb80 	bl	e558 <set_le_scan_enable_legacy>
			le_set_private_addr(BT_ID_DEFAULT);
    fe58:	f00b f93b 	bl	1b0d2 <le_set_private_addr.constprop.0>
	return set_le_scan_enable_legacy(enable);
    fe5c:	2001      	movs	r0, #1
    fe5e:	f7fe fb7b 	bl	e558 <set_le_scan_enable_legacy>
    fe62:	e7bf      	b.n	fde4 <bt_le_adv_stop+0x20>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    fe64:	2205      	movs	r2, #5
    fe66:	f104 0121 	add.w	r1, r4, #33	; 0x21
    fe6a:	e7da      	b.n	fe22 <bt_le_adv_stop+0x5e>
    fe6c:	20008000 	.word	0x20008000
    fe70:	0001d8e0 	.word	0x0001d8e0
    fe74:	20008018 	.word	0x20008018
    fe78:	20008094 	.word	0x20008094

0000fe7c <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    fe7c:	b513      	push	{r0, r1, r4, lr}
    fe7e:	4818      	ldr	r0, [pc, #96]	; (fee0 <bt_le_adv_resume+0x64>)
    fe80:	f00b f8e2 	bl	1b048 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    fe84:	04c1      	lsls	r1, r0, #19
    fe86:	d529      	bpl.n	fedc <bt_le_adv_resume+0x60>
    fe88:	4815      	ldr	r0, [pc, #84]	; (fee0 <bt_le_adv_resume+0x64>)
    fe8a:	f00b f8dd 	bl	1b048 <atomic_get>
    fe8e:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    fe90:	f3c0 1480 	ubfx	r4, r0, #6, #1
    fe94:	d422      	bmi.n	fedc <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    fe96:	4812      	ldr	r0, [pc, #72]	; (fee0 <bt_le_adv_resume+0x64>)
    fe98:	f00b f8d6 	bl	1b048 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    fe9c:	05c3      	lsls	r3, r0, #23
    fe9e:	d51d      	bpl.n	fedc <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    fea0:	4810      	ldr	r0, [pc, #64]	; (fee4 <bt_le_adv_resume+0x68>)
    fea2:	a901      	add	r1, sp, #4
    fea4:	f7fe fa0a 	bl	e2bc <le_adv_start_add_conn>
	if (err) {
    fea8:	b9c0      	cbnz	r0, fedc <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
    feaa:	2101      	movs	r1, #1
    feac:	480d      	ldr	r0, [pc, #52]	; (fee4 <bt_le_adv_resume+0x68>)
    feae:	f7fe fce9 	bl	e884 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    feb2:	b150      	cbz	r0, feca <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    feb4:	4621      	mov	r1, r4
    feb6:	9801      	ldr	r0, [sp, #4]
    feb8:	f000 fcd4 	bl	10864 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    febc:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    fec0:	4807      	ldr	r0, [pc, #28]	; (fee0 <bt_le_adv_resume+0x64>)
    fec2:	f00b f8d5 	bl	1b070 <atomic_and>
	return (old & mask) != 0;
    fec6:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    feca:	9801      	ldr	r0, [sp, #4]
    fecc:	f000 fc9e 	bl	1080c <bt_conn_unref>
	if (persist_paused) {
    fed0:	b124      	cbz	r4, fedc <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    fed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    fed6:	4802      	ldr	r0, [pc, #8]	; (fee0 <bt_le_adv_resume+0x64>)
    fed8:	f00b f8bc 	bl	1b054 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    fedc:	b002      	add	sp, #8
    fede:	bd10      	pop	{r4, pc}
    fee0:	20008028 	.word	0x20008028
    fee4:	20008018 	.word	0x20008018

0000fee8 <enh_conn_complete>:
{
    fee8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
    feec:	7804      	ldrb	r4, [r0, #0]
{
    feee:	4605      	mov	r5, r0
	if (evt->status) {
    fef0:	2c00      	cmp	r4, #0
    fef2:	d048      	beq.n	ff86 <enh_conn_complete+0x9e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    fef4:	2c3c      	cmp	r4, #60	; 0x3c
    fef6:	d11a      	bne.n	ff2e <enh_conn_complete+0x46>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    fef8:	f06f 0140 	mvn.w	r1, #64	; 0x40
    fefc:	4872      	ldr	r0, [pc, #456]	; (100c8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xc8>)
    fefe:	f00b f8b7 	bl	1b070 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    ff02:	2000      	movs	r0, #0
    ff04:	f7fd ffa6 	bl	de54 <find_pending_connect.part.0>
		if (!conn) {
    ff08:	4605      	mov	r5, r0
    ff0a:	b930      	cbnz	r0, ff1a <enh_conn_complete+0x32>
			BT_ERR("No pending slave connection");
    ff0c:	2145      	movs	r1, #69	; 0x45
    ff0e:	486f      	ldr	r0, [pc, #444]	; (100cc <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xcc>)
}
    ff10:	b004      	add	sp, #16
    ff12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
    ff16:	f009 bd6a 	b.w	199ee <printk>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    ff1a:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ff1c:	2100      	movs	r1, #0
    ff1e:	f000 fca1 	bl	10864 <bt_conn_set_state>
		bt_conn_unref(conn);
    ff22:	4628      	mov	r0, r5
}
    ff24:	b004      	add	sp, #16
    ff26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    ff2a:	f000 bc6f 	b.w	1080c <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ff2e:	2c02      	cmp	r4, #2
    ff30:	d121      	bne.n	ff76 <enh_conn_complete+0x8e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    ff32:	2100      	movs	r1, #0
    ff34:	2206      	movs	r2, #6
    ff36:	4608      	mov	r0, r1
    ff38:	f000 fdca 	bl	10ad0 <bt_conn_lookup_state_le>
	if (!conn) {
    ff3c:	4605      	mov	r5, r0
    ff3e:	b948      	cbnz	r0, ff54 <enh_conn_complete+0x6c>
		BT_ERR("No pending master connection");
    ff40:	2145      	movs	r1, #69	; 0x45
    ff42:	4863      	ldr	r0, [pc, #396]	; (100d0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xd0>)
    ff44:	f009 fd53 	bl	199ee <printk>
			bt_le_scan_update(false);
    ff48:	2000      	movs	r0, #0
    ff4a:	f7fe fdb3 	bl	eab4 <bt_le_scan_update>
}
    ff4e:	b004      	add	sp, #16
    ff50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    ff54:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ff56:	2100      	movs	r1, #0
    ff58:	f000 fc84 	bl	10864 <bt_conn_set_state>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ff5c:	1d28      	adds	r0, r5, #4
    ff5e:	f00b f873 	bl	1b048 <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    ff62:	07c2      	lsls	r2, r0, #31
    ff64:	d503      	bpl.n	ff6e <enh_conn_complete+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    ff66:	4621      	mov	r1, r4
    ff68:	4628      	mov	r0, r5
    ff6a:	f000 fc7b 	bl	10864 <bt_conn_set_state>
	bt_conn_unref(conn);
    ff6e:	4628      	mov	r0, r5
    ff70:	f000 fc4c 	bl	1080c <bt_conn_unref>
    ff74:	e7e8      	b.n	ff48 <enh_conn_complete+0x60>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    ff76:	4622      	mov	r2, r4
    ff78:	2157      	movs	r1, #87	; 0x57
    ff7a:	4856      	ldr	r0, [pc, #344]	; (100d4 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xd4>)
}
    ff7c:	b004      	add	sp, #16
    ff7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
    ff82:	f009 bd34 	b.w	199ee <printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    ff86:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ff88:	f8b0 7001 	ldrh.w	r7, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    ff8c:	3b02      	subs	r3, #2
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    ff8e:	1d06      	adds	r6, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    ff90:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    ff92:	4631      	mov	r1, r6
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ff94:	fa1f f887 	uxth.w	r8, r7
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    ff98:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    ff9a:	d834      	bhi.n	10006 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x6>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    ff9c:	f00b f857 	bl	1b04e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    ffa0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    ffa4:	2206      	movs	r2, #6
    ffa6:	3b02      	subs	r3, #2
    ffa8:	f105 0111 	add.w	r1, r5, #17
    ffac:	f10d 0001 	add.w	r0, sp, #1
    ffb0:	f88d 3008 	strb.w	r3, [sp, #8]
    ffb4:	f00a ff5b 	bl	1ae6e <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    ffb8:	2301      	movs	r3, #1
    ffba:	f88d 3000 	strb.w	r3, [sp]
	conn = find_pending_connect(evt->role, &id_addr);
    ffbe:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_MASTER) {
    ffc0:	bb40      	cbnz	r0, 10014 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x14>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    ffc2:	2206      	movs	r2, #6
    ffc4:	a902      	add	r1, sp, #8
    ffc6:	f000 fd83 	bl	10ad0 <bt_conn_lookup_state_le>
    ffca:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ffcc:	78eb      	ldrb	r3, [r5, #3]
    ffce:	2b01      	cmp	r3, #1
    ffd0:	d104      	bne.n	ffdc <enh_conn_complete+0xf4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ffd2:	f06f 0140 	mvn.w	r1, #64	; 0x40
    ffd6:	483c      	ldr	r0, [pc, #240]	; (100c8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xc8>)
    ffd8:	f00b f84a 	bl	1b070 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ffdc:	78eb      	ldrb	r3, [r5, #3]
    ffde:	b923      	cbnz	r3, ffea <enh_conn_complete+0x102>
    ffe0:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    ffe4:	483c      	ldr	r0, [pc, #240]	; (100d8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xd8>)
    ffe6:	f00b f843 	bl	1b070 <atomic_and>
	if (!conn) {
    ffea:	b9dc      	cbnz	r4, 10024 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x24>
		BT_ERR("No pending conn for peer %s",
    ffec:	4630      	mov	r0, r6
    ffee:	f7fd fc5d 	bl	d8ac <bt_addr_le_str_real>
    fff2:	2145      	movs	r1, #69	; 0x45
    fff4:	4602      	mov	r2, r0
    fff6:	4839      	ldr	r0, [pc, #228]	; (100dc <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xdc>)
    fff8:	f009 fcf9 	bl	199ee <printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    fffc:	211f      	movs	r1, #31
    fffe:	4640      	mov	r0, r8
   10000:	f00b f87d 	bl	1b0fe <bt_hci_disconnect>
		return;
   10004:	e7a3      	b.n	ff4e <enh_conn_complete+0x66>
		bt_addr_le_copy(&id_addr,
   10006:	f00b f822 	bl	1b04e <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   1000a:	4631      	mov	r1, r6
   1000c:	4668      	mov	r0, sp
   1000e:	f00b f81e 	bl	1b04e <bt_addr_le_copy>
   10012:	e7d4      	b.n	ffbe <enh_conn_complete+0xd6>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   10014:	2801      	cmp	r0, #1
   10016:	d103      	bne.n	10020 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x20>
   10018:	a802      	add	r0, sp, #8
   1001a:	f7fd ff1b 	bl	de54 <find_pending_connect.part.0>
   1001e:	e7d4      	b.n	ffca <enh_conn_complete+0xe2>
	return NULL;
   10020:	2400      	movs	r4, #0
   10022:	e7d3      	b.n	ffcc <enh_conn_complete+0xe4>
	conn->handle = handle;
   10024:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   10026:	a902      	add	r1, sp, #8
	conn->handle = handle;
   10028:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1002c:	f00b f80f 	bl	1b04e <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   10030:	7e2a      	ldrb	r2, [r5, #24]
   10032:	7deb      	ldrb	r3, [r5, #23]
   10034:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10038:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1003c:	7eaa      	ldrb	r2, [r5, #26]
   1003e:	7e6b      	ldrb	r3, [r5, #25]
   10040:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   10044:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10048:	7f2a      	ldrb	r2, [r5, #28]
   1004a:	7eeb      	ldrb	r3, [r5, #27]
   1004c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->err = 0U;
   10050:	2200      	movs	r2, #0
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   10052:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   10056:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
   10058:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1005a:	2b01      	cmp	r3, #1
	conn->role = evt->role;
   1005c:	70e3      	strb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1005e:	d113      	bne.n	10088 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x88>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   10060:	4669      	mov	r1, sp
   10062:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   10066:	f00a fff2 	bl	1b04e <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
   1006a:	7a21      	ldrb	r1, [r4, #8]
   1006c:	4d1c      	ldr	r5, [pc, #112]	; (100e0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe0>)
   1006e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   10072:	4429      	add	r1, r5
   10074:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10078:	f00a ffe9 	bl	1b04e <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   1007c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   10080:	065b      	lsls	r3, r3, #25
   10082:	d501      	bpl.n	10088 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0x88>
			bt_le_adv_resume();
   10084:	f7ff fefa 	bl	fe7c <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10088:	78e3      	ldrb	r3, [r4, #3]
   1008a:	b96b      	cbnz	r3, 100a8 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xa8>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   1008c:	4669      	mov	r1, sp
   1008e:	f104 0096 	add.w	r0, r4, #150	; 0x96
   10092:	f00a ffdc 	bl	1b04e <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   10096:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   10098:	4b11      	ldr	r3, [pc, #68]	; (100e0 <CONFIG_RPMSG_NRF53_SRAM_SIZE+0xe0>)
					&bt_dev.id_addr[conn->id]);
   1009a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   1009e:	4419      	add	r1, r3
   100a0:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   100a4:	f00a ffd3 	bl	1b04e <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   100a8:	2107      	movs	r1, #7
   100aa:	4620      	mov	r0, r4
   100ac:	f000 fbda 	bl	10864 <bt_conn_set_state>
	conn_auto_initiate(conn);
   100b0:	4620      	mov	r0, r4
   100b2:	f7fe ff1f 	bl	eef4 <conn_auto_initiate>
	bt_conn_unref(conn);
   100b6:	4620      	mov	r0, r4
   100b8:	f000 fba8 	bl	1080c <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   100bc:	78e3      	ldrb	r3, [r4, #3]
   100be:	2b00      	cmp	r3, #0
   100c0:	f47f af45 	bne.w	ff4e <enh_conn_complete+0x66>
   100c4:	e740      	b.n	ff48 <enh_conn_complete+0x60>
   100c6:	bf00      	nop
   100c8:	20008028 	.word	0x20008028
   100cc:	000203ab 	.word	0x000203ab
   100d0:	000203cc 	.word	0x000203cc
   100d4:	000203ee 	.word	0x000203ee
   100d8:	20008094 	.word	0x20008094
   100dc:	0002040c 	.word	0x0002040c
   100e0:	20008000 	.word	0x20008000

000100e4 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   100e4:	b570      	push	{r4, r5, r6, lr}
   100e6:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   100e8:	482e      	ldr	r0, [pc, #184]	; (101a4 <bt_le_scan_start+0xc0>)
   100ea:	f00a ffad 	bl	1b048 <atomic_get>
   100ee:	460e      	mov	r6, r1
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   100f0:	0781      	lsls	r1, r0, #30
   100f2:	d554      	bpl.n	1019e <bt_le_scan_start+0xba>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   100f4:	782a      	ldrb	r2, [r5, #0]
   100f6:	2a01      	cmp	r2, #1
   100f8:	d903      	bls.n	10102 <bt_le_scan_start+0x1e>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   100fa:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   100fe:	4620      	mov	r0, r4
   10100:	bd70      	pop	{r4, r5, r6, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   10102:	686b      	ldr	r3, [r5, #4]
   10104:	f033 030f 	bics.w	r3, r3, #15
   10108:	d1f7      	bne.n	100fa <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   1010a:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   1010e:	8928      	ldrh	r0, [r5, #8]
   10110:	1f03      	subs	r3, r0, #4
   10112:	b29b      	uxth	r3, r3
   10114:	42a3      	cmp	r3, r4
   10116:	d8f0      	bhi.n	100fa <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   10118:	8969      	ldrh	r1, [r5, #10]
   1011a:	1f0b      	subs	r3, r1, #4
   1011c:	b29b      	uxth	r3, r3
   1011e:	42a3      	cmp	r3, r4
   10120:	d8eb      	bhi.n	100fa <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   10122:	4288      	cmp	r0, r1
   10124:	d3e9      	bcc.n	100fa <bt_le_scan_start+0x16>
	if (param->type && !bt_le_scan_random_addr_check()) {
   10126:	b94a      	cbnz	r2, 1013c <bt_le_scan_start+0x58>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   10128:	2140      	movs	r1, #64	; 0x40
   1012a:	481e      	ldr	r0, [pc, #120]	; (101a4 <bt_le_scan_start+0xc0>)
   1012c:	f00a ff92 	bl	1b054 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10130:	ea10 0301 	ands.w	r3, r0, r1
   10134:	d007      	beq.n	10146 <bt_le_scan_start+0x62>
		return -EALREADY;
   10136:	f06f 0444 	mvn.w	r4, #68	; 0x44
   1013a:	e7e0      	b.n	100fe <bt_le_scan_start+0x1a>
	if (param->type && !bt_le_scan_random_addr_check()) {
   1013c:	f7fe fc2e 	bl	e99c <bt_le_scan_random_addr_check>
   10140:	2800      	cmp	r0, #0
   10142:	d1f1      	bne.n	10128 <bt_le_scan_start+0x44>
   10144:	e7d9      	b.n	100fa <bt_le_scan_start+0x16>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10146:	4817      	ldr	r0, [pc, #92]	; (101a4 <bt_le_scan_start+0xc0>)
   10148:	f00a ff7e 	bl	1b048 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1014c:	0682      	lsls	r2, r0, #26
   1014e:	d50a      	bpl.n	10166 <bt_le_scan_start+0x82>
	return set_le_scan_enable_legacy(enable);
   10150:	4618      	mov	r0, r3
   10152:	f7fe fa01 	bl	e558 <set_le_scan_enable_legacy>
		if (err) {
   10156:	4604      	mov	r4, r0
   10158:	b128      	cbz	r0, 10166 <bt_le_scan_start+0x82>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1015a:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1015e:	4811      	ldr	r0, [pc, #68]	; (101a4 <bt_le_scan_start+0xc0>)
   10160:	f00a ff86 	bl	1b070 <atomic_and>
		return err;
   10164:	e7cb      	b.n	100fe <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   10166:	686a      	ldr	r2, [r5, #4]
   10168:	2108      	movs	r1, #8
   1016a:	480e      	ldr	r0, [pc, #56]	; (101a4 <bt_le_scan_start+0xc0>)
   1016c:	f002 0201 	and.w	r2, r2, #1
   10170:	f00a ff89 	bl	1b086 <atomic_set_bit_to>
		if (param->timeout) {
   10174:	89ab      	ldrh	r3, [r5, #12]
   10176:	b13b      	cbz	r3, 10188 <bt_le_scan_start+0xa4>
   10178:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1017c:	4809      	ldr	r0, [pc, #36]	; (101a4 <bt_le_scan_start+0xc0>)
   1017e:	f00a ff77 	bl	1b070 <atomic_and>
			return -ENOTSUP;
   10182:	f06f 0422 	mvn.w	r4, #34	; 0x22
   10186:	e7ba      	b.n	100fe <bt_le_scan_start+0x1a>
		err = start_le_scan_legacy(param->type, param->interval,
   10188:	896a      	ldrh	r2, [r5, #10]
   1018a:	8929      	ldrh	r1, [r5, #8]
   1018c:	7828      	ldrb	r0, [r5, #0]
   1018e:	f7fe fba7 	bl	e8e0 <start_le_scan_legacy>
	if (err) {
   10192:	4604      	mov	r4, r0
   10194:	2800      	cmp	r0, #0
   10196:	d1e0      	bne.n	1015a <bt_le_scan_start+0x76>
	scan_dev_found_cb = cb;
   10198:	4b03      	ldr	r3, [pc, #12]	; (101a8 <bt_le_scan_start+0xc4>)
   1019a:	601e      	str	r6, [r3, #0]
	return 0;
   1019c:	e7af      	b.n	100fe <bt_le_scan_start+0x1a>
		return -EAGAIN;
   1019e:	f06f 040a 	mvn.w	r4, #10
   101a2:	e7ac      	b.n	100fe <bt_le_scan_start+0x1a>
   101a4:	20008094 	.word	0x20008094
   101a8:	2000a964 	.word	0x2000a964

000101ac <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   101ac:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   101ae:	f06f 0140 	mvn.w	r1, #64	; 0x40
   101b2:	4807      	ldr	r0, [pc, #28]	; (101d0 <bt_le_scan_stop+0x24>)
   101b4:	f00a ff5c 	bl	1b070 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   101b8:	0643      	lsls	r3, r0, #25
   101ba:	d506      	bpl.n	101ca <bt_le_scan_stop+0x1e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   101bc:	2000      	movs	r0, #0
   101be:	4b05      	ldr	r3, [pc, #20]	; (101d4 <bt_le_scan_stop+0x28>)
   101c0:	6018      	str	r0, [r3, #0]
		pending_id_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   101c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   101c6:	f7fe bc75 	b.w	eab4 <bt_le_scan_update>
}
   101ca:	f06f 0044 	mvn.w	r0, #68	; 0x44
   101ce:	bd08      	pop	{r3, pc}
   101d0:	20008094 	.word	0x20008094
   101d4:	2000a964 	.word	0x2000a964

000101d8 <bt_le_scan_cb_register>:
	parent->next = child;
   101d8:	2300      	movs	r3, #0
   101da:	6083      	str	r3, [r0, #8]
	return list->tail;
   101dc:	4b05      	ldr	r3, [pc, #20]	; (101f4 <bt_le_scan_cb_register+0x1c>)

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   101de:	f100 0208 	add.w	r2, r0, #8
   101e2:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   101e4:	b911      	cbnz	r1, 101ec <bt_le_scan_cb_register+0x14>
	list->head = node;
   101e6:	e9c3 2200 	strd	r2, r2, [r3]
}
   101ea:	4770      	bx	lr
	parent->next = child;
   101ec:	600a      	str	r2, [r1, #0]
	list->tail = node;
   101ee:	605a      	str	r2, [r3, #4]
}
   101f0:	4770      	bx	lr
   101f2:	bf00      	nop
   101f4:	2000a95c 	.word	0x2000a95c

000101f8 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   101f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   101fa:	b08d      	sub	sp, #52	; 0x34
   101fc:	ae04      	add	r6, sp, #16
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   101fe:	2700      	movs	r7, #0
   10200:	4635      	mov	r5, r6
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   10202:	2100      	movs	r1, #0
   10204:	f242 0018 	movw	r0, #8216	; 0x2018
   10208:	aa02      	add	r2, sp, #8
   1020a:	f7fe f8f5 	bl	e3f8 <bt_hci_cmd_send_sync>
		if (ret) {
   1020e:	4604      	mov	r4, r0
   10210:	bb58      	cbnz	r0, 1026a <prng_reseed.constprop.0+0x72>
			return ret;
		}

		rp = (void *)rsp->data;
   10212:	9b02      	ldr	r3, [sp, #8]
		memcpy(&seed[i * 8], rp->rand, 8);
   10214:	2208      	movs	r2, #8
   10216:	6899      	ldr	r1, [r3, #8]
   10218:	4630      	mov	r0, r6
   1021a:	3101      	adds	r1, #1
   1021c:	f00a fe27 	bl	1ae6e <memcpy>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10220:	3701      	adds	r7, #1

		net_buf_unref(rsp);
   10222:	9802      	ldr	r0, [sp, #8]
   10224:	f004 fb70 	bl	14908 <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   10228:	2f04      	cmp	r7, #4
   1022a:	f106 0608 	add.w	r6, r6, #8
   1022e:	d1e8      	bne.n	10202 <prng_reseed.constprop.0+0xa>
	return z_impl_k_uptime_ticks();
   10230:	f00d f82e 	bl	1d290 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   10234:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   10238:	fba0 3206 	umull	r3, r2, r0, r6
   1023c:	fb06 2101 	mla	r1, r6, r1, r2
   10240:	0bdb      	lsrs	r3, r3, #15
   10242:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   10246:	0bc9      	lsrs	r1, r1, #15
	}

	extra = k_uptime_get();
   10248:	e9cd 3102 	strd	r3, r1, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1024c:	2308      	movs	r3, #8
   1024e:	2220      	movs	r2, #32
   10250:	9300      	str	r3, [sp, #0]
   10252:	4629      	mov	r1, r5
   10254:	4806      	ldr	r0, [pc, #24]	; (10270 <prng_reseed.constprop.0+0x78>)
   10256:	446b      	add	r3, sp
   10258:	f00a fcbf 	bl	1abda <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   1025c:	b928      	cbnz	r0, 1026a <prng_reseed.constprop.0+0x72>
		BT_ERR("Failed to re-seed PRNG");
   1025e:	2145      	movs	r1, #69	; 0x45
   10260:	4804      	ldr	r0, [pc, #16]	; (10274 <prng_reseed.constprop.0+0x7c>)
   10262:	f009 fbc4 	bl	199ee <printk>
		return -EIO;
   10266:	f06f 0404 	mvn.w	r4, #4
	}

	return 0;
}
   1026a:	4620      	mov	r0, r4
   1026c:	b00d      	add	sp, #52	; 0x34
   1026e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10270:	20008a20 	.word	0x20008a20
   10274:	0002043e 	.word	0x0002043e

00010278 <prng_init>:

int prng_init(void)
{
   10278:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1027a:	4b13      	ldr	r3, [pc, #76]	; (102c8 <prng_init+0x50>)
   1027c:	f993 305f 	ldrsb.w	r3, [r3, #95]	; 0x5f
   10280:	2b00      	cmp	r3, #0
   10282:	da1d      	bge.n	102c0 <prng_init+0x48>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   10284:	2100      	movs	r1, #0
   10286:	f242 0018 	movw	r0, #8216	; 0x2018
   1028a:	aa01      	add	r2, sp, #4
   1028c:	f7fe f8b4 	bl	e3f8 <bt_hci_cmd_send_sync>
	if (ret) {
   10290:	b988      	cbnz	r0, 102b6 <prng_init+0x3e>
		return ret;
	}

	rp = (void *)rsp->data;
   10292:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   10294:	2208      	movs	r2, #8
   10296:	6899      	ldr	r1, [r3, #8]
   10298:	480c      	ldr	r0, [pc, #48]	; (102cc <prng_init+0x54>)
   1029a:	3101      	adds	r1, #1
   1029c:	f00a fc7d 	bl	1ab9a <tc_hmac_prng_init>
   102a0:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   102a2:	9801      	ldr	r0, [sp, #4]
   102a4:	f004 fb30 	bl	14908 <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   102a8:	b93c      	cbnz	r4, 102ba <prng_init+0x42>
		BT_ERR("Failed to initialize PRNG");
   102aa:	4809      	ldr	r0, [pc, #36]	; (102d0 <prng_init+0x58>)
   102ac:	2145      	movs	r1, #69	; 0x45
   102ae:	f009 fb9e 	bl	199ee <printk>
		return -EIO;
   102b2:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   102b6:	b002      	add	sp, #8
   102b8:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   102ba:	f7ff ff9d 	bl	101f8 <prng_reseed.constprop.0>
   102be:	e7fa      	b.n	102b6 <prng_init+0x3e>
		return -ENOTSUP;
   102c0:	f06f 0022 	mvn.w	r0, #34	; 0x22
   102c4:	e7f7      	b.n	102b6 <prng_init+0x3e>
   102c6:	bf00      	nop
   102c8:	20008000 	.word	0x20008000
   102cc:	20008a20 	.word	0x20008a20
   102d0:	0002045a 	.word	0x0002045a

000102d4 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   102d4:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   102d6:	4a0a      	ldr	r2, [pc, #40]	; (10300 <bt_rand+0x2c>)
{
   102d8:	4604      	mov	r4, r0
   102da:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   102dc:	f00a fc96 	bl	1ac0c <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   102e0:	1c43      	adds	r3, r0, #1
   102e2:	d107      	bne.n	102f4 <bt_rand+0x20>
		ret = prng_reseed(&prng);
   102e4:	f7ff ff88 	bl	101f8 <prng_reseed.constprop.0>
		if (ret) {
   102e8:	b948      	cbnz	r0, 102fe <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   102ea:	4629      	mov	r1, r5
   102ec:	4620      	mov	r0, r4
   102ee:	4a04      	ldr	r2, [pc, #16]	; (10300 <bt_rand+0x2c>)
   102f0:	f00a fc8c 	bl	1ac0c <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   102f4:	2801      	cmp	r0, #1
   102f6:	bf14      	ite	ne
   102f8:	f06f 0004 	mvnne.w	r0, #4
   102fc:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   102fe:	bd38      	pop	{r3, r4, r5, pc}
   10300:	20008a20 	.word	0x20008a20

00010304 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   10304:	2300      	movs	r3, #0
{
   10306:	4601      	mov	r1, r0
	tx->user_data = NULL;
   10308:	e9c0 3301 	strd	r3, r3, [r0, #4]
	tx->pending_no_cb = 0U;
   1030c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1030e:	4801      	ldr	r0, [pc, #4]	; (10314 <tx_free+0x10>)
   10310:	f00c beea 	b.w	1d0e8 <k_queue_append>
   10314:	20008694 	.word	0x20008694

00010318 <notify_connected>:
{
   10318:	b538      	push	{r3, r4, r5, lr}
   1031a:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   1031c:	4b08      	ldr	r3, [pc, #32]	; (10340 <notify_connected+0x28>)
   1031e:	681d      	ldr	r5, [r3, #0]
			cb->connected(conn, conn->err);
   10320:	7a61      	ldrb	r1, [r4, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
   10322:	b92d      	cbnz	r5, 10330 <notify_connected+0x18>
	if (!conn->err) {
   10324:	b951      	cbnz	r1, 1033c <notify_connected+0x24>
		bt_gatt_connected(conn);
   10326:	4620      	mov	r0, r4
}
   10328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   1032c:	f003 bfe6 	b.w	142fc <bt_gatt_connected>
		if (cb->connected) {
   10330:	682b      	ldr	r3, [r5, #0]
   10332:	b10b      	cbz	r3, 10338 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   10334:	4620      	mov	r0, r4
   10336:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10338:	692d      	ldr	r5, [r5, #16]
   1033a:	e7f1      	b.n	10320 <notify_connected+0x8>
}
   1033c:	bd38      	pop	{r3, r4, r5, pc}
   1033e:	bf00      	nop
   10340:	2000a968 	.word	0x2000a968

00010344 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   10344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10348:	4604      	mov	r4, r0
   1034a:	460e      	mov	r6, r1
   1034c:	4691      	mov	r9, r2
   1034e:	461f      	mov	r7, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   10350:	694d      	ldr	r5, [r1, #20]
	return z_impl_k_sem_take(sem, timeout);
   10352:	f04f 33ff 	mov.w	r3, #4294967295
   10356:	f04f 32ff 	mov.w	r2, #4294967295
   1035a:	4847      	ldr	r0, [pc, #284]	; (10478 <send_frag+0x134>)
   1035c:	f008 f9ae 	bl	186bc <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   10360:	7aa3      	ldrb	r3, [r4, #10]
   10362:	2b07      	cmp	r3, #7
   10364:	d14b      	bne.n	103fe <send_frag+0xba>
	__asm__ volatile(
   10366:	f04f 0320 	mov.w	r3, #32
   1036a:	f3ef 8211 	mrs	r2, BASEPRI
   1036e:	f383 8811 	msr	BASEPRI, r3
   10372:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   10376:	69a3      	ldr	r3, [r4, #24]
   10378:	2d00      	cmp	r5, #0
   1037a:	d052      	beq.n	10422 <send_frag+0xde>
	parent->next = child;
   1037c:	2100      	movs	r1, #0
   1037e:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   10380:	2b00      	cmp	r3, #0
   10382:	d14b      	bne.n	1041c <send_frag+0xd8>
	list->head = node;
   10384:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   10388:	f382 8811 	msr	BASEPRI, r2
   1038c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   10390:	2104      	movs	r1, #4
   10392:	f106 0008 	add.w	r0, r6, #8
   10396:	f004 fb75 	bl	14a84 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1039a:	8823      	ldrh	r3, [r4, #0]
   1039c:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   103a0:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   103a4:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   103a6:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   103aa:	3b04      	subs	r3, #4
   103ac:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   103ae:	2302      	movs	r3, #2
	return bt_send(buf);
   103b0:	4630      	mov	r0, r6
   103b2:	7533      	strb	r3, [r6, #20]
   103b4:	f7fe fd14 	bl	ede0 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   103b8:	4602      	mov	r2, r0
   103ba:	2800      	cmp	r0, #0
   103bc:	d059      	beq.n	10472 <send_frag+0x12e>
		BT_ERR("Unable to send to driver (err %d)", err);
   103be:	2145      	movs	r1, #69	; 0x45
   103c0:	482e      	ldr	r0, [pc, #184]	; (1047c <send_frag+0x138>)
   103c2:	f009 fb14 	bl	199ee <printk>
	__asm__ volatile(
   103c6:	f04f 0320 	mov.w	r3, #32
   103ca:	f3ef 8911 	mrs	r9, BASEPRI
   103ce:	f383 8811 	msr	BASEPRI, r3
   103d2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   103d6:	2d00      	cmp	r5, #0
   103d8:	d037      	beq.n	1044a <send_frag+0x106>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   103da:	2200      	movs	r2, #0
	return list->head;
   103dc:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   103de:	b153      	cbz	r3, 103f6 <send_frag+0xb2>
   103e0:	429d      	cmp	r5, r3
   103e2:	d12f      	bne.n	10444 <send_frag+0x100>
	return node->next;
   103e4:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   103e6:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   103e8:	bb3a      	cbnz	r2, 1043a <send_frag+0xf6>
   103ea:	42a9      	cmp	r1, r5
	list->head = node;
   103ec:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   103ee:	d100      	bne.n	103f2 <send_frag+0xae>
	list->tail = node;
   103f0:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   103f2:	2300      	movs	r3, #0
   103f4:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   103f6:	f389 8811 	msr	BASEPRI, r9
   103fa:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   103fe:	481e      	ldr	r0, [pc, #120]	; (10478 <send_frag+0x134>)
   10400:	f008 f920 	bl	18644 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   10404:	b115      	cbz	r5, 1040c <send_frag+0xc8>
		tx_free(tx);
   10406:	4628      	mov	r0, r5
   10408:	f7ff ff7c 	bl	10304 <tx_free>
	}

	if (always_consume) {
   1040c:	b11f      	cbz	r7, 10416 <send_frag+0xd2>
		net_buf_unref(buf);
   1040e:	4630      	mov	r0, r6
   10410:	f004 fa7a 	bl	14908 <net_buf_unref>
	}
	return false;
   10414:	2700      	movs	r7, #0
}
   10416:	4638      	mov	r0, r7
   10418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1041c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1041e:	61a5      	str	r5, [r4, #24]
}
   10420:	e7b2      	b.n	10388 <send_frag+0x44>
		if (tail_tx) {
   10422:	b133      	cbz	r3, 10432 <send_frag+0xee>
			pending_no_cb = &tail_tx->pending_no_cb;
   10424:	f103 080c 	add.w	r8, r3, #12
   10428:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1042a:	3301      	adds	r3, #1
   1042c:	f8c8 3000 	str.w	r3, [r8]
   10430:	e7aa      	b.n	10388 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   10432:	69e3      	ldr	r3, [r4, #28]
   10434:	f104 081c 	add.w	r8, r4, #28
   10438:	e7f7      	b.n	1042a <send_frag+0xe6>
Z_GENLIST_REMOVE(slist, snode)
   1043a:	42a9      	cmp	r1, r5
	parent->next = child;
   1043c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1043e:	bf08      	it	eq
   10440:	61a2      	streq	r2, [r4, #24]
}
   10442:	e7d6      	b.n	103f2 <send_frag+0xae>
	return node->next;
   10444:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   10446:	681b      	ldr	r3, [r3, #0]
   10448:	e7c9      	b.n	103de <send_frag+0x9a>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1044a:	f8d8 3000 	ldr.w	r3, [r8]
   1044e:	b953      	cbnz	r3, 10466 <send_frag+0x122>
   10450:	490b      	ldr	r1, [pc, #44]	; (10480 <send_frag+0x13c>)
   10452:	480c      	ldr	r0, [pc, #48]	; (10484 <send_frag+0x140>)
   10454:	f240 4292 	movw	r2, #1170	; 0x492
   10458:	f009 fac9 	bl	199ee <printk>
   1045c:	f240 4192 	movw	r1, #1170	; 0x492
   10460:	4807      	ldr	r0, [pc, #28]	; (10480 <send_frag+0x13c>)
   10462:	f009 fd6a 	bl	19f3a <assert_post_action>
			(*pending_no_cb)--;
   10466:	f8d8 3000 	ldr.w	r3, [r8]
   1046a:	3b01      	subs	r3, #1
   1046c:	f8c8 3000 	str.w	r3, [r8]
   10470:	e7c1      	b.n	103f6 <send_frag+0xb2>
	return true;
   10472:	2701      	movs	r7, #1
   10474:	e7cf      	b.n	10416 <send_frag+0xd2>
   10476:	bf00      	nop
   10478:	200080c8 	.word	0x200080c8
   1047c:	0001ffe7 	.word	0x0001ffe7
   10480:	00020483 	.word	0x00020483
   10484:	0001ead7 	.word	0x0001ead7

00010488 <bt_conn_get_pkts>:
}
   10488:	4800      	ldr	r0, [pc, #0]	; (1048c <bt_conn_get_pkts+0x4>)
   1048a:	4770      	bx	lr
   1048c:	200080c8 	.word	0x200080c8

00010490 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   10490:	1d03      	adds	r3, r0, #4
{
   10492:	b570      	push	{r4, r5, r6, lr}
   10494:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10496:	4618      	mov	r0, r3
   10498:	f00a feee 	bl	1b278 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   1049c:	0582      	lsls	r2, r0, #22
   1049e:	d515      	bpl.n	104cc <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   104a0:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   104a4:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   104a8:	4291      	cmp	r1, r2
   104aa:	d80f      	bhi.n	104cc <notify_le_param_updated+0x3c>
	    conn->le.interval >= conn->le.interval_min &&
   104ac:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   104b0:	4291      	cmp	r1, r2
   104b2:	d30b      	bcc.n	104cc <notify_le_param_updated+0x3c>
	    conn->le.latency == conn->le.pending_latency &&
   104b4:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   104b8:	4291      	cmp	r1, r2
   104ba:	d107      	bne.n	104cc <notify_le_param_updated+0x3c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   104bc:	e8d3 2fef 	ldaex	r2, [r3]
   104c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   104c4:	e8c3 2fe1 	stlex	r1, r2, [r3]
   104c8:	2900      	cmp	r1, #0
   104ca:	d1f7      	bne.n	104bc <notify_le_param_updated+0x2c>
	for (cb = callback_list; cb; cb = cb->_next) {
   104cc:	4b07      	ldr	r3, [pc, #28]	; (104ec <notify_le_param_updated+0x5c>)
   104ce:	681d      	ldr	r5, [r3, #0]
   104d0:	b905      	cbnz	r5, 104d4 <notify_le_param_updated+0x44>
}
   104d2:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   104d4:	68ee      	ldr	r6, [r5, #12]
   104d6:	b13e      	cbz	r6, 104e8 <notify_le_param_updated+0x58>
			cb->le_param_updated(conn, conn->le.interval,
   104d8:	4620      	mov	r0, r4
   104da:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   104de:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   104e2:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   104e6:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   104e8:	692d      	ldr	r5, [r5, #16]
   104ea:	e7f1      	b.n	104d0 <notify_le_param_updated+0x40>
   104ec:	2000a968 	.word	0x2000a968

000104f0 <le_param_req>:
{
   104f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   104f2:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   104f4:	4608      	mov	r0, r1
{
   104f6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   104f8:	f00a fe1c 	bl	1b134 <bt_le_conn_params_valid>
   104fc:	4604      	mov	r4, r0
   104fe:	b910      	cbnz	r0, 10506 <le_param_req+0x16>
		return false;
   10500:	2400      	movs	r4, #0
}
   10502:	4620      	mov	r0, r4
   10504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   10506:	4b09      	ldr	r3, [pc, #36]	; (1052c <le_param_req+0x3c>)
   10508:	681e      	ldr	r6, [r3, #0]
   1050a:	2e00      	cmp	r6, #0
   1050c:	d0f9      	beq.n	10502 <le_param_req+0x12>
		if (!cb->le_param_req) {
   1050e:	68b3      	ldr	r3, [r6, #8]
   10510:	b90b      	cbnz	r3, 10516 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   10512:	6936      	ldr	r6, [r6, #16]
   10514:	e7f9      	b.n	1050a <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   10516:	4629      	mov	r1, r5
   10518:	4638      	mov	r0, r7
   1051a:	4798      	blx	r3
   1051c:	2800      	cmp	r0, #0
   1051e:	d0ef      	beq.n	10500 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   10520:	4628      	mov	r0, r5
   10522:	f00a fe07 	bl	1b134 <bt_le_conn_params_valid>
   10526:	2800      	cmp	r0, #0
   10528:	d1f3      	bne.n	10512 <le_param_req+0x22>
   1052a:	e7e9      	b.n	10500 <le_param_req+0x10>
   1052c:	2000a968 	.word	0x2000a968

00010530 <bt_conn_cb_register>:
	cb->_next = callback_list;
   10530:	4b02      	ldr	r3, [pc, #8]	; (1053c <bt_conn_cb_register+0xc>)
   10532:	681a      	ldr	r2, [r3, #0]
	callback_list = cb;
   10534:	6018      	str	r0, [r3, #0]
	cb->_next = callback_list;
   10536:	6102      	str	r2, [r0, #16]
}
   10538:	4770      	bx	lr
   1053a:	bf00      	nop
   1053c:	2000a968 	.word	0x2000a968

00010540 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
   10540:	b570      	push	{r4, r5, r6, lr}
   10542:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   10544:	f100 0634 	add.w	r6, r0, #52	; 0x34
   10548:	2200      	movs	r2, #0
   1054a:	2300      	movs	r3, #0
   1054c:	4630      	mov	r0, r6
   1054e:	f004 f959 	bl	14804 <net_buf_get>
   10552:	4605      	mov	r5, r0
   10554:	bb28      	cbnz	r0, 105a2 <conn_cleanup+0x62>
		}

		net_buf_unref(buf);
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   10556:	6963      	ldr	r3, [r4, #20]
   10558:	b153      	cbz	r3, 10570 <conn_cleanup+0x30>
   1055a:	4916      	ldr	r1, [pc, #88]	; (105b4 <conn_cleanup+0x74>)
   1055c:	4816      	ldr	r0, [pc, #88]	; (105b8 <conn_cleanup+0x78>)
   1055e:	f240 520c 	movw	r2, #1292	; 0x50c
   10562:	f009 fa44 	bl	199ee <printk>
   10566:	f240 510c 	movw	r1, #1292	; 0x50c
   1056a:	4812      	ldr	r0, [pc, #72]	; (105b4 <conn_cleanup+0x74>)
   1056c:	f009 fce5 	bl	19f3a <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   10570:	69e3      	ldr	r3, [r4, #28]
   10572:	b153      	cbz	r3, 1058a <conn_cleanup+0x4a>
   10574:	490f      	ldr	r1, [pc, #60]	; (105b4 <conn_cleanup+0x74>)
   10576:	4810      	ldr	r0, [pc, #64]	; (105b8 <conn_cleanup+0x78>)
   10578:	f240 520d 	movw	r2, #1293	; 0x50d
   1057c:	f009 fa37 	bl	199ee <printk>
   10580:	f240 510d 	movw	r1, #1293	; 0x50d
   10584:	480b      	ldr	r0, [pc, #44]	; (105b4 <conn_cleanup+0x74>)
   10586:	f009 fcd8 	bl	19f3a <assert_post_action>

	bt_conn_reset_rx_state(conn);
   1058a:	4620      	mov	r0, r4
   1058c:	f00a fec1 	bl	1b312 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   10590:	f104 0158 	add.w	r1, r4, #88	; 0x58
   10594:	2200      	movs	r2, #0

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
   10596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1059a:	2300      	movs	r3, #0
   1059c:	4807      	ldr	r0, [pc, #28]	; (105bc <conn_cleanup+0x7c>)
   1059e:	f008 bab3 	b.w	18b08 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
   105a2:	6968      	ldr	r0, [r5, #20]
   105a4:	b108      	cbz	r0, 105aa <conn_cleanup+0x6a>
			tx_free(tx_data(buf)->tx);
   105a6:	f7ff fead 	bl	10304 <tx_free>
		net_buf_unref(buf);
   105aa:	4628      	mov	r0, r5
   105ac:	f004 f9ac 	bl	14908 <net_buf_unref>
   105b0:	e7ca      	b.n	10548 <conn_cleanup+0x8>
   105b2:	bf00      	nop
   105b4:	00020483 	.word	0x00020483
   105b8:	0001ead7 	.word	0x0001ead7
   105bc:	2000a3b0 	.word	0x2000a3b0

000105c0 <bt_conn_recv>:
{
   105c0:	b570      	push	{r4, r5, r6, lr}
   105c2:	4616      	mov	r6, r2
   105c4:	4604      	mov	r4, r0
   105c6:	460d      	mov	r5, r1
	tx_notify(conn);
   105c8:	f00a fe59 	bl	1b27e <tx_notify>
	switch (flags) {
   105cc:	2e01      	cmp	r6, #1
   105ce:	d01f      	beq.n	10610 <bt_conn_recv+0x50>
   105d0:	2e02      	cmp	r6, #2
   105d2:	d140      	bne.n	10656 <bt_conn_recv+0x96>
		if (conn->rx) {
   105d4:	6923      	ldr	r3, [r4, #16]
   105d6:	b133      	cbz	r3, 105e6 <bt_conn_recv+0x26>
			BT_ERR("Unexpected first L2CAP frame");
   105d8:	4826      	ldr	r0, [pc, #152]	; (10674 <bt_conn_recv+0xb4>)
   105da:	2145      	movs	r1, #69	; 0x45
   105dc:	f009 fa07 	bl	199ee <printk>
			bt_conn_reset_rx_state(conn);
   105e0:	4620      	mov	r0, r4
   105e2:	f00a fe96 	bl	1b312 <bt_conn_reset_rx_state>
		conn->rx = buf;
   105e6:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   105e8:	6921      	ldr	r1, [r4, #16]
   105ea:	898a      	ldrh	r2, [r1, #12]
   105ec:	2a01      	cmp	r2, #1
   105ee:	d93f      	bls.n	10670 <bt_conn_recv+0xb0>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   105f0:	688b      	ldr	r3, [r1, #8]
   105f2:	881b      	ldrh	r3, [r3, #0]
   105f4:	3304      	adds	r3, #4
   105f6:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   105f8:	429a      	cmp	r2, r3
   105fa:	d339      	bcc.n	10670 <bt_conn_recv+0xb0>
	if (conn->rx->len > acl_total_len) {
   105fc:	d931      	bls.n	10662 <bt_conn_recv+0xa2>
		BT_ERR("ACL len mismatch (%u > %u)",
   105fe:	481e      	ldr	r0, [pc, #120]	; (10678 <bt_conn_recv+0xb8>)
   10600:	2145      	movs	r1, #69	; 0x45
   10602:	f009 f9f4 	bl	199ee <printk>
		bt_conn_reset_rx_state(conn);
   10606:	4620      	mov	r0, r4
}
   10608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1060c:	f00a be81 	b.w	1b312 <bt_conn_reset_rx_state>
		if (!conn->rx) {
   10610:	6920      	ldr	r0, [r4, #16]
   10612:	b938      	cbnz	r0, 10624 <bt_conn_recv+0x64>
			BT_ERR("Unexpected L2CAP continuation");
   10614:	2145      	movs	r1, #69	; 0x45
   10616:	4819      	ldr	r0, [pc, #100]	; (1067c <bt_conn_recv+0xbc>)
			BT_ERR("Not enough buffer space for L2CAP data");
   10618:	f009 f9e9 	bl	199ee <printk>
			bt_conn_reset_rx_state(conn);
   1061c:	4620      	mov	r0, r4
   1061e:	f00a fe78 	bl	1b312 <bt_conn_reset_rx_state>
   10622:	e001      	b.n	10628 <bt_conn_recv+0x68>
		if (!buf->len) {
   10624:	89ae      	ldrh	r6, [r5, #12]
   10626:	b926      	cbnz	r6, 10632 <bt_conn_recv+0x72>
			net_buf_unref(buf);
   10628:	4628      	mov	r0, r5
}
   1062a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1062e:	f004 b96b 	b.w	14908 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   10632:	3008      	adds	r0, #8
   10634:	f00b ff15 	bl	1c462 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   10638:	4286      	cmp	r6, r0
   1063a:	d902      	bls.n	10642 <bt_conn_recv+0x82>
			BT_ERR("Not enough buffer space for L2CAP data");
   1063c:	2145      	movs	r1, #69	; 0x45
   1063e:	4810      	ldr	r0, [pc, #64]	; (10680 <bt_conn_recv+0xc0>)
   10640:	e7ea      	b.n	10618 <bt_conn_recv+0x58>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10642:	6920      	ldr	r0, [r4, #16]
   10644:	89aa      	ldrh	r2, [r5, #12]
   10646:	68a9      	ldr	r1, [r5, #8]
   10648:	3008      	adds	r0, #8
   1064a:	f00b ff12 	bl	1c472 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1064e:	4628      	mov	r0, r5
   10650:	f004 f95a 	bl	14908 <net_buf_unref>
		break;
   10654:	e7c8      	b.n	105e8 <bt_conn_recv+0x28>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   10656:	4632      	mov	r2, r6
   10658:	2145      	movs	r1, #69	; 0x45
   1065a:	480a      	ldr	r0, [pc, #40]	; (10684 <bt_conn_recv+0xc4>)
   1065c:	f009 f9c7 	bl	199ee <printk>
		bt_conn_reset_rx_state(conn);
   10660:	e7dc      	b.n	1061c <bt_conn_recv+0x5c>
	conn->rx = NULL;
   10662:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf);
   10664:	4620      	mov	r0, r4
	conn->rx = NULL;
   10666:	6123      	str	r3, [r4, #16]
}
   10668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   1066c:	f000 bed0 	b.w	11410 <bt_l2cap_recv>
}
   10670:	bd70      	pop	{r4, r5, r6, pc}
   10672:	bf00      	nop
   10674:	000204b3 	.word	0x000204b3
   10678:	00020547 	.word	0x00020547
   1067c:	000204d5 	.word	0x000204d5
   10680:	000204f8 	.word	0x000204f8
   10684:	00020524 	.word	0x00020524

00010688 <bt_conn_send_cb>:
{
   10688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1068c:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1068e:	7a83      	ldrb	r3, [r0, #10]
{
   10690:	4606      	mov	r6, r0
	if (conn->state != BT_CONN_CONNECTED) {
   10692:	2b07      	cmp	r3, #7
{
   10694:	460d      	mov	r5, r1
   10696:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   10698:	d009      	beq.n	106ae <bt_conn_send_cb+0x26>
		BT_ERR("not connected!");
   1069a:	4821      	ldr	r0, [pc, #132]	; (10720 <bt_conn_send_cb+0x98>)
   1069c:	2145      	movs	r1, #69	; 0x45
   1069e:	f009 f9a6 	bl	199ee <printk>
		net_buf_unref(buf);
   106a2:	4628      	mov	r0, r5
   106a4:	f004 f930 	bl	14908 <net_buf_unref>
			return -ENOTCONN;
   106a8:	f06f 0038 	mvn.w	r0, #56	; 0x38
   106ac:	e01a      	b.n	106e4 <bt_conn_send_cb+0x5c>
	if (cb) {
   106ae:	2a00      	cmp	r2, #0
   106b0:	d034      	beq.n	1071c <bt_conn_send_cb+0x94>
	return z_impl_k_current_get();
   106b2:	f007 ffc1 	bl	18638 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   106b6:	4b1b      	ldr	r3, [pc, #108]	; (10724 <bt_conn_send_cb+0x9c>)
   106b8:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   106ba:	481b      	ldr	r0, [pc, #108]	; (10728 <bt_conn_send_cb+0xa0>)
   106bc:	bf07      	ittee	eq
   106be:	2200      	moveq	r2, #0
   106c0:	2300      	moveq	r3, #0
   106c2:	f04f 32ff 	movne.w	r2, #4294967295
   106c6:	f04f 33ff 	movne.w	r3, #4294967295
   106ca:	f006 ff4f 	bl	1756c <z_impl_k_queue_get>
   106ce:	4604      	mov	r4, r0
		if (!tx) {
   106d0:	b950      	cbnz	r0, 106e8 <bt_conn_send_cb+0x60>
			BT_ERR("Unable to allocate TX context");
   106d2:	2145      	movs	r1, #69	; 0x45
   106d4:	4815      	ldr	r0, [pc, #84]	; (1072c <bt_conn_send_cb+0xa4>)
   106d6:	f009 f98a 	bl	199ee <printk>
			net_buf_unref(buf);
   106da:	4628      	mov	r0, r5
   106dc:	f004 f914 	bl	14908 <net_buf_unref>
			return -ENOBUFS;
   106e0:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   106e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   106e8:	7ab3      	ldrb	r3, [r6, #10]
   106ea:	2b07      	cmp	r3, #7
   106ec:	d00a      	beq.n	10704 <bt_conn_send_cb+0x7c>
			BT_WARN("Disconnected while allocating context");
   106ee:	2157      	movs	r1, #87	; 0x57
   106f0:	480f      	ldr	r0, [pc, #60]	; (10730 <bt_conn_send_cb+0xa8>)
   106f2:	f009 f97c 	bl	199ee <printk>
			net_buf_unref(buf);
   106f6:	4628      	mov	r0, r5
   106f8:	f004 f906 	bl	14908 <net_buf_unref>
			tx_free(tx);
   106fc:	4620      	mov	r0, r4
   106fe:	f7ff fe01 	bl	10304 <tx_free>
   10702:	e7d1      	b.n	106a8 <bt_conn_send_cb+0x20>
		tx->pending_no_cb = 0U;
   10704:	2300      	movs	r3, #0
		tx->user_data = user_data;
   10706:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1070a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1070c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1070e:	f106 0034 	add.w	r0, r6, #52	; 0x34
   10712:	4629      	mov	r1, r5
   10714:	f004 f8ca 	bl	148ac <net_buf_put>
	return 0;
   10718:	2000      	movs	r0, #0
   1071a:	e7e3      	b.n	106e4 <bt_conn_send_cb+0x5c>
		tx_data(buf)->tx = NULL;
   1071c:	614a      	str	r2, [r1, #20]
   1071e:	e7f6      	b.n	1070e <bt_conn_send_cb+0x86>
   10720:	00020567 	.word	0x00020567
   10724:	2000a3d0 	.word	0x2000a3d0
   10728:	20008694 	.word	0x20008694
   1072c:	0002057b 	.word	0x0002057b
   10730:	0002059e 	.word	0x0002059e

00010734 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
   10734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   10738:	2500      	movs	r5, #0
   1073a:	4b1c      	ldr	r3, [pc, #112]	; (107ac <bt_conn_prepare_events+0x78>)
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1073c:	462a      	mov	r2, r5
   1073e:	2101      	movs	r1, #1
{
   10740:	4607      	mov	r7, r0
	conn_change.signaled = 0U;
   10742:	609d      	str	r5, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   10744:	2601      	movs	r6, #1
   10746:	f008 ff03 	bl	19550 <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   1074a:	f04f 0914 	mov.w	r9, #20
   1074e:	4c18      	ldr	r4, [pc, #96]	; (107b0 <bt_conn_prepare_events+0x7c>)
	if (!atomic_get(&conn->ref)) {
   10750:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
   10754:	fb09 7806 	mla	r8, r9, r6, r7
	if (!atomic_get(&conn->ref)) {
   10758:	f00a fd8e 	bl	1b278 <atomic_get>
   1075c:	b178      	cbz	r0, 1077e <bt_conn_prepare_events+0x4a>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1075e:	7aa3      	ldrb	r3, [r4, #10]
   10760:	b9ab      	cbnz	r3, 1078e <bt_conn_prepare_events+0x5a>
   10762:	1d23      	adds	r3, r4, #4
   10764:	e8d3 2fef 	ldaex	r2, [r3]
   10768:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1076c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   10770:	2800      	cmp	r0, #0
   10772:	d1f7      	bne.n	10764 <bt_conn_prepare_events+0x30>
   10774:	0653      	lsls	r3, r2, #25
   10776:	d50a      	bpl.n	1078e <bt_conn_prepare_events+0x5a>
		conn_cleanup(conn);
   10778:	4620      	mov	r0, r4
   1077a:	f7ff fee1 	bl	10540 <conn_cleanup>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1077e:	3501      	adds	r5, #1
   10780:	2d0a      	cmp	r5, #10
   10782:	f104 04c0 	add.w	r4, r4, #192	; 0xc0
   10786:	d1e3      	bne.n	10750 <bt_conn_prepare_events+0x1c>
		}
	}
#endif

	return ev_count;
}
   10788:	4630      	mov	r0, r6
   1078a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   1078e:	7aa3      	ldrb	r3, [r4, #10]
   10790:	2b07      	cmp	r3, #7
   10792:	d1f4      	bne.n	1077e <bt_conn_prepare_events+0x4a>
	k_poll_event_init(&events[0],
   10794:	f104 0334 	add.w	r3, r4, #52	; 0x34
   10798:	2200      	movs	r2, #0
   1079a:	2104      	movs	r1, #4
   1079c:	4640      	mov	r0, r8
   1079e:	f008 fed7 	bl	19550 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   107a2:	2301      	movs	r3, #1
   107a4:	f888 300c 	strb.w	r3, [r8, #12]
			ev_count++;
   107a8:	441e      	add	r6, r3
   107aa:	e7e8      	b.n	1077e <bt_conn_prepare_events+0x4a>
   107ac:	20008428 	.word	0x20008428
   107b0:	20008b58 	.word	0x20008b58

000107b4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   107b4:	b570      	push	{r4, r5, r6, lr}
   107b6:	4606      	mov	r6, r0
   107b8:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   107ba:	4810      	ldr	r0, [pc, #64]	; (107fc <bt_conn_add_le+0x48>)
   107bc:	210a      	movs	r1, #10
   107be:	f00a fd84 	bl	1b2ca <bt_conn_new>
	if (!conn) {
   107c2:	4604      	mov	r4, r0
   107c4:	b1b8      	cbz	r0, 107f6 <bt_conn_add_le+0x42>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   107c6:	2230      	movs	r2, #48	; 0x30
   107c8:	2100      	movs	r1, #0
   107ca:	3058      	adds	r0, #88	; 0x58
   107cc:	f00a fb7a 	bl	1aec4 <memset>
   107d0:	4b0b      	ldr	r3, [pc, #44]	; (10800 <bt_conn_add_le+0x4c>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   107d2:	4a0c      	ldr	r2, [pc, #48]	; (10804 <bt_conn_add_le+0x50>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   107d4:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   107d6:	2300      	movs	r3, #0
	memcpy(dst, src, sizeof(*dst));
   107d8:	4629      	mov	r1, r5
   107da:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
   107de:	62a3      	str	r3, [r4, #40]	; 0x28
   107e0:	2207      	movs	r2, #7

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   107e2:	7226      	strb	r6, [r4, #8]
   107e4:	f104 0088 	add.w	r0, r4, #136	; 0x88
   107e8:	f00a fb41 	bl	1ae6e <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   107ec:	2301      	movs	r3, #1
   107ee:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   107f0:	4b05      	ldr	r3, [pc, #20]	; (10808 <bt_conn_add_le+0x54>)
   107f2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   107f6:	4620      	mov	r0, r4
   107f8:	bd70      	pop	{r4, r5, r6, pc}
   107fa:	bf00      	nop
   107fc:	20008b58 	.word	0x20008b58
   10800:	00010e6d 	.word	0x00010e6d
   10804:	0001b2c5 	.word	0x0001b2c5
   10808:	00280018 	.word	0x00280018

0001080c <bt_conn_unref>:

	return conn;
}

void bt_conn_unref(struct bt_conn *conn)
{
   1080c:	b510      	push	{r4, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   1080e:	f100 04b8 	add.w	r4, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10812:	e8d4 3fef 	ldaex	r3, [r4]
   10816:	1e5a      	subs	r2, r3, #1
   10818:	e8c4 2fe1 	stlex	r1, r2, [r4]
   1081c:	2900      	cmp	r1, #0
   1081e:	d1f8      	bne.n	10812 <bt_conn_unref+0x6>

	BT_DBG("handle %u ref %u -> %u", conn->handle, old,
	       atomic_get(&conn->ref));

	__ASSERT(old > 0, "Conn reference counter is 0");
   10820:	2b00      	cmp	r3, #0
   10822:	dc0a      	bgt.n	1083a <bt_conn_unref+0x2e>
   10824:	4909      	ldr	r1, [pc, #36]	; (1084c <bt_conn_unref+0x40>)
   10826:	480a      	ldr	r0, [pc, #40]	; (10850 <bt_conn_unref+0x44>)
   10828:	f240 7265 	movw	r2, #1893	; 0x765
   1082c:	f009 f8df 	bl	199ee <printk>
   10830:	f240 7165 	movw	r1, #1893	; 0x765
   10834:	4805      	ldr	r0, [pc, #20]	; (1084c <bt_conn_unref+0x40>)
   10836:	f009 fb80 	bl	19f3a <assert_post_action>

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    atomic_get(&conn->ref) == 0) {
   1083a:	4620      	mov	r0, r4
   1083c:	f00a fd1c 	bl	1b278 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10840:	b918      	cbnz	r0, 1084a <bt_conn_unref+0x3e>
		bt_le_adv_resume();
	}
}
   10842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   10846:	f7ff bb19 	b.w	fe7c <bt_le_adv_resume>
}
   1084a:	bd10      	pop	{r4, pc}
   1084c:	00020483 	.word	0x00020483
   10850:	0001ead7 	.word	0x0001ead7

00010854 <bt_conn_lookup_handle>:
{
   10854:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   10856:	210a      	movs	r1, #10
   10858:	4801      	ldr	r0, [pc, #4]	; (10860 <bt_conn_lookup_handle+0xc>)
   1085a:	f00a bd9a 	b.w	1b392 <conn_lookup_handle>
   1085e:	bf00      	nop
   10860:	20008b58 	.word	0x20008b58

00010864 <bt_conn_set_state>:
{
   10864:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   10866:	7a85      	ldrb	r5, [r0, #10]
{
   10868:	4604      	mov	r4, r0
	if (conn->state == state) {
   1086a:	428d      	cmp	r5, r1
{
   1086c:	460e      	mov	r6, r1
	if (conn->state == state) {
   1086e:	d10b      	bne.n	10888 <bt_conn_set_state+0x24>
		BT_WARN("no transition %s", state2str(state));
   10870:	2157      	movs	r1, #87	; 0x57
   10872:	2d08      	cmp	r5, #8
   10874:	bf96      	itet	ls
   10876:	4b6d      	ldrls	r3, [pc, #436]	; (10a2c <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
   10878:	4a6d      	ldrhi	r2, [pc, #436]	; (10a30 <bt_conn_set_state+0x1cc>)
   1087a:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		BT_WARN("no transition %s", state2str(state));
   1087e:	486d      	ldr	r0, [pc, #436]	; (10a34 <bt_conn_set_state+0x1d0>)
}
   10880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   10884:	f009 b8b3 	b.w	199ee <printk>
	conn->state = state;
   10888:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1088a:	b165      	cbz	r5, 108a6 <bt_conn_set_state+0x42>
   1088c:	2d06      	cmp	r5, #6
   1088e:	d00d      	beq.n	108ac <bt_conn_set_state+0x48>
	switch (conn->state) {
   10890:	7aa3      	ldrb	r3, [r4, #10]
   10892:	2b08      	cmp	r3, #8
   10894:	f200 80c5 	bhi.w	10a22 <bt_conn_set_state+0x1be>
   10898:	e8df f003 	tbb	[pc, r3]
   1089c:	c7c70f4a 	.word	0xc7c70f4a
   108a0:	278ec7c7 	.word	0x278ec7c7
   108a4:	c7          	.byte	0xc7
   108a5:	00          	.byte	0x00
		bt_conn_ref(conn);
   108a6:	f00a fd5d 	bl	1b364 <bt_conn_ref>
		break;
   108aa:	e7f1      	b.n	10890 <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   108ac:	7883      	ldrb	r3, [r0, #2]
   108ae:	2b01      	cmp	r3, #1
   108b0:	d1ee      	bne.n	10890 <bt_conn_set_state+0x2c>
			k_delayed_work_cancel(&conn->deferred_work);
   108b2:	3058      	adds	r0, #88	; 0x58
   108b4:	f008 f998 	bl	18be8 <k_delayed_work_cancel>
   108b8:	e7ea      	b.n	10890 <bt_conn_set_state+0x2c>
		tx->pending_no_cb = 0U;
   108ba:	2600      	movs	r6, #0
	z_impl_k_sem_give(sem);
   108bc:	4d5e      	ldr	r5, [pc, #376]	; (10a38 <bt_conn_set_state+0x1d4>)
	__asm__ volatile(
   108be:	f04f 0320 	mov.w	r3, #32
   108c2:	f3ef 8211 	mrs	r2, BASEPRI
   108c6:	f383 8811 	msr	BASEPRI, r3
   108ca:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   108ce:	69e3      	ldr	r3, [r4, #28]
   108d0:	2b00      	cmp	r3, #0
   108d2:	f000 8087 	beq.w	109e4 <bt_conn_set_state+0x180>
			conn->pending_no_cb--;
   108d6:	3b01      	subs	r3, #1
   108d8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   108da:	f382 8811 	msr	BASEPRI, r2
   108de:	f3bf 8f6f 	isb	sy
   108e2:	4628      	mov	r0, r5
   108e4:	f007 feae 	bl	18644 <z_impl_k_sem_give>
}
   108e8:	e7e9      	b.n	108be <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   108ea:	78a3      	ldrb	r3, [r4, #2]
   108ec:	2b04      	cmp	r3, #4
   108ee:	f000 809c 	beq.w	10a2a <bt_conn_set_state+0x1c6>
	z_impl_k_queue_init(queue);
   108f2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   108f6:	f00c fbea 	bl	1d0ce <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(signal, result);
   108fa:	2100      	movs	r1, #0
   108fc:	484f      	ldr	r0, [pc, #316]	; (10a3c <bt_conn_set_state+0x1d8>)
   108fe:	f008 ff33 	bl	19768 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   10902:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
   10904:	4620      	mov	r0, r4
	list->tail = NULL;
   10906:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   1090a:	f000 fc8f 	bl	1122c <bt_l2cap_connected>
		notify_connected(conn);
   1090e:	4620      	mov	r0, r4
   10910:	f7ff fd02 	bl	10318 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10914:	78e3      	ldrb	r3, [r4, #3]
   10916:	2b01      	cmp	r3, #1
   10918:	f040 8087 	bne.w	10a2a <bt_conn_set_state+0x1c6>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1091c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   10920:	2300      	movs	r3, #0
   10922:	f104 0158 	add.w	r1, r4, #88	; 0x58
   10926:	4846      	ldr	r0, [pc, #280]	; (10a40 <bt_conn_set_state+0x1dc>)
}
   10928:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1092c:	f008 b8ec 	b.w	18b08 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
   10930:	78a3      	ldrb	r3, [r4, #2]
   10932:	2b04      	cmp	r3, #4
   10934:	d104      	bne.n	10940 <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   10936:	4620      	mov	r0, r4
}
   10938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   1093c:	f7ff bf66 	b.w	1080c <bt_conn_unref>
		switch (old_state) {
   10940:	2d08      	cmp	r5, #8
   10942:	d872      	bhi.n	10a2a <bt_conn_set_state+0x1c6>
   10944:	a301      	add	r3, pc, #4	; (adr r3, 1094c <bt_conn_set_state+0xe8>)
   10946:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   1094a:	bf00      	nop
   1094c:	000109b1 	.word	0x000109b1
   10950:	00010971 	.word	0x00010971
   10954:	000109a3 	.word	0x000109a3
   10958:	00010937 	.word	0x00010937
   1095c:	00010937 	.word	0x00010937
   10960:	000109a3 	.word	0x000109a3
   10964:	000109a3 	.word	0x000109a3
   10968:	000109b1 	.word	0x000109b1
   1096c:	000109b1 	.word	0x000109b1
			tx_notify(conn);
   10970:	4620      	mov	r0, r4
   10972:	f00a fc84 	bl	1b27e <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   10976:	78a3      	ldrb	r3, [r4, #2]
   10978:	2b01      	cmp	r3, #1
   1097a:	d103      	bne.n	10984 <bt_conn_set_state+0x120>
				k_delayed_work_cancel(&conn->deferred_work);
   1097c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   10980:	f008 f932 	bl	18be8 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10984:	3404      	adds	r4, #4
   10986:	e8d4 3fef 	ldaex	r3, [r4]
   1098a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1098e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   10992:	2a00      	cmp	r2, #0
   10994:	d1f7      	bne.n	10986 <bt_conn_set_state+0x122>
}
   10996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1099a:	2100      	movs	r1, #0
   1099c:	4827      	ldr	r0, [pc, #156]	; (10a3c <bt_conn_set_state+0x1d8>)
   1099e:	f008 bee3 	b.w	19768 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   109a2:	7a63      	ldrb	r3, [r4, #9]
   109a4:	2b00      	cmp	r3, #0
   109a6:	d0c6      	beq.n	10936 <bt_conn_set_state+0xd2>
				notify_connected(conn);
   109a8:	4620      	mov	r0, r4
   109aa:	f7ff fcb5 	bl	10318 <notify_connected>
   109ae:	e7c2      	b.n	10936 <bt_conn_set_state+0xd2>
			BT_WARN("Invalid (%u) old state", state);
   109b0:	4632      	mov	r2, r6
   109b2:	2157      	movs	r1, #87	; 0x57
   109b4:	4823      	ldr	r0, [pc, #140]	; (10a44 <bt_conn_set_state+0x1e0>)
   109b6:	e763      	b.n	10880 <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   109b8:	78a3      	ldrb	r3, [r4, #2]
   109ba:	2b01      	cmp	r3, #1
   109bc:	d135      	bne.n	10a2a <bt_conn_set_state+0x1c6>
				K_MSEC(10 * bt_dev.create_param.timeout));
   109be:	4b22      	ldr	r3, [pc, #136]	; (10a48 <bt_conn_set_state+0x1e4>)
   109c0:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   109c4:	8a9d      	ldrh	r5, [r3, #20]
   109c6:	230a      	movs	r3, #10
   109c8:	f240 30e7 	movw	r0, #999	; 0x3e7
   109cc:	2100      	movs	r1, #0
   109ce:	435d      	muls	r5, r3
   109d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   109d4:	2300      	movs	r3, #0
   109d6:	fbc5 0106 	smlal	r0, r1, r5, r6
   109da:	f7f8 f8a7 	bl	8b2c <__aeabi_uldivmod>
   109de:	4602      	mov	r2, r0
   109e0:	460b      	mov	r3, r1
   109e2:	e79e      	b.n	10922 <bt_conn_set_state+0xbe>
	return list->head;
   109e4:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   109e6:	b128      	cbz	r0, 109f4 <bt_conn_set_state+0x190>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   109e8:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   109ea:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   109ec:	4288      	cmp	r0, r1
	list->head = node;
   109ee:	6163      	str	r3, [r4, #20]
	list->tail = node;
   109f0:	bf08      	it	eq
   109f2:	61a3      	streq	r3, [r4, #24]
   109f4:	f382 8811 	msr	BASEPRI, r2
   109f8:	f3bf 8f6f 	isb	sy
		if (!node) {
   109fc:	b1a8      	cbz	r0, 10a2a <bt_conn_set_state+0x1c6>
	__asm__ volatile(
   109fe:	f04f 0220 	mov.w	r2, #32
   10a02:	f3ef 8311 	mrs	r3, BASEPRI
   10a06:	f382 8811 	msr	BASEPRI, r2
   10a0a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   10a0e:	68c2      	ldr	r2, [r0, #12]
   10a10:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   10a12:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   10a14:	f383 8811 	msr	BASEPRI, r3
   10a18:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   10a1c:	f7ff fc72 	bl	10304 <tx_free>
   10a20:	e75f      	b.n	108e2 <bt_conn_set_state+0x7e>
		BT_WARN("no valid (%u) state was set", state);
   10a22:	4632      	mov	r2, r6
   10a24:	2157      	movs	r1, #87	; 0x57
   10a26:	4809      	ldr	r0, [pc, #36]	; (10a4c <bt_conn_set_state+0x1e8>)
   10a28:	e72a      	b.n	10880 <bt_conn_set_state+0x1c>
}
   10a2a:	bd70      	pop	{r4, r5, r6, pc}
   10a2c:	0001dd88 	.word	0x0001dd88
   10a30:	000205c9 	.word	0x000205c9
   10a34:	000205d3 	.word	0x000205d3
   10a38:	200080c8 	.word	0x200080c8
   10a3c:	20008428 	.word	0x20008428
   10a40:	2000a3b0 	.word	0x2000a3b0
   10a44:	000205e9 	.word	0x000205e9
   10a48:	20008000 	.word	0x20008000
   10a4c:	00020605 	.word	0x00020605

00010a50 <bt_conn_lookup_addr_le>:
{
   10a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a54:	4607      	mov	r7, r0
   10a56:	4688      	mov	r8, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   10a58:	2500      	movs	r5, #0
   10a5a:	4e0e      	ldr	r6, [pc, #56]	; (10a94 <bt_conn_lookup_addr_le+0x44>)
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10a5c:	4630      	mov	r0, r6
   10a5e:	f00a fc81 	bl	1b364 <bt_conn_ref>
		if (!conn) {
   10a62:	4604      	mov	r4, r0
   10a64:	b120      	cbz	r0, 10a70 <bt_conn_lookup_addr_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   10a66:	7883      	ldrb	r3, [r0, #2]
   10a68:	2b01      	cmp	r3, #1
   10a6a:	d00a      	beq.n	10a82 <bt_conn_lookup_addr_le+0x32>
			bt_conn_unref(conn);
   10a6c:	f7ff fece 	bl	1080c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   10a70:	3501      	adds	r5, #1
   10a72:	2d0a      	cmp	r5, #10
   10a74:	f106 06c0 	add.w	r6, r6, #192	; 0xc0
   10a78:	d1f0      	bne.n	10a5c <bt_conn_lookup_addr_le+0xc>
	return NULL;
   10a7a:	2400      	movs	r4, #0
}
   10a7c:	4620      	mov	r0, r4
   10a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   10a82:	4642      	mov	r2, r8
   10a84:	4639      	mov	r1, r7
   10a86:	f00a fc4d 	bl	1b324 <bt_conn_is_peer_addr_le>
   10a8a:	2800      	cmp	r0, #0
   10a8c:	d1f6      	bne.n	10a7c <bt_conn_lookup_addr_le+0x2c>
			bt_conn_unref(conn);
   10a8e:	4620      	mov	r0, r4
   10a90:	e7ec      	b.n	10a6c <bt_conn_lookup_addr_le+0x1c>
   10a92:	bf00      	nop
   10a94:	20008b58 	.word	0x20008b58

00010a98 <bt_conn_exists_le>:
{
   10a98:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   10a9a:	f7ff ffd9 	bl	10a50 <bt_conn_lookup_addr_le>
	if (conn) {
   10a9e:	4604      	mov	r4, r0
   10aa0:	b170      	cbz	r0, 10ac0 <bt_conn_exists_le+0x28>
		BT_WARN("Found valid connection in %s state",
   10aa2:	7a83      	ldrb	r3, [r0, #10]
   10aa4:	2157      	movs	r1, #87	; 0x57
   10aa6:	2b08      	cmp	r3, #8
   10aa8:	bf96      	itet	ls
   10aaa:	4a06      	ldrls	r2, [pc, #24]	; (10ac4 <bt_conn_exists_le+0x2c>)
   10aac:	4a06      	ldrhi	r2, [pc, #24]	; (10ac8 <bt_conn_exists_le+0x30>)
   10aae:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   10ab2:	4806      	ldr	r0, [pc, #24]	; (10acc <bt_conn_exists_le+0x34>)
   10ab4:	f008 ff9b 	bl	199ee <printk>
		bt_conn_unref(conn);
   10ab8:	4620      	mov	r0, r4
   10aba:	f7ff fea7 	bl	1080c <bt_conn_unref>
		return true;
   10abe:	2001      	movs	r0, #1
}
   10ac0:	bd10      	pop	{r4, pc}
   10ac2:	bf00      	nop
   10ac4:	0001dd88 	.word	0x0001dd88
   10ac8:	000205c9 	.word	0x000205c9
   10acc:	00020626 	.word	0x00020626

00010ad0 <bt_conn_lookup_state_le>:
{
   10ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10ad4:	4606      	mov	r6, r0
   10ad6:	460f      	mov	r7, r1
   10ad8:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   10ada:	2500      	movs	r5, #0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   10adc:	f04f 09c0 	mov.w	r9, #192	; 0xc0
   10ae0:	f8df a048 	ldr.w	sl, [pc, #72]	; 10b2c <bt_conn_lookup_state_le+0x5c>
   10ae4:	fb09 a005 	mla	r0, r9, r5, sl
   10ae8:	f00a fc3c 	bl	1b364 <bt_conn_ref>
		if (!conn) {
   10aec:	4604      	mov	r4, r0
   10aee:	b120      	cbz	r0, 10afa <bt_conn_lookup_state_le+0x2a>
		if (conn->type != BT_CONN_TYPE_LE) {
   10af0:	7883      	ldrb	r3, [r0, #2]
   10af2:	2b01      	cmp	r3, #1
   10af4:	d006      	beq.n	10b04 <bt_conn_lookup_state_le+0x34>
			bt_conn_ref(conn);
   10af6:	f00a fc35 	bl	1b364 <bt_conn_ref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   10afa:	3501      	adds	r5, #1
   10afc:	2d0a      	cmp	r5, #10
   10afe:	d1f1      	bne.n	10ae4 <bt_conn_lookup_state_le+0x14>
	return NULL;
   10b00:	2400      	movs	r4, #0
   10b02:	e00f      	b.n	10b24 <bt_conn_lookup_state_le+0x54>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   10b04:	b147      	cbz	r7, 10b18 <bt_conn_lookup_state_le+0x48>
   10b06:	463a      	mov	r2, r7
   10b08:	4631      	mov	r1, r6
   10b0a:	f00a fc0b 	bl	1b324 <bt_conn_is_peer_addr_le>
   10b0e:	b918      	cbnz	r0, 10b18 <bt_conn_lookup_state_le+0x48>
			bt_conn_unref(conn);
   10b10:	4620      	mov	r0, r4
   10b12:	f7ff fe7b 	bl	1080c <bt_conn_unref>
			continue;
   10b16:	e7f0      	b.n	10afa <bt_conn_lookup_state_le+0x2a>
		if (!(conn->state == state && conn->id == id)) {
   10b18:	7aa3      	ldrb	r3, [r4, #10]
   10b1a:	4543      	cmp	r3, r8
   10b1c:	d1f8      	bne.n	10b10 <bt_conn_lookup_state_le+0x40>
   10b1e:	7a23      	ldrb	r3, [r4, #8]
   10b20:	42b3      	cmp	r3, r6
   10b22:	d1f5      	bne.n	10b10 <bt_conn_lookup_state_le+0x40>
}
   10b24:	4620      	mov	r0, r4
   10b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10b2a:	bf00      	nop
   10b2c:	20008b58 	.word	0x20008b58

00010b30 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   10b30:	b510      	push	{r4, lr}
	info->type = conn->type;
   10b32:	7882      	ldrb	r2, [r0, #2]
   10b34:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   10b36:	78c4      	ldrb	r4, [r0, #3]
	info->id = conn->id;

	switch (conn->type) {
   10b38:	2a01      	cmp	r2, #1
	info->role = conn->role;
   10b3a:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   10b3c:	7a03      	ldrb	r3, [r0, #8]
   10b3e:	708b      	strb	r3, [r1, #2]
	switch (conn->type) {
   10b40:	d11c      	bne.n	10b7c <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   10b42:	f100 0288 	add.w	r2, r0, #136	; 0x88
   10b46:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   10b48:	4a0e      	ldr	r2, [pc, #56]	; (10b84 <bt_conn_get_info+0x54>)
   10b4a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   10b4e:	4413      	add	r3, r2
   10b50:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_MASTER) {
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   10b52:	f100 0296 	add.w	r2, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   10b56:	f100 038f 	add.w	r3, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_MASTER) {
   10b5a:	b964      	cbnz	r4, 10b76 <bt_conn_get_info+0x46>
			info->le.remote = &conn->le.resp_addr;
   10b5c:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   10b60:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   10b64:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   10b66:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   10b6a:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   10b6c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   10b70:	2000      	movs	r0, #0
		info->le.timeout = conn->le.timeout;
   10b72:	830b      	strh	r3, [r1, #24]
		return 0;
#endif
	}

	return -EINVAL;
}
   10b74:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   10b76:	e9c1 2303 	strd	r2, r3, [r1, #12]
   10b7a:	e7f1      	b.n	10b60 <bt_conn_get_info+0x30>
	return -EINVAL;
   10b7c:	f06f 0015 	mvn.w	r0, #21
   10b80:	e7f8      	b.n	10b74 <bt_conn_get_info+0x44>
   10b82:	bf00      	nop
   10b84:	20008000 	.word	0x20008000

00010b88 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   10b88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   10b8c:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10b8e:	4844      	ldr	r0, [pc, #272]	; (10ca0 <bt_conn_le_create+0x118>)
   10b90:	f00a fb72 	bl	1b278 <atomic_get>
   10b94:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10b96:	0781      	lsls	r1, r0, #30
{
   10b98:	4615      	mov	r5, r2
   10b9a:	461f      	mov	r7, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10b9c:	d576      	bpl.n	10c8c <bt_conn_le_create+0x104>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   10b9e:	4610      	mov	r0, r2
   10ba0:	f00a fac8 	bl	1b134 <bt_le_conn_params_valid>
   10ba4:	b928      	cbnz	r0, 10bb2 <bt_conn_le_create+0x2a>
		return -EINVAL;
   10ba6:	f06f 0515 	mvn.w	r5, #21
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   10baa:	4628      	mov	r0, r5
   10bac:	b002      	add	sp, #8
   10bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10bb2:	483b      	ldr	r0, [pc, #236]	; (10ca0 <bt_conn_le_create+0x118>)
   10bb4:	f00a fb60 	bl	1b278 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   10bb8:	0642      	lsls	r2, r0, #25
   10bba:	d4f4      	bmi.n	10ba6 <bt_conn_le_create+0x1e>
   10bbc:	4838      	ldr	r0, [pc, #224]	; (10ca0 <bt_conn_le_create+0x118>)
   10bbe:	f00a fb5b 	bl	1b278 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   10bc2:	0503      	lsls	r3, r0, #20
   10bc4:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   10bc8:	d463      	bmi.n	10c92 <bt_conn_le_create+0x10a>
	if (!bt_le_scan_random_addr_check()) {
   10bca:	f7fd fee7 	bl	e99c <bt_le_scan_random_addr_check>
   10bce:	2800      	cmp	r0, #0
   10bd0:	d0e9      	beq.n	10ba6 <bt_conn_le_create+0x1e>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   10bd2:	4621      	mov	r1, r4
   10bd4:	4640      	mov	r0, r8
   10bd6:	f7ff ff5f 	bl	10a98 <bt_conn_exists_le>
   10bda:	2800      	cmp	r0, #0
   10bdc:	d1e3      	bne.n	10ba6 <bt_conn_le_create+0x1e>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   10bde:	7823      	ldrb	r3, [r4, #0]
   10be0:	3b02      	subs	r3, #2
   10be2:	2b01      	cmp	r3, #1
   10be4:	d847      	bhi.n	10c76 <bt_conn_le_create+0xee>
   10be6:	2207      	movs	r2, #7
   10be8:	4621      	mov	r1, r4
   10bea:	4668      	mov	r0, sp
   10bec:	f00a f93f 	bl	1ae6e <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   10bf0:	f89d 3000 	ldrb.w	r3, [sp]
   10bf4:	3b02      	subs	r3, #2
   10bf6:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   10bfa:	4669      	mov	r1, sp
   10bfc:	2000      	movs	r0, #0
   10bfe:	f7ff fdd9 	bl	107b4 <bt_conn_add_le>
	if (!conn) {
   10c02:	4604      	mov	r4, r0
   10c04:	2800      	cmp	r0, #0
   10c06:	d047      	beq.n	10c98 <bt_conn_le_create+0x110>
	conn->le.interval_min = param->interval_min;
   10c08:	882b      	ldrh	r3, [r5, #0]
   10c0a:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   10c0e:	886b      	ldrh	r3, [r5, #2]
   10c10:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   10c14:	88ab      	ldrh	r3, [r5, #4]
   10c16:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   10c1a:	88eb      	ldrh	r3, [r5, #6]
	bt_dev.create_param = *param;
   10c1c:	4d21      	ldr	r5, [pc, #132]	; (10ca4 <bt_conn_le_create+0x11c>)
	conn->le.timeout = param->timeout;
   10c1e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	bt_dev.create_param = *param;
   10c22:	f105 0c08 	add.w	ip, r5, #8
   10c26:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   10c2a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   10c2e:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   10c30:	2b00      	cmp	r3, #0
   10c32:	bf08      	it	eq
   10c34:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   10c38:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   10c3a:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   10c3c:	b903      	cbnz	r3, 10c40 <bt_conn_le_create+0xb8>
   10c3e:	89ab      	ldrh	r3, [r5, #12]
   10c40:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   10c42:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   10c44:	b903      	cbnz	r3, 10c48 <bt_conn_le_create+0xc0>
   10c46:	89eb      	ldrh	r3, [r5, #14]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   10c48:	2106      	movs	r1, #6
   10c4a:	4620      	mov	r0, r4
	bt_dev.create_param.window_coded =
   10c4c:	826b      	strh	r3, [r5, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   10c4e:	f7ff fe09 	bl	10864 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   10c52:	4620      	mov	r0, r4
   10c54:	f00a fa51 	bl	1b0fa <bt_le_create_conn>
	if (err) {
   10c58:	4605      	mov	r5, r0
   10c5a:	b1a8      	cbz	r0, 10c88 <bt_conn_le_create+0x100>
		conn->err = 0;
   10c5c:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10c5e:	4620      	mov	r0, r4
   10c60:	4631      	mov	r1, r6
		conn->err = 0;
   10c62:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10c64:	f7ff fdfe 	bl	10864 <bt_conn_set_state>
		bt_conn_unref(conn);
   10c68:	4620      	mov	r0, r4
   10c6a:	f7ff fdcf 	bl	1080c <bt_conn_unref>
		bt_le_scan_update(false);
   10c6e:	4630      	mov	r0, r6
   10c70:	f7fd ff20 	bl	eab4 <bt_le_scan_update>
		return err;
   10c74:	e799      	b.n	10baa <bt_conn_le_create+0x22>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   10c76:	4621      	mov	r1, r4
   10c78:	f00a fa3d 	bl	1b0f6 <bt_lookup_id_addr>
   10c7c:	2207      	movs	r2, #7
   10c7e:	4601      	mov	r1, r0
   10c80:	4668      	mov	r0, sp
   10c82:	f00a f8f4 	bl	1ae6e <memcpy>
}
   10c86:	e7b8      	b.n	10bfa <bt_conn_le_create+0x72>
	*ret_conn = conn;
   10c88:	603c      	str	r4, [r7, #0]
	return 0;
   10c8a:	e78e      	b.n	10baa <bt_conn_le_create+0x22>
		return -EAGAIN;
   10c8c:	f06f 050a 	mvn.w	r5, #10
   10c90:	e78b      	b.n	10baa <bt_conn_le_create+0x22>
		return -EALREADY;
   10c92:	f06f 0544 	mvn.w	r5, #68	; 0x44
   10c96:	e788      	b.n	10baa <bt_conn_le_create+0x22>
		return -ENOMEM;
   10c98:	f06f 050b 	mvn.w	r5, #11
   10c9c:	e785      	b.n	10baa <bt_conn_le_create+0x22>
   10c9e:	bf00      	nop
   10ca0:	20008094 	.word	0x20008094
   10ca4:	20008000 	.word	0x20008000

00010ca8 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_WHITELIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   10ca8:	b570      	push	{r4, r5, r6, lr}
   10caa:	4606      	mov	r6, r0
   10cac:	4834      	ldr	r0, [pc, #208]	; (10d80 <bt_le_set_auto_conn+0xd8>)
   10cae:	f00a fae3 	bl	1b278 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10cb2:	0780      	lsls	r0, r0, #30
{
   10cb4:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   10cb6:	d55c      	bpl.n	10d72 <bt_le_set_auto_conn+0xca>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   10cb8:	b929      	cbnz	r1, 10cc6 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_le_scan_random_addr_check()) {
   10cba:	f7fd fe6f 	bl	e99c <bt_le_scan_random_addr_check>
   10cbe:	b940      	cbnz	r0, 10cd2 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   10cc0:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   10cc4:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   10cc6:	4608      	mov	r0, r1
   10cc8:	f00a fa34 	bl	1b134 <bt_le_conn_params_valid>
   10ccc:	2800      	cmp	r0, #0
   10cce:	d1f4      	bne.n	10cba <bt_le_set_auto_conn+0x12>
   10cd0:	e7f6      	b.n	10cc0 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   10cd2:	4631      	mov	r1, r6
   10cd4:	2000      	movs	r0, #0
   10cd6:	f7ff febb 	bl	10a50 <bt_conn_lookup_addr_le>
	if (!conn) {
   10cda:	4604      	mov	r4, r0
   10cdc:	b928      	cbnz	r0, 10cea <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   10cde:	4631      	mov	r1, r6
   10ce0:	f7ff fd68 	bl	107b4 <bt_conn_add_le>
		if (!conn) {
   10ce4:	4604      	mov	r4, r0
   10ce6:	2800      	cmp	r0, #0
   10ce8:	d046      	beq.n	10d78 <bt_le_set_auto_conn+0xd0>
		if (!atomic_test_and_set_bit(conn->flags,
   10cea:	1d23      	adds	r3, r4, #4
	if (param) {
   10cec:	b365      	cbz	r5, 10d48 <bt_le_set_auto_conn+0xa0>
	conn->le.interval_min = param->interval_min;
   10cee:	882a      	ldrh	r2, [r5, #0]
   10cf0:	f8a4 20a0 	strh.w	r2, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   10cf4:	886a      	ldrh	r2, [r5, #2]
   10cf6:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
   10cfa:	88aa      	ldrh	r2, [r5, #4]
   10cfc:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   10d00:	88ea      	ldrh	r2, [r5, #6]
   10d02:	f8a4 20a6 	strh.w	r2, [r4, #166]	; 0xa6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10d06:	e8d3 2fef 	ldaex	r2, [r3]
   10d0a:	f042 0101 	orr.w	r1, r2, #1
   10d0e:	e8c3 1fe0 	stlex	r0, r1, [r3]
   10d12:	2800      	cmp	r0, #0
   10d14:	d1f7      	bne.n	10d06 <bt_le_set_auto_conn+0x5e>
		if (!atomic_test_and_set_bit(conn->flags,
   10d16:	07d1      	lsls	r1, r2, #31
   10d18:	d402      	bmi.n	10d20 <bt_le_set_auto_conn+0x78>
			bt_conn_ref(conn);
   10d1a:	4620      	mov	r0, r4
   10d1c:	f00a fb22 	bl	1b364 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   10d20:	7aa3      	ldrb	r3, [r4, #10]
   10d22:	b963      	cbnz	r3, 10d3e <bt_le_set_auto_conn+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10d24:	4816      	ldr	r0, [pc, #88]	; (10d80 <bt_le_set_auto_conn+0xd8>)
   10d26:	f00a faa7 	bl	1b278 <atomic_get>
   10d2a:	0783      	lsls	r3, r0, #30
   10d2c:	d507      	bpl.n	10d3e <bt_le_set_auto_conn+0x96>
		if (param) {
   10d2e:	b11d      	cbz	r5, 10d38 <bt_le_set_auto_conn+0x90>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   10d30:	2102      	movs	r1, #2
   10d32:	4620      	mov	r0, r4
   10d34:	f7ff fd96 	bl	10864 <bt_conn_set_state>
		bt_le_scan_update(false);
   10d38:	2000      	movs	r0, #0
   10d3a:	f7fd febb 	bl	eab4 <bt_le_scan_update>
	bt_conn_unref(conn);
   10d3e:	4620      	mov	r0, r4
   10d40:	f7ff fd64 	bl	1080c <bt_conn_unref>
	return 0;
   10d44:	2000      	movs	r0, #0
   10d46:	e7bd      	b.n	10cc4 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10d48:	e8d3 2fef 	ldaex	r2, [r3]
   10d4c:	f022 0101 	bic.w	r1, r2, #1
   10d50:	e8c3 1fe0 	stlex	r0, r1, [r3]
   10d54:	2800      	cmp	r0, #0
   10d56:	d1f7      	bne.n	10d48 <bt_le_set_auto_conn+0xa0>
		if (atomic_test_and_clear_bit(conn->flags,
   10d58:	07d2      	lsls	r2, r2, #31
   10d5a:	d5e1      	bpl.n	10d20 <bt_le_set_auto_conn+0x78>
			bt_conn_unref(conn);
   10d5c:	4620      	mov	r0, r4
   10d5e:	f7ff fd55 	bl	1080c <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   10d62:	7aa3      	ldrb	r3, [r4, #10]
   10d64:	2b02      	cmp	r3, #2
   10d66:	d1db      	bne.n	10d20 <bt_le_set_auto_conn+0x78>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10d68:	4629      	mov	r1, r5
   10d6a:	4620      	mov	r0, r4
   10d6c:	f7ff fd7a 	bl	10864 <bt_conn_set_state>
   10d70:	e7d6      	b.n	10d20 <bt_le_set_auto_conn+0x78>
		return -EAGAIN;
   10d72:	f06f 000a 	mvn.w	r0, #10
   10d76:	e7a5      	b.n	10cc4 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   10d78:	f06f 000b 	mvn.w	r0, #11
   10d7c:	e7a2      	b.n	10cc4 <bt_le_set_auto_conn+0x1c>
   10d7e:	bf00      	nop
   10d80:	20008094 	.word	0x20008094

00010d84 <bt_conn_disconnect>:
{
   10d84:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10d86:	7883      	ldrb	r3, [r0, #2]
{
   10d88:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10d8a:	2b01      	cmp	r3, #1
{
   10d8c:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10d8e:	d103      	bne.n	10d98 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   10d90:	2100      	movs	r1, #0
   10d92:	3088      	adds	r0, #136	; 0x88
   10d94:	f7ff ff88 	bl	10ca8 <bt_le_set_auto_conn>
	switch (conn->state) {
   10d98:	7aa3      	ldrb	r3, [r4, #10]
   10d9a:	3b02      	subs	r3, #2
   10d9c:	2b06      	cmp	r3, #6
   10d9e:	d805      	bhi.n	10dac <bt_conn_disconnect+0x28>
   10da0:	e8df f003 	tbb	[pc, r3]
   10da4:	12040408 	.word	0x12040408
   10da8:	271f      	.short	0x271f
   10daa:	10          	.byte	0x10
   10dab:	00          	.byte	0x00
   10dac:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   10db0:	4628      	mov	r0, r5
   10db2:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10db4:	4620      	mov	r0, r4
   10db6:	2100      	movs	r1, #0
		conn->err = reason;
   10db8:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10dba:	f7ff fd53 	bl	10864 <bt_conn_set_state>
			bt_le_scan_update(false);
   10dbe:	2000      	movs	r0, #0
   10dc0:	f7fd fe78 	bl	eab4 <bt_le_scan_update>
		return 0;
   10dc4:	2500      	movs	r5, #0
   10dc6:	e7f3      	b.n	10db0 <bt_conn_disconnect+0x2c>
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
   10dc8:	2157      	movs	r1, #87	; 0x57
   10dca:	4810      	ldr	r0, [pc, #64]	; (10e0c <bt_conn_disconnect+0x88>)
   10dcc:	f008 fe0f 	bl	199ee <printk>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10dd0:	4620      	mov	r0, r4
		conn->err = reason;
   10dd2:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   10dd4:	2100      	movs	r1, #0
   10dd6:	f7ff fd45 	bl	10864 <bt_conn_set_state>
}
   10dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   10dde:	f7fe bff1 	b.w	fdc4 <bt_le_adv_stop>
			k_delayed_work_cancel(&conn->deferred_work);
   10de2:	f104 0058 	add.w	r0, r4, #88	; 0x58
   10de6:	f007 feff 	bl	18be8 <k_delayed_work_cancel>
}
   10dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   10dee:	f7fd be3d 	b.w	ea6c <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   10df2:	4629      	mov	r1, r5
   10df4:	8820      	ldrh	r0, [r4, #0]
   10df6:	f00a f982 	bl	1b0fe <bt_hci_disconnect>
	if (err) {
   10dfa:	4605      	mov	r5, r0
   10dfc:	2800      	cmp	r0, #0
   10dfe:	d1d7      	bne.n	10db0 <bt_conn_disconnect+0x2c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   10e00:	2108      	movs	r1, #8
   10e02:	4620      	mov	r0, r4
   10e04:	f7ff fd2e 	bl	10864 <bt_conn_set_state>
	return 0;
   10e08:	e7d2      	b.n	10db0 <bt_conn_disconnect+0x2c>
   10e0a:	bf00      	nop
   10e0c:	0002064e 	.word	0x0002064e

00010e10 <send_conn_le_param_update>:
{
   10e10:	b538      	push	{r3, r4, r5, lr}
   10e12:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   10e14:	4608      	mov	r0, r1
{
   10e16:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   10e18:	f00a f98c 	bl	1b134 <bt_le_conn_params_valid>
   10e1c:	b308      	cbz	r0, 10e62 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   10e1e:	4b12      	ldr	r3, [pc, #72]	; (10e68 <send_conn_le_param_update+0x58>)
   10e20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
   10e24:	0799      	lsls	r1, r3, #30
   10e26:	d407      	bmi.n	10e38 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   10e28:	78e3      	ldrb	r3, [r4, #3]
   10e2a:	b173      	cbz	r3, 10e4a <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   10e2c:	4629      	mov	r1, r5
   10e2e:	4620      	mov	r0, r4
}
   10e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   10e34:	f000 bb14 	b.w	11460 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   10e38:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   10e3c:	079a      	lsls	r2, r3, #30
   10e3e:	d5f3      	bpl.n	10e28 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   10e40:	1d20      	adds	r0, r4, #4
   10e42:	f00a fa19 	bl	1b278 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   10e46:	0543      	lsls	r3, r0, #21
   10e48:	d4ee      	bmi.n	10e28 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   10e4a:	4629      	mov	r1, r5
   10e4c:	4620      	mov	r0, r4
   10e4e:	f00a fac4 	bl	1b3da <bt_conn_le_conn_update>
		if (rc == 0) {
   10e52:	b928      	cbnz	r0, 10e60 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
   10e54:	88ab      	ldrh	r3, [r5, #4]
   10e56:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   10e5a:	88eb      	ldrh	r3, [r5, #6]
   10e5c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   10e60:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   10e62:	f06f 0015 	mvn.w	r0, #21
   10e66:	e7fb      	b.n	10e60 <send_conn_le_param_update+0x50>
   10e68:	20008000 	.word	0x20008000

00010e6c <deferred_work>:
{
   10e6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   10e6e:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   10e72:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   10e74:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   10e78:	b99b      	cbnz	r3, 10ea2 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   10e7a:	4630      	mov	r0, r6
   10e7c:	f00a fb0d 	bl	1b49a <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   10e80:	4b26      	ldr	r3, [pc, #152]	; (10f1c <deferred_work+0xb0>)
   10e82:	681d      	ldr	r5, [r3, #0]
   10e84:	b92d      	cbnz	r5, 10e92 <deferred_work+0x26>
		bt_conn_unref(conn);
   10e86:	4630      	mov	r0, r6
}
   10e88:	b002      	add	sp, #8
   10e8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   10e8e:	f7ff bcbd 	b.w	1080c <bt_conn_unref>
		if (cb->disconnected) {
   10e92:	686b      	ldr	r3, [r5, #4]
   10e94:	b11b      	cbz	r3, 10e9e <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   10e96:	4630      	mov	r0, r6
   10e98:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   10e9c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   10e9e:	692d      	ldr	r5, [r5, #16]
   10ea0:	e7f0      	b.n	10e84 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   10ea2:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   10ea6:	2b01      	cmp	r3, #1
   10ea8:	d12f      	bne.n	10f0a <deferred_work+0x9e>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10eaa:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   10eae:	b923      	cbnz	r3, 10eba <deferred_work+0x4e>
}
   10eb0:	b002      	add	sp, #8
   10eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_le_create_conn_cancel();
   10eb6:	f7fd bdd9 	b.w	ea6c <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   10eba:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10ebe:	e8d5 3fef 	ldaex	r3, [r5]
   10ec2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   10ec6:	e8c5 2fe1 	stlex	r1, r2, [r5]
   10eca:	2900      	cmp	r1, #0
   10ecc:	d1f7      	bne.n	10ebe <deferred_work+0x52>
   10ece:	059b      	lsls	r3, r3, #22
   10ed0:	d51d      	bpl.n	10f0e <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   10ed2:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   10ed6:	f8ad 3000 	strh.w	r3, [sp]
   10eda:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   10ede:	f8ad 3002 	strh.w	r3, [sp, #2]
   10ee2:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   10ee6:	f8ad 3004 	strh.w	r3, [sp, #4]
   10eea:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   10eee:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   10ef2:	4669      	mov	r1, sp
   10ef4:	4630      	mov	r0, r6
   10ef6:	f7ff ff8b 	bl	10e10 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10efa:	e8d5 3fef 	ldaex	r3, [r5]
   10efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   10f02:	e8c5 3fe2 	stlex	r2, r3, [r5]
   10f06:	2a00      	cmp	r2, #0
   10f08:	d1f7      	bne.n	10efa <deferred_work+0x8e>
}
   10f0a:	b002      	add	sp, #8
   10f0c:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
   10f0e:	466b      	mov	r3, sp
   10f10:	4a03      	ldr	r2, [pc, #12]	; (10f20 <deferred_work+0xb4>)
   10f12:	6810      	ldr	r0, [r2, #0]
   10f14:	6851      	ldr	r1, [r2, #4]
   10f16:	c303      	stmia	r3!, {r0, r1}
   10f18:	e7eb      	b.n	10ef2 <deferred_work+0x86>
   10f1a:	bf00      	nop
   10f1c:	2000a968 	.word	0x2000a968
   10f20:	0001d8d8 	.word	0x0001d8d8

00010f24 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   10f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10f26:	4604      	mov	r4, r0
   10f28:	460d      	mov	r5, r1
   10f2a:	4617      	mov	r7, r2
   10f2c:	461e      	mov	r6, r3

	/*
	 * PDU must not be allocated from ISR as we block with 'K_FOREVER'
	 * during the allocation
	 */
	__ASSERT_NO_MSG(!k_is_in_isr());
   10f2e:	f00c f943 	bl	1d1b8 <k_is_in_isr>
   10f32:	b150      	cbz	r0, 10f4a <bt_conn_create_pdu_timeout+0x26>
   10f34:	490f      	ldr	r1, [pc, #60]	; (10f74 <bt_conn_create_pdu_timeout+0x50>)
   10f36:	4810      	ldr	r0, [pc, #64]	; (10f78 <bt_conn_create_pdu_timeout+0x54>)
   10f38:	f640 12ee 	movw	r2, #2542	; 0x9ee
   10f3c:	f008 fd57 	bl	199ee <printk>
   10f40:	f640 11ee 	movw	r1, #2542	; 0x9ee
   10f44:	480b      	ldr	r0, [pc, #44]	; (10f74 <bt_conn_create_pdu_timeout+0x50>)
   10f46:	f008 fff8 	bl	19f3a <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   10f4a:	480c      	ldr	r0, [pc, #48]	; (10f7c <bt_conn_create_pdu_timeout+0x58>)
   10f4c:	463a      	mov	r2, r7
   10f4e:	2c00      	cmp	r4, #0
   10f50:	bf18      	it	ne
   10f52:	4620      	movne	r0, r4
   10f54:	4633      	mov	r3, r6
   10f56:	f00b fa5e 	bl	1c416 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   10f5a:	4604      	mov	r4, r0
   10f5c:	b928      	cbnz	r0, 10f6a <bt_conn_create_pdu_timeout+0x46>
		BT_WARN("Unable to allocate buffer within timeout");
   10f5e:	2157      	movs	r1, #87	; 0x57
   10f60:	4807      	ldr	r0, [pc, #28]	; (10f80 <bt_conn_create_pdu_timeout+0x5c>)
   10f62:	f008 fd44 	bl	199ee <printk>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   10f66:	4620      	mov	r0, r4
   10f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   10f6a:	1d69      	adds	r1, r5, #5
   10f6c:	3008      	adds	r0, #8
   10f6e:	f003 fc79 	bl	14864 <net_buf_simple_reserve>
	return buf;
   10f72:	e7f8      	b.n	10f66 <bt_conn_create_pdu_timeout+0x42>
   10f74:	00020483 	.word	0x00020483
   10f78:	0001ead7 	.word	0x0001ead7
   10f7c:	200086dc 	.word	0x200086dc
   10f80:	0002067a 	.word	0x0002067a

00010f84 <bt_conn_create_frag_timeout>:
{
   10f84:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   10f86:	4801      	ldr	r0, [pc, #4]	; (10f8c <bt_conn_create_frag_timeout+0x8>)
   10f88:	f7ff bfcc 	b.w	10f24 <bt_conn_create_pdu_timeout>
   10f8c:	20008734 	.word	0x20008734

00010f90 <create_frag>:
{
   10f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f94:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   10f96:	f04f 33ff 	mov.w	r3, #4294967295
   10f9a:	f04f 32ff 	mov.w	r2, #4294967295
   10f9e:	2000      	movs	r0, #0
{
   10fa0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   10fa2:	f7ff ffef 	bl	10f84 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   10fa6:	7ab3      	ldrb	r3, [r6, #10]
		frag = bt_conn_create_frag(0);
   10fa8:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   10faa:	2b07      	cmp	r3, #7
   10fac:	f04f 0600 	mov.w	r6, #0
   10fb0:	d005      	beq.n	10fbe <create_frag+0x2e>
		net_buf_unref(frag);
   10fb2:	f003 fca9 	bl	14908 <net_buf_unref>
		return NULL;
   10fb6:	4635      	mov	r5, r6
}
   10fb8:	4628      	mov	r0, r5
   10fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   10fbe:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   10fc0:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   10fc4:	4e0c      	ldr	r6, [pc, #48]	; (10ff8 <create_frag+0x68>)
   10fc6:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   10fc8:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
   10fcc:	f00b fa49 	bl	1c462 <net_buf_simple_tailroom>
   10fd0:	4580      	cmp	r8, r0
   10fd2:	d20c      	bcs.n	10fee <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   10fd4:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   10fd8:	f854 1f08 	ldr.w	r1, [r4, #8]!
   10fdc:	4632      	mov	r2, r6
   10fde:	4638      	mov	r0, r7
   10fe0:	f00b fa47 	bl	1c472 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   10fe4:	4631      	mov	r1, r6
   10fe6:	4620      	mov	r0, r4
   10fe8:	f003 fd6a 	bl	14ac0 <net_buf_simple_pull>
   10fec:	e7e4      	b.n	10fb8 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   10fee:	4638      	mov	r0, r7
   10ff0:	f00b fa37 	bl	1c462 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   10ff4:	b286      	uxth	r6, r0
   10ff6:	e7ef      	b.n	10fd8 <create_frag+0x48>
   10ff8:	20008000 	.word	0x20008000

00010ffc <bt_conn_process_tx>:
{
   10ffc:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   10ffe:	7a83      	ldrb	r3, [r0, #10]
{
   11000:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   11002:	b973      	cbnz	r3, 11022 <bt_conn_process_tx+0x26>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11004:	1d03      	adds	r3, r0, #4
   11006:	e8d3 2fef 	ldaex	r2, [r3]
   1100a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1100e:	e8c3 1fe5 	stlex	r5, r1, [r3]
   11012:	2d00      	cmp	r5, #0
   11014:	d1f7      	bne.n	11006 <bt_conn_process_tx+0xa>
   11016:	0653      	lsls	r3, r2, #25
   11018:	d503      	bpl.n	11022 <bt_conn_process_tx+0x26>
}
   1101a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   1101e:	f7ff ba8f 	b.w	10540 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   11022:	2200      	movs	r2, #0
   11024:	2300      	movs	r3, #0
   11026:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1102a:	f003 fbeb 	bl	14804 <net_buf_get>
	BT_ASSERT(buf);
   1102e:	4605      	mov	r5, r0
   11030:	b958      	cbnz	r0, 1104a <bt_conn_process_tx+0x4e>
   11032:	f240 525f 	movw	r2, #1375	; 0x55f
   11036:	491e      	ldr	r1, [pc, #120]	; (110b0 <bt_conn_process_tx+0xb4>)
   11038:	481e      	ldr	r0, [pc, #120]	; (110b4 <bt_conn_process_tx+0xb8>)
   1103a:	f008 fcd8 	bl	199ee <printk>
   1103e:	4040      	eors	r0, r0
   11040:	f380 8811 	msr	BASEPRI, r0
   11044:	f04f 0003 	mov.w	r0, #3
   11048:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1104a:	4e1b      	ldr	r6, [pc, #108]	; (110b8 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
   1104c:	89aa      	ldrh	r2, [r5, #12]
   1104e:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11052:	429a      	cmp	r2, r3
   11054:	d807      	bhi.n	11066 <bt_conn_process_tx+0x6a>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   11056:	2300      	movs	r3, #0
   11058:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1105a:	4629      	mov	r1, r5
   1105c:	4620      	mov	r0, r4
   1105e:	f7ff f971 	bl	10344 <send_frag>
	if (!send_buf(conn, buf)) {
   11062:	b130      	cbz	r0, 11072 <bt_conn_process_tx+0x76>
}
   11064:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   11066:	4629      	mov	r1, r5
   11068:	4620      	mov	r0, r4
   1106a:	f7ff ff91 	bl	10f90 <create_frag>
	if (!frag) {
   1106e:	4601      	mov	r1, r0
   11070:	b920      	cbnz	r0, 1107c <bt_conn_process_tx+0x80>
		net_buf_unref(buf);
   11072:	4628      	mov	r0, r5
}
   11074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   11078:	f003 bc46 	b.w	14908 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1107c:	2301      	movs	r3, #1
   1107e:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   11080:	4620      	mov	r0, r4
   11082:	f7ff f95f 	bl	10344 <send_frag>
   11086:	2800      	cmp	r0, #0
   11088:	d0f3      	beq.n	11072 <bt_conn_process_tx+0x76>
	while (buf->len > conn_mtu(conn)) {
   1108a:	89aa      	ldrh	r2, [r5, #12]
   1108c:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   11090:	429a      	cmp	r2, r3
   11092:	d802      	bhi.n	1109a <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   11094:	2300      	movs	r3, #0
   11096:	2203      	movs	r2, #3
   11098:	e7df      	b.n	1105a <bt_conn_process_tx+0x5e>
		frag = create_frag(conn, buf);
   1109a:	4629      	mov	r1, r5
   1109c:	4620      	mov	r0, r4
   1109e:	f7ff ff77 	bl	10f90 <create_frag>
		if (!frag) {
   110a2:	4601      	mov	r1, r0
   110a4:	2800      	cmp	r0, #0
   110a6:	d0e4      	beq.n	11072 <bt_conn_process_tx+0x76>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   110a8:	2301      	movs	r3, #1
   110aa:	461a      	mov	r2, r3
   110ac:	e7e8      	b.n	11080 <bt_conn_process_tx+0x84>
   110ae:	bf00      	nop
   110b0:	00020483 	.word	0x00020483
   110b4:	0001ead7 	.word	0x0001ead7
   110b8:	20008000 	.word	0x20008000

000110bc <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   110bc:	4b0b      	ldr	r3, [pc, #44]	; (110ec <bt_conn_index+0x30>)
{
   110be:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   110c0:	1ac0      	subs	r0, r0, r3
   110c2:	4b0b      	ldr	r3, [pc, #44]	; (110f0 <bt_conn_index+0x34>)
   110c4:	1184      	asrs	r4, r0, #6
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   110c6:	f5b0 6fd8 	cmp.w	r0, #1728	; 0x6c0
		index = conn - acl_conns;
   110ca:	fb03 f404 	mul.w	r4, r3, r4
		__ASSERT(0 <= index && index < ARRAY_SIZE(acl_conns),
   110ce:	d90a      	bls.n	110e6 <bt_conn_index+0x2a>
   110d0:	4908      	ldr	r1, [pc, #32]	; (110f4 <bt_conn_index+0x38>)
   110d2:	4809      	ldr	r0, [pc, #36]	; (110f8 <bt_conn_index+0x3c>)
   110d4:	f640 2295 	movw	r2, #2709	; 0xa95
   110d8:	f008 fc89 	bl	199ee <printk>
   110dc:	f640 2195 	movw	r1, #2709	; 0xa95
   110e0:	4804      	ldr	r0, [pc, #16]	; (110f4 <bt_conn_index+0x38>)
   110e2:	f008 ff2a 	bl	19f3a <assert_post_action>
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   110e6:	b2e0      	uxtb	r0, r4
   110e8:	bd10      	pop	{r4, pc}
   110ea:	bf00      	nop
   110ec:	20008b58 	.word	0x20008b58
   110f0:	aaaaaaab 	.word	0xaaaaaaab
   110f4:	00020483 	.word	0x00020483
   110f8:	0001ead7 	.word	0x0001ead7

000110fc <bt_conn_lookup_index>:

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   110fc:	2809      	cmp	r0, #9
   110fe:	d806      	bhi.n	1110e <bt_conn_lookup_index+0x12>
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   11100:	4b04      	ldr	r3, [pc, #16]	; (11114 <bt_conn_lookup_index+0x18>)
   11102:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11106:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1110a:	f00a b92b 	b.w	1b364 <bt_conn_ref>
}
   1110e:	2000      	movs	r0, #0
   11110:	4770      	bx	lr
   11112:	bf00      	nop
   11114:	20008b58 	.word	0x20008b58

00011118 <bt_conn_init>:

int bt_conn_init(void)
{
   11118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1111a:	4917      	ldr	r1, [pc, #92]	; (11178 <bt_conn_init+0x60>)
   1111c:	4817      	ldr	r0, [pc, #92]	; (1117c <bt_conn_init+0x64>)
   1111e:	f00b ffe3 	bl	1d0e8 <k_queue_append>
   11122:	4917      	ldr	r1, [pc, #92]	; (11180 <bt_conn_init+0x68>)
   11124:	4815      	ldr	r0, [pc, #84]	; (1117c <bt_conn_init+0x64>)
   11126:	f00b ffdf 	bl	1d0e8 <k_queue_append>
   1112a:	4916      	ldr	r1, [pc, #88]	; (11184 <bt_conn_init+0x6c>)
   1112c:	4813      	ldr	r0, [pc, #76]	; (1117c <bt_conn_init+0x64>)
   1112e:	f00b ffdb 	bl	1d0e8 <k_queue_append>
	}

	bt_att_init();
   11132:	f00a fd32 	bl	1bb9a <bt_att_init>

	err = bt_smp_init();
   11136:	f00b f96b 	bl	1c410 <bt_smp_init>
	if (err) {
   1113a:	4605      	mov	r5, r0
   1113c:	b9d0      	cbnz	r0, 11174 <bt_conn_init+0x5c>
		return err;
	}

	bt_l2cap_init();
   1113e:	f00a fa15 	bl	1b56c <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   11142:	462e      	mov	r6, r5
   11144:	4f10      	ldr	r7, [pc, #64]	; (11188 <bt_conn_init+0x70>)
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   11146:	4638      	mov	r0, r7
   11148:	f00a f90c 	bl	1b364 <bt_conn_ref>

			if (!conn) {
   1114c:	4604      	mov	r4, r0
   1114e:	b160      	cbz	r0, 1116a <bt_conn_init+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   11150:	3004      	adds	r0, #4
   11152:	f00a f891 	bl	1b278 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_WHITELIST)
			if (atomic_test_bit(conn->flags,
   11156:	07c3      	lsls	r3, r0, #31
   11158:	d504      	bpl.n	11164 <bt_conn_init+0x4c>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1115a:	2102      	movs	r1, #2
   1115c:	4620      	mov	r0, r4
				conn->id = BT_ID_DEFAULT;
   1115e:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   11160:	f7ff fb80 	bl	10864 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_WHITELIST) */

			bt_conn_unref(conn);
   11164:	4620      	mov	r0, r4
   11166:	f7ff fb51 	bl	1080c <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1116a:	3601      	adds	r6, #1
   1116c:	2e0a      	cmp	r6, #10
   1116e:	f107 07c0 	add.w	r7, r7, #192	; 0xc0
   11172:	d1e8      	bne.n	11146 <bt_conn_init+0x2e>
		}
	}

	return 0;
}
   11174:	4628      	mov	r0, r5
   11176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11178:	2000a96c 	.word	0x2000a96c
   1117c:	20008694 	.word	0x20008694
   11180:	2000a97c 	.word	0x2000a97c
   11184:	2000a98c 	.word	0x2000a98c
   11188:	20008b58 	.word	0x20008b58

0001118c <l2cap_accept>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1118c:	b570      	push	{r4, r5, r6, lr}
   1118e:	4602      	mov	r2, r0
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   11190:	2400      	movs	r4, #0
   11192:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   11194:	4b09      	ldr	r3, [pc, #36]	; (111bc <l2cap_accept+0x30>)
   11196:	fb06 f504 	mul.w	r5, r6, r4
   1119a:	58e8      	ldr	r0, [r5, r3]
   1119c:	b148      	cbz	r0, 111b2 <l2cap_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1119e:	3401      	adds	r4, #1
   111a0:	2c0a      	cmp	r4, #10
   111a2:	d1f8      	bne.n	11196 <l2cap_accept+0xa>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   111a4:	4806      	ldr	r0, [pc, #24]	; (111c0 <l2cap_accept+0x34>)
   111a6:	2145      	movs	r1, #69	; 0x45
   111a8:	f008 fc21 	bl	199ee <printk>
   111ac:	f06f 000b 	mvn.w	r0, #11
   111b0:	e003      	b.n	111ba <l2cap_accept+0x2e>
		l2cap->chan.chan.ops = &ops;
   111b2:	4a04      	ldr	r2, [pc, #16]	; (111c4 <l2cap_accept+0x38>)
   111b4:	442b      	add	r3, r5
   111b6:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   111b8:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   111ba:	bd70      	pop	{r4, r5, r6, pc}
   111bc:	200092d8 	.word	0x200092d8
   111c0:	00020712 	.word	0x00020712
   111c4:	0001ddcc 	.word	0x0001ddcc

000111c8 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   111c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   111ca:	4605      	mov	r5, r0
   111cc:	460f      	mov	r7, r1
   111ce:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   111d0:	2300      	movs	r3, #0
   111d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   111d6:	2104      	movs	r1, #4
   111d8:	2000      	movs	r0, #0
   111da:	f7ff fea3 	bl	10f24 <bt_conn_create_pdu_timeout>
	if (!buf) {
   111de:	4604      	mov	r4, r0
   111e0:	b930      	cbnz	r0, 111f0 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   111e2:	462a      	mov	r2, r5
   111e4:	2145      	movs	r1, #69	; 0x45
   111e6:	4806      	ldr	r0, [pc, #24]	; (11200 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   111e8:	f008 fc01 	bl	199ee <printk>
}
   111ec:	4620      	mov	r0, r4
   111ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   111f0:	2104      	movs	r1, #4
   111f2:	3008      	adds	r0, #8
   111f4:	f003 fc9e 	bl	14b34 <net_buf_simple_add>
	hdr->code = code;
   111f8:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   111fa:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   111fc:	8046      	strh	r6, [r0, #2]
	return buf;
   111fe:	e7f5      	b.n	111ec <l2cap_create_le_sig_pdu.constprop.0+0x24>
   11200:	0002073e 	.word	0x0002073e

00011204 <l2cap_rtx_timeout>:
{
   11204:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
   11206:	4604      	mov	r4, r0
   11208:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   1120c:	2145      	movs	r1, #69	; 0x45
   1120e:	4622      	mov	r2, r4
   11210:	4805      	ldr	r0, [pc, #20]	; (11228 <l2cap_rtx_timeout+0x24>)
   11212:	f008 fbec 	bl	199ee <printk>
	bt_l2cap_chan_remove(conn, &chan->chan);
   11216:	4628      	mov	r0, r5
   11218:	4621      	mov	r1, r4
   1121a:	f00a f908 	bl	1b42e <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1121e:	4620      	mov	r0, r4
}
   11220:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   11224:	f00a b924 	b.w	1b470 <bt_l2cap_chan_del>
   11228:	0002076b 	.word	0x0002076b

0001122c <bt_l2cap_connected>:
{
   1122c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11230:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   11232:	4e2d      	ldr	r6, [pc, #180]	; (112e8 <bt_l2cap_connected+0xbc>)
   11234:	4f2d      	ldr	r7, [pc, #180]	; (112ec <bt_l2cap_connected+0xc0>)
   11236:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 112f0 <bt_l2cap_connected+0xc4>
   1123a:	42be      	cmp	r6, r7
   1123c:	d90a      	bls.n	11254 <bt_l2cap_connected+0x28>
   1123e:	4641      	mov	r1, r8
   11240:	482c      	ldr	r0, [pc, #176]	; (112f4 <bt_l2cap_connected+0xc8>)
   11242:	f240 1267 	movw	r2, #359	; 0x167
   11246:	f008 fbd2 	bl	199ee <printk>
   1124a:	f240 1167 	movw	r1, #359	; 0x167
   1124e:	4640      	mov	r0, r8
   11250:	f008 fe73 	bl	19f3a <assert_post_action>
   11254:	42be      	cmp	r6, r7
   11256:	d302      	bcc.n	1125e <bt_l2cap_connected+0x32>
}
   11258:	b003      	add	sp, #12
   1125a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1125e:	4628      	mov	r0, r5
   11260:	6873      	ldr	r3, [r6, #4]
   11262:	a901      	add	r1, sp, #4
   11264:	4798      	blx	r3
   11266:	2800      	cmp	r0, #0
   11268:	db38      	blt.n	112dc <bt_l2cap_connected+0xb0>
		ch = BT_L2CAP_LE_CHAN(chan);
   1126a:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
   1126c:	8833      	ldrh	r3, [r6, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1126e:	2230      	movs	r2, #48	; 0x30
   11270:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
   11274:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   11278:	2100      	movs	r1, #0
   1127a:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1127e:	f8d6 9008 	ldr.w	r9, [r6, #8]
   11282:	f009 fe1f 	bl	1aec4 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11286:	2200      	movs	r2, #0
   11288:	4b1b      	ldr	r3, [pc, #108]	; (112f8 <bt_l2cap_connected+0xcc>)
   1128a:	6163      	str	r3, [r4, #20]
   1128c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   11290:	e8d3 1fef 	ldaex	r1, [r3]
   11294:	e8c3 2fe0 	stlex	r0, r2, [r3]
   11298:	2800      	cmp	r0, #0
   1129a:	d1f9      	bne.n	11290 <bt_l2cap_connected+0x64>
	parent->next = child;
   1129c:	60a2      	str	r2, [r4, #8]
	return list->tail;
   1129e:	6d6a      	ldr	r2, [r5, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   112a0:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
   112a4:	b9e2      	cbnz	r2, 112e0 <bt_l2cap_connected+0xb4>
	list->head = node;
   112a6:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
		if (chan->ops->connected) {
   112aa:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   112ac:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
   112ae:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   112b0:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
   112b4:	681b      	ldr	r3, [r3, #0]
   112b6:	b103      	cbz	r3, 112ba <bt_l2cap_connected+0x8e>
			chan->ops->connected(chan);
   112b8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   112ba:	9b01      	ldr	r3, [sp, #4]
   112bc:	3340      	adds	r3, #64	; 0x40
   112be:	e8d3 2fef 	ldaex	r2, [r3]
   112c2:	f042 0201 	orr.w	r2, r2, #1
   112c6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   112ca:	2900      	cmp	r1, #0
   112cc:	d1f7      	bne.n	112be <bt_l2cap_connected+0x92>
		if (chan->ops->status) {
   112ce:	9801      	ldr	r0, [sp, #4]
   112d0:	6843      	ldr	r3, [r0, #4]
   112d2:	699b      	ldr	r3, [r3, #24]
   112d4:	b113      	cbz	r3, 112dc <bt_l2cap_connected+0xb0>
			chan->ops->status(chan, chan->status);
   112d6:	f100 0140 	add.w	r1, r0, #64	; 0x40
   112da:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   112dc:	360c      	adds	r6, #12
   112de:	e7ac      	b.n	1123a <bt_l2cap_connected+0xe>
	parent->next = child;
   112e0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   112e2:	656b      	str	r3, [r5, #84]	; 0x54
}
   112e4:	e7e1      	b.n	112aa <bt_l2cap_connected+0x7e>
   112e6:	bf00      	nop
   112e8:	0001d6ac 	.word	0x0001d6ac
   112ec:	0001d6d0 	.word	0x0001d6d0
   112f0:	00020780 	.word	0x00020780
   112f4:	0001ead7 	.word	0x0001ead7
   112f8:	00011205 	.word	0x00011205

000112fc <l2cap_recv>:
{
   112fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   112fe:	898b      	ldrh	r3, [r1, #12]
{
   11300:	4606      	mov	r6, r0
	if (buf->len < sizeof(*hdr)) {
   11302:	2b03      	cmp	r3, #3
{
   11304:	460d      	mov	r5, r1
   11306:	b085      	sub	sp, #20
	if (buf->len < sizeof(*hdr)) {
   11308:	d804      	bhi.n	11314 <l2cap_recv+0x18>
		BT_ERR("Too small L2CAP signaling PDU");
   1130a:	2145      	movs	r1, #69	; 0x45
   1130c:	483a      	ldr	r0, [pc, #232]	; (113f8 <l2cap_recv+0xfc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   1130e:	f008 fb6e 	bl	199ee <printk>
		return 0;
   11312:	e00d      	b.n	11330 <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   11314:	2104      	movs	r1, #4
   11316:	f105 0008 	add.w	r0, r5, #8
   1131a:	f003 fbed 	bl	14af8 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1131e:	89aa      	ldrh	r2, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   11320:	8843      	ldrh	r3, [r0, #2]
   11322:	4604      	mov	r4, r0
	if (buf->len != len) {
   11324:	4293      	cmp	r3, r2
   11326:	d006      	beq.n	11336 <l2cap_recv+0x3a>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   11328:	2145      	movs	r1, #69	; 0x45
   1132a:	4834      	ldr	r0, [pc, #208]	; (113fc <l2cap_recv+0x100>)
   1132c:	f008 fb5f 	bl	199ee <printk>
}
   11330:	2000      	movs	r0, #0
   11332:	b005      	add	sp, #20
   11334:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   11336:	7841      	ldrb	r1, [r0, #1]
   11338:	b911      	cbnz	r1, 11340 <l2cap_recv+0x44>
		BT_ERR("Invalid ident value in L2CAP PDU");
   1133a:	2145      	movs	r1, #69	; 0x45
   1133c:	4830      	ldr	r0, [pc, #192]	; (11400 <l2cap_recv+0x104>)
   1133e:	e7e6      	b.n	1130e <l2cap_recv+0x12>
	switch (hdr->code) {
   11340:	7802      	ldrb	r2, [r0, #0]
   11342:	2a12      	cmp	r2, #18
   11344:	d00f      	beq.n	11366 <l2cap_recv+0x6a>
   11346:	2a13      	cmp	r2, #19
   11348:	d008      	beq.n	1135c <l2cap_recv+0x60>
   1134a:	2a01      	cmp	r2, #1
   1134c:	d0f0      	beq.n	11330 <l2cap_recv+0x34>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1134e:	2157      	movs	r1, #87	; 0x57
   11350:	482c      	ldr	r0, [pc, #176]	; (11404 <l2cap_recv+0x108>)
   11352:	f008 fb4c 	bl	199ee <printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   11356:	7861      	ldrb	r1, [r4, #1]
   11358:	6830      	ldr	r0, [r6, #0]
   1135a:	e00d      	b.n	11378 <l2cap_recv+0x7c>
	if (buf->len < sizeof(*rsp)) {
   1135c:	2b01      	cmp	r3, #1
   1135e:	d8e7      	bhi.n	11330 <l2cap_recv+0x34>
		BT_ERR("Too small LE conn param rsp");
   11360:	2145      	movs	r1, #69	; 0x45
   11362:	4829      	ldr	r0, [pc, #164]	; (11408 <l2cap_recv+0x10c>)
   11364:	e7d3      	b.n	1130e <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   11366:	2b07      	cmp	r3, #7
   11368:	d802      	bhi.n	11370 <l2cap_recv+0x74>
		BT_ERR("Too small LE conn update param req");
   1136a:	2145      	movs	r1, #69	; 0x45
   1136c:	4827      	ldr	r0, [pc, #156]	; (1140c <l2cap_recv+0x110>)
   1136e:	e7ce      	b.n	1130e <l2cap_recv+0x12>
   11370:	6834      	ldr	r4, [r6, #0]
	if (conn->role != BT_HCI_ROLE_MASTER) {
   11372:	78e7      	ldrb	r7, [r4, #3]
   11374:	b11f      	cbz	r7, 1137e <l2cap_recv+0x82>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   11376:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   11378:	f00a f8c1 	bl	1b4fe <l2cap_send_reject.constprop.0>
		break;
   1137c:	e7d8      	b.n	11330 <l2cap_recv+0x34>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1137e:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   11380:	7850      	ldrb	r0, [r2, #1]
   11382:	7813      	ldrb	r3, [r2, #0]
   11384:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11388:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1138c:	78d0      	ldrb	r0, [r2, #3]
   1138e:	7893      	ldrb	r3, [r2, #2]
   11390:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11394:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   11398:	7950      	ldrb	r0, [r2, #5]
   1139a:	7913      	ldrb	r3, [r2, #4]
   1139c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   113a0:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   113a4:	7993      	ldrb	r3, [r2, #6]
   113a6:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   113a8:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   113aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   113ae:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   113b0:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   113b4:	f7ff ff08 	bl	111c8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   113b8:	4605      	mov	r5, r0
   113ba:	2800      	cmp	r0, #0
   113bc:	d0b8      	beq.n	11330 <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   113be:	a902      	add	r1, sp, #8
   113c0:	4620      	mov	r0, r4
   113c2:	f7ff f895 	bl	104f0 <le_param_req>
   113c6:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   113c8:	2102      	movs	r1, #2
   113ca:	f105 0008 	add.w	r0, r5, #8
   113ce:	f003 fbb1 	bl	14b34 <net_buf_simple_add>
	if (accepted) {
   113d2:	f086 0301 	eor.w	r3, r6, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   113d6:	b2db      	uxtb	r3, r3
   113d8:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   113da:	462a      	mov	r2, r5
   113dc:	463b      	mov	r3, r7
   113de:	2105      	movs	r1, #5
   113e0:	4620      	mov	r0, r4
   113e2:	9700      	str	r7, [sp, #0]
   113e4:	f00a f872 	bl	1b4cc <bt_l2cap_send_cb>
	if (accepted) {
   113e8:	2e00      	cmp	r6, #0
   113ea:	d0a1      	beq.n	11330 <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   113ec:	4620      	mov	r0, r4
   113ee:	a902      	add	r1, sp, #8
   113f0:	f009 fff3 	bl	1b3da <bt_conn_le_conn_update>
   113f4:	e79c      	b.n	11330 <l2cap_recv+0x34>
   113f6:	bf00      	nop
   113f8:	000207b1 	.word	0x000207b1
   113fc:	000207d4 	.word	0x000207d4
   11400:	000207fa 	.word	0x000207fa
   11404:	00020869 	.word	0x00020869
   11408:	00020820 	.word	0x00020820
   1140c:	00020841 	.word	0x00020841

00011410 <bt_l2cap_recv>:
{
   11410:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   11412:	898b      	ldrh	r3, [r1, #12]
{
   11414:	4605      	mov	r5, r0
	if (buf->len < sizeof(*hdr)) {
   11416:	2b03      	cmp	r3, #3
{
   11418:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1141a:	d808      	bhi.n	1142e <bt_l2cap_recv+0x1e>
		BT_ERR("Too small L2CAP PDU received");
   1141c:	2145      	movs	r1, #69	; 0x45
   1141e:	480e      	ldr	r0, [pc, #56]	; (11458 <bt_l2cap_recv+0x48>)
   11420:	f008 fae5 	bl	199ee <printk>
	net_buf_unref(buf);
   11424:	4620      	mov	r0, r4
}
   11426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1142a:	f003 ba6d 	b.w	14908 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1142e:	2104      	movs	r1, #4
   11430:	f104 0008 	add.w	r0, r4, #8
   11434:	f003 fb60 	bl	14af8 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   11438:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1143a:	4628      	mov	r0, r5
   1143c:	4611      	mov	r1, r2
   1143e:	f00a f885 	bl	1b54c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   11442:	b920      	cbnz	r0, 1144e <bt_l2cap_recv+0x3e>
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
   11444:	2157      	movs	r1, #87	; 0x57
   11446:	4805      	ldr	r0, [pc, #20]	; (1145c <bt_l2cap_recv+0x4c>)
   11448:	f008 fad1 	bl	199ee <printk>
		net_buf_unref(buf);
   1144c:	e7ea      	b.n	11424 <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   1144e:	6843      	ldr	r3, [r0, #4]
   11450:	4621      	mov	r1, r4
   11452:	691b      	ldr	r3, [r3, #16]
   11454:	4798      	blx	r3
   11456:	e7e5      	b.n	11424 <bt_l2cap_recv+0x14>
   11458:	0002088c 	.word	0x0002088c
   1145c:	000208ae 	.word	0x000208ae

00011460 <bt_l2cap_update_conn_param>:
{
   11460:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11462:	460c      	mov	r4, r1
	ident++;
   11464:	4914      	ldr	r1, [pc, #80]	; (114b8 <bt_l2cap_update_conn_param+0x58>)
{
   11466:	4605      	mov	r5, r0
	ident++;
   11468:	780b      	ldrb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1146a:	2208      	movs	r2, #8
	ident++;
   1146c:	3301      	adds	r3, #1
	if (!ident) {
   1146e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   11472:	bf08      	it	eq
   11474:	2301      	moveq	r3, #1
   11476:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   11478:	2012      	movs	r0, #18
   1147a:	7809      	ldrb	r1, [r1, #0]
   1147c:	f7ff fea4 	bl	111c8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   11480:	4606      	mov	r6, r0
   11482:	b1b0      	cbz	r0, 114b2 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
   11484:	2108      	movs	r1, #8
   11486:	4408      	add	r0, r1
   11488:	f003 fb54 	bl	14b34 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1148c:	8822      	ldrh	r2, [r4, #0]
   1148e:	2105      	movs	r1, #5
   11490:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   11492:	8862      	ldrh	r2, [r4, #2]
   11494:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   11496:	88a2      	ldrh	r2, [r4, #4]
   11498:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1149a:	88e2      	ldrh	r2, [r4, #6]
   1149c:	2400      	movs	r4, #0
   1149e:	80c2      	strh	r2, [r0, #6]
   114a0:	4623      	mov	r3, r4
   114a2:	4632      	mov	r2, r6
   114a4:	4628      	mov	r0, r5
   114a6:	9400      	str	r4, [sp, #0]
   114a8:	f00a f810 	bl	1b4cc <bt_l2cap_send_cb>
	return 0;
   114ac:	4620      	mov	r0, r4
}
   114ae:	b002      	add	sp, #8
   114b0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   114b2:	f06f 000b 	mvn.w	r0, #11
   114b6:	e7fa      	b.n	114ae <bt_l2cap_update_conn_param+0x4e>
   114b8:	2000c5c8 	.word	0x2000c5c8

000114bc <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   114bc:	4b02      	ldr	r3, [pc, #8]	; (114c8 <att_cfm_sent+0xc>)
   114be:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   114c2:	f00a b866 	b.w	1b592 <att_sent>
   114c6:	bf00      	nop
   114c8:	0001b9a1 	.word	0x0001b9a1

000114cc <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   114cc:	4b02      	ldr	r3, [pc, #8]	; (114d8 <att_rsp_sent+0xc>)
   114ce:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   114d2:	f00a b85e 	b.w	1b592 <att_sent>
   114d6:	bf00      	nop
   114d8:	0001b98d 	.word	0x0001b98d

000114dc <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   114dc:	4b02      	ldr	r3, [pc, #8]	; (114e8 <att_req_sent+0xc>)
   114de:	f8c1 3130 	str.w	r3, [r1, #304]	; 0x130

	att_sent(conn, user_data);
   114e2:	f00a b856 	b.w	1b592 <att_sent>
   114e6:	bf00      	nop
   114e8:	00011699 	.word	0x00011699

000114ec <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   114ec:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   114ee:	7a83      	ldrb	r3, [r0, #10]
   114f0:	2b07      	cmp	r3, #7
   114f2:	d005      	beq.n	11500 <att_get+0x14>
		BT_WARN("Not connected");
   114f4:	2157      	movs	r1, #87	; 0x57
   114f6:	480e      	ldr	r0, [pc, #56]	; (11530 <att_get+0x44>)
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
   114f8:	f008 fa79 	bl	199ee <printk>
		return NULL;
   114fc:	2400      	movs	r4, #0
   114fe:	e008      	b.n	11512 <att_get+0x26>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   11500:	2104      	movs	r1, #4
   11502:	f00a f823 	bl	1b54c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   11506:	4604      	mov	r4, r0
   11508:	b928      	cbnz	r0, 11516 <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   1150a:	2145      	movs	r1, #69	; 0x45
   1150c:	4809      	ldr	r0, [pc, #36]	; (11534 <att_get+0x48>)
   1150e:	f008 fa6e 	bl	199ee <printk>
	}

	return att_chan->att;
}
   11512:	4620      	mov	r0, r4
   11514:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11516:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
   1151a:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1151e:	075b      	lsls	r3, r3, #29
   11520:	d502      	bpl.n	11528 <att_get+0x3c>
		BT_WARN("ATT channel flagged as disconnected");
   11522:	2157      	movs	r1, #87	; 0x57
   11524:	4804      	ldr	r0, [pc, #16]	; (11538 <att_get+0x4c>)
   11526:	e7e7      	b.n	114f8 <att_get+0xc>
	return att_chan->att;
   11528:	f850 4c08 	ldr.w	r4, [r0, #-8]
   1152c:	e7f1      	b.n	11512 <att_get+0x26>
   1152e:	bf00      	nop
   11530:	000208e8 	.word	0x000208e8
   11534:	000208fb 	.word	0x000208fb
   11538:	0002091b 	.word	0x0002091b

0001153c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1153c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1153e:	3808      	subs	r0, #8
   11540:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   11542:	a901      	add	r1, sp, #4
   11544:	4802      	ldr	r0, [pc, #8]	; (11550 <bt_att_released+0x14>)
   11546:	f005 fd7b 	bl	17040 <k_mem_slab_free>
}
   1154a:	b003      	add	sp, #12
   1154c:	f85d fb04 	ldr.w	pc, [sp], #4
   11550:	20008608 	.word	0x20008608

00011554 <find_type_cb>:
{
   11554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11558:	f642 0301 	movw	r3, #10241	; 0x2801
   1155c:	2500      	movs	r5, #0
{
   1155e:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   11560:	f8d2 9000 	ldr.w	r9, [r2]
{
   11564:	4607      	mov	r7, r0
   11566:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11568:	6800      	ldr	r0, [r0, #0]
   1156a:	a90b      	add	r1, sp, #44	; 0x2c
	struct bt_conn *conn = chan->chan.chan.conn;
   1156c:	f8d9 8008 	ldr.w	r8, [r9, #8]
{
   11570:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   11572:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   11576:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1157a:	f009 fced 	bl	1af58 <bt_uuid_cmp>
   1157e:	2800      	cmp	r0, #0
   11580:	d060      	beq.n	11644 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   11582:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11586:	6838      	ldr	r0, [r7, #0]
   11588:	a90b      	add	r1, sp, #44	; 0x2c
   1158a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1158e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   11592:	f009 fce1 	bl	1af58 <bt_uuid_cmp>
   11596:	b138      	cbz	r0, 115a8 <find_type_cb+0x54>
		if (data->group &&
   11598:	68a3      	ldr	r3, [r4, #8]
   1159a:	b11b      	cbz	r3, 115a4 <find_type_cb+0x50>
   1159c:	885a      	ldrh	r2, [r3, #2]
   1159e:	42b2      	cmp	r2, r6
   115a0:	d200      	bcs.n	115a4 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   115a2:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   115a4:	2001      	movs	r0, #1
   115a6:	e009      	b.n	115bc <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   115a8:	6861      	ldr	r1, [r4, #4]
   115aa:	4608      	mov	r0, r1
   115ac:	f009 ffe9 	bl	1b582 <net_buf_frags_len>
   115b0:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   115b4:	1a1b      	subs	r3, r3, r0
   115b6:	2b03      	cmp	r3, #3
   115b8:	d803      	bhi.n	115c2 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   115ba:	2000      	movs	r0, #0
}
   115bc:	b011      	add	sp, #68	; 0x44
   115be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   115c2:	4608      	mov	r0, r1
   115c4:	f003 f9fc 	bl	149c0 <net_buf_frag_last>
   115c8:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   115ca:	6860      	ldr	r0, [r4, #4]
   115cc:	f009 ffd9 	bl	1b582 <net_buf_frags_len>
   115d0:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   115d4:	f105 0b08 	add.w	fp, r5, #8
   115d8:	ebaa 0a00 	sub.w	sl, sl, r0
   115dc:	4658      	mov	r0, fp
   115de:	f00a ff40 	bl	1c462 <net_buf_simple_tailroom>
   115e2:	4582      	cmp	sl, r0
   115e4:	d231      	bcs.n	1164a <find_type_cb+0xf6>
   115e6:	6860      	ldr	r0, [r4, #4]
   115e8:	f009 ffcb 	bl	1b582 <net_buf_frags_len>
   115ec:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   115f0:	1a18      	subs	r0, r3, r0
	if (!len) {
   115f2:	b970      	cbnz	r0, 11612 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   115f4:	6863      	ldr	r3, [r4, #4]
   115f6:	7998      	ldrb	r0, [r3, #6]
   115f8:	f003 f806 	bl	14608 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   115fc:	2200      	movs	r2, #0
   115fe:	2300      	movs	r3, #0
   11600:	f00a ff09 	bl	1c416 <net_buf_alloc_fixed>
		if (!frag) {
   11604:	4605      	mov	r5, r0
   11606:	2800      	cmp	r0, #0
   11608:	d0d7      	beq.n	115ba <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1160a:	4601      	mov	r1, r0
   1160c:	6860      	ldr	r0, [r4, #4]
   1160e:	f003 fa17 	bl	14a40 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   11612:	2300      	movs	r3, #0
   11614:	9300      	str	r3, [sp, #0]
   11616:	4639      	mov	r1, r7
   11618:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1161c:	2310      	movs	r3, #16
   1161e:	4640      	mov	r0, r8
   11620:	aa02      	add	r2, sp, #8
   11622:	47c8      	blx	r9
	if (read < 0) {
   11624:	1e07      	subs	r7, r0, #0
   11626:	db0d      	blt.n	11644 <find_type_cb+0xf0>
	if (read != data->value_len) {
   11628:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1162a:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1162c:	42ba      	cmp	r2, r7
   1162e:	d02b      	beq.n	11688 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   11630:	4601      	mov	r1, r0
   11632:	a80b      	add	r0, sp, #44	; 0x2c
   11634:	f009 fcbe 	bl	1afb4 <bt_uuid_create>
   11638:	b958      	cbnz	r0, 11652 <find_type_cb+0xfe>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1163a:	2157      	movs	r1, #87	; 0x57
   1163c:	7c22      	ldrb	r2, [r4, #16]
   1163e:	4814      	ldr	r0, [pc, #80]	; (11690 <find_type_cb+0x13c>)
			BT_WARN("Unable to create UUID: size %d", read);
   11640:	f008 f9d5 	bl	199ee <printk>
	data->group = NULL;
   11644:	2300      	movs	r3, #0
   11646:	60a3      	str	r3, [r4, #8]
   11648:	e7ac      	b.n	115a4 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1164a:	4658      	mov	r0, fp
   1164c:	f00a ff09 	bl	1c462 <net_buf_simple_tailroom>
   11650:	e7cf      	b.n	115f2 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   11652:	b2fa      	uxtb	r2, r7
   11654:	a902      	add	r1, sp, #8
   11656:	a806      	add	r0, sp, #24
   11658:	f009 fcac 	bl	1afb4 <bt_uuid_create>
   1165c:	b918      	cbnz	r0, 11666 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %d", read);
   1165e:	463a      	mov	r2, r7
   11660:	2157      	movs	r1, #87	; 0x57
   11662:	480c      	ldr	r0, [pc, #48]	; (11694 <find_type_cb+0x140>)
   11664:	e7ec      	b.n	11640 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   11666:	a906      	add	r1, sp, #24
   11668:	a80b      	add	r0, sp, #44	; 0x2c
   1166a:	f009 fc75 	bl	1af58 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1166e:	2800      	cmp	r0, #0
   11670:	d1e8      	bne.n	11644 <find_type_cb+0xf0>
	data->err = 0x00;
   11672:	2300      	movs	r3, #0
	return net_buf_simple_add(&buf->b, len);
   11674:	2104      	movs	r1, #4
   11676:	7463      	strb	r3, [r4, #17]
   11678:	f105 0008 	add.w	r0, r5, #8
   1167c:	f003 fa5a 	bl	14b34 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   11680:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   11682:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   11684:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   11686:	e78d      	b.n	115a4 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   11688:	a902      	add	r1, sp, #8
   1168a:	f009 fbdf 	bl	1ae4c <memcmp>
   1168e:	e7ee      	b.n	1166e <find_type_cb+0x11a>
   11690:	00020944 	.word	0x00020944
   11694:	00020968 	.word	0x00020968

00011698 <chan_req_sent>:
	if (chan->req) {
   11698:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1169c:	b13b      	cbz	r3, 116ae <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1169e:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
   116a2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   116a6:	2300      	movs	r3, #0
   116a8:	4801      	ldr	r0, [pc, #4]	; (116b0 <chan_req_sent+0x18>)
   116aa:	f007 ba2d 	b.w	18b08 <k_delayed_work_submit_to_queue>
}
   116ae:	4770      	bx	lr
   116b0:	2000a3b0 	.word	0x2000a3b0

000116b4 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   116b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   116b6:	2300      	movs	r3, #0
{
   116b8:	4606      	mov	r6, r0
   116ba:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   116bc:	2200      	movs	r2, #0
   116be:	4669      	mov	r1, sp
   116c0:	4823      	ldr	r0, [pc, #140]	; (11750 <bt_att_accept+0x9c>)
   116c2:	f005 fc63 	bl	16f8c <k_mem_slab_alloc>
   116c6:	4604      	mov	r4, r0
   116c8:	b148      	cbz	r0, 116de <bt_att_accept+0x2a>
		BT_ERR("No available ATT context for conn %p", conn);
   116ca:	4632      	mov	r2, r6
   116cc:	2145      	movs	r1, #69	; 0x45
   116ce:	4821      	ldr	r0, [pc, #132]	; (11754 <bt_att_accept+0xa0>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   116d0:	f008 f98d 	bl	199ee <printk>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   116d4:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   116d8:	4620      	mov	r0, r4
   116da:	b003      	add	sp, #12
   116dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   116de:	4601      	mov	r1, r0
   116e0:	2230      	movs	r2, #48	; 0x30
   116e2:	9800      	ldr	r0, [sp, #0]
   116e4:	f009 fbee 	bl	1aec4 <memset>
	att->conn = conn;
   116e8:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   116ea:	2200      	movs	r2, #0
	list->head = NULL;
   116ec:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   116f0:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   116f4:	60ac      	str	r4, [r5, #8]
   116f6:	2300      	movs	r3, #0
   116f8:	4817      	ldr	r0, [pc, #92]	; (11758 <bt_att_accept+0xa4>)
   116fa:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   116fc:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   116fe:	f005 fc45 	bl	16f8c <k_mem_slab_alloc>
   11702:	4604      	mov	r4, r0
   11704:	b118      	cbz	r0, 1170e <bt_att_accept+0x5a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   11706:	2145      	movs	r1, #69	; 0x45
   11708:	682a      	ldr	r2, [r5, #0]
   1170a:	4814      	ldr	r0, [pc, #80]	; (1175c <bt_att_accept+0xa8>)
   1170c:	e7e0      	b.n	116d0 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   1170e:	4601      	mov	r1, r0
   11710:	f44f 72a0 	mov.w	r2, #320	; 0x140
   11714:	9801      	ldr	r0, [sp, #4]
   11716:	f009 fbd5 	bl	1aec4 <memset>
	chan->chan.chan.ops = &ops;
   1171a:	9801      	ldr	r0, [sp, #4]
   1171c:	4b10      	ldr	r3, [pc, #64]	; (11760 <bt_att_accept+0xac>)
   1171e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   11720:	30d0      	adds	r0, #208	; 0xd0
   11722:	f00b fcd4 	bl	1d0ce <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
   11726:	9801      	ldr	r0, [sp, #4]
   11728:	f500 7090 	add.w	r0, r0, #288	; 0x120
	return z_impl_k_sem_init(sem, initial_count, limit);
   1172c:	2203      	movs	r2, #3
   1172e:	4611      	mov	r1, r2
   11730:	f00b fd32 	bl	1d198 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11734:	9b01      	ldr	r3, [sp, #4]
   11736:	33c8      	adds	r3, #200	; 0xc8
   11738:	e8d3 2fef 	ldaex	r2, [r3]
   1173c:	e8c3 4fe1 	stlex	r1, r4, [r3]
   11740:	2900      	cmp	r1, #0
   11742:	d1f9      	bne.n	11738 <bt_att_accept+0x84>
	chan->att = att;
   11744:	9b01      	ldr	r3, [sp, #4]
   11746:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   1174a:	603b      	str	r3, [r7, #0]
	return 0;
   1174c:	e7c4      	b.n	116d8 <bt_att_accept+0x24>
   1174e:	bf00      	nop
   11750:	200085ec 	.word	0x200085ec
   11754:	0002098c 	.word	0x0002098c
   11758:	20008608 	.word	0x20008608
   1175c:	000209b6 	.word	0x000209b6
   11760:	20008438 	.word	0x20008438

00011764 <read_group_cb>:
{
   11764:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11768:	f04f 0800 	mov.w	r8, #0
   1176c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
{
   11770:	4605      	mov	r5, r0
   11772:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   11774:	6800      	ldr	r0, [r0, #0]
   11776:	a902      	add	r1, sp, #8
{
   11778:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1177a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1177c:	f88d 8008 	strb.w	r8, [sp, #8]
   11780:	f8ad 300a 	strh.w	r3, [sp, #10]
   11784:	f009 fbe8 	bl	1af58 <bt_uuid_cmp>
   11788:	b1a0      	cbz	r0, 117b4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1178a:	f642 0301 	movw	r3, #10241	; 0x2801
   1178e:	6828      	ldr	r0, [r5, #0]
   11790:	a903      	add	r1, sp, #12
   11792:	f88d 800c 	strb.w	r8, [sp, #12]
   11796:	f8ad 300e 	strh.w	r3, [sp, #14]
   1179a:	f009 fbdd 	bl	1af58 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1179e:	b148      	cbz	r0, 117b4 <read_group_cb+0x50>
		if (data->group &&
   117a0:	6923      	ldr	r3, [r4, #16]
   117a2:	b11b      	cbz	r3, 117ac <read_group_cb+0x48>
   117a4:	885a      	ldrh	r2, [r3, #2]
   117a6:	42b2      	cmp	r2, r6
   117a8:	d200      	bcs.n	117ac <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   117aa:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   117ac:	2001      	movs	r0, #1
}
   117ae:	b004      	add	sp, #16
   117b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   117b4:	6861      	ldr	r1, [r4, #4]
   117b6:	6828      	ldr	r0, [r5, #0]
   117b8:	f009 fbce 	bl	1af58 <bt_uuid_cmp>
   117bc:	b110      	cbz	r0, 117c4 <read_group_cb+0x60>
		data->group = NULL;
   117be:	2300      	movs	r3, #0
   117c0:	6123      	str	r3, [r4, #16]
   117c2:	e7f3      	b.n	117ac <read_group_cb+0x48>
	if (data->rsp->len &&
   117c4:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   117c6:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   117c8:	781a      	ldrb	r2, [r3, #0]
   117ca:	b13a      	cbz	r2, 117dc <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   117cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   117d0:	8981      	ldrh	r1, [r0, #12]
   117d2:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   117d4:	4293      	cmp	r3, r2
   117d6:	da01      	bge.n	117dc <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   117d8:	2000      	movs	r0, #0
   117da:	e7e8      	b.n	117ae <read_group_cb+0x4a>
   117dc:	2104      	movs	r1, #4
   117de:	3008      	adds	r0, #8
   117e0:	f003 f9a8 	bl	14b34 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   117e4:	4b09      	ldr	r3, [pc, #36]	; (1180c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   117e6:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   117e8:	4629      	mov	r1, r5
	data->group->start_handle = sys_cpu_to_le16(handle);
   117ea:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   117ec:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   117ee:	68a2      	ldr	r2, [r4, #8]
   117f0:	9300      	str	r3, [sp, #0]
   117f2:	4638      	mov	r0, r7
   117f4:	2300      	movs	r3, #0
   117f6:	9401      	str	r4, [sp, #4]
   117f8:	f009 ffbe 	bl	1b778 <att_chan_read>
	if (read < 0) {
   117fc:	2800      	cmp	r0, #0
   117fe:	dbeb      	blt.n	117d8 <read_group_cb+0x74>
	if (!data->group) {
   11800:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   11802:	3800      	subs	r0, #0
   11804:	bf18      	it	ne
   11806:	2001      	movne	r0, #1
   11808:	e7d1      	b.n	117ae <read_group_cb+0x4a>
   1180a:	bf00      	nop
   1180c:	0001b6fd 	.word	0x0001b6fd

00011810 <chan_send>:
{
   11810:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   11814:	688b      	ldr	r3, [r1, #8]
{
   11816:	4605      	mov	r5, r0
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   11818:	781b      	ldrb	r3, [r3, #0]
{
   1181a:	460c      	mov	r4, r1
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1181c:	2bd2      	cmp	r3, #210	; 0xd2
{
   1181e:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   11820:	d110      	bne.n	11844 <chan_send+0x34>
		err = bt_smp_sign(chan->att->conn, buf);
   11822:	6803      	ldr	r3, [r0, #0]
   11824:	6818      	ldr	r0, [r3, #0]
   11826:	f00a fdf0 	bl	1c40a <bt_smp_sign>
		if (err) {
   1182a:	4606      	mov	r6, r0
   1182c:	b150      	cbz	r0, 11844 <chan_send+0x34>
			BT_ERR("Error signing data");
   1182e:	2145      	movs	r1, #69	; 0x45
   11830:	4824      	ldr	r0, [pc, #144]	; (118c4 <chan_send+0xb4>)
   11832:	f008 f8dc 	bl	199ee <printk>
		net_buf_unref(buf);
   11836:	4620      	mov	r0, r4
   11838:	f003 f866 	bl	14908 <net_buf_unref>
}
   1183c:	4630      	mov	r0, r6
   1183e:	b003      	add	sp, #12
   11840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   11844:	f104 0008 	add.w	r0, r4, #8
   11848:	f00a fe07 	bl	1c45a <net_buf_simple_headroom>
	state->len = buf->len;
   1184c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   11850:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
   11852:	f1b9 0f00 	cmp.w	r9, #0
   11856:	d10a      	bne.n	1186e <chan_send+0x5e>
	switch (att_op_get_type(buf->data[0])) {
   11858:	68a3      	ldr	r3, [r4, #8]
   1185a:	7818      	ldrb	r0, [r3, #0]
   1185c:	f009 feb1 	bl	1b5c2 <att_op_get_type>
   11860:	1e43      	subs	r3, r0, #1
   11862:	b2db      	uxtb	r3, r3
   11864:	2b04      	cmp	r3, #4
   11866:	bf9c      	itt	ls
   11868:	4a17      	ldrls	r2, [pc, #92]	; (118c8 <chan_send+0xb8>)
   1186a:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1186e:	682b      	ldr	r3, [r5, #0]
   11870:	4620      	mov	r0, r4
	chan->sent = cb ? cb : chan_cb(buf);
   11872:	f8c5 9138 	str.w	r9, [r5, #312]	; 0x138
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   11876:	681e      	ldr	r6, [r3, #0]
   11878:	f003 f88a 	bl	14990 <net_buf_ref>
   1187c:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
	if (cb == chan_rsp_sent) {
   11880:	4b12      	ldr	r3, [pc, #72]	; (118cc <chan_send+0xbc>)
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   11882:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
   11884:	4299      	cmp	r1, r3
   11886:	d019      	beq.n	118bc <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
   11888:	4b11      	ldr	r3, [pc, #68]	; (118d0 <chan_send+0xc0>)
   1188a:	4299      	cmp	r1, r3
   1188c:	d018      	beq.n	118c0 <chan_send+0xb0>
		return att_sent;
   1188e:	f8df c044 	ldr.w	ip, [pc, #68]	; 118d4 <chan_send+0xc4>
   11892:	4b11      	ldr	r3, [pc, #68]	; (118d8 <chan_send+0xc8>)
   11894:	4811      	ldr	r0, [pc, #68]	; (118dc <chan_send+0xcc>)
   11896:	4561      	cmp	r1, ip
   11898:	bf18      	it	ne
   1189a:	4603      	movne	r3, r0
				&chan->chan.chan);
   1189c:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1189e:	4630      	mov	r0, r6
   118a0:	2104      	movs	r1, #4
   118a2:	9500      	str	r5, [sp, #0]
   118a4:	f009 fe12 	bl	1b4cc <bt_l2cap_send_cb>
	if (!err) {
   118a8:	4606      	mov	r6, r0
   118aa:	2800      	cmp	r0, #0
   118ac:	d0c3      	beq.n	11836 <chan_send+0x26>
	buf->data = buf->__buf + state->offset;
   118ae:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   118b0:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   118b4:	fa10 f787 	uxtah	r7, r0, r7
   118b8:	60a7      	str	r7, [r4, #8]
}
   118ba:	e7bf      	b.n	1183c <chan_send+0x2c>
		return att_rsp_sent;
   118bc:	4b08      	ldr	r3, [pc, #32]	; (118e0 <chan_send+0xd0>)
   118be:	e7ed      	b.n	1189c <chan_send+0x8c>
		return att_cfm_sent;
   118c0:	4b08      	ldr	r3, [pc, #32]	; (118e4 <chan_send+0xd4>)
   118c2:	e7eb      	b.n	1189c <chan_send+0x8c>
   118c4:	000209e0 	.word	0x000209e0
   118c8:	0001ddec 	.word	0x0001ddec
   118cc:	0001b98d 	.word	0x0001b98d
   118d0:	0001b9a1 	.word	0x0001b9a1
   118d4:	00011699 	.word	0x00011699
   118d8:	000114dd 	.word	0x000114dd
   118dc:	0001b593 	.word	0x0001b593
   118e0:	000114cd 	.word	0x000114cd
   118e4:	000114bd 	.word	0x000114bd

000118e8 <bt_att_chan_req_send>:
{
   118e8:	b570      	push	{r4, r5, r6, lr}
   118ea:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   118ec:	4604      	mov	r4, r0
   118ee:	b950      	cbnz	r0, 11906 <bt_att_chan_req_send+0x1e>
   118f0:	4924      	ldr	r1, [pc, #144]	; (11984 <bt_att_chan_req_send+0x9c>)
   118f2:	4825      	ldr	r0, [pc, #148]	; (11988 <bt_att_chan_req_send+0xa0>)
   118f4:	f240 224f 	movw	r2, #591	; 0x24f
   118f8:	f008 f879 	bl	199ee <printk>
   118fc:	f240 214f 	movw	r1, #591	; 0x24f
   11900:	4820      	ldr	r0, [pc, #128]	; (11984 <bt_att_chan_req_send+0x9c>)
   11902:	f008 fb1a 	bl	19f3a <assert_post_action>
	__ASSERT_NO_MSG(req);
   11906:	b955      	cbnz	r5, 1191e <bt_att_chan_req_send+0x36>
   11908:	491e      	ldr	r1, [pc, #120]	; (11984 <bt_att_chan_req_send+0x9c>)
   1190a:	481f      	ldr	r0, [pc, #124]	; (11988 <bt_att_chan_req_send+0xa0>)
   1190c:	f44f 7214 	mov.w	r2, #592	; 0x250
   11910:	f008 f86d 	bl	199ee <printk>
   11914:	f44f 7114 	mov.w	r1, #592	; 0x250
   11918:	481a      	ldr	r0, [pc, #104]	; (11984 <bt_att_chan_req_send+0x9c>)
   1191a:	f008 fb0e 	bl	19f3a <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   1191e:	686b      	ldr	r3, [r5, #4]
   11920:	b953      	cbnz	r3, 11938 <bt_att_chan_req_send+0x50>
   11922:	4918      	ldr	r1, [pc, #96]	; (11984 <bt_att_chan_req_send+0x9c>)
   11924:	4818      	ldr	r0, [pc, #96]	; (11988 <bt_att_chan_req_send+0xa0>)
   11926:	f240 2251 	movw	r2, #593	; 0x251
   1192a:	f008 f860 	bl	199ee <printk>
   1192e:	f240 2151 	movw	r1, #593	; 0x251
   11932:	4814      	ldr	r0, [pc, #80]	; (11984 <bt_att_chan_req_send+0x9c>)
   11934:	f008 fb01 	bl	19f3a <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   11938:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1193c:	b153      	cbz	r3, 11954 <bt_att_chan_req_send+0x6c>
   1193e:	4911      	ldr	r1, [pc, #68]	; (11984 <bt_att_chan_req_send+0x9c>)
   11940:	4811      	ldr	r0, [pc, #68]	; (11988 <bt_att_chan_req_send+0xa0>)
   11942:	f240 2252 	movw	r2, #594	; 0x252
   11946:	f008 f852 	bl	199ee <printk>
   1194a:	f240 2152 	movw	r1, #594	; 0x252
   1194e:	480d      	ldr	r0, [pc, #52]	; (11984 <bt_att_chan_req_send+0x9c>)
   11950:	f008 faf3 	bl	19f3a <assert_post_action>
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   11954:	f504 7690 	add.w	r6, r4, #288	; 0x120
	return z_impl_k_sem_take(sem, timeout);
   11958:	2200      	movs	r2, #0
   1195a:	2300      	movs	r3, #0
   1195c:	4630      	mov	r0, r6
   1195e:	f006 fead 	bl	186bc <z_impl_k_sem_take>
   11962:	2800      	cmp	r0, #0
   11964:	db0a      	blt.n	1197c <bt_att_chan_req_send+0x94>
	err = chan_req_send(chan, req);
   11966:	4620      	mov	r0, r4
   11968:	4629      	mov	r1, r5
   1196a:	f009 ffe9 	bl	1b940 <chan_req_send>
	if (err < 0) {
   1196e:	1e04      	subs	r4, r0, #0
   11970:	da02      	bge.n	11978 <bt_att_chan_req_send+0x90>
	z_impl_k_sem_give(sem);
   11972:	4630      	mov	r0, r6
   11974:	f006 fe66 	bl	18644 <z_impl_k_sem_give>
}
   11978:	4620      	mov	r0, r4
   1197a:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1197c:	f06f 040a 	mvn.w	r4, #10
   11980:	e7fa      	b.n	11978 <bt_att_chan_req_send+0x90>
   11982:	bf00      	nop
   11984:	000209f8 	.word	0x000209f8
   11988:	0001ead7 	.word	0x0001ead7

0001198c <read_type_cb>:
{
   1198c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   11990:	f8d2 8000 	ldr.w	r8, [r2]
{
   11994:	4606      	mov	r6, r0
   11996:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   11998:	6800      	ldr	r0, [r0, #0]
   1199a:	6851      	ldr	r1, [r2, #4]
{
   1199c:	4614      	mov	r4, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1199e:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   119a2:	f009 fad9 	bl	1af58 <bt_uuid_cmp>
   119a6:	4607      	mov	r7, r0
   119a8:	2800      	cmp	r0, #0
   119aa:	d13e      	bne.n	11a2a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   119ac:	4628      	mov	r0, r5
   119ae:	2215      	movs	r2, #21
   119b0:	4631      	mov	r1, r6
   119b2:	f00a fc23 	bl	1c1fc <bt_gatt_check_perm>
   119b6:	4605      	mov	r5, r0
   119b8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   119ba:	b148      	cbz	r0, 119d0 <read_type_cb+0x44>
		if (data->rsp->len) {
   119bc:	68e3      	ldr	r3, [r4, #12]
   119be:	781b      	ldrb	r3, [r3, #0]
   119c0:	b923      	cbnz	r3, 119cc <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   119c2:	2500      	movs	r5, #0
}
   119c4:	4628      	mov	r0, r5
   119c6:	b003      	add	sp, #12
   119c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   119cc:	7527      	strb	r7, [r4, #20]
   119ce:	e7f8      	b.n	119c2 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   119d0:	68a0      	ldr	r0, [r4, #8]
   119d2:	f002 fff5 	bl	149c0 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   119d6:	2102      	movs	r1, #2
   119d8:	3008      	adds	r0, #8
   119da:	f003 f8ab 	bl	14b34 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   119de:	4b14      	ldr	r3, [pc, #80]	; (11a30 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   119e0:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   119e2:	4631      	mov	r1, r6
	data->item->handle = sys_cpu_to_le16(handle);
   119e4:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   119e8:	68a2      	ldr	r2, [r4, #8]
   119ea:	9300      	str	r3, [sp, #0]
   119ec:	4640      	mov	r0, r8
   119ee:	462b      	mov	r3, r5
   119f0:	9401      	str	r4, [sp, #4]
   119f2:	f009 fec1 	bl	1b778 <att_chan_read>
	if (read < 0) {
   119f6:	2800      	cmp	r0, #0
   119f8:	da07      	bge.n	11a0a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   119fa:	f110 0fff 	cmn.w	r0, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   119fe:	bf32      	itee	cc
   11a00:	200e      	movcc	r0, #14
		return -err;
   11a02:	4240      	negcs	r0, r0
   11a04:	b2c0      	uxtbcs	r0, r0
		data->err = err_to_att(read);
   11a06:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   11a08:	e7dc      	b.n	119c4 <read_type_cb+0x38>
	if (!data->item) {
   11a0a:	6923      	ldr	r3, [r4, #16]
   11a0c:	2b00      	cmp	r3, #0
   11a0e:	d0d8      	beq.n	119c2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   11a10:	68a0      	ldr	r0, [r4, #8]
   11a12:	f009 fdb6 	bl	1b582 <net_buf_frags_len>
   11a16:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   11a1a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   11a1c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   11a1e:	7818      	ldrb	r0, [r3, #0]
   11a20:	4285      	cmp	r5, r0
   11a22:	bf94      	ite	ls
   11a24:	2500      	movls	r5, #0
   11a26:	2501      	movhi	r5, #1
   11a28:	e7cc      	b.n	119c4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   11a2a:	2501      	movs	r5, #1
   11a2c:	e7ca      	b.n	119c4 <read_type_cb+0x38>
   11a2e:	bf00      	nop
   11a30:	0001b59f 	.word	0x0001b59f

00011a34 <bt_att_connected>:
{
   11a34:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   11a36:	2104      	movs	r1, #4
{
   11a38:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   11a3a:	6800      	ldr	r0, [r0, #0]
   11a3c:	f009 fd76 	bl	1b52c <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   11a40:	4605      	mov	r5, r0
   11a42:	b950      	cbnz	r0, 11a5a <bt_att_connected+0x26>
   11a44:	4919      	ldr	r1, [pc, #100]	; (11aac <bt_att_connected+0x78>)
   11a46:	481a      	ldr	r0, [pc, #104]	; (11ab0 <bt_att_connected+0x7c>)
   11a48:	f44f 6226 	mov.w	r2, #2656	; 0xa60
   11a4c:	f007 ffcf 	bl	199ee <printk>
   11a50:	f44f 6126 	mov.w	r1, #2656	; 0xa60
   11a54:	4815      	ldr	r0, [pc, #84]	; (11aac <bt_att_connected+0x78>)
   11a56:	f008 fa70 	bl	19f3a <assert_post_action>
	struct bt_att *att = att_chan->att;
   11a5a:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   11a5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   11a60:	b91b      	cbnz	r3, 11a6a <bt_att_connected+0x36>
	z_impl_k_queue_init(queue);
   11a62:	f105 000c 	add.w	r0, r5, #12
   11a66:	f00b fb32 	bl	1d0ce <z_impl_k_queue_init>
	parent->next = child;
   11a6a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   11a6c:	f504 739a 	add.w	r3, r4, #308	; 0x134
   11a70:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
Z_GENLIST_PREPEND(slist, snode)
   11a74:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	list->head = node;
   11a76:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   11a78:	b902      	cbnz	r2, 11a7c <bt_att_connected+0x48>
	list->tail = node;
   11a7a:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11a7c:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   11a80:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   11a84:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11a86:	bf58      	it	pl
   11a88:	2317      	movpl	r3, #23
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   11a8a:	f04f 0230 	mov.w	r2, #48	; 0x30
   11a8e:	bf5c      	itt	pl
   11a90:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   11a94:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
   11a98:	2100      	movs	r1, #0
   11a9a:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
   11a9e:	f009 fa11 	bl	1aec4 <memset>
   11aa2:	4b04      	ldr	r3, [pc, #16]	; (11ab4 <bt_att_connected+0x80>)
   11aa4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   11aa8:	bd38      	pop	{r3, r4, r5, pc}
   11aaa:	bf00      	nop
   11aac:	000209f8 	.word	0x000209f8
   11ab0:	0001ead7 	.word	0x0001ead7
   11ab4:	000123c1 	.word	0x000123c1

00011ab8 <bt_att_chan_create_pdu>:
{
   11ab8:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   11aba:	1c53      	adds	r3, r2, #1
   11abc:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
{
   11ac0:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   11ac2:	4293      	cmp	r3, r2
   11ac4:	d906      	bls.n	11ad4 <bt_att_chan_create_pdu+0x1c>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   11ac6:	2157      	movs	r1, #87	; 0x57
   11ac8:	4813      	ldr	r0, [pc, #76]	; (11b18 <bt_att_chan_create_pdu+0x60>)
   11aca:	f007 ff90 	bl	199ee <printk>
		return NULL;
   11ace:	2400      	movs	r4, #0
}
   11ad0:	4620      	mov	r0, r4
   11ad2:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   11ad4:	4608      	mov	r0, r1
   11ad6:	f009 fd74 	bl	1b5c2 <att_op_get_type>
   11ada:	2802      	cmp	r0, #2
   11adc:	d001      	beq.n	11ae2 <bt_att_chan_create_pdu+0x2a>
   11ade:	2804      	cmp	r0, #4
   11ae0:	d10e      	bne.n	11b00 <bt_att_chan_create_pdu+0x48>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   11ae2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   11ae6:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   11ae8:	2100      	movs	r1, #0
   11aea:	4608      	mov	r0, r1
   11aec:	f009 fceb 	bl	1b4c6 <bt_l2cap_create_pdu_timeout>
   11af0:	4604      	mov	r4, r0
	if (!buf) {
   11af2:	b950      	cbnz	r0, 11b0a <bt_att_chan_create_pdu+0x52>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   11af4:	462a      	mov	r2, r5
   11af6:	2145      	movs	r1, #69	; 0x45
   11af8:	4808      	ldr	r0, [pc, #32]	; (11b1c <bt_att_chan_create_pdu+0x64>)
   11afa:	f007 ff78 	bl	199ee <printk>
		return NULL;
   11afe:	e7e7      	b.n	11ad0 <bt_att_chan_create_pdu+0x18>
		buf = bt_l2cap_create_pdu(NULL, 0);
   11b00:	f04f 32ff 	mov.w	r2, #4294967295
   11b04:	f04f 33ff 	mov.w	r3, #4294967295
   11b08:	e7ee      	b.n	11ae8 <bt_att_chan_create_pdu+0x30>
   11b0a:	2101      	movs	r1, #1
   11b0c:	3008      	adds	r0, #8
   11b0e:	f003 f811 	bl	14b34 <net_buf_simple_add>
	hdr->code = op;
   11b12:	7005      	strb	r5, [r0, #0]
	return buf;
   11b14:	e7dc      	b.n	11ad0 <bt_att_chan_create_pdu+0x18>
   11b16:	bf00      	nop
   11b18:	00020a27 	.word	0x00020a27
   11b1c:	0002073e 	.word	0x0002073e

00011b20 <att_indicate>:
{
   11b20:	b570      	push	{r4, r5, r6, lr}
   11b22:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   11b24:	f101 0008 	add.w	r0, r1, #8
   11b28:	460d      	mov	r5, r1
   11b2a:	f00a fc8e 	bl	1c44a <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   11b2e:	6826      	ldr	r6, [r4, #0]
   11b30:	4601      	mov	r1, r0
   11b32:	89ab      	ldrh	r3, [r5, #12]
   11b34:	68aa      	ldr	r2, [r5, #8]
   11b36:	6830      	ldr	r0, [r6, #0]
   11b38:	f00a fbef 	bl	1c31a <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   11b3c:	211e      	movs	r1, #30
   11b3e:	2200      	movs	r2, #0
   11b40:	4620      	mov	r0, r4
   11b42:	f7ff ffb9 	bl	11ab8 <bt_att_chan_create_pdu>
	if (!buf) {
   11b46:	4601      	mov	r1, r0
   11b48:	b118      	cbz	r0, 11b52 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   11b4a:	4620      	mov	r0, r4
   11b4c:	4a02      	ldr	r2, [pc, #8]	; (11b58 <att_indicate+0x38>)
   11b4e:	f009 feb5 	bl	1b8bc <bt_att_chan_send_rsp>
}
   11b52:	2000      	movs	r0, #0
   11b54:	bd70      	pop	{r4, r5, r6, pc}
   11b56:	bf00      	nop
   11b58:	0001b9a1 	.word	0x0001b9a1

00011b5c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   11b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b60:	4688      	mov	r8, r1
   11b62:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   11b64:	2101      	movs	r1, #1
   11b66:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   11b68:	4605      	mov	r5, r0
   11b6a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   11b6c:	f7ff ffa4 	bl	11ab8 <bt_att_chan_create_pdu>
	if (!buf) {
   11b70:	4604      	mov	r4, r0
   11b72:	b178      	cbz	r0, 11b94 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   11b74:	2104      	movs	r1, #4
   11b76:	3008      	adds	r0, #8
   11b78:	f002 ffdc 	bl	14b34 <net_buf_simple_add>
	rsp->request = req;
   11b7c:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   11b80:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   11b82:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   11b86:	4621      	mov	r1, r4
   11b88:	4628      	mov	r0, r5
}
   11b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   11b8e:	4a02      	ldr	r2, [pc, #8]	; (11b98 <send_err_rsp.part.0+0x3c>)
   11b90:	f009 be94 	b.w	1b8bc <bt_att_chan_send_rsp>
}
   11b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11b98:	0001b98d 	.word	0x0001b98d

00011b9c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   11b9c:	898b      	ldrh	r3, [r1, #12]
{
   11b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ba2:	4604      	mov	r4, r0
   11ba4:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   11ba6:	b933      	cbnz	r3, 11bb6 <bt_att_recv+0x1a>
		BT_ERR("Too small ATT PDU received");
   11ba8:	2145      	movs	r1, #69	; 0x45
   11baa:	4838      	ldr	r0, [pc, #224]	; (11c8c <bt_att_recv+0xf0>)
			BT_WARN("Ignoring unexpected indication");
   11bac:	f007 ff1f 	bl	199ee <printk>
}
   11bb0:	2000      	movs	r0, #0
   11bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   11bb6:	2101      	movs	r1, #1
   11bb8:	f108 0008 	add.w	r0, r8, #8
   11bbc:	f002 ff9c 	bl	14af8 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   11bc0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   11bc4:	4605      	mov	r5, r0
   11bc6:	2b00      	cmp	r3, #0
   11bc8:	d0f2      	beq.n	11bb0 <bt_att_recv+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   11bca:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   11bcc:	7802      	ldrb	r2, [r0, #0]
   11bce:	4930      	ldr	r1, [pc, #192]	; (11c90 <bt_att_recv+0xf4>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   11bd0:	f1a4 0608 	sub.w	r6, r4, #8
		if (hdr->code == handlers[i].op) {
   11bd4:	f811 0033 	ldrb.w	r0, [r1, r3, lsl #3]
   11bd8:	4290      	cmp	r0, r2
   11bda:	d114      	bne.n	11c06 <bt_att_recv+0x6a>
		if (handler->type == ATT_REQUEST &&
   11bdc:	00d8      	lsls	r0, r3, #3
   11bde:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   11be2:	789f      	ldrb	r7, [r3, #2]
   11be4:	2f01      	cmp	r7, #1
   11be6:	d123      	bne.n	11c30 <bt_att_recv+0x94>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11be8:	34c0      	adds	r4, #192	; 0xc0
   11bea:	e8d4 3fef 	ldaex	r3, [r4]
   11bee:	f043 0201 	orr.w	r2, r3, #1
   11bf2:	e8c4 2fec 	stlex	ip, r2, [r4]
   11bf6:	f1bc 0f00 	cmp.w	ip, #0
   11bfa:	d1f6      	bne.n	11bea <bt_att_recv+0x4e>
   11bfc:	07da      	lsls	r2, r3, #31
   11bfe:	d528      	bpl.n	11c52 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected request");
   11c00:	2157      	movs	r1, #87	; 0x57
   11c02:	4824      	ldr	r0, [pc, #144]	; (11c94 <bt_att_recv+0xf8>)
   11c04:	e7d2      	b.n	11bac <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   11c06:	3301      	adds	r3, #1
   11c08:	2b1c      	cmp	r3, #28
   11c0a:	d1e3      	bne.n	11bd4 <bt_att_recv+0x38>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   11c0c:	2157      	movs	r1, #87	; 0x57
   11c0e:	4822      	ldr	r0, [pc, #136]	; (11c98 <bt_att_recv+0xfc>)
   11c10:	f007 feed 	bl	199ee <printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   11c14:	7829      	ldrb	r1, [r5, #0]
   11c16:	4608      	mov	r0, r1
   11c18:	f009 fcd3 	bl	1b5c2 <att_op_get_type>
   11c1c:	2800      	cmp	r0, #0
   11c1e:	d0c7      	beq.n	11bb0 <bt_att_recv+0x14>
	if (!req) {
   11c20:	2900      	cmp	r1, #0
   11c22:	d0c5      	beq.n	11bb0 <bt_att_recv+0x14>
   11c24:	2306      	movs	r3, #6
   11c26:	2200      	movs	r2, #0
   11c28:	4630      	mov	r0, r6
   11c2a:	f7ff ff97 	bl	11b5c <send_err_rsp.part.0>
   11c2e:	e7bf      	b.n	11bb0 <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   11c30:	2f05      	cmp	r7, #5
   11c32:	d10e      	bne.n	11c52 <bt_att_recv+0xb6>
   11c34:	34c0      	adds	r4, #192	; 0xc0
   11c36:	e8d4 3fef 	ldaex	r3, [r4]
   11c3a:	f043 0202 	orr.w	r2, r3, #2
   11c3e:	e8c4 2fec 	stlex	ip, r2, [r4]
   11c42:	f1bc 0f00 	cmp.w	ip, #0
   11c46:	d1f6      	bne.n	11c36 <bt_att_recv+0x9a>
   11c48:	079b      	lsls	r3, r3, #30
   11c4a:	d502      	bpl.n	11c52 <bt_att_recv+0xb6>
			BT_WARN("Ignoring unexpected indication");
   11c4c:	2157      	movs	r1, #87	; 0x57
   11c4e:	4813      	ldr	r0, [pc, #76]	; (11c9c <bt_att_recv+0x100>)
   11c50:	e7ac      	b.n	11bac <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   11c52:	180b      	adds	r3, r1, r0
   11c54:	f8b8 200c 	ldrh.w	r2, [r8, #12]
   11c58:	7859      	ldrb	r1, [r3, #1]
   11c5a:	4291      	cmp	r1, r2
   11c5c:	d908      	bls.n	11c70 <bt_att_recv+0xd4>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   11c5e:	2145      	movs	r1, #69	; 0x45
   11c60:	782b      	ldrb	r3, [r5, #0]
   11c62:	480f      	ldr	r0, [pc, #60]	; (11ca0 <bt_att_recv+0x104>)
   11c64:	f007 fec3 	bl	199ee <printk>
	if (handler->type == ATT_REQUEST && err) {
   11c68:	2f01      	cmp	r7, #1
   11c6a:	d1a1      	bne.n	11bb0 <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   11c6c:	2304      	movs	r3, #4
   11c6e:	e008      	b.n	11c82 <bt_att_recv+0xe6>
		err = handler->func(att_chan, buf);
   11c70:	685b      	ldr	r3, [r3, #4]
   11c72:	4641      	mov	r1, r8
   11c74:	4630      	mov	r0, r6
   11c76:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   11c78:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   11c7a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   11c7c:	d198      	bne.n	11bb0 <bt_att_recv+0x14>
   11c7e:	2800      	cmp	r0, #0
   11c80:	d096      	beq.n	11bb0 <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   11c82:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   11c84:	2900      	cmp	r1, #0
   11c86:	d093      	beq.n	11bb0 <bt_att_recv+0x14>
   11c88:	e7cd      	b.n	11c26 <bt_att_recv+0x8a>
   11c8a:	bf00      	nop
   11c8c:	00020a51 	.word	0x00020a51
   11c90:	0001de00 	.word	0x0001de00
   11c94:	00020a71 	.word	0x00020a71
   11c98:	00020ada 	.word	0x00020ada
   11c9c:	00020a92 	.word	0x00020a92
   11ca0:	00020ab6 	.word	0x00020ab6

00011ca4 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11ca8:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11caa:	6803      	ldr	r3, [r0, #0]
   11cac:	460e      	mov	r6, r1
   11cae:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11cb0:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11cb2:	bf18      	it	ne
   11cb4:	2101      	movne	r1, #1
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11cb6:	b087      	sub	sp, #28
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11cb8:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   11cba:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   11cbc:	f00a fb58 	bl	1c370 <bt_gatt_change_aware>
   11cc0:	2800      	cmp	r0, #0
   11cc2:	d04b      	beq.n	11d5c <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
   11cc4:	2f00      	cmp	r7, #0
   11cc6:	d04b      	beq.n	11d60 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
   11cc8:	2218      	movs	r2, #24
   11cca:	2100      	movs	r1, #0
   11ccc:	4668      	mov	r0, sp
   11cce:	f009 f8f9 	bl	1aec4 <memset>
	if (rsp) {
   11cd2:	f1b8 0f00 	cmp.w	r8, #0
   11cd6:	d122      	bne.n	11d1e <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   11cd8:	682b      	ldr	r3, [r5, #0]
	data.offset = offset;
   11cda:	f04f 0900 	mov.w	r9, #0
	data.conn = chan->att->conn;
   11cde:	681b      	ldr	r3, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11ce0:	4639      	mov	r1, r7
	data.conn = chan->att->conn;
   11ce2:	9300      	str	r3, [sp, #0]
	data.value = value;
   11ce4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11ce6:	4638      	mov	r0, r7
	data.value = value;
   11ce8:	9303      	str	r3, [sp, #12]
	data.len = len;
   11cea:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11cee:	4a1d      	ldr	r2, [pc, #116]	; (11d64 <att_write_rsp.constprop.0+0xc0>)
	data.len = len;
   11cf0:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   11cf4:	2301      	movs	r3, #1
   11cf6:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11cfa:	466b      	mov	r3, sp
	data.req = req;
   11cfc:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   11d00:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   11d04:	f009 fca3 	bl	1b64e <bt_gatt_foreach_attr>
	if (data.err) {
   11d08:	f89d 4014 	ldrb.w	r4, [sp, #20]
   11d0c:	b1f4      	cbz	r4, 11d4c <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   11d0e:	f1b8 0f00 	cmp.w	r8, #0
   11d12:	d10e      	bne.n	11d32 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   11d14:	2400      	movs	r4, #0
}
   11d16:	4620      	mov	r0, r4
   11d18:	b007      	add	sp, #28
   11d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   11d1e:	2200      	movs	r2, #0
   11d20:	4641      	mov	r1, r8
   11d22:	4628      	mov	r0, r5
   11d24:	f7ff fec8 	bl	11ab8 <bt_att_chan_create_pdu>
   11d28:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   11d2a:	2800      	cmp	r0, #0
   11d2c:	d1d4      	bne.n	11cd8 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   11d2e:	240e      	movs	r4, #14
   11d30:	e7f1      	b.n	11d16 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   11d32:	9801      	ldr	r0, [sp, #4]
   11d34:	f002 fde8 	bl	14908 <net_buf_unref>
	if (!req) {
   11d38:	2e00      	cmp	r6, #0
   11d3a:	d0eb      	beq.n	11d14 <att_write_rsp.constprop.0+0x70>
   11d3c:	463a      	mov	r2, r7
   11d3e:	4631      	mov	r1, r6
   11d40:	4628      	mov	r0, r5
   11d42:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11d46:	f7ff ff09 	bl	11b5c <send_err_rsp.part.0>
   11d4a:	e7e3      	b.n	11d14 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   11d4c:	9901      	ldr	r1, [sp, #4]
   11d4e:	2900      	cmp	r1, #0
   11d50:	d0e0      	beq.n	11d14 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11d52:	4628      	mov	r0, r5
   11d54:	4a04      	ldr	r2, [pc, #16]	; (11d68 <att_write_rsp.constprop.0+0xc4>)
   11d56:	f009 fdb1 	bl	1b8bc <bt_att_chan_send_rsp>
   11d5a:	e7dc      	b.n	11d16 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11d5c:	2412      	movs	r4, #18
   11d5e:	e7da      	b.n	11d16 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   11d60:	2401      	movs	r4, #1
   11d62:	e7d8      	b.n	11d16 <att_write_rsp.constprop.0+0x72>
   11d64:	0001b71d 	.word	0x0001b71d
   11d68:	0001b98d 	.word	0x0001b98d

00011d6c <bt_att_create_pdu>:
{
   11d6c:	b570      	push	{r4, r5, r6, lr}
   11d6e:	460e      	mov	r6, r1
   11d70:	4615      	mov	r5, r2
	att = att_get(conn);
   11d72:	f7ff fbbb 	bl	114ec <att_get>
	if (!att) {
   11d76:	b190      	cbz	r0, 11d9e <bt_att_create_pdu+0x32>
	return list->head;
   11d78:	6a83      	ldr	r3, [r0, #40]	; 0x28
   11d7a:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11d7c:	b15b      	cbz	r3, 11d96 <bt_att_create_pdu+0x2a>
   11d7e:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   11d82:	d008      	beq.n	11d96 <bt_att_create_pdu+0x2a>
	return node->next;
   11d84:	681b      	ldr	r3, [r3, #0]
   11d86:	b10b      	cbz	r3, 11d8c <bt_att_create_pdu+0x20>
   11d88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   11d8c:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   11d90:	428a      	cmp	r2, r1
   11d92:	d906      	bls.n	11da2 <bt_att_create_pdu+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11d94:	b95b      	cbnz	r3, 11dae <bt_att_create_pdu+0x42>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   11d96:	2157      	movs	r1, #87	; 0x57
   11d98:	480a      	ldr	r0, [pc, #40]	; (11dc4 <bt_att_create_pdu+0x58>)
   11d9a:	f007 fe28 	bl	199ee <printk>
}
   11d9e:	2000      	movs	r0, #0
   11da0:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   11da2:	462a      	mov	r2, r5
   11da4:	4631      	mov	r1, r6
}
   11da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   11daa:	f7ff be85 	b.w	11ab8 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   11dae:	f513 749e 	adds.w	r4, r3, #316	; 0x13c
   11db2:	d004      	beq.n	11dbe <bt_att_create_pdu+0x52>
	return node->next;
   11db4:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   11db8:	b10c      	cbz	r4, 11dbe <bt_att_create_pdu+0x52>
   11dba:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
{
   11dbe:	4618      	mov	r0, r3
   11dc0:	4623      	mov	r3, r4
   11dc2:	e7e3      	b.n	11d8c <bt_att_create_pdu+0x20>
   11dc4:	00020af9 	.word	0x00020af9

00011dc8 <att_read_group_req>:
{
   11dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   11dcc:	898c      	ldrh	r4, [r1, #12]
{
   11dce:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   11dd0:	3c04      	subs	r4, #4
   11dd2:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   11dd4:	2c02      	cmp	r4, #2
{
   11dd6:	4608      	mov	r0, r1
   11dd8:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   11dda:	d001      	beq.n	11de0 <att_read_group_req+0x18>
   11ddc:	2c10      	cmp	r4, #16
   11dde:	d16f      	bne.n	11ec0 <att_read_group_req+0xf8>
   11de0:	2104      	movs	r1, #4
   11de2:	3008      	adds	r0, #8
   11de4:	f002 fe88 	bl	14af8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11de8:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   11dec:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   11dee:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   11df0:	1d01      	adds	r1, r0, #4
   11df2:	4622      	mov	r2, r4
   11df4:	4640      	mov	r0, r8
   11df6:	f009 f8dd 	bl	1afb4 <bt_uuid_create>
   11dfa:	2800      	cmp	r0, #0
   11dfc:	d062      	beq.n	11ec4 <att_read_group_req+0xfc>
	if (!start || !end) {
   11dfe:	2e00      	cmp	r6, #0
   11e00:	d03a      	beq.n	11e78 <att_read_group_req+0xb0>
   11e02:	2400      	movs	r4, #0
   11e04:	2f00      	cmp	r7, #0
   11e06:	d036      	beq.n	11e76 <att_read_group_req+0xae>
	if (start > end) {
   11e08:	42be      	cmp	r6, r7
   11e0a:	d835      	bhi.n	11e78 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   11e0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   11e10:	4640      	mov	r0, r8
   11e12:	a901      	add	r1, sp, #4
   11e14:	f88d 4004 	strb.w	r4, [sp, #4]
   11e18:	f8ad 3006 	strh.w	r3, [sp, #6]
   11e1c:	f009 f89c 	bl	1af58 <bt_uuid_cmp>
   11e20:	2800      	cmp	r0, #0
   11e22:	d134      	bne.n	11e8e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   11e24:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   11e26:	2214      	movs	r2, #20
   11e28:	2100      	movs	r1, #0
   11e2a:	a807      	add	r0, sp, #28
   11e2c:	f009 f84a 	bl	1aec4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   11e30:	2201      	movs	r2, #1
   11e32:	2111      	movs	r1, #17
   11e34:	4620      	mov	r0, r4
   11e36:	f7ff ff99 	bl	11d6c <bt_att_create_pdu>
   11e3a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   11e3c:	2800      	cmp	r0, #0
   11e3e:	d041      	beq.n	11ec4 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   11e40:	2101      	movs	r1, #1
   11e42:	3008      	adds	r0, #8
	data.uuid = uuid;
   11e44:	e9cd 5807 	strd	r5, r8, [sp, #28]
   11e48:	f002 fe74 	bl	14b34 <net_buf_simple_add>
	data.rsp->len = 0U;
   11e4c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   11e50:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11e52:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   11e54:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11e58:	4639      	mov	r1, r7
   11e5a:	4630      	mov	r0, r6
   11e5c:	4a1a      	ldr	r2, [pc, #104]	; (11ec8 <att_read_group_req+0x100>)
	data.group = NULL;
   11e5e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   11e62:	f009 fbf4 	bl	1b64e <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   11e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11e68:	781c      	ldrb	r4, [r3, #0]
   11e6a:	bb1c      	cbnz	r4, 11eb4 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   11e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
   11e6e:	f002 fd4b 	bl	14908 <net_buf_unref>
	if (!req) {
   11e72:	230a      	movs	r3, #10
   11e74:	e018      	b.n	11ea8 <att_read_group_req+0xe0>
			*err = 0U;
   11e76:	463e      	mov	r6, r7
	if (!req) {
   11e78:	2301      	movs	r3, #1
   11e7a:	4632      	mov	r2, r6
   11e7c:	2110      	movs	r1, #16
   11e7e:	4628      	mov	r0, r5
   11e80:	f7ff fe6c 	bl	11b5c <send_err_rsp.part.0>
		return 0;
   11e84:	2400      	movs	r4, #0
}
   11e86:	4620      	mov	r0, r4
   11e88:	b00c      	add	sp, #48	; 0x30
   11e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   11e8e:	f642 0301 	movw	r3, #10241	; 0x2801
   11e92:	4640      	mov	r0, r8
   11e94:	a907      	add	r1, sp, #28
   11e96:	f88d 401c 	strb.w	r4, [sp, #28]
   11e9a:	f8ad 301e 	strh.w	r3, [sp, #30]
   11e9e:	f009 f85b 	bl	1af58 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   11ea2:	2800      	cmp	r0, #0
   11ea4:	d0be      	beq.n	11e24 <att_read_group_req+0x5c>
	if (!req) {
   11ea6:	2310      	movs	r3, #16
   11ea8:	4632      	mov	r2, r6
   11eaa:	2110      	movs	r1, #16
   11eac:	4628      	mov	r0, r5
   11eae:	f7ff fe55 	bl	11b5c <send_err_rsp.part.0>
		return 0;
   11eb2:	e7e8      	b.n	11e86 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11eb4:	4628      	mov	r0, r5
   11eb6:	4a05      	ldr	r2, [pc, #20]	; (11ecc <att_read_group_req+0x104>)
   11eb8:	9909      	ldr	r1, [sp, #36]	; 0x24
   11eba:	f009 fcff 	bl	1b8bc <bt_att_chan_send_rsp>
	return 0;
   11ebe:	e7e1      	b.n	11e84 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   11ec0:	2404      	movs	r4, #4
   11ec2:	e7e0      	b.n	11e86 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   11ec4:	240e      	movs	r4, #14
   11ec6:	e7de      	b.n	11e86 <att_read_group_req+0xbe>
   11ec8:	00011765 	.word	0x00011765
   11ecc:	0001b98d 	.word	0x0001b98d

00011ed0 <att_read_mult_req>:
{
   11ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   11ed4:	6886      	ldr	r6, [r0, #8]
{
   11ed6:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   11ed8:	2210      	movs	r2, #16
{
   11eda:	4604      	mov	r4, r0
   11edc:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   11ede:	4668      	mov	r0, sp
   11ee0:	2100      	movs	r1, #0
   11ee2:	f008 ffef 	bl	1aec4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   11ee6:	2200      	movs	r2, #0
   11ee8:	210f      	movs	r1, #15
   11eea:	4630      	mov	r0, r6
   11eec:	f7ff ff3e 	bl	11d6c <bt_att_create_pdu>
   11ef0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   11ef2:	b360      	cbz	r0, 11f4e <att_read_mult_req+0x7e>
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   11ef4:	f04f 0801 	mov.w	r8, #1
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11ef8:	f8df 9058 	ldr.w	r9, [pc, #88]	; 11f54 <att_read_mult_req+0x84>
	data.chan = chan;
   11efc:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   11efe:	f105 0708 	add.w	r7, r5, #8
	while (buf->len >= sizeof(uint16_t)) {
   11f02:	89ab      	ldrh	r3, [r5, #12]
   11f04:	2b01      	cmp	r3, #1
   11f06:	d805      	bhi.n	11f14 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11f08:	4620      	mov	r0, r4
   11f0a:	4a13      	ldr	r2, [pc, #76]	; (11f58 <att_read_mult_req+0x88>)
   11f0c:	9902      	ldr	r1, [sp, #8]
   11f0e:	f009 fcd5 	bl	1b8bc <bt_att_chan_send_rsp>
   11f12:	e018      	b.n	11f46 <att_read_mult_req+0x76>
   11f14:	4638      	mov	r0, r7
   11f16:	f00a fa98 	bl	1c44a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11f1a:	466b      	mov	r3, sp
   11f1c:	464a      	mov	r2, r9
   11f1e:	4601      	mov	r1, r0
   11f20:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   11f22:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11f26:	f009 fb92 	bl	1b64e <bt_gatt_foreach_attr>
		if (data.err) {
   11f2a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11f2e:	2b00      	cmp	r3, #0
   11f30:	d0e7      	beq.n	11f02 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   11f32:	9802      	ldr	r0, [sp, #8]
   11f34:	f002 fce8 	bl	14908 <net_buf_unref>
	if (!req) {
   11f38:	4632      	mov	r2, r6
   11f3a:	210e      	movs	r1, #14
   11f3c:	4620      	mov	r0, r4
   11f3e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11f42:	f7ff fe0b 	bl	11b5c <send_err_rsp.part.0>
	return 0;
   11f46:	2000      	movs	r0, #0
}
   11f48:	b005      	add	sp, #20
   11f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   11f4e:	200e      	movs	r0, #14
   11f50:	e7fa      	b.n	11f48 <att_read_mult_req+0x78>
   11f52:	bf00      	nop
   11f54:	0001b9b5 	.word	0x0001b9b5
   11f58:	0001b98d 	.word	0x0001b98d

00011f5c <att_read_rsp>:
{
   11f5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   11f60:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   11f64:	4605      	mov	r5, r0
   11f66:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   11f68:	4640      	mov	r0, r8
   11f6a:	2101      	movs	r1, #1
{
   11f6c:	4614      	mov	r4, r2
   11f6e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   11f70:	f00a f9fe 	bl	1c370 <bt_gatt_change_aware>
   11f74:	b390      	cbz	r0, 11fdc <att_read_rsp+0x80>
	if (!handle) {
   11f76:	b39e      	cbz	r6, 11fe0 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   11f78:	2210      	movs	r2, #16
   11f7a:	2100      	movs	r1, #0
   11f7c:	4668      	mov	r0, sp
   11f7e:	f008 ffa1 	bl	1aec4 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   11f82:	2200      	movs	r2, #0
   11f84:	4621      	mov	r1, r4
   11f86:	4640      	mov	r0, r8
   11f88:	f7ff fef0 	bl	11d6c <bt_att_create_pdu>
   11f8c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   11f8e:	b348      	cbz	r0, 11fe4 <att_read_rsp+0x88>
	data.offset = offset;
   11f90:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11f94:	4631      	mov	r1, r6
	data.offset = offset;
   11f96:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   11f9a:	2301      	movs	r3, #1
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11f9c:	4630      	mov	r0, r6
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   11f9e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11fa2:	4a11      	ldr	r2, [pc, #68]	; (11fe8 <att_read_rsp+0x8c>)
   11fa4:	466b      	mov	r3, sp
	data.chan = chan;
   11fa6:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   11fa8:	f009 fb51 	bl	1b64e <bt_gatt_foreach_attr>
	if (data.err) {
   11fac:	f89d 400c 	ldrb.w	r4, [sp, #12]
   11fb0:	b174      	cbz	r4, 11fd0 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   11fb2:	9802      	ldr	r0, [sp, #8]
   11fb4:	f002 fca8 	bl	14908 <net_buf_unref>
	if (!req) {
   11fb8:	4632      	mov	r2, r6
   11fba:	4639      	mov	r1, r7
   11fbc:	4628      	mov	r0, r5
   11fbe:	f89d 300c 	ldrb.w	r3, [sp, #12]
   11fc2:	f7ff fdcb 	bl	11b5c <send_err_rsp.part.0>
		return 0;
   11fc6:	2400      	movs	r4, #0
}
   11fc8:	4620      	mov	r0, r4
   11fca:	b004      	add	sp, #16
   11fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   11fd0:	4628      	mov	r0, r5
   11fd2:	4a06      	ldr	r2, [pc, #24]	; (11fec <att_read_rsp+0x90>)
   11fd4:	9902      	ldr	r1, [sp, #8]
   11fd6:	f009 fc71 	bl	1b8bc <bt_att_chan_send_rsp>
	return 0;
   11fda:	e7f5      	b.n	11fc8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   11fdc:	2412      	movs	r4, #18
   11fde:	e7f3      	b.n	11fc8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   11fe0:	2401      	movs	r4, #1
   11fe2:	e7f1      	b.n	11fc8 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   11fe4:	240e      	movs	r4, #14
   11fe6:	e7ef      	b.n	11fc8 <att_read_rsp+0x6c>
   11fe8:	0001b9b5 	.word	0x0001b9b5
   11fec:	0001b98d 	.word	0x0001b98d

00011ff0 <att_read_type_req>:
{
   11ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   11ff4:	898c      	ldrh	r4, [r1, #12]
{
   11ff6:	4605      	mov	r5, r0
	uint8_t uuid_len = buf->len - sizeof(*req);
   11ff8:	3c04      	subs	r4, #4
   11ffa:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   11ffc:	2c02      	cmp	r4, #2
{
   11ffe:	4608      	mov	r0, r1
   12000:	b08c      	sub	sp, #48	; 0x30
	if (uuid_len != 2 && uuid_len != 16) {
   12002:	d001      	beq.n	12008 <att_read_type_req+0x18>
   12004:	2c10      	cmp	r4, #16
   12006:	d150      	bne.n	120aa <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   12008:	2104      	movs	r1, #4
   1200a:	3008      	adds	r0, #8
   1200c:	f002 fd74 	bl	14af8 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12010:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   12014:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   12016:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   12018:	1d01      	adds	r1, r0, #4
   1201a:	4622      	mov	r2, r4
   1201c:	4640      	mov	r0, r8
   1201e:	f008 ffc9 	bl	1afb4 <bt_uuid_create>
   12022:	b188      	cbz	r0, 12048 <att_read_type_req+0x58>
	if (!start || !end) {
   12024:	b19e      	cbz	r6, 1204e <att_read_type_req+0x5e>
   12026:	b18f      	cbz	r7, 1204c <att_read_type_req+0x5c>
	if (start > end) {
   12028:	42b7      	cmp	r7, r6
   1202a:	d310      	bcc.n	1204e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1202c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1202e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12030:	2100      	movs	r1, #0
   12032:	eb0d 0002 	add.w	r0, sp, r2
   12036:	f008 ff45 	bl	1aec4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1203a:	2201      	movs	r2, #1
   1203c:	2109      	movs	r1, #9
   1203e:	4620      	mov	r0, r4
   12040:	f7ff fe94 	bl	11d6c <bt_att_create_pdu>
   12044:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   12046:	b968      	cbnz	r0, 12064 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   12048:	240e      	movs	r4, #14
   1204a:	e007      	b.n	1205c <att_read_type_req+0x6c>
			*err = 0U;
   1204c:	463e      	mov	r6, r7
	if (!req) {
   1204e:	2301      	movs	r3, #1
   12050:	4632      	mov	r2, r6
   12052:	2108      	movs	r1, #8
   12054:	4628      	mov	r0, r5
   12056:	f7ff fd81 	bl	11b5c <send_err_rsp.part.0>
		return 0;
   1205a:	2400      	movs	r4, #0
}
   1205c:	4620      	mov	r0, r4
   1205e:	b00c      	add	sp, #48	; 0x30
   12060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   12064:	2101      	movs	r1, #1
   12066:	3008      	adds	r0, #8
	data.uuid = uuid;
   12068:	e9cd 5806 	strd	r5, r8, [sp, #24]
   1206c:	f002 fd62 	bl	14b34 <net_buf_simple_add>
	data.rsp->len = 0U;
   12070:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12074:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   12076:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12078:	4639      	mov	r1, r7
	data.rsp->len = 0U;
   1207a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1207e:	4a0c      	ldr	r2, [pc, #48]	; (120b0 <att_read_type_req+0xc0>)
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12080:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   12084:	4630      	mov	r0, r6
   12086:	ab06      	add	r3, sp, #24
   12088:	f009 fae1 	bl	1b64e <bt_gatt_foreach_attr>
	if (data.err) {
   1208c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   12090:	b12c      	cbz	r4, 1209e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   12092:	9808      	ldr	r0, [sp, #32]
   12094:	f002 fc38 	bl	14908 <net_buf_unref>
	if (!req) {
   12098:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1209c:	e7d8      	b.n	12050 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1209e:	4628      	mov	r0, r5
   120a0:	4a04      	ldr	r2, [pc, #16]	; (120b4 <att_read_type_req+0xc4>)
   120a2:	9908      	ldr	r1, [sp, #32]
   120a4:	f009 fc0a 	bl	1b8bc <bt_att_chan_send_rsp>
	return 0;
   120a8:	e7d8      	b.n	1205c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   120aa:	2404      	movs	r4, #4
   120ac:	e7d6      	b.n	1205c <att_read_type_req+0x6c>
   120ae:	bf00      	nop
   120b0:	0001198d 	.word	0x0001198d
   120b4:	0001b98d 	.word	0x0001b98d

000120b8 <att_find_type_req>:
{
   120b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   120bc:	4688      	mov	r8, r1
   120be:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   120c0:	2106      	movs	r1, #6
   120c2:	b086      	sub	sp, #24
   120c4:	f108 0008 	add.w	r0, r8, #8
   120c8:	f002 fd16 	bl	14af8 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   120cc:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   120ce:	b317      	cbz	r7, 12116 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   120d0:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   120d4:	f1b9 0f00 	cmp.w	r9, #0
   120d8:	d01c      	beq.n	12114 <att_find_type_req+0x5c>
	if (start > end) {
   120da:	454f      	cmp	r7, r9
   120dc:	d81b      	bhi.n	12116 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   120de:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   120e0:	2400      	movs	r4, #0
   120e2:	f8ad 3002 	strh.w	r3, [sp, #2]
   120e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   120ea:	4668      	mov	r0, sp
   120ec:	a901      	add	r1, sp, #4
	value = buf->data;
   120ee:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   120f2:	f88d 4000 	strb.w	r4, [sp]
   120f6:	f88d 4004 	strb.w	r4, [sp, #4]
   120fa:	f8ad 3006 	strh.w	r3, [sp, #6]
   120fe:	f008 ff2b 	bl	1af58 <bt_uuid_cmp>
   12102:	4606      	mov	r6, r0
   12104:	b190      	cbz	r0, 1212c <att_find_type_req+0x74>
	if (!req) {
   12106:	230a      	movs	r3, #10
   12108:	463a      	mov	r2, r7
   1210a:	2106      	movs	r1, #6
   1210c:	4628      	mov	r0, r5
   1210e:	f7ff fd25 	bl	11b5c <send_err_rsp.part.0>
		return 0;
   12112:	e007      	b.n	12124 <att_find_type_req+0x6c>
			*err = 0U;
   12114:	464f      	mov	r7, r9
	if (!req) {
   12116:	2301      	movs	r3, #1
   12118:	463a      	mov	r2, r7
   1211a:	2106      	movs	r1, #6
   1211c:	4628      	mov	r0, r5
   1211e:	f7ff fd1d 	bl	11b5c <send_err_rsp.part.0>
		return 0;
   12122:	2400      	movs	r4, #0
}
   12124:	4620      	mov	r0, r4
   12126:	b006      	add	sp, #24
   12128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1212c:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   12130:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   12134:	4601      	mov	r1, r0
   12136:	2214      	movs	r2, #20
   12138:	a801      	add	r0, sp, #4
   1213a:	f008 fec3 	bl	1aec4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1213e:	4632      	mov	r2, r6
   12140:	2107      	movs	r1, #7
   12142:	4640      	mov	r0, r8
   12144:	f7ff fe12 	bl	11d6c <bt_att_create_pdu>
   12148:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1214a:	b1e0      	cbz	r0, 12186 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1214c:	230a      	movs	r3, #10
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1214e:	4649      	mov	r1, r9
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   12150:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12154:	4638      	mov	r0, r7
   12156:	4a0d      	ldr	r2, [pc, #52]	; (1218c <att_find_type_req+0xd4>)
   12158:	ab01      	add	r3, sp, #4
	data.value_len = value_len;
   1215a:	f88d 4014 	strb.w	r4, [sp, #20]
	data.value = value;
   1215e:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   12162:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   12164:	f009 fa73 	bl	1b64e <bt_gatt_foreach_attr>
	if (data.err) {
   12168:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1216c:	b12c      	cbz	r4, 1217a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1216e:	9802      	ldr	r0, [sp, #8]
   12170:	f002 fbca 	bl	14908 <net_buf_unref>
	if (!req) {
   12174:	f89d 3015 	ldrb.w	r3, [sp, #21]
   12178:	e7ce      	b.n	12118 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1217a:	4628      	mov	r0, r5
   1217c:	4a04      	ldr	r2, [pc, #16]	; (12190 <att_find_type_req+0xd8>)
   1217e:	9902      	ldr	r1, [sp, #8]
   12180:	f009 fb9c 	bl	1b8bc <bt_att_chan_send_rsp>
	return 0;
   12184:	e7ce      	b.n	12124 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   12186:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   12188:	e7cc      	b.n	12124 <att_find_type_req+0x6c>
   1218a:	bf00      	nop
   1218c:	00011555 	.word	0x00011555
   12190:	0001b98d 	.word	0x0001b98d

00012194 <att_find_info_req>:
{
   12194:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   12196:	688b      	ldr	r3, [r1, #8]
{
   12198:	4605      	mov	r5, r0
	start_handle = sys_le16_to_cpu(req->start_handle);
   1219a:	881e      	ldrh	r6, [r3, #0]
{
   1219c:	b085      	sub	sp, #20
	if (!start || !end) {
   1219e:	b19e      	cbz	r6, 121c8 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   121a0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   121a2:	b184      	cbz	r4, 121c6 <att_find_info_req+0x32>
	if (start > end) {
   121a4:	42b4      	cmp	r4, r6
   121a6:	d30f      	bcc.n	121c8 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   121a8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   121aa:	2210      	movs	r2, #16
   121ac:	2100      	movs	r1, #0
   121ae:	4668      	mov	r0, sp
   121b0:	f008 fe88 	bl	1aec4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   121b4:	2200      	movs	r2, #0
   121b6:	2105      	movs	r1, #5
   121b8:	4638      	mov	r0, r7
   121ba:	f7ff fdd7 	bl	11d6c <bt_att_create_pdu>
   121be:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   121c0:	b958      	cbnz	r0, 121da <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   121c2:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   121c4:	e007      	b.n	121d6 <att_find_info_req+0x42>
			*err = 0U;
   121c6:	4626      	mov	r6, r4
	if (!req) {
   121c8:	2301      	movs	r3, #1
   121ca:	4632      	mov	r2, r6
   121cc:	2104      	movs	r1, #4
   121ce:	4628      	mov	r0, r5
   121d0:	f7ff fcc4 	bl	11b5c <send_err_rsp.part.0>
	return 0;
   121d4:	2000      	movs	r0, #0
}
   121d6:	b005      	add	sp, #20
   121d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   121da:	4621      	mov	r1, r4
   121dc:	466b      	mov	r3, sp
   121de:	4630      	mov	r0, r6
   121e0:	4a08      	ldr	r2, [pc, #32]	; (12204 <att_find_info_req+0x70>)
	data.chan = chan;
   121e2:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   121e4:	f009 fa33 	bl	1b64e <bt_gatt_foreach_attr>
	if (!data.rsp) {
   121e8:	9c02      	ldr	r4, [sp, #8]
   121ea:	b924      	cbnz	r4, 121f6 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   121ec:	9801      	ldr	r0, [sp, #4]
   121ee:	f002 fb8b 	bl	14908 <net_buf_unref>
	if (!req) {
   121f2:	230a      	movs	r3, #10
   121f4:	e7e9      	b.n	121ca <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   121f6:	4628      	mov	r0, r5
   121f8:	4a03      	ldr	r2, [pc, #12]	; (12208 <att_find_info_req+0x74>)
   121fa:	9901      	ldr	r1, [sp, #4]
   121fc:	f009 fb5e 	bl	1b8bc <bt_att_chan_send_rsp>
   12200:	e7e8      	b.n	121d4 <att_find_info_req+0x40>
   12202:	bf00      	nop
   12204:	0001b665 	.word	0x0001b665
   12208:	0001b98d 	.word	0x0001b98d

0001220c <att_mtu_req>:
{
   1220c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1220e:	4603      	mov	r3, r0
   12210:	f853 2bc8 	ldr.w	r2, [r3], #200
{
   12214:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   12216:	6810      	ldr	r0, [r2, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12218:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1221c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   12220:	071b      	lsls	r3, r3, #28
   12222:	d41b      	bmi.n	1225c <att_mtu_req+0x50>
	mtu_client = sys_le16_to_cpu(req->mtu);
   12224:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   12226:	881b      	ldrh	r3, [r3, #0]
   12228:	2b16      	cmp	r3, #22
   1222a:	d919      	bls.n	12260 <att_mtu_req+0x54>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1222c:	2202      	movs	r2, #2
   1222e:	2103      	movs	r1, #3
   12230:	f7ff fd9c 	bl	11d6c <bt_att_create_pdu>
	if (!pdu) {
   12234:	4606      	mov	r6, r0
   12236:	b1a8      	cbz	r0, 12264 <att_mtu_req+0x58>
	return net_buf_simple_add(&buf->b, len);
   12238:	2102      	movs	r1, #2
   1223a:	3008      	adds	r0, #8
   1223c:	f002 fc7a 	bl	14b34 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   12240:	2717      	movs	r7, #23
   12242:	7044      	strb	r4, [r0, #1]
   12244:	7007      	strb	r7, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   12246:	4631      	mov	r1, r6
   12248:	4628      	mov	r0, r5
   1224a:	4a07      	ldr	r2, [pc, #28]	; (12268 <att_mtu_req+0x5c>)
   1224c:	f009 fb36 	bl	1b8bc <bt_att_chan_send_rsp>
	return 0;
   12250:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   12252:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   12256:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
}
   1225a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1225c:	2006      	movs	r0, #6
   1225e:	e7fc      	b.n	1225a <att_mtu_req+0x4e>
		return BT_ATT_ERR_INVALID_PDU;
   12260:	2004      	movs	r0, #4
   12262:	e7fa      	b.n	1225a <att_mtu_req+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   12264:	200e      	movs	r0, #14
   12266:	e7f8      	b.n	1225a <att_mtu_req+0x4e>
   12268:	0001b98d 	.word	0x0001b98d

0001226c <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1226c:	b513      	push	{r0, r1, r4, lr}
	struct bt_att_req *req = NULL;
   1226e:	2400      	movs	r4, #0
{
   12270:	4602      	mov	r2, r0
   12272:	460b      	mov	r3, r1

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   12274:	4807      	ldr	r0, [pc, #28]	; (12294 <bt_att_req_alloc+0x28>)
   12276:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   12278:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1227a:	f004 fe87 	bl	16f8c <k_mem_slab_alloc>
   1227e:	4601      	mov	r1, r0
   12280:	b930      	cbnz	r0, 12290 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   12282:	2218      	movs	r2, #24
   12284:	9801      	ldr	r0, [sp, #4]
   12286:	f008 fe1d 	bl	1aec4 <memset>

	return req;
   1228a:	9801      	ldr	r0, [sp, #4]
}
   1228c:	b002      	add	sp, #8
   1228e:	bd10      	pop	{r4, pc}
		return NULL;
   12290:	4620      	mov	r0, r4
   12292:	e7fb      	b.n	1228c <bt_att_req_alloc+0x20>
   12294:	20008624 	.word	0x20008624

00012298 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   12298:	b507      	push	{r0, r1, r2, lr}
   1229a:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
   1229c:	a901      	add	r1, sp, #4
   1229e:	4803      	ldr	r0, [pc, #12]	; (122ac <bt_att_req_free+0x14>)
   122a0:	f004 fece 	bl	17040 <k_mem_slab_free>
}
   122a4:	b003      	add	sp, #12
   122a6:	f85d fb04 	ldr.w	pc, [sp], #4
   122aa:	bf00      	nop
   122ac:	20008624 	.word	0x20008624

000122b0 <att_handle_rsp>:
{
   122b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   122b4:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->timeout_work);
   122b6:	30f0      	adds	r0, #240	; 0xf0
{
   122b8:	460f      	mov	r7, r1
   122ba:	4690      	mov	r8, r2
   122bc:	461e      	mov	r6, r3
	k_delayed_work_cancel(&chan->timeout_work);
   122be:	f006 fc93 	bl	18be8 <k_delayed_work_cancel>
	if (!chan->req) {
   122c2:	f8d4 50cc 	ldr.w	r5, [r4, #204]	; 0xcc
   122c6:	f04f 0a00 	mov.w	sl, #0
   122ca:	b99d      	cbnz	r5, 122f4 <att_handle_rsp+0x44>
		BT_WARN("No pending ATT request");
   122cc:	2157      	movs	r1, #87	; 0x57
   122ce:	4818      	ldr	r0, [pc, #96]	; (12330 <att_handle_rsp+0x80>)
   122d0:	f007 fb8d 	bl	199ee <printk>
	att_req_send_process(chan->att);
   122d4:	6820      	ldr	r0, [r4, #0]
   122d6:	f009 fbd5 	bl	1ba84 <att_req_send_process>
	if (func) {
   122da:	b13d      	cbz	r5, 122ec <att_handle_rsp+0x3c>
		func(chan->att->conn, err, pdu, len, params);
   122dc:	6820      	ldr	r0, [r4, #0]
   122de:	f8cd 9000 	str.w	r9, [sp]
   122e2:	4643      	mov	r3, r8
   122e4:	463a      	mov	r2, r7
   122e6:	4631      	mov	r1, r6
   122e8:	6800      	ldr	r0, [r0, #0]
   122ea:	47a8      	blx	r5
}
   122ec:	2000      	movs	r0, #0
   122ee:	b002      	add	sp, #8
   122f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   122f4:	4b0f      	ldr	r3, [pc, #60]	; (12334 <att_handle_rsp+0x84>)
   122f6:	429d      	cmp	r5, r3
   122f8:	d103      	bne.n	12302 <att_handle_rsp+0x52>
	bt_att_func_t func = NULL;
   122fa:	4655      	mov	r5, sl
		chan->req = NULL;
   122fc:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
		goto process;
   12300:	e7e8      	b.n	122d4 <att_handle_rsp+0x24>
	if (chan->req->buf) {
   12302:	6928      	ldr	r0, [r5, #16]
   12304:	b128      	cbz	r0, 12312 <att_handle_rsp+0x62>
		net_buf_unref(chan->req->buf);
   12306:	f002 faff 	bl	14908 <net_buf_unref>
		chan->req->buf = NULL;
   1230a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1230e:	f8c3 a010 	str.w	sl, [r3, #16]
	chan->req->func = NULL;
   12312:	f04f 0a00 	mov.w	sl, #0
	func = chan->req->func;
   12316:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   1231a:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   1231c:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   12320:	f8d0 9014 	ldr.w	r9, [r0, #20]
	att_req_destroy(chan->req);
   12324:	f009 fc3b 	bl	1bb9e <att_req_destroy>
	chan->req = NULL;
   12328:	f8c4 a0cc 	str.w	sl, [r4, #204]	; 0xcc
   1232c:	e7d2      	b.n	122d4 <att_handle_rsp+0x24>
   1232e:	bf00      	nop
   12330:	00020b19 	.word	0x00020b19
   12334:	2000a99c 	.word	0x2000a99c

00012338 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   12338:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
{
   1233c:	b430      	push	{r4, r5}
	if (!chan->req || chan->req == &cancel) {
   1233e:	b18b      	cbz	r3, 12364 <att_error_rsp+0x2c>
   12340:	4a09      	ldr	r2, [pc, #36]	; (12368 <att_error_rsp+0x30>)
   12342:	4293      	cmp	r3, r2
   12344:	d00e      	beq.n	12364 <att_error_rsp+0x2c>
	if (chan->req->buf) {
   12346:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
   12348:	6889      	ldr	r1, [r1, #8]
	if (chan->req->buf) {
   1234a:	b12a      	cbz	r2, 12358 <att_error_rsp+0x20>
	buf->data = buf->__buf + state->offset;
   1234c:	899d      	ldrh	r5, [r3, #12]
   1234e:	89dc      	ldrh	r4, [r3, #14]
   12350:	6913      	ldr	r3, [r2, #16]
	buf->len = state->len;
   12352:	8194      	strh	r4, [r2, #12]
	buf->data = buf->__buf + state->offset;
   12354:	442b      	add	r3, r5
   12356:	6093      	str	r3, [r2, #8]
	err = rsp->error;
   12358:	78cb      	ldrb	r3, [r1, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   1235a:	2200      	movs	r2, #0
}
   1235c:	bc30      	pop	{r4, r5}
	return att_handle_rsp(chan, NULL, 0, err);
   1235e:	4611      	mov	r1, r2
   12360:	f7ff bfa6 	b.w	122b0 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   12364:	230e      	movs	r3, #14
   12366:	e7f8      	b.n	1235a <att_error_rsp+0x22>
   12368:	2000a99c 	.word	0x2000a99c

0001236c <att_reset>:
{
   1236c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1236e:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   12370:	9803      	ldr	r0, [sp, #12]
   12372:	2200      	movs	r2, #0
   12374:	2300      	movs	r3, #0
   12376:	300c      	adds	r0, #12
   12378:	f002 fa44 	bl	14804 <net_buf_get>
   1237c:	b948      	cbnz	r0, 12392 <att_reset+0x26>
	att->conn = NULL;
   1237e:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   12380:	6854      	ldr	r4, [r2, #4]
   12382:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   12384:	b944      	cbnz	r4, 12398 <att_reset+0x2c>
	k_mem_slab_free(&att_slab, (void **)&att);
   12386:	480d      	ldr	r0, [pc, #52]	; (123bc <att_reset+0x50>)
   12388:	a903      	add	r1, sp, #12
   1238a:	f004 fe59 	bl	17040 <k_mem_slab_free>
}
   1238e:	b004      	add	sp, #16
   12390:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   12392:	f002 fab9 	bl	14908 <net_buf_unref>
   12396:	e7eb      	b.n	12370 <att_reset+0x4>
	return node->next;
   12398:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
   1239a:	6866      	ldr	r6, [r4, #4]
   1239c:	b136      	cbz	r6, 123ac <att_reset+0x40>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1239e:	6963      	ldr	r3, [r4, #20]
   123a0:	210e      	movs	r1, #14
   123a2:	9300      	str	r3, [sp, #0]
   123a4:	2300      	movs	r3, #0
   123a6:	461a      	mov	r2, r3
   123a8:	4618      	mov	r0, r3
   123aa:	47b0      	blx	r6
		att_req_destroy(req);
   123ac:	4620      	mov	r0, r4
   123ae:	f009 fbf6 	bl	1bb9e <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   123b2:	2d00      	cmp	r5, #0
   123b4:	d0e7      	beq.n	12386 <att_reset+0x1a>
   123b6:	462c      	mov	r4, r5
   123b8:	682d      	ldr	r5, [r5, #0]
   123ba:	e7ee      	b.n	1239a <att_reset+0x2e>
   123bc:	200085ec 	.word	0x200085ec

000123c0 <att_timeout>:
{
   123c0:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = chan->att;
   123c2:	4605      	mov	r5, r0
   123c4:	f855 6df0 	ldr.w	r6, [r5, #-240]!
	BT_ERR("ATT Timeout");
   123c8:	2145      	movs	r1, #69	; 0x45
{
   123ca:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   123cc:	4808      	ldr	r0, [pc, #32]	; (123f0 <att_timeout+0x30>)
   123ce:	f007 fb0e 	bl	199ee <printk>
	att_chan_detach(chan);
   123d2:	4628      	mov	r0, r5
   123d4:	f009 fc20 	bl	1bc18 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   123d8:	6ab5      	ldr	r5, [r6, #40]	; 0x28
   123da:	b945      	cbnz	r5, 123ee <att_timeout+0x2e>
	att_reset(att);
   123dc:	4630      	mov	r0, r6
   123de:	f7ff ffc5 	bl	1236c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   123e2:	f854 0ce8 	ldr.w	r0, [r4, #-232]
   123e6:	f002 f83b 	bl	14460 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   123ea:	f844 5ce8 	str.w	r5, [r4, #-232]
}
   123ee:	bd70      	pop	{r4, r5, r6, pc}
   123f0:	00020b35 	.word	0x00020b35

000123f4 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   123f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   123f8:	460c      	mov	r4, r1
   123fa:	4617      	mov	r7, r2
   123fc:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   123fe:	4605      	mov	r5, r0
   12400:	b950      	cbnz	r0, 12418 <bt_att_send+0x24>
   12402:	492e      	ldr	r1, [pc, #184]	; (124bc <bt_att_send+0xc8>)
   12404:	482e      	ldr	r0, [pc, #184]	; (124c0 <bt_att_send+0xcc>)
   12406:	f640 32ce 	movw	r2, #3022	; 0xbce
   1240a:	f007 faf0 	bl	199ee <printk>
   1240e:	f640 31ce 	movw	r1, #3022	; 0xbce
   12412:	482a      	ldr	r0, [pc, #168]	; (124bc <bt_att_send+0xc8>)
   12414:	f007 fd91 	bl	19f3a <assert_post_action>
	__ASSERT_NO_MSG(buf);
   12418:	b954      	cbnz	r4, 12430 <bt_att_send+0x3c>
   1241a:	4928      	ldr	r1, [pc, #160]	; (124bc <bt_att_send+0xc8>)
   1241c:	4828      	ldr	r0, [pc, #160]	; (124c0 <bt_att_send+0xcc>)
   1241e:	f640 32cf 	movw	r2, #3023	; 0xbcf
   12422:	f007 fae4 	bl	199ee <printk>
   12426:	f640 31cf 	movw	r1, #3023	; 0xbcf
   1242a:	4824      	ldr	r0, [pc, #144]	; (124bc <bt_att_send+0xc8>)
   1242c:	f007 fd85 	bl	19f3a <assert_post_action>

	att = att_get(conn);
   12430:	4628      	mov	r0, r5
   12432:	f7ff f85b 	bl	114ec <att_get>
	if (!att) {
   12436:	4606      	mov	r6, r0
   12438:	b938      	cbnz	r0, 1244a <bt_att_send+0x56>
		net_buf_unref(buf);
   1243a:	4620      	mov	r0, r4
   1243c:	f002 fa64 	bl	14908 <net_buf_unref>
		return -ENOTCONN;
   12440:	f06f 0038 	mvn.w	r0, #56	; 0x38

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   12444:	b002      	add	sp, #8
   12446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1244a:	b147      	cbz	r7, 1245e <bt_att_send+0x6a>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1244c:	463b      	mov	r3, r7
   1244e:	4622      	mov	r2, r4
   12450:	2104      	movs	r1, #4
   12452:	4628      	mov	r0, r5
   12454:	f8cd 8000 	str.w	r8, [sp]
   12458:	f009 f838 	bl	1b4cc <bt_l2cap_send_cb>
   1245c:	e7f2      	b.n	12444 <bt_att_send+0x50>
	net_buf_put(&att->tx_queue, buf);
   1245e:	f100 070c 	add.w	r7, r0, #12
   12462:	4621      	mov	r1, r4
   12464:	4638      	mov	r0, r7
   12466:	f002 fa21 	bl	148ac <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1246a:	2200      	movs	r2, #0
   1246c:	2300      	movs	r3, #0
   1246e:	4638      	mov	r0, r7
   12470:	f002 f9c8 	bl	14804 <net_buf_get>
	if (!buf) {
   12474:	4605      	mov	r5, r0
   12476:	b908      	cbnz	r0, 1247c <bt_att_send+0x88>
	return 0;
   12478:	2000      	movs	r0, #0
   1247a:	e7e3      	b.n	12444 <bt_att_send+0x50>
	return list->head;
   1247c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1247e:	b1c3      	cbz	r3, 124b2 <bt_att_send+0xbe>
   12480:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   12484:	d015      	beq.n	124b2 <bt_att_send+0xbe>
	return node->next;
   12486:	681c      	ldr	r4, [r3, #0]
   12488:	b10c      	cbz	r4, 1248e <bt_att_send+0x9a>
   1248a:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		err = bt_att_chan_send(chan, buf, NULL);
   1248e:	2200      	movs	r2, #0
   12490:	4629      	mov	r1, r5
   12492:	f009 f9fc 	bl	1b88e <bt_att_chan_send>
		if (err >= 0) {
   12496:	2800      	cmp	r0, #0
   12498:	daee      	bge.n	12478 <bt_att_send+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1249a:	b154      	cbz	r4, 124b2 <bt_att_send+0xbe>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1249c:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   124a0:	d004      	beq.n	124ac <bt_att_send+0xb8>
	return node->next;
   124a2:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   124a6:	b10b      	cbz	r3, 124ac <bt_att_send+0xb8>
   124a8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   124ac:	4620      	mov	r0, r4
   124ae:	461c      	mov	r4, r3
   124b0:	e7ed      	b.n	1248e <bt_att_send+0x9a>
		k_queue_prepend(&att->tx_queue._queue, buf);
   124b2:	4629      	mov	r1, r5
   124b4:	4638      	mov	r0, r7
   124b6:	f00a fe22 	bl	1d0fe <k_queue_prepend>
   124ba:	e7dd      	b.n	12478 <bt_att_send+0x84>
   124bc:	000209f8 	.word	0x000209f8
   124c0:	0001ead7 	.word	0x0001ead7

000124c4 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   124c4:	b538      	push	{r3, r4, r5, lr}
   124c6:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   124c8:	4605      	mov	r5, r0
   124ca:	b950      	cbnz	r0, 124e2 <bt_att_req_send+0x1e>
   124cc:	4918      	ldr	r1, [pc, #96]	; (12530 <bt_att_req_send+0x6c>)
   124ce:	4819      	ldr	r0, [pc, #100]	; (12534 <bt_att_req_send+0x70>)
   124d0:	f640 32eb 	movw	r2, #3051	; 0xbeb
   124d4:	f007 fa8b 	bl	199ee <printk>
   124d8:	f640 31eb 	movw	r1, #3051	; 0xbeb
   124dc:	4814      	ldr	r0, [pc, #80]	; (12530 <bt_att_req_send+0x6c>)
   124de:	f007 fd2c 	bl	19f3a <assert_post_action>
	__ASSERT_NO_MSG(req);
   124e2:	b954      	cbnz	r4, 124fa <bt_att_req_send+0x36>
   124e4:	4912      	ldr	r1, [pc, #72]	; (12530 <bt_att_req_send+0x6c>)
   124e6:	4813      	ldr	r0, [pc, #76]	; (12534 <bt_att_req_send+0x70>)
   124e8:	f640 32ec 	movw	r2, #3052	; 0xbec
   124ec:	f007 fa7f 	bl	199ee <printk>
   124f0:	f640 31ec 	movw	r1, #3052	; 0xbec
   124f4:	480e      	ldr	r0, [pc, #56]	; (12530 <bt_att_req_send+0x6c>)
   124f6:	f007 fd20 	bl	19f3a <assert_post_action>

	att = att_get(conn);
   124fa:	4628      	mov	r0, r5
   124fc:	f7fe fff6 	bl	114ec <att_get>
	if (!att) {
   12500:	4605      	mov	r5, r0
   12502:	b930      	cbnz	r0, 12512 <bt_att_req_send+0x4e>
		net_buf_unref(req->buf);
   12504:	6920      	ldr	r0, [r4, #16]
   12506:	f002 f9ff 	bl	14908 <net_buf_unref>
		req->buf = NULL;
		return -ENOTCONN;
   1250a:	f06f 0038 	mvn.w	r0, #56	; 0x38
		req->buf = NULL;
   1250e:	6125      	str	r5, [r4, #16]

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);

	return 0;
}
   12510:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   12512:	2300      	movs	r3, #0
   12514:	6023      	str	r3, [r4, #0]
	return list->tail;
   12516:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   12518:	b933      	cbnz	r3, 12528 <bt_att_req_send+0x64>
	list->head = node;
   1251a:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   1251e:	4628      	mov	r0, r5
   12520:	f009 fab0 	bl	1ba84 <att_req_send_process>
	return 0;
   12524:	2000      	movs	r0, #0
   12526:	e7f3      	b.n	12510 <bt_att_req_send+0x4c>
	parent->next = child;
   12528:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1252a:	6084      	str	r4, [r0, #8]
}
   1252c:	e7f7      	b.n	1251e <bt_att_req_send+0x5a>
   1252e:	bf00      	nop
   12530:	000209f8 	.word	0x000209f8
   12534:	0001ead7 	.word	0x0001ead7

00012538 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   12538:	b510      	push	{r4, lr}
   1253a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   1253c:	b350      	cbz	r0, 12594 <bt_att_req_cancel+0x5c>
   1253e:	b349      	cbz	r1, 12594 <bt_att_req_cancel+0x5c>
		return;
	}

	att = att_get(conn);
   12540:	f7fe ffd4 	bl	114ec <att_get>
	if (!att) {
   12544:	b330      	cbz	r0, 12594 <bt_att_req_cancel+0x5c>
	return list->head;
   12546:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12548:	b15b      	cbz	r3, 12562 <bt_att_req_cancel+0x2a>
   1254a:	f5b3 719e 	subs.w	r1, r3, #316	; 0x13c
   1254e:	d008      	beq.n	12562 <bt_att_req_cancel+0x2a>
	return node->next;
   12550:	681b      	ldr	r3, [r3, #0]
   12552:	b10b      	cbz	r3, 12558 <bt_att_req_cancel+0x20>
   12554:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
	if (chan->req != req) {
   12558:	f8d1 20cc 	ldr.w	r2, [r1, #204]	; 0xcc
   1255c:	4294      	cmp	r4, r2
   1255e:	d006      	beq.n	1256e <bt_att_req_cancel+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12560:	b96b      	cbnz	r3, 1257e <bt_att_req_cancel+0x46>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   12562:	3004      	adds	r0, #4
   12564:	4621      	mov	r1, r4
   12566:	f009 f9d1 	bl	1b90c <sys_slist_find_and_remove.isra.0>

	att_req_destroy(req);
   1256a:	4620      	mov	r0, r4
   1256c:	e003      	b.n	12576 <bt_att_req_cancel+0x3e>
	att_req_destroy(req);
   1256e:	4620      	mov	r0, r4
	chan->req = &cancel;
   12570:	4b09      	ldr	r3, [pc, #36]	; (12598 <bt_att_req_cancel+0x60>)
   12572:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
}
   12576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
   1257a:	f009 bb10 	b.w	1bb9e <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1257e:	f513 729e 	adds.w	r2, r3, #316	; 0x13c
   12582:	d004      	beq.n	1258e <bt_att_req_cancel+0x56>
	return node->next;
   12584:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   12588:	b10a      	cbz	r2, 1258e <bt_att_req_cancel+0x56>
   1258a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
{
   1258e:	4619      	mov	r1, r3
   12590:	4613      	mov	r3, r2
   12592:	e7e1      	b.n	12558 <bt_att_req_cancel+0x20>
}
   12594:	bd10      	pop	{r4, pc}
   12596:	bf00      	nop
   12598:	2000a99c 	.word	0x2000a99c

0001259c <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   1259c:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   1259e:	4618      	mov	r0, r3
{
   125a0:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
   125a2:	4907      	ldr	r1, [pc, #28]	; (125c0 <db_hash_set+0x24>)
   125a4:	2210      	movs	r2, #16
   125a6:	47a0      	blx	r4
	if (len < 0) {
   125a8:	1e04      	subs	r4, r0, #0
   125aa:	da06      	bge.n	125ba <db_hash_set+0x1e>
		BT_ERR("Failed to decode value (err %zd)", len);
   125ac:	4622      	mov	r2, r4
   125ae:	2145      	movs	r1, #69	; 0x45
   125b0:	4804      	ldr	r0, [pc, #16]	; (125c4 <db_hash_set+0x28>)
   125b2:	f007 fa1c 	bl	199ee <printk>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
   125b6:	4620      	mov	r0, r4
   125b8:	bd10      	pop	{r4, pc}
	return 0;
   125ba:	2400      	movs	r4, #0
   125bc:	e7fb      	b.n	125b6 <db_hash_set+0x1a>
   125be:	bf00      	nop
   125c0:	2000c5d9 	.word	0x2000c5d9
   125c4:	00020b4d 	.word	0x00020b4d

000125c8 <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   125c8:	2210      	movs	r2, #16
{
   125ca:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
   125cc:	4906      	ldr	r1, [pc, #24]	; (125e8 <db_hash_store+0x20>)
   125ce:	4807      	ldr	r0, [pc, #28]	; (125ec <db_hash_store+0x24>)
   125d0:	f7f8 fe1c 	bl	b20c <settings_save_one>
	if (err) {
   125d4:	4602      	mov	r2, r0
   125d6:	b128      	cbz	r0, 125e4 <db_hash_store+0x1c>
}
   125d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
   125dc:	2145      	movs	r1, #69	; 0x45
   125de:	4804      	ldr	r0, [pc, #16]	; (125f0 <db_hash_store+0x28>)
   125e0:	f007 ba05 	b.w	199ee <printk>
}
   125e4:	bd08      	pop	{r3, pc}
   125e6:	bf00      	nop
   125e8:	2000c5c9 	.word	0x2000c5c9
   125ec:	00020b73 	.word	0x00020b73
   125f0:	00020b7b 	.word	0x00020b7b

000125f4 <find_cf_cfg>:
{
   125f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   125f6:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   125f8:	2600      	movs	r6, #0
   125fa:	4d0e      	ldr	r5, [pc, #56]	; (12634 <find_cf_cfg+0x40>)
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   125fc:	462f      	mov	r7, r5
		if (!conn) {
   125fe:	1c6a      	adds	r2, r5, #1
   12600:	b954      	cbnz	r4, 12618 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   12602:	4669      	mov	r1, sp
   12604:	4610      	mov	r0, r2
   12606:	9400      	str	r4, [sp, #0]
   12608:	f8cd 4003 	str.w	r4, [sp, #3]
   1260c:	f009 fbc9 	bl	1bda2 <bt_addr_le_cmp>
   12610:	b940      	cbnz	r0, 12624 <find_cf_cfg+0x30>
}
   12612:	4638      	mov	r0, r7
   12614:	b003      	add	sp, #12
   12616:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   12618:	4620      	mov	r0, r4
   1261a:	7829      	ldrb	r1, [r5, #0]
   1261c:	f008 fe82 	bl	1b324 <bt_conn_is_peer_addr_le>
   12620:	2800      	cmp	r0, #0
   12622:	d1f6      	bne.n	12612 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   12624:	3601      	adds	r6, #1
   12626:	2e0a      	cmp	r6, #10
   12628:	f105 0510 	add.w	r5, r5, #16
   1262c:	d1e6      	bne.n	125fc <find_cf_cfg+0x8>
	return NULL;
   1262e:	2700      	movs	r7, #0
   12630:	e7ef      	b.n	12612 <find_cf_cfg+0x1e>
   12632:	bf00      	nop
   12634:	2000a9b4 	.word	0x2000a9b4

00012638 <find_sc_cfg>:
{
   12638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1263a:	4606      	mov	r6, r0
   1263c:	460f      	mov	r7, r1
   1263e:	2400      	movs	r4, #0
   12640:	4d09      	ldr	r5, [pc, #36]	; (12668 <find_sc_cfg+0x30>)
		if (id == sc_cfg[i].id &&
   12642:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   12646:	42b3      	cmp	r3, r6
   12648:	d107      	bne.n	1265a <find_sc_cfg+0x22>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1264a:	4639      	mov	r1, r7
   1264c:	4628      	mov	r0, r5
   1264e:	f009 fba8 	bl	1bda2 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   12652:	b910      	cbnz	r0, 1265a <find_sc_cfg+0x22>
			return &sc_cfg[i];
   12654:	4805      	ldr	r0, [pc, #20]	; (1266c <find_sc_cfg+0x34>)
   12656:	4420      	add	r0, r4
}
   12658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1265a:	340c      	adds	r4, #12
   1265c:	2c78      	cmp	r4, #120	; 0x78
   1265e:	f105 050c 	add.w	r5, r5, #12
   12662:	d1ee      	bne.n	12642 <find_sc_cfg+0xa>
	return NULL;
   12664:	2000      	movs	r0, #0
   12666:	e7f7      	b.n	12658 <find_sc_cfg+0x20>
   12668:	2000be47 	.word	0x2000be47
   1266c:	2000be46 	.word	0x2000be46

00012670 <gatt_sub_find>:
{
   12670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12672:	4604      	mov	r4, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   12674:	2600      	movs	r6, #0
   12676:	4d0e      	ldr	r5, [pc, #56]	; (126b0 <gatt_sub_find+0x40>)
		struct gatt_sub *sub = &subscriptions[i];
   12678:	462f      	mov	r7, r5
		if (!conn) {
   1267a:	1c6a      	adds	r2, r5, #1
   1267c:	b954      	cbnz	r4, 12694 <gatt_sub_find+0x24>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   1267e:	4669      	mov	r1, sp
   12680:	4610      	mov	r0, r2
   12682:	9400      	str	r4, [sp, #0]
   12684:	f8cd 4003 	str.w	r4, [sp, #3]
   12688:	f009 fb8b 	bl	1bda2 <bt_addr_le_cmp>
   1268c:	b940      	cbnz	r0, 126a0 <gatt_sub_find+0x30>
}
   1268e:	4638      	mov	r0, r7
   12690:	b003      	add	sp, #12
   12692:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   12694:	4620      	mov	r0, r4
   12696:	7829      	ldrb	r1, [r5, #0]
   12698:	f008 fe44 	bl	1b324 <bt_conn_is_peer_addr_le>
   1269c:	2800      	cmp	r0, #0
   1269e:	d1f6      	bne.n	1268e <gatt_sub_find+0x1e>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   126a0:	3601      	adds	r6, #1
   126a2:	2e0a      	cmp	r6, #10
   126a4:	f105 0510 	add.w	r5, r5, #16
   126a8:	d1e6      	bne.n	12678 <gatt_sub_find+0x8>
	return NULL;
   126aa:	2700      	movs	r7, #0
   126ac:	e7ef      	b.n	1268e <gatt_sub_find+0x1e>
   126ae:	bf00      	nop
   126b0:	2000ab4c 	.word	0x2000ab4c

000126b4 <find_cf_cfg_by_addr>:
{
   126b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   126b6:	4606      	mov	r6, r0
   126b8:	460f      	mov	r7, r1
   126ba:	2400      	movs	r4, #0
   126bc:	4d09      	ldr	r5, [pc, #36]	; (126e4 <find_cf_cfg_by_addr+0x30>)
			if (id == cf_cfg[i].id &&
   126be:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   126c2:	42b3      	cmp	r3, r6
   126c4:	d107      	bne.n	126d6 <find_cf_cfg_by_addr+0x22>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   126c6:	4629      	mov	r1, r5
   126c8:	4638      	mov	r0, r7
   126ca:	f009 fb6a 	bl	1bda2 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   126ce:	b910      	cbnz	r0, 126d6 <find_cf_cfg_by_addr+0x22>
				return &cf_cfg[i];
   126d0:	4805      	ldr	r0, [pc, #20]	; (126e8 <find_cf_cfg_by_addr+0x34>)
   126d2:	4420      	add	r0, r4
}
   126d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   126d6:	3410      	adds	r4, #16
   126d8:	2ca0      	cmp	r4, #160	; 0xa0
   126da:	f105 0510 	add.w	r5, r5, #16
   126de:	d1ee      	bne.n	126be <find_cf_cfg_by_addr+0xa>
	return NULL;
   126e0:	2000      	movs	r0, #0
   126e2:	e7f7      	b.n	126d4 <find_cf_cfg_by_addr+0x20>
   126e4:	2000a9b5 	.word	0x2000a9b5
   126e8:	2000a9b4 	.word	0x2000a9b4

000126ec <bt_gatt_attr_write_ccc>:
{
   126ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   126f0:	461f      	mov	r7, r3
   126f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   126f6:	4604      	mov	r4, r0
   126f8:	4688      	mov	r8, r1
	struct _bt_gatt_ccc *ccc = attr->user_data;
   126fa:	f8d1 900c 	ldr.w	r9, [r1, #12]
	if (offset) {
   126fe:	2b00      	cmp	r3, #0
   12700:	d141      	bne.n	12786 <bt_gatt_attr_write_ccc+0x9a>
	if (!len || len > sizeof(uint16_t)) {
   12702:	1e7b      	subs	r3, r7, #1
   12704:	2b01      	cmp	r3, #1
   12706:	d841      	bhi.n	1278c <bt_gatt_attr_write_ccc+0xa0>
		value = *(uint8_t *)buf;
   12708:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
   1270a:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1270c:	4649      	mov	r1, r9
   1270e:	bf14      	ite	ne
   12710:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
   12712:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
   12714:	f009 fb48 	bl	1bda8 <find_ccc_cfg>
	if (!cfg) {
   12718:	4605      	mov	r5, r0
   1271a:	b9b0      	cbnz	r0, 1274a <bt_gatt_attr_write_ccc+0x5e>
		if (!value) {
   1271c:	b916      	cbnz	r6, 12724 <bt_gatt_attr_write_ccc+0x38>
			return len;
   1271e:	4638      	mov	r0, r7
}
   12720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   12724:	4649      	mov	r1, r9
   12726:	f009 fb3f 	bl	1bda8 <find_ccc_cfg>
		if (!cfg) {
   1272a:	4605      	mov	r5, r0
   1272c:	b930      	cbnz	r0, 1273c <bt_gatt_attr_write_ccc+0x50>
			BT_WARN("No space to store CCC cfg");
   1272e:	4819      	ldr	r0, [pc, #100]	; (12794 <bt_gatt_attr_write_ccc+0xa8>)
   12730:	2157      	movs	r1, #87	; 0x57
   12732:	f007 f95c 	bl	199ee <printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   12736:	f06f 0010 	mvn.w	r0, #16
   1273a:	e7f1      	b.n	12720 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1273c:	f104 0188 	add.w	r1, r4, #136	; 0x88
   12740:	3001      	adds	r0, #1
   12742:	f009 fb6a 	bl	1be1a <bt_addr_le_copy>
		cfg->id = conn->id;
   12746:	7a23      	ldrb	r3, [r4, #8]
   12748:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   1274a:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
   1274e:	b973      	cbnz	r3, 1276e <bt_gatt_attr_write_ccc+0x82>
	if (cfg->value != ccc->value) {
   12750:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
	cfg->value = value;
   12754:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   12756:	42b3      	cmp	r3, r6
   12758:	d003      	beq.n	12762 <bt_gatt_attr_write_ccc+0x76>
		gatt_ccc_changed(attr, ccc);
   1275a:	4649      	mov	r1, r9
   1275c:	4640      	mov	r0, r8
   1275e:	f009 fa99 	bl	1bc94 <gatt_ccc_changed>
	if (!value) {
   12762:	2e00      	cmp	r6, #0
   12764:	d1db      	bne.n	1271e <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
   12766:	4628      	mov	r0, r5
   12768:	f009 fb5a 	bl	1be20 <clear_ccc_cfg>
   1276c:	e7d7      	b.n	1271e <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1276e:	4632      	mov	r2, r6
   12770:	4641      	mov	r1, r8
   12772:	4620      	mov	r0, r4
   12774:	4798      	blx	r3
		if (write < 0) {
   12776:	2800      	cmp	r0, #0
   12778:	dbd2      	blt.n	12720 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1277a:	1e44      	subs	r4, r0, #1
   1277c:	2c01      	cmp	r4, #1
   1277e:	d9e7      	bls.n	12750 <bt_gatt_attr_write_ccc+0x64>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   12780:	f06f 000d 	mvn.w	r0, #13
   12784:	e7cc      	b.n	12720 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12786:	f06f 0006 	mvn.w	r0, #6
   1278a:	e7c9      	b.n	12720 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1278c:	f06f 000c 	mvn.w	r0, #12
   12790:	e7c6      	b.n	12720 <bt_gatt_attr_write_ccc+0x34>
   12792:	bf00      	nop
   12794:	00020ba6 	.word	0x00020ba6

00012798 <cf_write>:
{
   12798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1279c:	461f      	mov	r7, r3
   1279e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   127a2:	4680      	mov	r8, r0
	if (offset > sizeof(cfg->data)) {
   127a4:	2b01      	cmp	r3, #1
{
   127a6:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
   127a8:	d845      	bhi.n	12836 <cf_write+0x9e>
	if (offset + len > sizeof(cfg->data)) {
   127aa:	443b      	add	r3, r7
   127ac:	2b01      	cmp	r3, #1
   127ae:	463d      	mov	r5, r7
   127b0:	dc44      	bgt.n	1283c <cf_write+0xa4>
	cfg = find_cf_cfg(conn);
   127b2:	f7ff ff1f 	bl	125f4 <find_cf_cfg>
	if (!cfg) {
   127b6:	4604      	mov	r4, r0
   127b8:	b918      	cbnz	r0, 127c2 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   127ba:	f7ff ff1b 	bl	125f4 <find_cf_cfg>
	if (!cfg) {
   127be:	4604      	mov	r4, r0
   127c0:	b1d8      	cbz	r0, 127fa <cf_write+0x62>
   127c2:	4632      	mov	r2, r6
   127c4:	f104 0008 	add.w	r0, r4, #8
   127c8:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
   127cc:	4596      	cmp	lr, r2
   127ce:	d11d      	bne.n	1280c <cf_write+0x74>
	for (i = 0U; i < len && i < last_byte; i++) {
   127d0:	b12f      	cbz	r7, 127de <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
   127d2:	7833      	ldrb	r3, [r6, #0]
   127d4:	7a22      	ldrb	r2, [r4, #8]
   127d6:	f003 0307 	and.w	r3, r3, #7
   127da:	4313      	orrs	r3, r2
   127dc:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   127de:	f108 0188 	add.w	r1, r8, #136	; 0x88
   127e2:	1c60      	adds	r0, r4, #1
   127e4:	f009 fb19 	bl	1be1a <bt_addr_le_copy>
	cfg->id = conn->id;
   127e8:	4620      	mov	r0, r4
   127ea:	f898 3008 	ldrb.w	r3, [r8, #8]
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   127ee:	2101      	movs	r1, #1
   127f0:	f800 3b0c 	strb.w	r3, [r0], #12
   127f4:	f009 fb22 	bl	1be3c <atomic_or>
}
   127f8:	e005      	b.n	12806 <cf_write+0x6e>
		BT_WARN("No space to store Client Supported Features");
   127fa:	2157      	movs	r1, #87	; 0x57
   127fc:	4812      	ldr	r0, [pc, #72]	; (12848 <cf_write+0xb0>)
   127fe:	f007 f8f6 	bl	199ee <printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   12802:	f06f 0510 	mvn.w	r5, #16
}
   12806:	4628      	mov	r0, r5
   12808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
   1280c:	2300      	movs	r3, #0
   1280e:	f812 1b01 	ldrb.w	r1, [r2], #1
   12812:	f810 cb01 	ldrb.w	ip, [r0], #1
   12816:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
   1281a:	fa21 f903 	lsr.w	r9, r1, r3
   1281e:	f019 0f01 	tst.w	r9, #1
   12822:	d004      	beq.n	1282e <cf_write+0x96>
   12824:	fa2c f903 	lsr.w	r9, ip, r3
   12828:	f019 0f01 	tst.w	r9, #1
   1282c:	d109      	bne.n	12842 <cf_write+0xaa>
		for (bit = 0U; bit <= last_bit; bit++) {
   1282e:	3301      	adds	r3, #1
   12830:	2b03      	cmp	r3, #3
   12832:	d1f2      	bne.n	1281a <cf_write+0x82>
   12834:	e7ca      	b.n	127cc <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   12836:	f06f 0506 	mvn.w	r5, #6
   1283a:	e7e4      	b.n	12806 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1283c:	f06f 050c 	mvn.w	r5, #12
   12840:	e7e1      	b.n	12806 <cf_write+0x6e>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   12842:	f06f 0512 	mvn.w	r5, #18
   12846:	e7de      	b.n	12806 <cf_write+0x6e>
   12848:	00020bc5 	.word	0x00020bc5

0001284c <sc_store>:
{
   1284c:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   1284e:	4605      	mov	r5, r0
   12850:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   12854:	4604      	mov	r4, r0
   12856:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   12858:	b1ca      	cbz	r2, 1288e <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1285a:	ae02      	add	r6, sp, #8
   1285c:	2104      	movs	r1, #4
   1285e:	4630      	mov	r0, r6
   12860:	f007 f82b 	bl	198ba <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   12864:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   12866:	462b      	mov	r3, r5
   12868:	2124      	movs	r1, #36	; 0x24
   1286a:	4a0a      	ldr	r2, [pc, #40]	; (12894 <sc_store+0x48>)
   1286c:	a803      	add	r0, sp, #12
   1286e:	f7fb f8bd 	bl	d9ec <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   12872:	2204      	movs	r2, #4
   12874:	f104 0108 	add.w	r1, r4, #8
   12878:	a803      	add	r0, sp, #12
   1287a:	f7f8 fcc7 	bl	b20c <settings_save_one>
	if (err) {
   1287e:	4602      	mov	r2, r0
   12880:	b118      	cbz	r0, 1288a <sc_store+0x3e>
		BT_ERR("failed to store SC (err %d)", err);
   12882:	2145      	movs	r1, #69	; 0x45
   12884:	4804      	ldr	r0, [pc, #16]	; (12898 <sc_store+0x4c>)
   12886:	f007 f8b2 	bl	199ee <printk>
}
   1288a:	b00c      	add	sp, #48	; 0x30
   1288c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1288e:	9200      	str	r2, [sp, #0]
   12890:	e7e9      	b.n	12866 <sc_store+0x1a>
   12892:	bf00      	nop
   12894:	00020f01 	.word	0x00020f01
   12898:	00020bf6 	.word	0x00020bf6

0001289c <sc_save>:
{
   1289c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   128a0:	4680      	mov	r8, r0
   128a2:	460f      	mov	r7, r1
   128a4:	4616      	mov	r6, r2
   128a6:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   128a8:	f7ff fec6 	bl	12638 <find_sc_cfg>
	if (!cfg) {
   128ac:	4604      	mov	r4, r0
   128ae:	b998      	cbnz	r0, 128d8 <sc_save+0x3c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   128b0:	4669      	mov	r1, sp
   128b2:	9000      	str	r0, [sp, #0]
   128b4:	f8cd 0003 	str.w	r0, [sp, #3]
   128b8:	f7ff febe 	bl	12638 <find_sc_cfg>
		if (!cfg) {
   128bc:	4604      	mov	r4, r0
   128be:	b930      	cbnz	r0, 128ce <sc_save+0x32>
			BT_ERR("unable to save SC: no cfg left");
   128c0:	2145      	movs	r1, #69	; 0x45
   128c2:	4813      	ldr	r0, [pc, #76]	; (12910 <sc_save+0x74>)
   128c4:	f007 f893 	bl	199ee <printk>
}
   128c8:	b002      	add	sp, #8
   128ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&cfg->peer, peer);
   128ce:	4639      	mov	r1, r7
		cfg->id = id;
   128d0:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   128d4:	f009 faa1 	bl	1be1a <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   128d8:	8922      	ldrh	r2, [r4, #8]
   128da:	8963      	ldrh	r3, [r4, #10]
   128dc:	b97a      	cbnz	r2, 128fe <sc_save+0x62>
   128de:	b983      	cbnz	r3, 12902 <sc_save+0x66>
		cfg->data.start = start;
   128e0:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   128e2:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   128e4:	4621      	mov	r1, r4
   128e6:	f811 0b01 	ldrb.w	r0, [r1], #1
   128ea:	f008 fc87 	bl	1b1fc <bt_addr_le_is_bonded>
   128ee:	2800      	cmp	r0, #0
   128f0:	d0ea      	beq.n	128c8 <sc_save+0x2c>
		sc_store(cfg);
   128f2:	4620      	mov	r0, r4
}
   128f4:	b002      	add	sp, #8
   128f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   128fa:	f7ff bfa7 	b.w	1284c <sc_store>
	if (new_start >= *start && new_end <= *end) {
   128fe:	4296      	cmp	r6, r2
   12900:	d302      	bcc.n	12908 <sc_save+0x6c>
   12902:	429d      	cmp	r5, r3
   12904:	d8ed      	bhi.n	128e2 <sc_save+0x46>
   12906:	e7df      	b.n	128c8 <sc_save+0x2c>
	if (*end < new_end) {
   12908:	429d      	cmp	r5, r3
		*start = new_start;
   1290a:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1290c:	d9ea      	bls.n	128e4 <sc_save+0x48>
   1290e:	e7e8      	b.n	128e2 <sc_save+0x46>
   12910:	00020c17 	.word	0x00020c17

00012914 <sc_set>:
{
   12914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12918:	460e      	mov	r6, r1
   1291a:	4690      	mov	r8, r2
   1291c:	4699      	mov	r9, r3
	if (!name) {
   1291e:	4604      	mov	r4, r0
{
   12920:	b087      	sub	sp, #28
	if (!name) {
   12922:	b948      	cbnz	r0, 12938 <sc_set+0x24>
		BT_ERR("Insufficient number of arguments");
   12924:	2145      	movs	r1, #69	; 0x45
   12926:	4829      	ldr	r0, [pc, #164]	; (129cc <sc_set+0xb8>)
   12928:	f007 f861 	bl	199ee <printk>
		return -EINVAL;
   1292c:	f06f 0515 	mvn.w	r5, #21
}
   12930:	4628      	mov	r0, r5
   12932:	b007      	add	sp, #28
   12934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   12938:	a902      	add	r1, sp, #8
   1293a:	f008 fae9 	bl	1af10 <bt_settings_decode_key>
	if (err) {
   1293e:	4605      	mov	r5, r0
   12940:	b128      	cbz	r0, 1294e <sc_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   12942:	4622      	mov	r2, r4
   12944:	2145      	movs	r1, #69	; 0x45
   12946:	4822      	ldr	r0, [pc, #136]	; (129d0 <sc_set+0xbc>)
   12948:	f007 f851 	bl	199ee <printk>
   1294c:	e7ee      	b.n	1292c <sc_set+0x18>
	settings_name_next(name, &next);
   1294e:	4620      	mov	r0, r4
   12950:	a901      	add	r1, sp, #4
   12952:	f007 fb6b 	bl	1a02c <settings_name_next>
	if (!next) {
   12956:	9801      	ldr	r0, [sp, #4]
   12958:	b1d8      	cbz	r0, 12992 <sc_set+0x7e>
		id = strtol(next, NULL, 10);
   1295a:	220a      	movs	r2, #10
   1295c:	4629      	mov	r1, r5
   1295e:	f008 f9b8 	bl	1acd2 <strtol>
   12962:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   12964:	4638      	mov	r0, r7
   12966:	a902      	add	r1, sp, #8
   12968:	f7ff fe66 	bl	12638 <find_sc_cfg>
	if (!cfg && len_rd) {
   1296c:	4604      	mov	r4, r0
   1296e:	bb28      	cbnz	r0, 129bc <sc_set+0xa8>
   12970:	2e00      	cmp	r6, #0
   12972:	d0dd      	beq.n	12930 <sc_set+0x1c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   12974:	a904      	add	r1, sp, #16
   12976:	9004      	str	r0, [sp, #16]
   12978:	f8cd 0013 	str.w	r0, [sp, #19]
   1297c:	f7ff fe5c 	bl	12638 <find_sc_cfg>
		if (!cfg) {
   12980:	4604      	mov	r4, r0
   12982:	b940      	cbnz	r0, 12996 <sc_set+0x82>
			BT_ERR("Unable to restore SC: no cfg left");
   12984:	2145      	movs	r1, #69	; 0x45
   12986:	4813      	ldr	r0, [pc, #76]	; (129d4 <sc_set+0xc0>)
   12988:	f007 f831 	bl	199ee <printk>
			return -ENOMEM;
   1298c:	f06f 050b 	mvn.w	r5, #11
   12990:	e7ce      	b.n	12930 <sc_set+0x1c>
		id = BT_ID_DEFAULT;
   12992:	462f      	mov	r7, r5
   12994:	e7e6      	b.n	12964 <sc_set+0x50>
		cfg->id = id;
   12996:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1299a:	a902      	add	r1, sp, #8
   1299c:	f009 fa3d 	bl	1be1a <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   129a0:	f104 0108 	add.w	r1, r4, #8
   129a4:	2204      	movs	r2, #4
   129a6:	4648      	mov	r0, r9
   129a8:	47c0      	blx	r8
		if (len < 0) {
   129aa:	1e04      	subs	r4, r0, #0
   129ac:	dac0      	bge.n	12930 <sc_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   129ae:	4622      	mov	r2, r4
   129b0:	2145      	movs	r1, #69	; 0x45
   129b2:	4809      	ldr	r0, [pc, #36]	; (129d8 <sc_set+0xc4>)
   129b4:	f007 f81b 	bl	199ee <printk>
			return len;
   129b8:	4625      	mov	r5, r4
   129ba:	e7b9      	b.n	12930 <sc_set+0x1c>
	if (len_rd) {
   129bc:	2e00      	cmp	r6, #0
   129be:	d1ef      	bne.n	129a0 <sc_set+0x8c>
		memset(cfg, 0, sizeof(*cfg));
   129c0:	220c      	movs	r2, #12
   129c2:	4631      	mov	r1, r6
   129c4:	f008 fa7e 	bl	1aec4 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   129c8:	e7b2      	b.n	12930 <sc_set+0x1c>
   129ca:	bf00      	nop
   129cc:	0001fb44 	.word	0x0001fb44
   129d0:	00020c3b 	.word	0x00020c3b
   129d4:	00020c5c 	.word	0x00020c5c
   129d8:	00020b4d 	.word	0x00020b4d

000129dc <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
   129dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   129e0:	4606      	mov	r6, r0
   129e2:	4688      	mov	r8, r1
   129e4:	4617      	mov	r7, r2
	if (params) {
   129e6:	461c      	mov	r4, r3
   129e8:	b31b      	cbz	r3, 12a32 <gatt_send.constprop.0+0x56>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   129ea:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   129ee:	2100      	movs	r1, #0
   129f0:	f7ff fc3c 	bl	1226c <bt_att_req_alloc>
		if (!req) {
   129f4:	4605      	mov	r5, r0
   129f6:	b920      	cbnz	r0, 12a02 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
   129f8:	f06f 040b 	mvn.w	r4, #11
}
   129fc:	4620      	mov	r0, r4
   129fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
   12a02:	2300      	movs	r3, #0
		req->user_data = params;
   12a04:	6144      	str	r4, [r0, #20]
		err = bt_att_req_send(conn, req);
   12a06:	4601      	mov	r1, r0
		req->buf = buf;
   12a08:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
   12a0c:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
   12a0e:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
   12a10:	4630      	mov	r0, r6
   12a12:	f7ff fd57 	bl	124c4 <bt_att_req_send>
		if (err) {
   12a16:	4604      	mov	r4, r0
   12a18:	2800      	cmp	r0, #0
   12a1a:	d0ef      	beq.n	129fc <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
   12a1c:	4628      	mov	r0, r5
   12a1e:	f7ff fc3b 	bl	12298 <bt_att_req_free>
	if (err) {
   12a22:	2c00      	cmp	r4, #0
   12a24:	d0ea      	beq.n	129fc <gatt_send.constprop.0+0x20>
		BT_ERR("Error sending ATT PDU: %d", err);
   12a26:	4622      	mov	r2, r4
   12a28:	2145      	movs	r1, #69	; 0x45
   12a2a:	4804      	ldr	r0, [pc, #16]	; (12a3c <gatt_send.constprop.0+0x60>)
   12a2c:	f006 ffdf 	bl	199ee <printk>
   12a30:	e7e4      	b.n	129fc <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
   12a32:	461a      	mov	r2, r3
   12a34:	f7ff fcde 	bl	123f4 <bt_att_send>
   12a38:	4604      	mov	r4, r0
   12a3a:	e7f2      	b.n	12a22 <gatt_send.constprop.0+0x46>
   12a3c:	00020c83 	.word	0x00020c83

00012a40 <cf_set>:
{
   12a40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12a44:	4689      	mov	r9, r1
   12a46:	4617      	mov	r7, r2
   12a48:	4698      	mov	r8, r3
	if (!name) {
   12a4a:	4605      	mov	r5, r0
{
   12a4c:	b085      	sub	sp, #20
	if (!name) {
   12a4e:	b948      	cbnz	r0, 12a64 <cf_set+0x24>
		BT_ERR("Insufficient number of arguments");
   12a50:	2145      	movs	r1, #69	; 0x45
   12a52:	4826      	ldr	r0, [pc, #152]	; (12aec <cf_set+0xac>)
   12a54:	f006 ffcb 	bl	199ee <printk>
		return -EINVAL;
   12a58:	f06f 0415 	mvn.w	r4, #21
}
   12a5c:	4620      	mov	r0, r4
   12a5e:	b005      	add	sp, #20
   12a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   12a64:	a902      	add	r1, sp, #8
   12a66:	f008 fa53 	bl	1af10 <bt_settings_decode_key>
	if (err) {
   12a6a:	4604      	mov	r4, r0
   12a6c:	b128      	cbz	r0, 12a7a <cf_set+0x3a>
		BT_ERR("Unable to decode address %s", log_strdup(name));
   12a6e:	462a      	mov	r2, r5
   12a70:	2145      	movs	r1, #69	; 0x45
   12a72:	481f      	ldr	r0, [pc, #124]	; (12af0 <cf_set+0xb0>)
   12a74:	f006 ffbb 	bl	199ee <printk>
   12a78:	e7ee      	b.n	12a58 <cf_set+0x18>
	settings_name_next(name, &next);
   12a7a:	4628      	mov	r0, r5
   12a7c:	a901      	add	r1, sp, #4
   12a7e:	f007 fad5 	bl	1a02c <settings_name_next>
	if (!next) {
   12a82:	9801      	ldr	r0, [sp, #4]
   12a84:	b1a8      	cbz	r0, 12ab2 <cf_set+0x72>
		id = strtol(next, NULL, 10);
   12a86:	220a      	movs	r2, #10
   12a88:	4621      	mov	r1, r4
   12a8a:	f008 f922 	bl	1acd2 <strtol>
   12a8e:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   12a90:	4630      	mov	r0, r6
   12a92:	a902      	add	r1, sp, #8
   12a94:	f7ff fe0e 	bl	126b4 <find_cf_cfg_by_addr>
	if (!cfg) {
   12a98:	4605      	mov	r5, r0
   12a9a:	b988      	cbnz	r0, 12ac0 <cf_set+0x80>
		cfg = find_cf_cfg(NULL);
   12a9c:	f7ff fdaa 	bl	125f4 <find_cf_cfg>
		if (!cfg) {
   12aa0:	4605      	mov	r5, r0
   12aa2:	b940      	cbnz	r0, 12ab6 <cf_set+0x76>
			BT_ERR("Unable to restore CF: no cfg left");
   12aa4:	2145      	movs	r1, #69	; 0x45
   12aa6:	4813      	ldr	r0, [pc, #76]	; (12af4 <cf_set+0xb4>)
   12aa8:	f006 ffa1 	bl	199ee <printk>
			return -ENOMEM;
   12aac:	f06f 040b 	mvn.w	r4, #11
   12ab0:	e7d4      	b.n	12a5c <cf_set+0x1c>
		id = BT_ID_DEFAULT;
   12ab2:	4626      	mov	r6, r4
   12ab4:	e7ec      	b.n	12a90 <cf_set+0x50>
		cfg->id = id;
   12ab6:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   12aba:	a902      	add	r1, sp, #8
   12abc:	f009 f9ad 	bl	1be1a <bt_addr_le_copy>
	if (len_rd) {
   12ac0:	f1b9 0f00 	cmp.w	r9, #0
   12ac4:	d00d      	beq.n	12ae2 <cf_set+0xa2>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   12ac6:	f105 0108 	add.w	r1, r5, #8
   12aca:	2201      	movs	r2, #1
   12acc:	4640      	mov	r0, r8
   12ace:	47b8      	blx	r7
		if (len < 0) {
   12ad0:	1e05      	subs	r5, r0, #0
   12ad2:	dac3      	bge.n	12a5c <cf_set+0x1c>
			BT_ERR("Failed to decode value (err %zd)", len);
   12ad4:	462a      	mov	r2, r5
   12ad6:	2145      	movs	r1, #69	; 0x45
   12ad8:	4807      	ldr	r0, [pc, #28]	; (12af8 <cf_set+0xb8>)
   12ada:	f006 ff88 	bl	199ee <printk>
			return len;
   12ade:	462c      	mov	r4, r5
   12ae0:	e7bc      	b.n	12a5c <cf_set+0x1c>
		clear_cf_cfg(cfg);
   12ae2:	4628      	mov	r0, r5
   12ae4:	f009 f9c4 	bl	1be70 <clear_cf_cfg>
   12ae8:	e7b8      	b.n	12a5c <cf_set+0x1c>
   12aea:	bf00      	nop
   12aec:	0001fb44 	.word	0x0001fb44
   12af0:	00020c3b 	.word	0x00020c3b
   12af4:	00020ca2 	.word	0x00020ca2
   12af8:	00020b4d 	.word	0x00020b4d

00012afc <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   12afc:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   12afe:	6881      	ldr	r1, [r0, #8]
{
   12b00:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12b02:	4a07      	ldr	r2, [pc, #28]	; (12b20 <remove_peer_from_attr+0x24>)
   12b04:	4291      	cmp	r1, r2
   12b06:	d109      	bne.n	12b1c <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   12b08:	791a      	ldrb	r2, [r3, #4]
   12b0a:	6819      	ldr	r1, [r3, #0]
   12b0c:	68c0      	ldr	r0, [r0, #12]
   12b0e:	f009 f96a 	bl	1bde6 <ccc_find_cfg>
	if (cfg) {
   12b12:	b118      	cbz	r0, 12b1c <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   12b14:	220a      	movs	r2, #10
   12b16:	2100      	movs	r1, #0
   12b18:	f008 f9d4 	bl	1aec4 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   12b1c:	2001      	movs	r0, #1
   12b1e:	bd08      	pop	{r3, pc}
   12b20:	000126ed 	.word	0x000126ed

00012b24 <ccc_load>:
{
   12b24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   12b26:	4b21      	ldr	r3, [pc, #132]	; (12bac <ccc_load+0x88>)
{
   12b28:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12b2a:	6882      	ldr	r2, [r0, #8]
   12b2c:	429a      	cmp	r2, r3
   12b2e:	d002      	beq.n	12b36 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
   12b30:	2001      	movs	r0, #1
}
   12b32:	b002      	add	sp, #8
   12b34:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
   12b36:	68a3      	ldr	r3, [r4, #8]
   12b38:	68c6      	ldr	r6, [r0, #12]
   12b3a:	b94b      	cbnz	r3, 12b50 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
   12b3c:	4630      	mov	r0, r6
   12b3e:	7922      	ldrb	r2, [r4, #4]
   12b40:	6821      	ldr	r1, [r4, #0]
   12b42:	f009 f950 	bl	1bde6 <ccc_find_cfg>
	if (!cfg) {
   12b46:	2800      	cmp	r0, #0
   12b48:	d0f2      	beq.n	12b30 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
   12b4a:	f009 f969 	bl	1be20 <clear_ccc_cfg>
   12b4e:	e7ef      	b.n	12b30 <ccc_load+0xc>
	} else if (!load->count) {
   12b50:	68e0      	ldr	r0, [r4, #12]
   12b52:	2800      	cmp	r0, #0
   12b54:	d0ed      	beq.n	12b32 <ccc_load+0xe>
	if (load->entry->handle != handle) {
   12b56:	881b      	ldrh	r3, [r3, #0]
   12b58:	4299      	cmp	r1, r3
   12b5a:	d00a      	beq.n	12b72 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
   12b5c:	d9e8      	bls.n	12b30 <ccc_load+0xc>
	load->count--;
   12b5e:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   12b60:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   12b62:	3801      	subs	r0, #1
	load->entry++;
   12b64:	3304      	adds	r3, #4
	load->count--;
   12b66:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12b68:	3800      	subs	r0, #0
   12b6a:	bf18      	it	ne
   12b6c:	2001      	movne	r0, #1
	load->entry++;
   12b6e:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   12b70:	e7df      	b.n	12b32 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   12b72:	4630      	mov	r0, r6
   12b74:	7922      	ldrb	r2, [r4, #4]
   12b76:	6821      	ldr	r1, [r4, #0]
   12b78:	f009 f935 	bl	1bde6 <ccc_find_cfg>
	if (!cfg) {
   12b7c:	4605      	mov	r5, r0
   12b7e:	b980      	cbnz	r0, 12ba2 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   12b80:	9000      	str	r0, [sp, #0]
   12b82:	4602      	mov	r2, r0
   12b84:	f8cd 0003 	str.w	r0, [sp, #3]
   12b88:	4669      	mov	r1, sp
   12b8a:	4630      	mov	r0, r6
   12b8c:	f009 f92b 	bl	1bde6 <ccc_find_cfg>
		if (!cfg) {
   12b90:	4605      	mov	r5, r0
   12b92:	2800      	cmp	r0, #0
   12b94:	d0e3      	beq.n	12b5e <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   12b96:	6821      	ldr	r1, [r4, #0]
   12b98:	3001      	adds	r0, #1
   12b9a:	f009 f93e 	bl	1be1a <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   12b9e:	7923      	ldrb	r3, [r4, #4]
   12ba0:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   12ba2:	68a3      	ldr	r3, [r4, #8]
   12ba4:	885b      	ldrh	r3, [r3, #2]
   12ba6:	812b      	strh	r3, [r5, #8]
   12ba8:	e7d9      	b.n	12b5e <ccc_load+0x3a>
   12baa:	bf00      	nop
   12bac:	000126ed 	.word	0x000126ed

00012bb0 <ccc_save>:
{
   12bb0:	b538      	push	{r3, r4, r5, lr}
   12bb2:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12bb4:	4b0b      	ldr	r3, [pc, #44]	; (12be4 <ccc_save+0x34>)
   12bb6:	6882      	ldr	r2, [r0, #8]
{
   12bb8:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   12bba:	429a      	cmp	r2, r3
   12bbc:	d10f      	bne.n	12bde <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   12bbe:	7922      	ldrb	r2, [r4, #4]
   12bc0:	6821      	ldr	r1, [r4, #0]
   12bc2:	68c0      	ldr	r0, [r0, #12]
   12bc4:	f009 f90f 	bl	1bde6 <ccc_find_cfg>
	if (!cfg) {
   12bc8:	b148      	cbz	r0, 12bde <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   12bca:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
   12bce:	8901      	ldrh	r1, [r0, #8]
   12bd0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   12bd4:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   12bd6:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   12bd8:	8151      	strh	r1, [r2, #10]
	save->count++;
   12bda:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   12bde:	2001      	movs	r0, #1
   12be0:	bd38      	pop	{r3, r4, r5, pc}
   12be2:	bf00      	nop
   12be4:	000126ed 	.word	0x000126ed

00012be8 <gatt_indicate>:
{
   12be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12bec:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
   12bee:	8a92      	ldrh	r2, [r2, #20]
{
   12bf0:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   12bf2:	3202      	adds	r2, #2
   12bf4:	211d      	movs	r1, #29
{
   12bf6:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
   12bf8:	f7ff f8b8 	bl	11d6c <bt_att_create_pdu>
	if (!buf) {
   12bfc:	4605      	mov	r5, r0
   12bfe:	b1e8      	cbz	r0, 12c3c <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
   12c00:	f100 0808 	add.w	r8, r0, #8
   12c04:	2102      	movs	r1, #2
   12c06:	4640      	mov	r0, r8
   12c08:	f001 ff94 	bl	14b34 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   12c0c:	4606      	mov	r6, r0
   12c0e:	8aa1      	ldrh	r1, [r4, #20]
   12c10:	f826 9b02 	strh.w	r9, [r6], #2
   12c14:	4640      	mov	r0, r8
   12c16:	f001 ff8d 	bl	14b34 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   12c1a:	4630      	mov	r0, r6
   12c1c:	8aa2      	ldrh	r2, [r4, #20]
   12c1e:	6921      	ldr	r1, [r4, #16]
   12c20:	f008 f925 	bl	1ae6e <memcpy>
	if (!params->func) {
   12c24:	68a3      	ldr	r3, [r4, #8]
   12c26:	b933      	cbnz	r3, 12c36 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
   12c28:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   12c2a:	4629      	mov	r1, r5
   12c2c:	4638      	mov	r0, r7
}
   12c2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
   12c32:	f7ff bed3 	b.w	129dc <gatt_send.constprop.0>
   12c36:	4623      	mov	r3, r4
   12c38:	4a04      	ldr	r2, [pc, #16]	; (12c4c <gatt_indicate+0x64>)
   12c3a:	e7f6      	b.n	12c2a <gatt_indicate+0x42>
		BT_WARN("No buffer available to send indication");
   12c3c:	2157      	movs	r1, #87	; 0x57
   12c3e:	4804      	ldr	r0, [pc, #16]	; (12c50 <gatt_indicate+0x68>)
   12c40:	f006 fed5 	bl	199ee <printk>
}
   12c44:	f06f 000b 	mvn.w	r0, #11
   12c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12c4c:	0001bcc7 	.word	0x0001bcc7
   12c50:	00020cc9 	.word	0x00020cc9

00012c54 <gatt_notify>:
{
   12c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12c58:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   12c5a:	8992      	ldrh	r2, [r2, #12]
{
   12c5c:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   12c5e:	3202      	adds	r2, #2
   12c60:	211b      	movs	r1, #27
{
   12c62:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   12c64:	f7ff f882 	bl	11d6c <bt_att_create_pdu>
	if (!buf) {
   12c68:	4605      	mov	r5, r0
   12c6a:	b1c8      	cbz	r0, 12ca0 <gatt_notify+0x4c>
   12c6c:	f100 0908 	add.w	r9, r0, #8
   12c70:	2102      	movs	r1, #2
   12c72:	4648      	mov	r0, r9
   12c74:	f001 ff5e 	bl	14b34 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   12c78:	4606      	mov	r6, r0
   12c7a:	89a1      	ldrh	r1, [r4, #12]
   12c7c:	f826 8b02 	strh.w	r8, [r6], #2
   12c80:	4648      	mov	r0, r9
   12c82:	f001 ff57 	bl	14b34 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   12c86:	89a2      	ldrh	r2, [r4, #12]
   12c88:	68a1      	ldr	r1, [r4, #8]
   12c8a:	4630      	mov	r0, r6
   12c8c:	f008 f8ef 	bl	1ae6e <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   12c90:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   12c94:	4629      	mov	r1, r5
   12c96:	4638      	mov	r0, r7
}
   12c98:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   12c9c:	f7ff bbaa 	b.w	123f4 <bt_att_send>
		BT_WARN("No buffer available to send notification");
   12ca0:	2157      	movs	r1, #87	; 0x57
   12ca2:	4803      	ldr	r0, [pc, #12]	; (12cb0 <gatt_notify+0x5c>)
   12ca4:	f006 fea3 	bl	199ee <printk>
}
   12ca8:	f06f 000b 	mvn.w	r0, #11
   12cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12cb0:	00020cf5 	.word	0x00020cf5

00012cb4 <notify_cb>:
{
   12cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   12cb8:	4b38      	ldr	r3, [pc, #224]	; (12d9c <notify_cb+0xe8>)
{
   12cba:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12cbc:	6882      	ldr	r2, [r0, #8]
{
   12cbe:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   12cc0:	429a      	cmp	r2, r3
   12cc2:	d003      	beq.n	12ccc <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   12cc4:	2001      	movs	r0, #1
}
   12cc6:	b003      	add	sp, #12
   12cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
   12ccc:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   12cd0:	4b33      	ldr	r3, [pc, #204]	; (12da0 <notify_cb+0xec>)
   12cd2:	4599      	cmp	r9, r3
   12cd4:	d01a      	beq.n	12d0c <notify_cb+0x58>
   12cd6:	f04f 0b00 	mov.w	fp, #0
   12cda:	f109 0701 	add.w	r7, r9, #1
   12cde:	f109 0a65 	add.w	sl, r9, #101	; 0x65
		if (cfg->value != data->type) {
   12ce2:	f8b7 2007 	ldrh.w	r2, [r7, #7]
   12ce6:	89a3      	ldrh	r3, [r4, #12]
   12ce8:	429a      	cmp	r2, r3
   12cea:	d10b      	bne.n	12d04 <notify_cb+0x50>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   12cec:	4639      	mov	r1, r7
   12cee:	f817 0c01 	ldrb.w	r0, [r7, #-1]
   12cf2:	f7fd fead 	bl	10a50 <bt_conn_lookup_addr_le>
		if (!conn) {
   12cf6:	4605      	mov	r5, r0
   12cf8:	b120      	cbz	r0, 12d04 <notify_cb+0x50>
		if (conn->state != BT_CONN_CONNECTED) {
   12cfa:	7a83      	ldrb	r3, [r0, #10]
   12cfc:	2b07      	cmp	r3, #7
   12cfe:	d029      	beq.n	12d54 <notify_cb+0xa0>
			bt_conn_unref(conn);
   12d00:	f7fd fd84 	bl	1080c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   12d04:	370a      	adds	r7, #10
   12d06:	4557      	cmp	r7, sl
   12d08:	d1eb      	bne.n	12ce2 <notify_cb+0x2e>
   12d0a:	e7db      	b.n	12cc4 <notify_cb+0x10>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   12d0c:	2600      	movs	r6, #0
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   12d0e:	4637      	mov	r7, r6
   12d10:	4d24      	ldr	r5, [pc, #144]	; (12da4 <notify_cb+0xf0>)
   12d12:	4669      	mov	r1, sp
   12d14:	4628      	mov	r0, r5
   12d16:	9700      	str	r7, [sp, #0]
   12d18:	f8cd 7003 	str.w	r7, [sp, #3]
   12d1c:	f009 f841 	bl	1bda2 <bt_addr_le_cmp>
   12d20:	b178      	cbz	r0, 12d42 <notify_cb+0x8e>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   12d22:	2207      	movs	r2, #7
   12d24:	4629      	mov	r1, r5
   12d26:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   12d2a:	f7fd fed1 	bl	10ad0 <bt_conn_lookup_state_le>
			if (!conn) {
   12d2e:	b970      	cbnz	r0, 12d4e <notify_cb+0x9a>
				sc = (struct sc_data *)data->ind_params->data;
   12d30:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   12d32:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   12d34:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   12d36:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   12d3a:	8853      	ldrh	r3, [r2, #2]
   12d3c:	8812      	ldrh	r2, [r2, #0]
   12d3e:	f7ff fdad 	bl	1289c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   12d42:	3601      	adds	r6, #1
   12d44:	2e0a      	cmp	r6, #10
   12d46:	f105 050c 	add.w	r5, r5, #12
   12d4a:	d1e2      	bne.n	12d12 <notify_cb+0x5e>
   12d4c:	e7c3      	b.n	12cd6 <notify_cb+0x22>
			bt_conn_unref(conn);
   12d4e:	f7fd fd5d 	bl	1080c <bt_conn_unref>
   12d52:	e7f6      	b.n	12d42 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   12d54:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
   12d58:	b123      	cbz	r3, 12d64 <notify_cb+0xb0>
   12d5a:	4641      	mov	r1, r8
   12d5c:	4798      	blx	r3
   12d5e:	b908      	cbnz	r0, 12d64 <notify_cb+0xb0>
			bt_conn_unref(conn);
   12d60:	4628      	mov	r0, r5
   12d62:	e7cd      	b.n	12d00 <notify_cb+0x4c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   12d64:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   12d66:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   12d68:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   12d6a:	88a1      	ldrh	r1, [r4, #4]
   12d6c:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   12d6e:	d10f      	bne.n	12d90 <notify_cb+0xdc>
			err = gatt_indicate(conn, data->handle,
   12d70:	f7ff ff3a 	bl	12be8 <gatt_indicate>
			if (err == 0) {
   12d74:	4606      	mov	r6, r0
   12d76:	b918      	cbnz	r0, 12d80 <notify_cb+0xcc>
				data->ind_params->_ref++;
   12d78:	6922      	ldr	r2, [r4, #16]
   12d7a:	7d93      	ldrb	r3, [r2, #22]
   12d7c:	3301      	adds	r3, #1
   12d7e:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   12d80:	4628      	mov	r0, r5
   12d82:	f7fd fd43 	bl	1080c <bt_conn_unref>
		if (err < 0) {
   12d86:	2e00      	cmp	r6, #0
   12d88:	db06      	blt.n	12d98 <notify_cb+0xe4>
		data->err = 0;
   12d8a:	f8c4 b008 	str.w	fp, [r4, #8]
   12d8e:	e7b9      	b.n	12d04 <notify_cb+0x50>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   12d90:	f7ff ff60 	bl	12c54 <gatt_notify>
   12d94:	4606      	mov	r6, r0
   12d96:	e7f3      	b.n	12d80 <notify_cb+0xcc>
			return BT_GATT_ITER_STOP;
   12d98:	2000      	movs	r0, #0
   12d9a:	e794      	b.n	12cc6 <notify_cb+0x12>
   12d9c:	000126ed 	.word	0x000126ed
   12da0:	20008488 	.word	0x20008488
   12da4:	2000be47 	.word	0x2000be47

00012da8 <bt_gatt_clear_sc>:
{
   12da8:	b570      	push	{r4, r5, r6, lr}
   12daa:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   12dac:	f7ff fc44 	bl	12638 <find_sc_cfg>
	if (!cfg) {
   12db0:	4604      	mov	r4, r0
   12db2:	b1e8      	cbz	r0, 12df0 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   12db4:	4605      	mov	r5, r0
   12db6:	f815 2b01 	ldrb.w	r2, [r5], #1
   12dba:	b1e2      	cbz	r2, 12df6 <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   12dbc:	ae02      	add	r6, sp, #8
   12dbe:	2104      	movs	r1, #4
   12dc0:	4630      	mov	r0, r6
   12dc2:	f006 fd7a 	bl	198ba <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   12dc6:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   12dc8:	4a0c      	ldr	r2, [pc, #48]	; (12dfc <bt_gatt_clear_sc+0x54>)
   12dca:	462b      	mov	r3, r5
   12dcc:	2124      	movs	r1, #36	; 0x24
   12dce:	a803      	add	r0, sp, #12
   12dd0:	f7fa fe0c 	bl	d9ec <bt_settings_encode_key>
		err = settings_delete(key);
   12dd4:	a803      	add	r0, sp, #12
   12dd6:	f007 f902 	bl	19fde <settings_delete>
		if (err) {
   12dda:	4602      	mov	r2, r0
   12ddc:	b118      	cbz	r0, 12de6 <bt_gatt_clear_sc+0x3e>
			BT_ERR("failed to delete SC (err %d)", err);
   12dde:	2145      	movs	r1, #69	; 0x45
   12de0:	4807      	ldr	r0, [pc, #28]	; (12e00 <bt_gatt_clear_sc+0x58>)
   12de2:	f006 fe04 	bl	199ee <printk>
	memset(cfg, 0, sizeof(*cfg));
   12de6:	220c      	movs	r2, #12
   12de8:	2100      	movs	r1, #0
   12dea:	4620      	mov	r0, r4
   12dec:	f008 f86a 	bl	1aec4 <memset>
}
   12df0:	2000      	movs	r0, #0
   12df2:	b00c      	add	sp, #48	; 0x30
   12df4:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   12df6:	9200      	str	r2, [sp, #0]
   12df8:	e7e6      	b.n	12dc8 <bt_gatt_clear_sc+0x20>
   12dfa:	bf00      	nop
   12dfc:	00020f01 	.word	0x00020f01
   12e00:	00020d23 	.word	0x00020d23

00012e04 <sc_clear>:
{
   12e04:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12e06:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   12e0a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12e0c:	4631      	mov	r1, r6
   12e0e:	7a00      	ldrb	r0, [r0, #8]
   12e10:	f008 f9f4 	bl	1b1fc <bt_addr_le_is_bonded>
   12e14:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   12e16:	4631      	mov	r1, r6
   12e18:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12e1a:	b14d      	cbz	r5, 12e30 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   12e1c:	f7ff ffc4 	bl	12da8 <bt_gatt_clear_sc>
		if (err) {
   12e20:	4602      	mov	r2, r0
   12e22:	b170      	cbz	r0, 12e42 <sc_clear+0x3e>
}
   12e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
   12e28:	2145      	movs	r1, #69	; 0x45
   12e2a:	4806      	ldr	r0, [pc, #24]	; (12e44 <sc_clear+0x40>)
   12e2c:	f006 bddf 	b.w	199ee <printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   12e30:	f7ff fc02 	bl	12638 <find_sc_cfg>
		if (cfg) {
   12e34:	b128      	cbz	r0, 12e42 <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   12e36:	4629      	mov	r1, r5
}
   12e38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   12e3c:	220c      	movs	r2, #12
   12e3e:	f008 b841 	b.w	1aec4 <memset>
}
   12e42:	bd70      	pop	{r4, r5, r6, pc}
   12e44:	00020d45 	.word	0x00020d45

00012e48 <disconnected_cb>:
{
   12e48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e4c:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   12e4e:	4b26      	ldr	r3, [pc, #152]	; (12ee8 <disconnected_cb+0xa0>)
   12e50:	6882      	ldr	r2, [r0, #8]
{
   12e52:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   12e54:	429a      	cmp	r2, r3
   12e56:	d130      	bne.n	12eba <disconnected_cb+0x72>
	ccc = attr->user_data;
   12e58:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
   12e5a:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
   12e5e:	b363      	cbz	r3, 12eba <disconnected_cb+0x72>
	value_used = false;
   12e60:	f04f 0800 	mov.w	r8, #0
				if (ccc == &sc_ccc) {
   12e64:	f8df b084 	ldr.w	fp, [pc, #132]	; 12eec <disconnected_cb+0xa4>
   12e68:	1c6c      	adds	r4, r5, #1
   12e6a:	f105 0a65 	add.w	sl, r5, #101	; 0x65
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12e6e:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
   12e72:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   12e76:	b19b      	cbz	r3, 12ea0 <disconnected_cb+0x58>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   12e78:	4622      	mov	r2, r4
   12e7a:	4630      	mov	r0, r6
   12e7c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   12e80:	f008 fa50 	bl	1b324 <bt_conn_is_peer_addr_le>
   12e84:	b9e0      	cbnz	r0, 12ec0 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   12e86:	4621      	mov	r1, r4
   12e88:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   12e8c:	f7fd fde0 	bl	10a50 <bt_conn_lookup_addr_le>
			if (tmp) {
   12e90:	b130      	cbz	r0, 12ea0 <disconnected_cb+0x58>
				if (tmp->state == BT_CONN_CONNECTED) {
   12e92:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
   12e94:	2b07      	cmp	r3, #7
   12e96:	bf08      	it	eq
   12e98:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
   12e9c:	f7fd fcb6 	bl	1080c <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   12ea0:	340a      	adds	r4, #10
   12ea2:	45a2      	cmp	sl, r4
   12ea4:	d1e5      	bne.n	12e72 <disconnected_cb+0x2a>
	if (!value_used) {
   12ea6:	f1b8 0f00 	cmp.w	r8, #0
   12eaa:	d106      	bne.n	12eba <disconnected_cb+0x72>
		if (ccc->cfg_changed) {
   12eac:	6eab      	ldr	r3, [r5, #104]	; 0x68
		ccc->value = 0U;
   12eae:	f8a5 8064 	strh.w	r8, [r5, #100]	; 0x64
		if (ccc->cfg_changed) {
   12eb2:	b113      	cbz	r3, 12eba <disconnected_cb+0x72>
			ccc->cfg_changed(attr, ccc->value);
   12eb4:	4641      	mov	r1, r8
   12eb6:	4638      	mov	r0, r7
   12eb8:	4798      	blx	r3
}
   12eba:	2001      	movs	r0, #1
   12ebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   12ec0:	4649      	mov	r1, r9
   12ec2:	7a30      	ldrb	r0, [r6, #8]
   12ec4:	f008 f99a 	bl	1b1fc <bt_addr_le_is_bonded>
   12ec8:	b940      	cbnz	r0, 12edc <disconnected_cb+0x94>
				if (ccc == &sc_ccc) {
   12eca:	455d      	cmp	r5, fp
   12ecc:	d102      	bne.n	12ed4 <disconnected_cb+0x8c>
					sc_clear(conn);
   12ece:	4630      	mov	r0, r6
   12ed0:	f7ff ff98 	bl	12e04 <sc_clear>
				clear_ccc_cfg(cfg);
   12ed4:	1e60      	subs	r0, r4, #1
   12ed6:	f008 ffa3 	bl	1be20 <clear_ccc_cfg>
   12eda:	e7e1      	b.n	12ea0 <disconnected_cb+0x58>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   12edc:	4649      	mov	r1, r9
   12ede:	4620      	mov	r0, r4
   12ee0:	f008 ff9b 	bl	1be1a <bt_addr_le_copy>
   12ee4:	e7dc      	b.n	12ea0 <disconnected_cb+0x58>
   12ee6:	bf00      	nop
   12ee8:	000126ed 	.word	0x000126ed
   12eec:	20008488 	.word	0x20008488

00012ef0 <sc_commit>:
{
   12ef0:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12ef2:	490b      	ldr	r1, [pc, #44]	; (12f20 <sc_commit+0x30>)
   12ef4:	e8d1 3fef 	ldaex	r3, [r1]
   12ef8:	f023 0302 	bic.w	r3, r3, #2
   12efc:	e8c1 3fe2 	stlex	r2, r3, [r1]
   12f00:	2a00      	cmp	r2, #0
   12f02:	d1f7      	bne.n	12ef4 <sc_commit+0x4>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12f04:	4608      	mov	r0, r1
   12f06:	f008 ffa4 	bl	1be52 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   12f0a:	07c3      	lsls	r3, r0, #31
   12f0c:	d506      	bpl.n	12f1c <sc_commit+0x2c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   12f0e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   12f12:	2300      	movs	r3, #0
   12f14:	4803      	ldr	r0, [pc, #12]	; (12f24 <sc_commit+0x34>)
   12f16:	3930      	subs	r1, #48	; 0x30
   12f18:	f005 fdf6 	bl	18b08 <k_delayed_work_submit_to_queue>
}
   12f1c:	2000      	movs	r0, #0
   12f1e:	bd08      	pop	{r3, pc}
   12f20:	20009ad8 	.word	0x20009ad8
   12f24:	2000a3b0 	.word	0x2000a3b0

00012f28 <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   12f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12f2c:	4688      	mov	r8, r1
   12f2e:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   12f30:	2112      	movs	r1, #18
   12f32:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
   12f34:	4606      	mov	r6, r0
   12f36:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
   12f38:	f7fe ff18 	bl	11d6c <bt_att_create_pdu>
	if (!buf) {
   12f3c:	4604      	mov	r4, r0
   12f3e:	b1c0      	cbz	r0, 12f72 <gatt_write_ccc.constprop.0+0x4a>
   12f40:	f100 0908 	add.w	r9, r0, #8
   12f44:	2102      	movs	r1, #2
   12f46:	4648      	mov	r0, r9
   12f48:	f001 fdf4 	bl	14b34 <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
   12f4c:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
   12f4e:	f8a0 8000 	strh.w	r8, [r0]
   12f52:	4648      	mov	r0, r9
   12f54:	f009 faa0 	bl	1c498 <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12f58:	2104      	movs	r1, #4
   12f5a:	f105 0010 	add.w	r0, r5, #16
   12f5e:	f008 ff6d 	bl	1be3c <atomic_or>
	return gatt_send(conn, buf, func, params, NULL);
   12f62:	462b      	mov	r3, r5
   12f64:	4621      	mov	r1, r4
   12f66:	4630      	mov	r0, r6
}
   12f68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
   12f6c:	4a03      	ldr	r2, [pc, #12]	; (12f7c <gatt_write_ccc.constprop.0+0x54>)
   12f6e:	f7ff bd35 	b.w	129dc <gatt_send.constprop.0>
}
   12f72:	f06f 000b 	mvn.w	r0, #11
   12f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12f7a:	bf00      	nop
   12f7c:	0001beff 	.word	0x0001beff

00012f80 <sc_indicate_rsp>:
{
   12f80:	b510      	push	{r4, lr}
   12f82:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12f84:	4910      	ldr	r1, [pc, #64]	; (12fc8 <sc_indicate_rsp+0x48>)
   12f86:	e8d1 3fef 	ldaex	r3, [r1]
   12f8a:	f023 0302 	bic.w	r3, r3, #2
   12f8e:	e8c1 3fe2 	stlex	r2, r3, [r1]
   12f92:	2a00      	cmp	r2, #0
   12f94:	d1f7      	bne.n	12f86 <sc_indicate_rsp+0x6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   12f96:	4608      	mov	r0, r1
   12f98:	f008 ff5b 	bl	1be52 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   12f9c:	07c2      	lsls	r2, r0, #31
   12f9e:	d505      	bpl.n	12fac <sc_indicate_rsp+0x2c>
   12fa0:	2200      	movs	r2, #0
   12fa2:	2300      	movs	r3, #0
   12fa4:	4809      	ldr	r0, [pc, #36]	; (12fcc <sc_indicate_rsp+0x4c>)
   12fa6:	3930      	subs	r1, #48	; 0x30
   12fa8:	f005 fdae 	bl	18b08 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
   12fac:	4620      	mov	r0, r4
   12fae:	f7ff fb21 	bl	125f4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   12fb2:	b140      	cbz	r0, 12fc6 <sc_indicate_rsp+0x46>
   12fb4:	7a03      	ldrb	r3, [r0, #8]
   12fb6:	07db      	lsls	r3, r3, #31
   12fb8:	d505      	bpl.n	12fc6 <sc_indicate_rsp+0x46>
}
   12fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   12fbe:	2101      	movs	r1, #1
   12fc0:	300c      	adds	r0, #12
   12fc2:	f008 bf3b 	b.w	1be3c <atomic_or>
   12fc6:	bd10      	pop	{r4, pc}
   12fc8:	20009ad8 	.word	0x20009ad8
   12fcc:	2000a3b0 	.word	0x2000a3b0

00012fd0 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12fd0:	2201      	movs	r2, #1
{
   12fd2:	b570      	push	{r4, r5, r6, lr}
   12fd4:	4b26      	ldr	r3, [pc, #152]	; (13070 <bt_gatt_init+0xa0>)
   12fd6:	e8d3 1fef 	ldaex	r1, [r3]
   12fda:	2900      	cmp	r1, #0
   12fdc:	d103      	bne.n	12fe6 <bt_gatt_init+0x16>
   12fde:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12fe2:	2800      	cmp	r0, #0
   12fe4:	d1f7      	bne.n	12fd6 <bt_gatt_init+0x6>
	if (!atomic_cas(&init, 0, 1)) {
   12fe6:	d142      	bne.n	1306e <bt_gatt_init+0x9e>
   12fe8:	4b22      	ldr	r3, [pc, #136]	; (13074 <bt_gatt_init+0xa4>)
   12fea:	e8d3 1fef 	ldaex	r1, [r3]
   12fee:	2900      	cmp	r1, #0
   12ff0:	d103      	bne.n	12ffa <bt_gatt_init+0x2a>
   12ff2:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12ff6:	2800      	cmp	r0, #0
   12ff8:	d1f7      	bne.n	12fea <bt_gatt_init+0x1a>
	if (!atomic_cas(&service_init, 0, 1)) {
   12ffa:	d034      	beq.n	13066 <bt_gatt_init+0x96>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   12ffc:	4c1e      	ldr	r4, [pc, #120]	; (13078 <bt_gatt_init+0xa8>)
   12ffe:	2230      	movs	r2, #48	; 0x30
   13000:	2100      	movs	r1, #0
   13002:	4620      	mov	r0, r4
   13004:	f007 ff5e 	bl	1aec4 <memset>
   13008:	4b1c      	ldr	r3, [pc, #112]	; (1307c <bt_gatt_init+0xac>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1300a:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1300c:	6063      	str	r3, [r4, #4]
   1300e:	4c1c      	ldr	r4, [pc, #112]	; (13080 <bt_gatt_init+0xb0>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   13010:	2300      	movs	r3, #0
   13012:	f44f 72a4 	mov.w	r2, #328	; 0x148
   13016:	481b      	ldr	r0, [pc, #108]	; (13084 <bt_gatt_init+0xb4>)
   13018:	f005 fd76 	bl	18b08 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1301c:	2100      	movs	r1, #0
   1301e:	f104 0020 	add.w	r0, r4, #32
   13022:	2230      	movs	r2, #48	; 0x30
   13024:	f007 ff4e 	bl	1aec4 <memset>
   13028:	4b17      	ldr	r3, [pc, #92]	; (13088 <bt_gatt_init+0xb8>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1302a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1302e:	6263      	str	r3, [r4, #36]	; 0x24
   13030:	2102      	movs	r1, #2
}
   13032:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   13036:	f008 bf01 	b.w	1be3c <atomic_or>
		last_static_handle += svc->attr_count;
   1303a:	4a14      	ldr	r2, [pc, #80]	; (1308c <bt_gatt_init+0xbc>)
   1303c:	6863      	ldr	r3, [r4, #4]
   1303e:	8811      	ldrh	r1, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13040:	3408      	adds	r4, #8
		last_static_handle += svc->attr_count;
   13042:	440b      	add	r3, r1
   13044:	8013      	strh	r3, [r2, #0]
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   13046:	42ac      	cmp	r4, r5
   13048:	d90a      	bls.n	13060 <bt_gatt_init+0x90>
   1304a:	4631      	mov	r1, r6
   1304c:	4810      	ldr	r0, [pc, #64]	; (13090 <bt_gatt_init+0xc0>)
   1304e:	f44f 6283 	mov.w	r2, #1048	; 0x418
   13052:	f006 fccc 	bl	199ee <printk>
   13056:	f44f 6183 	mov.w	r1, #1048	; 0x418
   1305a:	4630      	mov	r0, r6
   1305c:	f006 ff6d 	bl	19f3a <assert_post_action>
   13060:	42ac      	cmp	r4, r5
   13062:	d3ea      	bcc.n	1303a <bt_gatt_init+0x6a>
   13064:	e7ca      	b.n	12ffc <bt_gatt_init+0x2c>
   13066:	4c0b      	ldr	r4, [pc, #44]	; (13094 <bt_gatt_init+0xc4>)
   13068:	4d0b      	ldr	r5, [pc, #44]	; (13098 <bt_gatt_init+0xc8>)
   1306a:	4e0c      	ldr	r6, [pc, #48]	; (1309c <bt_gatt_init+0xcc>)
   1306c:	e7eb      	b.n	13046 <bt_gatt_init+0x76>
}
   1306e:	bd70      	pop	{r4, r5, r6, pc}
   13070:	2000aa54 	.word	0x2000aa54
   13074:	2000ab48 	.word	0x2000ab48
   13078:	20009a58 	.word	0x20009a58
   1307c:	0001c1f7 	.word	0x0001c1f7
   13080:	20009a88 	.word	0x20009a88
   13084:	2000a3b0 	.word	0x2000a3b0
   13088:	00013661 	.word	0x00013661
   1308c:	2000be44 	.word	0x2000be44
   13090:	0001ead7 	.word	0x0001ead7
   13094:	0001d6d0 	.word	0x0001d6d0
   13098:	0001d700 	.word	0x0001d700
   1309c:	00020d60 	.word	0x00020d60

000130a0 <bt_gatt_attr_get_handle>:
{
   130a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   130a4:	4604      	mov	r4, r0
   130a6:	b910      	cbnz	r0, 130ae <bt_gatt_attr_get_handle+0xe>
		return 0;
   130a8:	2000      	movs	r0, #0
}
   130aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (attr->handle) {
   130ae:	8a00      	ldrh	r0, [r0, #16]
   130b0:	2800      	cmp	r0, #0
   130b2:	d1fa      	bne.n	130aa <bt_gatt_attr_get_handle+0xa>
	uint16_t handle = 1;
   130b4:	f04f 0801 	mov.w	r8, #1
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   130b8:	4d17      	ldr	r5, [pc, #92]	; (13118 <bt_gatt_attr_get_handle+0x78>)
   130ba:	4e18      	ldr	r6, [pc, #96]	; (1311c <bt_gatt_attr_get_handle+0x7c>)
   130bc:	4f18      	ldr	r7, [pc, #96]	; (13120 <bt_gatt_attr_get_handle+0x80>)
   130be:	42b5      	cmp	r5, r6
   130c0:	d90a      	bls.n	130d8 <bt_gatt_attr_get_handle+0x38>
   130c2:	4639      	mov	r1, r7
   130c4:	4817      	ldr	r0, [pc, #92]	; (13124 <bt_gatt_attr_get_handle+0x84>)
   130c6:	f240 522d 	movw	r2, #1325	; 0x52d
   130ca:	f006 fc90 	bl	199ee <printk>
   130ce:	f240 512d 	movw	r1, #1325	; 0x52d
   130d2:	4638      	mov	r0, r7
   130d4:	f006 ff31 	bl	19f3a <assert_post_action>
   130d8:	42b5      	cmp	r5, r6
   130da:	d2e5      	bcs.n	130a8 <bt_gatt_attr_get_handle+0x8>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   130dc:	e9d5 c100 	ldrd	ip, r1, [r5]
		if ((attr < &static_svc->attrs[0]) ||
   130e0:	4564      	cmp	r4, ip
   130e2:	d306      	bcc.n	130f2 <bt_gatt_attr_get_handle+0x52>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   130e4:	f04f 0e14 	mov.w	lr, #20
   130e8:	fb0e c301 	mla	r3, lr, r1, ip
   130ec:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   130ee:	429c      	cmp	r4, r3
   130f0:	d910      	bls.n	13114 <bt_gatt_attr_get_handle+0x74>
			handle += static_svc->attr_count;
   130f2:	eb08 0001 	add.w	r0, r8, r1
   130f6:	b280      	uxth	r0, r0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   130f8:	4680      	mov	r8, r0
   130fa:	3508      	adds	r5, #8
   130fc:	e7df      	b.n	130be <bt_gatt_attr_get_handle+0x1e>
			if (attr == &static_svc->attrs[i]) {
   130fe:	fb0e c302 	mla	r3, lr, r2, ip
   13102:	429c      	cmp	r4, r3
   13104:	d0d1      	beq.n	130aa <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   13106:	3201      	adds	r2, #1
   13108:	eb08 0302 	add.w	r3, r8, r2
   1310c:	4291      	cmp	r1, r2
   1310e:	b298      	uxth	r0, r3
   13110:	d1f5      	bne.n	130fe <bt_gatt_attr_get_handle+0x5e>
   13112:	e7f1      	b.n	130f8 <bt_gatt_attr_get_handle+0x58>
   13114:	2200      	movs	r2, #0
   13116:	e7f7      	b.n	13108 <bt_gatt_attr_get_handle+0x68>
   13118:	0001d6d0 	.word	0x0001d6d0
   1311c:	0001d700 	.word	0x0001d700
   13120:	00020d60 	.word	0x00020d60
   13124:	0001ead7 	.word	0x0001ead7

00013128 <bt_gatt_foreach_attr_type>:
{
   13128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1312c:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1312e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
   13132:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   13136:	4607      	mov	r7, r0
		num_matches = UINT16_MAX;
   13138:	2d00      	cmp	r5, #0
   1313a:	bf08      	it	eq
   1313c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1313e:	4b2b      	ldr	r3, [pc, #172]	; (131ec <bt_gatt_foreach_attr_type+0xc4>)
{
   13140:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   13142:	881b      	ldrh	r3, [r3, #0]
{
   13144:	9100      	str	r1, [sp, #0]
	if (start_handle <= last_static_handle) {
   13146:	4283      	cmp	r3, r0
   13148:	d24b      	bcs.n	131e2 <bt_gatt_foreach_attr_type+0xba>
}
   1314a:	b003      	add	sp, #12
   1314c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   13150:	6873      	ldr	r3, [r6, #4]
   13152:	4423      	add	r3, r4
   13154:	42bb      	cmp	r3, r7
   13156:	d241      	bcs.n	131dc <bt_gatt_foreach_attr_type+0xb4>
				handle += static_svc->attr_count;
   13158:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1315a:	3608      	adds	r6, #8
   1315c:	4b24      	ldr	r3, [pc, #144]	; (131f0 <bt_gatt_foreach_attr_type+0xc8>)
   1315e:	429e      	cmp	r6, r3
   13160:	d90a      	bls.n	13178 <bt_gatt_foreach_attr_type+0x50>
   13162:	4659      	mov	r1, fp
   13164:	4823      	ldr	r0, [pc, #140]	; (131f4 <bt_gatt_foreach_attr_type+0xcc>)
   13166:	f240 52f1 	movw	r2, #1521	; 0x5f1
   1316a:	f006 fc40 	bl	199ee <printk>
   1316e:	f240 51f1 	movw	r1, #1521	; 0x5f1
   13172:	4658      	mov	r0, fp
   13174:	f006 fee1 	bl	19f3a <assert_post_action>
   13178:	4b1d      	ldr	r3, [pc, #116]	; (131f0 <bt_gatt_foreach_attr_type+0xc8>)
   1317a:	429e      	cmp	r6, r3
   1317c:	d3e8      	bcc.n	13150 <bt_gatt_foreach_attr_type+0x28>
   1317e:	e7e4      	b.n	1314a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   13180:	4640      	mov	r0, r8
   13182:	5889      	ldr	r1, [r1, r2]
   13184:	9301      	str	r3, [sp, #4]
   13186:	f007 fee7 	bl	1af58 <bt_uuid_cmp>
   1318a:	9b01      	ldr	r3, [sp, #4]
   1318c:	b198      	cbz	r0, 131b6 <bt_gatt_foreach_attr_type+0x8e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1318e:	3401      	adds	r4, #1
   13190:	f10a 0a01 	add.w	sl, sl, #1
   13194:	b2a4      	uxth	r4, r4
   13196:	6873      	ldr	r3, [r6, #4]
   13198:	4553      	cmp	r3, sl
   1319a:	d9de      	bls.n	1315a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1319c:	9b00      	ldr	r3, [sp, #0]
   1319e:	429c      	cmp	r4, r3
   131a0:	d8d3      	bhi.n	1314a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   131a2:	42bc      	cmp	r4, r7
   131a4:	d3f3      	bcc.n	1318e <bt_gatt_foreach_attr_type+0x66>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   131a6:	2314      	movs	r3, #20
   131a8:	fb03 f20a 	mul.w	r2, r3, sl
   131ac:	6831      	ldr	r1, [r6, #0]
   131ae:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   131b0:	f1b8 0f00 	cmp.w	r8, #0
   131b4:	d1e4      	bne.n	13180 <bt_gatt_foreach_attr_type+0x58>
	if (attr_data && attr_data != attr->user_data) {
   131b6:	f1b9 0f00 	cmp.w	r9, #0
   131ba:	d10b      	bne.n	131d4 <bt_gatt_foreach_attr_type+0xac>
	*num_matches -= 1;
   131bc:	3d01      	subs	r5, #1
	result = func(attr, handle, user_data);
   131be:	4618      	mov	r0, r3
	*num_matches -= 1;
   131c0:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   131c2:	4621      	mov	r1, r4
   131c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   131c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   131c8:	4798      	blx	r3
	if (!*num_matches) {
   131ca:	2d00      	cmp	r5, #0
   131cc:	d0bd      	beq.n	1314a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   131ce:	2800      	cmp	r0, #0
   131d0:	d1dd      	bne.n	1318e <bt_gatt_foreach_attr_type+0x66>
   131d2:	e7ba      	b.n	1314a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   131d4:	68da      	ldr	r2, [r3, #12]
   131d6:	4591      	cmp	r9, r2
   131d8:	d1d9      	bne.n	1318e <bt_gatt_foreach_attr_type+0x66>
   131da:	e7ef      	b.n	131bc <bt_gatt_foreach_attr_type+0x94>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   131dc:	f04f 0a00 	mov.w	sl, #0
   131e0:	e7d9      	b.n	13196 <bt_gatt_foreach_attr_type+0x6e>
		uint16_t handle = 1;
   131e2:	2401      	movs	r4, #1
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   131e4:	4e04      	ldr	r6, [pc, #16]	; (131f8 <bt_gatt_foreach_attr_type+0xd0>)
   131e6:	f8df b014 	ldr.w	fp, [pc, #20]	; 131fc <bt_gatt_foreach_attr_type+0xd4>
   131ea:	e7b7      	b.n	1315c <bt_gatt_foreach_attr_type+0x34>
   131ec:	2000be44 	.word	0x2000be44
   131f0:	0001d700 	.word	0x0001d700
   131f4:	0001ead7 	.word	0x0001ead7
   131f8:	0001d6d0 	.word	0x0001d6d0
   131fc:	00020d60 	.word	0x00020d60

00013200 <db_hash_gen>:
	uint8_t key[16] = {};
   13200:	2300      	movs	r3, #0
{
   13202:	b530      	push	{r4, r5, lr}
   13204:	b0c9      	sub	sp, #292	; 0x124
   13206:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13208:	4669      	mov	r1, sp
   1320a:	aa1c      	add	r2, sp, #112	; 0x70
   1320c:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1320e:	e9cd 3300 	strd	r3, r3, [sp]
   13212:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   13216:	f007 fa53 	bl	1a6c0 <tc_cmac_setup>
   1321a:	b928      	cbnz	r0, 13228 <db_hash_gen+0x28>
		BT_ERR("Unable to setup AES CMAC");
   1321c:	2145      	movs	r1, #69	; 0x45
   1321e:	4812      	ldr	r0, [pc, #72]	; (13268 <db_hash_gen+0x68>)
		BT_ERR("Unable to calculate hash");
   13220:	f006 fbe5 	bl	199ee <printk>
}
   13224:	b049      	add	sp, #292	; 0x124
   13226:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   13228:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1322c:	2001      	movs	r0, #1
   1322e:	4a0f      	ldr	r2, [pc, #60]	; (1326c <db_hash_gen+0x6c>)
   13230:	ab04      	add	r3, sp, #16
   13232:	f008 ffd5 	bl	1c1e0 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   13236:	480e      	ldr	r0, [pc, #56]	; (13270 <db_hash_gen+0x70>)
   13238:	a904      	add	r1, sp, #16
   1323a:	f007 fad7 	bl	1a7ec <tc_cmac_final>
   1323e:	b910      	cbnz	r0, 13246 <db_hash_gen+0x46>
		BT_ERR("Unable to calculate hash");
   13240:	2145      	movs	r1, #69	; 0x45
   13242:	480c      	ldr	r0, [pc, #48]	; (13274 <db_hash_gen+0x74>)
   13244:	e7ec      	b.n	13220 <db_hash_gen+0x20>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
   13246:	2208      	movs	r2, #8
   13248:	4b09      	ldr	r3, [pc, #36]	; (13270 <db_hash_gen+0x70>)
   1324a:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1324e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13250:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
	for (i = 0; i < (length/2); i++) {
   13254:	3a01      	subs	r2, #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   13256:	f803 5b01 	strb.w	r5, [r3], #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1325a:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   1325c:	d1f7      	bne.n	1324e <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1325e:	2c00      	cmp	r4, #0
   13260:	d0e0      	beq.n	13224 <db_hash_gen+0x24>
		db_hash_store();
   13262:	f7ff f9b1 	bl	125c8 <db_hash_store>
   13266:	e7dd      	b.n	13224 <db_hash_gen+0x24>
   13268:	00020d90 	.word	0x00020d90
   1326c:	0001bcf7 	.word	0x0001bcf7
   13270:	2000c5c9 	.word	0x2000c5c9
   13274:	00020dae 	.word	0x00020dae

00013278 <db_hash_commit>:
{
   13278:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
   1327a:	4821      	ldr	r0, [pc, #132]	; (13300 <db_hash_commit+0x88>)
   1327c:	f005 fcb4 	bl	18be8 <k_delayed_work_cancel>
	if (!err) {
   13280:	b908      	cbnz	r0, 13286 <db_hash_commit+0xe>
		db_hash_gen(false);
   13282:	f7ff ffbd 	bl	13200 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
   13286:	2210      	movs	r2, #16
   13288:	491e      	ldr	r1, [pc, #120]	; (13304 <db_hash_commit+0x8c>)
   1328a:	481f      	ldr	r0, [pc, #124]	; (13308 <db_hash_commit+0x90>)
   1328c:	f007 fdde 	bl	1ae4c <memcmp>
   13290:	b968      	cbnz	r0, 132ae <db_hash_commit+0x36>
		k_delayed_work_cancel(&gatt_sc.work);
   13292:	481e      	ldr	r0, [pc, #120]	; (1330c <db_hash_commit+0x94>)
   13294:	f005 fca8 	bl	18be8 <k_delayed_work_cancel>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13298:	4b1d      	ldr	r3, [pc, #116]	; (13310 <db_hash_commit+0x98>)
   1329a:	e8d3 2fef 	ldaex	r2, [r3]
   1329e:	f022 0201 	bic.w	r2, r2, #1
   132a2:	e8c3 2fe1 	stlex	r1, r2, [r3]
   132a6:	2900      	cmp	r1, #0
   132a8:	d1f7      	bne.n	1329a <db_hash_commit+0x22>
}
   132aa:	2000      	movs	r0, #0
   132ac:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   132ae:	4c19      	ldr	r4, [pc, #100]	; (13314 <db_hash_commit+0x9c>)
   132b0:	2101      	movs	r1, #1
   132b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
   132b6:	f008 fdc1 	bl	1be3c <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   132ba:	07c2      	lsls	r2, r0, #31
   132bc:	d410      	bmi.n	132e0 <db_hash_commit+0x68>
		gatt_sc.start = start;
   132be:	4b16      	ldr	r3, [pc, #88]	; (13318 <db_hash_commit+0xa0>)
   132c0:	61a3      	str	r3, [r4, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   132c2:	4813      	ldr	r0, [pc, #76]	; (13310 <db_hash_commit+0x98>)
   132c4:	f008 fdc5 	bl	1be52 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   132c8:	0783      	lsls	r3, r0, #30
   132ca:	d406      	bmi.n	132da <db_hash_commit+0x62>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   132cc:	f44f 72a4 	mov.w	r2, #328	; 0x148
   132d0:	2300      	movs	r3, #0
   132d2:	490e      	ldr	r1, [pc, #56]	; (1330c <db_hash_commit+0x94>)
   132d4:	4811      	ldr	r0, [pc, #68]	; (1331c <db_hash_commit+0xa4>)
   132d6:	f005 fc17 	bl	18b08 <k_delayed_work_submit_to_queue>
	db_hash_store();
   132da:	f7ff f975 	bl	125c8 <db_hash_store>
	return 0;
   132de:	e7e4      	b.n	132aa <db_hash_commit+0x32>
	if (new_start >= *start && new_end <= *end) {
   132e0:	8b23      	ldrh	r3, [r4, #24]
   132e2:	8b62      	ldrh	r2, [r4, #26]
   132e4:	2b01      	cmp	r3, #1
   132e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   132ea:	d805      	bhi.n	132f8 <db_hash_commit+0x80>
   132ec:	429a      	cmp	r2, r3
   132ee:	d0f4      	beq.n	132da <db_hash_commit+0x62>
		*end = new_end;
   132f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   132f4:	8363      	strh	r3, [r4, #26]
   132f6:	e7e4      	b.n	132c2 <db_hash_commit+0x4a>
	if (*end < new_end) {
   132f8:	429a      	cmp	r2, r3
		*start = new_start;
   132fa:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
   132fc:	d0e1      	beq.n	132c2 <db_hash_commit+0x4a>
   132fe:	e7f7      	b.n	132f0 <db_hash_commit+0x78>
   13300:	20009a58 	.word	0x20009a58
   13304:	2000c5c9 	.word	0x2000c5c9
   13308:	2000c5d9 	.word	0x2000c5d9
   1330c:	20009aa8 	.word	0x20009aa8
   13310:	20009ad8 	.word	0x20009ad8
   13314:	20009a88 	.word	0x20009a88
   13318:	ffff0001 	.word	0xffff0001
   1331c:	2000a3b0 	.word	0x2000a3b0

00013320 <ccc_set_direct>:
{
   13320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13324:	b0b9      	sub	sp, #228	; 0xe4
   13326:	4688      	mov	r8, r1
   13328:	4616      	mov	r6, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1332a:	492c      	ldr	r1, [pc, #176]	; (133dc <ccc_set_direct+0xbc>)
   1332c:	466a      	mov	r2, sp
   1332e:	9840      	ldr	r0, [sp, #256]	; 0x100
{
   13330:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   13332:	f006 fe58 	bl	19fe6 <settings_name_steq>
   13336:	b948      	cbnz	r0, 1334c <ccc_set_direct+0x2c>
			BT_ERR("Invalid key");
   13338:	2145      	movs	r1, #69	; 0x45
   1333a:	4829      	ldr	r0, [pc, #164]	; (133e0 <ccc_set_direct+0xc0>)
   1333c:	f006 fb57 	bl	199ee <printk>
   13340:	f06f 0515 	mvn.w	r5, #21
}
   13344:	4628      	mov	r0, r5
   13346:	b039      	add	sp, #228	; 0xe4
   13348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1334c:	9c00      	ldr	r4, [sp, #0]
		settings_name_next(name, &next);
   1334e:	a901      	add	r1, sp, #4
   13350:	4620      	mov	r0, r4
   13352:	f006 fe6b 	bl	1a02c <settings_name_next>
		if (!name) {
   13356:	b93c      	cbnz	r4, 13368 <ccc_set_direct+0x48>
			BT_ERR("Insufficient number of arguments");
   13358:	2145      	movs	r1, #69	; 0x45
   1335a:	4822      	ldr	r0, [pc, #136]	; (133e4 <ccc_set_direct+0xc4>)
   1335c:	f006 fb47 	bl	199ee <printk>
			return -EINVAL;
   13360:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
   13364:	4625      	mov	r5, r4
   13366:	e7ed      	b.n	13344 <ccc_set_direct+0x24>
		} else if (!next) {
   13368:	9801      	ldr	r0, [sp, #4]
   1336a:	b978      	cbnz	r0, 1338c <ccc_set_direct+0x6c>
		err = bt_settings_decode_key(name, &addr);
   1336c:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
   13370:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   13374:	4649      	mov	r1, r9
   13376:	4620      	mov	r0, r4
   13378:	f007 fdca 	bl	1af10 <bt_settings_decode_key>
		if (err) {
   1337c:	4605      	mov	r5, r0
   1337e:	b150      	cbz	r0, 13396 <ccc_set_direct+0x76>
			BT_ERR("Unable to decode address %s", log_strdup(name));
   13380:	4622      	mov	r2, r4
   13382:	2145      	movs	r1, #69	; 0x45
   13384:	4818      	ldr	r0, [pc, #96]	; (133e8 <ccc_set_direct+0xc8>)
   13386:	f006 fb32 	bl	199ee <printk>
   1338a:	e7e9      	b.n	13360 <ccc_set_direct+0x40>
			load.addr_with_id.id = strtol(next, NULL, 10);
   1338c:	220a      	movs	r2, #10
   1338e:	2100      	movs	r1, #0
   13390:	f007 fc9f 	bl	1acd2 <strtol>
   13394:	e7ea      	b.n	1336c <ccc_set_direct+0x4c>
		load.addr_with_id.addr = &addr;
   13396:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   1339a:	f1b8 0f00 	cmp.w	r8, #0
   1339e:	d019      	beq.n	133d4 <ccc_set_direct+0xb4>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   133a0:	f10d 0820 	add.w	r8, sp, #32
   133a4:	22c0      	movs	r2, #192	; 0xc0
   133a6:	4641      	mov	r1, r8
   133a8:	4638      	mov	r0, r7
   133aa:	47b0      	blx	r6
			if (len < 0) {
   133ac:	1e04      	subs	r4, r0, #0
   133ae:	da05      	bge.n	133bc <ccc_set_direct+0x9c>
				BT_ERR("Failed to decode value (err %zd)", len);
   133b0:	4622      	mov	r2, r4
   133b2:	2145      	movs	r1, #69	; 0x45
   133b4:	480d      	ldr	r0, [pc, #52]	; (133ec <ccc_set_direct+0xcc>)
   133b6:	f006 fb1a 	bl	199ee <printk>
				return len;
   133ba:	e7d3      	b.n	13364 <ccc_set_direct+0x44>
			load.count = len / sizeof(*ccc_store);
   133bc:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
   133be:	f8cd 8018 	str.w	r8, [sp, #24]
			load.count = len / sizeof(*ccc_store);
   133c2:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   133c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   133c8:	2001      	movs	r0, #1
   133ca:	4a09      	ldr	r2, [pc, #36]	; (133f0 <ccc_set_direct+0xd0>)
   133cc:	ab04      	add	r3, sp, #16
   133ce:	f008 ff07 	bl	1c1e0 <bt_gatt_foreach_attr>
	return 0;
   133d2:	e7b7      	b.n	13344 <ccc_set_direct+0x24>
			load.count = 0;
   133d4:	e9cd 0006 	strd	r0, r0, [sp, #24]
   133d8:	e7f4      	b.n	133c4 <ccc_set_direct+0xa4>
   133da:	bf00      	nop
   133dc:	00020dcc 	.word	0x00020dcc
   133e0:	00020dd3 	.word	0x00020dd3
   133e4:	0001fb44 	.word	0x0001fb44
   133e8:	00020c3b 	.word	0x00020c3b
   133ec:	00020b4d 	.word	0x00020b4d
   133f0:	00012b25 	.word	0x00012b25

000133f4 <bt_gatt_attr_next>:
	struct bt_gatt_attr *next = NULL;
   133f4:	2300      	movs	r3, #0
{
   133f6:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   133f8:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   133fa:	f7ff fe51 	bl	130a0 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   133fe:	1c41      	adds	r1, r0, #1
   13400:	b289      	uxth	r1, r1
   13402:	4608      	mov	r0, r1
   13404:	4a03      	ldr	r2, [pc, #12]	; (13414 <bt_gatt_attr_next+0x20>)
   13406:	ab01      	add	r3, sp, #4
   13408:	f008 feea 	bl	1c1e0 <bt_gatt_foreach_attr>
}
   1340c:	9801      	ldr	r0, [sp, #4]
   1340e:	b003      	add	sp, #12
   13410:	f85d fb04 	ldr.w	pc, [sp], #4
   13414:	0001bc8f 	.word	0x0001bc8f

00013418 <bt_gatt_notify_cb>:
{
   13418:	b530      	push	{r4, r5, lr}
   1341a:	4604      	mov	r4, r0
	__ASSERT(params, "invalid parameters\n");
   1341c:	460d      	mov	r5, r1
{
   1341e:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   13420:	b951      	cbnz	r1, 13438 <bt_gatt_notify_cb+0x20>
   13422:	4940      	ldr	r1, [pc, #256]	; (13524 <bt_gatt_notify_cb+0x10c>)
   13424:	4840      	ldr	r0, [pc, #256]	; (13528 <bt_gatt_notify_cb+0x110>)
   13426:	f640 023d 	movw	r2, #2109	; 0x83d
   1342a:	f006 fae0 	bl	199ee <printk>
   1342e:	f640 013d 	movw	r1, #2109	; 0x83d
   13432:	483c      	ldr	r0, [pc, #240]	; (13524 <bt_gatt_notify_cb+0x10c>)
   13434:	f006 fd81 	bl	19f3a <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   13438:	686b      	ldr	r3, [r5, #4]
   1343a:	b953      	cbnz	r3, 13452 <bt_gatt_notify_cb+0x3a>
   1343c:	4939      	ldr	r1, [pc, #228]	; (13524 <bt_gatt_notify_cb+0x10c>)
   1343e:	483a      	ldr	r0, [pc, #232]	; (13528 <bt_gatt_notify_cb+0x110>)
   13440:	f640 023e 	movw	r2, #2110	; 0x83e
   13444:	f006 fad3 	bl	199ee <printk>
   13448:	f640 013e 	movw	r1, #2110	; 0x83e
   1344c:	4835      	ldr	r0, [pc, #212]	; (13524 <bt_gatt_notify_cb+0x10c>)
   1344e:	f006 fd74 	bl	19f3a <assert_post_action>
   13452:	4836      	ldr	r0, [pc, #216]	; (1352c <bt_gatt_notify_cb+0x114>)
   13454:	f008 fcfd 	bl	1be52 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13458:	0782      	lsls	r2, r0, #30
   1345a:	d55d      	bpl.n	13518 <bt_gatt_notify_cb+0x100>
	data.attr = params->attr;
   1345c:	6868      	ldr	r0, [r5, #4]
   1345e:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   13460:	b114      	cbz	r4, 13468 <bt_gatt_notify_cb+0x50>
   13462:	7aa3      	ldrb	r3, [r4, #10]
   13464:	2b07      	cmp	r3, #7
   13466:	d15a      	bne.n	1351e <bt_gatt_notify_cb+0x106>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13468:	f7ff fe1a 	bl	130a0 <bt_gatt_attr_get_handle>
   1346c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   13470:	b918      	cbnz	r0, 1347a <bt_gatt_notify_cb+0x62>
		return -ENOENT;
   13472:	f06f 0001 	mvn.w	r0, #1
}
   13476:	b00b      	add	sp, #44	; 0x2c
   13478:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   1347a:	682a      	ldr	r2, [r5, #0]
   1347c:	b9aa      	cbnz	r2, 134aa <bt_gatt_notify_cb+0x92>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1347e:	9b05      	ldr	r3, [sp, #20]
   13480:	a904      	add	r1, sp, #16
   13482:	6818      	ldr	r0, [r3, #0]
   13484:	2300      	movs	r3, #0
   13486:	f88d 3010 	strb.w	r3, [sp, #16]
   1348a:	f642 0303 	movw	r3, #10243	; 0x2803
   1348e:	f8ad 3012 	strh.w	r3, [sp, #18]
   13492:	f007 fd61 	bl	1af58 <bt_uuid_cmp>
   13496:	b1c0      	cbz	r0, 134ca <bt_gatt_notify_cb+0xb2>
		return gatt_notify(conn, data.handle, params);
   13498:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1349c:	b314      	cbz	r4, 134e4 <bt_gatt_notify_cb+0xcc>
		return gatt_notify(conn, data.handle, params);
   1349e:	4601      	mov	r1, r0
   134a0:	462a      	mov	r2, r5
   134a2:	4620      	mov	r0, r4
   134a4:	f7ff fbd6 	bl	12c54 <gatt_notify>
   134a8:	e7e5      	b.n	13476 <bt_gatt_notify_cb+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   134aa:	a905      	add	r1, sp, #20
   134ac:	9102      	str	r1, [sp, #8]
   134ae:	4920      	ldr	r1, [pc, #128]	; (13530 <bt_gatt_notify_cb+0x118>)
	found->attr = NULL;
   134b0:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   134b2:	9101      	str	r1, [sp, #4]
   134b4:	2101      	movs	r1, #1
   134b6:	9100      	str	r1, [sp, #0]
   134b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   134bc:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   134be:	f7ff fe33 	bl	13128 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   134c2:	9b05      	ldr	r3, [sp, #20]
   134c4:	2b00      	cmp	r3, #0
   134c6:	d1da      	bne.n	1347e <bt_gatt_notify_cb+0x66>
   134c8:	e7d3      	b.n	13472 <bt_gatt_notify_cb+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   134ca:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   134cc:	68c3      	ldr	r3, [r0, #12]
   134ce:	799b      	ldrb	r3, [r3, #6]
   134d0:	06db      	lsls	r3, r3, #27
   134d2:	d402      	bmi.n	134da <bt_gatt_notify_cb+0xc2>
			return -EINVAL;
   134d4:	f06f 0015 	mvn.w	r0, #21
   134d8:	e7cd      	b.n	13476 <bt_gatt_notify_cb+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   134da:	f008 fe33 	bl	1c144 <bt_gatt_attr_value_handle>
   134de:	f8ad 0018 	strh.w	r0, [sp, #24]
   134e2:	e7d9      	b.n	13498 <bt_gatt_notify_cb+0x80>
	data.err = -ENOTCONN;
   134e4:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   134e8:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
   134ec:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   134ee:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   134f0:	f8ad 2012 	strh.w	r2, [sp, #18]
   134f4:	aa05      	add	r2, sp, #20
   134f6:	9202      	str	r2, [sp, #8]
   134f8:	4a0e      	ldr	r2, [pc, #56]	; (13534 <bt_gatt_notify_cb+0x11c>)
	data.type = BT_GATT_CCC_NOTIFY;
   134fa:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   134fe:	e9cd 3200 	strd	r3, r2, [sp]
   13502:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13506:	4623      	mov	r3, r4
   13508:	aa04      	add	r2, sp, #16
	data.nfy_params = params;
   1350a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1350c:	f88d 4010 	strb.w	r4, [sp, #16]
   13510:	f7ff fe0a 	bl	13128 <bt_gatt_foreach_attr_type>
	return data.err;
   13514:	9807      	ldr	r0, [sp, #28]
   13516:	e7ae      	b.n	13476 <bt_gatt_notify_cb+0x5e>
		return -EAGAIN;
   13518:	f06f 000a 	mvn.w	r0, #10
   1351c:	e7ab      	b.n	13476 <bt_gatt_notify_cb+0x5e>
		return -ENOTCONN;
   1351e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   13522:	e7a8      	b.n	13476 <bt_gatt_notify_cb+0x5e>
   13524:	00020d60 	.word	0x00020d60
   13528:	0001ead7 	.word	0x0001ead7
   1352c:	20008094 	.word	0x20008094
   13530:	0001bceb 	.word	0x0001bceb
   13534:	00012cb5 	.word	0x00012cb5

00013538 <bt_gatt_indicate>:
{
   13538:	b530      	push	{r4, r5, lr}
   1353a:	4605      	mov	r5, r0
	__ASSERT(params, "invalid parameters\n");
   1353c:	460c      	mov	r4, r1
{
   1353e:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   13540:	b951      	cbnz	r1, 13558 <bt_gatt_indicate+0x20>
   13542:	4942      	ldr	r1, [pc, #264]	; (1364c <bt_gatt_indicate+0x114>)
   13544:	4842      	ldr	r0, [pc, #264]	; (13650 <bt_gatt_indicate+0x118>)
   13546:	f640 0289 	movw	r2, #2185	; 0x889
   1354a:	f006 fa50 	bl	199ee <printk>
   1354e:	f640 0189 	movw	r1, #2185	; 0x889
   13552:	483e      	ldr	r0, [pc, #248]	; (1364c <bt_gatt_indicate+0x114>)
   13554:	f006 fcf1 	bl	19f3a <assert_post_action>
	__ASSERT(params->attr, "invalid parameters\n");
   13558:	6863      	ldr	r3, [r4, #4]
   1355a:	b953      	cbnz	r3, 13572 <bt_gatt_indicate+0x3a>
   1355c:	493b      	ldr	r1, [pc, #236]	; (1364c <bt_gatt_indicate+0x114>)
   1355e:	483c      	ldr	r0, [pc, #240]	; (13650 <bt_gatt_indicate+0x118>)
   13560:	f640 028a 	movw	r2, #2186	; 0x88a
   13564:	f006 fa43 	bl	199ee <printk>
   13568:	f640 018a 	movw	r1, #2186	; 0x88a
   1356c:	4837      	ldr	r0, [pc, #220]	; (1364c <bt_gatt_indicate+0x114>)
   1356e:	f006 fce4 	bl	19f3a <assert_post_action>
   13572:	4838      	ldr	r0, [pc, #224]	; (13654 <bt_gatt_indicate+0x11c>)
   13574:	f008 fc6d 	bl	1be52 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   13578:	0782      	lsls	r2, r0, #30
   1357a:	d561      	bpl.n	13640 <bt_gatt_indicate+0x108>
	data.attr = params->attr;
   1357c:	6860      	ldr	r0, [r4, #4]
   1357e:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   13580:	b115      	cbz	r5, 13588 <bt_gatt_indicate+0x50>
   13582:	7aab      	ldrb	r3, [r5, #10]
   13584:	2b07      	cmp	r3, #7
   13586:	d15e      	bne.n	13646 <bt_gatt_indicate+0x10e>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   13588:	f7ff fd8a 	bl	130a0 <bt_gatt_attr_get_handle>
   1358c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   13590:	b918      	cbnz	r0, 1359a <bt_gatt_indicate+0x62>
		return -ENOENT;
   13592:	f06f 0001 	mvn.w	r0, #1
}
   13596:	b00b      	add	sp, #44	; 0x2c
   13598:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   1359a:	6822      	ldr	r2, [r4, #0]
   1359c:	b9ba      	cbnz	r2, 135ce <bt_gatt_indicate+0x96>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1359e:	9b05      	ldr	r3, [sp, #20]
   135a0:	a904      	add	r1, sp, #16
   135a2:	6818      	ldr	r0, [r3, #0]
   135a4:	2300      	movs	r3, #0
   135a6:	f88d 3010 	strb.w	r3, [sp, #16]
   135aa:	f642 0303 	movw	r3, #10243	; 0x2803
   135ae:	f8ad 3012 	strh.w	r3, [sp, #18]
   135b2:	f007 fcd1 	bl	1af58 <bt_uuid_cmp>
   135b6:	b1d0      	cbz	r0, 135ee <bt_gatt_indicate+0xb6>
		return gatt_indicate(conn, data.handle, params);
   135b8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   135bc:	b325      	cbz	r5, 13608 <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   135be:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   135c0:	4601      	mov	r1, r0
   135c2:	4622      	mov	r2, r4
   135c4:	4628      	mov	r0, r5
		params->_ref = 1;
   135c6:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   135c8:	f7ff fb0e 	bl	12be8 <gatt_indicate>
   135cc:	e7e3      	b.n	13596 <bt_gatt_indicate+0x5e>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   135ce:	a905      	add	r1, sp, #20
   135d0:	9102      	str	r1, [sp, #8]
   135d2:	4921      	ldr	r1, [pc, #132]	; (13658 <bt_gatt_indicate+0x120>)
	found->attr = NULL;
   135d4:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   135d6:	9101      	str	r1, [sp, #4]
   135d8:	2101      	movs	r1, #1
   135da:	9100      	str	r1, [sp, #0]
   135dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   135e0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   135e2:	f7ff fda1 	bl	13128 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   135e6:	9b05      	ldr	r3, [sp, #20]
   135e8:	2b00      	cmp	r3, #0
   135ea:	d1d8      	bne.n	1359e <bt_gatt_indicate+0x66>
   135ec:	e7d1      	b.n	13592 <bt_gatt_indicate+0x5a>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   135ee:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   135f0:	68c3      	ldr	r3, [r0, #12]
   135f2:	799b      	ldrb	r3, [r3, #6]
   135f4:	069b      	lsls	r3, r3, #26
   135f6:	d402      	bmi.n	135fe <bt_gatt_indicate+0xc6>
			return -EINVAL;
   135f8:	f06f 0015 	mvn.w	r0, #21
   135fc:	e7cb      	b.n	13596 <bt_gatt_indicate+0x5e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   135fe:	f008 fda1 	bl	1c144 <bt_gatt_attr_value_handle>
   13602:	f8ad 0018 	strh.w	r0, [sp, #24]
   13606:	e7d7      	b.n	135b8 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   13608:	f06f 0338 	mvn.w	r3, #56	; 0x38
   1360c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1360e:	2302      	movs	r3, #2
   13610:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13614:	f642 1302 	movw	r3, #10498	; 0x2902
   13618:	f8ad 3012 	strh.w	r3, [sp, #18]
   1361c:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1361e:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13620:	9302      	str	r3, [sp, #8]
   13622:	4b0e      	ldr	r3, [pc, #56]	; (1365c <bt_gatt_indicate+0x124>)
   13624:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13628:	9301      	str	r3, [sp, #4]
   1362a:	2301      	movs	r3, #1
   1362c:	aa04      	add	r2, sp, #16
   1362e:	9300      	str	r3, [sp, #0]
   13630:	462b      	mov	r3, r5
	data.ind_params = params;
   13632:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   13634:	f88d 5010 	strb.w	r5, [sp, #16]
   13638:	f7ff fd76 	bl	13128 <bt_gatt_foreach_attr_type>
	return data.err;
   1363c:	9807      	ldr	r0, [sp, #28]
   1363e:	e7aa      	b.n	13596 <bt_gatt_indicate+0x5e>
		return -EAGAIN;
   13640:	f06f 000a 	mvn.w	r0, #10
   13644:	e7a7      	b.n	13596 <bt_gatt_indicate+0x5e>
		return -ENOTCONN;
   13646:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1364a:	e7a4      	b.n	13596 <bt_gatt_indicate+0x5e>
   1364c:	00020d60 	.word	0x00020d60
   13650:	0001ead7 	.word	0x0001ead7
   13654:	20008094 	.word	0x20008094
   13658:	0001bceb 	.word	0x0001bceb
   1365c:	00012cb5 	.word	0x00012cb5

00013660 <sc_process>:
{
   13660:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   13662:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   13666:	4604      	mov	r4, r0
   13668:	4628      	mov	r0, r5
   1366a:	f008 fbf2 	bl	1be52 <atomic_get>
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1366e:	0783      	lsls	r3, r0, #30
   13670:	d50a      	bpl.n	13688 <sc_process+0x28>
   13672:	491b      	ldr	r1, [pc, #108]	; (136e0 <sc_process+0x80>)
   13674:	481b      	ldr	r0, [pc, #108]	; (136e4 <sc_process+0x84>)
   13676:	f240 32ae 	movw	r2, #942	; 0x3ae
   1367a:	f006 f9b8 	bl	199ee <printk>
   1367e:	f240 31ae 	movw	r1, #942	; 0x3ae
   13682:	4817      	ldr	r0, [pc, #92]	; (136e0 <sc_process+0x80>)
   13684:	f006 fc59 	bl	19f3a <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   13688:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   1368c:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   13690:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   13694:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13698:	e8d5 3fef 	ldaex	r3, [r5]
   1369c:	f023 0301 	bic.w	r3, r3, #1
   136a0:	e8c5 3fe2 	stlex	r2, r3, [r5]
   136a4:	2a00      	cmp	r2, #0
   136a6:	d1f7      	bne.n	13698 <sc_process+0x38>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   136a8:	4b0f      	ldr	r3, [pc, #60]	; (136e8 <sc_process+0x88>)
	sc->start = 0U;
   136aa:	2000      	movs	r0, #0
	sc->params.attr = &_1_gatt_svc.attrs[2];
   136ac:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   136b0:	4b0e      	ldr	r3, [pc, #56]	; (136ec <sc_process+0x8c>)
	sc->start = 0U;
   136b2:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->params.func = sc_indicate_rsp;
   136b6:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   136ba:	ab01      	add	r3, sp, #4
   136bc:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   136c0:	2304      	movs	r3, #4
	sc->end = 0U;
   136c2:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   136c6:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   136ca:	f1a4 0120 	sub.w	r1, r4, #32
   136ce:	f7ff ff33 	bl	13538 <bt_gatt_indicate>
   136d2:	b918      	cbnz	r0, 136dc <sc_process+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   136d4:	2102      	movs	r1, #2
   136d6:	4628      	mov	r0, r5
   136d8:	f008 fbb0 	bl	1be3c <atomic_or>
}
   136dc:	b003      	add	sp, #12
   136de:	bd30      	pop	{r4, r5, pc}
   136e0:	00020d60 	.word	0x00020d60
   136e4:	0001ead7 	.word	0x0001ead7
   136e8:	0001df08 	.word	0x0001df08
   136ec:	00012f81 	.word	0x00012f81

000136f0 <update_ccc>:
{
   136f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   136f4:	4b32      	ldr	r3, [pc, #200]	; (137c0 <update_ccc+0xd0>)
   136f6:	6881      	ldr	r1, [r0, #8]
{
   136f8:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   136fa:	4299      	cmp	r1, r3
   136fc:	d15c      	bne.n	137b8 <update_ccc+0xc8>
	ccc = attr->user_data;
   136fe:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
   13700:	6816      	ldr	r6, [r2, #0]
				BT_WARN("CCC %p not writable", attr);
   13702:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 137c4 <update_ccc+0xd4>
   13706:	1c7d      	adds	r5, r7, #1
   13708:	f107 0865 	add.w	r8, r7, #101	; 0x65
		if (!cfg->value ||
   1370c:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   13710:	b193      	cbz	r3, 13738 <update_ccc+0x48>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   13712:	462a      	mov	r2, r5
   13714:	4630      	mov	r0, r6
   13716:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1371a:	f007 fe03 	bl	1b324 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1371e:	b158      	cbz	r0, 13738 <update_ccc+0x48>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   13720:	222a      	movs	r2, #42	; 0x2a
   13722:	4621      	mov	r1, r4
   13724:	4630      	mov	r0, r6
   13726:	f008 fd69 	bl	1c1fc <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1372a:	2803      	cmp	r0, #3
   1372c:	d108      	bne.n	13740 <update_ccc+0x50>
				BT_WARN("CCC %p not writable", attr);
   1372e:	4622      	mov	r2, r4
   13730:	2157      	movs	r1, #87	; 0x57
   13732:	4648      	mov	r0, r9
   13734:	f006 f95b 	bl	199ee <printk>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   13738:	350a      	adds	r5, #10
   1373a:	4545      	cmp	r5, r8
   1373c:	d1e6      	bne.n	1370c <update_ccc+0x1c>
   1373e:	e03b      	b.n	137b8 <update_ccc+0xc8>
		gatt_ccc_changed(attr, ccc);
   13740:	4639      	mov	r1, r7
   13742:	4620      	mov	r0, r4
   13744:	f008 faa6 	bl	1bc94 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   13748:	4b1f      	ldr	r3, [pc, #124]	; (137c8 <update_ccc+0xd8>)
   1374a:	429f      	cmp	r7, r3
   1374c:	d134      	bne.n	137b8 <update_ccc+0xc8>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1374e:	7a30      	ldrb	r0, [r6, #8]
   13750:	f106 0188 	add.w	r1, r6, #136	; 0x88
   13754:	f7fe ff70 	bl	12638 <find_sc_cfg>
	if (!cfg) {
   13758:	4604      	mov	r4, r0
   1375a:	b368      	cbz	r0, 137b8 <update_ccc+0xc8>
	if (!(cfg->data.start || cfg->data.end)) {
   1375c:	8902      	ldrh	r2, [r0, #8]
   1375e:	8943      	ldrh	r3, [r0, #10]
   13760:	ea52 0103 	orrs.w	r1, r2, r3
   13764:	d028      	beq.n	137b8 <update_ccc+0xc8>
	index = bt_conn_index(conn);
   13766:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   13768:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1376c:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   13770:	f7fd fca4 	bl	110bc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   13774:	2318      	movs	r3, #24
   13776:	4915      	ldr	r1, [pc, #84]	; (137cc <update_ccc+0xdc>)
   13778:	4a15      	ldr	r2, [pc, #84]	; (137d0 <update_ccc+0xe0>)
   1377a:	fb03 1300 	mla	r3, r3, r0, r1
   1377e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   13780:	4a14      	ldr	r2, [pc, #80]	; (137d4 <update_ccc+0xe4>)
   13782:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   13784:	aa01      	add	r2, sp, #4
   13786:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   13788:	2204      	movs	r2, #4
   1378a:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1378c:	b203      	sxth	r3, r0
   1378e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   13792:	4630      	mov	r0, r6
   13794:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   13798:	f7ff fece 	bl	13538 <bt_gatt_indicate>
   1379c:	b118      	cbz	r0, 137a6 <update_ccc+0xb6>
		BT_ERR("SC restore indication failed");
   1379e:	2145      	movs	r1, #69	; 0x45
   137a0:	480d      	ldr	r0, [pc, #52]	; (137d8 <update_ccc+0xe8>)
   137a2:	f006 f924 	bl	199ee <printk>
	memset(&cfg->data, 0, sizeof(cfg->data));
   137a6:	2204      	movs	r2, #4
   137a8:	2100      	movs	r1, #0
   137aa:	f104 0008 	add.w	r0, r4, #8
   137ae:	f007 fb89 	bl	1aec4 <memset>
		sc_store(cfg);
   137b2:	4620      	mov	r0, r4
   137b4:	f7ff f84a 	bl	1284c <sc_store>
}
   137b8:	2001      	movs	r0, #1
   137ba:	b003      	add	sp, #12
   137bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   137c0:	000126ed 	.word	0x000126ed
   137c4:	00020de4 	.word	0x00020de4
   137c8:	20008488 	.word	0x20008488
   137cc:	2000aa58 	.word	0x2000aa58
   137d0:	0001df08 	.word	0x0001df08
   137d4:	0001c0fb 	.word	0x0001c0fb
   137d8:	00020dfd 	.word	0x00020dfd

000137dc <bt_gatt_is_subscribed>:
{
   137dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   137de:	460c      	mov	r4, r1
   137e0:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   137e2:	4606      	mov	r6, r0
   137e4:	b950      	cbnz	r0, 137fc <bt_gatt_is_subscribed+0x20>
   137e6:	4930      	ldr	r1, [pc, #192]	; (138a8 <bt_gatt_is_subscribed+0xcc>)
   137e8:	4830      	ldr	r0, [pc, #192]	; (138ac <bt_gatt_is_subscribed+0xd0>)
   137ea:	f640 12b5 	movw	r2, #2485	; 0x9b5
   137ee:	f006 f8fe 	bl	199ee <printk>
   137f2:	f640 11b5 	movw	r1, #2485	; 0x9b5
   137f6:	482c      	ldr	r0, [pc, #176]	; (138a8 <bt_gatt_is_subscribed+0xcc>)
   137f8:	f006 fb9f 	bl	19f3a <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   137fc:	b954      	cbnz	r4, 13814 <bt_gatt_is_subscribed+0x38>
   137fe:	492a      	ldr	r1, [pc, #168]	; (138a8 <bt_gatt_is_subscribed+0xcc>)
   13800:	482a      	ldr	r0, [pc, #168]	; (138ac <bt_gatt_is_subscribed+0xd0>)
   13802:	f640 12b6 	movw	r2, #2486	; 0x9b6
   13806:	f006 f8f2 	bl	199ee <printk>
   1380a:	f640 11b6 	movw	r1, #2486	; 0x9b6
   1380e:	4826      	ldr	r0, [pc, #152]	; (138a8 <bt_gatt_is_subscribed+0xcc>)
   13810:	f006 fb93 	bl	19f3a <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   13814:	7ab3      	ldrb	r3, [r6, #10]
   13816:	2b07      	cmp	r3, #7
   13818:	d130      	bne.n	1387c <bt_gatt_is_subscribed+0xa0>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1381a:	2300      	movs	r3, #0
   1381c:	f88d 3004 	strb.w	r3, [sp, #4]
   13820:	f642 0303 	movw	r3, #10243	; 0x2803
   13824:	6820      	ldr	r0, [r4, #0]
   13826:	a901      	add	r1, sp, #4
   13828:	f8ad 3006 	strh.w	r3, [sp, #6]
   1382c:	f007 fb94 	bl	1af58 <bt_uuid_cmp>
   13830:	b940      	cbnz	r0, 13844 <bt_gatt_is_subscribed+0x68>
		if (!(chrc->properties &
   13832:	68e3      	ldr	r3, [r4, #12]
   13834:	799b      	ldrb	r3, [r3, #6]
   13836:	f013 0030 	ands.w	r0, r3, #48	; 0x30
   1383a:	d020      	beq.n	1387e <bt_gatt_is_subscribed+0xa2>
		attr = bt_gatt_attr_next(attr);
   1383c:	4620      	mov	r0, r4
   1383e:	f7ff fdd9 	bl	133f4 <bt_gatt_attr_next>
   13842:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   13844:	2300      	movs	r3, #0
   13846:	6820      	ldr	r0, [r4, #0]
   13848:	f88d 3004 	strb.w	r3, [sp, #4]
   1384c:	f642 1302 	movw	r3, #10498	; 0x2902
   13850:	a901      	add	r1, sp, #4
   13852:	f8ad 3006 	strh.w	r3, [sp, #6]
   13856:	f007 fb7f 	bl	1af58 <bt_uuid_cmp>
   1385a:	b118      	cbz	r0, 13864 <bt_gatt_is_subscribed+0x88>
		attr = bt_gatt_attr_next(attr);
   1385c:	4620      	mov	r0, r4
   1385e:	f7ff fdc9 	bl	133f4 <bt_gatt_attr_next>
   13862:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   13864:	2500      	movs	r5, #0
   13866:	f642 1302 	movw	r3, #10498	; 0x2902
   1386a:	6820      	ldr	r0, [r4, #0]
   1386c:	a901      	add	r1, sp, #4
   1386e:	f88d 5004 	strb.w	r5, [sp, #4]
   13872:	f8ad 3006 	strh.w	r3, [sp, #6]
   13876:	f007 fb6f 	bl	1af58 <bt_uuid_cmp>
   1387a:	b110      	cbz	r0, 13882 <bt_gatt_is_subscribed+0xa6>
		return false;
   1387c:	2000      	movs	r0, #0
}
   1387e:	b003      	add	sp, #12
   13880:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   13882:	68e5      	ldr	r5, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   13884:	1c6c      	adds	r4, r5, #1
   13886:	3565      	adds	r5, #101	; 0x65
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   13888:	4622      	mov	r2, r4
   1388a:	4630      	mov	r0, r6
   1388c:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   13890:	f007 fd48 	bl	1b324 <bt_conn_is_peer_addr_le>
   13894:	b118      	cbz	r0, 1389e <bt_gatt_is_subscribed+0xc2>
   13896:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1389a:	421f      	tst	r7, r3
   1389c:	d1ef      	bne.n	1387e <bt_gatt_is_subscribed+0xa2>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   1389e:	340a      	adds	r4, #10
   138a0:	42ac      	cmp	r4, r5
   138a2:	d1f1      	bne.n	13888 <bt_gatt_is_subscribed+0xac>
   138a4:	e7ea      	b.n	1387c <bt_gatt_is_subscribed+0xa0>
   138a6:	bf00      	nop
   138a8:	00020d60 	.word	0x00020d60
   138ac:	0001ead7 	.word	0x0001ead7

000138b0 <bt_gatt_discover>:
{
   138b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   138b2:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   138b4:	4605      	mov	r5, r0
{
   138b6:	b085      	sub	sp, #20
	__ASSERT(conn, "invalid parameters\n");
   138b8:	b950      	cbnz	r0, 138d0 <bt_gatt_discover+0x20>
   138ba:	4989      	ldr	r1, [pc, #548]	; (13ae0 <bt_gatt_discover+0x230>)
   138bc:	4889      	ldr	r0, [pc, #548]	; (13ae4 <bt_gatt_discover+0x234>)
   138be:	f640 5277 	movw	r2, #3447	; 0xd77
   138c2:	f006 f894 	bl	199ee <printk>
   138c6:	f640 5177 	movw	r1, #3447	; 0xd77
   138ca:	4885      	ldr	r0, [pc, #532]	; (13ae0 <bt_gatt_discover+0x230>)
   138cc:	f006 fb35 	bl	19f3a <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   138d0:	b10c      	cbz	r4, 138d6 <bt_gatt_discover+0x26>
   138d2:	6863      	ldr	r3, [r4, #4]
   138d4:	b953      	cbnz	r3, 138ec <bt_gatt_discover+0x3c>
   138d6:	4982      	ldr	r1, [pc, #520]	; (13ae0 <bt_gatt_discover+0x230>)
   138d8:	4882      	ldr	r0, [pc, #520]	; (13ae4 <bt_gatt_discover+0x234>)
   138da:	f640 5278 	movw	r2, #3448	; 0xd78
   138de:	f006 f886 	bl	199ee <printk>
   138e2:	f640 5178 	movw	r1, #3448	; 0xd78
   138e6:	487e      	ldr	r0, [pc, #504]	; (13ae0 <bt_gatt_discover+0x230>)
   138e8:	f006 fb27 	bl	19f3a <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   138ec:	8923      	ldrh	r3, [r4, #8]
   138ee:	b10b      	cbz	r3, 138f4 <bt_gatt_discover+0x44>
   138f0:	89e3      	ldrh	r3, [r4, #14]
   138f2:	b953      	cbnz	r3, 1390a <bt_gatt_discover+0x5a>
   138f4:	497a      	ldr	r1, [pc, #488]	; (13ae0 <bt_gatt_discover+0x230>)
   138f6:	487b      	ldr	r0, [pc, #492]	; (13ae4 <bt_gatt_discover+0x234>)
   138f8:	f640 5279 	movw	r2, #3449	; 0xd79
   138fc:	f006 f877 	bl	199ee <printk>
   13900:	f640 5179 	movw	r1, #3449	; 0xd79
   13904:	4876      	ldr	r0, [pc, #472]	; (13ae0 <bt_gatt_discover+0x230>)
   13906:	f006 fb18 	bl	19f3a <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   1390a:	8922      	ldrh	r2, [r4, #8]
   1390c:	89e3      	ldrh	r3, [r4, #14]
   1390e:	429a      	cmp	r2, r3
   13910:	d90a      	bls.n	13928 <bt_gatt_discover+0x78>
   13912:	4973      	ldr	r1, [pc, #460]	; (13ae0 <bt_gatt_discover+0x230>)
   13914:	4873      	ldr	r0, [pc, #460]	; (13ae4 <bt_gatt_discover+0x234>)
   13916:	f640 527b 	movw	r2, #3451	; 0xd7b
   1391a:	f006 f868 	bl	199ee <printk>
   1391e:	f640 517b 	movw	r1, #3451	; 0xd7b
   13922:	486f      	ldr	r0, [pc, #444]	; (13ae0 <bt_gatt_discover+0x230>)
   13924:	f006 fb09 	bl	19f3a <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   13928:	7aab      	ldrb	r3, [r5, #10]
   1392a:	2b07      	cmp	r3, #7
   1392c:	f040 80d5 	bne.w	13ada <bt_gatt_discover+0x22a>
	switch (params->type) {
   13930:	7c22      	ldrb	r2, [r4, #16]
   13932:	2a05      	cmp	r2, #5
   13934:	f200 80cc 	bhi.w	13ad0 <bt_gatt_discover+0x220>
   13938:	e8df f002 	tbb	[pc, r2]
   1393c:	64640303 	.word	0x64640303
   13940:	b683      	.short	0xb683
		if (params->uuid) {
   13942:	6823      	ldr	r3, [r4, #0]
   13944:	2b00      	cmp	r3, #0
   13946:	d03e      	beq.n	139c6 <bt_gatt_discover+0x116>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
   13948:	2206      	movs	r2, #6
   1394a:	4628      	mov	r0, r5
   1394c:	4611      	mov	r1, r2
   1394e:	f7fe fa0d 	bl	11d6c <bt_att_create_pdu>
	if (!buf) {
   13952:	4606      	mov	r6, r0
   13954:	b918      	cbnz	r0, 1395e <bt_gatt_discover+0xae>
		return -ENOMEM;
   13956:	f06f 000b 	mvn.w	r0, #11
}
   1395a:	b005      	add	sp, #20
   1395c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1395e:	f100 0708 	add.w	r7, r0, #8
   13962:	2106      	movs	r1, #6
   13964:	4638      	mov	r0, r7
   13966:	f001 f8e5 	bl	14b34 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1396a:	8923      	ldrh	r3, [r4, #8]
	switch (params->uuid->type) {
   1396c:	6821      	ldr	r1, [r4, #0]
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   1396e:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   13970:	89e3      	ldrh	r3, [r4, #14]
   13972:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   13974:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   13976:	2b00      	cmp	r3, #0
   13978:	f642 0301 	movw	r3, #10241	; 0x2801
   1397c:	bf08      	it	eq
   1397e:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   13982:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   13984:	780a      	ldrb	r2, [r1, #0]
   13986:	b15a      	cbz	r2, 139a0 <bt_gatt_discover+0xf0>
   13988:	2a02      	cmp	r2, #2
   1398a:	d016      	beq.n	139ba <bt_gatt_discover+0x10a>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   1398c:	4856      	ldr	r0, [pc, #344]	; (13ae8 <bt_gatt_discover+0x238>)
   1398e:	2145      	movs	r1, #69	; 0x45
   13990:	f006 f82d 	bl	199ee <printk>
		net_buf_unref(buf);
   13994:	4630      	mov	r0, r6
   13996:	f000 ffb7 	bl	14908 <net_buf_unref>
	return -EINVAL;
   1399a:	f06f 0015 	mvn.w	r0, #21
   1399e:	e7dc      	b.n	1395a <bt_gatt_discover+0xaa>
	net_buf_simple_add_le16(&buf->b, val);
   139a0:	4638      	mov	r0, r7
   139a2:	8849      	ldrh	r1, [r1, #2]
   139a4:	f008 fd78 	bl	1c498 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
   139a8:	4623      	mov	r3, r4
   139aa:	4a50      	ldr	r2, [pc, #320]	; (13aec <bt_gatt_discover+0x23c>)
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   139ac:	4631      	mov	r1, r6
   139ae:	4628      	mov	r0, r5
}
   139b0:	b005      	add	sp, #20
   139b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   139b6:	f7ff b811 	b.w	129dc <gatt_send.constprop.0>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   139ba:	2210      	movs	r2, #16
   139bc:	4638      	mov	r0, r7
   139be:	3101      	adds	r1, #1
   139c0:	f008 fd57 	bl	1c472 <net_buf_simple_add_mem>
   139c4:	e7f0      	b.n	139a8 <bt_gatt_discover+0xf8>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
   139c6:	2204      	movs	r2, #4
   139c8:	2110      	movs	r1, #16
   139ca:	4628      	mov	r0, r5
   139cc:	f7fe f9ce 	bl	11d6c <bt_att_create_pdu>
	if (!buf) {
   139d0:	4606      	mov	r6, r0
   139d2:	2800      	cmp	r0, #0
   139d4:	d0bf      	beq.n	13956 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   139d6:	f100 0708 	add.w	r7, r0, #8
   139da:	2104      	movs	r1, #4
   139dc:	4638      	mov	r0, r7
   139de:	f001 f8a9 	bl	14b34 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   139e2:	8923      	ldrh	r3, [r4, #8]
   139e4:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   139e6:	89e3      	ldrh	r3, [r4, #14]
   139e8:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   139ea:	7c23      	ldrb	r3, [r4, #16]
   139ec:	b93b      	cbnz	r3, 139fe <bt_gatt_discover+0x14e>
	net_buf_simple_add_le16(&buf->b, val);
   139ee:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   139f2:	4638      	mov	r0, r7
   139f4:	f008 fd50 	bl	1c498 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
   139f8:	4623      	mov	r3, r4
   139fa:	4a3d      	ldr	r2, [pc, #244]	; (13af0 <bt_gatt_discover+0x240>)
   139fc:	e7d6      	b.n	139ac <bt_gatt_discover+0xfc>
   139fe:	f642 0101 	movw	r1, #10241	; 0x2801
   13a02:	e7f6      	b.n	139f2 <bt_gatt_discover+0x142>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
   13a04:	2204      	movs	r2, #4
   13a06:	2108      	movs	r1, #8
   13a08:	4628      	mov	r0, r5
   13a0a:	f7fe f9af 	bl	11d6c <bt_att_create_pdu>
	if (!buf) {
   13a0e:	4606      	mov	r6, r0
   13a10:	2800      	cmp	r0, #0
   13a12:	d0a0      	beq.n	13956 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   13a14:	f100 0708 	add.w	r7, r0, #8
   13a18:	2104      	movs	r1, #4
   13a1a:	4638      	mov	r0, r7
   13a1c:	f001 f88a 	bl	14b34 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   13a20:	8923      	ldrh	r3, [r4, #8]
   13a22:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   13a24:	89e3      	ldrh	r3, [r4, #14]
   13a26:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   13a28:	7c23      	ldrb	r3, [r4, #16]
	net_buf_simple_add_le16(&buf->b, val);
   13a2a:	4638      	mov	r0, r7
   13a2c:	2b02      	cmp	r3, #2
   13a2e:	bf0c      	ite	eq
   13a30:	f642 0102 	movweq	r1, #10242	; 0x2802
   13a34:	f642 0103 	movwne	r1, #10243	; 0x2803
   13a38:	f008 fd2e 	bl	1c498 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
   13a3c:	4623      	mov	r3, r4
   13a3e:	4a2d      	ldr	r2, [pc, #180]	; (13af4 <bt_gatt_discover+0x244>)
   13a40:	e7b4      	b.n	139ac <bt_gatt_discover+0xfc>
		if (params->uuid &&
   13a42:	6820      	ldr	r0, [r4, #0]
   13a44:	b380      	cbz	r0, 13aa8 <bt_gatt_discover+0x1f8>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   13a46:	2600      	movs	r6, #0
   13a48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   13a4c:	4669      	mov	r1, sp
   13a4e:	f88d 6000 	strb.w	r6, [sp]
   13a52:	f8ad 3002 	strh.w	r3, [sp, #2]
   13a56:	f007 fa7f 	bl	1af58 <bt_uuid_cmp>
		if (params->uuid &&
   13a5a:	2800      	cmp	r0, #0
   13a5c:	d09d      	beq.n	1399a <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   13a5e:	f642 0301 	movw	r3, #10241	; 0x2801
   13a62:	6820      	ldr	r0, [r4, #0]
   13a64:	a901      	add	r1, sp, #4
   13a66:	f88d 6004 	strb.w	r6, [sp, #4]
   13a6a:	f8ad 3006 	strh.w	r3, [sp, #6]
   13a6e:	f007 fa73 	bl	1af58 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   13a72:	2800      	cmp	r0, #0
   13a74:	d091      	beq.n	1399a <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   13a76:	f642 0302 	movw	r3, #10242	; 0x2802
   13a7a:	6820      	ldr	r0, [r4, #0]
   13a7c:	a902      	add	r1, sp, #8
   13a7e:	f88d 6008 	strb.w	r6, [sp, #8]
   13a82:	f8ad 300a 	strh.w	r3, [sp, #10]
   13a86:	f007 fa67 	bl	1af58 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   13a8a:	2800      	cmp	r0, #0
   13a8c:	d085      	beq.n	1399a <bt_gatt_discover+0xea>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   13a8e:	f642 0303 	movw	r3, #10243	; 0x2803
   13a92:	6820      	ldr	r0, [r4, #0]
   13a94:	a903      	add	r1, sp, #12
   13a96:	f88d 600c 	strb.w	r6, [sp, #12]
   13a9a:	f8ad 300e 	strh.w	r3, [sp, #14]
   13a9e:	f007 fa5b 	bl	1af58 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   13aa2:	2800      	cmp	r0, #0
   13aa4:	f43f af79 	beq.w	1399a <bt_gatt_discover+0xea>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
   13aa8:	2204      	movs	r2, #4
   13aaa:	4628      	mov	r0, r5
   13aac:	4611      	mov	r1, r2
   13aae:	f7fe f95d 	bl	11d6c <bt_att_create_pdu>
	if (!buf) {
   13ab2:	4606      	mov	r6, r0
   13ab4:	2800      	cmp	r0, #0
   13ab6:	f43f af4e 	beq.w	13956 <bt_gatt_discover+0xa6>
	return net_buf_simple_add(&buf->b, len);
   13aba:	2104      	movs	r1, #4
   13abc:	3008      	adds	r0, #8
   13abe:	f001 f839 	bl	14b34 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   13ac2:	8923      	ldrh	r3, [r4, #8]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   13ac4:	4a0c      	ldr	r2, [pc, #48]	; (13af8 <bt_gatt_discover+0x248>)
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   13ac6:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   13ac8:	89e3      	ldrh	r3, [r4, #14]
   13aca:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
   13acc:	4623      	mov	r3, r4
   13ace:	e76d      	b.n	139ac <bt_gatt_discover+0xfc>
		BT_ERR("Invalid discovery type: %u", params->type);
   13ad0:	2145      	movs	r1, #69	; 0x45
   13ad2:	480a      	ldr	r0, [pc, #40]	; (13afc <bt_gatt_discover+0x24c>)
   13ad4:	f005 ff8b 	bl	199ee <printk>
   13ad8:	e75f      	b.n	1399a <bt_gatt_discover+0xea>
		return -ENOTCONN;
   13ada:	f06f 0038 	mvn.w	r0, #56	; 0x38
   13ade:	e73c      	b.n	1395a <bt_gatt_discover+0xaa>
   13ae0:	00020d60 	.word	0x00020d60
   13ae4:	0001ead7 	.word	0x0001ead7
   13ae8:	00020e1f 	.word	0x00020e1f
   13aec:	0001c27d 	.word	0x0001c27d
   13af0:	00013b01 	.word	0x00013b01
   13af4:	00013c09 	.word	0x00013c09
   13af8:	00013eb9 	.word	0x00013eb9
   13afc:	00020e39 	.word	0x00020e39

00013b00 <gatt_read_group_rsp>:
{
   13b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b04:	b08f      	sub	sp, #60	; 0x3c
   13b06:	4681      	mov	r9, r0
   13b08:	4617      	mov	r7, r2
   13b0a:	9d18      	ldr	r5, [sp, #96]	; 0x60
	if (err) {
   13b0c:	b131      	cbz	r1, 13b1c <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   13b0e:	462a      	mov	r2, r5
   13b10:	2100      	movs	r1, #0
   13b12:	686b      	ldr	r3, [r5, #4]
}
   13b14:	b00f      	add	sp, #60	; 0x3c
   13b16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   13b1a:	4718      	bx	r3
	switch (rsp->len) {
   13b1c:	7812      	ldrb	r2, [r2, #0]
   13b1e:	2a06      	cmp	r2, #6
   13b20:	d00d      	beq.n	13b3e <gatt_read_group_rsp+0x3e>
   13b22:	2a14      	cmp	r2, #20
   13b24:	d021      	beq.n	13b6a <gatt_read_group_rsp+0x6a>
		BT_ERR("Invalid data len %u", rsp->len);
   13b26:	2145      	movs	r1, #69	; 0x45
   13b28:	4836      	ldr	r0, [pc, #216]	; (13c04 <gatt_read_group_rsp+0x104>)
   13b2a:	f005 ff60 	bl	199ee <printk>
	params->func(conn, NULL, params);
   13b2e:	462a      	mov	r2, r5
   13b30:	2100      	movs	r1, #0
   13b32:	4648      	mov	r0, r9
   13b34:	686b      	ldr	r3, [r5, #4]
   13b36:	4798      	blx	r3
}
   13b38:	b00f      	add	sp, #60	; 0x3c
   13b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		u.uuid.type = BT_UUID_TYPE_16;
   13b3e:	f88d 1010 	strb.w	r1, [sp, #16]
	uint16_t start_handle, end_handle = 0U;
   13b42:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   13b44:	3b01      	subs	r3, #1
   13b46:	b29c      	uxth	r4, r3
   13b48:	f107 0801 	add.w	r8, r7, #1
   13b4c:	783b      	ldrb	r3, [r7, #0]
   13b4e:	42a3      	cmp	r3, r4
   13b50:	d90f      	bls.n	13b72 <gatt_read_group_rsp+0x72>
	if (length == 0U && end_handle) {
   13b52:	2c00      	cmp	r4, #0
   13b54:	d1eb      	bne.n	13b2e <gatt_read_group_rsp+0x2e>
   13b56:	2e00      	cmp	r6, #0
   13b58:	d0e9      	beq.n	13b2e <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   13b5a:	462a      	mov	r2, r5
   13b5c:	4631      	mov	r1, r6
   13b5e:	4648      	mov	r0, r9
}
   13b60:	b00f      	add	sp, #60	; 0x3c
   13b62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   13b66:	f008 bb6c 	b.w	1c242 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   13b6a:	2202      	movs	r2, #2
   13b6c:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   13b70:	e7e7      	b.n	13b42 <gatt_read_group_rsp+0x42>
		struct bt_gatt_attr attr = {};
   13b72:	2214      	movs	r2, #20
   13b74:	2100      	movs	r1, #0
   13b76:	a809      	add	r0, sp, #36	; 0x24
   13b78:	f007 f9a4 	bl	1aec4 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   13b7c:	f8b8 a000 	ldrh.w	sl, [r8]
   13b80:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   13b84:	2b00      	cmp	r3, #0
   13b86:	d0d2      	beq.n	13b2e <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   13b88:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   13b8c:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   13b90:	2e00      	cmp	r6, #0
   13b92:	d0cc      	beq.n	13b2e <gatt_read_group_rsp+0x2e>
   13b94:	42b3      	cmp	r3, r6
   13b96:	d8ca      	bhi.n	13b2e <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   13b98:	f89d 3010 	ldrb.w	r3, [sp, #16]
   13b9c:	b323      	cbz	r3, 13be8 <gatt_read_group_rsp+0xe8>
   13b9e:	2b02      	cmp	r3, #2
   13ba0:	d02a      	beq.n	13bf8 <gatt_read_group_rsp+0xf8>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   13ba2:	f04f 0300 	mov.w	r3, #0
   13ba6:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   13baa:	7c2b      	ldrb	r3, [r5, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13bac:	462a      	mov	r2, r5
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   13bae:	2b00      	cmp	r3, #0
   13bb0:	f642 0301 	movw	r3, #10241	; 0x2801
   13bb4:	bf08      	it	eq
   13bb6:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   13bba:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   13bbe:	ab04      	add	r3, sp, #16
   13bc0:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   13bc2:	ab01      	add	r3, sp, #4
   13bc4:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   13bc6:	ab02      	add	r3, sp, #8
   13bc8:	930c      	str	r3, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13bca:	4648      	mov	r0, r9
   13bcc:	686b      	ldr	r3, [r5, #4]
		value.end_handle = end_handle;
   13bce:	f8ad b00c 	strh.w	fp, [sp, #12]
		attr.handle = start_handle;
   13bd2:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13bd6:	a909      	add	r1, sp, #36	; 0x24
   13bd8:	4798      	blx	r3
   13bda:	2800      	cmp	r0, #0
   13bdc:	d0ac      	beq.n	13b38 <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   13bde:	783a      	ldrb	r2, [r7, #0]
   13be0:	1aa4      	subs	r4, r4, r2
   13be2:	b2a4      	uxth	r4, r4
   13be4:	4490      	add	r8, r2
   13be6:	e7b1      	b.n	13b4c <gatt_read_group_rsp+0x4c>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   13be8:	2202      	movs	r2, #2
   13bea:	f108 0104 	add.w	r1, r8, #4
   13bee:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   13bf2:	f007 f93c 	bl	1ae6e <memcpy>
			break;
   13bf6:	e7d4      	b.n	13ba2 <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   13bf8:	2210      	movs	r2, #16
   13bfa:	f108 0104 	add.w	r1, r8, #4
   13bfe:	f10d 0011 	add.w	r0, sp, #17
   13c02:	e7f6      	b.n	13bf2 <gatt_read_group_rsp+0xf2>
   13c04:	00020e59 	.word	0x00020e59

00013c08 <gatt_read_type_rsp>:
{
   13c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c0c:	b091      	sub	sp, #68	; 0x44
   13c0e:	4607      	mov	r7, r0
   13c10:	4690      	mov	r8, r2
   13c12:	9d1a      	ldr	r5, [sp, #104]	; 0x68
	if (err) {
   13c14:	b131      	cbz	r1, 13c24 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   13c16:	462a      	mov	r2, r5
   13c18:	2100      	movs	r1, #0
   13c1a:	686b      	ldr	r3, [r5, #4]
}
   13c1c:	b011      	add	sp, #68	; 0x44
   13c1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   13c22:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   13c24:	7c28      	ldrb	r0, [r5, #16]
	switch (rsp->len) {
   13c26:	7812      	ldrb	r2, [r2, #0]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   13c28:	2802      	cmp	r0, #2
   13c2a:	f040 8089 	bne.w	13d40 <gatt_read_type_rsp+0x138>
	switch (rsp->len) {
   13c2e:	2a06      	cmp	r2, #6
   13c30:	d01c      	beq.n	13c6c <gatt_read_type_rsp+0x64>
   13c32:	2a08      	cmp	r2, #8
   13c34:	f040 8088 	bne.w	13d48 <gatt_read_type_rsp+0x140>
		u.uuid.type = BT_UUID_TYPE_16;
   13c38:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   13c3c:	2600      	movs	r6, #0
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13c3e:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   13c40:	1e5c      	subs	r4, r3, #1
   13c42:	b2a4      	uxth	r4, r4
   13c44:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
   13c48:	f10d 0a18 	add.w	sl, sp, #24
	for (length--, pdu = rsp->data; length >= rsp->len;
   13c4c:	f898 3000 	ldrb.w	r3, [r8]
   13c50:	42a3      	cmp	r3, r4
   13c52:	d90e      	bls.n	13c72 <gatt_read_type_rsp+0x6a>
	if (length == 0U && handle) {
   13c54:	2c00      	cmp	r4, #0
   13c56:	d17b      	bne.n	13d50 <gatt_read_type_rsp+0x148>
   13c58:	2e00      	cmp	r6, #0
   13c5a:	d079      	beq.n	13d50 <gatt_read_type_rsp+0x148>
	gatt_discover_next(conn, handle, params);
   13c5c:	462a      	mov	r2, r5
   13c5e:	4631      	mov	r1, r6
   13c60:	4638      	mov	r0, r7
}
   13c62:	b011      	add	sp, #68	; 0x44
   13c64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   13c68:	f008 baeb 	b.w	1c242 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
   13c6c:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
   13c70:	e7e4      	b.n	13c3c <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
   13c72:	f8b9 3000 	ldrh.w	r3, [r9]
   13c76:	b29e      	uxth	r6, r3
		if (!handle) {
   13c78:	2e00      	cmp	r6, #0
   13c7a:	d069      	beq.n	13d50 <gatt_read_type_rsp+0x148>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   13c7c:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   13c80:	f8ad 2014 	strh.w	r2, [sp, #20]
   13c84:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   13c86:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   13c8a:	b291      	uxth	r1, r2
   13c8c:	f8ad 2016 	strh.w	r2, [sp, #22]
		switch (u.uuid.type) {
   13c90:	f89d 2018 	ldrb.w	r2, [sp, #24]
   13c94:	b182      	cbz	r2, 13cb8 <gatt_read_type_rsp+0xb0>
   13c96:	2a02      	cmp	r2, #2
   13c98:	d019      	beq.n	13cce <gatt_read_type_rsp+0xc6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13c9a:	6829      	ldr	r1, [r5, #0]
   13c9c:	2900      	cmp	r1, #0
   13c9e:	d036      	beq.n	13d0e <gatt_read_type_rsp+0x106>
   13ca0:	4650      	mov	r0, sl
   13ca2:	9301      	str	r3, [sp, #4]
   13ca4:	f007 f958 	bl	1af58 <bt_uuid_cmp>
   13ca8:	9b01      	ldr	r3, [sp, #4]
   13caa:	b380      	cbz	r0, 13d0e <gatt_read_type_rsp+0x106>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   13cac:	f898 2000 	ldrb.w	r2, [r8]
   13cb0:	1aa4      	subs	r4, r4, r2
   13cb2:	b2a4      	uxth	r4, r4
   13cb4:	4491      	add	r9, r2
   13cb6:	e7c9      	b.n	13c4c <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
   13cb8:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   13cbc:	f899 2006 	ldrb.w	r2, [r9, #6]
   13cc0:	f899 1007 	ldrb.w	r1, [r9, #7]
   13cc4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   13cc8:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
   13ccc:	e7e5      	b.n	13c9a <gatt_read_type_rsp+0x92>
			params->_included.start_handle = value.start_handle;
   13cce:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   13cd0:	81a9      	strh	r1, [r5, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   13cd2:	4638      	mov	r0, r7
   13cd4:	210a      	movs	r1, #10
			params->_included.attr_handle = handle;
   13cd6:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
   13cd8:	9201      	str	r2, [sp, #4]
   13cda:	f7fe f847 	bl	11d6c <bt_att_create_pdu>
	if (!buf) {
   13cde:	4604      	mov	r4, r0
   13ce0:	b190      	cbz	r0, 13d08 <gatt_read_type_rsp+0x100>
   13ce2:	9a01      	ldr	r2, [sp, #4]
   13ce4:	3008      	adds	r0, #8
   13ce6:	4611      	mov	r1, r2
   13ce8:	f000 ff24 	bl	14b34 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   13cec:	896b      	ldrh	r3, [r5, #10]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   13cee:	4621      	mov	r1, r4
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   13cf0:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
   13cf2:	4a49      	ldr	r2, [pc, #292]	; (13e18 <gatt_read_type_rsp+0x210>)
   13cf4:	462b      	mov	r3, r5
   13cf6:	4638      	mov	r0, r7
   13cf8:	f7fe fe70 	bl	129dc <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
   13cfc:	b286      	uxth	r6, r0
	if (!handle) {
   13cfe:	2e00      	cmp	r6, #0
   13d00:	d1ac      	bne.n	13c5c <gatt_read_type_rsp+0x54>
}
   13d02:	b011      	add	sp, #68	; 0x44
   13d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
   13d08:	f06f 000b 	mvn.w	r0, #11
   13d0c:	e7f6      	b.n	13cfc <gatt_read_type_rsp+0xf4>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13d0e:	f642 0202 	movw	r2, #10242	; 0x2802
   13d12:	f8ad 200e 	strh.w	r2, [sp, #14]
   13d16:	aa03      	add	r2, sp, #12
   13d18:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
   13d1c:	aa04      	add	r2, sp, #16
   13d1e:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
   13d20:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13d24:	462a      	mov	r2, r5
   13d26:	4638      	mov	r0, r7
   13d28:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13d2a:	f88d b00c 	strb.w	fp, [sp, #12]
   13d2e:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   13d32:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13d36:	a90b      	add	r1, sp, #44	; 0x2c
   13d38:	4798      	blx	r3
   13d3a:	2800      	cmp	r0, #0
   13d3c:	d1b6      	bne.n	13cac <gatt_read_type_rsp+0xa4>
   13d3e:	e7e0      	b.n	13d02 <gatt_read_type_rsp+0xfa>
	switch (rsp->len) {
   13d40:	2a07      	cmp	r2, #7
   13d42:	d00b      	beq.n	13d5c <gatt_read_type_rsp+0x154>
   13d44:	2a15      	cmp	r2, #21
   13d46:	d02e      	beq.n	13da6 <gatt_read_type_rsp+0x19e>
		BT_ERR("Invalid data len %u", rsp->len);
   13d48:	2145      	movs	r1, #69	; 0x45
   13d4a:	4834      	ldr	r0, [pc, #208]	; (13e1c <gatt_read_type_rsp+0x214>)
   13d4c:	f005 fe4f 	bl	199ee <printk>
	params->func(conn, NULL, params);
   13d50:	462a      	mov	r2, r5
   13d52:	2100      	movs	r1, #0
   13d54:	4638      	mov	r0, r7
   13d56:	686b      	ldr	r3, [r5, #4]
   13d58:	4798      	blx	r3
	if (!handle) {
   13d5a:	e7d2      	b.n	13d02 <gatt_read_type_rsp+0xfa>
		u.uuid.type = BT_UUID_TYPE_16;
   13d5c:	f88d 1018 	strb.w	r1, [sp, #24]
	uint16_t handle = 0U;
   13d60:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   13d62:	1e5c      	subs	r4, r3, #1
   13d64:	b2a4      	uxth	r4, r4
   13d66:	f108 0901 	add.w	r9, r8, #1
   13d6a:	f10d 0a18 	add.w	sl, sp, #24
   13d6e:	f898 3000 	ldrb.w	r3, [r8]
   13d72:	42a3      	cmp	r3, r4
   13d74:	f63f af6e 	bhi.w	13c54 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
   13d78:	f8b9 b000 	ldrh.w	fp, [r9]
   13d7c:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   13d80:	2e00      	cmp	r6, #0
   13d82:	d0e5      	beq.n	13d50 <gatt_read_type_rsp+0x148>
		switch (u.uuid.type) {
   13d84:	f89d 3018 	ldrb.w	r3, [sp, #24]
   13d88:	b18b      	cbz	r3, 13dae <gatt_read_type_rsp+0x1a6>
   13d8a:	2b02      	cmp	r3, #2
   13d8c:	d018      	beq.n	13dc0 <gatt_read_type_rsp+0x1b8>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13d8e:	6829      	ldr	r1, [r5, #0]
   13d90:	b1f1      	cbz	r1, 13dd0 <gatt_read_type_rsp+0x1c8>
   13d92:	4650      	mov	r0, sl
   13d94:	f007 f8e0 	bl	1af58 <bt_uuid_cmp>
   13d98:	b1d0      	cbz	r0, 13dd0 <gatt_read_type_rsp+0x1c8>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   13d9a:	f898 2000 	ldrb.w	r2, [r8]
   13d9e:	1aa4      	subs	r4, r4, r2
   13da0:	b2a4      	uxth	r4, r4
   13da2:	4491      	add	r9, r2
   13da4:	e7e3      	b.n	13d6e <gatt_read_type_rsp+0x166>
		u.uuid.type = BT_UUID_TYPE_128;
   13da6:	2202      	movs	r2, #2
   13da8:	f88d 2018 	strb.w	r2, [sp, #24]
		break;
   13dac:	e7d8      	b.n	13d60 <gatt_read_type_rsp+0x158>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   13dae:	f899 3005 	ldrb.w	r3, [r9, #5]
   13db2:	f899 2006 	ldrb.w	r2, [r9, #6]
   13db6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13dba:	f8ad 301a 	strh.w	r3, [sp, #26]
			break;
   13dbe:	e7e6      	b.n	13d8e <gatt_read_type_rsp+0x186>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   13dc0:	2210      	movs	r2, #16
   13dc2:	f109 0105 	add.w	r1, r9, #5
   13dc6:	f10d 0019 	add.w	r0, sp, #25
   13dca:	f007 f850 	bl	1ae6e <memcpy>
			break;
   13dce:	e7de      	b.n	13d8e <gatt_read_type_rsp+0x186>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   13dd0:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   13dd4:	f899 3002 	ldrb.w	r3, [r9, #2]
   13dd8:	f8ad 2014 	strh.w	r2, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13ddc:	f642 0203 	movw	r2, #10243	; 0x2803
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   13de0:	f88d 3016 	strb.w	r3, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13de4:	2300      	movs	r3, #0
   13de6:	f8ad 200e 	strh.w	r2, [sp, #14]
   13dea:	aa03      	add	r2, sp, #12
   13dec:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
   13df0:	aa04      	add	r2, sp, #16
   13df2:	f88d 300c 	strb.w	r3, [sp, #12]
   13df6:	930d      	str	r3, [sp, #52]	; 0x34
   13df8:	920e      	str	r2, [sp, #56]	; 0x38
   13dfa:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13dfe:	462a      	mov	r2, r5
   13e00:	4638      	mov	r0, r7
   13e02:	686b      	ldr	r3, [r5, #4]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   13e04:	f8cd a010 	str.w	sl, [sp, #16]
		attr.handle = handle;
   13e08:	f8ad b03c 	strh.w	fp, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13e0c:	a90b      	add	r1, sp, #44	; 0x2c
   13e0e:	4798      	blx	r3
   13e10:	2800      	cmp	r0, #0
   13e12:	d1c2      	bne.n	13d9a <gatt_read_type_rsp+0x192>
   13e14:	e775      	b.n	13d02 <gatt_read_type_rsp+0xfa>
   13e16:	bf00      	nop
   13e18:	00013e21 	.word	0x00013e21
   13e1c:	00020e59 	.word	0x00020e59

00013e20 <read_included_uuid_cb>:
{
   13e20:	b570      	push	{r4, r5, r6, lr}
	if (length != 16U) {
   13e22:	2b10      	cmp	r3, #16
{
   13e24:	b08e      	sub	sp, #56	; 0x38
   13e26:	4611      	mov	r1, r2
   13e28:	4605      	mov	r5, r0
   13e2a:	461a      	mov	r2, r3
   13e2c:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (length != 16U) {
   13e2e:	d00b      	beq.n	13e48 <read_included_uuid_cb+0x28>
		BT_ERR("Invalid data len %u", length);
   13e30:	2145      	movs	r1, #69	; 0x45
   13e32:	4820      	ldr	r0, [pc, #128]	; (13eb4 <read_included_uuid_cb+0x94>)
   13e34:	f005 fddb 	bl	199ee <printk>
		params->func(conn, NULL, params);
   13e38:	4622      	mov	r2, r4
   13e3a:	2100      	movs	r1, #0
   13e3c:	4628      	mov	r0, r5
   13e3e:	6863      	ldr	r3, [r4, #4]
}
   13e40:	b00e      	add	sp, #56	; 0x38
   13e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
   13e46:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   13e48:	8963      	ldrh	r3, [r4, #10]
	value.uuid = &u.uuid;
   13e4a:	ae04      	add	r6, sp, #16
	value.start_handle = params->_included.start_handle;
   13e4c:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   13e50:	89a3      	ldrh	r3, [r4, #12]
	memcpy(u.u128.val, pdu, length);
   13e52:	f10d 0011 	add.w	r0, sp, #17
	value.end_handle = params->_included.end_handle;
   13e56:	f8ad 300e 	strh.w	r3, [sp, #14]
	u.uuid.type = BT_UUID_TYPE_128;
   13e5a:	2302      	movs	r3, #2
	value.uuid = &u.uuid;
   13e5c:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   13e5e:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   13e62:	f007 f804 	bl	1ae6e <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13e66:	6821      	ldr	r1, [r4, #0]
   13e68:	b9c9      	cbnz	r1, 13e9e <read_included_uuid_cb+0x7e>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13e6a:	f642 0202 	movw	r2, #10242	; 0x2802
   13e6e:	2300      	movs	r3, #0
   13e70:	f8ad 2006 	strh.w	r2, [sp, #6]
   13e74:	aa01      	add	r2, sp, #4
   13e76:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   13e7a:	f88d 3004 	strb.w	r3, [sp, #4]
   13e7e:	930b      	str	r3, [sp, #44]	; 0x2c
   13e80:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   13e84:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13e86:	aa02      	add	r2, sp, #8
   13e88:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   13e8a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13e8e:	4622      	mov	r2, r4
   13e90:	4628      	mov	r0, r5
   13e92:	6863      	ldr	r3, [r4, #4]
   13e94:	a909      	add	r1, sp, #36	; 0x24
   13e96:	4798      	blx	r3
   13e98:	b930      	cbnz	r0, 13ea8 <read_included_uuid_cb+0x88>
}
   13e9a:	b00e      	add	sp, #56	; 0x38
   13e9c:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13e9e:	4630      	mov	r0, r6
   13ea0:	f007 f85a 	bl	1af58 <bt_uuid_cmp>
   13ea4:	2800      	cmp	r0, #0
   13ea6:	d0e0      	beq.n	13e6a <read_included_uuid_cb+0x4a>
	gatt_discover_next(conn, params->start_handle, params);
   13ea8:	4622      	mov	r2, r4
   13eaa:	4628      	mov	r0, r5
   13eac:	8921      	ldrh	r1, [r4, #8]
   13eae:	f008 f9c8 	bl	1c242 <gatt_discover_next>
	return;
   13eb2:	e7f2      	b.n	13e9a <read_included_uuid_cb+0x7a>
   13eb4:	00020e59 	.word	0x00020e59

00013eb8 <gatt_find_info_rsp>:
{
   13eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ebc:	b08f      	sub	sp, #60	; 0x3c
   13ebe:	4680      	mov	r8, r0
   13ec0:	4614      	mov	r4, r2
   13ec2:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   13ec4:	b941      	cbnz	r1, 13ed8 <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   13ec6:	7812      	ldrb	r2, [r2, #0]
   13ec8:	2a01      	cmp	r2, #1
   13eca:	d00b      	beq.n	13ee4 <gatt_find_info_rsp+0x2c>
   13ecc:	2a02      	cmp	r2, #2
   13ece:	d022      	beq.n	13f16 <gatt_find_info_rsp+0x5e>
		BT_ERR("Invalid format %u", rsp->format);
   13ed0:	2145      	movs	r1, #69	; 0x45
   13ed2:	484b      	ldr	r0, [pc, #300]	; (14000 <gatt_find_info_rsp+0x148>)
   13ed4:	f005 fd8b 	bl	199ee <printk>
	params->func(conn, NULL, params);
   13ed8:	4632      	mov	r2, r6
   13eda:	2100      	movs	r1, #0
   13edc:	4640      	mov	r0, r8
   13ede:	6873      	ldr	r3, [r6, #4]
   13ee0:	4798      	blx	r3
   13ee2:	e08a      	b.n	13ffa <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i16);
   13ee4:	f04f 0a04 	mov.w	sl, #4
		u.uuid.type = BT_UUID_TYPE_16;
   13ee8:	f88d 1010 	strb.w	r1, [sp, #16]
	length--;
   13eec:	3b01      	subs	r3, #1
   13eee:	b29b      	uxth	r3, r3
	if (length < len) {
   13ef0:	4553      	cmp	r3, sl
   13ef2:	d3f1      	bcc.n	13ed8 <gatt_find_info_rsp+0x20>
	bool skip = false;
   13ef4:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   13ef8:	fbb3 f3fa 	udiv	r3, r3, sl
	uint16_t handle = 0U;
   13efc:	46cb      	mov	fp, r9
			skip = false;
   13efe:	464d      	mov	r5, r9
	for (i = length / len, pdu = rsp->info; i != 0;
   13f00:	9300      	str	r3, [sp, #0]
   13f02:	3401      	adds	r4, #1
   13f04:	af04      	add	r7, sp, #16
   13f06:	9b00      	ldr	r3, [sp, #0]
   13f08:	b953      	cbnz	r3, 13f20 <gatt_find_info_rsp+0x68>
	gatt_discover_next(conn, handle, params);
   13f0a:	4632      	mov	r2, r6
   13f0c:	4659      	mov	r1, fp
   13f0e:	4640      	mov	r0, r8
   13f10:	f008 f997 	bl	1c242 <gatt_discover_next>
	return;
   13f14:	e071      	b.n	13ffa <gatt_find_info_rsp+0x142>
		len = sizeof(*info.i128);
   13f16:	f04f 0a12 	mov.w	sl, #18
		u.uuid.type = BT_UUID_TYPE_128;
   13f1a:	f88d 2010 	strb.w	r2, [sp, #16]
		break;
   13f1e:	e7e5      	b.n	13eec <gatt_find_info_rsp+0x34>
		handle = sys_le16_to_cpu(info.i16->handle);
   13f20:	8823      	ldrh	r3, [r4, #0]
   13f22:	9301      	str	r3, [sp, #4]
   13f24:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
   13f28:	f1b9 0f00 	cmp.w	r9, #0
   13f2c:	d151      	bne.n	13fd2 <gatt_find_info_rsp+0x11a>
		switch (u.uuid.type) {
   13f2e:	f89d 3010 	ldrb.w	r3, [sp, #16]
   13f32:	2b00      	cmp	r3, #0
   13f34:	d03a      	beq.n	13fac <gatt_find_info_rsp+0xf4>
   13f36:	2b02      	cmp	r3, #2
   13f38:	d03f      	beq.n	13fba <gatt_find_info_rsp+0x102>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13f3a:	6831      	ldr	r1, [r6, #0]
   13f3c:	2900      	cmp	r1, #0
   13f3e:	d143      	bne.n	13fc8 <gatt_find_info_rsp+0x110>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   13f40:	7c33      	ldrb	r3, [r6, #16]
   13f42:	2b04      	cmp	r3, #4
   13f44:	d148      	bne.n	13fd8 <gatt_find_info_rsp+0x120>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   13f46:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   13f4a:	4638      	mov	r0, r7
   13f4c:	a902      	add	r1, sp, #8
   13f4e:	f88d 5008 	strb.w	r5, [sp, #8]
   13f52:	f8ad 300a 	strh.w	r3, [sp, #10]
   13f56:	f006 ffff 	bl	1af58 <bt_uuid_cmp>
   13f5a:	b310      	cbz	r0, 13fa2 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   13f5c:	f642 0301 	movw	r3, #10241	; 0x2801
   13f60:	4638      	mov	r0, r7
   13f62:	a903      	add	r1, sp, #12
   13f64:	f88d 500c 	strb.w	r5, [sp, #12]
   13f68:	f8ad 300e 	strh.w	r3, [sp, #14]
   13f6c:	f006 fff4 	bl	1af58 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   13f70:	b1b8      	cbz	r0, 13fa2 <gatt_find_info_rsp+0xea>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   13f72:	f642 0302 	movw	r3, #10242	; 0x2802
   13f76:	4638      	mov	r0, r7
   13f78:	a909      	add	r1, sp, #36	; 0x24
   13f7a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   13f7e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   13f82:	f006 ffe9 	bl	1af58 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   13f86:	b160      	cbz	r0, 13fa2 <gatt_find_info_rsp+0xea>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   13f88:	f642 0303 	movw	r3, #10243	; 0x2803
   13f8c:	4638      	mov	r0, r7
   13f8e:	a909      	add	r1, sp, #36	; 0x24
   13f90:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   13f94:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   13f98:	f006 ffde 	bl	1af58 <bt_uuid_cmp>
   13f9c:	b9e0      	cbnz	r0, 13fd8 <gatt_find_info_rsp+0x120>
				skip = true;
   13f9e:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   13fa2:	9b00      	ldr	r3, [sp, #0]
   13fa4:	4454      	add	r4, sl
   13fa6:	3b01      	subs	r3, #1
   13fa8:	9300      	str	r3, [sp, #0]
   13faa:	e7ac      	b.n	13f06 <gatt_find_info_rsp+0x4e>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   13fac:	78a3      	ldrb	r3, [r4, #2]
   13fae:	78e2      	ldrb	r2, [r4, #3]
   13fb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13fb4:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   13fb8:	e7bf      	b.n	13f3a <gatt_find_info_rsp+0x82>
			memcpy(u.u128.val, info.i128->uuid, 16);
   13fba:	2210      	movs	r2, #16
   13fbc:	1ca1      	adds	r1, r4, #2
   13fbe:	f10d 0011 	add.w	r0, sp, #17
   13fc2:	f006 ff54 	bl	1ae6e <memcpy>
			break;
   13fc6:	e7b8      	b.n	13f3a <gatt_find_info_rsp+0x82>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   13fc8:	4638      	mov	r0, r7
   13fca:	f006 ffc5 	bl	1af58 <bt_uuid_cmp>
   13fce:	2800      	cmp	r0, #0
   13fd0:	d0b6      	beq.n	13f40 <gatt_find_info_rsp+0x88>
			skip = false;
   13fd2:	f04f 0900 	mov.w	r9, #0
   13fd6:	e7e4      	b.n	13fa2 <gatt_find_info_rsp+0xea>
		attr.handle = handle;
   13fd8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13fdc:	4632      	mov	r2, r6
		attr.handle = handle;
   13fde:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13fe2:	4640      	mov	r0, r8
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13fe4:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   13fe8:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13fec:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   13fee:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   13ff2:	a909      	add	r1, sp, #36	; 0x24
   13ff4:	4798      	blx	r3
   13ff6:	2800      	cmp	r0, #0
   13ff8:	d1d3      	bne.n	13fa2 <gatt_find_info_rsp+0xea>
}
   13ffa:	b00f      	add	sp, #60	; 0x3c
   13ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14000:	00020e72 	.word	0x00020e72

00014004 <bt_gatt_subscribe>:
{
   14004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14006:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   14008:	4606      	mov	r6, r0
   1400a:	b950      	cbnz	r0, 14022 <bt_gatt_subscribe+0x1e>
   1400c:	4944      	ldr	r1, [pc, #272]	; (14120 <bt_gatt_subscribe+0x11c>)
   1400e:	4845      	ldr	r0, [pc, #276]	; (14124 <bt_gatt_subscribe+0x120>)
   14010:	f640 72fb 	movw	r2, #4091	; 0xffb
   14014:	f005 fceb 	bl	199ee <printk>
   14018:	f640 71fb 	movw	r1, #4091	; 0xffb
   1401c:	4840      	ldr	r0, [pc, #256]	; (14120 <bt_gatt_subscribe+0x11c>)
   1401e:	f005 ff8c 	bl	19f3a <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   14022:	b10d      	cbz	r5, 14028 <bt_gatt_subscribe+0x24>
   14024:	682b      	ldr	r3, [r5, #0]
   14026:	b953      	cbnz	r3, 1403e <bt_gatt_subscribe+0x3a>
   14028:	493d      	ldr	r1, [pc, #244]	; (14120 <bt_gatt_subscribe+0x11c>)
   1402a:	483e      	ldr	r0, [pc, #248]	; (14124 <bt_gatt_subscribe+0x120>)
   1402c:	f640 72fc 	movw	r2, #4092	; 0xffc
   14030:	f005 fcdd 	bl	199ee <printk>
   14034:	f640 71fc 	movw	r1, #4092	; 0xffc
   14038:	4839      	ldr	r0, [pc, #228]	; (14120 <bt_gatt_subscribe+0x11c>)
   1403a:	f005 ff7e 	bl	19f3a <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   1403e:	89ab      	ldrh	r3, [r5, #12]
   14040:	b953      	cbnz	r3, 14058 <bt_gatt_subscribe+0x54>
   14042:	4937      	ldr	r1, [pc, #220]	; (14120 <bt_gatt_subscribe+0x11c>)
   14044:	4837      	ldr	r0, [pc, #220]	; (14124 <bt_gatt_subscribe+0x120>)
   14046:	f640 72fd 	movw	r2, #4093	; 0xffd
   1404a:	f005 fcd0 	bl	199ee <printk>
   1404e:	f640 71fd 	movw	r1, #4093	; 0xffd
   14052:	4833      	ldr	r0, [pc, #204]	; (14120 <bt_gatt_subscribe+0x11c>)
   14054:	f005 ff71 	bl	19f3a <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   14058:	896b      	ldrh	r3, [r5, #10]
   1405a:	b953      	cbnz	r3, 14072 <bt_gatt_subscribe+0x6e>
   1405c:	4930      	ldr	r1, [pc, #192]	; (14120 <bt_gatt_subscribe+0x11c>)
   1405e:	4831      	ldr	r0, [pc, #196]	; (14124 <bt_gatt_subscribe+0x120>)
   14060:	f241 0203 	movw	r2, #4099	; 0x1003
   14064:	f005 fcc3 	bl	199ee <printk>
   14068:	f241 0103 	movw	r1, #4099	; 0x1003
   1406c:	482c      	ldr	r0, [pc, #176]	; (14120 <bt_gatt_subscribe+0x11c>)
   1406e:	f005 ff64 	bl	19f3a <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14072:	7ab3      	ldrb	r3, [r6, #10]
   14074:	2b07      	cmp	r3, #7
   14076:	d14b      	bne.n	14110 <bt_gatt_subscribe+0x10c>
	sub = gatt_sub_find(conn);
   14078:	4630      	mov	r0, r6
   1407a:	f7fe faf9 	bl	12670 <gatt_sub_find>
	if (!sub) {
   1407e:	4604      	mov	r4, r0
   14080:	b958      	cbnz	r0, 1409a <bt_gatt_subscribe+0x96>
		sub = gatt_sub_find(NULL);
   14082:	f7fe faf5 	bl	12670 <gatt_sub_find>
		if (sub) {
   14086:	4604      	mov	r4, r0
   14088:	2800      	cmp	r0, #0
   1408a:	d044      	beq.n	14116 <bt_gatt_subscribe+0x112>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1408c:	f106 0188 	add.w	r1, r6, #136	; 0x88
   14090:	3001      	adds	r0, #1
   14092:	f007 fec2 	bl	1be1a <bt_addr_le_copy>
			sub->id = conn->id;
   14096:	7a33      	ldrb	r3, [r6, #8]
   14098:	7023      	strb	r3, [r4, #0]
	return list->head;
   1409a:	68a2      	ldr	r2, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1409c:	b90a      	cbnz	r2, 140a2 <bt_gatt_subscribe+0x9e>
   1409e:	4613      	mov	r3, r2
   140a0:	e001      	b.n	140a6 <bt_gatt_subscribe+0xa2>
   140a2:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   140a6:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   140a8:	b97b      	cbnz	r3, 140ca <bt_gatt_subscribe+0xc6>
	if (!has_subscription) {
   140aa:	bb41      	cbnz	r1, 140fe <bt_gatt_subscribe+0xfa>
		err = gatt_write_ccc(conn, params->ccc_handle, params->value,
   140ac:	4630      	mov	r0, r6
   140ae:	462b      	mov	r3, r5
   140b0:	89aa      	ldrh	r2, [r5, #12]
   140b2:	8969      	ldrh	r1, [r5, #10]
   140b4:	f7fe ff38 	bl	12f28 <gatt_write_ccc.constprop.0>
		if (err) {
   140b8:	4606      	mov	r6, r0
   140ba:	b300      	cbz	r0, 140fe <bt_gatt_subscribe+0xfa>
	if (sys_slist_is_empty(&sub->list)) {
   140bc:	68a3      	ldr	r3, [r4, #8]
   140be:	b913      	cbnz	r3, 140c6 <bt_gatt_subscribe+0xc2>
   140c0:	4620      	mov	r0, r4
   140c2:	f007 fec9 	bl	1be58 <gatt_sub_remove.part.0>
}
   140c6:	4630      	mov	r0, r6
   140c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   140ca:	42ab      	cmp	r3, r5
   140cc:	d106      	bne.n	140dc <bt_gatt_subscribe+0xd8>
	if (sys_slist_is_empty(&sub->list)) {
   140ce:	b912      	cbnz	r2, 140d6 <bt_gatt_subscribe+0xd2>
   140d0:	4620      	mov	r0, r4
   140d2:	f007 fec1 	bl	1be58 <gatt_sub_remove.part.0>
			return -EALREADY;
   140d6:	f06f 0644 	mvn.w	r6, #68	; 0x44
   140da:	e7f4      	b.n	140c6 <bt_gatt_subscribe+0xc2>
		if (tmp->value_handle == params->value_handle &&
   140dc:	891f      	ldrh	r7, [r3, #8]
   140de:	8928      	ldrh	r0, [r5, #8]
   140e0:	4287      	cmp	r7, r0
   140e2:	d104      	bne.n	140ee <bt_gatt_subscribe+0xea>
   140e4:	899f      	ldrh	r7, [r3, #12]
   140e6:	89a8      	ldrh	r0, [r5, #12]
			has_subscription = true;
   140e8:	4287      	cmp	r7, r0
   140ea:	bf28      	it	cs
   140ec:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   140ee:	f113 0f14 	cmn.w	r3, #20
   140f2:	d0da      	beq.n	140aa <bt_gatt_subscribe+0xa6>
	return node->next;
   140f4:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   140f6:	2b00      	cmp	r3, #0
   140f8:	d0d7      	beq.n	140aa <bt_gatt_subscribe+0xa6>
   140fa:	3b14      	subs	r3, #20
   140fc:	e7d4      	b.n	140a8 <bt_gatt_subscribe+0xa4>
	parent->next = child;
   140fe:	68a2      	ldr	r2, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   14100:	68e6      	ldr	r6, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   14102:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
   14106:	616a      	str	r2, [r5, #20]
	list->head = node;
   14108:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1410a:	b93e      	cbnz	r6, 1411c <bt_gatt_subscribe+0x118>
	list->tail = node;
   1410c:	60e3      	str	r3, [r4, #12]
}
   1410e:	e7da      	b.n	140c6 <bt_gatt_subscribe+0xc2>
		return -ENOTCONN;
   14110:	f06f 0638 	mvn.w	r6, #56	; 0x38
   14114:	e7d7      	b.n	140c6 <bt_gatt_subscribe+0xc2>
		return -ENOMEM;
   14116:	f06f 060b 	mvn.w	r6, #11
   1411a:	e7d4      	b.n	140c6 <bt_gatt_subscribe+0xc2>
	return 0;
   1411c:	2600      	movs	r6, #0
   1411e:	e7d2      	b.n	140c6 <bt_gatt_subscribe+0xc2>
   14120:	00020d60 	.word	0x00020d60
   14124:	0001ead7 	.word	0x0001ead7

00014128 <bt_gatt_unsubscribe>:
{
   14128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1412c:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   1412e:	4607      	mov	r7, r0
   14130:	b950      	cbnz	r0, 14148 <bt_gatt_unsubscribe+0x20>
   14132:	4947      	ldr	r1, [pc, #284]	; (14250 <bt_gatt_unsubscribe+0x128>)
   14134:	4847      	ldr	r0, [pc, #284]	; (14254 <bt_gatt_unsubscribe+0x12c>)
   14136:	f241 025c 	movw	r2, #4188	; 0x105c
   1413a:	f005 fc58 	bl	199ee <printk>
   1413e:	f241 015c 	movw	r1, #4188	; 0x105c
   14142:	4843      	ldr	r0, [pc, #268]	; (14250 <bt_gatt_unsubscribe+0x128>)
   14144:	f005 fef9 	bl	19f3a <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   14148:	b956      	cbnz	r6, 14160 <bt_gatt_unsubscribe+0x38>
   1414a:	4941      	ldr	r1, [pc, #260]	; (14250 <bt_gatt_unsubscribe+0x128>)
   1414c:	4841      	ldr	r0, [pc, #260]	; (14254 <bt_gatt_unsubscribe+0x12c>)
   1414e:	f241 025d 	movw	r2, #4189	; 0x105d
   14152:	f005 fc4c 	bl	199ee <printk>
   14156:	f241 015d 	movw	r1, #4189	; 0x105d
   1415a:	483d      	ldr	r0, [pc, #244]	; (14250 <bt_gatt_unsubscribe+0x128>)
   1415c:	f005 feed 	bl	19f3a <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   14160:	7abb      	ldrb	r3, [r7, #10]
   14162:	2b07      	cmp	r3, #7
   14164:	d170      	bne.n	14248 <bt_gatt_unsubscribe+0x120>
	sub = gatt_sub_find(conn);
   14166:	4638      	mov	r0, r7
   14168:	f7fe fa82 	bl	12670 <gatt_sub_find>
	if (!sub) {
   1416c:	4680      	mov	r8, r0
   1416e:	b920      	cbnz	r0, 1417a <bt_gatt_unsubscribe+0x52>
		return -EINVAL;
   14170:	f06f 0015 	mvn.w	r0, #21
}
   14174:	b003      	add	sp, #12
   14176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   1417a:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1417c:	b1cc      	cbz	r4, 141b2 <bt_gatt_unsubscribe+0x8a>
   1417e:	f1b4 0514 	subs.w	r5, r4, #20
   14182:	d018      	beq.n	141b6 <bt_gatt_unsubscribe+0x8e>
	return node->next;
   14184:	6824      	ldr	r4, [r4, #0]
   14186:	b104      	cbz	r4, 1418a <bt_gatt_unsubscribe+0x62>
   14188:	3c14      	subs	r4, #20
   1418a:	f04f 0900 	mov.w	r9, #0
   1418e:	464b      	mov	r3, r9
   14190:	46ca      	mov	sl, r9
			if (atomic_test_bit(params->flags,
   14192:	f106 0b10 	add.w	fp, r6, #16
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   14196:	b985      	cbnz	r5, 141ba <bt_gatt_unsubscribe+0x92>
	if (!found) {
   14198:	2b00      	cmp	r3, #0
   1419a:	d0e9      	beq.n	14170 <bt_gatt_unsubscribe+0x48>
	if (has_subscription) {
   1419c:	f1ba 0f00 	cmp.w	sl, #0
   141a0:	d047      	beq.n	14232 <bt_gatt_unsubscribe+0x10a>
		params->notify(conn, params, NULL, 0);
   141a2:	462b      	mov	r3, r5
   141a4:	462a      	mov	r2, r5
   141a6:	4631      	mov	r1, r6
   141a8:	4638      	mov	r0, r7
   141aa:	6834      	ldr	r4, [r6, #0]
   141ac:	47a0      	blx	r4
		return 0;
   141ae:	4628      	mov	r0, r5
   141b0:	e7e0      	b.n	14174 <bt_gatt_unsubscribe+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   141b2:	4625      	mov	r5, r4
   141b4:	e7e9      	b.n	1418a <bt_gatt_unsubscribe+0x62>
   141b6:	462c      	mov	r4, r5
   141b8:	e7e7      	b.n	1418a <bt_gatt_unsubscribe+0x62>
		if (params == tmp) {
   141ba:	42b5      	cmp	r5, r6
			sys_slist_remove(&sub->list, prev, &tmp->node);
   141bc:	f105 0114 	add.w	r1, r5, #20
		if (params == tmp) {
   141c0:	d12b      	bne.n	1421a <bt_gatt_unsubscribe+0xf2>
Z_GENLIST_REMOVE(slist, snode)
   141c2:	696b      	ldr	r3, [r5, #20]
   141c4:	f8d8 000c 	ldr.w	r0, [r8, #12]
   141c8:	f1b9 0f00 	cmp.w	r9, #0
   141cc:	d11e      	bne.n	1420c <bt_gatt_unsubscribe+0xe4>
   141ce:	4281      	cmp	r1, r0
	list->head = node;
   141d0:	f8c8 3008 	str.w	r3, [r8, #8]
Z_GENLIST_REMOVE(slist, snode)
   141d4:	d101      	bne.n	141da <bt_gatt_unsubscribe+0xb2>
	list->tail = node;
   141d6:	f8c8 300c 	str.w	r3, [r8, #12]
	parent->next = child;
   141da:	2300      	movs	r3, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   141dc:	4658      	mov	r0, fp
   141de:	616b      	str	r3, [r5, #20]
   141e0:	f007 fe37 	bl	1be52 <atomic_get>
			if (atomic_test_bit(params->flags,
   141e4:	0742      	lsls	r2, r0, #29
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   141e6:	f3c0 0380 	ubfx	r3, r0, #2, #1
   141ea:	d51e      	bpl.n	1422a <bt_gatt_unsubscribe+0x102>
	bt_att_req_cancel(conn, params);
   141ec:	4631      	mov	r1, r6
   141ee:	4638      	mov	r0, r7
   141f0:	9301      	str	r3, [sp, #4]
   141f2:	f7fe f9a1 	bl	12538 <bt_att_req_cancel>
}
   141f6:	9b01      	ldr	r3, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   141f8:	b1cc      	cbz	r4, 1422e <bt_gatt_unsubscribe+0x106>
Z_GENLIST_PEEK_NEXT(slist, snode)
   141fa:	f114 0114 	adds.w	r1, r4, #20
   141fe:	d002      	beq.n	14206 <bt_gatt_unsubscribe+0xde>
	return node->next;
   14200:	6961      	ldr	r1, [r4, #20]
   14202:	b101      	cbz	r1, 14206 <bt_gatt_unsubscribe+0xde>
   14204:	3914      	subs	r1, #20
   14206:	4625      	mov	r5, r4
   14208:	460c      	mov	r4, r1
   1420a:	e7c4      	b.n	14196 <bt_gatt_unsubscribe+0x6e>
Z_GENLIST_REMOVE(slist, snode)
   1420c:	4288      	cmp	r0, r1
	parent->next = child;
   1420e:	f8c9 3000 	str.w	r3, [r9]
	list->tail = node;
   14212:	bf08      	it	eq
   14214:	f8c8 900c 	streq.w	r9, [r8, #12]
}
   14218:	e7df      	b.n	141da <bt_gatt_unsubscribe+0xb2>
		if (tmp->value_handle == params->value_handle) {
   1421a:	892d      	ldrh	r5, [r5, #8]
   1421c:	8930      	ldrh	r0, [r6, #8]
			sys_slist_remove(&sub->list, prev, &tmp->node);
   1421e:	4689      	mov	r9, r1
   14220:	4285      	cmp	r5, r0
   14222:	bf08      	it	eq
   14224:	f04f 0a01 	moveq.w	sl, #1
   14228:	e7e6      	b.n	141f8 <bt_gatt_unsubscribe+0xd0>
			found = true;
   1422a:	2301      	movs	r3, #1
   1422c:	e7e4      	b.n	141f8 <bt_gatt_unsubscribe+0xd0>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1422e:	4621      	mov	r1, r4
   14230:	e7e9      	b.n	14206 <bt_gatt_unsubscribe+0xde>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   14232:	4633      	mov	r3, r6
   14234:	4652      	mov	r2, sl
   14236:	4638      	mov	r0, r7
   14238:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   1423a:	f8a6 a00c 	strh.w	sl, [r6, #12]
}
   1423e:	b003      	add	sp, #12
   14240:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   14244:	f7fe be70 	b.w	12f28 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   14248:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1424c:	e792      	b.n	14174 <bt_gatt_unsubscribe+0x4c>
   1424e:	bf00      	nop
   14250:	00020d60 	.word	0x00020d60
   14254:	0001ead7 	.word	0x0001ead7

00014258 <bt_gatt_mult_notification>:
{
   14258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1425c:	b085      	sub	sp, #20
   1425e:	4680      	mov	r8, r0
   14260:	460c      	mov	r4, r1
   14262:	4691      	mov	r9, r2
	sub = gatt_sub_find(conn);
   14264:	f7fe fa04 	bl	12670 <gatt_sub_find>
	if (!sub) {
   14268:	4606      	mov	r6, r0
   1426a:	b1d0      	cbz	r0, 142a2 <bt_gatt_mult_notification+0x4a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1426c:	464a      	mov	r2, r9
   1426e:	4621      	mov	r1, r4
   14270:	a801      	add	r0, sp, #4
   14272:	f008 f8d5 	bl	1c420 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   14276:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1427a:	2b04      	cmp	r3, #4
   1427c:	d911      	bls.n	142a2 <bt_gatt_mult_notification+0x4a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1427e:	2104      	movs	r1, #4
   14280:	eb0d 0001 	add.w	r0, sp, r1
   14284:	f000 fc38 	bl	14af8 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   14288:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   1428c:	f8b0 a002 	ldrh.w	sl, [r0, #2]
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   14290:	4605      	mov	r5, r0
		if (len > buf.len) {
   14292:	4553      	cmp	r3, sl
   14294:	d208      	bcs.n	142a8 <bt_gatt_mult_notification+0x50>
			BT_ERR("Invalid data len %u > %u", len, length);
   14296:	464b      	mov	r3, r9
   14298:	4652      	mov	r2, sl
   1429a:	2145      	movs	r1, #69	; 0x45
   1429c:	4816      	ldr	r0, [pc, #88]	; (142f8 <bt_gatt_mult_notification+0xa0>)
   1429e:	f005 fba6 	bl	199ee <printk>
}
   142a2:	b005      	add	sp, #20
   142a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   142a8:	68b3      	ldr	r3, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   142aa:	b303      	cbz	r3, 142ee <bt_gatt_mult_notification+0x96>
   142ac:	f1b3 0714 	subs.w	r7, r3, #20
   142b0:	d01d      	beq.n	142ee <bt_gatt_mult_notification+0x96>
	return node->next;
   142b2:	681c      	ldr	r4, [r3, #0]
   142b4:	b104      	cbz	r4, 142b8 <bt_gatt_mult_notification+0x60>
   142b6:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   142b8:	f835 bb04 	ldrh.w	fp, [r5], #4
			if (handle != params->value_handle) {
   142bc:	893b      	ldrh	r3, [r7, #8]
   142be:	455b      	cmp	r3, fp
   142c0:	d10b      	bne.n	142da <bt_gatt_mult_notification+0x82>
			if (params->notify(conn, params, nfy->value, len) ==
   142c2:	4653      	mov	r3, sl
   142c4:	462a      	mov	r2, r5
   142c6:	4639      	mov	r1, r7
   142c8:	4640      	mov	r0, r8
   142ca:	f8d7 c000 	ldr.w	ip, [r7]
   142ce:	47e0      	blx	ip
   142d0:	b918      	cbnz	r0, 142da <bt_gatt_mult_notification+0x82>
				bt_gatt_unsubscribe(conn, params);
   142d2:	4639      	mov	r1, r7
   142d4:	4640      	mov	r0, r8
   142d6:	f7ff ff27 	bl	14128 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   142da:	b144      	cbz	r4, 142ee <bt_gatt_mult_notification+0x96>
Z_GENLIST_PEEK_NEXT(slist, snode)
   142dc:	f114 0314 	adds.w	r3, r4, #20
   142e0:	d002      	beq.n	142e8 <bt_gatt_mult_notification+0x90>
	return node->next;
   142e2:	6963      	ldr	r3, [r4, #20]
   142e4:	b103      	cbz	r3, 142e8 <bt_gatt_mult_notification+0x90>
   142e6:	3b14      	subs	r3, #20
{
   142e8:	4627      	mov	r7, r4
   142ea:	461c      	mov	r4, r3
   142ec:	e7e6      	b.n	142bc <bt_gatt_mult_notification+0x64>
		net_buf_simple_pull_mem(&buf, len);
   142ee:	4651      	mov	r1, sl
   142f0:	a801      	add	r0, sp, #4
   142f2:	f000 fc01 	bl	14af8 <net_buf_simple_pull_mem>
   142f6:	e7be      	b.n	14276 <bt_gatt_mult_notification+0x1e>
   142f8:	00020e89 	.word	0x00020e89

000142fc <bt_gatt_connected>:
	data.sec = BT_SECURITY_L1;
   142fc:	2301      	movs	r3, #1
{
   142fe:	b570      	push	{r4, r5, r6, lr}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14300:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   14304:	b08e      	sub	sp, #56	; 0x38
   14306:	4605      	mov	r5, r0
	data.conn = conn;
   14308:	9003      	str	r0, [sp, #12]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1430a:	4631      	mov	r1, r6
   1430c:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1430e:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14312:	f006 ff73 	bl	1b1fc <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   14316:	b190      	cbz	r0, 1433e <bt_gatt_connected+0x42>
		if (conn->id) {
   14318:	7a2a      	ldrb	r2, [r5, #8]
   1431a:	b30a      	cbz	r2, 14360 <bt_gatt_connected+0x64>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1431c:	ac02      	add	r4, sp, #8
   1431e:	2104      	movs	r1, #4
   14320:	4620      	mov	r0, r4
   14322:	f005 faca 	bl	198ba <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   14326:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   14328:	2124      	movs	r1, #36	; 0x24
   1432a:	4a19      	ldr	r2, [pc, #100]	; (14390 <bt_gatt_connected+0x94>)
   1432c:	a805      	add	r0, sp, #20
   1432e:	4633      	mov	r3, r6
   14330:	f7f9 fb5c 	bl	d9ec <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   14334:	aa05      	add	r2, sp, #20
   14336:	4610      	mov	r0, r2
   14338:	4916      	ldr	r1, [pc, #88]	; (14394 <bt_gatt_connected+0x98>)
   1433a:	f7f6 ffb3 	bl	b2a4 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1433e:	2001      	movs	r0, #1
   14340:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14344:	4a14      	ldr	r2, [pc, #80]	; (14398 <bt_gatt_connected+0x9c>)
   14346:	ab03      	add	r3, sp, #12
   14348:	f007 ff4a 	bl	1c1e0 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1434c:	4628      	mov	r0, r5
   1434e:	f7fe f98f 	bl	12670 <gatt_sub_find>
	if (!sub) {
   14352:	b118      	cbz	r0, 1435c <bt_gatt_connected+0x60>
	return list->head;
   14354:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   14356:	b10c      	cbz	r4, 1435c <bt_gatt_connected+0x60>
   14358:	3c14      	subs	r4, #20
   1435a:	b91c      	cbnz	r4, 14364 <bt_gatt_connected+0x68>
}
   1435c:	b00e      	add	sp, #56	; 0x38
   1435e:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   14360:	9200      	str	r2, [sp, #0]
   14362:	e7e1      	b.n	14328 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   14364:	4631      	mov	r1, r6
   14366:	7a28      	ldrb	r0, [r5, #8]
   14368:	f006 ff48 	bl	1b1fc <bt_addr_le_is_bonded>
   1436c:	b158      	cbz	r0, 14386 <bt_gatt_connected+0x8a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1436e:	f104 0010 	add.w	r0, r4, #16
   14372:	f007 fd6e 	bl	1be52 <atomic_get>
   14376:	0783      	lsls	r3, r0, #30
   14378:	d405      	bmi.n	14386 <bt_gatt_connected+0x8a>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
   1437a:	4623      	mov	r3, r4
   1437c:	4628      	mov	r0, r5
   1437e:	89a2      	ldrh	r2, [r4, #12]
   14380:	8961      	ldrh	r1, [r4, #10]
   14382:	f7fe fdd1 	bl	12f28 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14386:	f114 0f14 	cmn.w	r4, #20
   1438a:	d0e7      	beq.n	1435c <bt_gatt_connected+0x60>
	return node->next;
   1438c:	6964      	ldr	r4, [r4, #20]
   1438e:	e7e2      	b.n	14356 <bt_gatt_connected+0x5a>
   14390:	00020dcf 	.word	0x00020dcf
   14394:	00013321 	.word	0x00013321
   14398:	000136f1 	.word	0x000136f1

0001439c <db_hash_read>:
{
   1439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1439e:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
   143a0:	4810      	ldr	r0, [pc, #64]	; (143e4 <db_hash_read+0x48>)
{
   143a2:	4615      	mov	r5, r2
   143a4:	461f      	mov	r7, r3
   143a6:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	err = k_delayed_work_cancel(&db_hash_work);
   143aa:	f004 fc1d 	bl	18be8 <k_delayed_work_cancel>
	if (!err) {
   143ae:	b910      	cbnz	r0, 143b6 <db_hash_read+0x1a>
		db_hash_gen(true);
   143b0:	2001      	movs	r0, #1
   143b2:	f7fe ff25 	bl	13200 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
   143b6:	2101      	movs	r1, #1
   143b8:	4620      	mov	r0, r4
   143ba:	f007 ffd9 	bl	1c370 <bt_gatt_change_aware>
	if (offset > value_len) {
   143be:	2e10      	cmp	r6, #16
   143c0:	d80c      	bhi.n	143dc <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
   143c2:	f1c6 0410 	rsb	r4, r6, #16
   143c6:	42bc      	cmp	r4, r7
   143c8:	bfa8      	it	ge
   143ca:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   143cc:	4906      	ldr	r1, [pc, #24]	; (143e8 <db_hash_read+0x4c>)
   143ce:	4622      	mov	r2, r4
   143d0:	4628      	mov	r0, r5
   143d2:	4431      	add	r1, r6
   143d4:	f006 fd4b 	bl	1ae6e <memcpy>
}
   143d8:	4620      	mov	r0, r4
   143da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   143dc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
   143e0:	e7fa      	b.n	143d8 <db_hash_read+0x3c>
   143e2:	bf00      	nop
   143e4:	20009a58 	.word	0x20009a58
   143e8:	2000c5c9 	.word	0x2000c5c9

000143ec <bt_gatt_store_ccc>:
	save.count = 0;
   143ec:	2300      	movs	r3, #0
{
   143ee:	b570      	push	{r4, r5, r6, lr}
   143f0:	4604      	mov	r4, r0
   143f2:	b0c0      	sub	sp, #256	; 0x100
   143f4:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   143f6:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   143f8:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   143fc:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   143fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14402:	2001      	movs	r0, #1
   14404:	4a13      	ldr	r2, [pc, #76]	; (14454 <bt_gatt_store_ccc+0x68>)
   14406:	ab0d      	add	r3, sp, #52	; 0x34
   14408:	f007 feea 	bl	1c1e0 <bt_gatt_foreach_attr>
	if (id) {
   1440c:	b1ec      	cbz	r4, 1444a <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   1440e:	ae03      	add	r6, sp, #12
   14410:	4622      	mov	r2, r4
   14412:	2104      	movs	r1, #4
   14414:	4630      	mov	r0, r6
   14416:	f005 fa50 	bl	198ba <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1441a:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1441c:	4a0e      	ldr	r2, [pc, #56]	; (14458 <bt_gatt_store_ccc+0x6c>)
   1441e:	462b      	mov	r3, r5
   14420:	2124      	movs	r1, #36	; 0x24
   14422:	a804      	add	r0, sp, #16
   14424:	f7f9 fae2 	bl	d9ec <bt_settings_encode_key>
	if (save.count) {
   14428:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1442a:	b182      	cbz	r2, 1444e <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   1442c:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1442e:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   14430:	a804      	add	r0, sp, #16
   14432:	f7f6 feeb 	bl	b20c <settings_save_one>
	if (err) {
   14436:	4604      	mov	r4, r0
   14438:	b120      	cbz	r0, 14444 <bt_gatt_store_ccc+0x58>
		BT_ERR("Failed to store CCCs (err %d)", err);
   1443a:	4602      	mov	r2, r0
   1443c:	2145      	movs	r1, #69	; 0x45
   1443e:	4807      	ldr	r0, [pc, #28]	; (1445c <bt_gatt_store_ccc+0x70>)
   14440:	f005 fad5 	bl	199ee <printk>
}
   14444:	4620      	mov	r0, r4
   14446:	b040      	add	sp, #256	; 0x100
   14448:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1444a:	9400      	str	r4, [sp, #0]
   1444c:	e7e6      	b.n	1441c <bt_gatt_store_ccc+0x30>
		str = NULL;
   1444e:	4611      	mov	r1, r2
   14450:	e7ee      	b.n	14430 <bt_gatt_store_ccc+0x44>
   14452:	bf00      	nop
   14454:	00012bb1 	.word	0x00012bb1
   14458:	00020dcf 	.word	0x00020dcf
   1445c:	00020ea7 	.word	0x00020ea7

00014460 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   14460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14464:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   14466:	4603      	mov	r3, r0
   14468:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1446c:	2001      	movs	r0, #1
{
   1446e:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   14470:	4a52      	ldr	r2, [pc, #328]	; (145bc <bt_gatt_disconnected+0x15c>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14472:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   14476:	f007 feb3 	bl	1c1e0 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1447a:	4629      	mov	r1, r5
   1447c:	7a20      	ldrb	r0, [r4, #8]
   1447e:	f006 febd 	bl	1b1fc <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   14482:	b378      	cbz	r0, 144e4 <bt_gatt_disconnected+0x84>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   14484:	4629      	mov	r1, r5
   14486:	7a20      	ldrb	r0, [r4, #8]
   14488:	f7ff ffb0 	bl	143ec <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
   1448c:	4620      	mov	r0, r4
   1448e:	f7fe f8b1 	bl	125f4 <find_cf_cfg>
	if (!cfg) {
   14492:	4606      	mov	r6, r0
   14494:	2800      	cmp	r0, #0
   14496:	d05e      	beq.n	14556 <bt_gatt_disconnected+0xf6>
		if (conn->id) {
   14498:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
   1449a:	3608      	adds	r6, #8
		if (conn->id) {
   1449c:	2a00      	cmp	r2, #0
   1449e:	d05c      	beq.n	1455a <bt_gatt_disconnected+0xfa>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   144a0:	af02      	add	r7, sp, #8
   144a2:	2104      	movs	r1, #4
   144a4:	4638      	mov	r0, r7
   144a6:	f005 fa08 	bl	198ba <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   144aa:	462b      	mov	r3, r5
   144ac:	9700      	str	r7, [sp, #0]
   144ae:	2124      	movs	r1, #36	; 0x24
   144b0:	4a43      	ldr	r2, [pc, #268]	; (145c0 <bt_gatt_disconnected+0x160>)
   144b2:	a803      	add	r0, sp, #12
   144b4:	f7f9 fa9a 	bl	d9ec <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   144b8:	7a23      	ldrb	r3, [r4, #8]
   144ba:	2701      	movs	r7, #1
   144bc:	b93b      	cbnz	r3, 144ce <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
   144be:	2300      	movs	r3, #0
   144c0:	2124      	movs	r1, #36	; 0x24
   144c2:	9300      	str	r3, [sp, #0]
   144c4:	4a3e      	ldr	r2, [pc, #248]	; (145c0 <bt_gatt_disconnected+0x160>)
   144c6:	462b      	mov	r3, r5
   144c8:	a803      	add	r0, sp, #12
   144ca:	f7f9 fa8f 	bl	d9ec <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   144ce:	463a      	mov	r2, r7
   144d0:	4631      	mov	r1, r6
   144d2:	a803      	add	r0, sp, #12
   144d4:	f7f6 fe9a 	bl	b20c <settings_save_one>
	if (err) {
   144d8:	4602      	mov	r2, r0
   144da:	b118      	cbz	r0, 144e4 <bt_gatt_disconnected+0x84>
		BT_ERR("Failed to store Client Features (err %d)", err);
   144dc:	2145      	movs	r1, #69	; 0x45
   144de:	4839      	ldr	r0, [pc, #228]	; (145c4 <bt_gatt_disconnected+0x164>)
   144e0:	f005 fa85 	bl	199ee <printk>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   144e4:	4629      	mov	r1, r5
   144e6:	7a20      	ldrb	r0, [r4, #8]
   144e8:	f006 fe88 	bl	1b1fc <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   144ec:	b150      	cbz	r0, 14504 <bt_gatt_disconnected+0xa4>
		struct addr_with_id addr_with_id = {
   144ee:	7a23      	ldrb	r3, [r4, #8]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   144f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
		struct addr_with_id addr_with_id = {
   144f4:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   144f8:	2001      	movs	r0, #1
   144fa:	4a33      	ldr	r2, [pc, #204]	; (145c8 <bt_gatt_disconnected+0x168>)
   144fc:	ab03      	add	r3, sp, #12
		struct addr_with_id addr_with_id = {
   144fe:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   14500:	f007 fe6e 	bl	1c1e0 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   14504:	4620      	mov	r0, r4
   14506:	f7fe f8b3 	bl	12670 <gatt_sub_find>
	if (!sub) {
   1450a:	4607      	mov	r7, r0
   1450c:	b3b0      	cbz	r0, 1457c <bt_gatt_disconnected+0x11c>
	return list->head;
   1450e:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   14510:	b3a3      	cbz	r3, 1457c <bt_gatt_disconnected+0x11c>
   14512:	f1b3 0b14 	subs.w	fp, r3, #20
   14516:	d031      	beq.n	1457c <bt_gatt_disconnected+0x11c>
	return node->next;
   14518:	681e      	ldr	r6, [r3, #0]
   1451a:	b106      	cbz	r6, 1451e <bt_gatt_disconnected+0xbe>
   1451c:	3e14      	subs	r6, #20
   1451e:	f04f 0800 	mov.w	r8, #0
			params->value = 0U;
   14522:	46c2      	mov	sl, r8
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   14524:	f107 0901 	add.w	r9, r7, #1
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   14528:	4629      	mov	r1, r5
   1452a:	7a20      	ldrb	r0, [r4, #8]
   1452c:	f006 fe66 	bl	1b1fc <bt_addr_le_is_bonded>
   14530:	b9a8      	cbnz	r0, 1455e <bt_gatt_disconnected+0xfe>
			gatt_sub_remove(conn, sub, prev, params);
   14532:	465b      	mov	r3, fp
   14534:	4642      	mov	r2, r8
   14536:	4639      	mov	r1, r7
   14538:	4620      	mov	r0, r4
			params->value = 0U;
   1453a:	f8ab a00c 	strh.w	sl, [fp, #12]
			gatt_sub_remove(conn, sub, prev, params);
   1453e:	f007 fcb0 	bl	1bea2 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   14542:	b1de      	cbz	r6, 1457c <bt_gatt_disconnected+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14544:	f116 0214 	adds.w	r2, r6, #20
   14548:	d002      	beq.n	14550 <bt_gatt_disconnected+0xf0>
	return node->next;
   1454a:	6972      	ldr	r2, [r6, #20]
   1454c:	b102      	cbz	r2, 14550 <bt_gatt_disconnected+0xf0>
   1454e:	3a14      	subs	r2, #20
   14550:	46b3      	mov	fp, r6
   14552:	4616      	mov	r6, r2
   14554:	e7e8      	b.n	14528 <bt_gatt_disconnected+0xc8>
		len = 0;
   14556:	4607      	mov	r7, r0
   14558:	e7b1      	b.n	144be <bt_gatt_disconnected+0x5e>
   1455a:	2701      	movs	r7, #1
   1455c:	e7af      	b.n	144be <bt_gatt_disconnected+0x5e>
   1455e:	f10b 0010 	add.w	r0, fp, #16
   14562:	f007 fc76 	bl	1be52 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   14566:	07c3      	lsls	r3, r0, #31
   14568:	d4e3      	bmi.n	14532 <bt_gatt_disconnected+0xd2>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   1456a:	787b      	ldrb	r3, [r7, #1]
   1456c:	b11b      	cbz	r3, 14576 <bt_gatt_disconnected+0x116>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1456e:	4629      	mov	r1, r5
   14570:	4648      	mov	r0, r9
   14572:	f007 fc52 	bl	1be1a <bt_addr_le_copy>
			prev = &params->node;
   14576:	f10b 0814 	add.w	r8, fp, #20
   1457a:	e7e2      	b.n	14542 <bt_gatt_disconnected+0xe2>
	cfg = find_cf_cfg(conn);
   1457c:	4620      	mov	r0, r4
   1457e:	f7fe f839 	bl	125f4 <find_cf_cfg>
	if (!cfg) {
   14582:	4606      	mov	r6, r0
   14584:	b1b8      	cbz	r0, 145b6 <bt_gatt_disconnected+0x156>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   14586:	4629      	mov	r1, r5
   14588:	7a20      	ldrb	r0, [r4, #8]
   1458a:	f006 fe37 	bl	1b1fc <bt_addr_le_is_bonded>
   1458e:	b928      	cbnz	r0, 1459c <bt_gatt_disconnected+0x13c>
		clear_cf_cfg(cfg);
   14590:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   14592:	b00d      	add	sp, #52	; 0x34
   14594:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   14598:	f007 bc6a 	b.w	1be70 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1459c:	1c70      	adds	r0, r6, #1
   1459e:	4629      	mov	r1, r5
   145a0:	f007 fc3b 	bl	1be1a <bt_addr_le_copy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   145a4:	360c      	adds	r6, #12
   145a6:	e8d6 3fef 	ldaex	r3, [r6]
   145aa:	f023 0302 	bic.w	r3, r3, #2
   145ae:	e8c6 3fe2 	stlex	r2, r3, [r6]
   145b2:	2a00      	cmp	r2, #0
   145b4:	d1f7      	bne.n	145a6 <bt_gatt_disconnected+0x146>
}
   145b6:	b00d      	add	sp, #52	; 0x34
   145b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145bc:	00012e49 	.word	0x00012e49
   145c0:	00020efb 	.word	0x00020efb
   145c4:	00020eca 	.word	0x00020eca
   145c8:	00012afd 	.word	0x00012afd

000145cc <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   145cc:	b570      	push	{r4, r5, r6, lr}
   145ce:	4602      	mov	r2, r0
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   145d0:	2400      	movs	r4, #0
   145d2:	26c0      	movs	r6, #192	; 0xc0
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   145d4:	4b09      	ldr	r3, [pc, #36]	; (145fc <bt_smp_accept+0x30>)
   145d6:	fb06 f504 	mul.w	r5, r6, r4
   145da:	58e8      	ldr	r0, [r5, r3]
   145dc:	b148      	cbz	r0, 145f2 <bt_smp_accept+0x26>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   145de:	3401      	adds	r4, #1
   145e0:	2c0a      	cmp	r4, #10
   145e2:	d1f8      	bne.n	145d6 <bt_smp_accept+0xa>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   145e4:	4806      	ldr	r0, [pc, #24]	; (14600 <bt_smp_accept+0x34>)
   145e6:	2145      	movs	r1, #69	; 0x45
   145e8:	f005 fa01 	bl	199ee <printk>
   145ec:	f06f 000b 	mvn.w	r0, #11
   145f0:	e003      	b.n	145fa <bt_smp_accept+0x2e>
		smp->chan.ops = &ops;
   145f2:	4a04      	ldr	r2, [pc, #16]	; (14604 <bt_smp_accept+0x38>)
   145f4:	442b      	add	r3, r5
   145f6:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   145f8:	600b      	str	r3, [r1, #0]

	return -ENOMEM;
}
   145fa:	bd70      	pop	{r4, r5, r6, pc}
   145fc:	20009ae0 	.word	0x20009ae0
   14600:	00020f0c 	.word	0x00020f0c
   14604:	0001e00c 	.word	0x0001e00c

00014608 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   14608:	222c      	movs	r2, #44	; 0x2c
   1460a:	4b02      	ldr	r3, [pc, #8]	; (14614 <net_buf_pool_get+0xc>)
   1460c:	fb02 3000 	mla	r0, r2, r0, r3
   14610:	4770      	bx	lr
   14612:	bf00      	nop
   14614:	200086b0 	.word	0x200086b0

00014618 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   14618:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1461a:	7982      	ldrb	r2, [r0, #6]
	return buf - pool->__bufs;
   1461c:	4b04      	ldr	r3, [pc, #16]	; (14630 <net_buf_id+0x18>)
   1461e:	fb01 3302 	mla	r3, r1, r2, r3
   14622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14624:	1ac0      	subs	r0, r0, r3
}
   14626:	4b03      	ldr	r3, [pc, #12]	; (14634 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   14628:	10c0      	asrs	r0, r0, #3
}
   1462a:	4358      	muls	r0, r3
   1462c:	4770      	bx	lr
   1462e:	bf00      	nop
   14630:	200086b0 	.word	0x200086b0
   14634:	aaaaaaab 	.word	0xaaaaaaab

00014638 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   14638:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1463a:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1463c:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1463e:	4b09      	ldr	r3, [pc, #36]	; (14664 <fixed_data_alloc+0x2c>)
   14640:	fb04 3302 	mla	r3, r4, r2, r3
   14644:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   14646:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   14648:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1464a:	6823      	ldr	r3, [r4, #0]
   1464c:	429a      	cmp	r2, r3
   1464e:	bf94      	ite	ls
   14650:	600a      	strls	r2, [r1, #0]
   14652:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   14654:	f7ff ffe0 	bl	14618 <net_buf_id>
   14658:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1465c:	fb02 3000 	mla	r0, r2, r0, r3
   14660:	bd10      	pop	{r4, pc}
   14662:	bf00      	nop
   14664:	200086b0 	.word	0x200086b0

00014668 <net_buf_reset>:
{
   14668:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1466a:	7943      	ldrb	r3, [r0, #5]
{
   1466c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1466e:	b143      	cbz	r3, 14682 <net_buf_reset+0x1a>
   14670:	490c      	ldr	r1, [pc, #48]	; (146a4 <net_buf_reset+0x3c>)
   14672:	480d      	ldr	r0, [pc, #52]	; (146a8 <net_buf_reset+0x40>)
   14674:	224f      	movs	r2, #79	; 0x4f
   14676:	f005 f9ba 	bl	199ee <printk>
   1467a:	214f      	movs	r1, #79	; 0x4f
   1467c:	4809      	ldr	r0, [pc, #36]	; (146a4 <net_buf_reset+0x3c>)
   1467e:	f005 fc5c 	bl	19f3a <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   14682:	6823      	ldr	r3, [r4, #0]
   14684:	b143      	cbz	r3, 14698 <net_buf_reset+0x30>
   14686:	4907      	ldr	r1, [pc, #28]	; (146a4 <net_buf_reset+0x3c>)
   14688:	4807      	ldr	r0, [pc, #28]	; (146a8 <net_buf_reset+0x40>)
   1468a:	2250      	movs	r2, #80	; 0x50
   1468c:	f005 f9af 	bl	199ee <printk>
   14690:	2150      	movs	r1, #80	; 0x50
   14692:	4804      	ldr	r0, [pc, #16]	; (146a4 <net_buf_reset+0x3c>)
   14694:	f005 fc51 	bl	19f3a <assert_post_action>
	buf->len  = 0U;
   14698:	2300      	movs	r3, #0
   1469a:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1469c:	6923      	ldr	r3, [r4, #16]
   1469e:	60a3      	str	r3, [r4, #8]
}
   146a0:	bd10      	pop	{r4, pc}
   146a2:	bf00      	nop
   146a4:	00020f3d 	.word	0x00020f3d
   146a8:	0001ead7 	.word	0x0001ead7

000146ac <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   146ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146b0:	4605      	mov	r5, r0
   146b2:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   146b4:	4610      	mov	r0, r2
   146b6:	4619      	mov	r1, r3
{
   146b8:	4691      	mov	r9, r2
   146ba:	4698      	mov	r8, r3
   146bc:	4617      	mov	r7, r2
   146be:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   146c0:	f008 fde8 	bl	1d294 <z_timeout_end_calc>
   146c4:	4682      	mov	sl, r0
   146c6:	468b      	mov	fp, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   146c8:	b945      	cbnz	r5, 146dc <net_buf_alloc_len+0x30>
   146ca:	494a      	ldr	r1, [pc, #296]	; (147f4 <net_buf_alloc_len+0x148>)
   146cc:	484a      	ldr	r0, [pc, #296]	; (147f8 <net_buf_alloc_len+0x14c>)
   146ce:	22ed      	movs	r2, #237	; 0xed
   146d0:	f005 f98d 	bl	199ee <printk>
   146d4:	21ed      	movs	r1, #237	; 0xed
   146d6:	4847      	ldr	r0, [pc, #284]	; (147f4 <net_buf_alloc_len+0x148>)
   146d8:	f005 fc2f 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   146dc:	f04f 0320 	mov.w	r3, #32
   146e0:	f3ef 8111 	mrs	r1, BASEPRI
   146e4:	f383 8811 	msr	BASEPRI, r3
   146e8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   146ec:	8beb      	ldrh	r3, [r5, #30]
   146ee:	2b00      	cmp	r3, #0
   146f0:	d055      	beq.n	1479e <net_buf_alloc_len+0xf2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   146f2:	8baa      	ldrh	r2, [r5, #28]
   146f4:	429a      	cmp	r2, r3
   146f6:	d93e      	bls.n	14776 <net_buf_alloc_len+0xca>
   146f8:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   146fa:	2200      	movs	r2, #0
   146fc:	2300      	movs	r3, #0
   146fe:	4628      	mov	r0, r5
   14700:	f002 ff34 	bl	1756c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   14704:	9900      	ldr	r1, [sp, #0]
   14706:	4604      	mov	r4, r0
   14708:	2800      	cmp	r0, #0
   1470a:	d034      	beq.n	14776 <net_buf_alloc_len+0xca>
	__asm__ volatile(
   1470c:	f381 8811 	msr	BASEPRI, r1
   14710:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   14714:	9d01      	ldr	r5, [sp, #4]
   14716:	2d00      	cmp	r5, #0
   14718:	d069      	beq.n	147ee <net_buf_alloc_len+0x142>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1471a:	ea58 0309 	orrs.w	r3, r8, r9
   1471e:	d00f      	beq.n	14740 <net_buf_alloc_len+0x94>
   14720:	f1b8 3fff 	cmp.w	r8, #4294967295
   14724:	bf08      	it	eq
   14726:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1472a:	d009      	beq.n	14740 <net_buf_alloc_len+0x94>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1472c:	f004 fd08 	bl	19140 <z_tick_get>
   14730:	ebba 0700 	subs.w	r7, sl, r0
   14734:	eb6b 0601 	sbc.w	r6, fp, r1
   14738:	2e00      	cmp	r6, #0
   1473a:	bfbc      	itt	lt
   1473c:	2700      	movlt	r7, #0
   1473e:	463e      	movlt	r6, r7
	return pool->alloc->cb->alloc(buf, size, timeout);
   14740:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14744:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   14746:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 147fc <net_buf_alloc_len+0x150>
   1474a:	463a      	mov	r2, r7
   1474c:	fb09 8303 	mla	r3, r9, r3, r8
   14750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14752:	4620      	mov	r0, r4
   14754:	681b      	ldr	r3, [r3, #0]
   14756:	a901      	add	r1, sp, #4
   14758:	f8d3 a000 	ldr.w	sl, [r3]
   1475c:	4633      	mov	r3, r6
   1475e:	47d0      	blx	sl
   14760:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   14762:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   14764:	bb58      	cbnz	r0, 147be <net_buf_alloc_len+0x112>
	k_lifo_put(&pool->free, buf);
   14766:	79a0      	ldrb	r0, [r4, #6]
   14768:	4621      	mov	r1, r4
   1476a:	fb00 8009 	mla	r0, r0, r9, r8
   1476e:	f008 fcc6 	bl	1d0fe <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   14772:	4634      	mov	r4, r6
}
   14774:	e01f      	b.n	147b6 <net_buf_alloc_len+0x10a>
		uninit_count = pool->uninit_count--;
   14776:	8beb      	ldrh	r3, [r5, #30]
   14778:	1e5a      	subs	r2, r3, #1
   1477a:	83ea      	strh	r2, [r5, #30]
   1477c:	f381 8811 	msr	BASEPRI, r1
   14780:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   14784:	2018      	movs	r0, #24
   14786:	8bac      	ldrh	r4, [r5, #28]
   14788:	1ae3      	subs	r3, r4, r3
   1478a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1478c:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   14790:	481a      	ldr	r0, [pc, #104]	; (147fc <net_buf_alloc_len+0x150>)
   14792:	4b1b      	ldr	r3, [pc, #108]	; (14800 <net_buf_alloc_len+0x154>)
   14794:	1a2d      	subs	r5, r5, r0
   14796:	10ad      	asrs	r5, r5, #2
   14798:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1479a:	71a5      	strb	r5, [r4, #6]
		goto success;
   1479c:	e7ba      	b.n	14714 <net_buf_alloc_len+0x68>
   1479e:	f381 8811 	msr	BASEPRI, r1
   147a2:	f3bf 8f6f 	isb	sy
   147a6:	464a      	mov	r2, r9
   147a8:	4643      	mov	r3, r8
   147aa:	4628      	mov	r0, r5
   147ac:	f002 fede 	bl	1756c <z_impl_k_queue_get>
	if (!buf) {
   147b0:	4604      	mov	r4, r0
   147b2:	2800      	cmp	r0, #0
   147b4:	d1ae      	bne.n	14714 <net_buf_alloc_len+0x68>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   147b6:	4620      	mov	r0, r4
   147b8:	b003      	add	sp, #12
   147ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   147be:	9b01      	ldr	r3, [sp, #4]
   147c0:	429d      	cmp	r5, r3
   147c2:	d90a      	bls.n	147da <net_buf_alloc_len+0x12e>
   147c4:	490b      	ldr	r1, [pc, #44]	; (147f4 <net_buf_alloc_len+0x148>)
   147c6:	480c      	ldr	r0, [pc, #48]	; (147f8 <net_buf_alloc_len+0x14c>)
   147c8:	f240 124d 	movw	r2, #333	; 0x14d
   147cc:	f005 f90f 	bl	199ee <printk>
   147d0:	f240 114d 	movw	r1, #333	; 0x14d
   147d4:	4807      	ldr	r0, [pc, #28]	; (147f4 <net_buf_alloc_len+0x148>)
   147d6:	f005 fbb0 	bl	19f3a <assert_post_action>
	buf->frags = NULL;
   147da:	2300      	movs	r3, #0
   147dc:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   147de:	2301      	movs	r3, #1
   147e0:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   147e2:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   147e4:	4620      	mov	r0, r4
	buf->size  = size;
   147e6:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   147e8:	f7ff ff3e 	bl	14668 <net_buf_reset>
	return buf;
   147ec:	e7e3      	b.n	147b6 <net_buf_alloc_len+0x10a>
		buf->__buf = NULL;
   147ee:	6125      	str	r5, [r4, #16]
   147f0:	e7f3      	b.n	147da <net_buf_alloc_len+0x12e>
   147f2:	bf00      	nop
   147f4:	00020f3d 	.word	0x00020f3d
   147f8:	0001ead7 	.word	0x0001ead7
   147fc:	200086b0 	.word	0x200086b0
   14800:	ba2e8ba3 	.word	0xba2e8ba3

00014804 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   14804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14808:	4606      	mov	r6, r0
   1480a:	f002 feaf 	bl	1756c <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1480e:	4605      	mov	r5, r0
   14810:	b140      	cbz	r0, 14824 <net_buf_get+0x20>
   14812:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   14814:	4f11      	ldr	r7, [pc, #68]	; (1485c <net_buf_get+0x58>)
   14816:	f8df 8048 	ldr.w	r8, [pc, #72]	; 14860 <net_buf_get+0x5c>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1481a:	7963      	ldrb	r3, [r4, #5]
   1481c:	f013 0301 	ands.w	r3, r3, #1
   14820:	d103      	bne.n	1482a <net_buf_get+0x26>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   14822:	6023      	str	r3, [r4, #0]

	return buf;
}
   14824:	4628      	mov	r0, r5
   14826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1482a:	2200      	movs	r2, #0
   1482c:	2300      	movs	r3, #0
   1482e:	4630      	mov	r0, r6
   14830:	f002 fe9c 	bl	1756c <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   14834:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   14836:	b950      	cbnz	r0, 1484e <net_buf_get+0x4a>
   14838:	4639      	mov	r1, r7
   1483a:	4640      	mov	r0, r8
   1483c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
   14840:	f005 f8d5 	bl	199ee <printk>
   14844:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   14848:	4638      	mov	r0, r7
   1484a:	f005 fb76 	bl	19f3a <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1484e:	7963      	ldrb	r3, [r4, #5]
   14850:	f023 0301 	bic.w	r3, r3, #1
   14854:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   14856:	6824      	ldr	r4, [r4, #0]
   14858:	e7df      	b.n	1481a <net_buf_get+0x16>
   1485a:	bf00      	nop
   1485c:	00020f3d 	.word	0x00020f3d
   14860:	0001ead7 	.word	0x0001ead7

00014864 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   14864:	b538      	push	{r3, r4, r5, lr}
   14866:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   14868:	4604      	mov	r4, r0
   1486a:	b950      	cbnz	r0, 14882 <net_buf_simple_reserve+0x1e>
   1486c:	490d      	ldr	r1, [pc, #52]	; (148a4 <net_buf_simple_reserve+0x40>)
   1486e:	480e      	ldr	r0, [pc, #56]	; (148a8 <net_buf_simple_reserve+0x44>)
   14870:	f240 12bb 	movw	r2, #443	; 0x1bb
   14874:	f005 f8bb 	bl	199ee <printk>
   14878:	f240 11bb 	movw	r1, #443	; 0x1bb
   1487c:	4809      	ldr	r0, [pc, #36]	; (148a4 <net_buf_simple_reserve+0x40>)
   1487e:	f005 fb5c 	bl	19f3a <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   14882:	88a3      	ldrh	r3, [r4, #4]
   14884:	b153      	cbz	r3, 1489c <net_buf_simple_reserve+0x38>
   14886:	4907      	ldr	r1, [pc, #28]	; (148a4 <net_buf_simple_reserve+0x40>)
   14888:	4807      	ldr	r0, [pc, #28]	; (148a8 <net_buf_simple_reserve+0x44>)
   1488a:	f44f 72de 	mov.w	r2, #444	; 0x1bc
   1488e:	f005 f8ae 	bl	199ee <printk>
   14892:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   14896:	4803      	ldr	r0, [pc, #12]	; (148a4 <net_buf_simple_reserve+0x40>)
   14898:	f005 fb4f 	bl	19f3a <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1489c:	68a3      	ldr	r3, [r4, #8]
   1489e:	442b      	add	r3, r5
   148a0:	6023      	str	r3, [r4, #0]
}
   148a2:	bd38      	pop	{r3, r4, r5, pc}
   148a4:	00020f3d 	.word	0x00020f3d
   148a8:	0001ead7 	.word	0x0001ead7

000148ac <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   148ac:	b538      	push	{r3, r4, r5, lr}
   148ae:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   148b0:	4605      	mov	r5, r0
   148b2:	b950      	cbnz	r0, 148ca <net_buf_put+0x1e>
   148b4:	4912      	ldr	r1, [pc, #72]	; (14900 <net_buf_put+0x54>)
   148b6:	4813      	ldr	r0, [pc, #76]	; (14904 <net_buf_put+0x58>)
   148b8:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   148bc:	f005 f897 	bl	199ee <printk>
   148c0:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   148c4:	480e      	ldr	r0, [pc, #56]	; (14900 <net_buf_put+0x54>)
   148c6:	f005 fb38 	bl	19f3a <assert_post_action>
	__ASSERT_NO_MSG(buf);
   148ca:	b954      	cbnz	r4, 148e2 <net_buf_put+0x36>
   148cc:	490c      	ldr	r1, [pc, #48]	; (14900 <net_buf_put+0x54>)
   148ce:	480d      	ldr	r0, [pc, #52]	; (14904 <net_buf_put+0x58>)
   148d0:	f240 12f9 	movw	r2, #505	; 0x1f9
   148d4:	f005 f88b 	bl	199ee <printk>
   148d8:	f240 11f9 	movw	r1, #505	; 0x1f9
   148dc:	4808      	ldr	r0, [pc, #32]	; (14900 <net_buf_put+0x54>)
   148de:	f005 fb2c 	bl	19f3a <assert_post_action>
{
   148e2:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   148e4:	6811      	ldr	r1, [r2, #0]
   148e6:	b929      	cbnz	r1, 148f4 <net_buf_put+0x48>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   148e8:	4621      	mov	r1, r4
   148ea:	4628      	mov	r0, r5
}
   148ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   148f0:	f002 bde8 	b.w	174c4 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   148f4:	7953      	ldrb	r3, [r2, #5]
   148f6:	f043 0301 	orr.w	r3, r3, #1
   148fa:	7153      	strb	r3, [r2, #5]
   148fc:	460a      	mov	r2, r1
   148fe:	e7f1      	b.n	148e4 <net_buf_put+0x38>
   14900:	00020f3d 	.word	0x00020f3d
   14904:	0001ead7 	.word	0x0001ead7

00014908 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   14908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1490c:	4605      	mov	r5, r0
   1490e:	b328      	cbz	r0, 1495c <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   14910:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   14912:	f04f 082c 	mov.w	r8, #44	; 0x2c
   14916:	4e1b      	ldr	r6, [pc, #108]	; (14984 <net_buf_unref+0x7c>)
		struct net_buf *frags = buf->frags;
   14918:	462c      	mov	r4, r5
		if (--buf->ref > 0) {
   1491a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1491c:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   1491e:	3b01      	subs	r3, #1
   14920:	b2db      	uxtb	r3, r3
   14922:	7123      	strb	r3, [r4, #4]
   14924:	b9c3      	cbnz	r3, 14958 <net_buf_unref+0x50>
		if (buf->__buf) {
   14926:	6921      	ldr	r1, [r4, #16]
   14928:	b159      	cbz	r1, 14942 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1492a:	7963      	ldrb	r3, [r4, #5]
   1492c:	079b      	lsls	r3, r3, #30
   1492e:	d407      	bmi.n	14940 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   14930:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   14932:	4620      	mov	r0, r4
   14934:	fb08 6303 	mla	r3, r8, r3, r6
   14938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1493a:	681b      	ldr	r3, [r3, #0]
   1493c:	689b      	ldr	r3, [r3, #8]
   1493e:	4798      	blx	r3
			buf->__buf = NULL;
   14940:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   14942:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   14944:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   14946:	fb08 6300 	mla	r3, r8, r0, r6
   1494a:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   1494c:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   1494e:	b193      	cbz	r3, 14976 <net_buf_unref+0x6e>
			pool->destroy(buf);
   14950:	4620      	mov	r0, r4
   14952:	4798      	blx	r3
	while (buf) {
   14954:	2d00      	cmp	r5, #0
   14956:	d1df      	bne.n	14918 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   14958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1495c:	490a      	ldr	r1, [pc, #40]	; (14988 <net_buf_unref+0x80>)
   1495e:	480b      	ldr	r0, [pc, #44]	; (1498c <net_buf_unref+0x84>)
   14960:	f44f 7202 	mov.w	r2, #520	; 0x208
   14964:	f005 f843 	bl	199ee <printk>
}
   14968:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1496c:	f44f 7102 	mov.w	r1, #520	; 0x208
   14970:	4805      	ldr	r0, [pc, #20]	; (14988 <net_buf_unref+0x80>)
   14972:	f005 bae2 	b.w	19f3a <assert_post_action>
	k_lifo_put(&pool->free, buf);
   14976:	4621      	mov	r1, r4
   14978:	fb00 6008 	mla	r0, r0, r8, r6
   1497c:	f008 fbbf 	bl	1d0fe <k_queue_prepend>
}
   14980:	e7e8      	b.n	14954 <net_buf_unref+0x4c>
   14982:	bf00      	nop
   14984:	200086b0 	.word	0x200086b0
   14988:	00020f3d 	.word	0x00020f3d
   1498c:	0001ead7 	.word	0x0001ead7

00014990 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   14990:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   14992:	4604      	mov	r4, r0
   14994:	b950      	cbnz	r0, 149ac <net_buf_ref+0x1c>
   14996:	4908      	ldr	r1, [pc, #32]	; (149b8 <net_buf_ref+0x28>)
   14998:	4808      	ldr	r0, [pc, #32]	; (149bc <net_buf_ref+0x2c>)
   1499a:	f240 2237 	movw	r2, #567	; 0x237
   1499e:	f005 f826 	bl	199ee <printk>
   149a2:	f240 2137 	movw	r1, #567	; 0x237
   149a6:	4804      	ldr	r0, [pc, #16]	; (149b8 <net_buf_ref+0x28>)
   149a8:	f005 fac7 	bl	19f3a <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   149ac:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   149ae:	4620      	mov	r0, r4
	buf->ref++;
   149b0:	3301      	adds	r3, #1
   149b2:	7123      	strb	r3, [r4, #4]
}
   149b4:	bd10      	pop	{r4, pc}
   149b6:	bf00      	nop
   149b8:	00020f3d 	.word	0x00020f3d
   149bc:	0001ead7 	.word	0x0001ead7

000149c0 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   149c0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   149c2:	4604      	mov	r4, r0
   149c4:	b950      	cbnz	r0, 149dc <net_buf_frag_last+0x1c>
   149c6:	4908      	ldr	r1, [pc, #32]	; (149e8 <net_buf_frag_last+0x28>)
   149c8:	4808      	ldr	r0, [pc, #32]	; (149ec <net_buf_frag_last+0x2c>)
   149ca:	f44f 721d 	mov.w	r2, #628	; 0x274
   149ce:	f005 f80e 	bl	199ee <printk>
   149d2:	f44f 711d 	mov.w	r1, #628	; 0x274
   149d6:	4804      	ldr	r0, [pc, #16]	; (149e8 <net_buf_frag_last+0x28>)
   149d8:	f005 faaf 	bl	19f3a <assert_post_action>

	while (buf->frags) {
   149dc:	4620      	mov	r0, r4
   149de:	6824      	ldr	r4, [r4, #0]
   149e0:	2c00      	cmp	r4, #0
   149e2:	d1fb      	bne.n	149dc <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   149e4:	bd10      	pop	{r4, pc}
   149e6:	bf00      	nop
   149e8:	00020f3d 	.word	0x00020f3d
   149ec:	0001ead7 	.word	0x0001ead7

000149f0 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   149f0:	b538      	push	{r3, r4, r5, lr}
   149f2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   149f4:	4604      	mov	r4, r0
   149f6:	b950      	cbnz	r0, 14a0e <net_buf_frag_insert+0x1e>
   149f8:	490f      	ldr	r1, [pc, #60]	; (14a38 <net_buf_frag_insert+0x48>)
   149fa:	4810      	ldr	r0, [pc, #64]	; (14a3c <net_buf_frag_insert+0x4c>)
   149fc:	f240 227f 	movw	r2, #639	; 0x27f
   14a00:	f004 fff5 	bl	199ee <printk>
   14a04:	f240 217f 	movw	r1, #639	; 0x27f
   14a08:	480b      	ldr	r0, [pc, #44]	; (14a38 <net_buf_frag_insert+0x48>)
   14a0a:	f005 fa96 	bl	19f3a <assert_post_action>
	__ASSERT_NO_MSG(frag);
   14a0e:	b955      	cbnz	r5, 14a26 <net_buf_frag_insert+0x36>
   14a10:	4909      	ldr	r1, [pc, #36]	; (14a38 <net_buf_frag_insert+0x48>)
   14a12:	480a      	ldr	r0, [pc, #40]	; (14a3c <net_buf_frag_insert+0x4c>)
   14a14:	f44f 7220 	mov.w	r2, #640	; 0x280
   14a18:	f004 ffe9 	bl	199ee <printk>
   14a1c:	f44f 7120 	mov.w	r1, #640	; 0x280
   14a20:	4805      	ldr	r0, [pc, #20]	; (14a38 <net_buf_frag_insert+0x48>)
   14a22:	f005 fa8a 	bl	19f3a <assert_post_action>

	if (parent->frags) {
   14a26:	6823      	ldr	r3, [r4, #0]
   14a28:	b123      	cbz	r3, 14a34 <net_buf_frag_insert+0x44>
		net_buf_frag_last(frag)->frags = parent->frags;
   14a2a:	4628      	mov	r0, r5
   14a2c:	f7ff ffc8 	bl	149c0 <net_buf_frag_last>
   14a30:	6823      	ldr	r3, [r4, #0]
   14a32:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   14a34:	6025      	str	r5, [r4, #0]
}
   14a36:	bd38      	pop	{r3, r4, r5, pc}
   14a38:	00020f3d 	.word	0x00020f3d
   14a3c:	0001ead7 	.word	0x0001ead7

00014a40 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   14a40:	b538      	push	{r3, r4, r5, lr}
   14a42:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   14a44:	460d      	mov	r5, r1
   14a46:	b951      	cbnz	r1, 14a5e <net_buf_frag_add+0x1e>
   14a48:	490c      	ldr	r1, [pc, #48]	; (14a7c <net_buf_frag_add+0x3c>)
   14a4a:	480d      	ldr	r0, [pc, #52]	; (14a80 <net_buf_frag_add+0x40>)
   14a4c:	f240 228b 	movw	r2, #651	; 0x28b
   14a50:	f004 ffcd 	bl	199ee <printk>
   14a54:	f240 218b 	movw	r1, #651	; 0x28b
   14a58:	4808      	ldr	r0, [pc, #32]	; (14a7c <net_buf_frag_add+0x3c>)
   14a5a:	f005 fa6e 	bl	19f3a <assert_post_action>

	if (!head) {
   14a5e:	b924      	cbnz	r4, 14a6a <net_buf_frag_add+0x2a>
		return net_buf_ref(frag);
   14a60:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   14a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   14a66:	f7ff bf93 	b.w	14990 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   14a6a:	4620      	mov	r0, r4
   14a6c:	f7ff ffa8 	bl	149c0 <net_buf_frag_last>
   14a70:	4629      	mov	r1, r5
   14a72:	f7ff ffbd 	bl	149f0 <net_buf_frag_insert>
}
   14a76:	4620      	mov	r0, r4
   14a78:	bd38      	pop	{r3, r4, r5, pc}
   14a7a:	bf00      	nop
   14a7c:	00020f3d 	.word	0x00020f3d
   14a80:	0001ead7 	.word	0x0001ead7

00014a84 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   14a84:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   14a86:	6882      	ldr	r2, [r0, #8]
   14a88:	6803      	ldr	r3, [r0, #0]
{
   14a8a:	4604      	mov	r4, r0
	return buf->data - buf->__buf;
   14a8c:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   14a8e:	4299      	cmp	r1, r3
{
   14a90:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   14a92:	d90a      	bls.n	14aaa <net_buf_simple_push+0x26>
   14a94:	4908      	ldr	r1, [pc, #32]	; (14ab8 <net_buf_simple_push+0x34>)
   14a96:	4809      	ldr	r0, [pc, #36]	; (14abc <net_buf_simple_push+0x38>)
   14a98:	f240 4204 	movw	r2, #1028	; 0x404
   14a9c:	f004 ffa7 	bl	199ee <printk>
   14aa0:	f240 4104 	movw	r1, #1028	; 0x404
   14aa4:	4804      	ldr	r0, [pc, #16]	; (14ab8 <net_buf_simple_push+0x34>)
   14aa6:	f005 fa48 	bl	19f3a <assert_post_action>
	buf->data -= len;
   14aaa:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   14aac:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   14aae:	1b40      	subs	r0, r0, r5
	buf->len += len;
   14ab0:	440d      	add	r5, r1
	buf->data -= len;
   14ab2:	6020      	str	r0, [r4, #0]
	buf->len += len;
   14ab4:	80a5      	strh	r5, [r4, #4]
}
   14ab6:	bd38      	pop	{r3, r4, r5, pc}
   14ab8:	00020f3d 	.word	0x00020f3d
   14abc:	0001ead7 	.word	0x0001ead7

00014ac0 <net_buf_simple_pull>:
{
   14ac0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   14ac2:	8883      	ldrh	r3, [r0, #4]
{
   14ac4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   14ac6:	428b      	cmp	r3, r1
{
   14ac8:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   14aca:	d20a      	bcs.n	14ae2 <net_buf_simple_pull+0x22>
   14acc:	4908      	ldr	r1, [pc, #32]	; (14af0 <net_buf_simple_pull+0x30>)
   14ace:	4809      	ldr	r0, [pc, #36]	; (14af4 <net_buf_simple_pull+0x34>)
   14ad0:	f240 4264 	movw	r2, #1124	; 0x464
   14ad4:	f004 ff8b 	bl	199ee <printk>
   14ad8:	f240 4164 	movw	r1, #1124	; 0x464
   14adc:	4804      	ldr	r0, [pc, #16]	; (14af0 <net_buf_simple_pull+0x30>)
   14ade:	f005 fa2c 	bl	19f3a <assert_post_action>
	buf->len -= len;
   14ae2:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   14ae4:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   14ae6:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   14ae8:	4428      	add	r0, r5
	buf->len -= len;
   14aea:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   14aec:	6020      	str	r0, [r4, #0]
}
   14aee:	bd38      	pop	{r3, r4, r5, pc}
   14af0:	00020f3d 	.word	0x00020f3d
   14af4:	0001ead7 	.word	0x0001ead7

00014af8 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   14af8:	8883      	ldrh	r3, [r0, #4]
{
   14afa:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   14afc:	428b      	cmp	r3, r1
{
   14afe:	4604      	mov	r4, r0
   14b00:	460d      	mov	r5, r1
	void *data = buf->data;
   14b02:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   14b04:	d20a      	bcs.n	14b1c <net_buf_simple_pull_mem+0x24>
   14b06:	4909      	ldr	r1, [pc, #36]	; (14b2c <net_buf_simple_pull_mem+0x34>)
   14b08:	4809      	ldr	r0, [pc, #36]	; (14b30 <net_buf_simple_pull_mem+0x38>)
   14b0a:	f44f 628e 	mov.w	r2, #1136	; 0x470
   14b0e:	f004 ff6e 	bl	199ee <printk>
   14b12:	f44f 618e 	mov.w	r1, #1136	; 0x470
   14b16:	4805      	ldr	r0, [pc, #20]	; (14b2c <net_buf_simple_pull_mem+0x34>)
   14b18:	f005 fa0f 	bl	19f3a <assert_post_action>
	buf->len -= len;
   14b1c:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   14b1e:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   14b20:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   14b22:	4429      	add	r1, r5
}
   14b24:	4630      	mov	r0, r6
	buf->len -= len;
   14b26:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   14b28:	6021      	str	r1, [r4, #0]
}
   14b2a:	bd70      	pop	{r4, r5, r6, pc}
   14b2c:	00020f3d 	.word	0x00020f3d
   14b30:	0001ead7 	.word	0x0001ead7

00014b34 <net_buf_simple_add>:
{
   14b34:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   14b36:	6803      	ldr	r3, [r0, #0]
   14b38:	8886      	ldrh	r6, [r0, #4]
   14b3a:	4604      	mov	r4, r0
   14b3c:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   14b3e:	f007 fc90 	bl	1c462 <net_buf_simple_tailroom>
   14b42:	4288      	cmp	r0, r1
{
   14b44:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   14b46:	d20a      	bcs.n	14b5e <net_buf_simple_add+0x2a>
   14b48:	4907      	ldr	r1, [pc, #28]	; (14b68 <net_buf_simple_add+0x34>)
   14b4a:	4808      	ldr	r0, [pc, #32]	; (14b6c <net_buf_simple_add+0x38>)
   14b4c:	f240 3215 	movw	r2, #789	; 0x315
   14b50:	f004 ff4d 	bl	199ee <printk>
   14b54:	f240 3115 	movw	r1, #789	; 0x315
   14b58:	4803      	ldr	r0, [pc, #12]	; (14b68 <net_buf_simple_add+0x34>)
   14b5a:	f005 f9ee 	bl	19f3a <assert_post_action>
	buf->len += len;
   14b5e:	88a1      	ldrh	r1, [r4, #4]
}
   14b60:	4630      	mov	r0, r6
	buf->len += len;
   14b62:	440d      	add	r5, r1
   14b64:	80a5      	strh	r5, [r4, #4]
}
   14b66:	bd70      	pop	{r4, r5, r6, pc}
   14b68:	00020f3d 	.word	0x00020f3d
   14b6c:	0001ead7 	.word	0x0001ead7

00014b70 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   14b70:	b570      	push	{r4, r5, r6, lr}
   14b72:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   14b74:	460c      	mov	r4, r1
	return port->data;
   14b76:	68c5      	ldr	r5, [r0, #12]
   14b78:	b941      	cbnz	r1, 14b8c <gpio_nrfx_manage_callback+0x1c>
   14b7a:	491e      	ldr	r1, [pc, #120]	; (14bf4 <gpio_nrfx_manage_callback+0x84>)
   14b7c:	481e      	ldr	r0, [pc, #120]	; (14bf8 <gpio_nrfx_manage_callback+0x88>)
   14b7e:	2224      	movs	r2, #36	; 0x24
   14b80:	f004 ff35 	bl	199ee <printk>
   14b84:	2124      	movs	r1, #36	; 0x24
   14b86:	481b      	ldr	r0, [pc, #108]	; (14bf4 <gpio_nrfx_manage_callback+0x84>)
   14b88:	f005 f9d7 	bl	19f3a <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   14b8c:	6863      	ldr	r3, [r4, #4]
   14b8e:	b943      	cbnz	r3, 14ba2 <gpio_nrfx_manage_callback+0x32>
   14b90:	4918      	ldr	r1, [pc, #96]	; (14bf4 <gpio_nrfx_manage_callback+0x84>)
   14b92:	4819      	ldr	r0, [pc, #100]	; (14bf8 <gpio_nrfx_manage_callback+0x88>)
   14b94:	2225      	movs	r2, #37	; 0x25
   14b96:	f004 ff2a 	bl	199ee <printk>
   14b9a:	2125      	movs	r1, #37	; 0x25
   14b9c:	4815      	ldr	r0, [pc, #84]	; (14bf4 <gpio_nrfx_manage_callback+0x84>)
   14b9e:	f005 f9cc 	bl	19f3a <assert_post_action>
	return list->head;
   14ba2:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   14ba4:	b15b      	cbz	r3, 14bbe <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14ba6:	2200      	movs	r2, #0
   14ba8:	429c      	cmp	r4, r3
   14baa:	d112      	bne.n	14bd2 <gpio_nrfx_manage_callback+0x62>
	return node->next;
   14bac:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   14bae:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
   14bb0:	b952      	cbnz	r2, 14bc8 <gpio_nrfx_manage_callback+0x58>
   14bb2:	42a1      	cmp	r1, r4
	list->head = node;
   14bb4:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   14bb6:	d100      	bne.n	14bba <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
   14bb8:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   14bba:	2300      	movs	r3, #0
   14bbc:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   14bbe:	b96e      	cbnz	r6, 14bdc <gpio_nrfx_manage_callback+0x6c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   14bc0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
   14bc2:	bd70      	pop	{r4, r5, r6, pc}
   14bc4:	460b      	mov	r3, r1
   14bc6:	e7ef      	b.n	14ba8 <gpio_nrfx_manage_callback+0x38>
Z_GENLIST_REMOVE(slist, snode)
   14bc8:	42a1      	cmp	r1, r4
	parent->next = child;
   14bca:	6013      	str	r3, [r2, #0]
	list->tail = node;
   14bcc:	bf08      	it	eq
   14bce:	60aa      	streq	r2, [r5, #8]
}
   14bd0:	e7f3      	b.n	14bba <gpio_nrfx_manage_callback+0x4a>
	return node->next;
   14bd2:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   14bd4:	461a      	mov	r2, r3
   14bd6:	2900      	cmp	r1, #0
   14bd8:	d1f4      	bne.n	14bc4 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   14bda:	b13e      	cbz	r6, 14bec <gpio_nrfx_manage_callback+0x7c>
	parent->next = child;
   14bdc:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   14bde:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
   14be0:	6023      	str	r3, [r4, #0]
	list->head = node;
   14be2:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   14be4:	2800      	cmp	r0, #0
   14be6:	d1eb      	bne.n	14bc0 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   14be8:	60ac      	str	r4, [r5, #8]
}
   14bea:	e7ea      	b.n	14bc2 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
   14bec:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   14bf0:	e7e7      	b.n	14bc2 <gpio_nrfx_manage_callback+0x52>
   14bf2:	bf00      	nop
   14bf4:	00020f69 	.word	0x00020f69
   14bf8:	0001ead7 	.word	0x0001ead7

00014bfc <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14bfc:	6802      	ldr	r2, [r0, #0]
{
   14bfe:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   14c00:	0953      	lsrs	r3, r2, #5
{
   14c02:	4604      	mov	r4, r0
    switch (port)
   14c04:	d029      	beq.n	14c5a <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   14c06:	2b01      	cmp	r3, #1
   14c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14c0c:	bf18      	it	ne
   14c0e:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   14c10:	f002 021f 	and.w	r2, r2, #31

    return (mask & (1UL << pin_number)) ? true : false;
   14c14:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   14c16:	07db      	lsls	r3, r3, #31
   14c18:	d40a      	bmi.n	14c30 <nrf_gpio_pin_port_decode+0x34>
   14c1a:	4912      	ldr	r1, [pc, #72]	; (14c64 <nrf_gpio_pin_port_decode+0x68>)
   14c1c:	4812      	ldr	r0, [pc, #72]	; (14c68 <nrf_gpio_pin_port_decode+0x6c>)
   14c1e:	f240 221a 	movw	r2, #538	; 0x21a
   14c22:	f004 fee4 	bl	199ee <printk>
   14c26:	f240 211a 	movw	r1, #538	; 0x21a
   14c2a:	480e      	ldr	r0, [pc, #56]	; (14c64 <nrf_gpio_pin_port_decode+0x68>)
   14c2c:	f005 f985 	bl	19f3a <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   14c30:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   14c32:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14c36:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   14c38:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14c3a:	d00c      	beq.n	14c56 <nrf_gpio_pin_port_decode+0x5a>
   14c3c:	2b01      	cmp	r3, #1
   14c3e:	d00f      	beq.n	14c60 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   14c40:	4908      	ldr	r1, [pc, #32]	; (14c64 <nrf_gpio_pin_port_decode+0x68>)
   14c42:	4809      	ldr	r0, [pc, #36]	; (14c68 <nrf_gpio_pin_port_decode+0x6c>)
   14c44:	f240 221f 	movw	r2, #543	; 0x21f
   14c48:	f004 fed1 	bl	199ee <printk>
   14c4c:	f240 211f 	movw	r1, #543	; 0x21f
   14c50:	4804      	ldr	r0, [pc, #16]	; (14c64 <nrf_gpio_pin_port_decode+0x68>)
   14c52:	f005 f972 	bl	19f3a <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   14c56:	4805      	ldr	r0, [pc, #20]	; (14c6c <nrf_gpio_pin_port_decode+0x70>)
}
   14c58:	bd10      	pop	{r4, pc}
    switch (port)
   14c5a:	f04f 33ff 	mov.w	r3, #4294967295
   14c5e:	e7d7      	b.n	14c10 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   14c60:	4803      	ldr	r0, [pc, #12]	; (14c70 <nrf_gpio_pin_port_decode+0x74>)
   14c62:	e7f9      	b.n	14c58 <nrf_gpio_pin_port_decode+0x5c>
   14c64:	00020f96 	.word	0x00020f96
   14c68:	0001ead7 	.word	0x0001ead7
   14c6c:	40842500 	.word	0x40842500
   14c70:	40842800 	.word	0x40842800

00014c74 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   14c74:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   14c76:	4b09      	ldr	r3, [pc, #36]	; (14c9c <gpio_nrfx_init+0x28>)
   14c78:	781a      	ldrb	r2, [r3, #0]
   14c7a:	b96a      	cbnz	r2, 14c98 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   14c7c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14c7e:	202f      	movs	r0, #47	; 0x2f
		gpio_initialized = true;
   14c80:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14c82:	2105      	movs	r1, #5
   14c84:	f7f8 f89c 	bl	cdc0 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   14c88:	202f      	movs	r0, #47	; 0x2f
   14c8a:	f7f8 f87b 	bl	cd84 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   14c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14c92:	4b03      	ldr	r3, [pc, #12]	; (14ca0 <gpio_nrfx_init+0x2c>)
   14c94:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   14c98:	2000      	movs	r0, #0
   14c9a:	bd08      	pop	{r3, pc}
   14c9c:	2000c5e9 	.word	0x2000c5e9
   14ca0:	4002f000 	.word	0x4002f000

00014ca4 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14ca4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   14ca8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14cac:	4680      	mov	r8, r0
   14cae:	460e      	mov	r6, r1
   14cb0:	4617      	mov	r7, r2
   14cb2:	4699      	mov	r9, r3
	return port->data;
   14cb4:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   14cb6:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14cba:	f040 80ab 	bne.w	14e14 <gpio_nrfx_pin_interrupt_configure+0x170>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   14cbe:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14cc0:	a801      	add	r0, sp, #4
   14cc2:	7a1b      	ldrb	r3, [r3, #8]
   14cc4:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   14cc8:	9301      	str	r3, [sp, #4]
   14cca:	f7ff ff97 	bl	14bfc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   14cce:	9b01      	ldr	r3, [sp, #4]
   14cd0:	3380      	adds	r3, #128	; 0x80
   14cd2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14cd6:	07d8      	lsls	r0, r3, #31
   14cd8:	f100 80bb 	bmi.w	14e52 <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14cdc:	2101      	movs	r1, #1
   14cde:	68e3      	ldr	r3, [r4, #12]
   14ce0:	40b1      	lsls	r1, r6
   14ce2:	4319      	orrs	r1, r3
   14ce4:	60e1      	str	r1, [r4, #12]
   14ce6:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14ce8:	2000      	movs	r0, #0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   14cea:	6963      	ldr	r3, [r4, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14cec:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   14cee:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
   14cf2:	bf0c      	ite	eq
   14cf4:	430b      	orreq	r3, r1
   14cf6:	438b      	bicne	r3, r1
   14cf8:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   14cfa:	69a3      	ldr	r3, [r4, #24]
   14cfc:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   14d00:	bf0c      	ite	eq
   14d02:	430b      	orreq	r3, r1
   14d04:	438b      	bicne	r3, r1
   14d06:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14d08:	6923      	ldr	r3, [r4, #16]
   14d0a:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   14d0e:	bf0c      	ite	eq
   14d10:	4319      	orreq	r1, r3
   14d12:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14d16:	f8d8 3004 	ldr.w	r3, [r8, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14d1a:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14d1c:	7a1b      	ldrb	r3, [r3, #8]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   14d1e:	4a4e      	ldr	r2, [pc, #312]	; (14e58 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   14d20:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
   14d24:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	return port->data;
   14d28:	f8d8 700c 	ldr.w	r7, [r8, #12]
   14d2c:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14d2e:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   14d32:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   14d36:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   14d3a:	428d      	cmp	r5, r1
   14d3c:	d175      	bne.n	14e2a <gpio_nrfx_pin_interrupt_configure+0x186>
		    && (intenset & BIT(i))) {
   14d3e:	fa23 f100 	lsr.w	r1, r3, r0
   14d42:	07c9      	lsls	r1, r1, #31
   14d44:	d571      	bpl.n	14e2a <gpio_nrfx_pin_interrupt_configure+0x186>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   14d46:	0083      	lsls	r3, r0, #2
   14d48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14d4c:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   14d50:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   14d54:	f021 0101 	bic.w	r1, r1, #1
   14d58:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   14d5c:	2301      	movs	r3, #1
   14d5e:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   14d60:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   14d64:	b2c0      	uxtb	r0, r0
   14d66:	f001 f9bf 	bl	160e8 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   14d6a:	4628      	mov	r0, r5
   14d6c:	2100      	movs	r1, #0
   14d6e:	f007 fbbc 	bl	1c4ea <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   14d72:	68f8      	ldr	r0, [r7, #12]
   14d74:	40f0      	lsrs	r0, r6
   14d76:	f010 0001 	ands.w	r0, r0, #1
   14d7a:	d048      	beq.n	14e0e <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
   14d7c:	6978      	ldr	r0, [r7, #20]
   14d7e:	40f0      	lsrs	r0, r6
   14d80:	f010 0401 	ands.w	r4, r0, #1
   14d84:	d059      	beq.n	14e3a <gpio_nrfx_pin_interrupt_configure+0x196>
			if (data->double_edge & BIT(pin)) {
   14d86:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   14d88:	a801      	add	r0, sp, #4
			if (data->double_edge & BIT(pin)) {
   14d8a:	40f3      	lsrs	r3, r6
   14d8c:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   14d8e:	bf57      	itett	pl
   14d90:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   14d92:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   14d94:	fa21 f606 	lsrpl.w	r6, r1, r6
   14d98:	f006 0601 	andpl.w	r6, r6, #1
   14d9c:	bf5c      	itt	pl
   14d9e:	f1c6 0602 	rsbpl	r6, r6, #2
   14da2:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   14da4:	f001 f9c0 	bl	16128 <nrfx_gpiote_channel_alloc>
   14da8:	4b2c      	ldr	r3, [pc, #176]	; (14e5c <gpio_nrfx_pin_interrupt_configure+0x1b8>)
   14daa:	4298      	cmp	r0, r3
   14dac:	d142      	bne.n	14e34 <gpio_nrfx_pin_interrupt_configure+0x190>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14dae:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   14db0:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14db4:	022d      	lsls	r5, r5, #8
   14db6:	008b      	lsls	r3, r1, #2
   14db8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14dbc:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14dc0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14dc4:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14dc8:	f422 324f 	bic.w	r2, r2, #211968	; 0x33c00
   14dcc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   14dd0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14dd4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   14dd8:	4315      	orrs	r5, r2
   14dda:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   14dde:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   14de2:	4b1f      	ldr	r3, [pc, #124]	; (14e60 <gpio_nrfx_pin_interrupt_configure+0x1bc>)
   14de4:	008a      	lsls	r2, r1, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14de6:	5098      	str	r0, [r3, r2]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   14de8:	f89d 1004 	ldrb.w	r1, [sp, #4]
   14dec:	589b      	ldr	r3, [r3, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   14dee:	008b      	lsls	r3, r1, #2
   14df0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   14df4:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
   14df8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   14dfc:	f042 0201 	orr.w	r2, r2, #1
   14e00:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   14e04:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
   14e06:	4a14      	ldr	r2, [pc, #80]	; (14e58 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
   14e08:	408b      	lsls	r3, r1
   14e0a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   14e0e:	b003      	add	sp, #12
   14e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14e14:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   14e18:	f47f af60 	bne.w	14cdc <gpio_nrfx_pin_interrupt_configure+0x38>
   14e1c:	2101      	movs	r1, #1
   14e1e:	fa01 f306 	lsl.w	r3, r1, r6
   14e22:	68e1      	ldr	r1, [r4, #12]
   14e24:	ea21 0103 	bic.w	r1, r1, r3
   14e28:	e75c      	b.n	14ce4 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14e2a:	3001      	adds	r0, #1
   14e2c:	2808      	cmp	r0, #8
   14e2e:	f47f af7e 	bne.w	14d2e <gpio_nrfx_pin_interrupt_configure+0x8a>
   14e32:	e79a      	b.n	14d6a <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   14e34:	f06f 0012 	mvn.w	r0, #18
   14e38:	e7e9      	b.n	14e0e <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14e3a:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   14e3c:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14e3e:	40f1      	lsrs	r1, r6
   14e40:	f001 0101 	and.w	r1, r1, #1
   14e44:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   14e48:	b2c9      	uxtb	r1, r1
   14e4a:	f007 fb4e 	bl	1c4ea <nrf_gpio_cfg_sense_set>
	int res = 0;
   14e4e:	4620      	mov	r0, r4
   14e50:	e7dd      	b.n	14e0e <gpio_nrfx_pin_interrupt_configure+0x16a>
		return -ENOTSUP;
   14e52:	f06f 0022 	mvn.w	r0, #34	; 0x22
   14e56:	e7da      	b.n	14e0e <gpio_nrfx_pin_interrupt_configure+0x16a>
   14e58:	4002f000 	.word	0x4002f000
   14e5c:	0bad0000 	.word	0x0bad0000
   14e60:	4002f100 	.word	0x4002f100

00014e64 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14e64:	4b2e      	ldr	r3, [pc, #184]	; (14f20 <gpio_nrfx_config+0xbc>)
{
   14e66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14e68:	4c2e      	ldr	r4, [pc, #184]	; (14f24 <gpio_nrfx_config+0xc0>)
   14e6a:	4013      	ands	r3, r2
   14e6c:	42a3      	cmp	r3, r4
	return port->config;
   14e6e:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14e70:	d044      	beq.n	14efc <gpio_nrfx_config+0x98>
   14e72:	d80e      	bhi.n	14e92 <gpio_nrfx_config+0x2e>
   14e74:	2b06      	cmp	r3, #6
   14e76:	d043      	beq.n	14f00 <gpio_nrfx_config+0x9c>
   14e78:	d806      	bhi.n	14e88 <gpio_nrfx_config+0x24>
   14e7a:	2b00      	cmp	r3, #0
   14e7c:	d040      	beq.n	14f00 <gpio_nrfx_config+0x9c>
   14e7e:	2b02      	cmp	r3, #2
   14e80:	d040      	beq.n	14f04 <gpio_nrfx_config+0xa0>
   14e82:	f06f 0015 	mvn.w	r0, #21
   14e86:	e037      	b.n	14ef8 <gpio_nrfx_config+0x94>
   14e88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14e8c:	d1f9      	bne.n	14e82 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   14e8e:	2401      	movs	r4, #1
   14e90:	e009      	b.n	14ea6 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14e92:	4c25      	ldr	r4, [pc, #148]	; (14f28 <gpio_nrfx_config+0xc4>)
   14e94:	42a3      	cmp	r3, r4
   14e96:	d037      	beq.n	14f08 <gpio_nrfx_config+0xa4>
   14e98:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   14e9c:	d036      	beq.n	14f0c <gpio_nrfx_config+0xa8>
   14e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   14ea2:	d1ee      	bne.n	14e82 <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   14ea4:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   14ea6:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   14ea8:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   14eac:	bf4c      	ite	mi
   14eae:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   14eb0:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   14eb4:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   14eb8:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   14eba:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   14ebe:	d507      	bpl.n	14ed0 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   14ec0:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14ec2:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   14ec6:	d523      	bpl.n	14f10 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   14ec8:	2301      	movs	r3, #1
   14eca:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   14ecc:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   14ed0:	7a03      	ldrb	r3, [r0, #8]
   14ed2:	f001 011f 	and.w	r1, r1, #31
   14ed6:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   14eda:	a801      	add	r0, sp, #4
   14edc:	9101      	str	r1, [sp, #4]
   14ede:	f7ff fe8d 	bl	14bfc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14ee2:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   14ee4:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   14ee8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   14eec:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14ef0:	3280      	adds	r2, #128	; 0x80
   14ef2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   14ef6:	2000      	movs	r0, #0
}
   14ef8:	b003      	add	sp, #12
   14efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   14efc:	2407      	movs	r4, #7
   14efe:	e7d2      	b.n	14ea6 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14f00:	461c      	mov	r4, r3
   14f02:	e7d0      	b.n	14ea6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   14f04:	2404      	movs	r4, #4
   14f06:	e7ce      	b.n	14ea6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   14f08:	2405      	movs	r4, #5
   14f0a:	e7cc      	b.n	14ea6 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   14f0c:	2403      	movs	r4, #3
   14f0e:	e7ca      	b.n	14ea6 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   14f10:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   14f12:	bf42      	ittt	mi
   14f14:	2301      	movmi	r3, #1
   14f16:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   14f18:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   14f1c:	e7d8      	b.n	14ed0 <gpio_nrfx_config+0x6c>
   14f1e:	bf00      	nop
   14f20:	00f00006 	.word	0x00f00006
   14f24:	00100006 	.word	0x00100006
   14f28:	00400002 	.word	0x00400002

00014f2c <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   14f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14f30:	460f      	mov	r7, r1
   14f32:	4616      	mov	r6, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14f34:	4604      	mov	r4, r0
   14f36:	b1e0      	cbz	r0, 14f72 <gpio_fire_callbacks.isra.0+0x46>
	return node->next;
   14f38:	6805      	ldr	r5, [r0, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   14f3a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 14f78 <gpio_fire_callbacks.isra.0+0x4c>
   14f3e:	f8df 903c 	ldr.w	r9, [pc, #60]	; 14f7c <gpio_fire_callbacks.isra.0+0x50>
		if (cb->pin_mask & pins) {
   14f42:	68a3      	ldr	r3, [r4, #8]
   14f44:	421e      	tst	r6, r3
   14f46:	d010      	beq.n	14f6a <gpio_fire_callbacks.isra.0+0x3e>
			__ASSERT(cb->handler, "No callback handler!");
   14f48:	6863      	ldr	r3, [r4, #4]
   14f4a:	b943      	cbnz	r3, 14f5e <gpio_fire_callbacks.isra.0+0x32>
   14f4c:	4641      	mov	r1, r8
   14f4e:	4648      	mov	r0, r9
   14f50:	2245      	movs	r2, #69	; 0x45
   14f52:	f004 fd4c 	bl	199ee <printk>
   14f56:	2145      	movs	r1, #69	; 0x45
   14f58:	4640      	mov	r0, r8
   14f5a:	f004 ffee 	bl	19f3a <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   14f5e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   14f62:	4621      	mov	r1, r4
   14f64:	4638      	mov	r0, r7
   14f66:	4032      	ands	r2, r6
   14f68:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14f6a:	b115      	cbz	r5, 14f72 <gpio_fire_callbacks.isra.0+0x46>
   14f6c:	462c      	mov	r4, r5
   14f6e:	682d      	ldr	r5, [r5, #0]
   14f70:	e7e7      	b.n	14f42 <gpio_fire_callbacks.isra.0+0x16>
		}
	}
}
   14f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14f76:	bf00      	nop
   14f78:	00020f69 	.word	0x00020f69
   14f7c:	0001ead7 	.word	0x0001ead7

00014f80 <gpiote_event_handler>:
{
   14f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   14f82:	2600      	movs	r6, #0
   14f84:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14f88:	4d28      	ldr	r5, [pc, #160]	; (1502c <gpiote_event_handler+0xac>)
   14f8a:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   14f8e:	b15c      	cbz	r4, 14fa8 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   14f90:	4827      	ldr	r0, [pc, #156]	; (15030 <gpiote_event_handler+0xb0>)
   14f92:	f007 fae3 	bl	1c55c <check_level_trigger_pins>
		fired_triggers[0] =
   14f96:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   14f98:	4826      	ldr	r0, [pc, #152]	; (15034 <gpiote_event_handler+0xb4>)
   14f9a:	f007 fadf 	bl	1c55c <check_level_trigger_pins>
		fired_triggers[1] =
   14f9e:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14fa0:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   14fa4:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   14fa8:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   14faa:	2601      	movs	r6, #1
   14fac:	4694      	mov	ip, r2
{
   14fae:	4922      	ldr	r1, [pc, #136]	; (15038 <gpiote_event_handler+0xb8>)
    return p_reg->INTENSET & mask;
   14fb0:	4d1e      	ldr	r5, [pc, #120]	; (1502c <gpiote_event_handler+0xac>)
   14fb2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   14fb6:	fa06 f002 	lsl.w	r0, r6, r2
   14fba:	4218      	tst	r0, r3
   14fbc:	d016      	beq.n	14fec <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14fbe:	680b      	ldr	r3, [r1, #0]
   14fc0:	b1a3      	cbz	r3, 14fec <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14fc2:	f502 73a2 	add.w	r3, r2, #324	; 0x144
   14fc6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   14fca:	af02      	add	r7, sp, #8
   14fcc:	f3c3 3040 	ubfx	r0, r3, #13, #1
   14fd0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   14fd4:	f850 7c08 	ldr.w	r7, [r0, #-8]
   14fd8:	f3c3 2304 	ubfx	r3, r3, #8, #5
   14fdc:	fa06 f303 	lsl.w	r3, r6, r3
   14fe0:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14fe2:	f8c1 c000 	str.w	ip, [r1]
   14fe6:	f840 3c08 	str.w	r3, [r0, #-8]
   14fea:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14fec:	3201      	adds	r2, #1
   14fee:	2a08      	cmp	r2, #8
   14ff0:	f101 0104 	add.w	r1, r1, #4
   14ff4:	d1dd      	bne.n	14fb2 <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   14ff6:	9a00      	ldr	r2, [sp, #0]
   14ff8:	b122      	cbz	r2, 15004 <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   14ffa:	4b10      	ldr	r3, [pc, #64]	; (1503c <gpiote_event_handler+0xbc>)
   14ffc:	490c      	ldr	r1, [pc, #48]	; (15030 <gpiote_event_handler+0xb0>)
   14ffe:	6858      	ldr	r0, [r3, #4]
   15000:	f7ff ff94 	bl	14f2c <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   15004:	9a01      	ldr	r2, [sp, #4]
   15006:	b122      	cbz	r2, 15012 <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   15008:	4b0d      	ldr	r3, [pc, #52]	; (15040 <gpiote_event_handler+0xc0>)
   1500a:	490a      	ldr	r1, [pc, #40]	; (15034 <gpiote_event_handler+0xb4>)
   1500c:	6858      	ldr	r0, [r3, #4]
   1500e:	f7ff ff8d 	bl	14f2c <gpio_fire_callbacks.isra.0>
	if (port_event) {
   15012:	b144      	cbz	r4, 15026 <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   15014:	4806      	ldr	r0, [pc, #24]	; (15030 <gpiote_event_handler+0xb0>)
   15016:	f007 fa7b 	bl	1c510 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1501a:	4806      	ldr	r0, [pc, #24]	; (15034 <gpiote_event_handler+0xb4>)
}
   1501c:	b003      	add	sp, #12
   1501e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   15022:	f007 ba75 	b.w	1c510 <cfg_level_pins>
}
   15026:	b003      	add	sp, #12
   15028:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1502a:	bf00      	nop
   1502c:	4002f000 	.word	0x4002f000
   15030:	200085c8 	.word	0x200085c8
   15034:	200085d8 	.word	0x200085d8
   15038:	4002f100 	.word	0x4002f100
   1503c:	2000abec 	.word	0x2000abec
   15040:	2000ac08 	.word	0x2000ac08

00015044 <vipm_nrf_1_register_callback>:
		    &vipm_nrf_##_idx##_driver_api)

#define VIPM_DEVICE(_idx, _)						\
	IF_ENABLED(CONFIG_IPM_MSG_CH_##_idx##_ENABLE, (VIPM_DEVICE_1(_idx);))

UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   15044:	4b02      	ldr	r3, [pc, #8]	; (15050 <vipm_nrf_1_register_callback+0xc>)
   15046:	6059      	str	r1, [r3, #4]
   15048:	645a      	str	r2, [r3, #68]	; 0x44
   1504a:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
   1504e:	4770      	bx	lr
   15050:	2000ac2c 	.word	0x2000ac2c

00015054 <vipm_nrf_0_set_enabled>:
   15054:	b508      	push	{r3, lr}
   15056:	2145      	movs	r1, #69	; 0x45
   15058:	4802      	ldr	r0, [pc, #8]	; (15064 <vipm_nrf_0_set_enabled+0x10>)
   1505a:	f004 fcc8 	bl	199ee <printk>
   1505e:	f06f 0015 	mvn.w	r0, #21
   15062:	bd08      	pop	{r3, pc}
   15064:	00020fd7 	.word	0x00020fd7

00015068 <vipm_nrf_0_register_callback>:
   15068:	2157      	movs	r1, #87	; 0x57
   1506a:	4801      	ldr	r0, [pc, #4]	; (15070 <vipm_nrf_0_register_callback+0x8>)
   1506c:	f004 bcbf 	b.w	199ee <printk>
   15070:	00020ff8 	.word	0x00020ff8

00015074 <vipm_nrf_1_send>:
   15074:	b508      	push	{r3, lr}
   15076:	2145      	movs	r1, #69	; 0x45
   15078:	4802      	ldr	r0, [pc, #8]	; (15084 <vipm_nrf_1_send+0x10>)
   1507a:	f004 fcb8 	bl	199ee <printk>
   1507e:	f06f 0015 	mvn.w	r0, #21
   15082:	bd08      	pop	{r3, pc}
   15084:	0002102f 	.word	0x0002102f

00015088 <vipm_nrf_init>:
{
   15088:	b538      	push	{r3, r4, r5, lr}
	if (!nrfx_vipm_data.ipm_init) {
   1508a:	4d0b      	ldr	r5, [pc, #44]	; (150b8 <vipm_nrf_init+0x30>)
   1508c:	f895 40c0 	ldrb.w	r4, [r5, #192]	; 0xc0
   15090:	b97c      	cbnz	r4, 150b2 <vipm_nrf_init+0x2a>
{
	/* Init IPC */
#if IS_ENABLED(CONFIG_IPM_NRF_SINGLE_INSTANCE)
	nrfx_ipc_init(0, nrfx_ipc_handler, (void *)&nrfx_ipm_data);
#else
	nrfx_ipc_init(0, vipm_dispatcher, (void *)&nrfx_ipm_data);
   15092:	4a0a      	ldr	r2, [pc, #40]	; (150bc <vipm_nrf_init+0x34>)
   15094:	490a      	ldr	r1, [pc, #40]	; (150c0 <vipm_nrf_init+0x38>)
   15096:	4620      	mov	r0, r4
   15098:	f001 f87e 	bl	16198 <nrfx_ipc_init>
#endif
	IRQ_CONNECT(DT_INST_IRQN(0),
   1509c:	4622      	mov	r2, r4
   1509e:	2101      	movs	r1, #1
   150a0:	202a      	movs	r0, #42	; 0x2a
   150a2:	f7f7 fe8d 	bl	cdc0 <z_arm_irq_priority_set>
		    DT_INST_IRQ(0, priority),
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	/* Set up signals and channels */
	nrfx_ipc_config_load(&ipc_cfg);
   150a6:	4807      	ldr	r0, [pc, #28]	; (150c4 <vipm_nrf_init+0x3c>)
   150a8:	f001 f89c 	bl	161e4 <nrfx_ipc_config_load>
		nrfx_vipm_data.ipm_init = true;
   150ac:	2301      	movs	r3, #1
   150ae:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
}
   150b2:	2000      	movs	r0, #0
   150b4:	bd38      	pop	{r3, r4, r5, pc}
   150b6:	bf00      	nop
   150b8:	2000ac2c 	.word	0x2000ac2c
   150bc:	2000ac24 	.word	0x2000ac24
   150c0:	000150c9 	.word	0x000150c9
   150c4:	0001e074 	.word	0x0001e074

000150c8 <vipm_dispatcher>:
{
   150c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   150cc:	4605      	mov	r5, r0
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   150ce:	4f17      	ldr	r7, [pc, #92]	; (1512c <vipm_dispatcher+0x64>)
   150d0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 15130 <vipm_dispatcher+0x68>
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   150d4:	4e17      	ldr	r6, [pc, #92]	; (15134 <vipm_dispatcher+0x6c>)
	while (event_mask) {
   150d6:	b90d      	cbnz	r5, 150dc <vipm_dispatcher+0x14>
}
   150d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   150dc:	fa95 f4a5 	rbit	r4, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   150e0:	b30c      	cbz	r4, 15126 <vipm_dispatcher+0x5e>
  {
    return 32U;
  }
  return __builtin_clz(value);
   150e2:	fab4 f384 	clz	r3, r4
		__ASSERT(event_idx < NRFX_IPC_ID_MAX_VALUE,
   150e6:	2b0f      	cmp	r3, #15
   150e8:	461c      	mov	r4, r3
   150ea:	dd08      	ble.n	150fe <vipm_dispatcher+0x36>
   150ec:	4639      	mov	r1, r7
   150ee:	4640      	mov	r0, r8
   150f0:	2283      	movs	r2, #131	; 0x83
   150f2:	f004 fc7c 	bl	199ee <printk>
   150f6:	2183      	movs	r1, #131	; 0x83
   150f8:	4638      	mov	r0, r7
   150fa:	f004 ff1e 	bl	19f3a <assert_post_action>
		event_mask &= ~BIT(event_idx);
   150fe:	2301      	movs	r3, #1
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   15100:	f856 9024 	ldr.w	r9, [r6, r4, lsl #2]
		event_mask &= ~BIT(event_idx);
   15104:	40a3      	lsls	r3, r4
   15106:	ea25 0503 	bic.w	r5, r5, r3
		if (nrfx_vipm_data.callback[event_idx] != NULL) {
   1510a:	f1b9 0f00 	cmp.w	r9, #0
   1510e:	d0e2      	beq.n	150d6 <vipm_dispatcher+0xe>
			nrfx_vipm_data.callback[event_idx]
   15110:	2300      	movs	r3, #0
   15112:	f104 0110 	add.w	r1, r4, #16
   15116:	3420      	adds	r4, #32
   15118:	461a      	mov	r2, r3
   1511a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   1511e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   15122:	47c8      	blx	r9
   15124:	e7d7      	b.n	150d6 <vipm_dispatcher+0xe>
    return 32U;
   15126:	2420      	movs	r4, #32
   15128:	e7e0      	b.n	150ec <vipm_dispatcher+0x24>
   1512a:	bf00      	nop
   1512c:	00021050 	.word	0x00021050
   15130:	0001ead7 	.word	0x0001ead7
   15134:	2000ac2c 	.word	0x2000ac2c

00015138 <vipm_nrf_0_send>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   15138:	2a10      	cmp	r2, #16
   1513a:	b508      	push	{r3, lr}
   1513c:	d810      	bhi.n	15160 <vipm_nrf_0_send+0x28>
   1513e:	b11a      	cbz	r2, 15148 <vipm_nrf_0_send+0x10>
   15140:	2157      	movs	r1, #87	; 0x57
   15142:	4809      	ldr	r0, [pc, #36]	; (15168 <vipm_nrf_0_send+0x30>)
   15144:	f004 fc53 	bl	199ee <printk>
   15148:	9b02      	ldr	r3, [sp, #8]
   1514a:	2b00      	cmp	r3, #0
   1514c:	dd03      	ble.n	15156 <vipm_nrf_0_send+0x1e>
   1514e:	2157      	movs	r1, #87	; 0x57
   15150:	4806      	ldr	r0, [pc, #24]	; (1516c <vipm_nrf_0_send+0x34>)
   15152:	f004 fc4c 	bl	199ee <printk>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ipc_task_trigger(NRF_IPC_Type * p_reg, nrf_ipc_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15156:	2201      	movs	r2, #1
   15158:	2000      	movs	r0, #0
   1515a:	4b05      	ldr	r3, [pc, #20]	; (15170 <vipm_nrf_0_send+0x38>)
   1515c:	601a      	str	r2, [r3, #0]
   1515e:	bd08      	pop	{r3, pc}
   15160:	f06f 0015 	mvn.w	r0, #21
   15164:	e7fb      	b.n	1515e <vipm_nrf_0_send+0x26>
   15166:	bf00      	nop
   15168:	0002107e 	.word	0x0002107e
   1516c:	000210b7 	.word	0x000210b7
   15170:	4002a000 	.word	0x4002a000

00015174 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   15174:	6802      	ldr	r2, [r0, #0]
{
   15176:	b510      	push	{r4, lr}
    switch (port)
   15178:	0953      	lsrs	r3, r2, #5
{
   1517a:	4604      	mov	r4, r0
    switch (port)
   1517c:	d029      	beq.n	151d2 <nrf_gpio_pin_port_decode+0x5e>
    uint32_t mask = 0;
   1517e:	2b01      	cmp	r3, #1
   15180:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15184:	bf18      	it	ne
   15186:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   15188:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1518c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1518e:	07db      	lsls	r3, r3, #31
   15190:	d40a      	bmi.n	151a8 <nrf_gpio_pin_port_decode+0x34>
   15192:	4912      	ldr	r1, [pc, #72]	; (151dc <nrf_gpio_pin_port_decode+0x68>)
   15194:	4812      	ldr	r0, [pc, #72]	; (151e0 <nrf_gpio_pin_port_decode+0x6c>)
   15196:	f240 221a 	movw	r2, #538	; 0x21a
   1519a:	f004 fc28 	bl	199ee <printk>
   1519e:	f240 211a 	movw	r1, #538	; 0x21a
   151a2:	480e      	ldr	r0, [pc, #56]	; (151dc <nrf_gpio_pin_port_decode+0x68>)
   151a4:	f004 fec9 	bl	19f3a <assert_post_action>
    uint32_t pin_number = *p_pin;
   151a8:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   151aa:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   151ae:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   151b0:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   151b2:	d00c      	beq.n	151ce <nrf_gpio_pin_port_decode+0x5a>
   151b4:	2b01      	cmp	r3, #1
   151b6:	d00f      	beq.n	151d8 <nrf_gpio_pin_port_decode+0x64>
            NRFX_ASSERT(0);
   151b8:	4908      	ldr	r1, [pc, #32]	; (151dc <nrf_gpio_pin_port_decode+0x68>)
   151ba:	4809      	ldr	r0, [pc, #36]	; (151e0 <nrf_gpio_pin_port_decode+0x6c>)
   151bc:	f240 221f 	movw	r2, #543	; 0x21f
   151c0:	f004 fc15 	bl	199ee <printk>
   151c4:	f240 211f 	movw	r1, #543	; 0x21f
   151c8:	4804      	ldr	r0, [pc, #16]	; (151dc <nrf_gpio_pin_port_decode+0x68>)
   151ca:	f004 feb6 	bl	19f3a <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   151ce:	4805      	ldr	r0, [pc, #20]	; (151e4 <nrf_gpio_pin_port_decode+0x70>)
}
   151d0:	bd10      	pop	{r4, pc}
    switch (port)
   151d2:	f04f 33ff 	mov.w	r3, #4294967295
   151d6:	e7d7      	b.n	15188 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   151d8:	4803      	ldr	r0, [pc, #12]	; (151e8 <nrf_gpio_pin_port_decode+0x74>)
   151da:	e7f9      	b.n	151d0 <nrf_gpio_pin_port_decode+0x5c>
   151dc:	00020f96 	.word	0x00020f96
   151e0:	0001ead7 	.word	0x0001ead7
   151e4:	40842500 	.word	0x40842500
   151e8:	40842800 	.word	0x40842800

000151ec <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   151ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   151ee:	794b      	ldrb	r3, [r1, #5]
   151f0:	2b01      	cmp	r3, #1
   151f2:	d02b      	beq.n	1524c <uarte_nrfx_configure+0x60>
   151f4:	2b03      	cmp	r3, #3
   151f6:	d126      	bne.n	15246 <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   151f8:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   151fa:	798b      	ldrb	r3, [r1, #6]
   151fc:	2b03      	cmp	r3, #3
   151fe:	d122      	bne.n	15246 <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   15200:	79cd      	ldrb	r5, [r1, #7]
   15202:	b125      	cbz	r5, 1520e <uarte_nrfx_configure+0x22>
   15204:	2d01      	cmp	r5, #1
   15206:	d11e      	bne.n	15246 <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   15208:	6843      	ldr	r3, [r0, #4]
   1520a:	791b      	ldrb	r3, [r3, #4]
   1520c:	b1db      	cbz	r3, 15246 <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1520e:	790a      	ldrb	r2, [r1, #4]
   15210:	2a01      	cmp	r2, #1
   15212:	d01d      	beq.n	15250 <uarte_nrfx_configure+0x64>
   15214:	2a02      	cmp	r2, #2
   15216:	d01f      	beq.n	15258 <uarte_nrfx_configure+0x6c>
   15218:	b9aa      	cbnz	r2, 15246 <uarte_nrfx_configure+0x5a>
   1521a:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1521c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1521e:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
   15220:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   15224:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
   15226:	d06e      	beq.n	15306 <uarte_nrfx_configure+0x11a>
   15228:	d833      	bhi.n	15292 <uarte_nrfx_configure+0xa6>
   1522a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1522e:	d06d      	beq.n	1530c <uarte_nrfx_configure+0x120>
   15230:	d81c      	bhi.n	1526c <uarte_nrfx_configure+0x80>
   15232:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   15236:	d06b      	beq.n	15310 <uarte_nrfx_configure+0x124>
   15238:	d810      	bhi.n	1525c <uarte_nrfx_configure+0x70>
   1523a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1523e:	d06a      	beq.n	15316 <uarte_nrfx_configure+0x12a>
   15240:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   15244:	d06a      	beq.n	1531c <uarte_nrfx_configure+0x130>
   15246:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1524a:	e05b      	b.n	15304 <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
   1524c:	2700      	movs	r7, #0
   1524e:	e7d4      	b.n	151fa <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   15250:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   15254:	220e      	movs	r2, #14
   15256:	e7e1      	b.n	1521c <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   15258:	2400      	movs	r4, #0
   1525a:	e7fb      	b.n	15254 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
   1525c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   15260:	d05f      	beq.n	15322 <uarte_nrfx_configure+0x136>
   15262:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   15266:	d1ee      	bne.n	15246 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   15268:	4b38      	ldr	r3, [pc, #224]	; (1534c <uarte_nrfx_configure+0x160>)
   1526a:	e03e      	b.n	152ea <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1526c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   15270:	d05a      	beq.n	15328 <uarte_nrfx_configure+0x13c>
   15272:	d807      	bhi.n	15284 <uarte_nrfx_configure+0x98>
   15274:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   15278:	d058      	beq.n	1532c <uarte_nrfx_configure+0x140>
   1527a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1527e:	d1e2      	bne.n	15246 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   15280:	4b33      	ldr	r3, [pc, #204]	; (15350 <uarte_nrfx_configure+0x164>)
   15282:	e032      	b.n	152ea <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15284:	f647 2c12 	movw	ip, #31250	; 0x7a12
   15288:	4563      	cmp	r3, ip
   1528a:	d1dc      	bne.n	15246 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1528c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   15290:	e02b      	b.n	152ea <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   15292:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   15296:	d04b      	beq.n	15330 <uarte_nrfx_configure+0x144>
   15298:	d813      	bhi.n	152c2 <uarte_nrfx_configure+0xd6>
   1529a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1529e:	d04a      	beq.n	15336 <uarte_nrfx_configure+0x14a>
   152a0:	d809      	bhi.n	152b6 <uarte_nrfx_configure+0xca>
   152a2:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   152a6:	4563      	cmp	r3, ip
   152a8:	d047      	beq.n	1533a <uarte_nrfx_configure+0x14e>
   152aa:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   152ae:	d1ca      	bne.n	15246 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   152b0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   152b4:	e019      	b.n	152ea <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   152b6:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   152ba:	d1c4      	bne.n	15246 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   152bc:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   152c0:	e013      	b.n	152ea <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   152c2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   152c6:	d03b      	beq.n	15340 <uarte_nrfx_configure+0x154>
   152c8:	d809      	bhi.n	152de <uarte_nrfx_configure+0xf2>
   152ca:	f8df c088 	ldr.w	ip, [pc, #136]	; 15354 <uarte_nrfx_configure+0x168>
   152ce:	4563      	cmp	r3, ip
   152d0:	d039      	beq.n	15346 <uarte_nrfx_configure+0x15a>
   152d2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   152d6:	d1b6      	bne.n	15246 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   152d8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   152dc:	e005      	b.n	152ea <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   152de:	f8df c078 	ldr.w	ip, [pc, #120]	; 15358 <uarte_nrfx_configure+0x16c>
   152e2:	4563      	cmp	r3, ip
   152e4:	d1af      	bne.n	15246 <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   152e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   152ea:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   152ee:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   152f0:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
   152f2:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
   152f4:	4322      	orrs	r2, r4
   152f6:	3304      	adds	r3, #4
   152f8:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   152fa:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
   152fe:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   15302:	2000      	movs	r0, #0
}
   15304:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   15306:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1530a:	e7ee      	b.n	152ea <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1530c:	4b13      	ldr	r3, [pc, #76]	; (1535c <uarte_nrfx_configure+0x170>)
   1530e:	e7ec      	b.n	152ea <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   15310:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   15314:	e7e9      	b.n	152ea <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
   15316:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1531a:	e7e6      	b.n	152ea <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
   1531c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   15320:	e7e3      	b.n	152ea <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   15322:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   15326:	e7e0      	b.n	152ea <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   15328:	4b0d      	ldr	r3, [pc, #52]	; (15360 <uarte_nrfx_configure+0x174>)
   1532a:	e7de      	b.n	152ea <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1532c:	4b0d      	ldr	r3, [pc, #52]	; (15364 <uarte_nrfx_configure+0x178>)
   1532e:	e7dc      	b.n	152ea <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   15330:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   15334:	e7d9      	b.n	152ea <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   15336:	4b0c      	ldr	r3, [pc, #48]	; (15368 <uarte_nrfx_configure+0x17c>)
   15338:	e7d7      	b.n	152ea <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1533a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1533e:	e7d4      	b.n	152ea <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   15340:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   15344:	e7d1      	b.n	152ea <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   15346:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1534a:	e7ce      	b.n	152ea <uarte_nrfx_configure+0xfe>
   1534c:	0013b000 	.word	0x0013b000
   15350:	004ea000 	.word	0x004ea000
   15354:	0003d090 	.word	0x0003d090
   15358:	000f4240 	.word	0x000f4240
   1535c:	00275000 	.word	0x00275000
   15360:	0075c000 	.word	0x0075c000
   15364:	003af000 	.word	0x003af000
   15368:	013a9000 	.word	0x013a9000

0001536c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1536c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15370:	4606      	mov	r6, r0
   15372:	4688      	mov	r8, r1
	return dev->data;
   15374:	68c7      	ldr	r7, [r0, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15376:	f007 ff1f 	bl	1d1b8 <k_is_in_isr>
   1537a:	b9b8      	cbnz	r0, 153ac <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   1537c:	4b28      	ldr	r3, [pc, #160]	; (15420 <uarte_nrfx_poll_out+0xb4>)
   1537e:	781b      	ldrb	r3, [r3, #0]
   15380:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   15384:	6872      	ldr	r2, [r6, #4]
   15386:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   15388:	b193      	cbz	r3, 153b0 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1538a:	f04f 0320 	mov.w	r3, #32
   1538e:	f3ef 8411 	mrs	r4, BASEPRI
   15392:	f383 8811 	msr	BASEPRI, r3
   15396:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1539a:	6870      	ldr	r0, [r6, #4]
   1539c:	f007 f9c1 	bl	1c722 <is_tx_ready.isra.0>
   153a0:	bb38      	cbnz	r0, 153f2 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   153a2:	f384 8811 	msr	BASEPRI, r4
   153a6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   153aa:	e7ee      	b.n	1538a <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   153ac:	2301      	movs	r3, #1
   153ae:	e7e9      	b.n	15384 <uarte_nrfx_poll_out+0x18>
   153b0:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   153b2:	6870      	ldr	r0, [r6, #4]
   153b4:	f007 f9b5 	bl	1c722 <is_tx_ready.isra.0>
   153b8:	b970      	cbnz	r0, 153d8 <uarte_nrfx_poll_out+0x6c>
   153ba:	2001      	movs	r0, #1
   153bc:	f007 fa51 	bl	1c862 <nrfx_busy_wait>
   153c0:	3c01      	subs	r4, #1
   153c2:	d1f6      	bne.n	153b2 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   153c4:	2100      	movs	r1, #0
   153c6:	2021      	movs	r0, #33	; 0x21
   153c8:	f003 f906 	bl	185d8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   153cc:	e7f0      	b.n	153b0 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   153ce:	f384 8811 	msr	BASEPRI, r4
   153d2:	f3bf 8f6f 	isb	sy
}
   153d6:	e7f5      	b.n	153c4 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   153d8:	f04f 0320 	mov.w	r3, #32
   153dc:	f3ef 8411 	mrs	r4, BASEPRI
   153e0:	f383 8811 	msr	BASEPRI, r3
   153e4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   153e8:	6870      	ldr	r0, [r6, #4]
   153ea:	f007 f99a 	bl	1c722 <is_tx_ready.isra.0>
   153ee:	2800      	cmp	r0, #0
   153f0:	d0ed      	beq.n	153ce <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   153f2:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   153f4:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   153f6:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   153fa:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   153fe:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15402:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   15406:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   1540a:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   1540e:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15412:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   15414:	f384 8811 	msr	BASEPRI, r4
   15418:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   1541c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15420:	2000c60b 	.word	0x2000c60b

00015424 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   15424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15428:	4605      	mov	r5, r0
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1542a:	f04f 0800 	mov.w	r8, #0
   1542e:	f04f 0914 	mov.w	r9, #20
   15432:	2200      	movs	r2, #0
   15434:	2101      	movs	r1, #1
   15436:	2008      	movs	r0, #8
   15438:	f7f7 fcc2 	bl	cdc0 <z_arm_irq_priority_set>
   1543c:	2008      	movs	r0, #8
   1543e:	f7f7 fca1 	bl	cd84 <arch_irq_enable>
	return config->uarte_regs;
   15442:	686b      	ldr	r3, [r5, #4]
	return dev->data;
   15444:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
   15446:	681c      	ldr	r4, [r3, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15448:	2701      	movs	r7, #1
   1544a:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1544e:	a801      	add	r0, sp, #4
	data->dev = dev;
   15450:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
   15452:	f8cd 9004 	str.w	r9, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15456:	f7ff fe8d 	bl	15174 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1545a:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1545c:	f04f 0a03 	mov.w	sl, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   15460:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
   15464:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   15466:	a801      	add	r0, sp, #4
   15468:	f8cd 9004 	str.w	r9, [sp, #4]
   1546c:	f7ff fe82 	bl	15174 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15470:	f04f 0b16 	mov.w	fp, #22
   15474:	9b01      	ldr	r3, [sp, #4]
   15476:	3380      	adds	r3, #128	; 0x80
   15478:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1547c:	a801      	add	r0, sp, #4
   1547e:	f8cd b004 	str.w	fp, [sp, #4]
   15482:	f7ff fe77 	bl	15174 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   15486:	9b01      	ldr	r3, [sp, #4]
   15488:	3380      	adds	r3, #128	; 0x80
   1548a:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   1548e:	f8c4 950c 	str.w	r9, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   15492:	f04f 0915 	mov.w	r9, #21
   15496:	f8c4 b514 	str.w	fp, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1549a:	a801      	add	r0, sp, #4
   1549c:	f8cd 9004 	str.w	r9, [sp, #4]
   154a0:	f7ff fe68 	bl	15174 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   154a4:	9b01      	ldr	r3, [sp, #4]
   154a6:	3380      	adds	r3, #128	; 0x80
   154a8:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
   154ac:	f04f 0813 	mov.w	r8, #19
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   154b0:	a801      	add	r0, sp, #4
   154b2:	f8cd 8004 	str.w	r8, [sp, #4]
   154b6:	f7ff fe5d 	bl	15174 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   154ba:	9b01      	ldr	r3, [sp, #4]
   154bc:	409f      	lsls	r7, r3
    p_reg->OUTSET = set_mask;
   154be:	6087      	str	r7, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   154c0:	a801      	add	r0, sp, #4
   154c2:	f8cd 8004 	str.w	r8, [sp, #4]
   154c6:	f7ff fe55 	bl	15174 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   154ca:	9b01      	ldr	r3, [sp, #4]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   154cc:	68e9      	ldr	r1, [r5, #12]
   154ce:	3380      	adds	r3, #128	; 0x80
   154d0:	f840 a023 	str.w	sl, [r0, r3, lsl #2]
   154d4:	3104      	adds	r1, #4
    p_reg->PSEL.RTS = pselrts;
   154d6:	f8c4 8508 	str.w	r8, [r4, #1288]	; 0x508
   154da:	4628      	mov	r0, r5
    p_reg->PSEL.CTS = pselcts;
   154dc:	f8c4 9510 	str.w	r9, [r4, #1296]	; 0x510
   154e0:	f7ff fe84 	bl	151ec <uarte_nrfx_configure>
	if (err) {
   154e4:	4607      	mov	r7, r0
   154e6:	b980      	cbnz	r0, 1550a <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
   154e8:	686b      	ldr	r3, [r5, #4]
   154ea:	799b      	ldrb	r3, [r3, #6]
   154ec:	2b00      	cmp	r3, #0
   154ee:	d03a      	beq.n	15566 <uarte_0_init+0x142>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   154f0:	eb06 000b 	add.w	r0, r6, fp
   154f4:	f000 fddc 	bl	160b0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   154f8:	4b2b      	ldr	r3, [pc, #172]	; (155a8 <uarte_0_init+0x184>)
   154fa:	4298      	cmp	r0, r3
   154fc:	d009      	beq.n	15512 <uarte_0_init+0xee>
		LOG_ERR("Failed to allocate PPI Channel");
   154fe:	2145      	movs	r1, #69	; 0x45
   15500:	482a      	ldr	r0, [pc, #168]	; (155ac <uarte_0_init+0x188>)
   15502:	f004 fa74 	bl	199ee <printk>
		return -EIO;
   15506:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
   1550a:	4638      	mov	r0, r7
   1550c:	b003      	add	sp, #12
   1550e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   15512:	f514 7990 	adds.w	r9, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   15516:	f896 8016 	ldrb.w	r8, [r6, #22]
   1551a:	d10a      	bne.n	15532 <uarte_0_init+0x10e>
   1551c:	4924      	ldr	r1, [pc, #144]	; (155b0 <uarte_0_init+0x18c>)
   1551e:	4825      	ldr	r0, [pc, #148]	; (155b4 <uarte_0_init+0x190>)
   15520:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   15524:	f004 fa63 	bl	199ee <printk>
   15528:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   1552c:	4820      	ldr	r0, [pc, #128]	; (155b0 <uarte_0_init+0x18c>)
   1552e:	f004 fd04 	bl	19f3a <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   15532:	f048 4800 	orr.w	r8, r8, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   15536:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1553a:	f8c9 8080 	str.w	r8, [r9, #128]	; 0x80
    NRFX_ASSERT(tep);
   1553e:	d10a      	bne.n	15556 <uarte_0_init+0x132>
   15540:	491b      	ldr	r1, [pc, #108]	; (155b0 <uarte_0_init+0x18c>)
   15542:	481c      	ldr	r0, [pc, #112]	; (155b4 <uarte_0_init+0x190>)
   15544:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
   15548:	f004 fa51 	bl	199ee <printk>
   1554c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   15550:	4817      	ldr	r0, [pc, #92]	; (155b0 <uarte_0_init+0x18c>)
   15552:	f004 fcf2 	bl	19f3a <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   15556:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   15558:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
   1555c:	7db2      	ldrb	r2, [r6, #22]
   1555e:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   15560:	4a15      	ldr	r2, [pc, #84]	; (155b8 <uarte_0_init+0x194>)
   15562:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15566:	2308      	movs	r3, #8
   15568:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1556c:	2300      	movs	r3, #0
   1556e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   15572:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   15576:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1557a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1557e:	2301      	movs	r3, #1
   15580:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15584:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   15586:	686b      	ldr	r3, [r5, #4]
   15588:	799b      	ldrb	r3, [r3, #6]
   1558a:	b91b      	cbnz	r3, 15594 <uarte_0_init+0x170>
    p_reg->INTENSET = mask;
   1558c:	f44f 7380 	mov.w	r3, #256	; 0x100
   15590:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   15594:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   15596:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15598:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1559c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   155a0:	2301      	movs	r3, #1
   155a2:	60a3      	str	r3, [r4, #8]
   155a4:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   155a6:	e7b0      	b.n	1550a <uarte_0_init+0xe6>
   155a8:	0bad0000 	.word	0x0bad0000
   155ac:	000210fa 	.word	0x000210fa
   155b0:	0002111e 	.word	0x0002111e
   155b4:	0001ead7 	.word	0x0001ead7
   155b8:	40017000 	.word	0x40017000

000155bc <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   155bc:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   155c0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   155c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   155c8:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   155cc:	4605      	mov	r5, r0
   155ce:	460e      	mov	r6, r1
   155d0:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   155d2:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   155d6:	d14f      	bne.n	15678 <z_impl_gpio_pin_interrupt_configure+0xbc>
   155d8:	492d      	ldr	r1, [pc, #180]	; (15690 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   155da:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
   155de:	482d      	ldr	r0, [pc, #180]	; (15694 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   155e0:	f004 fa05 	bl	199ee <printk>
   155e4:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   155e8:	4829      	ldr	r0, [pc, #164]	; (15690 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   155ea:	f004 fca6 	bl	19f3a <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   155ee:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   155f2:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   155f6:	d10a      	bne.n	1560e <z_impl_gpio_pin_interrupt_configure+0x52>
   155f8:	4925      	ldr	r1, [pc, #148]	; (15690 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   155fa:	4826      	ldr	r0, [pc, #152]	; (15694 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   155fc:	f240 12f1 	movw	r2, #497	; 0x1f1
   15600:	f004 f9f5 	bl	199ee <printk>
   15604:	f240 11f1 	movw	r1, #497	; 0x1f1
   15608:	4821      	ldr	r0, [pc, #132]	; (15690 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1560a:	f004 fc96 	bl	19f3a <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1560e:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   15612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   15616:	d10a      	bne.n	1562e <z_impl_gpio_pin_interrupt_configure+0x72>
   15618:	491d      	ldr	r1, [pc, #116]	; (15690 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1561a:	481e      	ldr	r0, [pc, #120]	; (15694 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1561c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   15620:	f004 f9e5 	bl	199ee <printk>
   15624:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   15628:	4819      	ldr	r0, [pc, #100]	; (15690 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1562a:	f004 fc86 	bl	19f3a <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1562e:	2701      	movs	r7, #1
   15630:	f8da 3000 	ldr.w	r3, [sl]
   15634:	40b7      	lsls	r7, r6
   15636:	421f      	tst	r7, r3
   15638:	d10a      	bne.n	15650 <z_impl_gpio_pin_interrupt_configure+0x94>
   1563a:	4915      	ldr	r1, [pc, #84]	; (15690 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1563c:	4815      	ldr	r0, [pc, #84]	; (15694 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   1563e:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   15642:	f004 f9d4 	bl	199ee <printk>
   15646:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   1564a:	4811      	ldr	r0, [pc, #68]	; (15690 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1564c:	f004 fc75 	bl	19f3a <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   15650:	0423      	lsls	r3, r4, #16
   15652:	d505      	bpl.n	15660 <z_impl_gpio_pin_interrupt_configure+0xa4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   15654:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   15658:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1565a:	bf18      	it	ne
   1565c:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   15660:	f8d8 7018 	ldr.w	r7, [r8, #24]
   15664:	4631      	mov	r1, r6
   15666:	4628      	mov	r0, r5
   15668:	46bc      	mov	ip, r7
   1566a:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   1566e:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   15672:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   15676:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   15678:	2b00      	cmp	r3, #0
   1567a:	d1b8      	bne.n	155ee <z_impl_gpio_pin_interrupt_configure+0x32>
   1567c:	4904      	ldr	r1, [pc, #16]	; (15690 <z_impl_gpio_pin_interrupt_configure+0xd4>)
   1567e:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
   15682:	4804      	ldr	r0, [pc, #16]	; (15694 <z_impl_gpio_pin_interrupt_configure+0xd8>)
   15684:	f004 f9b3 	bl	199ee <printk>
   15688:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   1568c:	e7ac      	b.n	155e8 <z_impl_gpio_pin_interrupt_configure+0x2c>
   1568e:	bf00      	nop
   15690:	0002116d 	.word	0x0002116d
   15694:	0001ead7 	.word	0x0001ead7

00015698 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   15698:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1569a:	2501      	movs	r5, #1
   1569c:	6843      	ldr	r3, [r0, #4]
   1569e:	408d      	lsls	r5, r1
   156a0:	681b      	ldr	r3, [r3, #0]
{
   156a2:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   156a4:	421d      	tst	r5, r3
{
   156a6:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   156a8:	d10a      	bne.n	156c0 <gpio_pin_set_raw+0x28>
   156aa:	490b      	ldr	r1, [pc, #44]	; (156d8 <gpio_pin_set_raw+0x40>)
   156ac:	480b      	ldr	r0, [pc, #44]	; (156dc <gpio_pin_set_raw+0x44>)
   156ae:	f44f 7270 	mov.w	r2, #960	; 0x3c0
   156b2:	f004 f99c 	bl	199ee <printk>
   156b6:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   156ba:	4807      	ldr	r0, [pc, #28]	; (156d8 <gpio_pin_set_raw+0x40>)
   156bc:	f004 fc3d 	bl	19f3a <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   156c0:	b136      	cbz	r6, 156d0 <gpio_pin_set_raw+0x38>
	return api->port_set_bits_raw(port, pins);
   156c2:	68a3      	ldr	r3, [r4, #8]
   156c4:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   156c6:	4629      	mov	r1, r5
   156c8:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   156ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   156ce:	4718      	bx	r3
   156d0:	68a3      	ldr	r3, [r4, #8]
   156d2:	691b      	ldr	r3, [r3, #16]
   156d4:	e7f7      	b.n	156c6 <gpio_pin_set_raw+0x2e>
   156d6:	bf00      	nop
   156d8:	0002116d 	.word	0x0002116d
   156dc:	0001ead7 	.word	0x0001ead7

000156e0 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   156e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   156e4:	4606      	mov	r6, r0
   156e6:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   156e8:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   156ea:	f8df 8044 	ldr.w	r8, [pc, #68]	; 15730 <dk_set_leds_state.part.0+0x50>
   156ee:	f8df 9044 	ldr.w	r9, [pc, #68]	; 15734 <dk_set_leds_state.part.0+0x54>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   156f2:	fa26 f204 	lsr.w	r2, r6, r4
   156f6:	fa27 f304 	lsr.w	r3, r7, r4
   156fa:	4313      	orrs	r3, r2
   156fc:	07db      	lsls	r3, r3, #31
   156fe:	d512      	bpl.n	15726 <dk_set_leds_state.part.0+0x46>
			int err = gpio_pin_set_raw(led_devs[i],
   15700:	43d2      	mvns	r2, r2
   15702:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   15706:	7919      	ldrb	r1, [r3, #4]
   15708:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   1570c:	f002 0201 	and.w	r2, r2, #1
   15710:	f7ff ffc2 	bl	15698 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   15714:	4605      	mov	r5, r0
   15716:	b130      	cbz	r0, 15726 <dk_set_leds_state.part.0+0x46>
				LOG_ERR("Cannot write LED gpio");
   15718:	2145      	movs	r1, #69	; 0x45
   1571a:	4807      	ldr	r0, [pc, #28]	; (15738 <dk_set_leds_state.part.0+0x58>)
   1571c:	f004 f967 	bl	199ee <printk>
			}
		}
	}

	return 0;
}
   15720:	4628      	mov	r0, r5
   15722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   15726:	3401      	adds	r4, #1
   15728:	2c04      	cmp	r4, #4
   1572a:	d1e2      	bne.n	156f2 <dk_set_leds_state.part.0+0x12>
	return 0;
   1572c:	2500      	movs	r5, #0
   1572e:	e7f7      	b.n	15720 <dk_set_leds_state.part.0+0x40>
   15730:	0001e194 	.word	0x0001e194
   15734:	2000ad34 	.word	0x2000ad34
   15738:	00021197 	.word	0x00021197

0001573c <buttons_scan_fn>:
{
   1573c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   15740:	2400      	movs	r4, #0
   15742:	4e6c      	ldr	r6, [pc, #432]	; (158f4 <buttons_scan_fn+0x1b8>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15744:	4625      	mov	r5, r4
{
   15746:	46b1      	mov	r9, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   15748:	4f6b      	ldr	r7, [pc, #428]	; (158f8 <buttons_scan_fn+0x1bc>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1574a:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 158fc <buttons_scan_fn+0x1c0>
   1574e:	f04f 0801 	mov.w	r8, #1
   15752:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
   15756:	791b      	ldrb	r3, [r3, #4]
   15758:	f859 bb04 	ldr.w	fp, [r9], #4
   1575c:	fa08 f803 	lsl.w	r8, r8, r3
   15760:	f8db 3004 	ldr.w	r3, [fp, #4]
   15764:	681b      	ldr	r3, [r3, #0]
   15766:	ea18 0f03 	tst.w	r8, r3
   1576a:	d10a      	bne.n	15782 <buttons_scan_fn+0x46>
   1576c:	4651      	mov	r1, sl
   1576e:	4864      	ldr	r0, [pc, #400]	; (15900 <buttons_scan_fn+0x1c4>)
   15770:	f44f 725e 	mov.w	r2, #888	; 0x378
   15774:	f004 f93b 	bl	199ee <printk>
   15778:	f44f 715e 	mov.w	r1, #888	; 0x378
   1577c:	4650      	mov	r0, sl
   1577e:	f004 fbdc 	bl	19f3a <assert_post_action>
	return api->port_get_raw(port, value);
   15782:	f8db 3008 	ldr.w	r3, [fp, #8]
   15786:	4658      	mov	r0, fp
   15788:	685b      	ldr	r3, [r3, #4]
   1578a:	a901      	add	r1, sp, #4
   1578c:	4798      	blx	r3
	if (ret == 0) {
   1578e:	2800      	cmp	r0, #0
   15790:	d16b      	bne.n	1586a <buttons_scan_fn+0x12e>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   15792:	9b01      	ldr	r3, [sp, #4]
   15794:	ea18 0f03 	tst.w	r8, r3
   15798:	d003      	beq.n	157a2 <buttons_scan_fn+0x66>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   1579a:	3501      	adds	r5, #1
   1579c:	2d04      	cmp	r5, #4
   1579e:	d1d6      	bne.n	1574e <buttons_scan_fn+0x12>
   157a0:	e069      	b.n	15876 <buttons_scan_fn+0x13a>
			ret |= 1U << i;
   157a2:	2301      	movs	r3, #1
   157a4:	40ab      	lsls	r3, r5
   157a6:	431c      	orrs	r4, r3
   157a8:	e7f7      	b.n	1579a <buttons_scan_fn+0x5e>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   157aa:	3d04      	subs	r5, #4
   157ac:	2d00      	cmp	r5, #0
   157ae:	f000 8087 	beq.w	158c0 <buttons_scan_fn+0x184>
			handler->cb(button_state, has_changed);
   157b2:	46aa      	mov	sl, r5
   157b4:	f85a 3b04 	ldr.w	r3, [sl], #4
   157b8:	4641      	mov	r1, r8
   157ba:	4620      	mov	r0, r4
   157bc:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   157be:	f1ba 0f00 	cmp.w	sl, #0
   157c2:	d07d      	beq.n	158c0 <buttons_scan_fn+0x184>
	return node->next;
   157c4:	686d      	ldr	r5, [r5, #4]
   157c6:	e078      	b.n	158ba <buttons_scan_fn+0x17e>
		initial_run = false;
   157c8:	2200      	movs	r2, #0
   157ca:	701a      	strb	r2, [r3, #0]
   157cc:	e07b      	b.n	158c6 <buttons_scan_fn+0x18a>
	__asm__ volatile(
   157ce:	f04f 0320 	mov.w	r3, #32
   157d2:	f3ef 8811 	mrs	r8, BASEPRI
   157d6:	f383 8811 	msr	BASEPRI, r3
   157da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   157de:	4849      	ldr	r0, [pc, #292]	; (15904 <buttons_scan_fn+0x1c8>)
   157e0:	f003 f91c 	bl	18a1c <z_spin_lock_valid>
   157e4:	b940      	cbnz	r0, 157f8 <buttons_scan_fn+0xbc>
   157e6:	4948      	ldr	r1, [pc, #288]	; (15908 <buttons_scan_fn+0x1cc>)
   157e8:	4845      	ldr	r0, [pc, #276]	; (15900 <buttons_scan_fn+0x1c4>)
   157ea:	227c      	movs	r2, #124	; 0x7c
   157ec:	f004 f8ff 	bl	199ee <printk>
   157f0:	217c      	movs	r1, #124	; 0x7c
   157f2:	4845      	ldr	r0, [pc, #276]	; (15908 <buttons_scan_fn+0x1cc>)
   157f4:	f004 fba1 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   157f8:	4842      	ldr	r0, [pc, #264]	; (15904 <buttons_scan_fn+0x1c8>)
   157fa:	f003 f92b 	bl	18a54 <z_spin_lock_set_owner>
		switch (state) {
   157fe:	4b43      	ldr	r3, [pc, #268]	; (1590c <buttons_scan_fn+0x1d0>)
   15800:	781a      	ldrb	r2, [r3, #0]
   15802:	2a01      	cmp	r2, #1
   15804:	d126      	bne.n	15854 <buttons_scan_fn+0x118>
			state = STATE_WAITING;
   15806:	2200      	movs	r2, #0
   15808:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   1580a:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1580e:	f856 0b04 	ldr.w	r0, [r6], #4
   15812:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   15814:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   15818:	f7ff fed0 	bl	155bc <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   1581c:	3401      	adds	r4, #1
   1581e:	2c04      	cmp	r4, #4
   15820:	4605      	mov	r5, r0
   15822:	d001      	beq.n	15828 <buttons_scan_fn+0xec>
   15824:	2800      	cmp	r0, #0
   15826:	d0f0      	beq.n	1580a <buttons_scan_fn+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15828:	4836      	ldr	r0, [pc, #216]	; (15904 <buttons_scan_fn+0x1c8>)
   1582a:	f003 f905 	bl	18a38 <z_spin_unlock_valid>
   1582e:	b940      	cbnz	r0, 15842 <buttons_scan_fn+0x106>
   15830:	4935      	ldr	r1, [pc, #212]	; (15908 <buttons_scan_fn+0x1cc>)
   15832:	4833      	ldr	r0, [pc, #204]	; (15900 <buttons_scan_fn+0x1c4>)
   15834:	22a7      	movs	r2, #167	; 0xa7
   15836:	f004 f8da 	bl	199ee <printk>
   1583a:	21a7      	movs	r1, #167	; 0xa7
   1583c:	4832      	ldr	r0, [pc, #200]	; (15908 <buttons_scan_fn+0x1cc>)
   1583e:	f004 fb7c 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   15842:	f388 8811 	msr	BASEPRI, r8
   15846:	f3bf 8f6f 	isb	sy
		if (err) {
   1584a:	2d00      	cmp	r5, #0
   1584c:	d04f      	beq.n	158ee <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot enable callbacks");
   1584e:	2145      	movs	r1, #69	; 0x45
   15850:	482f      	ldr	r0, [pc, #188]	; (15910 <buttons_scan_fn+0x1d4>)
   15852:	e047      	b.n	158e4 <buttons_scan_fn+0x1a8>
			__ASSERT_NO_MSG(false);
   15854:	22b4      	movs	r2, #180	; 0xb4
   15856:	492f      	ldr	r1, [pc, #188]	; (15914 <buttons_scan_fn+0x1d8>)
   15858:	4829      	ldr	r0, [pc, #164]	; (15900 <buttons_scan_fn+0x1c4>)
   1585a:	f004 f8c8 	bl	199ee <printk>
   1585e:	21b4      	movs	r1, #180	; 0xb4
   15860:	482c      	ldr	r0, [pc, #176]	; (15914 <buttons_scan_fn+0x1d8>)
   15862:	f004 fb6a 	bl	19f3a <assert_post_action>
		int err = 0;
   15866:	2500      	movs	r5, #0
			break;
   15868:	e7de      	b.n	15828 <buttons_scan_fn+0xec>
		if (val < 0) {
   1586a:	da96      	bge.n	1579a <buttons_scan_fn+0x5e>
			LOG_ERR("Cannot read gpio pin");
   1586c:	2145      	movs	r1, #69	; 0x45
   1586e:	482a      	ldr	r0, [pc, #168]	; (15918 <buttons_scan_fn+0x1dc>)
   15870:	f004 f8bd 	bl	199ee <printk>
			return 0;
   15874:	2400      	movs	r4, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15876:	4b29      	ldr	r3, [pc, #164]	; (1591c <buttons_scan_fn+0x1e0>)
   15878:	e8d3 2fef 	ldaex	r2, [r3]
   1587c:	e8c3 4fe1 	stlex	r1, r4, [r3]
   15880:	2900      	cmp	r1, #0
   15882:	d1f9      	bne.n	15878 <buttons_scan_fn+0x13c>
	if (!initial_run) {
   15884:	4b26      	ldr	r3, [pc, #152]	; (15920 <buttons_scan_fn+0x1e4>)
   15886:	f8df 909c 	ldr.w	r9, [pc, #156]	; 15924 <buttons_scan_fn+0x1e8>
   1588a:	781a      	ldrb	r2, [r3, #0]
   1588c:	2a00      	cmp	r2, #0
   1588e:	d19b      	bne.n	157c8 <buttons_scan_fn+0x8c>
		if (button_scan != last_button_scan) {
   15890:	f8d9 3000 	ldr.w	r3, [r9]
   15894:	42a3      	cmp	r3, r4
   15896:	d016      	beq.n	158c6 <buttons_scan_fn+0x18a>
			uint32_t has_changed = (button_scan ^ last_button_scan);
   15898:	ea83 0804 	eor.w	r8, r3, r4
	if (button_handler_cb != NULL) {
   1589c:	4b22      	ldr	r3, [pc, #136]	; (15928 <buttons_scan_fn+0x1ec>)
   1589e:	681b      	ldr	r3, [r3, #0]
   158a0:	b113      	cbz	r3, 158a8 <buttons_scan_fn+0x16c>
		button_handler_cb(button_state, has_changed);
   158a2:	4641      	mov	r1, r8
   158a4:	4620      	mov	r0, r4
   158a6:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   158a8:	f04f 33ff 	mov.w	r3, #4294967295
   158ac:	f04f 32ff 	mov.w	r2, #4294967295
   158b0:	481e      	ldr	r0, [pc, #120]	; (1592c <buttons_scan_fn+0x1f0>)
   158b2:	f001 fc13 	bl	170dc <z_impl_k_mutex_lock>
	return list->head;
   158b6:	4b1e      	ldr	r3, [pc, #120]	; (15930 <buttons_scan_fn+0x1f4>)
   158b8:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   158ba:	2d00      	cmp	r5, #0
   158bc:	f47f af75 	bne.w	157aa <buttons_scan_fn+0x6e>
	return z_impl_k_mutex_unlock(mutex);
   158c0:	481a      	ldr	r0, [pc, #104]	; (1592c <buttons_scan_fn+0x1f0>)
   158c2:	f001 fcd7 	bl	17274 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   158c6:	f8c9 4000 	str.w	r4, [r9]
	if (button_scan != 0) {
   158ca:	2c00      	cmp	r4, #0
   158cc:	f43f af7f 	beq.w	157ce <buttons_scan_fn+0x92>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   158d0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   158d4:	2300      	movs	r3, #0
   158d6:	4917      	ldr	r1, [pc, #92]	; (15934 <buttons_scan_fn+0x1f8>)
   158d8:	4817      	ldr	r0, [pc, #92]	; (15938 <buttons_scan_fn+0x1fc>)
   158da:	f003 f915 	bl	18b08 <k_delayed_work_submit_to_queue>
		if (err) {
   158de:	b130      	cbz	r0, 158ee <buttons_scan_fn+0x1b2>
			LOG_ERR("Cannot add work to workqueue");
   158e0:	2145      	movs	r1, #69	; 0x45
   158e2:	4816      	ldr	r0, [pc, #88]	; (1593c <buttons_scan_fn+0x200>)
}
   158e4:	b003      	add	sp, #12
   158e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Cannot enable callbacks");
   158ea:	f004 b880 	b.w	199ee <printk>
}
   158ee:	b003      	add	sp, #12
   158f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158f4:	2000acf0 	.word	0x2000acf0
   158f8:	0001e174 	.word	0x0001e174
   158fc:	0002116d 	.word	0x0002116d
   15900:	0001ead7 	.word	0x0001ead7
   15904:	2000ad44 	.word	0x2000ad44
   15908:	0001eb11 	.word	0x0001eb11
   1590c:	2000c60a 	.word	0x2000c60a
   15910:	0002122c 	.word	0x0002122c
   15914:	000211ee 	.word	0x000211ee
   15918:	000211b2 	.word	0x000211b2
   1591c:	2000ad48 	.word	0x2000ad48
   15920:	20008575 	.word	0x20008575
   15924:	2000ad2c 	.word	0x2000ad2c
   15928:	2000ad00 	.word	0x2000ad00
   1592c:	2000ad04 	.word	0x2000ad04
   15930:	2000ad18 	.word	0x2000ad18
   15934:	2000a260 	.word	0x2000a260
   15938:	2000a3b0 	.word	0x2000a3b0
   1593c:	000211cc 	.word	0x000211cc

00015940 <button_pressed>:
{
   15940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   15942:	f04f 0320 	mov.w	r3, #32
   15946:	f3ef 8611 	mrs	r6, BASEPRI
   1594a:	f383 8811 	msr	BASEPRI, r3
   1594e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15952:	4827      	ldr	r0, [pc, #156]	; (159f0 <button_pressed+0xb0>)
   15954:	f003 f862 	bl	18a1c <z_spin_lock_valid>
   15958:	b940      	cbnz	r0, 1596c <button_pressed+0x2c>
   1595a:	4926      	ldr	r1, [pc, #152]	; (159f4 <button_pressed+0xb4>)
   1595c:	4826      	ldr	r0, [pc, #152]	; (159f8 <button_pressed+0xb8>)
   1595e:	227c      	movs	r2, #124	; 0x7c
   15960:	f004 f845 	bl	199ee <printk>
   15964:	217c      	movs	r1, #124	; 0x7c
   15966:	4823      	ldr	r0, [pc, #140]	; (159f4 <button_pressed+0xb4>)
   15968:	f004 fae7 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   1596c:	4820      	ldr	r0, [pc, #128]	; (159f0 <button_pressed+0xb0>)
   1596e:	f003 f871 	bl	18a54 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   15972:	2400      	movs	r4, #0
   15974:	4d21      	ldr	r5, [pc, #132]	; (159fc <button_pressed+0xbc>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   15976:	4f22      	ldr	r7, [pc, #136]	; (15a00 <button_pressed+0xc0>)
   15978:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1597c:	f855 0b04 	ldr.w	r0, [r5], #4
   15980:	7919      	ldrb	r1, [r3, #4]
   15982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   15986:	3401      	adds	r4, #1
   15988:	f7ff fe18 	bl	155bc <z_impl_gpio_pin_interrupt_configure>
   1598c:	2c04      	cmp	r4, #4
   1598e:	d006      	beq.n	1599e <button_pressed+0x5e>
   15990:	2800      	cmp	r0, #0
   15992:	d0f1      	beq.n	15978 <button_pressed+0x38>
		LOG_ERR("Cannot disable callbacks");
   15994:	2145      	movs	r1, #69	; 0x45
   15996:	481b      	ldr	r0, [pc, #108]	; (15a04 <button_pressed+0xc4>)
   15998:	f004 f829 	bl	199ee <printk>
   1599c:	e001      	b.n	159a2 <button_pressed+0x62>
	if (err) {
   1599e:	2800      	cmp	r0, #0
   159a0:	d1f8      	bne.n	15994 <button_pressed+0x54>
	switch (state) {
   159a2:	4b19      	ldr	r3, [pc, #100]	; (15a08 <button_pressed+0xc8>)
   159a4:	781a      	ldrb	r2, [r3, #0]
   159a6:	b9ca      	cbnz	r2, 159dc <button_pressed+0x9c>
		state = STATE_SCANNING;
   159a8:	2201      	movs	r2, #1
   159aa:	4918      	ldr	r1, [pc, #96]	; (15a0c <button_pressed+0xcc>)
   159ac:	701a      	strb	r2, [r3, #0]
   159ae:	4818      	ldr	r0, [pc, #96]	; (15a10 <button_pressed+0xd0>)
   159b0:	2221      	movs	r2, #33	; 0x21
   159b2:	2300      	movs	r3, #0
   159b4:	f003 f8a8 	bl	18b08 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   159b8:	480d      	ldr	r0, [pc, #52]	; (159f0 <button_pressed+0xb0>)
   159ba:	f003 f83d 	bl	18a38 <z_spin_unlock_valid>
   159be:	b940      	cbnz	r0, 159d2 <button_pressed+0x92>
   159c0:	490c      	ldr	r1, [pc, #48]	; (159f4 <button_pressed+0xb4>)
   159c2:	480d      	ldr	r0, [pc, #52]	; (159f8 <button_pressed+0xb8>)
   159c4:	22a7      	movs	r2, #167	; 0xa7
   159c6:	f004 f812 	bl	199ee <printk>
   159ca:	21a7      	movs	r1, #167	; 0xa7
   159cc:	4809      	ldr	r0, [pc, #36]	; (159f4 <button_pressed+0xb4>)
   159ce:	f004 fab4 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   159d2:	f386 8811 	msr	BASEPRI, r6
   159d6:	f3bf 8f6f 	isb	sy
}
   159da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   159dc:	22eb      	movs	r2, #235	; 0xeb
   159de:	490d      	ldr	r1, [pc, #52]	; (15a14 <button_pressed+0xd4>)
   159e0:	4805      	ldr	r0, [pc, #20]	; (159f8 <button_pressed+0xb8>)
   159e2:	f004 f804 	bl	199ee <printk>
   159e6:	21eb      	movs	r1, #235	; 0xeb
   159e8:	480a      	ldr	r0, [pc, #40]	; (15a14 <button_pressed+0xd4>)
   159ea:	f004 faa6 	bl	19f3a <assert_post_action>
		break;
   159ee:	e7e3      	b.n	159b8 <button_pressed+0x78>
   159f0:	2000ad44 	.word	0x2000ad44
   159f4:	0001eb11 	.word	0x0001eb11
   159f8:	0001ead7 	.word	0x0001ead7
   159fc:	2000acf0 	.word	0x2000acf0
   15a00:	0001e174 	.word	0x0001e174
   15a04:	00021249 	.word	0x00021249
   15a08:	2000c60a 	.word	0x2000c60a
   15a0c:	2000a260 	.word	0x2000a260
   15a10:	2000a3b0 	.word	0x2000a3b0
   15a14:	000211ee 	.word	0x000211ee

00015a18 <dk_leds_init>:
{
   15a18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   15a1c:	2600      	movs	r6, #0
   15a1e:	4d23      	ldr	r5, [pc, #140]	; (15aac <dk_leds_init+0x94>)
   15a20:	f8df 908c 	ldr.w	r9, [pc, #140]	; 15ab0 <dk_leds_init+0x98>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15a24:	f8df a08c 	ldr.w	sl, [pc, #140]	; 15ab4 <dk_leds_init+0x9c>
		led_devs[i] = device_get_binding(led_pins[i].port);
   15a28:	6828      	ldr	r0, [r5, #0]
   15a2a:	f001 f835 	bl	16a98 <z_impl_device_get_binding>
   15a2e:	4604      	mov	r4, r0
   15a30:	f849 0b04 	str.w	r0, [r9], #4
		if (!led_devs[i]) {
   15a34:	b940      	cbnz	r0, 15a48 <dk_leds_init+0x30>
			LOG_ERR("Cannot bind gpio device");
   15a36:	2145      	movs	r1, #69	; 0x45
   15a38:	481f      	ldr	r0, [pc, #124]	; (15ab8 <dk_leds_init+0xa0>)
   15a3a:	f003 ffd8 	bl	199ee <printk>
			return -ENODEV;
   15a3e:	f06f 0412 	mvn.w	r4, #18
}
   15a42:	4620      	mov	r0, r4
   15a44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a48:	2301      	movs	r3, #1
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   15a4a:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   15a4e:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15a50:	fa03 f80b 	lsl.w	r8, r3, fp
   15a54:	6843      	ldr	r3, [r0, #4]
   15a56:	681b      	ldr	r3, [r3, #0]
   15a58:	ea18 0f03 	tst.w	r8, r3
   15a5c:	d10a      	bne.n	15a74 <dk_leds_init+0x5c>
   15a5e:	4651      	mov	r1, sl
   15a60:	4816      	ldr	r0, [pc, #88]	; (15abc <dk_leds_init+0xa4>)
   15a62:	f44f 7211 	mov.w	r2, #580	; 0x244
   15a66:	f003 ffc2 	bl	199ee <printk>
   15a6a:	f44f 7111 	mov.w	r1, #580	; 0x244
   15a6e:	4650      	mov	r0, sl
   15a70:	f004 fa63 	bl	19f3a <assert_post_action>
	return api->pin_configure(port, pin, flags);
   15a74:	68a3      	ldr	r3, [r4, #8]
   15a76:	4620      	mov	r0, r4
   15a78:	f44f 7200 	mov.w	r2, #512	; 0x200
   15a7c:	4659      	mov	r1, fp
   15a7e:	681b      	ldr	r3, [r3, #0]
   15a80:	4798      	blx	r3
	if (ret != 0) {
   15a82:	4604      	mov	r4, r0
   15a84:	b968      	cbnz	r0, 15aa2 <dk_leds_init+0x8a>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   15a86:	683b      	ldr	r3, [r7, #0]
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   15a88:	3601      	adds	r6, #1
   15a8a:	ea23 0308 	bic.w	r3, r3, r8
   15a8e:	2e04      	cmp	r6, #4
   15a90:	603b      	str	r3, [r7, #0]
   15a92:	f105 0508 	add.w	r5, r5, #8
   15a96:	d1c7      	bne.n	15a28 <dk_leds_init+0x10>
}
   15a98:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a9c:	210f      	movs	r1, #15
   15a9e:	f7ff be1f 	b.w	156e0 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   15aa2:	2145      	movs	r1, #69	; 0x45
   15aa4:	4806      	ldr	r0, [pc, #24]	; (15ac0 <dk_leds_init+0xa8>)
   15aa6:	f003 ffa2 	bl	199ee <printk>
			return err;
   15aaa:	e7ca      	b.n	15a42 <dk_leds_init+0x2a>
   15aac:	0001e194 	.word	0x0001e194
   15ab0:	2000ad34 	.word	0x2000ad34
   15ab4:	0002116d 	.word	0x0002116d
   15ab8:	00021267 	.word	0x00021267
   15abc:	0001ead7 	.word	0x0001ead7
   15ac0:	00021284 	.word	0x00021284

00015ac4 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15ac4:	4b05      	ldr	r3, [pc, #20]	; (15adc <dk_read_buttons+0x18>)
   15ac6:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   15aca:	b100      	cbz	r0, 15ace <dk_read_buttons+0xa>
		*button_state = current_state;
   15acc:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   15ace:	4804      	ldr	r0, [pc, #16]	; (15ae0 <dk_read_buttons+0x1c>)
   15ad0:	b111      	cbz	r1, 15ad8 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   15ad2:	6802      	ldr	r2, [r0, #0]
   15ad4:	405a      	eors	r2, r3
   15ad6:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   15ad8:	6003      	str	r3, [r0, #0]
}
   15ada:	4770      	bx	lr
   15adc:	2000ad48 	.word	0x2000ad48
   15ae0:	2000ad30 	.word	0x2000ad30

00015ae4 <dk_buttons_init>:
	button_handler_cb = button_handler;
   15ae4:	4b4f      	ldr	r3, [pc, #316]	; (15c24 <dk_buttons_init+0x140>)
{
   15ae6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   15aea:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   15aec:	4e4e      	ldr	r6, [pc, #312]	; (15c28 <dk_buttons_init+0x144>)
   15aee:	484f      	ldr	r0, [pc, #316]	; (15c2c <dk_buttons_init+0x148>)
   15af0:	f007 fada 	bl	1d0a8 <z_impl_k_mutex_init>
   15af4:	46b1      	mov	r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15af6:	2700      	movs	r7, #0
   15af8:	4d4d      	ldr	r5, [pc, #308]	; (15c30 <dk_buttons_init+0x14c>)
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15afa:	f8df a138 	ldr.w	sl, [pc, #312]	; 15c34 <dk_buttons_init+0x150>
		button_devs[i] = device_get_binding(button_pins[i].port);
   15afe:	6828      	ldr	r0, [r5, #0]
   15b00:	f000 ffca 	bl	16a98 <z_impl_device_get_binding>
   15b04:	4604      	mov	r4, r0
   15b06:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   15b0a:	b948      	cbnz	r0, 15b20 <dk_buttons_init+0x3c>
			LOG_ERR("Cannot bind gpio device");
   15b0c:	2145      	movs	r1, #69	; 0x45
   15b0e:	484a      	ldr	r0, [pc, #296]	; (15c38 <dk_buttons_init+0x154>)
   15b10:	f003 ff6d 	bl	199ee <printk>
			return -ENODEV;
   15b14:	f06f 0412 	mvn.w	r4, #18
}
   15b18:	4620      	mov	r0, r4
   15b1a:	b003      	add	sp, #12
   15b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b20:	2301      	movs	r3, #1
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   15b22:	f895 b004 	ldrb.w	fp, [r5, #4]
	struct gpio_driver_data *data =
   15b26:	f8d0 800c 	ldr.w	r8, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   15b2a:	fa03 f30b 	lsl.w	r3, r3, fp
   15b2e:	9301      	str	r3, [sp, #4]
   15b30:	6843      	ldr	r3, [r0, #4]
   15b32:	9a01      	ldr	r2, [sp, #4]
   15b34:	681b      	ldr	r3, [r3, #0]
   15b36:	421a      	tst	r2, r3
   15b38:	d10a      	bne.n	15b50 <dk_buttons_init+0x6c>
   15b3a:	4651      	mov	r1, sl
   15b3c:	483f      	ldr	r0, [pc, #252]	; (15c3c <dk_buttons_init+0x158>)
   15b3e:	f44f 7211 	mov.w	r2, #580	; 0x244
   15b42:	f003 ff54 	bl	199ee <printk>
   15b46:	f44f 7111 	mov.w	r1, #580	; 0x244
   15b4a:	4650      	mov	r0, sl
   15b4c:	f004 f9f5 	bl	19f3a <assert_post_action>
	return api->pin_configure(port, pin, flags);
   15b50:	68a3      	ldr	r3, [r4, #8]
   15b52:	4620      	mov	r0, r4
   15b54:	f44f 7288 	mov.w	r2, #272	; 0x110
   15b58:	4659      	mov	r1, fp
   15b5a:	681b      	ldr	r3, [r3, #0]
   15b5c:	4798      	blx	r3
	if (ret != 0) {
   15b5e:	4604      	mov	r4, r0
   15b60:	bb08      	cbnz	r0, 15ba6 <dk_buttons_init+0xc2>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   15b62:	f8d8 3000 	ldr.w	r3, [r8]
   15b66:	9a01      	ldr	r2, [sp, #4]
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15b68:	3701      	adds	r7, #1
   15b6a:	ea23 0302 	bic.w	r3, r3, r2
   15b6e:	2f04      	cmp	r7, #4
   15b70:	f8c8 3000 	str.w	r3, [r8]
   15b74:	f105 0508 	add.w	r5, r5, #8
   15b78:	d1c1      	bne.n	15afe <dk_buttons_init+0x1a>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15b7a:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   15b7c:	4680      	mov	r8, r0
		pin_mask |= BIT(button_pins[i].number);
   15b7e:	f04f 0a01 	mov.w	sl, #1
   15b82:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 15c28 <dk_buttons_init+0x144>
		err = gpio_pin_interrupt_configure(button_devs[i],
   15b86:	4b2a      	ldr	r3, [pc, #168]	; (15c30 <dk_buttons_init+0x14c>)
   15b88:	f859 0b04 	ldr.w	r0, [r9], #4
   15b8c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   15b90:	791f      	ldrb	r7, [r3, #4]
   15b92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   15b96:	4639      	mov	r1, r7
   15b98:	f7ff fd10 	bl	155bc <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   15b9c:	4604      	mov	r4, r0
   15b9e:	b138      	cbz	r0, 15bb0 <dk_buttons_init+0xcc>
			LOG_ERR("Cannot disable callbacks()");
   15ba0:	2145      	movs	r1, #69	; 0x45
   15ba2:	4827      	ldr	r0, [pc, #156]	; (15c40 <dk_buttons_init+0x15c>)
   15ba4:	e001      	b.n	15baa <dk_buttons_init+0xc6>
			LOG_ERR("Cannot configure button gpio");
   15ba6:	2145      	movs	r1, #69	; 0x45
   15ba8:	4826      	ldr	r0, [pc, #152]	; (15c44 <dk_buttons_init+0x160>)
		LOG_ERR("Cannot add work to workqueue");
   15baa:	f003 ff20 	bl	199ee <printk>
		return err;
   15bae:	e7b3      	b.n	15b18 <dk_buttons_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15bb0:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   15bb2:	fa0a f707 	lsl.w	r7, sl, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15bb6:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   15bb8:	ea48 0807 	orr.w	r8, r8, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15bbc:	d1e3      	bne.n	15b86 <dk_buttons_init+0xa2>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15bbe:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   15bc0:	4f21      	ldr	r7, [pc, #132]	; (15c48 <dk_buttons_init+0x164>)
   15bc2:	4b22      	ldr	r3, [pc, #136]	; (15c4c <dk_buttons_init+0x168>)
	callback->pin_mask = pin_mask;
   15bc4:	e9c7 3801 	strd	r3, r8, [r7, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   15bc8:	f856 0b04 	ldr.w	r0, [r6], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   15bcc:	6883      	ldr	r3, [r0, #8]
   15bce:	69db      	ldr	r3, [r3, #28]
   15bd0:	b13b      	cbz	r3, 15be2 <dk_buttons_init+0xfe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   15bd2:	2201      	movs	r2, #1
   15bd4:	4639      	mov	r1, r7
   15bd6:	4798      	blx	r3
		if (err) {
   15bd8:	4604      	mov	r4, r0
   15bda:	b128      	cbz	r0, 15be8 <dk_buttons_init+0x104>
			LOG_ERR("Cannot add callback");
   15bdc:	2145      	movs	r1, #69	; 0x45
   15bde:	481c      	ldr	r0, [pc, #112]	; (15c50 <dk_buttons_init+0x16c>)
   15be0:	e7e3      	b.n	15baa <dk_buttons_init+0xc6>
		return -ENOTSUP;
   15be2:	f06f 0422 	mvn.w	r4, #34	; 0x22
   15be6:	e7f9      	b.n	15bdc <dk_buttons_init+0xf8>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   15be8:	3501      	adds	r5, #1
   15bea:	2d04      	cmp	r5, #4
   15bec:	d1ec      	bne.n	15bc8 <dk_buttons_init+0xe4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   15bee:	4d19      	ldr	r5, [pc, #100]	; (15c54 <dk_buttons_init+0x170>)
   15bf0:	4601      	mov	r1, r0
   15bf2:	2230      	movs	r2, #48	; 0x30
   15bf4:	4628      	mov	r0, r5
   15bf6:	f005 f965 	bl	1aec4 <memset>
	state = STATE_SCANNING;
   15bfa:	2201      	movs	r2, #1
   15bfc:	4b16      	ldr	r3, [pc, #88]	; (15c58 <dk_buttons_init+0x174>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15bfe:	4629      	mov	r1, r5
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   15c00:	606b      	str	r3, [r5, #4]
   15c02:	4b16      	ldr	r3, [pc, #88]	; (15c5c <dk_buttons_init+0x178>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   15c04:	4816      	ldr	r0, [pc, #88]	; (15c60 <dk_buttons_init+0x17c>)
   15c06:	701a      	strb	r2, [r3, #0]
   15c08:	2200      	movs	r2, #0
   15c0a:	2300      	movs	r3, #0
   15c0c:	f002 ff7c 	bl	18b08 <k_delayed_work_submit_to_queue>
	if (err) {
   15c10:	4604      	mov	r4, r0
   15c12:	b110      	cbz	r0, 15c1a <dk_buttons_init+0x136>
		LOG_ERR("Cannot add work to workqueue");
   15c14:	2145      	movs	r1, #69	; 0x45
   15c16:	4813      	ldr	r0, [pc, #76]	; (15c64 <dk_buttons_init+0x180>)
   15c18:	e7c7      	b.n	15baa <dk_buttons_init+0xc6>
	dk_read_buttons(NULL, NULL);
   15c1a:	4601      	mov	r1, r0
   15c1c:	f7ff ff52 	bl	15ac4 <dk_read_buttons>
	return 0;
   15c20:	e77a      	b.n	15b18 <dk_buttons_init+0x34>
   15c22:	bf00      	nop
   15c24:	2000ad00 	.word	0x2000ad00
   15c28:	2000acf0 	.word	0x2000acf0
   15c2c:	2000ad04 	.word	0x2000ad04
   15c30:	0001e174 	.word	0x0001e174
   15c34:	0002116d 	.word	0x0002116d
   15c38:	00021267 	.word	0x00021267
   15c3c:	0001ead7 	.word	0x0001ead7
   15c40:	000212c5 	.word	0x000212c5
   15c44:	000212a3 	.word	0x000212a3
   15c48:	2000ad20 	.word	0x2000ad20
   15c4c:	00015941 	.word	0x00015941
   15c50:	000212e5 	.word	0x000212e5
   15c54:	2000a260 	.word	0x2000a260
   15c58:	0001573d 	.word	0x0001573d
   15c5c:	2000c60a 	.word	0x2000c60a
   15c60:	2000a3b0 	.word	0x2000a3b0
   15c64:	000211cc 	.word	0x000211cc

00015c68 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
	int err;

	if (led_idx > ARRAY_SIZE(led_pins)) {
   15c68:	2804      	cmp	r0, #4
{
   15c6a:	b510      	push	{r4, lr}
	if (led_idx > ARRAY_SIZE(led_pins)) {
   15c6c:	d907      	bls.n	15c7e <dk_set_led+0x16>
		LOG_ERR("LED index out of the range");
   15c6e:	2145      	movs	r1, #69	; 0x45
   15c70:	480d      	ldr	r0, [pc, #52]	; (15ca8 <dk_set_led+0x40>)
   15c72:	f003 febc 	bl	199ee <printk>
   15c76:	f06f 0415 	mvn.w	r4, #21
		IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS) ? !val : val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   15c7a:	4620      	mov	r0, r4
   15c7c:	bd10      	pop	{r4, pc}
	err = gpio_pin_set_raw(led_devs[led_idx], led_pins[led_idx].number,
   15c7e:	fab1 f281 	clz	r2, r1
   15c82:	4b0a      	ldr	r3, [pc, #40]	; (15cac <dk_set_led+0x44>)
   15c84:	0952      	lsrs	r2, r2, #5
   15c86:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   15c8a:	7919      	ldrb	r1, [r3, #4]
   15c8c:	4b08      	ldr	r3, [pc, #32]	; (15cb0 <dk_set_led+0x48>)
   15c8e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   15c92:	f7ff fd01 	bl	15698 <gpio_pin_set_raw>
	if (err) {
   15c96:	4604      	mov	r4, r0
   15c98:	2800      	cmp	r0, #0
   15c9a:	d0ee      	beq.n	15c7a <dk_set_led+0x12>
		LOG_ERR("Cannot write LED gpio");
   15c9c:	2145      	movs	r1, #69	; 0x45
   15c9e:	4805      	ldr	r0, [pc, #20]	; (15cb4 <dk_set_led+0x4c>)
   15ca0:	f003 fea5 	bl	199ee <printk>
   15ca4:	e7e9      	b.n	15c7a <dk_set_led+0x12>
   15ca6:	bf00      	nop
   15ca8:	000212fe 	.word	0x000212fe
   15cac:	0001e194 	.word	0x0001e194
   15cb0:	2000ad34 	.word	0x2000ad34
   15cb4:	00021197 	.word	0x00021197

00015cb8 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   15cb8:	4803      	ldr	r0, [pc, #12]	; (15cc8 <k_sys_fatal_error_handler+0x10>)
   15cba:	2145      	movs	r1, #69	; 0x45
{
   15cbc:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
   15cbe:	f003 fe96 	bl	199ee <printk>
	sys_arch_reboot(0);
   15cc2:	2000      	movs	r0, #0
   15cc4:	f7f7 fb7a 	bl	d3bc <sys_arch_reboot>

	CODE_UNREACHABLE;
   15cc8:	00021332 	.word	0x00021332

00015ccc <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   15ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15cd0:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   15cd2:	4c21      	ldr	r4, [pc, #132]	; (15d58 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   15cd4:	4e21      	ldr	r6, [pc, #132]	; (15d5c <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15cd6:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   15cda:	f8df 9084 	ldr.w	r9, [pc, #132]	; 15d60 <check_ext_api_requests+0x94>
{
   15cde:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15ce0:	45a8      	cmp	r8, r5
   15ce2:	d803      	bhi.n	15cec <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   15ce4:	2000      	movs	r0, #0
   15ce6:	b005      	add	sp, #20
   15ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   15cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15cee:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   15cf2:	681f      	ldr	r7, [r3, #0]
   15cf4:	ab01      	add	r3, sp, #4
   15cf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   15cfa:	220c      	movs	r2, #12
   15cfc:	4619      	mov	r1, r3
   15cfe:	4638      	mov	r0, r7
   15d00:	f005 f8a4 	bl	1ae4c <memcmp>
   15d04:	b990      	cbnz	r0, 15d2c <check_ext_api_requests+0x60>
   15d06:	b18f      	cbz	r7, 15d2c <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   15d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   15d0a:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   15d0c:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   15d0e:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   15d10:	4291      	cmp	r1, r2
   15d12:	d10b      	bne.n	15d2c <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   15d14:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   15d16:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   15d18:	4291      	cmp	r1, r2
   15d1a:	d807      	bhi.n	15d2c <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   15d1c:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   15d1e:	4291      	cmp	r1, r2
   15d20:	d904      	bls.n	15d2c <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   15d22:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   15d24:	695b      	ldr	r3, [r3, #20]
   15d26:	ea32 0303 	bics.w	r3, r2, r3
   15d2a:	d00a      	beq.n	15d42 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   15d2c:	6a27      	ldr	r7, [r4, #32]
   15d2e:	b167      	cbz	r7, 15d4a <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   15d30:	480c      	ldr	r0, [pc, #48]	; (15d64 <check_ext_api_requests+0x98>)
   15d32:	f003 fe5c 	bl	199ee <printk>
			k_panic();
   15d36:	4040      	eors	r0, r0
   15d38:	f380 8811 	msr	BASEPRI, r0
   15d3c:	f04f 0004 	mov.w	r0, #4
   15d40:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   15d42:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15d44:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   15d46:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   15d48:	e7ca      	b.n	15ce0 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   15d4a:	4648      	mov	r0, r9
   15d4c:	f003 fe4f 	bl	199ee <printk>
			*ext_api_req->ext_api = NULL;
   15d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15d52:	601f      	str	r7, [r3, #0]
   15d54:	e7f5      	b.n	15d42 <check_ext_api_requests+0x76>
   15d56:	bf00      	nop
   15d58:	0000823c 	.word	0x0000823c
   15d5c:	0001d8c0 	.word	0x0001d8c0
   15d60:	0002137d 	.word	0x0002137d
   15d64:	00021354 	.word	0x00021354

00015d68 <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   15d68:	4b04      	ldr	r3, [pc, #16]	; (15d7c <SystemCoreClockUpdate+0x14>)
   15d6a:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   15d6e:	4b04      	ldr	r3, [pc, #16]	; (15d80 <SystemCoreClockUpdate+0x18>)
   15d70:	f002 0203 	and.w	r2, r2, #3
   15d74:	40d3      	lsrs	r3, r2
   15d76:	4a03      	ldr	r2, [pc, #12]	; (15d84 <SystemCoreClockUpdate+0x1c>)
   15d78:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   15d7a:	4770      	bx	lr
   15d7c:	40005000 	.word	0x40005000
   15d80:	07a12000 	.word	0x07a12000
   15d84:	20008528 	.word	0x20008528

00015d88 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   15d88:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   15d8a:	4604      	mov	r4, r0
   15d8c:	b940      	cbnz	r0, 15da0 <nrfx_clock_init+0x18>
   15d8e:	4909      	ldr	r1, [pc, #36]	; (15db4 <nrfx_clock_init+0x2c>)
   15d90:	4809      	ldr	r0, [pc, #36]	; (15db8 <nrfx_clock_init+0x30>)
   15d92:	22b3      	movs	r2, #179	; 0xb3
   15d94:	f003 fe2b 	bl	199ee <printk>
   15d98:	21b3      	movs	r1, #179	; 0xb3
   15d9a:	4806      	ldr	r0, [pc, #24]	; (15db4 <nrfx_clock_init+0x2c>)
   15d9c:	f004 f8cd 	bl	19f3a <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   15da0:	4b06      	ldr	r3, [pc, #24]	; (15dbc <nrfx_clock_init+0x34>)
   15da2:	791a      	ldrb	r2, [r3, #4]
   15da4:	b922      	cbnz	r2, 15db0 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   15da6:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   15da8:	4805      	ldr	r0, [pc, #20]	; (15dc0 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
   15daa:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   15dac:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   15dae:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   15db0:	4804      	ldr	r0, [pc, #16]	; (15dc4 <nrfx_clock_init+0x3c>)
    return err_code;
   15db2:	e7fc      	b.n	15dae <nrfx_clock_init+0x26>
   15db4:	000213b0 	.word	0x000213b0
   15db8:	0001ead7 	.word	0x0001ead7
   15dbc:	2000ad4c 	.word	0x2000ad4c
   15dc0:	0bad0000 	.word	0x0bad0000
   15dc4:	0bad000c 	.word	0x0bad000c

00015dc8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   15dc8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15dca:	4b0d      	ldr	r3, [pc, #52]	; (15e00 <nrfx_clock_enable+0x38>)
   15dcc:	791b      	ldrb	r3, [r3, #4]
   15dce:	b943      	cbnz	r3, 15de2 <nrfx_clock_enable+0x1a>
   15dd0:	490c      	ldr	r1, [pc, #48]	; (15e04 <nrfx_clock_enable+0x3c>)
   15dd2:	480d      	ldr	r0, [pc, #52]	; (15e08 <nrfx_clock_enable+0x40>)
   15dd4:	22cc      	movs	r2, #204	; 0xcc
   15dd6:	f003 fe0a 	bl	199ee <printk>
   15dda:	21cc      	movs	r1, #204	; 0xcc
   15ddc:	4809      	ldr	r0, [pc, #36]	; (15e04 <nrfx_clock_enable+0x3c>)
   15dde:	f004 f8ac 	bl	19f3a <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   15de2:	2005      	movs	r0, #5
   15de4:	f7f6 ffde 	bl	cda4 <arch_irq_is_enabled>
   15de8:	b910      	cbnz	r0, 15df0 <nrfx_clock_enable+0x28>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   15dea:	2005      	movs	r0, #5
   15dec:	f7f6 ffca 	bl	cd84 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
   15df0:	2201      	movs	r2, #1
   15df2:	4b06      	ldr	r3, [pc, #24]	; (15e0c <nrfx_clock_enable+0x44>)
   15df4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   15df8:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   15dfc:	bd08      	pop	{r3, pc}
   15dfe:	bf00      	nop
   15e00:	2000ad4c 	.word	0x2000ad4c
   15e04:	000213b0 	.word	0x000213b0
   15e08:	0001ead7 	.word	0x0001ead7
   15e0c:	40005000 	.word	0x40005000

00015e10 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15e10:	4b30      	ldr	r3, [pc, #192]	; (15ed4 <nrfx_clock_start+0xc4>)
{
   15e12:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15e14:	791b      	ldrb	r3, [r3, #4]
{
   15e16:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15e18:	b953      	cbnz	r3, 15e30 <nrfx_clock_start+0x20>
   15e1a:	492f      	ldr	r1, [pc, #188]	; (15ed8 <nrfx_clock_start+0xc8>)
   15e1c:	482f      	ldr	r0, [pc, #188]	; (15edc <nrfx_clock_start+0xcc>)
   15e1e:	f44f 7284 	mov.w	r2, #264	; 0x108
   15e22:	f003 fde4 	bl	199ee <printk>
   15e26:	f44f 7184 	mov.w	r1, #264	; 0x108
   15e2a:	482b      	ldr	r0, [pc, #172]	; (15ed8 <nrfx_clock_start+0xc8>)
   15e2c:	f004 f885 	bl	19f3a <assert_post_action>
    switch (domain)
   15e30:	2c03      	cmp	r4, #3
   15e32:	d842      	bhi.n	15eba <nrfx_clock_start+0xaa>
   15e34:	e8df f004 	tbb	[pc, r4]
   15e38:	34271c02 	.word	0x34271c02
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   15e3c:	4b28      	ldr	r3, [pc, #160]	; (15ee0 <nrfx_clock_start+0xd0>)
   15e3e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15e42:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   15e46:	03c9      	lsls	r1, r1, #15
   15e48:	d510      	bpl.n	15e6c <nrfx_clock_start+0x5c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   15e4a:	f002 0203 	and.w	r2, r2, #3
   15e4e:	2a02      	cmp	r2, #2
   15e50:	d10c      	bne.n	15e6c <nrfx_clock_start+0x5c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   15e52:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e56:	2200      	movs	r2, #0
   15e58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15e5c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   15e60:	2202      	movs	r2, #2
   15e62:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e66:	2201      	movs	r2, #1
   15e68:	609a      	str	r2, [r3, #8]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   15e6a:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   15e6c:	2201      	movs	r2, #1
   15e6e:	e7f0      	b.n	15e52 <nrfx_clock_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e70:	2200      	movs	r2, #0
   15e72:	4b1b      	ldr	r3, [pc, #108]	; (15ee0 <nrfx_clock_start+0xd0>)
   15e74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   15e78:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   15e7c:	2201      	movs	r2, #1
   15e7e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e82:	601a      	str	r2, [r3, #0]
}
   15e84:	e7f1      	b.n	15e6a <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e86:	2200      	movs	r2, #0
   15e88:	4b15      	ldr	r3, [pc, #84]	; (15ee0 <nrfx_clock_start+0xd0>)
   15e8a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15e8e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   15e92:	f44f 7200 	mov.w	r2, #512	; 0x200
   15e96:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e9a:	2201      	movs	r2, #1
   15e9c:	621a      	str	r2, [r3, #32]
}
   15e9e:	e7e4      	b.n	15e6a <nrfx_clock_start+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15ea0:	2200      	movs	r2, #0
   15ea2:	4b0f      	ldr	r3, [pc, #60]	; (15ee0 <nrfx_clock_start+0xd0>)
   15ea4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15ea8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   15eac:	f44f 7280 	mov.w	r2, #256	; 0x100
   15eb0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15eb4:	2201      	movs	r2, #1
   15eb6:	619a      	str	r2, [r3, #24]
}
   15eb8:	e7d7      	b.n	15e6a <nrfx_clock_start+0x5a>
            NRFX_ASSERT(0);
   15eba:	4907      	ldr	r1, [pc, #28]	; (15ed8 <nrfx_clock_start+0xc8>)
   15ebc:	4807      	ldr	r0, [pc, #28]	; (15edc <nrfx_clock_start+0xcc>)
   15ebe:	f44f 729d 	mov.w	r2, #314	; 0x13a
   15ec2:	f003 fd94 	bl	199ee <printk>
}
   15ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
   15eca:	f44f 719d 	mov.w	r1, #314	; 0x13a
   15ece:	4802      	ldr	r0, [pc, #8]	; (15ed8 <nrfx_clock_start+0xc8>)
   15ed0:	f004 b833 	b.w	19f3a <assert_post_action>
   15ed4:	2000ad4c 	.word	0x2000ad4c
   15ed8:	000213b0 	.word	0x000213b0
   15edc:	0001ead7 	.word	0x0001ead7
   15ee0:	40005000 	.word	0x40005000

00015ee4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15ee4:	4b42      	ldr	r3, [pc, #264]	; (15ff0 <nrfx_clock_stop+0x10c>)
{
   15ee6:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15ee8:	791b      	ldrb	r3, [r3, #4]
{
   15eea:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   15eec:	b953      	cbnz	r3, 15f04 <nrfx_clock_stop+0x20>
   15eee:	4941      	ldr	r1, [pc, #260]	; (15ff4 <nrfx_clock_stop+0x110>)
   15ef0:	4841      	ldr	r0, [pc, #260]	; (15ff8 <nrfx_clock_stop+0x114>)
   15ef2:	f240 1241 	movw	r2, #321	; 0x141
   15ef6:	f003 fd7a 	bl	199ee <printk>
   15efa:	f240 1141 	movw	r1, #321	; 0x141
   15efe:	483d      	ldr	r0, [pc, #244]	; (15ff4 <nrfx_clock_stop+0x110>)
   15f00:	f004 f81b 	bl	19f3a <assert_post_action>
    switch (domain)
   15f04:	2c03      	cmp	r4, #3
   15f06:	d856      	bhi.n	15fb6 <nrfx_clock_stop+0xd2>
   15f08:	e8df f004 	tbb	[pc, r4]
   15f0c:	483b2002 	.word	0x483b2002
    p_reg->INTENCLR = mask;
   15f10:	2202      	movs	r2, #2
   15f12:	4b3a      	ldr	r3, [pc, #232]	; (15ffc <nrfx_clock_stop+0x118>)
   15f14:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f18:	2200      	movs	r2, #0
   15f1a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   15f1e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f22:	2201      	movs	r2, #1
   15f24:	60da      	str	r2, [r3, #12]
   15f26:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   15f2a:	4e34      	ldr	r6, [pc, #208]	; (15ffc <nrfx_clock_stop+0x118>)
    switch (domain)
   15f2c:	2c02      	cmp	r4, #2
   15f2e:	d04f      	beq.n	15fd0 <nrfx_clock_stop+0xec>
   15f30:	2c03      	cmp	r4, #3
   15f32:	d050      	beq.n	15fd6 <nrfx_clock_stop+0xf2>
   15f34:	2c00      	cmp	r4, #0
   15f36:	d151      	bne.n	15fdc <nrfx_clock_stop+0xf8>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   15f38:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   15f3c:	03db      	lsls	r3, r3, #15
   15f3e:	d51f      	bpl.n	15f80 <nrfx_clock_stop+0x9c>
   15f40:	2001      	movs	r0, #1
   15f42:	f006 fc8e 	bl	1c862 <nrfx_busy_wait>
   15f46:	3d01      	subs	r5, #1
   15f48:	d1f0      	bne.n	15f2c <nrfx_clock_stop+0x48>
   15f4a:	e019      	b.n	15f80 <nrfx_clock_stop+0x9c>
    p_reg->INTENCLR = mask;
   15f4c:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f4e:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f50:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
   15f54:	4c29      	ldr	r4, [pc, #164]	; (15ffc <nrfx_clock_stop+0x118>)
   15f56:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f5a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   15f5e:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f62:	6063      	str	r3, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15f64:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15f68:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   15f6c:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   15f70:	03d2      	lsls	r2, r2, #15
   15f72:	d505      	bpl.n	15f80 <nrfx_clock_stop+0x9c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   15f74:	b123      	cbz	r3, 15f80 <nrfx_clock_stop+0x9c>
   15f76:	2001      	movs	r0, #1
   15f78:	f006 fc73 	bl	1c862 <nrfx_busy_wait>
   15f7c:	3d01      	subs	r5, #1
   15f7e:	d1f1      	bne.n	15f64 <nrfx_clock_stop+0x80>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   15f80:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   15f82:	f44f 7200 	mov.w	r2, #512	; 0x200
   15f86:	4b1d      	ldr	r3, [pc, #116]	; (15ffc <nrfx_clock_stop+0x118>)
   15f88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15f8c:	2200      	movs	r2, #0
   15f8e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   15f92:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15f96:	2201      	movs	r2, #1
   15f98:	625a      	str	r2, [r3, #36]	; 0x24
}
   15f9a:	e7c4      	b.n	15f26 <nrfx_clock_stop+0x42>
    p_reg->INTENCLR = mask;
   15f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
   15fa0:	4b16      	ldr	r3, [pc, #88]	; (15ffc <nrfx_clock_stop+0x118>)
   15fa2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15fa6:	2200      	movs	r2, #0
   15fa8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   15fac:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15fb0:	2201      	movs	r2, #1
   15fb2:	61da      	str	r2, [r3, #28]
}
   15fb4:	e7b7      	b.n	15f26 <nrfx_clock_stop+0x42>
            NRFX_ASSERT(0);
   15fb6:	490f      	ldr	r1, [pc, #60]	; (15ff4 <nrfx_clock_stop+0x110>)
   15fb8:	480f      	ldr	r0, [pc, #60]	; (15ff8 <nrfx_clock_stop+0x114>)
   15fba:	f240 125d 	movw	r2, #349	; 0x15d
   15fbe:	f003 fd16 	bl	199ee <printk>
   15fc2:	f240 115d 	movw	r1, #349	; 0x15d
   15fc6:	480b      	ldr	r0, [pc, #44]	; (15ff4 <nrfx_clock_stop+0x110>)
}
   15fc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            NRFX_ASSERT(0);
   15fcc:	f003 bfb5 	b.w	19f3a <assert_post_action>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   15fd0:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
   15fd4:	e7b2      	b.n	15f3c <nrfx_clock_stop+0x58>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   15fd6:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
   15fda:	e7af      	b.n	15f3c <nrfx_clock_stop+0x58>
            NRFX_ASSERT(0);
   15fdc:	4908      	ldr	r1, [pc, #32]	; (16000 <nrfx_clock_stop+0x11c>)
   15fde:	4806      	ldr	r0, [pc, #24]	; (15ff8 <nrfx_clock_stop+0x114>)
   15fe0:	f240 3242 	movw	r2, #834	; 0x342
   15fe4:	f003 fd03 	bl	199ee <printk>
   15fe8:	f240 3142 	movw	r1, #834	; 0x342
   15fec:	4804      	ldr	r0, [pc, #16]	; (16000 <nrfx_clock_stop+0x11c>)
   15fee:	e7eb      	b.n	15fc8 <nrfx_clock_stop+0xe4>
   15ff0:	2000ad4c 	.word	0x2000ad4c
   15ff4:	000213b0 	.word	0x000213b0
   15ff8:	0001ead7 	.word	0x0001ead7
   15ffc:	40005000 	.word	0x40005000
   16000:	000213ed 	.word	0x000213ed

00016004 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16004:	4b28      	ldr	r3, [pc, #160]	; (160a8 <nrfx_power_clock_irq_handler+0xa4>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   16006:	b510      	push	{r4, lr}
   16008:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1600c:	b152      	cbz	r2, 16024 <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1600e:	2000      	movs	r0, #0
   16010:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   16014:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   16018:	2201      	movs	r2, #1
   1601a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1601e:	4b23      	ldr	r3, [pc, #140]	; (160ac <nrfx_power_clock_irq_handler+0xa8>)
   16020:	681b      	ldr	r3, [r3, #0]
   16022:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16024:	4b20      	ldr	r3, [pc, #128]	; (160a8 <nrfx_power_clock_irq_handler+0xa4>)
   16026:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1602a:	b18a      	cbz	r2, 16050 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1602c:	2200      	movs	r2, #0
   1602e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   16032:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16036:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1603a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1603e:	f002 0203 	and.w	r2, r2, #3
   16042:	2a01      	cmp	r2, #1
   16044:	f04f 0102 	mov.w	r1, #2
   16048:	d126      	bne.n	16098 <nrfx_power_clock_irq_handler+0x94>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1604a:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1604e:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16050:	4b15      	ldr	r3, [pc, #84]	; (160a8 <nrfx_power_clock_irq_handler+0xa4>)
   16052:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   16056:	b162      	cbz	r2, 16072 <nrfx_power_clock_irq_handler+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16058:	2200      	movs	r2, #0
   1605a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   1605e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   16062:	f44f 7280 	mov.w	r2, #256	; 0x100
   16066:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   1606a:	4b10      	ldr	r3, [pc, #64]	; (160ac <nrfx_power_clock_irq_handler+0xa8>)
   1606c:	2004      	movs	r0, #4
   1606e:	681b      	ldr	r3, [r3, #0]
   16070:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16072:	4b0d      	ldr	r3, [pc, #52]	; (160a8 <nrfx_power_clock_irq_handler+0xa4>)
   16074:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   16078:	b1aa      	cbz	r2, 160a6 <nrfx_power_clock_irq_handler+0xa2>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1607a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1607e:	2200      	movs	r2, #0
   16080:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   16084:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   16088:	f44f 7200 	mov.w	r2, #512	; 0x200
   1608c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   16090:	4b06      	ldr	r3, [pc, #24]	; (160ac <nrfx_power_clock_irq_handler+0xa8>)
   16092:	2005      	movs	r0, #5
   16094:	681b      	ldr	r3, [r3, #0]
   16096:	4718      	bx	r3
   16098:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1609c:	4b03      	ldr	r3, [pc, #12]	; (160ac <nrfx_power_clock_irq_handler+0xa8>)
   1609e:	2001      	movs	r0, #1
   160a0:	681b      	ldr	r3, [r3, #0]
   160a2:	4798      	blx	r3
   160a4:	e7d4      	b.n	16050 <nrfx_power_clock_irq_handler+0x4c>
}
   160a6:	bd10      	pop	{r4, pc}
   160a8:	40005000 	.word	0x40005000
   160ac:	2000ad4c 	.word	0x2000ad4c

000160b0 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   160b0:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   160b2:	4c0a      	ldr	r4, [pc, #40]	; (160dc <nrfx_dppi_channel_alloc+0x2c>)
   160b4:	6821      	ldr	r1, [r4, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
   160b6:	43ce      	mvns	r6, r1
   160b8:	d00e      	beq.n	160d8 <nrfx_dppi_channel_alloc+0x28>
   160ba:	2300      	movs	r3, #0
   160bc:	b2da      	uxtb	r2, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   160be:	fa26 f502 	lsr.w	r5, r6, r2
   160c2:	07ed      	lsls	r5, r5, #31
   160c4:	f103 0301 	add.w	r3, r3, #1
   160c8:	d5f8      	bpl.n	160bc <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   160ca:	2301      	movs	r3, #1
   160cc:	4093      	lsls	r3, r2
   160ce:	430b      	orrs	r3, r1
    *p_channel = channel;
   160d0:	7002      	strb	r2, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   160d2:	4803      	ldr	r0, [pc, #12]	; (160e0 <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   160d4:	6023      	str	r3, [r4, #0]
}
   160d6:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   160d8:	4802      	ldr	r0, [pc, #8]	; (160e4 <nrfx_dppi_channel_alloc+0x34>)
   160da:	e7fc      	b.n	160d6 <nrfx_dppi_channel_alloc+0x26>
   160dc:	2000ad54 	.word	0x2000ad54
   160e0:	0bad0000 	.word	0x0bad0000
   160e4:	0bad0002 	.word	0x0bad0002

000160e8 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   160e8:	2301      	movs	r3, #1
   160ea:	fa03 f000 	lsl.w	r0, r3, r0
   160ee:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   160f0:	b193      	cbz	r3, 16118 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   160f2:	f04f 0320 	mov.w	r3, #32
   160f6:	f3ef 8111 	mrs	r1, BASEPRI
   160fa:	f383 8811 	msr	BASEPRI, r3
   160fe:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   16102:	4a06      	ldr	r2, [pc, #24]	; (1611c <nrfx_gpiote_channel_free+0x34>)
   16104:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   16106:	ea23 0000 	bic.w	r0, r3, r0
   1610a:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   1610c:	f381 8811 	msr	BASEPRI, r1
   16110:	f3bf 8f6f 	isb	sy
   16114:	4802      	ldr	r0, [pc, #8]	; (16120 <nrfx_gpiote_channel_free+0x38>)
   16116:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   16118:	4802      	ldr	r0, [pc, #8]	; (16124 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1611a:	4770      	bx	lr
   1611c:	2000ad58 	.word	0x2000ad58
   16120:	0bad0000 	.word	0x0bad0000
   16124:	0bad0004 	.word	0x0bad0004

00016128 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   16128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1612c:	22ff      	movs	r2, #255	; 0xff
{
   1612e:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   16130:	2601      	movs	r6, #1
{
   16132:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   16134:	f8df e054 	ldr.w	lr, [pc, #84]	; 1618c <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   16138:	4815      	ldr	r0, [pc, #84]	; (16190 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1613a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 16194 <nrfx_gpiote_channel_alloc+0x6c>
   1613e:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   16140:	f04f 0120 	mov.w	r1, #32
   16144:	f3ef 8c11 	mrs	ip, BASEPRI
   16148:	f381 8811 	msr	BASEPRI, r1
   1614c:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   16150:	fa22 f103 	lsr.w	r1, r2, r3
   16154:	07c9      	lsls	r1, r1, #31
   16156:	d50a      	bpl.n	1616e <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   16158:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   1615c:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   16160:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   16162:	bf01      	itttt	eq
   16164:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   16166:	4339      	orreq	r1, r7
   16168:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
   1616c:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1616e:	f38c 8811 	msr	BASEPRI, ip
   16172:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   16176:	4540      	cmp	r0, r8
   16178:	d005      	beq.n	16186 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1617a:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1617e:	439a      	bics	r2, r3
   16180:	f104 0401 	add.w	r4, r4, #1
   16184:	d1db      	bne.n	1613e <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1618a:	bf00      	nop
   1618c:	2000ad58 	.word	0x2000ad58
   16190:	0bad0002 	.word	0x0bad0002
   16194:	0bad0000 	.word	0x0bad0000

00016198 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   16198:	b570      	push	{r4, r5, r6, lr}
   1619a:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   1619c:	460d      	mov	r5, r1
   1619e:	b941      	cbnz	r1, 161b2 <nrfx_ipc_init+0x1a>
   161a0:	490b      	ldr	r1, [pc, #44]	; (161d0 <nrfx_ipc_init+0x38>)
   161a2:	480c      	ldr	r0, [pc, #48]	; (161d4 <nrfx_ipc_init+0x3c>)
   161a4:	2232      	movs	r2, #50	; 0x32
   161a6:	f003 fc22 	bl	199ee <printk>
   161aa:	2132      	movs	r1, #50	; 0x32
   161ac:	4808      	ldr	r0, [pc, #32]	; (161d0 <nrfx_ipc_init+0x38>)
   161ae:	f003 fec4 	bl	19f3a <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   161b2:	4c09      	ldr	r4, [pc, #36]	; (161d8 <nrfx_ipc_init+0x40>)
   161b4:	7923      	ldrb	r3, [r4, #4]
   161b6:	b943      	cbnz	r3, 161ca <nrfx_ipc_init+0x32>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   161b8:	202a      	movs	r0, #42	; 0x2a
   161ba:	f7f6 fde3 	bl	cd84 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   161be:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   161c0:	4806      	ldr	r0, [pc, #24]	; (161dc <nrfx_ipc_init+0x44>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   161c2:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   161c4:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   161c6:	60a6      	str	r6, [r4, #8]
}
   161c8:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   161ca:	4805      	ldr	r0, [pc, #20]	; (161e0 <nrfx_ipc_init+0x48>)
   161cc:	e7fc      	b.n	161c8 <nrfx_ipc_init+0x30>
   161ce:	bf00      	nop
   161d0:	00021421 	.word	0x00021421
   161d4:	0001ead7 	.word	0x0001ead7
   161d8:	2000adb8 	.word	0x2000adb8
   161dc:	0bad0000 	.word	0x0bad0000
   161e0:	0bad000c 	.word	0x0bad000c

000161e4 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   161e4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   161e6:	4604      	mov	r4, r0
   161e8:	b940      	cbnz	r0, 161fc <nrfx_ipc_config_load+0x18>
   161ea:	4919      	ldr	r1, [pc, #100]	; (16250 <nrfx_ipc_config_load+0x6c>)
   161ec:	4819      	ldr	r0, [pc, #100]	; (16254 <nrfx_ipc_config_load+0x70>)
   161ee:	2244      	movs	r2, #68	; 0x44
   161f0:	f003 fbfd 	bl	199ee <printk>
   161f4:	2144      	movs	r1, #68	; 0x44
   161f6:	4816      	ldr	r0, [pc, #88]	; (16250 <nrfx_ipc_config_load+0x6c>)
   161f8:	f003 fe9f 	bl	19f3a <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   161fc:	4b16      	ldr	r3, [pc, #88]	; (16258 <nrfx_ipc_config_load+0x74>)
   161fe:	791b      	ldrb	r3, [r3, #4]
   16200:	2b01      	cmp	r3, #1
   16202:	d008      	beq.n	16216 <nrfx_ipc_config_load+0x32>
   16204:	4912      	ldr	r1, [pc, #72]	; (16250 <nrfx_ipc_config_load+0x6c>)
   16206:	4813      	ldr	r0, [pc, #76]	; (16254 <nrfx_ipc_config_load+0x70>)
   16208:	2245      	movs	r2, #69	; 0x45
   1620a:	f003 fbf0 	bl	199ee <printk>
   1620e:	2145      	movs	r1, #69	; 0x45
   16210:	480f      	ldr	r0, [pc, #60]	; (16250 <nrfx_ipc_config_load+0x6c>)
   16212:	f003 fe92 	bl	19f3a <assert_post_action>
{
   16216:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   16218:	4a10      	ldr	r2, [pc, #64]	; (1625c <nrfx_ipc_config_load+0x78>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1621a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   1621e:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16222:	3301      	adds	r3, #1
   16224:	2b10      	cmp	r3, #16
   16226:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   1622a:	d1f6      	bne.n	1621a <nrfx_ipc_config_load+0x36>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1622c:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   1622e:	4a0b      	ldr	r2, [pc, #44]	; (1625c <nrfx_ipc_config_load+0x78>)
   16230:	f104 0140 	add.w	r1, r4, #64	; 0x40
   16234:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   16238:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1623c:	3301      	adds	r3, #1
   1623e:	2b10      	cmp	r3, #16
   16240:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   16244:	d1f6      	bne.n	16234 <nrfx_ipc_config_load+0x50>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   16246:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    p_reg->INTENSET = mask;
   1624a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1624e:	bd38      	pop	{r3, r4, r5, pc}
   16250:	00021421 	.word	0x00021421
   16254:	0001ead7 	.word	0x0001ead7
   16258:	2000adb8 	.word	0x2000adb8
   1625c:	4002a000 	.word	0x4002a000

00016260 <nrfx_ipc_receive_event_enable>:
    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
   16260:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16262:	4b0a      	ldr	r3, [pc, #40]	; (1628c <nrfx_ipc_receive_event_enable+0x2c>)
{
   16264:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   16266:	791b      	ldrb	r3, [r3, #4]
   16268:	2b01      	cmp	r3, #1
   1626a:	d008      	beq.n	1627e <nrfx_ipc_receive_event_enable+0x1e>
   1626c:	4908      	ldr	r1, [pc, #32]	; (16290 <nrfx_ipc_receive_event_enable+0x30>)
   1626e:	4809      	ldr	r0, [pc, #36]	; (16294 <nrfx_ipc_receive_event_enable+0x34>)
   16270:	226a      	movs	r2, #106	; 0x6a
   16272:	f003 fbbc 	bl	199ee <printk>
   16276:	216a      	movs	r1, #106	; 0x6a
   16278:	4805      	ldr	r0, [pc, #20]	; (16290 <nrfx_ipc_receive_event_enable+0x30>)
   1627a:	f003 fe5e 	bl	19f3a <assert_post_action>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   1627e:	2301      	movs	r3, #1
   16280:	fa03 f404 	lsl.w	r4, r3, r4
   16284:	4b04      	ldr	r3, [pc, #16]	; (16298 <nrfx_ipc_receive_event_enable+0x38>)
   16286:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   1628a:	bd10      	pop	{r4, pc}
   1628c:	2000adb8 	.word	0x2000adb8
   16290:	00021421 	.word	0x00021421
   16294:	0001ead7 	.word	0x0001ead7
   16298:	4002a000 	.word	0x4002a000

0001629c <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   1629c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1629e:	4b0a      	ldr	r3, [pc, #40]	; (162c8 <nrfx_ipc_receive_event_disable+0x2c>)
{
   162a0:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   162a2:	791b      	ldrb	r3, [r3, #4]
   162a4:	2b01      	cmp	r3, #1
   162a6:	d008      	beq.n	162ba <nrfx_ipc_receive_event_disable+0x1e>
   162a8:	4908      	ldr	r1, [pc, #32]	; (162cc <nrfx_ipc_receive_event_disable+0x30>)
   162aa:	4809      	ldr	r0, [pc, #36]	; (162d0 <nrfx_ipc_receive_event_disable+0x34>)
   162ac:	2270      	movs	r2, #112	; 0x70
   162ae:	f003 fb9e 	bl	199ee <printk>
   162b2:	2170      	movs	r1, #112	; 0x70
   162b4:	4805      	ldr	r0, [pc, #20]	; (162cc <nrfx_ipc_receive_event_disable+0x30>)
   162b6:	f003 fe40 	bl	19f3a <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   162ba:	2301      	movs	r3, #1
   162bc:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENCLR = mask;
   162c0:	4b04      	ldr	r3, [pc, #16]	; (162d4 <nrfx_ipc_receive_event_disable+0x38>)
   162c2:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   162c6:	bd10      	pop	{r4, pc}
   162c8:	2000adb8 	.word	0x2000adb8
   162cc:	00021421 	.word	0x00021421
   162d0:	0001ead7 	.word	0x0001ead7
   162d4:	4002a000 	.word	0x4002a000

000162d8 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   162d8:	4b15      	ldr	r3, [pc, #84]	; (16330 <nrfx_ipc_irq_handler+0x58>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   162da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   162de:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   162e2:	4f14      	ldr	r7, [pc, #80]	; (16334 <nrfx_ipc_irq_handler+0x5c>)
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   162e4:	4635      	mov	r5, r6
   162e6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 16338 <nrfx_ipc_irq_handler+0x60>
    while (bitmask)
   162ea:	b935      	cbnz	r5, 162fa <nrfx_ipc_irq_handler+0x22>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   162ec:	4b13      	ldr	r3, [pc, #76]	; (1633c <nrfx_ipc_irq_handler+0x64>)
   162ee:	4630      	mov	r0, r6
}
   162f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   162f4:	681a      	ldr	r2, [r3, #0]
   162f6:	6899      	ldr	r1, [r3, #8]
   162f8:	4710      	bx	r2
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   162fa:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   162fe:	2301      	movs	r3, #1
  return __builtin_clz(value);
   16300:	fab4 f484 	clz	r4, r4
   16304:	40a3      	lsls	r3, r4
   16306:	2c0f      	cmp	r4, #15
   16308:	ea25 0503 	bic.w	r5, r5, r3
   1630c:	d90a      	bls.n	16324 <nrfx_ipc_irq_handler+0x4c>
   1630e:	4639      	mov	r1, r7
   16310:	4640      	mov	r0, r8
   16312:	f240 12e5 	movw	r2, #485	; 0x1e5
   16316:	f003 fb6a 	bl	199ee <printk>
   1631a:	f240 11e5 	movw	r1, #485	; 0x1e5
   1631e:	4638      	mov	r0, r7
   16320:	f003 fe0b 	bl	19f3a <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16324:	2200      	movs	r2, #0
   16326:	4b06      	ldr	r3, [pc, #24]	; (16340 <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   16328:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1632a:	511a      	str	r2, [r3, r4]
}
   1632c:	e7dd      	b.n	162ea <nrfx_ipc_irq_handler+0x12>
   1632e:	bf00      	nop
   16330:	4002a000 	.word	0x4002a000
   16334:	0002145c 	.word	0x0002145c
   16338:	0001ead7 	.word	0x0001ead7
   1633c:	2000adb8 	.word	0x2000adb8
   16340:	4002a100 	.word	0x4002a100

00016344 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   16344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16348:	460e      	mov	r6, r1
   1634a:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1634c:	4d0c      	ldr	r5, [pc, #48]	; (16380 <metal_generic_dev_open+0x3c>)
   1634e:	f855 4f18 	ldr.w	r4, [r5, #24]!
   16352:	42ac      	cmp	r4, r5
   16354:	d103      	bne.n	1635e <metal_generic_dev_open+0x1a>
			return metal_generic_dev_sys_open(dev);
		}
	}

	return -ENODEV;
}
   16356:	f06f 0012 	mvn.w	r0, #18
   1635a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (strcmp(dev->name, dev_name) == 0) {
   1635e:	4631      	mov	r1, r6
   16360:	f854 0c44 	ldr.w	r0, [r4, #-68]
		dev = metal_container_of(node, struct metal_device, node);
   16364:	f1a4 0844 	sub.w	r8, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   16368:	f004 fd53 	bl	1ae12 <strcmp>
   1636c:	b930      	cbnz	r0, 1637c <metal_generic_dev_open+0x38>
			return metal_generic_dev_sys_open(dev);
   1636e:	4640      	mov	r0, r8
			*device = dev;
   16370:	f8c7 8000 	str.w	r8, [r7]
}
   16374:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			return metal_generic_dev_sys_open(dev);
   16378:	f006 bb4c 	b.w	1ca14 <metal_generic_dev_sys_open>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
   1637c:	6824      	ldr	r4, [r4, #0]
   1637e:	e7e8      	b.n	16352 <metal_generic_dev_open+0xe>
   16380:	2000adc4 	.word	0x2000adc4

00016384 <metal_bus_find>:
{
   16384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16388:	4607      	mov	r7, r0
   1638a:	460d      	mov	r5, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   1638c:	4e0b      	ldr	r6, [pc, #44]	; (163bc <metal_bus_find+0x38>)
   1638e:	f856 4f08 	ldr.w	r4, [r6, #8]!
   16392:	42b4      	cmp	r4, r6
   16394:	d102      	bne.n	1639c <metal_bus_find+0x18>
	return -ENOENT;
   16396:	f06f 0001 	mvn.w	r0, #1
   1639a:	e00a      	b.n	163b2 <metal_bus_find+0x2e>
		if (strcmp(bus->name, name) == 0 && result) {
   1639c:	4639      	mov	r1, r7
   1639e:	f854 0c24 	ldr.w	r0, [r4, #-36]
		bus = metal_container_of(node, struct metal_bus, node);
   163a2:	f1a4 0824 	sub.w	r8, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   163a6:	f004 fd34 	bl	1ae12 <strcmp>
   163aa:	b920      	cbnz	r0, 163b6 <metal_bus_find+0x32>
   163ac:	b11d      	cbz	r5, 163b6 <metal_bus_find+0x32>
			*result = bus;
   163ae:	f8c5 8000 	str.w	r8, [r5]
}
   163b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	metal_list_for_each(&_metal.common.bus_list, node) {
   163b6:	6824      	ldr	r4, [r4, #0]
   163b8:	e7eb      	b.n	16392 <metal_bus_find+0xe>
   163ba:	bf00      	nop
   163bc:	2000adc4 	.word	0x2000adc4

000163c0 <metal_bus_register>:
{
   163c0:	b510      	push	{r4, lr}
	if (!bus || !bus->name || !strlen(bus->name))
   163c2:	4604      	mov	r4, r0
   163c4:	b910      	cbnz	r0, 163cc <metal_bus_register+0xc>
		return -EINVAL;
   163c6:	f06f 0015 	mvn.w	r0, #21
}
   163ca:	bd10      	pop	{r4, pc}
	if (!bus || !bus->name || !strlen(bus->name))
   163cc:	6800      	ldr	r0, [r0, #0]
   163ce:	2800      	cmp	r0, #0
   163d0:	d0f9      	beq.n	163c6 <metal_bus_register+0x6>
   163d2:	f004 fd0e 	bl	1adf2 <strlen>
   163d6:	2800      	cmp	r0, #0
   163d8:	d0f5      	beq.n	163c6 <metal_bus_register+0x6>
	if (metal_bus_find(bus->name, NULL) == 0)
   163da:	2100      	movs	r1, #0
   163dc:	6820      	ldr	r0, [r4, #0]
   163de:	f7ff ffd1 	bl	16384 <metal_bus_find>
   163e2:	b1c0      	cbz	r0, 16416 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   163e4:	f104 031c 	add.w	r3, r4, #28
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
	list->prev = list;
	list->next = list;
   163e8:	e9c4 3307 	strd	r3, r3, [r4, #28]
}

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
	new_node->prev = node->prev;
   163ec:	4b0c      	ldr	r3, [pc, #48]	; (16420 <metal_bus_register+0x60>)
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   163ee:	f104 0224 	add.w	r2, r4, #36	; 0x24
   163f2:	68d9      	ldr	r1, [r3, #12]
	new_node->next = node;
   163f4:	f103 0008 	add.w	r0, r3, #8
	new_node->next->prev = new_node;
   163f8:	60da      	str	r2, [r3, #12]
	new_node->prev = node->prev;
   163fa:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   163fc:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->prev->next = new_node;
   163fe:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   16400:	781a      	ldrb	r2, [r3, #0]
   16402:	2a06      	cmp	r2, #6
   16404:	d905      	bls.n	16412 <metal_bus_register+0x52>
   16406:	685b      	ldr	r3, [r3, #4]
   16408:	b143      	cbz	r3, 1641c <metal_bus_register+0x5c>
   1640a:	2007      	movs	r0, #7
   1640c:	6822      	ldr	r2, [r4, #0]
   1640e:	4905      	ldr	r1, [pc, #20]	; (16424 <metal_bus_register+0x64>)
   16410:	4798      	blx	r3
	return 0;
   16412:	2000      	movs	r0, #0
   16414:	e7d9      	b.n	163ca <metal_bus_register+0xa>
		return -EEXIST;
   16416:	f06f 0010 	mvn.w	r0, #16
   1641a:	e7d6      	b.n	163ca <metal_bus_register+0xa>
	return 0;
   1641c:	4618      	mov	r0, r3
   1641e:	e7d4      	b.n	163ca <metal_bus_register+0xa>
   16420:	2000adc4 	.word	0x2000adc4
   16424:	0002148e 	.word	0x0002148e

00016428 <metal_register_generic_device>:
{
   16428:	b510      	push	{r4, lr}
   1642a:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   1642c:	6800      	ldr	r0, [r0, #0]
   1642e:	b910      	cbnz	r0, 16436 <metal_register_generic_device+0xe>
		return -EINVAL;
   16430:	f06f 0015 	mvn.w	r0, #21
}
   16434:	bd10      	pop	{r4, pc}
	if (!device->name || !strlen(device->name) ||
   16436:	f004 fcdc 	bl	1adf2 <strlen>
   1643a:	2800      	cmp	r0, #0
   1643c:	d0f8      	beq.n	16430 <metal_register_generic_device+0x8>
   1643e:	68a3      	ldr	r3, [r4, #8]
   16440:	2b01      	cmp	r3, #1
   16442:	d8f5      	bhi.n	16430 <metal_register_generic_device+0x8>
	device->bus = &metal_generic_bus;
   16444:	4b06      	ldr	r3, [pc, #24]	; (16460 <metal_register_generic_device+0x38>)
	metal_list_add_tail(&_metal.common.generic_device_list,
   16446:	f104 0144 	add.w	r1, r4, #68	; 0x44
	device->bus = &metal_generic_bus;
   1644a:	6063      	str	r3, [r4, #4]
	new_node->prev = node->prev;
   1644c:	4b05      	ldr	r3, [pc, #20]	; (16464 <metal_register_generic_device+0x3c>)
   1644e:	69da      	ldr	r2, [r3, #28]
	new_node->next = node;
   16450:	f103 0018 	add.w	r0, r3, #24
   16454:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->prev = node->prev;
   16456:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next->prev = new_node;
   16458:	61d9      	str	r1, [r3, #28]
	return 0;
   1645a:	2000      	movs	r0, #0
	new_node->prev->next = new_node;
   1645c:	6011      	str	r1, [r2, #0]
}
   1645e:	e7e9      	b.n	16434 <metal_register_generic_device+0xc>
   16460:	2000852c 	.word	0x2000852c
   16464:	2000adc4 	.word	0x2000adc4

00016468 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   16468:	b538      	push	{r3, r4, r5, lr}
   1646a:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   1646c:	4c0d      	ldr	r4, [pc, #52]	; (164a4 <metal_init+0x3c>)
   1646e:	2220      	movs	r2, #32
   16470:	4620      	mov	r0, r4
   16472:	2100      	movs	r1, #0
   16474:	f004 fd26 	bl	1aec4 <memset>

	_metal.common.log_handler   = params->log_handler;
   16478:	682b      	ldr	r3, [r5, #0]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   1647a:	4628      	mov	r0, r5
	_metal.common.log_handler   = params->log_handler;
   1647c:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   1647e:	4623      	mov	r3, r4
   16480:	792a      	ldrb	r2, [r5, #4]
   16482:	f803 2b08 	strb.w	r2, [r3], #8
	list->next = list;
   16486:	e9c4 3302 	strd	r3, r3, [r4, #8]
	list->prev = list;
   1648a:	f104 0310 	add.w	r3, r4, #16
	list->next = list;
   1648e:	e9c4 3304 	strd	r3, r3, [r4, #16]
	list->prev = list;
   16492:	f104 0318 	add.w	r3, r4, #24
	list->next = list;
   16496:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (error)
		return error;

	return error;
}
   1649a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	error = metal_sys_init(params);
   1649e:	f000 b803 	b.w	164a8 <metal_sys_init>
   164a2:	bf00      	nop
   164a4:	2000adc4 	.word	0x2000adc4

000164a8 <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   164a8:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   164aa:	4802      	ldr	r0, [pc, #8]	; (164b4 <metal_sys_init+0xc>)
   164ac:	f7ff ff88 	bl	163c0 <metal_bus_register>
	return 0;
}
   164b0:	2000      	movs	r0, #0
   164b2:	bd08      	pop	{r3, pc}
   164b4:	2000852c 	.word	0x2000852c

000164b8 <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   164b8:	b40e      	push	{r1, r2, r3}
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   164ba:	1e43      	subs	r3, r0, #1
		level = METAL_LOG_EMERGENCY;
   164bc:	2b06      	cmp	r3, #6
{
   164be:	b533      	push	{r0, r1, r4, r5, lr}
		level = METAL_LOG_EMERGENCY;
   164c0:	bf88      	it	hi
   164c2:	2000      	movhi	r0, #0
	printk("%s", level_strs[level]);
   164c4:	4b09      	ldr	r3, [pc, #36]	; (164ec <metal_zephyr_log_handler+0x34>)
{
   164c6:	ac05      	add	r4, sp, #20
   164c8:	f854 5b04 	ldr.w	r5, [r4], #4
	printk("%s", level_strs[level]);
   164cc:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   164d0:	4807      	ldr	r0, [pc, #28]	; (164f0 <metal_zephyr_log_handler+0x38>)
   164d2:	f003 fa8c 	bl	199ee <printk>

	va_start(args, format);
	vprintk(format, args);
   164d6:	4621      	mov	r1, r4
   164d8:	4628      	mov	r0, r5
	va_start(args, format);
   164da:	9401      	str	r4, [sp, #4]
	vprintk(format, args);
   164dc:	f7f3 fd0e 	bl	9efc <vprintk>
	va_end(args);
}
   164e0:	b002      	add	sp, #8
   164e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   164e6:	b003      	add	sp, #12
   164e8:	4770      	bx	lr
   164ea:	bf00      	nop
   164ec:	0001e1b4 	.word	0x0001e1b4
   164f0:	0001fbde 	.word	0x0001fbde

000164f4 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   164f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164f8:	b087      	sub	sp, #28
   164fa:	9305      	str	r3, [sp, #20]
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
	if (nvqs > num_vrings)
   164fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   164fe:	4605      	mov	r5, r0
	if (nvqs > num_vrings)
   16500:	4293      	cmp	r3, r2
{
   16502:	4616      	mov	r6, r2
	if (nvqs > num_vrings)
   16504:	d349      	bcc.n	1659a <virtio_create_virtqueues+0xa6>
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   16506:	2400      	movs	r4, #0
		vring_info = &vdev->vrings_info[i];
   16508:	f04f 0b18 	mov.w	fp, #24
	for (i = 0; i < nvqs; i++) {
   1650c:	42b4      	cmp	r4, r6
   1650e:	d103      	bne.n	16518 <virtio_create_virtqueues+0x24>
				       callbacks[i], vdev->func->notify,
				       vring_info->vq);
		if (ret)
			return ret;
	}
	return 0;
   16510:	2000      	movs	r0, #0
}
   16512:	b007      	add	sp, #28
   16514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		vring_info = &vdev->vrings_info[i];
   16518:	fb0b f704 	mul.w	r7, fp, r4
   1651c:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
		if (vdev->role == VIRTIO_DEV_MASTER) {
   16520:	69aa      	ldr	r2, [r5, #24]
		vring_info = &vdev->vrings_info[i];
   16522:	eb08 0c07 	add.w	ip, r8, r7
		vring_alloc = &vring_info->info;
   16526:	f10c 0904 	add.w	r9, ip, #4
		if (vdev->role == VIRTIO_DEV_MASTER) {
   1652a:	bb02      	cbnz	r2, 1656e <virtio_create_virtqueues+0x7a>
			struct metal_io_region *io = vring_info->io;
   1652c:	f8dc 0014 	ldr.w	r0, [ip, #20]
			metal_io_block_set(io, offset, 0,
   16530:	f8bc e00c 	ldrh.w	lr, [ip, #12]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   16534:	f8dc 3004 	ldr.w	r3, [ip, #4]
   16538:	6801      	ldr	r1, [r0, #0]
						      vring_alloc->align));
   1653a:	f8dc c008 	ldr.w	ip, [ip, #8]
   1653e:	1a59      	subs	r1, r3, r1
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   16540:	f10c 33ff 	add.w	r3, ip, #4294967295
   16544:	eb03 130e 	add.w	r3, r3, lr, lsl #4
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   16548:	f10e 0a03 	add.w	sl, lr, #3
	size = (size + align - 1) & ~(align - 1);
   1654c:	f1cc 0c00 	rsb	ip, ip, #0
   16550:	eb03 034a 	add.w	r3, r3, sl, lsl #1
   16554:	ea03 030c 	and.w	r3, r3, ip
			metal_io_block_set(io, offset, 0,
   16558:	f8d0 c008 	ldr.w	ip, [r0, #8]
	size += sizeof(struct vring_used) +
   1655c:	eb03 03ce 	add.w	r3, r3, lr, lsl #3
   16560:	4561      	cmp	r1, ip
   16562:	bf28      	it	cs
   16564:	f04f 31ff 	movcs.w	r1, #4294967295
   16568:	3306      	adds	r3, #6
   1656a:	f006 fa1a 	bl	1c9a2 <metal_io_block_set>
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   1656e:	f858 3007 	ldr.w	r3, [r8, r7]
   16572:	9a05      	ldr	r2, [sp, #20]
   16574:	9302      	str	r3, [sp, #8]
   16576:	6a2b      	ldr	r3, [r5, #32]
   16578:	4628      	mov	r0, r5
   1657a:	6a1b      	ldr	r3, [r3, #32]
   1657c:	b2a1      	uxth	r1, r4
   1657e:	9301      	str	r3, [sp, #4]
   16580:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16582:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   16586:	9300      	str	r3, [sp, #0]
   16588:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   1658c:	464b      	mov	r3, r9
   1658e:	f006 fa5e 	bl	1ca4e <virtqueue_create>
		if (ret)
   16592:	2800      	cmp	r0, #0
   16594:	d1bd      	bne.n	16512 <virtio_create_virtqueues+0x1e>
	for (i = 0; i < nvqs; i++) {
   16596:	3401      	adds	r4, #1
   16598:	e7b8      	b.n	1650c <virtio_create_virtqueues+0x18>
		return ERROR_VQUEUE_INVLD_PARAM;
   1659a:	4801      	ldr	r0, [pc, #4]	; (165a0 <virtio_create_virtqueues+0xac>)
   1659c:	e7b9      	b.n	16512 <virtio_create_virtqueues+0x1e>
   1659e:	bf00      	nop
   165a0:	fffff440 	.word	0xfffff440

000165a4 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
   165a4:	b530      	push	{r4, r5, lr}
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
   165a6:	8944      	ldrh	r4, [r0, #10]
   165a8:	428c      	cmp	r4, r1
   165aa:	d312      	bcc.n	165d2 <virtqueue_add_consumed_buffer+0x2e>
		return ERROR_VRING_NO_BUFF;
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   165ac:	6a03      	ldr	r3, [r0, #32]
   165ae:	3c01      	subs	r4, #1
   165b0:	885d      	ldrh	r5, [r3, #2]
   165b2:	402c      	ands	r4, r5
   165b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
	used_desc = &vq->vq_ring.used->ring[used_idx];
	used_desc->id = head_idx;
	used_desc->len = len;
   165b8:	609a      	str	r2, [r3, #8]
	used_desc->id = head_idx;
   165ba:	6059      	str	r1, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   165bc:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   165c0:	6a02      	ldr	r2, [r0, #32]
   165c2:	8853      	ldrh	r3, [r2, #2]
   165c4:	3301      	adds	r3, #1
   165c6:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   165c8:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   165ca:	3301      	adds	r3, #1
   165cc:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   165ce:	2000      	movs	r0, #0
}
   165d0:	bd30      	pop	{r4, r5, pc}
		return ERROR_VRING_NO_BUFF;
   165d2:	4801      	ldr	r0, [pc, #4]	; (165d8 <virtqueue_add_consumed_buffer+0x34>)
   165d4:	e7fc      	b.n	165d0 <virtqueue_add_consumed_buffer+0x2c>
   165d6:	bf00      	nop
   165d8:	fffff441 	.word	0xfffff441

000165dc <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
   165dc:	b4f0      	push	{r4, r5, r6, r7}
   165de:	4614      	mov	r4, r2
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
   165e0:	b148      	cbz	r0, 165f6 <rpmsg_send_offchannel_raw+0x1a>
   165e2:	6a00      	ldr	r0, [r0, #32]
   165e4:	b138      	cbz	r0, 165f6 <rpmsg_send_offchannel_raw+0x1a>
   165e6:	b133      	cbz	r3, 165f6 <rpmsg_send_offchannel_raw+0x1a>
   165e8:	3401      	adds	r4, #1
   165ea:	d004      	beq.n	165f6 <rpmsg_send_offchannel_raw+0x1a>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   165ec:	6f44      	ldr	r4, [r0, #116]	; 0x74
   165ee:	b114      	cbz	r4, 165f6 <rpmsg_send_offchannel_raw+0x1a>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   165f0:	46a4      	mov	ip, r4
						      size, wait);

	return RPMSG_ERR_PARAM;
}
   165f2:	bcf0      	pop	{r4, r5, r6, r7}
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   165f4:	4760      	bx	ip
		return RPMSG_ERR_PARAM;
   165f6:	4801      	ldr	r0, [pc, #4]	; (165fc <rpmsg_send_offchannel_raw+0x20>)
}
   165f8:	bcf0      	pop	{r4, r5, r6, r7}
   165fa:	4770      	bx	lr
   165fc:	fffff82d 	.word	0xfffff82d

00016600 <rpmsg_create_ept>:
}

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   16600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16604:	460e      	mov	r6, r1
   16606:	4690      	mov	r8, r2
   16608:	461c      	mov	r4, r3
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept)
   1660a:	4605      	mov	r5, r0
   1660c:	2800      	cmp	r0, #0
   1660e:	d06a      	beq.n	166e6 <rpmsg_create_ept+0xe6>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   16610:	f101 0758 	add.w	r7, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   16614:	4638      	mov	r0, r7
   16616:	f006 fbac 	bl	1cd72 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   1661a:	1c63      	adds	r3, r4, #1
   1661c:	d11a      	bne.n	16654 <rpmsg_create_ept+0x54>
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
	unsigned int bit;

	for (bit = start;
   1661e:	2300      	movs	r3, #0
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   16620:	f106 0048 	add.w	r0, r6, #72	; 0x48
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   16624:	095a      	lsrs	r2, r3, #5
   16626:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
   1662a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1662e:	f003 011f 	and.w	r1, r3, #31
   16632:	fa22 f401 	lsr.w	r4, r2, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   16636:	07e4      	lsls	r4, r4, #31
   16638:	d407      	bmi.n	1664a <rpmsg_create_ept+0x4a>
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   1663a:	f503 6480 	add.w	r4, r3, #1024	; 0x400
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1663e:	2301      	movs	r3, #1
   16640:	408b      	lsls	r3, r1
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   16642:	4313      	orrs	r3, r2
   16644:	f8cc 3000 	str.w	r3, [ip]
		if (addr == RPMSG_ADDR_ANY) {
   16648:	e01d      	b.n	16686 <rpmsg_create_ept+0x86>
	     bit++)
   1664a:	3301      	adds	r3, #1
	for (bit = start;
   1664c:	2b80      	cmp	r3, #128	; 0x80
   1664e:	d1e9      	bne.n	16624 <rpmsg_create_ept+0x24>
			status = RPMSG_ERR_ADDR;
   16650:	4c27      	ldr	r4, [pc, #156]	; (166f0 <rpmsg_create_ept+0xf0>)
   16652:	e044      	b.n	166de <rpmsg_create_ept+0xde>
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   16654:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   16658:	d315      	bcc.n	16686 <rpmsg_create_ept+0x86>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1665a:	f5a4 6380 	sub.w	r3, r4, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1665e:	2b7f      	cmp	r3, #127	; 0x7f
		status = rpmsg_is_address_set(rdev->bitmap,
   16660:	f106 0148 	add.w	r1, r6, #72	; 0x48
	if (addr >= 0 && addr < size)
   16664:	d83a      	bhi.n	166dc <rpmsg_create_ept+0xdc>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   16666:	0958      	lsrs	r0, r3, #5
   16668:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   1666c:	f003 031f 	and.w	r3, r3, #31
   16670:	fa2c f203 	lsr.w	r2, ip, r3
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   16674:	07d2      	lsls	r2, r2, #31
   16676:	d4eb      	bmi.n	16650 <rpmsg_create_ept+0x50>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   16678:	2201      	movs	r2, #1
   1667a:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   1667e:	ea43 030c 	orr.w	r3, r3, ip
   16682:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
					const char *name,
					uint32_t src, uint32_t dest,
					rpmsg_ept_cb cb,
					rpmsg_ns_unbind_cb ns_unbind_cb)
{
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   16686:	491b      	ldr	r1, [pc, #108]	; (166f4 <rpmsg_create_ept+0xf4>)
   16688:	2220      	movs	r2, #32
   1668a:	f1b8 0f00 	cmp.w	r8, #0
   1668e:	bf18      	it	ne
   16690:	4641      	movne	r1, r8
   16692:	4628      	mov	r0, r5
   16694:	f004 fb9b 	bl	1adce <strncpy>
	ept->addr = src;
	ept->dest_addr = dest;
   16698:	9b06      	ldr	r3, [sp, #24]
		 * 2.Simplify the tracking implementation
		 */
	}

	rpmsg_initialize_ept(ept, name, addr, dest, cb, unbind_cb);
	rpmsg_register_endpoint(rdev, ept);
   1669a:	4629      	mov	r1, r5
   1669c:	62ab      	str	r3, [r5, #40]	; 0x28
	ept->cb = cb;
   1669e:	9b07      	ldr	r3, [sp, #28]
   166a0:	4630      	mov	r0, r6
   166a2:	62eb      	str	r3, [r5, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   166a4:	9b08      	ldr	r3, [sp, #32]
	ept->addr = src;
   166a6:	626c      	str	r4, [r5, #36]	; 0x24
	ept->ns_unbind_cb = ns_unbind_cb;
   166a8:	632b      	str	r3, [r5, #48]	; 0x30
   166aa:	f006 fbdc 	bl	1ce66 <rpmsg_register_endpoint>
	z_impl_k_sem_give(sem);
   166ae:	4638      	mov	r0, r7
   166b0:	f001 ffc8 	bl	18644 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);

	/* Send NS announcement to remote processor */
	if (ept->name[0] && rdev->support_ns &&
   166b4:	782c      	ldrb	r4, [r5, #0]
   166b6:	b174      	cbz	r4, 166d6 <rpmsg_create_ept+0xd6>
   166b8:	f896 4078 	ldrb.w	r4, [r6, #120]	; 0x78
   166bc:	b15c      	cbz	r4, 166d6 <rpmsg_create_ept+0xd6>
   166be:	6aab      	ldr	r3, [r5, #40]	; 0x28
   166c0:	3301      	adds	r3, #1
   166c2:	d112      	bne.n	166ea <rpmsg_create_ept+0xea>
	    ept->dest_addr == RPMSG_ADDR_ANY)
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   166c4:	2100      	movs	r1, #0
   166c6:	4628      	mov	r0, r5
   166c8:	f006 fb84 	bl	1cdd4 <rpmsg_send_ns_message>

	if (status)
   166cc:	4604      	mov	r4, r0
   166ce:	b110      	cbz	r0, 166d6 <rpmsg_create_ept+0xd6>
		rpmsg_unregister_endpoint(ept);
   166d0:	4628      	mov	r0, r5
   166d2:	f006 fb54 	bl	1cd7e <rpmsg_unregister_endpoint>
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
}
   166d6:	4620      	mov	r0, r4
   166d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   166dc:	4c06      	ldr	r4, [pc, #24]	; (166f8 <rpmsg_create_ept+0xf8>)
   166de:	4638      	mov	r0, r7
   166e0:	f001 ffb0 	bl	18644 <z_impl_k_sem_give>
}
   166e4:	e7f7      	b.n	166d6 <rpmsg_create_ept+0xd6>
		return RPMSG_ERR_PARAM;
   166e6:	4c04      	ldr	r4, [pc, #16]	; (166f8 <rpmsg_create_ept+0xf8>)
   166e8:	e7f5      	b.n	166d6 <rpmsg_create_ept+0xd6>
   166ea:	2400      	movs	r4, #0
   166ec:	e7f3      	b.n	166d6 <rpmsg_create_ept+0xd6>
   166ee:	bf00      	nop
   166f0:	fffff829 	.word	0xfffff829
   166f4:	000215b0 	.word	0x000215b0
   166f8:	fffff82d 	.word	0xfffff82d

000166fc <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
   166fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16700:	4605      	mov	r5, r0
   16702:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
   16704:	469b      	mov	fp, r3
	rvdev->vdev->func->set_status(rvdev->vdev, status);
}

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_status(rvdev->vdev);
   16706:	6a03      	ldr	r3, [r0, #32]
   16708:	b08d      	sub	sp, #52	; 0x34
   1670a:	681b      	ldr	r3, [r3, #0]
   1670c:	4692      	mov	sl, r2
   1670e:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
   16712:	9103      	str	r1, [sp, #12]
   16714:	4798      	blx	r3
	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);

	status = rpmsg_virtio_get_status(rvdev);
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
   16716:	0743      	lsls	r3, r0, #29
   16718:	d57b      	bpl.n	16812 <rpmsg_virtio_send_offchannel_raw+0x116>
		return RPMSG_ERR_DEV_STATE;
	}

	if (wait)
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   1671a:	f643 2398 	movw	r3, #15000	; 0x3a98
   1671e:	2f00      	cmp	r7, #0
   16720:	bf18      	it	ne
   16722:	461f      	movne	r7, r3

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
   16724:	f105 0858 	add.w	r8, r5, #88	; 0x58
   16728:	4640      	mov	r0, r8
   1672a:	f006 fbc0 	bl	1ceae <__metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
   1672e:	4628      	mov	r0, r5
   16730:	f006 fc82 	bl	1d038 <_rpmsg_virtio_get_buffer_size>
		if (avail_size && size > avail_size) {
   16734:	4681      	mov	r9, r0
   16736:	b130      	cbz	r0, 16746 <rpmsg_virtio_send_offchannel_raw+0x4a>
   16738:	42b0      	cmp	r0, r6
   1673a:	da04      	bge.n	16746 <rpmsg_virtio_send_offchannel_raw+0x4a>
	k_sem_take(m, K_FOREVER);
}

static inline void __metal_mutex_release(metal_mutex_t *m)
{
	k_sem_give(m);
   1673c:	4640      	mov	r0, r8
   1673e:	f006 fbb4 	bl	1ceaa <k_sem_give>
		buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len, &idx);
		metal_mutex_release(&rdev->lock);
		if (buffer || !tick_count)
			break;
		if (avail_size != 0)
			return RPMSG_ERR_BUFF_SIZE;
   16742:	4e42      	ldr	r6, [pc, #264]	; (1684c <rpmsg_virtio_send_offchannel_raw+0x150>)
   16744:	e061      	b.n	1680a <rpmsg_virtio_send_offchannel_raw+0x10e>
	return rvdev->vdev->role;
   16746:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   16748:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1674a:	b9f3      	cbnz	r3, 1678a <rpmsg_virtio_send_offchannel_raw+0x8e>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   1674c:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   16750:	f10d 0212 	add.w	r2, sp, #18
   16754:	a905      	add	r1, sp, #20
   16756:	f006 fa0a 	bl	1cb6e <virtqueue_get_buffer>
		if (!data) {
   1675a:	4604      	mov	r4, r0
   1675c:	b948      	cbnz	r0, 16772 <rpmsg_virtio_send_offchannel_raw+0x76>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1675e:	f44f 7100 	mov.w	r1, #512	; 0x200
   16762:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
   16766:	f006 fc7a 	bl	1d05e <rpmsg_virtio_shm_pool_get_buffer>
			*len = RPMSG_BUFFER_SIZE;
   1676a:	f44f 7300 	mov.w	r3, #512	; 0x200
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   1676e:	4604      	mov	r4, r0
			*len = RPMSG_BUFFER_SIZE;
   16770:	9305      	str	r3, [sp, #20]
   16772:	4640      	mov	r0, r8
   16774:	f006 fb99 	bl	1ceaa <k_sem_give>
		if (buffer || !tick_count)
   16778:	2c00      	cmp	r4, #0
   1677a:	d14e      	bne.n	1681a <rpmsg_virtio_send_offchannel_raw+0x11e>
   1677c:	2f00      	cmp	r7, #0
   1677e:	d04a      	beq.n	16816 <rpmsg_virtio_send_offchannel_raw+0x11a>
		if (avail_size != 0)
   16780:	f1b9 0f00 	cmp.w	r9, #0
   16784:	d1dd      	bne.n	16742 <rpmsg_virtio_send_offchannel_raw+0x46>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
		tick_count--;
   16786:	3f01      	subs	r7, #1
	while (1) {
   16788:	e7ce      	b.n	16728 <rpmsg_virtio_send_offchannel_raw+0x2c>
	if (role == RPMSG_REMOTE) {
   1678a:	2b01      	cmp	r3, #1
   1678c:	d108      	bne.n	167a0 <rpmsg_virtio_send_offchannel_raw+0xa4>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   1678e:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   16792:	aa05      	add	r2, sp, #20
   16794:	f10d 0112 	add.w	r1, sp, #18
   16798:	f006 fa23 	bl	1cbe2 <virtqueue_get_available_buffer>
   1679c:	4604      	mov	r4, r0
   1679e:	e7e8      	b.n	16772 <rpmsg_virtio_send_offchannel_raw+0x76>
	void *data = NULL;
   167a0:	2400      	movs	r4, #0
   167a2:	e7e6      	b.n	16772 <rpmsg_virtio_send_offchannel_raw+0x76>
   167a4:	683b      	ldr	r3, [r7, #0]

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   167a6:	68b8      	ldr	r0, [r7, #8]
	io = rvdev->shbuf_io;
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");

	status = metal_io_block_write(io,
   167a8:	f104 0110 	add.w	r1, r4, #16
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   167ac:	1ac9      	subs	r1, r1, r3
   167ae:	4281      	cmp	r1, r0
   167b0:	bf28      	it	cs
   167b2:	f04f 31ff 	movcs.w	r1, #4294967295
   167b6:	4633      	mov	r3, r6
   167b8:	465a      	mov	r2, fp
   167ba:	4638      	mov	r0, r7
   167bc:	f006 f8b6 	bl	1c92c <metal_io_block_write>
				      metal_io_virt_to_offset(io,
						RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\r\n");
   167c0:	4286      	cmp	r6, r0
   167c2:	d000      	beq.n	167c6 <rpmsg_virtio_send_offchannel_raw+0xca>
   167c4:	e7fe      	b.n	167c4 <rpmsg_virtio_send_offchannel_raw+0xc8>
   167c6:	4640      	mov	r0, r8
   167c8:	f006 fb71 	bl	1ceae <__metal_mutex_acquire>
   167cc:	6feb      	ldr	r3, [r5, #124]	; 0x7c
	metal_mutex_acquire(&rdev->lock);

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
   167ce:	9a05      	ldr	r2, [sp, #20]
   167d0:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   167d2:	b953      	cbnz	r3, 167ea <rpmsg_virtio_send_offchannel_raw+0xee>
		vqbuf.len = len;
   167d4:	e9cd 4206 	strd	r4, r2, [sp, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   167d8:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   167dc:	2201      	movs	r2, #1
   167de:	9400      	str	r4, [sp, #0]
   167e0:	a906      	add	r1, sp, #24
   167e2:	f006 f964 	bl	1caae <virtqueue_add_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   167e6:	b148      	cbz	r0, 167fc <rpmsg_virtio_send_offchannel_raw+0x100>
   167e8:	e7fe      	b.n	167e8 <rpmsg_virtio_send_offchannel_raw+0xec>
	if (role == RPMSG_REMOTE) {
   167ea:	2b01      	cmp	r3, #1
   167ec:	d106      	bne.n	167fc <rpmsg_virtio_send_offchannel_raw+0x100>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   167ee:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   167f2:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   167f6:	f7ff fed5 	bl	165a4 <virtqueue_add_consumed_buffer>
   167fa:	e7f4      	b.n	167e6 <rpmsg_virtio_send_offchannel_raw+0xea>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
   167fc:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
   16800:	f006 fa69 	bl	1ccd6 <virtqueue_kick>
   16804:	4640      	mov	r0, r8
   16806:	f006 fb50 	bl	1ceaa <k_sem_give>

	metal_mutex_release(&rdev->lock);

	return size;
}
   1680a:	4630      	mov	r0, r6
   1680c:	b00d      	add	sp, #52	; 0x34
   1680e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return RPMSG_ERR_DEV_STATE;
   16812:	4e0f      	ldr	r6, [pc, #60]	; (16850 <rpmsg_virtio_send_offchannel_raw+0x154>)
   16814:	e7f9      	b.n	1680a <rpmsg_virtio_send_offchannel_raw+0x10e>
		return RPMSG_ERR_NO_BUFF;
   16816:	4e0f      	ldr	r6, [pc, #60]	; (16854 <rpmsg_virtio_send_offchannel_raw+0x158>)
   16818:	e7f7      	b.n	1680a <rpmsg_virtio_send_offchannel_raw+0x10e>
	rp_hdr.src = src;
   1681a:	9b03      	ldr	r3, [sp, #12]
	io = rvdev->shbuf_io;
   1681c:	f8d5 7088 	ldr.w	r7, [r5, #136]	; 0x88
	rp_hdr.src = src;
   16820:	9308      	str	r3, [sp, #32]
	rp_hdr.reserved = 0;
   16822:	2300      	movs	r3, #0
   16824:	6839      	ldr	r1, [r7, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   16826:	68b8      	ldr	r0, [r7, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   16828:	1a61      	subs	r1, r4, r1
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   1682a:	4281      	cmp	r1, r0
   1682c:	bf28      	it	cs
   1682e:	f04f 31ff 	movcs.w	r1, #4294967295
	rp_hdr.reserved = 0;
   16832:	930a      	str	r3, [sp, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   16834:	4638      	mov	r0, r7
   16836:	2310      	movs	r3, #16
   16838:	aa08      	add	r2, sp, #32
	rp_hdr.dst = dst;
   1683a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
	rp_hdr.len = size;
   1683e:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   16842:	f006 f873 	bl	1c92c <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   16846:	2810      	cmp	r0, #16
   16848:	d0ac      	beq.n	167a4 <rpmsg_virtio_send_offchannel_raw+0xa8>
   1684a:	e7fe      	b.n	1684a <rpmsg_virtio_send_offchannel_raw+0x14e>
   1684c:	fffff82b 	.word	0xfffff82b
   16850:	fffff82c 	.word	0xfffff82c
   16854:	fffff82e 	.word	0xfffff82e

00016858 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
   16858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1685c:	460d      	mov	r5, r1
   1685e:	b088      	sub	sp, #32
   16860:	4617      	mov	r7, r2
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   16862:	2100      	movs	r1, #0
   16864:	227c      	movs	r2, #124	; 0x7c
{
   16866:	4604      	mov	r4, r0
   16868:	461e      	mov	r6, r3
   1686a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	memset(rdev, 0, sizeof(*rdev));
   1686e:	f004 fb29 	bl	1aec4 <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16872:	2201      	movs	r2, #1
   16874:	f104 0058 	add.w	r0, r4, #88	; 0x58
   16878:	4611      	mov	r1, r2
   1687a:	f006 fc8d 	bl	1d198 <z_impl_k_sem_init>
   1687e:	f8d5 8018 	ldr.w	r8, [r5, #24]
	metal_mutex_init(&rdev->lock);
	rvdev->vdev = vdev;
	rdev->ns_bind_cb = ns_bind_cb;
	vdev->priv = rvdev;
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   16882:	4b5d      	ldr	r3, [pc, #372]	; (169f8 <rpmsg_init_vdev+0x1a0>)
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
   16884:	f1b8 0f01 	cmp.w	r8, #1
	rvdev->vdev = vdev;
   16888:	67e5      	str	r5, [r4, #124]	; 0x7c
	rdev->ns_bind_cb = ns_bind_cb;
   1688a:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   1688c:	626c      	str	r4, [r5, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   1688e:	6763      	str	r3, [r4, #116]	; 0x74
	if (role == RPMSG_REMOTE) {
   16890:	d020      	beq.n	168d4 <rpmsg_init_vdev+0x7c>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   16892:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
}

static inline uint32_t
rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
	return rvdev->vdev->func->get_features(rvdev->vdev);
   16894:	6a03      	ldr	r3, [r0, #32]
   16896:	689b      	ldr	r3, [r3, #8]
   16898:	4798      	blx	r3
   1689a:	2300      	movs	r3, #0
   1689c:	6128      	str	r0, [r5, #16]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   1689e:	f000 0001 	and.w	r0, r0, #1
	vdev->features = rpmsg_virtio_get_features(rvdev);
   168a2:	616b      	str	r3, [r5, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   168a4:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   168a8:	f1b8 0f00 	cmp.w	r8, #0
   168ac:	d01e      	beq.n	168ec <rpmsg_init_vdev+0x94>
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   168ae:	f1b8 0f01 	cmp.w	r8, #1
   168b2:	d133      	bne.n	1691c <rpmsg_init_vdev+0xc4>
		vq_names[0] = "tx_vq";
   168b4:	4b51      	ldr	r3, [pc, #324]	; (169fc <rpmsg_init_vdev+0x1a4>)
   168b6:	9302      	str	r3, [sp, #8]
		vq_names[1] = "rx_vq";
   168b8:	4b51      	ldr	r3, [pc, #324]	; (16a00 <rpmsg_init_vdev+0x1a8>)
   168ba:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_tx_callback;
   168bc:	4b51      	ldr	r3, [pc, #324]	; (16a04 <rpmsg_init_vdev+0x1ac>)
   168be:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_rx_callback;
   168c0:	4b51      	ldr	r3, [pc, #324]	; (16a08 <rpmsg_init_vdev+0x1b0>)
   168c2:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   168c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   168c6:	699a      	ldr	r2, [r3, #24]
		rvdev->svq  = vdev->vrings_info[0].vq;
   168c8:	681b      	ldr	r3, [r3, #0]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   168ca:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   168ce:	e023      	b.n	16918 <rpmsg_init_vdev+0xc0>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   168d0:	0743      	lsls	r3, r0, #29
   168d2:	d4de      	bmi.n	16892 <rpmsg_init_vdev+0x3a>
		status = rpmsg_virtio_get_status(rvdev);
   168d4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	return rvdev->vdev->func->get_status(rvdev->vdev);
   168d6:	6a03      	ldr	r3, [r0, #32]
   168d8:	681b      	ldr	r3, [r3, #0]
   168da:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   168dc:	0642      	lsls	r2, r0, #25
   168de:	d5f7      	bpl.n	168d0 <rpmsg_init_vdev+0x78>
			rpmsg_virtio_set_status(rvdev, 0);
   168e0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   168e2:	2100      	movs	r1, #0
   168e4:	6a03      	ldr	r3, [r0, #32]
   168e6:	685b      	ldr	r3, [r3, #4]
   168e8:	4798      	blx	r3
}
   168ea:	e7f3      	b.n	168d4 <rpmsg_init_vdev+0x7c>
		if (!shpool)
   168ec:	f1b9 0f00 	cmp.w	r9, #0
   168f0:	d07d      	beq.n	169ee <rpmsg_init_vdev+0x196>
		if (!shpool->size)
   168f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
   168f6:	2b00      	cmp	r3, #0
   168f8:	d07b      	beq.n	169f2 <rpmsg_init_vdev+0x19a>
		vq_names[0] = "rx_vq";
   168fa:	4b41      	ldr	r3, [pc, #260]	; (16a00 <rpmsg_init_vdev+0x1a8>)
		rvdev->shpool = shpool;
   168fc:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
		vq_names[0] = "rx_vq";
   16900:	9302      	str	r3, [sp, #8]
		vq_names[1] = "tx_vq";
   16902:	4b3e      	ldr	r3, [pc, #248]	; (169fc <rpmsg_init_vdev+0x1a4>)
   16904:	9303      	str	r3, [sp, #12]
		callback[0] = rpmsg_virtio_rx_callback;
   16906:	4b40      	ldr	r3, [pc, #256]	; (16a08 <rpmsg_init_vdev+0x1b0>)
   16908:	9304      	str	r3, [sp, #16]
		callback[1] = rpmsg_virtio_tx_callback;
   1690a:	4b3e      	ldr	r3, [pc, #248]	; (16a04 <rpmsg_init_vdev+0x1ac>)
   1690c:	9305      	str	r3, [sp, #20]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   1690e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   16910:	681a      	ldr	r2, [r3, #0]
		rvdev->svq  = vdev->vrings_info[1].vq;
   16912:	699b      	ldr	r3, [r3, #24]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   16914:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		rvdev->svq  = vdev->vrings_info[0].vq;
   16918:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
			       int flags, unsigned int nvqs,
			       const char *names[],
			       vq_callback *callbacks)
{
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   1691c:	ab04      	add	r3, sp, #16
   1691e:	9300      	str	r3, [sp, #0]
   16920:	2202      	movs	r2, #2
   16922:	2100      	movs	r1, #0
   16924:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
   16926:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
   1692a:	ab02      	add	r3, sp, #8
   1692c:	f7ff fde2 	bl	164f4 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   16930:	4607      	mov	r7, r0
   16932:	2800      	cmp	r0, #0
   16934:	d157      	bne.n	169e6 <rpmsg_init_vdev+0x18e>

	/*
	 * Suppress "tx-complete" interrupts
	 * since send method use busy loop when buffer pool exhaust
	 */
	virtqueue_disable_cb(rvdev->svq);
   16936:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   1693a:	f006 f9a6 	bl	1cc8a <virtqueue_disable_cb>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
   1693e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		vq->shm_io = shm_io;
   16940:	681a      	ldr	r2, [r3, #0]
   16942:	699b      	ldr	r3, [r3, #24]
   16944:	6296      	str	r6, [r2, #40]	; 0x28
   16946:	629e      	str	r6, [r3, #40]	; 0x28
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
   16948:	f1b8 0f00 	cmp.w	r8, #0
   1694c:	d108      	bne.n	16960 <rpmsg_init_vdev+0x108>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
   1694e:	f44f 7300 	mov.w	r3, #512	; 0x200
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   16952:	46c2      	mov	sl, r8
		vqbuf.len = RPMSG_BUFFER_SIZE;
   16954:	9307      	str	r3, [sp, #28]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   16956:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   1695a:	895b      	ldrh	r3, [r3, #10]
   1695c:	4553      	cmp	r3, sl
   1695e:	d81f      	bhi.n	169a0 <rpmsg_init_vdev+0x148>

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if (rdev->support_ns) {
   16960:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16964:	e9c4 4400 	strd	r4, r4, [r4]
   16968:	b18b      	cbz	r3, 1698e <rpmsg_init_vdev+0x136>
		rpmsg_initialize_ept(&rdev->ns_ept, "NS",
   1696a:	f104 0508 	add.w	r5, r4, #8
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   1696e:	4927      	ldr	r1, [pc, #156]	; (16a0c <rpmsg_init_vdev+0x1b4>)
   16970:	2220      	movs	r2, #32
   16972:	4628      	mov	r0, r5
   16974:	f004 fa2b 	bl	1adce <strncpy>
	ept->addr = src;
   16978:	2335      	movs	r3, #53	; 0x35
	ept->dest_addr = dest;
   1697a:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
	ept->cb = cb;
   1697e:	4b24      	ldr	r3, [pc, #144]	; (16a10 <rpmsg_init_vdev+0x1b8>)
				     RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
				     rpmsg_virtio_ns_callback, NULL);
		rpmsg_register_endpoint(rdev, &rdev->ns_ept);
   16980:	4629      	mov	r1, r5
   16982:	6363      	str	r3, [r4, #52]	; 0x34
	ept->ns_unbind_cb = ns_unbind_cb;
   16984:	2300      	movs	r3, #0
   16986:	4620      	mov	r0, r4
   16988:	63a3      	str	r3, [r4, #56]	; 0x38
   1698a:	f006 fa6c 	bl	1ce66 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
   1698e:	f1b8 0f00 	cmp.w	r8, #0
   16992:	d128      	bne.n	169e6 <rpmsg_init_vdev+0x18e>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
   16994:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   16996:	2104      	movs	r1, #4
   16998:	6a03      	ldr	r3, [r0, #32]
   1699a:	685b      	ldr	r3, [r3, #4]
   1699c:	4798      	blx	r3
}
   1699e:	e022      	b.n	169e6 <rpmsg_init_vdev+0x18e>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   169a0:	f44f 7100 	mov.w	r1, #512	; 0x200
   169a4:	4648      	mov	r0, r9
   169a6:	f006 fb5a 	bl	1d05e <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   169aa:	4605      	mov	r5, r0
   169ac:	b1c8      	cbz	r0, 169e2 <rpmsg_init_vdev+0x18a>
   169ae:	6831      	ldr	r1, [r6, #0]
			vqbuf.buf = buffer;
   169b0:	9006      	str	r0, [sp, #24]
   169b2:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   169b4:	68b0      	ldr	r0, [r6, #8]
			metal_io_block_set(shm_io,
   169b6:	f44f 7300 	mov.w	r3, #512	; 0x200
   169ba:	4281      	cmp	r1, r0
   169bc:	bf28      	it	cs
   169be:	f04f 31ff 	movcs.w	r1, #4294967295
   169c2:	2200      	movs	r2, #0
   169c4:	4630      	mov	r0, r6
   169c6:	f005 ffec 	bl	1c9a2 <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   169ca:	2301      	movs	r3, #1
   169cc:	2200      	movs	r2, #0
   169ce:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
   169d2:	9500      	str	r5, [sp, #0]
   169d4:	a906      	add	r1, sp, #24
   169d6:	f006 f86a 	bl	1caae <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   169da:	b918      	cbnz	r0, 169e4 <rpmsg_init_vdev+0x18c>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   169dc:	f10a 0a01 	add.w	sl, sl, #1
   169e0:	e7b9      	b.n	16956 <rpmsg_init_vdev+0xfe>
				return RPMSG_ERR_NO_BUFF;
   169e2:	480c      	ldr	r0, [pc, #48]	; (16a14 <rpmsg_init_vdev+0x1bc>)
   169e4:	4607      	mov	r7, r0
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
}
   169e6:	4638      	mov	r0, r7
   169e8:	b008      	add	sp, #32
   169ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return RPMSG_ERR_PARAM;
   169ee:	4f0a      	ldr	r7, [pc, #40]	; (16a18 <rpmsg_init_vdev+0x1c0>)
   169f0:	e7f9      	b.n	169e6 <rpmsg_init_vdev+0x18e>
			return RPMSG_ERR_NO_BUFF;
   169f2:	4f08      	ldr	r7, [pc, #32]	; (16a14 <rpmsg_init_vdev+0x1bc>)
   169f4:	e7f7      	b.n	169e6 <rpmsg_init_vdev+0x18e>
   169f6:	bf00      	nop
   169f8:	000166fd 	.word	0x000166fd
   169fc:	0002153f 	.word	0x0002153f
   16a00:	00021539 	.word	0x00021539
   16a04:	0001cea9 	.word	0x0001cea9
   16a08:	0001cf79 	.word	0x0001cf79
   16a0c:	00021545 	.word	0x00021545
   16a10:	0001cebb 	.word	0x0001cebb
   16a14:	fffff82e 	.word	0xfffff82e
   16a18:	fffff82d 	.word	0xfffff82d

00016a1c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   16a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16a1e:	4b10      	ldr	r3, [pc, #64]	; (16a60 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   16a20:	4f10      	ldr	r7, [pc, #64]	; (16a64 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16a22:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   16a26:	3001      	adds	r0, #1
   16a28:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   16a2c:	42ae      	cmp	r6, r5
   16a2e:	d800      	bhi.n	16a32 <z_sys_init_run_level+0x16>
		}
	}
}
   16a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   16a32:	e9d5 3400 	ldrd	r3, r4, [r5]
   16a36:	4620      	mov	r0, r4
   16a38:	4798      	blx	r3
   16a3a:	b170      	cbz	r0, 16a5a <z_sys_init_run_level+0x3e>
   16a3c:	b16c      	cbz	r4, 16a5a <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   16a3e:	2301      	movs	r3, #1
				(dev - __device_start));
   16a40:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   16a42:	4a09      	ldr	r2, [pc, #36]	; (16a68 <z_sys_init_run_level+0x4c>)
   16a44:	1124      	asrs	r4, r4, #4
   16a46:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   16a48:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   16a4c:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   16a50:	fa03 f404 	lsl.w	r4, r3, r4
   16a54:	4304      	orrs	r4, r0
   16a56:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   16a5a:	3508      	adds	r5, #8
   16a5c:	e7e6      	b.n	16a2c <z_sys_init_run_level+0x10>
   16a5e:	bf00      	nop
   16a60:	0001e1d4 	.word	0x0001e1d4
   16a64:	20008578 	.word	0x20008578
   16a68:	200085e8 	.word	0x200085e8

00016a6c <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   16a6c:	4b08      	ldr	r3, [pc, #32]	; (16a90 <z_device_ready+0x24>)
   16a6e:	1ac0      	subs	r0, r0, r3
   16a70:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   16a72:	4b08      	ldr	r3, [pc, #32]	; (16a94 <z_device_ready+0x28>)
   16a74:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   16a76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   16a7a:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   16a7c:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   16a80:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   16a84:	4210      	tst	r0, r2
}
   16a86:	bf0c      	ite	eq
   16a88:	4618      	moveq	r0, r3
   16a8a:	2000      	movne	r0, #0
   16a8c:	4770      	bx	lr
   16a8e:	bf00      	nop
   16a90:	20008578 	.word	0x20008578
   16a94:	200085e8 	.word	0x200085e8

00016a98 <z_impl_device_get_binding>:
{
   16a98:	b570      	push	{r4, r5, r6, lr}
   16a9a:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   16a9c:	4c0f      	ldr	r4, [pc, #60]	; (16adc <z_impl_device_get_binding+0x44>)
   16a9e:	4e10      	ldr	r6, [pc, #64]	; (16ae0 <z_impl_device_get_binding+0x48>)
   16aa0:	42b4      	cmp	r4, r6
   16aa2:	d104      	bne.n	16aae <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   16aa4:	4c0d      	ldr	r4, [pc, #52]	; (16adc <z_impl_device_get_binding+0x44>)
   16aa6:	42b4      	cmp	r4, r6
   16aa8:	d10a      	bne.n	16ac0 <z_impl_device_get_binding+0x28>
	return NULL;
   16aaa:	2400      	movs	r4, #0
   16aac:	e014      	b.n	16ad8 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   16aae:	4620      	mov	r0, r4
   16ab0:	f7ff ffdc 	bl	16a6c <z_device_ready>
   16ab4:	b110      	cbz	r0, 16abc <z_impl_device_get_binding+0x24>
   16ab6:	6823      	ldr	r3, [r4, #0]
   16ab8:	42ab      	cmp	r3, r5
   16aba:	d00d      	beq.n	16ad8 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   16abc:	3410      	adds	r4, #16
   16abe:	e7ef      	b.n	16aa0 <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   16ac0:	4620      	mov	r0, r4
   16ac2:	f7ff ffd3 	bl	16a6c <z_device_ready>
   16ac6:	b908      	cbnz	r0, 16acc <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   16ac8:	3410      	adds	r4, #16
   16aca:	e7ec      	b.n	16aa6 <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   16acc:	4628      	mov	r0, r5
   16ace:	6821      	ldr	r1, [r4, #0]
   16ad0:	f004 f99f 	bl	1ae12 <strcmp>
   16ad4:	2800      	cmp	r0, #0
   16ad6:	d1f7      	bne.n	16ac8 <z_impl_device_get_binding+0x30>
}
   16ad8:	4620      	mov	r0, r4
   16ada:	bd70      	pop	{r4, r5, r6, pc}
   16adc:	20008578 	.word	0x20008578
   16ae0:	200085e8 	.word	0x200085e8

00016ae4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   16ae4:	4b01      	ldr	r3, [pc, #4]	; (16aec <z_impl_z_errno+0x8>)
   16ae6:	6898      	ldr	r0, [r3, #8]
}
   16ae8:	3070      	adds	r0, #112	; 0x70
   16aea:	4770      	bx	lr
   16aec:	2000adec 	.word	0x2000adec

00016af0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   16af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16af2:	4604      	mov	r4, r0
   16af4:	460e      	mov	r6, r1
	__asm__ volatile(
   16af6:	f04f 0320 	mov.w	r3, #32
   16afa:	f3ef 8711 	mrs	r7, BASEPRI
   16afe:	f383 8811 	msr	BASEPRI, r3
   16b02:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   16b06:	f001 fd97 	bl	18638 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   16b0a:	2200      	movs	r2, #0
   16b0c:	2c04      	cmp	r4, #4
   16b0e:	bf98      	it	ls
   16b10:	4b1d      	ldrls	r3, [pc, #116]	; (16b88 <z_fatal_error+0x98>)
   16b12:	4605      	mov	r5, r0
	switch (reason) {
   16b14:	bf94      	ite	ls
   16b16:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
   16b1a:	4b1c      	ldrhi	r3, [pc, #112]	; (16b8c <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   16b1c:	9200      	str	r2, [sp, #0]
   16b1e:	2145      	movs	r1, #69	; 0x45
   16b20:	4622      	mov	r2, r4
   16b22:	481b      	ldr	r0, [pc, #108]	; (16b90 <z_fatal_error+0xa0>)
   16b24:	f002 ff63 	bl	199ee <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   16b28:	b13e      	cbz	r6, 16b3a <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   16b2a:	69f3      	ldr	r3, [r6, #28]
   16b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   16b30:	b11b      	cbz	r3, 16b3a <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
   16b32:	2145      	movs	r1, #69	; 0x45
   16b34:	4817      	ldr	r0, [pc, #92]	; (16b94 <z_fatal_error+0xa4>)
   16b36:	f002 ff5a 	bl	199ee <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   16b3a:	b135      	cbz	r5, 16b4a <z_fatal_error+0x5a>
   16b3c:	4628      	mov	r0, r5
   16b3e:	f006 fb48 	bl	1d1d2 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   16b42:	4603      	mov	r3, r0
   16b44:	b108      	cbz	r0, 16b4a <z_fatal_error+0x5a>
   16b46:	7802      	ldrb	r2, [r0, #0]
   16b48:	b902      	cbnz	r2, 16b4c <z_fatal_error+0x5c>
		thread_name = "unknown";
   16b4a:	4b13      	ldr	r3, [pc, #76]	; (16b98 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   16b4c:	462a      	mov	r2, r5
   16b4e:	2145      	movs	r1, #69	; 0x45
   16b50:	4812      	ldr	r0, [pc, #72]	; (16b9c <z_fatal_error+0xac>)
   16b52:	f002 ff4c 	bl	199ee <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   16b56:	4631      	mov	r1, r6
   16b58:	4620      	mov	r0, r4
   16b5a:	f7ff f8ad 	bl	15cb8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   16b5e:	2c04      	cmp	r4, #4
   16b60:	d108      	bne.n	16b74 <z_fatal_error+0x84>
   16b62:	490f      	ldr	r1, [pc, #60]	; (16ba0 <z_fatal_error+0xb0>)
   16b64:	480f      	ldr	r0, [pc, #60]	; (16ba4 <z_fatal_error+0xb4>)
   16b66:	228e      	movs	r2, #142	; 0x8e
   16b68:	f002 ff41 	bl	199ee <printk>
   16b6c:	218e      	movs	r1, #142	; 0x8e
   16b6e:	480c      	ldr	r0, [pc, #48]	; (16ba0 <z_fatal_error+0xb0>)
   16b70:	f003 f9e3 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   16b74:	f387 8811 	msr	BASEPRI, r7
   16b78:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   16b7c:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   16b7e:	b003      	add	sp, #12
   16b80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   16b84:	f7f6 bc38 	b.w	d3f8 <z_impl_k_thread_abort>
   16b88:	0001e1ec 	.word	0x0001e1ec
   16b8c:	00021548 	.word	0x00021548
   16b90:	0002155e 	.word	0x0002155e
   16b94:	0002158b 	.word	0x0002158b
   16b98:	00021556 	.word	0x00021556
   16b9c:	000215b1 	.word	0x000215b1
   16ba0:	000215ce 	.word	0x000215ce
   16ba4:	0001ead7 	.word	0x0001ead7

00016ba8 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   16ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16baa:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   16bac:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   16bae:	4e15      	ldr	r6, [pc, #84]	; (16c04 <idle+0x5c>)
	__asm__ volatile(
   16bb0:	f04f 0220 	mov.w	r2, #32
   16bb4:	f3ef 8311 	mrs	r3, BASEPRI
   16bb8:	f382 8811 	msr	BASEPRI, r2
   16bbc:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   16bc0:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   16bc2:	b188      	cbz	r0, 16be8 <idle+0x40>
			cpu->pending_abort = NULL;
   16bc4:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   16bc6:	f383 8811 	msr	BASEPRI, r3
   16bca:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   16bce:	f001 f93b 	bl	17e48 <z_thread_single_abort>
	__asm__ volatile(
   16bd2:	f04f 0320 	mov.w	r3, #32
   16bd6:	f3ef 8011 	mrs	r0, BASEPRI
   16bda:	f383 8811 	msr	BASEPRI, r3
   16bde:	f3bf 8f6f 	isb	sy
   16be2:	f006 fa9f 	bl	1d124 <z_reschedule_irqlock>
			continue;
   16be6:	e7e3      	b.n	16bb0 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   16be8:	f002 f998 	bl	18f1c <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   16bec:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   16bee:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   16bf0:	2802      	cmp	r0, #2
   16bf2:	bfd8      	it	le
   16bf4:	4608      	movle	r0, r1
   16bf6:	f002 f9c7 	bl	18f88 <z_set_timeout_expiry>
		_kernel.idle = ticks;
   16bfa:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   16bfc:	f7f6 f942 	bl	ce84 <arch_cpu_idle>
}
   16c00:	e7d6      	b.n	16bb0 <idle+0x8>
   16c02:	bf00      	nop
   16c04:	2000adec 	.word	0x2000adec

00016c08 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   16c08:	4802      	ldr	r0, [pc, #8]	; (16c14 <z_bss_zero+0xc>)
   16c0a:	4a03      	ldr	r2, [pc, #12]	; (16c18 <z_bss_zero+0x10>)
   16c0c:	2100      	movs	r1, #0
   16c0e:	1a12      	subs	r2, r2, r0
   16c10:	f004 b958 	b.w	1aec4 <memset>
   16c14:	200087e8 	.word	0x200087e8
   16c18:	2000c60c 	.word	0x2000c60c

00016c1c <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   16c1c:	2201      	movs	r2, #1
{
   16c1e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   16c20:	4b09      	ldr	r3, [pc, #36]	; (16c48 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   16c22:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   16c24:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   16c26:	f7ff fef9 	bl	16a1c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   16c2a:	f002 f819 	bl	18c60 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   16c2e:	2003      	movs	r0, #3
   16c30:	f7ff fef4 	bl	16a1c <z_sys_init_run_level>

	z_init_static_threads();
   16c34:	f001 fe76 	bl	18924 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   16c38:	f7f2 fa1a 	bl	9070 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   16c3c:	4a03      	ldr	r2, [pc, #12]	; (16c4c <bg_thread_main+0x30>)
   16c3e:	7b13      	ldrb	r3, [r2, #12]
   16c40:	f023 0301 	bic.w	r3, r3, #1
   16c44:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   16c46:	bd08      	pop	{r3, pc}
   16c48:	2000c60b 	.word	0x2000c60b
   16c4c:	2000a320 	.word	0x2000a320

00016c50 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   16c50:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   16c54:	4b34      	ldr	r3, [pc, #208]	; (16d28 <z_cstart+0xd8>)
   16c56:	b0ab      	sub	sp, #172	; 0xac
	uint32_t msp =
   16c58:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   16c5c:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   16c60:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16c64:	2400      	movs	r4, #0
   16c66:	23e0      	movs	r3, #224	; 0xe0
   16c68:	4d30      	ldr	r5, [pc, #192]	; (16d2c <z_cstart+0xdc>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16c6a:	f04f 0b01 	mov.w	fp, #1
   16c6e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   16c72:	77ec      	strb	r4, [r5, #31]
   16c74:	762c      	strb	r4, [r5, #24]
   16c76:	766c      	strb	r4, [r5, #25]
   16c78:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   16c7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   16c7c:	4e2c      	ldr	r6, [pc, #176]	; (16d30 <z_cstart+0xe0>)
   16c7e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   16c82:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   16c84:	f7f6 fb80 	bl	d388 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   16c88:	f7f6 f8f6 	bl	ce78 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   16c8c:	f04f 33ff 	mov.w	r3, #4294967295
   16c90:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   16c92:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   16c94:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   16c98:	4d26      	ldr	r5, [pc, #152]	; (16d34 <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   16c9a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   16c9e:	ab06      	add	r3, sp, #24
   16ca0:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   16ca2:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   16ca4:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   16ca8:	f7ff feb8 	bl	16a1c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   16cac:	2001      	movs	r0, #1
   16cae:	f7ff feb5 	bl	16a1c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16cb2:	f8df a084 	ldr.w	sl, [pc, #132]	; 16d38 <z_cstart+0xe8>
	z_sched_init();
   16cb6:	f001 fb77 	bl	183a8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16cba:	4b20      	ldr	r3, [pc, #128]	; (16d3c <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   16cbc:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   16cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   16cc2:	491f      	ldr	r1, [pc, #124]	; (16d40 <z_cstart+0xf0>)
   16cc4:	9305      	str	r3, [sp, #20]
   16cc6:	4630      	mov	r0, r6
   16cc8:	4653      	mov	r3, sl
   16cca:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   16cce:	e9cd 4401 	strd	r4, r4, [sp, #4]
   16cd2:	9400      	str	r4, [sp, #0]
   16cd4:	f001 fd74 	bl	187c0 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   16cd8:	7b73      	ldrb	r3, [r6, #13]
   16cda:	4680      	mov	r8, r0
   16cdc:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   16ce0:	4630      	mov	r0, r6
   16ce2:	7373      	strb	r3, [r6, #13]
   16ce4:	f000 feec 	bl	17ac0 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   16ce8:	230f      	movs	r3, #15
   16cea:	4f16      	ldr	r7, [pc, #88]	; (16d44 <z_cstart+0xf4>)
   16cec:	f44f 72a0 	mov.w	r2, #320	; 0x140
   16cf0:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16cf4:	4914      	ldr	r1, [pc, #80]	; (16d48 <z_cstart+0xf8>)
   16cf6:	4b15      	ldr	r3, [pc, #84]	; (16d4c <z_cstart+0xfc>)
   16cf8:	4638      	mov	r0, r7
   16cfa:	e9cd b404 	strd	fp, r4, [sp, #16]
   16cfe:	e9cd 5400 	strd	r5, r4, [sp]
   16d02:	f001 fd5d 	bl	187c0 <z_setup_new_thread>
   16d06:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   16d08:	4652      	mov	r2, sl
   16d0a:	f023 0304 	bic.w	r3, r3, #4
   16d0e:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   16d10:	f105 031c 	add.w	r3, r5, #28
   16d14:	4641      	mov	r1, r8
   16d16:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   16d18:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   16d1c:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   16d1e:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   16d20:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   16d24:	f7f6 f88e 	bl	ce44 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   16d28:	2000ec68 	.word	0x2000ec68
   16d2c:	e000ed00 	.word	0xe000ed00
   16d30:	2000a320 	.word	0x2000a320
   16d34:	2000adec 	.word	0x2000adec
   16d38:	00016c1d 	.word	0x00016c1d
   16d3c:	0002163a 	.word	0x0002163a
   16d40:	2000e728 	.word	0x2000e728
   16d44:	2000a290 	.word	0x2000a290
   16d48:	2000eb28 	.word	0x2000eb28
   16d4c:	00016ba9 	.word	0x00016ba9

00016d50 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   16d50:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   16d52:	4c0c      	ldr	r4, [pc, #48]	; (16d84 <statics_init+0x34>)
   16d54:	4d0c      	ldr	r5, [pc, #48]	; (16d88 <statics_init+0x38>)
   16d56:	4e0d      	ldr	r6, [pc, #52]	; (16d8c <statics_init+0x3c>)
   16d58:	42ac      	cmp	r4, r5
   16d5a:	d908      	bls.n	16d6e <statics_init+0x1e>
   16d5c:	4631      	mov	r1, r6
   16d5e:	480c      	ldr	r0, [pc, #48]	; (16d90 <statics_init+0x40>)
   16d60:	2215      	movs	r2, #21
   16d62:	f002 fe44 	bl	199ee <printk>
   16d66:	2115      	movs	r1, #21
   16d68:	4630      	mov	r0, r6
   16d6a:	f003 f8e6 	bl	19f3a <assert_post_action>
   16d6e:	42ac      	cmp	r4, r5
   16d70:	d301      	bcc.n	16d76 <statics_init+0x26>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   16d72:	2000      	movs	r0, #0
   16d74:	bd70      	pop	{r4, r5, r6, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   16d76:	4620      	mov	r0, r4
   16d78:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   16d7c:	f006 f984 	bl	1d088 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   16d80:	3418      	adds	r4, #24
   16d82:	e7e9      	b.n	16d58 <statics_init+0x8>
   16d84:	20008640 	.word	0x20008640
   16d88:	20008658 	.word	0x20008658
   16d8c:	00021642 	.word	0x00021642
   16d90:	0001ead7 	.word	0x0001ead7

00016d94 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   16d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d98:	b085      	sub	sp, #20
   16d9a:	e9dd 970e 	ldrd	r9, r7, [sp, #56]	; 0x38
   16d9e:	4606      	mov	r6, r0
   16da0:	468b      	mov	fp, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   16da2:	4648      	mov	r0, r9
   16da4:	4639      	mov	r1, r7
{
   16da6:	4690      	mov	r8, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   16da8:	f006 fa74 	bl	1d294 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   16dac:	f106 0514 	add.w	r5, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   16db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16db4:	f04f 0320 	mov.w	r3, #32
   16db8:	f3ef 8411 	mrs	r4, BASEPRI
   16dbc:	f383 8811 	msr	BASEPRI, r3
   16dc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16dc4:	4628      	mov	r0, r5
   16dc6:	f001 fe29 	bl	18a1c <z_spin_lock_valid>
   16dca:	b940      	cbnz	r0, 16dde <k_heap_aligned_alloc+0x4a>
   16dcc:	4932      	ldr	r1, [pc, #200]	; (16e98 <k_heap_aligned_alloc+0x104>)
   16dce:	4833      	ldr	r0, [pc, #204]	; (16e9c <k_heap_aligned_alloc+0x108>)
   16dd0:	227c      	movs	r2, #124	; 0x7c
   16dd2:	f002 fe0c 	bl	199ee <printk>
   16dd6:	217c      	movs	r1, #124	; 0x7c
   16dd8:	482f      	ldr	r0, [pc, #188]	; (16e98 <k_heap_aligned_alloc+0x104>)
   16dda:	f003 f8ae 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   16dde:	4628      	mov	r0, r5
   16de0:	f001 fe38 	bl	18a54 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16de4:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   16de8:	b15b      	cbz	r3, 16e02 <k_heap_aligned_alloc+0x6e>
   16dea:	ea59 0307 	orrs.w	r3, r9, r7
   16dee:	d008      	beq.n	16e02 <k_heap_aligned_alloc+0x6e>
   16df0:	492b      	ldr	r1, [pc, #172]	; (16ea0 <k_heap_aligned_alloc+0x10c>)
   16df2:	482a      	ldr	r0, [pc, #168]	; (16e9c <k_heap_aligned_alloc+0x108>)
   16df4:	2224      	movs	r2, #36	; 0x24
   16df6:	f002 fdfa 	bl	199ee <printk>
   16dfa:	2124      	movs	r1, #36	; 0x24
   16dfc:	4828      	ldr	r0, [pc, #160]	; (16ea0 <k_heap_aligned_alloc+0x10c>)
   16dfe:	f003 f89c 	bl	19f3a <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16e02:	f8df 9094 	ldr.w	r9, [pc, #148]	; 16e98 <k_heap_aligned_alloc+0x104>
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   16e06:	f106 0a0c 	add.w	sl, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   16e0a:	4642      	mov	r2, r8
   16e0c:	4659      	mov	r1, fp
   16e0e:	4630      	mov	r0, r6
   16e10:	f7f3 fb6c 	bl	a4ec <sys_heap_aligned_alloc>
   16e14:	4607      	mov	r7, r0
		now = z_tick_get();
   16e16:	f002 f993 	bl	19140 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   16e1a:	b1a7      	cbz	r7, 16e46 <k_heap_aligned_alloc+0xb2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16e1c:	4628      	mov	r0, r5
   16e1e:	f001 fe0b 	bl	18a38 <z_spin_unlock_valid>
   16e22:	b940      	cbnz	r0, 16e36 <k_heap_aligned_alloc+0xa2>
   16e24:	491c      	ldr	r1, [pc, #112]	; (16e98 <k_heap_aligned_alloc+0x104>)
   16e26:	481d      	ldr	r0, [pc, #116]	; (16e9c <k_heap_aligned_alloc+0x108>)
   16e28:	22a7      	movs	r2, #167	; 0xa7
   16e2a:	f002 fde0 	bl	199ee <printk>
   16e2e:	21a7      	movs	r1, #167	; 0xa7
   16e30:	4819      	ldr	r0, [pc, #100]	; (16e98 <k_heap_aligned_alloc+0x104>)
   16e32:	f003 f882 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   16e36:	f384 8811 	msr	BASEPRI, r4
   16e3a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   16e3e:	4638      	mov	r0, r7
   16e40:	b005      	add	sp, #20
   16e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   16e46:	9b02      	ldr	r3, [sp, #8]
   16e48:	1a18      	subs	r0, r3, r0
   16e4a:	9b03      	ldr	r3, [sp, #12]
   16e4c:	eb63 0101 	sbc.w	r1, r3, r1
   16e50:	2801      	cmp	r0, #1
   16e52:	f171 0300 	sbcs.w	r3, r1, #0
   16e56:	dbe1      	blt.n	16e1c <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   16e58:	e9cd 0100 	strd	r0, r1, [sp]
   16e5c:	4652      	mov	r2, sl
   16e5e:	4621      	mov	r1, r4
   16e60:	4628      	mov	r0, r5
   16e62:	f001 f997 	bl	18194 <z_pend_curr>
	__asm__ volatile(
   16e66:	f04f 0320 	mov.w	r3, #32
   16e6a:	f3ef 8411 	mrs	r4, BASEPRI
   16e6e:	f383 8811 	msr	BASEPRI, r3
   16e72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16e76:	4628      	mov	r0, r5
   16e78:	f001 fdd0 	bl	18a1c <z_spin_lock_valid>
   16e7c:	b940      	cbnz	r0, 16e90 <k_heap_aligned_alloc+0xfc>
   16e7e:	4649      	mov	r1, r9
   16e80:	4806      	ldr	r0, [pc, #24]	; (16e9c <k_heap_aligned_alloc+0x108>)
   16e82:	227c      	movs	r2, #124	; 0x7c
   16e84:	f002 fdb3 	bl	199ee <printk>
   16e88:	217c      	movs	r1, #124	; 0x7c
   16e8a:	4648      	mov	r0, r9
   16e8c:	f003 f855 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   16e90:	4628      	mov	r0, r5
   16e92:	f001 fddf 	bl	18a54 <z_spin_lock_set_owner>
	return k;
   16e96:	e7b8      	b.n	16e0a <k_heap_aligned_alloc+0x76>
   16e98:	0001eb11 	.word	0x0001eb11
   16e9c:	0001ead7 	.word	0x0001ead7
   16ea0:	00021642 	.word	0x00021642

00016ea4 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   16ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16ea6:	4604      	mov	r4, r0
   16ea8:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   16eaa:	f100 0514 	add.w	r5, r0, #20
   16eae:	f04f 0320 	mov.w	r3, #32
   16eb2:	f3ef 8711 	mrs	r7, BASEPRI
   16eb6:	f383 8811 	msr	BASEPRI, r3
   16eba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16ebe:	4628      	mov	r0, r5
   16ec0:	f001 fdac 	bl	18a1c <z_spin_lock_valid>
   16ec4:	b940      	cbnz	r0, 16ed8 <k_heap_free+0x34>
   16ec6:	4916      	ldr	r1, [pc, #88]	; (16f20 <k_heap_free+0x7c>)
   16ec8:	4816      	ldr	r0, [pc, #88]	; (16f24 <k_heap_free+0x80>)
   16eca:	227c      	movs	r2, #124	; 0x7c
   16ecc:	f002 fd8f 	bl	199ee <printk>
   16ed0:	217c      	movs	r1, #124	; 0x7c
   16ed2:	4813      	ldr	r0, [pc, #76]	; (16f20 <k_heap_free+0x7c>)
   16ed4:	f003 f831 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   16ed8:	4628      	mov	r0, r5
   16eda:	f001 fdbb 	bl	18a54 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   16ede:	4620      	mov	r0, r4
   16ee0:	4631      	mov	r1, r6
   16ee2:	f7f3 fac1 	bl	a468 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   16ee6:	f104 000c 	add.w	r0, r4, #12
   16eea:	f006 f945 	bl	1d178 <z_unpend_all>
   16eee:	b128      	cbz	r0, 16efc <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   16ef0:	4639      	mov	r1, r7
   16ef2:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   16ef4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   16ef8:	f000 bc0e 	b.w	17718 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16efc:	4628      	mov	r0, r5
   16efe:	f001 fd9b 	bl	18a38 <z_spin_unlock_valid>
   16f02:	b940      	cbnz	r0, 16f16 <k_heap_free+0x72>
   16f04:	4906      	ldr	r1, [pc, #24]	; (16f20 <k_heap_free+0x7c>)
   16f06:	4807      	ldr	r0, [pc, #28]	; (16f24 <k_heap_free+0x80>)
   16f08:	22a7      	movs	r2, #167	; 0xa7
   16f0a:	f002 fd70 	bl	199ee <printk>
   16f0e:	21a7      	movs	r1, #167	; 0xa7
   16f10:	4803      	ldr	r0, [pc, #12]	; (16f20 <k_heap_free+0x7c>)
   16f12:	f003 f812 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   16f16:	f387 8811 	msr	BASEPRI, r7
   16f1a:	f3bf 8f6f 	isb	sy
}
   16f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16f20:	0001eb11 	.word	0x0001eb11
   16f24:	0001ead7 	.word	0x0001ead7

00016f28 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   16f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16f2a:	4c14      	ldr	r4, [pc, #80]	; (16f7c <init_mem_slab_module+0x54>)
   16f2c:	4d14      	ldr	r5, [pc, #80]	; (16f80 <init_mem_slab_module+0x58>)
   16f2e:	4e15      	ldr	r6, [pc, #84]	; (16f84 <init_mem_slab_module+0x5c>)
   16f30:	42ac      	cmp	r4, r5
   16f32:	d908      	bls.n	16f46 <init_mem_slab_module+0x1e>
   16f34:	4631      	mov	r1, r6
   16f36:	4814      	ldr	r0, [pc, #80]	; (16f88 <init_mem_slab_module+0x60>)
   16f38:	2242      	movs	r2, #66	; 0x42
   16f3a:	f002 fd58 	bl	199ee <printk>
   16f3e:	2142      	movs	r1, #66	; 0x42
   16f40:	4630      	mov	r0, r6
   16f42:	f002 fffa 	bl	19f3a <assert_post_action>
   16f46:	42ac      	cmp	r4, r5
   16f48:	d301      	bcc.n	16f4e <init_mem_slab_module+0x26>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   16f4a:	2000      	movs	r0, #0
	return rc;
}
   16f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   16f4e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   16f52:	ea42 0301 	orr.w	r3, r2, r1
   16f56:	f013 0303 	ands.w	r3, r3, #3
   16f5a:	d10b      	bne.n	16f74 <init_mem_slab_module+0x4c>
	for (j = 0U; j < slab->num_blocks; j++) {
   16f5c:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   16f5e:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   16f60:	4283      	cmp	r3, r0
   16f62:	d101      	bne.n	16f68 <init_mem_slab_module+0x40>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   16f64:	341c      	adds	r4, #28
   16f66:	e7e3      	b.n	16f30 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
   16f68:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   16f6a:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   16f6c:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   16f6e:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   16f70:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   16f72:	e7f5      	b.n	16f60 <init_mem_slab_module+0x38>
	return rc;
   16f74:	f06f 0015 	mvn.w	r0, #21
   16f78:	e7e8      	b.n	16f4c <init_mem_slab_module+0x24>
   16f7a:	bf00      	nop
   16f7c:	200085ec 	.word	0x200085ec
   16f80:	20008640 	.word	0x20008640
   16f84:	00021664 	.word	0x00021664
   16f88:	0001ead7 	.word	0x0001ead7

00016f8c <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   16f8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16f90:	4604      	mov	r4, r0
   16f92:	460d      	mov	r5, r1
   16f94:	4617      	mov	r7, r2
   16f96:	461e      	mov	r6, r3
	__asm__ volatile(
   16f98:	f04f 0320 	mov.w	r3, #32
   16f9c:	f3ef 8811 	mrs	r8, BASEPRI
   16fa0:	f383 8811 	msr	BASEPRI, r3
   16fa4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16fa8:	4821      	ldr	r0, [pc, #132]	; (17030 <k_mem_slab_alloc+0xa4>)
   16faa:	f001 fd37 	bl	18a1c <z_spin_lock_valid>
   16fae:	b940      	cbnz	r0, 16fc2 <k_mem_slab_alloc+0x36>
   16fb0:	4920      	ldr	r1, [pc, #128]	; (17034 <k_mem_slab_alloc+0xa8>)
   16fb2:	4821      	ldr	r0, [pc, #132]	; (17038 <k_mem_slab_alloc+0xac>)
   16fb4:	227c      	movs	r2, #124	; 0x7c
   16fb6:	f002 fd1a 	bl	199ee <printk>
   16fba:	217c      	movs	r1, #124	; 0x7c
   16fbc:	481d      	ldr	r0, [pc, #116]	; (17034 <k_mem_slab_alloc+0xa8>)
   16fbe:	f002 ffbc 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   16fc2:	481b      	ldr	r0, [pc, #108]	; (17030 <k_mem_slab_alloc+0xa4>)
   16fc4:	f001 fd46 	bl	18a54 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   16fc8:	6963      	ldr	r3, [r4, #20]
   16fca:	b1c3      	cbz	r3, 16ffe <k_mem_slab_alloc+0x72>
		/* take a free block */
		*mem = slab->free_list;
   16fcc:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   16fce:	681b      	ldr	r3, [r3, #0]
   16fd0:	6163      	str	r3, [r4, #20]
		slab->num_used++;
   16fd2:	69a3      	ldr	r3, [r4, #24]
   16fd4:	3301      	adds	r3, #1
   16fd6:	61a3      	str	r3, [r4, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   16fd8:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16fda:	4815      	ldr	r0, [pc, #84]	; (17030 <k_mem_slab_alloc+0xa4>)
   16fdc:	f001 fd2c 	bl	18a38 <z_spin_unlock_valid>
   16fe0:	b940      	cbnz	r0, 16ff4 <k_mem_slab_alloc+0x68>
   16fe2:	4914      	ldr	r1, [pc, #80]	; (17034 <k_mem_slab_alloc+0xa8>)
   16fe4:	4814      	ldr	r0, [pc, #80]	; (17038 <k_mem_slab_alloc+0xac>)
   16fe6:	22a7      	movs	r2, #167	; 0xa7
   16fe8:	f002 fd01 	bl	199ee <printk>
   16fec:	21a7      	movs	r1, #167	; 0xa7
   16fee:	4811      	ldr	r0, [pc, #68]	; (17034 <k_mem_slab_alloc+0xa8>)
   16ff0:	f002 ffa3 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   16ff4:	f388 8811 	msr	BASEPRI, r8
   16ff8:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   16ffc:	e013      	b.n	17026 <k_mem_slab_alloc+0x9a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   16ffe:	ea57 0206 	orrs.w	r2, r7, r6
   17002:	d103      	bne.n	1700c <k_mem_slab_alloc+0x80>
		result = -ENOMEM;
   17004:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
   17008:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   1700a:	e7e6      	b.n	16fda <k_mem_slab_alloc+0x4e>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1700c:	4622      	mov	r2, r4
   1700e:	4641      	mov	r1, r8
   17010:	e9cd 7600 	strd	r7, r6, [sp]
   17014:	4806      	ldr	r0, [pc, #24]	; (17030 <k_mem_slab_alloc+0xa4>)
   17016:	f001 f8bd 	bl	18194 <z_pend_curr>
		if (result == 0) {
   1701a:	4604      	mov	r4, r0
   1701c:	b918      	cbnz	r0, 17026 <k_mem_slab_alloc+0x9a>
			*mem = _current->base.swap_data;
   1701e:	4b07      	ldr	r3, [pc, #28]	; (1703c <k_mem_slab_alloc+0xb0>)
   17020:	689b      	ldr	r3, [r3, #8]
   17022:	695b      	ldr	r3, [r3, #20]
   17024:	602b      	str	r3, [r5, #0]
}
   17026:	4620      	mov	r0, r4
   17028:	b002      	add	sp, #8
   1702a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1702e:	bf00      	nop
   17030:	2000ade4 	.word	0x2000ade4
   17034:	0001eb11 	.word	0x0001eb11
   17038:	0001ead7 	.word	0x0001ead7
   1703c:	2000adec 	.word	0x2000adec

00017040 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   17040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17042:	4604      	mov	r4, r0
   17044:	460d      	mov	r5, r1
	__asm__ volatile(
   17046:	f04f 0320 	mov.w	r3, #32
   1704a:	f3ef 8611 	mrs	r6, BASEPRI
   1704e:	f383 8811 	msr	BASEPRI, r3
   17052:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17056:	481e      	ldr	r0, [pc, #120]	; (170d0 <k_mem_slab_free+0x90>)
   17058:	f001 fce0 	bl	18a1c <z_spin_lock_valid>
   1705c:	b940      	cbnz	r0, 17070 <k_mem_slab_free+0x30>
   1705e:	491d      	ldr	r1, [pc, #116]	; (170d4 <k_mem_slab_free+0x94>)
   17060:	481d      	ldr	r0, [pc, #116]	; (170d8 <k_mem_slab_free+0x98>)
   17062:	227c      	movs	r2, #124	; 0x7c
   17064:	f002 fcc3 	bl	199ee <printk>
   17068:	217c      	movs	r1, #124	; 0x7c
   1706a:	481a      	ldr	r0, [pc, #104]	; (170d4 <k_mem_slab_free+0x94>)
   1706c:	f002 ff65 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   17070:	4817      	ldr	r0, [pc, #92]	; (170d0 <k_mem_slab_free+0x90>)
   17072:	f001 fcef 	bl	18a54 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   17076:	6967      	ldr	r7, [r4, #20]
   17078:	b97f      	cbnz	r7, 1709a <k_mem_slab_free+0x5a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1707a:	4620      	mov	r0, r4
   1707c:	f001 f92c 	bl	182d8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   17080:	b158      	cbz	r0, 1709a <k_mem_slab_free+0x5a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   17082:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   17084:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   17088:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   1708a:	f000 fd19 	bl	17ac0 <z_ready_thread>
			z_reschedule(&lock, key);
   1708e:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   17090:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   17094:	480e      	ldr	r0, [pc, #56]	; (170d0 <k_mem_slab_free+0x90>)
   17096:	f000 bb3f 	b.w	17718 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1709a:	682b      	ldr	r3, [r5, #0]
   1709c:	6962      	ldr	r2, [r4, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1709e:	480c      	ldr	r0, [pc, #48]	; (170d0 <k_mem_slab_free+0x90>)
   170a0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   170a2:	682b      	ldr	r3, [r5, #0]
   170a4:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   170a6:	69a3      	ldr	r3, [r4, #24]
   170a8:	3b01      	subs	r3, #1
   170aa:	61a3      	str	r3, [r4, #24]
   170ac:	f001 fcc4 	bl	18a38 <z_spin_unlock_valid>
   170b0:	b940      	cbnz	r0, 170c4 <k_mem_slab_free+0x84>
   170b2:	4908      	ldr	r1, [pc, #32]	; (170d4 <k_mem_slab_free+0x94>)
   170b4:	4808      	ldr	r0, [pc, #32]	; (170d8 <k_mem_slab_free+0x98>)
   170b6:	22a7      	movs	r2, #167	; 0xa7
   170b8:	f002 fc99 	bl	199ee <printk>
   170bc:	21a7      	movs	r1, #167	; 0xa7
   170be:	4805      	ldr	r0, [pc, #20]	; (170d4 <k_mem_slab_free+0x94>)
   170c0:	f002 ff3b 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   170c4:	f386 8811 	msr	BASEPRI, r6
   170c8:	f3bf 8f6f 	isb	sy
}
   170cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   170ce:	bf00      	nop
   170d0:	2000ade4 	.word	0x2000ade4
   170d4:	0001eb11 	.word	0x0001eb11
   170d8:	0001ead7 	.word	0x0001ead7

000170dc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   170dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   170e0:	4604      	mov	r4, r0
   170e2:	4617      	mov	r7, r2
   170e4:	461e      	mov	r6, r3
   170e6:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   170ea:	b143      	cbz	r3, 170fe <z_impl_k_mutex_lock+0x22>
   170ec:	495c      	ldr	r1, [pc, #368]	; (17260 <z_impl_k_mutex_lock+0x184>)
   170ee:	485d      	ldr	r0, [pc, #372]	; (17264 <z_impl_k_mutex_lock+0x188>)
   170f0:	227d      	movs	r2, #125	; 0x7d
   170f2:	f002 fc7c 	bl	199ee <printk>
   170f6:	217d      	movs	r1, #125	; 0x7d
   170f8:	4859      	ldr	r0, [pc, #356]	; (17260 <z_impl_k_mutex_lock+0x184>)
   170fa:	f002 ff1e 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   170fe:	f04f 0320 	mov.w	r3, #32
   17102:	f3ef 8811 	mrs	r8, BASEPRI
   17106:	f383 8811 	msr	BASEPRI, r3
   1710a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1710e:	4856      	ldr	r0, [pc, #344]	; (17268 <z_impl_k_mutex_lock+0x18c>)
   17110:	f001 fc84 	bl	18a1c <z_spin_lock_valid>
   17114:	b940      	cbnz	r0, 17128 <z_impl_k_mutex_lock+0x4c>
   17116:	4955      	ldr	r1, [pc, #340]	; (1726c <z_impl_k_mutex_lock+0x190>)
   17118:	4852      	ldr	r0, [pc, #328]	; (17264 <z_impl_k_mutex_lock+0x188>)
   1711a:	227c      	movs	r2, #124	; 0x7c
   1711c:	f002 fc67 	bl	199ee <printk>
   17120:	217c      	movs	r1, #124	; 0x7c
   17122:	4852      	ldr	r0, [pc, #328]	; (1726c <z_impl_k_mutex_lock+0x190>)
   17124:	f002 ff09 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   17128:	484f      	ldr	r0, [pc, #316]	; (17268 <z_impl_k_mutex_lock+0x18c>)
   1712a:	f001 fc93 	bl	18a54 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1712e:	68e3      	ldr	r3, [r4, #12]
   17130:	4a4f      	ldr	r2, [pc, #316]	; (17270 <z_impl_k_mutex_lock+0x194>)
   17132:	b1d3      	cbz	r3, 1716a <z_impl_k_mutex_lock+0x8e>
   17134:	68a0      	ldr	r0, [r4, #8]
   17136:	6891      	ldr	r1, [r2, #8]
   17138:	4288      	cmp	r0, r1
   1713a:	d033      	beq.n	171a4 <z_impl_k_mutex_lock+0xc8>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1713c:	ea57 0306 	orrs.w	r3, r7, r6
   17140:	d132      	bne.n	171a8 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17142:	4849      	ldr	r0, [pc, #292]	; (17268 <z_impl_k_mutex_lock+0x18c>)
   17144:	f001 fc78 	bl	18a38 <z_spin_unlock_valid>
   17148:	b940      	cbnz	r0, 1715c <z_impl_k_mutex_lock+0x80>
   1714a:	4948      	ldr	r1, [pc, #288]	; (1726c <z_impl_k_mutex_lock+0x190>)
   1714c:	4845      	ldr	r0, [pc, #276]	; (17264 <z_impl_k_mutex_lock+0x188>)
   1714e:	22a7      	movs	r2, #167	; 0xa7
   17150:	f002 fc4d 	bl	199ee <printk>
   17154:	21a7      	movs	r1, #167	; 0xa7
   17156:	4845      	ldr	r0, [pc, #276]	; (1726c <z_impl_k_mutex_lock+0x190>)
   17158:	f002 feef 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   1715c:	f388 8811 	msr	BASEPRI, r8
   17160:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   17164:	f06f 000f 	mvn.w	r0, #15
   17168:	e019      	b.n	1719e <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
   1716a:	6891      	ldr	r1, [r2, #8]
   1716c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   17170:	3301      	adds	r3, #1
   17172:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   17174:	6893      	ldr	r3, [r2, #8]
   17176:	483c      	ldr	r0, [pc, #240]	; (17268 <z_impl_k_mutex_lock+0x18c>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   17178:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   1717a:	60a3      	str	r3, [r4, #8]
   1717c:	f001 fc5c 	bl	18a38 <z_spin_unlock_valid>
   17180:	b940      	cbnz	r0, 17194 <z_impl_k_mutex_lock+0xb8>
   17182:	493a      	ldr	r1, [pc, #232]	; (1726c <z_impl_k_mutex_lock+0x190>)
   17184:	4837      	ldr	r0, [pc, #220]	; (17264 <z_impl_k_mutex_lock+0x188>)
   17186:	22a7      	movs	r2, #167	; 0xa7
   17188:	f002 fc31 	bl	199ee <printk>
   1718c:	21a7      	movs	r1, #167	; 0xa7
   1718e:	4837      	ldr	r0, [pc, #220]	; (1726c <z_impl_k_mutex_lock+0x190>)
   17190:	f002 fed3 	bl	19f3a <assert_post_action>
   17194:	f388 8811 	msr	BASEPRI, r8
   17198:	f3bf 8f6f 	isb	sy
		return 0;
   1719c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1719e:	b002      	add	sp, #8
   171a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   171a4:	6921      	ldr	r1, [r4, #16]
   171a6:	e7e3      	b.n	17170 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   171a8:	f990 300e 	ldrsb.w	r3, [r0, #14]
   171ac:	f991 100e 	ldrsb.w	r1, [r1, #14]
   171b0:	4299      	cmp	r1, r3
   171b2:	bfa8      	it	ge
   171b4:	4619      	movge	r1, r3
   171b6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   171ba:	4299      	cmp	r1, r3
   171bc:	da3b      	bge.n	17236 <z_impl_k_mutex_lock+0x15a>
		resched = adjust_owner_prio(mutex, new_prio);
   171be:	f005 ff6b 	bl	1d098 <adjust_owner_prio.isra.0>
   171c2:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   171c4:	4622      	mov	r2, r4
   171c6:	4641      	mov	r1, r8
   171c8:	e9cd 7600 	strd	r7, r6, [sp]
   171cc:	4826      	ldr	r0, [pc, #152]	; (17268 <z_impl_k_mutex_lock+0x18c>)
   171ce:	f000 ffe1 	bl	18194 <z_pend_curr>
	if (got_mutex == 0) {
   171d2:	2800      	cmp	r0, #0
   171d4:	d0e3      	beq.n	1719e <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
   171d6:	f04f 0320 	mov.w	r3, #32
   171da:	f3ef 8611 	mrs	r6, BASEPRI
   171de:	f383 8811 	msr	BASEPRI, r3
   171e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   171e6:	4820      	ldr	r0, [pc, #128]	; (17268 <z_impl_k_mutex_lock+0x18c>)
   171e8:	f001 fc18 	bl	18a1c <z_spin_lock_valid>
   171ec:	b940      	cbnz	r0, 17200 <z_impl_k_mutex_lock+0x124>
   171ee:	491f      	ldr	r1, [pc, #124]	; (1726c <z_impl_k_mutex_lock+0x190>)
   171f0:	481c      	ldr	r0, [pc, #112]	; (17264 <z_impl_k_mutex_lock+0x188>)
   171f2:	227c      	movs	r2, #124	; 0x7c
   171f4:	f002 fbfb 	bl	199ee <printk>
   171f8:	217c      	movs	r1, #124	; 0x7c
   171fa:	481c      	ldr	r0, [pc, #112]	; (1726c <z_impl_k_mutex_lock+0x190>)
   171fc:	f002 fe9d 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   17200:	4819      	ldr	r0, [pc, #100]	; (17268 <z_impl_k_mutex_lock+0x18c>)
   17202:	f001 fc27 	bl	18a54 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   17206:	6823      	ldr	r3, [r4, #0]
   17208:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1720a:	42a3      	cmp	r3, r4
   1720c:	d007      	beq.n	1721e <z_impl_k_mutex_lock+0x142>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1720e:	b133      	cbz	r3, 1721e <z_impl_k_mutex_lock+0x142>
   17210:	f993 300e 	ldrsb.w	r3, [r3, #14]
   17214:	4299      	cmp	r1, r3
   17216:	bfa8      	it	ge
   17218:	4619      	movge	r1, r3
   1721a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1721e:	68a0      	ldr	r0, [r4, #8]
   17220:	f005 ff3a 	bl	1d098 <adjust_owner_prio.isra.0>
   17224:	b900      	cbnz	r0, 17228 <z_impl_k_mutex_lock+0x14c>
	if (resched) {
   17226:	b145      	cbz	r5, 1723a <z_impl_k_mutex_lock+0x15e>
		z_reschedule(&lock, key);
   17228:	4631      	mov	r1, r6
   1722a:	480f      	ldr	r0, [pc, #60]	; (17268 <z_impl_k_mutex_lock+0x18c>)
   1722c:	f000 fa74 	bl	17718 <z_reschedule>
	return -EAGAIN;
   17230:	f06f 000a 	mvn.w	r0, #10
   17234:	e7b3      	b.n	1719e <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
   17236:	2500      	movs	r5, #0
   17238:	e7c4      	b.n	171c4 <z_impl_k_mutex_lock+0xe8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1723a:	480b      	ldr	r0, [pc, #44]	; (17268 <z_impl_k_mutex_lock+0x18c>)
   1723c:	f001 fbfc 	bl	18a38 <z_spin_unlock_valid>
   17240:	b940      	cbnz	r0, 17254 <z_impl_k_mutex_lock+0x178>
   17242:	490a      	ldr	r1, [pc, #40]	; (1726c <z_impl_k_mutex_lock+0x190>)
   17244:	4807      	ldr	r0, [pc, #28]	; (17264 <z_impl_k_mutex_lock+0x188>)
   17246:	22a7      	movs	r2, #167	; 0xa7
   17248:	f002 fbd1 	bl	199ee <printk>
   1724c:	21a7      	movs	r1, #167	; 0xa7
   1724e:	4807      	ldr	r0, [pc, #28]	; (1726c <z_impl_k_mutex_lock+0x190>)
   17250:	f002 fe73 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   17254:	f386 8811 	msr	BASEPRI, r6
   17258:	f3bf 8f6f 	isb	sy
   1725c:	e7e8      	b.n	17230 <z_impl_k_mutex_lock+0x154>
   1725e:	bf00      	nop
   17260:	00021689 	.word	0x00021689
   17264:	0001ead7 	.word	0x0001ead7
   17268:	2000ade8 	.word	0x2000ade8
   1726c:	0001eb11 	.word	0x0001eb11
   17270:	2000adec 	.word	0x2000adec

00017274 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   17274:	b538      	push	{r3, r4, r5, lr}
   17276:	4604      	mov	r4, r0
   17278:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1727c:	b143      	cbz	r3, 17290 <z_impl_k_mutex_unlock+0x1c>
   1727e:	4946      	ldr	r1, [pc, #280]	; (17398 <z_impl_k_mutex_unlock+0x124>)
   17280:	4846      	ldr	r0, [pc, #280]	; (1739c <z_impl_k_mutex_unlock+0x128>)
   17282:	22d8      	movs	r2, #216	; 0xd8
   17284:	f002 fbb3 	bl	199ee <printk>
   17288:	21d8      	movs	r1, #216	; 0xd8
   1728a:	4843      	ldr	r0, [pc, #268]	; (17398 <z_impl_k_mutex_unlock+0x124>)
   1728c:	f002 fe55 	bl	19f3a <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   17290:	68a3      	ldr	r3, [r4, #8]
   17292:	2b00      	cmp	r3, #0
   17294:	d079      	beq.n	1738a <z_impl_k_mutex_unlock+0x116>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   17296:	4d42      	ldr	r5, [pc, #264]	; (173a0 <z_impl_k_mutex_unlock+0x12c>)
   17298:	68aa      	ldr	r2, [r5, #8]
   1729a:	4293      	cmp	r3, r2
   1729c:	d178      	bne.n	17390 <z_impl_k_mutex_unlock+0x11c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1729e:	68e3      	ldr	r3, [r4, #12]
   172a0:	b943      	cbnz	r3, 172b4 <z_impl_k_mutex_unlock+0x40>
   172a2:	493d      	ldr	r1, [pc, #244]	; (17398 <z_impl_k_mutex_unlock+0x124>)
   172a4:	483d      	ldr	r0, [pc, #244]	; (1739c <z_impl_k_mutex_unlock+0x128>)
   172a6:	22ea      	movs	r2, #234	; 0xea
   172a8:	f002 fba1 	bl	199ee <printk>
   172ac:	21ea      	movs	r1, #234	; 0xea
   172ae:	483a      	ldr	r0, [pc, #232]	; (17398 <z_impl_k_mutex_unlock+0x124>)
   172b0:	f002 fe43 	bl	19f3a <assert_post_action>
   172b4:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   172b8:	b153      	cbz	r3, 172d0 <z_impl_k_mutex_unlock+0x5c>
   172ba:	493a      	ldr	r1, [pc, #232]	; (173a4 <z_impl_k_mutex_unlock+0x130>)
   172bc:	4837      	ldr	r0, [pc, #220]	; (1739c <z_impl_k_mutex_unlock+0x128>)
   172be:	f44f 7289 	mov.w	r2, #274	; 0x112
   172c2:	f002 fb94 	bl	199ee <printk>
   172c6:	f44f 7189 	mov.w	r1, #274	; 0x112
   172ca:	4836      	ldr	r0, [pc, #216]	; (173a4 <z_impl_k_mutex_unlock+0x130>)
   172cc:	f002 fe35 	bl	19f3a <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   172d0:	68ab      	ldr	r3, [r5, #8]
   172d2:	7bdb      	ldrb	r3, [r3, #15]
   172d4:	2b01      	cmp	r3, #1
   172d6:	d10a      	bne.n	172ee <z_impl_k_mutex_unlock+0x7a>
   172d8:	4932      	ldr	r1, [pc, #200]	; (173a4 <z_impl_k_mutex_unlock+0x130>)
   172da:	4830      	ldr	r0, [pc, #192]	; (1739c <z_impl_k_mutex_unlock+0x128>)
   172dc:	f240 1213 	movw	r2, #275	; 0x113
   172e0:	f002 fb85 	bl	199ee <printk>
   172e4:	f240 1113 	movw	r1, #275	; 0x113
   172e8:	482e      	ldr	r0, [pc, #184]	; (173a4 <z_impl_k_mutex_unlock+0x130>)
   172ea:	f002 fe26 	bl	19f3a <assert_post_action>

	--_current->base.sched_locked;
   172ee:	68aa      	ldr	r2, [r5, #8]
   172f0:	7bd3      	ldrb	r3, [r2, #15]
   172f2:	3b01      	subs	r3, #1
   172f4:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   172f6:	68e3      	ldr	r3, [r4, #12]
   172f8:	2b01      	cmp	r3, #1
   172fa:	d005      	beq.n	17308 <z_impl_k_mutex_unlock+0x94>
		mutex->lock_count--;
   172fc:	3b01      	subs	r3, #1
   172fe:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   17300:	f000 fb38 	bl	17974 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   17304:	2000      	movs	r0, #0
}
   17306:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   17308:	f04f 0320 	mov.w	r3, #32
   1730c:	f3ef 8511 	mrs	r5, BASEPRI
   17310:	f383 8811 	msr	BASEPRI, r3
   17314:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17318:	4823      	ldr	r0, [pc, #140]	; (173a8 <z_impl_k_mutex_unlock+0x134>)
   1731a:	f001 fb7f 	bl	18a1c <z_spin_lock_valid>
   1731e:	b940      	cbnz	r0, 17332 <z_impl_k_mutex_unlock+0xbe>
   17320:	4922      	ldr	r1, [pc, #136]	; (173ac <z_impl_k_mutex_unlock+0x138>)
   17322:	481e      	ldr	r0, [pc, #120]	; (1739c <z_impl_k_mutex_unlock+0x128>)
   17324:	227c      	movs	r2, #124	; 0x7c
   17326:	f002 fb62 	bl	199ee <printk>
   1732a:	217c      	movs	r1, #124	; 0x7c
   1732c:	481f      	ldr	r0, [pc, #124]	; (173ac <z_impl_k_mutex_unlock+0x138>)
   1732e:	f002 fe04 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   17332:	481d      	ldr	r0, [pc, #116]	; (173a8 <z_impl_k_mutex_unlock+0x134>)
   17334:	f001 fb8e 	bl	18a54 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   17338:	6921      	ldr	r1, [r4, #16]
   1733a:	68a0      	ldr	r0, [r4, #8]
   1733c:	f005 feac 	bl	1d098 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   17340:	4620      	mov	r0, r4
   17342:	f000 ffc9 	bl	182d8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   17346:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   17348:	b160      	cbz	r0, 17364 <z_impl_k_mutex_unlock+0xf0>
		mutex->owner_orig_prio = new_owner->base.prio;
   1734a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1734e:	6122      	str	r2, [r4, #16]
   17350:	2200      	movs	r2, #0
   17352:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   17356:	f000 fbb3 	bl	17ac0 <z_ready_thread>
		z_reschedule(&lock, key);
   1735a:	4629      	mov	r1, r5
   1735c:	4812      	ldr	r0, [pc, #72]	; (173a8 <z_impl_k_mutex_unlock+0x134>)
   1735e:	f000 f9db 	bl	17718 <z_reschedule>
   17362:	e7cd      	b.n	17300 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count = 0U;
   17364:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17366:	4810      	ldr	r0, [pc, #64]	; (173a8 <z_impl_k_mutex_unlock+0x134>)
   17368:	f001 fb66 	bl	18a38 <z_spin_unlock_valid>
   1736c:	b940      	cbnz	r0, 17380 <z_impl_k_mutex_unlock+0x10c>
   1736e:	490f      	ldr	r1, [pc, #60]	; (173ac <z_impl_k_mutex_unlock+0x138>)
   17370:	480a      	ldr	r0, [pc, #40]	; (1739c <z_impl_k_mutex_unlock+0x128>)
   17372:	22a7      	movs	r2, #167	; 0xa7
   17374:	f002 fb3b 	bl	199ee <printk>
   17378:	21a7      	movs	r1, #167	; 0xa7
   1737a:	480c      	ldr	r0, [pc, #48]	; (173ac <z_impl_k_mutex_unlock+0x138>)
   1737c:	f002 fddd 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   17380:	f385 8811 	msr	BASEPRI, r5
   17384:	f3bf 8f6f 	isb	sy
   17388:	e7ba      	b.n	17300 <z_impl_k_mutex_unlock+0x8c>
		return -EINVAL;
   1738a:	f06f 0015 	mvn.w	r0, #21
   1738e:	e7ba      	b.n	17306 <z_impl_k_mutex_unlock+0x92>
		return -EPERM;
   17390:	f04f 30ff 	mov.w	r0, #4294967295
   17394:	e7b7      	b.n	17306 <z_impl_k_mutex_unlock+0x92>
   17396:	bf00      	nop
   17398:	00021689 	.word	0x00021689
   1739c:	0001ead7 	.word	0x0001ead7
   173a0:	2000adec 	.word	0x2000adec
   173a4:	000216ab 	.word	0x000216ab
   173a8:	2000ade8 	.word	0x2000ade8
   173ac:	0001eb11 	.word	0x0001eb11

000173b0 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   173b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   173b4:	4604      	mov	r4, r0
   173b6:	460d      	mov	r5, r1
   173b8:	4690      	mov	r8, r2
   173ba:	4699      	mov	r9, r3
   173bc:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   173c0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   173c4:	f04f 0320 	mov.w	r3, #32
   173c8:	f3ef 8711 	mrs	r7, BASEPRI
   173cc:	f383 8811 	msr	BASEPRI, r3
   173d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   173d4:	4630      	mov	r0, r6
   173d6:	f001 fb21 	bl	18a1c <z_spin_lock_valid>
   173da:	b940      	cbnz	r0, 173ee <queue_insert+0x3e>
   173dc:	4937      	ldr	r1, [pc, #220]	; (174bc <queue_insert+0x10c>)
   173de:	4838      	ldr	r0, [pc, #224]	; (174c0 <queue_insert+0x110>)
   173e0:	227c      	movs	r2, #124	; 0x7c
   173e2:	f002 fb04 	bl	199ee <printk>
   173e6:	217c      	movs	r1, #124	; 0x7c
   173e8:	4834      	ldr	r0, [pc, #208]	; (174bc <queue_insert+0x10c>)
   173ea:	f002 fda6 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   173ee:	4630      	mov	r0, r6
   173f0:	f001 fb30 	bl	18a54 <z_spin_lock_set_owner>

	if (is_append) {
   173f4:	f1ba 0f00 	cmp.w	sl, #0
   173f8:	d000      	beq.n	173fc <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   173fa:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   173fc:	f104 000c 	add.w	r0, r4, #12
   17400:	f000 ff6a 	bl	182d8 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   17404:	b160      	cbz	r0, 17420 <queue_insert+0x70>
   17406:	2400      	movs	r4, #0
   17408:	f8c0 8014 	str.w	r8, [r0, #20]
   1740c:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   17410:	f000 fb56 	bl	17ac0 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   17414:	4630      	mov	r0, r6
   17416:	4639      	mov	r1, r7
   17418:	f000 f97e 	bl	17718 <z_reschedule>
	return 0;
   1741c:	2000      	movs	r0, #0
   1741e:	e019      	b.n	17454 <queue_insert+0xa4>
	if (alloc) {
   17420:	f1b9 0f00 	cmp.w	r9, #0
   17424:	d028      	beq.n	17478 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   17426:	2108      	movs	r1, #8
   17428:	f002 fa12 	bl	19850 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1742c:	b9a0      	cbnz	r0, 17458 <queue_insert+0xa8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1742e:	4630      	mov	r0, r6
   17430:	f001 fb02 	bl	18a38 <z_spin_unlock_valid>
   17434:	b940      	cbnz	r0, 17448 <queue_insert+0x98>
   17436:	4921      	ldr	r1, [pc, #132]	; (174bc <queue_insert+0x10c>)
   17438:	4821      	ldr	r0, [pc, #132]	; (174c0 <queue_insert+0x110>)
   1743a:	22a7      	movs	r2, #167	; 0xa7
   1743c:	f002 fad7 	bl	199ee <printk>
   17440:	21a7      	movs	r1, #167	; 0xa7
   17442:	481e      	ldr	r0, [pc, #120]	; (174bc <queue_insert+0x10c>)
   17444:	f002 fd79 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   17448:	f387 8811 	msr	BASEPRI, r7
   1744c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   17450:	f06f 000b 	mvn.w	r0, #11
}
   17454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   17458:	2301      	movs	r3, #1
		anode->data = data;
   1745a:	f8c0 8004 	str.w	r8, [r0, #4]
   1745e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   17460:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   17462:	f003 0203 	and.w	r2, r3, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   17466:	b95d      	cbnz	r5, 17480 <queue_insert+0xd0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   17468:	6823      	ldr	r3, [r4, #0]
   1746a:	4313      	orrs	r3, r2
   1746c:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1746e:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   17470:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   17472:	b973      	cbnz	r3, 17492 <queue_insert+0xe2>
	list->tail = node;
   17474:	6060      	str	r0, [r4, #4]
}
   17476:	e00c      	b.n	17492 <queue_insert+0xe2>
}
   17478:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   1747a:	f8c8 9000 	str.w	r9, [r8]
}
   1747e:	e7ef      	b.n	17460 <queue_insert+0xb0>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   17480:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   17482:	f033 0303 	bics.w	r3, r3, #3
   17486:	d110      	bne.n	174aa <queue_insert+0xfa>
	parent->next_and_flags = cur_flags | (unative_t)child;
   17488:	6002      	str	r2, [r0, #0]
	return list->tail;
   1748a:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1748c:	b93a      	cbnz	r2, 1749e <queue_insert+0xee>
	list->head = node;
   1748e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   17492:	2104      	movs	r1, #4
   17494:	f104 0014 	add.w	r0, r4, #20
   17498:	f005 ff6d 	bl	1d376 <z_handle_obj_poll_events>
   1749c:	e7ba      	b.n	17414 <queue_insert+0x64>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1749e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   174a0:	f003 0303 	and.w	r3, r3, #3
   174a4:	4303      	orrs	r3, r0
   174a6:	6013      	str	r3, [r2, #0]
   174a8:	e7e4      	b.n	17474 <queue_insert+0xc4>
   174aa:	4313      	orrs	r3, r2
   174ac:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   174ae:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   174b0:	f003 0303 	and.w	r3, r3, #3
   174b4:	4303      	orrs	r3, r0
   174b6:	602b      	str	r3, [r5, #0]
}
   174b8:	e7eb      	b.n	17492 <queue_insert+0xe2>
   174ba:	bf00      	nop
   174bc:	0001eb11 	.word	0x0001eb11
   174c0:	0001ead7 	.word	0x0001ead7

000174c4 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   174c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   174c8:	4605      	mov	r5, r0
   174ca:	4616      	mov	r6, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   174cc:	460c      	mov	r4, r1
   174ce:	2900      	cmp	r1, #0
   174d0:	d045      	beq.n	1755e <k_queue_append_list+0x9a>
   174d2:	2a00      	cmp	r2, #0
   174d4:	d043      	beq.n	1755e <k_queue_append_list+0x9a>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   174d6:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   174da:	f04f 0320 	mov.w	r3, #32
   174de:	f3ef 8911 	mrs	r9, BASEPRI
   174e2:	f383 8811 	msr	BASEPRI, r3
   174e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   174ea:	4638      	mov	r0, r7
   174ec:	f001 fa96 	bl	18a1c <z_spin_lock_valid>
   174f0:	b940      	cbnz	r0, 17504 <k_queue_append_list+0x40>
   174f2:	491c      	ldr	r1, [pc, #112]	; (17564 <k_queue_append_list+0xa0>)
   174f4:	481c      	ldr	r0, [pc, #112]	; (17568 <k_queue_append_list+0xa4>)
   174f6:	227c      	movs	r2, #124	; 0x7c
   174f8:	f002 fa79 	bl	199ee <printk>
   174fc:	217c      	movs	r1, #124	; 0x7c
   174fe:	4819      	ldr	r0, [pc, #100]	; (17564 <k_queue_append_list+0xa0>)
   17500:	f002 fd1b 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   17504:	4638      	mov	r0, r7
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   17506:	f105 080c 	add.w	r8, r5, #12
   1750a:	f001 faa3 	bl	18a54 <z_spin_lock_set_owner>
   1750e:	4640      	mov	r0, r8
   17510:	f000 fee2 	bl	182d8 <z_unpend_first_thread>
   17514:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   17518:	b920      	cbnz	r0, 17524 <k_queue_append_list+0x60>
	return list->tail;
   1751a:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1751c:	b9ca      	cbnz	r2, 17552 <k_queue_append_list+0x8e>
	list->head = node;
   1751e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   17520:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   17522:	e00a      	b.n	1753a <k_queue_append_list+0x76>
	thread->base.swap_data = data;
   17524:	6144      	str	r4, [r0, #20]
   17526:	f8c0 a088 	str.w	sl, [r0, #136]	; 0x88
	z_ready_thread(thread);
   1752a:	f000 fac9 	bl	17ac0 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   1752e:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   17530:	4640      	mov	r0, r8
   17532:	f000 fed1 	bl	182d8 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   17536:	2c00      	cmp	r4, #0
   17538:	d1ee      	bne.n	17518 <k_queue_append_list+0x54>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1753a:	2104      	movs	r1, #4
   1753c:	f105 0014 	add.w	r0, r5, #20
   17540:	f005 ff19 	bl	1d376 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   17544:	4638      	mov	r0, r7
   17546:	4649      	mov	r1, r9
   17548:	f000 f8e6 	bl	17718 <z_reschedule>
	return 0;
   1754c:	2000      	movs	r0, #0
}
   1754e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   17552:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   17554:	f003 0303 	and.w	r3, r3, #3
   17558:	431c      	orrs	r4, r3
   1755a:	6014      	str	r4, [r2, #0]
}
   1755c:	e7e0      	b.n	17520 <k_queue_append_list+0x5c>
		return -EINVAL;
   1755e:	f06f 0015 	mvn.w	r0, #21
   17562:	e7f4      	b.n	1754e <k_queue_append_list+0x8a>
   17564:	0001eb11 	.word	0x0001eb11
   17568:	0001ead7 	.word	0x0001ead7

0001756c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1756c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17570:	4605      	mov	r5, r0
   17572:	4690      	mov	r8, r2
   17574:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   17576:	f100 0608 	add.w	r6, r0, #8
   1757a:	f04f 0320 	mov.w	r3, #32
   1757e:	f3ef 8911 	mrs	r9, BASEPRI
   17582:	f383 8811 	msr	BASEPRI, r3
   17586:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1758a:	4630      	mov	r0, r6
   1758c:	f001 fa46 	bl	18a1c <z_spin_lock_valid>
   17590:	b940      	cbnz	r0, 175a4 <z_impl_k_queue_get+0x38>
   17592:	4921      	ldr	r1, [pc, #132]	; (17618 <z_impl_k_queue_get+0xac>)
   17594:	4821      	ldr	r0, [pc, #132]	; (1761c <z_impl_k_queue_get+0xb0>)
   17596:	227c      	movs	r2, #124	; 0x7c
   17598:	f002 fa29 	bl	199ee <printk>
   1759c:	217c      	movs	r1, #124	; 0x7c
   1759e:	481e      	ldr	r0, [pc, #120]	; (17618 <z_impl_k_queue_get+0xac>)
   175a0:	f002 fccb 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   175a4:	4630      	mov	r0, r6
   175a6:	f001 fa55 	bl	18a54 <z_spin_lock_set_owner>
	return list->head;
   175aa:	682c      	ldr	r4, [r5, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   175ac:	b314      	cbz	r4, 175f4 <z_impl_k_queue_get+0x88>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   175ae:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   175b0:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   175b2:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   175b6:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   175b8:	4620      	mov	r0, r4
   175ba:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   175be:	602b      	str	r3, [r5, #0]
	list->tail = node;
   175c0:	bf08      	it	eq
   175c2:	606b      	streq	r3, [r5, #4]
   175c4:	f005 fd77 	bl	1d0b6 <z_queue_node_peek>
   175c8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   175ca:	4630      	mov	r0, r6
   175cc:	f001 fa34 	bl	18a38 <z_spin_unlock_valid>
   175d0:	b940      	cbnz	r0, 175e4 <z_impl_k_queue_get+0x78>
   175d2:	4911      	ldr	r1, [pc, #68]	; (17618 <z_impl_k_queue_get+0xac>)
   175d4:	4811      	ldr	r0, [pc, #68]	; (1761c <z_impl_k_queue_get+0xb0>)
   175d6:	22a7      	movs	r2, #167	; 0xa7
   175d8:	f002 fa09 	bl	199ee <printk>
   175dc:	21a7      	movs	r1, #167	; 0xa7
   175de:	480e      	ldr	r0, [pc, #56]	; (17618 <z_impl_k_queue_get+0xac>)
   175e0:	f002 fcab 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   175e4:	f389 8811 	msr	BASEPRI, r9
   175e8:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   175ec:	4620      	mov	r0, r4
   175ee:	b003      	add	sp, #12
   175f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   175f4:	ea58 0307 	orrs.w	r3, r8, r7
   175f8:	d0e7      	beq.n	175ca <z_impl_k_queue_get+0x5e>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   175fa:	4649      	mov	r1, r9
   175fc:	4630      	mov	r0, r6
   175fe:	e9cd 8700 	strd	r8, r7, [sp]
   17602:	f105 020c 	add.w	r2, r5, #12
   17606:	f000 fdc5 	bl	18194 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1760a:	2800      	cmp	r0, #0
   1760c:	d1ee      	bne.n	175ec <z_impl_k_queue_get+0x80>
   1760e:	4b04      	ldr	r3, [pc, #16]	; (17620 <z_impl_k_queue_get+0xb4>)
   17610:	689b      	ldr	r3, [r3, #8]
   17612:	695c      	ldr	r4, [r3, #20]
   17614:	e7ea      	b.n	175ec <z_impl_k_queue_get+0x80>
   17616:	bf00      	nop
   17618:	0001eb11 	.word	0x0001eb11
   1761c:	0001ead7 	.word	0x0001ead7
   17620:	2000adec 	.word	0x2000adec

00017624 <pended_on>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   17624:	6883      	ldr	r3, [r0, #8]
{
   17626:	b510      	push	{r4, lr}
   17628:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   1762a:	b953      	cbnz	r3, 17642 <pended_on+0x1e>
   1762c:	4906      	ldr	r1, [pc, #24]	; (17648 <pended_on+0x24>)
   1762e:	4807      	ldr	r0, [pc, #28]	; (1764c <pended_on+0x28>)
   17630:	f44f 7201 	mov.w	r2, #516	; 0x204
   17634:	f002 f9db 	bl	199ee <printk>
   17638:	f44f 7101 	mov.w	r1, #516	; 0x204
   1763c:	4802      	ldr	r0, [pc, #8]	; (17648 <pended_on+0x24>)
   1763e:	f002 fc7c 	bl	19f3a <assert_post_action>

	return thread->base.pended_on;
}
   17642:	68a0      	ldr	r0, [r4, #8]
   17644:	bd10      	pop	{r4, pc}
   17646:	bf00      	nop
   17648:	000216d6 	.word	0x000216d6
   1764c:	0001ead7 	.word	0x0001ead7

00017650 <z_reset_time_slice>:
{
   17650:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   17652:	4c08      	ldr	r4, [pc, #32]	; (17674 <z_reset_time_slice+0x24>)
   17654:	6823      	ldr	r3, [r4, #0]
   17656:	b15b      	cbz	r3, 17670 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   17658:	f7f4 fb20 	bl	bc9c <z_clock_elapsed>
   1765c:	4603      	mov	r3, r0
   1765e:	6820      	ldr	r0, [r4, #0]
   17660:	4a05      	ldr	r2, [pc, #20]	; (17678 <z_reset_time_slice+0x28>)
   17662:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
   17664:	2100      	movs	r1, #0
}
   17666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1766a:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1766c:	f001 bc8c 	b.w	18f88 <z_set_timeout_expiry>
}
   17670:	bd10      	pop	{r4, pc}
   17672:	bf00      	nop
   17674:	2000ae2c 	.word	0x2000ae2c
   17678:	2000adec 	.word	0x2000adec

0001767c <k_sched_time_slice_set>:
{
   1767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1767e:	4604      	mov	r4, r0
   17680:	460d      	mov	r5, r1
	__asm__ volatile(
   17682:	f04f 0320 	mov.w	r3, #32
   17686:	f3ef 8711 	mrs	r7, BASEPRI
   1768a:	f383 8811 	msr	BASEPRI, r3
   1768e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17692:	481b      	ldr	r0, [pc, #108]	; (17700 <k_sched_time_slice_set+0x84>)
   17694:	f001 f9c2 	bl	18a1c <z_spin_lock_valid>
   17698:	b940      	cbnz	r0, 176ac <k_sched_time_slice_set+0x30>
   1769a:	491a      	ldr	r1, [pc, #104]	; (17704 <k_sched_time_slice_set+0x88>)
   1769c:	481a      	ldr	r0, [pc, #104]	; (17708 <k_sched_time_slice_set+0x8c>)
   1769e:	227c      	movs	r2, #124	; 0x7c
   176a0:	f002 f9a5 	bl	199ee <printk>
   176a4:	217c      	movs	r1, #124	; 0x7c
   176a6:	4817      	ldr	r0, [pc, #92]	; (17704 <k_sched_time_slice_set+0x88>)
   176a8:	f002 fc47 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   176ac:	4814      	ldr	r0, [pc, #80]	; (17700 <k_sched_time_slice_set+0x84>)
   176ae:	f001 f9d1 	bl	18a54 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   176b2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   176b6:	2100      	movs	r1, #0
   176b8:	f240 30e7 	movw	r0, #999	; 0x3e7
   176bc:	4b13      	ldr	r3, [pc, #76]	; (1770c <k_sched_time_slice_set+0x90>)
   176be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   176c2:	6159      	str	r1, [r3, #20]
   176c4:	2300      	movs	r3, #0
   176c6:	fbe4 0106 	umlal	r0, r1, r4, r6
   176ca:	f7f1 fa2f 	bl	8b2c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   176ce:	4b10      	ldr	r3, [pc, #64]	; (17710 <k_sched_time_slice_set+0x94>)
   176d0:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   176d2:	4b10      	ldr	r3, [pc, #64]	; (17714 <k_sched_time_slice_set+0x98>)
   176d4:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   176d6:	f7ff ffbb 	bl	17650 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   176da:	4809      	ldr	r0, [pc, #36]	; (17700 <k_sched_time_slice_set+0x84>)
   176dc:	f001 f9ac 	bl	18a38 <z_spin_unlock_valid>
   176e0:	b940      	cbnz	r0, 176f4 <k_sched_time_slice_set+0x78>
   176e2:	4908      	ldr	r1, [pc, #32]	; (17704 <k_sched_time_slice_set+0x88>)
   176e4:	4808      	ldr	r0, [pc, #32]	; (17708 <k_sched_time_slice_set+0x8c>)
   176e6:	22a7      	movs	r2, #167	; 0xa7
   176e8:	f002 f981 	bl	199ee <printk>
   176ec:	21a7      	movs	r1, #167	; 0xa7
   176ee:	4805      	ldr	r0, [pc, #20]	; (17704 <k_sched_time_slice_set+0x88>)
   176f0:	f002 fc23 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   176f4:	f387 8811 	msr	BASEPRI, r7
   176f8:	f3bf 8f6f 	isb	sy
}
   176fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   176fe:	bf00      	nop
   17700:	2000ae24 	.word	0x2000ae24
   17704:	0001eb11 	.word	0x0001eb11
   17708:	0001ead7 	.word	0x0001ead7
   1770c:	2000adec 	.word	0x2000adec
   17710:	2000ae2c 	.word	0x2000ae2c
   17714:	2000ae28 	.word	0x2000ae28

00017718 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   17718:	b510      	push	{r4, lr}
   1771a:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1771c:	460c      	mov	r4, r1
   1771e:	b9c1      	cbnz	r1, 17752 <z_reschedule+0x3a>
   17720:	f3ef 8205 	mrs	r2, IPSR
   17724:	b9aa      	cbnz	r2, 17752 <z_reschedule+0x3a>
	return _kernel.ready_q.cache;
   17726:	4a14      	ldr	r2, [pc, #80]	; (17778 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
   17728:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1772a:	6892      	ldr	r2, [r2, #8]
   1772c:	4291      	cmp	r1, r2
   1772e:	d010      	beq.n	17752 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17730:	f001 f982 	bl	18a38 <z_spin_unlock_valid>
   17734:	b940      	cbnz	r0, 17748 <z_reschedule+0x30>
   17736:	4911      	ldr	r1, [pc, #68]	; (1777c <z_reschedule+0x64>)
   17738:	4811      	ldr	r0, [pc, #68]	; (17780 <z_reschedule+0x68>)
   1773a:	22be      	movs	r2, #190	; 0xbe
   1773c:	f002 f957 	bl	199ee <printk>
   17740:	21be      	movs	r1, #190	; 0xbe
   17742:	480e      	ldr	r0, [pc, #56]	; (1777c <z_reschedule+0x64>)
   17744:	f002 fbf9 	bl	19f3a <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   17748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
   1774c:	2000      	movs	r0, #0
   1774e:	f7f5 babf 	b.w	ccd0 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17752:	4618      	mov	r0, r3
   17754:	f001 f970 	bl	18a38 <z_spin_unlock_valid>
   17758:	b940      	cbnz	r0, 1776c <z_reschedule+0x54>
   1775a:	4908      	ldr	r1, [pc, #32]	; (1777c <z_reschedule+0x64>)
   1775c:	4808      	ldr	r0, [pc, #32]	; (17780 <z_reschedule+0x68>)
   1775e:	22a7      	movs	r2, #167	; 0xa7
   17760:	f002 f945 	bl	199ee <printk>
   17764:	21a7      	movs	r1, #167	; 0xa7
   17766:	4805      	ldr	r0, [pc, #20]	; (1777c <z_reschedule+0x64>)
   17768:	f002 fbe7 	bl	19f3a <assert_post_action>
   1776c:	f384 8811 	msr	BASEPRI, r4
   17770:	f3bf 8f6f 	isb	sy
   17774:	bd10      	pop	{r4, pc}
   17776:	bf00      	nop
   17778:	2000adec 	.word	0x2000adec
   1777c:	0001eb11 	.word	0x0001eb11
   17780:	0001ead7 	.word	0x0001ead7

00017784 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   17784:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   17786:	f04f 0320 	mov.w	r3, #32
   1778a:	f3ef 8511 	mrs	r5, BASEPRI
   1778e:	f383 8811 	msr	BASEPRI, r3
   17792:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17796:	4822      	ldr	r0, [pc, #136]	; (17820 <k_sched_lock+0x9c>)
   17798:	f001 f940 	bl	18a1c <z_spin_lock_valid>
   1779c:	b940      	cbnz	r0, 177b0 <k_sched_lock+0x2c>
   1779e:	4921      	ldr	r1, [pc, #132]	; (17824 <k_sched_lock+0xa0>)
   177a0:	4821      	ldr	r0, [pc, #132]	; (17828 <k_sched_lock+0xa4>)
   177a2:	227c      	movs	r2, #124	; 0x7c
   177a4:	f002 f923 	bl	199ee <printk>
   177a8:	217c      	movs	r1, #124	; 0x7c
   177aa:	481e      	ldr	r0, [pc, #120]	; (17824 <k_sched_lock+0xa0>)
   177ac:	f002 fbc5 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   177b0:	481b      	ldr	r0, [pc, #108]	; (17820 <k_sched_lock+0x9c>)
   177b2:	f001 f94f 	bl	18a54 <z_spin_lock_set_owner>
   177b6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   177ba:	b153      	cbz	r3, 177d2 <k_sched_lock+0x4e>
   177bc:	491b      	ldr	r1, [pc, #108]	; (1782c <k_sched_lock+0xa8>)
   177be:	481a      	ldr	r0, [pc, #104]	; (17828 <k_sched_lock+0xa4>)
   177c0:	f44f 7289 	mov.w	r2, #274	; 0x112
   177c4:	f002 f913 	bl	199ee <printk>
   177c8:	f44f 7189 	mov.w	r1, #274	; 0x112
   177cc:	4817      	ldr	r0, [pc, #92]	; (1782c <k_sched_lock+0xa8>)
   177ce:	f002 fbb4 	bl	19f3a <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   177d2:	4c17      	ldr	r4, [pc, #92]	; (17830 <k_sched_lock+0xac>)
   177d4:	68a3      	ldr	r3, [r4, #8]
   177d6:	7bdb      	ldrb	r3, [r3, #15]
   177d8:	2b01      	cmp	r3, #1
   177da:	d10a      	bne.n	177f2 <k_sched_lock+0x6e>
   177dc:	4913      	ldr	r1, [pc, #76]	; (1782c <k_sched_lock+0xa8>)
   177de:	4812      	ldr	r0, [pc, #72]	; (17828 <k_sched_lock+0xa4>)
   177e0:	f240 1213 	movw	r2, #275	; 0x113
   177e4:	f002 f903 	bl	199ee <printk>
   177e8:	f240 1113 	movw	r1, #275	; 0x113
   177ec:	480f      	ldr	r0, [pc, #60]	; (1782c <k_sched_lock+0xa8>)
   177ee:	f002 fba4 	bl	19f3a <assert_post_action>
	--_current->base.sched_locked;
   177f2:	68a2      	ldr	r2, [r4, #8]
   177f4:	7bd3      	ldrb	r3, [r2, #15]
   177f6:	3b01      	subs	r3, #1
   177f8:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   177fa:	4809      	ldr	r0, [pc, #36]	; (17820 <k_sched_lock+0x9c>)
   177fc:	f001 f91c 	bl	18a38 <z_spin_unlock_valid>
   17800:	b940      	cbnz	r0, 17814 <k_sched_lock+0x90>
   17802:	4908      	ldr	r1, [pc, #32]	; (17824 <k_sched_lock+0xa0>)
   17804:	4808      	ldr	r0, [pc, #32]	; (17828 <k_sched_lock+0xa4>)
   17806:	22a7      	movs	r2, #167	; 0xa7
   17808:	f002 f8f1 	bl	199ee <printk>
   1780c:	21a7      	movs	r1, #167	; 0xa7
   1780e:	4805      	ldr	r0, [pc, #20]	; (17824 <k_sched_lock+0xa0>)
   17810:	f002 fb93 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   17814:	f385 8811 	msr	BASEPRI, r5
   17818:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1781c:	bd38      	pop	{r3, r4, r5, pc}
   1781e:	bf00      	nop
   17820:	2000ae24 	.word	0x2000ae24
   17824:	0001eb11 	.word	0x0001eb11
   17828:	0001ead7 	.word	0x0001ead7
   1782c:	000216ab 	.word	0x000216ab
   17830:	2000adec 	.word	0x2000adec

00017834 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   17834:	4b11      	ldr	r3, [pc, #68]	; (1787c <z_priq_dumb_remove+0x48>)
{
   17836:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   17838:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1783c:	4282      	cmp	r2, r0
{
   1783e:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   17840:	d105      	bne.n	1784e <z_priq_dumb_remove+0x1a>
   17842:	689b      	ldr	r3, [r3, #8]
   17844:	428b      	cmp	r3, r1
   17846:	d102      	bne.n	1784e <z_priq_dumb_remove+0x1a>
   17848:	7b4b      	ldrb	r3, [r1, #13]
   1784a:	06db      	lsls	r3, r3, #27
   1784c:	d114      	bne.n	17878 <z_priq_dumb_remove+0x44>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1784e:	4b0c      	ldr	r3, [pc, #48]	; (17880 <z_priq_dumb_remove+0x4c>)
   17850:	429c      	cmp	r4, r3
   17852:	d10a      	bne.n	1786a <z_priq_dumb_remove+0x36>
   17854:	490b      	ldr	r1, [pc, #44]	; (17884 <z_priq_dumb_remove+0x50>)
   17856:	480c      	ldr	r0, [pc, #48]	; (17888 <z_priq_dumb_remove+0x54>)
   17858:	f240 32da 	movw	r2, #986	; 0x3da
   1785c:	f002 f8c7 	bl	199ee <printk>
   17860:	f240 31da 	movw	r1, #986	; 0x3da
   17864:	4807      	ldr	r0, [pc, #28]	; (17884 <z_priq_dumb_remove+0x50>)
   17866:	f002 fb68 	bl	19f3a <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1786a:	e9d4 3200 	ldrd	r3, r2, [r4]
   1786e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   17870:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   17872:	2300      	movs	r3, #0
	node->prev = NULL;
   17874:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   17878:	bd10      	pop	{r4, pc}
   1787a:	bf00      	nop
   1787c:	2000adec 	.word	0x2000adec
   17880:	2000a290 	.word	0x2000a290
   17884:	000216d6 	.word	0x000216d6
   17888:	0001ead7 	.word	0x0001ead7

0001788c <z_unpend_thread>:
{
   1788c:	b538      	push	{r3, r4, r5, lr}
   1788e:	4604      	mov	r4, r0
	__asm__ volatile(
   17890:	f04f 0320 	mov.w	r3, #32
   17894:	f3ef 8511 	mrs	r5, BASEPRI
   17898:	f383 8811 	msr	BASEPRI, r3
   1789c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   178a0:	4814      	ldr	r0, [pc, #80]	; (178f4 <z_unpend_thread+0x68>)
   178a2:	f001 f8bb 	bl	18a1c <z_spin_lock_valid>
   178a6:	b940      	cbnz	r0, 178ba <z_unpend_thread+0x2e>
   178a8:	4913      	ldr	r1, [pc, #76]	; (178f8 <z_unpend_thread+0x6c>)
   178aa:	4814      	ldr	r0, [pc, #80]	; (178fc <z_unpend_thread+0x70>)
   178ac:	227c      	movs	r2, #124	; 0x7c
   178ae:	f002 f89e 	bl	199ee <printk>
   178b2:	217c      	movs	r1, #124	; 0x7c
   178b4:	4810      	ldr	r0, [pc, #64]	; (178f8 <z_unpend_thread+0x6c>)
   178b6:	f002 fb40 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   178ba:	480e      	ldr	r0, [pc, #56]	; (178f4 <z_unpend_thread+0x68>)
   178bc:	f001 f8ca 	bl	18a54 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   178c0:	4620      	mov	r0, r4
   178c2:	f005 fc45 	bl	1d150 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   178c6:	480b      	ldr	r0, [pc, #44]	; (178f4 <z_unpend_thread+0x68>)
   178c8:	f001 f8b6 	bl	18a38 <z_spin_unlock_valid>
   178cc:	b940      	cbnz	r0, 178e0 <z_unpend_thread+0x54>
   178ce:	490a      	ldr	r1, [pc, #40]	; (178f8 <z_unpend_thread+0x6c>)
   178d0:	480a      	ldr	r0, [pc, #40]	; (178fc <z_unpend_thread+0x70>)
   178d2:	22a7      	movs	r2, #167	; 0xa7
   178d4:	f002 f88b 	bl	199ee <printk>
   178d8:	21a7      	movs	r1, #167	; 0xa7
   178da:	4807      	ldr	r0, [pc, #28]	; (178f8 <z_unpend_thread+0x6c>)
   178dc:	f002 fb2d 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   178e0:	f385 8811 	msr	BASEPRI, r5
   178e4:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   178e8:	f104 0018 	add.w	r0, r4, #24
}
   178ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   178f0:	f001 bad8 	b.w	18ea4 <z_abort_timeout>
   178f4:	2000ae24 	.word	0x2000ae24
   178f8:	0001eb11 	.word	0x0001eb11
   178fc:	0001ead7 	.word	0x0001ead7

00017900 <update_cache>:
{
   17900:	b538      	push	{r3, r4, r5, lr}
	__ASSERT(_current != NULL, "");
   17902:	4c19      	ldr	r4, [pc, #100]	; (17968 <update_cache+0x68>)
{
   17904:	4602      	mov	r2, r0
	if (_current_cpu->pending_abort != NULL) {
   17906:	6923      	ldr	r3, [r4, #16]
	__ASSERT(_current != NULL, "");
   17908:	68a1      	ldr	r1, [r4, #8]
	if (_current_cpu->pending_abort != NULL) {
   1790a:	b143      	cbz	r3, 1791e <update_cache+0x1e>
		return _current_cpu->idle_thread;
   1790c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1790e:	b1a8      	cbz	r0, 1793c <update_cache+0x3c>
		if (thread != _current) {
   17910:	68a3      	ldr	r3, [r4, #8]
   17912:	42ab      	cmp	r3, r5
   17914:	d001      	beq.n	1791a <update_cache+0x1a>
			z_reset_time_slice();
   17916:	f7ff fe9b 	bl	17650 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1791a:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1791c:	e023      	b.n	17966 <update_cache+0x66>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1791e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   17922:	f005 fc23 	bl	1d16c <z_priq_dumb_best>
   17926:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   17928:	7b4b      	ldrb	r3, [r1, #13]
   1792a:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1792c:	bf44      	itt	mi
   1792e:	f043 0308 	orrmi.w	r3, r3, #8
   17932:	734b      	strbmi	r3, [r1, #13]
	return thread ? thread : _current_cpu->idle_thread;
   17934:	b905      	cbnz	r5, 17938 <update_cache+0x38>
   17936:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   17938:	b152      	cbz	r2, 17950 <update_cache+0x50>
   1793a:	e7e9      	b.n	17910 <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   1793c:	b941      	cbnz	r1, 17950 <update_cache+0x50>
   1793e:	490b      	ldr	r1, [pc, #44]	; (1796c <update_cache+0x6c>)
   17940:	480b      	ldr	r0, [pc, #44]	; (17970 <update_cache+0x70>)
   17942:	2283      	movs	r2, #131	; 0x83
   17944:	f002 f853 	bl	199ee <printk>
   17948:	2183      	movs	r1, #131	; 0x83
   1794a:	4808      	ldr	r0, [pc, #32]	; (1796c <update_cache+0x6c>)
   1794c:	f002 faf5 	bl	19f3a <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   17950:	68a3      	ldr	r3, [r4, #8]
   17952:	7b5a      	ldrb	r2, [r3, #13]
   17954:	06d2      	lsls	r2, r2, #27
   17956:	d1db      	bne.n	17910 <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   17958:	69aa      	ldr	r2, [r5, #24]
   1795a:	2a00      	cmp	r2, #0
   1795c:	d1d8      	bne.n	17910 <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   1795e:	89da      	ldrh	r2, [r3, #14]
   17960:	2a7f      	cmp	r2, #127	; 0x7f
   17962:	d9d5      	bls.n	17910 <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   17964:	62a3      	str	r3, [r4, #40]	; 0x28
}
   17966:	bd38      	pop	{r3, r4, r5, pc}
   17968:	2000adec 	.word	0x2000adec
   1796c:	000216d6 	.word	0x000216d6
   17970:	0001ead7 	.word	0x0001ead7

00017974 <k_sched_unlock>:
{
   17974:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   17976:	f04f 0320 	mov.w	r3, #32
   1797a:	f3ef 8511 	mrs	r5, BASEPRI
   1797e:	f383 8811 	msr	BASEPRI, r3
   17982:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17986:	4824      	ldr	r0, [pc, #144]	; (17a18 <k_sched_unlock+0xa4>)
   17988:	f001 f848 	bl	18a1c <z_spin_lock_valid>
   1798c:	b940      	cbnz	r0, 179a0 <k_sched_unlock+0x2c>
   1798e:	4923      	ldr	r1, [pc, #140]	; (17a1c <k_sched_unlock+0xa8>)
   17990:	4823      	ldr	r0, [pc, #140]	; (17a20 <k_sched_unlock+0xac>)
   17992:	227c      	movs	r2, #124	; 0x7c
   17994:	f002 f82b 	bl	199ee <printk>
   17998:	217c      	movs	r1, #124	; 0x7c
   1799a:	4820      	ldr	r0, [pc, #128]	; (17a1c <k_sched_unlock+0xa8>)
   1799c:	f002 facd 	bl	19f3a <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   179a0:	4c20      	ldr	r4, [pc, #128]	; (17a24 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
   179a2:	481d      	ldr	r0, [pc, #116]	; (17a18 <k_sched_unlock+0xa4>)
   179a4:	f001 f856 	bl	18a54 <z_spin_lock_set_owner>
   179a8:	68a3      	ldr	r3, [r4, #8]
   179aa:	7bdb      	ldrb	r3, [r3, #15]
   179ac:	b953      	cbnz	r3, 179c4 <k_sched_unlock+0x50>
   179ae:	491e      	ldr	r1, [pc, #120]	; (17a28 <k_sched_unlock+0xb4>)
   179b0:	481b      	ldr	r0, [pc, #108]	; (17a20 <k_sched_unlock+0xac>)
   179b2:	f44f 725d 	mov.w	r2, #884	; 0x374
   179b6:	f002 f81a 	bl	199ee <printk>
   179ba:	f44f 715d 	mov.w	r1, #884	; 0x374
   179be:	481a      	ldr	r0, [pc, #104]	; (17a28 <k_sched_unlock+0xb4>)
   179c0:	f002 fabb 	bl	19f3a <assert_post_action>
   179c4:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   179c8:	b153      	cbz	r3, 179e0 <k_sched_unlock+0x6c>
   179ca:	4917      	ldr	r1, [pc, #92]	; (17a28 <k_sched_unlock+0xb4>)
   179cc:	4814      	ldr	r0, [pc, #80]	; (17a20 <k_sched_unlock+0xac>)
   179ce:	f240 3275 	movw	r2, #885	; 0x375
   179d2:	f002 f80c 	bl	199ee <printk>
   179d6:	f240 3175 	movw	r1, #885	; 0x375
   179da:	4813      	ldr	r0, [pc, #76]	; (17a28 <k_sched_unlock+0xb4>)
   179dc:	f002 faad 	bl	19f3a <assert_post_action>
		++_current->base.sched_locked;
   179e0:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   179e2:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   179e4:	7bd3      	ldrb	r3, [r2, #15]
   179e6:	3301      	adds	r3, #1
   179e8:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   179ea:	f7ff ff89 	bl	17900 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   179ee:	480a      	ldr	r0, [pc, #40]	; (17a18 <k_sched_unlock+0xa4>)
   179f0:	f001 f822 	bl	18a38 <z_spin_unlock_valid>
   179f4:	b940      	cbnz	r0, 17a08 <k_sched_unlock+0x94>
   179f6:	4909      	ldr	r1, [pc, #36]	; (17a1c <k_sched_unlock+0xa8>)
   179f8:	4809      	ldr	r0, [pc, #36]	; (17a20 <k_sched_unlock+0xac>)
   179fa:	22a7      	movs	r2, #167	; 0xa7
   179fc:	f001 fff7 	bl	199ee <printk>
   17a00:	21a7      	movs	r1, #167	; 0xa7
   17a02:	4806      	ldr	r0, [pc, #24]	; (17a1c <k_sched_unlock+0xa8>)
   17a04:	f002 fa99 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   17a08:	f385 8811 	msr	BASEPRI, r5
   17a0c:	f3bf 8f6f 	isb	sy
}
   17a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   17a14:	f005 bb92 	b.w	1d13c <z_reschedule_unlocked>
   17a18:	2000ae24 	.word	0x2000ae24
   17a1c:	0001eb11 	.word	0x0001eb11
   17a20:	0001ead7 	.word	0x0001ead7
   17a24:	2000adec 	.word	0x2000adec
   17a28:	000216d6 	.word	0x000216d6

00017a2c <ready_thread>:
{
   17a2c:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   17a2e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   17a32:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   17a34:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   17a36:	7b43      	ldrb	r3, [r0, #13]
   17a38:	db39      	blt.n	17aae <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17a3a:	06db      	lsls	r3, r3, #27
   17a3c:	d137      	bne.n	17aae <ready_thread+0x82>
   17a3e:	6983      	ldr	r3, [r0, #24]
   17a40:	2b00      	cmp	r3, #0
   17a42:	d134      	bne.n	17aae <ready_thread+0x82>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17a44:	4b1a      	ldr	r3, [pc, #104]	; (17ab0 <ready_thread+0x84>)
   17a46:	4298      	cmp	r0, r3
   17a48:	d10a      	bne.n	17a60 <ready_thread+0x34>
   17a4a:	491a      	ldr	r1, [pc, #104]	; (17ab4 <ready_thread+0x88>)
   17a4c:	481a      	ldr	r0, [pc, #104]	; (17ab8 <ready_thread+0x8c>)
   17a4e:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   17a52:	f001 ffcc 	bl	199ee <printk>
   17a56:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   17a5a:	4816      	ldr	r0, [pc, #88]	; (17ab4 <ready_thread+0x88>)
   17a5c:	f002 fa6d 	bl	19f3a <assert_post_action>
	return list->head == list;
   17a60:	4a16      	ldr	r2, [pc, #88]	; (17abc <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17a62:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   17a66:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17a6a:	4283      	cmp	r3, r0
   17a6c:	d019      	beq.n	17aa2 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17a6e:	b1c3      	cbz	r3, 17aa2 <ready_thread+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   17a70:	f994 500e 	ldrsb.w	r5, [r4, #14]
   17a74:	f993 600e 	ldrsb.w	r6, [r3, #14]
   17a78:	42ae      	cmp	r6, r5
   17a7a:	dd0d      	ble.n	17a98 <ready_thread+0x6c>
	node->prev = successor->prev;
   17a7c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   17a7e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   17a82:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   17a84:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   17a86:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   17a88:	2000      	movs	r0, #0
   17a8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17a8e:	7363      	strb	r3, [r4, #13]
}
   17a90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   17a94:	f7ff bf34 	b.w	17900 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   17a98:	428b      	cmp	r3, r1
   17a9a:	d002      	beq.n	17aa2 <ready_thread+0x76>
   17a9c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17a9e:	2b00      	cmp	r3, #0
   17aa0:	d1e8      	bne.n	17a74 <ready_thread+0x48>
	node->prev = list->tail;
   17aa2:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   17aa6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   17aa8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17aaa:	6314      	str	r4, [r2, #48]	; 0x30
}
   17aac:	e7eb      	b.n	17a86 <ready_thread+0x5a>
}
   17aae:	bd70      	pop	{r4, r5, r6, pc}
   17ab0:	2000a290 	.word	0x2000a290
   17ab4:	000216d6 	.word	0x000216d6
   17ab8:	0001ead7 	.word	0x0001ead7
   17abc:	2000adec 	.word	0x2000adec

00017ac0 <z_ready_thread>:
{
   17ac0:	b538      	push	{r3, r4, r5, lr}
   17ac2:	4604      	mov	r4, r0
	__asm__ volatile(
   17ac4:	f04f 0320 	mov.w	r3, #32
   17ac8:	f3ef 8511 	mrs	r5, BASEPRI
   17acc:	f383 8811 	msr	BASEPRI, r3
   17ad0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17ad4:	4812      	ldr	r0, [pc, #72]	; (17b20 <z_ready_thread+0x60>)
   17ad6:	f000 ffa1 	bl	18a1c <z_spin_lock_valid>
   17ada:	b940      	cbnz	r0, 17aee <z_ready_thread+0x2e>
   17adc:	4911      	ldr	r1, [pc, #68]	; (17b24 <z_ready_thread+0x64>)
   17ade:	4812      	ldr	r0, [pc, #72]	; (17b28 <z_ready_thread+0x68>)
   17ae0:	227c      	movs	r2, #124	; 0x7c
   17ae2:	f001 ff84 	bl	199ee <printk>
   17ae6:	217c      	movs	r1, #124	; 0x7c
   17ae8:	480e      	ldr	r0, [pc, #56]	; (17b24 <z_ready_thread+0x64>)
   17aea:	f002 fa26 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   17aee:	480c      	ldr	r0, [pc, #48]	; (17b20 <z_ready_thread+0x60>)
   17af0:	f000 ffb0 	bl	18a54 <z_spin_lock_set_owner>
		ready_thread(thread);
   17af4:	4620      	mov	r0, r4
   17af6:	f7ff ff99 	bl	17a2c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17afa:	4809      	ldr	r0, [pc, #36]	; (17b20 <z_ready_thread+0x60>)
   17afc:	f000 ff9c 	bl	18a38 <z_spin_unlock_valid>
   17b00:	b940      	cbnz	r0, 17b14 <z_ready_thread+0x54>
   17b02:	4908      	ldr	r1, [pc, #32]	; (17b24 <z_ready_thread+0x64>)
   17b04:	4808      	ldr	r0, [pc, #32]	; (17b28 <z_ready_thread+0x68>)
   17b06:	22a7      	movs	r2, #167	; 0xa7
   17b08:	f001 ff71 	bl	199ee <printk>
   17b0c:	21a7      	movs	r1, #167	; 0xa7
   17b0e:	4805      	ldr	r0, [pc, #20]	; (17b24 <z_ready_thread+0x64>)
   17b10:	f002 fa13 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   17b14:	f385 8811 	msr	BASEPRI, r5
   17b18:	f3bf 8f6f 	isb	sy
}
   17b1c:	bd38      	pop	{r3, r4, r5, pc}
   17b1e:	bf00      	nop
   17b20:	2000ae24 	.word	0x2000ae24
   17b24:	0001eb11 	.word	0x0001eb11
   17b28:	0001ead7 	.word	0x0001ead7

00017b2c <z_sched_start>:
{
   17b2c:	b538      	push	{r3, r4, r5, lr}
   17b2e:	4604      	mov	r4, r0
	__asm__ volatile(
   17b30:	f04f 0320 	mov.w	r3, #32
   17b34:	f3ef 8511 	mrs	r5, BASEPRI
   17b38:	f383 8811 	msr	BASEPRI, r3
   17b3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17b40:	4818      	ldr	r0, [pc, #96]	; (17ba4 <z_sched_start+0x78>)
   17b42:	f000 ff6b 	bl	18a1c <z_spin_lock_valid>
   17b46:	b940      	cbnz	r0, 17b5a <z_sched_start+0x2e>
   17b48:	4917      	ldr	r1, [pc, #92]	; (17ba8 <z_sched_start+0x7c>)
   17b4a:	4818      	ldr	r0, [pc, #96]	; (17bac <z_sched_start+0x80>)
   17b4c:	227c      	movs	r2, #124	; 0x7c
   17b4e:	f001 ff4e 	bl	199ee <printk>
   17b52:	217c      	movs	r1, #124	; 0x7c
   17b54:	4814      	ldr	r0, [pc, #80]	; (17ba8 <z_sched_start+0x7c>)
   17b56:	f002 f9f0 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   17b5a:	4812      	ldr	r0, [pc, #72]	; (17ba4 <z_sched_start+0x78>)
   17b5c:	f000 ff7a 	bl	18a54 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   17b60:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   17b62:	075a      	lsls	r2, r3, #29
   17b64:	d411      	bmi.n	17b8a <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17b66:	480f      	ldr	r0, [pc, #60]	; (17ba4 <z_sched_start+0x78>)
   17b68:	f000 ff66 	bl	18a38 <z_spin_unlock_valid>
   17b6c:	b940      	cbnz	r0, 17b80 <z_sched_start+0x54>
   17b6e:	490e      	ldr	r1, [pc, #56]	; (17ba8 <z_sched_start+0x7c>)
   17b70:	480e      	ldr	r0, [pc, #56]	; (17bac <z_sched_start+0x80>)
   17b72:	22a7      	movs	r2, #167	; 0xa7
   17b74:	f001 ff3b 	bl	199ee <printk>
   17b78:	21a7      	movs	r1, #167	; 0xa7
   17b7a:	480b      	ldr	r0, [pc, #44]	; (17ba8 <z_sched_start+0x7c>)
   17b7c:	f002 f9dd 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   17b80:	f385 8811 	msr	BASEPRI, r5
   17b84:	f3bf 8f6f 	isb	sy
}
   17b88:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   17b8a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   17b8e:	4620      	mov	r0, r4
   17b90:	7363      	strb	r3, [r4, #13]
   17b92:	f7ff ff4b 	bl	17a2c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   17b96:	4629      	mov	r1, r5
}
   17b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   17b9c:	4801      	ldr	r0, [pc, #4]	; (17ba4 <z_sched_start+0x78>)
   17b9e:	f7ff bdbb 	b.w	17718 <z_reschedule>
   17ba2:	bf00      	nop
   17ba4:	2000ae24 	.word	0x2000ae24
   17ba8:	0001eb11 	.word	0x0001eb11
   17bac:	0001ead7 	.word	0x0001ead7

00017bb0 <z_thread_timeout>:
{
   17bb0:	b570      	push	{r4, r5, r6, lr}
   17bb2:	4604      	mov	r4, r0
	__asm__ volatile(
   17bb4:	f04f 0320 	mov.w	r3, #32
   17bb8:	f3ef 8611 	mrs	r6, BASEPRI
   17bbc:	f383 8811 	msr	BASEPRI, r3
   17bc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17bc4:	4819      	ldr	r0, [pc, #100]	; (17c2c <z_thread_timeout+0x7c>)
   17bc6:	f000 ff29 	bl	18a1c <z_spin_lock_valid>
   17bca:	b940      	cbnz	r0, 17bde <z_thread_timeout+0x2e>
   17bcc:	4918      	ldr	r1, [pc, #96]	; (17c30 <z_thread_timeout+0x80>)
   17bce:	4819      	ldr	r0, [pc, #100]	; (17c34 <z_thread_timeout+0x84>)
   17bd0:	227c      	movs	r2, #124	; 0x7c
   17bd2:	f001 ff0c 	bl	199ee <printk>
   17bd6:	217c      	movs	r1, #124	; 0x7c
   17bd8:	4815      	ldr	r0, [pc, #84]	; (17c30 <z_thread_timeout+0x80>)
   17bda:	f002 f9ae 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   17bde:	4813      	ldr	r0, [pc, #76]	; (17c2c <z_thread_timeout+0x7c>)
   17be0:	f000 ff38 	bl	18a54 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   17be4:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   17be8:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   17bec:	b113      	cbz	r3, 17bf4 <z_thread_timeout+0x44>
			unpend_thread_no_timeout(thread);
   17bee:	4628      	mov	r0, r5
   17bf0:	f005 faae 	bl	1d150 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   17bf4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   17bf8:	4628      	mov	r0, r5
   17bfa:	f023 0314 	bic.w	r3, r3, #20
   17bfe:	f804 3c0b 	strb.w	r3, [r4, #-11]
   17c02:	f7ff ff13 	bl	17a2c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17c06:	4809      	ldr	r0, [pc, #36]	; (17c2c <z_thread_timeout+0x7c>)
   17c08:	f000 ff16 	bl	18a38 <z_spin_unlock_valid>
   17c0c:	b940      	cbnz	r0, 17c20 <z_thread_timeout+0x70>
   17c0e:	4908      	ldr	r1, [pc, #32]	; (17c30 <z_thread_timeout+0x80>)
   17c10:	4808      	ldr	r0, [pc, #32]	; (17c34 <z_thread_timeout+0x84>)
   17c12:	22a7      	movs	r2, #167	; 0xa7
   17c14:	f001 feeb 	bl	199ee <printk>
   17c18:	21a7      	movs	r1, #167	; 0xa7
   17c1a:	4805      	ldr	r0, [pc, #20]	; (17c30 <z_thread_timeout+0x80>)
   17c1c:	f002 f98d 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   17c20:	f386 8811 	msr	BASEPRI, r6
   17c24:	f3bf 8f6f 	isb	sy
}
   17c28:	bd70      	pop	{r4, r5, r6, pc}
   17c2a:	bf00      	nop
   17c2c:	2000ae24 	.word	0x2000ae24
   17c30:	0001eb11 	.word	0x0001eb11
   17c34:	0001ead7 	.word	0x0001ead7

00017c38 <move_thread_to_end_of_prio_q>:
{
   17c38:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   17c3a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   17c3e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   17c40:	2b00      	cmp	r3, #0
   17c42:	da03      	bge.n	17c4c <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   17c44:	4601      	mov	r1, r0
   17c46:	481d      	ldr	r0, [pc, #116]	; (17cbc <move_thread_to_end_of_prio_q+0x84>)
   17c48:	f7ff fdf4 	bl	17834 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   17c4c:	4b1c      	ldr	r3, [pc, #112]	; (17cc0 <move_thread_to_end_of_prio_q+0x88>)
   17c4e:	429c      	cmp	r4, r3
   17c50:	d10a      	bne.n	17c68 <move_thread_to_end_of_prio_q+0x30>
   17c52:	491c      	ldr	r1, [pc, #112]	; (17cc4 <move_thread_to_end_of_prio_q+0x8c>)
   17c54:	481c      	ldr	r0, [pc, #112]	; (17cc8 <move_thread_to_end_of_prio_q+0x90>)
   17c56:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   17c5a:	f001 fec8 	bl	199ee <printk>
   17c5e:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   17c62:	4818      	ldr	r0, [pc, #96]	; (17cc4 <move_thread_to_end_of_prio_q+0x8c>)
   17c64:	f002 f969 	bl	19f3a <assert_post_action>
	return list->head == list;
   17c68:	4a18      	ldr	r2, [pc, #96]	; (17ccc <move_thread_to_end_of_prio_q+0x94>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17c6a:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   17c6e:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17c72:	4283      	cmp	r3, r0
   17c74:	d01c      	beq.n	17cb0 <move_thread_to_end_of_prio_q+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17c76:	b1db      	cbz	r3, 17cb0 <move_thread_to_end_of_prio_q+0x78>
	if (thread_1->base.prio < thread_2->base.prio) {
   17c78:	f994 500e 	ldrsb.w	r5, [r4, #14]
   17c7c:	f993 600e 	ldrsb.w	r6, [r3, #14]
   17c80:	42ae      	cmp	r6, r5
   17c82:	dd10      	ble.n	17ca6 <move_thread_to_end_of_prio_q+0x6e>
	node->prev = successor->prev;
   17c84:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   17c86:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   17c8a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   17c8c:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   17c8e:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   17c90:	6890      	ldr	r0, [r2, #8]
   17c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
   17c96:	7363      	strb	r3, [r4, #13]
   17c98:	1b03      	subs	r3, r0, r4
   17c9a:	4258      	negs	r0, r3
   17c9c:	4158      	adcs	r0, r3
}
   17c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   17ca2:	f7ff be2d 	b.w	17900 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   17ca6:	428b      	cmp	r3, r1
   17ca8:	d002      	beq.n	17cb0 <move_thread_to_end_of_prio_q+0x78>
   17caa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   17cac:	2b00      	cmp	r3, #0
   17cae:	d1e5      	bne.n	17c7c <move_thread_to_end_of_prio_q+0x44>
	node->prev = list->tail;
   17cb0:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   17cb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   17cb6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   17cb8:	6314      	str	r4, [r2, #48]	; 0x30
}
   17cba:	e7e8      	b.n	17c8e <move_thread_to_end_of_prio_q+0x56>
   17cbc:	2000ae18 	.word	0x2000ae18
   17cc0:	2000a290 	.word	0x2000a290
   17cc4:	000216d6 	.word	0x000216d6
   17cc8:	0001ead7 	.word	0x0001ead7
   17ccc:	2000adec 	.word	0x2000adec

00017cd0 <z_time_slice>:
{
   17cd0:	b538      	push	{r3, r4, r5, lr}
   17cd2:	4604      	mov	r4, r0
	__asm__ volatile(
   17cd4:	f04f 0320 	mov.w	r3, #32
   17cd8:	f3ef 8511 	mrs	r5, BASEPRI
   17cdc:	f383 8811 	msr	BASEPRI, r3
   17ce0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17ce4:	4824      	ldr	r0, [pc, #144]	; (17d78 <z_time_slice+0xa8>)
   17ce6:	f000 fe99 	bl	18a1c <z_spin_lock_valid>
   17cea:	b940      	cbnz	r0, 17cfe <z_time_slice+0x2e>
   17cec:	4923      	ldr	r1, [pc, #140]	; (17d7c <z_time_slice+0xac>)
   17cee:	4824      	ldr	r0, [pc, #144]	; (17d80 <z_time_slice+0xb0>)
   17cf0:	227c      	movs	r2, #124	; 0x7c
   17cf2:	f001 fe7c 	bl	199ee <printk>
   17cf6:	217c      	movs	r1, #124	; 0x7c
   17cf8:	4820      	ldr	r0, [pc, #128]	; (17d7c <z_time_slice+0xac>)
   17cfa:	f002 f91e 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   17cfe:	481e      	ldr	r0, [pc, #120]	; (17d78 <z_time_slice+0xa8>)
   17d00:	f000 fea8 	bl	18a54 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   17d04:	4b1f      	ldr	r3, [pc, #124]	; (17d84 <z_time_slice+0xb4>)
   17d06:	4a20      	ldr	r2, [pc, #128]	; (17d88 <z_time_slice+0xb8>)
   17d08:	6898      	ldr	r0, [r3, #8]
   17d0a:	6811      	ldr	r1, [r2, #0]
   17d0c:	4288      	cmp	r0, r1
   17d0e:	d113      	bne.n	17d38 <z_time_slice+0x68>
			z_reset_time_slice();
   17d10:	f7ff fc9e 	bl	17650 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17d14:	4818      	ldr	r0, [pc, #96]	; (17d78 <z_time_slice+0xa8>)
   17d16:	f000 fe8f 	bl	18a38 <z_spin_unlock_valid>
   17d1a:	b940      	cbnz	r0, 17d2e <z_time_slice+0x5e>
   17d1c:	4917      	ldr	r1, [pc, #92]	; (17d7c <z_time_slice+0xac>)
   17d1e:	4818      	ldr	r0, [pc, #96]	; (17d80 <z_time_slice+0xb0>)
   17d20:	22a7      	movs	r2, #167	; 0xa7
   17d22:	f001 fe64 	bl	199ee <printk>
   17d26:	21a7      	movs	r1, #167	; 0xa7
   17d28:	4814      	ldr	r0, [pc, #80]	; (17d7c <z_time_slice+0xac>)
   17d2a:	f002 f906 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   17d2e:	f385 8811 	msr	BASEPRI, r5
   17d32:	f3bf 8f6f 	isb	sy
}
   17d36:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   17d38:	2100      	movs	r1, #0
   17d3a:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   17d3c:	4a13      	ldr	r2, [pc, #76]	; (17d8c <z_time_slice+0xbc>)
   17d3e:	6812      	ldr	r2, [r2, #0]
   17d40:	b1ba      	cbz	r2, 17d72 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   17d42:	89c2      	ldrh	r2, [r0, #14]
   17d44:	2a7f      	cmp	r2, #127	; 0x7f
   17d46:	d814      	bhi.n	17d72 <z_time_slice+0xa2>
		&& !z_is_thread_prevented_from_running(thread)
   17d48:	7b42      	ldrb	r2, [r0, #13]
   17d4a:	06d2      	lsls	r2, r2, #27
   17d4c:	d111      	bne.n	17d72 <z_time_slice+0xa2>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   17d4e:	4a10      	ldr	r2, [pc, #64]	; (17d90 <z_time_slice+0xc0>)
   17d50:	f990 100e 	ldrsb.w	r1, [r0, #14]
   17d54:	6812      	ldr	r2, [r2, #0]
   17d56:	4291      	cmp	r1, r2
   17d58:	db0b      	blt.n	17d72 <z_time_slice+0xa2>
		&& !z_is_idle_thread_object(thread);
   17d5a:	4a0e      	ldr	r2, [pc, #56]	; (17d94 <z_time_slice+0xc4>)
   17d5c:	4290      	cmp	r0, r2
   17d5e:	d008      	beq.n	17d72 <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
   17d60:	695a      	ldr	r2, [r3, #20]
   17d62:	42a2      	cmp	r2, r4
   17d64:	dc02      	bgt.n	17d6c <z_time_slice+0x9c>
			move_thread_to_end_of_prio_q(_current);
   17d66:	f7ff ff67 	bl	17c38 <move_thread_to_end_of_prio_q>
   17d6a:	e7d1      	b.n	17d10 <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   17d6c:	1b12      	subs	r2, r2, r4
		_current_cpu->slice_ticks = 0;
   17d6e:	615a      	str	r2, [r3, #20]
   17d70:	e7d0      	b.n	17d14 <z_time_slice+0x44>
   17d72:	2200      	movs	r2, #0
   17d74:	e7fb      	b.n	17d6e <z_time_slice+0x9e>
   17d76:	bf00      	nop
   17d78:	2000ae24 	.word	0x2000ae24
   17d7c:	0001eb11 	.word	0x0001eb11
   17d80:	0001ead7 	.word	0x0001ead7
   17d84:	2000adec 	.word	0x2000adec
   17d88:	2000ae20 	.word	0x2000ae20
   17d8c:	2000ae2c 	.word	0x2000ae2c
   17d90:	2000ae28 	.word	0x2000ae28
   17d94:	2000a290 	.word	0x2000a290

00017d98 <z_impl_k_thread_suspend>:
{
   17d98:	b570      	push	{r4, r5, r6, lr}
   17d9a:	4604      	mov	r4, r0
   17d9c:	3018      	adds	r0, #24
   17d9e:	f001 f881 	bl	18ea4 <z_abort_timeout>
	__asm__ volatile(
   17da2:	f04f 0320 	mov.w	r3, #32
   17da6:	f3ef 8611 	mrs	r6, BASEPRI
   17daa:	f383 8811 	msr	BASEPRI, r3
   17dae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17db2:	4820      	ldr	r0, [pc, #128]	; (17e34 <z_impl_k_thread_suspend+0x9c>)
   17db4:	f000 fe32 	bl	18a1c <z_spin_lock_valid>
   17db8:	b940      	cbnz	r0, 17dcc <z_impl_k_thread_suspend+0x34>
   17dba:	491f      	ldr	r1, [pc, #124]	; (17e38 <z_impl_k_thread_suspend+0xa0>)
   17dbc:	481f      	ldr	r0, [pc, #124]	; (17e3c <z_impl_k_thread_suspend+0xa4>)
   17dbe:	227c      	movs	r2, #124	; 0x7c
   17dc0:	f001 fe15 	bl	199ee <printk>
   17dc4:	217c      	movs	r1, #124	; 0x7c
   17dc6:	481c      	ldr	r0, [pc, #112]	; (17e38 <z_impl_k_thread_suspend+0xa0>)
   17dc8:	f002 f8b7 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   17dcc:	4819      	ldr	r0, [pc, #100]	; (17e34 <z_impl_k_thread_suspend+0x9c>)
   17dce:	f000 fe41 	bl	18a54 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   17dd2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   17dd6:	2b00      	cmp	r3, #0
   17dd8:	da07      	bge.n	17dea <z_impl_k_thread_suspend+0x52>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   17dda:	4621      	mov	r1, r4
   17ddc:	4818      	ldr	r0, [pc, #96]	; (17e40 <z_impl_k_thread_suspend+0xa8>)
   17dde:	f7ff fd29 	bl	17834 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   17de2:	7b63      	ldrb	r3, [r4, #13]
   17de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17de8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   17dea:	4d16      	ldr	r5, [pc, #88]	; (17e44 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   17dec:	7b63      	ldrb	r3, [r4, #13]
   17dee:	68a8      	ldr	r0, [r5, #8]
   17df0:	f043 0310 	orr.w	r3, r3, #16
   17df4:	7363      	strb	r3, [r4, #13]
   17df6:	1b03      	subs	r3, r0, r4
   17df8:	4258      	negs	r0, r3
   17dfa:	4158      	adcs	r0, r3
   17dfc:	f7ff fd80 	bl	17900 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17e00:	480c      	ldr	r0, [pc, #48]	; (17e34 <z_impl_k_thread_suspend+0x9c>)
   17e02:	f000 fe19 	bl	18a38 <z_spin_unlock_valid>
   17e06:	b940      	cbnz	r0, 17e1a <z_impl_k_thread_suspend+0x82>
   17e08:	490b      	ldr	r1, [pc, #44]	; (17e38 <z_impl_k_thread_suspend+0xa0>)
   17e0a:	480c      	ldr	r0, [pc, #48]	; (17e3c <z_impl_k_thread_suspend+0xa4>)
   17e0c:	22a7      	movs	r2, #167	; 0xa7
   17e0e:	f001 fdee 	bl	199ee <printk>
   17e12:	21a7      	movs	r1, #167	; 0xa7
   17e14:	4808      	ldr	r0, [pc, #32]	; (17e38 <z_impl_k_thread_suspend+0xa0>)
   17e16:	f002 f890 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   17e1a:	f386 8811 	msr	BASEPRI, r6
   17e1e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   17e22:	68ab      	ldr	r3, [r5, #8]
   17e24:	42a3      	cmp	r3, r4
   17e26:	d103      	bne.n	17e30 <z_impl_k_thread_suspend+0x98>
}
   17e28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   17e2c:	f005 b986 	b.w	1d13c <z_reschedule_unlocked>
}
   17e30:	bd70      	pop	{r4, r5, r6, pc}
   17e32:	bf00      	nop
   17e34:	2000ae24 	.word	0x2000ae24
   17e38:	0001eb11 	.word	0x0001eb11
   17e3c:	0001ead7 	.word	0x0001ead7
   17e40:	2000ae18 	.word	0x2000ae18
   17e44:	2000adec 	.word	0x2000adec

00017e48 <z_thread_single_abort>:
{
   17e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   17e4c:	7b03      	ldrb	r3, [r0, #12]
{
   17e4e:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   17e50:	07dd      	lsls	r5, r3, #31
   17e52:	d50a      	bpl.n	17e6a <z_thread_single_abort+0x22>
   17e54:	4976      	ldr	r1, [pc, #472]	; (18030 <z_thread_single_abort+0x1e8>)
   17e56:	4877      	ldr	r0, [pc, #476]	; (18034 <z_thread_single_abort+0x1ec>)
   17e58:	f240 220d 	movw	r2, #525	; 0x20d
   17e5c:	f001 fdc7 	bl	199ee <printk>
   17e60:	f240 210d 	movw	r1, #525	; 0x20d
   17e64:	4872      	ldr	r0, [pc, #456]	; (18030 <z_thread_single_abort+0x1e8>)
   17e66:	f002 f868 	bl	19f3a <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   17e6a:	4e73      	ldr	r6, [pc, #460]	; (18038 <z_thread_single_abort+0x1f0>)
   17e6c:	68b3      	ldr	r3, [r6, #8]
   17e6e:	42a3      	cmp	r3, r4
   17e70:	d10d      	bne.n	17e8e <z_thread_single_abort+0x46>
   17e72:	f3ef 8305 	mrs	r3, IPSR
   17e76:	b953      	cbnz	r3, 17e8e <z_thread_single_abort+0x46>
   17e78:	496d      	ldr	r1, [pc, #436]	; (18030 <z_thread_single_abort+0x1e8>)
   17e7a:	486e      	ldr	r0, [pc, #440]	; (18034 <z_thread_single_abort+0x1ec>)
   17e7c:	f240 220f 	movw	r2, #527	; 0x20f
   17e80:	f001 fdb5 	bl	199ee <printk>
   17e84:	f240 210f 	movw	r1, #527	; 0x20f
   17e88:	4869      	ldr	r0, [pc, #420]	; (18030 <z_thread_single_abort+0x1e8>)
   17e8a:	f002 f856 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   17e8e:	f04f 0320 	mov.w	r3, #32
   17e92:	f3ef 8511 	mrs	r5, BASEPRI
   17e96:	f383 8811 	msr	BASEPRI, r3
   17e9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17e9e:	4867      	ldr	r0, [pc, #412]	; (1803c <z_thread_single_abort+0x1f4>)
   17ea0:	f000 fdbc 	bl	18a1c <z_spin_lock_valid>
   17ea4:	b940      	cbnz	r0, 17eb8 <z_thread_single_abort+0x70>
   17ea6:	4966      	ldr	r1, [pc, #408]	; (18040 <z_thread_single_abort+0x1f8>)
   17ea8:	4862      	ldr	r0, [pc, #392]	; (18034 <z_thread_single_abort+0x1ec>)
   17eaa:	227c      	movs	r2, #124	; 0x7c
   17eac:	f001 fd9f 	bl	199ee <printk>
   17eb0:	217c      	movs	r1, #124	; 0x7c
   17eb2:	4863      	ldr	r0, [pc, #396]	; (18040 <z_thread_single_abort+0x1f8>)
   17eb4:	f002 f841 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   17eb8:	4860      	ldr	r0, [pc, #384]	; (1803c <z_thread_single_abort+0x1f4>)
   17eba:	f000 fdcb 	bl	18a54 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   17ebe:	7b63      	ldrb	r3, [r4, #13]
   17ec0:	f013 0f28 	tst.w	r3, #40	; 0x28
   17ec4:	d012      	beq.n	17eec <z_thread_single_abort+0xa4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17ec6:	485d      	ldr	r0, [pc, #372]	; (1803c <z_thread_single_abort+0x1f4>)
   17ec8:	f000 fdb6 	bl	18a38 <z_spin_unlock_valid>
   17ecc:	b940      	cbnz	r0, 17ee0 <z_thread_single_abort+0x98>
   17ece:	495c      	ldr	r1, [pc, #368]	; (18040 <z_thread_single_abort+0x1f8>)
   17ed0:	4858      	ldr	r0, [pc, #352]	; (18034 <z_thread_single_abort+0x1ec>)
   17ed2:	22a7      	movs	r2, #167	; 0xa7
   17ed4:	f001 fd8b 	bl	199ee <printk>
   17ed8:	21a7      	movs	r1, #167	; 0xa7
   17eda:	4859      	ldr	r0, [pc, #356]	; (18040 <z_thread_single_abort+0x1f8>)
   17edc:	f002 f82d 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   17ee0:	f385 8811 	msr	BASEPRI, r5
   17ee4:	f3bf 8f6f 	isb	sy
}
   17ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   17eec:	f043 0320 	orr.w	r3, r3, #32
   17ef0:	4852      	ldr	r0, [pc, #328]	; (1803c <z_thread_single_abort+0x1f4>)
   17ef2:	7363      	strb	r3, [r4, #13]
   17ef4:	f000 fda0 	bl	18a38 <z_spin_unlock_valid>
   17ef8:	b940      	cbnz	r0, 17f0c <z_thread_single_abort+0xc4>
   17efa:	4951      	ldr	r1, [pc, #324]	; (18040 <z_thread_single_abort+0x1f8>)
   17efc:	484d      	ldr	r0, [pc, #308]	; (18034 <z_thread_single_abort+0x1ec>)
   17efe:	22a7      	movs	r2, #167	; 0xa7
   17f00:	f001 fd75 	bl	199ee <printk>
   17f04:	21a7      	movs	r1, #167	; 0xa7
   17f06:	484e      	ldr	r0, [pc, #312]	; (18040 <z_thread_single_abort+0x1f8>)
   17f08:	f002 f817 	bl	19f3a <assert_post_action>
   17f0c:	f385 8811 	msr	BASEPRI, r5
   17f10:	f3bf 8f6f 	isb	sy
   17f14:	f104 0018 	add.w	r0, r4, #24
   17f18:	f000 ffc4 	bl	18ea4 <z_abort_timeout>
	__asm__ volatile(
   17f1c:	f04f 0320 	mov.w	r3, #32
   17f20:	f3ef 8711 	mrs	r7, BASEPRI
   17f24:	f383 8811 	msr	BASEPRI, r3
   17f28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   17f2c:	4843      	ldr	r0, [pc, #268]	; (1803c <z_thread_single_abort+0x1f4>)
   17f2e:	f000 fd75 	bl	18a1c <z_spin_lock_valid>
   17f32:	b940      	cbnz	r0, 17f46 <z_thread_single_abort+0xfe>
   17f34:	4942      	ldr	r1, [pc, #264]	; (18040 <z_thread_single_abort+0x1f8>)
   17f36:	483f      	ldr	r0, [pc, #252]	; (18034 <z_thread_single_abort+0x1ec>)
   17f38:	227c      	movs	r2, #124	; 0x7c
   17f3a:	f001 fd58 	bl	199ee <printk>
   17f3e:	217c      	movs	r1, #124	; 0x7c
   17f40:	483f      	ldr	r0, [pc, #252]	; (18040 <z_thread_single_abort+0x1f8>)
   17f42:	f001 fffa 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   17f46:	483d      	ldr	r0, [pc, #244]	; (1803c <z_thread_single_abort+0x1f4>)
   17f48:	f000 fd84 	bl	18a54 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   17f4c:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   17f4e:	06d8      	lsls	r0, r3, #27
   17f50:	d116      	bne.n	17f80 <z_thread_single_abort+0x138>
		if (z_is_thread_ready(thread)) {
   17f52:	69a2      	ldr	r2, [r4, #24]
   17f54:	b9a2      	cbnz	r2, 17f80 <z_thread_single_abort+0x138>
			if (z_is_thread_queued(thread)) {
   17f56:	0619      	lsls	r1, r3, #24
   17f58:	d507      	bpl.n	17f6a <z_thread_single_abort+0x122>
				_priq_run_remove(&_kernel.ready_q.runq,
   17f5a:	4621      	mov	r1, r4
   17f5c:	4839      	ldr	r0, [pc, #228]	; (18044 <z_thread_single_abort+0x1fc>)
   17f5e:	f7ff fc69 	bl	17834 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   17f62:	7b63      	ldrb	r3, [r4, #13]
   17f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   17f68:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   17f6a:	68b0      	ldr	r0, [r6, #8]
   17f6c:	1b02      	subs	r2, r0, r4
   17f6e:	4250      	negs	r0, r2
   17f70:	4150      	adcs	r0, r2
   17f72:	f7ff fcc5 	bl	17900 <update_cache>
			waiter->base.pended_on = NULL;
   17f76:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   17f7a:	f104 0930 	add.w	r9, r4, #48	; 0x30
   17f7e:	e023      	b.n	17fc8 <z_thread_single_abort+0x180>
			if (z_is_thread_pending(thread)) {
   17f80:	079b      	lsls	r3, r3, #30
   17f82:	d5f8      	bpl.n	17f76 <z_thread_single_abort+0x12e>
				_priq_wait_remove(&pended_on(thread)->waitq,
   17f84:	4620      	mov	r0, r4
   17f86:	f7ff fb4d 	bl	17624 <pended_on>
   17f8a:	4621      	mov	r1, r4
   17f8c:	f7ff fc52 	bl	17834 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   17f90:	7b63      	ldrb	r3, [r4, #13]
   17f92:	f023 0302 	bic.w	r3, r3, #2
   17f96:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   17f98:	2300      	movs	r3, #0
   17f9a:	60a3      	str	r3, [r4, #8]
   17f9c:	e7eb      	b.n	17f76 <z_thread_single_abort+0x12e>
   17f9e:	f105 0018 	add.w	r0, r5, #24
   17fa2:	f000 ff7f 	bl	18ea4 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   17fa6:	4628      	mov	r0, r5
   17fa8:	f7ff fb3c 	bl	17624 <pended_on>
   17fac:	4629      	mov	r1, r5
   17fae:	f7ff fc41 	bl	17834 <z_priq_dumb_remove>
   17fb2:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   17fb4:	4628      	mov	r0, r5
   17fb6:	f023 0302 	bic.w	r3, r3, #2
   17fba:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   17fbc:	f8c5 8008 	str.w	r8, [r5, #8]
   17fc0:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   17fc4:	f7ff fd32 	bl	17a2c <ready_thread>
	return list->head == list;
   17fc8:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   17fca:	454d      	cmp	r5, r9
   17fcc:	d001      	beq.n	17fd2 <z_thread_single_abort+0x18a>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   17fce:	2d00      	cmp	r5, #0
   17fd0:	d1e5      	bne.n	17f9e <z_thread_single_abort+0x156>
		if (z_is_idle_thread_object(_current)) {
   17fd2:	68b2      	ldr	r2, [r6, #8]
   17fd4:	4b1c      	ldr	r3, [pc, #112]	; (18048 <z_thread_single_abort+0x200>)
   17fd6:	429a      	cmp	r2, r3
   17fd8:	d102      	bne.n	17fe0 <z_thread_single_abort+0x198>
			update_cache(1);
   17fda:	2001      	movs	r0, #1
   17fdc:	f7ff fc90 	bl	17900 <update_cache>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17fe0:	2200      	movs	r2, #0
		thread->base.thread_state |= _THREAD_DEAD;
   17fe2:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   17fe4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   17fe6:	f043 0308 	orr.w	r3, r3, #8
   17fea:	7363      	strb	r3, [r4, #13]
   17fec:	f104 0338 	add.w	r3, r4, #56	; 0x38
   17ff0:	e8d3 1fef 	ldaex	r1, [r3]
   17ff4:	e8c3 2fe0 	stlex	r0, r2, [r3]
   17ff8:	2800      	cmp	r0, #0
   17ffa:	d1f9      	bne.n	17ff0 <z_thread_single_abort+0x1a8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   17ffc:	480f      	ldr	r0, [pc, #60]	; (1803c <z_thread_single_abort+0x1f4>)
   17ffe:	f000 fd1b 	bl	18a38 <z_spin_unlock_valid>
   18002:	b940      	cbnz	r0, 18016 <z_thread_single_abort+0x1ce>
   18004:	490e      	ldr	r1, [pc, #56]	; (18040 <z_thread_single_abort+0x1f8>)
   18006:	480b      	ldr	r0, [pc, #44]	; (18034 <z_thread_single_abort+0x1ec>)
   18008:	22a7      	movs	r2, #167	; 0xa7
   1800a:	f001 fcf0 	bl	199ee <printk>
   1800e:	21a7      	movs	r1, #167	; 0xa7
   18010:	480b      	ldr	r0, [pc, #44]	; (18040 <z_thread_single_abort+0x1f8>)
   18012:	f001 ff92 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   18016:	f387 8811 	msr	BASEPRI, r7
   1801a:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1801e:	2d00      	cmp	r5, #0
   18020:	f43f af62 	beq.w	17ee8 <z_thread_single_abort+0xa0>
		fn_abort(thread);
   18024:	4620      	mov	r0, r4
   18026:	462b      	mov	r3, r5
}
   18028:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   1802c:	4718      	bx	r3
   1802e:	bf00      	nop
   18030:	000216d6 	.word	0x000216d6
   18034:	0001ead7 	.word	0x0001ead7
   18038:	2000adec 	.word	0x2000adec
   1803c:	2000ae24 	.word	0x2000ae24
   18040:	0001eb11 	.word	0x0001eb11
   18044:	2000ae18 	.word	0x2000ae18
   18048:	2000a290 	.word	0x2000a290

0001804c <unready_thread>:
{
   1804c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   1804e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   18052:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   18054:	2b00      	cmp	r3, #0
   18056:	da07      	bge.n	18068 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   18058:	4601      	mov	r1, r0
   1805a:	4808      	ldr	r0, [pc, #32]	; (1807c <unready_thread+0x30>)
   1805c:	f7ff fbea 	bl	17834 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18060:	7b63      	ldrb	r3, [r4, #13]
   18062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18066:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   18068:	4b05      	ldr	r3, [pc, #20]	; (18080 <unready_thread+0x34>)
   1806a:	6898      	ldr	r0, [r3, #8]
   1806c:	1b03      	subs	r3, r0, r4
   1806e:	4258      	negs	r0, r3
   18070:	4158      	adcs	r0, r3
}
   18072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   18076:	f7ff bc43 	b.w	17900 <update_cache>
   1807a:	bf00      	nop
   1807c:	2000ae18 	.word	0x2000ae18
   18080:	2000adec 	.word	0x2000adec

00018084 <add_to_waitq_locked>:
{
   18084:	b538      	push	{r3, r4, r5, lr}
   18086:	4604      	mov	r4, r0
   18088:	460d      	mov	r5, r1
	unready_thread(thread);
   1808a:	f7ff ffdf 	bl	1804c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1808e:	7b63      	ldrb	r3, [r4, #13]
   18090:	f043 0302 	orr.w	r3, r3, #2
   18094:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   18096:	b1ed      	cbz	r5, 180d4 <add_to_waitq_locked+0x50>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18098:	4b15      	ldr	r3, [pc, #84]	; (180f0 <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   1809a:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1809c:	429c      	cmp	r4, r3
   1809e:	d10a      	bne.n	180b6 <add_to_waitq_locked+0x32>
   180a0:	4914      	ldr	r1, [pc, #80]	; (180f4 <add_to_waitq_locked+0x70>)
   180a2:	4815      	ldr	r0, [pc, #84]	; (180f8 <add_to_waitq_locked+0x74>)
   180a4:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   180a8:	f001 fca1 	bl	199ee <printk>
   180ac:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   180b0:	4810      	ldr	r0, [pc, #64]	; (180f4 <add_to_waitq_locked+0x70>)
   180b2:	f001 ff42 	bl	19f3a <assert_post_action>
	return list->head == list;
   180b6:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   180b8:	429d      	cmp	r5, r3
   180ba:	d012      	beq.n	180e2 <add_to_waitq_locked+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   180bc:	b18b      	cbz	r3, 180e2 <add_to_waitq_locked+0x5e>
	if (thread_1->base.prio < thread_2->base.prio) {
   180be:	f994 200e 	ldrsb.w	r2, [r4, #14]
   180c2:	f993 100e 	ldrsb.w	r1, [r3, #14]
   180c6:	4291      	cmp	r1, r2
   180c8:	dd05      	ble.n	180d6 <add_to_waitq_locked+0x52>
	node->prev = successor->prev;
   180ca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   180cc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   180d0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   180d2:	605c      	str	r4, [r3, #4]
}
   180d4:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   180d6:	6869      	ldr	r1, [r5, #4]
   180d8:	428b      	cmp	r3, r1
   180da:	d002      	beq.n	180e2 <add_to_waitq_locked+0x5e>
   180dc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   180de:	2b00      	cmp	r3, #0
   180e0:	d1ef      	bne.n	180c2 <add_to_waitq_locked+0x3e>
	node->prev = list->tail;
   180e2:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   180e4:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   180e6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   180e8:	686b      	ldr	r3, [r5, #4]
   180ea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   180ec:	606c      	str	r4, [r5, #4]
}
   180ee:	e7f1      	b.n	180d4 <add_to_waitq_locked+0x50>
   180f0:	2000a290 	.word	0x2000a290
   180f4:	000216d6 	.word	0x000216d6
   180f8:	0001ead7 	.word	0x0001ead7

000180fc <pend>:
{
   180fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18100:	4604      	mov	r4, r0
   18102:	4688      	mov	r8, r1
   18104:	4616      	mov	r6, r2
   18106:	461d      	mov	r5, r3
	__asm__ volatile(
   18108:	f04f 0320 	mov.w	r3, #32
   1810c:	f3ef 8711 	mrs	r7, BASEPRI
   18110:	f383 8811 	msr	BASEPRI, r3
   18114:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18118:	481a      	ldr	r0, [pc, #104]	; (18184 <pend+0x88>)
   1811a:	f000 fc7f 	bl	18a1c <z_spin_lock_valid>
   1811e:	b940      	cbnz	r0, 18132 <pend+0x36>
   18120:	4919      	ldr	r1, [pc, #100]	; (18188 <pend+0x8c>)
   18122:	481a      	ldr	r0, [pc, #104]	; (1818c <pend+0x90>)
   18124:	227c      	movs	r2, #124	; 0x7c
   18126:	f001 fc62 	bl	199ee <printk>
   1812a:	217c      	movs	r1, #124	; 0x7c
   1812c:	4816      	ldr	r0, [pc, #88]	; (18188 <pend+0x8c>)
   1812e:	f001 ff04 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   18132:	4814      	ldr	r0, [pc, #80]	; (18184 <pend+0x88>)
   18134:	f000 fc8e 	bl	18a54 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   18138:	4620      	mov	r0, r4
   1813a:	4641      	mov	r1, r8
   1813c:	f7ff ffa2 	bl	18084 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18140:	4810      	ldr	r0, [pc, #64]	; (18184 <pend+0x88>)
   18142:	f000 fc79 	bl	18a38 <z_spin_unlock_valid>
   18146:	b940      	cbnz	r0, 1815a <pend+0x5e>
   18148:	490f      	ldr	r1, [pc, #60]	; (18188 <pend+0x8c>)
   1814a:	4810      	ldr	r0, [pc, #64]	; (1818c <pend+0x90>)
   1814c:	22a7      	movs	r2, #167	; 0xa7
   1814e:	f001 fc4e 	bl	199ee <printk>
   18152:	21a7      	movs	r1, #167	; 0xa7
   18154:	480c      	ldr	r0, [pc, #48]	; (18188 <pend+0x8c>)
   18156:	f001 fef0 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   1815a:	f387 8811 	msr	BASEPRI, r7
   1815e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18162:	f1b5 3fff 	cmp.w	r5, #4294967295
   18166:	bf08      	it	eq
   18168:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1816c:	d008      	beq.n	18180 <pend+0x84>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1816e:	4632      	mov	r2, r6
   18170:	462b      	mov	r3, r5
   18172:	f104 0018 	add.w	r0, r4, #24
   18176:	4906      	ldr	r1, [pc, #24]	; (18190 <pend+0x94>)
}
   18178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1817c:	f000 bde2 	b.w	18d44 <z_add_timeout>
   18180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18184:	2000ae24 	.word	0x2000ae24
   18188:	0001eb11 	.word	0x0001eb11
   1818c:	0001ead7 	.word	0x0001ead7
   18190:	00017bb1 	.word	0x00017bb1

00018194 <z_pend_curr>:
{
   18194:	b538      	push	{r3, r4, r5, lr}
   18196:	4605      	mov	r5, r0
	pending_current = _current;
   18198:	4b0d      	ldr	r3, [pc, #52]	; (181d0 <z_pend_curr+0x3c>)
{
   1819a:	460c      	mov	r4, r1
	pending_current = _current;
   1819c:	6898      	ldr	r0, [r3, #8]
   1819e:	4b0d      	ldr	r3, [pc, #52]	; (181d4 <z_pend_curr+0x40>)
{
   181a0:	4611      	mov	r1, r2
	pending_current = _current;
   181a2:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   181a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   181a8:	f7ff ffa8 	bl	180fc <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   181ac:	4628      	mov	r0, r5
   181ae:	f000 fc43 	bl	18a38 <z_spin_unlock_valid>
   181b2:	b940      	cbnz	r0, 181c6 <z_pend_curr+0x32>
   181b4:	4908      	ldr	r1, [pc, #32]	; (181d8 <z_pend_curr+0x44>)
   181b6:	4809      	ldr	r0, [pc, #36]	; (181dc <z_pend_curr+0x48>)
   181b8:	22be      	movs	r2, #190	; 0xbe
   181ba:	f001 fc18 	bl	199ee <printk>
   181be:	21be      	movs	r1, #190	; 0xbe
   181c0:	4805      	ldr	r0, [pc, #20]	; (181d8 <z_pend_curr+0x44>)
   181c2:	f001 feba 	bl	19f3a <assert_post_action>
   181c6:	4620      	mov	r0, r4
}
   181c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   181cc:	f7f4 bd80 	b.w	ccd0 <arch_swap>
   181d0:	2000adec 	.word	0x2000adec
   181d4:	2000ae20 	.word	0x2000ae20
   181d8:	0001eb11 	.word	0x0001eb11
   181dc:	0001ead7 	.word	0x0001ead7

000181e0 <z_set_prio>:
{
   181e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   181e2:	4604      	mov	r4, r0
   181e4:	460d      	mov	r5, r1
	__asm__ volatile(
   181e6:	f04f 0320 	mov.w	r3, #32
   181ea:	f3ef 8611 	mrs	r6, BASEPRI
   181ee:	f383 8811 	msr	BASEPRI, r3
   181f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   181f6:	4831      	ldr	r0, [pc, #196]	; (182bc <z_set_prio+0xdc>)
   181f8:	f000 fc10 	bl	18a1c <z_spin_lock_valid>
   181fc:	b940      	cbnz	r0, 18210 <z_set_prio+0x30>
   181fe:	4930      	ldr	r1, [pc, #192]	; (182c0 <z_set_prio+0xe0>)
   18200:	4830      	ldr	r0, [pc, #192]	; (182c4 <z_set_prio+0xe4>)
   18202:	227c      	movs	r2, #124	; 0x7c
   18204:	f001 fbf3 	bl	199ee <printk>
   18208:	217c      	movs	r1, #124	; 0x7c
   1820a:	482d      	ldr	r0, [pc, #180]	; (182c0 <z_set_prio+0xe0>)
   1820c:	f001 fe95 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   18210:	482a      	ldr	r0, [pc, #168]	; (182bc <z_set_prio+0xdc>)
   18212:	f000 fc1f 	bl	18a54 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18216:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   18218:	b26d      	sxtb	r5, r5
   1821a:	06db      	lsls	r3, r3, #27
   1821c:	d14a      	bne.n	182b4 <z_set_prio+0xd4>
		if (need_sched) {
   1821e:	69a3      	ldr	r3, [r4, #24]
   18220:	2b00      	cmp	r3, #0
   18222:	d147      	bne.n	182b4 <z_set_prio+0xd4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   18224:	4621      	mov	r1, r4
   18226:	4828      	ldr	r0, [pc, #160]	; (182c8 <z_set_prio+0xe8>)
   18228:	f7ff fb04 	bl	17834 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1822c:	4b27      	ldr	r3, [pc, #156]	; (182cc <z_set_prio+0xec>)
				thread->base.prio = prio;
   1822e:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18230:	429c      	cmp	r4, r3
   18232:	d10a      	bne.n	1824a <z_set_prio+0x6a>
   18234:	4926      	ldr	r1, [pc, #152]	; (182d0 <z_set_prio+0xf0>)
   18236:	4823      	ldr	r0, [pc, #140]	; (182c4 <z_set_prio+0xe4>)
   18238:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1823c:	f001 fbd7 	bl	199ee <printk>
   18240:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18244:	4822      	ldr	r0, [pc, #136]	; (182d0 <z_set_prio+0xf0>)
   18246:	f001 fe78 	bl	19f3a <assert_post_action>
	return list->head == list;
   1824a:	4a22      	ldr	r2, [pc, #136]	; (182d4 <z_set_prio+0xf4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1824c:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	return (node == list->tail) ? NULL : node->next;
   18250:	e9d2 310b 	ldrd	r3, r1, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18254:	4283      	cmp	r3, r0
   18256:	d027      	beq.n	182a8 <z_set_prio+0xc8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18258:	b333      	cbz	r3, 182a8 <z_set_prio+0xc8>
	if (thread_1->base.prio < thread_2->base.prio) {
   1825a:	f994 500e 	ldrsb.w	r5, [r4, #14]
   1825e:	f993 700e 	ldrsb.w	r7, [r3, #14]
   18262:	42af      	cmp	r7, r5
   18264:	dd1b      	ble.n	1829e <z_set_prio+0xbe>
	node->prev = successor->prev;
   18266:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18268:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1826c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1826e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   18270:	2001      	movs	r0, #1
   18272:	f7ff fb45 	bl	17900 <update_cache>
   18276:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18278:	4810      	ldr	r0, [pc, #64]	; (182bc <z_set_prio+0xdc>)
   1827a:	f000 fbdd 	bl	18a38 <z_spin_unlock_valid>
   1827e:	b940      	cbnz	r0, 18292 <z_set_prio+0xb2>
   18280:	490f      	ldr	r1, [pc, #60]	; (182c0 <z_set_prio+0xe0>)
   18282:	4810      	ldr	r0, [pc, #64]	; (182c4 <z_set_prio+0xe4>)
   18284:	22a7      	movs	r2, #167	; 0xa7
   18286:	f001 fbb2 	bl	199ee <printk>
   1828a:	21a7      	movs	r1, #167	; 0xa7
   1828c:	480c      	ldr	r0, [pc, #48]	; (182c0 <z_set_prio+0xe0>)
   1828e:	f001 fe54 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   18292:	f386 8811 	msr	BASEPRI, r6
   18296:	f3bf 8f6f 	isb	sy
}
   1829a:	4620      	mov	r0, r4
   1829c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1829e:	4299      	cmp	r1, r3
   182a0:	d002      	beq.n	182a8 <z_set_prio+0xc8>
   182a2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   182a4:	2b00      	cmp	r3, #0
   182a6:	d1da      	bne.n	1825e <z_set_prio+0x7e>
	node->prev = list->tail;
   182a8:	e9c4 0100 	strd	r0, r1, [r4]
	list->tail->next = node;
   182ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
   182ae:	601c      	str	r4, [r3, #0]
	list->tail = node;
   182b0:	6314      	str	r4, [r2, #48]	; 0x30
}
   182b2:	e7dd      	b.n	18270 <z_set_prio+0x90>
			thread->base.prio = prio;
   182b4:	73a5      	strb	r5, [r4, #14]
   182b6:	2400      	movs	r4, #0
   182b8:	e7de      	b.n	18278 <z_set_prio+0x98>
   182ba:	bf00      	nop
   182bc:	2000ae24 	.word	0x2000ae24
   182c0:	0001eb11 	.word	0x0001eb11
   182c4:	0001ead7 	.word	0x0001ead7
   182c8:	2000ae18 	.word	0x2000ae18
   182cc:	2000a290 	.word	0x2000a290
   182d0:	000216d6 	.word	0x000216d6
   182d4:	2000adec 	.word	0x2000adec

000182d8 <z_unpend_first_thread>:
{
   182d8:	b538      	push	{r3, r4, r5, lr}
   182da:	4604      	mov	r4, r0
	__asm__ volatile(
   182dc:	f04f 0320 	mov.w	r3, #32
   182e0:	f3ef 8511 	mrs	r5, BASEPRI
   182e4:	f383 8811 	msr	BASEPRI, r3
   182e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   182ec:	482b      	ldr	r0, [pc, #172]	; (1839c <z_unpend_first_thread+0xc4>)
   182ee:	f000 fb95 	bl	18a1c <z_spin_lock_valid>
   182f2:	b940      	cbnz	r0, 18306 <z_unpend_first_thread+0x2e>
   182f4:	492a      	ldr	r1, [pc, #168]	; (183a0 <z_unpend_first_thread+0xc8>)
   182f6:	482b      	ldr	r0, [pc, #172]	; (183a4 <z_unpend_first_thread+0xcc>)
   182f8:	227c      	movs	r2, #124	; 0x7c
   182fa:	f001 fb78 	bl	199ee <printk>
   182fe:	217c      	movs	r1, #124	; 0x7c
   18300:	4827      	ldr	r0, [pc, #156]	; (183a0 <z_unpend_first_thread+0xc8>)
   18302:	f001 fe1a 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   18306:	4825      	ldr	r0, [pc, #148]	; (1839c <z_unpend_first_thread+0xc4>)
   18308:	f000 fba4 	bl	18a54 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   1830c:	4620      	mov	r0, r4
   1830e:	f004 ff2d 	bl	1d16c <z_priq_dumb_best>
   18312:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18314:	4821      	ldr	r0, [pc, #132]	; (1839c <z_unpend_first_thread+0xc4>)
   18316:	f000 fb8f 	bl	18a38 <z_spin_unlock_valid>
   1831a:	b940      	cbnz	r0, 1832e <z_unpend_first_thread+0x56>
   1831c:	4920      	ldr	r1, [pc, #128]	; (183a0 <z_unpend_first_thread+0xc8>)
   1831e:	4821      	ldr	r0, [pc, #132]	; (183a4 <z_unpend_first_thread+0xcc>)
   18320:	22a7      	movs	r2, #167	; 0xa7
   18322:	f001 fb64 	bl	199ee <printk>
   18326:	21a7      	movs	r1, #167	; 0xa7
   18328:	481d      	ldr	r0, [pc, #116]	; (183a0 <z_unpend_first_thread+0xc8>)
   1832a:	f001 fe06 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   1832e:	f385 8811 	msr	BASEPRI, r5
   18332:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   18336:	b37c      	cbz	r4, 18398 <z_unpend_first_thread+0xc0>
	__asm__ volatile(
   18338:	f04f 0320 	mov.w	r3, #32
   1833c:	f3ef 8511 	mrs	r5, BASEPRI
   18340:	f383 8811 	msr	BASEPRI, r3
   18344:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18348:	4814      	ldr	r0, [pc, #80]	; (1839c <z_unpend_first_thread+0xc4>)
   1834a:	f000 fb67 	bl	18a1c <z_spin_lock_valid>
   1834e:	b940      	cbnz	r0, 18362 <z_unpend_first_thread+0x8a>
   18350:	4913      	ldr	r1, [pc, #76]	; (183a0 <z_unpend_first_thread+0xc8>)
   18352:	4814      	ldr	r0, [pc, #80]	; (183a4 <z_unpend_first_thread+0xcc>)
   18354:	227c      	movs	r2, #124	; 0x7c
   18356:	f001 fb4a 	bl	199ee <printk>
   1835a:	217c      	movs	r1, #124	; 0x7c
   1835c:	4810      	ldr	r0, [pc, #64]	; (183a0 <z_unpend_first_thread+0xc8>)
   1835e:	f001 fdec 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   18362:	480e      	ldr	r0, [pc, #56]	; (1839c <z_unpend_first_thread+0xc4>)
   18364:	f000 fb76 	bl	18a54 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   18368:	4620      	mov	r0, r4
   1836a:	f004 fef1 	bl	1d150 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1836e:	480b      	ldr	r0, [pc, #44]	; (1839c <z_unpend_first_thread+0xc4>)
   18370:	f000 fb62 	bl	18a38 <z_spin_unlock_valid>
   18374:	b940      	cbnz	r0, 18388 <z_unpend_first_thread+0xb0>
   18376:	490a      	ldr	r1, [pc, #40]	; (183a0 <z_unpend_first_thread+0xc8>)
   18378:	480a      	ldr	r0, [pc, #40]	; (183a4 <z_unpend_first_thread+0xcc>)
   1837a:	22a7      	movs	r2, #167	; 0xa7
   1837c:	f001 fb37 	bl	199ee <printk>
   18380:	21a7      	movs	r1, #167	; 0xa7
   18382:	4807      	ldr	r0, [pc, #28]	; (183a0 <z_unpend_first_thread+0xc8>)
   18384:	f001 fdd9 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   18388:	f385 8811 	msr	BASEPRI, r5
   1838c:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   18390:	f104 0018 	add.w	r0, r4, #24
   18394:	f000 fd86 	bl	18ea4 <z_abort_timeout>
}
   18398:	4620      	mov	r0, r4
   1839a:	bd38      	pop	{r3, r4, r5, pc}
   1839c:	2000ae24 	.word	0x2000ae24
   183a0:	0001eb11 	.word	0x0001eb11
   183a4:	0001ead7 	.word	0x0001ead7

000183a8 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   183a8:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   183aa:	4b04      	ldr	r3, [pc, #16]	; (183bc <z_sched_init+0x14>)
   183ac:	4608      	mov	r0, r1
   183ae:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   183b2:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   183b6:	f7ff b961 	b.w	1767c <k_sched_time_slice_set>
   183ba:	bf00      	nop
   183bc:	2000adec 	.word	0x2000adec

000183c0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   183c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   183c2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   183c6:	b153      	cbz	r3, 183de <z_impl_k_yield+0x1e>
   183c8:	493d      	ldr	r1, [pc, #244]	; (184c0 <z_impl_k_yield+0x100>)
   183ca:	483e      	ldr	r0, [pc, #248]	; (184c4 <z_impl_k_yield+0x104>)
   183cc:	f240 42cf 	movw	r2, #1231	; 0x4cf
   183d0:	f001 fb0d 	bl	199ee <printk>
   183d4:	f240 41cf 	movw	r1, #1231	; 0x4cf
   183d8:	4839      	ldr	r0, [pc, #228]	; (184c0 <z_impl_k_yield+0x100>)
   183da:	f001 fdae 	bl	19f3a <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   183de:	4d3a      	ldr	r5, [pc, #232]	; (184c8 <z_impl_k_yield+0x108>)
   183e0:	4f3a      	ldr	r7, [pc, #232]	; (184cc <z_impl_k_yield+0x10c>)
   183e2:	68ab      	ldr	r3, [r5, #8]
   183e4:	42bb      	cmp	r3, r7
   183e6:	d054      	beq.n	18492 <z_impl_k_yield+0xd2>
	__asm__ volatile(
   183e8:	f04f 0320 	mov.w	r3, #32
   183ec:	f3ef 8611 	mrs	r6, BASEPRI
   183f0:	f383 8811 	msr	BASEPRI, r3
   183f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   183f8:	4835      	ldr	r0, [pc, #212]	; (184d0 <z_impl_k_yield+0x110>)
   183fa:	f000 fb0f 	bl	18a1c <z_spin_lock_valid>
   183fe:	b940      	cbnz	r0, 18412 <z_impl_k_yield+0x52>
   18400:	4934      	ldr	r1, [pc, #208]	; (184d4 <z_impl_k_yield+0x114>)
   18402:	4830      	ldr	r0, [pc, #192]	; (184c4 <z_impl_k_yield+0x104>)
   18404:	227c      	movs	r2, #124	; 0x7c
   18406:	f001 faf2 	bl	199ee <printk>
   1840a:	217c      	movs	r1, #124	; 0x7c
   1840c:	4831      	ldr	r0, [pc, #196]	; (184d4 <z_impl_k_yield+0x114>)
   1840e:	f001 fd94 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   18412:	482f      	ldr	r0, [pc, #188]	; (184d0 <z_impl_k_yield+0x110>)
   18414:	f000 fb1e 	bl	18a54 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   18418:	68a9      	ldr	r1, [r5, #8]
   1841a:	482f      	ldr	r0, [pc, #188]	; (184d8 <z_impl_k_yield+0x118>)
   1841c:	f7ff fa0a 	bl	17834 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   18420:	68ac      	ldr	r4, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   18422:	42bc      	cmp	r4, r7
   18424:	d10a      	bne.n	1843c <z_impl_k_yield+0x7c>
   18426:	4926      	ldr	r1, [pc, #152]	; (184c0 <z_impl_k_yield+0x100>)
   18428:	4826      	ldr	r0, [pc, #152]	; (184c4 <z_impl_k_yield+0x104>)
   1842a:	f44f 7271 	mov.w	r2, #964	; 0x3c4
   1842e:	f001 fade 	bl	199ee <printk>
   18432:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   18436:	4822      	ldr	r0, [pc, #136]	; (184c0 <z_impl_k_yield+0x100>)
   18438:	f001 fd7f 	bl	19f3a <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
   1843c:	e9d5 320b 	ldrd	r3, r2, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18440:	4925      	ldr	r1, [pc, #148]	; (184d8 <z_impl_k_yield+0x118>)
   18442:	428b      	cmp	r3, r1
   18444:	d036      	beq.n	184b4 <z_impl_k_yield+0xf4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18446:	2b00      	cmp	r3, #0
   18448:	d034      	beq.n	184b4 <z_impl_k_yield+0xf4>
	if (thread_1->base.prio < thread_2->base.prio) {
   1844a:	f994 000e 	ldrsb.w	r0, [r4, #14]
   1844e:	f993 700e 	ldrsb.w	r7, [r3, #14]
   18452:	4287      	cmp	r7, r0
   18454:	dd29      	ble.n	184aa <z_impl_k_yield+0xea>
	node->prev = successor->prev;
   18456:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18458:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1845c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1845e:	605c      	str	r4, [r3, #4]
			z_mark_thread_as_queued(_current);
   18460:	68aa      	ldr	r2, [r5, #8]
			update_cache(1);
   18462:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   18464:	7b53      	ldrb	r3, [r2, #13]
   18466:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1846a:	7353      	strb	r3, [r2, #13]
   1846c:	f7ff fa48 	bl	17900 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18470:	4817      	ldr	r0, [pc, #92]	; (184d0 <z_impl_k_yield+0x110>)
   18472:	f000 fae1 	bl	18a38 <z_spin_unlock_valid>
   18476:	b940      	cbnz	r0, 1848a <z_impl_k_yield+0xca>
   18478:	4916      	ldr	r1, [pc, #88]	; (184d4 <z_impl_k_yield+0x114>)
   1847a:	4812      	ldr	r0, [pc, #72]	; (184c4 <z_impl_k_yield+0x104>)
   1847c:	22a7      	movs	r2, #167	; 0xa7
   1847e:	f001 fab6 	bl	199ee <printk>
   18482:	21a7      	movs	r1, #167	; 0xa7
   18484:	4813      	ldr	r0, [pc, #76]	; (184d4 <z_impl_k_yield+0x114>)
   18486:	f001 fd58 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   1848a:	f386 8811 	msr	BASEPRI, r6
   1848e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   18492:	f04f 0320 	mov.w	r3, #32
   18496:	f3ef 8011 	mrs	r0, BASEPRI
   1849a:	f383 8811 	msr	BASEPRI, r3
   1849e:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   184a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   184a6:	f7f4 bc13 	b.w	ccd0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   184aa:	4293      	cmp	r3, r2
   184ac:	d002      	beq.n	184b4 <z_impl_k_yield+0xf4>
   184ae:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   184b0:	2b00      	cmp	r3, #0
   184b2:	d1cc      	bne.n	1844e <z_impl_k_yield+0x8e>
	node->prev = list->tail;
   184b4:	e9c4 1200 	strd	r1, r2, [r4]
	list->tail->next = node;
   184b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   184ba:	601c      	str	r4, [r3, #0]
	list->tail = node;
   184bc:	632c      	str	r4, [r5, #48]	; 0x30
}
   184be:	e7cf      	b.n	18460 <z_impl_k_yield+0xa0>
   184c0:	000216d6 	.word	0x000216d6
   184c4:	0001ead7 	.word	0x0001ead7
   184c8:	2000adec 	.word	0x2000adec
   184cc:	2000a290 	.word	0x2000a290
   184d0:	2000ae24 	.word	0x2000ae24
   184d4:	0001eb11 	.word	0x0001eb11
   184d8:	2000ae18 	.word	0x2000ae18

000184dc <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   184dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   184e0:	4605      	mov	r5, r0
   184e2:	460f      	mov	r7, r1
   184e4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   184e8:	b153      	cbz	r3, 18500 <z_tick_sleep+0x24>
   184ea:	4934      	ldr	r1, [pc, #208]	; (185bc <z_tick_sleep+0xe0>)
   184ec:	4834      	ldr	r0, [pc, #208]	; (185c0 <z_tick_sleep+0xe4>)
   184ee:	f240 42ed 	movw	r2, #1261	; 0x4ed
   184f2:	f001 fa7c 	bl	199ee <printk>
   184f6:	f240 41ed 	movw	r1, #1261	; 0x4ed
   184fa:	4830      	ldr	r0, [pc, #192]	; (185bc <z_tick_sleep+0xe0>)
   184fc:	f001 fd1d 	bl	19f3a <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   18500:	ea55 0307 	orrs.w	r3, r5, r7
   18504:	d104      	bne.n	18510 <z_tick_sleep+0x34>
	z_impl_k_yield();
   18506:	f7ff ff5b 	bl	183c0 <z_impl_k_yield>
		k_yield();
		return 0;
   1850a:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   1850c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   18510:	f004 feba 	bl	1d288 <z_tick_get_32>
   18514:	1944      	adds	r4, r0, r5
   18516:	f04f 0320 	mov.w	r3, #32
   1851a:	f3ef 8811 	mrs	r8, BASEPRI
   1851e:	f383 8811 	msr	BASEPRI, r3
   18522:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18526:	4827      	ldr	r0, [pc, #156]	; (185c4 <z_tick_sleep+0xe8>)
   18528:	f000 fa78 	bl	18a1c <z_spin_lock_valid>
   1852c:	b940      	cbnz	r0, 18540 <z_tick_sleep+0x64>
   1852e:	4926      	ldr	r1, [pc, #152]	; (185c8 <z_tick_sleep+0xec>)
   18530:	4823      	ldr	r0, [pc, #140]	; (185c0 <z_tick_sleep+0xe4>)
   18532:	227c      	movs	r2, #124	; 0x7c
   18534:	f001 fa5b 	bl	199ee <printk>
   18538:	217c      	movs	r1, #124	; 0x7c
   1853a:	4823      	ldr	r0, [pc, #140]	; (185c8 <z_tick_sleep+0xec>)
   1853c:	f001 fcfd 	bl	19f3a <assert_post_action>
	pending_current = _current;
   18540:	4e22      	ldr	r6, [pc, #136]	; (185cc <z_tick_sleep+0xf0>)
	z_spin_lock_set_owner(l);
   18542:	4820      	ldr	r0, [pc, #128]	; (185c4 <z_tick_sleep+0xe8>)
   18544:	f000 fa86 	bl	18a54 <z_spin_lock_set_owner>
   18548:	68b0      	ldr	r0, [r6, #8]
   1854a:	4b21      	ldr	r3, [pc, #132]	; (185d0 <z_tick_sleep+0xf4>)
   1854c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1854e:	f7ff fd7d 	bl	1804c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   18552:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   18554:	462a      	mov	r2, r5
   18556:	463b      	mov	r3, r7
   18558:	3018      	adds	r0, #24
   1855a:	491e      	ldr	r1, [pc, #120]	; (185d4 <z_tick_sleep+0xf8>)
   1855c:	f000 fbf2 	bl	18d44 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   18560:	68b2      	ldr	r2, [r6, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18562:	4818      	ldr	r0, [pc, #96]	; (185c4 <z_tick_sleep+0xe8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18564:	7b53      	ldrb	r3, [r2, #13]
   18566:	f043 0310 	orr.w	r3, r3, #16
   1856a:	7353      	strb	r3, [r2, #13]
   1856c:	f000 fa64 	bl	18a38 <z_spin_unlock_valid>
   18570:	b940      	cbnz	r0, 18584 <z_tick_sleep+0xa8>
   18572:	4915      	ldr	r1, [pc, #84]	; (185c8 <z_tick_sleep+0xec>)
   18574:	4812      	ldr	r0, [pc, #72]	; (185c0 <z_tick_sleep+0xe4>)
   18576:	22be      	movs	r2, #190	; 0xbe
   18578:	f001 fa39 	bl	199ee <printk>
   1857c:	21be      	movs	r1, #190	; 0xbe
   1857e:	4812      	ldr	r0, [pc, #72]	; (185c8 <z_tick_sleep+0xec>)
   18580:	f001 fcdb 	bl	19f3a <assert_post_action>
   18584:	4640      	mov	r0, r8
   18586:	f7f4 fba3 	bl	ccd0 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   1858a:	68b3      	ldr	r3, [r6, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1858c:	7b5b      	ldrb	r3, [r3, #13]
   1858e:	06db      	lsls	r3, r3, #27
   18590:	d50a      	bpl.n	185a8 <z_tick_sleep+0xcc>
   18592:	490a      	ldr	r1, [pc, #40]	; (185bc <z_tick_sleep+0xe0>)
   18594:	480a      	ldr	r0, [pc, #40]	; (185c0 <z_tick_sleep+0xe4>)
   18596:	f240 520b 	movw	r2, #1291	; 0x50b
   1859a:	f001 fa28 	bl	199ee <printk>
   1859e:	f240 510b 	movw	r1, #1291	; 0x50b
   185a2:	4806      	ldr	r0, [pc, #24]	; (185bc <z_tick_sleep+0xe0>)
   185a4:	f001 fcc9 	bl	19f3a <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   185a8:	f004 fe6e 	bl	1d288 <z_tick_get_32>
   185ac:	1a20      	subs	r0, r4, r0
   185ae:	eb63 0303 	sbc.w	r3, r3, r3
   185b2:	2b00      	cmp	r3, #0
   185b4:	bfb8      	it	lt
   185b6:	2000      	movlt	r0, #0
   185b8:	e7a8      	b.n	1850c <z_tick_sleep+0x30>
   185ba:	bf00      	nop
   185bc:	000216d6 	.word	0x000216d6
   185c0:	0001ead7 	.word	0x0001ead7
   185c4:	2000ae24 	.word	0x2000ae24
   185c8:	0001eb11 	.word	0x0001eb11
   185cc:	2000adec 	.word	0x2000adec
   185d0:	2000ae20 	.word	0x2000ae20
   185d4:	00017bb1 	.word	0x00017bb1

000185d8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   185d8:	b538      	push	{r3, r4, r5, lr}
   185da:	4605      	mov	r5, r0
   185dc:	460c      	mov	r4, r1
   185de:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   185e2:	b153      	cbz	r3, 185fa <z_impl_k_sleep+0x22>
   185e4:	4911      	ldr	r1, [pc, #68]	; (1862c <z_impl_k_sleep+0x54>)
   185e6:	4812      	ldr	r0, [pc, #72]	; (18630 <z_impl_k_sleep+0x58>)
   185e8:	f240 521a 	movw	r2, #1306	; 0x51a
   185ec:	f001 f9ff 	bl	199ee <printk>
   185f0:	f240 511a 	movw	r1, #1306	; 0x51a
   185f4:	480d      	ldr	r0, [pc, #52]	; (1862c <z_impl_k_sleep+0x54>)
   185f6:	f001 fca0 	bl	19f3a <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   185fa:	f1b4 3fff 	cmp.w	r4, #4294967295
   185fe:	bf08      	it	eq
   18600:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   18604:	d106      	bne.n	18614 <z_impl_k_sleep+0x3c>
		k_thread_suspend(_current);
   18606:	4b0b      	ldr	r3, [pc, #44]	; (18634 <z_impl_k_sleep+0x5c>)
   18608:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1860a:	f7ff fbc5 	bl	17d98 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1860e:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   18612:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   18614:	4628      	mov	r0, r5
   18616:	4621      	mov	r1, r4
   18618:	f7ff ff60 	bl	184dc <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1861c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18620:	fb80 0303 	smull	r0, r3, r0, r3
   18624:	0bc0      	lsrs	r0, r0, #15
   18626:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1862a:	e7f2      	b.n	18612 <z_impl_k_sleep+0x3a>
   1862c:	000216d6 	.word	0x000216d6
   18630:	0001ead7 	.word	0x0001ead7
   18634:	2000adec 	.word	0x2000adec

00018638 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   18638:	4b01      	ldr	r3, [pc, #4]	; (18640 <z_impl_k_current_get+0x8>)
   1863a:	6898      	ldr	r0, [r3, #8]
   1863c:	4770      	bx	lr
   1863e:	bf00      	nop
   18640:	2000adec 	.word	0x2000adec

00018644 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   18644:	b538      	push	{r3, r4, r5, lr}
   18646:	4604      	mov	r4, r0
   18648:	f04f 0320 	mov.w	r3, #32
   1864c:	f3ef 8511 	mrs	r5, BASEPRI
   18650:	f383 8811 	msr	BASEPRI, r3
   18654:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18658:	4815      	ldr	r0, [pc, #84]	; (186b0 <z_impl_k_sem_give+0x6c>)
   1865a:	f000 f9df 	bl	18a1c <z_spin_lock_valid>
   1865e:	b940      	cbnz	r0, 18672 <z_impl_k_sem_give+0x2e>
   18660:	4914      	ldr	r1, [pc, #80]	; (186b4 <z_impl_k_sem_give+0x70>)
   18662:	4815      	ldr	r0, [pc, #84]	; (186b8 <z_impl_k_sem_give+0x74>)
   18664:	227c      	movs	r2, #124	; 0x7c
   18666:	f001 f9c2 	bl	199ee <printk>
   1866a:	217c      	movs	r1, #124	; 0x7c
   1866c:	4811      	ldr	r0, [pc, #68]	; (186b4 <z_impl_k_sem_give+0x70>)
   1866e:	f001 fc64 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   18672:	480f      	ldr	r0, [pc, #60]	; (186b0 <z_impl_k_sem_give+0x6c>)
   18674:	f000 f9ee 	bl	18a54 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   18678:	4620      	mov	r0, r4
   1867a:	f7ff fe2d 	bl	182d8 <z_unpend_first_thread>

	if (thread != NULL) {
   1867e:	b150      	cbz	r0, 18696 <z_impl_k_sem_give+0x52>
   18680:	2200      	movs	r2, #0
   18682:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   18686:	f7ff fa1b 	bl	17ac0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1868a:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   1868c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   18690:	4807      	ldr	r0, [pc, #28]	; (186b0 <z_impl_k_sem_give+0x6c>)
   18692:	f7ff b841 	b.w	17718 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   18696:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1869a:	429a      	cmp	r2, r3
   1869c:	bf18      	it	ne
   1869e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   186a0:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   186a2:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   186a4:	f104 0010 	add.w	r0, r4, #16
   186a8:	f004 fe65 	bl	1d376 <z_handle_obj_poll_events>
}
   186ac:	e7ed      	b.n	1868a <z_impl_k_sem_give+0x46>
   186ae:	bf00      	nop
   186b0:	2000ae30 	.word	0x2000ae30
   186b4:	0001eb11 	.word	0x0001eb11
   186b8:	0001ead7 	.word	0x0001ead7

000186bc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   186bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   186be:	4604      	mov	r4, r0
   186c0:	4616      	mov	r6, r2
   186c2:	461d      	mov	r5, r3
   186c4:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   186c8:	b15b      	cbz	r3, 186e2 <z_impl_k_sem_take+0x26>
   186ca:	ea52 0305 	orrs.w	r3, r2, r5
   186ce:	d008      	beq.n	186e2 <z_impl_k_sem_take+0x26>
   186d0:	492b      	ldr	r1, [pc, #172]	; (18780 <z_impl_k_sem_take+0xc4>)
   186d2:	482c      	ldr	r0, [pc, #176]	; (18784 <z_impl_k_sem_take+0xc8>)
   186d4:	228c      	movs	r2, #140	; 0x8c
   186d6:	f001 f98a 	bl	199ee <printk>
   186da:	218c      	movs	r1, #140	; 0x8c
   186dc:	4828      	ldr	r0, [pc, #160]	; (18780 <z_impl_k_sem_take+0xc4>)
   186de:	f001 fc2c 	bl	19f3a <assert_post_action>
   186e2:	f04f 0320 	mov.w	r3, #32
   186e6:	f3ef 8711 	mrs	r7, BASEPRI
   186ea:	f383 8811 	msr	BASEPRI, r3
   186ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   186f2:	4825      	ldr	r0, [pc, #148]	; (18788 <z_impl_k_sem_take+0xcc>)
   186f4:	f000 f992 	bl	18a1c <z_spin_lock_valid>
   186f8:	b940      	cbnz	r0, 1870c <z_impl_k_sem_take+0x50>
   186fa:	4924      	ldr	r1, [pc, #144]	; (1878c <z_impl_k_sem_take+0xd0>)
   186fc:	4821      	ldr	r0, [pc, #132]	; (18784 <z_impl_k_sem_take+0xc8>)
   186fe:	227c      	movs	r2, #124	; 0x7c
   18700:	f001 f975 	bl	199ee <printk>
   18704:	217c      	movs	r1, #124	; 0x7c
   18706:	4821      	ldr	r0, [pc, #132]	; (1878c <z_impl_k_sem_take+0xd0>)
   18708:	f001 fc17 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   1870c:	481e      	ldr	r0, [pc, #120]	; (18788 <z_impl_k_sem_take+0xcc>)
   1870e:	f000 f9a1 	bl	18a54 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   18712:	68a3      	ldr	r3, [r4, #8]
   18714:	b1ab      	cbz	r3, 18742 <z_impl_k_sem_take+0x86>
		sem->count--;
   18716:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18718:	481b      	ldr	r0, [pc, #108]	; (18788 <z_impl_k_sem_take+0xcc>)
   1871a:	60a3      	str	r3, [r4, #8]
   1871c:	f000 f98c 	bl	18a38 <z_spin_unlock_valid>
   18720:	b940      	cbnz	r0, 18734 <z_impl_k_sem_take+0x78>
   18722:	491a      	ldr	r1, [pc, #104]	; (1878c <z_impl_k_sem_take+0xd0>)
   18724:	4817      	ldr	r0, [pc, #92]	; (18784 <z_impl_k_sem_take+0xc8>)
   18726:	22a7      	movs	r2, #167	; 0xa7
   18728:	f001 f961 	bl	199ee <printk>
   1872c:	21a7      	movs	r1, #167	; 0xa7
   1872e:	4817      	ldr	r0, [pc, #92]	; (1878c <z_impl_k_sem_take+0xd0>)
   18730:	f001 fc03 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   18734:	f387 8811 	msr	BASEPRI, r7
   18738:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1873c:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1873e:	b003      	add	sp, #12
   18740:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18742:	ea56 0305 	orrs.w	r3, r6, r5
   18746:	d113      	bne.n	18770 <z_impl_k_sem_take+0xb4>
   18748:	480f      	ldr	r0, [pc, #60]	; (18788 <z_impl_k_sem_take+0xcc>)
   1874a:	f000 f975 	bl	18a38 <z_spin_unlock_valid>
   1874e:	b940      	cbnz	r0, 18762 <z_impl_k_sem_take+0xa6>
   18750:	490e      	ldr	r1, [pc, #56]	; (1878c <z_impl_k_sem_take+0xd0>)
   18752:	480c      	ldr	r0, [pc, #48]	; (18784 <z_impl_k_sem_take+0xc8>)
   18754:	22a7      	movs	r2, #167	; 0xa7
   18756:	f001 f94a 	bl	199ee <printk>
   1875a:	21a7      	movs	r1, #167	; 0xa7
   1875c:	480b      	ldr	r0, [pc, #44]	; (1878c <z_impl_k_sem_take+0xd0>)
   1875e:	f001 fbec 	bl	19f3a <assert_post_action>
   18762:	f387 8811 	msr	BASEPRI, r7
   18766:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1876a:	f06f 000f 	mvn.w	r0, #15
   1876e:	e7e6      	b.n	1873e <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   18770:	4622      	mov	r2, r4
   18772:	4639      	mov	r1, r7
   18774:	e9cd 6500 	strd	r6, r5, [sp]
   18778:	4803      	ldr	r0, [pc, #12]	; (18788 <z_impl_k_sem_take+0xcc>)
   1877a:	f7ff fd0b 	bl	18194 <z_pend_curr>
	return ret;
   1877e:	e7de      	b.n	1873e <z_impl_k_sem_take+0x82>
   18780:	000216f8 	.word	0x000216f8
   18784:	0001ead7 	.word	0x0001ead7
   18788:	2000ae30 	.word	0x2000ae30
   1878c:	0001eb11 	.word	0x0001eb11

00018790 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   18790:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   18792:	4c08      	ldr	r4, [pc, #32]	; (187b4 <k_sys_work_q_init+0x24>)
   18794:	f04f 33ff 	mov.w	r3, #4294967295
   18798:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1879c:	4620      	mov	r0, r4
   1879e:	4906      	ldr	r1, [pc, #24]	; (187b8 <k_sys_work_q_init+0x28>)
   187a0:	f000 f98c 	bl	18abc <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   187a4:	4905      	ldr	r1, [pc, #20]	; (187bc <k_sys_work_q_init+0x2c>)
   187a6:	f104 0020 	add.w	r0, r4, #32
   187aa:	f004 fd0f 	bl	1d1cc <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   187ae:	2000      	movs	r0, #0
   187b0:	bd10      	pop	{r4, pc}
   187b2:	bf00      	nop
   187b4:	2000a3b0 	.word	0x2000a3b0
   187b8:	2000f468 	.word	0x2000f468
   187bc:	00021718 	.word	0x00021718

000187c0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   187c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   187c4:	4604      	mov	r4, r0
   187c6:	460f      	mov	r7, r1
   187c8:	4698      	mov	r8, r3
   187ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   187cc:	4b2c      	ldr	r3, [pc, #176]	; (18880 <z_setup_new_thread+0xc0>)
   187ce:	4616      	mov	r6, r2
   187d0:	f100 0238 	add.w	r2, r0, #56	; 0x38
   187d4:	e8d2 1fef 	ldaex	r1, [r2]
   187d8:	e8c2 3fe0 	stlex	r0, r3, [r2]
   187dc:	2800      	cmp	r0, #0
   187de:	d1f9      	bne.n	187d4 <z_setup_new_thread+0x14>
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   187e0:	4299      	cmp	r1, r3
   187e2:	d10a      	bne.n	187fa <z_setup_new_thread+0x3a>
   187e4:	4927      	ldr	r1, [pc, #156]	; (18884 <z_setup_new_thread+0xc4>)
   187e6:	4828      	ldr	r0, [pc, #160]	; (18888 <z_setup_new_thread+0xc8>)
   187e8:	f240 2223 	movw	r2, #547	; 0x223
   187ec:	f001 f8ff 	bl	199ee <printk>
   187f0:	f240 2123 	movw	r1, #547	; 0x223
   187f4:	4823      	ldr	r0, [pc, #140]	; (18884 <z_setup_new_thread+0xc4>)
   187f6:	f001 fba0 	bl	19f3a <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   187fa:	2d0f      	cmp	r5, #15
   187fc:	d12f      	bne.n	1885e <z_setup_new_thread+0x9e>
   187fe:	4b23      	ldr	r3, [pc, #140]	; (1888c <z_setup_new_thread+0xcc>)
   18800:	4598      	cmp	r8, r3
   18802:	d130      	bne.n	18866 <z_setup_new_thread+0xa6>
	sys_dlist_init(&w->waitq);
   18804:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   18808:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1880c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   1880e:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   18810:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   18812:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   18814:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   18816:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1881a:	1df0      	adds	r0, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1881c:	9302      	str	r3, [sp, #8]
   1881e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   18820:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18824:	9301      	str	r3, [sp, #4]
   18826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   18828:	183e      	adds	r6, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   1882a:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1882e:	9300      	str	r3, [sp, #0]
   18830:	4632      	mov	r2, r6
   18832:	4643      	mov	r3, r8
   18834:	4639      	mov	r1, r7
   18836:	4620      	mov	r0, r4
	node->prev = NULL;
   18838:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->sched_locked = 0U;
   1883c:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   1883e:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   18840:	f7f4 fae4 	bl	ce0c <arch_new_thread>
	if (!_current) {
   18844:	4b12      	ldr	r3, [pc, #72]	; (18890 <z_setup_new_thread+0xd0>)
	new_thread->fn_abort = NULL;
   18846:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   1884a:	689b      	ldr	r3, [r3, #8]
   1884c:	b10b      	cbz	r3, 18852 <z_setup_new_thread+0x92>
	new_thread->resource_pool = _current->resource_pool;
   1884e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   18852:	4630      	mov	r0, r6
   18854:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   18858:	b004      	add	sp, #16
   1885a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   1885e:	f105 0310 	add.w	r3, r5, #16
   18862:	2b1e      	cmp	r3, #30
   18864:	d9ce      	bls.n	18804 <z_setup_new_thread+0x44>
   18866:	f240 2226 	movw	r2, #550	; 0x226
   1886a:	4906      	ldr	r1, [pc, #24]	; (18884 <z_setup_new_thread+0xc4>)
   1886c:	4806      	ldr	r0, [pc, #24]	; (18888 <z_setup_new_thread+0xc8>)
   1886e:	f001 f8be 	bl	199ee <printk>
   18872:	f240 2126 	movw	r1, #550	; 0x226
   18876:	4803      	ldr	r0, [pc, #12]	; (18884 <z_setup_new_thread+0xc4>)
   18878:	f001 fb5f 	bl	19f3a <assert_post_action>
   1887c:	e7c2      	b.n	18804 <z_setup_new_thread+0x44>
   1887e:	bf00      	nop
   18880:	1337c0d3 	.word	0x1337c0d3
   18884:	00021721 	.word	0x00021721
   18888:	0001ead7 	.word	0x0001ead7
   1888c:	00016ba9 	.word	0x00016ba9
   18890:	2000adec 	.word	0x2000adec

00018894 <z_impl_k_thread_create>:
{
   18894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18898:	b087      	sub	sp, #28
   1889a:	4604      	mov	r4, r0
   1889c:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
   188a0:	460f      	mov	r7, r1
   188a2:	4690      	mov	r8, r2
   188a4:	4699      	mov	r9, r3
   188a6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   188aa:	b153      	cbz	r3, 188c2 <z_impl_k_thread_create+0x2e>
   188ac:	491a      	ldr	r1, [pc, #104]	; (18918 <z_impl_k_thread_create+0x84>)
   188ae:	481b      	ldr	r0, [pc, #108]	; (1891c <z_impl_k_thread_create+0x88>)
   188b0:	f240 228f 	movw	r2, #655	; 0x28f
   188b4:	f001 f89b 	bl	199ee <printk>
   188b8:	f240 218f 	movw	r1, #655	; 0x28f
   188bc:	4816      	ldr	r0, [pc, #88]	; (18918 <z_impl_k_thread_create+0x84>)
   188be:	f001 fb3c 	bl	19f3a <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   188c2:	2300      	movs	r3, #0
   188c4:	9305      	str	r3, [sp, #20]
   188c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   188c8:	4642      	mov	r2, r8
   188ca:	9304      	str	r3, [sp, #16]
   188cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   188ce:	4639      	mov	r1, r7
   188d0:	9303      	str	r3, [sp, #12]
   188d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   188d4:	4620      	mov	r0, r4
   188d6:	9302      	str	r3, [sp, #8]
   188d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   188da:	9301      	str	r3, [sp, #4]
   188dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   188de:	9300      	str	r3, [sp, #0]
   188e0:	464b      	mov	r3, r9
   188e2:	f7ff ff6d 	bl	187c0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   188e6:	f1b5 3fff 	cmp.w	r5, #4294967295
   188ea:	bf08      	it	eq
   188ec:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   188f0:	d005      	beq.n	188fe <z_impl_k_thread_create+0x6a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   188f2:	ea55 0306 	orrs.w	r3, r5, r6
   188f6:	d106      	bne.n	18906 <z_impl_k_thread_create+0x72>
	z_sched_start(thread);
   188f8:	4620      	mov	r0, r4
   188fa:	f7ff f917 	bl	17b2c <z_sched_start>
}
   188fe:	4620      	mov	r0, r4
   18900:	b007      	add	sp, #28
   18902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18906:	4632      	mov	r2, r6
   18908:	462b      	mov	r3, r5
   1890a:	4905      	ldr	r1, [pc, #20]	; (18920 <z_impl_k_thread_create+0x8c>)
   1890c:	f104 0018 	add.w	r0, r4, #24
   18910:	f000 fa18 	bl	18d44 <z_add_timeout>
   18914:	e7f3      	b.n	188fe <z_impl_k_thread_create+0x6a>
   18916:	bf00      	nop
   18918:	00021721 	.word	0x00021721
   1891c:	0001ead7 	.word	0x0001ead7
   18920:	00017bb1 	.word	0x00017bb1

00018924 <z_init_static_threads>:
{
   18924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18928:	4c37      	ldr	r4, [pc, #220]	; (18a08 <z_init_static_threads+0xe4>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1892a:	4d38      	ldr	r5, [pc, #224]	; (18a0c <z_init_static_threads+0xe8>)
   1892c:	4f38      	ldr	r7, [pc, #224]	; (18a10 <z_init_static_threads+0xec>)
{
   1892e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   18930:	42ac      	cmp	r4, r5
   18932:	4626      	mov	r6, r4
   18934:	d90a      	bls.n	1894c <z_init_static_threads+0x28>
   18936:	4639      	mov	r1, r7
   18938:	4836      	ldr	r0, [pc, #216]	; (18a14 <z_init_static_threads+0xf0>)
   1893a:	f240 22fd 	movw	r2, #765	; 0x2fd
   1893e:	f001 f856 	bl	199ee <printk>
   18942:	f240 21fd 	movw	r1, #765	; 0x2fd
   18946:	4638      	mov	r0, r7
   18948:	f001 faf7 	bl	19f3a <assert_post_action>
   1894c:	42ae      	cmp	r6, r5
   1894e:	f104 0430 	add.w	r4, r4, #48	; 0x30
   18952:	d31b      	bcc.n	1898c <z_init_static_threads+0x68>
	k_sched_lock();
   18954:	f7fe ff16 	bl	17784 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   18958:	4c2b      	ldr	r4, [pc, #172]	; (18a08 <z_init_static_threads+0xe4>)
   1895a:	4e2d      	ldr	r6, [pc, #180]	; (18a10 <z_init_static_threads+0xec>)
   1895c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 18a14 <z_init_static_threads+0xf0>
   18960:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 18a18 <z_init_static_threads+0xf4>
   18964:	42ac      	cmp	r4, r5
   18966:	d90a      	bls.n	1897e <z_init_static_threads+0x5a>
   18968:	4631      	mov	r1, r6
   1896a:	4640      	mov	r0, r8
   1896c:	f44f 7247 	mov.w	r2, #796	; 0x31c
   18970:	f001 f83d 	bl	199ee <printk>
   18974:	f44f 7147 	mov.w	r1, #796	; 0x31c
   18978:	4630      	mov	r0, r6
   1897a:	f001 fade 	bl	19f3a <assert_post_action>
   1897e:	42ac      	cmp	r4, r5
   18980:	d320      	bcc.n	189c4 <z_init_static_threads+0xa0>
}
   18982:	b007      	add	sp, #28
   18984:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   18988:	f7fe bff4 	b.w	17974 <k_sched_unlock>
		z_setup_new_thread(
   1898c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   18990:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   18994:	9305      	str	r3, [sp, #20]
   18996:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1899a:	9304      	str	r3, [sp, #16]
   1899c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   189a0:	9303      	str	r3, [sp, #12]
   189a2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   189a6:	9302      	str	r3, [sp, #8]
   189a8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   189ac:	9301      	str	r3, [sp, #4]
   189ae:	f854 3c20 	ldr.w	r3, [r4, #-32]
   189b2:	9300      	str	r3, [sp, #0]
   189b4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   189b8:	f7ff ff02 	bl	187c0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   189bc:	f854 3c30 	ldr.w	r3, [r4, #-48]
   189c0:	665e      	str	r6, [r3, #100]	; 0x64
	_FOREACH_STATIC_THREAD(thread_data) {
   189c2:	e7b5      	b.n	18930 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   189c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   189c6:	1c5a      	adds	r2, r3, #1
   189c8:	d00f      	beq.n	189ea <z_init_static_threads+0xc6>
   189ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   189ce:	f240 30e7 	movw	r0, #999	; 0x3e7
   189d2:	2100      	movs	r1, #0
					    K_MSEC(thread_data->init_delay));
   189d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   189d8:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   189dc:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   189e0:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   189e2:	d104      	bne.n	189ee <z_init_static_threads+0xca>
	z_sched_start(thread);
   189e4:	4638      	mov	r0, r7
   189e6:	f7ff f8a1 	bl	17b2c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   189ea:	3430      	adds	r4, #48	; 0x30
   189ec:	e7ba      	b.n	18964 <z_init_static_threads+0x40>
   189ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   189f2:	2300      	movs	r3, #0
   189f4:	f7f0 f89a 	bl	8b2c <__aeabi_uldivmod>
   189f8:	4602      	mov	r2, r0
   189fa:	460b      	mov	r3, r1
   189fc:	f107 0018 	add.w	r0, r7, #24
   18a00:	4649      	mov	r1, r9
   18a02:	f000 f99f 	bl	18d44 <z_add_timeout>
   18a06:	e7f0      	b.n	189ea <z_init_static_threads+0xc6>
   18a08:	200085ec 	.word	0x200085ec
   18a0c:	200085ec 	.word	0x200085ec
   18a10:	00021721 	.word	0x00021721
   18a14:	0001ead7 	.word	0x0001ead7
   18a18:	00017bb1 	.word	0x00017bb1

00018a1c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   18a1c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   18a1e:	b138      	cbz	r0, 18a30 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   18a20:	4b04      	ldr	r3, [pc, #16]	; (18a34 <z_spin_lock_valid+0x18>)
   18a22:	f000 0003 	and.w	r0, r0, #3
   18a26:	7e1b      	ldrb	r3, [r3, #24]
   18a28:	1ac0      	subs	r0, r0, r3
   18a2a:	bf18      	it	ne
   18a2c:	2001      	movne	r0, #1
   18a2e:	4770      	bx	lr
			return false;
		}
	}
	return true;
   18a30:	2001      	movs	r0, #1
}
   18a32:	4770      	bx	lr
   18a34:	2000adec 	.word	0x2000adec

00018a38 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   18a38:	4905      	ldr	r1, [pc, #20]	; (18a50 <z_spin_unlock_valid+0x18>)
{
   18a3a:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   18a3c:	688a      	ldr	r2, [r1, #8]
   18a3e:	7e08      	ldrb	r0, [r1, #24]
   18a40:	6819      	ldr	r1, [r3, #0]
   18a42:	4302      	orrs	r2, r0
   18a44:	2000      	movs	r0, #0
   18a46:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
   18a48:	bf04      	itt	eq
   18a4a:	6018      	streq	r0, [r3, #0]
	return true;
   18a4c:	2001      	moveq	r0, #1
}
   18a4e:	4770      	bx	lr
   18a50:	2000adec 	.word	0x2000adec

00018a54 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   18a54:	4a02      	ldr	r2, [pc, #8]	; (18a60 <z_spin_lock_set_owner+0xc>)
   18a56:	7e11      	ldrb	r1, [r2, #24]
   18a58:	6893      	ldr	r3, [r2, #8]
   18a5a:	430b      	orrs	r3, r1
   18a5c:	6003      	str	r3, [r0, #0]
}
   18a5e:	4770      	bx	lr
   18a60:	2000adec 	.word	0x2000adec

00018a64 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   18a64:	b508      	push	{r3, lr}
	__asm__ volatile(
   18a66:	f04f 0320 	mov.w	r3, #32
   18a6a:	f3ef 8511 	mrs	r5, BASEPRI
   18a6e:	f383 8811 	msr	BASEPRI, r3
   18a72:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   18a76:	4c0e      	ldr	r4, [pc, #56]	; (18ab0 <z_self_abort+0x4c>)
   18a78:	6923      	ldr	r3, [r4, #16]
   18a7a:	b143      	cbz	r3, 18a8e <z_self_abort+0x2a>
   18a7c:	490d      	ldr	r1, [pc, #52]	; (18ab4 <z_self_abort+0x50>)
   18a7e:	480e      	ldr	r0, [pc, #56]	; (18ab8 <z_self_abort+0x54>)
   18a80:	2228      	movs	r2, #40	; 0x28
   18a82:	f000 ffb4 	bl	199ee <printk>
   18a86:	2128      	movs	r1, #40	; 0x28
   18a88:	480a      	ldr	r0, [pc, #40]	; (18ab4 <z_self_abort+0x50>)
   18a8a:	f001 fa56 	bl	19f3a <assert_post_action>
	cpu->pending_abort = _current;
   18a8e:	68a0      	ldr	r0, [r4, #8]
   18a90:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   18a92:	f7ff f981 	bl	17d98 <z_impl_k_thread_suspend>
   18a96:	4628      	mov	r0, r5
   18a98:	f7f4 f91a 	bl	ccd0 <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   18a9c:	4905      	ldr	r1, [pc, #20]	; (18ab4 <z_self_abort+0x50>)
   18a9e:	4806      	ldr	r0, [pc, #24]	; (18ab8 <z_self_abort+0x54>)
   18aa0:	2230      	movs	r2, #48	; 0x30
   18aa2:	f000 ffa4 	bl	199ee <printk>
   18aa6:	2130      	movs	r1, #48	; 0x30
   18aa8:	4802      	ldr	r0, [pc, #8]	; (18ab4 <z_self_abort+0x50>)
   18aaa:	f001 fa46 	bl	19f3a <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   18aae:	bf00      	nop
   18ab0:	2000adec 	.word	0x2000adec
   18ab4:	00021744 	.word	0x00021744
   18ab8:	0001ead7 	.word	0x0001ead7

00018abc <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   18abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ac0:	4604      	mov	r4, r0
   18ac2:	b088      	sub	sp, #32
   18ac4:	460d      	mov	r5, r1
   18ac6:	4616      	mov	r6, r2
   18ac8:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   18aca:	f004 fb00 	bl	1d0ce <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   18ace:	f104 0820 	add.w	r8, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   18ad2:	2200      	movs	r2, #0
   18ad4:	2300      	movs	r3, #0
   18ad6:	e9cd 7203 	strd	r7, r2, [sp, #12]
   18ada:	e9cd 2306 	strd	r2, r3, [sp, #24]
   18ade:	e9cd 2201 	strd	r2, r2, [sp, #4]
   18ae2:	4629      	mov	r1, r5
   18ae4:	4632      	mov	r2, r6
   18ae6:	4640      	mov	r0, r8
   18ae8:	4b05      	ldr	r3, [pc, #20]	; (18b00 <k_work_q_start+0x44>)
   18aea:	9400      	str	r4, [sp, #0]
   18aec:	f7ff fed2 	bl	18894 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   18af0:	4640      	mov	r0, r8
   18af2:	4904      	ldr	r1, [pc, #16]	; (18b04 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   18af4:	b008      	add	sp, #32
   18af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   18afa:	f004 bb67 	b.w	1d1cc <z_impl_k_thread_name_set>
   18afe:	bf00      	nop
   18b00:	0000a409 	.word	0x0000a409
   18b04:	0002176d 	.word	0x0002176d

00018b08 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   18b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18b0c:	4606      	mov	r6, r0
   18b0e:	460d      	mov	r5, r1
   18b10:	4690      	mov	r8, r2
   18b12:	461f      	mov	r7, r3
   18b14:	f04f 0320 	mov.w	r3, #32
   18b18:	f3ef 8911 	mrs	r9, BASEPRI
   18b1c:	f383 8811 	msr	BASEPRI, r3
   18b20:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18b24:	482c      	ldr	r0, [pc, #176]	; (18bd8 <k_delayed_work_submit_to_queue+0xd0>)
   18b26:	f7ff ff79 	bl	18a1c <z_spin_lock_valid>
   18b2a:	b940      	cbnz	r0, 18b3e <k_delayed_work_submit_to_queue+0x36>
   18b2c:	492b      	ldr	r1, [pc, #172]	; (18bdc <k_delayed_work_submit_to_queue+0xd4>)
   18b2e:	482c      	ldr	r0, [pc, #176]	; (18be0 <k_delayed_work_submit_to_queue+0xd8>)
   18b30:	227c      	movs	r2, #124	; 0x7c
   18b32:	f000 ff5c 	bl	199ee <printk>
   18b36:	217c      	movs	r1, #124	; 0x7c
   18b38:	4828      	ldr	r0, [pc, #160]	; (18bdc <k_delayed_work_submit_to_queue+0xd4>)
   18b3a:	f001 f9fe 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   18b3e:	4826      	ldr	r0, [pc, #152]	; (18bd8 <k_delayed_work_submit_to_queue+0xd0>)
   18b40:	f7ff ff88 	bl	18a54 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   18b44:	6aab      	ldr	r3, [r5, #40]	; 0x28
   18b46:	b1e3      	cbz	r3, 18b82 <k_delayed_work_submit_to_queue+0x7a>
   18b48:	42b3      	cmp	r3, r6
   18b4a:	d142      	bne.n	18bd2 <k_delayed_work_submit_to_queue+0xca>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   18b4c:	4628      	mov	r0, r5
   18b4e:	f004 fb5b 	bl	1d208 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   18b52:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   18b56:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   18b58:	d015      	beq.n	18b86 <k_delayed_work_submit_to_queue+0x7e>
			err = 0;
		} else if (err < 0) {
   18b5a:	2800      	cmp	r0, #0
   18b5c:	da14      	bge.n	18b88 <k_delayed_work_submit_to_queue+0x80>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18b5e:	481e      	ldr	r0, [pc, #120]	; (18bd8 <k_delayed_work_submit_to_queue+0xd0>)
   18b60:	f7ff ff6a 	bl	18a38 <z_spin_unlock_valid>
   18b64:	b940      	cbnz	r0, 18b78 <k_delayed_work_submit_to_queue+0x70>
   18b66:	491d      	ldr	r1, [pc, #116]	; (18bdc <k_delayed_work_submit_to_queue+0xd4>)
   18b68:	481d      	ldr	r0, [pc, #116]	; (18be0 <k_delayed_work_submit_to_queue+0xd8>)
   18b6a:	22a7      	movs	r2, #167	; 0xa7
   18b6c:	f000 ff3f 	bl	199ee <printk>
   18b70:	21a7      	movs	r1, #167	; 0xa7
   18b72:	481a      	ldr	r0, [pc, #104]	; (18bdc <k_delayed_work_submit_to_queue+0xd4>)
   18b74:	f001 f9e1 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   18b78:	f389 8811 	msr	BASEPRI, r9
   18b7c:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   18b80:	e01c      	b.n	18bbc <k_delayed_work_submit_to_queue+0xb4>
	if (work->work_q == work_q) {
   18b82:	2e00      	cmp	r6, #0
   18b84:	d0e2      	beq.n	18b4c <k_delayed_work_submit_to_queue+0x44>
	int err = 0;
   18b86:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18b88:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   18b8c:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   18b8e:	d118      	bne.n	18bc2 <k_delayed_work_submit_to_queue+0xba>
   18b90:	4811      	ldr	r0, [pc, #68]	; (18bd8 <k_delayed_work_submit_to_queue+0xd0>)
   18b92:	f7ff ff51 	bl	18a38 <z_spin_unlock_valid>
   18b96:	b940      	cbnz	r0, 18baa <k_delayed_work_submit_to_queue+0xa2>
   18b98:	4910      	ldr	r1, [pc, #64]	; (18bdc <k_delayed_work_submit_to_queue+0xd4>)
   18b9a:	4811      	ldr	r0, [pc, #68]	; (18be0 <k_delayed_work_submit_to_queue+0xd8>)
   18b9c:	22a7      	movs	r2, #167	; 0xa7
   18b9e:	f000 ff26 	bl	199ee <printk>
   18ba2:	21a7      	movs	r1, #167	; 0xa7
   18ba4:	480d      	ldr	r0, [pc, #52]	; (18bdc <k_delayed_work_submit_to_queue+0xd4>)
   18ba6:	f001 f9c8 	bl	19f3a <assert_post_action>
   18baa:	f389 8811 	msr	BASEPRI, r9
   18bae:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   18bb2:	4629      	mov	r1, r5
   18bb4:	4630      	mov	r0, r6
   18bb6:	f004 fb0e 	bl	1d1d6 <k_work_submit_to_queue>
		return 0;
   18bba:	2400      	movs	r4, #0
}
   18bbc:	4620      	mov	r0, r4
   18bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   18bc2:	4642      	mov	r2, r8
   18bc4:	463b      	mov	r3, r7
   18bc6:	4907      	ldr	r1, [pc, #28]	; (18be4 <k_delayed_work_submit_to_queue+0xdc>)
   18bc8:	f105 0010 	add.w	r0, r5, #16
   18bcc:	f000 f8ba 	bl	18d44 <z_add_timeout>
   18bd0:	e7c5      	b.n	18b5e <k_delayed_work_submit_to_queue+0x56>
		err = -EADDRINUSE;
   18bd2:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   18bd6:	e7c2      	b.n	18b5e <k_delayed_work_submit_to_queue+0x56>
   18bd8:	2000ae34 	.word	0x2000ae34
   18bdc:	0001eb11 	.word	0x0001eb11
   18be0:	0001ead7 	.word	0x0001ead7
   18be4:	0001d1ff 	.word	0x0001d1ff

00018be8 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   18be8:	b538      	push	{r3, r4, r5, lr}
   18bea:	4604      	mov	r4, r0
	__asm__ volatile(
   18bec:	f04f 0320 	mov.w	r3, #32
   18bf0:	f3ef 8511 	mrs	r5, BASEPRI
   18bf4:	f383 8811 	msr	BASEPRI, r3
   18bf8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18bfc:	4815      	ldr	r0, [pc, #84]	; (18c54 <k_delayed_work_cancel+0x6c>)
   18bfe:	f7ff ff0d 	bl	18a1c <z_spin_lock_valid>
   18c02:	b940      	cbnz	r0, 18c16 <k_delayed_work_cancel+0x2e>
   18c04:	4914      	ldr	r1, [pc, #80]	; (18c58 <k_delayed_work_cancel+0x70>)
   18c06:	4815      	ldr	r0, [pc, #84]	; (18c5c <k_delayed_work_cancel+0x74>)
   18c08:	227c      	movs	r2, #124	; 0x7c
   18c0a:	f000 fef0 	bl	199ee <printk>
   18c0e:	217c      	movs	r1, #124	; 0x7c
   18c10:	4811      	ldr	r0, [pc, #68]	; (18c58 <k_delayed_work_cancel+0x70>)
   18c12:	f001 f992 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   18c16:	480f      	ldr	r0, [pc, #60]	; (18c54 <k_delayed_work_cancel+0x6c>)
   18c18:	f7ff ff1c 	bl	18a54 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   18c1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   18c1e:	b1b3      	cbz	r3, 18c4e <k_delayed_work_cancel+0x66>
		ret = work_cancel(work);
   18c20:	4620      	mov	r0, r4
   18c22:	f004 faf1 	bl	1d208 <work_cancel>
   18c26:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18c28:	480a      	ldr	r0, [pc, #40]	; (18c54 <k_delayed_work_cancel+0x6c>)
   18c2a:	f7ff ff05 	bl	18a38 <z_spin_unlock_valid>
   18c2e:	b940      	cbnz	r0, 18c42 <k_delayed_work_cancel+0x5a>
   18c30:	4909      	ldr	r1, [pc, #36]	; (18c58 <k_delayed_work_cancel+0x70>)
   18c32:	480a      	ldr	r0, [pc, #40]	; (18c5c <k_delayed_work_cancel+0x74>)
   18c34:	22a7      	movs	r2, #167	; 0xa7
   18c36:	f000 feda 	bl	199ee <printk>
   18c3a:	21a7      	movs	r1, #167	; 0xa7
   18c3c:	4806      	ldr	r0, [pc, #24]	; (18c58 <k_delayed_work_cancel+0x70>)
   18c3e:	f001 f97c 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   18c42:	f385 8811 	msr	BASEPRI, r5
   18c46:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   18c4a:	4620      	mov	r0, r4
   18c4c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   18c4e:	f06f 0415 	mvn.w	r4, #21
   18c52:	e7e9      	b.n	18c28 <k_delayed_work_cancel+0x40>
   18c54:	2000ae34 	.word	0x2000ae34
   18c58:	0001eb11 	.word	0x0001eb11
   18c5c:	0001ead7 	.word	0x0001ead7

00018c60 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   18c60:	4a02      	ldr	r2, [pc, #8]	; (18c6c <boot_banner+0xc>)
   18c62:	4903      	ldr	r1, [pc, #12]	; (18c70 <boot_banner+0x10>)
   18c64:	4803      	ldr	r0, [pc, #12]	; (18c74 <boot_banner+0x14>)
   18c66:	f000 bec2 	b.w	199ee <printk>
   18c6a:	bf00      	nop
   18c6c:	000215b0 	.word	0x000215b0
   18c70:	00021777 	.word	0x00021777
   18c74:	00021784 	.word	0x00021784

00018c78 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   18c78:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   18c7a:	4806      	ldr	r0, [pc, #24]	; (18c94 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   18c7c:	4a06      	ldr	r2, [pc, #24]	; (18c98 <z_data_copy+0x20>)
   18c7e:	4907      	ldr	r1, [pc, #28]	; (18c9c <z_data_copy+0x24>)
   18c80:	1a12      	subs	r2, r2, r0
   18c82:	f002 f8f4 	bl	1ae6e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   18c86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   18c8a:	4a05      	ldr	r2, [pc, #20]	; (18ca0 <z_data_copy+0x28>)
   18c8c:	4905      	ldr	r1, [pc, #20]	; (18ca4 <z_data_copy+0x2c>)
   18c8e:	4806      	ldr	r0, [pc, #24]	; (18ca8 <z_data_copy+0x30>)
   18c90:	f002 b8ed 	b.w	1ae6e <memcpy>
   18c94:	20008000 	.word	0x20008000
   18c98:	200087e4 	.word	0x200087e4
   18c9c:	00021818 	.word	0x00021818
   18ca0:	00000000 	.word	0x00000000
   18ca4:	00021818 	.word	0x00021818
   18ca8:	20008000 	.word	0x20008000

00018cac <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   18cac:	4b03      	ldr	r3, [pc, #12]	; (18cbc <elapsed+0x10>)
   18cae:	681b      	ldr	r3, [r3, #0]
   18cb0:	b90b      	cbnz	r3, 18cb6 <elapsed+0xa>
   18cb2:	f7f2 bff3 	b.w	bc9c <z_clock_elapsed>
}
   18cb6:	2000      	movs	r0, #0
   18cb8:	4770      	bx	lr
   18cba:	bf00      	nop
   18cbc:	2000ae38 	.word	0x2000ae38

00018cc0 <next_timeout>:
	return list->head == list;
   18cc0:	4b11      	ldr	r3, [pc, #68]	; (18d08 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   18cc2:	b510      	push	{r4, lr}
   18cc4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18cc6:	429c      	cmp	r4, r3
   18cc8:	bf08      	it	eq
   18cca:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   18ccc:	f7ff ffee 	bl	18cac <elapsed>
   18cd0:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   18cd2:	b16c      	cbz	r4, 18cf0 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   18cd4:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   18cd8:	1ac0      	subs	r0, r0, r3
   18cda:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   18cde:	2801      	cmp	r0, #1
   18ce0:	f173 0200 	sbcs.w	r2, r3, #0
   18ce4:	db0d      	blt.n	18d02 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   18ce6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   18cea:	f173 0300 	sbcs.w	r3, r3, #0
   18cee:	db01      	blt.n	18cf4 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   18cf0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   18cf4:	4b05      	ldr	r3, [pc, #20]	; (18d0c <next_timeout+0x4c>)
   18cf6:	695b      	ldr	r3, [r3, #20]
   18cf8:	b113      	cbz	r3, 18d00 <next_timeout+0x40>
   18cfa:	4298      	cmp	r0, r3
   18cfc:	bfa8      	it	ge
   18cfe:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   18d00:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   18d02:	2000      	movs	r0, #0
   18d04:	e7f6      	b.n	18cf4 <next_timeout+0x34>
   18d06:	bf00      	nop
   18d08:	20008558 	.word	0x20008558
   18d0c:	2000adec 	.word	0x2000adec

00018d10 <remove_timeout>:
{
   18d10:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   18d12:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   18d14:	b168      	cbz	r0, 18d32 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   18d16:	4a0a      	ldr	r2, [pc, #40]	; (18d40 <remove_timeout+0x30>)
   18d18:	6852      	ldr	r2, [r2, #4]
   18d1a:	4290      	cmp	r0, r2
   18d1c:	d009      	beq.n	18d32 <remove_timeout+0x22>
	if (next(t) != NULL) {
   18d1e:	b143      	cbz	r3, 18d32 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   18d20:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   18d24:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   18d28:	1912      	adds	r2, r2, r4
   18d2a:	eb41 0105 	adc.w	r1, r1, r5
   18d2e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   18d32:	6842      	ldr	r2, [r0, #4]
   18d34:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   18d36:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18d38:	2300      	movs	r3, #0
	node->prev = NULL;
   18d3a:	e9c0 3300 	strd	r3, r3, [r0]
}
   18d3e:	bd30      	pop	{r4, r5, pc}
   18d40:	20008558 	.word	0x20008558

00018d44 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18d44:	f1b3 3fff 	cmp.w	r3, #4294967295
   18d48:	bf08      	it	eq
   18d4a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   18d4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18d52:	4604      	mov	r4, r0
   18d54:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   18d56:	f000 808c 	beq.w	18e72 <z_add_timeout+0x12e>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   18d5a:	f06f 0601 	mvn.w	r6, #1
   18d5e:	f04f 39ff 	mov.w	r9, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   18d62:	1c55      	adds	r5, r2, #1
   18d64:	f143 0700 	adc.w	r7, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   18d68:	1b73      	subs	r3, r6, r5
   18d6a:	eb69 0307 	sbc.w	r3, r9, r7
   18d6e:	2b00      	cmp	r3, #0
   18d70:	db0d      	blt.n	18d8e <z_add_timeout+0x4a>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   18d72:	f7ff ff9b 	bl	18cac <elapsed>
   18d76:	4b44      	ldr	r3, [pc, #272]	; (18e88 <z_add_timeout+0x144>)
   18d78:	e9d3 2300 	ldrd	r2, r3, [r3]
   18d7c:	1ab6      	subs	r6, r6, r2
   18d7e:	eb69 0303 	sbc.w	r3, r9, r3
   18d82:	1b75      	subs	r5, r6, r5
   18d84:	eb63 0707 	sbc.w	r7, r3, r7
   18d88:	1a2d      	subs	r5, r5, r0
   18d8a:	eb67 77e0 	sbc.w	r7, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   18d8e:	6823      	ldr	r3, [r4, #0]
   18d90:	b143      	cbz	r3, 18da4 <z_add_timeout+0x60>
   18d92:	493e      	ldr	r1, [pc, #248]	; (18e8c <z_add_timeout+0x148>)
   18d94:	483e      	ldr	r0, [pc, #248]	; (18e90 <z_add_timeout+0x14c>)
   18d96:	2268      	movs	r2, #104	; 0x68
   18d98:	f000 fe29 	bl	199ee <printk>
   18d9c:	2168      	movs	r1, #104	; 0x68
   18d9e:	483b      	ldr	r0, [pc, #236]	; (18e8c <z_add_timeout+0x148>)
   18da0:	f001 f8cb 	bl	19f3a <assert_post_action>
	to->fn = fn;
	ticks = MAX(1, ticks);
   18da4:	2d01      	cmp	r5, #1
   18da6:	f177 0300 	sbcs.w	r3, r7, #0
   18daa:	bfbc      	itt	lt
   18dac:	2501      	movlt	r5, #1
   18dae:	2700      	movlt	r7, #0
	to->fn = fn;
   18db0:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   18db4:	f04f 0320 	mov.w	r3, #32
   18db8:	f3ef 8611 	mrs	r6, BASEPRI
   18dbc:	f383 8811 	msr	BASEPRI, r3
   18dc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18dc4:	4833      	ldr	r0, [pc, #204]	; (18e94 <z_add_timeout+0x150>)
   18dc6:	f7ff fe29 	bl	18a1c <z_spin_lock_valid>
   18dca:	b940      	cbnz	r0, 18dde <z_add_timeout+0x9a>
   18dcc:	4932      	ldr	r1, [pc, #200]	; (18e98 <z_add_timeout+0x154>)
   18dce:	4830      	ldr	r0, [pc, #192]	; (18e90 <z_add_timeout+0x14c>)
   18dd0:	227c      	movs	r2, #124	; 0x7c
   18dd2:	f000 fe0c 	bl	199ee <printk>
   18dd6:	217c      	movs	r1, #124	; 0x7c
   18dd8:	482f      	ldr	r0, [pc, #188]	; (18e98 <z_add_timeout+0x154>)
   18dda:	f001 f8ae 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   18dde:	482d      	ldr	r0, [pc, #180]	; (18e94 <z_add_timeout+0x150>)
   18de0:	f7ff fe38 	bl	18a54 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   18de4:	f7ff ff62 	bl	18cac <elapsed>
	return list->head == list;
   18de8:	4a2c      	ldr	r2, [pc, #176]	; (18e9c <z_add_timeout+0x158>)
   18dea:	1945      	adds	r5, r0, r5
   18dec:	6813      	ldr	r3, [r2, #0]
   18dee:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18df2:	4293      	cmp	r3, r2
   18df4:	e9c4 5704 	strd	r5, r7, [r4, #16]
   18df8:	d002      	beq.n	18e00 <z_add_timeout+0xbc>
	return (node == list->tail) ? NULL : node->next;
   18dfa:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   18dfe:	b933      	cbnz	r3, 18e0e <z_add_timeout+0xca>
	node->prev = list->tail;
   18e00:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   18e02:	6022      	str	r2, [r4, #0]
	node->prev = list->tail;
   18e04:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   18e06:	6853      	ldr	r3, [r2, #4]
   18e08:	601c      	str	r4, [r3, #0]
	list->tail = node;
   18e0a:	6054      	str	r4, [r2, #4]
}
   18e0c:	e011      	b.n	18e32 <z_add_timeout+0xee>
			if (t->dticks > to->dticks) {
   18e0e:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
   18e12:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   18e16:	4281      	cmp	r1, r0
   18e18:	eb75 0e07 	sbcs.w	lr, r5, r7
   18e1c:	da2b      	bge.n	18e76 <z_add_timeout+0x132>
				t->dticks -= to->dticks;
   18e1e:	1a41      	subs	r1, r0, r1
   18e20:	eb67 0505 	sbc.w	r5, r7, r5
   18e24:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   18e28:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   18e2a:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   18e2e:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   18e30:	605c      	str	r4, [r3, #4]
	return list->head == list;
   18e32:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18e34:	4293      	cmp	r3, r2
   18e36:	d00b      	beq.n	18e50 <z_add_timeout+0x10c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   18e38:	429c      	cmp	r4, r3
   18e3a:	d109      	bne.n	18e50 <z_add_timeout+0x10c>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   18e3c:	f7ff ff40 	bl	18cc0 <next_timeout>

			if (next_time == 0 ||
   18e40:	b118      	cbz	r0, 18e4a <z_add_timeout+0x106>
			    _current_cpu->slice_ticks != next_time) {
   18e42:	4b17      	ldr	r3, [pc, #92]	; (18ea0 <z_add_timeout+0x15c>)
			if (next_time == 0 ||
   18e44:	695b      	ldr	r3, [r3, #20]
   18e46:	4283      	cmp	r3, r0
   18e48:	d002      	beq.n	18e50 <z_add_timeout+0x10c>
				z_clock_set_timeout(next_time, false);
   18e4a:	2100      	movs	r1, #0
   18e4c:	f7f2 fef4 	bl	bc38 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18e50:	4810      	ldr	r0, [pc, #64]	; (18e94 <z_add_timeout+0x150>)
   18e52:	f7ff fdf1 	bl	18a38 <z_spin_unlock_valid>
   18e56:	b940      	cbnz	r0, 18e6a <z_add_timeout+0x126>
   18e58:	490f      	ldr	r1, [pc, #60]	; (18e98 <z_add_timeout+0x154>)
   18e5a:	480d      	ldr	r0, [pc, #52]	; (18e90 <z_add_timeout+0x14c>)
   18e5c:	22a7      	movs	r2, #167	; 0xa7
   18e5e:	f000 fdc6 	bl	199ee <printk>
   18e62:	21a7      	movs	r1, #167	; 0xa7
   18e64:	480c      	ldr	r0, [pc, #48]	; (18e98 <z_add_timeout+0x154>)
   18e66:	f001 f868 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   18e6a:	f386 8811 	msr	BASEPRI, r6
   18e6e:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   18e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   18e76:	1a09      	subs	r1, r1, r0
   18e78:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   18e7c:	4563      	cmp	r3, ip
   18e7e:	e9c4 1504 	strd	r1, r5, [r4, #16]
   18e82:	d0bd      	beq.n	18e00 <z_add_timeout+0xbc>
   18e84:	681b      	ldr	r3, [r3, #0]
   18e86:	e7ba      	b.n	18dfe <z_add_timeout+0xba>
   18e88:	2000a460 	.word	0x2000a460
   18e8c:	000217ab 	.word	0x000217ab
   18e90:	0001ead7 	.word	0x0001ead7
   18e94:	2000ae3c 	.word	0x2000ae3c
   18e98:	0001eb11 	.word	0x0001eb11
   18e9c:	20008558 	.word	0x20008558
   18ea0:	2000adec 	.word	0x2000adec

00018ea4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   18ea4:	b538      	push	{r3, r4, r5, lr}
   18ea6:	4604      	mov	r4, r0
	__asm__ volatile(
   18ea8:	f04f 0320 	mov.w	r3, #32
   18eac:	f3ef 8511 	mrs	r5, BASEPRI
   18eb0:	f383 8811 	msr	BASEPRI, r3
   18eb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18eb8:	4815      	ldr	r0, [pc, #84]	; (18f10 <z_abort_timeout+0x6c>)
   18eba:	f7ff fdaf 	bl	18a1c <z_spin_lock_valid>
   18ebe:	b940      	cbnz	r0, 18ed2 <z_abort_timeout+0x2e>
   18ec0:	4914      	ldr	r1, [pc, #80]	; (18f14 <z_abort_timeout+0x70>)
   18ec2:	4815      	ldr	r0, [pc, #84]	; (18f18 <z_abort_timeout+0x74>)
   18ec4:	227c      	movs	r2, #124	; 0x7c
   18ec6:	f000 fd92 	bl	199ee <printk>
   18eca:	217c      	movs	r1, #124	; 0x7c
   18ecc:	4811      	ldr	r0, [pc, #68]	; (18f14 <z_abort_timeout+0x70>)
   18ece:	f001 f834 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   18ed2:	480f      	ldr	r0, [pc, #60]	; (18f10 <z_abort_timeout+0x6c>)
   18ed4:	f7ff fdbe 	bl	18a54 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   18ed8:	6823      	ldr	r3, [r4, #0]
   18eda:	b1b3      	cbz	r3, 18f0a <z_abort_timeout+0x66>
			remove_timeout(to);
   18edc:	4620      	mov	r0, r4
   18ede:	f7ff ff17 	bl	18d10 <remove_timeout>
			ret = 0;
   18ee2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ee4:	480a      	ldr	r0, [pc, #40]	; (18f10 <z_abort_timeout+0x6c>)
   18ee6:	f7ff fda7 	bl	18a38 <z_spin_unlock_valid>
   18eea:	b940      	cbnz	r0, 18efe <z_abort_timeout+0x5a>
   18eec:	4909      	ldr	r1, [pc, #36]	; (18f14 <z_abort_timeout+0x70>)
   18eee:	480a      	ldr	r0, [pc, #40]	; (18f18 <z_abort_timeout+0x74>)
   18ef0:	22a7      	movs	r2, #167	; 0xa7
   18ef2:	f000 fd7c 	bl	199ee <printk>
   18ef6:	21a7      	movs	r1, #167	; 0xa7
   18ef8:	4806      	ldr	r0, [pc, #24]	; (18f14 <z_abort_timeout+0x70>)
   18efa:	f001 f81e 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   18efe:	f385 8811 	msr	BASEPRI, r5
   18f02:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   18f06:	4620      	mov	r0, r4
   18f08:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   18f0a:	f06f 0415 	mvn.w	r4, #21
   18f0e:	e7e9      	b.n	18ee4 <z_abort_timeout+0x40>
   18f10:	2000ae3c 	.word	0x2000ae3c
   18f14:	0001eb11 	.word	0x0001eb11
   18f18:	0001ead7 	.word	0x0001ead7

00018f1c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   18f1c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   18f1e:	f04f 0320 	mov.w	r3, #32
   18f22:	f3ef 8511 	mrs	r5, BASEPRI
   18f26:	f383 8811 	msr	BASEPRI, r3
   18f2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f2e:	4813      	ldr	r0, [pc, #76]	; (18f7c <z_get_next_timeout_expiry+0x60>)
   18f30:	f7ff fd74 	bl	18a1c <z_spin_lock_valid>
   18f34:	b940      	cbnz	r0, 18f48 <z_get_next_timeout_expiry+0x2c>
   18f36:	4912      	ldr	r1, [pc, #72]	; (18f80 <z_get_next_timeout_expiry+0x64>)
   18f38:	4812      	ldr	r0, [pc, #72]	; (18f84 <z_get_next_timeout_expiry+0x68>)
   18f3a:	227c      	movs	r2, #124	; 0x7c
   18f3c:	f000 fd57 	bl	199ee <printk>
   18f40:	217c      	movs	r1, #124	; 0x7c
   18f42:	480f      	ldr	r0, [pc, #60]	; (18f80 <z_get_next_timeout_expiry+0x64>)
   18f44:	f000 fff9 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   18f48:	480c      	ldr	r0, [pc, #48]	; (18f7c <z_get_next_timeout_expiry+0x60>)
   18f4a:	f7ff fd83 	bl	18a54 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   18f4e:	f7ff feb7 	bl	18cc0 <next_timeout>
   18f52:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18f54:	4809      	ldr	r0, [pc, #36]	; (18f7c <z_get_next_timeout_expiry+0x60>)
   18f56:	f7ff fd6f 	bl	18a38 <z_spin_unlock_valid>
   18f5a:	b940      	cbnz	r0, 18f6e <z_get_next_timeout_expiry+0x52>
   18f5c:	4908      	ldr	r1, [pc, #32]	; (18f80 <z_get_next_timeout_expiry+0x64>)
   18f5e:	4809      	ldr	r0, [pc, #36]	; (18f84 <z_get_next_timeout_expiry+0x68>)
   18f60:	22a7      	movs	r2, #167	; 0xa7
   18f62:	f000 fd44 	bl	199ee <printk>
   18f66:	21a7      	movs	r1, #167	; 0xa7
   18f68:	4805      	ldr	r0, [pc, #20]	; (18f80 <z_get_next_timeout_expiry+0x64>)
   18f6a:	f000 ffe6 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   18f6e:	f385 8811 	msr	BASEPRI, r5
   18f72:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   18f76:	4620      	mov	r0, r4
   18f78:	bd38      	pop	{r3, r4, r5, pc}
   18f7a:	bf00      	nop
   18f7c:	2000ae3c 	.word	0x2000ae3c
   18f80:	0001eb11 	.word	0x0001eb11
   18f84:	0001ead7 	.word	0x0001ead7

00018f88 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   18f88:	b570      	push	{r4, r5, r6, lr}
   18f8a:	4604      	mov	r4, r0
   18f8c:	460d      	mov	r5, r1
	__asm__ volatile(
   18f8e:	f04f 0320 	mov.w	r3, #32
   18f92:	f3ef 8611 	mrs	r6, BASEPRI
   18f96:	f383 8811 	msr	BASEPRI, r3
   18f9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18f9e:	4816      	ldr	r0, [pc, #88]	; (18ff8 <z_set_timeout_expiry+0x70>)
   18fa0:	f7ff fd3c 	bl	18a1c <z_spin_lock_valid>
   18fa4:	b940      	cbnz	r0, 18fb8 <z_set_timeout_expiry+0x30>
   18fa6:	4915      	ldr	r1, [pc, #84]	; (18ffc <z_set_timeout_expiry+0x74>)
   18fa8:	4815      	ldr	r0, [pc, #84]	; (19000 <z_set_timeout_expiry+0x78>)
   18faa:	227c      	movs	r2, #124	; 0x7c
   18fac:	f000 fd1f 	bl	199ee <printk>
   18fb0:	217c      	movs	r1, #124	; 0x7c
   18fb2:	4812      	ldr	r0, [pc, #72]	; (18ffc <z_set_timeout_expiry+0x74>)
   18fb4:	f000 ffc1 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   18fb8:	480f      	ldr	r0, [pc, #60]	; (18ff8 <z_set_timeout_expiry+0x70>)
   18fba:	f7ff fd4b 	bl	18a54 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   18fbe:	f7ff fe7f 	bl	18cc0 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   18fc2:	2801      	cmp	r0, #1
   18fc4:	dd05      	ble.n	18fd2 <z_set_timeout_expiry+0x4a>
   18fc6:	42a0      	cmp	r0, r4
   18fc8:	dd03      	ble.n	18fd2 <z_set_timeout_expiry+0x4a>
			z_clock_set_timeout(ticks, is_idle);
   18fca:	4629      	mov	r1, r5
   18fcc:	4620      	mov	r0, r4
   18fce:	f7f2 fe33 	bl	bc38 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18fd2:	4809      	ldr	r0, [pc, #36]	; (18ff8 <z_set_timeout_expiry+0x70>)
   18fd4:	f7ff fd30 	bl	18a38 <z_spin_unlock_valid>
   18fd8:	b940      	cbnz	r0, 18fec <z_set_timeout_expiry+0x64>
   18fda:	4908      	ldr	r1, [pc, #32]	; (18ffc <z_set_timeout_expiry+0x74>)
   18fdc:	4808      	ldr	r0, [pc, #32]	; (19000 <z_set_timeout_expiry+0x78>)
   18fde:	22a7      	movs	r2, #167	; 0xa7
   18fe0:	f000 fd05 	bl	199ee <printk>
   18fe4:	21a7      	movs	r1, #167	; 0xa7
   18fe6:	4805      	ldr	r0, [pc, #20]	; (18ffc <z_set_timeout_expiry+0x74>)
   18fe8:	f000 ffa7 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   18fec:	f386 8811 	msr	BASEPRI, r6
   18ff0:	f3bf 8f6f 	isb	sy
		}
	}
}
   18ff4:	bd70      	pop	{r4, r5, r6, pc}
   18ff6:	bf00      	nop
   18ff8:	2000ae3c 	.word	0x2000ae3c
   18ffc:	0001eb11 	.word	0x0001eb11
   19000:	0001ead7 	.word	0x0001ead7

00019004 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   19004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19008:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1900a:	f7fe fe61 	bl	17cd0 <z_time_slice>
	__asm__ volatile(
   1900e:	f04f 0320 	mov.w	r3, #32
   19012:	f3ef 8511 	mrs	r5, BASEPRI
   19016:	f383 8811 	msr	BASEPRI, r3
   1901a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1901e:	4842      	ldr	r0, [pc, #264]	; (19128 <z_clock_announce+0x124>)
   19020:	f7ff fcfc 	bl	18a1c <z_spin_lock_valid>
   19024:	b940      	cbnz	r0, 19038 <z_clock_announce+0x34>
   19026:	4941      	ldr	r1, [pc, #260]	; (1912c <z_clock_announce+0x128>)
   19028:	4841      	ldr	r0, [pc, #260]	; (19130 <z_clock_announce+0x12c>)
   1902a:	227c      	movs	r2, #124	; 0x7c
   1902c:	f000 fcdf 	bl	199ee <printk>
   19030:	217c      	movs	r1, #124	; 0x7c
   19032:	483e      	ldr	r0, [pc, #248]	; (1912c <z_clock_announce+0x128>)
   19034:	f000 ff81 	bl	19f3a <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   19038:	4f3e      	ldr	r7, [pc, #248]	; (19134 <z_clock_announce+0x130>)
	z_spin_lock_set_owner(l);
   1903a:	483b      	ldr	r0, [pc, #236]	; (19128 <z_clock_announce+0x124>)
	return list->head == list;
   1903c:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 19138 <z_clock_announce+0x134>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   19040:	4e3e      	ldr	r6, [pc, #248]	; (1913c <z_clock_announce+0x138>)
   19042:	f7ff fd07 	bl	18a54 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   19046:	603c      	str	r4, [r7, #0]
   19048:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1904c:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1904e:	4544      	cmp	r4, r8
   19050:	ea4f 70e2 	mov.w	r0, r2, asr #31
		curr_tick += dt;
   19054:	e9d6 1e00 	ldrd	r1, lr, [r6]
   19058:	d00b      	beq.n	19072 <z_clock_announce+0x6e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1905a:	b154      	cbz	r4, 19072 <z_clock_announce+0x6e>
   1905c:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
   19060:	429a      	cmp	r2, r3
   19062:	eb70 090c 	sbcs.w	r9, r0, ip
   19066:	da23      	bge.n	190b0 <z_clock_announce+0xac>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   19068:	1a9b      	subs	r3, r3, r2
   1906a:	eb6c 0c00 	sbc.w	ip, ip, r0
   1906e:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   19072:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   19074:	1852      	adds	r2, r2, r1
   19076:	eb4e 0000 	adc.w	r0, lr, r0
   1907a:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
   1907e:	603c      	str	r4, [r7, #0]

	z_clock_set_timeout(next_timeout(), false);
   19080:	f7ff fe1e 	bl	18cc0 <next_timeout>
   19084:	4621      	mov	r1, r4
   19086:	f7f2 fdd7 	bl	bc38 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1908a:	4827      	ldr	r0, [pc, #156]	; (19128 <z_clock_announce+0x124>)
   1908c:	f7ff fcd4 	bl	18a38 <z_spin_unlock_valid>
   19090:	b940      	cbnz	r0, 190a4 <z_clock_announce+0xa0>
   19092:	4926      	ldr	r1, [pc, #152]	; (1912c <z_clock_announce+0x128>)
   19094:	4826      	ldr	r0, [pc, #152]	; (19130 <z_clock_announce+0x12c>)
   19096:	22a7      	movs	r2, #167	; 0xa7
   19098:	f000 fca9 	bl	199ee <printk>
   1909c:	21a7      	movs	r1, #167	; 0xa7
   1909e:	4823      	ldr	r0, [pc, #140]	; (1912c <z_clock_announce+0x128>)
   190a0:	f000 ff4b 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   190a4:	f385 8811 	msr	BASEPRI, r5
   190a8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   190ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   190b0:	1859      	adds	r1, r3, r1
   190b2:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
   190b6:	1ad3      	subs	r3, r2, r3
   190b8:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
   190ba:	2200      	movs	r2, #0
   190bc:	2300      	movs	r3, #0
		curr_tick += dt;
   190be:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
   190c2:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   190c6:	4620      	mov	r0, r4
   190c8:	f7ff fe22 	bl	18d10 <remove_timeout>
   190cc:	4816      	ldr	r0, [pc, #88]	; (19128 <z_clock_announce+0x124>)
   190ce:	f7ff fcb3 	bl	18a38 <z_spin_unlock_valid>
   190d2:	b940      	cbnz	r0, 190e6 <z_clock_announce+0xe2>
   190d4:	4915      	ldr	r1, [pc, #84]	; (1912c <z_clock_announce+0x128>)
   190d6:	4816      	ldr	r0, [pc, #88]	; (19130 <z_clock_announce+0x12c>)
   190d8:	22a7      	movs	r2, #167	; 0xa7
   190da:	f000 fc88 	bl	199ee <printk>
   190de:	21a7      	movs	r1, #167	; 0xa7
   190e0:	4812      	ldr	r0, [pc, #72]	; (1912c <z_clock_announce+0x128>)
   190e2:	f000 ff2a 	bl	19f3a <assert_post_action>
   190e6:	f385 8811 	msr	BASEPRI, r5
   190ea:	f3bf 8f6f 	isb	sy
		t->fn(t);
   190ee:	4620      	mov	r0, r4
   190f0:	68a3      	ldr	r3, [r4, #8]
   190f2:	4798      	blx	r3
	__asm__ volatile(
   190f4:	f04f 0320 	mov.w	r3, #32
   190f8:	f3ef 8511 	mrs	r5, BASEPRI
   190fc:	f383 8811 	msr	BASEPRI, r3
   19100:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19104:	4808      	ldr	r0, [pc, #32]	; (19128 <z_clock_announce+0x124>)
   19106:	f7ff fc89 	bl	18a1c <z_spin_lock_valid>
   1910a:	b940      	cbnz	r0, 1911e <z_clock_announce+0x11a>
   1910c:	4907      	ldr	r1, [pc, #28]	; (1912c <z_clock_announce+0x128>)
   1910e:	4808      	ldr	r0, [pc, #32]	; (19130 <z_clock_announce+0x12c>)
   19110:	227c      	movs	r2, #124	; 0x7c
   19112:	f000 fc6c 	bl	199ee <printk>
   19116:	217c      	movs	r1, #124	; 0x7c
   19118:	4804      	ldr	r0, [pc, #16]	; (1912c <z_clock_announce+0x128>)
   1911a:	f000 ff0e 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   1911e:	4802      	ldr	r0, [pc, #8]	; (19128 <z_clock_announce+0x124>)
   19120:	f7ff fc98 	bl	18a54 <z_spin_lock_set_owner>
	return k;
   19124:	e790      	b.n	19048 <z_clock_announce+0x44>
   19126:	bf00      	nop
   19128:	2000ae3c 	.word	0x2000ae3c
   1912c:	0001eb11 	.word	0x0001eb11
   19130:	0001ead7 	.word	0x0001ead7
   19134:	2000ae38 	.word	0x2000ae38
   19138:	20008558 	.word	0x20008558
   1913c:	2000a460 	.word	0x2000a460

00019140 <z_tick_get>:

int64_t z_tick_get(void)
{
   19140:	b570      	push	{r4, r5, r6, lr}
   19142:	f04f 0320 	mov.w	r3, #32
   19146:	f3ef 8611 	mrs	r6, BASEPRI
   1914a:	f383 8811 	msr	BASEPRI, r3
   1914e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19152:	4816      	ldr	r0, [pc, #88]	; (191ac <z_tick_get+0x6c>)
   19154:	f7ff fc62 	bl	18a1c <z_spin_lock_valid>
   19158:	b940      	cbnz	r0, 1916c <z_tick_get+0x2c>
   1915a:	4915      	ldr	r1, [pc, #84]	; (191b0 <z_tick_get+0x70>)
   1915c:	4815      	ldr	r0, [pc, #84]	; (191b4 <z_tick_get+0x74>)
   1915e:	227c      	movs	r2, #124	; 0x7c
   19160:	f000 fc45 	bl	199ee <printk>
   19164:	217c      	movs	r1, #124	; 0x7c
   19166:	4812      	ldr	r0, [pc, #72]	; (191b0 <z_tick_get+0x70>)
   19168:	f000 fee7 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   1916c:	480f      	ldr	r0, [pc, #60]	; (191ac <z_tick_get+0x6c>)
   1916e:	f7ff fc71 	bl	18a54 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   19172:	f7f2 fd93 	bl	bc9c <z_clock_elapsed>
   19176:	4b10      	ldr	r3, [pc, #64]	; (191b8 <z_tick_get+0x78>)
   19178:	e9d3 4500 	ldrd	r4, r5, [r3]
   1917c:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1917e:	480b      	ldr	r0, [pc, #44]	; (191ac <z_tick_get+0x6c>)
   19180:	f145 0500 	adc.w	r5, r5, #0
   19184:	f7ff fc58 	bl	18a38 <z_spin_unlock_valid>
   19188:	b940      	cbnz	r0, 1919c <z_tick_get+0x5c>
   1918a:	4909      	ldr	r1, [pc, #36]	; (191b0 <z_tick_get+0x70>)
   1918c:	4809      	ldr	r0, [pc, #36]	; (191b4 <z_tick_get+0x74>)
   1918e:	22a7      	movs	r2, #167	; 0xa7
   19190:	f000 fc2d 	bl	199ee <printk>
   19194:	21a7      	movs	r1, #167	; 0xa7
   19196:	4806      	ldr	r0, [pc, #24]	; (191b0 <z_tick_get+0x70>)
   19198:	f000 fecf 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   1919c:	f386 8811 	msr	BASEPRI, r6
   191a0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   191a4:	4620      	mov	r0, r4
   191a6:	4629      	mov	r1, r5
   191a8:	bd70      	pop	{r4, r5, r6, pc}
   191aa:	bf00      	nop
   191ac:	2000ae3c 	.word	0x2000ae3c
   191b0:	0001eb11 	.word	0x0001eb11
   191b4:	0001ead7 	.word	0x0001ead7
   191b8:	2000a460 	.word	0x2000a460

000191bc <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   191bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   191c0:	6884      	ldr	r4, [r0, #8]
{
   191c2:	4605      	mov	r5, r0
   191c4:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   191c6:	b1b4      	cbz	r4, 191f6 <signal_poll_event+0x3a>
		if (poller->mode == MODE_POLL) {
   191c8:	7863      	ldrb	r3, [r4, #1]
   191ca:	2b01      	cmp	r3, #1
   191cc:	d145      	bne.n	1925a <signal_poll_event+0x9e>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   191ce:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   191d2:	d10a      	bne.n	191ea <signal_poll_event+0x2e>
   191d4:	22e3      	movs	r2, #227	; 0xe3
   191d6:	492d      	ldr	r1, [pc, #180]	; (1928c <signal_poll_event+0xd0>)
   191d8:	482d      	ldr	r0, [pc, #180]	; (19290 <signal_poll_event+0xd4>)
   191da:	f000 fc08 	bl	199ee <printk>
   191de:	21e3      	movs	r1, #227	; 0xe3
   191e0:	482a      	ldr	r0, [pc, #168]	; (1928c <signal_poll_event+0xd0>)
   191e2:	f000 feaa 	bl	19f3a <assert_post_action>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   191e6:	7b7b      	ldrb	r3, [r7, #13]
   191e8:	deff      	udf	#255	; 0xff
	if (!z_is_thread_pending(thread)) {
   191ea:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   191ee:	f013 0302 	ands.w	r3, r3, #2
   191f2:	d10a      	bne.n	1920a <signal_poll_event+0x4e>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   191f4:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   191f6:	2000      	movs	r0, #0
	event->state |= state;
   191f8:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   191fa:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   191fc:	f3c3 3104 	ubfx	r1, r3, #12, #5
   19200:	430e      	orrs	r6, r1
   19202:	f366 3310 	bfi	r3, r6, #12, #5
   19206:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   19208:	e00b      	b.n	19222 <signal_poll_event+0x66>
	if (z_is_thread_timeout_expired(thread)) {
   1920a:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   1920e:	f1b3 3fff 	cmp.w	r3, #4294967295
   19212:	bf08      	it	eq
   19214:	f112 0f02 	cmneq.w	r2, #2
   19218:	d105      	bne.n	19226 <signal_poll_event+0x6a>
		poller->is_polling = false;
   1921a:	2300      	movs	r3, #0
		return -EAGAIN;
   1921c:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   19220:	7023      	strb	r3, [r4, #0]
}
   19222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   19226:	4638      	mov	r0, r7
   19228:	f7fe fb30 	bl	1788c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1922c:	2e08      	cmp	r6, #8
   1922e:	bf0c      	ite	eq
   19230:	f06f 0303 	mvneq.w	r3, #3
   19234:	2300      	movne	r3, #0
   19236:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19238:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   1923c:	06db      	lsls	r3, r3, #27
   1923e:	d104      	bne.n	1924a <signal_poll_event+0x8e>
	if (!z_is_thread_ready(thread)) {
   19240:	f854 8c54 	ldr.w	r8, [r4, #-84]
   19244:	f1b8 0f00 	cmp.w	r8, #0
   19248:	d001      	beq.n	1924e <signal_poll_event+0x92>
		poller->is_polling = false;
   1924a:	2300      	movs	r3, #0
   1924c:	e7d2      	b.n	191f4 <signal_poll_event+0x38>
	z_ready_thread(thread);
   1924e:	4638      	mov	r0, r7
   19250:	f7fe fc36 	bl	17ac0 <z_ready_thread>
		poller->is_polling = false;
   19254:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   19258:	e7cd      	b.n	191f6 <signal_poll_event+0x3a>
		} else if (poller->mode == MODE_TRIGGERED) {
   1925a:	2b02      	cmp	r3, #2
   1925c:	d1f5      	bne.n	1924a <signal_poll_event+0x8e>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1925e:	7823      	ldrb	r3, [r4, #0]
   19260:	2b00      	cmp	r3, #0
   19262:	d0c8      	beq.n	191f6 <signal_poll_event+0x3a>
   19264:	f854 7c04 	ldr.w	r7, [r4, #-4]
   19268:	b177      	cbz	r7, 19288 <signal_poll_event+0xcc>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   1926a:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   1926e:	f1a4 0910 	sub.w	r9, r4, #16
   19272:	f104 0010 	add.w	r0, r4, #16
   19276:	f7ff fe15 	bl	18ea4 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   1927a:	4649      	mov	r1, r9
   1927c:	4638      	mov	r0, r7
		twork->poll_result = 0;
   1927e:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   19282:	f004 f832 	bl	1d2ea <k_work_submit_to_queue>
   19286:	e7e5      	b.n	19254 <signal_poll_event+0x98>
		poller->is_polling = false;
   19288:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   1928a:	e7b4      	b.n	191f6 <signal_poll_event+0x3a>
   1928c:	000217cf 	.word	0x000217cf
   19290:	0001ead7 	.word	0x0001ead7

00019294 <register_events>:
{
   19294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   19298:	2600      	movs	r6, #0
{
   1929a:	4614      	mov	r4, r2
   1929c:	4681      	mov	r9, r0
	int events_registered = 0;
   1929e:	46b0      	mov	r8, r6
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   192a0:	f8df a188 	ldr.w	sl, [pc, #392]	; 1942c <register_events+0x198>
   192a4:	4f62      	ldr	r7, [pc, #392]	; (19430 <register_events+0x19c>)
   192a6:	4d63      	ldr	r5, [pc, #396]	; (19434 <register_events+0x1a0>)
{
   192a8:	9100      	str	r1, [sp, #0]
   192aa:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   192ac:	9b00      	ldr	r3, [sp, #0]
   192ae:	429e      	cmp	r6, r3
   192b0:	db03      	blt.n	192ba <register_events+0x26>
}
   192b2:	4640      	mov	r0, r8
   192b4:	b003      	add	sp, #12
   192b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   192ba:	f04f 0220 	mov.w	r2, #32
   192be:	f3ef 8b11 	mrs	fp, BASEPRI
   192c2:	f382 8811 	msr	BASEPRI, r2
   192c6:	f3bf 8f6f 	isb	sy
   192ca:	4650      	mov	r0, sl
   192cc:	f7ff fba6 	bl	18a1c <z_spin_lock_valid>
   192d0:	b940      	cbnz	r0, 192e4 <register_events+0x50>
   192d2:	4639      	mov	r1, r7
   192d4:	4628      	mov	r0, r5
   192d6:	227c      	movs	r2, #124	; 0x7c
   192d8:	f000 fb89 	bl	199ee <printk>
   192dc:	217c      	movs	r1, #124	; 0x7c
   192de:	4638      	mov	r0, r7
   192e0:	f000 fe2b 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   192e4:	4650      	mov	r0, sl
   192e6:	f7ff fbb5 	bl	18a54 <z_spin_lock_set_owner>
	switch (event->type) {
   192ea:	f899 200d 	ldrb.w	r2, [r9, #13]
   192ee:	f002 020f 	and.w	r2, r2, #15
   192f2:	2a04      	cmp	r2, #4
   192f4:	d848      	bhi.n	19388 <register_events+0xf4>
   192f6:	e8df f002 	tbb	[pc, r2]
   192fa:	402f      	.short	0x402f
   192fc:	4703      	.short	0x4703
   192fe:	2b          	.byte	0x2b
   192ff:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   19300:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19304:	6892      	ldr	r2, [r2, #8]
   19306:	b33a      	cbz	r2, 19358 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   19308:	2102      	movs	r1, #2
	event->poller = NULL;
   1930a:	2000      	movs	r0, #0
	event->state |= state;
   1930c:	f8d9 200c 	ldr.w	r2, [r9, #12]
	event->poller = NULL;
   19310:	f8c9 0008 	str.w	r0, [r9, #8]
	event->state |= state;
   19314:	f3c2 3c04 	ubfx	ip, r2, #12, #5
   19318:	ea41 010c 	orr.w	r1, r1, ip
   1931c:	f361 3210 	bfi	r2, r1, #12, #5
   19320:	f8c9 200c 	str.w	r2, [r9, #12]
			poller->is_polling = false;
   19324:	7020      	strb	r0, [r4, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19326:	4650      	mov	r0, sl
   19328:	f7ff fb86 	bl	18a38 <z_spin_unlock_valid>
   1932c:	b940      	cbnz	r0, 19340 <register_events+0xac>
   1932e:	4639      	mov	r1, r7
   19330:	4628      	mov	r0, r5
   19332:	22a7      	movs	r2, #167	; 0xa7
   19334:	f000 fb5b 	bl	199ee <printk>
   19338:	21a7      	movs	r1, #167	; 0xa7
   1933a:	4638      	mov	r0, r7
   1933c:	f000 fdfd 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   19340:	f38b 8811 	msr	BASEPRI, fp
   19344:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   19348:	3601      	adds	r6, #1
   1934a:	f109 0914 	add.w	r9, r9, #20
   1934e:	e7ad      	b.n	192ac <register_events+0x18>
		if (!k_queue_is_empty(event->queue)) {
   19350:	f8d9 2010 	ldr.w	r2, [r9, #16]
   19354:	6812      	ldr	r2, [r2, #0]
   19356:	bb0a      	cbnz	r2, 1939c <register_events+0x108>
		} else if (!just_check && poller->is_polling) {
   19358:	9b01      	ldr	r3, [sp, #4]
   1935a:	2b00      	cmp	r3, #0
   1935c:	d1e3      	bne.n	19326 <register_events+0x92>
   1935e:	7822      	ldrb	r2, [r4, #0]
   19360:	2a00      	cmp	r2, #0
   19362:	d0e0      	beq.n	19326 <register_events+0x92>
	switch (event->type) {
   19364:	f899 200d 	ldrb.w	r2, [r9, #13]
   19368:	f002 020f 	and.w	r2, r2, #15
   1936c:	2a04      	cmp	r2, #4
   1936e:	d852      	bhi.n	19416 <register_events+0x182>
   19370:	e8df f002 	tbb	[pc, r2]
   19374:	51164029 	.word	0x51164029
   19378:	2e          	.byte	0x2e
   19379:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   1937a:	f8d9 2010 	ldr.w	r2, [r9, #16]
   1937e:	6892      	ldr	r2, [r2, #8]
   19380:	2a00      	cmp	r2, #0
   19382:	d0e9      	beq.n	19358 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   19384:	2101      	movs	r1, #1
   19386:	e7c0      	b.n	1930a <register_events+0x76>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   19388:	4628      	mov	r0, r5
   1938a:	2254      	movs	r2, #84	; 0x54
   1938c:	492a      	ldr	r1, [pc, #168]	; (19438 <register_events+0x1a4>)
   1938e:	f000 fb2e 	bl	199ee <printk>
   19392:	2154      	movs	r1, #84	; 0x54
   19394:	4828      	ldr	r0, [pc, #160]	; (19438 <register_events+0x1a4>)
   19396:	f000 fdd0 	bl	19f3a <assert_post_action>
		break;
   1939a:	e7dd      	b.n	19358 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1939c:	2104      	movs	r1, #4
   1939e:	e7b4      	b.n	1930a <register_events+0x76>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   193a0:	f8d9 2010 	ldr.w	r2, [r9, #16]
   193a4:	b942      	cbnz	r2, 193b8 <register_events+0x124>
   193a6:	4628      	mov	r0, r5
   193a8:	4923      	ldr	r1, [pc, #140]	; (19438 <register_events+0x1a4>)
   193aa:	227e      	movs	r2, #126	; 0x7e
   193ac:	f000 fb1f 	bl	199ee <printk>
   193b0:	217e      	movs	r1, #126	; 0x7e
   193b2:	4821      	ldr	r0, [pc, #132]	; (19438 <register_events+0x1a4>)
   193b4:	f000 fdc1 	bl	19f3a <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   193b8:	4622      	mov	r2, r4
   193ba:	4649      	mov	r1, r9
   193bc:	f8d9 0010 	ldr.w	r0, [r9, #16]
   193c0:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   193c2:	f003 ffa6 	bl	1d312 <add_event>
	event->poller = poller;
   193c6:	f8c9 4008 	str.w	r4, [r9, #8]
			events_registered += 1;
   193ca:	f108 0801 	add.w	r8, r8, #1
   193ce:	e7aa      	b.n	19326 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   193d0:	f8d9 2010 	ldr.w	r2, [r9, #16]
   193d4:	b942      	cbnz	r2, 193e8 <register_events+0x154>
   193d6:	4628      	mov	r0, r5
   193d8:	4917      	ldr	r1, [pc, #92]	; (19438 <register_events+0x1a4>)
   193da:	2282      	movs	r2, #130	; 0x82
   193dc:	f000 fb07 	bl	199ee <printk>
   193e0:	2182      	movs	r1, #130	; 0x82
   193e2:	4815      	ldr	r0, [pc, #84]	; (19438 <register_events+0x1a4>)
   193e4:	f000 fda9 	bl	19f3a <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   193e8:	f8d9 0010 	ldr.w	r0, [r9, #16]
   193ec:	4622      	mov	r2, r4
   193ee:	4649      	mov	r1, r9
   193f0:	3014      	adds	r0, #20
   193f2:	e7e6      	b.n	193c2 <register_events+0x12e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   193f4:	f8d9 2010 	ldr.w	r2, [r9, #16]
   193f8:	b942      	cbnz	r2, 1940c <register_events+0x178>
   193fa:	4628      	mov	r0, r5
   193fc:	490e      	ldr	r1, [pc, #56]	; (19438 <register_events+0x1a4>)
   193fe:	2286      	movs	r2, #134	; 0x86
   19400:	f000 faf5 	bl	199ee <printk>
   19404:	2186      	movs	r1, #134	; 0x86
   19406:	480c      	ldr	r0, [pc, #48]	; (19438 <register_events+0x1a4>)
   19408:	f000 fd97 	bl	19f3a <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   1940c:	4622      	mov	r2, r4
   1940e:	4649      	mov	r1, r9
   19410:	f8d9 0010 	ldr.w	r0, [r9, #16]
   19414:	e7d5      	b.n	193c2 <register_events+0x12e>
		__ASSERT(false, "invalid event type\n");
   19416:	4628      	mov	r0, r5
   19418:	228d      	movs	r2, #141	; 0x8d
   1941a:	4907      	ldr	r1, [pc, #28]	; (19438 <register_events+0x1a4>)
   1941c:	f000 fae7 	bl	199ee <printk>
   19420:	218d      	movs	r1, #141	; 0x8d
   19422:	4805      	ldr	r0, [pc, #20]	; (19438 <register_events+0x1a4>)
   19424:	f000 fd89 	bl	19f3a <assert_post_action>
		break;
   19428:	e7cd      	b.n	193c6 <register_events+0x132>
   1942a:	bf00      	nop
   1942c:	2000ae40 	.word	0x2000ae40
   19430:	0001eb11 	.word	0x0001eb11
   19434:	0001ead7 	.word	0x0001ead7
   19438:	000217cf 	.word	0x000217cf

0001943c <clear_event_registrations>:
{
   1943c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19440:	2414      	movs	r4, #20
   19442:	4617      	mov	r7, r2
	while (num_events--) {
   19444:	460e      	mov	r6, r1
   19446:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   1944a:	4d3d      	ldr	r5, [pc, #244]	; (19540 <clear_event_registrations+0x104>)
   1944c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 19544 <clear_event_registrations+0x108>
   19450:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 19548 <clear_event_registrations+0x10c>
	while (num_events--) {
   19454:	b90e      	cbnz	r6, 1945a <clear_event_registrations+0x1e>
}
   19456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	event->poller = NULL;
   1945a:	2300      	movs	r3, #0
   1945c:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   19460:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   19464:	f1a4 0a14 	sub.w	sl, r4, #20
   19468:	f003 030f 	and.w	r3, r3, #15
   1946c:	2b04      	cmp	r3, #4
   1946e:	d831      	bhi.n	194d4 <clear_event_registrations+0x98>
   19470:	e8df f003 	tbb	[pc, r3]
   19474:	30032539 	.word	0x30032539
   19478:	1a          	.byte	0x1a
   19479:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   1947a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1947e:	b943      	cbnz	r3, 19492 <clear_event_registrations+0x56>
   19480:	4629      	mov	r1, r5
   19482:	229d      	movs	r2, #157	; 0x9d
   19484:	4640      	mov	r0, r8
   19486:	f000 fab2 	bl	199ee <printk>
   1948a:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   1948c:	4628      	mov	r0, r5
   1948e:	f000 fd54 	bl	19f3a <assert_post_action>
	return node->next != NULL;
   19492:	f854 3c14 	ldr.w	r3, [r4, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   19496:	b333      	cbz	r3, 194e6 <clear_event_registrations+0xaa>
	node->prev->next = node->next;
   19498:	f854 2c10 	ldr.w	r2, [r4, #-16]
   1949c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1949e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   194a0:	2300      	movs	r3, #0
	node->prev = NULL;
   194a2:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   194a6:	e01e      	b.n	194e6 <clear_event_registrations+0xaa>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   194a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   194ac:	2b00      	cmp	r3, #0
   194ae:	d1f0      	bne.n	19492 <clear_event_registrations+0x56>
   194b0:	4629      	mov	r1, r5
   194b2:	22a1      	movs	r2, #161	; 0xa1
   194b4:	4640      	mov	r0, r8
   194b6:	f000 fa9a 	bl	199ee <printk>
   194ba:	21a1      	movs	r1, #161	; 0xa1
   194bc:	e7e6      	b.n	1948c <clear_event_registrations+0x50>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   194be:	f854 3c04 	ldr.w	r3, [r4, #-4]
   194c2:	2b00      	cmp	r3, #0
   194c4:	d1e5      	bne.n	19492 <clear_event_registrations+0x56>
   194c6:	4629      	mov	r1, r5
   194c8:	22a5      	movs	r2, #165	; 0xa5
   194ca:	4640      	mov	r0, r8
   194cc:	f000 fa8f 	bl	199ee <printk>
   194d0:	21a5      	movs	r1, #165	; 0xa5
   194d2:	e7db      	b.n	1948c <clear_event_registrations+0x50>
		__ASSERT(false, "invalid event type\n");
   194d4:	4629      	mov	r1, r5
   194d6:	4640      	mov	r0, r8
   194d8:	22ac      	movs	r2, #172	; 0xac
   194da:	f000 fa88 	bl	199ee <printk>
   194de:	21ac      	movs	r1, #172	; 0xac
   194e0:	4628      	mov	r0, r5
   194e2:	f000 fd2a 	bl	19f3a <assert_post_action>
   194e6:	4648      	mov	r0, r9
   194e8:	f7ff faa6 	bl	18a38 <z_spin_unlock_valid>
   194ec:	b940      	cbnz	r0, 19500 <clear_event_registrations+0xc4>
   194ee:	4640      	mov	r0, r8
   194f0:	4916      	ldr	r1, [pc, #88]	; (1954c <clear_event_registrations+0x110>)
   194f2:	22a7      	movs	r2, #167	; 0xa7
   194f4:	f000 fa7b 	bl	199ee <printk>
   194f8:	21a7      	movs	r1, #167	; 0xa7
   194fa:	4814      	ldr	r0, [pc, #80]	; (1954c <clear_event_registrations+0x110>)
   194fc:	f000 fd1d 	bl	19f3a <assert_post_action>
   19500:	f387 8811 	msr	BASEPRI, r7
   19504:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   19508:	f04f 0320 	mov.w	r3, #32
   1950c:	f3ef 8711 	mrs	r7, BASEPRI
   19510:	f383 8811 	msr	BASEPRI, r3
   19514:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19518:	4648      	mov	r0, r9
   1951a:	f7ff fa7f 	bl	18a1c <z_spin_lock_valid>
   1951e:	b940      	cbnz	r0, 19532 <clear_event_registrations+0xf6>
   19520:	4640      	mov	r0, r8
   19522:	490a      	ldr	r1, [pc, #40]	; (1954c <clear_event_registrations+0x110>)
   19524:	227c      	movs	r2, #124	; 0x7c
   19526:	f000 fa62 	bl	199ee <printk>
   1952a:	217c      	movs	r1, #124	; 0x7c
   1952c:	4807      	ldr	r0, [pc, #28]	; (1954c <clear_event_registrations+0x110>)
   1952e:	f000 fd04 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   19532:	4648      	mov	r0, r9
   19534:	f7ff fa8e 	bl	18a54 <z_spin_lock_set_owner>
	return k;
   19538:	4654      	mov	r4, sl
   1953a:	3e01      	subs	r6, #1
   1953c:	e78a      	b.n	19454 <clear_event_registrations+0x18>
   1953e:	bf00      	nop
   19540:	000217cf 	.word	0x000217cf
   19544:	0001ead7 	.word	0x0001ead7
   19548:	2000ae40 	.word	0x2000ae40
   1954c:	0001eb11 	.word	0x0001eb11

00019550 <k_poll_event_init>:
{
   19550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19552:	4605      	mov	r5, r0
   19554:	460f      	mov	r7, r1
   19556:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   19558:	4614      	mov	r4, r2
   1955a:	b142      	cbz	r2, 1956e <k_poll_event_init+0x1e>
   1955c:	4915      	ldr	r1, [pc, #84]	; (195b4 <k_poll_event_init+0x64>)
   1955e:	4816      	ldr	r0, [pc, #88]	; (195b8 <k_poll_event_init+0x68>)
   19560:	222d      	movs	r2, #45	; 0x2d
   19562:	f000 fa44 	bl	199ee <printk>
   19566:	212d      	movs	r1, #45	; 0x2d
   19568:	4812      	ldr	r0, [pc, #72]	; (195b4 <k_poll_event_init+0x64>)
   1956a:	f000 fce6 	bl	19f3a <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   1956e:	2f0f      	cmp	r7, #15
   19570:	d908      	bls.n	19584 <k_poll_event_init+0x34>
   19572:	4910      	ldr	r1, [pc, #64]	; (195b4 <k_poll_event_init+0x64>)
   19574:	4810      	ldr	r0, [pc, #64]	; (195b8 <k_poll_event_init+0x68>)
   19576:	222f      	movs	r2, #47	; 0x2f
   19578:	f000 fa39 	bl	199ee <printk>
   1957c:	212f      	movs	r1, #47	; 0x2f
   1957e:	480d      	ldr	r0, [pc, #52]	; (195b4 <k_poll_event_init+0x64>)
   19580:	f000 fcdb 	bl	19f3a <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   19584:	b946      	cbnz	r6, 19598 <k_poll_event_init+0x48>
   19586:	490b      	ldr	r1, [pc, #44]	; (195b4 <k_poll_event_init+0x64>)
   19588:	480b      	ldr	r0, [pc, #44]	; (195b8 <k_poll_event_init+0x68>)
   1958a:	2230      	movs	r2, #48	; 0x30
   1958c:	f000 fa2f 	bl	199ee <printk>
   19590:	2130      	movs	r1, #48	; 0x30
   19592:	4808      	ldr	r0, [pc, #32]	; (195b4 <k_poll_event_init+0x64>)
   19594:	f000 fcd1 	bl	19f3a <assert_post_action>
	event->poller = NULL;
   19598:	2300      	movs	r3, #0
	event->type = type;
   1959a:	0464      	lsls	r4, r4, #17
   1959c:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   1959e:	60ab      	str	r3, [r5, #8]
	event->type = type;
   195a0:	f404 3400 	and.w	r4, r4, #131072	; 0x20000
   195a4:	7b2b      	ldrb	r3, [r5, #12]
   195a6:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
   195aa:	433c      	orrs	r4, r7
   195ac:	431c      	orrs	r4, r3
	event->obj = obj;
   195ae:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   195b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   195b4:	000217cf 	.word	0x000217cf
   195b8:	0001ead7 	.word	0x0001ead7

000195bc <z_impl_k_poll>:
{
   195bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   195c0:	461d      	mov	r5, r3
	struct z_poller *poller = &_current->poller;
   195c2:	4b64      	ldr	r3, [pc, #400]	; (19754 <z_impl_k_poll+0x198>)
{
   195c4:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   195c6:	689f      	ldr	r7, [r3, #8]
	poller->is_polling = true;
   195c8:	2301      	movs	r3, #1
{
   195ca:	4688      	mov	r8, r1
   195cc:	4616      	mov	r6, r2
   195ce:	b085      	sub	sp, #20
	struct z_poller *poller = &_current->poller;
   195d0:	f107 096c 	add.w	r9, r7, #108	; 0x6c
	poller->is_polling = true;
   195d4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	poller->mode = MODE_POLL;
   195d8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
   195dc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   195e0:	b153      	cbz	r3, 195f8 <z_impl_k_poll+0x3c>
   195e2:	495d      	ldr	r1, [pc, #372]	; (19758 <z_impl_k_poll+0x19c>)
   195e4:	485d      	ldr	r0, [pc, #372]	; (1975c <z_impl_k_poll+0x1a0>)
   195e6:	f44f 7282 	mov.w	r2, #260	; 0x104
   195ea:	f000 fa00 	bl	199ee <printk>
   195ee:	f44f 7182 	mov.w	r1, #260	; 0x104
   195f2:	4859      	ldr	r0, [pc, #356]	; (19758 <z_impl_k_poll+0x19c>)
   195f4:	f000 fca1 	bl	19f3a <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   195f8:	b954      	cbnz	r4, 19610 <z_impl_k_poll+0x54>
   195fa:	4957      	ldr	r1, [pc, #348]	; (19758 <z_impl_k_poll+0x19c>)
   195fc:	4857      	ldr	r0, [pc, #348]	; (1975c <z_impl_k_poll+0x1a0>)
   195fe:	f240 1205 	movw	r2, #261	; 0x105
   19602:	f000 f9f4 	bl	199ee <printk>
   19606:	f240 1105 	movw	r1, #261	; 0x105
   1960a:	4853      	ldr	r0, [pc, #332]	; (19758 <z_impl_k_poll+0x19c>)
   1960c:	f000 fc95 	bl	19f3a <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   19610:	f1b8 0f00 	cmp.w	r8, #0
   19614:	da0a      	bge.n	1962c <z_impl_k_poll+0x70>
   19616:	4950      	ldr	r1, [pc, #320]	; (19758 <z_impl_k_poll+0x19c>)
   19618:	4850      	ldr	r0, [pc, #320]	; (1975c <z_impl_k_poll+0x1a0>)
   1961a:	f44f 7283 	mov.w	r2, #262	; 0x106
   1961e:	f000 f9e6 	bl	199ee <printk>
   19622:	f44f 7183 	mov.w	r1, #262	; 0x106
   19626:	484c      	ldr	r0, [pc, #304]	; (19758 <z_impl_k_poll+0x19c>)
   19628:	f000 fc87 	bl	19f3a <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   1962c:	ea56 0305 	orrs.w	r3, r6, r5
   19630:	bf0c      	ite	eq
   19632:	2301      	moveq	r3, #1
   19634:	2300      	movne	r3, #0
   19636:	4641      	mov	r1, r8
   19638:	464a      	mov	r2, r9
   1963a:	4620      	mov	r0, r4
   1963c:	f7ff fe2a 	bl	19294 <register_events>
   19640:	4680      	mov	r8, r0
   19642:	f04f 0320 	mov.w	r3, #32
   19646:	f3ef 8911 	mrs	r9, BASEPRI
   1964a:	f383 8811 	msr	BASEPRI, r3
   1964e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19652:	4843      	ldr	r0, [pc, #268]	; (19760 <z_impl_k_poll+0x1a4>)
   19654:	f7ff f9e2 	bl	18a1c <z_spin_lock_valid>
   19658:	b940      	cbnz	r0, 1966c <z_impl_k_poll+0xb0>
   1965a:	4942      	ldr	r1, [pc, #264]	; (19764 <z_impl_k_poll+0x1a8>)
   1965c:	483f      	ldr	r0, [pc, #252]	; (1975c <z_impl_k_poll+0x1a0>)
   1965e:	227c      	movs	r2, #124	; 0x7c
   19660:	f000 f9c5 	bl	199ee <printk>
   19664:	217c      	movs	r1, #124	; 0x7c
   19666:	483f      	ldr	r0, [pc, #252]	; (19764 <z_impl_k_poll+0x1a8>)
   19668:	f000 fc67 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   1966c:	483c      	ldr	r0, [pc, #240]	; (19760 <z_impl_k_poll+0x1a4>)
   1966e:	f7ff f9f1 	bl	18a54 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   19672:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
   19676:	b9d3      	cbnz	r3, 196ae <z_impl_k_poll+0xf2>
		clear_event_registrations(events, events_registered, key);
   19678:	4620      	mov	r0, r4
   1967a:	464a      	mov	r2, r9
   1967c:	4641      	mov	r1, r8
   1967e:	f7ff fedd 	bl	1943c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19682:	4837      	ldr	r0, [pc, #220]	; (19760 <z_impl_k_poll+0x1a4>)
   19684:	f7ff f9d8 	bl	18a38 <z_spin_unlock_valid>
   19688:	b940      	cbnz	r0, 1969c <z_impl_k_poll+0xe0>
   1968a:	4936      	ldr	r1, [pc, #216]	; (19764 <z_impl_k_poll+0x1a8>)
   1968c:	4833      	ldr	r0, [pc, #204]	; (1975c <z_impl_k_poll+0x1a0>)
   1968e:	22a7      	movs	r2, #167	; 0xa7
   19690:	f000 f9ad 	bl	199ee <printk>
   19694:	21a7      	movs	r1, #167	; 0xa7
   19696:	4833      	ldr	r0, [pc, #204]	; (19764 <z_impl_k_poll+0x1a8>)
   19698:	f000 fc4f 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   1969c:	f389 8811 	msr	BASEPRI, r9
   196a0:	f3bf 8f6f 	isb	sy
		return 0;
   196a4:	2500      	movs	r5, #0
}
   196a6:	4628      	mov	r0, r5
   196a8:	b005      	add	sp, #20
   196aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   196ae:	2300      	movs	r3, #0
   196b0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   196b4:	ea56 0305 	orrs.w	r3, r6, r5
   196b8:	d113      	bne.n	196e2 <z_impl_k_poll+0x126>
   196ba:	4829      	ldr	r0, [pc, #164]	; (19760 <z_impl_k_poll+0x1a4>)
   196bc:	f7ff f9bc 	bl	18a38 <z_spin_unlock_valid>
   196c0:	b940      	cbnz	r0, 196d4 <z_impl_k_poll+0x118>
   196c2:	4928      	ldr	r1, [pc, #160]	; (19764 <z_impl_k_poll+0x1a8>)
   196c4:	4825      	ldr	r0, [pc, #148]	; (1975c <z_impl_k_poll+0x1a0>)
   196c6:	22a7      	movs	r2, #167	; 0xa7
   196c8:	f000 f991 	bl	199ee <printk>
   196cc:	21a7      	movs	r1, #167	; 0xa7
   196ce:	4825      	ldr	r0, [pc, #148]	; (19764 <z_impl_k_poll+0x1a8>)
   196d0:	f000 fc33 	bl	19f3a <assert_post_action>
   196d4:	f389 8811 	msr	BASEPRI, r9
   196d8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   196dc:	f06f 050a 	mvn.w	r5, #10
   196e0:	e7e1      	b.n	196a6 <z_impl_k_poll+0xea>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   196e2:	e9cd 6500 	strd	r6, r5, [sp]
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   196e6:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   196e8:	4649      	mov	r1, r9
   196ea:	481d      	ldr	r0, [pc, #116]	; (19760 <z_impl_k_poll+0x1a4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   196ec:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   196f0:	f7fe fd50 	bl	18194 <z_pend_curr>
   196f4:	4605      	mov	r5, r0
	__asm__ volatile(
   196f6:	f04f 0320 	mov.w	r3, #32
   196fa:	f3ef 8611 	mrs	r6, BASEPRI
   196fe:	f383 8811 	msr	BASEPRI, r3
   19702:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   19706:	4816      	ldr	r0, [pc, #88]	; (19760 <z_impl_k_poll+0x1a4>)
   19708:	f7ff f988 	bl	18a1c <z_spin_lock_valid>
   1970c:	b940      	cbnz	r0, 19720 <z_impl_k_poll+0x164>
   1970e:	4915      	ldr	r1, [pc, #84]	; (19764 <z_impl_k_poll+0x1a8>)
   19710:	4812      	ldr	r0, [pc, #72]	; (1975c <z_impl_k_poll+0x1a0>)
   19712:	227c      	movs	r2, #124	; 0x7c
   19714:	f000 f96b 	bl	199ee <printk>
   19718:	217c      	movs	r1, #124	; 0x7c
   1971a:	4812      	ldr	r0, [pc, #72]	; (19764 <z_impl_k_poll+0x1a8>)
   1971c:	f000 fc0d 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   19720:	480f      	ldr	r0, [pc, #60]	; (19760 <z_impl_k_poll+0x1a4>)
   19722:	f7ff f997 	bl	18a54 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   19726:	4620      	mov	r0, r4
   19728:	4632      	mov	r2, r6
   1972a:	4641      	mov	r1, r8
   1972c:	f7ff fe86 	bl	1943c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   19730:	480b      	ldr	r0, [pc, #44]	; (19760 <z_impl_k_poll+0x1a4>)
   19732:	f7ff f981 	bl	18a38 <z_spin_unlock_valid>
   19736:	b940      	cbnz	r0, 1974a <z_impl_k_poll+0x18e>
   19738:	490a      	ldr	r1, [pc, #40]	; (19764 <z_impl_k_poll+0x1a8>)
   1973a:	4808      	ldr	r0, [pc, #32]	; (1975c <z_impl_k_poll+0x1a0>)
   1973c:	22a7      	movs	r2, #167	; 0xa7
   1973e:	f000 f956 	bl	199ee <printk>
   19742:	21a7      	movs	r1, #167	; 0xa7
   19744:	4807      	ldr	r0, [pc, #28]	; (19764 <z_impl_k_poll+0x1a8>)
   19746:	f000 fbf8 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   1974a:	f386 8811 	msr	BASEPRI, r6
   1974e:	f3bf 8f6f 	isb	sy
	return swap_rc;
   19752:	e7a8      	b.n	196a6 <z_impl_k_poll+0xea>
   19754:	2000adec 	.word	0x2000adec
   19758:	000217cf 	.word	0x000217cf
   1975c:	0001ead7 	.word	0x0001ead7
   19760:	2000ae40 	.word	0x2000ae40
   19764:	0001eb11 	.word	0x0001eb11

00019768 <z_impl_k_poll_signal_raise>:
{
   19768:	b570      	push	{r4, r5, r6, lr}
   1976a:	4604      	mov	r4, r0
   1976c:	460d      	mov	r5, r1
	__asm__ volatile(
   1976e:	f04f 0320 	mov.w	r3, #32
   19772:	f3ef 8611 	mrs	r6, BASEPRI
   19776:	f383 8811 	msr	BASEPRI, r3
   1977a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1977e:	481c      	ldr	r0, [pc, #112]	; (197f0 <z_impl_k_poll_signal_raise+0x88>)
   19780:	f7ff f94c 	bl	18a1c <z_spin_lock_valid>
   19784:	b940      	cbnz	r0, 19798 <z_impl_k_poll_signal_raise+0x30>
   19786:	491b      	ldr	r1, [pc, #108]	; (197f4 <z_impl_k_poll_signal_raise+0x8c>)
   19788:	481b      	ldr	r0, [pc, #108]	; (197f8 <z_impl_k_poll_signal_raise+0x90>)
   1978a:	227c      	movs	r2, #124	; 0x7c
   1978c:	f000 f92f 	bl	199ee <printk>
   19790:	217c      	movs	r1, #124	; 0x7c
   19792:	4818      	ldr	r0, [pc, #96]	; (197f4 <z_impl_k_poll_signal_raise+0x8c>)
   19794:	f000 fbd1 	bl	19f3a <assert_post_action>
	z_spin_lock_set_owner(l);
   19798:	4815      	ldr	r0, [pc, #84]	; (197f0 <z_impl_k_poll_signal_raise+0x88>)
   1979a:	f7ff f95b 	bl	18a54 <z_spin_lock_set_owner>
	signal->signaled = 1U;
   1979e:	2101      	movs	r1, #1
	return list->head == list;
   197a0:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   197a2:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   197a4:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   197a6:	60a1      	str	r1, [r4, #8]
   197a8:	d112      	bne.n	197d0 <z_impl_k_poll_signal_raise+0x68>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   197aa:	4811      	ldr	r0, [pc, #68]	; (197f0 <z_impl_k_poll_signal_raise+0x88>)
   197ac:	f7ff f944 	bl	18a38 <z_spin_unlock_valid>
   197b0:	b940      	cbnz	r0, 197c4 <z_impl_k_poll_signal_raise+0x5c>
   197b2:	4910      	ldr	r1, [pc, #64]	; (197f4 <z_impl_k_poll_signal_raise+0x8c>)
   197b4:	4810      	ldr	r0, [pc, #64]	; (197f8 <z_impl_k_poll_signal_raise+0x90>)
   197b6:	22a7      	movs	r2, #167	; 0xa7
   197b8:	f000 f919 	bl	199ee <printk>
   197bc:	21a7      	movs	r1, #167	; 0xa7
   197be:	480d      	ldr	r0, [pc, #52]	; (197f4 <z_impl_k_poll_signal_raise+0x8c>)
   197c0:	f000 fbbb 	bl	19f3a <assert_post_action>
	__asm__ volatile(
   197c4:	f386 8811 	msr	BASEPRI, r6
   197c8:	f3bf 8f6f 	isb	sy
		return 0;
   197cc:	2400      	movs	r4, #0
   197ce:	e00d      	b.n	197ec <z_impl_k_poll_signal_raise+0x84>
	node->prev->next = node->next;
   197d0:	e9d0 3200 	ldrd	r3, r2, [r0]
   197d4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   197d6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   197d8:	2300      	movs	r3, #0
	node->prev = NULL;
   197da:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   197de:	f7ff fced 	bl	191bc <signal_poll_event>
	z_reschedule(&lock, key);
   197e2:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   197e4:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   197e6:	4802      	ldr	r0, [pc, #8]	; (197f0 <z_impl_k_poll_signal_raise+0x88>)
   197e8:	f7fd ff96 	bl	17718 <z_reschedule>
}
   197ec:	4620      	mov	r0, r4
   197ee:	bd70      	pop	{r4, r5, r6, pc}
   197f0:	2000ae40 	.word	0x2000ae40
   197f4:	0001eb11 	.word	0x0001eb11
   197f8:	0001ead7 	.word	0x0001ead7

000197fc <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   197fc:	2803      	cmp	r0, #3
{
   197fe:	b538      	push	{r3, r4, r5, lr}
   19800:	4604      	mov	r4, r0
   19802:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   19804:	d901      	bls.n	1980a <k_aligned_alloc+0xe>
   19806:	0783      	lsls	r3, r0, #30
   19808:	d008      	beq.n	1981c <k_aligned_alloc+0x20>
   1980a:	490e      	ldr	r1, [pc, #56]	; (19844 <k_aligned_alloc+0x48>)
   1980c:	480e      	ldr	r0, [pc, #56]	; (19848 <k_aligned_alloc+0x4c>)
   1980e:	223e      	movs	r2, #62	; 0x3e
   19810:	f000 f8ed 	bl	199ee <printk>
   19814:	213e      	movs	r1, #62	; 0x3e
   19816:	480b      	ldr	r0, [pc, #44]	; (19844 <k_aligned_alloc+0x48>)
   19818:	f000 fb8f 	bl	19f3a <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   1981c:	1e63      	subs	r3, r4, #1
   1981e:	4223      	tst	r3, r4
   19820:	d008      	beq.n	19834 <k_aligned_alloc+0x38>
   19822:	4908      	ldr	r1, [pc, #32]	; (19844 <k_aligned_alloc+0x48>)
   19824:	4808      	ldr	r0, [pc, #32]	; (19848 <k_aligned_alloc+0x4c>)
   19826:	2242      	movs	r2, #66	; 0x42
   19828:	f000 f8e1 	bl	199ee <printk>
   1982c:	2142      	movs	r1, #66	; 0x42
   1982e:	4805      	ldr	r0, [pc, #20]	; (19844 <k_aligned_alloc+0x48>)
   19830:	f000 fb83 	bl	19f3a <assert_post_action>
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   19834:	462a      	mov	r2, r5
   19836:	4621      	mov	r1, r4
}
   19838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1983c:	4803      	ldr	r0, [pc, #12]	; (1984c <k_aligned_alloc+0x50>)
   1983e:	f003 bda8 	b.w	1d392 <z_heap_aligned_alloc>
   19842:	bf00      	nop
   19844:	000217f0 	.word	0x000217f0
   19848:	0001ead7 	.word	0x0001ead7
   1984c:	20008640 	.word	0x20008640

00019850 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   19850:	b538      	push	{r3, r4, r5, lr}
   19852:	4604      	mov	r4, r0
   19854:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   19856:	f003 fcaf 	bl	1d1b8 <k_is_in_isr>
   1985a:	b958      	cbnz	r0, 19874 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1985c:	4b07      	ldr	r3, [pc, #28]	; (1987c <z_thread_aligned_alloc+0x2c>)
   1985e:	689b      	ldr	r3, [r3, #8]
   19860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap) {
   19864:	b143      	cbz	r3, 19878 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   19866:	462a      	mov	r2, r5
   19868:	4621      	mov	r1, r4
   1986a:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   1986c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   19870:	f003 bd8f 	b.w	1d392 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   19874:	4b02      	ldr	r3, [pc, #8]	; (19880 <z_thread_aligned_alloc+0x30>)
   19876:	e7f6      	b.n	19866 <z_thread_aligned_alloc+0x16>
}
   19878:	bd38      	pop	{r3, r4, r5, pc}
   1987a:	bf00      	nop
   1987c:	2000adec 	.word	0x2000adec
   19880:	20008640 	.word	0x20008640

00019884 <_ZN13deviceManager10app_led_cbEb>:
void deviceManager::app_led_cb(bool led_state){
   19884:	4601      	mov	r1, r0
    dk_set_led(USER_LED,led_state);
   19886:	2003      	movs	r0, #3
   19888:	f7fc b9ee 	b.w	15c68 <dk_set_led>

0001988c <_ZN13deviceManager11deviceFoundEPK12bt_addr_le_tahP14net_buf_simple>:
	initScan();
   1988c:	f7ef be42 	b.w	9514 <_ZN13deviceManager8initScanEv>

00019890 <_ZN13deviceManager14checkAddressesEPcS0_>:
	}
}

bool deviceManager::checkAddresses(char addr1[],char addr2[])
{
	uint8_t cnt = 0;
   19890:	2300      	movs	r3, #0
{
   19892:	b530      	push	{r4, r5, lr}
   19894:	1e42      	subs	r2, r0, #1
   19896:	3901      	subs	r1, #1
   19898:	3010      	adds	r0, #16
	bool retVal = false;
	for (uint8_t i = 0; i < 17; i++)
	{
		if (addr1[i] == addr2[i])
   1989a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
   1989e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   198a2:	42a5      	cmp	r5, r4
		{
			cnt++;
   198a4:	bf04      	itt	eq
   198a6:	3301      	addeq	r3, #1
   198a8:	b2db      	uxtbeq	r3, r3
	for (uint8_t i = 0; i < 17; i++)
   198aa:	4282      	cmp	r2, r0
   198ac:	d1f5      	bne.n	1989a <_ZN13deviceManager14checkAddressesEPcS0_+0xa>
	{
		cnt = 0;
		retVal = false;
	}
	return retVal;
}
   198ae:	3b11      	subs	r3, #17
   198b0:	4258      	negs	r0, r3
   198b2:	4158      	adcs	r0, r3
   198b4:	bd30      	pop	{r4, r5, pc}

000198b6 <_ZL7on_sentP7bt_connPv>:
    const bt_addr_le_t * addr = bt_conn_get_dst(conn);
   198b6:	f001 bd8e 	b.w	1b3d6 <bt_conn_get_dst>

000198ba <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   198ba:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   198bc:	2364      	movs	r3, #100	; 0x64
{
   198be:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   198c0:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   198c2:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   198c4:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   198c8:	b111      	cbz	r1, 198d0 <u8_to_dec+0x16>
   198ca:	3d01      	subs	r5, #1
   198cc:	d101      	bne.n	198d2 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   198ce:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   198d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		digit = value / divisor;
   198d2:	fbb2 f7f3 	udiv	r7, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   198d6:	429a      	cmp	r2, r3
		digit = value / divisor;
   198d8:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   198da:	d202      	bcs.n	198e2 <u8_to_dec+0x28>
   198dc:	2b01      	cmp	r3, #1
   198de:	d000      	beq.n	198e2 <u8_to_dec+0x28>
   198e0:	b130      	cbz	r0, 198f0 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   198e2:	3630      	adds	r6, #48	; 0x30
			buflen--;
   198e4:	3901      	subs	r1, #1
			num_digits++;
   198e6:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   198e8:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   198ec:	b2c9      	uxtb	r1, r1
			num_digits++;
   198ee:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   198f0:	fb03 2217 	mls	r2, r3, r7, r2
		divisor /= 10;
   198f4:	fbb3 f3fc 	udiv	r3, r3, ip
   198f8:	b2d2      	uxtb	r2, r2
   198fa:	e7e5      	b.n	198c8 <u8_to_dec+0xe>

000198fc <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   198fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   19900:	b2db      	uxtb	r3, r3
   19902:	2b09      	cmp	r3, #9
   19904:	d802      	bhi.n	1990c <char2hex+0x10>
		*x = c - '0';
   19906:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   19908:	2000      	movs	r0, #0
   1990a:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1990c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   19910:	2b05      	cmp	r3, #5
   19912:	d802      	bhi.n	1991a <char2hex+0x1e>
		*x = c - 'a' + 10;
   19914:	3857      	subs	r0, #87	; 0x57
   19916:	7008      	strb	r0, [r1, #0]
   19918:	e7f6      	b.n	19908 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1991a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1991e:	2b05      	cmp	r3, #5
   19920:	d801      	bhi.n	19926 <char2hex+0x2a>
		*x = c - 'A' + 10;
   19922:	3837      	subs	r0, #55	; 0x37
   19924:	e7f7      	b.n	19916 <char2hex+0x1a>
		return -EINVAL;
   19926:	f06f 0015 	mvn.w	r0, #21
}
   1992a:	4770      	bx	lr

0001992c <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1992c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1992e:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   19930:	f001 0001 	and.w	r0, r1, #1
   19934:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   19938:	429d      	cmp	r5, r3
   1993a:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1993e:	d903      	bls.n	19948 <hex2bin+0x1c>
		return 0;
   19940:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   19942:	4628      	mov	r0, r5
   19944:	b003      	add	sp, #12
   19946:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   19948:	b158      	cbz	r0, 19962 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1994a:	7820      	ldrb	r0, [r4, #0]
   1994c:	f10d 0107 	add.w	r1, sp, #7
   19950:	f7ff ffd4 	bl	198fc <char2hex>
   19954:	2800      	cmp	r0, #0
   19956:	dbf3      	blt.n	19940 <hex2bin+0x14>
		buf[0] = dec;
   19958:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hex++;
   1995c:	3401      	adds	r4, #1
		buf[0] = dec;
   1995e:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   19962:	3401      	adds	r4, #1
   19964:	4416      	add	r6, r2
   19966:	42b2      	cmp	r2, r6
   19968:	d0eb      	beq.n	19942 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1996a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1996e:	f10d 0107 	add.w	r1, sp, #7
   19972:	f7ff ffc3 	bl	198fc <char2hex>
   19976:	2800      	cmp	r0, #0
   19978:	dbe2      	blt.n	19940 <hex2bin+0x14>
		buf[i] = dec << 4;
   1997a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1997e:	011b      	lsls	r3, r3, #4
   19980:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   19982:	f814 0b02 	ldrb.w	r0, [r4], #2
   19986:	f7ff ffb9 	bl	198fc <char2hex>
   1998a:	2800      	cmp	r0, #0
   1998c:	dbd8      	blt.n	19940 <hex2bin+0x14>
		buf[i] += dec;
   1998e:	7813      	ldrb	r3, [r2, #0]
   19990:	f89d 1007 	ldrb.w	r1, [sp, #7]
   19994:	440b      	add	r3, r1
   19996:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1999a:	e7e4      	b.n	19966 <hex2bin+0x3a>

0001999c <sys_notify_validate>:
	if (notify == NULL) {
   1999c:	4603      	mov	r3, r0
   1999e:	b140      	cbz	r0, 199b2 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   199a0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   199a2:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   199a6:	2a02      	cmp	r2, #2
   199a8:	d006      	beq.n	199b8 <sys_notify_validate+0x1c>
   199aa:	2a03      	cmp	r2, #3
   199ac:	d004      	beq.n	199b8 <sys_notify_validate+0x1c>
   199ae:	2a01      	cmp	r2, #1
   199b0:	d005      	beq.n	199be <sys_notify_validate+0x22>
		return -EINVAL;
   199b2:	f06f 0015 	mvn.w	r0, #21
}
   199b6:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   199b8:	681a      	ldr	r2, [r3, #0]
   199ba:	2a00      	cmp	r2, #0
   199bc:	d0f9      	beq.n	199b2 <sys_notify_validate+0x16>
		notify->result = 0;
   199be:	2000      	movs	r0, #0
   199c0:	6098      	str	r0, [r3, #8]
   199c2:	4770      	bx	lr

000199c4 <arch_printk_char_out>:
}
   199c4:	2000      	movs	r0, #0
   199c6:	4770      	bx	lr

000199c8 <str_out>:
{
   199c8:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   199ca:	688a      	ldr	r2, [r1, #8]
   199cc:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   199ce:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   199d0:	b114      	cbz	r4, 199d8 <str_out+0x10>
   199d2:	684b      	ldr	r3, [r1, #4]
   199d4:	4293      	cmp	r3, r2
   199d6:	dc01      	bgt.n	199dc <str_out+0x14>
		ctx->count++;
   199d8:	608d      	str	r5, [r1, #8]
}
   199da:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   199dc:	3b01      	subs	r3, #1
   199de:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   199e0:	bf08      	it	eq
   199e2:	2200      	moveq	r2, #0
   199e4:	608d      	str	r5, [r1, #8]
   199e6:	bf0c      	ite	eq
   199e8:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   199ea:	54a0      	strbne	r0, [r4, r2]
   199ec:	e7f5      	b.n	199da <str_out+0x12>

000199ee <printk>:
{
   199ee:	b40f      	push	{r0, r1, r2, r3}
   199f0:	b507      	push	{r0, r1, r2, lr}
   199f2:	a904      	add	r1, sp, #16
   199f4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   199f8:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   199fa:	f7f0 fa7f 	bl	9efc <vprintk>
}
   199fe:	b003      	add	sp, #12
   19a00:	f85d eb04 	ldr.w	lr, [sp], #4
   19a04:	b004      	add	sp, #16
   19a06:	4770      	bx	lr

00019a08 <snprintk>:
{
   19a08:	b40c      	push	{r2, r3}
   19a0a:	b507      	push	{r0, r1, r2, lr}
   19a0c:	ab04      	add	r3, sp, #16
   19a0e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   19a12:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   19a14:	f7f0 fa80 	bl	9f18 <vsnprintk>
}
   19a18:	b003      	add	sp, #12
   19a1a:	f85d eb04 	ldr.w	lr, [sp], #4
   19a1e:	b002      	add	sp, #8
   19a20:	4770      	bx	lr

00019a22 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19a22:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   19a24:	f013 0307 	ands.w	r3, r3, #7
   19a28:	d105      	bne.n	19a36 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   19a2a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   19a2c:	2b00      	cmp	r3, #0
   19a2e:	bf0c      	ite	eq
   19a30:	2000      	moveq	r0, #0
   19a32:	2003      	movne	r0, #3
   19a34:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   19a36:	2b02      	cmp	r3, #2
   19a38:	d105      	bne.n	19a46 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   19a3a:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
   19a3c:	2b00      	cmp	r3, #0
   19a3e:	bf14      	ite	ne
   19a40:	2000      	movne	r0, #0
   19a42:	2004      	moveq	r0, #4
   19a44:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   19a46:	2b01      	cmp	r3, #1
   19a48:	d105      	bne.n	19a56 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   19a4a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   19a4c:	2b00      	cmp	r3, #0
   19a4e:	bf0c      	ite	eq
   19a50:	2000      	moveq	r0, #0
   19a52:	2005      	movne	r0, #5
   19a54:	4770      	bx	lr
	int evt = EVT_NOP;
   19a56:	2000      	movs	r0, #0
}
   19a58:	4770      	bx	lr

00019a5a <notify_one>:
{
   19a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a5e:	460d      	mov	r5, r1
   19a60:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19a62:	4619      	mov	r1, r3
   19a64:	1d28      	adds	r0, r5, #4
{
   19a66:	4690      	mov	r8, r2
   19a68:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19a6a:	f7f0 fa0d 	bl	9e88 <sys_notify_finalize>
	if (cb) {
   19a6e:	4604      	mov	r4, r0
   19a70:	b138      	cbz	r0, 19a82 <notify_one+0x28>
		cb(mgr, cli, state, res);
   19a72:	4633      	mov	r3, r6
   19a74:	4642      	mov	r2, r8
   19a76:	4629      	mov	r1, r5
   19a78:	4638      	mov	r0, r7
   19a7a:	46a4      	mov	ip, r4
}
   19a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   19a80:	4760      	bx	ip
}
   19a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019a86 <validate_args>:
{
   19a86:	b510      	push	{r4, lr}
   19a88:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   19a8a:	b140      	cbz	r0, 19a9e <validate_args+0x18>
   19a8c:	b139      	cbz	r1, 19a9e <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   19a8e:	1d08      	adds	r0, r1, #4
   19a90:	f7ff ff84 	bl	1999c <sys_notify_validate>
	if ((rv == 0)
   19a94:	b928      	cbnz	r0, 19aa2 <validate_args+0x1c>
	    && ((cli->notify.flags
   19a96:	68a3      	ldr	r3, [r4, #8]
   19a98:	f033 0303 	bics.w	r3, r3, #3
   19a9c:	d001      	beq.n	19aa2 <validate_args+0x1c>
		rv = -EINVAL;
   19a9e:	f06f 0015 	mvn.w	r0, #21
}
   19aa2:	bd10      	pop	{r4, pc}

00019aa4 <onoff_manager_init>:
{
   19aa4:	b538      	push	{r3, r4, r5, lr}
   19aa6:	460c      	mov	r4, r1
	if ((mgr == NULL)
   19aa8:	4605      	mov	r5, r0
   19aaa:	b158      	cbz	r0, 19ac4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   19aac:	b151      	cbz	r1, 19ac4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   19aae:	680b      	ldr	r3, [r1, #0]
   19ab0:	b143      	cbz	r3, 19ac4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   19ab2:	684b      	ldr	r3, [r1, #4]
   19ab4:	b133      	cbz	r3, 19ac4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   19ab6:	2220      	movs	r2, #32
   19ab8:	2100      	movs	r1, #0
   19aba:	f001 fa03 	bl	1aec4 <memset>
	return 0;
   19abe:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   19ac0:	612c      	str	r4, [r5, #16]
}
   19ac2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   19ac4:	f06f 0015 	mvn.w	r0, #21
   19ac8:	e7fb      	b.n	19ac2 <onoff_manager_init+0x1e>

00019aca <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   19aca:	4604      	mov	r4, r0
   19acc:	b508      	push	{r3, lr}
   19ace:	4608      	mov	r0, r1
   19ad0:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   19ad2:	461a      	mov	r2, r3
   19ad4:	47a0      	blx	r4
	return z_impl_k_current_get();
   19ad6:	f7fe fdaf 	bl	18638 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   19ada:	f7f3 fc8d 	bl	d3f8 <z_impl_k_thread_abort>

00019ade <chunk_field>:
	if (big_heap(h)) {
   19ade:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   19ae0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   19ae8:	bf2c      	ite	cs
   19aea:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   19aee:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   19af2:	4770      	bx	lr

00019af4 <chunk_set>:
	void *cmem = &buf[c];
   19af4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19af8:	6880      	ldr	r0, [r0, #8]
   19afa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   19afe:	bf2c      	ite	cs
   19b00:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   19b04:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   19b08:	4770      	bx	lr

00019b0a <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19b0a:	2201      	movs	r2, #1
{
   19b0c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   19b0e:	f7ff ffe6 	bl	19ade <chunk_field>
}
   19b12:	40d0      	lsrs	r0, r2
   19b14:	bd08      	pop	{r3, pc}

00019b16 <set_chunk_used>:
	if (big_heap(h)) {
   19b16:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   19b18:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19b20:	d308      	bcc.n	19b34 <set_chunk_used+0x1e>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   19b22:	684b      	ldr	r3, [r1, #4]
		if (used) {
   19b24:	b11a      	cbz	r2, 19b2e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   19b26:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19b2a:	604b      	str	r3, [r1, #4]
   19b2c:	4770      	bx	lr
   19b2e:	f023 0301 	bic.w	r3, r3, #1
   19b32:	e7fa      	b.n	19b2a <set_chunk_used+0x14>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19b34:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   19b36:	b11a      	cbz	r2, 19b40 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19b38:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19b3c:	804b      	strh	r3, [r1, #2]
}
   19b3e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   19b40:	f023 0301 	bic.w	r3, r3, #1
   19b44:	e7fa      	b.n	19b3c <set_chunk_used+0x26>

00019b46 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   19b46:	0053      	lsls	r3, r2, #1
   19b48:	2201      	movs	r2, #1
   19b4a:	f7ff bfd3 	b.w	19af4 <chunk_set>

00019b4e <bytes_to_chunksz.isra.0>:
	return big_heap(h) ? 8 : 4;
   19b4e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   19b52:	bf2c      	ite	cs
   19b54:	2008      	movcs	r0, #8
   19b56:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19b58:	3107      	adds	r1, #7
   19b5a:	4408      	add	r0, r1
}

static inline size_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
	return chunksz(chunk_header_bytes(h) + bytes);
}
   19b5c:	08c0      	lsrs	r0, r0, #3
   19b5e:	4770      	bx	lr

00019b60 <bucket_idx.isra.0>:
static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
   19b60:	b508      	push	{r3, lr}
   19b62:	460b      	mov	r3, r1
   19b64:	2101      	movs	r1, #1
   19b66:	f7ff fff2 	bl	19b4e <bytes_to_chunksz.isra.0>
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   19b6a:	3301      	adds	r3, #1
   19b6c:	1a1b      	subs	r3, r3, r0
	return 31 - __builtin_clz(usable_sz);
   19b6e:	fab3 f083 	clz	r0, r3
}
   19b72:	f1c0 001f 	rsb	r0, r0, #31
   19b76:	bd08      	pop	{r3, pc}

00019b78 <free_list_remove_bidx>:
{
   19b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b7c:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   19b7e:	2203      	movs	r2, #3
   19b80:	460e      	mov	r6, r1
   19b82:	4604      	mov	r4, r0
   19b84:	f7ff ffab 	bl	19ade <chunk_field>
	if (next_free_chunk(h, c) == c) {
   19b88:	4286      	cmp	r6, r0
   19b8a:	4605      	mov	r5, r0
   19b8c:	f107 0804 	add.w	r8, r7, #4
   19b90:	d10b      	bne.n	19baa <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   19b92:	2301      	movs	r3, #1
   19b94:	fa03 f707 	lsl.w	r7, r3, r7
   19b98:	68e3      	ldr	r3, [r4, #12]
   19b9a:	ea23 0307 	bic.w	r3, r3, r7
   19b9e:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   19ba0:	2300      	movs	r3, #0
   19ba2:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   19ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   19baa:	4631      	mov	r1, r6
   19bac:	2202      	movs	r2, #2
   19bae:	4620      	mov	r0, r4
   19bb0:	f7ff ff95 	bl	19ade <chunk_field>
   19bb4:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   19bb6:	462b      	mov	r3, r5
   19bb8:	4601      	mov	r1, r0
   19bba:	2203      	movs	r2, #3
   19bbc:	4620      	mov	r0, r4
		b->next = second;
   19bbe:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   19bc2:	f7ff ff97 	bl	19af4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   19bc6:	4633      	mov	r3, r6
   19bc8:	4629      	mov	r1, r5
   19bca:	4620      	mov	r0, r4
}
   19bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19bd0:	2202      	movs	r2, #2
   19bd2:	f7ff bf8f 	b.w	19af4 <chunk_set>

00019bd6 <free_list_remove>:
{
   19bd6:	b570      	push	{r4, r5, r6, lr}
   19bd8:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   19bda:	6886      	ldr	r6, [r0, #8]
   19bdc:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   19bde:	f7ff ff94 	bl	19b0a <chunk_size>
   19be2:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   19be6:	4601      	mov	r1, r0
   19be8:	d301      	bcc.n	19bee <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   19bea:	2801      	cmp	r0, #1
   19bec:	d009      	beq.n	19c02 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   19bee:	4630      	mov	r0, r6
   19bf0:	f7ff ffb6 	bl	19b60 <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   19bf4:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   19bf6:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   19bf8:	4620      	mov	r0, r4
}
   19bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   19bfe:	f7ff bfbb 	b.w	19b78 <free_list_remove_bidx>
}
   19c02:	bd70      	pop	{r4, r5, r6, pc}

00019c04 <alloc_chunk>:
{
   19c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19c08:	6886      	ldr	r6, [r0, #8]
   19c0a:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   19c0c:	4630      	mov	r0, r6
{
   19c0e:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   19c10:	f7ff ffa6 	bl	19b60 <bucket_idx.isra.0>
	if (bi > bucket_idx(h, h->len)) {
   19c14:	4631      	mov	r1, r6
	int bi = bucket_idx(h, sz);
   19c16:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   19c18:	4630      	mov	r0, r6
   19c1a:	f7ff ffa1 	bl	19b60 <bucket_idx.isra.0>
   19c1e:	42a8      	cmp	r0, r5
   19c20:	da03      	bge.n	19c2a <alloc_chunk+0x26>
		return 0;
   19c22:	2600      	movs	r6, #0
}
   19c24:	4630      	mov	r0, r6
   19c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   19c2a:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   19c2e:	f8da 9010 	ldr.w	r9, [sl, #16]
   19c32:	f1b9 0f00 	cmp.w	r9, #0
   19c36:	d019      	beq.n	19c6c <alloc_chunk+0x68>
   19c38:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   19c3a:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   19c3e:	4620      	mov	r0, r4
   19c40:	4631      	mov	r1, r6
   19c42:	f7ff ff62 	bl	19b0a <chunk_size>
   19c46:	4540      	cmp	r0, r8
   19c48:	d305      	bcc.n	19c56 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   19c4a:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   19c4c:	4631      	mov	r1, r6
   19c4e:	4620      	mov	r0, r4
   19c50:	f7ff ff92 	bl	19b78 <free_list_remove_bidx>
		return c;
   19c54:	e7e6      	b.n	19c24 <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   19c56:	2203      	movs	r2, #3
   19c58:	4631      	mov	r1, r6
   19c5a:	4620      	mov	r0, r4
   19c5c:	f7ff ff3f 	bl	19ade <chunk_field>
		} while (--i && b->next != first);
   19c60:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   19c62:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   19c66:	d001      	beq.n	19c6c <alloc_chunk+0x68>
   19c68:	4581      	cmp	r9, r0
   19c6a:	d1e6      	bne.n	19c3a <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   19c6c:	f04f 32ff 	mov.w	r2, #4294967295
   19c70:	68e3      	ldr	r3, [r4, #12]
   19c72:	3501      	adds	r5, #1
   19c74:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   19c76:	401a      	ands	r2, r3
   19c78:	d0d3      	beq.n	19c22 <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   19c7a:	fa92 f2a2 	rbit	r2, r2
   19c7e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   19c82:	1d13      	adds	r3, r2, #4
   19c84:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   19c88:	e7e0      	b.n	19c4c <alloc_chunk+0x48>

00019c8a <split_chunks>:
{
   19c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c8e:	4614      	mov	r4, r2
   19c90:	460e      	mov	r6, r1
   19c92:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   19c94:	f7ff ff39 	bl	19b0a <chunk_size>
	size_t lsz = rc - lc;
   19c98:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   19c9c:	1b37      	subs	r7, r6, r4
   19c9e:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   19ca0:	4642      	mov	r2, r8
   19ca2:	4631      	mov	r1, r6
   19ca4:	4628      	mov	r0, r5
   19ca6:	f7ff ff4e 	bl	19b46 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   19caa:	463a      	mov	r2, r7
   19cac:	4621      	mov	r1, r4
   19cae:	4628      	mov	r0, r5
   19cb0:	f7ff ff49 	bl	19b46 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19cb4:	4643      	mov	r3, r8
   19cb6:	2200      	movs	r2, #0
   19cb8:	4621      	mov	r1, r4
   19cba:	4628      	mov	r0, r5
   19cbc:	f7ff ff1a 	bl	19af4 <chunk_set>
	return c + chunk_size(h, c);
   19cc0:	4621      	mov	r1, r4
   19cc2:	4628      	mov	r0, r5
   19cc4:	f7ff ff21 	bl	19b0a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19cc8:	463b      	mov	r3, r7
   19cca:	1821      	adds	r1, r4, r0
   19ccc:	2200      	movs	r2, #0
   19cce:	4628      	mov	r0, r5
}
   19cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19cd4:	f7ff bf0e 	b.w	19af4 <chunk_set>

00019cd8 <merge_chunks>:
{
   19cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19cdc:	4616      	mov	r6, r2
   19cde:	4604      	mov	r4, r0
   19ce0:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   19ce2:	f7ff ff12 	bl	19b0a <chunk_size>
   19ce6:	4631      	mov	r1, r6
   19ce8:	4605      	mov	r5, r0
   19cea:	4620      	mov	r0, r4
   19cec:	f7ff ff0d 	bl	19b0a <chunk_size>
   19cf0:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   19cf2:	462a      	mov	r2, r5
   19cf4:	4639      	mov	r1, r7
   19cf6:	4620      	mov	r0, r4
   19cf8:	f7ff ff25 	bl	19b46 <set_chunk_size>
	return c + chunk_size(h, c);
   19cfc:	4631      	mov	r1, r6
   19cfe:	4620      	mov	r0, r4
   19d00:	f7ff ff03 	bl	19b0a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   19d04:	462b      	mov	r3, r5
   19d06:	1831      	adds	r1, r6, r0
   19d08:	2200      	movs	r2, #0
   19d0a:	4620      	mov	r0, r4
}
   19d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19d10:	f7ff bef0 	b.w	19af4 <chunk_set>

00019d14 <free_list_add>:
{
   19d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d18:	460d      	mov	r5, r1
	return big_heap_chunks(h->len);
   19d1a:	6886      	ldr	r6, [r0, #8]
   19d1c:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   19d1e:	f7ff fef4 	bl	19b0a <chunk_size>
   19d22:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   19d26:	4601      	mov	r1, r0
   19d28:	d301      	bcc.n	19d2e <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   19d2a:	2801      	cmp	r0, #1
   19d2c:	d033      	beq.n	19d96 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   19d2e:	4630      	mov	r0, r6
   19d30:	f7ff ff16 	bl	19b60 <bucket_idx.isra.0>
	if (b->next == 0U) {
   19d34:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   19d38:	6916      	ldr	r6, [r2, #16]
   19d3a:	b99e      	cbnz	r6, 19d64 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   19d3c:	2301      	movs	r3, #1
   19d3e:	fa03 f000 	lsl.w	r0, r3, r0
   19d42:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   19d44:	4629      	mov	r1, r5
   19d46:	4303      	orrs	r3, r0
   19d48:	60e3      	str	r3, [r4, #12]
   19d4a:	4620      	mov	r0, r4
		b->next = c;
   19d4c:	6115      	str	r5, [r2, #16]
   19d4e:	462b      	mov	r3, r5
   19d50:	2202      	movs	r2, #2
   19d52:	f7ff fecf 	bl	19af4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   19d56:	2203      	movs	r2, #3
   19d58:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   19d5a:	4620      	mov	r0, r4
}
   19d5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19d60:	f7ff bec8 	b.w	19af4 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   19d64:	2202      	movs	r2, #2
   19d66:	4631      	mov	r1, r6
   19d68:	4620      	mov	r0, r4
   19d6a:	f7ff feb8 	bl	19ade <chunk_field>
   19d6e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   19d70:	4603      	mov	r3, r0
   19d72:	4629      	mov	r1, r5
   19d74:	4620      	mov	r0, r4
   19d76:	f7ff febd 	bl	19af4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   19d7a:	2203      	movs	r2, #3
   19d7c:	4633      	mov	r3, r6
   19d7e:	4629      	mov	r1, r5
   19d80:	4620      	mov	r0, r4
   19d82:	f7ff feb7 	bl	19af4 <chunk_set>
   19d86:	4639      	mov	r1, r7
   19d88:	462b      	mov	r3, r5
   19d8a:	4620      	mov	r0, r4
   19d8c:	f7ff feb2 	bl	19af4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   19d90:	2202      	movs	r2, #2
   19d92:	4631      	mov	r1, r6
   19d94:	e7e1      	b.n	19d5a <free_list_add+0x46>
   19d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019d9a <free_chunk>:
{
   19d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d9c:	460c      	mov	r4, r1
   19d9e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   19da0:	f7ff feb3 	bl	19b0a <chunk_size>
   19da4:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19da6:	2201      	movs	r2, #1
   19da8:	4631      	mov	r1, r6
   19daa:	4628      	mov	r0, r5
   19dac:	f7ff fe97 	bl	19ade <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   19db0:	07c3      	lsls	r3, r0, #31
   19db2:	d40c      	bmi.n	19dce <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   19db4:	4631      	mov	r1, r6
   19db6:	4628      	mov	r0, r5
   19db8:	f7ff ff0d 	bl	19bd6 <free_list_remove>
	return c + chunk_size(h, c);
   19dbc:	4621      	mov	r1, r4
   19dbe:	4628      	mov	r0, r5
   19dc0:	f7ff fea3 	bl	19b0a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   19dc4:	4621      	mov	r1, r4
   19dc6:	1822      	adds	r2, r4, r0
   19dc8:	4628      	mov	r0, r5
   19dca:	f7ff ff85 	bl	19cd8 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   19dce:	2200      	movs	r2, #0
   19dd0:	4621      	mov	r1, r4
   19dd2:	4628      	mov	r0, r5
   19dd4:	f7ff fe83 	bl	19ade <chunk_field>
   19dd8:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   19dda:	2201      	movs	r2, #1
   19ddc:	4639      	mov	r1, r7
   19dde:	4628      	mov	r0, r5
   19de0:	f7ff fe7d 	bl	19ade <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   19de4:	ea10 0602 	ands.w	r6, r0, r2
   19de8:	d113      	bne.n	19e12 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   19dea:	4639      	mov	r1, r7
   19dec:	4628      	mov	r0, r5
   19dee:	f7ff fef2 	bl	19bd6 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   19df2:	4621      	mov	r1, r4
   19df4:	4632      	mov	r2, r6
   19df6:	4628      	mov	r0, r5
   19df8:	f7ff fe71 	bl	19ade <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   19dfc:	4622      	mov	r2, r4
   19dfe:	1a21      	subs	r1, r4, r0
   19e00:	4628      	mov	r0, r5
   19e02:	f7ff ff69 	bl	19cd8 <merge_chunks>
   19e06:	4621      	mov	r1, r4
   19e08:	4632      	mov	r2, r6
   19e0a:	4628      	mov	r0, r5
   19e0c:	f7ff fe67 	bl	19ade <chunk_field>
   19e10:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   19e12:	4621      	mov	r1, r4
   19e14:	4628      	mov	r0, r5
}
   19e16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   19e1a:	f7ff bf7b 	b.w	19d14 <free_list_add>

00019e1e <sys_heap_alloc>:
{
   19e1e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   19e20:	6806      	ldr	r6, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   19e22:	b909      	cbnz	r1, 19e28 <sys_heap_alloc+0xa>
		return NULL;
   19e24:	2000      	movs	r0, #0
}
   19e26:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   19e28:	68b0      	ldr	r0, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   19e2a:	ebb0 0fd1 	cmp.w	r0, r1, lsr #3
   19e2e:	d9f9      	bls.n	19e24 <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   19e30:	f7ff fe8d 	bl	19b4e <bytes_to_chunksz.isra.0>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   19e34:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   19e36:	4605      	mov	r5, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   19e38:	4630      	mov	r0, r6
   19e3a:	f7ff fee3 	bl	19c04 <alloc_chunk>
	if (c == 0U) {
   19e3e:	4604      	mov	r4, r0
   19e40:	2800      	cmp	r0, #0
   19e42:	d0ef      	beq.n	19e24 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   19e44:	4601      	mov	r1, r0
   19e46:	4630      	mov	r0, r6
   19e48:	f7ff fe5f 	bl	19b0a <chunk_size>
   19e4c:	42a8      	cmp	r0, r5
   19e4e:	d909      	bls.n	19e64 <sys_heap_alloc+0x46>
		split_chunks(h, c, c + chunk_sz);
   19e50:	4425      	add	r5, r4
   19e52:	4621      	mov	r1, r4
   19e54:	4630      	mov	r0, r6
   19e56:	462a      	mov	r2, r5
   19e58:	f7ff ff17 	bl	19c8a <split_chunks>
		free_list_add(h, c + chunk_sz);
   19e5c:	4629      	mov	r1, r5
   19e5e:	4630      	mov	r0, r6
   19e60:	f7ff ff58 	bl	19d14 <free_list_add>
	set_chunk_used(h, c, true);
   19e64:	4621      	mov	r1, r4
   19e66:	4630      	mov	r0, r6
   19e68:	2201      	movs	r2, #1
   19e6a:	f7ff fe54 	bl	19b16 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   19e6e:	68b3      	ldr	r3, [r6, #8]
   19e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   19e74:	bf2c      	ite	cs
   19e76:	2308      	movcs	r3, #8
   19e78:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   19e7a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   19e7e:	4420      	add	r0, r4
	return chunk_mem(h, c);
   19e80:	e7d1      	b.n	19e26 <sys_heap_alloc+0x8>

00019e82 <encode_uint>:
{
   19e82:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e86:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   19e88:	78d3      	ldrb	r3, [r2, #3]
{
   19e8a:	4680      	mov	r8, r0
	switch (specifier) {
   19e8c:	2b6f      	cmp	r3, #111	; 0x6f
{
   19e8e:	460f      	mov	r7, r1
   19e90:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   19e92:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   19e96:	d029      	beq.n	19eec <encode_uint+0x6a>
   19e98:	d824      	bhi.n	19ee4 <encode_uint+0x62>
		return 16;
   19e9a:	2b58      	cmp	r3, #88	; 0x58
   19e9c:	bf14      	ite	ne
   19e9e:	260a      	movne	r6, #10
   19ea0:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   19ea2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   19ea6:	4632      	mov	r2, r6
   19ea8:	2300      	movs	r3, #0
   19eaa:	4640      	mov	r0, r8
   19eac:	4639      	mov	r1, r7
   19eae:	f7ee fe3d 	bl	8b2c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19eb2:	2a09      	cmp	r2, #9
   19eb4:	b2d4      	uxtb	r4, r2
   19eb6:	d81e      	bhi.n	19ef6 <encode_uint+0x74>
   19eb8:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   19eba:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19ebc:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   19ebe:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19ec2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   19ec6:	d301      	bcc.n	19ecc <encode_uint+0x4a>
   19ec8:	45d1      	cmp	r9, sl
   19eca:	d811      	bhi.n	19ef0 <encode_uint+0x6e>
	if (conv->flag_hash) {
   19ecc:	782b      	ldrb	r3, [r5, #0]
   19ece:	069b      	lsls	r3, r3, #26
   19ed0:	d505      	bpl.n	19ede <encode_uint+0x5c>
		if (radix == 8) {
   19ed2:	2e08      	cmp	r6, #8
   19ed4:	d115      	bne.n	19f02 <encode_uint+0x80>
			conv->altform_0 = true;
   19ed6:	78ab      	ldrb	r3, [r5, #2]
   19ed8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   19edc:	70ab      	strb	r3, [r5, #2]
}
   19ede:	4648      	mov	r0, r9
   19ee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   19ee4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   19ee8:	2b70      	cmp	r3, #112	; 0x70
   19eea:	e7d7      	b.n	19e9c <encode_uint+0x1a>
	switch (specifier) {
   19eec:	2608      	movs	r6, #8
   19eee:	e7d8      	b.n	19ea2 <encode_uint+0x20>
		value /= radix;
   19ef0:	4680      	mov	r8, r0
   19ef2:	460f      	mov	r7, r1
   19ef4:	e7d7      	b.n	19ea6 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   19ef6:	f1bb 0f19 	cmp.w	fp, #25
   19efa:	bf94      	ite	ls
   19efc:	3437      	addls	r4, #55	; 0x37
   19efe:	3457      	addhi	r4, #87	; 0x57
   19f00:	e7db      	b.n	19eba <encode_uint+0x38>
		} else if (radix == 16) {
   19f02:	2e10      	cmp	r6, #16
   19f04:	d1eb      	bne.n	19ede <encode_uint+0x5c>
			conv->altform_0c = true;
   19f06:	78ab      	ldrb	r3, [r5, #2]
   19f08:	f043 0310 	orr.w	r3, r3, #16
   19f0c:	e7e6      	b.n	19edc <encode_uint+0x5a>

00019f0e <outs>:
{
   19f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f12:	4607      	mov	r7, r0
   19f14:	4688      	mov	r8, r1
   19f16:	4615      	mov	r5, r2
   19f18:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   19f1a:	4614      	mov	r4, r2
   19f1c:	42b4      	cmp	r4, r6
   19f1e:	eba4 0005 	sub.w	r0, r4, r5
   19f22:	d302      	bcc.n	19f2a <outs+0x1c>
   19f24:	b93e      	cbnz	r6, 19f36 <outs+0x28>
   19f26:	7823      	ldrb	r3, [r4, #0]
   19f28:	b12b      	cbz	r3, 19f36 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   19f2a:	4641      	mov	r1, r8
   19f2c:	f814 0b01 	ldrb.w	r0, [r4], #1
   19f30:	47b8      	blx	r7
		if (rc < 0) {
   19f32:	2800      	cmp	r0, #0
   19f34:	daf2      	bge.n	19f1c <outs+0xe>
}
   19f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019f3a <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   19f3a:	4040      	eors	r0, r0
   19f3c:	f380 8811 	msr	BASEPRI, r0
   19f40:	f04f 0004 	mov.w	r0, #4
   19f44:	df02      	svc	2
}
   19f46:	4770      	bx	lr

00019f48 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   19f48:	4770      	bx	lr

00019f4a <nordicsemi_nrf53_init>:
	__asm__ volatile(
   19f4a:	f04f 0320 	mov.w	r3, #32
   19f4e:	f3ef 8111 	mrs	r1, BASEPRI
   19f52:	f383 8811 	msr	BASEPRI, r3
   19f56:	f3bf 8f6f 	isb	sy
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   19f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   19f5e:	2201      	movs	r2, #1
   19f60:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   19f64:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   19f68:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
	__asm__ volatile(
   19f6c:	f381 8811 	msr	BASEPRI, r1
   19f70:	f3bf 8f6f 	isb	sy
}
   19f74:	2000      	movs	r0, #0
   19f76:	4770      	bx	lr

00019f78 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   19f78:	f002 bc70 	b.w	1c85c <SystemInit>

00019f7c <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   19f7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   19f80:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   19f84:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   19f86:	4640      	mov	r0, r8
{
   19f88:	461f      	mov	r7, r3
   19f8a:	460c      	mov	r4, r1
   19f8c:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   19f8e:	f000 ff30 	bl	1adf2 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   19f92:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19f96:	b280      	uxth	r0, r0
   19f98:	e9cd 8001 	strd	r8, r0, [sp, #4]
   19f9c:	9300      	str	r3, [sp, #0]
   19f9e:	4632      	mov	r2, r6
   19fa0:	463b      	mov	r3, r7
   19fa2:	4621      	mov	r1, r4
   19fa4:	4628      	mov	r0, r5
   19fa6:	f002 f8b6 	bl	1c116 <bt_gatt_attr_read>
}
   19faa:	b004      	add	sp, #16
   19fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019fb0 <virtio_get_status>:
}
   19fb0:	2004      	movs	r0, #4
   19fb2:	4770      	bx	lr

00019fb4 <virtio_get_features>:
}
   19fb4:	2001      	movs	r0, #1
   19fb6:	4770      	bx	lr

00019fb8 <virtio_set_features>:
}
   19fb8:	4770      	bx	lr

00019fba <virtqueue_allocate.constprop.0>:

int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
   19fba:	b510      	push	{r4, lr}
	return k_aligned_alloc(sizeof(void *), size);
   19fbc:	21b4      	movs	r1, #180	; 0xb4
   19fbe:	2004      	movs	r0, #4
   19fc0:	f7ff fc1c 	bl	197fc <k_aligned_alloc>
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   19fc4:	4604      	mov	r4, r0
   19fc6:	b118      	cbz	r0, 19fd0 <virtqueue_allocate.constprop.0+0x16>
		memset(vqs, 0x00, vq_size);
   19fc8:	22b4      	movs	r2, #180	; 0xb4
   19fca:	2100      	movs	r1, #0
   19fcc:	f000 ff7a 	bl	1aec4 <memset>
	}

	return vqs;
}
   19fd0:	4620      	mov	r0, r4
   19fd2:	bd10      	pop	{r4, pc}

00019fd4 <rpmsg_service_unbind>:
	rpmsg_destroy_ept(ep);
   19fd4:	f002 bf51 	b.w	1ce7a <rpmsg_destroy_ept>

00019fd8 <settings_load>:
	return settings_load_subtree(NULL);
   19fd8:	2000      	movs	r0, #0
   19fda:	f7f1 b93d 	b.w	b258 <settings_load_subtree>

00019fde <settings_delete>:
	return settings_save_one(name, NULL, 0);
   19fde:	2200      	movs	r2, #0
   19fe0:	4611      	mov	r1, r2
   19fe2:	f7f1 b913 	b.w	b20c <settings_save_one>

00019fe6 <settings_name_steq>:
{
   19fe6:	4603      	mov	r3, r0
   19fe8:	b530      	push	{r4, r5, lr}
   19fea:	4608      	mov	r0, r1
	if (next) {
   19fec:	b10a      	cbz	r2, 19ff2 <settings_name_steq+0xc>
		*next = NULL;
   19fee:	2100      	movs	r1, #0
   19ff0:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   19ff2:	b163      	cbz	r3, 1a00e <_flash_used+0x12>
   19ff4:	b190      	cbz	r0, 1a01c <_flash_used+0x20>
   19ff6:	1e41      	subs	r1, r0, #1
   19ff8:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   19ffa:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   19ffe:	4604      	mov	r4, r0
   1a000:	f810 3b01 	ldrb.w	r3, [r0], #1
   1a004:	b15d      	cbz	r5, 1a01e <_flash_used+0x22>
   1a006:	429d      	cmp	r5, r3
   1a008:	d101      	bne.n	1a00e <_flash_used+0x12>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1a00a:	2d3d      	cmp	r5, #61	; 0x3d
   1a00c:	d1f5      	bne.n	19ffa <settings_name_steq+0x14>
	return 0;
   1a00e:	2000      	movs	r0, #0
   1a010:	e004      	b.n	1a01c <_flash_used+0x20>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1a012:	2b3d      	cmp	r3, #61	; 0x3d
   1a014:	d008      	beq.n	1a028 <_flash_used+0x2c>
   1a016:	fab3 f083 	clz	r0, r3
   1a01a:	0940      	lsrs	r0, r0, #5
}
   1a01c:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1a01e:	2b2f      	cmp	r3, #47	; 0x2f
   1a020:	d1f7      	bne.n	1a012 <_flash_used+0x16>
		if (next) {
   1a022:	b10a      	cbz	r2, 1a028 <_flash_used+0x2c>
			*next = name + 1;
   1a024:	3401      	adds	r4, #1
   1a026:	6014      	str	r4, [r2, #0]
		return 1;
   1a028:	2001      	movs	r0, #1
   1a02a:	e7f7      	b.n	1a01c <_flash_used+0x20>

0001a02c <settings_name_next>:
{
   1a02c:	4603      	mov	r3, r0
   1a02e:	b530      	push	{r4, r5, lr}
	if (next) {
   1a030:	b109      	cbz	r1, 1a036 <settings_name_next+0xa>
		*next = NULL;
   1a032:	2200      	movs	r2, #0
   1a034:	600a      	str	r2, [r1, #0]
	if (!name) {
   1a036:	b16b      	cbz	r3, 1a054 <settings_name_next+0x28>
   1a038:	461a      	mov	r2, r3
   1a03a:	4614      	mov	r4, r2
   1a03c:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1a03e:	f812 5b01 	ldrb.w	r5, [r2], #1
   1a042:	b135      	cbz	r5, 1a052 <settings_name_next+0x26>
   1a044:	2d3d      	cmp	r5, #61	; 0x3d
   1a046:	d004      	beq.n	1a052 <settings_name_next+0x26>
   1a048:	2d2f      	cmp	r5, #47	; 0x2f
   1a04a:	d1f6      	bne.n	1a03a <settings_name_next+0xe>
		if (next) {
   1a04c:	b109      	cbz	r1, 1a052 <settings_name_next+0x26>
			*next = name + 1;
   1a04e:	3401      	adds	r4, #1
   1a050:	600c      	str	r4, [r1, #0]
}
   1a052:	bd30      	pop	{r4, r5, pc}
		return 0;
   1a054:	4618      	mov	r0, r3
   1a056:	e7fc      	b.n	1a052 <settings_name_next+0x26>

0001a058 <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   1a058:	2000      	movs	r0, #0
   1a05a:	4770      	bx	lr

0001a05c <set_on_state>:
	__asm__ volatile(
   1a05c:	f04f 0320 	mov.w	r3, #32
   1a060:	f3ef 8211 	mrs	r2, BASEPRI
   1a064:	f383 8811 	msr	BASEPRI, r3
   1a068:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1a06c:	6803      	ldr	r3, [r0, #0]
   1a06e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a072:	f043 0302 	orr.w	r3, r3, #2
   1a076:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1a078:	f382 8811 	msr	BASEPRI, r2
   1a07c:	f3bf 8f6f 	isb	sy
}
   1a080:	4770      	bx	lr

0001a082 <async_start>:
{
   1a082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a084:	9f06      	ldr	r7, [sp, #24]
   1a086:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
   1a088:	68c4      	ldr	r4, [r0, #12]
	return &data->subsys[type];
   1a08a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1a08c:	f04f 0020 	mov.w	r0, #32
   1a090:	f3ef 8c11 	mrs	ip, BASEPRI
   1a094:	f380 8811 	msr	BASEPRI, r0
   1a098:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1a09c:	260c      	movs	r6, #12
   1a09e:	fb06 4601 	mla	r6, r6, r1, r4
   1a0a2:	f8d6 0088 	ldr.w	r0, [r6, #136]	; 0x88
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1a0a6:	f000 0e07 	and.w	lr, r0, #7
   1a0aa:	f1be 0f01 	cmp.w	lr, #1
   1a0ae:	d111      	bne.n	1a0d4 <async_start+0x52>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1a0b0:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
	int err = 0;
   1a0b4:	2600      	movs	r6, #0
	__asm__ volatile(
   1a0b6:	f38c 8811 	msr	BASEPRI, ip
   1a0ba:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1a0be:	b93e      	cbnz	r6, 1a0d0 <async_start+0x4e>
	subdata->cb = cb;
   1a0c0:	200c      	movs	r0, #12
   1a0c2:	4341      	muls	r1, r0
   1a0c4:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1a0c6:	e9c4 2320 	strd	r2, r3, [r4, #128]	; 0x80
	 get_sub_config(dev, type)->start();
   1a0ca:	686b      	ldr	r3, [r5, #4]
   1a0cc:	585b      	ldr	r3, [r3, r1]
   1a0ce:	4798      	blx	r3
}
   1a0d0:	4630      	mov	r0, r6
   1a0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1a0d4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1a0d8:	4287      	cmp	r7, r0
   1a0da:	bf14      	ite	ne
   1a0dc:	f04f 36ff 	movne.w	r6, #4294967295
   1a0e0:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   1a0e4:	e7e7      	b.n	1a0b6 <async_start+0x34>

0001a0e6 <api_start>:
{
   1a0e6:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1a0e8:	2480      	movs	r4, #128	; 0x80
   1a0ea:	9400      	str	r4, [sp, #0]
   1a0ec:	f7ff ffc9 	bl	1a082 <async_start>
}
   1a0f0:	b002      	add	sp, #8
   1a0f2:	bd10      	pop	{r4, pc}

0001a0f4 <onoff_started_callback>:
	return &data->mgr[type];
   1a0f4:	68c0      	ldr	r0, [r0, #12]
   1a0f6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1a0f8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   1a0fc:	2100      	movs	r1, #0
   1a0fe:	4710      	bx	r2

0001a100 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1a100:	2003      	movs	r0, #3
   1a102:	f7fb be85 	b.w	15e10 <nrfx_clock_start>

0001a106 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   1a106:	2002      	movs	r0, #2
   1a108:	f7fb be82 	b.w	15e10 <nrfx_clock_start>

0001a10c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1a10c:	2000      	movs	r0, #0
   1a10e:	f7fb be7f 	b.w	15e10 <nrfx_clock_start>

0001a112 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   1a112:	2003      	movs	r0, #3
   1a114:	f7fb bee6 	b.w	15ee4 <nrfx_clock_stop>

0001a118 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   1a118:	2002      	movs	r0, #2
   1a11a:	f7fb bee3 	b.w	15ee4 <nrfx_clock_stop>

0001a11e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1a11e:	2000      	movs	r0, #0
   1a120:	f7fb bee0 	b.w	15ee4 <nrfx_clock_stop>

0001a124 <api_stop>:
	return stop(dev, subsys, CTX_API);
   1a124:	2280      	movs	r2, #128	; 0x80
   1a126:	f7f1 b9c7 	b.w	b4b8 <stop>

0001a12a <blocking_start_callback>:
{
   1a12a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1a12c:	f7fe ba8a 	b.w	18644 <z_impl_k_sem_give>

0001a130 <bt_rpmsg_open>:
{
   1a130:	b508      	push	{r3, lr}
	while (!bt_rpmsg_platform_endpoint_is_bound()) {
   1a132:	f7f1 fcc1 	bl	bab8 <bt_rpmsg_platform_endpoint_is_bound>
   1a136:	b108      	cbz	r0, 1a13c <bt_rpmsg_open+0xc>
}
   1a138:	2000      	movs	r0, #0
   1a13a:	bd08      	pop	{r3, pc}
	return z_impl_k_sleep(timeout);
   1a13c:	2100      	movs	r1, #0
   1a13e:	2021      	movs	r0, #33	; 0x21
   1a140:	f7fe fa4a 	bl	185d8 <z_impl_k_sleep>
   1a144:	e7f5      	b.n	1a132 <bt_rpmsg_open+0x2>

0001a146 <endpoint_cb>:
{
   1a146:	b508      	push	{r3, lr}
   1a148:	4608      	mov	r0, r1
	bt_rpmsg_rx(data, len);
   1a14a:	4611      	mov	r1, r2
   1a14c:	f7f1 fbca 	bl	b8e4 <bt_rpmsg_rx>
}
   1a150:	2000      	movs	r0, #0
   1a152:	bd08      	pop	{r3, pc}

0001a154 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1a154:	4770      	bx	lr

0001a156 <attr_find_by_handle>:
{
   1a156:	b570      	push	{r4, r5, r6, lr}
   1a158:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   1a15a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1a15e:	b1a8      	cbz	r0, 1a18c <attr_find_by_handle+0x36>
	ssize_t lower = 0;
   1a160:	2600      	movs	r6, #0
	ssize_t upper = dm->cur_attr_id - 1;
   1a162:	3801      	subs	r0, #1
	while (upper >= lower) {
   1a164:	4286      	cmp	r6, r0
   1a166:	dd01      	ble.n	1a16c <attr_find_by_handle+0x16>
		return NULL;
   1a168:	2000      	movs	r0, #0
   1a16a:	e00f      	b.n	1a18c <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   1a16c:	1832      	adds	r2, r6, r0
   1a16e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1a172:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   1a174:	1cd5      	adds	r5, r2, #3
   1a176:	00eb      	lsls	r3, r5, #3
   1a178:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   1a17c:	892d      	ldrh	r5, [r5, #8]
   1a17e:	428d      	cmp	r5, r1
   1a180:	d201      	bcs.n	1a186 <attr_find_by_handle+0x30>
			lower = m + 1;
   1a182:	1c56      	adds	r6, r2, #1
   1a184:	e7ee      	b.n	1a164 <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   1a186:	d802      	bhi.n	1a18e <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   1a188:	3304      	adds	r3, #4
   1a18a:	18e0      	adds	r0, r4, r3
}
   1a18c:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   1a18e:	1e50      	subs	r0, r2, #1
   1a190:	e7e8      	b.n	1a164 <attr_find_by_handle+0xe>

0001a192 <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   1a192:	2300      	movs	r3, #0
{
   1a194:	b510      	push	{r4, lr}
   1a196:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   1a198:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
   1a19c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   1a1a0:	b910      	cbnz	r0, 1a1a8 <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   1a1a2:	f8c4 0144 	str.w	r0, [r4, #324]	; 0x144
}
   1a1a6:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a1a8:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
	return node->next;
   1a1ac:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a1ae:	4290      	cmp	r0, r2
	list->head = node;
   1a1b0:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	list->tail = node;
   1a1b4:	bf08      	it	eq
   1a1b6:	f8c4 3140 	streq.w	r3, [r4, #320]	; 0x140
		k_free(item);
   1a1ba:	f003 f908 	bl	1d3ce <k_free>
   1a1be:	e7ed      	b.n	1a19c <svc_attr_memory_release+0xa>

0001a1c0 <atomic_and>:
{
   1a1c0:	4603      	mov	r3, r0
}
   1a1c2:	e8d3 0fef 	ldaex	r0, [r3]
   1a1c6:	ea00 0201 	and.w	r2, r0, r1
   1a1ca:	e8c3 2fec 	stlex	ip, r2, [r3]
   1a1ce:	f1bc 0f00 	cmp.w	ip, #0
   1a1d2:	d1f6      	bne.n	1a1c2 <atomic_and+0x2>
   1a1d4:	4770      	bx	lr

0001a1d6 <discovery_complete_not_found>:
{
   1a1d6:	b510      	push	{r4, lr}
   1a1d8:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   1a1da:	f7ff ffda 	bl	1a192 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a1de:	f06f 0101 	mvn.w	r1, #1
   1a1e2:	f504 709c 	add.w	r0, r4, #312	; 0x138
   1a1e6:	f7ff ffeb 	bl	1a1c0 <atomic_and>
	if (dm->callback->service_not_found) {
   1a1ea:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1a1ee:	685b      	ldr	r3, [r3, #4]
   1a1f0:	b123      	cbz	r3, 1a1fc <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   1a1f2:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   1a1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   1a1fa:	4718      	bx	r3
}
   1a1fc:	bd10      	pop	{r4, pc}

0001a1fe <bt_gatt_dm_attr_service_val>:
{
   1a1fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1a200:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a204:	2400      	movs	r4, #0
{
   1a206:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1a208:	6801      	ldr	r1, [r0, #0]
   1a20a:	4668      	mov	r0, sp
   1a20c:	f88d 4000 	strb.w	r4, [sp]
   1a210:	f8ad 3002 	strh.w	r3, [sp, #2]
   1a214:	f000 fea0 	bl	1af58 <bt_uuid_cmp>
   1a218:	b918      	cbnz	r0, 1a222 <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   1a21a:	6828      	ldr	r0, [r5, #0]
   1a21c:	3808      	subs	r0, #8
}
   1a21e:	b003      	add	sp, #12
   1a220:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   1a222:	f642 0301 	movw	r3, #10241	; 0x2801
   1a226:	6829      	ldr	r1, [r5, #0]
   1a228:	a801      	add	r0, sp, #4
   1a22a:	f88d 4004 	strb.w	r4, [sp, #4]
   1a22e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a232:	f000 fe91 	bl	1af58 <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   1a236:	2800      	cmp	r0, #0
   1a238:	d0ef      	beq.n	1a21a <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   1a23a:	4620      	mov	r0, r4
   1a23c:	e7ef      	b.n	1a21e <bt_gatt_dm_attr_service_val+0x20>

0001a23e <bt_gatt_dm_attr_chrc_val>:
{
   1a23e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1a240:	f642 0303 	movw	r3, #10243	; 0x2803
   1a244:	2400      	movs	r4, #0
{
   1a246:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   1a248:	6801      	ldr	r1, [r0, #0]
   1a24a:	a801      	add	r0, sp, #4
   1a24c:	f88d 4004 	strb.w	r4, [sp, #4]
   1a250:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a254:	f000 fe80 	bl	1af58 <bt_uuid_cmp>
   1a258:	b918      	cbnz	r0, 1a262 <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   1a25a:	6828      	ldr	r0, [r5, #0]
   1a25c:	3808      	subs	r0, #8
}
   1a25e:	b003      	add	sp, #12
   1a260:	bd30      	pop	{r4, r5, pc}
	return NULL;
   1a262:	4620      	mov	r0, r4
   1a264:	e7fb      	b.n	1a25e <bt_gatt_dm_attr_chrc_val+0x20>

0001a266 <bt_gatt_dm_conn_get>:
}
   1a266:	6800      	ldr	r0, [r0, #0]
   1a268:	4770      	bx	lr

0001a26a <bt_gatt_dm_char_next>:
{
   1a26a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   1a26c:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   1a270:	b131      	cbz	r1, 1a280 <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   1a272:	42a9      	cmp	r1, r5
   1a274:	d203      	bcs.n	1a27e <bt_gatt_dm_char_next+0x14>
	return NULL;
   1a276:	2500      	movs	r5, #0
}
   1a278:	4628      	mov	r0, r5
   1a27a:	b003      	add	sp, #12
   1a27c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a27e:	460d      	mov	r5, r1
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1a280:	2600      	movs	r6, #0
   1a282:	f642 0703 	movw	r7, #10243	; 0x2803
		const struct bt_gatt_dm_attr *const end =
   1a286:	f8d0 4134 	ldr.w	r4, [r0, #308]	; 0x134
   1a28a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   1a28e:	f100 041c 	add.w	r4, r0, #28
		while (++prev < end) {
   1a292:	3508      	adds	r5, #8
   1a294:	42ac      	cmp	r4, r5
   1a296:	d9ee      	bls.n	1a276 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   1a298:	6829      	ldr	r1, [r5, #0]
   1a29a:	a801      	add	r0, sp, #4
   1a29c:	f88d 6004 	strb.w	r6, [sp, #4]
   1a2a0:	f8ad 7006 	strh.w	r7, [sp, #6]
   1a2a4:	f000 fe58 	bl	1af58 <bt_uuid_cmp>
   1a2a8:	2800      	cmp	r0, #0
   1a2aa:	d1f2      	bne.n	1a292 <bt_gatt_dm_char_next+0x28>
   1a2ac:	e7e4      	b.n	1a278 <bt_gatt_dm_char_next+0xe>

0001a2ae <bt_gatt_dm_attr_next>:
{
   1a2ae:	4602      	mov	r2, r0
		prev = dm->attrs;
   1a2b0:	f100 031c 	add.w	r3, r0, #28
	if (!prev) {
   1a2b4:	b111      	cbz	r1, 1a2bc <bt_gatt_dm_attr_next+0xe>
	if (dm->attrs <= prev) {
   1a2b6:	4299      	cmp	r1, r3
   1a2b8:	d30b      	bcc.n	1a2d2 <bt_gatt_dm_attr_next+0x24>
   1a2ba:	460b      	mov	r3, r1
		if (++prev < end) {
   1a2bc:	f103 0008 	add.w	r0, r3, #8
		const struct bt_gatt_dm_attr *const end =
   1a2c0:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
   1a2c4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1a2c8:	321c      	adds	r2, #28
	return NULL;
   1a2ca:	4290      	cmp	r0, r2
   1a2cc:	bf28      	it	cs
   1a2ce:	2000      	movcs	r0, #0
   1a2d0:	4770      	bx	lr
   1a2d2:	2000      	movs	r0, #0
}
   1a2d4:	4770      	bx	lr

0001a2d6 <bt_gatt_dm_desc_next>:
{
   1a2d6:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   1a2d8:	f7ff ffe9 	bl	1a2ae <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   1a2dc:	4604      	mov	r4, r0
   1a2de:	b158      	cbz	r0, 1a2f8 <bt_gatt_dm_desc_next+0x22>
   1a2e0:	2300      	movs	r3, #0
   1a2e2:	f88d 3004 	strb.w	r3, [sp, #4]
   1a2e6:	f642 0303 	movw	r3, #10243	; 0x2803
   1a2ea:	6801      	ldr	r1, [r0, #0]
   1a2ec:	a801      	add	r0, sp, #4
   1a2ee:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a2f2:	f000 fe31 	bl	1af58 <bt_uuid_cmp>
   1a2f6:	b900      	cbnz	r0, 1a2fa <bt_gatt_dm_desc_next+0x24>
		curr = NULL;
   1a2f8:	2400      	movs	r4, #0
}
   1a2fa:	4620      	mov	r0, r4
   1a2fc:	b002      	add	sp, #8
   1a2fe:	bd10      	pop	{r4, pc}

0001a300 <bt_gatt_dm_desc_by_uuid>:
{
   1a300:	b570      	push	{r4, r5, r6, lr}
   1a302:	4605      	mov	r5, r0
   1a304:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   1a306:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   1a308:	4621      	mov	r1, r4
   1a30a:	4628      	mov	r0, r5
   1a30c:	f7ff ffe3 	bl	1a2d6 <bt_gatt_dm_desc_next>
   1a310:	4604      	mov	r4, r0
   1a312:	b128      	cbz	r0, 1a320 <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   1a314:	4630      	mov	r0, r6
   1a316:	6821      	ldr	r1, [r4, #0]
   1a318:	f000 fe1e 	bl	1af58 <bt_uuid_cmp>
   1a31c:	2800      	cmp	r0, #0
   1a31e:	d1f3      	bne.n	1a308 <bt_gatt_dm_desc_by_uuid+0x8>
}
   1a320:	4620      	mov	r0, r4
   1a322:	bd70      	pop	{r4, r5, r6, pc}

0001a324 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   1a324:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1a326:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   1a32a:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a32c:	f06f 0102 	mvn.w	r1, #2
   1a330:	4628      	mov	r0, r5
   1a332:	f7ff ff45 	bl	1a1c0 <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   1a336:	0783      	lsls	r3, r0, #30
   1a338:	d509      	bpl.n	1a34e <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   1a33a:	4620      	mov	r0, r4
   1a33c:	f7ff ff29 	bl	1a192 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a340:	f06f 0101 	mvn.w	r1, #1
   1a344:	4628      	mov	r0, r5
   1a346:	f7ff ff3b 	bl	1a1c0 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   1a34a:	2000      	movs	r0, #0
}
   1a34c:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   1a34e:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1a352:	e7fb      	b.n	1a34c <bt_gatt_dm_data_release+0x28>

0001a354 <bt_scan_stop>:
	return bt_le_scan_stop();
   1a354:	f7f5 bf2a 	b.w	101ac <bt_le_scan_stop>

0001a358 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   1a358:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   1a35a:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   1a35c:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   1a35e:	bf9c      	itt	ls
   1a360:	6880      	ldrls	r0, [r0, #8]
   1a362:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   1a364:	3b01      	subs	r3, #1
   1a366:	1a98      	subs	r0, r3, r2
}
   1a368:	4770      	bx	lr

0001a36a <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1a36a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   1a36e:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1a372:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   1a374:	eba9 0804 	sub.w	r8, r9, r4
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a378:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   1a37a:	4590      	cmp	r8, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
   1a37c:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   1a37e:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   1a380:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   1a382:	d904      	bls.n	1a38e <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1a384:	f000 fd73 	bl	1ae6e <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   1a388:	60ec      	str	r4, [r5, #12]
}
   1a38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a38e:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   1a390:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytesAtOnce);
   1a394:	f000 fd6b 	bl	1ae6e <memcpy>
    SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytesAtOnce);
   1a398:	4622      	mov	r2, r4
   1a39a:	6868      	ldr	r0, [r5, #4]
   1a39c:	eb07 0108 	add.w	r1, r7, r8
   1a3a0:	e7f0      	b.n	1a384 <_WriteNoCheck+0x1a>

0001a3a2 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   1a3a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a3a6:	4606      	mov	r6, r0
   1a3a8:	4689      	mov	r9, r1
   1a3aa:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   1a3ac:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   1a3b0:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   1a3b2:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1a3b4:	68b3      	ldr	r3, [r6, #8]
    if (RdOff > WrOff) {
   1a3b6:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   1a3b8:	bf28      	it	cs
   1a3ba:	18e4      	addcs	r4, r4, r3
   1a3bc:	3c01      	subs	r4, #1
   1a3be:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   1a3c0:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   1a3c2:	42bc      	cmp	r4, r7
   1a3c4:	bf28      	it	cs
   1a3c6:	463c      	movcs	r4, r7
   1a3c8:	4294      	cmp	r4, r2
   1a3ca:	bf28      	it	cs
   1a3cc:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   1a3ce:	6870      	ldr	r0, [r6, #4]
   1a3d0:	4649      	mov	r1, r9
   1a3d2:	4428      	add	r0, r5
   1a3d4:	4622      	mov	r2, r4
   1a3d6:	f000 fd4a 	bl	1ae6e <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   1a3da:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   1a3dc:	4425      	add	r5, r4
      WrOff = 0u;
   1a3de:	42ab      	cmp	r3, r5
   1a3e0:	bf08      	it	eq
   1a3e2:	2500      	moveq	r5, #0
  } while (NumBytes);
   1a3e4:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   1a3e6:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   1a3e8:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   1a3ea:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   1a3ec:	d1e1      	bne.n	1a3b2 <_WriteBlocking+0x10>
}
   1a3ee:	4640      	mov	r0, r8
   1a3f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001a3f4 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1a3f4:	f7f2 ba98 	b.w	c928 <_DoInit>

0001a3f8 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1a3f8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1a3fa:	f7ff fffb 	bl	1a3f4 <SEGGER_RTT_Init>

	return 0;
}
   1a3fe:	2000      	movs	r0, #0
   1a400:	bd08      	pop	{r3, pc}

0001a402 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1a402:	b538      	push	{r3, r4, r5, lr}
   1a404:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1a406:	42ab      	cmp	r3, r5
{
   1a408:	4611      	mov	r1, r2
   1a40a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1a40c:	d804      	bhi.n	1a418 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1a40e:	461a      	mov	r2, r3
   1a410:	f000 fd2d 	bl	1ae6e <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1a414:	4620      	mov	r0, r4
   1a416:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1a418:	2400      	movs	r4, #0
   1a41a:	e7fb      	b.n	1a414 <_copy+0x12>

0001a41c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1a41c:	f000 bd52 	b.w	1aec4 <memset>

0001a420 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1a420:	09c3      	lsrs	r3, r0, #7
   1a422:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a426:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1a42a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1a42e:	b2c0      	uxtb	r0, r0
   1a430:	4770      	bx	lr

0001a432 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1a432:	78cb      	ldrb	r3, [r1, #3]
   1a434:	7802      	ldrb	r2, [r0, #0]
   1a436:	4053      	eors	r3, r2
   1a438:	7003      	strb	r3, [r0, #0]
   1a43a:	884b      	ldrh	r3, [r1, #2]
   1a43c:	7842      	ldrb	r2, [r0, #1]
   1a43e:	4053      	eors	r3, r2
   1a440:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1a442:	680a      	ldr	r2, [r1, #0]
   1a444:	7883      	ldrb	r3, [r0, #2]
   1a446:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a44a:	7083      	strb	r3, [r0, #2]
   1a44c:	680a      	ldr	r2, [r1, #0]
   1a44e:	78c3      	ldrb	r3, [r0, #3]
   1a450:	4053      	eors	r3, r2
   1a452:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1a454:	79cb      	ldrb	r3, [r1, #7]
   1a456:	7902      	ldrb	r2, [r0, #4]
   1a458:	4053      	eors	r3, r2
   1a45a:	7103      	strb	r3, [r0, #4]
   1a45c:	88cb      	ldrh	r3, [r1, #6]
   1a45e:	7942      	ldrb	r2, [r0, #5]
   1a460:	4053      	eors	r3, r2
   1a462:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1a464:	684a      	ldr	r2, [r1, #4]
   1a466:	7983      	ldrb	r3, [r0, #6]
   1a468:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a46c:	7183      	strb	r3, [r0, #6]
   1a46e:	684a      	ldr	r2, [r1, #4]
   1a470:	79c3      	ldrb	r3, [r0, #7]
   1a472:	4053      	eors	r3, r2
   1a474:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1a476:	7acb      	ldrb	r3, [r1, #11]
   1a478:	7a02      	ldrb	r2, [r0, #8]
   1a47a:	4053      	eors	r3, r2
   1a47c:	7203      	strb	r3, [r0, #8]
   1a47e:	7a42      	ldrb	r2, [r0, #9]
   1a480:	894b      	ldrh	r3, [r1, #10]
   1a482:	4053      	eors	r3, r2
   1a484:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1a486:	688a      	ldr	r2, [r1, #8]
   1a488:	7a83      	ldrb	r3, [r0, #10]
   1a48a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a48e:	7283      	strb	r3, [r0, #10]
   1a490:	688a      	ldr	r2, [r1, #8]
   1a492:	7ac3      	ldrb	r3, [r0, #11]
   1a494:	4053      	eors	r3, r2
   1a496:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1a498:	7bcb      	ldrb	r3, [r1, #15]
   1a49a:	7b02      	ldrb	r2, [r0, #12]
   1a49c:	4053      	eors	r3, r2
   1a49e:	7303      	strb	r3, [r0, #12]
   1a4a0:	89cb      	ldrh	r3, [r1, #14]
   1a4a2:	7b42      	ldrb	r2, [r0, #13]
   1a4a4:	4053      	eors	r3, r2
   1a4a6:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1a4a8:	68ca      	ldr	r2, [r1, #12]
   1a4aa:	7b83      	ldrb	r3, [r0, #14]
   1a4ac:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1a4b0:	7383      	strb	r3, [r0, #14]
   1a4b2:	68ca      	ldr	r2, [r1, #12]
   1a4b4:	7bc3      	ldrb	r3, [r0, #15]
   1a4b6:	4053      	eors	r3, r2
   1a4b8:	73c3      	strb	r3, [r0, #15]
}
   1a4ba:	4770      	bx	lr

0001a4bc <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1a4bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1a4be:	7802      	ldrb	r2, [r0, #0]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1a4c0:	7ac3      	ldrb	r3, [r0, #11]
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1a4c2:	f88d 2000 	strb.w	r2, [sp]
   1a4c6:	7942      	ldrb	r2, [r0, #5]
   1a4c8:	f88d 2001 	strb.w	r2, [sp, #1]
   1a4cc:	7a82      	ldrb	r2, [r0, #10]
   1a4ce:	f88d 2002 	strb.w	r2, [sp, #2]
   1a4d2:	7bc2      	ldrb	r2, [r0, #15]
   1a4d4:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1a4d8:	7902      	ldrb	r2, [r0, #4]
   1a4da:	f88d 2004 	strb.w	r2, [sp, #4]
   1a4de:	7a42      	ldrb	r2, [r0, #9]
   1a4e0:	f88d 2005 	strb.w	r2, [sp, #5]
   1a4e4:	7b82      	ldrb	r2, [r0, #14]
   1a4e6:	f88d 2006 	strb.w	r2, [sp, #6]
   1a4ea:	78c2      	ldrb	r2, [r0, #3]
   1a4ec:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1a4f0:	7a02      	ldrb	r2, [r0, #8]
   1a4f2:	f88d 2008 	strb.w	r2, [sp, #8]
   1a4f6:	7b42      	ldrb	r2, [r0, #13]
   1a4f8:	f88d 2009 	strb.w	r2, [sp, #9]
   1a4fc:	7882      	ldrb	r2, [r0, #2]
   1a4fe:	f88d 200a 	strb.w	r2, [sp, #10]
   1a502:	79c2      	ldrb	r2, [r0, #7]
   1a504:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1a508:	7b02      	ldrb	r2, [r0, #12]
   1a50a:	f88d 200c 	strb.w	r2, [sp, #12]
   1a50e:	7842      	ldrb	r2, [r0, #1]
   1a510:	f88d 200d 	strb.w	r2, [sp, #13]
   1a514:	7982      	ldrb	r2, [r0, #6]
   1a516:	f88d 200e 	strb.w	r2, [sp, #14]
   1a51a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1a51e:	2310      	movs	r3, #16
   1a520:	466a      	mov	r2, sp
   1a522:	4619      	mov	r1, r3
   1a524:	f7ff ff6d 	bl	1a402 <_copy>
}
   1a528:	b005      	add	sp, #20
   1a52a:	f85d fb04 	ldr.w	pc, [sp], #4

0001a52e <mult_row_column>:
{
   1a52e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a530:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1a532:	7808      	ldrb	r0, [r1, #0]
{
   1a534:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1a536:	f7ff ff73 	bl	1a420 <_double_byte>
   1a53a:	4605      	mov	r5, r0
   1a53c:	7860      	ldrb	r0, [r4, #1]
   1a53e:	f7ff ff6f 	bl	1a420 <_double_byte>
   1a542:	78a2      	ldrb	r2, [r4, #2]
   1a544:	7863      	ldrb	r3, [r4, #1]
   1a546:	4053      	eors	r3, r2
   1a548:	78e2      	ldrb	r2, [r4, #3]
   1a54a:	4053      	eors	r3, r2
   1a54c:	405d      	eors	r5, r3
   1a54e:	4045      	eors	r5, r0
   1a550:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1a552:	7860      	ldrb	r0, [r4, #1]
   1a554:	7827      	ldrb	r7, [r4, #0]
   1a556:	f7ff ff63 	bl	1a420 <_double_byte>
   1a55a:	4605      	mov	r5, r0
   1a55c:	78a0      	ldrb	r0, [r4, #2]
   1a55e:	f7ff ff5f 	bl	1a420 <_double_byte>
   1a562:	78a3      	ldrb	r3, [r4, #2]
   1a564:	405f      	eors	r7, r3
   1a566:	78e3      	ldrb	r3, [r4, #3]
   1a568:	405f      	eors	r7, r3
   1a56a:	407d      	eors	r5, r7
   1a56c:	4045      	eors	r5, r0
   1a56e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1a570:	78a0      	ldrb	r0, [r4, #2]
   1a572:	7865      	ldrb	r5, [r4, #1]
   1a574:	7827      	ldrb	r7, [r4, #0]
   1a576:	f7ff ff53 	bl	1a420 <_double_byte>
   1a57a:	406f      	eors	r7, r5
   1a57c:	4605      	mov	r5, r0
   1a57e:	78e0      	ldrb	r0, [r4, #3]
   1a580:	f7ff ff4e 	bl	1a420 <_double_byte>
   1a584:	78e3      	ldrb	r3, [r4, #3]
   1a586:	405f      	eors	r7, r3
   1a588:	407d      	eors	r5, r7
   1a58a:	4045      	eors	r5, r0
   1a58c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1a58e:	7820      	ldrb	r0, [r4, #0]
   1a590:	f7ff ff46 	bl	1a420 <_double_byte>
   1a594:	7863      	ldrb	r3, [r4, #1]
   1a596:	7825      	ldrb	r5, [r4, #0]
   1a598:	405d      	eors	r5, r3
   1a59a:	78a3      	ldrb	r3, [r4, #2]
   1a59c:	405d      	eors	r5, r3
   1a59e:	4045      	eors	r5, r0
   1a5a0:	78e0      	ldrb	r0, [r4, #3]
   1a5a2:	f7ff ff3d 	bl	1a420 <_double_byte>
   1a5a6:	b2ed      	uxtb	r5, r5
   1a5a8:	4045      	eors	r5, r0
   1a5aa:	70f5      	strb	r5, [r6, #3]
}
   1a5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a5ae <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1a5ae:	b570      	push	{r4, r5, r6, lr}
   1a5b0:	4614      	mov	r4, r2
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1a5b2:	4605      	mov	r5, r0
{
   1a5b4:	b088      	sub	sp, #32
	if (out == (uint8_t *) 0) {
   1a5b6:	2800      	cmp	r0, #0
   1a5b8:	d049      	beq.n	1a64e <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1a5ba:	2900      	cmp	r1, #0
   1a5bc:	d049      	beq.n	1a652 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1a5be:	2a00      	cmp	r2, #0
   1a5c0:	d049      	beq.n	1a656 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1a5c2:	2310      	movs	r3, #16
   1a5c4:	460a      	mov	r2, r1
   1a5c6:	4668      	mov	r0, sp
   1a5c8:	4619      	mov	r1, r3
   1a5ca:	f7ff ff1a 	bl	1a402 <_copy>
	add_round_key(state, s->words);
   1a5ce:	4621      	mov	r1, r4
   1a5d0:	4668      	mov	r0, sp
   1a5d2:	f7ff ff2e 	bl	1a432 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1a5d6:	3410      	adds	r4, #16
   1a5d8:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1a5dc:	4668      	mov	r0, sp
   1a5de:	f7f2 fa03 	bl	c9e8 <sub_bytes>
		shift_rows(state);
   1a5e2:	4668      	mov	r0, sp
   1a5e4:	f7ff ff6a 	bl	1a4bc <shift_rows>
	mult_row_column(t, s);
   1a5e8:	4669      	mov	r1, sp
   1a5ea:	a804      	add	r0, sp, #16
   1a5ec:	f7ff ff9f 	bl	1a52e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1a5f0:	a901      	add	r1, sp, #4
   1a5f2:	a805      	add	r0, sp, #20
   1a5f4:	f7ff ff9b 	bl	1a52e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1a5f8:	a902      	add	r1, sp, #8
   1a5fa:	a806      	add	r0, sp, #24
   1a5fc:	f7ff ff97 	bl	1a52e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1a600:	a903      	add	r1, sp, #12
   1a602:	a807      	add	r0, sp, #28
   1a604:	f7ff ff93 	bl	1a52e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1a608:	2310      	movs	r3, #16
   1a60a:	4668      	mov	r0, sp
   1a60c:	4619      	mov	r1, r3
   1a60e:	eb0d 0203 	add.w	r2, sp, r3
   1a612:	f7ff fef6 	bl	1a402 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1a616:	4621      	mov	r1, r4
   1a618:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1a61a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1a61c:	f7ff ff09 	bl	1a432 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1a620:	42a6      	cmp	r6, r4
   1a622:	d1db      	bne.n	1a5dc <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1a624:	f7f2 f9e0 	bl	c9e8 <sub_bytes>
	shift_rows(state);
   1a628:	4668      	mov	r0, sp
   1a62a:	f7ff ff47 	bl	1a4bc <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1a62e:	4631      	mov	r1, r6
   1a630:	4668      	mov	r0, sp
   1a632:	f7ff fefe 	bl	1a432 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1a636:	2310      	movs	r3, #16
   1a638:	466a      	mov	r2, sp
   1a63a:	4619      	mov	r1, r3
   1a63c:	4628      	mov	r0, r5
   1a63e:	f7ff fee0 	bl	1a402 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1a642:	4668      	mov	r0, sp
   1a644:	2210      	movs	r2, #16
   1a646:	2100      	movs	r1, #0
   1a648:	f7ff fee8 	bl	1a41c <_set>

	return TC_CRYPTO_SUCCESS;
   1a64c:	2001      	movs	r0, #1
}
   1a64e:	b008      	add	sp, #32
   1a650:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1a652:	4608      	mov	r0, r1
   1a654:	e7fb      	b.n	1a64e <tc_aes_encrypt+0xa0>
   1a656:	4610      	mov	r0, r2
   1a658:	e7f9      	b.n	1a64e <tc_aes_encrypt+0xa0>

0001a65a <gf_double>:

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a65a:	460a      	mov	r2, r1
{
   1a65c:	b510      	push	{r4, lr}
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a65e:	f912 3b10 	ldrsb.w	r3, [r2], #16

	out += (TC_AES_BLOCK_SIZE - 1);
   1a662:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1a664:	2b00      	cmp	r3, #0
   1a666:	bfb4      	ite	lt
   1a668:	2387      	movlt	r3, #135	; 0x87
   1a66a:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1a66c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1a670:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1a674:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1a676:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1a67a:	d002      	beq.n	1a682 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1a67c:	7813      	ldrb	r3, [r2, #0]
   1a67e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1a680:	e7f4      	b.n	1a66c <gf_double+0x12>
	}
}
   1a682:	bd10      	pop	{r4, pc}

0001a684 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1a684:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1a686:	b120      	cbz	r0, 1a692 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1a688:	2258      	movs	r2, #88	; 0x58
   1a68a:	2100      	movs	r1, #0
   1a68c:	f7ff fec6 	bl	1a41c <_set>
   1a690:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1a692:	bd08      	pop	{r3, pc}

0001a694 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1a694:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1a696:	4604      	mov	r4, r0
   1a698:	b188      	cbz	r0, 1a6be <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1a69a:	2210      	movs	r2, #16
   1a69c:	2100      	movs	r1, #0
   1a69e:	f7ff febd 	bl	1a41c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1a6a2:	2210      	movs	r2, #16
   1a6a4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a6a8:	2100      	movs	r1, #0
   1a6aa:	f7ff feb7 	bl	1a41c <_set>
	s->leftover_offset = 0;
   1a6ae:	2300      	movs	r3, #0

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1a6b0:	2200      	movs	r2, #0
	s->leftover_offset = 0;
   1a6b2:	6463      	str	r3, [r4, #68]	; 0x44
	s->countdown = MAX_CALLS;
   1a6b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1a6b8:	2001      	movs	r0, #1
   1a6ba:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
}
   1a6be:	bd10      	pop	{r4, pc}

0001a6c0 <tc_cmac_setup>:
{
   1a6c0:	b570      	push	{r4, r5, r6, lr}
   1a6c2:	460d      	mov	r5, r1
   1a6c4:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1a6c6:	4604      	mov	r4, r0
   1a6c8:	b310      	cbz	r0, 1a710 <tc_cmac_setup+0x50>
   1a6ca:	b311      	cbz	r1, 1a712 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1a6cc:	2258      	movs	r2, #88	; 0x58
   1a6ce:	2100      	movs	r1, #0
   1a6d0:	f7ff fea4 	bl	1a41c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1a6d4:	4629      	mov	r1, r5
   1a6d6:	4630      	mov	r0, r6
	s->sched = sched;
   1a6d8:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1a6da:	f7f2 f991 	bl	ca00 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1a6de:	2210      	movs	r2, #16
   1a6e0:	2100      	movs	r1, #0
   1a6e2:	4620      	mov	r0, r4
   1a6e4:	f7ff fe9a 	bl	1a41c <_set>
	gf_double (s->K1, s->iv);
   1a6e8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a6ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a6ee:	4621      	mov	r1, r4
   1a6f0:	4620      	mov	r0, r4
   1a6f2:	f7ff ff5c 	bl	1a5ae <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1a6f6:	4621      	mov	r1, r4
   1a6f8:	4628      	mov	r0, r5
   1a6fa:	f7ff ffae 	bl	1a65a <gf_double>
	gf_double (s->K2, s->K1);
   1a6fe:	4629      	mov	r1, r5
   1a700:	f104 0020 	add.w	r0, r4, #32
   1a704:	f7ff ffa9 	bl	1a65a <gf_double>
	tc_cmac_init(s);
   1a708:	4620      	mov	r0, r4
   1a70a:	f7ff ffc3 	bl	1a694 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1a70e:	2001      	movs	r0, #1
}
   1a710:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1a712:	4608      	mov	r0, r1
   1a714:	e7fc      	b.n	1a710 <tc_cmac_setup+0x50>

0001a716 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1a716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a71a:	460d      	mov	r5, r1
   1a71c:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1a71e:	4604      	mov	r4, r0
   1a720:	2800      	cmp	r0, #0
   1a722:	d061      	beq.n	1a7e8 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1a724:	b912      	cbnz	r2, 1a72c <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1a726:	2001      	movs	r0, #1
}
   1a728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1a72c:	2900      	cmp	r1, #0
   1a72e:	d05b      	beq.n	1a7e8 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1a730:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1a734:	ea53 0102 	orrs.w	r1, r3, r2
   1a738:	d056      	beq.n	1a7e8 <tc_cmac_update+0xd2>
	s->countdown--;
   1a73a:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1a73c:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1a740:	f142 32ff 	adc.w	r2, r2, #4294967295
   1a744:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1a748:	f1b8 0f00 	cmp.w	r8, #0
   1a74c:	d02a      	beq.n	1a7a4 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1a74e:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a752:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1a756:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a758:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1a75a:	d208      	bcs.n	1a76e <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1a75c:	462a      	mov	r2, r5
   1a75e:	4633      	mov	r3, r6
   1a760:	4631      	mov	r1, r6
   1a762:	f7ff fe4e 	bl	1a402 <_copy>
			s->leftover_offset += data_length;
   1a766:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a768:	4432      	add	r2, r6
   1a76a:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1a76c:	e7db      	b.n	1a726 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1a76e:	463b      	mov	r3, r7
   1a770:	462a      	mov	r2, r5
   1a772:	4639      	mov	r1, r7
   1a774:	f7ff fe45 	bl	1a402 <_copy>
		s->leftover_offset = 0;
   1a778:	2300      	movs	r3, #0
   1a77a:	3e10      	subs	r6, #16
   1a77c:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1a77e:	4446      	add	r6, r8
		data += remaining_space;
   1a780:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a782:	1e63      	subs	r3, r4, #1
   1a784:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1a788:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a78c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a790:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1a792:	ea82 0200 	eor.w	r2, r2, r0
   1a796:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a798:	d1f6      	bne.n	1a788 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a79a:	4621      	mov	r1, r4
   1a79c:	4620      	mov	r0, r4
   1a79e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a7a0:	f7ff ff05 	bl	1a5ae <tc_aes_encrypt>
   1a7a4:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1a7a8:	2e10      	cmp	r6, #16
   1a7aa:	d80a      	bhi.n	1a7c2 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1a7ac:	2e00      	cmp	r6, #0
   1a7ae:	d0ba      	beq.n	1a726 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1a7b0:	4633      	mov	r3, r6
   1a7b2:	462a      	mov	r2, r5
   1a7b4:	4631      	mov	r1, r6
   1a7b6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a7ba:	f7ff fe22 	bl	1a402 <_copy>
		s->leftover_offset = data_length;
   1a7be:	6466      	str	r6, [r4, #68]	; 0x44
   1a7c0:	e7b1      	b.n	1a726 <tc_cmac_update+0x10>
   1a7c2:	1e63      	subs	r3, r4, #1
   1a7c4:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1a7c6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a7ca:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a7ce:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1a7d0:	ea82 0200 	eor.w	r2, r2, r0
   1a7d4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a7d6:	d1f6      	bne.n	1a7c6 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1a7d8:	4621      	mov	r1, r4
   1a7da:	4620      	mov	r0, r4
   1a7dc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a7de:	f7ff fee6 	bl	1a5ae <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1a7e2:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1a7e4:	3e10      	subs	r6, #16
   1a7e6:	e7df      	b.n	1a7a8 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1a7e8:	2000      	movs	r0, #0
   1a7ea:	e79d      	b.n	1a728 <tc_cmac_update+0x12>

0001a7ec <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1a7ec:	b570      	push	{r4, r5, r6, lr}
   1a7ee:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1a7f0:	4605      	mov	r5, r0
   1a7f2:	b1f0      	cbz	r0, 1a832 <tc_cmac_final+0x46>
   1a7f4:	b371      	cbz	r1, 1a854 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1a7f6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1a7f8:	2a10      	cmp	r2, #16
   1a7fa:	d11b      	bne.n	1a834 <tc_cmac_final+0x48>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1a7fc:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a7fe:	1e63      	subs	r3, r4, #1
   1a800:	3901      	subs	r1, #1
   1a802:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1a806:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1a80a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a80e:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1a810:	ea82 0206 	eor.w	r2, r2, r6
   1a814:	f811 6f01 	ldrb.w	r6, [r1, #1]!
   1a818:	ea82 0206 	eor.w	r2, r2, r6
   1a81c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1a81e:	d1f2      	bne.n	1a806 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1a820:	4621      	mov	r1, r4
   1a822:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1a824:	4628      	mov	r0, r5
   1a826:	f7ff fec2 	bl	1a5ae <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1a82a:	4620      	mov	r0, r4
   1a82c:	f7ff ff2a 	bl	1a684 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1a830:	2001      	movs	r0, #1
}
   1a832:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1a834:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1a838:	2100      	movs	r1, #0
   1a83a:	f1c2 0210 	rsb	r2, r2, #16
   1a83e:	4420      	add	r0, r4
   1a840:	f7ff fdec 	bl	1a41c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1a844:	2280      	movs	r2, #128	; 0x80
   1a846:	6c63      	ldr	r3, [r4, #68]	; 0x44
		k = (uint8_t *) s->K2;
   1a848:	f104 0120 	add.w	r1, r4, #32
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1a84c:	4423      	add	r3, r4
   1a84e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1a852:	e7d4      	b.n	1a7fe <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1a854:	4608      	mov	r0, r1
   1a856:	e7ec      	b.n	1a832 <tc_cmac_final+0x46>

0001a858 <tc_sha256_update>:
{
   1a858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a85a:	460c      	mov	r4, r1
	if (s == (TCSha256State_t) 0 ||
   1a85c:	b110      	cbz	r0, 1a864 <tc_sha256_update+0xc>
   1a85e:	b1f9      	cbz	r1, 1a8a0 <tc_sha256_update+0x48>
	} else if (datalen == 0) {
   1a860:	b90a      	cbnz	r2, 1a866 <tc_sha256_update+0xe>
		return TC_CRYPTO_SUCCESS;
   1a862:	2001      	movs	r0, #1
}
   1a864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->leftover_offset = 0;
   1a866:	2600      	movs	r6, #0
   1a868:	188d      	adds	r5, r1, r2
			compress(s->iv, s->leftover);
   1a86a:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   1a86e:	42a5      	cmp	r5, r4
   1a870:	d0f7      	beq.n	1a862 <tc_sha256_update+0xa>
		s->leftover[s->leftover_offset++] = *(data++);
   1a872:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1a874:	1c5a      	adds	r2, r3, #1
   1a876:	6682      	str	r2, [r0, #104]	; 0x68
   1a878:	f814 1b01 	ldrb.w	r1, [r4], #1
   1a87c:	4403      	add	r3, r0
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1a87e:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   1a880:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   1a884:	d9f3      	bls.n	1a86e <tc_sha256_update+0x16>
			compress(s->iv, s->leftover);
   1a886:	4639      	mov	r1, r7
   1a888:	f7f2 f90e 	bl	caa8 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1a88c:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
   1a890:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   1a894:	f142 0200 	adc.w	r2, r2, #0
   1a898:	e9c0 3208 	strd	r3, r2, [r0, #32]
			s->leftover_offset = 0;
   1a89c:	6686      	str	r6, [r0, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   1a89e:	e7e6      	b.n	1a86e <tc_sha256_update+0x16>
		return TC_CRYPTO_FAIL;
   1a8a0:	4608      	mov	r0, r1
   1a8a2:	e7df      	b.n	1a864 <tc_sha256_update+0xc>

0001a8a4 <tc_sha256_final>:
{
   1a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a8a6:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   1a8a8:	4605      	mov	r5, r0
   1a8aa:	2800      	cmp	r0, #0
   1a8ac:	d055      	beq.n	1a95a <tc_sha256_final+0xb6>
   1a8ae:	2900      	cmp	r1, #0
   1a8b0:	d054      	beq.n	1a95c <tc_sha256_final+0xb8>
	s->bits_hashed += (s->leftover_offset << 3);
   1a8b2:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   1a8b4:	e9d1 2108 	ldrd	r2, r1, [r1, #32]
   1a8b8:	00d8      	lsls	r0, r3, #3
   1a8ba:	1812      	adds	r2, r2, r0
   1a8bc:	f141 0100 	adc.w	r1, r1, #0
   1a8c0:	e9c4 2108 	strd	r2, r1, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1a8c4:	2280      	movs	r2, #128	; 0x80
   1a8c6:	1c58      	adds	r0, r3, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1a8c8:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1a8ca:	4423      	add	r3, r4
   1a8cc:	66a0      	str	r0, [r4, #104]	; 0x68
	s->bits_hashed += (s->leftover_offset << 3);
   1a8ce:	f04f 0700 	mov.w	r7, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   1a8d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		_set(s->leftover + s->leftover_offset, 0x00,
   1a8d6:	f104 0628 	add.w	r6, r4, #40	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   1a8da:	d90a      	bls.n	1a8f2 <tc_sha256_final+0x4e>
		_set(s->leftover + s->leftover_offset, 0x00,
   1a8dc:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   1a8e0:	4639      	mov	r1, r7
   1a8e2:	4430      	add	r0, r6
   1a8e4:	f7ff fd9a 	bl	1a41c <_set>
		compress(s->iv, s->leftover);
   1a8e8:	4631      	mov	r1, r6
   1a8ea:	4620      	mov	r0, r4
   1a8ec:	f7f2 f8dc 	bl	caa8 <compress>
		s->leftover_offset = 0;
   1a8f0:	66a7      	str	r7, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   1a8f2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1a8f4:	2100      	movs	r1, #0
   1a8f6:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   1a8fa:	4430      	add	r0, r6
   1a8fc:	f7ff fd8e 	bl	1a41c <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1a900:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   1a902:	4631      	mov	r1, r6
   1a904:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   1a906:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   1a908:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1a90a:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   1a90c:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   1a910:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1a914:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1a916:	0e1b      	lsrs	r3, r3, #24
	compress(s->iv, s->leftover);
   1a918:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   1a91a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   1a91e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   1a922:	f7f2 f8c1 	bl	caa8 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1a926:	1f26      	subs	r6, r4, #4
   1a928:	1d2b      	adds	r3, r5, #4
   1a92a:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   1a92e:	f856 2f04 	ldr.w	r2, [r6, #4]!
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1a932:	3304      	adds	r3, #4
		*digest++ = (uint8_t)(t >> 24);
   1a934:	0e11      	lsrs	r1, r2, #24
   1a936:	f803 1c08 	strb.w	r1, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   1a93a:	0c11      	lsrs	r1, r2, #16
   1a93c:	f803 1c07 	strb.w	r1, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   1a940:	0a11      	lsrs	r1, r2, #8
   1a942:	f803 1c06 	strb.w	r1, [r3, #-6]
		*digest++ = (uint8_t)(t);
   1a946:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   1a94a:	4283      	cmp	r3, r0
   1a94c:	d1ef      	bne.n	1a92e <tc_sha256_final+0x8a>
	_set(s, 0, sizeof(*s));
   1a94e:	4620      	mov	r0, r4
   1a950:	2270      	movs	r2, #112	; 0x70
   1a952:	2100      	movs	r1, #0
   1a954:	f7ff fd62 	bl	1a41c <_set>
	return TC_CRYPTO_SUCCESS;
   1a958:	2001      	movs	r0, #1
}
   1a95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1a95c:	4608      	mov	r0, r1
   1a95e:	e7fc      	b.n	1a95a <tc_sha256_final+0xb6>

0001a960 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   1a960:	b530      	push	{r4, r5, lr}
   1a962:	1e43      	subs	r3, r0, #1
   1a964:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   1a966:	42a9      	cmp	r1, r5
   1a968:	d106      	bne.n	1a978 <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1a96a:	2136      	movs	r1, #54	; 0x36
   1a96c:	245c      	movs	r4, #92	; 0x5c
   1a96e:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1a970:	1a13      	subs	r3, r2, r0
   1a972:	2b3f      	cmp	r3, #63	; 0x3f
   1a974:	d90c      	bls.n	1a990 <rekey+0x30>
	}
}
   1a976:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   1a978:	780c      	ldrb	r4, [r1, #0]
   1a97a:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   1a97e:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   1a982:	f811 4b01 	ldrb.w	r4, [r1], #1
   1a986:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   1a98a:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
	for (i = 0; i < key_size; ++i) {
   1a98e:	e7ea      	b.n	1a966 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   1a990:	f802 1b01 	strb.w	r1, [r2], #1
   1a994:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   1a998:	e7ea      	b.n	1a970 <rekey+0x10>

0001a99a <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   1a99a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a99c:	460e      	mov	r6, r1
   1a99e:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   1a9a0:	4605      	mov	r5, r0
{
   1a9a2:	b0cd      	sub	sp, #308	; 0x134
	if (ctx == (TCHmacState_t) 0 ||
   1a9a4:	b1b8      	cbz	r0, 1a9d6 <tc_hmac_set_key+0x3c>
   1a9a6:	b341      	cbz	r1, 1a9fa <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   1a9a8:	b34a      	cbz	r2, 1a9fe <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1a9aa:	2a40      	cmp	r2, #64	; 0x40
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   1a9ac:	f100 0770 	add.w	r7, r0, #112	; 0x70
	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   1a9b0:	d813      	bhi.n	1a9da <tc_hmac_set_key+0x40>
		(void)tc_sha256_init(&dummy_state.hash_state);
   1a9b2:	a810      	add	r0, sp, #64	; 0x40
   1a9b4:	f7f2 f960 	bl	cc78 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   1a9b8:	4622      	mov	r2, r4
   1a9ba:	4669      	mov	r1, sp
   1a9bc:	a810      	add	r0, sp, #64	; 0x40
   1a9be:	f7ff ff4b 	bl	1a858 <tc_sha256_update>
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   1a9c2:	a910      	add	r1, sp, #64	; 0x40
   1a9c4:	a834      	add	r0, sp, #208	; 0xd0
   1a9c6:	f7ff ff6d 	bl	1a8a4 <tc_sha256_final>
		rekey(ctx->key, key, key_size);
   1a9ca:	4622      	mov	r2, r4
   1a9cc:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   1a9ce:	4638      	mov	r0, r7
   1a9d0:	f7ff ffc6 	bl	1a960 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   1a9d4:	2001      	movs	r0, #1
}
   1a9d6:	b04d      	add	sp, #308	; 0x134
   1a9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   1a9da:	f7f2 f94d 	bl	cc78 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1a9de:	4622      	mov	r2, r4
   1a9e0:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1a9e2:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   1a9e6:	4628      	mov	r0, r5
   1a9e8:	f7ff ff36 	bl	1a858 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   1a9ec:	4629      	mov	r1, r5
   1a9ee:	4620      	mov	r0, r4
   1a9f0:	f7ff ff58 	bl	1a8a4 <tc_sha256_final>
		rekey(ctx->key,
   1a9f4:	2220      	movs	r2, #32
   1a9f6:	4621      	mov	r1, r4
   1a9f8:	e7e9      	b.n	1a9ce <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   1a9fa:	4608      	mov	r0, r1
   1a9fc:	e7eb      	b.n	1a9d6 <tc_hmac_set_key+0x3c>
   1a9fe:	4610      	mov	r0, r2
   1aa00:	e7e9      	b.n	1a9d6 <tc_hmac_set_key+0x3c>

0001aa02 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   1aa02:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1aa04:	4604      	mov	r4, r0
   1aa06:	b140      	cbz	r0, 1aa1a <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   1aa08:	f7f2 f936 	bl	cc78 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   1aa0c:	2240      	movs	r2, #64	; 0x40
   1aa0e:	4620      	mov	r0, r4
   1aa10:	f104 0170 	add.w	r1, r4, #112	; 0x70
   1aa14:	f7ff ff20 	bl	1a858 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1aa18:	2001      	movs	r0, #1
}
   1aa1a:	bd10      	pop	{r4, pc}

0001aa1c <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   1aa1c:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   1aa1e:	b110      	cbz	r0, 1aa26 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   1aa20:	f7ff ff1a 	bl	1a858 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   1aa24:	2001      	movs	r0, #1
}
   1aa26:	bd08      	pop	{r3, pc}

0001aa28 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   1aa28:	b570      	push	{r4, r5, r6, lr}
   1aa2a:	460e      	mov	r6, r1
   1aa2c:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1aa2e:	4605      	mov	r5, r0
   1aa30:	b1f0      	cbz	r0, 1aa70 <tc_hmac_final+0x48>
   1aa32:	2920      	cmp	r1, #32
   1aa34:	d11c      	bne.n	1aa70 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   1aa36:	b1ea      	cbz	r2, 1aa74 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   1aa38:	4611      	mov	r1, r2
   1aa3a:	f7ff ff33 	bl	1a8a4 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   1aa3e:	4620      	mov	r0, r4
   1aa40:	f7f2 f91a 	bl	cc78 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   1aa44:	2240      	movs	r2, #64	; 0x40
   1aa46:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   1aa4a:	4620      	mov	r0, r4
   1aa4c:	f7ff ff04 	bl	1a858 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   1aa50:	4632      	mov	r2, r6
   1aa52:	4629      	mov	r1, r5
   1aa54:	4620      	mov	r0, r4
   1aa56:	f7ff feff 	bl	1a858 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   1aa5a:	4621      	mov	r1, r4
   1aa5c:	4628      	mov	r0, r5
   1aa5e:	f7ff ff21 	bl	1a8a4 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   1aa62:	4620      	mov	r0, r4
   1aa64:	22f0      	movs	r2, #240	; 0xf0
   1aa66:	2100      	movs	r1, #0
   1aa68:	f7ff fcd8 	bl	1a41c <_set>

	return TC_CRYPTO_SUCCESS;
   1aa6c:	2001      	movs	r0, #1
}
   1aa6e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1aa70:	2000      	movs	r0, #0
   1aa72:	e7fc      	b.n	1aa6e <tc_hmac_final+0x46>
   1aa74:	4610      	mov	r0, r2
   1aa76:	e7fa      	b.n	1aa6e <tc_hmac_final+0x46>

0001aa78 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   1aa78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa7c:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   1aa7e:	f04f 0b01 	mov.w	fp, #1
{
   1aa82:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   1aa84:	2300      	movs	r3, #0
{
   1aa86:	4688      	mov	r8, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1aa88:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   1aa8c:	4631      	mov	r1, r6
{
   1aa8e:	4691      	mov	r9, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1aa90:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   1aa92:	f88d 3006 	strb.w	r3, [sp, #6]
{
   1aa96:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   1aa9a:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1aa9e:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1aaa2:	f7ff ff7a 	bl	1a99a <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   1aaa6:	4620      	mov	r0, r4
   1aaa8:	f7ff ffab 	bl	1aa02 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1aaac:	2220      	movs	r2, #32
   1aaae:	4629      	mov	r1, r5
   1aab0:	4620      	mov	r0, r4
   1aab2:	f7ff ffb3 	bl	1aa1c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   1aab6:	465a      	mov	r2, fp
   1aab8:	4620      	mov	r0, r4
   1aaba:	f10d 0106 	add.w	r1, sp, #6
   1aabe:	f7ff ffad 	bl	1aa1c <tc_hmac_update>

	if (data && datalen)
   1aac2:	f1b8 0f00 	cmp.w	r8, #0
   1aac6:	d007      	beq.n	1aad8 <update+0x60>
   1aac8:	f1b9 0f00 	cmp.w	r9, #0
   1aacc:	d004      	beq.n	1aad8 <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   1aace:	464a      	mov	r2, r9
   1aad0:	4641      	mov	r1, r8
   1aad2:	4620      	mov	r0, r4
   1aad4:	f7ff ffa2 	bl	1aa1c <tc_hmac_update>
	if (additional_data && additional_datalen)
   1aad8:	b13f      	cbz	r7, 1aaea <update+0x72>
   1aada:	f1ba 0f00 	cmp.w	sl, #0
   1aade:	d004      	beq.n	1aaea <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1aae0:	4652      	mov	r2, sl
   1aae2:	4639      	mov	r1, r7
   1aae4:	4620      	mov	r0, r4
   1aae6:	f7ff ff99 	bl	1aa1c <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1aaea:	4622      	mov	r2, r4
   1aaec:	2120      	movs	r1, #32
   1aaee:	4630      	mov	r0, r6
   1aaf0:	f7ff ff9a 	bl	1aa28 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1aaf4:	2220      	movs	r2, #32
   1aaf6:	4631      	mov	r1, r6
   1aaf8:	4620      	mov	r0, r4
   1aafa:	f7ff ff4e 	bl	1a99a <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1aafe:	4620      	mov	r0, r4
   1ab00:	f7ff ff7f 	bl	1aa02 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ab04:	2220      	movs	r2, #32
   1ab06:	4629      	mov	r1, r5
   1ab08:	4620      	mov	r0, r4
   1ab0a:	f7ff ff87 	bl	1aa1c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1ab0e:	4622      	mov	r2, r4
   1ab10:	2120      	movs	r1, #32
   1ab12:	4628      	mov	r0, r5
   1ab14:	f7ff ff88 	bl	1aa28 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   1ab18:	f1b8 0f00 	cmp.w	r8, #0
   1ab1c:	d03a      	beq.n	1ab94 <update+0x11c>
   1ab1e:	f1b9 0f00 	cmp.w	r9, #0
   1ab22:	d037      	beq.n	1ab94 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ab24:	2220      	movs	r2, #32
   1ab26:	4631      	mov	r1, r6
   1ab28:	4620      	mov	r0, r4
   1ab2a:	f7ff ff36 	bl	1a99a <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   1ab2e:	4620      	mov	r0, r4
   1ab30:	f7ff ff67 	bl	1aa02 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ab34:	2220      	movs	r2, #32
   1ab36:	4629      	mov	r1, r5
   1ab38:	4620      	mov	r0, r4
   1ab3a:	f7ff ff6f 	bl	1aa1c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   1ab3e:	2201      	movs	r2, #1
   1ab40:	f10d 0107 	add.w	r1, sp, #7
   1ab44:	4620      	mov	r0, r4
   1ab46:	f7ff ff69 	bl	1aa1c <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   1ab4a:	464a      	mov	r2, r9
   1ab4c:	4641      	mov	r1, r8
   1ab4e:	4620      	mov	r0, r4
   1ab50:	f7ff ff64 	bl	1aa1c <tc_hmac_update>
	if (additional_data && additional_datalen)
   1ab54:	b13f      	cbz	r7, 1ab66 <update+0xee>
   1ab56:	f1ba 0f00 	cmp.w	sl, #0
   1ab5a:	d004      	beq.n	1ab66 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   1ab5c:	4652      	mov	r2, sl
   1ab5e:	4639      	mov	r1, r7
   1ab60:	4620      	mov	r0, r4
   1ab62:	f7ff ff5b 	bl	1aa1c <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   1ab66:	4622      	mov	r2, r4
   1ab68:	2120      	movs	r1, #32
   1ab6a:	4630      	mov	r0, r6
   1ab6c:	f7ff ff5c 	bl	1aa28 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ab70:	2220      	movs	r2, #32
   1ab72:	4631      	mov	r1, r6
   1ab74:	4620      	mov	r0, r4
   1ab76:	f7ff ff10 	bl	1a99a <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   1ab7a:	4620      	mov	r0, r4
   1ab7c:	f7ff ff41 	bl	1aa02 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ab80:	2220      	movs	r2, #32
   1ab82:	4629      	mov	r1, r5
   1ab84:	4620      	mov	r0, r4
   1ab86:	f7ff ff49 	bl	1aa1c <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1ab8a:	4622      	mov	r2, r4
   1ab8c:	2120      	movs	r1, #32
   1ab8e:	4628      	mov	r0, r5
   1ab90:	f7ff ff4a 	bl	1aa28 <tc_hmac_final>
}
   1ab94:	b003      	add	sp, #12
   1ab96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ab9a <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   1ab9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ab9c:	460c      	mov	r4, r1
   1ab9e:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1aba0:	4605      	mov	r5, r0
   1aba2:	b1b0      	cbz	r0, 1abd2 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   1aba4:	b1b9      	cbz	r1, 1abd6 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   1aba6:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   1aba8:	2220      	movs	r2, #32
   1abaa:	2100      	movs	r1, #0
   1abac:	30f0      	adds	r0, #240	; 0xf0
   1abae:	f7ff fc35 	bl	1a41c <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   1abb2:	2220      	movs	r2, #32
   1abb4:	2101      	movs	r1, #1
   1abb6:	f505 7088 	add.w	r0, r5, #272	; 0x110
   1abba:	f7ff fc2f 	bl	1a41c <_set>
	update(prng, personalization, plen, 0, 0);
   1abbe:	4628      	mov	r0, r5
   1abc0:	4633      	mov	r3, r6
   1abc2:	463a      	mov	r2, r7
   1abc4:	4621      	mov	r1, r4
   1abc6:	9600      	str	r6, [sp, #0]
   1abc8:	f7ff ff56 	bl	1aa78 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   1abcc:	2001      	movs	r0, #1
	prng->countdown = 0;
   1abce:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   1abd2:	b003      	add	sp, #12
   1abd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1abd6:	4608      	mov	r0, r1
   1abd8:	e7fb      	b.n	1abd2 <tc_hmac_prng_init+0x38>

0001abda <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   1abda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1abdc:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   1abde:	4605      	mov	r5, r0
   1abe0:	b180      	cbz	r0, 1ac04 <tc_hmac_prng_reseed+0x2a>
   1abe2:	b179      	cbz	r1, 1ac04 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   1abe4:	2a1f      	cmp	r2, #31
   1abe6:	d90d      	bls.n	1ac04 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   1abe8:	b153      	cbz	r3, 1ac00 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   1abea:	b16c      	cbz	r4, 1ac08 <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   1abec:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   1abee:	f7ff ff43 	bl	1aa78 <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   1abf2:	f04f 33ff 	mov.w	r3, #4294967295

	return TC_CRYPTO_SUCCESS;
   1abf6:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   1abf8:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
}
   1abfc:	b003      	add	sp, #12
   1abfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   1ac00:	9300      	str	r3, [sp, #0]
   1ac02:	e7f4      	b.n	1abee <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   1ac04:	2000      	movs	r0, #0
   1ac06:	e7f9      	b.n	1abfc <tc_hmac_prng_reseed+0x22>
   1ac08:	4620      	mov	r0, r4
   1ac0a:	e7f7      	b.n	1abfc <tc_hmac_prng_reseed+0x22>

0001ac0c <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   1ac0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1ac10:	460d      	mov	r5, r1
   1ac12:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   1ac14:	4680      	mov	r8, r0
   1ac16:	b3d8      	cbz	r0, 1ac90 <tc_hmac_prng_generate+0x84>
   1ac18:	b3d2      	cbz	r2, 1ac90 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   1ac1a:	1e4b      	subs	r3, r1, #1
   1ac1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   1ac20:	d236      	bcs.n	1ac90 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   1ac22:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   1ac26:	b3ab      	cbz	r3, 1ac94 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   1ac28:	3b01      	subs	r3, #1
   1ac2a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ac2e:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ac32:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   1ac36:	2220      	movs	r2, #32
   1ac38:	4649      	mov	r1, r9
   1ac3a:	4620      	mov	r0, r4
   1ac3c:	f7ff fead 	bl	1a99a <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   1ac40:	4620      	mov	r0, r4
   1ac42:	f7ff fede 	bl	1aa02 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   1ac46:	2220      	movs	r2, #32
   1ac48:	4639      	mov	r1, r7
   1ac4a:	4620      	mov	r0, r4
   1ac4c:	f7ff fee6 	bl	1aa1c <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   1ac50:	4622      	mov	r2, r4
   1ac52:	2120      	movs	r1, #32
   1ac54:	4638      	mov	r0, r7
   1ac56:	f7ff fee7 	bl	1aa28 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   1ac5a:	2d20      	cmp	r5, #32
   1ac5c:	462e      	mov	r6, r5
   1ac5e:	bf28      	it	cs
   1ac60:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   1ac62:	4640      	mov	r0, r8
   1ac64:	4633      	mov	r3, r6
   1ac66:	463a      	mov	r2, r7
   1ac68:	4631      	mov	r1, r6
   1ac6a:	f7ff fbca 	bl	1a402 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   1ac6e:	2d20      	cmp	r5, #32
   1ac70:	bf38      	it	cc
   1ac72:	2520      	movcc	r5, #32
	while (outlen != 0) {
   1ac74:	3d20      	subs	r5, #32
		out += bufferlen;
   1ac76:	44b0      	add	r8, r6
	while (outlen != 0) {
   1ac78:	d1dd      	bne.n	1ac36 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   1ac7a:	4620      	mov	r0, r4
   1ac7c:	462b      	mov	r3, r5
   1ac7e:	462a      	mov	r2, r5
   1ac80:	4629      	mov	r1, r5
   1ac82:	9500      	str	r5, [sp, #0]
   1ac84:	f7ff fef8 	bl	1aa78 <update>

	return TC_CRYPTO_SUCCESS;
   1ac88:	2001      	movs	r0, #1
}
   1ac8a:	b003      	add	sp, #12
   1ac8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   1ac90:	2000      	movs	r0, #0
   1ac92:	e7fa      	b.n	1ac8a <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   1ac94:	f04f 30ff 	mov.w	r0, #4294967295
   1ac98:	e7f7      	b.n	1ac8a <tc_hmac_prng_generate+0x7e>

0001ac9a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1ac9a:	2100      	movs	r1, #0
   1ac9c:	2001      	movs	r0, #1
   1ac9e:	f7f2 b909 	b.w	ceb4 <z_arm_fatal_error>

0001aca2 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1aca2:	6f43      	ldr	r3, [r0, #116]	; 0x74
   1aca4:	f383 880b 	msr	PSPLIM, r3
}
   1aca8:	4770      	bx	lr

0001acaa <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1acaa:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1acac:	6800      	ldr	r0, [r0, #0]
   1acae:	f7f2 b901 	b.w	ceb4 <z_arm_fatal_error>

0001acb2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1acb2:	b508      	push	{r3, lr}
	handler();
   1acb4:	f7f2 f92c 	bl	cf10 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1acb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1acbc:	f7f2 bb70 	b.w	d3a0 <z_arm_exc_exit>

0001acc0 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1acc0:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   1acc4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1acc8:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
   1acca:	bf08      	it	eq
   1accc:	f06f 0015 	mvneq.w	r0, #21
   1acd0:	4770      	bx	lr

0001acd2 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1acd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1acd6:	4684      	mov	ip, r0
   1acd8:	4688      	mov	r8, r1
	register const char *s = nptr;
   1acda:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1acdc:	4621      	mov	r1, r4
   1acde:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1ace2:	2b20      	cmp	r3, #32
   1ace4:	d0fa      	beq.n	1acdc <strtol+0xa>
   1ace6:	f1a3 0009 	sub.w	r0, r3, #9
   1acea:	2804      	cmp	r0, #4
   1acec:	d9f6      	bls.n	1acdc <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   1acee:	2b2d      	cmp	r3, #45	; 0x2d
   1acf0:	d12d      	bne.n	1ad4e <strtol+0x7c>
		neg = 1;
		c = *s++;
   1acf2:	784b      	ldrb	r3, [r1, #1]
   1acf4:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1acf6:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1acf8:	2a00      	cmp	r2, #0
   1acfa:	d05a      	beq.n	1adb2 <strtol+0xe0>
   1acfc:	2a10      	cmp	r2, #16
   1acfe:	d109      	bne.n	1ad14 <strtol+0x42>
   1ad00:	2b30      	cmp	r3, #48	; 0x30
   1ad02:	d107      	bne.n	1ad14 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1ad04:	7823      	ldrb	r3, [r4, #0]
   1ad06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1ad0a:	2b58      	cmp	r3, #88	; 0x58
   1ad0c:	d14c      	bne.n	1ada8 <strtol+0xd6>
		c = s[1];
		s += 2;
		base = 16;
   1ad0e:	2210      	movs	r2, #16
		c = s[1];
   1ad10:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   1ad12:	3402      	adds	r4, #2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1ad14:	2600      	movs	r6, #0
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1ad16:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1ad1a:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
   1ad1c:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1ad20:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1ad22:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1ad26:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1ad2a:	2d09      	cmp	r5, #9
   1ad2c:	d815      	bhi.n	1ad5a <strtol+0x88>
			c -= '0';
   1ad2e:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1ad30:	429a      	cmp	r2, r3
   1ad32:	dd22      	ble.n	1ad7a <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1ad34:	1c75      	adds	r5, r6, #1
   1ad36:	d007      	beq.n	1ad48 <strtol+0x76>
   1ad38:	4570      	cmp	r0, lr
   1ad3a:	d81b      	bhi.n	1ad74 <strtol+0xa2>
   1ad3c:	d101      	bne.n	1ad42 <strtol+0x70>
   1ad3e:	454b      	cmp	r3, r9
   1ad40:	dc18      	bgt.n	1ad74 <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
   1ad42:	2601      	movs	r6, #1
			acc *= base;
			acc += c;
   1ad44:	fb00 3002 	mla	r0, r0, r2, r3
	for (acc = 0, any = 0;; c = *s++) {
   1ad48:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1ad4c:	e7eb      	b.n	1ad26 <strtol+0x54>
	} else if (c == '+') {
   1ad4e:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1ad50:	bf04      	itt	eq
   1ad52:	784b      	ldrbeq	r3, [r1, #1]
   1ad54:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1ad56:	2100      	movs	r1, #0
   1ad58:	e7ce      	b.n	1acf8 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1ad5a:	f043 0520 	orr.w	r5, r3, #32
   1ad5e:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1ad60:	2d19      	cmp	r5, #25
   1ad62:	d80a      	bhi.n	1ad7a <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1ad64:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1ad68:	2d1a      	cmp	r5, #26
   1ad6a:	bf34      	ite	cc
   1ad6c:	2537      	movcc	r5, #55	; 0x37
   1ad6e:	2557      	movcs	r5, #87	; 0x57
   1ad70:	1b5b      	subs	r3, r3, r5
   1ad72:	e7dd      	b.n	1ad30 <strtol+0x5e>
			any = -1;
   1ad74:	f04f 36ff 	mov.w	r6, #4294967295
   1ad78:	e7e6      	b.n	1ad48 <strtol+0x76>
		}
	}

	if (any < 0) {
   1ad7a:	1c73      	adds	r3, r6, #1
   1ad7c:	d109      	bne.n	1ad92 <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1ad7e:	f7fb feb1 	bl	16ae4 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1ad82:	2326      	movs	r3, #38	; 0x26
   1ad84:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1ad86:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1ad88:	f1b8 0f00 	cmp.w	r8, #0
   1ad8c:	d107      	bne.n	1ad9e <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1ad8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1ad92:	b101      	cbz	r1, 1ad96 <strtol+0xc4>
		acc = -acc;
   1ad94:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1ad96:	f1b8 0f00 	cmp.w	r8, #0
   1ad9a:	d0f8      	beq.n	1ad8e <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   1ad9c:	b10e      	cbz	r6, 1ada2 <strtol+0xd0>
   1ad9e:	f104 3cff 	add.w	ip, r4, #4294967295
   1ada2:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1ada6:	e7f2      	b.n	1ad8e <strtol+0xbc>
	if (base == 0) {
   1ada8:	2330      	movs	r3, #48	; 0x30
   1adaa:	2a00      	cmp	r2, #0
   1adac:	d1b2      	bne.n	1ad14 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1adae:	2208      	movs	r2, #8
   1adb0:	e7b0      	b.n	1ad14 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1adb2:	2b30      	cmp	r3, #48	; 0x30
   1adb4:	d0a6      	beq.n	1ad04 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1adb6:	220a      	movs	r2, #10
   1adb8:	e7ac      	b.n	1ad14 <strtol+0x42>

0001adba <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1adba:	4603      	mov	r3, r0
   1adbc:	3901      	subs	r1, #1
   1adbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1adc2:	b90a      	cbnz	r2, 1adc8 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1adc4:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1adc6:	4770      	bx	lr
		*d = *s;
   1adc8:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1adcc:	e7f7      	b.n	1adbe <strcpy+0x4>

0001adce <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1adce:	b570      	push	{r4, r5, r6, lr}
   1add0:	4605      	mov	r5, r0
   1add2:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1add4:	b142      	cbz	r2, 1ade8 <strncpy+0x1a>
   1add6:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1adda:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1addc:	b92c      	cbnz	r4, 1adea <strncpy+0x1c>
   1adde:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1ade0:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1ade4:	429a      	cmp	r2, r3
   1ade6:	d1fb      	bne.n	1ade0 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1ade8:	bd70      	pop	{r4, r5, r6, pc}
		n--;
   1adea:	4632      	mov	r2, r6
		*d = *s;
   1adec:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1adf0:	e7ef      	b.n	1add2 <strncpy+0x4>

0001adf2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1adf2:	4603      	mov	r3, r0
	size_t n = 0;
   1adf4:	2000      	movs	r0, #0

	while (*s != '\0') {
   1adf6:	5c1a      	ldrb	r2, [r3, r0]
   1adf8:	b902      	cbnz	r2, 1adfc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1adfa:	4770      	bx	lr
		n++;
   1adfc:	3001      	adds	r0, #1
   1adfe:	e7fa      	b.n	1adf6 <strlen+0x4>

0001ae00 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1ae00:	4603      	mov	r3, r0
	size_t n = 0;
   1ae02:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1ae04:	5c1a      	ldrb	r2, [r3, r0]
   1ae06:	b10a      	cbz	r2, 1ae0c <strnlen+0xc>
   1ae08:	4288      	cmp	r0, r1
   1ae0a:	d100      	bne.n	1ae0e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1ae0c:	4770      	bx	lr
		n++;
   1ae0e:	3001      	adds	r0, #1
   1ae10:	e7f8      	b.n	1ae04 <strnlen+0x4>

0001ae12 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1ae12:	1e43      	subs	r3, r0, #1
   1ae14:	3901      	subs	r1, #1
   1ae16:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1ae1a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1ae1e:	4282      	cmp	r2, r0
   1ae20:	d101      	bne.n	1ae26 <strcmp+0x14>
   1ae22:	2a00      	cmp	r2, #0
   1ae24:	d1f7      	bne.n	1ae16 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1ae26:	1a10      	subs	r0, r2, r0
   1ae28:	4770      	bx	lr

0001ae2a <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1ae2a:	b510      	push	{r4, lr}
   1ae2c:	3901      	subs	r1, #1
   1ae2e:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1ae30:	4282      	cmp	r2, r0
   1ae32:	d009      	beq.n	1ae48 <strncmp+0x1e>
   1ae34:	7803      	ldrb	r3, [r0, #0]
   1ae36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   1ae3a:	42a3      	cmp	r3, r4
   1ae3c:	d100      	bne.n	1ae40 <strncmp+0x16>
   1ae3e:	b90b      	cbnz	r3, 1ae44 <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1ae40:	1b18      	subs	r0, r3, r4
   1ae42:	e002      	b.n	1ae4a <strncmp+0x20>
		s1++;
   1ae44:	3001      	adds	r0, #1
		n--;
   1ae46:	e7f3      	b.n	1ae30 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   1ae48:	2000      	movs	r0, #0
}
   1ae4a:	bd10      	pop	{r4, pc}

0001ae4c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1ae4c:	4603      	mov	r3, r0
   1ae4e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1ae50:	b15a      	cbz	r2, 1ae6a <memcmp+0x1e>
   1ae52:	3901      	subs	r1, #1
   1ae54:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1ae56:	f813 0b01 	ldrb.w	r0, [r3], #1
   1ae5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1ae5e:	42a3      	cmp	r3, r4
   1ae60:	d001      	beq.n	1ae66 <memcmp+0x1a>
   1ae62:	4290      	cmp	r0, r2
   1ae64:	d0f7      	beq.n	1ae56 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1ae66:	1a80      	subs	r0, r0, r2
}
   1ae68:	bd10      	pop	{r4, pc}
		return 0;
   1ae6a:	4610      	mov	r0, r2
   1ae6c:	e7fc      	b.n	1ae68 <memcmp+0x1c>

0001ae6e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1ae6e:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1ae70:	ea81 0400 	eor.w	r4, r1, r0
   1ae74:	07a5      	lsls	r5, r4, #30
   1ae76:	4603      	mov	r3, r0
   1ae78:	d00b      	beq.n	1ae92 <memcpy+0x24>
   1ae7a:	3b01      	subs	r3, #1
   1ae7c:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1ae7e:	4291      	cmp	r1, r2
   1ae80:	d11b      	bne.n	1aeba <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1ae82:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1ae84:	2a00      	cmp	r2, #0
   1ae86:	d0fc      	beq.n	1ae82 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1ae88:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   1ae8c:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   1ae8e:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   1ae92:	079c      	lsls	r4, r3, #30
   1ae94:	d1f6      	bne.n	1ae84 <memcpy+0x16>
   1ae96:	f022 0403 	bic.w	r4, r2, #3
   1ae9a:	1f1d      	subs	r5, r3, #4
   1ae9c:	0896      	lsrs	r6, r2, #2
   1ae9e:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1aea0:	42b9      	cmp	r1, r7
   1aea2:	d105      	bne.n	1aeb0 <memcpy+0x42>
   1aea4:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
   1aea8:	4423      	add	r3, r4
   1aeaa:	fb05 2206 	mla	r2, r5, r6, r2
   1aeae:	e7e4      	b.n	1ae7a <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1aeb0:	f851 cb04 	ldr.w	ip, [r1], #4
   1aeb4:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1aeb8:	e7f2      	b.n	1aea0 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1aeba:	f811 4b01 	ldrb.w	r4, [r1], #1
   1aebe:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1aec2:	e7dc      	b.n	1ae7e <memcpy+0x10>

0001aec4 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1aec4:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   1aec6:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
   1aec8:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1aeca:	07a3      	lsls	r3, r4, #30
   1aecc:	d111      	bne.n	1aef2 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1aece:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   1aed2:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1aed6:	f022 0303 	bic.w	r3, r2, #3
   1aeda:	0896      	lsrs	r6, r2, #2
   1aedc:	4423      	add	r3, r4
   1aede:	429c      	cmp	r4, r3
   1aee0:	d10d      	bne.n	1aefe <memset+0x3a>
   1aee2:	f06f 0403 	mvn.w	r4, #3
   1aee6:	fb04 2206 	mla	r2, r4, r6, r2
   1aeea:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1aeec:	4293      	cmp	r3, r2
   1aeee:	d109      	bne.n	1af04 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1aef0:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1aef2:	2a00      	cmp	r2, #0
   1aef4:	d0fc      	beq.n	1aef0 <memset+0x2c>
		*(d_byte++) = c_byte;
   1aef6:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   1aefa:	3a01      	subs	r2, #1
   1aefc:	e7e5      	b.n	1aeca <memset+0x6>
		*(d_word++) = c_word;
   1aefe:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   1af02:	e7ec      	b.n	1aede <memset+0x1a>
		*(d_byte++) = c_byte;
   1af04:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1af08:	e7f0      	b.n	1aeec <memset+0x28>

0001af0a <_stdout_hook_default>:
}
   1af0a:	f04f 30ff 	mov.w	r0, #4294967295
   1af0e:	4770      	bx	lr

0001af10 <bt_settings_decode_key>:
{
   1af10:	b570      	push	{r4, r5, r6, lr}
   1af12:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1af14:	2100      	movs	r1, #0
{
   1af16:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1af18:	f7ff f888 	bl	1a02c <settings_name_next>
   1af1c:	280d      	cmp	r0, #13
   1af1e:	d118      	bne.n	1af52 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1af20:	7b23      	ldrb	r3, [r4, #12]
   1af22:	2b30      	cmp	r3, #48	; 0x30
   1af24:	d111      	bne.n	1af4a <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1af26:	2300      	movs	r3, #0
   1af28:	702b      	strb	r3, [r5, #0]
   1af2a:	f104 060c 	add.w	r6, r4, #12
   1af2e:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1af30:	462a      	mov	r2, r5
   1af32:	4620      	mov	r0, r4
   1af34:	2301      	movs	r3, #1
   1af36:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   1af38:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1af3a:	f7fe fcf7 	bl	1992c <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1af3e:	42b4      	cmp	r4, r6
   1af40:	f105 35ff 	add.w	r5, r5, #4294967295
   1af44:	d1f4      	bne.n	1af30 <bt_settings_decode_key+0x20>
	return 0;
   1af46:	2000      	movs	r0, #0
}
   1af48:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1af4a:	2b31      	cmp	r3, #49	; 0x31
   1af4c:	d101      	bne.n	1af52 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1af4e:	2301      	movs	r3, #1
   1af50:	e7ea      	b.n	1af28 <bt_settings_decode_key+0x18>
		return -EINVAL;
   1af52:	f06f 0015 	mvn.w	r0, #21
   1af56:	e7f7      	b.n	1af48 <bt_settings_decode_key+0x38>

0001af58 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1af58:	b510      	push	{r4, lr}
   1af5a:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1af5c:	7801      	ldrb	r1, [r0, #0]
   1af5e:	7822      	ldrb	r2, [r4, #0]
{
   1af60:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1af62:	428a      	cmp	r2, r1
   1af64:	d00f      	beq.n	1af86 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1af66:	4669      	mov	r1, sp
   1af68:	f7f2 fdc0 	bl	daec <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1af6c:	4620      	mov	r0, r4
   1af6e:	a905      	add	r1, sp, #20
   1af70:	f7f2 fdbc 	bl	daec <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1af74:	2210      	movs	r2, #16
   1af76:	f10d 0115 	add.w	r1, sp, #21
   1af7a:	f10d 0001 	add.w	r0, sp, #1
   1af7e:	f7ff ff65 	bl	1ae4c <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1af82:	b00a      	add	sp, #40	; 0x28
   1af84:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1af86:	2a01      	cmp	r2, #1
   1af88:	d006      	beq.n	1af98 <bt_uuid_cmp+0x40>
   1af8a:	2a02      	cmp	r2, #2
   1af8c:	d007      	beq.n	1af9e <bt_uuid_cmp+0x46>
   1af8e:	b972      	cbnz	r2, 1afae <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1af90:	8840      	ldrh	r0, [r0, #2]
   1af92:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1af94:	1ac0      	subs	r0, r0, r3
   1af96:	e7f4      	b.n	1af82 <bt_uuid_cmp+0x2a>
   1af98:	6840      	ldr	r0, [r0, #4]
   1af9a:	6863      	ldr	r3, [r4, #4]
   1af9c:	e7fa      	b.n	1af94 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1af9e:	2210      	movs	r2, #16
   1afa0:	1c61      	adds	r1, r4, #1
   1afa2:	3001      	adds	r0, #1
}
   1afa4:	b00a      	add	sp, #40	; 0x28
   1afa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1afaa:	f7ff bf4f 	b.w	1ae4c <memcmp>
	switch (u1->type) {
   1afae:	f06f 0015 	mvn.w	r0, #21
   1afb2:	e7e6      	b.n	1af82 <bt_uuid_cmp+0x2a>

0001afb4 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1afb4:	2a04      	cmp	r2, #4
{
   1afb6:	b510      	push	{r4, lr}
	switch (data_len) {
   1afb8:	d00a      	beq.n	1afd0 <bt_uuid_create+0x1c>
   1afba:	2a10      	cmp	r2, #16
   1afbc:	d00d      	beq.n	1afda <bt_uuid_create+0x26>
   1afbe:	2a02      	cmp	r2, #2
   1afc0:	f04f 0300 	mov.w	r3, #0
   1afc4:	d10f      	bne.n	1afe6 <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1afc6:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1afc8:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1afca:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1afcc:	2001      	movs	r0, #1
}
   1afce:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1afd0:	2301      	movs	r3, #1
   1afd2:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1afd4:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1afd6:	6042      	str	r2, [r0, #4]
		break;
   1afd8:	e7f8      	b.n	1afcc <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1afda:	2302      	movs	r3, #2
   1afdc:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1afe0:	f7ff ff45 	bl	1ae6e <memcpy>
		break;
   1afe4:	e7f2      	b.n	1afcc <bt_uuid_create+0x18>
	switch (data_len) {
   1afe6:	4618      	mov	r0, r3
   1afe8:	e7f1      	b.n	1afce <bt_uuid_create+0x1a>

0001afea <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1afea:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1afec:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1afee:	2106      	movs	r1, #6
{
   1aff0:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1aff2:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1aff6:	f7f5 f96d 	bl	102d4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1affa:	b918      	cbnz	r0, 1b004 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1affc:	79a3      	ldrb	r3, [r4, #6]
   1affe:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b002:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1b004:	bd10      	pop	{r4, pc}

0001b006 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1b006:	280f      	cmp	r0, #15
   1b008:	d806      	bhi.n	1b018 <bt_hci_evt_get_flags+0x12>
   1b00a:	280d      	cmp	r0, #13
   1b00c:	d80b      	bhi.n	1b026 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1b00e:	2805      	cmp	r0, #5
   1b010:	bf14      	ite	ne
   1b012:	2002      	movne	r0, #2
   1b014:	2003      	moveq	r0, #3
   1b016:	4770      	bx	lr
	switch (evt) {
   1b018:	2813      	cmp	r0, #19
   1b01a:	d004      	beq.n	1b026 <bt_hci_evt_get_flags+0x20>
   1b01c:	281a      	cmp	r0, #26
   1b01e:	bf14      	ite	ne
   1b020:	2002      	movne	r0, #2
   1b022:	2001      	moveq	r0, #1
   1b024:	4770      	bx	lr
   1b026:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1b028:	4770      	bx	lr

0001b02a <get_adv_channel_map>:
{
   1b02a:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1b02c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1b030:	bf0c      	ite	eq
   1b032:	2007      	moveq	r0, #7
   1b034:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1b036:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1b038:	bf48      	it	mi
   1b03a:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1b03e:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1b040:	bf48      	it	mi
   1b042:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1b046:	4770      	bx	lr

0001b048 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b048:	e8d0 0faf 	lda	r0, [r0]
}
   1b04c:	4770      	bx	lr

0001b04e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1b04e:	2207      	movs	r2, #7
   1b050:	f7ff bf0d 	b.w	1ae6e <memcpy>

0001b054 <atomic_or>:
{
   1b054:	4603      	mov	r3, r0
}
   1b056:	e8d3 0fef 	ldaex	r0, [r3]
   1b05a:	ea40 0201 	orr.w	r2, r0, r1
   1b05e:	e8c3 2fec 	stlex	ip, r2, [r3]
   1b062:	f1bc 0f00 	cmp.w	ip, #0
   1b066:	d1f6      	bne.n	1b056 <atomic_or+0x2>
   1b068:	4770      	bx	lr

0001b06a <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1b06a:	2207      	movs	r2, #7
   1b06c:	f7ff beee 	b.w	1ae4c <memcmp>

0001b070 <atomic_and>:
{
   1b070:	4603      	mov	r3, r0
}
   1b072:	e8d3 0fef 	ldaex	r0, [r3]
   1b076:	ea00 0201 	and.w	r2, r0, r1
   1b07a:	e8c3 2fec 	stlex	ip, r2, [r3]
   1b07e:	f1bc 0f00 	cmp.w	ip, #0
   1b082:	d1f6      	bne.n	1b072 <atomic_and+0x2>
   1b084:	4770      	bx	lr

0001b086 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1b086:	460b      	mov	r3, r1
   1b088:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b08a:	f001 041f 	and.w	r4, r1, #31
   1b08e:	2101      	movs	r1, #1

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b090:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1b092:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b094:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   1b098:	b112      	cbz	r2, 1b0a0 <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1b09a:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b09c:	f7ff bfda 	b.w	1b054 <atomic_or>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b0a0:	43c9      	mvns	r1, r1
}
   1b0a2:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b0a4:	f7ff bfe4 	b.w	1b070 <atomic_and>

0001b0a8 <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1b0a8:	f100 0210 	add.w	r2, r0, #16
{
   1b0ac:	b508      	push	{r3, lr}
   1b0ae:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b0b0:	4610      	mov	r0, r2
   1b0b2:	f7ff ffc9 	bl	1b048 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   1b0b6:	0640      	lsls	r0, r0, #25
   1b0b8:	d50a      	bpl.n	1b0d0 <adv_id_check_connectable_func+0x28>
   1b0ba:	4610      	mov	r0, r2
   1b0bc:	f7ff ffc4 	bl	1b048 <atomic_get>
   1b0c0:	05c2      	lsls	r2, r0, #23
   1b0c2:	d505      	bpl.n	1b0d0 <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   1b0c4:	781a      	ldrb	r2, [r3, #0]
   1b0c6:	780b      	ldrb	r3, [r1, #0]
   1b0c8:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   1b0ca:	bf1c      	itt	ne
   1b0cc:	2301      	movne	r3, #1
   1b0ce:	704b      	strbne	r3, [r1, #1]
}
   1b0d0:	bd08      	pop	{r3, pc}

0001b0d2 <le_set_private_addr.constprop.0>:
static int le_set_private_addr(uint8_t id)
   1b0d2:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1b0d4:	2106      	movs	r1, #6
   1b0d6:	4668      	mov	r0, sp
   1b0d8:	f7f5 f8fc 	bl	102d4 <bt_rand>
	if (err) {
   1b0dc:	b940      	cbnz	r0, 1b0f0 <le_set_private_addr.constprop.0+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1b0de:	f89d 3005 	ldrb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1b0e2:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1b0e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1b0e8:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
   1b0ec:	f7f3 fa06 	bl	e4fc <set_random_address>
}
   1b0f0:	b003      	add	sp, #12
   1b0f2:	f85d fb04 	ldr.w	pc, [sp], #4

0001b0f6 <bt_lookup_id_addr>:
}
   1b0f6:	4608      	mov	r0, r1
   1b0f8:	4770      	bx	lr

0001b0fa <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   1b0fa:	f7f3 bc57 	b.w	e9ac <bt_le_create_conn_legacy>

0001b0fe <bt_hci_disconnect>:
{
   1b0fe:	b570      	push	{r4, r5, r6, lr}
   1b100:	4606      	mov	r6, r0
   1b102:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1b104:	f240 4006 	movw	r0, #1030	; 0x406
   1b108:	2103      	movs	r1, #3
   1b10a:	f7f3 f92b 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
   1b10e:	4604      	mov	r4, r0
   1b110:	b168      	cbz	r0, 1b12e <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   1b112:	2103      	movs	r1, #3
   1b114:	3008      	adds	r0, #8
   1b116:	f7f9 fd0d 	bl	14b34 <net_buf_simple_add>
	disconn->reason = reason;
   1b11a:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1b11c:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1b11e:	4621      	mov	r1, r4
}
   1b120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1b124:	2200      	movs	r2, #0
   1b126:	f240 4006 	movw	r0, #1030	; 0x406
   1b12a:	f7f3 b965 	b.w	e3f8 <bt_hci_cmd_send_sync>
}
   1b12e:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b132:	bd70      	pop	{r4, r5, r6, pc}

0001b134 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1b134:	8803      	ldrh	r3, [r0, #0]
   1b136:	8842      	ldrh	r2, [r0, #2]
{
   1b138:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1b13a:	4293      	cmp	r3, r2
   1b13c:	d819      	bhi.n	1b172 <bt_le_conn_params_valid+0x3e>
   1b13e:	2b05      	cmp	r3, #5
   1b140:	d917      	bls.n	1b172 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1b142:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1b146:	d814      	bhi.n	1b172 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1b148:	8883      	ldrh	r3, [r0, #4]
   1b14a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1b14e:	d210      	bcs.n	1b172 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1b150:	f640 4476 	movw	r4, #3190	; 0xc76
   1b154:	88c0      	ldrh	r0, [r0, #6]
   1b156:	f1a0 010a 	sub.w	r1, r0, #10
   1b15a:	b289      	uxth	r1, r1
   1b15c:	42a1      	cmp	r1, r4
   1b15e:	d808      	bhi.n	1b172 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1b160:	3301      	adds	r3, #1
   1b162:	b29b      	uxth	r3, r3
   1b164:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1b166:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1b16a:	bf34      	ite	cc
   1b16c:	2001      	movcc	r0, #1
   1b16e:	2000      	movcs	r0, #0
}
   1b170:	bd10      	pop	{r4, pc}
		return false;
   1b172:	2000      	movs	r0, #0
   1b174:	e7fc      	b.n	1b170 <bt_le_conn_params_valid+0x3c>

0001b176 <bt_le_set_data_len>:
{
   1b176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b178:	4607      	mov	r7, r0
   1b17a:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1b17c:	f242 0022 	movw	r0, #8226	; 0x2022
   1b180:	2106      	movs	r1, #6
{
   1b182:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1b184:	f7f3 f8ee 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
   1b188:	4604      	mov	r4, r0
   1b18a:	b170      	cbz	r0, 1b1aa <bt_le_set_data_len+0x34>
   1b18c:	2106      	movs	r1, #6
   1b18e:	3008      	adds	r0, #8
   1b190:	f7f9 fcd0 	bl	14b34 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b194:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1b196:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b198:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1b19a:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1b19c:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1b19e:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1b1a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1b1a6:	f7f3 be23 	b.w	edf0 <bt_hci_cmd_send>
}
   1b1aa:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b1b0 <bt_le_set_phy>:
{
   1b1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b1b4:	4680      	mov	r8, r0
   1b1b6:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1b1b8:	f242 0032 	movw	r0, #8242	; 0x2032
   1b1bc:	2107      	movs	r1, #7
{
   1b1be:	4616      	mov	r6, r2
   1b1c0:	461d      	mov	r5, r3
   1b1c2:	f89d 9020 	ldrb.w	r9, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1b1c6:	f7f3 f8cd 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
   1b1ca:	4604      	mov	r4, r0
   1b1cc:	b190      	cbz	r0, 1b1f4 <bt_le_set_phy+0x44>
   1b1ce:	2107      	movs	r1, #7
   1b1d0:	3008      	adds	r0, #8
   1b1d2:	f7f9 fcaf 	bl	14b34 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b1d6:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1b1da:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1b1dc:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1b1de:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1b1e0:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1b1e2:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1b1e6:	4621      	mov	r1, r4
}
   1b1e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1b1ec:	f242 0032 	movw	r0, #8242	; 0x2032
   1b1f0:	f7f3 bdfe 	b.w	edf0 <bt_hci_cmd_send>
}
   1b1f4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b1f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b1fc <bt_addr_le_is_bonded>:
}
   1b1fc:	2000      	movs	r0, #0
   1b1fe:	4770      	bx	lr

0001b200 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1b200:	6880      	ldr	r0, [r0, #8]
   1b202:	f7f4 be71 	b.w	fee8 <enh_conn_complete>

0001b206 <le_legacy_conn_complete>:
{
   1b206:	b510      	push	{r4, lr}
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1b208:	2400      	movs	r4, #0
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1b20a:	6881      	ldr	r1, [r0, #8]
{
   1b20c:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1b20e:	780b      	ldrb	r3, [r1, #0]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1b210:	a803      	add	r0, sp, #12
	enh.status         = evt->status;
   1b212:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1b216:	f8b1 3001 	ldrh.w	r3, [r1, #1]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1b21a:	3104      	adds	r1, #4
	enh.handle         = evt->handle;
   1b21c:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1b220:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   1b224:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1b228:	f8b1 3007 	ldrh.w	r3, [r1, #7]
   1b22c:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1b230:	f8b1 3009 	ldrh.w	r3, [r1, #9]
   1b234:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1b238:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1b23c:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1b240:	7b4b      	ldrb	r3, [r1, #13]
   1b242:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1b246:	f7ff ff02 	bl	1b04e <bt_addr_le_copy>
	memcpy(dst, src, sizeof(*dst));
   1b24a:	4669      	mov	r1, sp
   1b24c:	2206      	movs	r2, #6
   1b24e:	f10d 0013 	add.w	r0, sp, #19
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1b252:	9400      	str	r4, [sp, #0]
   1b254:	f8ad 4004 	strh.w	r4, [sp, #4]
   1b258:	f7ff fe09 	bl	1ae6e <memcpy>
   1b25c:	2206      	movs	r2, #6
   1b25e:	4669      	mov	r1, sp
   1b260:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1b264:	9400      	str	r4, [sp, #0]
   1b266:	f8ad 4004 	strh.w	r4, [sp, #4]
   1b26a:	f7ff fe00 	bl	1ae6e <memcpy>
	enh_conn_complete(&enh);
   1b26e:	a802      	add	r0, sp, #8
   1b270:	f7f4 fe3a 	bl	fee8 <enh_conn_complete>
}
   1b274:	b00a      	add	sp, #40	; 0x28
   1b276:	bd10      	pop	{r4, pc}

0001b278 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b278:	e8d0 0faf 	lda	r0, [r0]
}
   1b27c:	4770      	bx	lr

0001b27e <tx_notify>:
{
   1b27e:	b570      	push	{r4, r5, r6, lr}
   1b280:	4604      	mov	r4, r0
	__asm__ volatile(
   1b282:	f04f 0220 	mov.w	r2, #32
   1b286:	f3ef 8311 	mrs	r3, BASEPRI
   1b28a:	f382 8811 	msr	BASEPRI, r2
   1b28e:	f3bf 8f6f 	isb	sy
	return list->head;
   1b292:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1b294:	b920      	cbnz	r0, 1b2a0 <tx_notify+0x22>
	__asm__ volatile(
   1b296:	f383 8811 	msr	BASEPRI, r3
   1b29a:	f3bf 8f6f 	isb	sy
}
   1b29e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b2a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1b2a2:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b2a4:	4288      	cmp	r0, r1
	list->tail = node;
   1b2a6:	bf08      	it	eq
   1b2a8:	6262      	streq	r2, [r4, #36]	; 0x24
	list->head = node;
   1b2aa:	6222      	str	r2, [r4, #32]
   1b2ac:	f383 8811 	msr	BASEPRI, r3
   1b2b0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1b2b4:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1b2b8:	f7f5 f824 	bl	10304 <tx_free>
		cb(conn, user_data);
   1b2bc:	4631      	mov	r1, r6
   1b2be:	4620      	mov	r0, r4
   1b2c0:	47a8      	blx	r5
	while (1) {
   1b2c2:	e7de      	b.n	1b282 <tx_notify+0x4>

0001b2c4 <tx_complete_work>:
	tx_notify(conn);
   1b2c4:	3828      	subs	r0, #40	; 0x28
   1b2c6:	f7ff bfda 	b.w	1b27e <tx_notify>

0001b2ca <bt_conn_new>:
{
   1b2ca:	b538      	push	{r3, r4, r5, lr}
   1b2cc:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1b2ce:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b2d0:	2501      	movs	r5, #1
   1b2d2:	428b      	cmp	r3, r1
   1b2d4:	d102      	bne.n	1b2dc <bt_conn_new+0x12>
		return NULL;
   1b2d6:	2400      	movs	r4, #0
}
   1b2d8:	4620      	mov	r0, r4
   1b2da:	bd38      	pop	{r3, r4, r5, pc}
   1b2dc:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   1b2e0:	e8d2 0fef 	ldaex	r0, [r2]
   1b2e4:	2800      	cmp	r0, #0
   1b2e6:	d104      	bne.n	1b2f2 <bt_conn_new+0x28>
   1b2e8:	e8c2 5fec 	stlex	ip, r5, [r2]
   1b2ec:	f1bc 0f00 	cmp.w	ip, #0
   1b2f0:	d1f6      	bne.n	1b2e0 <bt_conn_new+0x16>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1b2f2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   1b2f6:	d002      	beq.n	1b2fe <bt_conn_new+0x34>
	for (i = 0; i < size; i++) {
   1b2f8:	4604      	mov	r4, r0
   1b2fa:	3301      	adds	r3, #1
   1b2fc:	e7e9      	b.n	1b2d2 <bt_conn_new+0x8>
	if (!conn) {
   1b2fe:	2c00      	cmp	r4, #0
   1b300:	d0ea      	beq.n	1b2d8 <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1b302:	22b8      	movs	r2, #184	; 0xb8
   1b304:	2100      	movs	r1, #0
   1b306:	4620      	mov	r0, r4
   1b308:	f7ff fddc 	bl	1aec4 <memset>
	return conn;
   1b30c:	e7e4      	b.n	1b2d8 <bt_conn_new+0xe>

0001b30e <bt_conn_get_security>:
}
   1b30e:	2001      	movs	r0, #1
   1b310:	4770      	bx	lr

0001b312 <bt_conn_reset_rx_state>:
{
   1b312:	b510      	push	{r4, lr}
   1b314:	4604      	mov	r4, r0
	if (!conn->rx) {
   1b316:	6900      	ldr	r0, [r0, #16]
   1b318:	b118      	cbz	r0, 1b322 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1b31a:	f7f9 faf5 	bl	14908 <net_buf_unref>
	conn->rx = NULL;
   1b31e:	2300      	movs	r3, #0
   1b320:	6123      	str	r3, [r4, #16]
}
   1b322:	bd10      	pop	{r4, pc}

0001b324 <bt_conn_is_peer_addr_le>:
{
   1b324:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1b326:	7a03      	ldrb	r3, [r0, #8]
{
   1b328:	4604      	mov	r4, r0
	if (id != conn->id) {
   1b32a:	428b      	cmp	r3, r1
{
   1b32c:	4615      	mov	r5, r2
	if (id != conn->id) {
   1b32e:	d115      	bne.n	1b35c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1b330:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1b334:	2207      	movs	r2, #7
   1b336:	4628      	mov	r0, r5
   1b338:	f7ff fd88 	bl	1ae4c <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1b33c:	b180      	cbz	r0, 1b360 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1b33e:	78e3      	ldrb	r3, [r4, #3]
   1b340:	2207      	movs	r2, #7
   1b342:	b943      	cbnz	r3, 1b356 <bt_conn_is_peer_addr_le+0x32>
   1b344:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1b348:	4628      	mov	r0, r5
   1b34a:	f7ff fd7f 	bl	1ae4c <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1b34e:	fab0 f080 	clz	r0, r0
   1b352:	0940      	lsrs	r0, r0, #5
}
   1b354:	bd38      	pop	{r3, r4, r5, pc}
   1b356:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1b35a:	e7f5      	b.n	1b348 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1b35c:	2000      	movs	r0, #0
   1b35e:	e7f9      	b.n	1b354 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1b360:	2001      	movs	r0, #1
   1b362:	e7f7      	b.n	1b354 <bt_conn_is_peer_addr_le+0x30>

0001b364 <bt_conn_ref>:
{
   1b364:	4603      	mov	r3, r0
   1b366:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1b368:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1b36c:	4610      	mov	r0, r2
   1b36e:	f7ff ff83 	bl	1b278 <atomic_get>
		if (!old) {
   1b372:	b160      	cbz	r0, 1b38e <bt_conn_ref+0x2a>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1b374:	1c41      	adds	r1, r0, #1
   1b376:	e8d2 4fef 	ldaex	r4, [r2]
   1b37a:	4284      	cmp	r4, r0
   1b37c:	d104      	bne.n	1b388 <bt_conn_ref+0x24>
   1b37e:	e8c2 1fec 	stlex	ip, r1, [r2]
   1b382:	f1bc 0f00 	cmp.w	ip, #0
   1b386:	d1f6      	bne.n	1b376 <bt_conn_ref+0x12>
   1b388:	d1f0      	bne.n	1b36c <bt_conn_ref+0x8>
}
   1b38a:	4618      	mov	r0, r3
   1b38c:	bd10      	pop	{r4, pc}
			return NULL;
   1b38e:	4603      	mov	r3, r0
   1b390:	e7fb      	b.n	1b38a <bt_conn_ref+0x26>

0001b392 <conn_lookup_handle>:
{
   1b392:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b396:	4607      	mov	r7, r0
   1b398:	460e      	mov	r6, r1
   1b39a:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1b39c:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1b39e:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1b3a2:	42b4      	cmp	r4, r6
   1b3a4:	d103      	bne.n	1b3ae <conn_lookup_handle+0x1c>
	return NULL;
   1b3a6:	2300      	movs	r3, #0
}
   1b3a8:	4618      	mov	r0, r3
   1b3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1b3ae:	fb09 7004 	mla	r0, r9, r4, r7
   1b3b2:	f7ff ffd7 	bl	1b364 <bt_conn_ref>
   1b3b6:	4603      	mov	r3, r0
		if (!conn) {
   1b3b8:	b158      	cbz	r0, 1b3d2 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1b3ba:	7a85      	ldrb	r5, [r0, #10]
   1b3bc:	2d01      	cmp	r5, #1
   1b3be:	d002      	beq.n	1b3c6 <conn_lookup_handle+0x34>
   1b3c0:	3d07      	subs	r5, #7
   1b3c2:	2d01      	cmp	r5, #1
   1b3c4:	d803      	bhi.n	1b3ce <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1b3c6:	881a      	ldrh	r2, [r3, #0]
   1b3c8:	4542      	cmp	r2, r8
   1b3ca:	d0ed      	beq.n	1b3a8 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1b3cc:	4618      	mov	r0, r3
   1b3ce:	f7f5 fa1d 	bl	1080c <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1b3d2:	3401      	adds	r4, #1
   1b3d4:	e7e5      	b.n	1b3a2 <conn_lookup_handle+0x10>

0001b3d6 <bt_conn_get_dst>:
}
   1b3d6:	3088      	adds	r0, #136	; 0x88
   1b3d8:	4770      	bx	lr

0001b3da <bt_conn_le_conn_update>:
{
   1b3da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b3dc:	4607      	mov	r7, r0
   1b3de:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1b3e0:	f242 0013 	movw	r0, #8211	; 0x2013
   1b3e4:	210e      	movs	r1, #14
   1b3e6:	f7f2 ffbd 	bl	e364 <bt_hci_cmd_create>
	if (!buf) {
   1b3ea:	4606      	mov	r6, r0
   1b3ec:	b1d0      	cbz	r0, 1b424 <bt_conn_le_conn_update+0x4a>
   1b3ee:	210e      	movs	r1, #14
   1b3f0:	3008      	adds	r0, #8
   1b3f2:	f7f9 fb9f 	bl	14b34 <net_buf_simple_add>
   1b3f6:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1b3f8:	220e      	movs	r2, #14
   1b3fa:	2100      	movs	r1, #0
   1b3fc:	f7ff fd62 	bl	1aec4 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1b400:	883b      	ldrh	r3, [r7, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b402:	4631      	mov	r1, r6
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1b404:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1b406:	882b      	ldrh	r3, [r5, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b408:	2200      	movs	r2, #0
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1b40a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1b40c:	886b      	ldrh	r3, [r5, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b40e:	f242 0013 	movw	r0, #8211	; 0x2013
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1b412:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1b414:	88ab      	ldrh	r3, [r5, #4]
   1b416:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1b418:	88eb      	ldrh	r3, [r5, #6]
   1b41a:	8123      	strh	r3, [r4, #8]
}
   1b41c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1b420:	f7f2 bfea 	b.w	e3f8 <bt_hci_cmd_send_sync>
}
   1b424:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1b428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b42a <l2cap_connected>:
}
   1b42a:	4770      	bx	lr

0001b42c <l2cap_disconnected>:
   1b42c:	4770      	bx	lr

0001b42e <bt_l2cap_chan_remove>:
	return list->head;
   1b42e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1b430:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b432:	b17b      	cbz	r3, 1b454 <bt_l2cap_chan_remove+0x26>
   1b434:	2200      	movs	r2, #0
   1b436:	3b08      	subs	r3, #8
   1b438:	b163      	cbz	r3, 1b454 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1b43a:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1b43c:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1b440:	d10e      	bne.n	1b460 <bt_l2cap_chan_remove+0x32>
	return node->next;
   1b442:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1b444:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1b446:	b932      	cbnz	r2, 1b456 <bt_l2cap_chan_remove+0x28>
   1b448:	42ac      	cmp	r4, r5
	list->head = node;
   1b44a:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1b44c:	d100      	bne.n	1b450 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1b44e:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1b450:	2200      	movs	r2, #0
   1b452:	609a      	str	r2, [r3, #8]
}
   1b454:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1b456:	42ac      	cmp	r4, r5
	parent->next = child;
   1b458:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1b45a:	bf08      	it	eq
   1b45c:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1b45e:	e7f7      	b.n	1b450 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b460:	2c00      	cmp	r4, #0
   1b462:	d0f7      	beq.n	1b454 <bt_l2cap_chan_remove+0x26>
	return node->next;
   1b464:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b466:	2b00      	cmp	r3, #0
   1b468:	d0f4      	beq.n	1b454 <bt_l2cap_chan_remove+0x26>
   1b46a:	4622      	mov	r2, r4
   1b46c:	3b08      	subs	r3, #8
   1b46e:	e7e3      	b.n	1b438 <bt_l2cap_chan_remove+0xa>

0001b470 <bt_l2cap_chan_del>:
{
   1b470:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1b472:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1b476:	4604      	mov	r4, r0
	if (!chan->conn) {
   1b478:	b123      	cbz	r3, 1b484 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1b47a:	686b      	ldr	r3, [r5, #4]
   1b47c:	b103      	cbz	r3, 1b480 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1b47e:	4798      	blx	r3
	chan->conn = NULL;
   1b480:	2300      	movs	r3, #0
   1b482:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1b484:	68e3      	ldr	r3, [r4, #12]
   1b486:	b10b      	cbz	r3, 1b48c <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1b488:	4620      	mov	r0, r4
   1b48a:	4798      	blx	r3
	if (ops->released) {
   1b48c:	69eb      	ldr	r3, [r5, #28]
   1b48e:	b11b      	cbz	r3, 1b498 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1b490:	4620      	mov	r0, r4
}
   1b492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1b496:	4718      	bx	r3
}
   1b498:	bd70      	pop	{r4, r5, r6, pc}

0001b49a <bt_l2cap_disconnected>:
	return list->head;
   1b49a:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1b49c:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1b49e:	b18b      	cbz	r3, 1b4c4 <bt_l2cap_disconnected+0x2a>
   1b4a0:	f1b3 0008 	subs.w	r0, r3, #8
   1b4a4:	d00e      	beq.n	1b4c4 <bt_l2cap_disconnected+0x2a>
	return node->next;
   1b4a6:	681c      	ldr	r4, [r3, #0]
   1b4a8:	b104      	cbz	r4, 1b4ac <bt_l2cap_disconnected+0x12>
   1b4aa:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1b4ac:	f7ff ffe0 	bl	1b470 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1b4b0:	b144      	cbz	r4, 1b4c4 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b4b2:	f114 0308 	adds.w	r3, r4, #8
   1b4b6:	d002      	beq.n	1b4be <bt_l2cap_disconnected+0x24>
	return node->next;
   1b4b8:	68a3      	ldr	r3, [r4, #8]
   1b4ba:	b103      	cbz	r3, 1b4be <bt_l2cap_disconnected+0x24>
   1b4bc:	3b08      	subs	r3, #8
{
   1b4be:	4620      	mov	r0, r4
   1b4c0:	461c      	mov	r4, r3
   1b4c2:	e7f3      	b.n	1b4ac <bt_l2cap_disconnected+0x12>
}
   1b4c4:	bd10      	pop	{r4, pc}

0001b4c6 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1b4c6:	3104      	adds	r1, #4
   1b4c8:	f7f5 bd2c 	b.w	10f24 <bt_conn_create_pdu_timeout>

0001b4cc <bt_l2cap_send_cb>:
{
   1b4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4d0:	4614      	mov	r4, r2
   1b4d2:	4605      	mov	r5, r0
   1b4d4:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1b4d6:	f102 0008 	add.w	r0, r2, #8
   1b4da:	2104      	movs	r1, #4
   1b4dc:	461e      	mov	r6, r3
   1b4de:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1b4e2:	f7f9 facf 	bl	14a84 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1b4e6:	89a2      	ldrh	r2, [r4, #12]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1b4e8:	4643      	mov	r3, r8
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1b4ea:	3a04      	subs	r2, #4
   1b4ec:	8002      	strh	r2, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   1b4ee:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1b4f0:	4632      	mov	r2, r6
   1b4f2:	4621      	mov	r1, r4
   1b4f4:	4628      	mov	r0, r5
}
   1b4f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1b4fa:	f7f5 b8c5 	b.w	10688 <bt_conn_send_cb>

0001b4fe <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1b4fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b500:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1b502:	2202      	movs	r2, #2
   1b504:	2001      	movs	r0, #1
   1b506:	f7f5 fe5f 	bl	111c8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1b50a:	4604      	mov	r4, r0
   1b50c:	b160      	cbz	r0, 1b528 <l2cap_send_reject.constprop.0+0x2a>
	return net_buf_simple_add(&buf->b, len);
   1b50e:	2102      	movs	r1, #2
   1b510:	3008      	adds	r0, #8
   1b512:	f7f9 fb0f 	bl	14b34 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1b516:	2300      	movs	r3, #0
   1b518:	4622      	mov	r2, r4
   1b51a:	7003      	strb	r3, [r0, #0]
   1b51c:	7043      	strb	r3, [r0, #1]
   1b51e:	2105      	movs	r1, #5
   1b520:	4628      	mov	r0, r5
   1b522:	9300      	str	r3, [sp, #0]
   1b524:	f7ff ffd2 	bl	1b4cc <bt_l2cap_send_cb>
}
   1b528:	b003      	add	sp, #12
   1b52a:	bd30      	pop	{r4, r5, pc}

0001b52c <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1b52c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b52e:	b160      	cbz	r0, 1b54a <bt_l2cap_le_lookup_tx_cid+0x1e>
   1b530:	3808      	subs	r0, #8
   1b532:	b900      	cbnz	r0, 1b536 <bt_l2cap_le_lookup_tx_cid+0xa>
   1b534:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1b536:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1b53a:	428b      	cmp	r3, r1
   1b53c:	d005      	beq.n	1b54a <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b53e:	f110 0308 	adds.w	r3, r0, #8
   1b542:	d001      	beq.n	1b548 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1b544:	6880      	ldr	r0, [r0, #8]
   1b546:	e7f2      	b.n	1b52e <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1b548:	4618      	mov	r0, r3
}
   1b54a:	4770      	bx	lr

0001b54c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1b54c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1b54e:	b160      	cbz	r0, 1b56a <bt_l2cap_le_lookup_rx_cid+0x1e>
   1b550:	3808      	subs	r0, #8
   1b552:	b900      	cbnz	r0, 1b556 <bt_l2cap_le_lookup_rx_cid+0xa>
   1b554:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1b556:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1b55a:	428b      	cmp	r3, r1
   1b55c:	d005      	beq.n	1b56a <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b55e:	f110 0308 	adds.w	r3, r0, #8
   1b562:	d001      	beq.n	1b568 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1b564:	6880      	ldr	r0, [r0, #8]
   1b566:	e7f2      	b.n	1b54e <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1b568:	4618      	mov	r0, r3
}
   1b56a:	4770      	bx	lr

0001b56c <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1b56c:	4770      	bx	lr

0001b56e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1b56e:	4603      	mov	r3, r0
	return list->head;
   1b570:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1b572:	b128      	cbz	r0, 1b580 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b574:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1b576:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b578:	4288      	cmp	r0, r1
	list->head = node;
   1b57a:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1b57c:	bf08      	it	eq
   1b57e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1b580:	4770      	bx	lr

0001b582 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1b582:	4603      	mov	r3, r0
	size_t bytes = 0;
   1b584:	2000      	movs	r0, #0

	while (buf) {
   1b586:	b903      	cbnz	r3, 1b58a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1b588:	4770      	bx	lr
		bytes += buf->len;
   1b58a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1b58c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1b58e:	4410      	add	r0, r2
		buf = buf->frags;
   1b590:	e7f9      	b.n	1b586 <net_buf_frags_len+0x4>

0001b592 <att_sent>:
	if (chan->ops->sent) {
   1b592:	684b      	ldr	r3, [r1, #4]
{
   1b594:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1b596:	695b      	ldr	r3, [r3, #20]
   1b598:	b103      	cbz	r3, 1b59c <att_sent+0xa>
		chan->ops->sent(chan);
   1b59a:	4718      	bx	r3
}
   1b59c:	4770      	bx	lr

0001b59e <attr_read_type_cb>:
{
   1b59e:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1b5a0:	68d4      	ldr	r4, [r2, #12]
   1b5a2:	3102      	adds	r1, #2
   1b5a4:	7823      	ldrb	r3, [r4, #0]
   1b5a6:	b913      	cbnz	r3, 1b5ae <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1b5a8:	7021      	strb	r1, [r4, #0]
	return true;
   1b5aa:	2001      	movs	r0, #1
   1b5ac:	e006      	b.n	1b5bc <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1b5ae:	428b      	cmp	r3, r1
   1b5b0:	d0fb      	beq.n	1b5aa <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1b5b2:	8983      	ldrh	r3, [r0, #12]
   1b5b4:	3b02      	subs	r3, #2
   1b5b6:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1b5b8:	2000      	movs	r0, #0
   1b5ba:	6110      	str	r0, [r2, #16]
}
   1b5bc:	bd10      	pop	{r4, pc}

0001b5be <att_prepare_write_req>:
}
   1b5be:	2006      	movs	r0, #6
   1b5c0:	4770      	bx	lr

0001b5c2 <att_op_get_type>:
	switch (op) {
   1b5c2:	281e      	cmp	r0, #30
   1b5c4:	d816      	bhi.n	1b5f4 <att_op_get_type+0x32>
   1b5c6:	b308      	cbz	r0, 1b60c <att_op_get_type+0x4a>
   1b5c8:	1e43      	subs	r3, r0, #1
   1b5ca:	2b1d      	cmp	r3, #29
   1b5cc:	d81e      	bhi.n	1b60c <att_op_get_type+0x4a>
   1b5ce:	e8df f003 	tbb	[pc, r3]
   1b5d2:	2317      	.short	0x2317
   1b5d4:	23172317 	.word	0x23172317
   1b5d8:	23172317 	.word	0x23172317
   1b5dc:	23172317 	.word	0x23172317
   1b5e0:	23172317 	.word	0x23172317
   1b5e4:	231d1d17 	.word	0x231d1d17
   1b5e8:	1d172317 	.word	0x1d172317
   1b5ec:	0f1b1d19 	.word	0x0f1b1d19
   1b5f0:	2004      	movs	r0, #4
   1b5f2:	4770      	bx	lr
   1b5f4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1b5f8:	2b52      	cmp	r3, #82	; 0x52
   1b5fa:	d107      	bne.n	1b60c <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1b5fc:	2000      	movs	r0, #0
}
   1b5fe:	4770      	bx	lr
		return ATT_RESPONSE;
   1b600:	2002      	movs	r0, #2
   1b602:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1b604:	2003      	movs	r0, #3
   1b606:	4770      	bx	lr
		return ATT_INDICATION;
   1b608:	2005      	movs	r0, #5
   1b60a:	4770      	bx	lr
		return ATT_COMMAND;
   1b60c:	f010 0f40 	tst.w	r0, #64	; 0x40
   1b610:	bf0c      	ite	eq
   1b612:	2006      	moveq	r0, #6
   1b614:	2000      	movne	r0, #0
   1b616:	4770      	bx	lr
		return ATT_REQUEST;
   1b618:	2001      	movs	r0, #1
   1b61a:	4770      	bx	lr

0001b61c <att_notify_mult>:
{
   1b61c:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   1b61e:	6803      	ldr	r3, [r0, #0]
   1b620:	898a      	ldrh	r2, [r1, #12]
   1b622:	6818      	ldr	r0, [r3, #0]
   1b624:	6889      	ldr	r1, [r1, #8]
   1b626:	f7f8 fe17 	bl	14258 <bt_gatt_mult_notification>
}
   1b62a:	2000      	movs	r0, #0
   1b62c:	bd08      	pop	{r3, pc}

0001b62e <att_notify>:
{
   1b62e:	b538      	push	{r3, r4, r5, lr}
   1b630:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1b632:	f101 0008 	add.w	r0, r1, #8
   1b636:	460c      	mov	r4, r1
   1b638:	f000 ff07 	bl	1c44a <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1b63c:	682d      	ldr	r5, [r5, #0]
   1b63e:	4601      	mov	r1, r0
   1b640:	89a3      	ldrh	r3, [r4, #12]
   1b642:	6828      	ldr	r0, [r5, #0]
   1b644:	68a2      	ldr	r2, [r4, #8]
   1b646:	f000 fe68 	bl	1c31a <bt_gatt_notification>
}
   1b64a:	2000      	movs	r0, #0
   1b64c:	bd38      	pop	{r3, r4, r5, pc}

0001b64e <bt_gatt_foreach_attr>:
{
   1b64e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1b650:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1b654:	2300      	movs	r3, #0
   1b656:	461a      	mov	r2, r3
   1b658:	9300      	str	r3, [sp, #0]
   1b65a:	f7f7 fd65 	bl	13128 <bt_gatt_foreach_attr_type>
}
   1b65e:	b005      	add	sp, #20
   1b660:	f85d fb04 	ldr.w	pc, [sp], #4

0001b664 <find_info_cb>:
{
   1b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1b666:	6893      	ldr	r3, [r2, #8]
{
   1b668:	4605      	mov	r5, r0
   1b66a:	460e      	mov	r6, r1
   1b66c:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1b66e:	6817      	ldr	r7, [r2, #0]
	if (!data->rsp) {
   1b670:	b963      	cbnz	r3, 1b68c <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1b672:	6850      	ldr	r0, [r2, #4]
   1b674:	2101      	movs	r1, #1
   1b676:	3008      	adds	r0, #8
   1b678:	f7f9 fa5c 	bl	14b34 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1b67c:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1b67e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1b680:	781b      	ldrb	r3, [r3, #0]
   1b682:	2b00      	cmp	r3, #0
   1b684:	bf0c      	ite	eq
   1b686:	2301      	moveq	r3, #1
   1b688:	2302      	movne	r3, #2
   1b68a:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1b68c:	68a3      	ldr	r3, [r4, #8]
   1b68e:	781b      	ldrb	r3, [r3, #0]
   1b690:	2b01      	cmp	r3, #1
   1b692:	d003      	beq.n	1b69c <find_info_cb+0x38>
   1b694:	2b02      	cmp	r3, #2
   1b696:	d019      	beq.n	1b6cc <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1b698:	2000      	movs	r0, #0
   1b69a:	e016      	b.n	1b6ca <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1b69c:	682b      	ldr	r3, [r5, #0]
   1b69e:	781b      	ldrb	r3, [r3, #0]
   1b6a0:	2b00      	cmp	r3, #0
   1b6a2:	d1f9      	bne.n	1b698 <find_info_cb+0x34>
   1b6a4:	6860      	ldr	r0, [r4, #4]
   1b6a6:	2104      	movs	r1, #4
   1b6a8:	3008      	adds	r0, #8
   1b6aa:	f7f9 fa43 	bl	14b34 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b6ae:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1b6b0:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b6b2:	885b      	ldrh	r3, [r3, #2]
		data->info16->handle = sys_cpu_to_le16(handle);
   1b6b4:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1b6b6:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1b6b8:	6863      	ldr	r3, [r4, #4]
   1b6ba:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1b6be:	899b      	ldrh	r3, [r3, #12]
   1b6c0:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1b6c2:	2804      	cmp	r0, #4
   1b6c4:	bf94      	ite	ls
   1b6c6:	2000      	movls	r0, #0
   1b6c8:	2001      	movhi	r0, #1
}
   1b6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1b6cc:	682b      	ldr	r3, [r5, #0]
   1b6ce:	781b      	ldrb	r3, [r3, #0]
   1b6d0:	2b02      	cmp	r3, #2
   1b6d2:	d1e1      	bne.n	1b698 <find_info_cb+0x34>
   1b6d4:	6860      	ldr	r0, [r4, #4]
   1b6d6:	2112      	movs	r1, #18
   1b6d8:	3008      	adds	r0, #8
   1b6da:	f7f9 fa2b 	bl	14b34 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b6de:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1b6e0:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b6e2:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1b6e4:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1b6e8:	3101      	adds	r1, #1
   1b6ea:	f7ff fbc0 	bl	1ae6e <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1b6ee:	6863      	ldr	r3, [r4, #4]
   1b6f0:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1b6f4:	899b      	ldrh	r3, [r3, #12]
   1b6f6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1b6f8:	2812      	cmp	r0, #18
   1b6fa:	e7e3      	b.n	1b6c4 <find_info_cb+0x60>

0001b6fc <attr_read_group_cb>:
	if (!data->rsp->len) {
   1b6fc:	68d0      	ldr	r0, [r2, #12]
   1b6fe:	3104      	adds	r1, #4
   1b700:	7803      	ldrb	r3, [r0, #0]
   1b702:	b913      	cbnz	r3, 1b70a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1b704:	7001      	strb	r1, [r0, #0]
	return true;
   1b706:	2001      	movs	r0, #1
}
   1b708:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1b70a:	428b      	cmp	r3, r1
   1b70c:	d0fb      	beq.n	1b706 <attr_read_group_cb+0xa>
		data->group = NULL;
   1b70e:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1b710:	6891      	ldr	r1, [r2, #8]
   1b712:	898b      	ldrh	r3, [r1, #12]
   1b714:	3b04      	subs	r3, #4
   1b716:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1b718:	6110      	str	r0, [r2, #16]
		return false;
   1b71a:	4770      	bx	lr

0001b71c <write_cb>:
{
   1b71c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b71e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1b720:	4601      	mov	r1, r0
{
   1b722:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1b724:	222a      	movs	r2, #42	; 0x2a
   1b726:	6820      	ldr	r0, [r4, #0]
   1b728:	f000 fd68 	bl	1c1fc <bt_gatt_check_perm>
   1b72c:	4605      	mov	r5, r0
   1b72e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1b730:	bb00      	cbnz	r0, 1b774 <write_cb+0x58>
	if (!data->req) {
   1b732:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1b734:	4631      	mov	r1, r6
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1b736:	2b00      	cmp	r3, #0
   1b738:	bf14      	ite	ne
   1b73a:	2300      	movne	r3, #0
   1b73c:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1b73e:	9301      	str	r3, [sp, #4]
   1b740:	8a63      	ldrh	r3, [r4, #18]
   1b742:	68b7      	ldr	r7, [r6, #8]
   1b744:	9300      	str	r3, [sp, #0]
   1b746:	68e2      	ldr	r2, [r4, #12]
   1b748:	8a23      	ldrh	r3, [r4, #16]
   1b74a:	6820      	ldr	r0, [r4, #0]
   1b74c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1b74e:	1e03      	subs	r3, r0, #0
   1b750:	db05      	blt.n	1b75e <write_cb+0x42>
   1b752:	8a22      	ldrh	r2, [r4, #16]
   1b754:	4293      	cmp	r3, r2
   1b756:	d10b      	bne.n	1b770 <write_cb+0x54>
	data->err = 0U;
   1b758:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1b75a:	2501      	movs	r5, #1
   1b75c:	e005      	b.n	1b76a <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1b75e:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1b762:	d305      	bcc.n	1b770 <write_cb+0x54>
		return -err;
   1b764:	425b      	negs	r3, r3
   1b766:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1b768:	7523      	strb	r3, [r4, #20]
}
   1b76a:	4628      	mov	r0, r5
   1b76c:	b003      	add	sp, #12
   1b76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1b770:	230e      	movs	r3, #14
   1b772:	e7f9      	b.n	1b768 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1b774:	2500      	movs	r5, #0
   1b776:	e7f8      	b.n	1b76a <write_cb+0x4e>

0001b778 <att_chan_read>:
{
   1b778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b77c:	4680      	mov	r8, r0
   1b77e:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b780:	4610      	mov	r0, r2
{
   1b782:	4699      	mov	r9, r3
   1b784:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b786:	f7ff fefc 	bl	1b582 <net_buf_frags_len>
   1b78a:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
{
   1b78e:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1b790:	4283      	cmp	r3, r0
   1b792:	d97a      	bls.n	1b88a <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b794:	f8d8 3008 	ldr.w	r3, [r8, #8]
	frag = net_buf_frag_last(buf);
   1b798:	4630      	mov	r0, r6
	struct bt_conn *conn = chan->chan.chan.conn;
   1b79a:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1b79c:	f7f9 f910 	bl	149c0 <net_buf_frag_last>
	size_t len, total = 0;
   1b7a0:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1b7a4:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b7a6:	4630      	mov	r0, r6
   1b7a8:	f7ff feeb 	bl	1b582 <net_buf_frags_len>
   1b7ac:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   1b7b0:	f105 0708 	add.w	r7, r5, #8
   1b7b4:	1a24      	subs	r4, r4, r0
   1b7b6:	4638      	mov	r0, r7
   1b7b8:	f000 fe53 	bl	1c462 <net_buf_simple_tailroom>
   1b7bc:	4284      	cmp	r4, r0
   1b7be:	d211      	bcs.n	1b7e4 <att_chan_read+0x6c>
   1b7c0:	4630      	mov	r0, r6
   1b7c2:	f7ff fede 	bl	1b582 <net_buf_frags_len>
   1b7c6:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1b7ca:	1a24      	subs	r4, r4, r0
		if (!len) {
   1b7cc:	bb34      	cbnz	r4, 1b81c <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1b7ce:	79b0      	ldrb	r0, [r6, #6]
   1b7d0:	f7f8 ff1a 	bl	14608 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1b7d4:	2200      	movs	r2, #0
   1b7d6:	2300      	movs	r3, #0
   1b7d8:	f000 fe1d 	bl	1c416 <net_buf_alloc_fixed>
			if (!frag) {
   1b7dc:	4605      	mov	r5, r0
   1b7de:	b930      	cbnz	r0, 1b7ee <att_chan_read+0x76>
	return total;
   1b7e0:	4657      	mov	r7, sl
   1b7e2:	e02c      	b.n	1b83e <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1b7e4:	4638      	mov	r0, r7
   1b7e6:	f000 fe3c 	bl	1c462 <net_buf_simple_tailroom>
   1b7ea:	4604      	mov	r4, r0
   1b7ec:	e7ee      	b.n	1b7cc <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1b7ee:	4601      	mov	r1, r0
   1b7f0:	4630      	mov	r0, r6
   1b7f2:	f7f9 f925 	bl	14a40 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1b7f6:	4630      	mov	r0, r6
   1b7f8:	f7ff fec3 	bl	1b582 <net_buf_frags_len>
   1b7fc:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1b800:	f105 0708 	add.w	r7, r5, #8
   1b804:	1a24      	subs	r4, r4, r0
   1b806:	4638      	mov	r0, r7
   1b808:	f000 fe2b 	bl	1c462 <net_buf_simple_tailroom>
   1b80c:	4284      	cmp	r4, r0
   1b80e:	d21a      	bcs.n	1b846 <att_chan_read+0xce>
   1b810:	4630      	mov	r0, r6
   1b812:	f7ff feb6 	bl	1b582 <net_buf_frags_len>
   1b816:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1b81a:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1b81c:	68a9      	ldr	r1, [r5, #8]
   1b81e:	89aa      	ldrh	r2, [r5, #12]
   1b820:	f8db 7004 	ldr.w	r7, [fp, #4]
   1b824:	440a      	add	r2, r1
   1b826:	9803      	ldr	r0, [sp, #12]
   1b828:	4659      	mov	r1, fp
   1b82a:	f8cd 9000 	str.w	r9, [sp]
   1b82e:	b2a3      	uxth	r3, r4
   1b830:	47b8      	blx	r7
		if (read < 0) {
   1b832:	1e07      	subs	r7, r0, #0
   1b834:	da0c      	bge.n	1b850 <att_chan_read+0xd8>
				return total;
   1b836:	f1ba 0f00 	cmp.w	sl, #0
   1b83a:	bf18      	it	ne
   1b83c:	4657      	movne	r7, sl
}
   1b83e:	4638      	mov	r0, r7
   1b840:	b005      	add	sp, #20
   1b842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b846:	4638      	mov	r0, r7
   1b848:	f000 fe0b 	bl	1c462 <net_buf_simple_tailroom>
   1b84c:	4604      	mov	r4, r0
   1b84e:	e7e5      	b.n	1b81c <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1b850:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b852:	b993      	cbnz	r3, 1b87a <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1b854:	4639      	mov	r1, r7
   1b856:	f105 0008 	add.w	r0, r5, #8
   1b85a:	f7f9 f96b 	bl	14b34 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b85e:	4630      	mov	r0, r6
   1b860:	f7ff fe8f 	bl	1b582 <net_buf_frags_len>
   1b864:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1b868:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b86a:	4283      	cmp	r3, r0
		total += read;
   1b86c:	44ba      	add	sl, r7
		offset += read;
   1b86e:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1b872:	d9b5      	bls.n	1b7e0 <att_chan_read+0x68>
   1b874:	42a7      	cmp	r7, r4
   1b876:	d096      	beq.n	1b7a6 <att_chan_read+0x2e>
   1b878:	e7b2      	b.n	1b7e0 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1b87a:	4639      	mov	r1, r7
   1b87c:	4628      	mov	r0, r5
   1b87e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1b880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b882:	4798      	blx	r3
   1b884:	2800      	cmp	r0, #0
   1b886:	d1e5      	bne.n	1b854 <att_chan_read+0xdc>
   1b888:	e7aa      	b.n	1b7e0 <att_chan_read+0x68>
		return 0;
   1b88a:	2700      	movs	r7, #0
   1b88c:	e7d7      	b.n	1b83e <att_chan_read+0xc6>

0001b88e <bt_att_chan_send>:
{
   1b88e:	b570      	push	{r4, r5, r6, lr}
   1b890:	4604      	mov	r4, r0
   1b892:	460e      	mov	r6, r1
	if (!cb) {
   1b894:	4615      	mov	r5, r2
   1b896:	b132      	cbz	r2, 1b8a6 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1b898:	462a      	mov	r2, r5
   1b89a:	4631      	mov	r1, r6
   1b89c:	4620      	mov	r0, r4
}
   1b89e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1b8a2:	f7f5 bfb5 	b.w	11810 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1b8a6:	2200      	movs	r2, #0
   1b8a8:	2300      	movs	r3, #0
   1b8aa:	f500 7090 	add.w	r0, r0, #288	; 0x120
   1b8ae:	f7fc ff05 	bl	186bc <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1b8b2:	2800      	cmp	r0, #0
   1b8b4:	daf0      	bge.n	1b898 <bt_att_chan_send+0xa>
}
   1b8b6:	f06f 000a 	mvn.w	r0, #10
   1b8ba:	bd70      	pop	{r4, r5, r6, pc}

0001b8bc <bt_att_chan_send_rsp>:
{
   1b8bc:	b538      	push	{r3, r4, r5, lr}
   1b8be:	4604      	mov	r4, r0
   1b8c0:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1b8c2:	f7ff ffe4 	bl	1b88e <bt_att_chan_send>
	if (err) {
   1b8c6:	b130      	cbz	r0, 1b8d6 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1b8c8:	4629      	mov	r1, r5
   1b8ca:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
}
   1b8ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1b8d2:	f7f8 bfeb 	b.w	148ac <net_buf_put>
}
   1b8d6:	bd38      	pop	{r3, r4, r5, pc}

0001b8d8 <process_queue>:
{
   1b8d8:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1b8da:	2200      	movs	r2, #0
{
   1b8dc:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1b8de:	2300      	movs	r3, #0
   1b8e0:	4608      	mov	r0, r1
{
   1b8e2:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1b8e4:	f7f8 ff8e 	bl	14804 <net_buf_get>
	if (buf) {
   1b8e8:	4605      	mov	r5, r0
   1b8ea:	b160      	cbz	r0, 1b906 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1b8ec:	4601      	mov	r1, r0
   1b8ee:	2200      	movs	r2, #0
   1b8f0:	4620      	mov	r0, r4
   1b8f2:	f7f5 ff8d 	bl	11810 <chan_send>
		if (err) {
   1b8f6:	4604      	mov	r4, r0
   1b8f8:	b118      	cbz	r0, 1b902 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1b8fa:	4629      	mov	r1, r5
   1b8fc:	4630      	mov	r0, r6
   1b8fe:	f001 fbfe 	bl	1d0fe <k_queue_prepend>
}
   1b902:	4620      	mov	r0, r4
   1b904:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1b906:	f06f 0401 	mvn.w	r4, #1
   1b90a:	e7fa      	b.n	1b902 <process_queue+0x2a>

0001b90c <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b90c:	2200      	movs	r2, #0
   1b90e:	b510      	push	{r4, lr}
	return list->head;
   1b910:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b912:	b153      	cbz	r3, 1b92a <sys_slist_find_and_remove.isra.0+0x1e>
   1b914:	428b      	cmp	r3, r1
   1b916:	d10e      	bne.n	1b936 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1b918:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1b91a:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b91c:	b932      	cbnz	r2, 1b92c <sys_slist_find_and_remove.isra.0+0x20>
   1b91e:	42a1      	cmp	r1, r4
	list->head = node;
   1b920:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1b922:	d100      	bne.n	1b926 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1b924:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1b926:	2300      	movs	r3, #0
   1b928:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b92a:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1b92c:	42a1      	cmp	r1, r4
	parent->next = child;
   1b92e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1b930:	bf08      	it	eq
   1b932:	6042      	streq	r2, [r0, #4]
}
   1b934:	e7f7      	b.n	1b926 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1b936:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1b938:	681b      	ldr	r3, [r3, #0]
   1b93a:	e7ea      	b.n	1b912 <sys_slist_find_and_remove.isra.0+0x6>

0001b93c <att_exec_write_req>:
   1b93c:	2006      	movs	r0, #6
   1b93e:	4770      	bx	lr

0001b940 <chan_req_send>:
{
   1b940:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b942:	690e      	ldr	r6, [r1, #16]
{
   1b944:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b946:	4630      	mov	r0, r6
   1b948:	f7ff fe1b 	bl	1b582 <net_buf_frags_len>
   1b94c:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
{
   1b950:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1b952:	4283      	cmp	r3, r0
   1b954:	d317      	bcc.n	1b986 <chan_req_send+0x46>
	chan->req = req;
   1b956:	f8c5 10cc 	str.w	r1, [r5, #204]	; 0xcc
	state->offset = net_buf_simple_headroom(buf);
   1b95a:	f106 0008 	add.w	r0, r6, #8
   1b95e:	f000 fd7c 	bl	1c45a <net_buf_simple_headroom>
	state->len = buf->len;
   1b962:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1b964:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1b966:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1b968:	6920      	ldr	r0, [r4, #16]
   1b96a:	f7f9 f811 	bl	14990 <net_buf_ref>
   1b96e:	2200      	movs	r2, #0
   1b970:	4601      	mov	r1, r0
   1b972:	4628      	mov	r0, r5
   1b974:	f7f5 ff4c 	bl	11810 <chan_send>
	if (err) {
   1b978:	4605      	mov	r5, r0
   1b97a:	b110      	cbz	r0, 1b982 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1b97c:	6920      	ldr	r0, [r4, #16]
   1b97e:	f7f8 ffc3 	bl	14908 <net_buf_unref>
}
   1b982:	4628      	mov	r0, r5
   1b984:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1b986:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1b98a:	e7fa      	b.n	1b982 <chan_req_send+0x42>

0001b98c <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b98c:	30c8      	adds	r0, #200	; 0xc8
   1b98e:	e8d0 3fef 	ldaex	r3, [r0]
   1b992:	f023 0301 	bic.w	r3, r3, #1
   1b996:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1b99a:	2a00      	cmp	r2, #0
   1b99c:	d1f7      	bne.n	1b98e <chan_rsp_sent+0x2>
}
   1b99e:	4770      	bx	lr

0001b9a0 <chan_cfm_sent>:
   1b9a0:	30c8      	adds	r0, #200	; 0xc8
   1b9a2:	e8d0 3fef 	ldaex	r3, [r0]
   1b9a6:	f023 0302 	bic.w	r3, r3, #2
   1b9aa:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1b9ae:	2a00      	cmp	r2, #0
   1b9b0:	d1f7      	bne.n	1b9a2 <chan_cfm_sent+0x2>
}
   1b9b2:	4770      	bx	lr

0001b9b4 <read_cb>:
{
   1b9b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b9b8:	4606      	mov	r6, r0
	data->err = 0x00;
   1b9ba:	2700      	movs	r7, #0
	struct bt_att_chan *chan = data->chan;
   1b9bc:	f8d2 8000 	ldr.w	r8, [r2]
{
   1b9c0:	4615      	mov	r5, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1b9c2:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b9c6:	4631      	mov	r1, r6
	data->err = 0x00;
   1b9c8:	7317      	strb	r7, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b9ca:	2215      	movs	r2, #21
   1b9cc:	f000 fc16 	bl	1c1fc <bt_gatt_check_perm>
   1b9d0:	4604      	mov	r4, r0
   1b9d2:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1b9d4:	b9a0      	cbnz	r0, 1ba00 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1b9d6:	e9cd 0000 	strd	r0, r0, [sp]
   1b9da:	88ab      	ldrh	r3, [r5, #4]
   1b9dc:	4631      	mov	r1, r6
   1b9de:	4640      	mov	r0, r8
   1b9e0:	68aa      	ldr	r2, [r5, #8]
   1b9e2:	f7ff fec9 	bl	1b778 <att_chan_read>
	if (ret < 0) {
   1b9e6:	1e03      	subs	r3, r0, #0
   1b9e8:	da0c      	bge.n	1ba04 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1b9ea:	f113 0fff 	cmn.w	r3, #255	; 0xff
	return BT_ATT_ERR_UNLIKELY;
   1b9ee:	bf32      	itee	cc
   1b9f0:	230e      	movcc	r3, #14
		return -err;
   1b9f2:	425b      	negcs	r3, r3
   1b9f4:	b2db      	uxtbcs	r3, r3
		data->err = err_to_att(ret);
   1b9f6:	732b      	strb	r3, [r5, #12]
}
   1b9f8:	4620      	mov	r0, r4
   1b9fa:	b002      	add	sp, #8
   1b9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1ba00:	463c      	mov	r4, r7
   1ba02:	e7f9      	b.n	1b9f8 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1ba04:	2401      	movs	r4, #1
   1ba06:	e7f7      	b.n	1b9f8 <read_cb+0x44>

0001ba08 <bt_att_sent>:
{
   1ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1ba0a:	f8d0 3130 	ldr.w	r3, [r0, #304]	; 0x130
{
   1ba0e:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1ba10:	f850 5c08 	ldr.w	r5, [r0, #-8]
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1ba14:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1ba18:	b10b      	cbz	r3, 1ba1e <bt_att_sent+0x16>
		chan->sent(chan);
   1ba1a:	4638      	mov	r0, r7
   1ba1c:	4798      	blx	r3
   1ba1e:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   1ba22:	e8d3 2fef 	ldaex	r2, [r3]
   1ba26:	f022 0210 	bic.w	r2, r2, #16
   1ba2a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1ba2e:	2900      	cmp	r1, #0
   1ba30:	d1f7      	bne.n	1ba22 <bt_att_sent+0x1a>
	if (!att) {
   1ba32:	b335      	cbz	r5, 1ba82 <bt_att_sent+0x7a>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1ba34:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1ba38:	b98b      	cbnz	r3, 1ba5e <bt_att_sent+0x56>
   1ba3a:	686b      	ldr	r3, [r5, #4]
   1ba3c:	b17b      	cbz	r3, 1ba5e <bt_att_sent+0x56>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1ba3e:	1d28      	adds	r0, r5, #4
   1ba40:	f7ff fd95 	bl	1b56e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ba44:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1ba46:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ba48:	4638      	mov	r0, r7
   1ba4a:	f7ff ff79 	bl	1b940 <chan_req_send>
   1ba4e:	2800      	cmp	r0, #0
   1ba50:	da17      	bge.n	1ba82 <bt_att_sent+0x7a>
	parent->next = child;
   1ba52:	686b      	ldr	r3, [r5, #4]
   1ba54:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ba56:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1ba58:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ba5a:	b903      	cbnz	r3, 1ba5e <bt_att_sent+0x56>
	list->tail = node;
   1ba5c:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1ba5e:	4638      	mov	r0, r7
   1ba60:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   1ba64:	f7ff ff38 	bl	1b8d8 <process_queue>
	if (!err) {
   1ba68:	b158      	cbz	r0, 1ba82 <bt_att_sent+0x7a>
	err = process_queue(chan, &att->tx_queue);
   1ba6a:	4638      	mov	r0, r7
   1ba6c:	f105 010c 	add.w	r1, r5, #12
   1ba70:	f7ff ff32 	bl	1b8d8 <process_queue>
	if (!err) {
   1ba74:	b128      	cbz	r0, 1ba82 <bt_att_sent+0x7a>
	z_impl_k_sem_give(sem);
   1ba76:	f504 708c 	add.w	r0, r4, #280	; 0x118
}
   1ba7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ba7e:	f7fc bde1 	b.w	18644 <z_impl_k_sem_give>
   1ba82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ba84 <att_req_send_process>:
{
   1ba84:	b570      	push	{r4, r5, r6, lr}
   1ba86:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1ba88:	3004      	adds	r0, #4
   1ba8a:	f7ff fd70 	bl	1b56e <sys_slist_get>
	if (!node) {
   1ba8e:	4606      	mov	r6, r0
   1ba90:	b1c0      	cbz	r0, 1bac4 <att_req_send_process+0x40>
	return list->head;
   1ba92:	6aab      	ldr	r3, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ba94:	b153      	cbz	r3, 1baac <att_req_send_process+0x28>
   1ba96:	f5b3 709e 	subs.w	r0, r3, #316	; 0x13c
   1ba9a:	d007      	beq.n	1baac <att_req_send_process+0x28>
	return node->next;
   1ba9c:	681c      	ldr	r4, [r3, #0]
   1ba9e:	b10c      	cbz	r4, 1baa4 <att_req_send_process+0x20>
   1baa0:	f5a4 749e 	sub.w	r4, r4, #316	; 0x13c
		if (!chan->req) {
   1baa4:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   1baa8:	b13b      	cbz	r3, 1baba <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1baaa:	b964      	cbnz	r4, 1bac6 <att_req_send_process+0x42>
	parent->next = child;
   1baac:	686b      	ldr	r3, [r5, #4]
   1baae:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1bab0:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1bab2:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1bab4:	b933      	cbnz	r3, 1bac4 <att_req_send_process+0x40>
	list->tail = node;
   1bab6:	60ae      	str	r6, [r5, #8]
}
   1bab8:	e004      	b.n	1bac4 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1baba:	4631      	mov	r1, r6
   1babc:	f7f5 ff14 	bl	118e8 <bt_att_chan_req_send>
   1bac0:	2800      	cmp	r0, #0
   1bac2:	dbf2      	blt.n	1baaa <att_req_send_process+0x26>
}
   1bac4:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bac6:	f514 739e 	adds.w	r3, r4, #316	; 0x13c
   1baca:	d004      	beq.n	1bad6 <att_req_send_process+0x52>
	return node->next;
   1bacc:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bad0:	b10b      	cbz	r3, 1bad6 <att_req_send_process+0x52>
   1bad2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
{
   1bad6:	4620      	mov	r0, r4
   1bad8:	461c      	mov	r4, r3
   1bada:	e7e3      	b.n	1baa4 <att_req_send_process+0x20>

0001badc <bt_att_status>:
{
   1badc:	b538      	push	{r3, r4, r5, lr}
   1bade:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bae0:	e8d1 3faf 	lda	r3, [r1]
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1bae4:	07db      	lsls	r3, r3, #31
   1bae6:	d519      	bpl.n	1bb1c <bt_att_status+0x40>
	if (!chan->att) {
   1bae8:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1baec:	b1b0      	cbz	r0, 1bb1c <bt_att_status+0x40>
	if (chan->req) {
   1baee:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
   1baf2:	b99b      	cbnz	r3, 1bb1c <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1baf4:	3004      	adds	r0, #4
   1baf6:	f7ff fd3a 	bl	1b56e <sys_slist_get>
	if (!node) {
   1bafa:	4604      	mov	r4, r0
   1bafc:	b170      	cbz	r0, 1bb1c <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1bafe:	4601      	mov	r1, r0
   1bb00:	f1a5 0008 	sub.w	r0, r5, #8
   1bb04:	f7f5 fef0 	bl	118e8 <bt_att_chan_req_send>
   1bb08:	2800      	cmp	r0, #0
   1bb0a:	da07      	bge.n	1bb1c <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1bb0c:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1bb10:	685a      	ldr	r2, [r3, #4]
   1bb12:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1bb14:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1bb16:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1bb18:	b902      	cbnz	r2, 1bb1c <bt_att_status+0x40>
	list->tail = node;
   1bb1a:	609c      	str	r4, [r3, #8]
}
   1bb1c:	bd38      	pop	{r3, r4, r5, pc}

0001bb1e <att_write_req>:
{
   1bb1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bb20:	460c      	mov	r4, r1
   1bb22:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1bb24:	f101 0008 	add.w	r0, r1, #8
   1bb28:	f000 fc8f 	bl	1c44a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1bb2c:	89a2      	ldrh	r2, [r4, #12]
   1bb2e:	4603      	mov	r3, r0
   1bb30:	9201      	str	r2, [sp, #4]
   1bb32:	68a2      	ldr	r2, [r4, #8]
   1bb34:	2112      	movs	r1, #18
   1bb36:	9200      	str	r2, [sp, #0]
   1bb38:	4628      	mov	r0, r5
   1bb3a:	2213      	movs	r2, #19
   1bb3c:	f7f6 f8b2 	bl	11ca4 <att_write_rsp.constprop.0>
}
   1bb40:	b003      	add	sp, #12
   1bb42:	bd30      	pop	{r4, r5, pc}

0001bb44 <att_write_cmd>:
{
   1bb44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bb46:	460c      	mov	r4, r1
   1bb48:	4605      	mov	r5, r0
   1bb4a:	f101 0008 	add.w	r0, r1, #8
   1bb4e:	f000 fc7c 	bl	1c44a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1bb52:	89a2      	ldrh	r2, [r4, #12]
   1bb54:	4603      	mov	r3, r0
   1bb56:	9201      	str	r2, [sp, #4]
   1bb58:	68a2      	ldr	r2, [r4, #8]
   1bb5a:	4628      	mov	r0, r5
   1bb5c:	9200      	str	r2, [sp, #0]
   1bb5e:	2200      	movs	r2, #0
   1bb60:	4611      	mov	r1, r2
   1bb62:	f7f6 f89f 	bl	11ca4 <att_write_rsp.constprop.0>
}
   1bb66:	b003      	add	sp, #12
   1bb68:	bd30      	pop	{r4, r5, pc}

0001bb6a <att_read_blob_req>:
{
   1bb6a:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1bb6c:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1bb6e:	210c      	movs	r1, #12
   1bb70:	8813      	ldrh	r3, [r2, #0]
   1bb72:	8852      	ldrh	r2, [r2, #2]
   1bb74:	9200      	str	r2, [sp, #0]
   1bb76:	220d      	movs	r2, #13
   1bb78:	f7f6 f9f0 	bl	11f5c <att_read_rsp>
}
   1bb7c:	b003      	add	sp, #12
   1bb7e:	f85d fb04 	ldr.w	pc, [sp], #4

0001bb82 <att_read_req>:
{
   1bb82:	b507      	push	{r0, r1, r2, lr}
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1bb84:	2200      	movs	r2, #0
	handle = sys_le16_to_cpu(req->handle);
   1bb86:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1bb88:	210a      	movs	r1, #10
   1bb8a:	881b      	ldrh	r3, [r3, #0]
   1bb8c:	9200      	str	r2, [sp, #0]
   1bb8e:	220b      	movs	r2, #11
   1bb90:	f7f6 f9e4 	bl	11f5c <att_read_rsp>
}
   1bb94:	b003      	add	sp, #12
   1bb96:	f85d fb04 	ldr.w	pc, [sp], #4

0001bb9a <bt_att_init>:
	bt_gatt_init();
   1bb9a:	f7f7 ba19 	b.w	12fd0 <bt_gatt_init>

0001bb9e <att_req_destroy>:
{
   1bb9e:	b510      	push	{r4, lr}
   1bba0:	4604      	mov	r4, r0
	if (req->buf) {
   1bba2:	6900      	ldr	r0, [r0, #16]
   1bba4:	b108      	cbz	r0, 1bbaa <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1bba6:	f7f8 feaf 	bl	14908 <net_buf_unref>
	if (req->destroy) {
   1bbaa:	68a3      	ldr	r3, [r4, #8]
   1bbac:	b10b      	cbz	r3, 1bbb2 <att_req_destroy+0x14>
		req->destroy(req);
   1bbae:	4620      	mov	r0, r4
   1bbb0:	4798      	blx	r3
	bt_att_req_free(req);
   1bbb2:	4620      	mov	r0, r4
}
   1bbb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1bbb8:	f7f6 bb6e 	b.w	12298 <bt_att_req_free>

0001bbbc <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1bbbc:	898a      	ldrh	r2, [r1, #12]
   1bbbe:	2300      	movs	r3, #0
   1bbc0:	6889      	ldr	r1, [r1, #8]
   1bbc2:	f7f6 bb75 	b.w	122b0 <att_handle_rsp>

0001bbc6 <att_handle_find_type_rsp>:
   1bbc6:	f7ff bff9 	b.w	1bbbc <att_handle_find_info_rsp>

0001bbca <att_handle_read_type_rsp>:
   1bbca:	f7ff bff7 	b.w	1bbbc <att_handle_find_info_rsp>

0001bbce <att_handle_read_rsp>:
   1bbce:	f7ff bff5 	b.w	1bbbc <att_handle_find_info_rsp>

0001bbd2 <att_handle_read_blob_rsp>:
   1bbd2:	f7ff bff3 	b.w	1bbbc <att_handle_find_info_rsp>

0001bbd6 <att_handle_read_mult_rsp>:
   1bbd6:	f7ff bff1 	b.w	1bbbc <att_handle_find_info_rsp>

0001bbda <att_handle_read_group_rsp>:
   1bbda:	f7ff bfef 	b.w	1bbbc <att_handle_find_info_rsp>

0001bbde <att_handle_write_rsp>:
   1bbde:	f7ff bfed 	b.w	1bbbc <att_handle_find_info_rsp>

0001bbe2 <att_handle_prepare_write_rsp>:
   1bbe2:	f7ff bfeb 	b.w	1bbbc <att_handle_find_info_rsp>

0001bbe6 <att_handle_exec_write_rsp>:
   1bbe6:	f7ff bfe9 	b.w	1bbbc <att_handle_find_info_rsp>

0001bbea <att_confirm>:
   1bbea:	f7ff bfe7 	b.w	1bbbc <att_handle_find_info_rsp>

0001bbee <att_mtu_rsp>:
{
   1bbee:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   1bbf0:	6889      	ldr	r1, [r1, #8]
{
   1bbf2:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1bbf4:	880c      	ldrh	r4, [r1, #0]
{
   1bbf6:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   1bbf8:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1bbfa:	bf89      	itett	hi
   1bbfc:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1bbfe:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   1bc00:	f8a3 4052 	strhhi.w	r4, [r3, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1bc04:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   1bc08:	bf99      	ittee	ls
   1bc0a:	2304      	movls	r3, #4
   1bc0c:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1bc0e:	2300      	movhi	r3, #0
   1bc10:	8992      	ldrhhi	r2, [r2, #12]
}
   1bc12:	bc10      	pop	{r4}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   1bc14:	f7f6 bb4c 	b.w	122b0 <att_handle_rsp>

0001bc18 <att_chan_detach>:
{
   1bc18:	b538      	push	{r3, r4, r5, lr}
   1bc1a:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1bc1c:	6800      	ldr	r0, [r0, #0]
   1bc1e:	f504 719e 	add.w	r1, r4, #316	; 0x13c
   1bc22:	3028      	adds	r0, #40	; 0x28
   1bc24:	f7ff fe72 	bl	1b90c <sys_slist_find_and_remove.isra.0>
		k_sem_give(&chan->tx_sem);
   1bc28:	f504 7590 	add.w	r5, r4, #288	; 0x120
   1bc2c:	4628      	mov	r0, r5
   1bc2e:	f7fc fd09 	bl	18644 <z_impl_k_sem_give>
   1bc32:	4628      	mov	r0, r5
   1bc34:	f7fc fd06 	bl	18644 <z_impl_k_sem_give>
   1bc38:	4628      	mov	r0, r5
   1bc3a:	f7fc fd03 	bl	18644 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1bc3e:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
   1bc42:	2200      	movs	r2, #0
   1bc44:	2300      	movs	r3, #0
   1bc46:	4628      	mov	r0, r5
   1bc48:	f7f8 fddc 	bl	14804 <net_buf_get>
   1bc4c:	4602      	mov	r2, r0
   1bc4e:	b950      	cbnz	r0, 1bc66 <att_chan_detach+0x4e>
	if (chan->req) {
   1bc50:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   1bc54:	b123      	cbz	r3, 1bc60 <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1bc56:	4601      	mov	r1, r0
   1bc58:	230e      	movs	r3, #14
   1bc5a:	4620      	mov	r0, r4
   1bc5c:	f7f6 fb28 	bl	122b0 <att_handle_rsp>
	chan->att = NULL;
   1bc60:	2300      	movs	r3, #0
   1bc62:	6023      	str	r3, [r4, #0]
}
   1bc64:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1bc66:	f7f8 fe4f 	bl	14908 <net_buf_unref>
   1bc6a:	e7ea      	b.n	1bc42 <att_chan_detach+0x2a>

0001bc6c <bt_att_disconnected>:
{
   1bc6c:	b538      	push	{r3, r4, r5, lr}
   1bc6e:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1bc70:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1bc74:	f7ff ffd0 	bl	1bc18 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1bc78:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1bc7a:	b93b      	cbnz	r3, 1bc8c <bt_att_disconnected+0x20>
	att_reset(att);
   1bc7c:	4628      	mov	r0, r5
   1bc7e:	f7f6 fb75 	bl	1236c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1bc82:	6820      	ldr	r0, [r4, #0]
}
   1bc84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1bc88:	f7f8 bbea 	b.w	14460 <bt_gatt_disconnected>
}
   1bc8c:	bd38      	pop	{r3, r4, r5, pc}

0001bc8e <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1bc8e:	6010      	str	r0, [r2, #0]
}
   1bc90:	2000      	movs	r0, #0
   1bc92:	4770      	bx	lr

0001bc94 <gatt_ccc_changed>:
{
   1bc94:	460b      	mov	r3, r1
   1bc96:	460a      	mov	r2, r1
   1bc98:	b430      	push	{r4, r5}
   1bc9a:	f101 0464 	add.w	r4, r1, #100	; 0x64
	uint16_t value = 0x0000;
   1bc9e:	2100      	movs	r1, #0
		if (ccc->cfg[i].value > value) {
   1bca0:	8915      	ldrh	r5, [r2, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bca2:	320a      	adds	r2, #10
   1bca4:	42a9      	cmp	r1, r5
   1bca6:	bf38      	it	cc
   1bca8:	4629      	movcc	r1, r5
   1bcaa:	42a2      	cmp	r2, r4
   1bcac:	d1f8      	bne.n	1bca0 <gatt_ccc_changed+0xc>
	if (value != ccc->value) {
   1bcae:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
   1bcb2:	428a      	cmp	r2, r1
   1bcb4:	d005      	beq.n	1bcc2 <gatt_ccc_changed+0x2e>
		ccc->value = value;
   1bcb6:	f8a3 1064 	strh.w	r1, [r3, #100]	; 0x64
		if (ccc->cfg_changed) {
   1bcba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1bcbc:	b10b      	cbz	r3, 1bcc2 <gatt_ccc_changed+0x2e>
}
   1bcbe:	bc30      	pop	{r4, r5}
			ccc->cfg_changed(attr, value);
   1bcc0:	4718      	bx	r3
}
   1bcc2:	bc30      	pop	{r4, r5}
   1bcc4:	4770      	bx	lr

0001bcc6 <gatt_indicate_rsp>:
{
   1bcc6:	b510      	push	{r4, lr}
   1bcc8:	9c02      	ldr	r4, [sp, #8]
   1bcca:	460a      	mov	r2, r1
	params->_ref--;
   1bccc:	7da3      	ldrb	r3, [r4, #22]
	params->func(conn, params, err);
   1bcce:	4621      	mov	r1, r4
	params->_ref--;
   1bcd0:	3b01      	subs	r3, #1
   1bcd2:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   1bcd4:	68a3      	ldr	r3, [r4, #8]
   1bcd6:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   1bcd8:	68e3      	ldr	r3, [r4, #12]
   1bcda:	b12b      	cbz	r3, 1bce8 <gatt_indicate_rsp+0x22>
   1bcdc:	7da2      	ldrb	r2, [r4, #22]
   1bcde:	b91a      	cbnz	r2, 1bce8 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   1bce0:	4620      	mov	r0, r4
}
   1bce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1bce6:	4718      	bx	r3
}
   1bce8:	bd10      	pop	{r4, pc}

0001bcea <match_uuid>:
	data->attr = attr;
   1bcea:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1bcec:	8091      	strh	r1, [r2, #4]
}
   1bcee:	2000      	movs	r0, #0
   1bcf0:	4770      	bx	lr

0001bcf2 <ccc_set_cb>:
}
   1bcf2:	2000      	movs	r0, #0
   1bcf4:	4770      	bx	lr

0001bcf6 <gen_hash_m>:
{
   1bcf6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1bcf8:	6807      	ldr	r7, [r0, #0]
{
   1bcfa:	4606      	mov	r6, r0
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1bcfc:	783d      	ldrb	r5, [r7, #0]
{
   1bcfe:	4614      	mov	r4, r2
   1bd00:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1bd02:	b10d      	cbz	r5, 1bd08 <gen_hash_m+0x12>
	switch (u16->val) {
   1bd04:	2501      	movs	r5, #1
   1bd06:	e014      	b.n	1bd32 <gen_hash_m+0x3c>
   1bd08:	887b      	ldrh	r3, [r7, #2]
   1bd0a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1bd0e:	d004      	beq.n	1bd1a <gen_hash_m+0x24>
   1bd10:	d812      	bhi.n	1bd38 <gen_hash_m+0x42>
   1bd12:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1bd16:	2b03      	cmp	r3, #3
   1bd18:	d8f4      	bhi.n	1bd04 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1bd1a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bd1e:	2202      	movs	r2, #2
   1bd20:	4620      	mov	r0, r4
   1bd22:	f10d 010e 	add.w	r1, sp, #14
   1bd26:	f7fe fcf6 	bl	1a716 <tc_cmac_update>
   1bd2a:	b9e0      	cbnz	r0, 1bd66 <gen_hash_m+0x70>
			state->err = -EINVAL;
   1bd2c:	f06f 0315 	mvn.w	r3, #21
   1bd30:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1bd32:	4628      	mov	r0, r5
   1bd34:	b009      	add	sp, #36	; 0x24
   1bd36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1bd38:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1bd3c:	33ff      	adds	r3, #255	; 0xff
   1bd3e:	b29b      	uxth	r3, r3
   1bd40:	2b04      	cmp	r3, #4
   1bd42:	d8df      	bhi.n	1bd04 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1bd44:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bd48:	2202      	movs	r2, #2
   1bd4a:	4620      	mov	r0, r4
   1bd4c:	f10d 010e 	add.w	r1, sp, #14
   1bd50:	f7fe fce1 	bl	1a716 <tc_cmac_update>
   1bd54:	2800      	cmp	r0, #0
   1bd56:	d0e9      	beq.n	1bd2c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1bd58:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bd5a:	2202      	movs	r2, #2
		value = sys_cpu_to_le16(u16->val);
   1bd5c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bd60:	f10d 010e 	add.w	r1, sp, #14
   1bd64:	e017      	b.n	1bd96 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1bd66:	887b      	ldrh	r3, [r7, #2]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bd68:	2202      	movs	r2, #2
   1bd6a:	4620      	mov	r0, r4
   1bd6c:	f10d 010e 	add.w	r1, sp, #14
		value = sys_cpu_to_le16(u16->val);
   1bd70:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bd74:	f7fe fccf 	bl	1a716 <tc_cmac_update>
   1bd78:	2800      	cmp	r0, #0
   1bd7a:	d0d7      	beq.n	1bd2c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1bd7c:	2000      	movs	r0, #0
   1bd7e:	2310      	movs	r3, #16
   1bd80:	4631      	mov	r1, r6
   1bd82:	eb0d 0203 	add.w	r2, sp, r3
   1bd86:	6877      	ldr	r7, [r6, #4]
   1bd88:	9000      	str	r0, [sp, #0]
   1bd8a:	47b8      	blx	r7
		if (len < 0) {
   1bd8c:	1e02      	subs	r2, r0, #0
   1bd8e:	da01      	bge.n	1bd94 <gen_hash_m+0x9e>
			state->err = len;
   1bd90:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1bd92:	e7ce      	b.n	1bd32 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1bd94:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1bd96:	4620      	mov	r0, r4
   1bd98:	f7fe fcbd 	bl	1a716 <tc_cmac_update>
   1bd9c:	2800      	cmp	r0, #0
   1bd9e:	d1b1      	bne.n	1bd04 <gen_hash_m+0xe>
   1bda0:	e7c4      	b.n	1bd2c <gen_hash_m+0x36>

0001bda2 <bt_addr_le_cmp>:
   1bda2:	2207      	movs	r2, #7
   1bda4:	f7ff b852 	b.w	1ae4c <memcmp>

0001bda8 <find_ccc_cfg>:
{
   1bda8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1bdaa:	4606      	mov	r6, r0
   1bdac:	1c4c      	adds	r4, r1, #1
   1bdae:	f101 0565 	add.w	r5, r1, #101	; 0x65
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1bdb2:	1e67      	subs	r7, r4, #1
		if (conn) {
   1bdb4:	b14e      	cbz	r6, 1bdca <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1bdb6:	4622      	mov	r2, r4
   1bdb8:	4630      	mov	r0, r6
   1bdba:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1bdbe:	f7ff fab1 	bl	1b324 <bt_conn_is_peer_addr_le>
   1bdc2:	b158      	cbz	r0, 1bddc <find_ccc_cfg+0x34>
}
   1bdc4:	4638      	mov	r0, r7
   1bdc6:	b003      	add	sp, #12
   1bdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bdca:	4669      	mov	r1, sp
   1bdcc:	4620      	mov	r0, r4
   1bdce:	9600      	str	r6, [sp, #0]
   1bdd0:	f8cd 6003 	str.w	r6, [sp, #3]
   1bdd4:	f7ff ffe5 	bl	1bda2 <bt_addr_le_cmp>
   1bdd8:	2800      	cmp	r0, #0
   1bdda:	d0f3      	beq.n	1bdc4 <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bddc:	340a      	adds	r4, #10
   1bdde:	42ac      	cmp	r4, r5
   1bde0:	d1e7      	bne.n	1bdb2 <find_ccc_cfg+0xa>
	return NULL;
   1bde2:	2700      	movs	r7, #0
   1bde4:	e7ee      	b.n	1bdc4 <find_ccc_cfg+0x1c>

0001bde6 <ccc_find_cfg>:
{
   1bde6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bdea:	4604      	mov	r4, r0
   1bdec:	460f      	mov	r7, r1
   1bdee:	4690      	mov	r8, r2
   1bdf0:	2500      	movs	r5, #0
   1bdf2:	1c46      	adds	r6, r0, #1
		if (id == ccc->cfg[i].id &&
   1bdf4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   1bdf8:	4543      	cmp	r3, r8
   1bdfa:	d107      	bne.n	1be0c <ccc_find_cfg+0x26>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1bdfc:	4639      	mov	r1, r7
   1bdfe:	4630      	mov	r0, r6
   1be00:	f7ff ffcf 	bl	1bda2 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1be04:	b910      	cbnz	r0, 1be0c <ccc_find_cfg+0x26>
			return &ccc->cfg[i];
   1be06:	1960      	adds	r0, r4, r5
}
   1be08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1be0c:	350a      	adds	r5, #10
   1be0e:	2d64      	cmp	r5, #100	; 0x64
   1be10:	f106 060a 	add.w	r6, r6, #10
   1be14:	d1ee      	bne.n	1bdf4 <ccc_find_cfg+0xe>
	return NULL;
   1be16:	2000      	movs	r0, #0
   1be18:	e7f6      	b.n	1be08 <ccc_find_cfg+0x22>

0001be1a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1be1a:	2207      	movs	r2, #7
   1be1c:	f7ff b827 	b.w	1ae6e <memcpy>

0001be20 <clear_ccc_cfg>:
{
   1be20:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1be22:	2500      	movs	r5, #0
{
   1be24:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1be26:	4669      	mov	r1, sp
   1be28:	3001      	adds	r0, #1
   1be2a:	9500      	str	r5, [sp, #0]
   1be2c:	f8cd 5003 	str.w	r5, [sp, #3]
   1be30:	f7ff fff3 	bl	1be1a <bt_addr_le_copy>
	cfg->id = 0U;
   1be34:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1be36:	8125      	strh	r5, [r4, #8]
}
   1be38:	b003      	add	sp, #12
   1be3a:	bd30      	pop	{r4, r5, pc}

0001be3c <atomic_or>:
{
   1be3c:	4603      	mov	r3, r0
}
   1be3e:	e8d3 0fef 	ldaex	r0, [r3]
   1be42:	ea40 0201 	orr.w	r2, r0, r1
   1be46:	e8c3 2fec 	stlex	ip, r2, [r3]
   1be4a:	f1bc 0f00 	cmp.w	ip, #0
   1be4e:	d1f6      	bne.n	1be3e <atomic_or+0x2>
   1be50:	4770      	bx	lr

0001be52 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1be52:	e8d0 0faf 	lda	r0, [r0]
}
   1be56:	4770      	bx	lr

0001be58 <gatt_sub_remove.part.0>:
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1be58:	2300      	movs	r3, #0
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   1be5a:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1be5c:	3001      	adds	r0, #1
   1be5e:	4669      	mov	r1, sp
   1be60:	9300      	str	r3, [sp, #0]
   1be62:	f8cd 3003 	str.w	r3, [sp, #3]
   1be66:	f7ff ffd8 	bl	1be1a <bt_addr_le_copy>
}
   1be6a:	b003      	add	sp, #12
   1be6c:	f85d fb04 	ldr.w	pc, [sp], #4

0001be70 <clear_cf_cfg>:
{
   1be70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1be72:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1be74:	2500      	movs	r5, #0
   1be76:	4669      	mov	r1, sp
   1be78:	3001      	adds	r0, #1
   1be7a:	9500      	str	r5, [sp, #0]
   1be7c:	f8cd 5003 	str.w	r5, [sp, #3]
   1be80:	f7ff ffcb 	bl	1be1a <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1be84:	f104 0008 	add.w	r0, r4, #8
   1be88:	2201      	movs	r2, #1
   1be8a:	4629      	mov	r1, r5
   1be8c:	f7ff f81a 	bl	1aec4 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1be90:	340c      	adds	r4, #12
   1be92:	e8d4 3fef 	ldaex	r3, [r4]
   1be96:	e8c4 5fe2 	stlex	r2, r5, [r4]
   1be9a:	2a00      	cmp	r2, #0
   1be9c:	d1f9      	bne.n	1be92 <clear_cf_cfg+0x22>
}
   1be9e:	b003      	add	sp, #12
   1bea0:	bd30      	pop	{r4, r5, pc}

0001bea2 <gatt_sub_remove>:
{
   1bea2:	b570      	push	{r4, r5, r6, lr}
   1bea4:	460c      	mov	r4, r1
	if (params) {
   1bea6:	4619      	mov	r1, r3
   1bea8:	b16b      	cbz	r3, 1bec6 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   1beaa:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   1beae:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   1beb0:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   1beb2:	b97a      	cbnz	r2, 1bed4 <gatt_sub_remove+0x32>
   1beb4:	42ae      	cmp	r6, r5
	list->head = node;
   1beb6:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   1beb8:	d100      	bne.n	1bebc <gatt_sub_remove+0x1a>
	list->tail = node;
   1beba:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   1bebc:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   1bebe:	680d      	ldr	r5, [r1, #0]
   1bec0:	461a      	mov	r2, r3
   1bec2:	614b      	str	r3, [r1, #20]
   1bec4:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   1bec6:	68a3      	ldr	r3, [r4, #8]
   1bec8:	b94b      	cbnz	r3, 1bede <gatt_sub_remove+0x3c>
   1beca:	4620      	mov	r0, r4
}
   1becc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1bed0:	f7ff bfc2 	b.w	1be58 <gatt_sub_remove.part.0>
Z_GENLIST_REMOVE(slist, snode)
   1bed4:	42ae      	cmp	r6, r5
	parent->next = child;
   1bed6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1bed8:	bf08      	it	eq
   1beda:	60e2      	streq	r2, [r4, #12]
}
   1bedc:	e7ee      	b.n	1bebc <gatt_sub_remove+0x1a>
   1bede:	bd70      	pop	{r4, r5, r6, pc}

0001bee0 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1bee0:	2a02      	cmp	r2, #2
{
   1bee2:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1bee4:	d108      	bne.n	1bef8 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1bee6:	2300      	movs	r3, #0
   1bee8:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1beec:	461a      	mov	r2, r3
   1beee:	7a00      	ldrb	r0, [r0, #8]
   1bef0:	f7f6 fcd4 	bl	1289c <sc_save>
}
   1bef4:	2002      	movs	r0, #2
   1bef6:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1bef8:	f7f6 ff84 	bl	12e04 <sc_clear>
   1befc:	e7fa      	b.n	1bef4 <sc_ccc_cfg_write+0x14>

0001befe <gatt_write_ccc_rsp>:
{
   1befe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf02:	4606      	mov	r6, r0
   1bf04:	460d      	mov	r5, r1
   1bf06:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bf08:	f104 0310 	add.w	r3, r4, #16
   1bf0c:	e8d3 2fef 	ldaex	r2, [r3]
   1bf10:	f022 0204 	bic.w	r2, r2, #4
   1bf14:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1bf18:	2900      	cmp	r1, #0
   1bf1a:	d1f7      	bne.n	1bf0c <gatt_write_ccc_rsp+0xe>
	if (err) {
   1bf1c:	b1dd      	cbz	r5, 1bf56 <gatt_write_ccc_rsp+0x58>
		sub = gatt_sub_find(conn);
   1bf1e:	f7f6 fba7 	bl	12670 <gatt_sub_find>
		if (!sub) {
   1bf22:	4601      	mov	r1, r0
   1bf24:	b300      	cbz	r0, 1bf68 <gatt_write_ccc_rsp+0x6a>
	return list->head;
   1bf26:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bf28:	b143      	cbz	r3, 1bf3c <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1bf2a:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1bf2c:	f104 0014 	add.w	r0, r4, #20
   1bf30:	4283      	cmp	r3, r0
   1bf32:	d10b      	bne.n	1bf4c <gatt_write_ccc_rsp+0x4e>
				gatt_sub_remove(conn, sub, tmp, params);
   1bf34:	4623      	mov	r3, r4
   1bf36:	4630      	mov	r0, r6
   1bf38:	f7ff ffb3 	bl	1bea2 <gatt_sub_remove>
	if (params->write) {
   1bf3c:	6863      	ldr	r3, [r4, #4]
   1bf3e:	b19b      	cbz	r3, 1bf68 <gatt_write_ccc_rsp+0x6a>
		params->write(conn, err, NULL);
   1bf40:	4629      	mov	r1, r5
   1bf42:	4630      	mov	r0, r6
}
   1bf44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1bf48:	2200      	movs	r2, #0
   1bf4a:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bf4c:	2a00      	cmp	r2, #0
   1bf4e:	d0f5      	beq.n	1bf3c <gatt_write_ccc_rsp+0x3e>
	return node->next;
   1bf50:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bf52:	6812      	ldr	r2, [r2, #0]
   1bf54:	e7ec      	b.n	1bf30 <gatt_write_ccc_rsp+0x32>
	} else if (!params->value) {
   1bf56:	89a3      	ldrh	r3, [r4, #12]
   1bf58:	2b00      	cmp	r3, #0
   1bf5a:	d1ef      	bne.n	1bf3c <gatt_write_ccc_rsp+0x3e>
		params->notify(conn, params, NULL, 0);
   1bf5c:	462b      	mov	r3, r5
   1bf5e:	462a      	mov	r2, r5
   1bf60:	4621      	mov	r1, r4
   1bf62:	6827      	ldr	r7, [r4, #0]
   1bf64:	47b8      	blx	r7
   1bf66:	e7e9      	b.n	1bf3c <gatt_write_ccc_rsp+0x3e>
}
   1bf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bf6c <read_ppcp>:
{
   1bf6c:	b513      	push	{r0, r1, r4, lr}
   1bf6e:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1bf70:	2218      	movs	r2, #24
   1bf72:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1bf76:	2228      	movs	r2, #40	; 0x28
   1bf78:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1bf7c:	2200      	movs	r2, #0
   1bf7e:	f8ad 2004 	strh.w	r2, [sp, #4]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1bf82:	222a      	movs	r2, #42	; 0x2a
{
   1bf84:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1bf88:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1bf8c:	2908      	cmp	r1, #8
   1bf8e:	d80b      	bhi.n	1bfa8 <read_ppcp+0x3c>
	len = MIN(buf_len, value_len - offset);
   1bf90:	f1c1 0408 	rsb	r4, r1, #8
   1bf94:	429c      	cmp	r4, r3
   1bf96:	bfa8      	it	ge
   1bf98:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1bf9a:	4469      	add	r1, sp
   1bf9c:	4622      	mov	r2, r4
   1bf9e:	f7fe ff66 	bl	1ae6e <memcpy>
}
   1bfa2:	4620      	mov	r0, r4
   1bfa4:	b002      	add	sp, #8
   1bfa6:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bfa8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1bfac:	e7f9      	b.n	1bfa2 <read_ppcp+0x36>

0001bfae <read_appearance>:
{
   1bfae:	b513      	push	{r0, r1, r4, lr}
   1bfb0:	4610      	mov	r0, r2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1bfb2:	2200      	movs	r2, #0
{
   1bfb4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1bfb8:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1bfbc:	2902      	cmp	r1, #2
   1bfbe:	d80d      	bhi.n	1bfdc <read_appearance+0x2e>
	len = MIN(buf_len, value_len - offset);
   1bfc0:	f1c1 0402 	rsb	r4, r1, #2
   1bfc4:	429c      	cmp	r4, r3
   1bfc6:	bfa8      	it	ge
   1bfc8:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1bfca:	f10d 0306 	add.w	r3, sp, #6
   1bfce:	4622      	mov	r2, r4
   1bfd0:	4419      	add	r1, r3
   1bfd2:	f7fe ff4c 	bl	1ae6e <memcpy>
}
   1bfd6:	4620      	mov	r0, r4
   1bfd8:	b002      	add	sp, #8
   1bfda:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bfdc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1bfe0:	e7f9      	b.n	1bfd6 <read_appearance+0x28>

0001bfe2 <read_name>:
{
   1bfe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bfe6:	4698      	mov	r8, r3
   1bfe8:	4615      	mov	r5, r2
   1bfea:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	const char *name = bt_get_name();
   1bfee:	f7f3 fcc9 	bl	f984 <bt_get_name>
   1bff2:	4607      	mov	r7, r0
				 strlen(name));
   1bff4:	f7fe fefd 	bl	1adf2 <strlen>
	if (offset > value_len) {
   1bff8:	b283      	uxth	r3, r0
   1bffa:	42b3      	cmp	r3, r6
   1bffc:	d30c      	bcc.n	1c018 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1bffe:	1b9c      	subs	r4, r3, r6
   1c000:	4544      	cmp	r4, r8
   1c002:	bfa8      	it	ge
   1c004:	4644      	movge	r4, r8
   1c006:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1c008:	4622      	mov	r2, r4
   1c00a:	4628      	mov	r0, r5
   1c00c:	19b9      	adds	r1, r7, r6
   1c00e:	f7fe ff2e 	bl	1ae6e <memcpy>
}
   1c012:	4620      	mov	r0, r4
   1c014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c018:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1c01c:	e7f9      	b.n	1c012 <read_name+0x30>

0001c01e <cf_read>:
{
   1c01e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c020:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1c022:	2300      	movs	r3, #0
{
   1c024:	4615      	mov	r5, r2
   1c026:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1c02a:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg = find_cf_cfg(conn);
   1c02e:	f7f6 fae1 	bl	125f4 <find_cf_cfg>
	if (cfg) {
   1c032:	b128      	cbz	r0, 1c040 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1c034:	f100 0108 	add.w	r1, r0, #8
   1c038:	2201      	movs	r2, #1
   1c03a:	a801      	add	r0, sp, #4
   1c03c:	f7fe ff17 	bl	1ae6e <memcpy>
	if (offset > value_len) {
   1c040:	2e01      	cmp	r6, #1
   1c042:	d80d      	bhi.n	1c060 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1c044:	f1c6 0401 	rsb	r4, r6, #1
   1c048:	42bc      	cmp	r4, r7
   1c04a:	bfa8      	it	ge
   1c04c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1c04e:	ab01      	add	r3, sp, #4
   1c050:	4622      	mov	r2, r4
   1c052:	4628      	mov	r0, r5
   1c054:	1999      	adds	r1, r3, r6
   1c056:	f7fe ff0a 	bl	1ae6e <memcpy>
}
   1c05a:	4620      	mov	r0, r4
   1c05c:	b003      	add	sp, #12
   1c05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c060:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1c064:	e7f9      	b.n	1c05a <cf_read+0x3c>

0001c066 <bt_gatt_attr_read_service>:
{
   1c066:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1c068:	68c9      	ldr	r1, [r1, #12]
{
   1c06a:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1c06c:	780b      	ldrb	r3, [r1, #0]
{
   1c06e:	4610      	mov	r0, r2
   1c070:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   1c074:	b993      	cbnz	r3, 1c09c <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1c076:	884b      	ldrh	r3, [r1, #2]
	if (offset > value_len) {
   1c078:	2d02      	cmp	r5, #2
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1c07a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1c07e:	d819      	bhi.n	1c0b4 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1c080:	f1c5 0202 	rsb	r2, r5, #2
   1c084:	4294      	cmp	r4, r2
   1c086:	bfa8      	it	ge
   1c088:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1c08a:	4622      	mov	r2, r4
   1c08c:	f10d 0306 	add.w	r3, sp, #6
   1c090:	1959      	adds	r1, r3, r5
   1c092:	f7fe feec 	bl	1ae6e <memcpy>
}
   1c096:	4620      	mov	r0, r4
   1c098:	b003      	add	sp, #12
   1c09a:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1c09c:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1c09e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1c0a2:	d807      	bhi.n	1c0b4 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1c0a4:	f1c5 0210 	rsb	r2, r5, #16
   1c0a8:	4294      	cmp	r4, r2
   1c0aa:	bfa8      	it	ge
   1c0ac:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1c0ae:	4429      	add	r1, r5
   1c0b0:	4622      	mov	r2, r4
   1c0b2:	e7ee      	b.n	1c092 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c0b4:	f06f 0406 	mvn.w	r4, #6
   1c0b8:	e7ed      	b.n	1c096 <bt_gatt_attr_read_service+0x30>

0001c0ba <bt_gatt_attr_read_ccc>:
{
   1c0ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1c0bc:	68c9      	ldr	r1, [r1, #12]
{
   1c0be:	4615      	mov	r5, r2
   1c0c0:	461f      	mov	r7, r3
   1c0c2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	cfg = find_ccc_cfg(conn, ccc);
   1c0c6:	f7ff fe6f 	bl	1bda8 <find_ccc_cfg>
	if (cfg) {
   1c0ca:	b100      	cbz	r0, 1c0ce <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1c0cc:	8900      	ldrh	r0, [r0, #8]
	if (offset > value_len) {
   1c0ce:	2e02      	cmp	r6, #2
   1c0d0:	f8ad 0006 	strh.w	r0, [sp, #6]
   1c0d4:	d80e      	bhi.n	1c0f4 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1c0d6:	f1c6 0402 	rsb	r4, r6, #2
   1c0da:	42bc      	cmp	r4, r7
   1c0dc:	bfa8      	it	ge
   1c0de:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1c0e0:	f10d 0306 	add.w	r3, sp, #6
   1c0e4:	4622      	mov	r2, r4
   1c0e6:	4628      	mov	r0, r5
   1c0e8:	1999      	adds	r1, r3, r6
   1c0ea:	f7fe fec0 	bl	1ae6e <memcpy>
}
   1c0ee:	4620      	mov	r0, r4
   1c0f0:	b003      	add	sp, #12
   1c0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c0f4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1c0f8:	e7f9      	b.n	1c0ee <bt_gatt_attr_read_ccc+0x34>

0001c0fa <sc_restore_rsp>:
{
   1c0fa:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1c0fc:	f7f6 fa7a 	bl	125f4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1c100:	b140      	cbz	r0, 1c114 <sc_restore_rsp+0x1a>
   1c102:	7a03      	ldrb	r3, [r0, #8]
   1c104:	07db      	lsls	r3, r3, #31
   1c106:	d505      	bpl.n	1c114 <sc_restore_rsp+0x1a>
}
   1c108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c10c:	2101      	movs	r1, #1
   1c10e:	300c      	adds	r0, #12
   1c110:	f7ff be94 	b.w	1be3c <atomic_or>
   1c114:	bd08      	pop	{r3, pc}

0001c116 <bt_gatt_attr_read>:
{
   1c116:	b538      	push	{r3, r4, r5, lr}
   1c118:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1c11c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1c120:	4610      	mov	r0, r2
	if (offset > value_len) {
   1c122:	42a9      	cmp	r1, r5
   1c124:	d80b      	bhi.n	1c13e <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1c126:	1a6d      	subs	r5, r5, r1
   1c128:	429d      	cmp	r5, r3
   1c12a:	bfa8      	it	ge
   1c12c:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1c12e:	9b05      	ldr	r3, [sp, #20]
   1c130:	b2ad      	uxth	r5, r5
   1c132:	462a      	mov	r2, r5
   1c134:	4419      	add	r1, r3
   1c136:	f7fe fe9a 	bl	1ae6e <memcpy>
}
   1c13a:	4628      	mov	r0, r5
   1c13c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c13e:	f06f 0506 	mvn.w	r5, #6
   1c142:	e7fa      	b.n	1c13a <bt_gatt_attr_read+0x24>

0001c144 <bt_gatt_attr_value_handle>:
{
   1c144:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1c146:	4604      	mov	r4, r0
   1c148:	b910      	cbnz	r0, 1c150 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1c14a:	2000      	movs	r0, #0
}
   1c14c:	b002      	add	sp, #8
   1c14e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1c150:	2300      	movs	r3, #0
   1c152:	f88d 3004 	strb.w	r3, [sp, #4]
   1c156:	f642 0303 	movw	r3, #10243	; 0x2803
   1c15a:	6800      	ldr	r0, [r0, #0]
   1c15c:	a901      	add	r1, sp, #4
   1c15e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1c162:	f7fe fef9 	bl	1af58 <bt_uuid_cmp>
   1c166:	2800      	cmp	r0, #0
   1c168:	d1ef      	bne.n	1c14a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1c16a:	68e3      	ldr	r3, [r4, #12]
   1c16c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1c16e:	2800      	cmp	r0, #0
   1c170:	d1ec      	bne.n	1c14c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1c172:	4620      	mov	r0, r4
   1c174:	f7f6 ff94 	bl	130a0 <bt_gatt_attr_get_handle>
   1c178:	3001      	adds	r0, #1
   1c17a:	b280      	uxth	r0, r0
	return handle;
   1c17c:	e7e6      	b.n	1c14c <bt_gatt_attr_value_handle+0x8>

0001c17e <bt_gatt_attr_read_chrc>:
{
   1c17e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1c180:	68cf      	ldr	r7, [r1, #12]
{
   1c182:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1c184:	79bb      	ldrb	r3, [r7, #6]
{
   1c186:	b087      	sub	sp, #28
   1c188:	4608      	mov	r0, r1
	pdu.properties = chrc->properties;
   1c18a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1c18e:	4615      	mov	r5, r2
   1c190:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1c194:	f7ff ffd6 	bl	1c144 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1c198:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1c19a:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1c19e:	780b      	ldrb	r3, [r1, #0]
   1c1a0:	b99b      	cbnz	r3, 1c1ca <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1c1a2:	884b      	ldrh	r3, [r1, #2]
		value_len += 2U;
   1c1a4:	2105      	movs	r1, #5
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1c1a6:	f8ad 3007 	strh.w	r3, [sp, #7]
	if (offset > value_len) {
   1c1aa:	42b1      	cmp	r1, r6
   1c1ac:	d315      	bcc.n	1c1da <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1c1ae:	1b89      	subs	r1, r1, r6
   1c1b0:	42a1      	cmp	r1, r4
   1c1b2:	bfa8      	it	ge
   1c1b4:	4621      	movge	r1, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1c1b6:	ab01      	add	r3, sp, #4
   1c1b8:	b28c      	uxth	r4, r1
   1c1ba:	4622      	mov	r2, r4
   1c1bc:	4628      	mov	r0, r5
   1c1be:	1999      	adds	r1, r3, r6
   1c1c0:	f7fe fe55 	bl	1ae6e <memcpy>
}
   1c1c4:	4620      	mov	r0, r4
   1c1c6:	b007      	add	sp, #28
   1c1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1c1ca:	3101      	adds	r1, #1
   1c1cc:	2210      	movs	r2, #16
   1c1ce:	f10d 0007 	add.w	r0, sp, #7
   1c1d2:	f7fe fe4c 	bl	1ae6e <memcpy>
		value_len += 16U;
   1c1d6:	2113      	movs	r1, #19
   1c1d8:	e7e7      	b.n	1c1aa <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c1da:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1c1de:	e7f1      	b.n	1c1c4 <bt_gatt_attr_read_chrc+0x46>

0001c1e0 <bt_gatt_foreach_attr>:
{
   1c1e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c1e2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1c1e6:	2300      	movs	r3, #0
   1c1e8:	461a      	mov	r2, r3
   1c1ea:	9300      	str	r3, [sp, #0]
   1c1ec:	f7f6 ff9c 	bl	13128 <bt_gatt_foreach_attr_type>
}
   1c1f0:	b005      	add	sp, #20
   1c1f2:	f85d fb04 	ldr.w	pc, [sp], #4

0001c1f6 <db_hash_process>:
	db_hash_gen(true);
   1c1f6:	2001      	movs	r0, #1
   1c1f8:	f7f7 b802 	b.w	13200 <db_hash_gen>

0001c1fc <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1c1fc:	07d3      	lsls	r3, r2, #31
{
   1c1fe:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1c200:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1c202:	d504      	bpl.n	1c20e <bt_gatt_check_perm+0x12>
   1c204:	f014 0f15 	tst.w	r4, #21
   1c208:	d017      	beq.n	1c23a <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1c20a:	684b      	ldr	r3, [r1, #4]
   1c20c:	b1ab      	cbz	r3, 1c23a <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1c20e:	0793      	lsls	r3, r2, #30
   1c210:	d504      	bpl.n	1c21c <bt_gatt_check_perm+0x20>
   1c212:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   1c216:	d012      	beq.n	1c23e <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1c218:	688b      	ldr	r3, [r1, #8]
   1c21a:	b183      	cbz	r3, 1c23e <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   1c21c:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1c21e:	f014 0f30 	tst.w	r4, #48	; 0x30
   1c222:	d104      	bne.n	1c22e <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1c224:	f014 000c 	ands.w	r0, r4, #12
   1c228:	bf18      	it	ne
   1c22a:	200f      	movne	r0, #15
}
   1c22c:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1c22e:	f7ff f86e 	bl	1b30e <bt_conn_get_security>
   1c232:	2802      	cmp	r0, #2
   1c234:	d8f6      	bhi.n	1c224 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   1c236:	2005      	movs	r0, #5
   1c238:	e7f8      	b.n	1c22c <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1c23a:	2002      	movs	r0, #2
   1c23c:	e7f6      	b.n	1c22c <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1c23e:	2003      	movs	r0, #3
   1c240:	e7f4      	b.n	1c22c <bt_gatt_check_perm+0x30>

0001c242 <gatt_discover_next>:
{
   1c242:	b570      	push	{r4, r5, r6, lr}
   1c244:	4605      	mov	r5, r0
   1c246:	4614      	mov	r4, r2
	if (!last_handle)
   1c248:	b929      	cbnz	r1, 1c256 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   1c24a:	4621      	mov	r1, r4
   1c24c:	4628      	mov	r0, r5
   1c24e:	f7f7 fb2f 	bl	138b0 <bt_gatt_discover>
   1c252:	b928      	cbnz	r0, 1c260 <gatt_discover_next+0x1e>
}
   1c254:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   1c256:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c25a:	4291      	cmp	r1, r2
   1c25c:	d107      	bne.n	1c26e <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   1c25e:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   1c260:	4622      	mov	r2, r4
   1c262:	4628      	mov	r0, r5
   1c264:	6863      	ldr	r3, [r4, #4]
   1c266:	2100      	movs	r1, #0
}
   1c268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   1c26c:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   1c26e:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   1c270:	1c4b      	adds	r3, r1, #1
   1c272:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   1c274:	429a      	cmp	r2, r3
		params->start_handle++;
   1c276:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   1c278:	d2e7      	bcs.n	1c24a <gatt_discover_next+0x8>
   1c27a:	e7f1      	b.n	1c260 <gatt_discover_next+0x1e>

0001c27c <gatt_find_type_rsp>:
{
   1c27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c280:	b088      	sub	sp, #32
   1c282:	4607      	mov	r7, r0
   1c284:	4614      	mov	r4, r2
   1c286:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   1c28a:	b911      	cbnz	r1, 1c292 <gatt_find_type_rsp+0x16>
   1c28c:	f013 0803 	ands.w	r8, r3, #3
   1c290:	d008      	beq.n	1c2a4 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   1c292:	464a      	mov	r2, r9
   1c294:	2100      	movs	r1, #0
   1c296:	4638      	mov	r0, r7
   1c298:	f8d9 3004 	ldr.w	r3, [r9, #4]
}
   1c29c:	b008      	add	sp, #32
   1c29e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   1c2a2:	4718      	bx	r3
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1c2a4:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1c2a6:	f642 0a01 	movw	sl, #10241	; 0x2801
   1c2aa:	f3c3 0387 	ubfx	r3, r3, #2, #8
   1c2ae:	eb02 0583 	add.w	r5, r2, r3, lsl #2
	for (uint8_t i = 0U; i < count; i++) {
   1c2b2:	42ac      	cmp	r4, r5
   1c2b4:	d107      	bne.n	1c2c6 <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   1c2b6:	464a      	mov	r2, r9
   1c2b8:	4641      	mov	r1, r8
   1c2ba:	4638      	mov	r0, r7
}
   1c2bc:	b008      	add	sp, #32
   1c2be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   1c2c2:	f7ff bfbe 	b.w	1c242 <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1c2c6:	f899 1010 	ldrb.w	r1, [r9, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1c2ca:	8863      	ldrh	r3, [r4, #2]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1c2cc:	2900      	cmp	r1, #0
   1c2ce:	bf0c      	ite	eq
   1c2d0:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   1c2d4:	4651      	movne	r1, sl
		value.end_handle = end_handle;
   1c2d6:	f8ad 3008 	strh.w	r3, [sp, #8]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   1c2da:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   1c2de:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   1c2e2:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   1c2e4:	9301      	str	r3, [sp, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1c2e6:	ab01      	add	r3, sp, #4
   1c2e8:	f8ad 1002 	strh.w	r1, [sp, #2]
   1c2ec:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   1c2ee:	f8ad 201c 	strh.w	r2, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c2f2:	4638      	mov	r0, r7
   1c2f4:	464a      	mov	r2, r9
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1c2f6:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c2fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1c2fe:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   1c302:	f8cd d00c 	str.w	sp, [sp, #12]
   1c306:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c30a:	a903      	add	r1, sp, #12
   1c30c:	4798      	blx	r3
   1c30e:	3404      	adds	r4, #4
   1c310:	2800      	cmp	r0, #0
   1c312:	d1ce      	bne.n	1c2b2 <gatt_find_type_rsp+0x36>
}
   1c314:	b008      	add	sp, #32
   1c316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c31a <bt_gatt_notification>:
{
   1c31a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c31e:	4607      	mov	r7, r0
   1c320:	4688      	mov	r8, r1
   1c322:	4691      	mov	r9, r2
   1c324:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   1c326:	f7f6 f9a3 	bl	12670 <gatt_sub_find>
	if (!sub) {
   1c32a:	b1f8      	cbz	r0, 1c36c <bt_gatt_notification+0x52>
	return list->head;
   1c32c:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c32e:	b1eb      	cbz	r3, 1c36c <bt_gatt_notification+0x52>
   1c330:	f1b3 0614 	subs.w	r6, r3, #20
   1c334:	d01a      	beq.n	1c36c <bt_gatt_notification+0x52>
	return node->next;
   1c336:	681c      	ldr	r4, [r3, #0]
   1c338:	b104      	cbz	r4, 1c33c <bt_gatt_notification+0x22>
   1c33a:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   1c33c:	8933      	ldrh	r3, [r6, #8]
   1c33e:	4543      	cmp	r3, r8
   1c340:	d10a      	bne.n	1c358 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   1c342:	4653      	mov	r3, sl
   1c344:	464a      	mov	r2, r9
   1c346:	4631      	mov	r1, r6
   1c348:	4638      	mov	r0, r7
   1c34a:	6835      	ldr	r5, [r6, #0]
   1c34c:	47a8      	blx	r5
   1c34e:	b918      	cbnz	r0, 1c358 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   1c350:	4631      	mov	r1, r6
   1c352:	4638      	mov	r0, r7
   1c354:	f7f7 fee8 	bl	14128 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1c358:	b144      	cbz	r4, 1c36c <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c35a:	f114 0514 	adds.w	r5, r4, #20
   1c35e:	d002      	beq.n	1c366 <bt_gatt_notification+0x4c>
	return node->next;
   1c360:	6965      	ldr	r5, [r4, #20]
   1c362:	b105      	cbz	r5, 1c366 <bt_gatt_notification+0x4c>
   1c364:	3d14      	subs	r5, #20
{
   1c366:	4626      	mov	r6, r4
   1c368:	462c      	mov	r4, r5
   1c36a:	e7e7      	b.n	1c33c <bt_gatt_notification+0x22>
}
   1c36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c370 <bt_gatt_change_aware>:
{
   1c370:	b510      	push	{r4, lr}
   1c372:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1c374:	f7f6 f93e 	bl	125f4 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1c378:	b910      	cbnz	r0, 1c380 <bt_gatt_change_aware+0x10>
		return true;
   1c37a:	2401      	movs	r4, #1
}
   1c37c:	4620      	mov	r0, r4
   1c37e:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1c380:	7a03      	ldrb	r3, [r0, #8]
   1c382:	07db      	lsls	r3, r3, #31
   1c384:	d5f9      	bpl.n	1c37a <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1c386:	f100 030c 	add.w	r3, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c38a:	4618      	mov	r0, r3
   1c38c:	f7ff fd61 	bl	1be52 <atomic_get>
   1c390:	07c1      	lsls	r1, r0, #31
   1c392:	d4f2      	bmi.n	1c37a <bt_gatt_change_aware+0xa>
	if (!req) {
   1c394:	2c00      	cmp	r4, #0
   1c396:	d0f1      	beq.n	1c37c <bt_gatt_change_aware+0xc>
   1c398:	4618      	mov	r0, r3
   1c39a:	f7ff fd5a 	bl	1be52 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1c39e:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1c3a0:	f3c0 0440 	ubfx	r4, r0, #1, #1
   1c3a4:	d50c      	bpl.n	1c3c0 <bt_gatt_change_aware+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c3a6:	e8d3 2fef 	ldaex	r2, [r3]
   1c3aa:	f022 0202 	bic.w	r2, r2, #2
   1c3ae:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1c3b2:	2900      	cmp	r1, #0
   1c3b4:	d1f7      	bne.n	1c3a6 <bt_gatt_change_aware+0x36>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c3b6:	2101      	movs	r1, #1
   1c3b8:	4618      	mov	r0, r3
   1c3ba:	f7ff fd3f 	bl	1be3c <atomic_or>
}
   1c3be:	e7dd      	b.n	1c37c <bt_gatt_change_aware+0xc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c3c0:	2102      	movs	r1, #2
   1c3c2:	e7f9      	b.n	1c3b8 <bt_gatt_change_aware+0x48>

0001c3c4 <bt_smp_recv>:
{
   1c3c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1c3c6:	2100      	movs	r1, #0
   1c3c8:	f04f 32ff 	mov.w	r2, #4294967295
   1c3cc:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1c3d0:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1c3d2:	4608      	mov	r0, r1
   1c3d4:	f7ff f877 	bl	1b4c6 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   1c3d8:	f100 0608 	add.w	r6, r0, #8
   1c3dc:	4604      	mov	r4, r0
   1c3de:	2101      	movs	r1, #1
   1c3e0:	4630      	mov	r0, r6
   1c3e2:	f7f8 fba7 	bl	14b34 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1c3e6:	2505      	movs	r5, #5
   1c3e8:	2101      	movs	r1, #1
   1c3ea:	7005      	strb	r5, [r0, #0]
   1c3ec:	4630      	mov	r0, r6
   1c3ee:	f7f8 fba1 	bl	14b34 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1c3f2:	7005      	strb	r5, [r0, #0]
   1c3f4:	2500      	movs	r5, #0
   1c3f6:	4622      	mov	r2, r4
   1c3f8:	462b      	mov	r3, r5
   1c3fa:	2106      	movs	r1, #6
   1c3fc:	4638      	mov	r0, r7
   1c3fe:	9500      	str	r5, [sp, #0]
   1c400:	f7ff f864 	bl	1b4cc <bt_l2cap_send_cb>
}
   1c404:	4628      	mov	r0, r5
   1c406:	b003      	add	sp, #12
   1c408:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001c40a <bt_smp_sign>:
   1c40a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1c40e:	4770      	bx	lr

0001c410 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1c410:	2000      	movs	r0, #0
   1c412:	4770      	bx	lr

0001c414 <fixed_data_unref>:
}
   1c414:	4770      	bx	lr

0001c416 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c416:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1c418:	6849      	ldr	r1, [r1, #4]
   1c41a:	6809      	ldr	r1, [r1, #0]
   1c41c:	f7f8 b946 	b.w	146ac <net_buf_alloc_len>

0001c420 <net_buf_simple_init_with_data>:
	buf->size  = size;
   1c420:	b292      	uxth	r2, r2
	buf->__buf = data;
   1c422:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   1c424:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   1c426:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   1c428:	8082      	strh	r2, [r0, #4]
}
   1c42a:	4770      	bx	lr

0001c42c <net_buf_simple_push_u8>:
{
   1c42c:	b510      	push	{r4, lr}
   1c42e:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   1c430:	2101      	movs	r1, #1
   1c432:	f7f8 fb27 	bl	14a84 <net_buf_simple_push>
	*data = val;
   1c436:	7004      	strb	r4, [r0, #0]
}
   1c438:	bd10      	pop	{r4, pc}

0001c43a <net_buf_simple_pull_u8>:
{
   1c43a:	b510      	push	{r4, lr}
	val = buf->data[0];
   1c43c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, 1);
   1c43e:	2101      	movs	r1, #1
	val = buf->data[0];
   1c440:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1c442:	f7f8 fb3d 	bl	14ac0 <net_buf_simple_pull>
}
   1c446:	4620      	mov	r0, r4
   1c448:	bd10      	pop	{r4, pc}

0001c44a <net_buf_simple_pull_le16>:
{
   1c44a:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1c44c:	6803      	ldr	r3, [r0, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1c44e:	2102      	movs	r1, #2
	val = UNALIGNED_GET((uint16_t *)buf->data);
   1c450:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1c452:	f7f8 fb35 	bl	14ac0 <net_buf_simple_pull>
}
   1c456:	4620      	mov	r0, r4
   1c458:	bd10      	pop	{r4, pc}

0001c45a <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   1c45a:	6802      	ldr	r2, [r0, #0]
   1c45c:	6880      	ldr	r0, [r0, #8]
}
   1c45e:	1a10      	subs	r0, r2, r0
   1c460:	4770      	bx	lr

0001c462 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1c462:	8883      	ldrh	r3, [r0, #4]
   1c464:	88c2      	ldrh	r2, [r0, #6]
   1c466:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1c468:	6803      	ldr	r3, [r0, #0]
   1c46a:	6880      	ldr	r0, [r0, #8]
   1c46c:	1a18      	subs	r0, r3, r0
}
   1c46e:	1a10      	subs	r0, r2, r0
   1c470:	4770      	bx	lr

0001c472 <net_buf_simple_add_mem>:
{
   1c472:	b538      	push	{r3, r4, r5, lr}
   1c474:	460d      	mov	r5, r1
   1c476:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1c478:	4611      	mov	r1, r2
   1c47a:	f7f8 fb5b 	bl	14b34 <net_buf_simple_add>
   1c47e:	4622      	mov	r2, r4
   1c480:	4629      	mov	r1, r5
}
   1c482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1c486:	f7fe bcf2 	b.w	1ae6e <memcpy>

0001c48a <net_buf_simple_add_u8>:
{
   1c48a:	b510      	push	{r4, lr}
   1c48c:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   1c48e:	2101      	movs	r1, #1
   1c490:	f7f8 fb50 	bl	14b34 <net_buf_simple_add>
	*u8 = val;
   1c494:	7004      	strb	r4, [r0, #0]
}
   1c496:	bd10      	pop	{r4, pc}

0001c498 <net_buf_simple_add_le16>:
{
   1c498:	b510      	push	{r4, lr}
   1c49a:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   1c49c:	2102      	movs	r1, #2
   1c49e:	f7f8 fb49 	bl	14b34 <net_buf_simple_add>
	dst[0] = val;
   1c4a2:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   1c4a4:	0a24      	lsrs	r4, r4, #8
   1c4a6:	7044      	strb	r4, [r0, #1]
}
   1c4a8:	bd10      	pop	{r4, pc}

0001c4aa <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c4aa:	6843      	ldr	r3, [r0, #4]
}
   1c4ac:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c4ae:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1c4b0:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1c4b2:	600b      	str	r3, [r1, #0]
}
   1c4b4:	4770      	bx	lr

0001c4b6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c4b6:	6843      	ldr	r3, [r0, #4]
   1c4b8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1c4ba:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1c4bc:	4042      	eors	r2, r0
   1c4be:	400a      	ands	r2, r1
   1c4c0:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1c4c2:	605a      	str	r2, [r3, #4]
}
   1c4c4:	2000      	movs	r0, #0
   1c4c6:	4770      	bx	lr

0001c4c8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c4c8:	6843      	ldr	r3, [r0, #4]
}
   1c4ca:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c4cc:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1c4ce:	6099      	str	r1, [r3, #8]
}
   1c4d0:	4770      	bx	lr

0001c4d2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c4d2:	6843      	ldr	r3, [r0, #4]
}
   1c4d4:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c4d6:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1c4d8:	60d9      	str	r1, [r3, #12]
}
   1c4da:	4770      	bx	lr

0001c4dc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c4dc:	6843      	ldr	r3, [r0, #4]
}
   1c4de:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1c4e0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1c4e2:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1c4e4:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1c4e6:	6053      	str	r3, [r2, #4]
}
   1c4e8:	4770      	bx	lr

0001c4ea <nrf_gpio_cfg_sense_set>:
{
   1c4ea:	b513      	push	{r0, r1, r4, lr}
   1c4ec:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c4ee:	a801      	add	r0, sp, #4
{
   1c4f0:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1c4f2:	f7f8 fb83 	bl	14bfc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1c4f6:	9b01      	ldr	r3, [sp, #4]
   1c4f8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1c4fc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   1c500:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1c504:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   1c508:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   1c50c:	b002      	add	sp, #8
   1c50e:	bd10      	pop	{r4, pc}

0001c510 <cfg_level_pins>:
{
   1c510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1c514:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1c516:	2500      	movs	r5, #0
	return port->data;
   1c518:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   1c51a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1c51e:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1c520:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1c524:	4313      	orrs	r3, r2
   1c526:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
   1c52a:	b90c      	cbnz	r4, 1c530 <cfg_level_pins+0x20>
}
   1c52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1c530:	4226      	tst	r6, r4
   1c532:	d010      	beq.n	1c556 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1c534:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c536:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1c53a:	40e9      	lsrs	r1, r5
   1c53c:	f001 0101 	and.w	r1, r1, #1
   1c540:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c544:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1c548:	b2c9      	uxtb	r1, r1
   1c54a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1c54e:	f7ff ffcc 	bl	1c4ea <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1c552:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1c556:	3501      	adds	r5, #1
		bit <<= 1;
   1c558:	0076      	lsls	r6, r6, #1
   1c55a:	e7e6      	b.n	1c52a <cfg_level_pins+0x1a>

0001c55c <check_level_trigger_pins>:
{
   1c55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
   1c560:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1c562:	2700      	movs	r7, #0
	return port->data;
   1c564:	68c3      	ldr	r3, [r0, #12]
	return port->config;
   1c566:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1c56a:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1c56c:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   1c570:	430a      	orrs	r2, r1
   1c572:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1c576:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1c57a:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1c57c:	6915      	ldr	r5, [r2, #16]
   1c57e:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1c580:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
   1c584:	b914      	cbnz	r4, 1c58c <check_level_trigger_pins+0x30>
}
   1c586:	4628      	mov	r0, r5
   1c588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1c58c:	4234      	tst	r4, r6
   1c58e:	d00a      	beq.n	1c5a6 <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c590:	f898 0008 	ldrb.w	r0, [r8, #8]
   1c594:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1c598:	2100      	movs	r1, #0
   1c59a:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   1c59e:	f7ff ffa4 	bl	1c4ea <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1c5a2:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1c5a6:	3701      	adds	r7, #1
		bit <<= 1;
   1c5a8:	0076      	lsls	r6, r6, #1
   1c5aa:	e7eb      	b.n	1c584 <check_level_trigger_pins+0x28>

0001c5ac <vipm_nrf_max_data_size_get>:
static inline int z_impl_ipm_max_data_size_get(const struct device *ipmdev)
{
	const struct ipm_driver_api *api =
		(const struct ipm_driver_api *)ipmdev->api;

	return api->max_data_size_get(ipmdev);
   1c5ac:	6883      	ldr	r3, [r0, #8]
   1c5ae:	689b      	ldr	r3, [r3, #8]
   1c5b0:	4718      	bx	r3

0001c5b2 <vipm_nrf_max_id_val_get>:
}
   1c5b2:	2000      	movs	r0, #0
   1c5b4:	4770      	bx	lr

0001c5b6 <vipm_nrf_1_set_enabled>:
UTIL_LISTIFY(NRFX_IPC_ID_MAX_VALUE, VIPM_DEVICE, _);
   1c5b6:	b508      	push	{r3, lr}
   1c5b8:	b139      	cbz	r1, 1c5ca <vipm_nrf_1_set_enabled+0x14>
   1c5ba:	202a      	movs	r0, #42	; 0x2a
   1c5bc:	f7f0 fbe2 	bl	cd84 <arch_irq_enable>
   1c5c0:	2001      	movs	r0, #1
   1c5c2:	f7f9 fe4d 	bl	16260 <nrfx_ipc_receive_event_enable>
   1c5c6:	2000      	movs	r0, #0
   1c5c8:	bd08      	pop	{r3, pc}
   1c5ca:	2001      	movs	r0, #1
   1c5cc:	f7f9 fe66 	bl	1629c <nrfx_ipc_receive_event_disable>
   1c5d0:	e7f9      	b.n	1c5c6 <vipm_nrf_1_set_enabled+0x10>

0001c5d2 <uarte_nrfx_config_get>:
{
   1c5d2:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1c5d4:	68c2      	ldr	r2, [r0, #12]
   1c5d6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1c5da:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1c5de:	2000      	movs	r0, #0
   1c5e0:	4770      	bx	lr

0001c5e2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1c5e2:	6843      	ldr	r3, [r0, #4]
   1c5e4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1c5e6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1c5ea:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1c5ee:	4770      	bx	lr

0001c5f0 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1c5f0:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1c5f2:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   1c5f4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c5f6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c5fa:	b148      	cbz	r0, 1c610 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c5fc:	2000      	movs	r0, #0
	*c = data->rx_data;
   1c5fe:	7d52      	ldrb	r2, [r2, #21]
   1c600:	700a      	strb	r2, [r1, #0]
   1c602:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1c606:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c60a:	2201      	movs	r2, #1
   1c60c:	601a      	str	r2, [r3, #0]
	return 0;
   1c60e:	4770      	bx	lr
		return -1;
   1c610:	f04f 30ff 	mov.w	r0, #4294967295
}
   1c614:	4770      	bx	lr

0001c616 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   1c616:	6843      	ldr	r3, [r0, #4]
{
   1c618:	4602      	mov	r2, r0
	return config->uarte_regs;
   1c61a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c61c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1c620:	b148      	cbz	r0, 1c636 <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c622:	2000      	movs	r0, #0
	return dev->data;
   1c624:	68d2      	ldr	r2, [r2, #12]
   1c626:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1c62a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c62e:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1c630:	7d52      	ldrb	r2, [r2, #21]
   1c632:	700a      	strb	r2, [r1, #0]
   1c634:	6018      	str	r0, [r3, #0]
}
   1c636:	4770      	bx	lr

0001c638 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   1c638:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1c63a:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   1c63c:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   1c63e:	f04f 0020 	mov.w	r0, #32
   1c642:	f3ef 8311 	mrs	r3, BASEPRI
   1c646:	f380 8811 	msr	BASEPRI, r0
   1c64a:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1c64e:	2000      	movs	r0, #0
   1c650:	68c9      	ldr	r1, [r1, #12]
   1c652:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   1c654:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1c658:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1c65c:	f383 8811 	msr	BASEPRI, r3
   1c660:	f3bf 8f6f 	isb	sy
}
   1c664:	4770      	bx	lr

0001c666 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   1c666:	2201      	movs	r2, #1
   1c668:	68c3      	ldr	r3, [r0, #12]
   1c66a:	68db      	ldr	r3, [r3, #12]
   1c66c:	739a      	strb	r2, [r3, #14]
}
   1c66e:	4770      	bx	lr

0001c670 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   1c670:	68c3      	ldr	r3, [r0, #12]
   1c672:	68db      	ldr	r3, [r3, #12]
   1c674:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1c676:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   1c67a:	b962      	cbnz	r2, 1c696 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   1c67c:	6842      	ldr	r2, [r0, #4]
   1c67e:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c680:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1c684:	b140      	cbz	r0, 1c698 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   1c686:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   1c68a:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   1c68e:	d003      	beq.n	1c698 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1c690:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   1c692:	6119      	str	r1, [r3, #16]
   1c694:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1c696:	2000      	movs	r0, #0
}
   1c698:	4770      	bx	lr

0001c69a <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   1c69a:	6843      	ldr	r3, [r0, #4]
   1c69c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c69e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1c6a2:	3800      	subs	r0, #0
   1c6a4:	bf18      	it	ne
   1c6a6:	2001      	movne	r0, #1
   1c6a8:	4770      	bx	lr

0001c6aa <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   1c6aa:	2210      	movs	r2, #16
	return config->uarte_regs;
   1c6ac:	6843      	ldr	r3, [r0, #4]
   1c6ae:	681b      	ldr	r3, [r3, #0]
   1c6b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c6b4:	4770      	bx	lr

0001c6b6 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   1c6b6:	2210      	movs	r2, #16
	return config->uarte_regs;
   1c6b8:	6843      	ldr	r3, [r0, #4]
   1c6ba:	681b      	ldr	r3, [r3, #0]
   1c6bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1c6c0:	4770      	bx	lr

0001c6c2 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   1c6c2:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1c6c6:	6843      	ldr	r3, [r0, #4]
   1c6c8:	681b      	ldr	r3, [r3, #0]
   1c6ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c6ce:	4770      	bx	lr

0001c6d0 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   1c6d0:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   1c6d4:	6843      	ldr	r3, [r0, #4]
   1c6d6:	681b      	ldr	r3, [r3, #0]
   1c6d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1c6dc:	4770      	bx	lr

0001c6de <uarte_nrfx_irq_update>:
}
   1c6de:	2001      	movs	r0, #1
   1c6e0:	4770      	bx	lr

0001c6e2 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   1c6e2:	68c3      	ldr	r3, [r0, #12]
   1c6e4:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   1c6e6:	e9c3 1200 	strd	r1, r2, [r3]
}
   1c6ea:	4770      	bx	lr

0001c6ec <uarte_nrfx_irq_is_pending>:
{
   1c6ec:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   1c6ee:	6843      	ldr	r3, [r0, #4]
{
   1c6f0:	4604      	mov	r4, r0
	return config->uarte_regs;
   1c6f2:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1c6f4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   1c6f8:	025b      	lsls	r3, r3, #9
   1c6fa:	d405      	bmi.n	1c708 <uarte_nrfx_irq_is_pending+0x1c>
   1c6fc:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   1c700:	f010 0010 	ands.w	r0, r0, #16
   1c704:	d106      	bne.n	1c714 <uarte_nrfx_irq_is_pending+0x28>
}
   1c706:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   1c708:	f7ff ffb2 	bl	1c670 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   1c70c:	2800      	cmp	r0, #0
   1c70e:	d0f5      	beq.n	1c6fc <uarte_nrfx_irq_is_pending+0x10>
		||
   1c710:	2001      	movs	r0, #1
   1c712:	e7f8      	b.n	1c706 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   1c714:	4620      	mov	r0, r4
   1c716:	f7ff ffc0 	bl	1c69a <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   1c71a:	3800      	subs	r0, #0
   1c71c:	bf18      	it	ne
   1c71e:	2001      	movne	r0, #1
   1c720:	e7f1      	b.n	1c706 <uarte_nrfx_irq_is_pending+0x1a>

0001c722 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1c722:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1c724:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c726:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1c72a:	b938      	cbnz	r0, 1c73c <is_tx_ready.isra.0+0x1a>
   1c72c:	799b      	ldrb	r3, [r3, #6]
   1c72e:	b933      	cbnz	r3, 1c73e <is_tx_ready.isra.0+0x1c>
   1c730:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1c734:	3800      	subs	r0, #0
   1c736:	bf18      	it	ne
   1c738:	2001      	movne	r0, #1
   1c73a:	4770      	bx	lr
   1c73c:	2001      	movs	r0, #1
}
   1c73e:	4770      	bx	lr

0001c740 <uarte_nrfx_fifo_fill>:
{
   1c740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   1c742:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1c744:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   1c746:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   1c748:	68f3      	ldr	r3, [r6, #12]
   1c74a:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c74c:	3310      	adds	r3, #16
   1c74e:	4294      	cmp	r4, r2
   1c750:	bfa8      	it	ge
   1c752:	4614      	movge	r4, r2
   1c754:	2201      	movs	r2, #1
   1c756:	e8d3 7fef 	ldaex	r7, [r3]
   1c75a:	2f00      	cmp	r7, #0
   1c75c:	d104      	bne.n	1c768 <uarte_nrfx_fifo_fill+0x28>
   1c75e:	e8c3 2fec 	stlex	ip, r2, [r3]
   1c762:	f1bc 0f00 	cmp.w	ip, #0
   1c766:	d1f6      	bne.n	1c756 <uarte_nrfx_fifo_fill+0x16>
   1c768:	bf0c      	ite	eq
   1c76a:	4613      	moveq	r3, r2
   1c76c:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1c76e:	d01d      	beq.n	1c7ac <uarte_nrfx_fifo_fill+0x6c>
		return 0;
   1c770:	461c      	mov	r4, r3
}
   1c772:	4620      	mov	r0, r4
   1c774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   1c776:	68f2      	ldr	r2, [r6, #12]
   1c778:	5ccf      	ldrb	r7, [r1, r3]
   1c77a:	6892      	ldr	r2, [r2, #8]
   1c77c:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   1c77e:	3301      	adds	r3, #1
   1c780:	42a3      	cmp	r3, r4
   1c782:	dbf8      	blt.n	1c776 <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   1c784:	f04f 0320 	mov.w	r3, #32
   1c788:	f3ef 8111 	mrs	r1, BASEPRI
   1c78c:	f383 8811 	msr	BASEPRI, r3
   1c790:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   1c794:	6840      	ldr	r0, [r0, #4]
   1c796:	f7ff ffc4 	bl	1c722 <is_tx_ready.isra.0>
   1c79a:	68f3      	ldr	r3, [r6, #12]
   1c79c:	b940      	cbnz	r0, 1c7b0 <uarte_nrfx_fifo_fill+0x70>
		len = 0;
   1c79e:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   1c7a0:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   1c7a2:	f381 8811 	msr	BASEPRI, r1
   1c7a6:	f3bf 8f6f 	isb	sy
	return len;
   1c7aa:	e7e2      	b.n	1c772 <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   1c7ac:	2300      	movs	r3, #0
   1c7ae:	e7e7      	b.n	1c780 <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1c7b0:	689b      	ldr	r3, [r3, #8]
   1c7b2:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c7b6:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   1c7b8:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c7bc:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   1c7c0:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   1c7c4:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   1c7c8:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c7cc:	2301      	movs	r3, #1
   1c7ce:	60ab      	str	r3, [r5, #8]
}
   1c7d0:	e7e7      	b.n	1c7a2 <uarte_nrfx_fifo_fill+0x62>

0001c7d2 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1c7d2:	6843      	ldr	r3, [r0, #4]
{
   1c7d4:	b410      	push	{r4}
	return config->uarte_regs;
   1c7d6:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1c7d8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1c7dc:	05d2      	lsls	r2, r2, #23
   1c7de:	d518      	bpl.n	1c812 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c7e0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1c7e4:	b1aa      	cbz	r2, 1c812 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   1c7e6:	f04f 0120 	mov.w	r1, #32
   1c7ea:	f3ef 8211 	mrs	r2, BASEPRI
   1c7ee:	f381 8811 	msr	BASEPRI, r1
   1c7f2:	f3bf 8f6f 	isb	sy
   1c7f6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1c7fa:	b131      	cbz	r1, 1c80a <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c7fc:	2100      	movs	r1, #0
   1c7fe:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1c802:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c806:	2101      	movs	r1, #1
   1c808:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1c80a:	f382 8811 	msr	BASEPRI, r2
   1c80e:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   1c812:	68c2      	ldr	r2, [r0, #12]
   1c814:	68d2      	ldr	r2, [r2, #12]
   1c816:	b15a      	cbz	r2, 1c830 <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c818:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1c81c:	b151      	cbz	r1, 1c834 <uarte_nrfx_isr_int+0x62>
		data->int_driven->fifo_fill_lock = 0;
   1c81e:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   1c820:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   1c822:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1c824:	b134      	cbz	r4, 1c834 <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
   1c826:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   1c82a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1c82e:	7391      	strb	r1, [r2, #14]
}
   1c830:	bc10      	pop	{r4}
   1c832:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1c834:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1c838:	b121      	cbz	r1, 1c844 <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c83a:	2100      	movs	r1, #0
   1c83c:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   1c840:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   1c844:	6813      	ldr	r3, [r2, #0]
   1c846:	2b00      	cmp	r3, #0
   1c848:	d0f2      	beq.n	1c830 <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1c84a:	6851      	ldr	r1, [r2, #4]
}
   1c84c:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1c84e:	4718      	bx	r3

0001c850 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   1c850:	2101      	movs	r1, #1
   1c852:	f7f9 ba09 	b.w	15c68 <dk_set_led>

0001c856 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   1c856:	2100      	movs	r1, #0
   1c858:	f7f9 ba06 	b.w	15c68 <dk_set_led>

0001c85c <SystemInit>:
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   1c85c:	f7f9 ba84 	b.w	15d68 <SystemCoreClockUpdate>

0001c860 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1c860:	4700      	bx	r0

0001c862 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1c862:	f000 bcaf 	b.w	1d1c4 <z_impl_k_busy_wait>

0001c866 <metal_device_open>:
{
   1c866:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c868:	460c      	mov	r4, r1
   1c86a:	4615      	mov	r5, r2
	if (!bus_name || !strlen(bus_name) ||
   1c86c:	4606      	mov	r6, r0
   1c86e:	b918      	cbnz	r0, 1c878 <metal_device_open+0x12>
		return -EINVAL;
   1c870:	f06f 0015 	mvn.w	r0, #21
}
   1c874:	b002      	add	sp, #8
   1c876:	bd70      	pop	{r4, r5, r6, pc}
	if (!bus_name || !strlen(bus_name) ||
   1c878:	f7fe fabb 	bl	1adf2 <strlen>
   1c87c:	2800      	cmp	r0, #0
   1c87e:	d0f7      	beq.n	1c870 <metal_device_open+0xa>
   1c880:	2c00      	cmp	r4, #0
   1c882:	d0f5      	beq.n	1c870 <metal_device_open+0xa>
	    !dev_name || !strlen(dev_name) ||
   1c884:	4620      	mov	r0, r4
   1c886:	f7fe fab4 	bl	1adf2 <strlen>
   1c88a:	2800      	cmp	r0, #0
   1c88c:	d0f0      	beq.n	1c870 <metal_device_open+0xa>
   1c88e:	2d00      	cmp	r5, #0
   1c890:	d0ee      	beq.n	1c870 <metal_device_open+0xa>
	error = metal_bus_find(bus_name, &bus);
   1c892:	4630      	mov	r0, r6
   1c894:	a901      	add	r1, sp, #4
   1c896:	f7f9 fd75 	bl	16384 <metal_bus_find>
	if (error)
   1c89a:	2800      	cmp	r0, #0
   1c89c:	d1ea      	bne.n	1c874 <metal_device_open+0xe>
	if (!bus->ops.dev_open)
   1c89e:	9801      	ldr	r0, [sp, #4]
   1c8a0:	6883      	ldr	r3, [r0, #8]
   1c8a2:	b11b      	cbz	r3, 1c8ac <metal_device_open+0x46>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   1c8a4:	462a      	mov	r2, r5
   1c8a6:	4621      	mov	r1, r4
   1c8a8:	4798      	blx	r3
	if (error)
   1c8aa:	e7e3      	b.n	1c874 <metal_device_open+0xe>
		return -ENODEV;
   1c8ac:	f06f 0012 	mvn.w	r0, #18
   1c8b0:	e7e0      	b.n	1c874 <metal_device_open+0xe>

0001c8b2 <metal_io_block_read>:
	metal_sys_io_mem_map(io);
}

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   1c8b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c8b4:	6804      	ldr	r4, [r0, #0]
   1c8b6:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1c8b8:	1c66      	adds	r6, r4, #1
   1c8ba:	d00f      	beq.n	1c8dc <metal_io_block_read+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c8bc:	42a9      	cmp	r1, r5
   1c8be:	d232      	bcs.n	1c926 <metal_io_block_read+0x74>
		: NULL);
   1c8c0:	440c      	add	r4, r1
	unsigned char *dest = dst;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1c8c2:	185e      	adds	r6, r3, r1
   1c8c4:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1c8c6:	bf88      	it	hi
   1c8c8:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   1c8ca:	6a05      	ldr	r5, [r0, #32]
   1c8cc:	b155      	cbz	r5, 1c8e4 <metal_io_block_read+0x32>
		retlen = (*io->ops.block_read)(
   1c8ce:	9300      	str	r3, [sp, #0]
   1c8d0:	2305      	movs	r3, #5
   1c8d2:	47a8      	blx	r5
   1c8d4:	4603      	mov	r3, r0
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   1c8d6:	4618      	mov	r0, r3
   1c8d8:	b002      	add	sp, #8
   1c8da:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1c8dc:	42a9      	cmp	r1, r5
   1c8de:	d222      	bcs.n	1c926 <metal_io_block_read+0x74>
   1c8e0:	2400      	movs	r4, #0
   1c8e2:	e7ee      	b.n	1c8c2 <metal_io_block_read+0x10>
		atomic_thread_fence(memory_order_seq_cst);
   1c8e4:	f3bf 8f5b 	dmb	ish
		while ( len && (
   1c8e8:	4621      	mov	r1, r4
   1c8ea:	4618      	mov	r0, r3
   1c8ec:	2800      	cmp	r0, #0
   1c8ee:	d0f2      	beq.n	1c8d6 <metal_io_block_read+0x24>
			((uintptr_t)dest % sizeof(int)) ||
   1c8f0:	ea42 0401 	orr.w	r4, r2, r1
   1c8f4:	07a4      	lsls	r4, r4, #30
   1c8f6:	d10a      	bne.n	1c90e <metal_io_block_read+0x5c>
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1c8f8:	2803      	cmp	r0, #3
   1c8fa:	dc0e      	bgt.n	1c91a <metal_io_block_read+0x68>
   1c8fc:	3901      	subs	r1, #1
   1c8fe:	4410      	add	r0, r2
		for (; len != 0; dest++, ptr++, len--)
   1c900:	4282      	cmp	r2, r0
   1c902:	d0e8      	beq.n	1c8d6 <metal_io_block_read+0x24>
				*(const unsigned char *)ptr;
   1c904:	f811 4f01 	ldrb.w	r4, [r1, #1]!
			*(unsigned char *)dest =
   1c908:	f802 4b01 	strb.w	r4, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   1c90c:	e7f8      	b.n	1c900 <metal_io_block_read+0x4e>
				*(const unsigned char *)ptr;
   1c90e:	f811 4b01 	ldrb.w	r4, [r1], #1
			len--;
   1c912:	3801      	subs	r0, #1
			*(unsigned char *)dest =
   1c914:	f802 4b01 	strb.w	r4, [r2], #1
			len--;
   1c918:	e7e8      	b.n	1c8ec <metal_io_block_read+0x3a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   1c91a:	f851 4b04 	ldr.w	r4, [r1], #4
   1c91e:	3804      	subs	r0, #4
   1c920:	f842 4b04 	str.w	r4, [r2], #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   1c924:	e7e8      	b.n	1c8f8 <metal_io_block_read+0x46>
		return -ERANGE;
   1c926:	f06f 0325 	mvn.w	r3, #37	; 0x25
   1c92a:	e7d4      	b.n	1c8d6 <metal_io_block_read+0x24>

0001c92c <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   1c92c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c92e:	6804      	ldr	r4, [r0, #0]
   1c930:	6885      	ldr	r5, [r0, #8]
		: NULL);
   1c932:	1c66      	adds	r6, r4, #1
   1c934:	d00e      	beq.n	1c954 <metal_io_block_write+0x28>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c936:	42a9      	cmp	r1, r5
   1c938:	d230      	bcs.n	1c99c <metal_io_block_write+0x70>
		: NULL);
   1c93a:	440c      	add	r4, r1
	const unsigned char *source = src;
	int retlen;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1c93c:	185e      	adds	r6, r3, r1
   1c93e:	42ae      	cmp	r6, r5
		len = io->size - offset;
   1c940:	bf88      	it	hi
   1c942:	1a6b      	subhi	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   1c944:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1c946:	b94d      	cbnz	r5, 1c95c <metal_io_block_write+0x30>
   1c948:	4619      	mov	r1, r3
		retlen = (*io->ops.block_write)(
			io, offset, src, memory_order_seq_cst, len);
	} else {
		while ( len && (
   1c94a:	b991      	cbnz	r1, 1c972 <metal_io_block_write+0x46>
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
		for (; len != 0; ptr++, source++, len--)
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
   1c94c:	f3bf 8f5b 	dmb	ish
	retlen = len;
   1c950:	4618      	mov	r0, r3
   1c952:	e006      	b.n	1c962 <metal_io_block_write+0x36>
	if (offset >= io->size)
   1c954:	42a9      	cmp	r1, r5
   1c956:	d221      	bcs.n	1c99c <metal_io_block_write+0x70>
   1c958:	2400      	movs	r4, #0
   1c95a:	e7ef      	b.n	1c93c <metal_io_block_write+0x10>
		retlen = (*io->ops.block_write)(
   1c95c:	9300      	str	r3, [sp, #0]
   1c95e:	2305      	movs	r3, #5
   1c960:	47a8      	blx	r5
	}
	return retlen;
}
   1c962:	b002      	add	sp, #8
   1c964:	bd70      	pop	{r4, r5, r6, pc}
				*(const unsigned char *)source;
   1c966:	f812 0b01 	ldrb.w	r0, [r2], #1
			len--;
   1c96a:	3901      	subs	r1, #1
			*(unsigned char *)ptr =
   1c96c:	f804 0b01 	strb.w	r0, [r4], #1
			len--;
   1c970:	e7eb      	b.n	1c94a <metal_io_block_write+0x1e>
			((uintptr_t)ptr % sizeof(int)) ||
   1c972:	ea44 0002 	orr.w	r0, r4, r2
   1c976:	0780      	lsls	r0, r0, #30
   1c978:	d1f5      	bne.n	1c966 <metal_io_block_write+0x3a>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1c97a:	2903      	cmp	r1, #3
   1c97c:	dc08      	bgt.n	1c990 <metal_io_block_write+0x64>
   1c97e:	3a01      	subs	r2, #1
   1c980:	4421      	add	r1, r4
		for (; len != 0; ptr++, source++, len--)
   1c982:	428c      	cmp	r4, r1
   1c984:	d0e2      	beq.n	1c94c <metal_io_block_write+0x20>
				*(const unsigned char *)source;
   1c986:	f812 0f01 	ldrb.w	r0, [r2, #1]!
			*(unsigned char *)ptr =
   1c98a:	f804 0b01 	strb.w	r0, [r4], #1
		for (; len != 0; ptr++, source++, len--)
   1c98e:	e7f8      	b.n	1c982 <metal_io_block_write+0x56>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   1c990:	f852 0b04 	ldr.w	r0, [r2], #4
   1c994:	3904      	subs	r1, #4
   1c996:	f844 0b04 	str.w	r0, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1c99a:	e7ee      	b.n	1c97a <metal_io_block_write+0x4e>
		return -ERANGE;
   1c99c:	f06f 0025 	mvn.w	r0, #37	; 0x25
   1c9a0:	e7df      	b.n	1c962 <metal_io_block_write+0x36>

0001c9a2 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   1c9a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c9a4:	6804      	ldr	r4, [r0, #0]
   1c9a6:	461d      	mov	r5, r3
		: NULL);
   1c9a8:	1c66      	adds	r6, r4, #1
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c9aa:	6883      	ldr	r3, [r0, #8]
		: NULL);
   1c9ac:	d00e      	beq.n	1c9cc <metal_io_block_set+0x2a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1c9ae:	4299      	cmp	r1, r3
   1c9b0:	d22d      	bcs.n	1ca0e <metal_io_block_set+0x6c>
		: NULL);
   1c9b2:	440c      	add	r4, r1
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (offset >= io->size)
		return -ERANGE;
	if ((offset + len) > io->size)
   1c9b4:	186e      	adds	r6, r5, r1
   1c9b6:	429e      	cmp	r6, r3
		len = io->size - offset;
	retlen = len;
	if (io->ops.block_set) {
   1c9b8:	6a86      	ldr	r6, [r0, #40]	; 0x28
		len = io->size - offset;
   1c9ba:	bf88      	it	hi
   1c9bc:	1a5d      	subhi	r5, r3, r1
	if (io->ops.block_set) {
   1c9be:	b186      	cbz	r6, 1c9e2 <metal_io_block_set+0x40>
		(*io->ops.block_set)(
   1c9c0:	2305      	movs	r3, #5
   1c9c2:	9500      	str	r5, [sp, #0]
   1c9c4:	47b0      	blx	r6
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   1c9c6:	4628      	mov	r0, r5
   1c9c8:	b002      	add	sp, #8
   1c9ca:	bd70      	pop	{r4, r5, r6, pc}
	if (offset >= io->size)
   1c9cc:	4299      	cmp	r1, r3
   1c9ce:	d21e      	bcs.n	1ca0e <metal_io_block_set+0x6c>
   1c9d0:	2400      	movs	r4, #0
   1c9d2:	e7ef      	b.n	1c9b4 <metal_io_block_set+0x12>
			*(unsigned char *)ptr = (unsigned char) value;
   1c9d4:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1c9d8:	3b01      	subs	r3, #1
   1c9da:	b923      	cbnz	r3, 1c9e6 <metal_io_block_set+0x44>
		atomic_thread_fence(memory_order_seq_cst);
   1c9dc:	f3bf 8f5b 	dmb	ish
   1c9e0:	e7f1      	b.n	1c9c6 <metal_io_block_set+0x24>
   1c9e2:	462b      	mov	r3, r5
   1c9e4:	e7f9      	b.n	1c9da <metal_io_block_set+0x38>
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   1c9e6:	07a1      	lsls	r1, r4, #30
   1c9e8:	d1f4      	bne.n	1c9d4 <metal_io_block_set+0x32>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   1c9ea:	0611      	lsls	r1, r2, #24
   1c9ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1c9f0:	4311      	orrs	r1, r2
   1c9f2:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1c9f6:	2b03      	cmp	r3, #3
   1c9f8:	dc05      	bgt.n	1ca06 <metal_io_block_set+0x64>
   1c9fa:	4423      	add	r3, r4
		for (; len != 0; ptr++, len--)
   1c9fc:	429c      	cmp	r4, r3
   1c9fe:	d0ed      	beq.n	1c9dc <metal_io_block_set+0x3a>
			*(unsigned char *)ptr = (unsigned char) value;
   1ca00:	f804 2b01 	strb.w	r2, [r4], #1
		for (; len != 0; ptr++, len--)
   1ca04:	e7fa      	b.n	1c9fc <metal_io_block_set+0x5a>
			*(unsigned int *)ptr = cint;
   1ca06:	f844 1b04 	str.w	r1, [r4], #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   1ca0a:	3b04      	subs	r3, #4
   1ca0c:	e7f3      	b.n	1c9f6 <metal_io_block_set+0x54>
		return -ERANGE;
   1ca0e:	f06f 0525 	mvn.w	r5, #37	; 0x25
   1ca12:	e7d8      	b.n	1c9c6 <metal_io_block_set+0x24>

0001ca14 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   1ca14:	2000      	movs	r0, #0
   1ca16:	4770      	bx	lr

0001ca18 <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   1ca18:	b430      	push	{r4, r5}
	if (!io->ops.offset_to_phys) {
   1ca1a:	6b04      	ldr	r4, [r0, #48]	; 0x30
{
   1ca1c:	460b      	mov	r3, r1
	if (!io->ops.offset_to_phys) {
   1ca1e:	b984      	cbnz	r4, 1ca42 <metal_io_phys+0x2a>
		unsigned long page = (io->page_shift >=
   1ca20:	68c1      	ldr	r1, [r0, #12]
				     sizeof(offset) * CHAR_BIT ?
				     0 : offset >> io->page_shift);
		return (io->physmap && offset < io->size
   1ca22:	6845      	ldr	r5, [r0, #4]
				     0 : offset >> io->page_shift);
   1ca24:	291f      	cmp	r1, #31
   1ca26:	bf98      	it	ls
   1ca28:	fa23 f401 	lsrls.w	r4, r3, r1
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
   1ca2c:	b165      	cbz	r5, 1ca48 <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   1ca2e:	6881      	ldr	r1, [r0, #8]
   1ca30:	428b      	cmp	r3, r1
   1ca32:	d209      	bcs.n	1ca48 <metal_io_phys+0x30>
			? io->physmap[page] + (offset & io->page_mask)
   1ca34:	6900      	ldr	r0, [r0, #16]
   1ca36:	4003      	ands	r3, r0
			: METAL_BAD_PHYS);
   1ca38:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   1ca3c:	4418      	add	r0, r3
	}

	return io->ops.offset_to_phys(io, offset);
}
   1ca3e:	bc30      	pop	{r4, r5}
   1ca40:	4770      	bx	lr
	return io->ops.offset_to_phys(io, offset);
   1ca42:	4623      	mov	r3, r4
}
   1ca44:	bc30      	pop	{r4, r5}
	return io->ops.offset_to_phys(io, offset);
   1ca46:	4718      	bx	r3
			: METAL_BAD_PHYS);
   1ca48:	f04f 30ff 	mov.w	r0, #4294967295
   1ca4c:	e7f7      	b.n	1ca3e <metal_io_phys+0x26>

0001ca4e <virtqueue_create>:
{
   1ca4e:	b570      	push	{r4, r5, r6, lr}
   1ca50:	9c06      	ldr	r4, [sp, #24]
		vq->vq_queue_index = id;
   1ca52:	8121      	strh	r1, [r4, #8]
		vq->callback = callback;
   1ca54:	9904      	ldr	r1, [sp, #16]
		vq->vq_name = name;
   1ca56:	e9c4 0200 	strd	r0, r2, [r4]
		vq->vq_nentries = ring->num_descs;
   1ca5a:	891a      	ldrh	r2, [r3, #8]
		vq->callback = callback;
   1ca5c:	60e1      	str	r1, [r4, #12]
		vq->notify = notify;
   1ca5e:	9905      	ldr	r1, [sp, #20]
{
	vr->num = num;
	vr->desc = (struct vring_desc *)p;
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1ca60:	1c96      	adds	r6, r2, #2
   1ca62:	6121      	str	r1, [r4, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   1ca64:	e9d3 1500 	ldrd	r1, r5, [r3]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   1ca68:	eb01 1302 	add.w	r3, r1, r2, lsl #4
   1ca6c:	61e3      	str	r3, [r4, #28]
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   1ca6e:	eb03 0346 	add.w	r3, r3, r6, lsl #1
	      align - 1) & ~(align - 1));
   1ca72:	1c6e      	adds	r6, r5, #1
   1ca74:	4433      	add	r3, r6
   1ca76:	426d      	negs	r5, r5
   1ca78:	402b      	ands	r3, r5
	vr->used = (struct vring_used *)
   1ca7a:	6223      	str	r3, [r4, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_SLAVE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1ca7c:	6983      	ldr	r3, [r0, #24]
	vr->desc = (struct vring_desc *)p;
   1ca7e:	e9c4 2105 	strd	r2, r1, [r4, #20]
		vq->vq_nentries = ring->num_descs;
   1ca82:	8162      	strh	r2, [r4, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   1ca84:	84a2      	strh	r2, [r4, #36]	; 0x24
	if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1ca86:	b96b      	cbnz	r3, 1caa4 <virtqueue_create+0x56>
		int i;

		for (i = 0; i < size - 1; i++)
   1ca88:	3a01      	subs	r2, #1
   1ca8a:	4293      	cmp	r3, r2
   1ca8c:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   1ca90:	db0a      	blt.n	1caa8 <virtqueue_create+0x5a>
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1ca92:	2300      	movs	r3, #0
			vr->desc[i].next = i + 1;
   1ca94:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   1ca98:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   1ca9c:	7393      	strb	r3, [r2, #14]
   1ca9e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1caa2:	73d3      	strb	r3, [r2, #15]
}
   1caa4:	2000      	movs	r0, #0
   1caa6:	bd70      	pop	{r4, r5, r6, pc}
			vr->desc[i].next = i + 1;
   1caa8:	3301      	adds	r3, #1
   1caaa:	81c3      	strh	r3, [r0, #14]
		for (i = 0; i < size - 1; i++)
   1caac:	e7ed      	b.n	1ca8a <virtqueue_create+0x3c>

0001caae <virtqueue_add_buffer>:
{
   1caae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cab2:	2700      	movs	r7, #0
		head_idx = vq->vq_desc_head_idx;
   1cab4:	f8b0 b02c 	ldrh.w	fp, [r0, #44]	; 0x2c
{
   1cab8:	4604      	mov	r4, r0
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1caba:	465d      	mov	r5, fp
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1cabc:	46ba      	mov	sl, r7
{
   1cabe:	b085      	sub	sp, #20
	needed = readable + writable;
   1cac0:	18d6      	adds	r6, r2, r3
{
   1cac2:	4691      	mov	r9, r2
		dxp->cookie = cookie;
   1cac4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1cac6:	eb00 03cb 	add.w	r3, r0, fp, lsl #3
   1caca:	635a      	str	r2, [r3, #52]	; 0x34
		dxp->ndescs = needed;
   1cacc:	871e      	strh	r6, [r3, #56]	; 0x38
		if (i < needed - 1)
   1cace:	1e72      	subs	r2, r6, #1
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   1cad0:	6983      	ldr	r3, [r0, #24]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cad2:	f101 0804 	add.w	r8, r1, #4
		if (i < needed - 1)
   1cad6:	9201      	str	r2, [sp, #4]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cad8:	42be      	cmp	r6, r7
   1cada:	dc19      	bgt.n	1cb10 <virtqueue_add_buffer+0x62>
		vq->vq_free_cnt -= needed;
   1cadc:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1cade:	8962      	ldrh	r2, [r4, #10]
		vq->vq_free_cnt -= needed;
   1cae0:	1b9e      	subs	r6, r3, r6
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1cae2:	69e3      	ldr	r3, [r4, #28]
		vq->vq_desc_head_idx = idx;
   1cae4:	85a5      	strh	r5, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   1cae6:	84a6      	strh	r6, [r4, #36]	; 0x24
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   1cae8:	1e51      	subs	r1, r2, #1
   1caea:	885a      	ldrh	r2, [r3, #2]
}
   1caec:	2000      	movs	r0, #0
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   1caee:	400a      	ands	r2, r1
   1caf0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   1caf4:	f8a3 b004 	strh.w	fp, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
   1caf8:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
   1cafc:	69e2      	ldr	r2, [r4, #28]
   1cafe:	8853      	ldrh	r3, [r2, #2]
   1cb00:	3301      	adds	r3, #1
   1cb02:	8053      	strh	r3, [r2, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   1cb04:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1cb06:	3301      	adds	r3, #1
   1cb08:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1cb0a:	b005      	add	sp, #20
   1cb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp = &desc[idx];
   1cb10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1cb12:	012a      	lsls	r2, r5, #4
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1cb14:	f858 1c04 	ldr.w	r1, [r8, #-4]
   1cb18:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   1cb1c:	9302      	str	r3, [sp, #8]
   1cb1e:	6803      	ldr	r3, [r0, #0]
   1cb20:	9203      	str	r2, [sp, #12]
   1cb22:	1ac9      	subs	r1, r1, r3
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   1cb24:	6883      	ldr	r3, [r0, #8]
   1cb26:	f108 0808 	add.w	r8, r8, #8
   1cb2a:	4299      	cmp	r1, r3
   1cb2c:	bf28      	it	cs
   1cb2e:	f04f 31ff 	movcs.w	r1, #4294967295
   1cb32:	f7ff ff71 	bl	1ca18 <metal_io_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1cb36:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1cb3a:	5098      	str	r0, [r3, r2]
		dp->len = buf_list[i].len;
   1cb3c:	f858 2c08 	ldr.w	r2, [r8, #-8]
			dp->flags |= VRING_DESC_F_NEXT;
   1cb40:	f885 a00d 	strb.w	sl, [r5, #13]
		dp->len = buf_list[i].len;
   1cb44:	60aa      	str	r2, [r5, #8]
		if (i < needed - 1)
   1cb46:	9a01      	ldr	r2, [sp, #4]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   1cb48:	f8c5 a004 	str.w	sl, [r5, #4]
		if (i < needed - 1)
   1cb4c:	4297      	cmp	r7, r2
			dp->flags |= VRING_DESC_F_NEXT;
   1cb4e:	bfb6      	itet	lt
   1cb50:	2201      	movlt	r2, #1
		dp->flags = 0;
   1cb52:	f885 a00c 	strbge.w	sl, [r5, #12]
			dp->flags |= VRING_DESC_F_NEXT;
   1cb56:	732a      	strblt	r2, [r5, #12]
		if (i >= readable)
   1cb58:	45b9      	cmp	r9, r7
			dp->flags |= VRING_DESC_F_WRITE;
   1cb5a:	bfd8      	it	le
   1cb5c:	89aa      	ldrhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cb5e:	f107 0701 	add.w	r7, r7, #1
			dp->flags |= VRING_DESC_F_WRITE;
   1cb62:	bfdc      	itt	le
   1cb64:	f042 0202 	orrle.w	r2, r2, #2
   1cb68:	81aa      	strhle	r2, [r5, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   1cb6a:	89ed      	ldrh	r5, [r5, #14]
   1cb6c:	e7b4      	b.n	1cad8 <virtqueue_add_buffer+0x2a>

0001cb6e <virtqueue_get_buffer>:
{
   1cb6e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   1cb70:	b350      	cbz	r0, 1cbc8 <virtqueue_get_buffer+0x5a>
   1cb72:	6a05      	ldr	r5, [r0, #32]
   1cb74:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1cb76:	886c      	ldrh	r4, [r5, #2]
   1cb78:	429c      	cmp	r4, r3
   1cb7a:	d030      	beq.n	1cbde <virtqueue_get_buffer+0x70>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1cb7c:	1c5c      	adds	r4, r3, #1
   1cb7e:	85c4      	strh	r4, [r0, #46]	; 0x2e
   1cb80:	8944      	ldrh	r4, [r0, #10]
	atomic_thread_fence(memory_order_seq_cst);
   1cb82:	f3bf 8f5b 	dmb	ish
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   1cb86:	3c01      	subs	r4, #1
   1cb88:	401c      	ands	r4, r3
	desc_idx = (uint16_t)uep->id;
   1cb8a:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1cb8e:	686b      	ldr	r3, [r5, #4]
   1cb90:	b29e      	uxth	r6, r3
	if (len)
   1cb92:	b109      	cbz	r1, 1cb98 <virtqueue_get_buffer+0x2a>
		*len = uep->len;
   1cb94:	68ad      	ldr	r5, [r5, #8]
   1cb96:	600d      	str	r5, [r1, #0]
	dp = &vq->vq_ring.desc[desc_idx];
   1cb98:	f8d0 c018 	ldr.w	ip, [r0, #24]
   1cb9c:	b29b      	uxth	r3, r3
   1cb9e:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
	vq->vq_free_cnt += dxp->ndescs;
   1cba2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1cba6:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
   1cba8:	8c87      	ldrh	r7, [r0, #36]	; 0x24
   1cbaa:	442f      	add	r7, r5
	dxp->ndescs--;
   1cbac:	3d01      	subs	r5, #1
	vq->vq_free_cnt += dxp->ndescs;
   1cbae:	8487      	strh	r7, [r0, #36]	; 0x24
	dxp->ndescs--;
   1cbb0:	871d      	strh	r5, [r3, #56]	; 0x38
	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   1cbb2:	898d      	ldrh	r5, [r1, #12]
   1cbb4:	076f      	lsls	r7, r5, #29
   1cbb6:	d50e      	bpl.n	1cbd6 <virtqueue_get_buffer+0x68>
	dp->next = vq->vq_desc_head_idx;
   1cbb8:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   1cbba:	81cd      	strh	r5, [r1, #14]
	vq->vq_descx[desc_idx].cookie = NULL;
   1cbbc:	2100      	movs	r1, #0
	vq->vq_desc_head_idx = desc_idx;
   1cbbe:	8586      	strh	r6, [r0, #44]	; 0x2c
	cookie = vq->vq_descx[desc_idx].cookie;
   1cbc0:	6b58      	ldr	r0, [r3, #52]	; 0x34
	vq->vq_descx[desc_idx].cookie = NULL;
   1cbc2:	6359      	str	r1, [r3, #52]	; 0x34
	if (idx)
   1cbc4:	b102      	cbz	r2, 1cbc8 <virtqueue_get_buffer+0x5a>
		*idx = used_idx;
   1cbc6:	8014      	strh	r4, [r2, #0]
}
   1cbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			dxp->ndescs--;
   1cbca:	8f1d      	ldrh	r5, [r3, #56]	; 0x38
			dp = &vq->vq_ring.desc[dp->next];
   1cbcc:	89c9      	ldrh	r1, [r1, #14]
			dxp->ndescs--;
   1cbce:	3d01      	subs	r5, #1
			dp = &vq->vq_ring.desc[dp->next];
   1cbd0:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			dxp->ndescs--;
   1cbd4:	871d      	strh	r5, [r3, #56]	; 0x38
		while (dp->flags & VRING_DESC_F_NEXT) {
   1cbd6:	898d      	ldrh	r5, [r1, #12]
   1cbd8:	07ed      	lsls	r5, r5, #31
   1cbda:	d4f6      	bmi.n	1cbca <virtqueue_get_buffer+0x5c>
   1cbdc:	e7ec      	b.n	1cbb8 <virtqueue_get_buffer+0x4a>
		return NULL;
   1cbde:	2000      	movs	r0, #0
   1cbe0:	e7f2      	b.n	1cbc8 <virtqueue_get_buffer+0x5a>

0001cbe2 <virtqueue_get_available_buffer>:
{
   1cbe2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1cbe6:	f3bf 8f5b 	dmb	ish
{
   1cbea:	4617      	mov	r7, r2
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1cbec:	69c2      	ldr	r2, [r0, #28]
{
   1cbee:	460e      	mov	r6, r1
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1cbf0:	8853      	ldrh	r3, [r2, #2]
   1cbf2:	8e01      	ldrh	r1, [r0, #48]	; 0x30
{
   1cbf4:	4605      	mov	r5, r0
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1cbf6:	428b      	cmp	r3, r1
   1cbf8:	d045      	beq.n	1cc86 <virtqueue_get_available_buffer+0xa4>
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   1cbfa:	1c4b      	adds	r3, r1, #1
   1cbfc:	8603      	strh	r3, [r0, #48]	; 0x30
   1cbfe:	8943      	ldrh	r3, [r0, #10]
   1cc00:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
   1cc04:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   1cc06:	400b      	ands	r3, r1
   1cc08:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1cc0c:	889a      	ldrh	r2, [r3, #4]
   1cc0e:	b293      	uxth	r3, r2
   1cc10:	8032      	strh	r2, [r6, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   1cc12:	6982      	ldr	r2, [r0, #24]
   1cc14:	011b      	lsls	r3, r3, #4
   1cc16:	f852 9003 	ldr.w	r9, [r2, r3]
	if (!io->ops.phys_to_offset) {
   1cc1a:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
   1cc1e:	bb5b      	cbnz	r3, 1cc78 <virtqueue_get_available_buffer+0x96>
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   1cc20:	f8d8 4010 	ldr.w	r4, [r8, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   1cc24:	1c62      	adds	r2, r4, #1
   1cc26:	bf09      	itett	eq
   1cc28:	f8d8 3004 	ldreq.w	r3, [r8, #4]
   1cc2c:	ea09 0404 	andne.w	r4, r9, r4
   1cc30:	681c      	ldreq	r4, [r3, #0]
   1cc32:	eba9 0404 	subeq.w	r4, r9, r4
			if (metal_io_phys(io, offset) == phys)
   1cc36:	4621      	mov	r1, r4
   1cc38:	4640      	mov	r0, r8
   1cc3a:	f7ff feed 	bl	1ca18 <metal_io_phys>
   1cc3e:	4581      	cmp	r9, r0
   1cc40:	d009      	beq.n	1cc56 <virtqueue_get_available_buffer+0x74>
			offset += io->page_mask + 1;
   1cc42:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1cc46:	3301      	adds	r3, #1
   1cc48:	441c      	add	r4, r3
		} while (offset < io->size);
   1cc4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1cc4e:	429c      	cmp	r4, r3
   1cc50:	d3f1      	bcc.n	1cc36 <virtqueue_get_available_buffer+0x54>
		return METAL_BAD_OFFSET;
   1cc52:	f04f 34ff 	mov.w	r4, #4294967295
	return (io->virt != METAL_BAD_VA && offset < io->size
   1cc56:	f8d8 0000 	ldr.w	r0, [r8]
		: NULL);
   1cc5a:	1c43      	adds	r3, r0, #1
   1cc5c:	d011      	beq.n	1cc82 <virtqueue_get_available_buffer+0xa0>
	return (io->virt != METAL_BAD_VA && offset < io->size
   1cc5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1cc62:	42a3      	cmp	r3, r4
   1cc64:	d90d      	bls.n	1cc82 <virtqueue_get_available_buffer+0xa0>
		: NULL);
   1cc66:	4420      	add	r0, r4
	*len = vq->vq_ring.desc[*avail_idx].len;
   1cc68:	8832      	ldrh	r2, [r6, #0]
   1cc6a:	69ab      	ldr	r3, [r5, #24]
   1cc6c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1cc70:	689b      	ldr	r3, [r3, #8]
   1cc72:	603b      	str	r3, [r7, #0]
}
   1cc74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (*io->ops.phys_to_offset)(io, phys);
   1cc78:	4649      	mov	r1, r9
   1cc7a:	4640      	mov	r0, r8
   1cc7c:	4798      	blx	r3
   1cc7e:	4604      	mov	r4, r0
   1cc80:	e7e9      	b.n	1cc56 <virtqueue_get_available_buffer+0x74>
		: NULL);
   1cc82:	2000      	movs	r0, #0
   1cc84:	e7f0      	b.n	1cc68 <virtqueue_get_available_buffer+0x86>
		return NULL;
   1cc86:	2000      	movs	r0, #0
   1cc88:	e7f4      	b.n	1cc74 <virtqueue_get_available_buffer+0x92>

0001cc8a <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1cc8a:	6802      	ldr	r2, [r0, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1cc8c:	6993      	ldr	r3, [r2, #24]
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1cc8e:	6912      	ldr	r2, [r2, #16]
   1cc90:	0092      	lsls	r2, r2, #2
   1cc92:	d515      	bpl.n	1ccc0 <virtqueue_disable_cb+0x36>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1cc94:	b94b      	cbnz	r3, 1ccaa <virtqueue_disable_cb+0x20>
			vring_used_event(&vq->vq_ring) =
   1cc96:	69c2      	ldr	r2, [r0, #28]
   1cc98:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1cc9a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   1cc9c:	8940      	ldrh	r0, [r0, #10]
			vring_used_event(&vq->vq_ring) =
   1cc9e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   1cca2:	1a1b      	subs	r3, r3, r0
   1cca4:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   1cca6:	8093      	strh	r3, [r2, #4]
   1cca8:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1ccaa:	2b01      	cmp	r3, #1
   1ccac:	d10e      	bne.n	1cccc <virtqueue_disable_cb+0x42>
			vring_avail_event(&vq->vq_ring) =
   1ccae:	6a02      	ldr	r2, [r0, #32]
   1ccb0:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1ccb2:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1ccb4:	8940      	ldrh	r0, [r0, #10]
			vring_avail_event(&vq->vq_ring) =
   1ccb6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
			    vq->vq_available_idx - vq->vq_nentries - 1;
   1ccba:	1a1b      	subs	r3, r3, r0
   1ccbc:	3b01      	subs	r3, #1
   1ccbe:	e7f2      	b.n	1cca6 <virtqueue_disable_cb+0x1c>
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1ccc0:	b92b      	cbnz	r3, 1ccce <virtqueue_disable_cb+0x44>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   1ccc2:	69c2      	ldr	r2, [r0, #28]
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1ccc4:	8813      	ldrh	r3, [r2, #0]
   1ccc6:	f043 0301 	orr.w	r3, r3, #1
   1ccca:	8013      	strh	r3, [r2, #0]
}
   1cccc:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1ccce:	2b01      	cmp	r3, #1
   1ccd0:	d1fc      	bne.n	1cccc <virtqueue_disable_cb+0x42>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   1ccd2:	6a02      	ldr	r2, [r0, #32]
   1ccd4:	e7f6      	b.n	1ccc4 <virtqueue_disable_cb+0x3a>

0001ccd6 <virtqueue_kick>:
{
   1ccd6:	b510      	push	{r4, lr}
	atomic_thread_fence(memory_order_seq_cst);
   1ccd8:	f3bf 8f5b 	dmb	ish
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1ccdc:	6803      	ldr	r3, [r0, #0]
{
   1ccde:	4604      	mov	r4, r0
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   1cce0:	691a      	ldr	r2, [r3, #16]
   1cce2:	699b      	ldr	r3, [r3, #24]
   1cce4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   1cce8:	d019      	beq.n	1cd1e <virtqueue_kick+0x48>
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER) {
   1ccea:	b97b      	cbnz	r3, 1cd0c <virtqueue_kick+0x36>
			new_idx = vq->vq_ring.avail->idx;
   1ccec:	69c3      	ldr	r3, [r0, #28]
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_avail_event(&vq->vq_ring);
   1ccee:	6a02      	ldr	r2, [r0, #32]
   1ccf0:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.avail->idx;
   1ccf2:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_avail_event(&vq->vq_ring);
   1ccf4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
			new_idx = vq->vq_ring.used->idx;
			prev_idx = new_idx - vq->vq_queued_cnt;
			event_idx = vring_used_event(&vq->vq_ring);
   1ccf8:	8892      	ldrh	r2, [r2, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   1ccfa:	1a9b      	subs	r3, r3, r2
   1ccfc:	3b01      	subs	r3, #1
	if (vq_ring_must_notify(vq))
   1ccfe:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1cd00:	b29b      	uxth	r3, r3
   1cd02:	429a      	cmp	r2, r3
   1cd04:	d813      	bhi.n	1cd2e <virtqueue_kick+0x58>
	vq->vq_queued_cnt = 0;
   1cd06:	2300      	movs	r3, #0
   1cd08:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   1cd0a:	bd10      	pop	{r4, pc}
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE) {
   1cd0c:	2b01      	cmp	r3, #1
   1cd0e:	d1fa      	bne.n	1cd06 <virtqueue_kick+0x30>
			new_idx = vq->vq_ring.used->idx;
   1cd10:	6a03      	ldr	r3, [r0, #32]
			event_idx = vring_used_event(&vq->vq_ring);
   1cd12:	69c2      	ldr	r2, [r0, #28]
   1cd14:	6941      	ldr	r1, [r0, #20]
			new_idx = vq->vq_ring.used->idx;
   1cd16:	885b      	ldrh	r3, [r3, #2]
			event_idx = vring_used_event(&vq->vq_ring);
   1cd18:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   1cd1c:	e7ec      	b.n	1ccf8 <virtqueue_kick+0x22>
						prev_idx) != 0;
		}
#endif /*VIRTIO_MASTER_ONLY*/
	} else {
#ifndef VIRTIO_SLAVE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_MASTER)
   1cd1e:	b963      	cbnz	r3, 1cd3a <virtqueue_kick+0x64>
			return (vq->vq_ring.used->flags &
   1cd20:	6a03      	ldr	r3, [r0, #32]
				VRING_USED_F_NO_NOTIFY) == 0;
#endif /*VIRTIO_SLAVE_ONLY*/
#ifndef VIRTIO_MASTER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
			return (vq->vq_ring.avail->flags &
   1cd22:	881b      	ldrh	r3, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   1cd24:	43db      	mvns	r3, r3
   1cd26:	f003 0301 	and.w	r3, r3, #1
	if (vq_ring_must_notify(vq))
   1cd2a:	2b00      	cmp	r3, #0
   1cd2c:	d0eb      	beq.n	1cd06 <virtqueue_kick+0x30>
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
	if (vq->notify)
   1cd2e:	6923      	ldr	r3, [r4, #16]
   1cd30:	2b00      	cmp	r3, #0
   1cd32:	d0e8      	beq.n	1cd06 <virtqueue_kick+0x30>
		vq->notify(vq);
   1cd34:	4620      	mov	r0, r4
   1cd36:	4798      	blx	r3
   1cd38:	e7e5      	b.n	1cd06 <virtqueue_kick+0x30>
		if (vq->vq_dev->role == VIRTIO_DEV_SLAVE)
   1cd3a:	2b01      	cmp	r3, #1
   1cd3c:	d1e3      	bne.n	1cd06 <virtqueue_kick+0x30>
			return (vq->vq_ring.avail->flags &
   1cd3e:	69c3      	ldr	r3, [r0, #28]
   1cd40:	e7ef      	b.n	1cd22 <virtqueue_kick+0x4c>

0001cd42 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   1cd42:	69c2      	ldr	r2, [r0, #28]
   1cd44:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   1cd46:	8853      	ldrh	r3, [r2, #2]
   1cd48:	428b      	cmp	r3, r1
   1cd4a:	d00a      	beq.n	1cd62 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   1cd4c:	8943      	ldrh	r3, [r0, #10]
   1cd4e:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   1cd50:	400b      	ands	r3, r1
   1cd52:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	len = vq->vq_ring.desc[avail_idx].len;
   1cd56:	889a      	ldrh	r2, [r3, #4]
   1cd58:	6983      	ldr	r3, [r0, #24]
   1cd5a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1cd5e:	6898      	ldr	r0, [r3, #8]
	return len;
   1cd60:	4770      	bx	lr
		return 0;
   1cd62:	2000      	movs	r0, #0
}
   1cd64:	4770      	bx	lr

0001cd66 <virtqueue_notification>:
	atomic_thread_fence(memory_order_seq_cst);
   1cd66:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   1cd6a:	68c3      	ldr	r3, [r0, #12]
   1cd6c:	b103      	cbz	r3, 1cd70 <virtqueue_notification+0xa>
		vq->callback(vq);
   1cd6e:	4718      	bx	r3
}
   1cd70:	4770      	bx	lr

0001cd72 <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1cd72:	f04f 32ff 	mov.w	r2, #4294967295
   1cd76:	f04f 33ff 	mov.w	r3, #4294967295
   1cd7a:	f7fb bc9f 	b.w	186bc <z_impl_k_sem_take>

0001cd7e <rpmsg_unregister_endpoint>:
{
   1cd7e:	b570      	push	{r4, r5, r6, lr}
   1cd80:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   1cd82:	6a05      	ldr	r5, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   1cd84:	f105 0658 	add.w	r6, r5, #88	; 0x58
   1cd88:	4630      	mov	r0, r6
   1cd8a:	f7ff fff2 	bl	1cd72 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   1cd8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1cd90:	1c5a      	adds	r2, r3, #1
   1cd92:	d010      	beq.n	1cdb6 <rpmsg_unregister_endpoint+0x38>
	addr -= RPMSG_RESERVED_ADDRESSES;
   1cd94:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
	if (addr >= 0 && addr < size)
   1cd98:	2b7f      	cmp	r3, #127	; 0x7f
   1cd9a:	d80c      	bhi.n	1cdb6 <rpmsg_unregister_endpoint+0x38>
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1cd9c:	2201      	movs	r2, #1
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1cd9e:	0959      	lsrs	r1, r3, #5
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   1cda0:	3548      	adds	r5, #72	; 0x48
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   1cda2:	f003 031f 	and.w	r3, r3, #31
   1cda6:	fa02 f303 	lsl.w	r3, r2, r3
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   1cdaa:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
   1cdae:	ea22 0203 	bic.w	r2, r2, r3
   1cdb2:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
	metal_list_del(&ept->node);
   1cdb6:	f104 0334 	add.w	r3, r4, #52	; 0x34
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   1cdba:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
   1cdbe:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   1cdc0:	6011      	str	r1, [r2, #0]
	node->prev = node;
	node->next = node;
   1cdc2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   1cdc6:	2300      	movs	r3, #0
   1cdc8:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   1cdca:	4630      	mov	r0, r6
}
   1cdcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cdd0:	f7fb bc38 	b.w	18644 <z_impl_k_sem_give>

0001cdd4 <rpmsg_send_ns_message>:
{
   1cdd4:	b510      	push	{r4, lr}
	ns_msg.addr = ept->addr;
   1cdd6:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
   1cdd8:	b08c      	sub	sp, #48	; 0x30
   1cdda:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   1cddc:	910b      	str	r1, [sp, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1cdde:	2220      	movs	r2, #32
   1cde0:	4601      	mov	r1, r0
   1cde2:	a802      	add	r0, sp, #8
	ns_msg.addr = ept->addr;
   1cde4:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   1cde6:	f7fd fff2 	bl	1adce <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   1cdea:	2328      	movs	r3, #40	; 0x28
   1cdec:	2201      	movs	r2, #1
   1cdee:	4620      	mov	r0, r4
   1cdf0:	e9cd 3200 	strd	r3, r2, [sp]
   1cdf4:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1cdf6:	2235      	movs	r2, #53	; 0x35
   1cdf8:	ab02      	add	r3, sp, #8
   1cdfa:	f7f9 fbef 	bl	165dc <rpmsg_send_offchannel_raw>
}
   1cdfe:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1ce02:	b00c      	add	sp, #48	; 0x30
   1ce04:	bd10      	pop	{r4, pc}

0001ce06 <rpmsg_get_endpoint>:
{
   1ce06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ce0a:	4680      	mov	r8, r0
   1ce0c:	4689      	mov	r9, r1
   1ce0e:	4615      	mov	r5, r2
   1ce10:	461e      	mov	r6, r3
	metal_list_for_each(&rdev->endpoints, node) {
   1ce12:	6807      	ldr	r7, [r0, #0]
   1ce14:	45b8      	cmp	r8, r7
   1ce16:	d101      	bne.n	1ce1c <rpmsg_get_endpoint+0x16>
	return NULL;
   1ce18:	2400      	movs	r4, #0
   1ce1a:	e021      	b.n	1ce60 <rpmsg_get_endpoint+0x5a>
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1ce1c:	1c69      	adds	r1, r5, #1
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   1ce1e:	f1a7 0434 	sub.w	r4, r7, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   1ce22:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ce24:	d006      	beq.n	1ce34 <rpmsg_get_endpoint+0x2e>
   1ce26:	429d      	cmp	r5, r3
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1ce28:	d01a      	beq.n	1ce60 <rpmsg_get_endpoint+0x5a>
		if (name)
   1ce2a:	f1b9 0f00 	cmp.w	r9, #0
   1ce2e:	d106      	bne.n	1ce3e <rpmsg_get_endpoint+0x38>
	metal_list_for_each(&rdev->endpoints, node) {
   1ce30:	683f      	ldr	r7, [r7, #0]
   1ce32:	e7ef      	b.n	1ce14 <rpmsg_get_endpoint+0xe>
		if (addr == ept->addr && dest_addr == ept->dest_addr)
   1ce34:	3301      	adds	r3, #1
   1ce36:	d1f8      	bne.n	1ce2a <rpmsg_get_endpoint+0x24>
   1ce38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ce3a:	42b3      	cmp	r3, r6
   1ce3c:	e7f4      	b.n	1ce28 <rpmsg_get_endpoint+0x22>
			name_match = !strncmp(ept->name, name,
   1ce3e:	2220      	movs	r2, #32
   1ce40:	4649      	mov	r1, r9
   1ce42:	4620      	mov	r0, r4
   1ce44:	f7fd fff1 	bl	1ae2a <strncmp>
		if (!name || !name_match)
   1ce48:	2800      	cmp	r0, #0
   1ce4a:	d1f1      	bne.n	1ce30 <rpmsg_get_endpoint+0x2a>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   1ce4c:	1c72      	adds	r2, r6, #1
   1ce4e:	d002      	beq.n	1ce56 <rpmsg_get_endpoint+0x50>
   1ce50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ce52:	42b3      	cmp	r3, r6
   1ce54:	d004      	beq.n	1ce60 <rpmsg_get_endpoint+0x5a>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   1ce56:	1c6b      	adds	r3, r5, #1
   1ce58:	d1ea      	bne.n	1ce30 <rpmsg_get_endpoint+0x2a>
   1ce5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ce5c:	3301      	adds	r3, #1
   1ce5e:	d1e7      	bne.n	1ce30 <rpmsg_get_endpoint+0x2a>
}
   1ce60:	4620      	mov	r0, r4
   1ce62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001ce66 <rpmsg_register_endpoint>:
	new_node->prev = node->prev;
   1ce66:	6842      	ldr	r2, [r0, #4]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   1ce68:	f101 0334 	add.w	r3, r1, #52	; 0x34
	new_node->next = node;
   1ce6c:	e9c1 020d 	strd	r0, r2, [r1, #52]	; 0x34
	ept->rdev = rdev;
   1ce70:	6208      	str	r0, [r1, #32]
	new_node->next->prev = new_node;
   1ce72:	6043      	str	r3, [r0, #4]
	new_node->prev->next = new_node;
   1ce74:	6b8a      	ldr	r2, [r1, #56]	; 0x38
   1ce76:	6013      	str	r3, [r2, #0]
}
   1ce78:	4770      	bx	lr

0001ce7a <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
   1ce7a:	b510      	push	{r4, lr}
	struct rpmsg_device *rdev;

	if (!ept)
   1ce7c:	4604      	mov	r4, r0
   1ce7e:	b190      	cbz	r0, 1cea6 <rpmsg_destroy_ept+0x2c>
		return;

	rdev = ept->rdev;
   1ce80:	6a03      	ldr	r3, [r0, #32]
	if (!rdev)
   1ce82:	b183      	cbz	r3, 1cea6 <rpmsg_destroy_ept+0x2c>
		return;

	if (ept->name[0] && rdev->support_ns &&
   1ce84:	7802      	ldrb	r2, [r0, #0]
   1ce86:	b14a      	cbz	r2, 1ce9c <rpmsg_destroy_ept+0x22>
   1ce88:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   1ce8c:	b133      	cbz	r3, 1ce9c <rpmsg_destroy_ept+0x22>
   1ce8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1ce90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1ce94:	d302      	bcc.n	1ce9c <rpmsg_destroy_ept+0x22>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   1ce96:	2101      	movs	r1, #1
   1ce98:	f7ff ff9c 	bl	1cdd4 <rpmsg_send_ns_message>
	rpmsg_unregister_endpoint(ept);
   1ce9c:	4620      	mov	r0, r4
}
   1ce9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rpmsg_unregister_endpoint(ept);
   1cea2:	f7ff bf6c 	b.w	1cd7e <rpmsg_unregister_endpoint>
}
   1cea6:	bd10      	pop	{r4, pc}

0001cea8 <rpmsg_virtio_tx_callback>:
}
   1cea8:	4770      	bx	lr

0001ceaa <k_sem_give>:
   1ceaa:	f7fb bbcb 	b.w	18644 <z_impl_k_sem_give>

0001ceae <__metal_mutex_acquire>:
	return z_impl_k_sem_take(sem, timeout);
   1ceae:	f04f 32ff 	mov.w	r2, #4294967295
   1ceb2:	f04f 33ff 	mov.w	r3, #4294967295
   1ceb6:	f7fb bc01 	b.w	186bc <z_impl_k_sem_take>

0001ceba <rpmsg_virtio_ns_callback>:
{
   1ceba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (len != sizeof(*ns_msg))
   1cebe:	2a28      	cmp	r2, #40	; 0x28
{
   1cec0:	4680      	mov	r8, r0
   1cec2:	460e      	mov	r6, r1
   1cec4:	b089      	sub	sp, #36	; 0x24
	if (len != sizeof(*ns_msg))
   1cec6:	d12b      	bne.n	1cf20 <rpmsg_virtio_ns_callback+0x66>
	struct rpmsg_device *rdev = ept->rdev;
   1cec8:	6a05      	ldr	r5, [r0, #32]
	metal_io_block_read(io,
   1ceca:	2320      	movs	r3, #32
	struct metal_io_region *io = rvdev->shbuf_io;
   1cecc:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
	metal_io_block_read(io,
   1ced0:	466a      	mov	r2, sp
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1ced2:	6801      	ldr	r1, [r0, #0]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   1ced4:	6884      	ldr	r4, [r0, #8]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
   1ced6:	1a71      	subs	r1, r6, r1
   1ced8:	42a1      	cmp	r1, r4
   1ceda:	bf28      	it	cs
   1cedc:	f04f 31ff 	movcs.w	r1, #4294967295
   1cee0:	f7ff fce7 	bl	1c8b2 <metal_io_block_read>
	metal_mutex_acquire(&rdev->lock);
   1cee4:	f105 0758 	add.w	r7, r5, #88	; 0x58
	dest = ns_msg->addr;
   1cee8:	f8d6 9020 	ldr.w	r9, [r6, #32]
   1ceec:	4638      	mov	r0, r7
   1ceee:	f7ff ffde 	bl	1ceae <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1cef2:	464b      	mov	r3, r9
   1cef4:	f04f 32ff 	mov.w	r2, #4294967295
   1cef8:	4669      	mov	r1, sp
   1cefa:	4628      	mov	r0, r5
   1cefc:	f7ff ff83 	bl	1ce06 <rpmsg_get_endpoint>
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1cf00:	6a73      	ldr	r3, [r6, #36]	; 0x24
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   1cf02:	4604      	mov	r4, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   1cf04:	07db      	lsls	r3, r3, #31
   1cf06:	d50f      	bpl.n	1cf28 <rpmsg_virtio_ns_callback+0x6e>
		if (_ept)
   1cf08:	b110      	cbz	r0, 1cf10 <rpmsg_virtio_ns_callback+0x56>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   1cf0a:	f04f 33ff 	mov.w	r3, #4294967295
   1cf0e:	6283      	str	r3, [r0, #40]	; 0x28
   1cf10:	4638      	mov	r0, r7
   1cf12:	f7ff ffca 	bl	1ceaa <k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   1cf16:	b11c      	cbz	r4, 1cf20 <rpmsg_virtio_ns_callback+0x66>
   1cf18:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cf1a:	b10b      	cbz	r3, 1cf20 <rpmsg_virtio_ns_callback+0x66>
			_ept->ns_unbind_cb(ept);
   1cf1c:	4640      	mov	r0, r8
   1cf1e:	4798      	blx	r3
}
   1cf20:	2000      	movs	r0, #0
   1cf22:	b009      	add	sp, #36	; 0x24
   1cf24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!_ept) {
   1cf28:	b950      	cbnz	r0, 1cf40 <rpmsg_virtio_ns_callback+0x86>
   1cf2a:	4638      	mov	r0, r7
   1cf2c:	f7ff ffbd 	bl	1ceaa <k_sem_give>
			if (rdev->ns_bind_cb)
   1cf30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   1cf32:	2b00      	cmp	r3, #0
   1cf34:	d0f4      	beq.n	1cf20 <rpmsg_virtio_ns_callback+0x66>
				rdev->ns_bind_cb(rdev, name, dest);
   1cf36:	464a      	mov	r2, r9
   1cf38:	4669      	mov	r1, sp
   1cf3a:	4628      	mov	r0, r5
   1cf3c:	4798      	blx	r3
   1cf3e:	e7ef      	b.n	1cf20 <rpmsg_virtio_ns_callback+0x66>
			_ept->dest_addr = dest;
   1cf40:	f8c0 9028 	str.w	r9, [r0, #40]	; 0x28
   1cf44:	4638      	mov	r0, r7
   1cf46:	f7ff ffb0 	bl	1ceaa <k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   1cf4a:	e7e9      	b.n	1cf20 <rpmsg_virtio_ns_callback+0x66>

0001cf4c <rpmsg_virtio_get_rx_buffer>:
{
   1cf4c:	b430      	push	{r4, r5}
	return rvdev->vdev->role;
   1cf4e:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
   1cf50:	4613      	mov	r3, r2
   1cf52:	69ad      	ldr	r5, [r5, #24]
	if (role == RPMSG_MASTER) {
   1cf54:	b925      	cbnz	r5, 1cf60 <rpmsg_virtio_get_rx_buffer+0x14>
}
   1cf56:	bc30      	pop	{r4, r5}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   1cf58:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1cf5c:	f7ff be07 	b.w	1cb6e <virtqueue_get_buffer>
	if (role == RPMSG_REMOTE) {
   1cf60:	2d01      	cmp	r5, #1
   1cf62:	d106      	bne.n	1cf72 <rpmsg_virtio_get_rx_buffer+0x26>
}
   1cf64:	bc30      	pop	{r4, r5}
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   1cf66:	460a      	mov	r2, r1
   1cf68:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
   1cf6c:	4619      	mov	r1, r3
   1cf6e:	f7ff be38 	b.w	1cbe2 <virtqueue_get_available_buffer>
}
   1cf72:	2000      	movs	r0, #0
   1cf74:	bc30      	pop	{r4, r5}
   1cf76:	4770      	bx	lr

0001cf78 <rpmsg_virtio_rx_callback>:
{
   1cf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1cf7c:	6803      	ldr	r3, [r0, #0]
{
   1cf7e:	b086      	sub	sp, #24
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   1cf80:	6a5e      	ldr	r6, [r3, #36]	; 0x24
	metal_mutex_acquire(&rdev->lock);
   1cf82:	f106 0758 	add.w	r7, r6, #88	; 0x58
	__metal_mutex_acquire(mutex);
   1cf86:	4638      	mov	r0, r7
   1cf88:	f7ff ff91 	bl	1ceae <__metal_mutex_acquire>
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1cf8c:	4630      	mov	r0, r6
   1cf8e:	f10d 020a 	add.w	r2, sp, #10
   1cf92:	a903      	add	r1, sp, #12
   1cf94:	f7ff ffda 	bl	1cf4c <rpmsg_virtio_get_rx_buffer>
   1cf98:	4604      	mov	r4, r0
   1cf9a:	4638      	mov	r0, r7
   1cf9c:	f7ff ff85 	bl	1ceaa <k_sem_give>
	while (rp_hdr) {
   1cfa0:	b914      	cbnz	r4, 1cfa8 <rpmsg_virtio_rx_callback+0x30>
}
   1cfa2:	b006      	add	sp, #24
   1cfa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cfa8:	4638      	mov	r0, r7
   1cfaa:	f7ff ff80 	bl	1ceae <__metal_mutex_acquire>
			     struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   1cfae:	f04f 33ff 	mov.w	r3, #4294967295
   1cfb2:	2100      	movs	r1, #0
   1cfb4:	4630      	mov	r0, r6
   1cfb6:	6862      	ldr	r2, [r4, #4]
   1cfb8:	f7ff ff25 	bl	1ce06 <rpmsg_get_endpoint>
   1cfbc:	4605      	mov	r5, r0
   1cfbe:	4638      	mov	r0, r7
   1cfc0:	f7ff ff73 	bl	1ceaa <k_sem_give>
		if (ept) {
   1cfc4:	b185      	cbz	r5, 1cfe8 <rpmsg_virtio_rx_callback+0x70>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1cfc6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
				ept->dest_addr = rp_hdr->src;
   1cfc8:	6823      	ldr	r3, [r4, #0]
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   1cfca:	3201      	adds	r2, #1
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1cfcc:	6be9      	ldr	r1, [r5, #60]	; 0x3c
				ept->dest_addr = rp_hdr->src;
   1cfce:	bf08      	it	eq
   1cfd0:	62ab      	streq	r3, [r5, #40]	; 0x28
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   1cfd2:	89a2      	ldrh	r2, [r4, #12]
   1cfd4:	9100      	str	r1, [sp, #0]
   1cfd6:	4628      	mov	r0, r5
   1cfd8:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
   1cfdc:	f104 0110 	add.w	r1, r4, #16
   1cfe0:	47c0      	blx	r8
			RPMSG_ASSERT(status >= 0,
   1cfe2:	2800      	cmp	r0, #0
   1cfe4:	da00      	bge.n	1cfe8 <rpmsg_virtio_rx_callback+0x70>
   1cfe6:	e7fe      	b.n	1cfe6 <rpmsg_virtio_rx_callback+0x6e>
   1cfe8:	4638      	mov	r0, r7
   1cfea:	f7ff ff60 	bl	1ceae <__metal_mutex_acquire>
   1cfee:	6ff2      	ldr	r2, [r6, #124]	; 0x7c
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   1cff0:	9b03      	ldr	r3, [sp, #12]
   1cff2:	6992      	ldr	r2, [r2, #24]
	if (role == RPMSG_MASTER) {
   1cff4:	b9b2      	cbnz	r2, 1d024 <rpmsg_virtio_rx_callback+0xac>
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1cff6:	9400      	str	r4, [sp, #0]
		vqbuf.len = len;
   1cff8:	e9cd 4304 	strd	r4, r3, [sp, #16]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   1cffc:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1d000:	2301      	movs	r3, #1
   1d002:	a904      	add	r1, sp, #16
   1d004:	f7ff fd53 	bl	1caae <virtqueue_add_buffer>
		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   1d008:	4630      	mov	r0, r6
   1d00a:	f10d 020a 	add.w	r2, sp, #10
   1d00e:	a903      	add	r1, sp, #12
   1d010:	f7ff ff9c 	bl	1cf4c <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   1d014:	4604      	mov	r4, r0
   1d016:	2800      	cmp	r0, #0
   1d018:	d1bf      	bne.n	1cf9a <rpmsg_virtio_rx_callback+0x22>
			virtqueue_kick(rvdev->rvq);
   1d01a:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1d01e:	f7ff fe5a 	bl	1ccd6 <virtqueue_kick>
   1d022:	e7ba      	b.n	1cf9a <rpmsg_virtio_rx_callback+0x22>
	if (role == RPMSG_REMOTE) {
   1d024:	2a01      	cmp	r2, #1
   1d026:	d1ef      	bne.n	1d008 <rpmsg_virtio_rx_callback+0x90>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   1d028:	461a      	mov	r2, r3
   1d02a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   1d02e:	f8d6 0080 	ldr.w	r0, [r6, #128]	; 0x80
   1d032:	f7f9 fab7 	bl	165a4 <virtqueue_add_consumed_buffer>
   1d036:	e7e7      	b.n	1d008 <rpmsg_virtio_rx_callback+0x90>

0001d038 <_rpmsg_virtio_get_buffer_size>:
{
   1d038:	b508      	push	{r3, lr}
   1d03a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1d03c:	699b      	ldr	r3, [r3, #24]
	if (role == RPMSG_MASTER) {
   1d03e:	b14b      	cbz	r3, 1d054 <_rpmsg_virtio_get_buffer_size+0x1c>
	if (role == RPMSG_REMOTE) {
   1d040:	2b01      	cmp	r3, #1
   1d042:	d10a      	bne.n	1d05a <_rpmsg_virtio_get_buffer_size+0x22>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   1d044:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
   1d048:	f7ff fe7b 	bl	1cd42 <virtqueue_get_desc_size>
   1d04c:	3810      	subs	r0, #16
   1d04e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1d052:	bd08      	pop	{r3, pc}
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
   1d054:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
   1d058:	e7fb      	b.n	1d052 <_rpmsg_virtio_get_buffer_size+0x1a>
	int length = 0;
   1d05a:	2000      	movs	r0, #0
	return length;
   1d05c:	e7f9      	b.n	1d052 <_rpmsg_virtio_get_buffer_size+0x1a>

0001d05e <rpmsg_virtio_shm_pool_get_buffer>:
{
   1d05e:	4603      	mov	r3, r0
	if (shpool->avail < size)
   1d060:	6842      	ldr	r2, [r0, #4]
{
   1d062:	b510      	push	{r4, lr}
	if (shpool->avail < size)
   1d064:	428a      	cmp	r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1d066:	bf29      	itett	cs
   1d068:	6880      	ldrcs	r0, [r0, #8]
		return NULL;
   1d06a:	2000      	movcc	r0, #0
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1d06c:	1a84      	subcs	r4, r0, r2
   1d06e:	6818      	ldrcs	r0, [r3, #0]
	shpool->avail -= size;
   1d070:	bf22      	ittt	cs
   1d072:	1a52      	subcs	r2, r2, r1
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   1d074:	1900      	addcs	r0, r0, r4
	shpool->avail -= size;
   1d076:	605a      	strcs	r2, [r3, #4]
}
   1d078:	bd10      	pop	{r4, pc}

0001d07a <rpmsg_virtio_init_shm_pool>:
	if (!shpool)
   1d07a:	b110      	cbz	r0, 1d082 <rpmsg_virtio_init_shm_pool+0x8>
	shpool->avail = size;
   1d07c:	e9c0 2201 	strd	r2, r2, [r0, #4]
	shpool->base = shb;
   1d080:	6001      	str	r1, [r0, #0]
}
   1d082:	4770      	bx	lr

0001d084 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   1d084:	f7fd b866 	b.w	1a154 <z_clock_idle_exit>

0001d088 <k_heap_init>:
{
   1d088:	b410      	push	{r4}
   1d08a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1d08e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1d092:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1d094:	f7ed ba9c 	b.w	a5d0 <sys_heap_init>

0001d098 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   1d098:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1d09c:	428b      	cmp	r3, r1
   1d09e:	d001      	beq.n	1d0a4 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   1d0a0:	f7fb b89e 	b.w	181e0 <z_set_prio>
}
   1d0a4:	2000      	movs	r0, #0
   1d0a6:	4770      	bx	lr

0001d0a8 <z_impl_k_mutex_init>:
{
   1d0a8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1d0aa:	2000      	movs	r0, #0
   1d0ac:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   1d0b0:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   1d0b4:	4770      	bx	lr

0001d0b6 <z_queue_node_peek>:
{
   1d0b6:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1d0b8:	4604      	mov	r4, r0
   1d0ba:	b130      	cbz	r0, 1d0ca <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d0bc:	6802      	ldr	r2, [r0, #0]
   1d0be:	0793      	lsls	r3, r2, #30
   1d0c0:	d003      	beq.n	1d0ca <z_queue_node_peek+0x14>
		ret = anode->data;
   1d0c2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1d0c4:	b109      	cbz	r1, 1d0ca <z_queue_node_peek+0x14>
			k_free(anode);
   1d0c6:	f000 f982 	bl	1d3ce <k_free>
}
   1d0ca:	4620      	mov	r0, r4
   1d0cc:	bd10      	pop	{r4, pc}

0001d0ce <z_impl_k_queue_init>:
	list->head = NULL;
   1d0ce:	2300      	movs	r3, #0
	list->tail = NULL;
   1d0d0:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   1d0d4:	6083      	str	r3, [r0, #8]
   1d0d6:	f100 030c 	add.w	r3, r0, #12
   1d0da:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   1d0de:	f100 0314 	add.w	r3, r0, #20
   1d0e2:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   1d0e6:	4770      	bx	lr

0001d0e8 <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   1d0e8:	2301      	movs	r3, #1
{
   1d0ea:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   1d0ec:	9300      	str	r3, [sp, #0]
   1d0ee:	2300      	movs	r3, #0
{
   1d0f0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1d0f2:	4619      	mov	r1, r3
   1d0f4:	f7fa f95c 	bl	173b0 <queue_insert>
}
   1d0f8:	b003      	add	sp, #12
   1d0fa:	f85d fb04 	ldr.w	pc, [sp], #4

0001d0fe <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false, false);
   1d0fe:	2300      	movs	r3, #0
{
   1d100:	b507      	push	{r0, r1, r2, lr}
   1d102:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1d104:	9300      	str	r3, [sp, #0]
   1d106:	4619      	mov	r1, r3
   1d108:	f7fa f952 	bl	173b0 <queue_insert>
}
   1d10c:	b003      	add	sp, #12
   1d10e:	f85d fb04 	ldr.w	pc, [sp], #4

0001d112 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1d112:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1d116:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1d11a:	4298      	cmp	r0, r3
   1d11c:	bfac      	ite	ge
   1d11e:	2000      	movge	r0, #0
   1d120:	2001      	movlt	r0, #1
   1d122:	4770      	bx	lr

0001d124 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1d124:	4603      	mov	r3, r0
   1d126:	b920      	cbnz	r0, 1d132 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d128:	f3ef 8205 	mrs	r2, IPSR
   1d12c:	b90a      	cbnz	r2, 1d132 <z_reschedule_irqlock+0xe>
   1d12e:	f7ef bdcf 	b.w	ccd0 <arch_swap>
   1d132:	f383 8811 	msr	BASEPRI, r3
   1d136:	f3bf 8f6f 	isb	sy
}
   1d13a:	4770      	bx	lr

0001d13c <z_reschedule_unlocked>:
	__asm__ volatile(
   1d13c:	f04f 0320 	mov.w	r3, #32
   1d140:	f3ef 8011 	mrs	r0, BASEPRI
   1d144:	f383 8811 	msr	BASEPRI, r3
   1d148:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1d14c:	f7ff bfea 	b.w	1d124 <z_reschedule_irqlock>

0001d150 <unpend_thread_no_timeout>:
{
   1d150:	b510      	push	{r4, lr}
   1d152:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1d154:	f7fa fa66 	bl	17624 <pended_on>
   1d158:	4621      	mov	r1, r4
   1d15a:	f7fa fb6b 	bl	17834 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1d15e:	7b63      	ldrb	r3, [r4, #13]
   1d160:	f023 0302 	bic.w	r3, r3, #2
   1d164:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1d166:	2300      	movs	r3, #0
   1d168:	60a3      	str	r3, [r4, #8]
}
   1d16a:	bd10      	pop	{r4, pc}

0001d16c <z_priq_dumb_best>:
{
   1d16c:	4603      	mov	r3, r0
	return list->head == list;
   1d16e:	6800      	ldr	r0, [r0, #0]
}
   1d170:	4283      	cmp	r3, r0
   1d172:	bf08      	it	eq
   1d174:	2000      	moveq	r0, #0
   1d176:	4770      	bx	lr

0001d178 <z_unpend_all>:
{
   1d178:	b538      	push	{r3, r4, r5, lr}
   1d17a:	4605      	mov	r5, r0
	int need_sched = 0;
   1d17c:	2000      	movs	r0, #0
   1d17e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d180:	42a5      	cmp	r5, r4
   1d182:	d000      	beq.n	1d186 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1d184:	b904      	cbnz	r4, 1d188 <z_unpend_all+0x10>
}
   1d186:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1d188:	4620      	mov	r0, r4
   1d18a:	f7fa fb7f 	bl	1788c <z_unpend_thread>
		z_ready_thread(thread);
   1d18e:	4620      	mov	r0, r4
   1d190:	f7fa fc96 	bl	17ac0 <z_ready_thread>
		need_sched = 1;
   1d194:	2001      	movs	r0, #1
   1d196:	e7f2      	b.n	1d17e <z_unpend_all+0x6>

0001d198 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1d198:	b15a      	cbz	r2, 1d1b2 <z_impl_k_sem_init+0x1a>
   1d19a:	428a      	cmp	r2, r1
   1d19c:	d309      	bcc.n	1d1b2 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1d19e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1d1a2:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1d1a6:	e9c0 0000 	strd	r0, r0, [r0]
   1d1aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1d1ae:	2000      	movs	r0, #0
   1d1b0:	4770      	bx	lr
		return -EINVAL;
   1d1b2:	f06f 0015 	mvn.w	r0, #21
}
   1d1b6:	4770      	bx	lr

0001d1b8 <k_is_in_isr>:
   1d1b8:	f3ef 8005 	mrs	r0, IPSR
}
   1d1bc:	3800      	subs	r0, #0
   1d1be:	bf18      	it	ne
   1d1c0:	2001      	movne	r0, #1
   1d1c2:	4770      	bx	lr

0001d1c4 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1d1c4:	b108      	cbz	r0, 1d1ca <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1d1c6:	f7ed be4d 	b.w	ae64 <arch_busy_wait>
}
   1d1ca:	4770      	bx	lr

0001d1cc <z_impl_k_thread_name_set>:
}
   1d1cc:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1d1d0:	4770      	bx	lr

0001d1d2 <k_thread_name_get>:
}
   1d1d2:	2000      	movs	r0, #0
   1d1d4:	4770      	bx	lr

0001d1d6 <k_work_submit_to_queue>:
{
   1d1d6:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d1d8:	f101 0308 	add.w	r3, r1, #8
   1d1dc:	e8d3 2fef 	ldaex	r2, [r3]
   1d1e0:	f042 0c01 	orr.w	ip, r2, #1
   1d1e4:	e8c3 cfee 	stlex	lr, ip, [r3]
   1d1e8:	f1be 0f00 	cmp.w	lr, #0
   1d1ec:	d1f6      	bne.n	1d1dc <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1d1ee:	07d3      	lsls	r3, r2, #31
   1d1f0:	d403      	bmi.n	1d1fa <k_work_submit_to_queue+0x24>
}
   1d1f2:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1d1f6:	f7ff bf77 	b.w	1d0e8 <k_queue_append>
}
   1d1fa:	f85d fb04 	ldr.w	pc, [sp], #4

0001d1fe <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1d1fe:	f1a0 0110 	sub.w	r1, r0, #16
   1d202:	6980      	ldr	r0, [r0, #24]
   1d204:	f7ff bfe7 	b.w	1d1d6 <k_work_submit_to_queue>

0001d208 <work_cancel>:
{
   1d208:	b570      	push	{r4, r5, r6, lr}
   1d20a:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1d20c:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d210:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   1d214:	07db      	lsls	r3, r3, #31
   1d216:	d52f      	bpl.n	1d278 <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1d218:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1d21a:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   1d21c:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1d21e:	b913      	cbnz	r3, 1d226 <work_cancel+0x1e>
			return -EINVAL;
   1d220:	f06f 0015 	mvn.w	r0, #21
}
   1d224:	bd70      	pop	{r4, r5, r6, pc}
   1d226:	429c      	cmp	r4, r3
   1d228:	d121      	bne.n	1d26e <work_cancel+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d22a:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   1d22c:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d22e:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   1d232:	b991      	cbnz	r1, 1d25a <work_cancel+0x52>
   1d234:	42b4      	cmp	r4, r6
	list->head = node;
   1d236:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1d238:	d100      	bne.n	1d23c <work_cancel+0x34>
	list->tail = node;
   1d23a:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d23c:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d23e:	f003 0303 	and.w	r3, r3, #3
   1d242:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1d244:	2000      	movs	r0, #0
   1d246:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d248:	e8d5 3fef 	ldaex	r3, [r5]
   1d24c:	f023 0301 	bic.w	r3, r3, #1
   1d250:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1d254:	2a00      	cmp	r2, #0
   1d256:	d0e5      	beq.n	1d224 <work_cancel+0x1c>
   1d258:	e7f6      	b.n	1d248 <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1d25a:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1d25c:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1d25e:	f003 0303 	and.w	r3, r3, #3
   1d262:	ea43 0300 	orr.w	r3, r3, r0
   1d266:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1d268:	bf08      	it	eq
   1d26a:	6051      	streq	r1, [r2, #4]
}
   1d26c:	e7e6      	b.n	1d23c <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1d26e:	6818      	ldr	r0, [r3, #0]
   1d270:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1d272:	f020 0303 	bic.w	r3, r0, #3
   1d276:	e7d2      	b.n	1d21e <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   1d278:	3010      	adds	r0, #16
   1d27a:	f7fb fe13 	bl	18ea4 <z_abort_timeout>
		if (err) {
   1d27e:	2800      	cmp	r0, #0
   1d280:	d0e0      	beq.n	1d244 <work_cancel+0x3c>
			return -EALREADY;
   1d282:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1d286:	e7cd      	b.n	1d224 <work_cancel+0x1c>

0001d288 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1d288:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1d28a:	f7fb ff59 	bl	19140 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1d28e:	bd08      	pop	{r3, pc}

0001d290 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1d290:	f7fb bf56 	b.w	19140 <z_tick_get>

0001d294 <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d294:	f1b1 3fff 	cmp.w	r1, #4294967295
   1d298:	bf08      	it	eq
   1d29a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1d29e:	b538      	push	{r3, r4, r5, lr}
   1d2a0:	4605      	mov	r5, r0
   1d2a2:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1d2a4:	d01d      	beq.n	1d2e2 <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d2a6:	ea51 0300 	orrs.w	r3, r1, r0
   1d2aa:	d103      	bne.n	1d2b4 <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   1d2ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1d2b0:	f7fb bf46 	b.w	19140 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1d2b4:	f06f 0301 	mvn.w	r3, #1
   1d2b8:	1a18      	subs	r0, r3, r0
   1d2ba:	f04f 33ff 	mov.w	r3, #4294967295
   1d2be:	eb63 0101 	sbc.w	r1, r3, r1
   1d2c2:	2900      	cmp	r1, #0
   1d2c4:	da0c      	bge.n	1d2e0 <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   1d2c6:	f7fb ff3b 	bl	19140 <z_tick_get>
   1d2ca:	2d01      	cmp	r5, #1
   1d2cc:	4622      	mov	r2, r4
   1d2ce:	f174 0400 	sbcs.w	r4, r4, #0
   1d2d2:	462b      	mov	r3, r5
   1d2d4:	bfbc      	itt	lt
   1d2d6:	2301      	movlt	r3, #1
   1d2d8:	2200      	movlt	r2, #0
   1d2da:	1818      	adds	r0, r3, r0
   1d2dc:	eb41 0102 	adc.w	r1, r1, r2
}
   1d2e0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   1d2e2:	f04f 30ff 	mov.w	r0, #4294967295
   1d2e6:	4601      	mov	r1, r0
   1d2e8:	e7fa      	b.n	1d2e0 <z_timeout_end_calc+0x4c>

0001d2ea <k_work_submit_to_queue>:
{
   1d2ea:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d2ec:	f101 0308 	add.w	r3, r1, #8
   1d2f0:	e8d3 2fef 	ldaex	r2, [r3]
   1d2f4:	f042 0c01 	orr.w	ip, r2, #1
   1d2f8:	e8c3 cfee 	stlex	lr, ip, [r3]
   1d2fc:	f1be 0f00 	cmp.w	lr, #0
   1d300:	d1f6      	bne.n	1d2f0 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1d302:	07d3      	lsls	r3, r2, #31
   1d304:	d403      	bmi.n	1d30e <k_work_submit_to_queue+0x24>
}
   1d306:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1d30a:	f7ff beed 	b.w	1d0e8 <k_queue_append>
}
   1d30e:	f85d fb04 	ldr.w	pc, [sp], #4

0001d312 <add_event>:
{
   1d312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d314:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1d316:	e9d0 2300 	ldrd	r2, r3, [r0]
   1d31a:	4290      	cmp	r0, r2
   1d31c:	4604      	mov	r4, r0
   1d31e:	460d      	mov	r5, r1
   1d320:	d106      	bne.n	1d330 <add_event+0x1e>
	node->prev = list->tail;
   1d322:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1d324:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   1d326:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1d328:	6863      	ldr	r3, [r4, #4]
   1d32a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1d32c:	6065      	str	r5, [r4, #4]
}
   1d32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1d330:	2b00      	cmp	r3, #0
   1d332:	d0f6      	beq.n	1d322 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1d334:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d336:	b100      	cbz	r0, 1d33a <add_event+0x28>
   1d338:	386c      	subs	r0, #108	; 0x6c
   1d33a:	b107      	cbz	r7, 1d33e <add_event+0x2c>
   1d33c:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   1d33e:	4639      	mov	r1, r7
   1d340:	f7ff fee7 	bl	1d112 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1d344:	2800      	cmp	r0, #0
   1d346:	d1ec      	bne.n	1d322 <add_event+0x10>
	return list->head == list;
   1d348:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d34a:	42b4      	cmp	r4, r6
   1d34c:	d0e9      	beq.n	1d322 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1d34e:	2e00      	cmp	r6, #0
   1d350:	d0e7      	beq.n	1d322 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1d352:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1d354:	b101      	cbz	r1, 1d358 <add_event+0x46>
   1d356:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   1d358:	4638      	mov	r0, r7
   1d35a:	f7ff feda 	bl	1d112 <z_is_t1_higher_prio_than_t2>
   1d35e:	b128      	cbz	r0, 1d36c <add_event+0x5a>
	node->prev = successor->prev;
   1d360:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1d362:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1d366:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1d368:	6075      	str	r5, [r6, #4]
			return;
   1d36a:	e7e0      	b.n	1d32e <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1d36c:	6863      	ldr	r3, [r4, #4]
   1d36e:	429e      	cmp	r6, r3
   1d370:	d0d7      	beq.n	1d322 <add_event+0x10>
   1d372:	6836      	ldr	r6, [r6, #0]
   1d374:	e7eb      	b.n	1d34e <add_event+0x3c>

0001d376 <z_handle_obj_poll_events>:
{
   1d376:	4603      	mov	r3, r0
	return list->head == list;
   1d378:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1d37a:	4283      	cmp	r3, r0
   1d37c:	d008      	beq.n	1d390 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1d37e:	e9d0 3200 	ldrd	r3, r2, [r0]
   1d382:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1d384:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d386:	2300      	movs	r3, #0
	node->prev = NULL;
   1d388:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1d38c:	f7fb bf16 	b.w	191bc <signal_poll_event>
}
   1d390:	4770      	bx	lr

0001d392 <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1d392:	2904      	cmp	r1, #4
{
   1d394:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   1d398:	460d      	mov	r5, r1
   1d39a:	bf38      	it	cc
   1d39c:	2504      	movcc	r5, #4
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1d39e:	1952      	adds	r2, r2, r5
{
   1d3a0:	4606      	mov	r6, r0
   1d3a2:	d209      	bcs.n	1d3b8 <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   1d3a4:	f04f 0800 	mov.w	r8, #0
   1d3a8:	f04f 0900 	mov.w	r9, #0
   1d3ac:	e9cd 8900 	strd	r8, r9, [sp]
   1d3b0:	f7f9 fcf0 	bl	16d94 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1d3b4:	4604      	mov	r4, r0
   1d3b6:	b918      	cbnz	r0, 1d3c0 <z_heap_aligned_alloc+0x2e>
		return NULL;
   1d3b8:	2000      	movs	r0, #0
}
   1d3ba:	b002      	add	sp, #8
   1d3bc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	memset(mem, 0xff, excess);
   1d3c0:	462a      	mov	r2, r5
   1d3c2:	21ff      	movs	r1, #255	; 0xff
   1d3c4:	f7fd fd7e 	bl	1aec4 <memset>
	*heap_ref = heap;
   1d3c8:	6026      	str	r6, [r4, #0]
	return mem + excess;
   1d3ca:	1960      	adds	r0, r4, r5
   1d3cc:	e7f5      	b.n	1d3ba <z_heap_aligned_alloc+0x28>

0001d3ce <k_free>:
	if (ptr != NULL) {
   1d3ce:	b138      	cbz	r0, 1d3e0 <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1d3d0:	1f03      	subs	r3, r0, #4
   1d3d2:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   1d3d4:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   1d3d8:	1c42      	adds	r2, r0, #1
   1d3da:	d0fa      	beq.n	1d3d2 <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   1d3dc:	f7f9 bd62 	b.w	16ea4 <k_heap_free>
}
   1d3e0:	4770      	bx	lr

0001d3e2 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1d3e2:	4770      	bx	lr
